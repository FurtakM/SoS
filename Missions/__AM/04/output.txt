// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4687 0 0
// PrepareRussianBase ;
  29: CALL 2976 0 0
// PrepareRussianCommander ;
  33: CALL 2927 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8306 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild = 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode = 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible = 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack = 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson = 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase = 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer = 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus = 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer = 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog = 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog = 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog = 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil = 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower = 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable = 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter = 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor = 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 39796 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 39796 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: LD_EXP 49
 585: PPUSH
 586: CALL 39796 0 3
 590: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 591: LD_ADDR_EXP 8
 595: PUSH
 596: LD_STRING Dickens
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: LD_EXP 49
 606: PPUSH
 607: CALL 39796 0 3
 611: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 612: LD_ADDR_EXP 9
 616: PUSH
 617: LD_STRING Woodruff
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_EXP 49
 627: PPUSH
 628: CALL 39796 0 3
 632: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 633: LD_ADDR_EXP 12
 637: PUSH
 638: LD_STRING Campell
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_EXP 49
 648: PPUSH
 649: CALL 39796 0 3
 653: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING Knight
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: LD_EXP 49
 669: PPUSH
 670: CALL 39796 0 3
 674: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 675: LD_ADDR_EXP 11
 679: PUSH
 680: LD_STRING Claptopn
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_EXP 49
 690: PPUSH
 691: CALL 39796 0 3
 695: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING Harisson
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: LD_EXP 49
 711: PPUSH
 712: CALL 39796 0 3
 716: ST_TO_ADDR
// if not Lisa then
 717: LD_EXP 4
 721: NOT
 722: IFFALSE 745
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 724: LD_ADDR_EXP 2
 728: PUSH
 729: LD_STRING Bobby
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_EXP 49
 739: PPUSH
 740: CALL 39796 0 3
 744: ST_TO_ADDR
// if not Lisa and not Bobby then
 745: LD_EXP 4
 749: NOT
 750: PUSH
 751: LD_EXP 2
 755: NOT
 756: AND
 757: IFFALSE 780
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 759: LD_ADDR_EXP 3
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_EXP 49
 774: PPUSH
 775: CALL 39796 0 3
 779: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 780: LD_EXP 4
 784: NOT
 785: PUSH
 786: LD_EXP 2
 790: NOT
 791: AND
 792: PUSH
 793: LD_EXP 3
 797: NOT
 798: AND
 799: IFFALSE 898
// begin tmp = CreateCharacterSet ( 03_others ) ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 31
 813: ST_TO_ADDR
// if tmp then
 814: LD_VAR 0 3
 818: IFFALSE 875
// begin RandomBeforeMission = tmp [ 1 ] ;
 820: LD_ADDR_EXP 6
 824: PUSH
 825: LD_VAR 0 3
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 834: LD_STRING 03_others
 836: PPUSH
 837: CALL_OW 40
// if tmp > 1 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: GREATER
 849: IFFALSE 873
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: DIFF
 865: PPUSH
 866: LD_STRING 03_others
 868: PPUSH
 869: CALL_OW 38
// end else
 873: GO 898
// begin PrepareHuman ( false , 1 , 3 ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: LD_INT 3
 883: PPUSH
 884: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 888: LD_ADDR_EXP 6
 892: PUSH
 893: CALL_OW 44
 897: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 4
 905: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 906: LD_ADDR_EXP 13
 910: PUSH
 911: LD_STRING Donaldson
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: LD_EXP 49
 921: PPUSH
 922: CALL 39796 0 3
 926: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Frank
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 39796 0 3
 947: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 32
 955: PPUSH
 956: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 960: LD_EXP 7
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 975: LD_EXP 7
 979: PPUSH
 980: LD_INT 32
 982: PPUSH
 983: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 987: LD_EXP 8
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1002: LD_EXP 9
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1017: LD_EXP 12
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1032: LD_EXP 10
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1047: LD_EXP 11
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 49
// if Lisa = false then
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1087: LD_EXP 2
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// if Lisa = false and Bobby = false then
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: PUSH
1111: LD_EXP 2
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1137: LD_EXP 4
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: PUSH
1146: LD_EXP 2
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: PUSH
1156: LD_EXP 3
1160: PUSH
1161: LD_INT 0
1163: EQUAL
1164: AND
1165: IFFALSE 1182
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1167: LD_EXP 6
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 49
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1187: LD_INT 0
1189: PPUSH
1190: PPUSH
1191: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1192: LD_EXP 13
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// if Frank then
1207: LD_EXP 5
1211: IFFALSE 1228
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1213: LD_EXP 5
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// uc_nation = 1 ;
1228: LD_ADDR_OWVAR 21
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// uc_side = 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// hc_class := 3 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING SecondCharsGal
1267: ST_TO_ADDR
// hc_face_number := 53 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 53
1275: ST_TO_ADDR
// hc_name := Freddie Warner ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Freddie Warner
1283: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 8
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 2
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 56 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 56
1401: ST_TO_ADDR
// hc_name := Mel Brennan ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Mel Brennan
1409: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 12
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// hc_class := 1 ;
1496: LD_ADDR_OWVAR 28
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_sex := sex_male ;
1504: LD_ADDR_OWVAR 27
1508: PUSH
1509: LD_INT 1
1511: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING AmGalRemake
1519: ST_TO_ADDR
// hc_face_number := 5 ;
1520: LD_ADDR_OWVAR 34
1524: PUSH
1525: LD_INT 5
1527: ST_TO_ADDR
// hc_name := Bob Joplin ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Bob Joplin
1535: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1536: LD_ADDR_OWVAR 29
1540: PUSH
1541: LD_INT 10
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1551: LD_ADDR_OWVAR 30
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1574: LD_ADDR_OWVAR 31
1578: PUSH
1579: LD_INT 3
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// un = CreateHuman ;
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: CALL_OW 44
1606: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1607: LD_VAR 0 3
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// hc_class := 3 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// hc_sex := sex_female ;
1630: LD_ADDR_OWVAR 27
1634: PUSH
1635: LD_INT 2
1637: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING AmGalRemake
1645: ST_TO_ADDR
// hc_face_number := 8 ;
1646: LD_ADDR_OWVAR 34
1650: PUSH
1651: LD_INT 8
1653: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1654: LD_ADDR_OWVAR 26
1658: PUSH
1659: LD_STRING Elizabeth Whitney
1661: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1662: LD_ADDR_OWVAR 29
1666: PUSH
1667: LD_INT 9
1669: PUSH
1670: LD_INT 11
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1677: LD_ADDR_OWVAR 30
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1700: LD_ADDR_OWVAR 31
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: LD_INT 4
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// un = CreateHuman ;
1723: LD_ADDR_VAR 0 3
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// InitHc ;
1748: CALL_OW 19
// end ;
1752: LD_VAR 0 1
1756: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
1761: PPUSH
1762: PPUSH
// uc_nation = 1 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// uc_side = 1 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 2
1786: ST_TO_ADDR
// vc_engine := engine_combustion ;
1787: LD_ADDR_OWVAR 39
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_control := control_manual ;
1795: LD_ADDR_OWVAR 38
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1803: LD_ADDR_OWVAR 41
1807: PUSH
1808: LD_INT 65
1810: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_OWVAR 67
1838: ARRAY
1839: ST_TO_ADDR
// veh := CreateVehicle ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 2
1857: PPUSH
1858: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: CALL_OW 428
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: IFFALSE 1898
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1878: LD_VAR 0 5
1882: PPUSH
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 48
1896: GO 1916
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1898: LD_VAR 0 5
1902: PPUSH
1903: LD_INT 23
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 48
// hc_class := 1 ;
1916: LD_ADDR_OWVAR 28
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_sex := sex_male ;
1924: LD_ADDR_OWVAR 27
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1932: LD_ADDR_OWVAR 33
1936: PUSH
1937: LD_STRING SecondCharsGal
1939: ST_TO_ADDR
// hc_face_number := 59 ;
1940: LD_ADDR_OWVAR 34
1944: PUSH
1945: LD_INT 59
1947: ST_TO_ADDR
// hc_name := Max Gray ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING Max Gray
1955: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 9
1963: PUSH
1964: LD_INT 11
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1971: LD_ADDR_OWVAR 30
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1994: LD_ADDR_OWVAR 31
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 0
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: ST_TO_ADDR
// un = CreateHuman ;
2017: LD_ADDR_VAR 0 4
2021: PUSH
2022: CALL_OW 44
2026: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_INT 11
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// hc_class := 2 ;
2042: LD_ADDR_OWVAR 28
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_sex := sex_male ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2058: LD_ADDR_OWVAR 33
2062: PUSH
2063: LD_STRING SecondCharsGal
2065: ST_TO_ADDR
// hc_face_number := 50 ;
2066: LD_ADDR_OWVAR 34
2070: PUSH
2071: LD_INT 50
2073: ST_TO_ADDR
// hc_name := Frank Hughes ;
2074: LD_ADDR_OWVAR 26
2078: PUSH
2079: LD_STRING Frank Hughes
2081: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2082: LD_ADDR_OWVAR 29
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: LD_INT 10
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2097: LD_ADDR_OWVAR 30
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 11
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// hc_class := 1 ;
2168: LD_ADDR_OWVAR 28
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_sex := sex_male ;
2176: LD_ADDR_OWVAR 27
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2184: LD_ADDR_OWVAR 33
2188: PUSH
2189: LD_STRING SecondCharsGal
2191: ST_TO_ADDR
// hc_face_number := 54 ;
2192: LD_ADDR_OWVAR 34
2196: PUSH
2197: LD_INT 54
2199: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_STRING Luigi Ghbellin
2207: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2208: LD_ADDR_OWVAR 29
2212: PUSH
2213: LD_INT 11
2215: PUSH
2216: LD_INT 11
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2223: LD_ADDR_OWVAR 30
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2246: LD_ADDR_OWVAR 31
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// un = CreateHuman ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: CALL_OW 44
2278: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2279: LD_VAR 0 4
2283: PPUSH
2284: LD_INT 11
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL_OW 49
// hc_class := 3 ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 3
2301: ST_TO_ADDR
// hc_sex := sex_male ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2310: LD_ADDR_OWVAR 33
2314: PUSH
2315: LD_STRING AmGalRemake
2317: ST_TO_ADDR
// hc_face_number := 6 ;
2318: LD_ADDR_OWVAR 34
2322: PUSH
2323: LD_INT 6
2325: ST_TO_ADDR
// hc_name := Leon Carter ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Leon Carter
2333: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2334: LD_ADDR_OWVAR 29
2338: PUSH
2339: LD_INT 10
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2349: LD_ADDR_OWVAR 30
2353: PUSH
2354: LD_INT 0
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2372: LD_ADDR_OWVAR 31
2376: PUSH
2377: LD_INT 0
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: ST_TO_ADDR
// un = CreateHuman ;
2395: LD_ADDR_VAR 0 4
2399: PUSH
2400: CALL_OW 44
2404: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2405: LD_VAR 0 4
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 52
// if count = 4 then
2419: LD_VAR 0 1
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2555
// begin hc_class := 1 ;
2429: LD_ADDR_OWVAR 28
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_sex := sex_male ;
2437: LD_ADDR_OWVAR 27
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING SecondCharsGal
2452: ST_TO_ADDR
// hc_face_number := 34 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 34
2460: ST_TO_ADDR
// hc_name := Ian Hill ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING Ian Hill
2468: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2469: LD_ADDR_OWVAR 29
2473: PUSH
2474: LD_INT 10
2476: PUSH
2477: LD_INT 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2484: LD_ADDR_OWVAR 30
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: LD_INT 0
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2507: LD_ADDR_OWVAR 31
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: ST_TO_ADDR
// un = CreateHuman ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: CALL_OW 44
2539: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2540: LD_VAR 0 4
2544: PPUSH
2545: LD_INT 11
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 49
// end ; if count = 5 then
2555: LD_VAR 0 1
2559: PUSH
2560: LD_INT 5
2562: EQUAL
2563: IFFALSE 2817
// begin hc_class := 1 ;
2565: LD_ADDR_OWVAR 28
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_sex := sex_male ;
2573: LD_ADDR_OWVAR 27
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2581: LD_ADDR_OWVAR 33
2585: PUSH
2586: LD_STRING SecondCharsGal
2588: ST_TO_ADDR
// hc_face_number := 34 ;
2589: LD_ADDR_OWVAR 34
2593: PUSH
2594: LD_INT 34
2596: ST_TO_ADDR
// hc_name := Ian Hill ;
2597: LD_ADDR_OWVAR 26
2601: PUSH
2602: LD_STRING Ian Hill
2604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2605: LD_ADDR_OWVAR 29
2609: PUSH
2610: LD_INT 10
2612: PUSH
2613: LD_INT 12
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2620: LD_ADDR_OWVAR 30
2624: PUSH
2625: LD_INT 1
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 0
2633: PUSH
2634: LD_INT 0
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2643: LD_ADDR_OWVAR 31
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: ST_TO_ADDR
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// hc_class := 1 ;
2691: LD_ADDR_OWVAR 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// hc_sex := sex_female ;
2699: LD_ADDR_OWVAR 27
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2707: LD_ADDR_OWVAR 33
2711: PUSH
2712: LD_STRING SecondCharsGal
2714: ST_TO_ADDR
// hc_face_number := 41 ;
2715: LD_ADDR_OWVAR 34
2719: PUSH
2720: LD_INT 41
2722: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2723: LD_ADDR_OWVAR 26
2727: PUSH
2728: LD_STRING Kate Wadsworth
2730: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2731: LD_ADDR_OWVAR 29
2735: PUSH
2736: LD_INT 9
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2746: LD_ADDR_OWVAR 30
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2769: LD_ADDR_OWVAR 31
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// un = CreateHuman ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 11
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2817: LD_INT 11
2819: PPUSH
2820: LD_INT 22
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 21
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 26
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 70
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2868: LD_INT 11
2870: PPUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 26
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 70
2910: PUSH
2911: LD_INT 1
2913: ARRAY
2914: PPUSH
2915: LD_STRING D6-Sol3-1
2917: PPUSH
2918: CALL_OW 88
// end ; end_of_file
2922: LD_VAR 0 2
2926: RET
// export function PrepareRussianCommander ; begin
2927: LD_INT 0
2929: PPUSH
// uc_side = 3 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// uc_nation = 3 ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Stolypin
2953: PPUSH
2954: CALL_OW 25
2958: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2959: LD_EXP 15
2963: PPUSH
2964: LD_INT 21
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: LD_VAR 0 1
2975: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// if Difficulty > 1 then
2982: LD_OWVAR 67
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3100
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := 3 ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// InitHc_All ( ) ;
3008: CALL_OW 584
// InitBc ;
3012: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3016: LD_INT 0
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL_OW 380
// bc_type := b_breastwork ;
3029: LD_ADDR_OWVAR 42
3033: PUSH
3034: LD_INT 31
3036: ST_TO_ADDR
// bc_level := 4 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 4
3044: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3045: LD_ADDR_VAR 0 3
3049: PUSH
3050: LD_INT 100
3052: PPUSH
3053: LD_INT 58
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 5
3081: PPUSH
3082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3086: LD_VAR 0 4
3090: PPUSH
3091: LD_VAR 0 3
3095: PPUSH
3096: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3100: LD_INT 3
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 22
3108: PPUSH
3109: LD_EXP 16
3113: PPUSH
3114: LD_EXP 17
3118: PPUSH
3119: CALL_OW 12
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 4
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 6
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_OWVAR 67
3149: ARRAY
3150: PPUSH
3151: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 21
3163: PPUSH
3164: LD_EXP 16
3168: PPUSH
3169: LD_EXP 17
3173: PPUSH
3174: CALL_OW 12
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: LD_EXP 16
3202: PPUSH
3203: LD_EXP 17
3207: PPUSH
3208: CALL_OW 12
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 24
3231: PPUSH
3232: LD_EXP 16
3236: PPUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 5
3252: PPUSH
3253: CALL 4353 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3332
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3294: LD_INT 3
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: LD_EXP 17
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL 4353 0 6
3330: GO 3291
3332: POP
3333: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 30
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: FOR_IN
3369: IFFALSE 3397
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL 4462 0 2
3395: GO 3368
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 1
3403: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 6 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 6
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// InitHC_All ( ) ;
3426: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: DOUBLE
3436: LD_INT 1
3438: DEC
3439: ST_TO_ADDR
3440: LD_INT 1
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: LD_INT 2
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_OWVAR 67
3462: ARRAY
3463: PUSH
3464: FOR_TO
3465: IFFALSE 3633
// begin vc_engine = 1 ;
3467: LD_ADDR_OWVAR 39
3471: PUSH
3472: LD_INT 1
3474: ST_TO_ADDR
// vc_control = 1 ;
3475: LD_ADDR_OWVAR 38
3479: PUSH
3480: LD_INT 1
3482: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3483: LD_ADDR_OWVAR 40
3487: PUSH
3488: LD_INT 42
3490: PUSH
3491: LD_INT 42
3493: PUSH
3494: LD_INT 43
3496: PUSH
3497: LD_INT 43
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: LD_OWVAR 67
3510: ARRAY
3511: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3512: LD_ADDR_OWVAR 37
3516: PUSH
3517: LD_INT 21
3519: PUSH
3520: LD_INT 22
3522: PUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 22
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_OWVAR 67
3539: ARRAY
3540: ST_TO_ADDR
// veh = CreateVehicle ;
3541: LD_ADDR_VAR 0 3
3545: PUSH
3546: CALL_OW 45
3550: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_INT 3
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// hc_gallery =  ;
3566: LD_ADDR_OWVAR 33
3570: PUSH
3571: LD_STRING 
3573: ST_TO_ADDR
// hc_name =  ;
3574: LD_ADDR_OWVAR 26
3578: PUSH
3579: LD_STRING 
3581: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3582: LD_INT 0
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: LD_EXP 16
3592: PPUSH
3593: LD_EXP 17
3597: PPUSH
3598: CALL_OW 12
3602: PPUSH
3603: CALL_OW 380
// un = CreateHuman ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: CALL_OW 44
3616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3617: LD_VAR 0 4
3621: PPUSH
3622: LD_VAR 0 3
3626: PPUSH
3627: CALL_OW 52
// end ;
3631: GO 3464
3633: POP
3634: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3635: LD_INT 0
3637: PPUSH
3638: LD_INT 2
3640: PPUSH
3641: LD_EXP 16
3645: PPUSH
3646: LD_EXP 17
3650: PPUSH
3651: CALL_OW 12
3655: PUSH
3656: LD_INT 2
3658: PLUS
3659: PPUSH
3660: CALL_OW 380
// un = CreateHuman ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3689: LD_INT 0
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_EXP 16
3699: PPUSH
3700: LD_EXP 17
3704: PPUSH
3705: CALL_OW 12
3709: PUSH
3710: LD_INT 2
3712: PLUS
3713: PPUSH
3714: CALL_OW 380
// un = CreateHuman ;
3718: LD_ADDR_VAR 0 4
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3728: LD_VAR 0 4
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 2
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_OWVAR 67
3775: ARRAY
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 3
3782: PPUSH
3783: CALL_OW 12
3787: PLUS
3788: PUSH
3789: FOR_TO
3790: IFFALSE 3860
// begin hc_gallery =  ;
3792: LD_ADDR_OWVAR 33
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// hc_name =  ;
3800: LD_ADDR_OWVAR 26
3804: PUSH
3805: LD_STRING 
3807: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_EXP 16
3818: PPUSH
3819: LD_EXP 17
3823: PPUSH
3824: CALL_OW 12
3828: PPUSH
3829: CALL_OW 380
// un = CreateHuman ;
3833: LD_ADDR_VAR 0 4
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3843: LD_VAR 0 4
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 49
// end ;
3858: GO 3789
3860: POP
3861: POP
// vc_engine = 1 ;
3862: LD_ADDR_OWVAR 39
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// vc_control = 1 ;
3870: LD_ADDR_OWVAR 38
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// vc_weapon = 51 ;
3878: LD_ADDR_OWVAR 40
3882: PUSH
3883: LD_INT 51
3885: ST_TO_ADDR
// vc_chassis = 22 ;
3886: LD_ADDR_OWVAR 37
3890: PUSH
3891: LD_INT 22
3893: ST_TO_ADDR
// veh = CreateVehicle ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 100
3929: PPUSH
3930: CALL_OW 290
// hc_gallery =  ;
3934: LD_ADDR_OWVAR 33
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// hc_name =  ;
3942: LD_ADDR_OWVAR 26
3946: PUSH
3947: LD_STRING 
3949: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: LD_EXP 16
3960: PPUSH
3961: LD_EXP 17
3965: PPUSH
3966: CALL_OW 12
3970: PPUSH
3971: CALL_OW 380
// un = CreateHuman ;
3975: LD_ADDR_VAR 0 4
3979: PUSH
3980: CALL_OW 44
3984: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3985: LD_VAR 0 4
3989: PPUSH
3990: LD_VAR 0 3
3994: PPUSH
3995: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3999: LD_ADDR_VAR 0 2
4003: PUSH
4004: LD_INT 22
4006: PUSH
4007: LD_INT 6
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: LD_INT 25
4022: PUSH
4023: LD_INT 2
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 69
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4085
// ComAgressiveMove ( i , 45 , 46 ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_INT 45
4075: PPUSH
4076: LD_INT 46
4078: PPUSH
4079: CALL_OW 114
4083: GO 4065
4085: POP
4086: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_INT 22
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 25
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 69
4120: PUSH
4121: FOR_IN
4122: IFFALSE 4153
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4124: LD_ADDR_EXP 21
4128: PUSH
4129: LD_VAR 0 2
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: LD_INT 48
4139: PPUSH
4140: LD_INT 55
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: CALL_OW 145
4150: ST_TO_ADDR
4151: GO 4121
4153: POP
4154: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4155: LD_ADDR_VAR 0 2
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 6
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 69
4188: PUSH
4189: FOR_IN
4190: IFFALSE 4209
// ComMoveXY ( i , 39 , 55 ) ;
4192: LD_VAR 0 2
4196: PPUSH
4197: LD_INT 39
4199: PPUSH
4200: LD_INT 55
4202: PPUSH
4203: CALL_OW 111
4207: GO 4189
4209: POP
4210: POP
// end ;
4211: LD_VAR 0 1
4215: RET
// export function PrepareFirstAttack ; var i , un ; begin
4216: LD_INT 0
4218: PPUSH
4219: PPUSH
4220: PPUSH
// uc_side = 5 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 5
4228: ST_TO_ADDR
// uc_nation = 3 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 3
4236: ST_TO_ADDR
// for i := 1 to 4 do
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: DOUBLE
4243: LD_INT 1
4245: DEC
4246: ST_TO_ADDR
4247: LD_INT 4
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4338
// begin InitHC_All ( ) ;
4253: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4257: LD_INT 0
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_EXP 16
4267: PPUSH
4268: LD_EXP 17
4272: PPUSH
4273: CALL_OW 12
4277: PPUSH
4278: CALL_OW 380
// un = CreateHuman ;
4282: LD_ADDR_VAR 0 3
4286: PUSH
4287: CALL_OW 44
4291: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4292: LD_VAR 0 3
4296: PPUSH
4297: LD_INT 4
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_EXP 1
4316: PPUSH
4317: CALL_OW 250
4321: PPUSH
4322: LD_EXP 1
4326: PPUSH
4327: CALL_OW 251
4331: PPUSH
4332: CALL_OW 114
// end ;
4336: GO 4250
4338: POP
4339: POP
// firstRussianAttack = 1 ;
4340: LD_ADDR_EXP 23
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// end ; end_of_file
4348: LD_VAR 0 1
4352: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4353: LD_INT 0
4355: PPUSH
4356: PPUSH
4357: PPUSH
// for i = 1 to count do
4358: LD_ADDR_VAR 0 8
4362: PUSH
4363: DOUBLE
4364: LD_INT 1
4366: DEC
4367: ST_TO_ADDR
4368: LD_VAR 0 6
4372: PUSH
4373: FOR_TO
4374: IFFALSE 4455
// begin uc_side = side ;
4376: LD_ADDR_OWVAR 20
4380: PUSH
4381: LD_VAR 0 1
4385: ST_TO_ADDR
// uc_nation = nation ;
4386: LD_ADDR_OWVAR 21
4390: PUSH
4391: LD_VAR 0 2
4395: ST_TO_ADDR
// hc_gallery =  ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING 
4403: ST_TO_ADDR
// hc_name =  ;
4404: LD_ADDR_OWVAR 26
4408: PUSH
4409: LD_STRING 
4411: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4412: LD_INT 0
4414: PPUSH
4415: LD_VAR 0 5
4419: PPUSH
4420: LD_VAR 0 4
4424: PPUSH
4425: CALL_OW 380
// un = CreateHuman ;
4429: LD_ADDR_VAR 0 9
4433: PUSH
4434: CALL_OW 44
4438: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4439: LD_VAR 0 9
4443: PPUSH
4444: LD_VAR 0 3
4448: PPUSH
4449: CALL_OW 52
// end ;
4453: GO 4373
4455: POP
4456: POP
// end ;
4457: LD_VAR 0 7
4461: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4462: LD_INT 0
4464: PPUSH
4465: PPUSH
4466: PPUSH
// uc_side := GetSide ( b ) ;
4467: LD_ADDR_OWVAR 20
4471: PUSH
4472: LD_VAR 0 2
4476: PPUSH
4477: CALL_OW 255
4481: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4482: LD_ADDR_OWVAR 21
4486: PUSH
4487: LD_VAR 0 2
4491: PPUSH
4492: CALL_OW 248
4496: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4497: LD_INT 0
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 380
// un = CreateHuman ;
4512: LD_ADDR_VAR 0 4
4516: PUSH
4517: CALL_OW 44
4521: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4522: LD_ADDR_VAR 0 5
4526: PUSH
4527: LD_VAR 0 2
4531: PPUSH
4532: CALL_OW 254
4536: PUSH
4537: LD_INT 3
4539: MINUS
4540: ST_TO_ADDR
// if dir < 0 then
4541: LD_VAR 0 5
4545: PUSH
4546: LD_INT 0
4548: LESS
4549: IFFALSE 4565
// dir := 6 + dir ;
4551: LD_ADDR_VAR 0 5
4555: PUSH
4556: LD_INT 6
4558: PUSH
4559: LD_VAR 0 5
4563: PLUS
4564: ST_TO_ADDR
// SetDir ( un , dir ) ;
4565: LD_VAR 0 4
4569: PPUSH
4570: LD_VAR 0 5
4574: PPUSH
4575: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: LD_VAR 0 2
4588: PPUSH
4589: CALL_OW 52
// end ;
4593: LD_VAR 0 3
4597: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4598: LD_INT 0
4600: PPUSH
4601: PPUSH
4602: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4603: LD_ADDR_VAR 0 6
4607: PUSH
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: PPUSH
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 12
4625: ARRAY
4626: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4627: LD_VAR 0 6
4631: PPUSH
4632: CALL_OW 258
4636: PUSH
4637: LD_INT 1
4639: EQUAL
4640: IFFALSE 4658
// Say ( speaker , dialogMID ) else
4642: LD_VAR 0 6
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: CALL_OW 88
4656: GO 4672
// Say ( speaker , dialogFID ) ;
4658: LD_VAR 0 6
4662: PPUSH
4663: LD_VAR 0 3
4667: PPUSH
4668: CALL_OW 88
// result := speaker ;
4672: LD_ADDR_VAR 0 4
4676: PUSH
4677: LD_VAR 0 6
4681: ST_TO_ADDR
// end ;
4682: LD_VAR 0 4
4686: RET
// export function PrepareDifficulty ; var tmp ; begin
4687: LD_INT 0
4689: PPUSH
4690: PPUSH
// if Difficulty = 1 then
4691: LD_OWVAR 67
4695: PUSH
4696: LD_INT 1
4698: EQUAL
4699: IFFALSE 4717
// begin RuSoldMinLevel = 1 ;
4701: LD_ADDR_EXP 16
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4709: LD_ADDR_EXP 17
4713: PUSH
4714: LD_INT 2
4716: ST_TO_ADDR
// end ; if Difficulty = 2 then
4717: LD_OWVAR 67
4721: PUSH
4722: LD_INT 2
4724: EQUAL
4725: IFFALSE 4826
// begin RuSoldMinLevel = 2 ;
4727: LD_ADDR_EXP 16
4731: PUSH
4732: LD_INT 2
4734: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4735: LD_ADDR_EXP 17
4739: PUSH
4740: LD_INT 3
4742: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4743: LD_INT 23
4745: PPUSH
4746: CALL_OW 64
// uc_nation = 3 ;
4750: LD_ADDR_OWVAR 21
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// uc_side = 3 ;
4758: LD_ADDR_OWVAR 20
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// bc_level = 5 ;
4766: LD_ADDR_OWVAR 43
4770: PUSH
4771: LD_INT 5
4773: ST_TO_ADDR
// bc_type = 32 ;
4774: LD_ADDR_OWVAR 42
4778: PUSH
4779: LD_INT 32
4781: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: LD_INT 76
4789: PPUSH
4790: LD_INT 91
4792: PPUSH
4793: LD_INT 2
4795: PPUSH
4796: CALL_OW 47
4800: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4801: LD_VAR 0 2
4805: PPUSH
4806: LD_INT 43
4808: PPUSH
4809: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4813: LD_INT 51
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 322
// end ; if Difficulty >= 3 then
4826: LD_OWVAR 67
4830: PUSH
4831: LD_INT 3
4833: GREATEREQUAL
4834: IFFALSE 4998
// begin RuSoldMinLevel = Difficulty ;
4836: LD_ADDR_EXP 16
4840: PUSH
4841: LD_OWVAR 67
4845: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4846: LD_ADDR_EXP 17
4850: PUSH
4851: LD_INT 4
4853: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4854: LD_INT 26
4856: PPUSH
4857: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4861: LD_INT 23
4863: PPUSH
4864: CALL_OW 64
// uc_nation = 3 ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// uc_side = 3 ;
4876: LD_ADDR_OWVAR 20
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// bc_level = 5 ;
4884: LD_ADDR_OWVAR 43
4888: PUSH
4889: LD_INT 5
4891: ST_TO_ADDR
// bc_type = 32 ;
4892: LD_ADDR_OWVAR 42
4896: PUSH
4897: LD_INT 32
4899: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4900: LD_ADDR_VAR 0 2
4904: PUSH
4905: LD_INT 76
4907: PPUSH
4908: LD_INT 91
4910: PPUSH
4911: LD_INT 2
4913: PPUSH
4914: CALL_OW 47
4918: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_INT 44
4926: PPUSH
4927: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4931: LD_ADDR_VAR 0 2
4935: PUSH
4936: LD_INT 83
4938: PPUSH
4939: LD_INT 84
4941: PPUSH
4942: LD_INT 2
4944: PPUSH
4945: CALL_OW 47
4949: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4950: LD_VAR 0 2
4954: PPUSH
4955: LD_INT 43
4957: PPUSH
4958: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4962: LD_INT 51
4964: PPUSH
4965: LD_INT 3
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4975: LD_INT 52
4977: PPUSH
4978: LD_INT 3
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4988: LD_INT 25
4990: PPUSH
4991: LD_INT 44
4993: PPUSH
4994: CALL_OW 431
// end ; end ;
4998: LD_VAR 0 1
5002: RET
// export function EnergyDialog ; begin
5003: LD_INT 0
5005: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5006: LD_INT 46
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: CALL_OW 321
5016: PUSH
5017: LD_INT 1
5019: EQUAL
5020: PUSH
5021: LD_INT 35
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 321
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: AND
5036: IFFALSE 5060
// begin Say ( JMM , D9c-JMM-1 ) ;
5038: LD_EXP 1
5042: PPUSH
5043: LD_STRING D9c-JMM-1
5045: PPUSH
5046: CALL_OW 88
// energyVDialog = 1 ;
5050: LD_ADDR_EXP 33
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// end else
5058: GO 5214
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5060: LD_INT 35
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 321
5070: PUSH
5071: LD_INT 2
5073: EQUAL
5074: PUSH
5075: LD_EXP 33
5079: PUSH
5080: LD_INT 0
5082: EQUAL
5083: AND
5084: IFFALSE 5106
// begin Say ( JMM , D9c-JMM-1a ) ;
5086: LD_EXP 1
5090: PPUSH
5091: LD_STRING D9c-JMM-1a
5093: PPUSH
5094: CALL_OW 88
// energyVDialog = 1 ;
5098: LD_ADDR_EXP 33
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5106: LD_INT 46
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: CALL_OW 321
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: PUSH
5121: LD_EXP 33
5125: PUSH
5126: LD_INT 0
5128: EQUAL
5129: AND
5130: IFFALSE 5152
// begin Say ( JMM , D9c-JMM-1b ) ;
5132: LD_EXP 1
5136: PPUSH
5137: LD_STRING D9c-JMM-1b
5139: PPUSH
5140: CALL_OW 88
// energyVDialog = 1 ;
5144: LD_ADDR_EXP 33
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5152: LD_INT 46
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 321
5162: PUSH
5163: LD_INT 2
5165: EQUAL
5166: PUSH
5167: LD_INT 21
5169: PPUSH
5170: LD_INT 1
5172: PPUSH
5173: CALL_OW 321
5177: PUSH
5178: LD_INT 2
5180: EQUAL
5181: AND
5182: PUSH
5183: LD_EXP 33
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: AND
5192: IFFALSE 5214
// begin Say ( JMM , D9c-JMM-1c ) ;
5194: LD_EXP 1
5198: PPUSH
5199: LD_STRING D9c-JMM-1c
5201: PPUSH
5202: CALL_OW 88
// energyVDialog = 1 ;
5206: LD_ADDR_EXP 33
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ; end ; end ;
5214: LD_VAR 0 1
5218: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5226: LD_VAR 0 1
5230: NOT
5231: PUSH
5232: LD_VAR 0 1
5236: PPUSH
5237: CALL_OW 256
5241: PUSH
5242: LD_INT 250
5244: LESS
5245: OR
5246: PUSH
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 314
5256: PUSH
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 261
5266: PUSH
5267: LD_INT 20
5269: GREATER
5270: AND
5271: OR
5272: IFFALSE 5276
// exit ;
5274: GO 5641
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5276: LD_VAR 0 1
5280: PPUSH
5281: CALL_OW 261
5285: PUSH
5286: LD_INT 20
5288: LESS
5289: PUSH
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 110
5299: PUSH
5300: LD_INT 21
5302: EQUAL
5303: NOT
5304: AND
5305: IFFALSE 5332
// begin ComStop ( bulldozer ) ;
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_INT 21
5323: PPUSH
5324: CALL_OW 109
// exit ;
5328: GO 5641
// end else
5330: GO 5359
// if GetFuel ( bulldozer ) > 20 then
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 261
5341: PUSH
5342: LD_INT 20
5344: GREATER
5345: IFFALSE 5359
// SetTag ( bulldozer , 0 ) ;
5347: LD_VAR 0 1
5351: PPUSH
5352: LD_INT 0
5354: PPUSH
5355: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5359: LD_ADDR_VAR 0 5
5363: PUSH
5364: LD_VAR 0 2
5368: PPUSH
5369: CALL_OW 353
5373: ST_TO_ADDR
// tmp := [ ] ;
5374: LD_ADDR_VAR 0 6
5378: PUSH
5379: EMPTY
5380: ST_TO_ADDR
// for i = 1 to list do
5381: LD_ADDR_VAR 0 4
5385: PUSH
5386: DOUBLE
5387: LD_INT 1
5389: DEC
5390: ST_TO_ADDR
5391: LD_VAR 0 5
5395: PUSH
5396: FOR_TO
5397: IFFALSE 5495
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5399: LD_VAR 0 5
5403: PUSH
5404: LD_VAR 0 4
5408: ARRAY
5409: PUSH
5410: LD_INT 1
5412: ARRAY
5413: PPUSH
5414: LD_VAR 0 5
5418: PUSH
5419: LD_VAR 0 4
5423: ARRAY
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: PPUSH
5429: CALL_OW 554
5433: IFFALSE 5493
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5435: LD_ADDR_VAR 0 6
5439: PUSH
5440: LD_VAR 0 6
5444: PPUSH
5445: LD_VAR 0 6
5449: PUSH
5450: LD_INT 1
5452: PLUS
5453: PPUSH
5454: LD_VAR 0 5
5458: PUSH
5459: LD_VAR 0 4
5463: ARRAY
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PUSH
5469: LD_VAR 0 5
5473: PUSH
5474: LD_VAR 0 4
5478: ARRAY
5479: PUSH
5480: LD_INT 2
5482: ARRAY
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PPUSH
5488: CALL_OW 1
5492: ST_TO_ADDR
// end ;
5493: GO 5396
5495: POP
5496: POP
// ComStop ( bulldozer ) ;
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5506: LD_ADDR_VAR 0 7
5510: PUSH
5511: LD_VAR 0 1
5515: PPUSH
5516: CALL_OW 250
5520: PUSH
5521: LD_VAR 0 1
5525: PPUSH
5526: CALL_OW 251
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: ST_TO_ADDR
// for i = tmp downto 1 do
5535: LD_ADDR_VAR 0 4
5539: PUSH
5540: DOUBLE
5541: LD_VAR 0 6
5545: INC
5546: ST_TO_ADDR
5547: LD_INT 1
5549: PUSH
5550: FOR_DOWNTO
5551: IFFALSE 5639
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5553: LD_ADDR_VAR 0 7
5557: PUSH
5558: LD_VAR 0 7
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: PPUSH
5567: LD_VAR 0 7
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: LD_VAR 0 6
5580: PPUSH
5581: CALL 5742 0 3
5585: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5586: LD_VAR 0 1
5590: PPUSH
5591: LD_VAR 0 7
5595: PUSH
5596: LD_INT 1
5598: ARRAY
5599: PPUSH
5600: LD_VAR 0 7
5604: PUSH
5605: LD_INT 2
5607: ARRAY
5608: PPUSH
5609: CALL 5646 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: LD_VAR 0 6
5622: PPUSH
5623: LD_VAR 0 7
5627: PUSH
5628: LD_INT 3
5630: ARRAY
5631: PPUSH
5632: CALL_OW 3
5636: ST_TO_ADDR
// end ;
5637: GO 5550
5639: POP
5640: POP
// end ;
5641: LD_VAR 0 3
5645: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5646: LD_INT 0
5648: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5649: LD_VAR 0 2
5653: PPUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: CALL_OW 351
5663: PUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: CALL_OW 554
5678: AND
5679: PUSH
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: CALL_OW 488
5694: AND
5695: PUSH
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 428
5710: PUSH
5711: LD_INT 1
5713: NEG
5714: EQUAL
5715: AND
5716: IFFALSE 5737
// AddComMoveXY ( bulldozer , x , y ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_VAR 0 3
5732: PPUSH
5733: CALL_OW 171
// end ;
5737: LD_VAR 0 4
5741: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
5749: PPUSH
5750: PPUSH
// dist := 99999 ;
5751: LD_ADDR_VAR 0 6
5755: PUSH
5756: LD_INT 99999
5758: ST_TO_ADDR
// for i = 1 to list do
5759: LD_ADDR_VAR 0 5
5763: PUSH
5764: DOUBLE
5765: LD_INT 1
5767: DEC
5768: ST_TO_ADDR
5769: LD_VAR 0 3
5773: PUSH
5774: FOR_TO
5775: IFFALSE 5913
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5777: LD_ADDR_VAR 0 7
5781: PUSH
5782: LD_VAR 0 1
5786: PPUSH
5787: LD_VAR 0 2
5791: PPUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_VAR 0 5
5801: ARRAY
5802: PUSH
5803: LD_INT 1
5805: ARRAY
5806: PPUSH
5807: LD_VAR 0 3
5811: PUSH
5812: LD_VAR 0 5
5816: ARRAY
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PPUSH
5822: CALL_OW 298
5826: ST_TO_ADDR
// if d = 0 then
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 0
5834: EQUAL
5835: IFFALSE 5839
// continue ;
5837: GO 5774
// if d < dist then
5839: LD_VAR 0 7
5843: PUSH
5844: LD_VAR 0 6
5848: LESS
5849: IFFALSE 5911
// begin _x := list [ i ] [ 1 ] ;
5851: LD_ADDR_VAR 0 8
5855: PUSH
5856: LD_VAR 0 3
5860: PUSH
5861: LD_VAR 0 5
5865: ARRAY
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5871: LD_ADDR_VAR 0 9
5875: PUSH
5876: LD_VAR 0 3
5880: PUSH
5881: LD_VAR 0 5
5885: ARRAY
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: ST_TO_ADDR
// _i := i ;
5891: LD_ADDR_VAR 0 10
5895: PUSH
5896: LD_VAR 0 5
5900: ST_TO_ADDR
// dist := d ;
5901: LD_ADDR_VAR 0 6
5905: PUSH
5906: LD_VAR 0 7
5910: ST_TO_ADDR
// end ; end ;
5911: GO 5774
5913: POP
5914: POP
// result := [ _x , _y , _i , dist ] ;
5915: LD_ADDR_VAR 0 4
5919: PUSH
5920: LD_VAR 0 8
5924: PUSH
5925: LD_VAR 0 9
5929: PUSH
5930: LD_VAR 0 10
5934: PUSH
5935: LD_VAR 0 6
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: ST_TO_ADDR
// end ;
5946: LD_VAR 0 4
5950: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// for i = 1 to 72 do
5955: LD_ADDR_VAR 0 5
5959: PUSH
5960: DOUBLE
5961: LD_INT 1
5963: DEC
5964: ST_TO_ADDR
5965: LD_INT 72
5967: PUSH
5968: FOR_TO
5969: IFFALSE 6023
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5971: LD_VAR 0 5
5975: PPUSH
5976: LD_VAR 0 1
5980: PPUSH
5981: CALL_OW 321
5985: PUSH
5986: LD_INT 1
5988: EQUAL
5989: PUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: LD_VAR 0 3
5999: PPUSH
6000: CALL_OW 482
6004: AND
6005: IFFALSE 6021
// AddComResearch ( lab , i ) ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 5
6016: PPUSH
6017: CALL_OW 184
6021: GO 5968
6023: POP
6024: POP
// end ;
6025: LD_VAR 0 4
6029: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
6036: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6037: LD_ADDR_VAR 0 7
6041: PUSH
6042: LD_VAR 0 2
6046: PPUSH
6047: CALL_OW 313
6051: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6052: LD_ADDR_VAR 0 8
6056: PUSH
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_INT 22
6064: PUSH
6065: LD_VAR 0 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 2
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 24
6086: PUSH
6087: LD_INT 750
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: LD_INT 54
6099: PUSH
6100: EMPTY
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 70
6117: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6118: LD_ADDR_VAR 0 5
6122: PUSH
6123: LD_VAR 0 3
6127: PPUSH
6128: LD_INT 22
6130: PUSH
6131: LD_VAR 0 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 21
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: LD_INT 24
6155: PUSH
6156: LD_INT 1000
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: EMPTY
6173: LIST
6174: PPUSH
6175: CALL_OW 70
6179: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6180: LD_VAR 0 5
6184: NOT
6185: PUSH
6186: LD_INT 22
6188: PUSH
6189: LD_VAR 0 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 24
6210: PUSH
6211: LD_INT 250
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: PPUSH
6223: CALL_OW 69
6227: NOT
6228: AND
6229: IFFALSE 6233
// exit ;
6231: GO 6329
// if buildingsList and engineerOkInside then
6233: LD_VAR 0 5
6237: PUSH
6238: LD_VAR 0 7
6242: AND
6243: IFFALSE 6269
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6245: LD_VAR 0 7
6249: PPUSH
6250: LD_INT 25
6252: PUSH
6253: LD_INT 2
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 72
6264: PPUSH
6265: CALL_OW 122
// if buildingsList and engineerOkOutside then
6269: LD_VAR 0 5
6273: PUSH
6274: LD_VAR 0 8
6278: AND
6279: IFFALSE 6299
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6299: LD_VAR 0 5
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: PUSH
6308: LD_VAR 0 8
6312: AND
6313: IFFALSE 6329
// ComEnterUnit ( engineerOkOutside , building ) ;
6315: LD_VAR 0 8
6319: PPUSH
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL_OW 120
// end ;
6329: LD_VAR 0 4
6333: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6343: LD_ADDR_VAR 0 6
6347: PUSH
6348: LD_INT 22
6350: PUSH
6351: LD_VAR 0 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 23
6372: PUSH
6373: LD_INT 2
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 251
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6401: LD_ADDR_VAR 0 7
6405: PUSH
6406: LD_VAR 0 3
6410: PPUSH
6411: LD_INT 22
6413: PUSH
6414: LD_VAR 0 1
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 23
6425: PUSH
6426: LD_INT 2
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 25
6435: PUSH
6436: LD_INT 4
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 50
6445: PUSH
6446: EMPTY
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PPUSH
6455: CALL_OW 70
6459: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6460: LD_ADDR_VAR 0 8
6464: PUSH
6465: LD_VAR 0 3
6469: PPUSH
6470: LD_INT 22
6472: PUSH
6473: LD_VAR 0 1
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 21
6484: PUSH
6485: LD_INT 1
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 3
6494: PUSH
6495: LD_INT 25
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 24
6514: PUSH
6515: LD_INT 750
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: PPUSH
6532: CALL_OW 70
6536: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6537: LD_ADDR_VAR 0 9
6541: PUSH
6542: LD_VAR 0 2
6546: PPUSH
6547: LD_INT 22
6549: PUSH
6550: LD_VAR 0 1
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 21
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 25
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 3
6588: PUSH
6589: LD_INT 24
6591: PUSH
6592: LD_INT 1000
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: PPUSH
6609: CALL_OW 70
6613: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6614: LD_VAR 0 8
6618: NOT
6619: PUSH
6620: LD_VAR 0 9
6624: NOT
6625: AND
6626: PUSH
6627: LD_VAR 0 6
6631: NOT
6632: AND
6633: IFFALSE 6637
// exit ;
6635: GO 6843
// if damageUnits and sciList then
6637: LD_VAR 0 8
6641: PUSH
6642: LD_VAR 0 6
6646: AND
6647: IFFALSE 6663
// ComMoveToArea ( damageUnits , healArea ) ;
6649: LD_VAR 0 8
6653: PPUSH
6654: LD_VAR 0 2
6658: PPUSH
6659: CALL_OW 113
// if unitsToHeal and sciList then
6663: LD_VAR 0 9
6667: PUSH
6668: LD_VAR 0 6
6672: AND
6673: IFFALSE 6684
// ComExitBuilding ( sciList ) ;
6675: LD_VAR 0 6
6679: PPUSH
6680: CALL_OW 122
// if unitsToHeal and sciListOutside then
6684: LD_VAR 0 9
6688: PUSH
6689: LD_VAR 0 7
6693: AND
6694: IFFALSE 6714
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6696: LD_VAR 0 7
6700: PPUSH
6701: LD_VAR 0 9
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: PPUSH
6710: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6714: LD_VAR 0 8
6718: PUSH
6719: LD_INT 0
6721: EQUAL
6722: PUSH
6723: LD_VAR 0 9
6727: PUSH
6728: LD_INT 0
6730: EQUAL
6731: AND
6732: PUSH
6733: LD_VAR 0 7
6737: AND
6738: IFFALSE 6843
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6740: LD_ADDR_VAR 0 10
6744: PUSH
6745: LD_INT 22
6747: PUSH
6748: LD_VAR 0 1
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 21
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 8
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 69
6786: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6787: LD_ADDR_VAR 0 11
6791: PUSH
6792: LD_INT 1
6794: PPUSH
6795: LD_VAR 0 10
6799: PPUSH
6800: CALL_OW 12
6804: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6805: LD_VAR 0 7
6809: PPUSH
6810: LD_INT 3
6812: PUSH
6813: LD_INT 60
6815: PUSH
6816: EMPTY
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PPUSH
6823: CALL_OW 72
6827: PPUSH
6828: LD_VAR 0 10
6832: PUSH
6833: LD_VAR 0 11
6837: ARRAY
6838: PPUSH
6839: CALL_OW 120
// end ; end ;
6843: LD_VAR 0 5
6847: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6852: LD_INT 22
6854: PUSH
6855: LD_VAR 0 1
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 21
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 69
6882: PUSH
6883: LD_VAR 0 3
6887: LESSEQUAL
6888: IFFALSE 6955
// for i = 1 to vehCount do
6890: LD_ADDR_VAR 0 9
6894: PUSH
6895: DOUBLE
6896: LD_INT 1
6898: DEC
6899: ST_TO_ADDR
6900: LD_VAR 0 3
6904: PUSH
6905: FOR_TO
6906: IFFALSE 6953
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6908: LD_VAR 0 2
6912: PPUSH
6913: LD_VAR 0 7
6917: PPUSH
6918: LD_VAR 0 5
6922: PPUSH
6923: LD_VAR 0 6
6927: PPUSH
6928: LD_VAR 0 4
6932: PUSH
6933: LD_INT 1
6935: PPUSH
6936: LD_VAR 0 4
6940: PPUSH
6941: CALL_OW 12
6945: ARRAY
6946: PPUSH
6947: CALL_OW 185
6951: GO 6905
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 8
6959: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
// for i = 1 to medicCount do
6973: LD_ADDR_VAR 0 11
6977: PUSH
6978: DOUBLE
6979: LD_INT 1
6981: DEC
6982: ST_TO_ADDR
6983: LD_VAR 0 4
6987: PUSH
6988: FOR_TO
6989: IFFALSE 7059
// begin uc_side = side ;
6991: LD_ADDR_OWVAR 20
6995: PUSH
6996: LD_VAR 0 1
7000: ST_TO_ADDR
// uc_nation = nation ;
7001: LD_ADDR_OWVAR 21
7005: PUSH
7006: LD_VAR 0 2
7010: ST_TO_ADDR
// InitHC_All ( ) ;
7011: CALL_OW 584
// PrepareHuman ( false , 4 , skil ) ;
7015: LD_INT 0
7017: PPUSH
7018: LD_INT 4
7020: PPUSH
7021: LD_VAR 0 5
7025: PPUSH
7026: CALL_OW 380
// un = CreateHuman ;
7030: LD_ADDR_VAR 0 13
7034: PUSH
7035: CALL_OW 44
7039: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7040: LD_VAR 0 13
7044: PPUSH
7045: LD_VAR 0 6
7049: PPUSH
7050: LD_INT 0
7052: PPUSH
7053: CALL_OW 49
// end ;
7057: GO 6988
7059: POP
7060: POP
// for i = 1 to soldierCount do
7061: LD_ADDR_VAR 0 11
7065: PUSH
7066: DOUBLE
7067: LD_INT 1
7069: DEC
7070: ST_TO_ADDR
7071: LD_VAR 0 3
7075: PUSH
7076: FOR_TO
7077: IFFALSE 7147
// begin uc_side = side ;
7079: LD_ADDR_OWVAR 20
7083: PUSH
7084: LD_VAR 0 1
7088: ST_TO_ADDR
// uc_nation = nation ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_VAR 0 2
7098: ST_TO_ADDR
// InitHC_All ( ) ;
7099: CALL_OW 584
// PrepareHuman ( false , 1 , skil ) ;
7103: LD_INT 0
7105: PPUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_VAR 0 5
7113: PPUSH
7114: CALL_OW 380
// un = CreateHuman ;
7118: LD_ADDR_VAR 0 13
7122: PUSH
7123: CALL_OW 44
7127: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7128: LD_VAR 0 13
7132: PPUSH
7133: LD_VAR 0 6
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7076
7147: POP
7148: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7149: LD_ADDR_VAR 0 16
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 1
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 25
7201: PUSH
7202: LD_INT 9
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7225: LD_ADDR_VAR 0 15
7229: PUSH
7230: LD_INT 22
7232: PUSH
7233: LD_VAR 0 1
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 4
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 69
7260: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7261: LD_VAR 0 15
7265: PPUSH
7266: LD_VAR 0 7
7270: PPUSH
7271: CALL_OW 113
// if strategy = 1 then
7275: LD_VAR 0 9
7279: PUSH
7280: LD_INT 1
7282: EQUAL
7283: IFFALSE 7731
// begin for i in soldiersOK_list do
7285: LD_ADDR_VAR 0 11
7289: PUSH
7290: LD_VAR 0 16
7294: PUSH
7295: FOR_IN
7296: IFFALSE 7360
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7298: LD_VAR 0 11
7302: PPUSH
7303: LD_INT 91
7305: PPUSH
7306: LD_INT 63
7308: PPUSH
7309: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7313: LD_VAR 0 11
7317: PPUSH
7318: LD_INT 101
7320: PPUSH
7321: LD_INT 53
7323: PPUSH
7324: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7328: LD_VAR 0 11
7332: PPUSH
7333: LD_INT 75
7335: PPUSH
7336: LD_INT 23
7338: PPUSH
7339: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7343: LD_VAR 0 11
7347: PPUSH
7348: LD_INT 78
7350: PPUSH
7351: LD_INT 8
7353: PPUSH
7354: CALL_OW 174
// end ;
7358: GO 7295
7360: POP
7361: POP
// wait ( 0 0$30 ) ;
7362: LD_INT 1050
7364: PPUSH
7365: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7369: LD_INT 35
7371: PPUSH
7372: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7376: LD_ADDR_VAR 0 14
7380: PUSH
7381: LD_INT 22
7383: PUSH
7384: LD_VAR 0 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: LD_INT 24
7401: PUSH
7402: LD_INT 550
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 24
7415: PUSH
7416: LD_INT 250
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7437: LD_ADDR_VAR 0 16
7441: PUSH
7442: LD_INT 22
7444: PUSH
7445: LD_VAR 0 1
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 25
7456: PUSH
7457: LD_INT 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 24
7466: PUSH
7467: LD_INT 1000
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: PPUSH
7479: CALL_OW 69
7483: ST_TO_ADDR
// if medicCount then
7484: LD_VAR 0 4
7488: IFFALSE 7528
// begin if damageUnit_list then
7490: LD_VAR 0 14
7494: IFFALSE 7528
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7496: LD_VAR 0 14
7500: PPUSH
7501: LD_VAR 0 7
7505: PPUSH
7506: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_VAR 0 14
7519: PUSH
7520: LD_INT 1
7522: ARRAY
7523: PPUSH
7524: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7528: LD_ADDR_VAR 0 11
7532: PUSH
7533: LD_VAR 0 16
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7715
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7541: LD_ADDR_VAR 0 19
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_VAR 0 8
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 69
7562: PPUSH
7563: LD_VAR 0 11
7567: PPUSH
7568: CALL_OW 74
7572: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7573: LD_ADDR_VAR 0 20
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 2
7592: PUSH
7593: LD_INT 59
7595: PUSH
7596: EMPTY
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 1
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 21
7611: PUSH
7612: LD_INT 2
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: PPUSH
7632: CALL_OW 69
7636: PPUSH
7637: LD_VAR 0 11
7641: PPUSH
7642: CALL_OW 74
7646: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7647: LD_VAR 0 11
7651: PPUSH
7652: LD_VAR 0 19
7656: PPUSH
7657: CALL_OW 296
7661: PUSH
7662: LD_INT 8
7664: PLUS
7665: PUSH
7666: LD_VAR 0 11
7670: PPUSH
7671: LD_VAR 0 20
7675: PPUSH
7676: CALL_OW 296
7680: LESS
7681: IFFALSE 7699
// ComAttackUnit ( i , target1 ) else
7683: LD_VAR 0 11
7687: PPUSH
7688: LD_VAR 0 19
7692: PPUSH
7693: CALL_OW 115
7697: GO 7713
// ComAttackUnit ( i , target2 ) ;
7699: LD_VAR 0 11
7703: PPUSH
7704: LD_VAR 0 20
7708: PPUSH
7709: CALL_OW 115
// end ;
7713: GO 7538
7715: POP
7716: POP
// until not soldiersOK_list and not damageUnit_list ;
7717: LD_VAR 0 16
7721: NOT
7722: PUSH
7723: LD_VAR 0 14
7727: NOT
7728: AND
7729: IFFALSE 7369
// end ; if strategy = 2 then
7731: LD_VAR 0 9
7735: PUSH
7736: LD_INT 2
7738: EQUAL
7739: IFFALSE 8157
// begin for i in soldiersOK_list do
7741: LD_ADDR_VAR 0 11
7745: PUSH
7746: LD_VAR 0 16
7750: PUSH
7751: FOR_IN
7752: IFFALSE 7786
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7754: LD_VAR 0 11
7758: PPUSH
7759: LD_INT 91
7761: PPUSH
7762: LD_INT 63
7764: PPUSH
7765: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7769: LD_VAR 0 11
7773: PPUSH
7774: LD_INT 75
7776: PPUSH
7777: LD_INT 33
7779: PPUSH
7780: CALL_OW 174
// end ;
7784: GO 7751
7786: POP
7787: POP
// wait ( 0 0$10 ) ;
7788: LD_INT 350
7790: PPUSH
7791: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7795: LD_INT 105
7797: PPUSH
7798: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7802: LD_ADDR_VAR 0 14
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: LD_INT 24
7827: PUSH
7828: LD_INT 550
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 24
7841: PUSH
7842: LD_INT 250
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 69
7862: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7863: LD_ADDR_VAR 0 16
7867: PUSH
7868: LD_INT 22
7870: PUSH
7871: LD_VAR 0 1
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 25
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 24
7892: PUSH
7893: LD_INT 1000
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: PPUSH
7905: CALL_OW 69
7909: ST_TO_ADDR
// if medicCount then
7910: LD_VAR 0 4
7914: IFFALSE 7954
// begin if damageUnit_list then
7916: LD_VAR 0 14
7920: IFFALSE 7954
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7922: LD_VAR 0 14
7926: PPUSH
7927: LD_VAR 0 7
7931: PPUSH
7932: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7936: LD_VAR 0 4
7940: PPUSH
7941: LD_VAR 0 14
7945: PUSH
7946: LD_INT 1
7948: ARRAY
7949: PPUSH
7950: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7954: LD_ADDR_VAR 0 11
7958: PUSH
7959: LD_VAR 0 16
7963: PUSH
7964: FOR_IN
7965: IFFALSE 8141
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7967: LD_ADDR_VAR 0 19
7971: PUSH
7972: LD_INT 22
7974: PUSH
7975: LD_VAR 0 8
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PPUSH
7984: CALL_OW 69
7988: PPUSH
7989: LD_VAR 0 11
7993: PPUSH
7994: CALL_OW 74
7998: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7999: LD_ADDR_VAR 0 20
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 8
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: LD_INT 59
8021: PUSH
8022: EMPTY
8023: LIST
8024: PUSH
8025: LD_INT 21
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: LD_INT 21
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: PPUSH
8058: CALL_OW 69
8062: PPUSH
8063: LD_VAR 0 11
8067: PPUSH
8068: CALL_OW 74
8072: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8073: LD_VAR 0 11
8077: PPUSH
8078: LD_VAR 0 19
8082: PPUSH
8083: CALL_OW 296
8087: PUSH
8088: LD_INT 8
8090: PLUS
8091: PUSH
8092: LD_VAR 0 11
8096: PPUSH
8097: LD_VAR 0 20
8101: PPUSH
8102: CALL_OW 296
8106: LESS
8107: IFFALSE 8125
// ComAttackUnit ( i , target1 ) else
8109: LD_VAR 0 11
8113: PPUSH
8114: LD_VAR 0 19
8118: PPUSH
8119: CALL_OW 115
8123: GO 8139
// ComAttackUnit ( i , target2 ) ;
8125: LD_VAR 0 11
8129: PPUSH
8130: LD_VAR 0 20
8134: PPUSH
8135: CALL_OW 115
// end ;
8139: GO 7964
8141: POP
8142: POP
// until not soldiersOK_list and not damageUnit_list ;
8143: LD_VAR 0 16
8147: NOT
8148: PUSH
8149: LD_VAR 0 14
8153: NOT
8154: AND
8155: IFFALSE 7795
// end ; if medic_list then
8157: LD_VAR 0 15
8161: IFFALSE 8301
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8163: LD_ADDR_VAR 0 15
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_VAR 0 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 25
8182: PUSH
8183: LD_INT 4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 50
8192: PUSH
8193: EMPTY
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8206: LD_INT 35
8208: PPUSH
8209: CALL_OW 67
// for i in medic_list do
8213: LD_ADDR_VAR 0 11
8217: PUSH
8218: LD_VAR 0 15
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8292
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8226: LD_VAR 0 11
8230: PPUSH
8231: CALL_OW 314
8235: NOT
8236: PUSH
8237: LD_VAR 0 11
8241: PPUSH
8242: LD_INT 4
8244: PPUSH
8245: CALL_OW 308
8249: NOT
8250: AND
8251: IFFALSE 8267
// ComMoveToArea ( i , RussianAttack ) else
8253: LD_VAR 0 11
8257: PPUSH
8258: LD_INT 4
8260: PPUSH
8261: CALL_OW 113
8265: GO 8290
// if IsInArea ( i , RussianAttack ) then
8267: LD_VAR 0 11
8271: PPUSH
8272: LD_INT 4
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8290
// RemoveUnit ( i ) ;
8281: LD_VAR 0 11
8285: PPUSH
8286: CALL_OW 64
8290: GO 8223
8292: POP
8293: POP
// until not medic_list ;
8294: LD_VAR 0 15
8298: NOT
8299: IFFALSE 8163
// end ; end ; end_of_file
8301: LD_VAR 0 10
8305: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8306: LD_INT 0
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
// InGameOn ;
8313: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8317: LD_ADDR_VAR 0 3
8321: PUSH
8322: LD_EXP 8
8326: PUSH
8327: LD_EXP 9
8331: PUSH
8332: LD_EXP 10
8336: PUSH
8337: LD_EXP 11
8341: PUSH
8342: LD_EXP 12
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8354: LD_ADDR_VAR 0 4
8358: PUSH
8359: LD_INT 46
8361: PUSH
8362: LD_INT 45
8364: PUSH
8365: LD_INT 44
8367: PUSH
8368: LD_INT 43
8370: PUSH
8371: LD_INT 42
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8381: LD_ADDR_VAR 0 5
8385: PUSH
8386: LD_INT 14
8388: PUSH
8389: LD_INT 12
8391: PUSH
8392: LD_INT 10
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 6
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8408: LD_EXP 11
8412: PPUSH
8413: LD_INT 31
8415: PPUSH
8416: LD_INT 59
8418: PPUSH
8419: LD_INT 19
8421: PPUSH
8422: LD_INT 5
8424: PPUSH
8425: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8429: LD_INT 32
8431: PPUSH
8432: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8436: LD_INT 32
8438: PPUSH
8439: LD_INT 51
8441: PPUSH
8442: LD_INT 26
8444: PPUSH
8445: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8449: LD_INT 32
8451: PPUSH
8452: LD_INT 53
8454: PPUSH
8455: LD_INT 23
8457: PPUSH
8458: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8462: LD_INT 32
8464: PPUSH
8465: LD_INT 52
8467: PPUSH
8468: LD_INT 19
8470: PPUSH
8471: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8475: LD_INT 35
8477: PPUSH
8478: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8482: LD_INT 32
8484: PPUSH
8485: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8489: LD_INT 32
8491: PPUSH
8492: CALL_OW 250
8496: PUSH
8497: LD_INT 52
8499: EQUAL
8500: PUSH
8501: LD_INT 32
8503: PPUSH
8504: CALL_OW 251
8508: PUSH
8509: LD_INT 19
8511: EQUAL
8512: AND
8513: IFFALSE 8475
// ComExitVehicle ( JMM ) ;
8515: LD_EXP 1
8519: PPUSH
8520: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8524: LD_EXP 7
8528: PPUSH
8529: LD_EXP 1
8533: PPUSH
8534: CALL_OW 119
// wait ( 0 0$01 ) ;
8538: LD_INT 35
8540: PPUSH
8541: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8545: LD_EXP 1
8549: PPUSH
8550: LD_INT 46
8552: PPUSH
8553: LD_INT 10
8555: PPUSH
8556: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8560: LD_EXP 1
8564: PPUSH
8565: LD_EXP 7
8569: PPUSH
8570: CALL_OW 179
// wait ( 0 0$4 ) ;
8574: LD_INT 140
8576: PPUSH
8577: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8581: LD_EXP 1
8585: PPUSH
8586: LD_STRING D1-JMM-1
8588: PPUSH
8589: CALL_OW 88
// if not dialogue_skipped then
8593: LD_OWVAR 59
8597: NOT
8598: IFFALSE 9255
// begin for i := 1 to gammaSquad do
8600: LD_ADDR_VAR 0 2
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 3
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8677
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8618: LD_VAR 0 3
8622: PUSH
8623: LD_VAR 0 2
8627: ARRAY
8628: PPUSH
8629: LD_VAR 0 4
8633: PUSH
8634: LD_VAR 0 2
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 5
8644: PUSH
8645: LD_VAR 0 2
8649: ARRAY
8650: PPUSH
8651: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8655: LD_VAR 0 3
8659: PUSH
8660: LD_VAR 0 2
8664: ARRAY
8665: PPUSH
8666: LD_EXP 1
8670: PPUSH
8671: CALL_OW 179
// end ;
8675: GO 8615
8677: POP
8678: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8679: LD_EXP 4
8683: PPUSH
8684: LD_INT 41
8686: PPUSH
8687: LD_INT 4
8689: PPUSH
8690: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8694: LD_EXP 4
8698: PPUSH
8699: LD_EXP 1
8703: PPUSH
8704: CALL_OW 179
// if Lisa = false and Bobby then
8708: LD_EXP 4
8712: PUSH
8713: LD_INT 0
8715: EQUAL
8716: PUSH
8717: LD_EXP 2
8721: AND
8722: IFFALSE 8753
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8724: LD_EXP 2
8728: PPUSH
8729: LD_INT 41
8731: PPUSH
8732: LD_INT 4
8734: PPUSH
8735: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8739: LD_EXP 2
8743: PPUSH
8744: LD_EXP 1
8748: PPUSH
8749: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8753: LD_EXP 4
8757: PUSH
8758: LD_INT 0
8760: EQUAL
8761: PUSH
8762: LD_EXP 2
8766: PUSH
8767: LD_INT 0
8769: EQUAL
8770: AND
8771: PUSH
8772: LD_EXP 3
8776: AND
8777: IFFALSE 8808
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8779: LD_EXP 3
8783: PPUSH
8784: LD_INT 41
8786: PPUSH
8787: LD_INT 4
8789: PPUSH
8790: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8794: LD_EXP 3
8798: PPUSH
8799: LD_EXP 1
8803: PPUSH
8804: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8808: LD_EXP 4
8812: PUSH
8813: LD_INT 0
8815: EQUAL
8816: PUSH
8817: LD_EXP 2
8821: PUSH
8822: LD_INT 0
8824: EQUAL
8825: AND
8826: PUSH
8827: LD_EXP 3
8831: PUSH
8832: LD_INT 0
8834: EQUAL
8835: AND
8836: IFFALSE 8867
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8838: LD_EXP 6
8842: PPUSH
8843: LD_INT 41
8845: PPUSH
8846: LD_INT 4
8848: PPUSH
8849: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8853: LD_EXP 6
8857: PPUSH
8858: LD_EXP 1
8862: PPUSH
8863: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8867: LD_EXP 7
8871: PPUSH
8872: LD_STRING D1-Brown-1
8874: PPUSH
8875: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8879: LD_EXP 1
8883: PPUSH
8884: LD_STRING D1-JMM-2
8886: PPUSH
8887: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8891: LD_EXP 7
8895: PPUSH
8896: LD_STRING D1-Brown-2
8898: PPUSH
8899: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8903: LD_EXP 1
8907: PPUSH
8908: LD_EXP 9
8912: PPUSH
8913: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8917: LD_EXP 9
8921: PPUSH
8922: LD_STRING D1-FSol1-2
8924: PPUSH
8925: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8929: LD_EXP 1
8933: PPUSH
8934: LD_EXP 8
8938: PPUSH
8939: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8943: LD_EXP 8
8947: PPUSH
8948: LD_STRING D1-Sol2-2
8950: PPUSH
8951: CALL_OW 88
// if Lisa then
8955: LD_EXP 4
8959: IFFALSE 8999
// begin ComTurnUnit ( JMM , Lisa ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_EXP 4
8970: PPUSH
8971: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8975: LD_EXP 4
8979: PPUSH
8980: LD_STRING D1-Lisa-2
8982: PPUSH
8983: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8987: LD_EXP 1
8991: PPUSH
8992: LD_STRING D1-JMM-3
8994: PPUSH
8995: CALL_OW 88
// end ; if Bobby then
8999: LD_EXP 2
9003: IFFALSE 9043
// begin ComTurnUnit ( JMM , Bobby ) ;
9005: LD_EXP 1
9009: PPUSH
9010: LD_EXP 2
9014: PPUSH
9015: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9019: LD_EXP 2
9023: PPUSH
9024: LD_STRING D1-Bobby-2
9026: PPUSH
9027: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9031: LD_EXP 1
9035: PPUSH
9036: LD_STRING D1-JMM-3
9038: PPUSH
9039: CALL_OW 88
// end ; if Cyrus then
9043: LD_EXP 3
9047: IFFALSE 9087
// begin ComTurnUnit ( JMM , Cyrus ) ;
9049: LD_EXP 1
9053: PPUSH
9054: LD_EXP 3
9058: PPUSH
9059: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9063: LD_EXP 3
9067: PPUSH
9068: LD_STRING D1-Cyrus-2
9070: PPUSH
9071: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9075: LD_EXP 1
9079: PPUSH
9080: LD_STRING D1-JMM-3
9082: PPUSH
9083: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9087: LD_EXP 1
9091: PPUSH
9092: LD_EXP 7
9096: PPUSH
9097: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9101: LD_EXP 1
9105: PPUSH
9106: LD_STRING D1-JMM-3a
9108: PPUSH
9109: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9113: LD_EXP 7
9117: PPUSH
9118: LD_INT 38
9120: PPUSH
9121: LD_INT 5
9123: PPUSH
9124: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9128: LD_EXP 7
9132: PPUSH
9133: LD_EXP 1
9137: PPUSH
9138: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9142: LD_EXP 1
9146: PPUSH
9147: LD_INT 40
9149: PPUSH
9150: LD_INT 7
9152: PPUSH
9153: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_EXP 7
9166: PPUSH
9167: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9171: LD_EXP 7
9175: PPUSH
9176: LD_STRING D1-Brown-3
9178: PPUSH
9179: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9183: LD_EXP 14
9187: PPUSH
9188: LD_STRING D1-Har-3
9190: PPUSH
9191: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9195: LD_EXP 1
9199: PPUSH
9200: LD_STRING D1-JMM-4
9202: PPUSH
9203: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9207: LD_EXP 14
9211: PPUSH
9212: LD_STRING D1-Har-4
9214: PPUSH
9215: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9219: LD_EXP 1
9223: PPUSH
9224: LD_STRING D1-JMM-5
9226: PPUSH
9227: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9231: LD_EXP 14
9235: PPUSH
9236: LD_STRING D1-Har-5
9238: PPUSH
9239: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9243: LD_EXP 1
9247: PPUSH
9248: LD_STRING D1-JMM-6
9250: PPUSH
9251: CALL_OW 88
// end ; InGameOff ;
9255: CALL_OW 9
// PrepareRussianConvoy ;
9259: CALL 3404 0 0
// ChangeMissionObjectives ( M1 ) ;
9263: LD_STRING M1
9265: PPUSH
9266: CALL_OW 337
// SaveForQuickRestart ;
9270: CALL_OW 22
// timerStatus = 1 ;
9274: LD_ADDR_EXP 29
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// startTimer = 1 ;
9282: LD_ADDR_EXP 30
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// bonusAvalaible = 1 ;
9290: LD_ADDR_EXP 44
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9298: LD_INT 105
9300: PPUSH
9301: CALL_OW 67
// DialogueOn ;
9305: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9309: LD_EXP 12
9313: PPUSH
9314: LD_STRING D9-Mech1-1
9316: PPUSH
9317: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9321: LD_EXP 1
9325: PPUSH
9326: LD_STRING D9-JMM-1
9328: PPUSH
9329: CALL_OW 88
// DialogueOff ;
9333: CALL_OW 7
// end ;
9337: LD_VAR 0 1
9341: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9342: LD_INT 47
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 321
9352: PUSH
9353: LD_INT 2
9355: EQUAL
9356: PUSH
9357: LD_EXP 31
9361: NOT
9362: AND
9363: PUSH
9364: LD_INT 22
9366: PUSH
9367: LD_INT 1
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 21
9376: PUSH
9377: LD_INT 3
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 30
9386: PUSH
9387: LD_INT 3
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 57
9396: PUSH
9397: EMPTY
9398: LIST
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 69
9410: AND
9411: IFFALSE 9645
9413: GO 9415
9415: DISABLE
// begin factoryDialog := true ;
9416: LD_ADDR_EXP 31
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// if IsOk ( Campell ) then
9424: LD_EXP 12
9428: PPUSH
9429: CALL_OW 302
9433: IFFALSE 9449
// Say ( Campell , D10-Mech1-1 ) else
9435: LD_EXP 12
9439: PPUSH
9440: LD_STRING D10-Mech1-1
9442: PPUSH
9443: CALL_OW 88
9447: GO 9645
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9449: LD_INT 22
9451: PUSH
9452: LD_INT 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 21
9461: PUSH
9462: LD_INT 1
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 25
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 26
9481: PUSH
9482: LD_INT 1
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: PUSH
9500: LD_EXP 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: DIFF
9508: IFFALSE 9582
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9510: LD_INT 22
9512: PUSH
9513: LD_INT 1
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 21
9522: PUSH
9523: LD_INT 1
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 25
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 26
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: PUSH
9561: LD_EXP 1
9565: PUSH
9566: EMPTY
9567: LIST
9568: DIFF
9569: PPUSH
9570: LD_STRING D10-Mech1-1
9572: PPUSH
9573: LD_STRING D10-Mech1-1
9575: PPUSH
9576: CALL 4598 0 3
9580: GO 9645
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9582: LD_INT 22
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 26
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 1
9619: ARRAY
9620: PPUSH
9621: CALL_OW 69
9625: PUSH
9626: LD_EXP 1
9630: PUSH
9631: EMPTY
9632: LIST
9633: DIFF
9634: PPUSH
9635: LD_STRING D10-Mech1-1
9637: PPUSH
9638: LD_STRING D10-Mech1-1
9640: PPUSH
9641: CALL 4598 0 3
// end ; end ;
9645: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9646: LD_INT 22
9648: PUSH
9649: LD_INT 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 30
9658: PUSH
9659: LD_INT 32
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 69
9674: PUSH
9675: LD_EXP 32
9679: PUSH
9680: LD_INT 0
9682: EQUAL
9683: AND
9684: IFFALSE 9920
9686: GO 9688
9688: DISABLE
// begin if IsOk ( Claptopn ) then
9689: LD_EXP 11
9693: PPUSH
9694: CALL_OW 302
9698: IFFALSE 9714
// Say ( Claptopn , D9b-Eng1-1 ) else
9700: LD_EXP 11
9704: PPUSH
9705: LD_STRING D9b-Eng1-1
9707: PPUSH
9708: CALL_OW 88
9712: GO 9906
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9714: LD_INT 22
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 21
9726: PUSH
9727: LD_INT 1
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 25
9736: PUSH
9737: LD_INT 3
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 26
9746: PUSH
9747: LD_INT 1
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PPUSH
9760: CALL_OW 69
9764: PUSH
9765: LD_EXP 1
9769: PUSH
9770: EMPTY
9771: LIST
9772: DIFF
9773: IFFALSE 9847
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9775: LD_INT 22
9777: PUSH
9778: LD_INT 1
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 21
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 25
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 26
9807: PUSH
9808: LD_INT 1
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 69
9825: PUSH
9826: LD_EXP 1
9830: PUSH
9831: EMPTY
9832: LIST
9833: DIFF
9834: PPUSH
9835: LD_STRING D9b-Eng1-1
9837: PPUSH
9838: LD_STRING D9b-Eng1-11
9840: PPUSH
9841: CALL 4598 0 3
9845: GO 9906
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9847: LD_INT 22
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 21
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 26
9869: PUSH
9870: LD_INT 1
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 69
9886: PUSH
9887: LD_EXP 1
9891: PUSH
9892: EMPTY
9893: LIST
9894: DIFF
9895: PPUSH
9896: LD_STRING D9b-Eng1-1
9898: PPUSH
9899: LD_STRING D9b-Eng1-1
9901: PPUSH
9902: CALL 4598 0 3
// end ; if energyVDialog = 0 then
9906: LD_EXP 33
9910: PUSH
9911: LD_INT 0
9913: EQUAL
9914: IFFALSE 9920
// EnergyDialog ;
9916: CALL 5003 0 0
// end ;
9920: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9921: LD_EXP 34
9925: PUSH
9926: LD_INT 1
9928: EQUAL
9929: PUSH
9930: LD_EXP 35
9934: PUSH
9935: LD_INT 1
9937: EQUAL
9938: AND
9939: IFFALSE 9951
9941: GO 9943
9943: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9944: LD_STRING M1a
9946: PPUSH
9947: CALL_OW 337
9951: END
// every 3 3$0 do
9952: GO 9954
9954: DISABLE
// PrepareFirstAttack ;
9955: CALL 4216 0 0
9959: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9960: LD_INT 22
9962: PUSH
9963: LD_INT 5
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 21
9972: PUSH
9973: LD_INT 1
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 3
9982: PUSH
9983: LD_INT 24
9985: PUSH
9986: LD_INT 250
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 69
10006: PUSH
10007: LD_INT 0
10009: GREATER
10010: PUSH
10011: LD_EXP 23
10015: PUSH
10016: LD_INT 1
10018: EQUAL
10019: AND
10020: IFFALSE 10321
10022: GO 10024
10024: DISABLE
10025: LD_INT 0
10027: PPUSH
// begin firstRussianAttack = 2 ;
10028: LD_ADDR_EXP 23
10032: PUSH
10033: LD_INT 2
10035: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10036: LD_INT 22
10038: PUSH
10039: LD_INT 5
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 21
10048: PUSH
10049: LD_INT 1
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 69
10064: PPUSH
10065: LD_INT 125
10067: PPUSH
10068: LD_INT 98
10070: PPUSH
10071: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10075: LD_INT 22
10077: PUSH
10078: LD_INT 1
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 21
10087: PUSH
10088: LD_INT 1
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: LD_EXP 1
10108: PUSH
10109: LD_EXP 7
10113: PUSH
10114: LD_EXP 4
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: DIFF
10124: PPUSH
10125: LD_STRING DAtt1-Sol1-1
10127: PPUSH
10128: LD_STRING DAtt1-FSol1-1
10130: PPUSH
10131: CALL 4598 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10135: LD_EXP 1
10139: PPUSH
10140: LD_STRING DAtt1-JMM-1
10142: PPUSH
10143: CALL_OW 88
// if Lisa then
10147: LD_EXP 4
10151: IFFALSE 10167
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10153: LD_EXP 4
10157: PPUSH
10158: LD_STRING DAtt1a-Lisa-1
10160: PPUSH
10161: CALL_OW 88
10165: GO 10238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10167: LD_INT 22
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 1
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 26
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PUSH
10207: LD_EXP 1
10211: PUSH
10212: LD_EXP 7
10216: PUSH
10217: LD_EXP 4
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: DIFF
10227: PPUSH
10228: LD_STRING DAtt1a-Sol1-1
10230: PPUSH
10231: LD_STRING DAtt1-FSol1-1
10233: PPUSH
10234: CALL 4598 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10238: LD_EXP 1
10242: PPUSH
10243: LD_STRING DAtt1a-JMM-1
10245: PPUSH
10246: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10250: LD_INT 22
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 26
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 69
10289: PUSH
10290: LD_EXP 1
10294: PUSH
10295: LD_EXP 7
10299: PUSH
10300: LD_EXP 4
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: DIFF
10310: PPUSH
10311: LD_STRING DAtt1b-Sol1-1
10313: PPUSH
10314: LD_STRING DAtt1a-Sol1-1
10316: PPUSH
10317: CALL 4598 0 3
// end ;
10321: PPOPN 1
10323: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10324: LD_EXP 23
10328: PUSH
10329: LD_INT 2
10331: EQUAL
10332: PUSH
10333: LD_INT 5
10335: PPUSH
10336: LD_INT 22
10338: PUSH
10339: LD_INT 5
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 21
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PPUSH
10360: CALL_OW 70
10364: AND
10365: IFFALSE 10423
10367: GO 10369
10369: DISABLE
10370: LD_INT 0
10372: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10373: LD_ADDR_VAR 0 1
10377: PUSH
10378: LD_INT 22
10380: PUSH
10381: LD_INT 5
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 21
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PPUSH
10402: CALL_OW 69
10406: PUSH
10407: FOR_IN
10408: IFFALSE 10421
// RemoveUnit ( i ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL_OW 64
10419: GO 10407
10421: POP
10422: POP
// end ;
10423: PPOPN 1
10425: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10426: LD_INT 22
10428: PUSH
10429: LD_INT 5
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: PPUSH
10439: CALL_OW 69
10443: PUSH
10444: LD_INT 0
10446: EQUAL
10447: PUSH
10448: LD_EXP 23
10452: PUSH
10453: LD_INT 2
10455: EQUAL
10456: AND
10457: IFFALSE 10470
10459: GO 10461
10461: DISABLE
// firstRussianAttack = 3 ;
10462: LD_ADDR_EXP 23
10466: PUSH
10467: LD_INT 3
10469: ST_TO_ADDR
10470: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10471: LD_EXP 28
10475: PUSH
10476: LD_INT 0
10478: EQUAL
10479: IFFALSE 10560
10481: GO 10483
10483: DISABLE
// begin timerStatus = 4 ;
10484: LD_ADDR_EXP 29
10488: PUSH
10489: LD_INT 4
10491: ST_TO_ADDR
// DialogueOn ;
10492: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10496: LD_EXP 13
10500: PPUSH
10501: LD_STRING D2-Don-1
10503: PPUSH
10504: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10508: LD_EXP 1
10512: PPUSH
10513: LD_STRING D2-JMM-1
10515: PPUSH
10516: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10520: LD_EXP 13
10524: PPUSH
10525: LD_STRING D2-Don-2
10527: PPUSH
10528: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10532: LD_EXP 1
10536: PPUSH
10537: LD_STRING D2-JMM-2
10539: PPUSH
10540: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10544: LD_EXP 13
10548: PPUSH
10549: LD_STRING D2-Don-3
10551: PPUSH
10552: CALL_OW 94
// DialogueOff ;
10556: CALL_OW 7
// end ;
10560: END
// every 12 12$0 do var tmp ;
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
// begin PrepareDonaldsonArmy ;
10567: CALL 1187 0 0
// CenterNowOnUnits ( Donaldson ) ;
10571: LD_EXP 13
10575: PPUSH
10576: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10580: LD_INT 22
10582: PUSH
10583: LD_INT 6
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: NOT
10595: IFFALSE 10611
// begin wait ( 3 ) ;
10597: LD_INT 3
10599: PPUSH
10600: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10604: LD_STRING ACH_BASE
10606: PPUSH
10607: CALL_OW 543
// end ; tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
10611: LD_ADDR_VAR 0 1
10615: PUSH
10616: LD_INT 22
10618: PUSH
10619: LD_INT 4
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 26
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: PPUSH
10651: CALL_OW 69
10655: PUSH
10656: LD_EXP 5
10660: PUSH
10661: EMPTY
10662: LIST
10663: DIFF
10664: ST_TO_ADDR
// DialogueOn ;
10665: CALL_OW 6
// tmp := tmp diff DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10669: LD_ADDR_VAR 0 1
10673: PUSH
10674: LD_VAR 0 1
10678: PUSH
10679: LD_VAR 0 1
10683: PPUSH
10684: LD_STRING D3-Sol1-1
10686: PPUSH
10687: LD_STRING D3-Sol1-1
10689: PPUSH
10690: CALL 4598 0 3
10694: DIFF
10695: ST_TO_ADDR
// DialogRandom ( tmp , D3-Sol2-1 , D3-Sol2-1 ) ;
10696: LD_VAR 0 1
10700: PPUSH
10701: LD_STRING D3-Sol2-1
10703: PPUSH
10704: LD_STRING D3-Sol2-1
10706: PPUSH
10707: CALL 4598 0 3
// if Frank then
10711: LD_EXP 5
10715: IFFALSE 10729
// Say ( Frank , D3-Frank-1 ) ;
10717: LD_EXP 5
10721: PPUSH
10722: LD_STRING D3-Frank-1
10724: PPUSH
10725: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10729: LD_EXP 13
10733: PPUSH
10734: LD_STRING D3-Don-1
10736: PPUSH
10737: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10741: LD_EXP 13
10745: PPUSH
10746: LD_STRING D3-Don-1a
10748: PPUSH
10749: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10753: LD_EXP 1
10757: PPUSH
10758: LD_STRING D3-JMM-1
10760: PPUSH
10761: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10765: LD_EXP 13
10769: PPUSH
10770: LD_STRING D3-Don-2
10772: PPUSH
10773: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10777: LD_INT 22
10779: PUSH
10780: LD_INT 6
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 21
10789: PUSH
10790: LD_INT 1
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PPUSH
10801: CALL_OW 69
10805: IFFALSE 10943
// begin Say ( JMM , D3-JMM-2 ) ;
10807: LD_EXP 1
10811: PPUSH
10812: LD_STRING D3-JMM-2
10814: PPUSH
10815: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10819: LD_EXP 13
10823: PPUSH
10824: LD_STRING D3-Don-3
10826: PPUSH
10827: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10831: LD_EXP 1
10835: PPUSH
10836: LD_STRING D3-JMM-3
10838: PPUSH
10839: CALL_OW 88
// if IsOK ( Frank ) then
10843: LD_EXP 5
10847: PPUSH
10848: CALL_OW 302
10852: IFFALSE 10866
// Say ( Frank , D3-Frank-3 ) ;
10854: LD_EXP 5
10858: PPUSH
10859: LD_STRING D3-Frank-3
10861: PPUSH
10862: CALL_OW 88
// DialogueOff ;
10866: CALL_OW 7
// if IsOk ( Frank ) then
10870: LD_EXP 5
10874: PPUSH
10875: CALL_OW 302
10879: IFFALSE 10941
// begin SetSide ( Frank , 0 ) ;
10881: LD_EXP 5
10885: PPUSH
10886: LD_INT 0
10888: PPUSH
10889: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10893: LD_EXP 5
10897: PPUSH
10898: LD_INT 12
10900: PPUSH
10901: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10905: LD_EXP 5
10909: PPUSH
10910: LD_STRING 04t_Frank
10912: PPUSH
10913: CALL_OW 38
// wait ( 0 0$3 ) ;
10917: LD_INT 105
10919: PPUSH
10920: CALL_OW 67
// frankScoutBase = 1 ;
10924: LD_ADDR_EXP 25
10928: PUSH
10929: LD_INT 1
10931: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10932: LD_EXP 5
10936: PPUSH
10937: CALL_OW 64
// end ; end else
10941: GO 11030
// begin Say ( JMM , D3-JMM-4 ) ;
10943: LD_EXP 1
10947: PPUSH
10948: LD_STRING D3-JMM-4
10950: PPUSH
10951: CALL_OW 88
// DialogueOff ;
10955: CALL_OW 7
// if IsOk ( Frank ) then
10959: LD_EXP 5
10963: PPUSH
10964: CALL_OW 302
10968: IFFALSE 11030
// begin SetSide ( Frank , 0 ) ;
10970: LD_EXP 5
10974: PPUSH
10975: LD_INT 0
10977: PPUSH
10978: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10982: LD_EXP 5
10986: PPUSH
10987: LD_INT 12
10989: PPUSH
10990: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10994: LD_EXP 5
10998: PPUSH
10999: LD_STRING 04t_Frank
11001: PPUSH
11002: CALL_OW 38
// wait ( 0 0$3 ) ;
11006: LD_INT 105
11008: PPUSH
11009: CALL_OW 67
// frankScoutBase = 1 ;
11013: LD_ADDR_EXP 25
11017: PUSH
11018: LD_INT 1
11020: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11021: LD_EXP 5
11025: PPUSH
11026: CALL_OW 64
// end ; end ; end ;
11030: PPOPN 1
11032: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11033: LD_EXP 13
11037: PPUSH
11038: CALL_OW 255
11042: PUSH
11043: LD_INT 4
11045: EQUAL
11046: PUSH
11047: LD_EXP 13
11051: PPUSH
11052: CALL_OW 302
11056: AND
11057: IFFALSE 11297
11059: GO 11061
11061: DISABLE
11062: LD_INT 0
11064: PPUSH
11065: PPUSH
// begin wait ( 5 5$00 ) ;
11066: LD_INT 10500
11068: PPUSH
11069: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11073: LD_EXP 13
11077: PPUSH
11078: CALL_OW 255
11082: PUSH
11083: LD_INT 1
11085: EQUAL
11086: PUSH
11087: LD_EXP 13
11091: PPUSH
11092: CALL_OW 301
11096: OR
11097: IFFALSE 11101
// exit ;
11099: GO 11297
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11101: LD_EXP 13
11105: PPUSH
11106: LD_STRING D3b-Don-1
11108: PPUSH
11109: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11113: LD_ADDR_EXP 41
11117: PUSH
11118: LD_INT 1
11120: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11121: LD_ADDR_VAR 0 2
11125: PUSH
11126: LD_INT 22
11128: PUSH
11129: LD_INT 4
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 69
11140: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11141: LD_INT 35
11143: PPUSH
11144: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11148: LD_VAR 0 2
11152: NOT
11153: PUSH
11154: LD_INT 22
11156: PUSH
11157: LD_INT 6
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: LD_INT 101
11166: PUSH
11167: LD_INT 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PPUSH
11178: CALL_OW 69
11182: OR
11183: IFFALSE 11141
// if not tmp then
11185: LD_VAR 0 2
11189: NOT
11190: IFFALSE 11194
// exit ;
11192: GO 11297
// for i in tmp do
11194: LD_ADDR_VAR 0 1
11198: PUSH
11199: LD_VAR 0 2
11203: PUSH
11204: FOR_IN
11205: IFFALSE 11224
// ComAgressiveMove ( i , 52 , 64 ) ;
11207: LD_VAR 0 1
11211: PPUSH
11212: LD_INT 52
11214: PPUSH
11215: LD_INT 64
11217: PPUSH
11218: CALL_OW 114
11222: GO 11204
11224: POP
11225: POP
// wait ( 0 0$10 ) ;
11226: LD_INT 350
11228: PPUSH
11229: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11233: LD_ADDR_VAR 0 1
11237: PUSH
11238: LD_INT 22
11240: PUSH
11241: LD_INT 4
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PPUSH
11248: CALL_OW 69
11252: PUSH
11253: LD_EXP 5
11257: DIFF
11258: PUSH
11259: FOR_IN
11260: IFFALSE 11276
// SetSide ( i , 1 ) ;
11262: LD_VAR 0 1
11266: PPUSH
11267: LD_INT 1
11269: PPUSH
11270: CALL_OW 235
11274: GO 11259
11276: POP
11277: POP
// if IsLive ( Donaldson ) then
11278: LD_EXP 13
11282: PPUSH
11283: CALL_OW 300
11287: IFFALSE 11297
// saveDonaldson := 1 ;
11289: LD_ADDR_EXP 24
11293: PUSH
11294: LD_INT 1
11296: ST_TO_ADDR
// end ;
11297: PPOPN 2
11299: END
// every 0 0$1 trigger IsOk ( Donaldson ) and not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11300: LD_EXP 13
11304: PPUSH
11305: CALL_OW 302
11309: PUSH
11310: LD_EXP 24
11314: NOT
11315: AND
11316: PUSH
11317: LD_EXP 41
11321: NOT
11322: AND
11323: PUSH
11324: LD_INT 26
11326: PPUSH
11327: LD_INT 22
11329: PUSH
11330: LD_INT 1
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PPUSH
11337: CALL_OW 70
11341: PUSH
11342: LD_EXP 13
11346: PPUSH
11347: LD_EXP 1
11351: PPUSH
11352: CALL_OW 296
11356: PUSH
11357: LD_INT 6
11359: LESS
11360: OR
11361: AND
11362: IFFALSE 11417
11364: GO 11366
11366: DISABLE
11367: LD_INT 0
11369: PPUSH
// begin saveDonaldson := 1 ;
11370: LD_ADDR_EXP 24
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11378: LD_ADDR_VAR 0 1
11382: PUSH
11383: LD_INT 22
11385: PUSH
11386: LD_INT 4
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PPUSH
11393: CALL_OW 69
11397: PUSH
11398: FOR_IN
11399: IFFALSE 11415
// SetSide ( i , 1 ) ;
11401: LD_VAR 0 1
11405: PPUSH
11406: LD_INT 1
11408: PPUSH
11409: CALL_OW 235
11413: GO 11398
11415: POP
11416: POP
// end ;
11417: PPOPN 1
11419: END
// every 0 0$1 trigger frankScoutBase do
11420: LD_EXP 25
11424: IFFALSE 11789
11426: GO 11428
11428: DISABLE
// begin wait ( 2 2$30 ) ;
11429: LD_INT 5250
11431: PPUSH
11432: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11436: LD_INT 35
11438: PPUSH
11439: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11443: LD_INT 81
11445: PUSH
11446: LD_INT 4
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 92
11455: PUSH
11456: LD_INT 84
11458: PUSH
11459: LD_INT 28
11461: PUSH
11462: LD_INT 22
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PPUSH
11475: CALL_OW 69
11479: NOT
11480: IFFALSE 11436
// uc_side = 4 ;
11482: LD_ADDR_OWVAR 20
11486: PUSH
11487: LD_INT 4
11489: ST_TO_ADDR
// uc_nation = 1 ;
11490: LD_ADDR_OWVAR 21
11494: PUSH
11495: LD_INT 1
11497: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11498: LD_ADDR_EXP 5
11502: PUSH
11503: LD_STRING 04t_Frank
11505: PPUSH
11506: CALL_OW 34
11510: ST_TO_ADDR
// if not Frank then
11511: LD_EXP 5
11515: NOT
11516: IFFALSE 11520
// exit ;
11518: GO 11789
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11520: LD_EXP 5
11524: PPUSH
11525: LD_INT 13
11527: PPUSH
11528: LD_INT 0
11530: PPUSH
11531: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11535: LD_INT 35
11537: PPUSH
11538: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11542: LD_EXP 1
11546: PPUSH
11547: CALL_OW 310
11551: NOT
11552: PUSH
11553: LD_EXP 1
11557: PPUSH
11558: LD_INT 4
11560: PPUSH
11561: CALL_OW 296
11565: PUSH
11566: LD_INT 20
11568: LESS
11569: AND
11570: IFFALSE 11603
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11572: LD_EXP 5
11576: PPUSH
11577: LD_EXP 1
11581: PPUSH
11582: CALL_OW 250
11586: PPUSH
11587: LD_EXP 1
11591: PPUSH
11592: CALL_OW 251
11596: PPUSH
11597: CALL_OW 111
11601: GO 11618
// ComMoveXY ( Frank , 51 , 15 ) ;
11603: LD_EXP 5
11607: PPUSH
11608: LD_INT 51
11610: PPUSH
11611: LD_INT 15
11613: PPUSH
11614: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11618: LD_EXP 5
11622: PPUSH
11623: LD_EXP 1
11627: PPUSH
11628: CALL_OW 296
11632: PUSH
11633: LD_INT 10
11635: LESS
11636: IFFALSE 11535
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11638: LD_EXP 1
11642: PUSH
11643: LD_EXP 5
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PPUSH
11652: CALL_OW 87
// DialogueOn ;
11656: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11660: LD_EXP 5
11664: PPUSH
11665: LD_STRING D3a-Frank-1
11667: PPUSH
11668: CALL_OW 88
// if Lisa then
11672: LD_EXP 4
11676: IFFALSE 11726
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11678: LD_EXP 4
11682: PPUSH
11683: LD_STRING D3a-Lisa-1
11685: PPUSH
11686: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11690: LD_EXP 5
11694: PPUSH
11695: LD_STRING D3a-Frank-2
11697: PPUSH
11698: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11702: LD_EXP 4
11706: PPUSH
11707: LD_STRING D3a-Lisa-2
11709: PPUSH
11710: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11714: LD_EXP 5
11718: PPUSH
11719: LD_STRING D3a-Frank-3
11721: PPUSH
11722: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11726: LD_EXP 1
11730: PPUSH
11731: LD_STRING D3a-JMM-3
11733: PPUSH
11734: CALL_OW 88
// DialogueOff ;
11738: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11742: LD_EXP 5
11746: PPUSH
11747: LD_INT 1
11749: PPUSH
11750: CALL_OW 235
// InGameOn ;
11754: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11758: LD_INT 1
11760: PPUSH
11761: LD_INT 7
11763: PPUSH
11764: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11768: LD_INT 93
11770: PPUSH
11771: LD_INT 91
11773: PPUSH
11774: CALL_OW 84
// wait ( 0 0$5 ) ;
11778: LD_INT 175
11780: PPUSH
11781: CALL_OW 67
// InGameOff ;
11785: CALL_OW 9
// end ;
11789: END
// every 12 12$0 trigger Difficulty > 1 do
11790: LD_OWVAR 67
11794: PUSH
11795: LD_INT 1
11797: GREATER
11798: IFFALSE 11822
11800: GO 11802
11802: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11803: LD_INT 24
11805: PPUSH
11806: LD_INT 24
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: LD_INT 1
11814: PPUSH
11815: LD_INT 53
11817: PPUSH
11818: CALL_OW 185
11822: END
// every 18 18$0 do
11823: GO 11825
11825: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11826: LD_EXP 14
11830: PPUSH
11831: LD_STRING D4-Har-1
11833: PPUSH
11834: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11838: LD_EXP 1
11842: PPUSH
11843: LD_STRING D4-JMM-1
11845: PPUSH
11846: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11850: LD_EXP 14
11854: PPUSH
11855: LD_STRING D4-Har-2
11857: PPUSH
11858: CALL_OW 94
// case Query ( Q1 ) of 1 :
11862: LD_STRING Q1
11864: PPUSH
11865: CALL_OW 97
11869: PUSH
11870: LD_INT 1
11872: DOUBLE
11873: EQUAL
11874: IFTRUE 11878
11876: GO 11937
11878: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11879: LD_EXP 1
11883: PPUSH
11884: LD_STRING D5-JMM-1
11886: PPUSH
11887: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11891: LD_EXP 14
11895: PPUSH
11896: LD_STRING D5-Har-1
11898: PPUSH
11899: CALL_OW 94
// timeToSupport = 10 10$0 ;
11903: LD_ADDR_EXP 28
11907: PUSH
11908: LD_INT 21000
11910: ST_TO_ADDR
// timerStatus = 2 ;
11911: LD_ADDR_EXP 29
11915: PUSH
11916: LD_INT 2
11918: ST_TO_ADDR
// startTimer = 1 ;
11919: LD_ADDR_EXP 30
11923: PUSH
11924: LD_INT 1
11926: ST_TO_ADDR
// harrAnswer = 1 ;
11927: LD_ADDR_EXP 26
11931: PUSH
11932: LD_INT 1
11934: ST_TO_ADDR
// end ; 2 :
11935: GO 12072
11937: LD_INT 2
11939: DOUBLE
11940: EQUAL
11941: IFTRUE 11945
11943: GO 12004
11945: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11946: LD_EXP 1
11950: PPUSH
11951: LD_STRING D5-JMM-2
11953: PPUSH
11954: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11958: LD_EXP 14
11962: PPUSH
11963: LD_STRING D5-Har-2
11965: PPUSH
11966: CALL_OW 94
// timeToSupport = 5 5$0 ;
11970: LD_ADDR_EXP 28
11974: PUSH
11975: LD_INT 10500
11977: ST_TO_ADDR
// timerStatus = 2 ;
11978: LD_ADDR_EXP 29
11982: PUSH
11983: LD_INT 2
11985: ST_TO_ADDR
// startTimer = 1 ;
11986: LD_ADDR_EXP 30
11990: PUSH
11991: LD_INT 1
11993: ST_TO_ADDR
// harrAnswer = 2 ;
11994: LD_ADDR_EXP 26
11998: PUSH
11999: LD_INT 2
12001: ST_TO_ADDR
// end ; 3 :
12002: GO 12072
12004: LD_INT 3
12006: DOUBLE
12007: EQUAL
12008: IFTRUE 12012
12010: GO 12071
12012: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12013: LD_EXP 1
12017: PPUSH
12018: LD_STRING D5-JMM-3
12020: PPUSH
12021: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12025: LD_EXP 14
12029: PPUSH
12030: LD_STRING D5-Har-3
12032: PPUSH
12033: CALL_OW 94
// timeToSupport = 5 5$0 ;
12037: LD_ADDR_EXP 28
12041: PUSH
12042: LD_INT 10500
12044: ST_TO_ADDR
// timerStatus = 2 ;
12045: LD_ADDR_EXP 29
12049: PUSH
12050: LD_INT 2
12052: ST_TO_ADDR
// startTimer = 1 ;
12053: LD_ADDR_EXP 30
12057: PUSH
12058: LD_INT 1
12060: ST_TO_ADDR
// harrAnswer = 3 ;
12061: LD_ADDR_EXP 26
12065: PUSH
12066: LD_INT 3
12068: ST_TO_ADDR
// end ; end ;
12069: GO 12072
12071: POP
// end ;
12072: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12073: LD_EXP 29
12077: PUSH
12078: LD_INT 2
12080: EQUAL
12081: PUSH
12082: LD_EXP 28
12086: PUSH
12087: LD_INT 0
12089: EQUAL
12090: AND
12091: IFFALSE 12380
12093: GO 12095
12095: DISABLE
// begin timerStatus = 4 ;
12096: LD_ADDR_EXP 29
12100: PUSH
12101: LD_INT 4
12103: ST_TO_ADDR
// if harrAnswer = 1 then
12104: LD_EXP 26
12108: PUSH
12109: LD_INT 1
12111: EQUAL
12112: IFFALSE 12196
// begin PrepareHarrisonSupport ( 3 ) ;
12114: LD_INT 3
12116: PPUSH
12117: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12121: LD_INT 2100
12123: PPUSH
12124: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12128: LD_EXP 14
12132: PPUSH
12133: LD_STRING D7-Har-1
12135: PPUSH
12136: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12140: LD_STRING M2
12142: PPUSH
12143: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12147: LD_ADDR_EXP 27
12151: PUSH
12152: LD_INT 31500
12154: PUSH
12155: LD_INT 10500
12157: PUSH
12158: LD_INT 8400
12160: PUSH
12161: LD_INT 6300
12163: PUSH
12164: LD_INT 6300
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: PUSH
12173: LD_OWVAR 67
12177: ARRAY
12178: PLUS
12179: ST_TO_ADDR
// startTimer = 1 ;
12180: LD_ADDR_EXP 30
12184: PUSH
12185: LD_INT 1
12187: ST_TO_ADDR
// timerStatus = 3 ;
12188: LD_ADDR_EXP 29
12192: PUSH
12193: LD_INT 3
12195: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12196: LD_EXP 26
12200: PUSH
12201: LD_INT 2
12203: EQUAL
12204: IFFALSE 12288
// begin PrepareHarrisonSupport ( 4 ) ;
12206: LD_INT 4
12208: PPUSH
12209: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12213: LD_INT 2100
12215: PPUSH
12216: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12220: LD_EXP 14
12224: PPUSH
12225: LD_STRING D7-Har-1
12227: PPUSH
12228: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12232: LD_STRING M2
12234: PPUSH
12235: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12239: LD_ADDR_EXP 27
12243: PUSH
12244: LD_INT 33600
12246: PUSH
12247: LD_INT 10500
12249: PUSH
12250: LD_INT 8400
12252: PUSH
12253: LD_INT 6300
12255: PUSH
12256: LD_INT 5250
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: PUSH
12265: LD_OWVAR 67
12269: ARRAY
12270: PLUS
12271: ST_TO_ADDR
// startTimer = 1 ;
12272: LD_ADDR_EXP 30
12276: PUSH
12277: LD_INT 1
12279: ST_TO_ADDR
// timerStatus = 3 ;
12280: LD_ADDR_EXP 29
12284: PUSH
12285: LD_INT 3
12287: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12288: LD_EXP 26
12292: PUSH
12293: LD_INT 3
12295: EQUAL
12296: IFFALSE 12380
// begin PrepareHarrisonSupport ( 5 ) ;
12298: LD_INT 5
12300: PPUSH
12301: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12305: LD_INT 2100
12307: PPUSH
12308: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12312: LD_EXP 14
12316: PPUSH
12317: LD_STRING D7-Har-1
12319: PPUSH
12320: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12324: LD_STRING M2
12326: PPUSH
12327: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12331: LD_ADDR_EXP 27
12335: PUSH
12336: LD_INT 35700
12338: PUSH
12339: LD_INT 10500
12341: PUSH
12342: LD_INT 6300
12344: PUSH
12345: LD_INT 4200
12347: PUSH
12348: LD_INT 3150
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: PUSH
12357: LD_OWVAR 67
12361: ARRAY
12362: PLUS
12363: ST_TO_ADDR
// startTimer = 1 ;
12364: LD_ADDR_EXP 30
12368: PUSH
12369: LD_INT 1
12371: ST_TO_ADDR
// timerStatus = 3 ;
12372: LD_ADDR_EXP 29
12376: PUSH
12377: LD_INT 3
12379: ST_TO_ADDR
// end ; end ;
12380: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12381: LD_EXP 27
12385: PUSH
12386: LD_INT 8400
12388: LESSEQUAL
12389: PUSH
12390: LD_EXP 29
12394: PUSH
12395: LD_INT 3
12397: EQUAL
12398: AND
12399: IFFALSE 12431
12401: GO 12403
12403: DISABLE
// begin DialogueOn ;
12404: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12408: LD_EXP 14
12412: PPUSH
12413: LD_STRING D7a-Har-1
12415: PPUSH
12416: CALL_OW 94
// DialogueOff ;
12420: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12424: LD_STRING M2a
12426: PPUSH
12427: CALL_OW 337
// end ;
12431: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12432: LD_EXP 27
12436: PUSH
12437: LD_INT 0
12439: LESSEQUAL
12440: PUSH
12441: LD_EXP 29
12445: PUSH
12446: LD_INT 3
12448: EQUAL
12449: AND
12450: PUSH
12451: LD_EXP 40
12455: NOT
12456: AND
12457: IFFALSE 12596
12459: GO 12461
12461: DISABLE
12462: LD_INT 0
12464: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12465: LD_ADDR_VAR 0 1
12469: PUSH
12470: LD_INT 22
12472: PUSH
12473: LD_INT 1
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 69
12484: PUSH
12485: LD_EXP 1
12489: PUSH
12490: EMPTY
12491: LIST
12492: DIFF
12493: ST_TO_ADDR
// saveDonaldson = 2 ;
12494: LD_ADDR_EXP 24
12498: PUSH
12499: LD_INT 2
12501: ST_TO_ADDR
// DialogueOn ;
12502: CALL_OW 6
// if IsOk ( Donaldson ) then
12506: LD_EXP 13
12510: PPUSH
12511: CALL_OW 302
12515: IFFALSE 12531
// SayRadio ( Harisson , D8-Har-1 ) else
12517: LD_EXP 14
12521: PPUSH
12522: LD_STRING D8-Har-1
12524: PPUSH
12525: CALL_OW 94
12529: GO 12543
// SayRadio ( Harisson , D8-Har-1a ) ;
12531: LD_EXP 14
12535: PPUSH
12536: LD_STRING D8-Har-1a
12538: PPUSH
12539: CALL_OW 94
// DialogueOff ;
12543: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12547: LD_VAR 0 1
12551: PPUSH
12552: LD_INT 4
12554: PPUSH
12555: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12559: LD_VAR 0 1
12563: PPUSH
12564: LD_INT 88
12566: PPUSH
12567: LD_INT 89
12569: PPUSH
12570: CALL_OW 114
// honor = 0 ;
12574: LD_ADDR_EXP 39
12578: PUSH
12579: LD_INT 0
12581: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12582: LD_INT 350
12584: PPUSH
12585: CALL_OW 67
// YouLost ( LostCommand ) ;
12589: LD_STRING LostCommand
12591: PPUSH
12592: CALL_OW 104
// end ;
12596: PPOPN 1
12598: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12599: LD_INT 22
12601: PUSH
12602: LD_INT 6
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 21
12611: PUSH
12612: LD_INT 1
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PPUSH
12623: CALL_OW 69
12627: PUSH
12628: LD_INT 0
12630: EQUAL
12631: PUSH
12632: LD_EXP 20
12636: PUSH
12637: LD_INT 0
12639: EQUAL
12640: AND
12641: PUSH
12642: LD_EXP 44
12646: PUSH
12647: LD_INT 1
12649: EQUAL
12650: AND
12651: IFFALSE 12745
12653: GO 12655
12655: DISABLE
12656: LD_INT 0
12658: PPUSH
12659: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12660: LD_ADDR_VAR 0 2
12664: PUSH
12665: LD_INT 22
12667: PUSH
12668: LD_INT 1
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 21
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 23
12687: PUSH
12688: LD_INT 1
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: LIST
12699: PPUSH
12700: CALL_OW 69
12704: ST_TO_ADDR
// for i in tmp do
12705: LD_ADDR_VAR 0 1
12709: PUSH
12710: LD_VAR 0 2
12714: PUSH
12715: FOR_IN
12716: IFFALSE 12743
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12718: LD_VAR 0 1
12722: PPUSH
12723: LD_INT 1
12725: PPUSH
12726: LD_INT 4
12728: PPUSH
12729: CALL_OW 12
12733: PPUSH
12734: LD_INT 500
12736: PPUSH
12737: CALL_OW 492
12741: GO 12715
12743: POP
12744: POP
// end ; end_of_file
12745: PPOPN 2
12747: END
// every 0 0$1 trigger AIEnable do
12748: LD_EXP 37
12752: IFFALSE 12846
12754: GO 12756
12756: DISABLE
// begin enable ;
12757: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12758: LD_INT 3
12760: PPUSH
12761: LD_INT 21
12763: PPUSH
12764: LD_INT 7
12766: PPUSH
12767: CALL 6030 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12771: LD_INT 3
12773: PPUSH
12774: LD_INT 8
12776: PPUSH
12777: LD_INT 7
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: CALL 6334 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12787: LD_EXP 20
12791: PUSH
12792: LD_INT 2
12794: EQUAL
12795: PUSH
12796: LD_INT 22
12798: PUSH
12799: LD_INT 6
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PPUSH
12806: CALL_OW 69
12810: AND
12811: IFFALSE 12846
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12813: LD_INT 6
12815: PPUSH
12816: LD_EXP 21
12820: PPUSH
12821: LD_INT 6
12823: PPUSH
12824: CALL 6030 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12828: LD_INT 6
12830: PPUSH
12831: LD_INT 9
12833: PPUSH
12834: LD_INT 6
12836: PPUSH
12837: LD_EXP 22
12841: PPUSH
12842: CALL 6334 0 4
// end ; end ;
12846: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12847: LD_EXP 15
12851: PPUSH
12852: CALL_OW 310
12856: NOT
12857: PUSH
12858: LD_INT 21
12860: PPUSH
12861: CALL_OW 302
12865: AND
12866: PUSH
12867: LD_INT 21
12869: PPUSH
12870: CALL_OW 255
12874: PUSH
12875: LD_INT 3
12877: EQUAL
12878: AND
12879: IFFALSE 12896
12881: GO 12883
12883: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12884: LD_EXP 15
12888: PPUSH
12889: LD_INT 21
12891: PPUSH
12892: CALL_OW 120
12896: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12897: LD_INT 22
12899: PUSH
12900: LD_INT 3
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PUSH
12907: LD_INT 21
12909: PUSH
12910: LD_INT 2
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 55
12919: PUSH
12920: EMPTY
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 69
12932: PUSH
12933: LD_INT 0
12935: EQUAL
12936: PUSH
12937: LD_INT 1
12939: PPUSH
12940: CALL_OW 255
12944: PUSH
12945: LD_INT 3
12947: EQUAL
12948: AND
12949: PUSH
12950: LD_INT 21
12952: PPUSH
12953: CALL_OW 302
12957: AND
12958: PUSH
12959: LD_INT 21
12961: PPUSH
12962: CALL_OW 255
12966: PUSH
12967: LD_INT 3
12969: EQUAL
12970: AND
12971: PUSH
12972: LD_INT 21
12974: PPUSH
12975: CALL_OW 302
12979: AND
12980: IFFALSE 13192
12982: GO 12984
12984: DISABLE
// begin enable ;
12985: ENABLE
// if Difficulty = 1 then
12986: LD_OWVAR 67
12990: PUSH
12991: LD_INT 1
12993: EQUAL
12994: IFFALSE 13038
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
12996: LD_INT 3
12998: PPUSH
12999: LD_INT 24
13001: PPUSH
13002: LD_OWVAR 67
13006: PUSH
13007: LD_INT 2
13009: PLUS
13010: PPUSH
13011: LD_INT 42
13013: PUSH
13014: LD_INT 44
13016: PUSH
13017: LD_INT 43
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: PPUSH
13025: LD_INT 1
13027: PPUSH
13028: LD_INT 1
13030: PPUSH
13031: LD_INT 21
13033: PPUSH
13034: CALL 6848 0 7
// if Difficulty = 2 then
13038: LD_OWVAR 67
13042: PUSH
13043: LD_INT 2
13045: EQUAL
13046: IFFALSE 13113
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13048: LD_INT 3
13050: PPUSH
13051: LD_INT 24
13053: PPUSH
13054: LD_OWVAR 67
13058: PUSH
13059: LD_INT 2
13061: PLUS
13062: PPUSH
13063: LD_INT 44
13065: PUSH
13066: LD_INT 44
13068: PUSH
13069: LD_INT 43
13071: PUSH
13072: LD_INT 43
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: PPUSH
13081: LD_INT 1
13083: PPUSH
13084: LD_INT 1
13086: PPUSH
13087: LD_INT 21
13089: PUSH
13090: LD_INT 22
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PUSH
13097: LD_INT 1
13099: PPUSH
13100: LD_INT 2
13102: PPUSH
13103: CALL_OW 12
13107: ARRAY
13108: PPUSH
13109: CALL 6848 0 7
// if Difficulty >= 3 then
13113: LD_OWVAR 67
13117: PUSH
13118: LD_INT 3
13120: GREATEREQUAL
13121: IFFALSE 13192
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13123: LD_INT 3
13125: PPUSH
13126: LD_INT 24
13128: PPUSH
13129: LD_OWVAR 67
13133: PUSH
13134: LD_INT 2
13136: PPUSH
13137: LD_INT 3
13139: PPUSH
13140: CALL_OW 12
13144: PLUS
13145: PPUSH
13146: LD_INT 44
13148: PUSH
13149: LD_INT 44
13151: PUSH
13152: LD_INT 43
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: LIST
13159: PPUSH
13160: LD_INT 1
13162: PPUSH
13163: LD_INT 1
13165: PPUSH
13166: LD_INT 22
13168: PUSH
13169: LD_INT 23
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 1
13178: PPUSH
13179: LD_INT 2
13181: PPUSH
13182: CALL_OW 12
13186: ARRAY
13187: PPUSH
13188: CALL 6848 0 7
// end ;
13192: END
// every 0 0$1 do
13193: GO 13195
13195: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13196: LD_INT 3
13198: PPUSH
13199: LD_INT 1
13201: PPUSH
13202: LD_INT 3
13204: PPUSH
13205: CALL 5951 0 3
13209: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13210: LD_EXP 20
13214: PUSH
13215: LD_INT 1
13217: EQUAL
13218: IFFALSE 13365
13220: GO 13222
13222: DISABLE
13223: LD_INT 0
13225: PPUSH
13226: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13227: LD_ADDR_VAR 0 2
13231: PUSH
13232: LD_INT 22
13234: PUSH
13235: LD_INT 6
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 21
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: LD_INT 34
13254: PUSH
13255: LD_INT 51
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: PPUSH
13267: CALL_OW 69
13271: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13272: LD_VAR 0 2
13276: PUSH
13277: LD_INT 1
13279: ARRAY
13280: PPUSH
13281: LD_EXP 21
13285: PPUSH
13286: CALL_OW 250
13290: PUSH
13291: LD_INT 5
13293: MINUS
13294: PPUSH
13295: LD_EXP 21
13299: PPUSH
13300: CALL_OW 251
13304: PUSH
13305: LD_INT 5
13307: MINUS
13308: PPUSH
13309: CALL_OW 111
// wait ( 0 0$5 ) ;
13313: LD_INT 175
13315: PPUSH
13316: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13320: LD_VAR 0 2
13324: PUSH
13325: LD_INT 1
13327: ARRAY
13328: PPUSH
13329: LD_INT 41
13331: PPUSH
13332: LD_INT 52
13334: PPUSH
13335: CALL_OW 177
// wait ( 0 0$40 ) ;
13339: LD_INT 1400
13341: PPUSH
13342: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13346: LD_VAR 0 2
13350: PUSH
13351: LD_INT 1
13353: ARRAY
13354: PPUSH
13355: LD_INT 41
13357: PPUSH
13358: LD_INT 44
13360: PPUSH
13361: CALL_OW 111
// end ;
13365: PPOPN 2
13367: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13368: LD_EXP 21
13372: PPUSH
13373: CALL_OW 274
13377: PPUSH
13378: LD_INT 1
13380: PPUSH
13381: CALL_OW 275
13385: PUSH
13386: LD_INT 100
13388: GREATEREQUAL
13389: IFFALSE 13617
13391: GO 13393
13393: DISABLE
13394: LD_INT 0
13396: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13397: LD_ADDR_VAR 0 1
13401: PUSH
13402: LD_INT 22
13404: PUSH
13405: LD_INT 6
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 21
13414: PUSH
13415: LD_INT 1
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 25
13424: PUSH
13425: LD_INT 2
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: PPUSH
13437: CALL_OW 69
13441: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13442: LD_VAR 0 1
13446: PUSH
13447: LD_INT 1
13449: ARRAY
13450: PPUSH
13451: LD_INT 4
13453: PPUSH
13454: LD_INT 39
13456: PPUSH
13457: LD_INT 37
13459: PPUSH
13460: LD_INT 3
13462: PPUSH
13463: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13467: LD_VAR 0 1
13471: PUSH
13472: LD_INT 1
13474: ARRAY
13475: PPUSH
13476: LD_INT 29
13478: PPUSH
13479: LD_INT 42
13481: PPUSH
13482: LD_INT 54
13484: PPUSH
13485: LD_INT 3
13487: PPUSH
13488: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13492: LD_VAR 0 1
13496: PUSH
13497: LD_INT 1
13499: ARRAY
13500: PPUSH
13501: LD_INT 6
13503: PPUSH
13504: LD_INT 38
13506: PPUSH
13507: LD_INT 48
13509: PPUSH
13510: LD_INT 0
13512: PPUSH
13513: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13517: LD_VAR 0 1
13521: PUSH
13522: LD_INT 1
13524: ARRAY
13525: PPUSH
13526: LD_INT 2
13528: PPUSH
13529: LD_INT 32
13531: PPUSH
13532: LD_INT 38
13534: PPUSH
13535: LD_INT 2
13537: PPUSH
13538: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13542: LD_VAR 0 1
13546: PUSH
13547: LD_INT 1
13549: ARRAY
13550: PPUSH
13551: LD_INT 26
13553: PPUSH
13554: LD_INT 39
13556: PPUSH
13557: LD_INT 55
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13567: LD_VAR 0 1
13571: PUSH
13572: LD_INT 1
13574: ARRAY
13575: PPUSH
13576: LD_INT 32
13578: PPUSH
13579: LD_INT 31
13581: PPUSH
13582: LD_INT 31
13584: PPUSH
13585: LD_INT 3
13587: PPUSH
13588: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13592: LD_VAR 0 1
13596: PUSH
13597: LD_INT 1
13599: ARRAY
13600: PPUSH
13601: LD_INT 31
13603: PPUSH
13604: LD_INT 50
13606: PPUSH
13607: LD_INT 51
13609: PPUSH
13610: LD_INT 4
13612: PPUSH
13613: CALL_OW 205
// end ;
13617: PPOPN 1
13619: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13620: LD_EXP 46
13624: IFFALSE 14189
13626: GO 13628
13628: DISABLE
13629: LD_INT 0
13631: PPUSH
13632: PPUSH
13633: PPUSH
// begin enable ;
13634: ENABLE
// if not ruMobile then
13635: LD_EXP 46
13639: NOT
13640: IFFALSE 13644
// exit ;
13642: GO 14189
// for i in ruMobile do
13644: LD_ADDR_VAR 0 1
13648: PUSH
13649: LD_EXP 46
13653: PUSH
13654: FOR_IN
13655: IFFALSE 14187
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13657: LD_VAR 0 1
13661: PPUSH
13662: CALL_OW 302
13666: NOT
13667: PUSH
13668: LD_VAR 0 1
13672: PPUSH
13673: CALL_OW 255
13677: PUSH
13678: LD_INT 3
13680: NONEQUAL
13681: OR
13682: IFFALSE 13702
// begin ruMobile := ruMobile diff i ;
13684: LD_ADDR_EXP 46
13688: PUSH
13689: LD_EXP 46
13693: PUSH
13694: LD_VAR 0 1
13698: DIFF
13699: ST_TO_ADDR
// continue ;
13700: GO 13654
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 110
13711: NOT
13712: PUSH
13713: LD_VAR 0 1
13717: PPUSH
13718: CALL_OW 110
13722: PUSH
13723: LD_INT 0
13725: EQUAL
13726: OR
13727: IFFALSE 13842
// begin if GetFuel ( i ) < 50 then
13729: LD_VAR 0 1
13733: PPUSH
13734: CALL_OW 261
13738: PUSH
13739: LD_INT 50
13741: LESS
13742: IFFALSE 13801
// begin ComMoveXY ( i , 106 , 88 ) ;
13744: LD_VAR 0 1
13748: PPUSH
13749: LD_INT 106
13751: PPUSH
13752: LD_INT 88
13754: PPUSH
13755: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13759: LD_INT 35
13761: PPUSH
13762: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13766: LD_VAR 0 1
13770: PPUSH
13771: LD_INT 106
13773: PPUSH
13774: LD_INT 88
13776: PPUSH
13777: CALL_OW 297
13781: PUSH
13782: LD_INT 4
13784: LESS
13785: IFFALSE 13759
// SetFuel ( i , 100 ) ;
13787: LD_VAR 0 1
13791: PPUSH
13792: LD_INT 100
13794: PPUSH
13795: CALL_OW 240
// end else
13799: GO 13842
// if not IsInArea ( i , ruParking ) then
13801: LD_VAR 0 1
13805: PPUSH
13806: LD_INT 25
13808: PPUSH
13809: CALL_OW 308
13813: NOT
13814: IFFALSE 13830
// ComMoveToArea ( i , ruParking ) else
13816: LD_VAR 0 1
13820: PPUSH
13821: LD_INT 25
13823: PPUSH
13824: CALL_OW 113
13828: GO 13842
// SetTag ( i , 1 ) ;
13830: LD_VAR 0 1
13834: PPUSH
13835: LD_INT 1
13837: PPUSH
13838: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13842: LD_VAR 0 1
13846: PPUSH
13847: CALL_OW 110
13851: PUSH
13852: LD_INT 1
13854: EQUAL
13855: IFFALSE 13985
// begin if GetLives ( i ) < 650 then
13857: LD_VAR 0 1
13861: PPUSH
13862: CALL_OW 256
13866: PUSH
13867: LD_INT 650
13869: LESS
13870: IFFALSE 13962
// begin if not IsDrivenBy ( i ) then
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 311
13881: NOT
13882: IFFALSE 13886
// continue ;
13884: GO 13654
// mech := IsDrivenBy ( i ) ;
13886: LD_ADDR_VAR 0 2
13890: PUSH
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 311
13900: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13901: LD_VAR 0 2
13905: PPUSH
13906: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13910: LD_VAR 0 2
13914: PPUSH
13915: LD_VAR 0 1
13919: PPUSH
13920: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13924: LD_INT 35
13926: PPUSH
13927: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13931: LD_VAR 0 1
13935: PPUSH
13936: CALL_OW 256
13940: PUSH
13941: LD_INT 1000
13943: EQUAL
13944: IFFALSE 13924
// ComEnterUnit ( mech , i ) ;
13946: LD_VAR 0 2
13950: PPUSH
13951: LD_VAR 0 1
13955: PPUSH
13956: CALL_OW 120
// end else
13960: GO 13985
// if IsDrivenBy ( i ) then
13962: LD_VAR 0 1
13966: PPUSH
13967: CALL_OW 311
13971: IFFALSE 13985
// SetTag ( i , 2 ) ;
13973: LD_VAR 0 1
13977: PPUSH
13978: LD_INT 2
13980: PPUSH
13981: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
13985: LD_VAR 0 1
13989: PPUSH
13990: CALL_OW 110
13994: PUSH
13995: LD_INT 2
13997: EQUAL
13998: IFFALSE 14185
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14000: LD_ADDR_VAR 0 3
14004: PUSH
14005: LD_INT 24
14007: PPUSH
14008: LD_INT 81
14010: PUSH
14011: LD_INT 3
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PPUSH
14018: CALL_OW 70
14022: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14023: LD_VAR 0 1
14027: PPUSH
14028: CALL_OW 256
14032: PUSH
14033: LD_INT 650
14035: LESS
14036: IFFALSE 14061
// begin ComStop ( i ) ;
14038: LD_VAR 0 1
14042: PPUSH
14043: CALL_OW 141
// SetTag ( i , 0 ) ;
14047: LD_VAR 0 1
14051: PPUSH
14052: LD_INT 0
14054: PPUSH
14055: CALL_OW 109
// continue ;
14059: GO 13654
// end ; if enemy then
14061: LD_VAR 0 3
14065: IFFALSE 14105
// begin if not HasTask ( i ) then
14067: LD_VAR 0 1
14071: PPUSH
14072: CALL_OW 314
14076: NOT
14077: IFFALSE 14103
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14079: LD_VAR 0 1
14083: PPUSH
14084: LD_VAR 0 3
14088: PPUSH
14089: LD_VAR 0 1
14093: PPUSH
14094: CALL_OW 74
14098: PPUSH
14099: CALL_OW 115
// end else
14103: GO 14185
// if ruMobile > 2 then
14105: LD_EXP 46
14109: PUSH
14110: LD_INT 2
14112: GREATER
14113: IFFALSE 14185
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14115: LD_ADDR_VAR 0 3
14119: PUSH
14120: LD_INT 81
14122: PUSH
14123: LD_INT 3
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PPUSH
14130: CALL_OW 69
14134: ST_TO_ADDR
// if enemy then
14135: LD_VAR 0 3
14139: IFFALSE 14185
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
14141: LD_VAR 0 1
14145: PPUSH
14146: LD_INT 95
14148: PUSH
14149: LD_INT 74
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 67
14158: PUSH
14159: LD_INT 59
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: LD_INT 55
14168: PUSH
14169: LD_INT 41
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: PPUSH
14181: CALL 79692 0 2
// end ; end ; end ;
14185: GO 13654
14187: POP
14188: POP
// end ; end_of_file
14189: PPOPN 3
14191: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14192: LD_INT 0
14194: PPUSH
14195: PPUSH
14196: PPUSH
14197: PPUSH
14198: PPUSH
14199: PPUSH
14200: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14201: LD_ADDR_VAR 0 3
14205: PUSH
14206: LD_INT 22
14208: PUSH
14209: LD_INT 6
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PUSH
14216: LD_INT 21
14218: PUSH
14219: LD_INT 1
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 25
14228: PUSH
14229: LD_INT 1
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 3
14238: PUSH
14239: LD_INT 54
14241: PUSH
14242: EMPTY
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: PPUSH
14255: CALL_OW 69
14259: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14260: LD_ADDR_VAR 0 7
14264: PUSH
14265: LD_INT 22
14267: PUSH
14268: LD_INT 6
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: LD_INT 21
14277: PUSH
14278: LD_INT 1
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 25
14287: PUSH
14288: LD_INT 1
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 54
14297: PUSH
14298: EMPTY
14299: LIST
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: PPUSH
14307: CALL_OW 69
14311: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14312: LD_ADDR_VAR 0 4
14316: PUSH
14317: LD_INT 22
14319: PUSH
14320: LD_INT 6
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 21
14329: PUSH
14330: LD_INT 1
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: LD_INT 25
14339: PUSH
14340: LD_INT 2
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14357: LD_ADDR_VAR 0 6
14361: PUSH
14362: LD_INT 22
14364: PUSH
14365: LD_INT 6
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: LD_INT 21
14374: PUSH
14375: LD_INT 1
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PUSH
14382: LD_INT 25
14384: PUSH
14385: LD_INT 4
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: LIST
14396: PPUSH
14397: CALL_OW 69
14401: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14402: LD_ADDR_VAR 0 8
14406: PUSH
14407: LD_INT 22
14409: PUSH
14410: LD_INT 6
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 21
14419: PUSH
14420: LD_INT 2
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: LD_INT 34
14429: PUSH
14430: LD_INT 51
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 69
14446: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 255
14456: PUSH
14457: LD_INT 6
14459: EQUAL
14460: PUSH
14461: LD_VAR 0 1
14465: PPUSH
14466: CALL_OW 266
14470: PUSH
14471: LD_INT 0
14473: EQUAL
14474: AND
14475: IFFALSE 14495
// begin ruPDepot = building ;
14477: LD_ADDR_EXP 21
14481: PUSH
14482: LD_VAR 0 1
14486: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14487: LD_ADDR_EXP 20
14491: PUSH
14492: LD_INT 1
14494: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 266
14504: PUSH
14505: LD_INT 4
14507: EQUAL
14508: PUSH
14509: LD_VAR 0 1
14513: PPUSH
14514: CALL_OW 255
14518: PUSH
14519: LD_INT 6
14521: EQUAL
14522: AND
14523: IFFALSE 14556
// for i in tmpSold do
14525: LD_ADDR_VAR 0 2
14529: PUSH
14530: LD_VAR 0 3
14534: PUSH
14535: FOR_IN
14536: IFFALSE 14554
// ComEnterUnit ( i , building ) ;
14538: LD_VAR 0 2
14542: PPUSH
14543: LD_VAR 0 1
14547: PPUSH
14548: CALL_OW 120
14552: GO 14535
14554: POP
14555: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14556: LD_VAR 0 1
14560: PPUSH
14561: CALL_OW 266
14565: PUSH
14566: LD_INT 6
14568: EQUAL
14569: PUSH
14570: LD_VAR 0 1
14574: PPUSH
14575: CALL_OW 255
14579: PUSH
14580: LD_INT 6
14582: EQUAL
14583: AND
14584: IFFALSE 14642
// begin for i in tmpSci do
14586: LD_ADDR_VAR 0 2
14590: PUSH
14591: LD_VAR 0 6
14595: PUSH
14596: FOR_IN
14597: IFFALSE 14615
// ComEnterUnit ( i , building ) ;
14599: LD_VAR 0 2
14603: PPUSH
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 120
14613: GO 14596
14615: POP
14616: POP
// ResAllTechs ( 6 , building , 3 ) ;
14617: LD_INT 6
14619: PPUSH
14620: LD_VAR 0 1
14624: PPUSH
14625: LD_INT 3
14627: PPUSH
14628: CALL 5951 0 3
// ruPLab = building ;
14632: LD_ADDR_EXP 22
14636: PUSH
14637: LD_VAR 0 1
14641: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14642: LD_VAR 0 1
14646: PPUSH
14647: CALL_OW 266
14651: PUSH
14652: LD_INT 2
14654: EQUAL
14655: PUSH
14656: LD_VAR 0 1
14660: PPUSH
14661: CALL_OW 255
14665: PUSH
14666: LD_INT 6
14668: EQUAL
14669: AND
14670: IFFALSE 14721
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14672: LD_ADDR_VAR 0 5
14676: PUSH
14677: LD_VAR 0 8
14681: PUSH
14682: LD_INT 1
14684: ARRAY
14685: PPUSH
14686: CALL_OW 313
14690: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14691: LD_VAR 0 5
14695: PPUSH
14696: CALL_OW 121
// wait ( 0 0$1 ) ;
14700: LD_INT 35
14702: PPUSH
14703: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14707: LD_VAR 0 5
14711: PPUSH
14712: LD_VAR 0 1
14716: PPUSH
14717: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14721: LD_VAR 0 1
14725: PPUSH
14726: CALL_OW 266
14730: PUSH
14731: LD_INT 32
14733: EQUAL
14734: PUSH
14735: LD_VAR 0 1
14739: PPUSH
14740: CALL_OW 255
14744: PUSH
14745: LD_INT 6
14747: EQUAL
14748: AND
14749: IFFALSE 14801
// begin ComPlaceWeapon ( building , 42 ) ;
14751: LD_VAR 0 1
14755: PPUSH
14756: LD_INT 42
14758: PPUSH
14759: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14763: LD_VAR 0 7
14767: PUSH
14768: LD_INT 1
14770: ARRAY
14771: PPUSH
14772: CALL_OW 122
// wait ( 0 0$1 ) ;
14776: LD_INT 35
14778: PPUSH
14779: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14783: LD_VAR 0 7
14787: PUSH
14788: LD_INT 1
14790: ARRAY
14791: PPUSH
14792: LD_VAR 0 1
14796: PPUSH
14797: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14801: LD_VAR 0 1
14805: PPUSH
14806: CALL_OW 266
14810: PUSH
14811: LD_INT 31
14813: EQUAL
14814: PUSH
14815: LD_VAR 0 1
14819: PPUSH
14820: CALL_OW 255
14824: PUSH
14825: LD_INT 6
14827: EQUAL
14828: AND
14829: IFFALSE 14895
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14831: LD_VAR 0 7
14835: PUSH
14836: LD_INT 2
14838: ARRAY
14839: PPUSH
14840: CALL_OW 122
// wait ( 0 0$1 ) ;
14844: LD_INT 35
14846: PPUSH
14847: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14851: LD_VAR 0 7
14855: PUSH
14856: LD_INT 2
14858: ARRAY
14859: PPUSH
14860: LD_VAR 0 1
14864: PPUSH
14865: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14869: LD_VAR 0 4
14873: PUSH
14874: LD_INT 1
14876: ARRAY
14877: PPUSH
14878: LD_EXP 21
14882: PPUSH
14883: CALL_OW 120
// baseReadyToBuild = 2 ;
14887: LD_ADDR_EXP 20
14891: PUSH
14892: LD_INT 2
14894: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14895: LD_VAR 0 1
14899: PPUSH
14900: CALL_OW 266
14904: PUSH
14905: LD_INT 32
14907: EQUAL
14908: PUSH
14909: LD_VAR 0 1
14913: PPUSH
14914: CALL_OW 255
14918: PUSH
14919: LD_INT 1
14921: EQUAL
14922: AND
14923: PUSH
14924: LD_EXP 32
14928: PUSH
14929: LD_INT 0
14931: EQUAL
14932: AND
14933: IFFALSE 15178
// begin bunkerDialog = 1 ;
14935: LD_ADDR_EXP 32
14939: PUSH
14940: LD_INT 1
14942: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14943: LD_EXP 11
14947: PPUSH
14948: CALL_OW 302
14952: IFFALSE 14968
// Say ( Claptopn , D11-Eng1-1 ) else
14954: LD_EXP 11
14958: PPUSH
14959: LD_STRING D11-Eng1-1
14961: PPUSH
14962: CALL_OW 88
14966: GO 15164
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14968: LD_INT 22
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 21
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 25
14990: PUSH
14991: LD_INT 3
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: LD_INT 26
15000: PUSH
15001: LD_INT 1
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: PPUSH
15014: CALL_OW 69
15018: PUSH
15019: LD_EXP 1
15023: PUSH
15024: EMPTY
15025: LIST
15026: PUSH
15027: LD_INT 0
15029: GREATER
15030: DIFF
15031: IFFALSE 15105
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15033: LD_INT 22
15035: PUSH
15036: LD_INT 1
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 21
15045: PUSH
15046: LD_INT 1
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 25
15055: PUSH
15056: LD_INT 2
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 26
15065: PUSH
15066: LD_INT 1
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: PPUSH
15079: CALL_OW 69
15083: PUSH
15084: LD_EXP 1
15088: PUSH
15089: EMPTY
15090: LIST
15091: DIFF
15092: PPUSH
15093: LD_STRING D11-Eng1-1
15095: PPUSH
15096: LD_STRING D11-Eng1-1
15098: PPUSH
15099: CALL 4598 0 3
15103: GO 15164
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15105: LD_INT 22
15107: PUSH
15108: LD_INT 1
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: LD_INT 21
15117: PUSH
15118: LD_INT 1
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PUSH
15125: LD_INT 26
15127: PUSH
15128: LD_INT 1
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: PPUSH
15140: CALL_OW 69
15144: PUSH
15145: LD_EXP 1
15149: PUSH
15150: EMPTY
15151: LIST
15152: DIFF
15153: PPUSH
15154: LD_STRING D11-Eng1-1
15156: PPUSH
15157: LD_STRING D11-Eng1-1
15159: PPUSH
15160: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15164: LD_EXP 33
15168: PUSH
15169: LD_INT 0
15171: EQUAL
15172: IFFALSE 15178
// EnergyDialog ;
15174: CALL 5003 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15178: LD_VAR 0 1
15182: PPUSH
15183: CALL_OW 266
15187: PUSH
15188: LD_INT 29
15190: EQUAL
15191: PUSH
15192: LD_VAR 0 1
15196: PPUSH
15197: CALL_OW 255
15201: PUSH
15202: LD_INT 1
15204: EQUAL
15205: AND
15206: IFFALSE 15216
// buildOil = 1 ;
15208: LD_ADDR_EXP 34
15212: PUSH
15213: LD_INT 1
15215: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15216: LD_VAR 0 1
15220: PPUSH
15221: CALL_OW 266
15225: PUSH
15226: LD_INT 26
15228: EQUAL
15229: PUSH
15230: LD_VAR 0 1
15234: PPUSH
15235: CALL_OW 255
15239: PUSH
15240: LD_INT 1
15242: EQUAL
15243: AND
15244: IFFALSE 15254
// buildPower = 1 ;
15246: LD_ADDR_EXP 35
15250: PUSH
15251: LD_INT 1
15253: ST_TO_ADDR
// end ;
15254: PPOPN 8
15256: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15257: LD_VAR 0 1
15261: PPUSH
15262: CALL_OW 266
15266: PUSH
15267: LD_INT 3
15269: EQUAL
15270: PUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 255
15280: PUSH
15281: LD_INT 1
15283: EQUAL
15284: AND
15285: PUSH
15286: LD_EXP 31
15290: PUSH
15291: LD_INT 0
15293: EQUAL
15294: AND
15295: IFFALSE 15643
// begin factoryDialog = 1 ;
15297: LD_ADDR_EXP 31
15301: PUSH
15302: LD_INT 1
15304: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15305: LD_INT 47
15307: PPUSH
15308: LD_INT 1
15310: PPUSH
15311: CALL_OW 321
15315: PUSH
15316: LD_INT 1
15318: EQUAL
15319: PUSH
15320: LD_INT 45
15322: PPUSH
15323: LD_INT 1
15325: PPUSH
15326: CALL_OW 321
15330: PUSH
15331: LD_INT 1
15333: EQUAL
15334: AND
15335: IFFALSE 15643
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15337: LD_INT 22
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 21
15349: PUSH
15350: LD_INT 3
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 30
15359: PUSH
15360: LD_INT 3
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 24
15369: PUSH
15370: LD_INT 1000
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: PPUSH
15383: CALL_OW 69
15387: PUSH
15388: LD_INT 1
15390: ARRAY
15391: PPUSH
15392: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15396: LD_EXP 1
15400: PPUSH
15401: LD_STRING D9a-JMM-1
15403: PPUSH
15404: CALL_OW 88
// if IsOK ( Campell ) then
15408: LD_EXP 12
15412: PPUSH
15413: CALL_OW 302
15417: IFFALSE 15433
// Say ( Campell , D9a-Mech1-1 ) else
15419: LD_EXP 12
15423: PPUSH
15424: LD_STRING D9a-Mech1-1
15426: PPUSH
15427: CALL_OW 88
15431: GO 15629
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15433: LD_INT 22
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 21
15445: PUSH
15446: LD_INT 1
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 25
15455: PUSH
15456: LD_INT 3
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: LD_INT 26
15465: PUSH
15466: LD_INT 1
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: PPUSH
15479: CALL_OW 69
15483: PUSH
15484: LD_EXP 1
15488: PUSH
15489: EMPTY
15490: LIST
15491: PUSH
15492: LD_INT 0
15494: GREATER
15495: DIFF
15496: IFFALSE 15570
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15498: LD_INT 22
15500: PUSH
15501: LD_INT 1
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 21
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 25
15520: PUSH
15521: LD_INT 3
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 26
15530: PUSH
15531: LD_INT 1
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: PPUSH
15544: CALL_OW 69
15548: PUSH
15549: LD_EXP 1
15553: PUSH
15554: EMPTY
15555: LIST
15556: DIFF
15557: PPUSH
15558: LD_STRING D9a-Mech1-1
15560: PPUSH
15561: LD_STRING D9a-Mech1-1
15563: PPUSH
15564: CALL 4598 0 3
15568: GO 15629
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15570: LD_INT 22
15572: PUSH
15573: LD_INT 1
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 21
15582: PUSH
15583: LD_INT 1
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 26
15592: PUSH
15593: LD_INT 1
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: LIST
15604: PPUSH
15605: CALL_OW 69
15609: PUSH
15610: LD_EXP 1
15614: PUSH
15615: EMPTY
15616: LIST
15617: DIFF
15618: PPUSH
15619: LD_STRING D9a-Mech1-1
15621: PPUSH
15622: LD_STRING D9a-Mech1-1
15624: PPUSH
15625: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15629: LD_EXP 33
15633: PUSH
15634: LD_INT 0
15636: EQUAL
15637: IFFALSE 15643
// EnergyDialog ;
15639: CALL 5003 0 0
// end ; end ; end ;
15643: PPOPN 1
15645: END
// on UnitDestroyed ( unit ) do var mech ;
15646: LD_INT 0
15648: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15649: LD_VAR 0 1
15653: PPUSH
15654: CALL 35507 0 1
// if unit = JMM then
15658: LD_VAR 0 1
15662: PUSH
15663: LD_EXP 1
15667: EQUAL
15668: IFFALSE 15677
// YouLost ( JMM ) ;
15670: LD_STRING JMM
15672: PPUSH
15673: CALL_OW 104
// if unit = ambdept0 then
15677: LD_VAR 0 1
15681: PUSH
15682: LD_INT 4
15684: EQUAL
15685: IFFALSE 15694
// YouLost ( Base ) ;
15687: LD_STRING Base
15689: PPUSH
15690: CALL_OW 104
// if unit in ruMobile then
15694: LD_VAR 0 1
15698: PUSH
15699: LD_EXP 46
15703: IN
15704: IFFALSE 15722
// ruMobile = ruMobile diff ruMobile ;
15706: LD_ADDR_EXP 46
15710: PUSH
15711: LD_EXP 46
15715: PUSH
15716: LD_EXP 46
15720: DIFF
15721: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15722: LD_VAR 0 1
15726: PPUSH
15727: CALL_OW 247
15731: PUSH
15732: LD_INT 1
15734: EQUAL
15735: PUSH
15736: LD_VAR 0 1
15740: PPUSH
15741: CALL_OW 255
15745: PUSH
15746: LD_INT 1
15748: EQUAL
15749: AND
15750: IFFALSE 15766
// lostCounter = lostCounter + 1 ;
15752: LD_ADDR_EXP 38
15756: PUSH
15757: LD_EXP 38
15761: PUSH
15762: LD_INT 1
15764: PLUS
15765: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15766: LD_EXP 43
15770: PUSH
15771: LD_INT 24
15773: PPUSH
15774: CALL_OW 313
15778: PUSH
15779: LD_INT 6
15781: LESS
15782: AND
15783: PUSH
15784: LD_VAR 0 1
15788: PPUSH
15789: CALL_OW 257
15793: PUSH
15794: LD_INT 3
15796: EQUAL
15797: AND
15798: PUSH
15799: LD_VAR 0 1
15803: PPUSH
15804: CALL_OW 255
15808: PUSH
15809: LD_INT 3
15811: EQUAL
15812: AND
15813: PUSH
15814: LD_INT 24
15816: PPUSH
15817: CALL_OW 302
15821: AND
15822: PUSH
15823: LD_INT 24
15825: PPUSH
15826: CALL_OW 255
15830: PUSH
15831: LD_INT 3
15833: EQUAL
15834: AND
15835: IFFALSE 15964
// begin ruMech := ruMech - 1 ;
15837: LD_ADDR_EXP 43
15841: PUSH
15842: LD_EXP 43
15846: PUSH
15847: LD_INT 1
15849: MINUS
15850: ST_TO_ADDR
// if ruMech = 0 then
15851: LD_EXP 43
15855: PUSH
15856: LD_INT 0
15858: EQUAL
15859: IFFALSE 15863
// exit ;
15861: GO 15964
// wait ( 0 0$40 ) ;
15863: LD_INT 1400
15865: PPUSH
15866: CALL_OW 67
// uc_side = 3 ;
15870: LD_ADDR_OWVAR 20
15874: PUSH
15875: LD_INT 3
15877: ST_TO_ADDR
// uc_nation = 3 ;
15878: LD_ADDR_OWVAR 21
15882: PUSH
15883: LD_INT 3
15885: ST_TO_ADDR
// hc_gallery :=  ;
15886: LD_ADDR_OWVAR 33
15890: PUSH
15891: LD_STRING 
15893: ST_TO_ADDR
// hc_name :=  ;
15894: LD_ADDR_OWVAR 26
15898: PUSH
15899: LD_STRING 
15901: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15902: LD_INT 0
15904: PPUSH
15905: LD_EXP 16
15909: PPUSH
15910: LD_EXP 17
15914: PPUSH
15915: CALL_OW 12
15919: PPUSH
15920: CALL_OW 383
// mech := CreateHuman ;
15924: LD_ADDR_VAR 0 2
15928: PUSH
15929: CALL_OW 44
15933: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15934: LD_VAR 0 2
15938: PPUSH
15939: LD_INT 124
15941: PPUSH
15942: LD_INT 97
15944: PPUSH
15945: LD_INT 0
15947: PPUSH
15948: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
15952: LD_VAR 0 2
15956: PPUSH
15957: LD_INT 24
15959: PPUSH
15960: CALL_OW 120
// end ; end ;
15964: PPOPN 2
15966: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15967: LD_INT 0
15969: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15970: LD_VAR 0 1
15974: PPUSH
15975: LD_VAR 0 2
15979: PPUSH
15980: CALL 35627 0 2
// if GetSide ( vehicle ) = 1 then
15984: LD_VAR 0 1
15988: PPUSH
15989: CALL_OW 255
15993: PUSH
15994: LD_INT 1
15996: EQUAL
15997: IFFALSE 16013
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
15999: LD_ADDR_EXP 42
16003: PUSH
16004: LD_EXP 42
16008: PUSH
16009: LD_INT 1
16011: PLUS
16012: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16013: LD_VAR 0 1
16017: PPUSH
16018: CALL_OW 255
16022: PUSH
16023: LD_INT 3
16025: EQUAL
16026: PUSH
16027: LD_VAR 0 1
16031: PPUSH
16032: CALL_OW 264
16036: PUSH
16037: LD_INT 42
16039: PUSH
16040: LD_INT 43
16042: PUSH
16043: LD_INT 44
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: IN
16051: AND
16052: IFFALSE 16070
// ruMobile := ruMobile union vehicle ;
16054: LD_ADDR_EXP 46
16058: PUSH
16059: LD_EXP 46
16063: PUSH
16064: LD_VAR 0 1
16068: UNION
16069: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16070: LD_VAR 0 1
16074: PPUSH
16075: CALL_OW 264
16079: PUSH
16080: LD_INT 53
16082: EQUAL
16083: IFFALSE 16219
// begin uc_side = 3 ;
16085: LD_ADDR_OWVAR 20
16089: PUSH
16090: LD_INT 3
16092: ST_TO_ADDR
// uc_nation = 3 ;
16093: LD_ADDR_OWVAR 21
16097: PUSH
16098: LD_INT 3
16100: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16101: LD_INT 0
16103: PPUSH
16104: LD_EXP 17
16108: PPUSH
16109: CALL_OW 383
// driver := CreateHuman ;
16113: LD_ADDR_VAR 0 3
16117: PUSH
16118: CALL_OW 44
16122: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16123: LD_VAR 0 3
16127: PPUSH
16128: LD_VAR 0 2
16132: PPUSH
16133: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16137: LD_VAR 0 1
16141: PPUSH
16142: LD_INT 21
16144: PPUSH
16145: CALL 5219 0 2
// repeat wait ( 0 0$1 ) ;
16149: LD_INT 35
16151: PPUSH
16152: CALL_OW 67
// until not HasTask ( vehicle ) ;
16156: LD_VAR 0 1
16160: PPUSH
16161: CALL_OW 314
16165: NOT
16166: IFFALSE 16149
// driver := IsDrivenBy ( vehicle ) ;
16168: LD_ADDR_VAR 0 3
16172: PUSH
16173: LD_VAR 0 1
16177: PPUSH
16178: CALL_OW 311
16182: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16183: LD_VAR 0 3
16187: PPUSH
16188: LD_INT 104
16190: PPUSH
16191: LD_INT 73
16193: PPUSH
16194: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16198: LD_VAR 0 3
16202: PPUSH
16203: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16207: LD_VAR 0 3
16211: PPUSH
16212: LD_INT 24
16214: PPUSH
16215: CALL_OW 180
// end ; end ;
16219: PPOPN 3
16221: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16222: LD_VAR 0 1
16226: PPUSH
16227: CALL_OW 255
16231: PUSH
16232: LD_INT 3
16234: EQUAL
16235: PUSH
16236: LD_VAR 0 1
16240: PPUSH
16241: CALL_OW 247
16245: PUSH
16246: LD_INT 2
16248: EQUAL
16249: AND
16250: PUSH
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 264
16260: PUSH
16261: LD_INT 42
16263: PUSH
16264: LD_INT 43
16266: PUSH
16267: LD_INT 44
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: LIST
16274: IN
16275: AND
16276: IFFALSE 16325
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16278: LD_INT 24
16280: PPUSH
16281: LD_VAR 0 1
16285: PPUSH
16286: CALL_OW 265
16290: PPUSH
16291: LD_VAR 0 1
16295: PPUSH
16296: CALL_OW 262
16300: PPUSH
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 263
16310: PPUSH
16311: LD_VAR 0 1
16315: PPUSH
16316: CALL_OW 264
16320: PPUSH
16321: CALL_OW 185
// end ;
16325: PPOPN 1
16327: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16328: LD_VAR 0 1
16332: PPUSH
16333: CALL_OW 255
16337: PUSH
16338: LD_INT 3
16340: EQUAL
16341: PUSH
16342: LD_VAR 0 2
16346: PPUSH
16347: CALL_OW 255
16351: PUSH
16352: LD_INT 3
16354: EQUAL
16355: AND
16356: PUSH
16357: LD_INT 24
16359: PPUSH
16360: CALL_OW 302
16364: AND
16365: PUSH
16366: LD_VAR 0 1
16370: PPUSH
16371: CALL_OW 302
16375: NOT
16376: AND
16377: IFFALSE 16391
// ComEnterUnit ( human , rubfact0 ) ;
16379: LD_VAR 0 2
16383: PPUSH
16384: LD_INT 24
16386: PPUSH
16387: CALL_OW 120
// end ;
16391: PPOPN 2
16393: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16394: LD_VAR 0 1
16398: PUSH
16399: LD_INT 24
16401: EQUAL
16402: PUSH
16403: LD_VAR 0 2
16407: PPUSH
16408: CALL_OW 256
16412: PUSH
16413: LD_INT 1000
16415: LESS
16416: AND
16417: IFFALSE 16431
// SetLives ( un , 1000 ) ;
16419: LD_VAR 0 2
16423: PPUSH
16424: LD_INT 1000
16426: PPUSH
16427: CALL_OW 234
// end ;
16431: PPOPN 2
16433: END
// on Command ( comandid ) do var i , j , tmp ;
16434: LD_INT 0
16436: PPUSH
16437: PPUSH
16438: PPUSH
// begin SOS_Command ( comandid ) ;
16439: LD_VAR 0 1
16443: PPUSH
16444: CALL 35611 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16448: LD_INT 22
16450: PUSH
16451: LD_INT 4
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PPUSH
16458: CALL_OW 69
16462: NOT
16463: IFFALSE 16467
// exit ;
16465: GO 16632
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16467: LD_ADDR_VAR 0 2
16471: PUSH
16472: LD_INT 22
16474: PUSH
16475: LD_INT 1
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 2
16484: PUSH
16485: LD_INT 21
16487: PUSH
16488: LD_INT 1
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 21
16497: PUSH
16498: LD_INT 2
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: LIST
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PPUSH
16514: CALL_OW 69
16518: PUSH
16519: FOR_IN
16520: IFFALSE 16630
// begin if GetTaskList ( i ) > 0 then
16522: LD_VAR 0 2
16526: PPUSH
16527: CALL_OW 437
16531: PUSH
16532: LD_INT 0
16534: GREATER
16535: IFFALSE 16628
// begin for j = 1 to GetTaskList ( i ) do
16537: LD_ADDR_VAR 0 3
16541: PUSH
16542: DOUBLE
16543: LD_INT 1
16545: DEC
16546: ST_TO_ADDR
16547: LD_VAR 0 2
16551: PPUSH
16552: CALL_OW 437
16556: PUSH
16557: FOR_TO
16558: IFFALSE 16626
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16560: LD_ADDR_VAR 0 4
16564: PUSH
16565: LD_VAR 0 2
16569: PPUSH
16570: CALL_OW 437
16574: PUSH
16575: LD_VAR 0 3
16579: ARRAY
16580: PUSH
16581: LD_INT 4
16583: ARRAY
16584: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16585: LD_VAR 0 4
16589: PPUSH
16590: CALL_OW 255
16594: PUSH
16595: LD_INT 4
16597: EQUAL
16598: PUSH
16599: LD_VAR 0 4
16603: PPUSH
16604: CALL_OW 255
16608: PUSH
16609: LD_INT 0
16611: EQUAL
16612: OR
16613: IFFALSE 16624
// ComStop ( i ) ;
16615: LD_VAR 0 2
16619: PPUSH
16620: CALL_OW 141
// end ;
16624: GO 16557
16626: POP
16627: POP
// end ; end ;
16628: GO 16519
16630: POP
16631: POP
// end ; end_of_file
16632: PPOPN 4
16634: END
// every 10 10$0 do
16635: GO 16637
16637: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16638: LD_INT 5
16640: PPUSH
16641: LD_INT 3
16643: PPUSH
16644: LD_INT 2
16646: PUSH
16647: LD_INT 2
16649: PUSH
16650: LD_INT 3
16652: PUSH
16653: LD_INT 4
16655: PUSH
16656: LD_INT 4
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: PUSH
16665: LD_OWVAR 67
16669: ARRAY
16670: PLUS
16671: PPUSH
16672: LD_INT 0
16674: PPUSH
16675: LD_EXP 16
16679: PPUSH
16680: LD_EXP 17
16684: PPUSH
16685: CALL_OW 12
16689: PPUSH
16690: LD_INT 4
16692: PPUSH
16693: LD_INT 14
16695: PPUSH
16696: LD_INT 1
16698: PPUSH
16699: LD_INT 2
16701: PPUSH
16702: CALL 6960 0 9
16706: END
// every 20 20$0 do
16707: GO 16709
16709: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16710: LD_INT 5
16712: PPUSH
16713: LD_INT 3
16715: PPUSH
16716: LD_INT 4
16718: PUSH
16719: LD_INT 2
16721: PUSH
16722: LD_INT 3
16724: PUSH
16725: LD_INT 4
16727: PUSH
16728: LD_INT 5
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: PUSH
16737: LD_OWVAR 67
16741: ARRAY
16742: PLUS
16743: PPUSH
16744: LD_INT 2
16746: PPUSH
16747: LD_EXP 16
16751: PPUSH
16752: LD_EXP 17
16756: PPUSH
16757: CALL_OW 12
16761: PPUSH
16762: LD_INT 4
16764: PPUSH
16765: LD_INT 14
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: LD_INT 1
16773: PPUSH
16774: CALL 6960 0 9
16778: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16779: GO 16781
16781: DISABLE
16782: LD_INT 0
16784: PPUSH
16785: PPUSH
16786: PPUSH
16787: PPUSH
16788: PPUSH
// begin hex := [ 123 , 95 ] ;
16789: LD_ADDR_VAR 0 4
16793: PUSH
16794: LD_INT 123
16796: PUSH
16797: LD_INT 95
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: ST_TO_ADDR
// tmp := [ ] ;
16804: LD_ADDR_VAR 0 5
16808: PUSH
16809: EMPTY
16810: ST_TO_ADDR
// if Difficulty > 1 then
16811: LD_OWVAR 67
16815: PUSH
16816: LD_INT 1
16818: GREATER
16819: IFFALSE 16829
// specAttack := true ;
16821: LD_ADDR_EXP 47
16825: PUSH
16826: LD_INT 1
16828: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16829: LD_ADDR_VAR 0 1
16833: PUSH
16834: DOUBLE
16835: LD_INT 1
16837: DEC
16838: ST_TO_ADDR
16839: LD_INT 4
16841: PUSH
16842: LD_INT 5
16844: PUSH
16845: LD_INT 6
16847: PUSH
16848: LD_INT 7
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: PUSH
16857: LD_OWVAR 67
16861: ARRAY
16862: PUSH
16863: FOR_TO
16864: IFFALSE 17166
// begin uc_side := 5 ;
16866: LD_ADDR_OWVAR 20
16870: PUSH
16871: LD_INT 5
16873: ST_TO_ADDR
// uc_nation := 3 ;
16874: LD_ADDR_OWVAR 21
16878: PUSH
16879: LD_INT 3
16881: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16882: LD_ADDR_OWVAR 37
16886: PUSH
16887: LD_INT 21
16889: PUSH
16890: LD_INT 22
16892: PUSH
16893: LD_INT 23
16895: PUSH
16896: LD_INT 24
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: PUSH
16905: LD_VAR 0 1
16909: PUSH
16910: LD_OWVAR 67
16914: MOD
16915: PUSH
16916: LD_INT 1
16918: PLUS
16919: ARRAY
16920: ST_TO_ADDR
// vc_engine := engine_combustion ;
16921: LD_ADDR_OWVAR 39
16925: PUSH
16926: LD_INT 1
16928: ST_TO_ADDR
// vc_control := control_manual ;
16929: LD_ADDR_OWVAR 38
16933: PUSH
16934: LD_INT 1
16936: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16937: LD_ADDR_OWVAR 40
16941: PUSH
16942: LD_INT 42
16944: PUSH
16945: LD_INT 43
16947: PUSH
16948: LD_INT 44
16950: PUSH
16951: LD_INT 44
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: PUSH
16960: LD_VAR 0 1
16964: PUSH
16965: LD_OWVAR 67
16969: MOD
16970: PUSH
16971: LD_INT 1
16973: PLUS
16974: ARRAY
16975: ST_TO_ADDR
// veh := CreateVehicle ;
16976: LD_ADDR_VAR 0 3
16980: PUSH
16981: CALL_OW 45
16985: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
16986: LD_VAR 0 3
16990: PPUSH
16991: LD_INT 5
16993: PPUSH
16994: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
16998: LD_INT 35
17000: PPUSH
17001: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17005: LD_VAR 0 4
17009: PUSH
17010: LD_INT 1
17012: ARRAY
17013: PPUSH
17014: LD_VAR 0 4
17018: PUSH
17019: LD_INT 2
17021: ARRAY
17022: PPUSH
17023: CALL_OW 428
17027: PUSH
17028: LD_INT 0
17030: EQUAL
17031: IFFALSE 16998
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17033: LD_VAR 0 3
17037: PPUSH
17038: LD_VAR 0 4
17042: PUSH
17043: LD_INT 1
17045: ARRAY
17046: PPUSH
17047: LD_VAR 0 4
17051: PUSH
17052: LD_INT 2
17054: ARRAY
17055: PPUSH
17056: LD_INT 0
17058: PPUSH
17059: CALL_OW 48
// uc_side := 5 ;
17063: LD_ADDR_OWVAR 20
17067: PUSH
17068: LD_INT 5
17070: ST_TO_ADDR
// uc_nation := 3 ;
17071: LD_ADDR_OWVAR 21
17075: PUSH
17076: LD_INT 3
17078: ST_TO_ADDR
// InitHC_All ( ) ;
17079: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
17083: LD_INT 0
17085: PPUSH
17086: LD_INT 2
17088: PUSH
17089: LD_OWVAR 67
17093: PLUS
17094: PPUSH
17095: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17099: CALL_OW 44
17103: PPUSH
17104: LD_VAR 0 3
17108: PPUSH
17109: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17113: LD_VAR 0 3
17117: PPUSH
17118: LD_INT 101
17120: PPUSH
17121: LD_INT 77
17123: PPUSH
17124: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17128: LD_ADDR_VAR 0 5
17132: PUSH
17133: LD_VAR 0 5
17137: PPUSH
17138: LD_VAR 0 5
17142: PUSH
17143: LD_INT 1
17145: PLUS
17146: PPUSH
17147: LD_VAR 0 3
17151: PPUSH
17152: CALL_OW 1
17156: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17157: LD_INT 105
17159: PPUSH
17160: CALL_OW 67
// end ;
17164: GO 16863
17166: POP
17167: POP
// repeat wait ( 0 0$1 ) ;
17168: LD_INT 35
17170: PPUSH
17171: CALL_OW 67
// for i in tmp do
17175: LD_ADDR_VAR 0 1
17179: PUSH
17180: LD_VAR 0 5
17184: PUSH
17185: FOR_IN
17186: IFFALSE 17254
// if not IsOk ( i ) then
17188: LD_VAR 0 1
17192: PPUSH
17193: CALL_OW 302
17197: NOT
17198: IFFALSE 17218
// tmp := tmp diff i else
17200: LD_ADDR_VAR 0 5
17204: PUSH
17205: LD_VAR 0 5
17209: PUSH
17210: LD_VAR 0 1
17214: DIFF
17215: ST_TO_ADDR
17216: GO 17252
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17218: LD_VAR 0 1
17222: PPUSH
17223: LD_INT 22
17225: PUSH
17226: LD_INT 1
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: PPUSH
17238: LD_VAR 0 1
17242: PPUSH
17243: CALL_OW 74
17247: PPUSH
17248: CALL_OW 115
17252: GO 17185
17254: POP
17255: POP
// until not tmp ;
17256: LD_VAR 0 5
17260: NOT
17261: IFFALSE 17168
// end ;
17263: PPOPN 5
17265: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17266: LD_EXP 47
17270: IFFALSE 17648
17272: GO 17274
17274: DISABLE
17275: LD_INT 0
17277: PPUSH
17278: PPUSH
17279: PPUSH
17280: PPUSH
// begin wait ( 0 0$20 ) ;
17281: LD_INT 700
17283: PPUSH
17284: CALL_OW 67
// uc_side := 5 ;
17288: LD_ADDR_OWVAR 20
17292: PUSH
17293: LD_INT 5
17295: ST_TO_ADDR
// uc_nation := 3 ;
17296: LD_ADDR_OWVAR 21
17300: PUSH
17301: LD_INT 3
17303: ST_TO_ADDR
// InitHc ;
17304: CALL_OW 19
// hc_importance := 0 ;
17308: LD_ADDR_OWVAR 32
17312: PUSH
17313: LD_INT 0
17315: ST_TO_ADDR
// tmp := [ ] ;
17316: LD_ADDR_VAR 0 2
17320: PUSH
17321: EMPTY
17322: ST_TO_ADDR
// InitHC_All ( ) ;
17323: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17327: LD_INT 0
17329: PPUSH
17330: LD_INT 2
17332: PPUSH
17333: LD_INT 6
17335: PPUSH
17336: CALL_OW 380
// eng := CreateHuman ;
17340: LD_ADDR_VAR 0 4
17344: PUSH
17345: CALL_OW 44
17349: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17350: LD_VAR 0 4
17354: PPUSH
17355: LD_INT 78
17357: PPUSH
17358: LD_INT 2
17360: PPUSH
17361: LD_INT 4
17363: PPUSH
17364: LD_INT 0
17366: PPUSH
17367: CALL_OW 50
// for i = 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
17371: LD_ADDR_VAR 0 3
17375: PUSH
17376: DOUBLE
17377: LD_INT 1
17379: DEC
17380: ST_TO_ADDR
17381: LD_INT 3
17383: PUSH
17384: LD_INT 3
17386: PUSH
17387: LD_INT 4
17389: PUSH
17390: LD_INT 5
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: PUSH
17399: LD_OWVAR 67
17403: ARRAY
17404: PUSH
17405: FOR_TO
17406: IFFALSE 17495
// begin InitHC_All ( ) ;
17408: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17412: LD_INT 0
17414: PPUSH
17415: LD_INT 1
17417: PPUSH
17418: LD_INT 4
17420: PUSH
17421: LD_INT 5
17423: PUSH
17424: LD_INT 6
17426: PUSH
17427: LD_INT 6
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: PUSH
17436: LD_OWVAR 67
17440: ARRAY
17441: PPUSH
17442: CALL_OW 380
// un := CreateHuman ;
17446: LD_ADDR_VAR 0 1
17450: PUSH
17451: CALL_OW 44
17455: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17456: LD_VAR 0 1
17460: PPUSH
17461: LD_INT 78
17463: PPUSH
17464: LD_INT 2
17466: PPUSH
17467: LD_INT 4
17469: PPUSH
17470: LD_INT 0
17472: PPUSH
17473: CALL_OW 50
// tmp := tmp ^ un ;
17477: LD_ADDR_VAR 0 2
17481: PUSH
17482: LD_VAR 0 2
17486: PUSH
17487: LD_VAR 0 1
17491: ADD
17492: ST_TO_ADDR
// end ;
17493: GO 17405
17495: POP
17496: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17497: LD_VAR 0 2
17501: PPUSH
17502: LD_INT 49
17504: PPUSH
17505: LD_INT 3
17507: PPUSH
17508: CALL_OW 111
// wait ( 0 0$2 ) ;
17512: LD_INT 70
17514: PPUSH
17515: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17519: LD_VAR 0 4
17523: PPUSH
17524: LD_INT 49
17526: PPUSH
17527: LD_INT 3
17529: PPUSH
17530: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17534: LD_VAR 0 4
17538: PPUSH
17539: LD_INT 4
17541: PPUSH
17542: CALL_OW 227
// wait ( 0 0$10 ) ;
17546: LD_INT 350
17548: PPUSH
17549: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17553: LD_INT 35
17555: PPUSH
17556: CALL_OW 67
// for i in tmp do
17560: LD_ADDR_VAR 0 3
17564: PUSH
17565: LD_VAR 0 2
17569: PUSH
17570: FOR_IN
17571: IFFALSE 17639
// if not IsOk ( i ) then
17573: LD_VAR 0 3
17577: PPUSH
17578: CALL_OW 302
17582: NOT
17583: IFFALSE 17603
// tmp := tmp diff i else
17585: LD_ADDR_VAR 0 2
17589: PUSH
17590: LD_VAR 0 2
17594: PUSH
17595: LD_VAR 0 3
17599: DIFF
17600: ST_TO_ADDR
17601: GO 17637
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17603: LD_VAR 0 3
17607: PPUSH
17608: LD_INT 22
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PPUSH
17618: CALL_OW 69
17622: PPUSH
17623: LD_VAR 0 3
17627: PPUSH
17628: CALL_OW 74
17632: PPUSH
17633: CALL_OW 115
17637: GO 17570
17639: POP
17640: POP
// until not tmp ;
17641: LD_VAR 0 2
17645: NOT
17646: IFFALSE 17553
// end ; end_of_file
17648: PPOPN 4
17650: END
// every 0 0$1 trigger startTimer = 1 do
17651: LD_EXP 30
17655: PUSH
17656: LD_INT 1
17658: EQUAL
17659: IFFALSE 17789
17661: GO 17663
17663: DISABLE
// begin enable ;
17664: ENABLE
// if timerStatus = 1 then
17665: LD_EXP 29
17669: PUSH
17670: LD_INT 1
17672: EQUAL
17673: IFFALSE 17706
// begin timeToSupport = timeToSupport - 0 0$01 ;
17675: LD_ADDR_EXP 28
17679: PUSH
17680: LD_EXP 28
17684: PUSH
17685: LD_INT 35
17687: MINUS
17688: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17689: LD_ADDR_OWVAR 47
17693: PUSH
17694: LD_STRING #Am04-1
17696: PUSH
17697: LD_EXP 28
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: ST_TO_ADDR
// end ; if timerStatus = 2 then
17706: LD_EXP 29
17710: PUSH
17711: LD_INT 2
17713: EQUAL
17714: IFFALSE 17747
// begin timeToSupport = timeToSupport - 0 0$01 ;
17716: LD_ADDR_EXP 28
17720: PUSH
17721: LD_EXP 28
17725: PUSH
17726: LD_INT 35
17728: MINUS
17729: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17730: LD_ADDR_OWVAR 47
17734: PUSH
17735: LD_STRING #Am04-2
17737: PUSH
17738: LD_EXP 28
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: ST_TO_ADDR
// end ; if timerStatus = 3 then
17747: LD_EXP 29
17751: PUSH
17752: LD_INT 3
17754: EQUAL
17755: IFFALSE 17771
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17757: LD_ADDR_EXP 27
17761: PUSH
17762: LD_EXP 27
17766: PUSH
17767: LD_INT 35
17769: MINUS
17770: ST_TO_ADDR
// if timerStatus = 4 then
17771: LD_EXP 29
17775: PUSH
17776: LD_INT 4
17778: EQUAL
17779: IFFALSE 17789
// display_strings =  ;
17781: LD_ADDR_OWVAR 47
17785: PUSH
17786: LD_STRING 
17788: ST_TO_ADDR
// end ; end_of_file
17789: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17790: LD_EXP 15
17794: PPUSH
17795: CALL_OW 301
17799: PUSH
17800: LD_INT 22
17802: PUSH
17803: LD_INT 3
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 21
17812: PUSH
17813: LD_INT 1
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PPUSH
17824: CALL_OW 69
17828: PUSH
17829: LD_INT 14
17831: PUSH
17832: LD_INT 13
17834: PUSH
17835: LD_INT 12
17837: PUSH
17838: LD_INT 11
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: PUSH
17847: LD_OWVAR 67
17851: ARRAY
17852: LESS
17853: AND
17854: IFFALSE 18440
17856: GO 17858
17858: DISABLE
17859: LD_INT 0
17861: PPUSH
17862: PPUSH
17863: PPUSH
// begin AIEnable = 0 ;
17864: LD_ADDR_EXP 37
17868: PUSH
17869: LD_INT 0
17871: ST_TO_ADDR
// escapeAvalaible = 1 ;
17872: LD_ADDR_EXP 40
17876: PUSH
17877: LD_INT 1
17879: ST_TO_ADDR
// Video ( true ) ;
17880: LD_INT 1
17882: PPUSH
17883: CALL 77060 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17887: LD_INT 3
17889: PPUSH
17890: LD_INT 1
17892: PPUSH
17893: LD_INT 1
17895: PPUSH
17896: LD_INT 0
17898: PPUSH
17899: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17903: LD_INT 6
17905: PPUSH
17906: LD_INT 1
17908: PPUSH
17909: LD_INT 1
17911: PPUSH
17912: LD_INT 0
17914: PPUSH
17915: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17919: LD_INT 5
17921: PPUSH
17922: LD_INT 1
17924: PPUSH
17925: LD_INT 1
17927: PPUSH
17928: LD_INT 0
17930: PPUSH
17931: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17935: LD_INT 3
17937: PPUSH
17938: LD_INT 1
17940: PPUSH
17941: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17945: LD_INT 97
17947: PPUSH
17948: LD_INT 91
17950: PPUSH
17951: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17955: LD_INT 22
17957: PUSH
17958: LD_INT 3
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 21
17967: PUSH
17968: LD_INT 1
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PPUSH
17979: CALL_OW 69
17983: PPUSH
17984: CALL_OW 121
// wait ( 0 0$01 ) ;
17988: LD_INT 35
17990: PPUSH
17991: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17995: LD_INT 22
17997: PUSH
17998: LD_INT 3
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 21
18007: PUSH
18008: LD_INT 1
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PPUSH
18019: CALL_OW 69
18023: PPUSH
18024: LD_INT 124
18026: PPUSH
18027: LD_INT 98
18029: PPUSH
18030: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18034: LD_INT 22
18036: PUSH
18037: LD_INT 5
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 21
18046: PUSH
18047: LD_INT 1
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PPUSH
18058: CALL_OW 69
18062: PPUSH
18063: CALL_OW 121
// wait ( 0 0$01 ) ;
18067: LD_INT 35
18069: PPUSH
18070: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18074: LD_INT 22
18076: PUSH
18077: LD_INT 5
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 21
18086: PUSH
18087: LD_INT 1
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PPUSH
18098: CALL_OW 69
18102: PPUSH
18103: LD_INT 124
18105: PPUSH
18106: LD_INT 98
18108: PPUSH
18109: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18113: LD_INT 22
18115: PUSH
18116: LD_INT 6
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 21
18125: PUSH
18126: LD_INT 1
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 69
18141: PPUSH
18142: CALL_OW 121
// wait ( 0 0$01 ) ;
18146: LD_INT 35
18148: PPUSH
18149: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18153: LD_INT 22
18155: PUSH
18156: LD_INT 6
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 21
18165: PUSH
18166: LD_INT 1
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PPUSH
18177: CALL_OW 69
18181: PPUSH
18182: LD_INT 124
18184: PPUSH
18185: LD_INT 98
18187: PPUSH
18188: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18192: LD_INT 22
18194: PUSH
18195: LD_INT 1
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 21
18204: PUSH
18205: LD_INT 1
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: PPUSH
18221: LD_INT 124
18223: PPUSH
18224: LD_INT 96
18226: PPUSH
18227: CALL_OW 114
// wait ( 0 0$1 ) ;
18231: LD_INT 35
18233: PPUSH
18234: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18238: LD_INT 124
18240: PPUSH
18241: LD_INT 96
18243: PPUSH
18244: CALL_OW 84
// p := 0 0$0 ;
18248: LD_ADDR_VAR 0 3
18252: PUSH
18253: LD_INT 0
18255: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18256: LD_ADDR_VAR 0 2
18260: PUSH
18261: LD_INT 2
18263: PUSH
18264: LD_INT 22
18266: PUSH
18267: LD_INT 3
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 22
18276: PUSH
18277: LD_INT 6
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 21
18291: PUSH
18292: LD_INT 1
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PPUSH
18303: CALL_OW 69
18307: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18308: LD_INT 35
18310: PPUSH
18311: CALL_OW 67
// p := p + 0 0$1 ;
18315: LD_ADDR_VAR 0 3
18319: PUSH
18320: LD_VAR 0 3
18324: PUSH
18325: LD_INT 35
18327: PLUS
18328: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18329: LD_VAR 0 2
18333: PPUSH
18334: LD_INT 5
18336: PPUSH
18337: CALL_OW 113
// for i in tmp do
18341: LD_ADDR_VAR 0 1
18345: PUSH
18346: LD_VAR 0 2
18350: PUSH
18351: FOR_IN
18352: IFFALSE 18379
// if IsInArea ( tmp , RussianEscape ) then
18354: LD_VAR 0 2
18358: PPUSH
18359: LD_INT 5
18361: PPUSH
18362: CALL_OW 308
18366: IFFALSE 18377
// RemoveUnit ( i ) ;
18368: LD_VAR 0 1
18372: PPUSH
18373: CALL_OW 64
18377: GO 18351
18379: POP
18380: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18381: LD_INT 23
18383: PUSH
18384: LD_INT 3
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 21
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 24
18403: PUSH
18404: LD_INT 250
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: LIST
18415: PPUSH
18416: CALL_OW 69
18420: PUSH
18421: LD_INT 0
18423: EQUAL
18424: PUSH
18425: LD_VAR 0 3
18429: PUSH
18430: LD_INT 245
18432: GREATEREQUAL
18433: OR
18434: IFFALSE 18308
// FinishMission ;
18436: CALL 18443 0 0
// end ;
18440: PPOPN 3
18442: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18443: LD_INT 0
18445: PPUSH
18446: PPUSH
18447: PPUSH
18448: PPUSH
18449: PPUSH
// if not vehicleProduceCounter then
18450: LD_EXP 42
18454: NOT
18455: IFFALSE 18464
// SetAchievement ( ACH_INFANTRY ) ;
18457: LD_STRING ACH_INFANTRY
18459: PPUSH
18460: CALL_OW 543
// if tick <= 20 20$00 then
18464: LD_OWVAR 1
18468: PUSH
18469: LD_INT 42000
18471: LESSEQUAL
18472: IFFALSE 18488
// begin wait ( 3 ) ;
18474: LD_INT 3
18476: PPUSH
18477: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18481: LD_STRING ACH_ASPEED_4
18483: PPUSH
18484: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18488: LD_INT 22
18490: PPUSH
18491: CALL 19146 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18495: LD_INT 69
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: CALL_OW 321
18505: PPUSH
18506: LD_STRING GatlingInGamma
18508: PPUSH
18509: CALL_OW 39
// m1 := false ;
18513: LD_ADDR_VAR 0 3
18517: PUSH
18518: LD_INT 0
18520: ST_TO_ADDR
// m2 := false ;
18521: LD_ADDR_VAR 0 4
18525: PUSH
18526: LD_INT 0
18528: ST_TO_ADDR
// m3 := false ;
18529: LD_ADDR_VAR 0 5
18533: PUSH
18534: LD_INT 0
18536: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18537: LD_EXP 34
18541: PUSH
18542: LD_INT 1
18544: EQUAL
18545: PUSH
18546: LD_EXP 35
18550: PUSH
18551: LD_INT 1
18553: EQUAL
18554: AND
18555: IFFALSE 18577
// begin AddMedal ( oil , 1 ) ;
18557: LD_STRING oil
18559: PPUSH
18560: LD_INT 1
18562: PPUSH
18563: CALL_OW 101
// m1 := true ;
18567: LD_ADDR_VAR 0 3
18571: PUSH
18572: LD_INT 1
18574: ST_TO_ADDR
// end else
18575: GO 18670
// begin if buildOil = 1 and buildPower = 0 then
18577: LD_EXP 34
18581: PUSH
18582: LD_INT 1
18584: EQUAL
18585: PUSH
18586: LD_EXP 35
18590: PUSH
18591: LD_INT 0
18593: EQUAL
18594: AND
18595: IFFALSE 18608
// AddMedal ( oil , - 1 ) ;
18597: LD_STRING oil
18599: PPUSH
18600: LD_INT 1
18602: NEG
18603: PPUSH
18604: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18608: LD_EXP 34
18612: PUSH
18613: LD_INT 0
18615: EQUAL
18616: PUSH
18617: LD_EXP 35
18621: PUSH
18622: LD_INT 1
18624: EQUAL
18625: AND
18626: IFFALSE 18639
// AddMedal ( oil , - 2 ) ;
18628: LD_STRING oil
18630: PPUSH
18631: LD_INT 2
18633: NEG
18634: PPUSH
18635: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18639: LD_EXP 34
18643: PUSH
18644: LD_INT 0
18646: EQUAL
18647: PUSH
18648: LD_EXP 35
18652: PUSH
18653: LD_INT 0
18655: EQUAL
18656: AND
18657: IFFALSE 18670
// AddMedal ( oil , - 3 ) ;
18659: LD_STRING oil
18661: PPUSH
18662: LD_INT 3
18664: NEG
18665: PPUSH
18666: CALL_OW 101
// end ; if lostCounter > 3 then
18670: LD_EXP 38
18674: PUSH
18675: LD_INT 3
18677: GREATER
18678: IFFALSE 18693
// AddMedal ( deaths , - 1 ) else
18680: LD_STRING deaths
18682: PPUSH
18683: LD_INT 1
18685: NEG
18686: PPUSH
18687: CALL_OW 101
18691: GO 18711
// begin AddMedal ( deaths , 1 ) ;
18693: LD_STRING deaths
18695: PPUSH
18696: LD_INT 1
18698: PPUSH
18699: CALL_OW 101
// m2 := true ;
18703: LD_ADDR_VAR 0 4
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// end ; if honor = 1 then
18711: LD_EXP 39
18715: PUSH
18716: LD_INT 1
18718: EQUAL
18719: IFFALSE 18741
// begin AddMedal ( honour , 1 ) ;
18721: LD_STRING honour
18723: PPUSH
18724: LD_INT 1
18726: PPUSH
18727: CALL_OW 101
// m3 := true ;
18731: LD_ADDR_VAR 0 5
18735: PUSH
18736: LD_INT 1
18738: ST_TO_ADDR
// end else
18739: GO 18752
// AddMedal ( honour , - 1 ) ;
18741: LD_STRING honour
18743: PPUSH
18744: LD_INT 1
18746: NEG
18747: PPUSH
18748: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18752: LD_VAR 0 3
18756: PUSH
18757: LD_VAR 0 4
18761: AND
18762: PUSH
18763: LD_VAR 0 5
18767: AND
18768: PUSH
18769: LD_OWVAR 67
18773: PUSH
18774: LD_INT 3
18776: GREATEREQUAL
18777: AND
18778: IFFALSE 18790
// SetAchievementEX ( ACH_AMER , 4 ) ;
18780: LD_STRING ACH_AMER
18782: PPUSH
18783: LD_INT 4
18785: PPUSH
18786: CALL_OW 564
// GiveMedals ( Main ) ;
18790: LD_STRING Main
18792: PPUSH
18793: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18797: LD_INT 22
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 23
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 21
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: LIST
18831: PPUSH
18832: CALL_OW 69
18836: PPUSH
18837: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18841: LD_EXP 1
18845: PPUSH
18846: LD_EXP 48
18850: PUSH
18851: LD_STRING JMM
18853: STR
18854: PPUSH
18855: CALL_OW 38
// if IsOK ( Bobby ) then
18859: LD_EXP 2
18863: PPUSH
18864: CALL_OW 302
18868: IFFALSE 18888
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18870: LD_EXP 2
18874: PPUSH
18875: LD_EXP 48
18879: PUSH
18880: LD_STRING Bobby
18882: STR
18883: PPUSH
18884: CALL_OW 38
// if IsOK ( Cyrus ) then
18888: LD_EXP 3
18892: PPUSH
18893: CALL_OW 302
18897: IFFALSE 18917
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18899: LD_EXP 3
18903: PPUSH
18904: LD_EXP 48
18908: PUSH
18909: LD_STRING Cyrus
18911: STR
18912: PPUSH
18913: CALL_OW 38
// if IsOK ( Lisa ) then
18917: LD_EXP 4
18921: PPUSH
18922: CALL_OW 302
18926: IFFALSE 18946
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18928: LD_EXP 4
18932: PPUSH
18933: LD_EXP 48
18937: PUSH
18938: LD_STRING Lisa
18940: STR
18941: PPUSH
18942: CALL_OW 38
// if IsOK ( Brown ) then
18946: LD_EXP 7
18950: PPUSH
18951: CALL_OW 302
18955: IFFALSE 18982
// begin ToLua ( enableBioCharacter(BIO_JEFF) ) ;
18957: LD_STRING enableBioCharacter(BIO_JEFF)
18959: PPUSH
18960: CALL_OW 559
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18964: LD_EXP 7
18968: PPUSH
18969: LD_EXP 48
18973: PUSH
18974: LD_STRING Brown
18976: STR
18977: PPUSH
18978: CALL_OW 38
// end ; if not IsDead ( Donaldson ) then
18982: LD_EXP 13
18986: PPUSH
18987: CALL_OW 301
18991: NOT
18992: IFFALSE 19019
// begin ToLua ( enableBioCharacter(BIO_LUCY) ) ;
18994: LD_STRING enableBioCharacter(BIO_LUCY)
18996: PPUSH
18997: CALL_OW 559
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19001: LD_EXP 13
19005: PPUSH
19006: LD_EXP 48
19010: PUSH
19011: LD_STRING Donaldson
19013: STR
19014: PPUSH
19015: CALL_OW 38
// end ; if not IsDead ( Frank ) then
19019: LD_EXP 5
19023: PPUSH
19024: CALL_OW 301
19028: NOT
19029: IFFALSE 19049
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19031: LD_EXP 5
19035: PPUSH
19036: LD_EXP 48
19040: PUSH
19041: LD_STRING Frank
19043: STR
19044: PPUSH
19045: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19049: LD_INT 50
19051: PUSH
19052: EMPTY
19053: LIST
19054: PUSH
19055: LD_INT 22
19057: PUSH
19058: LD_INT 1
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 21
19067: PUSH
19068: LD_INT 1
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: LIST
19079: PPUSH
19080: CALL_OW 69
19084: PUSH
19085: LD_EXP 1
19089: PUSH
19090: LD_EXP 2
19094: PUSH
19095: LD_EXP 3
19099: PUSH
19100: LD_EXP 4
19104: PUSH
19105: LD_EXP 7
19109: PUSH
19110: LD_EXP 13
19114: PUSH
19115: LD_EXP 5
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: DIFF
19129: PPUSH
19130: LD_STRING 04_other_survivors
19132: PPUSH
19133: CALL_OW 38
// YouWin ;
19137: CALL_OW 103
// end ;
19141: LD_VAR 0 1
19145: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19146: LD_INT 0
19148: PPUSH
19149: PPUSH
19150: PPUSH
19151: PPUSH
// gammaBase = [ ] ;
19152: LD_ADDR_VAR 0 4
19156: PUSH
19157: EMPTY
19158: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19159: LD_ADDR_VAR 0 5
19163: PUSH
19164: LD_VAR 0 1
19168: PPUSH
19169: LD_INT 22
19171: PUSH
19172: LD_INT 1
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 21
19181: PUSH
19182: LD_INT 3
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PPUSH
19193: CALL_OW 70
19197: ST_TO_ADDR
// for i in buildings do
19198: LD_ADDR_VAR 0 3
19202: PUSH
19203: LD_VAR 0 5
19207: PUSH
19208: FOR_IN
19209: IFFALSE 19546
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19211: LD_VAR 0 3
19215: PPUSH
19216: CALL_OW 266
19220: PUSH
19221: LD_INT 6
19223: PUSH
19224: LD_INT 7
19226: PUSH
19227: LD_INT 8
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: LIST
19234: IN
19235: IFFALSE 19349
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19237: LD_ADDR_VAR 0 4
19241: PUSH
19242: LD_VAR 0 4
19246: PUSH
19247: LD_VAR 0 3
19251: PPUSH
19252: CALL_OW 266
19256: PUSH
19257: LD_VAR 0 3
19261: PPUSH
19262: CALL_OW 250
19266: PUSH
19267: LD_VAR 0 3
19271: PPUSH
19272: CALL_OW 251
19276: PUSH
19277: LD_VAR 0 3
19281: PPUSH
19282: CALL_OW 254
19286: PUSH
19287: LD_VAR 0 3
19291: PPUSH
19292: CALL_OW 267
19296: PUSH
19297: LD_VAR 0 3
19301: PPUSH
19302: CALL_OW 248
19306: PUSH
19307: LD_VAR 0 3
19311: PPUSH
19312: LD_INT 1
19314: PPUSH
19315: CALL_OW 268
19319: PUSH
19320: LD_VAR 0 3
19324: PPUSH
19325: LD_INT 2
19327: PPUSH
19328: CALL_OW 268
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: PUSH
19343: EMPTY
19344: LIST
19345: ADD
19346: ST_TO_ADDR
19347: GO 19544
// if GetBType ( i ) in [ b_bunker ] then
19349: LD_VAR 0 3
19353: PPUSH
19354: CALL_OW 266
19358: PUSH
19359: LD_INT 32
19361: PUSH
19362: EMPTY
19363: LIST
19364: IN
19365: IFFALSE 19462
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19367: LD_ADDR_VAR 0 4
19371: PUSH
19372: LD_VAR 0 4
19376: PUSH
19377: LD_VAR 0 3
19381: PPUSH
19382: CALL_OW 266
19386: PUSH
19387: LD_VAR 0 3
19391: PPUSH
19392: CALL_OW 250
19396: PUSH
19397: LD_VAR 0 3
19401: PPUSH
19402: CALL_OW 251
19406: PUSH
19407: LD_VAR 0 3
19411: PPUSH
19412: CALL_OW 254
19416: PUSH
19417: LD_VAR 0 3
19421: PPUSH
19422: CALL_OW 267
19426: PUSH
19427: LD_VAR 0 3
19431: PPUSH
19432: CALL_OW 248
19436: PUSH
19437: LD_VAR 0 3
19441: PPUSH
19442: CALL_OW 269
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: PUSH
19456: EMPTY
19457: LIST
19458: ADD
19459: ST_TO_ADDR
19460: GO 19544
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19462: LD_ADDR_VAR 0 4
19466: PUSH
19467: LD_VAR 0 4
19471: PUSH
19472: LD_VAR 0 3
19476: PPUSH
19477: CALL_OW 266
19481: PUSH
19482: LD_VAR 0 3
19486: PPUSH
19487: CALL_OW 250
19491: PUSH
19492: LD_VAR 0 3
19496: PPUSH
19497: CALL_OW 251
19501: PUSH
19502: LD_VAR 0 3
19506: PPUSH
19507: CALL_OW 254
19511: PUSH
19512: LD_VAR 0 3
19516: PPUSH
19517: CALL_OW 267
19521: PUSH
19522: LD_VAR 0 3
19526: PPUSH
19527: CALL_OW 248
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: PUSH
19540: EMPTY
19541: LIST
19542: ADD
19543: ST_TO_ADDR
// end ;
19544: GO 19208
19546: POP
19547: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19548: LD_VAR 0 4
19552: PPUSH
19553: LD_STRING GammaBase
19555: PPUSH
19556: CALL_OW 39
// end ; end_of_file
19560: LD_VAR 0 2
19564: RET
// every 1 1$15 do
19565: GO 19567
19567: DISABLE
// begin if supply <= 13 and supply > 7 then
19568: LD_EXP 36
19572: PUSH
19573: LD_INT 13
19575: LESSEQUAL
19576: PUSH
19577: LD_EXP 36
19581: PUSH
19582: LD_INT 7
19584: GREATER
19585: AND
19586: IFFALSE 19609
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19588: LD_INT 3
19590: PPUSH
19591: LD_INT 5
19593: PPUSH
19594: CALL_OW 12
19598: PPUSH
19599: LD_INT 18
19601: PPUSH
19602: LD_INT 1
19604: PPUSH
19605: CALL_OW 55
// if supply <= 7 and supply > 4 then
19609: LD_EXP 36
19613: PUSH
19614: LD_INT 7
19616: LESSEQUAL
19617: PUSH
19618: LD_EXP 36
19622: PUSH
19623: LD_INT 4
19625: GREATER
19626: AND
19627: IFFALSE 19650
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19629: LD_INT 3
19631: PPUSH
19632: LD_INT 5
19634: PPUSH
19635: CALL_OW 12
19639: PPUSH
19640: LD_INT 19
19642: PPUSH
19643: LD_INT 1
19645: PPUSH
19646: CALL_OW 55
// if supply <= 4 and supply > 0 then
19650: LD_EXP 36
19654: PUSH
19655: LD_INT 4
19657: LESSEQUAL
19658: PUSH
19659: LD_EXP 36
19663: PUSH
19664: LD_INT 0
19666: GREATER
19667: AND
19668: IFFALSE 19691
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19670: LD_INT 3
19672: PPUSH
19673: LD_INT 5
19675: PPUSH
19676: CALL_OW 12
19680: PPUSH
19681: LD_INT 20
19683: PPUSH
19684: LD_INT 1
19686: PPUSH
19687: CALL_OW 55
// if supply then
19691: LD_EXP 36
19695: IFFALSE 19712
// begin supply = supply - 1 ;
19697: LD_ADDR_EXP 36
19701: PUSH
19702: LD_EXP 36
19706: PUSH
19707: LD_INT 1
19709: MINUS
19710: ST_TO_ADDR
// enable ;
19711: ENABLE
// end ; end ; end_of_file end_of_file
19712: END
// export globalGameSaveCounter ; every 0 0$1 do
19713: GO 19715
19715: DISABLE
// begin enable ;
19716: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19717: LD_STRING updateTimer(
19719: PUSH
19720: LD_OWVAR 1
19724: STR
19725: PUSH
19726: LD_STRING );
19728: STR
19729: PPUSH
19730: CALL_OW 559
// end ;
19734: END
// every 0 0$1 do
19735: GO 19737
19737: DISABLE
// begin globalGameSaveCounter := 0 ;
19738: LD_ADDR_EXP 50
19742: PUSH
19743: LD_INT 0
19745: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19746: LD_STRING setGameSaveCounter(0)
19748: PPUSH
19749: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19753: LD_STRING initStreamRollete();
19755: PPUSH
19756: CALL_OW 559
// InitStreamMode ;
19760: CALL 21086 0 0
// DefineStreamItems ( false ) ;
19764: LD_INT 0
19766: PPUSH
19767: CALL 21550 0 1
// end ;
19771: END
// export function SOS_MapStart ( ) ; begin
19772: LD_INT 0
19774: PPUSH
// if streamModeActive then
19775: LD_EXP 51
19779: IFFALSE 19788
// DefineStreamItems ( true ) ;
19781: LD_INT 1
19783: PPUSH
19784: CALL 21550 0 1
// UpdateLuaVariables ( ) ;
19788: CALL 19805 0 0
// UpdateFactoryWaypoints ( ) ;
19792: CALL 34411 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19796: CALL 34668 0 0
// end ;
19800: LD_VAR 0 1
19804: RET
// function UpdateLuaVariables ( ) ; begin
19805: LD_INT 0
19807: PPUSH
// if globalGameSaveCounter then
19808: LD_EXP 50
19812: IFFALSE 19846
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19814: LD_ADDR_EXP 50
19818: PUSH
19819: LD_EXP 50
19823: PPUSH
19824: CALL 78449 0 1
19828: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19829: LD_STRING setGameSaveCounter(
19831: PUSH
19832: LD_EXP 50
19836: STR
19837: PUSH
19838: LD_STRING )
19840: STR
19841: PPUSH
19842: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19846: LD_STRING setGameDifficulty(
19848: PUSH
19849: LD_OWVAR 67
19853: STR
19854: PUSH
19855: LD_STRING )
19857: STR
19858: PPUSH
19859: CALL_OW 559
// end ;
19863: LD_VAR 0 1
19867: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19868: LD_INT 0
19870: PPUSH
// if p2 = stream_mode then
19871: LD_VAR 0 2
19875: PUSH
19876: LD_INT 100
19878: EQUAL
19879: IFFALSE 20882
// begin if not StreamModeActive then
19881: LD_EXP 51
19885: NOT
19886: IFFALSE 19896
// StreamModeActive := true ;
19888: LD_ADDR_EXP 51
19892: PUSH
19893: LD_INT 1
19895: ST_TO_ADDR
// if p3 = 0 then
19896: LD_VAR 0 3
19900: PUSH
19901: LD_INT 0
19903: EQUAL
19904: IFFALSE 19910
// InitStreamMode ;
19906: CALL 21086 0 0
// if p3 = 1 then
19910: LD_VAR 0 3
19914: PUSH
19915: LD_INT 1
19917: EQUAL
19918: IFFALSE 19928
// sRocket := true ;
19920: LD_ADDR_EXP 56
19924: PUSH
19925: LD_INT 1
19927: ST_TO_ADDR
// if p3 = 2 then
19928: LD_VAR 0 3
19932: PUSH
19933: LD_INT 2
19935: EQUAL
19936: IFFALSE 19946
// sSpeed := true ;
19938: LD_ADDR_EXP 55
19942: PUSH
19943: LD_INT 1
19945: ST_TO_ADDR
// if p3 = 3 then
19946: LD_VAR 0 3
19950: PUSH
19951: LD_INT 3
19953: EQUAL
19954: IFFALSE 19964
// sEngine := true ;
19956: LD_ADDR_EXP 57
19960: PUSH
19961: LD_INT 1
19963: ST_TO_ADDR
// if p3 = 4 then
19964: LD_VAR 0 3
19968: PUSH
19969: LD_INT 4
19971: EQUAL
19972: IFFALSE 19982
// sSpec := true ;
19974: LD_ADDR_EXP 54
19978: PUSH
19979: LD_INT 1
19981: ST_TO_ADDR
// if p3 = 5 then
19982: LD_VAR 0 3
19986: PUSH
19987: LD_INT 5
19989: EQUAL
19990: IFFALSE 20000
// sLevel := true ;
19992: LD_ADDR_EXP 58
19996: PUSH
19997: LD_INT 1
19999: ST_TO_ADDR
// if p3 = 6 then
20000: LD_VAR 0 3
20004: PUSH
20005: LD_INT 6
20007: EQUAL
20008: IFFALSE 20018
// sArmoury := true ;
20010: LD_ADDR_EXP 59
20014: PUSH
20015: LD_INT 1
20017: ST_TO_ADDR
// if p3 = 7 then
20018: LD_VAR 0 3
20022: PUSH
20023: LD_INT 7
20025: EQUAL
20026: IFFALSE 20036
// sRadar := true ;
20028: LD_ADDR_EXP 60
20032: PUSH
20033: LD_INT 1
20035: ST_TO_ADDR
// if p3 = 8 then
20036: LD_VAR 0 3
20040: PUSH
20041: LD_INT 8
20043: EQUAL
20044: IFFALSE 20054
// sBunker := true ;
20046: LD_ADDR_EXP 61
20050: PUSH
20051: LD_INT 1
20053: ST_TO_ADDR
// if p3 = 9 then
20054: LD_VAR 0 3
20058: PUSH
20059: LD_INT 9
20061: EQUAL
20062: IFFALSE 20072
// sHack := true ;
20064: LD_ADDR_EXP 62
20068: PUSH
20069: LD_INT 1
20071: ST_TO_ADDR
// if p3 = 10 then
20072: LD_VAR 0 3
20076: PUSH
20077: LD_INT 10
20079: EQUAL
20080: IFFALSE 20090
// sFire := true ;
20082: LD_ADDR_EXP 63
20086: PUSH
20087: LD_INT 1
20089: ST_TO_ADDR
// if p3 = 11 then
20090: LD_VAR 0 3
20094: PUSH
20095: LD_INT 11
20097: EQUAL
20098: IFFALSE 20108
// sRefresh := true ;
20100: LD_ADDR_EXP 64
20104: PUSH
20105: LD_INT 1
20107: ST_TO_ADDR
// if p3 = 12 then
20108: LD_VAR 0 3
20112: PUSH
20113: LD_INT 12
20115: EQUAL
20116: IFFALSE 20126
// sExp := true ;
20118: LD_ADDR_EXP 65
20122: PUSH
20123: LD_INT 1
20125: ST_TO_ADDR
// if p3 = 13 then
20126: LD_VAR 0 3
20130: PUSH
20131: LD_INT 13
20133: EQUAL
20134: IFFALSE 20144
// sDepot := true ;
20136: LD_ADDR_EXP 66
20140: PUSH
20141: LD_INT 1
20143: ST_TO_ADDR
// if p3 = 14 then
20144: LD_VAR 0 3
20148: PUSH
20149: LD_INT 14
20151: EQUAL
20152: IFFALSE 20162
// sFlag := true ;
20154: LD_ADDR_EXP 67
20158: PUSH
20159: LD_INT 1
20161: ST_TO_ADDR
// if p3 = 15 then
20162: LD_VAR 0 3
20166: PUSH
20167: LD_INT 15
20169: EQUAL
20170: IFFALSE 20180
// sKamikadze := true ;
20172: LD_ADDR_EXP 75
20176: PUSH
20177: LD_INT 1
20179: ST_TO_ADDR
// if p3 = 16 then
20180: LD_VAR 0 3
20184: PUSH
20185: LD_INT 16
20187: EQUAL
20188: IFFALSE 20198
// sTroll := true ;
20190: LD_ADDR_EXP 76
20194: PUSH
20195: LD_INT 1
20197: ST_TO_ADDR
// if p3 = 17 then
20198: LD_VAR 0 3
20202: PUSH
20203: LD_INT 17
20205: EQUAL
20206: IFFALSE 20216
// sSlow := true ;
20208: LD_ADDR_EXP 77
20212: PUSH
20213: LD_INT 1
20215: ST_TO_ADDR
// if p3 = 18 then
20216: LD_VAR 0 3
20220: PUSH
20221: LD_INT 18
20223: EQUAL
20224: IFFALSE 20234
// sLack := true ;
20226: LD_ADDR_EXP 78
20230: PUSH
20231: LD_INT 1
20233: ST_TO_ADDR
// if p3 = 19 then
20234: LD_VAR 0 3
20238: PUSH
20239: LD_INT 19
20241: EQUAL
20242: IFFALSE 20252
// sTank := true ;
20244: LD_ADDR_EXP 80
20248: PUSH
20249: LD_INT 1
20251: ST_TO_ADDR
// if p3 = 20 then
20252: LD_VAR 0 3
20256: PUSH
20257: LD_INT 20
20259: EQUAL
20260: IFFALSE 20270
// sRemote := true ;
20262: LD_ADDR_EXP 81
20266: PUSH
20267: LD_INT 1
20269: ST_TO_ADDR
// if p3 = 21 then
20270: LD_VAR 0 3
20274: PUSH
20275: LD_INT 21
20277: EQUAL
20278: IFFALSE 20288
// sPowell := true ;
20280: LD_ADDR_EXP 82
20284: PUSH
20285: LD_INT 1
20287: ST_TO_ADDR
// if p3 = 22 then
20288: LD_VAR 0 3
20292: PUSH
20293: LD_INT 22
20295: EQUAL
20296: IFFALSE 20306
// sTeleport := true ;
20298: LD_ADDR_EXP 85
20302: PUSH
20303: LD_INT 1
20305: ST_TO_ADDR
// if p3 = 23 then
20306: LD_VAR 0 3
20310: PUSH
20311: LD_INT 23
20313: EQUAL
20314: IFFALSE 20324
// sOilTower := true ;
20316: LD_ADDR_EXP 87
20320: PUSH
20321: LD_INT 1
20323: ST_TO_ADDR
// if p3 = 24 then
20324: LD_VAR 0 3
20328: PUSH
20329: LD_INT 24
20331: EQUAL
20332: IFFALSE 20342
// sShovel := true ;
20334: LD_ADDR_EXP 88
20338: PUSH
20339: LD_INT 1
20341: ST_TO_ADDR
// if p3 = 25 then
20342: LD_VAR 0 3
20346: PUSH
20347: LD_INT 25
20349: EQUAL
20350: IFFALSE 20360
// sSheik := true ;
20352: LD_ADDR_EXP 89
20356: PUSH
20357: LD_INT 1
20359: ST_TO_ADDR
// if p3 = 26 then
20360: LD_VAR 0 3
20364: PUSH
20365: LD_INT 26
20367: EQUAL
20368: IFFALSE 20378
// sEarthquake := true ;
20370: LD_ADDR_EXP 91
20374: PUSH
20375: LD_INT 1
20377: ST_TO_ADDR
// if p3 = 27 then
20378: LD_VAR 0 3
20382: PUSH
20383: LD_INT 27
20385: EQUAL
20386: IFFALSE 20396
// sAI := true ;
20388: LD_ADDR_EXP 92
20392: PUSH
20393: LD_INT 1
20395: ST_TO_ADDR
// if p3 = 28 then
20396: LD_VAR 0 3
20400: PUSH
20401: LD_INT 28
20403: EQUAL
20404: IFFALSE 20414
// sCargo := true ;
20406: LD_ADDR_EXP 95
20410: PUSH
20411: LD_INT 1
20413: ST_TO_ADDR
// if p3 = 29 then
20414: LD_VAR 0 3
20418: PUSH
20419: LD_INT 29
20421: EQUAL
20422: IFFALSE 20432
// sDLaser := true ;
20424: LD_ADDR_EXP 96
20428: PUSH
20429: LD_INT 1
20431: ST_TO_ADDR
// if p3 = 30 then
20432: LD_VAR 0 3
20436: PUSH
20437: LD_INT 30
20439: EQUAL
20440: IFFALSE 20450
// sExchange := true ;
20442: LD_ADDR_EXP 97
20446: PUSH
20447: LD_INT 1
20449: ST_TO_ADDR
// if p3 = 31 then
20450: LD_VAR 0 3
20454: PUSH
20455: LD_INT 31
20457: EQUAL
20458: IFFALSE 20468
// sFac := true ;
20460: LD_ADDR_EXP 98
20464: PUSH
20465: LD_INT 1
20467: ST_TO_ADDR
// if p3 = 32 then
20468: LD_VAR 0 3
20472: PUSH
20473: LD_INT 32
20475: EQUAL
20476: IFFALSE 20486
// sPower := true ;
20478: LD_ADDR_EXP 99
20482: PUSH
20483: LD_INT 1
20485: ST_TO_ADDR
// if p3 = 33 then
20486: LD_VAR 0 3
20490: PUSH
20491: LD_INT 33
20493: EQUAL
20494: IFFALSE 20504
// sRandom := true ;
20496: LD_ADDR_EXP 100
20500: PUSH
20501: LD_INT 1
20503: ST_TO_ADDR
// if p3 = 34 then
20504: LD_VAR 0 3
20508: PUSH
20509: LD_INT 34
20511: EQUAL
20512: IFFALSE 20522
// sShield := true ;
20514: LD_ADDR_EXP 101
20518: PUSH
20519: LD_INT 1
20521: ST_TO_ADDR
// if p3 = 35 then
20522: LD_VAR 0 3
20526: PUSH
20527: LD_INT 35
20529: EQUAL
20530: IFFALSE 20540
// sTime := true ;
20532: LD_ADDR_EXP 102
20536: PUSH
20537: LD_INT 1
20539: ST_TO_ADDR
// if p3 = 36 then
20540: LD_VAR 0 3
20544: PUSH
20545: LD_INT 36
20547: EQUAL
20548: IFFALSE 20558
// sTools := true ;
20550: LD_ADDR_EXP 103
20554: PUSH
20555: LD_INT 1
20557: ST_TO_ADDR
// if p3 = 101 then
20558: LD_VAR 0 3
20562: PUSH
20563: LD_INT 101
20565: EQUAL
20566: IFFALSE 20576
// sSold := true ;
20568: LD_ADDR_EXP 68
20572: PUSH
20573: LD_INT 1
20575: ST_TO_ADDR
// if p3 = 102 then
20576: LD_VAR 0 3
20580: PUSH
20581: LD_INT 102
20583: EQUAL
20584: IFFALSE 20594
// sDiff := true ;
20586: LD_ADDR_EXP 69
20590: PUSH
20591: LD_INT 1
20593: ST_TO_ADDR
// if p3 = 103 then
20594: LD_VAR 0 3
20598: PUSH
20599: LD_INT 103
20601: EQUAL
20602: IFFALSE 20612
// sFog := true ;
20604: LD_ADDR_EXP 72
20608: PUSH
20609: LD_INT 1
20611: ST_TO_ADDR
// if p3 = 104 then
20612: LD_VAR 0 3
20616: PUSH
20617: LD_INT 104
20619: EQUAL
20620: IFFALSE 20630
// sReset := true ;
20622: LD_ADDR_EXP 73
20626: PUSH
20627: LD_INT 1
20629: ST_TO_ADDR
// if p3 = 105 then
20630: LD_VAR 0 3
20634: PUSH
20635: LD_INT 105
20637: EQUAL
20638: IFFALSE 20648
// sSun := true ;
20640: LD_ADDR_EXP 74
20644: PUSH
20645: LD_INT 1
20647: ST_TO_ADDR
// if p3 = 106 then
20648: LD_VAR 0 3
20652: PUSH
20653: LD_INT 106
20655: EQUAL
20656: IFFALSE 20666
// sTiger := true ;
20658: LD_ADDR_EXP 70
20662: PUSH
20663: LD_INT 1
20665: ST_TO_ADDR
// if p3 = 107 then
20666: LD_VAR 0 3
20670: PUSH
20671: LD_INT 107
20673: EQUAL
20674: IFFALSE 20684
// sBomb := true ;
20676: LD_ADDR_EXP 71
20680: PUSH
20681: LD_INT 1
20683: ST_TO_ADDR
// if p3 = 108 then
20684: LD_VAR 0 3
20688: PUSH
20689: LD_INT 108
20691: EQUAL
20692: IFFALSE 20702
// sWound := true ;
20694: LD_ADDR_EXP 79
20698: PUSH
20699: LD_INT 1
20701: ST_TO_ADDR
// if p3 = 109 then
20702: LD_VAR 0 3
20706: PUSH
20707: LD_INT 109
20709: EQUAL
20710: IFFALSE 20720
// sBetray := true ;
20712: LD_ADDR_EXP 83
20716: PUSH
20717: LD_INT 1
20719: ST_TO_ADDR
// if p3 = 110 then
20720: LD_VAR 0 3
20724: PUSH
20725: LD_INT 110
20727: EQUAL
20728: IFFALSE 20738
// sContamin := true ;
20730: LD_ADDR_EXP 84
20734: PUSH
20735: LD_INT 1
20737: ST_TO_ADDR
// if p3 = 111 then
20738: LD_VAR 0 3
20742: PUSH
20743: LD_INT 111
20745: EQUAL
20746: IFFALSE 20756
// sOil := true ;
20748: LD_ADDR_EXP 86
20752: PUSH
20753: LD_INT 1
20755: ST_TO_ADDR
// if p3 = 112 then
20756: LD_VAR 0 3
20760: PUSH
20761: LD_INT 112
20763: EQUAL
20764: IFFALSE 20774
// sStu := true ;
20766: LD_ADDR_EXP 90
20770: PUSH
20771: LD_INT 1
20773: ST_TO_ADDR
// if p3 = 113 then
20774: LD_VAR 0 3
20778: PUSH
20779: LD_INT 113
20781: EQUAL
20782: IFFALSE 20792
// sBazooka := true ;
20784: LD_ADDR_EXP 93
20788: PUSH
20789: LD_INT 1
20791: ST_TO_ADDR
// if p3 = 114 then
20792: LD_VAR 0 3
20796: PUSH
20797: LD_INT 114
20799: EQUAL
20800: IFFALSE 20810
// sMortar := true ;
20802: LD_ADDR_EXP 94
20806: PUSH
20807: LD_INT 1
20809: ST_TO_ADDR
// if p3 = 115 then
20810: LD_VAR 0 3
20814: PUSH
20815: LD_INT 115
20817: EQUAL
20818: IFFALSE 20828
// sRanger := true ;
20820: LD_ADDR_EXP 104
20824: PUSH
20825: LD_INT 1
20827: ST_TO_ADDR
// if p3 = 116 then
20828: LD_VAR 0 3
20832: PUSH
20833: LD_INT 116
20835: EQUAL
20836: IFFALSE 20846
// sComputer := true ;
20838: LD_ADDR_EXP 105
20842: PUSH
20843: LD_INT 1
20845: ST_TO_ADDR
// if p3 = 117 then
20846: LD_VAR 0 3
20850: PUSH
20851: LD_INT 117
20853: EQUAL
20854: IFFALSE 20864
// s30 := true ;
20856: LD_ADDR_EXP 106
20860: PUSH
20861: LD_INT 1
20863: ST_TO_ADDR
// if p3 = 118 then
20864: LD_VAR 0 3
20868: PUSH
20869: LD_INT 118
20871: EQUAL
20872: IFFALSE 20882
// s60 := true ;
20874: LD_ADDR_EXP 107
20878: PUSH
20879: LD_INT 1
20881: ST_TO_ADDR
// end ; if p2 = hack_mode then
20882: LD_VAR 0 2
20886: PUSH
20887: LD_INT 101
20889: EQUAL
20890: IFFALSE 21018
// begin case p3 of 1 :
20892: LD_VAR 0 3
20896: PUSH
20897: LD_INT 1
20899: DOUBLE
20900: EQUAL
20901: IFTRUE 20905
20903: GO 20912
20905: POP
// hHackUnlimitedResources ; 2 :
20906: CALL 33157 0 0
20910: GO 21018
20912: LD_INT 2
20914: DOUBLE
20915: EQUAL
20916: IFTRUE 20920
20918: GO 20927
20920: POP
// hHackSetLevel10 ; 3 :
20921: CALL 33290 0 0
20925: GO 21018
20927: LD_INT 3
20929: DOUBLE
20930: EQUAL
20931: IFTRUE 20935
20933: GO 20942
20935: POP
// hHackSetLevel10YourUnits ; 4 :
20936: CALL 33375 0 0
20940: GO 21018
20942: LD_INT 4
20944: DOUBLE
20945: EQUAL
20946: IFTRUE 20950
20948: GO 20957
20950: POP
// hHackInvincible ; 5 :
20951: CALL 33823 0 0
20955: GO 21018
20957: LD_INT 5
20959: DOUBLE
20960: EQUAL
20961: IFTRUE 20965
20963: GO 20972
20965: POP
// hHackInvisible ; 6 :
20966: CALL 33934 0 0
20970: GO 21018
20972: LD_INT 6
20974: DOUBLE
20975: EQUAL
20976: IFTRUE 20980
20978: GO 20987
20980: POP
// hHackChangeYourSide ; 7 :
20981: CALL 33991 0 0
20985: GO 21018
20987: LD_INT 7
20989: DOUBLE
20990: EQUAL
20991: IFTRUE 20995
20993: GO 21002
20995: POP
// hHackChangeUnitSide ; 8 :
20996: CALL 34033 0 0
21000: GO 21018
21002: LD_INT 8
21004: DOUBLE
21005: EQUAL
21006: IFTRUE 21010
21008: GO 21017
21010: POP
// hHackFog ; end ;
21011: CALL 34134 0 0
21015: GO 21018
21017: POP
// end ; if p2 = game_save_mode then
21018: LD_VAR 0 2
21022: PUSH
21023: LD_INT 102
21025: EQUAL
21026: IFFALSE 21081
// begin if p3 = 1 then
21028: LD_VAR 0 3
21032: PUSH
21033: LD_INT 1
21035: EQUAL
21036: IFFALSE 21048
// globalGameSaveCounter := p4 ;
21038: LD_ADDR_EXP 50
21042: PUSH
21043: LD_VAR 0 4
21047: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21048: LD_VAR 0 3
21052: PUSH
21053: LD_INT 2
21055: EQUAL
21056: PUSH
21057: LD_EXP 50
21061: AND
21062: IFFALSE 21081
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21064: LD_STRING setGameSaveCounter(
21066: PUSH
21067: LD_EXP 50
21071: STR
21072: PUSH
21073: LD_STRING )
21075: STR
21076: PPUSH
21077: CALL_OW 559
// end ; end ;
21081: LD_VAR 0 7
21085: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21086: LD_INT 0
21088: PPUSH
// streamModeActive := false ;
21089: LD_ADDR_EXP 51
21093: PUSH
21094: LD_INT 0
21096: ST_TO_ADDR
// normalCounter := 36 ;
21097: LD_ADDR_EXP 52
21101: PUSH
21102: LD_INT 36
21104: ST_TO_ADDR
// hardcoreCounter := 18 ;
21105: LD_ADDR_EXP 53
21109: PUSH
21110: LD_INT 18
21112: ST_TO_ADDR
// sRocket := false ;
21113: LD_ADDR_EXP 56
21117: PUSH
21118: LD_INT 0
21120: ST_TO_ADDR
// sSpeed := false ;
21121: LD_ADDR_EXP 55
21125: PUSH
21126: LD_INT 0
21128: ST_TO_ADDR
// sEngine := false ;
21129: LD_ADDR_EXP 57
21133: PUSH
21134: LD_INT 0
21136: ST_TO_ADDR
// sSpec := false ;
21137: LD_ADDR_EXP 54
21141: PUSH
21142: LD_INT 0
21144: ST_TO_ADDR
// sLevel := false ;
21145: LD_ADDR_EXP 58
21149: PUSH
21150: LD_INT 0
21152: ST_TO_ADDR
// sArmoury := false ;
21153: LD_ADDR_EXP 59
21157: PUSH
21158: LD_INT 0
21160: ST_TO_ADDR
// sRadar := false ;
21161: LD_ADDR_EXP 60
21165: PUSH
21166: LD_INT 0
21168: ST_TO_ADDR
// sBunker := false ;
21169: LD_ADDR_EXP 61
21173: PUSH
21174: LD_INT 0
21176: ST_TO_ADDR
// sHack := false ;
21177: LD_ADDR_EXP 62
21181: PUSH
21182: LD_INT 0
21184: ST_TO_ADDR
// sFire := false ;
21185: LD_ADDR_EXP 63
21189: PUSH
21190: LD_INT 0
21192: ST_TO_ADDR
// sRefresh := false ;
21193: LD_ADDR_EXP 64
21197: PUSH
21198: LD_INT 0
21200: ST_TO_ADDR
// sExp := false ;
21201: LD_ADDR_EXP 65
21205: PUSH
21206: LD_INT 0
21208: ST_TO_ADDR
// sDepot := false ;
21209: LD_ADDR_EXP 66
21213: PUSH
21214: LD_INT 0
21216: ST_TO_ADDR
// sFlag := false ;
21217: LD_ADDR_EXP 67
21221: PUSH
21222: LD_INT 0
21224: ST_TO_ADDR
// sKamikadze := false ;
21225: LD_ADDR_EXP 75
21229: PUSH
21230: LD_INT 0
21232: ST_TO_ADDR
// sTroll := false ;
21233: LD_ADDR_EXP 76
21237: PUSH
21238: LD_INT 0
21240: ST_TO_ADDR
// sSlow := false ;
21241: LD_ADDR_EXP 77
21245: PUSH
21246: LD_INT 0
21248: ST_TO_ADDR
// sLack := false ;
21249: LD_ADDR_EXP 78
21253: PUSH
21254: LD_INT 0
21256: ST_TO_ADDR
// sTank := false ;
21257: LD_ADDR_EXP 80
21261: PUSH
21262: LD_INT 0
21264: ST_TO_ADDR
// sRemote := false ;
21265: LD_ADDR_EXP 81
21269: PUSH
21270: LD_INT 0
21272: ST_TO_ADDR
// sPowell := false ;
21273: LD_ADDR_EXP 82
21277: PUSH
21278: LD_INT 0
21280: ST_TO_ADDR
// sTeleport := false ;
21281: LD_ADDR_EXP 85
21285: PUSH
21286: LD_INT 0
21288: ST_TO_ADDR
// sOilTower := false ;
21289: LD_ADDR_EXP 87
21293: PUSH
21294: LD_INT 0
21296: ST_TO_ADDR
// sShovel := false ;
21297: LD_ADDR_EXP 88
21301: PUSH
21302: LD_INT 0
21304: ST_TO_ADDR
// sSheik := false ;
21305: LD_ADDR_EXP 89
21309: PUSH
21310: LD_INT 0
21312: ST_TO_ADDR
// sEarthquake := false ;
21313: LD_ADDR_EXP 91
21317: PUSH
21318: LD_INT 0
21320: ST_TO_ADDR
// sAI := false ;
21321: LD_ADDR_EXP 92
21325: PUSH
21326: LD_INT 0
21328: ST_TO_ADDR
// sCargo := false ;
21329: LD_ADDR_EXP 95
21333: PUSH
21334: LD_INT 0
21336: ST_TO_ADDR
// sDLaser := false ;
21337: LD_ADDR_EXP 96
21341: PUSH
21342: LD_INT 0
21344: ST_TO_ADDR
// sExchange := false ;
21345: LD_ADDR_EXP 97
21349: PUSH
21350: LD_INT 0
21352: ST_TO_ADDR
// sFac := false ;
21353: LD_ADDR_EXP 98
21357: PUSH
21358: LD_INT 0
21360: ST_TO_ADDR
// sPower := false ;
21361: LD_ADDR_EXP 99
21365: PUSH
21366: LD_INT 0
21368: ST_TO_ADDR
// sRandom := false ;
21369: LD_ADDR_EXP 100
21373: PUSH
21374: LD_INT 0
21376: ST_TO_ADDR
// sShield := false ;
21377: LD_ADDR_EXP 101
21381: PUSH
21382: LD_INT 0
21384: ST_TO_ADDR
// sTime := false ;
21385: LD_ADDR_EXP 102
21389: PUSH
21390: LD_INT 0
21392: ST_TO_ADDR
// sTools := false ;
21393: LD_ADDR_EXP 103
21397: PUSH
21398: LD_INT 0
21400: ST_TO_ADDR
// sSold := false ;
21401: LD_ADDR_EXP 68
21405: PUSH
21406: LD_INT 0
21408: ST_TO_ADDR
// sDiff := false ;
21409: LD_ADDR_EXP 69
21413: PUSH
21414: LD_INT 0
21416: ST_TO_ADDR
// sFog := false ;
21417: LD_ADDR_EXP 72
21421: PUSH
21422: LD_INT 0
21424: ST_TO_ADDR
// sReset := false ;
21425: LD_ADDR_EXP 73
21429: PUSH
21430: LD_INT 0
21432: ST_TO_ADDR
// sSun := false ;
21433: LD_ADDR_EXP 74
21437: PUSH
21438: LD_INT 0
21440: ST_TO_ADDR
// sTiger := false ;
21441: LD_ADDR_EXP 70
21445: PUSH
21446: LD_INT 0
21448: ST_TO_ADDR
// sBomb := false ;
21449: LD_ADDR_EXP 71
21453: PUSH
21454: LD_INT 0
21456: ST_TO_ADDR
// sWound := false ;
21457: LD_ADDR_EXP 79
21461: PUSH
21462: LD_INT 0
21464: ST_TO_ADDR
// sBetray := false ;
21465: LD_ADDR_EXP 83
21469: PUSH
21470: LD_INT 0
21472: ST_TO_ADDR
// sContamin := false ;
21473: LD_ADDR_EXP 84
21477: PUSH
21478: LD_INT 0
21480: ST_TO_ADDR
// sOil := false ;
21481: LD_ADDR_EXP 86
21485: PUSH
21486: LD_INT 0
21488: ST_TO_ADDR
// sStu := false ;
21489: LD_ADDR_EXP 90
21493: PUSH
21494: LD_INT 0
21496: ST_TO_ADDR
// sBazooka := false ;
21497: LD_ADDR_EXP 93
21501: PUSH
21502: LD_INT 0
21504: ST_TO_ADDR
// sMortar := false ;
21505: LD_ADDR_EXP 94
21509: PUSH
21510: LD_INT 0
21512: ST_TO_ADDR
// sRanger := false ;
21513: LD_ADDR_EXP 104
21517: PUSH
21518: LD_INT 0
21520: ST_TO_ADDR
// sComputer := false ;
21521: LD_ADDR_EXP 105
21525: PUSH
21526: LD_INT 0
21528: ST_TO_ADDR
// s30 := false ;
21529: LD_ADDR_EXP 106
21533: PUSH
21534: LD_INT 0
21536: ST_TO_ADDR
// s60 := false ;
21537: LD_ADDR_EXP 107
21541: PUSH
21542: LD_INT 0
21544: ST_TO_ADDR
// end ;
21545: LD_VAR 0 1
21549: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21550: LD_INT 0
21552: PPUSH
21553: PPUSH
21554: PPUSH
21555: PPUSH
21556: PPUSH
21557: PPUSH
21558: PPUSH
// result := [ ] ;
21559: LD_ADDR_VAR 0 2
21563: PUSH
21564: EMPTY
21565: ST_TO_ADDR
// if campaign_id = 1 then
21566: LD_OWVAR 69
21570: PUSH
21571: LD_INT 1
21573: EQUAL
21574: IFFALSE 24740
// begin case mission_number of 1 :
21576: LD_OWVAR 70
21580: PUSH
21581: LD_INT 1
21583: DOUBLE
21584: EQUAL
21585: IFTRUE 21589
21587: GO 21665
21589: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21590: LD_ADDR_VAR 0 2
21594: PUSH
21595: LD_INT 2
21597: PUSH
21598: LD_INT 4
21600: PUSH
21601: LD_INT 11
21603: PUSH
21604: LD_INT 12
21606: PUSH
21607: LD_INT 15
21609: PUSH
21610: LD_INT 16
21612: PUSH
21613: LD_INT 22
21615: PUSH
21616: LD_INT 23
21618: PUSH
21619: LD_INT 26
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 101
21635: PUSH
21636: LD_INT 102
21638: PUSH
21639: LD_INT 106
21641: PUSH
21642: LD_INT 116
21644: PUSH
21645: LD_INT 117
21647: PUSH
21648: LD_INT 118
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: ST_TO_ADDR
21663: GO 24738
21665: LD_INT 2
21667: DOUBLE
21668: EQUAL
21669: IFTRUE 21673
21671: GO 21757
21673: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21674: LD_ADDR_VAR 0 2
21678: PUSH
21679: LD_INT 2
21681: PUSH
21682: LD_INT 4
21684: PUSH
21685: LD_INT 11
21687: PUSH
21688: LD_INT 12
21690: PUSH
21691: LD_INT 15
21693: PUSH
21694: LD_INT 16
21696: PUSH
21697: LD_INT 22
21699: PUSH
21700: LD_INT 23
21702: PUSH
21703: LD_INT 26
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 101
21719: PUSH
21720: LD_INT 102
21722: PUSH
21723: LD_INT 105
21725: PUSH
21726: LD_INT 106
21728: PUSH
21729: LD_INT 108
21731: PUSH
21732: LD_INT 116
21734: PUSH
21735: LD_INT 117
21737: PUSH
21738: LD_INT 118
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: ST_TO_ADDR
21755: GO 24738
21757: LD_INT 3
21759: DOUBLE
21760: EQUAL
21761: IFTRUE 21765
21763: GO 21853
21765: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21766: LD_ADDR_VAR 0 2
21770: PUSH
21771: LD_INT 2
21773: PUSH
21774: LD_INT 4
21776: PUSH
21777: LD_INT 5
21779: PUSH
21780: LD_INT 11
21782: PUSH
21783: LD_INT 12
21785: PUSH
21786: LD_INT 15
21788: PUSH
21789: LD_INT 16
21791: PUSH
21792: LD_INT 22
21794: PUSH
21795: LD_INT 26
21797: PUSH
21798: LD_INT 36
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 101
21815: PUSH
21816: LD_INT 102
21818: PUSH
21819: LD_INT 105
21821: PUSH
21822: LD_INT 106
21824: PUSH
21825: LD_INT 108
21827: PUSH
21828: LD_INT 116
21830: PUSH
21831: LD_INT 117
21833: PUSH
21834: LD_INT 118
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: ST_TO_ADDR
21851: GO 24738
21853: LD_INT 4
21855: DOUBLE
21856: EQUAL
21857: IFTRUE 21861
21859: GO 21957
21861: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21862: LD_ADDR_VAR 0 2
21866: PUSH
21867: LD_INT 2
21869: PUSH
21870: LD_INT 4
21872: PUSH
21873: LD_INT 5
21875: PUSH
21876: LD_INT 8
21878: PUSH
21879: LD_INT 11
21881: PUSH
21882: LD_INT 12
21884: PUSH
21885: LD_INT 15
21887: PUSH
21888: LD_INT 16
21890: PUSH
21891: LD_INT 22
21893: PUSH
21894: LD_INT 23
21896: PUSH
21897: LD_INT 26
21899: PUSH
21900: LD_INT 36
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 101
21919: PUSH
21920: LD_INT 102
21922: PUSH
21923: LD_INT 105
21925: PUSH
21926: LD_INT 106
21928: PUSH
21929: LD_INT 108
21931: PUSH
21932: LD_INT 116
21934: PUSH
21935: LD_INT 117
21937: PUSH
21938: LD_INT 118
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: ST_TO_ADDR
21955: GO 24738
21957: LD_INT 5
21959: DOUBLE
21960: EQUAL
21961: IFTRUE 21965
21963: GO 22077
21965: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21966: LD_ADDR_VAR 0 2
21970: PUSH
21971: LD_INT 2
21973: PUSH
21974: LD_INT 4
21976: PUSH
21977: LD_INT 5
21979: PUSH
21980: LD_INT 6
21982: PUSH
21983: LD_INT 8
21985: PUSH
21986: LD_INT 11
21988: PUSH
21989: LD_INT 12
21991: PUSH
21992: LD_INT 15
21994: PUSH
21995: LD_INT 16
21997: PUSH
21998: LD_INT 22
22000: PUSH
22001: LD_INT 23
22003: PUSH
22004: LD_INT 25
22006: PUSH
22007: LD_INT 26
22009: PUSH
22010: LD_INT 36
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 101
22031: PUSH
22032: LD_INT 102
22034: PUSH
22035: LD_INT 105
22037: PUSH
22038: LD_INT 106
22040: PUSH
22041: LD_INT 108
22043: PUSH
22044: LD_INT 109
22046: PUSH
22047: LD_INT 112
22049: PUSH
22050: LD_INT 116
22052: PUSH
22053: LD_INT 117
22055: PUSH
22056: LD_INT 118
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: ST_TO_ADDR
22075: GO 24738
22077: LD_INT 6
22079: DOUBLE
22080: EQUAL
22081: IFTRUE 22085
22083: GO 22217
22085: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22086: LD_ADDR_VAR 0 2
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: LD_INT 4
22096: PUSH
22097: LD_INT 5
22099: PUSH
22100: LD_INT 6
22102: PUSH
22103: LD_INT 8
22105: PUSH
22106: LD_INT 11
22108: PUSH
22109: LD_INT 12
22111: PUSH
22112: LD_INT 15
22114: PUSH
22115: LD_INT 16
22117: PUSH
22118: LD_INT 20
22120: PUSH
22121: LD_INT 21
22123: PUSH
22124: LD_INT 22
22126: PUSH
22127: LD_INT 23
22129: PUSH
22130: LD_INT 25
22132: PUSH
22133: LD_INT 26
22135: PUSH
22136: LD_INT 30
22138: PUSH
22139: LD_INT 31
22141: PUSH
22142: LD_INT 32
22144: PUSH
22145: LD_INT 36
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 101
22171: PUSH
22172: LD_INT 102
22174: PUSH
22175: LD_INT 105
22177: PUSH
22178: LD_INT 106
22180: PUSH
22181: LD_INT 108
22183: PUSH
22184: LD_INT 109
22186: PUSH
22187: LD_INT 112
22189: PUSH
22190: LD_INT 116
22192: PUSH
22193: LD_INT 117
22195: PUSH
22196: LD_INT 118
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: ST_TO_ADDR
22215: GO 24738
22217: LD_INT 7
22219: DOUBLE
22220: EQUAL
22221: IFTRUE 22225
22223: GO 22337
22225: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22226: LD_ADDR_VAR 0 2
22230: PUSH
22231: LD_INT 2
22233: PUSH
22234: LD_INT 4
22236: PUSH
22237: LD_INT 5
22239: PUSH
22240: LD_INT 7
22242: PUSH
22243: LD_INT 11
22245: PUSH
22246: LD_INT 12
22248: PUSH
22249: LD_INT 15
22251: PUSH
22252: LD_INT 16
22254: PUSH
22255: LD_INT 20
22257: PUSH
22258: LD_INT 21
22260: PUSH
22261: LD_INT 22
22263: PUSH
22264: LD_INT 23
22266: PUSH
22267: LD_INT 25
22269: PUSH
22270: LD_INT 26
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 101
22291: PUSH
22292: LD_INT 102
22294: PUSH
22295: LD_INT 103
22297: PUSH
22298: LD_INT 105
22300: PUSH
22301: LD_INT 106
22303: PUSH
22304: LD_INT 108
22306: PUSH
22307: LD_INT 112
22309: PUSH
22310: LD_INT 116
22312: PUSH
22313: LD_INT 117
22315: PUSH
22316: LD_INT 118
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: ST_TO_ADDR
22335: GO 24738
22337: LD_INT 8
22339: DOUBLE
22340: EQUAL
22341: IFTRUE 22345
22343: GO 22485
22345: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22346: LD_ADDR_VAR 0 2
22350: PUSH
22351: LD_INT 2
22353: PUSH
22354: LD_INT 4
22356: PUSH
22357: LD_INT 5
22359: PUSH
22360: LD_INT 6
22362: PUSH
22363: LD_INT 7
22365: PUSH
22366: LD_INT 8
22368: PUSH
22369: LD_INT 11
22371: PUSH
22372: LD_INT 12
22374: PUSH
22375: LD_INT 15
22377: PUSH
22378: LD_INT 16
22380: PUSH
22381: LD_INT 20
22383: PUSH
22384: LD_INT 21
22386: PUSH
22387: LD_INT 22
22389: PUSH
22390: LD_INT 23
22392: PUSH
22393: LD_INT 25
22395: PUSH
22396: LD_INT 26
22398: PUSH
22399: LD_INT 30
22401: PUSH
22402: LD_INT 31
22404: PUSH
22405: LD_INT 32
22407: PUSH
22408: LD_INT 36
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 101
22435: PUSH
22436: LD_INT 102
22438: PUSH
22439: LD_INT 103
22441: PUSH
22442: LD_INT 105
22444: PUSH
22445: LD_INT 106
22447: PUSH
22448: LD_INT 108
22450: PUSH
22451: LD_INT 109
22453: PUSH
22454: LD_INT 112
22456: PUSH
22457: LD_INT 116
22459: PUSH
22460: LD_INT 117
22462: PUSH
22463: LD_INT 118
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: ST_TO_ADDR
22483: GO 24738
22485: LD_INT 9
22487: DOUBLE
22488: EQUAL
22489: IFTRUE 22493
22491: GO 22641
22493: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22494: LD_ADDR_VAR 0 2
22498: PUSH
22499: LD_INT 2
22501: PUSH
22502: LD_INT 4
22504: PUSH
22505: LD_INT 5
22507: PUSH
22508: LD_INT 6
22510: PUSH
22511: LD_INT 7
22513: PUSH
22514: LD_INT 8
22516: PUSH
22517: LD_INT 11
22519: PUSH
22520: LD_INT 12
22522: PUSH
22523: LD_INT 15
22525: PUSH
22526: LD_INT 16
22528: PUSH
22529: LD_INT 20
22531: PUSH
22532: LD_INT 21
22534: PUSH
22535: LD_INT 22
22537: PUSH
22538: LD_INT 23
22540: PUSH
22541: LD_INT 25
22543: PUSH
22544: LD_INT 26
22546: PUSH
22547: LD_INT 28
22549: PUSH
22550: LD_INT 30
22552: PUSH
22553: LD_INT 31
22555: PUSH
22556: LD_INT 32
22558: PUSH
22559: LD_INT 36
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 101
22587: PUSH
22588: LD_INT 102
22590: PUSH
22591: LD_INT 103
22593: PUSH
22594: LD_INT 105
22596: PUSH
22597: LD_INT 106
22599: PUSH
22600: LD_INT 108
22602: PUSH
22603: LD_INT 109
22605: PUSH
22606: LD_INT 112
22608: PUSH
22609: LD_INT 114
22611: PUSH
22612: LD_INT 116
22614: PUSH
22615: LD_INT 117
22617: PUSH
22618: LD_INT 118
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: ST_TO_ADDR
22639: GO 24738
22641: LD_INT 10
22643: DOUBLE
22644: EQUAL
22645: IFTRUE 22649
22647: GO 22845
22649: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22650: LD_ADDR_VAR 0 2
22654: PUSH
22655: LD_INT 2
22657: PUSH
22658: LD_INT 4
22660: PUSH
22661: LD_INT 5
22663: PUSH
22664: LD_INT 6
22666: PUSH
22667: LD_INT 7
22669: PUSH
22670: LD_INT 8
22672: PUSH
22673: LD_INT 9
22675: PUSH
22676: LD_INT 10
22678: PUSH
22679: LD_INT 11
22681: PUSH
22682: LD_INT 12
22684: PUSH
22685: LD_INT 13
22687: PUSH
22688: LD_INT 14
22690: PUSH
22691: LD_INT 15
22693: PUSH
22694: LD_INT 16
22696: PUSH
22697: LD_INT 17
22699: PUSH
22700: LD_INT 18
22702: PUSH
22703: LD_INT 19
22705: PUSH
22706: LD_INT 20
22708: PUSH
22709: LD_INT 21
22711: PUSH
22712: LD_INT 22
22714: PUSH
22715: LD_INT 23
22717: PUSH
22718: LD_INT 24
22720: PUSH
22721: LD_INT 25
22723: PUSH
22724: LD_INT 26
22726: PUSH
22727: LD_INT 28
22729: PUSH
22730: LD_INT 30
22732: PUSH
22733: LD_INT 31
22735: PUSH
22736: LD_INT 32
22738: PUSH
22739: LD_INT 36
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 101
22775: PUSH
22776: LD_INT 102
22778: PUSH
22779: LD_INT 103
22781: PUSH
22782: LD_INT 104
22784: PUSH
22785: LD_INT 105
22787: PUSH
22788: LD_INT 106
22790: PUSH
22791: LD_INT 107
22793: PUSH
22794: LD_INT 108
22796: PUSH
22797: LD_INT 109
22799: PUSH
22800: LD_INT 110
22802: PUSH
22803: LD_INT 111
22805: PUSH
22806: LD_INT 112
22808: PUSH
22809: LD_INT 114
22811: PUSH
22812: LD_INT 116
22814: PUSH
22815: LD_INT 117
22817: PUSH
22818: LD_INT 118
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: ST_TO_ADDR
22843: GO 24738
22845: LD_INT 11
22847: DOUBLE
22848: EQUAL
22849: IFTRUE 22853
22851: GO 23057
22853: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22854: LD_ADDR_VAR 0 2
22858: PUSH
22859: LD_INT 2
22861: PUSH
22862: LD_INT 3
22864: PUSH
22865: LD_INT 4
22867: PUSH
22868: LD_INT 5
22870: PUSH
22871: LD_INT 6
22873: PUSH
22874: LD_INT 7
22876: PUSH
22877: LD_INT 8
22879: PUSH
22880: LD_INT 9
22882: PUSH
22883: LD_INT 10
22885: PUSH
22886: LD_INT 11
22888: PUSH
22889: LD_INT 12
22891: PUSH
22892: LD_INT 13
22894: PUSH
22895: LD_INT 14
22897: PUSH
22898: LD_INT 15
22900: PUSH
22901: LD_INT 16
22903: PUSH
22904: LD_INT 17
22906: PUSH
22907: LD_INT 18
22909: PUSH
22910: LD_INT 19
22912: PUSH
22913: LD_INT 20
22915: PUSH
22916: LD_INT 21
22918: PUSH
22919: LD_INT 22
22921: PUSH
22922: LD_INT 23
22924: PUSH
22925: LD_INT 24
22927: PUSH
22928: LD_INT 25
22930: PUSH
22931: LD_INT 26
22933: PUSH
22934: LD_INT 28
22936: PUSH
22937: LD_INT 30
22939: PUSH
22940: LD_INT 31
22942: PUSH
22943: LD_INT 32
22945: PUSH
22946: LD_INT 34
22948: PUSH
22949: LD_INT 36
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 101
22987: PUSH
22988: LD_INT 102
22990: PUSH
22991: LD_INT 103
22993: PUSH
22994: LD_INT 104
22996: PUSH
22997: LD_INT 105
22999: PUSH
23000: LD_INT 106
23002: PUSH
23003: LD_INT 107
23005: PUSH
23006: LD_INT 108
23008: PUSH
23009: LD_INT 109
23011: PUSH
23012: LD_INT 110
23014: PUSH
23015: LD_INT 111
23017: PUSH
23018: LD_INT 112
23020: PUSH
23021: LD_INT 114
23023: PUSH
23024: LD_INT 116
23026: PUSH
23027: LD_INT 117
23029: PUSH
23030: LD_INT 118
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: ST_TO_ADDR
23055: GO 24738
23057: LD_INT 12
23059: DOUBLE
23060: EQUAL
23061: IFTRUE 23065
23063: GO 23285
23065: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23066: LD_ADDR_VAR 0 2
23070: PUSH
23071: LD_INT 1
23073: PUSH
23074: LD_INT 2
23076: PUSH
23077: LD_INT 3
23079: PUSH
23080: LD_INT 4
23082: PUSH
23083: LD_INT 5
23085: PUSH
23086: LD_INT 6
23088: PUSH
23089: LD_INT 7
23091: PUSH
23092: LD_INT 8
23094: PUSH
23095: LD_INT 9
23097: PUSH
23098: LD_INT 10
23100: PUSH
23101: LD_INT 11
23103: PUSH
23104: LD_INT 12
23106: PUSH
23107: LD_INT 13
23109: PUSH
23110: LD_INT 14
23112: PUSH
23113: LD_INT 15
23115: PUSH
23116: LD_INT 16
23118: PUSH
23119: LD_INT 17
23121: PUSH
23122: LD_INT 18
23124: PUSH
23125: LD_INT 19
23127: PUSH
23128: LD_INT 20
23130: PUSH
23131: LD_INT 21
23133: PUSH
23134: LD_INT 22
23136: PUSH
23137: LD_INT 23
23139: PUSH
23140: LD_INT 24
23142: PUSH
23143: LD_INT 25
23145: PUSH
23146: LD_INT 26
23148: PUSH
23149: LD_INT 27
23151: PUSH
23152: LD_INT 28
23154: PUSH
23155: LD_INT 30
23157: PUSH
23158: LD_INT 31
23160: PUSH
23161: LD_INT 32
23163: PUSH
23164: LD_INT 33
23166: PUSH
23167: LD_INT 34
23169: PUSH
23170: LD_INT 36
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 101
23211: PUSH
23212: LD_INT 102
23214: PUSH
23215: LD_INT 103
23217: PUSH
23218: LD_INT 104
23220: PUSH
23221: LD_INT 105
23223: PUSH
23224: LD_INT 106
23226: PUSH
23227: LD_INT 107
23229: PUSH
23230: LD_INT 108
23232: PUSH
23233: LD_INT 109
23235: PUSH
23236: LD_INT 110
23238: PUSH
23239: LD_INT 111
23241: PUSH
23242: LD_INT 112
23244: PUSH
23245: LD_INT 113
23247: PUSH
23248: LD_INT 114
23250: PUSH
23251: LD_INT 116
23253: PUSH
23254: LD_INT 117
23256: PUSH
23257: LD_INT 118
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: ST_TO_ADDR
23283: GO 24738
23285: LD_INT 13
23287: DOUBLE
23288: EQUAL
23289: IFTRUE 23293
23291: GO 23501
23293: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23294: LD_ADDR_VAR 0 2
23298: PUSH
23299: LD_INT 1
23301: PUSH
23302: LD_INT 2
23304: PUSH
23305: LD_INT 3
23307: PUSH
23308: LD_INT 4
23310: PUSH
23311: LD_INT 5
23313: PUSH
23314: LD_INT 8
23316: PUSH
23317: LD_INT 9
23319: PUSH
23320: LD_INT 10
23322: PUSH
23323: LD_INT 11
23325: PUSH
23326: LD_INT 12
23328: PUSH
23329: LD_INT 14
23331: PUSH
23332: LD_INT 15
23334: PUSH
23335: LD_INT 16
23337: PUSH
23338: LD_INT 17
23340: PUSH
23341: LD_INT 18
23343: PUSH
23344: LD_INT 19
23346: PUSH
23347: LD_INT 20
23349: PUSH
23350: LD_INT 21
23352: PUSH
23353: LD_INT 22
23355: PUSH
23356: LD_INT 23
23358: PUSH
23359: LD_INT 24
23361: PUSH
23362: LD_INT 25
23364: PUSH
23365: LD_INT 26
23367: PUSH
23368: LD_INT 27
23370: PUSH
23371: LD_INT 28
23373: PUSH
23374: LD_INT 30
23376: PUSH
23377: LD_INT 31
23379: PUSH
23380: LD_INT 32
23382: PUSH
23383: LD_INT 33
23385: PUSH
23386: LD_INT 34
23388: PUSH
23389: LD_INT 36
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 101
23427: PUSH
23428: LD_INT 102
23430: PUSH
23431: LD_INT 103
23433: PUSH
23434: LD_INT 104
23436: PUSH
23437: LD_INT 105
23439: PUSH
23440: LD_INT 106
23442: PUSH
23443: LD_INT 107
23445: PUSH
23446: LD_INT 108
23448: PUSH
23449: LD_INT 109
23451: PUSH
23452: LD_INT 110
23454: PUSH
23455: LD_INT 111
23457: PUSH
23458: LD_INT 112
23460: PUSH
23461: LD_INT 113
23463: PUSH
23464: LD_INT 114
23466: PUSH
23467: LD_INT 116
23469: PUSH
23470: LD_INT 117
23472: PUSH
23473: LD_INT 118
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: ST_TO_ADDR
23499: GO 24738
23501: LD_INT 14
23503: DOUBLE
23504: EQUAL
23505: IFTRUE 23509
23507: GO 23733
23509: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23510: LD_ADDR_VAR 0 2
23514: PUSH
23515: LD_INT 1
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: LD_INT 3
23523: PUSH
23524: LD_INT 4
23526: PUSH
23527: LD_INT 5
23529: PUSH
23530: LD_INT 6
23532: PUSH
23533: LD_INT 7
23535: PUSH
23536: LD_INT 8
23538: PUSH
23539: LD_INT 9
23541: PUSH
23542: LD_INT 10
23544: PUSH
23545: LD_INT 11
23547: PUSH
23548: LD_INT 12
23550: PUSH
23551: LD_INT 13
23553: PUSH
23554: LD_INT 14
23556: PUSH
23557: LD_INT 15
23559: PUSH
23560: LD_INT 16
23562: PUSH
23563: LD_INT 17
23565: PUSH
23566: LD_INT 18
23568: PUSH
23569: LD_INT 19
23571: PUSH
23572: LD_INT 20
23574: PUSH
23575: LD_INT 21
23577: PUSH
23578: LD_INT 22
23580: PUSH
23581: LD_INT 23
23583: PUSH
23584: LD_INT 24
23586: PUSH
23587: LD_INT 25
23589: PUSH
23590: LD_INT 26
23592: PUSH
23593: LD_INT 27
23595: PUSH
23596: LD_INT 28
23598: PUSH
23599: LD_INT 29
23601: PUSH
23602: LD_INT 30
23604: PUSH
23605: LD_INT 31
23607: PUSH
23608: LD_INT 32
23610: PUSH
23611: LD_INT 33
23613: PUSH
23614: LD_INT 34
23616: PUSH
23617: LD_INT 36
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 101
23659: PUSH
23660: LD_INT 102
23662: PUSH
23663: LD_INT 103
23665: PUSH
23666: LD_INT 104
23668: PUSH
23669: LD_INT 105
23671: PUSH
23672: LD_INT 106
23674: PUSH
23675: LD_INT 107
23677: PUSH
23678: LD_INT 108
23680: PUSH
23681: LD_INT 109
23683: PUSH
23684: LD_INT 110
23686: PUSH
23687: LD_INT 111
23689: PUSH
23690: LD_INT 112
23692: PUSH
23693: LD_INT 113
23695: PUSH
23696: LD_INT 114
23698: PUSH
23699: LD_INT 116
23701: PUSH
23702: LD_INT 117
23704: PUSH
23705: LD_INT 118
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: ST_TO_ADDR
23731: GO 24738
23733: LD_INT 15
23735: DOUBLE
23736: EQUAL
23737: IFTRUE 23741
23739: GO 23965
23741: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23742: LD_ADDR_VAR 0 2
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: LD_INT 3
23755: PUSH
23756: LD_INT 4
23758: PUSH
23759: LD_INT 5
23761: PUSH
23762: LD_INT 6
23764: PUSH
23765: LD_INT 7
23767: PUSH
23768: LD_INT 8
23770: PUSH
23771: LD_INT 9
23773: PUSH
23774: LD_INT 10
23776: PUSH
23777: LD_INT 11
23779: PUSH
23780: LD_INT 12
23782: PUSH
23783: LD_INT 13
23785: PUSH
23786: LD_INT 14
23788: PUSH
23789: LD_INT 15
23791: PUSH
23792: LD_INT 16
23794: PUSH
23795: LD_INT 17
23797: PUSH
23798: LD_INT 18
23800: PUSH
23801: LD_INT 19
23803: PUSH
23804: LD_INT 20
23806: PUSH
23807: LD_INT 21
23809: PUSH
23810: LD_INT 22
23812: PUSH
23813: LD_INT 23
23815: PUSH
23816: LD_INT 24
23818: PUSH
23819: LD_INT 25
23821: PUSH
23822: LD_INT 26
23824: PUSH
23825: LD_INT 27
23827: PUSH
23828: LD_INT 28
23830: PUSH
23831: LD_INT 29
23833: PUSH
23834: LD_INT 30
23836: PUSH
23837: LD_INT 31
23839: PUSH
23840: LD_INT 32
23842: PUSH
23843: LD_INT 33
23845: PUSH
23846: LD_INT 34
23848: PUSH
23849: LD_INT 36
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 101
23891: PUSH
23892: LD_INT 102
23894: PUSH
23895: LD_INT 103
23897: PUSH
23898: LD_INT 104
23900: PUSH
23901: LD_INT 105
23903: PUSH
23904: LD_INT 106
23906: PUSH
23907: LD_INT 107
23909: PUSH
23910: LD_INT 108
23912: PUSH
23913: LD_INT 109
23915: PUSH
23916: LD_INT 110
23918: PUSH
23919: LD_INT 111
23921: PUSH
23922: LD_INT 112
23924: PUSH
23925: LD_INT 113
23927: PUSH
23928: LD_INT 114
23930: PUSH
23931: LD_INT 116
23933: PUSH
23934: LD_INT 117
23936: PUSH
23937: LD_INT 118
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: ST_TO_ADDR
23963: GO 24738
23965: LD_INT 16
23967: DOUBLE
23968: EQUAL
23969: IFTRUE 23973
23971: GO 24109
23973: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23974: LD_ADDR_VAR 0 2
23978: PUSH
23979: LD_INT 2
23981: PUSH
23982: LD_INT 4
23984: PUSH
23985: LD_INT 5
23987: PUSH
23988: LD_INT 7
23990: PUSH
23991: LD_INT 11
23993: PUSH
23994: LD_INT 12
23996: PUSH
23997: LD_INT 15
23999: PUSH
24000: LD_INT 16
24002: PUSH
24003: LD_INT 20
24005: PUSH
24006: LD_INT 21
24008: PUSH
24009: LD_INT 22
24011: PUSH
24012: LD_INT 23
24014: PUSH
24015: LD_INT 25
24017: PUSH
24018: LD_INT 26
24020: PUSH
24021: LD_INT 30
24023: PUSH
24024: LD_INT 31
24026: PUSH
24027: LD_INT 32
24029: PUSH
24030: LD_INT 33
24032: PUSH
24033: LD_INT 34
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 101
24059: PUSH
24060: LD_INT 102
24062: PUSH
24063: LD_INT 103
24065: PUSH
24066: LD_INT 106
24068: PUSH
24069: LD_INT 108
24071: PUSH
24072: LD_INT 112
24074: PUSH
24075: LD_INT 113
24077: PUSH
24078: LD_INT 114
24080: PUSH
24081: LD_INT 116
24083: PUSH
24084: LD_INT 117
24086: PUSH
24087: LD_INT 118
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: ST_TO_ADDR
24107: GO 24738
24109: LD_INT 17
24111: DOUBLE
24112: EQUAL
24113: IFTRUE 24117
24115: GO 24341
24117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24118: LD_ADDR_VAR 0 2
24122: PUSH
24123: LD_INT 1
24125: PUSH
24126: LD_INT 2
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: LD_INT 4
24134: PUSH
24135: LD_INT 5
24137: PUSH
24138: LD_INT 6
24140: PUSH
24141: LD_INT 7
24143: PUSH
24144: LD_INT 8
24146: PUSH
24147: LD_INT 9
24149: PUSH
24150: LD_INT 10
24152: PUSH
24153: LD_INT 11
24155: PUSH
24156: LD_INT 12
24158: PUSH
24159: LD_INT 13
24161: PUSH
24162: LD_INT 14
24164: PUSH
24165: LD_INT 15
24167: PUSH
24168: LD_INT 16
24170: PUSH
24171: LD_INT 17
24173: PUSH
24174: LD_INT 18
24176: PUSH
24177: LD_INT 19
24179: PUSH
24180: LD_INT 20
24182: PUSH
24183: LD_INT 21
24185: PUSH
24186: LD_INT 22
24188: PUSH
24189: LD_INT 23
24191: PUSH
24192: LD_INT 24
24194: PUSH
24195: LD_INT 25
24197: PUSH
24198: LD_INT 26
24200: PUSH
24201: LD_INT 27
24203: PUSH
24204: LD_INT 28
24206: PUSH
24207: LD_INT 29
24209: PUSH
24210: LD_INT 30
24212: PUSH
24213: LD_INT 31
24215: PUSH
24216: LD_INT 32
24218: PUSH
24219: LD_INT 33
24221: PUSH
24222: LD_INT 34
24224: PUSH
24225: LD_INT 36
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 101
24267: PUSH
24268: LD_INT 102
24270: PUSH
24271: LD_INT 103
24273: PUSH
24274: LD_INT 104
24276: PUSH
24277: LD_INT 105
24279: PUSH
24280: LD_INT 106
24282: PUSH
24283: LD_INT 107
24285: PUSH
24286: LD_INT 108
24288: PUSH
24289: LD_INT 109
24291: PUSH
24292: LD_INT 110
24294: PUSH
24295: LD_INT 111
24297: PUSH
24298: LD_INT 112
24300: PUSH
24301: LD_INT 113
24303: PUSH
24304: LD_INT 114
24306: PUSH
24307: LD_INT 116
24309: PUSH
24310: LD_INT 117
24312: PUSH
24313: LD_INT 118
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: ST_TO_ADDR
24339: GO 24738
24341: LD_INT 18
24343: DOUBLE
24344: EQUAL
24345: IFTRUE 24349
24347: GO 24497
24349: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24350: LD_ADDR_VAR 0 2
24354: PUSH
24355: LD_INT 2
24357: PUSH
24358: LD_INT 4
24360: PUSH
24361: LD_INT 5
24363: PUSH
24364: LD_INT 7
24366: PUSH
24367: LD_INT 11
24369: PUSH
24370: LD_INT 12
24372: PUSH
24373: LD_INT 15
24375: PUSH
24376: LD_INT 16
24378: PUSH
24379: LD_INT 20
24381: PUSH
24382: LD_INT 21
24384: PUSH
24385: LD_INT 22
24387: PUSH
24388: LD_INT 23
24390: PUSH
24391: LD_INT 25
24393: PUSH
24394: LD_INT 26
24396: PUSH
24397: LD_INT 30
24399: PUSH
24400: LD_INT 31
24402: PUSH
24403: LD_INT 32
24405: PUSH
24406: LD_INT 33
24408: PUSH
24409: LD_INT 34
24411: PUSH
24412: LD_INT 35
24414: PUSH
24415: LD_INT 36
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 101
24443: PUSH
24444: LD_INT 102
24446: PUSH
24447: LD_INT 103
24449: PUSH
24450: LD_INT 106
24452: PUSH
24453: LD_INT 108
24455: PUSH
24456: LD_INT 112
24458: PUSH
24459: LD_INT 113
24461: PUSH
24462: LD_INT 114
24464: PUSH
24465: LD_INT 115
24467: PUSH
24468: LD_INT 116
24470: PUSH
24471: LD_INT 117
24473: PUSH
24474: LD_INT 118
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: ST_TO_ADDR
24495: GO 24738
24497: LD_INT 19
24499: DOUBLE
24500: EQUAL
24501: IFTRUE 24505
24503: GO 24737
24505: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24506: LD_ADDR_VAR 0 2
24510: PUSH
24511: LD_INT 1
24513: PUSH
24514: LD_INT 2
24516: PUSH
24517: LD_INT 3
24519: PUSH
24520: LD_INT 4
24522: PUSH
24523: LD_INT 5
24525: PUSH
24526: LD_INT 6
24528: PUSH
24529: LD_INT 7
24531: PUSH
24532: LD_INT 8
24534: PUSH
24535: LD_INT 9
24537: PUSH
24538: LD_INT 10
24540: PUSH
24541: LD_INT 11
24543: PUSH
24544: LD_INT 12
24546: PUSH
24547: LD_INT 13
24549: PUSH
24550: LD_INT 14
24552: PUSH
24553: LD_INT 15
24555: PUSH
24556: LD_INT 16
24558: PUSH
24559: LD_INT 17
24561: PUSH
24562: LD_INT 18
24564: PUSH
24565: LD_INT 19
24567: PUSH
24568: LD_INT 20
24570: PUSH
24571: LD_INT 21
24573: PUSH
24574: LD_INT 22
24576: PUSH
24577: LD_INT 23
24579: PUSH
24580: LD_INT 24
24582: PUSH
24583: LD_INT 25
24585: PUSH
24586: LD_INT 26
24588: PUSH
24589: LD_INT 27
24591: PUSH
24592: LD_INT 28
24594: PUSH
24595: LD_INT 29
24597: PUSH
24598: LD_INT 30
24600: PUSH
24601: LD_INT 31
24603: PUSH
24604: LD_INT 32
24606: PUSH
24607: LD_INT 33
24609: PUSH
24610: LD_INT 34
24612: PUSH
24613: LD_INT 35
24615: PUSH
24616: LD_INT 36
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 101
24659: PUSH
24660: LD_INT 102
24662: PUSH
24663: LD_INT 103
24665: PUSH
24666: LD_INT 104
24668: PUSH
24669: LD_INT 105
24671: PUSH
24672: LD_INT 106
24674: PUSH
24675: LD_INT 107
24677: PUSH
24678: LD_INT 108
24680: PUSH
24681: LD_INT 109
24683: PUSH
24684: LD_INT 110
24686: PUSH
24687: LD_INT 111
24689: PUSH
24690: LD_INT 112
24692: PUSH
24693: LD_INT 113
24695: PUSH
24696: LD_INT 114
24698: PUSH
24699: LD_INT 115
24701: PUSH
24702: LD_INT 116
24704: PUSH
24705: LD_INT 117
24707: PUSH
24708: LD_INT 118
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: ST_TO_ADDR
24735: GO 24738
24737: POP
// end else
24738: GO 24969
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24740: LD_ADDR_VAR 0 2
24744: PUSH
24745: LD_INT 1
24747: PUSH
24748: LD_INT 2
24750: PUSH
24751: LD_INT 3
24753: PUSH
24754: LD_INT 4
24756: PUSH
24757: LD_INT 5
24759: PUSH
24760: LD_INT 6
24762: PUSH
24763: LD_INT 7
24765: PUSH
24766: LD_INT 8
24768: PUSH
24769: LD_INT 9
24771: PUSH
24772: LD_INT 10
24774: PUSH
24775: LD_INT 11
24777: PUSH
24778: LD_INT 12
24780: PUSH
24781: LD_INT 13
24783: PUSH
24784: LD_INT 14
24786: PUSH
24787: LD_INT 15
24789: PUSH
24790: LD_INT 16
24792: PUSH
24793: LD_INT 17
24795: PUSH
24796: LD_INT 18
24798: PUSH
24799: LD_INT 19
24801: PUSH
24802: LD_INT 20
24804: PUSH
24805: LD_INT 21
24807: PUSH
24808: LD_INT 22
24810: PUSH
24811: LD_INT 23
24813: PUSH
24814: LD_INT 24
24816: PUSH
24817: LD_INT 25
24819: PUSH
24820: LD_INT 26
24822: PUSH
24823: LD_INT 27
24825: PUSH
24826: LD_INT 28
24828: PUSH
24829: LD_INT 29
24831: PUSH
24832: LD_INT 30
24834: PUSH
24835: LD_INT 31
24837: PUSH
24838: LD_INT 32
24840: PUSH
24841: LD_INT 33
24843: PUSH
24844: LD_INT 34
24846: PUSH
24847: LD_INT 35
24849: PUSH
24850: LD_INT 36
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 101
24893: PUSH
24894: LD_INT 102
24896: PUSH
24897: LD_INT 103
24899: PUSH
24900: LD_INT 104
24902: PUSH
24903: LD_INT 105
24905: PUSH
24906: LD_INT 106
24908: PUSH
24909: LD_INT 107
24911: PUSH
24912: LD_INT 108
24914: PUSH
24915: LD_INT 109
24917: PUSH
24918: LD_INT 110
24920: PUSH
24921: LD_INT 111
24923: PUSH
24924: LD_INT 112
24926: PUSH
24927: LD_INT 113
24929: PUSH
24930: LD_INT 114
24932: PUSH
24933: LD_INT 115
24935: PUSH
24936: LD_INT 116
24938: PUSH
24939: LD_INT 117
24941: PUSH
24942: LD_INT 118
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: ST_TO_ADDR
// if result then
24969: LD_VAR 0 2
24973: IFFALSE 25759
// begin normal :=  ;
24975: LD_ADDR_VAR 0 5
24979: PUSH
24980: LD_STRING 
24982: ST_TO_ADDR
// hardcore :=  ;
24983: LD_ADDR_VAR 0 6
24987: PUSH
24988: LD_STRING 
24990: ST_TO_ADDR
// active :=  ;
24991: LD_ADDR_VAR 0 7
24995: PUSH
24996: LD_STRING 
24998: ST_TO_ADDR
// for i = 1 to normalCounter do
24999: LD_ADDR_VAR 0 8
25003: PUSH
25004: DOUBLE
25005: LD_INT 1
25007: DEC
25008: ST_TO_ADDR
25009: LD_EXP 52
25013: PUSH
25014: FOR_TO
25015: IFFALSE 25116
// begin tmp := 0 ;
25017: LD_ADDR_VAR 0 3
25021: PUSH
25022: LD_STRING 0
25024: ST_TO_ADDR
// if result [ 1 ] then
25025: LD_VAR 0 2
25029: PUSH
25030: LD_INT 1
25032: ARRAY
25033: IFFALSE 25098
// if result [ 1 ] [ 1 ] = i then
25035: LD_VAR 0 2
25039: PUSH
25040: LD_INT 1
25042: ARRAY
25043: PUSH
25044: LD_INT 1
25046: ARRAY
25047: PUSH
25048: LD_VAR 0 8
25052: EQUAL
25053: IFFALSE 25098
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25055: LD_ADDR_VAR 0 2
25059: PUSH
25060: LD_VAR 0 2
25064: PPUSH
25065: LD_INT 1
25067: PPUSH
25068: LD_VAR 0 2
25072: PUSH
25073: LD_INT 1
25075: ARRAY
25076: PPUSH
25077: LD_INT 1
25079: PPUSH
25080: CALL_OW 3
25084: PPUSH
25085: CALL_OW 1
25089: ST_TO_ADDR
// tmp := 1 ;
25090: LD_ADDR_VAR 0 3
25094: PUSH
25095: LD_STRING 1
25097: ST_TO_ADDR
// end ; normal := normal & tmp ;
25098: LD_ADDR_VAR 0 5
25102: PUSH
25103: LD_VAR 0 5
25107: PUSH
25108: LD_VAR 0 3
25112: STR
25113: ST_TO_ADDR
// end ;
25114: GO 25014
25116: POP
25117: POP
// for i = 1 to hardcoreCounter do
25118: LD_ADDR_VAR 0 8
25122: PUSH
25123: DOUBLE
25124: LD_INT 1
25126: DEC
25127: ST_TO_ADDR
25128: LD_EXP 53
25132: PUSH
25133: FOR_TO
25134: IFFALSE 25239
// begin tmp := 0 ;
25136: LD_ADDR_VAR 0 3
25140: PUSH
25141: LD_STRING 0
25143: ST_TO_ADDR
// if result [ 2 ] then
25144: LD_VAR 0 2
25148: PUSH
25149: LD_INT 2
25151: ARRAY
25152: IFFALSE 25221
// if result [ 2 ] [ 1 ] = 100 + i then
25154: LD_VAR 0 2
25158: PUSH
25159: LD_INT 2
25161: ARRAY
25162: PUSH
25163: LD_INT 1
25165: ARRAY
25166: PUSH
25167: LD_INT 100
25169: PUSH
25170: LD_VAR 0 8
25174: PLUS
25175: EQUAL
25176: IFFALSE 25221
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25178: LD_ADDR_VAR 0 2
25182: PUSH
25183: LD_VAR 0 2
25187: PPUSH
25188: LD_INT 2
25190: PPUSH
25191: LD_VAR 0 2
25195: PUSH
25196: LD_INT 2
25198: ARRAY
25199: PPUSH
25200: LD_INT 1
25202: PPUSH
25203: CALL_OW 3
25207: PPUSH
25208: CALL_OW 1
25212: ST_TO_ADDR
// tmp := 1 ;
25213: LD_ADDR_VAR 0 3
25217: PUSH
25218: LD_STRING 1
25220: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25221: LD_ADDR_VAR 0 6
25225: PUSH
25226: LD_VAR 0 6
25230: PUSH
25231: LD_VAR 0 3
25235: STR
25236: ST_TO_ADDR
// end ;
25237: GO 25133
25239: POP
25240: POP
// if isGameLoad then
25241: LD_VAR 0 1
25245: IFFALSE 25720
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25247: LD_ADDR_VAR 0 4
25251: PUSH
25252: LD_EXP 56
25256: PUSH
25257: LD_EXP 55
25261: PUSH
25262: LD_EXP 57
25266: PUSH
25267: LD_EXP 54
25271: PUSH
25272: LD_EXP 58
25276: PUSH
25277: LD_EXP 59
25281: PUSH
25282: LD_EXP 60
25286: PUSH
25287: LD_EXP 61
25291: PUSH
25292: LD_EXP 62
25296: PUSH
25297: LD_EXP 63
25301: PUSH
25302: LD_EXP 64
25306: PUSH
25307: LD_EXP 65
25311: PUSH
25312: LD_EXP 66
25316: PUSH
25317: LD_EXP 67
25321: PUSH
25322: LD_EXP 75
25326: PUSH
25327: LD_EXP 76
25331: PUSH
25332: LD_EXP 77
25336: PUSH
25337: LD_EXP 78
25341: PUSH
25342: LD_EXP 80
25346: PUSH
25347: LD_EXP 81
25351: PUSH
25352: LD_EXP 82
25356: PUSH
25357: LD_EXP 85
25361: PUSH
25362: LD_EXP 87
25366: PUSH
25367: LD_EXP 88
25371: PUSH
25372: LD_EXP 89
25376: PUSH
25377: LD_EXP 91
25381: PUSH
25382: LD_EXP 92
25386: PUSH
25387: LD_EXP 95
25391: PUSH
25392: LD_EXP 96
25396: PUSH
25397: LD_EXP 97
25401: PUSH
25402: LD_EXP 98
25406: PUSH
25407: LD_EXP 99
25411: PUSH
25412: LD_EXP 100
25416: PUSH
25417: LD_EXP 101
25421: PUSH
25422: LD_EXP 102
25426: PUSH
25427: LD_EXP 103
25431: PUSH
25432: LD_EXP 68
25436: PUSH
25437: LD_EXP 69
25441: PUSH
25442: LD_EXP 72
25446: PUSH
25447: LD_EXP 73
25451: PUSH
25452: LD_EXP 74
25456: PUSH
25457: LD_EXP 70
25461: PUSH
25462: LD_EXP 71
25466: PUSH
25467: LD_EXP 79
25471: PUSH
25472: LD_EXP 83
25476: PUSH
25477: LD_EXP 84
25481: PUSH
25482: LD_EXP 86
25486: PUSH
25487: LD_EXP 90
25491: PUSH
25492: LD_EXP 93
25496: PUSH
25497: LD_EXP 94
25501: PUSH
25502: LD_EXP 104
25506: PUSH
25507: LD_EXP 105
25511: PUSH
25512: LD_EXP 106
25516: PUSH
25517: LD_EXP 107
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: ST_TO_ADDR
// tmp :=  ;
25578: LD_ADDR_VAR 0 3
25582: PUSH
25583: LD_STRING 
25585: ST_TO_ADDR
// for i = 1 to normalCounter do
25586: LD_ADDR_VAR 0 8
25590: PUSH
25591: DOUBLE
25592: LD_INT 1
25594: DEC
25595: ST_TO_ADDR
25596: LD_EXP 52
25600: PUSH
25601: FOR_TO
25602: IFFALSE 25638
// begin if flags [ i ] then
25604: LD_VAR 0 4
25608: PUSH
25609: LD_VAR 0 8
25613: ARRAY
25614: IFFALSE 25636
// tmp := tmp & i & ; ;
25616: LD_ADDR_VAR 0 3
25620: PUSH
25621: LD_VAR 0 3
25625: PUSH
25626: LD_VAR 0 8
25630: STR
25631: PUSH
25632: LD_STRING ;
25634: STR
25635: ST_TO_ADDR
// end ;
25636: GO 25601
25638: POP
25639: POP
// for i = 1 to hardcoreCounter do
25640: LD_ADDR_VAR 0 8
25644: PUSH
25645: DOUBLE
25646: LD_INT 1
25648: DEC
25649: ST_TO_ADDR
25650: LD_EXP 53
25654: PUSH
25655: FOR_TO
25656: IFFALSE 25702
// begin if flags [ normalCounter + i ] then
25658: LD_VAR 0 4
25662: PUSH
25663: LD_EXP 52
25667: PUSH
25668: LD_VAR 0 8
25672: PLUS
25673: ARRAY
25674: IFFALSE 25700
// tmp := tmp & ( 100 + i ) & ; ;
25676: LD_ADDR_VAR 0 3
25680: PUSH
25681: LD_VAR 0 3
25685: PUSH
25686: LD_INT 100
25688: PUSH
25689: LD_VAR 0 8
25693: PLUS
25694: STR
25695: PUSH
25696: LD_STRING ;
25698: STR
25699: ST_TO_ADDR
// end ;
25700: GO 25655
25702: POP
25703: POP
// if tmp then
25704: LD_VAR 0 3
25708: IFFALSE 25720
// active := tmp ;
25710: LD_ADDR_VAR 0 7
25714: PUSH
25715: LD_VAR 0 3
25719: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25720: LD_STRING getStreamItemsFromMission("
25722: PUSH
25723: LD_VAR 0 5
25727: STR
25728: PUSH
25729: LD_STRING ","
25731: STR
25732: PUSH
25733: LD_VAR 0 6
25737: STR
25738: PUSH
25739: LD_STRING ","
25741: STR
25742: PUSH
25743: LD_VAR 0 7
25747: STR
25748: PUSH
25749: LD_STRING ")
25751: STR
25752: PPUSH
25753: CALL_OW 559
// end else
25757: GO 25766
// ToLua ( getStreamItemsFromMission("","","") ) ;
25759: LD_STRING getStreamItemsFromMission("","","")
25761: PPUSH
25762: CALL_OW 559
// end ;
25766: LD_VAR 0 2
25770: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25771: LD_EXP 51
25775: PUSH
25776: LD_EXP 56
25780: AND
25781: IFFALSE 25905
25783: GO 25785
25785: DISABLE
25786: LD_INT 0
25788: PPUSH
25789: PPUSH
// begin enable ;
25790: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25791: LD_ADDR_VAR 0 2
25795: PUSH
25796: LD_INT 22
25798: PUSH
25799: LD_OWVAR 2
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 2
25810: PUSH
25811: LD_INT 34
25813: PUSH
25814: LD_INT 7
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 34
25823: PUSH
25824: LD_INT 45
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 34
25833: PUSH
25834: LD_INT 28
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 34
25843: PUSH
25844: LD_INT 47
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PPUSH
25862: CALL_OW 69
25866: ST_TO_ADDR
// if not tmp then
25867: LD_VAR 0 2
25871: NOT
25872: IFFALSE 25876
// exit ;
25874: GO 25905
// for i in tmp do
25876: LD_ADDR_VAR 0 1
25880: PUSH
25881: LD_VAR 0 2
25885: PUSH
25886: FOR_IN
25887: IFFALSE 25903
// begin SetLives ( i , 0 ) ;
25889: LD_VAR 0 1
25893: PPUSH
25894: LD_INT 0
25896: PPUSH
25897: CALL_OW 234
// end ;
25901: GO 25886
25903: POP
25904: POP
// end ;
25905: PPOPN 2
25907: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25908: LD_EXP 51
25912: PUSH
25913: LD_EXP 57
25917: AND
25918: IFFALSE 26002
25920: GO 25922
25922: DISABLE
25923: LD_INT 0
25925: PPUSH
25926: PPUSH
// begin enable ;
25927: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25928: LD_ADDR_VAR 0 2
25932: PUSH
25933: LD_INT 22
25935: PUSH
25936: LD_OWVAR 2
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 32
25947: PUSH
25948: LD_INT 3
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PPUSH
25959: CALL_OW 69
25963: ST_TO_ADDR
// if not tmp then
25964: LD_VAR 0 2
25968: NOT
25969: IFFALSE 25973
// exit ;
25971: GO 26002
// for i in tmp do
25973: LD_ADDR_VAR 0 1
25977: PUSH
25978: LD_VAR 0 2
25982: PUSH
25983: FOR_IN
25984: IFFALSE 26000
// begin SetLives ( i , 0 ) ;
25986: LD_VAR 0 1
25990: PPUSH
25991: LD_INT 0
25993: PPUSH
25994: CALL_OW 234
// end ;
25998: GO 25983
26000: POP
26001: POP
// end ;
26002: PPOPN 2
26004: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26005: LD_EXP 51
26009: PUSH
26010: LD_EXP 54
26014: AND
26015: IFFALSE 26108
26017: GO 26019
26019: DISABLE
26020: LD_INT 0
26022: PPUSH
// begin enable ;
26023: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26024: LD_ADDR_VAR 0 1
26028: PUSH
26029: LD_INT 22
26031: PUSH
26032: LD_OWVAR 2
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: LD_INT 25
26046: PUSH
26047: LD_INT 5
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 25
26056: PUSH
26057: LD_INT 9
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 25
26066: PUSH
26067: LD_INT 8
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PPUSH
26084: CALL_OW 69
26088: PUSH
26089: FOR_IN
26090: IFFALSE 26106
// begin SetClass ( i , 1 ) ;
26092: LD_VAR 0 1
26096: PPUSH
26097: LD_INT 1
26099: PPUSH
26100: CALL_OW 336
// end ;
26104: GO 26089
26106: POP
26107: POP
// end ;
26108: PPOPN 1
26110: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26111: LD_EXP 51
26115: PUSH
26116: LD_EXP 55
26120: AND
26121: PUSH
26122: LD_OWVAR 65
26126: PUSH
26127: LD_INT 7
26129: LESS
26130: AND
26131: IFFALSE 26145
26133: GO 26135
26135: DISABLE
// begin enable ;
26136: ENABLE
// game_speed := 7 ;
26137: LD_ADDR_OWVAR 65
26141: PUSH
26142: LD_INT 7
26144: ST_TO_ADDR
// end ;
26145: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26146: LD_EXP 51
26150: PUSH
26151: LD_EXP 58
26155: AND
26156: IFFALSE 26358
26158: GO 26160
26160: DISABLE
26161: LD_INT 0
26163: PPUSH
26164: PPUSH
26165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26166: LD_ADDR_VAR 0 3
26170: PUSH
26171: LD_INT 81
26173: PUSH
26174: LD_OWVAR 2
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 21
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PPUSH
26197: CALL_OW 69
26201: ST_TO_ADDR
// if not tmp then
26202: LD_VAR 0 3
26206: NOT
26207: IFFALSE 26211
// exit ;
26209: GO 26358
// if tmp > 5 then
26211: LD_VAR 0 3
26215: PUSH
26216: LD_INT 5
26218: GREATER
26219: IFFALSE 26231
// k := 5 else
26221: LD_ADDR_VAR 0 2
26225: PUSH
26226: LD_INT 5
26228: ST_TO_ADDR
26229: GO 26241
// k := tmp ;
26231: LD_ADDR_VAR 0 2
26235: PUSH
26236: LD_VAR 0 3
26240: ST_TO_ADDR
// for i := 1 to k do
26241: LD_ADDR_VAR 0 1
26245: PUSH
26246: DOUBLE
26247: LD_INT 1
26249: DEC
26250: ST_TO_ADDR
26251: LD_VAR 0 2
26255: PUSH
26256: FOR_TO
26257: IFFALSE 26356
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26259: LD_VAR 0 3
26263: PUSH
26264: LD_VAR 0 1
26268: ARRAY
26269: PPUSH
26270: LD_VAR 0 1
26274: PUSH
26275: LD_INT 4
26277: MOD
26278: PUSH
26279: LD_INT 1
26281: PLUS
26282: PPUSH
26283: CALL_OW 259
26287: PUSH
26288: LD_INT 10
26290: LESS
26291: IFFALSE 26354
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26293: LD_VAR 0 3
26297: PUSH
26298: LD_VAR 0 1
26302: ARRAY
26303: PPUSH
26304: LD_VAR 0 1
26308: PUSH
26309: LD_INT 4
26311: MOD
26312: PUSH
26313: LD_INT 1
26315: PLUS
26316: PPUSH
26317: LD_VAR 0 3
26321: PUSH
26322: LD_VAR 0 1
26326: ARRAY
26327: PPUSH
26328: LD_VAR 0 1
26332: PUSH
26333: LD_INT 4
26335: MOD
26336: PUSH
26337: LD_INT 1
26339: PLUS
26340: PPUSH
26341: CALL_OW 259
26345: PUSH
26346: LD_INT 1
26348: PLUS
26349: PPUSH
26350: CALL_OW 237
26354: GO 26256
26356: POP
26357: POP
// end ;
26358: PPOPN 3
26360: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26361: LD_EXP 51
26365: PUSH
26366: LD_EXP 59
26370: AND
26371: IFFALSE 26391
26373: GO 26375
26375: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26376: LD_INT 4
26378: PPUSH
26379: LD_OWVAR 2
26383: PPUSH
26384: LD_INT 0
26386: PPUSH
26387: CALL_OW 324
26391: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26392: LD_EXP 51
26396: PUSH
26397: LD_EXP 88
26401: AND
26402: IFFALSE 26422
26404: GO 26406
26406: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26407: LD_INT 19
26409: PPUSH
26410: LD_OWVAR 2
26414: PPUSH
26415: LD_INT 0
26417: PPUSH
26418: CALL_OW 324
26422: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26423: LD_EXP 51
26427: PUSH
26428: LD_EXP 60
26432: AND
26433: IFFALSE 26535
26435: GO 26437
26437: DISABLE
26438: LD_INT 0
26440: PPUSH
26441: PPUSH
// begin enable ;
26442: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26443: LD_ADDR_VAR 0 2
26447: PUSH
26448: LD_INT 22
26450: PUSH
26451: LD_OWVAR 2
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: LD_INT 34
26465: PUSH
26466: LD_INT 11
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 34
26475: PUSH
26476: LD_INT 30
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: LIST
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PPUSH
26492: CALL_OW 69
26496: ST_TO_ADDR
// if not tmp then
26497: LD_VAR 0 2
26501: NOT
26502: IFFALSE 26506
// exit ;
26504: GO 26535
// for i in tmp do
26506: LD_ADDR_VAR 0 1
26510: PUSH
26511: LD_VAR 0 2
26515: PUSH
26516: FOR_IN
26517: IFFALSE 26533
// begin SetLives ( i , 0 ) ;
26519: LD_VAR 0 1
26523: PPUSH
26524: LD_INT 0
26526: PPUSH
26527: CALL_OW 234
// end ;
26531: GO 26516
26533: POP
26534: POP
// end ;
26535: PPOPN 2
26537: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26538: LD_EXP 51
26542: PUSH
26543: LD_EXP 61
26547: AND
26548: IFFALSE 26568
26550: GO 26552
26552: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26553: LD_INT 32
26555: PPUSH
26556: LD_OWVAR 2
26560: PPUSH
26561: LD_INT 0
26563: PPUSH
26564: CALL_OW 324
26568: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26569: LD_EXP 51
26573: PUSH
26574: LD_EXP 62
26578: AND
26579: IFFALSE 26760
26581: GO 26583
26583: DISABLE
26584: LD_INT 0
26586: PPUSH
26587: PPUSH
26588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26589: LD_ADDR_VAR 0 2
26593: PUSH
26594: LD_INT 22
26596: PUSH
26597: LD_OWVAR 2
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 33
26608: PUSH
26609: LD_INT 3
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PPUSH
26620: CALL_OW 69
26624: ST_TO_ADDR
// if not tmp then
26625: LD_VAR 0 2
26629: NOT
26630: IFFALSE 26634
// exit ;
26632: GO 26760
// side := 0 ;
26634: LD_ADDR_VAR 0 3
26638: PUSH
26639: LD_INT 0
26641: ST_TO_ADDR
// for i := 1 to 8 do
26642: LD_ADDR_VAR 0 1
26646: PUSH
26647: DOUBLE
26648: LD_INT 1
26650: DEC
26651: ST_TO_ADDR
26652: LD_INT 8
26654: PUSH
26655: FOR_TO
26656: IFFALSE 26704
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26658: LD_OWVAR 2
26662: PUSH
26663: LD_VAR 0 1
26667: NONEQUAL
26668: PUSH
26669: LD_OWVAR 2
26673: PPUSH
26674: LD_VAR 0 1
26678: PPUSH
26679: CALL_OW 81
26683: PUSH
26684: LD_INT 2
26686: EQUAL
26687: AND
26688: IFFALSE 26702
// begin side := i ;
26690: LD_ADDR_VAR 0 3
26694: PUSH
26695: LD_VAR 0 1
26699: ST_TO_ADDR
// break ;
26700: GO 26704
// end ;
26702: GO 26655
26704: POP
26705: POP
// if not side then
26706: LD_VAR 0 3
26710: NOT
26711: IFFALSE 26715
// exit ;
26713: GO 26760
// for i := 1 to tmp do
26715: LD_ADDR_VAR 0 1
26719: PUSH
26720: DOUBLE
26721: LD_INT 1
26723: DEC
26724: ST_TO_ADDR
26725: LD_VAR 0 2
26729: PUSH
26730: FOR_TO
26731: IFFALSE 26758
// if Prob ( 60 ) then
26733: LD_INT 60
26735: PPUSH
26736: CALL_OW 13
26740: IFFALSE 26756
// SetSide ( i , side ) ;
26742: LD_VAR 0 1
26746: PPUSH
26747: LD_VAR 0 3
26751: PPUSH
26752: CALL_OW 235
26756: GO 26730
26758: POP
26759: POP
// end ;
26760: PPOPN 3
26762: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26763: LD_EXP 51
26767: PUSH
26768: LD_EXP 64
26772: AND
26773: IFFALSE 26892
26775: GO 26777
26777: DISABLE
26778: LD_INT 0
26780: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26781: LD_ADDR_VAR 0 1
26785: PUSH
26786: LD_INT 22
26788: PUSH
26789: LD_OWVAR 2
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 21
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 3
26810: PUSH
26811: LD_INT 23
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: LIST
26829: PPUSH
26830: CALL_OW 69
26834: PUSH
26835: FOR_IN
26836: IFFALSE 26890
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26838: LD_VAR 0 1
26842: PPUSH
26843: CALL_OW 257
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: LD_INT 2
26853: PUSH
26854: LD_INT 3
26856: PUSH
26857: LD_INT 4
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: IN
26866: IFFALSE 26888
// SetClass ( un , rand ( 1 , 4 ) ) ;
26868: LD_VAR 0 1
26872: PPUSH
26873: LD_INT 1
26875: PPUSH
26876: LD_INT 4
26878: PPUSH
26879: CALL_OW 12
26883: PPUSH
26884: CALL_OW 336
26888: GO 26835
26890: POP
26891: POP
// end ;
26892: PPOPN 1
26894: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26895: LD_EXP 51
26899: PUSH
26900: LD_EXP 63
26904: AND
26905: IFFALSE 26984
26907: GO 26909
26909: DISABLE
26910: LD_INT 0
26912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26913: LD_ADDR_VAR 0 1
26917: PUSH
26918: LD_INT 22
26920: PUSH
26921: LD_OWVAR 2
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 21
26932: PUSH
26933: LD_INT 3
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PPUSH
26944: CALL_OW 69
26948: ST_TO_ADDR
// if not tmp then
26949: LD_VAR 0 1
26953: NOT
26954: IFFALSE 26958
// exit ;
26956: GO 26984
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26958: LD_VAR 0 1
26962: PUSH
26963: LD_INT 1
26965: PPUSH
26966: LD_VAR 0 1
26970: PPUSH
26971: CALL_OW 12
26975: ARRAY
26976: PPUSH
26977: LD_INT 100
26979: PPUSH
26980: CALL_OW 234
// end ;
26984: PPOPN 1
26986: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26987: LD_EXP 51
26991: PUSH
26992: LD_EXP 65
26996: AND
26997: IFFALSE 27095
26999: GO 27001
27001: DISABLE
27002: LD_INT 0
27004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27005: LD_ADDR_VAR 0 1
27009: PUSH
27010: LD_INT 22
27012: PUSH
27013: LD_OWVAR 2
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 21
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PPUSH
27036: CALL_OW 69
27040: ST_TO_ADDR
// if not tmp then
27041: LD_VAR 0 1
27045: NOT
27046: IFFALSE 27050
// exit ;
27048: GO 27095
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27050: LD_VAR 0 1
27054: PUSH
27055: LD_INT 1
27057: PPUSH
27058: LD_VAR 0 1
27062: PPUSH
27063: CALL_OW 12
27067: ARRAY
27068: PPUSH
27069: LD_INT 1
27071: PPUSH
27072: LD_INT 4
27074: PPUSH
27075: CALL_OW 12
27079: PPUSH
27080: LD_INT 3000
27082: PPUSH
27083: LD_INT 9000
27085: PPUSH
27086: CALL_OW 12
27090: PPUSH
27091: CALL_OW 492
// end ;
27095: PPOPN 1
27097: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27098: LD_EXP 51
27102: PUSH
27103: LD_EXP 66
27107: AND
27108: IFFALSE 27128
27110: GO 27112
27112: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27113: LD_INT 1
27115: PPUSH
27116: LD_OWVAR 2
27120: PPUSH
27121: LD_INT 0
27123: PPUSH
27124: CALL_OW 324
27128: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27129: LD_EXP 51
27133: PUSH
27134: LD_EXP 67
27138: AND
27139: IFFALSE 27222
27141: GO 27143
27143: DISABLE
27144: LD_INT 0
27146: PPUSH
27147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27148: LD_ADDR_VAR 0 2
27152: PUSH
27153: LD_INT 22
27155: PUSH
27156: LD_OWVAR 2
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 21
27167: PUSH
27168: LD_INT 3
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PPUSH
27179: CALL_OW 69
27183: ST_TO_ADDR
// if not tmp then
27184: LD_VAR 0 2
27188: NOT
27189: IFFALSE 27193
// exit ;
27191: GO 27222
// for i in tmp do
27193: LD_ADDR_VAR 0 1
27197: PUSH
27198: LD_VAR 0 2
27202: PUSH
27203: FOR_IN
27204: IFFALSE 27220
// SetBLevel ( i , 10 ) ;
27206: LD_VAR 0 1
27210: PPUSH
27211: LD_INT 10
27213: PPUSH
27214: CALL_OW 241
27218: GO 27203
27220: POP
27221: POP
// end ;
27222: PPOPN 2
27224: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27225: LD_EXP 51
27229: PUSH
27230: LD_EXP 68
27234: AND
27235: IFFALSE 27346
27237: GO 27239
27239: DISABLE
27240: LD_INT 0
27242: PPUSH
27243: PPUSH
27244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27245: LD_ADDR_VAR 0 3
27249: PUSH
27250: LD_INT 22
27252: PUSH
27253: LD_OWVAR 2
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 25
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PPUSH
27276: CALL_OW 69
27280: ST_TO_ADDR
// if not tmp then
27281: LD_VAR 0 3
27285: NOT
27286: IFFALSE 27290
// exit ;
27288: GO 27346
// un := tmp [ rand ( 1 , tmp ) ] ;
27290: LD_ADDR_VAR 0 2
27294: PUSH
27295: LD_VAR 0 3
27299: PUSH
27300: LD_INT 1
27302: PPUSH
27303: LD_VAR 0 3
27307: PPUSH
27308: CALL_OW 12
27312: ARRAY
27313: ST_TO_ADDR
// if Crawls ( un ) then
27314: LD_VAR 0 2
27318: PPUSH
27319: CALL_OW 318
27323: IFFALSE 27334
// ComWalk ( un ) ;
27325: LD_VAR 0 2
27329: PPUSH
27330: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27334: LD_VAR 0 2
27338: PPUSH
27339: LD_INT 5
27341: PPUSH
27342: CALL_OW 336
// end ;
27346: PPOPN 3
27348: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27349: LD_EXP 51
27353: PUSH
27354: LD_EXP 69
27358: AND
27359: PUSH
27360: LD_OWVAR 67
27364: PUSH
27365: LD_INT 4
27367: LESS
27368: AND
27369: IFFALSE 27388
27371: GO 27373
27373: DISABLE
// begin Difficulty := Difficulty + 1 ;
27374: LD_ADDR_OWVAR 67
27378: PUSH
27379: LD_OWVAR 67
27383: PUSH
27384: LD_INT 1
27386: PLUS
27387: ST_TO_ADDR
// end ;
27388: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27389: LD_EXP 51
27393: PUSH
27394: LD_EXP 70
27398: AND
27399: IFFALSE 27502
27401: GO 27403
27403: DISABLE
27404: LD_INT 0
27406: PPUSH
// begin for i := 1 to 5 do
27407: LD_ADDR_VAR 0 1
27411: PUSH
27412: DOUBLE
27413: LD_INT 1
27415: DEC
27416: ST_TO_ADDR
27417: LD_INT 5
27419: PUSH
27420: FOR_TO
27421: IFFALSE 27500
// begin uc_nation := nation_nature ;
27423: LD_ADDR_OWVAR 21
27427: PUSH
27428: LD_INT 0
27430: ST_TO_ADDR
// uc_side := 0 ;
27431: LD_ADDR_OWVAR 20
27435: PUSH
27436: LD_INT 0
27438: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27439: LD_ADDR_OWVAR 29
27443: PUSH
27444: LD_INT 12
27446: PUSH
27447: LD_INT 12
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: ST_TO_ADDR
// hc_agressivity := 20 ;
27454: LD_ADDR_OWVAR 35
27458: PUSH
27459: LD_INT 20
27461: ST_TO_ADDR
// hc_class := class_tiger ;
27462: LD_ADDR_OWVAR 28
27466: PUSH
27467: LD_INT 14
27469: ST_TO_ADDR
// hc_gallery :=  ;
27470: LD_ADDR_OWVAR 33
27474: PUSH
27475: LD_STRING 
27477: ST_TO_ADDR
// hc_name :=  ;
27478: LD_ADDR_OWVAR 26
27482: PUSH
27483: LD_STRING 
27485: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27486: CALL_OW 44
27490: PPUSH
27491: LD_INT 0
27493: PPUSH
27494: CALL_OW 51
// end ;
27498: GO 27420
27500: POP
27501: POP
// end ;
27502: PPOPN 1
27504: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27505: LD_EXP 51
27509: PUSH
27510: LD_EXP 71
27514: AND
27515: IFFALSE 27524
27517: GO 27519
27519: DISABLE
// StreamSibBomb ;
27520: CALL 27525 0 0
27524: END
// export function StreamSibBomb ; var i , x , y ; begin
27525: LD_INT 0
27527: PPUSH
27528: PPUSH
27529: PPUSH
27530: PPUSH
// result := false ;
27531: LD_ADDR_VAR 0 1
27535: PUSH
27536: LD_INT 0
27538: ST_TO_ADDR
// for i := 1 to 16 do
27539: LD_ADDR_VAR 0 2
27543: PUSH
27544: DOUBLE
27545: LD_INT 1
27547: DEC
27548: ST_TO_ADDR
27549: LD_INT 16
27551: PUSH
27552: FOR_TO
27553: IFFALSE 27752
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27555: LD_ADDR_VAR 0 3
27559: PUSH
27560: LD_INT 10
27562: PUSH
27563: LD_INT 20
27565: PUSH
27566: LD_INT 30
27568: PUSH
27569: LD_INT 40
27571: PUSH
27572: LD_INT 50
27574: PUSH
27575: LD_INT 60
27577: PUSH
27578: LD_INT 70
27580: PUSH
27581: LD_INT 80
27583: PUSH
27584: LD_INT 90
27586: PUSH
27587: LD_INT 100
27589: PUSH
27590: LD_INT 110
27592: PUSH
27593: LD_INT 120
27595: PUSH
27596: LD_INT 130
27598: PUSH
27599: LD_INT 140
27601: PUSH
27602: LD_INT 150
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 1
27624: PPUSH
27625: LD_INT 15
27627: PPUSH
27628: CALL_OW 12
27632: ARRAY
27633: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27634: LD_ADDR_VAR 0 4
27638: PUSH
27639: LD_INT 10
27641: PUSH
27642: LD_INT 20
27644: PUSH
27645: LD_INT 30
27647: PUSH
27648: LD_INT 40
27650: PUSH
27651: LD_INT 50
27653: PUSH
27654: LD_INT 60
27656: PUSH
27657: LD_INT 70
27659: PUSH
27660: LD_INT 80
27662: PUSH
27663: LD_INT 90
27665: PUSH
27666: LD_INT 100
27668: PUSH
27669: LD_INT 110
27671: PUSH
27672: LD_INT 120
27674: PUSH
27675: LD_INT 130
27677: PUSH
27678: LD_INT 140
27680: PUSH
27681: LD_INT 150
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 1
27703: PPUSH
27704: LD_INT 15
27706: PPUSH
27707: CALL_OW 12
27711: ARRAY
27712: ST_TO_ADDR
// if ValidHex ( x , y ) then
27713: LD_VAR 0 3
27717: PPUSH
27718: LD_VAR 0 4
27722: PPUSH
27723: CALL_OW 488
27727: IFFALSE 27750
// begin result := [ x , y ] ;
27729: LD_ADDR_VAR 0 1
27733: PUSH
27734: LD_VAR 0 3
27738: PUSH
27739: LD_VAR 0 4
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: ST_TO_ADDR
// break ;
27748: GO 27752
// end ; end ;
27750: GO 27552
27752: POP
27753: POP
// if result then
27754: LD_VAR 0 1
27758: IFFALSE 27818
// begin ToLua ( playSibBomb() ) ;
27760: LD_STRING playSibBomb()
27762: PPUSH
27763: CALL_OW 559
// wait ( 0 0$14 ) ;
27767: LD_INT 490
27769: PPUSH
27770: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27774: LD_VAR 0 1
27778: PUSH
27779: LD_INT 1
27781: ARRAY
27782: PPUSH
27783: LD_VAR 0 1
27787: PUSH
27788: LD_INT 2
27790: ARRAY
27791: PPUSH
27792: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27796: LD_VAR 0 1
27800: PUSH
27801: LD_INT 1
27803: ARRAY
27804: PPUSH
27805: LD_VAR 0 1
27809: PUSH
27810: LD_INT 2
27812: ARRAY
27813: PPUSH
27814: CALL_OW 429
// end ; end ;
27818: LD_VAR 0 1
27822: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27823: LD_EXP 51
27827: PUSH
27828: LD_EXP 73
27832: AND
27833: IFFALSE 27845
27835: GO 27837
27837: DISABLE
// YouLost (  ) ;
27838: LD_STRING 
27840: PPUSH
27841: CALL_OW 104
27845: END
// every 0 0$1 trigger StreamModeActive and sFog do
27846: LD_EXP 51
27850: PUSH
27851: LD_EXP 72
27855: AND
27856: IFFALSE 27870
27858: GO 27860
27860: DISABLE
// FogOff ( your_side ) ;
27861: LD_OWVAR 2
27865: PPUSH
27866: CALL_OW 344
27870: END
// every 0 0$1 trigger StreamModeActive and sSun do
27871: LD_EXP 51
27875: PUSH
27876: LD_EXP 74
27880: AND
27881: IFFALSE 27909
27883: GO 27885
27885: DISABLE
// begin solar_recharge_percent := 0 ;
27886: LD_ADDR_OWVAR 79
27890: PUSH
27891: LD_INT 0
27893: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27894: LD_INT 10500
27896: PPUSH
27897: CALL_OW 67
// solar_recharge_percent := 100 ;
27901: LD_ADDR_OWVAR 79
27905: PUSH
27906: LD_INT 100
27908: ST_TO_ADDR
// end ;
27909: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27910: LD_EXP 51
27914: PUSH
27915: LD_EXP 75
27919: AND
27920: IFFALSE 28159
27922: GO 27924
27924: DISABLE
27925: LD_INT 0
27927: PPUSH
27928: PPUSH
27929: PPUSH
// begin tmp := [ ] ;
27930: LD_ADDR_VAR 0 3
27934: PUSH
27935: EMPTY
27936: ST_TO_ADDR
// for i := 1 to 6 do
27937: LD_ADDR_VAR 0 1
27941: PUSH
27942: DOUBLE
27943: LD_INT 1
27945: DEC
27946: ST_TO_ADDR
27947: LD_INT 6
27949: PUSH
27950: FOR_TO
27951: IFFALSE 28056
// begin uc_nation := nation_nature ;
27953: LD_ADDR_OWVAR 21
27957: PUSH
27958: LD_INT 0
27960: ST_TO_ADDR
// uc_side := 0 ;
27961: LD_ADDR_OWVAR 20
27965: PUSH
27966: LD_INT 0
27968: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27969: LD_ADDR_OWVAR 29
27973: PUSH
27974: LD_INT 12
27976: PUSH
27977: LD_INT 12
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: ST_TO_ADDR
// hc_agressivity := 20 ;
27984: LD_ADDR_OWVAR 35
27988: PUSH
27989: LD_INT 20
27991: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27992: LD_ADDR_OWVAR 28
27996: PUSH
27997: LD_INT 17
27999: ST_TO_ADDR
// hc_gallery :=  ;
28000: LD_ADDR_OWVAR 33
28004: PUSH
28005: LD_STRING 
28007: ST_TO_ADDR
// hc_name :=  ;
28008: LD_ADDR_OWVAR 26
28012: PUSH
28013: LD_STRING 
28015: ST_TO_ADDR
// un := CreateHuman ;
28016: LD_ADDR_VAR 0 2
28020: PUSH
28021: CALL_OW 44
28025: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28026: LD_VAR 0 2
28030: PPUSH
28031: LD_INT 1
28033: PPUSH
28034: CALL_OW 51
// tmp := tmp ^ un ;
28038: LD_ADDR_VAR 0 3
28042: PUSH
28043: LD_VAR 0 3
28047: PUSH
28048: LD_VAR 0 2
28052: ADD
28053: ST_TO_ADDR
// end ;
28054: GO 27950
28056: POP
28057: POP
// repeat wait ( 0 0$1 ) ;
28058: LD_INT 35
28060: PPUSH
28061: CALL_OW 67
// for un in tmp do
28065: LD_ADDR_VAR 0 2
28069: PUSH
28070: LD_VAR 0 3
28074: PUSH
28075: FOR_IN
28076: IFFALSE 28150
// begin if IsDead ( un ) then
28078: LD_VAR 0 2
28082: PPUSH
28083: CALL_OW 301
28087: IFFALSE 28107
// begin tmp := tmp diff un ;
28089: LD_ADDR_VAR 0 3
28093: PUSH
28094: LD_VAR 0 3
28098: PUSH
28099: LD_VAR 0 2
28103: DIFF
28104: ST_TO_ADDR
// continue ;
28105: GO 28075
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28107: LD_VAR 0 2
28111: PPUSH
28112: LD_INT 3
28114: PUSH
28115: LD_INT 22
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PPUSH
28129: CALL_OW 69
28133: PPUSH
28134: LD_VAR 0 2
28138: PPUSH
28139: CALL_OW 74
28143: PPUSH
28144: CALL_OW 115
// end ;
28148: GO 28075
28150: POP
28151: POP
// until not tmp ;
28152: LD_VAR 0 3
28156: NOT
28157: IFFALSE 28058
// end ;
28159: PPOPN 3
28161: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28162: LD_EXP 51
28166: PUSH
28167: LD_EXP 76
28171: AND
28172: IFFALSE 28226
28174: GO 28176
28176: DISABLE
// begin ToLua ( displayTroll(); ) ;
28177: LD_STRING displayTroll();
28179: PPUSH
28180: CALL_OW 559
// wait ( 3 3$00 ) ;
28184: LD_INT 6300
28186: PPUSH
28187: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28191: LD_STRING hideTroll();
28193: PPUSH
28194: CALL_OW 559
// wait ( 1 1$00 ) ;
28198: LD_INT 2100
28200: PPUSH
28201: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28205: LD_STRING displayTroll();
28207: PPUSH
28208: CALL_OW 559
// wait ( 1 1$00 ) ;
28212: LD_INT 2100
28214: PPUSH
28215: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28219: LD_STRING hideTroll();
28221: PPUSH
28222: CALL_OW 559
// end ;
28226: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28227: LD_EXP 51
28231: PUSH
28232: LD_EXP 77
28236: AND
28237: IFFALSE 28300
28239: GO 28241
28241: DISABLE
28242: LD_INT 0
28244: PPUSH
// begin p := 0 ;
28245: LD_ADDR_VAR 0 1
28249: PUSH
28250: LD_INT 0
28252: ST_TO_ADDR
// repeat game_speed := 1 ;
28253: LD_ADDR_OWVAR 65
28257: PUSH
28258: LD_INT 1
28260: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28261: LD_INT 35
28263: PPUSH
28264: CALL_OW 67
// p := p + 1 ;
28268: LD_ADDR_VAR 0 1
28272: PUSH
28273: LD_VAR 0 1
28277: PUSH
28278: LD_INT 1
28280: PLUS
28281: ST_TO_ADDR
// until p >= 60 ;
28282: LD_VAR 0 1
28286: PUSH
28287: LD_INT 60
28289: GREATEREQUAL
28290: IFFALSE 28253
// game_speed := 4 ;
28292: LD_ADDR_OWVAR 65
28296: PUSH
28297: LD_INT 4
28299: ST_TO_ADDR
// end ;
28300: PPOPN 1
28302: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28303: LD_EXP 51
28307: PUSH
28308: LD_EXP 78
28312: AND
28313: IFFALSE 28459
28315: GO 28317
28317: DISABLE
28318: LD_INT 0
28320: PPUSH
28321: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28322: LD_ADDR_VAR 0 1
28326: PUSH
28327: LD_INT 22
28329: PUSH
28330: LD_OWVAR 2
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 2
28341: PUSH
28342: LD_INT 30
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 30
28354: PUSH
28355: LD_INT 1
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: LIST
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PPUSH
28371: CALL_OW 69
28375: ST_TO_ADDR
// if not depot then
28376: LD_VAR 0 1
28380: NOT
28381: IFFALSE 28385
// exit ;
28383: GO 28459
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28385: LD_ADDR_VAR 0 2
28389: PUSH
28390: LD_VAR 0 1
28394: PUSH
28395: LD_INT 1
28397: PPUSH
28398: LD_VAR 0 1
28402: PPUSH
28403: CALL_OW 12
28407: ARRAY
28408: PPUSH
28409: CALL_OW 274
28413: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28414: LD_VAR 0 2
28418: PPUSH
28419: LD_INT 1
28421: PPUSH
28422: LD_INT 0
28424: PPUSH
28425: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28429: LD_VAR 0 2
28433: PPUSH
28434: LD_INT 2
28436: PPUSH
28437: LD_INT 0
28439: PPUSH
28440: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28444: LD_VAR 0 2
28448: PPUSH
28449: LD_INT 3
28451: PPUSH
28452: LD_INT 0
28454: PPUSH
28455: CALL_OW 277
// end ;
28459: PPOPN 2
28461: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28462: LD_EXP 51
28466: PUSH
28467: LD_EXP 79
28471: AND
28472: IFFALSE 28569
28474: GO 28476
28476: DISABLE
28477: LD_INT 0
28479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28480: LD_ADDR_VAR 0 1
28484: PUSH
28485: LD_INT 22
28487: PUSH
28488: LD_OWVAR 2
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 21
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 3
28509: PUSH
28510: LD_INT 23
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: LIST
28528: PPUSH
28529: CALL_OW 69
28533: ST_TO_ADDR
// if not tmp then
28534: LD_VAR 0 1
28538: NOT
28539: IFFALSE 28543
// exit ;
28541: GO 28569
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28543: LD_VAR 0 1
28547: PUSH
28548: LD_INT 1
28550: PPUSH
28551: LD_VAR 0 1
28555: PPUSH
28556: CALL_OW 12
28560: ARRAY
28561: PPUSH
28562: LD_INT 200
28564: PPUSH
28565: CALL_OW 234
// end ;
28569: PPOPN 1
28571: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28572: LD_EXP 51
28576: PUSH
28577: LD_EXP 80
28581: AND
28582: IFFALSE 28661
28584: GO 28586
28586: DISABLE
28587: LD_INT 0
28589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28590: LD_ADDR_VAR 0 1
28594: PUSH
28595: LD_INT 22
28597: PUSH
28598: LD_OWVAR 2
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 21
28609: PUSH
28610: LD_INT 2
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PPUSH
28621: CALL_OW 69
28625: ST_TO_ADDR
// if not tmp then
28626: LD_VAR 0 1
28630: NOT
28631: IFFALSE 28635
// exit ;
28633: GO 28661
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28635: LD_VAR 0 1
28639: PUSH
28640: LD_INT 1
28642: PPUSH
28643: LD_VAR 0 1
28647: PPUSH
28648: CALL_OW 12
28652: ARRAY
28653: PPUSH
28654: LD_INT 60
28656: PPUSH
28657: CALL_OW 234
// end ;
28661: PPOPN 1
28663: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28664: LD_EXP 51
28668: PUSH
28669: LD_EXP 81
28673: AND
28674: IFFALSE 28773
28676: GO 28678
28678: DISABLE
28679: LD_INT 0
28681: PPUSH
28682: PPUSH
// begin enable ;
28683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28684: LD_ADDR_VAR 0 1
28688: PUSH
28689: LD_INT 22
28691: PUSH
28692: LD_OWVAR 2
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 61
28703: PUSH
28704: EMPTY
28705: LIST
28706: PUSH
28707: LD_INT 33
28709: PUSH
28710: LD_INT 2
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: LIST
28721: PPUSH
28722: CALL_OW 69
28726: ST_TO_ADDR
// if not tmp then
28727: LD_VAR 0 1
28731: NOT
28732: IFFALSE 28736
// exit ;
28734: GO 28773
// for i in tmp do
28736: LD_ADDR_VAR 0 2
28740: PUSH
28741: LD_VAR 0 1
28745: PUSH
28746: FOR_IN
28747: IFFALSE 28771
// if IsControledBy ( i ) then
28749: LD_VAR 0 2
28753: PPUSH
28754: CALL_OW 312
28758: IFFALSE 28769
// ComUnlink ( i ) ;
28760: LD_VAR 0 2
28764: PPUSH
28765: CALL_OW 136
28769: GO 28746
28771: POP
28772: POP
// end ;
28773: PPOPN 2
28775: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28776: LD_EXP 51
28780: PUSH
28781: LD_EXP 82
28785: AND
28786: IFFALSE 28926
28788: GO 28790
28790: DISABLE
28791: LD_INT 0
28793: PPUSH
28794: PPUSH
// begin ToLua ( displayPowell(); ) ;
28795: LD_STRING displayPowell();
28797: PPUSH
28798: CALL_OW 559
// uc_side := 0 ;
28802: LD_ADDR_OWVAR 20
28806: PUSH
28807: LD_INT 0
28809: ST_TO_ADDR
// uc_nation := 2 ;
28810: LD_ADDR_OWVAR 21
28814: PUSH
28815: LD_INT 2
28817: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28818: LD_ADDR_OWVAR 37
28822: PUSH
28823: LD_INT 14
28825: ST_TO_ADDR
// vc_engine := engine_siberite ;
28826: LD_ADDR_OWVAR 39
28830: PUSH
28831: LD_INT 3
28833: ST_TO_ADDR
// vc_control := control_apeman ;
28834: LD_ADDR_OWVAR 38
28838: PUSH
28839: LD_INT 5
28841: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28842: LD_ADDR_OWVAR 40
28846: PUSH
28847: LD_INT 29
28849: ST_TO_ADDR
// un := CreateVehicle ;
28850: LD_ADDR_VAR 0 2
28854: PUSH
28855: CALL_OW 45
28859: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28860: LD_VAR 0 2
28864: PPUSH
28865: LD_INT 1
28867: PPUSH
28868: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28872: LD_INT 35
28874: PPUSH
28875: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28879: LD_VAR 0 2
28883: PPUSH
28884: LD_INT 22
28886: PUSH
28887: LD_OWVAR 2
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PPUSH
28896: CALL_OW 69
28900: PPUSH
28901: LD_VAR 0 2
28905: PPUSH
28906: CALL_OW 74
28910: PPUSH
28911: CALL_OW 115
// until IsDead ( un ) ;
28915: LD_VAR 0 2
28919: PPUSH
28920: CALL_OW 301
28924: IFFALSE 28872
// end ;
28926: PPOPN 2
28928: END
// every 0 0$1 trigger StreamModeActive and sStu do
28929: LD_EXP 51
28933: PUSH
28934: LD_EXP 90
28938: AND
28939: IFFALSE 28955
28941: GO 28943
28943: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28944: LD_STRING displayStucuk();
28946: PPUSH
28947: CALL_OW 559
// ResetFog ;
28951: CALL_OW 335
// end ;
28955: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28956: LD_EXP 51
28960: PUSH
28961: LD_EXP 83
28965: AND
28966: IFFALSE 29107
28968: GO 28970
28970: DISABLE
28971: LD_INT 0
28973: PPUSH
28974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28975: LD_ADDR_VAR 0 2
28979: PUSH
28980: LD_INT 22
28982: PUSH
28983: LD_OWVAR 2
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 21
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PPUSH
29006: CALL_OW 69
29010: ST_TO_ADDR
// if not tmp then
29011: LD_VAR 0 2
29015: NOT
29016: IFFALSE 29020
// exit ;
29018: GO 29107
// un := tmp [ rand ( 1 , tmp ) ] ;
29020: LD_ADDR_VAR 0 1
29024: PUSH
29025: LD_VAR 0 2
29029: PUSH
29030: LD_INT 1
29032: PPUSH
29033: LD_VAR 0 2
29037: PPUSH
29038: CALL_OW 12
29042: ARRAY
29043: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29044: LD_VAR 0 1
29048: PPUSH
29049: LD_INT 0
29051: PPUSH
29052: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29056: LD_VAR 0 1
29060: PPUSH
29061: LD_OWVAR 3
29065: PUSH
29066: LD_VAR 0 1
29070: DIFF
29071: PPUSH
29072: LD_VAR 0 1
29076: PPUSH
29077: CALL_OW 74
29081: PPUSH
29082: CALL_OW 115
// wait ( 0 0$20 ) ;
29086: LD_INT 700
29088: PPUSH
29089: CALL_OW 67
// SetSide ( un , your_side ) ;
29093: LD_VAR 0 1
29097: PPUSH
29098: LD_OWVAR 2
29102: PPUSH
29103: CALL_OW 235
// end ;
29107: PPOPN 2
29109: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29110: LD_EXP 51
29114: PUSH
29115: LD_EXP 84
29119: AND
29120: IFFALSE 29226
29122: GO 29124
29124: DISABLE
29125: LD_INT 0
29127: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29128: LD_ADDR_VAR 0 1
29132: PUSH
29133: LD_INT 22
29135: PUSH
29136: LD_OWVAR 2
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 2
29147: PUSH
29148: LD_INT 30
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 30
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: LIST
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PPUSH
29177: CALL_OW 69
29181: ST_TO_ADDR
// if not depot then
29182: LD_VAR 0 1
29186: NOT
29187: IFFALSE 29191
// exit ;
29189: GO 29226
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29191: LD_VAR 0 1
29195: PUSH
29196: LD_INT 1
29198: ARRAY
29199: PPUSH
29200: CALL_OW 250
29204: PPUSH
29205: LD_VAR 0 1
29209: PUSH
29210: LD_INT 1
29212: ARRAY
29213: PPUSH
29214: CALL_OW 251
29218: PPUSH
29219: LD_INT 70
29221: PPUSH
29222: CALL_OW 495
// end ;
29226: PPOPN 1
29228: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29229: LD_EXP 51
29233: PUSH
29234: LD_EXP 85
29238: AND
29239: IFFALSE 29450
29241: GO 29243
29243: DISABLE
29244: LD_INT 0
29246: PPUSH
29247: PPUSH
29248: PPUSH
29249: PPUSH
29250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29251: LD_ADDR_VAR 0 5
29255: PUSH
29256: LD_INT 22
29258: PUSH
29259: LD_OWVAR 2
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 21
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PPUSH
29282: CALL_OW 69
29286: ST_TO_ADDR
// if not tmp then
29287: LD_VAR 0 5
29291: NOT
29292: IFFALSE 29296
// exit ;
29294: GO 29450
// for i in tmp do
29296: LD_ADDR_VAR 0 1
29300: PUSH
29301: LD_VAR 0 5
29305: PUSH
29306: FOR_IN
29307: IFFALSE 29448
// begin d := rand ( 0 , 5 ) ;
29309: LD_ADDR_VAR 0 4
29313: PUSH
29314: LD_INT 0
29316: PPUSH
29317: LD_INT 5
29319: PPUSH
29320: CALL_OW 12
29324: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29325: LD_ADDR_VAR 0 2
29329: PUSH
29330: LD_VAR 0 1
29334: PPUSH
29335: CALL_OW 250
29339: PPUSH
29340: LD_VAR 0 4
29344: PPUSH
29345: LD_INT 3
29347: PPUSH
29348: LD_INT 12
29350: PPUSH
29351: CALL_OW 12
29355: PPUSH
29356: CALL_OW 272
29360: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29361: LD_ADDR_VAR 0 3
29365: PUSH
29366: LD_VAR 0 1
29370: PPUSH
29371: CALL_OW 251
29375: PPUSH
29376: LD_VAR 0 4
29380: PPUSH
29381: LD_INT 3
29383: PPUSH
29384: LD_INT 12
29386: PPUSH
29387: CALL_OW 12
29391: PPUSH
29392: CALL_OW 273
29396: ST_TO_ADDR
// if ValidHex ( x , y ) then
29397: LD_VAR 0 2
29401: PPUSH
29402: LD_VAR 0 3
29406: PPUSH
29407: CALL_OW 488
29411: IFFALSE 29446
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29413: LD_VAR 0 1
29417: PPUSH
29418: LD_VAR 0 2
29422: PPUSH
29423: LD_VAR 0 3
29427: PPUSH
29428: LD_INT 3
29430: PPUSH
29431: LD_INT 6
29433: PPUSH
29434: CALL_OW 12
29438: PPUSH
29439: LD_INT 1
29441: PPUSH
29442: CALL_OW 483
// end ;
29446: GO 29306
29448: POP
29449: POP
// end ;
29450: PPOPN 5
29452: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29453: LD_EXP 51
29457: PUSH
29458: LD_EXP 86
29462: AND
29463: IFFALSE 29557
29465: GO 29467
29467: DISABLE
29468: LD_INT 0
29470: PPUSH
29471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29472: LD_ADDR_VAR 0 2
29476: PUSH
29477: LD_INT 22
29479: PUSH
29480: LD_OWVAR 2
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 32
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 21
29501: PUSH
29502: LD_INT 2
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: PPUSH
29514: CALL_OW 69
29518: ST_TO_ADDR
// if not tmp then
29519: LD_VAR 0 2
29523: NOT
29524: IFFALSE 29528
// exit ;
29526: GO 29557
// for i in tmp do
29528: LD_ADDR_VAR 0 1
29532: PUSH
29533: LD_VAR 0 2
29537: PUSH
29538: FOR_IN
29539: IFFALSE 29555
// SetFuel ( i , 0 ) ;
29541: LD_VAR 0 1
29545: PPUSH
29546: LD_INT 0
29548: PPUSH
29549: CALL_OW 240
29553: GO 29538
29555: POP
29556: POP
// end ;
29557: PPOPN 2
29559: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29560: LD_EXP 51
29564: PUSH
29565: LD_EXP 87
29569: AND
29570: IFFALSE 29636
29572: GO 29574
29574: DISABLE
29575: LD_INT 0
29577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29578: LD_ADDR_VAR 0 1
29582: PUSH
29583: LD_INT 22
29585: PUSH
29586: LD_OWVAR 2
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 30
29597: PUSH
29598: LD_INT 29
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PPUSH
29609: CALL_OW 69
29613: ST_TO_ADDR
// if not tmp then
29614: LD_VAR 0 1
29618: NOT
29619: IFFALSE 29623
// exit ;
29621: GO 29636
// DestroyUnit ( tmp [ 1 ] ) ;
29623: LD_VAR 0 1
29627: PUSH
29628: LD_INT 1
29630: ARRAY
29631: PPUSH
29632: CALL_OW 65
// end ;
29636: PPOPN 1
29638: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29639: LD_EXP 51
29643: PUSH
29644: LD_EXP 89
29648: AND
29649: IFFALSE 29778
29651: GO 29653
29653: DISABLE
29654: LD_INT 0
29656: PPUSH
// begin uc_side := 0 ;
29657: LD_ADDR_OWVAR 20
29661: PUSH
29662: LD_INT 0
29664: ST_TO_ADDR
// uc_nation := nation_arabian ;
29665: LD_ADDR_OWVAR 21
29669: PUSH
29670: LD_INT 2
29672: ST_TO_ADDR
// hc_gallery :=  ;
29673: LD_ADDR_OWVAR 33
29677: PUSH
29678: LD_STRING 
29680: ST_TO_ADDR
// hc_name :=  ;
29681: LD_ADDR_OWVAR 26
29685: PUSH
29686: LD_STRING 
29688: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29689: LD_INT 1
29691: PPUSH
29692: LD_INT 11
29694: PPUSH
29695: LD_INT 10
29697: PPUSH
29698: CALL_OW 380
// un := CreateHuman ;
29702: LD_ADDR_VAR 0 1
29706: PUSH
29707: CALL_OW 44
29711: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29712: LD_VAR 0 1
29716: PPUSH
29717: LD_INT 1
29719: PPUSH
29720: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29724: LD_INT 35
29726: PPUSH
29727: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29731: LD_VAR 0 1
29735: PPUSH
29736: LD_INT 22
29738: PUSH
29739: LD_OWVAR 2
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PPUSH
29748: CALL_OW 69
29752: PPUSH
29753: LD_VAR 0 1
29757: PPUSH
29758: CALL_OW 74
29762: PPUSH
29763: CALL_OW 115
// until IsDead ( un ) ;
29767: LD_VAR 0 1
29771: PPUSH
29772: CALL_OW 301
29776: IFFALSE 29724
// end ;
29778: PPOPN 1
29780: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29781: LD_EXP 51
29785: PUSH
29786: LD_EXP 91
29790: AND
29791: IFFALSE 29803
29793: GO 29795
29795: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29796: LD_STRING earthquake(getX(game), 0, 32)
29798: PPUSH
29799: CALL_OW 559
29803: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29804: LD_EXP 51
29808: PUSH
29809: LD_EXP 92
29813: AND
29814: IFFALSE 29905
29816: GO 29818
29818: DISABLE
29819: LD_INT 0
29821: PPUSH
// begin enable ;
29822: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29823: LD_ADDR_VAR 0 1
29827: PUSH
29828: LD_INT 22
29830: PUSH
29831: LD_OWVAR 2
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 21
29842: PUSH
29843: LD_INT 2
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 33
29852: PUSH
29853: LD_INT 3
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: LIST
29864: PPUSH
29865: CALL_OW 69
29869: ST_TO_ADDR
// if not tmp then
29870: LD_VAR 0 1
29874: NOT
29875: IFFALSE 29879
// exit ;
29877: GO 29905
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29879: LD_VAR 0 1
29883: PUSH
29884: LD_INT 1
29886: PPUSH
29887: LD_VAR 0 1
29891: PPUSH
29892: CALL_OW 12
29896: ARRAY
29897: PPUSH
29898: LD_INT 1
29900: PPUSH
29901: CALL_OW 234
// end ;
29905: PPOPN 1
29907: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29908: LD_EXP 51
29912: PUSH
29913: LD_EXP 93
29917: AND
29918: IFFALSE 30059
29920: GO 29922
29922: DISABLE
29923: LD_INT 0
29925: PPUSH
29926: PPUSH
29927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29928: LD_ADDR_VAR 0 3
29932: PUSH
29933: LD_INT 22
29935: PUSH
29936: LD_OWVAR 2
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 25
29947: PUSH
29948: LD_INT 1
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PPUSH
29959: CALL_OW 69
29963: ST_TO_ADDR
// if not tmp then
29964: LD_VAR 0 3
29968: NOT
29969: IFFALSE 29973
// exit ;
29971: GO 30059
// un := tmp [ rand ( 1 , tmp ) ] ;
29973: LD_ADDR_VAR 0 2
29977: PUSH
29978: LD_VAR 0 3
29982: PUSH
29983: LD_INT 1
29985: PPUSH
29986: LD_VAR 0 3
29990: PPUSH
29991: CALL_OW 12
29995: ARRAY
29996: ST_TO_ADDR
// if Crawls ( un ) then
29997: LD_VAR 0 2
30001: PPUSH
30002: CALL_OW 318
30006: IFFALSE 30017
// ComWalk ( un ) ;
30008: LD_VAR 0 2
30012: PPUSH
30013: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30017: LD_VAR 0 2
30021: PPUSH
30022: LD_INT 9
30024: PPUSH
30025: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30029: LD_INT 28
30031: PPUSH
30032: LD_OWVAR 2
30036: PPUSH
30037: LD_INT 2
30039: PPUSH
30040: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30044: LD_INT 29
30046: PPUSH
30047: LD_OWVAR 2
30051: PPUSH
30052: LD_INT 2
30054: PPUSH
30055: CALL_OW 322
// end ;
30059: PPOPN 3
30061: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30062: LD_EXP 51
30066: PUSH
30067: LD_EXP 94
30071: AND
30072: IFFALSE 30183
30074: GO 30076
30076: DISABLE
30077: LD_INT 0
30079: PPUSH
30080: PPUSH
30081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30082: LD_ADDR_VAR 0 3
30086: PUSH
30087: LD_INT 22
30089: PUSH
30090: LD_OWVAR 2
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 25
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PPUSH
30113: CALL_OW 69
30117: ST_TO_ADDR
// if not tmp then
30118: LD_VAR 0 3
30122: NOT
30123: IFFALSE 30127
// exit ;
30125: GO 30183
// un := tmp [ rand ( 1 , tmp ) ] ;
30127: LD_ADDR_VAR 0 2
30131: PUSH
30132: LD_VAR 0 3
30136: PUSH
30137: LD_INT 1
30139: PPUSH
30140: LD_VAR 0 3
30144: PPUSH
30145: CALL_OW 12
30149: ARRAY
30150: ST_TO_ADDR
// if Crawls ( un ) then
30151: LD_VAR 0 2
30155: PPUSH
30156: CALL_OW 318
30160: IFFALSE 30171
// ComWalk ( un ) ;
30162: LD_VAR 0 2
30166: PPUSH
30167: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30171: LD_VAR 0 2
30175: PPUSH
30176: LD_INT 8
30178: PPUSH
30179: CALL_OW 336
// end ;
30183: PPOPN 3
30185: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30186: LD_EXP 51
30190: PUSH
30191: LD_EXP 95
30195: AND
30196: IFFALSE 30340
30198: GO 30200
30200: DISABLE
30201: LD_INT 0
30203: PPUSH
30204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30205: LD_ADDR_VAR 0 2
30209: PUSH
30210: LD_INT 22
30212: PUSH
30213: LD_OWVAR 2
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 21
30224: PUSH
30225: LD_INT 2
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 2
30234: PUSH
30235: LD_INT 34
30237: PUSH
30238: LD_INT 12
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 34
30247: PUSH
30248: LD_INT 51
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 34
30257: PUSH
30258: LD_INT 32
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: LIST
30275: PPUSH
30276: CALL_OW 69
30280: ST_TO_ADDR
// if not tmp then
30281: LD_VAR 0 2
30285: NOT
30286: IFFALSE 30290
// exit ;
30288: GO 30340
// for i in tmp do
30290: LD_ADDR_VAR 0 1
30294: PUSH
30295: LD_VAR 0 2
30299: PUSH
30300: FOR_IN
30301: IFFALSE 30338
// if GetCargo ( i , mat_artifact ) = 0 then
30303: LD_VAR 0 1
30307: PPUSH
30308: LD_INT 4
30310: PPUSH
30311: CALL_OW 289
30315: PUSH
30316: LD_INT 0
30318: EQUAL
30319: IFFALSE 30336
// SetCargo ( i , mat_siberit , 100 ) ;
30321: LD_VAR 0 1
30325: PPUSH
30326: LD_INT 3
30328: PPUSH
30329: LD_INT 100
30331: PPUSH
30332: CALL_OW 290
30336: GO 30300
30338: POP
30339: POP
// end ;
30340: PPOPN 2
30342: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30343: LD_EXP 51
30347: PUSH
30348: LD_EXP 96
30352: AND
30353: IFFALSE 30536
30355: GO 30357
30357: DISABLE
30358: LD_INT 0
30360: PPUSH
30361: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30362: LD_ADDR_VAR 0 2
30366: PUSH
30367: LD_INT 22
30369: PUSH
30370: LD_OWVAR 2
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PPUSH
30379: CALL_OW 69
30383: ST_TO_ADDR
// if not tmp then
30384: LD_VAR 0 2
30388: NOT
30389: IFFALSE 30393
// exit ;
30391: GO 30536
// for i := 1 to 2 do
30393: LD_ADDR_VAR 0 1
30397: PUSH
30398: DOUBLE
30399: LD_INT 1
30401: DEC
30402: ST_TO_ADDR
30403: LD_INT 2
30405: PUSH
30406: FOR_TO
30407: IFFALSE 30534
// begin uc_side := your_side ;
30409: LD_ADDR_OWVAR 20
30413: PUSH
30414: LD_OWVAR 2
30418: ST_TO_ADDR
// uc_nation := nation_american ;
30419: LD_ADDR_OWVAR 21
30423: PUSH
30424: LD_INT 1
30426: ST_TO_ADDR
// vc_chassis := us_morphling ;
30427: LD_ADDR_OWVAR 37
30431: PUSH
30432: LD_INT 5
30434: ST_TO_ADDR
// vc_engine := engine_siberite ;
30435: LD_ADDR_OWVAR 39
30439: PUSH
30440: LD_INT 3
30442: ST_TO_ADDR
// vc_control := control_computer ;
30443: LD_ADDR_OWVAR 38
30447: PUSH
30448: LD_INT 3
30450: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30451: LD_ADDR_OWVAR 40
30455: PUSH
30456: LD_INT 10
30458: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30459: LD_VAR 0 2
30463: PUSH
30464: LD_INT 1
30466: ARRAY
30467: PPUSH
30468: CALL_OW 310
30472: NOT
30473: IFFALSE 30520
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30475: CALL_OW 45
30479: PPUSH
30480: LD_VAR 0 2
30484: PUSH
30485: LD_INT 1
30487: ARRAY
30488: PPUSH
30489: CALL_OW 250
30493: PPUSH
30494: LD_VAR 0 2
30498: PUSH
30499: LD_INT 1
30501: ARRAY
30502: PPUSH
30503: CALL_OW 251
30507: PPUSH
30508: LD_INT 12
30510: PPUSH
30511: LD_INT 1
30513: PPUSH
30514: CALL_OW 50
30518: GO 30532
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30520: CALL_OW 45
30524: PPUSH
30525: LD_INT 1
30527: PPUSH
30528: CALL_OW 51
// end ;
30532: GO 30406
30534: POP
30535: POP
// end ;
30536: PPOPN 2
30538: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30539: LD_EXP 51
30543: PUSH
30544: LD_EXP 97
30548: AND
30549: IFFALSE 30771
30551: GO 30553
30553: DISABLE
30554: LD_INT 0
30556: PPUSH
30557: PPUSH
30558: PPUSH
30559: PPUSH
30560: PPUSH
30561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30562: LD_ADDR_VAR 0 6
30566: PUSH
30567: LD_INT 22
30569: PUSH
30570: LD_OWVAR 2
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 21
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 3
30591: PUSH
30592: LD_INT 23
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: LIST
30610: PPUSH
30611: CALL_OW 69
30615: ST_TO_ADDR
// if not tmp then
30616: LD_VAR 0 6
30620: NOT
30621: IFFALSE 30625
// exit ;
30623: GO 30771
// s1 := rand ( 1 , 4 ) ;
30625: LD_ADDR_VAR 0 2
30629: PUSH
30630: LD_INT 1
30632: PPUSH
30633: LD_INT 4
30635: PPUSH
30636: CALL_OW 12
30640: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30641: LD_ADDR_VAR 0 4
30645: PUSH
30646: LD_VAR 0 6
30650: PUSH
30651: LD_INT 1
30653: ARRAY
30654: PPUSH
30655: LD_VAR 0 2
30659: PPUSH
30660: CALL_OW 259
30664: ST_TO_ADDR
// if s1 = 1 then
30665: LD_VAR 0 2
30669: PUSH
30670: LD_INT 1
30672: EQUAL
30673: IFFALSE 30693
// s2 := rand ( 2 , 4 ) else
30675: LD_ADDR_VAR 0 3
30679: PUSH
30680: LD_INT 2
30682: PPUSH
30683: LD_INT 4
30685: PPUSH
30686: CALL_OW 12
30690: ST_TO_ADDR
30691: GO 30701
// s2 := 1 ;
30693: LD_ADDR_VAR 0 3
30697: PUSH
30698: LD_INT 1
30700: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30701: LD_ADDR_VAR 0 5
30705: PUSH
30706: LD_VAR 0 6
30710: PUSH
30711: LD_INT 1
30713: ARRAY
30714: PPUSH
30715: LD_VAR 0 3
30719: PPUSH
30720: CALL_OW 259
30724: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30725: LD_VAR 0 6
30729: PUSH
30730: LD_INT 1
30732: ARRAY
30733: PPUSH
30734: LD_VAR 0 2
30738: PPUSH
30739: LD_VAR 0 5
30743: PPUSH
30744: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30748: LD_VAR 0 6
30752: PUSH
30753: LD_INT 1
30755: ARRAY
30756: PPUSH
30757: LD_VAR 0 3
30761: PPUSH
30762: LD_VAR 0 4
30766: PPUSH
30767: CALL_OW 237
// end ;
30771: PPOPN 6
30773: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30774: LD_EXP 51
30778: PUSH
30779: LD_EXP 98
30783: AND
30784: IFFALSE 30863
30786: GO 30788
30788: DISABLE
30789: LD_INT 0
30791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30792: LD_ADDR_VAR 0 1
30796: PUSH
30797: LD_INT 22
30799: PUSH
30800: LD_OWVAR 2
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 30
30811: PUSH
30812: LD_INT 3
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PPUSH
30823: CALL_OW 69
30827: ST_TO_ADDR
// if not tmp then
30828: LD_VAR 0 1
30832: NOT
30833: IFFALSE 30837
// exit ;
30835: GO 30863
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30837: LD_VAR 0 1
30841: PUSH
30842: LD_INT 1
30844: PPUSH
30845: LD_VAR 0 1
30849: PPUSH
30850: CALL_OW 12
30854: ARRAY
30855: PPUSH
30856: LD_INT 1
30858: PPUSH
30859: CALL_OW 234
// end ;
30863: PPOPN 1
30865: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30866: LD_EXP 51
30870: PUSH
30871: LD_EXP 99
30875: AND
30876: IFFALSE 30988
30878: GO 30880
30880: DISABLE
30881: LD_INT 0
30883: PPUSH
30884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30885: LD_ADDR_VAR 0 2
30889: PUSH
30890: LD_INT 22
30892: PUSH
30893: LD_OWVAR 2
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 2
30904: PUSH
30905: LD_INT 30
30907: PUSH
30908: LD_INT 27
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 30
30917: PUSH
30918: LD_INT 26
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 30
30927: PUSH
30928: LD_INT 28
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PPUSH
30945: CALL_OW 69
30949: ST_TO_ADDR
// if not tmp then
30950: LD_VAR 0 2
30954: NOT
30955: IFFALSE 30959
// exit ;
30957: GO 30988
// for i in tmp do
30959: LD_ADDR_VAR 0 1
30963: PUSH
30964: LD_VAR 0 2
30968: PUSH
30969: FOR_IN
30970: IFFALSE 30986
// SetLives ( i , 1 ) ;
30972: LD_VAR 0 1
30976: PPUSH
30977: LD_INT 1
30979: PPUSH
30980: CALL_OW 234
30984: GO 30969
30986: POP
30987: POP
// end ;
30988: PPOPN 2
30990: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30991: LD_EXP 51
30995: PUSH
30996: LD_EXP 100
31000: AND
31001: IFFALSE 31288
31003: GO 31005
31005: DISABLE
31006: LD_INT 0
31008: PPUSH
31009: PPUSH
31010: PPUSH
// begin i := rand ( 1 , 7 ) ;
31011: LD_ADDR_VAR 0 1
31015: PUSH
31016: LD_INT 1
31018: PPUSH
31019: LD_INT 7
31021: PPUSH
31022: CALL_OW 12
31026: ST_TO_ADDR
// case i of 1 :
31027: LD_VAR 0 1
31031: PUSH
31032: LD_INT 1
31034: DOUBLE
31035: EQUAL
31036: IFTRUE 31040
31038: GO 31050
31040: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31041: LD_STRING earthquake(getX(game), 0, 32)
31043: PPUSH
31044: CALL_OW 559
31048: GO 31288
31050: LD_INT 2
31052: DOUBLE
31053: EQUAL
31054: IFTRUE 31058
31056: GO 31072
31058: POP
// begin ToLua ( displayStucuk(); ) ;
31059: LD_STRING displayStucuk();
31061: PPUSH
31062: CALL_OW 559
// ResetFog ;
31066: CALL_OW 335
// end ; 3 :
31070: GO 31288
31072: LD_INT 3
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31184
31080: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31081: LD_ADDR_VAR 0 2
31085: PUSH
31086: LD_INT 22
31088: PUSH
31089: LD_OWVAR 2
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 25
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PPUSH
31112: CALL_OW 69
31116: ST_TO_ADDR
// if not tmp then
31117: LD_VAR 0 2
31121: NOT
31122: IFFALSE 31126
// exit ;
31124: GO 31288
// un := tmp [ rand ( 1 , tmp ) ] ;
31126: LD_ADDR_VAR 0 3
31130: PUSH
31131: LD_VAR 0 2
31135: PUSH
31136: LD_INT 1
31138: PPUSH
31139: LD_VAR 0 2
31143: PPUSH
31144: CALL_OW 12
31148: ARRAY
31149: ST_TO_ADDR
// if Crawls ( un ) then
31150: LD_VAR 0 3
31154: PPUSH
31155: CALL_OW 318
31159: IFFALSE 31170
// ComWalk ( un ) ;
31161: LD_VAR 0 3
31165: PPUSH
31166: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31170: LD_VAR 0 3
31174: PPUSH
31175: LD_INT 8
31177: PPUSH
31178: CALL_OW 336
// end ; 4 :
31182: GO 31288
31184: LD_INT 4
31186: DOUBLE
31187: EQUAL
31188: IFTRUE 31192
31190: GO 31266
31192: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31193: LD_ADDR_VAR 0 2
31197: PUSH
31198: LD_INT 22
31200: PUSH
31201: LD_OWVAR 2
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 30
31212: PUSH
31213: LD_INT 29
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PPUSH
31224: CALL_OW 69
31228: ST_TO_ADDR
// if not tmp then
31229: LD_VAR 0 2
31233: NOT
31234: IFFALSE 31238
// exit ;
31236: GO 31288
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31238: LD_VAR 0 2
31242: PUSH
31243: LD_INT 1
31245: ARRAY
31246: PPUSH
31247: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31251: LD_VAR 0 2
31255: PUSH
31256: LD_INT 1
31258: ARRAY
31259: PPUSH
31260: CALL_OW 65
// end ; 5 .. 7 :
31264: GO 31288
31266: LD_INT 5
31268: DOUBLE
31269: GREATEREQUAL
31270: IFFALSE 31278
31272: LD_INT 7
31274: DOUBLE
31275: LESSEQUAL
31276: IFTRUE 31280
31278: GO 31287
31280: POP
// StreamSibBomb ; end ;
31281: CALL 27525 0 0
31285: GO 31288
31287: POP
// end ;
31288: PPOPN 3
31290: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31291: LD_EXP 51
31295: PUSH
31296: LD_EXP 101
31300: AND
31301: IFFALSE 31457
31303: GO 31305
31305: DISABLE
31306: LD_INT 0
31308: PPUSH
31309: PPUSH
31310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31311: LD_ADDR_VAR 0 2
31315: PUSH
31316: LD_INT 81
31318: PUSH
31319: LD_OWVAR 2
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: LD_INT 21
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 21
31343: PUSH
31344: LD_INT 2
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: LIST
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PPUSH
31360: CALL_OW 69
31364: ST_TO_ADDR
// if not tmp then
31365: LD_VAR 0 2
31369: NOT
31370: IFFALSE 31374
// exit ;
31372: GO 31457
// p := 0 ;
31374: LD_ADDR_VAR 0 3
31378: PUSH
31379: LD_INT 0
31381: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31382: LD_INT 35
31384: PPUSH
31385: CALL_OW 67
// p := p + 1 ;
31389: LD_ADDR_VAR 0 3
31393: PUSH
31394: LD_VAR 0 3
31398: PUSH
31399: LD_INT 1
31401: PLUS
31402: ST_TO_ADDR
// for i in tmp do
31403: LD_ADDR_VAR 0 1
31407: PUSH
31408: LD_VAR 0 2
31412: PUSH
31413: FOR_IN
31414: IFFALSE 31445
// if GetLives ( i ) < 1000 then
31416: LD_VAR 0 1
31420: PPUSH
31421: CALL_OW 256
31425: PUSH
31426: LD_INT 1000
31428: LESS
31429: IFFALSE 31443
// SetLives ( i , 1000 ) ;
31431: LD_VAR 0 1
31435: PPUSH
31436: LD_INT 1000
31438: PPUSH
31439: CALL_OW 234
31443: GO 31413
31445: POP
31446: POP
// until p > 20 ;
31447: LD_VAR 0 3
31451: PUSH
31452: LD_INT 20
31454: GREATER
31455: IFFALSE 31382
// end ;
31457: PPOPN 3
31459: END
// every 0 0$1 trigger StreamModeActive and sTime do
31460: LD_EXP 51
31464: PUSH
31465: LD_EXP 102
31469: AND
31470: IFFALSE 31505
31472: GO 31474
31474: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31475: LD_INT 28
31477: PPUSH
31478: LD_OWVAR 2
31482: PPUSH
31483: LD_INT 2
31485: PPUSH
31486: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31490: LD_INT 30
31492: PPUSH
31493: LD_OWVAR 2
31497: PPUSH
31498: LD_INT 2
31500: PPUSH
31501: CALL_OW 322
// end ;
31505: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31506: LD_EXP 51
31510: PUSH
31511: LD_EXP 103
31515: AND
31516: IFFALSE 31637
31518: GO 31520
31520: DISABLE
31521: LD_INT 0
31523: PPUSH
31524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31525: LD_ADDR_VAR 0 2
31529: PUSH
31530: LD_INT 22
31532: PUSH
31533: LD_OWVAR 2
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 21
31544: PUSH
31545: LD_INT 1
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 3
31554: PUSH
31555: LD_INT 23
31557: PUSH
31558: LD_INT 0
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: LIST
31573: PPUSH
31574: CALL_OW 69
31578: ST_TO_ADDR
// if not tmp then
31579: LD_VAR 0 2
31583: NOT
31584: IFFALSE 31588
// exit ;
31586: GO 31637
// for i in tmp do
31588: LD_ADDR_VAR 0 1
31592: PUSH
31593: LD_VAR 0 2
31597: PUSH
31598: FOR_IN
31599: IFFALSE 31635
// begin if Crawls ( i ) then
31601: LD_VAR 0 1
31605: PPUSH
31606: CALL_OW 318
31610: IFFALSE 31621
// ComWalk ( i ) ;
31612: LD_VAR 0 1
31616: PPUSH
31617: CALL_OW 138
// SetClass ( i , 2 ) ;
31621: LD_VAR 0 1
31625: PPUSH
31626: LD_INT 2
31628: PPUSH
31629: CALL_OW 336
// end ;
31633: GO 31598
31635: POP
31636: POP
// end ;
31637: PPOPN 2
31639: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31640: LD_EXP 51
31644: PUSH
31645: LD_EXP 104
31649: AND
31650: IFFALSE 31938
31652: GO 31654
31654: DISABLE
31655: LD_INT 0
31657: PPUSH
31658: PPUSH
31659: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31660: LD_OWVAR 2
31664: PPUSH
31665: LD_INT 9
31667: PPUSH
31668: LD_INT 1
31670: PPUSH
31671: LD_INT 1
31673: PPUSH
31674: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31678: LD_INT 9
31680: PPUSH
31681: LD_OWVAR 2
31685: PPUSH
31686: CALL_OW 343
// uc_side := 9 ;
31690: LD_ADDR_OWVAR 20
31694: PUSH
31695: LD_INT 9
31697: ST_TO_ADDR
// uc_nation := 2 ;
31698: LD_ADDR_OWVAR 21
31702: PUSH
31703: LD_INT 2
31705: ST_TO_ADDR
// hc_name := Dark Warrior ;
31706: LD_ADDR_OWVAR 26
31710: PUSH
31711: LD_STRING Dark Warrior
31713: ST_TO_ADDR
// hc_gallery :=  ;
31714: LD_ADDR_OWVAR 33
31718: PUSH
31719: LD_STRING 
31721: ST_TO_ADDR
// hc_noskilllimit := true ;
31722: LD_ADDR_OWVAR 76
31726: PUSH
31727: LD_INT 1
31729: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31730: LD_ADDR_OWVAR 31
31734: PUSH
31735: LD_INT 30
31737: PUSH
31738: LD_INT 30
31740: PUSH
31741: LD_INT 30
31743: PUSH
31744: LD_INT 30
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: ST_TO_ADDR
// un := CreateHuman ;
31753: LD_ADDR_VAR 0 3
31757: PUSH
31758: CALL_OW 44
31762: ST_TO_ADDR
// hc_noskilllimit := false ;
31763: LD_ADDR_OWVAR 76
31767: PUSH
31768: LD_INT 0
31770: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31771: LD_VAR 0 3
31775: PPUSH
31776: LD_INT 1
31778: PPUSH
31779: CALL_OW 51
// ToLua ( playRanger() ) ;
31783: LD_STRING playRanger()
31785: PPUSH
31786: CALL_OW 559
// p := 0 ;
31790: LD_ADDR_VAR 0 2
31794: PUSH
31795: LD_INT 0
31797: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31798: LD_INT 35
31800: PPUSH
31801: CALL_OW 67
// p := p + 1 ;
31805: LD_ADDR_VAR 0 2
31809: PUSH
31810: LD_VAR 0 2
31814: PUSH
31815: LD_INT 1
31817: PLUS
31818: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31819: LD_VAR 0 3
31823: PPUSH
31824: CALL_OW 256
31828: PUSH
31829: LD_INT 1000
31831: LESS
31832: IFFALSE 31846
// SetLives ( un , 1000 ) ;
31834: LD_VAR 0 3
31838: PPUSH
31839: LD_INT 1000
31841: PPUSH
31842: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31846: LD_VAR 0 3
31850: PPUSH
31851: LD_INT 81
31853: PUSH
31854: LD_OWVAR 2
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 91
31865: PUSH
31866: LD_VAR 0 3
31870: PUSH
31871: LD_INT 30
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: LIST
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PPUSH
31883: CALL_OW 69
31887: PPUSH
31888: LD_VAR 0 3
31892: PPUSH
31893: CALL_OW 74
31897: PPUSH
31898: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31902: LD_VAR 0 2
31906: PUSH
31907: LD_INT 80
31909: GREATER
31910: PUSH
31911: LD_VAR 0 3
31915: PPUSH
31916: CALL_OW 301
31920: OR
31921: IFFALSE 31798
// if un then
31923: LD_VAR 0 3
31927: IFFALSE 31938
// RemoveUnit ( un ) ;
31929: LD_VAR 0 3
31933: PPUSH
31934: CALL_OW 64
// end ;
31938: PPOPN 3
31940: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31941: LD_EXP 105
31945: IFFALSE 32061
31947: GO 31949
31949: DISABLE
31950: LD_INT 0
31952: PPUSH
31953: PPUSH
31954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31955: LD_ADDR_VAR 0 2
31959: PUSH
31960: LD_INT 81
31962: PUSH
31963: LD_OWVAR 2
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 21
31974: PUSH
31975: LD_INT 1
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PPUSH
31986: CALL_OW 69
31990: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31991: LD_STRING playComputer()
31993: PPUSH
31994: CALL_OW 559
// if not tmp then
31998: LD_VAR 0 2
32002: NOT
32003: IFFALSE 32007
// exit ;
32005: GO 32061
// for i in tmp do
32007: LD_ADDR_VAR 0 1
32011: PUSH
32012: LD_VAR 0 2
32016: PUSH
32017: FOR_IN
32018: IFFALSE 32059
// for j := 1 to 4 do
32020: LD_ADDR_VAR 0 3
32024: PUSH
32025: DOUBLE
32026: LD_INT 1
32028: DEC
32029: ST_TO_ADDR
32030: LD_INT 4
32032: PUSH
32033: FOR_TO
32034: IFFALSE 32055
// SetSkill ( i , j , 10 ) ;
32036: LD_VAR 0 1
32040: PPUSH
32041: LD_VAR 0 3
32045: PPUSH
32046: LD_INT 10
32048: PPUSH
32049: CALL_OW 237
32053: GO 32033
32055: POP
32056: POP
32057: GO 32017
32059: POP
32060: POP
// end ;
32061: PPOPN 3
32063: END
// every 0 0$1 trigger s30 do var i , tmp ;
32064: LD_EXP 106
32068: IFFALSE 32137
32070: GO 32072
32072: DISABLE
32073: LD_INT 0
32075: PPUSH
32076: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32077: LD_ADDR_VAR 0 2
32081: PUSH
32082: LD_INT 22
32084: PUSH
32085: LD_OWVAR 2
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PPUSH
32094: CALL_OW 69
32098: ST_TO_ADDR
// if not tmp then
32099: LD_VAR 0 2
32103: NOT
32104: IFFALSE 32108
// exit ;
32106: GO 32137
// for i in tmp do
32108: LD_ADDR_VAR 0 1
32112: PUSH
32113: LD_VAR 0 2
32117: PUSH
32118: FOR_IN
32119: IFFALSE 32135
// SetLives ( i , 300 ) ;
32121: LD_VAR 0 1
32125: PPUSH
32126: LD_INT 300
32128: PPUSH
32129: CALL_OW 234
32133: GO 32118
32135: POP
32136: POP
// end ;
32137: PPOPN 2
32139: END
// every 0 0$1 trigger s60 do var i , tmp ;
32140: LD_EXP 107
32144: IFFALSE 32213
32146: GO 32148
32148: DISABLE
32149: LD_INT 0
32151: PPUSH
32152: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32153: LD_ADDR_VAR 0 2
32157: PUSH
32158: LD_INT 22
32160: PUSH
32161: LD_OWVAR 2
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PPUSH
32170: CALL_OW 69
32174: ST_TO_ADDR
// if not tmp then
32175: LD_VAR 0 2
32179: NOT
32180: IFFALSE 32184
// exit ;
32182: GO 32213
// for i in tmp do
32184: LD_ADDR_VAR 0 1
32188: PUSH
32189: LD_VAR 0 2
32193: PUSH
32194: FOR_IN
32195: IFFALSE 32211
// SetLives ( i , 600 ) ;
32197: LD_VAR 0 1
32201: PPUSH
32202: LD_INT 600
32204: PPUSH
32205: CALL_OW 234
32209: GO 32194
32211: POP
32212: POP
// end ;
32213: PPOPN 2
32215: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32216: LD_INT 0
32218: PPUSH
// case cmd of 301 :
32219: LD_VAR 0 1
32223: PUSH
32224: LD_INT 301
32226: DOUBLE
32227: EQUAL
32228: IFTRUE 32232
32230: GO 32264
32232: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32233: LD_VAR 0 6
32237: PPUSH
32238: LD_VAR 0 7
32242: PPUSH
32243: LD_VAR 0 8
32247: PPUSH
32248: LD_VAR 0 4
32252: PPUSH
32253: LD_VAR 0 5
32257: PPUSH
32258: CALL 33465 0 5
32262: GO 32385
32264: LD_INT 302
32266: DOUBLE
32267: EQUAL
32268: IFTRUE 32272
32270: GO 32309
32272: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32273: LD_VAR 0 6
32277: PPUSH
32278: LD_VAR 0 7
32282: PPUSH
32283: LD_VAR 0 8
32287: PPUSH
32288: LD_VAR 0 9
32292: PPUSH
32293: LD_VAR 0 4
32297: PPUSH
32298: LD_VAR 0 5
32302: PPUSH
32303: CALL 33556 0 6
32307: GO 32385
32309: LD_INT 303
32311: DOUBLE
32312: EQUAL
32313: IFTRUE 32317
32315: GO 32354
32317: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32318: LD_VAR 0 6
32322: PPUSH
32323: LD_VAR 0 7
32327: PPUSH
32328: LD_VAR 0 8
32332: PPUSH
32333: LD_VAR 0 9
32337: PPUSH
32338: LD_VAR 0 4
32342: PPUSH
32343: LD_VAR 0 5
32347: PPUSH
32348: CALL 32390 0 6
32352: GO 32385
32354: LD_INT 304
32356: DOUBLE
32357: EQUAL
32358: IFTRUE 32362
32360: GO 32384
32362: POP
// hHackTeleport ( unit , x , y ) ; end ;
32363: LD_VAR 0 2
32367: PPUSH
32368: LD_VAR 0 4
32372: PPUSH
32373: LD_VAR 0 5
32377: PPUSH
32378: CALL 34149 0 3
32382: GO 32385
32384: POP
// end ;
32385: LD_VAR 0 12
32389: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32390: LD_INT 0
32392: PPUSH
32393: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32394: LD_VAR 0 1
32398: PUSH
32399: LD_INT 1
32401: LESS
32402: PUSH
32403: LD_VAR 0 1
32407: PUSH
32408: LD_INT 3
32410: GREATER
32411: OR
32412: PUSH
32413: LD_VAR 0 5
32417: PPUSH
32418: LD_VAR 0 6
32422: PPUSH
32423: CALL_OW 428
32427: OR
32428: IFFALSE 32432
// exit ;
32430: GO 33152
// uc_side := your_side ;
32432: LD_ADDR_OWVAR 20
32436: PUSH
32437: LD_OWVAR 2
32441: ST_TO_ADDR
// uc_nation := nation ;
32442: LD_ADDR_OWVAR 21
32446: PUSH
32447: LD_VAR 0 1
32451: ST_TO_ADDR
// bc_level = 1 ;
32452: LD_ADDR_OWVAR 43
32456: PUSH
32457: LD_INT 1
32459: ST_TO_ADDR
// case btype of 1 :
32460: LD_VAR 0 2
32464: PUSH
32465: LD_INT 1
32467: DOUBLE
32468: EQUAL
32469: IFTRUE 32473
32471: GO 32484
32473: POP
// bc_type := b_depot ; 2 :
32474: LD_ADDR_OWVAR 42
32478: PUSH
32479: LD_INT 0
32481: ST_TO_ADDR
32482: GO 33096
32484: LD_INT 2
32486: DOUBLE
32487: EQUAL
32488: IFTRUE 32492
32490: GO 32503
32492: POP
// bc_type := b_warehouse ; 3 :
32493: LD_ADDR_OWVAR 42
32497: PUSH
32498: LD_INT 1
32500: ST_TO_ADDR
32501: GO 33096
32503: LD_INT 3
32505: DOUBLE
32506: EQUAL
32507: IFTRUE 32511
32509: GO 32522
32511: POP
// bc_type := b_lab ; 4 .. 9 :
32512: LD_ADDR_OWVAR 42
32516: PUSH
32517: LD_INT 6
32519: ST_TO_ADDR
32520: GO 33096
32522: LD_INT 4
32524: DOUBLE
32525: GREATEREQUAL
32526: IFFALSE 32534
32528: LD_INT 9
32530: DOUBLE
32531: LESSEQUAL
32532: IFTRUE 32536
32534: GO 32588
32536: POP
// begin bc_type := b_lab_half ;
32537: LD_ADDR_OWVAR 42
32541: PUSH
32542: LD_INT 7
32544: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32545: LD_ADDR_OWVAR 44
32549: PUSH
32550: LD_INT 10
32552: PUSH
32553: LD_INT 11
32555: PUSH
32556: LD_INT 12
32558: PUSH
32559: LD_INT 15
32561: PUSH
32562: LD_INT 14
32564: PUSH
32565: LD_INT 13
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: PUSH
32576: LD_VAR 0 2
32580: PUSH
32581: LD_INT 3
32583: MINUS
32584: ARRAY
32585: ST_TO_ADDR
// end ; 10 .. 13 :
32586: GO 33096
32588: LD_INT 10
32590: DOUBLE
32591: GREATEREQUAL
32592: IFFALSE 32600
32594: LD_INT 13
32596: DOUBLE
32597: LESSEQUAL
32598: IFTRUE 32602
32600: GO 32679
32602: POP
// begin bc_type := b_lab_full ;
32603: LD_ADDR_OWVAR 42
32607: PUSH
32608: LD_INT 8
32610: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32611: LD_ADDR_OWVAR 44
32615: PUSH
32616: LD_INT 10
32618: PUSH
32619: LD_INT 12
32621: PUSH
32622: LD_INT 14
32624: PUSH
32625: LD_INT 13
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: PUSH
32634: LD_VAR 0 2
32638: PUSH
32639: LD_INT 9
32641: MINUS
32642: ARRAY
32643: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32644: LD_ADDR_OWVAR 45
32648: PUSH
32649: LD_INT 11
32651: PUSH
32652: LD_INT 15
32654: PUSH
32655: LD_INT 12
32657: PUSH
32658: LD_INT 15
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: PUSH
32667: LD_VAR 0 2
32671: PUSH
32672: LD_INT 9
32674: MINUS
32675: ARRAY
32676: ST_TO_ADDR
// end ; 14 :
32677: GO 33096
32679: LD_INT 14
32681: DOUBLE
32682: EQUAL
32683: IFTRUE 32687
32685: GO 32698
32687: POP
// bc_type := b_workshop ; 15 :
32688: LD_ADDR_OWVAR 42
32692: PUSH
32693: LD_INT 2
32695: ST_TO_ADDR
32696: GO 33096
32698: LD_INT 15
32700: DOUBLE
32701: EQUAL
32702: IFTRUE 32706
32704: GO 32717
32706: POP
// bc_type := b_factory ; 16 :
32707: LD_ADDR_OWVAR 42
32711: PUSH
32712: LD_INT 3
32714: ST_TO_ADDR
32715: GO 33096
32717: LD_INT 16
32719: DOUBLE
32720: EQUAL
32721: IFTRUE 32725
32723: GO 32736
32725: POP
// bc_type := b_ext_gun ; 17 :
32726: LD_ADDR_OWVAR 42
32730: PUSH
32731: LD_INT 17
32733: ST_TO_ADDR
32734: GO 33096
32736: LD_INT 17
32738: DOUBLE
32739: EQUAL
32740: IFTRUE 32744
32742: GO 32772
32744: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32745: LD_ADDR_OWVAR 42
32749: PUSH
32750: LD_INT 19
32752: PUSH
32753: LD_INT 23
32755: PUSH
32756: LD_INT 19
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: LIST
32763: PUSH
32764: LD_VAR 0 1
32768: ARRAY
32769: ST_TO_ADDR
32770: GO 33096
32772: LD_INT 18
32774: DOUBLE
32775: EQUAL
32776: IFTRUE 32780
32778: GO 32791
32780: POP
// bc_type := b_ext_radar ; 19 :
32781: LD_ADDR_OWVAR 42
32785: PUSH
32786: LD_INT 20
32788: ST_TO_ADDR
32789: GO 33096
32791: LD_INT 19
32793: DOUBLE
32794: EQUAL
32795: IFTRUE 32799
32797: GO 32810
32799: POP
// bc_type := b_ext_radio ; 20 :
32800: LD_ADDR_OWVAR 42
32804: PUSH
32805: LD_INT 22
32807: ST_TO_ADDR
32808: GO 33096
32810: LD_INT 20
32812: DOUBLE
32813: EQUAL
32814: IFTRUE 32818
32816: GO 32829
32818: POP
// bc_type := b_ext_siberium ; 21 :
32819: LD_ADDR_OWVAR 42
32823: PUSH
32824: LD_INT 21
32826: ST_TO_ADDR
32827: GO 33096
32829: LD_INT 21
32831: DOUBLE
32832: EQUAL
32833: IFTRUE 32837
32835: GO 32848
32837: POP
// bc_type := b_ext_computer ; 22 :
32838: LD_ADDR_OWVAR 42
32842: PUSH
32843: LD_INT 24
32845: ST_TO_ADDR
32846: GO 33096
32848: LD_INT 22
32850: DOUBLE
32851: EQUAL
32852: IFTRUE 32856
32854: GO 32867
32856: POP
// bc_type := b_ext_track ; 23 :
32857: LD_ADDR_OWVAR 42
32861: PUSH
32862: LD_INT 16
32864: ST_TO_ADDR
32865: GO 33096
32867: LD_INT 23
32869: DOUBLE
32870: EQUAL
32871: IFTRUE 32875
32873: GO 32886
32875: POP
// bc_type := b_ext_laser ; 24 :
32876: LD_ADDR_OWVAR 42
32880: PUSH
32881: LD_INT 25
32883: ST_TO_ADDR
32884: GO 33096
32886: LD_INT 24
32888: DOUBLE
32889: EQUAL
32890: IFTRUE 32894
32892: GO 32905
32894: POP
// bc_type := b_control_tower ; 25 :
32895: LD_ADDR_OWVAR 42
32899: PUSH
32900: LD_INT 36
32902: ST_TO_ADDR
32903: GO 33096
32905: LD_INT 25
32907: DOUBLE
32908: EQUAL
32909: IFTRUE 32913
32911: GO 32924
32913: POP
// bc_type := b_breastwork ; 26 :
32914: LD_ADDR_OWVAR 42
32918: PUSH
32919: LD_INT 31
32921: ST_TO_ADDR
32922: GO 33096
32924: LD_INT 26
32926: DOUBLE
32927: EQUAL
32928: IFTRUE 32932
32930: GO 32943
32932: POP
// bc_type := b_bunker ; 27 :
32933: LD_ADDR_OWVAR 42
32937: PUSH
32938: LD_INT 32
32940: ST_TO_ADDR
32941: GO 33096
32943: LD_INT 27
32945: DOUBLE
32946: EQUAL
32947: IFTRUE 32951
32949: GO 32962
32951: POP
// bc_type := b_turret ; 28 :
32952: LD_ADDR_OWVAR 42
32956: PUSH
32957: LD_INT 33
32959: ST_TO_ADDR
32960: GO 33096
32962: LD_INT 28
32964: DOUBLE
32965: EQUAL
32966: IFTRUE 32970
32968: GO 32981
32970: POP
// bc_type := b_armoury ; 29 :
32971: LD_ADDR_OWVAR 42
32975: PUSH
32976: LD_INT 4
32978: ST_TO_ADDR
32979: GO 33096
32981: LD_INT 29
32983: DOUBLE
32984: EQUAL
32985: IFTRUE 32989
32987: GO 33000
32989: POP
// bc_type := b_barracks ; 30 :
32990: LD_ADDR_OWVAR 42
32994: PUSH
32995: LD_INT 5
32997: ST_TO_ADDR
32998: GO 33096
33000: LD_INT 30
33002: DOUBLE
33003: EQUAL
33004: IFTRUE 33008
33006: GO 33019
33008: POP
// bc_type := b_solar_power ; 31 :
33009: LD_ADDR_OWVAR 42
33013: PUSH
33014: LD_INT 27
33016: ST_TO_ADDR
33017: GO 33096
33019: LD_INT 31
33021: DOUBLE
33022: EQUAL
33023: IFTRUE 33027
33025: GO 33038
33027: POP
// bc_type := b_oil_power ; 32 :
33028: LD_ADDR_OWVAR 42
33032: PUSH
33033: LD_INT 26
33035: ST_TO_ADDR
33036: GO 33096
33038: LD_INT 32
33040: DOUBLE
33041: EQUAL
33042: IFTRUE 33046
33044: GO 33057
33046: POP
// bc_type := b_siberite_power ; 33 :
33047: LD_ADDR_OWVAR 42
33051: PUSH
33052: LD_INT 28
33054: ST_TO_ADDR
33055: GO 33096
33057: LD_INT 33
33059: DOUBLE
33060: EQUAL
33061: IFTRUE 33065
33063: GO 33076
33065: POP
// bc_type := b_oil_mine ; 34 :
33066: LD_ADDR_OWVAR 42
33070: PUSH
33071: LD_INT 29
33073: ST_TO_ADDR
33074: GO 33096
33076: LD_INT 34
33078: DOUBLE
33079: EQUAL
33080: IFTRUE 33084
33082: GO 33095
33084: POP
// bc_type := b_siberite_mine ; end ;
33085: LD_ADDR_OWVAR 42
33089: PUSH
33090: LD_INT 30
33092: ST_TO_ADDR
33093: GO 33096
33095: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33096: LD_ADDR_VAR 0 8
33100: PUSH
33101: LD_VAR 0 5
33105: PPUSH
33106: LD_VAR 0 6
33110: PPUSH
33111: LD_VAR 0 3
33115: PPUSH
33116: CALL_OW 47
33120: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33121: LD_OWVAR 42
33125: PUSH
33126: LD_INT 32
33128: PUSH
33129: LD_INT 33
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: IN
33136: IFFALSE 33152
// PlaceWeaponTurret ( b , weapon ) ;
33138: LD_VAR 0 8
33142: PPUSH
33143: LD_VAR 0 4
33147: PPUSH
33148: CALL_OW 431
// end ;
33152: LD_VAR 0 7
33156: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33157: LD_INT 0
33159: PPUSH
33160: PPUSH
33161: PPUSH
33162: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33163: LD_ADDR_VAR 0 4
33167: PUSH
33168: LD_INT 22
33170: PUSH
33171: LD_OWVAR 2
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 2
33182: PUSH
33183: LD_INT 30
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 30
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: LIST
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PPUSH
33212: CALL_OW 69
33216: ST_TO_ADDR
// if not tmp then
33217: LD_VAR 0 4
33221: NOT
33222: IFFALSE 33226
// exit ;
33224: GO 33285
// for i in tmp do
33226: LD_ADDR_VAR 0 2
33230: PUSH
33231: LD_VAR 0 4
33235: PUSH
33236: FOR_IN
33237: IFFALSE 33283
// for j = 1 to 3 do
33239: LD_ADDR_VAR 0 3
33243: PUSH
33244: DOUBLE
33245: LD_INT 1
33247: DEC
33248: ST_TO_ADDR
33249: LD_INT 3
33251: PUSH
33252: FOR_TO
33253: IFFALSE 33279
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33255: LD_VAR 0 2
33259: PPUSH
33260: CALL_OW 274
33264: PPUSH
33265: LD_VAR 0 3
33269: PPUSH
33270: LD_INT 99999
33272: PPUSH
33273: CALL_OW 277
33277: GO 33252
33279: POP
33280: POP
33281: GO 33236
33283: POP
33284: POP
// end ;
33285: LD_VAR 0 1
33289: RET
// export function hHackSetLevel10 ; var i , j ; begin
33290: LD_INT 0
33292: PPUSH
33293: PPUSH
33294: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33295: LD_ADDR_VAR 0 2
33299: PUSH
33300: LD_INT 21
33302: PUSH
33303: LD_INT 1
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PPUSH
33310: CALL_OW 69
33314: PUSH
33315: FOR_IN
33316: IFFALSE 33368
// if IsSelected ( i ) then
33318: LD_VAR 0 2
33322: PPUSH
33323: CALL_OW 306
33327: IFFALSE 33366
// begin for j := 1 to 4 do
33329: LD_ADDR_VAR 0 3
33333: PUSH
33334: DOUBLE
33335: LD_INT 1
33337: DEC
33338: ST_TO_ADDR
33339: LD_INT 4
33341: PUSH
33342: FOR_TO
33343: IFFALSE 33364
// SetSkill ( i , j , 10 ) ;
33345: LD_VAR 0 2
33349: PPUSH
33350: LD_VAR 0 3
33354: PPUSH
33355: LD_INT 10
33357: PPUSH
33358: CALL_OW 237
33362: GO 33342
33364: POP
33365: POP
// end ;
33366: GO 33315
33368: POP
33369: POP
// end ;
33370: LD_VAR 0 1
33374: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33375: LD_INT 0
33377: PPUSH
33378: PPUSH
33379: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33380: LD_ADDR_VAR 0 2
33384: PUSH
33385: LD_INT 22
33387: PUSH
33388: LD_OWVAR 2
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 21
33399: PUSH
33400: LD_INT 1
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PPUSH
33411: CALL_OW 69
33415: PUSH
33416: FOR_IN
33417: IFFALSE 33458
// begin for j := 1 to 4 do
33419: LD_ADDR_VAR 0 3
33423: PUSH
33424: DOUBLE
33425: LD_INT 1
33427: DEC
33428: ST_TO_ADDR
33429: LD_INT 4
33431: PUSH
33432: FOR_TO
33433: IFFALSE 33454
// SetSkill ( i , j , 10 ) ;
33435: LD_VAR 0 2
33439: PPUSH
33440: LD_VAR 0 3
33444: PPUSH
33445: LD_INT 10
33447: PPUSH
33448: CALL_OW 237
33452: GO 33432
33454: POP
33455: POP
// end ;
33456: GO 33416
33458: POP
33459: POP
// end ;
33460: LD_VAR 0 1
33464: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33465: LD_INT 0
33467: PPUSH
// uc_side := your_side ;
33468: LD_ADDR_OWVAR 20
33472: PUSH
33473: LD_OWVAR 2
33477: ST_TO_ADDR
// uc_nation := nation ;
33478: LD_ADDR_OWVAR 21
33482: PUSH
33483: LD_VAR 0 1
33487: ST_TO_ADDR
// InitHc ;
33488: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33492: LD_INT 0
33494: PPUSH
33495: LD_VAR 0 2
33499: PPUSH
33500: LD_VAR 0 3
33504: PPUSH
33505: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33509: LD_VAR 0 4
33513: PPUSH
33514: LD_VAR 0 5
33518: PPUSH
33519: CALL_OW 428
33523: PUSH
33524: LD_INT 0
33526: EQUAL
33527: IFFALSE 33551
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33529: CALL_OW 44
33533: PPUSH
33534: LD_VAR 0 4
33538: PPUSH
33539: LD_VAR 0 5
33543: PPUSH
33544: LD_INT 1
33546: PPUSH
33547: CALL_OW 48
// end ;
33551: LD_VAR 0 6
33555: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33556: LD_INT 0
33558: PPUSH
33559: PPUSH
// uc_side := your_side ;
33560: LD_ADDR_OWVAR 20
33564: PUSH
33565: LD_OWVAR 2
33569: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33570: LD_VAR 0 1
33574: PUSH
33575: LD_INT 1
33577: PUSH
33578: LD_INT 2
33580: PUSH
33581: LD_INT 3
33583: PUSH
33584: LD_INT 4
33586: PUSH
33587: LD_INT 5
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: IN
33597: IFFALSE 33609
// uc_nation := nation_american else
33599: LD_ADDR_OWVAR 21
33603: PUSH
33604: LD_INT 1
33606: ST_TO_ADDR
33607: GO 33652
// if chassis in [ 11 , 12 , 13 , 14 ] then
33609: LD_VAR 0 1
33613: PUSH
33614: LD_INT 11
33616: PUSH
33617: LD_INT 12
33619: PUSH
33620: LD_INT 13
33622: PUSH
33623: LD_INT 14
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: IN
33632: IFFALSE 33644
// uc_nation := nation_arabian else
33634: LD_ADDR_OWVAR 21
33638: PUSH
33639: LD_INT 2
33641: ST_TO_ADDR
33642: GO 33652
// uc_nation := nation_russian ;
33644: LD_ADDR_OWVAR 21
33648: PUSH
33649: LD_INT 3
33651: ST_TO_ADDR
// vc_chassis := chassis ;
33652: LD_ADDR_OWVAR 37
33656: PUSH
33657: LD_VAR 0 1
33661: ST_TO_ADDR
// vc_engine := engine ;
33662: LD_ADDR_OWVAR 39
33666: PUSH
33667: LD_VAR 0 2
33671: ST_TO_ADDR
// vc_control := control ;
33672: LD_ADDR_OWVAR 38
33676: PUSH
33677: LD_VAR 0 3
33681: ST_TO_ADDR
// vc_weapon := weapon ;
33682: LD_ADDR_OWVAR 40
33686: PUSH
33687: LD_VAR 0 4
33691: ST_TO_ADDR
// un := CreateVehicle ;
33692: LD_ADDR_VAR 0 8
33696: PUSH
33697: CALL_OW 45
33701: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33702: LD_VAR 0 8
33706: PPUSH
33707: LD_INT 0
33709: PPUSH
33710: LD_INT 5
33712: PPUSH
33713: CALL_OW 12
33717: PPUSH
33718: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33722: LD_VAR 0 8
33726: PPUSH
33727: LD_VAR 0 5
33731: PPUSH
33732: LD_VAR 0 6
33736: PPUSH
33737: LD_INT 1
33739: PPUSH
33740: CALL_OW 48
// end ;
33744: LD_VAR 0 7
33748: RET
// export hInvincible ; every 1 do
33749: GO 33751
33751: DISABLE
// hInvincible := [ ] ;
33752: LD_ADDR_EXP 108
33756: PUSH
33757: EMPTY
33758: ST_TO_ADDR
33759: END
// every 10 do var i ;
33760: GO 33762
33762: DISABLE
33763: LD_INT 0
33765: PPUSH
// begin enable ;
33766: ENABLE
// if not hInvincible then
33767: LD_EXP 108
33771: NOT
33772: IFFALSE 33776
// exit ;
33774: GO 33820
// for i in hInvincible do
33776: LD_ADDR_VAR 0 1
33780: PUSH
33781: LD_EXP 108
33785: PUSH
33786: FOR_IN
33787: IFFALSE 33818
// if GetLives ( i ) < 1000 then
33789: LD_VAR 0 1
33793: PPUSH
33794: CALL_OW 256
33798: PUSH
33799: LD_INT 1000
33801: LESS
33802: IFFALSE 33816
// SetLives ( i , 1000 ) ;
33804: LD_VAR 0 1
33808: PPUSH
33809: LD_INT 1000
33811: PPUSH
33812: CALL_OW 234
33816: GO 33786
33818: POP
33819: POP
// end ;
33820: PPOPN 1
33822: END
// export function hHackInvincible ; var i ; begin
33823: LD_INT 0
33825: PPUSH
33826: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33827: LD_ADDR_VAR 0 2
33831: PUSH
33832: LD_INT 2
33834: PUSH
33835: LD_INT 21
33837: PUSH
33838: LD_INT 1
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 21
33847: PUSH
33848: LD_INT 2
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: LIST
33859: PPUSH
33860: CALL_OW 69
33864: PUSH
33865: FOR_IN
33866: IFFALSE 33927
// if IsSelected ( i ) then
33868: LD_VAR 0 2
33872: PPUSH
33873: CALL_OW 306
33877: IFFALSE 33925
// begin if i in hInvincible then
33879: LD_VAR 0 2
33883: PUSH
33884: LD_EXP 108
33888: IN
33889: IFFALSE 33909
// hInvincible := hInvincible diff i else
33891: LD_ADDR_EXP 108
33895: PUSH
33896: LD_EXP 108
33900: PUSH
33901: LD_VAR 0 2
33905: DIFF
33906: ST_TO_ADDR
33907: GO 33925
// hInvincible := hInvincible union i ;
33909: LD_ADDR_EXP 108
33913: PUSH
33914: LD_EXP 108
33918: PUSH
33919: LD_VAR 0 2
33923: UNION
33924: ST_TO_ADDR
// end ;
33925: GO 33865
33927: POP
33928: POP
// end ;
33929: LD_VAR 0 1
33933: RET
// export function hHackInvisible ; var i , j ; begin
33934: LD_INT 0
33936: PPUSH
33937: PPUSH
33938: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33939: LD_ADDR_VAR 0 2
33943: PUSH
33944: LD_INT 21
33946: PUSH
33947: LD_INT 1
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PPUSH
33954: CALL_OW 69
33958: PUSH
33959: FOR_IN
33960: IFFALSE 33984
// if IsSelected ( i ) then
33962: LD_VAR 0 2
33966: PPUSH
33967: CALL_OW 306
33971: IFFALSE 33982
// ComForceInvisible ( i ) ;
33973: LD_VAR 0 2
33977: PPUSH
33978: CALL_OW 496
33982: GO 33959
33984: POP
33985: POP
// end ;
33986: LD_VAR 0 1
33990: RET
// export function hHackChangeYourSide ; begin
33991: LD_INT 0
33993: PPUSH
// if your_side = 8 then
33994: LD_OWVAR 2
33998: PUSH
33999: LD_INT 8
34001: EQUAL
34002: IFFALSE 34014
// your_side := 0 else
34004: LD_ADDR_OWVAR 2
34008: PUSH
34009: LD_INT 0
34011: ST_TO_ADDR
34012: GO 34028
// your_side := your_side + 1 ;
34014: LD_ADDR_OWVAR 2
34018: PUSH
34019: LD_OWVAR 2
34023: PUSH
34024: LD_INT 1
34026: PLUS
34027: ST_TO_ADDR
// end ;
34028: LD_VAR 0 1
34032: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34033: LD_INT 0
34035: PPUSH
34036: PPUSH
34037: PPUSH
// for i in all_units do
34038: LD_ADDR_VAR 0 2
34042: PUSH
34043: LD_OWVAR 3
34047: PUSH
34048: FOR_IN
34049: IFFALSE 34127
// if IsSelected ( i ) then
34051: LD_VAR 0 2
34055: PPUSH
34056: CALL_OW 306
34060: IFFALSE 34125
// begin j := GetSide ( i ) ;
34062: LD_ADDR_VAR 0 3
34066: PUSH
34067: LD_VAR 0 2
34071: PPUSH
34072: CALL_OW 255
34076: ST_TO_ADDR
// if j = 8 then
34077: LD_VAR 0 3
34081: PUSH
34082: LD_INT 8
34084: EQUAL
34085: IFFALSE 34097
// j := 0 else
34087: LD_ADDR_VAR 0 3
34091: PUSH
34092: LD_INT 0
34094: ST_TO_ADDR
34095: GO 34111
// j := j + 1 ;
34097: LD_ADDR_VAR 0 3
34101: PUSH
34102: LD_VAR 0 3
34106: PUSH
34107: LD_INT 1
34109: PLUS
34110: ST_TO_ADDR
// SetSide ( i , j ) ;
34111: LD_VAR 0 2
34115: PPUSH
34116: LD_VAR 0 3
34120: PPUSH
34121: CALL_OW 235
// end ;
34125: GO 34048
34127: POP
34128: POP
// end ;
34129: LD_VAR 0 1
34133: RET
// export function hHackFog ; begin
34134: LD_INT 0
34136: PPUSH
// FogOff ( true ) ;
34137: LD_INT 1
34139: PPUSH
34140: CALL_OW 344
// end ;
34144: LD_VAR 0 1
34148: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34149: LD_INT 0
34151: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34152: LD_VAR 0 1
34156: PPUSH
34157: LD_VAR 0 2
34161: PPUSH
34162: LD_VAR 0 3
34166: PPUSH
34167: LD_INT 1
34169: PPUSH
34170: LD_INT 1
34172: PPUSH
34173: CALL_OW 483
// CenterOnXY ( x , y ) ;
34177: LD_VAR 0 2
34181: PPUSH
34182: LD_VAR 0 3
34186: PPUSH
34187: CALL_OW 84
// end ;
34191: LD_VAR 0 4
34195: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34196: LD_INT 0
34198: PPUSH
34199: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34200: LD_VAR 0 1
34204: NOT
34205: PUSH
34206: LD_VAR 0 2
34210: PPUSH
34211: LD_VAR 0 3
34215: PPUSH
34216: CALL_OW 488
34220: NOT
34221: OR
34222: PUSH
34223: LD_VAR 0 1
34227: PPUSH
34228: CALL_OW 266
34232: PUSH
34233: LD_INT 3
34235: NONEQUAL
34236: PUSH
34237: LD_VAR 0 1
34241: PPUSH
34242: CALL_OW 247
34246: PUSH
34247: LD_INT 1
34249: EQUAL
34250: NOT
34251: AND
34252: OR
34253: IFFALSE 34257
// exit ;
34255: GO 34406
// if GetType ( factory ) = unit_human then
34257: LD_VAR 0 1
34261: PPUSH
34262: CALL_OW 247
34266: PUSH
34267: LD_INT 1
34269: EQUAL
34270: IFFALSE 34287
// factory := IsInUnit ( factory ) ;
34272: LD_ADDR_VAR 0 1
34276: PUSH
34277: LD_VAR 0 1
34281: PPUSH
34282: CALL_OW 310
34286: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34287: LD_VAR 0 1
34291: PPUSH
34292: CALL_OW 266
34296: PUSH
34297: LD_INT 3
34299: NONEQUAL
34300: IFFALSE 34304
// exit ;
34302: GO 34406
// if HexInfo ( x , y ) = factory then
34304: LD_VAR 0 2
34308: PPUSH
34309: LD_VAR 0 3
34313: PPUSH
34314: CALL_OW 428
34318: PUSH
34319: LD_VAR 0 1
34323: EQUAL
34324: IFFALSE 34351
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34326: LD_ADDR_EXP 109
34330: PUSH
34331: LD_EXP 109
34335: PPUSH
34336: LD_VAR 0 1
34340: PPUSH
34341: LD_INT 0
34343: PPUSH
34344: CALL_OW 1
34348: ST_TO_ADDR
34349: GO 34402
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34351: LD_ADDR_EXP 109
34355: PUSH
34356: LD_EXP 109
34360: PPUSH
34361: LD_VAR 0 1
34365: PPUSH
34366: LD_VAR 0 1
34370: PPUSH
34371: CALL_OW 255
34375: PUSH
34376: LD_VAR 0 1
34380: PUSH
34381: LD_VAR 0 2
34385: PUSH
34386: LD_VAR 0 3
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: PPUSH
34397: CALL_OW 1
34401: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34402: CALL 34411 0 0
// end ;
34406: LD_VAR 0 4
34410: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34411: LD_INT 0
34413: PPUSH
34414: PPUSH
34415: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34416: LD_STRING resetFactoryWaypoint();
34418: PPUSH
34419: CALL_OW 559
// if factoryWaypoints then
34423: LD_EXP 109
34427: IFFALSE 34553
// begin list := PrepareArray ( factoryWaypoints ) ;
34429: LD_ADDR_VAR 0 3
34433: PUSH
34434: LD_EXP 109
34438: PPUSH
34439: CALL 80846 0 1
34443: ST_TO_ADDR
// for i := 1 to list do
34444: LD_ADDR_VAR 0 2
34448: PUSH
34449: DOUBLE
34450: LD_INT 1
34452: DEC
34453: ST_TO_ADDR
34454: LD_VAR 0 3
34458: PUSH
34459: FOR_TO
34460: IFFALSE 34551
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34462: LD_STRING setFactoryWaypointXY(
34464: PUSH
34465: LD_VAR 0 3
34469: PUSH
34470: LD_VAR 0 2
34474: ARRAY
34475: PUSH
34476: LD_INT 1
34478: ARRAY
34479: STR
34480: PUSH
34481: LD_STRING ,
34483: STR
34484: PUSH
34485: LD_VAR 0 3
34489: PUSH
34490: LD_VAR 0 2
34494: ARRAY
34495: PUSH
34496: LD_INT 2
34498: ARRAY
34499: STR
34500: PUSH
34501: LD_STRING ,
34503: STR
34504: PUSH
34505: LD_VAR 0 3
34509: PUSH
34510: LD_VAR 0 2
34514: ARRAY
34515: PUSH
34516: LD_INT 3
34518: ARRAY
34519: STR
34520: PUSH
34521: LD_STRING ,
34523: STR
34524: PUSH
34525: LD_VAR 0 3
34529: PUSH
34530: LD_VAR 0 2
34534: ARRAY
34535: PUSH
34536: LD_INT 4
34538: ARRAY
34539: STR
34540: PUSH
34541: LD_STRING )
34543: STR
34544: PPUSH
34545: CALL_OW 559
34549: GO 34459
34551: POP
34552: POP
// end ; end ;
34553: LD_VAR 0 1
34557: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34558: LD_INT 0
34560: PPUSH
// if HexInfo ( x , y ) = warehouse then
34561: LD_VAR 0 2
34565: PPUSH
34566: LD_VAR 0 3
34570: PPUSH
34571: CALL_OW 428
34575: PUSH
34576: LD_VAR 0 1
34580: EQUAL
34581: IFFALSE 34608
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34583: LD_ADDR_EXP 110
34587: PUSH
34588: LD_EXP 110
34592: PPUSH
34593: LD_VAR 0 1
34597: PPUSH
34598: LD_INT 0
34600: PPUSH
34601: CALL_OW 1
34605: ST_TO_ADDR
34606: GO 34659
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34608: LD_ADDR_EXP 110
34612: PUSH
34613: LD_EXP 110
34617: PPUSH
34618: LD_VAR 0 1
34622: PPUSH
34623: LD_VAR 0 1
34627: PPUSH
34628: CALL_OW 255
34632: PUSH
34633: LD_VAR 0 1
34637: PUSH
34638: LD_VAR 0 2
34642: PUSH
34643: LD_VAR 0 3
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: PPUSH
34654: CALL_OW 1
34658: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34659: CALL 34668 0 0
// end ;
34663: LD_VAR 0 4
34667: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34668: LD_INT 0
34670: PPUSH
34671: PPUSH
34672: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34673: LD_STRING resetWarehouseGatheringPoints();
34675: PPUSH
34676: CALL_OW 559
// if warehouseGatheringPoints then
34680: LD_EXP 110
34684: IFFALSE 34810
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34686: LD_ADDR_VAR 0 3
34690: PUSH
34691: LD_EXP 110
34695: PPUSH
34696: CALL 80846 0 1
34700: ST_TO_ADDR
// for i := 1 to list do
34701: LD_ADDR_VAR 0 2
34705: PUSH
34706: DOUBLE
34707: LD_INT 1
34709: DEC
34710: ST_TO_ADDR
34711: LD_VAR 0 3
34715: PUSH
34716: FOR_TO
34717: IFFALSE 34808
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34719: LD_STRING setWarehouseGatheringPointXY(
34721: PUSH
34722: LD_VAR 0 3
34726: PUSH
34727: LD_VAR 0 2
34731: ARRAY
34732: PUSH
34733: LD_INT 1
34735: ARRAY
34736: STR
34737: PUSH
34738: LD_STRING ,
34740: STR
34741: PUSH
34742: LD_VAR 0 3
34746: PUSH
34747: LD_VAR 0 2
34751: ARRAY
34752: PUSH
34753: LD_INT 2
34755: ARRAY
34756: STR
34757: PUSH
34758: LD_STRING ,
34760: STR
34761: PUSH
34762: LD_VAR 0 3
34766: PUSH
34767: LD_VAR 0 2
34771: ARRAY
34772: PUSH
34773: LD_INT 3
34775: ARRAY
34776: STR
34777: PUSH
34778: LD_STRING ,
34780: STR
34781: PUSH
34782: LD_VAR 0 3
34786: PUSH
34787: LD_VAR 0 2
34791: ARRAY
34792: PUSH
34793: LD_INT 4
34795: ARRAY
34796: STR
34797: PUSH
34798: LD_STRING )
34800: STR
34801: PPUSH
34802: CALL_OW 559
34806: GO 34716
34808: POP
34809: POP
// end ; end ;
34810: LD_VAR 0 1
34814: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34815: LD_EXP 110
34819: IFFALSE 35504
34821: GO 34823
34823: DISABLE
34824: LD_INT 0
34826: PPUSH
34827: PPUSH
34828: PPUSH
34829: PPUSH
34830: PPUSH
34831: PPUSH
34832: PPUSH
34833: PPUSH
34834: PPUSH
// begin enable ;
34835: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34836: LD_ADDR_VAR 0 3
34840: PUSH
34841: LD_EXP 110
34845: PPUSH
34846: CALL 80846 0 1
34850: ST_TO_ADDR
// if not list then
34851: LD_VAR 0 3
34855: NOT
34856: IFFALSE 34860
// exit ;
34858: GO 35504
// for i := 1 to list do
34860: LD_ADDR_VAR 0 1
34864: PUSH
34865: DOUBLE
34866: LD_INT 1
34868: DEC
34869: ST_TO_ADDR
34870: LD_VAR 0 3
34874: PUSH
34875: FOR_TO
34876: IFFALSE 35502
// begin depot := list [ i ] [ 2 ] ;
34878: LD_ADDR_VAR 0 8
34882: PUSH
34883: LD_VAR 0 3
34887: PUSH
34888: LD_VAR 0 1
34892: ARRAY
34893: PUSH
34894: LD_INT 2
34896: ARRAY
34897: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34898: LD_ADDR_VAR 0 5
34902: PUSH
34903: LD_VAR 0 3
34907: PUSH
34908: LD_VAR 0 1
34912: ARRAY
34913: PUSH
34914: LD_INT 1
34916: ARRAY
34917: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34918: LD_VAR 0 8
34922: PPUSH
34923: CALL_OW 301
34927: PUSH
34928: LD_VAR 0 5
34932: PUSH
34933: LD_VAR 0 8
34937: PPUSH
34938: CALL_OW 255
34942: NONEQUAL
34943: OR
34944: IFFALSE 34973
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34946: LD_ADDR_EXP 110
34950: PUSH
34951: LD_EXP 110
34955: PPUSH
34956: LD_VAR 0 8
34960: PPUSH
34961: LD_INT 0
34963: PPUSH
34964: CALL_OW 1
34968: ST_TO_ADDR
// exit ;
34969: POP
34970: POP
34971: GO 35504
// end ; x := list [ i ] [ 3 ] ;
34973: LD_ADDR_VAR 0 6
34977: PUSH
34978: LD_VAR 0 3
34982: PUSH
34983: LD_VAR 0 1
34987: ARRAY
34988: PUSH
34989: LD_INT 3
34991: ARRAY
34992: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34993: LD_ADDR_VAR 0 7
34997: PUSH
34998: LD_VAR 0 3
35002: PUSH
35003: LD_VAR 0 1
35007: ARRAY
35008: PUSH
35009: LD_INT 4
35011: ARRAY
35012: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35013: LD_ADDR_VAR 0 9
35017: PUSH
35018: LD_VAR 0 6
35022: PPUSH
35023: LD_VAR 0 7
35027: PPUSH
35028: LD_INT 16
35030: PPUSH
35031: CALL 79434 0 3
35035: ST_TO_ADDR
// if not cratesNearbyPoint then
35036: LD_VAR 0 9
35040: NOT
35041: IFFALSE 35047
// exit ;
35043: POP
35044: POP
35045: GO 35504
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35047: LD_ADDR_VAR 0 4
35051: PUSH
35052: LD_INT 22
35054: PUSH
35055: LD_VAR 0 5
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 3
35066: PUSH
35067: LD_INT 60
35069: PUSH
35070: EMPTY
35071: LIST
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 91
35079: PUSH
35080: LD_VAR 0 8
35084: PUSH
35085: LD_INT 6
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 2
35095: PUSH
35096: LD_INT 25
35098: PUSH
35099: LD_INT 2
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 25
35108: PUSH
35109: LD_INT 16
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: LIST
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: PPUSH
35127: CALL_OW 69
35131: PUSH
35132: LD_VAR 0 8
35136: PPUSH
35137: CALL_OW 313
35141: PPUSH
35142: LD_INT 3
35144: PUSH
35145: LD_INT 60
35147: PUSH
35148: EMPTY
35149: LIST
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 2
35157: PUSH
35158: LD_INT 25
35160: PUSH
35161: LD_INT 2
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 25
35170: PUSH
35171: LD_INT 16
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PPUSH
35187: CALL_OW 72
35191: UNION
35192: ST_TO_ADDR
// if tmp then
35193: LD_VAR 0 4
35197: IFFALSE 35277
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35199: LD_ADDR_VAR 0 4
35203: PUSH
35204: LD_VAR 0 4
35208: PPUSH
35209: LD_INT 3
35211: PPUSH
35212: CALL 77403 0 2
35216: ST_TO_ADDR
// for j in tmp do
35217: LD_ADDR_VAR 0 2
35221: PUSH
35222: LD_VAR 0 4
35226: PUSH
35227: FOR_IN
35228: IFFALSE 35271
// begin if IsInUnit ( j ) then
35230: LD_VAR 0 2
35234: PPUSH
35235: CALL_OW 310
35239: IFFALSE 35250
// ComExit ( j ) ;
35241: LD_VAR 0 2
35245: PPUSH
35246: CALL 77486 0 1
// AddComCollect ( j , x , y ) ;
35250: LD_VAR 0 2
35254: PPUSH
35255: LD_VAR 0 6
35259: PPUSH
35260: LD_VAR 0 7
35264: PPUSH
35265: CALL_OW 177
// end ;
35269: GO 35227
35271: POP
35272: POP
// exit ;
35273: POP
35274: POP
35275: GO 35504
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35277: LD_ADDR_VAR 0 4
35281: PUSH
35282: LD_INT 22
35284: PUSH
35285: LD_VAR 0 5
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 91
35296: PUSH
35297: LD_VAR 0 8
35301: PUSH
35302: LD_INT 8
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 2
35312: PUSH
35313: LD_INT 34
35315: PUSH
35316: LD_INT 12
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 34
35325: PUSH
35326: LD_INT 51
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 34
35335: PUSH
35336: LD_INT 32
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 34
35345: PUSH
35346: LD_INT 89
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: LIST
35364: PPUSH
35365: CALL_OW 69
35369: ST_TO_ADDR
// if tmp then
35370: LD_VAR 0 4
35374: IFFALSE 35500
// begin for j in tmp do
35376: LD_ADDR_VAR 0 2
35380: PUSH
35381: LD_VAR 0 4
35385: PUSH
35386: FOR_IN
35387: IFFALSE 35498
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35389: LD_VAR 0 2
35393: PPUSH
35394: CALL_OW 262
35398: PUSH
35399: LD_INT 3
35401: EQUAL
35402: PUSH
35403: LD_VAR 0 2
35407: PPUSH
35408: CALL_OW 261
35412: PUSH
35413: LD_INT 20
35415: GREATER
35416: OR
35417: PUSH
35418: LD_VAR 0 2
35422: PPUSH
35423: CALL_OW 314
35427: NOT
35428: AND
35429: PUSH
35430: LD_VAR 0 2
35434: PPUSH
35435: CALL_OW 263
35439: PUSH
35440: LD_INT 1
35442: NONEQUAL
35443: PUSH
35444: LD_VAR 0 2
35448: PPUSH
35449: CALL_OW 311
35453: OR
35454: AND
35455: IFFALSE 35496
// begin ComCollect ( j , x , y ) ;
35457: LD_VAR 0 2
35461: PPUSH
35462: LD_VAR 0 6
35466: PPUSH
35467: LD_VAR 0 7
35471: PPUSH
35472: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35476: LD_VAR 0 2
35480: PPUSH
35481: LD_VAR 0 8
35485: PPUSH
35486: CALL_OW 172
// exit ;
35490: POP
35491: POP
35492: POP
35493: POP
35494: GO 35504
// end ;
35496: GO 35386
35498: POP
35499: POP
// end ; end ;
35500: GO 34875
35502: POP
35503: POP
// end ; end_of_file
35504: PPOPN 9
35506: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35507: LD_INT 0
35509: PPUSH
35510: PPUSH
35511: PPUSH
35512: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35513: LD_VAR 0 1
35517: PPUSH
35518: CALL_OW 264
35522: PUSH
35523: LD_INT 91
35525: EQUAL
35526: IFFALSE 35598
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35528: LD_INT 68
35530: PPUSH
35531: LD_VAR 0 1
35535: PPUSH
35536: CALL_OW 255
35540: PPUSH
35541: CALL_OW 321
35545: PUSH
35546: LD_INT 2
35548: EQUAL
35549: IFFALSE 35561
// eff := 70 else
35551: LD_ADDR_VAR 0 4
35555: PUSH
35556: LD_INT 70
35558: ST_TO_ADDR
35559: GO 35569
// eff := 30 ;
35561: LD_ADDR_VAR 0 4
35565: PUSH
35566: LD_INT 30
35568: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35569: LD_VAR 0 1
35573: PPUSH
35574: CALL_OW 250
35578: PPUSH
35579: LD_VAR 0 1
35583: PPUSH
35584: CALL_OW 251
35588: PPUSH
35589: LD_VAR 0 4
35593: PPUSH
35594: CALL_OW 495
// end ; end ;
35598: LD_VAR 0 2
35602: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35603: LD_INT 0
35605: PPUSH
// end ;
35606: LD_VAR 0 4
35610: RET
// export function SOS_Command ( cmd ) ; begin
35611: LD_INT 0
35613: PPUSH
// end ;
35614: LD_VAR 0 2
35618: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35619: LD_INT 0
35621: PPUSH
// end ;
35622: LD_VAR 0 6
35626: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35627: LD_INT 0
35629: PPUSH
35630: PPUSH
// if not vehicle or not factory then
35631: LD_VAR 0 1
35635: NOT
35636: PUSH
35637: LD_VAR 0 2
35641: NOT
35642: OR
35643: IFFALSE 35647
// exit ;
35645: GO 35878
// if factoryWaypoints >= factory then
35647: LD_EXP 109
35651: PUSH
35652: LD_VAR 0 2
35656: GREATEREQUAL
35657: IFFALSE 35878
// if factoryWaypoints [ factory ] then
35659: LD_EXP 109
35663: PUSH
35664: LD_VAR 0 2
35668: ARRAY
35669: IFFALSE 35878
// begin if GetControl ( vehicle ) = control_manual then
35671: LD_VAR 0 1
35675: PPUSH
35676: CALL_OW 263
35680: PUSH
35681: LD_INT 1
35683: EQUAL
35684: IFFALSE 35765
// begin driver := IsDrivenBy ( vehicle ) ;
35686: LD_ADDR_VAR 0 4
35690: PUSH
35691: LD_VAR 0 1
35695: PPUSH
35696: CALL_OW 311
35700: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35701: LD_VAR 0 4
35705: PPUSH
35706: LD_EXP 109
35710: PUSH
35711: LD_VAR 0 2
35715: ARRAY
35716: PUSH
35717: LD_INT 3
35719: ARRAY
35720: PPUSH
35721: LD_EXP 109
35725: PUSH
35726: LD_VAR 0 2
35730: ARRAY
35731: PUSH
35732: LD_INT 4
35734: ARRAY
35735: PPUSH
35736: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35740: LD_VAR 0 4
35744: PPUSH
35745: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35749: LD_VAR 0 4
35753: PPUSH
35754: LD_VAR 0 2
35758: PPUSH
35759: CALL_OW 180
// end else
35763: GO 35878
// if GetControl ( vehicle ) = control_remote then
35765: LD_VAR 0 1
35769: PPUSH
35770: CALL_OW 263
35774: PUSH
35775: LD_INT 2
35777: EQUAL
35778: IFFALSE 35839
// begin wait ( 0 0$2 ) ;
35780: LD_INT 70
35782: PPUSH
35783: CALL_OW 67
// if Connect ( vehicle ) then
35787: LD_VAR 0 1
35791: PPUSH
35792: CALL 47727 0 1
35796: IFFALSE 35837
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35798: LD_VAR 0 1
35802: PPUSH
35803: LD_EXP 109
35807: PUSH
35808: LD_VAR 0 2
35812: ARRAY
35813: PUSH
35814: LD_INT 3
35816: ARRAY
35817: PPUSH
35818: LD_EXP 109
35822: PUSH
35823: LD_VAR 0 2
35827: ARRAY
35828: PUSH
35829: LD_INT 4
35831: ARRAY
35832: PPUSH
35833: CALL_OW 171
// end else
35837: GO 35878
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35839: LD_VAR 0 1
35843: PPUSH
35844: LD_EXP 109
35848: PUSH
35849: LD_VAR 0 2
35853: ARRAY
35854: PUSH
35855: LD_INT 3
35857: ARRAY
35858: PPUSH
35859: LD_EXP 109
35863: PUSH
35864: LD_VAR 0 2
35868: ARRAY
35869: PUSH
35870: LD_INT 4
35872: ARRAY
35873: PPUSH
35874: CALL_OW 171
// end ; end ;
35878: LD_VAR 0 3
35882: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35883: LD_INT 0
35885: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35886: LD_VAR 0 1
35890: PUSH
35891: LD_INT 250
35893: EQUAL
35894: PUSH
35895: LD_VAR 0 2
35899: PPUSH
35900: CALL_OW 264
35904: PUSH
35905: LD_INT 81
35907: EQUAL
35908: AND
35909: IFFALSE 35930
// MinerPlaceMine ( unit , x , y ) ;
35911: LD_VAR 0 2
35915: PPUSH
35916: LD_VAR 0 4
35920: PPUSH
35921: LD_VAR 0 5
35925: PPUSH
35926: CALL 38315 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35930: LD_VAR 0 1
35934: PUSH
35935: LD_INT 251
35937: EQUAL
35938: PUSH
35939: LD_VAR 0 2
35943: PPUSH
35944: CALL_OW 264
35948: PUSH
35949: LD_INT 81
35951: EQUAL
35952: AND
35953: IFFALSE 35974
// MinerDetonateMine ( unit , x , y ) ;
35955: LD_VAR 0 2
35959: PPUSH
35960: LD_VAR 0 4
35964: PPUSH
35965: LD_VAR 0 5
35969: PPUSH
35970: CALL 38590 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35974: LD_VAR 0 1
35978: PUSH
35979: LD_INT 252
35981: EQUAL
35982: PUSH
35983: LD_VAR 0 2
35987: PPUSH
35988: CALL_OW 264
35992: PUSH
35993: LD_INT 81
35995: EQUAL
35996: AND
35997: IFFALSE 36018
// MinerCreateMinefield ( unit , x , y ) ;
35999: LD_VAR 0 2
36003: PPUSH
36004: LD_VAR 0 4
36008: PPUSH
36009: LD_VAR 0 5
36013: PPUSH
36014: CALL 39007 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36018: LD_VAR 0 1
36022: PUSH
36023: LD_INT 253
36025: EQUAL
36026: PUSH
36027: LD_VAR 0 2
36031: PPUSH
36032: CALL_OW 257
36036: PUSH
36037: LD_INT 5
36039: EQUAL
36040: AND
36041: IFFALSE 36062
// ComBinocular ( unit , x , y ) ;
36043: LD_VAR 0 2
36047: PPUSH
36048: LD_VAR 0 4
36052: PPUSH
36053: LD_VAR 0 5
36057: PPUSH
36058: CALL 39376 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36062: LD_VAR 0 1
36066: PUSH
36067: LD_INT 254
36069: EQUAL
36070: PUSH
36071: LD_VAR 0 2
36075: PPUSH
36076: CALL_OW 264
36080: PUSH
36081: LD_INT 99
36083: EQUAL
36084: AND
36085: PUSH
36086: LD_VAR 0 3
36090: PPUSH
36091: CALL_OW 263
36095: PUSH
36096: LD_INT 3
36098: EQUAL
36099: AND
36100: IFFALSE 36116
// HackDestroyVehicle ( unit , selectedUnit ) ;
36102: LD_VAR 0 2
36106: PPUSH
36107: LD_VAR 0 3
36111: PPUSH
36112: CALL 37679 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36116: LD_VAR 0 1
36120: PUSH
36121: LD_INT 255
36123: EQUAL
36124: PUSH
36125: LD_VAR 0 2
36129: PPUSH
36130: CALL_OW 264
36134: PUSH
36135: LD_INT 14
36137: PUSH
36138: LD_INT 53
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: IN
36145: AND
36146: PUSH
36147: LD_VAR 0 4
36151: PPUSH
36152: LD_VAR 0 5
36156: PPUSH
36157: CALL_OW 488
36161: AND
36162: IFFALSE 36186
// CutTreeXYR ( unit , x , y , 12 ) ;
36164: LD_VAR 0 2
36168: PPUSH
36169: LD_VAR 0 4
36173: PPUSH
36174: LD_VAR 0 5
36178: PPUSH
36179: LD_INT 12
36181: PPUSH
36182: CALL 36249 0 4
// if cmd = 256 then
36186: LD_VAR 0 1
36190: PUSH
36191: LD_INT 256
36193: EQUAL
36194: IFFALSE 36215
// SetFactoryWaypoint ( unit , x , y ) ;
36196: LD_VAR 0 2
36200: PPUSH
36201: LD_VAR 0 4
36205: PPUSH
36206: LD_VAR 0 5
36210: PPUSH
36211: CALL 34196 0 3
// if cmd = 257 then
36215: LD_VAR 0 1
36219: PUSH
36220: LD_INT 257
36222: EQUAL
36223: IFFALSE 36244
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36225: LD_VAR 0 2
36229: PPUSH
36230: LD_VAR 0 4
36234: PPUSH
36235: LD_VAR 0 5
36239: PPUSH
36240: CALL 34558 0 3
// end ;
36244: LD_VAR 0 6
36248: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36249: LD_INT 0
36251: PPUSH
36252: PPUSH
36253: PPUSH
36254: PPUSH
36255: PPUSH
36256: PPUSH
36257: PPUSH
36258: PPUSH
36259: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36260: LD_VAR 0 1
36264: NOT
36265: PUSH
36266: LD_VAR 0 2
36270: PPUSH
36271: LD_VAR 0 3
36275: PPUSH
36276: CALL_OW 488
36280: NOT
36281: OR
36282: PUSH
36283: LD_VAR 0 4
36287: NOT
36288: OR
36289: IFFALSE 36293
// exit ;
36291: GO 36633
// list := [ ] ;
36293: LD_ADDR_VAR 0 13
36297: PUSH
36298: EMPTY
36299: ST_TO_ADDR
// if x - r < 0 then
36300: LD_VAR 0 2
36304: PUSH
36305: LD_VAR 0 4
36309: MINUS
36310: PUSH
36311: LD_INT 0
36313: LESS
36314: IFFALSE 36326
// min_x := 0 else
36316: LD_ADDR_VAR 0 7
36320: PUSH
36321: LD_INT 0
36323: ST_TO_ADDR
36324: GO 36342
// min_x := x - r ;
36326: LD_ADDR_VAR 0 7
36330: PUSH
36331: LD_VAR 0 2
36335: PUSH
36336: LD_VAR 0 4
36340: MINUS
36341: ST_TO_ADDR
// if y - r < 0 then
36342: LD_VAR 0 3
36346: PUSH
36347: LD_VAR 0 4
36351: MINUS
36352: PUSH
36353: LD_INT 0
36355: LESS
36356: IFFALSE 36368
// min_y := 0 else
36358: LD_ADDR_VAR 0 8
36362: PUSH
36363: LD_INT 0
36365: ST_TO_ADDR
36366: GO 36384
// min_y := y - r ;
36368: LD_ADDR_VAR 0 8
36372: PUSH
36373: LD_VAR 0 3
36377: PUSH
36378: LD_VAR 0 4
36382: MINUS
36383: ST_TO_ADDR
// max_x := x + r ;
36384: LD_ADDR_VAR 0 9
36388: PUSH
36389: LD_VAR 0 2
36393: PUSH
36394: LD_VAR 0 4
36398: PLUS
36399: ST_TO_ADDR
// max_y := y + r ;
36400: LD_ADDR_VAR 0 10
36404: PUSH
36405: LD_VAR 0 3
36409: PUSH
36410: LD_VAR 0 4
36414: PLUS
36415: ST_TO_ADDR
// for _x = min_x to max_x do
36416: LD_ADDR_VAR 0 11
36420: PUSH
36421: DOUBLE
36422: LD_VAR 0 7
36426: DEC
36427: ST_TO_ADDR
36428: LD_VAR 0 9
36432: PUSH
36433: FOR_TO
36434: IFFALSE 36551
// for _y = min_y to max_y do
36436: LD_ADDR_VAR 0 12
36440: PUSH
36441: DOUBLE
36442: LD_VAR 0 8
36446: DEC
36447: ST_TO_ADDR
36448: LD_VAR 0 10
36452: PUSH
36453: FOR_TO
36454: IFFALSE 36547
// begin if not ValidHex ( _x , _y ) then
36456: LD_VAR 0 11
36460: PPUSH
36461: LD_VAR 0 12
36465: PPUSH
36466: CALL_OW 488
36470: NOT
36471: IFFALSE 36475
// continue ;
36473: GO 36453
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36475: LD_VAR 0 11
36479: PPUSH
36480: LD_VAR 0 12
36484: PPUSH
36485: CALL_OW 351
36489: PUSH
36490: LD_VAR 0 11
36494: PPUSH
36495: LD_VAR 0 12
36499: PPUSH
36500: CALL_OW 554
36504: AND
36505: IFFALSE 36545
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36507: LD_ADDR_VAR 0 13
36511: PUSH
36512: LD_VAR 0 13
36516: PPUSH
36517: LD_VAR 0 13
36521: PUSH
36522: LD_INT 1
36524: PLUS
36525: PPUSH
36526: LD_VAR 0 11
36530: PUSH
36531: LD_VAR 0 12
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PPUSH
36540: CALL_OW 2
36544: ST_TO_ADDR
// end ;
36545: GO 36453
36547: POP
36548: POP
36549: GO 36433
36551: POP
36552: POP
// if not list then
36553: LD_VAR 0 13
36557: NOT
36558: IFFALSE 36562
// exit ;
36560: GO 36633
// for i in list do
36562: LD_ADDR_VAR 0 6
36566: PUSH
36567: LD_VAR 0 13
36571: PUSH
36572: FOR_IN
36573: IFFALSE 36631
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36575: LD_VAR 0 1
36579: PPUSH
36580: LD_STRING M
36582: PUSH
36583: LD_VAR 0 6
36587: PUSH
36588: LD_INT 1
36590: ARRAY
36591: PUSH
36592: LD_VAR 0 6
36596: PUSH
36597: LD_INT 2
36599: ARRAY
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: LD_INT 0
36609: PUSH
36610: LD_INT 0
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: PUSH
36622: EMPTY
36623: LIST
36624: PPUSH
36625: CALL_OW 447
36629: GO 36572
36631: POP
36632: POP
// end ;
36633: LD_VAR 0 5
36637: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36638: LD_EXP 112
36642: NOT
36643: IFFALSE 36693
36645: GO 36647
36647: DISABLE
// begin initHack := true ;
36648: LD_ADDR_EXP 112
36652: PUSH
36653: LD_INT 1
36655: ST_TO_ADDR
// hackTanks := [ ] ;
36656: LD_ADDR_EXP 113
36660: PUSH
36661: EMPTY
36662: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36663: LD_ADDR_EXP 114
36667: PUSH
36668: EMPTY
36669: ST_TO_ADDR
// hackLimit := 3 ;
36670: LD_ADDR_EXP 115
36674: PUSH
36675: LD_INT 3
36677: ST_TO_ADDR
// hackDist := 12 ;
36678: LD_ADDR_EXP 116
36682: PUSH
36683: LD_INT 12
36685: ST_TO_ADDR
// hackCounter := [ ] ;
36686: LD_ADDR_EXP 117
36690: PUSH
36691: EMPTY
36692: ST_TO_ADDR
// end ;
36693: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36694: LD_EXP 112
36698: PUSH
36699: LD_INT 34
36701: PUSH
36702: LD_INT 99
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PPUSH
36709: CALL_OW 69
36713: AND
36714: IFFALSE 36967
36716: GO 36718
36718: DISABLE
36719: LD_INT 0
36721: PPUSH
36722: PPUSH
// begin enable ;
36723: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36724: LD_ADDR_VAR 0 1
36728: PUSH
36729: LD_INT 34
36731: PUSH
36732: LD_INT 99
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PPUSH
36739: CALL_OW 69
36743: PUSH
36744: FOR_IN
36745: IFFALSE 36965
// begin if not i in hackTanks then
36747: LD_VAR 0 1
36751: PUSH
36752: LD_EXP 113
36756: IN
36757: NOT
36758: IFFALSE 36841
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36760: LD_ADDR_EXP 113
36764: PUSH
36765: LD_EXP 113
36769: PPUSH
36770: LD_EXP 113
36774: PUSH
36775: LD_INT 1
36777: PLUS
36778: PPUSH
36779: LD_VAR 0 1
36783: PPUSH
36784: CALL_OW 1
36788: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36789: LD_ADDR_EXP 114
36793: PUSH
36794: LD_EXP 114
36798: PPUSH
36799: LD_EXP 114
36803: PUSH
36804: LD_INT 1
36806: PLUS
36807: PPUSH
36808: EMPTY
36809: PPUSH
36810: CALL_OW 1
36814: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36815: LD_ADDR_EXP 117
36819: PUSH
36820: LD_EXP 117
36824: PPUSH
36825: LD_EXP 117
36829: PUSH
36830: LD_INT 1
36832: PLUS
36833: PPUSH
36834: EMPTY
36835: PPUSH
36836: CALL_OW 1
36840: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36841: LD_VAR 0 1
36845: PPUSH
36846: CALL_OW 302
36850: NOT
36851: IFFALSE 36864
// begin HackUnlinkAll ( i ) ;
36853: LD_VAR 0 1
36857: PPUSH
36858: CALL 36970 0 1
// continue ;
36862: GO 36744
// end ; HackCheckCapturedStatus ( i ) ;
36864: LD_VAR 0 1
36868: PPUSH
36869: CALL 37413 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36873: LD_ADDR_VAR 0 2
36877: PUSH
36878: LD_INT 81
36880: PUSH
36881: LD_VAR 0 1
36885: PPUSH
36886: CALL_OW 255
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 33
36897: PUSH
36898: LD_INT 3
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 91
36907: PUSH
36908: LD_VAR 0 1
36912: PUSH
36913: LD_EXP 116
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 50
36925: PUSH
36926: EMPTY
36927: LIST
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: PPUSH
36935: CALL_OW 69
36939: ST_TO_ADDR
// if not tmp then
36940: LD_VAR 0 2
36944: NOT
36945: IFFALSE 36949
// continue ;
36947: GO 36744
// HackLink ( i , tmp ) ;
36949: LD_VAR 0 1
36953: PPUSH
36954: LD_VAR 0 2
36958: PPUSH
36959: CALL 37106 0 2
// end ;
36963: GO 36744
36965: POP
36966: POP
// end ;
36967: PPOPN 2
36969: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36970: LD_INT 0
36972: PPUSH
36973: PPUSH
36974: PPUSH
// if not hack in hackTanks then
36975: LD_VAR 0 1
36979: PUSH
36980: LD_EXP 113
36984: IN
36985: NOT
36986: IFFALSE 36990
// exit ;
36988: GO 37101
// index := GetElementIndex ( hackTanks , hack ) ;
36990: LD_ADDR_VAR 0 4
36994: PUSH
36995: LD_EXP 113
36999: PPUSH
37000: LD_VAR 0 1
37004: PPUSH
37005: CALL 44543 0 2
37009: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37010: LD_EXP 114
37014: PUSH
37015: LD_VAR 0 4
37019: ARRAY
37020: IFFALSE 37101
// begin for i in hackTanksCaptured [ index ] do
37022: LD_ADDR_VAR 0 3
37026: PUSH
37027: LD_EXP 114
37031: PUSH
37032: LD_VAR 0 4
37036: ARRAY
37037: PUSH
37038: FOR_IN
37039: IFFALSE 37065
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37041: LD_VAR 0 3
37045: PUSH
37046: LD_INT 1
37048: ARRAY
37049: PPUSH
37050: LD_VAR 0 3
37054: PUSH
37055: LD_INT 2
37057: ARRAY
37058: PPUSH
37059: CALL_OW 235
37063: GO 37038
37065: POP
37066: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37067: LD_ADDR_EXP 114
37071: PUSH
37072: LD_EXP 114
37076: PPUSH
37077: LD_VAR 0 4
37081: PPUSH
37082: EMPTY
37083: PPUSH
37084: CALL_OW 1
37088: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37089: LD_VAR 0 1
37093: PPUSH
37094: LD_INT 0
37096: PPUSH
37097: CALL_OW 505
// end ; end ;
37101: LD_VAR 0 2
37105: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37106: LD_INT 0
37108: PPUSH
37109: PPUSH
37110: PPUSH
// if not hack in hackTanks or not vehicles then
37111: LD_VAR 0 1
37115: PUSH
37116: LD_EXP 113
37120: IN
37121: NOT
37122: PUSH
37123: LD_VAR 0 2
37127: NOT
37128: OR
37129: IFFALSE 37133
// exit ;
37131: GO 37408
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37133: LD_ADDR_VAR 0 2
37137: PUSH
37138: LD_VAR 0 1
37142: PPUSH
37143: LD_VAR 0 2
37147: PPUSH
37148: LD_INT 1
37150: PPUSH
37151: LD_INT 1
37153: PPUSH
37154: CALL 45193 0 4
37158: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37159: LD_ADDR_VAR 0 5
37163: PUSH
37164: LD_EXP 113
37168: PPUSH
37169: LD_VAR 0 1
37173: PPUSH
37174: CALL 44543 0 2
37178: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37179: LD_EXP 114
37183: PUSH
37184: LD_VAR 0 5
37188: ARRAY
37189: PUSH
37190: LD_EXP 115
37194: LESS
37195: IFFALSE 37384
// begin for i := 1 to vehicles do
37197: LD_ADDR_VAR 0 4
37201: PUSH
37202: DOUBLE
37203: LD_INT 1
37205: DEC
37206: ST_TO_ADDR
37207: LD_VAR 0 2
37211: PUSH
37212: FOR_TO
37213: IFFALSE 37382
// begin if hackTanksCaptured [ index ] = hackLimit then
37215: LD_EXP 114
37219: PUSH
37220: LD_VAR 0 5
37224: ARRAY
37225: PUSH
37226: LD_EXP 115
37230: EQUAL
37231: IFFALSE 37235
// break ;
37233: GO 37382
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37235: LD_ADDR_EXP 117
37239: PUSH
37240: LD_EXP 117
37244: PPUSH
37245: LD_VAR 0 5
37249: PPUSH
37250: LD_EXP 117
37254: PUSH
37255: LD_VAR 0 5
37259: ARRAY
37260: PUSH
37261: LD_INT 1
37263: PLUS
37264: PPUSH
37265: CALL_OW 1
37269: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37270: LD_ADDR_EXP 114
37274: PUSH
37275: LD_EXP 114
37279: PPUSH
37280: LD_VAR 0 5
37284: PUSH
37285: LD_EXP 114
37289: PUSH
37290: LD_VAR 0 5
37294: ARRAY
37295: PUSH
37296: LD_INT 1
37298: PLUS
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PPUSH
37304: LD_VAR 0 2
37308: PUSH
37309: LD_VAR 0 4
37313: ARRAY
37314: PUSH
37315: LD_VAR 0 2
37319: PUSH
37320: LD_VAR 0 4
37324: ARRAY
37325: PPUSH
37326: CALL_OW 255
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PPUSH
37335: CALL 44758 0 3
37339: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37340: LD_VAR 0 2
37344: PUSH
37345: LD_VAR 0 4
37349: ARRAY
37350: PPUSH
37351: LD_VAR 0 1
37355: PPUSH
37356: CALL_OW 255
37360: PPUSH
37361: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37365: LD_VAR 0 2
37369: PUSH
37370: LD_VAR 0 4
37374: ARRAY
37375: PPUSH
37376: CALL_OW 141
// end ;
37380: GO 37212
37382: POP
37383: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37384: LD_VAR 0 1
37388: PPUSH
37389: LD_EXP 114
37393: PUSH
37394: LD_VAR 0 5
37398: ARRAY
37399: PUSH
37400: LD_INT 0
37402: PLUS
37403: PPUSH
37404: CALL_OW 505
// end ;
37408: LD_VAR 0 3
37412: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37413: LD_INT 0
37415: PPUSH
37416: PPUSH
37417: PPUSH
37418: PPUSH
// if not hack in hackTanks then
37419: LD_VAR 0 1
37423: PUSH
37424: LD_EXP 113
37428: IN
37429: NOT
37430: IFFALSE 37434
// exit ;
37432: GO 37674
// index := GetElementIndex ( hackTanks , hack ) ;
37434: LD_ADDR_VAR 0 4
37438: PUSH
37439: LD_EXP 113
37443: PPUSH
37444: LD_VAR 0 1
37448: PPUSH
37449: CALL 44543 0 2
37453: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37454: LD_ADDR_VAR 0 3
37458: PUSH
37459: DOUBLE
37460: LD_EXP 114
37464: PUSH
37465: LD_VAR 0 4
37469: ARRAY
37470: INC
37471: ST_TO_ADDR
37472: LD_INT 1
37474: PUSH
37475: FOR_DOWNTO
37476: IFFALSE 37648
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37478: LD_ADDR_VAR 0 5
37482: PUSH
37483: LD_EXP 114
37487: PUSH
37488: LD_VAR 0 4
37492: ARRAY
37493: PUSH
37494: LD_VAR 0 3
37498: ARRAY
37499: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37500: LD_VAR 0 5
37504: PUSH
37505: LD_INT 1
37507: ARRAY
37508: PPUSH
37509: CALL_OW 302
37513: NOT
37514: PUSH
37515: LD_VAR 0 5
37519: PUSH
37520: LD_INT 1
37522: ARRAY
37523: PPUSH
37524: CALL_OW 255
37528: PUSH
37529: LD_VAR 0 1
37533: PPUSH
37534: CALL_OW 255
37538: NONEQUAL
37539: OR
37540: IFFALSE 37646
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37542: LD_VAR 0 5
37546: PUSH
37547: LD_INT 1
37549: ARRAY
37550: PPUSH
37551: CALL_OW 305
37555: PUSH
37556: LD_VAR 0 5
37560: PUSH
37561: LD_INT 1
37563: ARRAY
37564: PPUSH
37565: CALL_OW 255
37569: PUSH
37570: LD_VAR 0 1
37574: PPUSH
37575: CALL_OW 255
37579: EQUAL
37580: AND
37581: IFFALSE 37605
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37583: LD_VAR 0 5
37587: PUSH
37588: LD_INT 1
37590: ARRAY
37591: PPUSH
37592: LD_VAR 0 5
37596: PUSH
37597: LD_INT 2
37599: ARRAY
37600: PPUSH
37601: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37605: LD_ADDR_EXP 114
37609: PUSH
37610: LD_EXP 114
37614: PPUSH
37615: LD_VAR 0 4
37619: PPUSH
37620: LD_EXP 114
37624: PUSH
37625: LD_VAR 0 4
37629: ARRAY
37630: PPUSH
37631: LD_VAR 0 3
37635: PPUSH
37636: CALL_OW 3
37640: PPUSH
37641: CALL_OW 1
37645: ST_TO_ADDR
// end ; end ;
37646: GO 37475
37648: POP
37649: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37650: LD_VAR 0 1
37654: PPUSH
37655: LD_EXP 114
37659: PUSH
37660: LD_VAR 0 4
37664: ARRAY
37665: PUSH
37666: LD_INT 0
37668: PLUS
37669: PPUSH
37670: CALL_OW 505
// end ;
37674: LD_VAR 0 2
37678: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37679: LD_INT 0
37681: PPUSH
37682: PPUSH
37683: PPUSH
37684: PPUSH
// if not hack in hackTanks then
37685: LD_VAR 0 1
37689: PUSH
37690: LD_EXP 113
37694: IN
37695: NOT
37696: IFFALSE 37700
// exit ;
37698: GO 37785
// index := GetElementIndex ( hackTanks , hack ) ;
37700: LD_ADDR_VAR 0 5
37704: PUSH
37705: LD_EXP 113
37709: PPUSH
37710: LD_VAR 0 1
37714: PPUSH
37715: CALL 44543 0 2
37719: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37720: LD_ADDR_VAR 0 4
37724: PUSH
37725: DOUBLE
37726: LD_INT 1
37728: DEC
37729: ST_TO_ADDR
37730: LD_EXP 114
37734: PUSH
37735: LD_VAR 0 5
37739: ARRAY
37740: PUSH
37741: FOR_TO
37742: IFFALSE 37783
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37744: LD_EXP 114
37748: PUSH
37749: LD_VAR 0 5
37753: ARRAY
37754: PUSH
37755: LD_VAR 0 4
37759: ARRAY
37760: PUSH
37761: LD_INT 1
37763: ARRAY
37764: PUSH
37765: LD_VAR 0 2
37769: EQUAL
37770: IFFALSE 37781
// KillUnit ( vehicle ) ;
37772: LD_VAR 0 2
37776: PPUSH
37777: CALL_OW 66
37781: GO 37741
37783: POP
37784: POP
// end ;
37785: LD_VAR 0 3
37789: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37790: LD_EXP 118
37794: NOT
37795: IFFALSE 37830
37797: GO 37799
37799: DISABLE
// begin initMiner := true ;
37800: LD_ADDR_EXP 118
37804: PUSH
37805: LD_INT 1
37807: ST_TO_ADDR
// minersList := [ ] ;
37808: LD_ADDR_EXP 119
37812: PUSH
37813: EMPTY
37814: ST_TO_ADDR
// minerMinesList := [ ] ;
37815: LD_ADDR_EXP 120
37819: PUSH
37820: EMPTY
37821: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37822: LD_ADDR_EXP 121
37826: PUSH
37827: LD_INT 5
37829: ST_TO_ADDR
// end ;
37830: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37831: LD_EXP 118
37835: PUSH
37836: LD_INT 34
37838: PUSH
37839: LD_INT 81
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PPUSH
37846: CALL_OW 69
37850: AND
37851: IFFALSE 38312
37853: GO 37855
37855: DISABLE
37856: LD_INT 0
37858: PPUSH
37859: PPUSH
37860: PPUSH
37861: PPUSH
// begin enable ;
37862: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37863: LD_ADDR_VAR 0 1
37867: PUSH
37868: LD_INT 34
37870: PUSH
37871: LD_INT 81
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PPUSH
37878: CALL_OW 69
37882: PUSH
37883: FOR_IN
37884: IFFALSE 37956
// begin if not i in minersList then
37886: LD_VAR 0 1
37890: PUSH
37891: LD_EXP 119
37895: IN
37896: NOT
37897: IFFALSE 37954
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37899: LD_ADDR_EXP 119
37903: PUSH
37904: LD_EXP 119
37908: PPUSH
37909: LD_EXP 119
37913: PUSH
37914: LD_INT 1
37916: PLUS
37917: PPUSH
37918: LD_VAR 0 1
37922: PPUSH
37923: CALL_OW 1
37927: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37928: LD_ADDR_EXP 120
37932: PUSH
37933: LD_EXP 120
37937: PPUSH
37938: LD_EXP 120
37942: PUSH
37943: LD_INT 1
37945: PLUS
37946: PPUSH
37947: EMPTY
37948: PPUSH
37949: CALL_OW 1
37953: ST_TO_ADDR
// end end ;
37954: GO 37883
37956: POP
37957: POP
// for i := minerMinesList downto 1 do
37958: LD_ADDR_VAR 0 1
37962: PUSH
37963: DOUBLE
37964: LD_EXP 120
37968: INC
37969: ST_TO_ADDR
37970: LD_INT 1
37972: PUSH
37973: FOR_DOWNTO
37974: IFFALSE 38310
// begin if IsLive ( minersList [ i ] ) then
37976: LD_EXP 119
37980: PUSH
37981: LD_VAR 0 1
37985: ARRAY
37986: PPUSH
37987: CALL_OW 300
37991: IFFALSE 38019
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37993: LD_EXP 119
37997: PUSH
37998: LD_VAR 0 1
38002: ARRAY
38003: PPUSH
38004: LD_EXP 120
38008: PUSH
38009: LD_VAR 0 1
38013: ARRAY
38014: PPUSH
38015: CALL_OW 505
// if not minerMinesList [ i ] then
38019: LD_EXP 120
38023: PUSH
38024: LD_VAR 0 1
38028: ARRAY
38029: NOT
38030: IFFALSE 38034
// continue ;
38032: GO 37973
// for j := minerMinesList [ i ] downto 1 do
38034: LD_ADDR_VAR 0 2
38038: PUSH
38039: DOUBLE
38040: LD_EXP 120
38044: PUSH
38045: LD_VAR 0 1
38049: ARRAY
38050: INC
38051: ST_TO_ADDR
38052: LD_INT 1
38054: PUSH
38055: FOR_DOWNTO
38056: IFFALSE 38306
// begin side := GetSide ( minersList [ i ] ) ;
38058: LD_ADDR_VAR 0 3
38062: PUSH
38063: LD_EXP 119
38067: PUSH
38068: LD_VAR 0 1
38072: ARRAY
38073: PPUSH
38074: CALL_OW 255
38078: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38079: LD_ADDR_VAR 0 4
38083: PUSH
38084: LD_EXP 120
38088: PUSH
38089: LD_VAR 0 1
38093: ARRAY
38094: PUSH
38095: LD_VAR 0 2
38099: ARRAY
38100: PUSH
38101: LD_INT 1
38103: ARRAY
38104: PPUSH
38105: LD_EXP 120
38109: PUSH
38110: LD_VAR 0 1
38114: ARRAY
38115: PUSH
38116: LD_VAR 0 2
38120: ARRAY
38121: PUSH
38122: LD_INT 2
38124: ARRAY
38125: PPUSH
38126: CALL_OW 428
38130: ST_TO_ADDR
// if not tmp then
38131: LD_VAR 0 4
38135: NOT
38136: IFFALSE 38140
// continue ;
38138: GO 38055
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38140: LD_VAR 0 4
38144: PUSH
38145: LD_INT 81
38147: PUSH
38148: LD_VAR 0 3
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PPUSH
38157: CALL_OW 69
38161: IN
38162: PUSH
38163: LD_EXP 120
38167: PUSH
38168: LD_VAR 0 1
38172: ARRAY
38173: PUSH
38174: LD_VAR 0 2
38178: ARRAY
38179: PUSH
38180: LD_INT 1
38182: ARRAY
38183: PPUSH
38184: LD_EXP 120
38188: PUSH
38189: LD_VAR 0 1
38193: ARRAY
38194: PUSH
38195: LD_VAR 0 2
38199: ARRAY
38200: PUSH
38201: LD_INT 2
38203: ARRAY
38204: PPUSH
38205: CALL_OW 458
38209: AND
38210: IFFALSE 38304
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38212: LD_EXP 120
38216: PUSH
38217: LD_VAR 0 1
38221: ARRAY
38222: PUSH
38223: LD_VAR 0 2
38227: ARRAY
38228: PUSH
38229: LD_INT 1
38231: ARRAY
38232: PPUSH
38233: LD_EXP 120
38237: PUSH
38238: LD_VAR 0 1
38242: ARRAY
38243: PUSH
38244: LD_VAR 0 2
38248: ARRAY
38249: PUSH
38250: LD_INT 2
38252: ARRAY
38253: PPUSH
38254: LD_VAR 0 3
38258: PPUSH
38259: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38263: LD_ADDR_EXP 120
38267: PUSH
38268: LD_EXP 120
38272: PPUSH
38273: LD_VAR 0 1
38277: PPUSH
38278: LD_EXP 120
38282: PUSH
38283: LD_VAR 0 1
38287: ARRAY
38288: PPUSH
38289: LD_VAR 0 2
38293: PPUSH
38294: CALL_OW 3
38298: PPUSH
38299: CALL_OW 1
38303: ST_TO_ADDR
// end ; end ;
38304: GO 38055
38306: POP
38307: POP
// end ;
38308: GO 37973
38310: POP
38311: POP
// end ;
38312: PPOPN 4
38314: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38315: LD_INT 0
38317: PPUSH
38318: PPUSH
// result := false ;
38319: LD_ADDR_VAR 0 4
38323: PUSH
38324: LD_INT 0
38326: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38327: LD_VAR 0 1
38331: PPUSH
38332: CALL_OW 264
38336: PUSH
38337: LD_INT 81
38339: EQUAL
38340: NOT
38341: IFFALSE 38345
// exit ;
38343: GO 38585
// index := GetElementIndex ( minersList , unit ) ;
38345: LD_ADDR_VAR 0 5
38349: PUSH
38350: LD_EXP 119
38354: PPUSH
38355: LD_VAR 0 1
38359: PPUSH
38360: CALL 44543 0 2
38364: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38365: LD_EXP 120
38369: PUSH
38370: LD_VAR 0 5
38374: ARRAY
38375: PUSH
38376: LD_EXP 121
38380: GREATEREQUAL
38381: IFFALSE 38385
// exit ;
38383: GO 38585
// ComMoveXY ( unit , x , y ) ;
38385: LD_VAR 0 1
38389: PPUSH
38390: LD_VAR 0 2
38394: PPUSH
38395: LD_VAR 0 3
38399: PPUSH
38400: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38404: LD_INT 35
38406: PPUSH
38407: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38411: LD_VAR 0 1
38415: PPUSH
38416: LD_VAR 0 2
38420: PPUSH
38421: LD_VAR 0 3
38425: PPUSH
38426: CALL 75898 0 3
38430: NOT
38431: PUSH
38432: LD_VAR 0 1
38436: PPUSH
38437: CALL_OW 314
38441: AND
38442: IFFALSE 38446
// exit ;
38444: GO 38585
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38446: LD_VAR 0 2
38450: PPUSH
38451: LD_VAR 0 3
38455: PPUSH
38456: CALL_OW 428
38460: PUSH
38461: LD_VAR 0 1
38465: EQUAL
38466: PUSH
38467: LD_VAR 0 1
38471: PPUSH
38472: CALL_OW 314
38476: NOT
38477: AND
38478: IFFALSE 38404
// PlaySoundXY ( x , y , PlantMine ) ;
38480: LD_VAR 0 2
38484: PPUSH
38485: LD_VAR 0 3
38489: PPUSH
38490: LD_STRING PlantMine
38492: PPUSH
38493: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38497: LD_VAR 0 2
38501: PPUSH
38502: LD_VAR 0 3
38506: PPUSH
38507: LD_VAR 0 1
38511: PPUSH
38512: CALL_OW 255
38516: PPUSH
38517: LD_INT 0
38519: PPUSH
38520: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38524: LD_ADDR_EXP 120
38528: PUSH
38529: LD_EXP 120
38533: PPUSH
38534: LD_VAR 0 5
38538: PUSH
38539: LD_EXP 120
38543: PUSH
38544: LD_VAR 0 5
38548: ARRAY
38549: PUSH
38550: LD_INT 1
38552: PLUS
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PPUSH
38558: LD_VAR 0 2
38562: PUSH
38563: LD_VAR 0 3
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PPUSH
38572: CALL 44758 0 3
38576: ST_TO_ADDR
// result := true ;
38577: LD_ADDR_VAR 0 4
38581: PUSH
38582: LD_INT 1
38584: ST_TO_ADDR
// end ;
38585: LD_VAR 0 4
38589: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38590: LD_INT 0
38592: PPUSH
38593: PPUSH
38594: PPUSH
// if not unit in minersList then
38595: LD_VAR 0 1
38599: PUSH
38600: LD_EXP 119
38604: IN
38605: NOT
38606: IFFALSE 38610
// exit ;
38608: GO 39002
// index := GetElementIndex ( minersList , unit ) ;
38610: LD_ADDR_VAR 0 6
38614: PUSH
38615: LD_EXP 119
38619: PPUSH
38620: LD_VAR 0 1
38624: PPUSH
38625: CALL 44543 0 2
38629: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38630: LD_ADDR_VAR 0 5
38634: PUSH
38635: DOUBLE
38636: LD_EXP 120
38640: PUSH
38641: LD_VAR 0 6
38645: ARRAY
38646: INC
38647: ST_TO_ADDR
38648: LD_INT 1
38650: PUSH
38651: FOR_DOWNTO
38652: IFFALSE 38813
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38654: LD_EXP 120
38658: PUSH
38659: LD_VAR 0 6
38663: ARRAY
38664: PUSH
38665: LD_VAR 0 5
38669: ARRAY
38670: PUSH
38671: LD_INT 1
38673: ARRAY
38674: PUSH
38675: LD_VAR 0 2
38679: EQUAL
38680: PUSH
38681: LD_EXP 120
38685: PUSH
38686: LD_VAR 0 6
38690: ARRAY
38691: PUSH
38692: LD_VAR 0 5
38696: ARRAY
38697: PUSH
38698: LD_INT 2
38700: ARRAY
38701: PUSH
38702: LD_VAR 0 3
38706: EQUAL
38707: AND
38708: IFFALSE 38811
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38710: LD_EXP 120
38714: PUSH
38715: LD_VAR 0 6
38719: ARRAY
38720: PUSH
38721: LD_VAR 0 5
38725: ARRAY
38726: PUSH
38727: LD_INT 1
38729: ARRAY
38730: PPUSH
38731: LD_EXP 120
38735: PUSH
38736: LD_VAR 0 6
38740: ARRAY
38741: PUSH
38742: LD_VAR 0 5
38746: ARRAY
38747: PUSH
38748: LD_INT 2
38750: ARRAY
38751: PPUSH
38752: LD_VAR 0 1
38756: PPUSH
38757: CALL_OW 255
38761: PPUSH
38762: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38766: LD_ADDR_EXP 120
38770: PUSH
38771: LD_EXP 120
38775: PPUSH
38776: LD_VAR 0 6
38780: PPUSH
38781: LD_EXP 120
38785: PUSH
38786: LD_VAR 0 6
38790: ARRAY
38791: PPUSH
38792: LD_VAR 0 5
38796: PPUSH
38797: CALL_OW 3
38801: PPUSH
38802: CALL_OW 1
38806: ST_TO_ADDR
// exit ;
38807: POP
38808: POP
38809: GO 39002
// end ; end ;
38811: GO 38651
38813: POP
38814: POP
// for i := minerMinesList [ index ] downto 1 do
38815: LD_ADDR_VAR 0 5
38819: PUSH
38820: DOUBLE
38821: LD_EXP 120
38825: PUSH
38826: LD_VAR 0 6
38830: ARRAY
38831: INC
38832: ST_TO_ADDR
38833: LD_INT 1
38835: PUSH
38836: FOR_DOWNTO
38837: IFFALSE 39000
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38839: LD_EXP 120
38843: PUSH
38844: LD_VAR 0 6
38848: ARRAY
38849: PUSH
38850: LD_VAR 0 5
38854: ARRAY
38855: PUSH
38856: LD_INT 1
38858: ARRAY
38859: PPUSH
38860: LD_EXP 120
38864: PUSH
38865: LD_VAR 0 6
38869: ARRAY
38870: PUSH
38871: LD_VAR 0 5
38875: ARRAY
38876: PUSH
38877: LD_INT 2
38879: ARRAY
38880: PPUSH
38881: LD_VAR 0 2
38885: PPUSH
38886: LD_VAR 0 3
38890: PPUSH
38891: CALL_OW 298
38895: PUSH
38896: LD_INT 6
38898: LESS
38899: IFFALSE 38998
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38901: LD_EXP 120
38905: PUSH
38906: LD_VAR 0 6
38910: ARRAY
38911: PUSH
38912: LD_VAR 0 5
38916: ARRAY
38917: PUSH
38918: LD_INT 1
38920: ARRAY
38921: PPUSH
38922: LD_EXP 120
38926: PUSH
38927: LD_VAR 0 6
38931: ARRAY
38932: PUSH
38933: LD_VAR 0 5
38937: ARRAY
38938: PUSH
38939: LD_INT 2
38941: ARRAY
38942: PPUSH
38943: LD_VAR 0 1
38947: PPUSH
38948: CALL_OW 255
38952: PPUSH
38953: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38957: LD_ADDR_EXP 120
38961: PUSH
38962: LD_EXP 120
38966: PPUSH
38967: LD_VAR 0 6
38971: PPUSH
38972: LD_EXP 120
38976: PUSH
38977: LD_VAR 0 6
38981: ARRAY
38982: PPUSH
38983: LD_VAR 0 5
38987: PPUSH
38988: CALL_OW 3
38992: PPUSH
38993: CALL_OW 1
38997: ST_TO_ADDR
// end ; end ;
38998: GO 38836
39000: POP
39001: POP
// end ;
39002: LD_VAR 0 4
39006: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39007: LD_INT 0
39009: PPUSH
39010: PPUSH
39011: PPUSH
39012: PPUSH
39013: PPUSH
39014: PPUSH
39015: PPUSH
39016: PPUSH
39017: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39018: LD_VAR 0 1
39022: PPUSH
39023: CALL_OW 264
39027: PUSH
39028: LD_INT 81
39030: EQUAL
39031: NOT
39032: PUSH
39033: LD_VAR 0 1
39037: PUSH
39038: LD_EXP 119
39042: IN
39043: NOT
39044: OR
39045: IFFALSE 39049
// exit ;
39047: GO 39371
// index := GetElementIndex ( minersList , unit ) ;
39049: LD_ADDR_VAR 0 6
39053: PUSH
39054: LD_EXP 119
39058: PPUSH
39059: LD_VAR 0 1
39063: PPUSH
39064: CALL 44543 0 2
39068: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39069: LD_ADDR_VAR 0 8
39073: PUSH
39074: LD_EXP 121
39078: PUSH
39079: LD_EXP 120
39083: PUSH
39084: LD_VAR 0 6
39088: ARRAY
39089: MINUS
39090: ST_TO_ADDR
// if not minesFreeAmount then
39091: LD_VAR 0 8
39095: NOT
39096: IFFALSE 39100
// exit ;
39098: GO 39371
// tmp := [ ] ;
39100: LD_ADDR_VAR 0 7
39104: PUSH
39105: EMPTY
39106: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39107: LD_ADDR_VAR 0 5
39111: PUSH
39112: DOUBLE
39113: LD_INT 1
39115: DEC
39116: ST_TO_ADDR
39117: LD_VAR 0 8
39121: PUSH
39122: FOR_TO
39123: IFFALSE 39318
// begin _d := rand ( 0 , 5 ) ;
39125: LD_ADDR_VAR 0 11
39129: PUSH
39130: LD_INT 0
39132: PPUSH
39133: LD_INT 5
39135: PPUSH
39136: CALL_OW 12
39140: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39141: LD_ADDR_VAR 0 12
39145: PUSH
39146: LD_INT 2
39148: PPUSH
39149: LD_INT 6
39151: PPUSH
39152: CALL_OW 12
39156: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39157: LD_ADDR_VAR 0 9
39161: PUSH
39162: LD_VAR 0 2
39166: PPUSH
39167: LD_VAR 0 11
39171: PPUSH
39172: LD_VAR 0 12
39176: PPUSH
39177: CALL_OW 272
39181: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39182: LD_ADDR_VAR 0 10
39186: PUSH
39187: LD_VAR 0 3
39191: PPUSH
39192: LD_VAR 0 11
39196: PPUSH
39197: LD_VAR 0 12
39201: PPUSH
39202: CALL_OW 273
39206: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39207: LD_VAR 0 9
39211: PPUSH
39212: LD_VAR 0 10
39216: PPUSH
39217: CALL_OW 488
39221: PUSH
39222: LD_VAR 0 9
39226: PUSH
39227: LD_VAR 0 10
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_VAR 0 7
39240: IN
39241: NOT
39242: AND
39243: PUSH
39244: LD_VAR 0 9
39248: PPUSH
39249: LD_VAR 0 10
39253: PPUSH
39254: CALL_OW 458
39258: NOT
39259: AND
39260: IFFALSE 39302
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39262: LD_ADDR_VAR 0 7
39266: PUSH
39267: LD_VAR 0 7
39271: PPUSH
39272: LD_VAR 0 7
39276: PUSH
39277: LD_INT 1
39279: PLUS
39280: PPUSH
39281: LD_VAR 0 9
39285: PUSH
39286: LD_VAR 0 10
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PPUSH
39295: CALL_OW 1
39299: ST_TO_ADDR
39300: GO 39316
// i := i - 1 ;
39302: LD_ADDR_VAR 0 5
39306: PUSH
39307: LD_VAR 0 5
39311: PUSH
39312: LD_INT 1
39314: MINUS
39315: ST_TO_ADDR
// end ;
39316: GO 39122
39318: POP
39319: POP
// for i in tmp do
39320: LD_ADDR_VAR 0 5
39324: PUSH
39325: LD_VAR 0 7
39329: PUSH
39330: FOR_IN
39331: IFFALSE 39369
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39333: LD_VAR 0 1
39337: PPUSH
39338: LD_VAR 0 5
39342: PUSH
39343: LD_INT 1
39345: ARRAY
39346: PPUSH
39347: LD_VAR 0 5
39351: PUSH
39352: LD_INT 2
39354: ARRAY
39355: PPUSH
39356: CALL 38315 0 3
39360: NOT
39361: IFFALSE 39367
// exit ;
39363: POP
39364: POP
39365: GO 39371
39367: GO 39330
39369: POP
39370: POP
// end ;
39371: LD_VAR 0 4
39375: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39376: LD_INT 0
39378: PPUSH
39379: PPUSH
39380: PPUSH
39381: PPUSH
39382: PPUSH
39383: PPUSH
39384: PPUSH
// if not GetClass ( unit ) = class_sniper then
39385: LD_VAR 0 1
39389: PPUSH
39390: CALL_OW 257
39394: PUSH
39395: LD_INT 5
39397: EQUAL
39398: NOT
39399: IFFALSE 39403
// exit ;
39401: GO 39791
// dist := 8 ;
39403: LD_ADDR_VAR 0 5
39407: PUSH
39408: LD_INT 8
39410: ST_TO_ADDR
// viewRange := 12 ;
39411: LD_ADDR_VAR 0 7
39415: PUSH
39416: LD_INT 12
39418: ST_TO_ADDR
// side := GetSide ( unit ) ;
39419: LD_ADDR_VAR 0 6
39423: PUSH
39424: LD_VAR 0 1
39428: PPUSH
39429: CALL_OW 255
39433: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39434: LD_INT 61
39436: PPUSH
39437: LD_VAR 0 6
39441: PPUSH
39442: CALL_OW 321
39446: PUSH
39447: LD_INT 2
39449: EQUAL
39450: IFFALSE 39460
// viewRange := 16 ;
39452: LD_ADDR_VAR 0 7
39456: PUSH
39457: LD_INT 16
39459: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39460: LD_VAR 0 1
39464: PPUSH
39465: LD_VAR 0 2
39469: PPUSH
39470: LD_VAR 0 3
39474: PPUSH
39475: CALL_OW 297
39479: PUSH
39480: LD_VAR 0 5
39484: GREATER
39485: IFFALSE 39564
// begin ComMoveXY ( unit , x , y ) ;
39487: LD_VAR 0 1
39491: PPUSH
39492: LD_VAR 0 2
39496: PPUSH
39497: LD_VAR 0 3
39501: PPUSH
39502: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39506: LD_INT 35
39508: PPUSH
39509: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39513: LD_VAR 0 1
39517: PPUSH
39518: LD_VAR 0 2
39522: PPUSH
39523: LD_VAR 0 3
39527: PPUSH
39528: CALL 75898 0 3
39532: NOT
39533: IFFALSE 39537
// exit ;
39535: GO 39791
// until GetDistUnitXY ( unit , x , y ) < dist ;
39537: LD_VAR 0 1
39541: PPUSH
39542: LD_VAR 0 2
39546: PPUSH
39547: LD_VAR 0 3
39551: PPUSH
39552: CALL_OW 297
39556: PUSH
39557: LD_VAR 0 5
39561: LESS
39562: IFFALSE 39506
// end ; ComTurnXY ( unit , x , y ) ;
39564: LD_VAR 0 1
39568: PPUSH
39569: LD_VAR 0 2
39573: PPUSH
39574: LD_VAR 0 3
39578: PPUSH
39579: CALL_OW 118
// wait ( 5 ) ;
39583: LD_INT 5
39585: PPUSH
39586: CALL_OW 67
// _d := GetDir ( unit ) ;
39590: LD_ADDR_VAR 0 10
39594: PUSH
39595: LD_VAR 0 1
39599: PPUSH
39600: CALL_OW 254
39604: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39605: LD_ADDR_VAR 0 8
39609: PUSH
39610: LD_VAR 0 1
39614: PPUSH
39615: CALL_OW 250
39619: PPUSH
39620: LD_VAR 0 10
39624: PPUSH
39625: LD_VAR 0 5
39629: PPUSH
39630: CALL_OW 272
39634: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39635: LD_ADDR_VAR 0 9
39639: PUSH
39640: LD_VAR 0 1
39644: PPUSH
39645: CALL_OW 251
39649: PPUSH
39650: LD_VAR 0 10
39654: PPUSH
39655: LD_VAR 0 5
39659: PPUSH
39660: CALL_OW 273
39664: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39665: LD_VAR 0 8
39669: PPUSH
39670: LD_VAR 0 9
39674: PPUSH
39675: CALL_OW 488
39679: NOT
39680: IFFALSE 39684
// exit ;
39682: GO 39791
// ComAnimCustom ( unit , 1 ) ;
39684: LD_VAR 0 1
39688: PPUSH
39689: LD_INT 1
39691: PPUSH
39692: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39696: LD_VAR 0 8
39700: PPUSH
39701: LD_VAR 0 9
39705: PPUSH
39706: LD_VAR 0 6
39710: PPUSH
39711: LD_VAR 0 7
39715: PPUSH
39716: CALL_OW 330
// repeat wait ( 1 ) ;
39720: LD_INT 1
39722: PPUSH
39723: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39727: LD_VAR 0 1
39731: PPUSH
39732: CALL_OW 316
39736: PUSH
39737: LD_VAR 0 1
39741: PPUSH
39742: CALL_OW 314
39746: OR
39747: PUSH
39748: LD_VAR 0 1
39752: PPUSH
39753: CALL_OW 302
39757: NOT
39758: OR
39759: PUSH
39760: LD_VAR 0 1
39764: PPUSH
39765: CALL_OW 301
39769: OR
39770: IFFALSE 39720
// RemoveSeeing ( _x , _y , side ) ;
39772: LD_VAR 0 8
39776: PPUSH
39777: LD_VAR 0 9
39781: PPUSH
39782: LD_VAR 0 6
39786: PPUSH
39787: CALL_OW 331
// end ; end_of_file
39791: LD_VAR 0 4
39795: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39796: LD_INT 0
39798: PPUSH
39799: PPUSH
// if exist_mode then
39800: LD_VAR 0 2
39804: IFFALSE 39829
// unit := CreateCharacter ( prefix & ident ) else
39806: LD_ADDR_VAR 0 5
39810: PUSH
39811: LD_VAR 0 3
39815: PUSH
39816: LD_VAR 0 1
39820: STR
39821: PPUSH
39822: CALL_OW 34
39826: ST_TO_ADDR
39827: GO 39844
// unit := NewCharacter ( ident ) ;
39829: LD_ADDR_VAR 0 5
39833: PUSH
39834: LD_VAR 0 1
39838: PPUSH
39839: CALL_OW 25
39843: ST_TO_ADDR
// result := unit ;
39844: LD_ADDR_VAR 0 4
39848: PUSH
39849: LD_VAR 0 5
39853: ST_TO_ADDR
// end ;
39854: LD_VAR 0 4
39858: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39859: LD_INT 0
39861: PPUSH
39862: PPUSH
// if not side or not nation then
39863: LD_VAR 0 1
39867: NOT
39868: PUSH
39869: LD_VAR 0 2
39873: NOT
39874: OR
39875: IFFALSE 39879
// exit ;
39877: GO 40647
// case nation of nation_american :
39879: LD_VAR 0 2
39883: PUSH
39884: LD_INT 1
39886: DOUBLE
39887: EQUAL
39888: IFTRUE 39892
39890: GO 40106
39892: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39893: LD_ADDR_VAR 0 4
39897: PUSH
39898: LD_INT 35
39900: PUSH
39901: LD_INT 45
39903: PUSH
39904: LD_INT 46
39906: PUSH
39907: LD_INT 47
39909: PUSH
39910: LD_INT 82
39912: PUSH
39913: LD_INT 83
39915: PUSH
39916: LD_INT 84
39918: PUSH
39919: LD_INT 85
39921: PUSH
39922: LD_INT 86
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: LD_INT 2
39930: PUSH
39931: LD_INT 6
39933: PUSH
39934: LD_INT 15
39936: PUSH
39937: LD_INT 16
39939: PUSH
39940: LD_INT 7
39942: PUSH
39943: LD_INT 12
39945: PUSH
39946: LD_INT 13
39948: PUSH
39949: LD_INT 10
39951: PUSH
39952: LD_INT 14
39954: PUSH
39955: LD_INT 20
39957: PUSH
39958: LD_INT 21
39960: PUSH
39961: LD_INT 22
39963: PUSH
39964: LD_INT 25
39966: PUSH
39967: LD_INT 32
39969: PUSH
39970: LD_INT 27
39972: PUSH
39973: LD_INT 36
39975: PUSH
39976: LD_INT 69
39978: PUSH
39979: LD_INT 39
39981: PUSH
39982: LD_INT 34
39984: PUSH
39985: LD_INT 40
39987: PUSH
39988: LD_INT 48
39990: PUSH
39991: LD_INT 49
39993: PUSH
39994: LD_INT 50
39996: PUSH
39997: LD_INT 51
39999: PUSH
40000: LD_INT 52
40002: PUSH
40003: LD_INT 53
40005: PUSH
40006: LD_INT 54
40008: PUSH
40009: LD_INT 55
40011: PUSH
40012: LD_INT 56
40014: PUSH
40015: LD_INT 57
40017: PUSH
40018: LD_INT 58
40020: PUSH
40021: LD_INT 59
40023: PUSH
40024: LD_INT 60
40026: PUSH
40027: LD_INT 61
40029: PUSH
40030: LD_INT 62
40032: PUSH
40033: LD_INT 80
40035: PUSH
40036: LD_INT 82
40038: PUSH
40039: LD_INT 83
40041: PUSH
40042: LD_INT 84
40044: PUSH
40045: LD_INT 85
40047: PUSH
40048: LD_INT 86
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: ST_TO_ADDR
40104: GO 40571
40106: LD_INT 2
40108: DOUBLE
40109: EQUAL
40110: IFTRUE 40114
40112: GO 40340
40114: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40115: LD_ADDR_VAR 0 4
40119: PUSH
40120: LD_INT 35
40122: PUSH
40123: LD_INT 45
40125: PUSH
40126: LD_INT 46
40128: PUSH
40129: LD_INT 47
40131: PUSH
40132: LD_INT 82
40134: PUSH
40135: LD_INT 83
40137: PUSH
40138: LD_INT 84
40140: PUSH
40141: LD_INT 85
40143: PUSH
40144: LD_INT 87
40146: PUSH
40147: LD_INT 70
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: LD_INT 11
40155: PUSH
40156: LD_INT 3
40158: PUSH
40159: LD_INT 4
40161: PUSH
40162: LD_INT 5
40164: PUSH
40165: LD_INT 6
40167: PUSH
40168: LD_INT 15
40170: PUSH
40171: LD_INT 18
40173: PUSH
40174: LD_INT 7
40176: PUSH
40177: LD_INT 17
40179: PUSH
40180: LD_INT 8
40182: PUSH
40183: LD_INT 20
40185: PUSH
40186: LD_INT 21
40188: PUSH
40189: LD_INT 22
40191: PUSH
40192: LD_INT 72
40194: PUSH
40195: LD_INT 26
40197: PUSH
40198: LD_INT 69
40200: PUSH
40201: LD_INT 39
40203: PUSH
40204: LD_INT 40
40206: PUSH
40207: LD_INT 41
40209: PUSH
40210: LD_INT 42
40212: PUSH
40213: LD_INT 43
40215: PUSH
40216: LD_INT 48
40218: PUSH
40219: LD_INT 49
40221: PUSH
40222: LD_INT 50
40224: PUSH
40225: LD_INT 51
40227: PUSH
40228: LD_INT 52
40230: PUSH
40231: LD_INT 53
40233: PUSH
40234: LD_INT 54
40236: PUSH
40237: LD_INT 55
40239: PUSH
40240: LD_INT 56
40242: PUSH
40243: LD_INT 60
40245: PUSH
40246: LD_INT 61
40248: PUSH
40249: LD_INT 62
40251: PUSH
40252: LD_INT 66
40254: PUSH
40255: LD_INT 67
40257: PUSH
40258: LD_INT 68
40260: PUSH
40261: LD_INT 81
40263: PUSH
40264: LD_INT 82
40266: PUSH
40267: LD_INT 83
40269: PUSH
40270: LD_INT 84
40272: PUSH
40273: LD_INT 85
40275: PUSH
40276: LD_INT 87
40278: PUSH
40279: LD_INT 88
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: ST_TO_ADDR
40338: GO 40571
40340: LD_INT 3
40342: DOUBLE
40343: EQUAL
40344: IFTRUE 40348
40346: GO 40570
40348: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40349: LD_ADDR_VAR 0 4
40353: PUSH
40354: LD_INT 46
40356: PUSH
40357: LD_INT 47
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: LD_INT 2
40365: PUSH
40366: LD_INT 82
40368: PUSH
40369: LD_INT 83
40371: PUSH
40372: LD_INT 84
40374: PUSH
40375: LD_INT 85
40377: PUSH
40378: LD_INT 86
40380: PUSH
40381: LD_INT 11
40383: PUSH
40384: LD_INT 9
40386: PUSH
40387: LD_INT 20
40389: PUSH
40390: LD_INT 19
40392: PUSH
40393: LD_INT 21
40395: PUSH
40396: LD_INT 24
40398: PUSH
40399: LD_INT 22
40401: PUSH
40402: LD_INT 25
40404: PUSH
40405: LD_INT 28
40407: PUSH
40408: LD_INT 29
40410: PUSH
40411: LD_INT 30
40413: PUSH
40414: LD_INT 31
40416: PUSH
40417: LD_INT 37
40419: PUSH
40420: LD_INT 38
40422: PUSH
40423: LD_INT 32
40425: PUSH
40426: LD_INT 27
40428: PUSH
40429: LD_INT 33
40431: PUSH
40432: LD_INT 69
40434: PUSH
40435: LD_INT 39
40437: PUSH
40438: LD_INT 34
40440: PUSH
40441: LD_INT 40
40443: PUSH
40444: LD_INT 71
40446: PUSH
40447: LD_INT 23
40449: PUSH
40450: LD_INT 44
40452: PUSH
40453: LD_INT 48
40455: PUSH
40456: LD_INT 49
40458: PUSH
40459: LD_INT 50
40461: PUSH
40462: LD_INT 51
40464: PUSH
40465: LD_INT 52
40467: PUSH
40468: LD_INT 53
40470: PUSH
40471: LD_INT 54
40473: PUSH
40474: LD_INT 55
40476: PUSH
40477: LD_INT 56
40479: PUSH
40480: LD_INT 57
40482: PUSH
40483: LD_INT 58
40485: PUSH
40486: LD_INT 59
40488: PUSH
40489: LD_INT 63
40491: PUSH
40492: LD_INT 64
40494: PUSH
40495: LD_INT 65
40497: PUSH
40498: LD_INT 82
40500: PUSH
40501: LD_INT 83
40503: PUSH
40504: LD_INT 84
40506: PUSH
40507: LD_INT 85
40509: PUSH
40510: LD_INT 86
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: ST_TO_ADDR
40568: GO 40571
40570: POP
// if state > - 1 and state < 3 then
40571: LD_VAR 0 3
40575: PUSH
40576: LD_INT 1
40578: NEG
40579: GREATER
40580: PUSH
40581: LD_VAR 0 3
40585: PUSH
40586: LD_INT 3
40588: LESS
40589: AND
40590: IFFALSE 40647
// for i in result do
40592: LD_ADDR_VAR 0 5
40596: PUSH
40597: LD_VAR 0 4
40601: PUSH
40602: FOR_IN
40603: IFFALSE 40645
// if GetTech ( i , side ) <> state then
40605: LD_VAR 0 5
40609: PPUSH
40610: LD_VAR 0 1
40614: PPUSH
40615: CALL_OW 321
40619: PUSH
40620: LD_VAR 0 3
40624: NONEQUAL
40625: IFFALSE 40643
// result := result diff i ;
40627: LD_ADDR_VAR 0 4
40631: PUSH
40632: LD_VAR 0 4
40636: PUSH
40637: LD_VAR 0 5
40641: DIFF
40642: ST_TO_ADDR
40643: GO 40602
40645: POP
40646: POP
// end ;
40647: LD_VAR 0 4
40651: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40652: LD_INT 0
40654: PPUSH
40655: PPUSH
40656: PPUSH
// result := true ;
40657: LD_ADDR_VAR 0 3
40661: PUSH
40662: LD_INT 1
40664: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40665: LD_ADDR_VAR 0 5
40669: PUSH
40670: LD_VAR 0 2
40674: PPUSH
40675: CALL_OW 480
40679: ST_TO_ADDR
// if not tmp then
40680: LD_VAR 0 5
40684: NOT
40685: IFFALSE 40689
// exit ;
40687: GO 40738
// for i in tmp do
40689: LD_ADDR_VAR 0 4
40693: PUSH
40694: LD_VAR 0 5
40698: PUSH
40699: FOR_IN
40700: IFFALSE 40736
// if GetTech ( i , side ) <> state_researched then
40702: LD_VAR 0 4
40706: PPUSH
40707: LD_VAR 0 1
40711: PPUSH
40712: CALL_OW 321
40716: PUSH
40717: LD_INT 2
40719: NONEQUAL
40720: IFFALSE 40734
// begin result := false ;
40722: LD_ADDR_VAR 0 3
40726: PUSH
40727: LD_INT 0
40729: ST_TO_ADDR
// exit ;
40730: POP
40731: POP
40732: GO 40738
// end ;
40734: GO 40699
40736: POP
40737: POP
// end ;
40738: LD_VAR 0 3
40742: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40743: LD_INT 0
40745: PPUSH
40746: PPUSH
40747: PPUSH
40748: PPUSH
40749: PPUSH
40750: PPUSH
40751: PPUSH
40752: PPUSH
40753: PPUSH
40754: PPUSH
40755: PPUSH
40756: PPUSH
40757: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40758: LD_VAR 0 1
40762: NOT
40763: PUSH
40764: LD_VAR 0 1
40768: PPUSH
40769: CALL_OW 257
40773: PUSH
40774: LD_INT 9
40776: NONEQUAL
40777: OR
40778: IFFALSE 40782
// exit ;
40780: GO 41355
// side := GetSide ( unit ) ;
40782: LD_ADDR_VAR 0 9
40786: PUSH
40787: LD_VAR 0 1
40791: PPUSH
40792: CALL_OW 255
40796: ST_TO_ADDR
// tech_space := tech_spacanom ;
40797: LD_ADDR_VAR 0 12
40801: PUSH
40802: LD_INT 29
40804: ST_TO_ADDR
// tech_time := tech_taurad ;
40805: LD_ADDR_VAR 0 13
40809: PUSH
40810: LD_INT 28
40812: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40813: LD_ADDR_VAR 0 11
40817: PUSH
40818: LD_VAR 0 1
40822: PPUSH
40823: CALL_OW 310
40827: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40828: LD_VAR 0 11
40832: PPUSH
40833: CALL_OW 247
40837: PUSH
40838: LD_INT 2
40840: EQUAL
40841: IFFALSE 40845
// exit ;
40843: GO 41355
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40845: LD_ADDR_VAR 0 8
40849: PUSH
40850: LD_INT 81
40852: PUSH
40853: LD_VAR 0 9
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 3
40864: PUSH
40865: LD_INT 21
40867: PUSH
40868: LD_INT 3
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PPUSH
40883: CALL_OW 69
40887: ST_TO_ADDR
// if not tmp then
40888: LD_VAR 0 8
40892: NOT
40893: IFFALSE 40897
// exit ;
40895: GO 41355
// if in_unit then
40897: LD_VAR 0 11
40901: IFFALSE 40925
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40903: LD_ADDR_VAR 0 10
40907: PUSH
40908: LD_VAR 0 8
40912: PPUSH
40913: LD_VAR 0 11
40917: PPUSH
40918: CALL_OW 74
40922: ST_TO_ADDR
40923: GO 40945
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40925: LD_ADDR_VAR 0 10
40929: PUSH
40930: LD_VAR 0 8
40934: PPUSH
40935: LD_VAR 0 1
40939: PPUSH
40940: CALL_OW 74
40944: ST_TO_ADDR
// if not enemy then
40945: LD_VAR 0 10
40949: NOT
40950: IFFALSE 40954
// exit ;
40952: GO 41355
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40954: LD_VAR 0 11
40958: PUSH
40959: LD_VAR 0 11
40963: PPUSH
40964: LD_VAR 0 10
40968: PPUSH
40969: CALL_OW 296
40973: PUSH
40974: LD_INT 13
40976: GREATER
40977: AND
40978: PUSH
40979: LD_VAR 0 1
40983: PPUSH
40984: LD_VAR 0 10
40988: PPUSH
40989: CALL_OW 296
40993: PUSH
40994: LD_INT 12
40996: GREATER
40997: OR
40998: IFFALSE 41002
// exit ;
41000: GO 41355
// missile := [ 1 ] ;
41002: LD_ADDR_VAR 0 14
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41013: LD_VAR 0 9
41017: PPUSH
41018: LD_VAR 0 12
41022: PPUSH
41023: CALL_OW 325
41027: IFFALSE 41056
// missile := Replace ( missile , missile + 1 , 2 ) ;
41029: LD_ADDR_VAR 0 14
41033: PUSH
41034: LD_VAR 0 14
41038: PPUSH
41039: LD_VAR 0 14
41043: PUSH
41044: LD_INT 1
41046: PLUS
41047: PPUSH
41048: LD_INT 2
41050: PPUSH
41051: CALL_OW 1
41055: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41056: LD_VAR 0 9
41060: PPUSH
41061: LD_VAR 0 13
41065: PPUSH
41066: CALL_OW 325
41070: PUSH
41071: LD_VAR 0 10
41075: PPUSH
41076: CALL_OW 255
41080: PPUSH
41081: LD_VAR 0 13
41085: PPUSH
41086: CALL_OW 325
41090: NOT
41091: AND
41092: IFFALSE 41121
// missile := Replace ( missile , missile + 1 , 3 ) ;
41094: LD_ADDR_VAR 0 14
41098: PUSH
41099: LD_VAR 0 14
41103: PPUSH
41104: LD_VAR 0 14
41108: PUSH
41109: LD_INT 1
41111: PLUS
41112: PPUSH
41113: LD_INT 3
41115: PPUSH
41116: CALL_OW 1
41120: ST_TO_ADDR
// if missile < 2 then
41121: LD_VAR 0 14
41125: PUSH
41126: LD_INT 2
41128: LESS
41129: IFFALSE 41133
// exit ;
41131: GO 41355
// x := GetX ( enemy ) ;
41133: LD_ADDR_VAR 0 4
41137: PUSH
41138: LD_VAR 0 10
41142: PPUSH
41143: CALL_OW 250
41147: ST_TO_ADDR
// y := GetY ( enemy ) ;
41148: LD_ADDR_VAR 0 5
41152: PUSH
41153: LD_VAR 0 10
41157: PPUSH
41158: CALL_OW 251
41162: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41163: LD_ADDR_VAR 0 6
41167: PUSH
41168: LD_VAR 0 4
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PPUSH
41177: LD_INT 1
41179: PPUSH
41180: CALL_OW 12
41184: PLUS
41185: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41186: LD_ADDR_VAR 0 7
41190: PUSH
41191: LD_VAR 0 5
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PPUSH
41200: LD_INT 1
41202: PPUSH
41203: CALL_OW 12
41207: PLUS
41208: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41209: LD_VAR 0 6
41213: PPUSH
41214: LD_VAR 0 7
41218: PPUSH
41219: CALL_OW 488
41223: NOT
41224: IFFALSE 41246
// begin _x := x ;
41226: LD_ADDR_VAR 0 6
41230: PUSH
41231: LD_VAR 0 4
41235: ST_TO_ADDR
// _y := y ;
41236: LD_ADDR_VAR 0 7
41240: PUSH
41241: LD_VAR 0 5
41245: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41246: LD_ADDR_VAR 0 3
41250: PUSH
41251: LD_INT 1
41253: PPUSH
41254: LD_VAR 0 14
41258: PPUSH
41259: CALL_OW 12
41263: ST_TO_ADDR
// case i of 1 :
41264: LD_VAR 0 3
41268: PUSH
41269: LD_INT 1
41271: DOUBLE
41272: EQUAL
41273: IFTRUE 41277
41275: GO 41294
41277: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41278: LD_VAR 0 1
41282: PPUSH
41283: LD_VAR 0 10
41287: PPUSH
41288: CALL_OW 115
41292: GO 41355
41294: LD_INT 2
41296: DOUBLE
41297: EQUAL
41298: IFTRUE 41302
41300: GO 41324
41302: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41303: LD_VAR 0 1
41307: PPUSH
41308: LD_VAR 0 6
41312: PPUSH
41313: LD_VAR 0 7
41317: PPUSH
41318: CALL_OW 153
41322: GO 41355
41324: LD_INT 3
41326: DOUBLE
41327: EQUAL
41328: IFTRUE 41332
41330: GO 41354
41332: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41333: LD_VAR 0 1
41337: PPUSH
41338: LD_VAR 0 6
41342: PPUSH
41343: LD_VAR 0 7
41347: PPUSH
41348: CALL_OW 154
41352: GO 41355
41354: POP
// end ;
41355: LD_VAR 0 2
41359: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41360: LD_INT 0
41362: PPUSH
41363: PPUSH
41364: PPUSH
41365: PPUSH
41366: PPUSH
41367: PPUSH
// if not unit or not building then
41368: LD_VAR 0 1
41372: NOT
41373: PUSH
41374: LD_VAR 0 2
41378: NOT
41379: OR
41380: IFFALSE 41384
// exit ;
41382: GO 41542
// x := GetX ( building ) ;
41384: LD_ADDR_VAR 0 5
41388: PUSH
41389: LD_VAR 0 2
41393: PPUSH
41394: CALL_OW 250
41398: ST_TO_ADDR
// y := GetY ( building ) ;
41399: LD_ADDR_VAR 0 6
41403: PUSH
41404: LD_VAR 0 2
41408: PPUSH
41409: CALL_OW 251
41413: ST_TO_ADDR
// for i = 0 to 5 do
41414: LD_ADDR_VAR 0 4
41418: PUSH
41419: DOUBLE
41420: LD_INT 0
41422: DEC
41423: ST_TO_ADDR
41424: LD_INT 5
41426: PUSH
41427: FOR_TO
41428: IFFALSE 41540
// begin _x := ShiftX ( x , i , 3 ) ;
41430: LD_ADDR_VAR 0 7
41434: PUSH
41435: LD_VAR 0 5
41439: PPUSH
41440: LD_VAR 0 4
41444: PPUSH
41445: LD_INT 3
41447: PPUSH
41448: CALL_OW 272
41452: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41453: LD_ADDR_VAR 0 8
41457: PUSH
41458: LD_VAR 0 6
41462: PPUSH
41463: LD_VAR 0 4
41467: PPUSH
41468: LD_INT 3
41470: PPUSH
41471: CALL_OW 273
41475: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41476: LD_VAR 0 7
41480: PPUSH
41481: LD_VAR 0 8
41485: PPUSH
41486: CALL_OW 488
41490: NOT
41491: IFFALSE 41495
// continue ;
41493: GO 41427
// if HexInfo ( _x , _y ) = 0 then
41495: LD_VAR 0 7
41499: PPUSH
41500: LD_VAR 0 8
41504: PPUSH
41505: CALL_OW 428
41509: PUSH
41510: LD_INT 0
41512: EQUAL
41513: IFFALSE 41538
// begin ComMoveXY ( unit , _x , _y ) ;
41515: LD_VAR 0 1
41519: PPUSH
41520: LD_VAR 0 7
41524: PPUSH
41525: LD_VAR 0 8
41529: PPUSH
41530: CALL_OW 111
// exit ;
41534: POP
41535: POP
41536: GO 41542
// end ; end ;
41538: GO 41427
41540: POP
41541: POP
// end ;
41542: LD_VAR 0 3
41546: RET
// export function ScanBase ( side , base_area ) ; begin
41547: LD_INT 0
41549: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41550: LD_ADDR_VAR 0 3
41554: PUSH
41555: LD_VAR 0 2
41559: PPUSH
41560: LD_INT 81
41562: PUSH
41563: LD_VAR 0 1
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PPUSH
41572: CALL_OW 70
41576: ST_TO_ADDR
// end ;
41577: LD_VAR 0 3
41581: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41582: LD_INT 0
41584: PPUSH
41585: PPUSH
41586: PPUSH
41587: PPUSH
// result := false ;
41588: LD_ADDR_VAR 0 2
41592: PUSH
41593: LD_INT 0
41595: ST_TO_ADDR
// side := GetSide ( unit ) ;
41596: LD_ADDR_VAR 0 3
41600: PUSH
41601: LD_VAR 0 1
41605: PPUSH
41606: CALL_OW 255
41610: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41611: LD_ADDR_VAR 0 4
41615: PUSH
41616: LD_VAR 0 1
41620: PPUSH
41621: CALL_OW 248
41625: ST_TO_ADDR
// case nat of 1 :
41626: LD_VAR 0 4
41630: PUSH
41631: LD_INT 1
41633: DOUBLE
41634: EQUAL
41635: IFTRUE 41639
41637: GO 41650
41639: POP
// tech := tech_lassight ; 2 :
41640: LD_ADDR_VAR 0 5
41644: PUSH
41645: LD_INT 12
41647: ST_TO_ADDR
41648: GO 41689
41650: LD_INT 2
41652: DOUBLE
41653: EQUAL
41654: IFTRUE 41658
41656: GO 41669
41658: POP
// tech := tech_mortar ; 3 :
41659: LD_ADDR_VAR 0 5
41663: PUSH
41664: LD_INT 41
41666: ST_TO_ADDR
41667: GO 41689
41669: LD_INT 3
41671: DOUBLE
41672: EQUAL
41673: IFTRUE 41677
41675: GO 41688
41677: POP
// tech := tech_bazooka ; end ;
41678: LD_ADDR_VAR 0 5
41682: PUSH
41683: LD_INT 44
41685: ST_TO_ADDR
41686: GO 41689
41688: POP
// if Researched ( side , tech ) then
41689: LD_VAR 0 3
41693: PPUSH
41694: LD_VAR 0 5
41698: PPUSH
41699: CALL_OW 325
41703: IFFALSE 41730
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41705: LD_ADDR_VAR 0 2
41709: PUSH
41710: LD_INT 5
41712: PUSH
41713: LD_INT 8
41715: PUSH
41716: LD_INT 9
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: LIST
41723: PUSH
41724: LD_VAR 0 4
41728: ARRAY
41729: ST_TO_ADDR
// end ;
41730: LD_VAR 0 2
41734: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41735: LD_INT 0
41737: PPUSH
41738: PPUSH
41739: PPUSH
// if not mines then
41740: LD_VAR 0 2
41744: NOT
41745: IFFALSE 41749
// exit ;
41747: GO 41893
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41749: LD_ADDR_VAR 0 5
41753: PUSH
41754: LD_INT 81
41756: PUSH
41757: LD_VAR 0 1
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 3
41768: PUSH
41769: LD_INT 21
41771: PUSH
41772: LD_INT 3
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PPUSH
41787: CALL_OW 69
41791: ST_TO_ADDR
// for i in mines do
41792: LD_ADDR_VAR 0 4
41796: PUSH
41797: LD_VAR 0 2
41801: PUSH
41802: FOR_IN
41803: IFFALSE 41891
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41805: LD_VAR 0 4
41809: PUSH
41810: LD_INT 1
41812: ARRAY
41813: PPUSH
41814: LD_VAR 0 4
41818: PUSH
41819: LD_INT 2
41821: ARRAY
41822: PPUSH
41823: CALL_OW 458
41827: NOT
41828: IFFALSE 41832
// continue ;
41830: GO 41802
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41832: LD_VAR 0 4
41836: PUSH
41837: LD_INT 1
41839: ARRAY
41840: PPUSH
41841: LD_VAR 0 4
41845: PUSH
41846: LD_INT 2
41848: ARRAY
41849: PPUSH
41850: CALL_OW 428
41854: PUSH
41855: LD_VAR 0 5
41859: IN
41860: IFFALSE 41889
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41862: LD_VAR 0 4
41866: PUSH
41867: LD_INT 1
41869: ARRAY
41870: PPUSH
41871: LD_VAR 0 4
41875: PUSH
41876: LD_INT 2
41878: ARRAY
41879: PPUSH
41880: LD_VAR 0 1
41884: PPUSH
41885: CALL_OW 456
// end ;
41889: GO 41802
41891: POP
41892: POP
// end ;
41893: LD_VAR 0 3
41897: RET
// export function Count ( array ) ; begin
41898: LD_INT 0
41900: PPUSH
// result := array + 0 ;
41901: LD_ADDR_VAR 0 2
41905: PUSH
41906: LD_VAR 0 1
41910: PUSH
41911: LD_INT 0
41913: PLUS
41914: ST_TO_ADDR
// end ;
41915: LD_VAR 0 2
41919: RET
// export function IsEmpty ( building ) ; begin
41920: LD_INT 0
41922: PPUSH
// if not building then
41923: LD_VAR 0 1
41927: NOT
41928: IFFALSE 41932
// exit ;
41930: GO 41975
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41932: LD_ADDR_VAR 0 2
41936: PUSH
41937: LD_VAR 0 1
41941: PUSH
41942: LD_INT 22
41944: PUSH
41945: LD_VAR 0 1
41949: PPUSH
41950: CALL_OW 255
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 58
41961: PUSH
41962: EMPTY
41963: LIST
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PPUSH
41969: CALL_OW 69
41973: IN
41974: ST_TO_ADDR
// end ;
41975: LD_VAR 0 2
41979: RET
// export function IsNotFull ( building ) ; var places ; begin
41980: LD_INT 0
41982: PPUSH
41983: PPUSH
// if not building then
41984: LD_VAR 0 1
41988: NOT
41989: IFFALSE 41993
// exit ;
41991: GO 42021
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
41993: LD_ADDR_VAR 0 2
41997: PUSH
41998: LD_VAR 0 1
42002: PPUSH
42003: LD_INT 3
42005: PUSH
42006: LD_INT 62
42008: PUSH
42009: EMPTY
42010: LIST
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PPUSH
42016: CALL_OW 72
42020: ST_TO_ADDR
// end ;
42021: LD_VAR 0 2
42025: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42026: LD_INT 0
42028: PPUSH
42029: PPUSH
42030: PPUSH
42031: PPUSH
// tmp := [ ] ;
42032: LD_ADDR_VAR 0 3
42036: PUSH
42037: EMPTY
42038: ST_TO_ADDR
// list := [ ] ;
42039: LD_ADDR_VAR 0 5
42043: PUSH
42044: EMPTY
42045: ST_TO_ADDR
// for i = 16 to 25 do
42046: LD_ADDR_VAR 0 4
42050: PUSH
42051: DOUBLE
42052: LD_INT 16
42054: DEC
42055: ST_TO_ADDR
42056: LD_INT 25
42058: PUSH
42059: FOR_TO
42060: IFFALSE 42133
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42062: LD_ADDR_VAR 0 3
42066: PUSH
42067: LD_VAR 0 3
42071: PUSH
42072: LD_INT 22
42074: PUSH
42075: LD_VAR 0 1
42079: PPUSH
42080: CALL_OW 255
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 91
42091: PUSH
42092: LD_VAR 0 1
42096: PUSH
42097: LD_INT 6
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 30
42107: PUSH
42108: LD_VAR 0 4
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: LIST
42121: PUSH
42122: EMPTY
42123: LIST
42124: PPUSH
42125: CALL_OW 69
42129: ADD
42130: ST_TO_ADDR
42131: GO 42059
42133: POP
42134: POP
// for i = 1 to tmp do
42135: LD_ADDR_VAR 0 4
42139: PUSH
42140: DOUBLE
42141: LD_INT 1
42143: DEC
42144: ST_TO_ADDR
42145: LD_VAR 0 3
42149: PUSH
42150: FOR_TO
42151: IFFALSE 42239
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42153: LD_ADDR_VAR 0 5
42157: PUSH
42158: LD_VAR 0 5
42162: PUSH
42163: LD_VAR 0 3
42167: PUSH
42168: LD_VAR 0 4
42172: ARRAY
42173: PPUSH
42174: CALL_OW 266
42178: PUSH
42179: LD_VAR 0 3
42183: PUSH
42184: LD_VAR 0 4
42188: ARRAY
42189: PPUSH
42190: CALL_OW 250
42194: PUSH
42195: LD_VAR 0 3
42199: PUSH
42200: LD_VAR 0 4
42204: ARRAY
42205: PPUSH
42206: CALL_OW 251
42210: PUSH
42211: LD_VAR 0 3
42215: PUSH
42216: LD_VAR 0 4
42220: ARRAY
42221: PPUSH
42222: CALL_OW 254
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: PUSH
42233: EMPTY
42234: LIST
42235: ADD
42236: ST_TO_ADDR
42237: GO 42150
42239: POP
42240: POP
// result := list ;
42241: LD_ADDR_VAR 0 2
42245: PUSH
42246: LD_VAR 0 5
42250: ST_TO_ADDR
// end ;
42251: LD_VAR 0 2
42255: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42256: LD_INT 0
42258: PPUSH
42259: PPUSH
42260: PPUSH
42261: PPUSH
42262: PPUSH
42263: PPUSH
42264: PPUSH
// if not factory then
42265: LD_VAR 0 1
42269: NOT
42270: IFFALSE 42274
// exit ;
42272: GO 42867
// if control = control_apeman then
42274: LD_VAR 0 4
42278: PUSH
42279: LD_INT 5
42281: EQUAL
42282: IFFALSE 42391
// begin tmp := UnitsInside ( factory ) ;
42284: LD_ADDR_VAR 0 8
42288: PUSH
42289: LD_VAR 0 1
42293: PPUSH
42294: CALL_OW 313
42298: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42299: LD_VAR 0 8
42303: PPUSH
42304: LD_INT 25
42306: PUSH
42307: LD_INT 12
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PPUSH
42314: CALL_OW 72
42318: NOT
42319: IFFALSE 42329
// control := control_manual ;
42321: LD_ADDR_VAR 0 4
42325: PUSH
42326: LD_INT 1
42328: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42329: LD_ADDR_VAR 0 8
42333: PUSH
42334: LD_VAR 0 1
42338: PPUSH
42339: CALL 42026 0 1
42343: ST_TO_ADDR
// if tmp then
42344: LD_VAR 0 8
42348: IFFALSE 42391
// begin for i in tmp do
42350: LD_ADDR_VAR 0 7
42354: PUSH
42355: LD_VAR 0 8
42359: PUSH
42360: FOR_IN
42361: IFFALSE 42389
// if i [ 1 ] = b_ext_radio then
42363: LD_VAR 0 7
42367: PUSH
42368: LD_INT 1
42370: ARRAY
42371: PUSH
42372: LD_INT 22
42374: EQUAL
42375: IFFALSE 42387
// begin control := control_remote ;
42377: LD_ADDR_VAR 0 4
42381: PUSH
42382: LD_INT 2
42384: ST_TO_ADDR
// break ;
42385: GO 42389
// end ;
42387: GO 42360
42389: POP
42390: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42391: LD_VAR 0 1
42395: PPUSH
42396: LD_VAR 0 2
42400: PPUSH
42401: LD_VAR 0 3
42405: PPUSH
42406: LD_VAR 0 4
42410: PPUSH
42411: LD_VAR 0 5
42415: PPUSH
42416: CALL_OW 448
42420: IFFALSE 42455
// begin result := [ chassis , engine , control , weapon ] ;
42422: LD_ADDR_VAR 0 6
42426: PUSH
42427: LD_VAR 0 2
42431: PUSH
42432: LD_VAR 0 3
42436: PUSH
42437: LD_VAR 0 4
42441: PUSH
42442: LD_VAR 0 5
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: ST_TO_ADDR
// exit ;
42453: GO 42867
// end ; _chassis := AvailableChassisList ( factory ) ;
42455: LD_ADDR_VAR 0 9
42459: PUSH
42460: LD_VAR 0 1
42464: PPUSH
42465: CALL_OW 475
42469: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42470: LD_ADDR_VAR 0 11
42474: PUSH
42475: LD_VAR 0 1
42479: PPUSH
42480: CALL_OW 476
42484: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42485: LD_ADDR_VAR 0 12
42489: PUSH
42490: LD_VAR 0 1
42494: PPUSH
42495: CALL_OW 477
42499: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42500: LD_ADDR_VAR 0 10
42504: PUSH
42505: LD_VAR 0 1
42509: PPUSH
42510: CALL_OW 478
42514: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42515: LD_VAR 0 9
42519: NOT
42520: PUSH
42521: LD_VAR 0 11
42525: NOT
42526: OR
42527: PUSH
42528: LD_VAR 0 12
42532: NOT
42533: OR
42534: PUSH
42535: LD_VAR 0 10
42539: NOT
42540: OR
42541: IFFALSE 42576
// begin result := [ chassis , engine , control , weapon ] ;
42543: LD_ADDR_VAR 0 6
42547: PUSH
42548: LD_VAR 0 2
42552: PUSH
42553: LD_VAR 0 3
42557: PUSH
42558: LD_VAR 0 4
42562: PUSH
42563: LD_VAR 0 5
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: ST_TO_ADDR
// exit ;
42574: GO 42867
// end ; if not chassis in _chassis then
42576: LD_VAR 0 2
42580: PUSH
42581: LD_VAR 0 9
42585: IN
42586: NOT
42587: IFFALSE 42613
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42589: LD_ADDR_VAR 0 2
42593: PUSH
42594: LD_VAR 0 9
42598: PUSH
42599: LD_INT 1
42601: PPUSH
42602: LD_VAR 0 9
42606: PPUSH
42607: CALL_OW 12
42611: ARRAY
42612: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42613: LD_VAR 0 2
42617: PPUSH
42618: LD_VAR 0 3
42622: PPUSH
42623: CALL 42872 0 2
42627: NOT
42628: IFFALSE 42687
// repeat engine := _engine [ 1 ] ;
42630: LD_ADDR_VAR 0 3
42634: PUSH
42635: LD_VAR 0 11
42639: PUSH
42640: LD_INT 1
42642: ARRAY
42643: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42644: LD_ADDR_VAR 0 11
42648: PUSH
42649: LD_VAR 0 11
42653: PPUSH
42654: LD_INT 1
42656: PPUSH
42657: CALL_OW 3
42661: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42662: LD_VAR 0 2
42666: PPUSH
42667: LD_VAR 0 3
42671: PPUSH
42672: CALL 42872 0 2
42676: PUSH
42677: LD_VAR 0 11
42681: PUSH
42682: EMPTY
42683: EQUAL
42684: OR
42685: IFFALSE 42630
// if not control in _control then
42687: LD_VAR 0 4
42691: PUSH
42692: LD_VAR 0 12
42696: IN
42697: NOT
42698: IFFALSE 42724
// control := _control [ rand ( 1 , _control ) ] ;
42700: LD_ADDR_VAR 0 4
42704: PUSH
42705: LD_VAR 0 12
42709: PUSH
42710: LD_INT 1
42712: PPUSH
42713: LD_VAR 0 12
42717: PPUSH
42718: CALL_OW 12
42722: ARRAY
42723: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42724: LD_VAR 0 2
42728: PPUSH
42729: LD_VAR 0 5
42733: PPUSH
42734: CALL 43092 0 2
42738: NOT
42739: IFFALSE 42798
// repeat weapon := _weapon [ 1 ] ;
42741: LD_ADDR_VAR 0 5
42745: PUSH
42746: LD_VAR 0 10
42750: PUSH
42751: LD_INT 1
42753: ARRAY
42754: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42755: LD_ADDR_VAR 0 10
42759: PUSH
42760: LD_VAR 0 10
42764: PPUSH
42765: LD_INT 1
42767: PPUSH
42768: CALL_OW 3
42772: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42773: LD_VAR 0 2
42777: PPUSH
42778: LD_VAR 0 5
42782: PPUSH
42783: CALL 43092 0 2
42787: PUSH
42788: LD_VAR 0 10
42792: PUSH
42793: EMPTY
42794: EQUAL
42795: OR
42796: IFFALSE 42741
// result := [ ] ;
42798: LD_ADDR_VAR 0 6
42802: PUSH
42803: EMPTY
42804: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42805: LD_VAR 0 1
42809: PPUSH
42810: LD_VAR 0 2
42814: PPUSH
42815: LD_VAR 0 3
42819: PPUSH
42820: LD_VAR 0 4
42824: PPUSH
42825: LD_VAR 0 5
42829: PPUSH
42830: CALL_OW 448
42834: IFFALSE 42867
// result := [ chassis , engine , control , weapon ] ;
42836: LD_ADDR_VAR 0 6
42840: PUSH
42841: LD_VAR 0 2
42845: PUSH
42846: LD_VAR 0 3
42850: PUSH
42851: LD_VAR 0 4
42855: PUSH
42856: LD_VAR 0 5
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: ST_TO_ADDR
// end ;
42867: LD_VAR 0 6
42871: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42872: LD_INT 0
42874: PPUSH
// if not chassis or not engine then
42875: LD_VAR 0 1
42879: NOT
42880: PUSH
42881: LD_VAR 0 2
42885: NOT
42886: OR
42887: IFFALSE 42891
// exit ;
42889: GO 43087
// case engine of engine_solar :
42891: LD_VAR 0 2
42895: PUSH
42896: LD_INT 2
42898: DOUBLE
42899: EQUAL
42900: IFTRUE 42904
42902: GO 42942
42904: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42905: LD_ADDR_VAR 0 3
42909: PUSH
42910: LD_INT 11
42912: PUSH
42913: LD_INT 12
42915: PUSH
42916: LD_INT 13
42918: PUSH
42919: LD_INT 14
42921: PUSH
42922: LD_INT 1
42924: PUSH
42925: LD_INT 2
42927: PUSH
42928: LD_INT 3
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: ST_TO_ADDR
42940: GO 43071
42942: LD_INT 1
42944: DOUBLE
42945: EQUAL
42946: IFTRUE 42950
42948: GO 43012
42950: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42951: LD_ADDR_VAR 0 3
42955: PUSH
42956: LD_INT 11
42958: PUSH
42959: LD_INT 12
42961: PUSH
42962: LD_INT 13
42964: PUSH
42965: LD_INT 14
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: LD_INT 3
42976: PUSH
42977: LD_INT 4
42979: PUSH
42980: LD_INT 5
42982: PUSH
42983: LD_INT 21
42985: PUSH
42986: LD_INT 23
42988: PUSH
42989: LD_INT 22
42991: PUSH
42992: LD_INT 24
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: ST_TO_ADDR
43010: GO 43071
43012: LD_INT 3
43014: DOUBLE
43015: EQUAL
43016: IFTRUE 43020
43018: GO 43070
43020: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43021: LD_ADDR_VAR 0 3
43025: PUSH
43026: LD_INT 13
43028: PUSH
43029: LD_INT 14
43031: PUSH
43032: LD_INT 2
43034: PUSH
43035: LD_INT 3
43037: PUSH
43038: LD_INT 4
43040: PUSH
43041: LD_INT 5
43043: PUSH
43044: LD_INT 21
43046: PUSH
43047: LD_INT 22
43049: PUSH
43050: LD_INT 23
43052: PUSH
43053: LD_INT 24
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: ST_TO_ADDR
43068: GO 43071
43070: POP
// result := ( chassis in result ) ;
43071: LD_ADDR_VAR 0 3
43075: PUSH
43076: LD_VAR 0 1
43080: PUSH
43081: LD_VAR 0 3
43085: IN
43086: ST_TO_ADDR
// end ;
43087: LD_VAR 0 3
43091: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43092: LD_INT 0
43094: PPUSH
// if not chassis or not weapon then
43095: LD_VAR 0 1
43099: NOT
43100: PUSH
43101: LD_VAR 0 2
43105: NOT
43106: OR
43107: IFFALSE 43111
// exit ;
43109: GO 44171
// case weapon of us_machine_gun :
43111: LD_VAR 0 2
43115: PUSH
43116: LD_INT 2
43118: DOUBLE
43119: EQUAL
43120: IFTRUE 43124
43122: GO 43154
43124: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43125: LD_ADDR_VAR 0 3
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: LD_INT 2
43135: PUSH
43136: LD_INT 3
43138: PUSH
43139: LD_INT 4
43141: PUSH
43142: LD_INT 5
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: ST_TO_ADDR
43152: GO 44155
43154: LD_INT 3
43156: DOUBLE
43157: EQUAL
43158: IFTRUE 43162
43160: GO 43192
43162: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43163: LD_ADDR_VAR 0 3
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: LD_INT 2
43173: PUSH
43174: LD_INT 3
43176: PUSH
43177: LD_INT 4
43179: PUSH
43180: LD_INT 5
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: ST_TO_ADDR
43190: GO 44155
43192: LD_INT 11
43194: DOUBLE
43195: EQUAL
43196: IFTRUE 43200
43198: GO 43230
43200: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43201: LD_ADDR_VAR 0 3
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: LD_INT 2
43211: PUSH
43212: LD_INT 3
43214: PUSH
43215: LD_INT 4
43217: PUSH
43218: LD_INT 5
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: ST_TO_ADDR
43228: GO 44155
43230: LD_INT 4
43232: DOUBLE
43233: EQUAL
43234: IFTRUE 43238
43236: GO 43264
43238: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43239: LD_ADDR_VAR 0 3
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: LD_INT 3
43249: PUSH
43250: LD_INT 4
43252: PUSH
43253: LD_INT 5
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: ST_TO_ADDR
43262: GO 44155
43264: LD_INT 5
43266: DOUBLE
43267: EQUAL
43268: IFTRUE 43272
43270: GO 43298
43272: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43273: LD_ADDR_VAR 0 3
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: LD_INT 3
43283: PUSH
43284: LD_INT 4
43286: PUSH
43287: LD_INT 5
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: ST_TO_ADDR
43296: GO 44155
43298: LD_INT 9
43300: DOUBLE
43301: EQUAL
43302: IFTRUE 43306
43304: GO 43332
43306: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43307: LD_ADDR_VAR 0 3
43311: PUSH
43312: LD_INT 2
43314: PUSH
43315: LD_INT 3
43317: PUSH
43318: LD_INT 4
43320: PUSH
43321: LD_INT 5
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: ST_TO_ADDR
43330: GO 44155
43332: LD_INT 7
43334: DOUBLE
43335: EQUAL
43336: IFTRUE 43340
43338: GO 43366
43340: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43341: LD_ADDR_VAR 0 3
43345: PUSH
43346: LD_INT 2
43348: PUSH
43349: LD_INT 3
43351: PUSH
43352: LD_INT 4
43354: PUSH
43355: LD_INT 5
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: ST_TO_ADDR
43364: GO 44155
43366: LD_INT 12
43368: DOUBLE
43369: EQUAL
43370: IFTRUE 43374
43372: GO 43400
43374: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43375: LD_ADDR_VAR 0 3
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: LD_INT 3
43385: PUSH
43386: LD_INT 4
43388: PUSH
43389: LD_INT 5
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: ST_TO_ADDR
43398: GO 44155
43400: LD_INT 13
43402: DOUBLE
43403: EQUAL
43404: IFTRUE 43408
43406: GO 43434
43408: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43409: LD_ADDR_VAR 0 3
43413: PUSH
43414: LD_INT 2
43416: PUSH
43417: LD_INT 3
43419: PUSH
43420: LD_INT 4
43422: PUSH
43423: LD_INT 5
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: ST_TO_ADDR
43432: GO 44155
43434: LD_INT 14
43436: DOUBLE
43437: EQUAL
43438: IFTRUE 43442
43440: GO 43460
43442: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43443: LD_ADDR_VAR 0 3
43447: PUSH
43448: LD_INT 4
43450: PUSH
43451: LD_INT 5
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: ST_TO_ADDR
43458: GO 44155
43460: LD_INT 6
43462: DOUBLE
43463: EQUAL
43464: IFTRUE 43468
43466: GO 43486
43468: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43469: LD_ADDR_VAR 0 3
43473: PUSH
43474: LD_INT 4
43476: PUSH
43477: LD_INT 5
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: ST_TO_ADDR
43484: GO 44155
43486: LD_INT 10
43488: DOUBLE
43489: EQUAL
43490: IFTRUE 43494
43492: GO 43512
43494: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43495: LD_ADDR_VAR 0 3
43499: PUSH
43500: LD_INT 4
43502: PUSH
43503: LD_INT 5
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: ST_TO_ADDR
43510: GO 44155
43512: LD_INT 22
43514: DOUBLE
43515: EQUAL
43516: IFTRUE 43520
43518: GO 43546
43520: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43521: LD_ADDR_VAR 0 3
43525: PUSH
43526: LD_INT 11
43528: PUSH
43529: LD_INT 12
43531: PUSH
43532: LD_INT 13
43534: PUSH
43535: LD_INT 14
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: ST_TO_ADDR
43544: GO 44155
43546: LD_INT 23
43548: DOUBLE
43549: EQUAL
43550: IFTRUE 43554
43552: GO 43580
43554: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43555: LD_ADDR_VAR 0 3
43559: PUSH
43560: LD_INT 11
43562: PUSH
43563: LD_INT 12
43565: PUSH
43566: LD_INT 13
43568: PUSH
43569: LD_INT 14
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: ST_TO_ADDR
43578: GO 44155
43580: LD_INT 24
43582: DOUBLE
43583: EQUAL
43584: IFTRUE 43588
43586: GO 43614
43588: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43589: LD_ADDR_VAR 0 3
43593: PUSH
43594: LD_INT 11
43596: PUSH
43597: LD_INT 12
43599: PUSH
43600: LD_INT 13
43602: PUSH
43603: LD_INT 14
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: ST_TO_ADDR
43612: GO 44155
43614: LD_INT 30
43616: DOUBLE
43617: EQUAL
43618: IFTRUE 43622
43620: GO 43648
43622: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43623: LD_ADDR_VAR 0 3
43627: PUSH
43628: LD_INT 11
43630: PUSH
43631: LD_INT 12
43633: PUSH
43634: LD_INT 13
43636: PUSH
43637: LD_INT 14
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: ST_TO_ADDR
43646: GO 44155
43648: LD_INT 25
43650: DOUBLE
43651: EQUAL
43652: IFTRUE 43656
43654: GO 43674
43656: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43657: LD_ADDR_VAR 0 3
43661: PUSH
43662: LD_INT 13
43664: PUSH
43665: LD_INT 14
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: ST_TO_ADDR
43672: GO 44155
43674: LD_INT 27
43676: DOUBLE
43677: EQUAL
43678: IFTRUE 43682
43680: GO 43700
43682: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43683: LD_ADDR_VAR 0 3
43687: PUSH
43688: LD_INT 13
43690: PUSH
43691: LD_INT 14
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: ST_TO_ADDR
43698: GO 44155
43700: LD_INT 92
43702: DOUBLE
43703: EQUAL
43704: IFTRUE 43708
43706: GO 43734
43708: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43709: LD_ADDR_VAR 0 3
43713: PUSH
43714: LD_INT 11
43716: PUSH
43717: LD_INT 12
43719: PUSH
43720: LD_INT 13
43722: PUSH
43723: LD_INT 14
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: ST_TO_ADDR
43732: GO 44155
43734: LD_INT 28
43736: DOUBLE
43737: EQUAL
43738: IFTRUE 43742
43740: GO 43760
43742: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43743: LD_ADDR_VAR 0 3
43747: PUSH
43748: LD_INT 13
43750: PUSH
43751: LD_INT 14
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: ST_TO_ADDR
43758: GO 44155
43760: LD_INT 29
43762: DOUBLE
43763: EQUAL
43764: IFTRUE 43768
43766: GO 43786
43768: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43769: LD_ADDR_VAR 0 3
43773: PUSH
43774: LD_INT 13
43776: PUSH
43777: LD_INT 14
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: ST_TO_ADDR
43784: GO 44155
43786: LD_INT 31
43788: DOUBLE
43789: EQUAL
43790: IFTRUE 43794
43792: GO 43812
43794: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43795: LD_ADDR_VAR 0 3
43799: PUSH
43800: LD_INT 13
43802: PUSH
43803: LD_INT 14
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: ST_TO_ADDR
43810: GO 44155
43812: LD_INT 26
43814: DOUBLE
43815: EQUAL
43816: IFTRUE 43820
43818: GO 43838
43820: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43821: LD_ADDR_VAR 0 3
43825: PUSH
43826: LD_INT 13
43828: PUSH
43829: LD_INT 14
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: ST_TO_ADDR
43836: GO 44155
43838: LD_INT 42
43840: DOUBLE
43841: EQUAL
43842: IFTRUE 43846
43844: GO 43872
43846: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43847: LD_ADDR_VAR 0 3
43851: PUSH
43852: LD_INT 21
43854: PUSH
43855: LD_INT 22
43857: PUSH
43858: LD_INT 23
43860: PUSH
43861: LD_INT 24
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: ST_TO_ADDR
43870: GO 44155
43872: LD_INT 43
43874: DOUBLE
43875: EQUAL
43876: IFTRUE 43880
43878: GO 43906
43880: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43881: LD_ADDR_VAR 0 3
43885: PUSH
43886: LD_INT 21
43888: PUSH
43889: LD_INT 22
43891: PUSH
43892: LD_INT 23
43894: PUSH
43895: LD_INT 24
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: ST_TO_ADDR
43904: GO 44155
43906: LD_INT 44
43908: DOUBLE
43909: EQUAL
43910: IFTRUE 43914
43912: GO 43940
43914: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43915: LD_ADDR_VAR 0 3
43919: PUSH
43920: LD_INT 21
43922: PUSH
43923: LD_INT 22
43925: PUSH
43926: LD_INT 23
43928: PUSH
43929: LD_INT 24
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: ST_TO_ADDR
43938: GO 44155
43940: LD_INT 45
43942: DOUBLE
43943: EQUAL
43944: IFTRUE 43948
43946: GO 43974
43948: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43949: LD_ADDR_VAR 0 3
43953: PUSH
43954: LD_INT 21
43956: PUSH
43957: LD_INT 22
43959: PUSH
43960: LD_INT 23
43962: PUSH
43963: LD_INT 24
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: ST_TO_ADDR
43972: GO 44155
43974: LD_INT 49
43976: DOUBLE
43977: EQUAL
43978: IFTRUE 43982
43980: GO 44008
43982: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43983: LD_ADDR_VAR 0 3
43987: PUSH
43988: LD_INT 21
43990: PUSH
43991: LD_INT 22
43993: PUSH
43994: LD_INT 23
43996: PUSH
43997: LD_INT 24
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: ST_TO_ADDR
44006: GO 44155
44008: LD_INT 51
44010: DOUBLE
44011: EQUAL
44012: IFTRUE 44016
44014: GO 44042
44016: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44017: LD_ADDR_VAR 0 3
44021: PUSH
44022: LD_INT 21
44024: PUSH
44025: LD_INT 22
44027: PUSH
44028: LD_INT 23
44030: PUSH
44031: LD_INT 24
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: ST_TO_ADDR
44040: GO 44155
44042: LD_INT 52
44044: DOUBLE
44045: EQUAL
44046: IFTRUE 44050
44048: GO 44076
44050: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44051: LD_ADDR_VAR 0 3
44055: PUSH
44056: LD_INT 21
44058: PUSH
44059: LD_INT 22
44061: PUSH
44062: LD_INT 23
44064: PUSH
44065: LD_INT 24
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: ST_TO_ADDR
44074: GO 44155
44076: LD_INT 53
44078: DOUBLE
44079: EQUAL
44080: IFTRUE 44084
44082: GO 44102
44084: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44085: LD_ADDR_VAR 0 3
44089: PUSH
44090: LD_INT 23
44092: PUSH
44093: LD_INT 24
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: ST_TO_ADDR
44100: GO 44155
44102: LD_INT 46
44104: DOUBLE
44105: EQUAL
44106: IFTRUE 44110
44108: GO 44128
44110: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44111: LD_ADDR_VAR 0 3
44115: PUSH
44116: LD_INT 23
44118: PUSH
44119: LD_INT 24
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: ST_TO_ADDR
44126: GO 44155
44128: LD_INT 47
44130: DOUBLE
44131: EQUAL
44132: IFTRUE 44136
44134: GO 44154
44136: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44137: LD_ADDR_VAR 0 3
44141: PUSH
44142: LD_INT 23
44144: PUSH
44145: LD_INT 24
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: ST_TO_ADDR
44152: GO 44155
44154: POP
// result := ( chassis in result ) ;
44155: LD_ADDR_VAR 0 3
44159: PUSH
44160: LD_VAR 0 1
44164: PUSH
44165: LD_VAR 0 3
44169: IN
44170: ST_TO_ADDR
// end ;
44171: LD_VAR 0 3
44175: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44176: LD_INT 0
44178: PPUSH
44179: PPUSH
44180: PPUSH
44181: PPUSH
44182: PPUSH
44183: PPUSH
44184: PPUSH
// result := array ;
44185: LD_ADDR_VAR 0 5
44189: PUSH
44190: LD_VAR 0 1
44194: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44195: LD_VAR 0 1
44199: NOT
44200: PUSH
44201: LD_VAR 0 2
44205: NOT
44206: OR
44207: PUSH
44208: LD_VAR 0 3
44212: NOT
44213: OR
44214: PUSH
44215: LD_VAR 0 2
44219: PUSH
44220: LD_VAR 0 1
44224: GREATER
44225: OR
44226: PUSH
44227: LD_VAR 0 3
44231: PUSH
44232: LD_VAR 0 1
44236: GREATER
44237: OR
44238: IFFALSE 44242
// exit ;
44240: GO 44538
// if direction then
44242: LD_VAR 0 4
44246: IFFALSE 44310
// begin d := 1 ;
44248: LD_ADDR_VAR 0 9
44252: PUSH
44253: LD_INT 1
44255: ST_TO_ADDR
// if i_from > i_to then
44256: LD_VAR 0 2
44260: PUSH
44261: LD_VAR 0 3
44265: GREATER
44266: IFFALSE 44292
// length := ( array - i_from ) + i_to else
44268: LD_ADDR_VAR 0 11
44272: PUSH
44273: LD_VAR 0 1
44277: PUSH
44278: LD_VAR 0 2
44282: MINUS
44283: PUSH
44284: LD_VAR 0 3
44288: PLUS
44289: ST_TO_ADDR
44290: GO 44308
// length := i_to - i_from ;
44292: LD_ADDR_VAR 0 11
44296: PUSH
44297: LD_VAR 0 3
44301: PUSH
44302: LD_VAR 0 2
44306: MINUS
44307: ST_TO_ADDR
// end else
44308: GO 44371
// begin d := - 1 ;
44310: LD_ADDR_VAR 0 9
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: ST_TO_ADDR
// if i_from > i_to then
44319: LD_VAR 0 2
44323: PUSH
44324: LD_VAR 0 3
44328: GREATER
44329: IFFALSE 44349
// length := i_from - i_to else
44331: LD_ADDR_VAR 0 11
44335: PUSH
44336: LD_VAR 0 2
44340: PUSH
44341: LD_VAR 0 3
44345: MINUS
44346: ST_TO_ADDR
44347: GO 44371
// length := ( array - i_to ) + i_from ;
44349: LD_ADDR_VAR 0 11
44353: PUSH
44354: LD_VAR 0 1
44358: PUSH
44359: LD_VAR 0 3
44363: MINUS
44364: PUSH
44365: LD_VAR 0 2
44369: PLUS
44370: ST_TO_ADDR
// end ; if not length then
44371: LD_VAR 0 11
44375: NOT
44376: IFFALSE 44380
// exit ;
44378: GO 44538
// tmp := array ;
44380: LD_ADDR_VAR 0 10
44384: PUSH
44385: LD_VAR 0 1
44389: ST_TO_ADDR
// for i = 1 to length do
44390: LD_ADDR_VAR 0 6
44394: PUSH
44395: DOUBLE
44396: LD_INT 1
44398: DEC
44399: ST_TO_ADDR
44400: LD_VAR 0 11
44404: PUSH
44405: FOR_TO
44406: IFFALSE 44526
// begin for j = 1 to array do
44408: LD_ADDR_VAR 0 7
44412: PUSH
44413: DOUBLE
44414: LD_INT 1
44416: DEC
44417: ST_TO_ADDR
44418: LD_VAR 0 1
44422: PUSH
44423: FOR_TO
44424: IFFALSE 44512
// begin k := j + d ;
44426: LD_ADDR_VAR 0 8
44430: PUSH
44431: LD_VAR 0 7
44435: PUSH
44436: LD_VAR 0 9
44440: PLUS
44441: ST_TO_ADDR
// if k > array then
44442: LD_VAR 0 8
44446: PUSH
44447: LD_VAR 0 1
44451: GREATER
44452: IFFALSE 44462
// k := 1 ;
44454: LD_ADDR_VAR 0 8
44458: PUSH
44459: LD_INT 1
44461: ST_TO_ADDR
// if not k then
44462: LD_VAR 0 8
44466: NOT
44467: IFFALSE 44479
// k := array ;
44469: LD_ADDR_VAR 0 8
44473: PUSH
44474: LD_VAR 0 1
44478: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44479: LD_ADDR_VAR 0 10
44483: PUSH
44484: LD_VAR 0 10
44488: PPUSH
44489: LD_VAR 0 8
44493: PPUSH
44494: LD_VAR 0 1
44498: PUSH
44499: LD_VAR 0 7
44503: ARRAY
44504: PPUSH
44505: CALL_OW 1
44509: ST_TO_ADDR
// end ;
44510: GO 44423
44512: POP
44513: POP
// array := tmp ;
44514: LD_ADDR_VAR 0 1
44518: PUSH
44519: LD_VAR 0 10
44523: ST_TO_ADDR
// end ;
44524: GO 44405
44526: POP
44527: POP
// result := array ;
44528: LD_ADDR_VAR 0 5
44532: PUSH
44533: LD_VAR 0 1
44537: ST_TO_ADDR
// end ;
44538: LD_VAR 0 5
44542: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44543: LD_INT 0
44545: PPUSH
44546: PPUSH
// result := 0 ;
44547: LD_ADDR_VAR 0 3
44551: PUSH
44552: LD_INT 0
44554: ST_TO_ADDR
// if not array or not value in array then
44555: LD_VAR 0 1
44559: NOT
44560: PUSH
44561: LD_VAR 0 2
44565: PUSH
44566: LD_VAR 0 1
44570: IN
44571: NOT
44572: OR
44573: IFFALSE 44577
// exit ;
44575: GO 44631
// for i = 1 to array do
44577: LD_ADDR_VAR 0 4
44581: PUSH
44582: DOUBLE
44583: LD_INT 1
44585: DEC
44586: ST_TO_ADDR
44587: LD_VAR 0 1
44591: PUSH
44592: FOR_TO
44593: IFFALSE 44629
// if value = array [ i ] then
44595: LD_VAR 0 2
44599: PUSH
44600: LD_VAR 0 1
44604: PUSH
44605: LD_VAR 0 4
44609: ARRAY
44610: EQUAL
44611: IFFALSE 44627
// begin result := i ;
44613: LD_ADDR_VAR 0 3
44617: PUSH
44618: LD_VAR 0 4
44622: ST_TO_ADDR
// exit ;
44623: POP
44624: POP
44625: GO 44631
// end ;
44627: GO 44592
44629: POP
44630: POP
// end ;
44631: LD_VAR 0 3
44635: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44636: LD_INT 0
44638: PPUSH
// vc_chassis := chassis ;
44639: LD_ADDR_OWVAR 37
44643: PUSH
44644: LD_VAR 0 1
44648: ST_TO_ADDR
// vc_engine := engine ;
44649: LD_ADDR_OWVAR 39
44653: PUSH
44654: LD_VAR 0 2
44658: ST_TO_ADDR
// vc_control := control ;
44659: LD_ADDR_OWVAR 38
44663: PUSH
44664: LD_VAR 0 3
44668: ST_TO_ADDR
// vc_weapon := weapon ;
44669: LD_ADDR_OWVAR 40
44673: PUSH
44674: LD_VAR 0 4
44678: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44679: LD_ADDR_OWVAR 41
44683: PUSH
44684: LD_VAR 0 5
44688: ST_TO_ADDR
// end ;
44689: LD_VAR 0 6
44693: RET
// export function WantPlant ( unit ) ; var task ; begin
44694: LD_INT 0
44696: PPUSH
44697: PPUSH
// result := false ;
44698: LD_ADDR_VAR 0 2
44702: PUSH
44703: LD_INT 0
44705: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44706: LD_ADDR_VAR 0 3
44710: PUSH
44711: LD_VAR 0 1
44715: PPUSH
44716: CALL_OW 437
44720: ST_TO_ADDR
// if task then
44721: LD_VAR 0 3
44725: IFFALSE 44753
// if task [ 1 ] [ 1 ] = p then
44727: LD_VAR 0 3
44731: PUSH
44732: LD_INT 1
44734: ARRAY
44735: PUSH
44736: LD_INT 1
44738: ARRAY
44739: PUSH
44740: LD_STRING p
44742: EQUAL
44743: IFFALSE 44753
// result := true ;
44745: LD_ADDR_VAR 0 2
44749: PUSH
44750: LD_INT 1
44752: ST_TO_ADDR
// end ;
44753: LD_VAR 0 2
44757: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44758: LD_INT 0
44760: PPUSH
44761: PPUSH
44762: PPUSH
44763: PPUSH
// if pos < 1 then
44764: LD_VAR 0 2
44768: PUSH
44769: LD_INT 1
44771: LESS
44772: IFFALSE 44776
// exit ;
44774: GO 45079
// if pos = 1 then
44776: LD_VAR 0 2
44780: PUSH
44781: LD_INT 1
44783: EQUAL
44784: IFFALSE 44817
// result := Replace ( arr , pos [ 1 ] , value ) else
44786: LD_ADDR_VAR 0 4
44790: PUSH
44791: LD_VAR 0 1
44795: PPUSH
44796: LD_VAR 0 2
44800: PUSH
44801: LD_INT 1
44803: ARRAY
44804: PPUSH
44805: LD_VAR 0 3
44809: PPUSH
44810: CALL_OW 1
44814: ST_TO_ADDR
44815: GO 45079
// begin tmp := arr ;
44817: LD_ADDR_VAR 0 6
44821: PUSH
44822: LD_VAR 0 1
44826: ST_TO_ADDR
// s_arr := [ tmp ] ;
44827: LD_ADDR_VAR 0 7
44831: PUSH
44832: LD_VAR 0 6
44836: PUSH
44837: EMPTY
44838: LIST
44839: ST_TO_ADDR
// for i = 1 to pos - 1 do
44840: LD_ADDR_VAR 0 5
44844: PUSH
44845: DOUBLE
44846: LD_INT 1
44848: DEC
44849: ST_TO_ADDR
44850: LD_VAR 0 2
44854: PUSH
44855: LD_INT 1
44857: MINUS
44858: PUSH
44859: FOR_TO
44860: IFFALSE 44905
// begin tmp := tmp [ pos [ i ] ] ;
44862: LD_ADDR_VAR 0 6
44866: PUSH
44867: LD_VAR 0 6
44871: PUSH
44872: LD_VAR 0 2
44876: PUSH
44877: LD_VAR 0 5
44881: ARRAY
44882: ARRAY
44883: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44884: LD_ADDR_VAR 0 7
44888: PUSH
44889: LD_VAR 0 7
44893: PUSH
44894: LD_VAR 0 6
44898: PUSH
44899: EMPTY
44900: LIST
44901: ADD
44902: ST_TO_ADDR
// end ;
44903: GO 44859
44905: POP
44906: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44907: LD_ADDR_VAR 0 6
44911: PUSH
44912: LD_VAR 0 6
44916: PPUSH
44917: LD_VAR 0 2
44921: PUSH
44922: LD_VAR 0 2
44926: ARRAY
44927: PPUSH
44928: LD_VAR 0 3
44932: PPUSH
44933: CALL_OW 1
44937: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44938: LD_ADDR_VAR 0 7
44942: PUSH
44943: LD_VAR 0 7
44947: PPUSH
44948: LD_VAR 0 7
44952: PPUSH
44953: LD_VAR 0 6
44957: PPUSH
44958: CALL_OW 1
44962: ST_TO_ADDR
// for i = s_arr downto 2 do
44963: LD_ADDR_VAR 0 5
44967: PUSH
44968: DOUBLE
44969: LD_VAR 0 7
44973: INC
44974: ST_TO_ADDR
44975: LD_INT 2
44977: PUSH
44978: FOR_DOWNTO
44979: IFFALSE 45063
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44981: LD_ADDR_VAR 0 6
44985: PUSH
44986: LD_VAR 0 7
44990: PUSH
44991: LD_VAR 0 5
44995: PUSH
44996: LD_INT 1
44998: MINUS
44999: ARRAY
45000: PPUSH
45001: LD_VAR 0 2
45005: PUSH
45006: LD_VAR 0 5
45010: PUSH
45011: LD_INT 1
45013: MINUS
45014: ARRAY
45015: PPUSH
45016: LD_VAR 0 7
45020: PUSH
45021: LD_VAR 0 5
45025: ARRAY
45026: PPUSH
45027: CALL_OW 1
45031: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45032: LD_ADDR_VAR 0 7
45036: PUSH
45037: LD_VAR 0 7
45041: PPUSH
45042: LD_VAR 0 5
45046: PUSH
45047: LD_INT 1
45049: MINUS
45050: PPUSH
45051: LD_VAR 0 6
45055: PPUSH
45056: CALL_OW 1
45060: ST_TO_ADDR
// end ;
45061: GO 44978
45063: POP
45064: POP
// result := s_arr [ 1 ] ;
45065: LD_ADDR_VAR 0 4
45069: PUSH
45070: LD_VAR 0 7
45074: PUSH
45075: LD_INT 1
45077: ARRAY
45078: ST_TO_ADDR
// end ; end ;
45079: LD_VAR 0 4
45083: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45084: LD_INT 0
45086: PPUSH
45087: PPUSH
// if not list then
45088: LD_VAR 0 1
45092: NOT
45093: IFFALSE 45097
// exit ;
45095: GO 45188
// i := list [ pos1 ] ;
45097: LD_ADDR_VAR 0 5
45101: PUSH
45102: LD_VAR 0 1
45106: PUSH
45107: LD_VAR 0 2
45111: ARRAY
45112: ST_TO_ADDR
// if not i then
45113: LD_VAR 0 5
45117: NOT
45118: IFFALSE 45122
// exit ;
45120: GO 45188
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45122: LD_ADDR_VAR 0 1
45126: PUSH
45127: LD_VAR 0 1
45131: PPUSH
45132: LD_VAR 0 2
45136: PPUSH
45137: LD_VAR 0 1
45141: PUSH
45142: LD_VAR 0 3
45146: ARRAY
45147: PPUSH
45148: CALL_OW 1
45152: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45153: LD_ADDR_VAR 0 1
45157: PUSH
45158: LD_VAR 0 1
45162: PPUSH
45163: LD_VAR 0 3
45167: PPUSH
45168: LD_VAR 0 5
45172: PPUSH
45173: CALL_OW 1
45177: ST_TO_ADDR
// result := list ;
45178: LD_ADDR_VAR 0 4
45182: PUSH
45183: LD_VAR 0 1
45187: ST_TO_ADDR
// end ;
45188: LD_VAR 0 4
45192: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45193: LD_INT 0
45195: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45196: LD_ADDR_VAR 0 5
45200: PUSH
45201: LD_VAR 0 1
45205: PPUSH
45206: CALL_OW 250
45210: PPUSH
45211: LD_VAR 0 1
45215: PPUSH
45216: CALL_OW 251
45220: PPUSH
45221: LD_VAR 0 2
45225: PPUSH
45226: LD_VAR 0 3
45230: PPUSH
45231: LD_VAR 0 4
45235: PPUSH
45236: CALL 45246 0 5
45240: ST_TO_ADDR
// end ;
45241: LD_VAR 0 5
45245: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45246: LD_INT 0
45248: PPUSH
45249: PPUSH
45250: PPUSH
45251: PPUSH
// if not list then
45252: LD_VAR 0 3
45256: NOT
45257: IFFALSE 45261
// exit ;
45259: GO 45649
// result := [ ] ;
45261: LD_ADDR_VAR 0 6
45265: PUSH
45266: EMPTY
45267: ST_TO_ADDR
// for i in list do
45268: LD_ADDR_VAR 0 7
45272: PUSH
45273: LD_VAR 0 3
45277: PUSH
45278: FOR_IN
45279: IFFALSE 45481
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45281: LD_ADDR_VAR 0 9
45285: PUSH
45286: LD_VAR 0 7
45290: PPUSH
45291: LD_VAR 0 1
45295: PPUSH
45296: LD_VAR 0 2
45300: PPUSH
45301: CALL_OW 297
45305: ST_TO_ADDR
// if not result then
45306: LD_VAR 0 6
45310: NOT
45311: IFFALSE 45337
// result := [ [ i , tmp ] ] else
45313: LD_ADDR_VAR 0 6
45317: PUSH
45318: LD_VAR 0 7
45322: PUSH
45323: LD_VAR 0 9
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: EMPTY
45333: LIST
45334: ST_TO_ADDR
45335: GO 45479
// begin if result [ result ] [ 2 ] < tmp then
45337: LD_VAR 0 6
45341: PUSH
45342: LD_VAR 0 6
45346: ARRAY
45347: PUSH
45348: LD_INT 2
45350: ARRAY
45351: PUSH
45352: LD_VAR 0 9
45356: LESS
45357: IFFALSE 45399
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45359: LD_ADDR_VAR 0 6
45363: PUSH
45364: LD_VAR 0 6
45368: PPUSH
45369: LD_VAR 0 6
45373: PUSH
45374: LD_INT 1
45376: PLUS
45377: PPUSH
45378: LD_VAR 0 7
45382: PUSH
45383: LD_VAR 0 9
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PPUSH
45392: CALL_OW 2
45396: ST_TO_ADDR
45397: GO 45479
// for j = 1 to result do
45399: LD_ADDR_VAR 0 8
45403: PUSH
45404: DOUBLE
45405: LD_INT 1
45407: DEC
45408: ST_TO_ADDR
45409: LD_VAR 0 6
45413: PUSH
45414: FOR_TO
45415: IFFALSE 45477
// begin if tmp < result [ j ] [ 2 ] then
45417: LD_VAR 0 9
45421: PUSH
45422: LD_VAR 0 6
45426: PUSH
45427: LD_VAR 0 8
45431: ARRAY
45432: PUSH
45433: LD_INT 2
45435: ARRAY
45436: LESS
45437: IFFALSE 45475
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45439: LD_ADDR_VAR 0 6
45443: PUSH
45444: LD_VAR 0 6
45448: PPUSH
45449: LD_VAR 0 8
45453: PPUSH
45454: LD_VAR 0 7
45458: PUSH
45459: LD_VAR 0 9
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PPUSH
45468: CALL_OW 2
45472: ST_TO_ADDR
// break ;
45473: GO 45477
// end ; end ;
45475: GO 45414
45477: POP
45478: POP
// end ; end ;
45479: GO 45278
45481: POP
45482: POP
// if result and not asc then
45483: LD_VAR 0 6
45487: PUSH
45488: LD_VAR 0 4
45492: NOT
45493: AND
45494: IFFALSE 45569
// begin tmp := result ;
45496: LD_ADDR_VAR 0 9
45500: PUSH
45501: LD_VAR 0 6
45505: ST_TO_ADDR
// for i = tmp downto 1 do
45506: LD_ADDR_VAR 0 7
45510: PUSH
45511: DOUBLE
45512: LD_VAR 0 9
45516: INC
45517: ST_TO_ADDR
45518: LD_INT 1
45520: PUSH
45521: FOR_DOWNTO
45522: IFFALSE 45567
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45524: LD_ADDR_VAR 0 6
45528: PUSH
45529: LD_VAR 0 6
45533: PPUSH
45534: LD_VAR 0 9
45538: PUSH
45539: LD_VAR 0 7
45543: MINUS
45544: PUSH
45545: LD_INT 1
45547: PLUS
45548: PPUSH
45549: LD_VAR 0 9
45553: PUSH
45554: LD_VAR 0 7
45558: ARRAY
45559: PPUSH
45560: CALL_OW 1
45564: ST_TO_ADDR
45565: GO 45521
45567: POP
45568: POP
// end ; tmp := [ ] ;
45569: LD_ADDR_VAR 0 9
45573: PUSH
45574: EMPTY
45575: ST_TO_ADDR
// if mode then
45576: LD_VAR 0 5
45580: IFFALSE 45649
// begin for i = 1 to result do
45582: LD_ADDR_VAR 0 7
45586: PUSH
45587: DOUBLE
45588: LD_INT 1
45590: DEC
45591: ST_TO_ADDR
45592: LD_VAR 0 6
45596: PUSH
45597: FOR_TO
45598: IFFALSE 45637
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45600: LD_ADDR_VAR 0 9
45604: PUSH
45605: LD_VAR 0 9
45609: PPUSH
45610: LD_VAR 0 7
45614: PPUSH
45615: LD_VAR 0 6
45619: PUSH
45620: LD_VAR 0 7
45624: ARRAY
45625: PUSH
45626: LD_INT 1
45628: ARRAY
45629: PPUSH
45630: CALL_OW 1
45634: ST_TO_ADDR
45635: GO 45597
45637: POP
45638: POP
// result := tmp ;
45639: LD_ADDR_VAR 0 6
45643: PUSH
45644: LD_VAR 0 9
45648: ST_TO_ADDR
// end ; end ;
45649: LD_VAR 0 6
45653: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45654: LD_INT 0
45656: PPUSH
45657: PPUSH
45658: PPUSH
45659: PPUSH
45660: PPUSH
45661: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45662: LD_ADDR_VAR 0 5
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: EMPTY
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: ST_TO_ADDR
// if not x or not y then
45684: LD_VAR 0 2
45688: NOT
45689: PUSH
45690: LD_VAR 0 3
45694: NOT
45695: OR
45696: IFFALSE 45700
// exit ;
45698: GO 47350
// if not range then
45700: LD_VAR 0 4
45704: NOT
45705: IFFALSE 45715
// range := 10 ;
45707: LD_ADDR_VAR 0 4
45711: PUSH
45712: LD_INT 10
45714: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45715: LD_ADDR_VAR 0 8
45719: PUSH
45720: LD_INT 81
45722: PUSH
45723: LD_VAR 0 1
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 92
45734: PUSH
45735: LD_VAR 0 2
45739: PUSH
45740: LD_VAR 0 3
45744: PUSH
45745: LD_VAR 0 4
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 3
45758: PUSH
45759: LD_INT 21
45761: PUSH
45762: LD_INT 3
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: LIST
45777: PPUSH
45778: CALL_OW 69
45782: ST_TO_ADDR
// if not tmp then
45783: LD_VAR 0 8
45787: NOT
45788: IFFALSE 45792
// exit ;
45790: GO 47350
// for i in tmp do
45792: LD_ADDR_VAR 0 6
45796: PUSH
45797: LD_VAR 0 8
45801: PUSH
45802: FOR_IN
45803: IFFALSE 47325
// begin points := [ 0 , 0 , 0 ] ;
45805: LD_ADDR_VAR 0 9
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: LIST
45823: ST_TO_ADDR
// bpoints := 1 ;
45824: LD_ADDR_VAR 0 10
45828: PUSH
45829: LD_INT 1
45831: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45832: LD_VAR 0 6
45836: PPUSH
45837: CALL_OW 247
45841: PUSH
45842: LD_INT 1
45844: DOUBLE
45845: EQUAL
45846: IFTRUE 45850
45848: GO 46428
45850: POP
// begin if GetClass ( i ) = 1 then
45851: LD_VAR 0 6
45855: PPUSH
45856: CALL_OW 257
45860: PUSH
45861: LD_INT 1
45863: EQUAL
45864: IFFALSE 45885
// points := [ 10 , 5 , 3 ] ;
45866: LD_ADDR_VAR 0 9
45870: PUSH
45871: LD_INT 10
45873: PUSH
45874: LD_INT 5
45876: PUSH
45877: LD_INT 3
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: LIST
45884: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45885: LD_VAR 0 6
45889: PPUSH
45890: CALL_OW 257
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: LD_INT 3
45900: PUSH
45901: LD_INT 4
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: LIST
45908: IN
45909: IFFALSE 45930
// points := [ 3 , 2 , 1 ] ;
45911: LD_ADDR_VAR 0 9
45915: PUSH
45916: LD_INT 3
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: LIST
45929: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45930: LD_VAR 0 6
45934: PPUSH
45935: CALL_OW 257
45939: PUSH
45940: LD_INT 5
45942: EQUAL
45943: IFFALSE 45964
// points := [ 130 , 5 , 2 ] ;
45945: LD_ADDR_VAR 0 9
45949: PUSH
45950: LD_INT 130
45952: PUSH
45953: LD_INT 5
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: LIST
45963: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45964: LD_VAR 0 6
45968: PPUSH
45969: CALL_OW 257
45973: PUSH
45974: LD_INT 8
45976: EQUAL
45977: IFFALSE 45998
// points := [ 35 , 35 , 30 ] ;
45979: LD_ADDR_VAR 0 9
45983: PUSH
45984: LD_INT 35
45986: PUSH
45987: LD_INT 35
45989: PUSH
45990: LD_INT 30
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: LIST
45997: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45998: LD_VAR 0 6
46002: PPUSH
46003: CALL_OW 257
46007: PUSH
46008: LD_INT 9
46010: EQUAL
46011: IFFALSE 46032
// points := [ 20 , 55 , 40 ] ;
46013: LD_ADDR_VAR 0 9
46017: PUSH
46018: LD_INT 20
46020: PUSH
46021: LD_INT 55
46023: PUSH
46024: LD_INT 40
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: LIST
46031: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46032: LD_VAR 0 6
46036: PPUSH
46037: CALL_OW 257
46041: PUSH
46042: LD_INT 12
46044: PUSH
46045: LD_INT 16
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: IN
46052: IFFALSE 46073
// points := [ 5 , 3 , 2 ] ;
46054: LD_ADDR_VAR 0 9
46058: PUSH
46059: LD_INT 5
46061: PUSH
46062: LD_INT 3
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: LIST
46072: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46073: LD_VAR 0 6
46077: PPUSH
46078: CALL_OW 257
46082: PUSH
46083: LD_INT 17
46085: EQUAL
46086: IFFALSE 46107
// points := [ 100 , 50 , 75 ] ;
46088: LD_ADDR_VAR 0 9
46092: PUSH
46093: LD_INT 100
46095: PUSH
46096: LD_INT 50
46098: PUSH
46099: LD_INT 75
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: LIST
46106: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46107: LD_VAR 0 6
46111: PPUSH
46112: CALL_OW 257
46116: PUSH
46117: LD_INT 15
46119: EQUAL
46120: IFFALSE 46141
// points := [ 10 , 5 , 3 ] ;
46122: LD_ADDR_VAR 0 9
46126: PUSH
46127: LD_INT 10
46129: PUSH
46130: LD_INT 5
46132: PUSH
46133: LD_INT 3
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: LIST
46140: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46141: LD_VAR 0 6
46145: PPUSH
46146: CALL_OW 257
46150: PUSH
46151: LD_INT 14
46153: EQUAL
46154: IFFALSE 46175
// points := [ 10 , 0 , 0 ] ;
46156: LD_ADDR_VAR 0 9
46160: PUSH
46161: LD_INT 10
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: LIST
46174: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46175: LD_VAR 0 6
46179: PPUSH
46180: CALL_OW 257
46184: PUSH
46185: LD_INT 11
46187: EQUAL
46188: IFFALSE 46209
// points := [ 30 , 10 , 5 ] ;
46190: LD_ADDR_VAR 0 9
46194: PUSH
46195: LD_INT 30
46197: PUSH
46198: LD_INT 10
46200: PUSH
46201: LD_INT 5
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: LIST
46208: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46209: LD_VAR 0 1
46213: PPUSH
46214: LD_INT 5
46216: PPUSH
46217: CALL_OW 321
46221: PUSH
46222: LD_INT 2
46224: EQUAL
46225: IFFALSE 46242
// bpoints := bpoints * 1.8 ;
46227: LD_ADDR_VAR 0 10
46231: PUSH
46232: LD_VAR 0 10
46236: PUSH
46237: LD_REAL  1.80000000000000E+0000
46240: MUL
46241: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46242: LD_VAR 0 6
46246: PPUSH
46247: CALL_OW 257
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: LD_INT 2
46257: PUSH
46258: LD_INT 3
46260: PUSH
46261: LD_INT 4
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: IN
46270: PUSH
46271: LD_VAR 0 1
46275: PPUSH
46276: LD_INT 51
46278: PPUSH
46279: CALL_OW 321
46283: PUSH
46284: LD_INT 2
46286: EQUAL
46287: AND
46288: IFFALSE 46305
// bpoints := bpoints * 1.2 ;
46290: LD_ADDR_VAR 0 10
46294: PUSH
46295: LD_VAR 0 10
46299: PUSH
46300: LD_REAL  1.20000000000000E+0000
46303: MUL
46304: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46305: LD_VAR 0 6
46309: PPUSH
46310: CALL_OW 257
46314: PUSH
46315: LD_INT 5
46317: PUSH
46318: LD_INT 7
46320: PUSH
46321: LD_INT 9
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: LIST
46328: IN
46329: PUSH
46330: LD_VAR 0 1
46334: PPUSH
46335: LD_INT 52
46337: PPUSH
46338: CALL_OW 321
46342: PUSH
46343: LD_INT 2
46345: EQUAL
46346: AND
46347: IFFALSE 46364
// bpoints := bpoints * 1.5 ;
46349: LD_ADDR_VAR 0 10
46353: PUSH
46354: LD_VAR 0 10
46358: PUSH
46359: LD_REAL  1.50000000000000E+0000
46362: MUL
46363: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46364: LD_VAR 0 1
46368: PPUSH
46369: LD_INT 66
46371: PPUSH
46372: CALL_OW 321
46376: PUSH
46377: LD_INT 2
46379: EQUAL
46380: IFFALSE 46397
// bpoints := bpoints * 1.1 ;
46382: LD_ADDR_VAR 0 10
46386: PUSH
46387: LD_VAR 0 10
46391: PUSH
46392: LD_REAL  1.10000000000000E+0000
46395: MUL
46396: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46397: LD_ADDR_VAR 0 10
46401: PUSH
46402: LD_VAR 0 10
46406: PUSH
46407: LD_VAR 0 6
46411: PPUSH
46412: LD_INT 1
46414: PPUSH
46415: CALL_OW 259
46419: PUSH
46420: LD_REAL  1.15000000000000E+0000
46423: MUL
46424: MUL
46425: ST_TO_ADDR
// end ; unit_vehicle :
46426: GO 47254
46428: LD_INT 2
46430: DOUBLE
46431: EQUAL
46432: IFTRUE 46436
46434: GO 47242
46436: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46437: LD_VAR 0 6
46441: PPUSH
46442: CALL_OW 264
46446: PUSH
46447: LD_INT 2
46449: PUSH
46450: LD_INT 42
46452: PUSH
46453: LD_INT 24
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: LIST
46460: IN
46461: IFFALSE 46482
// points := [ 25 , 5 , 3 ] ;
46463: LD_ADDR_VAR 0 9
46467: PUSH
46468: LD_INT 25
46470: PUSH
46471: LD_INT 5
46473: PUSH
46474: LD_INT 3
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: LIST
46481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46482: LD_VAR 0 6
46486: PPUSH
46487: CALL_OW 264
46491: PUSH
46492: LD_INT 4
46494: PUSH
46495: LD_INT 43
46497: PUSH
46498: LD_INT 25
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: LIST
46505: IN
46506: IFFALSE 46527
// points := [ 40 , 15 , 5 ] ;
46508: LD_ADDR_VAR 0 9
46512: PUSH
46513: LD_INT 40
46515: PUSH
46516: LD_INT 15
46518: PUSH
46519: LD_INT 5
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: LIST
46526: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46527: LD_VAR 0 6
46531: PPUSH
46532: CALL_OW 264
46536: PUSH
46537: LD_INT 3
46539: PUSH
46540: LD_INT 23
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: IN
46547: IFFALSE 46568
// points := [ 7 , 25 , 8 ] ;
46549: LD_ADDR_VAR 0 9
46553: PUSH
46554: LD_INT 7
46556: PUSH
46557: LD_INT 25
46559: PUSH
46560: LD_INT 8
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: LIST
46567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46568: LD_VAR 0 6
46572: PPUSH
46573: CALL_OW 264
46577: PUSH
46578: LD_INT 5
46580: PUSH
46581: LD_INT 27
46583: PUSH
46584: LD_INT 44
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: LIST
46591: IN
46592: IFFALSE 46613
// points := [ 14 , 50 , 16 ] ;
46594: LD_ADDR_VAR 0 9
46598: PUSH
46599: LD_INT 14
46601: PUSH
46602: LD_INT 50
46604: PUSH
46605: LD_INT 16
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: LIST
46612: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46613: LD_VAR 0 6
46617: PPUSH
46618: CALL_OW 264
46622: PUSH
46623: LD_INT 6
46625: PUSH
46626: LD_INT 46
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: IN
46633: IFFALSE 46654
// points := [ 32 , 120 , 70 ] ;
46635: LD_ADDR_VAR 0 9
46639: PUSH
46640: LD_INT 32
46642: PUSH
46643: LD_INT 120
46645: PUSH
46646: LD_INT 70
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: LIST
46653: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46654: LD_VAR 0 6
46658: PPUSH
46659: CALL_OW 264
46663: PUSH
46664: LD_INT 7
46666: PUSH
46667: LD_INT 28
46669: PUSH
46670: LD_INT 45
46672: PUSH
46673: LD_INT 92
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: IN
46682: IFFALSE 46703
// points := [ 35 , 20 , 45 ] ;
46684: LD_ADDR_VAR 0 9
46688: PUSH
46689: LD_INT 35
46691: PUSH
46692: LD_INT 20
46694: PUSH
46695: LD_INT 45
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46703: LD_VAR 0 6
46707: PPUSH
46708: CALL_OW 264
46712: PUSH
46713: LD_INT 47
46715: PUSH
46716: EMPTY
46717: LIST
46718: IN
46719: IFFALSE 46740
// points := [ 67 , 45 , 75 ] ;
46721: LD_ADDR_VAR 0 9
46725: PUSH
46726: LD_INT 67
46728: PUSH
46729: LD_INT 45
46731: PUSH
46732: LD_INT 75
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: LIST
46739: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46740: LD_VAR 0 6
46744: PPUSH
46745: CALL_OW 264
46749: PUSH
46750: LD_INT 26
46752: PUSH
46753: EMPTY
46754: LIST
46755: IN
46756: IFFALSE 46777
// points := [ 120 , 30 , 80 ] ;
46758: LD_ADDR_VAR 0 9
46762: PUSH
46763: LD_INT 120
46765: PUSH
46766: LD_INT 30
46768: PUSH
46769: LD_INT 80
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: LIST
46776: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46777: LD_VAR 0 6
46781: PPUSH
46782: CALL_OW 264
46786: PUSH
46787: LD_INT 22
46789: PUSH
46790: EMPTY
46791: LIST
46792: IN
46793: IFFALSE 46814
// points := [ 40 , 1 , 1 ] ;
46795: LD_ADDR_VAR 0 9
46799: PUSH
46800: LD_INT 40
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: LIST
46813: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46814: LD_VAR 0 6
46818: PPUSH
46819: CALL_OW 264
46823: PUSH
46824: LD_INT 29
46826: PUSH
46827: EMPTY
46828: LIST
46829: IN
46830: IFFALSE 46851
// points := [ 70 , 200 , 400 ] ;
46832: LD_ADDR_VAR 0 9
46836: PUSH
46837: LD_INT 70
46839: PUSH
46840: LD_INT 200
46842: PUSH
46843: LD_INT 400
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: LIST
46850: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46851: LD_VAR 0 6
46855: PPUSH
46856: CALL_OW 264
46860: PUSH
46861: LD_INT 14
46863: PUSH
46864: LD_INT 53
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: IN
46871: IFFALSE 46892
// points := [ 40 , 10 , 20 ] ;
46873: LD_ADDR_VAR 0 9
46877: PUSH
46878: LD_INT 40
46880: PUSH
46881: LD_INT 10
46883: PUSH
46884: LD_INT 20
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: LIST
46891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46892: LD_VAR 0 6
46896: PPUSH
46897: CALL_OW 264
46901: PUSH
46902: LD_INT 9
46904: PUSH
46905: EMPTY
46906: LIST
46907: IN
46908: IFFALSE 46929
// points := [ 5 , 70 , 20 ] ;
46910: LD_ADDR_VAR 0 9
46914: PUSH
46915: LD_INT 5
46917: PUSH
46918: LD_INT 70
46920: PUSH
46921: LD_INT 20
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: LIST
46928: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46929: LD_VAR 0 6
46933: PPUSH
46934: CALL_OW 264
46938: PUSH
46939: LD_INT 10
46941: PUSH
46942: EMPTY
46943: LIST
46944: IN
46945: IFFALSE 46966
// points := [ 35 , 110 , 70 ] ;
46947: LD_ADDR_VAR 0 9
46951: PUSH
46952: LD_INT 35
46954: PUSH
46955: LD_INT 110
46957: PUSH
46958: LD_INT 70
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: LIST
46965: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46966: LD_VAR 0 6
46970: PPUSH
46971: CALL_OW 265
46975: PUSH
46976: LD_INT 25
46978: EQUAL
46979: IFFALSE 47000
// points := [ 80 , 65 , 100 ] ;
46981: LD_ADDR_VAR 0 9
46985: PUSH
46986: LD_INT 80
46988: PUSH
46989: LD_INT 65
46991: PUSH
46992: LD_INT 100
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: LIST
46999: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47000: LD_VAR 0 6
47004: PPUSH
47005: CALL_OW 263
47009: PUSH
47010: LD_INT 1
47012: EQUAL
47013: IFFALSE 47048
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47015: LD_ADDR_VAR 0 10
47019: PUSH
47020: LD_VAR 0 10
47024: PUSH
47025: LD_VAR 0 6
47029: PPUSH
47030: CALL_OW 311
47034: PPUSH
47035: LD_INT 3
47037: PPUSH
47038: CALL_OW 259
47042: PUSH
47043: LD_INT 4
47045: MUL
47046: MUL
47047: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47048: LD_VAR 0 6
47052: PPUSH
47053: CALL_OW 263
47057: PUSH
47058: LD_INT 2
47060: EQUAL
47061: IFFALSE 47112
// begin j := IsControledBy ( i ) ;
47063: LD_ADDR_VAR 0 7
47067: PUSH
47068: LD_VAR 0 6
47072: PPUSH
47073: CALL_OW 312
47077: ST_TO_ADDR
// if j then
47078: LD_VAR 0 7
47082: IFFALSE 47112
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47084: LD_ADDR_VAR 0 10
47088: PUSH
47089: LD_VAR 0 10
47093: PUSH
47094: LD_VAR 0 7
47098: PPUSH
47099: LD_INT 3
47101: PPUSH
47102: CALL_OW 259
47106: PUSH
47107: LD_INT 3
47109: MUL
47110: MUL
47111: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47112: LD_VAR 0 6
47116: PPUSH
47117: CALL_OW 264
47121: PUSH
47122: LD_INT 5
47124: PUSH
47125: LD_INT 6
47127: PUSH
47128: LD_INT 46
47130: PUSH
47131: LD_INT 44
47133: PUSH
47134: LD_INT 47
47136: PUSH
47137: LD_INT 45
47139: PUSH
47140: LD_INT 28
47142: PUSH
47143: LD_INT 7
47145: PUSH
47146: LD_INT 27
47148: PUSH
47149: LD_INT 29
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: IN
47164: PUSH
47165: LD_VAR 0 1
47169: PPUSH
47170: LD_INT 52
47172: PPUSH
47173: CALL_OW 321
47177: PUSH
47178: LD_INT 2
47180: EQUAL
47181: AND
47182: IFFALSE 47199
// bpoints := bpoints * 1.2 ;
47184: LD_ADDR_VAR 0 10
47188: PUSH
47189: LD_VAR 0 10
47193: PUSH
47194: LD_REAL  1.20000000000000E+0000
47197: MUL
47198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47199: LD_VAR 0 6
47203: PPUSH
47204: CALL_OW 264
47208: PUSH
47209: LD_INT 6
47211: PUSH
47212: LD_INT 46
47214: PUSH
47215: LD_INT 47
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: LIST
47222: IN
47223: IFFALSE 47240
// bpoints := bpoints * 1.2 ;
47225: LD_ADDR_VAR 0 10
47229: PUSH
47230: LD_VAR 0 10
47234: PUSH
47235: LD_REAL  1.20000000000000E+0000
47238: MUL
47239: ST_TO_ADDR
// end ; unit_building :
47240: GO 47254
47242: LD_INT 3
47244: DOUBLE
47245: EQUAL
47246: IFTRUE 47250
47248: GO 47253
47250: POP
// ; end ;
47251: GO 47254
47253: POP
// for j = 1 to 3 do
47254: LD_ADDR_VAR 0 7
47258: PUSH
47259: DOUBLE
47260: LD_INT 1
47262: DEC
47263: ST_TO_ADDR
47264: LD_INT 3
47266: PUSH
47267: FOR_TO
47268: IFFALSE 47321
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47270: LD_ADDR_VAR 0 5
47274: PUSH
47275: LD_VAR 0 5
47279: PPUSH
47280: LD_VAR 0 7
47284: PPUSH
47285: LD_VAR 0 5
47289: PUSH
47290: LD_VAR 0 7
47294: ARRAY
47295: PUSH
47296: LD_VAR 0 9
47300: PUSH
47301: LD_VAR 0 7
47305: ARRAY
47306: PUSH
47307: LD_VAR 0 10
47311: MUL
47312: PLUS
47313: PPUSH
47314: CALL_OW 1
47318: ST_TO_ADDR
47319: GO 47267
47321: POP
47322: POP
// end ;
47323: GO 45802
47325: POP
47326: POP
// result := Replace ( result , 4 , tmp ) ;
47327: LD_ADDR_VAR 0 5
47331: PUSH
47332: LD_VAR 0 5
47336: PPUSH
47337: LD_INT 4
47339: PPUSH
47340: LD_VAR 0 8
47344: PPUSH
47345: CALL_OW 1
47349: ST_TO_ADDR
// end ;
47350: LD_VAR 0 5
47354: RET
// export function DangerAtRange ( unit , range ) ; begin
47355: LD_INT 0
47357: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47358: LD_ADDR_VAR 0 3
47362: PUSH
47363: LD_VAR 0 1
47367: PPUSH
47368: CALL_OW 255
47372: PPUSH
47373: LD_VAR 0 1
47377: PPUSH
47378: CALL_OW 250
47382: PPUSH
47383: LD_VAR 0 1
47387: PPUSH
47388: CALL_OW 251
47392: PPUSH
47393: LD_VAR 0 2
47397: PPUSH
47398: CALL 45654 0 4
47402: ST_TO_ADDR
// end ;
47403: LD_VAR 0 3
47407: RET
// export function DangerInArea ( side , area ) ; begin
47408: LD_INT 0
47410: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47411: LD_ADDR_VAR 0 3
47415: PUSH
47416: LD_VAR 0 2
47420: PPUSH
47421: LD_INT 81
47423: PUSH
47424: LD_VAR 0 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PPUSH
47433: CALL_OW 70
47437: ST_TO_ADDR
// end ;
47438: LD_VAR 0 3
47442: RET
// export function IsExtension ( b ) ; begin
47443: LD_INT 0
47445: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47446: LD_ADDR_VAR 0 2
47450: PUSH
47451: LD_VAR 0 1
47455: PUSH
47456: LD_INT 23
47458: PUSH
47459: LD_INT 20
47461: PUSH
47462: LD_INT 22
47464: PUSH
47465: LD_INT 17
47467: PUSH
47468: LD_INT 24
47470: PUSH
47471: LD_INT 21
47473: PUSH
47474: LD_INT 19
47476: PUSH
47477: LD_INT 16
47479: PUSH
47480: LD_INT 25
47482: PUSH
47483: LD_INT 18
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: IN
47498: ST_TO_ADDR
// end ;
47499: LD_VAR 0 2
47503: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47504: LD_INT 0
47506: PPUSH
47507: PPUSH
47508: PPUSH
// result := [ ] ;
47509: LD_ADDR_VAR 0 4
47513: PUSH
47514: EMPTY
47515: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47516: LD_ADDR_VAR 0 5
47520: PUSH
47521: LD_VAR 0 2
47525: PPUSH
47526: LD_INT 21
47528: PUSH
47529: LD_INT 3
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PPUSH
47536: CALL_OW 70
47540: ST_TO_ADDR
// if not tmp then
47541: LD_VAR 0 5
47545: NOT
47546: IFFALSE 47550
// exit ;
47548: GO 47614
// if checkLink then
47550: LD_VAR 0 3
47554: IFFALSE 47604
// begin for i in tmp do
47556: LD_ADDR_VAR 0 6
47560: PUSH
47561: LD_VAR 0 5
47565: PUSH
47566: FOR_IN
47567: IFFALSE 47602
// if GetBase ( i ) <> base then
47569: LD_VAR 0 6
47573: PPUSH
47574: CALL_OW 274
47578: PUSH
47579: LD_VAR 0 1
47583: NONEQUAL
47584: IFFALSE 47600
// ComLinkToBase ( base , i ) ;
47586: LD_VAR 0 1
47590: PPUSH
47591: LD_VAR 0 6
47595: PPUSH
47596: CALL_OW 169
47600: GO 47566
47602: POP
47603: POP
// end ; result := tmp ;
47604: LD_ADDR_VAR 0 4
47608: PUSH
47609: LD_VAR 0 5
47613: ST_TO_ADDR
// end ;
47614: LD_VAR 0 4
47618: RET
// export function ComComplete ( units , b ) ; var i ; begin
47619: LD_INT 0
47621: PPUSH
47622: PPUSH
// if not units then
47623: LD_VAR 0 1
47627: NOT
47628: IFFALSE 47632
// exit ;
47630: GO 47722
// for i in units do
47632: LD_ADDR_VAR 0 4
47636: PUSH
47637: LD_VAR 0 1
47641: PUSH
47642: FOR_IN
47643: IFFALSE 47720
// if BuildingStatus ( b ) = bs_build then
47645: LD_VAR 0 2
47649: PPUSH
47650: CALL_OW 461
47654: PUSH
47655: LD_INT 1
47657: EQUAL
47658: IFFALSE 47718
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47660: LD_VAR 0 4
47664: PPUSH
47665: LD_STRING h
47667: PUSH
47668: LD_VAR 0 2
47672: PPUSH
47673: CALL_OW 250
47677: PUSH
47678: LD_VAR 0 2
47682: PPUSH
47683: CALL_OW 251
47687: PUSH
47688: LD_VAR 0 2
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: PUSH
47711: EMPTY
47712: LIST
47713: PPUSH
47714: CALL_OW 446
47718: GO 47642
47720: POP
47721: POP
// end ;
47722: LD_VAR 0 3
47726: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47727: LD_INT 0
47729: PPUSH
47730: PPUSH
47731: PPUSH
47732: PPUSH
47733: PPUSH
47734: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47735: LD_VAR 0 1
47739: NOT
47740: PUSH
47741: LD_VAR 0 1
47745: PPUSH
47746: CALL_OW 263
47750: PUSH
47751: LD_INT 2
47753: NONEQUAL
47754: OR
47755: IFFALSE 47759
// exit ;
47757: GO 48075
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47759: LD_ADDR_VAR 0 6
47763: PUSH
47764: LD_INT 22
47766: PUSH
47767: LD_VAR 0 1
47771: PPUSH
47772: CALL_OW 255
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: LD_INT 30
47786: PUSH
47787: LD_INT 36
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 34
47796: PUSH
47797: LD_INT 31
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: LIST
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PPUSH
47813: CALL_OW 69
47817: ST_TO_ADDR
// if not tmp then
47818: LD_VAR 0 6
47822: NOT
47823: IFFALSE 47827
// exit ;
47825: GO 48075
// result := [ ] ;
47827: LD_ADDR_VAR 0 2
47831: PUSH
47832: EMPTY
47833: ST_TO_ADDR
// for i in tmp do
47834: LD_ADDR_VAR 0 3
47838: PUSH
47839: LD_VAR 0 6
47843: PUSH
47844: FOR_IN
47845: IFFALSE 47916
// begin t := UnitsInside ( i ) ;
47847: LD_ADDR_VAR 0 4
47851: PUSH
47852: LD_VAR 0 3
47856: PPUSH
47857: CALL_OW 313
47861: ST_TO_ADDR
// if t then
47862: LD_VAR 0 4
47866: IFFALSE 47914
// for j in t do
47868: LD_ADDR_VAR 0 7
47872: PUSH
47873: LD_VAR 0 4
47877: PUSH
47878: FOR_IN
47879: IFFALSE 47912
// result := Replace ( result , result + 1 , j ) ;
47881: LD_ADDR_VAR 0 2
47885: PUSH
47886: LD_VAR 0 2
47890: PPUSH
47891: LD_VAR 0 2
47895: PUSH
47896: LD_INT 1
47898: PLUS
47899: PPUSH
47900: LD_VAR 0 7
47904: PPUSH
47905: CALL_OW 1
47909: ST_TO_ADDR
47910: GO 47878
47912: POP
47913: POP
// end ;
47914: GO 47844
47916: POP
47917: POP
// if not result then
47918: LD_VAR 0 2
47922: NOT
47923: IFFALSE 47927
// exit ;
47925: GO 48075
// mech := result [ 1 ] ;
47927: LD_ADDR_VAR 0 5
47931: PUSH
47932: LD_VAR 0 2
47936: PUSH
47937: LD_INT 1
47939: ARRAY
47940: ST_TO_ADDR
// if result > 1 then
47941: LD_VAR 0 2
47945: PUSH
47946: LD_INT 1
47948: GREATER
47949: IFFALSE 48061
// begin for i = 2 to result do
47951: LD_ADDR_VAR 0 3
47955: PUSH
47956: DOUBLE
47957: LD_INT 2
47959: DEC
47960: ST_TO_ADDR
47961: LD_VAR 0 2
47965: PUSH
47966: FOR_TO
47967: IFFALSE 48059
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47969: LD_ADDR_VAR 0 4
47973: PUSH
47974: LD_VAR 0 2
47978: PUSH
47979: LD_VAR 0 3
47983: ARRAY
47984: PPUSH
47985: LD_INT 3
47987: PPUSH
47988: CALL_OW 259
47992: PUSH
47993: LD_VAR 0 2
47997: PUSH
47998: LD_VAR 0 3
48002: ARRAY
48003: PPUSH
48004: CALL_OW 432
48008: MINUS
48009: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48010: LD_VAR 0 4
48014: PUSH
48015: LD_VAR 0 5
48019: PPUSH
48020: LD_INT 3
48022: PPUSH
48023: CALL_OW 259
48027: PUSH
48028: LD_VAR 0 5
48032: PPUSH
48033: CALL_OW 432
48037: MINUS
48038: GREATEREQUAL
48039: IFFALSE 48057
// mech := result [ i ] ;
48041: LD_ADDR_VAR 0 5
48045: PUSH
48046: LD_VAR 0 2
48050: PUSH
48051: LD_VAR 0 3
48055: ARRAY
48056: ST_TO_ADDR
// end ;
48057: GO 47966
48059: POP
48060: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48061: LD_VAR 0 1
48065: PPUSH
48066: LD_VAR 0 5
48070: PPUSH
48071: CALL_OW 135
// end ;
48075: LD_VAR 0 2
48079: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48080: LD_INT 0
48082: PPUSH
48083: PPUSH
48084: PPUSH
48085: PPUSH
48086: PPUSH
48087: PPUSH
48088: PPUSH
48089: PPUSH
48090: PPUSH
48091: PPUSH
48092: PPUSH
48093: PPUSH
48094: PPUSH
// result := [ ] ;
48095: LD_ADDR_VAR 0 7
48099: PUSH
48100: EMPTY
48101: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48102: LD_VAR 0 1
48106: PPUSH
48107: CALL_OW 266
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: IN
48122: NOT
48123: IFFALSE 48127
// exit ;
48125: GO 49761
// if name then
48127: LD_VAR 0 3
48131: IFFALSE 48147
// SetBName ( base_dep , name ) ;
48133: LD_VAR 0 1
48137: PPUSH
48138: LD_VAR 0 3
48142: PPUSH
48143: CALL_OW 500
// base := GetBase ( base_dep ) ;
48147: LD_ADDR_VAR 0 15
48151: PUSH
48152: LD_VAR 0 1
48156: PPUSH
48157: CALL_OW 274
48161: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48162: LD_ADDR_VAR 0 16
48166: PUSH
48167: LD_VAR 0 1
48171: PPUSH
48172: CALL_OW 255
48176: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48177: LD_ADDR_VAR 0 17
48181: PUSH
48182: LD_VAR 0 1
48186: PPUSH
48187: CALL_OW 248
48191: ST_TO_ADDR
// if sources then
48192: LD_VAR 0 5
48196: IFFALSE 48243
// for i = 1 to 3 do
48198: LD_ADDR_VAR 0 8
48202: PUSH
48203: DOUBLE
48204: LD_INT 1
48206: DEC
48207: ST_TO_ADDR
48208: LD_INT 3
48210: PUSH
48211: FOR_TO
48212: IFFALSE 48241
// AddResourceType ( base , i , sources [ i ] ) ;
48214: LD_VAR 0 15
48218: PPUSH
48219: LD_VAR 0 8
48223: PPUSH
48224: LD_VAR 0 5
48228: PUSH
48229: LD_VAR 0 8
48233: ARRAY
48234: PPUSH
48235: CALL_OW 276
48239: GO 48211
48241: POP
48242: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48243: LD_ADDR_VAR 0 18
48247: PUSH
48248: LD_VAR 0 15
48252: PPUSH
48253: LD_VAR 0 2
48257: PPUSH
48258: LD_INT 1
48260: PPUSH
48261: CALL 47504 0 3
48265: ST_TO_ADDR
// InitHc ;
48266: CALL_OW 19
// InitUc ;
48270: CALL_OW 18
// uc_side := side ;
48274: LD_ADDR_OWVAR 20
48278: PUSH
48279: LD_VAR 0 16
48283: ST_TO_ADDR
// uc_nation := nation ;
48284: LD_ADDR_OWVAR 21
48288: PUSH
48289: LD_VAR 0 17
48293: ST_TO_ADDR
// if buildings then
48294: LD_VAR 0 18
48298: IFFALSE 49620
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48300: LD_ADDR_VAR 0 19
48304: PUSH
48305: LD_VAR 0 18
48309: PPUSH
48310: LD_INT 2
48312: PUSH
48313: LD_INT 30
48315: PUSH
48316: LD_INT 29
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 30
48325: PUSH
48326: LD_INT 30
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: LIST
48337: PPUSH
48338: CALL_OW 72
48342: ST_TO_ADDR
// if tmp then
48343: LD_VAR 0 19
48347: IFFALSE 48395
// for i in tmp do
48349: LD_ADDR_VAR 0 8
48353: PUSH
48354: LD_VAR 0 19
48358: PUSH
48359: FOR_IN
48360: IFFALSE 48393
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48362: LD_VAR 0 8
48366: PPUSH
48367: CALL_OW 250
48371: PPUSH
48372: LD_VAR 0 8
48376: PPUSH
48377: CALL_OW 251
48381: PPUSH
48382: LD_VAR 0 16
48386: PPUSH
48387: CALL_OW 441
48391: GO 48359
48393: POP
48394: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48395: LD_VAR 0 18
48399: PPUSH
48400: LD_INT 2
48402: PUSH
48403: LD_INT 30
48405: PUSH
48406: LD_INT 32
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 30
48415: PUSH
48416: LD_INT 33
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: LIST
48427: PPUSH
48428: CALL_OW 72
48432: IFFALSE 48520
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48434: LD_ADDR_VAR 0 8
48438: PUSH
48439: LD_VAR 0 18
48443: PPUSH
48444: LD_INT 2
48446: PUSH
48447: LD_INT 30
48449: PUSH
48450: LD_INT 32
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 30
48459: PUSH
48460: LD_INT 33
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: LIST
48471: PPUSH
48472: CALL_OW 72
48476: PUSH
48477: FOR_IN
48478: IFFALSE 48518
// begin if not GetBWeapon ( i ) then
48480: LD_VAR 0 8
48484: PPUSH
48485: CALL_OW 269
48489: NOT
48490: IFFALSE 48516
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48492: LD_VAR 0 8
48496: PPUSH
48497: LD_VAR 0 8
48501: PPUSH
48502: LD_VAR 0 2
48506: PPUSH
48507: CALL 49766 0 2
48511: PPUSH
48512: CALL_OW 431
// end ;
48516: GO 48477
48518: POP
48519: POP
// end ; for i = 1 to personel do
48520: LD_ADDR_VAR 0 8
48524: PUSH
48525: DOUBLE
48526: LD_INT 1
48528: DEC
48529: ST_TO_ADDR
48530: LD_VAR 0 6
48534: PUSH
48535: FOR_TO
48536: IFFALSE 49600
// begin if i > 4 then
48538: LD_VAR 0 8
48542: PUSH
48543: LD_INT 4
48545: GREATER
48546: IFFALSE 48550
// break ;
48548: GO 49600
// case i of 1 :
48550: LD_VAR 0 8
48554: PUSH
48555: LD_INT 1
48557: DOUBLE
48558: EQUAL
48559: IFTRUE 48563
48561: GO 48643
48563: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48564: LD_ADDR_VAR 0 12
48568: PUSH
48569: LD_VAR 0 18
48573: PPUSH
48574: LD_INT 22
48576: PUSH
48577: LD_VAR 0 16
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 58
48588: PUSH
48589: EMPTY
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: LD_INT 30
48597: PUSH
48598: LD_INT 32
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 30
48607: PUSH
48608: LD_INT 4
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 30
48617: PUSH
48618: LD_INT 5
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: LIST
48635: PPUSH
48636: CALL_OW 72
48640: ST_TO_ADDR
48641: GO 48865
48643: LD_INT 2
48645: DOUBLE
48646: EQUAL
48647: IFTRUE 48651
48649: GO 48713
48651: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48652: LD_ADDR_VAR 0 12
48656: PUSH
48657: LD_VAR 0 18
48661: PPUSH
48662: LD_INT 22
48664: PUSH
48665: LD_VAR 0 16
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: LD_INT 30
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 30
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: LIST
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PPUSH
48706: CALL_OW 72
48710: ST_TO_ADDR
48711: GO 48865
48713: LD_INT 3
48715: DOUBLE
48716: EQUAL
48717: IFTRUE 48721
48719: GO 48783
48721: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48722: LD_ADDR_VAR 0 12
48726: PUSH
48727: LD_VAR 0 18
48731: PPUSH
48732: LD_INT 22
48734: PUSH
48735: LD_VAR 0 16
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 2
48746: PUSH
48747: LD_INT 30
48749: PUSH
48750: LD_INT 2
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 30
48759: PUSH
48760: LD_INT 3
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: LIST
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PPUSH
48776: CALL_OW 72
48780: ST_TO_ADDR
48781: GO 48865
48783: LD_INT 4
48785: DOUBLE
48786: EQUAL
48787: IFTRUE 48791
48789: GO 48864
48791: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48792: LD_ADDR_VAR 0 12
48796: PUSH
48797: LD_VAR 0 18
48801: PPUSH
48802: LD_INT 22
48804: PUSH
48805: LD_VAR 0 16
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: LD_INT 30
48819: PUSH
48820: LD_INT 6
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 30
48829: PUSH
48830: LD_INT 7
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 30
48839: PUSH
48840: LD_INT 8
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PPUSH
48857: CALL_OW 72
48861: ST_TO_ADDR
48862: GO 48865
48864: POP
// if i = 1 then
48865: LD_VAR 0 8
48869: PUSH
48870: LD_INT 1
48872: EQUAL
48873: IFFALSE 48984
// begin tmp := [ ] ;
48875: LD_ADDR_VAR 0 19
48879: PUSH
48880: EMPTY
48881: ST_TO_ADDR
// for j in f do
48882: LD_ADDR_VAR 0 9
48886: PUSH
48887: LD_VAR 0 12
48891: PUSH
48892: FOR_IN
48893: IFFALSE 48966
// if GetBType ( j ) = b_bunker then
48895: LD_VAR 0 9
48899: PPUSH
48900: CALL_OW 266
48904: PUSH
48905: LD_INT 32
48907: EQUAL
48908: IFFALSE 48935
// tmp := Insert ( tmp , 1 , j ) else
48910: LD_ADDR_VAR 0 19
48914: PUSH
48915: LD_VAR 0 19
48919: PPUSH
48920: LD_INT 1
48922: PPUSH
48923: LD_VAR 0 9
48927: PPUSH
48928: CALL_OW 2
48932: ST_TO_ADDR
48933: GO 48964
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48935: LD_ADDR_VAR 0 19
48939: PUSH
48940: LD_VAR 0 19
48944: PPUSH
48945: LD_VAR 0 19
48949: PUSH
48950: LD_INT 1
48952: PLUS
48953: PPUSH
48954: LD_VAR 0 9
48958: PPUSH
48959: CALL_OW 2
48963: ST_TO_ADDR
48964: GO 48892
48966: POP
48967: POP
// if tmp then
48968: LD_VAR 0 19
48972: IFFALSE 48984
// f := tmp ;
48974: LD_ADDR_VAR 0 12
48978: PUSH
48979: LD_VAR 0 19
48983: ST_TO_ADDR
// end ; x := personel [ i ] ;
48984: LD_ADDR_VAR 0 13
48988: PUSH
48989: LD_VAR 0 6
48993: PUSH
48994: LD_VAR 0 8
48998: ARRAY
48999: ST_TO_ADDR
// if x = - 1 then
49000: LD_VAR 0 13
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: EQUAL
49009: IFFALSE 49218
// begin for j in f do
49011: LD_ADDR_VAR 0 9
49015: PUSH
49016: LD_VAR 0 12
49020: PUSH
49021: FOR_IN
49022: IFFALSE 49214
// repeat InitHc ;
49024: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49028: LD_VAR 0 9
49032: PPUSH
49033: CALL_OW 266
49037: PUSH
49038: LD_INT 5
49040: EQUAL
49041: IFFALSE 49111
// begin if UnitsInside ( j ) < 3 then
49043: LD_VAR 0 9
49047: PPUSH
49048: CALL_OW 313
49052: PUSH
49053: LD_INT 3
49055: LESS
49056: IFFALSE 49092
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49058: LD_INT 0
49060: PPUSH
49061: LD_INT 5
49063: PUSH
49064: LD_INT 8
49066: PUSH
49067: LD_INT 9
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: LIST
49074: PUSH
49075: LD_VAR 0 17
49079: ARRAY
49080: PPUSH
49081: LD_VAR 0 4
49085: PPUSH
49086: CALL_OW 380
49090: GO 49109
// PrepareHuman ( false , i , skill ) ;
49092: LD_INT 0
49094: PPUSH
49095: LD_VAR 0 8
49099: PPUSH
49100: LD_VAR 0 4
49104: PPUSH
49105: CALL_OW 380
// end else
49109: GO 49128
// PrepareHuman ( false , i , skill ) ;
49111: LD_INT 0
49113: PPUSH
49114: LD_VAR 0 8
49118: PPUSH
49119: LD_VAR 0 4
49123: PPUSH
49124: CALL_OW 380
// un := CreateHuman ;
49128: LD_ADDR_VAR 0 14
49132: PUSH
49133: CALL_OW 44
49137: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49138: LD_ADDR_VAR 0 7
49142: PUSH
49143: LD_VAR 0 7
49147: PPUSH
49148: LD_INT 1
49150: PPUSH
49151: LD_VAR 0 14
49155: PPUSH
49156: CALL_OW 2
49160: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49161: LD_VAR 0 14
49165: PPUSH
49166: LD_VAR 0 9
49170: PPUSH
49171: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49175: LD_VAR 0 9
49179: PPUSH
49180: CALL_OW 313
49184: PUSH
49185: LD_INT 6
49187: EQUAL
49188: PUSH
49189: LD_VAR 0 9
49193: PPUSH
49194: CALL_OW 266
49198: PUSH
49199: LD_INT 32
49201: PUSH
49202: LD_INT 31
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: IN
49209: OR
49210: IFFALSE 49024
49212: GO 49021
49214: POP
49215: POP
// end else
49216: GO 49598
// for j = 1 to x do
49218: LD_ADDR_VAR 0 9
49222: PUSH
49223: DOUBLE
49224: LD_INT 1
49226: DEC
49227: ST_TO_ADDR
49228: LD_VAR 0 13
49232: PUSH
49233: FOR_TO
49234: IFFALSE 49596
// begin InitHc ;
49236: CALL_OW 19
// if not f then
49240: LD_VAR 0 12
49244: NOT
49245: IFFALSE 49334
// begin PrepareHuman ( false , i , skill ) ;
49247: LD_INT 0
49249: PPUSH
49250: LD_VAR 0 8
49254: PPUSH
49255: LD_VAR 0 4
49259: PPUSH
49260: CALL_OW 380
// un := CreateHuman ;
49264: LD_ADDR_VAR 0 14
49268: PUSH
49269: CALL_OW 44
49273: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49274: LD_ADDR_VAR 0 7
49278: PUSH
49279: LD_VAR 0 7
49283: PPUSH
49284: LD_INT 1
49286: PPUSH
49287: LD_VAR 0 14
49291: PPUSH
49292: CALL_OW 2
49296: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49297: LD_VAR 0 14
49301: PPUSH
49302: LD_VAR 0 1
49306: PPUSH
49307: CALL_OW 250
49311: PPUSH
49312: LD_VAR 0 1
49316: PPUSH
49317: CALL_OW 251
49321: PPUSH
49322: LD_INT 10
49324: PPUSH
49325: LD_INT 0
49327: PPUSH
49328: CALL_OW 50
// continue ;
49332: GO 49233
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49334: LD_VAR 0 12
49338: PUSH
49339: LD_INT 1
49341: ARRAY
49342: PPUSH
49343: CALL_OW 313
49347: PUSH
49348: LD_VAR 0 12
49352: PUSH
49353: LD_INT 1
49355: ARRAY
49356: PPUSH
49357: CALL_OW 266
49361: PUSH
49362: LD_INT 32
49364: PUSH
49365: LD_INT 31
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: IN
49372: AND
49373: PUSH
49374: LD_VAR 0 12
49378: PUSH
49379: LD_INT 1
49381: ARRAY
49382: PPUSH
49383: CALL_OW 313
49387: PUSH
49388: LD_INT 6
49390: EQUAL
49391: OR
49392: IFFALSE 49412
// f := Delete ( f , 1 ) ;
49394: LD_ADDR_VAR 0 12
49398: PUSH
49399: LD_VAR 0 12
49403: PPUSH
49404: LD_INT 1
49406: PPUSH
49407: CALL_OW 3
49411: ST_TO_ADDR
// if not f then
49412: LD_VAR 0 12
49416: NOT
49417: IFFALSE 49435
// begin x := x + 2 ;
49419: LD_ADDR_VAR 0 13
49423: PUSH
49424: LD_VAR 0 13
49428: PUSH
49429: LD_INT 2
49431: PLUS
49432: ST_TO_ADDR
// continue ;
49433: GO 49233
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49435: LD_VAR 0 12
49439: PUSH
49440: LD_INT 1
49442: ARRAY
49443: PPUSH
49444: CALL_OW 266
49448: PUSH
49449: LD_INT 5
49451: EQUAL
49452: IFFALSE 49526
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49454: LD_VAR 0 12
49458: PUSH
49459: LD_INT 1
49461: ARRAY
49462: PPUSH
49463: CALL_OW 313
49467: PUSH
49468: LD_INT 3
49470: LESS
49471: IFFALSE 49507
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49473: LD_INT 0
49475: PPUSH
49476: LD_INT 5
49478: PUSH
49479: LD_INT 8
49481: PUSH
49482: LD_INT 9
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: LIST
49489: PUSH
49490: LD_VAR 0 17
49494: ARRAY
49495: PPUSH
49496: LD_VAR 0 4
49500: PPUSH
49501: CALL_OW 380
49505: GO 49524
// PrepareHuman ( false , i , skill ) ;
49507: LD_INT 0
49509: PPUSH
49510: LD_VAR 0 8
49514: PPUSH
49515: LD_VAR 0 4
49519: PPUSH
49520: CALL_OW 380
// end else
49524: GO 49543
// PrepareHuman ( false , i , skill ) ;
49526: LD_INT 0
49528: PPUSH
49529: LD_VAR 0 8
49533: PPUSH
49534: LD_VAR 0 4
49538: PPUSH
49539: CALL_OW 380
// un := CreateHuman ;
49543: LD_ADDR_VAR 0 14
49547: PUSH
49548: CALL_OW 44
49552: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49553: LD_ADDR_VAR 0 7
49557: PUSH
49558: LD_VAR 0 7
49562: PPUSH
49563: LD_INT 1
49565: PPUSH
49566: LD_VAR 0 14
49570: PPUSH
49571: CALL_OW 2
49575: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49576: LD_VAR 0 14
49580: PPUSH
49581: LD_VAR 0 12
49585: PUSH
49586: LD_INT 1
49588: ARRAY
49589: PPUSH
49590: CALL_OW 52
// end ;
49594: GO 49233
49596: POP
49597: POP
// end ;
49598: GO 48535
49600: POP
49601: POP
// result := result ^ buildings ;
49602: LD_ADDR_VAR 0 7
49606: PUSH
49607: LD_VAR 0 7
49611: PUSH
49612: LD_VAR 0 18
49616: ADD
49617: ST_TO_ADDR
// end else
49618: GO 49761
// begin for i = 1 to personel do
49620: LD_ADDR_VAR 0 8
49624: PUSH
49625: DOUBLE
49626: LD_INT 1
49628: DEC
49629: ST_TO_ADDR
49630: LD_VAR 0 6
49634: PUSH
49635: FOR_TO
49636: IFFALSE 49759
// begin if i > 4 then
49638: LD_VAR 0 8
49642: PUSH
49643: LD_INT 4
49645: GREATER
49646: IFFALSE 49650
// break ;
49648: GO 49759
// x := personel [ i ] ;
49650: LD_ADDR_VAR 0 13
49654: PUSH
49655: LD_VAR 0 6
49659: PUSH
49660: LD_VAR 0 8
49664: ARRAY
49665: ST_TO_ADDR
// if x = - 1 then
49666: LD_VAR 0 13
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: EQUAL
49675: IFFALSE 49679
// continue ;
49677: GO 49635
// PrepareHuman ( false , i , skill ) ;
49679: LD_INT 0
49681: PPUSH
49682: LD_VAR 0 8
49686: PPUSH
49687: LD_VAR 0 4
49691: PPUSH
49692: CALL_OW 380
// un := CreateHuman ;
49696: LD_ADDR_VAR 0 14
49700: PUSH
49701: CALL_OW 44
49705: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49706: LD_VAR 0 14
49710: PPUSH
49711: LD_VAR 0 1
49715: PPUSH
49716: CALL_OW 250
49720: PPUSH
49721: LD_VAR 0 1
49725: PPUSH
49726: CALL_OW 251
49730: PPUSH
49731: LD_INT 10
49733: PPUSH
49734: LD_INT 0
49736: PPUSH
49737: CALL_OW 50
// result := result ^ un ;
49741: LD_ADDR_VAR 0 7
49745: PUSH
49746: LD_VAR 0 7
49750: PUSH
49751: LD_VAR 0 14
49755: ADD
49756: ST_TO_ADDR
// end ;
49757: GO 49635
49759: POP
49760: POP
// end ; end ;
49761: LD_VAR 0 7
49765: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49766: LD_INT 0
49768: PPUSH
49769: PPUSH
49770: PPUSH
49771: PPUSH
49772: PPUSH
49773: PPUSH
49774: PPUSH
49775: PPUSH
49776: PPUSH
49777: PPUSH
49778: PPUSH
49779: PPUSH
49780: PPUSH
49781: PPUSH
49782: PPUSH
49783: PPUSH
// result := false ;
49784: LD_ADDR_VAR 0 3
49788: PUSH
49789: LD_INT 0
49791: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49792: LD_VAR 0 1
49796: NOT
49797: PUSH
49798: LD_VAR 0 1
49802: PPUSH
49803: CALL_OW 266
49807: PUSH
49808: LD_INT 32
49810: PUSH
49811: LD_INT 33
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: IN
49818: NOT
49819: OR
49820: IFFALSE 49824
// exit ;
49822: GO 50933
// nat := GetNation ( tower ) ;
49824: LD_ADDR_VAR 0 12
49828: PUSH
49829: LD_VAR 0 1
49833: PPUSH
49834: CALL_OW 248
49838: ST_TO_ADDR
// side := GetSide ( tower ) ;
49839: LD_ADDR_VAR 0 16
49843: PUSH
49844: LD_VAR 0 1
49848: PPUSH
49849: CALL_OW 255
49853: ST_TO_ADDR
// x := GetX ( tower ) ;
49854: LD_ADDR_VAR 0 10
49858: PUSH
49859: LD_VAR 0 1
49863: PPUSH
49864: CALL_OW 250
49868: ST_TO_ADDR
// y := GetY ( tower ) ;
49869: LD_ADDR_VAR 0 11
49873: PUSH
49874: LD_VAR 0 1
49878: PPUSH
49879: CALL_OW 251
49883: ST_TO_ADDR
// if not x or not y then
49884: LD_VAR 0 10
49888: NOT
49889: PUSH
49890: LD_VAR 0 11
49894: NOT
49895: OR
49896: IFFALSE 49900
// exit ;
49898: GO 50933
// weapon := 0 ;
49900: LD_ADDR_VAR 0 18
49904: PUSH
49905: LD_INT 0
49907: ST_TO_ADDR
// fac_list := [ ] ;
49908: LD_ADDR_VAR 0 17
49912: PUSH
49913: EMPTY
49914: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49915: LD_ADDR_VAR 0 6
49919: PUSH
49920: LD_VAR 0 1
49924: PPUSH
49925: CALL_OW 274
49929: PPUSH
49930: LD_VAR 0 2
49934: PPUSH
49935: LD_INT 0
49937: PPUSH
49938: CALL 47504 0 3
49942: PPUSH
49943: LD_INT 30
49945: PUSH
49946: LD_INT 3
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PPUSH
49953: CALL_OW 72
49957: ST_TO_ADDR
// if not factories then
49958: LD_VAR 0 6
49962: NOT
49963: IFFALSE 49967
// exit ;
49965: GO 50933
// for i in factories do
49967: LD_ADDR_VAR 0 8
49971: PUSH
49972: LD_VAR 0 6
49976: PUSH
49977: FOR_IN
49978: IFFALSE 50003
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49980: LD_ADDR_VAR 0 17
49984: PUSH
49985: LD_VAR 0 17
49989: PUSH
49990: LD_VAR 0 8
49994: PPUSH
49995: CALL_OW 478
49999: UNION
50000: ST_TO_ADDR
50001: GO 49977
50003: POP
50004: POP
// if not fac_list then
50005: LD_VAR 0 17
50009: NOT
50010: IFFALSE 50014
// exit ;
50012: GO 50933
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50014: LD_ADDR_VAR 0 5
50018: PUSH
50019: LD_INT 4
50021: PUSH
50022: LD_INT 5
50024: PUSH
50025: LD_INT 9
50027: PUSH
50028: LD_INT 10
50030: PUSH
50031: LD_INT 6
50033: PUSH
50034: LD_INT 7
50036: PUSH
50037: LD_INT 11
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 27
50051: PUSH
50052: LD_INT 28
50054: PUSH
50055: LD_INT 26
50057: PUSH
50058: LD_INT 30
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 43
50069: PUSH
50070: LD_INT 44
50072: PUSH
50073: LD_INT 46
50075: PUSH
50076: LD_INT 45
50078: PUSH
50079: LD_INT 47
50081: PUSH
50082: LD_INT 49
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: LIST
50097: PUSH
50098: LD_VAR 0 12
50102: ARRAY
50103: ST_TO_ADDR
// list := list isect fac_list ;
50104: LD_ADDR_VAR 0 5
50108: PUSH
50109: LD_VAR 0 5
50113: PUSH
50114: LD_VAR 0 17
50118: ISECT
50119: ST_TO_ADDR
// if not list then
50120: LD_VAR 0 5
50124: NOT
50125: IFFALSE 50129
// exit ;
50127: GO 50933
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50129: LD_VAR 0 12
50133: PUSH
50134: LD_INT 3
50136: EQUAL
50137: PUSH
50138: LD_INT 49
50140: PUSH
50141: LD_VAR 0 5
50145: IN
50146: AND
50147: PUSH
50148: LD_INT 31
50150: PPUSH
50151: LD_VAR 0 16
50155: PPUSH
50156: CALL_OW 321
50160: PUSH
50161: LD_INT 2
50163: EQUAL
50164: AND
50165: IFFALSE 50225
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50167: LD_INT 22
50169: PUSH
50170: LD_VAR 0 16
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 35
50181: PUSH
50182: LD_INT 49
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 91
50191: PUSH
50192: LD_VAR 0 1
50196: PUSH
50197: LD_INT 10
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: LIST
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: LIST
50209: PPUSH
50210: CALL_OW 69
50214: NOT
50215: IFFALSE 50225
// weapon := ru_time_lapser ;
50217: LD_ADDR_VAR 0 18
50221: PUSH
50222: LD_INT 49
50224: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50225: LD_VAR 0 12
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: IN
50240: PUSH
50241: LD_INT 11
50243: PUSH
50244: LD_VAR 0 5
50248: IN
50249: PUSH
50250: LD_INT 30
50252: PUSH
50253: LD_VAR 0 5
50257: IN
50258: OR
50259: AND
50260: PUSH
50261: LD_INT 6
50263: PPUSH
50264: LD_VAR 0 16
50268: PPUSH
50269: CALL_OW 321
50273: PUSH
50274: LD_INT 2
50276: EQUAL
50277: AND
50278: IFFALSE 50443
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50280: LD_INT 22
50282: PUSH
50283: LD_VAR 0 16
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: LD_INT 35
50297: PUSH
50298: LD_INT 11
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 35
50307: PUSH
50308: LD_INT 30
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 91
50322: PUSH
50323: LD_VAR 0 1
50327: PUSH
50328: LD_INT 18
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: LIST
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: LIST
50340: PPUSH
50341: CALL_OW 69
50345: NOT
50346: PUSH
50347: LD_INT 22
50349: PUSH
50350: LD_VAR 0 16
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: LD_INT 30
50364: PUSH
50365: LD_INT 32
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 30
50374: PUSH
50375: LD_INT 33
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 91
50389: PUSH
50390: LD_VAR 0 1
50394: PUSH
50395: LD_INT 12
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: LIST
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: LIST
50407: PUSH
50408: EMPTY
50409: LIST
50410: PPUSH
50411: CALL_OW 69
50415: PUSH
50416: LD_INT 2
50418: GREATER
50419: AND
50420: IFFALSE 50443
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50422: LD_ADDR_VAR 0 18
50426: PUSH
50427: LD_INT 11
50429: PUSH
50430: LD_INT 30
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_VAR 0 12
50441: ARRAY
50442: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50443: LD_VAR 0 18
50447: NOT
50448: PUSH
50449: LD_INT 40
50451: PPUSH
50452: LD_VAR 0 16
50456: PPUSH
50457: CALL_OW 321
50461: PUSH
50462: LD_INT 2
50464: EQUAL
50465: AND
50466: PUSH
50467: LD_INT 7
50469: PUSH
50470: LD_VAR 0 5
50474: IN
50475: PUSH
50476: LD_INT 28
50478: PUSH
50479: LD_VAR 0 5
50483: IN
50484: OR
50485: PUSH
50486: LD_INT 45
50488: PUSH
50489: LD_VAR 0 5
50493: IN
50494: OR
50495: AND
50496: IFFALSE 50750
// begin hex := GetHexInfo ( x , y ) ;
50498: LD_ADDR_VAR 0 4
50502: PUSH
50503: LD_VAR 0 10
50507: PPUSH
50508: LD_VAR 0 11
50512: PPUSH
50513: CALL_OW 546
50517: ST_TO_ADDR
// if hex [ 1 ] then
50518: LD_VAR 0 4
50522: PUSH
50523: LD_INT 1
50525: ARRAY
50526: IFFALSE 50530
// exit ;
50528: GO 50933
// height := hex [ 2 ] ;
50530: LD_ADDR_VAR 0 15
50534: PUSH
50535: LD_VAR 0 4
50539: PUSH
50540: LD_INT 2
50542: ARRAY
50543: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50544: LD_ADDR_VAR 0 14
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: LD_INT 2
50554: PUSH
50555: LD_INT 3
50557: PUSH
50558: LD_INT 5
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: ST_TO_ADDR
// for i in tmp do
50567: LD_ADDR_VAR 0 8
50571: PUSH
50572: LD_VAR 0 14
50576: PUSH
50577: FOR_IN
50578: IFFALSE 50748
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50580: LD_ADDR_VAR 0 9
50584: PUSH
50585: LD_VAR 0 10
50589: PPUSH
50590: LD_VAR 0 8
50594: PPUSH
50595: LD_INT 5
50597: PPUSH
50598: CALL_OW 272
50602: PUSH
50603: LD_VAR 0 11
50607: PPUSH
50608: LD_VAR 0 8
50612: PPUSH
50613: LD_INT 5
50615: PPUSH
50616: CALL_OW 273
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50625: LD_VAR 0 9
50629: PUSH
50630: LD_INT 1
50632: ARRAY
50633: PPUSH
50634: LD_VAR 0 9
50638: PUSH
50639: LD_INT 2
50641: ARRAY
50642: PPUSH
50643: CALL_OW 488
50647: IFFALSE 50746
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50649: LD_ADDR_VAR 0 4
50653: PUSH
50654: LD_VAR 0 9
50658: PUSH
50659: LD_INT 1
50661: ARRAY
50662: PPUSH
50663: LD_VAR 0 9
50667: PUSH
50668: LD_INT 2
50670: ARRAY
50671: PPUSH
50672: CALL_OW 546
50676: ST_TO_ADDR
// if hex [ 1 ] then
50677: LD_VAR 0 4
50681: PUSH
50682: LD_INT 1
50684: ARRAY
50685: IFFALSE 50689
// continue ;
50687: GO 50577
// h := hex [ 2 ] ;
50689: LD_ADDR_VAR 0 13
50693: PUSH
50694: LD_VAR 0 4
50698: PUSH
50699: LD_INT 2
50701: ARRAY
50702: ST_TO_ADDR
// if h + 7 < height then
50703: LD_VAR 0 13
50707: PUSH
50708: LD_INT 7
50710: PLUS
50711: PUSH
50712: LD_VAR 0 15
50716: LESS
50717: IFFALSE 50746
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50719: LD_ADDR_VAR 0 18
50723: PUSH
50724: LD_INT 7
50726: PUSH
50727: LD_INT 28
50729: PUSH
50730: LD_INT 45
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: LIST
50737: PUSH
50738: LD_VAR 0 12
50742: ARRAY
50743: ST_TO_ADDR
// break ;
50744: GO 50748
// end ; end ; end ;
50746: GO 50577
50748: POP
50749: POP
// end ; if not weapon then
50750: LD_VAR 0 18
50754: NOT
50755: IFFALSE 50815
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50757: LD_ADDR_VAR 0 5
50761: PUSH
50762: LD_VAR 0 5
50766: PUSH
50767: LD_INT 11
50769: PUSH
50770: LD_INT 30
50772: PUSH
50773: LD_INT 49
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: LIST
50780: DIFF
50781: ST_TO_ADDR
// if not list then
50782: LD_VAR 0 5
50786: NOT
50787: IFFALSE 50791
// exit ;
50789: GO 50933
// weapon := list [ rand ( 1 , list ) ] ;
50791: LD_ADDR_VAR 0 18
50795: PUSH
50796: LD_VAR 0 5
50800: PUSH
50801: LD_INT 1
50803: PPUSH
50804: LD_VAR 0 5
50808: PPUSH
50809: CALL_OW 12
50813: ARRAY
50814: ST_TO_ADDR
// end ; if weapon then
50815: LD_VAR 0 18
50819: IFFALSE 50933
// begin tmp := CostOfWeapon ( weapon ) ;
50821: LD_ADDR_VAR 0 14
50825: PUSH
50826: LD_VAR 0 18
50830: PPUSH
50831: CALL_OW 451
50835: ST_TO_ADDR
// j := GetBase ( tower ) ;
50836: LD_ADDR_VAR 0 9
50840: PUSH
50841: LD_VAR 0 1
50845: PPUSH
50846: CALL_OW 274
50850: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50851: LD_VAR 0 9
50855: PPUSH
50856: LD_INT 1
50858: PPUSH
50859: CALL_OW 275
50863: PUSH
50864: LD_VAR 0 14
50868: PUSH
50869: LD_INT 1
50871: ARRAY
50872: GREATEREQUAL
50873: PUSH
50874: LD_VAR 0 9
50878: PPUSH
50879: LD_INT 2
50881: PPUSH
50882: CALL_OW 275
50886: PUSH
50887: LD_VAR 0 14
50891: PUSH
50892: LD_INT 2
50894: ARRAY
50895: GREATEREQUAL
50896: AND
50897: PUSH
50898: LD_VAR 0 9
50902: PPUSH
50903: LD_INT 3
50905: PPUSH
50906: CALL_OW 275
50910: PUSH
50911: LD_VAR 0 14
50915: PUSH
50916: LD_INT 3
50918: ARRAY
50919: GREATEREQUAL
50920: AND
50921: IFFALSE 50933
// result := weapon ;
50923: LD_ADDR_VAR 0 3
50927: PUSH
50928: LD_VAR 0 18
50932: ST_TO_ADDR
// end ; end ;
50933: LD_VAR 0 3
50937: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50938: LD_INT 0
50940: PPUSH
50941: PPUSH
// result := true ;
50942: LD_ADDR_VAR 0 3
50946: PUSH
50947: LD_INT 1
50949: ST_TO_ADDR
// if array1 = array2 then
50950: LD_VAR 0 1
50954: PUSH
50955: LD_VAR 0 2
50959: EQUAL
50960: IFFALSE 51020
// begin for i = 1 to array1 do
50962: LD_ADDR_VAR 0 4
50966: PUSH
50967: DOUBLE
50968: LD_INT 1
50970: DEC
50971: ST_TO_ADDR
50972: LD_VAR 0 1
50976: PUSH
50977: FOR_TO
50978: IFFALSE 51016
// if array1 [ i ] <> array2 [ i ] then
50980: LD_VAR 0 1
50984: PUSH
50985: LD_VAR 0 4
50989: ARRAY
50990: PUSH
50991: LD_VAR 0 2
50995: PUSH
50996: LD_VAR 0 4
51000: ARRAY
51001: NONEQUAL
51002: IFFALSE 51014
// begin result := false ;
51004: LD_ADDR_VAR 0 3
51008: PUSH
51009: LD_INT 0
51011: ST_TO_ADDR
// break ;
51012: GO 51016
// end ;
51014: GO 50977
51016: POP
51017: POP
// end else
51018: GO 51028
// result := false ;
51020: LD_ADDR_VAR 0 3
51024: PUSH
51025: LD_INT 0
51027: ST_TO_ADDR
// end ;
51028: LD_VAR 0 3
51032: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51033: LD_INT 0
51035: PPUSH
51036: PPUSH
// if not array1 or not array2 then
51037: LD_VAR 0 1
51041: NOT
51042: PUSH
51043: LD_VAR 0 2
51047: NOT
51048: OR
51049: IFFALSE 51053
// exit ;
51051: GO 51117
// result := true ;
51053: LD_ADDR_VAR 0 3
51057: PUSH
51058: LD_INT 1
51060: ST_TO_ADDR
// for i = 1 to array1 do
51061: LD_ADDR_VAR 0 4
51065: PUSH
51066: DOUBLE
51067: LD_INT 1
51069: DEC
51070: ST_TO_ADDR
51071: LD_VAR 0 1
51075: PUSH
51076: FOR_TO
51077: IFFALSE 51115
// if array1 [ i ] <> array2 [ i ] then
51079: LD_VAR 0 1
51083: PUSH
51084: LD_VAR 0 4
51088: ARRAY
51089: PUSH
51090: LD_VAR 0 2
51094: PUSH
51095: LD_VAR 0 4
51099: ARRAY
51100: NONEQUAL
51101: IFFALSE 51113
// begin result := false ;
51103: LD_ADDR_VAR 0 3
51107: PUSH
51108: LD_INT 0
51110: ST_TO_ADDR
// break ;
51111: GO 51115
// end ;
51113: GO 51076
51115: POP
51116: POP
// end ;
51117: LD_VAR 0 3
51121: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51122: LD_INT 0
51124: PPUSH
51125: PPUSH
51126: PPUSH
// pom := GetBase ( fac ) ;
51127: LD_ADDR_VAR 0 5
51131: PUSH
51132: LD_VAR 0 1
51136: PPUSH
51137: CALL_OW 274
51141: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51142: LD_ADDR_VAR 0 4
51146: PUSH
51147: LD_VAR 0 2
51151: PUSH
51152: LD_INT 1
51154: ARRAY
51155: PPUSH
51156: LD_VAR 0 2
51160: PUSH
51161: LD_INT 2
51163: ARRAY
51164: PPUSH
51165: LD_VAR 0 2
51169: PUSH
51170: LD_INT 3
51172: ARRAY
51173: PPUSH
51174: LD_VAR 0 2
51178: PUSH
51179: LD_INT 4
51181: ARRAY
51182: PPUSH
51183: CALL_OW 449
51187: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51188: LD_ADDR_VAR 0 3
51192: PUSH
51193: LD_VAR 0 5
51197: PPUSH
51198: LD_INT 1
51200: PPUSH
51201: CALL_OW 275
51205: PUSH
51206: LD_VAR 0 4
51210: PUSH
51211: LD_INT 1
51213: ARRAY
51214: GREATEREQUAL
51215: PUSH
51216: LD_VAR 0 5
51220: PPUSH
51221: LD_INT 2
51223: PPUSH
51224: CALL_OW 275
51228: PUSH
51229: LD_VAR 0 4
51233: PUSH
51234: LD_INT 2
51236: ARRAY
51237: GREATEREQUAL
51238: AND
51239: PUSH
51240: LD_VAR 0 5
51244: PPUSH
51245: LD_INT 3
51247: PPUSH
51248: CALL_OW 275
51252: PUSH
51253: LD_VAR 0 4
51257: PUSH
51258: LD_INT 3
51260: ARRAY
51261: GREATEREQUAL
51262: AND
51263: ST_TO_ADDR
// end ;
51264: LD_VAR 0 3
51268: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51269: LD_INT 0
51271: PPUSH
51272: PPUSH
51273: PPUSH
51274: PPUSH
// pom := GetBase ( building ) ;
51275: LD_ADDR_VAR 0 3
51279: PUSH
51280: LD_VAR 0 1
51284: PPUSH
51285: CALL_OW 274
51289: ST_TO_ADDR
// if not pom then
51290: LD_VAR 0 3
51294: NOT
51295: IFFALSE 51299
// exit ;
51297: GO 51469
// btype := GetBType ( building ) ;
51299: LD_ADDR_VAR 0 5
51303: PUSH
51304: LD_VAR 0 1
51308: PPUSH
51309: CALL_OW 266
51313: ST_TO_ADDR
// if btype = b_armoury then
51314: LD_VAR 0 5
51318: PUSH
51319: LD_INT 4
51321: EQUAL
51322: IFFALSE 51332
// btype := b_barracks ;
51324: LD_ADDR_VAR 0 5
51328: PUSH
51329: LD_INT 5
51331: ST_TO_ADDR
// if btype = b_depot then
51332: LD_VAR 0 5
51336: PUSH
51337: LD_INT 0
51339: EQUAL
51340: IFFALSE 51350
// btype := b_warehouse ;
51342: LD_ADDR_VAR 0 5
51346: PUSH
51347: LD_INT 1
51349: ST_TO_ADDR
// if btype = b_workshop then
51350: LD_VAR 0 5
51354: PUSH
51355: LD_INT 2
51357: EQUAL
51358: IFFALSE 51368
// btype := b_factory ;
51360: LD_ADDR_VAR 0 5
51364: PUSH
51365: LD_INT 3
51367: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51368: LD_ADDR_VAR 0 4
51372: PUSH
51373: LD_VAR 0 5
51377: PPUSH
51378: LD_VAR 0 1
51382: PPUSH
51383: CALL_OW 248
51387: PPUSH
51388: CALL_OW 450
51392: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51393: LD_ADDR_VAR 0 2
51397: PUSH
51398: LD_VAR 0 3
51402: PPUSH
51403: LD_INT 1
51405: PPUSH
51406: CALL_OW 275
51410: PUSH
51411: LD_VAR 0 4
51415: PUSH
51416: LD_INT 1
51418: ARRAY
51419: GREATEREQUAL
51420: PUSH
51421: LD_VAR 0 3
51425: PPUSH
51426: LD_INT 2
51428: PPUSH
51429: CALL_OW 275
51433: PUSH
51434: LD_VAR 0 4
51438: PUSH
51439: LD_INT 2
51441: ARRAY
51442: GREATEREQUAL
51443: AND
51444: PUSH
51445: LD_VAR 0 3
51449: PPUSH
51450: LD_INT 3
51452: PPUSH
51453: CALL_OW 275
51457: PUSH
51458: LD_VAR 0 4
51462: PUSH
51463: LD_INT 3
51465: ARRAY
51466: GREATEREQUAL
51467: AND
51468: ST_TO_ADDR
// end ;
51469: LD_VAR 0 2
51473: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51474: LD_INT 0
51476: PPUSH
51477: PPUSH
51478: PPUSH
// pom := GetBase ( building ) ;
51479: LD_ADDR_VAR 0 4
51483: PUSH
51484: LD_VAR 0 1
51488: PPUSH
51489: CALL_OW 274
51493: ST_TO_ADDR
// if not pom then
51494: LD_VAR 0 4
51498: NOT
51499: IFFALSE 51503
// exit ;
51501: GO 51604
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51503: LD_ADDR_VAR 0 5
51507: PUSH
51508: LD_VAR 0 2
51512: PPUSH
51513: LD_VAR 0 1
51517: PPUSH
51518: CALL_OW 248
51522: PPUSH
51523: CALL_OW 450
51527: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51528: LD_ADDR_VAR 0 3
51532: PUSH
51533: LD_VAR 0 4
51537: PPUSH
51538: LD_INT 1
51540: PPUSH
51541: CALL_OW 275
51545: PUSH
51546: LD_VAR 0 5
51550: PUSH
51551: LD_INT 1
51553: ARRAY
51554: GREATEREQUAL
51555: PUSH
51556: LD_VAR 0 4
51560: PPUSH
51561: LD_INT 2
51563: PPUSH
51564: CALL_OW 275
51568: PUSH
51569: LD_VAR 0 5
51573: PUSH
51574: LD_INT 2
51576: ARRAY
51577: GREATEREQUAL
51578: AND
51579: PUSH
51580: LD_VAR 0 4
51584: PPUSH
51585: LD_INT 3
51587: PPUSH
51588: CALL_OW 275
51592: PUSH
51593: LD_VAR 0 5
51597: PUSH
51598: LD_INT 3
51600: ARRAY
51601: GREATEREQUAL
51602: AND
51603: ST_TO_ADDR
// end ;
51604: LD_VAR 0 3
51608: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51609: LD_INT 0
51611: PPUSH
51612: PPUSH
51613: PPUSH
51614: PPUSH
51615: PPUSH
51616: PPUSH
51617: PPUSH
51618: PPUSH
51619: PPUSH
51620: PPUSH
51621: PPUSH
// result := false ;
51622: LD_ADDR_VAR 0 8
51626: PUSH
51627: LD_INT 0
51629: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51630: LD_VAR 0 5
51634: NOT
51635: PUSH
51636: LD_VAR 0 1
51640: NOT
51641: OR
51642: PUSH
51643: LD_VAR 0 2
51647: NOT
51648: OR
51649: PUSH
51650: LD_VAR 0 3
51654: NOT
51655: OR
51656: IFFALSE 51660
// exit ;
51658: GO 52474
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51660: LD_ADDR_VAR 0 14
51664: PUSH
51665: LD_VAR 0 1
51669: PPUSH
51670: LD_VAR 0 2
51674: PPUSH
51675: LD_VAR 0 3
51679: PPUSH
51680: LD_VAR 0 4
51684: PPUSH
51685: LD_VAR 0 5
51689: PUSH
51690: LD_INT 1
51692: ARRAY
51693: PPUSH
51694: CALL_OW 248
51698: PPUSH
51699: LD_INT 0
51701: PPUSH
51702: CALL 53707 0 6
51706: ST_TO_ADDR
// if not hexes then
51707: LD_VAR 0 14
51711: NOT
51712: IFFALSE 51716
// exit ;
51714: GO 52474
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51716: LD_ADDR_VAR 0 17
51720: PUSH
51721: LD_VAR 0 5
51725: PPUSH
51726: LD_INT 22
51728: PUSH
51729: LD_VAR 0 13
51733: PPUSH
51734: CALL_OW 255
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: LD_INT 30
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 30
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: LIST
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PPUSH
51775: CALL_OW 72
51779: ST_TO_ADDR
// for i = 1 to hexes do
51780: LD_ADDR_VAR 0 9
51784: PUSH
51785: DOUBLE
51786: LD_INT 1
51788: DEC
51789: ST_TO_ADDR
51790: LD_VAR 0 14
51794: PUSH
51795: FOR_TO
51796: IFFALSE 52472
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51798: LD_ADDR_VAR 0 13
51802: PUSH
51803: LD_VAR 0 14
51807: PUSH
51808: LD_VAR 0 9
51812: ARRAY
51813: PUSH
51814: LD_INT 1
51816: ARRAY
51817: PPUSH
51818: LD_VAR 0 14
51822: PUSH
51823: LD_VAR 0 9
51827: ARRAY
51828: PUSH
51829: LD_INT 2
51831: ARRAY
51832: PPUSH
51833: CALL_OW 428
51837: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51838: LD_VAR 0 14
51842: PUSH
51843: LD_VAR 0 9
51847: ARRAY
51848: PUSH
51849: LD_INT 1
51851: ARRAY
51852: PPUSH
51853: LD_VAR 0 14
51857: PUSH
51858: LD_VAR 0 9
51862: ARRAY
51863: PUSH
51864: LD_INT 2
51866: ARRAY
51867: PPUSH
51868: CALL_OW 351
51872: PUSH
51873: LD_VAR 0 14
51877: PUSH
51878: LD_VAR 0 9
51882: ARRAY
51883: PUSH
51884: LD_INT 1
51886: ARRAY
51887: PPUSH
51888: LD_VAR 0 14
51892: PUSH
51893: LD_VAR 0 9
51897: ARRAY
51898: PUSH
51899: LD_INT 2
51901: ARRAY
51902: PPUSH
51903: CALL_OW 488
51907: NOT
51908: OR
51909: PUSH
51910: LD_VAR 0 13
51914: PPUSH
51915: CALL_OW 247
51919: PUSH
51920: LD_INT 3
51922: EQUAL
51923: OR
51924: IFFALSE 51930
// exit ;
51926: POP
51927: POP
51928: GO 52474
// if not tmp then
51930: LD_VAR 0 13
51934: NOT
51935: IFFALSE 51939
// continue ;
51937: GO 51795
// result := true ;
51939: LD_ADDR_VAR 0 8
51943: PUSH
51944: LD_INT 1
51946: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51947: LD_VAR 0 6
51951: PUSH
51952: LD_VAR 0 13
51956: PPUSH
51957: CALL_OW 247
51961: PUSH
51962: LD_INT 2
51964: EQUAL
51965: AND
51966: PUSH
51967: LD_VAR 0 13
51971: PPUSH
51972: CALL_OW 263
51976: PUSH
51977: LD_INT 1
51979: EQUAL
51980: AND
51981: IFFALSE 52145
// begin if IsDrivenBy ( tmp ) then
51983: LD_VAR 0 13
51987: PPUSH
51988: CALL_OW 311
51992: IFFALSE 51996
// continue ;
51994: GO 51795
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51996: LD_VAR 0 6
52000: PPUSH
52001: LD_INT 3
52003: PUSH
52004: LD_INT 60
52006: PUSH
52007: EMPTY
52008: LIST
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 3
52016: PUSH
52017: LD_INT 55
52019: PUSH
52020: EMPTY
52021: LIST
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PPUSH
52031: CALL_OW 72
52035: IFFALSE 52143
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52037: LD_ADDR_VAR 0 18
52041: PUSH
52042: LD_VAR 0 6
52046: PPUSH
52047: LD_INT 3
52049: PUSH
52050: LD_INT 60
52052: PUSH
52053: EMPTY
52054: LIST
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 3
52062: PUSH
52063: LD_INT 55
52065: PUSH
52066: EMPTY
52067: LIST
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PPUSH
52077: CALL_OW 72
52081: PUSH
52082: LD_INT 1
52084: ARRAY
52085: ST_TO_ADDR
// if IsInUnit ( driver ) then
52086: LD_VAR 0 18
52090: PPUSH
52091: CALL_OW 310
52095: IFFALSE 52106
// ComExit ( driver ) ;
52097: LD_VAR 0 18
52101: PPUSH
52102: CALL 77486 0 1
// AddComEnterUnit ( driver , tmp ) ;
52106: LD_VAR 0 18
52110: PPUSH
52111: LD_VAR 0 13
52115: PPUSH
52116: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52120: LD_VAR 0 18
52124: PPUSH
52125: LD_VAR 0 7
52129: PPUSH
52130: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52134: LD_VAR 0 18
52138: PPUSH
52139: CALL_OW 181
// end ; continue ;
52143: GO 51795
// end ; if not cleaners or not tmp in cleaners then
52145: LD_VAR 0 6
52149: NOT
52150: PUSH
52151: LD_VAR 0 13
52155: PUSH
52156: LD_VAR 0 6
52160: IN
52161: NOT
52162: OR
52163: IFFALSE 52470
// begin if dep then
52165: LD_VAR 0 17
52169: IFFALSE 52305
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52171: LD_ADDR_VAR 0 16
52175: PUSH
52176: LD_VAR 0 17
52180: PUSH
52181: LD_INT 1
52183: ARRAY
52184: PPUSH
52185: CALL_OW 250
52189: PPUSH
52190: LD_VAR 0 17
52194: PUSH
52195: LD_INT 1
52197: ARRAY
52198: PPUSH
52199: CALL_OW 254
52203: PPUSH
52204: LD_INT 5
52206: PPUSH
52207: CALL_OW 272
52211: PUSH
52212: LD_VAR 0 17
52216: PUSH
52217: LD_INT 1
52219: ARRAY
52220: PPUSH
52221: CALL_OW 251
52225: PPUSH
52226: LD_VAR 0 17
52230: PUSH
52231: LD_INT 1
52233: ARRAY
52234: PPUSH
52235: CALL_OW 254
52239: PPUSH
52240: LD_INT 5
52242: PPUSH
52243: CALL_OW 273
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52252: LD_VAR 0 16
52256: PUSH
52257: LD_INT 1
52259: ARRAY
52260: PPUSH
52261: LD_VAR 0 16
52265: PUSH
52266: LD_INT 2
52268: ARRAY
52269: PPUSH
52270: CALL_OW 488
52274: IFFALSE 52305
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52276: LD_VAR 0 13
52280: PPUSH
52281: LD_VAR 0 16
52285: PUSH
52286: LD_INT 1
52288: ARRAY
52289: PPUSH
52290: LD_VAR 0 16
52294: PUSH
52295: LD_INT 2
52297: ARRAY
52298: PPUSH
52299: CALL_OW 111
// continue ;
52303: GO 51795
// end ; end ; r := GetDir ( tmp ) ;
52305: LD_ADDR_VAR 0 15
52309: PUSH
52310: LD_VAR 0 13
52314: PPUSH
52315: CALL_OW 254
52319: ST_TO_ADDR
// if r = 5 then
52320: LD_VAR 0 15
52324: PUSH
52325: LD_INT 5
52327: EQUAL
52328: IFFALSE 52338
// r := 0 ;
52330: LD_ADDR_VAR 0 15
52334: PUSH
52335: LD_INT 0
52337: ST_TO_ADDR
// for j = r to 5 do
52338: LD_ADDR_VAR 0 10
52342: PUSH
52343: DOUBLE
52344: LD_VAR 0 15
52348: DEC
52349: ST_TO_ADDR
52350: LD_INT 5
52352: PUSH
52353: FOR_TO
52354: IFFALSE 52468
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52356: LD_ADDR_VAR 0 11
52360: PUSH
52361: LD_VAR 0 13
52365: PPUSH
52366: CALL_OW 250
52370: PPUSH
52371: LD_VAR 0 10
52375: PPUSH
52376: LD_INT 2
52378: PPUSH
52379: CALL_OW 272
52383: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52384: LD_ADDR_VAR 0 12
52388: PUSH
52389: LD_VAR 0 13
52393: PPUSH
52394: CALL_OW 251
52398: PPUSH
52399: LD_VAR 0 10
52403: PPUSH
52404: LD_INT 2
52406: PPUSH
52407: CALL_OW 273
52411: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52412: LD_VAR 0 11
52416: PPUSH
52417: LD_VAR 0 12
52421: PPUSH
52422: CALL_OW 488
52426: PUSH
52427: LD_VAR 0 11
52431: PPUSH
52432: LD_VAR 0 12
52436: PPUSH
52437: CALL_OW 428
52441: NOT
52442: AND
52443: IFFALSE 52466
// begin ComMoveXY ( tmp , _x , _y ) ;
52445: LD_VAR 0 13
52449: PPUSH
52450: LD_VAR 0 11
52454: PPUSH
52455: LD_VAR 0 12
52459: PPUSH
52460: CALL_OW 111
// break ;
52464: GO 52468
// end ; end ;
52466: GO 52353
52468: POP
52469: POP
// end ; end ;
52470: GO 51795
52472: POP
52473: POP
// end ;
52474: LD_VAR 0 8
52478: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52479: LD_INT 0
52481: PPUSH
// result := true ;
52482: LD_ADDR_VAR 0 3
52486: PUSH
52487: LD_INT 1
52489: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52490: LD_VAR 0 2
52494: PUSH
52495: LD_INT 24
52497: DOUBLE
52498: EQUAL
52499: IFTRUE 52509
52501: LD_INT 33
52503: DOUBLE
52504: EQUAL
52505: IFTRUE 52509
52507: GO 52534
52509: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52510: LD_ADDR_VAR 0 3
52514: PUSH
52515: LD_INT 32
52517: PPUSH
52518: LD_VAR 0 1
52522: PPUSH
52523: CALL_OW 321
52527: PUSH
52528: LD_INT 2
52530: EQUAL
52531: ST_TO_ADDR
52532: GO 52850
52534: LD_INT 20
52536: DOUBLE
52537: EQUAL
52538: IFTRUE 52542
52540: GO 52567
52542: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52543: LD_ADDR_VAR 0 3
52547: PUSH
52548: LD_INT 6
52550: PPUSH
52551: LD_VAR 0 1
52555: PPUSH
52556: CALL_OW 321
52560: PUSH
52561: LD_INT 2
52563: EQUAL
52564: ST_TO_ADDR
52565: GO 52850
52567: LD_INT 22
52569: DOUBLE
52570: EQUAL
52571: IFTRUE 52581
52573: LD_INT 36
52575: DOUBLE
52576: EQUAL
52577: IFTRUE 52581
52579: GO 52606
52581: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52582: LD_ADDR_VAR 0 3
52586: PUSH
52587: LD_INT 15
52589: PPUSH
52590: LD_VAR 0 1
52594: PPUSH
52595: CALL_OW 321
52599: PUSH
52600: LD_INT 2
52602: EQUAL
52603: ST_TO_ADDR
52604: GO 52850
52606: LD_INT 30
52608: DOUBLE
52609: EQUAL
52610: IFTRUE 52614
52612: GO 52639
52614: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52615: LD_ADDR_VAR 0 3
52619: PUSH
52620: LD_INT 20
52622: PPUSH
52623: LD_VAR 0 1
52627: PPUSH
52628: CALL_OW 321
52632: PUSH
52633: LD_INT 2
52635: EQUAL
52636: ST_TO_ADDR
52637: GO 52850
52639: LD_INT 28
52641: DOUBLE
52642: EQUAL
52643: IFTRUE 52653
52645: LD_INT 21
52647: DOUBLE
52648: EQUAL
52649: IFTRUE 52653
52651: GO 52678
52653: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52654: LD_ADDR_VAR 0 3
52658: PUSH
52659: LD_INT 21
52661: PPUSH
52662: LD_VAR 0 1
52666: PPUSH
52667: CALL_OW 321
52671: PUSH
52672: LD_INT 2
52674: EQUAL
52675: ST_TO_ADDR
52676: GO 52850
52678: LD_INT 16
52680: DOUBLE
52681: EQUAL
52682: IFTRUE 52686
52684: GO 52711
52686: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52687: LD_ADDR_VAR 0 3
52691: PUSH
52692: LD_INT 84
52694: PPUSH
52695: LD_VAR 0 1
52699: PPUSH
52700: CALL_OW 321
52704: PUSH
52705: LD_INT 2
52707: EQUAL
52708: ST_TO_ADDR
52709: GO 52850
52711: LD_INT 19
52713: DOUBLE
52714: EQUAL
52715: IFTRUE 52725
52717: LD_INT 23
52719: DOUBLE
52720: EQUAL
52721: IFTRUE 52725
52723: GO 52750
52725: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52726: LD_ADDR_VAR 0 3
52730: PUSH
52731: LD_INT 83
52733: PPUSH
52734: LD_VAR 0 1
52738: PPUSH
52739: CALL_OW 321
52743: PUSH
52744: LD_INT 2
52746: EQUAL
52747: ST_TO_ADDR
52748: GO 52850
52750: LD_INT 17
52752: DOUBLE
52753: EQUAL
52754: IFTRUE 52758
52756: GO 52783
52758: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52759: LD_ADDR_VAR 0 3
52763: PUSH
52764: LD_INT 39
52766: PPUSH
52767: LD_VAR 0 1
52771: PPUSH
52772: CALL_OW 321
52776: PUSH
52777: LD_INT 2
52779: EQUAL
52780: ST_TO_ADDR
52781: GO 52850
52783: LD_INT 18
52785: DOUBLE
52786: EQUAL
52787: IFTRUE 52791
52789: GO 52816
52791: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52792: LD_ADDR_VAR 0 3
52796: PUSH
52797: LD_INT 40
52799: PPUSH
52800: LD_VAR 0 1
52804: PPUSH
52805: CALL_OW 321
52809: PUSH
52810: LD_INT 2
52812: EQUAL
52813: ST_TO_ADDR
52814: GO 52850
52816: LD_INT 27
52818: DOUBLE
52819: EQUAL
52820: IFTRUE 52824
52822: GO 52849
52824: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52825: LD_ADDR_VAR 0 3
52829: PUSH
52830: LD_INT 35
52832: PPUSH
52833: LD_VAR 0 1
52837: PPUSH
52838: CALL_OW 321
52842: PUSH
52843: LD_INT 2
52845: EQUAL
52846: ST_TO_ADDR
52847: GO 52850
52849: POP
// end ;
52850: LD_VAR 0 3
52854: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52855: LD_INT 0
52857: PPUSH
52858: PPUSH
52859: PPUSH
52860: PPUSH
52861: PPUSH
52862: PPUSH
52863: PPUSH
52864: PPUSH
52865: PPUSH
52866: PPUSH
52867: PPUSH
// result := false ;
52868: LD_ADDR_VAR 0 6
52872: PUSH
52873: LD_INT 0
52875: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52876: LD_VAR 0 1
52880: NOT
52881: PUSH
52882: LD_VAR 0 1
52886: PPUSH
52887: CALL_OW 266
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: IN
52902: NOT
52903: OR
52904: PUSH
52905: LD_VAR 0 2
52909: NOT
52910: OR
52911: PUSH
52912: LD_VAR 0 5
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: LD_INT 3
52928: PUSH
52929: LD_INT 4
52931: PUSH
52932: LD_INT 5
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: IN
52943: NOT
52944: OR
52945: PUSH
52946: LD_VAR 0 3
52950: PPUSH
52951: LD_VAR 0 4
52955: PPUSH
52956: CALL_OW 488
52960: NOT
52961: OR
52962: IFFALSE 52966
// exit ;
52964: GO 53702
// side := GetSide ( depot ) ;
52966: LD_ADDR_VAR 0 9
52970: PUSH
52971: LD_VAR 0 1
52975: PPUSH
52976: CALL_OW 255
52980: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52981: LD_VAR 0 9
52985: PPUSH
52986: LD_VAR 0 2
52990: PPUSH
52991: CALL 52479 0 2
52995: NOT
52996: IFFALSE 53000
// exit ;
52998: GO 53702
// pom := GetBase ( depot ) ;
53000: LD_ADDR_VAR 0 10
53004: PUSH
53005: LD_VAR 0 1
53009: PPUSH
53010: CALL_OW 274
53014: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53015: LD_ADDR_VAR 0 11
53019: PUSH
53020: LD_VAR 0 2
53024: PPUSH
53025: LD_VAR 0 1
53029: PPUSH
53030: CALL_OW 248
53034: PPUSH
53035: CALL_OW 450
53039: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53040: LD_VAR 0 10
53044: PPUSH
53045: LD_INT 1
53047: PPUSH
53048: CALL_OW 275
53052: PUSH
53053: LD_VAR 0 11
53057: PUSH
53058: LD_INT 1
53060: ARRAY
53061: GREATEREQUAL
53062: PUSH
53063: LD_VAR 0 10
53067: PPUSH
53068: LD_INT 2
53070: PPUSH
53071: CALL_OW 275
53075: PUSH
53076: LD_VAR 0 11
53080: PUSH
53081: LD_INT 2
53083: ARRAY
53084: GREATEREQUAL
53085: AND
53086: PUSH
53087: LD_VAR 0 10
53091: PPUSH
53092: LD_INT 3
53094: PPUSH
53095: CALL_OW 275
53099: PUSH
53100: LD_VAR 0 11
53104: PUSH
53105: LD_INT 3
53107: ARRAY
53108: GREATEREQUAL
53109: AND
53110: NOT
53111: IFFALSE 53115
// exit ;
53113: GO 53702
// if GetBType ( depot ) = b_depot then
53115: LD_VAR 0 1
53119: PPUSH
53120: CALL_OW 266
53124: PUSH
53125: LD_INT 0
53127: EQUAL
53128: IFFALSE 53140
// dist := 28 else
53130: LD_ADDR_VAR 0 14
53134: PUSH
53135: LD_INT 28
53137: ST_TO_ADDR
53138: GO 53148
// dist := 36 ;
53140: LD_ADDR_VAR 0 14
53144: PUSH
53145: LD_INT 36
53147: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53148: LD_VAR 0 1
53152: PPUSH
53153: LD_VAR 0 3
53157: PPUSH
53158: LD_VAR 0 4
53162: PPUSH
53163: CALL_OW 297
53167: PUSH
53168: LD_VAR 0 14
53172: GREATER
53173: IFFALSE 53177
// exit ;
53175: GO 53702
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53177: LD_ADDR_VAR 0 12
53181: PUSH
53182: LD_VAR 0 2
53186: PPUSH
53187: LD_VAR 0 3
53191: PPUSH
53192: LD_VAR 0 4
53196: PPUSH
53197: LD_VAR 0 5
53201: PPUSH
53202: LD_VAR 0 1
53206: PPUSH
53207: CALL_OW 248
53211: PPUSH
53212: LD_INT 0
53214: PPUSH
53215: CALL 53707 0 6
53219: ST_TO_ADDR
// if not hexes then
53220: LD_VAR 0 12
53224: NOT
53225: IFFALSE 53229
// exit ;
53227: GO 53702
// hex := GetHexInfo ( x , y ) ;
53229: LD_ADDR_VAR 0 15
53233: PUSH
53234: LD_VAR 0 3
53238: PPUSH
53239: LD_VAR 0 4
53243: PPUSH
53244: CALL_OW 546
53248: ST_TO_ADDR
// if hex [ 1 ] then
53249: LD_VAR 0 15
53253: PUSH
53254: LD_INT 1
53256: ARRAY
53257: IFFALSE 53261
// exit ;
53259: GO 53702
// height := hex [ 2 ] ;
53261: LD_ADDR_VAR 0 13
53265: PUSH
53266: LD_VAR 0 15
53270: PUSH
53271: LD_INT 2
53273: ARRAY
53274: ST_TO_ADDR
// for i = 1 to hexes do
53275: LD_ADDR_VAR 0 7
53279: PUSH
53280: DOUBLE
53281: LD_INT 1
53283: DEC
53284: ST_TO_ADDR
53285: LD_VAR 0 12
53289: PUSH
53290: FOR_TO
53291: IFFALSE 53621
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53293: LD_VAR 0 12
53297: PUSH
53298: LD_VAR 0 7
53302: ARRAY
53303: PUSH
53304: LD_INT 1
53306: ARRAY
53307: PPUSH
53308: LD_VAR 0 12
53312: PUSH
53313: LD_VAR 0 7
53317: ARRAY
53318: PUSH
53319: LD_INT 2
53321: ARRAY
53322: PPUSH
53323: CALL_OW 488
53327: NOT
53328: PUSH
53329: LD_VAR 0 12
53333: PUSH
53334: LD_VAR 0 7
53338: ARRAY
53339: PUSH
53340: LD_INT 1
53342: ARRAY
53343: PPUSH
53344: LD_VAR 0 12
53348: PUSH
53349: LD_VAR 0 7
53353: ARRAY
53354: PUSH
53355: LD_INT 2
53357: ARRAY
53358: PPUSH
53359: CALL_OW 428
53363: PUSH
53364: LD_INT 0
53366: GREATER
53367: OR
53368: PUSH
53369: LD_VAR 0 12
53373: PUSH
53374: LD_VAR 0 7
53378: ARRAY
53379: PUSH
53380: LD_INT 1
53382: ARRAY
53383: PPUSH
53384: LD_VAR 0 12
53388: PUSH
53389: LD_VAR 0 7
53393: ARRAY
53394: PUSH
53395: LD_INT 2
53397: ARRAY
53398: PPUSH
53399: CALL_OW 351
53403: OR
53404: IFFALSE 53410
// exit ;
53406: POP
53407: POP
53408: GO 53702
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53410: LD_ADDR_VAR 0 8
53414: PUSH
53415: LD_VAR 0 12
53419: PUSH
53420: LD_VAR 0 7
53424: ARRAY
53425: PUSH
53426: LD_INT 1
53428: ARRAY
53429: PPUSH
53430: LD_VAR 0 12
53434: PUSH
53435: LD_VAR 0 7
53439: ARRAY
53440: PUSH
53441: LD_INT 2
53443: ARRAY
53444: PPUSH
53445: CALL_OW 546
53449: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53450: LD_VAR 0 8
53454: PUSH
53455: LD_INT 1
53457: ARRAY
53458: PUSH
53459: LD_VAR 0 8
53463: PUSH
53464: LD_INT 2
53466: ARRAY
53467: PUSH
53468: LD_VAR 0 13
53472: PUSH
53473: LD_INT 2
53475: PLUS
53476: GREATER
53477: OR
53478: PUSH
53479: LD_VAR 0 8
53483: PUSH
53484: LD_INT 2
53486: ARRAY
53487: PUSH
53488: LD_VAR 0 13
53492: PUSH
53493: LD_INT 2
53495: MINUS
53496: LESS
53497: OR
53498: PUSH
53499: LD_VAR 0 8
53503: PUSH
53504: LD_INT 3
53506: ARRAY
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: LD_INT 8
53513: PUSH
53514: LD_INT 9
53516: PUSH
53517: LD_INT 10
53519: PUSH
53520: LD_INT 11
53522: PUSH
53523: LD_INT 12
53525: PUSH
53526: LD_INT 13
53528: PUSH
53529: LD_INT 16
53531: PUSH
53532: LD_INT 17
53534: PUSH
53535: LD_INT 18
53537: PUSH
53538: LD_INT 19
53540: PUSH
53541: LD_INT 20
53543: PUSH
53544: LD_INT 21
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: IN
53562: NOT
53563: OR
53564: PUSH
53565: LD_VAR 0 8
53569: PUSH
53570: LD_INT 5
53572: ARRAY
53573: NOT
53574: OR
53575: PUSH
53576: LD_VAR 0 8
53580: PUSH
53581: LD_INT 6
53583: ARRAY
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: LD_INT 7
53593: PUSH
53594: LD_INT 9
53596: PUSH
53597: LD_INT 10
53599: PUSH
53600: LD_INT 11
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: IN
53611: NOT
53612: OR
53613: IFFALSE 53619
// exit ;
53615: POP
53616: POP
53617: GO 53702
// end ;
53619: GO 53290
53621: POP
53622: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53623: LD_VAR 0 9
53627: PPUSH
53628: LD_VAR 0 3
53632: PPUSH
53633: LD_VAR 0 4
53637: PPUSH
53638: LD_INT 20
53640: PPUSH
53641: CALL 45654 0 4
53645: PUSH
53646: LD_INT 4
53648: ARRAY
53649: IFFALSE 53653
// exit ;
53651: GO 53702
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53653: LD_VAR 0 2
53657: PUSH
53658: LD_INT 29
53660: PUSH
53661: LD_INT 30
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: IN
53668: PUSH
53669: LD_VAR 0 3
53673: PPUSH
53674: LD_VAR 0 4
53678: PPUSH
53679: LD_VAR 0 9
53683: PPUSH
53684: CALL_OW 440
53688: NOT
53689: AND
53690: IFFALSE 53694
// exit ;
53692: GO 53702
// result := true ;
53694: LD_ADDR_VAR 0 6
53698: PUSH
53699: LD_INT 1
53701: ST_TO_ADDR
// end ;
53702: LD_VAR 0 6
53706: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53707: LD_INT 0
53709: PPUSH
53710: PPUSH
53711: PPUSH
53712: PPUSH
53713: PPUSH
53714: PPUSH
53715: PPUSH
53716: PPUSH
53717: PPUSH
53718: PPUSH
53719: PPUSH
53720: PPUSH
53721: PPUSH
53722: PPUSH
53723: PPUSH
53724: PPUSH
53725: PPUSH
53726: PPUSH
53727: PPUSH
53728: PPUSH
53729: PPUSH
53730: PPUSH
53731: PPUSH
53732: PPUSH
53733: PPUSH
53734: PPUSH
53735: PPUSH
53736: PPUSH
53737: PPUSH
53738: PPUSH
53739: PPUSH
53740: PPUSH
53741: PPUSH
53742: PPUSH
53743: PPUSH
53744: PPUSH
53745: PPUSH
53746: PPUSH
53747: PPUSH
53748: PPUSH
53749: PPUSH
53750: PPUSH
53751: PPUSH
53752: PPUSH
53753: PPUSH
53754: PPUSH
53755: PPUSH
53756: PPUSH
53757: PPUSH
53758: PPUSH
53759: PPUSH
53760: PPUSH
53761: PPUSH
53762: PPUSH
53763: PPUSH
53764: PPUSH
53765: PPUSH
53766: PPUSH
// result = [ ] ;
53767: LD_ADDR_VAR 0 7
53771: PUSH
53772: EMPTY
53773: ST_TO_ADDR
// temp_list = [ ] ;
53774: LD_ADDR_VAR 0 9
53778: PUSH
53779: EMPTY
53780: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53781: LD_VAR 0 4
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: LD_INT 3
53797: PUSH
53798: LD_INT 4
53800: PUSH
53801: LD_INT 5
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: IN
53812: NOT
53813: PUSH
53814: LD_VAR 0 1
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: IN
53829: PUSH
53830: LD_VAR 0 5
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: LD_INT 2
53840: PUSH
53841: LD_INT 3
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: LIST
53848: IN
53849: NOT
53850: AND
53851: OR
53852: IFFALSE 53856
// exit ;
53854: GO 72247
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53856: LD_VAR 0 1
53860: PUSH
53861: LD_INT 6
53863: PUSH
53864: LD_INT 7
53866: PUSH
53867: LD_INT 8
53869: PUSH
53870: LD_INT 13
53872: PUSH
53873: LD_INT 12
53875: PUSH
53876: LD_INT 15
53878: PUSH
53879: LD_INT 11
53881: PUSH
53882: LD_INT 14
53884: PUSH
53885: LD_INT 10
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: IN
53899: IFFALSE 53909
// btype = b_lab ;
53901: LD_ADDR_VAR 0 1
53905: PUSH
53906: LD_INT 6
53908: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53909: LD_VAR 0 6
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: LIST
53927: IN
53928: NOT
53929: PUSH
53930: LD_VAR 0 1
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: LD_INT 2
53943: PUSH
53944: LD_INT 3
53946: PUSH
53947: LD_INT 6
53949: PUSH
53950: LD_INT 36
53952: PUSH
53953: LD_INT 4
53955: PUSH
53956: LD_INT 5
53958: PUSH
53959: LD_INT 31
53961: PUSH
53962: LD_INT 32
53964: PUSH
53965: LD_INT 33
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: IN
53981: NOT
53982: PUSH
53983: LD_VAR 0 6
53987: PUSH
53988: LD_INT 1
53990: EQUAL
53991: AND
53992: OR
53993: PUSH
53994: LD_VAR 0 1
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: LD_INT 3
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: IN
54009: NOT
54010: PUSH
54011: LD_VAR 0 6
54015: PUSH
54016: LD_INT 2
54018: EQUAL
54019: AND
54020: OR
54021: IFFALSE 54031
// mode = 0 ;
54023: LD_ADDR_VAR 0 6
54027: PUSH
54028: LD_INT 0
54030: ST_TO_ADDR
// case mode of 0 :
54031: LD_VAR 0 6
54035: PUSH
54036: LD_INT 0
54038: DOUBLE
54039: EQUAL
54040: IFTRUE 54044
54042: GO 65497
54044: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54045: LD_ADDR_VAR 0 11
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: LD_INT 2
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: LD_INT 3
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 3
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 2
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54238: LD_ADDR_VAR 0 12
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 2
54361: NEG
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 2
54384: NEG
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 3
54395: NEG
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 3
54406: NEG
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54434: LD_ADDR_VAR 0 13
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: LD_INT 2
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: LD_INT 2
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: LD_INT 2
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: NEG
54582: PUSH
54583: LD_INT 3
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 3
54593: NEG
54594: PUSH
54595: LD_INT 2
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 3
54605: NEG
54606: PUSH
54607: LD_INT 3
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54633: LD_ADDR_VAR 0 14
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: LD_INT 2
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 3
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: LD_INT 3
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: LD_INT 2
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54829: LD_ADDR_VAR 0 15
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 2
54963: NEG
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 3
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55022: LD_ADDR_VAR 0 16
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: LD_INT 2
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: LD_INT 2
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: LD_INT 1
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 2
55157: NEG
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 3
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 3
55179: PUSH
55180: LD_INT 3
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: LD_INT 3
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55215: LD_ADDR_VAR 0 17
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: NEG
55297: PUSH
55298: LD_INT 2
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: LD_INT 2
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: LD_INT 2
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: LD_INT 2
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 2
55391: NEG
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 2
55402: NEG
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 2
55414: NEG
55415: PUSH
55416: LD_INT 2
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55445: LD_ADDR_VAR 0 18
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: LD_INT 2
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 2
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: LD_INT 2
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: LD_INT 2
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: NEG
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 2
55644: NEG
55645: PUSH
55646: LD_INT 2
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55675: LD_ADDR_VAR 0 19
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: LD_INT 2
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 2
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: LD_INT 2
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: LD_INT 2
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 2
55851: NEG
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 2
55862: NEG
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: LD_INT 2
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55905: LD_ADDR_VAR 0 20
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: LD_INT 2
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 2
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 2
56040: PUSH
56041: LD_INT 2
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: LD_INT 2
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 2
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 2
56104: NEG
56105: PUSH
56106: LD_INT 2
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56135: LD_ADDR_VAR 0 21
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: PUSH
56218: LD_INT 2
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: LD_INT 2
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: LD_INT 1
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 2
56250: PUSH
56251: LD_INT 0
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 2
56260: PUSH
56261: LD_INT 1
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 2
56270: PUSH
56271: LD_INT 2
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: LD_INT 2
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 2
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 1
56300: NEG
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: NEG
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 2
56334: NEG
56335: PUSH
56336: LD_INT 2
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56365: LD_ADDR_VAR 0 22
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: LD_INT 2
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 2
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 2
56541: NEG
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 2
56564: NEG
56565: PUSH
56566: LD_INT 2
56568: NEG
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56595: LD_ADDR_VAR 0 23
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 1
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: LD_INT 2
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: LD_INT 2
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 2
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 2
56730: PUSH
56731: LD_INT 2
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: LD_INT 2
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 2
56771: NEG
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: LD_INT 2
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 2
56806: NEG
56807: PUSH
56808: LD_INT 3
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: LD_INT 3
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: LD_INT 2
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56875: LD_ADDR_VAR 0 24
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: LD_INT 2
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 2
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: LD_INT 2
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 2
57051: NEG
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 2
57062: NEG
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 2
57074: NEG
57075: PUSH
57076: LD_INT 2
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: PUSH
57087: LD_INT 2
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 3
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 3
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57151: LD_ADDR_VAR 0 25
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: NEG
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: LD_INT 1
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: LD_INT 2
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: LD_INT 2
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 2
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 2
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 2
57286: PUSH
57287: LD_INT 2
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: LD_INT 2
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 2
57327: NEG
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 2
57338: NEG
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 2
57350: NEG
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 3
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 3
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: LD_INT 3
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: LD_INT 3
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57425: LD_ADDR_VAR 0 26
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 2
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: LD_INT 2
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: LD_INT 2
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: PUSH
57637: LD_INT 3
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: LD_INT 3
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: NEG
57657: PUSH
57658: LD_INT 2
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 2
57667: NEG
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57701: LD_ADDR_VAR 0 27
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: LD_INT 2
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: LD_INT 2
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 2
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: LD_INT 2
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 2
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: NEG
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 2
57900: NEG
57901: PUSH
57902: LD_INT 2
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: LD_INT 2
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: NEG
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 3
57934: NEG
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 3
57946: NEG
57947: PUSH
57948: LD_INT 2
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57981: LD_ADDR_VAR 0 28
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 2
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: LD_INT 2
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 2
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: LD_INT 2
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: LD_INT 2
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 2
58157: NEG
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 2
58168: NEG
58169: PUSH
58170: LD_INT 1
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 2
58180: NEG
58181: PUSH
58182: LD_INT 2
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: NEG
58193: PUSH
58194: LD_INT 3
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: LD_INT 3
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 3
58216: NEG
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 3
58228: NEG
58229: PUSH
58230: LD_INT 2
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58263: LD_ADDR_VAR 0 29
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: LD_INT 1
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: LD_INT 2
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 2
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: NEG
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: LD_INT 3
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 2
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 3
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: LD_INT 3
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: LD_INT 2
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 3
58507: NEG
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58542: LD_ADDR_VAR 0 30
58546: PUSH
58547: LD_INT 0
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 2
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 2
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: LD_INT 2
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 2
58719: NEG
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: LD_INT 3
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: LD_INT 2
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 3
58754: PUSH
58755: LD_INT 2
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: LD_INT 3
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: NEG
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 3
58785: NEG
58786: PUSH
58787: LD_INT 1
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58820: LD_ADDR_VAR 0 31
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: LD_INT 2
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 2
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 2
58944: PUSH
58945: LD_INT 2
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: LD_INT 2
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: LD_INT 2
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: LD_INT 1
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 2
58985: NEG
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: LD_INT 2
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 2
59009: NEG
59010: PUSH
59011: LD_INT 3
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 3
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: LD_INT 3
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: NEG
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 3
59063: NEG
59064: PUSH
59065: LD_INT 2
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59098: LD_ADDR_VAR 0 32
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 1
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: LD_INT 1
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 2
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 2
59223: PUSH
59224: LD_INT 2
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 1
59253: NEG
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: LD_INT 3
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: LD_INT 2
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 3
59310: PUSH
59311: LD_INT 2
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 2
59320: PUSH
59321: LD_INT 3
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 3
59341: NEG
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59376: LD_ADDR_VAR 0 33
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: LD_INT 2
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 2
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 2
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: LD_INT 2
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 2
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: NEG
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 2
59554: NEG
59555: PUSH
59556: LD_INT 2
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 2
59566: NEG
59567: PUSH
59568: LD_INT 3
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 2
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 3
59589: PUSH
59590: LD_INT 1
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: LD_INT 3
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: LD_INT 2
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 3
59620: NEG
59621: PUSH
59622: LD_INT 2
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59655: LD_ADDR_VAR 0 34
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 1
59724: NEG
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: LD_INT 2
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 2
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 2
59811: NEG
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 2
59834: NEG
59835: PUSH
59836: LD_INT 2
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: LD_INT 3
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 1
59858: PUSH
59859: LD_INT 2
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 3
59869: PUSH
59870: LD_INT 2
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 2
59879: PUSH
59880: LD_INT 3
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 2
59889: NEG
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 3
59900: NEG
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59935: LD_ADDR_VAR 0 35
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 1
59993: NEG
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 2
60026: NEG
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60047: LD_ADDR_VAR 0 36
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: PUSH
60076: LD_INT 0
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 1
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: LD_INT 2
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: LD_INT 2
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60159: LD_ADDR_VAR 0 37
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: NEG
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60271: LD_ADDR_VAR 0 38
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: LD_INT 1
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 1
60299: PUSH
60300: LD_INT 0
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: LD_INT 1
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 2
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60383: LD_ADDR_VAR 0 39
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: LD_INT 1
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 1
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 1
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: LD_INT 1
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: LD_INT 1
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: LD_INT 2
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: LD_INT 2
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60495: LD_ADDR_VAR 0 40
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60607: LD_ADDR_VAR 0 41
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: LD_INT 2
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 2
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 2
60721: PUSH
60722: LD_INT 1
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 2
60731: PUSH
60732: LD_INT 2
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: LD_INT 2
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 2
60762: NEG
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 2
60773: NEG
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 2
60785: NEG
60786: PUSH
60787: LD_INT 2
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: LD_INT 3
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 2
60809: PUSH
60810: LD_INT 1
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 3
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 3
60830: PUSH
60831: LD_INT 1
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 3
60840: PUSH
60841: LD_INT 2
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 3
60850: PUSH
60851: LD_INT 3
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 2
60860: PUSH
60861: LD_INT 3
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 2
60870: NEG
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 3
60881: NEG
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 3
60892: NEG
60893: PUSH
60894: LD_INT 1
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 3
60904: NEG
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 3
60916: NEG
60917: PUSH
60918: LD_INT 3
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60957: LD_ADDR_VAR 0 42
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: LD_INT 1
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 1
61015: NEG
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: LD_INT 2
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: LD_INT 2
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 2
61072: PUSH
61073: LD_INT 1
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: LD_INT 2
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: LD_INT 2
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: NEG
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: LD_INT 2
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 2
61147: NEG
61148: PUSH
61149: LD_INT 3
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: LD_INT 3
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: LD_INT 3
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: LD_INT 2
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 3
61193: PUSH
61194: LD_INT 2
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 3
61203: PUSH
61204: LD_INT 3
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: LD_INT 3
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 1
61223: PUSH
61224: LD_INT 3
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: LD_INT 3
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: PUSH
61245: LD_INT 2
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 3
61254: NEG
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 3
61266: NEG
61267: PUSH
61268: LD_INT 3
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61307: LD_ADDR_VAR 0 43
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: LD_INT 1
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: LD_INT 0
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 0
61355: PUSH
61356: LD_INT 1
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: LD_INT 0
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 2
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: LD_INT 2
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 2
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: LD_INT 2
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: LD_INT 2
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: NEG
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 2
61473: NEG
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 1
61496: NEG
61497: PUSH
61498: LD_INT 3
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: LD_INT 3
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: LD_INT 2
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 2
61530: PUSH
61531: LD_INT 1
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 3
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 3
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: LD_INT 3
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 0
61571: PUSH
61572: LD_INT 3
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 1
61581: NEG
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 2
61592: NEG
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 3
61603: NEG
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 3
61614: NEG
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61655: LD_ADDR_VAR 0 44
61659: PUSH
61660: LD_INT 0
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: LD_INT 1
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 1
61724: NEG
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: NEG
61737: PUSH
61738: LD_INT 2
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: LD_INT 1
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 2
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 2
61769: PUSH
61770: LD_INT 1
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 2
61779: PUSH
61780: LD_INT 2
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: PUSH
61790: LD_INT 2
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: NEG
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 2
61810: NEG
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 2
61821: NEG
61822: PUSH
61823: LD_INT 1
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 2
61833: NEG
61834: PUSH
61835: LD_INT 2
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: LD_INT 3
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 2
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 3
61868: PUSH
61869: LD_INT 0
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 3
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 3
61888: PUSH
61889: LD_INT 2
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 3
61898: PUSH
61899: LD_INT 3
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 2
61908: PUSH
61909: LD_INT 3
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 2
61918: NEG
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 3
61929: NEG
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 3
61940: NEG
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 3
61952: NEG
61953: PUSH
61954: LD_INT 2
61956: NEG
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 3
61964: NEG
61965: PUSH
61966: LD_INT 3
61968: NEG
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62005: LD_ADDR_VAR 0 45
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: LD_INT 0
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: LD_INT 1
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: LD_INT 1
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 0
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 1
62063: NEG
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 1
62074: NEG
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: LD_INT 2
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: LD_INT 2
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 1
62109: PUSH
62110: LD_INT 1
62112: NEG
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 2
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: LD_INT 2
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: LD_INT 2
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: LD_INT 2
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: NEG
62161: PUSH
62162: LD_INT 1
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 2
62171: NEG
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 2
62183: NEG
62184: PUSH
62185: LD_INT 2
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 2
62195: NEG
62196: PUSH
62197: LD_INT 3
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: LD_INT 3
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: LD_INT 3
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: LD_INT 2
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 3
62241: PUSH
62242: LD_INT 2
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 3
62251: PUSH
62252: LD_INT 3
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 2
62261: PUSH
62262: LD_INT 3
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: PUSH
62272: LD_INT 3
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: LD_INT 3
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: LD_INT 2
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 3
62302: NEG
62303: PUSH
62304: LD_INT 2
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 3
62314: NEG
62315: PUSH
62316: LD_INT 3
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62355: LD_ADDR_VAR 0 46
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: LD_INT 0
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: LD_INT 1
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 1
62393: PUSH
62394: LD_INT 1
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 1
62413: NEG
62414: PUSH
62415: LD_INT 0
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: NEG
62425: PUSH
62426: LD_INT 1
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: LD_INT 2
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: LD_INT 2
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: PUSH
62460: LD_INT 1
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 2
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 2
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 1
62490: PUSH
62491: LD_INT 2
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: LD_INT 2
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 1
62510: NEG
62511: PUSH
62512: LD_INT 1
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 2
62521: NEG
62522: PUSH
62523: LD_INT 0
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 2
62532: NEG
62533: PUSH
62534: LD_INT 1
62536: NEG
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 3
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 0
62556: PUSH
62557: LD_INT 3
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: LD_INT 2
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 2
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 3
62589: PUSH
62590: LD_INT 0
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 3
62599: PUSH
62600: LD_INT 1
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: LD_INT 3
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: LD_INT 3
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 2
62640: NEG
62641: PUSH
62642: LD_INT 1
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 3
62651: NEG
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 3
62662: NEG
62663: PUSH
62664: LD_INT 1
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62703: LD_ADDR_VAR 0 47
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: PUSH
62742: LD_INT 1
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: LD_INT 1
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 1
62772: NEG
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 1
62784: NEG
62785: PUSH
62786: LD_INT 2
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: LD_INT 2
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 1
62807: PUSH
62808: LD_INT 1
62810: NEG
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PUSH
62820: LD_INT 1
62822: NEG
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 2
62830: NEG
62831: PUSH
62832: LD_INT 2
62834: NEG
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62854: LD_ADDR_VAR 0 48
62858: PUSH
62859: LD_INT 0
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: LD_INT 1
62874: NEG
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 1
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 1
62892: PUSH
62893: LD_INT 1
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: LD_INT 1
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: LD_INT 1
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: LD_INT 2
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: LD_INT 2
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 1
62958: PUSH
62959: LD_INT 1
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 2
62969: PUSH
62970: LD_INT 0
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 2
62979: PUSH
62980: LD_INT 1
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63001: LD_ADDR_VAR 0 49
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: LD_INT 0
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: LD_INT 1
63021: NEG
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 1
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 1
63039: PUSH
63040: LD_INT 1
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 0
63049: PUSH
63050: LD_INT 1
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 1
63059: NEG
63060: PUSH
63061: LD_INT 0
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 1
63070: NEG
63071: PUSH
63072: LD_INT 1
63074: NEG
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: LD_INT 1
63085: NEG
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 2
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 2
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 2
63113: PUSH
63114: LD_INT 2
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 1
63123: PUSH
63124: LD_INT 2
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63145: LD_ADDR_VAR 0 50
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: LD_INT 0
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 1
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 1
63183: PUSH
63184: LD_INT 1
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: NEG
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 1
63214: NEG
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 2
63226: PUSH
63227: LD_INT 1
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 2
63236: PUSH
63237: LD_INT 2
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 1
63246: PUSH
63247: LD_INT 2
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 0
63256: PUSH
63257: LD_INT 2
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 1
63266: NEG
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63289: LD_ADDR_VAR 0 51
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: LD_INT 0
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 0
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 1
63327: PUSH
63328: LD_INT 1
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: LD_INT 1
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: NEG
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: LD_INT 1
63362: NEG
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 1
63370: PUSH
63371: LD_INT 2
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: LD_INT 2
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: LD_INT 1
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 2
63401: NEG
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 2
63412: NEG
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63436: LD_ADDR_VAR 0 52
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: LD_INT 1
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 1
63474: PUSH
63475: LD_INT 1
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 0
63484: PUSH
63485: LD_INT 1
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 1
63494: NEG
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: LD_INT 2
63521: NEG
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 1
63529: NEG
63530: PUSH
63531: LD_INT 1
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 2
63540: NEG
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 2
63551: NEG
63552: PUSH
63553: LD_INT 1
63555: NEG
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 2
63563: NEG
63564: PUSH
63565: LD_INT 2
63567: NEG
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63587: LD_ADDR_VAR 0 53
63591: PUSH
63592: LD_INT 0
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 1
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 1
63625: PUSH
63626: LD_INT 1
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: LD_INT 1
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 1
63645: NEG
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 1
63656: NEG
63657: PUSH
63658: LD_INT 1
63660: NEG
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 1
63668: NEG
63669: PUSH
63670: LD_INT 2
63672: NEG
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: LD_INT 2
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 1
63691: PUSH
63692: LD_INT 1
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 2
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 2
63712: PUSH
63713: LD_INT 1
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 2
63722: PUSH
63723: LD_INT 2
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 1
63732: PUSH
63733: LD_INT 2
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: LD_INT 2
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 1
63752: NEG
63753: PUSH
63754: LD_INT 1
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 2
63763: NEG
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 2
63774: NEG
63775: PUSH
63776: LD_INT 1
63778: NEG
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 2
63786: NEG
63787: PUSH
63788: LD_INT 2
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63817: LD_ADDR_VAR 0 54
63821: PUSH
63822: LD_INT 0
63824: PUSH
63825: LD_INT 0
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: LD_INT 1
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 1
63845: PUSH
63846: LD_INT 0
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 1
63855: PUSH
63856: LD_INT 1
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: LD_INT 1
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 1
63886: NEG
63887: PUSH
63888: LD_INT 1
63890: NEG
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 1
63898: NEG
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: LD_INT 2
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 1
63921: PUSH
63922: LD_INT 1
63924: NEG
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 2
63932: PUSH
63933: LD_INT 0
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 2
63942: PUSH
63943: LD_INT 1
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 2
63952: PUSH
63953: LD_INT 2
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 1
63962: PUSH
63963: LD_INT 2
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: LD_INT 2
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 1
63982: NEG
63983: PUSH
63984: LD_INT 1
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 2
63993: NEG
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 2
64004: NEG
64005: PUSH
64006: LD_INT 1
64008: NEG
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 2
64016: NEG
64017: PUSH
64018: LD_INT 2
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64047: LD_ADDR_VAR 0 55
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: LD_INT 1
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 1
64075: PUSH
64076: LD_INT 0
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: LD_INT 1
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 0
64095: PUSH
64096: LD_INT 1
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 1
64105: NEG
64106: PUSH
64107: LD_INT 0
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 1
64116: NEG
64117: PUSH
64118: LD_INT 1
64120: NEG
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: NEG
64129: PUSH
64130: LD_INT 2
64132: NEG
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 0
64140: PUSH
64141: LD_INT 2
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 1
64151: PUSH
64152: LD_INT 1
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 2
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 2
64172: PUSH
64173: LD_INT 1
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 2
64182: PUSH
64183: LD_INT 2
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 1
64192: PUSH
64193: LD_INT 2
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 0
64202: PUSH
64203: LD_INT 2
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 1
64212: NEG
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 2
64223: NEG
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 2
64234: NEG
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 2
64246: NEG
64247: PUSH
64248: LD_INT 2
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64277: LD_ADDR_VAR 0 56
64281: PUSH
64282: LD_INT 0
64284: PUSH
64285: LD_INT 0
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: LD_INT 1
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 1
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 1
64315: PUSH
64316: LD_INT 1
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: LD_INT 1
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 1
64335: NEG
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 1
64346: NEG
64347: PUSH
64348: LD_INT 1
64350: NEG
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 1
64358: NEG
64359: PUSH
64360: LD_INT 2
64362: NEG
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: LD_INT 2
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 1
64381: PUSH
64382: LD_INT 1
64384: NEG
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 2
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 2
64402: PUSH
64403: LD_INT 1
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 2
64412: PUSH
64413: LD_INT 2
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: LD_INT 2
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: LD_INT 2
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 1
64442: NEG
64443: PUSH
64444: LD_INT 1
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 2
64453: NEG
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 2
64464: NEG
64465: PUSH
64466: LD_INT 1
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 2
64476: NEG
64477: PUSH
64478: LD_INT 2
64480: NEG
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64507: LD_ADDR_VAR 0 57
64511: PUSH
64512: LD_INT 0
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 0
64524: PUSH
64525: LD_INT 1
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 1
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 1
64545: PUSH
64546: LD_INT 1
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 0
64555: PUSH
64556: LD_INT 1
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 1
64565: NEG
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 1
64576: NEG
64577: PUSH
64578: LD_INT 1
64580: NEG
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 1
64588: NEG
64589: PUSH
64590: LD_INT 2
64592: NEG
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 0
64600: PUSH
64601: LD_INT 2
64603: NEG
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: LD_INT 1
64614: NEG
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 2
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 2
64632: PUSH
64633: LD_INT 1
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 2
64642: PUSH
64643: LD_INT 2
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 1
64652: PUSH
64653: LD_INT 2
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 0
64662: PUSH
64663: LD_INT 2
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: LD_INT 1
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 2
64683: NEG
64684: PUSH
64685: LD_INT 0
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 2
64694: NEG
64695: PUSH
64696: LD_INT 1
64698: NEG
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 2
64706: NEG
64707: PUSH
64708: LD_INT 2
64710: NEG
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64737: LD_ADDR_VAR 0 58
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: LD_INT 1
64757: NEG
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 1
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 1
64775: PUSH
64776: LD_INT 1
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 1
64795: NEG
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: LD_INT 1
64810: NEG
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 1
64818: NEG
64819: PUSH
64820: LD_INT 2
64822: NEG
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: LD_INT 2
64833: NEG
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 1
64841: PUSH
64842: LD_INT 1
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 2
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 2
64862: PUSH
64863: LD_INT 1
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 2
64872: PUSH
64873: LD_INT 2
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 1
64882: PUSH
64883: LD_INT 2
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 0
64892: PUSH
64893: LD_INT 2
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 1
64902: NEG
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 2
64913: NEG
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 2
64924: NEG
64925: PUSH
64926: LD_INT 1
64928: NEG
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 2
64936: NEG
64937: PUSH
64938: LD_INT 2
64940: NEG
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64967: LD_ADDR_VAR 0 59
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: LD_INT 0
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: LD_INT 1
64987: NEG
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 1
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 0
65015: PUSH
65016: LD_INT 1
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 1
65025: NEG
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 1
65036: NEG
65037: PUSH
65038: LD_INT 1
65040: NEG
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65055: LD_ADDR_VAR 0 60
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: LD_INT 0
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: LD_INT 1
65075: NEG
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 1
65083: PUSH
65084: LD_INT 0
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 1
65093: PUSH
65094: LD_INT 1
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: LD_INT 1
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 1
65113: NEG
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 1
65124: NEG
65125: PUSH
65126: LD_INT 1
65128: NEG
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65143: LD_ADDR_VAR 0 61
65147: PUSH
65148: LD_INT 0
65150: PUSH
65151: LD_INT 0
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: LD_INT 1
65163: NEG
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 1
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 1
65181: PUSH
65182: LD_INT 1
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 0
65191: PUSH
65192: LD_INT 1
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 1
65201: NEG
65202: PUSH
65203: LD_INT 0
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 1
65212: NEG
65213: PUSH
65214: LD_INT 1
65216: NEG
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65231: LD_ADDR_VAR 0 62
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: LD_INT 0
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 0
65248: PUSH
65249: LD_INT 1
65251: NEG
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 1
65259: PUSH
65260: LD_INT 0
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 1
65269: PUSH
65270: LD_INT 1
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 0
65279: PUSH
65280: LD_INT 1
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 1
65289: NEG
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 1
65300: NEG
65301: PUSH
65302: LD_INT 1
65304: NEG
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65319: LD_ADDR_VAR 0 63
65323: PUSH
65324: LD_INT 0
65326: PUSH
65327: LD_INT 0
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 0
65336: PUSH
65337: LD_INT 1
65339: NEG
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 1
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 1
65357: PUSH
65358: LD_INT 1
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 0
65367: PUSH
65368: LD_INT 1
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 1
65377: NEG
65378: PUSH
65379: LD_INT 0
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 1
65388: NEG
65389: PUSH
65390: LD_INT 1
65392: NEG
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65407: LD_ADDR_VAR 0 64
65411: PUSH
65412: LD_INT 0
65414: PUSH
65415: LD_INT 0
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: LD_INT 1
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: PUSH
65436: LD_INT 0
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: PUSH
65446: LD_INT 1
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: LD_INT 1
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 1
65465: NEG
65466: PUSH
65467: LD_INT 0
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 1
65476: NEG
65477: PUSH
65478: LD_INT 1
65480: NEG
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: ST_TO_ADDR
// end ; 1 :
65495: GO 71392
65497: LD_INT 1
65499: DOUBLE
65500: EQUAL
65501: IFTRUE 65505
65503: GO 68128
65505: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65506: LD_ADDR_VAR 0 11
65510: PUSH
65511: LD_INT 1
65513: NEG
65514: PUSH
65515: LD_INT 3
65517: NEG
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 0
65525: PUSH
65526: LD_INT 3
65528: NEG
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 1
65536: PUSH
65537: LD_INT 2
65539: NEG
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: LIST
65549: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65550: LD_ADDR_VAR 0 12
65554: PUSH
65555: LD_INT 2
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 3
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 3
65578: PUSH
65579: LD_INT 1
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: LIST
65590: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65591: LD_ADDR_VAR 0 13
65595: PUSH
65596: LD_INT 3
65598: PUSH
65599: LD_INT 2
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 3
65608: PUSH
65609: LD_INT 3
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 2
65618: PUSH
65619: LD_INT 3
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: LIST
65630: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65631: LD_ADDR_VAR 0 14
65635: PUSH
65636: LD_INT 1
65638: PUSH
65639: LD_INT 3
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: LD_INT 3
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 1
65658: NEG
65659: PUSH
65660: LD_INT 2
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: LIST
65671: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65672: LD_ADDR_VAR 0 15
65676: PUSH
65677: LD_INT 2
65679: NEG
65680: PUSH
65681: LD_INT 1
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 3
65690: NEG
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 3
65701: NEG
65702: PUSH
65703: LD_INT 1
65705: NEG
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: LIST
65715: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65716: LD_ADDR_VAR 0 16
65720: PUSH
65721: LD_INT 2
65723: NEG
65724: PUSH
65725: LD_INT 3
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 3
65735: NEG
65736: PUSH
65737: LD_INT 2
65739: NEG
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 3
65747: NEG
65748: PUSH
65749: LD_INT 3
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: LIST
65761: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65762: LD_ADDR_VAR 0 17
65766: PUSH
65767: LD_INT 1
65769: NEG
65770: PUSH
65771: LD_INT 3
65773: NEG
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 0
65781: PUSH
65782: LD_INT 3
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 1
65792: PUSH
65793: LD_INT 2
65795: NEG
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: LIST
65805: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65806: LD_ADDR_VAR 0 18
65810: PUSH
65811: LD_INT 2
65813: PUSH
65814: LD_INT 1
65816: NEG
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 3
65824: PUSH
65825: LD_INT 0
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 3
65834: PUSH
65835: LD_INT 1
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: LIST
65846: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65847: LD_ADDR_VAR 0 19
65851: PUSH
65852: LD_INT 3
65854: PUSH
65855: LD_INT 2
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 3
65864: PUSH
65865: LD_INT 3
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 2
65874: PUSH
65875: LD_INT 3
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: LIST
65886: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65887: LD_ADDR_VAR 0 20
65891: PUSH
65892: LD_INT 1
65894: PUSH
65895: LD_INT 3
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 0
65904: PUSH
65905: LD_INT 3
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 1
65914: NEG
65915: PUSH
65916: LD_INT 2
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: LIST
65927: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65928: LD_ADDR_VAR 0 21
65932: PUSH
65933: LD_INT 2
65935: NEG
65936: PUSH
65937: LD_INT 1
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 3
65946: NEG
65947: PUSH
65948: LD_INT 0
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 3
65957: NEG
65958: PUSH
65959: LD_INT 1
65961: NEG
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: LIST
65971: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65972: LD_ADDR_VAR 0 22
65976: PUSH
65977: LD_INT 2
65979: NEG
65980: PUSH
65981: LD_INT 3
65983: NEG
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 3
65991: NEG
65992: PUSH
65993: LD_INT 2
65995: NEG
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 3
66003: NEG
66004: PUSH
66005: LD_INT 3
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: LIST
66017: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66018: LD_ADDR_VAR 0 23
66022: PUSH
66023: LD_INT 0
66025: PUSH
66026: LD_INT 3
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 1
66036: NEG
66037: PUSH
66038: LD_INT 4
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 1
66048: PUSH
66049: LD_INT 3
66051: NEG
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: LIST
66061: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66062: LD_ADDR_VAR 0 24
66066: PUSH
66067: LD_INT 3
66069: PUSH
66070: LD_INT 0
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 3
66079: PUSH
66080: LD_INT 1
66082: NEG
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 4
66090: PUSH
66091: LD_INT 1
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: LIST
66102: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66103: LD_ADDR_VAR 0 25
66107: PUSH
66108: LD_INT 3
66110: PUSH
66111: LD_INT 3
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 4
66120: PUSH
66121: LD_INT 3
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 3
66130: PUSH
66131: LD_INT 4
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: LIST
66142: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66143: LD_ADDR_VAR 0 26
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: LD_INT 3
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 1
66160: PUSH
66161: LD_INT 4
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 1
66170: NEG
66171: PUSH
66172: LD_INT 3
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: LIST
66183: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66184: LD_ADDR_VAR 0 27
66188: PUSH
66189: LD_INT 3
66191: NEG
66192: PUSH
66193: LD_INT 0
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 3
66202: NEG
66203: PUSH
66204: LD_INT 1
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 4
66213: NEG
66214: PUSH
66215: LD_INT 1
66217: NEG
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: LIST
66227: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66228: LD_ADDR_VAR 0 28
66232: PUSH
66233: LD_INT 3
66235: NEG
66236: PUSH
66237: LD_INT 3
66239: NEG
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 3
66247: NEG
66248: PUSH
66249: LD_INT 4
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 4
66259: NEG
66260: PUSH
66261: LD_INT 3
66263: NEG
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: LIST
66273: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66274: LD_ADDR_VAR 0 29
66278: PUSH
66279: LD_INT 1
66281: NEG
66282: PUSH
66283: LD_INT 3
66285: NEG
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 0
66293: PUSH
66294: LD_INT 3
66296: NEG
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 1
66304: PUSH
66305: LD_INT 2
66307: NEG
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 1
66315: NEG
66316: PUSH
66317: LD_INT 4
66319: NEG
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 0
66327: PUSH
66328: LD_INT 4
66330: NEG
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 1
66338: PUSH
66339: LD_INT 3
66341: NEG
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 1
66349: NEG
66350: PUSH
66351: LD_INT 5
66353: NEG
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 0
66361: PUSH
66362: LD_INT 5
66364: NEG
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 1
66372: PUSH
66373: LD_INT 4
66375: NEG
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 1
66383: NEG
66384: PUSH
66385: LD_INT 6
66387: NEG
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: LD_INT 6
66398: NEG
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 1
66406: PUSH
66407: LD_INT 5
66409: NEG
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66429: LD_ADDR_VAR 0 30
66433: PUSH
66434: LD_INT 2
66436: PUSH
66437: LD_INT 1
66439: NEG
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 3
66447: PUSH
66448: LD_INT 0
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 3
66457: PUSH
66458: LD_INT 1
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 3
66467: PUSH
66468: LD_INT 1
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 4
66478: PUSH
66479: LD_INT 0
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 4
66488: PUSH
66489: LD_INT 1
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 4
66498: PUSH
66499: LD_INT 1
66501: NEG
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 5
66509: PUSH
66510: LD_INT 0
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 5
66519: PUSH
66520: LD_INT 1
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 5
66529: PUSH
66530: LD_INT 1
66532: NEG
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 6
66540: PUSH
66541: LD_INT 0
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 6
66550: PUSH
66551: LD_INT 1
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66572: LD_ADDR_VAR 0 31
66576: PUSH
66577: LD_INT 3
66579: PUSH
66580: LD_INT 2
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 3
66589: PUSH
66590: LD_INT 3
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 2
66599: PUSH
66600: LD_INT 3
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 4
66609: PUSH
66610: LD_INT 3
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 4
66619: PUSH
66620: LD_INT 4
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 3
66629: PUSH
66630: LD_INT 4
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 5
66639: PUSH
66640: LD_INT 4
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 5
66649: PUSH
66650: LD_INT 5
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 4
66659: PUSH
66660: LD_INT 5
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 6
66669: PUSH
66670: LD_INT 5
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 6
66679: PUSH
66680: LD_INT 6
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 5
66689: PUSH
66690: LD_INT 6
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66711: LD_ADDR_VAR 0 32
66715: PUSH
66716: LD_INT 1
66718: PUSH
66719: LD_INT 3
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 0
66728: PUSH
66729: LD_INT 3
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 1
66738: NEG
66739: PUSH
66740: LD_INT 2
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 1
66749: PUSH
66750: LD_INT 4
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: LD_INT 4
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 1
66769: NEG
66770: PUSH
66771: LD_INT 3
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 1
66780: PUSH
66781: LD_INT 5
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 0
66790: PUSH
66791: LD_INT 5
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 1
66800: NEG
66801: PUSH
66802: LD_INT 4
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 1
66811: PUSH
66812: LD_INT 6
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 0
66821: PUSH
66822: LD_INT 6
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 1
66831: NEG
66832: PUSH
66833: LD_INT 5
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66854: LD_ADDR_VAR 0 33
66858: PUSH
66859: LD_INT 2
66861: NEG
66862: PUSH
66863: LD_INT 1
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 3
66872: NEG
66873: PUSH
66874: LD_INT 0
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 3
66883: NEG
66884: PUSH
66885: LD_INT 1
66887: NEG
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 3
66895: NEG
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 4
66906: NEG
66907: PUSH
66908: LD_INT 0
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 4
66917: NEG
66918: PUSH
66919: LD_INT 1
66921: NEG
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 4
66929: NEG
66930: PUSH
66931: LD_INT 1
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 5
66940: NEG
66941: PUSH
66942: LD_INT 0
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 5
66951: NEG
66952: PUSH
66953: LD_INT 1
66955: NEG
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 5
66963: NEG
66964: PUSH
66965: LD_INT 1
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 6
66974: NEG
66975: PUSH
66976: LD_INT 0
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 6
66985: NEG
66986: PUSH
66987: LD_INT 1
66989: NEG
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67009: LD_ADDR_VAR 0 34
67013: PUSH
67014: LD_INT 2
67016: NEG
67017: PUSH
67018: LD_INT 3
67020: NEG
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 3
67028: NEG
67029: PUSH
67030: LD_INT 2
67032: NEG
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 3
67040: NEG
67041: PUSH
67042: LD_INT 3
67044: NEG
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 3
67052: NEG
67053: PUSH
67054: LD_INT 4
67056: NEG
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 4
67064: NEG
67065: PUSH
67066: LD_INT 3
67068: NEG
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 4
67076: NEG
67077: PUSH
67078: LD_INT 4
67080: NEG
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 4
67088: NEG
67089: PUSH
67090: LD_INT 5
67092: NEG
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 5
67100: NEG
67101: PUSH
67102: LD_INT 4
67104: NEG
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 5
67112: NEG
67113: PUSH
67114: LD_INT 5
67116: NEG
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 5
67124: NEG
67125: PUSH
67126: LD_INT 6
67128: NEG
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 6
67136: NEG
67137: PUSH
67138: LD_INT 5
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 6
67148: NEG
67149: PUSH
67150: LD_INT 6
67152: NEG
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67172: LD_ADDR_VAR 0 41
67176: PUSH
67177: LD_INT 0
67179: PUSH
67180: LD_INT 2
67182: NEG
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 1
67190: NEG
67191: PUSH
67192: LD_INT 3
67194: NEG
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 1
67202: PUSH
67203: LD_INT 2
67205: NEG
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: LIST
67215: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67216: LD_ADDR_VAR 0 42
67220: PUSH
67221: LD_INT 2
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 2
67233: PUSH
67234: LD_INT 1
67236: NEG
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 3
67244: PUSH
67245: LD_INT 1
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: LIST
67256: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67257: LD_ADDR_VAR 0 43
67261: PUSH
67262: LD_INT 2
67264: PUSH
67265: LD_INT 2
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 3
67274: PUSH
67275: LD_INT 2
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 2
67284: PUSH
67285: LD_INT 3
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: LIST
67296: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67297: LD_ADDR_VAR 0 44
67301: PUSH
67302: LD_INT 0
67304: PUSH
67305: LD_INT 2
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 1
67314: PUSH
67315: LD_INT 3
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 1
67324: NEG
67325: PUSH
67326: LD_INT 2
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: LIST
67337: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67338: LD_ADDR_VAR 0 45
67342: PUSH
67343: LD_INT 2
67345: NEG
67346: PUSH
67347: LD_INT 0
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 2
67356: NEG
67357: PUSH
67358: LD_INT 1
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 3
67367: NEG
67368: PUSH
67369: LD_INT 1
67371: NEG
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: LIST
67381: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67382: LD_ADDR_VAR 0 46
67386: PUSH
67387: LD_INT 2
67389: NEG
67390: PUSH
67391: LD_INT 2
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 2
67401: NEG
67402: PUSH
67403: LD_INT 3
67405: NEG
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 3
67413: NEG
67414: PUSH
67415: LD_INT 2
67417: NEG
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: LIST
67427: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67428: LD_ADDR_VAR 0 47
67432: PUSH
67433: LD_INT 2
67435: NEG
67436: PUSH
67437: LD_INT 3
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 1
67447: NEG
67448: PUSH
67449: LD_INT 3
67451: NEG
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67461: LD_ADDR_VAR 0 48
67465: PUSH
67466: LD_INT 1
67468: PUSH
67469: LD_INT 2
67471: NEG
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 2
67479: PUSH
67480: LD_INT 1
67482: NEG
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67492: LD_ADDR_VAR 0 49
67496: PUSH
67497: LD_INT 3
67499: PUSH
67500: LD_INT 1
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 3
67509: PUSH
67510: LD_INT 2
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67521: LD_ADDR_VAR 0 50
67525: PUSH
67526: LD_INT 2
67528: PUSH
67529: LD_INT 3
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 1
67538: PUSH
67539: LD_INT 3
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67550: LD_ADDR_VAR 0 51
67554: PUSH
67555: LD_INT 1
67557: NEG
67558: PUSH
67559: LD_INT 2
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 2
67568: NEG
67569: PUSH
67570: LD_INT 1
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67581: LD_ADDR_VAR 0 52
67585: PUSH
67586: LD_INT 3
67588: NEG
67589: PUSH
67590: LD_INT 1
67592: NEG
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 3
67600: NEG
67601: PUSH
67602: LD_INT 2
67604: NEG
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67614: LD_ADDR_VAR 0 53
67618: PUSH
67619: LD_INT 1
67621: NEG
67622: PUSH
67623: LD_INT 3
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 0
67633: PUSH
67634: LD_INT 3
67636: NEG
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 1
67644: PUSH
67645: LD_INT 2
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: LIST
67657: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67658: LD_ADDR_VAR 0 54
67662: PUSH
67663: LD_INT 2
67665: PUSH
67666: LD_INT 1
67668: NEG
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 3
67676: PUSH
67677: LD_INT 0
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 3
67686: PUSH
67687: LD_INT 1
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: LIST
67698: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67699: LD_ADDR_VAR 0 55
67703: PUSH
67704: LD_INT 3
67706: PUSH
67707: LD_INT 2
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 3
67716: PUSH
67717: LD_INT 3
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 2
67726: PUSH
67727: LD_INT 3
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: LIST
67738: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67739: LD_ADDR_VAR 0 56
67743: PUSH
67744: LD_INT 1
67746: PUSH
67747: LD_INT 3
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 0
67756: PUSH
67757: LD_INT 3
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 1
67766: NEG
67767: PUSH
67768: LD_INT 2
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: LIST
67779: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67780: LD_ADDR_VAR 0 57
67784: PUSH
67785: LD_INT 2
67787: NEG
67788: PUSH
67789: LD_INT 1
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 3
67798: NEG
67799: PUSH
67800: LD_INT 0
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 3
67809: NEG
67810: PUSH
67811: LD_INT 1
67813: NEG
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: LIST
67823: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67824: LD_ADDR_VAR 0 58
67828: PUSH
67829: LD_INT 2
67831: NEG
67832: PUSH
67833: LD_INT 3
67835: NEG
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 3
67843: NEG
67844: PUSH
67845: LD_INT 2
67847: NEG
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 3
67855: NEG
67856: PUSH
67857: LD_INT 3
67859: NEG
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: LIST
67869: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67870: LD_ADDR_VAR 0 59
67874: PUSH
67875: LD_INT 1
67877: NEG
67878: PUSH
67879: LD_INT 2
67881: NEG
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 0
67889: PUSH
67890: LD_INT 2
67892: NEG
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 1
67900: PUSH
67901: LD_INT 1
67903: NEG
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: LIST
67913: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67914: LD_ADDR_VAR 0 60
67918: PUSH
67919: LD_INT 1
67921: PUSH
67922: LD_INT 1
67924: NEG
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 2
67932: PUSH
67933: LD_INT 0
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 2
67942: PUSH
67943: LD_INT 1
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: LIST
67954: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67955: LD_ADDR_VAR 0 61
67959: PUSH
67960: LD_INT 2
67962: PUSH
67963: LD_INT 1
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 2
67972: PUSH
67973: LD_INT 2
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 1
67982: PUSH
67983: LD_INT 2
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: LIST
67994: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67995: LD_ADDR_VAR 0 62
67999: PUSH
68000: LD_INT 1
68002: PUSH
68003: LD_INT 2
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 0
68012: PUSH
68013: LD_INT 2
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 1
68022: NEG
68023: PUSH
68024: LD_INT 1
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: LIST
68035: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68036: LD_ADDR_VAR 0 63
68040: PUSH
68041: LD_INT 1
68043: NEG
68044: PUSH
68045: LD_INT 1
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 2
68054: NEG
68055: PUSH
68056: LD_INT 0
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 2
68065: NEG
68066: PUSH
68067: LD_INT 1
68069: NEG
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: LIST
68079: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68080: LD_ADDR_VAR 0 64
68084: PUSH
68085: LD_INT 1
68087: NEG
68088: PUSH
68089: LD_INT 2
68091: NEG
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 2
68099: NEG
68100: PUSH
68101: LD_INT 1
68103: NEG
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 2
68111: NEG
68112: PUSH
68113: LD_INT 2
68115: NEG
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: LIST
68125: ST_TO_ADDR
// end ; 2 :
68126: GO 71392
68128: LD_INT 2
68130: DOUBLE
68131: EQUAL
68132: IFTRUE 68136
68134: GO 71391
68136: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68137: LD_ADDR_VAR 0 29
68141: PUSH
68142: LD_INT 4
68144: PUSH
68145: LD_INT 0
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 4
68154: PUSH
68155: LD_INT 1
68157: NEG
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 5
68165: PUSH
68166: LD_INT 0
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 5
68175: PUSH
68176: LD_INT 1
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 4
68185: PUSH
68186: LD_INT 1
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 3
68195: PUSH
68196: LD_INT 0
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 3
68205: PUSH
68206: LD_INT 1
68208: NEG
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 3
68216: PUSH
68217: LD_INT 2
68219: NEG
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 5
68227: PUSH
68228: LD_INT 2
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 3
68237: PUSH
68238: LD_INT 3
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 3
68247: PUSH
68248: LD_INT 2
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 4
68257: PUSH
68258: LD_INT 3
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 4
68267: PUSH
68268: LD_INT 4
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 3
68277: PUSH
68278: LD_INT 4
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 2
68287: PUSH
68288: LD_INT 3
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 2
68297: PUSH
68298: LD_INT 2
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 4
68307: PUSH
68308: LD_INT 2
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 2
68317: PUSH
68318: LD_INT 4
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 0
68327: PUSH
68328: LD_INT 4
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: LD_INT 3
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 1
68347: PUSH
68348: LD_INT 4
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 1
68357: PUSH
68358: LD_INT 5
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 0
68367: PUSH
68368: LD_INT 5
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 1
68377: NEG
68378: PUSH
68379: LD_INT 4
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 1
68388: NEG
68389: PUSH
68390: LD_INT 3
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 2
68399: PUSH
68400: LD_INT 5
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 2
68409: NEG
68410: PUSH
68411: LD_INT 3
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 3
68420: NEG
68421: PUSH
68422: LD_INT 0
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: LD_INT 3
68431: NEG
68432: PUSH
68433: LD_INT 1
68435: NEG
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 2
68443: NEG
68444: PUSH
68445: LD_INT 0
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 2
68454: NEG
68455: PUSH
68456: LD_INT 1
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 3
68465: NEG
68466: PUSH
68467: LD_INT 1
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 4
68476: NEG
68477: PUSH
68478: LD_INT 0
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 4
68487: NEG
68488: PUSH
68489: LD_INT 1
68491: NEG
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 4
68499: NEG
68500: PUSH
68501: LD_INT 2
68503: NEG
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 2
68511: NEG
68512: PUSH
68513: LD_INT 2
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 4
68522: NEG
68523: PUSH
68524: LD_INT 4
68526: NEG
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 4
68534: NEG
68535: PUSH
68536: LD_INT 5
68538: NEG
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 3
68546: NEG
68547: PUSH
68548: LD_INT 4
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 3
68558: NEG
68559: PUSH
68560: LD_INT 3
68562: NEG
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 4
68570: NEG
68571: PUSH
68572: LD_INT 3
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 5
68582: NEG
68583: PUSH
68584: LD_INT 4
68586: NEG
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 5
68594: NEG
68595: PUSH
68596: LD_INT 5
68598: NEG
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 3
68606: NEG
68607: PUSH
68608: LD_INT 5
68610: NEG
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 5
68618: NEG
68619: PUSH
68620: LD_INT 3
68622: NEG
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68675: LD_ADDR_VAR 0 30
68679: PUSH
68680: LD_INT 4
68682: PUSH
68683: LD_INT 4
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 4
68692: PUSH
68693: LD_INT 3
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 5
68702: PUSH
68703: LD_INT 4
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 5
68712: PUSH
68713: LD_INT 5
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 4
68722: PUSH
68723: LD_INT 5
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 3
68732: PUSH
68733: LD_INT 4
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 3
68742: PUSH
68743: LD_INT 3
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 5
68752: PUSH
68753: LD_INT 3
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 3
68762: PUSH
68763: LD_INT 5
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 0
68772: PUSH
68773: LD_INT 3
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 0
68782: PUSH
68783: LD_INT 2
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 1
68792: PUSH
68793: LD_INT 3
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 1
68802: PUSH
68803: LD_INT 4
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 0
68812: PUSH
68813: LD_INT 4
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 1
68822: NEG
68823: PUSH
68824: LD_INT 3
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 1
68833: NEG
68834: PUSH
68835: LD_INT 2
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 2
68844: PUSH
68845: LD_INT 4
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 2
68854: NEG
68855: PUSH
68856: LD_INT 2
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 4
68865: NEG
68866: PUSH
68867: LD_INT 0
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 4
68876: NEG
68877: PUSH
68878: LD_INT 1
68880: NEG
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 3
68888: NEG
68889: PUSH
68890: LD_INT 0
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 3
68899: NEG
68900: PUSH
68901: LD_INT 1
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 4
68910: NEG
68911: PUSH
68912: LD_INT 1
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 5
68921: NEG
68922: PUSH
68923: LD_INT 0
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 5
68932: NEG
68933: PUSH
68934: LD_INT 1
68936: NEG
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 5
68944: NEG
68945: PUSH
68946: LD_INT 2
68948: NEG
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 3
68956: NEG
68957: PUSH
68958: LD_INT 2
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 3
68967: NEG
68968: PUSH
68969: LD_INT 3
68971: NEG
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 3
68979: NEG
68980: PUSH
68981: LD_INT 4
68983: NEG
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 2
68991: NEG
68992: PUSH
68993: LD_INT 3
68995: NEG
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 2
69003: NEG
69004: PUSH
69005: LD_INT 2
69007: NEG
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_INT 3
69015: NEG
69016: PUSH
69017: LD_INT 2
69019: NEG
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 4
69027: NEG
69028: PUSH
69029: LD_INT 3
69031: NEG
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 4
69039: NEG
69040: PUSH
69041: LD_INT 4
69043: NEG
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 2
69051: NEG
69052: PUSH
69053: LD_INT 4
69055: NEG
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 4
69063: NEG
69064: PUSH
69065: LD_INT 2
69067: NEG
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 0
69075: PUSH
69076: LD_INT 4
69078: NEG
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 0
69086: PUSH
69087: LD_INT 5
69089: NEG
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 1
69097: PUSH
69098: LD_INT 4
69100: NEG
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 1
69108: PUSH
69109: LD_INT 3
69111: NEG
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 0
69119: PUSH
69120: LD_INT 3
69122: NEG
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 1
69130: NEG
69131: PUSH
69132: LD_INT 4
69134: NEG
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 1
69142: NEG
69143: PUSH
69144: LD_INT 5
69146: NEG
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 2
69154: PUSH
69155: LD_INT 3
69157: NEG
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 2
69165: NEG
69166: PUSH
69167: LD_INT 5
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69222: LD_ADDR_VAR 0 31
69226: PUSH
69227: LD_INT 0
69229: PUSH
69230: LD_INT 4
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 0
69239: PUSH
69240: LD_INT 3
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 1
69249: PUSH
69250: LD_INT 4
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 1
69259: PUSH
69260: LD_INT 5
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 0
69269: PUSH
69270: LD_INT 5
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 1
69279: NEG
69280: PUSH
69281: LD_INT 4
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 1
69290: NEG
69291: PUSH
69292: LD_INT 3
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 2
69301: PUSH
69302: LD_INT 5
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 2
69311: NEG
69312: PUSH
69313: LD_INT 3
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 3
69322: NEG
69323: PUSH
69324: LD_INT 0
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 3
69333: NEG
69334: PUSH
69335: LD_INT 1
69337: NEG
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: LD_INT 2
69345: NEG
69346: PUSH
69347: LD_INT 0
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 2
69356: NEG
69357: PUSH
69358: LD_INT 1
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 3
69367: NEG
69368: PUSH
69369: LD_INT 1
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 4
69378: NEG
69379: PUSH
69380: LD_INT 0
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 4
69389: NEG
69390: PUSH
69391: LD_INT 1
69393: NEG
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 4
69401: NEG
69402: PUSH
69403: LD_INT 2
69405: NEG
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 2
69413: NEG
69414: PUSH
69415: LD_INT 2
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 4
69424: NEG
69425: PUSH
69426: LD_INT 4
69428: NEG
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 4
69436: NEG
69437: PUSH
69438: LD_INT 5
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 3
69448: NEG
69449: PUSH
69450: LD_INT 4
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 3
69460: NEG
69461: PUSH
69462: LD_INT 3
69464: NEG
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 4
69472: NEG
69473: PUSH
69474: LD_INT 3
69476: NEG
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 5
69484: NEG
69485: PUSH
69486: LD_INT 4
69488: NEG
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 5
69496: NEG
69497: PUSH
69498: LD_INT 5
69500: NEG
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 3
69508: NEG
69509: PUSH
69510: LD_INT 5
69512: NEG
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 5
69520: NEG
69521: PUSH
69522: LD_INT 3
69524: NEG
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 0
69532: PUSH
69533: LD_INT 3
69535: NEG
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 0
69543: PUSH
69544: LD_INT 4
69546: NEG
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: PUSH
69552: LD_INT 1
69554: PUSH
69555: LD_INT 3
69557: NEG
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 1
69565: PUSH
69566: LD_INT 2
69568: NEG
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 0
69576: PUSH
69577: LD_INT 2
69579: NEG
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 1
69587: NEG
69588: PUSH
69589: LD_INT 3
69591: NEG
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 1
69599: NEG
69600: PUSH
69601: LD_INT 4
69603: NEG
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 2
69611: PUSH
69612: LD_INT 2
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 2
69622: NEG
69623: PUSH
69624: LD_INT 4
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 4
69634: PUSH
69635: LD_INT 0
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 4
69644: PUSH
69645: LD_INT 1
69647: NEG
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 5
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 5
69665: PUSH
69666: LD_INT 1
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 4
69675: PUSH
69676: LD_INT 1
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 3
69685: PUSH
69686: LD_INT 0
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 3
69695: PUSH
69696: LD_INT 1
69698: NEG
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 3
69706: PUSH
69707: LD_INT 2
69709: NEG
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 5
69717: PUSH
69718: LD_INT 2
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69772: LD_ADDR_VAR 0 32
69776: PUSH
69777: LD_INT 4
69779: NEG
69780: PUSH
69781: LD_INT 0
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 4
69790: NEG
69791: PUSH
69792: LD_INT 1
69794: NEG
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 3
69802: NEG
69803: PUSH
69804: LD_INT 0
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 3
69813: NEG
69814: PUSH
69815: LD_INT 1
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 4
69824: NEG
69825: PUSH
69826: LD_INT 1
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 5
69835: NEG
69836: PUSH
69837: LD_INT 0
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: LD_INT 5
69846: NEG
69847: PUSH
69848: LD_INT 1
69850: NEG
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 5
69858: NEG
69859: PUSH
69860: LD_INT 2
69862: NEG
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 3
69870: NEG
69871: PUSH
69872: LD_INT 2
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 3
69881: NEG
69882: PUSH
69883: LD_INT 3
69885: NEG
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 3
69893: NEG
69894: PUSH
69895: LD_INT 4
69897: NEG
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 2
69905: NEG
69906: PUSH
69907: LD_INT 3
69909: NEG
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 2
69917: NEG
69918: PUSH
69919: LD_INT 2
69921: NEG
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 3
69929: NEG
69930: PUSH
69931: LD_INT 2
69933: NEG
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 4
69941: NEG
69942: PUSH
69943: LD_INT 3
69945: NEG
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 4
69953: NEG
69954: PUSH
69955: LD_INT 4
69957: NEG
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 2
69965: NEG
69966: PUSH
69967: LD_INT 4
69969: NEG
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 4
69977: NEG
69978: PUSH
69979: LD_INT 2
69981: NEG
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 0
69989: PUSH
69990: LD_INT 4
69992: NEG
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 0
70000: PUSH
70001: LD_INT 5
70003: NEG
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 1
70011: PUSH
70012: LD_INT 4
70014: NEG
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 1
70022: PUSH
70023: LD_INT 3
70025: NEG
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 0
70033: PUSH
70034: LD_INT 3
70036: NEG
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 1
70044: NEG
70045: PUSH
70046: LD_INT 4
70048: NEG
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 1
70056: NEG
70057: PUSH
70058: LD_INT 5
70060: NEG
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 2
70068: PUSH
70069: LD_INT 3
70071: NEG
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 2
70079: NEG
70080: PUSH
70081: LD_INT 5
70083: NEG
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 3
70091: PUSH
70092: LD_INT 0
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 3
70101: PUSH
70102: LD_INT 1
70104: NEG
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 4
70112: PUSH
70113: LD_INT 0
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 4
70122: PUSH
70123: LD_INT 1
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 3
70132: PUSH
70133: LD_INT 1
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 2
70142: PUSH
70143: LD_INT 0
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 2
70152: PUSH
70153: LD_INT 1
70155: NEG
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 2
70163: PUSH
70164: LD_INT 2
70166: NEG
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 4
70174: PUSH
70175: LD_INT 2
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 4
70184: PUSH
70185: LD_INT 4
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 4
70194: PUSH
70195: LD_INT 3
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 5
70204: PUSH
70205: LD_INT 4
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 5
70214: PUSH
70215: LD_INT 5
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 4
70224: PUSH
70225: LD_INT 5
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 3
70234: PUSH
70235: LD_INT 4
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 3
70244: PUSH
70245: LD_INT 3
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 5
70254: PUSH
70255: LD_INT 3
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 3
70264: PUSH
70265: LD_INT 5
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70319: LD_ADDR_VAR 0 33
70323: PUSH
70324: LD_INT 4
70326: NEG
70327: PUSH
70328: LD_INT 4
70330: NEG
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PUSH
70336: LD_INT 4
70338: NEG
70339: PUSH
70340: LD_INT 5
70342: NEG
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 3
70350: NEG
70351: PUSH
70352: LD_INT 4
70354: NEG
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 3
70362: NEG
70363: PUSH
70364: LD_INT 3
70366: NEG
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 4
70374: NEG
70375: PUSH
70376: LD_INT 3
70378: NEG
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 5
70386: NEG
70387: PUSH
70388: LD_INT 4
70390: NEG
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: LD_INT 5
70398: NEG
70399: PUSH
70400: LD_INT 5
70402: NEG
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 3
70410: NEG
70411: PUSH
70412: LD_INT 5
70414: NEG
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 5
70422: NEG
70423: PUSH
70424: LD_INT 3
70426: NEG
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 0
70434: PUSH
70435: LD_INT 3
70437: NEG
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 0
70445: PUSH
70446: LD_INT 4
70448: NEG
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 1
70456: PUSH
70457: LD_INT 3
70459: NEG
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 1
70467: PUSH
70468: LD_INT 2
70470: NEG
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 0
70478: PUSH
70479: LD_INT 2
70481: NEG
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 1
70489: NEG
70490: PUSH
70491: LD_INT 3
70493: NEG
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 1
70501: NEG
70502: PUSH
70503: LD_INT 4
70505: NEG
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 2
70513: PUSH
70514: LD_INT 2
70516: NEG
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 2
70524: NEG
70525: PUSH
70526: LD_INT 4
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 4
70536: PUSH
70537: LD_INT 0
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 4
70546: PUSH
70547: LD_INT 1
70549: NEG
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 5
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 5
70567: PUSH
70568: LD_INT 1
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 4
70577: PUSH
70578: LD_INT 1
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 3
70587: PUSH
70588: LD_INT 0
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 3
70597: PUSH
70598: LD_INT 1
70600: NEG
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 3
70608: PUSH
70609: LD_INT 2
70611: NEG
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 5
70619: PUSH
70620: LD_INT 2
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 3
70629: PUSH
70630: LD_INT 3
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 3
70639: PUSH
70640: LD_INT 2
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: LD_INT 4
70649: PUSH
70650: LD_INT 3
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 4
70659: PUSH
70660: LD_INT 4
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 3
70669: PUSH
70670: LD_INT 4
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: LD_INT 2
70679: PUSH
70680: LD_INT 3
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 2
70689: PUSH
70690: LD_INT 2
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 4
70699: PUSH
70700: LD_INT 2
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 2
70709: PUSH
70710: LD_INT 4
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 0
70719: PUSH
70720: LD_INT 4
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 0
70729: PUSH
70730: LD_INT 3
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 1
70739: PUSH
70740: LD_INT 4
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 1
70749: PUSH
70750: LD_INT 5
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: LD_INT 0
70759: PUSH
70760: LD_INT 5
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 1
70769: NEG
70770: PUSH
70771: LD_INT 4
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 1
70780: NEG
70781: PUSH
70782: LD_INT 3
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 2
70791: PUSH
70792: LD_INT 5
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 2
70801: NEG
70802: PUSH
70803: LD_INT 3
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70857: LD_ADDR_VAR 0 34
70861: PUSH
70862: LD_INT 0
70864: PUSH
70865: LD_INT 4
70867: NEG
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 0
70875: PUSH
70876: LD_INT 5
70878: NEG
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 1
70886: PUSH
70887: LD_INT 4
70889: NEG
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 1
70897: PUSH
70898: LD_INT 3
70900: NEG
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 0
70908: PUSH
70909: LD_INT 3
70911: NEG
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: LD_INT 1
70919: NEG
70920: PUSH
70921: LD_INT 4
70923: NEG
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 1
70931: NEG
70932: PUSH
70933: LD_INT 5
70935: NEG
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: PUSH
70941: LD_INT 2
70943: PUSH
70944: LD_INT 3
70946: NEG
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 2
70954: NEG
70955: PUSH
70956: LD_INT 5
70958: NEG
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 3
70966: PUSH
70967: LD_INT 0
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: LD_INT 3
70976: PUSH
70977: LD_INT 1
70979: NEG
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 4
70987: PUSH
70988: LD_INT 0
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 4
70997: PUSH
70998: LD_INT 1
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: LD_INT 3
71007: PUSH
71008: LD_INT 1
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: LD_INT 2
71017: PUSH
71018: LD_INT 0
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 2
71027: PUSH
71028: LD_INT 1
71030: NEG
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 2
71038: PUSH
71039: LD_INT 2
71041: NEG
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PUSH
71047: LD_INT 4
71049: PUSH
71050: LD_INT 2
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: LD_INT 4
71059: PUSH
71060: LD_INT 4
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 4
71069: PUSH
71070: LD_INT 3
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 5
71079: PUSH
71080: LD_INT 4
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 5
71089: PUSH
71090: LD_INT 5
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 4
71099: PUSH
71100: LD_INT 5
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: PUSH
71107: LD_INT 3
71109: PUSH
71110: LD_INT 4
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 3
71119: PUSH
71120: LD_INT 3
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 5
71129: PUSH
71130: LD_INT 3
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 3
71139: PUSH
71140: LD_INT 5
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 0
71149: PUSH
71150: LD_INT 3
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 0
71159: PUSH
71160: LD_INT 2
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: PUSH
71167: LD_INT 1
71169: PUSH
71170: LD_INT 3
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 1
71179: PUSH
71180: LD_INT 4
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 0
71189: PUSH
71190: LD_INT 4
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 1
71199: NEG
71200: PUSH
71201: LD_INT 3
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 1
71210: NEG
71211: PUSH
71212: LD_INT 2
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: LD_INT 2
71221: PUSH
71222: LD_INT 4
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: PUSH
71229: LD_INT 2
71231: NEG
71232: PUSH
71233: LD_INT 2
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: LD_INT 4
71242: NEG
71243: PUSH
71244: LD_INT 0
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: PUSH
71251: LD_INT 4
71253: NEG
71254: PUSH
71255: LD_INT 1
71257: NEG
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: PUSH
71263: LD_INT 3
71265: NEG
71266: PUSH
71267: LD_INT 0
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 3
71276: NEG
71277: PUSH
71278: LD_INT 1
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: LD_INT 4
71287: NEG
71288: PUSH
71289: LD_INT 1
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 5
71298: NEG
71299: PUSH
71300: LD_INT 0
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 5
71309: NEG
71310: PUSH
71311: LD_INT 1
71313: NEG
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: PUSH
71319: LD_INT 5
71321: NEG
71322: PUSH
71323: LD_INT 2
71325: NEG
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 3
71333: NEG
71334: PUSH
71335: LD_INT 2
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: ST_TO_ADDR
// end ; end ;
71389: GO 71392
71391: POP
// case btype of b_depot , b_warehouse :
71392: LD_VAR 0 1
71396: PUSH
71397: LD_INT 0
71399: DOUBLE
71400: EQUAL
71401: IFTRUE 71411
71403: LD_INT 1
71405: DOUBLE
71406: EQUAL
71407: IFTRUE 71411
71409: GO 71612
71411: POP
// case nation of nation_american :
71412: LD_VAR 0 5
71416: PUSH
71417: LD_INT 1
71419: DOUBLE
71420: EQUAL
71421: IFTRUE 71425
71423: GO 71481
71425: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71426: LD_ADDR_VAR 0 9
71430: PUSH
71431: LD_VAR 0 11
71435: PUSH
71436: LD_VAR 0 12
71440: PUSH
71441: LD_VAR 0 13
71445: PUSH
71446: LD_VAR 0 14
71450: PUSH
71451: LD_VAR 0 15
71455: PUSH
71456: LD_VAR 0 16
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: PUSH
71469: LD_VAR 0 4
71473: PUSH
71474: LD_INT 1
71476: PLUS
71477: ARRAY
71478: ST_TO_ADDR
71479: GO 71610
71481: LD_INT 2
71483: DOUBLE
71484: EQUAL
71485: IFTRUE 71489
71487: GO 71545
71489: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71490: LD_ADDR_VAR 0 9
71494: PUSH
71495: LD_VAR 0 17
71499: PUSH
71500: LD_VAR 0 18
71504: PUSH
71505: LD_VAR 0 19
71509: PUSH
71510: LD_VAR 0 20
71514: PUSH
71515: LD_VAR 0 21
71519: PUSH
71520: LD_VAR 0 22
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: PUSH
71533: LD_VAR 0 4
71537: PUSH
71538: LD_INT 1
71540: PLUS
71541: ARRAY
71542: ST_TO_ADDR
71543: GO 71610
71545: LD_INT 3
71547: DOUBLE
71548: EQUAL
71549: IFTRUE 71553
71551: GO 71609
71553: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71554: LD_ADDR_VAR 0 9
71558: PUSH
71559: LD_VAR 0 23
71563: PUSH
71564: LD_VAR 0 24
71568: PUSH
71569: LD_VAR 0 25
71573: PUSH
71574: LD_VAR 0 26
71578: PUSH
71579: LD_VAR 0 27
71583: PUSH
71584: LD_VAR 0 28
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: PUSH
71597: LD_VAR 0 4
71601: PUSH
71602: LD_INT 1
71604: PLUS
71605: ARRAY
71606: ST_TO_ADDR
71607: GO 71610
71609: POP
71610: GO 72165
71612: LD_INT 2
71614: DOUBLE
71615: EQUAL
71616: IFTRUE 71626
71618: LD_INT 3
71620: DOUBLE
71621: EQUAL
71622: IFTRUE 71626
71624: GO 71682
71626: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71627: LD_ADDR_VAR 0 9
71631: PUSH
71632: LD_VAR 0 29
71636: PUSH
71637: LD_VAR 0 30
71641: PUSH
71642: LD_VAR 0 31
71646: PUSH
71647: LD_VAR 0 32
71651: PUSH
71652: LD_VAR 0 33
71656: PUSH
71657: LD_VAR 0 34
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: PUSH
71670: LD_VAR 0 4
71674: PUSH
71675: LD_INT 1
71677: PLUS
71678: ARRAY
71679: ST_TO_ADDR
71680: GO 72165
71682: LD_INT 16
71684: DOUBLE
71685: EQUAL
71686: IFTRUE 71744
71688: LD_INT 17
71690: DOUBLE
71691: EQUAL
71692: IFTRUE 71744
71694: LD_INT 18
71696: DOUBLE
71697: EQUAL
71698: IFTRUE 71744
71700: LD_INT 19
71702: DOUBLE
71703: EQUAL
71704: IFTRUE 71744
71706: LD_INT 22
71708: DOUBLE
71709: EQUAL
71710: IFTRUE 71744
71712: LD_INT 20
71714: DOUBLE
71715: EQUAL
71716: IFTRUE 71744
71718: LD_INT 21
71720: DOUBLE
71721: EQUAL
71722: IFTRUE 71744
71724: LD_INT 23
71726: DOUBLE
71727: EQUAL
71728: IFTRUE 71744
71730: LD_INT 24
71732: DOUBLE
71733: EQUAL
71734: IFTRUE 71744
71736: LD_INT 25
71738: DOUBLE
71739: EQUAL
71740: IFTRUE 71744
71742: GO 71800
71744: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71745: LD_ADDR_VAR 0 9
71749: PUSH
71750: LD_VAR 0 35
71754: PUSH
71755: LD_VAR 0 36
71759: PUSH
71760: LD_VAR 0 37
71764: PUSH
71765: LD_VAR 0 38
71769: PUSH
71770: LD_VAR 0 39
71774: PUSH
71775: LD_VAR 0 40
71779: PUSH
71780: EMPTY
71781: LIST
71782: LIST
71783: LIST
71784: LIST
71785: LIST
71786: LIST
71787: PUSH
71788: LD_VAR 0 4
71792: PUSH
71793: LD_INT 1
71795: PLUS
71796: ARRAY
71797: ST_TO_ADDR
71798: GO 72165
71800: LD_INT 6
71802: DOUBLE
71803: EQUAL
71804: IFTRUE 71856
71806: LD_INT 7
71808: DOUBLE
71809: EQUAL
71810: IFTRUE 71856
71812: LD_INT 8
71814: DOUBLE
71815: EQUAL
71816: IFTRUE 71856
71818: LD_INT 13
71820: DOUBLE
71821: EQUAL
71822: IFTRUE 71856
71824: LD_INT 12
71826: DOUBLE
71827: EQUAL
71828: IFTRUE 71856
71830: LD_INT 15
71832: DOUBLE
71833: EQUAL
71834: IFTRUE 71856
71836: LD_INT 11
71838: DOUBLE
71839: EQUAL
71840: IFTRUE 71856
71842: LD_INT 14
71844: DOUBLE
71845: EQUAL
71846: IFTRUE 71856
71848: LD_INT 10
71850: DOUBLE
71851: EQUAL
71852: IFTRUE 71856
71854: GO 71912
71856: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71857: LD_ADDR_VAR 0 9
71861: PUSH
71862: LD_VAR 0 41
71866: PUSH
71867: LD_VAR 0 42
71871: PUSH
71872: LD_VAR 0 43
71876: PUSH
71877: LD_VAR 0 44
71881: PUSH
71882: LD_VAR 0 45
71886: PUSH
71887: LD_VAR 0 46
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: PUSH
71900: LD_VAR 0 4
71904: PUSH
71905: LD_INT 1
71907: PLUS
71908: ARRAY
71909: ST_TO_ADDR
71910: GO 72165
71912: LD_INT 36
71914: DOUBLE
71915: EQUAL
71916: IFTRUE 71920
71918: GO 71976
71920: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71921: LD_ADDR_VAR 0 9
71925: PUSH
71926: LD_VAR 0 47
71930: PUSH
71931: LD_VAR 0 48
71935: PUSH
71936: LD_VAR 0 49
71940: PUSH
71941: LD_VAR 0 50
71945: PUSH
71946: LD_VAR 0 51
71950: PUSH
71951: LD_VAR 0 52
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: PUSH
71964: LD_VAR 0 4
71968: PUSH
71969: LD_INT 1
71971: PLUS
71972: ARRAY
71973: ST_TO_ADDR
71974: GO 72165
71976: LD_INT 4
71978: DOUBLE
71979: EQUAL
71980: IFTRUE 72002
71982: LD_INT 5
71984: DOUBLE
71985: EQUAL
71986: IFTRUE 72002
71988: LD_INT 34
71990: DOUBLE
71991: EQUAL
71992: IFTRUE 72002
71994: LD_INT 37
71996: DOUBLE
71997: EQUAL
71998: IFTRUE 72002
72000: GO 72058
72002: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72003: LD_ADDR_VAR 0 9
72007: PUSH
72008: LD_VAR 0 53
72012: PUSH
72013: LD_VAR 0 54
72017: PUSH
72018: LD_VAR 0 55
72022: PUSH
72023: LD_VAR 0 56
72027: PUSH
72028: LD_VAR 0 57
72032: PUSH
72033: LD_VAR 0 58
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: PUSH
72046: LD_VAR 0 4
72050: PUSH
72051: LD_INT 1
72053: PLUS
72054: ARRAY
72055: ST_TO_ADDR
72056: GO 72165
72058: LD_INT 31
72060: DOUBLE
72061: EQUAL
72062: IFTRUE 72108
72064: LD_INT 32
72066: DOUBLE
72067: EQUAL
72068: IFTRUE 72108
72070: LD_INT 33
72072: DOUBLE
72073: EQUAL
72074: IFTRUE 72108
72076: LD_INT 27
72078: DOUBLE
72079: EQUAL
72080: IFTRUE 72108
72082: LD_INT 26
72084: DOUBLE
72085: EQUAL
72086: IFTRUE 72108
72088: LD_INT 28
72090: DOUBLE
72091: EQUAL
72092: IFTRUE 72108
72094: LD_INT 29
72096: DOUBLE
72097: EQUAL
72098: IFTRUE 72108
72100: LD_INT 30
72102: DOUBLE
72103: EQUAL
72104: IFTRUE 72108
72106: GO 72164
72108: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72109: LD_ADDR_VAR 0 9
72113: PUSH
72114: LD_VAR 0 59
72118: PUSH
72119: LD_VAR 0 60
72123: PUSH
72124: LD_VAR 0 61
72128: PUSH
72129: LD_VAR 0 62
72133: PUSH
72134: LD_VAR 0 63
72138: PUSH
72139: LD_VAR 0 64
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: PUSH
72152: LD_VAR 0 4
72156: PUSH
72157: LD_INT 1
72159: PLUS
72160: ARRAY
72161: ST_TO_ADDR
72162: GO 72165
72164: POP
// temp_list2 = [ ] ;
72165: LD_ADDR_VAR 0 10
72169: PUSH
72170: EMPTY
72171: ST_TO_ADDR
// for i in temp_list do
72172: LD_ADDR_VAR 0 8
72176: PUSH
72177: LD_VAR 0 9
72181: PUSH
72182: FOR_IN
72183: IFFALSE 72235
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72185: LD_ADDR_VAR 0 10
72189: PUSH
72190: LD_VAR 0 10
72194: PUSH
72195: LD_VAR 0 8
72199: PUSH
72200: LD_INT 1
72202: ARRAY
72203: PUSH
72204: LD_VAR 0 2
72208: PLUS
72209: PUSH
72210: LD_VAR 0 8
72214: PUSH
72215: LD_INT 2
72217: ARRAY
72218: PUSH
72219: LD_VAR 0 3
72223: PLUS
72224: PUSH
72225: EMPTY
72226: LIST
72227: LIST
72228: PUSH
72229: EMPTY
72230: LIST
72231: ADD
72232: ST_TO_ADDR
72233: GO 72182
72235: POP
72236: POP
// result = temp_list2 ;
72237: LD_ADDR_VAR 0 7
72241: PUSH
72242: LD_VAR 0 10
72246: ST_TO_ADDR
// end ;
72247: LD_VAR 0 7
72251: RET
// export function EnemyInRange ( unit , dist ) ; begin
72252: LD_INT 0
72254: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72255: LD_ADDR_VAR 0 3
72259: PUSH
72260: LD_VAR 0 1
72264: PPUSH
72265: CALL_OW 255
72269: PPUSH
72270: LD_VAR 0 1
72274: PPUSH
72275: CALL_OW 250
72279: PPUSH
72280: LD_VAR 0 1
72284: PPUSH
72285: CALL_OW 251
72289: PPUSH
72290: LD_VAR 0 2
72294: PPUSH
72295: CALL 45654 0 4
72299: PUSH
72300: LD_INT 4
72302: ARRAY
72303: ST_TO_ADDR
// end ;
72304: LD_VAR 0 3
72308: RET
// export function PlayerSeeMe ( unit ) ; begin
72309: LD_INT 0
72311: PPUSH
// result := See ( your_side , unit ) ;
72312: LD_ADDR_VAR 0 2
72316: PUSH
72317: LD_OWVAR 2
72321: PPUSH
72322: LD_VAR 0 1
72326: PPUSH
72327: CALL_OW 292
72331: ST_TO_ADDR
// end ;
72332: LD_VAR 0 2
72336: RET
// export function ReverseDir ( unit ) ; begin
72337: LD_INT 0
72339: PPUSH
// if not unit then
72340: LD_VAR 0 1
72344: NOT
72345: IFFALSE 72349
// exit ;
72347: GO 72372
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72349: LD_ADDR_VAR 0 2
72353: PUSH
72354: LD_VAR 0 1
72358: PPUSH
72359: CALL_OW 254
72363: PUSH
72364: LD_INT 3
72366: PLUS
72367: PUSH
72368: LD_INT 6
72370: MOD
72371: ST_TO_ADDR
// end ;
72372: LD_VAR 0 2
72376: RET
// export function ReverseArray ( array ) ; var i ; begin
72377: LD_INT 0
72379: PPUSH
72380: PPUSH
// if not array then
72381: LD_VAR 0 1
72385: NOT
72386: IFFALSE 72390
// exit ;
72388: GO 72445
// result := [ ] ;
72390: LD_ADDR_VAR 0 2
72394: PUSH
72395: EMPTY
72396: ST_TO_ADDR
// for i := array downto 1 do
72397: LD_ADDR_VAR 0 3
72401: PUSH
72402: DOUBLE
72403: LD_VAR 0 1
72407: INC
72408: ST_TO_ADDR
72409: LD_INT 1
72411: PUSH
72412: FOR_DOWNTO
72413: IFFALSE 72443
// result := Join ( result , array [ i ] ) ;
72415: LD_ADDR_VAR 0 2
72419: PUSH
72420: LD_VAR 0 2
72424: PPUSH
72425: LD_VAR 0 1
72429: PUSH
72430: LD_VAR 0 3
72434: ARRAY
72435: PPUSH
72436: CALL 77088 0 2
72440: ST_TO_ADDR
72441: GO 72412
72443: POP
72444: POP
// end ;
72445: LD_VAR 0 2
72449: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72450: LD_INT 0
72452: PPUSH
72453: PPUSH
72454: PPUSH
72455: PPUSH
72456: PPUSH
72457: PPUSH
// if not unit or not hexes then
72458: LD_VAR 0 1
72462: NOT
72463: PUSH
72464: LD_VAR 0 2
72468: NOT
72469: OR
72470: IFFALSE 72474
// exit ;
72472: GO 72597
// dist := 9999 ;
72474: LD_ADDR_VAR 0 5
72478: PUSH
72479: LD_INT 9999
72481: ST_TO_ADDR
// for i = 1 to hexes do
72482: LD_ADDR_VAR 0 4
72486: PUSH
72487: DOUBLE
72488: LD_INT 1
72490: DEC
72491: ST_TO_ADDR
72492: LD_VAR 0 2
72496: PUSH
72497: FOR_TO
72498: IFFALSE 72585
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72500: LD_ADDR_VAR 0 6
72504: PUSH
72505: LD_VAR 0 1
72509: PPUSH
72510: LD_VAR 0 2
72514: PUSH
72515: LD_VAR 0 4
72519: ARRAY
72520: PUSH
72521: LD_INT 1
72523: ARRAY
72524: PPUSH
72525: LD_VAR 0 2
72529: PUSH
72530: LD_VAR 0 4
72534: ARRAY
72535: PUSH
72536: LD_INT 2
72538: ARRAY
72539: PPUSH
72540: CALL_OW 297
72544: ST_TO_ADDR
// if tdist < dist then
72545: LD_VAR 0 6
72549: PUSH
72550: LD_VAR 0 5
72554: LESS
72555: IFFALSE 72583
// begin hex := hexes [ i ] ;
72557: LD_ADDR_VAR 0 8
72561: PUSH
72562: LD_VAR 0 2
72566: PUSH
72567: LD_VAR 0 4
72571: ARRAY
72572: ST_TO_ADDR
// dist := tdist ;
72573: LD_ADDR_VAR 0 5
72577: PUSH
72578: LD_VAR 0 6
72582: ST_TO_ADDR
// end ; end ;
72583: GO 72497
72585: POP
72586: POP
// result := hex ;
72587: LD_ADDR_VAR 0 3
72591: PUSH
72592: LD_VAR 0 8
72596: ST_TO_ADDR
// end ;
72597: LD_VAR 0 3
72601: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72602: LD_INT 0
72604: PPUSH
72605: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72606: LD_VAR 0 1
72610: NOT
72611: PUSH
72612: LD_VAR 0 1
72616: PUSH
72617: LD_INT 21
72619: PUSH
72620: LD_INT 2
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_INT 23
72629: PUSH
72630: LD_INT 2
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: PUSH
72637: EMPTY
72638: LIST
72639: LIST
72640: PPUSH
72641: CALL_OW 69
72645: IN
72646: NOT
72647: OR
72648: IFFALSE 72652
// exit ;
72650: GO 72699
// for i = 1 to 3 do
72652: LD_ADDR_VAR 0 3
72656: PUSH
72657: DOUBLE
72658: LD_INT 1
72660: DEC
72661: ST_TO_ADDR
72662: LD_INT 3
72664: PUSH
72665: FOR_TO
72666: IFFALSE 72697
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72668: LD_VAR 0 1
72672: PPUSH
72673: CALL_OW 250
72677: PPUSH
72678: LD_VAR 0 1
72682: PPUSH
72683: CALL_OW 251
72687: PPUSH
72688: LD_INT 1
72690: PPUSH
72691: CALL_OW 453
72695: GO 72665
72697: POP
72698: POP
// end ;
72699: LD_VAR 0 2
72703: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72704: LD_INT 0
72706: PPUSH
72707: PPUSH
72708: PPUSH
72709: PPUSH
72710: PPUSH
72711: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72712: LD_VAR 0 1
72716: NOT
72717: PUSH
72718: LD_VAR 0 2
72722: NOT
72723: OR
72724: PUSH
72725: LD_VAR 0 1
72729: PPUSH
72730: CALL_OW 314
72734: OR
72735: IFFALSE 72739
// exit ;
72737: GO 73206
// if GetLives ( i ) < 250 then
72739: LD_VAR 0 4
72743: PPUSH
72744: CALL_OW 256
72748: PUSH
72749: LD_INT 250
72751: LESS
72752: IFFALSE 72765
// begin ComAutodestruct ( i ) ;
72754: LD_VAR 0 4
72758: PPUSH
72759: CALL 72602 0 1
// exit ;
72763: GO 73206
// end ; x := GetX ( enemy_unit ) ;
72765: LD_ADDR_VAR 0 7
72769: PUSH
72770: LD_VAR 0 2
72774: PPUSH
72775: CALL_OW 250
72779: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72780: LD_ADDR_VAR 0 8
72784: PUSH
72785: LD_VAR 0 2
72789: PPUSH
72790: CALL_OW 251
72794: ST_TO_ADDR
// if not x or not y then
72795: LD_VAR 0 7
72799: NOT
72800: PUSH
72801: LD_VAR 0 8
72805: NOT
72806: OR
72807: IFFALSE 72811
// exit ;
72809: GO 73206
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72811: LD_ADDR_VAR 0 6
72815: PUSH
72816: LD_VAR 0 7
72820: PPUSH
72821: LD_INT 0
72823: PPUSH
72824: LD_INT 4
72826: PPUSH
72827: CALL_OW 272
72831: PUSH
72832: LD_VAR 0 8
72836: PPUSH
72837: LD_INT 0
72839: PPUSH
72840: LD_INT 4
72842: PPUSH
72843: CALL_OW 273
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PUSH
72852: LD_VAR 0 7
72856: PPUSH
72857: LD_INT 1
72859: PPUSH
72860: LD_INT 4
72862: PPUSH
72863: CALL_OW 272
72867: PUSH
72868: LD_VAR 0 8
72872: PPUSH
72873: LD_INT 1
72875: PPUSH
72876: LD_INT 4
72878: PPUSH
72879: CALL_OW 273
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: PUSH
72888: LD_VAR 0 7
72892: PPUSH
72893: LD_INT 2
72895: PPUSH
72896: LD_INT 4
72898: PPUSH
72899: CALL_OW 272
72903: PUSH
72904: LD_VAR 0 8
72908: PPUSH
72909: LD_INT 2
72911: PPUSH
72912: LD_INT 4
72914: PPUSH
72915: CALL_OW 273
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_VAR 0 7
72928: PPUSH
72929: LD_INT 3
72931: PPUSH
72932: LD_INT 4
72934: PPUSH
72935: CALL_OW 272
72939: PUSH
72940: LD_VAR 0 8
72944: PPUSH
72945: LD_INT 3
72947: PPUSH
72948: LD_INT 4
72950: PPUSH
72951: CALL_OW 273
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: PUSH
72960: LD_VAR 0 7
72964: PPUSH
72965: LD_INT 4
72967: PPUSH
72968: LD_INT 4
72970: PPUSH
72971: CALL_OW 272
72975: PUSH
72976: LD_VAR 0 8
72980: PPUSH
72981: LD_INT 4
72983: PPUSH
72984: LD_INT 4
72986: PPUSH
72987: CALL_OW 273
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: PUSH
72996: LD_VAR 0 7
73000: PPUSH
73001: LD_INT 5
73003: PPUSH
73004: LD_INT 4
73006: PPUSH
73007: CALL_OW 272
73011: PUSH
73012: LD_VAR 0 8
73016: PPUSH
73017: LD_INT 5
73019: PPUSH
73020: LD_INT 4
73022: PPUSH
73023: CALL_OW 273
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: PUSH
73032: EMPTY
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: ST_TO_ADDR
// for i = tmp downto 1 do
73040: LD_ADDR_VAR 0 4
73044: PUSH
73045: DOUBLE
73046: LD_VAR 0 6
73050: INC
73051: ST_TO_ADDR
73052: LD_INT 1
73054: PUSH
73055: FOR_DOWNTO
73056: IFFALSE 73157
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73058: LD_VAR 0 6
73062: PUSH
73063: LD_VAR 0 4
73067: ARRAY
73068: PUSH
73069: LD_INT 1
73071: ARRAY
73072: PPUSH
73073: LD_VAR 0 6
73077: PUSH
73078: LD_VAR 0 4
73082: ARRAY
73083: PUSH
73084: LD_INT 2
73086: ARRAY
73087: PPUSH
73088: CALL_OW 488
73092: NOT
73093: PUSH
73094: LD_VAR 0 6
73098: PUSH
73099: LD_VAR 0 4
73103: ARRAY
73104: PUSH
73105: LD_INT 1
73107: ARRAY
73108: PPUSH
73109: LD_VAR 0 6
73113: PUSH
73114: LD_VAR 0 4
73118: ARRAY
73119: PUSH
73120: LD_INT 2
73122: ARRAY
73123: PPUSH
73124: CALL_OW 428
73128: PUSH
73129: LD_INT 0
73131: NONEQUAL
73132: OR
73133: IFFALSE 73155
// tmp := Delete ( tmp , i ) ;
73135: LD_ADDR_VAR 0 6
73139: PUSH
73140: LD_VAR 0 6
73144: PPUSH
73145: LD_VAR 0 4
73149: PPUSH
73150: CALL_OW 3
73154: ST_TO_ADDR
73155: GO 73055
73157: POP
73158: POP
// j := GetClosestHex ( unit , tmp ) ;
73159: LD_ADDR_VAR 0 5
73163: PUSH
73164: LD_VAR 0 1
73168: PPUSH
73169: LD_VAR 0 6
73173: PPUSH
73174: CALL 72450 0 2
73178: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73179: LD_VAR 0 1
73183: PPUSH
73184: LD_VAR 0 5
73188: PUSH
73189: LD_INT 1
73191: ARRAY
73192: PPUSH
73193: LD_VAR 0 5
73197: PUSH
73198: LD_INT 2
73200: ARRAY
73201: PPUSH
73202: CALL_OW 111
// end ;
73206: LD_VAR 0 3
73210: RET
// export function PrepareApemanSoldier ( ) ; begin
73211: LD_INT 0
73213: PPUSH
// uc_nation := 0 ;
73214: LD_ADDR_OWVAR 21
73218: PUSH
73219: LD_INT 0
73221: ST_TO_ADDR
// hc_sex := sex_male ;
73222: LD_ADDR_OWVAR 27
73226: PUSH
73227: LD_INT 1
73229: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73230: LD_ADDR_OWVAR 28
73234: PUSH
73235: LD_INT 15
73237: ST_TO_ADDR
// hc_gallery :=  ;
73238: LD_ADDR_OWVAR 33
73242: PUSH
73243: LD_STRING 
73245: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73246: LD_ADDR_OWVAR 31
73250: PUSH
73251: LD_INT 0
73253: PPUSH
73254: LD_INT 3
73256: PPUSH
73257: CALL_OW 12
73261: PUSH
73262: LD_INT 0
73264: PPUSH
73265: LD_INT 3
73267: PPUSH
73268: CALL_OW 12
73272: PUSH
73273: LD_INT 0
73275: PUSH
73276: LD_INT 0
73278: PUSH
73279: EMPTY
73280: LIST
73281: LIST
73282: LIST
73283: LIST
73284: ST_TO_ADDR
// end ;
73285: LD_VAR 0 1
73289: RET
// export function PrepareApemanEngineer ( ) ; begin
73290: LD_INT 0
73292: PPUSH
// uc_nation := 0 ;
73293: LD_ADDR_OWVAR 21
73297: PUSH
73298: LD_INT 0
73300: ST_TO_ADDR
// hc_sex := sex_male ;
73301: LD_ADDR_OWVAR 27
73305: PUSH
73306: LD_INT 1
73308: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73309: LD_ADDR_OWVAR 28
73313: PUSH
73314: LD_INT 16
73316: ST_TO_ADDR
// hc_gallery :=  ;
73317: LD_ADDR_OWVAR 33
73321: PUSH
73322: LD_STRING 
73324: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73325: LD_ADDR_OWVAR 31
73329: PUSH
73330: LD_INT 0
73332: PPUSH
73333: LD_INT 3
73335: PPUSH
73336: CALL_OW 12
73340: PUSH
73341: LD_INT 0
73343: PPUSH
73344: LD_INT 3
73346: PPUSH
73347: CALL_OW 12
73351: PUSH
73352: LD_INT 0
73354: PUSH
73355: LD_INT 0
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: ST_TO_ADDR
// end ;
73364: LD_VAR 0 1
73368: RET
// export function PrepareApeman ( agressivity ) ; begin
73369: LD_INT 0
73371: PPUSH
// uc_side := 0 ;
73372: LD_ADDR_OWVAR 20
73376: PUSH
73377: LD_INT 0
73379: ST_TO_ADDR
// uc_nation := 0 ;
73380: LD_ADDR_OWVAR 21
73384: PUSH
73385: LD_INT 0
73387: ST_TO_ADDR
// hc_sex := sex_male ;
73388: LD_ADDR_OWVAR 27
73392: PUSH
73393: LD_INT 1
73395: ST_TO_ADDR
// hc_class := class_apeman ;
73396: LD_ADDR_OWVAR 28
73400: PUSH
73401: LD_INT 12
73403: ST_TO_ADDR
// hc_gallery :=  ;
73404: LD_ADDR_OWVAR 33
73408: PUSH
73409: LD_STRING 
73411: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73412: LD_ADDR_OWVAR 35
73416: PUSH
73417: LD_VAR 0 1
73421: NEG
73422: PPUSH
73423: LD_VAR 0 1
73427: PPUSH
73428: CALL_OW 12
73432: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73433: LD_ADDR_OWVAR 31
73437: PUSH
73438: LD_INT 0
73440: PPUSH
73441: LD_INT 3
73443: PPUSH
73444: CALL_OW 12
73448: PUSH
73449: LD_INT 0
73451: PPUSH
73452: LD_INT 3
73454: PPUSH
73455: CALL_OW 12
73459: PUSH
73460: LD_INT 0
73462: PUSH
73463: LD_INT 0
73465: PUSH
73466: EMPTY
73467: LIST
73468: LIST
73469: LIST
73470: LIST
73471: ST_TO_ADDR
// end ;
73472: LD_VAR 0 2
73476: RET
// export function PrepareTiger ( agressivity ) ; begin
73477: LD_INT 0
73479: PPUSH
// uc_side := 0 ;
73480: LD_ADDR_OWVAR 20
73484: PUSH
73485: LD_INT 0
73487: ST_TO_ADDR
// uc_nation := 0 ;
73488: LD_ADDR_OWVAR 21
73492: PUSH
73493: LD_INT 0
73495: ST_TO_ADDR
// hc_class := class_tiger ;
73496: LD_ADDR_OWVAR 28
73500: PUSH
73501: LD_INT 14
73503: ST_TO_ADDR
// hc_gallery :=  ;
73504: LD_ADDR_OWVAR 33
73508: PUSH
73509: LD_STRING 
73511: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73512: LD_ADDR_OWVAR 35
73516: PUSH
73517: LD_VAR 0 1
73521: NEG
73522: PPUSH
73523: LD_VAR 0 1
73527: PPUSH
73528: CALL_OW 12
73532: ST_TO_ADDR
// end ;
73533: LD_VAR 0 2
73537: RET
// export function PrepareEnchidna ( ) ; begin
73538: LD_INT 0
73540: PPUSH
// uc_side := 0 ;
73541: LD_ADDR_OWVAR 20
73545: PUSH
73546: LD_INT 0
73548: ST_TO_ADDR
// uc_nation := 0 ;
73549: LD_ADDR_OWVAR 21
73553: PUSH
73554: LD_INT 0
73556: ST_TO_ADDR
// hc_class := class_baggie ;
73557: LD_ADDR_OWVAR 28
73561: PUSH
73562: LD_INT 13
73564: ST_TO_ADDR
// hc_gallery :=  ;
73565: LD_ADDR_OWVAR 33
73569: PUSH
73570: LD_STRING 
73572: ST_TO_ADDR
// end ;
73573: LD_VAR 0 1
73577: RET
// export function PrepareFrog ( ) ; begin
73578: LD_INT 0
73580: PPUSH
// uc_side := 0 ;
73581: LD_ADDR_OWVAR 20
73585: PUSH
73586: LD_INT 0
73588: ST_TO_ADDR
// uc_nation := 0 ;
73589: LD_ADDR_OWVAR 21
73593: PUSH
73594: LD_INT 0
73596: ST_TO_ADDR
// hc_class := class_frog ;
73597: LD_ADDR_OWVAR 28
73601: PUSH
73602: LD_INT 19
73604: ST_TO_ADDR
// hc_gallery :=  ;
73605: LD_ADDR_OWVAR 33
73609: PUSH
73610: LD_STRING 
73612: ST_TO_ADDR
// end ;
73613: LD_VAR 0 1
73617: RET
// export function PrepareFish ( ) ; begin
73618: LD_INT 0
73620: PPUSH
// uc_side := 0 ;
73621: LD_ADDR_OWVAR 20
73625: PUSH
73626: LD_INT 0
73628: ST_TO_ADDR
// uc_nation := 0 ;
73629: LD_ADDR_OWVAR 21
73633: PUSH
73634: LD_INT 0
73636: ST_TO_ADDR
// hc_class := class_fish ;
73637: LD_ADDR_OWVAR 28
73641: PUSH
73642: LD_INT 20
73644: ST_TO_ADDR
// hc_gallery :=  ;
73645: LD_ADDR_OWVAR 33
73649: PUSH
73650: LD_STRING 
73652: ST_TO_ADDR
// end ;
73653: LD_VAR 0 1
73657: RET
// export function PrepareBird ( ) ; begin
73658: LD_INT 0
73660: PPUSH
// uc_side := 0 ;
73661: LD_ADDR_OWVAR 20
73665: PUSH
73666: LD_INT 0
73668: ST_TO_ADDR
// uc_nation := 0 ;
73669: LD_ADDR_OWVAR 21
73673: PUSH
73674: LD_INT 0
73676: ST_TO_ADDR
// hc_class := class_phororhacos ;
73677: LD_ADDR_OWVAR 28
73681: PUSH
73682: LD_INT 18
73684: ST_TO_ADDR
// hc_gallery :=  ;
73685: LD_ADDR_OWVAR 33
73689: PUSH
73690: LD_STRING 
73692: ST_TO_ADDR
// end ;
73693: LD_VAR 0 1
73697: RET
// export function PrepareHorse ( ) ; begin
73698: LD_INT 0
73700: PPUSH
// uc_side := 0 ;
73701: LD_ADDR_OWVAR 20
73705: PUSH
73706: LD_INT 0
73708: ST_TO_ADDR
// uc_nation := 0 ;
73709: LD_ADDR_OWVAR 21
73713: PUSH
73714: LD_INT 0
73716: ST_TO_ADDR
// hc_class := class_horse ;
73717: LD_ADDR_OWVAR 28
73721: PUSH
73722: LD_INT 21
73724: ST_TO_ADDR
// hc_gallery :=  ;
73725: LD_ADDR_OWVAR 33
73729: PUSH
73730: LD_STRING 
73732: ST_TO_ADDR
// end ;
73733: LD_VAR 0 1
73737: RET
// export function PrepareMastodont ( ) ; begin
73738: LD_INT 0
73740: PPUSH
// uc_side := 0 ;
73741: LD_ADDR_OWVAR 20
73745: PUSH
73746: LD_INT 0
73748: ST_TO_ADDR
// uc_nation := 0 ;
73749: LD_ADDR_OWVAR 21
73753: PUSH
73754: LD_INT 0
73756: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73757: LD_ADDR_OWVAR 37
73761: PUSH
73762: LD_INT 31
73764: ST_TO_ADDR
// vc_control := control_rider ;
73765: LD_ADDR_OWVAR 38
73769: PUSH
73770: LD_INT 4
73772: ST_TO_ADDR
// end ;
73773: LD_VAR 0 1
73777: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73778: LD_INT 0
73780: PPUSH
73781: PPUSH
73782: PPUSH
// uc_side = 0 ;
73783: LD_ADDR_OWVAR 20
73787: PUSH
73788: LD_INT 0
73790: ST_TO_ADDR
// uc_nation = 0 ;
73791: LD_ADDR_OWVAR 21
73795: PUSH
73796: LD_INT 0
73798: ST_TO_ADDR
// InitHc_All ( ) ;
73799: CALL_OW 584
// InitVc ;
73803: CALL_OW 20
// if mastodonts then
73807: LD_VAR 0 6
73811: IFFALSE 73878
// for i = 1 to mastodonts do
73813: LD_ADDR_VAR 0 11
73817: PUSH
73818: DOUBLE
73819: LD_INT 1
73821: DEC
73822: ST_TO_ADDR
73823: LD_VAR 0 6
73827: PUSH
73828: FOR_TO
73829: IFFALSE 73876
// begin vc_chassis := 31 ;
73831: LD_ADDR_OWVAR 37
73835: PUSH
73836: LD_INT 31
73838: ST_TO_ADDR
// vc_control := control_rider ;
73839: LD_ADDR_OWVAR 38
73843: PUSH
73844: LD_INT 4
73846: ST_TO_ADDR
// animal := CreateVehicle ;
73847: LD_ADDR_VAR 0 12
73851: PUSH
73852: CALL_OW 45
73856: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73857: LD_VAR 0 12
73861: PPUSH
73862: LD_VAR 0 8
73866: PPUSH
73867: LD_INT 0
73869: PPUSH
73870: CALL 76006 0 3
// end ;
73874: GO 73828
73876: POP
73877: POP
// if horses then
73878: LD_VAR 0 5
73882: IFFALSE 73949
// for i = 1 to horses do
73884: LD_ADDR_VAR 0 11
73888: PUSH
73889: DOUBLE
73890: LD_INT 1
73892: DEC
73893: ST_TO_ADDR
73894: LD_VAR 0 5
73898: PUSH
73899: FOR_TO
73900: IFFALSE 73947
// begin hc_class := 21 ;
73902: LD_ADDR_OWVAR 28
73906: PUSH
73907: LD_INT 21
73909: ST_TO_ADDR
// hc_gallery :=  ;
73910: LD_ADDR_OWVAR 33
73914: PUSH
73915: LD_STRING 
73917: ST_TO_ADDR
// animal := CreateHuman ;
73918: LD_ADDR_VAR 0 12
73922: PUSH
73923: CALL_OW 44
73927: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73928: LD_VAR 0 12
73932: PPUSH
73933: LD_VAR 0 8
73937: PPUSH
73938: LD_INT 0
73940: PPUSH
73941: CALL 76006 0 3
// end ;
73945: GO 73899
73947: POP
73948: POP
// if birds then
73949: LD_VAR 0 1
73953: IFFALSE 74020
// for i = 1 to birds do
73955: LD_ADDR_VAR 0 11
73959: PUSH
73960: DOUBLE
73961: LD_INT 1
73963: DEC
73964: ST_TO_ADDR
73965: LD_VAR 0 1
73969: PUSH
73970: FOR_TO
73971: IFFALSE 74018
// begin hc_class = 18 ;
73973: LD_ADDR_OWVAR 28
73977: PUSH
73978: LD_INT 18
73980: ST_TO_ADDR
// hc_gallery =  ;
73981: LD_ADDR_OWVAR 33
73985: PUSH
73986: LD_STRING 
73988: ST_TO_ADDR
// animal := CreateHuman ;
73989: LD_ADDR_VAR 0 12
73993: PUSH
73994: CALL_OW 44
73998: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73999: LD_VAR 0 12
74003: PPUSH
74004: LD_VAR 0 8
74008: PPUSH
74009: LD_INT 0
74011: PPUSH
74012: CALL 76006 0 3
// end ;
74016: GO 73970
74018: POP
74019: POP
// if tigers then
74020: LD_VAR 0 2
74024: IFFALSE 74108
// for i = 1 to tigers do
74026: LD_ADDR_VAR 0 11
74030: PUSH
74031: DOUBLE
74032: LD_INT 1
74034: DEC
74035: ST_TO_ADDR
74036: LD_VAR 0 2
74040: PUSH
74041: FOR_TO
74042: IFFALSE 74106
// begin hc_class = class_tiger ;
74044: LD_ADDR_OWVAR 28
74048: PUSH
74049: LD_INT 14
74051: ST_TO_ADDR
// hc_gallery =  ;
74052: LD_ADDR_OWVAR 33
74056: PUSH
74057: LD_STRING 
74059: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74060: LD_ADDR_OWVAR 35
74064: PUSH
74065: LD_INT 7
74067: NEG
74068: PPUSH
74069: LD_INT 7
74071: PPUSH
74072: CALL_OW 12
74076: ST_TO_ADDR
// animal := CreateHuman ;
74077: LD_ADDR_VAR 0 12
74081: PUSH
74082: CALL_OW 44
74086: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74087: LD_VAR 0 12
74091: PPUSH
74092: LD_VAR 0 8
74096: PPUSH
74097: LD_INT 0
74099: PPUSH
74100: CALL 76006 0 3
// end ;
74104: GO 74041
74106: POP
74107: POP
// if apemans then
74108: LD_VAR 0 3
74112: IFFALSE 74235
// for i = 1 to apemans do
74114: LD_ADDR_VAR 0 11
74118: PUSH
74119: DOUBLE
74120: LD_INT 1
74122: DEC
74123: ST_TO_ADDR
74124: LD_VAR 0 3
74128: PUSH
74129: FOR_TO
74130: IFFALSE 74233
// begin hc_class = class_apeman ;
74132: LD_ADDR_OWVAR 28
74136: PUSH
74137: LD_INT 12
74139: ST_TO_ADDR
// hc_gallery =  ;
74140: LD_ADDR_OWVAR 33
74144: PUSH
74145: LD_STRING 
74147: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74148: LD_ADDR_OWVAR 35
74152: PUSH
74153: LD_INT 2
74155: NEG
74156: PPUSH
74157: LD_INT 2
74159: PPUSH
74160: CALL_OW 12
74164: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74165: LD_ADDR_OWVAR 31
74169: PUSH
74170: LD_INT 1
74172: PPUSH
74173: LD_INT 3
74175: PPUSH
74176: CALL_OW 12
74180: PUSH
74181: LD_INT 1
74183: PPUSH
74184: LD_INT 3
74186: PPUSH
74187: CALL_OW 12
74191: PUSH
74192: LD_INT 0
74194: PUSH
74195: LD_INT 0
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: LIST
74202: LIST
74203: ST_TO_ADDR
// animal := CreateHuman ;
74204: LD_ADDR_VAR 0 12
74208: PUSH
74209: CALL_OW 44
74213: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74214: LD_VAR 0 12
74218: PPUSH
74219: LD_VAR 0 8
74223: PPUSH
74224: LD_INT 0
74226: PPUSH
74227: CALL 76006 0 3
// end ;
74231: GO 74129
74233: POP
74234: POP
// if enchidnas then
74235: LD_VAR 0 4
74239: IFFALSE 74306
// for i = 1 to enchidnas do
74241: LD_ADDR_VAR 0 11
74245: PUSH
74246: DOUBLE
74247: LD_INT 1
74249: DEC
74250: ST_TO_ADDR
74251: LD_VAR 0 4
74255: PUSH
74256: FOR_TO
74257: IFFALSE 74304
// begin hc_class = 13 ;
74259: LD_ADDR_OWVAR 28
74263: PUSH
74264: LD_INT 13
74266: ST_TO_ADDR
// hc_gallery =  ;
74267: LD_ADDR_OWVAR 33
74271: PUSH
74272: LD_STRING 
74274: ST_TO_ADDR
// animal := CreateHuman ;
74275: LD_ADDR_VAR 0 12
74279: PUSH
74280: CALL_OW 44
74284: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74285: LD_VAR 0 12
74289: PPUSH
74290: LD_VAR 0 8
74294: PPUSH
74295: LD_INT 0
74297: PPUSH
74298: CALL 76006 0 3
// end ;
74302: GO 74256
74304: POP
74305: POP
// if fishes then
74306: LD_VAR 0 7
74310: IFFALSE 74377
// for i = 1 to fishes do
74312: LD_ADDR_VAR 0 11
74316: PUSH
74317: DOUBLE
74318: LD_INT 1
74320: DEC
74321: ST_TO_ADDR
74322: LD_VAR 0 7
74326: PUSH
74327: FOR_TO
74328: IFFALSE 74375
// begin hc_class = 20 ;
74330: LD_ADDR_OWVAR 28
74334: PUSH
74335: LD_INT 20
74337: ST_TO_ADDR
// hc_gallery =  ;
74338: LD_ADDR_OWVAR 33
74342: PUSH
74343: LD_STRING 
74345: ST_TO_ADDR
// animal := CreateHuman ;
74346: LD_ADDR_VAR 0 12
74350: PUSH
74351: CALL_OW 44
74355: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74356: LD_VAR 0 12
74360: PPUSH
74361: LD_VAR 0 9
74365: PPUSH
74366: LD_INT 0
74368: PPUSH
74369: CALL 76006 0 3
// end ;
74373: GO 74327
74375: POP
74376: POP
// end ;
74377: LD_VAR 0 10
74381: RET
// export function WantHeal ( sci , unit ) ; begin
74382: LD_INT 0
74384: PPUSH
// if GetTaskList ( sci ) > 0 then
74385: LD_VAR 0 1
74389: PPUSH
74390: CALL_OW 437
74394: PUSH
74395: LD_INT 0
74397: GREATER
74398: IFFALSE 74468
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74400: LD_VAR 0 1
74404: PPUSH
74405: CALL_OW 437
74409: PUSH
74410: LD_INT 1
74412: ARRAY
74413: PUSH
74414: LD_INT 1
74416: ARRAY
74417: PUSH
74418: LD_STRING l
74420: EQUAL
74421: PUSH
74422: LD_VAR 0 1
74426: PPUSH
74427: CALL_OW 437
74431: PUSH
74432: LD_INT 1
74434: ARRAY
74435: PUSH
74436: LD_INT 4
74438: ARRAY
74439: PUSH
74440: LD_VAR 0 2
74444: EQUAL
74445: AND
74446: IFFALSE 74458
// result := true else
74448: LD_ADDR_VAR 0 3
74452: PUSH
74453: LD_INT 1
74455: ST_TO_ADDR
74456: GO 74466
// result := false ;
74458: LD_ADDR_VAR 0 3
74462: PUSH
74463: LD_INT 0
74465: ST_TO_ADDR
// end else
74466: GO 74476
// result := false ;
74468: LD_ADDR_VAR 0 3
74472: PUSH
74473: LD_INT 0
74475: ST_TO_ADDR
// end ;
74476: LD_VAR 0 3
74480: RET
// export function HealTarget ( sci ) ; begin
74481: LD_INT 0
74483: PPUSH
// if not sci then
74484: LD_VAR 0 1
74488: NOT
74489: IFFALSE 74493
// exit ;
74491: GO 74558
// result := 0 ;
74493: LD_ADDR_VAR 0 2
74497: PUSH
74498: LD_INT 0
74500: ST_TO_ADDR
// if GetTaskList ( sci ) then
74501: LD_VAR 0 1
74505: PPUSH
74506: CALL_OW 437
74510: IFFALSE 74558
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74512: LD_VAR 0 1
74516: PPUSH
74517: CALL_OW 437
74521: PUSH
74522: LD_INT 1
74524: ARRAY
74525: PUSH
74526: LD_INT 1
74528: ARRAY
74529: PUSH
74530: LD_STRING l
74532: EQUAL
74533: IFFALSE 74558
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74535: LD_ADDR_VAR 0 2
74539: PUSH
74540: LD_VAR 0 1
74544: PPUSH
74545: CALL_OW 437
74549: PUSH
74550: LD_INT 1
74552: ARRAY
74553: PUSH
74554: LD_INT 4
74556: ARRAY
74557: ST_TO_ADDR
// end ;
74558: LD_VAR 0 2
74562: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74563: LD_INT 0
74565: PPUSH
74566: PPUSH
74567: PPUSH
74568: PPUSH
// if not base_units then
74569: LD_VAR 0 1
74573: NOT
74574: IFFALSE 74578
// exit ;
74576: GO 74665
// result := false ;
74578: LD_ADDR_VAR 0 2
74582: PUSH
74583: LD_INT 0
74585: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74586: LD_ADDR_VAR 0 5
74590: PUSH
74591: LD_VAR 0 1
74595: PPUSH
74596: LD_INT 21
74598: PUSH
74599: LD_INT 3
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: PPUSH
74606: CALL_OW 72
74610: ST_TO_ADDR
// if not tmp then
74611: LD_VAR 0 5
74615: NOT
74616: IFFALSE 74620
// exit ;
74618: GO 74665
// for i in tmp do
74620: LD_ADDR_VAR 0 3
74624: PUSH
74625: LD_VAR 0 5
74629: PUSH
74630: FOR_IN
74631: IFFALSE 74663
// begin result := EnemyInRange ( i , 22 ) ;
74633: LD_ADDR_VAR 0 2
74637: PUSH
74638: LD_VAR 0 3
74642: PPUSH
74643: LD_INT 22
74645: PPUSH
74646: CALL 72252 0 2
74650: ST_TO_ADDR
// if result then
74651: LD_VAR 0 2
74655: IFFALSE 74661
// exit ;
74657: POP
74658: POP
74659: GO 74665
// end ;
74661: GO 74630
74663: POP
74664: POP
// end ;
74665: LD_VAR 0 2
74669: RET
// export function FilterByTag ( units , tag ) ; begin
74670: LD_INT 0
74672: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74673: LD_ADDR_VAR 0 3
74677: PUSH
74678: LD_VAR 0 1
74682: PPUSH
74683: LD_INT 120
74685: PUSH
74686: LD_VAR 0 2
74690: PUSH
74691: EMPTY
74692: LIST
74693: LIST
74694: PPUSH
74695: CALL_OW 72
74699: ST_TO_ADDR
// end ;
74700: LD_VAR 0 3
74704: RET
// export function IsDriver ( un ) ; begin
74705: LD_INT 0
74707: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74708: LD_ADDR_VAR 0 2
74712: PUSH
74713: LD_VAR 0 1
74717: PUSH
74718: LD_INT 55
74720: PUSH
74721: EMPTY
74722: LIST
74723: PPUSH
74724: CALL_OW 69
74728: IN
74729: ST_TO_ADDR
// end ;
74730: LD_VAR 0 2
74734: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74735: LD_INT 0
74737: PPUSH
74738: PPUSH
// list := [ ] ;
74739: LD_ADDR_VAR 0 5
74743: PUSH
74744: EMPTY
74745: ST_TO_ADDR
// case d of 0 :
74746: LD_VAR 0 3
74750: PUSH
74751: LD_INT 0
74753: DOUBLE
74754: EQUAL
74755: IFTRUE 74759
74757: GO 74892
74759: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74760: LD_ADDR_VAR 0 5
74764: PUSH
74765: LD_VAR 0 1
74769: PUSH
74770: LD_INT 4
74772: MINUS
74773: PUSH
74774: LD_VAR 0 2
74778: PUSH
74779: LD_INT 4
74781: MINUS
74782: PUSH
74783: LD_INT 2
74785: PUSH
74786: EMPTY
74787: LIST
74788: LIST
74789: LIST
74790: PUSH
74791: LD_VAR 0 1
74795: PUSH
74796: LD_INT 3
74798: MINUS
74799: PUSH
74800: LD_VAR 0 2
74804: PUSH
74805: LD_INT 1
74807: PUSH
74808: EMPTY
74809: LIST
74810: LIST
74811: LIST
74812: PUSH
74813: LD_VAR 0 1
74817: PUSH
74818: LD_INT 4
74820: PLUS
74821: PUSH
74822: LD_VAR 0 2
74826: PUSH
74827: LD_INT 4
74829: PUSH
74830: EMPTY
74831: LIST
74832: LIST
74833: LIST
74834: PUSH
74835: LD_VAR 0 1
74839: PUSH
74840: LD_INT 3
74842: PLUS
74843: PUSH
74844: LD_VAR 0 2
74848: PUSH
74849: LD_INT 3
74851: PLUS
74852: PUSH
74853: LD_INT 5
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: LIST
74860: PUSH
74861: LD_VAR 0 1
74865: PUSH
74866: LD_VAR 0 2
74870: PUSH
74871: LD_INT 4
74873: PLUS
74874: PUSH
74875: LD_INT 0
74877: PUSH
74878: EMPTY
74879: LIST
74880: LIST
74881: LIST
74882: PUSH
74883: EMPTY
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: LIST
74889: ST_TO_ADDR
// end ; 1 :
74890: GO 75590
74892: LD_INT 1
74894: DOUBLE
74895: EQUAL
74896: IFTRUE 74900
74898: GO 75033
74900: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74901: LD_ADDR_VAR 0 5
74905: PUSH
74906: LD_VAR 0 1
74910: PUSH
74911: LD_VAR 0 2
74915: PUSH
74916: LD_INT 4
74918: MINUS
74919: PUSH
74920: LD_INT 3
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: LIST
74927: PUSH
74928: LD_VAR 0 1
74932: PUSH
74933: LD_INT 3
74935: MINUS
74936: PUSH
74937: LD_VAR 0 2
74941: PUSH
74942: LD_INT 3
74944: MINUS
74945: PUSH
74946: LD_INT 2
74948: PUSH
74949: EMPTY
74950: LIST
74951: LIST
74952: LIST
74953: PUSH
74954: LD_VAR 0 1
74958: PUSH
74959: LD_INT 4
74961: MINUS
74962: PUSH
74963: LD_VAR 0 2
74967: PUSH
74968: LD_INT 1
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: LIST
74975: PUSH
74976: LD_VAR 0 1
74980: PUSH
74981: LD_VAR 0 2
74985: PUSH
74986: LD_INT 3
74988: PLUS
74989: PUSH
74990: LD_INT 0
74992: PUSH
74993: EMPTY
74994: LIST
74995: LIST
74996: LIST
74997: PUSH
74998: LD_VAR 0 1
75002: PUSH
75003: LD_INT 4
75005: PLUS
75006: PUSH
75007: LD_VAR 0 2
75011: PUSH
75012: LD_INT 4
75014: PLUS
75015: PUSH
75016: LD_INT 5
75018: PUSH
75019: EMPTY
75020: LIST
75021: LIST
75022: LIST
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: LIST
75030: ST_TO_ADDR
// end ; 2 :
75031: GO 75590
75033: LD_INT 2
75035: DOUBLE
75036: EQUAL
75037: IFTRUE 75041
75039: GO 75170
75041: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75042: LD_ADDR_VAR 0 5
75046: PUSH
75047: LD_VAR 0 1
75051: PUSH
75052: LD_VAR 0 2
75056: PUSH
75057: LD_INT 3
75059: MINUS
75060: PUSH
75061: LD_INT 3
75063: PUSH
75064: EMPTY
75065: LIST
75066: LIST
75067: LIST
75068: PUSH
75069: LD_VAR 0 1
75073: PUSH
75074: LD_INT 4
75076: PLUS
75077: PUSH
75078: LD_VAR 0 2
75082: PUSH
75083: LD_INT 4
75085: PUSH
75086: EMPTY
75087: LIST
75088: LIST
75089: LIST
75090: PUSH
75091: LD_VAR 0 1
75095: PUSH
75096: LD_VAR 0 2
75100: PUSH
75101: LD_INT 4
75103: PLUS
75104: PUSH
75105: LD_INT 0
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: LIST
75112: PUSH
75113: LD_VAR 0 1
75117: PUSH
75118: LD_INT 3
75120: MINUS
75121: PUSH
75122: LD_VAR 0 2
75126: PUSH
75127: LD_INT 1
75129: PUSH
75130: EMPTY
75131: LIST
75132: LIST
75133: LIST
75134: PUSH
75135: LD_VAR 0 1
75139: PUSH
75140: LD_INT 4
75142: MINUS
75143: PUSH
75144: LD_VAR 0 2
75148: PUSH
75149: LD_INT 4
75151: MINUS
75152: PUSH
75153: LD_INT 2
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: LIST
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: LIST
75165: LIST
75166: LIST
75167: ST_TO_ADDR
// end ; 3 :
75168: GO 75590
75170: LD_INT 3
75172: DOUBLE
75173: EQUAL
75174: IFTRUE 75178
75176: GO 75311
75178: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75179: LD_ADDR_VAR 0 5
75183: PUSH
75184: LD_VAR 0 1
75188: PUSH
75189: LD_INT 3
75191: PLUS
75192: PUSH
75193: LD_VAR 0 2
75197: PUSH
75198: LD_INT 4
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: LIST
75205: PUSH
75206: LD_VAR 0 1
75210: PUSH
75211: LD_INT 4
75213: PLUS
75214: PUSH
75215: LD_VAR 0 2
75219: PUSH
75220: LD_INT 4
75222: PLUS
75223: PUSH
75224: LD_INT 5
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: LIST
75231: PUSH
75232: LD_VAR 0 1
75236: PUSH
75237: LD_INT 4
75239: MINUS
75240: PUSH
75241: LD_VAR 0 2
75245: PUSH
75246: LD_INT 1
75248: PUSH
75249: EMPTY
75250: LIST
75251: LIST
75252: LIST
75253: PUSH
75254: LD_VAR 0 1
75258: PUSH
75259: LD_VAR 0 2
75263: PUSH
75264: LD_INT 4
75266: MINUS
75267: PUSH
75268: LD_INT 3
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: LIST
75275: PUSH
75276: LD_VAR 0 1
75280: PUSH
75281: LD_INT 3
75283: MINUS
75284: PUSH
75285: LD_VAR 0 2
75289: PUSH
75290: LD_INT 3
75292: MINUS
75293: PUSH
75294: LD_INT 2
75296: PUSH
75297: EMPTY
75298: LIST
75299: LIST
75300: LIST
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: LIST
75306: LIST
75307: LIST
75308: ST_TO_ADDR
// end ; 4 :
75309: GO 75590
75311: LD_INT 4
75313: DOUBLE
75314: EQUAL
75315: IFTRUE 75319
75317: GO 75452
75319: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75320: LD_ADDR_VAR 0 5
75324: PUSH
75325: LD_VAR 0 1
75329: PUSH
75330: LD_VAR 0 2
75334: PUSH
75335: LD_INT 4
75337: PLUS
75338: PUSH
75339: LD_INT 0
75341: PUSH
75342: EMPTY
75343: LIST
75344: LIST
75345: LIST
75346: PUSH
75347: LD_VAR 0 1
75351: PUSH
75352: LD_INT 3
75354: PLUS
75355: PUSH
75356: LD_VAR 0 2
75360: PUSH
75361: LD_INT 3
75363: PLUS
75364: PUSH
75365: LD_INT 5
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: LIST
75372: PUSH
75373: LD_VAR 0 1
75377: PUSH
75378: LD_INT 4
75380: PLUS
75381: PUSH
75382: LD_VAR 0 2
75386: PUSH
75387: LD_INT 4
75389: PUSH
75390: EMPTY
75391: LIST
75392: LIST
75393: LIST
75394: PUSH
75395: LD_VAR 0 1
75399: PUSH
75400: LD_VAR 0 2
75404: PUSH
75405: LD_INT 3
75407: MINUS
75408: PUSH
75409: LD_INT 3
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: LIST
75416: PUSH
75417: LD_VAR 0 1
75421: PUSH
75422: LD_INT 4
75424: MINUS
75425: PUSH
75426: LD_VAR 0 2
75430: PUSH
75431: LD_INT 4
75433: MINUS
75434: PUSH
75435: LD_INT 2
75437: PUSH
75438: EMPTY
75439: LIST
75440: LIST
75441: LIST
75442: PUSH
75443: EMPTY
75444: LIST
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: ST_TO_ADDR
// end ; 5 :
75450: GO 75590
75452: LD_INT 5
75454: DOUBLE
75455: EQUAL
75456: IFTRUE 75460
75458: GO 75589
75460: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75461: LD_ADDR_VAR 0 5
75465: PUSH
75466: LD_VAR 0 1
75470: PUSH
75471: LD_INT 4
75473: MINUS
75474: PUSH
75475: LD_VAR 0 2
75479: PUSH
75480: LD_INT 1
75482: PUSH
75483: EMPTY
75484: LIST
75485: LIST
75486: LIST
75487: PUSH
75488: LD_VAR 0 1
75492: PUSH
75493: LD_VAR 0 2
75497: PUSH
75498: LD_INT 4
75500: MINUS
75501: PUSH
75502: LD_INT 3
75504: PUSH
75505: EMPTY
75506: LIST
75507: LIST
75508: LIST
75509: PUSH
75510: LD_VAR 0 1
75514: PUSH
75515: LD_INT 4
75517: PLUS
75518: PUSH
75519: LD_VAR 0 2
75523: PUSH
75524: LD_INT 4
75526: PLUS
75527: PUSH
75528: LD_INT 5
75530: PUSH
75531: EMPTY
75532: LIST
75533: LIST
75534: LIST
75535: PUSH
75536: LD_VAR 0 1
75540: PUSH
75541: LD_INT 3
75543: PLUS
75544: PUSH
75545: LD_VAR 0 2
75549: PUSH
75550: LD_INT 4
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: LIST
75557: PUSH
75558: LD_VAR 0 1
75562: PUSH
75563: LD_VAR 0 2
75567: PUSH
75568: LD_INT 3
75570: PLUS
75571: PUSH
75572: LD_INT 0
75574: PUSH
75575: EMPTY
75576: LIST
75577: LIST
75578: LIST
75579: PUSH
75580: EMPTY
75581: LIST
75582: LIST
75583: LIST
75584: LIST
75585: LIST
75586: ST_TO_ADDR
// end ; end ;
75587: GO 75590
75589: POP
// result := list ;
75590: LD_ADDR_VAR 0 4
75594: PUSH
75595: LD_VAR 0 5
75599: ST_TO_ADDR
// end ;
75600: LD_VAR 0 4
75604: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75605: LD_INT 0
75607: PPUSH
75608: PPUSH
75609: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75610: LD_VAR 0 1
75614: NOT
75615: PUSH
75616: LD_VAR 0 2
75620: PUSH
75621: LD_INT 1
75623: PUSH
75624: LD_INT 2
75626: PUSH
75627: LD_INT 3
75629: PUSH
75630: LD_INT 4
75632: PUSH
75633: EMPTY
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: IN
75639: NOT
75640: OR
75641: IFFALSE 75645
// exit ;
75643: GO 75728
// tmp := [ ] ;
75645: LD_ADDR_VAR 0 5
75649: PUSH
75650: EMPTY
75651: ST_TO_ADDR
// for i in units do
75652: LD_ADDR_VAR 0 4
75656: PUSH
75657: LD_VAR 0 1
75661: PUSH
75662: FOR_IN
75663: IFFALSE 75697
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75665: LD_ADDR_VAR 0 5
75669: PUSH
75670: LD_VAR 0 5
75674: PPUSH
75675: LD_VAR 0 4
75679: PPUSH
75680: LD_VAR 0 2
75684: PPUSH
75685: CALL_OW 259
75689: PPUSH
75690: CALL 77088 0 2
75694: ST_TO_ADDR
75695: GO 75662
75697: POP
75698: POP
// if not tmp then
75699: LD_VAR 0 5
75703: NOT
75704: IFFALSE 75708
// exit ;
75706: GO 75728
// result := SortListByListDesc ( units , tmp ) ;
75708: LD_ADDR_VAR 0 3
75712: PUSH
75713: LD_VAR 0 1
75717: PPUSH
75718: LD_VAR 0 5
75722: PPUSH
75723: CALL_OW 77
75727: ST_TO_ADDR
// end ;
75728: LD_VAR 0 3
75732: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75733: LD_INT 0
75735: PPUSH
75736: PPUSH
75737: PPUSH
// result := false ;
75738: LD_ADDR_VAR 0 3
75742: PUSH
75743: LD_INT 0
75745: ST_TO_ADDR
// if not building then
75746: LD_VAR 0 2
75750: NOT
75751: IFFALSE 75755
// exit ;
75753: GO 75893
// x := GetX ( building ) ;
75755: LD_ADDR_VAR 0 4
75759: PUSH
75760: LD_VAR 0 2
75764: PPUSH
75765: CALL_OW 250
75769: ST_TO_ADDR
// y := GetY ( building ) ;
75770: LD_ADDR_VAR 0 5
75774: PUSH
75775: LD_VAR 0 2
75779: PPUSH
75780: CALL_OW 251
75784: ST_TO_ADDR
// if not x or not y then
75785: LD_VAR 0 4
75789: NOT
75790: PUSH
75791: LD_VAR 0 5
75795: NOT
75796: OR
75797: IFFALSE 75801
// exit ;
75799: GO 75893
// if GetTaskList ( unit ) then
75801: LD_VAR 0 1
75805: PPUSH
75806: CALL_OW 437
75810: IFFALSE 75893
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75812: LD_STRING e
75814: PUSH
75815: LD_VAR 0 1
75819: PPUSH
75820: CALL_OW 437
75824: PUSH
75825: LD_INT 1
75827: ARRAY
75828: PUSH
75829: LD_INT 1
75831: ARRAY
75832: EQUAL
75833: PUSH
75834: LD_VAR 0 4
75838: PUSH
75839: LD_VAR 0 1
75843: PPUSH
75844: CALL_OW 437
75848: PUSH
75849: LD_INT 1
75851: ARRAY
75852: PUSH
75853: LD_INT 2
75855: ARRAY
75856: EQUAL
75857: AND
75858: PUSH
75859: LD_VAR 0 5
75863: PUSH
75864: LD_VAR 0 1
75868: PPUSH
75869: CALL_OW 437
75873: PUSH
75874: LD_INT 1
75876: ARRAY
75877: PUSH
75878: LD_INT 3
75880: ARRAY
75881: EQUAL
75882: AND
75883: IFFALSE 75893
// result := true end ;
75885: LD_ADDR_VAR 0 3
75889: PUSH
75890: LD_INT 1
75892: ST_TO_ADDR
// end ;
75893: LD_VAR 0 3
75897: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75898: LD_INT 0
75900: PPUSH
// result := false ;
75901: LD_ADDR_VAR 0 4
75905: PUSH
75906: LD_INT 0
75908: ST_TO_ADDR
// if GetTaskList ( unit ) then
75909: LD_VAR 0 1
75913: PPUSH
75914: CALL_OW 437
75918: IFFALSE 76001
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75920: LD_STRING M
75922: PUSH
75923: LD_VAR 0 1
75927: PPUSH
75928: CALL_OW 437
75932: PUSH
75933: LD_INT 1
75935: ARRAY
75936: PUSH
75937: LD_INT 1
75939: ARRAY
75940: EQUAL
75941: PUSH
75942: LD_VAR 0 2
75946: PUSH
75947: LD_VAR 0 1
75951: PPUSH
75952: CALL_OW 437
75956: PUSH
75957: LD_INT 1
75959: ARRAY
75960: PUSH
75961: LD_INT 2
75963: ARRAY
75964: EQUAL
75965: AND
75966: PUSH
75967: LD_VAR 0 3
75971: PUSH
75972: LD_VAR 0 1
75976: PPUSH
75977: CALL_OW 437
75981: PUSH
75982: LD_INT 1
75984: ARRAY
75985: PUSH
75986: LD_INT 3
75988: ARRAY
75989: EQUAL
75990: AND
75991: IFFALSE 76001
// result := true ;
75993: LD_ADDR_VAR 0 4
75997: PUSH
75998: LD_INT 1
76000: ST_TO_ADDR
// end ; end ;
76001: LD_VAR 0 4
76005: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76006: LD_INT 0
76008: PPUSH
76009: PPUSH
76010: PPUSH
76011: PPUSH
// if not unit or not area then
76012: LD_VAR 0 1
76016: NOT
76017: PUSH
76018: LD_VAR 0 2
76022: NOT
76023: OR
76024: IFFALSE 76028
// exit ;
76026: GO 76191
// tmp := AreaToList ( area , i ) ;
76028: LD_ADDR_VAR 0 6
76032: PUSH
76033: LD_VAR 0 2
76037: PPUSH
76038: LD_VAR 0 5
76042: PPUSH
76043: CALL_OW 517
76047: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76048: LD_ADDR_VAR 0 5
76052: PUSH
76053: DOUBLE
76054: LD_INT 1
76056: DEC
76057: ST_TO_ADDR
76058: LD_VAR 0 6
76062: PUSH
76063: LD_INT 1
76065: ARRAY
76066: PUSH
76067: FOR_TO
76068: IFFALSE 76189
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76070: LD_ADDR_VAR 0 7
76074: PUSH
76075: LD_VAR 0 6
76079: PUSH
76080: LD_INT 1
76082: ARRAY
76083: PUSH
76084: LD_VAR 0 5
76088: ARRAY
76089: PUSH
76090: LD_VAR 0 6
76094: PUSH
76095: LD_INT 2
76097: ARRAY
76098: PUSH
76099: LD_VAR 0 5
76103: ARRAY
76104: PUSH
76105: EMPTY
76106: LIST
76107: LIST
76108: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
76109: LD_INT 92
76111: PUSH
76112: LD_VAR 0 7
76116: PUSH
76117: LD_INT 1
76119: ARRAY
76120: PUSH
76121: LD_VAR 0 7
76125: PUSH
76126: LD_INT 2
76128: ARRAY
76129: PUSH
76130: LD_INT 3
76132: PUSH
76133: EMPTY
76134: LIST
76135: LIST
76136: LIST
76137: LIST
76138: PPUSH
76139: CALL_OW 69
76143: PUSH
76144: LD_INT 0
76146: EQUAL
76147: IFFALSE 76187
// begin PlaceUnitArea ( unit , area , mode ) ;
76149: LD_VAR 0 1
76153: PPUSH
76154: LD_VAR 0 2
76158: PPUSH
76159: LD_VAR 0 3
76163: PPUSH
76164: CALL_OW 49
// result := IsPlaced ( unit ) ;
76168: LD_ADDR_VAR 0 4
76172: PUSH
76173: LD_VAR 0 1
76177: PPUSH
76178: CALL_OW 305
76182: ST_TO_ADDR
// exit ;
76183: POP
76184: POP
76185: GO 76191
// end ; end ;
76187: GO 76067
76189: POP
76190: POP
// end ;
76191: LD_VAR 0 4
76195: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76196: LD_INT 0
76198: PPUSH
76199: PPUSH
76200: PPUSH
// if not side or side > 8 then
76201: LD_VAR 0 1
76205: NOT
76206: PUSH
76207: LD_VAR 0 1
76211: PUSH
76212: LD_INT 8
76214: GREATER
76215: OR
76216: IFFALSE 76220
// exit ;
76218: GO 76407
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76220: LD_ADDR_VAR 0 4
76224: PUSH
76225: LD_INT 22
76227: PUSH
76228: LD_VAR 0 1
76232: PUSH
76233: EMPTY
76234: LIST
76235: LIST
76236: PUSH
76237: LD_INT 21
76239: PUSH
76240: LD_INT 3
76242: PUSH
76243: EMPTY
76244: LIST
76245: LIST
76246: PUSH
76247: EMPTY
76248: LIST
76249: LIST
76250: PPUSH
76251: CALL_OW 69
76255: ST_TO_ADDR
// if not tmp then
76256: LD_VAR 0 4
76260: NOT
76261: IFFALSE 76265
// exit ;
76263: GO 76407
// enable_addtolog := true ;
76265: LD_ADDR_OWVAR 81
76269: PUSH
76270: LD_INT 1
76272: ST_TO_ADDR
// AddToLog ( [ ) ;
76273: LD_STRING [
76275: PPUSH
76276: CALL_OW 561
// for i in tmp do
76280: LD_ADDR_VAR 0 3
76284: PUSH
76285: LD_VAR 0 4
76289: PUSH
76290: FOR_IN
76291: IFFALSE 76398
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76293: LD_STRING [
76295: PUSH
76296: LD_VAR 0 3
76300: PPUSH
76301: CALL_OW 266
76305: STR
76306: PUSH
76307: LD_STRING , 
76309: STR
76310: PUSH
76311: LD_VAR 0 3
76315: PPUSH
76316: CALL_OW 250
76320: STR
76321: PUSH
76322: LD_STRING , 
76324: STR
76325: PUSH
76326: LD_VAR 0 3
76330: PPUSH
76331: CALL_OW 251
76335: STR
76336: PUSH
76337: LD_STRING , 
76339: STR
76340: PUSH
76341: LD_VAR 0 3
76345: PPUSH
76346: CALL_OW 254
76350: STR
76351: PUSH
76352: LD_STRING , 
76354: STR
76355: PUSH
76356: LD_VAR 0 3
76360: PPUSH
76361: LD_INT 1
76363: PPUSH
76364: CALL_OW 268
76368: STR
76369: PUSH
76370: LD_STRING , 
76372: STR
76373: PUSH
76374: LD_VAR 0 3
76378: PPUSH
76379: LD_INT 2
76381: PPUSH
76382: CALL_OW 268
76386: STR
76387: PUSH
76388: LD_STRING ],
76390: STR
76391: PPUSH
76392: CALL_OW 561
// end ;
76396: GO 76290
76398: POP
76399: POP
// AddToLog ( ]; ) ;
76400: LD_STRING ];
76402: PPUSH
76403: CALL_OW 561
// end ;
76407: LD_VAR 0 2
76411: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76412: LD_INT 0
76414: PPUSH
76415: PPUSH
76416: PPUSH
76417: PPUSH
76418: PPUSH
// if not area or not rate or not max then
76419: LD_VAR 0 1
76423: NOT
76424: PUSH
76425: LD_VAR 0 2
76429: NOT
76430: OR
76431: PUSH
76432: LD_VAR 0 4
76436: NOT
76437: OR
76438: IFFALSE 76442
// exit ;
76440: GO 76631
// while 1 do
76442: LD_INT 1
76444: IFFALSE 76631
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76446: LD_ADDR_VAR 0 9
76450: PUSH
76451: LD_VAR 0 1
76455: PPUSH
76456: LD_INT 1
76458: PPUSH
76459: CALL_OW 287
76463: PUSH
76464: LD_INT 10
76466: MUL
76467: ST_TO_ADDR
// r := rate / 10 ;
76468: LD_ADDR_VAR 0 7
76472: PUSH
76473: LD_VAR 0 2
76477: PUSH
76478: LD_INT 10
76480: DIVREAL
76481: ST_TO_ADDR
// time := 1 1$00 ;
76482: LD_ADDR_VAR 0 8
76486: PUSH
76487: LD_INT 2100
76489: ST_TO_ADDR
// if amount < min then
76490: LD_VAR 0 9
76494: PUSH
76495: LD_VAR 0 3
76499: LESS
76500: IFFALSE 76518
// r := r * 2 else
76502: LD_ADDR_VAR 0 7
76506: PUSH
76507: LD_VAR 0 7
76511: PUSH
76512: LD_INT 2
76514: MUL
76515: ST_TO_ADDR
76516: GO 76544
// if amount > max then
76518: LD_VAR 0 9
76522: PUSH
76523: LD_VAR 0 4
76527: GREATER
76528: IFFALSE 76544
// r := r / 2 ;
76530: LD_ADDR_VAR 0 7
76534: PUSH
76535: LD_VAR 0 7
76539: PUSH
76540: LD_INT 2
76542: DIVREAL
76543: ST_TO_ADDR
// time := time / r ;
76544: LD_ADDR_VAR 0 8
76548: PUSH
76549: LD_VAR 0 8
76553: PUSH
76554: LD_VAR 0 7
76558: DIVREAL
76559: ST_TO_ADDR
// if time < 0 then
76560: LD_VAR 0 8
76564: PUSH
76565: LD_INT 0
76567: LESS
76568: IFFALSE 76585
// time := time * - 1 ;
76570: LD_ADDR_VAR 0 8
76574: PUSH
76575: LD_VAR 0 8
76579: PUSH
76580: LD_INT 1
76582: NEG
76583: MUL
76584: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76585: LD_VAR 0 8
76589: PUSH
76590: LD_INT 35
76592: PPUSH
76593: LD_INT 875
76595: PPUSH
76596: CALL_OW 12
76600: PLUS
76601: PPUSH
76602: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76606: LD_INT 1
76608: PPUSH
76609: LD_INT 5
76611: PPUSH
76612: CALL_OW 12
76616: PPUSH
76617: LD_VAR 0 1
76621: PPUSH
76622: LD_INT 1
76624: PPUSH
76625: CALL_OW 55
// end ;
76629: GO 76442
// end ;
76631: LD_VAR 0 5
76635: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76636: LD_INT 0
76638: PPUSH
76639: PPUSH
76640: PPUSH
76641: PPUSH
76642: PPUSH
76643: PPUSH
76644: PPUSH
76645: PPUSH
// if not turrets or not factories then
76646: LD_VAR 0 1
76650: NOT
76651: PUSH
76652: LD_VAR 0 2
76656: NOT
76657: OR
76658: IFFALSE 76662
// exit ;
76660: GO 76969
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76662: LD_ADDR_VAR 0 10
76666: PUSH
76667: LD_INT 5
76669: PUSH
76670: LD_INT 6
76672: PUSH
76673: EMPTY
76674: LIST
76675: LIST
76676: PUSH
76677: LD_INT 2
76679: PUSH
76680: LD_INT 4
76682: PUSH
76683: EMPTY
76684: LIST
76685: LIST
76686: PUSH
76687: LD_INT 3
76689: PUSH
76690: LD_INT 5
76692: PUSH
76693: EMPTY
76694: LIST
76695: LIST
76696: PUSH
76697: EMPTY
76698: LIST
76699: LIST
76700: LIST
76701: PUSH
76702: LD_INT 24
76704: PUSH
76705: LD_INT 25
76707: PUSH
76708: EMPTY
76709: LIST
76710: LIST
76711: PUSH
76712: LD_INT 23
76714: PUSH
76715: LD_INT 27
76717: PUSH
76718: EMPTY
76719: LIST
76720: LIST
76721: PUSH
76722: EMPTY
76723: LIST
76724: LIST
76725: PUSH
76726: LD_INT 42
76728: PUSH
76729: LD_INT 43
76731: PUSH
76732: EMPTY
76733: LIST
76734: LIST
76735: PUSH
76736: LD_INT 44
76738: PUSH
76739: LD_INT 46
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: PUSH
76746: LD_INT 45
76748: PUSH
76749: LD_INT 47
76751: PUSH
76752: EMPTY
76753: LIST
76754: LIST
76755: PUSH
76756: EMPTY
76757: LIST
76758: LIST
76759: LIST
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: LIST
76765: ST_TO_ADDR
// result := [ ] ;
76766: LD_ADDR_VAR 0 3
76770: PUSH
76771: EMPTY
76772: ST_TO_ADDR
// for i in turrets do
76773: LD_ADDR_VAR 0 4
76777: PUSH
76778: LD_VAR 0 1
76782: PUSH
76783: FOR_IN
76784: IFFALSE 76967
// begin nat := GetNation ( i ) ;
76786: LD_ADDR_VAR 0 7
76790: PUSH
76791: LD_VAR 0 4
76795: PPUSH
76796: CALL_OW 248
76800: ST_TO_ADDR
// weapon := 0 ;
76801: LD_ADDR_VAR 0 8
76805: PUSH
76806: LD_INT 0
76808: ST_TO_ADDR
// if not nat then
76809: LD_VAR 0 7
76813: NOT
76814: IFFALSE 76818
// continue ;
76816: GO 76783
// for j in list [ nat ] do
76818: LD_ADDR_VAR 0 5
76822: PUSH
76823: LD_VAR 0 10
76827: PUSH
76828: LD_VAR 0 7
76832: ARRAY
76833: PUSH
76834: FOR_IN
76835: IFFALSE 76876
// if GetBWeapon ( i ) = j [ 1 ] then
76837: LD_VAR 0 4
76841: PPUSH
76842: CALL_OW 269
76846: PUSH
76847: LD_VAR 0 5
76851: PUSH
76852: LD_INT 1
76854: ARRAY
76855: EQUAL
76856: IFFALSE 76874
// begin weapon := j [ 2 ] ;
76858: LD_ADDR_VAR 0 8
76862: PUSH
76863: LD_VAR 0 5
76867: PUSH
76868: LD_INT 2
76870: ARRAY
76871: ST_TO_ADDR
// break ;
76872: GO 76876
// end ;
76874: GO 76834
76876: POP
76877: POP
// if not weapon then
76878: LD_VAR 0 8
76882: NOT
76883: IFFALSE 76887
// continue ;
76885: GO 76783
// for k in factories do
76887: LD_ADDR_VAR 0 6
76891: PUSH
76892: LD_VAR 0 2
76896: PUSH
76897: FOR_IN
76898: IFFALSE 76963
// begin weapons := AvailableWeaponList ( k ) ;
76900: LD_ADDR_VAR 0 9
76904: PUSH
76905: LD_VAR 0 6
76909: PPUSH
76910: CALL_OW 478
76914: ST_TO_ADDR
// if not weapons then
76915: LD_VAR 0 9
76919: NOT
76920: IFFALSE 76924
// continue ;
76922: GO 76897
// if weapon in weapons then
76924: LD_VAR 0 8
76928: PUSH
76929: LD_VAR 0 9
76933: IN
76934: IFFALSE 76961
// begin result := [ i , weapon ] ;
76936: LD_ADDR_VAR 0 3
76940: PUSH
76941: LD_VAR 0 4
76945: PUSH
76946: LD_VAR 0 8
76950: PUSH
76951: EMPTY
76952: LIST
76953: LIST
76954: ST_TO_ADDR
// exit ;
76955: POP
76956: POP
76957: POP
76958: POP
76959: GO 76969
// end ; end ;
76961: GO 76897
76963: POP
76964: POP
// end ;
76965: GO 76783
76967: POP
76968: POP
// end ;
76969: LD_VAR 0 3
76973: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76974: LD_INT 0
76976: PPUSH
// if not side or side > 8 then
76977: LD_VAR 0 3
76981: NOT
76982: PUSH
76983: LD_VAR 0 3
76987: PUSH
76988: LD_INT 8
76990: GREATER
76991: OR
76992: IFFALSE 76996
// exit ;
76994: GO 77055
// if not range then
76996: LD_VAR 0 4
77000: NOT
77001: IFFALSE 77012
// range := - 12 ;
77003: LD_ADDR_VAR 0 4
77007: PUSH
77008: LD_INT 12
77010: NEG
77011: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77012: LD_VAR 0 1
77016: PPUSH
77017: LD_VAR 0 2
77021: PPUSH
77022: LD_VAR 0 3
77026: PPUSH
77027: LD_VAR 0 4
77031: PPUSH
77032: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77036: LD_VAR 0 1
77040: PPUSH
77041: LD_VAR 0 2
77045: PPUSH
77046: LD_VAR 0 3
77050: PPUSH
77051: CALL_OW 331
// end ;
77055: LD_VAR 0 5
77059: RET
// export function Video ( mode ) ; begin
77060: LD_INT 0
77062: PPUSH
// ingame_video = mode ;
77063: LD_ADDR_OWVAR 52
77067: PUSH
77068: LD_VAR 0 1
77072: ST_TO_ADDR
// interface_hidden = mode ;
77073: LD_ADDR_OWVAR 54
77077: PUSH
77078: LD_VAR 0 1
77082: ST_TO_ADDR
// end ;
77083: LD_VAR 0 2
77087: RET
// export function Join ( array , element ) ; begin
77088: LD_INT 0
77090: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77091: LD_ADDR_VAR 0 3
77095: PUSH
77096: LD_VAR 0 1
77100: PPUSH
77101: LD_VAR 0 1
77105: PUSH
77106: LD_INT 1
77108: PLUS
77109: PPUSH
77110: LD_VAR 0 2
77114: PPUSH
77115: CALL_OW 1
77119: ST_TO_ADDR
// end ;
77120: LD_VAR 0 3
77124: RET
// export function JoinUnion ( array , element ) ; begin
77125: LD_INT 0
77127: PPUSH
// result := array union element ;
77128: LD_ADDR_VAR 0 3
77132: PUSH
77133: LD_VAR 0 1
77137: PUSH
77138: LD_VAR 0 2
77142: UNION
77143: ST_TO_ADDR
// end ;
77144: LD_VAR 0 3
77148: RET
// export function GetBehemoths ( side ) ; begin
77149: LD_INT 0
77151: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77152: LD_ADDR_VAR 0 2
77156: PUSH
77157: LD_INT 22
77159: PUSH
77160: LD_VAR 0 1
77164: PUSH
77165: EMPTY
77166: LIST
77167: LIST
77168: PUSH
77169: LD_INT 31
77171: PUSH
77172: LD_INT 25
77174: PUSH
77175: EMPTY
77176: LIST
77177: LIST
77178: PUSH
77179: EMPTY
77180: LIST
77181: LIST
77182: PPUSH
77183: CALL_OW 69
77187: ST_TO_ADDR
// end ;
77188: LD_VAR 0 2
77192: RET
// export function Shuffle ( array ) ; var i , index ; begin
77193: LD_INT 0
77195: PPUSH
77196: PPUSH
77197: PPUSH
// result := [ ] ;
77198: LD_ADDR_VAR 0 2
77202: PUSH
77203: EMPTY
77204: ST_TO_ADDR
// if not array then
77205: LD_VAR 0 1
77209: NOT
77210: IFFALSE 77214
// exit ;
77212: GO 77313
// Randomize ;
77214: CALL_OW 10
// for i = array downto 1 do
77218: LD_ADDR_VAR 0 3
77222: PUSH
77223: DOUBLE
77224: LD_VAR 0 1
77228: INC
77229: ST_TO_ADDR
77230: LD_INT 1
77232: PUSH
77233: FOR_DOWNTO
77234: IFFALSE 77311
// begin index := rand ( 1 , array ) ;
77236: LD_ADDR_VAR 0 4
77240: PUSH
77241: LD_INT 1
77243: PPUSH
77244: LD_VAR 0 1
77248: PPUSH
77249: CALL_OW 12
77253: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77254: LD_ADDR_VAR 0 2
77258: PUSH
77259: LD_VAR 0 2
77263: PPUSH
77264: LD_VAR 0 2
77268: PUSH
77269: LD_INT 1
77271: PLUS
77272: PPUSH
77273: LD_VAR 0 1
77277: PUSH
77278: LD_VAR 0 4
77282: ARRAY
77283: PPUSH
77284: CALL_OW 2
77288: ST_TO_ADDR
// array := Delete ( array , index ) ;
77289: LD_ADDR_VAR 0 1
77293: PUSH
77294: LD_VAR 0 1
77298: PPUSH
77299: LD_VAR 0 4
77303: PPUSH
77304: CALL_OW 3
77308: ST_TO_ADDR
// end ;
77309: GO 77233
77311: POP
77312: POP
// end ;
77313: LD_VAR 0 2
77317: RET
// export function GetBaseMaterials ( base ) ; begin
77318: LD_INT 0
77320: PPUSH
// result := [ 0 , 0 , 0 ] ;
77321: LD_ADDR_VAR 0 2
77325: PUSH
77326: LD_INT 0
77328: PUSH
77329: LD_INT 0
77331: PUSH
77332: LD_INT 0
77334: PUSH
77335: EMPTY
77336: LIST
77337: LIST
77338: LIST
77339: ST_TO_ADDR
// if not base then
77340: LD_VAR 0 1
77344: NOT
77345: IFFALSE 77349
// exit ;
77347: GO 77398
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77349: LD_ADDR_VAR 0 2
77353: PUSH
77354: LD_VAR 0 1
77358: PPUSH
77359: LD_INT 1
77361: PPUSH
77362: CALL_OW 275
77366: PUSH
77367: LD_VAR 0 1
77371: PPUSH
77372: LD_INT 2
77374: PPUSH
77375: CALL_OW 275
77379: PUSH
77380: LD_VAR 0 1
77384: PPUSH
77385: LD_INT 3
77387: PPUSH
77388: CALL_OW 275
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: LIST
77397: ST_TO_ADDR
// end ;
77398: LD_VAR 0 2
77402: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77403: LD_INT 0
77405: PPUSH
77406: PPUSH
// result := array ;
77407: LD_ADDR_VAR 0 3
77411: PUSH
77412: LD_VAR 0 1
77416: ST_TO_ADDR
// if size >= result then
77417: LD_VAR 0 2
77421: PUSH
77422: LD_VAR 0 3
77426: GREATEREQUAL
77427: IFFALSE 77431
// exit ;
77429: GO 77481
// if size then
77431: LD_VAR 0 2
77435: IFFALSE 77481
// for i := array downto size do
77437: LD_ADDR_VAR 0 4
77441: PUSH
77442: DOUBLE
77443: LD_VAR 0 1
77447: INC
77448: ST_TO_ADDR
77449: LD_VAR 0 2
77453: PUSH
77454: FOR_DOWNTO
77455: IFFALSE 77479
// result := Delete ( result , result ) ;
77457: LD_ADDR_VAR 0 3
77461: PUSH
77462: LD_VAR 0 3
77466: PPUSH
77467: LD_VAR 0 3
77471: PPUSH
77472: CALL_OW 3
77476: ST_TO_ADDR
77477: GO 77454
77479: POP
77480: POP
// end ;
77481: LD_VAR 0 3
77485: RET
// export function ComExit ( unit ) ; var tmp ; begin
77486: LD_INT 0
77488: PPUSH
77489: PPUSH
// if not IsInUnit ( unit ) then
77490: LD_VAR 0 1
77494: PPUSH
77495: CALL_OW 310
77499: NOT
77500: IFFALSE 77504
// exit ;
77502: GO 77564
// tmp := IsInUnit ( unit ) ;
77504: LD_ADDR_VAR 0 3
77508: PUSH
77509: LD_VAR 0 1
77513: PPUSH
77514: CALL_OW 310
77518: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77519: LD_VAR 0 3
77523: PPUSH
77524: CALL_OW 247
77528: PUSH
77529: LD_INT 2
77531: EQUAL
77532: IFFALSE 77545
// ComExitVehicle ( unit ) else
77534: LD_VAR 0 1
77538: PPUSH
77539: CALL_OW 121
77543: GO 77554
// ComExitBuilding ( unit ) ;
77545: LD_VAR 0 1
77549: PPUSH
77550: CALL_OW 122
// result := tmp ;
77554: LD_ADDR_VAR 0 2
77558: PUSH
77559: LD_VAR 0 3
77563: ST_TO_ADDR
// end ;
77564: LD_VAR 0 2
77568: RET
// export function ComExitAll ( units ) ; var i ; begin
77569: LD_INT 0
77571: PPUSH
77572: PPUSH
// if not units then
77573: LD_VAR 0 1
77577: NOT
77578: IFFALSE 77582
// exit ;
77580: GO 77608
// for i in units do
77582: LD_ADDR_VAR 0 3
77586: PUSH
77587: LD_VAR 0 1
77591: PUSH
77592: FOR_IN
77593: IFFALSE 77606
// ComExit ( i ) ;
77595: LD_VAR 0 3
77599: PPUSH
77600: CALL 77486 0 1
77604: GO 77592
77606: POP
77607: POP
// end ;
77608: LD_VAR 0 2
77612: RET
// export function ResetHc ; begin
77613: LD_INT 0
77615: PPUSH
// InitHc ;
77616: CALL_OW 19
// hc_importance := 0 ;
77620: LD_ADDR_OWVAR 32
77624: PUSH
77625: LD_INT 0
77627: ST_TO_ADDR
// end ;
77628: LD_VAR 0 1
77632: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77633: LD_INT 0
77635: PPUSH
77636: PPUSH
77637: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77638: LD_ADDR_VAR 0 6
77642: PUSH
77643: LD_VAR 0 1
77647: PUSH
77648: LD_VAR 0 3
77652: PLUS
77653: PUSH
77654: LD_INT 2
77656: DIV
77657: ST_TO_ADDR
// if _x < 0 then
77658: LD_VAR 0 6
77662: PUSH
77663: LD_INT 0
77665: LESS
77666: IFFALSE 77683
// _x := _x * - 1 ;
77668: LD_ADDR_VAR 0 6
77672: PUSH
77673: LD_VAR 0 6
77677: PUSH
77678: LD_INT 1
77680: NEG
77681: MUL
77682: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77683: LD_ADDR_VAR 0 7
77687: PUSH
77688: LD_VAR 0 2
77692: PUSH
77693: LD_VAR 0 4
77697: PLUS
77698: PUSH
77699: LD_INT 2
77701: DIV
77702: ST_TO_ADDR
// if _y < 0 then
77703: LD_VAR 0 7
77707: PUSH
77708: LD_INT 0
77710: LESS
77711: IFFALSE 77728
// _y := _y * - 1 ;
77713: LD_ADDR_VAR 0 7
77717: PUSH
77718: LD_VAR 0 7
77722: PUSH
77723: LD_INT 1
77725: NEG
77726: MUL
77727: ST_TO_ADDR
// result := [ _x , _y ] ;
77728: LD_ADDR_VAR 0 5
77732: PUSH
77733: LD_VAR 0 6
77737: PUSH
77738: LD_VAR 0 7
77742: PUSH
77743: EMPTY
77744: LIST
77745: LIST
77746: ST_TO_ADDR
// end ;
77747: LD_VAR 0 5
77751: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77752: LD_INT 0
77754: PPUSH
77755: PPUSH
77756: PPUSH
77757: PPUSH
// task := GetTaskList ( unit ) ;
77758: LD_ADDR_VAR 0 7
77762: PUSH
77763: LD_VAR 0 1
77767: PPUSH
77768: CALL_OW 437
77772: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77773: LD_VAR 0 7
77777: NOT
77778: PUSH
77779: LD_VAR 0 1
77783: PPUSH
77784: LD_VAR 0 2
77788: PPUSH
77789: CALL_OW 308
77793: NOT
77794: AND
77795: IFFALSE 77799
// exit ;
77797: GO 77917
// if IsInArea ( unit , area ) then
77799: LD_VAR 0 1
77803: PPUSH
77804: LD_VAR 0 2
77808: PPUSH
77809: CALL_OW 308
77813: IFFALSE 77831
// begin ComMoveToArea ( unit , goAway ) ;
77815: LD_VAR 0 1
77819: PPUSH
77820: LD_VAR 0 3
77824: PPUSH
77825: CALL_OW 113
// exit ;
77829: GO 77917
// end ; if task [ 1 ] [ 1 ] <> M then
77831: LD_VAR 0 7
77835: PUSH
77836: LD_INT 1
77838: ARRAY
77839: PUSH
77840: LD_INT 1
77842: ARRAY
77843: PUSH
77844: LD_STRING M
77846: NONEQUAL
77847: IFFALSE 77851
// exit ;
77849: GO 77917
// x := task [ 1 ] [ 2 ] ;
77851: LD_ADDR_VAR 0 5
77855: PUSH
77856: LD_VAR 0 7
77860: PUSH
77861: LD_INT 1
77863: ARRAY
77864: PUSH
77865: LD_INT 2
77867: ARRAY
77868: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77869: LD_ADDR_VAR 0 6
77873: PUSH
77874: LD_VAR 0 7
77878: PUSH
77879: LD_INT 1
77881: ARRAY
77882: PUSH
77883: LD_INT 3
77885: ARRAY
77886: ST_TO_ADDR
// if InArea ( x , y , area ) then
77887: LD_VAR 0 5
77891: PPUSH
77892: LD_VAR 0 6
77896: PPUSH
77897: LD_VAR 0 2
77901: PPUSH
77902: CALL_OW 309
77906: IFFALSE 77917
// ComStop ( unit ) ;
77908: LD_VAR 0 1
77912: PPUSH
77913: CALL_OW 141
// end ;
77917: LD_VAR 0 4
77921: RET
// export function Abs ( value ) ; begin
77922: LD_INT 0
77924: PPUSH
// result := value ;
77925: LD_ADDR_VAR 0 2
77929: PUSH
77930: LD_VAR 0 1
77934: ST_TO_ADDR
// if value < 0 then
77935: LD_VAR 0 1
77939: PUSH
77940: LD_INT 0
77942: LESS
77943: IFFALSE 77960
// result := value * - 1 ;
77945: LD_ADDR_VAR 0 2
77949: PUSH
77950: LD_VAR 0 1
77954: PUSH
77955: LD_INT 1
77957: NEG
77958: MUL
77959: ST_TO_ADDR
// end ;
77960: LD_VAR 0 2
77964: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77965: LD_INT 0
77967: PPUSH
77968: PPUSH
77969: PPUSH
77970: PPUSH
77971: PPUSH
77972: PPUSH
77973: PPUSH
77974: PPUSH
// if not unit or not building then
77975: LD_VAR 0 1
77979: NOT
77980: PUSH
77981: LD_VAR 0 2
77985: NOT
77986: OR
77987: IFFALSE 77991
// exit ;
77989: GO 78217
// x := GetX ( building ) ;
77991: LD_ADDR_VAR 0 4
77995: PUSH
77996: LD_VAR 0 2
78000: PPUSH
78001: CALL_OW 250
78005: ST_TO_ADDR
// y := GetY ( building ) ;
78006: LD_ADDR_VAR 0 6
78010: PUSH
78011: LD_VAR 0 2
78015: PPUSH
78016: CALL_OW 251
78020: ST_TO_ADDR
// d := GetDir ( building ) ;
78021: LD_ADDR_VAR 0 8
78025: PUSH
78026: LD_VAR 0 2
78030: PPUSH
78031: CALL_OW 254
78035: ST_TO_ADDR
// r := 4 ;
78036: LD_ADDR_VAR 0 9
78040: PUSH
78041: LD_INT 4
78043: ST_TO_ADDR
// for i := 1 to 5 do
78044: LD_ADDR_VAR 0 10
78048: PUSH
78049: DOUBLE
78050: LD_INT 1
78052: DEC
78053: ST_TO_ADDR
78054: LD_INT 5
78056: PUSH
78057: FOR_TO
78058: IFFALSE 78215
// begin _x := ShiftX ( x , d , r + i ) ;
78060: LD_ADDR_VAR 0 5
78064: PUSH
78065: LD_VAR 0 4
78069: PPUSH
78070: LD_VAR 0 8
78074: PPUSH
78075: LD_VAR 0 9
78079: PUSH
78080: LD_VAR 0 10
78084: PLUS
78085: PPUSH
78086: CALL_OW 272
78090: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78091: LD_ADDR_VAR 0 7
78095: PUSH
78096: LD_VAR 0 6
78100: PPUSH
78101: LD_VAR 0 8
78105: PPUSH
78106: LD_VAR 0 9
78110: PUSH
78111: LD_VAR 0 10
78115: PLUS
78116: PPUSH
78117: CALL_OW 273
78121: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78122: LD_VAR 0 5
78126: PPUSH
78127: LD_VAR 0 7
78131: PPUSH
78132: CALL_OW 488
78136: PUSH
78137: LD_VAR 0 5
78141: PPUSH
78142: LD_VAR 0 7
78146: PPUSH
78147: CALL_OW 428
78151: PPUSH
78152: CALL_OW 247
78156: PUSH
78157: LD_INT 3
78159: PUSH
78160: LD_INT 2
78162: PUSH
78163: EMPTY
78164: LIST
78165: LIST
78166: IN
78167: NOT
78168: AND
78169: IFFALSE 78213
// begin ComMoveXY ( unit , _x , _y ) ;
78171: LD_VAR 0 1
78175: PPUSH
78176: LD_VAR 0 5
78180: PPUSH
78181: LD_VAR 0 7
78185: PPUSH
78186: CALL_OW 111
// result := [ _x , _y ] ;
78190: LD_ADDR_VAR 0 3
78194: PUSH
78195: LD_VAR 0 5
78199: PUSH
78200: LD_VAR 0 7
78204: PUSH
78205: EMPTY
78206: LIST
78207: LIST
78208: ST_TO_ADDR
// exit ;
78209: POP
78210: POP
78211: GO 78217
// end ; end ;
78213: GO 78057
78215: POP
78216: POP
// end ;
78217: LD_VAR 0 3
78221: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78222: LD_INT 0
78224: PPUSH
78225: PPUSH
78226: PPUSH
// result := 0 ;
78227: LD_ADDR_VAR 0 3
78231: PUSH
78232: LD_INT 0
78234: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78235: LD_VAR 0 1
78239: PUSH
78240: LD_INT 0
78242: LESS
78243: PUSH
78244: LD_VAR 0 1
78248: PUSH
78249: LD_INT 8
78251: GREATER
78252: OR
78253: PUSH
78254: LD_VAR 0 2
78258: PUSH
78259: LD_INT 0
78261: LESS
78262: OR
78263: PUSH
78264: LD_VAR 0 2
78268: PUSH
78269: LD_INT 8
78271: GREATER
78272: OR
78273: IFFALSE 78277
// exit ;
78275: GO 78352
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78277: LD_ADDR_VAR 0 4
78281: PUSH
78282: LD_INT 22
78284: PUSH
78285: LD_VAR 0 2
78289: PUSH
78290: EMPTY
78291: LIST
78292: LIST
78293: PPUSH
78294: CALL_OW 69
78298: PUSH
78299: FOR_IN
78300: IFFALSE 78350
// begin un := UnitShoot ( i ) ;
78302: LD_ADDR_VAR 0 5
78306: PUSH
78307: LD_VAR 0 4
78311: PPUSH
78312: CALL_OW 504
78316: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78317: LD_VAR 0 5
78321: PPUSH
78322: CALL_OW 255
78326: PUSH
78327: LD_VAR 0 1
78331: EQUAL
78332: IFFALSE 78348
// begin result := un ;
78334: LD_ADDR_VAR 0 3
78338: PUSH
78339: LD_VAR 0 5
78343: ST_TO_ADDR
// exit ;
78344: POP
78345: POP
78346: GO 78352
// end ; end ;
78348: GO 78299
78350: POP
78351: POP
// end ;
78352: LD_VAR 0 3
78356: RET
// export function GetCargoBay ( units ) ; begin
78357: LD_INT 0
78359: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78360: LD_ADDR_VAR 0 2
78364: PUSH
78365: LD_VAR 0 1
78369: PPUSH
78370: LD_INT 2
78372: PUSH
78373: LD_INT 34
78375: PUSH
78376: LD_INT 12
78378: PUSH
78379: EMPTY
78380: LIST
78381: LIST
78382: PUSH
78383: LD_INT 34
78385: PUSH
78386: LD_INT 51
78388: PUSH
78389: EMPTY
78390: LIST
78391: LIST
78392: PUSH
78393: LD_INT 34
78395: PUSH
78396: LD_INT 32
78398: PUSH
78399: EMPTY
78400: LIST
78401: LIST
78402: PUSH
78403: LD_INT 34
78405: PUSH
78406: LD_INT 89
78408: PUSH
78409: EMPTY
78410: LIST
78411: LIST
78412: PUSH
78413: EMPTY
78414: LIST
78415: LIST
78416: LIST
78417: LIST
78418: LIST
78419: PPUSH
78420: CALL_OW 72
78424: ST_TO_ADDR
// end ;
78425: LD_VAR 0 2
78429: RET
// export function Negate ( value ) ; begin
78430: LD_INT 0
78432: PPUSH
// result := not value ;
78433: LD_ADDR_VAR 0 2
78437: PUSH
78438: LD_VAR 0 1
78442: NOT
78443: ST_TO_ADDR
// end ;
78444: LD_VAR 0 2
78448: RET
// export function Inc ( value ) ; begin
78449: LD_INT 0
78451: PPUSH
// result := value + 1 ;
78452: LD_ADDR_VAR 0 2
78456: PUSH
78457: LD_VAR 0 1
78461: PUSH
78462: LD_INT 1
78464: PLUS
78465: ST_TO_ADDR
// end ;
78466: LD_VAR 0 2
78470: RET
// export function Dec ( value ) ; begin
78471: LD_INT 0
78473: PPUSH
// result := value - 1 ;
78474: LD_ADDR_VAR 0 2
78478: PUSH
78479: LD_VAR 0 1
78483: PUSH
78484: LD_INT 1
78486: MINUS
78487: ST_TO_ADDR
// end ;
78488: LD_VAR 0 2
78492: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78493: LD_INT 0
78495: PPUSH
78496: PPUSH
78497: PPUSH
78498: PPUSH
78499: PPUSH
78500: PPUSH
78501: PPUSH
78502: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78503: LD_VAR 0 1
78507: PPUSH
78508: LD_VAR 0 2
78512: PPUSH
78513: CALL_OW 488
78517: NOT
78518: PUSH
78519: LD_VAR 0 3
78523: PPUSH
78524: LD_VAR 0 4
78528: PPUSH
78529: CALL_OW 488
78533: NOT
78534: OR
78535: IFFALSE 78548
// begin result := - 1 ;
78537: LD_ADDR_VAR 0 5
78541: PUSH
78542: LD_INT 1
78544: NEG
78545: ST_TO_ADDR
// exit ;
78546: GO 78783
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78548: LD_ADDR_VAR 0 12
78552: PUSH
78553: LD_VAR 0 1
78557: PPUSH
78558: LD_VAR 0 2
78562: PPUSH
78563: LD_VAR 0 3
78567: PPUSH
78568: LD_VAR 0 4
78572: PPUSH
78573: CALL 77633 0 4
78577: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78578: LD_ADDR_VAR 0 11
78582: PUSH
78583: LD_VAR 0 1
78587: PPUSH
78588: LD_VAR 0 2
78592: PPUSH
78593: LD_VAR 0 12
78597: PUSH
78598: LD_INT 1
78600: ARRAY
78601: PPUSH
78602: LD_VAR 0 12
78606: PUSH
78607: LD_INT 2
78609: ARRAY
78610: PPUSH
78611: CALL_OW 298
78615: ST_TO_ADDR
// distance := 9999 ;
78616: LD_ADDR_VAR 0 10
78620: PUSH
78621: LD_INT 9999
78623: ST_TO_ADDR
// for i := 0 to 5 do
78624: LD_ADDR_VAR 0 6
78628: PUSH
78629: DOUBLE
78630: LD_INT 0
78632: DEC
78633: ST_TO_ADDR
78634: LD_INT 5
78636: PUSH
78637: FOR_TO
78638: IFFALSE 78781
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78640: LD_ADDR_VAR 0 7
78644: PUSH
78645: LD_VAR 0 1
78649: PPUSH
78650: LD_VAR 0 6
78654: PPUSH
78655: LD_VAR 0 11
78659: PPUSH
78660: CALL_OW 272
78664: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78665: LD_ADDR_VAR 0 8
78669: PUSH
78670: LD_VAR 0 2
78674: PPUSH
78675: LD_VAR 0 6
78679: PPUSH
78680: LD_VAR 0 11
78684: PPUSH
78685: CALL_OW 273
78689: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78690: LD_VAR 0 7
78694: PPUSH
78695: LD_VAR 0 8
78699: PPUSH
78700: CALL_OW 488
78704: NOT
78705: IFFALSE 78709
// continue ;
78707: GO 78637
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78709: LD_ADDR_VAR 0 9
78713: PUSH
78714: LD_VAR 0 12
78718: PUSH
78719: LD_INT 1
78721: ARRAY
78722: PPUSH
78723: LD_VAR 0 12
78727: PUSH
78728: LD_INT 2
78730: ARRAY
78731: PPUSH
78732: LD_VAR 0 7
78736: PPUSH
78737: LD_VAR 0 8
78741: PPUSH
78742: CALL_OW 298
78746: ST_TO_ADDR
// if tmp < distance then
78747: LD_VAR 0 9
78751: PUSH
78752: LD_VAR 0 10
78756: LESS
78757: IFFALSE 78779
// begin result := i ;
78759: LD_ADDR_VAR 0 5
78763: PUSH
78764: LD_VAR 0 6
78768: ST_TO_ADDR
// distance := tmp ;
78769: LD_ADDR_VAR 0 10
78773: PUSH
78774: LD_VAR 0 9
78778: ST_TO_ADDR
// end ; end ;
78779: GO 78637
78781: POP
78782: POP
// end ;
78783: LD_VAR 0 5
78787: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78788: LD_INT 0
78790: PPUSH
78791: PPUSH
// if not driver or not IsInUnit ( driver ) then
78792: LD_VAR 0 1
78796: NOT
78797: PUSH
78798: LD_VAR 0 1
78802: PPUSH
78803: CALL_OW 310
78807: NOT
78808: OR
78809: IFFALSE 78813
// exit ;
78811: GO 78903
// vehicle := IsInUnit ( driver ) ;
78813: LD_ADDR_VAR 0 3
78817: PUSH
78818: LD_VAR 0 1
78822: PPUSH
78823: CALL_OW 310
78827: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78828: LD_VAR 0 1
78832: PPUSH
78833: LD_STRING \
78835: PUSH
78836: LD_INT 0
78838: PUSH
78839: LD_INT 0
78841: PUSH
78842: LD_INT 0
78844: PUSH
78845: LD_INT 0
78847: PUSH
78848: LD_INT 0
78850: PUSH
78851: LD_INT 0
78853: PUSH
78854: EMPTY
78855: LIST
78856: LIST
78857: LIST
78858: LIST
78859: LIST
78860: LIST
78861: LIST
78862: PUSH
78863: LD_STRING E
78865: PUSH
78866: LD_INT 0
78868: PUSH
78869: LD_INT 0
78871: PUSH
78872: LD_VAR 0 3
78876: PUSH
78877: LD_INT 0
78879: PUSH
78880: LD_INT 0
78882: PUSH
78883: LD_INT 0
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: LIST
78890: LIST
78891: LIST
78892: LIST
78893: LIST
78894: PUSH
78895: EMPTY
78896: LIST
78897: LIST
78898: PPUSH
78899: CALL_OW 446
// end ;
78903: LD_VAR 0 2
78907: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78908: LD_INT 0
78910: PPUSH
78911: PPUSH
// if not driver or not IsInUnit ( driver ) then
78912: LD_VAR 0 1
78916: NOT
78917: PUSH
78918: LD_VAR 0 1
78922: PPUSH
78923: CALL_OW 310
78927: NOT
78928: OR
78929: IFFALSE 78933
// exit ;
78931: GO 79023
// vehicle := IsInUnit ( driver ) ;
78933: LD_ADDR_VAR 0 3
78937: PUSH
78938: LD_VAR 0 1
78942: PPUSH
78943: CALL_OW 310
78947: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78948: LD_VAR 0 1
78952: PPUSH
78953: LD_STRING \
78955: PUSH
78956: LD_INT 0
78958: PUSH
78959: LD_INT 0
78961: PUSH
78962: LD_INT 0
78964: PUSH
78965: LD_INT 0
78967: PUSH
78968: LD_INT 0
78970: PUSH
78971: LD_INT 0
78973: PUSH
78974: EMPTY
78975: LIST
78976: LIST
78977: LIST
78978: LIST
78979: LIST
78980: LIST
78981: LIST
78982: PUSH
78983: LD_STRING E
78985: PUSH
78986: LD_INT 0
78988: PUSH
78989: LD_INT 0
78991: PUSH
78992: LD_VAR 0 3
78996: PUSH
78997: LD_INT 0
78999: PUSH
79000: LD_INT 0
79002: PUSH
79003: LD_INT 0
79005: PUSH
79006: EMPTY
79007: LIST
79008: LIST
79009: LIST
79010: LIST
79011: LIST
79012: LIST
79013: LIST
79014: PUSH
79015: EMPTY
79016: LIST
79017: LIST
79018: PPUSH
79019: CALL_OW 447
// end ;
79023: LD_VAR 0 2
79027: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79028: LD_INT 0
79030: PPUSH
79031: PPUSH
79032: PPUSH
// tmp := [ ] ;
79033: LD_ADDR_VAR 0 5
79037: PUSH
79038: EMPTY
79039: ST_TO_ADDR
// for i in units do
79040: LD_ADDR_VAR 0 4
79044: PUSH
79045: LD_VAR 0 1
79049: PUSH
79050: FOR_IN
79051: IFFALSE 79089
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79053: LD_ADDR_VAR 0 5
79057: PUSH
79058: LD_VAR 0 5
79062: PPUSH
79063: LD_VAR 0 5
79067: PUSH
79068: LD_INT 1
79070: PLUS
79071: PPUSH
79072: LD_VAR 0 4
79076: PPUSH
79077: CALL_OW 256
79081: PPUSH
79082: CALL_OW 2
79086: ST_TO_ADDR
79087: GO 79050
79089: POP
79090: POP
// if not tmp then
79091: LD_VAR 0 5
79095: NOT
79096: IFFALSE 79100
// exit ;
79098: GO 79148
// if asc then
79100: LD_VAR 0 2
79104: IFFALSE 79128
// result := SortListByListAsc ( units , tmp ) else
79106: LD_ADDR_VAR 0 3
79110: PUSH
79111: LD_VAR 0 1
79115: PPUSH
79116: LD_VAR 0 5
79120: PPUSH
79121: CALL_OW 76
79125: ST_TO_ADDR
79126: GO 79148
// result := SortListByListDesc ( units , tmp ) ;
79128: LD_ADDR_VAR 0 3
79132: PUSH
79133: LD_VAR 0 1
79137: PPUSH
79138: LD_VAR 0 5
79142: PPUSH
79143: CALL_OW 77
79147: ST_TO_ADDR
// end ;
79148: LD_VAR 0 3
79152: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79153: LD_INT 0
79155: PPUSH
79156: PPUSH
// task := GetTaskList ( mech ) ;
79157: LD_ADDR_VAR 0 4
79161: PUSH
79162: LD_VAR 0 1
79166: PPUSH
79167: CALL_OW 437
79171: ST_TO_ADDR
// if not task then
79172: LD_VAR 0 4
79176: NOT
79177: IFFALSE 79181
// exit ;
79179: GO 79223
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79181: LD_ADDR_VAR 0 3
79185: PUSH
79186: LD_VAR 0 4
79190: PUSH
79191: LD_INT 1
79193: ARRAY
79194: PUSH
79195: LD_INT 1
79197: ARRAY
79198: PUSH
79199: LD_STRING r
79201: EQUAL
79202: PUSH
79203: LD_VAR 0 4
79207: PUSH
79208: LD_INT 1
79210: ARRAY
79211: PUSH
79212: LD_INT 4
79214: ARRAY
79215: PUSH
79216: LD_VAR 0 2
79220: EQUAL
79221: AND
79222: ST_TO_ADDR
// end ;
79223: LD_VAR 0 3
79227: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79228: LD_INT 0
79230: PPUSH
// SetDir ( unit , d ) ;
79231: LD_VAR 0 1
79235: PPUSH
79236: LD_VAR 0 4
79240: PPUSH
79241: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79245: LD_VAR 0 1
79249: PPUSH
79250: LD_VAR 0 2
79254: PPUSH
79255: LD_VAR 0 3
79259: PPUSH
79260: LD_VAR 0 5
79264: PPUSH
79265: CALL_OW 48
// end ;
79269: LD_VAR 0 6
79273: RET
// export function ToNaturalNumber ( number ) ; begin
79274: LD_INT 0
79276: PPUSH
// result := number div 1 ;
79277: LD_ADDR_VAR 0 2
79281: PUSH
79282: LD_VAR 0 1
79286: PUSH
79287: LD_INT 1
79289: DIV
79290: ST_TO_ADDR
// if number < 0 then
79291: LD_VAR 0 1
79295: PUSH
79296: LD_INT 0
79298: LESS
79299: IFFALSE 79309
// result := 0 ;
79301: LD_ADDR_VAR 0 2
79305: PUSH
79306: LD_INT 0
79308: ST_TO_ADDR
// end ;
79309: LD_VAR 0 2
79313: RET
// export function SortByClass ( units , class ) ; var un ; begin
79314: LD_INT 0
79316: PPUSH
79317: PPUSH
// if not units or not class then
79318: LD_VAR 0 1
79322: NOT
79323: PUSH
79324: LD_VAR 0 2
79328: NOT
79329: OR
79330: IFFALSE 79334
// exit ;
79332: GO 79429
// result := [ ] ;
79334: LD_ADDR_VAR 0 3
79338: PUSH
79339: EMPTY
79340: ST_TO_ADDR
// for un in units do
79341: LD_ADDR_VAR 0 4
79345: PUSH
79346: LD_VAR 0 1
79350: PUSH
79351: FOR_IN
79352: IFFALSE 79427
// if GetClass ( un ) = class then
79354: LD_VAR 0 4
79358: PPUSH
79359: CALL_OW 257
79363: PUSH
79364: LD_VAR 0 2
79368: EQUAL
79369: IFFALSE 79396
// result := Insert ( result , 1 , un ) else
79371: LD_ADDR_VAR 0 3
79375: PUSH
79376: LD_VAR 0 3
79380: PPUSH
79381: LD_INT 1
79383: PPUSH
79384: LD_VAR 0 4
79388: PPUSH
79389: CALL_OW 2
79393: ST_TO_ADDR
79394: GO 79425
// result := Replace ( result , result + 1 , un ) ;
79396: LD_ADDR_VAR 0 3
79400: PUSH
79401: LD_VAR 0 3
79405: PPUSH
79406: LD_VAR 0 3
79410: PUSH
79411: LD_INT 1
79413: PLUS
79414: PPUSH
79415: LD_VAR 0 4
79419: PPUSH
79420: CALL_OW 1
79424: ST_TO_ADDR
79425: GO 79351
79427: POP
79428: POP
// end ;
79429: LD_VAR 0 3
79433: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79434: LD_INT 0
79436: PPUSH
79437: PPUSH
79438: PPUSH
79439: PPUSH
79440: PPUSH
79441: PPUSH
79442: PPUSH
// result := [ ] ;
79443: LD_ADDR_VAR 0 4
79447: PUSH
79448: EMPTY
79449: ST_TO_ADDR
// if x - r < 0 then
79450: LD_VAR 0 1
79454: PUSH
79455: LD_VAR 0 3
79459: MINUS
79460: PUSH
79461: LD_INT 0
79463: LESS
79464: IFFALSE 79476
// min_x := 0 else
79466: LD_ADDR_VAR 0 8
79470: PUSH
79471: LD_INT 0
79473: ST_TO_ADDR
79474: GO 79492
// min_x := x - r ;
79476: LD_ADDR_VAR 0 8
79480: PUSH
79481: LD_VAR 0 1
79485: PUSH
79486: LD_VAR 0 3
79490: MINUS
79491: ST_TO_ADDR
// if y - r < 0 then
79492: LD_VAR 0 2
79496: PUSH
79497: LD_VAR 0 3
79501: MINUS
79502: PUSH
79503: LD_INT 0
79505: LESS
79506: IFFALSE 79518
// min_y := 0 else
79508: LD_ADDR_VAR 0 7
79512: PUSH
79513: LD_INT 0
79515: ST_TO_ADDR
79516: GO 79534
// min_y := y - r ;
79518: LD_ADDR_VAR 0 7
79522: PUSH
79523: LD_VAR 0 2
79527: PUSH
79528: LD_VAR 0 3
79532: MINUS
79533: ST_TO_ADDR
// max_x := x + r ;
79534: LD_ADDR_VAR 0 9
79538: PUSH
79539: LD_VAR 0 1
79543: PUSH
79544: LD_VAR 0 3
79548: PLUS
79549: ST_TO_ADDR
// max_y := y + r ;
79550: LD_ADDR_VAR 0 10
79554: PUSH
79555: LD_VAR 0 2
79559: PUSH
79560: LD_VAR 0 3
79564: PLUS
79565: ST_TO_ADDR
// for _x = min_x to max_x do
79566: LD_ADDR_VAR 0 5
79570: PUSH
79571: DOUBLE
79572: LD_VAR 0 8
79576: DEC
79577: ST_TO_ADDR
79578: LD_VAR 0 9
79582: PUSH
79583: FOR_TO
79584: IFFALSE 79685
// for _y = min_y to max_y do
79586: LD_ADDR_VAR 0 6
79590: PUSH
79591: DOUBLE
79592: LD_VAR 0 7
79596: DEC
79597: ST_TO_ADDR
79598: LD_VAR 0 10
79602: PUSH
79603: FOR_TO
79604: IFFALSE 79681
// begin if not ValidHex ( _x , _y ) then
79606: LD_VAR 0 5
79610: PPUSH
79611: LD_VAR 0 6
79615: PPUSH
79616: CALL_OW 488
79620: NOT
79621: IFFALSE 79625
// continue ;
79623: GO 79603
// if GetResourceTypeXY ( _x , _y ) then
79625: LD_VAR 0 5
79629: PPUSH
79630: LD_VAR 0 6
79634: PPUSH
79635: CALL_OW 283
79639: IFFALSE 79679
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79641: LD_ADDR_VAR 0 4
79645: PUSH
79646: LD_VAR 0 4
79650: PPUSH
79651: LD_VAR 0 4
79655: PUSH
79656: LD_INT 1
79658: PLUS
79659: PPUSH
79660: LD_VAR 0 5
79664: PUSH
79665: LD_VAR 0 6
79669: PUSH
79670: EMPTY
79671: LIST
79672: LIST
79673: PPUSH
79674: CALL_OW 1
79678: ST_TO_ADDR
// end ;
79679: GO 79603
79681: POP
79682: POP
79683: GO 79583
79685: POP
79686: POP
// end ;
79687: LD_VAR 0 4
79691: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79692: LD_INT 0
79694: PPUSH
79695: PPUSH
79696: PPUSH
79697: PPUSH
79698: PPUSH
79699: PPUSH
79700: PPUSH
79701: PPUSH
// if not units then
79702: LD_VAR 0 1
79706: NOT
79707: IFFALSE 79711
// exit ;
79709: GO 80235
// result := UnitFilter ( units , [ f_ok ] ) ;
79711: LD_ADDR_VAR 0 3
79715: PUSH
79716: LD_VAR 0 1
79720: PPUSH
79721: LD_INT 50
79723: PUSH
79724: EMPTY
79725: LIST
79726: PPUSH
79727: CALL_OW 72
79731: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79732: LD_ADDR_VAR 0 8
79736: PUSH
79737: LD_VAR 0 1
79741: PUSH
79742: LD_INT 1
79744: ARRAY
79745: PPUSH
79746: CALL_OW 255
79750: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79751: LD_ADDR_VAR 0 10
79755: PUSH
79756: LD_INT 29
79758: PUSH
79759: LD_INT 91
79761: PUSH
79762: LD_INT 49
79764: PUSH
79765: EMPTY
79766: LIST
79767: LIST
79768: LIST
79769: ST_TO_ADDR
// if not result then
79770: LD_VAR 0 3
79774: NOT
79775: IFFALSE 79779
// exit ;
79777: GO 80235
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79779: LD_ADDR_VAR 0 5
79783: PUSH
79784: LD_INT 81
79786: PUSH
79787: LD_VAR 0 8
79791: PUSH
79792: EMPTY
79793: LIST
79794: LIST
79795: PPUSH
79796: CALL_OW 69
79800: ST_TO_ADDR
// for i in result do
79801: LD_ADDR_VAR 0 4
79805: PUSH
79806: LD_VAR 0 3
79810: PUSH
79811: FOR_IN
79812: IFFALSE 80233
// begin tag := GetTag ( i ) + 1 ;
79814: LD_ADDR_VAR 0 9
79818: PUSH
79819: LD_VAR 0 4
79823: PPUSH
79824: CALL_OW 110
79828: PUSH
79829: LD_INT 1
79831: PLUS
79832: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79833: LD_ADDR_VAR 0 7
79837: PUSH
79838: LD_VAR 0 4
79842: PPUSH
79843: CALL_OW 250
79847: PPUSH
79848: LD_VAR 0 4
79852: PPUSH
79853: CALL_OW 251
79857: PPUSH
79858: LD_INT 6
79860: PPUSH
79861: CALL 79434 0 3
79865: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79866: LD_VAR 0 4
79870: PPUSH
79871: CALL_OW 247
79875: PUSH
79876: LD_INT 2
79878: EQUAL
79879: PUSH
79880: LD_VAR 0 7
79884: AND
79885: PUSH
79886: LD_VAR 0 4
79890: PPUSH
79891: CALL_OW 264
79895: PUSH
79896: LD_VAR 0 10
79900: IN
79901: NOT
79902: AND
79903: IFFALSE 79942
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79905: LD_VAR 0 4
79909: PPUSH
79910: LD_VAR 0 7
79914: PUSH
79915: LD_INT 1
79917: ARRAY
79918: PUSH
79919: LD_INT 1
79921: ARRAY
79922: PPUSH
79923: LD_VAR 0 7
79927: PUSH
79928: LD_INT 1
79930: ARRAY
79931: PUSH
79932: LD_INT 2
79934: ARRAY
79935: PPUSH
79936: CALL_OW 116
79940: GO 80231
// if path > tag then
79942: LD_VAR 0 2
79946: PUSH
79947: LD_VAR 0 9
79951: GREATER
79952: IFFALSE 80160
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79954: LD_ADDR_VAR 0 6
79958: PUSH
79959: LD_VAR 0 5
79963: PPUSH
79964: LD_INT 91
79966: PUSH
79967: LD_VAR 0 4
79971: PUSH
79972: LD_INT 8
79974: PUSH
79975: EMPTY
79976: LIST
79977: LIST
79978: LIST
79979: PPUSH
79980: CALL_OW 72
79984: ST_TO_ADDR
// if nearEnemy then
79985: LD_VAR 0 6
79989: IFFALSE 80058
// begin if GetWeapon ( i ) = ru_time_lapser then
79991: LD_VAR 0 4
79995: PPUSH
79996: CALL_OW 264
80000: PUSH
80001: LD_INT 49
80003: EQUAL
80004: IFFALSE 80032
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80006: LD_VAR 0 4
80010: PPUSH
80011: LD_VAR 0 6
80015: PPUSH
80016: LD_VAR 0 4
80020: PPUSH
80021: CALL_OW 74
80025: PPUSH
80026: CALL_OW 112
80030: GO 80056
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80032: LD_VAR 0 4
80036: PPUSH
80037: LD_VAR 0 6
80041: PPUSH
80042: LD_VAR 0 4
80046: PPUSH
80047: CALL_OW 74
80051: PPUSH
80052: CALL_OW 115
// end else
80056: GO 80158
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80058: LD_VAR 0 4
80062: PPUSH
80063: LD_VAR 0 2
80067: PUSH
80068: LD_VAR 0 9
80072: ARRAY
80073: PUSH
80074: LD_INT 1
80076: ARRAY
80077: PPUSH
80078: LD_VAR 0 2
80082: PUSH
80083: LD_VAR 0 9
80087: ARRAY
80088: PUSH
80089: LD_INT 2
80091: ARRAY
80092: PPUSH
80093: CALL_OW 297
80097: PUSH
80098: LD_INT 6
80100: GREATER
80101: IFFALSE 80144
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80103: LD_VAR 0 4
80107: PPUSH
80108: LD_VAR 0 2
80112: PUSH
80113: LD_VAR 0 9
80117: ARRAY
80118: PUSH
80119: LD_INT 1
80121: ARRAY
80122: PPUSH
80123: LD_VAR 0 2
80127: PUSH
80128: LD_VAR 0 9
80132: ARRAY
80133: PUSH
80134: LD_INT 2
80136: ARRAY
80137: PPUSH
80138: CALL_OW 114
80142: GO 80158
// SetTag ( i , tag ) ;
80144: LD_VAR 0 4
80148: PPUSH
80149: LD_VAR 0 9
80153: PPUSH
80154: CALL_OW 109
// end else
80158: GO 80231
// if enemy then
80160: LD_VAR 0 5
80164: IFFALSE 80231
// begin if GetWeapon ( i ) = ru_time_lapser then
80166: LD_VAR 0 4
80170: PPUSH
80171: CALL_OW 264
80175: PUSH
80176: LD_INT 49
80178: EQUAL
80179: IFFALSE 80207
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80181: LD_VAR 0 4
80185: PPUSH
80186: LD_VAR 0 5
80190: PPUSH
80191: LD_VAR 0 4
80195: PPUSH
80196: CALL_OW 74
80200: PPUSH
80201: CALL_OW 112
80205: GO 80231
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80207: LD_VAR 0 4
80211: PPUSH
80212: LD_VAR 0 5
80216: PPUSH
80217: LD_VAR 0 4
80221: PPUSH
80222: CALL_OW 74
80226: PPUSH
80227: CALL_OW 115
// end ; end ;
80231: GO 79811
80233: POP
80234: POP
// end ;
80235: LD_VAR 0 3
80239: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80240: LD_INT 0
80242: PPUSH
80243: PPUSH
80244: PPUSH
// if not unit or IsInUnit ( unit ) then
80245: LD_VAR 0 1
80249: NOT
80250: PUSH
80251: LD_VAR 0 1
80255: PPUSH
80256: CALL_OW 310
80260: OR
80261: IFFALSE 80265
// exit ;
80263: GO 80356
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80265: LD_ADDR_VAR 0 4
80269: PUSH
80270: LD_VAR 0 1
80274: PPUSH
80275: CALL_OW 250
80279: PPUSH
80280: LD_VAR 0 2
80284: PPUSH
80285: LD_INT 1
80287: PPUSH
80288: CALL_OW 272
80292: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80293: LD_ADDR_VAR 0 5
80297: PUSH
80298: LD_VAR 0 1
80302: PPUSH
80303: CALL_OW 251
80307: PPUSH
80308: LD_VAR 0 2
80312: PPUSH
80313: LD_INT 1
80315: PPUSH
80316: CALL_OW 273
80320: ST_TO_ADDR
// if ValidHex ( x , y ) then
80321: LD_VAR 0 4
80325: PPUSH
80326: LD_VAR 0 5
80330: PPUSH
80331: CALL_OW 488
80335: IFFALSE 80356
// ComTurnXY ( unit , x , y ) ;
80337: LD_VAR 0 1
80341: PPUSH
80342: LD_VAR 0 4
80346: PPUSH
80347: LD_VAR 0 5
80351: PPUSH
80352: CALL_OW 118
// end ;
80356: LD_VAR 0 3
80360: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80361: LD_INT 0
80363: PPUSH
80364: PPUSH
// result := false ;
80365: LD_ADDR_VAR 0 3
80369: PUSH
80370: LD_INT 0
80372: ST_TO_ADDR
// if not units then
80373: LD_VAR 0 2
80377: NOT
80378: IFFALSE 80382
// exit ;
80380: GO 80427
// for i in units do
80382: LD_ADDR_VAR 0 4
80386: PUSH
80387: LD_VAR 0 2
80391: PUSH
80392: FOR_IN
80393: IFFALSE 80425
// if See ( side , i ) then
80395: LD_VAR 0 1
80399: PPUSH
80400: LD_VAR 0 4
80404: PPUSH
80405: CALL_OW 292
80409: IFFALSE 80423
// begin result := true ;
80411: LD_ADDR_VAR 0 3
80415: PUSH
80416: LD_INT 1
80418: ST_TO_ADDR
// exit ;
80419: POP
80420: POP
80421: GO 80427
// end ;
80423: GO 80392
80425: POP
80426: POP
// end ;
80427: LD_VAR 0 3
80431: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80432: LD_INT 0
80434: PPUSH
80435: PPUSH
80436: PPUSH
80437: PPUSH
// if not unit or not points then
80438: LD_VAR 0 1
80442: NOT
80443: PUSH
80444: LD_VAR 0 2
80448: NOT
80449: OR
80450: IFFALSE 80454
// exit ;
80452: GO 80544
// dist := 99999 ;
80454: LD_ADDR_VAR 0 5
80458: PUSH
80459: LD_INT 99999
80461: ST_TO_ADDR
// for i in points do
80462: LD_ADDR_VAR 0 4
80466: PUSH
80467: LD_VAR 0 2
80471: PUSH
80472: FOR_IN
80473: IFFALSE 80542
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80475: LD_ADDR_VAR 0 6
80479: PUSH
80480: LD_VAR 0 1
80484: PPUSH
80485: LD_VAR 0 4
80489: PUSH
80490: LD_INT 1
80492: ARRAY
80493: PPUSH
80494: LD_VAR 0 4
80498: PUSH
80499: LD_INT 2
80501: ARRAY
80502: PPUSH
80503: CALL_OW 297
80507: ST_TO_ADDR
// if tmpDist < dist then
80508: LD_VAR 0 6
80512: PUSH
80513: LD_VAR 0 5
80517: LESS
80518: IFFALSE 80540
// begin result := i ;
80520: LD_ADDR_VAR 0 3
80524: PUSH
80525: LD_VAR 0 4
80529: ST_TO_ADDR
// dist := tmpDist ;
80530: LD_ADDR_VAR 0 5
80534: PUSH
80535: LD_VAR 0 6
80539: ST_TO_ADDR
// end ; end ;
80540: GO 80472
80542: POP
80543: POP
// end ;
80544: LD_VAR 0 3
80548: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80549: LD_INT 0
80551: PPUSH
// uc_side := side ;
80552: LD_ADDR_OWVAR 20
80556: PUSH
80557: LD_VAR 0 1
80561: ST_TO_ADDR
// uc_nation := 3 ;
80562: LD_ADDR_OWVAR 21
80566: PUSH
80567: LD_INT 3
80569: ST_TO_ADDR
// vc_chassis := 25 ;
80570: LD_ADDR_OWVAR 37
80574: PUSH
80575: LD_INT 25
80577: ST_TO_ADDR
// vc_engine := engine_siberite ;
80578: LD_ADDR_OWVAR 39
80582: PUSH
80583: LD_INT 3
80585: ST_TO_ADDR
// vc_control := control_computer ;
80586: LD_ADDR_OWVAR 38
80590: PUSH
80591: LD_INT 3
80593: ST_TO_ADDR
// vc_weapon := 59 ;
80594: LD_ADDR_OWVAR 40
80598: PUSH
80599: LD_INT 59
80601: ST_TO_ADDR
// result := CreateVehicle ;
80602: LD_ADDR_VAR 0 5
80606: PUSH
80607: CALL_OW 45
80611: ST_TO_ADDR
// SetDir ( result , d ) ;
80612: LD_VAR 0 5
80616: PPUSH
80617: LD_VAR 0 4
80621: PPUSH
80622: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80626: LD_VAR 0 5
80630: PPUSH
80631: LD_VAR 0 2
80635: PPUSH
80636: LD_VAR 0 3
80640: PPUSH
80641: LD_INT 0
80643: PPUSH
80644: CALL_OW 48
// end ;
80648: LD_VAR 0 5
80652: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80653: LD_INT 0
80655: PPUSH
80656: PPUSH
80657: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80658: LD_ADDR_VAR 0 2
80662: PUSH
80663: LD_INT 0
80665: PUSH
80666: LD_INT 0
80668: PUSH
80669: LD_INT 0
80671: PUSH
80672: LD_INT 0
80674: PUSH
80675: EMPTY
80676: LIST
80677: LIST
80678: LIST
80679: LIST
80680: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80681: LD_VAR 0 1
80685: NOT
80686: PUSH
80687: LD_VAR 0 1
80691: PPUSH
80692: CALL_OW 264
80696: PUSH
80697: LD_INT 12
80699: PUSH
80700: LD_INT 51
80702: PUSH
80703: LD_INT 32
80705: PUSH
80706: LD_INT 89
80708: PUSH
80709: EMPTY
80710: LIST
80711: LIST
80712: LIST
80713: LIST
80714: IN
80715: NOT
80716: OR
80717: IFFALSE 80721
// exit ;
80719: GO 80819
// for i := 1 to 3 do
80721: LD_ADDR_VAR 0 3
80725: PUSH
80726: DOUBLE
80727: LD_INT 1
80729: DEC
80730: ST_TO_ADDR
80731: LD_INT 3
80733: PUSH
80734: FOR_TO
80735: IFFALSE 80817
// begin tmp := GetCargo ( cargo , i ) ;
80737: LD_ADDR_VAR 0 4
80741: PUSH
80742: LD_VAR 0 1
80746: PPUSH
80747: LD_VAR 0 3
80751: PPUSH
80752: CALL_OW 289
80756: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80757: LD_ADDR_VAR 0 2
80761: PUSH
80762: LD_VAR 0 2
80766: PPUSH
80767: LD_VAR 0 3
80771: PPUSH
80772: LD_VAR 0 4
80776: PPUSH
80777: CALL_OW 1
80781: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80782: LD_ADDR_VAR 0 2
80786: PUSH
80787: LD_VAR 0 2
80791: PPUSH
80792: LD_INT 4
80794: PPUSH
80795: LD_VAR 0 2
80799: PUSH
80800: LD_INT 4
80802: ARRAY
80803: PUSH
80804: LD_VAR 0 4
80808: PLUS
80809: PPUSH
80810: CALL_OW 1
80814: ST_TO_ADDR
// end ;
80815: GO 80734
80817: POP
80818: POP
// end ;
80819: LD_VAR 0 2
80823: RET
// export function Length ( array ) ; begin
80824: LD_INT 0
80826: PPUSH
// result := array + 0 ;
80827: LD_ADDR_VAR 0 2
80831: PUSH
80832: LD_VAR 0 1
80836: PUSH
80837: LD_INT 0
80839: PLUS
80840: ST_TO_ADDR
// end ;
80841: LD_VAR 0 2
80845: RET
// export function PrepareArray ( array ) ; begin
80846: LD_INT 0
80848: PPUSH
// result := array diff 0 ;
80849: LD_ADDR_VAR 0 2
80853: PUSH
80854: LD_VAR 0 1
80858: PUSH
80859: LD_INT 0
80861: DIFF
80862: ST_TO_ADDR
// if not result [ 1 ] then
80863: LD_VAR 0 2
80867: PUSH
80868: LD_INT 1
80870: ARRAY
80871: NOT
80872: IFFALSE 80892
// result := Delete ( result , 1 ) ;
80874: LD_ADDR_VAR 0 2
80878: PUSH
80879: LD_VAR 0 2
80883: PPUSH
80884: LD_INT 1
80886: PPUSH
80887: CALL_OW 3
80891: ST_TO_ADDR
// end ;
80892: LD_VAR 0 2
80896: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80897: LD_INT 0
80899: PPUSH
80900: PPUSH
80901: PPUSH
80902: PPUSH
// sibRocketRange := 25 ;
80903: LD_ADDR_VAR 0 6
80907: PUSH
80908: LD_INT 25
80910: ST_TO_ADDR
// result := false ;
80911: LD_ADDR_VAR 0 4
80915: PUSH
80916: LD_INT 0
80918: ST_TO_ADDR
// for i := 0 to 5 do
80919: LD_ADDR_VAR 0 5
80923: PUSH
80924: DOUBLE
80925: LD_INT 0
80927: DEC
80928: ST_TO_ADDR
80929: LD_INT 5
80931: PUSH
80932: FOR_TO
80933: IFFALSE 81000
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80935: LD_VAR 0 1
80939: PPUSH
80940: LD_VAR 0 5
80944: PPUSH
80945: LD_VAR 0 6
80949: PPUSH
80950: CALL_OW 272
80954: PPUSH
80955: LD_VAR 0 2
80959: PPUSH
80960: LD_VAR 0 5
80964: PPUSH
80965: LD_VAR 0 6
80969: PPUSH
80970: CALL_OW 273
80974: PPUSH
80975: LD_VAR 0 3
80979: PPUSH
80980: CALL_OW 309
80984: IFFALSE 80998
// begin result := true ;
80986: LD_ADDR_VAR 0 4
80990: PUSH
80991: LD_INT 1
80993: ST_TO_ADDR
// exit ;
80994: POP
80995: POP
80996: GO 81002
// end ;
80998: GO 80932
81000: POP
81001: POP
// end ;
81002: LD_VAR 0 4
81006: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81007: LD_INT 0
81009: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81010: LD_VAR 0 1
81014: PPUSH
81015: LD_VAR 0 2
81019: PPUSH
81020: LD_INT 0
81022: PPUSH
81023: LD_INT 0
81025: PPUSH
81026: LD_INT 1
81028: PPUSH
81029: LD_INT 0
81031: PPUSH
81032: CALL_OW 587
// end ;
81036: LD_VAR 0 3
81040: RET
// export function CenterOnNow ( unit ) ; begin
81041: LD_INT 0
81043: PPUSH
// result := IsInUnit ( unit ) ;
81044: LD_ADDR_VAR 0 2
81048: PUSH
81049: LD_VAR 0 1
81053: PPUSH
81054: CALL_OW 310
81058: ST_TO_ADDR
// if not result then
81059: LD_VAR 0 2
81063: NOT
81064: IFFALSE 81076
// result := unit ;
81066: LD_ADDR_VAR 0 2
81070: PUSH
81071: LD_VAR 0 1
81075: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81076: LD_VAR 0 1
81080: PPUSH
81081: CALL_OW 87
// end ;
81085: LD_VAR 0 2
81089: RET
// export function ComMoveHex ( unit , hex ) ; begin
81090: LD_INT 0
81092: PPUSH
// if not hex then
81093: LD_VAR 0 2
81097: NOT
81098: IFFALSE 81102
// exit ;
81100: GO 81155
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81102: LD_VAR 0 2
81106: PUSH
81107: LD_INT 1
81109: ARRAY
81110: PPUSH
81111: LD_VAR 0 2
81115: PUSH
81116: LD_INT 2
81118: ARRAY
81119: PPUSH
81120: CALL_OW 428
81124: IFFALSE 81128
// exit ;
81126: GO 81155
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81128: LD_VAR 0 1
81132: PPUSH
81133: LD_VAR 0 2
81137: PUSH
81138: LD_INT 1
81140: ARRAY
81141: PPUSH
81142: LD_VAR 0 2
81146: PUSH
81147: LD_INT 2
81149: ARRAY
81150: PPUSH
81151: CALL_OW 111
// end ; end_of_file
81155: LD_VAR 0 3
81159: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81160: LD_VAR 0 1
81164: PUSH
81165: LD_INT 200
81167: DOUBLE
81168: GREATEREQUAL
81169: IFFALSE 81177
81171: LD_INT 299
81173: DOUBLE
81174: LESSEQUAL
81175: IFTRUE 81179
81177: GO 81211
81179: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81180: LD_VAR 0 1
81184: PPUSH
81185: LD_VAR 0 2
81189: PPUSH
81190: LD_VAR 0 3
81194: PPUSH
81195: LD_VAR 0 4
81199: PPUSH
81200: LD_VAR 0 5
81204: PPUSH
81205: CALL 35883 0 5
81209: GO 81288
81211: LD_INT 300
81213: DOUBLE
81214: GREATEREQUAL
81215: IFFALSE 81223
81217: LD_INT 399
81219: DOUBLE
81220: LESSEQUAL
81221: IFTRUE 81225
81223: GO 81287
81225: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81226: LD_VAR 0 1
81230: PPUSH
81231: LD_VAR 0 2
81235: PPUSH
81236: LD_VAR 0 3
81240: PPUSH
81241: LD_VAR 0 4
81245: PPUSH
81246: LD_VAR 0 5
81250: PPUSH
81251: LD_VAR 0 6
81255: PPUSH
81256: LD_VAR 0 7
81260: PPUSH
81261: LD_VAR 0 8
81265: PPUSH
81266: LD_VAR 0 9
81270: PPUSH
81271: LD_VAR 0 10
81275: PPUSH
81276: LD_VAR 0 11
81280: PPUSH
81281: CALL 32216 0 11
81285: GO 81288
81287: POP
// end ;
81288: PPOPN 11
81290: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81291: LD_VAR 0 1
81295: PPUSH
81296: LD_VAR 0 2
81300: PPUSH
81301: LD_VAR 0 3
81305: PPUSH
81306: LD_VAR 0 4
81310: PPUSH
81311: LD_VAR 0 5
81315: PPUSH
81316: CALL 35619 0 5
// end ; end_of_file
81320: PPOPN 5
81322: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81323: LD_VAR 0 1
81327: PPUSH
81328: LD_VAR 0 2
81332: PPUSH
81333: LD_VAR 0 3
81337: PPUSH
81338: LD_VAR 0 4
81342: PPUSH
81343: LD_VAR 0 5
81347: PPUSH
81348: LD_VAR 0 6
81352: PPUSH
81353: CALL 19868 0 6
// end ;
81357: PPOPN 6
81359: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81360: LD_INT 0
81362: PPUSH
// begin if not units then
81363: LD_VAR 0 1
81367: NOT
81368: IFFALSE 81372
// exit ;
81370: GO 81372
// end ;
81372: PPOPN 7
81374: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81375: CALL 19772 0 0
// end ;
81379: PPOPN 1
81381: END
