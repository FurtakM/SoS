// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4687 0 0
// PrepareRussianBase ;
  29: CALL 2976 0 0
// PrepareRussianCommander ;
  33: CALL 2927 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8306 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild = 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode = 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible = 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack = 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson = 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase = 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer = 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus = 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer = 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog = 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog = 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog = 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil = 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower = 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable = 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter = 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor = 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 39771 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 39771 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: LD_EXP 49
 585: PPUSH
 586: CALL 39771 0 3
 590: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 591: LD_ADDR_EXP 8
 595: PUSH
 596: LD_STRING Dickens
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: LD_EXP 49
 606: PPUSH
 607: CALL 39771 0 3
 611: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 612: LD_ADDR_EXP 9
 616: PUSH
 617: LD_STRING Woodruff
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_EXP 49
 627: PPUSH
 628: CALL 39771 0 3
 632: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 633: LD_ADDR_EXP 12
 637: PUSH
 638: LD_STRING Campell
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_EXP 49
 648: PPUSH
 649: CALL 39771 0 3
 653: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING Knight
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: LD_EXP 49
 669: PPUSH
 670: CALL 39771 0 3
 674: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 675: LD_ADDR_EXP 11
 679: PUSH
 680: LD_STRING Claptopn
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_EXP 49
 690: PPUSH
 691: CALL 39771 0 3
 695: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING Harisson
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: LD_EXP 49
 711: PPUSH
 712: CALL 39771 0 3
 716: ST_TO_ADDR
// if not Lisa then
 717: LD_EXP 4
 721: NOT
 722: IFFALSE 745
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 724: LD_ADDR_EXP 2
 728: PUSH
 729: LD_STRING Bobby
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_EXP 49
 739: PPUSH
 740: CALL 39771 0 3
 744: ST_TO_ADDR
// if not Lisa and not Bobby then
 745: LD_EXP 4
 749: NOT
 750: PUSH
 751: LD_EXP 2
 755: NOT
 756: AND
 757: IFFALSE 780
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 759: LD_ADDR_EXP 3
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_EXP 49
 774: PPUSH
 775: CALL 39771 0 3
 779: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 780: LD_EXP 4
 784: NOT
 785: PUSH
 786: LD_EXP 2
 790: NOT
 791: AND
 792: PUSH
 793: LD_EXP 3
 797: NOT
 798: AND
 799: IFFALSE 898
// begin tmp = CreateCharacterSet ( 03_others ) ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 31
 813: ST_TO_ADDR
// if tmp then
 814: LD_VAR 0 3
 818: IFFALSE 875
// begin RandomBeforeMission = tmp [ 1 ] ;
 820: LD_ADDR_EXP 6
 824: PUSH
 825: LD_VAR 0 3
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 834: LD_STRING 03_others
 836: PPUSH
 837: CALL_OW 40
// if tmp > 1 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: GREATER
 849: IFFALSE 873
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: DIFF
 865: PPUSH
 866: LD_STRING 03_others
 868: PPUSH
 869: CALL_OW 38
// end else
 873: GO 898
// begin PrepareHuman ( false , 1 , 3 ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: LD_INT 3
 883: PPUSH
 884: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 888: LD_ADDR_EXP 6
 892: PUSH
 893: CALL_OW 44
 897: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 4
 905: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 906: LD_ADDR_EXP 13
 910: PUSH
 911: LD_STRING Donaldson
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: LD_EXP 49
 921: PPUSH
 922: CALL 39771 0 3
 926: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Frank
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 39771 0 3
 947: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 32
 955: PPUSH
 956: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 960: LD_EXP 7
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 975: LD_EXP 7
 979: PPUSH
 980: LD_INT 32
 982: PPUSH
 983: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 987: LD_EXP 8
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1002: LD_EXP 9
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1017: LD_EXP 12
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1032: LD_EXP 10
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1047: LD_EXP 11
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 49
// if Lisa = false then
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1087: LD_EXP 2
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// if Lisa = false and Bobby = false then
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: PUSH
1111: LD_EXP 2
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1137: LD_EXP 4
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: PUSH
1146: LD_EXP 2
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: PUSH
1156: LD_EXP 3
1160: PUSH
1161: LD_INT 0
1163: EQUAL
1164: AND
1165: IFFALSE 1182
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1167: LD_EXP 6
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 49
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1187: LD_INT 0
1189: PPUSH
1190: PPUSH
1191: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1192: LD_EXP 13
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// if Frank then
1207: LD_EXP 5
1211: IFFALSE 1228
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1213: LD_EXP 5
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// uc_nation = 1 ;
1228: LD_ADDR_OWVAR 21
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// uc_side = 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// hc_class := 3 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING SecondCharsGal
1267: ST_TO_ADDR
// hc_face_number := 53 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 53
1275: ST_TO_ADDR
// hc_name := Freddie Warner ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Freddie Warner
1283: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 8
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 2
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 56 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 56
1401: ST_TO_ADDR
// hc_name := Mel Brennan ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Mel Brennan
1409: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 12
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// hc_class := 1 ;
1496: LD_ADDR_OWVAR 28
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_sex := sex_male ;
1504: LD_ADDR_OWVAR 27
1508: PUSH
1509: LD_INT 1
1511: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING AmGalRemake
1519: ST_TO_ADDR
// hc_face_number := 5 ;
1520: LD_ADDR_OWVAR 34
1524: PUSH
1525: LD_INT 5
1527: ST_TO_ADDR
// hc_name := Bob Joplin ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Bob Joplin
1535: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1536: LD_ADDR_OWVAR 29
1540: PUSH
1541: LD_INT 10
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1551: LD_ADDR_OWVAR 30
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1574: LD_ADDR_OWVAR 31
1578: PUSH
1579: LD_INT 3
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// un = CreateHuman ;
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: CALL_OW 44
1606: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1607: LD_VAR 0 3
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// hc_class := 3 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// hc_sex := sex_female ;
1630: LD_ADDR_OWVAR 27
1634: PUSH
1635: LD_INT 2
1637: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING AmGalRemake
1645: ST_TO_ADDR
// hc_face_number := 8 ;
1646: LD_ADDR_OWVAR 34
1650: PUSH
1651: LD_INT 8
1653: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1654: LD_ADDR_OWVAR 26
1658: PUSH
1659: LD_STRING Elizabeth Whitney
1661: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1662: LD_ADDR_OWVAR 29
1666: PUSH
1667: LD_INT 9
1669: PUSH
1670: LD_INT 11
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1677: LD_ADDR_OWVAR 30
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1700: LD_ADDR_OWVAR 31
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: LD_INT 4
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// un = CreateHuman ;
1723: LD_ADDR_VAR 0 3
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// InitHc ;
1748: CALL_OW 19
// end ;
1752: LD_VAR 0 1
1756: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
1761: PPUSH
1762: PPUSH
// uc_nation = 1 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// uc_side = 1 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 2
1786: ST_TO_ADDR
// vc_engine := engine_combustion ;
1787: LD_ADDR_OWVAR 39
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_control := control_manual ;
1795: LD_ADDR_OWVAR 38
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1803: LD_ADDR_OWVAR 41
1807: PUSH
1808: LD_INT 65
1810: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_OWVAR 67
1838: ARRAY
1839: ST_TO_ADDR
// veh := CreateVehicle ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 2
1857: PPUSH
1858: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: CALL_OW 428
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: IFFALSE 1898
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1878: LD_VAR 0 5
1882: PPUSH
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 48
1896: GO 1916
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1898: LD_VAR 0 5
1902: PPUSH
1903: LD_INT 23
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 48
// hc_class := 1 ;
1916: LD_ADDR_OWVAR 28
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_sex := sex_male ;
1924: LD_ADDR_OWVAR 27
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1932: LD_ADDR_OWVAR 33
1936: PUSH
1937: LD_STRING SecondCharsGal
1939: ST_TO_ADDR
// hc_face_number := 59 ;
1940: LD_ADDR_OWVAR 34
1944: PUSH
1945: LD_INT 59
1947: ST_TO_ADDR
// hc_name := Max Gray ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING Max Gray
1955: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 9
1963: PUSH
1964: LD_INT 11
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1971: LD_ADDR_OWVAR 30
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1994: LD_ADDR_OWVAR 31
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 0
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: ST_TO_ADDR
// un = CreateHuman ;
2017: LD_ADDR_VAR 0 4
2021: PUSH
2022: CALL_OW 44
2026: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_INT 11
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// hc_class := 2 ;
2042: LD_ADDR_OWVAR 28
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_sex := sex_male ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2058: LD_ADDR_OWVAR 33
2062: PUSH
2063: LD_STRING SecondCharsGal
2065: ST_TO_ADDR
// hc_face_number := 50 ;
2066: LD_ADDR_OWVAR 34
2070: PUSH
2071: LD_INT 50
2073: ST_TO_ADDR
// hc_name := Frank Hughes ;
2074: LD_ADDR_OWVAR 26
2078: PUSH
2079: LD_STRING Frank Hughes
2081: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2082: LD_ADDR_OWVAR 29
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: LD_INT 10
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2097: LD_ADDR_OWVAR 30
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 11
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// hc_class := 1 ;
2168: LD_ADDR_OWVAR 28
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_sex := sex_male ;
2176: LD_ADDR_OWVAR 27
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2184: LD_ADDR_OWVAR 33
2188: PUSH
2189: LD_STRING SecondCharsGal
2191: ST_TO_ADDR
// hc_face_number := 54 ;
2192: LD_ADDR_OWVAR 34
2196: PUSH
2197: LD_INT 54
2199: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_STRING Luigi Ghbellin
2207: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2208: LD_ADDR_OWVAR 29
2212: PUSH
2213: LD_INT 11
2215: PUSH
2216: LD_INT 11
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2223: LD_ADDR_OWVAR 30
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2246: LD_ADDR_OWVAR 31
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// un = CreateHuman ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: CALL_OW 44
2278: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2279: LD_VAR 0 4
2283: PPUSH
2284: LD_INT 11
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL_OW 49
// hc_class := 3 ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 3
2301: ST_TO_ADDR
// hc_sex := sex_male ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2310: LD_ADDR_OWVAR 33
2314: PUSH
2315: LD_STRING AmGalRemake
2317: ST_TO_ADDR
// hc_face_number := 6 ;
2318: LD_ADDR_OWVAR 34
2322: PUSH
2323: LD_INT 6
2325: ST_TO_ADDR
// hc_name := Leon Carter ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Leon Carter
2333: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2334: LD_ADDR_OWVAR 29
2338: PUSH
2339: LD_INT 10
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2349: LD_ADDR_OWVAR 30
2353: PUSH
2354: LD_INT 0
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2372: LD_ADDR_OWVAR 31
2376: PUSH
2377: LD_INT 0
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: ST_TO_ADDR
// un = CreateHuman ;
2395: LD_ADDR_VAR 0 4
2399: PUSH
2400: CALL_OW 44
2404: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2405: LD_VAR 0 4
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 52
// if count = 4 then
2419: LD_VAR 0 1
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2555
// begin hc_class := 1 ;
2429: LD_ADDR_OWVAR 28
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_sex := sex_male ;
2437: LD_ADDR_OWVAR 27
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING SecondCharsGal
2452: ST_TO_ADDR
// hc_face_number := 34 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 34
2460: ST_TO_ADDR
// hc_name := Ian Hill ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING Ian Hill
2468: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2469: LD_ADDR_OWVAR 29
2473: PUSH
2474: LD_INT 10
2476: PUSH
2477: LD_INT 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2484: LD_ADDR_OWVAR 30
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: LD_INT 0
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2507: LD_ADDR_OWVAR 31
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: ST_TO_ADDR
// un = CreateHuman ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: CALL_OW 44
2539: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2540: LD_VAR 0 4
2544: PPUSH
2545: LD_INT 11
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 49
// end ; if count = 5 then
2555: LD_VAR 0 1
2559: PUSH
2560: LD_INT 5
2562: EQUAL
2563: IFFALSE 2817
// begin hc_class := 1 ;
2565: LD_ADDR_OWVAR 28
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_sex := sex_male ;
2573: LD_ADDR_OWVAR 27
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2581: LD_ADDR_OWVAR 33
2585: PUSH
2586: LD_STRING SecondCharsGal
2588: ST_TO_ADDR
// hc_face_number := 34 ;
2589: LD_ADDR_OWVAR 34
2593: PUSH
2594: LD_INT 34
2596: ST_TO_ADDR
// hc_name := Ian Hill ;
2597: LD_ADDR_OWVAR 26
2601: PUSH
2602: LD_STRING Ian Hill
2604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2605: LD_ADDR_OWVAR 29
2609: PUSH
2610: LD_INT 10
2612: PUSH
2613: LD_INT 12
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2620: LD_ADDR_OWVAR 30
2624: PUSH
2625: LD_INT 1
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 0
2633: PUSH
2634: LD_INT 0
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2643: LD_ADDR_OWVAR 31
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: ST_TO_ADDR
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// hc_class := 1 ;
2691: LD_ADDR_OWVAR 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// hc_sex := sex_female ;
2699: LD_ADDR_OWVAR 27
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2707: LD_ADDR_OWVAR 33
2711: PUSH
2712: LD_STRING SecondCharsGal
2714: ST_TO_ADDR
// hc_face_number := 41 ;
2715: LD_ADDR_OWVAR 34
2719: PUSH
2720: LD_INT 41
2722: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2723: LD_ADDR_OWVAR 26
2727: PUSH
2728: LD_STRING Kate Wadsworth
2730: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2731: LD_ADDR_OWVAR 29
2735: PUSH
2736: LD_INT 9
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2746: LD_ADDR_OWVAR 30
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2769: LD_ADDR_OWVAR 31
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// un = CreateHuman ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 11
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2817: LD_INT 11
2819: PPUSH
2820: LD_INT 22
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 21
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 26
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 70
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2868: LD_INT 11
2870: PPUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 26
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 70
2910: PUSH
2911: LD_INT 1
2913: ARRAY
2914: PPUSH
2915: LD_STRING D6-Sol3-1
2917: PPUSH
2918: CALL_OW 88
// end ; end_of_file
2922: LD_VAR 0 2
2926: RET
// export function PrepareRussianCommander ; begin
2927: LD_INT 0
2929: PPUSH
// uc_side = 3 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// uc_nation = 3 ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Stolypin
2953: PPUSH
2954: CALL_OW 25
2958: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2959: LD_EXP 15
2963: PPUSH
2964: LD_INT 21
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: LD_VAR 0 1
2975: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// if Difficulty > 1 then
2982: LD_OWVAR 67
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3100
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := 3 ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// InitHc_All ( ) ;
3008: CALL_OW 584
// InitBc ;
3012: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3016: LD_INT 0
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL_OW 380
// bc_type := b_breastwork ;
3029: LD_ADDR_OWVAR 42
3033: PUSH
3034: LD_INT 31
3036: ST_TO_ADDR
// bc_level := 4 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 4
3044: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3045: LD_ADDR_VAR 0 3
3049: PUSH
3050: LD_INT 100
3052: PPUSH
3053: LD_INT 58
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 5
3081: PPUSH
3082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3086: LD_VAR 0 4
3090: PPUSH
3091: LD_VAR 0 3
3095: PPUSH
3096: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3100: LD_INT 3
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 22
3108: PPUSH
3109: LD_EXP 16
3113: PPUSH
3114: LD_EXP 17
3118: PPUSH
3119: CALL_OW 12
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 4
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 6
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_OWVAR 67
3149: ARRAY
3150: PPUSH
3151: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 21
3163: PPUSH
3164: LD_EXP 16
3168: PPUSH
3169: LD_EXP 17
3173: PPUSH
3174: CALL_OW 12
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: LD_EXP 16
3202: PPUSH
3203: LD_EXP 17
3207: PPUSH
3208: CALL_OW 12
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 24
3231: PPUSH
3232: LD_EXP 16
3236: PPUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 5
3252: PPUSH
3253: CALL 4353 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3332
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3294: LD_INT 3
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: LD_EXP 17
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL 4353 0 6
3330: GO 3291
3332: POP
3333: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 30
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: FOR_IN
3369: IFFALSE 3397
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL 4462 0 2
3395: GO 3368
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 1
3403: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 6 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 6
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// InitHC_All ( ) ;
3426: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: DOUBLE
3436: LD_INT 1
3438: DEC
3439: ST_TO_ADDR
3440: LD_INT 1
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: LD_INT 2
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_OWVAR 67
3462: ARRAY
3463: PUSH
3464: FOR_TO
3465: IFFALSE 3633
// begin vc_engine = 1 ;
3467: LD_ADDR_OWVAR 39
3471: PUSH
3472: LD_INT 1
3474: ST_TO_ADDR
// vc_control = 1 ;
3475: LD_ADDR_OWVAR 38
3479: PUSH
3480: LD_INT 1
3482: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3483: LD_ADDR_OWVAR 40
3487: PUSH
3488: LD_INT 42
3490: PUSH
3491: LD_INT 42
3493: PUSH
3494: LD_INT 43
3496: PUSH
3497: LD_INT 43
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: LD_OWVAR 67
3510: ARRAY
3511: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3512: LD_ADDR_OWVAR 37
3516: PUSH
3517: LD_INT 21
3519: PUSH
3520: LD_INT 22
3522: PUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 22
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_OWVAR 67
3539: ARRAY
3540: ST_TO_ADDR
// veh = CreateVehicle ;
3541: LD_ADDR_VAR 0 3
3545: PUSH
3546: CALL_OW 45
3550: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_INT 3
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// hc_gallery =  ;
3566: LD_ADDR_OWVAR 33
3570: PUSH
3571: LD_STRING 
3573: ST_TO_ADDR
// hc_name =  ;
3574: LD_ADDR_OWVAR 26
3578: PUSH
3579: LD_STRING 
3581: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3582: LD_INT 0
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: LD_EXP 16
3592: PPUSH
3593: LD_EXP 17
3597: PPUSH
3598: CALL_OW 12
3602: PPUSH
3603: CALL_OW 380
// un = CreateHuman ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: CALL_OW 44
3616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3617: LD_VAR 0 4
3621: PPUSH
3622: LD_VAR 0 3
3626: PPUSH
3627: CALL_OW 52
// end ;
3631: GO 3464
3633: POP
3634: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3635: LD_INT 0
3637: PPUSH
3638: LD_INT 2
3640: PPUSH
3641: LD_EXP 16
3645: PPUSH
3646: LD_EXP 17
3650: PPUSH
3651: CALL_OW 12
3655: PUSH
3656: LD_INT 2
3658: PLUS
3659: PPUSH
3660: CALL_OW 380
// un = CreateHuman ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3689: LD_INT 0
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_EXP 16
3699: PPUSH
3700: LD_EXP 17
3704: PPUSH
3705: CALL_OW 12
3709: PUSH
3710: LD_INT 2
3712: PLUS
3713: PPUSH
3714: CALL_OW 380
// un = CreateHuman ;
3718: LD_ADDR_VAR 0 4
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3728: LD_VAR 0 4
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 2
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_OWVAR 67
3775: ARRAY
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 3
3782: PPUSH
3783: CALL_OW 12
3787: PLUS
3788: PUSH
3789: FOR_TO
3790: IFFALSE 3860
// begin hc_gallery =  ;
3792: LD_ADDR_OWVAR 33
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// hc_name =  ;
3800: LD_ADDR_OWVAR 26
3804: PUSH
3805: LD_STRING 
3807: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_EXP 16
3818: PPUSH
3819: LD_EXP 17
3823: PPUSH
3824: CALL_OW 12
3828: PPUSH
3829: CALL_OW 380
// un = CreateHuman ;
3833: LD_ADDR_VAR 0 4
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3843: LD_VAR 0 4
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 49
// end ;
3858: GO 3789
3860: POP
3861: POP
// vc_engine = 1 ;
3862: LD_ADDR_OWVAR 39
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// vc_control = 1 ;
3870: LD_ADDR_OWVAR 38
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// vc_weapon = 51 ;
3878: LD_ADDR_OWVAR 40
3882: PUSH
3883: LD_INT 51
3885: ST_TO_ADDR
// vc_chassis = 22 ;
3886: LD_ADDR_OWVAR 37
3890: PUSH
3891: LD_INT 22
3893: ST_TO_ADDR
// veh = CreateVehicle ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 100
3929: PPUSH
3930: CALL_OW 290
// hc_gallery =  ;
3934: LD_ADDR_OWVAR 33
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// hc_name =  ;
3942: LD_ADDR_OWVAR 26
3946: PUSH
3947: LD_STRING 
3949: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: LD_EXP 16
3960: PPUSH
3961: LD_EXP 17
3965: PPUSH
3966: CALL_OW 12
3970: PPUSH
3971: CALL_OW 380
// un = CreateHuman ;
3975: LD_ADDR_VAR 0 4
3979: PUSH
3980: CALL_OW 44
3984: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3985: LD_VAR 0 4
3989: PPUSH
3990: LD_VAR 0 3
3994: PPUSH
3995: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3999: LD_ADDR_VAR 0 2
4003: PUSH
4004: LD_INT 22
4006: PUSH
4007: LD_INT 6
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: LD_INT 25
4022: PUSH
4023: LD_INT 2
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 69
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4085
// ComAgressiveMove ( i , 45 , 46 ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_INT 45
4075: PPUSH
4076: LD_INT 46
4078: PPUSH
4079: CALL_OW 114
4083: GO 4065
4085: POP
4086: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_INT 22
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 25
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 69
4120: PUSH
4121: FOR_IN
4122: IFFALSE 4153
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4124: LD_ADDR_EXP 21
4128: PUSH
4129: LD_VAR 0 2
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: LD_INT 48
4139: PPUSH
4140: LD_INT 55
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: CALL_OW 145
4150: ST_TO_ADDR
4151: GO 4121
4153: POP
4154: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4155: LD_ADDR_VAR 0 2
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 6
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 69
4188: PUSH
4189: FOR_IN
4190: IFFALSE 4209
// ComMoveXY ( i , 39 , 55 ) ;
4192: LD_VAR 0 2
4196: PPUSH
4197: LD_INT 39
4199: PPUSH
4200: LD_INT 55
4202: PPUSH
4203: CALL_OW 111
4207: GO 4189
4209: POP
4210: POP
// end ;
4211: LD_VAR 0 1
4215: RET
// export function PrepareFirstAttack ; var i , un ; begin
4216: LD_INT 0
4218: PPUSH
4219: PPUSH
4220: PPUSH
// uc_side = 5 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 5
4228: ST_TO_ADDR
// uc_nation = 3 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 3
4236: ST_TO_ADDR
// for i := 1 to 4 do
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: DOUBLE
4243: LD_INT 1
4245: DEC
4246: ST_TO_ADDR
4247: LD_INT 4
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4338
// begin InitHC_All ( ) ;
4253: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4257: LD_INT 0
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_EXP 16
4267: PPUSH
4268: LD_EXP 17
4272: PPUSH
4273: CALL_OW 12
4277: PPUSH
4278: CALL_OW 380
// un = CreateHuman ;
4282: LD_ADDR_VAR 0 3
4286: PUSH
4287: CALL_OW 44
4291: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4292: LD_VAR 0 3
4296: PPUSH
4297: LD_INT 4
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_EXP 1
4316: PPUSH
4317: CALL_OW 250
4321: PPUSH
4322: LD_EXP 1
4326: PPUSH
4327: CALL_OW 251
4331: PPUSH
4332: CALL_OW 114
// end ;
4336: GO 4250
4338: POP
4339: POP
// firstRussianAttack = 1 ;
4340: LD_ADDR_EXP 23
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// end ; end_of_file
4348: LD_VAR 0 1
4352: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4353: LD_INT 0
4355: PPUSH
4356: PPUSH
4357: PPUSH
// for i = 1 to count do
4358: LD_ADDR_VAR 0 8
4362: PUSH
4363: DOUBLE
4364: LD_INT 1
4366: DEC
4367: ST_TO_ADDR
4368: LD_VAR 0 6
4372: PUSH
4373: FOR_TO
4374: IFFALSE 4455
// begin uc_side = side ;
4376: LD_ADDR_OWVAR 20
4380: PUSH
4381: LD_VAR 0 1
4385: ST_TO_ADDR
// uc_nation = nation ;
4386: LD_ADDR_OWVAR 21
4390: PUSH
4391: LD_VAR 0 2
4395: ST_TO_ADDR
// hc_gallery =  ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING 
4403: ST_TO_ADDR
// hc_name =  ;
4404: LD_ADDR_OWVAR 26
4408: PUSH
4409: LD_STRING 
4411: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4412: LD_INT 0
4414: PPUSH
4415: LD_VAR 0 5
4419: PPUSH
4420: LD_VAR 0 4
4424: PPUSH
4425: CALL_OW 380
// un = CreateHuman ;
4429: LD_ADDR_VAR 0 9
4433: PUSH
4434: CALL_OW 44
4438: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4439: LD_VAR 0 9
4443: PPUSH
4444: LD_VAR 0 3
4448: PPUSH
4449: CALL_OW 52
// end ;
4453: GO 4373
4455: POP
4456: POP
// end ;
4457: LD_VAR 0 7
4461: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4462: LD_INT 0
4464: PPUSH
4465: PPUSH
4466: PPUSH
// uc_side := GetSide ( b ) ;
4467: LD_ADDR_OWVAR 20
4471: PUSH
4472: LD_VAR 0 2
4476: PPUSH
4477: CALL_OW 255
4481: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4482: LD_ADDR_OWVAR 21
4486: PUSH
4487: LD_VAR 0 2
4491: PPUSH
4492: CALL_OW 248
4496: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4497: LD_INT 0
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 380
// un = CreateHuman ;
4512: LD_ADDR_VAR 0 4
4516: PUSH
4517: CALL_OW 44
4521: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4522: LD_ADDR_VAR 0 5
4526: PUSH
4527: LD_VAR 0 2
4531: PPUSH
4532: CALL_OW 254
4536: PUSH
4537: LD_INT 3
4539: MINUS
4540: ST_TO_ADDR
// if dir < 0 then
4541: LD_VAR 0 5
4545: PUSH
4546: LD_INT 0
4548: LESS
4549: IFFALSE 4565
// dir := 6 + dir ;
4551: LD_ADDR_VAR 0 5
4555: PUSH
4556: LD_INT 6
4558: PUSH
4559: LD_VAR 0 5
4563: PLUS
4564: ST_TO_ADDR
// SetDir ( un , dir ) ;
4565: LD_VAR 0 4
4569: PPUSH
4570: LD_VAR 0 5
4574: PPUSH
4575: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: LD_VAR 0 2
4588: PPUSH
4589: CALL_OW 52
// end ;
4593: LD_VAR 0 3
4597: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4598: LD_INT 0
4600: PPUSH
4601: PPUSH
4602: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4603: LD_ADDR_VAR 0 6
4607: PUSH
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: PPUSH
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 12
4625: ARRAY
4626: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4627: LD_VAR 0 6
4631: PPUSH
4632: CALL_OW 258
4636: PUSH
4637: LD_INT 1
4639: EQUAL
4640: IFFALSE 4658
// Say ( speaker , dialogMID ) else
4642: LD_VAR 0 6
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: CALL_OW 88
4656: GO 4672
// Say ( speaker , dialogFID ) ;
4658: LD_VAR 0 6
4662: PPUSH
4663: LD_VAR 0 3
4667: PPUSH
4668: CALL_OW 88
// result := speaker ;
4672: LD_ADDR_VAR 0 4
4676: PUSH
4677: LD_VAR 0 6
4681: ST_TO_ADDR
// end ;
4682: LD_VAR 0 4
4686: RET
// export function PrepareDifficulty ; var tmp ; begin
4687: LD_INT 0
4689: PPUSH
4690: PPUSH
// if Difficulty = 1 then
4691: LD_OWVAR 67
4695: PUSH
4696: LD_INT 1
4698: EQUAL
4699: IFFALSE 4717
// begin RuSoldMinLevel = 1 ;
4701: LD_ADDR_EXP 16
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4709: LD_ADDR_EXP 17
4713: PUSH
4714: LD_INT 2
4716: ST_TO_ADDR
// end ; if Difficulty = 2 then
4717: LD_OWVAR 67
4721: PUSH
4722: LD_INT 2
4724: EQUAL
4725: IFFALSE 4826
// begin RuSoldMinLevel = 2 ;
4727: LD_ADDR_EXP 16
4731: PUSH
4732: LD_INT 2
4734: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4735: LD_ADDR_EXP 17
4739: PUSH
4740: LD_INT 3
4742: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4743: LD_INT 23
4745: PPUSH
4746: CALL_OW 64
// uc_nation = 3 ;
4750: LD_ADDR_OWVAR 21
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// uc_side = 3 ;
4758: LD_ADDR_OWVAR 20
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// bc_level = 5 ;
4766: LD_ADDR_OWVAR 43
4770: PUSH
4771: LD_INT 5
4773: ST_TO_ADDR
// bc_type = 32 ;
4774: LD_ADDR_OWVAR 42
4778: PUSH
4779: LD_INT 32
4781: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: LD_INT 76
4789: PPUSH
4790: LD_INT 91
4792: PPUSH
4793: LD_INT 2
4795: PPUSH
4796: CALL_OW 47
4800: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4801: LD_VAR 0 2
4805: PPUSH
4806: LD_INT 43
4808: PPUSH
4809: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4813: LD_INT 51
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 322
// end ; if Difficulty >= 3 then
4826: LD_OWVAR 67
4830: PUSH
4831: LD_INT 3
4833: GREATEREQUAL
4834: IFFALSE 4998
// begin RuSoldMinLevel = Difficulty ;
4836: LD_ADDR_EXP 16
4840: PUSH
4841: LD_OWVAR 67
4845: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4846: LD_ADDR_EXP 17
4850: PUSH
4851: LD_INT 4
4853: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4854: LD_INT 26
4856: PPUSH
4857: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4861: LD_INT 23
4863: PPUSH
4864: CALL_OW 64
// uc_nation = 3 ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// uc_side = 3 ;
4876: LD_ADDR_OWVAR 20
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// bc_level = 5 ;
4884: LD_ADDR_OWVAR 43
4888: PUSH
4889: LD_INT 5
4891: ST_TO_ADDR
// bc_type = 32 ;
4892: LD_ADDR_OWVAR 42
4896: PUSH
4897: LD_INT 32
4899: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4900: LD_ADDR_VAR 0 2
4904: PUSH
4905: LD_INT 76
4907: PPUSH
4908: LD_INT 91
4910: PPUSH
4911: LD_INT 2
4913: PPUSH
4914: CALL_OW 47
4918: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_INT 44
4926: PPUSH
4927: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4931: LD_ADDR_VAR 0 2
4935: PUSH
4936: LD_INT 83
4938: PPUSH
4939: LD_INT 84
4941: PPUSH
4942: LD_INT 2
4944: PPUSH
4945: CALL_OW 47
4949: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4950: LD_VAR 0 2
4954: PPUSH
4955: LD_INT 43
4957: PPUSH
4958: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4962: LD_INT 51
4964: PPUSH
4965: LD_INT 3
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4975: LD_INT 52
4977: PPUSH
4978: LD_INT 3
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4988: LD_INT 25
4990: PPUSH
4991: LD_INT 44
4993: PPUSH
4994: CALL_OW 431
// end ; end ;
4998: LD_VAR 0 1
5002: RET
// export function EnergyDialog ; begin
5003: LD_INT 0
5005: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5006: LD_INT 46
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: CALL_OW 321
5016: PUSH
5017: LD_INT 1
5019: EQUAL
5020: PUSH
5021: LD_INT 35
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 321
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: AND
5036: IFFALSE 5060
// begin Say ( JMM , D9c-JMM-1 ) ;
5038: LD_EXP 1
5042: PPUSH
5043: LD_STRING D9c-JMM-1
5045: PPUSH
5046: CALL_OW 88
// energyVDialog = 1 ;
5050: LD_ADDR_EXP 33
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// end else
5058: GO 5214
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5060: LD_INT 35
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 321
5070: PUSH
5071: LD_INT 2
5073: EQUAL
5074: PUSH
5075: LD_EXP 33
5079: PUSH
5080: LD_INT 0
5082: EQUAL
5083: AND
5084: IFFALSE 5106
// begin Say ( JMM , D9c-JMM-1a ) ;
5086: LD_EXP 1
5090: PPUSH
5091: LD_STRING D9c-JMM-1a
5093: PPUSH
5094: CALL_OW 88
// energyVDialog = 1 ;
5098: LD_ADDR_EXP 33
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5106: LD_INT 46
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: CALL_OW 321
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: PUSH
5121: LD_EXP 33
5125: PUSH
5126: LD_INT 0
5128: EQUAL
5129: AND
5130: IFFALSE 5152
// begin Say ( JMM , D9c-JMM-1b ) ;
5132: LD_EXP 1
5136: PPUSH
5137: LD_STRING D9c-JMM-1b
5139: PPUSH
5140: CALL_OW 88
// energyVDialog = 1 ;
5144: LD_ADDR_EXP 33
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5152: LD_INT 46
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 321
5162: PUSH
5163: LD_INT 2
5165: EQUAL
5166: PUSH
5167: LD_INT 21
5169: PPUSH
5170: LD_INT 1
5172: PPUSH
5173: CALL_OW 321
5177: PUSH
5178: LD_INT 2
5180: EQUAL
5181: AND
5182: PUSH
5183: LD_EXP 33
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: AND
5192: IFFALSE 5214
// begin Say ( JMM , D9c-JMM-1c ) ;
5194: LD_EXP 1
5198: PPUSH
5199: LD_STRING D9c-JMM-1c
5201: PPUSH
5202: CALL_OW 88
// energyVDialog = 1 ;
5206: LD_ADDR_EXP 33
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ; end ; end ;
5214: LD_VAR 0 1
5218: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5226: LD_VAR 0 1
5230: NOT
5231: PUSH
5232: LD_VAR 0 1
5236: PPUSH
5237: CALL_OW 256
5241: PUSH
5242: LD_INT 250
5244: LESS
5245: OR
5246: PUSH
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 314
5256: PUSH
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 261
5266: PUSH
5267: LD_INT 20
5269: GREATER
5270: AND
5271: OR
5272: IFFALSE 5276
// exit ;
5274: GO 5641
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5276: LD_VAR 0 1
5280: PPUSH
5281: CALL_OW 261
5285: PUSH
5286: LD_INT 20
5288: LESS
5289: PUSH
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 110
5299: PUSH
5300: LD_INT 21
5302: EQUAL
5303: NOT
5304: AND
5305: IFFALSE 5332
// begin ComStop ( bulldozer ) ;
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_INT 21
5323: PPUSH
5324: CALL_OW 109
// exit ;
5328: GO 5641
// end else
5330: GO 5359
// if GetFuel ( bulldozer ) > 20 then
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 261
5341: PUSH
5342: LD_INT 20
5344: GREATER
5345: IFFALSE 5359
// SetTag ( bulldozer , 0 ) ;
5347: LD_VAR 0 1
5351: PPUSH
5352: LD_INT 0
5354: PPUSH
5355: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5359: LD_ADDR_VAR 0 5
5363: PUSH
5364: LD_VAR 0 2
5368: PPUSH
5369: CALL_OW 353
5373: ST_TO_ADDR
// tmp := [ ] ;
5374: LD_ADDR_VAR 0 6
5378: PUSH
5379: EMPTY
5380: ST_TO_ADDR
// for i = 1 to list do
5381: LD_ADDR_VAR 0 4
5385: PUSH
5386: DOUBLE
5387: LD_INT 1
5389: DEC
5390: ST_TO_ADDR
5391: LD_VAR 0 5
5395: PUSH
5396: FOR_TO
5397: IFFALSE 5495
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5399: LD_VAR 0 5
5403: PUSH
5404: LD_VAR 0 4
5408: ARRAY
5409: PUSH
5410: LD_INT 1
5412: ARRAY
5413: PPUSH
5414: LD_VAR 0 5
5418: PUSH
5419: LD_VAR 0 4
5423: ARRAY
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: PPUSH
5429: CALL_OW 554
5433: IFFALSE 5493
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5435: LD_ADDR_VAR 0 6
5439: PUSH
5440: LD_VAR 0 6
5444: PPUSH
5445: LD_VAR 0 6
5449: PUSH
5450: LD_INT 1
5452: PLUS
5453: PPUSH
5454: LD_VAR 0 5
5458: PUSH
5459: LD_VAR 0 4
5463: ARRAY
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PUSH
5469: LD_VAR 0 5
5473: PUSH
5474: LD_VAR 0 4
5478: ARRAY
5479: PUSH
5480: LD_INT 2
5482: ARRAY
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PPUSH
5488: CALL_OW 1
5492: ST_TO_ADDR
// end ;
5493: GO 5396
5495: POP
5496: POP
// ComStop ( bulldozer ) ;
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5506: LD_ADDR_VAR 0 7
5510: PUSH
5511: LD_VAR 0 1
5515: PPUSH
5516: CALL_OW 250
5520: PUSH
5521: LD_VAR 0 1
5525: PPUSH
5526: CALL_OW 251
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: ST_TO_ADDR
// for i = tmp downto 1 do
5535: LD_ADDR_VAR 0 4
5539: PUSH
5540: DOUBLE
5541: LD_VAR 0 6
5545: INC
5546: ST_TO_ADDR
5547: LD_INT 1
5549: PUSH
5550: FOR_DOWNTO
5551: IFFALSE 5639
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5553: LD_ADDR_VAR 0 7
5557: PUSH
5558: LD_VAR 0 7
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: PPUSH
5567: LD_VAR 0 7
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: LD_VAR 0 6
5580: PPUSH
5581: CALL 5742 0 3
5585: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5586: LD_VAR 0 1
5590: PPUSH
5591: LD_VAR 0 7
5595: PUSH
5596: LD_INT 1
5598: ARRAY
5599: PPUSH
5600: LD_VAR 0 7
5604: PUSH
5605: LD_INT 2
5607: ARRAY
5608: PPUSH
5609: CALL 5646 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: LD_VAR 0 6
5622: PPUSH
5623: LD_VAR 0 7
5627: PUSH
5628: LD_INT 3
5630: ARRAY
5631: PPUSH
5632: CALL_OW 3
5636: ST_TO_ADDR
// end ;
5637: GO 5550
5639: POP
5640: POP
// end ;
5641: LD_VAR 0 3
5645: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5646: LD_INT 0
5648: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5649: LD_VAR 0 2
5653: PPUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: CALL_OW 351
5663: PUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: CALL_OW 554
5678: AND
5679: PUSH
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: CALL_OW 488
5694: AND
5695: PUSH
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 428
5710: PUSH
5711: LD_INT 1
5713: NEG
5714: EQUAL
5715: AND
5716: IFFALSE 5737
// AddComMoveXY ( bulldozer , x , y ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_VAR 0 3
5732: PPUSH
5733: CALL_OW 171
// end ;
5737: LD_VAR 0 4
5741: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
5749: PPUSH
5750: PPUSH
// dist := 99999 ;
5751: LD_ADDR_VAR 0 6
5755: PUSH
5756: LD_INT 99999
5758: ST_TO_ADDR
// for i = 1 to list do
5759: LD_ADDR_VAR 0 5
5763: PUSH
5764: DOUBLE
5765: LD_INT 1
5767: DEC
5768: ST_TO_ADDR
5769: LD_VAR 0 3
5773: PUSH
5774: FOR_TO
5775: IFFALSE 5913
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5777: LD_ADDR_VAR 0 7
5781: PUSH
5782: LD_VAR 0 1
5786: PPUSH
5787: LD_VAR 0 2
5791: PPUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_VAR 0 5
5801: ARRAY
5802: PUSH
5803: LD_INT 1
5805: ARRAY
5806: PPUSH
5807: LD_VAR 0 3
5811: PUSH
5812: LD_VAR 0 5
5816: ARRAY
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PPUSH
5822: CALL_OW 298
5826: ST_TO_ADDR
// if d = 0 then
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 0
5834: EQUAL
5835: IFFALSE 5839
// continue ;
5837: GO 5774
// if d < dist then
5839: LD_VAR 0 7
5843: PUSH
5844: LD_VAR 0 6
5848: LESS
5849: IFFALSE 5911
// begin _x := list [ i ] [ 1 ] ;
5851: LD_ADDR_VAR 0 8
5855: PUSH
5856: LD_VAR 0 3
5860: PUSH
5861: LD_VAR 0 5
5865: ARRAY
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5871: LD_ADDR_VAR 0 9
5875: PUSH
5876: LD_VAR 0 3
5880: PUSH
5881: LD_VAR 0 5
5885: ARRAY
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: ST_TO_ADDR
// _i := i ;
5891: LD_ADDR_VAR 0 10
5895: PUSH
5896: LD_VAR 0 5
5900: ST_TO_ADDR
// dist := d ;
5901: LD_ADDR_VAR 0 6
5905: PUSH
5906: LD_VAR 0 7
5910: ST_TO_ADDR
// end ; end ;
5911: GO 5774
5913: POP
5914: POP
// result := [ _x , _y , _i , dist ] ;
5915: LD_ADDR_VAR 0 4
5919: PUSH
5920: LD_VAR 0 8
5924: PUSH
5925: LD_VAR 0 9
5929: PUSH
5930: LD_VAR 0 10
5934: PUSH
5935: LD_VAR 0 6
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: ST_TO_ADDR
// end ;
5946: LD_VAR 0 4
5950: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// for i = 1 to 72 do
5955: LD_ADDR_VAR 0 5
5959: PUSH
5960: DOUBLE
5961: LD_INT 1
5963: DEC
5964: ST_TO_ADDR
5965: LD_INT 72
5967: PUSH
5968: FOR_TO
5969: IFFALSE 6023
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5971: LD_VAR 0 5
5975: PPUSH
5976: LD_VAR 0 1
5980: PPUSH
5981: CALL_OW 321
5985: PUSH
5986: LD_INT 1
5988: EQUAL
5989: PUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: LD_VAR 0 3
5999: PPUSH
6000: CALL_OW 482
6004: AND
6005: IFFALSE 6021
// AddComResearch ( lab , i ) ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 5
6016: PPUSH
6017: CALL_OW 184
6021: GO 5968
6023: POP
6024: POP
// end ;
6025: LD_VAR 0 4
6029: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
6036: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6037: LD_ADDR_VAR 0 7
6041: PUSH
6042: LD_VAR 0 2
6046: PPUSH
6047: CALL_OW 313
6051: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6052: LD_ADDR_VAR 0 8
6056: PUSH
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_INT 22
6064: PUSH
6065: LD_VAR 0 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 2
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 24
6086: PUSH
6087: LD_INT 750
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: LD_INT 54
6099: PUSH
6100: EMPTY
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 70
6117: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6118: LD_ADDR_VAR 0 5
6122: PUSH
6123: LD_VAR 0 3
6127: PPUSH
6128: LD_INT 22
6130: PUSH
6131: LD_VAR 0 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 21
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: LD_INT 24
6155: PUSH
6156: LD_INT 1000
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: EMPTY
6173: LIST
6174: PPUSH
6175: CALL_OW 70
6179: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6180: LD_VAR 0 5
6184: NOT
6185: PUSH
6186: LD_INT 22
6188: PUSH
6189: LD_VAR 0 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 24
6210: PUSH
6211: LD_INT 250
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: PPUSH
6223: CALL_OW 69
6227: NOT
6228: AND
6229: IFFALSE 6233
// exit ;
6231: GO 6329
// if buildingsList and engineerOkInside then
6233: LD_VAR 0 5
6237: PUSH
6238: LD_VAR 0 7
6242: AND
6243: IFFALSE 6269
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6245: LD_VAR 0 7
6249: PPUSH
6250: LD_INT 25
6252: PUSH
6253: LD_INT 2
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 72
6264: PPUSH
6265: CALL_OW 122
// if buildingsList and engineerOkOutside then
6269: LD_VAR 0 5
6273: PUSH
6274: LD_VAR 0 8
6278: AND
6279: IFFALSE 6299
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6299: LD_VAR 0 5
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: PUSH
6308: LD_VAR 0 8
6312: AND
6313: IFFALSE 6329
// ComEnterUnit ( engineerOkOutside , building ) ;
6315: LD_VAR 0 8
6319: PPUSH
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL_OW 120
// end ;
6329: LD_VAR 0 4
6333: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6343: LD_ADDR_VAR 0 6
6347: PUSH
6348: LD_INT 22
6350: PUSH
6351: LD_VAR 0 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 23
6372: PUSH
6373: LD_INT 2
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 251
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6401: LD_ADDR_VAR 0 7
6405: PUSH
6406: LD_VAR 0 3
6410: PPUSH
6411: LD_INT 22
6413: PUSH
6414: LD_VAR 0 1
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 23
6425: PUSH
6426: LD_INT 2
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 25
6435: PUSH
6436: LD_INT 4
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 50
6445: PUSH
6446: EMPTY
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PPUSH
6455: CALL_OW 70
6459: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6460: LD_ADDR_VAR 0 8
6464: PUSH
6465: LD_VAR 0 3
6469: PPUSH
6470: LD_INT 22
6472: PUSH
6473: LD_VAR 0 1
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 21
6484: PUSH
6485: LD_INT 1
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 3
6494: PUSH
6495: LD_INT 25
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 24
6514: PUSH
6515: LD_INT 750
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: PPUSH
6532: CALL_OW 70
6536: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6537: LD_ADDR_VAR 0 9
6541: PUSH
6542: LD_VAR 0 2
6546: PPUSH
6547: LD_INT 22
6549: PUSH
6550: LD_VAR 0 1
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 21
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 25
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 3
6588: PUSH
6589: LD_INT 24
6591: PUSH
6592: LD_INT 1000
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: PPUSH
6609: CALL_OW 70
6613: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6614: LD_VAR 0 8
6618: NOT
6619: PUSH
6620: LD_VAR 0 9
6624: NOT
6625: AND
6626: PUSH
6627: LD_VAR 0 6
6631: NOT
6632: AND
6633: IFFALSE 6637
// exit ;
6635: GO 6843
// if damageUnits and sciList then
6637: LD_VAR 0 8
6641: PUSH
6642: LD_VAR 0 6
6646: AND
6647: IFFALSE 6663
// ComMoveToArea ( damageUnits , healArea ) ;
6649: LD_VAR 0 8
6653: PPUSH
6654: LD_VAR 0 2
6658: PPUSH
6659: CALL_OW 113
// if unitsToHeal and sciList then
6663: LD_VAR 0 9
6667: PUSH
6668: LD_VAR 0 6
6672: AND
6673: IFFALSE 6684
// ComExitBuilding ( sciList ) ;
6675: LD_VAR 0 6
6679: PPUSH
6680: CALL_OW 122
// if unitsToHeal and sciListOutside then
6684: LD_VAR 0 9
6688: PUSH
6689: LD_VAR 0 7
6693: AND
6694: IFFALSE 6714
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6696: LD_VAR 0 7
6700: PPUSH
6701: LD_VAR 0 9
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: PPUSH
6710: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6714: LD_VAR 0 8
6718: PUSH
6719: LD_INT 0
6721: EQUAL
6722: PUSH
6723: LD_VAR 0 9
6727: PUSH
6728: LD_INT 0
6730: EQUAL
6731: AND
6732: PUSH
6733: LD_VAR 0 7
6737: AND
6738: IFFALSE 6843
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6740: LD_ADDR_VAR 0 10
6744: PUSH
6745: LD_INT 22
6747: PUSH
6748: LD_VAR 0 1
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 21
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 8
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 69
6786: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6787: LD_ADDR_VAR 0 11
6791: PUSH
6792: LD_INT 1
6794: PPUSH
6795: LD_VAR 0 10
6799: PPUSH
6800: CALL_OW 12
6804: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6805: LD_VAR 0 7
6809: PPUSH
6810: LD_INT 3
6812: PUSH
6813: LD_INT 60
6815: PUSH
6816: EMPTY
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PPUSH
6823: CALL_OW 72
6827: PPUSH
6828: LD_VAR 0 10
6832: PUSH
6833: LD_VAR 0 11
6837: ARRAY
6838: PPUSH
6839: CALL_OW 120
// end ; end ;
6843: LD_VAR 0 5
6847: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6852: LD_INT 22
6854: PUSH
6855: LD_VAR 0 1
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 21
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 69
6882: PUSH
6883: LD_VAR 0 3
6887: LESSEQUAL
6888: IFFALSE 6955
// for i = 1 to vehCount do
6890: LD_ADDR_VAR 0 9
6894: PUSH
6895: DOUBLE
6896: LD_INT 1
6898: DEC
6899: ST_TO_ADDR
6900: LD_VAR 0 3
6904: PUSH
6905: FOR_TO
6906: IFFALSE 6953
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6908: LD_VAR 0 2
6912: PPUSH
6913: LD_VAR 0 7
6917: PPUSH
6918: LD_VAR 0 5
6922: PPUSH
6923: LD_VAR 0 6
6927: PPUSH
6928: LD_VAR 0 4
6932: PUSH
6933: LD_INT 1
6935: PPUSH
6936: LD_VAR 0 4
6940: PPUSH
6941: CALL_OW 12
6945: ARRAY
6946: PPUSH
6947: CALL_OW 185
6951: GO 6905
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 8
6959: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
// for i = 1 to medicCount do
6973: LD_ADDR_VAR 0 11
6977: PUSH
6978: DOUBLE
6979: LD_INT 1
6981: DEC
6982: ST_TO_ADDR
6983: LD_VAR 0 4
6987: PUSH
6988: FOR_TO
6989: IFFALSE 7059
// begin uc_side = side ;
6991: LD_ADDR_OWVAR 20
6995: PUSH
6996: LD_VAR 0 1
7000: ST_TO_ADDR
// uc_nation = nation ;
7001: LD_ADDR_OWVAR 21
7005: PUSH
7006: LD_VAR 0 2
7010: ST_TO_ADDR
// InitHC_All ( ) ;
7011: CALL_OW 584
// PrepareHuman ( false , 4 , skil ) ;
7015: LD_INT 0
7017: PPUSH
7018: LD_INT 4
7020: PPUSH
7021: LD_VAR 0 5
7025: PPUSH
7026: CALL_OW 380
// un = CreateHuman ;
7030: LD_ADDR_VAR 0 13
7034: PUSH
7035: CALL_OW 44
7039: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7040: LD_VAR 0 13
7044: PPUSH
7045: LD_VAR 0 6
7049: PPUSH
7050: LD_INT 0
7052: PPUSH
7053: CALL_OW 49
// end ;
7057: GO 6988
7059: POP
7060: POP
// for i = 1 to soldierCount do
7061: LD_ADDR_VAR 0 11
7065: PUSH
7066: DOUBLE
7067: LD_INT 1
7069: DEC
7070: ST_TO_ADDR
7071: LD_VAR 0 3
7075: PUSH
7076: FOR_TO
7077: IFFALSE 7147
// begin uc_side = side ;
7079: LD_ADDR_OWVAR 20
7083: PUSH
7084: LD_VAR 0 1
7088: ST_TO_ADDR
// uc_nation = nation ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_VAR 0 2
7098: ST_TO_ADDR
// InitHC_All ( ) ;
7099: CALL_OW 584
// PrepareHuman ( false , 1 , skil ) ;
7103: LD_INT 0
7105: PPUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_VAR 0 5
7113: PPUSH
7114: CALL_OW 380
// un = CreateHuman ;
7118: LD_ADDR_VAR 0 13
7122: PUSH
7123: CALL_OW 44
7127: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7128: LD_VAR 0 13
7132: PPUSH
7133: LD_VAR 0 6
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7076
7147: POP
7148: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7149: LD_ADDR_VAR 0 16
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 1
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 25
7201: PUSH
7202: LD_INT 9
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7225: LD_ADDR_VAR 0 15
7229: PUSH
7230: LD_INT 22
7232: PUSH
7233: LD_VAR 0 1
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 4
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 69
7260: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7261: LD_VAR 0 15
7265: PPUSH
7266: LD_VAR 0 7
7270: PPUSH
7271: CALL_OW 113
// if strategy = 1 then
7275: LD_VAR 0 9
7279: PUSH
7280: LD_INT 1
7282: EQUAL
7283: IFFALSE 7731
// begin for i in soldiersOK_list do
7285: LD_ADDR_VAR 0 11
7289: PUSH
7290: LD_VAR 0 16
7294: PUSH
7295: FOR_IN
7296: IFFALSE 7360
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7298: LD_VAR 0 11
7302: PPUSH
7303: LD_INT 91
7305: PPUSH
7306: LD_INT 63
7308: PPUSH
7309: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7313: LD_VAR 0 11
7317: PPUSH
7318: LD_INT 101
7320: PPUSH
7321: LD_INT 53
7323: PPUSH
7324: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7328: LD_VAR 0 11
7332: PPUSH
7333: LD_INT 75
7335: PPUSH
7336: LD_INT 23
7338: PPUSH
7339: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7343: LD_VAR 0 11
7347: PPUSH
7348: LD_INT 78
7350: PPUSH
7351: LD_INT 8
7353: PPUSH
7354: CALL_OW 174
// end ;
7358: GO 7295
7360: POP
7361: POP
// wait ( 0 0$30 ) ;
7362: LD_INT 1050
7364: PPUSH
7365: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7369: LD_INT 35
7371: PPUSH
7372: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7376: LD_ADDR_VAR 0 14
7380: PUSH
7381: LD_INT 22
7383: PUSH
7384: LD_VAR 0 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: LD_INT 24
7401: PUSH
7402: LD_INT 550
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 24
7415: PUSH
7416: LD_INT 250
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7437: LD_ADDR_VAR 0 16
7441: PUSH
7442: LD_INT 22
7444: PUSH
7445: LD_VAR 0 1
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 25
7456: PUSH
7457: LD_INT 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 24
7466: PUSH
7467: LD_INT 1000
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: PPUSH
7479: CALL_OW 69
7483: ST_TO_ADDR
// if medicCount then
7484: LD_VAR 0 4
7488: IFFALSE 7528
// begin if damageUnit_list then
7490: LD_VAR 0 14
7494: IFFALSE 7528
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7496: LD_VAR 0 14
7500: PPUSH
7501: LD_VAR 0 7
7505: PPUSH
7506: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_VAR 0 14
7519: PUSH
7520: LD_INT 1
7522: ARRAY
7523: PPUSH
7524: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7528: LD_ADDR_VAR 0 11
7532: PUSH
7533: LD_VAR 0 16
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7715
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7541: LD_ADDR_VAR 0 19
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_VAR 0 8
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 69
7562: PPUSH
7563: LD_VAR 0 11
7567: PPUSH
7568: CALL_OW 74
7572: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7573: LD_ADDR_VAR 0 20
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 2
7592: PUSH
7593: LD_INT 59
7595: PUSH
7596: EMPTY
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 1
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 21
7611: PUSH
7612: LD_INT 2
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: PPUSH
7632: CALL_OW 69
7636: PPUSH
7637: LD_VAR 0 11
7641: PPUSH
7642: CALL_OW 74
7646: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7647: LD_VAR 0 11
7651: PPUSH
7652: LD_VAR 0 19
7656: PPUSH
7657: CALL_OW 296
7661: PUSH
7662: LD_INT 8
7664: PLUS
7665: PUSH
7666: LD_VAR 0 11
7670: PPUSH
7671: LD_VAR 0 20
7675: PPUSH
7676: CALL_OW 296
7680: LESS
7681: IFFALSE 7699
// ComAttackUnit ( i , target1 ) else
7683: LD_VAR 0 11
7687: PPUSH
7688: LD_VAR 0 19
7692: PPUSH
7693: CALL_OW 115
7697: GO 7713
// ComAttackUnit ( i , target2 ) ;
7699: LD_VAR 0 11
7703: PPUSH
7704: LD_VAR 0 20
7708: PPUSH
7709: CALL_OW 115
// end ;
7713: GO 7538
7715: POP
7716: POP
// until not soldiersOK_list and not damageUnit_list ;
7717: LD_VAR 0 16
7721: NOT
7722: PUSH
7723: LD_VAR 0 14
7727: NOT
7728: AND
7729: IFFALSE 7369
// end ; if strategy = 2 then
7731: LD_VAR 0 9
7735: PUSH
7736: LD_INT 2
7738: EQUAL
7739: IFFALSE 8157
// begin for i in soldiersOK_list do
7741: LD_ADDR_VAR 0 11
7745: PUSH
7746: LD_VAR 0 16
7750: PUSH
7751: FOR_IN
7752: IFFALSE 7786
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7754: LD_VAR 0 11
7758: PPUSH
7759: LD_INT 91
7761: PPUSH
7762: LD_INT 63
7764: PPUSH
7765: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7769: LD_VAR 0 11
7773: PPUSH
7774: LD_INT 75
7776: PPUSH
7777: LD_INT 33
7779: PPUSH
7780: CALL_OW 174
// end ;
7784: GO 7751
7786: POP
7787: POP
// wait ( 0 0$10 ) ;
7788: LD_INT 350
7790: PPUSH
7791: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7795: LD_INT 105
7797: PPUSH
7798: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7802: LD_ADDR_VAR 0 14
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: LD_INT 24
7827: PUSH
7828: LD_INT 550
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 24
7841: PUSH
7842: LD_INT 250
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 69
7862: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7863: LD_ADDR_VAR 0 16
7867: PUSH
7868: LD_INT 22
7870: PUSH
7871: LD_VAR 0 1
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 25
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 24
7892: PUSH
7893: LD_INT 1000
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: PPUSH
7905: CALL_OW 69
7909: ST_TO_ADDR
// if medicCount then
7910: LD_VAR 0 4
7914: IFFALSE 7954
// begin if damageUnit_list then
7916: LD_VAR 0 14
7920: IFFALSE 7954
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7922: LD_VAR 0 14
7926: PPUSH
7927: LD_VAR 0 7
7931: PPUSH
7932: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7936: LD_VAR 0 4
7940: PPUSH
7941: LD_VAR 0 14
7945: PUSH
7946: LD_INT 1
7948: ARRAY
7949: PPUSH
7950: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7954: LD_ADDR_VAR 0 11
7958: PUSH
7959: LD_VAR 0 16
7963: PUSH
7964: FOR_IN
7965: IFFALSE 8141
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7967: LD_ADDR_VAR 0 19
7971: PUSH
7972: LD_INT 22
7974: PUSH
7975: LD_VAR 0 8
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PPUSH
7984: CALL_OW 69
7988: PPUSH
7989: LD_VAR 0 11
7993: PPUSH
7994: CALL_OW 74
7998: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7999: LD_ADDR_VAR 0 20
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 8
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: LD_INT 59
8021: PUSH
8022: EMPTY
8023: LIST
8024: PUSH
8025: LD_INT 21
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: LD_INT 21
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: PPUSH
8058: CALL_OW 69
8062: PPUSH
8063: LD_VAR 0 11
8067: PPUSH
8068: CALL_OW 74
8072: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8073: LD_VAR 0 11
8077: PPUSH
8078: LD_VAR 0 19
8082: PPUSH
8083: CALL_OW 296
8087: PUSH
8088: LD_INT 8
8090: PLUS
8091: PUSH
8092: LD_VAR 0 11
8096: PPUSH
8097: LD_VAR 0 20
8101: PPUSH
8102: CALL_OW 296
8106: LESS
8107: IFFALSE 8125
// ComAttackUnit ( i , target1 ) else
8109: LD_VAR 0 11
8113: PPUSH
8114: LD_VAR 0 19
8118: PPUSH
8119: CALL_OW 115
8123: GO 8139
// ComAttackUnit ( i , target2 ) ;
8125: LD_VAR 0 11
8129: PPUSH
8130: LD_VAR 0 20
8134: PPUSH
8135: CALL_OW 115
// end ;
8139: GO 7964
8141: POP
8142: POP
// until not soldiersOK_list and not damageUnit_list ;
8143: LD_VAR 0 16
8147: NOT
8148: PUSH
8149: LD_VAR 0 14
8153: NOT
8154: AND
8155: IFFALSE 7795
// end ; if medic_list then
8157: LD_VAR 0 15
8161: IFFALSE 8301
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8163: LD_ADDR_VAR 0 15
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_VAR 0 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 25
8182: PUSH
8183: LD_INT 4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 50
8192: PUSH
8193: EMPTY
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8206: LD_INT 35
8208: PPUSH
8209: CALL_OW 67
// for i in medic_list do
8213: LD_ADDR_VAR 0 11
8217: PUSH
8218: LD_VAR 0 15
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8292
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8226: LD_VAR 0 11
8230: PPUSH
8231: CALL_OW 314
8235: NOT
8236: PUSH
8237: LD_VAR 0 11
8241: PPUSH
8242: LD_INT 4
8244: PPUSH
8245: CALL_OW 308
8249: NOT
8250: AND
8251: IFFALSE 8267
// ComMoveToArea ( i , RussianAttack ) else
8253: LD_VAR 0 11
8257: PPUSH
8258: LD_INT 4
8260: PPUSH
8261: CALL_OW 113
8265: GO 8290
// if IsInArea ( i , RussianAttack ) then
8267: LD_VAR 0 11
8271: PPUSH
8272: LD_INT 4
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8290
// RemoveUnit ( i ) ;
8281: LD_VAR 0 11
8285: PPUSH
8286: CALL_OW 64
8290: GO 8223
8292: POP
8293: POP
// until not medic_list ;
8294: LD_VAR 0 15
8298: NOT
8299: IFFALSE 8163
// end ; end ; end_of_file
8301: LD_VAR 0 10
8305: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8306: LD_INT 0
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
// InGameOn ;
8313: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8317: LD_ADDR_VAR 0 3
8321: PUSH
8322: LD_EXP 8
8326: PUSH
8327: LD_EXP 9
8331: PUSH
8332: LD_EXP 10
8336: PUSH
8337: LD_EXP 11
8341: PUSH
8342: LD_EXP 12
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8354: LD_ADDR_VAR 0 4
8358: PUSH
8359: LD_INT 46
8361: PUSH
8362: LD_INT 45
8364: PUSH
8365: LD_INT 44
8367: PUSH
8368: LD_INT 43
8370: PUSH
8371: LD_INT 42
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8381: LD_ADDR_VAR 0 5
8385: PUSH
8386: LD_INT 14
8388: PUSH
8389: LD_INT 12
8391: PUSH
8392: LD_INT 10
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 6
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8408: LD_EXP 11
8412: PPUSH
8413: LD_INT 31
8415: PPUSH
8416: LD_INT 59
8418: PPUSH
8419: LD_INT 19
8421: PPUSH
8422: LD_INT 5
8424: PPUSH
8425: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8429: LD_INT 32
8431: PPUSH
8432: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8436: LD_INT 32
8438: PPUSH
8439: LD_INT 51
8441: PPUSH
8442: LD_INT 26
8444: PPUSH
8445: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8449: LD_INT 32
8451: PPUSH
8452: LD_INT 53
8454: PPUSH
8455: LD_INT 23
8457: PPUSH
8458: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8462: LD_INT 32
8464: PPUSH
8465: LD_INT 52
8467: PPUSH
8468: LD_INT 19
8470: PPUSH
8471: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8475: LD_INT 35
8477: PPUSH
8478: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8482: LD_INT 32
8484: PPUSH
8485: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8489: LD_INT 32
8491: PPUSH
8492: CALL_OW 250
8496: PUSH
8497: LD_INT 52
8499: EQUAL
8500: PUSH
8501: LD_INT 32
8503: PPUSH
8504: CALL_OW 251
8508: PUSH
8509: LD_INT 19
8511: EQUAL
8512: AND
8513: IFFALSE 8475
// ComExitVehicle ( JMM ) ;
8515: LD_EXP 1
8519: PPUSH
8520: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8524: LD_EXP 7
8528: PPUSH
8529: LD_EXP 1
8533: PPUSH
8534: CALL_OW 119
// wait ( 0 0$01 ) ;
8538: LD_INT 35
8540: PPUSH
8541: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8545: LD_EXP 1
8549: PPUSH
8550: LD_INT 46
8552: PPUSH
8553: LD_INT 10
8555: PPUSH
8556: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8560: LD_EXP 1
8564: PPUSH
8565: LD_EXP 7
8569: PPUSH
8570: CALL_OW 179
// wait ( 0 0$4 ) ;
8574: LD_INT 140
8576: PPUSH
8577: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8581: LD_EXP 1
8585: PPUSH
8586: LD_STRING D1-JMM-1
8588: PPUSH
8589: CALL_OW 88
// if not dialogue_skipped then
8593: LD_OWVAR 59
8597: NOT
8598: IFFALSE 9255
// begin for i := 1 to gammaSquad do
8600: LD_ADDR_VAR 0 2
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 3
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8677
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8618: LD_VAR 0 3
8622: PUSH
8623: LD_VAR 0 2
8627: ARRAY
8628: PPUSH
8629: LD_VAR 0 4
8633: PUSH
8634: LD_VAR 0 2
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 5
8644: PUSH
8645: LD_VAR 0 2
8649: ARRAY
8650: PPUSH
8651: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8655: LD_VAR 0 3
8659: PUSH
8660: LD_VAR 0 2
8664: ARRAY
8665: PPUSH
8666: LD_EXP 1
8670: PPUSH
8671: CALL_OW 179
// end ;
8675: GO 8615
8677: POP
8678: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8679: LD_EXP 4
8683: PPUSH
8684: LD_INT 41
8686: PPUSH
8687: LD_INT 4
8689: PPUSH
8690: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8694: LD_EXP 4
8698: PPUSH
8699: LD_EXP 1
8703: PPUSH
8704: CALL_OW 179
// if Lisa = false and Bobby then
8708: LD_EXP 4
8712: PUSH
8713: LD_INT 0
8715: EQUAL
8716: PUSH
8717: LD_EXP 2
8721: AND
8722: IFFALSE 8753
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8724: LD_EXP 2
8728: PPUSH
8729: LD_INT 41
8731: PPUSH
8732: LD_INT 4
8734: PPUSH
8735: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8739: LD_EXP 2
8743: PPUSH
8744: LD_EXP 1
8748: PPUSH
8749: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8753: LD_EXP 4
8757: PUSH
8758: LD_INT 0
8760: EQUAL
8761: PUSH
8762: LD_EXP 2
8766: PUSH
8767: LD_INT 0
8769: EQUAL
8770: AND
8771: PUSH
8772: LD_EXP 3
8776: AND
8777: IFFALSE 8808
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8779: LD_EXP 3
8783: PPUSH
8784: LD_INT 41
8786: PPUSH
8787: LD_INT 4
8789: PPUSH
8790: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8794: LD_EXP 3
8798: PPUSH
8799: LD_EXP 1
8803: PPUSH
8804: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8808: LD_EXP 4
8812: PUSH
8813: LD_INT 0
8815: EQUAL
8816: PUSH
8817: LD_EXP 2
8821: PUSH
8822: LD_INT 0
8824: EQUAL
8825: AND
8826: PUSH
8827: LD_EXP 3
8831: PUSH
8832: LD_INT 0
8834: EQUAL
8835: AND
8836: IFFALSE 8867
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8838: LD_EXP 6
8842: PPUSH
8843: LD_INT 41
8845: PPUSH
8846: LD_INT 4
8848: PPUSH
8849: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8853: LD_EXP 6
8857: PPUSH
8858: LD_EXP 1
8862: PPUSH
8863: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8867: LD_EXP 7
8871: PPUSH
8872: LD_STRING D1-Brown-1
8874: PPUSH
8875: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8879: LD_EXP 1
8883: PPUSH
8884: LD_STRING D1-JMM-2
8886: PPUSH
8887: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8891: LD_EXP 7
8895: PPUSH
8896: LD_STRING D1-Brown-2
8898: PPUSH
8899: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8903: LD_EXP 1
8907: PPUSH
8908: LD_EXP 9
8912: PPUSH
8913: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8917: LD_EXP 9
8921: PPUSH
8922: LD_STRING D1-FSol1-2
8924: PPUSH
8925: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8929: LD_EXP 1
8933: PPUSH
8934: LD_EXP 8
8938: PPUSH
8939: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8943: LD_EXP 8
8947: PPUSH
8948: LD_STRING D1-Sol2-2
8950: PPUSH
8951: CALL_OW 88
// if Lisa then
8955: LD_EXP 4
8959: IFFALSE 8999
// begin ComTurnUnit ( JMM , Lisa ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_EXP 4
8970: PPUSH
8971: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8975: LD_EXP 4
8979: PPUSH
8980: LD_STRING D1-Lisa-2
8982: PPUSH
8983: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8987: LD_EXP 1
8991: PPUSH
8992: LD_STRING D1-JMM-3
8994: PPUSH
8995: CALL_OW 88
// end ; if Bobby then
8999: LD_EXP 2
9003: IFFALSE 9043
// begin ComTurnUnit ( JMM , Bobby ) ;
9005: LD_EXP 1
9009: PPUSH
9010: LD_EXP 2
9014: PPUSH
9015: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9019: LD_EXP 2
9023: PPUSH
9024: LD_STRING D1-Bobby-2
9026: PPUSH
9027: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9031: LD_EXP 1
9035: PPUSH
9036: LD_STRING D1-JMM-3
9038: PPUSH
9039: CALL_OW 88
// end ; if Cyrus then
9043: LD_EXP 3
9047: IFFALSE 9087
// begin ComTurnUnit ( JMM , Cyrus ) ;
9049: LD_EXP 1
9053: PPUSH
9054: LD_EXP 3
9058: PPUSH
9059: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9063: LD_EXP 3
9067: PPUSH
9068: LD_STRING D1-Cyrus-2
9070: PPUSH
9071: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9075: LD_EXP 1
9079: PPUSH
9080: LD_STRING D1-JMM-3
9082: PPUSH
9083: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9087: LD_EXP 1
9091: PPUSH
9092: LD_EXP 7
9096: PPUSH
9097: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9101: LD_EXP 1
9105: PPUSH
9106: LD_STRING D1-JMM-3a
9108: PPUSH
9109: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9113: LD_EXP 7
9117: PPUSH
9118: LD_INT 38
9120: PPUSH
9121: LD_INT 5
9123: PPUSH
9124: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9128: LD_EXP 7
9132: PPUSH
9133: LD_EXP 1
9137: PPUSH
9138: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9142: LD_EXP 1
9146: PPUSH
9147: LD_INT 40
9149: PPUSH
9150: LD_INT 7
9152: PPUSH
9153: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_EXP 7
9166: PPUSH
9167: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9171: LD_EXP 7
9175: PPUSH
9176: LD_STRING D1-Brown-3
9178: PPUSH
9179: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9183: LD_EXP 14
9187: PPUSH
9188: LD_STRING D1-Har-3
9190: PPUSH
9191: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9195: LD_EXP 1
9199: PPUSH
9200: LD_STRING D1-JMM-4
9202: PPUSH
9203: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9207: LD_EXP 14
9211: PPUSH
9212: LD_STRING D1-Har-4
9214: PPUSH
9215: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9219: LD_EXP 1
9223: PPUSH
9224: LD_STRING D1-JMM-5
9226: PPUSH
9227: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9231: LD_EXP 14
9235: PPUSH
9236: LD_STRING D1-Har-5
9238: PPUSH
9239: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9243: LD_EXP 1
9247: PPUSH
9248: LD_STRING D1-JMM-6
9250: PPUSH
9251: CALL_OW 88
// end ; InGameOff ;
9255: CALL_OW 9
// PrepareRussianConvoy ;
9259: CALL 3404 0 0
// ChangeMissionObjectives ( M1 ) ;
9263: LD_STRING M1
9265: PPUSH
9266: CALL_OW 337
// SaveForQuickRestart ;
9270: CALL_OW 22
// timerStatus = 1 ;
9274: LD_ADDR_EXP 29
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// startTimer = 1 ;
9282: LD_ADDR_EXP 30
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// bonusAvalaible = 1 ;
9290: LD_ADDR_EXP 44
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9298: LD_INT 105
9300: PPUSH
9301: CALL_OW 67
// DialogueOn ;
9305: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9309: LD_EXP 12
9313: PPUSH
9314: LD_STRING D9-Mech1-1
9316: PPUSH
9317: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9321: LD_EXP 1
9325: PPUSH
9326: LD_STRING D9-JMM-1
9328: PPUSH
9329: CALL_OW 88
// DialogueOff ;
9333: CALL_OW 7
// end ;
9337: LD_VAR 0 1
9341: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9342: LD_INT 47
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 321
9352: PUSH
9353: LD_INT 2
9355: EQUAL
9356: PUSH
9357: LD_EXP 31
9361: NOT
9362: AND
9363: PUSH
9364: LD_INT 22
9366: PUSH
9367: LD_INT 1
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 21
9376: PUSH
9377: LD_INT 3
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 30
9386: PUSH
9387: LD_INT 3
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 57
9396: PUSH
9397: EMPTY
9398: LIST
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 69
9410: AND
9411: IFFALSE 9645
9413: GO 9415
9415: DISABLE
// begin factoryDialog := true ;
9416: LD_ADDR_EXP 31
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// if IsOk ( Campell ) then
9424: LD_EXP 12
9428: PPUSH
9429: CALL_OW 302
9433: IFFALSE 9449
// Say ( Campell , D10-Mech1-1 ) else
9435: LD_EXP 12
9439: PPUSH
9440: LD_STRING D10-Mech1-1
9442: PPUSH
9443: CALL_OW 88
9447: GO 9645
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9449: LD_INT 22
9451: PUSH
9452: LD_INT 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 21
9461: PUSH
9462: LD_INT 1
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 25
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 26
9481: PUSH
9482: LD_INT 1
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: PUSH
9500: LD_EXP 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: DIFF
9508: IFFALSE 9582
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9510: LD_INT 22
9512: PUSH
9513: LD_INT 1
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 21
9522: PUSH
9523: LD_INT 1
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 25
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 26
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: PUSH
9561: LD_EXP 1
9565: PUSH
9566: EMPTY
9567: LIST
9568: DIFF
9569: PPUSH
9570: LD_STRING D10-Mech1-1
9572: PPUSH
9573: LD_STRING D10-Mech1-1
9575: PPUSH
9576: CALL 4598 0 3
9580: GO 9645
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9582: LD_INT 22
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 26
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 1
9619: ARRAY
9620: PPUSH
9621: CALL_OW 69
9625: PUSH
9626: LD_EXP 1
9630: PUSH
9631: EMPTY
9632: LIST
9633: DIFF
9634: PPUSH
9635: LD_STRING D10-Mech1-1
9637: PPUSH
9638: LD_STRING D10-Mech1-1
9640: PPUSH
9641: CALL 4598 0 3
// end ; end ;
9645: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9646: LD_INT 22
9648: PUSH
9649: LD_INT 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 30
9658: PUSH
9659: LD_INT 32
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 69
9674: PUSH
9675: LD_EXP 32
9679: PUSH
9680: LD_INT 0
9682: EQUAL
9683: AND
9684: IFFALSE 9920
9686: GO 9688
9688: DISABLE
// begin if IsOk ( Claptopn ) then
9689: LD_EXP 11
9693: PPUSH
9694: CALL_OW 302
9698: IFFALSE 9714
// Say ( Claptopn , D9b-Eng1-1 ) else
9700: LD_EXP 11
9704: PPUSH
9705: LD_STRING D9b-Eng1-1
9707: PPUSH
9708: CALL_OW 88
9712: GO 9906
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9714: LD_INT 22
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 21
9726: PUSH
9727: LD_INT 1
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 25
9736: PUSH
9737: LD_INT 3
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 26
9746: PUSH
9747: LD_INT 1
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PPUSH
9760: CALL_OW 69
9764: PUSH
9765: LD_EXP 1
9769: PUSH
9770: EMPTY
9771: LIST
9772: DIFF
9773: IFFALSE 9847
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9775: LD_INT 22
9777: PUSH
9778: LD_INT 1
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 21
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 25
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 26
9807: PUSH
9808: LD_INT 1
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 69
9825: PUSH
9826: LD_EXP 1
9830: PUSH
9831: EMPTY
9832: LIST
9833: DIFF
9834: PPUSH
9835: LD_STRING D9b-Eng1-1
9837: PPUSH
9838: LD_STRING D9b-Eng1-11
9840: PPUSH
9841: CALL 4598 0 3
9845: GO 9906
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9847: LD_INT 22
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 21
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 26
9869: PUSH
9870: LD_INT 1
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 69
9886: PUSH
9887: LD_EXP 1
9891: PUSH
9892: EMPTY
9893: LIST
9894: DIFF
9895: PPUSH
9896: LD_STRING D9b-Eng1-1
9898: PPUSH
9899: LD_STRING D9b-Eng1-1
9901: PPUSH
9902: CALL 4598 0 3
// end ; if energyVDialog = 0 then
9906: LD_EXP 33
9910: PUSH
9911: LD_INT 0
9913: EQUAL
9914: IFFALSE 9920
// EnergyDialog ;
9916: CALL 5003 0 0
// end ;
9920: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9921: LD_EXP 34
9925: PUSH
9926: LD_INT 1
9928: EQUAL
9929: PUSH
9930: LD_EXP 35
9934: PUSH
9935: LD_INT 1
9937: EQUAL
9938: AND
9939: IFFALSE 9951
9941: GO 9943
9943: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9944: LD_STRING M1a
9946: PPUSH
9947: CALL_OW 337
9951: END
// every 3 3$0 do
9952: GO 9954
9954: DISABLE
// PrepareFirstAttack ;
9955: CALL 4216 0 0
9959: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9960: LD_INT 22
9962: PUSH
9963: LD_INT 5
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 21
9972: PUSH
9973: LD_INT 1
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 3
9982: PUSH
9983: LD_INT 24
9985: PUSH
9986: LD_INT 250
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 69
10006: PUSH
10007: LD_INT 0
10009: GREATER
10010: PUSH
10011: LD_EXP 23
10015: PUSH
10016: LD_INT 1
10018: EQUAL
10019: AND
10020: IFFALSE 10321
10022: GO 10024
10024: DISABLE
10025: LD_INT 0
10027: PPUSH
// begin firstRussianAttack = 2 ;
10028: LD_ADDR_EXP 23
10032: PUSH
10033: LD_INT 2
10035: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10036: LD_INT 22
10038: PUSH
10039: LD_INT 5
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 21
10048: PUSH
10049: LD_INT 1
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 69
10064: PPUSH
10065: LD_INT 125
10067: PPUSH
10068: LD_INT 98
10070: PPUSH
10071: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10075: LD_INT 22
10077: PUSH
10078: LD_INT 1
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 21
10087: PUSH
10088: LD_INT 1
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: LD_EXP 1
10108: PUSH
10109: LD_EXP 7
10113: PUSH
10114: LD_EXP 4
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: DIFF
10124: PPUSH
10125: LD_STRING DAtt1-Sol1-1
10127: PPUSH
10128: LD_STRING DAtt1-FSol1-1
10130: PPUSH
10131: CALL 4598 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10135: LD_EXP 1
10139: PPUSH
10140: LD_STRING DAtt1-JMM-1
10142: PPUSH
10143: CALL_OW 88
// if Lisa then
10147: LD_EXP 4
10151: IFFALSE 10167
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10153: LD_EXP 4
10157: PPUSH
10158: LD_STRING DAtt1a-Lisa-1
10160: PPUSH
10161: CALL_OW 88
10165: GO 10238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10167: LD_INT 22
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 1
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 26
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PUSH
10207: LD_EXP 1
10211: PUSH
10212: LD_EXP 7
10216: PUSH
10217: LD_EXP 4
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: DIFF
10227: PPUSH
10228: LD_STRING DAtt1a-Sol1-1
10230: PPUSH
10231: LD_STRING DAtt1-FSol1-1
10233: PPUSH
10234: CALL 4598 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10238: LD_EXP 1
10242: PPUSH
10243: LD_STRING DAtt1a-JMM-1
10245: PPUSH
10246: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10250: LD_INT 22
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 26
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 69
10289: PUSH
10290: LD_EXP 1
10294: PUSH
10295: LD_EXP 7
10299: PUSH
10300: LD_EXP 4
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: DIFF
10310: PPUSH
10311: LD_STRING DAtt1b-Sol1-1
10313: PPUSH
10314: LD_STRING DAtt1a-Sol1-1
10316: PPUSH
10317: CALL 4598 0 3
// end ;
10321: PPOPN 1
10323: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10324: LD_EXP 23
10328: PUSH
10329: LD_INT 2
10331: EQUAL
10332: PUSH
10333: LD_INT 5
10335: PPUSH
10336: LD_INT 22
10338: PUSH
10339: LD_INT 5
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 21
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PPUSH
10360: CALL_OW 70
10364: AND
10365: IFFALSE 10423
10367: GO 10369
10369: DISABLE
10370: LD_INT 0
10372: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10373: LD_ADDR_VAR 0 1
10377: PUSH
10378: LD_INT 22
10380: PUSH
10381: LD_INT 5
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 21
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PPUSH
10402: CALL_OW 69
10406: PUSH
10407: FOR_IN
10408: IFFALSE 10421
// RemoveUnit ( i ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL_OW 64
10419: GO 10407
10421: POP
10422: POP
// end ;
10423: PPOPN 1
10425: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10426: LD_INT 22
10428: PUSH
10429: LD_INT 5
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: PPUSH
10439: CALL_OW 69
10443: PUSH
10444: LD_INT 0
10446: EQUAL
10447: PUSH
10448: LD_EXP 23
10452: PUSH
10453: LD_INT 2
10455: EQUAL
10456: AND
10457: IFFALSE 10470
10459: GO 10461
10461: DISABLE
// firstRussianAttack = 3 ;
10462: LD_ADDR_EXP 23
10466: PUSH
10467: LD_INT 3
10469: ST_TO_ADDR
10470: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10471: LD_EXP 28
10475: PUSH
10476: LD_INT 0
10478: EQUAL
10479: IFFALSE 10560
10481: GO 10483
10483: DISABLE
// begin timerStatus = 4 ;
10484: LD_ADDR_EXP 29
10488: PUSH
10489: LD_INT 4
10491: ST_TO_ADDR
// DialogueOn ;
10492: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10496: LD_EXP 13
10500: PPUSH
10501: LD_STRING D2-Don-1
10503: PPUSH
10504: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10508: LD_EXP 1
10512: PPUSH
10513: LD_STRING D2-JMM-1
10515: PPUSH
10516: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10520: LD_EXP 13
10524: PPUSH
10525: LD_STRING D2-Don-2
10527: PPUSH
10528: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10532: LD_EXP 1
10536: PPUSH
10537: LD_STRING D2-JMM-2
10539: PPUSH
10540: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10544: LD_EXP 13
10548: PPUSH
10549: LD_STRING D2-Don-3
10551: PPUSH
10552: CALL_OW 94
// DialogueOff ;
10556: CALL_OW 7
// end ;
10560: END
// every 12 12$0 do var tmp ;
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
// begin PrepareDonaldsonArmy ;
10567: CALL 1187 0 0
// CenterNowOnUnits ( Donaldson ) ;
10571: LD_EXP 13
10575: PPUSH
10576: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10580: LD_INT 22
10582: PUSH
10583: LD_INT 6
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: NOT
10595: IFFALSE 10611
// begin wait ( 3 ) ;
10597: LD_INT 3
10599: PPUSH
10600: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10604: LD_STRING ACH_BASE
10606: PPUSH
10607: CALL_OW 543
// end ; tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
10611: LD_ADDR_VAR 0 1
10615: PUSH
10616: LD_INT 22
10618: PUSH
10619: LD_INT 4
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 26
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: PPUSH
10651: CALL_OW 69
10655: PUSH
10656: LD_EXP 5
10660: PUSH
10661: EMPTY
10662: LIST
10663: DIFF
10664: ST_TO_ADDR
// DialogueOn ;
10665: CALL_OW 6
// tmp := tmp diff DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10669: LD_ADDR_VAR 0 1
10673: PUSH
10674: LD_VAR 0 1
10678: PUSH
10679: LD_VAR 0 1
10683: PPUSH
10684: LD_STRING D3-Sol1-1
10686: PPUSH
10687: LD_STRING D3-Sol1-1
10689: PPUSH
10690: CALL 4598 0 3
10694: DIFF
10695: ST_TO_ADDR
// DialogRandom ( tmp , D3-Sol2-1 , D3-Sol2-1 ) ;
10696: LD_VAR 0 1
10700: PPUSH
10701: LD_STRING D3-Sol2-1
10703: PPUSH
10704: LD_STRING D3-Sol2-1
10706: PPUSH
10707: CALL 4598 0 3
// if Frank then
10711: LD_EXP 5
10715: IFFALSE 10729
// Say ( Frank , D3-Frank-1 ) ;
10717: LD_EXP 5
10721: PPUSH
10722: LD_STRING D3-Frank-1
10724: PPUSH
10725: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10729: LD_EXP 13
10733: PPUSH
10734: LD_STRING D3-Don-1
10736: PPUSH
10737: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10741: LD_EXP 13
10745: PPUSH
10746: LD_STRING D3-Don-1a
10748: PPUSH
10749: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10753: LD_EXP 1
10757: PPUSH
10758: LD_STRING D3-JMM-1
10760: PPUSH
10761: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10765: LD_EXP 13
10769: PPUSH
10770: LD_STRING D3-Don-2
10772: PPUSH
10773: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10777: LD_INT 22
10779: PUSH
10780: LD_INT 6
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 21
10789: PUSH
10790: LD_INT 1
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PPUSH
10801: CALL_OW 69
10805: IFFALSE 10943
// begin Say ( JMM , D3-JMM-2 ) ;
10807: LD_EXP 1
10811: PPUSH
10812: LD_STRING D3-JMM-2
10814: PPUSH
10815: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10819: LD_EXP 13
10823: PPUSH
10824: LD_STRING D3-Don-3
10826: PPUSH
10827: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10831: LD_EXP 1
10835: PPUSH
10836: LD_STRING D3-JMM-3
10838: PPUSH
10839: CALL_OW 88
// if IsOK ( Frank ) then
10843: LD_EXP 5
10847: PPUSH
10848: CALL_OW 302
10852: IFFALSE 10866
// Say ( Frank , D3-Frank-3 ) ;
10854: LD_EXP 5
10858: PPUSH
10859: LD_STRING D3-Frank-3
10861: PPUSH
10862: CALL_OW 88
// DialogueOff ;
10866: CALL_OW 7
// if IsOk ( Frank ) then
10870: LD_EXP 5
10874: PPUSH
10875: CALL_OW 302
10879: IFFALSE 10941
// begin SetSide ( Frank , 0 ) ;
10881: LD_EXP 5
10885: PPUSH
10886: LD_INT 0
10888: PPUSH
10889: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10893: LD_EXP 5
10897: PPUSH
10898: LD_INT 12
10900: PPUSH
10901: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10905: LD_EXP 5
10909: PPUSH
10910: LD_STRING 04t_Frank
10912: PPUSH
10913: CALL_OW 38
// wait ( 0 0$3 ) ;
10917: LD_INT 105
10919: PPUSH
10920: CALL_OW 67
// frankScoutBase = 1 ;
10924: LD_ADDR_EXP 25
10928: PUSH
10929: LD_INT 1
10931: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10932: LD_EXP 5
10936: PPUSH
10937: CALL_OW 64
// end ; end else
10941: GO 11030
// begin Say ( JMM , D3-JMM-4 ) ;
10943: LD_EXP 1
10947: PPUSH
10948: LD_STRING D3-JMM-4
10950: PPUSH
10951: CALL_OW 88
// DialogueOff ;
10955: CALL_OW 7
// if IsOk ( Frank ) then
10959: LD_EXP 5
10963: PPUSH
10964: CALL_OW 302
10968: IFFALSE 11030
// begin SetSide ( Frank , 0 ) ;
10970: LD_EXP 5
10974: PPUSH
10975: LD_INT 0
10977: PPUSH
10978: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10982: LD_EXP 5
10986: PPUSH
10987: LD_INT 12
10989: PPUSH
10990: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10994: LD_EXP 5
10998: PPUSH
10999: LD_STRING 04t_Frank
11001: PPUSH
11002: CALL_OW 38
// wait ( 0 0$3 ) ;
11006: LD_INT 105
11008: PPUSH
11009: CALL_OW 67
// frankScoutBase = 1 ;
11013: LD_ADDR_EXP 25
11017: PUSH
11018: LD_INT 1
11020: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11021: LD_EXP 5
11025: PPUSH
11026: CALL_OW 64
// end ; end ; end ;
11030: PPOPN 1
11032: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11033: LD_EXP 13
11037: PPUSH
11038: CALL_OW 255
11042: PUSH
11043: LD_INT 4
11045: EQUAL
11046: PUSH
11047: LD_EXP 13
11051: PPUSH
11052: CALL_OW 302
11056: AND
11057: IFFALSE 11297
11059: GO 11061
11061: DISABLE
11062: LD_INT 0
11064: PPUSH
11065: PPUSH
// begin wait ( 5 5$00 ) ;
11066: LD_INT 10500
11068: PPUSH
11069: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11073: LD_EXP 13
11077: PPUSH
11078: CALL_OW 255
11082: PUSH
11083: LD_INT 1
11085: EQUAL
11086: PUSH
11087: LD_EXP 13
11091: PPUSH
11092: CALL_OW 301
11096: OR
11097: IFFALSE 11101
// exit ;
11099: GO 11297
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11101: LD_EXP 13
11105: PPUSH
11106: LD_STRING D3b-Don-1
11108: PPUSH
11109: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11113: LD_ADDR_EXP 41
11117: PUSH
11118: LD_INT 1
11120: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11121: LD_ADDR_VAR 0 2
11125: PUSH
11126: LD_INT 22
11128: PUSH
11129: LD_INT 4
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 69
11140: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11141: LD_INT 35
11143: PPUSH
11144: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11148: LD_VAR 0 2
11152: NOT
11153: PUSH
11154: LD_INT 22
11156: PUSH
11157: LD_INT 6
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: LD_INT 101
11166: PUSH
11167: LD_INT 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PPUSH
11178: CALL_OW 69
11182: OR
11183: IFFALSE 11141
// if not tmp then
11185: LD_VAR 0 2
11189: NOT
11190: IFFALSE 11194
// exit ;
11192: GO 11297
// for i in tmp do
11194: LD_ADDR_VAR 0 1
11198: PUSH
11199: LD_VAR 0 2
11203: PUSH
11204: FOR_IN
11205: IFFALSE 11224
// ComAgressiveMove ( i , 52 , 64 ) ;
11207: LD_VAR 0 1
11211: PPUSH
11212: LD_INT 52
11214: PPUSH
11215: LD_INT 64
11217: PPUSH
11218: CALL_OW 114
11222: GO 11204
11224: POP
11225: POP
// wait ( 0 0$10 ) ;
11226: LD_INT 350
11228: PPUSH
11229: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11233: LD_ADDR_VAR 0 1
11237: PUSH
11238: LD_INT 22
11240: PUSH
11241: LD_INT 4
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PPUSH
11248: CALL_OW 69
11252: PUSH
11253: LD_EXP 5
11257: DIFF
11258: PUSH
11259: FOR_IN
11260: IFFALSE 11276
// SetSide ( i , 1 ) ;
11262: LD_VAR 0 1
11266: PPUSH
11267: LD_INT 1
11269: PPUSH
11270: CALL_OW 235
11274: GO 11259
11276: POP
11277: POP
// if IsLive ( Donaldson ) then
11278: LD_EXP 13
11282: PPUSH
11283: CALL_OW 300
11287: IFFALSE 11297
// saveDonaldson := 1 ;
11289: LD_ADDR_EXP 24
11293: PUSH
11294: LD_INT 1
11296: ST_TO_ADDR
// end ;
11297: PPOPN 2
11299: END
// every 0 0$1 trigger not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11300: LD_EXP 24
11304: NOT
11305: PUSH
11306: LD_EXP 41
11310: NOT
11311: AND
11312: PUSH
11313: LD_INT 26
11315: PPUSH
11316: LD_INT 22
11318: PUSH
11319: LD_INT 1
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PPUSH
11326: CALL_OW 70
11330: PUSH
11331: LD_EXP 13
11335: PPUSH
11336: LD_EXP 1
11340: PPUSH
11341: CALL_OW 296
11345: PUSH
11346: LD_INT 6
11348: LESS
11349: OR
11350: AND
11351: IFFALSE 11406
11353: GO 11355
11355: DISABLE
11356: LD_INT 0
11358: PPUSH
// begin saveDonaldson := 1 ;
11359: LD_ADDR_EXP 24
11363: PUSH
11364: LD_INT 1
11366: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11367: LD_ADDR_VAR 0 1
11371: PUSH
11372: LD_INT 22
11374: PUSH
11375: LD_INT 4
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PPUSH
11382: CALL_OW 69
11386: PUSH
11387: FOR_IN
11388: IFFALSE 11404
// SetSide ( i , 1 ) ;
11390: LD_VAR 0 1
11394: PPUSH
11395: LD_INT 1
11397: PPUSH
11398: CALL_OW 235
11402: GO 11387
11404: POP
11405: POP
// end ;
11406: PPOPN 1
11408: END
// every 0 0$1 trigger frankScoutBase do
11409: LD_EXP 25
11413: IFFALSE 11778
11415: GO 11417
11417: DISABLE
// begin wait ( 2 2$30 ) ;
11418: LD_INT 5250
11420: PPUSH
11421: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11425: LD_INT 35
11427: PPUSH
11428: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11432: LD_INT 81
11434: PUSH
11435: LD_INT 4
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 92
11444: PUSH
11445: LD_INT 84
11447: PUSH
11448: LD_INT 28
11450: PUSH
11451: LD_INT 22
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PPUSH
11464: CALL_OW 69
11468: NOT
11469: IFFALSE 11425
// uc_side = 4 ;
11471: LD_ADDR_OWVAR 20
11475: PUSH
11476: LD_INT 4
11478: ST_TO_ADDR
// uc_nation = 1 ;
11479: LD_ADDR_OWVAR 21
11483: PUSH
11484: LD_INT 1
11486: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11487: LD_ADDR_EXP 5
11491: PUSH
11492: LD_STRING 04t_Frank
11494: PPUSH
11495: CALL_OW 34
11499: ST_TO_ADDR
// if not Frank then
11500: LD_EXP 5
11504: NOT
11505: IFFALSE 11509
// exit ;
11507: GO 11778
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11509: LD_EXP 5
11513: PPUSH
11514: LD_INT 13
11516: PPUSH
11517: LD_INT 0
11519: PPUSH
11520: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11524: LD_INT 35
11526: PPUSH
11527: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11531: LD_EXP 1
11535: PPUSH
11536: CALL_OW 310
11540: NOT
11541: PUSH
11542: LD_EXP 1
11546: PPUSH
11547: LD_INT 4
11549: PPUSH
11550: CALL_OW 296
11554: PUSH
11555: LD_INT 20
11557: LESS
11558: AND
11559: IFFALSE 11592
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11561: LD_EXP 5
11565: PPUSH
11566: LD_EXP 1
11570: PPUSH
11571: CALL_OW 250
11575: PPUSH
11576: LD_EXP 1
11580: PPUSH
11581: CALL_OW 251
11585: PPUSH
11586: CALL_OW 111
11590: GO 11607
// ComMoveXY ( Frank , 51 , 15 ) ;
11592: LD_EXP 5
11596: PPUSH
11597: LD_INT 51
11599: PPUSH
11600: LD_INT 15
11602: PPUSH
11603: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11607: LD_EXP 5
11611: PPUSH
11612: LD_EXP 1
11616: PPUSH
11617: CALL_OW 296
11621: PUSH
11622: LD_INT 10
11624: LESS
11625: IFFALSE 11524
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11627: LD_EXP 1
11631: PUSH
11632: LD_EXP 5
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PPUSH
11641: CALL_OW 87
// DialogueOn ;
11645: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11649: LD_EXP 5
11653: PPUSH
11654: LD_STRING D3a-Frank-1
11656: PPUSH
11657: CALL_OW 88
// if Lisa then
11661: LD_EXP 4
11665: IFFALSE 11715
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11667: LD_EXP 4
11671: PPUSH
11672: LD_STRING D3a-Lisa-1
11674: PPUSH
11675: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11679: LD_EXP 5
11683: PPUSH
11684: LD_STRING D3a-Frank-2
11686: PPUSH
11687: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11691: LD_EXP 4
11695: PPUSH
11696: LD_STRING D3a-Lisa-2
11698: PPUSH
11699: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11703: LD_EXP 5
11707: PPUSH
11708: LD_STRING D3a-Frank-3
11710: PPUSH
11711: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11715: LD_EXP 1
11719: PPUSH
11720: LD_STRING D3a-JMM-3
11722: PPUSH
11723: CALL_OW 88
// DialogueOff ;
11727: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11731: LD_EXP 5
11735: PPUSH
11736: LD_INT 1
11738: PPUSH
11739: CALL_OW 235
// InGameOn ;
11743: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11747: LD_INT 1
11749: PPUSH
11750: LD_INT 7
11752: PPUSH
11753: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11757: LD_INT 93
11759: PPUSH
11760: LD_INT 91
11762: PPUSH
11763: CALL_OW 84
// wait ( 0 0$5 ) ;
11767: LD_INT 175
11769: PPUSH
11770: CALL_OW 67
// InGameOff ;
11774: CALL_OW 9
// end ;
11778: END
// every 12 12$0 trigger Difficulty > 1 do
11779: LD_OWVAR 67
11783: PUSH
11784: LD_INT 1
11786: GREATER
11787: IFFALSE 11811
11789: GO 11791
11791: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11792: LD_INT 24
11794: PPUSH
11795: LD_INT 24
11797: PPUSH
11798: LD_INT 1
11800: PPUSH
11801: LD_INT 1
11803: PPUSH
11804: LD_INT 53
11806: PPUSH
11807: CALL_OW 185
11811: END
// every 18 18$0 do
11812: GO 11814
11814: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11815: LD_EXP 14
11819: PPUSH
11820: LD_STRING D4-Har-1
11822: PPUSH
11823: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11827: LD_EXP 1
11831: PPUSH
11832: LD_STRING D4-JMM-1
11834: PPUSH
11835: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11839: LD_EXP 14
11843: PPUSH
11844: LD_STRING D4-Har-2
11846: PPUSH
11847: CALL_OW 94
// case Query ( Q1 ) of 1 :
11851: LD_STRING Q1
11853: PPUSH
11854: CALL_OW 97
11858: PUSH
11859: LD_INT 1
11861: DOUBLE
11862: EQUAL
11863: IFTRUE 11867
11865: GO 11926
11867: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11868: LD_EXP 1
11872: PPUSH
11873: LD_STRING D5-JMM-1
11875: PPUSH
11876: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11880: LD_EXP 14
11884: PPUSH
11885: LD_STRING D5-Har-1
11887: PPUSH
11888: CALL_OW 94
// timeToSupport = 10 10$0 ;
11892: LD_ADDR_EXP 28
11896: PUSH
11897: LD_INT 21000
11899: ST_TO_ADDR
// timerStatus = 2 ;
11900: LD_ADDR_EXP 29
11904: PUSH
11905: LD_INT 2
11907: ST_TO_ADDR
// startTimer = 1 ;
11908: LD_ADDR_EXP 30
11912: PUSH
11913: LD_INT 1
11915: ST_TO_ADDR
// harrAnswer = 1 ;
11916: LD_ADDR_EXP 26
11920: PUSH
11921: LD_INT 1
11923: ST_TO_ADDR
// end ; 2 :
11924: GO 12061
11926: LD_INT 2
11928: DOUBLE
11929: EQUAL
11930: IFTRUE 11934
11932: GO 11993
11934: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11935: LD_EXP 1
11939: PPUSH
11940: LD_STRING D5-JMM-2
11942: PPUSH
11943: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11947: LD_EXP 14
11951: PPUSH
11952: LD_STRING D5-Har-2
11954: PPUSH
11955: CALL_OW 94
// timeToSupport = 5 5$0 ;
11959: LD_ADDR_EXP 28
11963: PUSH
11964: LD_INT 10500
11966: ST_TO_ADDR
// timerStatus = 2 ;
11967: LD_ADDR_EXP 29
11971: PUSH
11972: LD_INT 2
11974: ST_TO_ADDR
// startTimer = 1 ;
11975: LD_ADDR_EXP 30
11979: PUSH
11980: LD_INT 1
11982: ST_TO_ADDR
// harrAnswer = 2 ;
11983: LD_ADDR_EXP 26
11987: PUSH
11988: LD_INT 2
11990: ST_TO_ADDR
// end ; 3 :
11991: GO 12061
11993: LD_INT 3
11995: DOUBLE
11996: EQUAL
11997: IFTRUE 12001
11999: GO 12060
12001: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12002: LD_EXP 1
12006: PPUSH
12007: LD_STRING D5-JMM-3
12009: PPUSH
12010: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12014: LD_EXP 14
12018: PPUSH
12019: LD_STRING D5-Har-3
12021: PPUSH
12022: CALL_OW 94
// timeToSupport = 5 5$0 ;
12026: LD_ADDR_EXP 28
12030: PUSH
12031: LD_INT 10500
12033: ST_TO_ADDR
// timerStatus = 2 ;
12034: LD_ADDR_EXP 29
12038: PUSH
12039: LD_INT 2
12041: ST_TO_ADDR
// startTimer = 1 ;
12042: LD_ADDR_EXP 30
12046: PUSH
12047: LD_INT 1
12049: ST_TO_ADDR
// harrAnswer = 3 ;
12050: LD_ADDR_EXP 26
12054: PUSH
12055: LD_INT 3
12057: ST_TO_ADDR
// end ; end ;
12058: GO 12061
12060: POP
// end ;
12061: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12062: LD_EXP 29
12066: PUSH
12067: LD_INT 2
12069: EQUAL
12070: PUSH
12071: LD_EXP 28
12075: PUSH
12076: LD_INT 0
12078: EQUAL
12079: AND
12080: IFFALSE 12369
12082: GO 12084
12084: DISABLE
// begin timerStatus = 4 ;
12085: LD_ADDR_EXP 29
12089: PUSH
12090: LD_INT 4
12092: ST_TO_ADDR
// if harrAnswer = 1 then
12093: LD_EXP 26
12097: PUSH
12098: LD_INT 1
12100: EQUAL
12101: IFFALSE 12185
// begin PrepareHarrisonSupport ( 3 ) ;
12103: LD_INT 3
12105: PPUSH
12106: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12110: LD_INT 2100
12112: PPUSH
12113: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12117: LD_EXP 14
12121: PPUSH
12122: LD_STRING D7-Har-1
12124: PPUSH
12125: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12129: LD_STRING M2
12131: PPUSH
12132: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12136: LD_ADDR_EXP 27
12140: PUSH
12141: LD_INT 31500
12143: PUSH
12144: LD_INT 10500
12146: PUSH
12147: LD_INT 8400
12149: PUSH
12150: LD_INT 6300
12152: PUSH
12153: LD_INT 6300
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: PUSH
12162: LD_OWVAR 67
12166: ARRAY
12167: PLUS
12168: ST_TO_ADDR
// startTimer = 1 ;
12169: LD_ADDR_EXP 30
12173: PUSH
12174: LD_INT 1
12176: ST_TO_ADDR
// timerStatus = 3 ;
12177: LD_ADDR_EXP 29
12181: PUSH
12182: LD_INT 3
12184: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12185: LD_EXP 26
12189: PUSH
12190: LD_INT 2
12192: EQUAL
12193: IFFALSE 12277
// begin PrepareHarrisonSupport ( 4 ) ;
12195: LD_INT 4
12197: PPUSH
12198: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12202: LD_INT 2100
12204: PPUSH
12205: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12209: LD_EXP 14
12213: PPUSH
12214: LD_STRING D7-Har-1
12216: PPUSH
12217: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12221: LD_STRING M2
12223: PPUSH
12224: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12228: LD_ADDR_EXP 27
12232: PUSH
12233: LD_INT 33600
12235: PUSH
12236: LD_INT 10500
12238: PUSH
12239: LD_INT 8400
12241: PUSH
12242: LD_INT 6300
12244: PUSH
12245: LD_INT 5250
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: PUSH
12254: LD_OWVAR 67
12258: ARRAY
12259: PLUS
12260: ST_TO_ADDR
// startTimer = 1 ;
12261: LD_ADDR_EXP 30
12265: PUSH
12266: LD_INT 1
12268: ST_TO_ADDR
// timerStatus = 3 ;
12269: LD_ADDR_EXP 29
12273: PUSH
12274: LD_INT 3
12276: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12277: LD_EXP 26
12281: PUSH
12282: LD_INT 3
12284: EQUAL
12285: IFFALSE 12369
// begin PrepareHarrisonSupport ( 5 ) ;
12287: LD_INT 5
12289: PPUSH
12290: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12294: LD_INT 2100
12296: PPUSH
12297: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12301: LD_EXP 14
12305: PPUSH
12306: LD_STRING D7-Har-1
12308: PPUSH
12309: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12313: LD_STRING M2
12315: PPUSH
12316: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12320: LD_ADDR_EXP 27
12324: PUSH
12325: LD_INT 35700
12327: PUSH
12328: LD_INT 10500
12330: PUSH
12331: LD_INT 6300
12333: PUSH
12334: LD_INT 4200
12336: PUSH
12337: LD_INT 3150
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: PUSH
12346: LD_OWVAR 67
12350: ARRAY
12351: PLUS
12352: ST_TO_ADDR
// startTimer = 1 ;
12353: LD_ADDR_EXP 30
12357: PUSH
12358: LD_INT 1
12360: ST_TO_ADDR
// timerStatus = 3 ;
12361: LD_ADDR_EXP 29
12365: PUSH
12366: LD_INT 3
12368: ST_TO_ADDR
// end ; end ;
12369: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12370: LD_EXP 27
12374: PUSH
12375: LD_INT 8400
12377: LESSEQUAL
12378: PUSH
12379: LD_EXP 29
12383: PUSH
12384: LD_INT 3
12386: EQUAL
12387: AND
12388: IFFALSE 12420
12390: GO 12392
12392: DISABLE
// begin DialogueOn ;
12393: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12397: LD_EXP 14
12401: PPUSH
12402: LD_STRING D7a-Har-1
12404: PPUSH
12405: CALL_OW 94
// DialogueOff ;
12409: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12413: LD_STRING M2a
12415: PPUSH
12416: CALL_OW 337
// end ;
12420: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12421: LD_EXP 27
12425: PUSH
12426: LD_INT 0
12428: LESSEQUAL
12429: PUSH
12430: LD_EXP 29
12434: PUSH
12435: LD_INT 3
12437: EQUAL
12438: AND
12439: PUSH
12440: LD_EXP 40
12444: NOT
12445: AND
12446: IFFALSE 12585
12448: GO 12450
12450: DISABLE
12451: LD_INT 0
12453: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12454: LD_ADDR_VAR 0 1
12458: PUSH
12459: LD_INT 22
12461: PUSH
12462: LD_INT 1
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PPUSH
12469: CALL_OW 69
12473: PUSH
12474: LD_EXP 1
12478: PUSH
12479: EMPTY
12480: LIST
12481: DIFF
12482: ST_TO_ADDR
// saveDonaldson = 2 ;
12483: LD_ADDR_EXP 24
12487: PUSH
12488: LD_INT 2
12490: ST_TO_ADDR
// DialogueOn ;
12491: CALL_OW 6
// if IsOk ( Donaldson ) then
12495: LD_EXP 13
12499: PPUSH
12500: CALL_OW 302
12504: IFFALSE 12520
// SayRadio ( Harisson , D8-Har-1 ) else
12506: LD_EXP 14
12510: PPUSH
12511: LD_STRING D8-Har-1
12513: PPUSH
12514: CALL_OW 94
12518: GO 12532
// SayRadio ( Harisson , D8-Har-1a ) ;
12520: LD_EXP 14
12524: PPUSH
12525: LD_STRING D8-Har-1a
12527: PPUSH
12528: CALL_OW 94
// DialogueOff ;
12532: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12536: LD_VAR 0 1
12540: PPUSH
12541: LD_INT 4
12543: PPUSH
12544: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12548: LD_VAR 0 1
12552: PPUSH
12553: LD_INT 88
12555: PPUSH
12556: LD_INT 89
12558: PPUSH
12559: CALL_OW 114
// honor = 0 ;
12563: LD_ADDR_EXP 39
12567: PUSH
12568: LD_INT 0
12570: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12571: LD_INT 350
12573: PPUSH
12574: CALL_OW 67
// YouLost ( LostCommand ) ;
12578: LD_STRING LostCommand
12580: PPUSH
12581: CALL_OW 104
// end ;
12585: PPOPN 1
12587: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12588: LD_INT 22
12590: PUSH
12591: LD_INT 6
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PUSH
12598: LD_INT 21
12600: PUSH
12601: LD_INT 1
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PPUSH
12612: CALL_OW 69
12616: PUSH
12617: LD_INT 0
12619: EQUAL
12620: PUSH
12621: LD_EXP 20
12625: PUSH
12626: LD_INT 0
12628: EQUAL
12629: AND
12630: PUSH
12631: LD_EXP 44
12635: PUSH
12636: LD_INT 1
12638: EQUAL
12639: AND
12640: IFFALSE 12734
12642: GO 12644
12644: DISABLE
12645: LD_INT 0
12647: PPUSH
12648: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12649: LD_ADDR_VAR 0 2
12653: PUSH
12654: LD_INT 22
12656: PUSH
12657: LD_INT 1
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PUSH
12664: LD_INT 21
12666: PUSH
12667: LD_INT 1
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PUSH
12674: LD_INT 23
12676: PUSH
12677: LD_INT 1
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: LIST
12688: PPUSH
12689: CALL_OW 69
12693: ST_TO_ADDR
// for i in tmp do
12694: LD_ADDR_VAR 0 1
12698: PUSH
12699: LD_VAR 0 2
12703: PUSH
12704: FOR_IN
12705: IFFALSE 12732
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12707: LD_VAR 0 1
12711: PPUSH
12712: LD_INT 1
12714: PPUSH
12715: LD_INT 4
12717: PPUSH
12718: CALL_OW 12
12722: PPUSH
12723: LD_INT 500
12725: PPUSH
12726: CALL_OW 492
12730: GO 12704
12732: POP
12733: POP
// end ; end_of_file
12734: PPOPN 2
12736: END
// every 0 0$1 trigger AIEnable do
12737: LD_EXP 37
12741: IFFALSE 12835
12743: GO 12745
12745: DISABLE
// begin enable ;
12746: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12747: LD_INT 3
12749: PPUSH
12750: LD_INT 21
12752: PPUSH
12753: LD_INT 7
12755: PPUSH
12756: CALL 6030 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12760: LD_INT 3
12762: PPUSH
12763: LD_INT 8
12765: PPUSH
12766: LD_INT 7
12768: PPUSH
12769: LD_INT 1
12771: PPUSH
12772: CALL 6334 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12776: LD_EXP 20
12780: PUSH
12781: LD_INT 2
12783: EQUAL
12784: PUSH
12785: LD_INT 22
12787: PUSH
12788: LD_INT 6
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PPUSH
12795: CALL_OW 69
12799: AND
12800: IFFALSE 12835
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12802: LD_INT 6
12804: PPUSH
12805: LD_EXP 21
12809: PPUSH
12810: LD_INT 6
12812: PPUSH
12813: CALL 6030 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12817: LD_INT 6
12819: PPUSH
12820: LD_INT 9
12822: PPUSH
12823: LD_INT 6
12825: PPUSH
12826: LD_EXP 22
12830: PPUSH
12831: CALL 6334 0 4
// end ; end ;
12835: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12836: LD_EXP 15
12840: PPUSH
12841: CALL_OW 310
12845: NOT
12846: PUSH
12847: LD_INT 21
12849: PPUSH
12850: CALL_OW 302
12854: AND
12855: PUSH
12856: LD_INT 21
12858: PPUSH
12859: CALL_OW 255
12863: PUSH
12864: LD_INT 3
12866: EQUAL
12867: AND
12868: IFFALSE 12885
12870: GO 12872
12872: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12873: LD_EXP 15
12877: PPUSH
12878: LD_INT 21
12880: PPUSH
12881: CALL_OW 120
12885: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12886: LD_INT 22
12888: PUSH
12889: LD_INT 3
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 21
12898: PUSH
12899: LD_INT 2
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: LD_INT 55
12908: PUSH
12909: EMPTY
12910: LIST
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: LIST
12916: PPUSH
12917: CALL_OW 69
12921: PUSH
12922: LD_INT 0
12924: EQUAL
12925: PUSH
12926: LD_INT 1
12928: PPUSH
12929: CALL_OW 255
12933: PUSH
12934: LD_INT 3
12936: EQUAL
12937: AND
12938: PUSH
12939: LD_INT 21
12941: PPUSH
12942: CALL_OW 302
12946: AND
12947: PUSH
12948: LD_INT 21
12950: PPUSH
12951: CALL_OW 255
12955: PUSH
12956: LD_INT 3
12958: EQUAL
12959: AND
12960: PUSH
12961: LD_INT 21
12963: PPUSH
12964: CALL_OW 302
12968: AND
12969: IFFALSE 13181
12971: GO 12973
12973: DISABLE
// begin enable ;
12974: ENABLE
// if Difficulty = 1 then
12975: LD_OWVAR 67
12979: PUSH
12980: LD_INT 1
12982: EQUAL
12983: IFFALSE 13027
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
12985: LD_INT 3
12987: PPUSH
12988: LD_INT 24
12990: PPUSH
12991: LD_OWVAR 67
12995: PUSH
12996: LD_INT 2
12998: PLUS
12999: PPUSH
13000: LD_INT 42
13002: PUSH
13003: LD_INT 44
13005: PUSH
13006: LD_INT 43
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: LIST
13013: PPUSH
13014: LD_INT 1
13016: PPUSH
13017: LD_INT 1
13019: PPUSH
13020: LD_INT 21
13022: PPUSH
13023: CALL 6848 0 7
// if Difficulty = 2 then
13027: LD_OWVAR 67
13031: PUSH
13032: LD_INT 2
13034: EQUAL
13035: IFFALSE 13102
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13037: LD_INT 3
13039: PPUSH
13040: LD_INT 24
13042: PPUSH
13043: LD_OWVAR 67
13047: PUSH
13048: LD_INT 2
13050: PLUS
13051: PPUSH
13052: LD_INT 44
13054: PUSH
13055: LD_INT 44
13057: PUSH
13058: LD_INT 43
13060: PUSH
13061: LD_INT 43
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: PPUSH
13070: LD_INT 1
13072: PPUSH
13073: LD_INT 1
13075: PPUSH
13076: LD_INT 21
13078: PUSH
13079: LD_INT 22
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PUSH
13086: LD_INT 1
13088: PPUSH
13089: LD_INT 2
13091: PPUSH
13092: CALL_OW 12
13096: ARRAY
13097: PPUSH
13098: CALL 6848 0 7
// if Difficulty >= 3 then
13102: LD_OWVAR 67
13106: PUSH
13107: LD_INT 3
13109: GREATEREQUAL
13110: IFFALSE 13181
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13112: LD_INT 3
13114: PPUSH
13115: LD_INT 24
13117: PPUSH
13118: LD_OWVAR 67
13122: PUSH
13123: LD_INT 2
13125: PPUSH
13126: LD_INT 3
13128: PPUSH
13129: CALL_OW 12
13133: PLUS
13134: PPUSH
13135: LD_INT 44
13137: PUSH
13138: LD_INT 44
13140: PUSH
13141: LD_INT 43
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: LIST
13148: PPUSH
13149: LD_INT 1
13151: PPUSH
13152: LD_INT 1
13154: PPUSH
13155: LD_INT 22
13157: PUSH
13158: LD_INT 23
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 1
13167: PPUSH
13168: LD_INT 2
13170: PPUSH
13171: CALL_OW 12
13175: ARRAY
13176: PPUSH
13177: CALL 6848 0 7
// end ;
13181: END
// every 0 0$1 do
13182: GO 13184
13184: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13185: LD_INT 3
13187: PPUSH
13188: LD_INT 1
13190: PPUSH
13191: LD_INT 3
13193: PPUSH
13194: CALL 5951 0 3
13198: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13199: LD_EXP 20
13203: PUSH
13204: LD_INT 1
13206: EQUAL
13207: IFFALSE 13354
13209: GO 13211
13211: DISABLE
13212: LD_INT 0
13214: PPUSH
13215: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13216: LD_ADDR_VAR 0 2
13220: PUSH
13221: LD_INT 22
13223: PUSH
13224: LD_INT 6
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 21
13233: PUSH
13234: LD_INT 2
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 34
13243: PUSH
13244: LD_INT 51
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: LIST
13255: PPUSH
13256: CALL_OW 69
13260: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13261: LD_VAR 0 2
13265: PUSH
13266: LD_INT 1
13268: ARRAY
13269: PPUSH
13270: LD_EXP 21
13274: PPUSH
13275: CALL_OW 250
13279: PUSH
13280: LD_INT 5
13282: MINUS
13283: PPUSH
13284: LD_EXP 21
13288: PPUSH
13289: CALL_OW 251
13293: PUSH
13294: LD_INT 5
13296: MINUS
13297: PPUSH
13298: CALL_OW 111
// wait ( 0 0$5 ) ;
13302: LD_INT 175
13304: PPUSH
13305: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13309: LD_VAR 0 2
13313: PUSH
13314: LD_INT 1
13316: ARRAY
13317: PPUSH
13318: LD_INT 41
13320: PPUSH
13321: LD_INT 52
13323: PPUSH
13324: CALL_OW 177
// wait ( 0 0$40 ) ;
13328: LD_INT 1400
13330: PPUSH
13331: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13335: LD_VAR 0 2
13339: PUSH
13340: LD_INT 1
13342: ARRAY
13343: PPUSH
13344: LD_INT 41
13346: PPUSH
13347: LD_INT 44
13349: PPUSH
13350: CALL_OW 111
// end ;
13354: PPOPN 2
13356: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13357: LD_EXP 21
13361: PPUSH
13362: CALL_OW 274
13366: PPUSH
13367: LD_INT 1
13369: PPUSH
13370: CALL_OW 275
13374: PUSH
13375: LD_INT 100
13377: GREATEREQUAL
13378: IFFALSE 13606
13380: GO 13382
13382: DISABLE
13383: LD_INT 0
13385: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13386: LD_ADDR_VAR 0 1
13390: PUSH
13391: LD_INT 22
13393: PUSH
13394: LD_INT 6
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 21
13403: PUSH
13404: LD_INT 1
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 25
13413: PUSH
13414: LD_INT 2
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: LIST
13425: PPUSH
13426: CALL_OW 69
13430: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13431: LD_VAR 0 1
13435: PUSH
13436: LD_INT 1
13438: ARRAY
13439: PPUSH
13440: LD_INT 4
13442: PPUSH
13443: LD_INT 39
13445: PPUSH
13446: LD_INT 37
13448: PPUSH
13449: LD_INT 3
13451: PPUSH
13452: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13456: LD_VAR 0 1
13460: PUSH
13461: LD_INT 1
13463: ARRAY
13464: PPUSH
13465: LD_INT 29
13467: PPUSH
13468: LD_INT 42
13470: PPUSH
13471: LD_INT 54
13473: PPUSH
13474: LD_INT 3
13476: PPUSH
13477: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13481: LD_VAR 0 1
13485: PUSH
13486: LD_INT 1
13488: ARRAY
13489: PPUSH
13490: LD_INT 6
13492: PPUSH
13493: LD_INT 38
13495: PPUSH
13496: LD_INT 48
13498: PPUSH
13499: LD_INT 0
13501: PPUSH
13502: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13506: LD_VAR 0 1
13510: PUSH
13511: LD_INT 1
13513: ARRAY
13514: PPUSH
13515: LD_INT 2
13517: PPUSH
13518: LD_INT 32
13520: PPUSH
13521: LD_INT 38
13523: PPUSH
13524: LD_INT 2
13526: PPUSH
13527: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13531: LD_VAR 0 1
13535: PUSH
13536: LD_INT 1
13538: ARRAY
13539: PPUSH
13540: LD_INT 26
13542: PPUSH
13543: LD_INT 39
13545: PPUSH
13546: LD_INT 55
13548: PPUSH
13549: LD_INT 3
13551: PPUSH
13552: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13556: LD_VAR 0 1
13560: PUSH
13561: LD_INT 1
13563: ARRAY
13564: PPUSH
13565: LD_INT 32
13567: PPUSH
13568: LD_INT 31
13570: PPUSH
13571: LD_INT 31
13573: PPUSH
13574: LD_INT 3
13576: PPUSH
13577: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13581: LD_VAR 0 1
13585: PUSH
13586: LD_INT 1
13588: ARRAY
13589: PPUSH
13590: LD_INT 31
13592: PPUSH
13593: LD_INT 50
13595: PPUSH
13596: LD_INT 51
13598: PPUSH
13599: LD_INT 4
13601: PPUSH
13602: CALL_OW 205
// end ;
13606: PPOPN 1
13608: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13609: LD_EXP 46
13613: IFFALSE 14178
13615: GO 13617
13617: DISABLE
13618: LD_INT 0
13620: PPUSH
13621: PPUSH
13622: PPUSH
// begin enable ;
13623: ENABLE
// if not ruMobile then
13624: LD_EXP 46
13628: NOT
13629: IFFALSE 13633
// exit ;
13631: GO 14178
// for i in ruMobile do
13633: LD_ADDR_VAR 0 1
13637: PUSH
13638: LD_EXP 46
13642: PUSH
13643: FOR_IN
13644: IFFALSE 14176
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13646: LD_VAR 0 1
13650: PPUSH
13651: CALL_OW 302
13655: NOT
13656: PUSH
13657: LD_VAR 0 1
13661: PPUSH
13662: CALL_OW 255
13666: PUSH
13667: LD_INT 3
13669: NONEQUAL
13670: OR
13671: IFFALSE 13691
// begin ruMobile := ruMobile diff i ;
13673: LD_ADDR_EXP 46
13677: PUSH
13678: LD_EXP 46
13682: PUSH
13683: LD_VAR 0 1
13687: DIFF
13688: ST_TO_ADDR
// continue ;
13689: GO 13643
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13691: LD_VAR 0 1
13695: PPUSH
13696: CALL_OW 110
13700: NOT
13701: PUSH
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 110
13711: PUSH
13712: LD_INT 0
13714: EQUAL
13715: OR
13716: IFFALSE 13831
// begin if GetFuel ( i ) < 50 then
13718: LD_VAR 0 1
13722: PPUSH
13723: CALL_OW 261
13727: PUSH
13728: LD_INT 50
13730: LESS
13731: IFFALSE 13790
// begin ComMoveXY ( i , 106 , 88 ) ;
13733: LD_VAR 0 1
13737: PPUSH
13738: LD_INT 106
13740: PPUSH
13741: LD_INT 88
13743: PPUSH
13744: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13748: LD_INT 35
13750: PPUSH
13751: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13755: LD_VAR 0 1
13759: PPUSH
13760: LD_INT 106
13762: PPUSH
13763: LD_INT 88
13765: PPUSH
13766: CALL_OW 297
13770: PUSH
13771: LD_INT 4
13773: LESS
13774: IFFALSE 13748
// SetFuel ( i , 100 ) ;
13776: LD_VAR 0 1
13780: PPUSH
13781: LD_INT 100
13783: PPUSH
13784: CALL_OW 240
// end else
13788: GO 13831
// if not IsInArea ( i , ruParking ) then
13790: LD_VAR 0 1
13794: PPUSH
13795: LD_INT 25
13797: PPUSH
13798: CALL_OW 308
13802: NOT
13803: IFFALSE 13819
// ComMoveToArea ( i , ruParking ) else
13805: LD_VAR 0 1
13809: PPUSH
13810: LD_INT 25
13812: PPUSH
13813: CALL_OW 113
13817: GO 13831
// SetTag ( i , 1 ) ;
13819: LD_VAR 0 1
13823: PPUSH
13824: LD_INT 1
13826: PPUSH
13827: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13831: LD_VAR 0 1
13835: PPUSH
13836: CALL_OW 110
13840: PUSH
13841: LD_INT 1
13843: EQUAL
13844: IFFALSE 13974
// begin if GetLives ( i ) < 650 then
13846: LD_VAR 0 1
13850: PPUSH
13851: CALL_OW 256
13855: PUSH
13856: LD_INT 650
13858: LESS
13859: IFFALSE 13951
// begin if not IsDrivenBy ( i ) then
13861: LD_VAR 0 1
13865: PPUSH
13866: CALL_OW 311
13870: NOT
13871: IFFALSE 13875
// continue ;
13873: GO 13643
// mech := IsDrivenBy ( i ) ;
13875: LD_ADDR_VAR 0 2
13879: PUSH
13880: LD_VAR 0 1
13884: PPUSH
13885: CALL_OW 311
13889: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13890: LD_VAR 0 2
13894: PPUSH
13895: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13899: LD_VAR 0 2
13903: PPUSH
13904: LD_VAR 0 1
13908: PPUSH
13909: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13913: LD_INT 35
13915: PPUSH
13916: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13920: LD_VAR 0 1
13924: PPUSH
13925: CALL_OW 256
13929: PUSH
13930: LD_INT 1000
13932: EQUAL
13933: IFFALSE 13913
// ComEnterUnit ( mech , i ) ;
13935: LD_VAR 0 2
13939: PPUSH
13940: LD_VAR 0 1
13944: PPUSH
13945: CALL_OW 120
// end else
13949: GO 13974
// if IsDrivenBy ( i ) then
13951: LD_VAR 0 1
13955: PPUSH
13956: CALL_OW 311
13960: IFFALSE 13974
// SetTag ( i , 2 ) ;
13962: LD_VAR 0 1
13966: PPUSH
13967: LD_INT 2
13969: PPUSH
13970: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
13974: LD_VAR 0 1
13978: PPUSH
13979: CALL_OW 110
13983: PUSH
13984: LD_INT 2
13986: EQUAL
13987: IFFALSE 14174
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
13989: LD_ADDR_VAR 0 3
13993: PUSH
13994: LD_INT 24
13996: PPUSH
13997: LD_INT 81
13999: PUSH
14000: LD_INT 3
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PPUSH
14007: CALL_OW 70
14011: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14012: LD_VAR 0 1
14016: PPUSH
14017: CALL_OW 256
14021: PUSH
14022: LD_INT 650
14024: LESS
14025: IFFALSE 14050
// begin ComStop ( i ) ;
14027: LD_VAR 0 1
14031: PPUSH
14032: CALL_OW 141
// SetTag ( i , 0 ) ;
14036: LD_VAR 0 1
14040: PPUSH
14041: LD_INT 0
14043: PPUSH
14044: CALL_OW 109
// continue ;
14048: GO 13643
// end ; if enemy then
14050: LD_VAR 0 3
14054: IFFALSE 14094
// begin if not HasTask ( i ) then
14056: LD_VAR 0 1
14060: PPUSH
14061: CALL_OW 314
14065: NOT
14066: IFFALSE 14092
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14068: LD_VAR 0 1
14072: PPUSH
14073: LD_VAR 0 3
14077: PPUSH
14078: LD_VAR 0 1
14082: PPUSH
14083: CALL_OW 74
14087: PPUSH
14088: CALL_OW 115
// end else
14092: GO 14174
// if ruMobile > 2 then
14094: LD_EXP 46
14098: PUSH
14099: LD_INT 2
14101: GREATER
14102: IFFALSE 14174
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14104: LD_ADDR_VAR 0 3
14108: PUSH
14109: LD_INT 81
14111: PUSH
14112: LD_INT 3
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PPUSH
14119: CALL_OW 69
14123: ST_TO_ADDR
// if enemy then
14124: LD_VAR 0 3
14128: IFFALSE 14174
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
14130: LD_VAR 0 1
14134: PPUSH
14135: LD_INT 95
14137: PUSH
14138: LD_INT 74
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: PUSH
14145: LD_INT 67
14147: PUSH
14148: LD_INT 59
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: LD_INT 55
14157: PUSH
14158: LD_INT 41
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: LIST
14169: PPUSH
14170: CALL 79843 0 2
// end ; end ; end ;
14174: GO 13643
14176: POP
14177: POP
// end ; end_of_file
14178: PPOPN 3
14180: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14181: LD_INT 0
14183: PPUSH
14184: PPUSH
14185: PPUSH
14186: PPUSH
14187: PPUSH
14188: PPUSH
14189: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14190: LD_ADDR_VAR 0 3
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_INT 6
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 1
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 25
14217: PUSH
14218: LD_INT 1
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 3
14227: PUSH
14228: LD_INT 54
14230: PUSH
14231: EMPTY
14232: LIST
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: PPUSH
14244: CALL_OW 69
14248: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14249: LD_ADDR_VAR 0 7
14253: PUSH
14254: LD_INT 22
14256: PUSH
14257: LD_INT 6
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: LD_INT 21
14266: PUSH
14267: LD_INT 1
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: LD_INT 25
14276: PUSH
14277: LD_INT 1
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: LD_INT 54
14286: PUSH
14287: EMPTY
14288: LIST
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: PPUSH
14296: CALL_OW 69
14300: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14301: LD_ADDR_VAR 0 4
14305: PUSH
14306: LD_INT 22
14308: PUSH
14309: LD_INT 6
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 21
14318: PUSH
14319: LD_INT 1
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 25
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: LIST
14340: PPUSH
14341: CALL_OW 69
14345: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14346: LD_ADDR_VAR 0 6
14350: PUSH
14351: LD_INT 22
14353: PUSH
14354: LD_INT 6
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 21
14363: PUSH
14364: LD_INT 1
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 25
14373: PUSH
14374: LD_INT 4
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: LIST
14385: PPUSH
14386: CALL_OW 69
14390: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14391: LD_ADDR_VAR 0 8
14395: PUSH
14396: LD_INT 22
14398: PUSH
14399: LD_INT 6
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 21
14408: PUSH
14409: LD_INT 2
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 34
14418: PUSH
14419: LD_INT 51
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: PPUSH
14431: CALL_OW 69
14435: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14436: LD_VAR 0 1
14440: PPUSH
14441: CALL_OW 255
14445: PUSH
14446: LD_INT 6
14448: EQUAL
14449: PUSH
14450: LD_VAR 0 1
14454: PPUSH
14455: CALL_OW 266
14459: PUSH
14460: LD_INT 0
14462: EQUAL
14463: AND
14464: IFFALSE 14484
// begin ruPDepot = building ;
14466: LD_ADDR_EXP 21
14470: PUSH
14471: LD_VAR 0 1
14475: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14476: LD_ADDR_EXP 20
14480: PUSH
14481: LD_INT 1
14483: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 266
14493: PUSH
14494: LD_INT 4
14496: EQUAL
14497: PUSH
14498: LD_VAR 0 1
14502: PPUSH
14503: CALL_OW 255
14507: PUSH
14508: LD_INT 6
14510: EQUAL
14511: AND
14512: IFFALSE 14545
// for i in tmpSold do
14514: LD_ADDR_VAR 0 2
14518: PUSH
14519: LD_VAR 0 3
14523: PUSH
14524: FOR_IN
14525: IFFALSE 14543
// ComEnterUnit ( i , building ) ;
14527: LD_VAR 0 2
14531: PPUSH
14532: LD_VAR 0 1
14536: PPUSH
14537: CALL_OW 120
14541: GO 14524
14543: POP
14544: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14545: LD_VAR 0 1
14549: PPUSH
14550: CALL_OW 266
14554: PUSH
14555: LD_INT 6
14557: EQUAL
14558: PUSH
14559: LD_VAR 0 1
14563: PPUSH
14564: CALL_OW 255
14568: PUSH
14569: LD_INT 6
14571: EQUAL
14572: AND
14573: IFFALSE 14631
// begin for i in tmpSci do
14575: LD_ADDR_VAR 0 2
14579: PUSH
14580: LD_VAR 0 6
14584: PUSH
14585: FOR_IN
14586: IFFALSE 14604
// ComEnterUnit ( i , building ) ;
14588: LD_VAR 0 2
14592: PPUSH
14593: LD_VAR 0 1
14597: PPUSH
14598: CALL_OW 120
14602: GO 14585
14604: POP
14605: POP
// ResAllTechs ( 6 , building , 3 ) ;
14606: LD_INT 6
14608: PPUSH
14609: LD_VAR 0 1
14613: PPUSH
14614: LD_INT 3
14616: PPUSH
14617: CALL 5951 0 3
// ruPLab = building ;
14621: LD_ADDR_EXP 22
14625: PUSH
14626: LD_VAR 0 1
14630: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14631: LD_VAR 0 1
14635: PPUSH
14636: CALL_OW 266
14640: PUSH
14641: LD_INT 2
14643: EQUAL
14644: PUSH
14645: LD_VAR 0 1
14649: PPUSH
14650: CALL_OW 255
14654: PUSH
14655: LD_INT 6
14657: EQUAL
14658: AND
14659: IFFALSE 14710
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14661: LD_ADDR_VAR 0 5
14665: PUSH
14666: LD_VAR 0 8
14670: PUSH
14671: LD_INT 1
14673: ARRAY
14674: PPUSH
14675: CALL_OW 313
14679: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14680: LD_VAR 0 5
14684: PPUSH
14685: CALL_OW 121
// wait ( 0 0$1 ) ;
14689: LD_INT 35
14691: PPUSH
14692: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14696: LD_VAR 0 5
14700: PPUSH
14701: LD_VAR 0 1
14705: PPUSH
14706: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14710: LD_VAR 0 1
14714: PPUSH
14715: CALL_OW 266
14719: PUSH
14720: LD_INT 32
14722: EQUAL
14723: PUSH
14724: LD_VAR 0 1
14728: PPUSH
14729: CALL_OW 255
14733: PUSH
14734: LD_INT 6
14736: EQUAL
14737: AND
14738: IFFALSE 14790
// begin ComPlaceWeapon ( building , 42 ) ;
14740: LD_VAR 0 1
14744: PPUSH
14745: LD_INT 42
14747: PPUSH
14748: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14752: LD_VAR 0 7
14756: PUSH
14757: LD_INT 1
14759: ARRAY
14760: PPUSH
14761: CALL_OW 122
// wait ( 0 0$1 ) ;
14765: LD_INT 35
14767: PPUSH
14768: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14772: LD_VAR 0 7
14776: PUSH
14777: LD_INT 1
14779: ARRAY
14780: PPUSH
14781: LD_VAR 0 1
14785: PPUSH
14786: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14790: LD_VAR 0 1
14794: PPUSH
14795: CALL_OW 266
14799: PUSH
14800: LD_INT 31
14802: EQUAL
14803: PUSH
14804: LD_VAR 0 1
14808: PPUSH
14809: CALL_OW 255
14813: PUSH
14814: LD_INT 6
14816: EQUAL
14817: AND
14818: IFFALSE 14884
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14820: LD_VAR 0 7
14824: PUSH
14825: LD_INT 2
14827: ARRAY
14828: PPUSH
14829: CALL_OW 122
// wait ( 0 0$1 ) ;
14833: LD_INT 35
14835: PPUSH
14836: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14840: LD_VAR 0 7
14844: PUSH
14845: LD_INT 2
14847: ARRAY
14848: PPUSH
14849: LD_VAR 0 1
14853: PPUSH
14854: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14858: LD_VAR 0 4
14862: PUSH
14863: LD_INT 1
14865: ARRAY
14866: PPUSH
14867: LD_EXP 21
14871: PPUSH
14872: CALL_OW 120
// baseReadyToBuild = 2 ;
14876: LD_ADDR_EXP 20
14880: PUSH
14881: LD_INT 2
14883: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14884: LD_VAR 0 1
14888: PPUSH
14889: CALL_OW 266
14893: PUSH
14894: LD_INT 32
14896: EQUAL
14897: PUSH
14898: LD_VAR 0 1
14902: PPUSH
14903: CALL_OW 255
14907: PUSH
14908: LD_INT 1
14910: EQUAL
14911: AND
14912: PUSH
14913: LD_EXP 32
14917: PUSH
14918: LD_INT 0
14920: EQUAL
14921: AND
14922: IFFALSE 15167
// begin bunkerDialog = 1 ;
14924: LD_ADDR_EXP 32
14928: PUSH
14929: LD_INT 1
14931: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14932: LD_EXP 11
14936: PPUSH
14937: CALL_OW 302
14941: IFFALSE 14957
// Say ( Claptopn , D11-Eng1-1 ) else
14943: LD_EXP 11
14947: PPUSH
14948: LD_STRING D11-Eng1-1
14950: PPUSH
14951: CALL_OW 88
14955: GO 15153
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14957: LD_INT 22
14959: PUSH
14960: LD_INT 1
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 21
14969: PUSH
14970: LD_INT 1
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 25
14979: PUSH
14980: LD_INT 3
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 26
14989: PUSH
14990: LD_INT 1
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: PPUSH
15003: CALL_OW 69
15007: PUSH
15008: LD_EXP 1
15012: PUSH
15013: EMPTY
15014: LIST
15015: PUSH
15016: LD_INT 0
15018: GREATER
15019: DIFF
15020: IFFALSE 15094
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15022: LD_INT 22
15024: PUSH
15025: LD_INT 1
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 21
15034: PUSH
15035: LD_INT 1
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: LD_INT 25
15044: PUSH
15045: LD_INT 2
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: LD_INT 26
15054: PUSH
15055: LD_INT 1
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: PPUSH
15068: CALL_OW 69
15072: PUSH
15073: LD_EXP 1
15077: PUSH
15078: EMPTY
15079: LIST
15080: DIFF
15081: PPUSH
15082: LD_STRING D11-Eng1-1
15084: PPUSH
15085: LD_STRING D11-Eng1-1
15087: PPUSH
15088: CALL 4598 0 3
15092: GO 15153
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15094: LD_INT 22
15096: PUSH
15097: LD_INT 1
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 21
15106: PUSH
15107: LD_INT 1
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 26
15116: PUSH
15117: LD_INT 1
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: PPUSH
15129: CALL_OW 69
15133: PUSH
15134: LD_EXP 1
15138: PUSH
15139: EMPTY
15140: LIST
15141: DIFF
15142: PPUSH
15143: LD_STRING D11-Eng1-1
15145: PPUSH
15146: LD_STRING D11-Eng1-1
15148: PPUSH
15149: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15153: LD_EXP 33
15157: PUSH
15158: LD_INT 0
15160: EQUAL
15161: IFFALSE 15167
// EnergyDialog ;
15163: CALL 5003 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15167: LD_VAR 0 1
15171: PPUSH
15172: CALL_OW 266
15176: PUSH
15177: LD_INT 29
15179: EQUAL
15180: PUSH
15181: LD_VAR 0 1
15185: PPUSH
15186: CALL_OW 255
15190: PUSH
15191: LD_INT 1
15193: EQUAL
15194: AND
15195: IFFALSE 15205
// buildOil = 1 ;
15197: LD_ADDR_EXP 34
15201: PUSH
15202: LD_INT 1
15204: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15205: LD_VAR 0 1
15209: PPUSH
15210: CALL_OW 266
15214: PUSH
15215: LD_INT 26
15217: EQUAL
15218: PUSH
15219: LD_VAR 0 1
15223: PPUSH
15224: CALL_OW 255
15228: PUSH
15229: LD_INT 1
15231: EQUAL
15232: AND
15233: IFFALSE 15243
// buildPower = 1 ;
15235: LD_ADDR_EXP 35
15239: PUSH
15240: LD_INT 1
15242: ST_TO_ADDR
// end ;
15243: PPOPN 8
15245: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15246: LD_VAR 0 1
15250: PPUSH
15251: CALL_OW 266
15255: PUSH
15256: LD_INT 3
15258: EQUAL
15259: PUSH
15260: LD_VAR 0 1
15264: PPUSH
15265: CALL_OW 255
15269: PUSH
15270: LD_INT 1
15272: EQUAL
15273: AND
15274: PUSH
15275: LD_EXP 31
15279: PUSH
15280: LD_INT 0
15282: EQUAL
15283: AND
15284: IFFALSE 15632
// begin factoryDialog = 1 ;
15286: LD_ADDR_EXP 31
15290: PUSH
15291: LD_INT 1
15293: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15294: LD_INT 47
15296: PPUSH
15297: LD_INT 1
15299: PPUSH
15300: CALL_OW 321
15304: PUSH
15305: LD_INT 1
15307: EQUAL
15308: PUSH
15309: LD_INT 45
15311: PPUSH
15312: LD_INT 1
15314: PPUSH
15315: CALL_OW 321
15319: PUSH
15320: LD_INT 1
15322: EQUAL
15323: AND
15324: IFFALSE 15632
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15326: LD_INT 22
15328: PUSH
15329: LD_INT 1
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: LD_INT 21
15338: PUSH
15339: LD_INT 3
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 30
15348: PUSH
15349: LD_INT 3
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 24
15358: PUSH
15359: LD_INT 1000
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: PPUSH
15372: CALL_OW 69
15376: PUSH
15377: LD_INT 1
15379: ARRAY
15380: PPUSH
15381: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15385: LD_EXP 1
15389: PPUSH
15390: LD_STRING D9a-JMM-1
15392: PPUSH
15393: CALL_OW 88
// if IsOK ( Campell ) then
15397: LD_EXP 12
15401: PPUSH
15402: CALL_OW 302
15406: IFFALSE 15422
// Say ( Campell , D9a-Mech1-1 ) else
15408: LD_EXP 12
15412: PPUSH
15413: LD_STRING D9a-Mech1-1
15415: PPUSH
15416: CALL_OW 88
15420: GO 15618
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15422: LD_INT 22
15424: PUSH
15425: LD_INT 1
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 21
15434: PUSH
15435: LD_INT 1
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: LD_INT 25
15444: PUSH
15445: LD_INT 3
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 26
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: PPUSH
15468: CALL_OW 69
15472: PUSH
15473: LD_EXP 1
15477: PUSH
15478: EMPTY
15479: LIST
15480: PUSH
15481: LD_INT 0
15483: GREATER
15484: DIFF
15485: IFFALSE 15559
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15487: LD_INT 22
15489: PUSH
15490: LD_INT 1
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 21
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: LD_INT 25
15509: PUSH
15510: LD_INT 3
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: LD_INT 26
15519: PUSH
15520: LD_INT 1
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: PPUSH
15533: CALL_OW 69
15537: PUSH
15538: LD_EXP 1
15542: PUSH
15543: EMPTY
15544: LIST
15545: DIFF
15546: PPUSH
15547: LD_STRING D9a-Mech1-1
15549: PPUSH
15550: LD_STRING D9a-Mech1-1
15552: PPUSH
15553: CALL 4598 0 3
15557: GO 15618
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15559: LD_INT 22
15561: PUSH
15562: LD_INT 1
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PUSH
15569: LD_INT 21
15571: PUSH
15572: LD_INT 1
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 26
15581: PUSH
15582: LD_INT 1
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: LIST
15593: PPUSH
15594: CALL_OW 69
15598: PUSH
15599: LD_EXP 1
15603: PUSH
15604: EMPTY
15605: LIST
15606: DIFF
15607: PPUSH
15608: LD_STRING D9a-Mech1-1
15610: PPUSH
15611: LD_STRING D9a-Mech1-1
15613: PPUSH
15614: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15618: LD_EXP 33
15622: PUSH
15623: LD_INT 0
15625: EQUAL
15626: IFFALSE 15632
// EnergyDialog ;
15628: CALL 5003 0 0
// end ; end ; end ;
15632: PPOPN 1
15634: END
// on UnitDestroyed ( unit ) do var mech ;
15635: LD_INT 0
15637: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15638: LD_VAR 0 1
15642: PPUSH
15643: CALL 35482 0 1
// if unit = JMM then
15647: LD_VAR 0 1
15651: PUSH
15652: LD_EXP 1
15656: EQUAL
15657: IFFALSE 15666
// YouLost ( JMM ) ;
15659: LD_STRING JMM
15661: PPUSH
15662: CALL_OW 104
// if unit = ambdept0 then
15666: LD_VAR 0 1
15670: PUSH
15671: LD_INT 4
15673: EQUAL
15674: IFFALSE 15683
// YouLost ( Base ) ;
15676: LD_STRING Base
15678: PPUSH
15679: CALL_OW 104
// if unit in ruMobile then
15683: LD_VAR 0 1
15687: PUSH
15688: LD_EXP 46
15692: IN
15693: IFFALSE 15711
// ruMobile = ruMobile diff ruMobile ;
15695: LD_ADDR_EXP 46
15699: PUSH
15700: LD_EXP 46
15704: PUSH
15705: LD_EXP 46
15709: DIFF
15710: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15711: LD_VAR 0 1
15715: PPUSH
15716: CALL_OW 247
15720: PUSH
15721: LD_INT 1
15723: EQUAL
15724: PUSH
15725: LD_VAR 0 1
15729: PPUSH
15730: CALL_OW 255
15734: PUSH
15735: LD_INT 1
15737: EQUAL
15738: AND
15739: IFFALSE 15755
// lostCounter = lostCounter + 1 ;
15741: LD_ADDR_EXP 38
15745: PUSH
15746: LD_EXP 38
15750: PUSH
15751: LD_INT 1
15753: PLUS
15754: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15755: LD_EXP 43
15759: PUSH
15760: LD_INT 24
15762: PPUSH
15763: CALL_OW 313
15767: PUSH
15768: LD_INT 6
15770: LESS
15771: AND
15772: PUSH
15773: LD_VAR 0 1
15777: PPUSH
15778: CALL_OW 257
15782: PUSH
15783: LD_INT 3
15785: EQUAL
15786: AND
15787: PUSH
15788: LD_VAR 0 1
15792: PPUSH
15793: CALL_OW 255
15797: PUSH
15798: LD_INT 3
15800: EQUAL
15801: AND
15802: PUSH
15803: LD_INT 24
15805: PPUSH
15806: CALL_OW 302
15810: AND
15811: PUSH
15812: LD_INT 24
15814: PPUSH
15815: CALL_OW 255
15819: PUSH
15820: LD_INT 3
15822: EQUAL
15823: AND
15824: IFFALSE 15953
// begin ruMech := ruMech - 1 ;
15826: LD_ADDR_EXP 43
15830: PUSH
15831: LD_EXP 43
15835: PUSH
15836: LD_INT 1
15838: MINUS
15839: ST_TO_ADDR
// if ruMech = 0 then
15840: LD_EXP 43
15844: PUSH
15845: LD_INT 0
15847: EQUAL
15848: IFFALSE 15852
// exit ;
15850: GO 15953
// wait ( 0 0$40 ) ;
15852: LD_INT 1400
15854: PPUSH
15855: CALL_OW 67
// uc_side = 3 ;
15859: LD_ADDR_OWVAR 20
15863: PUSH
15864: LD_INT 3
15866: ST_TO_ADDR
// uc_nation = 3 ;
15867: LD_ADDR_OWVAR 21
15871: PUSH
15872: LD_INT 3
15874: ST_TO_ADDR
// hc_gallery :=  ;
15875: LD_ADDR_OWVAR 33
15879: PUSH
15880: LD_STRING 
15882: ST_TO_ADDR
// hc_name :=  ;
15883: LD_ADDR_OWVAR 26
15887: PUSH
15888: LD_STRING 
15890: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15891: LD_INT 0
15893: PPUSH
15894: LD_EXP 16
15898: PPUSH
15899: LD_EXP 17
15903: PPUSH
15904: CALL_OW 12
15908: PPUSH
15909: CALL_OW 383
// mech := CreateHuman ;
15913: LD_ADDR_VAR 0 2
15917: PUSH
15918: CALL_OW 44
15922: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15923: LD_VAR 0 2
15927: PPUSH
15928: LD_INT 124
15930: PPUSH
15931: LD_INT 97
15933: PPUSH
15934: LD_INT 0
15936: PPUSH
15937: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
15941: LD_VAR 0 2
15945: PPUSH
15946: LD_INT 24
15948: PPUSH
15949: CALL_OW 120
// end ; end ;
15953: PPOPN 2
15955: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15956: LD_INT 0
15958: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15959: LD_VAR 0 1
15963: PPUSH
15964: LD_VAR 0 2
15968: PPUSH
15969: CALL 35602 0 2
// if GetSide ( vehicle ) = 1 then
15973: LD_VAR 0 1
15977: PPUSH
15978: CALL_OW 255
15982: PUSH
15983: LD_INT 1
15985: EQUAL
15986: IFFALSE 16002
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
15988: LD_ADDR_EXP 42
15992: PUSH
15993: LD_EXP 42
15997: PUSH
15998: LD_INT 1
16000: PLUS
16001: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16002: LD_VAR 0 1
16006: PPUSH
16007: CALL_OW 255
16011: PUSH
16012: LD_INT 3
16014: EQUAL
16015: PUSH
16016: LD_VAR 0 1
16020: PPUSH
16021: CALL_OW 264
16025: PUSH
16026: LD_INT 42
16028: PUSH
16029: LD_INT 43
16031: PUSH
16032: LD_INT 44
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: LIST
16039: IN
16040: AND
16041: IFFALSE 16059
// ruMobile := ruMobile union vehicle ;
16043: LD_ADDR_EXP 46
16047: PUSH
16048: LD_EXP 46
16052: PUSH
16053: LD_VAR 0 1
16057: UNION
16058: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16059: LD_VAR 0 1
16063: PPUSH
16064: CALL_OW 264
16068: PUSH
16069: LD_INT 53
16071: EQUAL
16072: IFFALSE 16208
// begin uc_side = 3 ;
16074: LD_ADDR_OWVAR 20
16078: PUSH
16079: LD_INT 3
16081: ST_TO_ADDR
// uc_nation = 3 ;
16082: LD_ADDR_OWVAR 21
16086: PUSH
16087: LD_INT 3
16089: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16090: LD_INT 0
16092: PPUSH
16093: LD_EXP 17
16097: PPUSH
16098: CALL_OW 383
// driver := CreateHuman ;
16102: LD_ADDR_VAR 0 3
16106: PUSH
16107: CALL_OW 44
16111: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16112: LD_VAR 0 3
16116: PPUSH
16117: LD_VAR 0 2
16121: PPUSH
16122: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16126: LD_VAR 0 1
16130: PPUSH
16131: LD_INT 21
16133: PPUSH
16134: CALL 5219 0 2
// repeat wait ( 0 0$1 ) ;
16138: LD_INT 35
16140: PPUSH
16141: CALL_OW 67
// until not HasTask ( vehicle ) ;
16145: LD_VAR 0 1
16149: PPUSH
16150: CALL_OW 314
16154: NOT
16155: IFFALSE 16138
// driver := IsDrivenBy ( vehicle ) ;
16157: LD_ADDR_VAR 0 3
16161: PUSH
16162: LD_VAR 0 1
16166: PPUSH
16167: CALL_OW 311
16171: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16172: LD_VAR 0 3
16176: PPUSH
16177: LD_INT 104
16179: PPUSH
16180: LD_INT 73
16182: PPUSH
16183: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16187: LD_VAR 0 3
16191: PPUSH
16192: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16196: LD_VAR 0 3
16200: PPUSH
16201: LD_INT 24
16203: PPUSH
16204: CALL_OW 180
// end ; end ;
16208: PPOPN 3
16210: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16211: LD_VAR 0 1
16215: PPUSH
16216: CALL_OW 255
16220: PUSH
16221: LD_INT 3
16223: EQUAL
16224: PUSH
16225: LD_VAR 0 1
16229: PPUSH
16230: CALL_OW 247
16234: PUSH
16235: LD_INT 2
16237: EQUAL
16238: AND
16239: PUSH
16240: LD_VAR 0 1
16244: PPUSH
16245: CALL_OW 264
16249: PUSH
16250: LD_INT 42
16252: PUSH
16253: LD_INT 43
16255: PUSH
16256: LD_INT 44
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: LIST
16263: IN
16264: AND
16265: IFFALSE 16314
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16267: LD_INT 24
16269: PPUSH
16270: LD_VAR 0 1
16274: PPUSH
16275: CALL_OW 265
16279: PPUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: CALL_OW 262
16289: PPUSH
16290: LD_VAR 0 1
16294: PPUSH
16295: CALL_OW 263
16299: PPUSH
16300: LD_VAR 0 1
16304: PPUSH
16305: CALL_OW 264
16309: PPUSH
16310: CALL_OW 185
// end ;
16314: PPOPN 1
16316: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16317: LD_VAR 0 1
16321: PPUSH
16322: CALL_OW 255
16326: PUSH
16327: LD_INT 3
16329: EQUAL
16330: PUSH
16331: LD_VAR 0 2
16335: PPUSH
16336: CALL_OW 255
16340: PUSH
16341: LD_INT 3
16343: EQUAL
16344: AND
16345: PUSH
16346: LD_INT 24
16348: PPUSH
16349: CALL_OW 302
16353: AND
16354: PUSH
16355: LD_VAR 0 1
16359: PPUSH
16360: CALL_OW 302
16364: NOT
16365: AND
16366: IFFALSE 16380
// ComEnterUnit ( human , rubfact0 ) ;
16368: LD_VAR 0 2
16372: PPUSH
16373: LD_INT 24
16375: PPUSH
16376: CALL_OW 120
// end ;
16380: PPOPN 2
16382: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16383: LD_VAR 0 1
16387: PUSH
16388: LD_INT 24
16390: EQUAL
16391: PUSH
16392: LD_VAR 0 2
16396: PPUSH
16397: CALL_OW 256
16401: PUSH
16402: LD_INT 1000
16404: LESS
16405: AND
16406: IFFALSE 16420
// SetLives ( un , 1000 ) ;
16408: LD_VAR 0 2
16412: PPUSH
16413: LD_INT 1000
16415: PPUSH
16416: CALL_OW 234
// end ;
16420: PPOPN 2
16422: END
// on Command ( comandid ) do var i , j , tmp ;
16423: LD_INT 0
16425: PPUSH
16426: PPUSH
16427: PPUSH
// begin SOS_Command ( comandid ) ;
16428: LD_VAR 0 1
16432: PPUSH
16433: CALL 35586 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16437: LD_INT 22
16439: PUSH
16440: LD_INT 4
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PPUSH
16447: CALL_OW 69
16451: NOT
16452: IFFALSE 16456
// exit ;
16454: GO 16621
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16456: LD_ADDR_VAR 0 2
16460: PUSH
16461: LD_INT 22
16463: PUSH
16464: LD_INT 1
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 2
16473: PUSH
16474: LD_INT 21
16476: PUSH
16477: LD_INT 1
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 21
16486: PUSH
16487: LD_INT 2
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: LIST
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PPUSH
16503: CALL_OW 69
16507: PUSH
16508: FOR_IN
16509: IFFALSE 16619
// begin if GetTaskList ( i ) > 0 then
16511: LD_VAR 0 2
16515: PPUSH
16516: CALL_OW 437
16520: PUSH
16521: LD_INT 0
16523: GREATER
16524: IFFALSE 16617
// begin for j = 1 to GetTaskList ( i ) do
16526: LD_ADDR_VAR 0 3
16530: PUSH
16531: DOUBLE
16532: LD_INT 1
16534: DEC
16535: ST_TO_ADDR
16536: LD_VAR 0 2
16540: PPUSH
16541: CALL_OW 437
16545: PUSH
16546: FOR_TO
16547: IFFALSE 16615
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16549: LD_ADDR_VAR 0 4
16553: PUSH
16554: LD_VAR 0 2
16558: PPUSH
16559: CALL_OW 437
16563: PUSH
16564: LD_VAR 0 3
16568: ARRAY
16569: PUSH
16570: LD_INT 4
16572: ARRAY
16573: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16574: LD_VAR 0 4
16578: PPUSH
16579: CALL_OW 255
16583: PUSH
16584: LD_INT 4
16586: EQUAL
16587: PUSH
16588: LD_VAR 0 4
16592: PPUSH
16593: CALL_OW 255
16597: PUSH
16598: LD_INT 0
16600: EQUAL
16601: OR
16602: IFFALSE 16613
// ComStop ( i ) ;
16604: LD_VAR 0 2
16608: PPUSH
16609: CALL_OW 141
// end ;
16613: GO 16546
16615: POP
16616: POP
// end ; end ;
16617: GO 16508
16619: POP
16620: POP
// end ; end_of_file
16621: PPOPN 4
16623: END
// every 10 10$0 do
16624: GO 16626
16626: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16627: LD_INT 5
16629: PPUSH
16630: LD_INT 3
16632: PPUSH
16633: LD_INT 2
16635: PUSH
16636: LD_INT 2
16638: PUSH
16639: LD_INT 3
16641: PUSH
16642: LD_INT 4
16644: PUSH
16645: LD_INT 4
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: PUSH
16654: LD_OWVAR 67
16658: ARRAY
16659: PLUS
16660: PPUSH
16661: LD_INT 0
16663: PPUSH
16664: LD_EXP 16
16668: PPUSH
16669: LD_EXP 17
16673: PPUSH
16674: CALL_OW 12
16678: PPUSH
16679: LD_INT 4
16681: PPUSH
16682: LD_INT 14
16684: PPUSH
16685: LD_INT 1
16687: PPUSH
16688: LD_INT 2
16690: PPUSH
16691: CALL 6960 0 9
16695: END
// every 20 20$0 do
16696: GO 16698
16698: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16699: LD_INT 5
16701: PPUSH
16702: LD_INT 3
16704: PPUSH
16705: LD_INT 4
16707: PUSH
16708: LD_INT 2
16710: PUSH
16711: LD_INT 3
16713: PUSH
16714: LD_INT 4
16716: PUSH
16717: LD_INT 5
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: PUSH
16726: LD_OWVAR 67
16730: ARRAY
16731: PLUS
16732: PPUSH
16733: LD_INT 2
16735: PPUSH
16736: LD_EXP 16
16740: PPUSH
16741: LD_EXP 17
16745: PPUSH
16746: CALL_OW 12
16750: PPUSH
16751: LD_INT 4
16753: PPUSH
16754: LD_INT 14
16756: PPUSH
16757: LD_INT 1
16759: PPUSH
16760: LD_INT 1
16762: PPUSH
16763: CALL 6960 0 9
16767: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16768: GO 16770
16770: DISABLE
16771: LD_INT 0
16773: PPUSH
16774: PPUSH
16775: PPUSH
16776: PPUSH
16777: PPUSH
// begin hex := [ 123 , 95 ] ;
16778: LD_ADDR_VAR 0 4
16782: PUSH
16783: LD_INT 123
16785: PUSH
16786: LD_INT 95
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: ST_TO_ADDR
// tmp := [ ] ;
16793: LD_ADDR_VAR 0 5
16797: PUSH
16798: EMPTY
16799: ST_TO_ADDR
// if Difficulty > 1 then
16800: LD_OWVAR 67
16804: PUSH
16805: LD_INT 1
16807: GREATER
16808: IFFALSE 16818
// specAttack := true ;
16810: LD_ADDR_EXP 47
16814: PUSH
16815: LD_INT 1
16817: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16818: LD_ADDR_VAR 0 1
16822: PUSH
16823: DOUBLE
16824: LD_INT 1
16826: DEC
16827: ST_TO_ADDR
16828: LD_INT 4
16830: PUSH
16831: LD_INT 5
16833: PUSH
16834: LD_INT 6
16836: PUSH
16837: LD_INT 7
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: PUSH
16846: LD_OWVAR 67
16850: ARRAY
16851: PUSH
16852: FOR_TO
16853: IFFALSE 17155
// begin uc_side := 5 ;
16855: LD_ADDR_OWVAR 20
16859: PUSH
16860: LD_INT 5
16862: ST_TO_ADDR
// uc_nation := 3 ;
16863: LD_ADDR_OWVAR 21
16867: PUSH
16868: LD_INT 3
16870: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16871: LD_ADDR_OWVAR 37
16875: PUSH
16876: LD_INT 21
16878: PUSH
16879: LD_INT 22
16881: PUSH
16882: LD_INT 23
16884: PUSH
16885: LD_INT 24
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: PUSH
16894: LD_VAR 0 1
16898: PUSH
16899: LD_OWVAR 67
16903: MOD
16904: PUSH
16905: LD_INT 1
16907: PLUS
16908: ARRAY
16909: ST_TO_ADDR
// vc_engine := engine_combustion ;
16910: LD_ADDR_OWVAR 39
16914: PUSH
16915: LD_INT 1
16917: ST_TO_ADDR
// vc_control := control_manual ;
16918: LD_ADDR_OWVAR 38
16922: PUSH
16923: LD_INT 1
16925: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16926: LD_ADDR_OWVAR 40
16930: PUSH
16931: LD_INT 42
16933: PUSH
16934: LD_INT 43
16936: PUSH
16937: LD_INT 44
16939: PUSH
16940: LD_INT 44
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: PUSH
16949: LD_VAR 0 1
16953: PUSH
16954: LD_OWVAR 67
16958: MOD
16959: PUSH
16960: LD_INT 1
16962: PLUS
16963: ARRAY
16964: ST_TO_ADDR
// veh := CreateVehicle ;
16965: LD_ADDR_VAR 0 3
16969: PUSH
16970: CALL_OW 45
16974: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
16975: LD_VAR 0 3
16979: PPUSH
16980: LD_INT 5
16982: PPUSH
16983: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
16987: LD_INT 35
16989: PPUSH
16990: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
16994: LD_VAR 0 4
16998: PUSH
16999: LD_INT 1
17001: ARRAY
17002: PPUSH
17003: LD_VAR 0 4
17007: PUSH
17008: LD_INT 2
17010: ARRAY
17011: PPUSH
17012: CALL_OW 428
17016: PUSH
17017: LD_INT 0
17019: EQUAL
17020: IFFALSE 16987
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17022: LD_VAR 0 3
17026: PPUSH
17027: LD_VAR 0 4
17031: PUSH
17032: LD_INT 1
17034: ARRAY
17035: PPUSH
17036: LD_VAR 0 4
17040: PUSH
17041: LD_INT 2
17043: ARRAY
17044: PPUSH
17045: LD_INT 0
17047: PPUSH
17048: CALL_OW 48
// uc_side := 5 ;
17052: LD_ADDR_OWVAR 20
17056: PUSH
17057: LD_INT 5
17059: ST_TO_ADDR
// uc_nation := 3 ;
17060: LD_ADDR_OWVAR 21
17064: PUSH
17065: LD_INT 3
17067: ST_TO_ADDR
// InitHC_All ( ) ;
17068: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
17072: LD_INT 0
17074: PPUSH
17075: LD_INT 2
17077: PUSH
17078: LD_OWVAR 67
17082: PLUS
17083: PPUSH
17084: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17088: CALL_OW 44
17092: PPUSH
17093: LD_VAR 0 3
17097: PPUSH
17098: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17102: LD_VAR 0 3
17106: PPUSH
17107: LD_INT 101
17109: PPUSH
17110: LD_INT 77
17112: PPUSH
17113: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17117: LD_ADDR_VAR 0 5
17121: PUSH
17122: LD_VAR 0 5
17126: PPUSH
17127: LD_VAR 0 5
17131: PUSH
17132: LD_INT 1
17134: PLUS
17135: PPUSH
17136: LD_VAR 0 3
17140: PPUSH
17141: CALL_OW 1
17145: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17146: LD_INT 105
17148: PPUSH
17149: CALL_OW 67
// end ;
17153: GO 16852
17155: POP
17156: POP
// repeat wait ( 0 0$1 ) ;
17157: LD_INT 35
17159: PPUSH
17160: CALL_OW 67
// for i in tmp do
17164: LD_ADDR_VAR 0 1
17168: PUSH
17169: LD_VAR 0 5
17173: PUSH
17174: FOR_IN
17175: IFFALSE 17243
// if not IsOk ( i ) then
17177: LD_VAR 0 1
17181: PPUSH
17182: CALL_OW 302
17186: NOT
17187: IFFALSE 17207
// tmp := tmp diff i else
17189: LD_ADDR_VAR 0 5
17193: PUSH
17194: LD_VAR 0 5
17198: PUSH
17199: LD_VAR 0 1
17203: DIFF
17204: ST_TO_ADDR
17205: GO 17241
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17207: LD_VAR 0 1
17211: PPUSH
17212: LD_INT 22
17214: PUSH
17215: LD_INT 1
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PPUSH
17222: CALL_OW 69
17226: PPUSH
17227: LD_VAR 0 1
17231: PPUSH
17232: CALL_OW 74
17236: PPUSH
17237: CALL_OW 115
17241: GO 17174
17243: POP
17244: POP
// until not tmp ;
17245: LD_VAR 0 5
17249: NOT
17250: IFFALSE 17157
// end ;
17252: PPOPN 5
17254: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17255: LD_EXP 47
17259: IFFALSE 17637
17261: GO 17263
17263: DISABLE
17264: LD_INT 0
17266: PPUSH
17267: PPUSH
17268: PPUSH
17269: PPUSH
// begin wait ( 0 0$20 ) ;
17270: LD_INT 700
17272: PPUSH
17273: CALL_OW 67
// uc_side := 5 ;
17277: LD_ADDR_OWVAR 20
17281: PUSH
17282: LD_INT 5
17284: ST_TO_ADDR
// uc_nation := 3 ;
17285: LD_ADDR_OWVAR 21
17289: PUSH
17290: LD_INT 3
17292: ST_TO_ADDR
// InitHc ;
17293: CALL_OW 19
// hc_importance := 0 ;
17297: LD_ADDR_OWVAR 32
17301: PUSH
17302: LD_INT 0
17304: ST_TO_ADDR
// tmp := [ ] ;
17305: LD_ADDR_VAR 0 2
17309: PUSH
17310: EMPTY
17311: ST_TO_ADDR
// InitHC_All ( ) ;
17312: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17316: LD_INT 0
17318: PPUSH
17319: LD_INT 2
17321: PPUSH
17322: LD_INT 6
17324: PPUSH
17325: CALL_OW 380
// eng := CreateHuman ;
17329: LD_ADDR_VAR 0 4
17333: PUSH
17334: CALL_OW 44
17338: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17339: LD_VAR 0 4
17343: PPUSH
17344: LD_INT 78
17346: PPUSH
17347: LD_INT 2
17349: PPUSH
17350: LD_INT 4
17352: PPUSH
17353: LD_INT 0
17355: PPUSH
17356: CALL_OW 50
// for i = 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
17360: LD_ADDR_VAR 0 3
17364: PUSH
17365: DOUBLE
17366: LD_INT 1
17368: DEC
17369: ST_TO_ADDR
17370: LD_INT 3
17372: PUSH
17373: LD_INT 3
17375: PUSH
17376: LD_INT 4
17378: PUSH
17379: LD_INT 5
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: PUSH
17388: LD_OWVAR 67
17392: ARRAY
17393: PUSH
17394: FOR_TO
17395: IFFALSE 17484
// begin InitHC_All ( ) ;
17397: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17401: LD_INT 0
17403: PPUSH
17404: LD_INT 1
17406: PPUSH
17407: LD_INT 4
17409: PUSH
17410: LD_INT 5
17412: PUSH
17413: LD_INT 6
17415: PUSH
17416: LD_INT 6
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: PUSH
17425: LD_OWVAR 67
17429: ARRAY
17430: PPUSH
17431: CALL_OW 380
// un := CreateHuman ;
17435: LD_ADDR_VAR 0 1
17439: PUSH
17440: CALL_OW 44
17444: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17445: LD_VAR 0 1
17449: PPUSH
17450: LD_INT 78
17452: PPUSH
17453: LD_INT 2
17455: PPUSH
17456: LD_INT 4
17458: PPUSH
17459: LD_INT 0
17461: PPUSH
17462: CALL_OW 50
// tmp := tmp ^ un ;
17466: LD_ADDR_VAR 0 2
17470: PUSH
17471: LD_VAR 0 2
17475: PUSH
17476: LD_VAR 0 1
17480: ADD
17481: ST_TO_ADDR
// end ;
17482: GO 17394
17484: POP
17485: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17486: LD_VAR 0 2
17490: PPUSH
17491: LD_INT 49
17493: PPUSH
17494: LD_INT 3
17496: PPUSH
17497: CALL_OW 111
// wait ( 0 0$2 ) ;
17501: LD_INT 70
17503: PPUSH
17504: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17508: LD_VAR 0 4
17512: PPUSH
17513: LD_INT 49
17515: PPUSH
17516: LD_INT 3
17518: PPUSH
17519: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17523: LD_VAR 0 4
17527: PPUSH
17528: LD_INT 4
17530: PPUSH
17531: CALL_OW 227
// wait ( 0 0$10 ) ;
17535: LD_INT 350
17537: PPUSH
17538: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17542: LD_INT 35
17544: PPUSH
17545: CALL_OW 67
// for i in tmp do
17549: LD_ADDR_VAR 0 3
17553: PUSH
17554: LD_VAR 0 2
17558: PUSH
17559: FOR_IN
17560: IFFALSE 17628
// if not IsOk ( i ) then
17562: LD_VAR 0 3
17566: PPUSH
17567: CALL_OW 302
17571: NOT
17572: IFFALSE 17592
// tmp := tmp diff i else
17574: LD_ADDR_VAR 0 2
17578: PUSH
17579: LD_VAR 0 2
17583: PUSH
17584: LD_VAR 0 3
17588: DIFF
17589: ST_TO_ADDR
17590: GO 17626
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17592: LD_VAR 0 3
17596: PPUSH
17597: LD_INT 22
17599: PUSH
17600: LD_INT 1
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PPUSH
17607: CALL_OW 69
17611: PPUSH
17612: LD_VAR 0 3
17616: PPUSH
17617: CALL_OW 74
17621: PPUSH
17622: CALL_OW 115
17626: GO 17559
17628: POP
17629: POP
// until not tmp ;
17630: LD_VAR 0 2
17634: NOT
17635: IFFALSE 17542
// end ; end_of_file
17637: PPOPN 4
17639: END
// every 0 0$1 trigger startTimer = 1 do
17640: LD_EXP 30
17644: PUSH
17645: LD_INT 1
17647: EQUAL
17648: IFFALSE 17778
17650: GO 17652
17652: DISABLE
// begin enable ;
17653: ENABLE
// if timerStatus = 1 then
17654: LD_EXP 29
17658: PUSH
17659: LD_INT 1
17661: EQUAL
17662: IFFALSE 17695
// begin timeToSupport = timeToSupport - 0 0$01 ;
17664: LD_ADDR_EXP 28
17668: PUSH
17669: LD_EXP 28
17673: PUSH
17674: LD_INT 35
17676: MINUS
17677: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17678: LD_ADDR_OWVAR 47
17682: PUSH
17683: LD_STRING #Am04-1
17685: PUSH
17686: LD_EXP 28
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: ST_TO_ADDR
// end ; if timerStatus = 2 then
17695: LD_EXP 29
17699: PUSH
17700: LD_INT 2
17702: EQUAL
17703: IFFALSE 17736
// begin timeToSupport = timeToSupport - 0 0$01 ;
17705: LD_ADDR_EXP 28
17709: PUSH
17710: LD_EXP 28
17714: PUSH
17715: LD_INT 35
17717: MINUS
17718: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17719: LD_ADDR_OWVAR 47
17723: PUSH
17724: LD_STRING #Am04-2
17726: PUSH
17727: LD_EXP 28
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: ST_TO_ADDR
// end ; if timerStatus = 3 then
17736: LD_EXP 29
17740: PUSH
17741: LD_INT 3
17743: EQUAL
17744: IFFALSE 17760
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17746: LD_ADDR_EXP 27
17750: PUSH
17751: LD_EXP 27
17755: PUSH
17756: LD_INT 35
17758: MINUS
17759: ST_TO_ADDR
// if timerStatus = 4 then
17760: LD_EXP 29
17764: PUSH
17765: LD_INT 4
17767: EQUAL
17768: IFFALSE 17778
// display_strings =  ;
17770: LD_ADDR_OWVAR 47
17774: PUSH
17775: LD_STRING 
17777: ST_TO_ADDR
// end ; end_of_file
17778: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17779: LD_EXP 15
17783: PPUSH
17784: CALL_OW 301
17788: PUSH
17789: LD_INT 22
17791: PUSH
17792: LD_INT 3
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 21
17801: PUSH
17802: LD_INT 1
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PPUSH
17813: CALL_OW 69
17817: PUSH
17818: LD_INT 14
17820: PUSH
17821: LD_INT 13
17823: PUSH
17824: LD_INT 12
17826: PUSH
17827: LD_INT 11
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: PUSH
17836: LD_OWVAR 67
17840: ARRAY
17841: LESS
17842: AND
17843: IFFALSE 18429
17845: GO 17847
17847: DISABLE
17848: LD_INT 0
17850: PPUSH
17851: PPUSH
17852: PPUSH
// begin AIEnable = 0 ;
17853: LD_ADDR_EXP 37
17857: PUSH
17858: LD_INT 0
17860: ST_TO_ADDR
// escapeAvalaible = 1 ;
17861: LD_ADDR_EXP 40
17865: PUSH
17866: LD_INT 1
17868: ST_TO_ADDR
// Video ( true ) ;
17869: LD_INT 1
17871: PPUSH
17872: CALL 77211 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17876: LD_INT 3
17878: PPUSH
17879: LD_INT 1
17881: PPUSH
17882: LD_INT 1
17884: PPUSH
17885: LD_INT 0
17887: PPUSH
17888: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17892: LD_INT 6
17894: PPUSH
17895: LD_INT 1
17897: PPUSH
17898: LD_INT 1
17900: PPUSH
17901: LD_INT 0
17903: PPUSH
17904: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17908: LD_INT 5
17910: PPUSH
17911: LD_INT 1
17913: PPUSH
17914: LD_INT 1
17916: PPUSH
17917: LD_INT 0
17919: PPUSH
17920: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17924: LD_INT 3
17926: PPUSH
17927: LD_INT 1
17929: PPUSH
17930: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17934: LD_INT 97
17936: PPUSH
17937: LD_INT 91
17939: PPUSH
17940: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17944: LD_INT 22
17946: PUSH
17947: LD_INT 3
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 21
17956: PUSH
17957: LD_INT 1
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PPUSH
17968: CALL_OW 69
17972: PPUSH
17973: CALL_OW 121
// wait ( 0 0$01 ) ;
17977: LD_INT 35
17979: PPUSH
17980: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17984: LD_INT 22
17986: PUSH
17987: LD_INT 3
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 21
17996: PUSH
17997: LD_INT 1
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PPUSH
18008: CALL_OW 69
18012: PPUSH
18013: LD_INT 124
18015: PPUSH
18016: LD_INT 98
18018: PPUSH
18019: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18023: LD_INT 22
18025: PUSH
18026: LD_INT 5
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 21
18035: PUSH
18036: LD_INT 1
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PPUSH
18047: CALL_OW 69
18051: PPUSH
18052: CALL_OW 121
// wait ( 0 0$01 ) ;
18056: LD_INT 35
18058: PPUSH
18059: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18063: LD_INT 22
18065: PUSH
18066: LD_INT 5
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 21
18075: PUSH
18076: LD_INT 1
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PPUSH
18087: CALL_OW 69
18091: PPUSH
18092: LD_INT 124
18094: PPUSH
18095: LD_INT 98
18097: PPUSH
18098: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18102: LD_INT 22
18104: PUSH
18105: LD_INT 6
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 21
18114: PUSH
18115: LD_INT 1
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PPUSH
18126: CALL_OW 69
18130: PPUSH
18131: CALL_OW 121
// wait ( 0 0$01 ) ;
18135: LD_INT 35
18137: PPUSH
18138: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18142: LD_INT 22
18144: PUSH
18145: LD_INT 6
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 21
18154: PUSH
18155: LD_INT 1
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PPUSH
18166: CALL_OW 69
18170: PPUSH
18171: LD_INT 124
18173: PPUSH
18174: LD_INT 98
18176: PPUSH
18177: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18181: LD_INT 22
18183: PUSH
18184: LD_INT 1
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 21
18193: PUSH
18194: LD_INT 1
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PPUSH
18205: CALL_OW 69
18209: PPUSH
18210: LD_INT 124
18212: PPUSH
18213: LD_INT 96
18215: PPUSH
18216: CALL_OW 114
// wait ( 0 0$1 ) ;
18220: LD_INT 35
18222: PPUSH
18223: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18227: LD_INT 124
18229: PPUSH
18230: LD_INT 96
18232: PPUSH
18233: CALL_OW 84
// p := 0 0$0 ;
18237: LD_ADDR_VAR 0 3
18241: PUSH
18242: LD_INT 0
18244: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18245: LD_ADDR_VAR 0 2
18249: PUSH
18250: LD_INT 2
18252: PUSH
18253: LD_INT 22
18255: PUSH
18256: LD_INT 3
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 22
18265: PUSH
18266: LD_INT 6
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 21
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PPUSH
18292: CALL_OW 69
18296: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18297: LD_INT 35
18299: PPUSH
18300: CALL_OW 67
// p := p + 0 0$1 ;
18304: LD_ADDR_VAR 0 3
18308: PUSH
18309: LD_VAR 0 3
18313: PUSH
18314: LD_INT 35
18316: PLUS
18317: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18318: LD_VAR 0 2
18322: PPUSH
18323: LD_INT 5
18325: PPUSH
18326: CALL_OW 113
// for i in tmp do
18330: LD_ADDR_VAR 0 1
18334: PUSH
18335: LD_VAR 0 2
18339: PUSH
18340: FOR_IN
18341: IFFALSE 18368
// if IsInArea ( tmp , RussianEscape ) then
18343: LD_VAR 0 2
18347: PPUSH
18348: LD_INT 5
18350: PPUSH
18351: CALL_OW 308
18355: IFFALSE 18366
// RemoveUnit ( i ) ;
18357: LD_VAR 0 1
18361: PPUSH
18362: CALL_OW 64
18366: GO 18340
18368: POP
18369: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18370: LD_INT 23
18372: PUSH
18373: LD_INT 3
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 21
18382: PUSH
18383: LD_INT 1
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 24
18392: PUSH
18393: LD_INT 250
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: LIST
18404: PPUSH
18405: CALL_OW 69
18409: PUSH
18410: LD_INT 0
18412: EQUAL
18413: PUSH
18414: LD_VAR 0 3
18418: PUSH
18419: LD_INT 245
18421: GREATEREQUAL
18422: OR
18423: IFFALSE 18297
// FinishMission ;
18425: CALL 18432 0 0
// end ;
18429: PPOPN 3
18431: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18432: LD_INT 0
18434: PPUSH
18435: PPUSH
18436: PPUSH
18437: PPUSH
18438: PPUSH
// if not vehicleProduceCounter then
18439: LD_EXP 42
18443: NOT
18444: IFFALSE 18453
// SetAchievement ( ACH_INFANTRY ) ;
18446: LD_STRING ACH_INFANTRY
18448: PPUSH
18449: CALL_OW 543
// if tick <= 20 20$00 then
18453: LD_OWVAR 1
18457: PUSH
18458: LD_INT 42000
18460: LESSEQUAL
18461: IFFALSE 18477
// begin wait ( 3 ) ;
18463: LD_INT 3
18465: PPUSH
18466: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18470: LD_STRING ACH_ASPEED_4
18472: PPUSH
18473: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18477: LD_INT 22
18479: PPUSH
18480: CALL 19121 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18484: LD_INT 69
18486: PPUSH
18487: LD_INT 1
18489: PPUSH
18490: CALL_OW 321
18494: PPUSH
18495: LD_STRING GatlingInGamma
18497: PPUSH
18498: CALL_OW 39
// m1 := false ;
18502: LD_ADDR_VAR 0 3
18506: PUSH
18507: LD_INT 0
18509: ST_TO_ADDR
// m2 := false ;
18510: LD_ADDR_VAR 0 4
18514: PUSH
18515: LD_INT 0
18517: ST_TO_ADDR
// m3 := false ;
18518: LD_ADDR_VAR 0 5
18522: PUSH
18523: LD_INT 0
18525: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18526: LD_EXP 34
18530: PUSH
18531: LD_INT 1
18533: EQUAL
18534: PUSH
18535: LD_EXP 35
18539: PUSH
18540: LD_INT 1
18542: EQUAL
18543: AND
18544: IFFALSE 18566
// begin AddMedal ( oil , 1 ) ;
18546: LD_STRING oil
18548: PPUSH
18549: LD_INT 1
18551: PPUSH
18552: CALL_OW 101
// m1 := true ;
18556: LD_ADDR_VAR 0 3
18560: PUSH
18561: LD_INT 1
18563: ST_TO_ADDR
// end else
18564: GO 18659
// begin if buildOil = 1 and buildPower = 0 then
18566: LD_EXP 34
18570: PUSH
18571: LD_INT 1
18573: EQUAL
18574: PUSH
18575: LD_EXP 35
18579: PUSH
18580: LD_INT 0
18582: EQUAL
18583: AND
18584: IFFALSE 18597
// AddMedal ( oil , - 1 ) ;
18586: LD_STRING oil
18588: PPUSH
18589: LD_INT 1
18591: NEG
18592: PPUSH
18593: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18597: LD_EXP 34
18601: PUSH
18602: LD_INT 0
18604: EQUAL
18605: PUSH
18606: LD_EXP 35
18610: PUSH
18611: LD_INT 1
18613: EQUAL
18614: AND
18615: IFFALSE 18628
// AddMedal ( oil , - 2 ) ;
18617: LD_STRING oil
18619: PPUSH
18620: LD_INT 2
18622: NEG
18623: PPUSH
18624: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18628: LD_EXP 34
18632: PUSH
18633: LD_INT 0
18635: EQUAL
18636: PUSH
18637: LD_EXP 35
18641: PUSH
18642: LD_INT 0
18644: EQUAL
18645: AND
18646: IFFALSE 18659
// AddMedal ( oil , - 3 ) ;
18648: LD_STRING oil
18650: PPUSH
18651: LD_INT 3
18653: NEG
18654: PPUSH
18655: CALL_OW 101
// end ; if lostCounter > 3 then
18659: LD_EXP 38
18663: PUSH
18664: LD_INT 3
18666: GREATER
18667: IFFALSE 18682
// AddMedal ( deaths , - 1 ) else
18669: LD_STRING deaths
18671: PPUSH
18672: LD_INT 1
18674: NEG
18675: PPUSH
18676: CALL_OW 101
18680: GO 18700
// begin AddMedal ( deaths , 1 ) ;
18682: LD_STRING deaths
18684: PPUSH
18685: LD_INT 1
18687: PPUSH
18688: CALL_OW 101
// m2 := true ;
18692: LD_ADDR_VAR 0 4
18696: PUSH
18697: LD_INT 1
18699: ST_TO_ADDR
// end ; if honor = 1 then
18700: LD_EXP 39
18704: PUSH
18705: LD_INT 1
18707: EQUAL
18708: IFFALSE 18730
// begin AddMedal ( honour , 1 ) ;
18710: LD_STRING honour
18712: PPUSH
18713: LD_INT 1
18715: PPUSH
18716: CALL_OW 101
// m3 := true ;
18720: LD_ADDR_VAR 0 5
18724: PUSH
18725: LD_INT 1
18727: ST_TO_ADDR
// end else
18728: GO 18741
// AddMedal ( honour , - 1 ) ;
18730: LD_STRING honour
18732: PPUSH
18733: LD_INT 1
18735: NEG
18736: PPUSH
18737: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18741: LD_VAR 0 3
18745: PUSH
18746: LD_VAR 0 4
18750: AND
18751: PUSH
18752: LD_VAR 0 5
18756: AND
18757: PUSH
18758: LD_OWVAR 67
18762: PUSH
18763: LD_INT 3
18765: GREATEREQUAL
18766: AND
18767: IFFALSE 18779
// SetAchievementEX ( ACH_AMER , 4 ) ;
18769: LD_STRING ACH_AMER
18771: PPUSH
18772: LD_INT 4
18774: PPUSH
18775: CALL_OW 564
// GiveMedals ( Main ) ;
18779: LD_STRING Main
18781: PPUSH
18782: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18786: LD_INT 22
18788: PUSH
18789: LD_INT 1
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 23
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 21
18808: PUSH
18809: LD_INT 1
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: PPUSH
18821: CALL_OW 69
18825: PPUSH
18826: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18830: LD_EXP 1
18834: PPUSH
18835: LD_EXP 48
18839: PUSH
18840: LD_STRING JMM
18842: STR
18843: PPUSH
18844: CALL_OW 38
// if IsOK ( Bobby ) then
18848: LD_EXP 2
18852: PPUSH
18853: CALL_OW 302
18857: IFFALSE 18877
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18859: LD_EXP 2
18863: PPUSH
18864: LD_EXP 48
18868: PUSH
18869: LD_STRING Bobby
18871: STR
18872: PPUSH
18873: CALL_OW 38
// if IsOK ( Cyrus ) then
18877: LD_EXP 3
18881: PPUSH
18882: CALL_OW 302
18886: IFFALSE 18906
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18888: LD_EXP 3
18892: PPUSH
18893: LD_EXP 48
18897: PUSH
18898: LD_STRING Cyrus
18900: STR
18901: PPUSH
18902: CALL_OW 38
// if IsOK ( Lisa ) then
18906: LD_EXP 4
18910: PPUSH
18911: CALL_OW 302
18915: IFFALSE 18935
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18917: LD_EXP 4
18921: PPUSH
18922: LD_EXP 48
18926: PUSH
18927: LD_STRING Lisa
18929: STR
18930: PPUSH
18931: CALL_OW 38
// if IsOK ( Brown ) then
18935: LD_EXP 7
18939: PPUSH
18940: CALL_OW 302
18944: IFFALSE 18964
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18946: LD_EXP 7
18950: PPUSH
18951: LD_EXP 48
18955: PUSH
18956: LD_STRING Brown
18958: STR
18959: PPUSH
18960: CALL_OW 38
// if not IsDead ( Donaldson ) then
18964: LD_EXP 13
18968: PPUSH
18969: CALL_OW 301
18973: NOT
18974: IFFALSE 18994
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18976: LD_EXP 13
18980: PPUSH
18981: LD_EXP 48
18985: PUSH
18986: LD_STRING Donaldson
18988: STR
18989: PPUSH
18990: CALL_OW 38
// if not IsDead ( Frank ) then
18994: LD_EXP 5
18998: PPUSH
18999: CALL_OW 301
19003: NOT
19004: IFFALSE 19024
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19006: LD_EXP 5
19010: PPUSH
19011: LD_EXP 48
19015: PUSH
19016: LD_STRING Frank
19018: STR
19019: PPUSH
19020: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19024: LD_INT 50
19026: PUSH
19027: EMPTY
19028: LIST
19029: PUSH
19030: LD_INT 22
19032: PUSH
19033: LD_INT 1
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 21
19042: PUSH
19043: LD_INT 1
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: LIST
19054: PPUSH
19055: CALL_OW 69
19059: PUSH
19060: LD_EXP 1
19064: PUSH
19065: LD_EXP 2
19069: PUSH
19070: LD_EXP 3
19074: PUSH
19075: LD_EXP 4
19079: PUSH
19080: LD_EXP 7
19084: PUSH
19085: LD_EXP 13
19089: PUSH
19090: LD_EXP 5
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: DIFF
19104: PPUSH
19105: LD_STRING 04_other_survivors
19107: PPUSH
19108: CALL_OW 38
// YouWin ;
19112: CALL_OW 103
// end ;
19116: LD_VAR 0 1
19120: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19121: LD_INT 0
19123: PPUSH
19124: PPUSH
19125: PPUSH
19126: PPUSH
// gammaBase = [ ] ;
19127: LD_ADDR_VAR 0 4
19131: PUSH
19132: EMPTY
19133: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19134: LD_ADDR_VAR 0 5
19138: PUSH
19139: LD_VAR 0 1
19143: PPUSH
19144: LD_INT 22
19146: PUSH
19147: LD_INT 1
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 21
19156: PUSH
19157: LD_INT 3
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PPUSH
19168: CALL_OW 70
19172: ST_TO_ADDR
// for i in buildings do
19173: LD_ADDR_VAR 0 3
19177: PUSH
19178: LD_VAR 0 5
19182: PUSH
19183: FOR_IN
19184: IFFALSE 19521
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19186: LD_VAR 0 3
19190: PPUSH
19191: CALL_OW 266
19195: PUSH
19196: LD_INT 6
19198: PUSH
19199: LD_INT 7
19201: PUSH
19202: LD_INT 8
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: LIST
19209: IN
19210: IFFALSE 19324
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19212: LD_ADDR_VAR 0 4
19216: PUSH
19217: LD_VAR 0 4
19221: PUSH
19222: LD_VAR 0 3
19226: PPUSH
19227: CALL_OW 266
19231: PUSH
19232: LD_VAR 0 3
19236: PPUSH
19237: CALL_OW 250
19241: PUSH
19242: LD_VAR 0 3
19246: PPUSH
19247: CALL_OW 251
19251: PUSH
19252: LD_VAR 0 3
19256: PPUSH
19257: CALL_OW 254
19261: PUSH
19262: LD_VAR 0 3
19266: PPUSH
19267: CALL_OW 267
19271: PUSH
19272: LD_VAR 0 3
19276: PPUSH
19277: CALL_OW 248
19281: PUSH
19282: LD_VAR 0 3
19286: PPUSH
19287: LD_INT 1
19289: PPUSH
19290: CALL_OW 268
19294: PUSH
19295: LD_VAR 0 3
19299: PPUSH
19300: LD_INT 2
19302: PPUSH
19303: CALL_OW 268
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: PUSH
19318: EMPTY
19319: LIST
19320: ADD
19321: ST_TO_ADDR
19322: GO 19519
// if GetBType ( i ) in [ b_bunker ] then
19324: LD_VAR 0 3
19328: PPUSH
19329: CALL_OW 266
19333: PUSH
19334: LD_INT 32
19336: PUSH
19337: EMPTY
19338: LIST
19339: IN
19340: IFFALSE 19437
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19342: LD_ADDR_VAR 0 4
19346: PUSH
19347: LD_VAR 0 4
19351: PUSH
19352: LD_VAR 0 3
19356: PPUSH
19357: CALL_OW 266
19361: PUSH
19362: LD_VAR 0 3
19366: PPUSH
19367: CALL_OW 250
19371: PUSH
19372: LD_VAR 0 3
19376: PPUSH
19377: CALL_OW 251
19381: PUSH
19382: LD_VAR 0 3
19386: PPUSH
19387: CALL_OW 254
19391: PUSH
19392: LD_VAR 0 3
19396: PPUSH
19397: CALL_OW 267
19401: PUSH
19402: LD_VAR 0 3
19406: PPUSH
19407: CALL_OW 248
19411: PUSH
19412: LD_VAR 0 3
19416: PPUSH
19417: CALL_OW 269
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: PUSH
19431: EMPTY
19432: LIST
19433: ADD
19434: ST_TO_ADDR
19435: GO 19519
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19437: LD_ADDR_VAR 0 4
19441: PUSH
19442: LD_VAR 0 4
19446: PUSH
19447: LD_VAR 0 3
19451: PPUSH
19452: CALL_OW 266
19456: PUSH
19457: LD_VAR 0 3
19461: PPUSH
19462: CALL_OW 250
19466: PUSH
19467: LD_VAR 0 3
19471: PPUSH
19472: CALL_OW 251
19476: PUSH
19477: LD_VAR 0 3
19481: PPUSH
19482: CALL_OW 254
19486: PUSH
19487: LD_VAR 0 3
19491: PPUSH
19492: CALL_OW 267
19496: PUSH
19497: LD_VAR 0 3
19501: PPUSH
19502: CALL_OW 248
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: PUSH
19515: EMPTY
19516: LIST
19517: ADD
19518: ST_TO_ADDR
// end ;
19519: GO 19183
19521: POP
19522: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19523: LD_VAR 0 4
19527: PPUSH
19528: LD_STRING GammaBase
19530: PPUSH
19531: CALL_OW 39
// end ; end_of_file
19535: LD_VAR 0 2
19539: RET
// every 1 1$15 do
19540: GO 19542
19542: DISABLE
// begin if supply <= 13 and supply > 7 then
19543: LD_EXP 36
19547: PUSH
19548: LD_INT 13
19550: LESSEQUAL
19551: PUSH
19552: LD_EXP 36
19556: PUSH
19557: LD_INT 7
19559: GREATER
19560: AND
19561: IFFALSE 19584
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19563: LD_INT 3
19565: PPUSH
19566: LD_INT 5
19568: PPUSH
19569: CALL_OW 12
19573: PPUSH
19574: LD_INT 18
19576: PPUSH
19577: LD_INT 1
19579: PPUSH
19580: CALL_OW 55
// if supply <= 7 and supply > 4 then
19584: LD_EXP 36
19588: PUSH
19589: LD_INT 7
19591: LESSEQUAL
19592: PUSH
19593: LD_EXP 36
19597: PUSH
19598: LD_INT 4
19600: GREATER
19601: AND
19602: IFFALSE 19625
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19604: LD_INT 3
19606: PPUSH
19607: LD_INT 5
19609: PPUSH
19610: CALL_OW 12
19614: PPUSH
19615: LD_INT 19
19617: PPUSH
19618: LD_INT 1
19620: PPUSH
19621: CALL_OW 55
// if supply <= 4 and supply > 0 then
19625: LD_EXP 36
19629: PUSH
19630: LD_INT 4
19632: LESSEQUAL
19633: PUSH
19634: LD_EXP 36
19638: PUSH
19639: LD_INT 0
19641: GREATER
19642: AND
19643: IFFALSE 19666
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19645: LD_INT 3
19647: PPUSH
19648: LD_INT 5
19650: PPUSH
19651: CALL_OW 12
19655: PPUSH
19656: LD_INT 20
19658: PPUSH
19659: LD_INT 1
19661: PPUSH
19662: CALL_OW 55
// if supply then
19666: LD_EXP 36
19670: IFFALSE 19687
// begin supply = supply - 1 ;
19672: LD_ADDR_EXP 36
19676: PUSH
19677: LD_EXP 36
19681: PUSH
19682: LD_INT 1
19684: MINUS
19685: ST_TO_ADDR
// enable ;
19686: ENABLE
// end ; end ; end_of_file end_of_file
19687: END
// export globalGameSaveCounter ; every 0 0$1 do
19688: GO 19690
19690: DISABLE
// begin enable ;
19691: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19692: LD_STRING updateTimer(
19694: PUSH
19695: LD_OWVAR 1
19699: STR
19700: PUSH
19701: LD_STRING );
19703: STR
19704: PPUSH
19705: CALL_OW 559
// end ;
19709: END
// every 0 0$1 do
19710: GO 19712
19712: DISABLE
// begin globalGameSaveCounter := 0 ;
19713: LD_ADDR_EXP 50
19717: PUSH
19718: LD_INT 0
19720: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19721: LD_STRING setGameSaveCounter(0)
19723: PPUSH
19724: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19728: LD_STRING initStreamRollete();
19730: PPUSH
19731: CALL_OW 559
// InitStreamMode ;
19735: CALL 21061 0 0
// DefineStreamItems ( false ) ;
19739: LD_INT 0
19741: PPUSH
19742: CALL 21525 0 1
// end ;
19746: END
// export function SOS_MapStart ( ) ; begin
19747: LD_INT 0
19749: PPUSH
// if streamModeActive then
19750: LD_EXP 51
19754: IFFALSE 19763
// DefineStreamItems ( true ) ;
19756: LD_INT 1
19758: PPUSH
19759: CALL 21525 0 1
// UpdateLuaVariables ( ) ;
19763: CALL 19780 0 0
// UpdateFactoryWaypoints ( ) ;
19767: CALL 34386 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19771: CALL 34643 0 0
// end ;
19775: LD_VAR 0 1
19779: RET
// function UpdateLuaVariables ( ) ; begin
19780: LD_INT 0
19782: PPUSH
// if globalGameSaveCounter then
19783: LD_EXP 50
19787: IFFALSE 19821
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19789: LD_ADDR_EXP 50
19793: PUSH
19794: LD_EXP 50
19798: PPUSH
19799: CALL 78600 0 1
19803: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19804: LD_STRING setGameSaveCounter(
19806: PUSH
19807: LD_EXP 50
19811: STR
19812: PUSH
19813: LD_STRING )
19815: STR
19816: PPUSH
19817: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19821: LD_STRING setGameDifficulty(
19823: PUSH
19824: LD_OWVAR 67
19828: STR
19829: PUSH
19830: LD_STRING )
19832: STR
19833: PPUSH
19834: CALL_OW 559
// end ;
19838: LD_VAR 0 1
19842: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19843: LD_INT 0
19845: PPUSH
// if p2 = stream_mode then
19846: LD_VAR 0 2
19850: PUSH
19851: LD_INT 100
19853: EQUAL
19854: IFFALSE 20857
// begin if not StreamModeActive then
19856: LD_EXP 51
19860: NOT
19861: IFFALSE 19871
// StreamModeActive := true ;
19863: LD_ADDR_EXP 51
19867: PUSH
19868: LD_INT 1
19870: ST_TO_ADDR
// if p3 = 0 then
19871: LD_VAR 0 3
19875: PUSH
19876: LD_INT 0
19878: EQUAL
19879: IFFALSE 19885
// InitStreamMode ;
19881: CALL 21061 0 0
// if p3 = 1 then
19885: LD_VAR 0 3
19889: PUSH
19890: LD_INT 1
19892: EQUAL
19893: IFFALSE 19903
// sRocket := true ;
19895: LD_ADDR_EXP 56
19899: PUSH
19900: LD_INT 1
19902: ST_TO_ADDR
// if p3 = 2 then
19903: LD_VAR 0 3
19907: PUSH
19908: LD_INT 2
19910: EQUAL
19911: IFFALSE 19921
// sSpeed := true ;
19913: LD_ADDR_EXP 55
19917: PUSH
19918: LD_INT 1
19920: ST_TO_ADDR
// if p3 = 3 then
19921: LD_VAR 0 3
19925: PUSH
19926: LD_INT 3
19928: EQUAL
19929: IFFALSE 19939
// sEngine := true ;
19931: LD_ADDR_EXP 57
19935: PUSH
19936: LD_INT 1
19938: ST_TO_ADDR
// if p3 = 4 then
19939: LD_VAR 0 3
19943: PUSH
19944: LD_INT 4
19946: EQUAL
19947: IFFALSE 19957
// sSpec := true ;
19949: LD_ADDR_EXP 54
19953: PUSH
19954: LD_INT 1
19956: ST_TO_ADDR
// if p3 = 5 then
19957: LD_VAR 0 3
19961: PUSH
19962: LD_INT 5
19964: EQUAL
19965: IFFALSE 19975
// sLevel := true ;
19967: LD_ADDR_EXP 58
19971: PUSH
19972: LD_INT 1
19974: ST_TO_ADDR
// if p3 = 6 then
19975: LD_VAR 0 3
19979: PUSH
19980: LD_INT 6
19982: EQUAL
19983: IFFALSE 19993
// sArmoury := true ;
19985: LD_ADDR_EXP 59
19989: PUSH
19990: LD_INT 1
19992: ST_TO_ADDR
// if p3 = 7 then
19993: LD_VAR 0 3
19997: PUSH
19998: LD_INT 7
20000: EQUAL
20001: IFFALSE 20011
// sRadar := true ;
20003: LD_ADDR_EXP 60
20007: PUSH
20008: LD_INT 1
20010: ST_TO_ADDR
// if p3 = 8 then
20011: LD_VAR 0 3
20015: PUSH
20016: LD_INT 8
20018: EQUAL
20019: IFFALSE 20029
// sBunker := true ;
20021: LD_ADDR_EXP 61
20025: PUSH
20026: LD_INT 1
20028: ST_TO_ADDR
// if p3 = 9 then
20029: LD_VAR 0 3
20033: PUSH
20034: LD_INT 9
20036: EQUAL
20037: IFFALSE 20047
// sHack := true ;
20039: LD_ADDR_EXP 62
20043: PUSH
20044: LD_INT 1
20046: ST_TO_ADDR
// if p3 = 10 then
20047: LD_VAR 0 3
20051: PUSH
20052: LD_INT 10
20054: EQUAL
20055: IFFALSE 20065
// sFire := true ;
20057: LD_ADDR_EXP 63
20061: PUSH
20062: LD_INT 1
20064: ST_TO_ADDR
// if p3 = 11 then
20065: LD_VAR 0 3
20069: PUSH
20070: LD_INT 11
20072: EQUAL
20073: IFFALSE 20083
// sRefresh := true ;
20075: LD_ADDR_EXP 64
20079: PUSH
20080: LD_INT 1
20082: ST_TO_ADDR
// if p3 = 12 then
20083: LD_VAR 0 3
20087: PUSH
20088: LD_INT 12
20090: EQUAL
20091: IFFALSE 20101
// sExp := true ;
20093: LD_ADDR_EXP 65
20097: PUSH
20098: LD_INT 1
20100: ST_TO_ADDR
// if p3 = 13 then
20101: LD_VAR 0 3
20105: PUSH
20106: LD_INT 13
20108: EQUAL
20109: IFFALSE 20119
// sDepot := true ;
20111: LD_ADDR_EXP 66
20115: PUSH
20116: LD_INT 1
20118: ST_TO_ADDR
// if p3 = 14 then
20119: LD_VAR 0 3
20123: PUSH
20124: LD_INT 14
20126: EQUAL
20127: IFFALSE 20137
// sFlag := true ;
20129: LD_ADDR_EXP 67
20133: PUSH
20134: LD_INT 1
20136: ST_TO_ADDR
// if p3 = 15 then
20137: LD_VAR 0 3
20141: PUSH
20142: LD_INT 15
20144: EQUAL
20145: IFFALSE 20155
// sKamikadze := true ;
20147: LD_ADDR_EXP 75
20151: PUSH
20152: LD_INT 1
20154: ST_TO_ADDR
// if p3 = 16 then
20155: LD_VAR 0 3
20159: PUSH
20160: LD_INT 16
20162: EQUAL
20163: IFFALSE 20173
// sTroll := true ;
20165: LD_ADDR_EXP 76
20169: PUSH
20170: LD_INT 1
20172: ST_TO_ADDR
// if p3 = 17 then
20173: LD_VAR 0 3
20177: PUSH
20178: LD_INT 17
20180: EQUAL
20181: IFFALSE 20191
// sSlow := true ;
20183: LD_ADDR_EXP 77
20187: PUSH
20188: LD_INT 1
20190: ST_TO_ADDR
// if p3 = 18 then
20191: LD_VAR 0 3
20195: PUSH
20196: LD_INT 18
20198: EQUAL
20199: IFFALSE 20209
// sLack := true ;
20201: LD_ADDR_EXP 78
20205: PUSH
20206: LD_INT 1
20208: ST_TO_ADDR
// if p3 = 19 then
20209: LD_VAR 0 3
20213: PUSH
20214: LD_INT 19
20216: EQUAL
20217: IFFALSE 20227
// sTank := true ;
20219: LD_ADDR_EXP 80
20223: PUSH
20224: LD_INT 1
20226: ST_TO_ADDR
// if p3 = 20 then
20227: LD_VAR 0 3
20231: PUSH
20232: LD_INT 20
20234: EQUAL
20235: IFFALSE 20245
// sRemote := true ;
20237: LD_ADDR_EXP 81
20241: PUSH
20242: LD_INT 1
20244: ST_TO_ADDR
// if p3 = 21 then
20245: LD_VAR 0 3
20249: PUSH
20250: LD_INT 21
20252: EQUAL
20253: IFFALSE 20263
// sPowell := true ;
20255: LD_ADDR_EXP 82
20259: PUSH
20260: LD_INT 1
20262: ST_TO_ADDR
// if p3 = 22 then
20263: LD_VAR 0 3
20267: PUSH
20268: LD_INT 22
20270: EQUAL
20271: IFFALSE 20281
// sTeleport := true ;
20273: LD_ADDR_EXP 85
20277: PUSH
20278: LD_INT 1
20280: ST_TO_ADDR
// if p3 = 23 then
20281: LD_VAR 0 3
20285: PUSH
20286: LD_INT 23
20288: EQUAL
20289: IFFALSE 20299
// sOilTower := true ;
20291: LD_ADDR_EXP 87
20295: PUSH
20296: LD_INT 1
20298: ST_TO_ADDR
// if p3 = 24 then
20299: LD_VAR 0 3
20303: PUSH
20304: LD_INT 24
20306: EQUAL
20307: IFFALSE 20317
// sShovel := true ;
20309: LD_ADDR_EXP 88
20313: PUSH
20314: LD_INT 1
20316: ST_TO_ADDR
// if p3 = 25 then
20317: LD_VAR 0 3
20321: PUSH
20322: LD_INT 25
20324: EQUAL
20325: IFFALSE 20335
// sSheik := true ;
20327: LD_ADDR_EXP 89
20331: PUSH
20332: LD_INT 1
20334: ST_TO_ADDR
// if p3 = 26 then
20335: LD_VAR 0 3
20339: PUSH
20340: LD_INT 26
20342: EQUAL
20343: IFFALSE 20353
// sEarthquake := true ;
20345: LD_ADDR_EXP 91
20349: PUSH
20350: LD_INT 1
20352: ST_TO_ADDR
// if p3 = 27 then
20353: LD_VAR 0 3
20357: PUSH
20358: LD_INT 27
20360: EQUAL
20361: IFFALSE 20371
// sAI := true ;
20363: LD_ADDR_EXP 92
20367: PUSH
20368: LD_INT 1
20370: ST_TO_ADDR
// if p3 = 28 then
20371: LD_VAR 0 3
20375: PUSH
20376: LD_INT 28
20378: EQUAL
20379: IFFALSE 20389
// sCargo := true ;
20381: LD_ADDR_EXP 95
20385: PUSH
20386: LD_INT 1
20388: ST_TO_ADDR
// if p3 = 29 then
20389: LD_VAR 0 3
20393: PUSH
20394: LD_INT 29
20396: EQUAL
20397: IFFALSE 20407
// sDLaser := true ;
20399: LD_ADDR_EXP 96
20403: PUSH
20404: LD_INT 1
20406: ST_TO_ADDR
// if p3 = 30 then
20407: LD_VAR 0 3
20411: PUSH
20412: LD_INT 30
20414: EQUAL
20415: IFFALSE 20425
// sExchange := true ;
20417: LD_ADDR_EXP 97
20421: PUSH
20422: LD_INT 1
20424: ST_TO_ADDR
// if p3 = 31 then
20425: LD_VAR 0 3
20429: PUSH
20430: LD_INT 31
20432: EQUAL
20433: IFFALSE 20443
// sFac := true ;
20435: LD_ADDR_EXP 98
20439: PUSH
20440: LD_INT 1
20442: ST_TO_ADDR
// if p3 = 32 then
20443: LD_VAR 0 3
20447: PUSH
20448: LD_INT 32
20450: EQUAL
20451: IFFALSE 20461
// sPower := true ;
20453: LD_ADDR_EXP 99
20457: PUSH
20458: LD_INT 1
20460: ST_TO_ADDR
// if p3 = 33 then
20461: LD_VAR 0 3
20465: PUSH
20466: LD_INT 33
20468: EQUAL
20469: IFFALSE 20479
// sRandom := true ;
20471: LD_ADDR_EXP 100
20475: PUSH
20476: LD_INT 1
20478: ST_TO_ADDR
// if p3 = 34 then
20479: LD_VAR 0 3
20483: PUSH
20484: LD_INT 34
20486: EQUAL
20487: IFFALSE 20497
// sShield := true ;
20489: LD_ADDR_EXP 101
20493: PUSH
20494: LD_INT 1
20496: ST_TO_ADDR
// if p3 = 35 then
20497: LD_VAR 0 3
20501: PUSH
20502: LD_INT 35
20504: EQUAL
20505: IFFALSE 20515
// sTime := true ;
20507: LD_ADDR_EXP 102
20511: PUSH
20512: LD_INT 1
20514: ST_TO_ADDR
// if p3 = 36 then
20515: LD_VAR 0 3
20519: PUSH
20520: LD_INT 36
20522: EQUAL
20523: IFFALSE 20533
// sTools := true ;
20525: LD_ADDR_EXP 103
20529: PUSH
20530: LD_INT 1
20532: ST_TO_ADDR
// if p3 = 101 then
20533: LD_VAR 0 3
20537: PUSH
20538: LD_INT 101
20540: EQUAL
20541: IFFALSE 20551
// sSold := true ;
20543: LD_ADDR_EXP 68
20547: PUSH
20548: LD_INT 1
20550: ST_TO_ADDR
// if p3 = 102 then
20551: LD_VAR 0 3
20555: PUSH
20556: LD_INT 102
20558: EQUAL
20559: IFFALSE 20569
// sDiff := true ;
20561: LD_ADDR_EXP 69
20565: PUSH
20566: LD_INT 1
20568: ST_TO_ADDR
// if p3 = 103 then
20569: LD_VAR 0 3
20573: PUSH
20574: LD_INT 103
20576: EQUAL
20577: IFFALSE 20587
// sFog := true ;
20579: LD_ADDR_EXP 72
20583: PUSH
20584: LD_INT 1
20586: ST_TO_ADDR
// if p3 = 104 then
20587: LD_VAR 0 3
20591: PUSH
20592: LD_INT 104
20594: EQUAL
20595: IFFALSE 20605
// sReset := true ;
20597: LD_ADDR_EXP 73
20601: PUSH
20602: LD_INT 1
20604: ST_TO_ADDR
// if p3 = 105 then
20605: LD_VAR 0 3
20609: PUSH
20610: LD_INT 105
20612: EQUAL
20613: IFFALSE 20623
// sSun := true ;
20615: LD_ADDR_EXP 74
20619: PUSH
20620: LD_INT 1
20622: ST_TO_ADDR
// if p3 = 106 then
20623: LD_VAR 0 3
20627: PUSH
20628: LD_INT 106
20630: EQUAL
20631: IFFALSE 20641
// sTiger := true ;
20633: LD_ADDR_EXP 70
20637: PUSH
20638: LD_INT 1
20640: ST_TO_ADDR
// if p3 = 107 then
20641: LD_VAR 0 3
20645: PUSH
20646: LD_INT 107
20648: EQUAL
20649: IFFALSE 20659
// sBomb := true ;
20651: LD_ADDR_EXP 71
20655: PUSH
20656: LD_INT 1
20658: ST_TO_ADDR
// if p3 = 108 then
20659: LD_VAR 0 3
20663: PUSH
20664: LD_INT 108
20666: EQUAL
20667: IFFALSE 20677
// sWound := true ;
20669: LD_ADDR_EXP 79
20673: PUSH
20674: LD_INT 1
20676: ST_TO_ADDR
// if p3 = 109 then
20677: LD_VAR 0 3
20681: PUSH
20682: LD_INT 109
20684: EQUAL
20685: IFFALSE 20695
// sBetray := true ;
20687: LD_ADDR_EXP 83
20691: PUSH
20692: LD_INT 1
20694: ST_TO_ADDR
// if p3 = 110 then
20695: LD_VAR 0 3
20699: PUSH
20700: LD_INT 110
20702: EQUAL
20703: IFFALSE 20713
// sContamin := true ;
20705: LD_ADDR_EXP 84
20709: PUSH
20710: LD_INT 1
20712: ST_TO_ADDR
// if p3 = 111 then
20713: LD_VAR 0 3
20717: PUSH
20718: LD_INT 111
20720: EQUAL
20721: IFFALSE 20731
// sOil := true ;
20723: LD_ADDR_EXP 86
20727: PUSH
20728: LD_INT 1
20730: ST_TO_ADDR
// if p3 = 112 then
20731: LD_VAR 0 3
20735: PUSH
20736: LD_INT 112
20738: EQUAL
20739: IFFALSE 20749
// sStu := true ;
20741: LD_ADDR_EXP 90
20745: PUSH
20746: LD_INT 1
20748: ST_TO_ADDR
// if p3 = 113 then
20749: LD_VAR 0 3
20753: PUSH
20754: LD_INT 113
20756: EQUAL
20757: IFFALSE 20767
// sBazooka := true ;
20759: LD_ADDR_EXP 93
20763: PUSH
20764: LD_INT 1
20766: ST_TO_ADDR
// if p3 = 114 then
20767: LD_VAR 0 3
20771: PUSH
20772: LD_INT 114
20774: EQUAL
20775: IFFALSE 20785
// sMortar := true ;
20777: LD_ADDR_EXP 94
20781: PUSH
20782: LD_INT 1
20784: ST_TO_ADDR
// if p3 = 115 then
20785: LD_VAR 0 3
20789: PUSH
20790: LD_INT 115
20792: EQUAL
20793: IFFALSE 20803
// sRanger := true ;
20795: LD_ADDR_EXP 104
20799: PUSH
20800: LD_INT 1
20802: ST_TO_ADDR
// if p3 = 116 then
20803: LD_VAR 0 3
20807: PUSH
20808: LD_INT 116
20810: EQUAL
20811: IFFALSE 20821
// sComputer := true ;
20813: LD_ADDR_EXP 105
20817: PUSH
20818: LD_INT 1
20820: ST_TO_ADDR
// if p3 = 117 then
20821: LD_VAR 0 3
20825: PUSH
20826: LD_INT 117
20828: EQUAL
20829: IFFALSE 20839
// s30 := true ;
20831: LD_ADDR_EXP 106
20835: PUSH
20836: LD_INT 1
20838: ST_TO_ADDR
// if p3 = 118 then
20839: LD_VAR 0 3
20843: PUSH
20844: LD_INT 118
20846: EQUAL
20847: IFFALSE 20857
// s60 := true ;
20849: LD_ADDR_EXP 107
20853: PUSH
20854: LD_INT 1
20856: ST_TO_ADDR
// end ; if p2 = hack_mode then
20857: LD_VAR 0 2
20861: PUSH
20862: LD_INT 101
20864: EQUAL
20865: IFFALSE 20993
// begin case p3 of 1 :
20867: LD_VAR 0 3
20871: PUSH
20872: LD_INT 1
20874: DOUBLE
20875: EQUAL
20876: IFTRUE 20880
20878: GO 20887
20880: POP
// hHackUnlimitedResources ; 2 :
20881: CALL 33132 0 0
20885: GO 20993
20887: LD_INT 2
20889: DOUBLE
20890: EQUAL
20891: IFTRUE 20895
20893: GO 20902
20895: POP
// hHackSetLevel10 ; 3 :
20896: CALL 33265 0 0
20900: GO 20993
20902: LD_INT 3
20904: DOUBLE
20905: EQUAL
20906: IFTRUE 20910
20908: GO 20917
20910: POP
// hHackSetLevel10YourUnits ; 4 :
20911: CALL 33350 0 0
20915: GO 20993
20917: LD_INT 4
20919: DOUBLE
20920: EQUAL
20921: IFTRUE 20925
20923: GO 20932
20925: POP
// hHackInvincible ; 5 :
20926: CALL 33798 0 0
20930: GO 20993
20932: LD_INT 5
20934: DOUBLE
20935: EQUAL
20936: IFTRUE 20940
20938: GO 20947
20940: POP
// hHackInvisible ; 6 :
20941: CALL 33909 0 0
20945: GO 20993
20947: LD_INT 6
20949: DOUBLE
20950: EQUAL
20951: IFTRUE 20955
20953: GO 20962
20955: POP
// hHackChangeYourSide ; 7 :
20956: CALL 33966 0 0
20960: GO 20993
20962: LD_INT 7
20964: DOUBLE
20965: EQUAL
20966: IFTRUE 20970
20968: GO 20977
20970: POP
// hHackChangeUnitSide ; 8 :
20971: CALL 34008 0 0
20975: GO 20993
20977: LD_INT 8
20979: DOUBLE
20980: EQUAL
20981: IFTRUE 20985
20983: GO 20992
20985: POP
// hHackFog ; end ;
20986: CALL 34109 0 0
20990: GO 20993
20992: POP
// end ; if p2 = game_save_mode then
20993: LD_VAR 0 2
20997: PUSH
20998: LD_INT 102
21000: EQUAL
21001: IFFALSE 21056
// begin if p3 = 1 then
21003: LD_VAR 0 3
21007: PUSH
21008: LD_INT 1
21010: EQUAL
21011: IFFALSE 21023
// globalGameSaveCounter := p4 ;
21013: LD_ADDR_EXP 50
21017: PUSH
21018: LD_VAR 0 4
21022: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21023: LD_VAR 0 3
21027: PUSH
21028: LD_INT 2
21030: EQUAL
21031: PUSH
21032: LD_EXP 50
21036: AND
21037: IFFALSE 21056
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21039: LD_STRING setGameSaveCounter(
21041: PUSH
21042: LD_EXP 50
21046: STR
21047: PUSH
21048: LD_STRING )
21050: STR
21051: PPUSH
21052: CALL_OW 559
// end ; end ;
21056: LD_VAR 0 7
21060: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21061: LD_INT 0
21063: PPUSH
// streamModeActive := false ;
21064: LD_ADDR_EXP 51
21068: PUSH
21069: LD_INT 0
21071: ST_TO_ADDR
// normalCounter := 36 ;
21072: LD_ADDR_EXP 52
21076: PUSH
21077: LD_INT 36
21079: ST_TO_ADDR
// hardcoreCounter := 18 ;
21080: LD_ADDR_EXP 53
21084: PUSH
21085: LD_INT 18
21087: ST_TO_ADDR
// sRocket := false ;
21088: LD_ADDR_EXP 56
21092: PUSH
21093: LD_INT 0
21095: ST_TO_ADDR
// sSpeed := false ;
21096: LD_ADDR_EXP 55
21100: PUSH
21101: LD_INT 0
21103: ST_TO_ADDR
// sEngine := false ;
21104: LD_ADDR_EXP 57
21108: PUSH
21109: LD_INT 0
21111: ST_TO_ADDR
// sSpec := false ;
21112: LD_ADDR_EXP 54
21116: PUSH
21117: LD_INT 0
21119: ST_TO_ADDR
// sLevel := false ;
21120: LD_ADDR_EXP 58
21124: PUSH
21125: LD_INT 0
21127: ST_TO_ADDR
// sArmoury := false ;
21128: LD_ADDR_EXP 59
21132: PUSH
21133: LD_INT 0
21135: ST_TO_ADDR
// sRadar := false ;
21136: LD_ADDR_EXP 60
21140: PUSH
21141: LD_INT 0
21143: ST_TO_ADDR
// sBunker := false ;
21144: LD_ADDR_EXP 61
21148: PUSH
21149: LD_INT 0
21151: ST_TO_ADDR
// sHack := false ;
21152: LD_ADDR_EXP 62
21156: PUSH
21157: LD_INT 0
21159: ST_TO_ADDR
// sFire := false ;
21160: LD_ADDR_EXP 63
21164: PUSH
21165: LD_INT 0
21167: ST_TO_ADDR
// sRefresh := false ;
21168: LD_ADDR_EXP 64
21172: PUSH
21173: LD_INT 0
21175: ST_TO_ADDR
// sExp := false ;
21176: LD_ADDR_EXP 65
21180: PUSH
21181: LD_INT 0
21183: ST_TO_ADDR
// sDepot := false ;
21184: LD_ADDR_EXP 66
21188: PUSH
21189: LD_INT 0
21191: ST_TO_ADDR
// sFlag := false ;
21192: LD_ADDR_EXP 67
21196: PUSH
21197: LD_INT 0
21199: ST_TO_ADDR
// sKamikadze := false ;
21200: LD_ADDR_EXP 75
21204: PUSH
21205: LD_INT 0
21207: ST_TO_ADDR
// sTroll := false ;
21208: LD_ADDR_EXP 76
21212: PUSH
21213: LD_INT 0
21215: ST_TO_ADDR
// sSlow := false ;
21216: LD_ADDR_EXP 77
21220: PUSH
21221: LD_INT 0
21223: ST_TO_ADDR
// sLack := false ;
21224: LD_ADDR_EXP 78
21228: PUSH
21229: LD_INT 0
21231: ST_TO_ADDR
// sTank := false ;
21232: LD_ADDR_EXP 80
21236: PUSH
21237: LD_INT 0
21239: ST_TO_ADDR
// sRemote := false ;
21240: LD_ADDR_EXP 81
21244: PUSH
21245: LD_INT 0
21247: ST_TO_ADDR
// sPowell := false ;
21248: LD_ADDR_EXP 82
21252: PUSH
21253: LD_INT 0
21255: ST_TO_ADDR
// sTeleport := false ;
21256: LD_ADDR_EXP 85
21260: PUSH
21261: LD_INT 0
21263: ST_TO_ADDR
// sOilTower := false ;
21264: LD_ADDR_EXP 87
21268: PUSH
21269: LD_INT 0
21271: ST_TO_ADDR
// sShovel := false ;
21272: LD_ADDR_EXP 88
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// sSheik := false ;
21280: LD_ADDR_EXP 89
21284: PUSH
21285: LD_INT 0
21287: ST_TO_ADDR
// sEarthquake := false ;
21288: LD_ADDR_EXP 91
21292: PUSH
21293: LD_INT 0
21295: ST_TO_ADDR
// sAI := false ;
21296: LD_ADDR_EXP 92
21300: PUSH
21301: LD_INT 0
21303: ST_TO_ADDR
// sCargo := false ;
21304: LD_ADDR_EXP 95
21308: PUSH
21309: LD_INT 0
21311: ST_TO_ADDR
// sDLaser := false ;
21312: LD_ADDR_EXP 96
21316: PUSH
21317: LD_INT 0
21319: ST_TO_ADDR
// sExchange := false ;
21320: LD_ADDR_EXP 97
21324: PUSH
21325: LD_INT 0
21327: ST_TO_ADDR
// sFac := false ;
21328: LD_ADDR_EXP 98
21332: PUSH
21333: LD_INT 0
21335: ST_TO_ADDR
// sPower := false ;
21336: LD_ADDR_EXP 99
21340: PUSH
21341: LD_INT 0
21343: ST_TO_ADDR
// sRandom := false ;
21344: LD_ADDR_EXP 100
21348: PUSH
21349: LD_INT 0
21351: ST_TO_ADDR
// sShield := false ;
21352: LD_ADDR_EXP 101
21356: PUSH
21357: LD_INT 0
21359: ST_TO_ADDR
// sTime := false ;
21360: LD_ADDR_EXP 102
21364: PUSH
21365: LD_INT 0
21367: ST_TO_ADDR
// sTools := false ;
21368: LD_ADDR_EXP 103
21372: PUSH
21373: LD_INT 0
21375: ST_TO_ADDR
// sSold := false ;
21376: LD_ADDR_EXP 68
21380: PUSH
21381: LD_INT 0
21383: ST_TO_ADDR
// sDiff := false ;
21384: LD_ADDR_EXP 69
21388: PUSH
21389: LD_INT 0
21391: ST_TO_ADDR
// sFog := false ;
21392: LD_ADDR_EXP 72
21396: PUSH
21397: LD_INT 0
21399: ST_TO_ADDR
// sReset := false ;
21400: LD_ADDR_EXP 73
21404: PUSH
21405: LD_INT 0
21407: ST_TO_ADDR
// sSun := false ;
21408: LD_ADDR_EXP 74
21412: PUSH
21413: LD_INT 0
21415: ST_TO_ADDR
// sTiger := false ;
21416: LD_ADDR_EXP 70
21420: PUSH
21421: LD_INT 0
21423: ST_TO_ADDR
// sBomb := false ;
21424: LD_ADDR_EXP 71
21428: PUSH
21429: LD_INT 0
21431: ST_TO_ADDR
// sWound := false ;
21432: LD_ADDR_EXP 79
21436: PUSH
21437: LD_INT 0
21439: ST_TO_ADDR
// sBetray := false ;
21440: LD_ADDR_EXP 83
21444: PUSH
21445: LD_INT 0
21447: ST_TO_ADDR
// sContamin := false ;
21448: LD_ADDR_EXP 84
21452: PUSH
21453: LD_INT 0
21455: ST_TO_ADDR
// sOil := false ;
21456: LD_ADDR_EXP 86
21460: PUSH
21461: LD_INT 0
21463: ST_TO_ADDR
// sStu := false ;
21464: LD_ADDR_EXP 90
21468: PUSH
21469: LD_INT 0
21471: ST_TO_ADDR
// sBazooka := false ;
21472: LD_ADDR_EXP 93
21476: PUSH
21477: LD_INT 0
21479: ST_TO_ADDR
// sMortar := false ;
21480: LD_ADDR_EXP 94
21484: PUSH
21485: LD_INT 0
21487: ST_TO_ADDR
// sRanger := false ;
21488: LD_ADDR_EXP 104
21492: PUSH
21493: LD_INT 0
21495: ST_TO_ADDR
// sComputer := false ;
21496: LD_ADDR_EXP 105
21500: PUSH
21501: LD_INT 0
21503: ST_TO_ADDR
// s30 := false ;
21504: LD_ADDR_EXP 106
21508: PUSH
21509: LD_INT 0
21511: ST_TO_ADDR
// s60 := false ;
21512: LD_ADDR_EXP 107
21516: PUSH
21517: LD_INT 0
21519: ST_TO_ADDR
// end ;
21520: LD_VAR 0 1
21524: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21525: LD_INT 0
21527: PPUSH
21528: PPUSH
21529: PPUSH
21530: PPUSH
21531: PPUSH
21532: PPUSH
21533: PPUSH
// result := [ ] ;
21534: LD_ADDR_VAR 0 2
21538: PUSH
21539: EMPTY
21540: ST_TO_ADDR
// if campaign_id = 1 then
21541: LD_OWVAR 69
21545: PUSH
21546: LD_INT 1
21548: EQUAL
21549: IFFALSE 24715
// begin case mission_number of 1 :
21551: LD_OWVAR 70
21555: PUSH
21556: LD_INT 1
21558: DOUBLE
21559: EQUAL
21560: IFTRUE 21564
21562: GO 21640
21564: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21565: LD_ADDR_VAR 0 2
21569: PUSH
21570: LD_INT 2
21572: PUSH
21573: LD_INT 4
21575: PUSH
21576: LD_INT 11
21578: PUSH
21579: LD_INT 12
21581: PUSH
21582: LD_INT 15
21584: PUSH
21585: LD_INT 16
21587: PUSH
21588: LD_INT 22
21590: PUSH
21591: LD_INT 23
21593: PUSH
21594: LD_INT 26
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 101
21610: PUSH
21611: LD_INT 102
21613: PUSH
21614: LD_INT 106
21616: PUSH
21617: LD_INT 116
21619: PUSH
21620: LD_INT 117
21622: PUSH
21623: LD_INT 118
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: ST_TO_ADDR
21638: GO 24713
21640: LD_INT 2
21642: DOUBLE
21643: EQUAL
21644: IFTRUE 21648
21646: GO 21732
21648: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21649: LD_ADDR_VAR 0 2
21653: PUSH
21654: LD_INT 2
21656: PUSH
21657: LD_INT 4
21659: PUSH
21660: LD_INT 11
21662: PUSH
21663: LD_INT 12
21665: PUSH
21666: LD_INT 15
21668: PUSH
21669: LD_INT 16
21671: PUSH
21672: LD_INT 22
21674: PUSH
21675: LD_INT 23
21677: PUSH
21678: LD_INT 26
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 101
21694: PUSH
21695: LD_INT 102
21697: PUSH
21698: LD_INT 105
21700: PUSH
21701: LD_INT 106
21703: PUSH
21704: LD_INT 108
21706: PUSH
21707: LD_INT 116
21709: PUSH
21710: LD_INT 117
21712: PUSH
21713: LD_INT 118
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: ST_TO_ADDR
21730: GO 24713
21732: LD_INT 3
21734: DOUBLE
21735: EQUAL
21736: IFTRUE 21740
21738: GO 21828
21740: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21741: LD_ADDR_VAR 0 2
21745: PUSH
21746: LD_INT 2
21748: PUSH
21749: LD_INT 4
21751: PUSH
21752: LD_INT 5
21754: PUSH
21755: LD_INT 11
21757: PUSH
21758: LD_INT 12
21760: PUSH
21761: LD_INT 15
21763: PUSH
21764: LD_INT 16
21766: PUSH
21767: LD_INT 22
21769: PUSH
21770: LD_INT 26
21772: PUSH
21773: LD_INT 36
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 101
21790: PUSH
21791: LD_INT 102
21793: PUSH
21794: LD_INT 105
21796: PUSH
21797: LD_INT 106
21799: PUSH
21800: LD_INT 108
21802: PUSH
21803: LD_INT 116
21805: PUSH
21806: LD_INT 117
21808: PUSH
21809: LD_INT 118
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: ST_TO_ADDR
21826: GO 24713
21828: LD_INT 4
21830: DOUBLE
21831: EQUAL
21832: IFTRUE 21836
21834: GO 21932
21836: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21837: LD_ADDR_VAR 0 2
21841: PUSH
21842: LD_INT 2
21844: PUSH
21845: LD_INT 4
21847: PUSH
21848: LD_INT 5
21850: PUSH
21851: LD_INT 8
21853: PUSH
21854: LD_INT 11
21856: PUSH
21857: LD_INT 12
21859: PUSH
21860: LD_INT 15
21862: PUSH
21863: LD_INT 16
21865: PUSH
21866: LD_INT 22
21868: PUSH
21869: LD_INT 23
21871: PUSH
21872: LD_INT 26
21874: PUSH
21875: LD_INT 36
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 101
21894: PUSH
21895: LD_INT 102
21897: PUSH
21898: LD_INT 105
21900: PUSH
21901: LD_INT 106
21903: PUSH
21904: LD_INT 108
21906: PUSH
21907: LD_INT 116
21909: PUSH
21910: LD_INT 117
21912: PUSH
21913: LD_INT 118
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: ST_TO_ADDR
21930: GO 24713
21932: LD_INT 5
21934: DOUBLE
21935: EQUAL
21936: IFTRUE 21940
21938: GO 22052
21940: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21941: LD_ADDR_VAR 0 2
21945: PUSH
21946: LD_INT 2
21948: PUSH
21949: LD_INT 4
21951: PUSH
21952: LD_INT 5
21954: PUSH
21955: LD_INT 6
21957: PUSH
21958: LD_INT 8
21960: PUSH
21961: LD_INT 11
21963: PUSH
21964: LD_INT 12
21966: PUSH
21967: LD_INT 15
21969: PUSH
21970: LD_INT 16
21972: PUSH
21973: LD_INT 22
21975: PUSH
21976: LD_INT 23
21978: PUSH
21979: LD_INT 25
21981: PUSH
21982: LD_INT 26
21984: PUSH
21985: LD_INT 36
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 101
22006: PUSH
22007: LD_INT 102
22009: PUSH
22010: LD_INT 105
22012: PUSH
22013: LD_INT 106
22015: PUSH
22016: LD_INT 108
22018: PUSH
22019: LD_INT 109
22021: PUSH
22022: LD_INT 112
22024: PUSH
22025: LD_INT 116
22027: PUSH
22028: LD_INT 117
22030: PUSH
22031: LD_INT 118
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: ST_TO_ADDR
22050: GO 24713
22052: LD_INT 6
22054: DOUBLE
22055: EQUAL
22056: IFTRUE 22060
22058: GO 22192
22060: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22061: LD_ADDR_VAR 0 2
22065: PUSH
22066: LD_INT 2
22068: PUSH
22069: LD_INT 4
22071: PUSH
22072: LD_INT 5
22074: PUSH
22075: LD_INT 6
22077: PUSH
22078: LD_INT 8
22080: PUSH
22081: LD_INT 11
22083: PUSH
22084: LD_INT 12
22086: PUSH
22087: LD_INT 15
22089: PUSH
22090: LD_INT 16
22092: PUSH
22093: LD_INT 20
22095: PUSH
22096: LD_INT 21
22098: PUSH
22099: LD_INT 22
22101: PUSH
22102: LD_INT 23
22104: PUSH
22105: LD_INT 25
22107: PUSH
22108: LD_INT 26
22110: PUSH
22111: LD_INT 30
22113: PUSH
22114: LD_INT 31
22116: PUSH
22117: LD_INT 32
22119: PUSH
22120: LD_INT 36
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 101
22146: PUSH
22147: LD_INT 102
22149: PUSH
22150: LD_INT 105
22152: PUSH
22153: LD_INT 106
22155: PUSH
22156: LD_INT 108
22158: PUSH
22159: LD_INT 109
22161: PUSH
22162: LD_INT 112
22164: PUSH
22165: LD_INT 116
22167: PUSH
22168: LD_INT 117
22170: PUSH
22171: LD_INT 118
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: ST_TO_ADDR
22190: GO 24713
22192: LD_INT 7
22194: DOUBLE
22195: EQUAL
22196: IFTRUE 22200
22198: GO 22312
22200: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22201: LD_ADDR_VAR 0 2
22205: PUSH
22206: LD_INT 2
22208: PUSH
22209: LD_INT 4
22211: PUSH
22212: LD_INT 5
22214: PUSH
22215: LD_INT 7
22217: PUSH
22218: LD_INT 11
22220: PUSH
22221: LD_INT 12
22223: PUSH
22224: LD_INT 15
22226: PUSH
22227: LD_INT 16
22229: PUSH
22230: LD_INT 20
22232: PUSH
22233: LD_INT 21
22235: PUSH
22236: LD_INT 22
22238: PUSH
22239: LD_INT 23
22241: PUSH
22242: LD_INT 25
22244: PUSH
22245: LD_INT 26
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 101
22266: PUSH
22267: LD_INT 102
22269: PUSH
22270: LD_INT 103
22272: PUSH
22273: LD_INT 105
22275: PUSH
22276: LD_INT 106
22278: PUSH
22279: LD_INT 108
22281: PUSH
22282: LD_INT 112
22284: PUSH
22285: LD_INT 116
22287: PUSH
22288: LD_INT 117
22290: PUSH
22291: LD_INT 118
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: ST_TO_ADDR
22310: GO 24713
22312: LD_INT 8
22314: DOUBLE
22315: EQUAL
22316: IFTRUE 22320
22318: GO 22460
22320: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22321: LD_ADDR_VAR 0 2
22325: PUSH
22326: LD_INT 2
22328: PUSH
22329: LD_INT 4
22331: PUSH
22332: LD_INT 5
22334: PUSH
22335: LD_INT 6
22337: PUSH
22338: LD_INT 7
22340: PUSH
22341: LD_INT 8
22343: PUSH
22344: LD_INT 11
22346: PUSH
22347: LD_INT 12
22349: PUSH
22350: LD_INT 15
22352: PUSH
22353: LD_INT 16
22355: PUSH
22356: LD_INT 20
22358: PUSH
22359: LD_INT 21
22361: PUSH
22362: LD_INT 22
22364: PUSH
22365: LD_INT 23
22367: PUSH
22368: LD_INT 25
22370: PUSH
22371: LD_INT 26
22373: PUSH
22374: LD_INT 30
22376: PUSH
22377: LD_INT 31
22379: PUSH
22380: LD_INT 32
22382: PUSH
22383: LD_INT 36
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 101
22410: PUSH
22411: LD_INT 102
22413: PUSH
22414: LD_INT 103
22416: PUSH
22417: LD_INT 105
22419: PUSH
22420: LD_INT 106
22422: PUSH
22423: LD_INT 108
22425: PUSH
22426: LD_INT 109
22428: PUSH
22429: LD_INT 112
22431: PUSH
22432: LD_INT 116
22434: PUSH
22435: LD_INT 117
22437: PUSH
22438: LD_INT 118
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: ST_TO_ADDR
22458: GO 24713
22460: LD_INT 9
22462: DOUBLE
22463: EQUAL
22464: IFTRUE 22468
22466: GO 22616
22468: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22469: LD_ADDR_VAR 0 2
22473: PUSH
22474: LD_INT 2
22476: PUSH
22477: LD_INT 4
22479: PUSH
22480: LD_INT 5
22482: PUSH
22483: LD_INT 6
22485: PUSH
22486: LD_INT 7
22488: PUSH
22489: LD_INT 8
22491: PUSH
22492: LD_INT 11
22494: PUSH
22495: LD_INT 12
22497: PUSH
22498: LD_INT 15
22500: PUSH
22501: LD_INT 16
22503: PUSH
22504: LD_INT 20
22506: PUSH
22507: LD_INT 21
22509: PUSH
22510: LD_INT 22
22512: PUSH
22513: LD_INT 23
22515: PUSH
22516: LD_INT 25
22518: PUSH
22519: LD_INT 26
22521: PUSH
22522: LD_INT 28
22524: PUSH
22525: LD_INT 30
22527: PUSH
22528: LD_INT 31
22530: PUSH
22531: LD_INT 32
22533: PUSH
22534: LD_INT 36
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 101
22562: PUSH
22563: LD_INT 102
22565: PUSH
22566: LD_INT 103
22568: PUSH
22569: LD_INT 105
22571: PUSH
22572: LD_INT 106
22574: PUSH
22575: LD_INT 108
22577: PUSH
22578: LD_INT 109
22580: PUSH
22581: LD_INT 112
22583: PUSH
22584: LD_INT 114
22586: PUSH
22587: LD_INT 116
22589: PUSH
22590: LD_INT 117
22592: PUSH
22593: LD_INT 118
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: ST_TO_ADDR
22614: GO 24713
22616: LD_INT 10
22618: DOUBLE
22619: EQUAL
22620: IFTRUE 22624
22622: GO 22820
22624: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22625: LD_ADDR_VAR 0 2
22629: PUSH
22630: LD_INT 2
22632: PUSH
22633: LD_INT 4
22635: PUSH
22636: LD_INT 5
22638: PUSH
22639: LD_INT 6
22641: PUSH
22642: LD_INT 7
22644: PUSH
22645: LD_INT 8
22647: PUSH
22648: LD_INT 9
22650: PUSH
22651: LD_INT 10
22653: PUSH
22654: LD_INT 11
22656: PUSH
22657: LD_INT 12
22659: PUSH
22660: LD_INT 13
22662: PUSH
22663: LD_INT 14
22665: PUSH
22666: LD_INT 15
22668: PUSH
22669: LD_INT 16
22671: PUSH
22672: LD_INT 17
22674: PUSH
22675: LD_INT 18
22677: PUSH
22678: LD_INT 19
22680: PUSH
22681: LD_INT 20
22683: PUSH
22684: LD_INT 21
22686: PUSH
22687: LD_INT 22
22689: PUSH
22690: LD_INT 23
22692: PUSH
22693: LD_INT 24
22695: PUSH
22696: LD_INT 25
22698: PUSH
22699: LD_INT 26
22701: PUSH
22702: LD_INT 28
22704: PUSH
22705: LD_INT 30
22707: PUSH
22708: LD_INT 31
22710: PUSH
22711: LD_INT 32
22713: PUSH
22714: LD_INT 36
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 101
22750: PUSH
22751: LD_INT 102
22753: PUSH
22754: LD_INT 103
22756: PUSH
22757: LD_INT 104
22759: PUSH
22760: LD_INT 105
22762: PUSH
22763: LD_INT 106
22765: PUSH
22766: LD_INT 107
22768: PUSH
22769: LD_INT 108
22771: PUSH
22772: LD_INT 109
22774: PUSH
22775: LD_INT 110
22777: PUSH
22778: LD_INT 111
22780: PUSH
22781: LD_INT 112
22783: PUSH
22784: LD_INT 114
22786: PUSH
22787: LD_INT 116
22789: PUSH
22790: LD_INT 117
22792: PUSH
22793: LD_INT 118
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: ST_TO_ADDR
22818: GO 24713
22820: LD_INT 11
22822: DOUBLE
22823: EQUAL
22824: IFTRUE 22828
22826: GO 23032
22828: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22829: LD_ADDR_VAR 0 2
22833: PUSH
22834: LD_INT 2
22836: PUSH
22837: LD_INT 3
22839: PUSH
22840: LD_INT 4
22842: PUSH
22843: LD_INT 5
22845: PUSH
22846: LD_INT 6
22848: PUSH
22849: LD_INT 7
22851: PUSH
22852: LD_INT 8
22854: PUSH
22855: LD_INT 9
22857: PUSH
22858: LD_INT 10
22860: PUSH
22861: LD_INT 11
22863: PUSH
22864: LD_INT 12
22866: PUSH
22867: LD_INT 13
22869: PUSH
22870: LD_INT 14
22872: PUSH
22873: LD_INT 15
22875: PUSH
22876: LD_INT 16
22878: PUSH
22879: LD_INT 17
22881: PUSH
22882: LD_INT 18
22884: PUSH
22885: LD_INT 19
22887: PUSH
22888: LD_INT 20
22890: PUSH
22891: LD_INT 21
22893: PUSH
22894: LD_INT 22
22896: PUSH
22897: LD_INT 23
22899: PUSH
22900: LD_INT 24
22902: PUSH
22903: LD_INT 25
22905: PUSH
22906: LD_INT 26
22908: PUSH
22909: LD_INT 28
22911: PUSH
22912: LD_INT 30
22914: PUSH
22915: LD_INT 31
22917: PUSH
22918: LD_INT 32
22920: PUSH
22921: LD_INT 34
22923: PUSH
22924: LD_INT 36
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 101
22962: PUSH
22963: LD_INT 102
22965: PUSH
22966: LD_INT 103
22968: PUSH
22969: LD_INT 104
22971: PUSH
22972: LD_INT 105
22974: PUSH
22975: LD_INT 106
22977: PUSH
22978: LD_INT 107
22980: PUSH
22981: LD_INT 108
22983: PUSH
22984: LD_INT 109
22986: PUSH
22987: LD_INT 110
22989: PUSH
22990: LD_INT 111
22992: PUSH
22993: LD_INT 112
22995: PUSH
22996: LD_INT 114
22998: PUSH
22999: LD_INT 116
23001: PUSH
23002: LD_INT 117
23004: PUSH
23005: LD_INT 118
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: ST_TO_ADDR
23030: GO 24713
23032: LD_INT 12
23034: DOUBLE
23035: EQUAL
23036: IFTRUE 23040
23038: GO 23260
23040: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23041: LD_ADDR_VAR 0 2
23045: PUSH
23046: LD_INT 1
23048: PUSH
23049: LD_INT 2
23051: PUSH
23052: LD_INT 3
23054: PUSH
23055: LD_INT 4
23057: PUSH
23058: LD_INT 5
23060: PUSH
23061: LD_INT 6
23063: PUSH
23064: LD_INT 7
23066: PUSH
23067: LD_INT 8
23069: PUSH
23070: LD_INT 9
23072: PUSH
23073: LD_INT 10
23075: PUSH
23076: LD_INT 11
23078: PUSH
23079: LD_INT 12
23081: PUSH
23082: LD_INT 13
23084: PUSH
23085: LD_INT 14
23087: PUSH
23088: LD_INT 15
23090: PUSH
23091: LD_INT 16
23093: PUSH
23094: LD_INT 17
23096: PUSH
23097: LD_INT 18
23099: PUSH
23100: LD_INT 19
23102: PUSH
23103: LD_INT 20
23105: PUSH
23106: LD_INT 21
23108: PUSH
23109: LD_INT 22
23111: PUSH
23112: LD_INT 23
23114: PUSH
23115: LD_INT 24
23117: PUSH
23118: LD_INT 25
23120: PUSH
23121: LD_INT 26
23123: PUSH
23124: LD_INT 27
23126: PUSH
23127: LD_INT 28
23129: PUSH
23130: LD_INT 30
23132: PUSH
23133: LD_INT 31
23135: PUSH
23136: LD_INT 32
23138: PUSH
23139: LD_INT 33
23141: PUSH
23142: LD_INT 34
23144: PUSH
23145: LD_INT 36
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 101
23186: PUSH
23187: LD_INT 102
23189: PUSH
23190: LD_INT 103
23192: PUSH
23193: LD_INT 104
23195: PUSH
23196: LD_INT 105
23198: PUSH
23199: LD_INT 106
23201: PUSH
23202: LD_INT 107
23204: PUSH
23205: LD_INT 108
23207: PUSH
23208: LD_INT 109
23210: PUSH
23211: LD_INT 110
23213: PUSH
23214: LD_INT 111
23216: PUSH
23217: LD_INT 112
23219: PUSH
23220: LD_INT 113
23222: PUSH
23223: LD_INT 114
23225: PUSH
23226: LD_INT 116
23228: PUSH
23229: LD_INT 117
23231: PUSH
23232: LD_INT 118
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: ST_TO_ADDR
23258: GO 24713
23260: LD_INT 13
23262: DOUBLE
23263: EQUAL
23264: IFTRUE 23268
23266: GO 23476
23268: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23269: LD_ADDR_VAR 0 2
23273: PUSH
23274: LD_INT 1
23276: PUSH
23277: LD_INT 2
23279: PUSH
23280: LD_INT 3
23282: PUSH
23283: LD_INT 4
23285: PUSH
23286: LD_INT 5
23288: PUSH
23289: LD_INT 8
23291: PUSH
23292: LD_INT 9
23294: PUSH
23295: LD_INT 10
23297: PUSH
23298: LD_INT 11
23300: PUSH
23301: LD_INT 12
23303: PUSH
23304: LD_INT 14
23306: PUSH
23307: LD_INT 15
23309: PUSH
23310: LD_INT 16
23312: PUSH
23313: LD_INT 17
23315: PUSH
23316: LD_INT 18
23318: PUSH
23319: LD_INT 19
23321: PUSH
23322: LD_INT 20
23324: PUSH
23325: LD_INT 21
23327: PUSH
23328: LD_INT 22
23330: PUSH
23331: LD_INT 23
23333: PUSH
23334: LD_INT 24
23336: PUSH
23337: LD_INT 25
23339: PUSH
23340: LD_INT 26
23342: PUSH
23343: LD_INT 27
23345: PUSH
23346: LD_INT 28
23348: PUSH
23349: LD_INT 30
23351: PUSH
23352: LD_INT 31
23354: PUSH
23355: LD_INT 32
23357: PUSH
23358: LD_INT 33
23360: PUSH
23361: LD_INT 34
23363: PUSH
23364: LD_INT 36
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 101
23402: PUSH
23403: LD_INT 102
23405: PUSH
23406: LD_INT 103
23408: PUSH
23409: LD_INT 104
23411: PUSH
23412: LD_INT 105
23414: PUSH
23415: LD_INT 106
23417: PUSH
23418: LD_INT 107
23420: PUSH
23421: LD_INT 108
23423: PUSH
23424: LD_INT 109
23426: PUSH
23427: LD_INT 110
23429: PUSH
23430: LD_INT 111
23432: PUSH
23433: LD_INT 112
23435: PUSH
23436: LD_INT 113
23438: PUSH
23439: LD_INT 114
23441: PUSH
23442: LD_INT 116
23444: PUSH
23445: LD_INT 117
23447: PUSH
23448: LD_INT 118
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: ST_TO_ADDR
23474: GO 24713
23476: LD_INT 14
23478: DOUBLE
23479: EQUAL
23480: IFTRUE 23484
23482: GO 23708
23484: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23485: LD_ADDR_VAR 0 2
23489: PUSH
23490: LD_INT 1
23492: PUSH
23493: LD_INT 2
23495: PUSH
23496: LD_INT 3
23498: PUSH
23499: LD_INT 4
23501: PUSH
23502: LD_INT 5
23504: PUSH
23505: LD_INT 6
23507: PUSH
23508: LD_INT 7
23510: PUSH
23511: LD_INT 8
23513: PUSH
23514: LD_INT 9
23516: PUSH
23517: LD_INT 10
23519: PUSH
23520: LD_INT 11
23522: PUSH
23523: LD_INT 12
23525: PUSH
23526: LD_INT 13
23528: PUSH
23529: LD_INT 14
23531: PUSH
23532: LD_INT 15
23534: PUSH
23535: LD_INT 16
23537: PUSH
23538: LD_INT 17
23540: PUSH
23541: LD_INT 18
23543: PUSH
23544: LD_INT 19
23546: PUSH
23547: LD_INT 20
23549: PUSH
23550: LD_INT 21
23552: PUSH
23553: LD_INT 22
23555: PUSH
23556: LD_INT 23
23558: PUSH
23559: LD_INT 24
23561: PUSH
23562: LD_INT 25
23564: PUSH
23565: LD_INT 26
23567: PUSH
23568: LD_INT 27
23570: PUSH
23571: LD_INT 28
23573: PUSH
23574: LD_INT 29
23576: PUSH
23577: LD_INT 30
23579: PUSH
23580: LD_INT 31
23582: PUSH
23583: LD_INT 32
23585: PUSH
23586: LD_INT 33
23588: PUSH
23589: LD_INT 34
23591: PUSH
23592: LD_INT 36
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 101
23634: PUSH
23635: LD_INT 102
23637: PUSH
23638: LD_INT 103
23640: PUSH
23641: LD_INT 104
23643: PUSH
23644: LD_INT 105
23646: PUSH
23647: LD_INT 106
23649: PUSH
23650: LD_INT 107
23652: PUSH
23653: LD_INT 108
23655: PUSH
23656: LD_INT 109
23658: PUSH
23659: LD_INT 110
23661: PUSH
23662: LD_INT 111
23664: PUSH
23665: LD_INT 112
23667: PUSH
23668: LD_INT 113
23670: PUSH
23671: LD_INT 114
23673: PUSH
23674: LD_INT 116
23676: PUSH
23677: LD_INT 117
23679: PUSH
23680: LD_INT 118
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: ST_TO_ADDR
23706: GO 24713
23708: LD_INT 15
23710: DOUBLE
23711: EQUAL
23712: IFTRUE 23716
23714: GO 23940
23716: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23717: LD_ADDR_VAR 0 2
23721: PUSH
23722: LD_INT 1
23724: PUSH
23725: LD_INT 2
23727: PUSH
23728: LD_INT 3
23730: PUSH
23731: LD_INT 4
23733: PUSH
23734: LD_INT 5
23736: PUSH
23737: LD_INT 6
23739: PUSH
23740: LD_INT 7
23742: PUSH
23743: LD_INT 8
23745: PUSH
23746: LD_INT 9
23748: PUSH
23749: LD_INT 10
23751: PUSH
23752: LD_INT 11
23754: PUSH
23755: LD_INT 12
23757: PUSH
23758: LD_INT 13
23760: PUSH
23761: LD_INT 14
23763: PUSH
23764: LD_INT 15
23766: PUSH
23767: LD_INT 16
23769: PUSH
23770: LD_INT 17
23772: PUSH
23773: LD_INT 18
23775: PUSH
23776: LD_INT 19
23778: PUSH
23779: LD_INT 20
23781: PUSH
23782: LD_INT 21
23784: PUSH
23785: LD_INT 22
23787: PUSH
23788: LD_INT 23
23790: PUSH
23791: LD_INT 24
23793: PUSH
23794: LD_INT 25
23796: PUSH
23797: LD_INT 26
23799: PUSH
23800: LD_INT 27
23802: PUSH
23803: LD_INT 28
23805: PUSH
23806: LD_INT 29
23808: PUSH
23809: LD_INT 30
23811: PUSH
23812: LD_INT 31
23814: PUSH
23815: LD_INT 32
23817: PUSH
23818: LD_INT 33
23820: PUSH
23821: LD_INT 34
23823: PUSH
23824: LD_INT 36
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 101
23866: PUSH
23867: LD_INT 102
23869: PUSH
23870: LD_INT 103
23872: PUSH
23873: LD_INT 104
23875: PUSH
23876: LD_INT 105
23878: PUSH
23879: LD_INT 106
23881: PUSH
23882: LD_INT 107
23884: PUSH
23885: LD_INT 108
23887: PUSH
23888: LD_INT 109
23890: PUSH
23891: LD_INT 110
23893: PUSH
23894: LD_INT 111
23896: PUSH
23897: LD_INT 112
23899: PUSH
23900: LD_INT 113
23902: PUSH
23903: LD_INT 114
23905: PUSH
23906: LD_INT 116
23908: PUSH
23909: LD_INT 117
23911: PUSH
23912: LD_INT 118
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: ST_TO_ADDR
23938: GO 24713
23940: LD_INT 16
23942: DOUBLE
23943: EQUAL
23944: IFTRUE 23948
23946: GO 24084
23948: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23949: LD_ADDR_VAR 0 2
23953: PUSH
23954: LD_INT 2
23956: PUSH
23957: LD_INT 4
23959: PUSH
23960: LD_INT 5
23962: PUSH
23963: LD_INT 7
23965: PUSH
23966: LD_INT 11
23968: PUSH
23969: LD_INT 12
23971: PUSH
23972: LD_INT 15
23974: PUSH
23975: LD_INT 16
23977: PUSH
23978: LD_INT 20
23980: PUSH
23981: LD_INT 21
23983: PUSH
23984: LD_INT 22
23986: PUSH
23987: LD_INT 23
23989: PUSH
23990: LD_INT 25
23992: PUSH
23993: LD_INT 26
23995: PUSH
23996: LD_INT 30
23998: PUSH
23999: LD_INT 31
24001: PUSH
24002: LD_INT 32
24004: PUSH
24005: LD_INT 33
24007: PUSH
24008: LD_INT 34
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 101
24034: PUSH
24035: LD_INT 102
24037: PUSH
24038: LD_INT 103
24040: PUSH
24041: LD_INT 106
24043: PUSH
24044: LD_INT 108
24046: PUSH
24047: LD_INT 112
24049: PUSH
24050: LD_INT 113
24052: PUSH
24053: LD_INT 114
24055: PUSH
24056: LD_INT 116
24058: PUSH
24059: LD_INT 117
24061: PUSH
24062: LD_INT 118
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: ST_TO_ADDR
24082: GO 24713
24084: LD_INT 17
24086: DOUBLE
24087: EQUAL
24088: IFTRUE 24092
24090: GO 24316
24092: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24093: LD_ADDR_VAR 0 2
24097: PUSH
24098: LD_INT 1
24100: PUSH
24101: LD_INT 2
24103: PUSH
24104: LD_INT 3
24106: PUSH
24107: LD_INT 4
24109: PUSH
24110: LD_INT 5
24112: PUSH
24113: LD_INT 6
24115: PUSH
24116: LD_INT 7
24118: PUSH
24119: LD_INT 8
24121: PUSH
24122: LD_INT 9
24124: PUSH
24125: LD_INT 10
24127: PUSH
24128: LD_INT 11
24130: PUSH
24131: LD_INT 12
24133: PUSH
24134: LD_INT 13
24136: PUSH
24137: LD_INT 14
24139: PUSH
24140: LD_INT 15
24142: PUSH
24143: LD_INT 16
24145: PUSH
24146: LD_INT 17
24148: PUSH
24149: LD_INT 18
24151: PUSH
24152: LD_INT 19
24154: PUSH
24155: LD_INT 20
24157: PUSH
24158: LD_INT 21
24160: PUSH
24161: LD_INT 22
24163: PUSH
24164: LD_INT 23
24166: PUSH
24167: LD_INT 24
24169: PUSH
24170: LD_INT 25
24172: PUSH
24173: LD_INT 26
24175: PUSH
24176: LD_INT 27
24178: PUSH
24179: LD_INT 28
24181: PUSH
24182: LD_INT 29
24184: PUSH
24185: LD_INT 30
24187: PUSH
24188: LD_INT 31
24190: PUSH
24191: LD_INT 32
24193: PUSH
24194: LD_INT 33
24196: PUSH
24197: LD_INT 34
24199: PUSH
24200: LD_INT 36
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 101
24242: PUSH
24243: LD_INT 102
24245: PUSH
24246: LD_INT 103
24248: PUSH
24249: LD_INT 104
24251: PUSH
24252: LD_INT 105
24254: PUSH
24255: LD_INT 106
24257: PUSH
24258: LD_INT 107
24260: PUSH
24261: LD_INT 108
24263: PUSH
24264: LD_INT 109
24266: PUSH
24267: LD_INT 110
24269: PUSH
24270: LD_INT 111
24272: PUSH
24273: LD_INT 112
24275: PUSH
24276: LD_INT 113
24278: PUSH
24279: LD_INT 114
24281: PUSH
24282: LD_INT 116
24284: PUSH
24285: LD_INT 117
24287: PUSH
24288: LD_INT 118
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: ST_TO_ADDR
24314: GO 24713
24316: LD_INT 18
24318: DOUBLE
24319: EQUAL
24320: IFTRUE 24324
24322: GO 24472
24324: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24325: LD_ADDR_VAR 0 2
24329: PUSH
24330: LD_INT 2
24332: PUSH
24333: LD_INT 4
24335: PUSH
24336: LD_INT 5
24338: PUSH
24339: LD_INT 7
24341: PUSH
24342: LD_INT 11
24344: PUSH
24345: LD_INT 12
24347: PUSH
24348: LD_INT 15
24350: PUSH
24351: LD_INT 16
24353: PUSH
24354: LD_INT 20
24356: PUSH
24357: LD_INT 21
24359: PUSH
24360: LD_INT 22
24362: PUSH
24363: LD_INT 23
24365: PUSH
24366: LD_INT 25
24368: PUSH
24369: LD_INT 26
24371: PUSH
24372: LD_INT 30
24374: PUSH
24375: LD_INT 31
24377: PUSH
24378: LD_INT 32
24380: PUSH
24381: LD_INT 33
24383: PUSH
24384: LD_INT 34
24386: PUSH
24387: LD_INT 35
24389: PUSH
24390: LD_INT 36
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 101
24418: PUSH
24419: LD_INT 102
24421: PUSH
24422: LD_INT 103
24424: PUSH
24425: LD_INT 106
24427: PUSH
24428: LD_INT 108
24430: PUSH
24431: LD_INT 112
24433: PUSH
24434: LD_INT 113
24436: PUSH
24437: LD_INT 114
24439: PUSH
24440: LD_INT 115
24442: PUSH
24443: LD_INT 116
24445: PUSH
24446: LD_INT 117
24448: PUSH
24449: LD_INT 118
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: ST_TO_ADDR
24470: GO 24713
24472: LD_INT 19
24474: DOUBLE
24475: EQUAL
24476: IFTRUE 24480
24478: GO 24712
24480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24481: LD_ADDR_VAR 0 2
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: LD_INT 2
24491: PUSH
24492: LD_INT 3
24494: PUSH
24495: LD_INT 4
24497: PUSH
24498: LD_INT 5
24500: PUSH
24501: LD_INT 6
24503: PUSH
24504: LD_INT 7
24506: PUSH
24507: LD_INT 8
24509: PUSH
24510: LD_INT 9
24512: PUSH
24513: LD_INT 10
24515: PUSH
24516: LD_INT 11
24518: PUSH
24519: LD_INT 12
24521: PUSH
24522: LD_INT 13
24524: PUSH
24525: LD_INT 14
24527: PUSH
24528: LD_INT 15
24530: PUSH
24531: LD_INT 16
24533: PUSH
24534: LD_INT 17
24536: PUSH
24537: LD_INT 18
24539: PUSH
24540: LD_INT 19
24542: PUSH
24543: LD_INT 20
24545: PUSH
24546: LD_INT 21
24548: PUSH
24549: LD_INT 22
24551: PUSH
24552: LD_INT 23
24554: PUSH
24555: LD_INT 24
24557: PUSH
24558: LD_INT 25
24560: PUSH
24561: LD_INT 26
24563: PUSH
24564: LD_INT 27
24566: PUSH
24567: LD_INT 28
24569: PUSH
24570: LD_INT 29
24572: PUSH
24573: LD_INT 30
24575: PUSH
24576: LD_INT 31
24578: PUSH
24579: LD_INT 32
24581: PUSH
24582: LD_INT 33
24584: PUSH
24585: LD_INT 34
24587: PUSH
24588: LD_INT 35
24590: PUSH
24591: LD_INT 36
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 101
24634: PUSH
24635: LD_INT 102
24637: PUSH
24638: LD_INT 103
24640: PUSH
24641: LD_INT 104
24643: PUSH
24644: LD_INT 105
24646: PUSH
24647: LD_INT 106
24649: PUSH
24650: LD_INT 107
24652: PUSH
24653: LD_INT 108
24655: PUSH
24656: LD_INT 109
24658: PUSH
24659: LD_INT 110
24661: PUSH
24662: LD_INT 111
24664: PUSH
24665: LD_INT 112
24667: PUSH
24668: LD_INT 113
24670: PUSH
24671: LD_INT 114
24673: PUSH
24674: LD_INT 115
24676: PUSH
24677: LD_INT 116
24679: PUSH
24680: LD_INT 117
24682: PUSH
24683: LD_INT 118
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: ST_TO_ADDR
24710: GO 24713
24712: POP
// end else
24713: GO 24944
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24715: LD_ADDR_VAR 0 2
24719: PUSH
24720: LD_INT 1
24722: PUSH
24723: LD_INT 2
24725: PUSH
24726: LD_INT 3
24728: PUSH
24729: LD_INT 4
24731: PUSH
24732: LD_INT 5
24734: PUSH
24735: LD_INT 6
24737: PUSH
24738: LD_INT 7
24740: PUSH
24741: LD_INT 8
24743: PUSH
24744: LD_INT 9
24746: PUSH
24747: LD_INT 10
24749: PUSH
24750: LD_INT 11
24752: PUSH
24753: LD_INT 12
24755: PUSH
24756: LD_INT 13
24758: PUSH
24759: LD_INT 14
24761: PUSH
24762: LD_INT 15
24764: PUSH
24765: LD_INT 16
24767: PUSH
24768: LD_INT 17
24770: PUSH
24771: LD_INT 18
24773: PUSH
24774: LD_INT 19
24776: PUSH
24777: LD_INT 20
24779: PUSH
24780: LD_INT 21
24782: PUSH
24783: LD_INT 22
24785: PUSH
24786: LD_INT 23
24788: PUSH
24789: LD_INT 24
24791: PUSH
24792: LD_INT 25
24794: PUSH
24795: LD_INT 26
24797: PUSH
24798: LD_INT 27
24800: PUSH
24801: LD_INT 28
24803: PUSH
24804: LD_INT 29
24806: PUSH
24807: LD_INT 30
24809: PUSH
24810: LD_INT 31
24812: PUSH
24813: LD_INT 32
24815: PUSH
24816: LD_INT 33
24818: PUSH
24819: LD_INT 34
24821: PUSH
24822: LD_INT 35
24824: PUSH
24825: LD_INT 36
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 101
24868: PUSH
24869: LD_INT 102
24871: PUSH
24872: LD_INT 103
24874: PUSH
24875: LD_INT 104
24877: PUSH
24878: LD_INT 105
24880: PUSH
24881: LD_INT 106
24883: PUSH
24884: LD_INT 107
24886: PUSH
24887: LD_INT 108
24889: PUSH
24890: LD_INT 109
24892: PUSH
24893: LD_INT 110
24895: PUSH
24896: LD_INT 111
24898: PUSH
24899: LD_INT 112
24901: PUSH
24902: LD_INT 113
24904: PUSH
24905: LD_INT 114
24907: PUSH
24908: LD_INT 115
24910: PUSH
24911: LD_INT 116
24913: PUSH
24914: LD_INT 117
24916: PUSH
24917: LD_INT 118
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: ST_TO_ADDR
// if result then
24944: LD_VAR 0 2
24948: IFFALSE 25734
// begin normal :=  ;
24950: LD_ADDR_VAR 0 5
24954: PUSH
24955: LD_STRING 
24957: ST_TO_ADDR
// hardcore :=  ;
24958: LD_ADDR_VAR 0 6
24962: PUSH
24963: LD_STRING 
24965: ST_TO_ADDR
// active :=  ;
24966: LD_ADDR_VAR 0 7
24970: PUSH
24971: LD_STRING 
24973: ST_TO_ADDR
// for i = 1 to normalCounter do
24974: LD_ADDR_VAR 0 8
24978: PUSH
24979: DOUBLE
24980: LD_INT 1
24982: DEC
24983: ST_TO_ADDR
24984: LD_EXP 52
24988: PUSH
24989: FOR_TO
24990: IFFALSE 25091
// begin tmp := 0 ;
24992: LD_ADDR_VAR 0 3
24996: PUSH
24997: LD_STRING 0
24999: ST_TO_ADDR
// if result [ 1 ] then
25000: LD_VAR 0 2
25004: PUSH
25005: LD_INT 1
25007: ARRAY
25008: IFFALSE 25073
// if result [ 1 ] [ 1 ] = i then
25010: LD_VAR 0 2
25014: PUSH
25015: LD_INT 1
25017: ARRAY
25018: PUSH
25019: LD_INT 1
25021: ARRAY
25022: PUSH
25023: LD_VAR 0 8
25027: EQUAL
25028: IFFALSE 25073
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25030: LD_ADDR_VAR 0 2
25034: PUSH
25035: LD_VAR 0 2
25039: PPUSH
25040: LD_INT 1
25042: PPUSH
25043: LD_VAR 0 2
25047: PUSH
25048: LD_INT 1
25050: ARRAY
25051: PPUSH
25052: LD_INT 1
25054: PPUSH
25055: CALL_OW 3
25059: PPUSH
25060: CALL_OW 1
25064: ST_TO_ADDR
// tmp := 1 ;
25065: LD_ADDR_VAR 0 3
25069: PUSH
25070: LD_STRING 1
25072: ST_TO_ADDR
// end ; normal := normal & tmp ;
25073: LD_ADDR_VAR 0 5
25077: PUSH
25078: LD_VAR 0 5
25082: PUSH
25083: LD_VAR 0 3
25087: STR
25088: ST_TO_ADDR
// end ;
25089: GO 24989
25091: POP
25092: POP
// for i = 1 to hardcoreCounter do
25093: LD_ADDR_VAR 0 8
25097: PUSH
25098: DOUBLE
25099: LD_INT 1
25101: DEC
25102: ST_TO_ADDR
25103: LD_EXP 53
25107: PUSH
25108: FOR_TO
25109: IFFALSE 25214
// begin tmp := 0 ;
25111: LD_ADDR_VAR 0 3
25115: PUSH
25116: LD_STRING 0
25118: ST_TO_ADDR
// if result [ 2 ] then
25119: LD_VAR 0 2
25123: PUSH
25124: LD_INT 2
25126: ARRAY
25127: IFFALSE 25196
// if result [ 2 ] [ 1 ] = 100 + i then
25129: LD_VAR 0 2
25133: PUSH
25134: LD_INT 2
25136: ARRAY
25137: PUSH
25138: LD_INT 1
25140: ARRAY
25141: PUSH
25142: LD_INT 100
25144: PUSH
25145: LD_VAR 0 8
25149: PLUS
25150: EQUAL
25151: IFFALSE 25196
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25153: LD_ADDR_VAR 0 2
25157: PUSH
25158: LD_VAR 0 2
25162: PPUSH
25163: LD_INT 2
25165: PPUSH
25166: LD_VAR 0 2
25170: PUSH
25171: LD_INT 2
25173: ARRAY
25174: PPUSH
25175: LD_INT 1
25177: PPUSH
25178: CALL_OW 3
25182: PPUSH
25183: CALL_OW 1
25187: ST_TO_ADDR
// tmp := 1 ;
25188: LD_ADDR_VAR 0 3
25192: PUSH
25193: LD_STRING 1
25195: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25196: LD_ADDR_VAR 0 6
25200: PUSH
25201: LD_VAR 0 6
25205: PUSH
25206: LD_VAR 0 3
25210: STR
25211: ST_TO_ADDR
// end ;
25212: GO 25108
25214: POP
25215: POP
// if isGameLoad then
25216: LD_VAR 0 1
25220: IFFALSE 25695
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25222: LD_ADDR_VAR 0 4
25226: PUSH
25227: LD_EXP 56
25231: PUSH
25232: LD_EXP 55
25236: PUSH
25237: LD_EXP 57
25241: PUSH
25242: LD_EXP 54
25246: PUSH
25247: LD_EXP 58
25251: PUSH
25252: LD_EXP 59
25256: PUSH
25257: LD_EXP 60
25261: PUSH
25262: LD_EXP 61
25266: PUSH
25267: LD_EXP 62
25271: PUSH
25272: LD_EXP 63
25276: PUSH
25277: LD_EXP 64
25281: PUSH
25282: LD_EXP 65
25286: PUSH
25287: LD_EXP 66
25291: PUSH
25292: LD_EXP 67
25296: PUSH
25297: LD_EXP 75
25301: PUSH
25302: LD_EXP 76
25306: PUSH
25307: LD_EXP 77
25311: PUSH
25312: LD_EXP 78
25316: PUSH
25317: LD_EXP 80
25321: PUSH
25322: LD_EXP 81
25326: PUSH
25327: LD_EXP 82
25331: PUSH
25332: LD_EXP 85
25336: PUSH
25337: LD_EXP 87
25341: PUSH
25342: LD_EXP 88
25346: PUSH
25347: LD_EXP 89
25351: PUSH
25352: LD_EXP 91
25356: PUSH
25357: LD_EXP 92
25361: PUSH
25362: LD_EXP 95
25366: PUSH
25367: LD_EXP 96
25371: PUSH
25372: LD_EXP 97
25376: PUSH
25377: LD_EXP 98
25381: PUSH
25382: LD_EXP 99
25386: PUSH
25387: LD_EXP 100
25391: PUSH
25392: LD_EXP 101
25396: PUSH
25397: LD_EXP 102
25401: PUSH
25402: LD_EXP 103
25406: PUSH
25407: LD_EXP 68
25411: PUSH
25412: LD_EXP 69
25416: PUSH
25417: LD_EXP 72
25421: PUSH
25422: LD_EXP 73
25426: PUSH
25427: LD_EXP 74
25431: PUSH
25432: LD_EXP 70
25436: PUSH
25437: LD_EXP 71
25441: PUSH
25442: LD_EXP 79
25446: PUSH
25447: LD_EXP 83
25451: PUSH
25452: LD_EXP 84
25456: PUSH
25457: LD_EXP 86
25461: PUSH
25462: LD_EXP 90
25466: PUSH
25467: LD_EXP 93
25471: PUSH
25472: LD_EXP 94
25476: PUSH
25477: LD_EXP 104
25481: PUSH
25482: LD_EXP 105
25486: PUSH
25487: LD_EXP 106
25491: PUSH
25492: LD_EXP 107
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: ST_TO_ADDR
// tmp :=  ;
25553: LD_ADDR_VAR 0 3
25557: PUSH
25558: LD_STRING 
25560: ST_TO_ADDR
// for i = 1 to normalCounter do
25561: LD_ADDR_VAR 0 8
25565: PUSH
25566: DOUBLE
25567: LD_INT 1
25569: DEC
25570: ST_TO_ADDR
25571: LD_EXP 52
25575: PUSH
25576: FOR_TO
25577: IFFALSE 25613
// begin if flags [ i ] then
25579: LD_VAR 0 4
25583: PUSH
25584: LD_VAR 0 8
25588: ARRAY
25589: IFFALSE 25611
// tmp := tmp & i & ; ;
25591: LD_ADDR_VAR 0 3
25595: PUSH
25596: LD_VAR 0 3
25600: PUSH
25601: LD_VAR 0 8
25605: STR
25606: PUSH
25607: LD_STRING ;
25609: STR
25610: ST_TO_ADDR
// end ;
25611: GO 25576
25613: POP
25614: POP
// for i = 1 to hardcoreCounter do
25615: LD_ADDR_VAR 0 8
25619: PUSH
25620: DOUBLE
25621: LD_INT 1
25623: DEC
25624: ST_TO_ADDR
25625: LD_EXP 53
25629: PUSH
25630: FOR_TO
25631: IFFALSE 25677
// begin if flags [ normalCounter + i ] then
25633: LD_VAR 0 4
25637: PUSH
25638: LD_EXP 52
25642: PUSH
25643: LD_VAR 0 8
25647: PLUS
25648: ARRAY
25649: IFFALSE 25675
// tmp := tmp & ( 100 + i ) & ; ;
25651: LD_ADDR_VAR 0 3
25655: PUSH
25656: LD_VAR 0 3
25660: PUSH
25661: LD_INT 100
25663: PUSH
25664: LD_VAR 0 8
25668: PLUS
25669: STR
25670: PUSH
25671: LD_STRING ;
25673: STR
25674: ST_TO_ADDR
// end ;
25675: GO 25630
25677: POP
25678: POP
// if tmp then
25679: LD_VAR 0 3
25683: IFFALSE 25695
// active := tmp ;
25685: LD_ADDR_VAR 0 7
25689: PUSH
25690: LD_VAR 0 3
25694: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25695: LD_STRING getStreamItemsFromMission("
25697: PUSH
25698: LD_VAR 0 5
25702: STR
25703: PUSH
25704: LD_STRING ","
25706: STR
25707: PUSH
25708: LD_VAR 0 6
25712: STR
25713: PUSH
25714: LD_STRING ","
25716: STR
25717: PUSH
25718: LD_VAR 0 7
25722: STR
25723: PUSH
25724: LD_STRING ")
25726: STR
25727: PPUSH
25728: CALL_OW 559
// end else
25732: GO 25741
// ToLua ( getStreamItemsFromMission("","","") ) ;
25734: LD_STRING getStreamItemsFromMission("","","")
25736: PPUSH
25737: CALL_OW 559
// end ;
25741: LD_VAR 0 2
25745: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25746: LD_EXP 51
25750: PUSH
25751: LD_EXP 56
25755: AND
25756: IFFALSE 25880
25758: GO 25760
25760: DISABLE
25761: LD_INT 0
25763: PPUSH
25764: PPUSH
// begin enable ;
25765: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25766: LD_ADDR_VAR 0 2
25770: PUSH
25771: LD_INT 22
25773: PUSH
25774: LD_OWVAR 2
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 2
25785: PUSH
25786: LD_INT 34
25788: PUSH
25789: LD_INT 7
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 34
25798: PUSH
25799: LD_INT 45
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 34
25808: PUSH
25809: LD_INT 28
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 34
25818: PUSH
25819: LD_INT 47
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PPUSH
25837: CALL_OW 69
25841: ST_TO_ADDR
// if not tmp then
25842: LD_VAR 0 2
25846: NOT
25847: IFFALSE 25851
// exit ;
25849: GO 25880
// for i in tmp do
25851: LD_ADDR_VAR 0 1
25855: PUSH
25856: LD_VAR 0 2
25860: PUSH
25861: FOR_IN
25862: IFFALSE 25878
// begin SetLives ( i , 0 ) ;
25864: LD_VAR 0 1
25868: PPUSH
25869: LD_INT 0
25871: PPUSH
25872: CALL_OW 234
// end ;
25876: GO 25861
25878: POP
25879: POP
// end ;
25880: PPOPN 2
25882: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25883: LD_EXP 51
25887: PUSH
25888: LD_EXP 57
25892: AND
25893: IFFALSE 25977
25895: GO 25897
25897: DISABLE
25898: LD_INT 0
25900: PPUSH
25901: PPUSH
// begin enable ;
25902: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25903: LD_ADDR_VAR 0 2
25907: PUSH
25908: LD_INT 22
25910: PUSH
25911: LD_OWVAR 2
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 32
25922: PUSH
25923: LD_INT 3
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PPUSH
25934: CALL_OW 69
25938: ST_TO_ADDR
// if not tmp then
25939: LD_VAR 0 2
25943: NOT
25944: IFFALSE 25948
// exit ;
25946: GO 25977
// for i in tmp do
25948: LD_ADDR_VAR 0 1
25952: PUSH
25953: LD_VAR 0 2
25957: PUSH
25958: FOR_IN
25959: IFFALSE 25975
// begin SetLives ( i , 0 ) ;
25961: LD_VAR 0 1
25965: PPUSH
25966: LD_INT 0
25968: PPUSH
25969: CALL_OW 234
// end ;
25973: GO 25958
25975: POP
25976: POP
// end ;
25977: PPOPN 2
25979: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25980: LD_EXP 51
25984: PUSH
25985: LD_EXP 54
25989: AND
25990: IFFALSE 26083
25992: GO 25994
25994: DISABLE
25995: LD_INT 0
25997: PPUSH
// begin enable ;
25998: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25999: LD_ADDR_VAR 0 1
26003: PUSH
26004: LD_INT 22
26006: PUSH
26007: LD_OWVAR 2
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 2
26018: PUSH
26019: LD_INT 25
26021: PUSH
26022: LD_INT 5
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 25
26031: PUSH
26032: LD_INT 9
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 25
26041: PUSH
26042: LD_INT 8
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PPUSH
26059: CALL_OW 69
26063: PUSH
26064: FOR_IN
26065: IFFALSE 26081
// begin SetClass ( i , 1 ) ;
26067: LD_VAR 0 1
26071: PPUSH
26072: LD_INT 1
26074: PPUSH
26075: CALL_OW 336
// end ;
26079: GO 26064
26081: POP
26082: POP
// end ;
26083: PPOPN 1
26085: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26086: LD_EXP 51
26090: PUSH
26091: LD_EXP 55
26095: AND
26096: PUSH
26097: LD_OWVAR 65
26101: PUSH
26102: LD_INT 7
26104: LESS
26105: AND
26106: IFFALSE 26120
26108: GO 26110
26110: DISABLE
// begin enable ;
26111: ENABLE
// game_speed := 7 ;
26112: LD_ADDR_OWVAR 65
26116: PUSH
26117: LD_INT 7
26119: ST_TO_ADDR
// end ;
26120: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26121: LD_EXP 51
26125: PUSH
26126: LD_EXP 58
26130: AND
26131: IFFALSE 26333
26133: GO 26135
26135: DISABLE
26136: LD_INT 0
26138: PPUSH
26139: PPUSH
26140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26141: LD_ADDR_VAR 0 3
26145: PUSH
26146: LD_INT 81
26148: PUSH
26149: LD_OWVAR 2
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 21
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PPUSH
26172: CALL_OW 69
26176: ST_TO_ADDR
// if not tmp then
26177: LD_VAR 0 3
26181: NOT
26182: IFFALSE 26186
// exit ;
26184: GO 26333
// if tmp > 5 then
26186: LD_VAR 0 3
26190: PUSH
26191: LD_INT 5
26193: GREATER
26194: IFFALSE 26206
// k := 5 else
26196: LD_ADDR_VAR 0 2
26200: PUSH
26201: LD_INT 5
26203: ST_TO_ADDR
26204: GO 26216
// k := tmp ;
26206: LD_ADDR_VAR 0 2
26210: PUSH
26211: LD_VAR 0 3
26215: ST_TO_ADDR
// for i := 1 to k do
26216: LD_ADDR_VAR 0 1
26220: PUSH
26221: DOUBLE
26222: LD_INT 1
26224: DEC
26225: ST_TO_ADDR
26226: LD_VAR 0 2
26230: PUSH
26231: FOR_TO
26232: IFFALSE 26331
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26234: LD_VAR 0 3
26238: PUSH
26239: LD_VAR 0 1
26243: ARRAY
26244: PPUSH
26245: LD_VAR 0 1
26249: PUSH
26250: LD_INT 4
26252: MOD
26253: PUSH
26254: LD_INT 1
26256: PLUS
26257: PPUSH
26258: CALL_OW 259
26262: PUSH
26263: LD_INT 10
26265: LESS
26266: IFFALSE 26329
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26268: LD_VAR 0 3
26272: PUSH
26273: LD_VAR 0 1
26277: ARRAY
26278: PPUSH
26279: LD_VAR 0 1
26283: PUSH
26284: LD_INT 4
26286: MOD
26287: PUSH
26288: LD_INT 1
26290: PLUS
26291: PPUSH
26292: LD_VAR 0 3
26296: PUSH
26297: LD_VAR 0 1
26301: ARRAY
26302: PPUSH
26303: LD_VAR 0 1
26307: PUSH
26308: LD_INT 4
26310: MOD
26311: PUSH
26312: LD_INT 1
26314: PLUS
26315: PPUSH
26316: CALL_OW 259
26320: PUSH
26321: LD_INT 1
26323: PLUS
26324: PPUSH
26325: CALL_OW 237
26329: GO 26231
26331: POP
26332: POP
// end ;
26333: PPOPN 3
26335: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26336: LD_EXP 51
26340: PUSH
26341: LD_EXP 59
26345: AND
26346: IFFALSE 26366
26348: GO 26350
26350: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26351: LD_INT 4
26353: PPUSH
26354: LD_OWVAR 2
26358: PPUSH
26359: LD_INT 0
26361: PPUSH
26362: CALL_OW 324
26366: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26367: LD_EXP 51
26371: PUSH
26372: LD_EXP 88
26376: AND
26377: IFFALSE 26397
26379: GO 26381
26381: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26382: LD_INT 19
26384: PPUSH
26385: LD_OWVAR 2
26389: PPUSH
26390: LD_INT 0
26392: PPUSH
26393: CALL_OW 324
26397: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26398: LD_EXP 51
26402: PUSH
26403: LD_EXP 60
26407: AND
26408: IFFALSE 26510
26410: GO 26412
26412: DISABLE
26413: LD_INT 0
26415: PPUSH
26416: PPUSH
// begin enable ;
26417: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26418: LD_ADDR_VAR 0 2
26422: PUSH
26423: LD_INT 22
26425: PUSH
26426: LD_OWVAR 2
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 2
26437: PUSH
26438: LD_INT 34
26440: PUSH
26441: LD_INT 11
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 34
26450: PUSH
26451: LD_INT 30
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: LIST
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PPUSH
26467: CALL_OW 69
26471: ST_TO_ADDR
// if not tmp then
26472: LD_VAR 0 2
26476: NOT
26477: IFFALSE 26481
// exit ;
26479: GO 26510
// for i in tmp do
26481: LD_ADDR_VAR 0 1
26485: PUSH
26486: LD_VAR 0 2
26490: PUSH
26491: FOR_IN
26492: IFFALSE 26508
// begin SetLives ( i , 0 ) ;
26494: LD_VAR 0 1
26498: PPUSH
26499: LD_INT 0
26501: PPUSH
26502: CALL_OW 234
// end ;
26506: GO 26491
26508: POP
26509: POP
// end ;
26510: PPOPN 2
26512: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26513: LD_EXP 51
26517: PUSH
26518: LD_EXP 61
26522: AND
26523: IFFALSE 26543
26525: GO 26527
26527: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26528: LD_INT 32
26530: PPUSH
26531: LD_OWVAR 2
26535: PPUSH
26536: LD_INT 0
26538: PPUSH
26539: CALL_OW 324
26543: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26544: LD_EXP 51
26548: PUSH
26549: LD_EXP 62
26553: AND
26554: IFFALSE 26735
26556: GO 26558
26558: DISABLE
26559: LD_INT 0
26561: PPUSH
26562: PPUSH
26563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26564: LD_ADDR_VAR 0 2
26568: PUSH
26569: LD_INT 22
26571: PUSH
26572: LD_OWVAR 2
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 33
26583: PUSH
26584: LD_INT 3
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PPUSH
26595: CALL_OW 69
26599: ST_TO_ADDR
// if not tmp then
26600: LD_VAR 0 2
26604: NOT
26605: IFFALSE 26609
// exit ;
26607: GO 26735
// side := 0 ;
26609: LD_ADDR_VAR 0 3
26613: PUSH
26614: LD_INT 0
26616: ST_TO_ADDR
// for i := 1 to 8 do
26617: LD_ADDR_VAR 0 1
26621: PUSH
26622: DOUBLE
26623: LD_INT 1
26625: DEC
26626: ST_TO_ADDR
26627: LD_INT 8
26629: PUSH
26630: FOR_TO
26631: IFFALSE 26679
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26633: LD_OWVAR 2
26637: PUSH
26638: LD_VAR 0 1
26642: NONEQUAL
26643: PUSH
26644: LD_OWVAR 2
26648: PPUSH
26649: LD_VAR 0 1
26653: PPUSH
26654: CALL_OW 81
26658: PUSH
26659: LD_INT 2
26661: EQUAL
26662: AND
26663: IFFALSE 26677
// begin side := i ;
26665: LD_ADDR_VAR 0 3
26669: PUSH
26670: LD_VAR 0 1
26674: ST_TO_ADDR
// break ;
26675: GO 26679
// end ;
26677: GO 26630
26679: POP
26680: POP
// if not side then
26681: LD_VAR 0 3
26685: NOT
26686: IFFALSE 26690
// exit ;
26688: GO 26735
// for i := 1 to tmp do
26690: LD_ADDR_VAR 0 1
26694: PUSH
26695: DOUBLE
26696: LD_INT 1
26698: DEC
26699: ST_TO_ADDR
26700: LD_VAR 0 2
26704: PUSH
26705: FOR_TO
26706: IFFALSE 26733
// if Prob ( 60 ) then
26708: LD_INT 60
26710: PPUSH
26711: CALL_OW 13
26715: IFFALSE 26731
// SetSide ( i , side ) ;
26717: LD_VAR 0 1
26721: PPUSH
26722: LD_VAR 0 3
26726: PPUSH
26727: CALL_OW 235
26731: GO 26705
26733: POP
26734: POP
// end ;
26735: PPOPN 3
26737: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26738: LD_EXP 51
26742: PUSH
26743: LD_EXP 64
26747: AND
26748: IFFALSE 26867
26750: GO 26752
26752: DISABLE
26753: LD_INT 0
26755: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26756: LD_ADDR_VAR 0 1
26760: PUSH
26761: LD_INT 22
26763: PUSH
26764: LD_OWVAR 2
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 21
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 3
26785: PUSH
26786: LD_INT 23
26788: PUSH
26789: LD_INT 0
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: LIST
26804: PPUSH
26805: CALL_OW 69
26809: PUSH
26810: FOR_IN
26811: IFFALSE 26865
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26813: LD_VAR 0 1
26817: PPUSH
26818: CALL_OW 257
26822: PUSH
26823: LD_INT 1
26825: PUSH
26826: LD_INT 2
26828: PUSH
26829: LD_INT 3
26831: PUSH
26832: LD_INT 4
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: IN
26841: IFFALSE 26863
// SetClass ( un , rand ( 1 , 4 ) ) ;
26843: LD_VAR 0 1
26847: PPUSH
26848: LD_INT 1
26850: PPUSH
26851: LD_INT 4
26853: PPUSH
26854: CALL_OW 12
26858: PPUSH
26859: CALL_OW 336
26863: GO 26810
26865: POP
26866: POP
// end ;
26867: PPOPN 1
26869: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26870: LD_EXP 51
26874: PUSH
26875: LD_EXP 63
26879: AND
26880: IFFALSE 26959
26882: GO 26884
26884: DISABLE
26885: LD_INT 0
26887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26888: LD_ADDR_VAR 0 1
26892: PUSH
26893: LD_INT 22
26895: PUSH
26896: LD_OWVAR 2
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 21
26907: PUSH
26908: LD_INT 3
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PPUSH
26919: CALL_OW 69
26923: ST_TO_ADDR
// if not tmp then
26924: LD_VAR 0 1
26928: NOT
26929: IFFALSE 26933
// exit ;
26931: GO 26959
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26933: LD_VAR 0 1
26937: PUSH
26938: LD_INT 1
26940: PPUSH
26941: LD_VAR 0 1
26945: PPUSH
26946: CALL_OW 12
26950: ARRAY
26951: PPUSH
26952: LD_INT 100
26954: PPUSH
26955: CALL_OW 234
// end ;
26959: PPOPN 1
26961: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26962: LD_EXP 51
26966: PUSH
26967: LD_EXP 65
26971: AND
26972: IFFALSE 27070
26974: GO 26976
26976: DISABLE
26977: LD_INT 0
26979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26980: LD_ADDR_VAR 0 1
26984: PUSH
26985: LD_INT 22
26987: PUSH
26988: LD_OWVAR 2
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 21
26999: PUSH
27000: LD_INT 1
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PPUSH
27011: CALL_OW 69
27015: ST_TO_ADDR
// if not tmp then
27016: LD_VAR 0 1
27020: NOT
27021: IFFALSE 27025
// exit ;
27023: GO 27070
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27025: LD_VAR 0 1
27029: PUSH
27030: LD_INT 1
27032: PPUSH
27033: LD_VAR 0 1
27037: PPUSH
27038: CALL_OW 12
27042: ARRAY
27043: PPUSH
27044: LD_INT 1
27046: PPUSH
27047: LD_INT 4
27049: PPUSH
27050: CALL_OW 12
27054: PPUSH
27055: LD_INT 3000
27057: PPUSH
27058: LD_INT 9000
27060: PPUSH
27061: CALL_OW 12
27065: PPUSH
27066: CALL_OW 492
// end ;
27070: PPOPN 1
27072: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27073: LD_EXP 51
27077: PUSH
27078: LD_EXP 66
27082: AND
27083: IFFALSE 27103
27085: GO 27087
27087: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27088: LD_INT 1
27090: PPUSH
27091: LD_OWVAR 2
27095: PPUSH
27096: LD_INT 0
27098: PPUSH
27099: CALL_OW 324
27103: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27104: LD_EXP 51
27108: PUSH
27109: LD_EXP 67
27113: AND
27114: IFFALSE 27197
27116: GO 27118
27118: DISABLE
27119: LD_INT 0
27121: PPUSH
27122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27123: LD_ADDR_VAR 0 2
27127: PUSH
27128: LD_INT 22
27130: PUSH
27131: LD_OWVAR 2
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 21
27142: PUSH
27143: LD_INT 3
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PPUSH
27154: CALL_OW 69
27158: ST_TO_ADDR
// if not tmp then
27159: LD_VAR 0 2
27163: NOT
27164: IFFALSE 27168
// exit ;
27166: GO 27197
// for i in tmp do
27168: LD_ADDR_VAR 0 1
27172: PUSH
27173: LD_VAR 0 2
27177: PUSH
27178: FOR_IN
27179: IFFALSE 27195
// SetBLevel ( i , 10 ) ;
27181: LD_VAR 0 1
27185: PPUSH
27186: LD_INT 10
27188: PPUSH
27189: CALL_OW 241
27193: GO 27178
27195: POP
27196: POP
// end ;
27197: PPOPN 2
27199: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27200: LD_EXP 51
27204: PUSH
27205: LD_EXP 68
27209: AND
27210: IFFALSE 27321
27212: GO 27214
27214: DISABLE
27215: LD_INT 0
27217: PPUSH
27218: PPUSH
27219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27220: LD_ADDR_VAR 0 3
27224: PUSH
27225: LD_INT 22
27227: PUSH
27228: LD_OWVAR 2
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 25
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PPUSH
27251: CALL_OW 69
27255: ST_TO_ADDR
// if not tmp then
27256: LD_VAR 0 3
27260: NOT
27261: IFFALSE 27265
// exit ;
27263: GO 27321
// un := tmp [ rand ( 1 , tmp ) ] ;
27265: LD_ADDR_VAR 0 2
27269: PUSH
27270: LD_VAR 0 3
27274: PUSH
27275: LD_INT 1
27277: PPUSH
27278: LD_VAR 0 3
27282: PPUSH
27283: CALL_OW 12
27287: ARRAY
27288: ST_TO_ADDR
// if Crawls ( un ) then
27289: LD_VAR 0 2
27293: PPUSH
27294: CALL_OW 318
27298: IFFALSE 27309
// ComWalk ( un ) ;
27300: LD_VAR 0 2
27304: PPUSH
27305: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27309: LD_VAR 0 2
27313: PPUSH
27314: LD_INT 5
27316: PPUSH
27317: CALL_OW 336
// end ;
27321: PPOPN 3
27323: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27324: LD_EXP 51
27328: PUSH
27329: LD_EXP 69
27333: AND
27334: PUSH
27335: LD_OWVAR 67
27339: PUSH
27340: LD_INT 4
27342: LESS
27343: AND
27344: IFFALSE 27363
27346: GO 27348
27348: DISABLE
// begin Difficulty := Difficulty + 1 ;
27349: LD_ADDR_OWVAR 67
27353: PUSH
27354: LD_OWVAR 67
27358: PUSH
27359: LD_INT 1
27361: PLUS
27362: ST_TO_ADDR
// end ;
27363: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27364: LD_EXP 51
27368: PUSH
27369: LD_EXP 70
27373: AND
27374: IFFALSE 27477
27376: GO 27378
27378: DISABLE
27379: LD_INT 0
27381: PPUSH
// begin for i := 1 to 5 do
27382: LD_ADDR_VAR 0 1
27386: PUSH
27387: DOUBLE
27388: LD_INT 1
27390: DEC
27391: ST_TO_ADDR
27392: LD_INT 5
27394: PUSH
27395: FOR_TO
27396: IFFALSE 27475
// begin uc_nation := nation_nature ;
27398: LD_ADDR_OWVAR 21
27402: PUSH
27403: LD_INT 0
27405: ST_TO_ADDR
// uc_side := 0 ;
27406: LD_ADDR_OWVAR 20
27410: PUSH
27411: LD_INT 0
27413: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27414: LD_ADDR_OWVAR 29
27418: PUSH
27419: LD_INT 12
27421: PUSH
27422: LD_INT 12
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: ST_TO_ADDR
// hc_agressivity := 20 ;
27429: LD_ADDR_OWVAR 35
27433: PUSH
27434: LD_INT 20
27436: ST_TO_ADDR
// hc_class := class_tiger ;
27437: LD_ADDR_OWVAR 28
27441: PUSH
27442: LD_INT 14
27444: ST_TO_ADDR
// hc_gallery :=  ;
27445: LD_ADDR_OWVAR 33
27449: PUSH
27450: LD_STRING 
27452: ST_TO_ADDR
// hc_name :=  ;
27453: LD_ADDR_OWVAR 26
27457: PUSH
27458: LD_STRING 
27460: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27461: CALL_OW 44
27465: PPUSH
27466: LD_INT 0
27468: PPUSH
27469: CALL_OW 51
// end ;
27473: GO 27395
27475: POP
27476: POP
// end ;
27477: PPOPN 1
27479: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27480: LD_EXP 51
27484: PUSH
27485: LD_EXP 71
27489: AND
27490: IFFALSE 27499
27492: GO 27494
27494: DISABLE
// StreamSibBomb ;
27495: CALL 27500 0 0
27499: END
// export function StreamSibBomb ; var i , x , y ; begin
27500: LD_INT 0
27502: PPUSH
27503: PPUSH
27504: PPUSH
27505: PPUSH
// result := false ;
27506: LD_ADDR_VAR 0 1
27510: PUSH
27511: LD_INT 0
27513: ST_TO_ADDR
// for i := 1 to 16 do
27514: LD_ADDR_VAR 0 2
27518: PUSH
27519: DOUBLE
27520: LD_INT 1
27522: DEC
27523: ST_TO_ADDR
27524: LD_INT 16
27526: PUSH
27527: FOR_TO
27528: IFFALSE 27727
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27530: LD_ADDR_VAR 0 3
27534: PUSH
27535: LD_INT 10
27537: PUSH
27538: LD_INT 20
27540: PUSH
27541: LD_INT 30
27543: PUSH
27544: LD_INT 40
27546: PUSH
27547: LD_INT 50
27549: PUSH
27550: LD_INT 60
27552: PUSH
27553: LD_INT 70
27555: PUSH
27556: LD_INT 80
27558: PUSH
27559: LD_INT 90
27561: PUSH
27562: LD_INT 100
27564: PUSH
27565: LD_INT 110
27567: PUSH
27568: LD_INT 120
27570: PUSH
27571: LD_INT 130
27573: PUSH
27574: LD_INT 140
27576: PUSH
27577: LD_INT 150
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 1
27599: PPUSH
27600: LD_INT 15
27602: PPUSH
27603: CALL_OW 12
27607: ARRAY
27608: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27609: LD_ADDR_VAR 0 4
27613: PUSH
27614: LD_INT 10
27616: PUSH
27617: LD_INT 20
27619: PUSH
27620: LD_INT 30
27622: PUSH
27623: LD_INT 40
27625: PUSH
27626: LD_INT 50
27628: PUSH
27629: LD_INT 60
27631: PUSH
27632: LD_INT 70
27634: PUSH
27635: LD_INT 80
27637: PUSH
27638: LD_INT 90
27640: PUSH
27641: LD_INT 100
27643: PUSH
27644: LD_INT 110
27646: PUSH
27647: LD_INT 120
27649: PUSH
27650: LD_INT 130
27652: PUSH
27653: LD_INT 140
27655: PUSH
27656: LD_INT 150
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 1
27678: PPUSH
27679: LD_INT 15
27681: PPUSH
27682: CALL_OW 12
27686: ARRAY
27687: ST_TO_ADDR
// if ValidHex ( x , y ) then
27688: LD_VAR 0 3
27692: PPUSH
27693: LD_VAR 0 4
27697: PPUSH
27698: CALL_OW 488
27702: IFFALSE 27725
// begin result := [ x , y ] ;
27704: LD_ADDR_VAR 0 1
27708: PUSH
27709: LD_VAR 0 3
27713: PUSH
27714: LD_VAR 0 4
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: ST_TO_ADDR
// break ;
27723: GO 27727
// end ; end ;
27725: GO 27527
27727: POP
27728: POP
// if result then
27729: LD_VAR 0 1
27733: IFFALSE 27793
// begin ToLua ( playSibBomb() ) ;
27735: LD_STRING playSibBomb()
27737: PPUSH
27738: CALL_OW 559
// wait ( 0 0$14 ) ;
27742: LD_INT 490
27744: PPUSH
27745: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27749: LD_VAR 0 1
27753: PUSH
27754: LD_INT 1
27756: ARRAY
27757: PPUSH
27758: LD_VAR 0 1
27762: PUSH
27763: LD_INT 2
27765: ARRAY
27766: PPUSH
27767: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27771: LD_VAR 0 1
27775: PUSH
27776: LD_INT 1
27778: ARRAY
27779: PPUSH
27780: LD_VAR 0 1
27784: PUSH
27785: LD_INT 2
27787: ARRAY
27788: PPUSH
27789: CALL_OW 429
// end ; end ;
27793: LD_VAR 0 1
27797: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27798: LD_EXP 51
27802: PUSH
27803: LD_EXP 73
27807: AND
27808: IFFALSE 27820
27810: GO 27812
27812: DISABLE
// YouLost (  ) ;
27813: LD_STRING 
27815: PPUSH
27816: CALL_OW 104
27820: END
// every 0 0$1 trigger StreamModeActive and sFog do
27821: LD_EXP 51
27825: PUSH
27826: LD_EXP 72
27830: AND
27831: IFFALSE 27845
27833: GO 27835
27835: DISABLE
// FogOff ( your_side ) ;
27836: LD_OWVAR 2
27840: PPUSH
27841: CALL_OW 344
27845: END
// every 0 0$1 trigger StreamModeActive and sSun do
27846: LD_EXP 51
27850: PUSH
27851: LD_EXP 74
27855: AND
27856: IFFALSE 27884
27858: GO 27860
27860: DISABLE
// begin solar_recharge_percent := 0 ;
27861: LD_ADDR_OWVAR 79
27865: PUSH
27866: LD_INT 0
27868: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27869: LD_INT 10500
27871: PPUSH
27872: CALL_OW 67
// solar_recharge_percent := 100 ;
27876: LD_ADDR_OWVAR 79
27880: PUSH
27881: LD_INT 100
27883: ST_TO_ADDR
// end ;
27884: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27885: LD_EXP 51
27889: PUSH
27890: LD_EXP 75
27894: AND
27895: IFFALSE 28134
27897: GO 27899
27899: DISABLE
27900: LD_INT 0
27902: PPUSH
27903: PPUSH
27904: PPUSH
// begin tmp := [ ] ;
27905: LD_ADDR_VAR 0 3
27909: PUSH
27910: EMPTY
27911: ST_TO_ADDR
// for i := 1 to 6 do
27912: LD_ADDR_VAR 0 1
27916: PUSH
27917: DOUBLE
27918: LD_INT 1
27920: DEC
27921: ST_TO_ADDR
27922: LD_INT 6
27924: PUSH
27925: FOR_TO
27926: IFFALSE 28031
// begin uc_nation := nation_nature ;
27928: LD_ADDR_OWVAR 21
27932: PUSH
27933: LD_INT 0
27935: ST_TO_ADDR
// uc_side := 0 ;
27936: LD_ADDR_OWVAR 20
27940: PUSH
27941: LD_INT 0
27943: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27944: LD_ADDR_OWVAR 29
27948: PUSH
27949: LD_INT 12
27951: PUSH
27952: LD_INT 12
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: ST_TO_ADDR
// hc_agressivity := 20 ;
27959: LD_ADDR_OWVAR 35
27963: PUSH
27964: LD_INT 20
27966: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27967: LD_ADDR_OWVAR 28
27971: PUSH
27972: LD_INT 17
27974: ST_TO_ADDR
// hc_gallery :=  ;
27975: LD_ADDR_OWVAR 33
27979: PUSH
27980: LD_STRING 
27982: ST_TO_ADDR
// hc_name :=  ;
27983: LD_ADDR_OWVAR 26
27987: PUSH
27988: LD_STRING 
27990: ST_TO_ADDR
// un := CreateHuman ;
27991: LD_ADDR_VAR 0 2
27995: PUSH
27996: CALL_OW 44
28000: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28001: LD_VAR 0 2
28005: PPUSH
28006: LD_INT 1
28008: PPUSH
28009: CALL_OW 51
// tmp := tmp ^ un ;
28013: LD_ADDR_VAR 0 3
28017: PUSH
28018: LD_VAR 0 3
28022: PUSH
28023: LD_VAR 0 2
28027: ADD
28028: ST_TO_ADDR
// end ;
28029: GO 27925
28031: POP
28032: POP
// repeat wait ( 0 0$1 ) ;
28033: LD_INT 35
28035: PPUSH
28036: CALL_OW 67
// for un in tmp do
28040: LD_ADDR_VAR 0 2
28044: PUSH
28045: LD_VAR 0 3
28049: PUSH
28050: FOR_IN
28051: IFFALSE 28125
// begin if IsDead ( un ) then
28053: LD_VAR 0 2
28057: PPUSH
28058: CALL_OW 301
28062: IFFALSE 28082
// begin tmp := tmp diff un ;
28064: LD_ADDR_VAR 0 3
28068: PUSH
28069: LD_VAR 0 3
28073: PUSH
28074: LD_VAR 0 2
28078: DIFF
28079: ST_TO_ADDR
// continue ;
28080: GO 28050
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28082: LD_VAR 0 2
28086: PPUSH
28087: LD_INT 3
28089: PUSH
28090: LD_INT 22
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PPUSH
28104: CALL_OW 69
28108: PPUSH
28109: LD_VAR 0 2
28113: PPUSH
28114: CALL_OW 74
28118: PPUSH
28119: CALL_OW 115
// end ;
28123: GO 28050
28125: POP
28126: POP
// until not tmp ;
28127: LD_VAR 0 3
28131: NOT
28132: IFFALSE 28033
// end ;
28134: PPOPN 3
28136: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28137: LD_EXP 51
28141: PUSH
28142: LD_EXP 76
28146: AND
28147: IFFALSE 28201
28149: GO 28151
28151: DISABLE
// begin ToLua ( displayTroll(); ) ;
28152: LD_STRING displayTroll();
28154: PPUSH
28155: CALL_OW 559
// wait ( 3 3$00 ) ;
28159: LD_INT 6300
28161: PPUSH
28162: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28166: LD_STRING hideTroll();
28168: PPUSH
28169: CALL_OW 559
// wait ( 1 1$00 ) ;
28173: LD_INT 2100
28175: PPUSH
28176: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28180: LD_STRING displayTroll();
28182: PPUSH
28183: CALL_OW 559
// wait ( 1 1$00 ) ;
28187: LD_INT 2100
28189: PPUSH
28190: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28194: LD_STRING hideTroll();
28196: PPUSH
28197: CALL_OW 559
// end ;
28201: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28202: LD_EXP 51
28206: PUSH
28207: LD_EXP 77
28211: AND
28212: IFFALSE 28275
28214: GO 28216
28216: DISABLE
28217: LD_INT 0
28219: PPUSH
// begin p := 0 ;
28220: LD_ADDR_VAR 0 1
28224: PUSH
28225: LD_INT 0
28227: ST_TO_ADDR
// repeat game_speed := 1 ;
28228: LD_ADDR_OWVAR 65
28232: PUSH
28233: LD_INT 1
28235: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28236: LD_INT 35
28238: PPUSH
28239: CALL_OW 67
// p := p + 1 ;
28243: LD_ADDR_VAR 0 1
28247: PUSH
28248: LD_VAR 0 1
28252: PUSH
28253: LD_INT 1
28255: PLUS
28256: ST_TO_ADDR
// until p >= 60 ;
28257: LD_VAR 0 1
28261: PUSH
28262: LD_INT 60
28264: GREATEREQUAL
28265: IFFALSE 28228
// game_speed := 4 ;
28267: LD_ADDR_OWVAR 65
28271: PUSH
28272: LD_INT 4
28274: ST_TO_ADDR
// end ;
28275: PPOPN 1
28277: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28278: LD_EXP 51
28282: PUSH
28283: LD_EXP 78
28287: AND
28288: IFFALSE 28434
28290: GO 28292
28292: DISABLE
28293: LD_INT 0
28295: PPUSH
28296: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28297: LD_ADDR_VAR 0 1
28301: PUSH
28302: LD_INT 22
28304: PUSH
28305: LD_OWVAR 2
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 2
28316: PUSH
28317: LD_INT 30
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 30
28329: PUSH
28330: LD_INT 1
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: LIST
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PPUSH
28346: CALL_OW 69
28350: ST_TO_ADDR
// if not depot then
28351: LD_VAR 0 1
28355: NOT
28356: IFFALSE 28360
// exit ;
28358: GO 28434
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28360: LD_ADDR_VAR 0 2
28364: PUSH
28365: LD_VAR 0 1
28369: PUSH
28370: LD_INT 1
28372: PPUSH
28373: LD_VAR 0 1
28377: PPUSH
28378: CALL_OW 12
28382: ARRAY
28383: PPUSH
28384: CALL_OW 274
28388: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28389: LD_VAR 0 2
28393: PPUSH
28394: LD_INT 1
28396: PPUSH
28397: LD_INT 0
28399: PPUSH
28400: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28404: LD_VAR 0 2
28408: PPUSH
28409: LD_INT 2
28411: PPUSH
28412: LD_INT 0
28414: PPUSH
28415: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28419: LD_VAR 0 2
28423: PPUSH
28424: LD_INT 3
28426: PPUSH
28427: LD_INT 0
28429: PPUSH
28430: CALL_OW 277
// end ;
28434: PPOPN 2
28436: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28437: LD_EXP 51
28441: PUSH
28442: LD_EXP 79
28446: AND
28447: IFFALSE 28544
28449: GO 28451
28451: DISABLE
28452: LD_INT 0
28454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28455: LD_ADDR_VAR 0 1
28459: PUSH
28460: LD_INT 22
28462: PUSH
28463: LD_OWVAR 2
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 21
28474: PUSH
28475: LD_INT 1
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 3
28484: PUSH
28485: LD_INT 23
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: LIST
28503: PPUSH
28504: CALL_OW 69
28508: ST_TO_ADDR
// if not tmp then
28509: LD_VAR 0 1
28513: NOT
28514: IFFALSE 28518
// exit ;
28516: GO 28544
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28518: LD_VAR 0 1
28522: PUSH
28523: LD_INT 1
28525: PPUSH
28526: LD_VAR 0 1
28530: PPUSH
28531: CALL_OW 12
28535: ARRAY
28536: PPUSH
28537: LD_INT 200
28539: PPUSH
28540: CALL_OW 234
// end ;
28544: PPOPN 1
28546: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28547: LD_EXP 51
28551: PUSH
28552: LD_EXP 80
28556: AND
28557: IFFALSE 28636
28559: GO 28561
28561: DISABLE
28562: LD_INT 0
28564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28565: LD_ADDR_VAR 0 1
28569: PUSH
28570: LD_INT 22
28572: PUSH
28573: LD_OWVAR 2
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 21
28584: PUSH
28585: LD_INT 2
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PPUSH
28596: CALL_OW 69
28600: ST_TO_ADDR
// if not tmp then
28601: LD_VAR 0 1
28605: NOT
28606: IFFALSE 28610
// exit ;
28608: GO 28636
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28610: LD_VAR 0 1
28614: PUSH
28615: LD_INT 1
28617: PPUSH
28618: LD_VAR 0 1
28622: PPUSH
28623: CALL_OW 12
28627: ARRAY
28628: PPUSH
28629: LD_INT 60
28631: PPUSH
28632: CALL_OW 234
// end ;
28636: PPOPN 1
28638: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28639: LD_EXP 51
28643: PUSH
28644: LD_EXP 81
28648: AND
28649: IFFALSE 28748
28651: GO 28653
28653: DISABLE
28654: LD_INT 0
28656: PPUSH
28657: PPUSH
// begin enable ;
28658: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28659: LD_ADDR_VAR 0 1
28663: PUSH
28664: LD_INT 22
28666: PUSH
28667: LD_OWVAR 2
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 61
28678: PUSH
28679: EMPTY
28680: LIST
28681: PUSH
28682: LD_INT 33
28684: PUSH
28685: LD_INT 2
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: LIST
28696: PPUSH
28697: CALL_OW 69
28701: ST_TO_ADDR
// if not tmp then
28702: LD_VAR 0 1
28706: NOT
28707: IFFALSE 28711
// exit ;
28709: GO 28748
// for i in tmp do
28711: LD_ADDR_VAR 0 2
28715: PUSH
28716: LD_VAR 0 1
28720: PUSH
28721: FOR_IN
28722: IFFALSE 28746
// if IsControledBy ( i ) then
28724: LD_VAR 0 2
28728: PPUSH
28729: CALL_OW 312
28733: IFFALSE 28744
// ComUnlink ( i ) ;
28735: LD_VAR 0 2
28739: PPUSH
28740: CALL_OW 136
28744: GO 28721
28746: POP
28747: POP
// end ;
28748: PPOPN 2
28750: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28751: LD_EXP 51
28755: PUSH
28756: LD_EXP 82
28760: AND
28761: IFFALSE 28901
28763: GO 28765
28765: DISABLE
28766: LD_INT 0
28768: PPUSH
28769: PPUSH
// begin ToLua ( displayPowell(); ) ;
28770: LD_STRING displayPowell();
28772: PPUSH
28773: CALL_OW 559
// uc_side := 0 ;
28777: LD_ADDR_OWVAR 20
28781: PUSH
28782: LD_INT 0
28784: ST_TO_ADDR
// uc_nation := 2 ;
28785: LD_ADDR_OWVAR 21
28789: PUSH
28790: LD_INT 2
28792: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28793: LD_ADDR_OWVAR 37
28797: PUSH
28798: LD_INT 14
28800: ST_TO_ADDR
// vc_engine := engine_siberite ;
28801: LD_ADDR_OWVAR 39
28805: PUSH
28806: LD_INT 3
28808: ST_TO_ADDR
// vc_control := control_apeman ;
28809: LD_ADDR_OWVAR 38
28813: PUSH
28814: LD_INT 5
28816: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28817: LD_ADDR_OWVAR 40
28821: PUSH
28822: LD_INT 29
28824: ST_TO_ADDR
// un := CreateVehicle ;
28825: LD_ADDR_VAR 0 2
28829: PUSH
28830: CALL_OW 45
28834: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28835: LD_VAR 0 2
28839: PPUSH
28840: LD_INT 1
28842: PPUSH
28843: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28847: LD_INT 35
28849: PPUSH
28850: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28854: LD_VAR 0 2
28858: PPUSH
28859: LD_INT 22
28861: PUSH
28862: LD_OWVAR 2
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PPUSH
28871: CALL_OW 69
28875: PPUSH
28876: LD_VAR 0 2
28880: PPUSH
28881: CALL_OW 74
28885: PPUSH
28886: CALL_OW 115
// until IsDead ( un ) ;
28890: LD_VAR 0 2
28894: PPUSH
28895: CALL_OW 301
28899: IFFALSE 28847
// end ;
28901: PPOPN 2
28903: END
// every 0 0$1 trigger StreamModeActive and sStu do
28904: LD_EXP 51
28908: PUSH
28909: LD_EXP 90
28913: AND
28914: IFFALSE 28930
28916: GO 28918
28918: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28919: LD_STRING displayStucuk();
28921: PPUSH
28922: CALL_OW 559
// ResetFog ;
28926: CALL_OW 335
// end ;
28930: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28931: LD_EXP 51
28935: PUSH
28936: LD_EXP 83
28940: AND
28941: IFFALSE 29082
28943: GO 28945
28945: DISABLE
28946: LD_INT 0
28948: PPUSH
28949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28950: LD_ADDR_VAR 0 2
28954: PUSH
28955: LD_INT 22
28957: PUSH
28958: LD_OWVAR 2
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 21
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PPUSH
28981: CALL_OW 69
28985: ST_TO_ADDR
// if not tmp then
28986: LD_VAR 0 2
28990: NOT
28991: IFFALSE 28995
// exit ;
28993: GO 29082
// un := tmp [ rand ( 1 , tmp ) ] ;
28995: LD_ADDR_VAR 0 1
28999: PUSH
29000: LD_VAR 0 2
29004: PUSH
29005: LD_INT 1
29007: PPUSH
29008: LD_VAR 0 2
29012: PPUSH
29013: CALL_OW 12
29017: ARRAY
29018: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29019: LD_VAR 0 1
29023: PPUSH
29024: LD_INT 0
29026: PPUSH
29027: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29031: LD_VAR 0 1
29035: PPUSH
29036: LD_OWVAR 3
29040: PUSH
29041: LD_VAR 0 1
29045: DIFF
29046: PPUSH
29047: LD_VAR 0 1
29051: PPUSH
29052: CALL_OW 74
29056: PPUSH
29057: CALL_OW 115
// wait ( 0 0$20 ) ;
29061: LD_INT 700
29063: PPUSH
29064: CALL_OW 67
// SetSide ( un , your_side ) ;
29068: LD_VAR 0 1
29072: PPUSH
29073: LD_OWVAR 2
29077: PPUSH
29078: CALL_OW 235
// end ;
29082: PPOPN 2
29084: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29085: LD_EXP 51
29089: PUSH
29090: LD_EXP 84
29094: AND
29095: IFFALSE 29201
29097: GO 29099
29099: DISABLE
29100: LD_INT 0
29102: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29103: LD_ADDR_VAR 0 1
29107: PUSH
29108: LD_INT 22
29110: PUSH
29111: LD_OWVAR 2
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 2
29122: PUSH
29123: LD_INT 30
29125: PUSH
29126: LD_INT 0
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 30
29135: PUSH
29136: LD_INT 1
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: LIST
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PPUSH
29152: CALL_OW 69
29156: ST_TO_ADDR
// if not depot then
29157: LD_VAR 0 1
29161: NOT
29162: IFFALSE 29166
// exit ;
29164: GO 29201
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29166: LD_VAR 0 1
29170: PUSH
29171: LD_INT 1
29173: ARRAY
29174: PPUSH
29175: CALL_OW 250
29179: PPUSH
29180: LD_VAR 0 1
29184: PUSH
29185: LD_INT 1
29187: ARRAY
29188: PPUSH
29189: CALL_OW 251
29193: PPUSH
29194: LD_INT 70
29196: PPUSH
29197: CALL_OW 495
// end ;
29201: PPOPN 1
29203: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29204: LD_EXP 51
29208: PUSH
29209: LD_EXP 85
29213: AND
29214: IFFALSE 29425
29216: GO 29218
29218: DISABLE
29219: LD_INT 0
29221: PPUSH
29222: PPUSH
29223: PPUSH
29224: PPUSH
29225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29226: LD_ADDR_VAR 0 5
29230: PUSH
29231: LD_INT 22
29233: PUSH
29234: LD_OWVAR 2
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 21
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PPUSH
29257: CALL_OW 69
29261: ST_TO_ADDR
// if not tmp then
29262: LD_VAR 0 5
29266: NOT
29267: IFFALSE 29271
// exit ;
29269: GO 29425
// for i in tmp do
29271: LD_ADDR_VAR 0 1
29275: PUSH
29276: LD_VAR 0 5
29280: PUSH
29281: FOR_IN
29282: IFFALSE 29423
// begin d := rand ( 0 , 5 ) ;
29284: LD_ADDR_VAR 0 4
29288: PUSH
29289: LD_INT 0
29291: PPUSH
29292: LD_INT 5
29294: PPUSH
29295: CALL_OW 12
29299: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29300: LD_ADDR_VAR 0 2
29304: PUSH
29305: LD_VAR 0 1
29309: PPUSH
29310: CALL_OW 250
29314: PPUSH
29315: LD_VAR 0 4
29319: PPUSH
29320: LD_INT 3
29322: PPUSH
29323: LD_INT 12
29325: PPUSH
29326: CALL_OW 12
29330: PPUSH
29331: CALL_OW 272
29335: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29336: LD_ADDR_VAR 0 3
29340: PUSH
29341: LD_VAR 0 1
29345: PPUSH
29346: CALL_OW 251
29350: PPUSH
29351: LD_VAR 0 4
29355: PPUSH
29356: LD_INT 3
29358: PPUSH
29359: LD_INT 12
29361: PPUSH
29362: CALL_OW 12
29366: PPUSH
29367: CALL_OW 273
29371: ST_TO_ADDR
// if ValidHex ( x , y ) then
29372: LD_VAR 0 2
29376: PPUSH
29377: LD_VAR 0 3
29381: PPUSH
29382: CALL_OW 488
29386: IFFALSE 29421
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29388: LD_VAR 0 1
29392: PPUSH
29393: LD_VAR 0 2
29397: PPUSH
29398: LD_VAR 0 3
29402: PPUSH
29403: LD_INT 3
29405: PPUSH
29406: LD_INT 6
29408: PPUSH
29409: CALL_OW 12
29413: PPUSH
29414: LD_INT 1
29416: PPUSH
29417: CALL_OW 483
// end ;
29421: GO 29281
29423: POP
29424: POP
// end ;
29425: PPOPN 5
29427: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29428: LD_EXP 51
29432: PUSH
29433: LD_EXP 86
29437: AND
29438: IFFALSE 29532
29440: GO 29442
29442: DISABLE
29443: LD_INT 0
29445: PPUSH
29446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29447: LD_ADDR_VAR 0 2
29451: PUSH
29452: LD_INT 22
29454: PUSH
29455: LD_OWVAR 2
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 32
29466: PUSH
29467: LD_INT 1
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 21
29476: PUSH
29477: LD_INT 2
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: LIST
29488: PPUSH
29489: CALL_OW 69
29493: ST_TO_ADDR
// if not tmp then
29494: LD_VAR 0 2
29498: NOT
29499: IFFALSE 29503
// exit ;
29501: GO 29532
// for i in tmp do
29503: LD_ADDR_VAR 0 1
29507: PUSH
29508: LD_VAR 0 2
29512: PUSH
29513: FOR_IN
29514: IFFALSE 29530
// SetFuel ( i , 0 ) ;
29516: LD_VAR 0 1
29520: PPUSH
29521: LD_INT 0
29523: PPUSH
29524: CALL_OW 240
29528: GO 29513
29530: POP
29531: POP
// end ;
29532: PPOPN 2
29534: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29535: LD_EXP 51
29539: PUSH
29540: LD_EXP 87
29544: AND
29545: IFFALSE 29611
29547: GO 29549
29549: DISABLE
29550: LD_INT 0
29552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29553: LD_ADDR_VAR 0 1
29557: PUSH
29558: LD_INT 22
29560: PUSH
29561: LD_OWVAR 2
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 30
29572: PUSH
29573: LD_INT 29
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PPUSH
29584: CALL_OW 69
29588: ST_TO_ADDR
// if not tmp then
29589: LD_VAR 0 1
29593: NOT
29594: IFFALSE 29598
// exit ;
29596: GO 29611
// DestroyUnit ( tmp [ 1 ] ) ;
29598: LD_VAR 0 1
29602: PUSH
29603: LD_INT 1
29605: ARRAY
29606: PPUSH
29607: CALL_OW 65
// end ;
29611: PPOPN 1
29613: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29614: LD_EXP 51
29618: PUSH
29619: LD_EXP 89
29623: AND
29624: IFFALSE 29753
29626: GO 29628
29628: DISABLE
29629: LD_INT 0
29631: PPUSH
// begin uc_side := 0 ;
29632: LD_ADDR_OWVAR 20
29636: PUSH
29637: LD_INT 0
29639: ST_TO_ADDR
// uc_nation := nation_arabian ;
29640: LD_ADDR_OWVAR 21
29644: PUSH
29645: LD_INT 2
29647: ST_TO_ADDR
// hc_gallery :=  ;
29648: LD_ADDR_OWVAR 33
29652: PUSH
29653: LD_STRING 
29655: ST_TO_ADDR
// hc_name :=  ;
29656: LD_ADDR_OWVAR 26
29660: PUSH
29661: LD_STRING 
29663: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29664: LD_INT 1
29666: PPUSH
29667: LD_INT 11
29669: PPUSH
29670: LD_INT 10
29672: PPUSH
29673: CALL_OW 380
// un := CreateHuman ;
29677: LD_ADDR_VAR 0 1
29681: PUSH
29682: CALL_OW 44
29686: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29687: LD_VAR 0 1
29691: PPUSH
29692: LD_INT 1
29694: PPUSH
29695: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29699: LD_INT 35
29701: PPUSH
29702: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29706: LD_VAR 0 1
29710: PPUSH
29711: LD_INT 22
29713: PUSH
29714: LD_OWVAR 2
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PPUSH
29723: CALL_OW 69
29727: PPUSH
29728: LD_VAR 0 1
29732: PPUSH
29733: CALL_OW 74
29737: PPUSH
29738: CALL_OW 115
// until IsDead ( un ) ;
29742: LD_VAR 0 1
29746: PPUSH
29747: CALL_OW 301
29751: IFFALSE 29699
// end ;
29753: PPOPN 1
29755: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29756: LD_EXP 51
29760: PUSH
29761: LD_EXP 91
29765: AND
29766: IFFALSE 29778
29768: GO 29770
29770: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29771: LD_STRING earthquake(getX(game), 0, 32)
29773: PPUSH
29774: CALL_OW 559
29778: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29779: LD_EXP 51
29783: PUSH
29784: LD_EXP 92
29788: AND
29789: IFFALSE 29880
29791: GO 29793
29793: DISABLE
29794: LD_INT 0
29796: PPUSH
// begin enable ;
29797: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29798: LD_ADDR_VAR 0 1
29802: PUSH
29803: LD_INT 22
29805: PUSH
29806: LD_OWVAR 2
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 21
29817: PUSH
29818: LD_INT 2
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 33
29827: PUSH
29828: LD_INT 3
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: LIST
29839: PPUSH
29840: CALL_OW 69
29844: ST_TO_ADDR
// if not tmp then
29845: LD_VAR 0 1
29849: NOT
29850: IFFALSE 29854
// exit ;
29852: GO 29880
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29854: LD_VAR 0 1
29858: PUSH
29859: LD_INT 1
29861: PPUSH
29862: LD_VAR 0 1
29866: PPUSH
29867: CALL_OW 12
29871: ARRAY
29872: PPUSH
29873: LD_INT 1
29875: PPUSH
29876: CALL_OW 234
// end ;
29880: PPOPN 1
29882: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29883: LD_EXP 51
29887: PUSH
29888: LD_EXP 93
29892: AND
29893: IFFALSE 30034
29895: GO 29897
29897: DISABLE
29898: LD_INT 0
29900: PPUSH
29901: PPUSH
29902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29903: LD_ADDR_VAR 0 3
29907: PUSH
29908: LD_INT 22
29910: PUSH
29911: LD_OWVAR 2
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 25
29922: PUSH
29923: LD_INT 1
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PPUSH
29934: CALL_OW 69
29938: ST_TO_ADDR
// if not tmp then
29939: LD_VAR 0 3
29943: NOT
29944: IFFALSE 29948
// exit ;
29946: GO 30034
// un := tmp [ rand ( 1 , tmp ) ] ;
29948: LD_ADDR_VAR 0 2
29952: PUSH
29953: LD_VAR 0 3
29957: PUSH
29958: LD_INT 1
29960: PPUSH
29961: LD_VAR 0 3
29965: PPUSH
29966: CALL_OW 12
29970: ARRAY
29971: ST_TO_ADDR
// if Crawls ( un ) then
29972: LD_VAR 0 2
29976: PPUSH
29977: CALL_OW 318
29981: IFFALSE 29992
// ComWalk ( un ) ;
29983: LD_VAR 0 2
29987: PPUSH
29988: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29992: LD_VAR 0 2
29996: PPUSH
29997: LD_INT 9
29999: PPUSH
30000: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30004: LD_INT 28
30006: PPUSH
30007: LD_OWVAR 2
30011: PPUSH
30012: LD_INT 2
30014: PPUSH
30015: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30019: LD_INT 29
30021: PPUSH
30022: LD_OWVAR 2
30026: PPUSH
30027: LD_INT 2
30029: PPUSH
30030: CALL_OW 322
// end ;
30034: PPOPN 3
30036: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30037: LD_EXP 51
30041: PUSH
30042: LD_EXP 94
30046: AND
30047: IFFALSE 30158
30049: GO 30051
30051: DISABLE
30052: LD_INT 0
30054: PPUSH
30055: PPUSH
30056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30057: LD_ADDR_VAR 0 3
30061: PUSH
30062: LD_INT 22
30064: PUSH
30065: LD_OWVAR 2
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 25
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PPUSH
30088: CALL_OW 69
30092: ST_TO_ADDR
// if not tmp then
30093: LD_VAR 0 3
30097: NOT
30098: IFFALSE 30102
// exit ;
30100: GO 30158
// un := tmp [ rand ( 1 , tmp ) ] ;
30102: LD_ADDR_VAR 0 2
30106: PUSH
30107: LD_VAR 0 3
30111: PUSH
30112: LD_INT 1
30114: PPUSH
30115: LD_VAR 0 3
30119: PPUSH
30120: CALL_OW 12
30124: ARRAY
30125: ST_TO_ADDR
// if Crawls ( un ) then
30126: LD_VAR 0 2
30130: PPUSH
30131: CALL_OW 318
30135: IFFALSE 30146
// ComWalk ( un ) ;
30137: LD_VAR 0 2
30141: PPUSH
30142: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30146: LD_VAR 0 2
30150: PPUSH
30151: LD_INT 8
30153: PPUSH
30154: CALL_OW 336
// end ;
30158: PPOPN 3
30160: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30161: LD_EXP 51
30165: PUSH
30166: LD_EXP 95
30170: AND
30171: IFFALSE 30315
30173: GO 30175
30175: DISABLE
30176: LD_INT 0
30178: PPUSH
30179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30180: LD_ADDR_VAR 0 2
30184: PUSH
30185: LD_INT 22
30187: PUSH
30188: LD_OWVAR 2
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 21
30199: PUSH
30200: LD_INT 2
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 2
30209: PUSH
30210: LD_INT 34
30212: PUSH
30213: LD_INT 12
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 34
30222: PUSH
30223: LD_INT 51
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 34
30232: PUSH
30233: LD_INT 32
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: LIST
30250: PPUSH
30251: CALL_OW 69
30255: ST_TO_ADDR
// if not tmp then
30256: LD_VAR 0 2
30260: NOT
30261: IFFALSE 30265
// exit ;
30263: GO 30315
// for i in tmp do
30265: LD_ADDR_VAR 0 1
30269: PUSH
30270: LD_VAR 0 2
30274: PUSH
30275: FOR_IN
30276: IFFALSE 30313
// if GetCargo ( i , mat_artifact ) = 0 then
30278: LD_VAR 0 1
30282: PPUSH
30283: LD_INT 4
30285: PPUSH
30286: CALL_OW 289
30290: PUSH
30291: LD_INT 0
30293: EQUAL
30294: IFFALSE 30311
// SetCargo ( i , mat_siberit , 100 ) ;
30296: LD_VAR 0 1
30300: PPUSH
30301: LD_INT 3
30303: PPUSH
30304: LD_INT 100
30306: PPUSH
30307: CALL_OW 290
30311: GO 30275
30313: POP
30314: POP
// end ;
30315: PPOPN 2
30317: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30318: LD_EXP 51
30322: PUSH
30323: LD_EXP 96
30327: AND
30328: IFFALSE 30511
30330: GO 30332
30332: DISABLE
30333: LD_INT 0
30335: PPUSH
30336: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30337: LD_ADDR_VAR 0 2
30341: PUSH
30342: LD_INT 22
30344: PUSH
30345: LD_OWVAR 2
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PPUSH
30354: CALL_OW 69
30358: ST_TO_ADDR
// if not tmp then
30359: LD_VAR 0 2
30363: NOT
30364: IFFALSE 30368
// exit ;
30366: GO 30511
// for i := 1 to 2 do
30368: LD_ADDR_VAR 0 1
30372: PUSH
30373: DOUBLE
30374: LD_INT 1
30376: DEC
30377: ST_TO_ADDR
30378: LD_INT 2
30380: PUSH
30381: FOR_TO
30382: IFFALSE 30509
// begin uc_side := your_side ;
30384: LD_ADDR_OWVAR 20
30388: PUSH
30389: LD_OWVAR 2
30393: ST_TO_ADDR
// uc_nation := nation_american ;
30394: LD_ADDR_OWVAR 21
30398: PUSH
30399: LD_INT 1
30401: ST_TO_ADDR
// vc_chassis := us_morphling ;
30402: LD_ADDR_OWVAR 37
30406: PUSH
30407: LD_INT 5
30409: ST_TO_ADDR
// vc_engine := engine_siberite ;
30410: LD_ADDR_OWVAR 39
30414: PUSH
30415: LD_INT 3
30417: ST_TO_ADDR
// vc_control := control_computer ;
30418: LD_ADDR_OWVAR 38
30422: PUSH
30423: LD_INT 3
30425: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30426: LD_ADDR_OWVAR 40
30430: PUSH
30431: LD_INT 10
30433: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30434: LD_VAR 0 2
30438: PUSH
30439: LD_INT 1
30441: ARRAY
30442: PPUSH
30443: CALL_OW 310
30447: NOT
30448: IFFALSE 30495
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30450: CALL_OW 45
30454: PPUSH
30455: LD_VAR 0 2
30459: PUSH
30460: LD_INT 1
30462: ARRAY
30463: PPUSH
30464: CALL_OW 250
30468: PPUSH
30469: LD_VAR 0 2
30473: PUSH
30474: LD_INT 1
30476: ARRAY
30477: PPUSH
30478: CALL_OW 251
30482: PPUSH
30483: LD_INT 12
30485: PPUSH
30486: LD_INT 1
30488: PPUSH
30489: CALL_OW 50
30493: GO 30507
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30495: CALL_OW 45
30499: PPUSH
30500: LD_INT 1
30502: PPUSH
30503: CALL_OW 51
// end ;
30507: GO 30381
30509: POP
30510: POP
// end ;
30511: PPOPN 2
30513: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30514: LD_EXP 51
30518: PUSH
30519: LD_EXP 97
30523: AND
30524: IFFALSE 30746
30526: GO 30528
30528: DISABLE
30529: LD_INT 0
30531: PPUSH
30532: PPUSH
30533: PPUSH
30534: PPUSH
30535: PPUSH
30536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30537: LD_ADDR_VAR 0 6
30541: PUSH
30542: LD_INT 22
30544: PUSH
30545: LD_OWVAR 2
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 21
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 3
30566: PUSH
30567: LD_INT 23
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: PPUSH
30586: CALL_OW 69
30590: ST_TO_ADDR
// if not tmp then
30591: LD_VAR 0 6
30595: NOT
30596: IFFALSE 30600
// exit ;
30598: GO 30746
// s1 := rand ( 1 , 4 ) ;
30600: LD_ADDR_VAR 0 2
30604: PUSH
30605: LD_INT 1
30607: PPUSH
30608: LD_INT 4
30610: PPUSH
30611: CALL_OW 12
30615: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30616: LD_ADDR_VAR 0 4
30620: PUSH
30621: LD_VAR 0 6
30625: PUSH
30626: LD_INT 1
30628: ARRAY
30629: PPUSH
30630: LD_VAR 0 2
30634: PPUSH
30635: CALL_OW 259
30639: ST_TO_ADDR
// if s1 = 1 then
30640: LD_VAR 0 2
30644: PUSH
30645: LD_INT 1
30647: EQUAL
30648: IFFALSE 30668
// s2 := rand ( 2 , 4 ) else
30650: LD_ADDR_VAR 0 3
30654: PUSH
30655: LD_INT 2
30657: PPUSH
30658: LD_INT 4
30660: PPUSH
30661: CALL_OW 12
30665: ST_TO_ADDR
30666: GO 30676
// s2 := 1 ;
30668: LD_ADDR_VAR 0 3
30672: PUSH
30673: LD_INT 1
30675: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30676: LD_ADDR_VAR 0 5
30680: PUSH
30681: LD_VAR 0 6
30685: PUSH
30686: LD_INT 1
30688: ARRAY
30689: PPUSH
30690: LD_VAR 0 3
30694: PPUSH
30695: CALL_OW 259
30699: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30700: LD_VAR 0 6
30704: PUSH
30705: LD_INT 1
30707: ARRAY
30708: PPUSH
30709: LD_VAR 0 2
30713: PPUSH
30714: LD_VAR 0 5
30718: PPUSH
30719: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30723: LD_VAR 0 6
30727: PUSH
30728: LD_INT 1
30730: ARRAY
30731: PPUSH
30732: LD_VAR 0 3
30736: PPUSH
30737: LD_VAR 0 4
30741: PPUSH
30742: CALL_OW 237
// end ;
30746: PPOPN 6
30748: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30749: LD_EXP 51
30753: PUSH
30754: LD_EXP 98
30758: AND
30759: IFFALSE 30838
30761: GO 30763
30763: DISABLE
30764: LD_INT 0
30766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30767: LD_ADDR_VAR 0 1
30771: PUSH
30772: LD_INT 22
30774: PUSH
30775: LD_OWVAR 2
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 30
30786: PUSH
30787: LD_INT 3
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PPUSH
30798: CALL_OW 69
30802: ST_TO_ADDR
// if not tmp then
30803: LD_VAR 0 1
30807: NOT
30808: IFFALSE 30812
// exit ;
30810: GO 30838
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30812: LD_VAR 0 1
30816: PUSH
30817: LD_INT 1
30819: PPUSH
30820: LD_VAR 0 1
30824: PPUSH
30825: CALL_OW 12
30829: ARRAY
30830: PPUSH
30831: LD_INT 1
30833: PPUSH
30834: CALL_OW 234
// end ;
30838: PPOPN 1
30840: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30841: LD_EXP 51
30845: PUSH
30846: LD_EXP 99
30850: AND
30851: IFFALSE 30963
30853: GO 30855
30855: DISABLE
30856: LD_INT 0
30858: PPUSH
30859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30860: LD_ADDR_VAR 0 2
30864: PUSH
30865: LD_INT 22
30867: PUSH
30868: LD_OWVAR 2
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 2
30879: PUSH
30880: LD_INT 30
30882: PUSH
30883: LD_INT 27
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 30
30892: PUSH
30893: LD_INT 26
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 30
30902: PUSH
30903: LD_INT 28
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PPUSH
30920: CALL_OW 69
30924: ST_TO_ADDR
// if not tmp then
30925: LD_VAR 0 2
30929: NOT
30930: IFFALSE 30934
// exit ;
30932: GO 30963
// for i in tmp do
30934: LD_ADDR_VAR 0 1
30938: PUSH
30939: LD_VAR 0 2
30943: PUSH
30944: FOR_IN
30945: IFFALSE 30961
// SetLives ( i , 1 ) ;
30947: LD_VAR 0 1
30951: PPUSH
30952: LD_INT 1
30954: PPUSH
30955: CALL_OW 234
30959: GO 30944
30961: POP
30962: POP
// end ;
30963: PPOPN 2
30965: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30966: LD_EXP 51
30970: PUSH
30971: LD_EXP 100
30975: AND
30976: IFFALSE 31263
30978: GO 30980
30980: DISABLE
30981: LD_INT 0
30983: PPUSH
30984: PPUSH
30985: PPUSH
// begin i := rand ( 1 , 7 ) ;
30986: LD_ADDR_VAR 0 1
30990: PUSH
30991: LD_INT 1
30993: PPUSH
30994: LD_INT 7
30996: PPUSH
30997: CALL_OW 12
31001: ST_TO_ADDR
// case i of 1 :
31002: LD_VAR 0 1
31006: PUSH
31007: LD_INT 1
31009: DOUBLE
31010: EQUAL
31011: IFTRUE 31015
31013: GO 31025
31015: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31016: LD_STRING earthquake(getX(game), 0, 32)
31018: PPUSH
31019: CALL_OW 559
31023: GO 31263
31025: LD_INT 2
31027: DOUBLE
31028: EQUAL
31029: IFTRUE 31033
31031: GO 31047
31033: POP
// begin ToLua ( displayStucuk(); ) ;
31034: LD_STRING displayStucuk();
31036: PPUSH
31037: CALL_OW 559
// ResetFog ;
31041: CALL_OW 335
// end ; 3 :
31045: GO 31263
31047: LD_INT 3
31049: DOUBLE
31050: EQUAL
31051: IFTRUE 31055
31053: GO 31159
31055: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31056: LD_ADDR_VAR 0 2
31060: PUSH
31061: LD_INT 22
31063: PUSH
31064: LD_OWVAR 2
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 25
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PPUSH
31087: CALL_OW 69
31091: ST_TO_ADDR
// if not tmp then
31092: LD_VAR 0 2
31096: NOT
31097: IFFALSE 31101
// exit ;
31099: GO 31263
// un := tmp [ rand ( 1 , tmp ) ] ;
31101: LD_ADDR_VAR 0 3
31105: PUSH
31106: LD_VAR 0 2
31110: PUSH
31111: LD_INT 1
31113: PPUSH
31114: LD_VAR 0 2
31118: PPUSH
31119: CALL_OW 12
31123: ARRAY
31124: ST_TO_ADDR
// if Crawls ( un ) then
31125: LD_VAR 0 3
31129: PPUSH
31130: CALL_OW 318
31134: IFFALSE 31145
// ComWalk ( un ) ;
31136: LD_VAR 0 3
31140: PPUSH
31141: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31145: LD_VAR 0 3
31149: PPUSH
31150: LD_INT 8
31152: PPUSH
31153: CALL_OW 336
// end ; 4 :
31157: GO 31263
31159: LD_INT 4
31161: DOUBLE
31162: EQUAL
31163: IFTRUE 31167
31165: GO 31241
31167: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31168: LD_ADDR_VAR 0 2
31172: PUSH
31173: LD_INT 22
31175: PUSH
31176: LD_OWVAR 2
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 30
31187: PUSH
31188: LD_INT 29
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PPUSH
31199: CALL_OW 69
31203: ST_TO_ADDR
// if not tmp then
31204: LD_VAR 0 2
31208: NOT
31209: IFFALSE 31213
// exit ;
31211: GO 31263
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31213: LD_VAR 0 2
31217: PUSH
31218: LD_INT 1
31220: ARRAY
31221: PPUSH
31222: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31226: LD_VAR 0 2
31230: PUSH
31231: LD_INT 1
31233: ARRAY
31234: PPUSH
31235: CALL_OW 65
// end ; 5 .. 7 :
31239: GO 31263
31241: LD_INT 5
31243: DOUBLE
31244: GREATEREQUAL
31245: IFFALSE 31253
31247: LD_INT 7
31249: DOUBLE
31250: LESSEQUAL
31251: IFTRUE 31255
31253: GO 31262
31255: POP
// StreamSibBomb ; end ;
31256: CALL 27500 0 0
31260: GO 31263
31262: POP
// end ;
31263: PPOPN 3
31265: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31266: LD_EXP 51
31270: PUSH
31271: LD_EXP 101
31275: AND
31276: IFFALSE 31432
31278: GO 31280
31280: DISABLE
31281: LD_INT 0
31283: PPUSH
31284: PPUSH
31285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31286: LD_ADDR_VAR 0 2
31290: PUSH
31291: LD_INT 81
31293: PUSH
31294: LD_OWVAR 2
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 2
31305: PUSH
31306: LD_INT 21
31308: PUSH
31309: LD_INT 1
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 21
31318: PUSH
31319: LD_INT 2
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: LIST
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PPUSH
31335: CALL_OW 69
31339: ST_TO_ADDR
// if not tmp then
31340: LD_VAR 0 2
31344: NOT
31345: IFFALSE 31349
// exit ;
31347: GO 31432
// p := 0 ;
31349: LD_ADDR_VAR 0 3
31353: PUSH
31354: LD_INT 0
31356: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31357: LD_INT 35
31359: PPUSH
31360: CALL_OW 67
// p := p + 1 ;
31364: LD_ADDR_VAR 0 3
31368: PUSH
31369: LD_VAR 0 3
31373: PUSH
31374: LD_INT 1
31376: PLUS
31377: ST_TO_ADDR
// for i in tmp do
31378: LD_ADDR_VAR 0 1
31382: PUSH
31383: LD_VAR 0 2
31387: PUSH
31388: FOR_IN
31389: IFFALSE 31420
// if GetLives ( i ) < 1000 then
31391: LD_VAR 0 1
31395: PPUSH
31396: CALL_OW 256
31400: PUSH
31401: LD_INT 1000
31403: LESS
31404: IFFALSE 31418
// SetLives ( i , 1000 ) ;
31406: LD_VAR 0 1
31410: PPUSH
31411: LD_INT 1000
31413: PPUSH
31414: CALL_OW 234
31418: GO 31388
31420: POP
31421: POP
// until p > 20 ;
31422: LD_VAR 0 3
31426: PUSH
31427: LD_INT 20
31429: GREATER
31430: IFFALSE 31357
// end ;
31432: PPOPN 3
31434: END
// every 0 0$1 trigger StreamModeActive and sTime do
31435: LD_EXP 51
31439: PUSH
31440: LD_EXP 102
31444: AND
31445: IFFALSE 31480
31447: GO 31449
31449: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31450: LD_INT 28
31452: PPUSH
31453: LD_OWVAR 2
31457: PPUSH
31458: LD_INT 2
31460: PPUSH
31461: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31465: LD_INT 30
31467: PPUSH
31468: LD_OWVAR 2
31472: PPUSH
31473: LD_INT 2
31475: PPUSH
31476: CALL_OW 322
// end ;
31480: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31481: LD_EXP 51
31485: PUSH
31486: LD_EXP 103
31490: AND
31491: IFFALSE 31612
31493: GO 31495
31495: DISABLE
31496: LD_INT 0
31498: PPUSH
31499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31500: LD_ADDR_VAR 0 2
31504: PUSH
31505: LD_INT 22
31507: PUSH
31508: LD_OWVAR 2
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 21
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 3
31529: PUSH
31530: LD_INT 23
31532: PUSH
31533: LD_INT 0
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: LIST
31548: PPUSH
31549: CALL_OW 69
31553: ST_TO_ADDR
// if not tmp then
31554: LD_VAR 0 2
31558: NOT
31559: IFFALSE 31563
// exit ;
31561: GO 31612
// for i in tmp do
31563: LD_ADDR_VAR 0 1
31567: PUSH
31568: LD_VAR 0 2
31572: PUSH
31573: FOR_IN
31574: IFFALSE 31610
// begin if Crawls ( i ) then
31576: LD_VAR 0 1
31580: PPUSH
31581: CALL_OW 318
31585: IFFALSE 31596
// ComWalk ( i ) ;
31587: LD_VAR 0 1
31591: PPUSH
31592: CALL_OW 138
// SetClass ( i , 2 ) ;
31596: LD_VAR 0 1
31600: PPUSH
31601: LD_INT 2
31603: PPUSH
31604: CALL_OW 336
// end ;
31608: GO 31573
31610: POP
31611: POP
// end ;
31612: PPOPN 2
31614: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31615: LD_EXP 51
31619: PUSH
31620: LD_EXP 104
31624: AND
31625: IFFALSE 31913
31627: GO 31629
31629: DISABLE
31630: LD_INT 0
31632: PPUSH
31633: PPUSH
31634: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31635: LD_OWVAR 2
31639: PPUSH
31640: LD_INT 9
31642: PPUSH
31643: LD_INT 1
31645: PPUSH
31646: LD_INT 1
31648: PPUSH
31649: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31653: LD_INT 9
31655: PPUSH
31656: LD_OWVAR 2
31660: PPUSH
31661: CALL_OW 343
// uc_side := 9 ;
31665: LD_ADDR_OWVAR 20
31669: PUSH
31670: LD_INT 9
31672: ST_TO_ADDR
// uc_nation := 2 ;
31673: LD_ADDR_OWVAR 21
31677: PUSH
31678: LD_INT 2
31680: ST_TO_ADDR
// hc_name := Dark Warrior ;
31681: LD_ADDR_OWVAR 26
31685: PUSH
31686: LD_STRING Dark Warrior
31688: ST_TO_ADDR
// hc_gallery :=  ;
31689: LD_ADDR_OWVAR 33
31693: PUSH
31694: LD_STRING 
31696: ST_TO_ADDR
// hc_noskilllimit := true ;
31697: LD_ADDR_OWVAR 76
31701: PUSH
31702: LD_INT 1
31704: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31705: LD_ADDR_OWVAR 31
31709: PUSH
31710: LD_INT 30
31712: PUSH
31713: LD_INT 30
31715: PUSH
31716: LD_INT 30
31718: PUSH
31719: LD_INT 30
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: ST_TO_ADDR
// un := CreateHuman ;
31728: LD_ADDR_VAR 0 3
31732: PUSH
31733: CALL_OW 44
31737: ST_TO_ADDR
// hc_noskilllimit := false ;
31738: LD_ADDR_OWVAR 76
31742: PUSH
31743: LD_INT 0
31745: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31746: LD_VAR 0 3
31750: PPUSH
31751: LD_INT 1
31753: PPUSH
31754: CALL_OW 51
// ToLua ( playRanger() ) ;
31758: LD_STRING playRanger()
31760: PPUSH
31761: CALL_OW 559
// p := 0 ;
31765: LD_ADDR_VAR 0 2
31769: PUSH
31770: LD_INT 0
31772: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31773: LD_INT 35
31775: PPUSH
31776: CALL_OW 67
// p := p + 1 ;
31780: LD_ADDR_VAR 0 2
31784: PUSH
31785: LD_VAR 0 2
31789: PUSH
31790: LD_INT 1
31792: PLUS
31793: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31794: LD_VAR 0 3
31798: PPUSH
31799: CALL_OW 256
31803: PUSH
31804: LD_INT 1000
31806: LESS
31807: IFFALSE 31821
// SetLives ( un , 1000 ) ;
31809: LD_VAR 0 3
31813: PPUSH
31814: LD_INT 1000
31816: PPUSH
31817: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31821: LD_VAR 0 3
31825: PPUSH
31826: LD_INT 81
31828: PUSH
31829: LD_OWVAR 2
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 91
31840: PUSH
31841: LD_VAR 0 3
31845: PUSH
31846: LD_INT 30
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: LIST
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PPUSH
31858: CALL_OW 69
31862: PPUSH
31863: LD_VAR 0 3
31867: PPUSH
31868: CALL_OW 74
31872: PPUSH
31873: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31877: LD_VAR 0 2
31881: PUSH
31882: LD_INT 80
31884: GREATER
31885: PUSH
31886: LD_VAR 0 3
31890: PPUSH
31891: CALL_OW 301
31895: OR
31896: IFFALSE 31773
// if un then
31898: LD_VAR 0 3
31902: IFFALSE 31913
// RemoveUnit ( un ) ;
31904: LD_VAR 0 3
31908: PPUSH
31909: CALL_OW 64
// end ;
31913: PPOPN 3
31915: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31916: LD_EXP 105
31920: IFFALSE 32036
31922: GO 31924
31924: DISABLE
31925: LD_INT 0
31927: PPUSH
31928: PPUSH
31929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31930: LD_ADDR_VAR 0 2
31934: PUSH
31935: LD_INT 81
31937: PUSH
31938: LD_OWVAR 2
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 21
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PPUSH
31961: CALL_OW 69
31965: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31966: LD_STRING playComputer()
31968: PPUSH
31969: CALL_OW 559
// if not tmp then
31973: LD_VAR 0 2
31977: NOT
31978: IFFALSE 31982
// exit ;
31980: GO 32036
// for i in tmp do
31982: LD_ADDR_VAR 0 1
31986: PUSH
31987: LD_VAR 0 2
31991: PUSH
31992: FOR_IN
31993: IFFALSE 32034
// for j := 1 to 4 do
31995: LD_ADDR_VAR 0 3
31999: PUSH
32000: DOUBLE
32001: LD_INT 1
32003: DEC
32004: ST_TO_ADDR
32005: LD_INT 4
32007: PUSH
32008: FOR_TO
32009: IFFALSE 32030
// SetSkill ( i , j , 10 ) ;
32011: LD_VAR 0 1
32015: PPUSH
32016: LD_VAR 0 3
32020: PPUSH
32021: LD_INT 10
32023: PPUSH
32024: CALL_OW 237
32028: GO 32008
32030: POP
32031: POP
32032: GO 31992
32034: POP
32035: POP
// end ;
32036: PPOPN 3
32038: END
// every 0 0$1 trigger s30 do var i , tmp ;
32039: LD_EXP 106
32043: IFFALSE 32112
32045: GO 32047
32047: DISABLE
32048: LD_INT 0
32050: PPUSH
32051: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32052: LD_ADDR_VAR 0 2
32056: PUSH
32057: LD_INT 22
32059: PUSH
32060: LD_OWVAR 2
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PPUSH
32069: CALL_OW 69
32073: ST_TO_ADDR
// if not tmp then
32074: LD_VAR 0 2
32078: NOT
32079: IFFALSE 32083
// exit ;
32081: GO 32112
// for i in tmp do
32083: LD_ADDR_VAR 0 1
32087: PUSH
32088: LD_VAR 0 2
32092: PUSH
32093: FOR_IN
32094: IFFALSE 32110
// SetLives ( i , 300 ) ;
32096: LD_VAR 0 1
32100: PPUSH
32101: LD_INT 300
32103: PPUSH
32104: CALL_OW 234
32108: GO 32093
32110: POP
32111: POP
// end ;
32112: PPOPN 2
32114: END
// every 0 0$1 trigger s60 do var i , tmp ;
32115: LD_EXP 107
32119: IFFALSE 32188
32121: GO 32123
32123: DISABLE
32124: LD_INT 0
32126: PPUSH
32127: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32128: LD_ADDR_VAR 0 2
32132: PUSH
32133: LD_INT 22
32135: PUSH
32136: LD_OWVAR 2
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PPUSH
32145: CALL_OW 69
32149: ST_TO_ADDR
// if not tmp then
32150: LD_VAR 0 2
32154: NOT
32155: IFFALSE 32159
// exit ;
32157: GO 32188
// for i in tmp do
32159: LD_ADDR_VAR 0 1
32163: PUSH
32164: LD_VAR 0 2
32168: PUSH
32169: FOR_IN
32170: IFFALSE 32186
// SetLives ( i , 600 ) ;
32172: LD_VAR 0 1
32176: PPUSH
32177: LD_INT 600
32179: PPUSH
32180: CALL_OW 234
32184: GO 32169
32186: POP
32187: POP
// end ;
32188: PPOPN 2
32190: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32191: LD_INT 0
32193: PPUSH
// case cmd of 301 :
32194: LD_VAR 0 1
32198: PUSH
32199: LD_INT 301
32201: DOUBLE
32202: EQUAL
32203: IFTRUE 32207
32205: GO 32239
32207: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32208: LD_VAR 0 6
32212: PPUSH
32213: LD_VAR 0 7
32217: PPUSH
32218: LD_VAR 0 8
32222: PPUSH
32223: LD_VAR 0 4
32227: PPUSH
32228: LD_VAR 0 5
32232: PPUSH
32233: CALL 33440 0 5
32237: GO 32360
32239: LD_INT 302
32241: DOUBLE
32242: EQUAL
32243: IFTRUE 32247
32245: GO 32284
32247: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32248: LD_VAR 0 6
32252: PPUSH
32253: LD_VAR 0 7
32257: PPUSH
32258: LD_VAR 0 8
32262: PPUSH
32263: LD_VAR 0 9
32267: PPUSH
32268: LD_VAR 0 4
32272: PPUSH
32273: LD_VAR 0 5
32277: PPUSH
32278: CALL 33531 0 6
32282: GO 32360
32284: LD_INT 303
32286: DOUBLE
32287: EQUAL
32288: IFTRUE 32292
32290: GO 32329
32292: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32293: LD_VAR 0 6
32297: PPUSH
32298: LD_VAR 0 7
32302: PPUSH
32303: LD_VAR 0 8
32307: PPUSH
32308: LD_VAR 0 9
32312: PPUSH
32313: LD_VAR 0 4
32317: PPUSH
32318: LD_VAR 0 5
32322: PPUSH
32323: CALL 32365 0 6
32327: GO 32360
32329: LD_INT 304
32331: DOUBLE
32332: EQUAL
32333: IFTRUE 32337
32335: GO 32359
32337: POP
// hHackTeleport ( unit , x , y ) ; end ;
32338: LD_VAR 0 2
32342: PPUSH
32343: LD_VAR 0 4
32347: PPUSH
32348: LD_VAR 0 5
32352: PPUSH
32353: CALL 34124 0 3
32357: GO 32360
32359: POP
// end ;
32360: LD_VAR 0 12
32364: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32365: LD_INT 0
32367: PPUSH
32368: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32369: LD_VAR 0 1
32373: PUSH
32374: LD_INT 1
32376: LESS
32377: PUSH
32378: LD_VAR 0 1
32382: PUSH
32383: LD_INT 3
32385: GREATER
32386: OR
32387: PUSH
32388: LD_VAR 0 5
32392: PPUSH
32393: LD_VAR 0 6
32397: PPUSH
32398: CALL_OW 428
32402: OR
32403: IFFALSE 32407
// exit ;
32405: GO 33127
// uc_side := your_side ;
32407: LD_ADDR_OWVAR 20
32411: PUSH
32412: LD_OWVAR 2
32416: ST_TO_ADDR
// uc_nation := nation ;
32417: LD_ADDR_OWVAR 21
32421: PUSH
32422: LD_VAR 0 1
32426: ST_TO_ADDR
// bc_level = 1 ;
32427: LD_ADDR_OWVAR 43
32431: PUSH
32432: LD_INT 1
32434: ST_TO_ADDR
// case btype of 1 :
32435: LD_VAR 0 2
32439: PUSH
32440: LD_INT 1
32442: DOUBLE
32443: EQUAL
32444: IFTRUE 32448
32446: GO 32459
32448: POP
// bc_type := b_depot ; 2 :
32449: LD_ADDR_OWVAR 42
32453: PUSH
32454: LD_INT 0
32456: ST_TO_ADDR
32457: GO 33071
32459: LD_INT 2
32461: DOUBLE
32462: EQUAL
32463: IFTRUE 32467
32465: GO 32478
32467: POP
// bc_type := b_warehouse ; 3 :
32468: LD_ADDR_OWVAR 42
32472: PUSH
32473: LD_INT 1
32475: ST_TO_ADDR
32476: GO 33071
32478: LD_INT 3
32480: DOUBLE
32481: EQUAL
32482: IFTRUE 32486
32484: GO 32497
32486: POP
// bc_type := b_lab ; 4 .. 9 :
32487: LD_ADDR_OWVAR 42
32491: PUSH
32492: LD_INT 6
32494: ST_TO_ADDR
32495: GO 33071
32497: LD_INT 4
32499: DOUBLE
32500: GREATEREQUAL
32501: IFFALSE 32509
32503: LD_INT 9
32505: DOUBLE
32506: LESSEQUAL
32507: IFTRUE 32511
32509: GO 32563
32511: POP
// begin bc_type := b_lab_half ;
32512: LD_ADDR_OWVAR 42
32516: PUSH
32517: LD_INT 7
32519: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32520: LD_ADDR_OWVAR 44
32524: PUSH
32525: LD_INT 10
32527: PUSH
32528: LD_INT 11
32530: PUSH
32531: LD_INT 12
32533: PUSH
32534: LD_INT 15
32536: PUSH
32537: LD_INT 14
32539: PUSH
32540: LD_INT 13
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: PUSH
32551: LD_VAR 0 2
32555: PUSH
32556: LD_INT 3
32558: MINUS
32559: ARRAY
32560: ST_TO_ADDR
// end ; 10 .. 13 :
32561: GO 33071
32563: LD_INT 10
32565: DOUBLE
32566: GREATEREQUAL
32567: IFFALSE 32575
32569: LD_INT 13
32571: DOUBLE
32572: LESSEQUAL
32573: IFTRUE 32577
32575: GO 32654
32577: POP
// begin bc_type := b_lab_full ;
32578: LD_ADDR_OWVAR 42
32582: PUSH
32583: LD_INT 8
32585: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32586: LD_ADDR_OWVAR 44
32590: PUSH
32591: LD_INT 10
32593: PUSH
32594: LD_INT 12
32596: PUSH
32597: LD_INT 14
32599: PUSH
32600: LD_INT 13
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: PUSH
32609: LD_VAR 0 2
32613: PUSH
32614: LD_INT 9
32616: MINUS
32617: ARRAY
32618: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32619: LD_ADDR_OWVAR 45
32623: PUSH
32624: LD_INT 11
32626: PUSH
32627: LD_INT 15
32629: PUSH
32630: LD_INT 12
32632: PUSH
32633: LD_INT 15
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: PUSH
32642: LD_VAR 0 2
32646: PUSH
32647: LD_INT 9
32649: MINUS
32650: ARRAY
32651: ST_TO_ADDR
// end ; 14 :
32652: GO 33071
32654: LD_INT 14
32656: DOUBLE
32657: EQUAL
32658: IFTRUE 32662
32660: GO 32673
32662: POP
// bc_type := b_workshop ; 15 :
32663: LD_ADDR_OWVAR 42
32667: PUSH
32668: LD_INT 2
32670: ST_TO_ADDR
32671: GO 33071
32673: LD_INT 15
32675: DOUBLE
32676: EQUAL
32677: IFTRUE 32681
32679: GO 32692
32681: POP
// bc_type := b_factory ; 16 :
32682: LD_ADDR_OWVAR 42
32686: PUSH
32687: LD_INT 3
32689: ST_TO_ADDR
32690: GO 33071
32692: LD_INT 16
32694: DOUBLE
32695: EQUAL
32696: IFTRUE 32700
32698: GO 32711
32700: POP
// bc_type := b_ext_gun ; 17 :
32701: LD_ADDR_OWVAR 42
32705: PUSH
32706: LD_INT 17
32708: ST_TO_ADDR
32709: GO 33071
32711: LD_INT 17
32713: DOUBLE
32714: EQUAL
32715: IFTRUE 32719
32717: GO 32747
32719: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32720: LD_ADDR_OWVAR 42
32724: PUSH
32725: LD_INT 19
32727: PUSH
32728: LD_INT 23
32730: PUSH
32731: LD_INT 19
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: LIST
32738: PUSH
32739: LD_VAR 0 1
32743: ARRAY
32744: ST_TO_ADDR
32745: GO 33071
32747: LD_INT 18
32749: DOUBLE
32750: EQUAL
32751: IFTRUE 32755
32753: GO 32766
32755: POP
// bc_type := b_ext_radar ; 19 :
32756: LD_ADDR_OWVAR 42
32760: PUSH
32761: LD_INT 20
32763: ST_TO_ADDR
32764: GO 33071
32766: LD_INT 19
32768: DOUBLE
32769: EQUAL
32770: IFTRUE 32774
32772: GO 32785
32774: POP
// bc_type := b_ext_radio ; 20 :
32775: LD_ADDR_OWVAR 42
32779: PUSH
32780: LD_INT 22
32782: ST_TO_ADDR
32783: GO 33071
32785: LD_INT 20
32787: DOUBLE
32788: EQUAL
32789: IFTRUE 32793
32791: GO 32804
32793: POP
// bc_type := b_ext_siberium ; 21 :
32794: LD_ADDR_OWVAR 42
32798: PUSH
32799: LD_INT 21
32801: ST_TO_ADDR
32802: GO 33071
32804: LD_INT 21
32806: DOUBLE
32807: EQUAL
32808: IFTRUE 32812
32810: GO 32823
32812: POP
// bc_type := b_ext_computer ; 22 :
32813: LD_ADDR_OWVAR 42
32817: PUSH
32818: LD_INT 24
32820: ST_TO_ADDR
32821: GO 33071
32823: LD_INT 22
32825: DOUBLE
32826: EQUAL
32827: IFTRUE 32831
32829: GO 32842
32831: POP
// bc_type := b_ext_track ; 23 :
32832: LD_ADDR_OWVAR 42
32836: PUSH
32837: LD_INT 16
32839: ST_TO_ADDR
32840: GO 33071
32842: LD_INT 23
32844: DOUBLE
32845: EQUAL
32846: IFTRUE 32850
32848: GO 32861
32850: POP
// bc_type := b_ext_laser ; 24 :
32851: LD_ADDR_OWVAR 42
32855: PUSH
32856: LD_INT 25
32858: ST_TO_ADDR
32859: GO 33071
32861: LD_INT 24
32863: DOUBLE
32864: EQUAL
32865: IFTRUE 32869
32867: GO 32880
32869: POP
// bc_type := b_control_tower ; 25 :
32870: LD_ADDR_OWVAR 42
32874: PUSH
32875: LD_INT 36
32877: ST_TO_ADDR
32878: GO 33071
32880: LD_INT 25
32882: DOUBLE
32883: EQUAL
32884: IFTRUE 32888
32886: GO 32899
32888: POP
// bc_type := b_breastwork ; 26 :
32889: LD_ADDR_OWVAR 42
32893: PUSH
32894: LD_INT 31
32896: ST_TO_ADDR
32897: GO 33071
32899: LD_INT 26
32901: DOUBLE
32902: EQUAL
32903: IFTRUE 32907
32905: GO 32918
32907: POP
// bc_type := b_bunker ; 27 :
32908: LD_ADDR_OWVAR 42
32912: PUSH
32913: LD_INT 32
32915: ST_TO_ADDR
32916: GO 33071
32918: LD_INT 27
32920: DOUBLE
32921: EQUAL
32922: IFTRUE 32926
32924: GO 32937
32926: POP
// bc_type := b_turret ; 28 :
32927: LD_ADDR_OWVAR 42
32931: PUSH
32932: LD_INT 33
32934: ST_TO_ADDR
32935: GO 33071
32937: LD_INT 28
32939: DOUBLE
32940: EQUAL
32941: IFTRUE 32945
32943: GO 32956
32945: POP
// bc_type := b_armoury ; 29 :
32946: LD_ADDR_OWVAR 42
32950: PUSH
32951: LD_INT 4
32953: ST_TO_ADDR
32954: GO 33071
32956: LD_INT 29
32958: DOUBLE
32959: EQUAL
32960: IFTRUE 32964
32962: GO 32975
32964: POP
// bc_type := b_barracks ; 30 :
32965: LD_ADDR_OWVAR 42
32969: PUSH
32970: LD_INT 5
32972: ST_TO_ADDR
32973: GO 33071
32975: LD_INT 30
32977: DOUBLE
32978: EQUAL
32979: IFTRUE 32983
32981: GO 32994
32983: POP
// bc_type := b_solar_power ; 31 :
32984: LD_ADDR_OWVAR 42
32988: PUSH
32989: LD_INT 27
32991: ST_TO_ADDR
32992: GO 33071
32994: LD_INT 31
32996: DOUBLE
32997: EQUAL
32998: IFTRUE 33002
33000: GO 33013
33002: POP
// bc_type := b_oil_power ; 32 :
33003: LD_ADDR_OWVAR 42
33007: PUSH
33008: LD_INT 26
33010: ST_TO_ADDR
33011: GO 33071
33013: LD_INT 32
33015: DOUBLE
33016: EQUAL
33017: IFTRUE 33021
33019: GO 33032
33021: POP
// bc_type := b_siberite_power ; 33 :
33022: LD_ADDR_OWVAR 42
33026: PUSH
33027: LD_INT 28
33029: ST_TO_ADDR
33030: GO 33071
33032: LD_INT 33
33034: DOUBLE
33035: EQUAL
33036: IFTRUE 33040
33038: GO 33051
33040: POP
// bc_type := b_oil_mine ; 34 :
33041: LD_ADDR_OWVAR 42
33045: PUSH
33046: LD_INT 29
33048: ST_TO_ADDR
33049: GO 33071
33051: LD_INT 34
33053: DOUBLE
33054: EQUAL
33055: IFTRUE 33059
33057: GO 33070
33059: POP
// bc_type := b_siberite_mine ; end ;
33060: LD_ADDR_OWVAR 42
33064: PUSH
33065: LD_INT 30
33067: ST_TO_ADDR
33068: GO 33071
33070: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33071: LD_ADDR_VAR 0 8
33075: PUSH
33076: LD_VAR 0 5
33080: PPUSH
33081: LD_VAR 0 6
33085: PPUSH
33086: LD_VAR 0 3
33090: PPUSH
33091: CALL_OW 47
33095: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33096: LD_OWVAR 42
33100: PUSH
33101: LD_INT 32
33103: PUSH
33104: LD_INT 33
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: IN
33111: IFFALSE 33127
// PlaceWeaponTurret ( b , weapon ) ;
33113: LD_VAR 0 8
33117: PPUSH
33118: LD_VAR 0 4
33122: PPUSH
33123: CALL_OW 431
// end ;
33127: LD_VAR 0 7
33131: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33132: LD_INT 0
33134: PPUSH
33135: PPUSH
33136: PPUSH
33137: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33138: LD_ADDR_VAR 0 4
33142: PUSH
33143: LD_INT 22
33145: PUSH
33146: LD_OWVAR 2
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 2
33157: PUSH
33158: LD_INT 30
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 30
33170: PUSH
33171: LD_INT 1
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: LIST
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PPUSH
33187: CALL_OW 69
33191: ST_TO_ADDR
// if not tmp then
33192: LD_VAR 0 4
33196: NOT
33197: IFFALSE 33201
// exit ;
33199: GO 33260
// for i in tmp do
33201: LD_ADDR_VAR 0 2
33205: PUSH
33206: LD_VAR 0 4
33210: PUSH
33211: FOR_IN
33212: IFFALSE 33258
// for j = 1 to 3 do
33214: LD_ADDR_VAR 0 3
33218: PUSH
33219: DOUBLE
33220: LD_INT 1
33222: DEC
33223: ST_TO_ADDR
33224: LD_INT 3
33226: PUSH
33227: FOR_TO
33228: IFFALSE 33254
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33230: LD_VAR 0 2
33234: PPUSH
33235: CALL_OW 274
33239: PPUSH
33240: LD_VAR 0 3
33244: PPUSH
33245: LD_INT 99999
33247: PPUSH
33248: CALL_OW 277
33252: GO 33227
33254: POP
33255: POP
33256: GO 33211
33258: POP
33259: POP
// end ;
33260: LD_VAR 0 1
33264: RET
// export function hHackSetLevel10 ; var i , j ; begin
33265: LD_INT 0
33267: PPUSH
33268: PPUSH
33269: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33270: LD_ADDR_VAR 0 2
33274: PUSH
33275: LD_INT 21
33277: PUSH
33278: LD_INT 1
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PPUSH
33285: CALL_OW 69
33289: PUSH
33290: FOR_IN
33291: IFFALSE 33343
// if IsSelected ( i ) then
33293: LD_VAR 0 2
33297: PPUSH
33298: CALL_OW 306
33302: IFFALSE 33341
// begin for j := 1 to 4 do
33304: LD_ADDR_VAR 0 3
33308: PUSH
33309: DOUBLE
33310: LD_INT 1
33312: DEC
33313: ST_TO_ADDR
33314: LD_INT 4
33316: PUSH
33317: FOR_TO
33318: IFFALSE 33339
// SetSkill ( i , j , 10 ) ;
33320: LD_VAR 0 2
33324: PPUSH
33325: LD_VAR 0 3
33329: PPUSH
33330: LD_INT 10
33332: PPUSH
33333: CALL_OW 237
33337: GO 33317
33339: POP
33340: POP
// end ;
33341: GO 33290
33343: POP
33344: POP
// end ;
33345: LD_VAR 0 1
33349: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33350: LD_INT 0
33352: PPUSH
33353: PPUSH
33354: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33355: LD_ADDR_VAR 0 2
33359: PUSH
33360: LD_INT 22
33362: PUSH
33363: LD_OWVAR 2
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 21
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PPUSH
33386: CALL_OW 69
33390: PUSH
33391: FOR_IN
33392: IFFALSE 33433
// begin for j := 1 to 4 do
33394: LD_ADDR_VAR 0 3
33398: PUSH
33399: DOUBLE
33400: LD_INT 1
33402: DEC
33403: ST_TO_ADDR
33404: LD_INT 4
33406: PUSH
33407: FOR_TO
33408: IFFALSE 33429
// SetSkill ( i , j , 10 ) ;
33410: LD_VAR 0 2
33414: PPUSH
33415: LD_VAR 0 3
33419: PPUSH
33420: LD_INT 10
33422: PPUSH
33423: CALL_OW 237
33427: GO 33407
33429: POP
33430: POP
// end ;
33431: GO 33391
33433: POP
33434: POP
// end ;
33435: LD_VAR 0 1
33439: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33440: LD_INT 0
33442: PPUSH
// uc_side := your_side ;
33443: LD_ADDR_OWVAR 20
33447: PUSH
33448: LD_OWVAR 2
33452: ST_TO_ADDR
// uc_nation := nation ;
33453: LD_ADDR_OWVAR 21
33457: PUSH
33458: LD_VAR 0 1
33462: ST_TO_ADDR
// InitHc ;
33463: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33467: LD_INT 0
33469: PPUSH
33470: LD_VAR 0 2
33474: PPUSH
33475: LD_VAR 0 3
33479: PPUSH
33480: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33484: LD_VAR 0 4
33488: PPUSH
33489: LD_VAR 0 5
33493: PPUSH
33494: CALL_OW 428
33498: PUSH
33499: LD_INT 0
33501: EQUAL
33502: IFFALSE 33526
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33504: CALL_OW 44
33508: PPUSH
33509: LD_VAR 0 4
33513: PPUSH
33514: LD_VAR 0 5
33518: PPUSH
33519: LD_INT 1
33521: PPUSH
33522: CALL_OW 48
// end ;
33526: LD_VAR 0 6
33530: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33531: LD_INT 0
33533: PPUSH
33534: PPUSH
// uc_side := your_side ;
33535: LD_ADDR_OWVAR 20
33539: PUSH
33540: LD_OWVAR 2
33544: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33545: LD_VAR 0 1
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: LD_INT 2
33555: PUSH
33556: LD_INT 3
33558: PUSH
33559: LD_INT 4
33561: PUSH
33562: LD_INT 5
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: IN
33572: IFFALSE 33584
// uc_nation := nation_american else
33574: LD_ADDR_OWVAR 21
33578: PUSH
33579: LD_INT 1
33581: ST_TO_ADDR
33582: GO 33627
// if chassis in [ 11 , 12 , 13 , 14 ] then
33584: LD_VAR 0 1
33588: PUSH
33589: LD_INT 11
33591: PUSH
33592: LD_INT 12
33594: PUSH
33595: LD_INT 13
33597: PUSH
33598: LD_INT 14
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: IN
33607: IFFALSE 33619
// uc_nation := nation_arabian else
33609: LD_ADDR_OWVAR 21
33613: PUSH
33614: LD_INT 2
33616: ST_TO_ADDR
33617: GO 33627
// uc_nation := nation_russian ;
33619: LD_ADDR_OWVAR 21
33623: PUSH
33624: LD_INT 3
33626: ST_TO_ADDR
// vc_chassis := chassis ;
33627: LD_ADDR_OWVAR 37
33631: PUSH
33632: LD_VAR 0 1
33636: ST_TO_ADDR
// vc_engine := engine ;
33637: LD_ADDR_OWVAR 39
33641: PUSH
33642: LD_VAR 0 2
33646: ST_TO_ADDR
// vc_control := control ;
33647: LD_ADDR_OWVAR 38
33651: PUSH
33652: LD_VAR 0 3
33656: ST_TO_ADDR
// vc_weapon := weapon ;
33657: LD_ADDR_OWVAR 40
33661: PUSH
33662: LD_VAR 0 4
33666: ST_TO_ADDR
// un := CreateVehicle ;
33667: LD_ADDR_VAR 0 8
33671: PUSH
33672: CALL_OW 45
33676: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33677: LD_VAR 0 8
33681: PPUSH
33682: LD_INT 0
33684: PPUSH
33685: LD_INT 5
33687: PPUSH
33688: CALL_OW 12
33692: PPUSH
33693: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33697: LD_VAR 0 8
33701: PPUSH
33702: LD_VAR 0 5
33706: PPUSH
33707: LD_VAR 0 6
33711: PPUSH
33712: LD_INT 1
33714: PPUSH
33715: CALL_OW 48
// end ;
33719: LD_VAR 0 7
33723: RET
// export hInvincible ; every 1 do
33724: GO 33726
33726: DISABLE
// hInvincible := [ ] ;
33727: LD_ADDR_EXP 108
33731: PUSH
33732: EMPTY
33733: ST_TO_ADDR
33734: END
// every 10 do var i ;
33735: GO 33737
33737: DISABLE
33738: LD_INT 0
33740: PPUSH
// begin enable ;
33741: ENABLE
// if not hInvincible then
33742: LD_EXP 108
33746: NOT
33747: IFFALSE 33751
// exit ;
33749: GO 33795
// for i in hInvincible do
33751: LD_ADDR_VAR 0 1
33755: PUSH
33756: LD_EXP 108
33760: PUSH
33761: FOR_IN
33762: IFFALSE 33793
// if GetLives ( i ) < 1000 then
33764: LD_VAR 0 1
33768: PPUSH
33769: CALL_OW 256
33773: PUSH
33774: LD_INT 1000
33776: LESS
33777: IFFALSE 33791
// SetLives ( i , 1000 ) ;
33779: LD_VAR 0 1
33783: PPUSH
33784: LD_INT 1000
33786: PPUSH
33787: CALL_OW 234
33791: GO 33761
33793: POP
33794: POP
// end ;
33795: PPOPN 1
33797: END
// export function hHackInvincible ; var i ; begin
33798: LD_INT 0
33800: PPUSH
33801: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33802: LD_ADDR_VAR 0 2
33806: PUSH
33807: LD_INT 2
33809: PUSH
33810: LD_INT 21
33812: PUSH
33813: LD_INT 1
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 21
33822: PUSH
33823: LD_INT 2
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: LIST
33834: PPUSH
33835: CALL_OW 69
33839: PUSH
33840: FOR_IN
33841: IFFALSE 33902
// if IsSelected ( i ) then
33843: LD_VAR 0 2
33847: PPUSH
33848: CALL_OW 306
33852: IFFALSE 33900
// begin if i in hInvincible then
33854: LD_VAR 0 2
33858: PUSH
33859: LD_EXP 108
33863: IN
33864: IFFALSE 33884
// hInvincible := hInvincible diff i else
33866: LD_ADDR_EXP 108
33870: PUSH
33871: LD_EXP 108
33875: PUSH
33876: LD_VAR 0 2
33880: DIFF
33881: ST_TO_ADDR
33882: GO 33900
// hInvincible := hInvincible union i ;
33884: LD_ADDR_EXP 108
33888: PUSH
33889: LD_EXP 108
33893: PUSH
33894: LD_VAR 0 2
33898: UNION
33899: ST_TO_ADDR
// end ;
33900: GO 33840
33902: POP
33903: POP
// end ;
33904: LD_VAR 0 1
33908: RET
// export function hHackInvisible ; var i , j ; begin
33909: LD_INT 0
33911: PPUSH
33912: PPUSH
33913: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33914: LD_ADDR_VAR 0 2
33918: PUSH
33919: LD_INT 21
33921: PUSH
33922: LD_INT 1
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PPUSH
33929: CALL_OW 69
33933: PUSH
33934: FOR_IN
33935: IFFALSE 33959
// if IsSelected ( i ) then
33937: LD_VAR 0 2
33941: PPUSH
33942: CALL_OW 306
33946: IFFALSE 33957
// ComForceInvisible ( i ) ;
33948: LD_VAR 0 2
33952: PPUSH
33953: CALL_OW 496
33957: GO 33934
33959: POP
33960: POP
// end ;
33961: LD_VAR 0 1
33965: RET
// export function hHackChangeYourSide ; begin
33966: LD_INT 0
33968: PPUSH
// if your_side = 8 then
33969: LD_OWVAR 2
33973: PUSH
33974: LD_INT 8
33976: EQUAL
33977: IFFALSE 33989
// your_side := 0 else
33979: LD_ADDR_OWVAR 2
33983: PUSH
33984: LD_INT 0
33986: ST_TO_ADDR
33987: GO 34003
// your_side := your_side + 1 ;
33989: LD_ADDR_OWVAR 2
33993: PUSH
33994: LD_OWVAR 2
33998: PUSH
33999: LD_INT 1
34001: PLUS
34002: ST_TO_ADDR
// end ;
34003: LD_VAR 0 1
34007: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34008: LD_INT 0
34010: PPUSH
34011: PPUSH
34012: PPUSH
// for i in all_units do
34013: LD_ADDR_VAR 0 2
34017: PUSH
34018: LD_OWVAR 3
34022: PUSH
34023: FOR_IN
34024: IFFALSE 34102
// if IsSelected ( i ) then
34026: LD_VAR 0 2
34030: PPUSH
34031: CALL_OW 306
34035: IFFALSE 34100
// begin j := GetSide ( i ) ;
34037: LD_ADDR_VAR 0 3
34041: PUSH
34042: LD_VAR 0 2
34046: PPUSH
34047: CALL_OW 255
34051: ST_TO_ADDR
// if j = 8 then
34052: LD_VAR 0 3
34056: PUSH
34057: LD_INT 8
34059: EQUAL
34060: IFFALSE 34072
// j := 0 else
34062: LD_ADDR_VAR 0 3
34066: PUSH
34067: LD_INT 0
34069: ST_TO_ADDR
34070: GO 34086
// j := j + 1 ;
34072: LD_ADDR_VAR 0 3
34076: PUSH
34077: LD_VAR 0 3
34081: PUSH
34082: LD_INT 1
34084: PLUS
34085: ST_TO_ADDR
// SetSide ( i , j ) ;
34086: LD_VAR 0 2
34090: PPUSH
34091: LD_VAR 0 3
34095: PPUSH
34096: CALL_OW 235
// end ;
34100: GO 34023
34102: POP
34103: POP
// end ;
34104: LD_VAR 0 1
34108: RET
// export function hHackFog ; begin
34109: LD_INT 0
34111: PPUSH
// FogOff ( true ) ;
34112: LD_INT 1
34114: PPUSH
34115: CALL_OW 344
// end ;
34119: LD_VAR 0 1
34123: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34124: LD_INT 0
34126: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34127: LD_VAR 0 1
34131: PPUSH
34132: LD_VAR 0 2
34136: PPUSH
34137: LD_VAR 0 3
34141: PPUSH
34142: LD_INT 1
34144: PPUSH
34145: LD_INT 1
34147: PPUSH
34148: CALL_OW 483
// CenterOnXY ( x , y ) ;
34152: LD_VAR 0 2
34156: PPUSH
34157: LD_VAR 0 3
34161: PPUSH
34162: CALL_OW 84
// end ;
34166: LD_VAR 0 4
34170: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34171: LD_INT 0
34173: PPUSH
34174: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34175: LD_VAR 0 1
34179: NOT
34180: PUSH
34181: LD_VAR 0 2
34185: PPUSH
34186: LD_VAR 0 3
34190: PPUSH
34191: CALL_OW 488
34195: NOT
34196: OR
34197: PUSH
34198: LD_VAR 0 1
34202: PPUSH
34203: CALL_OW 266
34207: PUSH
34208: LD_INT 3
34210: NONEQUAL
34211: PUSH
34212: LD_VAR 0 1
34216: PPUSH
34217: CALL_OW 247
34221: PUSH
34222: LD_INT 1
34224: EQUAL
34225: NOT
34226: AND
34227: OR
34228: IFFALSE 34232
// exit ;
34230: GO 34381
// if GetType ( factory ) = unit_human then
34232: LD_VAR 0 1
34236: PPUSH
34237: CALL_OW 247
34241: PUSH
34242: LD_INT 1
34244: EQUAL
34245: IFFALSE 34262
// factory := IsInUnit ( factory ) ;
34247: LD_ADDR_VAR 0 1
34251: PUSH
34252: LD_VAR 0 1
34256: PPUSH
34257: CALL_OW 310
34261: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34262: LD_VAR 0 1
34266: PPUSH
34267: CALL_OW 266
34271: PUSH
34272: LD_INT 3
34274: NONEQUAL
34275: IFFALSE 34279
// exit ;
34277: GO 34381
// if HexInfo ( x , y ) = factory then
34279: LD_VAR 0 2
34283: PPUSH
34284: LD_VAR 0 3
34288: PPUSH
34289: CALL_OW 428
34293: PUSH
34294: LD_VAR 0 1
34298: EQUAL
34299: IFFALSE 34326
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34301: LD_ADDR_EXP 109
34305: PUSH
34306: LD_EXP 109
34310: PPUSH
34311: LD_VAR 0 1
34315: PPUSH
34316: LD_INT 0
34318: PPUSH
34319: CALL_OW 1
34323: ST_TO_ADDR
34324: GO 34377
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34326: LD_ADDR_EXP 109
34330: PUSH
34331: LD_EXP 109
34335: PPUSH
34336: LD_VAR 0 1
34340: PPUSH
34341: LD_VAR 0 1
34345: PPUSH
34346: CALL_OW 255
34350: PUSH
34351: LD_VAR 0 1
34355: PUSH
34356: LD_VAR 0 2
34360: PUSH
34361: LD_VAR 0 3
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: PPUSH
34372: CALL_OW 1
34376: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34377: CALL 34386 0 0
// end ;
34381: LD_VAR 0 4
34385: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34386: LD_INT 0
34388: PPUSH
34389: PPUSH
34390: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34391: LD_STRING resetFactoryWaypoint();
34393: PPUSH
34394: CALL_OW 559
// if factoryWaypoints then
34398: LD_EXP 109
34402: IFFALSE 34528
// begin list := PrepareArray ( factoryWaypoints ) ;
34404: LD_ADDR_VAR 0 3
34408: PUSH
34409: LD_EXP 109
34413: PPUSH
34414: CALL 80997 0 1
34418: ST_TO_ADDR
// for i := 1 to list do
34419: LD_ADDR_VAR 0 2
34423: PUSH
34424: DOUBLE
34425: LD_INT 1
34427: DEC
34428: ST_TO_ADDR
34429: LD_VAR 0 3
34433: PUSH
34434: FOR_TO
34435: IFFALSE 34526
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34437: LD_STRING setFactoryWaypointXY(
34439: PUSH
34440: LD_VAR 0 3
34444: PUSH
34445: LD_VAR 0 2
34449: ARRAY
34450: PUSH
34451: LD_INT 1
34453: ARRAY
34454: STR
34455: PUSH
34456: LD_STRING ,
34458: STR
34459: PUSH
34460: LD_VAR 0 3
34464: PUSH
34465: LD_VAR 0 2
34469: ARRAY
34470: PUSH
34471: LD_INT 2
34473: ARRAY
34474: STR
34475: PUSH
34476: LD_STRING ,
34478: STR
34479: PUSH
34480: LD_VAR 0 3
34484: PUSH
34485: LD_VAR 0 2
34489: ARRAY
34490: PUSH
34491: LD_INT 3
34493: ARRAY
34494: STR
34495: PUSH
34496: LD_STRING ,
34498: STR
34499: PUSH
34500: LD_VAR 0 3
34504: PUSH
34505: LD_VAR 0 2
34509: ARRAY
34510: PUSH
34511: LD_INT 4
34513: ARRAY
34514: STR
34515: PUSH
34516: LD_STRING )
34518: STR
34519: PPUSH
34520: CALL_OW 559
34524: GO 34434
34526: POP
34527: POP
// end ; end ;
34528: LD_VAR 0 1
34532: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34533: LD_INT 0
34535: PPUSH
// if HexInfo ( x , y ) = warehouse then
34536: LD_VAR 0 2
34540: PPUSH
34541: LD_VAR 0 3
34545: PPUSH
34546: CALL_OW 428
34550: PUSH
34551: LD_VAR 0 1
34555: EQUAL
34556: IFFALSE 34583
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34558: LD_ADDR_EXP 110
34562: PUSH
34563: LD_EXP 110
34567: PPUSH
34568: LD_VAR 0 1
34572: PPUSH
34573: LD_INT 0
34575: PPUSH
34576: CALL_OW 1
34580: ST_TO_ADDR
34581: GO 34634
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34583: LD_ADDR_EXP 110
34587: PUSH
34588: LD_EXP 110
34592: PPUSH
34593: LD_VAR 0 1
34597: PPUSH
34598: LD_VAR 0 1
34602: PPUSH
34603: CALL_OW 255
34607: PUSH
34608: LD_VAR 0 1
34612: PUSH
34613: LD_VAR 0 2
34617: PUSH
34618: LD_VAR 0 3
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: PPUSH
34629: CALL_OW 1
34633: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34634: CALL 34643 0 0
// end ;
34638: LD_VAR 0 4
34642: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34643: LD_INT 0
34645: PPUSH
34646: PPUSH
34647: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34648: LD_STRING resetWarehouseGatheringPoints();
34650: PPUSH
34651: CALL_OW 559
// if warehouseGatheringPoints then
34655: LD_EXP 110
34659: IFFALSE 34785
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34661: LD_ADDR_VAR 0 3
34665: PUSH
34666: LD_EXP 110
34670: PPUSH
34671: CALL 80997 0 1
34675: ST_TO_ADDR
// for i := 1 to list do
34676: LD_ADDR_VAR 0 2
34680: PUSH
34681: DOUBLE
34682: LD_INT 1
34684: DEC
34685: ST_TO_ADDR
34686: LD_VAR 0 3
34690: PUSH
34691: FOR_TO
34692: IFFALSE 34783
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34694: LD_STRING setWarehouseGatheringPointXY(
34696: PUSH
34697: LD_VAR 0 3
34701: PUSH
34702: LD_VAR 0 2
34706: ARRAY
34707: PUSH
34708: LD_INT 1
34710: ARRAY
34711: STR
34712: PUSH
34713: LD_STRING ,
34715: STR
34716: PUSH
34717: LD_VAR 0 3
34721: PUSH
34722: LD_VAR 0 2
34726: ARRAY
34727: PUSH
34728: LD_INT 2
34730: ARRAY
34731: STR
34732: PUSH
34733: LD_STRING ,
34735: STR
34736: PUSH
34737: LD_VAR 0 3
34741: PUSH
34742: LD_VAR 0 2
34746: ARRAY
34747: PUSH
34748: LD_INT 3
34750: ARRAY
34751: STR
34752: PUSH
34753: LD_STRING ,
34755: STR
34756: PUSH
34757: LD_VAR 0 3
34761: PUSH
34762: LD_VAR 0 2
34766: ARRAY
34767: PUSH
34768: LD_INT 4
34770: ARRAY
34771: STR
34772: PUSH
34773: LD_STRING )
34775: STR
34776: PPUSH
34777: CALL_OW 559
34781: GO 34691
34783: POP
34784: POP
// end ; end ;
34785: LD_VAR 0 1
34789: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34790: LD_EXP 110
34794: IFFALSE 35479
34796: GO 34798
34798: DISABLE
34799: LD_INT 0
34801: PPUSH
34802: PPUSH
34803: PPUSH
34804: PPUSH
34805: PPUSH
34806: PPUSH
34807: PPUSH
34808: PPUSH
34809: PPUSH
// begin enable ;
34810: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34811: LD_ADDR_VAR 0 3
34815: PUSH
34816: LD_EXP 110
34820: PPUSH
34821: CALL 80997 0 1
34825: ST_TO_ADDR
// if not list then
34826: LD_VAR 0 3
34830: NOT
34831: IFFALSE 34835
// exit ;
34833: GO 35479
// for i := 1 to list do
34835: LD_ADDR_VAR 0 1
34839: PUSH
34840: DOUBLE
34841: LD_INT 1
34843: DEC
34844: ST_TO_ADDR
34845: LD_VAR 0 3
34849: PUSH
34850: FOR_TO
34851: IFFALSE 35477
// begin depot := list [ i ] [ 2 ] ;
34853: LD_ADDR_VAR 0 8
34857: PUSH
34858: LD_VAR 0 3
34862: PUSH
34863: LD_VAR 0 1
34867: ARRAY
34868: PUSH
34869: LD_INT 2
34871: ARRAY
34872: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34873: LD_ADDR_VAR 0 5
34877: PUSH
34878: LD_VAR 0 3
34882: PUSH
34883: LD_VAR 0 1
34887: ARRAY
34888: PUSH
34889: LD_INT 1
34891: ARRAY
34892: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34893: LD_VAR 0 8
34897: PPUSH
34898: CALL_OW 301
34902: PUSH
34903: LD_VAR 0 5
34907: PUSH
34908: LD_VAR 0 8
34912: PPUSH
34913: CALL_OW 255
34917: NONEQUAL
34918: OR
34919: IFFALSE 34948
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34921: LD_ADDR_EXP 110
34925: PUSH
34926: LD_EXP 110
34930: PPUSH
34931: LD_VAR 0 8
34935: PPUSH
34936: LD_INT 0
34938: PPUSH
34939: CALL_OW 1
34943: ST_TO_ADDR
// exit ;
34944: POP
34945: POP
34946: GO 35479
// end ; x := list [ i ] [ 3 ] ;
34948: LD_ADDR_VAR 0 6
34952: PUSH
34953: LD_VAR 0 3
34957: PUSH
34958: LD_VAR 0 1
34962: ARRAY
34963: PUSH
34964: LD_INT 3
34966: ARRAY
34967: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34968: LD_ADDR_VAR 0 7
34972: PUSH
34973: LD_VAR 0 3
34977: PUSH
34978: LD_VAR 0 1
34982: ARRAY
34983: PUSH
34984: LD_INT 4
34986: ARRAY
34987: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34988: LD_ADDR_VAR 0 9
34992: PUSH
34993: LD_VAR 0 6
34997: PPUSH
34998: LD_VAR 0 7
35002: PPUSH
35003: LD_INT 16
35005: PPUSH
35006: CALL 79585 0 3
35010: ST_TO_ADDR
// if not cratesNearbyPoint then
35011: LD_VAR 0 9
35015: NOT
35016: IFFALSE 35022
// exit ;
35018: POP
35019: POP
35020: GO 35479
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35022: LD_ADDR_VAR 0 4
35026: PUSH
35027: LD_INT 22
35029: PUSH
35030: LD_VAR 0 5
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 3
35041: PUSH
35042: LD_INT 60
35044: PUSH
35045: EMPTY
35046: LIST
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 91
35054: PUSH
35055: LD_VAR 0 8
35059: PUSH
35060: LD_INT 6
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 2
35070: PUSH
35071: LD_INT 25
35073: PUSH
35074: LD_INT 2
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 25
35083: PUSH
35084: LD_INT 16
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: LIST
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: PPUSH
35102: CALL_OW 69
35106: PUSH
35107: LD_VAR 0 8
35111: PPUSH
35112: CALL_OW 313
35116: PPUSH
35117: LD_INT 3
35119: PUSH
35120: LD_INT 60
35122: PUSH
35123: EMPTY
35124: LIST
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 2
35132: PUSH
35133: LD_INT 25
35135: PUSH
35136: LD_INT 2
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 25
35145: PUSH
35146: LD_INT 16
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PPUSH
35162: CALL_OW 72
35166: UNION
35167: ST_TO_ADDR
// if tmp then
35168: LD_VAR 0 4
35172: IFFALSE 35252
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35174: LD_ADDR_VAR 0 4
35178: PUSH
35179: LD_VAR 0 4
35183: PPUSH
35184: LD_INT 3
35186: PPUSH
35187: CALL 77554 0 2
35191: ST_TO_ADDR
// for j in tmp do
35192: LD_ADDR_VAR 0 2
35196: PUSH
35197: LD_VAR 0 4
35201: PUSH
35202: FOR_IN
35203: IFFALSE 35246
// begin if IsInUnit ( j ) then
35205: LD_VAR 0 2
35209: PPUSH
35210: CALL_OW 310
35214: IFFALSE 35225
// ComExit ( j ) ;
35216: LD_VAR 0 2
35220: PPUSH
35221: CALL 77637 0 1
// AddComCollect ( j , x , y ) ;
35225: LD_VAR 0 2
35229: PPUSH
35230: LD_VAR 0 6
35234: PPUSH
35235: LD_VAR 0 7
35239: PPUSH
35240: CALL_OW 177
// end ;
35244: GO 35202
35246: POP
35247: POP
// exit ;
35248: POP
35249: POP
35250: GO 35479
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35252: LD_ADDR_VAR 0 4
35256: PUSH
35257: LD_INT 22
35259: PUSH
35260: LD_VAR 0 5
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 91
35271: PUSH
35272: LD_VAR 0 8
35276: PUSH
35277: LD_INT 8
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 2
35287: PUSH
35288: LD_INT 34
35290: PUSH
35291: LD_INT 12
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 34
35300: PUSH
35301: LD_INT 51
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 34
35310: PUSH
35311: LD_INT 32
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 34
35320: PUSH
35321: LD_INT 89
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: LIST
35339: PPUSH
35340: CALL_OW 69
35344: ST_TO_ADDR
// if tmp then
35345: LD_VAR 0 4
35349: IFFALSE 35475
// begin for j in tmp do
35351: LD_ADDR_VAR 0 2
35355: PUSH
35356: LD_VAR 0 4
35360: PUSH
35361: FOR_IN
35362: IFFALSE 35473
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35364: LD_VAR 0 2
35368: PPUSH
35369: CALL_OW 262
35373: PUSH
35374: LD_INT 3
35376: EQUAL
35377: PUSH
35378: LD_VAR 0 2
35382: PPUSH
35383: CALL_OW 261
35387: PUSH
35388: LD_INT 20
35390: GREATER
35391: OR
35392: PUSH
35393: LD_VAR 0 2
35397: PPUSH
35398: CALL_OW 314
35402: NOT
35403: AND
35404: PUSH
35405: LD_VAR 0 2
35409: PPUSH
35410: CALL_OW 263
35414: PUSH
35415: LD_INT 1
35417: NONEQUAL
35418: PUSH
35419: LD_VAR 0 2
35423: PPUSH
35424: CALL_OW 311
35428: OR
35429: AND
35430: IFFALSE 35471
// begin ComCollect ( j , x , y ) ;
35432: LD_VAR 0 2
35436: PPUSH
35437: LD_VAR 0 6
35441: PPUSH
35442: LD_VAR 0 7
35446: PPUSH
35447: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35451: LD_VAR 0 2
35455: PPUSH
35456: LD_VAR 0 8
35460: PPUSH
35461: CALL_OW 172
// exit ;
35465: POP
35466: POP
35467: POP
35468: POP
35469: GO 35479
// end ;
35471: GO 35361
35473: POP
35474: POP
// end ; end ;
35475: GO 34850
35477: POP
35478: POP
// end ; end_of_file
35479: PPOPN 9
35481: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35482: LD_INT 0
35484: PPUSH
35485: PPUSH
35486: PPUSH
35487: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35488: LD_VAR 0 1
35492: PPUSH
35493: CALL_OW 264
35497: PUSH
35498: LD_INT 91
35500: EQUAL
35501: IFFALSE 35573
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35503: LD_INT 68
35505: PPUSH
35506: LD_VAR 0 1
35510: PPUSH
35511: CALL_OW 255
35515: PPUSH
35516: CALL_OW 321
35520: PUSH
35521: LD_INT 2
35523: EQUAL
35524: IFFALSE 35536
// eff := 70 else
35526: LD_ADDR_VAR 0 4
35530: PUSH
35531: LD_INT 70
35533: ST_TO_ADDR
35534: GO 35544
// eff := 30 ;
35536: LD_ADDR_VAR 0 4
35540: PUSH
35541: LD_INT 30
35543: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35544: LD_VAR 0 1
35548: PPUSH
35549: CALL_OW 250
35553: PPUSH
35554: LD_VAR 0 1
35558: PPUSH
35559: CALL_OW 251
35563: PPUSH
35564: LD_VAR 0 4
35568: PPUSH
35569: CALL_OW 495
// end ; end ;
35573: LD_VAR 0 2
35577: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35578: LD_INT 0
35580: PPUSH
// end ;
35581: LD_VAR 0 4
35585: RET
// export function SOS_Command ( cmd ) ; begin
35586: LD_INT 0
35588: PPUSH
// end ;
35589: LD_VAR 0 2
35593: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35594: LD_INT 0
35596: PPUSH
// end ;
35597: LD_VAR 0 6
35601: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35602: LD_INT 0
35604: PPUSH
35605: PPUSH
// if not vehicle or not factory then
35606: LD_VAR 0 1
35610: NOT
35611: PUSH
35612: LD_VAR 0 2
35616: NOT
35617: OR
35618: IFFALSE 35622
// exit ;
35620: GO 35853
// if factoryWaypoints >= factory then
35622: LD_EXP 109
35626: PUSH
35627: LD_VAR 0 2
35631: GREATEREQUAL
35632: IFFALSE 35853
// if factoryWaypoints [ factory ] then
35634: LD_EXP 109
35638: PUSH
35639: LD_VAR 0 2
35643: ARRAY
35644: IFFALSE 35853
// begin if GetControl ( vehicle ) = control_manual then
35646: LD_VAR 0 1
35650: PPUSH
35651: CALL_OW 263
35655: PUSH
35656: LD_INT 1
35658: EQUAL
35659: IFFALSE 35740
// begin driver := IsDrivenBy ( vehicle ) ;
35661: LD_ADDR_VAR 0 4
35665: PUSH
35666: LD_VAR 0 1
35670: PPUSH
35671: CALL_OW 311
35675: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35676: LD_VAR 0 4
35680: PPUSH
35681: LD_EXP 109
35685: PUSH
35686: LD_VAR 0 2
35690: ARRAY
35691: PUSH
35692: LD_INT 3
35694: ARRAY
35695: PPUSH
35696: LD_EXP 109
35700: PUSH
35701: LD_VAR 0 2
35705: ARRAY
35706: PUSH
35707: LD_INT 4
35709: ARRAY
35710: PPUSH
35711: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35715: LD_VAR 0 4
35719: PPUSH
35720: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35724: LD_VAR 0 4
35728: PPUSH
35729: LD_VAR 0 2
35733: PPUSH
35734: CALL_OW 180
// end else
35738: GO 35853
// if GetControl ( vehicle ) = control_remote then
35740: LD_VAR 0 1
35744: PPUSH
35745: CALL_OW 263
35749: PUSH
35750: LD_INT 2
35752: EQUAL
35753: IFFALSE 35814
// begin wait ( 0 0$2 ) ;
35755: LD_INT 70
35757: PPUSH
35758: CALL_OW 67
// if Connect ( vehicle ) then
35762: LD_VAR 0 1
35766: PPUSH
35767: CALL 47877 0 1
35771: IFFALSE 35812
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35773: LD_VAR 0 1
35777: PPUSH
35778: LD_EXP 109
35782: PUSH
35783: LD_VAR 0 2
35787: ARRAY
35788: PUSH
35789: LD_INT 3
35791: ARRAY
35792: PPUSH
35793: LD_EXP 109
35797: PUSH
35798: LD_VAR 0 2
35802: ARRAY
35803: PUSH
35804: LD_INT 4
35806: ARRAY
35807: PPUSH
35808: CALL_OW 171
// end else
35812: GO 35853
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35814: LD_VAR 0 1
35818: PPUSH
35819: LD_EXP 109
35823: PUSH
35824: LD_VAR 0 2
35828: ARRAY
35829: PUSH
35830: LD_INT 3
35832: ARRAY
35833: PPUSH
35834: LD_EXP 109
35838: PUSH
35839: LD_VAR 0 2
35843: ARRAY
35844: PUSH
35845: LD_INT 4
35847: ARRAY
35848: PPUSH
35849: CALL_OW 171
// end ; end ;
35853: LD_VAR 0 3
35857: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35858: LD_INT 0
35860: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35861: LD_VAR 0 1
35865: PUSH
35866: LD_INT 250
35868: EQUAL
35869: PUSH
35870: LD_VAR 0 2
35874: PPUSH
35875: CALL_OW 264
35879: PUSH
35880: LD_INT 81
35882: EQUAL
35883: AND
35884: IFFALSE 35905
// MinerPlaceMine ( unit , x , y ) ;
35886: LD_VAR 0 2
35890: PPUSH
35891: LD_VAR 0 4
35895: PPUSH
35896: LD_VAR 0 5
35900: PPUSH
35901: CALL 38290 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35905: LD_VAR 0 1
35909: PUSH
35910: LD_INT 251
35912: EQUAL
35913: PUSH
35914: LD_VAR 0 2
35918: PPUSH
35919: CALL_OW 264
35923: PUSH
35924: LD_INT 81
35926: EQUAL
35927: AND
35928: IFFALSE 35949
// MinerDetonateMine ( unit , x , y ) ;
35930: LD_VAR 0 2
35934: PPUSH
35935: LD_VAR 0 4
35939: PPUSH
35940: LD_VAR 0 5
35944: PPUSH
35945: CALL 38565 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35949: LD_VAR 0 1
35953: PUSH
35954: LD_INT 252
35956: EQUAL
35957: PUSH
35958: LD_VAR 0 2
35962: PPUSH
35963: CALL_OW 264
35967: PUSH
35968: LD_INT 81
35970: EQUAL
35971: AND
35972: IFFALSE 35993
// MinerCreateMinefield ( unit , x , y ) ;
35974: LD_VAR 0 2
35978: PPUSH
35979: LD_VAR 0 4
35983: PPUSH
35984: LD_VAR 0 5
35988: PPUSH
35989: CALL 38982 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35993: LD_VAR 0 1
35997: PUSH
35998: LD_INT 253
36000: EQUAL
36001: PUSH
36002: LD_VAR 0 2
36006: PPUSH
36007: CALL_OW 257
36011: PUSH
36012: LD_INT 5
36014: EQUAL
36015: AND
36016: IFFALSE 36037
// ComBinocular ( unit , x , y ) ;
36018: LD_VAR 0 2
36022: PPUSH
36023: LD_VAR 0 4
36027: PPUSH
36028: LD_VAR 0 5
36032: PPUSH
36033: CALL 39351 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36037: LD_VAR 0 1
36041: PUSH
36042: LD_INT 254
36044: EQUAL
36045: PUSH
36046: LD_VAR 0 2
36050: PPUSH
36051: CALL_OW 264
36055: PUSH
36056: LD_INT 99
36058: EQUAL
36059: AND
36060: PUSH
36061: LD_VAR 0 3
36065: PPUSH
36066: CALL_OW 263
36070: PUSH
36071: LD_INT 3
36073: EQUAL
36074: AND
36075: IFFALSE 36091
// HackDestroyVehicle ( unit , selectedUnit ) ;
36077: LD_VAR 0 2
36081: PPUSH
36082: LD_VAR 0 3
36086: PPUSH
36087: CALL 37654 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36091: LD_VAR 0 1
36095: PUSH
36096: LD_INT 255
36098: EQUAL
36099: PUSH
36100: LD_VAR 0 2
36104: PPUSH
36105: CALL_OW 264
36109: PUSH
36110: LD_INT 14
36112: PUSH
36113: LD_INT 53
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: IN
36120: AND
36121: PUSH
36122: LD_VAR 0 4
36126: PPUSH
36127: LD_VAR 0 5
36131: PPUSH
36132: CALL_OW 488
36136: AND
36137: IFFALSE 36161
// CutTreeXYR ( unit , x , y , 12 ) ;
36139: LD_VAR 0 2
36143: PPUSH
36144: LD_VAR 0 4
36148: PPUSH
36149: LD_VAR 0 5
36153: PPUSH
36154: LD_INT 12
36156: PPUSH
36157: CALL 36224 0 4
// if cmd = 256 then
36161: LD_VAR 0 1
36165: PUSH
36166: LD_INT 256
36168: EQUAL
36169: IFFALSE 36190
// SetFactoryWaypoint ( unit , x , y ) ;
36171: LD_VAR 0 2
36175: PPUSH
36176: LD_VAR 0 4
36180: PPUSH
36181: LD_VAR 0 5
36185: PPUSH
36186: CALL 34171 0 3
// if cmd = 257 then
36190: LD_VAR 0 1
36194: PUSH
36195: LD_INT 257
36197: EQUAL
36198: IFFALSE 36219
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36200: LD_VAR 0 2
36204: PPUSH
36205: LD_VAR 0 4
36209: PPUSH
36210: LD_VAR 0 5
36214: PPUSH
36215: CALL 34533 0 3
// end ;
36219: LD_VAR 0 6
36223: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36224: LD_INT 0
36226: PPUSH
36227: PPUSH
36228: PPUSH
36229: PPUSH
36230: PPUSH
36231: PPUSH
36232: PPUSH
36233: PPUSH
36234: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36235: LD_VAR 0 1
36239: NOT
36240: PUSH
36241: LD_VAR 0 2
36245: PPUSH
36246: LD_VAR 0 3
36250: PPUSH
36251: CALL_OW 488
36255: NOT
36256: OR
36257: PUSH
36258: LD_VAR 0 4
36262: NOT
36263: OR
36264: IFFALSE 36268
// exit ;
36266: GO 36608
// list := [ ] ;
36268: LD_ADDR_VAR 0 13
36272: PUSH
36273: EMPTY
36274: ST_TO_ADDR
// if x - r < 0 then
36275: LD_VAR 0 2
36279: PUSH
36280: LD_VAR 0 4
36284: MINUS
36285: PUSH
36286: LD_INT 0
36288: LESS
36289: IFFALSE 36301
// min_x := 0 else
36291: LD_ADDR_VAR 0 7
36295: PUSH
36296: LD_INT 0
36298: ST_TO_ADDR
36299: GO 36317
// min_x := x - r ;
36301: LD_ADDR_VAR 0 7
36305: PUSH
36306: LD_VAR 0 2
36310: PUSH
36311: LD_VAR 0 4
36315: MINUS
36316: ST_TO_ADDR
// if y - r < 0 then
36317: LD_VAR 0 3
36321: PUSH
36322: LD_VAR 0 4
36326: MINUS
36327: PUSH
36328: LD_INT 0
36330: LESS
36331: IFFALSE 36343
// min_y := 0 else
36333: LD_ADDR_VAR 0 8
36337: PUSH
36338: LD_INT 0
36340: ST_TO_ADDR
36341: GO 36359
// min_y := y - r ;
36343: LD_ADDR_VAR 0 8
36347: PUSH
36348: LD_VAR 0 3
36352: PUSH
36353: LD_VAR 0 4
36357: MINUS
36358: ST_TO_ADDR
// max_x := x + r ;
36359: LD_ADDR_VAR 0 9
36363: PUSH
36364: LD_VAR 0 2
36368: PUSH
36369: LD_VAR 0 4
36373: PLUS
36374: ST_TO_ADDR
// max_y := y + r ;
36375: LD_ADDR_VAR 0 10
36379: PUSH
36380: LD_VAR 0 3
36384: PUSH
36385: LD_VAR 0 4
36389: PLUS
36390: ST_TO_ADDR
// for _x = min_x to max_x do
36391: LD_ADDR_VAR 0 11
36395: PUSH
36396: DOUBLE
36397: LD_VAR 0 7
36401: DEC
36402: ST_TO_ADDR
36403: LD_VAR 0 9
36407: PUSH
36408: FOR_TO
36409: IFFALSE 36526
// for _y = min_y to max_y do
36411: LD_ADDR_VAR 0 12
36415: PUSH
36416: DOUBLE
36417: LD_VAR 0 8
36421: DEC
36422: ST_TO_ADDR
36423: LD_VAR 0 10
36427: PUSH
36428: FOR_TO
36429: IFFALSE 36522
// begin if not ValidHex ( _x , _y ) then
36431: LD_VAR 0 11
36435: PPUSH
36436: LD_VAR 0 12
36440: PPUSH
36441: CALL_OW 488
36445: NOT
36446: IFFALSE 36450
// continue ;
36448: GO 36428
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36450: LD_VAR 0 11
36454: PPUSH
36455: LD_VAR 0 12
36459: PPUSH
36460: CALL_OW 351
36464: PUSH
36465: LD_VAR 0 11
36469: PPUSH
36470: LD_VAR 0 12
36474: PPUSH
36475: CALL_OW 554
36479: AND
36480: IFFALSE 36520
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36482: LD_ADDR_VAR 0 13
36486: PUSH
36487: LD_VAR 0 13
36491: PPUSH
36492: LD_VAR 0 13
36496: PUSH
36497: LD_INT 1
36499: PLUS
36500: PPUSH
36501: LD_VAR 0 11
36505: PUSH
36506: LD_VAR 0 12
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PPUSH
36515: CALL_OW 2
36519: ST_TO_ADDR
// end ;
36520: GO 36428
36522: POP
36523: POP
36524: GO 36408
36526: POP
36527: POP
// if not list then
36528: LD_VAR 0 13
36532: NOT
36533: IFFALSE 36537
// exit ;
36535: GO 36608
// for i in list do
36537: LD_ADDR_VAR 0 6
36541: PUSH
36542: LD_VAR 0 13
36546: PUSH
36547: FOR_IN
36548: IFFALSE 36606
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36550: LD_VAR 0 1
36554: PPUSH
36555: LD_STRING M
36557: PUSH
36558: LD_VAR 0 6
36562: PUSH
36563: LD_INT 1
36565: ARRAY
36566: PUSH
36567: LD_VAR 0 6
36571: PUSH
36572: LD_INT 2
36574: ARRAY
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: LD_INT 0
36581: PUSH
36582: LD_INT 0
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: PUSH
36597: EMPTY
36598: LIST
36599: PPUSH
36600: CALL_OW 447
36604: GO 36547
36606: POP
36607: POP
// end ;
36608: LD_VAR 0 5
36612: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36613: LD_EXP 112
36617: NOT
36618: IFFALSE 36668
36620: GO 36622
36622: DISABLE
// begin initHack := true ;
36623: LD_ADDR_EXP 112
36627: PUSH
36628: LD_INT 1
36630: ST_TO_ADDR
// hackTanks := [ ] ;
36631: LD_ADDR_EXP 113
36635: PUSH
36636: EMPTY
36637: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36638: LD_ADDR_EXP 114
36642: PUSH
36643: EMPTY
36644: ST_TO_ADDR
// hackLimit := 3 ;
36645: LD_ADDR_EXP 115
36649: PUSH
36650: LD_INT 3
36652: ST_TO_ADDR
// hackDist := 12 ;
36653: LD_ADDR_EXP 116
36657: PUSH
36658: LD_INT 12
36660: ST_TO_ADDR
// hackCounter := [ ] ;
36661: LD_ADDR_EXP 117
36665: PUSH
36666: EMPTY
36667: ST_TO_ADDR
// end ;
36668: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36669: LD_EXP 112
36673: PUSH
36674: LD_INT 34
36676: PUSH
36677: LD_INT 99
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PPUSH
36684: CALL_OW 69
36688: AND
36689: IFFALSE 36942
36691: GO 36693
36693: DISABLE
36694: LD_INT 0
36696: PPUSH
36697: PPUSH
// begin enable ;
36698: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36699: LD_ADDR_VAR 0 1
36703: PUSH
36704: LD_INT 34
36706: PUSH
36707: LD_INT 99
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PPUSH
36714: CALL_OW 69
36718: PUSH
36719: FOR_IN
36720: IFFALSE 36940
// begin if not i in hackTanks then
36722: LD_VAR 0 1
36726: PUSH
36727: LD_EXP 113
36731: IN
36732: NOT
36733: IFFALSE 36816
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36735: LD_ADDR_EXP 113
36739: PUSH
36740: LD_EXP 113
36744: PPUSH
36745: LD_EXP 113
36749: PUSH
36750: LD_INT 1
36752: PLUS
36753: PPUSH
36754: LD_VAR 0 1
36758: PPUSH
36759: CALL_OW 1
36763: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36764: LD_ADDR_EXP 114
36768: PUSH
36769: LD_EXP 114
36773: PPUSH
36774: LD_EXP 114
36778: PUSH
36779: LD_INT 1
36781: PLUS
36782: PPUSH
36783: EMPTY
36784: PPUSH
36785: CALL_OW 1
36789: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36790: LD_ADDR_EXP 117
36794: PUSH
36795: LD_EXP 117
36799: PPUSH
36800: LD_EXP 117
36804: PUSH
36805: LD_INT 1
36807: PLUS
36808: PPUSH
36809: EMPTY
36810: PPUSH
36811: CALL_OW 1
36815: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36816: LD_VAR 0 1
36820: PPUSH
36821: CALL_OW 302
36825: NOT
36826: IFFALSE 36839
// begin HackUnlinkAll ( i ) ;
36828: LD_VAR 0 1
36832: PPUSH
36833: CALL 36945 0 1
// continue ;
36837: GO 36719
// end ; HackCheckCapturedStatus ( i ) ;
36839: LD_VAR 0 1
36843: PPUSH
36844: CALL 37388 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36848: LD_ADDR_VAR 0 2
36852: PUSH
36853: LD_INT 81
36855: PUSH
36856: LD_VAR 0 1
36860: PPUSH
36861: CALL_OW 255
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 33
36872: PUSH
36873: LD_INT 3
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 91
36882: PUSH
36883: LD_VAR 0 1
36887: PUSH
36888: LD_EXP 116
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 50
36900: PUSH
36901: EMPTY
36902: LIST
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: PPUSH
36910: CALL_OW 69
36914: ST_TO_ADDR
// if not tmp then
36915: LD_VAR 0 2
36919: NOT
36920: IFFALSE 36924
// continue ;
36922: GO 36719
// HackLink ( i , tmp ) ;
36924: LD_VAR 0 1
36928: PPUSH
36929: LD_VAR 0 2
36933: PPUSH
36934: CALL 37081 0 2
// end ;
36938: GO 36719
36940: POP
36941: POP
// end ;
36942: PPOPN 2
36944: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36945: LD_INT 0
36947: PPUSH
36948: PPUSH
36949: PPUSH
// if not hack in hackTanks then
36950: LD_VAR 0 1
36954: PUSH
36955: LD_EXP 113
36959: IN
36960: NOT
36961: IFFALSE 36965
// exit ;
36963: GO 37076
// index := GetElementIndex ( hackTanks , hack ) ;
36965: LD_ADDR_VAR 0 4
36969: PUSH
36970: LD_EXP 113
36974: PPUSH
36975: LD_VAR 0 1
36979: PPUSH
36980: CALL 44693 0 2
36984: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36985: LD_EXP 114
36989: PUSH
36990: LD_VAR 0 4
36994: ARRAY
36995: IFFALSE 37076
// begin for i in hackTanksCaptured [ index ] do
36997: LD_ADDR_VAR 0 3
37001: PUSH
37002: LD_EXP 114
37006: PUSH
37007: LD_VAR 0 4
37011: ARRAY
37012: PUSH
37013: FOR_IN
37014: IFFALSE 37040
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37016: LD_VAR 0 3
37020: PUSH
37021: LD_INT 1
37023: ARRAY
37024: PPUSH
37025: LD_VAR 0 3
37029: PUSH
37030: LD_INT 2
37032: ARRAY
37033: PPUSH
37034: CALL_OW 235
37038: GO 37013
37040: POP
37041: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37042: LD_ADDR_EXP 114
37046: PUSH
37047: LD_EXP 114
37051: PPUSH
37052: LD_VAR 0 4
37056: PPUSH
37057: EMPTY
37058: PPUSH
37059: CALL_OW 1
37063: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37064: LD_VAR 0 1
37068: PPUSH
37069: LD_INT 0
37071: PPUSH
37072: CALL_OW 505
// end ; end ;
37076: LD_VAR 0 2
37080: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37081: LD_INT 0
37083: PPUSH
37084: PPUSH
37085: PPUSH
// if not hack in hackTanks or not vehicles then
37086: LD_VAR 0 1
37090: PUSH
37091: LD_EXP 113
37095: IN
37096: NOT
37097: PUSH
37098: LD_VAR 0 2
37102: NOT
37103: OR
37104: IFFALSE 37108
// exit ;
37106: GO 37383
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37108: LD_ADDR_VAR 0 2
37112: PUSH
37113: LD_VAR 0 1
37117: PPUSH
37118: LD_VAR 0 2
37122: PPUSH
37123: LD_INT 1
37125: PPUSH
37126: LD_INT 1
37128: PPUSH
37129: CALL 45343 0 4
37133: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37134: LD_ADDR_VAR 0 5
37138: PUSH
37139: LD_EXP 113
37143: PPUSH
37144: LD_VAR 0 1
37148: PPUSH
37149: CALL 44693 0 2
37153: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37154: LD_EXP 114
37158: PUSH
37159: LD_VAR 0 5
37163: ARRAY
37164: PUSH
37165: LD_EXP 115
37169: LESS
37170: IFFALSE 37359
// begin for i := 1 to vehicles do
37172: LD_ADDR_VAR 0 4
37176: PUSH
37177: DOUBLE
37178: LD_INT 1
37180: DEC
37181: ST_TO_ADDR
37182: LD_VAR 0 2
37186: PUSH
37187: FOR_TO
37188: IFFALSE 37357
// begin if hackTanksCaptured [ index ] = hackLimit then
37190: LD_EXP 114
37194: PUSH
37195: LD_VAR 0 5
37199: ARRAY
37200: PUSH
37201: LD_EXP 115
37205: EQUAL
37206: IFFALSE 37210
// break ;
37208: GO 37357
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37210: LD_ADDR_EXP 117
37214: PUSH
37215: LD_EXP 117
37219: PPUSH
37220: LD_VAR 0 5
37224: PPUSH
37225: LD_EXP 117
37229: PUSH
37230: LD_VAR 0 5
37234: ARRAY
37235: PUSH
37236: LD_INT 1
37238: PLUS
37239: PPUSH
37240: CALL_OW 1
37244: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37245: LD_ADDR_EXP 114
37249: PUSH
37250: LD_EXP 114
37254: PPUSH
37255: LD_VAR 0 5
37259: PUSH
37260: LD_EXP 114
37264: PUSH
37265: LD_VAR 0 5
37269: ARRAY
37270: PUSH
37271: LD_INT 1
37273: PLUS
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PPUSH
37279: LD_VAR 0 2
37283: PUSH
37284: LD_VAR 0 4
37288: ARRAY
37289: PUSH
37290: LD_VAR 0 2
37294: PUSH
37295: LD_VAR 0 4
37299: ARRAY
37300: PPUSH
37301: CALL_OW 255
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PPUSH
37310: CALL 44908 0 3
37314: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37315: LD_VAR 0 2
37319: PUSH
37320: LD_VAR 0 4
37324: ARRAY
37325: PPUSH
37326: LD_VAR 0 1
37330: PPUSH
37331: CALL_OW 255
37335: PPUSH
37336: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37340: LD_VAR 0 2
37344: PUSH
37345: LD_VAR 0 4
37349: ARRAY
37350: PPUSH
37351: CALL_OW 141
// end ;
37355: GO 37187
37357: POP
37358: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37359: LD_VAR 0 1
37363: PPUSH
37364: LD_EXP 114
37368: PUSH
37369: LD_VAR 0 5
37373: ARRAY
37374: PUSH
37375: LD_INT 0
37377: PLUS
37378: PPUSH
37379: CALL_OW 505
// end ;
37383: LD_VAR 0 3
37387: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37388: LD_INT 0
37390: PPUSH
37391: PPUSH
37392: PPUSH
37393: PPUSH
// if not hack in hackTanks then
37394: LD_VAR 0 1
37398: PUSH
37399: LD_EXP 113
37403: IN
37404: NOT
37405: IFFALSE 37409
// exit ;
37407: GO 37649
// index := GetElementIndex ( hackTanks , hack ) ;
37409: LD_ADDR_VAR 0 4
37413: PUSH
37414: LD_EXP 113
37418: PPUSH
37419: LD_VAR 0 1
37423: PPUSH
37424: CALL 44693 0 2
37428: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37429: LD_ADDR_VAR 0 3
37433: PUSH
37434: DOUBLE
37435: LD_EXP 114
37439: PUSH
37440: LD_VAR 0 4
37444: ARRAY
37445: INC
37446: ST_TO_ADDR
37447: LD_INT 1
37449: PUSH
37450: FOR_DOWNTO
37451: IFFALSE 37623
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37453: LD_ADDR_VAR 0 5
37457: PUSH
37458: LD_EXP 114
37462: PUSH
37463: LD_VAR 0 4
37467: ARRAY
37468: PUSH
37469: LD_VAR 0 3
37473: ARRAY
37474: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37475: LD_VAR 0 5
37479: PUSH
37480: LD_INT 1
37482: ARRAY
37483: PPUSH
37484: CALL_OW 302
37488: NOT
37489: PUSH
37490: LD_VAR 0 5
37494: PUSH
37495: LD_INT 1
37497: ARRAY
37498: PPUSH
37499: CALL_OW 255
37503: PUSH
37504: LD_VAR 0 1
37508: PPUSH
37509: CALL_OW 255
37513: NONEQUAL
37514: OR
37515: IFFALSE 37621
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37517: LD_VAR 0 5
37521: PUSH
37522: LD_INT 1
37524: ARRAY
37525: PPUSH
37526: CALL_OW 305
37530: PUSH
37531: LD_VAR 0 5
37535: PUSH
37536: LD_INT 1
37538: ARRAY
37539: PPUSH
37540: CALL_OW 255
37544: PUSH
37545: LD_VAR 0 1
37549: PPUSH
37550: CALL_OW 255
37554: EQUAL
37555: AND
37556: IFFALSE 37580
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37558: LD_VAR 0 5
37562: PUSH
37563: LD_INT 1
37565: ARRAY
37566: PPUSH
37567: LD_VAR 0 5
37571: PUSH
37572: LD_INT 2
37574: ARRAY
37575: PPUSH
37576: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37580: LD_ADDR_EXP 114
37584: PUSH
37585: LD_EXP 114
37589: PPUSH
37590: LD_VAR 0 4
37594: PPUSH
37595: LD_EXP 114
37599: PUSH
37600: LD_VAR 0 4
37604: ARRAY
37605: PPUSH
37606: LD_VAR 0 3
37610: PPUSH
37611: CALL_OW 3
37615: PPUSH
37616: CALL_OW 1
37620: ST_TO_ADDR
// end ; end ;
37621: GO 37450
37623: POP
37624: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37625: LD_VAR 0 1
37629: PPUSH
37630: LD_EXP 114
37634: PUSH
37635: LD_VAR 0 4
37639: ARRAY
37640: PUSH
37641: LD_INT 0
37643: PLUS
37644: PPUSH
37645: CALL_OW 505
// end ;
37649: LD_VAR 0 2
37653: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37654: LD_INT 0
37656: PPUSH
37657: PPUSH
37658: PPUSH
37659: PPUSH
// if not hack in hackTanks then
37660: LD_VAR 0 1
37664: PUSH
37665: LD_EXP 113
37669: IN
37670: NOT
37671: IFFALSE 37675
// exit ;
37673: GO 37760
// index := GetElementIndex ( hackTanks , hack ) ;
37675: LD_ADDR_VAR 0 5
37679: PUSH
37680: LD_EXP 113
37684: PPUSH
37685: LD_VAR 0 1
37689: PPUSH
37690: CALL 44693 0 2
37694: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37695: LD_ADDR_VAR 0 4
37699: PUSH
37700: DOUBLE
37701: LD_INT 1
37703: DEC
37704: ST_TO_ADDR
37705: LD_EXP 114
37709: PUSH
37710: LD_VAR 0 5
37714: ARRAY
37715: PUSH
37716: FOR_TO
37717: IFFALSE 37758
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37719: LD_EXP 114
37723: PUSH
37724: LD_VAR 0 5
37728: ARRAY
37729: PUSH
37730: LD_VAR 0 4
37734: ARRAY
37735: PUSH
37736: LD_INT 1
37738: ARRAY
37739: PUSH
37740: LD_VAR 0 2
37744: EQUAL
37745: IFFALSE 37756
// KillUnit ( vehicle ) ;
37747: LD_VAR 0 2
37751: PPUSH
37752: CALL_OW 66
37756: GO 37716
37758: POP
37759: POP
// end ;
37760: LD_VAR 0 3
37764: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37765: LD_EXP 118
37769: NOT
37770: IFFALSE 37805
37772: GO 37774
37774: DISABLE
// begin initMiner := true ;
37775: LD_ADDR_EXP 118
37779: PUSH
37780: LD_INT 1
37782: ST_TO_ADDR
// minersList := [ ] ;
37783: LD_ADDR_EXP 119
37787: PUSH
37788: EMPTY
37789: ST_TO_ADDR
// minerMinesList := [ ] ;
37790: LD_ADDR_EXP 120
37794: PUSH
37795: EMPTY
37796: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37797: LD_ADDR_EXP 121
37801: PUSH
37802: LD_INT 5
37804: ST_TO_ADDR
// end ;
37805: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37806: LD_EXP 118
37810: PUSH
37811: LD_INT 34
37813: PUSH
37814: LD_INT 81
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PPUSH
37821: CALL_OW 69
37825: AND
37826: IFFALSE 38287
37828: GO 37830
37830: DISABLE
37831: LD_INT 0
37833: PPUSH
37834: PPUSH
37835: PPUSH
37836: PPUSH
// begin enable ;
37837: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37838: LD_ADDR_VAR 0 1
37842: PUSH
37843: LD_INT 34
37845: PUSH
37846: LD_INT 81
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PPUSH
37853: CALL_OW 69
37857: PUSH
37858: FOR_IN
37859: IFFALSE 37931
// begin if not i in minersList then
37861: LD_VAR 0 1
37865: PUSH
37866: LD_EXP 119
37870: IN
37871: NOT
37872: IFFALSE 37929
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37874: LD_ADDR_EXP 119
37878: PUSH
37879: LD_EXP 119
37883: PPUSH
37884: LD_EXP 119
37888: PUSH
37889: LD_INT 1
37891: PLUS
37892: PPUSH
37893: LD_VAR 0 1
37897: PPUSH
37898: CALL_OW 1
37902: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37903: LD_ADDR_EXP 120
37907: PUSH
37908: LD_EXP 120
37912: PPUSH
37913: LD_EXP 120
37917: PUSH
37918: LD_INT 1
37920: PLUS
37921: PPUSH
37922: EMPTY
37923: PPUSH
37924: CALL_OW 1
37928: ST_TO_ADDR
// end end ;
37929: GO 37858
37931: POP
37932: POP
// for i := minerMinesList downto 1 do
37933: LD_ADDR_VAR 0 1
37937: PUSH
37938: DOUBLE
37939: LD_EXP 120
37943: INC
37944: ST_TO_ADDR
37945: LD_INT 1
37947: PUSH
37948: FOR_DOWNTO
37949: IFFALSE 38285
// begin if IsLive ( minersList [ i ] ) then
37951: LD_EXP 119
37955: PUSH
37956: LD_VAR 0 1
37960: ARRAY
37961: PPUSH
37962: CALL_OW 300
37966: IFFALSE 37994
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37968: LD_EXP 119
37972: PUSH
37973: LD_VAR 0 1
37977: ARRAY
37978: PPUSH
37979: LD_EXP 120
37983: PUSH
37984: LD_VAR 0 1
37988: ARRAY
37989: PPUSH
37990: CALL_OW 505
// if not minerMinesList [ i ] then
37994: LD_EXP 120
37998: PUSH
37999: LD_VAR 0 1
38003: ARRAY
38004: NOT
38005: IFFALSE 38009
// continue ;
38007: GO 37948
// for j := minerMinesList [ i ] downto 1 do
38009: LD_ADDR_VAR 0 2
38013: PUSH
38014: DOUBLE
38015: LD_EXP 120
38019: PUSH
38020: LD_VAR 0 1
38024: ARRAY
38025: INC
38026: ST_TO_ADDR
38027: LD_INT 1
38029: PUSH
38030: FOR_DOWNTO
38031: IFFALSE 38281
// begin side := GetSide ( minersList [ i ] ) ;
38033: LD_ADDR_VAR 0 3
38037: PUSH
38038: LD_EXP 119
38042: PUSH
38043: LD_VAR 0 1
38047: ARRAY
38048: PPUSH
38049: CALL_OW 255
38053: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38054: LD_ADDR_VAR 0 4
38058: PUSH
38059: LD_EXP 120
38063: PUSH
38064: LD_VAR 0 1
38068: ARRAY
38069: PUSH
38070: LD_VAR 0 2
38074: ARRAY
38075: PUSH
38076: LD_INT 1
38078: ARRAY
38079: PPUSH
38080: LD_EXP 120
38084: PUSH
38085: LD_VAR 0 1
38089: ARRAY
38090: PUSH
38091: LD_VAR 0 2
38095: ARRAY
38096: PUSH
38097: LD_INT 2
38099: ARRAY
38100: PPUSH
38101: CALL_OW 428
38105: ST_TO_ADDR
// if not tmp then
38106: LD_VAR 0 4
38110: NOT
38111: IFFALSE 38115
// continue ;
38113: GO 38030
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38115: LD_VAR 0 4
38119: PUSH
38120: LD_INT 81
38122: PUSH
38123: LD_VAR 0 3
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PPUSH
38132: CALL_OW 69
38136: IN
38137: PUSH
38138: LD_EXP 120
38142: PUSH
38143: LD_VAR 0 1
38147: ARRAY
38148: PUSH
38149: LD_VAR 0 2
38153: ARRAY
38154: PUSH
38155: LD_INT 1
38157: ARRAY
38158: PPUSH
38159: LD_EXP 120
38163: PUSH
38164: LD_VAR 0 1
38168: ARRAY
38169: PUSH
38170: LD_VAR 0 2
38174: ARRAY
38175: PUSH
38176: LD_INT 2
38178: ARRAY
38179: PPUSH
38180: CALL_OW 458
38184: AND
38185: IFFALSE 38279
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38187: LD_EXP 120
38191: PUSH
38192: LD_VAR 0 1
38196: ARRAY
38197: PUSH
38198: LD_VAR 0 2
38202: ARRAY
38203: PUSH
38204: LD_INT 1
38206: ARRAY
38207: PPUSH
38208: LD_EXP 120
38212: PUSH
38213: LD_VAR 0 1
38217: ARRAY
38218: PUSH
38219: LD_VAR 0 2
38223: ARRAY
38224: PUSH
38225: LD_INT 2
38227: ARRAY
38228: PPUSH
38229: LD_VAR 0 3
38233: PPUSH
38234: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38238: LD_ADDR_EXP 120
38242: PUSH
38243: LD_EXP 120
38247: PPUSH
38248: LD_VAR 0 1
38252: PPUSH
38253: LD_EXP 120
38257: PUSH
38258: LD_VAR 0 1
38262: ARRAY
38263: PPUSH
38264: LD_VAR 0 2
38268: PPUSH
38269: CALL_OW 3
38273: PPUSH
38274: CALL_OW 1
38278: ST_TO_ADDR
// end ; end ;
38279: GO 38030
38281: POP
38282: POP
// end ;
38283: GO 37948
38285: POP
38286: POP
// end ;
38287: PPOPN 4
38289: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38290: LD_INT 0
38292: PPUSH
38293: PPUSH
// result := false ;
38294: LD_ADDR_VAR 0 4
38298: PUSH
38299: LD_INT 0
38301: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38302: LD_VAR 0 1
38306: PPUSH
38307: CALL_OW 264
38311: PUSH
38312: LD_INT 81
38314: EQUAL
38315: NOT
38316: IFFALSE 38320
// exit ;
38318: GO 38560
// index := GetElementIndex ( minersList , unit ) ;
38320: LD_ADDR_VAR 0 5
38324: PUSH
38325: LD_EXP 119
38329: PPUSH
38330: LD_VAR 0 1
38334: PPUSH
38335: CALL 44693 0 2
38339: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38340: LD_EXP 120
38344: PUSH
38345: LD_VAR 0 5
38349: ARRAY
38350: PUSH
38351: LD_EXP 121
38355: GREATEREQUAL
38356: IFFALSE 38360
// exit ;
38358: GO 38560
// ComMoveXY ( unit , x , y ) ;
38360: LD_VAR 0 1
38364: PPUSH
38365: LD_VAR 0 2
38369: PPUSH
38370: LD_VAR 0 3
38374: PPUSH
38375: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38379: LD_INT 35
38381: PPUSH
38382: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38386: LD_VAR 0 1
38390: PPUSH
38391: LD_VAR 0 2
38395: PPUSH
38396: LD_VAR 0 3
38400: PPUSH
38401: CALL 76048 0 3
38405: NOT
38406: PUSH
38407: LD_VAR 0 1
38411: PPUSH
38412: CALL_OW 314
38416: AND
38417: IFFALSE 38421
// exit ;
38419: GO 38560
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38421: LD_VAR 0 2
38425: PPUSH
38426: LD_VAR 0 3
38430: PPUSH
38431: CALL_OW 428
38435: PUSH
38436: LD_VAR 0 1
38440: EQUAL
38441: PUSH
38442: LD_VAR 0 1
38446: PPUSH
38447: CALL_OW 314
38451: NOT
38452: AND
38453: IFFALSE 38379
// PlaySoundXY ( x , y , PlantMine ) ;
38455: LD_VAR 0 2
38459: PPUSH
38460: LD_VAR 0 3
38464: PPUSH
38465: LD_STRING PlantMine
38467: PPUSH
38468: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38472: LD_VAR 0 2
38476: PPUSH
38477: LD_VAR 0 3
38481: PPUSH
38482: LD_VAR 0 1
38486: PPUSH
38487: CALL_OW 255
38491: PPUSH
38492: LD_INT 0
38494: PPUSH
38495: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38499: LD_ADDR_EXP 120
38503: PUSH
38504: LD_EXP 120
38508: PPUSH
38509: LD_VAR 0 5
38513: PUSH
38514: LD_EXP 120
38518: PUSH
38519: LD_VAR 0 5
38523: ARRAY
38524: PUSH
38525: LD_INT 1
38527: PLUS
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PPUSH
38533: LD_VAR 0 2
38537: PUSH
38538: LD_VAR 0 3
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PPUSH
38547: CALL 44908 0 3
38551: ST_TO_ADDR
// result := true ;
38552: LD_ADDR_VAR 0 4
38556: PUSH
38557: LD_INT 1
38559: ST_TO_ADDR
// end ;
38560: LD_VAR 0 4
38564: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38565: LD_INT 0
38567: PPUSH
38568: PPUSH
38569: PPUSH
// if not unit in minersList then
38570: LD_VAR 0 1
38574: PUSH
38575: LD_EXP 119
38579: IN
38580: NOT
38581: IFFALSE 38585
// exit ;
38583: GO 38977
// index := GetElementIndex ( minersList , unit ) ;
38585: LD_ADDR_VAR 0 6
38589: PUSH
38590: LD_EXP 119
38594: PPUSH
38595: LD_VAR 0 1
38599: PPUSH
38600: CALL 44693 0 2
38604: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38605: LD_ADDR_VAR 0 5
38609: PUSH
38610: DOUBLE
38611: LD_EXP 120
38615: PUSH
38616: LD_VAR 0 6
38620: ARRAY
38621: INC
38622: ST_TO_ADDR
38623: LD_INT 1
38625: PUSH
38626: FOR_DOWNTO
38627: IFFALSE 38788
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38629: LD_EXP 120
38633: PUSH
38634: LD_VAR 0 6
38638: ARRAY
38639: PUSH
38640: LD_VAR 0 5
38644: ARRAY
38645: PUSH
38646: LD_INT 1
38648: ARRAY
38649: PUSH
38650: LD_VAR 0 2
38654: EQUAL
38655: PUSH
38656: LD_EXP 120
38660: PUSH
38661: LD_VAR 0 6
38665: ARRAY
38666: PUSH
38667: LD_VAR 0 5
38671: ARRAY
38672: PUSH
38673: LD_INT 2
38675: ARRAY
38676: PUSH
38677: LD_VAR 0 3
38681: EQUAL
38682: AND
38683: IFFALSE 38786
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38685: LD_EXP 120
38689: PUSH
38690: LD_VAR 0 6
38694: ARRAY
38695: PUSH
38696: LD_VAR 0 5
38700: ARRAY
38701: PUSH
38702: LD_INT 1
38704: ARRAY
38705: PPUSH
38706: LD_EXP 120
38710: PUSH
38711: LD_VAR 0 6
38715: ARRAY
38716: PUSH
38717: LD_VAR 0 5
38721: ARRAY
38722: PUSH
38723: LD_INT 2
38725: ARRAY
38726: PPUSH
38727: LD_VAR 0 1
38731: PPUSH
38732: CALL_OW 255
38736: PPUSH
38737: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38741: LD_ADDR_EXP 120
38745: PUSH
38746: LD_EXP 120
38750: PPUSH
38751: LD_VAR 0 6
38755: PPUSH
38756: LD_EXP 120
38760: PUSH
38761: LD_VAR 0 6
38765: ARRAY
38766: PPUSH
38767: LD_VAR 0 5
38771: PPUSH
38772: CALL_OW 3
38776: PPUSH
38777: CALL_OW 1
38781: ST_TO_ADDR
// exit ;
38782: POP
38783: POP
38784: GO 38977
// end ; end ;
38786: GO 38626
38788: POP
38789: POP
// for i := minerMinesList [ index ] downto 1 do
38790: LD_ADDR_VAR 0 5
38794: PUSH
38795: DOUBLE
38796: LD_EXP 120
38800: PUSH
38801: LD_VAR 0 6
38805: ARRAY
38806: INC
38807: ST_TO_ADDR
38808: LD_INT 1
38810: PUSH
38811: FOR_DOWNTO
38812: IFFALSE 38975
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38814: LD_EXP 120
38818: PUSH
38819: LD_VAR 0 6
38823: ARRAY
38824: PUSH
38825: LD_VAR 0 5
38829: ARRAY
38830: PUSH
38831: LD_INT 1
38833: ARRAY
38834: PPUSH
38835: LD_EXP 120
38839: PUSH
38840: LD_VAR 0 6
38844: ARRAY
38845: PUSH
38846: LD_VAR 0 5
38850: ARRAY
38851: PUSH
38852: LD_INT 2
38854: ARRAY
38855: PPUSH
38856: LD_VAR 0 2
38860: PPUSH
38861: LD_VAR 0 3
38865: PPUSH
38866: CALL_OW 298
38870: PUSH
38871: LD_INT 6
38873: LESS
38874: IFFALSE 38973
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38876: LD_EXP 120
38880: PUSH
38881: LD_VAR 0 6
38885: ARRAY
38886: PUSH
38887: LD_VAR 0 5
38891: ARRAY
38892: PUSH
38893: LD_INT 1
38895: ARRAY
38896: PPUSH
38897: LD_EXP 120
38901: PUSH
38902: LD_VAR 0 6
38906: ARRAY
38907: PUSH
38908: LD_VAR 0 5
38912: ARRAY
38913: PUSH
38914: LD_INT 2
38916: ARRAY
38917: PPUSH
38918: LD_VAR 0 1
38922: PPUSH
38923: CALL_OW 255
38927: PPUSH
38928: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38932: LD_ADDR_EXP 120
38936: PUSH
38937: LD_EXP 120
38941: PPUSH
38942: LD_VAR 0 6
38946: PPUSH
38947: LD_EXP 120
38951: PUSH
38952: LD_VAR 0 6
38956: ARRAY
38957: PPUSH
38958: LD_VAR 0 5
38962: PPUSH
38963: CALL_OW 3
38967: PPUSH
38968: CALL_OW 1
38972: ST_TO_ADDR
// end ; end ;
38973: GO 38811
38975: POP
38976: POP
// end ;
38977: LD_VAR 0 4
38981: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38982: LD_INT 0
38984: PPUSH
38985: PPUSH
38986: PPUSH
38987: PPUSH
38988: PPUSH
38989: PPUSH
38990: PPUSH
38991: PPUSH
38992: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38993: LD_VAR 0 1
38997: PPUSH
38998: CALL_OW 264
39002: PUSH
39003: LD_INT 81
39005: EQUAL
39006: NOT
39007: PUSH
39008: LD_VAR 0 1
39012: PUSH
39013: LD_EXP 119
39017: IN
39018: NOT
39019: OR
39020: IFFALSE 39024
// exit ;
39022: GO 39346
// index := GetElementIndex ( minersList , unit ) ;
39024: LD_ADDR_VAR 0 6
39028: PUSH
39029: LD_EXP 119
39033: PPUSH
39034: LD_VAR 0 1
39038: PPUSH
39039: CALL 44693 0 2
39043: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39044: LD_ADDR_VAR 0 8
39048: PUSH
39049: LD_EXP 121
39053: PUSH
39054: LD_EXP 120
39058: PUSH
39059: LD_VAR 0 6
39063: ARRAY
39064: MINUS
39065: ST_TO_ADDR
// if not minesFreeAmount then
39066: LD_VAR 0 8
39070: NOT
39071: IFFALSE 39075
// exit ;
39073: GO 39346
// tmp := [ ] ;
39075: LD_ADDR_VAR 0 7
39079: PUSH
39080: EMPTY
39081: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39082: LD_ADDR_VAR 0 5
39086: PUSH
39087: DOUBLE
39088: LD_INT 1
39090: DEC
39091: ST_TO_ADDR
39092: LD_VAR 0 8
39096: PUSH
39097: FOR_TO
39098: IFFALSE 39293
// begin _d := rand ( 0 , 5 ) ;
39100: LD_ADDR_VAR 0 11
39104: PUSH
39105: LD_INT 0
39107: PPUSH
39108: LD_INT 5
39110: PPUSH
39111: CALL_OW 12
39115: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39116: LD_ADDR_VAR 0 12
39120: PUSH
39121: LD_INT 2
39123: PPUSH
39124: LD_INT 6
39126: PPUSH
39127: CALL_OW 12
39131: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39132: LD_ADDR_VAR 0 9
39136: PUSH
39137: LD_VAR 0 2
39141: PPUSH
39142: LD_VAR 0 11
39146: PPUSH
39147: LD_VAR 0 12
39151: PPUSH
39152: CALL_OW 272
39156: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39157: LD_ADDR_VAR 0 10
39161: PUSH
39162: LD_VAR 0 3
39166: PPUSH
39167: LD_VAR 0 11
39171: PPUSH
39172: LD_VAR 0 12
39176: PPUSH
39177: CALL_OW 273
39181: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39182: LD_VAR 0 9
39186: PPUSH
39187: LD_VAR 0 10
39191: PPUSH
39192: CALL_OW 488
39196: PUSH
39197: LD_VAR 0 9
39201: PUSH
39202: LD_VAR 0 10
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_VAR 0 7
39215: IN
39216: NOT
39217: AND
39218: PUSH
39219: LD_VAR 0 9
39223: PPUSH
39224: LD_VAR 0 10
39228: PPUSH
39229: CALL_OW 458
39233: NOT
39234: AND
39235: IFFALSE 39277
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39237: LD_ADDR_VAR 0 7
39241: PUSH
39242: LD_VAR 0 7
39246: PPUSH
39247: LD_VAR 0 7
39251: PUSH
39252: LD_INT 1
39254: PLUS
39255: PPUSH
39256: LD_VAR 0 9
39260: PUSH
39261: LD_VAR 0 10
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PPUSH
39270: CALL_OW 1
39274: ST_TO_ADDR
39275: GO 39291
// i := i - 1 ;
39277: LD_ADDR_VAR 0 5
39281: PUSH
39282: LD_VAR 0 5
39286: PUSH
39287: LD_INT 1
39289: MINUS
39290: ST_TO_ADDR
// end ;
39291: GO 39097
39293: POP
39294: POP
// for i in tmp do
39295: LD_ADDR_VAR 0 5
39299: PUSH
39300: LD_VAR 0 7
39304: PUSH
39305: FOR_IN
39306: IFFALSE 39344
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39308: LD_VAR 0 1
39312: PPUSH
39313: LD_VAR 0 5
39317: PUSH
39318: LD_INT 1
39320: ARRAY
39321: PPUSH
39322: LD_VAR 0 5
39326: PUSH
39327: LD_INT 2
39329: ARRAY
39330: PPUSH
39331: CALL 38290 0 3
39335: NOT
39336: IFFALSE 39342
// exit ;
39338: POP
39339: POP
39340: GO 39346
39342: GO 39305
39344: POP
39345: POP
// end ;
39346: LD_VAR 0 4
39350: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39351: LD_INT 0
39353: PPUSH
39354: PPUSH
39355: PPUSH
39356: PPUSH
39357: PPUSH
39358: PPUSH
39359: PPUSH
// if not GetClass ( unit ) = class_sniper then
39360: LD_VAR 0 1
39364: PPUSH
39365: CALL_OW 257
39369: PUSH
39370: LD_INT 5
39372: EQUAL
39373: NOT
39374: IFFALSE 39378
// exit ;
39376: GO 39766
// dist := 8 ;
39378: LD_ADDR_VAR 0 5
39382: PUSH
39383: LD_INT 8
39385: ST_TO_ADDR
// viewRange := 12 ;
39386: LD_ADDR_VAR 0 7
39390: PUSH
39391: LD_INT 12
39393: ST_TO_ADDR
// side := GetSide ( unit ) ;
39394: LD_ADDR_VAR 0 6
39398: PUSH
39399: LD_VAR 0 1
39403: PPUSH
39404: CALL_OW 255
39408: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39409: LD_INT 61
39411: PPUSH
39412: LD_VAR 0 6
39416: PPUSH
39417: CALL_OW 321
39421: PUSH
39422: LD_INT 2
39424: EQUAL
39425: IFFALSE 39435
// viewRange := 16 ;
39427: LD_ADDR_VAR 0 7
39431: PUSH
39432: LD_INT 16
39434: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39435: LD_VAR 0 1
39439: PPUSH
39440: LD_VAR 0 2
39444: PPUSH
39445: LD_VAR 0 3
39449: PPUSH
39450: CALL_OW 297
39454: PUSH
39455: LD_VAR 0 5
39459: GREATER
39460: IFFALSE 39539
// begin ComMoveXY ( unit , x , y ) ;
39462: LD_VAR 0 1
39466: PPUSH
39467: LD_VAR 0 2
39471: PPUSH
39472: LD_VAR 0 3
39476: PPUSH
39477: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39481: LD_INT 35
39483: PPUSH
39484: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39488: LD_VAR 0 1
39492: PPUSH
39493: LD_VAR 0 2
39497: PPUSH
39498: LD_VAR 0 3
39502: PPUSH
39503: CALL 76048 0 3
39507: NOT
39508: IFFALSE 39512
// exit ;
39510: GO 39766
// until GetDistUnitXY ( unit , x , y ) < dist ;
39512: LD_VAR 0 1
39516: PPUSH
39517: LD_VAR 0 2
39521: PPUSH
39522: LD_VAR 0 3
39526: PPUSH
39527: CALL_OW 297
39531: PUSH
39532: LD_VAR 0 5
39536: LESS
39537: IFFALSE 39481
// end ; ComTurnXY ( unit , x , y ) ;
39539: LD_VAR 0 1
39543: PPUSH
39544: LD_VAR 0 2
39548: PPUSH
39549: LD_VAR 0 3
39553: PPUSH
39554: CALL_OW 118
// wait ( 5 ) ;
39558: LD_INT 5
39560: PPUSH
39561: CALL_OW 67
// _d := GetDir ( unit ) ;
39565: LD_ADDR_VAR 0 10
39569: PUSH
39570: LD_VAR 0 1
39574: PPUSH
39575: CALL_OW 254
39579: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39580: LD_ADDR_VAR 0 8
39584: PUSH
39585: LD_VAR 0 1
39589: PPUSH
39590: CALL_OW 250
39594: PPUSH
39595: LD_VAR 0 10
39599: PPUSH
39600: LD_VAR 0 5
39604: PPUSH
39605: CALL_OW 272
39609: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39610: LD_ADDR_VAR 0 9
39614: PUSH
39615: LD_VAR 0 1
39619: PPUSH
39620: CALL_OW 251
39624: PPUSH
39625: LD_VAR 0 10
39629: PPUSH
39630: LD_VAR 0 5
39634: PPUSH
39635: CALL_OW 273
39639: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39640: LD_VAR 0 8
39644: PPUSH
39645: LD_VAR 0 9
39649: PPUSH
39650: CALL_OW 488
39654: NOT
39655: IFFALSE 39659
// exit ;
39657: GO 39766
// ComAnimCustom ( unit , 1 ) ;
39659: LD_VAR 0 1
39663: PPUSH
39664: LD_INT 1
39666: PPUSH
39667: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39671: LD_VAR 0 8
39675: PPUSH
39676: LD_VAR 0 9
39680: PPUSH
39681: LD_VAR 0 6
39685: PPUSH
39686: LD_VAR 0 7
39690: PPUSH
39691: CALL_OW 330
// repeat wait ( 1 ) ;
39695: LD_INT 1
39697: PPUSH
39698: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39702: LD_VAR 0 1
39706: PPUSH
39707: CALL_OW 316
39711: PUSH
39712: LD_VAR 0 1
39716: PPUSH
39717: CALL_OW 314
39721: OR
39722: PUSH
39723: LD_VAR 0 1
39727: PPUSH
39728: CALL_OW 302
39732: NOT
39733: OR
39734: PUSH
39735: LD_VAR 0 1
39739: PPUSH
39740: CALL_OW 301
39744: OR
39745: IFFALSE 39695
// RemoveSeeing ( _x , _y , side ) ;
39747: LD_VAR 0 8
39751: PPUSH
39752: LD_VAR 0 9
39756: PPUSH
39757: LD_VAR 0 6
39761: PPUSH
39762: CALL_OW 331
// end ; end_of_file
39766: LD_VAR 0 4
39770: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39771: LD_INT 0
39773: PPUSH
39774: PPUSH
// if exist_mode then
39775: LD_VAR 0 2
39779: IFFALSE 39804
// unit := CreateCharacter ( prefix & ident ) else
39781: LD_ADDR_VAR 0 5
39785: PUSH
39786: LD_VAR 0 3
39790: PUSH
39791: LD_VAR 0 1
39795: STR
39796: PPUSH
39797: CALL_OW 34
39801: ST_TO_ADDR
39802: GO 39819
// unit := NewCharacter ( ident ) ;
39804: LD_ADDR_VAR 0 5
39808: PUSH
39809: LD_VAR 0 1
39813: PPUSH
39814: CALL_OW 25
39818: ST_TO_ADDR
// result := unit ;
39819: LD_ADDR_VAR 0 4
39823: PUSH
39824: LD_VAR 0 5
39828: ST_TO_ADDR
// end ;
39829: LD_VAR 0 4
39833: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39834: LD_INT 0
39836: PPUSH
39837: PPUSH
// if not side or not nation then
39838: LD_VAR 0 1
39842: NOT
39843: PUSH
39844: LD_VAR 0 2
39848: NOT
39849: OR
39850: IFFALSE 39854
// exit ;
39852: GO 40622
// case nation of nation_american :
39854: LD_VAR 0 2
39858: PUSH
39859: LD_INT 1
39861: DOUBLE
39862: EQUAL
39863: IFTRUE 39867
39865: GO 40081
39867: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39868: LD_ADDR_VAR 0 4
39872: PUSH
39873: LD_INT 35
39875: PUSH
39876: LD_INT 45
39878: PUSH
39879: LD_INT 46
39881: PUSH
39882: LD_INT 47
39884: PUSH
39885: LD_INT 82
39887: PUSH
39888: LD_INT 83
39890: PUSH
39891: LD_INT 84
39893: PUSH
39894: LD_INT 85
39896: PUSH
39897: LD_INT 86
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: LD_INT 6
39908: PUSH
39909: LD_INT 15
39911: PUSH
39912: LD_INT 16
39914: PUSH
39915: LD_INT 7
39917: PUSH
39918: LD_INT 12
39920: PUSH
39921: LD_INT 13
39923: PUSH
39924: LD_INT 10
39926: PUSH
39927: LD_INT 14
39929: PUSH
39930: LD_INT 20
39932: PUSH
39933: LD_INT 21
39935: PUSH
39936: LD_INT 22
39938: PUSH
39939: LD_INT 25
39941: PUSH
39942: LD_INT 32
39944: PUSH
39945: LD_INT 27
39947: PUSH
39948: LD_INT 36
39950: PUSH
39951: LD_INT 69
39953: PUSH
39954: LD_INT 39
39956: PUSH
39957: LD_INT 34
39959: PUSH
39960: LD_INT 40
39962: PUSH
39963: LD_INT 48
39965: PUSH
39966: LD_INT 49
39968: PUSH
39969: LD_INT 50
39971: PUSH
39972: LD_INT 51
39974: PUSH
39975: LD_INT 52
39977: PUSH
39978: LD_INT 53
39980: PUSH
39981: LD_INT 54
39983: PUSH
39984: LD_INT 55
39986: PUSH
39987: LD_INT 56
39989: PUSH
39990: LD_INT 57
39992: PUSH
39993: LD_INT 58
39995: PUSH
39996: LD_INT 59
39998: PUSH
39999: LD_INT 60
40001: PUSH
40002: LD_INT 61
40004: PUSH
40005: LD_INT 62
40007: PUSH
40008: LD_INT 80
40010: PUSH
40011: LD_INT 82
40013: PUSH
40014: LD_INT 83
40016: PUSH
40017: LD_INT 84
40019: PUSH
40020: LD_INT 85
40022: PUSH
40023: LD_INT 86
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: ST_TO_ADDR
40079: GO 40546
40081: LD_INT 2
40083: DOUBLE
40084: EQUAL
40085: IFTRUE 40089
40087: GO 40315
40089: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40090: LD_ADDR_VAR 0 4
40094: PUSH
40095: LD_INT 35
40097: PUSH
40098: LD_INT 45
40100: PUSH
40101: LD_INT 46
40103: PUSH
40104: LD_INT 47
40106: PUSH
40107: LD_INT 82
40109: PUSH
40110: LD_INT 83
40112: PUSH
40113: LD_INT 84
40115: PUSH
40116: LD_INT 85
40118: PUSH
40119: LD_INT 87
40121: PUSH
40122: LD_INT 70
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: LD_INT 11
40130: PUSH
40131: LD_INT 3
40133: PUSH
40134: LD_INT 4
40136: PUSH
40137: LD_INT 5
40139: PUSH
40140: LD_INT 6
40142: PUSH
40143: LD_INT 15
40145: PUSH
40146: LD_INT 18
40148: PUSH
40149: LD_INT 7
40151: PUSH
40152: LD_INT 17
40154: PUSH
40155: LD_INT 8
40157: PUSH
40158: LD_INT 20
40160: PUSH
40161: LD_INT 21
40163: PUSH
40164: LD_INT 22
40166: PUSH
40167: LD_INT 72
40169: PUSH
40170: LD_INT 26
40172: PUSH
40173: LD_INT 69
40175: PUSH
40176: LD_INT 39
40178: PUSH
40179: LD_INT 40
40181: PUSH
40182: LD_INT 41
40184: PUSH
40185: LD_INT 42
40187: PUSH
40188: LD_INT 43
40190: PUSH
40191: LD_INT 48
40193: PUSH
40194: LD_INT 49
40196: PUSH
40197: LD_INT 50
40199: PUSH
40200: LD_INT 51
40202: PUSH
40203: LD_INT 52
40205: PUSH
40206: LD_INT 53
40208: PUSH
40209: LD_INT 54
40211: PUSH
40212: LD_INT 55
40214: PUSH
40215: LD_INT 56
40217: PUSH
40218: LD_INT 60
40220: PUSH
40221: LD_INT 61
40223: PUSH
40224: LD_INT 62
40226: PUSH
40227: LD_INT 66
40229: PUSH
40230: LD_INT 67
40232: PUSH
40233: LD_INT 68
40235: PUSH
40236: LD_INT 81
40238: PUSH
40239: LD_INT 82
40241: PUSH
40242: LD_INT 83
40244: PUSH
40245: LD_INT 84
40247: PUSH
40248: LD_INT 85
40250: PUSH
40251: LD_INT 87
40253: PUSH
40254: LD_INT 88
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: ST_TO_ADDR
40313: GO 40546
40315: LD_INT 3
40317: DOUBLE
40318: EQUAL
40319: IFTRUE 40323
40321: GO 40545
40323: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40324: LD_ADDR_VAR 0 4
40328: PUSH
40329: LD_INT 46
40331: PUSH
40332: LD_INT 47
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: LD_INT 82
40343: PUSH
40344: LD_INT 83
40346: PUSH
40347: LD_INT 84
40349: PUSH
40350: LD_INT 85
40352: PUSH
40353: LD_INT 86
40355: PUSH
40356: LD_INT 11
40358: PUSH
40359: LD_INT 9
40361: PUSH
40362: LD_INT 20
40364: PUSH
40365: LD_INT 19
40367: PUSH
40368: LD_INT 21
40370: PUSH
40371: LD_INT 24
40373: PUSH
40374: LD_INT 22
40376: PUSH
40377: LD_INT 25
40379: PUSH
40380: LD_INT 28
40382: PUSH
40383: LD_INT 29
40385: PUSH
40386: LD_INT 30
40388: PUSH
40389: LD_INT 31
40391: PUSH
40392: LD_INT 37
40394: PUSH
40395: LD_INT 38
40397: PUSH
40398: LD_INT 32
40400: PUSH
40401: LD_INT 27
40403: PUSH
40404: LD_INT 33
40406: PUSH
40407: LD_INT 69
40409: PUSH
40410: LD_INT 39
40412: PUSH
40413: LD_INT 34
40415: PUSH
40416: LD_INT 40
40418: PUSH
40419: LD_INT 71
40421: PUSH
40422: LD_INT 23
40424: PUSH
40425: LD_INT 44
40427: PUSH
40428: LD_INT 48
40430: PUSH
40431: LD_INT 49
40433: PUSH
40434: LD_INT 50
40436: PUSH
40437: LD_INT 51
40439: PUSH
40440: LD_INT 52
40442: PUSH
40443: LD_INT 53
40445: PUSH
40446: LD_INT 54
40448: PUSH
40449: LD_INT 55
40451: PUSH
40452: LD_INT 56
40454: PUSH
40455: LD_INT 57
40457: PUSH
40458: LD_INT 58
40460: PUSH
40461: LD_INT 59
40463: PUSH
40464: LD_INT 63
40466: PUSH
40467: LD_INT 64
40469: PUSH
40470: LD_INT 65
40472: PUSH
40473: LD_INT 82
40475: PUSH
40476: LD_INT 83
40478: PUSH
40479: LD_INT 84
40481: PUSH
40482: LD_INT 85
40484: PUSH
40485: LD_INT 86
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: ST_TO_ADDR
40543: GO 40546
40545: POP
// if state > - 1 and state < 3 then
40546: LD_VAR 0 3
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: GREATER
40555: PUSH
40556: LD_VAR 0 3
40560: PUSH
40561: LD_INT 3
40563: LESS
40564: AND
40565: IFFALSE 40622
// for i in result do
40567: LD_ADDR_VAR 0 5
40571: PUSH
40572: LD_VAR 0 4
40576: PUSH
40577: FOR_IN
40578: IFFALSE 40620
// if GetTech ( i , side ) <> state then
40580: LD_VAR 0 5
40584: PPUSH
40585: LD_VAR 0 1
40589: PPUSH
40590: CALL_OW 321
40594: PUSH
40595: LD_VAR 0 3
40599: NONEQUAL
40600: IFFALSE 40618
// result := result diff i ;
40602: LD_ADDR_VAR 0 4
40606: PUSH
40607: LD_VAR 0 4
40611: PUSH
40612: LD_VAR 0 5
40616: DIFF
40617: ST_TO_ADDR
40618: GO 40577
40620: POP
40621: POP
// end ;
40622: LD_VAR 0 4
40626: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40627: LD_INT 0
40629: PPUSH
40630: PPUSH
40631: PPUSH
// result := true ;
40632: LD_ADDR_VAR 0 3
40636: PUSH
40637: LD_INT 1
40639: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40640: LD_ADDR_VAR 0 5
40644: PUSH
40645: LD_VAR 0 2
40649: PPUSH
40650: CALL_OW 480
40654: ST_TO_ADDR
// if not tmp then
40655: LD_VAR 0 5
40659: NOT
40660: IFFALSE 40664
// exit ;
40662: GO 40713
// for i in tmp do
40664: LD_ADDR_VAR 0 4
40668: PUSH
40669: LD_VAR 0 5
40673: PUSH
40674: FOR_IN
40675: IFFALSE 40711
// if GetTech ( i , side ) <> state_researched then
40677: LD_VAR 0 4
40681: PPUSH
40682: LD_VAR 0 1
40686: PPUSH
40687: CALL_OW 321
40691: PUSH
40692: LD_INT 2
40694: NONEQUAL
40695: IFFALSE 40709
// begin result := false ;
40697: LD_ADDR_VAR 0 3
40701: PUSH
40702: LD_INT 0
40704: ST_TO_ADDR
// exit ;
40705: POP
40706: POP
40707: GO 40713
// end ;
40709: GO 40674
40711: POP
40712: POP
// end ;
40713: LD_VAR 0 3
40717: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40718: LD_INT 0
40720: PPUSH
40721: PPUSH
40722: PPUSH
40723: PPUSH
40724: PPUSH
40725: PPUSH
40726: PPUSH
40727: PPUSH
40728: PPUSH
40729: PPUSH
40730: PPUSH
40731: PPUSH
40732: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40733: LD_VAR 0 1
40737: NOT
40738: PUSH
40739: LD_VAR 0 1
40743: PPUSH
40744: CALL_OW 257
40748: PUSH
40749: LD_INT 9
40751: NONEQUAL
40752: OR
40753: IFFALSE 40757
// exit ;
40755: GO 41330
// side := GetSide ( unit ) ;
40757: LD_ADDR_VAR 0 9
40761: PUSH
40762: LD_VAR 0 1
40766: PPUSH
40767: CALL_OW 255
40771: ST_TO_ADDR
// tech_space := tech_spacanom ;
40772: LD_ADDR_VAR 0 12
40776: PUSH
40777: LD_INT 29
40779: ST_TO_ADDR
// tech_time := tech_taurad ;
40780: LD_ADDR_VAR 0 13
40784: PUSH
40785: LD_INT 28
40787: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40788: LD_ADDR_VAR 0 11
40792: PUSH
40793: LD_VAR 0 1
40797: PPUSH
40798: CALL_OW 310
40802: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40803: LD_VAR 0 11
40807: PPUSH
40808: CALL_OW 247
40812: PUSH
40813: LD_INT 2
40815: EQUAL
40816: IFFALSE 40820
// exit ;
40818: GO 41330
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40820: LD_ADDR_VAR 0 8
40824: PUSH
40825: LD_INT 81
40827: PUSH
40828: LD_VAR 0 9
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 3
40839: PUSH
40840: LD_INT 21
40842: PUSH
40843: LD_INT 3
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PPUSH
40858: CALL_OW 69
40862: ST_TO_ADDR
// if not tmp then
40863: LD_VAR 0 8
40867: NOT
40868: IFFALSE 40872
// exit ;
40870: GO 41330
// if in_unit then
40872: LD_VAR 0 11
40876: IFFALSE 40900
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40878: LD_ADDR_VAR 0 10
40882: PUSH
40883: LD_VAR 0 8
40887: PPUSH
40888: LD_VAR 0 11
40892: PPUSH
40893: CALL_OW 74
40897: ST_TO_ADDR
40898: GO 40920
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40900: LD_ADDR_VAR 0 10
40904: PUSH
40905: LD_VAR 0 8
40909: PPUSH
40910: LD_VAR 0 1
40914: PPUSH
40915: CALL_OW 74
40919: ST_TO_ADDR
// if not enemy then
40920: LD_VAR 0 10
40924: NOT
40925: IFFALSE 40929
// exit ;
40927: GO 41330
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40929: LD_VAR 0 11
40933: PUSH
40934: LD_VAR 0 11
40938: PPUSH
40939: LD_VAR 0 10
40943: PPUSH
40944: CALL_OW 296
40948: PUSH
40949: LD_INT 13
40951: GREATER
40952: AND
40953: PUSH
40954: LD_VAR 0 1
40958: PPUSH
40959: LD_VAR 0 10
40963: PPUSH
40964: CALL_OW 296
40968: PUSH
40969: LD_INT 12
40971: GREATER
40972: OR
40973: IFFALSE 40977
// exit ;
40975: GO 41330
// missile := [ 1 ] ;
40977: LD_ADDR_VAR 0 14
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: EMPTY
40986: LIST
40987: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40988: LD_VAR 0 9
40992: PPUSH
40993: LD_VAR 0 12
40997: PPUSH
40998: CALL_OW 325
41002: IFFALSE 41031
// missile := Replace ( missile , missile + 1 , 2 ) ;
41004: LD_ADDR_VAR 0 14
41008: PUSH
41009: LD_VAR 0 14
41013: PPUSH
41014: LD_VAR 0 14
41018: PUSH
41019: LD_INT 1
41021: PLUS
41022: PPUSH
41023: LD_INT 2
41025: PPUSH
41026: CALL_OW 1
41030: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41031: LD_VAR 0 9
41035: PPUSH
41036: LD_VAR 0 13
41040: PPUSH
41041: CALL_OW 325
41045: PUSH
41046: LD_VAR 0 10
41050: PPUSH
41051: CALL_OW 255
41055: PPUSH
41056: LD_VAR 0 13
41060: PPUSH
41061: CALL_OW 325
41065: NOT
41066: AND
41067: IFFALSE 41096
// missile := Replace ( missile , missile + 1 , 3 ) ;
41069: LD_ADDR_VAR 0 14
41073: PUSH
41074: LD_VAR 0 14
41078: PPUSH
41079: LD_VAR 0 14
41083: PUSH
41084: LD_INT 1
41086: PLUS
41087: PPUSH
41088: LD_INT 3
41090: PPUSH
41091: CALL_OW 1
41095: ST_TO_ADDR
// if missile < 2 then
41096: LD_VAR 0 14
41100: PUSH
41101: LD_INT 2
41103: LESS
41104: IFFALSE 41108
// exit ;
41106: GO 41330
// x := GetX ( enemy ) ;
41108: LD_ADDR_VAR 0 4
41112: PUSH
41113: LD_VAR 0 10
41117: PPUSH
41118: CALL_OW 250
41122: ST_TO_ADDR
// y := GetY ( enemy ) ;
41123: LD_ADDR_VAR 0 5
41127: PUSH
41128: LD_VAR 0 10
41132: PPUSH
41133: CALL_OW 251
41137: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41138: LD_ADDR_VAR 0 6
41142: PUSH
41143: LD_VAR 0 4
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PPUSH
41152: LD_INT 1
41154: PPUSH
41155: CALL_OW 12
41159: PLUS
41160: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41161: LD_ADDR_VAR 0 7
41165: PUSH
41166: LD_VAR 0 5
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PPUSH
41175: LD_INT 1
41177: PPUSH
41178: CALL_OW 12
41182: PLUS
41183: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41184: LD_VAR 0 6
41188: PPUSH
41189: LD_VAR 0 7
41193: PPUSH
41194: CALL_OW 488
41198: NOT
41199: IFFALSE 41221
// begin _x := x ;
41201: LD_ADDR_VAR 0 6
41205: PUSH
41206: LD_VAR 0 4
41210: ST_TO_ADDR
// _y := y ;
41211: LD_ADDR_VAR 0 7
41215: PUSH
41216: LD_VAR 0 5
41220: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41221: LD_ADDR_VAR 0 3
41225: PUSH
41226: LD_INT 1
41228: PPUSH
41229: LD_VAR 0 14
41233: PPUSH
41234: CALL_OW 12
41238: ST_TO_ADDR
// case i of 1 :
41239: LD_VAR 0 3
41243: PUSH
41244: LD_INT 1
41246: DOUBLE
41247: EQUAL
41248: IFTRUE 41252
41250: GO 41269
41252: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41253: LD_VAR 0 1
41257: PPUSH
41258: LD_VAR 0 10
41262: PPUSH
41263: CALL_OW 115
41267: GO 41330
41269: LD_INT 2
41271: DOUBLE
41272: EQUAL
41273: IFTRUE 41277
41275: GO 41299
41277: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41278: LD_VAR 0 1
41282: PPUSH
41283: LD_VAR 0 6
41287: PPUSH
41288: LD_VAR 0 7
41292: PPUSH
41293: CALL_OW 153
41297: GO 41330
41299: LD_INT 3
41301: DOUBLE
41302: EQUAL
41303: IFTRUE 41307
41305: GO 41329
41307: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41308: LD_VAR 0 1
41312: PPUSH
41313: LD_VAR 0 6
41317: PPUSH
41318: LD_VAR 0 7
41322: PPUSH
41323: CALL_OW 154
41327: GO 41330
41329: POP
// end ;
41330: LD_VAR 0 2
41334: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41335: LD_INT 0
41337: PPUSH
41338: PPUSH
41339: PPUSH
41340: PPUSH
41341: PPUSH
41342: PPUSH
// if not unit or not building then
41343: LD_VAR 0 1
41347: NOT
41348: PUSH
41349: LD_VAR 0 2
41353: NOT
41354: OR
41355: IFFALSE 41359
// exit ;
41357: GO 41517
// x := GetX ( building ) ;
41359: LD_ADDR_VAR 0 5
41363: PUSH
41364: LD_VAR 0 2
41368: PPUSH
41369: CALL_OW 250
41373: ST_TO_ADDR
// y := GetY ( building ) ;
41374: LD_ADDR_VAR 0 6
41378: PUSH
41379: LD_VAR 0 2
41383: PPUSH
41384: CALL_OW 251
41388: ST_TO_ADDR
// for i = 0 to 5 do
41389: LD_ADDR_VAR 0 4
41393: PUSH
41394: DOUBLE
41395: LD_INT 0
41397: DEC
41398: ST_TO_ADDR
41399: LD_INT 5
41401: PUSH
41402: FOR_TO
41403: IFFALSE 41515
// begin _x := ShiftX ( x , i , 3 ) ;
41405: LD_ADDR_VAR 0 7
41409: PUSH
41410: LD_VAR 0 5
41414: PPUSH
41415: LD_VAR 0 4
41419: PPUSH
41420: LD_INT 3
41422: PPUSH
41423: CALL_OW 272
41427: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41428: LD_ADDR_VAR 0 8
41432: PUSH
41433: LD_VAR 0 6
41437: PPUSH
41438: LD_VAR 0 4
41442: PPUSH
41443: LD_INT 3
41445: PPUSH
41446: CALL_OW 273
41450: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41451: LD_VAR 0 7
41455: PPUSH
41456: LD_VAR 0 8
41460: PPUSH
41461: CALL_OW 488
41465: NOT
41466: IFFALSE 41470
// continue ;
41468: GO 41402
// if HexInfo ( _x , _y ) = 0 then
41470: LD_VAR 0 7
41474: PPUSH
41475: LD_VAR 0 8
41479: PPUSH
41480: CALL_OW 428
41484: PUSH
41485: LD_INT 0
41487: EQUAL
41488: IFFALSE 41513
// begin ComMoveXY ( unit , _x , _y ) ;
41490: LD_VAR 0 1
41494: PPUSH
41495: LD_VAR 0 7
41499: PPUSH
41500: LD_VAR 0 8
41504: PPUSH
41505: CALL_OW 111
// exit ;
41509: POP
41510: POP
41511: GO 41517
// end ; end ;
41513: GO 41402
41515: POP
41516: POP
// end ;
41517: LD_VAR 0 3
41521: RET
// export function ScanBase ( side , base_area ) ; begin
41522: LD_INT 0
41524: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41525: LD_ADDR_VAR 0 3
41529: PUSH
41530: LD_VAR 0 2
41534: PPUSH
41535: LD_INT 81
41537: PUSH
41538: LD_VAR 0 1
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PPUSH
41547: CALL_OW 70
41551: ST_TO_ADDR
// end ;
41552: LD_VAR 0 3
41556: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41557: LD_INT 0
41559: PPUSH
41560: PPUSH
41561: PPUSH
41562: PPUSH
// result := false ;
41563: LD_ADDR_VAR 0 2
41567: PUSH
41568: LD_INT 0
41570: ST_TO_ADDR
// side := GetSide ( unit ) ;
41571: LD_ADDR_VAR 0 3
41575: PUSH
41576: LD_VAR 0 1
41580: PPUSH
41581: CALL_OW 255
41585: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41586: LD_ADDR_VAR 0 4
41590: PUSH
41591: LD_VAR 0 1
41595: PPUSH
41596: CALL_OW 248
41600: ST_TO_ADDR
// case nat of 1 :
41601: LD_VAR 0 4
41605: PUSH
41606: LD_INT 1
41608: DOUBLE
41609: EQUAL
41610: IFTRUE 41614
41612: GO 41625
41614: POP
// tech := tech_lassight ; 2 :
41615: LD_ADDR_VAR 0 5
41619: PUSH
41620: LD_INT 12
41622: ST_TO_ADDR
41623: GO 41664
41625: LD_INT 2
41627: DOUBLE
41628: EQUAL
41629: IFTRUE 41633
41631: GO 41644
41633: POP
// tech := tech_mortar ; 3 :
41634: LD_ADDR_VAR 0 5
41638: PUSH
41639: LD_INT 41
41641: ST_TO_ADDR
41642: GO 41664
41644: LD_INT 3
41646: DOUBLE
41647: EQUAL
41648: IFTRUE 41652
41650: GO 41663
41652: POP
// tech := tech_bazooka ; end ;
41653: LD_ADDR_VAR 0 5
41657: PUSH
41658: LD_INT 44
41660: ST_TO_ADDR
41661: GO 41664
41663: POP
// if Researched ( side , tech ) then
41664: LD_VAR 0 3
41668: PPUSH
41669: LD_VAR 0 5
41673: PPUSH
41674: CALL_OW 325
41678: IFFALSE 41705
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41680: LD_ADDR_VAR 0 2
41684: PUSH
41685: LD_INT 5
41687: PUSH
41688: LD_INT 8
41690: PUSH
41691: LD_INT 9
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: LIST
41698: PUSH
41699: LD_VAR 0 4
41703: ARRAY
41704: ST_TO_ADDR
// end ;
41705: LD_VAR 0 2
41709: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41710: LD_INT 0
41712: PPUSH
41713: PPUSH
41714: PPUSH
// if not mines then
41715: LD_VAR 0 2
41719: NOT
41720: IFFALSE 41724
// exit ;
41722: GO 41868
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41724: LD_ADDR_VAR 0 5
41728: PUSH
41729: LD_INT 81
41731: PUSH
41732: LD_VAR 0 1
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 3
41743: PUSH
41744: LD_INT 21
41746: PUSH
41747: LD_INT 3
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PPUSH
41762: CALL_OW 69
41766: ST_TO_ADDR
// for i in mines do
41767: LD_ADDR_VAR 0 4
41771: PUSH
41772: LD_VAR 0 2
41776: PUSH
41777: FOR_IN
41778: IFFALSE 41866
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41780: LD_VAR 0 4
41784: PUSH
41785: LD_INT 1
41787: ARRAY
41788: PPUSH
41789: LD_VAR 0 4
41793: PUSH
41794: LD_INT 2
41796: ARRAY
41797: PPUSH
41798: CALL_OW 458
41802: NOT
41803: IFFALSE 41807
// continue ;
41805: GO 41777
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41807: LD_VAR 0 4
41811: PUSH
41812: LD_INT 1
41814: ARRAY
41815: PPUSH
41816: LD_VAR 0 4
41820: PUSH
41821: LD_INT 2
41823: ARRAY
41824: PPUSH
41825: CALL_OW 428
41829: PUSH
41830: LD_VAR 0 5
41834: IN
41835: IFFALSE 41864
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41837: LD_VAR 0 4
41841: PUSH
41842: LD_INT 1
41844: ARRAY
41845: PPUSH
41846: LD_VAR 0 4
41850: PUSH
41851: LD_INT 2
41853: ARRAY
41854: PPUSH
41855: LD_VAR 0 1
41859: PPUSH
41860: CALL_OW 456
// end ;
41864: GO 41777
41866: POP
41867: POP
// end ;
41868: LD_VAR 0 3
41872: RET
// export function Count ( array ) ; var i ; begin
41873: LD_INT 0
41875: PPUSH
41876: PPUSH
// result := 0 ;
41877: LD_ADDR_VAR 0 2
41881: PUSH
41882: LD_INT 0
41884: ST_TO_ADDR
// for i in array do
41885: LD_ADDR_VAR 0 3
41889: PUSH
41890: LD_VAR 0 1
41894: PUSH
41895: FOR_IN
41896: IFFALSE 41920
// if i then
41898: LD_VAR 0 3
41902: IFFALSE 41918
// result := result + 1 ;
41904: LD_ADDR_VAR 0 2
41908: PUSH
41909: LD_VAR 0 2
41913: PUSH
41914: LD_INT 1
41916: PLUS
41917: ST_TO_ADDR
41918: GO 41895
41920: POP
41921: POP
// end ;
41922: LD_VAR 0 2
41926: RET
// export function IsEmpty ( building ) ; begin
41927: LD_INT 0
41929: PPUSH
// if not building then
41930: LD_VAR 0 1
41934: NOT
41935: IFFALSE 41939
// exit ;
41937: GO 41982
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41939: LD_ADDR_VAR 0 2
41943: PUSH
41944: LD_VAR 0 1
41948: PUSH
41949: LD_INT 22
41951: PUSH
41952: LD_VAR 0 1
41956: PPUSH
41957: CALL_OW 255
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 58
41968: PUSH
41969: EMPTY
41970: LIST
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PPUSH
41976: CALL_OW 69
41980: IN
41981: ST_TO_ADDR
// end ;
41982: LD_VAR 0 2
41986: RET
// export function IsNotFull ( building ) ; var places ; begin
41987: LD_INT 0
41989: PPUSH
41990: PPUSH
// if not building then
41991: LD_VAR 0 1
41995: NOT
41996: IFFALSE 42000
// exit ;
41998: GO 42171
// result := false ;
42000: LD_ADDR_VAR 0 2
42004: PUSH
42005: LD_INT 0
42007: ST_TO_ADDR
// places := 0 ;
42008: LD_ADDR_VAR 0 3
42012: PUSH
42013: LD_INT 0
42015: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
42016: LD_VAR 0 1
42020: PPUSH
42021: CALL_OW 266
42025: PUSH
42026: LD_INT 0
42028: DOUBLE
42029: EQUAL
42030: IFTRUE 42088
42032: LD_INT 1
42034: DOUBLE
42035: EQUAL
42036: IFTRUE 42088
42038: LD_INT 6
42040: DOUBLE
42041: EQUAL
42042: IFTRUE 42088
42044: LD_INT 7
42046: DOUBLE
42047: EQUAL
42048: IFTRUE 42088
42050: LD_INT 8
42052: DOUBLE
42053: EQUAL
42054: IFTRUE 42088
42056: LD_INT 4
42058: DOUBLE
42059: EQUAL
42060: IFTRUE 42088
42062: LD_INT 5
42064: DOUBLE
42065: EQUAL
42066: IFTRUE 42088
42068: LD_INT 2
42070: DOUBLE
42071: EQUAL
42072: IFTRUE 42088
42074: LD_INT 3
42076: DOUBLE
42077: EQUAL
42078: IFTRUE 42088
42080: LD_INT 35
42082: DOUBLE
42083: EQUAL
42084: IFTRUE 42088
42086: GO 42099
42088: POP
// places := 6 ; b_bunker , b_breastwork :
42089: LD_ADDR_VAR 0 3
42093: PUSH
42094: LD_INT 6
42096: ST_TO_ADDR
42097: GO 42144
42099: LD_INT 32
42101: DOUBLE
42102: EQUAL
42103: IFTRUE 42113
42105: LD_INT 31
42107: DOUBLE
42108: EQUAL
42109: IFTRUE 42113
42111: GO 42124
42113: POP
// places := 1 ; b_control_tower :
42114: LD_ADDR_VAR 0 3
42118: PUSH
42119: LD_INT 1
42121: ST_TO_ADDR
42122: GO 42144
42124: LD_INT 36
42126: DOUBLE
42127: EQUAL
42128: IFTRUE 42132
42130: GO 42143
42132: POP
// places := 3 ; end ;
42133: LD_ADDR_VAR 0 3
42137: PUSH
42138: LD_INT 3
42140: ST_TO_ADDR
42141: GO 42144
42143: POP
// if places then
42144: LD_VAR 0 3
42148: IFFALSE 42171
// result := UnitsInside ( building ) < places ;
42150: LD_ADDR_VAR 0 2
42154: PUSH
42155: LD_VAR 0 1
42159: PPUSH
42160: CALL_OW 313
42164: PUSH
42165: LD_VAR 0 3
42169: LESS
42170: ST_TO_ADDR
// end ;
42171: LD_VAR 0 2
42175: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42176: LD_INT 0
42178: PPUSH
42179: PPUSH
42180: PPUSH
42181: PPUSH
// tmp := [ ] ;
42182: LD_ADDR_VAR 0 3
42186: PUSH
42187: EMPTY
42188: ST_TO_ADDR
// list := [ ] ;
42189: LD_ADDR_VAR 0 5
42193: PUSH
42194: EMPTY
42195: ST_TO_ADDR
// for i = 16 to 25 do
42196: LD_ADDR_VAR 0 4
42200: PUSH
42201: DOUBLE
42202: LD_INT 16
42204: DEC
42205: ST_TO_ADDR
42206: LD_INT 25
42208: PUSH
42209: FOR_TO
42210: IFFALSE 42283
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42212: LD_ADDR_VAR 0 3
42216: PUSH
42217: LD_VAR 0 3
42221: PUSH
42222: LD_INT 22
42224: PUSH
42225: LD_VAR 0 1
42229: PPUSH
42230: CALL_OW 255
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 91
42241: PUSH
42242: LD_VAR 0 1
42246: PUSH
42247: LD_INT 6
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 30
42257: PUSH
42258: LD_VAR 0 4
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: LIST
42271: PUSH
42272: EMPTY
42273: LIST
42274: PPUSH
42275: CALL_OW 69
42279: ADD
42280: ST_TO_ADDR
42281: GO 42209
42283: POP
42284: POP
// for i = 1 to tmp do
42285: LD_ADDR_VAR 0 4
42289: PUSH
42290: DOUBLE
42291: LD_INT 1
42293: DEC
42294: ST_TO_ADDR
42295: LD_VAR 0 3
42299: PUSH
42300: FOR_TO
42301: IFFALSE 42389
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42303: LD_ADDR_VAR 0 5
42307: PUSH
42308: LD_VAR 0 5
42312: PUSH
42313: LD_VAR 0 3
42317: PUSH
42318: LD_VAR 0 4
42322: ARRAY
42323: PPUSH
42324: CALL_OW 266
42328: PUSH
42329: LD_VAR 0 3
42333: PUSH
42334: LD_VAR 0 4
42338: ARRAY
42339: PPUSH
42340: CALL_OW 250
42344: PUSH
42345: LD_VAR 0 3
42349: PUSH
42350: LD_VAR 0 4
42354: ARRAY
42355: PPUSH
42356: CALL_OW 251
42360: PUSH
42361: LD_VAR 0 3
42365: PUSH
42366: LD_VAR 0 4
42370: ARRAY
42371: PPUSH
42372: CALL_OW 254
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: PUSH
42383: EMPTY
42384: LIST
42385: ADD
42386: ST_TO_ADDR
42387: GO 42300
42389: POP
42390: POP
// result := list ;
42391: LD_ADDR_VAR 0 2
42395: PUSH
42396: LD_VAR 0 5
42400: ST_TO_ADDR
// end ;
42401: LD_VAR 0 2
42405: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42406: LD_INT 0
42408: PPUSH
42409: PPUSH
42410: PPUSH
42411: PPUSH
42412: PPUSH
42413: PPUSH
42414: PPUSH
// if not factory then
42415: LD_VAR 0 1
42419: NOT
42420: IFFALSE 42424
// exit ;
42422: GO 43017
// if control = control_apeman then
42424: LD_VAR 0 4
42428: PUSH
42429: LD_INT 5
42431: EQUAL
42432: IFFALSE 42541
// begin tmp := UnitsInside ( factory ) ;
42434: LD_ADDR_VAR 0 8
42438: PUSH
42439: LD_VAR 0 1
42443: PPUSH
42444: CALL_OW 313
42448: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42449: LD_VAR 0 8
42453: PPUSH
42454: LD_INT 25
42456: PUSH
42457: LD_INT 12
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PPUSH
42464: CALL_OW 72
42468: NOT
42469: IFFALSE 42479
// control := control_manual ;
42471: LD_ADDR_VAR 0 4
42475: PUSH
42476: LD_INT 1
42478: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42479: LD_ADDR_VAR 0 8
42483: PUSH
42484: LD_VAR 0 1
42488: PPUSH
42489: CALL 42176 0 1
42493: ST_TO_ADDR
// if tmp then
42494: LD_VAR 0 8
42498: IFFALSE 42541
// begin for i in tmp do
42500: LD_ADDR_VAR 0 7
42504: PUSH
42505: LD_VAR 0 8
42509: PUSH
42510: FOR_IN
42511: IFFALSE 42539
// if i [ 1 ] = b_ext_radio then
42513: LD_VAR 0 7
42517: PUSH
42518: LD_INT 1
42520: ARRAY
42521: PUSH
42522: LD_INT 22
42524: EQUAL
42525: IFFALSE 42537
// begin control := control_remote ;
42527: LD_ADDR_VAR 0 4
42531: PUSH
42532: LD_INT 2
42534: ST_TO_ADDR
// break ;
42535: GO 42539
// end ;
42537: GO 42510
42539: POP
42540: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42541: LD_VAR 0 1
42545: PPUSH
42546: LD_VAR 0 2
42550: PPUSH
42551: LD_VAR 0 3
42555: PPUSH
42556: LD_VAR 0 4
42560: PPUSH
42561: LD_VAR 0 5
42565: PPUSH
42566: CALL_OW 448
42570: IFFALSE 42605
// begin result := [ chassis , engine , control , weapon ] ;
42572: LD_ADDR_VAR 0 6
42576: PUSH
42577: LD_VAR 0 2
42581: PUSH
42582: LD_VAR 0 3
42586: PUSH
42587: LD_VAR 0 4
42591: PUSH
42592: LD_VAR 0 5
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: ST_TO_ADDR
// exit ;
42603: GO 43017
// end ; _chassis := AvailableChassisList ( factory ) ;
42605: LD_ADDR_VAR 0 9
42609: PUSH
42610: LD_VAR 0 1
42614: PPUSH
42615: CALL_OW 475
42619: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42620: LD_ADDR_VAR 0 11
42624: PUSH
42625: LD_VAR 0 1
42629: PPUSH
42630: CALL_OW 476
42634: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42635: LD_ADDR_VAR 0 12
42639: PUSH
42640: LD_VAR 0 1
42644: PPUSH
42645: CALL_OW 477
42649: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42650: LD_ADDR_VAR 0 10
42654: PUSH
42655: LD_VAR 0 1
42659: PPUSH
42660: CALL_OW 478
42664: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42665: LD_VAR 0 9
42669: NOT
42670: PUSH
42671: LD_VAR 0 11
42675: NOT
42676: OR
42677: PUSH
42678: LD_VAR 0 12
42682: NOT
42683: OR
42684: PUSH
42685: LD_VAR 0 10
42689: NOT
42690: OR
42691: IFFALSE 42726
// begin result := [ chassis , engine , control , weapon ] ;
42693: LD_ADDR_VAR 0 6
42697: PUSH
42698: LD_VAR 0 2
42702: PUSH
42703: LD_VAR 0 3
42707: PUSH
42708: LD_VAR 0 4
42712: PUSH
42713: LD_VAR 0 5
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: ST_TO_ADDR
// exit ;
42724: GO 43017
// end ; if not chassis in _chassis then
42726: LD_VAR 0 2
42730: PUSH
42731: LD_VAR 0 9
42735: IN
42736: NOT
42737: IFFALSE 42763
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42739: LD_ADDR_VAR 0 2
42743: PUSH
42744: LD_VAR 0 9
42748: PUSH
42749: LD_INT 1
42751: PPUSH
42752: LD_VAR 0 9
42756: PPUSH
42757: CALL_OW 12
42761: ARRAY
42762: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42763: LD_VAR 0 2
42767: PPUSH
42768: LD_VAR 0 3
42772: PPUSH
42773: CALL 43022 0 2
42777: NOT
42778: IFFALSE 42837
// repeat engine := _engine [ 1 ] ;
42780: LD_ADDR_VAR 0 3
42784: PUSH
42785: LD_VAR 0 11
42789: PUSH
42790: LD_INT 1
42792: ARRAY
42793: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42794: LD_ADDR_VAR 0 11
42798: PUSH
42799: LD_VAR 0 11
42803: PPUSH
42804: LD_INT 1
42806: PPUSH
42807: CALL_OW 3
42811: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42812: LD_VAR 0 2
42816: PPUSH
42817: LD_VAR 0 3
42821: PPUSH
42822: CALL 43022 0 2
42826: PUSH
42827: LD_VAR 0 11
42831: PUSH
42832: EMPTY
42833: EQUAL
42834: OR
42835: IFFALSE 42780
// if not control in _control then
42837: LD_VAR 0 4
42841: PUSH
42842: LD_VAR 0 12
42846: IN
42847: NOT
42848: IFFALSE 42874
// control := _control [ rand ( 1 , _control ) ] ;
42850: LD_ADDR_VAR 0 4
42854: PUSH
42855: LD_VAR 0 12
42859: PUSH
42860: LD_INT 1
42862: PPUSH
42863: LD_VAR 0 12
42867: PPUSH
42868: CALL_OW 12
42872: ARRAY
42873: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42874: LD_VAR 0 2
42878: PPUSH
42879: LD_VAR 0 5
42883: PPUSH
42884: CALL 43242 0 2
42888: NOT
42889: IFFALSE 42948
// repeat weapon := _weapon [ 1 ] ;
42891: LD_ADDR_VAR 0 5
42895: PUSH
42896: LD_VAR 0 10
42900: PUSH
42901: LD_INT 1
42903: ARRAY
42904: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42905: LD_ADDR_VAR 0 10
42909: PUSH
42910: LD_VAR 0 10
42914: PPUSH
42915: LD_INT 1
42917: PPUSH
42918: CALL_OW 3
42922: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42923: LD_VAR 0 2
42927: PPUSH
42928: LD_VAR 0 5
42932: PPUSH
42933: CALL 43242 0 2
42937: PUSH
42938: LD_VAR 0 10
42942: PUSH
42943: EMPTY
42944: EQUAL
42945: OR
42946: IFFALSE 42891
// result := [ ] ;
42948: LD_ADDR_VAR 0 6
42952: PUSH
42953: EMPTY
42954: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42955: LD_VAR 0 1
42959: PPUSH
42960: LD_VAR 0 2
42964: PPUSH
42965: LD_VAR 0 3
42969: PPUSH
42970: LD_VAR 0 4
42974: PPUSH
42975: LD_VAR 0 5
42979: PPUSH
42980: CALL_OW 448
42984: IFFALSE 43017
// result := [ chassis , engine , control , weapon ] ;
42986: LD_ADDR_VAR 0 6
42990: PUSH
42991: LD_VAR 0 2
42995: PUSH
42996: LD_VAR 0 3
43000: PUSH
43001: LD_VAR 0 4
43005: PUSH
43006: LD_VAR 0 5
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: ST_TO_ADDR
// end ;
43017: LD_VAR 0 6
43021: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43022: LD_INT 0
43024: PPUSH
// if not chassis or not engine then
43025: LD_VAR 0 1
43029: NOT
43030: PUSH
43031: LD_VAR 0 2
43035: NOT
43036: OR
43037: IFFALSE 43041
// exit ;
43039: GO 43237
// case engine of engine_solar :
43041: LD_VAR 0 2
43045: PUSH
43046: LD_INT 2
43048: DOUBLE
43049: EQUAL
43050: IFTRUE 43054
43052: GO 43092
43054: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43055: LD_ADDR_VAR 0 3
43059: PUSH
43060: LD_INT 11
43062: PUSH
43063: LD_INT 12
43065: PUSH
43066: LD_INT 13
43068: PUSH
43069: LD_INT 14
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: LD_INT 2
43077: PUSH
43078: LD_INT 3
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: ST_TO_ADDR
43090: GO 43221
43092: LD_INT 1
43094: DOUBLE
43095: EQUAL
43096: IFTRUE 43100
43098: GO 43162
43100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43101: LD_ADDR_VAR 0 3
43105: PUSH
43106: LD_INT 11
43108: PUSH
43109: LD_INT 12
43111: PUSH
43112: LD_INT 13
43114: PUSH
43115: LD_INT 14
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 2
43123: PUSH
43124: LD_INT 3
43126: PUSH
43127: LD_INT 4
43129: PUSH
43130: LD_INT 5
43132: PUSH
43133: LD_INT 21
43135: PUSH
43136: LD_INT 23
43138: PUSH
43139: LD_INT 22
43141: PUSH
43142: LD_INT 24
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: ST_TO_ADDR
43160: GO 43221
43162: LD_INT 3
43164: DOUBLE
43165: EQUAL
43166: IFTRUE 43170
43168: GO 43220
43170: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43171: LD_ADDR_VAR 0 3
43175: PUSH
43176: LD_INT 13
43178: PUSH
43179: LD_INT 14
43181: PUSH
43182: LD_INT 2
43184: PUSH
43185: LD_INT 3
43187: PUSH
43188: LD_INT 4
43190: PUSH
43191: LD_INT 5
43193: PUSH
43194: LD_INT 21
43196: PUSH
43197: LD_INT 22
43199: PUSH
43200: LD_INT 23
43202: PUSH
43203: LD_INT 24
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: ST_TO_ADDR
43218: GO 43221
43220: POP
// result := ( chassis in result ) ;
43221: LD_ADDR_VAR 0 3
43225: PUSH
43226: LD_VAR 0 1
43230: PUSH
43231: LD_VAR 0 3
43235: IN
43236: ST_TO_ADDR
// end ;
43237: LD_VAR 0 3
43241: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43242: LD_INT 0
43244: PPUSH
// if not chassis or not weapon then
43245: LD_VAR 0 1
43249: NOT
43250: PUSH
43251: LD_VAR 0 2
43255: NOT
43256: OR
43257: IFFALSE 43261
// exit ;
43259: GO 44321
// case weapon of us_machine_gun :
43261: LD_VAR 0 2
43265: PUSH
43266: LD_INT 2
43268: DOUBLE
43269: EQUAL
43270: IFTRUE 43274
43272: GO 43304
43274: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43275: LD_ADDR_VAR 0 3
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: LD_INT 3
43288: PUSH
43289: LD_INT 4
43291: PUSH
43292: LD_INT 5
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: ST_TO_ADDR
43302: GO 44305
43304: LD_INT 3
43306: DOUBLE
43307: EQUAL
43308: IFTRUE 43312
43310: GO 43342
43312: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43313: LD_ADDR_VAR 0 3
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: LD_INT 2
43323: PUSH
43324: LD_INT 3
43326: PUSH
43327: LD_INT 4
43329: PUSH
43330: LD_INT 5
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: ST_TO_ADDR
43340: GO 44305
43342: LD_INT 11
43344: DOUBLE
43345: EQUAL
43346: IFTRUE 43350
43348: GO 43380
43350: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43351: LD_ADDR_VAR 0 3
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 2
43361: PUSH
43362: LD_INT 3
43364: PUSH
43365: LD_INT 4
43367: PUSH
43368: LD_INT 5
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: ST_TO_ADDR
43378: GO 44305
43380: LD_INT 4
43382: DOUBLE
43383: EQUAL
43384: IFTRUE 43388
43386: GO 43414
43388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43389: LD_ADDR_VAR 0 3
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: LD_INT 3
43399: PUSH
43400: LD_INT 4
43402: PUSH
43403: LD_INT 5
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: ST_TO_ADDR
43412: GO 44305
43414: LD_INT 5
43416: DOUBLE
43417: EQUAL
43418: IFTRUE 43422
43420: GO 43448
43422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43423: LD_ADDR_VAR 0 3
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: LD_INT 3
43433: PUSH
43434: LD_INT 4
43436: PUSH
43437: LD_INT 5
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: ST_TO_ADDR
43446: GO 44305
43448: LD_INT 9
43450: DOUBLE
43451: EQUAL
43452: IFTRUE 43456
43454: GO 43482
43456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43457: LD_ADDR_VAR 0 3
43461: PUSH
43462: LD_INT 2
43464: PUSH
43465: LD_INT 3
43467: PUSH
43468: LD_INT 4
43470: PUSH
43471: LD_INT 5
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: ST_TO_ADDR
43480: GO 44305
43482: LD_INT 7
43484: DOUBLE
43485: EQUAL
43486: IFTRUE 43490
43488: GO 43516
43490: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43491: LD_ADDR_VAR 0 3
43495: PUSH
43496: LD_INT 2
43498: PUSH
43499: LD_INT 3
43501: PUSH
43502: LD_INT 4
43504: PUSH
43505: LD_INT 5
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: ST_TO_ADDR
43514: GO 44305
43516: LD_INT 12
43518: DOUBLE
43519: EQUAL
43520: IFTRUE 43524
43522: GO 43550
43524: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43525: LD_ADDR_VAR 0 3
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 3
43535: PUSH
43536: LD_INT 4
43538: PUSH
43539: LD_INT 5
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: ST_TO_ADDR
43548: GO 44305
43550: LD_INT 13
43552: DOUBLE
43553: EQUAL
43554: IFTRUE 43558
43556: GO 43584
43558: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43559: LD_ADDR_VAR 0 3
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: LD_INT 3
43569: PUSH
43570: LD_INT 4
43572: PUSH
43573: LD_INT 5
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: ST_TO_ADDR
43582: GO 44305
43584: LD_INT 14
43586: DOUBLE
43587: EQUAL
43588: IFTRUE 43592
43590: GO 43610
43592: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43593: LD_ADDR_VAR 0 3
43597: PUSH
43598: LD_INT 4
43600: PUSH
43601: LD_INT 5
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: ST_TO_ADDR
43608: GO 44305
43610: LD_INT 6
43612: DOUBLE
43613: EQUAL
43614: IFTRUE 43618
43616: GO 43636
43618: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43619: LD_ADDR_VAR 0 3
43623: PUSH
43624: LD_INT 4
43626: PUSH
43627: LD_INT 5
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: ST_TO_ADDR
43634: GO 44305
43636: LD_INT 10
43638: DOUBLE
43639: EQUAL
43640: IFTRUE 43644
43642: GO 43662
43644: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43645: LD_ADDR_VAR 0 3
43649: PUSH
43650: LD_INT 4
43652: PUSH
43653: LD_INT 5
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: ST_TO_ADDR
43660: GO 44305
43662: LD_INT 22
43664: DOUBLE
43665: EQUAL
43666: IFTRUE 43670
43668: GO 43696
43670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43671: LD_ADDR_VAR 0 3
43675: PUSH
43676: LD_INT 11
43678: PUSH
43679: LD_INT 12
43681: PUSH
43682: LD_INT 13
43684: PUSH
43685: LD_INT 14
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: ST_TO_ADDR
43694: GO 44305
43696: LD_INT 23
43698: DOUBLE
43699: EQUAL
43700: IFTRUE 43704
43702: GO 43730
43704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43705: LD_ADDR_VAR 0 3
43709: PUSH
43710: LD_INT 11
43712: PUSH
43713: LD_INT 12
43715: PUSH
43716: LD_INT 13
43718: PUSH
43719: LD_INT 14
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: ST_TO_ADDR
43728: GO 44305
43730: LD_INT 24
43732: DOUBLE
43733: EQUAL
43734: IFTRUE 43738
43736: GO 43764
43738: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43739: LD_ADDR_VAR 0 3
43743: PUSH
43744: LD_INT 11
43746: PUSH
43747: LD_INT 12
43749: PUSH
43750: LD_INT 13
43752: PUSH
43753: LD_INT 14
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: ST_TO_ADDR
43762: GO 44305
43764: LD_INT 30
43766: DOUBLE
43767: EQUAL
43768: IFTRUE 43772
43770: GO 43798
43772: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43773: LD_ADDR_VAR 0 3
43777: PUSH
43778: LD_INT 11
43780: PUSH
43781: LD_INT 12
43783: PUSH
43784: LD_INT 13
43786: PUSH
43787: LD_INT 14
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: ST_TO_ADDR
43796: GO 44305
43798: LD_INT 25
43800: DOUBLE
43801: EQUAL
43802: IFTRUE 43806
43804: GO 43824
43806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43807: LD_ADDR_VAR 0 3
43811: PUSH
43812: LD_INT 13
43814: PUSH
43815: LD_INT 14
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: ST_TO_ADDR
43822: GO 44305
43824: LD_INT 27
43826: DOUBLE
43827: EQUAL
43828: IFTRUE 43832
43830: GO 43850
43832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43833: LD_ADDR_VAR 0 3
43837: PUSH
43838: LD_INT 13
43840: PUSH
43841: LD_INT 14
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: ST_TO_ADDR
43848: GO 44305
43850: LD_INT 92
43852: DOUBLE
43853: EQUAL
43854: IFTRUE 43858
43856: GO 43884
43858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43859: LD_ADDR_VAR 0 3
43863: PUSH
43864: LD_INT 11
43866: PUSH
43867: LD_INT 12
43869: PUSH
43870: LD_INT 13
43872: PUSH
43873: LD_INT 14
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: ST_TO_ADDR
43882: GO 44305
43884: LD_INT 28
43886: DOUBLE
43887: EQUAL
43888: IFTRUE 43892
43890: GO 43910
43892: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43893: LD_ADDR_VAR 0 3
43897: PUSH
43898: LD_INT 13
43900: PUSH
43901: LD_INT 14
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: ST_TO_ADDR
43908: GO 44305
43910: LD_INT 29
43912: DOUBLE
43913: EQUAL
43914: IFTRUE 43918
43916: GO 43936
43918: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43919: LD_ADDR_VAR 0 3
43923: PUSH
43924: LD_INT 13
43926: PUSH
43927: LD_INT 14
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: ST_TO_ADDR
43934: GO 44305
43936: LD_INT 31
43938: DOUBLE
43939: EQUAL
43940: IFTRUE 43944
43942: GO 43962
43944: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43945: LD_ADDR_VAR 0 3
43949: PUSH
43950: LD_INT 13
43952: PUSH
43953: LD_INT 14
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: ST_TO_ADDR
43960: GO 44305
43962: LD_INT 26
43964: DOUBLE
43965: EQUAL
43966: IFTRUE 43970
43968: GO 43988
43970: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43971: LD_ADDR_VAR 0 3
43975: PUSH
43976: LD_INT 13
43978: PUSH
43979: LD_INT 14
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: ST_TO_ADDR
43986: GO 44305
43988: LD_INT 42
43990: DOUBLE
43991: EQUAL
43992: IFTRUE 43996
43994: GO 44022
43996: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43997: LD_ADDR_VAR 0 3
44001: PUSH
44002: LD_INT 21
44004: PUSH
44005: LD_INT 22
44007: PUSH
44008: LD_INT 23
44010: PUSH
44011: LD_INT 24
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: ST_TO_ADDR
44020: GO 44305
44022: LD_INT 43
44024: DOUBLE
44025: EQUAL
44026: IFTRUE 44030
44028: GO 44056
44030: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44031: LD_ADDR_VAR 0 3
44035: PUSH
44036: LD_INT 21
44038: PUSH
44039: LD_INT 22
44041: PUSH
44042: LD_INT 23
44044: PUSH
44045: LD_INT 24
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: ST_TO_ADDR
44054: GO 44305
44056: LD_INT 44
44058: DOUBLE
44059: EQUAL
44060: IFTRUE 44064
44062: GO 44090
44064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44065: LD_ADDR_VAR 0 3
44069: PUSH
44070: LD_INT 21
44072: PUSH
44073: LD_INT 22
44075: PUSH
44076: LD_INT 23
44078: PUSH
44079: LD_INT 24
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: ST_TO_ADDR
44088: GO 44305
44090: LD_INT 45
44092: DOUBLE
44093: EQUAL
44094: IFTRUE 44098
44096: GO 44124
44098: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44099: LD_ADDR_VAR 0 3
44103: PUSH
44104: LD_INT 21
44106: PUSH
44107: LD_INT 22
44109: PUSH
44110: LD_INT 23
44112: PUSH
44113: LD_INT 24
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: ST_TO_ADDR
44122: GO 44305
44124: LD_INT 49
44126: DOUBLE
44127: EQUAL
44128: IFTRUE 44132
44130: GO 44158
44132: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44133: LD_ADDR_VAR 0 3
44137: PUSH
44138: LD_INT 21
44140: PUSH
44141: LD_INT 22
44143: PUSH
44144: LD_INT 23
44146: PUSH
44147: LD_INT 24
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: ST_TO_ADDR
44156: GO 44305
44158: LD_INT 51
44160: DOUBLE
44161: EQUAL
44162: IFTRUE 44166
44164: GO 44192
44166: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44167: LD_ADDR_VAR 0 3
44171: PUSH
44172: LD_INT 21
44174: PUSH
44175: LD_INT 22
44177: PUSH
44178: LD_INT 23
44180: PUSH
44181: LD_INT 24
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: ST_TO_ADDR
44190: GO 44305
44192: LD_INT 52
44194: DOUBLE
44195: EQUAL
44196: IFTRUE 44200
44198: GO 44226
44200: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44201: LD_ADDR_VAR 0 3
44205: PUSH
44206: LD_INT 21
44208: PUSH
44209: LD_INT 22
44211: PUSH
44212: LD_INT 23
44214: PUSH
44215: LD_INT 24
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: ST_TO_ADDR
44224: GO 44305
44226: LD_INT 53
44228: DOUBLE
44229: EQUAL
44230: IFTRUE 44234
44232: GO 44252
44234: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44235: LD_ADDR_VAR 0 3
44239: PUSH
44240: LD_INT 23
44242: PUSH
44243: LD_INT 24
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: ST_TO_ADDR
44250: GO 44305
44252: LD_INT 46
44254: DOUBLE
44255: EQUAL
44256: IFTRUE 44260
44258: GO 44278
44260: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44261: LD_ADDR_VAR 0 3
44265: PUSH
44266: LD_INT 23
44268: PUSH
44269: LD_INT 24
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: ST_TO_ADDR
44276: GO 44305
44278: LD_INT 47
44280: DOUBLE
44281: EQUAL
44282: IFTRUE 44286
44284: GO 44304
44286: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44287: LD_ADDR_VAR 0 3
44291: PUSH
44292: LD_INT 23
44294: PUSH
44295: LD_INT 24
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: ST_TO_ADDR
44302: GO 44305
44304: POP
// result := ( chassis in result ) ;
44305: LD_ADDR_VAR 0 3
44309: PUSH
44310: LD_VAR 0 1
44314: PUSH
44315: LD_VAR 0 3
44319: IN
44320: ST_TO_ADDR
// end ;
44321: LD_VAR 0 3
44325: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44326: LD_INT 0
44328: PPUSH
44329: PPUSH
44330: PPUSH
44331: PPUSH
44332: PPUSH
44333: PPUSH
44334: PPUSH
// result := array ;
44335: LD_ADDR_VAR 0 5
44339: PUSH
44340: LD_VAR 0 1
44344: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44345: LD_VAR 0 1
44349: NOT
44350: PUSH
44351: LD_VAR 0 2
44355: NOT
44356: OR
44357: PUSH
44358: LD_VAR 0 3
44362: NOT
44363: OR
44364: PUSH
44365: LD_VAR 0 2
44369: PUSH
44370: LD_VAR 0 1
44374: GREATER
44375: OR
44376: PUSH
44377: LD_VAR 0 3
44381: PUSH
44382: LD_VAR 0 1
44386: GREATER
44387: OR
44388: IFFALSE 44392
// exit ;
44390: GO 44688
// if direction then
44392: LD_VAR 0 4
44396: IFFALSE 44460
// begin d := 1 ;
44398: LD_ADDR_VAR 0 9
44402: PUSH
44403: LD_INT 1
44405: ST_TO_ADDR
// if i_from > i_to then
44406: LD_VAR 0 2
44410: PUSH
44411: LD_VAR 0 3
44415: GREATER
44416: IFFALSE 44442
// length := ( array - i_from ) + i_to else
44418: LD_ADDR_VAR 0 11
44422: PUSH
44423: LD_VAR 0 1
44427: PUSH
44428: LD_VAR 0 2
44432: MINUS
44433: PUSH
44434: LD_VAR 0 3
44438: PLUS
44439: ST_TO_ADDR
44440: GO 44458
// length := i_to - i_from ;
44442: LD_ADDR_VAR 0 11
44446: PUSH
44447: LD_VAR 0 3
44451: PUSH
44452: LD_VAR 0 2
44456: MINUS
44457: ST_TO_ADDR
// end else
44458: GO 44521
// begin d := - 1 ;
44460: LD_ADDR_VAR 0 9
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: ST_TO_ADDR
// if i_from > i_to then
44469: LD_VAR 0 2
44473: PUSH
44474: LD_VAR 0 3
44478: GREATER
44479: IFFALSE 44499
// length := i_from - i_to else
44481: LD_ADDR_VAR 0 11
44485: PUSH
44486: LD_VAR 0 2
44490: PUSH
44491: LD_VAR 0 3
44495: MINUS
44496: ST_TO_ADDR
44497: GO 44521
// length := ( array - i_to ) + i_from ;
44499: LD_ADDR_VAR 0 11
44503: PUSH
44504: LD_VAR 0 1
44508: PUSH
44509: LD_VAR 0 3
44513: MINUS
44514: PUSH
44515: LD_VAR 0 2
44519: PLUS
44520: ST_TO_ADDR
// end ; if not length then
44521: LD_VAR 0 11
44525: NOT
44526: IFFALSE 44530
// exit ;
44528: GO 44688
// tmp := array ;
44530: LD_ADDR_VAR 0 10
44534: PUSH
44535: LD_VAR 0 1
44539: ST_TO_ADDR
// for i = 1 to length do
44540: LD_ADDR_VAR 0 6
44544: PUSH
44545: DOUBLE
44546: LD_INT 1
44548: DEC
44549: ST_TO_ADDR
44550: LD_VAR 0 11
44554: PUSH
44555: FOR_TO
44556: IFFALSE 44676
// begin for j = 1 to array do
44558: LD_ADDR_VAR 0 7
44562: PUSH
44563: DOUBLE
44564: LD_INT 1
44566: DEC
44567: ST_TO_ADDR
44568: LD_VAR 0 1
44572: PUSH
44573: FOR_TO
44574: IFFALSE 44662
// begin k := j + d ;
44576: LD_ADDR_VAR 0 8
44580: PUSH
44581: LD_VAR 0 7
44585: PUSH
44586: LD_VAR 0 9
44590: PLUS
44591: ST_TO_ADDR
// if k > array then
44592: LD_VAR 0 8
44596: PUSH
44597: LD_VAR 0 1
44601: GREATER
44602: IFFALSE 44612
// k := 1 ;
44604: LD_ADDR_VAR 0 8
44608: PUSH
44609: LD_INT 1
44611: ST_TO_ADDR
// if not k then
44612: LD_VAR 0 8
44616: NOT
44617: IFFALSE 44629
// k := array ;
44619: LD_ADDR_VAR 0 8
44623: PUSH
44624: LD_VAR 0 1
44628: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44629: LD_ADDR_VAR 0 10
44633: PUSH
44634: LD_VAR 0 10
44638: PPUSH
44639: LD_VAR 0 8
44643: PPUSH
44644: LD_VAR 0 1
44648: PUSH
44649: LD_VAR 0 7
44653: ARRAY
44654: PPUSH
44655: CALL_OW 1
44659: ST_TO_ADDR
// end ;
44660: GO 44573
44662: POP
44663: POP
// array := tmp ;
44664: LD_ADDR_VAR 0 1
44668: PUSH
44669: LD_VAR 0 10
44673: ST_TO_ADDR
// end ;
44674: GO 44555
44676: POP
44677: POP
// result := array ;
44678: LD_ADDR_VAR 0 5
44682: PUSH
44683: LD_VAR 0 1
44687: ST_TO_ADDR
// end ;
44688: LD_VAR 0 5
44692: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44693: LD_INT 0
44695: PPUSH
44696: PPUSH
// result := 0 ;
44697: LD_ADDR_VAR 0 3
44701: PUSH
44702: LD_INT 0
44704: ST_TO_ADDR
// if not array or not value in array then
44705: LD_VAR 0 1
44709: NOT
44710: PUSH
44711: LD_VAR 0 2
44715: PUSH
44716: LD_VAR 0 1
44720: IN
44721: NOT
44722: OR
44723: IFFALSE 44727
// exit ;
44725: GO 44781
// for i = 1 to array do
44727: LD_ADDR_VAR 0 4
44731: PUSH
44732: DOUBLE
44733: LD_INT 1
44735: DEC
44736: ST_TO_ADDR
44737: LD_VAR 0 1
44741: PUSH
44742: FOR_TO
44743: IFFALSE 44779
// if value = array [ i ] then
44745: LD_VAR 0 2
44749: PUSH
44750: LD_VAR 0 1
44754: PUSH
44755: LD_VAR 0 4
44759: ARRAY
44760: EQUAL
44761: IFFALSE 44777
// begin result := i ;
44763: LD_ADDR_VAR 0 3
44767: PUSH
44768: LD_VAR 0 4
44772: ST_TO_ADDR
// exit ;
44773: POP
44774: POP
44775: GO 44781
// end ;
44777: GO 44742
44779: POP
44780: POP
// end ;
44781: LD_VAR 0 3
44785: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44786: LD_INT 0
44788: PPUSH
// vc_chassis := chassis ;
44789: LD_ADDR_OWVAR 37
44793: PUSH
44794: LD_VAR 0 1
44798: ST_TO_ADDR
// vc_engine := engine ;
44799: LD_ADDR_OWVAR 39
44803: PUSH
44804: LD_VAR 0 2
44808: ST_TO_ADDR
// vc_control := control ;
44809: LD_ADDR_OWVAR 38
44813: PUSH
44814: LD_VAR 0 3
44818: ST_TO_ADDR
// vc_weapon := weapon ;
44819: LD_ADDR_OWVAR 40
44823: PUSH
44824: LD_VAR 0 4
44828: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44829: LD_ADDR_OWVAR 41
44833: PUSH
44834: LD_VAR 0 5
44838: ST_TO_ADDR
// end ;
44839: LD_VAR 0 6
44843: RET
// export function WantPlant ( unit ) ; var task ; begin
44844: LD_INT 0
44846: PPUSH
44847: PPUSH
// result := false ;
44848: LD_ADDR_VAR 0 2
44852: PUSH
44853: LD_INT 0
44855: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44856: LD_ADDR_VAR 0 3
44860: PUSH
44861: LD_VAR 0 1
44865: PPUSH
44866: CALL_OW 437
44870: ST_TO_ADDR
// if task then
44871: LD_VAR 0 3
44875: IFFALSE 44903
// if task [ 1 ] [ 1 ] = p then
44877: LD_VAR 0 3
44881: PUSH
44882: LD_INT 1
44884: ARRAY
44885: PUSH
44886: LD_INT 1
44888: ARRAY
44889: PUSH
44890: LD_STRING p
44892: EQUAL
44893: IFFALSE 44903
// result := true ;
44895: LD_ADDR_VAR 0 2
44899: PUSH
44900: LD_INT 1
44902: ST_TO_ADDR
// end ;
44903: LD_VAR 0 2
44907: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44908: LD_INT 0
44910: PPUSH
44911: PPUSH
44912: PPUSH
44913: PPUSH
// if pos < 1 then
44914: LD_VAR 0 2
44918: PUSH
44919: LD_INT 1
44921: LESS
44922: IFFALSE 44926
// exit ;
44924: GO 45229
// if pos = 1 then
44926: LD_VAR 0 2
44930: PUSH
44931: LD_INT 1
44933: EQUAL
44934: IFFALSE 44967
// result := Replace ( arr , pos [ 1 ] , value ) else
44936: LD_ADDR_VAR 0 4
44940: PUSH
44941: LD_VAR 0 1
44945: PPUSH
44946: LD_VAR 0 2
44950: PUSH
44951: LD_INT 1
44953: ARRAY
44954: PPUSH
44955: LD_VAR 0 3
44959: PPUSH
44960: CALL_OW 1
44964: ST_TO_ADDR
44965: GO 45229
// begin tmp := arr ;
44967: LD_ADDR_VAR 0 6
44971: PUSH
44972: LD_VAR 0 1
44976: ST_TO_ADDR
// s_arr := [ tmp ] ;
44977: LD_ADDR_VAR 0 7
44981: PUSH
44982: LD_VAR 0 6
44986: PUSH
44987: EMPTY
44988: LIST
44989: ST_TO_ADDR
// for i = 1 to pos - 1 do
44990: LD_ADDR_VAR 0 5
44994: PUSH
44995: DOUBLE
44996: LD_INT 1
44998: DEC
44999: ST_TO_ADDR
45000: LD_VAR 0 2
45004: PUSH
45005: LD_INT 1
45007: MINUS
45008: PUSH
45009: FOR_TO
45010: IFFALSE 45055
// begin tmp := tmp [ pos [ i ] ] ;
45012: LD_ADDR_VAR 0 6
45016: PUSH
45017: LD_VAR 0 6
45021: PUSH
45022: LD_VAR 0 2
45026: PUSH
45027: LD_VAR 0 5
45031: ARRAY
45032: ARRAY
45033: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45034: LD_ADDR_VAR 0 7
45038: PUSH
45039: LD_VAR 0 7
45043: PUSH
45044: LD_VAR 0 6
45048: PUSH
45049: EMPTY
45050: LIST
45051: ADD
45052: ST_TO_ADDR
// end ;
45053: GO 45009
45055: POP
45056: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45057: LD_ADDR_VAR 0 6
45061: PUSH
45062: LD_VAR 0 6
45066: PPUSH
45067: LD_VAR 0 2
45071: PUSH
45072: LD_VAR 0 2
45076: ARRAY
45077: PPUSH
45078: LD_VAR 0 3
45082: PPUSH
45083: CALL_OW 1
45087: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45088: LD_ADDR_VAR 0 7
45092: PUSH
45093: LD_VAR 0 7
45097: PPUSH
45098: LD_VAR 0 7
45102: PPUSH
45103: LD_VAR 0 6
45107: PPUSH
45108: CALL_OW 1
45112: ST_TO_ADDR
// for i = s_arr downto 2 do
45113: LD_ADDR_VAR 0 5
45117: PUSH
45118: DOUBLE
45119: LD_VAR 0 7
45123: INC
45124: ST_TO_ADDR
45125: LD_INT 2
45127: PUSH
45128: FOR_DOWNTO
45129: IFFALSE 45213
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45131: LD_ADDR_VAR 0 6
45135: PUSH
45136: LD_VAR 0 7
45140: PUSH
45141: LD_VAR 0 5
45145: PUSH
45146: LD_INT 1
45148: MINUS
45149: ARRAY
45150: PPUSH
45151: LD_VAR 0 2
45155: PUSH
45156: LD_VAR 0 5
45160: PUSH
45161: LD_INT 1
45163: MINUS
45164: ARRAY
45165: PPUSH
45166: LD_VAR 0 7
45170: PUSH
45171: LD_VAR 0 5
45175: ARRAY
45176: PPUSH
45177: CALL_OW 1
45181: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45182: LD_ADDR_VAR 0 7
45186: PUSH
45187: LD_VAR 0 7
45191: PPUSH
45192: LD_VAR 0 5
45196: PUSH
45197: LD_INT 1
45199: MINUS
45200: PPUSH
45201: LD_VAR 0 6
45205: PPUSH
45206: CALL_OW 1
45210: ST_TO_ADDR
// end ;
45211: GO 45128
45213: POP
45214: POP
// result := s_arr [ 1 ] ;
45215: LD_ADDR_VAR 0 4
45219: PUSH
45220: LD_VAR 0 7
45224: PUSH
45225: LD_INT 1
45227: ARRAY
45228: ST_TO_ADDR
// end ; end ;
45229: LD_VAR 0 4
45233: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45234: LD_INT 0
45236: PPUSH
45237: PPUSH
// if not list then
45238: LD_VAR 0 1
45242: NOT
45243: IFFALSE 45247
// exit ;
45245: GO 45338
// i := list [ pos1 ] ;
45247: LD_ADDR_VAR 0 5
45251: PUSH
45252: LD_VAR 0 1
45256: PUSH
45257: LD_VAR 0 2
45261: ARRAY
45262: ST_TO_ADDR
// if not i then
45263: LD_VAR 0 5
45267: NOT
45268: IFFALSE 45272
// exit ;
45270: GO 45338
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45272: LD_ADDR_VAR 0 1
45276: PUSH
45277: LD_VAR 0 1
45281: PPUSH
45282: LD_VAR 0 2
45286: PPUSH
45287: LD_VAR 0 1
45291: PUSH
45292: LD_VAR 0 3
45296: ARRAY
45297: PPUSH
45298: CALL_OW 1
45302: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45303: LD_ADDR_VAR 0 1
45307: PUSH
45308: LD_VAR 0 1
45312: PPUSH
45313: LD_VAR 0 3
45317: PPUSH
45318: LD_VAR 0 5
45322: PPUSH
45323: CALL_OW 1
45327: ST_TO_ADDR
// result := list ;
45328: LD_ADDR_VAR 0 4
45332: PUSH
45333: LD_VAR 0 1
45337: ST_TO_ADDR
// end ;
45338: LD_VAR 0 4
45342: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45343: LD_INT 0
45345: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45346: LD_ADDR_VAR 0 5
45350: PUSH
45351: LD_VAR 0 1
45355: PPUSH
45356: CALL_OW 250
45360: PPUSH
45361: LD_VAR 0 1
45365: PPUSH
45366: CALL_OW 251
45370: PPUSH
45371: LD_VAR 0 2
45375: PPUSH
45376: LD_VAR 0 3
45380: PPUSH
45381: LD_VAR 0 4
45385: PPUSH
45386: CALL 45396 0 5
45390: ST_TO_ADDR
// end ;
45391: LD_VAR 0 5
45395: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45396: LD_INT 0
45398: PPUSH
45399: PPUSH
45400: PPUSH
45401: PPUSH
// if not list then
45402: LD_VAR 0 3
45406: NOT
45407: IFFALSE 45411
// exit ;
45409: GO 45799
// result := [ ] ;
45411: LD_ADDR_VAR 0 6
45415: PUSH
45416: EMPTY
45417: ST_TO_ADDR
// for i in list do
45418: LD_ADDR_VAR 0 7
45422: PUSH
45423: LD_VAR 0 3
45427: PUSH
45428: FOR_IN
45429: IFFALSE 45631
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45431: LD_ADDR_VAR 0 9
45435: PUSH
45436: LD_VAR 0 7
45440: PPUSH
45441: LD_VAR 0 1
45445: PPUSH
45446: LD_VAR 0 2
45450: PPUSH
45451: CALL_OW 297
45455: ST_TO_ADDR
// if not result then
45456: LD_VAR 0 6
45460: NOT
45461: IFFALSE 45487
// result := [ [ i , tmp ] ] else
45463: LD_ADDR_VAR 0 6
45467: PUSH
45468: LD_VAR 0 7
45472: PUSH
45473: LD_VAR 0 9
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: EMPTY
45483: LIST
45484: ST_TO_ADDR
45485: GO 45629
// begin if result [ result ] [ 2 ] < tmp then
45487: LD_VAR 0 6
45491: PUSH
45492: LD_VAR 0 6
45496: ARRAY
45497: PUSH
45498: LD_INT 2
45500: ARRAY
45501: PUSH
45502: LD_VAR 0 9
45506: LESS
45507: IFFALSE 45549
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45509: LD_ADDR_VAR 0 6
45513: PUSH
45514: LD_VAR 0 6
45518: PPUSH
45519: LD_VAR 0 6
45523: PUSH
45524: LD_INT 1
45526: PLUS
45527: PPUSH
45528: LD_VAR 0 7
45532: PUSH
45533: LD_VAR 0 9
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PPUSH
45542: CALL_OW 2
45546: ST_TO_ADDR
45547: GO 45629
// for j = 1 to result do
45549: LD_ADDR_VAR 0 8
45553: PUSH
45554: DOUBLE
45555: LD_INT 1
45557: DEC
45558: ST_TO_ADDR
45559: LD_VAR 0 6
45563: PUSH
45564: FOR_TO
45565: IFFALSE 45627
// begin if tmp < result [ j ] [ 2 ] then
45567: LD_VAR 0 9
45571: PUSH
45572: LD_VAR 0 6
45576: PUSH
45577: LD_VAR 0 8
45581: ARRAY
45582: PUSH
45583: LD_INT 2
45585: ARRAY
45586: LESS
45587: IFFALSE 45625
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45589: LD_ADDR_VAR 0 6
45593: PUSH
45594: LD_VAR 0 6
45598: PPUSH
45599: LD_VAR 0 8
45603: PPUSH
45604: LD_VAR 0 7
45608: PUSH
45609: LD_VAR 0 9
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PPUSH
45618: CALL_OW 2
45622: ST_TO_ADDR
// break ;
45623: GO 45627
// end ; end ;
45625: GO 45564
45627: POP
45628: POP
// end ; end ;
45629: GO 45428
45631: POP
45632: POP
// if result and not asc then
45633: LD_VAR 0 6
45637: PUSH
45638: LD_VAR 0 4
45642: NOT
45643: AND
45644: IFFALSE 45719
// begin tmp := result ;
45646: LD_ADDR_VAR 0 9
45650: PUSH
45651: LD_VAR 0 6
45655: ST_TO_ADDR
// for i = tmp downto 1 do
45656: LD_ADDR_VAR 0 7
45660: PUSH
45661: DOUBLE
45662: LD_VAR 0 9
45666: INC
45667: ST_TO_ADDR
45668: LD_INT 1
45670: PUSH
45671: FOR_DOWNTO
45672: IFFALSE 45717
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45674: LD_ADDR_VAR 0 6
45678: PUSH
45679: LD_VAR 0 6
45683: PPUSH
45684: LD_VAR 0 9
45688: PUSH
45689: LD_VAR 0 7
45693: MINUS
45694: PUSH
45695: LD_INT 1
45697: PLUS
45698: PPUSH
45699: LD_VAR 0 9
45703: PUSH
45704: LD_VAR 0 7
45708: ARRAY
45709: PPUSH
45710: CALL_OW 1
45714: ST_TO_ADDR
45715: GO 45671
45717: POP
45718: POP
// end ; tmp := [ ] ;
45719: LD_ADDR_VAR 0 9
45723: PUSH
45724: EMPTY
45725: ST_TO_ADDR
// if mode then
45726: LD_VAR 0 5
45730: IFFALSE 45799
// begin for i = 1 to result do
45732: LD_ADDR_VAR 0 7
45736: PUSH
45737: DOUBLE
45738: LD_INT 1
45740: DEC
45741: ST_TO_ADDR
45742: LD_VAR 0 6
45746: PUSH
45747: FOR_TO
45748: IFFALSE 45787
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45750: LD_ADDR_VAR 0 9
45754: PUSH
45755: LD_VAR 0 9
45759: PPUSH
45760: LD_VAR 0 7
45764: PPUSH
45765: LD_VAR 0 6
45769: PUSH
45770: LD_VAR 0 7
45774: ARRAY
45775: PUSH
45776: LD_INT 1
45778: ARRAY
45779: PPUSH
45780: CALL_OW 1
45784: ST_TO_ADDR
45785: GO 45747
45787: POP
45788: POP
// result := tmp ;
45789: LD_ADDR_VAR 0 6
45793: PUSH
45794: LD_VAR 0 9
45798: ST_TO_ADDR
// end ; end ;
45799: LD_VAR 0 6
45803: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45804: LD_INT 0
45806: PPUSH
45807: PPUSH
45808: PPUSH
45809: PPUSH
45810: PPUSH
45811: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45812: LD_ADDR_VAR 0 5
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: ST_TO_ADDR
// if not x or not y then
45834: LD_VAR 0 2
45838: NOT
45839: PUSH
45840: LD_VAR 0 3
45844: NOT
45845: OR
45846: IFFALSE 45850
// exit ;
45848: GO 47500
// if not range then
45850: LD_VAR 0 4
45854: NOT
45855: IFFALSE 45865
// range := 10 ;
45857: LD_ADDR_VAR 0 4
45861: PUSH
45862: LD_INT 10
45864: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45865: LD_ADDR_VAR 0 8
45869: PUSH
45870: LD_INT 81
45872: PUSH
45873: LD_VAR 0 1
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 92
45884: PUSH
45885: LD_VAR 0 2
45889: PUSH
45890: LD_VAR 0 3
45894: PUSH
45895: LD_VAR 0 4
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 3
45908: PUSH
45909: LD_INT 21
45911: PUSH
45912: LD_INT 3
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: LIST
45927: PPUSH
45928: CALL_OW 69
45932: ST_TO_ADDR
// if not tmp then
45933: LD_VAR 0 8
45937: NOT
45938: IFFALSE 45942
// exit ;
45940: GO 47500
// for i in tmp do
45942: LD_ADDR_VAR 0 6
45946: PUSH
45947: LD_VAR 0 8
45951: PUSH
45952: FOR_IN
45953: IFFALSE 47475
// begin points := [ 0 , 0 , 0 ] ;
45955: LD_ADDR_VAR 0 9
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: LIST
45973: ST_TO_ADDR
// bpoints := 1 ;
45974: LD_ADDR_VAR 0 10
45978: PUSH
45979: LD_INT 1
45981: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45982: LD_VAR 0 6
45986: PPUSH
45987: CALL_OW 247
45991: PUSH
45992: LD_INT 1
45994: DOUBLE
45995: EQUAL
45996: IFTRUE 46000
45998: GO 46578
46000: POP
// begin if GetClass ( i ) = 1 then
46001: LD_VAR 0 6
46005: PPUSH
46006: CALL_OW 257
46010: PUSH
46011: LD_INT 1
46013: EQUAL
46014: IFFALSE 46035
// points := [ 10 , 5 , 3 ] ;
46016: LD_ADDR_VAR 0 9
46020: PUSH
46021: LD_INT 10
46023: PUSH
46024: LD_INT 5
46026: PUSH
46027: LD_INT 3
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: LIST
46034: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46035: LD_VAR 0 6
46039: PPUSH
46040: CALL_OW 257
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: LD_INT 3
46050: PUSH
46051: LD_INT 4
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: LIST
46058: IN
46059: IFFALSE 46080
// points := [ 3 , 2 , 1 ] ;
46061: LD_ADDR_VAR 0 9
46065: PUSH
46066: LD_INT 3
46068: PUSH
46069: LD_INT 2
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: LIST
46079: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46080: LD_VAR 0 6
46084: PPUSH
46085: CALL_OW 257
46089: PUSH
46090: LD_INT 5
46092: EQUAL
46093: IFFALSE 46114
// points := [ 130 , 5 , 2 ] ;
46095: LD_ADDR_VAR 0 9
46099: PUSH
46100: LD_INT 130
46102: PUSH
46103: LD_INT 5
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: LIST
46113: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46114: LD_VAR 0 6
46118: PPUSH
46119: CALL_OW 257
46123: PUSH
46124: LD_INT 8
46126: EQUAL
46127: IFFALSE 46148
// points := [ 35 , 35 , 30 ] ;
46129: LD_ADDR_VAR 0 9
46133: PUSH
46134: LD_INT 35
46136: PUSH
46137: LD_INT 35
46139: PUSH
46140: LD_INT 30
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: LIST
46147: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46148: LD_VAR 0 6
46152: PPUSH
46153: CALL_OW 257
46157: PUSH
46158: LD_INT 9
46160: EQUAL
46161: IFFALSE 46182
// points := [ 20 , 55 , 40 ] ;
46163: LD_ADDR_VAR 0 9
46167: PUSH
46168: LD_INT 20
46170: PUSH
46171: LD_INT 55
46173: PUSH
46174: LD_INT 40
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: LIST
46181: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46182: LD_VAR 0 6
46186: PPUSH
46187: CALL_OW 257
46191: PUSH
46192: LD_INT 12
46194: PUSH
46195: LD_INT 16
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: IN
46202: IFFALSE 46223
// points := [ 5 , 3 , 2 ] ;
46204: LD_ADDR_VAR 0 9
46208: PUSH
46209: LD_INT 5
46211: PUSH
46212: LD_INT 3
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: LIST
46222: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46223: LD_VAR 0 6
46227: PPUSH
46228: CALL_OW 257
46232: PUSH
46233: LD_INT 17
46235: EQUAL
46236: IFFALSE 46257
// points := [ 100 , 50 , 75 ] ;
46238: LD_ADDR_VAR 0 9
46242: PUSH
46243: LD_INT 100
46245: PUSH
46246: LD_INT 50
46248: PUSH
46249: LD_INT 75
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: LIST
46256: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46257: LD_VAR 0 6
46261: PPUSH
46262: CALL_OW 257
46266: PUSH
46267: LD_INT 15
46269: EQUAL
46270: IFFALSE 46291
// points := [ 10 , 5 , 3 ] ;
46272: LD_ADDR_VAR 0 9
46276: PUSH
46277: LD_INT 10
46279: PUSH
46280: LD_INT 5
46282: PUSH
46283: LD_INT 3
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: LIST
46290: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46291: LD_VAR 0 6
46295: PPUSH
46296: CALL_OW 257
46300: PUSH
46301: LD_INT 14
46303: EQUAL
46304: IFFALSE 46325
// points := [ 10 , 0 , 0 ] ;
46306: LD_ADDR_VAR 0 9
46310: PUSH
46311: LD_INT 10
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: LIST
46324: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46325: LD_VAR 0 6
46329: PPUSH
46330: CALL_OW 257
46334: PUSH
46335: LD_INT 11
46337: EQUAL
46338: IFFALSE 46359
// points := [ 30 , 10 , 5 ] ;
46340: LD_ADDR_VAR 0 9
46344: PUSH
46345: LD_INT 30
46347: PUSH
46348: LD_INT 10
46350: PUSH
46351: LD_INT 5
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: LIST
46358: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46359: LD_VAR 0 1
46363: PPUSH
46364: LD_INT 5
46366: PPUSH
46367: CALL_OW 321
46371: PUSH
46372: LD_INT 2
46374: EQUAL
46375: IFFALSE 46392
// bpoints := bpoints * 1.8 ;
46377: LD_ADDR_VAR 0 10
46381: PUSH
46382: LD_VAR 0 10
46386: PUSH
46387: LD_REAL  1.80000000000000E+0000
46390: MUL
46391: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46392: LD_VAR 0 6
46396: PPUSH
46397: CALL_OW 257
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: LD_INT 2
46407: PUSH
46408: LD_INT 3
46410: PUSH
46411: LD_INT 4
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: IN
46420: PUSH
46421: LD_VAR 0 1
46425: PPUSH
46426: LD_INT 51
46428: PPUSH
46429: CALL_OW 321
46433: PUSH
46434: LD_INT 2
46436: EQUAL
46437: AND
46438: IFFALSE 46455
// bpoints := bpoints * 1.2 ;
46440: LD_ADDR_VAR 0 10
46444: PUSH
46445: LD_VAR 0 10
46449: PUSH
46450: LD_REAL  1.20000000000000E+0000
46453: MUL
46454: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46455: LD_VAR 0 6
46459: PPUSH
46460: CALL_OW 257
46464: PUSH
46465: LD_INT 5
46467: PUSH
46468: LD_INT 7
46470: PUSH
46471: LD_INT 9
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: LIST
46478: IN
46479: PUSH
46480: LD_VAR 0 1
46484: PPUSH
46485: LD_INT 52
46487: PPUSH
46488: CALL_OW 321
46492: PUSH
46493: LD_INT 2
46495: EQUAL
46496: AND
46497: IFFALSE 46514
// bpoints := bpoints * 1.5 ;
46499: LD_ADDR_VAR 0 10
46503: PUSH
46504: LD_VAR 0 10
46508: PUSH
46509: LD_REAL  1.50000000000000E+0000
46512: MUL
46513: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46514: LD_VAR 0 1
46518: PPUSH
46519: LD_INT 66
46521: PPUSH
46522: CALL_OW 321
46526: PUSH
46527: LD_INT 2
46529: EQUAL
46530: IFFALSE 46547
// bpoints := bpoints * 1.1 ;
46532: LD_ADDR_VAR 0 10
46536: PUSH
46537: LD_VAR 0 10
46541: PUSH
46542: LD_REAL  1.10000000000000E+0000
46545: MUL
46546: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46547: LD_ADDR_VAR 0 10
46551: PUSH
46552: LD_VAR 0 10
46556: PUSH
46557: LD_VAR 0 6
46561: PPUSH
46562: LD_INT 1
46564: PPUSH
46565: CALL_OW 259
46569: PUSH
46570: LD_REAL  1.15000000000000E+0000
46573: MUL
46574: MUL
46575: ST_TO_ADDR
// end ; unit_vehicle :
46576: GO 47404
46578: LD_INT 2
46580: DOUBLE
46581: EQUAL
46582: IFTRUE 46586
46584: GO 47392
46586: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46587: LD_VAR 0 6
46591: PPUSH
46592: CALL_OW 264
46596: PUSH
46597: LD_INT 2
46599: PUSH
46600: LD_INT 42
46602: PUSH
46603: LD_INT 24
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: LIST
46610: IN
46611: IFFALSE 46632
// points := [ 25 , 5 , 3 ] ;
46613: LD_ADDR_VAR 0 9
46617: PUSH
46618: LD_INT 25
46620: PUSH
46621: LD_INT 5
46623: PUSH
46624: LD_INT 3
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: LIST
46631: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46632: LD_VAR 0 6
46636: PPUSH
46637: CALL_OW 264
46641: PUSH
46642: LD_INT 4
46644: PUSH
46645: LD_INT 43
46647: PUSH
46648: LD_INT 25
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: LIST
46655: IN
46656: IFFALSE 46677
// points := [ 40 , 15 , 5 ] ;
46658: LD_ADDR_VAR 0 9
46662: PUSH
46663: LD_INT 40
46665: PUSH
46666: LD_INT 15
46668: PUSH
46669: LD_INT 5
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: LIST
46676: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46677: LD_VAR 0 6
46681: PPUSH
46682: CALL_OW 264
46686: PUSH
46687: LD_INT 3
46689: PUSH
46690: LD_INT 23
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: IN
46697: IFFALSE 46718
// points := [ 7 , 25 , 8 ] ;
46699: LD_ADDR_VAR 0 9
46703: PUSH
46704: LD_INT 7
46706: PUSH
46707: LD_INT 25
46709: PUSH
46710: LD_INT 8
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: LIST
46717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46718: LD_VAR 0 6
46722: PPUSH
46723: CALL_OW 264
46727: PUSH
46728: LD_INT 5
46730: PUSH
46731: LD_INT 27
46733: PUSH
46734: LD_INT 44
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: LIST
46741: IN
46742: IFFALSE 46763
// points := [ 14 , 50 , 16 ] ;
46744: LD_ADDR_VAR 0 9
46748: PUSH
46749: LD_INT 14
46751: PUSH
46752: LD_INT 50
46754: PUSH
46755: LD_INT 16
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: LIST
46762: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46763: LD_VAR 0 6
46767: PPUSH
46768: CALL_OW 264
46772: PUSH
46773: LD_INT 6
46775: PUSH
46776: LD_INT 46
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: IN
46783: IFFALSE 46804
// points := [ 32 , 120 , 70 ] ;
46785: LD_ADDR_VAR 0 9
46789: PUSH
46790: LD_INT 32
46792: PUSH
46793: LD_INT 120
46795: PUSH
46796: LD_INT 70
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: LIST
46803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46804: LD_VAR 0 6
46808: PPUSH
46809: CALL_OW 264
46813: PUSH
46814: LD_INT 7
46816: PUSH
46817: LD_INT 28
46819: PUSH
46820: LD_INT 45
46822: PUSH
46823: LD_INT 92
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: IN
46832: IFFALSE 46853
// points := [ 35 , 20 , 45 ] ;
46834: LD_ADDR_VAR 0 9
46838: PUSH
46839: LD_INT 35
46841: PUSH
46842: LD_INT 20
46844: PUSH
46845: LD_INT 45
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: LIST
46852: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46853: LD_VAR 0 6
46857: PPUSH
46858: CALL_OW 264
46862: PUSH
46863: LD_INT 47
46865: PUSH
46866: EMPTY
46867: LIST
46868: IN
46869: IFFALSE 46890
// points := [ 67 , 45 , 75 ] ;
46871: LD_ADDR_VAR 0 9
46875: PUSH
46876: LD_INT 67
46878: PUSH
46879: LD_INT 45
46881: PUSH
46882: LD_INT 75
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: LIST
46889: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46890: LD_VAR 0 6
46894: PPUSH
46895: CALL_OW 264
46899: PUSH
46900: LD_INT 26
46902: PUSH
46903: EMPTY
46904: LIST
46905: IN
46906: IFFALSE 46927
// points := [ 120 , 30 , 80 ] ;
46908: LD_ADDR_VAR 0 9
46912: PUSH
46913: LD_INT 120
46915: PUSH
46916: LD_INT 30
46918: PUSH
46919: LD_INT 80
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: LIST
46926: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46927: LD_VAR 0 6
46931: PPUSH
46932: CALL_OW 264
46936: PUSH
46937: LD_INT 22
46939: PUSH
46940: EMPTY
46941: LIST
46942: IN
46943: IFFALSE 46964
// points := [ 40 , 1 , 1 ] ;
46945: LD_ADDR_VAR 0 9
46949: PUSH
46950: LD_INT 40
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: LIST
46963: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46964: LD_VAR 0 6
46968: PPUSH
46969: CALL_OW 264
46973: PUSH
46974: LD_INT 29
46976: PUSH
46977: EMPTY
46978: LIST
46979: IN
46980: IFFALSE 47001
// points := [ 70 , 200 , 400 ] ;
46982: LD_ADDR_VAR 0 9
46986: PUSH
46987: LD_INT 70
46989: PUSH
46990: LD_INT 200
46992: PUSH
46993: LD_INT 400
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: LIST
47000: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47001: LD_VAR 0 6
47005: PPUSH
47006: CALL_OW 264
47010: PUSH
47011: LD_INT 14
47013: PUSH
47014: LD_INT 53
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: IN
47021: IFFALSE 47042
// points := [ 40 , 10 , 20 ] ;
47023: LD_ADDR_VAR 0 9
47027: PUSH
47028: LD_INT 40
47030: PUSH
47031: LD_INT 10
47033: PUSH
47034: LD_INT 20
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: LIST
47041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47042: LD_VAR 0 6
47046: PPUSH
47047: CALL_OW 264
47051: PUSH
47052: LD_INT 9
47054: PUSH
47055: EMPTY
47056: LIST
47057: IN
47058: IFFALSE 47079
// points := [ 5 , 70 , 20 ] ;
47060: LD_ADDR_VAR 0 9
47064: PUSH
47065: LD_INT 5
47067: PUSH
47068: LD_INT 70
47070: PUSH
47071: LD_INT 20
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: LIST
47078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47079: LD_VAR 0 6
47083: PPUSH
47084: CALL_OW 264
47088: PUSH
47089: LD_INT 10
47091: PUSH
47092: EMPTY
47093: LIST
47094: IN
47095: IFFALSE 47116
// points := [ 35 , 110 , 70 ] ;
47097: LD_ADDR_VAR 0 9
47101: PUSH
47102: LD_INT 35
47104: PUSH
47105: LD_INT 110
47107: PUSH
47108: LD_INT 70
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: LIST
47115: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47116: LD_VAR 0 6
47120: PPUSH
47121: CALL_OW 265
47125: PUSH
47126: LD_INT 25
47128: EQUAL
47129: IFFALSE 47150
// points := [ 80 , 65 , 100 ] ;
47131: LD_ADDR_VAR 0 9
47135: PUSH
47136: LD_INT 80
47138: PUSH
47139: LD_INT 65
47141: PUSH
47142: LD_INT 100
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: LIST
47149: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47150: LD_VAR 0 6
47154: PPUSH
47155: CALL_OW 263
47159: PUSH
47160: LD_INT 1
47162: EQUAL
47163: IFFALSE 47198
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47165: LD_ADDR_VAR 0 10
47169: PUSH
47170: LD_VAR 0 10
47174: PUSH
47175: LD_VAR 0 6
47179: PPUSH
47180: CALL_OW 311
47184: PPUSH
47185: LD_INT 3
47187: PPUSH
47188: CALL_OW 259
47192: PUSH
47193: LD_INT 4
47195: MUL
47196: MUL
47197: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47198: LD_VAR 0 6
47202: PPUSH
47203: CALL_OW 263
47207: PUSH
47208: LD_INT 2
47210: EQUAL
47211: IFFALSE 47262
// begin j := IsControledBy ( i ) ;
47213: LD_ADDR_VAR 0 7
47217: PUSH
47218: LD_VAR 0 6
47222: PPUSH
47223: CALL_OW 312
47227: ST_TO_ADDR
// if j then
47228: LD_VAR 0 7
47232: IFFALSE 47262
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47234: LD_ADDR_VAR 0 10
47238: PUSH
47239: LD_VAR 0 10
47243: PUSH
47244: LD_VAR 0 7
47248: PPUSH
47249: LD_INT 3
47251: PPUSH
47252: CALL_OW 259
47256: PUSH
47257: LD_INT 3
47259: MUL
47260: MUL
47261: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47262: LD_VAR 0 6
47266: PPUSH
47267: CALL_OW 264
47271: PUSH
47272: LD_INT 5
47274: PUSH
47275: LD_INT 6
47277: PUSH
47278: LD_INT 46
47280: PUSH
47281: LD_INT 44
47283: PUSH
47284: LD_INT 47
47286: PUSH
47287: LD_INT 45
47289: PUSH
47290: LD_INT 28
47292: PUSH
47293: LD_INT 7
47295: PUSH
47296: LD_INT 27
47298: PUSH
47299: LD_INT 29
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: IN
47314: PUSH
47315: LD_VAR 0 1
47319: PPUSH
47320: LD_INT 52
47322: PPUSH
47323: CALL_OW 321
47327: PUSH
47328: LD_INT 2
47330: EQUAL
47331: AND
47332: IFFALSE 47349
// bpoints := bpoints * 1.2 ;
47334: LD_ADDR_VAR 0 10
47338: PUSH
47339: LD_VAR 0 10
47343: PUSH
47344: LD_REAL  1.20000000000000E+0000
47347: MUL
47348: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47349: LD_VAR 0 6
47353: PPUSH
47354: CALL_OW 264
47358: PUSH
47359: LD_INT 6
47361: PUSH
47362: LD_INT 46
47364: PUSH
47365: LD_INT 47
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: LIST
47372: IN
47373: IFFALSE 47390
// bpoints := bpoints * 1.2 ;
47375: LD_ADDR_VAR 0 10
47379: PUSH
47380: LD_VAR 0 10
47384: PUSH
47385: LD_REAL  1.20000000000000E+0000
47388: MUL
47389: ST_TO_ADDR
// end ; unit_building :
47390: GO 47404
47392: LD_INT 3
47394: DOUBLE
47395: EQUAL
47396: IFTRUE 47400
47398: GO 47403
47400: POP
// ; end ;
47401: GO 47404
47403: POP
// for j = 1 to 3 do
47404: LD_ADDR_VAR 0 7
47408: PUSH
47409: DOUBLE
47410: LD_INT 1
47412: DEC
47413: ST_TO_ADDR
47414: LD_INT 3
47416: PUSH
47417: FOR_TO
47418: IFFALSE 47471
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47420: LD_ADDR_VAR 0 5
47424: PUSH
47425: LD_VAR 0 5
47429: PPUSH
47430: LD_VAR 0 7
47434: PPUSH
47435: LD_VAR 0 5
47439: PUSH
47440: LD_VAR 0 7
47444: ARRAY
47445: PUSH
47446: LD_VAR 0 9
47450: PUSH
47451: LD_VAR 0 7
47455: ARRAY
47456: PUSH
47457: LD_VAR 0 10
47461: MUL
47462: PLUS
47463: PPUSH
47464: CALL_OW 1
47468: ST_TO_ADDR
47469: GO 47417
47471: POP
47472: POP
// end ;
47473: GO 45952
47475: POP
47476: POP
// result := Replace ( result , 4 , tmp ) ;
47477: LD_ADDR_VAR 0 5
47481: PUSH
47482: LD_VAR 0 5
47486: PPUSH
47487: LD_INT 4
47489: PPUSH
47490: LD_VAR 0 8
47494: PPUSH
47495: CALL_OW 1
47499: ST_TO_ADDR
// end ;
47500: LD_VAR 0 5
47504: RET
// export function DangerAtRange ( unit , range ) ; begin
47505: LD_INT 0
47507: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47508: LD_ADDR_VAR 0 3
47512: PUSH
47513: LD_VAR 0 1
47517: PPUSH
47518: CALL_OW 255
47522: PPUSH
47523: LD_VAR 0 1
47527: PPUSH
47528: CALL_OW 250
47532: PPUSH
47533: LD_VAR 0 1
47537: PPUSH
47538: CALL_OW 251
47542: PPUSH
47543: LD_VAR 0 2
47547: PPUSH
47548: CALL 45804 0 4
47552: ST_TO_ADDR
// end ;
47553: LD_VAR 0 3
47557: RET
// export function DangerInArea ( side , area ) ; begin
47558: LD_INT 0
47560: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47561: LD_ADDR_VAR 0 3
47565: PUSH
47566: LD_VAR 0 2
47570: PPUSH
47571: LD_INT 81
47573: PUSH
47574: LD_VAR 0 1
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PPUSH
47583: CALL_OW 70
47587: ST_TO_ADDR
// end ;
47588: LD_VAR 0 3
47592: RET
// export function IsExtension ( b ) ; begin
47593: LD_INT 0
47595: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47596: LD_ADDR_VAR 0 2
47600: PUSH
47601: LD_VAR 0 1
47605: PUSH
47606: LD_INT 23
47608: PUSH
47609: LD_INT 20
47611: PUSH
47612: LD_INT 22
47614: PUSH
47615: LD_INT 17
47617: PUSH
47618: LD_INT 24
47620: PUSH
47621: LD_INT 21
47623: PUSH
47624: LD_INT 19
47626: PUSH
47627: LD_INT 16
47629: PUSH
47630: LD_INT 25
47632: PUSH
47633: LD_INT 18
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: IN
47648: ST_TO_ADDR
// end ;
47649: LD_VAR 0 2
47653: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47654: LD_INT 0
47656: PPUSH
47657: PPUSH
47658: PPUSH
// result := [ ] ;
47659: LD_ADDR_VAR 0 4
47663: PUSH
47664: EMPTY
47665: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47666: LD_ADDR_VAR 0 5
47670: PUSH
47671: LD_VAR 0 2
47675: PPUSH
47676: LD_INT 21
47678: PUSH
47679: LD_INT 3
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PPUSH
47686: CALL_OW 70
47690: ST_TO_ADDR
// if not tmp then
47691: LD_VAR 0 5
47695: NOT
47696: IFFALSE 47700
// exit ;
47698: GO 47764
// if checkLink then
47700: LD_VAR 0 3
47704: IFFALSE 47754
// begin for i in tmp do
47706: LD_ADDR_VAR 0 6
47710: PUSH
47711: LD_VAR 0 5
47715: PUSH
47716: FOR_IN
47717: IFFALSE 47752
// if GetBase ( i ) <> base then
47719: LD_VAR 0 6
47723: PPUSH
47724: CALL_OW 274
47728: PUSH
47729: LD_VAR 0 1
47733: NONEQUAL
47734: IFFALSE 47750
// ComLinkToBase ( base , i ) ;
47736: LD_VAR 0 1
47740: PPUSH
47741: LD_VAR 0 6
47745: PPUSH
47746: CALL_OW 169
47750: GO 47716
47752: POP
47753: POP
// end ; result := tmp ;
47754: LD_ADDR_VAR 0 4
47758: PUSH
47759: LD_VAR 0 5
47763: ST_TO_ADDR
// end ;
47764: LD_VAR 0 4
47768: RET
// export function ComComplete ( units , b ) ; var i ; begin
47769: LD_INT 0
47771: PPUSH
47772: PPUSH
// if not units then
47773: LD_VAR 0 1
47777: NOT
47778: IFFALSE 47782
// exit ;
47780: GO 47872
// for i in units do
47782: LD_ADDR_VAR 0 4
47786: PUSH
47787: LD_VAR 0 1
47791: PUSH
47792: FOR_IN
47793: IFFALSE 47870
// if BuildingStatus ( b ) = bs_build then
47795: LD_VAR 0 2
47799: PPUSH
47800: CALL_OW 461
47804: PUSH
47805: LD_INT 1
47807: EQUAL
47808: IFFALSE 47868
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47810: LD_VAR 0 4
47814: PPUSH
47815: LD_STRING h
47817: PUSH
47818: LD_VAR 0 2
47822: PPUSH
47823: CALL_OW 250
47827: PUSH
47828: LD_VAR 0 2
47832: PPUSH
47833: CALL_OW 251
47837: PUSH
47838: LD_VAR 0 2
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: PUSH
47861: EMPTY
47862: LIST
47863: PPUSH
47864: CALL_OW 446
47868: GO 47792
47870: POP
47871: POP
// end ;
47872: LD_VAR 0 3
47876: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47877: LD_INT 0
47879: PPUSH
47880: PPUSH
47881: PPUSH
47882: PPUSH
47883: PPUSH
47884: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47885: LD_VAR 0 1
47889: NOT
47890: PUSH
47891: LD_VAR 0 1
47895: PPUSH
47896: CALL_OW 263
47900: PUSH
47901: LD_INT 2
47903: NONEQUAL
47904: OR
47905: IFFALSE 47909
// exit ;
47907: GO 48225
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47909: LD_ADDR_VAR 0 6
47913: PUSH
47914: LD_INT 22
47916: PUSH
47917: LD_VAR 0 1
47921: PPUSH
47922: CALL_OW 255
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 2
47933: PUSH
47934: LD_INT 30
47936: PUSH
47937: LD_INT 36
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 34
47946: PUSH
47947: LD_INT 31
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: LIST
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PPUSH
47963: CALL_OW 69
47967: ST_TO_ADDR
// if not tmp then
47968: LD_VAR 0 6
47972: NOT
47973: IFFALSE 47977
// exit ;
47975: GO 48225
// result := [ ] ;
47977: LD_ADDR_VAR 0 2
47981: PUSH
47982: EMPTY
47983: ST_TO_ADDR
// for i in tmp do
47984: LD_ADDR_VAR 0 3
47988: PUSH
47989: LD_VAR 0 6
47993: PUSH
47994: FOR_IN
47995: IFFALSE 48066
// begin t := UnitsInside ( i ) ;
47997: LD_ADDR_VAR 0 4
48001: PUSH
48002: LD_VAR 0 3
48006: PPUSH
48007: CALL_OW 313
48011: ST_TO_ADDR
// if t then
48012: LD_VAR 0 4
48016: IFFALSE 48064
// for j in t do
48018: LD_ADDR_VAR 0 7
48022: PUSH
48023: LD_VAR 0 4
48027: PUSH
48028: FOR_IN
48029: IFFALSE 48062
// result := Replace ( result , result + 1 , j ) ;
48031: LD_ADDR_VAR 0 2
48035: PUSH
48036: LD_VAR 0 2
48040: PPUSH
48041: LD_VAR 0 2
48045: PUSH
48046: LD_INT 1
48048: PLUS
48049: PPUSH
48050: LD_VAR 0 7
48054: PPUSH
48055: CALL_OW 1
48059: ST_TO_ADDR
48060: GO 48028
48062: POP
48063: POP
// end ;
48064: GO 47994
48066: POP
48067: POP
// if not result then
48068: LD_VAR 0 2
48072: NOT
48073: IFFALSE 48077
// exit ;
48075: GO 48225
// mech := result [ 1 ] ;
48077: LD_ADDR_VAR 0 5
48081: PUSH
48082: LD_VAR 0 2
48086: PUSH
48087: LD_INT 1
48089: ARRAY
48090: ST_TO_ADDR
// if result > 1 then
48091: LD_VAR 0 2
48095: PUSH
48096: LD_INT 1
48098: GREATER
48099: IFFALSE 48211
// begin for i = 2 to result do
48101: LD_ADDR_VAR 0 3
48105: PUSH
48106: DOUBLE
48107: LD_INT 2
48109: DEC
48110: ST_TO_ADDR
48111: LD_VAR 0 2
48115: PUSH
48116: FOR_TO
48117: IFFALSE 48209
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48119: LD_ADDR_VAR 0 4
48123: PUSH
48124: LD_VAR 0 2
48128: PUSH
48129: LD_VAR 0 3
48133: ARRAY
48134: PPUSH
48135: LD_INT 3
48137: PPUSH
48138: CALL_OW 259
48142: PUSH
48143: LD_VAR 0 2
48147: PUSH
48148: LD_VAR 0 3
48152: ARRAY
48153: PPUSH
48154: CALL_OW 432
48158: MINUS
48159: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48160: LD_VAR 0 4
48164: PUSH
48165: LD_VAR 0 5
48169: PPUSH
48170: LD_INT 3
48172: PPUSH
48173: CALL_OW 259
48177: PUSH
48178: LD_VAR 0 5
48182: PPUSH
48183: CALL_OW 432
48187: MINUS
48188: GREATEREQUAL
48189: IFFALSE 48207
// mech := result [ i ] ;
48191: LD_ADDR_VAR 0 5
48195: PUSH
48196: LD_VAR 0 2
48200: PUSH
48201: LD_VAR 0 3
48205: ARRAY
48206: ST_TO_ADDR
// end ;
48207: GO 48116
48209: POP
48210: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48211: LD_VAR 0 1
48215: PPUSH
48216: LD_VAR 0 5
48220: PPUSH
48221: CALL_OW 135
// end ;
48225: LD_VAR 0 2
48229: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48230: LD_INT 0
48232: PPUSH
48233: PPUSH
48234: PPUSH
48235: PPUSH
48236: PPUSH
48237: PPUSH
48238: PPUSH
48239: PPUSH
48240: PPUSH
48241: PPUSH
48242: PPUSH
48243: PPUSH
48244: PPUSH
// result := [ ] ;
48245: LD_ADDR_VAR 0 7
48249: PUSH
48250: EMPTY
48251: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48252: LD_VAR 0 1
48256: PPUSH
48257: CALL_OW 266
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: IN
48272: NOT
48273: IFFALSE 48277
// exit ;
48275: GO 49911
// if name then
48277: LD_VAR 0 3
48281: IFFALSE 48297
// SetBName ( base_dep , name ) ;
48283: LD_VAR 0 1
48287: PPUSH
48288: LD_VAR 0 3
48292: PPUSH
48293: CALL_OW 500
// base := GetBase ( base_dep ) ;
48297: LD_ADDR_VAR 0 15
48301: PUSH
48302: LD_VAR 0 1
48306: PPUSH
48307: CALL_OW 274
48311: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48312: LD_ADDR_VAR 0 16
48316: PUSH
48317: LD_VAR 0 1
48321: PPUSH
48322: CALL_OW 255
48326: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48327: LD_ADDR_VAR 0 17
48331: PUSH
48332: LD_VAR 0 1
48336: PPUSH
48337: CALL_OW 248
48341: ST_TO_ADDR
// if sources then
48342: LD_VAR 0 5
48346: IFFALSE 48393
// for i = 1 to 3 do
48348: LD_ADDR_VAR 0 8
48352: PUSH
48353: DOUBLE
48354: LD_INT 1
48356: DEC
48357: ST_TO_ADDR
48358: LD_INT 3
48360: PUSH
48361: FOR_TO
48362: IFFALSE 48391
// AddResourceType ( base , i , sources [ i ] ) ;
48364: LD_VAR 0 15
48368: PPUSH
48369: LD_VAR 0 8
48373: PPUSH
48374: LD_VAR 0 5
48378: PUSH
48379: LD_VAR 0 8
48383: ARRAY
48384: PPUSH
48385: CALL_OW 276
48389: GO 48361
48391: POP
48392: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48393: LD_ADDR_VAR 0 18
48397: PUSH
48398: LD_VAR 0 15
48402: PPUSH
48403: LD_VAR 0 2
48407: PPUSH
48408: LD_INT 1
48410: PPUSH
48411: CALL 47654 0 3
48415: ST_TO_ADDR
// InitHc ;
48416: CALL_OW 19
// InitUc ;
48420: CALL_OW 18
// uc_side := side ;
48424: LD_ADDR_OWVAR 20
48428: PUSH
48429: LD_VAR 0 16
48433: ST_TO_ADDR
// uc_nation := nation ;
48434: LD_ADDR_OWVAR 21
48438: PUSH
48439: LD_VAR 0 17
48443: ST_TO_ADDR
// if buildings then
48444: LD_VAR 0 18
48448: IFFALSE 49770
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48450: LD_ADDR_VAR 0 19
48454: PUSH
48455: LD_VAR 0 18
48459: PPUSH
48460: LD_INT 2
48462: PUSH
48463: LD_INT 30
48465: PUSH
48466: LD_INT 29
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 30
48475: PUSH
48476: LD_INT 30
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: LIST
48487: PPUSH
48488: CALL_OW 72
48492: ST_TO_ADDR
// if tmp then
48493: LD_VAR 0 19
48497: IFFALSE 48545
// for i in tmp do
48499: LD_ADDR_VAR 0 8
48503: PUSH
48504: LD_VAR 0 19
48508: PUSH
48509: FOR_IN
48510: IFFALSE 48543
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48512: LD_VAR 0 8
48516: PPUSH
48517: CALL_OW 250
48521: PPUSH
48522: LD_VAR 0 8
48526: PPUSH
48527: CALL_OW 251
48531: PPUSH
48532: LD_VAR 0 16
48536: PPUSH
48537: CALL_OW 441
48541: GO 48509
48543: POP
48544: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48545: LD_VAR 0 18
48549: PPUSH
48550: LD_INT 2
48552: PUSH
48553: LD_INT 30
48555: PUSH
48556: LD_INT 32
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 30
48565: PUSH
48566: LD_INT 33
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: LIST
48577: PPUSH
48578: CALL_OW 72
48582: IFFALSE 48670
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48584: LD_ADDR_VAR 0 8
48588: PUSH
48589: LD_VAR 0 18
48593: PPUSH
48594: LD_INT 2
48596: PUSH
48597: LD_INT 30
48599: PUSH
48600: LD_INT 32
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 30
48609: PUSH
48610: LD_INT 33
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: LIST
48621: PPUSH
48622: CALL_OW 72
48626: PUSH
48627: FOR_IN
48628: IFFALSE 48668
// begin if not GetBWeapon ( i ) then
48630: LD_VAR 0 8
48634: PPUSH
48635: CALL_OW 269
48639: NOT
48640: IFFALSE 48666
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48642: LD_VAR 0 8
48646: PPUSH
48647: LD_VAR 0 8
48651: PPUSH
48652: LD_VAR 0 2
48656: PPUSH
48657: CALL 49916 0 2
48661: PPUSH
48662: CALL_OW 431
// end ;
48666: GO 48627
48668: POP
48669: POP
// end ; for i = 1 to personel do
48670: LD_ADDR_VAR 0 8
48674: PUSH
48675: DOUBLE
48676: LD_INT 1
48678: DEC
48679: ST_TO_ADDR
48680: LD_VAR 0 6
48684: PUSH
48685: FOR_TO
48686: IFFALSE 49750
// begin if i > 4 then
48688: LD_VAR 0 8
48692: PUSH
48693: LD_INT 4
48695: GREATER
48696: IFFALSE 48700
// break ;
48698: GO 49750
// case i of 1 :
48700: LD_VAR 0 8
48704: PUSH
48705: LD_INT 1
48707: DOUBLE
48708: EQUAL
48709: IFTRUE 48713
48711: GO 48793
48713: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48714: LD_ADDR_VAR 0 12
48718: PUSH
48719: LD_VAR 0 18
48723: PPUSH
48724: LD_INT 22
48726: PUSH
48727: LD_VAR 0 16
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 58
48738: PUSH
48739: EMPTY
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: LD_INT 30
48747: PUSH
48748: LD_INT 32
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 30
48757: PUSH
48758: LD_INT 4
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 30
48767: PUSH
48768: LD_INT 5
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: LIST
48785: PPUSH
48786: CALL_OW 72
48790: ST_TO_ADDR
48791: GO 49015
48793: LD_INT 2
48795: DOUBLE
48796: EQUAL
48797: IFTRUE 48801
48799: GO 48863
48801: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48802: LD_ADDR_VAR 0 12
48806: PUSH
48807: LD_VAR 0 18
48811: PPUSH
48812: LD_INT 22
48814: PUSH
48815: LD_VAR 0 16
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: LD_INT 30
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 30
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: LIST
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PPUSH
48856: CALL_OW 72
48860: ST_TO_ADDR
48861: GO 49015
48863: LD_INT 3
48865: DOUBLE
48866: EQUAL
48867: IFTRUE 48871
48869: GO 48933
48871: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48872: LD_ADDR_VAR 0 12
48876: PUSH
48877: LD_VAR 0 18
48881: PPUSH
48882: LD_INT 22
48884: PUSH
48885: LD_VAR 0 16
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 2
48896: PUSH
48897: LD_INT 30
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 30
48909: PUSH
48910: LD_INT 3
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: LIST
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PPUSH
48926: CALL_OW 72
48930: ST_TO_ADDR
48931: GO 49015
48933: LD_INT 4
48935: DOUBLE
48936: EQUAL
48937: IFTRUE 48941
48939: GO 49014
48941: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48942: LD_ADDR_VAR 0 12
48946: PUSH
48947: LD_VAR 0 18
48951: PPUSH
48952: LD_INT 22
48954: PUSH
48955: LD_VAR 0 16
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: LD_INT 30
48969: PUSH
48970: LD_INT 6
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 30
48979: PUSH
48980: LD_INT 7
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 30
48989: PUSH
48990: LD_INT 8
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PPUSH
49007: CALL_OW 72
49011: ST_TO_ADDR
49012: GO 49015
49014: POP
// if i = 1 then
49015: LD_VAR 0 8
49019: PUSH
49020: LD_INT 1
49022: EQUAL
49023: IFFALSE 49134
// begin tmp := [ ] ;
49025: LD_ADDR_VAR 0 19
49029: PUSH
49030: EMPTY
49031: ST_TO_ADDR
// for j in f do
49032: LD_ADDR_VAR 0 9
49036: PUSH
49037: LD_VAR 0 12
49041: PUSH
49042: FOR_IN
49043: IFFALSE 49116
// if GetBType ( j ) = b_bunker then
49045: LD_VAR 0 9
49049: PPUSH
49050: CALL_OW 266
49054: PUSH
49055: LD_INT 32
49057: EQUAL
49058: IFFALSE 49085
// tmp := Insert ( tmp , 1 , j ) else
49060: LD_ADDR_VAR 0 19
49064: PUSH
49065: LD_VAR 0 19
49069: PPUSH
49070: LD_INT 1
49072: PPUSH
49073: LD_VAR 0 9
49077: PPUSH
49078: CALL_OW 2
49082: ST_TO_ADDR
49083: GO 49114
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49085: LD_ADDR_VAR 0 19
49089: PUSH
49090: LD_VAR 0 19
49094: PPUSH
49095: LD_VAR 0 19
49099: PUSH
49100: LD_INT 1
49102: PLUS
49103: PPUSH
49104: LD_VAR 0 9
49108: PPUSH
49109: CALL_OW 2
49113: ST_TO_ADDR
49114: GO 49042
49116: POP
49117: POP
// if tmp then
49118: LD_VAR 0 19
49122: IFFALSE 49134
// f := tmp ;
49124: LD_ADDR_VAR 0 12
49128: PUSH
49129: LD_VAR 0 19
49133: ST_TO_ADDR
// end ; x := personel [ i ] ;
49134: LD_ADDR_VAR 0 13
49138: PUSH
49139: LD_VAR 0 6
49143: PUSH
49144: LD_VAR 0 8
49148: ARRAY
49149: ST_TO_ADDR
// if x = - 1 then
49150: LD_VAR 0 13
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: EQUAL
49159: IFFALSE 49368
// begin for j in f do
49161: LD_ADDR_VAR 0 9
49165: PUSH
49166: LD_VAR 0 12
49170: PUSH
49171: FOR_IN
49172: IFFALSE 49364
// repeat InitHc ;
49174: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49178: LD_VAR 0 9
49182: PPUSH
49183: CALL_OW 266
49187: PUSH
49188: LD_INT 5
49190: EQUAL
49191: IFFALSE 49261
// begin if UnitsInside ( j ) < 3 then
49193: LD_VAR 0 9
49197: PPUSH
49198: CALL_OW 313
49202: PUSH
49203: LD_INT 3
49205: LESS
49206: IFFALSE 49242
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49208: LD_INT 0
49210: PPUSH
49211: LD_INT 5
49213: PUSH
49214: LD_INT 8
49216: PUSH
49217: LD_INT 9
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: LIST
49224: PUSH
49225: LD_VAR 0 17
49229: ARRAY
49230: PPUSH
49231: LD_VAR 0 4
49235: PPUSH
49236: CALL_OW 380
49240: GO 49259
// PrepareHuman ( false , i , skill ) ;
49242: LD_INT 0
49244: PPUSH
49245: LD_VAR 0 8
49249: PPUSH
49250: LD_VAR 0 4
49254: PPUSH
49255: CALL_OW 380
// end else
49259: GO 49278
// PrepareHuman ( false , i , skill ) ;
49261: LD_INT 0
49263: PPUSH
49264: LD_VAR 0 8
49268: PPUSH
49269: LD_VAR 0 4
49273: PPUSH
49274: CALL_OW 380
// un := CreateHuman ;
49278: LD_ADDR_VAR 0 14
49282: PUSH
49283: CALL_OW 44
49287: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49288: LD_ADDR_VAR 0 7
49292: PUSH
49293: LD_VAR 0 7
49297: PPUSH
49298: LD_INT 1
49300: PPUSH
49301: LD_VAR 0 14
49305: PPUSH
49306: CALL_OW 2
49310: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49311: LD_VAR 0 14
49315: PPUSH
49316: LD_VAR 0 9
49320: PPUSH
49321: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49325: LD_VAR 0 9
49329: PPUSH
49330: CALL_OW 313
49334: PUSH
49335: LD_INT 6
49337: EQUAL
49338: PUSH
49339: LD_VAR 0 9
49343: PPUSH
49344: CALL_OW 266
49348: PUSH
49349: LD_INT 32
49351: PUSH
49352: LD_INT 31
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: IN
49359: OR
49360: IFFALSE 49174
49362: GO 49171
49364: POP
49365: POP
// end else
49366: GO 49748
// for j = 1 to x do
49368: LD_ADDR_VAR 0 9
49372: PUSH
49373: DOUBLE
49374: LD_INT 1
49376: DEC
49377: ST_TO_ADDR
49378: LD_VAR 0 13
49382: PUSH
49383: FOR_TO
49384: IFFALSE 49746
// begin InitHc ;
49386: CALL_OW 19
// if not f then
49390: LD_VAR 0 12
49394: NOT
49395: IFFALSE 49484
// begin PrepareHuman ( false , i , skill ) ;
49397: LD_INT 0
49399: PPUSH
49400: LD_VAR 0 8
49404: PPUSH
49405: LD_VAR 0 4
49409: PPUSH
49410: CALL_OW 380
// un := CreateHuman ;
49414: LD_ADDR_VAR 0 14
49418: PUSH
49419: CALL_OW 44
49423: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49424: LD_ADDR_VAR 0 7
49428: PUSH
49429: LD_VAR 0 7
49433: PPUSH
49434: LD_INT 1
49436: PPUSH
49437: LD_VAR 0 14
49441: PPUSH
49442: CALL_OW 2
49446: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49447: LD_VAR 0 14
49451: PPUSH
49452: LD_VAR 0 1
49456: PPUSH
49457: CALL_OW 250
49461: PPUSH
49462: LD_VAR 0 1
49466: PPUSH
49467: CALL_OW 251
49471: PPUSH
49472: LD_INT 10
49474: PPUSH
49475: LD_INT 0
49477: PPUSH
49478: CALL_OW 50
// continue ;
49482: GO 49383
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49484: LD_VAR 0 12
49488: PUSH
49489: LD_INT 1
49491: ARRAY
49492: PPUSH
49493: CALL_OW 313
49497: PUSH
49498: LD_VAR 0 12
49502: PUSH
49503: LD_INT 1
49505: ARRAY
49506: PPUSH
49507: CALL_OW 266
49511: PUSH
49512: LD_INT 32
49514: PUSH
49515: LD_INT 31
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: IN
49522: AND
49523: PUSH
49524: LD_VAR 0 12
49528: PUSH
49529: LD_INT 1
49531: ARRAY
49532: PPUSH
49533: CALL_OW 313
49537: PUSH
49538: LD_INT 6
49540: EQUAL
49541: OR
49542: IFFALSE 49562
// f := Delete ( f , 1 ) ;
49544: LD_ADDR_VAR 0 12
49548: PUSH
49549: LD_VAR 0 12
49553: PPUSH
49554: LD_INT 1
49556: PPUSH
49557: CALL_OW 3
49561: ST_TO_ADDR
// if not f then
49562: LD_VAR 0 12
49566: NOT
49567: IFFALSE 49585
// begin x := x + 2 ;
49569: LD_ADDR_VAR 0 13
49573: PUSH
49574: LD_VAR 0 13
49578: PUSH
49579: LD_INT 2
49581: PLUS
49582: ST_TO_ADDR
// continue ;
49583: GO 49383
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49585: LD_VAR 0 12
49589: PUSH
49590: LD_INT 1
49592: ARRAY
49593: PPUSH
49594: CALL_OW 266
49598: PUSH
49599: LD_INT 5
49601: EQUAL
49602: IFFALSE 49676
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49604: LD_VAR 0 12
49608: PUSH
49609: LD_INT 1
49611: ARRAY
49612: PPUSH
49613: CALL_OW 313
49617: PUSH
49618: LD_INT 3
49620: LESS
49621: IFFALSE 49657
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49623: LD_INT 0
49625: PPUSH
49626: LD_INT 5
49628: PUSH
49629: LD_INT 8
49631: PUSH
49632: LD_INT 9
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: LIST
49639: PUSH
49640: LD_VAR 0 17
49644: ARRAY
49645: PPUSH
49646: LD_VAR 0 4
49650: PPUSH
49651: CALL_OW 380
49655: GO 49674
// PrepareHuman ( false , i , skill ) ;
49657: LD_INT 0
49659: PPUSH
49660: LD_VAR 0 8
49664: PPUSH
49665: LD_VAR 0 4
49669: PPUSH
49670: CALL_OW 380
// end else
49674: GO 49693
// PrepareHuman ( false , i , skill ) ;
49676: LD_INT 0
49678: PPUSH
49679: LD_VAR 0 8
49683: PPUSH
49684: LD_VAR 0 4
49688: PPUSH
49689: CALL_OW 380
// un := CreateHuman ;
49693: LD_ADDR_VAR 0 14
49697: PUSH
49698: CALL_OW 44
49702: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49703: LD_ADDR_VAR 0 7
49707: PUSH
49708: LD_VAR 0 7
49712: PPUSH
49713: LD_INT 1
49715: PPUSH
49716: LD_VAR 0 14
49720: PPUSH
49721: CALL_OW 2
49725: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49726: LD_VAR 0 14
49730: PPUSH
49731: LD_VAR 0 12
49735: PUSH
49736: LD_INT 1
49738: ARRAY
49739: PPUSH
49740: CALL_OW 52
// end ;
49744: GO 49383
49746: POP
49747: POP
// end ;
49748: GO 48685
49750: POP
49751: POP
// result := result ^ buildings ;
49752: LD_ADDR_VAR 0 7
49756: PUSH
49757: LD_VAR 0 7
49761: PUSH
49762: LD_VAR 0 18
49766: ADD
49767: ST_TO_ADDR
// end else
49768: GO 49911
// begin for i = 1 to personel do
49770: LD_ADDR_VAR 0 8
49774: PUSH
49775: DOUBLE
49776: LD_INT 1
49778: DEC
49779: ST_TO_ADDR
49780: LD_VAR 0 6
49784: PUSH
49785: FOR_TO
49786: IFFALSE 49909
// begin if i > 4 then
49788: LD_VAR 0 8
49792: PUSH
49793: LD_INT 4
49795: GREATER
49796: IFFALSE 49800
// break ;
49798: GO 49909
// x := personel [ i ] ;
49800: LD_ADDR_VAR 0 13
49804: PUSH
49805: LD_VAR 0 6
49809: PUSH
49810: LD_VAR 0 8
49814: ARRAY
49815: ST_TO_ADDR
// if x = - 1 then
49816: LD_VAR 0 13
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: EQUAL
49825: IFFALSE 49829
// continue ;
49827: GO 49785
// PrepareHuman ( false , i , skill ) ;
49829: LD_INT 0
49831: PPUSH
49832: LD_VAR 0 8
49836: PPUSH
49837: LD_VAR 0 4
49841: PPUSH
49842: CALL_OW 380
// un := CreateHuman ;
49846: LD_ADDR_VAR 0 14
49850: PUSH
49851: CALL_OW 44
49855: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49856: LD_VAR 0 14
49860: PPUSH
49861: LD_VAR 0 1
49865: PPUSH
49866: CALL_OW 250
49870: PPUSH
49871: LD_VAR 0 1
49875: PPUSH
49876: CALL_OW 251
49880: PPUSH
49881: LD_INT 10
49883: PPUSH
49884: LD_INT 0
49886: PPUSH
49887: CALL_OW 50
// result := result ^ un ;
49891: LD_ADDR_VAR 0 7
49895: PUSH
49896: LD_VAR 0 7
49900: PUSH
49901: LD_VAR 0 14
49905: ADD
49906: ST_TO_ADDR
// end ;
49907: GO 49785
49909: POP
49910: POP
// end ; end ;
49911: LD_VAR 0 7
49915: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49916: LD_INT 0
49918: PPUSH
49919: PPUSH
49920: PPUSH
49921: PPUSH
49922: PPUSH
49923: PPUSH
49924: PPUSH
49925: PPUSH
49926: PPUSH
49927: PPUSH
49928: PPUSH
49929: PPUSH
49930: PPUSH
49931: PPUSH
49932: PPUSH
49933: PPUSH
// result := false ;
49934: LD_ADDR_VAR 0 3
49938: PUSH
49939: LD_INT 0
49941: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49942: LD_VAR 0 1
49946: NOT
49947: PUSH
49948: LD_VAR 0 1
49952: PPUSH
49953: CALL_OW 266
49957: PUSH
49958: LD_INT 32
49960: PUSH
49961: LD_INT 33
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: IN
49968: NOT
49969: OR
49970: IFFALSE 49974
// exit ;
49972: GO 51083
// nat := GetNation ( tower ) ;
49974: LD_ADDR_VAR 0 12
49978: PUSH
49979: LD_VAR 0 1
49983: PPUSH
49984: CALL_OW 248
49988: ST_TO_ADDR
// side := GetSide ( tower ) ;
49989: LD_ADDR_VAR 0 16
49993: PUSH
49994: LD_VAR 0 1
49998: PPUSH
49999: CALL_OW 255
50003: ST_TO_ADDR
// x := GetX ( tower ) ;
50004: LD_ADDR_VAR 0 10
50008: PUSH
50009: LD_VAR 0 1
50013: PPUSH
50014: CALL_OW 250
50018: ST_TO_ADDR
// y := GetY ( tower ) ;
50019: LD_ADDR_VAR 0 11
50023: PUSH
50024: LD_VAR 0 1
50028: PPUSH
50029: CALL_OW 251
50033: ST_TO_ADDR
// if not x or not y then
50034: LD_VAR 0 10
50038: NOT
50039: PUSH
50040: LD_VAR 0 11
50044: NOT
50045: OR
50046: IFFALSE 50050
// exit ;
50048: GO 51083
// weapon := 0 ;
50050: LD_ADDR_VAR 0 18
50054: PUSH
50055: LD_INT 0
50057: ST_TO_ADDR
// fac_list := [ ] ;
50058: LD_ADDR_VAR 0 17
50062: PUSH
50063: EMPTY
50064: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50065: LD_ADDR_VAR 0 6
50069: PUSH
50070: LD_VAR 0 1
50074: PPUSH
50075: CALL_OW 274
50079: PPUSH
50080: LD_VAR 0 2
50084: PPUSH
50085: LD_INT 0
50087: PPUSH
50088: CALL 47654 0 3
50092: PPUSH
50093: LD_INT 30
50095: PUSH
50096: LD_INT 3
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PPUSH
50103: CALL_OW 72
50107: ST_TO_ADDR
// if not factories then
50108: LD_VAR 0 6
50112: NOT
50113: IFFALSE 50117
// exit ;
50115: GO 51083
// for i in factories do
50117: LD_ADDR_VAR 0 8
50121: PUSH
50122: LD_VAR 0 6
50126: PUSH
50127: FOR_IN
50128: IFFALSE 50153
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50130: LD_ADDR_VAR 0 17
50134: PUSH
50135: LD_VAR 0 17
50139: PUSH
50140: LD_VAR 0 8
50144: PPUSH
50145: CALL_OW 478
50149: UNION
50150: ST_TO_ADDR
50151: GO 50127
50153: POP
50154: POP
// if not fac_list then
50155: LD_VAR 0 17
50159: NOT
50160: IFFALSE 50164
// exit ;
50162: GO 51083
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50164: LD_ADDR_VAR 0 5
50168: PUSH
50169: LD_INT 4
50171: PUSH
50172: LD_INT 5
50174: PUSH
50175: LD_INT 9
50177: PUSH
50178: LD_INT 10
50180: PUSH
50181: LD_INT 6
50183: PUSH
50184: LD_INT 7
50186: PUSH
50187: LD_INT 11
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 27
50201: PUSH
50202: LD_INT 28
50204: PUSH
50205: LD_INT 26
50207: PUSH
50208: LD_INT 30
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 43
50219: PUSH
50220: LD_INT 44
50222: PUSH
50223: LD_INT 46
50225: PUSH
50226: LD_INT 45
50228: PUSH
50229: LD_INT 47
50231: PUSH
50232: LD_INT 49
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: LIST
50247: PUSH
50248: LD_VAR 0 12
50252: ARRAY
50253: ST_TO_ADDR
// list := list isect fac_list ;
50254: LD_ADDR_VAR 0 5
50258: PUSH
50259: LD_VAR 0 5
50263: PUSH
50264: LD_VAR 0 17
50268: ISECT
50269: ST_TO_ADDR
// if not list then
50270: LD_VAR 0 5
50274: NOT
50275: IFFALSE 50279
// exit ;
50277: GO 51083
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50279: LD_VAR 0 12
50283: PUSH
50284: LD_INT 3
50286: EQUAL
50287: PUSH
50288: LD_INT 49
50290: PUSH
50291: LD_VAR 0 5
50295: IN
50296: AND
50297: PUSH
50298: LD_INT 31
50300: PPUSH
50301: LD_VAR 0 16
50305: PPUSH
50306: CALL_OW 321
50310: PUSH
50311: LD_INT 2
50313: EQUAL
50314: AND
50315: IFFALSE 50375
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50317: LD_INT 22
50319: PUSH
50320: LD_VAR 0 16
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 35
50331: PUSH
50332: LD_INT 49
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 91
50341: PUSH
50342: LD_VAR 0 1
50346: PUSH
50347: LD_INT 10
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: LIST
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: LIST
50359: PPUSH
50360: CALL_OW 69
50364: NOT
50365: IFFALSE 50375
// weapon := ru_time_lapser ;
50367: LD_ADDR_VAR 0 18
50371: PUSH
50372: LD_INT 49
50374: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50375: LD_VAR 0 12
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: IN
50390: PUSH
50391: LD_INT 11
50393: PUSH
50394: LD_VAR 0 5
50398: IN
50399: PUSH
50400: LD_INT 30
50402: PUSH
50403: LD_VAR 0 5
50407: IN
50408: OR
50409: AND
50410: PUSH
50411: LD_INT 6
50413: PPUSH
50414: LD_VAR 0 16
50418: PPUSH
50419: CALL_OW 321
50423: PUSH
50424: LD_INT 2
50426: EQUAL
50427: AND
50428: IFFALSE 50593
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50430: LD_INT 22
50432: PUSH
50433: LD_VAR 0 16
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: LD_INT 35
50447: PUSH
50448: LD_INT 11
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 35
50457: PUSH
50458: LD_INT 30
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 91
50472: PUSH
50473: LD_VAR 0 1
50477: PUSH
50478: LD_INT 18
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: LIST
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: LIST
50490: PPUSH
50491: CALL_OW 69
50495: NOT
50496: PUSH
50497: LD_INT 22
50499: PUSH
50500: LD_VAR 0 16
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 2
50511: PUSH
50512: LD_INT 30
50514: PUSH
50515: LD_INT 32
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 30
50524: PUSH
50525: LD_INT 33
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 91
50539: PUSH
50540: LD_VAR 0 1
50544: PUSH
50545: LD_INT 12
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: LIST
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: LIST
50557: PUSH
50558: EMPTY
50559: LIST
50560: PPUSH
50561: CALL_OW 69
50565: PUSH
50566: LD_INT 2
50568: GREATER
50569: AND
50570: IFFALSE 50593
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50572: LD_ADDR_VAR 0 18
50576: PUSH
50577: LD_INT 11
50579: PUSH
50580: LD_INT 30
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_VAR 0 12
50591: ARRAY
50592: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50593: LD_VAR 0 18
50597: NOT
50598: PUSH
50599: LD_INT 40
50601: PPUSH
50602: LD_VAR 0 16
50606: PPUSH
50607: CALL_OW 321
50611: PUSH
50612: LD_INT 2
50614: EQUAL
50615: AND
50616: PUSH
50617: LD_INT 7
50619: PUSH
50620: LD_VAR 0 5
50624: IN
50625: PUSH
50626: LD_INT 28
50628: PUSH
50629: LD_VAR 0 5
50633: IN
50634: OR
50635: PUSH
50636: LD_INT 45
50638: PUSH
50639: LD_VAR 0 5
50643: IN
50644: OR
50645: AND
50646: IFFALSE 50900
// begin hex := GetHexInfo ( x , y ) ;
50648: LD_ADDR_VAR 0 4
50652: PUSH
50653: LD_VAR 0 10
50657: PPUSH
50658: LD_VAR 0 11
50662: PPUSH
50663: CALL_OW 546
50667: ST_TO_ADDR
// if hex [ 1 ] then
50668: LD_VAR 0 4
50672: PUSH
50673: LD_INT 1
50675: ARRAY
50676: IFFALSE 50680
// exit ;
50678: GO 51083
// height := hex [ 2 ] ;
50680: LD_ADDR_VAR 0 15
50684: PUSH
50685: LD_VAR 0 4
50689: PUSH
50690: LD_INT 2
50692: ARRAY
50693: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50694: LD_ADDR_VAR 0 14
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: LD_INT 3
50707: PUSH
50708: LD_INT 5
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: ST_TO_ADDR
// for i in tmp do
50717: LD_ADDR_VAR 0 8
50721: PUSH
50722: LD_VAR 0 14
50726: PUSH
50727: FOR_IN
50728: IFFALSE 50898
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50730: LD_ADDR_VAR 0 9
50734: PUSH
50735: LD_VAR 0 10
50739: PPUSH
50740: LD_VAR 0 8
50744: PPUSH
50745: LD_INT 5
50747: PPUSH
50748: CALL_OW 272
50752: PUSH
50753: LD_VAR 0 11
50757: PPUSH
50758: LD_VAR 0 8
50762: PPUSH
50763: LD_INT 5
50765: PPUSH
50766: CALL_OW 273
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50775: LD_VAR 0 9
50779: PUSH
50780: LD_INT 1
50782: ARRAY
50783: PPUSH
50784: LD_VAR 0 9
50788: PUSH
50789: LD_INT 2
50791: ARRAY
50792: PPUSH
50793: CALL_OW 488
50797: IFFALSE 50896
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50799: LD_ADDR_VAR 0 4
50803: PUSH
50804: LD_VAR 0 9
50808: PUSH
50809: LD_INT 1
50811: ARRAY
50812: PPUSH
50813: LD_VAR 0 9
50817: PUSH
50818: LD_INT 2
50820: ARRAY
50821: PPUSH
50822: CALL_OW 546
50826: ST_TO_ADDR
// if hex [ 1 ] then
50827: LD_VAR 0 4
50831: PUSH
50832: LD_INT 1
50834: ARRAY
50835: IFFALSE 50839
// continue ;
50837: GO 50727
// h := hex [ 2 ] ;
50839: LD_ADDR_VAR 0 13
50843: PUSH
50844: LD_VAR 0 4
50848: PUSH
50849: LD_INT 2
50851: ARRAY
50852: ST_TO_ADDR
// if h + 7 < height then
50853: LD_VAR 0 13
50857: PUSH
50858: LD_INT 7
50860: PLUS
50861: PUSH
50862: LD_VAR 0 15
50866: LESS
50867: IFFALSE 50896
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50869: LD_ADDR_VAR 0 18
50873: PUSH
50874: LD_INT 7
50876: PUSH
50877: LD_INT 28
50879: PUSH
50880: LD_INT 45
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: LIST
50887: PUSH
50888: LD_VAR 0 12
50892: ARRAY
50893: ST_TO_ADDR
// break ;
50894: GO 50898
// end ; end ; end ;
50896: GO 50727
50898: POP
50899: POP
// end ; if not weapon then
50900: LD_VAR 0 18
50904: NOT
50905: IFFALSE 50965
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50907: LD_ADDR_VAR 0 5
50911: PUSH
50912: LD_VAR 0 5
50916: PUSH
50917: LD_INT 11
50919: PUSH
50920: LD_INT 30
50922: PUSH
50923: LD_INT 49
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: LIST
50930: DIFF
50931: ST_TO_ADDR
// if not list then
50932: LD_VAR 0 5
50936: NOT
50937: IFFALSE 50941
// exit ;
50939: GO 51083
// weapon := list [ rand ( 1 , list ) ] ;
50941: LD_ADDR_VAR 0 18
50945: PUSH
50946: LD_VAR 0 5
50950: PUSH
50951: LD_INT 1
50953: PPUSH
50954: LD_VAR 0 5
50958: PPUSH
50959: CALL_OW 12
50963: ARRAY
50964: ST_TO_ADDR
// end ; if weapon then
50965: LD_VAR 0 18
50969: IFFALSE 51083
// begin tmp := CostOfWeapon ( weapon ) ;
50971: LD_ADDR_VAR 0 14
50975: PUSH
50976: LD_VAR 0 18
50980: PPUSH
50981: CALL_OW 451
50985: ST_TO_ADDR
// j := GetBase ( tower ) ;
50986: LD_ADDR_VAR 0 9
50990: PUSH
50991: LD_VAR 0 1
50995: PPUSH
50996: CALL_OW 274
51000: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51001: LD_VAR 0 9
51005: PPUSH
51006: LD_INT 1
51008: PPUSH
51009: CALL_OW 275
51013: PUSH
51014: LD_VAR 0 14
51018: PUSH
51019: LD_INT 1
51021: ARRAY
51022: GREATEREQUAL
51023: PUSH
51024: LD_VAR 0 9
51028: PPUSH
51029: LD_INT 2
51031: PPUSH
51032: CALL_OW 275
51036: PUSH
51037: LD_VAR 0 14
51041: PUSH
51042: LD_INT 2
51044: ARRAY
51045: GREATEREQUAL
51046: AND
51047: PUSH
51048: LD_VAR 0 9
51052: PPUSH
51053: LD_INT 3
51055: PPUSH
51056: CALL_OW 275
51060: PUSH
51061: LD_VAR 0 14
51065: PUSH
51066: LD_INT 3
51068: ARRAY
51069: GREATEREQUAL
51070: AND
51071: IFFALSE 51083
// result := weapon ;
51073: LD_ADDR_VAR 0 3
51077: PUSH
51078: LD_VAR 0 18
51082: ST_TO_ADDR
// end ; end ;
51083: LD_VAR 0 3
51087: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51088: LD_INT 0
51090: PPUSH
51091: PPUSH
// result := true ;
51092: LD_ADDR_VAR 0 3
51096: PUSH
51097: LD_INT 1
51099: ST_TO_ADDR
// if array1 = array2 then
51100: LD_VAR 0 1
51104: PUSH
51105: LD_VAR 0 2
51109: EQUAL
51110: IFFALSE 51170
// begin for i = 1 to array1 do
51112: LD_ADDR_VAR 0 4
51116: PUSH
51117: DOUBLE
51118: LD_INT 1
51120: DEC
51121: ST_TO_ADDR
51122: LD_VAR 0 1
51126: PUSH
51127: FOR_TO
51128: IFFALSE 51166
// if array1 [ i ] <> array2 [ i ] then
51130: LD_VAR 0 1
51134: PUSH
51135: LD_VAR 0 4
51139: ARRAY
51140: PUSH
51141: LD_VAR 0 2
51145: PUSH
51146: LD_VAR 0 4
51150: ARRAY
51151: NONEQUAL
51152: IFFALSE 51164
// begin result := false ;
51154: LD_ADDR_VAR 0 3
51158: PUSH
51159: LD_INT 0
51161: ST_TO_ADDR
// break ;
51162: GO 51166
// end ;
51164: GO 51127
51166: POP
51167: POP
// end else
51168: GO 51178
// result := false ;
51170: LD_ADDR_VAR 0 3
51174: PUSH
51175: LD_INT 0
51177: ST_TO_ADDR
// end ;
51178: LD_VAR 0 3
51182: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51183: LD_INT 0
51185: PPUSH
51186: PPUSH
// if not array1 or not array2 then
51187: LD_VAR 0 1
51191: NOT
51192: PUSH
51193: LD_VAR 0 2
51197: NOT
51198: OR
51199: IFFALSE 51203
// exit ;
51201: GO 51267
// result := true ;
51203: LD_ADDR_VAR 0 3
51207: PUSH
51208: LD_INT 1
51210: ST_TO_ADDR
// for i = 1 to array1 do
51211: LD_ADDR_VAR 0 4
51215: PUSH
51216: DOUBLE
51217: LD_INT 1
51219: DEC
51220: ST_TO_ADDR
51221: LD_VAR 0 1
51225: PUSH
51226: FOR_TO
51227: IFFALSE 51265
// if array1 [ i ] <> array2 [ i ] then
51229: LD_VAR 0 1
51233: PUSH
51234: LD_VAR 0 4
51238: ARRAY
51239: PUSH
51240: LD_VAR 0 2
51244: PUSH
51245: LD_VAR 0 4
51249: ARRAY
51250: NONEQUAL
51251: IFFALSE 51263
// begin result := false ;
51253: LD_ADDR_VAR 0 3
51257: PUSH
51258: LD_INT 0
51260: ST_TO_ADDR
// break ;
51261: GO 51265
// end ;
51263: GO 51226
51265: POP
51266: POP
// end ;
51267: LD_VAR 0 3
51271: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51272: LD_INT 0
51274: PPUSH
51275: PPUSH
51276: PPUSH
// pom := GetBase ( fac ) ;
51277: LD_ADDR_VAR 0 5
51281: PUSH
51282: LD_VAR 0 1
51286: PPUSH
51287: CALL_OW 274
51291: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51292: LD_ADDR_VAR 0 4
51296: PUSH
51297: LD_VAR 0 2
51301: PUSH
51302: LD_INT 1
51304: ARRAY
51305: PPUSH
51306: LD_VAR 0 2
51310: PUSH
51311: LD_INT 2
51313: ARRAY
51314: PPUSH
51315: LD_VAR 0 2
51319: PUSH
51320: LD_INT 3
51322: ARRAY
51323: PPUSH
51324: LD_VAR 0 2
51328: PUSH
51329: LD_INT 4
51331: ARRAY
51332: PPUSH
51333: CALL_OW 449
51337: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51338: LD_ADDR_VAR 0 3
51342: PUSH
51343: LD_VAR 0 5
51347: PPUSH
51348: LD_INT 1
51350: PPUSH
51351: CALL_OW 275
51355: PUSH
51356: LD_VAR 0 4
51360: PUSH
51361: LD_INT 1
51363: ARRAY
51364: GREATEREQUAL
51365: PUSH
51366: LD_VAR 0 5
51370: PPUSH
51371: LD_INT 2
51373: PPUSH
51374: CALL_OW 275
51378: PUSH
51379: LD_VAR 0 4
51383: PUSH
51384: LD_INT 2
51386: ARRAY
51387: GREATEREQUAL
51388: AND
51389: PUSH
51390: LD_VAR 0 5
51394: PPUSH
51395: LD_INT 3
51397: PPUSH
51398: CALL_OW 275
51402: PUSH
51403: LD_VAR 0 4
51407: PUSH
51408: LD_INT 3
51410: ARRAY
51411: GREATEREQUAL
51412: AND
51413: ST_TO_ADDR
// end ;
51414: LD_VAR 0 3
51418: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51419: LD_INT 0
51421: PPUSH
51422: PPUSH
51423: PPUSH
51424: PPUSH
// pom := GetBase ( building ) ;
51425: LD_ADDR_VAR 0 3
51429: PUSH
51430: LD_VAR 0 1
51434: PPUSH
51435: CALL_OW 274
51439: ST_TO_ADDR
// if not pom then
51440: LD_VAR 0 3
51444: NOT
51445: IFFALSE 51449
// exit ;
51447: GO 51619
// btype := GetBType ( building ) ;
51449: LD_ADDR_VAR 0 5
51453: PUSH
51454: LD_VAR 0 1
51458: PPUSH
51459: CALL_OW 266
51463: ST_TO_ADDR
// if btype = b_armoury then
51464: LD_VAR 0 5
51468: PUSH
51469: LD_INT 4
51471: EQUAL
51472: IFFALSE 51482
// btype := b_barracks ;
51474: LD_ADDR_VAR 0 5
51478: PUSH
51479: LD_INT 5
51481: ST_TO_ADDR
// if btype = b_depot then
51482: LD_VAR 0 5
51486: PUSH
51487: LD_INT 0
51489: EQUAL
51490: IFFALSE 51500
// btype := b_warehouse ;
51492: LD_ADDR_VAR 0 5
51496: PUSH
51497: LD_INT 1
51499: ST_TO_ADDR
// if btype = b_workshop then
51500: LD_VAR 0 5
51504: PUSH
51505: LD_INT 2
51507: EQUAL
51508: IFFALSE 51518
// btype := b_factory ;
51510: LD_ADDR_VAR 0 5
51514: PUSH
51515: LD_INT 3
51517: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51518: LD_ADDR_VAR 0 4
51522: PUSH
51523: LD_VAR 0 5
51527: PPUSH
51528: LD_VAR 0 1
51532: PPUSH
51533: CALL_OW 248
51537: PPUSH
51538: CALL_OW 450
51542: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51543: LD_ADDR_VAR 0 2
51547: PUSH
51548: LD_VAR 0 3
51552: PPUSH
51553: LD_INT 1
51555: PPUSH
51556: CALL_OW 275
51560: PUSH
51561: LD_VAR 0 4
51565: PUSH
51566: LD_INT 1
51568: ARRAY
51569: GREATEREQUAL
51570: PUSH
51571: LD_VAR 0 3
51575: PPUSH
51576: LD_INT 2
51578: PPUSH
51579: CALL_OW 275
51583: PUSH
51584: LD_VAR 0 4
51588: PUSH
51589: LD_INT 2
51591: ARRAY
51592: GREATEREQUAL
51593: AND
51594: PUSH
51595: LD_VAR 0 3
51599: PPUSH
51600: LD_INT 3
51602: PPUSH
51603: CALL_OW 275
51607: PUSH
51608: LD_VAR 0 4
51612: PUSH
51613: LD_INT 3
51615: ARRAY
51616: GREATEREQUAL
51617: AND
51618: ST_TO_ADDR
// end ;
51619: LD_VAR 0 2
51623: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51624: LD_INT 0
51626: PPUSH
51627: PPUSH
51628: PPUSH
// pom := GetBase ( building ) ;
51629: LD_ADDR_VAR 0 4
51633: PUSH
51634: LD_VAR 0 1
51638: PPUSH
51639: CALL_OW 274
51643: ST_TO_ADDR
// if not pom then
51644: LD_VAR 0 4
51648: NOT
51649: IFFALSE 51653
// exit ;
51651: GO 51754
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51653: LD_ADDR_VAR 0 5
51657: PUSH
51658: LD_VAR 0 2
51662: PPUSH
51663: LD_VAR 0 1
51667: PPUSH
51668: CALL_OW 248
51672: PPUSH
51673: CALL_OW 450
51677: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51678: LD_ADDR_VAR 0 3
51682: PUSH
51683: LD_VAR 0 4
51687: PPUSH
51688: LD_INT 1
51690: PPUSH
51691: CALL_OW 275
51695: PUSH
51696: LD_VAR 0 5
51700: PUSH
51701: LD_INT 1
51703: ARRAY
51704: GREATEREQUAL
51705: PUSH
51706: LD_VAR 0 4
51710: PPUSH
51711: LD_INT 2
51713: PPUSH
51714: CALL_OW 275
51718: PUSH
51719: LD_VAR 0 5
51723: PUSH
51724: LD_INT 2
51726: ARRAY
51727: GREATEREQUAL
51728: AND
51729: PUSH
51730: LD_VAR 0 4
51734: PPUSH
51735: LD_INT 3
51737: PPUSH
51738: CALL_OW 275
51742: PUSH
51743: LD_VAR 0 5
51747: PUSH
51748: LD_INT 3
51750: ARRAY
51751: GREATEREQUAL
51752: AND
51753: ST_TO_ADDR
// end ;
51754: LD_VAR 0 3
51758: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51759: LD_INT 0
51761: PPUSH
51762: PPUSH
51763: PPUSH
51764: PPUSH
51765: PPUSH
51766: PPUSH
51767: PPUSH
51768: PPUSH
51769: PPUSH
51770: PPUSH
51771: PPUSH
// result := false ;
51772: LD_ADDR_VAR 0 8
51776: PUSH
51777: LD_INT 0
51779: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51780: LD_VAR 0 5
51784: NOT
51785: PUSH
51786: LD_VAR 0 1
51790: NOT
51791: OR
51792: PUSH
51793: LD_VAR 0 2
51797: NOT
51798: OR
51799: PUSH
51800: LD_VAR 0 3
51804: NOT
51805: OR
51806: IFFALSE 51810
// exit ;
51808: GO 52624
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51810: LD_ADDR_VAR 0 14
51814: PUSH
51815: LD_VAR 0 1
51819: PPUSH
51820: LD_VAR 0 2
51824: PPUSH
51825: LD_VAR 0 3
51829: PPUSH
51830: LD_VAR 0 4
51834: PPUSH
51835: LD_VAR 0 5
51839: PUSH
51840: LD_INT 1
51842: ARRAY
51843: PPUSH
51844: CALL_OW 248
51848: PPUSH
51849: LD_INT 0
51851: PPUSH
51852: CALL 53857 0 6
51856: ST_TO_ADDR
// if not hexes then
51857: LD_VAR 0 14
51861: NOT
51862: IFFALSE 51866
// exit ;
51864: GO 52624
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51866: LD_ADDR_VAR 0 17
51870: PUSH
51871: LD_VAR 0 5
51875: PPUSH
51876: LD_INT 22
51878: PUSH
51879: LD_VAR 0 13
51883: PPUSH
51884: CALL_OW 255
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: LD_INT 30
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 30
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: LIST
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PPUSH
51925: CALL_OW 72
51929: ST_TO_ADDR
// for i = 1 to hexes do
51930: LD_ADDR_VAR 0 9
51934: PUSH
51935: DOUBLE
51936: LD_INT 1
51938: DEC
51939: ST_TO_ADDR
51940: LD_VAR 0 14
51944: PUSH
51945: FOR_TO
51946: IFFALSE 52622
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51948: LD_ADDR_VAR 0 13
51952: PUSH
51953: LD_VAR 0 14
51957: PUSH
51958: LD_VAR 0 9
51962: ARRAY
51963: PUSH
51964: LD_INT 1
51966: ARRAY
51967: PPUSH
51968: LD_VAR 0 14
51972: PUSH
51973: LD_VAR 0 9
51977: ARRAY
51978: PUSH
51979: LD_INT 2
51981: ARRAY
51982: PPUSH
51983: CALL_OW 428
51987: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51988: LD_VAR 0 14
51992: PUSH
51993: LD_VAR 0 9
51997: ARRAY
51998: PUSH
51999: LD_INT 1
52001: ARRAY
52002: PPUSH
52003: LD_VAR 0 14
52007: PUSH
52008: LD_VAR 0 9
52012: ARRAY
52013: PUSH
52014: LD_INT 2
52016: ARRAY
52017: PPUSH
52018: CALL_OW 351
52022: PUSH
52023: LD_VAR 0 14
52027: PUSH
52028: LD_VAR 0 9
52032: ARRAY
52033: PUSH
52034: LD_INT 1
52036: ARRAY
52037: PPUSH
52038: LD_VAR 0 14
52042: PUSH
52043: LD_VAR 0 9
52047: ARRAY
52048: PUSH
52049: LD_INT 2
52051: ARRAY
52052: PPUSH
52053: CALL_OW 488
52057: NOT
52058: OR
52059: PUSH
52060: LD_VAR 0 13
52064: PPUSH
52065: CALL_OW 247
52069: PUSH
52070: LD_INT 3
52072: EQUAL
52073: OR
52074: IFFALSE 52080
// exit ;
52076: POP
52077: POP
52078: GO 52624
// if not tmp then
52080: LD_VAR 0 13
52084: NOT
52085: IFFALSE 52089
// continue ;
52087: GO 51945
// result := true ;
52089: LD_ADDR_VAR 0 8
52093: PUSH
52094: LD_INT 1
52096: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52097: LD_VAR 0 6
52101: PUSH
52102: LD_VAR 0 13
52106: PPUSH
52107: CALL_OW 247
52111: PUSH
52112: LD_INT 2
52114: EQUAL
52115: AND
52116: PUSH
52117: LD_VAR 0 13
52121: PPUSH
52122: CALL_OW 263
52126: PUSH
52127: LD_INT 1
52129: EQUAL
52130: AND
52131: IFFALSE 52295
// begin if IsDrivenBy ( tmp ) then
52133: LD_VAR 0 13
52137: PPUSH
52138: CALL_OW 311
52142: IFFALSE 52146
// continue ;
52144: GO 51945
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52146: LD_VAR 0 6
52150: PPUSH
52151: LD_INT 3
52153: PUSH
52154: LD_INT 60
52156: PUSH
52157: EMPTY
52158: LIST
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 3
52166: PUSH
52167: LD_INT 55
52169: PUSH
52170: EMPTY
52171: LIST
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PPUSH
52181: CALL_OW 72
52185: IFFALSE 52293
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52187: LD_ADDR_VAR 0 18
52191: PUSH
52192: LD_VAR 0 6
52196: PPUSH
52197: LD_INT 3
52199: PUSH
52200: LD_INT 60
52202: PUSH
52203: EMPTY
52204: LIST
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 3
52212: PUSH
52213: LD_INT 55
52215: PUSH
52216: EMPTY
52217: LIST
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PPUSH
52227: CALL_OW 72
52231: PUSH
52232: LD_INT 1
52234: ARRAY
52235: ST_TO_ADDR
// if IsInUnit ( driver ) then
52236: LD_VAR 0 18
52240: PPUSH
52241: CALL_OW 310
52245: IFFALSE 52256
// ComExit ( driver ) ;
52247: LD_VAR 0 18
52251: PPUSH
52252: CALL 77637 0 1
// AddComEnterUnit ( driver , tmp ) ;
52256: LD_VAR 0 18
52260: PPUSH
52261: LD_VAR 0 13
52265: PPUSH
52266: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52270: LD_VAR 0 18
52274: PPUSH
52275: LD_VAR 0 7
52279: PPUSH
52280: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52284: LD_VAR 0 18
52288: PPUSH
52289: CALL_OW 181
// end ; continue ;
52293: GO 51945
// end ; if not cleaners or not tmp in cleaners then
52295: LD_VAR 0 6
52299: NOT
52300: PUSH
52301: LD_VAR 0 13
52305: PUSH
52306: LD_VAR 0 6
52310: IN
52311: NOT
52312: OR
52313: IFFALSE 52620
// begin if dep then
52315: LD_VAR 0 17
52319: IFFALSE 52455
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52321: LD_ADDR_VAR 0 16
52325: PUSH
52326: LD_VAR 0 17
52330: PUSH
52331: LD_INT 1
52333: ARRAY
52334: PPUSH
52335: CALL_OW 250
52339: PPUSH
52340: LD_VAR 0 17
52344: PUSH
52345: LD_INT 1
52347: ARRAY
52348: PPUSH
52349: CALL_OW 254
52353: PPUSH
52354: LD_INT 5
52356: PPUSH
52357: CALL_OW 272
52361: PUSH
52362: LD_VAR 0 17
52366: PUSH
52367: LD_INT 1
52369: ARRAY
52370: PPUSH
52371: CALL_OW 251
52375: PPUSH
52376: LD_VAR 0 17
52380: PUSH
52381: LD_INT 1
52383: ARRAY
52384: PPUSH
52385: CALL_OW 254
52389: PPUSH
52390: LD_INT 5
52392: PPUSH
52393: CALL_OW 273
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52402: LD_VAR 0 16
52406: PUSH
52407: LD_INT 1
52409: ARRAY
52410: PPUSH
52411: LD_VAR 0 16
52415: PUSH
52416: LD_INT 2
52418: ARRAY
52419: PPUSH
52420: CALL_OW 488
52424: IFFALSE 52455
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52426: LD_VAR 0 13
52430: PPUSH
52431: LD_VAR 0 16
52435: PUSH
52436: LD_INT 1
52438: ARRAY
52439: PPUSH
52440: LD_VAR 0 16
52444: PUSH
52445: LD_INT 2
52447: ARRAY
52448: PPUSH
52449: CALL_OW 111
// continue ;
52453: GO 51945
// end ; end ; r := GetDir ( tmp ) ;
52455: LD_ADDR_VAR 0 15
52459: PUSH
52460: LD_VAR 0 13
52464: PPUSH
52465: CALL_OW 254
52469: ST_TO_ADDR
// if r = 5 then
52470: LD_VAR 0 15
52474: PUSH
52475: LD_INT 5
52477: EQUAL
52478: IFFALSE 52488
// r := 0 ;
52480: LD_ADDR_VAR 0 15
52484: PUSH
52485: LD_INT 0
52487: ST_TO_ADDR
// for j = r to 5 do
52488: LD_ADDR_VAR 0 10
52492: PUSH
52493: DOUBLE
52494: LD_VAR 0 15
52498: DEC
52499: ST_TO_ADDR
52500: LD_INT 5
52502: PUSH
52503: FOR_TO
52504: IFFALSE 52618
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52506: LD_ADDR_VAR 0 11
52510: PUSH
52511: LD_VAR 0 13
52515: PPUSH
52516: CALL_OW 250
52520: PPUSH
52521: LD_VAR 0 10
52525: PPUSH
52526: LD_INT 2
52528: PPUSH
52529: CALL_OW 272
52533: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52534: LD_ADDR_VAR 0 12
52538: PUSH
52539: LD_VAR 0 13
52543: PPUSH
52544: CALL_OW 251
52548: PPUSH
52549: LD_VAR 0 10
52553: PPUSH
52554: LD_INT 2
52556: PPUSH
52557: CALL_OW 273
52561: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52562: LD_VAR 0 11
52566: PPUSH
52567: LD_VAR 0 12
52571: PPUSH
52572: CALL_OW 488
52576: PUSH
52577: LD_VAR 0 11
52581: PPUSH
52582: LD_VAR 0 12
52586: PPUSH
52587: CALL_OW 428
52591: NOT
52592: AND
52593: IFFALSE 52616
// begin ComMoveXY ( tmp , _x , _y ) ;
52595: LD_VAR 0 13
52599: PPUSH
52600: LD_VAR 0 11
52604: PPUSH
52605: LD_VAR 0 12
52609: PPUSH
52610: CALL_OW 111
// break ;
52614: GO 52618
// end ; end ;
52616: GO 52503
52618: POP
52619: POP
// end ; end ;
52620: GO 51945
52622: POP
52623: POP
// end ;
52624: LD_VAR 0 8
52628: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52629: LD_INT 0
52631: PPUSH
// result := true ;
52632: LD_ADDR_VAR 0 3
52636: PUSH
52637: LD_INT 1
52639: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52640: LD_VAR 0 2
52644: PUSH
52645: LD_INT 24
52647: DOUBLE
52648: EQUAL
52649: IFTRUE 52659
52651: LD_INT 33
52653: DOUBLE
52654: EQUAL
52655: IFTRUE 52659
52657: GO 52684
52659: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52660: LD_ADDR_VAR 0 3
52664: PUSH
52665: LD_INT 32
52667: PPUSH
52668: LD_VAR 0 1
52672: PPUSH
52673: CALL_OW 321
52677: PUSH
52678: LD_INT 2
52680: EQUAL
52681: ST_TO_ADDR
52682: GO 53000
52684: LD_INT 20
52686: DOUBLE
52687: EQUAL
52688: IFTRUE 52692
52690: GO 52717
52692: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52693: LD_ADDR_VAR 0 3
52697: PUSH
52698: LD_INT 6
52700: PPUSH
52701: LD_VAR 0 1
52705: PPUSH
52706: CALL_OW 321
52710: PUSH
52711: LD_INT 2
52713: EQUAL
52714: ST_TO_ADDR
52715: GO 53000
52717: LD_INT 22
52719: DOUBLE
52720: EQUAL
52721: IFTRUE 52731
52723: LD_INT 36
52725: DOUBLE
52726: EQUAL
52727: IFTRUE 52731
52729: GO 52756
52731: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52732: LD_ADDR_VAR 0 3
52736: PUSH
52737: LD_INT 15
52739: PPUSH
52740: LD_VAR 0 1
52744: PPUSH
52745: CALL_OW 321
52749: PUSH
52750: LD_INT 2
52752: EQUAL
52753: ST_TO_ADDR
52754: GO 53000
52756: LD_INT 30
52758: DOUBLE
52759: EQUAL
52760: IFTRUE 52764
52762: GO 52789
52764: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52765: LD_ADDR_VAR 0 3
52769: PUSH
52770: LD_INT 20
52772: PPUSH
52773: LD_VAR 0 1
52777: PPUSH
52778: CALL_OW 321
52782: PUSH
52783: LD_INT 2
52785: EQUAL
52786: ST_TO_ADDR
52787: GO 53000
52789: LD_INT 28
52791: DOUBLE
52792: EQUAL
52793: IFTRUE 52803
52795: LD_INT 21
52797: DOUBLE
52798: EQUAL
52799: IFTRUE 52803
52801: GO 52828
52803: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52804: LD_ADDR_VAR 0 3
52808: PUSH
52809: LD_INT 21
52811: PPUSH
52812: LD_VAR 0 1
52816: PPUSH
52817: CALL_OW 321
52821: PUSH
52822: LD_INT 2
52824: EQUAL
52825: ST_TO_ADDR
52826: GO 53000
52828: LD_INT 16
52830: DOUBLE
52831: EQUAL
52832: IFTRUE 52836
52834: GO 52861
52836: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52837: LD_ADDR_VAR 0 3
52841: PUSH
52842: LD_INT 84
52844: PPUSH
52845: LD_VAR 0 1
52849: PPUSH
52850: CALL_OW 321
52854: PUSH
52855: LD_INT 2
52857: EQUAL
52858: ST_TO_ADDR
52859: GO 53000
52861: LD_INT 19
52863: DOUBLE
52864: EQUAL
52865: IFTRUE 52875
52867: LD_INT 23
52869: DOUBLE
52870: EQUAL
52871: IFTRUE 52875
52873: GO 52900
52875: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52876: LD_ADDR_VAR 0 3
52880: PUSH
52881: LD_INT 83
52883: PPUSH
52884: LD_VAR 0 1
52888: PPUSH
52889: CALL_OW 321
52893: PUSH
52894: LD_INT 2
52896: EQUAL
52897: ST_TO_ADDR
52898: GO 53000
52900: LD_INT 17
52902: DOUBLE
52903: EQUAL
52904: IFTRUE 52908
52906: GO 52933
52908: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52909: LD_ADDR_VAR 0 3
52913: PUSH
52914: LD_INT 39
52916: PPUSH
52917: LD_VAR 0 1
52921: PPUSH
52922: CALL_OW 321
52926: PUSH
52927: LD_INT 2
52929: EQUAL
52930: ST_TO_ADDR
52931: GO 53000
52933: LD_INT 18
52935: DOUBLE
52936: EQUAL
52937: IFTRUE 52941
52939: GO 52966
52941: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52942: LD_ADDR_VAR 0 3
52946: PUSH
52947: LD_INT 40
52949: PPUSH
52950: LD_VAR 0 1
52954: PPUSH
52955: CALL_OW 321
52959: PUSH
52960: LD_INT 2
52962: EQUAL
52963: ST_TO_ADDR
52964: GO 53000
52966: LD_INT 27
52968: DOUBLE
52969: EQUAL
52970: IFTRUE 52974
52972: GO 52999
52974: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52975: LD_ADDR_VAR 0 3
52979: PUSH
52980: LD_INT 35
52982: PPUSH
52983: LD_VAR 0 1
52987: PPUSH
52988: CALL_OW 321
52992: PUSH
52993: LD_INT 2
52995: EQUAL
52996: ST_TO_ADDR
52997: GO 53000
52999: POP
// end ;
53000: LD_VAR 0 3
53004: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53005: LD_INT 0
53007: PPUSH
53008: PPUSH
53009: PPUSH
53010: PPUSH
53011: PPUSH
53012: PPUSH
53013: PPUSH
53014: PPUSH
53015: PPUSH
53016: PPUSH
53017: PPUSH
// result := false ;
53018: LD_ADDR_VAR 0 6
53022: PUSH
53023: LD_INT 0
53025: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53026: LD_VAR 0 1
53030: NOT
53031: PUSH
53032: LD_VAR 0 1
53036: PPUSH
53037: CALL_OW 266
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: IN
53052: NOT
53053: OR
53054: PUSH
53055: LD_VAR 0 2
53059: NOT
53060: OR
53061: PUSH
53062: LD_VAR 0 5
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: LD_INT 2
53075: PUSH
53076: LD_INT 3
53078: PUSH
53079: LD_INT 4
53081: PUSH
53082: LD_INT 5
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: IN
53093: NOT
53094: OR
53095: PUSH
53096: LD_VAR 0 3
53100: PPUSH
53101: LD_VAR 0 4
53105: PPUSH
53106: CALL_OW 488
53110: NOT
53111: OR
53112: IFFALSE 53116
// exit ;
53114: GO 53852
// side := GetSide ( depot ) ;
53116: LD_ADDR_VAR 0 9
53120: PUSH
53121: LD_VAR 0 1
53125: PPUSH
53126: CALL_OW 255
53130: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53131: LD_VAR 0 9
53135: PPUSH
53136: LD_VAR 0 2
53140: PPUSH
53141: CALL 52629 0 2
53145: NOT
53146: IFFALSE 53150
// exit ;
53148: GO 53852
// pom := GetBase ( depot ) ;
53150: LD_ADDR_VAR 0 10
53154: PUSH
53155: LD_VAR 0 1
53159: PPUSH
53160: CALL_OW 274
53164: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53165: LD_ADDR_VAR 0 11
53169: PUSH
53170: LD_VAR 0 2
53174: PPUSH
53175: LD_VAR 0 1
53179: PPUSH
53180: CALL_OW 248
53184: PPUSH
53185: CALL_OW 450
53189: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53190: LD_VAR 0 10
53194: PPUSH
53195: LD_INT 1
53197: PPUSH
53198: CALL_OW 275
53202: PUSH
53203: LD_VAR 0 11
53207: PUSH
53208: LD_INT 1
53210: ARRAY
53211: GREATEREQUAL
53212: PUSH
53213: LD_VAR 0 10
53217: PPUSH
53218: LD_INT 2
53220: PPUSH
53221: CALL_OW 275
53225: PUSH
53226: LD_VAR 0 11
53230: PUSH
53231: LD_INT 2
53233: ARRAY
53234: GREATEREQUAL
53235: AND
53236: PUSH
53237: LD_VAR 0 10
53241: PPUSH
53242: LD_INT 3
53244: PPUSH
53245: CALL_OW 275
53249: PUSH
53250: LD_VAR 0 11
53254: PUSH
53255: LD_INT 3
53257: ARRAY
53258: GREATEREQUAL
53259: AND
53260: NOT
53261: IFFALSE 53265
// exit ;
53263: GO 53852
// if GetBType ( depot ) = b_depot then
53265: LD_VAR 0 1
53269: PPUSH
53270: CALL_OW 266
53274: PUSH
53275: LD_INT 0
53277: EQUAL
53278: IFFALSE 53290
// dist := 28 else
53280: LD_ADDR_VAR 0 14
53284: PUSH
53285: LD_INT 28
53287: ST_TO_ADDR
53288: GO 53298
// dist := 36 ;
53290: LD_ADDR_VAR 0 14
53294: PUSH
53295: LD_INT 36
53297: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53298: LD_VAR 0 1
53302: PPUSH
53303: LD_VAR 0 3
53307: PPUSH
53308: LD_VAR 0 4
53312: PPUSH
53313: CALL_OW 297
53317: PUSH
53318: LD_VAR 0 14
53322: GREATER
53323: IFFALSE 53327
// exit ;
53325: GO 53852
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53327: LD_ADDR_VAR 0 12
53331: PUSH
53332: LD_VAR 0 2
53336: PPUSH
53337: LD_VAR 0 3
53341: PPUSH
53342: LD_VAR 0 4
53346: PPUSH
53347: LD_VAR 0 5
53351: PPUSH
53352: LD_VAR 0 1
53356: PPUSH
53357: CALL_OW 248
53361: PPUSH
53362: LD_INT 0
53364: PPUSH
53365: CALL 53857 0 6
53369: ST_TO_ADDR
// if not hexes then
53370: LD_VAR 0 12
53374: NOT
53375: IFFALSE 53379
// exit ;
53377: GO 53852
// hex := GetHexInfo ( x , y ) ;
53379: LD_ADDR_VAR 0 15
53383: PUSH
53384: LD_VAR 0 3
53388: PPUSH
53389: LD_VAR 0 4
53393: PPUSH
53394: CALL_OW 546
53398: ST_TO_ADDR
// if hex [ 1 ] then
53399: LD_VAR 0 15
53403: PUSH
53404: LD_INT 1
53406: ARRAY
53407: IFFALSE 53411
// exit ;
53409: GO 53852
// height := hex [ 2 ] ;
53411: LD_ADDR_VAR 0 13
53415: PUSH
53416: LD_VAR 0 15
53420: PUSH
53421: LD_INT 2
53423: ARRAY
53424: ST_TO_ADDR
// for i = 1 to hexes do
53425: LD_ADDR_VAR 0 7
53429: PUSH
53430: DOUBLE
53431: LD_INT 1
53433: DEC
53434: ST_TO_ADDR
53435: LD_VAR 0 12
53439: PUSH
53440: FOR_TO
53441: IFFALSE 53771
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53443: LD_VAR 0 12
53447: PUSH
53448: LD_VAR 0 7
53452: ARRAY
53453: PUSH
53454: LD_INT 1
53456: ARRAY
53457: PPUSH
53458: LD_VAR 0 12
53462: PUSH
53463: LD_VAR 0 7
53467: ARRAY
53468: PUSH
53469: LD_INT 2
53471: ARRAY
53472: PPUSH
53473: CALL_OW 488
53477: NOT
53478: PUSH
53479: LD_VAR 0 12
53483: PUSH
53484: LD_VAR 0 7
53488: ARRAY
53489: PUSH
53490: LD_INT 1
53492: ARRAY
53493: PPUSH
53494: LD_VAR 0 12
53498: PUSH
53499: LD_VAR 0 7
53503: ARRAY
53504: PUSH
53505: LD_INT 2
53507: ARRAY
53508: PPUSH
53509: CALL_OW 428
53513: PUSH
53514: LD_INT 0
53516: GREATER
53517: OR
53518: PUSH
53519: LD_VAR 0 12
53523: PUSH
53524: LD_VAR 0 7
53528: ARRAY
53529: PUSH
53530: LD_INT 1
53532: ARRAY
53533: PPUSH
53534: LD_VAR 0 12
53538: PUSH
53539: LD_VAR 0 7
53543: ARRAY
53544: PUSH
53545: LD_INT 2
53547: ARRAY
53548: PPUSH
53549: CALL_OW 351
53553: OR
53554: IFFALSE 53560
// exit ;
53556: POP
53557: POP
53558: GO 53852
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53560: LD_ADDR_VAR 0 8
53564: PUSH
53565: LD_VAR 0 12
53569: PUSH
53570: LD_VAR 0 7
53574: ARRAY
53575: PUSH
53576: LD_INT 1
53578: ARRAY
53579: PPUSH
53580: LD_VAR 0 12
53584: PUSH
53585: LD_VAR 0 7
53589: ARRAY
53590: PUSH
53591: LD_INT 2
53593: ARRAY
53594: PPUSH
53595: CALL_OW 546
53599: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53600: LD_VAR 0 8
53604: PUSH
53605: LD_INT 1
53607: ARRAY
53608: PUSH
53609: LD_VAR 0 8
53613: PUSH
53614: LD_INT 2
53616: ARRAY
53617: PUSH
53618: LD_VAR 0 13
53622: PUSH
53623: LD_INT 2
53625: PLUS
53626: GREATER
53627: OR
53628: PUSH
53629: LD_VAR 0 8
53633: PUSH
53634: LD_INT 2
53636: ARRAY
53637: PUSH
53638: LD_VAR 0 13
53642: PUSH
53643: LD_INT 2
53645: MINUS
53646: LESS
53647: OR
53648: PUSH
53649: LD_VAR 0 8
53653: PUSH
53654: LD_INT 3
53656: ARRAY
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 8
53663: PUSH
53664: LD_INT 9
53666: PUSH
53667: LD_INT 10
53669: PUSH
53670: LD_INT 11
53672: PUSH
53673: LD_INT 12
53675: PUSH
53676: LD_INT 13
53678: PUSH
53679: LD_INT 16
53681: PUSH
53682: LD_INT 17
53684: PUSH
53685: LD_INT 18
53687: PUSH
53688: LD_INT 19
53690: PUSH
53691: LD_INT 20
53693: PUSH
53694: LD_INT 21
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: IN
53712: NOT
53713: OR
53714: PUSH
53715: LD_VAR 0 8
53719: PUSH
53720: LD_INT 5
53722: ARRAY
53723: NOT
53724: OR
53725: PUSH
53726: LD_VAR 0 8
53730: PUSH
53731: LD_INT 6
53733: ARRAY
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: LD_INT 7
53743: PUSH
53744: LD_INT 9
53746: PUSH
53747: LD_INT 10
53749: PUSH
53750: LD_INT 11
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: IN
53761: NOT
53762: OR
53763: IFFALSE 53769
// exit ;
53765: POP
53766: POP
53767: GO 53852
// end ;
53769: GO 53440
53771: POP
53772: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53773: LD_VAR 0 9
53777: PPUSH
53778: LD_VAR 0 3
53782: PPUSH
53783: LD_VAR 0 4
53787: PPUSH
53788: LD_INT 20
53790: PPUSH
53791: CALL 45804 0 4
53795: PUSH
53796: LD_INT 4
53798: ARRAY
53799: IFFALSE 53803
// exit ;
53801: GO 53852
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53803: LD_VAR 0 2
53807: PUSH
53808: LD_INT 29
53810: PUSH
53811: LD_INT 30
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: IN
53818: PUSH
53819: LD_VAR 0 3
53823: PPUSH
53824: LD_VAR 0 4
53828: PPUSH
53829: LD_VAR 0 9
53833: PPUSH
53834: CALL_OW 440
53838: NOT
53839: AND
53840: IFFALSE 53844
// exit ;
53842: GO 53852
// result := true ;
53844: LD_ADDR_VAR 0 6
53848: PUSH
53849: LD_INT 1
53851: ST_TO_ADDR
// end ;
53852: LD_VAR 0 6
53856: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53857: LD_INT 0
53859: PPUSH
53860: PPUSH
53861: PPUSH
53862: PPUSH
53863: PPUSH
53864: PPUSH
53865: PPUSH
53866: PPUSH
53867: PPUSH
53868: PPUSH
53869: PPUSH
53870: PPUSH
53871: PPUSH
53872: PPUSH
53873: PPUSH
53874: PPUSH
53875: PPUSH
53876: PPUSH
53877: PPUSH
53878: PPUSH
53879: PPUSH
53880: PPUSH
53881: PPUSH
53882: PPUSH
53883: PPUSH
53884: PPUSH
53885: PPUSH
53886: PPUSH
53887: PPUSH
53888: PPUSH
53889: PPUSH
53890: PPUSH
53891: PPUSH
53892: PPUSH
53893: PPUSH
53894: PPUSH
53895: PPUSH
53896: PPUSH
53897: PPUSH
53898: PPUSH
53899: PPUSH
53900: PPUSH
53901: PPUSH
53902: PPUSH
53903: PPUSH
53904: PPUSH
53905: PPUSH
53906: PPUSH
53907: PPUSH
53908: PPUSH
53909: PPUSH
53910: PPUSH
53911: PPUSH
53912: PPUSH
53913: PPUSH
53914: PPUSH
53915: PPUSH
53916: PPUSH
// result = [ ] ;
53917: LD_ADDR_VAR 0 7
53921: PUSH
53922: EMPTY
53923: ST_TO_ADDR
// temp_list = [ ] ;
53924: LD_ADDR_VAR 0 9
53928: PUSH
53929: EMPTY
53930: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53931: LD_VAR 0 4
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: LD_INT 2
53944: PUSH
53945: LD_INT 3
53947: PUSH
53948: LD_INT 4
53950: PUSH
53951: LD_INT 5
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: IN
53962: NOT
53963: PUSH
53964: LD_VAR 0 1
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: IN
53979: PUSH
53980: LD_VAR 0 5
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: LD_INT 3
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: LIST
53998: IN
53999: NOT
54000: AND
54001: OR
54002: IFFALSE 54006
// exit ;
54004: GO 72397
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54006: LD_VAR 0 1
54010: PUSH
54011: LD_INT 6
54013: PUSH
54014: LD_INT 7
54016: PUSH
54017: LD_INT 8
54019: PUSH
54020: LD_INT 13
54022: PUSH
54023: LD_INT 12
54025: PUSH
54026: LD_INT 15
54028: PUSH
54029: LD_INT 11
54031: PUSH
54032: LD_INT 14
54034: PUSH
54035: LD_INT 10
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: IN
54049: IFFALSE 54059
// btype = b_lab ;
54051: LD_ADDR_VAR 0 1
54055: PUSH
54056: LD_INT 6
54058: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54059: LD_VAR 0 6
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: LIST
54077: IN
54078: NOT
54079: PUSH
54080: LD_VAR 0 1
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: LD_INT 2
54093: PUSH
54094: LD_INT 3
54096: PUSH
54097: LD_INT 6
54099: PUSH
54100: LD_INT 36
54102: PUSH
54103: LD_INT 4
54105: PUSH
54106: LD_INT 5
54108: PUSH
54109: LD_INT 31
54111: PUSH
54112: LD_INT 32
54114: PUSH
54115: LD_INT 33
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: IN
54131: NOT
54132: PUSH
54133: LD_VAR 0 6
54137: PUSH
54138: LD_INT 1
54140: EQUAL
54141: AND
54142: OR
54143: PUSH
54144: LD_VAR 0 1
54148: PUSH
54149: LD_INT 2
54151: PUSH
54152: LD_INT 3
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: IN
54159: NOT
54160: PUSH
54161: LD_VAR 0 6
54165: PUSH
54166: LD_INT 2
54168: EQUAL
54169: AND
54170: OR
54171: IFFALSE 54181
// mode = 0 ;
54173: LD_ADDR_VAR 0 6
54177: PUSH
54178: LD_INT 0
54180: ST_TO_ADDR
// case mode of 0 :
54181: LD_VAR 0 6
54185: PUSH
54186: LD_INT 0
54188: DOUBLE
54189: EQUAL
54190: IFTRUE 54194
54192: GO 65647
54194: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54195: LD_ADDR_VAR 0 11
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: LD_INT 2
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: LD_INT 2
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 3
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: LD_INT 3
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: LD_INT 2
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54388: LD_ADDR_VAR 0 12
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: LD_INT 1
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 2
54522: NEG
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 3
54545: NEG
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 3
54556: NEG
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54584: LD_ADDR_VAR 0 13
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: PUSH
54688: LD_INT 2
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: LD_INT 2
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 2
54707: NEG
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 2
54719: NEG
54720: PUSH
54721: LD_INT 2
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: LD_INT 3
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 3
54743: NEG
54744: PUSH
54745: LD_INT 2
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 3
54755: NEG
54756: PUSH
54757: LD_INT 3
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54783: LD_ADDR_VAR 0 14
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: LD_INT 2
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: LD_INT 3
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 3
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: LD_INT 2
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54979: LD_ADDR_VAR 0 15
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: NEG
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 3
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 3
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55172: LD_ADDR_VAR 0 16
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: LD_INT 2
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: NEG
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: LD_INT 2
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 3
55319: PUSH
55320: LD_INT 2
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 3
55329: PUSH
55330: LD_INT 3
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 2
55339: PUSH
55340: LD_INT 3
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55365: LD_ADDR_VAR 0 17
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 2
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 2
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: LD_INT 2
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 2
55541: NEG
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 2
55564: NEG
55565: PUSH
55566: LD_INT 2
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55595: LD_ADDR_VAR 0 18
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: LD_INT 2
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: LD_INT 2
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 2
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: NEG
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: LD_INT 1
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 2
55794: NEG
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55825: LD_ADDR_VAR 0 19
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: LD_INT 2
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 2
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: LD_INT 2
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 2
56012: NEG
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 2
56024: NEG
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56055: LD_ADDR_VAR 0 20
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: LD_INT 2
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 2
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 2
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 2
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 2
56231: NEG
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 2
56242: NEG
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56285: LD_ADDR_VAR 0 21
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: LD_INT 0
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: LD_INT 1
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: LD_INT 2
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: LD_INT 2
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 2
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56515: LD_ADDR_VAR 0 22
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 1
56584: NEG
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: LD_INT 2
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: LD_INT 2
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 2
56691: NEG
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: LD_INT 2
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56745: LD_ADDR_VAR 0 23
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 2
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 2
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 2
56921: NEG
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 2
56932: NEG
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: LD_INT 2
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: LD_INT 3
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: NEG
56969: PUSH
56970: LD_INT 3
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: LD_INT 2
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57025: LD_ADDR_VAR 0 24
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: LD_INT 2
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 2
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 2
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 2
57212: NEG
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: LD_INT 2
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 3
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 3
57268: PUSH
57269: LD_INT 2
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57301: LD_ADDR_VAR 0 25
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: LD_INT 2
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 2
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: LD_INT 2
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: NEG
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 2
57488: NEG
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 2
57500: NEG
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 3
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 3
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: LD_INT 3
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: LD_INT 3
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57575: LD_ADDR_VAR 0 26
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: NEG
57657: PUSH
57658: LD_INT 2
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 2
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 2
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 2
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: LD_INT 2
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 2
57751: NEG
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 2
57762: NEG
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: LD_INT 2
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 2
57786: PUSH
57787: LD_INT 3
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: PUSH
57797: LD_INT 3
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: LD_INT 2
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57851: LD_ADDR_VAR 0 27
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: LD_INT 0
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 1
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: NEG
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: LD_INT 2
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 2
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 2
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: LD_INT 2
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 2
58027: NEG
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 2
58050: NEG
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 3
58084: NEG
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 3
58096: NEG
58097: PUSH
58098: LD_INT 2
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58131: LD_ADDR_VAR 0 28
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: NEG
58213: PUSH
58214: LD_INT 2
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: LD_INT 2
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 2
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 2
58266: PUSH
58267: LD_INT 2
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: LD_INT 2
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 2
58307: NEG
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: LD_INT 1
58322: NEG
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: LD_INT 2
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: LD_INT 3
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: LD_INT 3
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 3
58366: NEG
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 3
58378: NEG
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58413: LD_ADDR_VAR 0 29
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: LD_INT 1
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: LD_INT 2
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: LD_INT 2
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 2
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: LD_INT 2
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 1
58568: NEG
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 2
58579: NEG
58580: PUSH
58581: LD_INT 1
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 2
58591: NEG
58592: PUSH
58593: LD_INT 2
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: NEG
58604: PUSH
58605: LD_INT 3
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 2
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 3
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: PUSH
58637: LD_INT 3
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 2
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 3
58657: NEG
58658: PUSH
58659: LD_INT 2
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58692: LD_ADDR_VAR 0 30
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: LD_INT 2
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 2
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 2
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 2
58858: NEG
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: NEG
58870: PUSH
58871: LD_INT 1
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: LD_INT 3
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: LD_INT 2
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 3
58904: PUSH
58905: LD_INT 2
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 2
58914: PUSH
58915: LD_INT 3
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 3
58935: NEG
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58970: LD_ADDR_VAR 0 31
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: LD_INT 0
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 0
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: NEG
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: LD_INT 2
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 2
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 2
59094: PUSH
59095: LD_INT 2
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: LD_INT 2
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 2
59135: NEG
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: NEG
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 2
59159: NEG
59160: PUSH
59161: LD_INT 3
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 3
59182: PUSH
59183: LD_INT 1
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: LD_INT 3
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 2
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 3
59213: NEG
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59248: LD_ADDR_VAR 0 32
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 1
59329: NEG
59330: PUSH
59331: LD_INT 2
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 2
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: LD_INT 2
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: LD_INT 2
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: LD_INT 2
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: NEG
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 2
59425: NEG
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: LD_INT 3
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: LD_INT 2
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 3
59460: PUSH
59461: LD_INT 2
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 2
59470: PUSH
59471: LD_INT 3
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 2
59480: NEG
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 3
59491: NEG
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59526: LD_ADDR_VAR 0 33
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: NEG
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: NEG
59608: PUSH
59609: LD_INT 2
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 2
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 2
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: LD_INT 2
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: LD_INT 2
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 2
59681: NEG
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 2
59692: NEG
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 2
59704: NEG
59705: PUSH
59706: LD_INT 2
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: LD_INT 3
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 2
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 3
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: LD_INT 3
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 1
59759: NEG
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 3
59770: NEG
59771: PUSH
59772: LD_INT 2
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59805: LD_ADDR_VAR 0 34
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: LD_INT 1
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: NEG
59875: PUSH
59876: LD_INT 1
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: LD_INT 2
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: LD_INT 2
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 1
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 2
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 2
59930: PUSH
59931: LD_INT 2
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: LD_INT 2
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 2
59961: NEG
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 2
59972: NEG
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 2
59984: NEG
59985: PUSH
59986: LD_INT 2
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: LD_INT 3
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: LD_INT 2
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 3
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 2
60029: PUSH
60030: LD_INT 3
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 2
60039: NEG
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 3
60050: NEG
60051: PUSH
60052: LD_INT 1
60054: NEG
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60085: LD_ADDR_VAR 0 35
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 2
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 2
60176: NEG
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60197: LD_ADDR_VAR 0 36
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 1
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: LD_INT 1
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: LD_INT 2
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: LD_INT 2
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60309: LD_ADDR_VAR 0 37
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: LD_INT 1
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 1
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60421: LD_ADDR_VAR 0 38
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 2
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 2
60512: NEG
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60533: LD_ADDR_VAR 0 39
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: LD_INT 1
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: LD_INT 1
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 1
60602: NEG
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: LD_INT 2
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60645: LD_ADDR_VAR 0 40
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 1
60714: NEG
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60757: LD_ADDR_VAR 0 41
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 1
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 0
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: NEG
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 1
60826: NEG
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: LD_INT 2
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 2
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 2
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 2
60881: PUSH
60882: LD_INT 2
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: PUSH
60892: LD_INT 2
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 1
60901: NEG
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 2
60912: NEG
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 2
60923: NEG
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 2
60935: NEG
60936: PUSH
60937: LD_INT 2
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 2
60947: NEG
60948: PUSH
60949: LD_INT 3
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: PUSH
60960: LD_INT 1
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 3
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 3
60990: PUSH
60991: LD_INT 2
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 3
61000: PUSH
61001: LD_INT 3
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 2
61010: PUSH
61011: LD_INT 3
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 2
61020: NEG
61021: PUSH
61022: LD_INT 1
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 3
61031: NEG
61032: PUSH
61033: LD_INT 0
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 3
61042: NEG
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 3
61054: NEG
61055: PUSH
61056: LD_INT 2
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 3
61066: NEG
61067: PUSH
61068: LD_INT 3
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61107: LD_ADDR_VAR 0 42
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 1
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: LD_INT 1
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: LD_INT 2
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: LD_INT 2
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 2
61222: PUSH
61223: LD_INT 1
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: LD_INT 2
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: NEG
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 2
61273: NEG
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: LD_INT 2
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: LD_INT 3
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: LD_INT 3
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: PUSH
61333: LD_INT 2
61335: NEG
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 3
61343: PUSH
61344: LD_INT 2
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 3
61353: PUSH
61354: LD_INT 3
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 2
61363: PUSH
61364: LD_INT 3
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 1
61373: PUSH
61374: LD_INT 3
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_INT 3
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 1
61393: NEG
61394: PUSH
61395: LD_INT 2
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 3
61404: NEG
61405: PUSH
61406: LD_INT 2
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 3
61416: NEG
61417: PUSH
61418: LD_INT 3
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61457: LD_ADDR_VAR 0 43
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 0
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: LD_INT 1
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 1
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: NEG
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: LD_INT 1
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: LD_INT 2
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 2
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: LD_INT 2
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 0
61602: PUSH
61603: LD_INT 2
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 1
61612: NEG
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 2
61634: NEG
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 1
61646: NEG
61647: PUSH
61648: LD_INT 3
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: LD_INT 3
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: LD_INT 2
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 3
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 3
61701: PUSH
61702: LD_INT 1
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: LD_INT 3
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: LD_INT 3
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 1
61731: NEG
61732: PUSH
61733: LD_INT 2
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 2
61742: NEG
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 3
61753: NEG
61754: PUSH
61755: LD_INT 0
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 3
61764: NEG
61765: PUSH
61766: LD_INT 1
61768: NEG
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61805: LD_ADDR_VAR 0 44
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: LD_INT 0
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: LD_INT 1
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 1
61843: PUSH
61844: LD_INT 1
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 0
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 1
61863: NEG
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 1
61874: NEG
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: LD_INT 2
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 2
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 2
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: PUSH
61930: LD_INT 2
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: LD_INT 2
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: NEG
61950: PUSH
61951: LD_INT 1
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 2
61960: NEG
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 2
61971: NEG
61972: PUSH
61973: LD_INT 1
61975: NEG
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 2
61983: NEG
61984: PUSH
61985: LD_INT 2
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: LD_INT 3
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 2
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 3
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 3
62028: PUSH
62029: LD_INT 1
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 3
62038: PUSH
62039: LD_INT 2
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 3
62048: PUSH
62049: LD_INT 3
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 2
62058: PUSH
62059: LD_INT 3
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 2
62068: NEG
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 3
62079: NEG
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 3
62090: NEG
62091: PUSH
62092: LD_INT 1
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 3
62102: NEG
62103: PUSH
62104: LD_INT 2
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 3
62114: NEG
62115: PUSH
62116: LD_INT 3
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62155: LD_ADDR_VAR 0 45
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 1
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 0
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 1
62213: NEG
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 1
62224: NEG
62225: PUSH
62226: LD_INT 1
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: LD_INT 2
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: LD_INT 2
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: PUSH
62260: LD_INT 1
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 2
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 2
62280: PUSH
62281: LD_INT 2
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: LD_INT 2
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 0
62300: PUSH
62301: LD_INT 2
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 2
62321: NEG
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 2
62333: NEG
62334: PUSH
62335: LD_INT 2
62337: NEG
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 2
62345: NEG
62346: PUSH
62347: LD_INT 3
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: NEG
62358: PUSH
62359: LD_INT 3
62361: NEG
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: LD_INT 3
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: PUSH
62381: LD_INT 2
62383: NEG
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 3
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 3
62401: PUSH
62402: LD_INT 3
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 2
62411: PUSH
62412: LD_INT 3
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 1
62421: PUSH
62422: LD_INT 3
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: LD_INT 3
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: PUSH
62443: LD_INT 2
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 3
62452: NEG
62453: PUSH
62454: LD_INT 2
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 3
62464: NEG
62465: PUSH
62466: LD_INT 3
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62505: LD_ADDR_VAR 0 46
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 0
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 1
62543: PUSH
62544: LD_INT 1
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: LD_INT 1
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 1
62574: NEG
62575: PUSH
62576: LD_INT 1
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: NEG
62587: PUSH
62588: LD_INT 2
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: LD_INT 2
62601: NEG
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: LD_INT 1
62612: NEG
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 2
62620: PUSH
62621: LD_INT 0
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 2
62630: PUSH
62631: LD_INT 1
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: LD_INT 2
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: LD_INT 2
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 2
62671: NEG
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 2
62682: NEG
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: LD_INT 3
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: LD_INT 3
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: LD_INT 2
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 2
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 3
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 3
62749: PUSH
62750: LD_INT 1
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 1
62759: PUSH
62760: LD_INT 3
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: LD_INT 3
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 1
62779: NEG
62780: PUSH
62781: LD_INT 2
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 2
62790: NEG
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 3
62801: NEG
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 3
62812: NEG
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62853: LD_ADDR_VAR 0 47
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 0
62870: PUSH
62871: LD_INT 1
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 1
62891: PUSH
62892: LD_INT 1
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 1
62922: NEG
62923: PUSH
62924: LD_INT 1
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 1
62934: NEG
62935: PUSH
62936: LD_INT 2
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: LD_INT 2
62949: NEG
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 1
62957: PUSH
62958: LD_INT 1
62960: NEG
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 2
62968: NEG
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 2
62980: NEG
62981: PUSH
62982: LD_INT 2
62984: NEG
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63004: LD_ADDR_VAR 0 48
63008: PUSH
63009: LD_INT 0
63011: PUSH
63012: LD_INT 0
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 0
63021: PUSH
63022: LD_INT 1
63024: NEG
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 1
63032: PUSH
63033: LD_INT 0
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 1
63042: PUSH
63043: LD_INT 1
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: LD_INT 1
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: NEG
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 1
63073: NEG
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 1
63085: NEG
63086: PUSH
63087: LD_INT 2
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 0
63097: PUSH
63098: LD_INT 2
63100: NEG
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 2
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 2
63129: PUSH
63130: LD_INT 1
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63151: LD_ADDR_VAR 0 49
63155: PUSH
63156: LD_INT 0
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: LD_INT 1
63171: NEG
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 1
63179: PUSH
63180: LD_INT 0
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 1
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 0
63199: PUSH
63200: LD_INT 1
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 1
63209: NEG
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: NEG
63221: PUSH
63222: LD_INT 1
63224: NEG
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 1
63232: PUSH
63233: LD_INT 1
63235: NEG
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 2
63243: PUSH
63244: LD_INT 0
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 2
63253: PUSH
63254: LD_INT 1
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 2
63263: PUSH
63264: LD_INT 2
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: LD_INT 2
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63295: LD_ADDR_VAR 0 50
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: LD_INT 1
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 1
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 1
63353: NEG
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 2
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 2
63386: PUSH
63387: LD_INT 2
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 1
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: LD_INT 2
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63439: LD_ADDR_VAR 0 51
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 0
63456: PUSH
63457: LD_INT 1
63459: NEG
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: LD_INT 0
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 1
63477: PUSH
63478: LD_INT 1
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 0
63487: PUSH
63488: LD_INT 1
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 1
63497: NEG
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 1
63508: NEG
63509: PUSH
63510: LD_INT 1
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 1
63520: PUSH
63521: LD_INT 2
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: LD_INT 2
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 2
63551: NEG
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 2
63562: NEG
63563: PUSH
63564: LD_INT 1
63566: NEG
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63586: LD_ADDR_VAR 0 52
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 0
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 1
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 1
63624: PUSH
63625: LD_INT 1
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 0
63634: PUSH
63635: LD_INT 1
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 1
63644: NEG
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 1
63655: NEG
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 1
63667: NEG
63668: PUSH
63669: LD_INT 2
63671: NEG
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 1
63679: NEG
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 2
63690: NEG
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 2
63701: NEG
63702: PUSH
63703: LD_INT 1
63705: NEG
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 2
63713: NEG
63714: PUSH
63715: LD_INT 2
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63737: LD_ADDR_VAR 0 53
63741: PUSH
63742: LD_INT 0
63744: PUSH
63745: LD_INT 0
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 0
63754: PUSH
63755: LD_INT 1
63757: NEG
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 1
63765: PUSH
63766: LD_INT 0
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 1
63775: PUSH
63776: LD_INT 1
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 0
63785: PUSH
63786: LD_INT 1
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: NEG
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 1
63806: NEG
63807: PUSH
63808: LD_INT 1
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 1
63818: NEG
63819: PUSH
63820: LD_INT 2
63822: NEG
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: LD_INT 2
63833: NEG
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 1
63841: PUSH
63842: LD_INT 1
63844: NEG
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 2
63852: PUSH
63853: LD_INT 0
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 2
63862: PUSH
63863: LD_INT 1
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: LD_INT 2
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 1
63882: PUSH
63883: LD_INT 2
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: LD_INT 2
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 1
63902: NEG
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 2
63913: NEG
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 2
63924: NEG
63925: PUSH
63926: LD_INT 1
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 2
63936: NEG
63937: PUSH
63938: LD_INT 2
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63967: LD_ADDR_VAR 0 54
63971: PUSH
63972: LD_INT 0
63974: PUSH
63975: LD_INT 0
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: LD_INT 1
63987: NEG
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 1
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 1
64005: PUSH
64006: LD_INT 1
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 0
64015: PUSH
64016: LD_INT 1
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 1
64025: NEG
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 1
64036: NEG
64037: PUSH
64038: LD_INT 1
64040: NEG
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 1
64048: NEG
64049: PUSH
64050: LD_INT 2
64052: NEG
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: LD_INT 2
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 1
64071: PUSH
64072: LD_INT 1
64074: NEG
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 2
64082: PUSH
64083: LD_INT 0
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 2
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 2
64102: PUSH
64103: LD_INT 2
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 1
64112: PUSH
64113: LD_INT 2
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: LD_INT 2
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 1
64132: NEG
64133: PUSH
64134: LD_INT 1
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 2
64143: NEG
64144: PUSH
64145: LD_INT 0
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 2
64154: NEG
64155: PUSH
64156: LD_INT 1
64158: NEG
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 2
64166: NEG
64167: PUSH
64168: LD_INT 2
64170: NEG
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64197: LD_ADDR_VAR 0 55
64201: PUSH
64202: LD_INT 0
64204: PUSH
64205: LD_INT 0
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 0
64214: PUSH
64215: LD_INT 1
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 1
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 1
64235: PUSH
64236: LD_INT 1
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 0
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 1
64255: NEG
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 1
64266: NEG
64267: PUSH
64268: LD_INT 1
64270: NEG
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 1
64278: NEG
64279: PUSH
64280: LD_INT 2
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 0
64290: PUSH
64291: LD_INT 2
64293: NEG
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 1
64301: PUSH
64302: LD_INT 1
64304: NEG
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 2
64312: PUSH
64313: LD_INT 0
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 2
64322: PUSH
64323: LD_INT 1
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 2
64332: PUSH
64333: LD_INT 2
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: LD_INT 2
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: LD_INT 2
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 1
64362: NEG
64363: PUSH
64364: LD_INT 1
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 2
64373: NEG
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 2
64384: NEG
64385: PUSH
64386: LD_INT 1
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 2
64396: NEG
64397: PUSH
64398: LD_INT 2
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64427: LD_ADDR_VAR 0 56
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: LD_INT 0
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 0
64444: PUSH
64445: LD_INT 1
64447: NEG
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: LD_INT 0
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 1
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: LD_INT 1
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 1
64485: NEG
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 1
64496: NEG
64497: PUSH
64498: LD_INT 1
64500: NEG
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 1
64508: NEG
64509: PUSH
64510: LD_INT 2
64512: NEG
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: LD_INT 2
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 1
64531: PUSH
64532: LD_INT 1
64534: NEG
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 2
64542: PUSH
64543: LD_INT 0
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 2
64552: PUSH
64553: LD_INT 1
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 2
64562: PUSH
64563: LD_INT 2
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 1
64572: PUSH
64573: LD_INT 2
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: LD_INT 2
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 1
64592: NEG
64593: PUSH
64594: LD_INT 1
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 2
64603: NEG
64604: PUSH
64605: LD_INT 0
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 2
64614: NEG
64615: PUSH
64616: LD_INT 1
64618: NEG
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 2
64626: NEG
64627: PUSH
64628: LD_INT 2
64630: NEG
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64657: LD_ADDR_VAR 0 57
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: LD_INT 0
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: LD_INT 1
64677: NEG
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 1
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: LD_INT 1
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 0
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 1
64715: NEG
64716: PUSH
64717: LD_INT 0
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 1
64726: NEG
64727: PUSH
64728: LD_INT 1
64730: NEG
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: LD_INT 2
64742: NEG
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 0
64750: PUSH
64751: LD_INT 2
64753: NEG
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 1
64761: PUSH
64762: LD_INT 1
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 2
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 2
64782: PUSH
64783: LD_INT 1
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 2
64792: PUSH
64793: LD_INT 2
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 1
64802: PUSH
64803: LD_INT 2
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 0
64812: PUSH
64813: LD_INT 2
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 1
64822: NEG
64823: PUSH
64824: LD_INT 1
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 2
64833: NEG
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 2
64844: NEG
64845: PUSH
64846: LD_INT 1
64848: NEG
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 2
64856: NEG
64857: PUSH
64858: LD_INT 2
64860: NEG
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64887: LD_ADDR_VAR 0 58
64891: PUSH
64892: LD_INT 0
64894: PUSH
64895: LD_INT 0
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: LD_INT 1
64907: NEG
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 1
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 1
64925: PUSH
64926: LD_INT 1
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: LD_INT 1
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 1
64945: NEG
64946: PUSH
64947: LD_INT 0
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 1
64956: NEG
64957: PUSH
64958: LD_INT 1
64960: NEG
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 1
64968: NEG
64969: PUSH
64970: LD_INT 2
64972: NEG
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 0
64980: PUSH
64981: LD_INT 2
64983: NEG
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 1
64991: PUSH
64992: LD_INT 1
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 2
65002: PUSH
65003: LD_INT 0
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 2
65012: PUSH
65013: LD_INT 1
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 2
65022: PUSH
65023: LD_INT 2
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 1
65032: PUSH
65033: LD_INT 2
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 0
65042: PUSH
65043: LD_INT 2
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 1
65052: NEG
65053: PUSH
65054: LD_INT 1
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 2
65063: NEG
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 2
65074: NEG
65075: PUSH
65076: LD_INT 1
65078: NEG
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 2
65086: NEG
65087: PUSH
65088: LD_INT 2
65090: NEG
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65117: LD_ADDR_VAR 0 59
65121: PUSH
65122: LD_INT 0
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: LD_INT 1
65137: NEG
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 1
65145: PUSH
65146: LD_INT 0
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 1
65155: PUSH
65156: LD_INT 1
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: LD_INT 1
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 1
65175: NEG
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 1
65186: NEG
65187: PUSH
65188: LD_INT 1
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65205: LD_ADDR_VAR 0 60
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: LD_INT 0
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 0
65222: PUSH
65223: LD_INT 1
65225: NEG
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 1
65233: PUSH
65234: LD_INT 0
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 1
65243: PUSH
65244: LD_INT 1
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 0
65253: PUSH
65254: LD_INT 1
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 1
65263: NEG
65264: PUSH
65265: LD_INT 0
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 1
65274: NEG
65275: PUSH
65276: LD_INT 1
65278: NEG
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65293: LD_ADDR_VAR 0 61
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: LD_INT 0
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: LD_INT 1
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 1
65321: PUSH
65322: LD_INT 0
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 1
65331: PUSH
65332: LD_INT 1
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: LD_INT 1
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 1
65351: NEG
65352: PUSH
65353: LD_INT 0
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 1
65362: NEG
65363: PUSH
65364: LD_INT 1
65366: NEG
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65381: LD_ADDR_VAR 0 62
65385: PUSH
65386: LD_INT 0
65388: PUSH
65389: LD_INT 0
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 0
65398: PUSH
65399: LD_INT 1
65401: NEG
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 1
65409: PUSH
65410: LD_INT 0
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 1
65419: PUSH
65420: LD_INT 1
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 0
65429: PUSH
65430: LD_INT 1
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 1
65439: NEG
65440: PUSH
65441: LD_INT 0
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 1
65450: NEG
65451: PUSH
65452: LD_INT 1
65454: NEG
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65469: LD_ADDR_VAR 0 63
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: LD_INT 0
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 0
65486: PUSH
65487: LD_INT 1
65489: NEG
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 1
65497: PUSH
65498: LD_INT 0
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 1
65507: PUSH
65508: LD_INT 1
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 0
65517: PUSH
65518: LD_INT 1
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 1
65527: NEG
65528: PUSH
65529: LD_INT 0
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 1
65538: NEG
65539: PUSH
65540: LD_INT 1
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65557: LD_ADDR_VAR 0 64
65561: PUSH
65562: LD_INT 0
65564: PUSH
65565: LD_INT 0
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 0
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 1
65585: PUSH
65586: LD_INT 0
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 1
65595: PUSH
65596: LD_INT 1
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: LD_INT 1
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 1
65615: NEG
65616: PUSH
65617: LD_INT 0
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 1
65626: NEG
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: ST_TO_ADDR
// end ; 1 :
65645: GO 71542
65647: LD_INT 1
65649: DOUBLE
65650: EQUAL
65651: IFTRUE 65655
65653: GO 68278
65655: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65656: LD_ADDR_VAR 0 11
65660: PUSH
65661: LD_INT 1
65663: NEG
65664: PUSH
65665: LD_INT 3
65667: NEG
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: LD_INT 3
65678: NEG
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 1
65686: PUSH
65687: LD_INT 2
65689: NEG
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: LIST
65699: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65700: LD_ADDR_VAR 0 12
65704: PUSH
65705: LD_INT 2
65707: PUSH
65708: LD_INT 1
65710: NEG
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 3
65718: PUSH
65719: LD_INT 0
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 3
65728: PUSH
65729: LD_INT 1
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: LIST
65740: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65741: LD_ADDR_VAR 0 13
65745: PUSH
65746: LD_INT 3
65748: PUSH
65749: LD_INT 2
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 3
65758: PUSH
65759: LD_INT 3
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 2
65768: PUSH
65769: LD_INT 3
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: LIST
65780: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65781: LD_ADDR_VAR 0 14
65785: PUSH
65786: LD_INT 1
65788: PUSH
65789: LD_INT 3
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 0
65798: PUSH
65799: LD_INT 3
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 1
65808: NEG
65809: PUSH
65810: LD_INT 2
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: LIST
65821: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65822: LD_ADDR_VAR 0 15
65826: PUSH
65827: LD_INT 2
65829: NEG
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 3
65840: NEG
65841: PUSH
65842: LD_INT 0
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 3
65851: NEG
65852: PUSH
65853: LD_INT 1
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: LIST
65865: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65866: LD_ADDR_VAR 0 16
65870: PUSH
65871: LD_INT 2
65873: NEG
65874: PUSH
65875: LD_INT 3
65877: NEG
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 3
65885: NEG
65886: PUSH
65887: LD_INT 2
65889: NEG
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 3
65897: NEG
65898: PUSH
65899: LD_INT 3
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: LIST
65911: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65912: LD_ADDR_VAR 0 17
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: LD_INT 3
65923: NEG
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: LD_INT 3
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 1
65942: PUSH
65943: LD_INT 2
65945: NEG
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: LIST
65955: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65956: LD_ADDR_VAR 0 18
65960: PUSH
65961: LD_INT 2
65963: PUSH
65964: LD_INT 1
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 3
65974: PUSH
65975: LD_INT 0
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 3
65984: PUSH
65985: LD_INT 1
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: LIST
65996: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65997: LD_ADDR_VAR 0 19
66001: PUSH
66002: LD_INT 3
66004: PUSH
66005: LD_INT 2
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 3
66014: PUSH
66015: LD_INT 3
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 2
66024: PUSH
66025: LD_INT 3
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: LIST
66036: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66037: LD_ADDR_VAR 0 20
66041: PUSH
66042: LD_INT 1
66044: PUSH
66045: LD_INT 3
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 0
66054: PUSH
66055: LD_INT 3
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 1
66064: NEG
66065: PUSH
66066: LD_INT 2
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: LIST
66077: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66078: LD_ADDR_VAR 0 21
66082: PUSH
66083: LD_INT 2
66085: NEG
66086: PUSH
66087: LD_INT 1
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 3
66096: NEG
66097: PUSH
66098: LD_INT 0
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 3
66107: NEG
66108: PUSH
66109: LD_INT 1
66111: NEG
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: LIST
66121: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66122: LD_ADDR_VAR 0 22
66126: PUSH
66127: LD_INT 2
66129: NEG
66130: PUSH
66131: LD_INT 3
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 3
66141: NEG
66142: PUSH
66143: LD_INT 2
66145: NEG
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 3
66153: NEG
66154: PUSH
66155: LD_INT 3
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: LIST
66167: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66168: LD_ADDR_VAR 0 23
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: LD_INT 3
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 1
66186: NEG
66187: PUSH
66188: LD_INT 4
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 1
66198: PUSH
66199: LD_INT 3
66201: NEG
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: LIST
66211: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66212: LD_ADDR_VAR 0 24
66216: PUSH
66217: LD_INT 3
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 3
66229: PUSH
66230: LD_INT 1
66232: NEG
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 4
66240: PUSH
66241: LD_INT 1
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: LIST
66252: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66253: LD_ADDR_VAR 0 25
66257: PUSH
66258: LD_INT 3
66260: PUSH
66261: LD_INT 3
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 4
66270: PUSH
66271: LD_INT 3
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 3
66280: PUSH
66281: LD_INT 4
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: LIST
66292: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66293: LD_ADDR_VAR 0 26
66297: PUSH
66298: LD_INT 0
66300: PUSH
66301: LD_INT 3
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 1
66310: PUSH
66311: LD_INT 4
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 1
66320: NEG
66321: PUSH
66322: LD_INT 3
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: LIST
66333: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66334: LD_ADDR_VAR 0 27
66338: PUSH
66339: LD_INT 3
66341: NEG
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 3
66352: NEG
66353: PUSH
66354: LD_INT 1
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 4
66363: NEG
66364: PUSH
66365: LD_INT 1
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: LIST
66377: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66378: LD_ADDR_VAR 0 28
66382: PUSH
66383: LD_INT 3
66385: NEG
66386: PUSH
66387: LD_INT 3
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 3
66397: NEG
66398: PUSH
66399: LD_INT 4
66401: NEG
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 4
66409: NEG
66410: PUSH
66411: LD_INT 3
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: LIST
66423: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66424: LD_ADDR_VAR 0 29
66428: PUSH
66429: LD_INT 1
66431: NEG
66432: PUSH
66433: LD_INT 3
66435: NEG
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 0
66443: PUSH
66444: LD_INT 3
66446: NEG
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 1
66454: PUSH
66455: LD_INT 2
66457: NEG
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 1
66465: NEG
66466: PUSH
66467: LD_INT 4
66469: NEG
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 0
66477: PUSH
66478: LD_INT 4
66480: NEG
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 1
66488: PUSH
66489: LD_INT 3
66491: NEG
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 1
66499: NEG
66500: PUSH
66501: LD_INT 5
66503: NEG
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 0
66511: PUSH
66512: LD_INT 5
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 1
66522: PUSH
66523: LD_INT 4
66525: NEG
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 1
66533: NEG
66534: PUSH
66535: LD_INT 6
66537: NEG
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 0
66545: PUSH
66546: LD_INT 6
66548: NEG
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 1
66556: PUSH
66557: LD_INT 5
66559: NEG
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66579: LD_ADDR_VAR 0 30
66583: PUSH
66584: LD_INT 2
66586: PUSH
66587: LD_INT 1
66589: NEG
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 3
66597: PUSH
66598: LD_INT 0
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 3
66607: PUSH
66608: LD_INT 1
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 3
66617: PUSH
66618: LD_INT 1
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 4
66628: PUSH
66629: LD_INT 0
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 4
66638: PUSH
66639: LD_INT 1
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 4
66648: PUSH
66649: LD_INT 1
66651: NEG
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 5
66659: PUSH
66660: LD_INT 0
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 5
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 5
66679: PUSH
66680: LD_INT 1
66682: NEG
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 6
66690: PUSH
66691: LD_INT 0
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 6
66700: PUSH
66701: LD_INT 1
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66722: LD_ADDR_VAR 0 31
66726: PUSH
66727: LD_INT 3
66729: PUSH
66730: LD_INT 2
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 3
66739: PUSH
66740: LD_INT 3
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 2
66749: PUSH
66750: LD_INT 3
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 4
66759: PUSH
66760: LD_INT 3
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 4
66769: PUSH
66770: LD_INT 4
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 3
66779: PUSH
66780: LD_INT 4
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 5
66789: PUSH
66790: LD_INT 4
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 5
66799: PUSH
66800: LD_INT 5
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 4
66809: PUSH
66810: LD_INT 5
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 6
66819: PUSH
66820: LD_INT 5
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 6
66829: PUSH
66830: LD_INT 6
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 5
66839: PUSH
66840: LD_INT 6
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66861: LD_ADDR_VAR 0 32
66865: PUSH
66866: LD_INT 1
66868: PUSH
66869: LD_INT 3
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 0
66878: PUSH
66879: LD_INT 3
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 1
66888: NEG
66889: PUSH
66890: LD_INT 2
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: LD_INT 4
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 0
66909: PUSH
66910: LD_INT 4
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 1
66919: NEG
66920: PUSH
66921: LD_INT 3
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 1
66930: PUSH
66931: LD_INT 5
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 0
66940: PUSH
66941: LD_INT 5
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 1
66950: NEG
66951: PUSH
66952: LD_INT 4
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 1
66961: PUSH
66962: LD_INT 6
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 0
66971: PUSH
66972: LD_INT 6
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 1
66981: NEG
66982: PUSH
66983: LD_INT 5
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67004: LD_ADDR_VAR 0 33
67008: PUSH
67009: LD_INT 2
67011: NEG
67012: PUSH
67013: LD_INT 1
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 3
67022: NEG
67023: PUSH
67024: LD_INT 0
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 3
67033: NEG
67034: PUSH
67035: LD_INT 1
67037: NEG
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 3
67045: NEG
67046: PUSH
67047: LD_INT 1
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 4
67056: NEG
67057: PUSH
67058: LD_INT 0
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 4
67067: NEG
67068: PUSH
67069: LD_INT 1
67071: NEG
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 4
67079: NEG
67080: PUSH
67081: LD_INT 1
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 5
67090: NEG
67091: PUSH
67092: LD_INT 0
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 5
67101: NEG
67102: PUSH
67103: LD_INT 1
67105: NEG
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 5
67113: NEG
67114: PUSH
67115: LD_INT 1
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 6
67124: NEG
67125: PUSH
67126: LD_INT 0
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 6
67135: NEG
67136: PUSH
67137: LD_INT 1
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67159: LD_ADDR_VAR 0 34
67163: PUSH
67164: LD_INT 2
67166: NEG
67167: PUSH
67168: LD_INT 3
67170: NEG
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 3
67178: NEG
67179: PUSH
67180: LD_INT 2
67182: NEG
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 3
67190: NEG
67191: PUSH
67192: LD_INT 3
67194: NEG
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 3
67202: NEG
67203: PUSH
67204: LD_INT 4
67206: NEG
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 4
67214: NEG
67215: PUSH
67216: LD_INT 3
67218: NEG
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 4
67226: NEG
67227: PUSH
67228: LD_INT 4
67230: NEG
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 4
67238: NEG
67239: PUSH
67240: LD_INT 5
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 5
67250: NEG
67251: PUSH
67252: LD_INT 4
67254: NEG
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 5
67262: NEG
67263: PUSH
67264: LD_INT 5
67266: NEG
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 5
67274: NEG
67275: PUSH
67276: LD_INT 6
67278: NEG
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 6
67286: NEG
67287: PUSH
67288: LD_INT 5
67290: NEG
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 6
67298: NEG
67299: PUSH
67300: LD_INT 6
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67322: LD_ADDR_VAR 0 41
67326: PUSH
67327: LD_INT 0
67329: PUSH
67330: LD_INT 2
67332: NEG
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 1
67340: NEG
67341: PUSH
67342: LD_INT 3
67344: NEG
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 1
67352: PUSH
67353: LD_INT 2
67355: NEG
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: LIST
67365: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67366: LD_ADDR_VAR 0 42
67370: PUSH
67371: LD_INT 2
67373: PUSH
67374: LD_INT 0
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 2
67383: PUSH
67384: LD_INT 1
67386: NEG
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 3
67394: PUSH
67395: LD_INT 1
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: LIST
67406: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67407: LD_ADDR_VAR 0 43
67411: PUSH
67412: LD_INT 2
67414: PUSH
67415: LD_INT 2
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 3
67424: PUSH
67425: LD_INT 2
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 2
67434: PUSH
67435: LD_INT 3
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: LIST
67446: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67447: LD_ADDR_VAR 0 44
67451: PUSH
67452: LD_INT 0
67454: PUSH
67455: LD_INT 2
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 1
67464: PUSH
67465: LD_INT 3
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 1
67474: NEG
67475: PUSH
67476: LD_INT 2
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: LIST
67487: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67488: LD_ADDR_VAR 0 45
67492: PUSH
67493: LD_INT 2
67495: NEG
67496: PUSH
67497: LD_INT 0
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 2
67506: NEG
67507: PUSH
67508: LD_INT 1
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 3
67517: NEG
67518: PUSH
67519: LD_INT 1
67521: NEG
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: LIST
67531: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67532: LD_ADDR_VAR 0 46
67536: PUSH
67537: LD_INT 2
67539: NEG
67540: PUSH
67541: LD_INT 2
67543: NEG
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 2
67551: NEG
67552: PUSH
67553: LD_INT 3
67555: NEG
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 3
67563: NEG
67564: PUSH
67565: LD_INT 2
67567: NEG
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: LIST
67577: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67578: LD_ADDR_VAR 0 47
67582: PUSH
67583: LD_INT 2
67585: NEG
67586: PUSH
67587: LD_INT 3
67589: NEG
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 1
67597: NEG
67598: PUSH
67599: LD_INT 3
67601: NEG
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67611: LD_ADDR_VAR 0 48
67615: PUSH
67616: LD_INT 1
67618: PUSH
67619: LD_INT 2
67621: NEG
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 2
67629: PUSH
67630: LD_INT 1
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67642: LD_ADDR_VAR 0 49
67646: PUSH
67647: LD_INT 3
67649: PUSH
67650: LD_INT 1
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 3
67659: PUSH
67660: LD_INT 2
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67671: LD_ADDR_VAR 0 50
67675: PUSH
67676: LD_INT 2
67678: PUSH
67679: LD_INT 3
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 1
67688: PUSH
67689: LD_INT 3
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67700: LD_ADDR_VAR 0 51
67704: PUSH
67705: LD_INT 1
67707: NEG
67708: PUSH
67709: LD_INT 2
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 2
67718: NEG
67719: PUSH
67720: LD_INT 1
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67731: LD_ADDR_VAR 0 52
67735: PUSH
67736: LD_INT 3
67738: NEG
67739: PUSH
67740: LD_INT 1
67742: NEG
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 3
67750: NEG
67751: PUSH
67752: LD_INT 2
67754: NEG
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67764: LD_ADDR_VAR 0 53
67768: PUSH
67769: LD_INT 1
67771: NEG
67772: PUSH
67773: LD_INT 3
67775: NEG
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 0
67783: PUSH
67784: LD_INT 3
67786: NEG
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 1
67794: PUSH
67795: LD_INT 2
67797: NEG
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: LIST
67807: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67808: LD_ADDR_VAR 0 54
67812: PUSH
67813: LD_INT 2
67815: PUSH
67816: LD_INT 1
67818: NEG
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 3
67826: PUSH
67827: LD_INT 0
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 3
67836: PUSH
67837: LD_INT 1
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: LIST
67848: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67849: LD_ADDR_VAR 0 55
67853: PUSH
67854: LD_INT 3
67856: PUSH
67857: LD_INT 2
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 3
67866: PUSH
67867: LD_INT 3
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 2
67876: PUSH
67877: LD_INT 3
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: LIST
67888: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67889: LD_ADDR_VAR 0 56
67893: PUSH
67894: LD_INT 1
67896: PUSH
67897: LD_INT 3
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 0
67906: PUSH
67907: LD_INT 3
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 1
67916: NEG
67917: PUSH
67918: LD_INT 2
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: LIST
67929: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67930: LD_ADDR_VAR 0 57
67934: PUSH
67935: LD_INT 2
67937: NEG
67938: PUSH
67939: LD_INT 1
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 3
67948: NEG
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 3
67959: NEG
67960: PUSH
67961: LD_INT 1
67963: NEG
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: LIST
67973: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67974: LD_ADDR_VAR 0 58
67978: PUSH
67979: LD_INT 2
67981: NEG
67982: PUSH
67983: LD_INT 3
67985: NEG
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 3
67993: NEG
67994: PUSH
67995: LD_INT 2
67997: NEG
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 3
68005: NEG
68006: PUSH
68007: LD_INT 3
68009: NEG
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: LIST
68019: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68020: LD_ADDR_VAR 0 59
68024: PUSH
68025: LD_INT 1
68027: NEG
68028: PUSH
68029: LD_INT 2
68031: NEG
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 0
68039: PUSH
68040: LD_INT 2
68042: NEG
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 1
68050: PUSH
68051: LD_INT 1
68053: NEG
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: LIST
68063: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68064: LD_ADDR_VAR 0 60
68068: PUSH
68069: LD_INT 1
68071: PUSH
68072: LD_INT 1
68074: NEG
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 2
68082: PUSH
68083: LD_INT 0
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 2
68092: PUSH
68093: LD_INT 1
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: LIST
68104: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68105: LD_ADDR_VAR 0 61
68109: PUSH
68110: LD_INT 2
68112: PUSH
68113: LD_INT 1
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 2
68122: PUSH
68123: LD_INT 2
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 1
68132: PUSH
68133: LD_INT 2
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: LIST
68144: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68145: LD_ADDR_VAR 0 62
68149: PUSH
68150: LD_INT 1
68152: PUSH
68153: LD_INT 2
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 0
68162: PUSH
68163: LD_INT 2
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 1
68172: NEG
68173: PUSH
68174: LD_INT 1
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: LIST
68185: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68186: LD_ADDR_VAR 0 63
68190: PUSH
68191: LD_INT 1
68193: NEG
68194: PUSH
68195: LD_INT 1
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 2
68204: NEG
68205: PUSH
68206: LD_INT 0
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 2
68215: NEG
68216: PUSH
68217: LD_INT 1
68219: NEG
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: LIST
68229: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68230: LD_ADDR_VAR 0 64
68234: PUSH
68235: LD_INT 1
68237: NEG
68238: PUSH
68239: LD_INT 2
68241: NEG
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 2
68249: NEG
68250: PUSH
68251: LD_INT 1
68253: NEG
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 2
68261: NEG
68262: PUSH
68263: LD_INT 2
68265: NEG
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: LIST
68275: ST_TO_ADDR
// end ; 2 :
68276: GO 71542
68278: LD_INT 2
68280: DOUBLE
68281: EQUAL
68282: IFTRUE 68286
68284: GO 71541
68286: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68287: LD_ADDR_VAR 0 29
68291: PUSH
68292: LD_INT 4
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 4
68304: PUSH
68305: LD_INT 1
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 5
68315: PUSH
68316: LD_INT 0
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 5
68325: PUSH
68326: LD_INT 1
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 4
68335: PUSH
68336: LD_INT 1
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 3
68345: PUSH
68346: LD_INT 0
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 3
68355: PUSH
68356: LD_INT 1
68358: NEG
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 3
68366: PUSH
68367: LD_INT 2
68369: NEG
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 5
68377: PUSH
68378: LD_INT 2
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 3
68387: PUSH
68388: LD_INT 3
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 3
68397: PUSH
68398: LD_INT 2
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 4
68407: PUSH
68408: LD_INT 3
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 4
68417: PUSH
68418: LD_INT 4
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 3
68427: PUSH
68428: LD_INT 4
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 2
68437: PUSH
68438: LD_INT 3
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 2
68447: PUSH
68448: LD_INT 2
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 4
68457: PUSH
68458: LD_INT 2
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 2
68467: PUSH
68468: LD_INT 4
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 0
68477: PUSH
68478: LD_INT 4
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 0
68487: PUSH
68488: LD_INT 3
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 1
68497: PUSH
68498: LD_INT 4
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 1
68507: PUSH
68508: LD_INT 5
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 0
68517: PUSH
68518: LD_INT 5
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 1
68527: NEG
68528: PUSH
68529: LD_INT 4
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 1
68538: NEG
68539: PUSH
68540: LD_INT 3
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 2
68549: PUSH
68550: LD_INT 5
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 2
68559: NEG
68560: PUSH
68561: LD_INT 3
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 3
68570: NEG
68571: PUSH
68572: LD_INT 0
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 3
68581: NEG
68582: PUSH
68583: LD_INT 1
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 2
68593: NEG
68594: PUSH
68595: LD_INT 0
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 2
68604: NEG
68605: PUSH
68606: LD_INT 1
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 3
68615: NEG
68616: PUSH
68617: LD_INT 1
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 4
68626: NEG
68627: PUSH
68628: LD_INT 0
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 4
68637: NEG
68638: PUSH
68639: LD_INT 1
68641: NEG
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 4
68649: NEG
68650: PUSH
68651: LD_INT 2
68653: NEG
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 2
68661: NEG
68662: PUSH
68663: LD_INT 2
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 4
68672: NEG
68673: PUSH
68674: LD_INT 4
68676: NEG
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 4
68684: NEG
68685: PUSH
68686: LD_INT 5
68688: NEG
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 3
68696: NEG
68697: PUSH
68698: LD_INT 4
68700: NEG
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 3
68708: NEG
68709: PUSH
68710: LD_INT 3
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 4
68720: NEG
68721: PUSH
68722: LD_INT 3
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 5
68732: NEG
68733: PUSH
68734: LD_INT 4
68736: NEG
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 5
68744: NEG
68745: PUSH
68746: LD_INT 5
68748: NEG
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 3
68756: NEG
68757: PUSH
68758: LD_INT 5
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 5
68768: NEG
68769: PUSH
68770: LD_INT 3
68772: NEG
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68825: LD_ADDR_VAR 0 30
68829: PUSH
68830: LD_INT 4
68832: PUSH
68833: LD_INT 4
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 4
68842: PUSH
68843: LD_INT 3
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 5
68852: PUSH
68853: LD_INT 4
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 5
68862: PUSH
68863: LD_INT 5
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 4
68872: PUSH
68873: LD_INT 5
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 3
68882: PUSH
68883: LD_INT 4
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 3
68892: PUSH
68893: LD_INT 3
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 5
68902: PUSH
68903: LD_INT 3
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 3
68912: PUSH
68913: LD_INT 5
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 0
68922: PUSH
68923: LD_INT 3
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 0
68932: PUSH
68933: LD_INT 2
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 1
68942: PUSH
68943: LD_INT 3
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 1
68952: PUSH
68953: LD_INT 4
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 0
68962: PUSH
68963: LD_INT 4
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 1
68972: NEG
68973: PUSH
68974: LD_INT 3
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 1
68983: NEG
68984: PUSH
68985: LD_INT 2
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 2
68994: PUSH
68995: LD_INT 4
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 2
69004: NEG
69005: PUSH
69006: LD_INT 2
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_INT 4
69015: NEG
69016: PUSH
69017: LD_INT 0
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 4
69026: NEG
69027: PUSH
69028: LD_INT 1
69030: NEG
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 3
69038: NEG
69039: PUSH
69040: LD_INT 0
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 3
69049: NEG
69050: PUSH
69051: LD_INT 1
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 4
69060: NEG
69061: PUSH
69062: LD_INT 1
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 5
69071: NEG
69072: PUSH
69073: LD_INT 0
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 5
69082: NEG
69083: PUSH
69084: LD_INT 1
69086: NEG
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 5
69094: NEG
69095: PUSH
69096: LD_INT 2
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 3
69106: NEG
69107: PUSH
69108: LD_INT 2
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 3
69117: NEG
69118: PUSH
69119: LD_INT 3
69121: NEG
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 3
69129: NEG
69130: PUSH
69131: LD_INT 4
69133: NEG
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 2
69141: NEG
69142: PUSH
69143: LD_INT 3
69145: NEG
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 2
69153: NEG
69154: PUSH
69155: LD_INT 2
69157: NEG
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 3
69165: NEG
69166: PUSH
69167: LD_INT 2
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 4
69177: NEG
69178: PUSH
69179: LD_INT 3
69181: NEG
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 4
69189: NEG
69190: PUSH
69191: LD_INT 4
69193: NEG
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 2
69201: NEG
69202: PUSH
69203: LD_INT 4
69205: NEG
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 4
69213: NEG
69214: PUSH
69215: LD_INT 2
69217: NEG
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 0
69225: PUSH
69226: LD_INT 4
69228: NEG
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 0
69236: PUSH
69237: LD_INT 5
69239: NEG
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 1
69247: PUSH
69248: LD_INT 4
69250: NEG
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 1
69258: PUSH
69259: LD_INT 3
69261: NEG
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 0
69269: PUSH
69270: LD_INT 3
69272: NEG
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 1
69280: NEG
69281: PUSH
69282: LD_INT 4
69284: NEG
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 1
69292: NEG
69293: PUSH
69294: LD_INT 5
69296: NEG
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 2
69304: PUSH
69305: LD_INT 3
69307: NEG
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 2
69315: NEG
69316: PUSH
69317: LD_INT 5
69319: NEG
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69372: LD_ADDR_VAR 0 31
69376: PUSH
69377: LD_INT 0
69379: PUSH
69380: LD_INT 4
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 0
69389: PUSH
69390: LD_INT 3
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 1
69399: PUSH
69400: LD_INT 4
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 1
69409: PUSH
69410: LD_INT 5
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 0
69419: PUSH
69420: LD_INT 5
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 1
69429: NEG
69430: PUSH
69431: LD_INT 4
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 1
69440: NEG
69441: PUSH
69442: LD_INT 3
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 2
69451: PUSH
69452: LD_INT 5
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 2
69461: NEG
69462: PUSH
69463: LD_INT 3
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 3
69472: NEG
69473: PUSH
69474: LD_INT 0
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: PUSH
69481: LD_INT 3
69483: NEG
69484: PUSH
69485: LD_INT 1
69487: NEG
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 2
69495: NEG
69496: PUSH
69497: LD_INT 0
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PUSH
69504: LD_INT 2
69506: NEG
69507: PUSH
69508: LD_INT 1
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 3
69517: NEG
69518: PUSH
69519: LD_INT 1
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: LD_INT 4
69528: NEG
69529: PUSH
69530: LD_INT 0
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 4
69539: NEG
69540: PUSH
69541: LD_INT 1
69543: NEG
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 4
69551: NEG
69552: PUSH
69553: LD_INT 2
69555: NEG
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 2
69563: NEG
69564: PUSH
69565: LD_INT 2
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 4
69574: NEG
69575: PUSH
69576: LD_INT 4
69578: NEG
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 4
69586: NEG
69587: PUSH
69588: LD_INT 5
69590: NEG
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 3
69598: NEG
69599: PUSH
69600: LD_INT 4
69602: NEG
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 3
69610: NEG
69611: PUSH
69612: LD_INT 3
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 4
69622: NEG
69623: PUSH
69624: LD_INT 3
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 5
69634: NEG
69635: PUSH
69636: LD_INT 4
69638: NEG
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 5
69646: NEG
69647: PUSH
69648: LD_INT 5
69650: NEG
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 3
69658: NEG
69659: PUSH
69660: LD_INT 5
69662: NEG
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 5
69670: NEG
69671: PUSH
69672: LD_INT 3
69674: NEG
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 0
69682: PUSH
69683: LD_INT 3
69685: NEG
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: PUSH
69691: LD_INT 0
69693: PUSH
69694: LD_INT 4
69696: NEG
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 1
69704: PUSH
69705: LD_INT 3
69707: NEG
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PUSH
69713: LD_INT 1
69715: PUSH
69716: LD_INT 2
69718: NEG
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 0
69726: PUSH
69727: LD_INT 2
69729: NEG
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 1
69737: NEG
69738: PUSH
69739: LD_INT 3
69741: NEG
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 1
69749: NEG
69750: PUSH
69751: LD_INT 4
69753: NEG
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 2
69761: PUSH
69762: LD_INT 2
69764: NEG
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 2
69772: NEG
69773: PUSH
69774: LD_INT 4
69776: NEG
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 4
69784: PUSH
69785: LD_INT 0
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 4
69794: PUSH
69795: LD_INT 1
69797: NEG
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 5
69805: PUSH
69806: LD_INT 0
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 5
69815: PUSH
69816: LD_INT 1
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 4
69825: PUSH
69826: LD_INT 1
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 3
69835: PUSH
69836: LD_INT 0
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 3
69845: PUSH
69846: LD_INT 1
69848: NEG
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 3
69856: PUSH
69857: LD_INT 2
69859: NEG
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 5
69867: PUSH
69868: LD_INT 2
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69922: LD_ADDR_VAR 0 32
69926: PUSH
69927: LD_INT 4
69929: NEG
69930: PUSH
69931: LD_INT 0
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 4
69940: NEG
69941: PUSH
69942: LD_INT 1
69944: NEG
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 3
69952: NEG
69953: PUSH
69954: LD_INT 0
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 3
69963: NEG
69964: PUSH
69965: LD_INT 1
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 4
69974: NEG
69975: PUSH
69976: LD_INT 1
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 5
69985: NEG
69986: PUSH
69987: LD_INT 0
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 5
69996: NEG
69997: PUSH
69998: LD_INT 1
70000: NEG
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 5
70008: NEG
70009: PUSH
70010: LD_INT 2
70012: NEG
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 3
70020: NEG
70021: PUSH
70022: LD_INT 2
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 3
70031: NEG
70032: PUSH
70033: LD_INT 3
70035: NEG
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 3
70043: NEG
70044: PUSH
70045: LD_INT 4
70047: NEG
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 2
70055: NEG
70056: PUSH
70057: LD_INT 3
70059: NEG
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 2
70067: NEG
70068: PUSH
70069: LD_INT 2
70071: NEG
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 3
70079: NEG
70080: PUSH
70081: LD_INT 2
70083: NEG
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 4
70091: NEG
70092: PUSH
70093: LD_INT 3
70095: NEG
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 4
70103: NEG
70104: PUSH
70105: LD_INT 4
70107: NEG
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 2
70115: NEG
70116: PUSH
70117: LD_INT 4
70119: NEG
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 4
70127: NEG
70128: PUSH
70129: LD_INT 2
70131: NEG
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 0
70139: PUSH
70140: LD_INT 4
70142: NEG
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 0
70150: PUSH
70151: LD_INT 5
70153: NEG
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 1
70161: PUSH
70162: LD_INT 4
70164: NEG
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 1
70172: PUSH
70173: LD_INT 3
70175: NEG
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: LD_INT 3
70186: NEG
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 1
70194: NEG
70195: PUSH
70196: LD_INT 4
70198: NEG
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 1
70206: NEG
70207: PUSH
70208: LD_INT 5
70210: NEG
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 2
70218: PUSH
70219: LD_INT 3
70221: NEG
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 2
70229: NEG
70230: PUSH
70231: LD_INT 5
70233: NEG
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 3
70241: PUSH
70242: LD_INT 0
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 3
70251: PUSH
70252: LD_INT 1
70254: NEG
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 4
70262: PUSH
70263: LD_INT 0
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 4
70272: PUSH
70273: LD_INT 1
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 3
70282: PUSH
70283: LD_INT 1
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 2
70292: PUSH
70293: LD_INT 0
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 2
70302: PUSH
70303: LD_INT 1
70305: NEG
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 2
70313: PUSH
70314: LD_INT 2
70316: NEG
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: LD_INT 4
70324: PUSH
70325: LD_INT 2
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 4
70334: PUSH
70335: LD_INT 4
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 4
70344: PUSH
70345: LD_INT 3
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 5
70354: PUSH
70355: LD_INT 4
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 5
70364: PUSH
70365: LD_INT 5
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 4
70374: PUSH
70375: LD_INT 5
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 3
70384: PUSH
70385: LD_INT 4
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 3
70394: PUSH
70395: LD_INT 3
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 5
70404: PUSH
70405: LD_INT 3
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 3
70414: PUSH
70415: LD_INT 5
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70469: LD_ADDR_VAR 0 33
70473: PUSH
70474: LD_INT 4
70476: NEG
70477: PUSH
70478: LD_INT 4
70480: NEG
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 4
70488: NEG
70489: PUSH
70490: LD_INT 5
70492: NEG
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 3
70500: NEG
70501: PUSH
70502: LD_INT 4
70504: NEG
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 3
70512: NEG
70513: PUSH
70514: LD_INT 3
70516: NEG
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 4
70524: NEG
70525: PUSH
70526: LD_INT 3
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 5
70536: NEG
70537: PUSH
70538: LD_INT 4
70540: NEG
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 5
70548: NEG
70549: PUSH
70550: LD_INT 5
70552: NEG
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 3
70560: NEG
70561: PUSH
70562: LD_INT 5
70564: NEG
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 5
70572: NEG
70573: PUSH
70574: LD_INT 3
70576: NEG
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 0
70584: PUSH
70585: LD_INT 3
70587: NEG
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: LD_INT 0
70595: PUSH
70596: LD_INT 4
70598: NEG
70599: PUSH
70600: EMPTY
70601: LIST
70602: LIST
70603: PUSH
70604: LD_INT 1
70606: PUSH
70607: LD_INT 3
70609: NEG
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: LD_INT 1
70617: PUSH
70618: LD_INT 2
70620: NEG
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: LD_INT 0
70628: PUSH
70629: LD_INT 2
70631: NEG
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 1
70639: NEG
70640: PUSH
70641: LD_INT 3
70643: NEG
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: LD_INT 1
70651: NEG
70652: PUSH
70653: LD_INT 4
70655: NEG
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 2
70663: PUSH
70664: LD_INT 2
70666: NEG
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 2
70674: NEG
70675: PUSH
70676: LD_INT 4
70678: NEG
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: LD_INT 4
70686: PUSH
70687: LD_INT 0
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 4
70696: PUSH
70697: LD_INT 1
70699: NEG
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 5
70707: PUSH
70708: LD_INT 0
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 5
70717: PUSH
70718: LD_INT 1
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 4
70727: PUSH
70728: LD_INT 1
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 3
70737: PUSH
70738: LD_INT 0
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: PUSH
70745: LD_INT 3
70747: PUSH
70748: LD_INT 1
70750: NEG
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 3
70758: PUSH
70759: LD_INT 2
70761: NEG
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 5
70769: PUSH
70770: LD_INT 2
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 3
70779: PUSH
70780: LD_INT 3
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 3
70789: PUSH
70790: LD_INT 2
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 4
70799: PUSH
70800: LD_INT 3
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 4
70809: PUSH
70810: LD_INT 4
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 3
70819: PUSH
70820: LD_INT 4
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 2
70829: PUSH
70830: LD_INT 3
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 2
70839: PUSH
70840: LD_INT 2
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PUSH
70847: LD_INT 4
70849: PUSH
70850: LD_INT 2
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 2
70859: PUSH
70860: LD_INT 4
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 0
70869: PUSH
70870: LD_INT 4
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 0
70879: PUSH
70880: LD_INT 3
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 1
70889: PUSH
70890: LD_INT 4
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 1
70899: PUSH
70900: LD_INT 5
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: LD_INT 0
70909: PUSH
70910: LD_INT 5
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: LD_INT 1
70919: NEG
70920: PUSH
70921: LD_INT 4
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 1
70930: NEG
70931: PUSH
70932: LD_INT 3
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 2
70941: PUSH
70942: LD_INT 5
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: PUSH
70949: LD_INT 2
70951: NEG
70952: PUSH
70953: LD_INT 3
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71007: LD_ADDR_VAR 0 34
71011: PUSH
71012: LD_INT 0
71014: PUSH
71015: LD_INT 4
71017: NEG
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 0
71025: PUSH
71026: LD_INT 5
71028: NEG
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 1
71036: PUSH
71037: LD_INT 4
71039: NEG
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 1
71047: PUSH
71048: LD_INT 3
71050: NEG
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 0
71058: PUSH
71059: LD_INT 3
71061: NEG
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 1
71069: NEG
71070: PUSH
71071: LD_INT 4
71073: NEG
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_INT 1
71081: NEG
71082: PUSH
71083: LD_INT 5
71085: NEG
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 2
71093: PUSH
71094: LD_INT 3
71096: NEG
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 2
71104: NEG
71105: PUSH
71106: LD_INT 5
71108: NEG
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 3
71116: PUSH
71117: LD_INT 0
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 3
71126: PUSH
71127: LD_INT 1
71129: NEG
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: PUSH
71135: LD_INT 4
71137: PUSH
71138: LD_INT 0
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 4
71147: PUSH
71148: LD_INT 1
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 3
71157: PUSH
71158: LD_INT 1
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PUSH
71165: LD_INT 2
71167: PUSH
71168: LD_INT 0
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: LD_INT 2
71177: PUSH
71178: LD_INT 1
71180: NEG
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 2
71188: PUSH
71189: LD_INT 2
71191: NEG
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 4
71199: PUSH
71200: LD_INT 2
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: PUSH
71207: LD_INT 4
71209: PUSH
71210: LD_INT 4
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 4
71219: PUSH
71220: LD_INT 3
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 5
71229: PUSH
71230: LD_INT 4
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 5
71239: PUSH
71240: LD_INT 5
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 4
71249: PUSH
71250: LD_INT 5
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 3
71259: PUSH
71260: LD_INT 4
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 3
71269: PUSH
71270: LD_INT 3
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 5
71279: PUSH
71280: LD_INT 3
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 3
71289: PUSH
71290: LD_INT 5
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: LD_INT 0
71299: PUSH
71300: LD_INT 3
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 0
71309: PUSH
71310: LD_INT 2
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 1
71319: PUSH
71320: LD_INT 3
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: PUSH
71327: LD_INT 1
71329: PUSH
71330: LD_INT 4
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: LD_INT 0
71339: PUSH
71340: LD_INT 4
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: PUSH
71347: LD_INT 1
71349: NEG
71350: PUSH
71351: LD_INT 3
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 1
71360: NEG
71361: PUSH
71362: LD_INT 2
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 2
71371: PUSH
71372: LD_INT 4
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 2
71381: NEG
71382: PUSH
71383: LD_INT 2
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: LD_INT 4
71392: NEG
71393: PUSH
71394: LD_INT 0
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 4
71403: NEG
71404: PUSH
71405: LD_INT 1
71407: NEG
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: LD_INT 3
71415: NEG
71416: PUSH
71417: LD_INT 0
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 3
71426: NEG
71427: PUSH
71428: LD_INT 1
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: LD_INT 4
71437: NEG
71438: PUSH
71439: LD_INT 1
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 5
71448: NEG
71449: PUSH
71450: LD_INT 0
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: LD_INT 5
71459: NEG
71460: PUSH
71461: LD_INT 1
71463: NEG
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 5
71471: NEG
71472: PUSH
71473: LD_INT 2
71475: NEG
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 3
71483: NEG
71484: PUSH
71485: LD_INT 2
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: ST_TO_ADDR
// end ; end ;
71539: GO 71542
71541: POP
// case btype of b_depot , b_warehouse :
71542: LD_VAR 0 1
71546: PUSH
71547: LD_INT 0
71549: DOUBLE
71550: EQUAL
71551: IFTRUE 71561
71553: LD_INT 1
71555: DOUBLE
71556: EQUAL
71557: IFTRUE 71561
71559: GO 71762
71561: POP
// case nation of nation_american :
71562: LD_VAR 0 5
71566: PUSH
71567: LD_INT 1
71569: DOUBLE
71570: EQUAL
71571: IFTRUE 71575
71573: GO 71631
71575: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71576: LD_ADDR_VAR 0 9
71580: PUSH
71581: LD_VAR 0 11
71585: PUSH
71586: LD_VAR 0 12
71590: PUSH
71591: LD_VAR 0 13
71595: PUSH
71596: LD_VAR 0 14
71600: PUSH
71601: LD_VAR 0 15
71605: PUSH
71606: LD_VAR 0 16
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: PUSH
71619: LD_VAR 0 4
71623: PUSH
71624: LD_INT 1
71626: PLUS
71627: ARRAY
71628: ST_TO_ADDR
71629: GO 71760
71631: LD_INT 2
71633: DOUBLE
71634: EQUAL
71635: IFTRUE 71639
71637: GO 71695
71639: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71640: LD_ADDR_VAR 0 9
71644: PUSH
71645: LD_VAR 0 17
71649: PUSH
71650: LD_VAR 0 18
71654: PUSH
71655: LD_VAR 0 19
71659: PUSH
71660: LD_VAR 0 20
71664: PUSH
71665: LD_VAR 0 21
71669: PUSH
71670: LD_VAR 0 22
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: LIST
71682: PUSH
71683: LD_VAR 0 4
71687: PUSH
71688: LD_INT 1
71690: PLUS
71691: ARRAY
71692: ST_TO_ADDR
71693: GO 71760
71695: LD_INT 3
71697: DOUBLE
71698: EQUAL
71699: IFTRUE 71703
71701: GO 71759
71703: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71704: LD_ADDR_VAR 0 9
71708: PUSH
71709: LD_VAR 0 23
71713: PUSH
71714: LD_VAR 0 24
71718: PUSH
71719: LD_VAR 0 25
71723: PUSH
71724: LD_VAR 0 26
71728: PUSH
71729: LD_VAR 0 27
71733: PUSH
71734: LD_VAR 0 28
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: PUSH
71747: LD_VAR 0 4
71751: PUSH
71752: LD_INT 1
71754: PLUS
71755: ARRAY
71756: ST_TO_ADDR
71757: GO 71760
71759: POP
71760: GO 72315
71762: LD_INT 2
71764: DOUBLE
71765: EQUAL
71766: IFTRUE 71776
71768: LD_INT 3
71770: DOUBLE
71771: EQUAL
71772: IFTRUE 71776
71774: GO 71832
71776: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71777: LD_ADDR_VAR 0 9
71781: PUSH
71782: LD_VAR 0 29
71786: PUSH
71787: LD_VAR 0 30
71791: PUSH
71792: LD_VAR 0 31
71796: PUSH
71797: LD_VAR 0 32
71801: PUSH
71802: LD_VAR 0 33
71806: PUSH
71807: LD_VAR 0 34
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: PUSH
71820: LD_VAR 0 4
71824: PUSH
71825: LD_INT 1
71827: PLUS
71828: ARRAY
71829: ST_TO_ADDR
71830: GO 72315
71832: LD_INT 16
71834: DOUBLE
71835: EQUAL
71836: IFTRUE 71894
71838: LD_INT 17
71840: DOUBLE
71841: EQUAL
71842: IFTRUE 71894
71844: LD_INT 18
71846: DOUBLE
71847: EQUAL
71848: IFTRUE 71894
71850: LD_INT 19
71852: DOUBLE
71853: EQUAL
71854: IFTRUE 71894
71856: LD_INT 22
71858: DOUBLE
71859: EQUAL
71860: IFTRUE 71894
71862: LD_INT 20
71864: DOUBLE
71865: EQUAL
71866: IFTRUE 71894
71868: LD_INT 21
71870: DOUBLE
71871: EQUAL
71872: IFTRUE 71894
71874: LD_INT 23
71876: DOUBLE
71877: EQUAL
71878: IFTRUE 71894
71880: LD_INT 24
71882: DOUBLE
71883: EQUAL
71884: IFTRUE 71894
71886: LD_INT 25
71888: DOUBLE
71889: EQUAL
71890: IFTRUE 71894
71892: GO 71950
71894: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71895: LD_ADDR_VAR 0 9
71899: PUSH
71900: LD_VAR 0 35
71904: PUSH
71905: LD_VAR 0 36
71909: PUSH
71910: LD_VAR 0 37
71914: PUSH
71915: LD_VAR 0 38
71919: PUSH
71920: LD_VAR 0 39
71924: PUSH
71925: LD_VAR 0 40
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: PUSH
71938: LD_VAR 0 4
71942: PUSH
71943: LD_INT 1
71945: PLUS
71946: ARRAY
71947: ST_TO_ADDR
71948: GO 72315
71950: LD_INT 6
71952: DOUBLE
71953: EQUAL
71954: IFTRUE 72006
71956: LD_INT 7
71958: DOUBLE
71959: EQUAL
71960: IFTRUE 72006
71962: LD_INT 8
71964: DOUBLE
71965: EQUAL
71966: IFTRUE 72006
71968: LD_INT 13
71970: DOUBLE
71971: EQUAL
71972: IFTRUE 72006
71974: LD_INT 12
71976: DOUBLE
71977: EQUAL
71978: IFTRUE 72006
71980: LD_INT 15
71982: DOUBLE
71983: EQUAL
71984: IFTRUE 72006
71986: LD_INT 11
71988: DOUBLE
71989: EQUAL
71990: IFTRUE 72006
71992: LD_INT 14
71994: DOUBLE
71995: EQUAL
71996: IFTRUE 72006
71998: LD_INT 10
72000: DOUBLE
72001: EQUAL
72002: IFTRUE 72006
72004: GO 72062
72006: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72007: LD_ADDR_VAR 0 9
72011: PUSH
72012: LD_VAR 0 41
72016: PUSH
72017: LD_VAR 0 42
72021: PUSH
72022: LD_VAR 0 43
72026: PUSH
72027: LD_VAR 0 44
72031: PUSH
72032: LD_VAR 0 45
72036: PUSH
72037: LD_VAR 0 46
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: PUSH
72050: LD_VAR 0 4
72054: PUSH
72055: LD_INT 1
72057: PLUS
72058: ARRAY
72059: ST_TO_ADDR
72060: GO 72315
72062: LD_INT 36
72064: DOUBLE
72065: EQUAL
72066: IFTRUE 72070
72068: GO 72126
72070: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72071: LD_ADDR_VAR 0 9
72075: PUSH
72076: LD_VAR 0 47
72080: PUSH
72081: LD_VAR 0 48
72085: PUSH
72086: LD_VAR 0 49
72090: PUSH
72091: LD_VAR 0 50
72095: PUSH
72096: LD_VAR 0 51
72100: PUSH
72101: LD_VAR 0 52
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: PUSH
72114: LD_VAR 0 4
72118: PUSH
72119: LD_INT 1
72121: PLUS
72122: ARRAY
72123: ST_TO_ADDR
72124: GO 72315
72126: LD_INT 4
72128: DOUBLE
72129: EQUAL
72130: IFTRUE 72152
72132: LD_INT 5
72134: DOUBLE
72135: EQUAL
72136: IFTRUE 72152
72138: LD_INT 34
72140: DOUBLE
72141: EQUAL
72142: IFTRUE 72152
72144: LD_INT 37
72146: DOUBLE
72147: EQUAL
72148: IFTRUE 72152
72150: GO 72208
72152: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72153: LD_ADDR_VAR 0 9
72157: PUSH
72158: LD_VAR 0 53
72162: PUSH
72163: LD_VAR 0 54
72167: PUSH
72168: LD_VAR 0 55
72172: PUSH
72173: LD_VAR 0 56
72177: PUSH
72178: LD_VAR 0 57
72182: PUSH
72183: LD_VAR 0 58
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: PUSH
72196: LD_VAR 0 4
72200: PUSH
72201: LD_INT 1
72203: PLUS
72204: ARRAY
72205: ST_TO_ADDR
72206: GO 72315
72208: LD_INT 31
72210: DOUBLE
72211: EQUAL
72212: IFTRUE 72258
72214: LD_INT 32
72216: DOUBLE
72217: EQUAL
72218: IFTRUE 72258
72220: LD_INT 33
72222: DOUBLE
72223: EQUAL
72224: IFTRUE 72258
72226: LD_INT 27
72228: DOUBLE
72229: EQUAL
72230: IFTRUE 72258
72232: LD_INT 26
72234: DOUBLE
72235: EQUAL
72236: IFTRUE 72258
72238: LD_INT 28
72240: DOUBLE
72241: EQUAL
72242: IFTRUE 72258
72244: LD_INT 29
72246: DOUBLE
72247: EQUAL
72248: IFTRUE 72258
72250: LD_INT 30
72252: DOUBLE
72253: EQUAL
72254: IFTRUE 72258
72256: GO 72314
72258: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72259: LD_ADDR_VAR 0 9
72263: PUSH
72264: LD_VAR 0 59
72268: PUSH
72269: LD_VAR 0 60
72273: PUSH
72274: LD_VAR 0 61
72278: PUSH
72279: LD_VAR 0 62
72283: PUSH
72284: LD_VAR 0 63
72288: PUSH
72289: LD_VAR 0 64
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: LIST
72298: LIST
72299: LIST
72300: LIST
72301: PUSH
72302: LD_VAR 0 4
72306: PUSH
72307: LD_INT 1
72309: PLUS
72310: ARRAY
72311: ST_TO_ADDR
72312: GO 72315
72314: POP
// temp_list2 = [ ] ;
72315: LD_ADDR_VAR 0 10
72319: PUSH
72320: EMPTY
72321: ST_TO_ADDR
// for i in temp_list do
72322: LD_ADDR_VAR 0 8
72326: PUSH
72327: LD_VAR 0 9
72331: PUSH
72332: FOR_IN
72333: IFFALSE 72385
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72335: LD_ADDR_VAR 0 10
72339: PUSH
72340: LD_VAR 0 10
72344: PUSH
72345: LD_VAR 0 8
72349: PUSH
72350: LD_INT 1
72352: ARRAY
72353: PUSH
72354: LD_VAR 0 2
72358: PLUS
72359: PUSH
72360: LD_VAR 0 8
72364: PUSH
72365: LD_INT 2
72367: ARRAY
72368: PUSH
72369: LD_VAR 0 3
72373: PLUS
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: PUSH
72379: EMPTY
72380: LIST
72381: ADD
72382: ST_TO_ADDR
72383: GO 72332
72385: POP
72386: POP
// result = temp_list2 ;
72387: LD_ADDR_VAR 0 7
72391: PUSH
72392: LD_VAR 0 10
72396: ST_TO_ADDR
// end ;
72397: LD_VAR 0 7
72401: RET
// export function EnemyInRange ( unit , dist ) ; begin
72402: LD_INT 0
72404: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72405: LD_ADDR_VAR 0 3
72409: PUSH
72410: LD_VAR 0 1
72414: PPUSH
72415: CALL_OW 255
72419: PPUSH
72420: LD_VAR 0 1
72424: PPUSH
72425: CALL_OW 250
72429: PPUSH
72430: LD_VAR 0 1
72434: PPUSH
72435: CALL_OW 251
72439: PPUSH
72440: LD_VAR 0 2
72444: PPUSH
72445: CALL 45804 0 4
72449: PUSH
72450: LD_INT 4
72452: ARRAY
72453: ST_TO_ADDR
// end ;
72454: LD_VAR 0 3
72458: RET
// export function PlayerSeeMe ( unit ) ; begin
72459: LD_INT 0
72461: PPUSH
// result := See ( your_side , unit ) ;
72462: LD_ADDR_VAR 0 2
72466: PUSH
72467: LD_OWVAR 2
72471: PPUSH
72472: LD_VAR 0 1
72476: PPUSH
72477: CALL_OW 292
72481: ST_TO_ADDR
// end ;
72482: LD_VAR 0 2
72486: RET
// export function ReverseDir ( unit ) ; begin
72487: LD_INT 0
72489: PPUSH
// if not unit then
72490: LD_VAR 0 1
72494: NOT
72495: IFFALSE 72499
// exit ;
72497: GO 72522
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72499: LD_ADDR_VAR 0 2
72503: PUSH
72504: LD_VAR 0 1
72508: PPUSH
72509: CALL_OW 254
72513: PUSH
72514: LD_INT 3
72516: PLUS
72517: PUSH
72518: LD_INT 6
72520: MOD
72521: ST_TO_ADDR
// end ;
72522: LD_VAR 0 2
72526: RET
// export function ReverseArray ( array ) ; var i ; begin
72527: LD_INT 0
72529: PPUSH
72530: PPUSH
// if not array then
72531: LD_VAR 0 1
72535: NOT
72536: IFFALSE 72540
// exit ;
72538: GO 72595
// result := [ ] ;
72540: LD_ADDR_VAR 0 2
72544: PUSH
72545: EMPTY
72546: ST_TO_ADDR
// for i := array downto 1 do
72547: LD_ADDR_VAR 0 3
72551: PUSH
72552: DOUBLE
72553: LD_VAR 0 1
72557: INC
72558: ST_TO_ADDR
72559: LD_INT 1
72561: PUSH
72562: FOR_DOWNTO
72563: IFFALSE 72593
// result := Join ( result , array [ i ] ) ;
72565: LD_ADDR_VAR 0 2
72569: PUSH
72570: LD_VAR 0 2
72574: PPUSH
72575: LD_VAR 0 1
72579: PUSH
72580: LD_VAR 0 3
72584: ARRAY
72585: PPUSH
72586: CALL 77239 0 2
72590: ST_TO_ADDR
72591: GO 72562
72593: POP
72594: POP
// end ;
72595: LD_VAR 0 2
72599: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72600: LD_INT 0
72602: PPUSH
72603: PPUSH
72604: PPUSH
72605: PPUSH
72606: PPUSH
72607: PPUSH
// if not unit or not hexes then
72608: LD_VAR 0 1
72612: NOT
72613: PUSH
72614: LD_VAR 0 2
72618: NOT
72619: OR
72620: IFFALSE 72624
// exit ;
72622: GO 72747
// dist := 9999 ;
72624: LD_ADDR_VAR 0 5
72628: PUSH
72629: LD_INT 9999
72631: ST_TO_ADDR
// for i = 1 to hexes do
72632: LD_ADDR_VAR 0 4
72636: PUSH
72637: DOUBLE
72638: LD_INT 1
72640: DEC
72641: ST_TO_ADDR
72642: LD_VAR 0 2
72646: PUSH
72647: FOR_TO
72648: IFFALSE 72735
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72650: LD_ADDR_VAR 0 6
72654: PUSH
72655: LD_VAR 0 1
72659: PPUSH
72660: LD_VAR 0 2
72664: PUSH
72665: LD_VAR 0 4
72669: ARRAY
72670: PUSH
72671: LD_INT 1
72673: ARRAY
72674: PPUSH
72675: LD_VAR 0 2
72679: PUSH
72680: LD_VAR 0 4
72684: ARRAY
72685: PUSH
72686: LD_INT 2
72688: ARRAY
72689: PPUSH
72690: CALL_OW 297
72694: ST_TO_ADDR
// if tdist < dist then
72695: LD_VAR 0 6
72699: PUSH
72700: LD_VAR 0 5
72704: LESS
72705: IFFALSE 72733
// begin hex := hexes [ i ] ;
72707: LD_ADDR_VAR 0 8
72711: PUSH
72712: LD_VAR 0 2
72716: PUSH
72717: LD_VAR 0 4
72721: ARRAY
72722: ST_TO_ADDR
// dist := tdist ;
72723: LD_ADDR_VAR 0 5
72727: PUSH
72728: LD_VAR 0 6
72732: ST_TO_ADDR
// end ; end ;
72733: GO 72647
72735: POP
72736: POP
// result := hex ;
72737: LD_ADDR_VAR 0 3
72741: PUSH
72742: LD_VAR 0 8
72746: ST_TO_ADDR
// end ;
72747: LD_VAR 0 3
72751: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72752: LD_INT 0
72754: PPUSH
72755: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72756: LD_VAR 0 1
72760: NOT
72761: PUSH
72762: LD_VAR 0 1
72766: PUSH
72767: LD_INT 21
72769: PUSH
72770: LD_INT 2
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: LD_INT 23
72779: PUSH
72780: LD_INT 2
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: PUSH
72787: EMPTY
72788: LIST
72789: LIST
72790: PPUSH
72791: CALL_OW 69
72795: IN
72796: NOT
72797: OR
72798: IFFALSE 72802
// exit ;
72800: GO 72849
// for i = 1 to 3 do
72802: LD_ADDR_VAR 0 3
72806: PUSH
72807: DOUBLE
72808: LD_INT 1
72810: DEC
72811: ST_TO_ADDR
72812: LD_INT 3
72814: PUSH
72815: FOR_TO
72816: IFFALSE 72847
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72818: LD_VAR 0 1
72822: PPUSH
72823: CALL_OW 250
72827: PPUSH
72828: LD_VAR 0 1
72832: PPUSH
72833: CALL_OW 251
72837: PPUSH
72838: LD_INT 1
72840: PPUSH
72841: CALL_OW 453
72845: GO 72815
72847: POP
72848: POP
// end ;
72849: LD_VAR 0 2
72853: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72854: LD_INT 0
72856: PPUSH
72857: PPUSH
72858: PPUSH
72859: PPUSH
72860: PPUSH
72861: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72862: LD_VAR 0 1
72866: NOT
72867: PUSH
72868: LD_VAR 0 2
72872: NOT
72873: OR
72874: PUSH
72875: LD_VAR 0 1
72879: PPUSH
72880: CALL_OW 314
72884: OR
72885: IFFALSE 72889
// exit ;
72887: GO 73356
// if GetLives ( i ) < 250 then
72889: LD_VAR 0 4
72893: PPUSH
72894: CALL_OW 256
72898: PUSH
72899: LD_INT 250
72901: LESS
72902: IFFALSE 72915
// begin ComAutodestruct ( i ) ;
72904: LD_VAR 0 4
72908: PPUSH
72909: CALL 72752 0 1
// exit ;
72913: GO 73356
// end ; x := GetX ( enemy_unit ) ;
72915: LD_ADDR_VAR 0 7
72919: PUSH
72920: LD_VAR 0 2
72924: PPUSH
72925: CALL_OW 250
72929: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72930: LD_ADDR_VAR 0 8
72934: PUSH
72935: LD_VAR 0 2
72939: PPUSH
72940: CALL_OW 251
72944: ST_TO_ADDR
// if not x or not y then
72945: LD_VAR 0 7
72949: NOT
72950: PUSH
72951: LD_VAR 0 8
72955: NOT
72956: OR
72957: IFFALSE 72961
// exit ;
72959: GO 73356
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72961: LD_ADDR_VAR 0 6
72965: PUSH
72966: LD_VAR 0 7
72970: PPUSH
72971: LD_INT 0
72973: PPUSH
72974: LD_INT 4
72976: PPUSH
72977: CALL_OW 272
72981: PUSH
72982: LD_VAR 0 8
72986: PPUSH
72987: LD_INT 0
72989: PPUSH
72990: LD_INT 4
72992: PPUSH
72993: CALL_OW 273
72997: PUSH
72998: EMPTY
72999: LIST
73000: LIST
73001: PUSH
73002: LD_VAR 0 7
73006: PPUSH
73007: LD_INT 1
73009: PPUSH
73010: LD_INT 4
73012: PPUSH
73013: CALL_OW 272
73017: PUSH
73018: LD_VAR 0 8
73022: PPUSH
73023: LD_INT 1
73025: PPUSH
73026: LD_INT 4
73028: PPUSH
73029: CALL_OW 273
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_VAR 0 7
73042: PPUSH
73043: LD_INT 2
73045: PPUSH
73046: LD_INT 4
73048: PPUSH
73049: CALL_OW 272
73053: PUSH
73054: LD_VAR 0 8
73058: PPUSH
73059: LD_INT 2
73061: PPUSH
73062: LD_INT 4
73064: PPUSH
73065: CALL_OW 273
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_VAR 0 7
73078: PPUSH
73079: LD_INT 3
73081: PPUSH
73082: LD_INT 4
73084: PPUSH
73085: CALL_OW 272
73089: PUSH
73090: LD_VAR 0 8
73094: PPUSH
73095: LD_INT 3
73097: PPUSH
73098: LD_INT 4
73100: PPUSH
73101: CALL_OW 273
73105: PUSH
73106: EMPTY
73107: LIST
73108: LIST
73109: PUSH
73110: LD_VAR 0 7
73114: PPUSH
73115: LD_INT 4
73117: PPUSH
73118: LD_INT 4
73120: PPUSH
73121: CALL_OW 272
73125: PUSH
73126: LD_VAR 0 8
73130: PPUSH
73131: LD_INT 4
73133: PPUSH
73134: LD_INT 4
73136: PPUSH
73137: CALL_OW 273
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: PUSH
73146: LD_VAR 0 7
73150: PPUSH
73151: LD_INT 5
73153: PPUSH
73154: LD_INT 4
73156: PPUSH
73157: CALL_OW 272
73161: PUSH
73162: LD_VAR 0 8
73166: PPUSH
73167: LD_INT 5
73169: PPUSH
73170: LD_INT 4
73172: PPUSH
73173: CALL_OW 273
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: PUSH
73182: EMPTY
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: ST_TO_ADDR
// for i = tmp downto 1 do
73190: LD_ADDR_VAR 0 4
73194: PUSH
73195: DOUBLE
73196: LD_VAR 0 6
73200: INC
73201: ST_TO_ADDR
73202: LD_INT 1
73204: PUSH
73205: FOR_DOWNTO
73206: IFFALSE 73307
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73208: LD_VAR 0 6
73212: PUSH
73213: LD_VAR 0 4
73217: ARRAY
73218: PUSH
73219: LD_INT 1
73221: ARRAY
73222: PPUSH
73223: LD_VAR 0 6
73227: PUSH
73228: LD_VAR 0 4
73232: ARRAY
73233: PUSH
73234: LD_INT 2
73236: ARRAY
73237: PPUSH
73238: CALL_OW 488
73242: NOT
73243: PUSH
73244: LD_VAR 0 6
73248: PUSH
73249: LD_VAR 0 4
73253: ARRAY
73254: PUSH
73255: LD_INT 1
73257: ARRAY
73258: PPUSH
73259: LD_VAR 0 6
73263: PUSH
73264: LD_VAR 0 4
73268: ARRAY
73269: PUSH
73270: LD_INT 2
73272: ARRAY
73273: PPUSH
73274: CALL_OW 428
73278: PUSH
73279: LD_INT 0
73281: NONEQUAL
73282: OR
73283: IFFALSE 73305
// tmp := Delete ( tmp , i ) ;
73285: LD_ADDR_VAR 0 6
73289: PUSH
73290: LD_VAR 0 6
73294: PPUSH
73295: LD_VAR 0 4
73299: PPUSH
73300: CALL_OW 3
73304: ST_TO_ADDR
73305: GO 73205
73307: POP
73308: POP
// j := GetClosestHex ( unit , tmp ) ;
73309: LD_ADDR_VAR 0 5
73313: PUSH
73314: LD_VAR 0 1
73318: PPUSH
73319: LD_VAR 0 6
73323: PPUSH
73324: CALL 72600 0 2
73328: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73329: LD_VAR 0 1
73333: PPUSH
73334: LD_VAR 0 5
73338: PUSH
73339: LD_INT 1
73341: ARRAY
73342: PPUSH
73343: LD_VAR 0 5
73347: PUSH
73348: LD_INT 2
73350: ARRAY
73351: PPUSH
73352: CALL_OW 111
// end ;
73356: LD_VAR 0 3
73360: RET
// export function PrepareApemanSoldier ( ) ; begin
73361: LD_INT 0
73363: PPUSH
// uc_nation := 0 ;
73364: LD_ADDR_OWVAR 21
73368: PUSH
73369: LD_INT 0
73371: ST_TO_ADDR
// hc_sex := sex_male ;
73372: LD_ADDR_OWVAR 27
73376: PUSH
73377: LD_INT 1
73379: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73380: LD_ADDR_OWVAR 28
73384: PUSH
73385: LD_INT 15
73387: ST_TO_ADDR
// hc_gallery :=  ;
73388: LD_ADDR_OWVAR 33
73392: PUSH
73393: LD_STRING 
73395: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73396: LD_ADDR_OWVAR 31
73400: PUSH
73401: LD_INT 0
73403: PPUSH
73404: LD_INT 3
73406: PPUSH
73407: CALL_OW 12
73411: PUSH
73412: LD_INT 0
73414: PPUSH
73415: LD_INT 3
73417: PPUSH
73418: CALL_OW 12
73422: PUSH
73423: LD_INT 0
73425: PUSH
73426: LD_INT 0
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: ST_TO_ADDR
// end ;
73435: LD_VAR 0 1
73439: RET
// export function PrepareApemanEngineer ( ) ; begin
73440: LD_INT 0
73442: PPUSH
// uc_nation := 0 ;
73443: LD_ADDR_OWVAR 21
73447: PUSH
73448: LD_INT 0
73450: ST_TO_ADDR
// hc_sex := sex_male ;
73451: LD_ADDR_OWVAR 27
73455: PUSH
73456: LD_INT 1
73458: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73459: LD_ADDR_OWVAR 28
73463: PUSH
73464: LD_INT 16
73466: ST_TO_ADDR
// hc_gallery :=  ;
73467: LD_ADDR_OWVAR 33
73471: PUSH
73472: LD_STRING 
73474: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73475: LD_ADDR_OWVAR 31
73479: PUSH
73480: LD_INT 0
73482: PPUSH
73483: LD_INT 3
73485: PPUSH
73486: CALL_OW 12
73490: PUSH
73491: LD_INT 0
73493: PPUSH
73494: LD_INT 3
73496: PPUSH
73497: CALL_OW 12
73501: PUSH
73502: LD_INT 0
73504: PUSH
73505: LD_INT 0
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: LIST
73512: LIST
73513: ST_TO_ADDR
// end ;
73514: LD_VAR 0 1
73518: RET
// export function PrepareApeman ( agressivity ) ; begin
73519: LD_INT 0
73521: PPUSH
// uc_side := 0 ;
73522: LD_ADDR_OWVAR 20
73526: PUSH
73527: LD_INT 0
73529: ST_TO_ADDR
// uc_nation := 0 ;
73530: LD_ADDR_OWVAR 21
73534: PUSH
73535: LD_INT 0
73537: ST_TO_ADDR
// hc_sex := sex_male ;
73538: LD_ADDR_OWVAR 27
73542: PUSH
73543: LD_INT 1
73545: ST_TO_ADDR
// hc_class := class_apeman ;
73546: LD_ADDR_OWVAR 28
73550: PUSH
73551: LD_INT 12
73553: ST_TO_ADDR
// hc_gallery :=  ;
73554: LD_ADDR_OWVAR 33
73558: PUSH
73559: LD_STRING 
73561: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73562: LD_ADDR_OWVAR 35
73566: PUSH
73567: LD_VAR 0 1
73571: NEG
73572: PPUSH
73573: LD_VAR 0 1
73577: PPUSH
73578: CALL_OW 12
73582: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73583: LD_ADDR_OWVAR 31
73587: PUSH
73588: LD_INT 0
73590: PPUSH
73591: LD_INT 3
73593: PPUSH
73594: CALL_OW 12
73598: PUSH
73599: LD_INT 0
73601: PPUSH
73602: LD_INT 3
73604: PPUSH
73605: CALL_OW 12
73609: PUSH
73610: LD_INT 0
73612: PUSH
73613: LD_INT 0
73615: PUSH
73616: EMPTY
73617: LIST
73618: LIST
73619: LIST
73620: LIST
73621: ST_TO_ADDR
// end ;
73622: LD_VAR 0 2
73626: RET
// export function PrepareTiger ( agressivity ) ; begin
73627: LD_INT 0
73629: PPUSH
// uc_side := 0 ;
73630: LD_ADDR_OWVAR 20
73634: PUSH
73635: LD_INT 0
73637: ST_TO_ADDR
// uc_nation := 0 ;
73638: LD_ADDR_OWVAR 21
73642: PUSH
73643: LD_INT 0
73645: ST_TO_ADDR
// hc_class := class_tiger ;
73646: LD_ADDR_OWVAR 28
73650: PUSH
73651: LD_INT 14
73653: ST_TO_ADDR
// hc_gallery :=  ;
73654: LD_ADDR_OWVAR 33
73658: PUSH
73659: LD_STRING 
73661: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73662: LD_ADDR_OWVAR 35
73666: PUSH
73667: LD_VAR 0 1
73671: NEG
73672: PPUSH
73673: LD_VAR 0 1
73677: PPUSH
73678: CALL_OW 12
73682: ST_TO_ADDR
// end ;
73683: LD_VAR 0 2
73687: RET
// export function PrepareEnchidna ( ) ; begin
73688: LD_INT 0
73690: PPUSH
// uc_side := 0 ;
73691: LD_ADDR_OWVAR 20
73695: PUSH
73696: LD_INT 0
73698: ST_TO_ADDR
// uc_nation := 0 ;
73699: LD_ADDR_OWVAR 21
73703: PUSH
73704: LD_INT 0
73706: ST_TO_ADDR
// hc_class := class_baggie ;
73707: LD_ADDR_OWVAR 28
73711: PUSH
73712: LD_INT 13
73714: ST_TO_ADDR
// hc_gallery :=  ;
73715: LD_ADDR_OWVAR 33
73719: PUSH
73720: LD_STRING 
73722: ST_TO_ADDR
// end ;
73723: LD_VAR 0 1
73727: RET
// export function PrepareFrog ( ) ; begin
73728: LD_INT 0
73730: PPUSH
// uc_side := 0 ;
73731: LD_ADDR_OWVAR 20
73735: PUSH
73736: LD_INT 0
73738: ST_TO_ADDR
// uc_nation := 0 ;
73739: LD_ADDR_OWVAR 21
73743: PUSH
73744: LD_INT 0
73746: ST_TO_ADDR
// hc_class := class_frog ;
73747: LD_ADDR_OWVAR 28
73751: PUSH
73752: LD_INT 19
73754: ST_TO_ADDR
// hc_gallery :=  ;
73755: LD_ADDR_OWVAR 33
73759: PUSH
73760: LD_STRING 
73762: ST_TO_ADDR
// end ;
73763: LD_VAR 0 1
73767: RET
// export function PrepareFish ( ) ; begin
73768: LD_INT 0
73770: PPUSH
// uc_side := 0 ;
73771: LD_ADDR_OWVAR 20
73775: PUSH
73776: LD_INT 0
73778: ST_TO_ADDR
// uc_nation := 0 ;
73779: LD_ADDR_OWVAR 21
73783: PUSH
73784: LD_INT 0
73786: ST_TO_ADDR
// hc_class := class_fish ;
73787: LD_ADDR_OWVAR 28
73791: PUSH
73792: LD_INT 20
73794: ST_TO_ADDR
// hc_gallery :=  ;
73795: LD_ADDR_OWVAR 33
73799: PUSH
73800: LD_STRING 
73802: ST_TO_ADDR
// end ;
73803: LD_VAR 0 1
73807: RET
// export function PrepareBird ( ) ; begin
73808: LD_INT 0
73810: PPUSH
// uc_side := 0 ;
73811: LD_ADDR_OWVAR 20
73815: PUSH
73816: LD_INT 0
73818: ST_TO_ADDR
// uc_nation := 0 ;
73819: LD_ADDR_OWVAR 21
73823: PUSH
73824: LD_INT 0
73826: ST_TO_ADDR
// hc_class := class_phororhacos ;
73827: LD_ADDR_OWVAR 28
73831: PUSH
73832: LD_INT 18
73834: ST_TO_ADDR
// hc_gallery :=  ;
73835: LD_ADDR_OWVAR 33
73839: PUSH
73840: LD_STRING 
73842: ST_TO_ADDR
// end ;
73843: LD_VAR 0 1
73847: RET
// export function PrepareHorse ( ) ; begin
73848: LD_INT 0
73850: PPUSH
// uc_side := 0 ;
73851: LD_ADDR_OWVAR 20
73855: PUSH
73856: LD_INT 0
73858: ST_TO_ADDR
// uc_nation := 0 ;
73859: LD_ADDR_OWVAR 21
73863: PUSH
73864: LD_INT 0
73866: ST_TO_ADDR
// hc_class := class_horse ;
73867: LD_ADDR_OWVAR 28
73871: PUSH
73872: LD_INT 21
73874: ST_TO_ADDR
// hc_gallery :=  ;
73875: LD_ADDR_OWVAR 33
73879: PUSH
73880: LD_STRING 
73882: ST_TO_ADDR
// end ;
73883: LD_VAR 0 1
73887: RET
// export function PrepareMastodont ( ) ; begin
73888: LD_INT 0
73890: PPUSH
// uc_side := 0 ;
73891: LD_ADDR_OWVAR 20
73895: PUSH
73896: LD_INT 0
73898: ST_TO_ADDR
// uc_nation := 0 ;
73899: LD_ADDR_OWVAR 21
73903: PUSH
73904: LD_INT 0
73906: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73907: LD_ADDR_OWVAR 37
73911: PUSH
73912: LD_INT 31
73914: ST_TO_ADDR
// vc_control := control_rider ;
73915: LD_ADDR_OWVAR 38
73919: PUSH
73920: LD_INT 4
73922: ST_TO_ADDR
// end ;
73923: LD_VAR 0 1
73927: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73928: LD_INT 0
73930: PPUSH
73931: PPUSH
73932: PPUSH
// uc_side = 0 ;
73933: LD_ADDR_OWVAR 20
73937: PUSH
73938: LD_INT 0
73940: ST_TO_ADDR
// uc_nation = 0 ;
73941: LD_ADDR_OWVAR 21
73945: PUSH
73946: LD_INT 0
73948: ST_TO_ADDR
// InitHc_All ( ) ;
73949: CALL_OW 584
// InitVc ;
73953: CALL_OW 20
// if mastodonts then
73957: LD_VAR 0 6
73961: IFFALSE 74028
// for i = 1 to mastodonts do
73963: LD_ADDR_VAR 0 11
73967: PUSH
73968: DOUBLE
73969: LD_INT 1
73971: DEC
73972: ST_TO_ADDR
73973: LD_VAR 0 6
73977: PUSH
73978: FOR_TO
73979: IFFALSE 74026
// begin vc_chassis := 31 ;
73981: LD_ADDR_OWVAR 37
73985: PUSH
73986: LD_INT 31
73988: ST_TO_ADDR
// vc_control := control_rider ;
73989: LD_ADDR_OWVAR 38
73993: PUSH
73994: LD_INT 4
73996: ST_TO_ADDR
// animal := CreateVehicle ;
73997: LD_ADDR_VAR 0 12
74001: PUSH
74002: CALL_OW 45
74006: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74007: LD_VAR 0 12
74011: PPUSH
74012: LD_VAR 0 8
74016: PPUSH
74017: LD_INT 0
74019: PPUSH
74020: CALL 76156 0 3
// end ;
74024: GO 73978
74026: POP
74027: POP
// if horses then
74028: LD_VAR 0 5
74032: IFFALSE 74099
// for i = 1 to horses do
74034: LD_ADDR_VAR 0 11
74038: PUSH
74039: DOUBLE
74040: LD_INT 1
74042: DEC
74043: ST_TO_ADDR
74044: LD_VAR 0 5
74048: PUSH
74049: FOR_TO
74050: IFFALSE 74097
// begin hc_class := 21 ;
74052: LD_ADDR_OWVAR 28
74056: PUSH
74057: LD_INT 21
74059: ST_TO_ADDR
// hc_gallery :=  ;
74060: LD_ADDR_OWVAR 33
74064: PUSH
74065: LD_STRING 
74067: ST_TO_ADDR
// animal := CreateHuman ;
74068: LD_ADDR_VAR 0 12
74072: PUSH
74073: CALL_OW 44
74077: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74078: LD_VAR 0 12
74082: PPUSH
74083: LD_VAR 0 8
74087: PPUSH
74088: LD_INT 0
74090: PPUSH
74091: CALL 76156 0 3
// end ;
74095: GO 74049
74097: POP
74098: POP
// if birds then
74099: LD_VAR 0 1
74103: IFFALSE 74170
// for i = 1 to birds do
74105: LD_ADDR_VAR 0 11
74109: PUSH
74110: DOUBLE
74111: LD_INT 1
74113: DEC
74114: ST_TO_ADDR
74115: LD_VAR 0 1
74119: PUSH
74120: FOR_TO
74121: IFFALSE 74168
// begin hc_class = 18 ;
74123: LD_ADDR_OWVAR 28
74127: PUSH
74128: LD_INT 18
74130: ST_TO_ADDR
// hc_gallery =  ;
74131: LD_ADDR_OWVAR 33
74135: PUSH
74136: LD_STRING 
74138: ST_TO_ADDR
// animal := CreateHuman ;
74139: LD_ADDR_VAR 0 12
74143: PUSH
74144: CALL_OW 44
74148: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74149: LD_VAR 0 12
74153: PPUSH
74154: LD_VAR 0 8
74158: PPUSH
74159: LD_INT 0
74161: PPUSH
74162: CALL 76156 0 3
// end ;
74166: GO 74120
74168: POP
74169: POP
// if tigers then
74170: LD_VAR 0 2
74174: IFFALSE 74258
// for i = 1 to tigers do
74176: LD_ADDR_VAR 0 11
74180: PUSH
74181: DOUBLE
74182: LD_INT 1
74184: DEC
74185: ST_TO_ADDR
74186: LD_VAR 0 2
74190: PUSH
74191: FOR_TO
74192: IFFALSE 74256
// begin hc_class = class_tiger ;
74194: LD_ADDR_OWVAR 28
74198: PUSH
74199: LD_INT 14
74201: ST_TO_ADDR
// hc_gallery =  ;
74202: LD_ADDR_OWVAR 33
74206: PUSH
74207: LD_STRING 
74209: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74210: LD_ADDR_OWVAR 35
74214: PUSH
74215: LD_INT 7
74217: NEG
74218: PPUSH
74219: LD_INT 7
74221: PPUSH
74222: CALL_OW 12
74226: ST_TO_ADDR
// animal := CreateHuman ;
74227: LD_ADDR_VAR 0 12
74231: PUSH
74232: CALL_OW 44
74236: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74237: LD_VAR 0 12
74241: PPUSH
74242: LD_VAR 0 8
74246: PPUSH
74247: LD_INT 0
74249: PPUSH
74250: CALL 76156 0 3
// end ;
74254: GO 74191
74256: POP
74257: POP
// if apemans then
74258: LD_VAR 0 3
74262: IFFALSE 74385
// for i = 1 to apemans do
74264: LD_ADDR_VAR 0 11
74268: PUSH
74269: DOUBLE
74270: LD_INT 1
74272: DEC
74273: ST_TO_ADDR
74274: LD_VAR 0 3
74278: PUSH
74279: FOR_TO
74280: IFFALSE 74383
// begin hc_class = class_apeman ;
74282: LD_ADDR_OWVAR 28
74286: PUSH
74287: LD_INT 12
74289: ST_TO_ADDR
// hc_gallery =  ;
74290: LD_ADDR_OWVAR 33
74294: PUSH
74295: LD_STRING 
74297: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74298: LD_ADDR_OWVAR 35
74302: PUSH
74303: LD_INT 2
74305: NEG
74306: PPUSH
74307: LD_INT 2
74309: PPUSH
74310: CALL_OW 12
74314: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74315: LD_ADDR_OWVAR 31
74319: PUSH
74320: LD_INT 1
74322: PPUSH
74323: LD_INT 3
74325: PPUSH
74326: CALL_OW 12
74330: PUSH
74331: LD_INT 1
74333: PPUSH
74334: LD_INT 3
74336: PPUSH
74337: CALL_OW 12
74341: PUSH
74342: LD_INT 0
74344: PUSH
74345: LD_INT 0
74347: PUSH
74348: EMPTY
74349: LIST
74350: LIST
74351: LIST
74352: LIST
74353: ST_TO_ADDR
// animal := CreateHuman ;
74354: LD_ADDR_VAR 0 12
74358: PUSH
74359: CALL_OW 44
74363: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74364: LD_VAR 0 12
74368: PPUSH
74369: LD_VAR 0 8
74373: PPUSH
74374: LD_INT 0
74376: PPUSH
74377: CALL 76156 0 3
// end ;
74381: GO 74279
74383: POP
74384: POP
// if enchidnas then
74385: LD_VAR 0 4
74389: IFFALSE 74456
// for i = 1 to enchidnas do
74391: LD_ADDR_VAR 0 11
74395: PUSH
74396: DOUBLE
74397: LD_INT 1
74399: DEC
74400: ST_TO_ADDR
74401: LD_VAR 0 4
74405: PUSH
74406: FOR_TO
74407: IFFALSE 74454
// begin hc_class = 13 ;
74409: LD_ADDR_OWVAR 28
74413: PUSH
74414: LD_INT 13
74416: ST_TO_ADDR
// hc_gallery =  ;
74417: LD_ADDR_OWVAR 33
74421: PUSH
74422: LD_STRING 
74424: ST_TO_ADDR
// animal := CreateHuman ;
74425: LD_ADDR_VAR 0 12
74429: PUSH
74430: CALL_OW 44
74434: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74435: LD_VAR 0 12
74439: PPUSH
74440: LD_VAR 0 8
74444: PPUSH
74445: LD_INT 0
74447: PPUSH
74448: CALL 76156 0 3
// end ;
74452: GO 74406
74454: POP
74455: POP
// if fishes then
74456: LD_VAR 0 7
74460: IFFALSE 74527
// for i = 1 to fishes do
74462: LD_ADDR_VAR 0 11
74466: PUSH
74467: DOUBLE
74468: LD_INT 1
74470: DEC
74471: ST_TO_ADDR
74472: LD_VAR 0 7
74476: PUSH
74477: FOR_TO
74478: IFFALSE 74525
// begin hc_class = 20 ;
74480: LD_ADDR_OWVAR 28
74484: PUSH
74485: LD_INT 20
74487: ST_TO_ADDR
// hc_gallery =  ;
74488: LD_ADDR_OWVAR 33
74492: PUSH
74493: LD_STRING 
74495: ST_TO_ADDR
// animal := CreateHuman ;
74496: LD_ADDR_VAR 0 12
74500: PUSH
74501: CALL_OW 44
74505: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74506: LD_VAR 0 12
74510: PPUSH
74511: LD_VAR 0 9
74515: PPUSH
74516: LD_INT 0
74518: PPUSH
74519: CALL 76156 0 3
// end ;
74523: GO 74477
74525: POP
74526: POP
// end ;
74527: LD_VAR 0 10
74531: RET
// export function WantHeal ( sci , unit ) ; begin
74532: LD_INT 0
74534: PPUSH
// if GetTaskList ( sci ) > 0 then
74535: LD_VAR 0 1
74539: PPUSH
74540: CALL_OW 437
74544: PUSH
74545: LD_INT 0
74547: GREATER
74548: IFFALSE 74618
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74550: LD_VAR 0 1
74554: PPUSH
74555: CALL_OW 437
74559: PUSH
74560: LD_INT 1
74562: ARRAY
74563: PUSH
74564: LD_INT 1
74566: ARRAY
74567: PUSH
74568: LD_STRING l
74570: EQUAL
74571: PUSH
74572: LD_VAR 0 1
74576: PPUSH
74577: CALL_OW 437
74581: PUSH
74582: LD_INT 1
74584: ARRAY
74585: PUSH
74586: LD_INT 4
74588: ARRAY
74589: PUSH
74590: LD_VAR 0 2
74594: EQUAL
74595: AND
74596: IFFALSE 74608
// result := true else
74598: LD_ADDR_VAR 0 3
74602: PUSH
74603: LD_INT 1
74605: ST_TO_ADDR
74606: GO 74616
// result := false ;
74608: LD_ADDR_VAR 0 3
74612: PUSH
74613: LD_INT 0
74615: ST_TO_ADDR
// end else
74616: GO 74626
// result := false ;
74618: LD_ADDR_VAR 0 3
74622: PUSH
74623: LD_INT 0
74625: ST_TO_ADDR
// end ;
74626: LD_VAR 0 3
74630: RET
// export function HealTarget ( sci ) ; begin
74631: LD_INT 0
74633: PPUSH
// if not sci then
74634: LD_VAR 0 1
74638: NOT
74639: IFFALSE 74643
// exit ;
74641: GO 74708
// result := 0 ;
74643: LD_ADDR_VAR 0 2
74647: PUSH
74648: LD_INT 0
74650: ST_TO_ADDR
// if GetTaskList ( sci ) then
74651: LD_VAR 0 1
74655: PPUSH
74656: CALL_OW 437
74660: IFFALSE 74708
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74662: LD_VAR 0 1
74666: PPUSH
74667: CALL_OW 437
74671: PUSH
74672: LD_INT 1
74674: ARRAY
74675: PUSH
74676: LD_INT 1
74678: ARRAY
74679: PUSH
74680: LD_STRING l
74682: EQUAL
74683: IFFALSE 74708
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74685: LD_ADDR_VAR 0 2
74689: PUSH
74690: LD_VAR 0 1
74694: PPUSH
74695: CALL_OW 437
74699: PUSH
74700: LD_INT 1
74702: ARRAY
74703: PUSH
74704: LD_INT 4
74706: ARRAY
74707: ST_TO_ADDR
// end ;
74708: LD_VAR 0 2
74712: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74713: LD_INT 0
74715: PPUSH
74716: PPUSH
74717: PPUSH
74718: PPUSH
// if not base_units then
74719: LD_VAR 0 1
74723: NOT
74724: IFFALSE 74728
// exit ;
74726: GO 74815
// result := false ;
74728: LD_ADDR_VAR 0 2
74732: PUSH
74733: LD_INT 0
74735: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74736: LD_ADDR_VAR 0 5
74740: PUSH
74741: LD_VAR 0 1
74745: PPUSH
74746: LD_INT 21
74748: PUSH
74749: LD_INT 3
74751: PUSH
74752: EMPTY
74753: LIST
74754: LIST
74755: PPUSH
74756: CALL_OW 72
74760: ST_TO_ADDR
// if not tmp then
74761: LD_VAR 0 5
74765: NOT
74766: IFFALSE 74770
// exit ;
74768: GO 74815
// for i in tmp do
74770: LD_ADDR_VAR 0 3
74774: PUSH
74775: LD_VAR 0 5
74779: PUSH
74780: FOR_IN
74781: IFFALSE 74813
// begin result := EnemyInRange ( i , 22 ) ;
74783: LD_ADDR_VAR 0 2
74787: PUSH
74788: LD_VAR 0 3
74792: PPUSH
74793: LD_INT 22
74795: PPUSH
74796: CALL 72402 0 2
74800: ST_TO_ADDR
// if result then
74801: LD_VAR 0 2
74805: IFFALSE 74811
// exit ;
74807: POP
74808: POP
74809: GO 74815
// end ;
74811: GO 74780
74813: POP
74814: POP
// end ;
74815: LD_VAR 0 2
74819: RET
// export function FilterByTag ( units , tag ) ; begin
74820: LD_INT 0
74822: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74823: LD_ADDR_VAR 0 3
74827: PUSH
74828: LD_VAR 0 1
74832: PPUSH
74833: LD_INT 120
74835: PUSH
74836: LD_VAR 0 2
74840: PUSH
74841: EMPTY
74842: LIST
74843: LIST
74844: PPUSH
74845: CALL_OW 72
74849: ST_TO_ADDR
// end ;
74850: LD_VAR 0 3
74854: RET
// export function IsDriver ( un ) ; begin
74855: LD_INT 0
74857: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74858: LD_ADDR_VAR 0 2
74862: PUSH
74863: LD_VAR 0 1
74867: PUSH
74868: LD_INT 55
74870: PUSH
74871: EMPTY
74872: LIST
74873: PPUSH
74874: CALL_OW 69
74878: IN
74879: ST_TO_ADDR
// end ;
74880: LD_VAR 0 2
74884: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74885: LD_INT 0
74887: PPUSH
74888: PPUSH
// list := [ ] ;
74889: LD_ADDR_VAR 0 5
74893: PUSH
74894: EMPTY
74895: ST_TO_ADDR
// case d of 0 :
74896: LD_VAR 0 3
74900: PUSH
74901: LD_INT 0
74903: DOUBLE
74904: EQUAL
74905: IFTRUE 74909
74907: GO 75042
74909: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74910: LD_ADDR_VAR 0 5
74914: PUSH
74915: LD_VAR 0 1
74919: PUSH
74920: LD_INT 4
74922: MINUS
74923: PUSH
74924: LD_VAR 0 2
74928: PUSH
74929: LD_INT 4
74931: MINUS
74932: PUSH
74933: LD_INT 2
74935: PUSH
74936: EMPTY
74937: LIST
74938: LIST
74939: LIST
74940: PUSH
74941: LD_VAR 0 1
74945: PUSH
74946: LD_INT 3
74948: MINUS
74949: PUSH
74950: LD_VAR 0 2
74954: PUSH
74955: LD_INT 1
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: LIST
74962: PUSH
74963: LD_VAR 0 1
74967: PUSH
74968: LD_INT 4
74970: PLUS
74971: PUSH
74972: LD_VAR 0 2
74976: PUSH
74977: LD_INT 4
74979: PUSH
74980: EMPTY
74981: LIST
74982: LIST
74983: LIST
74984: PUSH
74985: LD_VAR 0 1
74989: PUSH
74990: LD_INT 3
74992: PLUS
74993: PUSH
74994: LD_VAR 0 2
74998: PUSH
74999: LD_INT 3
75001: PLUS
75002: PUSH
75003: LD_INT 5
75005: PUSH
75006: EMPTY
75007: LIST
75008: LIST
75009: LIST
75010: PUSH
75011: LD_VAR 0 1
75015: PUSH
75016: LD_VAR 0 2
75020: PUSH
75021: LD_INT 4
75023: PLUS
75024: PUSH
75025: LD_INT 0
75027: PUSH
75028: EMPTY
75029: LIST
75030: LIST
75031: LIST
75032: PUSH
75033: EMPTY
75034: LIST
75035: LIST
75036: LIST
75037: LIST
75038: LIST
75039: ST_TO_ADDR
// end ; 1 :
75040: GO 75740
75042: LD_INT 1
75044: DOUBLE
75045: EQUAL
75046: IFTRUE 75050
75048: GO 75183
75050: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75051: LD_ADDR_VAR 0 5
75055: PUSH
75056: LD_VAR 0 1
75060: PUSH
75061: LD_VAR 0 2
75065: PUSH
75066: LD_INT 4
75068: MINUS
75069: PUSH
75070: LD_INT 3
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: LIST
75077: PUSH
75078: LD_VAR 0 1
75082: PUSH
75083: LD_INT 3
75085: MINUS
75086: PUSH
75087: LD_VAR 0 2
75091: PUSH
75092: LD_INT 3
75094: MINUS
75095: PUSH
75096: LD_INT 2
75098: PUSH
75099: EMPTY
75100: LIST
75101: LIST
75102: LIST
75103: PUSH
75104: LD_VAR 0 1
75108: PUSH
75109: LD_INT 4
75111: MINUS
75112: PUSH
75113: LD_VAR 0 2
75117: PUSH
75118: LD_INT 1
75120: PUSH
75121: EMPTY
75122: LIST
75123: LIST
75124: LIST
75125: PUSH
75126: LD_VAR 0 1
75130: PUSH
75131: LD_VAR 0 2
75135: PUSH
75136: LD_INT 3
75138: PLUS
75139: PUSH
75140: LD_INT 0
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: LIST
75147: PUSH
75148: LD_VAR 0 1
75152: PUSH
75153: LD_INT 4
75155: PLUS
75156: PUSH
75157: LD_VAR 0 2
75161: PUSH
75162: LD_INT 4
75164: PLUS
75165: PUSH
75166: LD_INT 5
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: LIST
75173: PUSH
75174: EMPTY
75175: LIST
75176: LIST
75177: LIST
75178: LIST
75179: LIST
75180: ST_TO_ADDR
// end ; 2 :
75181: GO 75740
75183: LD_INT 2
75185: DOUBLE
75186: EQUAL
75187: IFTRUE 75191
75189: GO 75320
75191: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75192: LD_ADDR_VAR 0 5
75196: PUSH
75197: LD_VAR 0 1
75201: PUSH
75202: LD_VAR 0 2
75206: PUSH
75207: LD_INT 3
75209: MINUS
75210: PUSH
75211: LD_INT 3
75213: PUSH
75214: EMPTY
75215: LIST
75216: LIST
75217: LIST
75218: PUSH
75219: LD_VAR 0 1
75223: PUSH
75224: LD_INT 4
75226: PLUS
75227: PUSH
75228: LD_VAR 0 2
75232: PUSH
75233: LD_INT 4
75235: PUSH
75236: EMPTY
75237: LIST
75238: LIST
75239: LIST
75240: PUSH
75241: LD_VAR 0 1
75245: PUSH
75246: LD_VAR 0 2
75250: PUSH
75251: LD_INT 4
75253: PLUS
75254: PUSH
75255: LD_INT 0
75257: PUSH
75258: EMPTY
75259: LIST
75260: LIST
75261: LIST
75262: PUSH
75263: LD_VAR 0 1
75267: PUSH
75268: LD_INT 3
75270: MINUS
75271: PUSH
75272: LD_VAR 0 2
75276: PUSH
75277: LD_INT 1
75279: PUSH
75280: EMPTY
75281: LIST
75282: LIST
75283: LIST
75284: PUSH
75285: LD_VAR 0 1
75289: PUSH
75290: LD_INT 4
75292: MINUS
75293: PUSH
75294: LD_VAR 0 2
75298: PUSH
75299: LD_INT 4
75301: MINUS
75302: PUSH
75303: LD_INT 2
75305: PUSH
75306: EMPTY
75307: LIST
75308: LIST
75309: LIST
75310: PUSH
75311: EMPTY
75312: LIST
75313: LIST
75314: LIST
75315: LIST
75316: LIST
75317: ST_TO_ADDR
// end ; 3 :
75318: GO 75740
75320: LD_INT 3
75322: DOUBLE
75323: EQUAL
75324: IFTRUE 75328
75326: GO 75461
75328: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75329: LD_ADDR_VAR 0 5
75333: PUSH
75334: LD_VAR 0 1
75338: PUSH
75339: LD_INT 3
75341: PLUS
75342: PUSH
75343: LD_VAR 0 2
75347: PUSH
75348: LD_INT 4
75350: PUSH
75351: EMPTY
75352: LIST
75353: LIST
75354: LIST
75355: PUSH
75356: LD_VAR 0 1
75360: PUSH
75361: LD_INT 4
75363: PLUS
75364: PUSH
75365: LD_VAR 0 2
75369: PUSH
75370: LD_INT 4
75372: PLUS
75373: PUSH
75374: LD_INT 5
75376: PUSH
75377: EMPTY
75378: LIST
75379: LIST
75380: LIST
75381: PUSH
75382: LD_VAR 0 1
75386: PUSH
75387: LD_INT 4
75389: MINUS
75390: PUSH
75391: LD_VAR 0 2
75395: PUSH
75396: LD_INT 1
75398: PUSH
75399: EMPTY
75400: LIST
75401: LIST
75402: LIST
75403: PUSH
75404: LD_VAR 0 1
75408: PUSH
75409: LD_VAR 0 2
75413: PUSH
75414: LD_INT 4
75416: MINUS
75417: PUSH
75418: LD_INT 3
75420: PUSH
75421: EMPTY
75422: LIST
75423: LIST
75424: LIST
75425: PUSH
75426: LD_VAR 0 1
75430: PUSH
75431: LD_INT 3
75433: MINUS
75434: PUSH
75435: LD_VAR 0 2
75439: PUSH
75440: LD_INT 3
75442: MINUS
75443: PUSH
75444: LD_INT 2
75446: PUSH
75447: EMPTY
75448: LIST
75449: LIST
75450: LIST
75451: PUSH
75452: EMPTY
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: ST_TO_ADDR
// end ; 4 :
75459: GO 75740
75461: LD_INT 4
75463: DOUBLE
75464: EQUAL
75465: IFTRUE 75469
75467: GO 75602
75469: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75470: LD_ADDR_VAR 0 5
75474: PUSH
75475: LD_VAR 0 1
75479: PUSH
75480: LD_VAR 0 2
75484: PUSH
75485: LD_INT 4
75487: PLUS
75488: PUSH
75489: LD_INT 0
75491: PUSH
75492: EMPTY
75493: LIST
75494: LIST
75495: LIST
75496: PUSH
75497: LD_VAR 0 1
75501: PUSH
75502: LD_INT 3
75504: PLUS
75505: PUSH
75506: LD_VAR 0 2
75510: PUSH
75511: LD_INT 3
75513: PLUS
75514: PUSH
75515: LD_INT 5
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: LIST
75522: PUSH
75523: LD_VAR 0 1
75527: PUSH
75528: LD_INT 4
75530: PLUS
75531: PUSH
75532: LD_VAR 0 2
75536: PUSH
75537: LD_INT 4
75539: PUSH
75540: EMPTY
75541: LIST
75542: LIST
75543: LIST
75544: PUSH
75545: LD_VAR 0 1
75549: PUSH
75550: LD_VAR 0 2
75554: PUSH
75555: LD_INT 3
75557: MINUS
75558: PUSH
75559: LD_INT 3
75561: PUSH
75562: EMPTY
75563: LIST
75564: LIST
75565: LIST
75566: PUSH
75567: LD_VAR 0 1
75571: PUSH
75572: LD_INT 4
75574: MINUS
75575: PUSH
75576: LD_VAR 0 2
75580: PUSH
75581: LD_INT 4
75583: MINUS
75584: PUSH
75585: LD_INT 2
75587: PUSH
75588: EMPTY
75589: LIST
75590: LIST
75591: LIST
75592: PUSH
75593: EMPTY
75594: LIST
75595: LIST
75596: LIST
75597: LIST
75598: LIST
75599: ST_TO_ADDR
// end ; 5 :
75600: GO 75740
75602: LD_INT 5
75604: DOUBLE
75605: EQUAL
75606: IFTRUE 75610
75608: GO 75739
75610: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75611: LD_ADDR_VAR 0 5
75615: PUSH
75616: LD_VAR 0 1
75620: PUSH
75621: LD_INT 4
75623: MINUS
75624: PUSH
75625: LD_VAR 0 2
75629: PUSH
75630: LD_INT 1
75632: PUSH
75633: EMPTY
75634: LIST
75635: LIST
75636: LIST
75637: PUSH
75638: LD_VAR 0 1
75642: PUSH
75643: LD_VAR 0 2
75647: PUSH
75648: LD_INT 4
75650: MINUS
75651: PUSH
75652: LD_INT 3
75654: PUSH
75655: EMPTY
75656: LIST
75657: LIST
75658: LIST
75659: PUSH
75660: LD_VAR 0 1
75664: PUSH
75665: LD_INT 4
75667: PLUS
75668: PUSH
75669: LD_VAR 0 2
75673: PUSH
75674: LD_INT 4
75676: PLUS
75677: PUSH
75678: LD_INT 5
75680: PUSH
75681: EMPTY
75682: LIST
75683: LIST
75684: LIST
75685: PUSH
75686: LD_VAR 0 1
75690: PUSH
75691: LD_INT 3
75693: PLUS
75694: PUSH
75695: LD_VAR 0 2
75699: PUSH
75700: LD_INT 4
75702: PUSH
75703: EMPTY
75704: LIST
75705: LIST
75706: LIST
75707: PUSH
75708: LD_VAR 0 1
75712: PUSH
75713: LD_VAR 0 2
75717: PUSH
75718: LD_INT 3
75720: PLUS
75721: PUSH
75722: LD_INT 0
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: LIST
75729: PUSH
75730: EMPTY
75731: LIST
75732: LIST
75733: LIST
75734: LIST
75735: LIST
75736: ST_TO_ADDR
// end ; end ;
75737: GO 75740
75739: POP
// result := list ;
75740: LD_ADDR_VAR 0 4
75744: PUSH
75745: LD_VAR 0 5
75749: ST_TO_ADDR
// end ;
75750: LD_VAR 0 4
75754: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75755: LD_INT 0
75757: PPUSH
75758: PPUSH
75759: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75760: LD_VAR 0 1
75764: NOT
75765: PUSH
75766: LD_VAR 0 2
75770: PUSH
75771: LD_INT 1
75773: PUSH
75774: LD_INT 2
75776: PUSH
75777: LD_INT 3
75779: PUSH
75780: LD_INT 4
75782: PUSH
75783: EMPTY
75784: LIST
75785: LIST
75786: LIST
75787: LIST
75788: IN
75789: NOT
75790: OR
75791: IFFALSE 75795
// exit ;
75793: GO 75878
// tmp := [ ] ;
75795: LD_ADDR_VAR 0 5
75799: PUSH
75800: EMPTY
75801: ST_TO_ADDR
// for i in units do
75802: LD_ADDR_VAR 0 4
75806: PUSH
75807: LD_VAR 0 1
75811: PUSH
75812: FOR_IN
75813: IFFALSE 75847
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75815: LD_ADDR_VAR 0 5
75819: PUSH
75820: LD_VAR 0 5
75824: PPUSH
75825: LD_VAR 0 4
75829: PPUSH
75830: LD_VAR 0 2
75834: PPUSH
75835: CALL_OW 259
75839: PPUSH
75840: CALL 77239 0 2
75844: ST_TO_ADDR
75845: GO 75812
75847: POP
75848: POP
// if not tmp then
75849: LD_VAR 0 5
75853: NOT
75854: IFFALSE 75858
// exit ;
75856: GO 75878
// result := SortListByListDesc ( units , tmp ) ;
75858: LD_ADDR_VAR 0 3
75862: PUSH
75863: LD_VAR 0 1
75867: PPUSH
75868: LD_VAR 0 5
75872: PPUSH
75873: CALL_OW 77
75877: ST_TO_ADDR
// end ;
75878: LD_VAR 0 3
75882: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75883: LD_INT 0
75885: PPUSH
75886: PPUSH
75887: PPUSH
// result := false ;
75888: LD_ADDR_VAR 0 3
75892: PUSH
75893: LD_INT 0
75895: ST_TO_ADDR
// if not building then
75896: LD_VAR 0 2
75900: NOT
75901: IFFALSE 75905
// exit ;
75903: GO 76043
// x := GetX ( building ) ;
75905: LD_ADDR_VAR 0 4
75909: PUSH
75910: LD_VAR 0 2
75914: PPUSH
75915: CALL_OW 250
75919: ST_TO_ADDR
// y := GetY ( building ) ;
75920: LD_ADDR_VAR 0 5
75924: PUSH
75925: LD_VAR 0 2
75929: PPUSH
75930: CALL_OW 251
75934: ST_TO_ADDR
// if not x or not y then
75935: LD_VAR 0 4
75939: NOT
75940: PUSH
75941: LD_VAR 0 5
75945: NOT
75946: OR
75947: IFFALSE 75951
// exit ;
75949: GO 76043
// if GetTaskList ( unit ) then
75951: LD_VAR 0 1
75955: PPUSH
75956: CALL_OW 437
75960: IFFALSE 76043
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75962: LD_STRING e
75964: PUSH
75965: LD_VAR 0 1
75969: PPUSH
75970: CALL_OW 437
75974: PUSH
75975: LD_INT 1
75977: ARRAY
75978: PUSH
75979: LD_INT 1
75981: ARRAY
75982: EQUAL
75983: PUSH
75984: LD_VAR 0 4
75988: PUSH
75989: LD_VAR 0 1
75993: PPUSH
75994: CALL_OW 437
75998: PUSH
75999: LD_INT 1
76001: ARRAY
76002: PUSH
76003: LD_INT 2
76005: ARRAY
76006: EQUAL
76007: AND
76008: PUSH
76009: LD_VAR 0 5
76013: PUSH
76014: LD_VAR 0 1
76018: PPUSH
76019: CALL_OW 437
76023: PUSH
76024: LD_INT 1
76026: ARRAY
76027: PUSH
76028: LD_INT 3
76030: ARRAY
76031: EQUAL
76032: AND
76033: IFFALSE 76043
// result := true end ;
76035: LD_ADDR_VAR 0 3
76039: PUSH
76040: LD_INT 1
76042: ST_TO_ADDR
// end ;
76043: LD_VAR 0 3
76047: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76048: LD_INT 0
76050: PPUSH
// result := false ;
76051: LD_ADDR_VAR 0 4
76055: PUSH
76056: LD_INT 0
76058: ST_TO_ADDR
// if GetTaskList ( unit ) then
76059: LD_VAR 0 1
76063: PPUSH
76064: CALL_OW 437
76068: IFFALSE 76151
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76070: LD_STRING M
76072: PUSH
76073: LD_VAR 0 1
76077: PPUSH
76078: CALL_OW 437
76082: PUSH
76083: LD_INT 1
76085: ARRAY
76086: PUSH
76087: LD_INT 1
76089: ARRAY
76090: EQUAL
76091: PUSH
76092: LD_VAR 0 2
76096: PUSH
76097: LD_VAR 0 1
76101: PPUSH
76102: CALL_OW 437
76106: PUSH
76107: LD_INT 1
76109: ARRAY
76110: PUSH
76111: LD_INT 2
76113: ARRAY
76114: EQUAL
76115: AND
76116: PUSH
76117: LD_VAR 0 3
76121: PUSH
76122: LD_VAR 0 1
76126: PPUSH
76127: CALL_OW 437
76131: PUSH
76132: LD_INT 1
76134: ARRAY
76135: PUSH
76136: LD_INT 3
76138: ARRAY
76139: EQUAL
76140: AND
76141: IFFALSE 76151
// result := true ;
76143: LD_ADDR_VAR 0 4
76147: PUSH
76148: LD_INT 1
76150: ST_TO_ADDR
// end ; end ;
76151: LD_VAR 0 4
76155: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76156: LD_INT 0
76158: PPUSH
76159: PPUSH
76160: PPUSH
76161: PPUSH
// if not unit or not area then
76162: LD_VAR 0 1
76166: NOT
76167: PUSH
76168: LD_VAR 0 2
76172: NOT
76173: OR
76174: IFFALSE 76178
// exit ;
76176: GO 76342
// tmp := AreaToList ( area , i ) ;
76178: LD_ADDR_VAR 0 6
76182: PUSH
76183: LD_VAR 0 2
76187: PPUSH
76188: LD_VAR 0 5
76192: PPUSH
76193: CALL_OW 517
76197: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76198: LD_ADDR_VAR 0 5
76202: PUSH
76203: DOUBLE
76204: LD_INT 1
76206: DEC
76207: ST_TO_ADDR
76208: LD_VAR 0 6
76212: PUSH
76213: LD_INT 1
76215: ARRAY
76216: PUSH
76217: FOR_TO
76218: IFFALSE 76340
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76220: LD_ADDR_VAR 0 7
76224: PUSH
76225: LD_VAR 0 6
76229: PUSH
76230: LD_INT 1
76232: ARRAY
76233: PUSH
76234: LD_VAR 0 5
76238: ARRAY
76239: PUSH
76240: LD_VAR 0 6
76244: PUSH
76245: LD_INT 2
76247: ARRAY
76248: PUSH
76249: LD_VAR 0 5
76253: ARRAY
76254: PUSH
76255: EMPTY
76256: LIST
76257: LIST
76258: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76259: LD_VAR 0 7
76263: PUSH
76264: LD_INT 1
76266: ARRAY
76267: PPUSH
76268: LD_VAR 0 7
76272: PUSH
76273: LD_INT 2
76275: ARRAY
76276: PPUSH
76277: CALL_OW 428
76281: PUSH
76282: LD_INT 0
76284: EQUAL
76285: IFFALSE 76338
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76287: LD_VAR 0 1
76291: PPUSH
76292: LD_VAR 0 7
76296: PUSH
76297: LD_INT 1
76299: ARRAY
76300: PPUSH
76301: LD_VAR 0 7
76305: PUSH
76306: LD_INT 2
76308: ARRAY
76309: PPUSH
76310: LD_VAR 0 3
76314: PPUSH
76315: CALL_OW 48
// result := IsPlaced ( unit ) ;
76319: LD_ADDR_VAR 0 4
76323: PUSH
76324: LD_VAR 0 1
76328: PPUSH
76329: CALL_OW 305
76333: ST_TO_ADDR
// exit ;
76334: POP
76335: POP
76336: GO 76342
// end ; end ;
76338: GO 76217
76340: POP
76341: POP
// end ;
76342: LD_VAR 0 4
76346: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76347: LD_INT 0
76349: PPUSH
76350: PPUSH
76351: PPUSH
// if not side or side > 8 then
76352: LD_VAR 0 1
76356: NOT
76357: PUSH
76358: LD_VAR 0 1
76362: PUSH
76363: LD_INT 8
76365: GREATER
76366: OR
76367: IFFALSE 76371
// exit ;
76369: GO 76558
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76371: LD_ADDR_VAR 0 4
76375: PUSH
76376: LD_INT 22
76378: PUSH
76379: LD_VAR 0 1
76383: PUSH
76384: EMPTY
76385: LIST
76386: LIST
76387: PUSH
76388: LD_INT 21
76390: PUSH
76391: LD_INT 3
76393: PUSH
76394: EMPTY
76395: LIST
76396: LIST
76397: PUSH
76398: EMPTY
76399: LIST
76400: LIST
76401: PPUSH
76402: CALL_OW 69
76406: ST_TO_ADDR
// if not tmp then
76407: LD_VAR 0 4
76411: NOT
76412: IFFALSE 76416
// exit ;
76414: GO 76558
// enable_addtolog := true ;
76416: LD_ADDR_OWVAR 81
76420: PUSH
76421: LD_INT 1
76423: ST_TO_ADDR
// AddToLog ( [ ) ;
76424: LD_STRING [
76426: PPUSH
76427: CALL_OW 561
// for i in tmp do
76431: LD_ADDR_VAR 0 3
76435: PUSH
76436: LD_VAR 0 4
76440: PUSH
76441: FOR_IN
76442: IFFALSE 76549
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76444: LD_STRING [
76446: PUSH
76447: LD_VAR 0 3
76451: PPUSH
76452: CALL_OW 266
76456: STR
76457: PUSH
76458: LD_STRING , 
76460: STR
76461: PUSH
76462: LD_VAR 0 3
76466: PPUSH
76467: CALL_OW 250
76471: STR
76472: PUSH
76473: LD_STRING , 
76475: STR
76476: PUSH
76477: LD_VAR 0 3
76481: PPUSH
76482: CALL_OW 251
76486: STR
76487: PUSH
76488: LD_STRING , 
76490: STR
76491: PUSH
76492: LD_VAR 0 3
76496: PPUSH
76497: CALL_OW 254
76501: STR
76502: PUSH
76503: LD_STRING , 
76505: STR
76506: PUSH
76507: LD_VAR 0 3
76511: PPUSH
76512: LD_INT 1
76514: PPUSH
76515: CALL_OW 268
76519: STR
76520: PUSH
76521: LD_STRING , 
76523: STR
76524: PUSH
76525: LD_VAR 0 3
76529: PPUSH
76530: LD_INT 2
76532: PPUSH
76533: CALL_OW 268
76537: STR
76538: PUSH
76539: LD_STRING ],
76541: STR
76542: PPUSH
76543: CALL_OW 561
// end ;
76547: GO 76441
76549: POP
76550: POP
// AddToLog ( ]; ) ;
76551: LD_STRING ];
76553: PPUSH
76554: CALL_OW 561
// end ;
76558: LD_VAR 0 2
76562: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76563: LD_INT 0
76565: PPUSH
76566: PPUSH
76567: PPUSH
76568: PPUSH
76569: PPUSH
// if not area or not rate or not max then
76570: LD_VAR 0 1
76574: NOT
76575: PUSH
76576: LD_VAR 0 2
76580: NOT
76581: OR
76582: PUSH
76583: LD_VAR 0 4
76587: NOT
76588: OR
76589: IFFALSE 76593
// exit ;
76591: GO 76782
// while 1 do
76593: LD_INT 1
76595: IFFALSE 76782
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76597: LD_ADDR_VAR 0 9
76601: PUSH
76602: LD_VAR 0 1
76606: PPUSH
76607: LD_INT 1
76609: PPUSH
76610: CALL_OW 287
76614: PUSH
76615: LD_INT 10
76617: MUL
76618: ST_TO_ADDR
// r := rate / 10 ;
76619: LD_ADDR_VAR 0 7
76623: PUSH
76624: LD_VAR 0 2
76628: PUSH
76629: LD_INT 10
76631: DIVREAL
76632: ST_TO_ADDR
// time := 1 1$00 ;
76633: LD_ADDR_VAR 0 8
76637: PUSH
76638: LD_INT 2100
76640: ST_TO_ADDR
// if amount < min then
76641: LD_VAR 0 9
76645: PUSH
76646: LD_VAR 0 3
76650: LESS
76651: IFFALSE 76669
// r := r * 2 else
76653: LD_ADDR_VAR 0 7
76657: PUSH
76658: LD_VAR 0 7
76662: PUSH
76663: LD_INT 2
76665: MUL
76666: ST_TO_ADDR
76667: GO 76695
// if amount > max then
76669: LD_VAR 0 9
76673: PUSH
76674: LD_VAR 0 4
76678: GREATER
76679: IFFALSE 76695
// r := r / 2 ;
76681: LD_ADDR_VAR 0 7
76685: PUSH
76686: LD_VAR 0 7
76690: PUSH
76691: LD_INT 2
76693: DIVREAL
76694: ST_TO_ADDR
// time := time / r ;
76695: LD_ADDR_VAR 0 8
76699: PUSH
76700: LD_VAR 0 8
76704: PUSH
76705: LD_VAR 0 7
76709: DIVREAL
76710: ST_TO_ADDR
// if time < 0 then
76711: LD_VAR 0 8
76715: PUSH
76716: LD_INT 0
76718: LESS
76719: IFFALSE 76736
// time := time * - 1 ;
76721: LD_ADDR_VAR 0 8
76725: PUSH
76726: LD_VAR 0 8
76730: PUSH
76731: LD_INT 1
76733: NEG
76734: MUL
76735: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76736: LD_VAR 0 8
76740: PUSH
76741: LD_INT 35
76743: PPUSH
76744: LD_INT 875
76746: PPUSH
76747: CALL_OW 12
76751: PLUS
76752: PPUSH
76753: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76757: LD_INT 1
76759: PPUSH
76760: LD_INT 5
76762: PPUSH
76763: CALL_OW 12
76767: PPUSH
76768: LD_VAR 0 1
76772: PPUSH
76773: LD_INT 1
76775: PPUSH
76776: CALL_OW 55
// end ;
76780: GO 76593
// end ;
76782: LD_VAR 0 5
76786: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76787: LD_INT 0
76789: PPUSH
76790: PPUSH
76791: PPUSH
76792: PPUSH
76793: PPUSH
76794: PPUSH
76795: PPUSH
76796: PPUSH
// if not turrets or not factories then
76797: LD_VAR 0 1
76801: NOT
76802: PUSH
76803: LD_VAR 0 2
76807: NOT
76808: OR
76809: IFFALSE 76813
// exit ;
76811: GO 77120
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76813: LD_ADDR_VAR 0 10
76817: PUSH
76818: LD_INT 5
76820: PUSH
76821: LD_INT 6
76823: PUSH
76824: EMPTY
76825: LIST
76826: LIST
76827: PUSH
76828: LD_INT 2
76830: PUSH
76831: LD_INT 4
76833: PUSH
76834: EMPTY
76835: LIST
76836: LIST
76837: PUSH
76838: LD_INT 3
76840: PUSH
76841: LD_INT 5
76843: PUSH
76844: EMPTY
76845: LIST
76846: LIST
76847: PUSH
76848: EMPTY
76849: LIST
76850: LIST
76851: LIST
76852: PUSH
76853: LD_INT 24
76855: PUSH
76856: LD_INT 25
76858: PUSH
76859: EMPTY
76860: LIST
76861: LIST
76862: PUSH
76863: LD_INT 23
76865: PUSH
76866: LD_INT 27
76868: PUSH
76869: EMPTY
76870: LIST
76871: LIST
76872: PUSH
76873: EMPTY
76874: LIST
76875: LIST
76876: PUSH
76877: LD_INT 42
76879: PUSH
76880: LD_INT 43
76882: PUSH
76883: EMPTY
76884: LIST
76885: LIST
76886: PUSH
76887: LD_INT 44
76889: PUSH
76890: LD_INT 46
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: PUSH
76897: LD_INT 45
76899: PUSH
76900: LD_INT 47
76902: PUSH
76903: EMPTY
76904: LIST
76905: LIST
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: LIST
76911: PUSH
76912: EMPTY
76913: LIST
76914: LIST
76915: LIST
76916: ST_TO_ADDR
// result := [ ] ;
76917: LD_ADDR_VAR 0 3
76921: PUSH
76922: EMPTY
76923: ST_TO_ADDR
// for i in turrets do
76924: LD_ADDR_VAR 0 4
76928: PUSH
76929: LD_VAR 0 1
76933: PUSH
76934: FOR_IN
76935: IFFALSE 77118
// begin nat := GetNation ( i ) ;
76937: LD_ADDR_VAR 0 7
76941: PUSH
76942: LD_VAR 0 4
76946: PPUSH
76947: CALL_OW 248
76951: ST_TO_ADDR
// weapon := 0 ;
76952: LD_ADDR_VAR 0 8
76956: PUSH
76957: LD_INT 0
76959: ST_TO_ADDR
// if not nat then
76960: LD_VAR 0 7
76964: NOT
76965: IFFALSE 76969
// continue ;
76967: GO 76934
// for j in list [ nat ] do
76969: LD_ADDR_VAR 0 5
76973: PUSH
76974: LD_VAR 0 10
76978: PUSH
76979: LD_VAR 0 7
76983: ARRAY
76984: PUSH
76985: FOR_IN
76986: IFFALSE 77027
// if GetBWeapon ( i ) = j [ 1 ] then
76988: LD_VAR 0 4
76992: PPUSH
76993: CALL_OW 269
76997: PUSH
76998: LD_VAR 0 5
77002: PUSH
77003: LD_INT 1
77005: ARRAY
77006: EQUAL
77007: IFFALSE 77025
// begin weapon := j [ 2 ] ;
77009: LD_ADDR_VAR 0 8
77013: PUSH
77014: LD_VAR 0 5
77018: PUSH
77019: LD_INT 2
77021: ARRAY
77022: ST_TO_ADDR
// break ;
77023: GO 77027
// end ;
77025: GO 76985
77027: POP
77028: POP
// if not weapon then
77029: LD_VAR 0 8
77033: NOT
77034: IFFALSE 77038
// continue ;
77036: GO 76934
// for k in factories do
77038: LD_ADDR_VAR 0 6
77042: PUSH
77043: LD_VAR 0 2
77047: PUSH
77048: FOR_IN
77049: IFFALSE 77114
// begin weapons := AvailableWeaponList ( k ) ;
77051: LD_ADDR_VAR 0 9
77055: PUSH
77056: LD_VAR 0 6
77060: PPUSH
77061: CALL_OW 478
77065: ST_TO_ADDR
// if not weapons then
77066: LD_VAR 0 9
77070: NOT
77071: IFFALSE 77075
// continue ;
77073: GO 77048
// if weapon in weapons then
77075: LD_VAR 0 8
77079: PUSH
77080: LD_VAR 0 9
77084: IN
77085: IFFALSE 77112
// begin result := [ i , weapon ] ;
77087: LD_ADDR_VAR 0 3
77091: PUSH
77092: LD_VAR 0 4
77096: PUSH
77097: LD_VAR 0 8
77101: PUSH
77102: EMPTY
77103: LIST
77104: LIST
77105: ST_TO_ADDR
// exit ;
77106: POP
77107: POP
77108: POP
77109: POP
77110: GO 77120
// end ; end ;
77112: GO 77048
77114: POP
77115: POP
// end ;
77116: GO 76934
77118: POP
77119: POP
// end ;
77120: LD_VAR 0 3
77124: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77125: LD_INT 0
77127: PPUSH
// if not side or side > 8 then
77128: LD_VAR 0 3
77132: NOT
77133: PUSH
77134: LD_VAR 0 3
77138: PUSH
77139: LD_INT 8
77141: GREATER
77142: OR
77143: IFFALSE 77147
// exit ;
77145: GO 77206
// if not range then
77147: LD_VAR 0 4
77151: NOT
77152: IFFALSE 77163
// range := - 12 ;
77154: LD_ADDR_VAR 0 4
77158: PUSH
77159: LD_INT 12
77161: NEG
77162: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77163: LD_VAR 0 1
77167: PPUSH
77168: LD_VAR 0 2
77172: PPUSH
77173: LD_VAR 0 3
77177: PPUSH
77178: LD_VAR 0 4
77182: PPUSH
77183: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77187: LD_VAR 0 1
77191: PPUSH
77192: LD_VAR 0 2
77196: PPUSH
77197: LD_VAR 0 3
77201: PPUSH
77202: CALL_OW 331
// end ;
77206: LD_VAR 0 5
77210: RET
// export function Video ( mode ) ; begin
77211: LD_INT 0
77213: PPUSH
// ingame_video = mode ;
77214: LD_ADDR_OWVAR 52
77218: PUSH
77219: LD_VAR 0 1
77223: ST_TO_ADDR
// interface_hidden = mode ;
77224: LD_ADDR_OWVAR 54
77228: PUSH
77229: LD_VAR 0 1
77233: ST_TO_ADDR
// end ;
77234: LD_VAR 0 2
77238: RET
// export function Join ( array , element ) ; begin
77239: LD_INT 0
77241: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77242: LD_ADDR_VAR 0 3
77246: PUSH
77247: LD_VAR 0 1
77251: PPUSH
77252: LD_VAR 0 1
77256: PUSH
77257: LD_INT 1
77259: PLUS
77260: PPUSH
77261: LD_VAR 0 2
77265: PPUSH
77266: CALL_OW 1
77270: ST_TO_ADDR
// end ;
77271: LD_VAR 0 3
77275: RET
// export function JoinUnion ( array , element ) ; begin
77276: LD_INT 0
77278: PPUSH
// result := array union element ;
77279: LD_ADDR_VAR 0 3
77283: PUSH
77284: LD_VAR 0 1
77288: PUSH
77289: LD_VAR 0 2
77293: UNION
77294: ST_TO_ADDR
// end ;
77295: LD_VAR 0 3
77299: RET
// export function GetBehemoths ( side ) ; begin
77300: LD_INT 0
77302: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77303: LD_ADDR_VAR 0 2
77307: PUSH
77308: LD_INT 22
77310: PUSH
77311: LD_VAR 0 1
77315: PUSH
77316: EMPTY
77317: LIST
77318: LIST
77319: PUSH
77320: LD_INT 31
77322: PUSH
77323: LD_INT 25
77325: PUSH
77326: EMPTY
77327: LIST
77328: LIST
77329: PUSH
77330: EMPTY
77331: LIST
77332: LIST
77333: PPUSH
77334: CALL_OW 69
77338: ST_TO_ADDR
// end ;
77339: LD_VAR 0 2
77343: RET
// export function Shuffle ( array ) ; var i , index ; begin
77344: LD_INT 0
77346: PPUSH
77347: PPUSH
77348: PPUSH
// result := [ ] ;
77349: LD_ADDR_VAR 0 2
77353: PUSH
77354: EMPTY
77355: ST_TO_ADDR
// if not array then
77356: LD_VAR 0 1
77360: NOT
77361: IFFALSE 77365
// exit ;
77363: GO 77464
// Randomize ;
77365: CALL_OW 10
// for i = array downto 1 do
77369: LD_ADDR_VAR 0 3
77373: PUSH
77374: DOUBLE
77375: LD_VAR 0 1
77379: INC
77380: ST_TO_ADDR
77381: LD_INT 1
77383: PUSH
77384: FOR_DOWNTO
77385: IFFALSE 77462
// begin index := rand ( 1 , array ) ;
77387: LD_ADDR_VAR 0 4
77391: PUSH
77392: LD_INT 1
77394: PPUSH
77395: LD_VAR 0 1
77399: PPUSH
77400: CALL_OW 12
77404: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77405: LD_ADDR_VAR 0 2
77409: PUSH
77410: LD_VAR 0 2
77414: PPUSH
77415: LD_VAR 0 2
77419: PUSH
77420: LD_INT 1
77422: PLUS
77423: PPUSH
77424: LD_VAR 0 1
77428: PUSH
77429: LD_VAR 0 4
77433: ARRAY
77434: PPUSH
77435: CALL_OW 2
77439: ST_TO_ADDR
// array := Delete ( array , index ) ;
77440: LD_ADDR_VAR 0 1
77444: PUSH
77445: LD_VAR 0 1
77449: PPUSH
77450: LD_VAR 0 4
77454: PPUSH
77455: CALL_OW 3
77459: ST_TO_ADDR
// end ;
77460: GO 77384
77462: POP
77463: POP
// end ;
77464: LD_VAR 0 2
77468: RET
// export function GetBaseMaterials ( base ) ; begin
77469: LD_INT 0
77471: PPUSH
// result := [ 0 , 0 , 0 ] ;
77472: LD_ADDR_VAR 0 2
77476: PUSH
77477: LD_INT 0
77479: PUSH
77480: LD_INT 0
77482: PUSH
77483: LD_INT 0
77485: PUSH
77486: EMPTY
77487: LIST
77488: LIST
77489: LIST
77490: ST_TO_ADDR
// if not base then
77491: LD_VAR 0 1
77495: NOT
77496: IFFALSE 77500
// exit ;
77498: GO 77549
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77500: LD_ADDR_VAR 0 2
77504: PUSH
77505: LD_VAR 0 1
77509: PPUSH
77510: LD_INT 1
77512: PPUSH
77513: CALL_OW 275
77517: PUSH
77518: LD_VAR 0 1
77522: PPUSH
77523: LD_INT 2
77525: PPUSH
77526: CALL_OW 275
77530: PUSH
77531: LD_VAR 0 1
77535: PPUSH
77536: LD_INT 3
77538: PPUSH
77539: CALL_OW 275
77543: PUSH
77544: EMPTY
77545: LIST
77546: LIST
77547: LIST
77548: ST_TO_ADDR
// end ;
77549: LD_VAR 0 2
77553: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77554: LD_INT 0
77556: PPUSH
77557: PPUSH
// result := array ;
77558: LD_ADDR_VAR 0 3
77562: PUSH
77563: LD_VAR 0 1
77567: ST_TO_ADDR
// if size >= result then
77568: LD_VAR 0 2
77572: PUSH
77573: LD_VAR 0 3
77577: GREATEREQUAL
77578: IFFALSE 77582
// exit ;
77580: GO 77632
// if size then
77582: LD_VAR 0 2
77586: IFFALSE 77632
// for i := array downto size do
77588: LD_ADDR_VAR 0 4
77592: PUSH
77593: DOUBLE
77594: LD_VAR 0 1
77598: INC
77599: ST_TO_ADDR
77600: LD_VAR 0 2
77604: PUSH
77605: FOR_DOWNTO
77606: IFFALSE 77630
// result := Delete ( result , result ) ;
77608: LD_ADDR_VAR 0 3
77612: PUSH
77613: LD_VAR 0 3
77617: PPUSH
77618: LD_VAR 0 3
77622: PPUSH
77623: CALL_OW 3
77627: ST_TO_ADDR
77628: GO 77605
77630: POP
77631: POP
// end ;
77632: LD_VAR 0 3
77636: RET
// export function ComExit ( unit ) ; var tmp ; begin
77637: LD_INT 0
77639: PPUSH
77640: PPUSH
// if not IsInUnit ( unit ) then
77641: LD_VAR 0 1
77645: PPUSH
77646: CALL_OW 310
77650: NOT
77651: IFFALSE 77655
// exit ;
77653: GO 77715
// tmp := IsInUnit ( unit ) ;
77655: LD_ADDR_VAR 0 3
77659: PUSH
77660: LD_VAR 0 1
77664: PPUSH
77665: CALL_OW 310
77669: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77670: LD_VAR 0 3
77674: PPUSH
77675: CALL_OW 247
77679: PUSH
77680: LD_INT 2
77682: EQUAL
77683: IFFALSE 77696
// ComExitVehicle ( unit ) else
77685: LD_VAR 0 1
77689: PPUSH
77690: CALL_OW 121
77694: GO 77705
// ComExitBuilding ( unit ) ;
77696: LD_VAR 0 1
77700: PPUSH
77701: CALL_OW 122
// result := tmp ;
77705: LD_ADDR_VAR 0 2
77709: PUSH
77710: LD_VAR 0 3
77714: ST_TO_ADDR
// end ;
77715: LD_VAR 0 2
77719: RET
// export function ComExitAll ( units ) ; var i ; begin
77720: LD_INT 0
77722: PPUSH
77723: PPUSH
// if not units then
77724: LD_VAR 0 1
77728: NOT
77729: IFFALSE 77733
// exit ;
77731: GO 77759
// for i in units do
77733: LD_ADDR_VAR 0 3
77737: PUSH
77738: LD_VAR 0 1
77742: PUSH
77743: FOR_IN
77744: IFFALSE 77757
// ComExit ( i ) ;
77746: LD_VAR 0 3
77750: PPUSH
77751: CALL 77637 0 1
77755: GO 77743
77757: POP
77758: POP
// end ;
77759: LD_VAR 0 2
77763: RET
// export function ResetHc ; begin
77764: LD_INT 0
77766: PPUSH
// InitHc ;
77767: CALL_OW 19
// hc_importance := 0 ;
77771: LD_ADDR_OWVAR 32
77775: PUSH
77776: LD_INT 0
77778: ST_TO_ADDR
// end ;
77779: LD_VAR 0 1
77783: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77784: LD_INT 0
77786: PPUSH
77787: PPUSH
77788: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77789: LD_ADDR_VAR 0 6
77793: PUSH
77794: LD_VAR 0 1
77798: PUSH
77799: LD_VAR 0 3
77803: PLUS
77804: PUSH
77805: LD_INT 2
77807: DIV
77808: ST_TO_ADDR
// if _x < 0 then
77809: LD_VAR 0 6
77813: PUSH
77814: LD_INT 0
77816: LESS
77817: IFFALSE 77834
// _x := _x * - 1 ;
77819: LD_ADDR_VAR 0 6
77823: PUSH
77824: LD_VAR 0 6
77828: PUSH
77829: LD_INT 1
77831: NEG
77832: MUL
77833: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77834: LD_ADDR_VAR 0 7
77838: PUSH
77839: LD_VAR 0 2
77843: PUSH
77844: LD_VAR 0 4
77848: PLUS
77849: PUSH
77850: LD_INT 2
77852: DIV
77853: ST_TO_ADDR
// if _y < 0 then
77854: LD_VAR 0 7
77858: PUSH
77859: LD_INT 0
77861: LESS
77862: IFFALSE 77879
// _y := _y * - 1 ;
77864: LD_ADDR_VAR 0 7
77868: PUSH
77869: LD_VAR 0 7
77873: PUSH
77874: LD_INT 1
77876: NEG
77877: MUL
77878: ST_TO_ADDR
// result := [ _x , _y ] ;
77879: LD_ADDR_VAR 0 5
77883: PUSH
77884: LD_VAR 0 6
77888: PUSH
77889: LD_VAR 0 7
77893: PUSH
77894: EMPTY
77895: LIST
77896: LIST
77897: ST_TO_ADDR
// end ;
77898: LD_VAR 0 5
77902: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77903: LD_INT 0
77905: PPUSH
77906: PPUSH
77907: PPUSH
77908: PPUSH
// task := GetTaskList ( unit ) ;
77909: LD_ADDR_VAR 0 7
77913: PUSH
77914: LD_VAR 0 1
77918: PPUSH
77919: CALL_OW 437
77923: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77924: LD_VAR 0 7
77928: NOT
77929: PUSH
77930: LD_VAR 0 1
77934: PPUSH
77935: LD_VAR 0 2
77939: PPUSH
77940: CALL_OW 308
77944: NOT
77945: AND
77946: IFFALSE 77950
// exit ;
77948: GO 78068
// if IsInArea ( unit , area ) then
77950: LD_VAR 0 1
77954: PPUSH
77955: LD_VAR 0 2
77959: PPUSH
77960: CALL_OW 308
77964: IFFALSE 77982
// begin ComMoveToArea ( unit , goAway ) ;
77966: LD_VAR 0 1
77970: PPUSH
77971: LD_VAR 0 3
77975: PPUSH
77976: CALL_OW 113
// exit ;
77980: GO 78068
// end ; if task [ 1 ] [ 1 ] <> M then
77982: LD_VAR 0 7
77986: PUSH
77987: LD_INT 1
77989: ARRAY
77990: PUSH
77991: LD_INT 1
77993: ARRAY
77994: PUSH
77995: LD_STRING M
77997: NONEQUAL
77998: IFFALSE 78002
// exit ;
78000: GO 78068
// x := task [ 1 ] [ 2 ] ;
78002: LD_ADDR_VAR 0 5
78006: PUSH
78007: LD_VAR 0 7
78011: PUSH
78012: LD_INT 1
78014: ARRAY
78015: PUSH
78016: LD_INT 2
78018: ARRAY
78019: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78020: LD_ADDR_VAR 0 6
78024: PUSH
78025: LD_VAR 0 7
78029: PUSH
78030: LD_INT 1
78032: ARRAY
78033: PUSH
78034: LD_INT 3
78036: ARRAY
78037: ST_TO_ADDR
// if InArea ( x , y , area ) then
78038: LD_VAR 0 5
78042: PPUSH
78043: LD_VAR 0 6
78047: PPUSH
78048: LD_VAR 0 2
78052: PPUSH
78053: CALL_OW 309
78057: IFFALSE 78068
// ComStop ( unit ) ;
78059: LD_VAR 0 1
78063: PPUSH
78064: CALL_OW 141
// end ;
78068: LD_VAR 0 4
78072: RET
// export function Abs ( value ) ; begin
78073: LD_INT 0
78075: PPUSH
// result := value ;
78076: LD_ADDR_VAR 0 2
78080: PUSH
78081: LD_VAR 0 1
78085: ST_TO_ADDR
// if value < 0 then
78086: LD_VAR 0 1
78090: PUSH
78091: LD_INT 0
78093: LESS
78094: IFFALSE 78111
// result := value * - 1 ;
78096: LD_ADDR_VAR 0 2
78100: PUSH
78101: LD_VAR 0 1
78105: PUSH
78106: LD_INT 1
78108: NEG
78109: MUL
78110: ST_TO_ADDR
// end ;
78111: LD_VAR 0 2
78115: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78116: LD_INT 0
78118: PPUSH
78119: PPUSH
78120: PPUSH
78121: PPUSH
78122: PPUSH
78123: PPUSH
78124: PPUSH
78125: PPUSH
// if not unit or not building then
78126: LD_VAR 0 1
78130: NOT
78131: PUSH
78132: LD_VAR 0 2
78136: NOT
78137: OR
78138: IFFALSE 78142
// exit ;
78140: GO 78368
// x := GetX ( building ) ;
78142: LD_ADDR_VAR 0 4
78146: PUSH
78147: LD_VAR 0 2
78151: PPUSH
78152: CALL_OW 250
78156: ST_TO_ADDR
// y := GetY ( building ) ;
78157: LD_ADDR_VAR 0 6
78161: PUSH
78162: LD_VAR 0 2
78166: PPUSH
78167: CALL_OW 251
78171: ST_TO_ADDR
// d := GetDir ( building ) ;
78172: LD_ADDR_VAR 0 8
78176: PUSH
78177: LD_VAR 0 2
78181: PPUSH
78182: CALL_OW 254
78186: ST_TO_ADDR
// r := 4 ;
78187: LD_ADDR_VAR 0 9
78191: PUSH
78192: LD_INT 4
78194: ST_TO_ADDR
// for i := 1 to 5 do
78195: LD_ADDR_VAR 0 10
78199: PUSH
78200: DOUBLE
78201: LD_INT 1
78203: DEC
78204: ST_TO_ADDR
78205: LD_INT 5
78207: PUSH
78208: FOR_TO
78209: IFFALSE 78366
// begin _x := ShiftX ( x , d , r + i ) ;
78211: LD_ADDR_VAR 0 5
78215: PUSH
78216: LD_VAR 0 4
78220: PPUSH
78221: LD_VAR 0 8
78225: PPUSH
78226: LD_VAR 0 9
78230: PUSH
78231: LD_VAR 0 10
78235: PLUS
78236: PPUSH
78237: CALL_OW 272
78241: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78242: LD_ADDR_VAR 0 7
78246: PUSH
78247: LD_VAR 0 6
78251: PPUSH
78252: LD_VAR 0 8
78256: PPUSH
78257: LD_VAR 0 9
78261: PUSH
78262: LD_VAR 0 10
78266: PLUS
78267: PPUSH
78268: CALL_OW 273
78272: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78273: LD_VAR 0 5
78277: PPUSH
78278: LD_VAR 0 7
78282: PPUSH
78283: CALL_OW 488
78287: PUSH
78288: LD_VAR 0 5
78292: PPUSH
78293: LD_VAR 0 7
78297: PPUSH
78298: CALL_OW 428
78302: PPUSH
78303: CALL_OW 247
78307: PUSH
78308: LD_INT 3
78310: PUSH
78311: LD_INT 2
78313: PUSH
78314: EMPTY
78315: LIST
78316: LIST
78317: IN
78318: NOT
78319: AND
78320: IFFALSE 78364
// begin ComMoveXY ( unit , _x , _y ) ;
78322: LD_VAR 0 1
78326: PPUSH
78327: LD_VAR 0 5
78331: PPUSH
78332: LD_VAR 0 7
78336: PPUSH
78337: CALL_OW 111
// result := [ _x , _y ] ;
78341: LD_ADDR_VAR 0 3
78345: PUSH
78346: LD_VAR 0 5
78350: PUSH
78351: LD_VAR 0 7
78355: PUSH
78356: EMPTY
78357: LIST
78358: LIST
78359: ST_TO_ADDR
// exit ;
78360: POP
78361: POP
78362: GO 78368
// end ; end ;
78364: GO 78208
78366: POP
78367: POP
// end ;
78368: LD_VAR 0 3
78372: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78373: LD_INT 0
78375: PPUSH
78376: PPUSH
78377: PPUSH
// result := 0 ;
78378: LD_ADDR_VAR 0 3
78382: PUSH
78383: LD_INT 0
78385: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78386: LD_VAR 0 1
78390: PUSH
78391: LD_INT 0
78393: LESS
78394: PUSH
78395: LD_VAR 0 1
78399: PUSH
78400: LD_INT 8
78402: GREATER
78403: OR
78404: PUSH
78405: LD_VAR 0 2
78409: PUSH
78410: LD_INT 0
78412: LESS
78413: OR
78414: PUSH
78415: LD_VAR 0 2
78419: PUSH
78420: LD_INT 8
78422: GREATER
78423: OR
78424: IFFALSE 78428
// exit ;
78426: GO 78503
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78428: LD_ADDR_VAR 0 4
78432: PUSH
78433: LD_INT 22
78435: PUSH
78436: LD_VAR 0 2
78440: PUSH
78441: EMPTY
78442: LIST
78443: LIST
78444: PPUSH
78445: CALL_OW 69
78449: PUSH
78450: FOR_IN
78451: IFFALSE 78501
// begin un := UnitShoot ( i ) ;
78453: LD_ADDR_VAR 0 5
78457: PUSH
78458: LD_VAR 0 4
78462: PPUSH
78463: CALL_OW 504
78467: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78468: LD_VAR 0 5
78472: PPUSH
78473: CALL_OW 255
78477: PUSH
78478: LD_VAR 0 1
78482: EQUAL
78483: IFFALSE 78499
// begin result := un ;
78485: LD_ADDR_VAR 0 3
78489: PUSH
78490: LD_VAR 0 5
78494: ST_TO_ADDR
// exit ;
78495: POP
78496: POP
78497: GO 78503
// end ; end ;
78499: GO 78450
78501: POP
78502: POP
// end ;
78503: LD_VAR 0 3
78507: RET
// export function GetCargoBay ( units ) ; begin
78508: LD_INT 0
78510: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78511: LD_ADDR_VAR 0 2
78515: PUSH
78516: LD_VAR 0 1
78520: PPUSH
78521: LD_INT 2
78523: PUSH
78524: LD_INT 34
78526: PUSH
78527: LD_INT 12
78529: PUSH
78530: EMPTY
78531: LIST
78532: LIST
78533: PUSH
78534: LD_INT 34
78536: PUSH
78537: LD_INT 51
78539: PUSH
78540: EMPTY
78541: LIST
78542: LIST
78543: PUSH
78544: LD_INT 34
78546: PUSH
78547: LD_INT 32
78549: PUSH
78550: EMPTY
78551: LIST
78552: LIST
78553: PUSH
78554: LD_INT 34
78556: PUSH
78557: LD_INT 89
78559: PUSH
78560: EMPTY
78561: LIST
78562: LIST
78563: PUSH
78564: EMPTY
78565: LIST
78566: LIST
78567: LIST
78568: LIST
78569: LIST
78570: PPUSH
78571: CALL_OW 72
78575: ST_TO_ADDR
// end ;
78576: LD_VAR 0 2
78580: RET
// export function Negate ( value ) ; begin
78581: LD_INT 0
78583: PPUSH
// result := not value ;
78584: LD_ADDR_VAR 0 2
78588: PUSH
78589: LD_VAR 0 1
78593: NOT
78594: ST_TO_ADDR
// end ;
78595: LD_VAR 0 2
78599: RET
// export function Inc ( value ) ; begin
78600: LD_INT 0
78602: PPUSH
// result := value + 1 ;
78603: LD_ADDR_VAR 0 2
78607: PUSH
78608: LD_VAR 0 1
78612: PUSH
78613: LD_INT 1
78615: PLUS
78616: ST_TO_ADDR
// end ;
78617: LD_VAR 0 2
78621: RET
// export function Dec ( value ) ; begin
78622: LD_INT 0
78624: PPUSH
// result := value - 1 ;
78625: LD_ADDR_VAR 0 2
78629: PUSH
78630: LD_VAR 0 1
78634: PUSH
78635: LD_INT 1
78637: MINUS
78638: ST_TO_ADDR
// end ;
78639: LD_VAR 0 2
78643: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78644: LD_INT 0
78646: PPUSH
78647: PPUSH
78648: PPUSH
78649: PPUSH
78650: PPUSH
78651: PPUSH
78652: PPUSH
78653: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78654: LD_VAR 0 1
78658: PPUSH
78659: LD_VAR 0 2
78663: PPUSH
78664: CALL_OW 488
78668: NOT
78669: PUSH
78670: LD_VAR 0 3
78674: PPUSH
78675: LD_VAR 0 4
78679: PPUSH
78680: CALL_OW 488
78684: NOT
78685: OR
78686: IFFALSE 78699
// begin result := - 1 ;
78688: LD_ADDR_VAR 0 5
78692: PUSH
78693: LD_INT 1
78695: NEG
78696: ST_TO_ADDR
// exit ;
78697: GO 78934
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78699: LD_ADDR_VAR 0 12
78703: PUSH
78704: LD_VAR 0 1
78708: PPUSH
78709: LD_VAR 0 2
78713: PPUSH
78714: LD_VAR 0 3
78718: PPUSH
78719: LD_VAR 0 4
78723: PPUSH
78724: CALL 77784 0 4
78728: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78729: LD_ADDR_VAR 0 11
78733: PUSH
78734: LD_VAR 0 1
78738: PPUSH
78739: LD_VAR 0 2
78743: PPUSH
78744: LD_VAR 0 12
78748: PUSH
78749: LD_INT 1
78751: ARRAY
78752: PPUSH
78753: LD_VAR 0 12
78757: PUSH
78758: LD_INT 2
78760: ARRAY
78761: PPUSH
78762: CALL_OW 298
78766: ST_TO_ADDR
// distance := 9999 ;
78767: LD_ADDR_VAR 0 10
78771: PUSH
78772: LD_INT 9999
78774: ST_TO_ADDR
// for i := 0 to 5 do
78775: LD_ADDR_VAR 0 6
78779: PUSH
78780: DOUBLE
78781: LD_INT 0
78783: DEC
78784: ST_TO_ADDR
78785: LD_INT 5
78787: PUSH
78788: FOR_TO
78789: IFFALSE 78932
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78791: LD_ADDR_VAR 0 7
78795: PUSH
78796: LD_VAR 0 1
78800: PPUSH
78801: LD_VAR 0 6
78805: PPUSH
78806: LD_VAR 0 11
78810: PPUSH
78811: CALL_OW 272
78815: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78816: LD_ADDR_VAR 0 8
78820: PUSH
78821: LD_VAR 0 2
78825: PPUSH
78826: LD_VAR 0 6
78830: PPUSH
78831: LD_VAR 0 11
78835: PPUSH
78836: CALL_OW 273
78840: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78841: LD_VAR 0 7
78845: PPUSH
78846: LD_VAR 0 8
78850: PPUSH
78851: CALL_OW 488
78855: NOT
78856: IFFALSE 78860
// continue ;
78858: GO 78788
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78860: LD_ADDR_VAR 0 9
78864: PUSH
78865: LD_VAR 0 12
78869: PUSH
78870: LD_INT 1
78872: ARRAY
78873: PPUSH
78874: LD_VAR 0 12
78878: PUSH
78879: LD_INT 2
78881: ARRAY
78882: PPUSH
78883: LD_VAR 0 7
78887: PPUSH
78888: LD_VAR 0 8
78892: PPUSH
78893: CALL_OW 298
78897: ST_TO_ADDR
// if tmp < distance then
78898: LD_VAR 0 9
78902: PUSH
78903: LD_VAR 0 10
78907: LESS
78908: IFFALSE 78930
// begin result := i ;
78910: LD_ADDR_VAR 0 5
78914: PUSH
78915: LD_VAR 0 6
78919: ST_TO_ADDR
// distance := tmp ;
78920: LD_ADDR_VAR 0 10
78924: PUSH
78925: LD_VAR 0 9
78929: ST_TO_ADDR
// end ; end ;
78930: GO 78788
78932: POP
78933: POP
// end ;
78934: LD_VAR 0 5
78938: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78939: LD_INT 0
78941: PPUSH
78942: PPUSH
// if not driver or not IsInUnit ( driver ) then
78943: LD_VAR 0 1
78947: NOT
78948: PUSH
78949: LD_VAR 0 1
78953: PPUSH
78954: CALL_OW 310
78958: NOT
78959: OR
78960: IFFALSE 78964
// exit ;
78962: GO 79054
// vehicle := IsInUnit ( driver ) ;
78964: LD_ADDR_VAR 0 3
78968: PUSH
78969: LD_VAR 0 1
78973: PPUSH
78974: CALL_OW 310
78978: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78979: LD_VAR 0 1
78983: PPUSH
78984: LD_STRING \
78986: PUSH
78987: LD_INT 0
78989: PUSH
78990: LD_INT 0
78992: PUSH
78993: LD_INT 0
78995: PUSH
78996: LD_INT 0
78998: PUSH
78999: LD_INT 0
79001: PUSH
79002: LD_INT 0
79004: PUSH
79005: EMPTY
79006: LIST
79007: LIST
79008: LIST
79009: LIST
79010: LIST
79011: LIST
79012: LIST
79013: PUSH
79014: LD_STRING E
79016: PUSH
79017: LD_INT 0
79019: PUSH
79020: LD_INT 0
79022: PUSH
79023: LD_VAR 0 3
79027: PUSH
79028: LD_INT 0
79030: PUSH
79031: LD_INT 0
79033: PUSH
79034: LD_INT 0
79036: PUSH
79037: EMPTY
79038: LIST
79039: LIST
79040: LIST
79041: LIST
79042: LIST
79043: LIST
79044: LIST
79045: PUSH
79046: EMPTY
79047: LIST
79048: LIST
79049: PPUSH
79050: CALL_OW 446
// end ;
79054: LD_VAR 0 2
79058: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79059: LD_INT 0
79061: PPUSH
79062: PPUSH
// if not driver or not IsInUnit ( driver ) then
79063: LD_VAR 0 1
79067: NOT
79068: PUSH
79069: LD_VAR 0 1
79073: PPUSH
79074: CALL_OW 310
79078: NOT
79079: OR
79080: IFFALSE 79084
// exit ;
79082: GO 79174
// vehicle := IsInUnit ( driver ) ;
79084: LD_ADDR_VAR 0 3
79088: PUSH
79089: LD_VAR 0 1
79093: PPUSH
79094: CALL_OW 310
79098: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79099: LD_VAR 0 1
79103: PPUSH
79104: LD_STRING \
79106: PUSH
79107: LD_INT 0
79109: PUSH
79110: LD_INT 0
79112: PUSH
79113: LD_INT 0
79115: PUSH
79116: LD_INT 0
79118: PUSH
79119: LD_INT 0
79121: PUSH
79122: LD_INT 0
79124: PUSH
79125: EMPTY
79126: LIST
79127: LIST
79128: LIST
79129: LIST
79130: LIST
79131: LIST
79132: LIST
79133: PUSH
79134: LD_STRING E
79136: PUSH
79137: LD_INT 0
79139: PUSH
79140: LD_INT 0
79142: PUSH
79143: LD_VAR 0 3
79147: PUSH
79148: LD_INT 0
79150: PUSH
79151: LD_INT 0
79153: PUSH
79154: LD_INT 0
79156: PUSH
79157: EMPTY
79158: LIST
79159: LIST
79160: LIST
79161: LIST
79162: LIST
79163: LIST
79164: LIST
79165: PUSH
79166: EMPTY
79167: LIST
79168: LIST
79169: PPUSH
79170: CALL_OW 447
// end ;
79174: LD_VAR 0 2
79178: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79179: LD_INT 0
79181: PPUSH
79182: PPUSH
79183: PPUSH
// tmp := [ ] ;
79184: LD_ADDR_VAR 0 5
79188: PUSH
79189: EMPTY
79190: ST_TO_ADDR
// for i in units do
79191: LD_ADDR_VAR 0 4
79195: PUSH
79196: LD_VAR 0 1
79200: PUSH
79201: FOR_IN
79202: IFFALSE 79240
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79204: LD_ADDR_VAR 0 5
79208: PUSH
79209: LD_VAR 0 5
79213: PPUSH
79214: LD_VAR 0 5
79218: PUSH
79219: LD_INT 1
79221: PLUS
79222: PPUSH
79223: LD_VAR 0 4
79227: PPUSH
79228: CALL_OW 256
79232: PPUSH
79233: CALL_OW 2
79237: ST_TO_ADDR
79238: GO 79201
79240: POP
79241: POP
// if not tmp then
79242: LD_VAR 0 5
79246: NOT
79247: IFFALSE 79251
// exit ;
79249: GO 79299
// if asc then
79251: LD_VAR 0 2
79255: IFFALSE 79279
// result := SortListByListAsc ( units , tmp ) else
79257: LD_ADDR_VAR 0 3
79261: PUSH
79262: LD_VAR 0 1
79266: PPUSH
79267: LD_VAR 0 5
79271: PPUSH
79272: CALL_OW 76
79276: ST_TO_ADDR
79277: GO 79299
// result := SortListByListDesc ( units , tmp ) ;
79279: LD_ADDR_VAR 0 3
79283: PUSH
79284: LD_VAR 0 1
79288: PPUSH
79289: LD_VAR 0 5
79293: PPUSH
79294: CALL_OW 77
79298: ST_TO_ADDR
// end ;
79299: LD_VAR 0 3
79303: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79304: LD_INT 0
79306: PPUSH
79307: PPUSH
// task := GetTaskList ( mech ) ;
79308: LD_ADDR_VAR 0 4
79312: PUSH
79313: LD_VAR 0 1
79317: PPUSH
79318: CALL_OW 437
79322: ST_TO_ADDR
// if not task then
79323: LD_VAR 0 4
79327: NOT
79328: IFFALSE 79332
// exit ;
79330: GO 79374
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79332: LD_ADDR_VAR 0 3
79336: PUSH
79337: LD_VAR 0 4
79341: PUSH
79342: LD_INT 1
79344: ARRAY
79345: PUSH
79346: LD_INT 1
79348: ARRAY
79349: PUSH
79350: LD_STRING r
79352: EQUAL
79353: PUSH
79354: LD_VAR 0 4
79358: PUSH
79359: LD_INT 1
79361: ARRAY
79362: PUSH
79363: LD_INT 4
79365: ARRAY
79366: PUSH
79367: LD_VAR 0 2
79371: EQUAL
79372: AND
79373: ST_TO_ADDR
// end ;
79374: LD_VAR 0 3
79378: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79379: LD_INT 0
79381: PPUSH
// SetDir ( unit , d ) ;
79382: LD_VAR 0 1
79386: PPUSH
79387: LD_VAR 0 4
79391: PPUSH
79392: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79396: LD_VAR 0 1
79400: PPUSH
79401: LD_VAR 0 2
79405: PPUSH
79406: LD_VAR 0 3
79410: PPUSH
79411: LD_VAR 0 5
79415: PPUSH
79416: CALL_OW 48
// end ;
79420: LD_VAR 0 6
79424: RET
// export function ToNaturalNumber ( number ) ; begin
79425: LD_INT 0
79427: PPUSH
// result := number div 1 ;
79428: LD_ADDR_VAR 0 2
79432: PUSH
79433: LD_VAR 0 1
79437: PUSH
79438: LD_INT 1
79440: DIV
79441: ST_TO_ADDR
// if number < 0 then
79442: LD_VAR 0 1
79446: PUSH
79447: LD_INT 0
79449: LESS
79450: IFFALSE 79460
// result := 0 ;
79452: LD_ADDR_VAR 0 2
79456: PUSH
79457: LD_INT 0
79459: ST_TO_ADDR
// end ;
79460: LD_VAR 0 2
79464: RET
// export function SortByClass ( units , class ) ; var un ; begin
79465: LD_INT 0
79467: PPUSH
79468: PPUSH
// if not units or not class then
79469: LD_VAR 0 1
79473: NOT
79474: PUSH
79475: LD_VAR 0 2
79479: NOT
79480: OR
79481: IFFALSE 79485
// exit ;
79483: GO 79580
// result := [ ] ;
79485: LD_ADDR_VAR 0 3
79489: PUSH
79490: EMPTY
79491: ST_TO_ADDR
// for un in units do
79492: LD_ADDR_VAR 0 4
79496: PUSH
79497: LD_VAR 0 1
79501: PUSH
79502: FOR_IN
79503: IFFALSE 79578
// if GetClass ( un ) = class then
79505: LD_VAR 0 4
79509: PPUSH
79510: CALL_OW 257
79514: PUSH
79515: LD_VAR 0 2
79519: EQUAL
79520: IFFALSE 79547
// result := Insert ( result , 1 , un ) else
79522: LD_ADDR_VAR 0 3
79526: PUSH
79527: LD_VAR 0 3
79531: PPUSH
79532: LD_INT 1
79534: PPUSH
79535: LD_VAR 0 4
79539: PPUSH
79540: CALL_OW 2
79544: ST_TO_ADDR
79545: GO 79576
// result := Replace ( result , result + 1 , un ) ;
79547: LD_ADDR_VAR 0 3
79551: PUSH
79552: LD_VAR 0 3
79556: PPUSH
79557: LD_VAR 0 3
79561: PUSH
79562: LD_INT 1
79564: PLUS
79565: PPUSH
79566: LD_VAR 0 4
79570: PPUSH
79571: CALL_OW 1
79575: ST_TO_ADDR
79576: GO 79502
79578: POP
79579: POP
// end ;
79580: LD_VAR 0 3
79584: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79585: LD_INT 0
79587: PPUSH
79588: PPUSH
79589: PPUSH
79590: PPUSH
79591: PPUSH
79592: PPUSH
79593: PPUSH
// result := [ ] ;
79594: LD_ADDR_VAR 0 4
79598: PUSH
79599: EMPTY
79600: ST_TO_ADDR
// if x - r < 0 then
79601: LD_VAR 0 1
79605: PUSH
79606: LD_VAR 0 3
79610: MINUS
79611: PUSH
79612: LD_INT 0
79614: LESS
79615: IFFALSE 79627
// min_x := 0 else
79617: LD_ADDR_VAR 0 8
79621: PUSH
79622: LD_INT 0
79624: ST_TO_ADDR
79625: GO 79643
// min_x := x - r ;
79627: LD_ADDR_VAR 0 8
79631: PUSH
79632: LD_VAR 0 1
79636: PUSH
79637: LD_VAR 0 3
79641: MINUS
79642: ST_TO_ADDR
// if y - r < 0 then
79643: LD_VAR 0 2
79647: PUSH
79648: LD_VAR 0 3
79652: MINUS
79653: PUSH
79654: LD_INT 0
79656: LESS
79657: IFFALSE 79669
// min_y := 0 else
79659: LD_ADDR_VAR 0 7
79663: PUSH
79664: LD_INT 0
79666: ST_TO_ADDR
79667: GO 79685
// min_y := y - r ;
79669: LD_ADDR_VAR 0 7
79673: PUSH
79674: LD_VAR 0 2
79678: PUSH
79679: LD_VAR 0 3
79683: MINUS
79684: ST_TO_ADDR
// max_x := x + r ;
79685: LD_ADDR_VAR 0 9
79689: PUSH
79690: LD_VAR 0 1
79694: PUSH
79695: LD_VAR 0 3
79699: PLUS
79700: ST_TO_ADDR
// max_y := y + r ;
79701: LD_ADDR_VAR 0 10
79705: PUSH
79706: LD_VAR 0 2
79710: PUSH
79711: LD_VAR 0 3
79715: PLUS
79716: ST_TO_ADDR
// for _x = min_x to max_x do
79717: LD_ADDR_VAR 0 5
79721: PUSH
79722: DOUBLE
79723: LD_VAR 0 8
79727: DEC
79728: ST_TO_ADDR
79729: LD_VAR 0 9
79733: PUSH
79734: FOR_TO
79735: IFFALSE 79836
// for _y = min_y to max_y do
79737: LD_ADDR_VAR 0 6
79741: PUSH
79742: DOUBLE
79743: LD_VAR 0 7
79747: DEC
79748: ST_TO_ADDR
79749: LD_VAR 0 10
79753: PUSH
79754: FOR_TO
79755: IFFALSE 79832
// begin if not ValidHex ( _x , _y ) then
79757: LD_VAR 0 5
79761: PPUSH
79762: LD_VAR 0 6
79766: PPUSH
79767: CALL_OW 488
79771: NOT
79772: IFFALSE 79776
// continue ;
79774: GO 79754
// if GetResourceTypeXY ( _x , _y ) then
79776: LD_VAR 0 5
79780: PPUSH
79781: LD_VAR 0 6
79785: PPUSH
79786: CALL_OW 283
79790: IFFALSE 79830
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79792: LD_ADDR_VAR 0 4
79796: PUSH
79797: LD_VAR 0 4
79801: PPUSH
79802: LD_VAR 0 4
79806: PUSH
79807: LD_INT 1
79809: PLUS
79810: PPUSH
79811: LD_VAR 0 5
79815: PUSH
79816: LD_VAR 0 6
79820: PUSH
79821: EMPTY
79822: LIST
79823: LIST
79824: PPUSH
79825: CALL_OW 1
79829: ST_TO_ADDR
// end ;
79830: GO 79754
79832: POP
79833: POP
79834: GO 79734
79836: POP
79837: POP
// end ;
79838: LD_VAR 0 4
79842: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79843: LD_INT 0
79845: PPUSH
79846: PPUSH
79847: PPUSH
79848: PPUSH
79849: PPUSH
79850: PPUSH
79851: PPUSH
79852: PPUSH
// if not units then
79853: LD_VAR 0 1
79857: NOT
79858: IFFALSE 79862
// exit ;
79860: GO 80386
// result := UnitFilter ( units , [ f_ok ] ) ;
79862: LD_ADDR_VAR 0 3
79866: PUSH
79867: LD_VAR 0 1
79871: PPUSH
79872: LD_INT 50
79874: PUSH
79875: EMPTY
79876: LIST
79877: PPUSH
79878: CALL_OW 72
79882: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79883: LD_ADDR_VAR 0 8
79887: PUSH
79888: LD_VAR 0 1
79892: PUSH
79893: LD_INT 1
79895: ARRAY
79896: PPUSH
79897: CALL_OW 255
79901: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79902: LD_ADDR_VAR 0 10
79906: PUSH
79907: LD_INT 29
79909: PUSH
79910: LD_INT 91
79912: PUSH
79913: LD_INT 49
79915: PUSH
79916: EMPTY
79917: LIST
79918: LIST
79919: LIST
79920: ST_TO_ADDR
// if not result then
79921: LD_VAR 0 3
79925: NOT
79926: IFFALSE 79930
// exit ;
79928: GO 80386
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79930: LD_ADDR_VAR 0 5
79934: PUSH
79935: LD_INT 81
79937: PUSH
79938: LD_VAR 0 8
79942: PUSH
79943: EMPTY
79944: LIST
79945: LIST
79946: PPUSH
79947: CALL_OW 69
79951: ST_TO_ADDR
// for i in result do
79952: LD_ADDR_VAR 0 4
79956: PUSH
79957: LD_VAR 0 3
79961: PUSH
79962: FOR_IN
79963: IFFALSE 80384
// begin tag := GetTag ( i ) + 1 ;
79965: LD_ADDR_VAR 0 9
79969: PUSH
79970: LD_VAR 0 4
79974: PPUSH
79975: CALL_OW 110
79979: PUSH
79980: LD_INT 1
79982: PLUS
79983: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79984: LD_ADDR_VAR 0 7
79988: PUSH
79989: LD_VAR 0 4
79993: PPUSH
79994: CALL_OW 250
79998: PPUSH
79999: LD_VAR 0 4
80003: PPUSH
80004: CALL_OW 251
80008: PPUSH
80009: LD_INT 6
80011: PPUSH
80012: CALL 79585 0 3
80016: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80017: LD_VAR 0 4
80021: PPUSH
80022: CALL_OW 247
80026: PUSH
80027: LD_INT 2
80029: EQUAL
80030: PUSH
80031: LD_VAR 0 7
80035: AND
80036: PUSH
80037: LD_VAR 0 4
80041: PPUSH
80042: CALL_OW 264
80046: PUSH
80047: LD_VAR 0 10
80051: IN
80052: NOT
80053: AND
80054: IFFALSE 80093
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80056: LD_VAR 0 4
80060: PPUSH
80061: LD_VAR 0 7
80065: PUSH
80066: LD_INT 1
80068: ARRAY
80069: PUSH
80070: LD_INT 1
80072: ARRAY
80073: PPUSH
80074: LD_VAR 0 7
80078: PUSH
80079: LD_INT 1
80081: ARRAY
80082: PUSH
80083: LD_INT 2
80085: ARRAY
80086: PPUSH
80087: CALL_OW 116
80091: GO 80382
// if path > tag then
80093: LD_VAR 0 2
80097: PUSH
80098: LD_VAR 0 9
80102: GREATER
80103: IFFALSE 80311
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80105: LD_ADDR_VAR 0 6
80109: PUSH
80110: LD_VAR 0 5
80114: PPUSH
80115: LD_INT 91
80117: PUSH
80118: LD_VAR 0 4
80122: PUSH
80123: LD_INT 8
80125: PUSH
80126: EMPTY
80127: LIST
80128: LIST
80129: LIST
80130: PPUSH
80131: CALL_OW 72
80135: ST_TO_ADDR
// if nearEnemy then
80136: LD_VAR 0 6
80140: IFFALSE 80209
// begin if GetWeapon ( i ) = ru_time_lapser then
80142: LD_VAR 0 4
80146: PPUSH
80147: CALL_OW 264
80151: PUSH
80152: LD_INT 49
80154: EQUAL
80155: IFFALSE 80183
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80157: LD_VAR 0 4
80161: PPUSH
80162: LD_VAR 0 6
80166: PPUSH
80167: LD_VAR 0 4
80171: PPUSH
80172: CALL_OW 74
80176: PPUSH
80177: CALL_OW 112
80181: GO 80207
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80183: LD_VAR 0 4
80187: PPUSH
80188: LD_VAR 0 6
80192: PPUSH
80193: LD_VAR 0 4
80197: PPUSH
80198: CALL_OW 74
80202: PPUSH
80203: CALL_OW 115
// end else
80207: GO 80309
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80209: LD_VAR 0 4
80213: PPUSH
80214: LD_VAR 0 2
80218: PUSH
80219: LD_VAR 0 9
80223: ARRAY
80224: PUSH
80225: LD_INT 1
80227: ARRAY
80228: PPUSH
80229: LD_VAR 0 2
80233: PUSH
80234: LD_VAR 0 9
80238: ARRAY
80239: PUSH
80240: LD_INT 2
80242: ARRAY
80243: PPUSH
80244: CALL_OW 297
80248: PUSH
80249: LD_INT 6
80251: GREATER
80252: IFFALSE 80295
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80254: LD_VAR 0 4
80258: PPUSH
80259: LD_VAR 0 2
80263: PUSH
80264: LD_VAR 0 9
80268: ARRAY
80269: PUSH
80270: LD_INT 1
80272: ARRAY
80273: PPUSH
80274: LD_VAR 0 2
80278: PUSH
80279: LD_VAR 0 9
80283: ARRAY
80284: PUSH
80285: LD_INT 2
80287: ARRAY
80288: PPUSH
80289: CALL_OW 114
80293: GO 80309
// SetTag ( i , tag ) ;
80295: LD_VAR 0 4
80299: PPUSH
80300: LD_VAR 0 9
80304: PPUSH
80305: CALL_OW 109
// end else
80309: GO 80382
// if enemy then
80311: LD_VAR 0 5
80315: IFFALSE 80382
// begin if GetWeapon ( i ) = ru_time_lapser then
80317: LD_VAR 0 4
80321: PPUSH
80322: CALL_OW 264
80326: PUSH
80327: LD_INT 49
80329: EQUAL
80330: IFFALSE 80358
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80332: LD_VAR 0 4
80336: PPUSH
80337: LD_VAR 0 5
80341: PPUSH
80342: LD_VAR 0 4
80346: PPUSH
80347: CALL_OW 74
80351: PPUSH
80352: CALL_OW 112
80356: GO 80382
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80358: LD_VAR 0 4
80362: PPUSH
80363: LD_VAR 0 5
80367: PPUSH
80368: LD_VAR 0 4
80372: PPUSH
80373: CALL_OW 74
80377: PPUSH
80378: CALL_OW 115
// end ; end ;
80382: GO 79962
80384: POP
80385: POP
// end ;
80386: LD_VAR 0 3
80390: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80391: LD_INT 0
80393: PPUSH
80394: PPUSH
80395: PPUSH
// if not unit or IsInUnit ( unit ) then
80396: LD_VAR 0 1
80400: NOT
80401: PUSH
80402: LD_VAR 0 1
80406: PPUSH
80407: CALL_OW 310
80411: OR
80412: IFFALSE 80416
// exit ;
80414: GO 80507
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80416: LD_ADDR_VAR 0 4
80420: PUSH
80421: LD_VAR 0 1
80425: PPUSH
80426: CALL_OW 250
80430: PPUSH
80431: LD_VAR 0 2
80435: PPUSH
80436: LD_INT 1
80438: PPUSH
80439: CALL_OW 272
80443: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80444: LD_ADDR_VAR 0 5
80448: PUSH
80449: LD_VAR 0 1
80453: PPUSH
80454: CALL_OW 251
80458: PPUSH
80459: LD_VAR 0 2
80463: PPUSH
80464: LD_INT 1
80466: PPUSH
80467: CALL_OW 273
80471: ST_TO_ADDR
// if ValidHex ( x , y ) then
80472: LD_VAR 0 4
80476: PPUSH
80477: LD_VAR 0 5
80481: PPUSH
80482: CALL_OW 488
80486: IFFALSE 80507
// ComTurnXY ( unit , x , y ) ;
80488: LD_VAR 0 1
80492: PPUSH
80493: LD_VAR 0 4
80497: PPUSH
80498: LD_VAR 0 5
80502: PPUSH
80503: CALL_OW 118
// end ;
80507: LD_VAR 0 3
80511: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80512: LD_INT 0
80514: PPUSH
80515: PPUSH
// result := false ;
80516: LD_ADDR_VAR 0 3
80520: PUSH
80521: LD_INT 0
80523: ST_TO_ADDR
// if not units then
80524: LD_VAR 0 2
80528: NOT
80529: IFFALSE 80533
// exit ;
80531: GO 80578
// for i in units do
80533: LD_ADDR_VAR 0 4
80537: PUSH
80538: LD_VAR 0 2
80542: PUSH
80543: FOR_IN
80544: IFFALSE 80576
// if See ( side , i ) then
80546: LD_VAR 0 1
80550: PPUSH
80551: LD_VAR 0 4
80555: PPUSH
80556: CALL_OW 292
80560: IFFALSE 80574
// begin result := true ;
80562: LD_ADDR_VAR 0 3
80566: PUSH
80567: LD_INT 1
80569: ST_TO_ADDR
// exit ;
80570: POP
80571: POP
80572: GO 80578
// end ;
80574: GO 80543
80576: POP
80577: POP
// end ;
80578: LD_VAR 0 3
80582: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80583: LD_INT 0
80585: PPUSH
80586: PPUSH
80587: PPUSH
80588: PPUSH
// if not unit or not points then
80589: LD_VAR 0 1
80593: NOT
80594: PUSH
80595: LD_VAR 0 2
80599: NOT
80600: OR
80601: IFFALSE 80605
// exit ;
80603: GO 80695
// dist := 99999 ;
80605: LD_ADDR_VAR 0 5
80609: PUSH
80610: LD_INT 99999
80612: ST_TO_ADDR
// for i in points do
80613: LD_ADDR_VAR 0 4
80617: PUSH
80618: LD_VAR 0 2
80622: PUSH
80623: FOR_IN
80624: IFFALSE 80693
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80626: LD_ADDR_VAR 0 6
80630: PUSH
80631: LD_VAR 0 1
80635: PPUSH
80636: LD_VAR 0 4
80640: PUSH
80641: LD_INT 1
80643: ARRAY
80644: PPUSH
80645: LD_VAR 0 4
80649: PUSH
80650: LD_INT 2
80652: ARRAY
80653: PPUSH
80654: CALL_OW 297
80658: ST_TO_ADDR
// if tmpDist < dist then
80659: LD_VAR 0 6
80663: PUSH
80664: LD_VAR 0 5
80668: LESS
80669: IFFALSE 80691
// begin result := i ;
80671: LD_ADDR_VAR 0 3
80675: PUSH
80676: LD_VAR 0 4
80680: ST_TO_ADDR
// dist := tmpDist ;
80681: LD_ADDR_VAR 0 5
80685: PUSH
80686: LD_VAR 0 6
80690: ST_TO_ADDR
// end ; end ;
80691: GO 80623
80693: POP
80694: POP
// end ;
80695: LD_VAR 0 3
80699: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80700: LD_INT 0
80702: PPUSH
// uc_side := side ;
80703: LD_ADDR_OWVAR 20
80707: PUSH
80708: LD_VAR 0 1
80712: ST_TO_ADDR
// uc_nation := 3 ;
80713: LD_ADDR_OWVAR 21
80717: PUSH
80718: LD_INT 3
80720: ST_TO_ADDR
// vc_chassis := 25 ;
80721: LD_ADDR_OWVAR 37
80725: PUSH
80726: LD_INT 25
80728: ST_TO_ADDR
// vc_engine := engine_siberite ;
80729: LD_ADDR_OWVAR 39
80733: PUSH
80734: LD_INT 3
80736: ST_TO_ADDR
// vc_control := control_computer ;
80737: LD_ADDR_OWVAR 38
80741: PUSH
80742: LD_INT 3
80744: ST_TO_ADDR
// vc_weapon := 59 ;
80745: LD_ADDR_OWVAR 40
80749: PUSH
80750: LD_INT 59
80752: ST_TO_ADDR
// result := CreateVehicle ;
80753: LD_ADDR_VAR 0 5
80757: PUSH
80758: CALL_OW 45
80762: ST_TO_ADDR
// SetDir ( result , d ) ;
80763: LD_VAR 0 5
80767: PPUSH
80768: LD_VAR 0 4
80772: PPUSH
80773: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80777: LD_VAR 0 5
80781: PPUSH
80782: LD_VAR 0 2
80786: PPUSH
80787: LD_VAR 0 3
80791: PPUSH
80792: LD_INT 0
80794: PPUSH
80795: CALL_OW 48
// end ;
80799: LD_VAR 0 5
80803: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80804: LD_INT 0
80806: PPUSH
80807: PPUSH
80808: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80809: LD_ADDR_VAR 0 2
80813: PUSH
80814: LD_INT 0
80816: PUSH
80817: LD_INT 0
80819: PUSH
80820: LD_INT 0
80822: PUSH
80823: LD_INT 0
80825: PUSH
80826: EMPTY
80827: LIST
80828: LIST
80829: LIST
80830: LIST
80831: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80832: LD_VAR 0 1
80836: NOT
80837: PUSH
80838: LD_VAR 0 1
80842: PPUSH
80843: CALL_OW 264
80847: PUSH
80848: LD_INT 12
80850: PUSH
80851: LD_INT 51
80853: PUSH
80854: LD_INT 32
80856: PUSH
80857: LD_INT 89
80859: PUSH
80860: EMPTY
80861: LIST
80862: LIST
80863: LIST
80864: LIST
80865: IN
80866: NOT
80867: OR
80868: IFFALSE 80872
// exit ;
80870: GO 80970
// for i := 1 to 3 do
80872: LD_ADDR_VAR 0 3
80876: PUSH
80877: DOUBLE
80878: LD_INT 1
80880: DEC
80881: ST_TO_ADDR
80882: LD_INT 3
80884: PUSH
80885: FOR_TO
80886: IFFALSE 80968
// begin tmp := GetCargo ( cargo , i ) ;
80888: LD_ADDR_VAR 0 4
80892: PUSH
80893: LD_VAR 0 1
80897: PPUSH
80898: LD_VAR 0 3
80902: PPUSH
80903: CALL_OW 289
80907: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80908: LD_ADDR_VAR 0 2
80912: PUSH
80913: LD_VAR 0 2
80917: PPUSH
80918: LD_VAR 0 3
80922: PPUSH
80923: LD_VAR 0 4
80927: PPUSH
80928: CALL_OW 1
80932: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80933: LD_ADDR_VAR 0 2
80937: PUSH
80938: LD_VAR 0 2
80942: PPUSH
80943: LD_INT 4
80945: PPUSH
80946: LD_VAR 0 2
80950: PUSH
80951: LD_INT 4
80953: ARRAY
80954: PUSH
80955: LD_VAR 0 4
80959: PLUS
80960: PPUSH
80961: CALL_OW 1
80965: ST_TO_ADDR
// end ;
80966: GO 80885
80968: POP
80969: POP
// end ;
80970: LD_VAR 0 2
80974: RET
// export function Length ( array ) ; begin
80975: LD_INT 0
80977: PPUSH
// result := array + 0 ;
80978: LD_ADDR_VAR 0 2
80982: PUSH
80983: LD_VAR 0 1
80987: PUSH
80988: LD_INT 0
80990: PLUS
80991: ST_TO_ADDR
// end ;
80992: LD_VAR 0 2
80996: RET
// export function PrepareArray ( array ) ; begin
80997: LD_INT 0
80999: PPUSH
// result := array diff 0 ;
81000: LD_ADDR_VAR 0 2
81004: PUSH
81005: LD_VAR 0 1
81009: PUSH
81010: LD_INT 0
81012: DIFF
81013: ST_TO_ADDR
// if not result [ 1 ] then
81014: LD_VAR 0 2
81018: PUSH
81019: LD_INT 1
81021: ARRAY
81022: NOT
81023: IFFALSE 81043
// result := Delete ( result , 1 ) ;
81025: LD_ADDR_VAR 0 2
81029: PUSH
81030: LD_VAR 0 2
81034: PPUSH
81035: LD_INT 1
81037: PPUSH
81038: CALL_OW 3
81042: ST_TO_ADDR
// end ;
81043: LD_VAR 0 2
81047: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81048: LD_INT 0
81050: PPUSH
81051: PPUSH
81052: PPUSH
81053: PPUSH
// sibRocketRange := 25 ;
81054: LD_ADDR_VAR 0 6
81058: PUSH
81059: LD_INT 25
81061: ST_TO_ADDR
// result := false ;
81062: LD_ADDR_VAR 0 4
81066: PUSH
81067: LD_INT 0
81069: ST_TO_ADDR
// for i := 0 to 5 do
81070: LD_ADDR_VAR 0 5
81074: PUSH
81075: DOUBLE
81076: LD_INT 0
81078: DEC
81079: ST_TO_ADDR
81080: LD_INT 5
81082: PUSH
81083: FOR_TO
81084: IFFALSE 81151
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81086: LD_VAR 0 1
81090: PPUSH
81091: LD_VAR 0 5
81095: PPUSH
81096: LD_VAR 0 6
81100: PPUSH
81101: CALL_OW 272
81105: PPUSH
81106: LD_VAR 0 2
81110: PPUSH
81111: LD_VAR 0 5
81115: PPUSH
81116: LD_VAR 0 6
81120: PPUSH
81121: CALL_OW 273
81125: PPUSH
81126: LD_VAR 0 3
81130: PPUSH
81131: CALL_OW 309
81135: IFFALSE 81149
// begin result := true ;
81137: LD_ADDR_VAR 0 4
81141: PUSH
81142: LD_INT 1
81144: ST_TO_ADDR
// exit ;
81145: POP
81146: POP
81147: GO 81153
// end ;
81149: GO 81083
81151: POP
81152: POP
// end ;
81153: LD_VAR 0 4
81157: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81158: LD_INT 0
81160: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81161: LD_VAR 0 1
81165: PPUSH
81166: LD_VAR 0 2
81170: PPUSH
81171: LD_INT 0
81173: PPUSH
81174: LD_INT 0
81176: PPUSH
81177: LD_INT 1
81179: PPUSH
81180: LD_INT 0
81182: PPUSH
81183: CALL_OW 587
// end ; end_of_file
81187: LD_VAR 0 3
81191: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81192: LD_VAR 0 1
81196: PUSH
81197: LD_INT 200
81199: DOUBLE
81200: GREATEREQUAL
81201: IFFALSE 81209
81203: LD_INT 299
81205: DOUBLE
81206: LESSEQUAL
81207: IFTRUE 81211
81209: GO 81243
81211: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81212: LD_VAR 0 1
81216: PPUSH
81217: LD_VAR 0 2
81221: PPUSH
81222: LD_VAR 0 3
81226: PPUSH
81227: LD_VAR 0 4
81231: PPUSH
81232: LD_VAR 0 5
81236: PPUSH
81237: CALL 35858 0 5
81241: GO 81320
81243: LD_INT 300
81245: DOUBLE
81246: GREATEREQUAL
81247: IFFALSE 81255
81249: LD_INT 399
81251: DOUBLE
81252: LESSEQUAL
81253: IFTRUE 81257
81255: GO 81319
81257: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81258: LD_VAR 0 1
81262: PPUSH
81263: LD_VAR 0 2
81267: PPUSH
81268: LD_VAR 0 3
81272: PPUSH
81273: LD_VAR 0 4
81277: PPUSH
81278: LD_VAR 0 5
81282: PPUSH
81283: LD_VAR 0 6
81287: PPUSH
81288: LD_VAR 0 7
81292: PPUSH
81293: LD_VAR 0 8
81297: PPUSH
81298: LD_VAR 0 9
81302: PPUSH
81303: LD_VAR 0 10
81307: PPUSH
81308: LD_VAR 0 11
81312: PPUSH
81313: CALL 32191 0 11
81317: GO 81320
81319: POP
// end ;
81320: PPOPN 11
81322: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81323: LD_VAR 0 1
81327: PPUSH
81328: LD_VAR 0 2
81332: PPUSH
81333: LD_VAR 0 3
81337: PPUSH
81338: LD_VAR 0 4
81342: PPUSH
81343: LD_VAR 0 5
81347: PPUSH
81348: CALL 35594 0 5
// end ; end_of_file
81352: PPOPN 5
81354: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81355: LD_VAR 0 1
81359: PPUSH
81360: LD_VAR 0 2
81364: PPUSH
81365: LD_VAR 0 3
81369: PPUSH
81370: LD_VAR 0 4
81374: PPUSH
81375: LD_VAR 0 5
81379: PPUSH
81380: LD_VAR 0 6
81384: PPUSH
81385: CALL 19843 0 6
// end ;
81389: PPOPN 6
81391: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81392: LD_INT 0
81394: PPUSH
// begin if not units then
81395: LD_VAR 0 1
81399: NOT
81400: IFFALSE 81404
// exit ;
81402: GO 81404
// end ;
81404: PPOPN 7
81406: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81407: CALL 19747 0 0
// end ;
81411: PPOPN 1
81413: END
