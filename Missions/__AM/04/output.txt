// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export reliefOfCommand ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4659 0 0
// PrepareRussianBase ;
  29: CALL 2948 0 0
// PrepareRussianCommander ;
  33: CALL 2899 0 0
// PrepareHeroes ;
  37: CALL 473 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8278 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 49
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 50
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel := 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel := 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild := 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode := 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible := 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack := 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson := 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase := 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer := 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase := 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport := 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus := 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer := 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog := 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog := 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog := 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil := 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower := 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply := [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable := 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack := 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter := 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor := true ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// reliefOfCommand := false ;
 298: LD_ADDR_EXP 48
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// escapeAvalaible = 0 ;
 306: LD_ADDR_EXP 40
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// specAttack := false ;
 314: LD_ADDR_EXP 47
 318: PUSH
 319: LD_INT 0
 321: ST_TO_ADDR
// ruMobile := [ ] ;
 322: LD_ADDR_EXP 46
 326: PUSH
 327: EMPTY
 328: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 329: LD_ADDR_EXP 43
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: LD_INT 5
 342: PUSH
 343: LD_INT 6
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: PUSH
 352: LD_OWVAR 67
 356: ARRAY
 357: ST_TO_ADDR
// end ;
 358: LD_VAR 0 1
 362: RET
// every 0 0$1 trigger debugMode do var i ;
 363: LD_EXP 45
 367: IFFALSE 429
 369: GO 371
 371: DISABLE
 372: LD_INT 0
 374: PPUSH
// begin enable ;
 375: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 376: LD_ADDR_VAR 0 1
 380: PUSH
 381: LD_INT 22
 383: PUSH
 384: LD_INT 1
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: PUSH
 391: LD_INT 21
 393: PUSH
 394: LD_INT 1
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PPUSH
 405: CALL_OW 69
 409: PUSH
 410: FOR_IN
 411: IFFALSE 427
// SetLives ( i , 1000 ) ;
 413: LD_VAR 0 1
 417: PPUSH
 418: LD_INT 1000
 420: PPUSH
 421: CALL_OW 234
 425: GO 410
 427: POP
 428: POP
// end ;
 429: PPOPN 1
 431: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 34
 444: PUSH
 445: LD_INT 44
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: PPUSH
 456: CALL_OW 69
 460: IFFALSE 472
 462: GO 464
 464: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 465: LD_STRING ACH_GUN
 467: PPUSH
 468: CALL_OW 543
 472: END
// export function PrepareHeroes ; var i , tmp ; begin
 473: LD_INT 0
 475: PPUSH
 476: PPUSH
 477: PPUSH
// uc_side = 1 ;
 478: LD_ADDR_OWVAR 20
 482: PUSH
 483: LD_INT 1
 485: ST_TO_ADDR
// uc_nation = 1 ;
 486: LD_ADDR_OWVAR 21
 490: PUSH
 491: LD_INT 1
 493: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 494: LD_ADDR_EXP 1
 498: PUSH
 499: LD_STRING JMM
 501: PPUSH
 502: LD_EXP 45
 506: NOT
 507: PPUSH
 508: LD_EXP 50
 512: PPUSH
 513: CALL 41237 0 3
 517: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 518: LD_ADDR_EXP 4
 522: PUSH
 523: LD_STRING Lisa
 525: PPUSH
 526: LD_EXP 45
 530: NOT
 531: PPUSH
 532: LD_EXP 50
 536: PPUSH
 537: CALL 41237 0 3
 541: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 7
 546: PUSH
 547: LD_STRING Brown
 549: PPUSH
 550: LD_INT 0
 552: PPUSH
 553: LD_EXP 50
 557: PPUSH
 558: CALL 41237 0 3
 562: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 563: LD_ADDR_EXP 8
 567: PUSH
 568: LD_STRING Dickens
 570: PPUSH
 571: LD_INT 0
 573: PPUSH
 574: LD_EXP 50
 578: PPUSH
 579: CALL 41237 0 3
 583: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 584: LD_ADDR_EXP 9
 588: PUSH
 589: LD_STRING Woodruff
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: LD_EXP 50
 599: PPUSH
 600: CALL 41237 0 3
 604: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: LD_STRING Campell
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: LD_EXP 50
 620: PPUSH
 621: CALL 41237 0 3
 625: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 626: LD_ADDR_EXP 10
 630: PUSH
 631: LD_STRING Knight
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: LD_EXP 50
 641: PPUSH
 642: CALL 41237 0 3
 646: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 647: LD_ADDR_EXP 11
 651: PUSH
 652: LD_STRING Claptopn
 654: PPUSH
 655: LD_INT 0
 657: PPUSH
 658: LD_EXP 50
 662: PPUSH
 663: CALL 41237 0 3
 667: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 668: LD_ADDR_EXP 14
 672: PUSH
 673: LD_STRING Harisson
 675: PPUSH
 676: LD_INT 0
 678: PPUSH
 679: LD_EXP 50
 683: PPUSH
 684: CALL 41237 0 3
 688: ST_TO_ADDR
// if not Lisa then
 689: LD_EXP 4
 693: NOT
 694: IFFALSE 717
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 2
 700: PUSH
 701: LD_STRING Bobby
 703: PPUSH
 704: LD_INT 1
 706: PPUSH
 707: LD_EXP 50
 711: PPUSH
 712: CALL 41237 0 3
 716: ST_TO_ADDR
// if not Lisa and not Bobby then
 717: LD_EXP 4
 721: NOT
 722: PUSH
 723: LD_EXP 2
 727: NOT
 728: AND
 729: IFFALSE 752
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 731: LD_ADDR_EXP 3
 735: PUSH
 736: LD_STRING Cyrus
 738: PPUSH
 739: LD_INT 1
 741: PPUSH
 742: LD_EXP 50
 746: PPUSH
 747: CALL 41237 0 3
 751: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 752: LD_EXP 4
 756: NOT
 757: PUSH
 758: LD_EXP 2
 762: NOT
 763: AND
 764: PUSH
 765: LD_EXP 3
 769: NOT
 770: AND
 771: IFFALSE 870
// begin tmp = CreateCharacterSet ( 03_others ) ;
 773: LD_ADDR_VAR 0 3
 777: PUSH
 778: LD_STRING 03_others
 780: PPUSH
 781: CALL_OW 31
 785: ST_TO_ADDR
// if tmp then
 786: LD_VAR 0 3
 790: IFFALSE 847
// begin RandomBeforeMission = tmp [ 1 ] ;
 792: LD_ADDR_EXP 6
 796: PUSH
 797: LD_VAR 0 3
 801: PUSH
 802: LD_INT 1
 804: ARRAY
 805: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 40
// if tmp > 1 then
 813: LD_VAR 0 3
 817: PUSH
 818: LD_INT 1
 820: GREATER
 821: IFFALSE 845
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 823: LD_VAR 0 3
 827: PUSH
 828: LD_VAR 0 3
 832: PUSH
 833: LD_INT 1
 835: ARRAY
 836: DIFF
 837: PPUSH
 838: LD_STRING 03_others
 840: PPUSH
 841: CALL_OW 38
// end else
 845: GO 870
// begin PrepareHuman ( false , 1 , 3 ) ;
 847: LD_INT 0
 849: PPUSH
 850: LD_INT 1
 852: PPUSH
 853: LD_INT 3
 855: PPUSH
 856: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 860: LD_ADDR_EXP 6
 864: PUSH
 865: CALL_OW 44
 869: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 870: LD_ADDR_OWVAR 20
 874: PUSH
 875: LD_INT 4
 877: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 878: LD_ADDR_EXP 13
 882: PUSH
 883: LD_STRING Donaldson
 885: PPUSH
 886: LD_INT 0
 888: PPUSH
 889: LD_EXP 50
 893: PPUSH
 894: CALL 41237 0 3
 898: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 899: LD_ADDR_EXP 5
 903: PUSH
 904: LD_STRING Frank
 906: PPUSH
 907: LD_INT 1
 909: PPUSH
 910: LD_EXP 50
 914: PPUSH
 915: CALL 41237 0 3
 919: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 920: LD_EXP 1
 924: PPUSH
 925: LD_INT 32
 927: PPUSH
 928: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 932: LD_EXP 7
 936: PPUSH
 937: LD_INT 1
 939: PPUSH
 940: LD_INT 0
 942: PPUSH
 943: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 947: LD_EXP 7
 951: PPUSH
 952: LD_INT 32
 954: PPUSH
 955: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 959: LD_EXP 8
 963: PPUSH
 964: LD_INT 2
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 974: LD_EXP 9
 978: PPUSH
 979: LD_INT 2
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 989: LD_EXP 12
 993: PPUSH
 994: LD_INT 2
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1004: LD_EXP 10
1008: PPUSH
1009: LD_INT 2
1011: PPUSH
1012: LD_INT 0
1014: PPUSH
1015: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1019: LD_EXP 11
1023: PPUSH
1024: LD_INT 2
1026: PPUSH
1027: LD_INT 0
1029: PPUSH
1030: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1034: LD_EXP 4
1038: PPUSH
1039: LD_INT 2
1041: PPUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 49
// if Lisa = false then
1049: LD_EXP 4
1053: PUSH
1054: LD_INT 0
1056: EQUAL
1057: IFFALSE 1074
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1059: LD_EXP 2
1063: PPUSH
1064: LD_INT 2
1066: PPUSH
1067: LD_INT 0
1069: PPUSH
1070: CALL_OW 49
// if Lisa = false and Bobby = false then
1074: LD_EXP 4
1078: PUSH
1079: LD_INT 0
1081: EQUAL
1082: PUSH
1083: LD_EXP 2
1087: PUSH
1088: LD_INT 0
1090: EQUAL
1091: AND
1092: IFFALSE 1109
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1094: LD_EXP 3
1098: PPUSH
1099: LD_INT 2
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1109: LD_EXP 4
1113: PUSH
1114: LD_INT 0
1116: EQUAL
1117: PUSH
1118: LD_EXP 2
1122: PUSH
1123: LD_INT 0
1125: EQUAL
1126: AND
1127: PUSH
1128: LD_EXP 3
1132: PUSH
1133: LD_INT 0
1135: EQUAL
1136: AND
1137: IFFALSE 1154
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1139: LD_EXP 6
1143: PPUSH
1144: LD_INT 2
1146: PPUSH
1147: LD_INT 0
1149: PPUSH
1150: CALL_OW 49
// end ;
1154: LD_VAR 0 1
1158: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1159: LD_INT 0
1161: PPUSH
1162: PPUSH
1163: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1164: LD_EXP 13
1168: PPUSH
1169: LD_INT 10
1171: PPUSH
1172: LD_INT 0
1174: PPUSH
1175: CALL_OW 49
// if Frank then
1179: LD_EXP 5
1183: IFFALSE 1200
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1185: LD_EXP 5
1189: PPUSH
1190: LD_INT 10
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 49
// uc_nation = 1 ;
1200: LD_ADDR_OWVAR 21
1204: PUSH
1205: LD_INT 1
1207: ST_TO_ADDR
// uc_side = 4 ;
1208: LD_ADDR_OWVAR 20
1212: PUSH
1213: LD_INT 4
1215: ST_TO_ADDR
// hc_class := 3 ;
1216: LD_ADDR_OWVAR 28
1220: PUSH
1221: LD_INT 3
1223: ST_TO_ADDR
// hc_sex := sex_male ;
1224: LD_ADDR_OWVAR 27
1228: PUSH
1229: LD_INT 1
1231: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1232: LD_ADDR_OWVAR 33
1236: PUSH
1237: LD_STRING SecondCharsGal
1239: ST_TO_ADDR
// hc_face_number := 53 ;
1240: LD_ADDR_OWVAR 34
1244: PUSH
1245: LD_INT 53
1247: ST_TO_ADDR
// hc_name := Freddie Warner ;
1248: LD_ADDR_OWVAR 26
1252: PUSH
1253: LD_STRING Freddie Warner
1255: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1256: LD_ADDR_OWVAR 29
1260: PUSH
1261: LD_INT 8
1263: PUSH
1264: LD_INT 11
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 1 ] ;
1271: LD_ADDR_OWVAR 30
1275: PUSH
1276: LD_INT 0
1278: PUSH
1279: LD_INT 0
1281: PUSH
1282: LD_INT 2
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1294: LD_ADDR_OWVAR 31
1298: PUSH
1299: LD_INT 1
1301: PUSH
1302: LD_INT 0
1304: PUSH
1305: LD_INT 3
1307: PUSH
1308: LD_INT 2
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: ST_TO_ADDR
// un = CreateHuman ;
1317: LD_ADDR_VAR 0 3
1321: PUSH
1322: CALL_OW 44
1326: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1327: LD_VAR 0 3
1331: PPUSH
1332: LD_INT 10
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL_OW 49
// hc_class := 1 ;
1342: LD_ADDR_OWVAR 28
1346: PUSH
1347: LD_INT 1
1349: ST_TO_ADDR
// hc_sex := sex_male ;
1350: LD_ADDR_OWVAR 27
1354: PUSH
1355: LD_INT 1
1357: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1358: LD_ADDR_OWVAR 33
1362: PUSH
1363: LD_STRING SecondCharsGal
1365: ST_TO_ADDR
// hc_face_number := 56 ;
1366: LD_ADDR_OWVAR 34
1370: PUSH
1371: LD_INT 56
1373: ST_TO_ADDR
// hc_name := Mel Brennan ;
1374: LD_ADDR_OWVAR 26
1378: PUSH
1379: LD_STRING Mel Brennan
1381: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1382: LD_ADDR_OWVAR 29
1386: PUSH
1387: LD_INT 12
1389: PUSH
1390: LD_INT 11
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 1 , 0 ] ;
1397: LD_ADDR_OWVAR 30
1401: PUSH
1402: LD_INT 2
1404: PUSH
1405: LD_INT 0
1407: PUSH
1408: LD_INT 1
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1420: LD_ADDR_OWVAR 31
1424: PUSH
1425: LD_INT 4
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: LD_INT 1
1433: PUSH
1434: LD_INT 0
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: ST_TO_ADDR
// un = CreateHuman ;
1443: LD_ADDR_VAR 0 3
1447: PUSH
1448: CALL_OW 44
1452: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1453: LD_VAR 0 3
1457: PPUSH
1458: LD_INT 10
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: CALL_OW 49
// hc_class := 1 ;
1468: LD_ADDR_OWVAR 28
1472: PUSH
1473: LD_INT 1
1475: ST_TO_ADDR
// hc_sex := sex_male ;
1476: LD_ADDR_OWVAR 27
1480: PUSH
1481: LD_INT 1
1483: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1484: LD_ADDR_OWVAR 33
1488: PUSH
1489: LD_STRING AmGalRemake
1491: ST_TO_ADDR
// hc_face_number := 5 ;
1492: LD_ADDR_OWVAR 34
1496: PUSH
1497: LD_INT 5
1499: ST_TO_ADDR
// hc_name := Bob Joplin ;
1500: LD_ADDR_OWVAR 26
1504: PUSH
1505: LD_STRING Bob Joplin
1507: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1508: LD_ADDR_OWVAR 29
1512: PUSH
1513: LD_INT 10
1515: PUSH
1516: LD_INT 11
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
1523: LD_ADDR_OWVAR 30
1527: PUSH
1528: LD_INT 0
1530: PUSH
1531: LD_INT 1
1533: PUSH
1534: LD_INT 1
1536: PUSH
1537: LD_INT 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1546: LD_ADDR_OWVAR 31
1550: PUSH
1551: LD_INT 3
1553: PUSH
1554: LD_INT 1
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 1
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: ST_TO_ADDR
// un = CreateHuman ;
1569: LD_ADDR_VAR 0 3
1573: PUSH
1574: CALL_OW 44
1578: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1579: LD_VAR 0 3
1583: PPUSH
1584: LD_INT 10
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL_OW 49
// hc_class := 3 ;
1594: LD_ADDR_OWVAR 28
1598: PUSH
1599: LD_INT 3
1601: ST_TO_ADDR
// hc_sex := sex_female ;
1602: LD_ADDR_OWVAR 27
1606: PUSH
1607: LD_INT 2
1609: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1610: LD_ADDR_OWVAR 33
1614: PUSH
1615: LD_STRING AmGalRemake
1617: ST_TO_ADDR
// hc_face_number := 8 ;
1618: LD_ADDR_OWVAR 34
1622: PUSH
1623: LD_INT 8
1625: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1626: LD_ADDR_OWVAR 26
1630: PUSH
1631: LD_STRING Elizabeth Whitney
1633: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1634: LD_ADDR_OWVAR 29
1638: PUSH
1639: LD_INT 9
1641: PUSH
1642: LD_INT 11
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 3 , 0 ] ;
1649: LD_ADDR_OWVAR 30
1653: PUSH
1654: LD_INT 0
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: LD_INT 0
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 4 , 1 ] ;
1672: LD_ADDR_OWVAR 31
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: LD_INT 1
1682: PUSH
1683: LD_INT 4
1685: PUSH
1686: LD_INT 1
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: ST_TO_ADDR
// un = CreateHuman ;
1695: LD_ADDR_VAR 0 3
1699: PUSH
1700: CALL_OW 44
1704: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1705: LD_VAR 0 3
1709: PPUSH
1710: LD_INT 10
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
// InitHc ;
1720: CALL_OW 19
// end ;
1724: LD_VAR 0 1
1728: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1729: LD_INT 0
1731: PPUSH
1732: PPUSH
1733: PPUSH
1734: PPUSH
// uc_nation = 1 ;
1735: LD_ADDR_OWVAR 21
1739: PUSH
1740: LD_INT 1
1742: ST_TO_ADDR
// uc_side = 1 ;
1743: LD_ADDR_OWVAR 20
1747: PUSH
1748: LD_INT 1
1750: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1751: LD_ADDR_OWVAR 37
1755: PUSH
1756: LD_INT 2
1758: ST_TO_ADDR
// vc_engine := engine_combustion ;
1759: LD_ADDR_OWVAR 39
1763: PUSH
1764: LD_INT 1
1766: ST_TO_ADDR
// vc_control := control_manual ;
1767: LD_ADDR_OWVAR 38
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1775: LD_ADDR_OWVAR 41
1779: PUSH
1780: LD_INT 65
1782: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1783: LD_ADDR_OWVAR 40
1787: PUSH
1788: LD_INT 5
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: LD_INT 4
1796: PUSH
1797: LD_INT 4
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: PUSH
1806: LD_OWVAR 67
1810: ARRAY
1811: ST_TO_ADDR
// veh := CreateVehicle ;
1812: LD_ADDR_VAR 0 5
1816: PUSH
1817: CALL_OW 45
1821: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1822: LD_VAR 0 5
1826: PPUSH
1827: LD_INT 2
1829: PPUSH
1830: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1834: LD_INT 17
1836: PPUSH
1837: LD_INT 4
1839: PPUSH
1840: CALL_OW 428
1844: PUSH
1845: LD_INT 0
1847: EQUAL
1848: IFFALSE 1870
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 17
1857: PPUSH
1858: LD_INT 4
1860: PPUSH
1861: LD_INT 0
1863: PPUSH
1864: CALL_OW 48
1868: GO 1888
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1870: LD_VAR 0 5
1874: PPUSH
1875: LD_INT 23
1877: PPUSH
1878: LD_INT 10
1880: PPUSH
1881: LD_INT 0
1883: PPUSH
1884: CALL_OW 48
// hc_class := 1 ;
1888: LD_ADDR_OWVAR 28
1892: PUSH
1893: LD_INT 1
1895: ST_TO_ADDR
// hc_sex := sex_male ;
1896: LD_ADDR_OWVAR 27
1900: PUSH
1901: LD_INT 1
1903: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1904: LD_ADDR_OWVAR 33
1908: PUSH
1909: LD_STRING SecondCharsGal
1911: ST_TO_ADDR
// hc_face_number := 59 ;
1912: LD_ADDR_OWVAR 34
1916: PUSH
1917: LD_INT 59
1919: ST_TO_ADDR
// hc_name := Max Gray ;
1920: LD_ADDR_OWVAR 26
1924: PUSH
1925: LD_STRING Max Gray
1927: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1928: LD_ADDR_OWVAR 29
1932: PUSH
1933: LD_INT 9
1935: PUSH
1936: LD_INT 11
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
1943: LD_ADDR_OWVAR 30
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 1
1953: PUSH
1954: LD_INT 0
1956: PUSH
1957: LD_INT 0
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1966: LD_ADDR_OWVAR 31
1970: PUSH
1971: LD_INT 4
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: LD_INT 1
1979: PUSH
1980: LD_INT 0
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: ST_TO_ADDR
// un = CreateHuman ;
1989: LD_ADDR_VAR 0 4
1993: PUSH
1994: CALL_OW 44
1998: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1999: LD_VAR 0 4
2003: PPUSH
2004: LD_INT 11
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL_OW 49
// hc_class := 2 ;
2014: LD_ADDR_OWVAR 28
2018: PUSH
2019: LD_INT 2
2021: ST_TO_ADDR
// hc_sex := sex_male ;
2022: LD_ADDR_OWVAR 27
2026: PUSH
2027: LD_INT 1
2029: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2030: LD_ADDR_OWVAR 33
2034: PUSH
2035: LD_STRING SecondCharsGal
2037: ST_TO_ADDR
// hc_face_number := 50 ;
2038: LD_ADDR_OWVAR 34
2042: PUSH
2043: LD_INT 50
2045: ST_TO_ADDR
// hc_name := Frank Hughes ;
2046: LD_ADDR_OWVAR 26
2050: PUSH
2051: LD_STRING Frank Hughes
2053: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2054: LD_ADDR_OWVAR 29
2058: PUSH
2059: LD_INT 10
2061: PUSH
2062: LD_INT 10
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2069: LD_ADDR_OWVAR 30
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: LD_INT 2
2079: PUSH
2080: LD_INT 0
2082: PUSH
2083: LD_INT 0
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: ST_TO_ADDR
// hc_skills := [ 1 , 4 , 0 , 1 ] ;
2092: LD_ADDR_OWVAR 31
2096: PUSH
2097: LD_INT 1
2099: PUSH
2100: LD_INT 4
2102: PUSH
2103: LD_INT 0
2105: PUSH
2106: LD_INT 1
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: ST_TO_ADDR
// un = CreateHuman ;
2115: LD_ADDR_VAR 0 4
2119: PUSH
2120: CALL_OW 44
2124: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2125: LD_VAR 0 4
2129: PPUSH
2130: LD_INT 11
2132: PPUSH
2133: LD_INT 0
2135: PPUSH
2136: CALL_OW 49
// hc_class := 1 ;
2140: LD_ADDR_OWVAR 28
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// hc_sex := sex_male ;
2148: LD_ADDR_OWVAR 27
2152: PUSH
2153: LD_INT 1
2155: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2156: LD_ADDR_OWVAR 33
2160: PUSH
2161: LD_STRING SecondCharsGal
2163: ST_TO_ADDR
// hc_face_number := 54 ;
2164: LD_ADDR_OWVAR 34
2168: PUSH
2169: LD_INT 54
2171: ST_TO_ADDR
// hc_name := Luigi Ghibellini ;
2172: LD_ADDR_OWVAR 26
2176: PUSH
2177: LD_STRING Luigi Ghibellini
2179: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2180: LD_ADDR_OWVAR 29
2184: PUSH
2185: LD_INT 11
2187: PUSH
2188: LD_INT 11
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 1 , 1 ] ;
2195: LD_ADDR_OWVAR 30
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 0
2205: PUSH
2206: LD_INT 1
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 2 ] ;
2218: LD_ADDR_OWVAR 31
2222: PUSH
2223: LD_INT 2
2225: PUSH
2226: LD_INT 1
2228: PUSH
2229: LD_INT 1
2231: PUSH
2232: LD_INT 2
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: ST_TO_ADDR
// un = CreateHuman ;
2241: LD_ADDR_VAR 0 4
2245: PUSH
2246: CALL_OW 44
2250: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2251: LD_VAR 0 4
2255: PPUSH
2256: LD_INT 11
2258: PPUSH
2259: LD_INT 0
2261: PPUSH
2262: CALL_OW 49
// hc_class := 3 ;
2266: LD_ADDR_OWVAR 28
2270: PUSH
2271: LD_INT 3
2273: ST_TO_ADDR
// hc_sex := sex_male ;
2274: LD_ADDR_OWVAR 27
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2282: LD_ADDR_OWVAR 33
2286: PUSH
2287: LD_STRING AmGalRemake
2289: ST_TO_ADDR
// hc_face_number := 6 ;
2290: LD_ADDR_OWVAR 34
2294: PUSH
2295: LD_INT 6
2297: ST_TO_ADDR
// hc_name := Leon Carter ;
2298: LD_ADDR_OWVAR 26
2302: PUSH
2303: LD_STRING Leon Carter
2305: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2306: LD_ADDR_OWVAR 29
2310: PUSH
2311: LD_INT 10
2313: PUSH
2314: LD_INT 9
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 1 ] ;
2321: LD_ADDR_OWVAR 30
2325: PUSH
2326: LD_INT 0
2328: PUSH
2329: LD_INT 0
2331: PUSH
2332: LD_INT 2
2334: PUSH
2335: LD_INT 1
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2344: LD_ADDR_OWVAR 31
2348: PUSH
2349: LD_INT 0
2351: PUSH
2352: LD_INT 2
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: LD_INT 1
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: LIST
2365: LIST
2366: ST_TO_ADDR
// un = CreateHuman ;
2367: LD_ADDR_VAR 0 4
2371: PUSH
2372: CALL_OW 44
2376: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2377: LD_VAR 0 4
2381: PPUSH
2382: LD_VAR 0 5
2386: PPUSH
2387: CALL_OW 52
// if count = 4 then
2391: LD_VAR 0 1
2395: PUSH
2396: LD_INT 4
2398: EQUAL
2399: IFFALSE 2527
// begin hc_class := 1 ;
2401: LD_ADDR_OWVAR 28
2405: PUSH
2406: LD_INT 1
2408: ST_TO_ADDR
// hc_sex := sex_male ;
2409: LD_ADDR_OWVAR 27
2413: PUSH
2414: LD_INT 1
2416: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2417: LD_ADDR_OWVAR 33
2421: PUSH
2422: LD_STRING SecondCharsGal
2424: ST_TO_ADDR
// hc_face_number := 34 ;
2425: LD_ADDR_OWVAR 34
2429: PUSH
2430: LD_INT 34
2432: ST_TO_ADDR
// hc_name := Ian Hill ;
2433: LD_ADDR_OWVAR 26
2437: PUSH
2438: LD_STRING Ian Hill
2440: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2441: LD_ADDR_OWVAR 29
2445: PUSH
2446: LD_INT 10
2448: PUSH
2449: LD_INT 12
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
2456: LD_ADDR_OWVAR 30
2460: PUSH
2461: LD_INT 3
2463: PUSH
2464: LD_INT 0
2466: PUSH
2467: LD_INT 0
2469: PUSH
2470: LD_INT 0
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: LIST
2477: LIST
2478: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
2479: LD_ADDR_OWVAR 31
2483: PUSH
2484: LD_INT 4
2486: PUSH
2487: LD_INT 1
2489: PUSH
2490: LD_INT 1
2492: PUSH
2493: LD_INT 0
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: ST_TO_ADDR
// un = CreateHuman ;
2502: LD_ADDR_VAR 0 4
2506: PUSH
2507: CALL_OW 44
2511: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2512: LD_VAR 0 4
2516: PPUSH
2517: LD_INT 11
2519: PPUSH
2520: LD_INT 0
2522: PPUSH
2523: CALL_OW 49
// end ; if count = 5 then
2527: LD_VAR 0 1
2531: PUSH
2532: LD_INT 5
2534: EQUAL
2535: IFFALSE 2789
// begin hc_class := 1 ;
2537: LD_ADDR_OWVAR 28
2541: PUSH
2542: LD_INT 1
2544: ST_TO_ADDR
// hc_sex := sex_male ;
2545: LD_ADDR_OWVAR 27
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2553: LD_ADDR_OWVAR 33
2557: PUSH
2558: LD_STRING SecondCharsGal
2560: ST_TO_ADDR
// hc_face_number := 34 ;
2561: LD_ADDR_OWVAR 34
2565: PUSH
2566: LD_INT 34
2568: ST_TO_ADDR
// hc_name := Ian Hill ;
2569: LD_ADDR_OWVAR 26
2573: PUSH
2574: LD_STRING Ian Hill
2576: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2577: LD_ADDR_OWVAR 29
2581: PUSH
2582: LD_INT 10
2584: PUSH
2585: LD_INT 12
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
2592: LD_ADDR_OWVAR 30
2596: PUSH
2597: LD_INT 3
2599: PUSH
2600: LD_INT 0
2602: PUSH
2603: LD_INT 0
2605: PUSH
2606: LD_INT 0
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
2615: LD_ADDR_OWVAR 31
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: LD_INT 1
2625: PUSH
2626: LD_INT 1
2628: PUSH
2629: LD_INT 0
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: ST_TO_ADDR
// un = CreateHuman ;
2638: LD_ADDR_VAR 0 4
2642: PUSH
2643: CALL_OW 44
2647: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2648: LD_VAR 0 4
2652: PPUSH
2653: LD_INT 11
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// hc_class := 1 ;
2663: LD_ADDR_OWVAR 28
2667: PUSH
2668: LD_INT 1
2670: ST_TO_ADDR
// hc_sex := sex_female ;
2671: LD_ADDR_OWVAR 27
2675: PUSH
2676: LD_INT 2
2678: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2679: LD_ADDR_OWVAR 33
2683: PUSH
2684: LD_STRING SecondCharsGal
2686: ST_TO_ADDR
// hc_face_number := 41 ;
2687: LD_ADDR_OWVAR 34
2691: PUSH
2692: LD_INT 41
2694: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2695: LD_ADDR_OWVAR 26
2699: PUSH
2700: LD_STRING Kate Wadsworth
2702: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2703: LD_ADDR_OWVAR 29
2707: PUSH
2708: LD_INT 9
2710: PUSH
2711: LD_INT 9
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2718: LD_ADDR_OWVAR 30
2722: PUSH
2723: LD_INT 1
2725: PUSH
2726: LD_INT 2
2728: PUSH
2729: LD_INT 0
2731: PUSH
2732: LD_INT 0
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: LIST
2739: LIST
2740: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2741: LD_ADDR_OWVAR 31
2745: PUSH
2746: LD_INT 2
2748: PUSH
2749: LD_INT 3
2751: PUSH
2752: LD_INT 1
2754: PUSH
2755: LD_INT 0
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: LIST
2762: LIST
2763: ST_TO_ADDR
// un = CreateHuman ;
2764: LD_ADDR_VAR 0 4
2768: PUSH
2769: CALL_OW 44
2773: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2774: LD_VAR 0 4
2778: PPUSH
2779: LD_INT 11
2781: PPUSH
2782: LD_INT 0
2784: PPUSH
2785: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2789: LD_INT 11
2791: PPUSH
2792: LD_INT 22
2794: PUSH
2795: LD_INT 1
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 21
2804: PUSH
2805: LD_INT 1
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PUSH
2812: LD_INT 26
2814: PUSH
2815: LD_INT 1
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: LIST
2826: PPUSH
2827: CALL_OW 70
2831: PUSH
2832: LD_INT 1
2834: ARRAY
2835: PPUSH
2836: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2840: LD_INT 11
2842: PPUSH
2843: LD_INT 22
2845: PUSH
2846: LD_INT 1
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PUSH
2853: LD_INT 21
2855: PUSH
2856: LD_INT 1
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: PUSH
2863: LD_INT 26
2865: PUSH
2866: LD_INT 1
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: LIST
2877: PPUSH
2878: CALL_OW 70
2882: PUSH
2883: LD_INT 1
2885: ARRAY
2886: PPUSH
2887: LD_STRING D6-Sol3-1
2889: PPUSH
2890: CALL_OW 88
// end ; end_of_file
2894: LD_VAR 0 2
2898: RET
// export function PrepareRussianCommander ; begin
2899: LD_INT 0
2901: PPUSH
// uc_side = 3 ;
2902: LD_ADDR_OWVAR 20
2906: PUSH
2907: LD_INT 3
2909: ST_TO_ADDR
// uc_nation = 3 ;
2910: LD_ADDR_OWVAR 21
2914: PUSH
2915: LD_INT 3
2917: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2918: LD_ADDR_EXP 15
2922: PUSH
2923: LD_STRING Stolypin
2925: PPUSH
2926: CALL_OW 25
2930: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2931: LD_EXP 15
2935: PPUSH
2936: LD_INT 21
2938: PPUSH
2939: CALL_OW 52
// end ;
2943: LD_VAR 0 1
2947: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2948: LD_INT 0
2950: PPUSH
2951: PPUSH
2952: PPUSH
2953: PPUSH
// if Difficulty > 1 then
2954: LD_OWVAR 67
2958: PUSH
2959: LD_INT 1
2961: GREATER
2962: IFFALSE 3072
// begin uc_side := 3 ;
2964: LD_ADDR_OWVAR 20
2968: PUSH
2969: LD_INT 3
2971: ST_TO_ADDR
// uc_nation := 3 ;
2972: LD_ADDR_OWVAR 21
2976: PUSH
2977: LD_INT 3
2979: ST_TO_ADDR
// InitHc_All ( ) ;
2980: CALL_OW 584
// InitBc ;
2984: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
2988: LD_INT 0
2990: PPUSH
2991: LD_INT 1
2993: PPUSH
2994: LD_INT 4
2996: PPUSH
2997: CALL_OW 380
// bc_type := b_breastwork ;
3001: LD_ADDR_OWVAR 42
3005: PUSH
3006: LD_INT 31
3008: ST_TO_ADDR
// bc_level := 4 ;
3009: LD_ADDR_OWVAR 43
3013: PUSH
3014: LD_INT 4
3016: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3017: LD_ADDR_VAR 0 3
3021: PUSH
3022: LD_INT 100
3024: PPUSH
3025: LD_INT 58
3027: PPUSH
3028: LD_INT 2
3030: PPUSH
3031: CALL_OW 47
3035: ST_TO_ADDR
// un := CreateHuman ;
3036: LD_ADDR_VAR 0 4
3040: PUSH
3041: CALL_OW 44
3045: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3046: LD_VAR 0 4
3050: PPUSH
3051: LD_INT 5
3053: PPUSH
3054: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3058: LD_VAR 0 4
3062: PPUSH
3063: LD_VAR 0 3
3067: PPUSH
3068: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3072: LD_INT 3
3074: PPUSH
3075: LD_INT 3
3077: PPUSH
3078: LD_INT 22
3080: PPUSH
3081: LD_EXP 16
3085: PPUSH
3086: LD_EXP 17
3090: PPUSH
3091: CALL_OW 12
3095: PPUSH
3096: LD_INT 1
3098: PPUSH
3099: LD_INT 3
3101: PUSH
3102: LD_INT 4
3104: PUSH
3105: LD_INT 5
3107: PUSH
3108: LD_INT 6
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: PUSH
3117: LD_OWVAR 67
3121: ARRAY
3122: PPUSH
3123: CALL 4325 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3127: LD_INT 3
3129: PPUSH
3130: LD_INT 3
3132: PPUSH
3133: LD_INT 21
3135: PPUSH
3136: LD_EXP 16
3140: PPUSH
3141: LD_EXP 17
3145: PPUSH
3146: CALL_OW 12
3150: PPUSH
3151: LD_INT 2
3153: PPUSH
3154: LD_INT 3
3156: PPUSH
3157: CALL 4325 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3161: LD_INT 3
3163: PPUSH
3164: LD_INT 3
3166: PPUSH
3167: LD_INT 1
3169: PPUSH
3170: LD_EXP 16
3174: PPUSH
3175: LD_EXP 17
3179: PPUSH
3180: CALL_OW 12
3184: PPUSH
3185: LD_INT 4
3187: PPUSH
3188: LD_INT 3
3190: PPUSH
3191: CALL 4325 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3195: LD_INT 3
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 24
3203: PPUSH
3204: LD_EXP 16
3208: PPUSH
3209: LD_EXP 17
3213: PPUSH
3214: CALL_OW 12
3218: PPUSH
3219: LD_INT 3
3221: PPUSH
3222: LD_INT 5
3224: PPUSH
3225: CALL 4325 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3229: LD_ADDR_VAR 0 2
3233: PUSH
3234: LD_INT 22
3236: PUSH
3237: LD_INT 3
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: LD_INT 30
3246: PUSH
3247: LD_INT 32
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PPUSH
3258: CALL_OW 69
3262: PUSH
3263: FOR_IN
3264: IFFALSE 3304
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3266: LD_INT 3
3268: PPUSH
3269: LD_INT 3
3271: PPUSH
3272: LD_VAR 0 2
3276: PPUSH
3277: LD_EXP 16
3281: PPUSH
3282: LD_EXP 17
3286: PPUSH
3287: CALL_OW 12
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 1
3297: PPUSH
3298: CALL 4325 0 6
3302: GO 3263
3304: POP
3305: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3306: LD_ADDR_VAR 0 2
3310: PUSH
3311: LD_INT 22
3313: PUSH
3314: LD_INT 3
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: PUSH
3321: LD_INT 30
3323: PUSH
3324: LD_INT 31
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PPUSH
3335: CALL_OW 69
3339: PUSH
3340: FOR_IN
3341: IFFALSE 3369
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3343: LD_EXP 16
3347: PPUSH
3348: LD_EXP 17
3352: PPUSH
3353: CALL_OW 12
3357: PPUSH
3358: LD_VAR 0 2
3362: PPUSH
3363: CALL 4434 0 2
3367: GO 3340
3369: POP
3370: POP
// end ;
3371: LD_VAR 0 1
3375: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3376: LD_INT 0
3378: PPUSH
3379: PPUSH
3380: PPUSH
3381: PPUSH
// uc_side = 6 ;
3382: LD_ADDR_OWVAR 20
3386: PUSH
3387: LD_INT 6
3389: ST_TO_ADDR
// uc_nation = 3 ;
3390: LD_ADDR_OWVAR 21
3394: PUSH
3395: LD_INT 3
3397: ST_TO_ADDR
// InitHC_All ( ) ;
3398: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3402: LD_ADDR_VAR 0 2
3406: PUSH
3407: DOUBLE
3408: LD_INT 1
3410: DEC
3411: ST_TO_ADDR
3412: LD_INT 1
3414: PUSH
3415: LD_INT 2
3417: PUSH
3418: LD_INT 2
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PUSH
3430: LD_OWVAR 67
3434: ARRAY
3435: PUSH
3436: FOR_TO
3437: IFFALSE 3605
// begin vc_engine = 1 ;
3439: LD_ADDR_OWVAR 39
3443: PUSH
3444: LD_INT 1
3446: ST_TO_ADDR
// vc_control = 1 ;
3447: LD_ADDR_OWVAR 38
3451: PUSH
3452: LD_INT 1
3454: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3455: LD_ADDR_OWVAR 40
3459: PUSH
3460: LD_INT 42
3462: PUSH
3463: LD_INT 42
3465: PUSH
3466: LD_INT 43
3468: PUSH
3469: LD_INT 43
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: LD_OWVAR 67
3482: ARRAY
3483: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3484: LD_ADDR_OWVAR 37
3488: PUSH
3489: LD_INT 21
3491: PUSH
3492: LD_INT 22
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 22
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: PUSH
3507: LD_OWVAR 67
3511: ARRAY
3512: ST_TO_ADDR
// veh = CreateVehicle ;
3513: LD_ADDR_VAR 0 3
3517: PUSH
3518: CALL_OW 45
3522: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3523: LD_VAR 0 3
3527: PPUSH
3528: LD_INT 3
3530: PPUSH
3531: LD_INT 0
3533: PPUSH
3534: CALL_OW 49
// hc_gallery =  ;
3538: LD_ADDR_OWVAR 33
3542: PUSH
3543: LD_STRING 
3545: ST_TO_ADDR
// hc_name =  ;
3546: LD_ADDR_OWVAR 26
3550: PUSH
3551: LD_STRING 
3553: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3554: LD_INT 0
3556: PPUSH
3557: LD_INT 3
3559: PPUSH
3560: LD_EXP 16
3564: PPUSH
3565: LD_EXP 17
3569: PPUSH
3570: CALL_OW 12
3574: PPUSH
3575: CALL_OW 380
// un = CreateHuman ;
3579: LD_ADDR_VAR 0 4
3583: PUSH
3584: CALL_OW 44
3588: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3589: LD_VAR 0 4
3593: PPUSH
3594: LD_VAR 0 3
3598: PPUSH
3599: CALL_OW 52
// end ;
3603: GO 3436
3605: POP
3606: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3607: LD_INT 0
3609: PPUSH
3610: LD_INT 2
3612: PPUSH
3613: LD_EXP 16
3617: PPUSH
3618: LD_EXP 17
3622: PPUSH
3623: CALL_OW 12
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PPUSH
3632: CALL_OW 380
// un = CreateHuman ;
3636: LD_ADDR_VAR 0 4
3640: PUSH
3641: CALL_OW 44
3645: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3646: LD_VAR 0 4
3650: PPUSH
3651: LD_INT 3
3653: PPUSH
3654: LD_INT 0
3656: PPUSH
3657: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3661: LD_INT 0
3663: PPUSH
3664: LD_INT 4
3666: PPUSH
3667: LD_EXP 16
3671: PPUSH
3672: LD_EXP 17
3676: PPUSH
3677: CALL_OW 12
3681: PUSH
3682: LD_INT 2
3684: PLUS
3685: PPUSH
3686: CALL_OW 380
// un = CreateHuman ;
3690: LD_ADDR_VAR 0 4
3694: PUSH
3695: CALL_OW 44
3699: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3700: LD_VAR 0 4
3704: PPUSH
3705: LD_INT 3
3707: PPUSH
3708: LD_INT 0
3710: PPUSH
3711: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3715: LD_ADDR_VAR 0 2
3719: PUSH
3720: DOUBLE
3721: LD_INT 1
3723: DEC
3724: ST_TO_ADDR
3725: LD_INT 2
3727: PUSH
3728: LD_INT 3
3730: PUSH
3731: LD_INT 3
3733: PUSH
3734: LD_INT 4
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: PUSH
3743: LD_OWVAR 67
3747: ARRAY
3748: PUSH
3749: LD_INT 1
3751: PPUSH
3752: LD_INT 3
3754: PPUSH
3755: CALL_OW 12
3759: PLUS
3760: PUSH
3761: FOR_TO
3762: IFFALSE 3832
// begin hc_gallery =  ;
3764: LD_ADDR_OWVAR 33
3768: PUSH
3769: LD_STRING 
3771: ST_TO_ADDR
// hc_name =  ;
3772: LD_ADDR_OWVAR 26
3776: PUSH
3777: LD_STRING 
3779: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3780: LD_INT 0
3782: PPUSH
3783: LD_INT 1
3785: PPUSH
3786: LD_EXP 16
3790: PPUSH
3791: LD_EXP 17
3795: PPUSH
3796: CALL_OW 12
3800: PPUSH
3801: CALL_OW 380
// un = CreateHuman ;
3805: LD_ADDR_VAR 0 4
3809: PUSH
3810: CALL_OW 44
3814: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3815: LD_VAR 0 4
3819: PPUSH
3820: LD_INT 3
3822: PPUSH
3823: LD_INT 0
3825: PPUSH
3826: CALL_OW 49
// end ;
3830: GO 3761
3832: POP
3833: POP
// vc_engine = 1 ;
3834: LD_ADDR_OWVAR 39
3838: PUSH
3839: LD_INT 1
3841: ST_TO_ADDR
// vc_control = 1 ;
3842: LD_ADDR_OWVAR 38
3846: PUSH
3847: LD_INT 1
3849: ST_TO_ADDR
// vc_weapon = 51 ;
3850: LD_ADDR_OWVAR 40
3854: PUSH
3855: LD_INT 51
3857: ST_TO_ADDR
// vc_chassis = 22 ;
3858: LD_ADDR_OWVAR 37
3862: PUSH
3863: LD_INT 22
3865: ST_TO_ADDR
// veh = CreateVehicle ;
3866: LD_ADDR_VAR 0 3
3870: PUSH
3871: CALL_OW 45
3875: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3876: LD_VAR 0 3
3880: PPUSH
3881: LD_INT 3
3883: PPUSH
3884: LD_INT 0
3886: PPUSH
3887: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3891: LD_VAR 0 3
3895: PPUSH
3896: LD_INT 1
3898: PPUSH
3899: LD_INT 100
3901: PPUSH
3902: CALL_OW 290
// hc_gallery =  ;
3906: LD_ADDR_OWVAR 33
3910: PUSH
3911: LD_STRING 
3913: ST_TO_ADDR
// hc_name =  ;
3914: LD_ADDR_OWVAR 26
3918: PUSH
3919: LD_STRING 
3921: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3922: LD_INT 0
3924: PPUSH
3925: LD_INT 3
3927: PPUSH
3928: LD_EXP 16
3932: PPUSH
3933: LD_EXP 17
3937: PPUSH
3938: CALL_OW 12
3942: PPUSH
3943: CALL_OW 380
// un = CreateHuman ;
3947: LD_ADDR_VAR 0 4
3951: PUSH
3952: CALL_OW 44
3956: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3957: LD_VAR 0 4
3961: PPUSH
3962: LD_VAR 0 3
3966: PPUSH
3967: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3971: LD_ADDR_VAR 0 2
3975: PUSH
3976: LD_INT 22
3978: PUSH
3979: LD_INT 6
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: PUSH
3986: LD_INT 1
3988: PUSH
3989: LD_INT 3
3991: PUSH
3992: LD_INT 25
3994: PUSH
3995: LD_INT 2
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PUSH
4006: LD_INT 3
4008: PUSH
4009: LD_INT 25
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: LIST
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: PPUSH
4032: CALL_OW 69
4036: PUSH
4037: FOR_IN
4038: IFFALSE 4057
// ComAgressiveMove ( i , 45 , 46 ) ;
4040: LD_VAR 0 2
4044: PPUSH
4045: LD_INT 45
4047: PPUSH
4048: LD_INT 46
4050: PPUSH
4051: CALL_OW 114
4055: GO 4037
4057: POP
4058: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4059: LD_ADDR_VAR 0 2
4063: PUSH
4064: LD_INT 22
4066: PUSH
4067: LD_INT 6
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PUSH
4074: LD_INT 25
4076: PUSH
4077: LD_INT 2
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 69
4092: PUSH
4093: FOR_IN
4094: IFFALSE 4125
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4096: LD_ADDR_EXP 21
4100: PUSH
4101: LD_VAR 0 2
4105: PPUSH
4106: LD_INT 0
4108: PPUSH
4109: LD_INT 48
4111: PPUSH
4112: LD_INT 55
4114: PPUSH
4115: LD_INT 5
4117: PPUSH
4118: CALL_OW 145
4122: ST_TO_ADDR
4123: GO 4093
4125: POP
4126: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4127: LD_ADDR_VAR 0 2
4131: PUSH
4132: LD_INT 22
4134: PUSH
4135: LD_INT 6
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 25
4144: PUSH
4145: LD_INT 4
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PPUSH
4156: CALL_OW 69
4160: PUSH
4161: FOR_IN
4162: IFFALSE 4181
// ComMoveXY ( i , 39 , 55 ) ;
4164: LD_VAR 0 2
4168: PPUSH
4169: LD_INT 39
4171: PPUSH
4172: LD_INT 55
4174: PPUSH
4175: CALL_OW 111
4179: GO 4161
4181: POP
4182: POP
// end ;
4183: LD_VAR 0 1
4187: RET
// export function PrepareFirstAttack ; var i , un ; begin
4188: LD_INT 0
4190: PPUSH
4191: PPUSH
4192: PPUSH
// uc_side = 5 ;
4193: LD_ADDR_OWVAR 20
4197: PUSH
4198: LD_INT 5
4200: ST_TO_ADDR
// uc_nation = 3 ;
4201: LD_ADDR_OWVAR 21
4205: PUSH
4206: LD_INT 3
4208: ST_TO_ADDR
// for i := 1 to 4 do
4209: LD_ADDR_VAR 0 2
4213: PUSH
4214: DOUBLE
4215: LD_INT 1
4217: DEC
4218: ST_TO_ADDR
4219: LD_INT 4
4221: PUSH
4222: FOR_TO
4223: IFFALSE 4310
// begin InitHC_All ( ) ;
4225: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4229: LD_INT 0
4231: PPUSH
4232: LD_INT 1
4234: PPUSH
4235: LD_EXP 16
4239: PPUSH
4240: LD_EXP 17
4244: PPUSH
4245: CALL_OW 12
4249: PPUSH
4250: CALL_OW 380
// un = CreateHuman ;
4254: LD_ADDR_VAR 0 3
4258: PUSH
4259: CALL_OW 44
4263: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_INT 4
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4279: LD_VAR 0 3
4283: PPUSH
4284: LD_EXP 1
4288: PPUSH
4289: CALL_OW 250
4293: PPUSH
4294: LD_EXP 1
4298: PPUSH
4299: CALL_OW 251
4303: PPUSH
4304: CALL_OW 114
// end ;
4308: GO 4222
4310: POP
4311: POP
// firstRussianAttack = 1 ;
4312: LD_ADDR_EXP 23
4316: PUSH
4317: LD_INT 1
4319: ST_TO_ADDR
// end ; end_of_file
4320: LD_VAR 0 1
4324: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4325: LD_INT 0
4327: PPUSH
4328: PPUSH
4329: PPUSH
// for i = 1 to count do
4330: LD_ADDR_VAR 0 8
4334: PUSH
4335: DOUBLE
4336: LD_INT 1
4338: DEC
4339: ST_TO_ADDR
4340: LD_VAR 0 6
4344: PUSH
4345: FOR_TO
4346: IFFALSE 4427
// begin uc_side = side ;
4348: LD_ADDR_OWVAR 20
4352: PUSH
4353: LD_VAR 0 1
4357: ST_TO_ADDR
// uc_nation = nation ;
4358: LD_ADDR_OWVAR 21
4362: PUSH
4363: LD_VAR 0 2
4367: ST_TO_ADDR
// hc_gallery =  ;
4368: LD_ADDR_OWVAR 33
4372: PUSH
4373: LD_STRING 
4375: ST_TO_ADDR
// hc_name =  ;
4376: LD_ADDR_OWVAR 26
4380: PUSH
4381: LD_STRING 
4383: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4384: LD_INT 0
4386: PPUSH
4387: LD_VAR 0 5
4391: PPUSH
4392: LD_VAR 0 4
4396: PPUSH
4397: CALL_OW 380
// un = CreateHuman ;
4401: LD_ADDR_VAR 0 9
4405: PUSH
4406: CALL_OW 44
4410: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4411: LD_VAR 0 9
4415: PPUSH
4416: LD_VAR 0 3
4420: PPUSH
4421: CALL_OW 52
// end ;
4425: GO 4345
4427: POP
4428: POP
// end ;
4429: LD_VAR 0 7
4433: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4434: LD_INT 0
4436: PPUSH
4437: PPUSH
4438: PPUSH
// uc_side := GetSide ( b ) ;
4439: LD_ADDR_OWVAR 20
4443: PUSH
4444: LD_VAR 0 2
4448: PPUSH
4449: CALL_OW 255
4453: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4454: LD_ADDR_OWVAR 21
4458: PUSH
4459: LD_VAR 0 2
4463: PPUSH
4464: CALL_OW 248
4468: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4469: LD_INT 0
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: LD_VAR 0 1
4479: PPUSH
4480: CALL_OW 380
// un = CreateHuman ;
4484: LD_ADDR_VAR 0 4
4488: PUSH
4489: CALL_OW 44
4493: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4494: LD_ADDR_VAR 0 5
4498: PUSH
4499: LD_VAR 0 2
4503: PPUSH
4504: CALL_OW 254
4508: PUSH
4509: LD_INT 3
4511: MINUS
4512: ST_TO_ADDR
// if dir < 0 then
4513: LD_VAR 0 5
4517: PUSH
4518: LD_INT 0
4520: LESS
4521: IFFALSE 4537
// dir := 6 + dir ;
4523: LD_ADDR_VAR 0 5
4527: PUSH
4528: LD_INT 6
4530: PUSH
4531: LD_VAR 0 5
4535: PLUS
4536: ST_TO_ADDR
// SetDir ( un , dir ) ;
4537: LD_VAR 0 4
4541: PPUSH
4542: LD_VAR 0 5
4546: PPUSH
4547: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4551: LD_VAR 0 4
4555: PPUSH
4556: LD_VAR 0 2
4560: PPUSH
4561: CALL_OW 52
// end ;
4565: LD_VAR 0 3
4569: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4570: LD_INT 0
4572: PPUSH
4573: PPUSH
4574: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4575: LD_ADDR_VAR 0 6
4579: PUSH
4580: LD_VAR 0 1
4584: PUSH
4585: LD_INT 1
4587: PPUSH
4588: LD_VAR 0 1
4592: PPUSH
4593: CALL_OW 12
4597: ARRAY
4598: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4599: LD_VAR 0 6
4603: PPUSH
4604: CALL_OW 258
4608: PUSH
4609: LD_INT 1
4611: EQUAL
4612: IFFALSE 4630
// Say ( speaker , dialogMID ) else
4614: LD_VAR 0 6
4618: PPUSH
4619: LD_VAR 0 2
4623: PPUSH
4624: CALL_OW 88
4628: GO 4644
// Say ( speaker , dialogFID ) ;
4630: LD_VAR 0 6
4634: PPUSH
4635: LD_VAR 0 3
4639: PPUSH
4640: CALL_OW 88
// result := speaker ;
4644: LD_ADDR_VAR 0 4
4648: PUSH
4649: LD_VAR 0 6
4653: ST_TO_ADDR
// end ;
4654: LD_VAR 0 4
4658: RET
// export function PrepareDifficulty ; var tmp ; begin
4659: LD_INT 0
4661: PPUSH
4662: PPUSH
// if Difficulty = 1 then
4663: LD_OWVAR 67
4667: PUSH
4668: LD_INT 1
4670: EQUAL
4671: IFFALSE 4689
// begin RuSoldMinLevel = 1 ;
4673: LD_ADDR_EXP 16
4677: PUSH
4678: LD_INT 1
4680: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4681: LD_ADDR_EXP 17
4685: PUSH
4686: LD_INT 2
4688: ST_TO_ADDR
// end ; if Difficulty = 2 then
4689: LD_OWVAR 67
4693: PUSH
4694: LD_INT 2
4696: EQUAL
4697: IFFALSE 4798
// begin RuSoldMinLevel = 2 ;
4699: LD_ADDR_EXP 16
4703: PUSH
4704: LD_INT 2
4706: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4707: LD_ADDR_EXP 17
4711: PUSH
4712: LD_INT 3
4714: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4715: LD_INT 23
4717: PPUSH
4718: CALL_OW 64
// uc_nation = 3 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 3
4729: ST_TO_ADDR
// uc_side = 3 ;
4730: LD_ADDR_OWVAR 20
4734: PUSH
4735: LD_INT 3
4737: ST_TO_ADDR
// bc_level = 5 ;
4738: LD_ADDR_OWVAR 43
4742: PUSH
4743: LD_INT 5
4745: ST_TO_ADDR
// bc_type = 32 ;
4746: LD_ADDR_OWVAR 42
4750: PUSH
4751: LD_INT 32
4753: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4754: LD_ADDR_VAR 0 2
4758: PUSH
4759: LD_INT 76
4761: PPUSH
4762: LD_INT 91
4764: PPUSH
4765: LD_INT 2
4767: PPUSH
4768: CALL_OW 47
4772: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4773: LD_VAR 0 2
4777: PPUSH
4778: LD_INT 43
4780: PPUSH
4781: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4785: LD_INT 51
4787: PPUSH
4788: LD_INT 3
4790: PPUSH
4791: LD_INT 1
4793: PPUSH
4794: CALL_OW 322
// end ; if Difficulty >= 3 then
4798: LD_OWVAR 67
4802: PUSH
4803: LD_INT 3
4805: GREATEREQUAL
4806: IFFALSE 4970
// begin RuSoldMinLevel = Difficulty ;
4808: LD_ADDR_EXP 16
4812: PUSH
4813: LD_OWVAR 67
4817: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4818: LD_ADDR_EXP 17
4822: PUSH
4823: LD_INT 4
4825: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4826: LD_INT 26
4828: PPUSH
4829: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4833: LD_INT 23
4835: PPUSH
4836: CALL_OW 64
// uc_nation = 3 ;
4840: LD_ADDR_OWVAR 21
4844: PUSH
4845: LD_INT 3
4847: ST_TO_ADDR
// uc_side = 3 ;
4848: LD_ADDR_OWVAR 20
4852: PUSH
4853: LD_INT 3
4855: ST_TO_ADDR
// bc_level = 5 ;
4856: LD_ADDR_OWVAR 43
4860: PUSH
4861: LD_INT 5
4863: ST_TO_ADDR
// bc_type = 32 ;
4864: LD_ADDR_OWVAR 42
4868: PUSH
4869: LD_INT 32
4871: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4872: LD_ADDR_VAR 0 2
4876: PUSH
4877: LD_INT 76
4879: PPUSH
4880: LD_INT 91
4882: PPUSH
4883: LD_INT 2
4885: PPUSH
4886: CALL_OW 47
4890: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4891: LD_VAR 0 2
4895: PPUSH
4896: LD_INT 44
4898: PPUSH
4899: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4903: LD_ADDR_VAR 0 2
4907: PUSH
4908: LD_INT 83
4910: PPUSH
4911: LD_INT 84
4913: PPUSH
4914: LD_INT 2
4916: PPUSH
4917: CALL_OW 47
4921: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4922: LD_VAR 0 2
4926: PPUSH
4927: LD_INT 43
4929: PPUSH
4930: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4934: LD_INT 51
4936: PPUSH
4937: LD_INT 3
4939: PPUSH
4940: LD_INT 1
4942: PPUSH
4943: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4947: LD_INT 52
4949: PPUSH
4950: LD_INT 3
4952: PPUSH
4953: LD_INT 1
4955: PPUSH
4956: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4960: LD_INT 25
4962: PPUSH
4963: LD_INT 44
4965: PPUSH
4966: CALL_OW 431
// end ; end ;
4970: LD_VAR 0 1
4974: RET
// export function EnergyDialog ; begin
4975: LD_INT 0
4977: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4978: LD_INT 46
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 321
4988: PUSH
4989: LD_INT 1
4991: EQUAL
4992: PUSH
4993: LD_INT 35
4995: PPUSH
4996: LD_INT 1
4998: PPUSH
4999: CALL_OW 321
5003: PUSH
5004: LD_INT 1
5006: EQUAL
5007: AND
5008: IFFALSE 5032
// begin Say ( JMM , D9c-JMM-1 ) ;
5010: LD_EXP 1
5014: PPUSH
5015: LD_STRING D9c-JMM-1
5017: PPUSH
5018: CALL_OW 88
// energyVDialog = 1 ;
5022: LD_ADDR_EXP 33
5026: PUSH
5027: LD_INT 1
5029: ST_TO_ADDR
// end else
5030: GO 5186
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5032: LD_INT 35
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: CALL_OW 321
5042: PUSH
5043: LD_INT 2
5045: EQUAL
5046: PUSH
5047: LD_EXP 33
5051: PUSH
5052: LD_INT 0
5054: EQUAL
5055: AND
5056: IFFALSE 5078
// begin Say ( JMM , D9c-JMM-1a ) ;
5058: LD_EXP 1
5062: PPUSH
5063: LD_STRING D9c-JMM-1a
5065: PPUSH
5066: CALL_OW 88
// energyVDialog = 1 ;
5070: LD_ADDR_EXP 33
5074: PUSH
5075: LD_INT 1
5077: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5078: LD_INT 46
5080: PPUSH
5081: LD_INT 1
5083: PPUSH
5084: CALL_OW 321
5088: PUSH
5089: LD_INT 2
5091: EQUAL
5092: PUSH
5093: LD_EXP 33
5097: PUSH
5098: LD_INT 0
5100: EQUAL
5101: AND
5102: IFFALSE 5124
// begin Say ( JMM , D9c-JMM-1b ) ;
5104: LD_EXP 1
5108: PPUSH
5109: LD_STRING D9c-JMM-1b
5111: PPUSH
5112: CALL_OW 88
// energyVDialog = 1 ;
5116: LD_ADDR_EXP 33
5120: PUSH
5121: LD_INT 1
5123: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5124: LD_INT 46
5126: PPUSH
5127: LD_INT 1
5129: PPUSH
5130: CALL_OW 321
5134: PUSH
5135: LD_INT 2
5137: EQUAL
5138: PUSH
5139: LD_INT 21
5141: PPUSH
5142: LD_INT 1
5144: PPUSH
5145: CALL_OW 321
5149: PUSH
5150: LD_INT 2
5152: EQUAL
5153: AND
5154: PUSH
5155: LD_EXP 33
5159: PUSH
5160: LD_INT 0
5162: EQUAL
5163: AND
5164: IFFALSE 5186
// begin Say ( JMM , D9c-JMM-1c ) ;
5166: LD_EXP 1
5170: PPUSH
5171: LD_STRING D9c-JMM-1c
5173: PPUSH
5174: CALL_OW 88
// energyVDialog = 1 ;
5178: LD_ADDR_EXP 33
5182: PUSH
5183: LD_INT 1
5185: ST_TO_ADDR
// end ; end ; end ;
5186: LD_VAR 0 1
5190: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5191: LD_INT 0
5193: PPUSH
5194: PPUSH
5195: PPUSH
5196: PPUSH
5197: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5198: LD_VAR 0 1
5202: NOT
5203: PUSH
5204: LD_VAR 0 1
5208: PPUSH
5209: CALL_OW 256
5213: PUSH
5214: LD_INT 250
5216: LESS
5217: OR
5218: PUSH
5219: LD_VAR 0 1
5223: PPUSH
5224: CALL_OW 314
5228: PUSH
5229: LD_VAR 0 1
5233: PPUSH
5234: CALL_OW 261
5238: PUSH
5239: LD_INT 20
5241: GREATER
5242: AND
5243: OR
5244: IFFALSE 5248
// exit ;
5246: GO 5613
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5248: LD_VAR 0 1
5252: PPUSH
5253: CALL_OW 261
5257: PUSH
5258: LD_INT 20
5260: LESS
5261: PUSH
5262: LD_VAR 0 1
5266: PPUSH
5267: CALL_OW 110
5271: PUSH
5272: LD_INT 21
5274: EQUAL
5275: NOT
5276: AND
5277: IFFALSE 5304
// begin ComStop ( bulldozer ) ;
5279: LD_VAR 0 1
5283: PPUSH
5284: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5288: LD_VAR 0 1
5292: PPUSH
5293: LD_INT 21
5295: PPUSH
5296: CALL_OW 109
// exit ;
5300: GO 5613
// end else
5302: GO 5331
// if GetFuel ( bulldozer ) > 20 then
5304: LD_VAR 0 1
5308: PPUSH
5309: CALL_OW 261
5313: PUSH
5314: LD_INT 20
5316: GREATER
5317: IFFALSE 5331
// SetTag ( bulldozer , 0 ) ;
5319: LD_VAR 0 1
5323: PPUSH
5324: LD_INT 0
5326: PPUSH
5327: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5331: LD_ADDR_VAR 0 5
5335: PUSH
5336: LD_VAR 0 2
5340: PPUSH
5341: CALL_OW 353
5345: ST_TO_ADDR
// tmp := [ ] ;
5346: LD_ADDR_VAR 0 6
5350: PUSH
5351: EMPTY
5352: ST_TO_ADDR
// for i = 1 to list do
5353: LD_ADDR_VAR 0 4
5357: PUSH
5358: DOUBLE
5359: LD_INT 1
5361: DEC
5362: ST_TO_ADDR
5363: LD_VAR 0 5
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5467
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5371: LD_VAR 0 5
5375: PUSH
5376: LD_VAR 0 4
5380: ARRAY
5381: PUSH
5382: LD_INT 1
5384: ARRAY
5385: PPUSH
5386: LD_VAR 0 5
5390: PUSH
5391: LD_VAR 0 4
5395: ARRAY
5396: PUSH
5397: LD_INT 2
5399: ARRAY
5400: PPUSH
5401: CALL_OW 554
5405: IFFALSE 5465
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5407: LD_ADDR_VAR 0 6
5411: PUSH
5412: LD_VAR 0 6
5416: PPUSH
5417: LD_VAR 0 6
5421: PUSH
5422: LD_INT 1
5424: PLUS
5425: PPUSH
5426: LD_VAR 0 5
5430: PUSH
5431: LD_VAR 0 4
5435: ARRAY
5436: PUSH
5437: LD_INT 1
5439: ARRAY
5440: PUSH
5441: LD_VAR 0 5
5445: PUSH
5446: LD_VAR 0 4
5450: ARRAY
5451: PUSH
5452: LD_INT 2
5454: ARRAY
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: PPUSH
5460: CALL_OW 1
5464: ST_TO_ADDR
// end ;
5465: GO 5368
5467: POP
5468: POP
// ComStop ( bulldozer ) ;
5469: LD_VAR 0 1
5473: PPUSH
5474: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5478: LD_ADDR_VAR 0 7
5482: PUSH
5483: LD_VAR 0 1
5487: PPUSH
5488: CALL_OW 250
5492: PUSH
5493: LD_VAR 0 1
5497: PPUSH
5498: CALL_OW 251
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: ST_TO_ADDR
// for i = tmp downto 1 do
5507: LD_ADDR_VAR 0 4
5511: PUSH
5512: DOUBLE
5513: LD_VAR 0 6
5517: INC
5518: ST_TO_ADDR
5519: LD_INT 1
5521: PUSH
5522: FOR_DOWNTO
5523: IFFALSE 5611
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5525: LD_ADDR_VAR 0 7
5529: PUSH
5530: LD_VAR 0 7
5534: PUSH
5535: LD_INT 1
5537: ARRAY
5538: PPUSH
5539: LD_VAR 0 7
5543: PUSH
5544: LD_INT 2
5546: ARRAY
5547: PPUSH
5548: LD_VAR 0 6
5552: PPUSH
5553: CALL 5714 0 3
5557: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5558: LD_VAR 0 1
5562: PPUSH
5563: LD_VAR 0 7
5567: PUSH
5568: LD_INT 1
5570: ARRAY
5571: PPUSH
5572: LD_VAR 0 7
5576: PUSH
5577: LD_INT 2
5579: ARRAY
5580: PPUSH
5581: CALL 5618 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5585: LD_ADDR_VAR 0 6
5589: PUSH
5590: LD_VAR 0 6
5594: PPUSH
5595: LD_VAR 0 7
5599: PUSH
5600: LD_INT 3
5602: ARRAY
5603: PPUSH
5604: CALL_OW 3
5608: ST_TO_ADDR
// end ;
5609: GO 5522
5611: POP
5612: POP
// end ;
5613: LD_VAR 0 3
5617: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5618: LD_INT 0
5620: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5621: LD_VAR 0 2
5625: PPUSH
5626: LD_VAR 0 3
5630: PPUSH
5631: CALL_OW 351
5635: PUSH
5636: LD_VAR 0 2
5640: PPUSH
5641: LD_VAR 0 3
5645: PPUSH
5646: CALL_OW 554
5650: AND
5651: PUSH
5652: LD_VAR 0 2
5656: PPUSH
5657: LD_VAR 0 3
5661: PPUSH
5662: CALL_OW 488
5666: AND
5667: PUSH
5668: LD_VAR 0 2
5672: PPUSH
5673: LD_VAR 0 3
5677: PPUSH
5678: CALL_OW 428
5682: PUSH
5683: LD_INT 1
5685: NEG
5686: EQUAL
5687: AND
5688: IFFALSE 5709
// AddComMoveXY ( bulldozer , x , y ) ;
5690: LD_VAR 0 1
5694: PPUSH
5695: LD_VAR 0 2
5699: PPUSH
5700: LD_VAR 0 3
5704: PPUSH
5705: CALL_OW 171
// end ;
5709: LD_VAR 0 4
5713: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5714: LD_INT 0
5716: PPUSH
5717: PPUSH
5718: PPUSH
5719: PPUSH
5720: PPUSH
5721: PPUSH
5722: PPUSH
// dist := 99999 ;
5723: LD_ADDR_VAR 0 6
5727: PUSH
5728: LD_INT 99999
5730: ST_TO_ADDR
// for i = 1 to list do
5731: LD_ADDR_VAR 0 5
5735: PUSH
5736: DOUBLE
5737: LD_INT 1
5739: DEC
5740: ST_TO_ADDR
5741: LD_VAR 0 3
5745: PUSH
5746: FOR_TO
5747: IFFALSE 5885
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5749: LD_ADDR_VAR 0 7
5753: PUSH
5754: LD_VAR 0 1
5758: PPUSH
5759: LD_VAR 0 2
5763: PPUSH
5764: LD_VAR 0 3
5768: PUSH
5769: LD_VAR 0 5
5773: ARRAY
5774: PUSH
5775: LD_INT 1
5777: ARRAY
5778: PPUSH
5779: LD_VAR 0 3
5783: PUSH
5784: LD_VAR 0 5
5788: ARRAY
5789: PUSH
5790: LD_INT 2
5792: ARRAY
5793: PPUSH
5794: CALL_OW 298
5798: ST_TO_ADDR
// if d = 0 then
5799: LD_VAR 0 7
5803: PUSH
5804: LD_INT 0
5806: EQUAL
5807: IFFALSE 5811
// continue ;
5809: GO 5746
// if d < dist then
5811: LD_VAR 0 7
5815: PUSH
5816: LD_VAR 0 6
5820: LESS
5821: IFFALSE 5883
// begin _x := list [ i ] [ 1 ] ;
5823: LD_ADDR_VAR 0 8
5827: PUSH
5828: LD_VAR 0 3
5832: PUSH
5833: LD_VAR 0 5
5837: ARRAY
5838: PUSH
5839: LD_INT 1
5841: ARRAY
5842: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5843: LD_ADDR_VAR 0 9
5847: PUSH
5848: LD_VAR 0 3
5852: PUSH
5853: LD_VAR 0 5
5857: ARRAY
5858: PUSH
5859: LD_INT 2
5861: ARRAY
5862: ST_TO_ADDR
// _i := i ;
5863: LD_ADDR_VAR 0 10
5867: PUSH
5868: LD_VAR 0 5
5872: ST_TO_ADDR
// dist := d ;
5873: LD_ADDR_VAR 0 6
5877: PUSH
5878: LD_VAR 0 7
5882: ST_TO_ADDR
// end ; end ;
5883: GO 5746
5885: POP
5886: POP
// result := [ _x , _y , _i , dist ] ;
5887: LD_ADDR_VAR 0 4
5891: PUSH
5892: LD_VAR 0 8
5896: PUSH
5897: LD_VAR 0 9
5901: PUSH
5902: LD_VAR 0 10
5906: PUSH
5907: LD_VAR 0 6
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: ST_TO_ADDR
// end ;
5918: LD_VAR 0 4
5922: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5923: LD_INT 0
5925: PPUSH
5926: PPUSH
// for i = 1 to 72 do
5927: LD_ADDR_VAR 0 5
5931: PUSH
5932: DOUBLE
5933: LD_INT 1
5935: DEC
5936: ST_TO_ADDR
5937: LD_INT 72
5939: PUSH
5940: FOR_TO
5941: IFFALSE 5995
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5943: LD_VAR 0 5
5947: PPUSH
5948: LD_VAR 0 1
5952: PPUSH
5953: CALL_OW 321
5957: PUSH
5958: LD_INT 1
5960: EQUAL
5961: PUSH
5962: LD_VAR 0 5
5966: PPUSH
5967: LD_VAR 0 3
5971: PPUSH
5972: CALL_OW 482
5976: AND
5977: IFFALSE 5993
// AddComResearch ( lab , i ) ;
5979: LD_VAR 0 2
5983: PPUSH
5984: LD_VAR 0 5
5988: PPUSH
5989: CALL_OW 184
5993: GO 5940
5995: POP
5996: POP
// end ;
5997: LD_VAR 0 4
6001: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6002: LD_INT 0
6004: PPUSH
6005: PPUSH
6006: PPUSH
6007: PPUSH
6008: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6009: LD_ADDR_VAR 0 7
6013: PUSH
6014: LD_VAR 0 2
6018: PPUSH
6019: CALL_OW 313
6023: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6024: LD_ADDR_VAR 0 8
6028: PUSH
6029: LD_VAR 0 3
6033: PPUSH
6034: LD_INT 22
6036: PUSH
6037: LD_VAR 0 1
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: PUSH
6046: LD_INT 25
6048: PUSH
6049: LD_INT 2
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: LD_INT 24
6058: PUSH
6059: LD_INT 750
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 3
6068: PUSH
6069: LD_INT 54
6071: PUSH
6072: EMPTY
6073: LIST
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: PPUSH
6085: CALL_OW 70
6089: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6090: LD_ADDR_VAR 0 5
6094: PUSH
6095: LD_VAR 0 3
6099: PPUSH
6100: LD_INT 22
6102: PUSH
6103: LD_VAR 0 1
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: LD_INT 21
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: PUSH
6122: LD_INT 3
6124: PUSH
6125: LD_INT 24
6127: PUSH
6128: LD_INT 1000
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: PPUSH
6147: CALL_OW 70
6151: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6152: LD_VAR 0 5
6156: NOT
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_VAR 0 1
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PUSH
6170: LD_INT 25
6172: PUSH
6173: LD_INT 2
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 24
6182: PUSH
6183: LD_INT 250
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 69
6199: NOT
6200: AND
6201: IFFALSE 6205
// exit ;
6203: GO 6301
// if buildingsList and engineerOkInside then
6205: LD_VAR 0 5
6209: PUSH
6210: LD_VAR 0 7
6214: AND
6215: IFFALSE 6241
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6217: LD_VAR 0 7
6221: PPUSH
6222: LD_INT 25
6224: PUSH
6225: LD_INT 2
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PPUSH
6232: CALL_OW 72
6236: PPUSH
6237: CALL_OW 122
// if buildingsList and engineerOkOutside then
6241: LD_VAR 0 5
6245: PUSH
6246: LD_VAR 0 8
6250: AND
6251: IFFALSE 6271
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6253: LD_VAR 0 8
6257: PPUSH
6258: LD_VAR 0 5
6262: PUSH
6263: LD_INT 1
6265: ARRAY
6266: PPUSH
6267: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6271: LD_VAR 0 5
6275: PUSH
6276: LD_INT 0
6278: EQUAL
6279: PUSH
6280: LD_VAR 0 8
6284: AND
6285: IFFALSE 6301
// ComEnterUnit ( engineerOkOutside , building ) ;
6287: LD_VAR 0 8
6291: PPUSH
6292: LD_VAR 0 2
6296: PPUSH
6297: CALL_OW 120
// end ;
6301: LD_VAR 0 4
6305: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6306: LD_INT 0
6308: PPUSH
6309: PPUSH
6310: PPUSH
6311: PPUSH
6312: PPUSH
6313: PPUSH
6314: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6315: LD_ADDR_VAR 0 6
6319: PUSH
6320: LD_INT 22
6322: PUSH
6323: LD_VAR 0 1
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PUSH
6332: LD_INT 25
6334: PUSH
6335: LD_INT 4
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 23
6344: PUSH
6345: LD_INT 2
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 24
6354: PUSH
6355: LD_INT 251
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: PPUSH
6368: CALL_OW 69
6372: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6373: LD_ADDR_VAR 0 7
6377: PUSH
6378: LD_VAR 0 3
6382: PPUSH
6383: LD_INT 22
6385: PUSH
6386: LD_VAR 0 1
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 23
6397: PUSH
6398: LD_INT 2
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 25
6407: PUSH
6408: LD_INT 4
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 50
6417: PUSH
6418: EMPTY
6419: LIST
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: PPUSH
6427: CALL_OW 70
6431: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6432: LD_ADDR_VAR 0 8
6436: PUSH
6437: LD_VAR 0 3
6441: PPUSH
6442: LD_INT 22
6444: PUSH
6445: LD_VAR 0 1
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 21
6456: PUSH
6457: LD_INT 1
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 3
6466: PUSH
6467: LD_INT 25
6469: PUSH
6470: LD_INT 3
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 3
6483: PUSH
6484: LD_INT 24
6486: PUSH
6487: LD_INT 750
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: PPUSH
6504: CALL_OW 70
6508: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6509: LD_ADDR_VAR 0 9
6513: PUSH
6514: LD_VAR 0 2
6518: PPUSH
6519: LD_INT 22
6521: PUSH
6522: LD_VAR 0 1
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 21
6533: PUSH
6534: LD_INT 1
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: LD_INT 25
6546: PUSH
6547: LD_INT 3
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 3
6560: PUSH
6561: LD_INT 24
6563: PUSH
6564: LD_INT 1000
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: PPUSH
6581: CALL_OW 70
6585: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6586: LD_VAR 0 8
6590: NOT
6591: PUSH
6592: LD_VAR 0 9
6596: NOT
6597: AND
6598: PUSH
6599: LD_VAR 0 6
6603: NOT
6604: AND
6605: IFFALSE 6609
// exit ;
6607: GO 6815
// if damageUnits and sciList then
6609: LD_VAR 0 8
6613: PUSH
6614: LD_VAR 0 6
6618: AND
6619: IFFALSE 6635
// ComMoveToArea ( damageUnits , healArea ) ;
6621: LD_VAR 0 8
6625: PPUSH
6626: LD_VAR 0 2
6630: PPUSH
6631: CALL_OW 113
// if unitsToHeal and sciList then
6635: LD_VAR 0 9
6639: PUSH
6640: LD_VAR 0 6
6644: AND
6645: IFFALSE 6656
// ComExitBuilding ( sciList ) ;
6647: LD_VAR 0 6
6651: PPUSH
6652: CALL_OW 122
// if unitsToHeal and sciListOutside then
6656: LD_VAR 0 9
6660: PUSH
6661: LD_VAR 0 7
6665: AND
6666: IFFALSE 6686
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6668: LD_VAR 0 7
6672: PPUSH
6673: LD_VAR 0 9
6677: PUSH
6678: LD_INT 1
6680: ARRAY
6681: PPUSH
6682: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6686: LD_VAR 0 8
6690: PUSH
6691: LD_INT 0
6693: EQUAL
6694: PUSH
6695: LD_VAR 0 9
6699: PUSH
6700: LD_INT 0
6702: EQUAL
6703: AND
6704: PUSH
6705: LD_VAR 0 7
6709: AND
6710: IFFALSE 6815
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6712: LD_ADDR_VAR 0 10
6716: PUSH
6717: LD_INT 22
6719: PUSH
6720: LD_VAR 0 1
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: LD_INT 21
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: LD_INT 30
6741: PUSH
6742: LD_INT 8
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: PPUSH
6754: CALL_OW 69
6758: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6759: LD_ADDR_VAR 0 11
6763: PUSH
6764: LD_INT 1
6766: PPUSH
6767: LD_VAR 0 10
6771: PPUSH
6772: CALL_OW 12
6776: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6777: LD_VAR 0 7
6781: PPUSH
6782: LD_INT 3
6784: PUSH
6785: LD_INT 60
6787: PUSH
6788: EMPTY
6789: LIST
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: PPUSH
6800: LD_VAR 0 10
6804: PUSH
6805: LD_VAR 0 11
6809: ARRAY
6810: PPUSH
6811: CALL_OW 120
// end ; end ;
6815: LD_VAR 0 5
6819: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6820: LD_INT 0
6822: PPUSH
6823: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6824: LD_INT 22
6826: PUSH
6827: LD_VAR 0 1
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 21
6838: PUSH
6839: LD_INT 2
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PPUSH
6850: CALL_OW 69
6854: PUSH
6855: LD_VAR 0 3
6859: LESSEQUAL
6860: IFFALSE 6927
// for i = 1 to vehCount do
6862: LD_ADDR_VAR 0 9
6866: PUSH
6867: DOUBLE
6868: LD_INT 1
6870: DEC
6871: ST_TO_ADDR
6872: LD_VAR 0 3
6876: PUSH
6877: FOR_TO
6878: IFFALSE 6925
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6880: LD_VAR 0 2
6884: PPUSH
6885: LD_VAR 0 7
6889: PPUSH
6890: LD_VAR 0 5
6894: PPUSH
6895: LD_VAR 0 6
6899: PPUSH
6900: LD_VAR 0 4
6904: PUSH
6905: LD_INT 1
6907: PPUSH
6908: LD_VAR 0 4
6912: PPUSH
6913: CALL_OW 12
6917: ARRAY
6918: PPUSH
6919: CALL_OW 185
6923: GO 6877
6925: POP
6926: POP
// end ;
6927: LD_VAR 0 8
6931: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6932: LD_INT 0
6934: PPUSH
6935: PPUSH
6936: PPUSH
6937: PPUSH
6938: PPUSH
6939: PPUSH
6940: PPUSH
6941: PPUSH
6942: PPUSH
6943: PPUSH
6944: PPUSH
// for i = 1 to medicCount do
6945: LD_ADDR_VAR 0 11
6949: PUSH
6950: DOUBLE
6951: LD_INT 1
6953: DEC
6954: ST_TO_ADDR
6955: LD_VAR 0 4
6959: PUSH
6960: FOR_TO
6961: IFFALSE 7031
// begin uc_side = side ;
6963: LD_ADDR_OWVAR 20
6967: PUSH
6968: LD_VAR 0 1
6972: ST_TO_ADDR
// uc_nation = nation ;
6973: LD_ADDR_OWVAR 21
6977: PUSH
6978: LD_VAR 0 2
6982: ST_TO_ADDR
// InitHC_All ( ) ;
6983: CALL_OW 584
// PrepareHuman ( false , 4 , skil ) ;
6987: LD_INT 0
6989: PPUSH
6990: LD_INT 4
6992: PPUSH
6993: LD_VAR 0 5
6997: PPUSH
6998: CALL_OW 380
// un = CreateHuman ;
7002: LD_ADDR_VAR 0 13
7006: PUSH
7007: CALL_OW 44
7011: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7012: LD_VAR 0 13
7016: PPUSH
7017: LD_VAR 0 6
7021: PPUSH
7022: LD_INT 0
7024: PPUSH
7025: CALL_OW 49
// end ;
7029: GO 6960
7031: POP
7032: POP
// for i = 1 to soldierCount do
7033: LD_ADDR_VAR 0 11
7037: PUSH
7038: DOUBLE
7039: LD_INT 1
7041: DEC
7042: ST_TO_ADDR
7043: LD_VAR 0 3
7047: PUSH
7048: FOR_TO
7049: IFFALSE 7119
// begin uc_side = side ;
7051: LD_ADDR_OWVAR 20
7055: PUSH
7056: LD_VAR 0 1
7060: ST_TO_ADDR
// uc_nation = nation ;
7061: LD_ADDR_OWVAR 21
7065: PUSH
7066: LD_VAR 0 2
7070: ST_TO_ADDR
// InitHC_All ( ) ;
7071: CALL_OW 584
// PrepareHuman ( false , 1 , skil ) ;
7075: LD_INT 0
7077: PPUSH
7078: LD_INT 1
7080: PPUSH
7081: LD_VAR 0 5
7085: PPUSH
7086: CALL_OW 380
// un = CreateHuman ;
7090: LD_ADDR_VAR 0 13
7094: PUSH
7095: CALL_OW 44
7099: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7100: LD_VAR 0 13
7104: PPUSH
7105: LD_VAR 0 6
7109: PPUSH
7110: LD_INT 0
7112: PPUSH
7113: CALL_OW 49
// end ;
7117: GO 7048
7119: POP
7120: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7121: LD_ADDR_VAR 0 16
7125: PUSH
7126: LD_INT 22
7128: PUSH
7129: LD_VAR 0 1
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 2
7140: PUSH
7141: LD_INT 25
7143: PUSH
7144: LD_INT 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 25
7153: PUSH
7154: LD_INT 5
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 25
7163: PUSH
7164: LD_INT 8
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 25
7173: PUSH
7174: LD_INT 9
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PPUSH
7192: CALL_OW 69
7196: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7197: LD_ADDR_VAR 0 15
7201: PUSH
7202: LD_INT 22
7204: PUSH
7205: LD_VAR 0 1
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 25
7216: PUSH
7217: LD_INT 4
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PPUSH
7228: CALL_OW 69
7232: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7233: LD_VAR 0 15
7237: PPUSH
7238: LD_VAR 0 7
7242: PPUSH
7243: CALL_OW 113
// if strategy = 1 then
7247: LD_VAR 0 9
7251: PUSH
7252: LD_INT 1
7254: EQUAL
7255: IFFALSE 7703
// begin for i in soldiersOK_list do
7257: LD_ADDR_VAR 0 11
7261: PUSH
7262: LD_VAR 0 16
7266: PUSH
7267: FOR_IN
7268: IFFALSE 7332
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7270: LD_VAR 0 11
7274: PPUSH
7275: LD_INT 91
7277: PPUSH
7278: LD_INT 63
7280: PPUSH
7281: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7285: LD_VAR 0 11
7289: PPUSH
7290: LD_INT 101
7292: PPUSH
7293: LD_INT 53
7295: PPUSH
7296: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7300: LD_VAR 0 11
7304: PPUSH
7305: LD_INT 75
7307: PPUSH
7308: LD_INT 23
7310: PPUSH
7311: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7315: LD_VAR 0 11
7319: PPUSH
7320: LD_INT 78
7322: PPUSH
7323: LD_INT 8
7325: PPUSH
7326: CALL_OW 174
// end ;
7330: GO 7267
7332: POP
7333: POP
// wait ( 0 0$30 ) ;
7334: LD_INT 1050
7336: PPUSH
7337: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7341: LD_INT 35
7343: PPUSH
7344: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7348: LD_ADDR_VAR 0 14
7352: PUSH
7353: LD_INT 22
7355: PUSH
7356: LD_VAR 0 1
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 1
7367: PUSH
7368: LD_INT 3
7370: PUSH
7371: LD_INT 24
7373: PUSH
7374: LD_INT 550
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 24
7387: PUSH
7388: LD_INT 250
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: LIST
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PPUSH
7404: CALL_OW 69
7408: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7409: LD_ADDR_VAR 0 16
7413: PUSH
7414: LD_INT 22
7416: PUSH
7417: LD_VAR 0 1
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 25
7428: PUSH
7429: LD_INT 1
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: LD_INT 24
7438: PUSH
7439: LD_INT 1000
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: PPUSH
7451: CALL_OW 69
7455: ST_TO_ADDR
// if medicCount then
7456: LD_VAR 0 4
7460: IFFALSE 7500
// begin if damageUnit_list then
7462: LD_VAR 0 14
7466: IFFALSE 7500
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7468: LD_VAR 0 14
7472: PPUSH
7473: LD_VAR 0 7
7477: PPUSH
7478: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7482: LD_VAR 0 4
7486: PPUSH
7487: LD_VAR 0 14
7491: PUSH
7492: LD_INT 1
7494: ARRAY
7495: PPUSH
7496: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7500: LD_ADDR_VAR 0 11
7504: PUSH
7505: LD_VAR 0 16
7509: PUSH
7510: FOR_IN
7511: IFFALSE 7687
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7513: LD_ADDR_VAR 0 19
7517: PUSH
7518: LD_INT 22
7520: PUSH
7521: LD_VAR 0 8
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PPUSH
7530: CALL_OW 69
7534: PPUSH
7535: LD_VAR 0 11
7539: PPUSH
7540: CALL_OW 74
7544: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7545: LD_ADDR_VAR 0 20
7549: PUSH
7550: LD_INT 22
7552: PUSH
7553: LD_VAR 0 8
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 2
7564: PUSH
7565: LD_INT 59
7567: PUSH
7568: EMPTY
7569: LIST
7570: PUSH
7571: LD_INT 21
7573: PUSH
7574: LD_INT 1
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_INT 21
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: PPUSH
7604: CALL_OW 69
7608: PPUSH
7609: LD_VAR 0 11
7613: PPUSH
7614: CALL_OW 74
7618: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7619: LD_VAR 0 11
7623: PPUSH
7624: LD_VAR 0 19
7628: PPUSH
7629: CALL_OW 296
7633: PUSH
7634: LD_INT 8
7636: PLUS
7637: PUSH
7638: LD_VAR 0 11
7642: PPUSH
7643: LD_VAR 0 20
7647: PPUSH
7648: CALL_OW 296
7652: LESS
7653: IFFALSE 7671
// ComAttackUnit ( i , target1 ) else
7655: LD_VAR 0 11
7659: PPUSH
7660: LD_VAR 0 19
7664: PPUSH
7665: CALL_OW 115
7669: GO 7685
// ComAttackUnit ( i , target2 ) ;
7671: LD_VAR 0 11
7675: PPUSH
7676: LD_VAR 0 20
7680: PPUSH
7681: CALL_OW 115
// end ;
7685: GO 7510
7687: POP
7688: POP
// until not soldiersOK_list and not damageUnit_list ;
7689: LD_VAR 0 16
7693: NOT
7694: PUSH
7695: LD_VAR 0 14
7699: NOT
7700: AND
7701: IFFALSE 7341
// end ; if strategy = 2 then
7703: LD_VAR 0 9
7707: PUSH
7708: LD_INT 2
7710: EQUAL
7711: IFFALSE 8129
// begin for i in soldiersOK_list do
7713: LD_ADDR_VAR 0 11
7717: PUSH
7718: LD_VAR 0 16
7722: PUSH
7723: FOR_IN
7724: IFFALSE 7758
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7726: LD_VAR 0 11
7730: PPUSH
7731: LD_INT 91
7733: PPUSH
7734: LD_INT 63
7736: PPUSH
7737: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7741: LD_VAR 0 11
7745: PPUSH
7746: LD_INT 75
7748: PPUSH
7749: LD_INT 33
7751: PPUSH
7752: CALL_OW 174
// end ;
7756: GO 7723
7758: POP
7759: POP
// wait ( 0 0$10 ) ;
7760: LD_INT 350
7762: PPUSH
7763: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7767: LD_INT 105
7769: PPUSH
7770: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7774: LD_ADDR_VAR 0 14
7778: PUSH
7779: LD_INT 22
7781: PUSH
7782: LD_VAR 0 1
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 1
7793: PUSH
7794: LD_INT 3
7796: PUSH
7797: LD_INT 24
7799: PUSH
7800: LD_INT 550
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: LD_INT 24
7813: PUSH
7814: LD_INT 250
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: LIST
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PPUSH
7830: CALL_OW 69
7834: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7835: LD_ADDR_VAR 0 16
7839: PUSH
7840: LD_INT 22
7842: PUSH
7843: LD_VAR 0 1
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 25
7854: PUSH
7855: LD_INT 1
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: LD_INT 24
7864: PUSH
7865: LD_INT 1000
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: LIST
7876: PPUSH
7877: CALL_OW 69
7881: ST_TO_ADDR
// if medicCount then
7882: LD_VAR 0 4
7886: IFFALSE 7926
// begin if damageUnit_list then
7888: LD_VAR 0 14
7892: IFFALSE 7926
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7894: LD_VAR 0 14
7898: PPUSH
7899: LD_VAR 0 7
7903: PPUSH
7904: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7908: LD_VAR 0 4
7912: PPUSH
7913: LD_VAR 0 14
7917: PUSH
7918: LD_INT 1
7920: ARRAY
7921: PPUSH
7922: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7926: LD_ADDR_VAR 0 11
7930: PUSH
7931: LD_VAR 0 16
7935: PUSH
7936: FOR_IN
7937: IFFALSE 8113
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7939: LD_ADDR_VAR 0 19
7943: PUSH
7944: LD_INT 22
7946: PUSH
7947: LD_VAR 0 8
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PPUSH
7956: CALL_OW 69
7960: PPUSH
7961: LD_VAR 0 11
7965: PPUSH
7966: CALL_OW 74
7970: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7971: LD_ADDR_VAR 0 20
7975: PUSH
7976: LD_INT 22
7978: PUSH
7979: LD_VAR 0 8
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 2
7990: PUSH
7991: LD_INT 59
7993: PUSH
7994: EMPTY
7995: LIST
7996: PUSH
7997: LD_INT 21
7999: PUSH
8000: LD_INT 1
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: LD_INT 21
8009: PUSH
8010: LD_INT 2
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: EMPTY
8028: LIST
8029: PPUSH
8030: CALL_OW 69
8034: PPUSH
8035: LD_VAR 0 11
8039: PPUSH
8040: CALL_OW 74
8044: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8045: LD_VAR 0 11
8049: PPUSH
8050: LD_VAR 0 19
8054: PPUSH
8055: CALL_OW 296
8059: PUSH
8060: LD_INT 8
8062: PLUS
8063: PUSH
8064: LD_VAR 0 11
8068: PPUSH
8069: LD_VAR 0 20
8073: PPUSH
8074: CALL_OW 296
8078: LESS
8079: IFFALSE 8097
// ComAttackUnit ( i , target1 ) else
8081: LD_VAR 0 11
8085: PPUSH
8086: LD_VAR 0 19
8090: PPUSH
8091: CALL_OW 115
8095: GO 8111
// ComAttackUnit ( i , target2 ) ;
8097: LD_VAR 0 11
8101: PPUSH
8102: LD_VAR 0 20
8106: PPUSH
8107: CALL_OW 115
// end ;
8111: GO 7936
8113: POP
8114: POP
// until not soldiersOK_list and not damageUnit_list ;
8115: LD_VAR 0 16
8119: NOT
8120: PUSH
8121: LD_VAR 0 14
8125: NOT
8126: AND
8127: IFFALSE 7767
// end ; if medic_list then
8129: LD_VAR 0 15
8133: IFFALSE 8273
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8135: LD_ADDR_VAR 0 15
8139: PUSH
8140: LD_INT 22
8142: PUSH
8143: LD_VAR 0 1
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PUSH
8152: LD_INT 25
8154: PUSH
8155: LD_INT 4
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PUSH
8162: LD_INT 50
8164: PUSH
8165: EMPTY
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PPUSH
8173: CALL_OW 69
8177: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8178: LD_INT 35
8180: PPUSH
8181: CALL_OW 67
// for i in medic_list do
8185: LD_ADDR_VAR 0 11
8189: PUSH
8190: LD_VAR 0 15
8194: PUSH
8195: FOR_IN
8196: IFFALSE 8264
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8198: LD_VAR 0 11
8202: PPUSH
8203: CALL_OW 314
8207: NOT
8208: PUSH
8209: LD_VAR 0 11
8213: PPUSH
8214: LD_INT 4
8216: PPUSH
8217: CALL_OW 308
8221: NOT
8222: AND
8223: IFFALSE 8239
// ComMoveToArea ( i , RussianAttack ) else
8225: LD_VAR 0 11
8229: PPUSH
8230: LD_INT 4
8232: PPUSH
8233: CALL_OW 113
8237: GO 8262
// if IsInArea ( i , RussianAttack ) then
8239: LD_VAR 0 11
8243: PPUSH
8244: LD_INT 4
8246: PPUSH
8247: CALL_OW 308
8251: IFFALSE 8262
// RemoveUnit ( i ) ;
8253: LD_VAR 0 11
8257: PPUSH
8258: CALL_OW 64
8262: GO 8195
8264: POP
8265: POP
// until not medic_list ;
8266: LD_VAR 0 15
8270: NOT
8271: IFFALSE 8135
// end ; end ; end_of_file
8273: LD_VAR 0 10
8277: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8278: LD_INT 0
8280: PPUSH
8281: PPUSH
8282: PPUSH
8283: PPUSH
8284: PPUSH
// InGameOn ;
8285: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8289: LD_ADDR_VAR 0 3
8293: PUSH
8294: LD_EXP 8
8298: PUSH
8299: LD_EXP 9
8303: PUSH
8304: LD_EXP 10
8308: PUSH
8309: LD_EXP 11
8313: PUSH
8314: LD_EXP 12
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8326: LD_ADDR_VAR 0 4
8330: PUSH
8331: LD_INT 46
8333: PUSH
8334: LD_INT 45
8336: PUSH
8337: LD_INT 44
8339: PUSH
8340: LD_INT 43
8342: PUSH
8343: LD_INT 42
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: LD_INT 14
8360: PUSH
8361: LD_INT 12
8363: PUSH
8364: LD_INT 10
8366: PUSH
8367: LD_INT 8
8369: PUSH
8370: LD_INT 6
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8380: LD_EXP 11
8384: PPUSH
8385: LD_INT 31
8387: PPUSH
8388: LD_INT 59
8390: PPUSH
8391: LD_INT 19
8393: PPUSH
8394: LD_INT 5
8396: PPUSH
8397: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8401: LD_INT 32
8403: PPUSH
8404: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8408: LD_INT 32
8410: PPUSH
8411: LD_INT 51
8413: PPUSH
8414: LD_INT 26
8416: PPUSH
8417: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8421: LD_INT 32
8423: PPUSH
8424: LD_INT 53
8426: PPUSH
8427: LD_INT 23
8429: PPUSH
8430: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8434: LD_INT 32
8436: PPUSH
8437: LD_INT 52
8439: PPUSH
8440: LD_INT 19
8442: PPUSH
8443: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8447: LD_INT 35
8449: PPUSH
8450: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8454: LD_INT 32
8456: PPUSH
8457: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8461: LD_INT 32
8463: PPUSH
8464: CALL_OW 250
8468: PUSH
8469: LD_INT 52
8471: EQUAL
8472: PUSH
8473: LD_INT 32
8475: PPUSH
8476: CALL_OW 251
8480: PUSH
8481: LD_INT 19
8483: EQUAL
8484: AND
8485: IFFALSE 8447
// ComExitVehicle ( JMM ) ;
8487: LD_EXP 1
8491: PPUSH
8492: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8496: LD_EXP 7
8500: PPUSH
8501: LD_EXP 1
8505: PPUSH
8506: CALL_OW 119
// wait ( 0 0$01 ) ;
8510: LD_INT 35
8512: PPUSH
8513: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8517: LD_EXP 1
8521: PPUSH
8522: LD_INT 46
8524: PPUSH
8525: LD_INT 10
8527: PPUSH
8528: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8532: LD_EXP 1
8536: PPUSH
8537: LD_EXP 7
8541: PPUSH
8542: CALL_OW 179
// wait ( 0 0$4 ) ;
8546: LD_INT 140
8548: PPUSH
8549: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8553: LD_EXP 1
8557: PPUSH
8558: LD_STRING D1-JMM-1
8560: PPUSH
8561: CALL_OW 88
// if not dialogue_skipped then
8565: LD_OWVAR 59
8569: NOT
8570: IFFALSE 9227
// begin for i := 1 to gammaSquad do
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: DOUBLE
8578: LD_INT 1
8580: DEC
8581: ST_TO_ADDR
8582: LD_VAR 0 3
8586: PUSH
8587: FOR_TO
8588: IFFALSE 8649
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8590: LD_VAR 0 3
8594: PUSH
8595: LD_VAR 0 2
8599: ARRAY
8600: PPUSH
8601: LD_VAR 0 4
8605: PUSH
8606: LD_VAR 0 2
8610: ARRAY
8611: PPUSH
8612: LD_VAR 0 5
8616: PUSH
8617: LD_VAR 0 2
8621: ARRAY
8622: PPUSH
8623: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8627: LD_VAR 0 3
8631: PUSH
8632: LD_VAR 0 2
8636: ARRAY
8637: PPUSH
8638: LD_EXP 1
8642: PPUSH
8643: CALL_OW 179
// end ;
8647: GO 8587
8649: POP
8650: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8651: LD_EXP 4
8655: PPUSH
8656: LD_INT 41
8658: PPUSH
8659: LD_INT 4
8661: PPUSH
8662: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8666: LD_EXP 4
8670: PPUSH
8671: LD_EXP 1
8675: PPUSH
8676: CALL_OW 179
// if Lisa = false and Bobby then
8680: LD_EXP 4
8684: PUSH
8685: LD_INT 0
8687: EQUAL
8688: PUSH
8689: LD_EXP 2
8693: AND
8694: IFFALSE 8725
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8696: LD_EXP 2
8700: PPUSH
8701: LD_INT 41
8703: PPUSH
8704: LD_INT 4
8706: PPUSH
8707: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8711: LD_EXP 2
8715: PPUSH
8716: LD_EXP 1
8720: PPUSH
8721: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8725: LD_EXP 4
8729: PUSH
8730: LD_INT 0
8732: EQUAL
8733: PUSH
8734: LD_EXP 2
8738: PUSH
8739: LD_INT 0
8741: EQUAL
8742: AND
8743: PUSH
8744: LD_EXP 3
8748: AND
8749: IFFALSE 8780
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8751: LD_EXP 3
8755: PPUSH
8756: LD_INT 41
8758: PPUSH
8759: LD_INT 4
8761: PPUSH
8762: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8766: LD_EXP 3
8770: PPUSH
8771: LD_EXP 1
8775: PPUSH
8776: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8780: LD_EXP 4
8784: PUSH
8785: LD_INT 0
8787: EQUAL
8788: PUSH
8789: LD_EXP 2
8793: PUSH
8794: LD_INT 0
8796: EQUAL
8797: AND
8798: PUSH
8799: LD_EXP 3
8803: PUSH
8804: LD_INT 0
8806: EQUAL
8807: AND
8808: IFFALSE 8839
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8810: LD_EXP 6
8814: PPUSH
8815: LD_INT 41
8817: PPUSH
8818: LD_INT 4
8820: PPUSH
8821: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8825: LD_EXP 6
8829: PPUSH
8830: LD_EXP 1
8834: PPUSH
8835: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8839: LD_EXP 7
8843: PPUSH
8844: LD_STRING D1-Brown-1
8846: PPUSH
8847: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8851: LD_EXP 1
8855: PPUSH
8856: LD_STRING D1-JMM-2
8858: PPUSH
8859: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8863: LD_EXP 7
8867: PPUSH
8868: LD_STRING D1-Brown-2
8870: PPUSH
8871: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8875: LD_EXP 1
8879: PPUSH
8880: LD_EXP 9
8884: PPUSH
8885: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8889: LD_EXP 9
8893: PPUSH
8894: LD_STRING D1-FSol1-2
8896: PPUSH
8897: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8901: LD_EXP 1
8905: PPUSH
8906: LD_EXP 8
8910: PPUSH
8911: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8915: LD_EXP 8
8919: PPUSH
8920: LD_STRING D1-Sol2-2
8922: PPUSH
8923: CALL_OW 88
// if Lisa then
8927: LD_EXP 4
8931: IFFALSE 8971
// begin ComTurnUnit ( JMM , Lisa ) ;
8933: LD_EXP 1
8937: PPUSH
8938: LD_EXP 4
8942: PPUSH
8943: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8947: LD_EXP 4
8951: PPUSH
8952: LD_STRING D1-Lisa-2
8954: PPUSH
8955: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8959: LD_EXP 1
8963: PPUSH
8964: LD_STRING D1-JMM-3
8966: PPUSH
8967: CALL_OW 88
// end ; if Bobby then
8971: LD_EXP 2
8975: IFFALSE 9015
// begin ComTurnUnit ( JMM , Bobby ) ;
8977: LD_EXP 1
8981: PPUSH
8982: LD_EXP 2
8986: PPUSH
8987: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
8991: LD_EXP 2
8995: PPUSH
8996: LD_STRING D1-Bobby-2
8998: PPUSH
8999: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9003: LD_EXP 1
9007: PPUSH
9008: LD_STRING D1-JMM-3
9010: PPUSH
9011: CALL_OW 88
// end ; if Cyrus then
9015: LD_EXP 3
9019: IFFALSE 9059
// begin ComTurnUnit ( JMM , Cyrus ) ;
9021: LD_EXP 1
9025: PPUSH
9026: LD_EXP 3
9030: PPUSH
9031: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9035: LD_EXP 3
9039: PPUSH
9040: LD_STRING D1-Cyrus-2
9042: PPUSH
9043: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9047: LD_EXP 1
9051: PPUSH
9052: LD_STRING D1-JMM-3
9054: PPUSH
9055: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9059: LD_EXP 1
9063: PPUSH
9064: LD_EXP 7
9068: PPUSH
9069: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9073: LD_EXP 1
9077: PPUSH
9078: LD_STRING D1-JMM-3a
9080: PPUSH
9081: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9085: LD_EXP 7
9089: PPUSH
9090: LD_INT 38
9092: PPUSH
9093: LD_INT 5
9095: PPUSH
9096: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9100: LD_EXP 7
9104: PPUSH
9105: LD_EXP 1
9109: PPUSH
9110: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9114: LD_EXP 1
9118: PPUSH
9119: LD_INT 40
9121: PPUSH
9122: LD_INT 7
9124: PPUSH
9125: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9129: LD_EXP 1
9133: PPUSH
9134: LD_EXP 7
9138: PPUSH
9139: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9143: LD_EXP 7
9147: PPUSH
9148: LD_STRING D1-Brown-3
9150: PPUSH
9151: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9155: LD_EXP 14
9159: PPUSH
9160: LD_STRING D1-Har-3
9162: PPUSH
9163: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9167: LD_EXP 1
9171: PPUSH
9172: LD_STRING D1-JMM-4
9174: PPUSH
9175: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9179: LD_EXP 14
9183: PPUSH
9184: LD_STRING D1-Har-4
9186: PPUSH
9187: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9191: LD_EXP 1
9195: PPUSH
9196: LD_STRING D1-JMM-5
9198: PPUSH
9199: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9203: LD_EXP 14
9207: PPUSH
9208: LD_STRING D1-Har-5
9210: PPUSH
9211: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9215: LD_EXP 1
9219: PPUSH
9220: LD_STRING D1-JMM-6
9222: PPUSH
9223: CALL_OW 88
// end ; InGameOff ;
9227: CALL_OW 9
// PrepareRussianConvoy ;
9231: CALL 3376 0 0
// ChangeMissionObjectives ( M1 ) ;
9235: LD_STRING M1
9237: PPUSH
9238: CALL_OW 337
// SaveForQuickRestart ;
9242: CALL_OW 22
// timerStatus = 1 ;
9246: LD_ADDR_EXP 29
9250: PUSH
9251: LD_INT 1
9253: ST_TO_ADDR
// startTimer = 1 ;
9254: LD_ADDR_EXP 30
9258: PUSH
9259: LD_INT 1
9261: ST_TO_ADDR
// bonusAvalaible = 1 ;
9262: LD_ADDR_EXP 44
9266: PUSH
9267: LD_INT 1
9269: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9270: LD_INT 105
9272: PPUSH
9273: CALL_OW 67
// DialogueOn ;
9277: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9281: LD_EXP 12
9285: PPUSH
9286: LD_STRING D9-Mech1-1
9288: PPUSH
9289: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9293: LD_EXP 1
9297: PPUSH
9298: LD_STRING D9-JMM-1
9300: PPUSH
9301: CALL_OW 88
// DialogueOff ;
9305: CALL_OW 7
// end ;
9309: LD_VAR 0 1
9313: RET
// export function JMMTraitor ; begin
9314: LD_INT 0
9316: PPUSH
// wait ( 0 0$2 ) ;
9317: LD_INT 70
9319: PPUSH
9320: CALL_OW 67
// DialogueOn ;
9324: CALL_OW 6
// InGameOn ;
9328: CALL_OW 8
// SayRadio ( Harisson , D8-Har-1b ) ;
9332: LD_EXP 14
9336: PPUSH
9337: LD_STRING D8-Har-1b
9339: PPUSH
9340: CALL_OW 94
// YouLost ( LostCommand ) ;
9344: LD_STRING LostCommand
9346: PPUSH
9347: CALL_OW 104
// InGameOff ;
9351: CALL_OW 9
// DialogueOff ;
9355: CALL_OW 7
// end ;
9359: LD_VAR 0 1
9363: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9364: LD_INT 47
9366: PPUSH
9367: LD_INT 1
9369: PPUSH
9370: CALL_OW 321
9374: PUSH
9375: LD_INT 2
9377: EQUAL
9378: PUSH
9379: LD_EXP 31
9383: NOT
9384: AND
9385: PUSH
9386: LD_INT 22
9388: PUSH
9389: LD_INT 1
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 21
9398: PUSH
9399: LD_INT 3
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 30
9408: PUSH
9409: LD_INT 3
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 57
9418: PUSH
9419: EMPTY
9420: LIST
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: PPUSH
9428: CALL_OW 69
9432: AND
9433: IFFALSE 9667
9435: GO 9437
9437: DISABLE
// begin factoryDialog := true ;
9438: LD_ADDR_EXP 31
9442: PUSH
9443: LD_INT 1
9445: ST_TO_ADDR
// if IsOk ( Campell ) then
9446: LD_EXP 12
9450: PPUSH
9451: CALL_OW 302
9455: IFFALSE 9471
// Say ( Campell , D10-Mech1-1 ) else
9457: LD_EXP 12
9461: PPUSH
9462: LD_STRING D10-Mech1-1
9464: PPUSH
9465: CALL_OW 88
9469: GO 9667
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9471: LD_INT 22
9473: PUSH
9474: LD_INT 1
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: PUSH
9481: LD_INT 21
9483: PUSH
9484: LD_INT 1
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 25
9493: PUSH
9494: LD_INT 3
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 26
9503: PUSH
9504: LD_INT 1
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PPUSH
9517: CALL_OW 69
9521: PUSH
9522: LD_EXP 1
9526: PUSH
9527: EMPTY
9528: LIST
9529: DIFF
9530: IFFALSE 9604
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9532: LD_INT 22
9534: PUSH
9535: LD_INT 1
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 21
9544: PUSH
9545: LD_INT 1
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 25
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 26
9564: PUSH
9565: LD_INT 1
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: PPUSH
9578: CALL_OW 69
9582: PUSH
9583: LD_EXP 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: DIFF
9591: PPUSH
9592: LD_STRING D10-Mech1-1
9594: PPUSH
9595: LD_STRING D10-Mech1-1
9597: PPUSH
9598: CALL 4570 0 3
9602: GO 9667
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9604: LD_INT 22
9606: PUSH
9607: LD_INT 1
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 21
9616: PUSH
9617: LD_INT 1
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 26
9626: PUSH
9627: LD_INT 1
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: PUSH
9639: LD_INT 1
9641: ARRAY
9642: PPUSH
9643: CALL_OW 69
9647: PUSH
9648: LD_EXP 1
9652: PUSH
9653: EMPTY
9654: LIST
9655: DIFF
9656: PPUSH
9657: LD_STRING D10-Mech1-1
9659: PPUSH
9660: LD_STRING D10-Mech1-1
9662: PPUSH
9663: CALL 4570 0 3
// end ; end ;
9667: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9668: LD_INT 22
9670: PUSH
9671: LD_INT 1
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 30
9680: PUSH
9681: LD_INT 32
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PPUSH
9692: CALL_OW 69
9696: PUSH
9697: LD_EXP 32
9701: PUSH
9702: LD_INT 0
9704: EQUAL
9705: AND
9706: IFFALSE 9942
9708: GO 9710
9710: DISABLE
// begin if IsOk ( Claptopn ) then
9711: LD_EXP 11
9715: PPUSH
9716: CALL_OW 302
9720: IFFALSE 9736
// Say ( Claptopn , D9b-Eng1-1 ) else
9722: LD_EXP 11
9726: PPUSH
9727: LD_STRING D9b-Eng1-1
9729: PPUSH
9730: CALL_OW 88
9734: GO 9928
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9736: LD_INT 22
9738: PUSH
9739: LD_INT 1
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 21
9748: PUSH
9749: LD_INT 1
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 25
9758: PUSH
9759: LD_INT 3
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 26
9768: PUSH
9769: LD_INT 1
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: PPUSH
9782: CALL_OW 69
9786: PUSH
9787: LD_EXP 1
9791: PUSH
9792: EMPTY
9793: LIST
9794: DIFF
9795: IFFALSE 9869
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9797: LD_INT 22
9799: PUSH
9800: LD_INT 1
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PUSH
9807: LD_INT 21
9809: PUSH
9810: LD_INT 1
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 25
9819: PUSH
9820: LD_INT 2
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 26
9829: PUSH
9830: LD_INT 1
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: PPUSH
9843: CALL_OW 69
9847: PUSH
9848: LD_EXP 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: DIFF
9856: PPUSH
9857: LD_STRING D9b-Eng1-1
9859: PPUSH
9860: LD_STRING D9b-Eng1-11
9862: PPUSH
9863: CALL 4570 0 3
9867: GO 9928
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9869: LD_INT 22
9871: PUSH
9872: LD_INT 1
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: LD_INT 21
9881: PUSH
9882: LD_INT 1
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 26
9891: PUSH
9892: LD_INT 1
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: PPUSH
9904: CALL_OW 69
9908: PUSH
9909: LD_EXP 1
9913: PUSH
9914: EMPTY
9915: LIST
9916: DIFF
9917: PPUSH
9918: LD_STRING D9b-Eng1-1
9920: PPUSH
9921: LD_STRING D9b-Eng1-1
9923: PPUSH
9924: CALL 4570 0 3
// end ; if energyVDialog = 0 then
9928: LD_EXP 33
9932: PUSH
9933: LD_INT 0
9935: EQUAL
9936: IFFALSE 9942
// EnergyDialog ;
9938: CALL 4975 0 0
// end ;
9942: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9943: LD_EXP 34
9947: PUSH
9948: LD_INT 1
9950: EQUAL
9951: PUSH
9952: LD_EXP 35
9956: PUSH
9957: LD_INT 1
9959: EQUAL
9960: AND
9961: IFFALSE 9973
9963: GO 9965
9965: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9966: LD_STRING M1a
9968: PPUSH
9969: CALL_OW 337
9973: END
// every 3 3$0 do
9974: GO 9976
9976: DISABLE
// PrepareFirstAttack ;
9977: CALL 4188 0 0
9981: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9982: LD_INT 22
9984: PUSH
9985: LD_INT 5
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 21
9994: PUSH
9995: LD_INT 1
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 3
10004: PUSH
10005: LD_INT 24
10007: PUSH
10008: LD_INT 250
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: LIST
10023: PPUSH
10024: CALL_OW 69
10028: PUSH
10029: LD_INT 0
10031: GREATER
10032: PUSH
10033: LD_EXP 23
10037: PUSH
10038: LD_INT 1
10040: EQUAL
10041: AND
10042: IFFALSE 10343
10044: GO 10046
10046: DISABLE
10047: LD_INT 0
10049: PPUSH
// begin firstRussianAttack = 2 ;
10050: LD_ADDR_EXP 23
10054: PUSH
10055: LD_INT 2
10057: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10058: LD_INT 22
10060: PUSH
10061: LD_INT 5
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: LD_INT 21
10070: PUSH
10071: LD_INT 1
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: PPUSH
10082: CALL_OW 69
10086: PPUSH
10087: LD_INT 125
10089: PPUSH
10090: LD_INT 98
10092: PPUSH
10093: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10097: LD_INT 22
10099: PUSH
10100: LD_INT 1
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: LD_INT 21
10109: PUSH
10110: LD_INT 1
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PPUSH
10121: CALL_OW 69
10125: PUSH
10126: LD_EXP 1
10130: PUSH
10131: LD_EXP 7
10135: PUSH
10136: LD_EXP 4
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: DIFF
10146: PPUSH
10147: LD_STRING DAtt1-Sol1-1
10149: PPUSH
10150: LD_STRING DAtt1-FSol1-1
10152: PPUSH
10153: CALL 4570 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10157: LD_EXP 1
10161: PPUSH
10162: LD_STRING DAtt1-JMM-1
10164: PPUSH
10165: CALL_OW 88
// if Lisa then
10169: LD_EXP 4
10173: IFFALSE 10189
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10175: LD_EXP 4
10179: PPUSH
10180: LD_STRING DAtt1a-Lisa-1
10182: PPUSH
10183: CALL_OW 88
10187: GO 10260
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10189: LD_INT 22
10191: PUSH
10192: LD_INT 1
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 21
10201: PUSH
10202: LD_INT 1
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 26
10211: PUSH
10212: LD_INT 1
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: LIST
10223: PPUSH
10224: CALL_OW 69
10228: PUSH
10229: LD_EXP 1
10233: PUSH
10234: LD_EXP 7
10238: PUSH
10239: LD_EXP 4
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: LIST
10248: DIFF
10249: PPUSH
10250: LD_STRING DAtt1a-Sol1-1
10252: PPUSH
10253: LD_STRING DAtt1-FSol1-1
10255: PPUSH
10256: CALL 4570 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10260: LD_EXP 1
10264: PPUSH
10265: LD_STRING DAtt1a-JMM-1
10267: PPUSH
10268: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10272: LD_INT 22
10274: PUSH
10275: LD_INT 1
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PUSH
10282: LD_INT 21
10284: PUSH
10285: LD_INT 1
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 26
10294: PUSH
10295: LD_INT 1
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: PPUSH
10307: CALL_OW 69
10311: PUSH
10312: LD_EXP 1
10316: PUSH
10317: LD_EXP 7
10321: PUSH
10322: LD_EXP 4
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: DIFF
10332: PPUSH
10333: LD_STRING DAtt1b-Sol1-1
10335: PPUSH
10336: LD_STRING DAtt1a-Sol1-1
10338: PPUSH
10339: CALL 4570 0 3
// end ;
10343: PPOPN 1
10345: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10346: LD_EXP 23
10350: PUSH
10351: LD_INT 2
10353: EQUAL
10354: PUSH
10355: LD_INT 5
10357: PPUSH
10358: LD_INT 22
10360: PUSH
10361: LD_INT 5
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 21
10370: PUSH
10371: LD_INT 1
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PPUSH
10382: CALL_OW 70
10386: AND
10387: IFFALSE 10445
10389: GO 10391
10391: DISABLE
10392: LD_INT 0
10394: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10395: LD_ADDR_VAR 0 1
10399: PUSH
10400: LD_INT 22
10402: PUSH
10403: LD_INT 5
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: LD_INT 21
10412: PUSH
10413: LD_INT 1
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PPUSH
10424: CALL_OW 69
10428: PUSH
10429: FOR_IN
10430: IFFALSE 10443
// RemoveUnit ( i ) ;
10432: LD_VAR 0 1
10436: PPUSH
10437: CALL_OW 64
10441: GO 10429
10443: POP
10444: POP
// end ;
10445: PPOPN 1
10447: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10448: LD_INT 22
10450: PUSH
10451: LD_INT 5
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: PPUSH
10461: CALL_OW 69
10465: PUSH
10466: LD_INT 0
10468: EQUAL
10469: PUSH
10470: LD_EXP 23
10474: PUSH
10475: LD_INT 2
10477: EQUAL
10478: AND
10479: IFFALSE 10492
10481: GO 10483
10483: DISABLE
// firstRussianAttack = 3 ;
10484: LD_ADDR_EXP 23
10488: PUSH
10489: LD_INT 3
10491: ST_TO_ADDR
10492: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10493: LD_EXP 28
10497: PUSH
10498: LD_INT 0
10500: EQUAL
10501: IFFALSE 10582
10503: GO 10505
10505: DISABLE
// begin timerStatus = 4 ;
10506: LD_ADDR_EXP 29
10510: PUSH
10511: LD_INT 4
10513: ST_TO_ADDR
// DialogueOn ;
10514: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10518: LD_EXP 13
10522: PPUSH
10523: LD_STRING D2-Don-1
10525: PPUSH
10526: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10530: LD_EXP 1
10534: PPUSH
10535: LD_STRING D2-JMM-1
10537: PPUSH
10538: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10542: LD_EXP 13
10546: PPUSH
10547: LD_STRING D2-Don-2
10549: PPUSH
10550: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10554: LD_EXP 1
10558: PPUSH
10559: LD_STRING D2-JMM-2
10561: PPUSH
10562: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10566: LD_EXP 13
10570: PPUSH
10571: LD_STRING D2-Don-3
10573: PPUSH
10574: CALL_OW 94
// DialogueOff ;
10578: CALL_OW 7
// end ;
10582: END
// every 12 12$0 do var tmp ;
10583: GO 10585
10585: DISABLE
10586: LD_INT 0
10588: PPUSH
// begin PrepareDonaldsonArmy ;
10589: CALL 1159 0 0
// CenterNowOnUnits ( Donaldson ) ;
10593: LD_EXP 13
10597: PPUSH
10598: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10602: LD_INT 22
10604: PUSH
10605: LD_INT 6
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: CALL_OW 69
10616: NOT
10617: IFFALSE 10633
// begin wait ( 3 ) ;
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10626: LD_STRING ACH_BASE
10628: PPUSH
10629: CALL_OW 543
// end ; tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
10633: LD_ADDR_VAR 0 1
10637: PUSH
10638: LD_INT 22
10640: PUSH
10641: LD_INT 4
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 21
10650: PUSH
10651: LD_INT 1
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 26
10660: PUSH
10661: LD_INT 1
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: LIST
10672: PPUSH
10673: CALL_OW 69
10677: PUSH
10678: LD_EXP 5
10682: PUSH
10683: EMPTY
10684: LIST
10685: DIFF
10686: ST_TO_ADDR
// DialogueOn ;
10687: CALL_OW 6
// tmp := tmp diff DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10691: LD_ADDR_VAR 0 1
10695: PUSH
10696: LD_VAR 0 1
10700: PUSH
10701: LD_VAR 0 1
10705: PPUSH
10706: LD_STRING D3-Sol1-1
10708: PPUSH
10709: LD_STRING D3-Sol1-1
10711: PPUSH
10712: CALL 4570 0 3
10716: DIFF
10717: ST_TO_ADDR
// DialogRandom ( tmp , D3-Sol2-1 , D3-Sol2-1 ) ;
10718: LD_VAR 0 1
10722: PPUSH
10723: LD_STRING D3-Sol2-1
10725: PPUSH
10726: LD_STRING D3-Sol2-1
10728: PPUSH
10729: CALL 4570 0 3
// if Frank then
10733: LD_EXP 5
10737: IFFALSE 10751
// Say ( Frank , D3-Frank-1 ) ;
10739: LD_EXP 5
10743: PPUSH
10744: LD_STRING D3-Frank-1
10746: PPUSH
10747: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10751: LD_EXP 13
10755: PPUSH
10756: LD_STRING D3-Don-1
10758: PPUSH
10759: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10763: LD_EXP 13
10767: PPUSH
10768: LD_STRING D3-Don-1a
10770: PPUSH
10771: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10775: LD_EXP 1
10779: PPUSH
10780: LD_STRING D3-JMM-1
10782: PPUSH
10783: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10787: LD_EXP 13
10791: PPUSH
10792: LD_STRING D3-Don-2
10794: PPUSH
10795: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10799: LD_INT 22
10801: PUSH
10802: LD_INT 6
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 21
10811: PUSH
10812: LD_INT 1
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PPUSH
10823: CALL_OW 69
10827: IFFALSE 10965
// begin Say ( JMM , D3-JMM-2 ) ;
10829: LD_EXP 1
10833: PPUSH
10834: LD_STRING D3-JMM-2
10836: PPUSH
10837: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10841: LD_EXP 13
10845: PPUSH
10846: LD_STRING D3-Don-3
10848: PPUSH
10849: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10853: LD_EXP 1
10857: PPUSH
10858: LD_STRING D3-JMM-3
10860: PPUSH
10861: CALL_OW 88
// if IsOK ( Frank ) then
10865: LD_EXP 5
10869: PPUSH
10870: CALL_OW 302
10874: IFFALSE 10888
// Say ( Frank , D3-Frank-3 ) ;
10876: LD_EXP 5
10880: PPUSH
10881: LD_STRING D3-Frank-3
10883: PPUSH
10884: CALL_OW 88
// DialogueOff ;
10888: CALL_OW 7
// if IsOk ( Frank ) then
10892: LD_EXP 5
10896: PPUSH
10897: CALL_OW 302
10901: IFFALSE 10963
// begin SetSide ( Frank , 0 ) ;
10903: LD_EXP 5
10907: PPUSH
10908: LD_INT 0
10910: PPUSH
10911: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10915: LD_EXP 5
10919: PPUSH
10920: LD_INT 12
10922: PPUSH
10923: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10927: LD_EXP 5
10931: PPUSH
10932: LD_STRING 04t_Frank
10934: PPUSH
10935: CALL_OW 38
// wait ( 0 0$3 ) ;
10939: LD_INT 105
10941: PPUSH
10942: CALL_OW 67
// frankScoutBase = 1 ;
10946: LD_ADDR_EXP 25
10950: PUSH
10951: LD_INT 1
10953: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10954: LD_EXP 5
10958: PPUSH
10959: CALL_OW 64
// end ; end else
10963: GO 11052
// begin Say ( JMM , D3-JMM-4 ) ;
10965: LD_EXP 1
10969: PPUSH
10970: LD_STRING D3-JMM-4
10972: PPUSH
10973: CALL_OW 88
// DialogueOff ;
10977: CALL_OW 7
// if IsOk ( Frank ) then
10981: LD_EXP 5
10985: PPUSH
10986: CALL_OW 302
10990: IFFALSE 11052
// begin SetSide ( Frank , 0 ) ;
10992: LD_EXP 5
10996: PPUSH
10997: LD_INT 0
10999: PPUSH
11000: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11004: LD_EXP 5
11008: PPUSH
11009: LD_INT 12
11011: PPUSH
11012: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
11016: LD_EXP 5
11020: PPUSH
11021: LD_STRING 04t_Frank
11023: PPUSH
11024: CALL_OW 38
// wait ( 0 0$3 ) ;
11028: LD_INT 105
11030: PPUSH
11031: CALL_OW 67
// frankScoutBase = 1 ;
11035: LD_ADDR_EXP 25
11039: PUSH
11040: LD_INT 1
11042: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11043: LD_EXP 5
11047: PPUSH
11048: CALL_OW 64
// end ; end ; end ;
11052: PPOPN 1
11054: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11055: LD_EXP 13
11059: PPUSH
11060: CALL_OW 255
11064: PUSH
11065: LD_INT 4
11067: EQUAL
11068: PUSH
11069: LD_EXP 13
11073: PPUSH
11074: CALL_OW 302
11078: AND
11079: IFFALSE 11319
11081: GO 11083
11083: DISABLE
11084: LD_INT 0
11086: PPUSH
11087: PPUSH
// begin wait ( 5 5$00 ) ;
11088: LD_INT 10500
11090: PPUSH
11091: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11095: LD_EXP 13
11099: PPUSH
11100: CALL_OW 255
11104: PUSH
11105: LD_INT 1
11107: EQUAL
11108: PUSH
11109: LD_EXP 13
11113: PPUSH
11114: CALL_OW 301
11118: OR
11119: IFFALSE 11123
// exit ;
11121: GO 11319
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11123: LD_EXP 13
11127: PPUSH
11128: LD_STRING D3b-Don-1
11130: PPUSH
11131: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11135: LD_ADDR_EXP 41
11139: PUSH
11140: LD_INT 1
11142: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11143: LD_ADDR_VAR 0 2
11147: PUSH
11148: LD_INT 22
11150: PUSH
11151: LD_INT 4
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PPUSH
11158: CALL_OW 69
11162: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11163: LD_INT 35
11165: PPUSH
11166: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11170: LD_VAR 0 2
11174: NOT
11175: PUSH
11176: LD_INT 22
11178: PUSH
11179: LD_INT 6
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 101
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 69
11204: OR
11205: IFFALSE 11163
// if not tmp then
11207: LD_VAR 0 2
11211: NOT
11212: IFFALSE 11216
// exit ;
11214: GO 11319
// for i in tmp do
11216: LD_ADDR_VAR 0 1
11220: PUSH
11221: LD_VAR 0 2
11225: PUSH
11226: FOR_IN
11227: IFFALSE 11246
// ComAgressiveMove ( i , 52 , 64 ) ;
11229: LD_VAR 0 1
11233: PPUSH
11234: LD_INT 52
11236: PPUSH
11237: LD_INT 64
11239: PPUSH
11240: CALL_OW 114
11244: GO 11226
11246: POP
11247: POP
// wait ( 0 0$10 ) ;
11248: LD_INT 350
11250: PPUSH
11251: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11255: LD_ADDR_VAR 0 1
11259: PUSH
11260: LD_INT 22
11262: PUSH
11263: LD_INT 4
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PPUSH
11270: CALL_OW 69
11274: PUSH
11275: LD_EXP 5
11279: DIFF
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11298
// SetSide ( i , 1 ) ;
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_INT 1
11291: PPUSH
11292: CALL_OW 235
11296: GO 11281
11298: POP
11299: POP
// if IsLive ( Donaldson ) then
11300: LD_EXP 13
11304: PPUSH
11305: CALL_OW 300
11309: IFFALSE 11319
// saveDonaldson := 1 ;
11311: LD_ADDR_EXP 24
11315: PUSH
11316: LD_INT 1
11318: ST_TO_ADDR
// end ;
11319: PPOPN 2
11321: END
// every 0 0$1 trigger IsOk ( Donaldson ) and not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11322: LD_EXP 13
11326: PPUSH
11327: CALL_OW 302
11331: PUSH
11332: LD_EXP 24
11336: NOT
11337: AND
11338: PUSH
11339: LD_EXP 41
11343: NOT
11344: AND
11345: PUSH
11346: LD_INT 26
11348: PPUSH
11349: LD_INT 22
11351: PUSH
11352: LD_INT 1
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PPUSH
11359: CALL_OW 70
11363: PUSH
11364: LD_EXP 13
11368: PPUSH
11369: LD_EXP 1
11373: PPUSH
11374: CALL_OW 296
11378: PUSH
11379: LD_INT 6
11381: LESS
11382: OR
11383: AND
11384: IFFALSE 11439
11386: GO 11388
11388: DISABLE
11389: LD_INT 0
11391: PPUSH
// begin saveDonaldson := 1 ;
11392: LD_ADDR_EXP 24
11396: PUSH
11397: LD_INT 1
11399: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11400: LD_ADDR_VAR 0 1
11404: PUSH
11405: LD_INT 22
11407: PUSH
11408: LD_INT 4
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PPUSH
11415: CALL_OW 69
11419: PUSH
11420: FOR_IN
11421: IFFALSE 11437
// SetSide ( i , 1 ) ;
11423: LD_VAR 0 1
11427: PPUSH
11428: LD_INT 1
11430: PPUSH
11431: CALL_OW 235
11435: GO 11420
11437: POP
11438: POP
// end ;
11439: PPOPN 1
11441: END
// every 0 0$1 trigger frankScoutBase do
11442: LD_EXP 25
11446: IFFALSE 11811
11448: GO 11450
11450: DISABLE
// begin wait ( 2 2$30 ) ;
11451: LD_INT 5250
11453: PPUSH
11454: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11458: LD_INT 35
11460: PPUSH
11461: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11465: LD_INT 81
11467: PUSH
11468: LD_INT 4
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 92
11477: PUSH
11478: LD_INT 84
11480: PUSH
11481: LD_INT 28
11483: PUSH
11484: LD_INT 22
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PPUSH
11497: CALL_OW 69
11501: NOT
11502: IFFALSE 11458
// uc_side = 4 ;
11504: LD_ADDR_OWVAR 20
11508: PUSH
11509: LD_INT 4
11511: ST_TO_ADDR
// uc_nation = 1 ;
11512: LD_ADDR_OWVAR 21
11516: PUSH
11517: LD_INT 1
11519: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11520: LD_ADDR_EXP 5
11524: PUSH
11525: LD_STRING 04t_Frank
11527: PPUSH
11528: CALL_OW 34
11532: ST_TO_ADDR
// if not Frank then
11533: LD_EXP 5
11537: NOT
11538: IFFALSE 11542
// exit ;
11540: GO 11811
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11542: LD_EXP 5
11546: PPUSH
11547: LD_INT 13
11549: PPUSH
11550: LD_INT 0
11552: PPUSH
11553: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11557: LD_INT 35
11559: PPUSH
11560: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11564: LD_EXP 1
11568: PPUSH
11569: CALL_OW 310
11573: NOT
11574: PUSH
11575: LD_EXP 1
11579: PPUSH
11580: LD_INT 4
11582: PPUSH
11583: CALL_OW 296
11587: PUSH
11588: LD_INT 20
11590: LESS
11591: AND
11592: IFFALSE 11625
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11594: LD_EXP 5
11598: PPUSH
11599: LD_EXP 1
11603: PPUSH
11604: CALL_OW 250
11608: PPUSH
11609: LD_EXP 1
11613: PPUSH
11614: CALL_OW 251
11618: PPUSH
11619: CALL_OW 111
11623: GO 11640
// ComMoveXY ( Frank , 51 , 15 ) ;
11625: LD_EXP 5
11629: PPUSH
11630: LD_INT 51
11632: PPUSH
11633: LD_INT 15
11635: PPUSH
11636: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11640: LD_EXP 5
11644: PPUSH
11645: LD_EXP 1
11649: PPUSH
11650: CALL_OW 296
11654: PUSH
11655: LD_INT 10
11657: LESS
11658: IFFALSE 11557
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11660: LD_EXP 1
11664: PUSH
11665: LD_EXP 5
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PPUSH
11674: CALL_OW 87
// DialogueOn ;
11678: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11682: LD_EXP 5
11686: PPUSH
11687: LD_STRING D3a-Frank-1
11689: PPUSH
11690: CALL_OW 88
// if Lisa then
11694: LD_EXP 4
11698: IFFALSE 11748
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11700: LD_EXP 4
11704: PPUSH
11705: LD_STRING D3a-Lisa-1
11707: PPUSH
11708: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11712: LD_EXP 5
11716: PPUSH
11717: LD_STRING D3a-Frank-2
11719: PPUSH
11720: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11724: LD_EXP 4
11728: PPUSH
11729: LD_STRING D3a-Lisa-2
11731: PPUSH
11732: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11736: LD_EXP 5
11740: PPUSH
11741: LD_STRING D3a-Frank-3
11743: PPUSH
11744: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11748: LD_EXP 1
11752: PPUSH
11753: LD_STRING D3a-JMM-3
11755: PPUSH
11756: CALL_OW 88
// DialogueOff ;
11760: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11764: LD_EXP 5
11768: PPUSH
11769: LD_INT 1
11771: PPUSH
11772: CALL_OW 235
// InGameOn ;
11776: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11780: LD_INT 1
11782: PPUSH
11783: LD_INT 7
11785: PPUSH
11786: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11790: LD_INT 93
11792: PPUSH
11793: LD_INT 91
11795: PPUSH
11796: CALL_OW 84
// wait ( 0 0$5 ) ;
11800: LD_INT 175
11802: PPUSH
11803: CALL_OW 67
// InGameOff ;
11807: CALL_OW 9
// end ;
11811: END
// every 12 12$0 trigger Difficulty > 1 do
11812: LD_OWVAR 67
11816: PUSH
11817: LD_INT 1
11819: GREATER
11820: IFFALSE 11844
11822: GO 11824
11824: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11825: LD_INT 24
11827: PPUSH
11828: LD_INT 24
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: LD_INT 1
11836: PPUSH
11837: LD_INT 53
11839: PPUSH
11840: CALL_OW 185
11844: END
// every 18 18$0 do
11845: GO 11847
11847: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11848: LD_EXP 14
11852: PPUSH
11853: LD_STRING D4-Har-1
11855: PPUSH
11856: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11860: LD_EXP 1
11864: PPUSH
11865: LD_STRING D4-JMM-1
11867: PPUSH
11868: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11872: LD_EXP 14
11876: PPUSH
11877: LD_STRING D4-Har-2
11879: PPUSH
11880: CALL_OW 94
// case Query ( Q1 ) of 1 :
11884: LD_STRING Q1
11886: PPUSH
11887: CALL_OW 97
11891: PUSH
11892: LD_INT 1
11894: DOUBLE
11895: EQUAL
11896: IFTRUE 11900
11898: GO 11959
11900: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11901: LD_EXP 1
11905: PPUSH
11906: LD_STRING D5-JMM-1
11908: PPUSH
11909: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11913: LD_EXP 14
11917: PPUSH
11918: LD_STRING D5-Har-1
11920: PPUSH
11921: CALL_OW 94
// timeToSupport = 10 10$0 ;
11925: LD_ADDR_EXP 28
11929: PUSH
11930: LD_INT 21000
11932: ST_TO_ADDR
// timerStatus = 2 ;
11933: LD_ADDR_EXP 29
11937: PUSH
11938: LD_INT 2
11940: ST_TO_ADDR
// startTimer = 1 ;
11941: LD_ADDR_EXP 30
11945: PUSH
11946: LD_INT 1
11948: ST_TO_ADDR
// harrAnswer = 1 ;
11949: LD_ADDR_EXP 26
11953: PUSH
11954: LD_INT 1
11956: ST_TO_ADDR
// end ; 2 :
11957: GO 12094
11959: LD_INT 2
11961: DOUBLE
11962: EQUAL
11963: IFTRUE 11967
11965: GO 12026
11967: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11968: LD_EXP 1
11972: PPUSH
11973: LD_STRING D5-JMM-2
11975: PPUSH
11976: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11980: LD_EXP 14
11984: PPUSH
11985: LD_STRING D5-Har-2
11987: PPUSH
11988: CALL_OW 94
// timeToSupport = 5 5$0 ;
11992: LD_ADDR_EXP 28
11996: PUSH
11997: LD_INT 10500
11999: ST_TO_ADDR
// timerStatus = 2 ;
12000: LD_ADDR_EXP 29
12004: PUSH
12005: LD_INT 2
12007: ST_TO_ADDR
// startTimer = 1 ;
12008: LD_ADDR_EXP 30
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// harrAnswer = 2 ;
12016: LD_ADDR_EXP 26
12020: PUSH
12021: LD_INT 2
12023: ST_TO_ADDR
// end ; 3 :
12024: GO 12094
12026: LD_INT 3
12028: DOUBLE
12029: EQUAL
12030: IFTRUE 12034
12032: GO 12093
12034: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12035: LD_EXP 1
12039: PPUSH
12040: LD_STRING D5-JMM-3
12042: PPUSH
12043: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12047: LD_EXP 14
12051: PPUSH
12052: LD_STRING D5-Har-3
12054: PPUSH
12055: CALL_OW 94
// timeToSupport = 5 5$0 ;
12059: LD_ADDR_EXP 28
12063: PUSH
12064: LD_INT 10500
12066: ST_TO_ADDR
// timerStatus = 2 ;
12067: LD_ADDR_EXP 29
12071: PUSH
12072: LD_INT 2
12074: ST_TO_ADDR
// startTimer = 1 ;
12075: LD_ADDR_EXP 30
12079: PUSH
12080: LD_INT 1
12082: ST_TO_ADDR
// harrAnswer = 3 ;
12083: LD_ADDR_EXP 26
12087: PUSH
12088: LD_INT 3
12090: ST_TO_ADDR
// end ; end ;
12091: GO 12094
12093: POP
// end ;
12094: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12095: LD_EXP 29
12099: PUSH
12100: LD_INT 2
12102: EQUAL
12103: PUSH
12104: LD_EXP 28
12108: PUSH
12109: LD_INT 0
12111: EQUAL
12112: AND
12113: IFFALSE 12402
12115: GO 12117
12117: DISABLE
// begin timerStatus = 4 ;
12118: LD_ADDR_EXP 29
12122: PUSH
12123: LD_INT 4
12125: ST_TO_ADDR
// if harrAnswer = 1 then
12126: LD_EXP 26
12130: PUSH
12131: LD_INT 1
12133: EQUAL
12134: IFFALSE 12218
// begin PrepareHarrisonSupport ( 3 ) ;
12136: LD_INT 3
12138: PPUSH
12139: CALL 1729 0 1
// wait ( 1 1$0 ) ;
12143: LD_INT 2100
12145: PPUSH
12146: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12150: LD_EXP 14
12154: PPUSH
12155: LD_STRING D7-Har-1
12157: PPUSH
12158: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12162: LD_STRING M2
12164: PPUSH
12165: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12169: LD_ADDR_EXP 27
12173: PUSH
12174: LD_INT 31500
12176: PUSH
12177: LD_INT 10500
12179: PUSH
12180: LD_INT 8400
12182: PUSH
12183: LD_INT 6300
12185: PUSH
12186: LD_INT 6300
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: PUSH
12195: LD_OWVAR 67
12199: ARRAY
12200: PLUS
12201: ST_TO_ADDR
// startTimer = 1 ;
12202: LD_ADDR_EXP 30
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// timerStatus = 3 ;
12210: LD_ADDR_EXP 29
12214: PUSH
12215: LD_INT 3
12217: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12218: LD_EXP 26
12222: PUSH
12223: LD_INT 2
12225: EQUAL
12226: IFFALSE 12310
// begin PrepareHarrisonSupport ( 4 ) ;
12228: LD_INT 4
12230: PPUSH
12231: CALL 1729 0 1
// wait ( 1 1$0 ) ;
12235: LD_INT 2100
12237: PPUSH
12238: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12242: LD_EXP 14
12246: PPUSH
12247: LD_STRING D7-Har-1
12249: PPUSH
12250: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12254: LD_STRING M2
12256: PPUSH
12257: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12261: LD_ADDR_EXP 27
12265: PUSH
12266: LD_INT 33600
12268: PUSH
12269: LD_INT 10500
12271: PUSH
12272: LD_INT 8400
12274: PUSH
12275: LD_INT 6300
12277: PUSH
12278: LD_INT 5250
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: PUSH
12287: LD_OWVAR 67
12291: ARRAY
12292: PLUS
12293: ST_TO_ADDR
// startTimer = 1 ;
12294: LD_ADDR_EXP 30
12298: PUSH
12299: LD_INT 1
12301: ST_TO_ADDR
// timerStatus = 3 ;
12302: LD_ADDR_EXP 29
12306: PUSH
12307: LD_INT 3
12309: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12310: LD_EXP 26
12314: PUSH
12315: LD_INT 3
12317: EQUAL
12318: IFFALSE 12402
// begin PrepareHarrisonSupport ( 5 ) ;
12320: LD_INT 5
12322: PPUSH
12323: CALL 1729 0 1
// wait ( 1 1$0 ) ;
12327: LD_INT 2100
12329: PPUSH
12330: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12334: LD_EXP 14
12338: PPUSH
12339: LD_STRING D7-Har-1
12341: PPUSH
12342: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12346: LD_STRING M2
12348: PPUSH
12349: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12353: LD_ADDR_EXP 27
12357: PUSH
12358: LD_INT 35700
12360: PUSH
12361: LD_INT 10500
12363: PUSH
12364: LD_INT 6300
12366: PUSH
12367: LD_INT 4200
12369: PUSH
12370: LD_INT 3150
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: PUSH
12379: LD_OWVAR 67
12383: ARRAY
12384: PLUS
12385: ST_TO_ADDR
// startTimer = 1 ;
12386: LD_ADDR_EXP 30
12390: PUSH
12391: LD_INT 1
12393: ST_TO_ADDR
// timerStatus = 3 ;
12394: LD_ADDR_EXP 29
12398: PUSH
12399: LD_INT 3
12401: ST_TO_ADDR
// end ; end ;
12402: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12403: LD_EXP 27
12407: PUSH
12408: LD_INT 8400
12410: LESSEQUAL
12411: PUSH
12412: LD_EXP 29
12416: PUSH
12417: LD_INT 3
12419: EQUAL
12420: AND
12421: IFFALSE 12453
12423: GO 12425
12425: DISABLE
// begin DialogueOn ;
12426: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12430: LD_EXP 14
12434: PPUSH
12435: LD_STRING D7a-Har-1
12437: PPUSH
12438: CALL_OW 94
// DialogueOff ;
12442: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12446: LD_STRING M2a
12448: PPUSH
12449: CALL_OW 337
// end ;
12453: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12454: LD_EXP 27
12458: PUSH
12459: LD_INT 0
12461: LESSEQUAL
12462: PUSH
12463: LD_EXP 29
12467: PUSH
12468: LD_INT 3
12470: EQUAL
12471: AND
12472: PUSH
12473: LD_EXP 40
12477: NOT
12478: AND
12479: IFFALSE 12618
12481: GO 12483
12483: DISABLE
12484: LD_INT 0
12486: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12487: LD_ADDR_VAR 0 1
12491: PUSH
12492: LD_INT 22
12494: PUSH
12495: LD_INT 1
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PPUSH
12502: CALL_OW 69
12506: PUSH
12507: LD_EXP 1
12511: PUSH
12512: EMPTY
12513: LIST
12514: DIFF
12515: ST_TO_ADDR
// saveDonaldson := 2 ;
12516: LD_ADDR_EXP 24
12520: PUSH
12521: LD_INT 2
12523: ST_TO_ADDR
// DialogueOn ;
12524: CALL_OW 6
// if IsOk ( Donaldson ) then
12528: LD_EXP 13
12532: PPUSH
12533: CALL_OW 302
12537: IFFALSE 12553
// SayRadio ( Harisson , D8-Har-1 ) else
12539: LD_EXP 14
12543: PPUSH
12544: LD_STRING D8-Har-1
12546: PPUSH
12547: CALL_OW 94
12551: GO 12565
// SayRadio ( Harisson , D8-Har-1a ) ;
12553: LD_EXP 14
12557: PPUSH
12558: LD_STRING D8-Har-1a
12560: PPUSH
12561: CALL_OW 94
// DialogueOff ;
12565: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12569: LD_VAR 0 1
12573: PPUSH
12574: LD_INT 4
12576: PPUSH
12577: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12581: LD_VAR 0 1
12585: PPUSH
12586: LD_INT 88
12588: PPUSH
12589: LD_INT 89
12591: PPUSH
12592: CALL_OW 114
// reliefOfCommand := true ;
12596: LD_ADDR_EXP 48
12600: PUSH
12601: LD_INT 1
12603: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12604: LD_INT 350
12606: PPUSH
12607: CALL_OW 67
// YouLost ( LostCommand ) ;
12611: LD_STRING LostCommand
12613: PPUSH
12614: CALL_OW 104
// end ;
12618: PPOPN 1
12620: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12621: LD_INT 22
12623: PUSH
12624: LD_INT 6
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 21
12633: PUSH
12634: LD_INT 1
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PPUSH
12645: CALL_OW 69
12649: PUSH
12650: LD_INT 0
12652: EQUAL
12653: PUSH
12654: LD_EXP 20
12658: PUSH
12659: LD_INT 0
12661: EQUAL
12662: AND
12663: PUSH
12664: LD_EXP 44
12668: PUSH
12669: LD_INT 1
12671: EQUAL
12672: AND
12673: IFFALSE 12767
12675: GO 12677
12677: DISABLE
12678: LD_INT 0
12680: PPUSH
12681: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12682: LD_ADDR_VAR 0 2
12686: PUSH
12687: LD_INT 22
12689: PUSH
12690: LD_INT 1
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: PUSH
12697: LD_INT 21
12699: PUSH
12700: LD_INT 1
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 23
12709: PUSH
12710: LD_INT 1
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: PPUSH
12722: CALL_OW 69
12726: ST_TO_ADDR
// for i in tmp do
12727: LD_ADDR_VAR 0 1
12731: PUSH
12732: LD_VAR 0 2
12736: PUSH
12737: FOR_IN
12738: IFFALSE 12765
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12740: LD_VAR 0 1
12744: PPUSH
12745: LD_INT 1
12747: PPUSH
12748: LD_INT 4
12750: PPUSH
12751: CALL_OW 12
12755: PPUSH
12756: LD_INT 500
12758: PPUSH
12759: CALL_OW 492
12763: GO 12737
12765: POP
12766: POP
// end ; end_of_file
12767: PPOPN 2
12769: END
// every 0 0$1 trigger AIEnable do
12770: LD_EXP 37
12774: IFFALSE 12868
12776: GO 12778
12778: DISABLE
// begin enable ;
12779: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12780: LD_INT 3
12782: PPUSH
12783: LD_INT 21
12785: PPUSH
12786: LD_INT 7
12788: PPUSH
12789: CALL 6002 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12793: LD_INT 3
12795: PPUSH
12796: LD_INT 8
12798: PPUSH
12799: LD_INT 7
12801: PPUSH
12802: LD_INT 1
12804: PPUSH
12805: CALL 6306 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12809: LD_EXP 20
12813: PUSH
12814: LD_INT 2
12816: EQUAL
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 6
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PPUSH
12828: CALL_OW 69
12832: AND
12833: IFFALSE 12868
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12835: LD_INT 6
12837: PPUSH
12838: LD_EXP 21
12842: PPUSH
12843: LD_INT 6
12845: PPUSH
12846: CALL 6002 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12850: LD_INT 6
12852: PPUSH
12853: LD_INT 9
12855: PPUSH
12856: LD_INT 6
12858: PPUSH
12859: LD_EXP 22
12863: PPUSH
12864: CALL 6306 0 4
// end ; end ;
12868: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12869: LD_EXP 15
12873: PPUSH
12874: CALL_OW 310
12878: NOT
12879: PUSH
12880: LD_INT 21
12882: PPUSH
12883: CALL_OW 302
12887: AND
12888: PUSH
12889: LD_INT 21
12891: PPUSH
12892: CALL_OW 255
12896: PUSH
12897: LD_INT 3
12899: EQUAL
12900: AND
12901: IFFALSE 12918
12903: GO 12905
12905: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12906: LD_EXP 15
12910: PPUSH
12911: LD_INT 21
12913: PPUSH
12914: CALL_OW 120
12918: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12919: LD_INT 22
12921: PUSH
12922: LD_INT 3
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 21
12931: PUSH
12932: LD_INT 2
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: LD_INT 55
12941: PUSH
12942: EMPTY
12943: LIST
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: PPUSH
12950: CALL_OW 69
12954: PUSH
12955: LD_INT 0
12957: EQUAL
12958: PUSH
12959: LD_INT 1
12961: PPUSH
12962: CALL_OW 255
12966: PUSH
12967: LD_INT 3
12969: EQUAL
12970: AND
12971: PUSH
12972: LD_INT 21
12974: PPUSH
12975: CALL_OW 302
12979: AND
12980: PUSH
12981: LD_INT 21
12983: PPUSH
12984: CALL_OW 255
12988: PUSH
12989: LD_INT 3
12991: EQUAL
12992: AND
12993: PUSH
12994: LD_INT 21
12996: PPUSH
12997: CALL_OW 302
13001: AND
13002: IFFALSE 13214
13004: GO 13006
13006: DISABLE
// begin enable ;
13007: ENABLE
// if Difficulty = 1 then
13008: LD_OWVAR 67
13012: PUSH
13013: LD_INT 1
13015: EQUAL
13016: IFFALSE 13060
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
13018: LD_INT 3
13020: PPUSH
13021: LD_INT 24
13023: PPUSH
13024: LD_OWVAR 67
13028: PUSH
13029: LD_INT 2
13031: PLUS
13032: PPUSH
13033: LD_INT 42
13035: PUSH
13036: LD_INT 44
13038: PUSH
13039: LD_INT 43
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: LIST
13046: PPUSH
13047: LD_INT 1
13049: PPUSH
13050: LD_INT 1
13052: PPUSH
13053: LD_INT 21
13055: PPUSH
13056: CALL 6820 0 7
// if Difficulty = 2 then
13060: LD_OWVAR 67
13064: PUSH
13065: LD_INT 2
13067: EQUAL
13068: IFFALSE 13135
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13070: LD_INT 3
13072: PPUSH
13073: LD_INT 24
13075: PPUSH
13076: LD_OWVAR 67
13080: PUSH
13081: LD_INT 2
13083: PLUS
13084: PPUSH
13085: LD_INT 44
13087: PUSH
13088: LD_INT 44
13090: PUSH
13091: LD_INT 43
13093: PUSH
13094: LD_INT 43
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: PPUSH
13103: LD_INT 1
13105: PPUSH
13106: LD_INT 1
13108: PPUSH
13109: LD_INT 21
13111: PUSH
13112: LD_INT 22
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: LD_INT 1
13121: PPUSH
13122: LD_INT 2
13124: PPUSH
13125: CALL_OW 12
13129: ARRAY
13130: PPUSH
13131: CALL 6820 0 7
// if Difficulty >= 3 then
13135: LD_OWVAR 67
13139: PUSH
13140: LD_INT 3
13142: GREATEREQUAL
13143: IFFALSE 13214
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13145: LD_INT 3
13147: PPUSH
13148: LD_INT 24
13150: PPUSH
13151: LD_OWVAR 67
13155: PUSH
13156: LD_INT 2
13158: PPUSH
13159: LD_INT 3
13161: PPUSH
13162: CALL_OW 12
13166: PLUS
13167: PPUSH
13168: LD_INT 44
13170: PUSH
13171: LD_INT 44
13173: PUSH
13174: LD_INT 43
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: LIST
13181: PPUSH
13182: LD_INT 1
13184: PPUSH
13185: LD_INT 1
13187: PPUSH
13188: LD_INT 22
13190: PUSH
13191: LD_INT 23
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 1
13200: PPUSH
13201: LD_INT 2
13203: PPUSH
13204: CALL_OW 12
13208: ARRAY
13209: PPUSH
13210: CALL 6820 0 7
// end ;
13214: END
// every 0 0$1 do
13215: GO 13217
13217: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13218: LD_INT 3
13220: PPUSH
13221: LD_INT 1
13223: PPUSH
13224: LD_INT 3
13226: PPUSH
13227: CALL 5923 0 3
13231: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13232: LD_EXP 20
13236: PUSH
13237: LD_INT 1
13239: EQUAL
13240: IFFALSE 13387
13242: GO 13244
13244: DISABLE
13245: LD_INT 0
13247: PPUSH
13248: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13249: LD_ADDR_VAR 0 2
13253: PUSH
13254: LD_INT 22
13256: PUSH
13257: LD_INT 6
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 21
13266: PUSH
13267: LD_INT 2
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 34
13276: PUSH
13277: LD_INT 51
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: LIST
13288: PPUSH
13289: CALL_OW 69
13293: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13294: LD_VAR 0 2
13298: PUSH
13299: LD_INT 1
13301: ARRAY
13302: PPUSH
13303: LD_EXP 21
13307: PPUSH
13308: CALL_OW 250
13312: PUSH
13313: LD_INT 5
13315: MINUS
13316: PPUSH
13317: LD_EXP 21
13321: PPUSH
13322: CALL_OW 251
13326: PUSH
13327: LD_INT 5
13329: MINUS
13330: PPUSH
13331: CALL_OW 111
// wait ( 0 0$5 ) ;
13335: LD_INT 175
13337: PPUSH
13338: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13342: LD_VAR 0 2
13346: PUSH
13347: LD_INT 1
13349: ARRAY
13350: PPUSH
13351: LD_INT 41
13353: PPUSH
13354: LD_INT 52
13356: PPUSH
13357: CALL_OW 177
// wait ( 0 0$40 ) ;
13361: LD_INT 1400
13363: PPUSH
13364: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13368: LD_VAR 0 2
13372: PUSH
13373: LD_INT 1
13375: ARRAY
13376: PPUSH
13377: LD_INT 41
13379: PPUSH
13380: LD_INT 44
13382: PPUSH
13383: CALL_OW 111
// end ;
13387: PPOPN 2
13389: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13390: LD_EXP 21
13394: PPUSH
13395: CALL_OW 274
13399: PPUSH
13400: LD_INT 1
13402: PPUSH
13403: CALL_OW 275
13407: PUSH
13408: LD_INT 100
13410: GREATEREQUAL
13411: IFFALSE 13639
13413: GO 13415
13415: DISABLE
13416: LD_INT 0
13418: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13419: LD_ADDR_VAR 0 1
13423: PUSH
13424: LD_INT 22
13426: PUSH
13427: LD_INT 6
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 21
13436: PUSH
13437: LD_INT 1
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 25
13446: PUSH
13447: LD_INT 2
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: LIST
13458: PPUSH
13459: CALL_OW 69
13463: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13464: LD_VAR 0 1
13468: PUSH
13469: LD_INT 1
13471: ARRAY
13472: PPUSH
13473: LD_INT 4
13475: PPUSH
13476: LD_INT 39
13478: PPUSH
13479: LD_INT 37
13481: PPUSH
13482: LD_INT 3
13484: PPUSH
13485: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13489: LD_VAR 0 1
13493: PUSH
13494: LD_INT 1
13496: ARRAY
13497: PPUSH
13498: LD_INT 29
13500: PPUSH
13501: LD_INT 42
13503: PPUSH
13504: LD_INT 54
13506: PPUSH
13507: LD_INT 3
13509: PPUSH
13510: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13514: LD_VAR 0 1
13518: PUSH
13519: LD_INT 1
13521: ARRAY
13522: PPUSH
13523: LD_INT 6
13525: PPUSH
13526: LD_INT 38
13528: PPUSH
13529: LD_INT 48
13531: PPUSH
13532: LD_INT 0
13534: PPUSH
13535: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13539: LD_VAR 0 1
13543: PUSH
13544: LD_INT 1
13546: ARRAY
13547: PPUSH
13548: LD_INT 2
13550: PPUSH
13551: LD_INT 32
13553: PPUSH
13554: LD_INT 38
13556: PPUSH
13557: LD_INT 2
13559: PPUSH
13560: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13564: LD_VAR 0 1
13568: PUSH
13569: LD_INT 1
13571: ARRAY
13572: PPUSH
13573: LD_INT 26
13575: PPUSH
13576: LD_INT 39
13578: PPUSH
13579: LD_INT 55
13581: PPUSH
13582: LD_INT 3
13584: PPUSH
13585: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13589: LD_VAR 0 1
13593: PUSH
13594: LD_INT 1
13596: ARRAY
13597: PPUSH
13598: LD_INT 32
13600: PPUSH
13601: LD_INT 31
13603: PPUSH
13604: LD_INT 31
13606: PPUSH
13607: LD_INT 3
13609: PPUSH
13610: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13614: LD_VAR 0 1
13618: PUSH
13619: LD_INT 1
13621: ARRAY
13622: PPUSH
13623: LD_INT 31
13625: PPUSH
13626: LD_INT 50
13628: PPUSH
13629: LD_INT 51
13631: PPUSH
13632: LD_INT 4
13634: PPUSH
13635: CALL_OW 205
// end ;
13639: PPOPN 1
13641: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13642: LD_EXP 46
13646: IFFALSE 14207
13648: GO 13650
13650: DISABLE
13651: LD_INT 0
13653: PPUSH
13654: PPUSH
13655: PPUSH
// begin enable ;
13656: ENABLE
// if not ruMobile then
13657: LD_EXP 46
13661: NOT
13662: IFFALSE 13666
// exit ;
13664: GO 14207
// for i in ruMobile do
13666: LD_ADDR_VAR 0 1
13670: PUSH
13671: LD_EXP 46
13675: PUSH
13676: FOR_IN
13677: IFFALSE 14205
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13679: LD_VAR 0 1
13683: PPUSH
13684: CALL_OW 302
13688: NOT
13689: PUSH
13690: LD_VAR 0 1
13694: PPUSH
13695: CALL_OW 255
13699: PUSH
13700: LD_INT 3
13702: NONEQUAL
13703: OR
13704: IFFALSE 13724
// begin ruMobile := ruMobile diff i ;
13706: LD_ADDR_EXP 46
13710: PUSH
13711: LD_EXP 46
13715: PUSH
13716: LD_VAR 0 1
13720: DIFF
13721: ST_TO_ADDR
// continue ;
13722: GO 13676
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13724: LD_VAR 0 1
13728: PPUSH
13729: CALL_OW 110
13733: NOT
13734: PUSH
13735: LD_VAR 0 1
13739: PPUSH
13740: CALL_OW 110
13744: PUSH
13745: LD_INT 0
13747: EQUAL
13748: OR
13749: IFFALSE 13864
// begin if GetFuel ( i ) < 50 then
13751: LD_VAR 0 1
13755: PPUSH
13756: CALL_OW 261
13760: PUSH
13761: LD_INT 50
13763: LESS
13764: IFFALSE 13823
// begin ComMoveXY ( i , 106 , 88 ) ;
13766: LD_VAR 0 1
13770: PPUSH
13771: LD_INT 106
13773: PPUSH
13774: LD_INT 88
13776: PPUSH
13777: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13781: LD_INT 35
13783: PPUSH
13784: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13788: LD_VAR 0 1
13792: PPUSH
13793: LD_INT 106
13795: PPUSH
13796: LD_INT 88
13798: PPUSH
13799: CALL_OW 297
13803: PUSH
13804: LD_INT 4
13806: LESS
13807: IFFALSE 13781
// SetFuel ( i , 100 ) ;
13809: LD_VAR 0 1
13813: PPUSH
13814: LD_INT 100
13816: PPUSH
13817: CALL_OW 240
// end else
13821: GO 13864
// if not IsInArea ( i , ruParking ) then
13823: LD_VAR 0 1
13827: PPUSH
13828: LD_INT 25
13830: PPUSH
13831: CALL_OW 308
13835: NOT
13836: IFFALSE 13852
// ComMoveToArea ( i , ruParking ) else
13838: LD_VAR 0 1
13842: PPUSH
13843: LD_INT 25
13845: PPUSH
13846: CALL_OW 113
13850: GO 13864
// SetTag ( i , 101 ) ;
13852: LD_VAR 0 1
13856: PPUSH
13857: LD_INT 101
13859: PPUSH
13860: CALL_OW 109
// end ; if GetTag ( i ) = 101 then
13864: LD_VAR 0 1
13868: PPUSH
13869: CALL_OW 110
13873: PUSH
13874: LD_INT 101
13876: EQUAL
13877: IFFALSE 14007
// begin if GetLives ( i ) < 650 then
13879: LD_VAR 0 1
13883: PPUSH
13884: CALL_OW 256
13888: PUSH
13889: LD_INT 650
13891: LESS
13892: IFFALSE 13984
// begin if not IsDrivenBy ( i ) then
13894: LD_VAR 0 1
13898: PPUSH
13899: CALL_OW 311
13903: NOT
13904: IFFALSE 13908
// continue ;
13906: GO 13676
// mech := IsDrivenBy ( i ) ;
13908: LD_ADDR_VAR 0 2
13912: PUSH
13913: LD_VAR 0 1
13917: PPUSH
13918: CALL_OW 311
13922: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13923: LD_VAR 0 2
13927: PPUSH
13928: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13932: LD_VAR 0 2
13936: PPUSH
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13946: LD_INT 35
13948: PPUSH
13949: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13953: LD_VAR 0 1
13957: PPUSH
13958: CALL_OW 256
13962: PUSH
13963: LD_INT 1000
13965: EQUAL
13966: IFFALSE 13946
// ComEnterUnit ( mech , i ) ;
13968: LD_VAR 0 2
13972: PPUSH
13973: LD_VAR 0 1
13977: PPUSH
13978: CALL_OW 120
// end else
13982: GO 14007
// if IsDrivenBy ( i ) then
13984: LD_VAR 0 1
13988: PPUSH
13989: CALL_OW 311
13993: IFFALSE 14007
// SetTag ( i , 102 ) ;
13995: LD_VAR 0 1
13999: PPUSH
14000: LD_INT 102
14002: PPUSH
14003: CALL_OW 109
// end ; if GetTag ( i ) = 102 then
14007: LD_VAR 0 1
14011: PPUSH
14012: CALL_OW 110
14016: PUSH
14017: LD_INT 102
14019: EQUAL
14020: IFFALSE 14203
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14022: LD_ADDR_VAR 0 3
14026: PUSH
14027: LD_INT 24
14029: PPUSH
14030: LD_INT 81
14032: PUSH
14033: LD_INT 3
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PPUSH
14040: CALL_OW 70
14044: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14045: LD_VAR 0 1
14049: PPUSH
14050: CALL_OW 256
14054: PUSH
14055: LD_INT 650
14057: LESS
14058: IFFALSE 14083
// begin ComStop ( i ) ;
14060: LD_VAR 0 1
14064: PPUSH
14065: CALL_OW 141
// SetTag ( i , 0 ) ;
14069: LD_VAR 0 1
14073: PPUSH
14074: LD_INT 0
14076: PPUSH
14077: CALL_OW 109
// continue ;
14081: GO 13676
// end ; if enemy then
14083: LD_VAR 0 3
14087: IFFALSE 14127
// begin if not HasTask ( i ) then
14089: LD_VAR 0 1
14093: PPUSH
14094: CALL_OW 314
14098: NOT
14099: IFFALSE 14125
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14101: LD_VAR 0 1
14105: PPUSH
14106: LD_VAR 0 3
14110: PPUSH
14111: LD_VAR 0 1
14115: PPUSH
14116: CALL_OW 74
14120: PPUSH
14121: CALL_OW 115
// end else
14125: GO 14203
// if ruMobile then
14127: LD_EXP 46
14131: IFFALSE 14203
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14133: LD_ADDR_VAR 0 3
14137: PUSH
14138: LD_INT 81
14140: PUSH
14141: LD_INT 3
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PPUSH
14148: CALL_OW 69
14152: ST_TO_ADDR
// if enemy then
14153: LD_VAR 0 3
14157: IFFALSE 14203
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
14159: LD_VAR 0 1
14163: PPUSH
14164: LD_INT 95
14166: PUSH
14167: LD_INT 74
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 67
14176: PUSH
14177: LD_INT 59
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: LD_INT 55
14186: PUSH
14187: LD_INT 41
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: LIST
14198: PPUSH
14199: CALL 81573 0 2
// end ; end ; end ;
14203: GO 13676
14205: POP
14206: POP
// end ; end_of_file
14207: PPOPN 3
14209: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14210: LD_INT 0
14212: PPUSH
14213: PPUSH
14214: PPUSH
14215: PPUSH
14216: PPUSH
14217: PPUSH
14218: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14219: LD_ADDR_VAR 0 3
14223: PUSH
14224: LD_INT 22
14226: PUSH
14227: LD_INT 6
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: LD_INT 21
14236: PUSH
14237: LD_INT 1
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 25
14246: PUSH
14247: LD_INT 1
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 3
14256: PUSH
14257: LD_INT 54
14259: PUSH
14260: EMPTY
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: PPUSH
14273: CALL_OW 69
14277: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14278: LD_ADDR_VAR 0 7
14282: PUSH
14283: LD_INT 22
14285: PUSH
14286: LD_INT 6
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 21
14295: PUSH
14296: LD_INT 1
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: LD_INT 25
14305: PUSH
14306: LD_INT 1
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PUSH
14313: LD_INT 54
14315: PUSH
14316: EMPTY
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: PPUSH
14325: CALL_OW 69
14329: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14330: LD_ADDR_VAR 0 4
14334: PUSH
14335: LD_INT 22
14337: PUSH
14338: LD_INT 6
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 21
14347: PUSH
14348: LD_INT 1
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PUSH
14355: LD_INT 25
14357: PUSH
14358: LD_INT 2
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: LIST
14369: PPUSH
14370: CALL_OW 69
14374: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14375: LD_ADDR_VAR 0 6
14379: PUSH
14380: LD_INT 22
14382: PUSH
14383: LD_INT 6
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 21
14392: PUSH
14393: LD_INT 1
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 25
14402: PUSH
14403: LD_INT 4
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: LIST
14414: PPUSH
14415: CALL_OW 69
14419: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14420: LD_ADDR_VAR 0 8
14424: PUSH
14425: LD_INT 22
14427: PUSH
14428: LD_INT 6
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 21
14437: PUSH
14438: LD_INT 2
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 34
14447: PUSH
14448: LD_INT 51
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: LIST
14459: PPUSH
14460: CALL_OW 69
14464: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14465: LD_VAR 0 1
14469: PPUSH
14470: CALL_OW 255
14474: PUSH
14475: LD_INT 6
14477: EQUAL
14478: PUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 266
14488: PUSH
14489: LD_INT 0
14491: EQUAL
14492: AND
14493: IFFALSE 14513
// begin ruPDepot = building ;
14495: LD_ADDR_EXP 21
14499: PUSH
14500: LD_VAR 0 1
14504: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14505: LD_ADDR_EXP 20
14509: PUSH
14510: LD_INT 1
14512: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14513: LD_VAR 0 1
14517: PPUSH
14518: CALL_OW 266
14522: PUSH
14523: LD_INT 4
14525: EQUAL
14526: PUSH
14527: LD_VAR 0 1
14531: PPUSH
14532: CALL_OW 255
14536: PUSH
14537: LD_INT 6
14539: EQUAL
14540: AND
14541: IFFALSE 14574
// for i in tmpSold do
14543: LD_ADDR_VAR 0 2
14547: PUSH
14548: LD_VAR 0 3
14552: PUSH
14553: FOR_IN
14554: IFFALSE 14572
// ComEnterUnit ( i , building ) ;
14556: LD_VAR 0 2
14560: PPUSH
14561: LD_VAR 0 1
14565: PPUSH
14566: CALL_OW 120
14570: GO 14553
14572: POP
14573: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14574: LD_VAR 0 1
14578: PPUSH
14579: CALL_OW 266
14583: PUSH
14584: LD_INT 6
14586: EQUAL
14587: PUSH
14588: LD_VAR 0 1
14592: PPUSH
14593: CALL_OW 255
14597: PUSH
14598: LD_INT 6
14600: EQUAL
14601: AND
14602: IFFALSE 14660
// begin for i in tmpSci do
14604: LD_ADDR_VAR 0 2
14608: PUSH
14609: LD_VAR 0 6
14613: PUSH
14614: FOR_IN
14615: IFFALSE 14633
// ComEnterUnit ( i , building ) ;
14617: LD_VAR 0 2
14621: PPUSH
14622: LD_VAR 0 1
14626: PPUSH
14627: CALL_OW 120
14631: GO 14614
14633: POP
14634: POP
// ResAllTechs ( 6 , building , 3 ) ;
14635: LD_INT 6
14637: PPUSH
14638: LD_VAR 0 1
14642: PPUSH
14643: LD_INT 3
14645: PPUSH
14646: CALL 5923 0 3
// ruPLab = building ;
14650: LD_ADDR_EXP 22
14654: PUSH
14655: LD_VAR 0 1
14659: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14660: LD_VAR 0 1
14664: PPUSH
14665: CALL_OW 266
14669: PUSH
14670: LD_INT 2
14672: EQUAL
14673: PUSH
14674: LD_VAR 0 1
14678: PPUSH
14679: CALL_OW 255
14683: PUSH
14684: LD_INT 6
14686: EQUAL
14687: AND
14688: IFFALSE 14739
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14690: LD_ADDR_VAR 0 5
14694: PUSH
14695: LD_VAR 0 8
14699: PUSH
14700: LD_INT 1
14702: ARRAY
14703: PPUSH
14704: CALL_OW 313
14708: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14709: LD_VAR 0 5
14713: PPUSH
14714: CALL_OW 121
// wait ( 0 0$1 ) ;
14718: LD_INT 35
14720: PPUSH
14721: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14725: LD_VAR 0 5
14729: PPUSH
14730: LD_VAR 0 1
14734: PPUSH
14735: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14739: LD_VAR 0 1
14743: PPUSH
14744: CALL_OW 266
14748: PUSH
14749: LD_INT 32
14751: EQUAL
14752: PUSH
14753: LD_VAR 0 1
14757: PPUSH
14758: CALL_OW 255
14762: PUSH
14763: LD_INT 6
14765: EQUAL
14766: AND
14767: IFFALSE 14819
// begin ComPlaceWeapon ( building , 42 ) ;
14769: LD_VAR 0 1
14773: PPUSH
14774: LD_INT 42
14776: PPUSH
14777: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14781: LD_VAR 0 7
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: PPUSH
14790: CALL_OW 122
// wait ( 0 0$1 ) ;
14794: LD_INT 35
14796: PPUSH
14797: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14801: LD_VAR 0 7
14805: PUSH
14806: LD_INT 1
14808: ARRAY
14809: PPUSH
14810: LD_VAR 0 1
14814: PPUSH
14815: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14819: LD_VAR 0 1
14823: PPUSH
14824: CALL_OW 266
14828: PUSH
14829: LD_INT 31
14831: EQUAL
14832: PUSH
14833: LD_VAR 0 1
14837: PPUSH
14838: CALL_OW 255
14842: PUSH
14843: LD_INT 6
14845: EQUAL
14846: AND
14847: IFFALSE 14913
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14849: LD_VAR 0 7
14853: PUSH
14854: LD_INT 2
14856: ARRAY
14857: PPUSH
14858: CALL_OW 122
// wait ( 0 0$1 ) ;
14862: LD_INT 35
14864: PPUSH
14865: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14869: LD_VAR 0 7
14873: PUSH
14874: LD_INT 2
14876: ARRAY
14877: PPUSH
14878: LD_VAR 0 1
14882: PPUSH
14883: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14887: LD_VAR 0 4
14891: PUSH
14892: LD_INT 1
14894: ARRAY
14895: PPUSH
14896: LD_EXP 21
14900: PPUSH
14901: CALL_OW 120
// baseReadyToBuild = 2 ;
14905: LD_ADDR_EXP 20
14909: PUSH
14910: LD_INT 2
14912: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14913: LD_VAR 0 1
14917: PPUSH
14918: CALL_OW 266
14922: PUSH
14923: LD_INT 32
14925: EQUAL
14926: PUSH
14927: LD_VAR 0 1
14931: PPUSH
14932: CALL_OW 255
14936: PUSH
14937: LD_INT 1
14939: EQUAL
14940: AND
14941: PUSH
14942: LD_EXP 32
14946: PUSH
14947: LD_INT 0
14949: EQUAL
14950: AND
14951: IFFALSE 15196
// begin bunkerDialog = 1 ;
14953: LD_ADDR_EXP 32
14957: PUSH
14958: LD_INT 1
14960: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14961: LD_EXP 11
14965: PPUSH
14966: CALL_OW 302
14970: IFFALSE 14986
// Say ( Claptopn , D11-Eng1-1 ) else
14972: LD_EXP 11
14976: PPUSH
14977: LD_STRING D11-Eng1-1
14979: PPUSH
14980: CALL_OW 88
14984: GO 15182
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14986: LD_INT 22
14988: PUSH
14989: LD_INT 1
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: LD_INT 21
14998: PUSH
14999: LD_INT 1
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 25
15008: PUSH
15009: LD_INT 3
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 26
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: PPUSH
15032: CALL_OW 69
15036: PUSH
15037: LD_EXP 1
15041: PUSH
15042: EMPTY
15043: LIST
15044: PUSH
15045: LD_INT 0
15047: GREATER
15048: DIFF
15049: IFFALSE 15123
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15051: LD_INT 22
15053: PUSH
15054: LD_INT 1
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 21
15063: PUSH
15064: LD_INT 1
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 25
15073: PUSH
15074: LD_INT 2
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 26
15083: PUSH
15084: LD_INT 1
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PUSH
15102: LD_EXP 1
15106: PUSH
15107: EMPTY
15108: LIST
15109: DIFF
15110: PPUSH
15111: LD_STRING D11-Eng1-1
15113: PPUSH
15114: LD_STRING D11-Eng1-1
15116: PPUSH
15117: CALL 4570 0 3
15121: GO 15182
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15123: LD_INT 22
15125: PUSH
15126: LD_INT 1
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 21
15135: PUSH
15136: LD_INT 1
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 26
15145: PUSH
15146: LD_INT 1
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: PPUSH
15158: CALL_OW 69
15162: PUSH
15163: LD_EXP 1
15167: PUSH
15168: EMPTY
15169: LIST
15170: DIFF
15171: PPUSH
15172: LD_STRING D11-Eng1-1
15174: PPUSH
15175: LD_STRING D11-Eng1-1
15177: PPUSH
15178: CALL 4570 0 3
// end ; if energyVDialog = 0 then
15182: LD_EXP 33
15186: PUSH
15187: LD_INT 0
15189: EQUAL
15190: IFFALSE 15196
// EnergyDialog ;
15192: CALL 4975 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15196: LD_VAR 0 1
15200: PPUSH
15201: CALL_OW 266
15205: PUSH
15206: LD_INT 29
15208: EQUAL
15209: PUSH
15210: LD_VAR 0 1
15214: PPUSH
15215: CALL_OW 255
15219: PUSH
15220: LD_INT 1
15222: EQUAL
15223: AND
15224: IFFALSE 15234
// buildOil = 1 ;
15226: LD_ADDR_EXP 34
15230: PUSH
15231: LD_INT 1
15233: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15234: LD_VAR 0 1
15238: PPUSH
15239: CALL_OW 266
15243: PUSH
15244: LD_INT 26
15246: EQUAL
15247: PUSH
15248: LD_VAR 0 1
15252: PPUSH
15253: CALL_OW 255
15257: PUSH
15258: LD_INT 1
15260: EQUAL
15261: AND
15262: IFFALSE 15272
// buildPower = 1 ;
15264: LD_ADDR_EXP 35
15268: PUSH
15269: LD_INT 1
15271: ST_TO_ADDR
// end ;
15272: PPOPN 8
15274: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15275: LD_VAR 0 1
15279: PPUSH
15280: CALL_OW 266
15284: PUSH
15285: LD_INT 3
15287: EQUAL
15288: PUSH
15289: LD_VAR 0 1
15293: PPUSH
15294: CALL_OW 255
15298: PUSH
15299: LD_INT 1
15301: EQUAL
15302: AND
15303: PUSH
15304: LD_EXP 31
15308: PUSH
15309: LD_INT 0
15311: EQUAL
15312: AND
15313: IFFALSE 15661
// begin factoryDialog = 1 ;
15315: LD_ADDR_EXP 31
15319: PUSH
15320: LD_INT 1
15322: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15323: LD_INT 47
15325: PPUSH
15326: LD_INT 1
15328: PPUSH
15329: CALL_OW 321
15333: PUSH
15334: LD_INT 1
15336: EQUAL
15337: PUSH
15338: LD_INT 45
15340: PPUSH
15341: LD_INT 1
15343: PPUSH
15344: CALL_OW 321
15348: PUSH
15349: LD_INT 1
15351: EQUAL
15352: AND
15353: IFFALSE 15661
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15355: LD_INT 22
15357: PUSH
15358: LD_INT 1
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: LD_INT 21
15367: PUSH
15368: LD_INT 3
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: LD_INT 30
15377: PUSH
15378: LD_INT 3
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 24
15387: PUSH
15388: LD_INT 1000
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: PPUSH
15401: CALL_OW 69
15405: PUSH
15406: LD_INT 1
15408: ARRAY
15409: PPUSH
15410: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15414: LD_EXP 1
15418: PPUSH
15419: LD_STRING D9a-JMM-1
15421: PPUSH
15422: CALL_OW 88
// if IsOK ( Campell ) then
15426: LD_EXP 12
15430: PPUSH
15431: CALL_OW 302
15435: IFFALSE 15451
// Say ( Campell , D9a-Mech1-1 ) else
15437: LD_EXP 12
15441: PPUSH
15442: LD_STRING D9a-Mech1-1
15444: PPUSH
15445: CALL_OW 88
15449: GO 15647
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15451: LD_INT 22
15453: PUSH
15454: LD_INT 1
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: LD_INT 21
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 25
15473: PUSH
15474: LD_INT 3
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: LD_INT 26
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: PPUSH
15497: CALL_OW 69
15501: PUSH
15502: LD_EXP 1
15506: PUSH
15507: EMPTY
15508: LIST
15509: PUSH
15510: LD_INT 0
15512: GREATER
15513: DIFF
15514: IFFALSE 15588
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15516: LD_INT 22
15518: PUSH
15519: LD_INT 1
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 21
15528: PUSH
15529: LD_INT 1
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 25
15538: PUSH
15539: LD_INT 3
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 26
15548: PUSH
15549: LD_INT 1
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: PPUSH
15562: CALL_OW 69
15566: PUSH
15567: LD_EXP 1
15571: PUSH
15572: EMPTY
15573: LIST
15574: DIFF
15575: PPUSH
15576: LD_STRING D9a-Mech1-1
15578: PPUSH
15579: LD_STRING D9a-Mech1-1
15581: PPUSH
15582: CALL 4570 0 3
15586: GO 15647
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15588: LD_INT 22
15590: PUSH
15591: LD_INT 1
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 21
15600: PUSH
15601: LD_INT 1
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: LD_INT 26
15610: PUSH
15611: LD_INT 1
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: LIST
15622: PPUSH
15623: CALL_OW 69
15627: PUSH
15628: LD_EXP 1
15632: PUSH
15633: EMPTY
15634: LIST
15635: DIFF
15636: PPUSH
15637: LD_STRING D9a-Mech1-1
15639: PPUSH
15640: LD_STRING D9a-Mech1-1
15642: PPUSH
15643: CALL 4570 0 3
// end ; if energyVDialog = 0 then
15647: LD_EXP 33
15651: PUSH
15652: LD_INT 0
15654: EQUAL
15655: IFFALSE 15661
// EnergyDialog ;
15657: CALL 4975 0 0
// end ; end ; end ;
15661: PPOPN 1
15663: END
// on UnitDestroyed ( unit ) do var mech ;
15664: LD_INT 0
15666: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL 35953 0 1
// if unit = JMM then
15676: LD_VAR 0 1
15680: PUSH
15681: LD_EXP 1
15685: EQUAL
15686: IFFALSE 15695
// YouLost ( JMM ) ;
15688: LD_STRING JMM
15690: PPUSH
15691: CALL_OW 104
// if unit = ambdept0 then
15695: LD_VAR 0 1
15699: PUSH
15700: LD_INT 4
15702: EQUAL
15703: IFFALSE 15712
// YouLost ( Base ) ;
15705: LD_STRING Base
15707: PPUSH
15708: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and IsInArea ( unit , ruDefArea ) then
15712: LD_VAR 0 1
15716: PPUSH
15717: CALL_OW 255
15721: PUSH
15722: LD_INT 1
15724: EQUAL
15725: PUSH
15726: LD_VAR 0 1
15730: PPUSH
15731: CALL_OW 247
15735: PUSH
15736: LD_INT 1
15738: EQUAL
15739: AND
15740: PUSH
15741: LD_VAR 0 1
15745: PPUSH
15746: LD_INT 24
15748: PPUSH
15749: CALL_OW 308
15753: AND
15754: IFFALSE 15764
// honor := false ;
15756: LD_ADDR_EXP 39
15760: PUSH
15761: LD_INT 0
15763: ST_TO_ADDR
// if unit in ruMobile then
15764: LD_VAR 0 1
15768: PUSH
15769: LD_EXP 46
15773: IN
15774: IFFALSE 15792
// ruMobile = ruMobile diff ruMobile ;
15776: LD_ADDR_EXP 46
15780: PUSH
15781: LD_EXP 46
15785: PUSH
15786: LD_EXP 46
15790: DIFF
15791: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15792: LD_VAR 0 1
15796: PPUSH
15797: CALL_OW 247
15801: PUSH
15802: LD_INT 1
15804: EQUAL
15805: PUSH
15806: LD_VAR 0 1
15810: PPUSH
15811: CALL_OW 255
15815: PUSH
15816: LD_INT 1
15818: EQUAL
15819: AND
15820: IFFALSE 15836
// lostCounter = lostCounter + 1 ;
15822: LD_ADDR_EXP 38
15826: PUSH
15827: LD_EXP 38
15831: PUSH
15832: LD_INT 1
15834: PLUS
15835: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15836: LD_EXP 43
15840: PUSH
15841: LD_INT 24
15843: PPUSH
15844: CALL_OW 313
15848: PUSH
15849: LD_INT 6
15851: LESS
15852: AND
15853: PUSH
15854: LD_VAR 0 1
15858: PPUSH
15859: CALL_OW 257
15863: PUSH
15864: LD_INT 3
15866: EQUAL
15867: AND
15868: PUSH
15869: LD_VAR 0 1
15873: PPUSH
15874: CALL_OW 255
15878: PUSH
15879: LD_INT 3
15881: EQUAL
15882: AND
15883: PUSH
15884: LD_INT 24
15886: PPUSH
15887: CALL_OW 302
15891: AND
15892: PUSH
15893: LD_INT 24
15895: PPUSH
15896: CALL_OW 255
15900: PUSH
15901: LD_INT 3
15903: EQUAL
15904: AND
15905: IFFALSE 16034
// begin ruMech := ruMech - 1 ;
15907: LD_ADDR_EXP 43
15911: PUSH
15912: LD_EXP 43
15916: PUSH
15917: LD_INT 1
15919: MINUS
15920: ST_TO_ADDR
// if ruMech = 0 then
15921: LD_EXP 43
15925: PUSH
15926: LD_INT 0
15928: EQUAL
15929: IFFALSE 15933
// exit ;
15931: GO 16034
// wait ( 0 0$40 ) ;
15933: LD_INT 1400
15935: PPUSH
15936: CALL_OW 67
// uc_side = 3 ;
15940: LD_ADDR_OWVAR 20
15944: PUSH
15945: LD_INT 3
15947: ST_TO_ADDR
// uc_nation = 3 ;
15948: LD_ADDR_OWVAR 21
15952: PUSH
15953: LD_INT 3
15955: ST_TO_ADDR
// hc_gallery :=  ;
15956: LD_ADDR_OWVAR 33
15960: PUSH
15961: LD_STRING 
15963: ST_TO_ADDR
// hc_name :=  ;
15964: LD_ADDR_OWVAR 26
15968: PUSH
15969: LD_STRING 
15971: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15972: LD_INT 0
15974: PPUSH
15975: LD_EXP 16
15979: PPUSH
15980: LD_EXP 17
15984: PPUSH
15985: CALL_OW 12
15989: PPUSH
15990: CALL_OW 383
// mech := CreateHuman ;
15994: LD_ADDR_VAR 0 2
15998: PUSH
15999: CALL_OW 44
16003: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
16004: LD_VAR 0 2
16008: PPUSH
16009: LD_INT 124
16011: PPUSH
16012: LD_INT 97
16014: PPUSH
16015: LD_INT 0
16017: PPUSH
16018: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
16022: LD_VAR 0 2
16026: PPUSH
16027: LD_INT 24
16029: PPUSH
16030: CALL_OW 120
// end ; end ;
16034: PPOPN 2
16036: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
16037: LD_INT 0
16039: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
16040: LD_VAR 0 1
16044: PPUSH
16045: LD_VAR 0 2
16049: PPUSH
16050: CALL 36011 0 2
// if GetSide ( vehicle ) = 1 then
16054: LD_VAR 0 1
16058: PPUSH
16059: CALL_OW 255
16063: PUSH
16064: LD_INT 1
16066: EQUAL
16067: IFFALSE 16083
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
16069: LD_ADDR_EXP 42
16073: PUSH
16074: LD_EXP 42
16078: PUSH
16079: LD_INT 1
16081: PLUS
16082: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16083: LD_VAR 0 1
16087: PPUSH
16088: CALL_OW 255
16092: PUSH
16093: LD_INT 3
16095: EQUAL
16096: PUSH
16097: LD_VAR 0 1
16101: PPUSH
16102: CALL_OW 264
16106: PUSH
16107: LD_INT 42
16109: PUSH
16110: LD_INT 43
16112: PUSH
16113: LD_INT 44
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: LIST
16120: IN
16121: AND
16122: IFFALSE 16140
// ruMobile := ruMobile union vehicle ;
16124: LD_ADDR_EXP 46
16128: PUSH
16129: LD_EXP 46
16133: PUSH
16134: LD_VAR 0 1
16138: UNION
16139: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16140: LD_VAR 0 1
16144: PPUSH
16145: CALL_OW 264
16149: PUSH
16150: LD_INT 53
16152: EQUAL
16153: IFFALSE 16289
// begin uc_side = 3 ;
16155: LD_ADDR_OWVAR 20
16159: PUSH
16160: LD_INT 3
16162: ST_TO_ADDR
// uc_nation = 3 ;
16163: LD_ADDR_OWVAR 21
16167: PUSH
16168: LD_INT 3
16170: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16171: LD_INT 0
16173: PPUSH
16174: LD_EXP 17
16178: PPUSH
16179: CALL_OW 383
// driver := CreateHuman ;
16183: LD_ADDR_VAR 0 3
16187: PUSH
16188: CALL_OW 44
16192: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16193: LD_VAR 0 3
16197: PPUSH
16198: LD_VAR 0 2
16202: PPUSH
16203: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16207: LD_VAR 0 1
16211: PPUSH
16212: LD_INT 21
16214: PPUSH
16215: CALL 5191 0 2
// repeat wait ( 0 0$1 ) ;
16219: LD_INT 35
16221: PPUSH
16222: CALL_OW 67
// until not HasTask ( vehicle ) ;
16226: LD_VAR 0 1
16230: PPUSH
16231: CALL_OW 314
16235: NOT
16236: IFFALSE 16219
// driver := IsDrivenBy ( vehicle ) ;
16238: LD_ADDR_VAR 0 3
16242: PUSH
16243: LD_VAR 0 1
16247: PPUSH
16248: CALL_OW 311
16252: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16253: LD_VAR 0 3
16257: PPUSH
16258: LD_INT 104
16260: PPUSH
16261: LD_INT 73
16263: PPUSH
16264: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16268: LD_VAR 0 3
16272: PPUSH
16273: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16277: LD_VAR 0 3
16281: PPUSH
16282: LD_INT 24
16284: PPUSH
16285: CALL_OW 180
// end ; end ;
16289: PPOPN 3
16291: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16292: LD_VAR 0 1
16296: PPUSH
16297: CALL_OW 255
16301: PUSH
16302: LD_INT 3
16304: EQUAL
16305: PUSH
16306: LD_VAR 0 1
16310: PPUSH
16311: CALL_OW 247
16315: PUSH
16316: LD_INT 2
16318: EQUAL
16319: AND
16320: PUSH
16321: LD_VAR 0 1
16325: PPUSH
16326: CALL_OW 264
16330: PUSH
16331: LD_INT 42
16333: PUSH
16334: LD_INT 43
16336: PUSH
16337: LD_INT 44
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: IN
16345: AND
16346: IFFALSE 16395
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16348: LD_INT 24
16350: PPUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL_OW 265
16360: PPUSH
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 262
16370: PPUSH
16371: LD_VAR 0 1
16375: PPUSH
16376: CALL_OW 263
16380: PPUSH
16381: LD_VAR 0 1
16385: PPUSH
16386: CALL_OW 264
16390: PPUSH
16391: CALL_OW 185
// end ;
16395: PPOPN 1
16397: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16398: LD_VAR 0 1
16402: PPUSH
16403: CALL_OW 255
16407: PUSH
16408: LD_INT 3
16410: EQUAL
16411: PUSH
16412: LD_VAR 0 2
16416: PPUSH
16417: CALL_OW 255
16421: PUSH
16422: LD_INT 3
16424: EQUAL
16425: AND
16426: PUSH
16427: LD_INT 24
16429: PPUSH
16430: CALL_OW 302
16434: AND
16435: PUSH
16436: LD_VAR 0 1
16440: PPUSH
16441: CALL_OW 302
16445: NOT
16446: AND
16447: IFFALSE 16461
// ComEnterUnit ( human , rubfact0 ) ;
16449: LD_VAR 0 2
16453: PPUSH
16454: LD_INT 24
16456: PPUSH
16457: CALL_OW 120
// end ;
16461: PPOPN 2
16463: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 5 then
16464: LD_VAR 0 1
16468: PPUSH
16469: CALL_OW 255
16473: PUSH
16474: LD_INT 5
16476: EQUAL
16477: IFFALSE 16551
// begin repeat ComMoveXY ( driver , 125 , 97 ) ;
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_INT 125
16486: PPUSH
16487: LD_INT 97
16489: PPUSH
16490: CALL_OW 111
// wait ( 0 0$1 ) ;
16494: LD_INT 35
16496: PPUSH
16497: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 125 , 97 ) ;
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 301
16510: PUSH
16511: LD_VAR 0 1
16515: PPUSH
16516: LD_INT 125
16518: PPUSH
16519: LD_INT 97
16521: PPUSH
16522: CALL_OW 307
16526: OR
16527: IFFALSE 16479
// if IsDead ( driver ) then
16529: LD_VAR 0 1
16533: PPUSH
16534: CALL_OW 301
16538: IFFALSE 16542
// exit ;
16540: GO 16551
// RemoveUnit ( driver ) ;
16542: LD_VAR 0 1
16546: PPUSH
16547: CALL_OW 64
// end ; end ;
16551: PPOPN 4
16553: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16554: LD_VAR 0 1
16558: PUSH
16559: LD_INT 24
16561: EQUAL
16562: PUSH
16563: LD_VAR 0 2
16567: PPUSH
16568: CALL_OW 256
16572: PUSH
16573: LD_INT 1000
16575: LESS
16576: AND
16577: IFFALSE 16591
// SetLives ( un , 1000 ) ;
16579: LD_VAR 0 2
16583: PPUSH
16584: LD_INT 1000
16586: PPUSH
16587: CALL_OW 234
// end ;
16591: PPOPN 2
16593: END
// on Command ( comandid ) do var i , j , tmp ;
16594: LD_INT 0
16596: PPUSH
16597: PPUSH
16598: PPUSH
// begin SOS_Command ( comandid ) ;
16599: LD_VAR 0 1
16603: PPUSH
16604: CALL 35995 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16608: LD_INT 22
16610: PUSH
16611: LD_INT 4
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PPUSH
16618: CALL_OW 69
16622: NOT
16623: IFFALSE 16627
// exit ;
16625: GO 16792
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16627: LD_ADDR_VAR 0 2
16631: PUSH
16632: LD_INT 22
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 2
16644: PUSH
16645: LD_INT 21
16647: PUSH
16648: LD_INT 1
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 21
16657: PUSH
16658: LD_INT 2
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PPUSH
16674: CALL_OW 69
16678: PUSH
16679: FOR_IN
16680: IFFALSE 16790
// begin if GetTaskList ( i ) > 0 then
16682: LD_VAR 0 2
16686: PPUSH
16687: CALL_OW 437
16691: PUSH
16692: LD_INT 0
16694: GREATER
16695: IFFALSE 16788
// begin for j = 1 to GetTaskList ( i ) do
16697: LD_ADDR_VAR 0 3
16701: PUSH
16702: DOUBLE
16703: LD_INT 1
16705: DEC
16706: ST_TO_ADDR
16707: LD_VAR 0 2
16711: PPUSH
16712: CALL_OW 437
16716: PUSH
16717: FOR_TO
16718: IFFALSE 16786
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16720: LD_ADDR_VAR 0 4
16724: PUSH
16725: LD_VAR 0 2
16729: PPUSH
16730: CALL_OW 437
16734: PUSH
16735: LD_VAR 0 3
16739: ARRAY
16740: PUSH
16741: LD_INT 4
16743: ARRAY
16744: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16745: LD_VAR 0 4
16749: PPUSH
16750: CALL_OW 255
16754: PUSH
16755: LD_INT 4
16757: EQUAL
16758: PUSH
16759: LD_VAR 0 4
16763: PPUSH
16764: CALL_OW 255
16768: PUSH
16769: LD_INT 0
16771: EQUAL
16772: OR
16773: IFFALSE 16784
// ComStop ( i ) ;
16775: LD_VAR 0 2
16779: PPUSH
16780: CALL_OW 141
// end ;
16784: GO 16717
16786: POP
16787: POP
// end ; end ;
16788: GO 16679
16790: POP
16791: POP
// end ;
16792: PPOPN 4
16794: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
16795: LD_VAR 0 1
16799: PUSH
16800: LD_INT 22
16802: PUSH
16803: LD_INT 1
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 23
16812: PUSH
16813: LD_INT 1
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 21
16822: PUSH
16823: LD_INT 1
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: LIST
16834: PPUSH
16835: CALL_OW 69
16839: IN
16840: PUSH
16841: LD_VAR 0 2
16845: PUSH
16846: LD_INT 1
16848: EQUAL
16849: AND
16850: IFFALSE 16856
// JMMTraitor ;
16852: CALL 9314 0 0
// end ; end_of_file
16856: PPOPN 3
16858: END
// every 10 10$0 do
16859: GO 16861
16861: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16862: LD_INT 5
16864: PPUSH
16865: LD_INT 3
16867: PPUSH
16868: LD_INT 2
16870: PUSH
16871: LD_INT 2
16873: PUSH
16874: LD_INT 3
16876: PUSH
16877: LD_INT 4
16879: PUSH
16880: LD_INT 4
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: PUSH
16889: LD_OWVAR 67
16893: ARRAY
16894: PLUS
16895: PPUSH
16896: LD_INT 0
16898: PPUSH
16899: LD_EXP 16
16903: PPUSH
16904: LD_EXP 17
16908: PPUSH
16909: CALL_OW 12
16913: PPUSH
16914: LD_INT 4
16916: PPUSH
16917: LD_INT 14
16919: PPUSH
16920: LD_INT 1
16922: PPUSH
16923: LD_INT 2
16925: PPUSH
16926: CALL 6932 0 9
16930: END
// every 20 20$0 do
16931: GO 16933
16933: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16934: LD_INT 5
16936: PPUSH
16937: LD_INT 3
16939: PPUSH
16940: LD_INT 4
16942: PUSH
16943: LD_INT 2
16945: PUSH
16946: LD_INT 3
16948: PUSH
16949: LD_INT 4
16951: PUSH
16952: LD_INT 5
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: PUSH
16961: LD_OWVAR 67
16965: ARRAY
16966: PLUS
16967: PPUSH
16968: LD_INT 2
16970: PPUSH
16971: LD_EXP 16
16975: PPUSH
16976: LD_EXP 17
16980: PPUSH
16981: CALL_OW 12
16985: PPUSH
16986: LD_INT 4
16988: PPUSH
16989: LD_INT 14
16991: PPUSH
16992: LD_INT 1
16994: PPUSH
16995: LD_INT 1
16997: PPUSH
16998: CALL 6932 0 9
17002: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
17003: GO 17005
17005: DISABLE
17006: LD_INT 0
17008: PPUSH
17009: PPUSH
17010: PPUSH
17011: PPUSH
17012: PPUSH
// begin hex := [ 123 , 95 ] ;
17013: LD_ADDR_VAR 0 4
17017: PUSH
17018: LD_INT 123
17020: PUSH
17021: LD_INT 95
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: ST_TO_ADDR
// tmp := [ ] ;
17028: LD_ADDR_VAR 0 5
17032: PUSH
17033: EMPTY
17034: ST_TO_ADDR
// if Difficulty > 1 then
17035: LD_OWVAR 67
17039: PUSH
17040: LD_INT 1
17042: GREATER
17043: IFFALSE 17053
// specAttack := true ;
17045: LD_ADDR_EXP 47
17049: PUSH
17050: LD_INT 1
17052: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
17053: LD_ADDR_VAR 0 1
17057: PUSH
17058: DOUBLE
17059: LD_INT 1
17061: DEC
17062: ST_TO_ADDR
17063: LD_INT 4
17065: PUSH
17066: LD_INT 5
17068: PUSH
17069: LD_INT 6
17071: PUSH
17072: LD_INT 7
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: PUSH
17081: LD_OWVAR 67
17085: ARRAY
17086: PUSH
17087: FOR_TO
17088: IFFALSE 17390
// begin uc_side := 5 ;
17090: LD_ADDR_OWVAR 20
17094: PUSH
17095: LD_INT 5
17097: ST_TO_ADDR
// uc_nation := 3 ;
17098: LD_ADDR_OWVAR 21
17102: PUSH
17103: LD_INT 3
17105: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
17106: LD_ADDR_OWVAR 37
17110: PUSH
17111: LD_INT 21
17113: PUSH
17114: LD_INT 22
17116: PUSH
17117: LD_INT 23
17119: PUSH
17120: LD_INT 24
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: PUSH
17129: LD_VAR 0 1
17133: PUSH
17134: LD_OWVAR 67
17138: MOD
17139: PUSH
17140: LD_INT 1
17142: PLUS
17143: ARRAY
17144: ST_TO_ADDR
// vc_engine := engine_combustion ;
17145: LD_ADDR_OWVAR 39
17149: PUSH
17150: LD_INT 1
17152: ST_TO_ADDR
// vc_control := control_manual ;
17153: LD_ADDR_OWVAR 38
17157: PUSH
17158: LD_INT 1
17160: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
17161: LD_ADDR_OWVAR 40
17165: PUSH
17166: LD_INT 42
17168: PUSH
17169: LD_INT 43
17171: PUSH
17172: LD_INT 44
17174: PUSH
17175: LD_INT 44
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: PUSH
17184: LD_VAR 0 1
17188: PUSH
17189: LD_OWVAR 67
17193: MOD
17194: PUSH
17195: LD_INT 1
17197: PLUS
17198: ARRAY
17199: ST_TO_ADDR
// veh := CreateVehicle ;
17200: LD_ADDR_VAR 0 3
17204: PUSH
17205: CALL_OW 45
17209: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17210: LD_VAR 0 3
17214: PPUSH
17215: LD_INT 5
17217: PPUSH
17218: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
17222: LD_INT 35
17224: PPUSH
17225: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17229: LD_VAR 0 4
17233: PUSH
17234: LD_INT 1
17236: ARRAY
17237: PPUSH
17238: LD_VAR 0 4
17242: PUSH
17243: LD_INT 2
17245: ARRAY
17246: PPUSH
17247: CALL_OW 428
17251: PUSH
17252: LD_INT 0
17254: EQUAL
17255: IFFALSE 17222
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17257: LD_VAR 0 3
17261: PPUSH
17262: LD_VAR 0 4
17266: PUSH
17267: LD_INT 1
17269: ARRAY
17270: PPUSH
17271: LD_VAR 0 4
17275: PUSH
17276: LD_INT 2
17278: ARRAY
17279: PPUSH
17280: LD_INT 0
17282: PPUSH
17283: CALL_OW 48
// uc_side := 5 ;
17287: LD_ADDR_OWVAR 20
17291: PUSH
17292: LD_INT 5
17294: ST_TO_ADDR
// uc_nation := 3 ;
17295: LD_ADDR_OWVAR 21
17299: PUSH
17300: LD_INT 3
17302: ST_TO_ADDR
// InitHC_All ( ) ;
17303: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
17307: LD_INT 0
17309: PPUSH
17310: LD_INT 2
17312: PUSH
17313: LD_OWVAR 67
17317: PLUS
17318: PPUSH
17319: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17323: CALL_OW 44
17327: PPUSH
17328: LD_VAR 0 3
17332: PPUSH
17333: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17337: LD_VAR 0 3
17341: PPUSH
17342: LD_INT 101
17344: PPUSH
17345: LD_INT 77
17347: PPUSH
17348: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17352: LD_ADDR_VAR 0 5
17356: PUSH
17357: LD_VAR 0 5
17361: PPUSH
17362: LD_VAR 0 5
17366: PUSH
17367: LD_INT 1
17369: PLUS
17370: PPUSH
17371: LD_VAR 0 3
17375: PPUSH
17376: CALL_OW 1
17380: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17381: LD_INT 105
17383: PPUSH
17384: CALL_OW 67
// end ;
17388: GO 17087
17390: POP
17391: POP
// repeat wait ( 0 0$1 ) ;
17392: LD_INT 35
17394: PPUSH
17395: CALL_OW 67
// for i in tmp do
17399: LD_ADDR_VAR 0 1
17403: PUSH
17404: LD_VAR 0 5
17408: PUSH
17409: FOR_IN
17410: IFFALSE 17478
// if not IsOk ( i ) then
17412: LD_VAR 0 1
17416: PPUSH
17417: CALL_OW 302
17421: NOT
17422: IFFALSE 17442
// tmp := tmp diff i else
17424: LD_ADDR_VAR 0 5
17428: PUSH
17429: LD_VAR 0 5
17433: PUSH
17434: LD_VAR 0 1
17438: DIFF
17439: ST_TO_ADDR
17440: GO 17476
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17442: LD_VAR 0 1
17446: PPUSH
17447: LD_INT 22
17449: PUSH
17450: LD_INT 1
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PPUSH
17457: CALL_OW 69
17461: PPUSH
17462: LD_VAR 0 1
17466: PPUSH
17467: CALL_OW 74
17471: PPUSH
17472: CALL_OW 115
17476: GO 17409
17478: POP
17479: POP
// until not tmp ;
17480: LD_VAR 0 5
17484: NOT
17485: IFFALSE 17392
// end ;
17487: PPOPN 5
17489: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17490: LD_EXP 47
17494: IFFALSE 17872
17496: GO 17498
17498: DISABLE
17499: LD_INT 0
17501: PPUSH
17502: PPUSH
17503: PPUSH
17504: PPUSH
// begin wait ( 0 0$20 ) ;
17505: LD_INT 700
17507: PPUSH
17508: CALL_OW 67
// uc_side := 5 ;
17512: LD_ADDR_OWVAR 20
17516: PUSH
17517: LD_INT 5
17519: ST_TO_ADDR
// uc_nation := 3 ;
17520: LD_ADDR_OWVAR 21
17524: PUSH
17525: LD_INT 3
17527: ST_TO_ADDR
// InitHc ;
17528: CALL_OW 19
// hc_importance := 0 ;
17532: LD_ADDR_OWVAR 32
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// tmp := [ ] ;
17540: LD_ADDR_VAR 0 2
17544: PUSH
17545: EMPTY
17546: ST_TO_ADDR
// InitHC_All ( ) ;
17547: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17551: LD_INT 0
17553: PPUSH
17554: LD_INT 2
17556: PPUSH
17557: LD_INT 6
17559: PPUSH
17560: CALL_OW 380
// eng := CreateHuman ;
17564: LD_ADDR_VAR 0 4
17568: PUSH
17569: CALL_OW 44
17573: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17574: LD_VAR 0 4
17578: PPUSH
17579: LD_INT 78
17581: PPUSH
17582: LD_INT 2
17584: PPUSH
17585: LD_INT 4
17587: PPUSH
17588: LD_INT 0
17590: PPUSH
17591: CALL_OW 50
// for i = 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
17595: LD_ADDR_VAR 0 3
17599: PUSH
17600: DOUBLE
17601: LD_INT 1
17603: DEC
17604: ST_TO_ADDR
17605: LD_INT 3
17607: PUSH
17608: LD_INT 3
17610: PUSH
17611: LD_INT 4
17613: PUSH
17614: LD_INT 5
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: PUSH
17623: LD_OWVAR 67
17627: ARRAY
17628: PUSH
17629: FOR_TO
17630: IFFALSE 17719
// begin InitHC_All ( ) ;
17632: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17636: LD_INT 0
17638: PPUSH
17639: LD_INT 1
17641: PPUSH
17642: LD_INT 4
17644: PUSH
17645: LD_INT 5
17647: PUSH
17648: LD_INT 6
17650: PUSH
17651: LD_INT 6
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: PUSH
17660: LD_OWVAR 67
17664: ARRAY
17665: PPUSH
17666: CALL_OW 380
// un := CreateHuman ;
17670: LD_ADDR_VAR 0 1
17674: PUSH
17675: CALL_OW 44
17679: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17680: LD_VAR 0 1
17684: PPUSH
17685: LD_INT 78
17687: PPUSH
17688: LD_INT 2
17690: PPUSH
17691: LD_INT 4
17693: PPUSH
17694: LD_INT 0
17696: PPUSH
17697: CALL_OW 50
// tmp := tmp ^ un ;
17701: LD_ADDR_VAR 0 2
17705: PUSH
17706: LD_VAR 0 2
17710: PUSH
17711: LD_VAR 0 1
17715: ADD
17716: ST_TO_ADDR
// end ;
17717: GO 17629
17719: POP
17720: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17721: LD_VAR 0 2
17725: PPUSH
17726: LD_INT 49
17728: PPUSH
17729: LD_INT 3
17731: PPUSH
17732: CALL_OW 111
// wait ( 0 0$2 ) ;
17736: LD_INT 70
17738: PPUSH
17739: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17743: LD_VAR 0 4
17747: PPUSH
17748: LD_INT 49
17750: PPUSH
17751: LD_INT 3
17753: PPUSH
17754: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17758: LD_VAR 0 4
17762: PPUSH
17763: LD_INT 4
17765: PPUSH
17766: CALL_OW 227
// wait ( 0 0$10 ) ;
17770: LD_INT 350
17772: PPUSH
17773: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17777: LD_INT 35
17779: PPUSH
17780: CALL_OW 67
// for i in tmp do
17784: LD_ADDR_VAR 0 3
17788: PUSH
17789: LD_VAR 0 2
17793: PUSH
17794: FOR_IN
17795: IFFALSE 17863
// if not IsOk ( i ) then
17797: LD_VAR 0 3
17801: PPUSH
17802: CALL_OW 302
17806: NOT
17807: IFFALSE 17827
// tmp := tmp diff i else
17809: LD_ADDR_VAR 0 2
17813: PUSH
17814: LD_VAR 0 2
17818: PUSH
17819: LD_VAR 0 3
17823: DIFF
17824: ST_TO_ADDR
17825: GO 17861
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17827: LD_VAR 0 3
17831: PPUSH
17832: LD_INT 22
17834: PUSH
17835: LD_INT 1
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PPUSH
17842: CALL_OW 69
17846: PPUSH
17847: LD_VAR 0 3
17851: PPUSH
17852: CALL_OW 74
17856: PPUSH
17857: CALL_OW 115
17861: GO 17794
17863: POP
17864: POP
// until not tmp ;
17865: LD_VAR 0 2
17869: NOT
17870: IFFALSE 17777
// end ; end_of_file
17872: PPOPN 4
17874: END
// every 0 0$1 trigger startTimer = 1 do
17875: LD_EXP 30
17879: PUSH
17880: LD_INT 1
17882: EQUAL
17883: IFFALSE 18013
17885: GO 17887
17887: DISABLE
// begin enable ;
17888: ENABLE
// if timerStatus = 1 then
17889: LD_EXP 29
17893: PUSH
17894: LD_INT 1
17896: EQUAL
17897: IFFALSE 17930
// begin timeToSupport = timeToSupport - 0 0$01 ;
17899: LD_ADDR_EXP 28
17903: PUSH
17904: LD_EXP 28
17908: PUSH
17909: LD_INT 35
17911: MINUS
17912: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17913: LD_ADDR_OWVAR 47
17917: PUSH
17918: LD_STRING #Am04-1
17920: PUSH
17921: LD_EXP 28
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: ST_TO_ADDR
// end ; if timerStatus = 2 then
17930: LD_EXP 29
17934: PUSH
17935: LD_INT 2
17937: EQUAL
17938: IFFALSE 17971
// begin timeToSupport = timeToSupport - 0 0$01 ;
17940: LD_ADDR_EXP 28
17944: PUSH
17945: LD_EXP 28
17949: PUSH
17950: LD_INT 35
17952: MINUS
17953: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17954: LD_ADDR_OWVAR 47
17958: PUSH
17959: LD_STRING #Am04-2
17961: PUSH
17962: LD_EXP 28
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: ST_TO_ADDR
// end ; if timerStatus = 3 then
17971: LD_EXP 29
17975: PUSH
17976: LD_INT 3
17978: EQUAL
17979: IFFALSE 17995
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17981: LD_ADDR_EXP 27
17985: PUSH
17986: LD_EXP 27
17990: PUSH
17991: LD_INT 35
17993: MINUS
17994: ST_TO_ADDR
// if timerStatus = 4 then
17995: LD_EXP 29
17999: PUSH
18000: LD_INT 4
18002: EQUAL
18003: IFFALSE 18013
// display_strings =  ;
18005: LD_ADDR_OWVAR 47
18009: PUSH
18010: LD_STRING 
18012: ST_TO_ADDR
// end ; end_of_file
18013: END
// every 0 0$1 trigger not reliefOfCommand and IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
18014: LD_EXP 48
18018: NOT
18019: PUSH
18020: LD_EXP 15
18024: PPUSH
18025: CALL_OW 301
18029: AND
18030: PUSH
18031: LD_INT 22
18033: PUSH
18034: LD_INT 3
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 21
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PPUSH
18055: CALL_OW 69
18059: PUSH
18060: LD_INT 14
18062: PUSH
18063: LD_INT 13
18065: PUSH
18066: LD_INT 12
18068: PUSH
18069: LD_INT 11
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: PUSH
18078: LD_OWVAR 67
18082: ARRAY
18083: LESS
18084: AND
18085: IFFALSE 18671
18087: GO 18089
18089: DISABLE
18090: LD_INT 0
18092: PPUSH
18093: PPUSH
18094: PPUSH
// begin AIEnable = 0 ;
18095: LD_ADDR_EXP 37
18099: PUSH
18100: LD_INT 0
18102: ST_TO_ADDR
// escapeAvalaible = 1 ;
18103: LD_ADDR_EXP 40
18107: PUSH
18108: LD_INT 1
18110: ST_TO_ADDR
// Video ( true ) ;
18111: LD_INT 1
18113: PPUSH
18114: CALL 78941 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
18118: LD_INT 3
18120: PPUSH
18121: LD_INT 1
18123: PPUSH
18124: LD_INT 1
18126: PPUSH
18127: LD_INT 0
18129: PPUSH
18130: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
18134: LD_INT 6
18136: PPUSH
18137: LD_INT 1
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: LD_INT 0
18145: PPUSH
18146: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
18150: LD_INT 5
18152: PPUSH
18153: LD_INT 1
18155: PPUSH
18156: LD_INT 1
18158: PPUSH
18159: LD_INT 0
18161: PPUSH
18162: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
18166: LD_INT 3
18168: PPUSH
18169: LD_INT 1
18171: PPUSH
18172: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
18176: LD_INT 97
18178: PPUSH
18179: LD_INT 91
18181: PPUSH
18182: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
18186: LD_INT 22
18188: PUSH
18189: LD_INT 3
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 21
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PPUSH
18210: CALL_OW 69
18214: PPUSH
18215: CALL_OW 121
// wait ( 0 0$01 ) ;
18219: LD_INT 35
18221: PPUSH
18222: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18226: LD_INT 22
18228: PUSH
18229: LD_INT 3
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 21
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PPUSH
18250: CALL_OW 69
18254: PPUSH
18255: LD_INT 124
18257: PPUSH
18258: LD_INT 98
18260: PPUSH
18261: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18265: LD_INT 22
18267: PUSH
18268: LD_INT 5
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 21
18277: PUSH
18278: LD_INT 1
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PPUSH
18289: CALL_OW 69
18293: PPUSH
18294: CALL_OW 121
// wait ( 0 0$01 ) ;
18298: LD_INT 35
18300: PPUSH
18301: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18305: LD_INT 22
18307: PUSH
18308: LD_INT 5
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 21
18317: PUSH
18318: LD_INT 1
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PPUSH
18329: CALL_OW 69
18333: PPUSH
18334: LD_INT 124
18336: PPUSH
18337: LD_INT 98
18339: PPUSH
18340: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18344: LD_INT 22
18346: PUSH
18347: LD_INT 6
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 21
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PPUSH
18368: CALL_OW 69
18372: PPUSH
18373: CALL_OW 121
// wait ( 0 0$01 ) ;
18377: LD_INT 35
18379: PPUSH
18380: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18384: LD_INT 22
18386: PUSH
18387: LD_INT 6
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 21
18396: PUSH
18397: LD_INT 1
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PPUSH
18408: CALL_OW 69
18412: PPUSH
18413: LD_INT 124
18415: PPUSH
18416: LD_INT 98
18418: PPUSH
18419: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18423: LD_INT 22
18425: PUSH
18426: LD_INT 1
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 21
18435: PUSH
18436: LD_INT 1
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PPUSH
18447: CALL_OW 69
18451: PPUSH
18452: LD_INT 124
18454: PPUSH
18455: LD_INT 96
18457: PPUSH
18458: CALL_OW 114
// wait ( 0 0$1 ) ;
18462: LD_INT 35
18464: PPUSH
18465: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18469: LD_INT 124
18471: PPUSH
18472: LD_INT 96
18474: PPUSH
18475: CALL_OW 84
// p := 0 0$0 ;
18479: LD_ADDR_VAR 0 3
18483: PUSH
18484: LD_INT 0
18486: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18487: LD_ADDR_VAR 0 2
18491: PUSH
18492: LD_INT 2
18494: PUSH
18495: LD_INT 22
18497: PUSH
18498: LD_INT 3
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 22
18507: PUSH
18508: LD_INT 6
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 21
18522: PUSH
18523: LD_INT 1
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PPUSH
18534: CALL_OW 69
18538: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18539: LD_INT 35
18541: PPUSH
18542: CALL_OW 67
// p := p + 0 0$1 ;
18546: LD_ADDR_VAR 0 3
18550: PUSH
18551: LD_VAR 0 3
18555: PUSH
18556: LD_INT 35
18558: PLUS
18559: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18560: LD_VAR 0 2
18564: PPUSH
18565: LD_INT 5
18567: PPUSH
18568: CALL_OW 113
// for i in tmp do
18572: LD_ADDR_VAR 0 1
18576: PUSH
18577: LD_VAR 0 2
18581: PUSH
18582: FOR_IN
18583: IFFALSE 18610
// if IsInArea ( tmp , RussianEscape ) then
18585: LD_VAR 0 2
18589: PPUSH
18590: LD_INT 5
18592: PPUSH
18593: CALL_OW 308
18597: IFFALSE 18608
// RemoveUnit ( i ) ;
18599: LD_VAR 0 1
18603: PPUSH
18604: CALL_OW 64
18608: GO 18582
18610: POP
18611: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18612: LD_INT 23
18614: PUSH
18615: LD_INT 3
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 21
18624: PUSH
18625: LD_INT 1
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 24
18634: PUSH
18635: LD_INT 250
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: LIST
18646: PPUSH
18647: CALL_OW 69
18651: PUSH
18652: LD_INT 0
18654: EQUAL
18655: PUSH
18656: LD_VAR 0 3
18660: PUSH
18661: LD_INT 245
18663: GREATEREQUAL
18664: OR
18665: IFFALSE 18539
// FinishMission ;
18667: CALL 18674 0 0
// end ;
18671: PPOPN 3
18673: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18674: LD_INT 0
18676: PPUSH
18677: PPUSH
18678: PPUSH
18679: PPUSH
18680: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
18681: LD_INT 22
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 21
18693: PUSH
18694: LD_INT 1
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 23
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 50
18713: PUSH
18714: EMPTY
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: PPUSH
18723: CALL_OW 69
18727: PPUSH
18728: CALL 43360 0 1
18732: PUSH
18733: LD_INT 5
18735: LESS
18736: IFFALSE 18747
// begin YouLost ( LostVictory ) ;
18738: LD_STRING LostVictory
18740: PPUSH
18741: CALL_OW 104
// exit ;
18745: GO 19434
// end ; if not vehicleProduceCounter then
18747: LD_EXP 42
18751: NOT
18752: IFFALSE 18761
// SetAchievement ( ACH_INFANTRY ) ;
18754: LD_STRING ACH_INFANTRY
18756: PPUSH
18757: CALL_OW 543
// if tick <= 20 20$00 then
18761: LD_OWVAR 1
18765: PUSH
18766: LD_INT 42000
18768: LESSEQUAL
18769: IFFALSE 18785
// begin wait ( 3 ) ;
18771: LD_INT 3
18773: PPUSH
18774: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18778: LD_STRING ACH_ASPEED_4
18780: PPUSH
18781: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18785: LD_INT 22
18787: PPUSH
18788: CALL 19439 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18792: LD_INT 69
18794: PPUSH
18795: LD_INT 1
18797: PPUSH
18798: CALL_OW 321
18802: PPUSH
18803: LD_STRING GatlingInGamma
18805: PPUSH
18806: CALL_OW 39
// m1 := false ;
18810: LD_ADDR_VAR 0 3
18814: PUSH
18815: LD_INT 0
18817: ST_TO_ADDR
// m2 := false ;
18818: LD_ADDR_VAR 0 4
18822: PUSH
18823: LD_INT 0
18825: ST_TO_ADDR
// m3 := false ;
18826: LD_ADDR_VAR 0 5
18830: PUSH
18831: LD_INT 0
18833: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18834: LD_EXP 34
18838: PUSH
18839: LD_INT 1
18841: EQUAL
18842: PUSH
18843: LD_EXP 35
18847: PUSH
18848: LD_INT 1
18850: EQUAL
18851: AND
18852: IFFALSE 18874
// begin AddMedal ( oil , 1 ) ;
18854: LD_STRING oil
18856: PPUSH
18857: LD_INT 1
18859: PPUSH
18860: CALL_OW 101
// m1 := true ;
18864: LD_ADDR_VAR 0 3
18868: PUSH
18869: LD_INT 1
18871: ST_TO_ADDR
// end else
18872: GO 18967
// begin if buildOil = 1 and buildPower = 0 then
18874: LD_EXP 34
18878: PUSH
18879: LD_INT 1
18881: EQUAL
18882: PUSH
18883: LD_EXP 35
18887: PUSH
18888: LD_INT 0
18890: EQUAL
18891: AND
18892: IFFALSE 18905
// AddMedal ( oil , - 1 ) ;
18894: LD_STRING oil
18896: PPUSH
18897: LD_INT 1
18899: NEG
18900: PPUSH
18901: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18905: LD_EXP 34
18909: PUSH
18910: LD_INT 0
18912: EQUAL
18913: PUSH
18914: LD_EXP 35
18918: PUSH
18919: LD_INT 1
18921: EQUAL
18922: AND
18923: IFFALSE 18936
// AddMedal ( oil , - 2 ) ;
18925: LD_STRING oil
18927: PPUSH
18928: LD_INT 2
18930: NEG
18931: PPUSH
18932: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18936: LD_EXP 34
18940: PUSH
18941: LD_INT 0
18943: EQUAL
18944: PUSH
18945: LD_EXP 35
18949: PUSH
18950: LD_INT 0
18952: EQUAL
18953: AND
18954: IFFALSE 18967
// AddMedal ( oil , - 3 ) ;
18956: LD_STRING oil
18958: PPUSH
18959: LD_INT 3
18961: NEG
18962: PPUSH
18963: CALL_OW 101
// end ; if lostCounter > 3 then
18967: LD_EXP 38
18971: PUSH
18972: LD_INT 3
18974: GREATER
18975: IFFALSE 18990
// AddMedal ( deaths , - 1 ) else
18977: LD_STRING deaths
18979: PPUSH
18980: LD_INT 1
18982: NEG
18983: PPUSH
18984: CALL_OW 101
18988: GO 19008
// begin AddMedal ( deaths , 1 ) ;
18990: LD_STRING deaths
18992: PPUSH
18993: LD_INT 1
18995: PPUSH
18996: CALL_OW 101
// m2 := true ;
19000: LD_ADDR_VAR 0 4
19004: PUSH
19005: LD_INT 1
19007: ST_TO_ADDR
// end ; if honor then
19008: LD_EXP 39
19012: IFFALSE 19034
// begin AddMedal ( honour , 1 ) ;
19014: LD_STRING honour
19016: PPUSH
19017: LD_INT 1
19019: PPUSH
19020: CALL_OW 101
// m3 := true ;
19024: LD_ADDR_VAR 0 5
19028: PUSH
19029: LD_INT 1
19031: ST_TO_ADDR
// end else
19032: GO 19045
// AddMedal ( honour , - 1 ) ;
19034: LD_STRING honour
19036: PPUSH
19037: LD_INT 1
19039: NEG
19040: PPUSH
19041: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
19045: LD_VAR 0 3
19049: PUSH
19050: LD_VAR 0 4
19054: AND
19055: PUSH
19056: LD_VAR 0 5
19060: AND
19061: PUSH
19062: LD_OWVAR 67
19066: PUSH
19067: LD_INT 3
19069: GREATEREQUAL
19070: AND
19071: IFFALSE 19083
// SetAchievementEX ( ACH_AMER , 4 ) ;
19073: LD_STRING ACH_AMER
19075: PPUSH
19076: LD_INT 4
19078: PPUSH
19079: CALL_OW 564
// GiveMedals ( Main ) ;
19083: LD_STRING Main
19085: PPUSH
19086: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19090: LD_INT 22
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 23
19102: PUSH
19103: LD_INT 1
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 21
19112: PUSH
19113: LD_INT 1
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: LIST
19124: PPUSH
19125: CALL_OW 69
19129: PPUSH
19130: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19134: LD_EXP 1
19138: PPUSH
19139: LD_EXP 49
19143: PUSH
19144: LD_STRING JMM
19146: STR
19147: PPUSH
19148: CALL_OW 38
// if IsOK ( Bobby ) then
19152: LD_EXP 2
19156: PPUSH
19157: CALL_OW 302
19161: IFFALSE 19181
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19163: LD_EXP 2
19167: PPUSH
19168: LD_EXP 49
19172: PUSH
19173: LD_STRING Bobby
19175: STR
19176: PPUSH
19177: CALL_OW 38
// if IsOK ( Cyrus ) then
19181: LD_EXP 3
19185: PPUSH
19186: CALL_OW 302
19190: IFFALSE 19210
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19192: LD_EXP 3
19196: PPUSH
19197: LD_EXP 49
19201: PUSH
19202: LD_STRING Cyrus
19204: STR
19205: PPUSH
19206: CALL_OW 38
// if IsOK ( Lisa ) then
19210: LD_EXP 4
19214: PPUSH
19215: CALL_OW 302
19219: IFFALSE 19239
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19221: LD_EXP 4
19225: PPUSH
19226: LD_EXP 49
19230: PUSH
19231: LD_STRING Lisa
19233: STR
19234: PPUSH
19235: CALL_OW 38
// if IsOK ( Brown ) then
19239: LD_EXP 7
19243: PPUSH
19244: CALL_OW 302
19248: IFFALSE 19275
// begin ToLua ( enableBioCharacter(BIO_JEFF) ) ;
19250: LD_STRING enableBioCharacter(BIO_JEFF)
19252: PPUSH
19253: CALL_OW 559
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
19257: LD_EXP 7
19261: PPUSH
19262: LD_EXP 49
19266: PUSH
19267: LD_STRING Brown
19269: STR
19270: PPUSH
19271: CALL_OW 38
// end ; if not IsDead ( Donaldson ) then
19275: LD_EXP 13
19279: PPUSH
19280: CALL_OW 301
19284: NOT
19285: IFFALSE 19312
// begin ToLua ( enableBioCharacter(BIO_LUCY) ) ;
19287: LD_STRING enableBioCharacter(BIO_LUCY)
19289: PPUSH
19290: CALL_OW 559
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19294: LD_EXP 13
19298: PPUSH
19299: LD_EXP 49
19303: PUSH
19304: LD_STRING Donaldson
19306: STR
19307: PPUSH
19308: CALL_OW 38
// end ; if not IsDead ( Frank ) then
19312: LD_EXP 5
19316: PPUSH
19317: CALL_OW 301
19321: NOT
19322: IFFALSE 19342
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19324: LD_EXP 5
19328: PPUSH
19329: LD_EXP 49
19333: PUSH
19334: LD_STRING Frank
19336: STR
19337: PPUSH
19338: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19342: LD_INT 50
19344: PUSH
19345: EMPTY
19346: LIST
19347: PUSH
19348: LD_INT 22
19350: PUSH
19351: LD_INT 1
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 21
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: LIST
19372: PPUSH
19373: CALL_OW 69
19377: PUSH
19378: LD_EXP 1
19382: PUSH
19383: LD_EXP 2
19387: PUSH
19388: LD_EXP 3
19392: PUSH
19393: LD_EXP 4
19397: PUSH
19398: LD_EXP 7
19402: PUSH
19403: LD_EXP 13
19407: PUSH
19408: LD_EXP 5
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: DIFF
19422: PPUSH
19423: LD_STRING 04_other_survivors
19425: PPUSH
19426: CALL_OW 38
// YouWin ;
19430: CALL_OW 103
// end ;
19434: LD_VAR 0 1
19438: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19439: LD_INT 0
19441: PPUSH
19442: PPUSH
19443: PPUSH
19444: PPUSH
// gammaBase = [ ] ;
19445: LD_ADDR_VAR 0 4
19449: PUSH
19450: EMPTY
19451: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19452: LD_ADDR_VAR 0 5
19456: PUSH
19457: LD_VAR 0 1
19461: PPUSH
19462: LD_INT 22
19464: PUSH
19465: LD_INT 1
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 21
19474: PUSH
19475: LD_INT 3
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PPUSH
19486: CALL_OW 70
19490: ST_TO_ADDR
// for i in buildings do
19491: LD_ADDR_VAR 0 3
19495: PUSH
19496: LD_VAR 0 5
19500: PUSH
19501: FOR_IN
19502: IFFALSE 19839
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19504: LD_VAR 0 3
19508: PPUSH
19509: CALL_OW 266
19513: PUSH
19514: LD_INT 6
19516: PUSH
19517: LD_INT 7
19519: PUSH
19520: LD_INT 8
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: IN
19528: IFFALSE 19642
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19530: LD_ADDR_VAR 0 4
19534: PUSH
19535: LD_VAR 0 4
19539: PUSH
19540: LD_VAR 0 3
19544: PPUSH
19545: CALL_OW 266
19549: PUSH
19550: LD_VAR 0 3
19554: PPUSH
19555: CALL_OW 250
19559: PUSH
19560: LD_VAR 0 3
19564: PPUSH
19565: CALL_OW 251
19569: PUSH
19570: LD_VAR 0 3
19574: PPUSH
19575: CALL_OW 254
19579: PUSH
19580: LD_VAR 0 3
19584: PPUSH
19585: CALL_OW 267
19589: PUSH
19590: LD_VAR 0 3
19594: PPUSH
19595: CALL_OW 248
19599: PUSH
19600: LD_VAR 0 3
19604: PPUSH
19605: LD_INT 1
19607: PPUSH
19608: CALL_OW 268
19612: PUSH
19613: LD_VAR 0 3
19617: PPUSH
19618: LD_INT 2
19620: PPUSH
19621: CALL_OW 268
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: PUSH
19636: EMPTY
19637: LIST
19638: ADD
19639: ST_TO_ADDR
19640: GO 19837
// if GetBType ( i ) in [ b_bunker ] then
19642: LD_VAR 0 3
19646: PPUSH
19647: CALL_OW 266
19651: PUSH
19652: LD_INT 32
19654: PUSH
19655: EMPTY
19656: LIST
19657: IN
19658: IFFALSE 19755
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19660: LD_ADDR_VAR 0 4
19664: PUSH
19665: LD_VAR 0 4
19669: PUSH
19670: LD_VAR 0 3
19674: PPUSH
19675: CALL_OW 266
19679: PUSH
19680: LD_VAR 0 3
19684: PPUSH
19685: CALL_OW 250
19689: PUSH
19690: LD_VAR 0 3
19694: PPUSH
19695: CALL_OW 251
19699: PUSH
19700: LD_VAR 0 3
19704: PPUSH
19705: CALL_OW 254
19709: PUSH
19710: LD_VAR 0 3
19714: PPUSH
19715: CALL_OW 267
19719: PUSH
19720: LD_VAR 0 3
19724: PPUSH
19725: CALL_OW 248
19729: PUSH
19730: LD_VAR 0 3
19734: PPUSH
19735: CALL_OW 269
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: PUSH
19749: EMPTY
19750: LIST
19751: ADD
19752: ST_TO_ADDR
19753: GO 19837
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19755: LD_ADDR_VAR 0 4
19759: PUSH
19760: LD_VAR 0 4
19764: PUSH
19765: LD_VAR 0 3
19769: PPUSH
19770: CALL_OW 266
19774: PUSH
19775: LD_VAR 0 3
19779: PPUSH
19780: CALL_OW 250
19784: PUSH
19785: LD_VAR 0 3
19789: PPUSH
19790: CALL_OW 251
19794: PUSH
19795: LD_VAR 0 3
19799: PPUSH
19800: CALL_OW 254
19804: PUSH
19805: LD_VAR 0 3
19809: PPUSH
19810: CALL_OW 267
19814: PUSH
19815: LD_VAR 0 3
19819: PPUSH
19820: CALL_OW 248
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: PUSH
19833: EMPTY
19834: LIST
19835: ADD
19836: ST_TO_ADDR
// end ;
19837: GO 19501
19839: POP
19840: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19841: LD_VAR 0 4
19845: PPUSH
19846: LD_STRING GammaBase
19848: PPUSH
19849: CALL_OW 39
// end ; end_of_file
19853: LD_VAR 0 2
19857: RET
// every 1 1$15 do
19858: GO 19860
19860: DISABLE
// begin if supply <= 13 and supply > 7 then
19861: LD_EXP 36
19865: PUSH
19866: LD_INT 13
19868: LESSEQUAL
19869: PUSH
19870: LD_EXP 36
19874: PUSH
19875: LD_INT 7
19877: GREATER
19878: AND
19879: IFFALSE 19902
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19881: LD_INT 3
19883: PPUSH
19884: LD_INT 5
19886: PPUSH
19887: CALL_OW 12
19891: PPUSH
19892: LD_INT 18
19894: PPUSH
19895: LD_INT 1
19897: PPUSH
19898: CALL_OW 55
// if supply <= 7 and supply > 4 then
19902: LD_EXP 36
19906: PUSH
19907: LD_INT 7
19909: LESSEQUAL
19910: PUSH
19911: LD_EXP 36
19915: PUSH
19916: LD_INT 4
19918: GREATER
19919: AND
19920: IFFALSE 19943
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19922: LD_INT 3
19924: PPUSH
19925: LD_INT 5
19927: PPUSH
19928: CALL_OW 12
19932: PPUSH
19933: LD_INT 19
19935: PPUSH
19936: LD_INT 1
19938: PPUSH
19939: CALL_OW 55
// if supply <= 4 and supply > 0 then
19943: LD_EXP 36
19947: PUSH
19948: LD_INT 4
19950: LESSEQUAL
19951: PUSH
19952: LD_EXP 36
19956: PUSH
19957: LD_INT 0
19959: GREATER
19960: AND
19961: IFFALSE 19984
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19963: LD_INT 3
19965: PPUSH
19966: LD_INT 5
19968: PPUSH
19969: CALL_OW 12
19973: PPUSH
19974: LD_INT 20
19976: PPUSH
19977: LD_INT 1
19979: PPUSH
19980: CALL_OW 55
// if supply then
19984: LD_EXP 36
19988: IFFALSE 20005
// begin supply = supply - 1 ;
19990: LD_ADDR_EXP 36
19994: PUSH
19995: LD_EXP 36
19999: PUSH
20000: LD_INT 1
20002: MINUS
20003: ST_TO_ADDR
// enable ;
20004: ENABLE
// end ; end ; end_of_file end_of_file
20005: END
// export globalGameSaveCounter ; every 0 0$1 do
20006: GO 20008
20008: DISABLE
// begin enable ;
20009: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20010: LD_STRING updateTimer(
20012: PUSH
20013: LD_OWVAR 1
20017: STR
20018: PUSH
20019: LD_STRING );
20021: STR
20022: PPUSH
20023: CALL_OW 559
// end ;
20027: END
// every 0 0$1 do
20028: GO 20030
20030: DISABLE
// begin globalGameSaveCounter := 0 ;
20031: LD_ADDR_EXP 51
20035: PUSH
20036: LD_INT 0
20038: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20039: LD_STRING setGameSaveCounter(0)
20041: PPUSH
20042: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20046: LD_STRING initStreamRollete();
20048: PPUSH
20049: CALL_OW 559
// InitStreamMode ;
20053: CALL 21396 0 0
// DefineStreamItems ( false ) ;
20057: LD_INT 0
20059: PPUSH
20060: CALL 21860 0 1
// end ;
20064: END
// export function SOS_MapStart ( ) ; begin
20065: LD_INT 0
20067: PPUSH
// if streamModeActive then
20068: LD_EXP 52
20072: IFFALSE 20081
// DefineStreamItems ( true ) ;
20074: LD_INT 1
20076: PPUSH
20077: CALL 21860 0 1
// UpdateLuaVariables ( ) ;
20081: CALL 20098 0 0
// UpdateFactoryWaypoints ( ) ;
20085: CALL 34862 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20089: CALL 35114 0 0
// end ;
20093: LD_VAR 0 1
20097: RET
// function UpdateLuaVariables ( ) ; begin
20098: LD_INT 0
20100: PPUSH
// if globalGameSaveCounter then
20101: LD_EXP 51
20105: IFFALSE 20139
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20107: LD_ADDR_EXP 51
20111: PUSH
20112: LD_EXP 51
20116: PPUSH
20117: CALL 80330 0 1
20121: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20122: LD_STRING setGameSaveCounter(
20124: PUSH
20125: LD_EXP 51
20129: STR
20130: PUSH
20131: LD_STRING )
20133: STR
20134: PPUSH
20135: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20139: LD_STRING setGameDifficulty(
20141: PUSH
20142: LD_OWVAR 67
20146: STR
20147: PUSH
20148: LD_STRING )
20150: STR
20151: PPUSH
20152: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20156: LD_STRING displayDifficulty(
20158: PUSH
20159: LD_OWVAR 67
20163: STR
20164: PUSH
20165: LD_STRING )
20167: STR
20168: PPUSH
20169: CALL_OW 559
// end ;
20173: LD_VAR 0 1
20177: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20178: LD_INT 0
20180: PPUSH
// if p2 = stream_mode then
20181: LD_VAR 0 2
20185: PUSH
20186: LD_INT 100
20188: EQUAL
20189: IFFALSE 21192
// begin if not StreamModeActive then
20191: LD_EXP 52
20195: NOT
20196: IFFALSE 20206
// StreamModeActive := true ;
20198: LD_ADDR_EXP 52
20202: PUSH
20203: LD_INT 1
20205: ST_TO_ADDR
// if p3 = 0 then
20206: LD_VAR 0 3
20210: PUSH
20211: LD_INT 0
20213: EQUAL
20214: IFFALSE 20220
// InitStreamMode ;
20216: CALL 21396 0 0
// if p3 = 1 then
20220: LD_VAR 0 3
20224: PUSH
20225: LD_INT 1
20227: EQUAL
20228: IFFALSE 20238
// sRocket := true ;
20230: LD_ADDR_EXP 57
20234: PUSH
20235: LD_INT 1
20237: ST_TO_ADDR
// if p3 = 2 then
20238: LD_VAR 0 3
20242: PUSH
20243: LD_INT 2
20245: EQUAL
20246: IFFALSE 20256
// sSpeed := true ;
20248: LD_ADDR_EXP 56
20252: PUSH
20253: LD_INT 1
20255: ST_TO_ADDR
// if p3 = 3 then
20256: LD_VAR 0 3
20260: PUSH
20261: LD_INT 3
20263: EQUAL
20264: IFFALSE 20274
// sEngine := true ;
20266: LD_ADDR_EXP 58
20270: PUSH
20271: LD_INT 1
20273: ST_TO_ADDR
// if p3 = 4 then
20274: LD_VAR 0 3
20278: PUSH
20279: LD_INT 4
20281: EQUAL
20282: IFFALSE 20292
// sSpec := true ;
20284: LD_ADDR_EXP 55
20288: PUSH
20289: LD_INT 1
20291: ST_TO_ADDR
// if p3 = 5 then
20292: LD_VAR 0 3
20296: PUSH
20297: LD_INT 5
20299: EQUAL
20300: IFFALSE 20310
// sLevel := true ;
20302: LD_ADDR_EXP 59
20306: PUSH
20307: LD_INT 1
20309: ST_TO_ADDR
// if p3 = 6 then
20310: LD_VAR 0 3
20314: PUSH
20315: LD_INT 6
20317: EQUAL
20318: IFFALSE 20328
// sArmoury := true ;
20320: LD_ADDR_EXP 60
20324: PUSH
20325: LD_INT 1
20327: ST_TO_ADDR
// if p3 = 7 then
20328: LD_VAR 0 3
20332: PUSH
20333: LD_INT 7
20335: EQUAL
20336: IFFALSE 20346
// sRadar := true ;
20338: LD_ADDR_EXP 61
20342: PUSH
20343: LD_INT 1
20345: ST_TO_ADDR
// if p3 = 8 then
20346: LD_VAR 0 3
20350: PUSH
20351: LD_INT 8
20353: EQUAL
20354: IFFALSE 20364
// sBunker := true ;
20356: LD_ADDR_EXP 62
20360: PUSH
20361: LD_INT 1
20363: ST_TO_ADDR
// if p3 = 9 then
20364: LD_VAR 0 3
20368: PUSH
20369: LD_INT 9
20371: EQUAL
20372: IFFALSE 20382
// sHack := true ;
20374: LD_ADDR_EXP 63
20378: PUSH
20379: LD_INT 1
20381: ST_TO_ADDR
// if p3 = 10 then
20382: LD_VAR 0 3
20386: PUSH
20387: LD_INT 10
20389: EQUAL
20390: IFFALSE 20400
// sFire := true ;
20392: LD_ADDR_EXP 64
20396: PUSH
20397: LD_INT 1
20399: ST_TO_ADDR
// if p3 = 11 then
20400: LD_VAR 0 3
20404: PUSH
20405: LD_INT 11
20407: EQUAL
20408: IFFALSE 20418
// sRefresh := true ;
20410: LD_ADDR_EXP 65
20414: PUSH
20415: LD_INT 1
20417: ST_TO_ADDR
// if p3 = 12 then
20418: LD_VAR 0 3
20422: PUSH
20423: LD_INT 12
20425: EQUAL
20426: IFFALSE 20436
// sExp := true ;
20428: LD_ADDR_EXP 66
20432: PUSH
20433: LD_INT 1
20435: ST_TO_ADDR
// if p3 = 13 then
20436: LD_VAR 0 3
20440: PUSH
20441: LD_INT 13
20443: EQUAL
20444: IFFALSE 20454
// sDepot := true ;
20446: LD_ADDR_EXP 67
20450: PUSH
20451: LD_INT 1
20453: ST_TO_ADDR
// if p3 = 14 then
20454: LD_VAR 0 3
20458: PUSH
20459: LD_INT 14
20461: EQUAL
20462: IFFALSE 20472
// sFlag := true ;
20464: LD_ADDR_EXP 68
20468: PUSH
20469: LD_INT 1
20471: ST_TO_ADDR
// if p3 = 15 then
20472: LD_VAR 0 3
20476: PUSH
20477: LD_INT 15
20479: EQUAL
20480: IFFALSE 20490
// sKamikadze := true ;
20482: LD_ADDR_EXP 76
20486: PUSH
20487: LD_INT 1
20489: ST_TO_ADDR
// if p3 = 16 then
20490: LD_VAR 0 3
20494: PUSH
20495: LD_INT 16
20497: EQUAL
20498: IFFALSE 20508
// sTroll := true ;
20500: LD_ADDR_EXP 77
20504: PUSH
20505: LD_INT 1
20507: ST_TO_ADDR
// if p3 = 17 then
20508: LD_VAR 0 3
20512: PUSH
20513: LD_INT 17
20515: EQUAL
20516: IFFALSE 20526
// sSlow := true ;
20518: LD_ADDR_EXP 78
20522: PUSH
20523: LD_INT 1
20525: ST_TO_ADDR
// if p3 = 18 then
20526: LD_VAR 0 3
20530: PUSH
20531: LD_INT 18
20533: EQUAL
20534: IFFALSE 20544
// sLack := true ;
20536: LD_ADDR_EXP 79
20540: PUSH
20541: LD_INT 1
20543: ST_TO_ADDR
// if p3 = 19 then
20544: LD_VAR 0 3
20548: PUSH
20549: LD_INT 19
20551: EQUAL
20552: IFFALSE 20562
// sTank := true ;
20554: LD_ADDR_EXP 81
20558: PUSH
20559: LD_INT 1
20561: ST_TO_ADDR
// if p3 = 20 then
20562: LD_VAR 0 3
20566: PUSH
20567: LD_INT 20
20569: EQUAL
20570: IFFALSE 20580
// sRemote := true ;
20572: LD_ADDR_EXP 82
20576: PUSH
20577: LD_INT 1
20579: ST_TO_ADDR
// if p3 = 21 then
20580: LD_VAR 0 3
20584: PUSH
20585: LD_INT 21
20587: EQUAL
20588: IFFALSE 20598
// sPowell := true ;
20590: LD_ADDR_EXP 83
20594: PUSH
20595: LD_INT 1
20597: ST_TO_ADDR
// if p3 = 22 then
20598: LD_VAR 0 3
20602: PUSH
20603: LD_INT 22
20605: EQUAL
20606: IFFALSE 20616
// sTeleport := true ;
20608: LD_ADDR_EXP 86
20612: PUSH
20613: LD_INT 1
20615: ST_TO_ADDR
// if p3 = 23 then
20616: LD_VAR 0 3
20620: PUSH
20621: LD_INT 23
20623: EQUAL
20624: IFFALSE 20634
// sOilTower := true ;
20626: LD_ADDR_EXP 88
20630: PUSH
20631: LD_INT 1
20633: ST_TO_ADDR
// if p3 = 24 then
20634: LD_VAR 0 3
20638: PUSH
20639: LD_INT 24
20641: EQUAL
20642: IFFALSE 20652
// sShovel := true ;
20644: LD_ADDR_EXP 89
20648: PUSH
20649: LD_INT 1
20651: ST_TO_ADDR
// if p3 = 25 then
20652: LD_VAR 0 3
20656: PUSH
20657: LD_INT 25
20659: EQUAL
20660: IFFALSE 20670
// sSheik := true ;
20662: LD_ADDR_EXP 90
20666: PUSH
20667: LD_INT 1
20669: ST_TO_ADDR
// if p3 = 26 then
20670: LD_VAR 0 3
20674: PUSH
20675: LD_INT 26
20677: EQUAL
20678: IFFALSE 20688
// sEarthquake := true ;
20680: LD_ADDR_EXP 92
20684: PUSH
20685: LD_INT 1
20687: ST_TO_ADDR
// if p3 = 27 then
20688: LD_VAR 0 3
20692: PUSH
20693: LD_INT 27
20695: EQUAL
20696: IFFALSE 20706
// sAI := true ;
20698: LD_ADDR_EXP 93
20702: PUSH
20703: LD_INT 1
20705: ST_TO_ADDR
// if p3 = 28 then
20706: LD_VAR 0 3
20710: PUSH
20711: LD_INT 28
20713: EQUAL
20714: IFFALSE 20724
// sCargo := true ;
20716: LD_ADDR_EXP 96
20720: PUSH
20721: LD_INT 1
20723: ST_TO_ADDR
// if p3 = 29 then
20724: LD_VAR 0 3
20728: PUSH
20729: LD_INT 29
20731: EQUAL
20732: IFFALSE 20742
// sDLaser := true ;
20734: LD_ADDR_EXP 97
20738: PUSH
20739: LD_INT 1
20741: ST_TO_ADDR
// if p3 = 30 then
20742: LD_VAR 0 3
20746: PUSH
20747: LD_INT 30
20749: EQUAL
20750: IFFALSE 20760
// sExchange := true ;
20752: LD_ADDR_EXP 98
20756: PUSH
20757: LD_INT 1
20759: ST_TO_ADDR
// if p3 = 31 then
20760: LD_VAR 0 3
20764: PUSH
20765: LD_INT 31
20767: EQUAL
20768: IFFALSE 20778
// sFac := true ;
20770: LD_ADDR_EXP 99
20774: PUSH
20775: LD_INT 1
20777: ST_TO_ADDR
// if p3 = 32 then
20778: LD_VAR 0 3
20782: PUSH
20783: LD_INT 32
20785: EQUAL
20786: IFFALSE 20796
// sPower := true ;
20788: LD_ADDR_EXP 100
20792: PUSH
20793: LD_INT 1
20795: ST_TO_ADDR
// if p3 = 33 then
20796: LD_VAR 0 3
20800: PUSH
20801: LD_INT 33
20803: EQUAL
20804: IFFALSE 20814
// sRandom := true ;
20806: LD_ADDR_EXP 101
20810: PUSH
20811: LD_INT 1
20813: ST_TO_ADDR
// if p3 = 34 then
20814: LD_VAR 0 3
20818: PUSH
20819: LD_INT 34
20821: EQUAL
20822: IFFALSE 20832
// sShield := true ;
20824: LD_ADDR_EXP 102
20828: PUSH
20829: LD_INT 1
20831: ST_TO_ADDR
// if p3 = 35 then
20832: LD_VAR 0 3
20836: PUSH
20837: LD_INT 35
20839: EQUAL
20840: IFFALSE 20850
// sTime := true ;
20842: LD_ADDR_EXP 103
20846: PUSH
20847: LD_INT 1
20849: ST_TO_ADDR
// if p3 = 36 then
20850: LD_VAR 0 3
20854: PUSH
20855: LD_INT 36
20857: EQUAL
20858: IFFALSE 20868
// sTools := true ;
20860: LD_ADDR_EXP 104
20864: PUSH
20865: LD_INT 1
20867: ST_TO_ADDR
// if p3 = 101 then
20868: LD_VAR 0 3
20872: PUSH
20873: LD_INT 101
20875: EQUAL
20876: IFFALSE 20886
// sSold := true ;
20878: LD_ADDR_EXP 69
20882: PUSH
20883: LD_INT 1
20885: ST_TO_ADDR
// if p3 = 102 then
20886: LD_VAR 0 3
20890: PUSH
20891: LD_INT 102
20893: EQUAL
20894: IFFALSE 20904
// sDiff := true ;
20896: LD_ADDR_EXP 70
20900: PUSH
20901: LD_INT 1
20903: ST_TO_ADDR
// if p3 = 103 then
20904: LD_VAR 0 3
20908: PUSH
20909: LD_INT 103
20911: EQUAL
20912: IFFALSE 20922
// sFog := true ;
20914: LD_ADDR_EXP 73
20918: PUSH
20919: LD_INT 1
20921: ST_TO_ADDR
// if p3 = 104 then
20922: LD_VAR 0 3
20926: PUSH
20927: LD_INT 104
20929: EQUAL
20930: IFFALSE 20940
// sReset := true ;
20932: LD_ADDR_EXP 74
20936: PUSH
20937: LD_INT 1
20939: ST_TO_ADDR
// if p3 = 105 then
20940: LD_VAR 0 3
20944: PUSH
20945: LD_INT 105
20947: EQUAL
20948: IFFALSE 20958
// sSun := true ;
20950: LD_ADDR_EXP 75
20954: PUSH
20955: LD_INT 1
20957: ST_TO_ADDR
// if p3 = 106 then
20958: LD_VAR 0 3
20962: PUSH
20963: LD_INT 106
20965: EQUAL
20966: IFFALSE 20976
// sTiger := true ;
20968: LD_ADDR_EXP 71
20972: PUSH
20973: LD_INT 1
20975: ST_TO_ADDR
// if p3 = 107 then
20976: LD_VAR 0 3
20980: PUSH
20981: LD_INT 107
20983: EQUAL
20984: IFFALSE 20994
// sBomb := true ;
20986: LD_ADDR_EXP 72
20990: PUSH
20991: LD_INT 1
20993: ST_TO_ADDR
// if p3 = 108 then
20994: LD_VAR 0 3
20998: PUSH
20999: LD_INT 108
21001: EQUAL
21002: IFFALSE 21012
// sWound := true ;
21004: LD_ADDR_EXP 80
21008: PUSH
21009: LD_INT 1
21011: ST_TO_ADDR
// if p3 = 109 then
21012: LD_VAR 0 3
21016: PUSH
21017: LD_INT 109
21019: EQUAL
21020: IFFALSE 21030
// sBetray := true ;
21022: LD_ADDR_EXP 84
21026: PUSH
21027: LD_INT 1
21029: ST_TO_ADDR
// if p3 = 110 then
21030: LD_VAR 0 3
21034: PUSH
21035: LD_INT 110
21037: EQUAL
21038: IFFALSE 21048
// sContamin := true ;
21040: LD_ADDR_EXP 85
21044: PUSH
21045: LD_INT 1
21047: ST_TO_ADDR
// if p3 = 111 then
21048: LD_VAR 0 3
21052: PUSH
21053: LD_INT 111
21055: EQUAL
21056: IFFALSE 21066
// sOil := true ;
21058: LD_ADDR_EXP 87
21062: PUSH
21063: LD_INT 1
21065: ST_TO_ADDR
// if p3 = 112 then
21066: LD_VAR 0 3
21070: PUSH
21071: LD_INT 112
21073: EQUAL
21074: IFFALSE 21084
// sStu := true ;
21076: LD_ADDR_EXP 91
21080: PUSH
21081: LD_INT 1
21083: ST_TO_ADDR
// if p3 = 113 then
21084: LD_VAR 0 3
21088: PUSH
21089: LD_INT 113
21091: EQUAL
21092: IFFALSE 21102
// sBazooka := true ;
21094: LD_ADDR_EXP 94
21098: PUSH
21099: LD_INT 1
21101: ST_TO_ADDR
// if p3 = 114 then
21102: LD_VAR 0 3
21106: PUSH
21107: LD_INT 114
21109: EQUAL
21110: IFFALSE 21120
// sMortar := true ;
21112: LD_ADDR_EXP 95
21116: PUSH
21117: LD_INT 1
21119: ST_TO_ADDR
// if p3 = 115 then
21120: LD_VAR 0 3
21124: PUSH
21125: LD_INT 115
21127: EQUAL
21128: IFFALSE 21138
// sRanger := true ;
21130: LD_ADDR_EXP 105
21134: PUSH
21135: LD_INT 1
21137: ST_TO_ADDR
// if p3 = 116 then
21138: LD_VAR 0 3
21142: PUSH
21143: LD_INT 116
21145: EQUAL
21146: IFFALSE 21156
// sComputer := true ;
21148: LD_ADDR_EXP 106
21152: PUSH
21153: LD_INT 1
21155: ST_TO_ADDR
// if p3 = 117 then
21156: LD_VAR 0 3
21160: PUSH
21161: LD_INT 117
21163: EQUAL
21164: IFFALSE 21174
// s30 := true ;
21166: LD_ADDR_EXP 107
21170: PUSH
21171: LD_INT 1
21173: ST_TO_ADDR
// if p3 = 118 then
21174: LD_VAR 0 3
21178: PUSH
21179: LD_INT 118
21181: EQUAL
21182: IFFALSE 21192
// s60 := true ;
21184: LD_ADDR_EXP 108
21188: PUSH
21189: LD_INT 1
21191: ST_TO_ADDR
// end ; if p2 = hack_mode then
21192: LD_VAR 0 2
21196: PUSH
21197: LD_INT 101
21199: EQUAL
21200: IFFALSE 21328
// begin case p3 of 1 :
21202: LD_VAR 0 3
21206: PUSH
21207: LD_INT 1
21209: DOUBLE
21210: EQUAL
21211: IFTRUE 21215
21213: GO 21222
21215: POP
// hHackUnlimitedResources ; 2 :
21216: CALL 33475 0 0
21220: GO 21328
21222: LD_INT 2
21224: DOUBLE
21225: EQUAL
21226: IFTRUE 21230
21228: GO 21237
21230: POP
// hHackSetLevel10 ; 3 :
21231: CALL 33608 0 0
21235: GO 21328
21237: LD_INT 3
21239: DOUBLE
21240: EQUAL
21241: IFTRUE 21245
21243: GO 21252
21245: POP
// hHackSetLevel10YourUnits ; 4 :
21246: CALL 33693 0 0
21250: GO 21328
21252: LD_INT 4
21254: DOUBLE
21255: EQUAL
21256: IFTRUE 21260
21258: GO 21267
21260: POP
// hHackInvincible ; 5 :
21261: CALL 34141 0 0
21265: GO 21328
21267: LD_INT 5
21269: DOUBLE
21270: EQUAL
21271: IFTRUE 21275
21273: GO 21282
21275: POP
// hHackInvisible ; 6 :
21276: CALL 34252 0 0
21280: GO 21328
21282: LD_INT 6
21284: DOUBLE
21285: EQUAL
21286: IFTRUE 21290
21288: GO 21297
21290: POP
// hHackChangeYourSide ; 7 :
21291: CALL 34309 0 0
21295: GO 21328
21297: LD_INT 7
21299: DOUBLE
21300: EQUAL
21301: IFTRUE 21305
21303: GO 21312
21305: POP
// hHackChangeUnitSide ; 8 :
21306: CALL 34351 0 0
21310: GO 21328
21312: LD_INT 8
21314: DOUBLE
21315: EQUAL
21316: IFTRUE 21320
21318: GO 21327
21320: POP
// hHackFog ; end ;
21321: CALL 34452 0 0
21325: GO 21328
21327: POP
// end ; if p2 = game_save_mode then
21328: LD_VAR 0 2
21332: PUSH
21333: LD_INT 102
21335: EQUAL
21336: IFFALSE 21391
// begin if p3 = 1 then
21338: LD_VAR 0 3
21342: PUSH
21343: LD_INT 1
21345: EQUAL
21346: IFFALSE 21358
// globalGameSaveCounter := p4 ;
21348: LD_ADDR_EXP 51
21352: PUSH
21353: LD_VAR 0 4
21357: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21358: LD_VAR 0 3
21362: PUSH
21363: LD_INT 2
21365: EQUAL
21366: PUSH
21367: LD_EXP 51
21371: AND
21372: IFFALSE 21391
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21374: LD_STRING setGameSaveCounter(
21376: PUSH
21377: LD_EXP 51
21381: STR
21382: PUSH
21383: LD_STRING )
21385: STR
21386: PPUSH
21387: CALL_OW 559
// end ; end ;
21391: LD_VAR 0 7
21395: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21396: LD_INT 0
21398: PPUSH
// streamModeActive := false ;
21399: LD_ADDR_EXP 52
21403: PUSH
21404: LD_INT 0
21406: ST_TO_ADDR
// normalCounter := 36 ;
21407: LD_ADDR_EXP 53
21411: PUSH
21412: LD_INT 36
21414: ST_TO_ADDR
// hardcoreCounter := 18 ;
21415: LD_ADDR_EXP 54
21419: PUSH
21420: LD_INT 18
21422: ST_TO_ADDR
// sRocket := false ;
21423: LD_ADDR_EXP 57
21427: PUSH
21428: LD_INT 0
21430: ST_TO_ADDR
// sSpeed := false ;
21431: LD_ADDR_EXP 56
21435: PUSH
21436: LD_INT 0
21438: ST_TO_ADDR
// sEngine := false ;
21439: LD_ADDR_EXP 58
21443: PUSH
21444: LD_INT 0
21446: ST_TO_ADDR
// sSpec := false ;
21447: LD_ADDR_EXP 55
21451: PUSH
21452: LD_INT 0
21454: ST_TO_ADDR
// sLevel := false ;
21455: LD_ADDR_EXP 59
21459: PUSH
21460: LD_INT 0
21462: ST_TO_ADDR
// sArmoury := false ;
21463: LD_ADDR_EXP 60
21467: PUSH
21468: LD_INT 0
21470: ST_TO_ADDR
// sRadar := false ;
21471: LD_ADDR_EXP 61
21475: PUSH
21476: LD_INT 0
21478: ST_TO_ADDR
// sBunker := false ;
21479: LD_ADDR_EXP 62
21483: PUSH
21484: LD_INT 0
21486: ST_TO_ADDR
// sHack := false ;
21487: LD_ADDR_EXP 63
21491: PUSH
21492: LD_INT 0
21494: ST_TO_ADDR
// sFire := false ;
21495: LD_ADDR_EXP 64
21499: PUSH
21500: LD_INT 0
21502: ST_TO_ADDR
// sRefresh := false ;
21503: LD_ADDR_EXP 65
21507: PUSH
21508: LD_INT 0
21510: ST_TO_ADDR
// sExp := false ;
21511: LD_ADDR_EXP 66
21515: PUSH
21516: LD_INT 0
21518: ST_TO_ADDR
// sDepot := false ;
21519: LD_ADDR_EXP 67
21523: PUSH
21524: LD_INT 0
21526: ST_TO_ADDR
// sFlag := false ;
21527: LD_ADDR_EXP 68
21531: PUSH
21532: LD_INT 0
21534: ST_TO_ADDR
// sKamikadze := false ;
21535: LD_ADDR_EXP 76
21539: PUSH
21540: LD_INT 0
21542: ST_TO_ADDR
// sTroll := false ;
21543: LD_ADDR_EXP 77
21547: PUSH
21548: LD_INT 0
21550: ST_TO_ADDR
// sSlow := false ;
21551: LD_ADDR_EXP 78
21555: PUSH
21556: LD_INT 0
21558: ST_TO_ADDR
// sLack := false ;
21559: LD_ADDR_EXP 79
21563: PUSH
21564: LD_INT 0
21566: ST_TO_ADDR
// sTank := false ;
21567: LD_ADDR_EXP 81
21571: PUSH
21572: LD_INT 0
21574: ST_TO_ADDR
// sRemote := false ;
21575: LD_ADDR_EXP 82
21579: PUSH
21580: LD_INT 0
21582: ST_TO_ADDR
// sPowell := false ;
21583: LD_ADDR_EXP 83
21587: PUSH
21588: LD_INT 0
21590: ST_TO_ADDR
// sTeleport := false ;
21591: LD_ADDR_EXP 86
21595: PUSH
21596: LD_INT 0
21598: ST_TO_ADDR
// sOilTower := false ;
21599: LD_ADDR_EXP 88
21603: PUSH
21604: LD_INT 0
21606: ST_TO_ADDR
// sShovel := false ;
21607: LD_ADDR_EXP 89
21611: PUSH
21612: LD_INT 0
21614: ST_TO_ADDR
// sSheik := false ;
21615: LD_ADDR_EXP 90
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
// sEarthquake := false ;
21623: LD_ADDR_EXP 92
21627: PUSH
21628: LD_INT 0
21630: ST_TO_ADDR
// sAI := false ;
21631: LD_ADDR_EXP 93
21635: PUSH
21636: LD_INT 0
21638: ST_TO_ADDR
// sCargo := false ;
21639: LD_ADDR_EXP 96
21643: PUSH
21644: LD_INT 0
21646: ST_TO_ADDR
// sDLaser := false ;
21647: LD_ADDR_EXP 97
21651: PUSH
21652: LD_INT 0
21654: ST_TO_ADDR
// sExchange := false ;
21655: LD_ADDR_EXP 98
21659: PUSH
21660: LD_INT 0
21662: ST_TO_ADDR
// sFac := false ;
21663: LD_ADDR_EXP 99
21667: PUSH
21668: LD_INT 0
21670: ST_TO_ADDR
// sPower := false ;
21671: LD_ADDR_EXP 100
21675: PUSH
21676: LD_INT 0
21678: ST_TO_ADDR
// sRandom := false ;
21679: LD_ADDR_EXP 101
21683: PUSH
21684: LD_INT 0
21686: ST_TO_ADDR
// sShield := false ;
21687: LD_ADDR_EXP 102
21691: PUSH
21692: LD_INT 0
21694: ST_TO_ADDR
// sTime := false ;
21695: LD_ADDR_EXP 103
21699: PUSH
21700: LD_INT 0
21702: ST_TO_ADDR
// sTools := false ;
21703: LD_ADDR_EXP 104
21707: PUSH
21708: LD_INT 0
21710: ST_TO_ADDR
// sSold := false ;
21711: LD_ADDR_EXP 69
21715: PUSH
21716: LD_INT 0
21718: ST_TO_ADDR
// sDiff := false ;
21719: LD_ADDR_EXP 70
21723: PUSH
21724: LD_INT 0
21726: ST_TO_ADDR
// sFog := false ;
21727: LD_ADDR_EXP 73
21731: PUSH
21732: LD_INT 0
21734: ST_TO_ADDR
// sReset := false ;
21735: LD_ADDR_EXP 74
21739: PUSH
21740: LD_INT 0
21742: ST_TO_ADDR
// sSun := false ;
21743: LD_ADDR_EXP 75
21747: PUSH
21748: LD_INT 0
21750: ST_TO_ADDR
// sTiger := false ;
21751: LD_ADDR_EXP 71
21755: PUSH
21756: LD_INT 0
21758: ST_TO_ADDR
// sBomb := false ;
21759: LD_ADDR_EXP 72
21763: PUSH
21764: LD_INT 0
21766: ST_TO_ADDR
// sWound := false ;
21767: LD_ADDR_EXP 80
21771: PUSH
21772: LD_INT 0
21774: ST_TO_ADDR
// sBetray := false ;
21775: LD_ADDR_EXP 84
21779: PUSH
21780: LD_INT 0
21782: ST_TO_ADDR
// sContamin := false ;
21783: LD_ADDR_EXP 85
21787: PUSH
21788: LD_INT 0
21790: ST_TO_ADDR
// sOil := false ;
21791: LD_ADDR_EXP 87
21795: PUSH
21796: LD_INT 0
21798: ST_TO_ADDR
// sStu := false ;
21799: LD_ADDR_EXP 91
21803: PUSH
21804: LD_INT 0
21806: ST_TO_ADDR
// sBazooka := false ;
21807: LD_ADDR_EXP 94
21811: PUSH
21812: LD_INT 0
21814: ST_TO_ADDR
// sMortar := false ;
21815: LD_ADDR_EXP 95
21819: PUSH
21820: LD_INT 0
21822: ST_TO_ADDR
// sRanger := false ;
21823: LD_ADDR_EXP 105
21827: PUSH
21828: LD_INT 0
21830: ST_TO_ADDR
// sComputer := false ;
21831: LD_ADDR_EXP 106
21835: PUSH
21836: LD_INT 0
21838: ST_TO_ADDR
// s30 := false ;
21839: LD_ADDR_EXP 107
21843: PUSH
21844: LD_INT 0
21846: ST_TO_ADDR
// s60 := false ;
21847: LD_ADDR_EXP 108
21851: PUSH
21852: LD_INT 0
21854: ST_TO_ADDR
// end ;
21855: LD_VAR 0 1
21859: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21860: LD_INT 0
21862: PPUSH
21863: PPUSH
21864: PPUSH
21865: PPUSH
21866: PPUSH
21867: PPUSH
21868: PPUSH
// result := [ ] ;
21869: LD_ADDR_VAR 0 2
21873: PUSH
21874: EMPTY
21875: ST_TO_ADDR
// if campaign_id = 1 then
21876: LD_OWVAR 69
21880: PUSH
21881: LD_INT 1
21883: EQUAL
21884: IFFALSE 25050
// begin case mission_number of 1 :
21886: LD_OWVAR 70
21890: PUSH
21891: LD_INT 1
21893: DOUBLE
21894: EQUAL
21895: IFTRUE 21899
21897: GO 21975
21899: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21900: LD_ADDR_VAR 0 2
21904: PUSH
21905: LD_INT 2
21907: PUSH
21908: LD_INT 4
21910: PUSH
21911: LD_INT 11
21913: PUSH
21914: LD_INT 12
21916: PUSH
21917: LD_INT 15
21919: PUSH
21920: LD_INT 16
21922: PUSH
21923: LD_INT 22
21925: PUSH
21926: LD_INT 23
21928: PUSH
21929: LD_INT 26
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 101
21945: PUSH
21946: LD_INT 102
21948: PUSH
21949: LD_INT 106
21951: PUSH
21952: LD_INT 116
21954: PUSH
21955: LD_INT 117
21957: PUSH
21958: LD_INT 118
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: ST_TO_ADDR
21973: GO 25048
21975: LD_INT 2
21977: DOUBLE
21978: EQUAL
21979: IFTRUE 21983
21981: GO 22067
21983: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21984: LD_ADDR_VAR 0 2
21988: PUSH
21989: LD_INT 2
21991: PUSH
21992: LD_INT 4
21994: PUSH
21995: LD_INT 11
21997: PUSH
21998: LD_INT 12
22000: PUSH
22001: LD_INT 15
22003: PUSH
22004: LD_INT 16
22006: PUSH
22007: LD_INT 22
22009: PUSH
22010: LD_INT 23
22012: PUSH
22013: LD_INT 26
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 101
22029: PUSH
22030: LD_INT 102
22032: PUSH
22033: LD_INT 105
22035: PUSH
22036: LD_INT 106
22038: PUSH
22039: LD_INT 108
22041: PUSH
22042: LD_INT 116
22044: PUSH
22045: LD_INT 117
22047: PUSH
22048: LD_INT 118
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: ST_TO_ADDR
22065: GO 25048
22067: LD_INT 3
22069: DOUBLE
22070: EQUAL
22071: IFTRUE 22075
22073: GO 22163
22075: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 4
22086: PUSH
22087: LD_INT 5
22089: PUSH
22090: LD_INT 11
22092: PUSH
22093: LD_INT 12
22095: PUSH
22096: LD_INT 15
22098: PUSH
22099: LD_INT 16
22101: PUSH
22102: LD_INT 22
22104: PUSH
22105: LD_INT 26
22107: PUSH
22108: LD_INT 36
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 101
22125: PUSH
22126: LD_INT 102
22128: PUSH
22129: LD_INT 105
22131: PUSH
22132: LD_INT 106
22134: PUSH
22135: LD_INT 108
22137: PUSH
22138: LD_INT 116
22140: PUSH
22141: LD_INT 117
22143: PUSH
22144: LD_INT 118
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: ST_TO_ADDR
22161: GO 25048
22163: LD_INT 4
22165: DOUBLE
22166: EQUAL
22167: IFTRUE 22171
22169: GO 22267
22171: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22172: LD_ADDR_VAR 0 2
22176: PUSH
22177: LD_INT 2
22179: PUSH
22180: LD_INT 4
22182: PUSH
22183: LD_INT 5
22185: PUSH
22186: LD_INT 8
22188: PUSH
22189: LD_INT 11
22191: PUSH
22192: LD_INT 12
22194: PUSH
22195: LD_INT 15
22197: PUSH
22198: LD_INT 16
22200: PUSH
22201: LD_INT 22
22203: PUSH
22204: LD_INT 23
22206: PUSH
22207: LD_INT 26
22209: PUSH
22210: LD_INT 36
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 101
22229: PUSH
22230: LD_INT 102
22232: PUSH
22233: LD_INT 105
22235: PUSH
22236: LD_INT 106
22238: PUSH
22239: LD_INT 108
22241: PUSH
22242: LD_INT 116
22244: PUSH
22245: LD_INT 117
22247: PUSH
22248: LD_INT 118
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: ST_TO_ADDR
22265: GO 25048
22267: LD_INT 5
22269: DOUBLE
22270: EQUAL
22271: IFTRUE 22275
22273: GO 22387
22275: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22276: LD_ADDR_VAR 0 2
22280: PUSH
22281: LD_INT 2
22283: PUSH
22284: LD_INT 4
22286: PUSH
22287: LD_INT 5
22289: PUSH
22290: LD_INT 6
22292: PUSH
22293: LD_INT 8
22295: PUSH
22296: LD_INT 11
22298: PUSH
22299: LD_INT 12
22301: PUSH
22302: LD_INT 15
22304: PUSH
22305: LD_INT 16
22307: PUSH
22308: LD_INT 22
22310: PUSH
22311: LD_INT 23
22313: PUSH
22314: LD_INT 25
22316: PUSH
22317: LD_INT 26
22319: PUSH
22320: LD_INT 36
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 101
22341: PUSH
22342: LD_INT 102
22344: PUSH
22345: LD_INT 105
22347: PUSH
22348: LD_INT 106
22350: PUSH
22351: LD_INT 108
22353: PUSH
22354: LD_INT 109
22356: PUSH
22357: LD_INT 112
22359: PUSH
22360: LD_INT 116
22362: PUSH
22363: LD_INT 117
22365: PUSH
22366: LD_INT 118
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: ST_TO_ADDR
22385: GO 25048
22387: LD_INT 6
22389: DOUBLE
22390: EQUAL
22391: IFTRUE 22395
22393: GO 22527
22395: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22396: LD_ADDR_VAR 0 2
22400: PUSH
22401: LD_INT 2
22403: PUSH
22404: LD_INT 4
22406: PUSH
22407: LD_INT 5
22409: PUSH
22410: LD_INT 6
22412: PUSH
22413: LD_INT 8
22415: PUSH
22416: LD_INT 11
22418: PUSH
22419: LD_INT 12
22421: PUSH
22422: LD_INT 15
22424: PUSH
22425: LD_INT 16
22427: PUSH
22428: LD_INT 20
22430: PUSH
22431: LD_INT 21
22433: PUSH
22434: LD_INT 22
22436: PUSH
22437: LD_INT 23
22439: PUSH
22440: LD_INT 25
22442: PUSH
22443: LD_INT 26
22445: PUSH
22446: LD_INT 30
22448: PUSH
22449: LD_INT 31
22451: PUSH
22452: LD_INT 32
22454: PUSH
22455: LD_INT 36
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 101
22481: PUSH
22482: LD_INT 102
22484: PUSH
22485: LD_INT 105
22487: PUSH
22488: LD_INT 106
22490: PUSH
22491: LD_INT 108
22493: PUSH
22494: LD_INT 109
22496: PUSH
22497: LD_INT 112
22499: PUSH
22500: LD_INT 116
22502: PUSH
22503: LD_INT 117
22505: PUSH
22506: LD_INT 118
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: ST_TO_ADDR
22525: GO 25048
22527: LD_INT 7
22529: DOUBLE
22530: EQUAL
22531: IFTRUE 22535
22533: GO 22647
22535: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22536: LD_ADDR_VAR 0 2
22540: PUSH
22541: LD_INT 2
22543: PUSH
22544: LD_INT 4
22546: PUSH
22547: LD_INT 5
22549: PUSH
22550: LD_INT 7
22552: PUSH
22553: LD_INT 11
22555: PUSH
22556: LD_INT 12
22558: PUSH
22559: LD_INT 15
22561: PUSH
22562: LD_INT 16
22564: PUSH
22565: LD_INT 20
22567: PUSH
22568: LD_INT 21
22570: PUSH
22571: LD_INT 22
22573: PUSH
22574: LD_INT 23
22576: PUSH
22577: LD_INT 25
22579: PUSH
22580: LD_INT 26
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 101
22601: PUSH
22602: LD_INT 102
22604: PUSH
22605: LD_INT 103
22607: PUSH
22608: LD_INT 105
22610: PUSH
22611: LD_INT 106
22613: PUSH
22614: LD_INT 108
22616: PUSH
22617: LD_INT 112
22619: PUSH
22620: LD_INT 116
22622: PUSH
22623: LD_INT 117
22625: PUSH
22626: LD_INT 118
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: ST_TO_ADDR
22645: GO 25048
22647: LD_INT 8
22649: DOUBLE
22650: EQUAL
22651: IFTRUE 22655
22653: GO 22795
22655: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22656: LD_ADDR_VAR 0 2
22660: PUSH
22661: LD_INT 2
22663: PUSH
22664: LD_INT 4
22666: PUSH
22667: LD_INT 5
22669: PUSH
22670: LD_INT 6
22672: PUSH
22673: LD_INT 7
22675: PUSH
22676: LD_INT 8
22678: PUSH
22679: LD_INT 11
22681: PUSH
22682: LD_INT 12
22684: PUSH
22685: LD_INT 15
22687: PUSH
22688: LD_INT 16
22690: PUSH
22691: LD_INT 20
22693: PUSH
22694: LD_INT 21
22696: PUSH
22697: LD_INT 22
22699: PUSH
22700: LD_INT 23
22702: PUSH
22703: LD_INT 25
22705: PUSH
22706: LD_INT 26
22708: PUSH
22709: LD_INT 30
22711: PUSH
22712: LD_INT 31
22714: PUSH
22715: LD_INT 32
22717: PUSH
22718: LD_INT 36
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 101
22745: PUSH
22746: LD_INT 102
22748: PUSH
22749: LD_INT 103
22751: PUSH
22752: LD_INT 105
22754: PUSH
22755: LD_INT 106
22757: PUSH
22758: LD_INT 108
22760: PUSH
22761: LD_INT 109
22763: PUSH
22764: LD_INT 112
22766: PUSH
22767: LD_INT 116
22769: PUSH
22770: LD_INT 117
22772: PUSH
22773: LD_INT 118
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: ST_TO_ADDR
22793: GO 25048
22795: LD_INT 9
22797: DOUBLE
22798: EQUAL
22799: IFTRUE 22803
22801: GO 22951
22803: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22804: LD_ADDR_VAR 0 2
22808: PUSH
22809: LD_INT 2
22811: PUSH
22812: LD_INT 4
22814: PUSH
22815: LD_INT 5
22817: PUSH
22818: LD_INT 6
22820: PUSH
22821: LD_INT 7
22823: PUSH
22824: LD_INT 8
22826: PUSH
22827: LD_INT 11
22829: PUSH
22830: LD_INT 12
22832: PUSH
22833: LD_INT 15
22835: PUSH
22836: LD_INT 16
22838: PUSH
22839: LD_INT 20
22841: PUSH
22842: LD_INT 21
22844: PUSH
22845: LD_INT 22
22847: PUSH
22848: LD_INT 23
22850: PUSH
22851: LD_INT 25
22853: PUSH
22854: LD_INT 26
22856: PUSH
22857: LD_INT 28
22859: PUSH
22860: LD_INT 30
22862: PUSH
22863: LD_INT 31
22865: PUSH
22866: LD_INT 32
22868: PUSH
22869: LD_INT 36
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 101
22897: PUSH
22898: LD_INT 102
22900: PUSH
22901: LD_INT 103
22903: PUSH
22904: LD_INT 105
22906: PUSH
22907: LD_INT 106
22909: PUSH
22910: LD_INT 108
22912: PUSH
22913: LD_INT 109
22915: PUSH
22916: LD_INT 112
22918: PUSH
22919: LD_INT 114
22921: PUSH
22922: LD_INT 116
22924: PUSH
22925: LD_INT 117
22927: PUSH
22928: LD_INT 118
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: ST_TO_ADDR
22949: GO 25048
22951: LD_INT 10
22953: DOUBLE
22954: EQUAL
22955: IFTRUE 22959
22957: GO 23155
22959: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22960: LD_ADDR_VAR 0 2
22964: PUSH
22965: LD_INT 2
22967: PUSH
22968: LD_INT 4
22970: PUSH
22971: LD_INT 5
22973: PUSH
22974: LD_INT 6
22976: PUSH
22977: LD_INT 7
22979: PUSH
22980: LD_INT 8
22982: PUSH
22983: LD_INT 9
22985: PUSH
22986: LD_INT 10
22988: PUSH
22989: LD_INT 11
22991: PUSH
22992: LD_INT 12
22994: PUSH
22995: LD_INT 13
22997: PUSH
22998: LD_INT 14
23000: PUSH
23001: LD_INT 15
23003: PUSH
23004: LD_INT 16
23006: PUSH
23007: LD_INT 17
23009: PUSH
23010: LD_INT 18
23012: PUSH
23013: LD_INT 19
23015: PUSH
23016: LD_INT 20
23018: PUSH
23019: LD_INT 21
23021: PUSH
23022: LD_INT 22
23024: PUSH
23025: LD_INT 23
23027: PUSH
23028: LD_INT 24
23030: PUSH
23031: LD_INT 25
23033: PUSH
23034: LD_INT 26
23036: PUSH
23037: LD_INT 28
23039: PUSH
23040: LD_INT 30
23042: PUSH
23043: LD_INT 31
23045: PUSH
23046: LD_INT 32
23048: PUSH
23049: LD_INT 36
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 101
23085: PUSH
23086: LD_INT 102
23088: PUSH
23089: LD_INT 103
23091: PUSH
23092: LD_INT 104
23094: PUSH
23095: LD_INT 105
23097: PUSH
23098: LD_INT 106
23100: PUSH
23101: LD_INT 107
23103: PUSH
23104: LD_INT 108
23106: PUSH
23107: LD_INT 109
23109: PUSH
23110: LD_INT 110
23112: PUSH
23113: LD_INT 111
23115: PUSH
23116: LD_INT 112
23118: PUSH
23119: LD_INT 114
23121: PUSH
23122: LD_INT 116
23124: PUSH
23125: LD_INT 117
23127: PUSH
23128: LD_INT 118
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: ST_TO_ADDR
23153: GO 25048
23155: LD_INT 11
23157: DOUBLE
23158: EQUAL
23159: IFTRUE 23163
23161: GO 23367
23163: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23164: LD_ADDR_VAR 0 2
23168: PUSH
23169: LD_INT 2
23171: PUSH
23172: LD_INT 3
23174: PUSH
23175: LD_INT 4
23177: PUSH
23178: LD_INT 5
23180: PUSH
23181: LD_INT 6
23183: PUSH
23184: LD_INT 7
23186: PUSH
23187: LD_INT 8
23189: PUSH
23190: LD_INT 9
23192: PUSH
23193: LD_INT 10
23195: PUSH
23196: LD_INT 11
23198: PUSH
23199: LD_INT 12
23201: PUSH
23202: LD_INT 13
23204: PUSH
23205: LD_INT 14
23207: PUSH
23208: LD_INT 15
23210: PUSH
23211: LD_INT 16
23213: PUSH
23214: LD_INT 17
23216: PUSH
23217: LD_INT 18
23219: PUSH
23220: LD_INT 19
23222: PUSH
23223: LD_INT 20
23225: PUSH
23226: LD_INT 21
23228: PUSH
23229: LD_INT 22
23231: PUSH
23232: LD_INT 23
23234: PUSH
23235: LD_INT 24
23237: PUSH
23238: LD_INT 25
23240: PUSH
23241: LD_INT 26
23243: PUSH
23244: LD_INT 28
23246: PUSH
23247: LD_INT 30
23249: PUSH
23250: LD_INT 31
23252: PUSH
23253: LD_INT 32
23255: PUSH
23256: LD_INT 34
23258: PUSH
23259: LD_INT 36
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 101
23297: PUSH
23298: LD_INT 102
23300: PUSH
23301: LD_INT 103
23303: PUSH
23304: LD_INT 104
23306: PUSH
23307: LD_INT 105
23309: PUSH
23310: LD_INT 106
23312: PUSH
23313: LD_INT 107
23315: PUSH
23316: LD_INT 108
23318: PUSH
23319: LD_INT 109
23321: PUSH
23322: LD_INT 110
23324: PUSH
23325: LD_INT 111
23327: PUSH
23328: LD_INT 112
23330: PUSH
23331: LD_INT 114
23333: PUSH
23334: LD_INT 116
23336: PUSH
23337: LD_INT 117
23339: PUSH
23340: LD_INT 118
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: ST_TO_ADDR
23365: GO 25048
23367: LD_INT 12
23369: DOUBLE
23370: EQUAL
23371: IFTRUE 23375
23373: GO 23595
23375: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23376: LD_ADDR_VAR 0 2
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: LD_INT 2
23386: PUSH
23387: LD_INT 3
23389: PUSH
23390: LD_INT 4
23392: PUSH
23393: LD_INT 5
23395: PUSH
23396: LD_INT 6
23398: PUSH
23399: LD_INT 7
23401: PUSH
23402: LD_INT 8
23404: PUSH
23405: LD_INT 9
23407: PUSH
23408: LD_INT 10
23410: PUSH
23411: LD_INT 11
23413: PUSH
23414: LD_INT 12
23416: PUSH
23417: LD_INT 13
23419: PUSH
23420: LD_INT 14
23422: PUSH
23423: LD_INT 15
23425: PUSH
23426: LD_INT 16
23428: PUSH
23429: LD_INT 17
23431: PUSH
23432: LD_INT 18
23434: PUSH
23435: LD_INT 19
23437: PUSH
23438: LD_INT 20
23440: PUSH
23441: LD_INT 21
23443: PUSH
23444: LD_INT 22
23446: PUSH
23447: LD_INT 23
23449: PUSH
23450: LD_INT 24
23452: PUSH
23453: LD_INT 25
23455: PUSH
23456: LD_INT 26
23458: PUSH
23459: LD_INT 27
23461: PUSH
23462: LD_INT 28
23464: PUSH
23465: LD_INT 30
23467: PUSH
23468: LD_INT 31
23470: PUSH
23471: LD_INT 32
23473: PUSH
23474: LD_INT 33
23476: PUSH
23477: LD_INT 34
23479: PUSH
23480: LD_INT 36
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 101
23521: PUSH
23522: LD_INT 102
23524: PUSH
23525: LD_INT 103
23527: PUSH
23528: LD_INT 104
23530: PUSH
23531: LD_INT 105
23533: PUSH
23534: LD_INT 106
23536: PUSH
23537: LD_INT 107
23539: PUSH
23540: LD_INT 108
23542: PUSH
23543: LD_INT 109
23545: PUSH
23546: LD_INT 110
23548: PUSH
23549: LD_INT 111
23551: PUSH
23552: LD_INT 112
23554: PUSH
23555: LD_INT 113
23557: PUSH
23558: LD_INT 114
23560: PUSH
23561: LD_INT 116
23563: PUSH
23564: LD_INT 117
23566: PUSH
23567: LD_INT 118
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: ST_TO_ADDR
23593: GO 25048
23595: LD_INT 13
23597: DOUBLE
23598: EQUAL
23599: IFTRUE 23603
23601: GO 23811
23603: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23604: LD_ADDR_VAR 0 2
23608: PUSH
23609: LD_INT 1
23611: PUSH
23612: LD_INT 2
23614: PUSH
23615: LD_INT 3
23617: PUSH
23618: LD_INT 4
23620: PUSH
23621: LD_INT 5
23623: PUSH
23624: LD_INT 8
23626: PUSH
23627: LD_INT 9
23629: PUSH
23630: LD_INT 10
23632: PUSH
23633: LD_INT 11
23635: PUSH
23636: LD_INT 12
23638: PUSH
23639: LD_INT 14
23641: PUSH
23642: LD_INT 15
23644: PUSH
23645: LD_INT 16
23647: PUSH
23648: LD_INT 17
23650: PUSH
23651: LD_INT 18
23653: PUSH
23654: LD_INT 19
23656: PUSH
23657: LD_INT 20
23659: PUSH
23660: LD_INT 21
23662: PUSH
23663: LD_INT 22
23665: PUSH
23666: LD_INT 23
23668: PUSH
23669: LD_INT 24
23671: PUSH
23672: LD_INT 25
23674: PUSH
23675: LD_INT 26
23677: PUSH
23678: LD_INT 27
23680: PUSH
23681: LD_INT 28
23683: PUSH
23684: LD_INT 30
23686: PUSH
23687: LD_INT 31
23689: PUSH
23690: LD_INT 32
23692: PUSH
23693: LD_INT 33
23695: PUSH
23696: LD_INT 34
23698: PUSH
23699: LD_INT 36
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 101
23737: PUSH
23738: LD_INT 102
23740: PUSH
23741: LD_INT 103
23743: PUSH
23744: LD_INT 104
23746: PUSH
23747: LD_INT 105
23749: PUSH
23750: LD_INT 106
23752: PUSH
23753: LD_INT 107
23755: PUSH
23756: LD_INT 108
23758: PUSH
23759: LD_INT 109
23761: PUSH
23762: LD_INT 110
23764: PUSH
23765: LD_INT 111
23767: PUSH
23768: LD_INT 112
23770: PUSH
23771: LD_INT 113
23773: PUSH
23774: LD_INT 114
23776: PUSH
23777: LD_INT 116
23779: PUSH
23780: LD_INT 117
23782: PUSH
23783: LD_INT 118
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: ST_TO_ADDR
23809: GO 25048
23811: LD_INT 14
23813: DOUBLE
23814: EQUAL
23815: IFTRUE 23819
23817: GO 24043
23819: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23820: LD_ADDR_VAR 0 2
23824: PUSH
23825: LD_INT 1
23827: PUSH
23828: LD_INT 2
23830: PUSH
23831: LD_INT 3
23833: PUSH
23834: LD_INT 4
23836: PUSH
23837: LD_INT 5
23839: PUSH
23840: LD_INT 6
23842: PUSH
23843: LD_INT 7
23845: PUSH
23846: LD_INT 8
23848: PUSH
23849: LD_INT 9
23851: PUSH
23852: LD_INT 10
23854: PUSH
23855: LD_INT 11
23857: PUSH
23858: LD_INT 12
23860: PUSH
23861: LD_INT 13
23863: PUSH
23864: LD_INT 14
23866: PUSH
23867: LD_INT 15
23869: PUSH
23870: LD_INT 16
23872: PUSH
23873: LD_INT 17
23875: PUSH
23876: LD_INT 18
23878: PUSH
23879: LD_INT 19
23881: PUSH
23882: LD_INT 20
23884: PUSH
23885: LD_INT 21
23887: PUSH
23888: LD_INT 22
23890: PUSH
23891: LD_INT 23
23893: PUSH
23894: LD_INT 24
23896: PUSH
23897: LD_INT 25
23899: PUSH
23900: LD_INT 26
23902: PUSH
23903: LD_INT 27
23905: PUSH
23906: LD_INT 28
23908: PUSH
23909: LD_INT 29
23911: PUSH
23912: LD_INT 30
23914: PUSH
23915: LD_INT 31
23917: PUSH
23918: LD_INT 32
23920: PUSH
23921: LD_INT 33
23923: PUSH
23924: LD_INT 34
23926: PUSH
23927: LD_INT 36
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 101
23969: PUSH
23970: LD_INT 102
23972: PUSH
23973: LD_INT 103
23975: PUSH
23976: LD_INT 104
23978: PUSH
23979: LD_INT 105
23981: PUSH
23982: LD_INT 106
23984: PUSH
23985: LD_INT 107
23987: PUSH
23988: LD_INT 108
23990: PUSH
23991: LD_INT 109
23993: PUSH
23994: LD_INT 110
23996: PUSH
23997: LD_INT 111
23999: PUSH
24000: LD_INT 112
24002: PUSH
24003: LD_INT 113
24005: PUSH
24006: LD_INT 114
24008: PUSH
24009: LD_INT 116
24011: PUSH
24012: LD_INT 117
24014: PUSH
24015: LD_INT 118
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: ST_TO_ADDR
24041: GO 25048
24043: LD_INT 15
24045: DOUBLE
24046: EQUAL
24047: IFTRUE 24051
24049: GO 24275
24051: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24052: LD_ADDR_VAR 0 2
24056: PUSH
24057: LD_INT 1
24059: PUSH
24060: LD_INT 2
24062: PUSH
24063: LD_INT 3
24065: PUSH
24066: LD_INT 4
24068: PUSH
24069: LD_INT 5
24071: PUSH
24072: LD_INT 6
24074: PUSH
24075: LD_INT 7
24077: PUSH
24078: LD_INT 8
24080: PUSH
24081: LD_INT 9
24083: PUSH
24084: LD_INT 10
24086: PUSH
24087: LD_INT 11
24089: PUSH
24090: LD_INT 12
24092: PUSH
24093: LD_INT 13
24095: PUSH
24096: LD_INT 14
24098: PUSH
24099: LD_INT 15
24101: PUSH
24102: LD_INT 16
24104: PUSH
24105: LD_INT 17
24107: PUSH
24108: LD_INT 18
24110: PUSH
24111: LD_INT 19
24113: PUSH
24114: LD_INT 20
24116: PUSH
24117: LD_INT 21
24119: PUSH
24120: LD_INT 22
24122: PUSH
24123: LD_INT 23
24125: PUSH
24126: LD_INT 24
24128: PUSH
24129: LD_INT 25
24131: PUSH
24132: LD_INT 26
24134: PUSH
24135: LD_INT 27
24137: PUSH
24138: LD_INT 28
24140: PUSH
24141: LD_INT 29
24143: PUSH
24144: LD_INT 30
24146: PUSH
24147: LD_INT 31
24149: PUSH
24150: LD_INT 32
24152: PUSH
24153: LD_INT 33
24155: PUSH
24156: LD_INT 34
24158: PUSH
24159: LD_INT 36
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 101
24201: PUSH
24202: LD_INT 102
24204: PUSH
24205: LD_INT 103
24207: PUSH
24208: LD_INT 104
24210: PUSH
24211: LD_INT 105
24213: PUSH
24214: LD_INT 106
24216: PUSH
24217: LD_INT 107
24219: PUSH
24220: LD_INT 108
24222: PUSH
24223: LD_INT 109
24225: PUSH
24226: LD_INT 110
24228: PUSH
24229: LD_INT 111
24231: PUSH
24232: LD_INT 112
24234: PUSH
24235: LD_INT 113
24237: PUSH
24238: LD_INT 114
24240: PUSH
24241: LD_INT 116
24243: PUSH
24244: LD_INT 117
24246: PUSH
24247: LD_INT 118
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: ST_TO_ADDR
24273: GO 25048
24275: LD_INT 16
24277: DOUBLE
24278: EQUAL
24279: IFTRUE 24283
24281: GO 24419
24283: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24284: LD_ADDR_VAR 0 2
24288: PUSH
24289: LD_INT 2
24291: PUSH
24292: LD_INT 4
24294: PUSH
24295: LD_INT 5
24297: PUSH
24298: LD_INT 7
24300: PUSH
24301: LD_INT 11
24303: PUSH
24304: LD_INT 12
24306: PUSH
24307: LD_INT 15
24309: PUSH
24310: LD_INT 16
24312: PUSH
24313: LD_INT 20
24315: PUSH
24316: LD_INT 21
24318: PUSH
24319: LD_INT 22
24321: PUSH
24322: LD_INT 23
24324: PUSH
24325: LD_INT 25
24327: PUSH
24328: LD_INT 26
24330: PUSH
24331: LD_INT 30
24333: PUSH
24334: LD_INT 31
24336: PUSH
24337: LD_INT 32
24339: PUSH
24340: LD_INT 33
24342: PUSH
24343: LD_INT 34
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 101
24369: PUSH
24370: LD_INT 102
24372: PUSH
24373: LD_INT 103
24375: PUSH
24376: LD_INT 106
24378: PUSH
24379: LD_INT 108
24381: PUSH
24382: LD_INT 112
24384: PUSH
24385: LD_INT 113
24387: PUSH
24388: LD_INT 114
24390: PUSH
24391: LD_INT 116
24393: PUSH
24394: LD_INT 117
24396: PUSH
24397: LD_INT 118
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: ST_TO_ADDR
24417: GO 25048
24419: LD_INT 17
24421: DOUBLE
24422: EQUAL
24423: IFTRUE 24427
24425: GO 24651
24427: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24428: LD_ADDR_VAR 0 2
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: LD_INT 3
24441: PUSH
24442: LD_INT 4
24444: PUSH
24445: LD_INT 5
24447: PUSH
24448: LD_INT 6
24450: PUSH
24451: LD_INT 7
24453: PUSH
24454: LD_INT 8
24456: PUSH
24457: LD_INT 9
24459: PUSH
24460: LD_INT 10
24462: PUSH
24463: LD_INT 11
24465: PUSH
24466: LD_INT 12
24468: PUSH
24469: LD_INT 13
24471: PUSH
24472: LD_INT 14
24474: PUSH
24475: LD_INT 15
24477: PUSH
24478: LD_INT 16
24480: PUSH
24481: LD_INT 17
24483: PUSH
24484: LD_INT 18
24486: PUSH
24487: LD_INT 19
24489: PUSH
24490: LD_INT 20
24492: PUSH
24493: LD_INT 21
24495: PUSH
24496: LD_INT 22
24498: PUSH
24499: LD_INT 23
24501: PUSH
24502: LD_INT 24
24504: PUSH
24505: LD_INT 25
24507: PUSH
24508: LD_INT 26
24510: PUSH
24511: LD_INT 27
24513: PUSH
24514: LD_INT 28
24516: PUSH
24517: LD_INT 29
24519: PUSH
24520: LD_INT 30
24522: PUSH
24523: LD_INT 31
24525: PUSH
24526: LD_INT 32
24528: PUSH
24529: LD_INT 33
24531: PUSH
24532: LD_INT 34
24534: PUSH
24535: LD_INT 36
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 101
24577: PUSH
24578: LD_INT 102
24580: PUSH
24581: LD_INT 103
24583: PUSH
24584: LD_INT 104
24586: PUSH
24587: LD_INT 105
24589: PUSH
24590: LD_INT 106
24592: PUSH
24593: LD_INT 107
24595: PUSH
24596: LD_INT 108
24598: PUSH
24599: LD_INT 109
24601: PUSH
24602: LD_INT 110
24604: PUSH
24605: LD_INT 111
24607: PUSH
24608: LD_INT 112
24610: PUSH
24611: LD_INT 113
24613: PUSH
24614: LD_INT 114
24616: PUSH
24617: LD_INT 116
24619: PUSH
24620: LD_INT 117
24622: PUSH
24623: LD_INT 118
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: ST_TO_ADDR
24649: GO 25048
24651: LD_INT 18
24653: DOUBLE
24654: EQUAL
24655: IFTRUE 24659
24657: GO 24807
24659: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24660: LD_ADDR_VAR 0 2
24664: PUSH
24665: LD_INT 2
24667: PUSH
24668: LD_INT 4
24670: PUSH
24671: LD_INT 5
24673: PUSH
24674: LD_INT 7
24676: PUSH
24677: LD_INT 11
24679: PUSH
24680: LD_INT 12
24682: PUSH
24683: LD_INT 15
24685: PUSH
24686: LD_INT 16
24688: PUSH
24689: LD_INT 20
24691: PUSH
24692: LD_INT 21
24694: PUSH
24695: LD_INT 22
24697: PUSH
24698: LD_INT 23
24700: PUSH
24701: LD_INT 25
24703: PUSH
24704: LD_INT 26
24706: PUSH
24707: LD_INT 30
24709: PUSH
24710: LD_INT 31
24712: PUSH
24713: LD_INT 32
24715: PUSH
24716: LD_INT 33
24718: PUSH
24719: LD_INT 34
24721: PUSH
24722: LD_INT 35
24724: PUSH
24725: LD_INT 36
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 101
24753: PUSH
24754: LD_INT 102
24756: PUSH
24757: LD_INT 103
24759: PUSH
24760: LD_INT 106
24762: PUSH
24763: LD_INT 108
24765: PUSH
24766: LD_INT 112
24768: PUSH
24769: LD_INT 113
24771: PUSH
24772: LD_INT 114
24774: PUSH
24775: LD_INT 115
24777: PUSH
24778: LD_INT 116
24780: PUSH
24781: LD_INT 117
24783: PUSH
24784: LD_INT 118
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: ST_TO_ADDR
24805: GO 25048
24807: LD_INT 19
24809: DOUBLE
24810: EQUAL
24811: IFTRUE 24815
24813: GO 25047
24815: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24816: LD_ADDR_VAR 0 2
24820: PUSH
24821: LD_INT 1
24823: PUSH
24824: LD_INT 2
24826: PUSH
24827: LD_INT 3
24829: PUSH
24830: LD_INT 4
24832: PUSH
24833: LD_INT 5
24835: PUSH
24836: LD_INT 6
24838: PUSH
24839: LD_INT 7
24841: PUSH
24842: LD_INT 8
24844: PUSH
24845: LD_INT 9
24847: PUSH
24848: LD_INT 10
24850: PUSH
24851: LD_INT 11
24853: PUSH
24854: LD_INT 12
24856: PUSH
24857: LD_INT 13
24859: PUSH
24860: LD_INT 14
24862: PUSH
24863: LD_INT 15
24865: PUSH
24866: LD_INT 16
24868: PUSH
24869: LD_INT 17
24871: PUSH
24872: LD_INT 18
24874: PUSH
24875: LD_INT 19
24877: PUSH
24878: LD_INT 20
24880: PUSH
24881: LD_INT 21
24883: PUSH
24884: LD_INT 22
24886: PUSH
24887: LD_INT 23
24889: PUSH
24890: LD_INT 24
24892: PUSH
24893: LD_INT 25
24895: PUSH
24896: LD_INT 26
24898: PUSH
24899: LD_INT 27
24901: PUSH
24902: LD_INT 28
24904: PUSH
24905: LD_INT 29
24907: PUSH
24908: LD_INT 30
24910: PUSH
24911: LD_INT 31
24913: PUSH
24914: LD_INT 32
24916: PUSH
24917: LD_INT 33
24919: PUSH
24920: LD_INT 34
24922: PUSH
24923: LD_INT 35
24925: PUSH
24926: LD_INT 36
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 101
24969: PUSH
24970: LD_INT 102
24972: PUSH
24973: LD_INT 103
24975: PUSH
24976: LD_INT 104
24978: PUSH
24979: LD_INT 105
24981: PUSH
24982: LD_INT 106
24984: PUSH
24985: LD_INT 107
24987: PUSH
24988: LD_INT 108
24990: PUSH
24991: LD_INT 109
24993: PUSH
24994: LD_INT 110
24996: PUSH
24997: LD_INT 111
24999: PUSH
25000: LD_INT 112
25002: PUSH
25003: LD_INT 113
25005: PUSH
25006: LD_INT 114
25008: PUSH
25009: LD_INT 115
25011: PUSH
25012: LD_INT 116
25014: PUSH
25015: LD_INT 117
25017: PUSH
25018: LD_INT 118
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: ST_TO_ADDR
25045: GO 25048
25047: POP
// end else
25048: GO 25279
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25050: LD_ADDR_VAR 0 2
25054: PUSH
25055: LD_INT 1
25057: PUSH
25058: LD_INT 2
25060: PUSH
25061: LD_INT 3
25063: PUSH
25064: LD_INT 4
25066: PUSH
25067: LD_INT 5
25069: PUSH
25070: LD_INT 6
25072: PUSH
25073: LD_INT 7
25075: PUSH
25076: LD_INT 8
25078: PUSH
25079: LD_INT 9
25081: PUSH
25082: LD_INT 10
25084: PUSH
25085: LD_INT 11
25087: PUSH
25088: LD_INT 12
25090: PUSH
25091: LD_INT 13
25093: PUSH
25094: LD_INT 14
25096: PUSH
25097: LD_INT 15
25099: PUSH
25100: LD_INT 16
25102: PUSH
25103: LD_INT 17
25105: PUSH
25106: LD_INT 18
25108: PUSH
25109: LD_INT 19
25111: PUSH
25112: LD_INT 20
25114: PUSH
25115: LD_INT 21
25117: PUSH
25118: LD_INT 22
25120: PUSH
25121: LD_INT 23
25123: PUSH
25124: LD_INT 24
25126: PUSH
25127: LD_INT 25
25129: PUSH
25130: LD_INT 26
25132: PUSH
25133: LD_INT 27
25135: PUSH
25136: LD_INT 28
25138: PUSH
25139: LD_INT 29
25141: PUSH
25142: LD_INT 30
25144: PUSH
25145: LD_INT 31
25147: PUSH
25148: LD_INT 32
25150: PUSH
25151: LD_INT 33
25153: PUSH
25154: LD_INT 34
25156: PUSH
25157: LD_INT 35
25159: PUSH
25160: LD_INT 36
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 101
25203: PUSH
25204: LD_INT 102
25206: PUSH
25207: LD_INT 103
25209: PUSH
25210: LD_INT 104
25212: PUSH
25213: LD_INT 105
25215: PUSH
25216: LD_INT 106
25218: PUSH
25219: LD_INT 107
25221: PUSH
25222: LD_INT 108
25224: PUSH
25225: LD_INT 109
25227: PUSH
25228: LD_INT 110
25230: PUSH
25231: LD_INT 111
25233: PUSH
25234: LD_INT 112
25236: PUSH
25237: LD_INT 113
25239: PUSH
25240: LD_INT 114
25242: PUSH
25243: LD_INT 115
25245: PUSH
25246: LD_INT 116
25248: PUSH
25249: LD_INT 117
25251: PUSH
25252: LD_INT 118
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: ST_TO_ADDR
// if result then
25279: LD_VAR 0 2
25283: IFFALSE 26069
// begin normal :=  ;
25285: LD_ADDR_VAR 0 5
25289: PUSH
25290: LD_STRING 
25292: ST_TO_ADDR
// hardcore :=  ;
25293: LD_ADDR_VAR 0 6
25297: PUSH
25298: LD_STRING 
25300: ST_TO_ADDR
// active :=  ;
25301: LD_ADDR_VAR 0 7
25305: PUSH
25306: LD_STRING 
25308: ST_TO_ADDR
// for i = 1 to normalCounter do
25309: LD_ADDR_VAR 0 8
25313: PUSH
25314: DOUBLE
25315: LD_INT 1
25317: DEC
25318: ST_TO_ADDR
25319: LD_EXP 53
25323: PUSH
25324: FOR_TO
25325: IFFALSE 25426
// begin tmp := 0 ;
25327: LD_ADDR_VAR 0 3
25331: PUSH
25332: LD_STRING 0
25334: ST_TO_ADDR
// if result [ 1 ] then
25335: LD_VAR 0 2
25339: PUSH
25340: LD_INT 1
25342: ARRAY
25343: IFFALSE 25408
// if result [ 1 ] [ 1 ] = i then
25345: LD_VAR 0 2
25349: PUSH
25350: LD_INT 1
25352: ARRAY
25353: PUSH
25354: LD_INT 1
25356: ARRAY
25357: PUSH
25358: LD_VAR 0 8
25362: EQUAL
25363: IFFALSE 25408
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25365: LD_ADDR_VAR 0 2
25369: PUSH
25370: LD_VAR 0 2
25374: PPUSH
25375: LD_INT 1
25377: PPUSH
25378: LD_VAR 0 2
25382: PUSH
25383: LD_INT 1
25385: ARRAY
25386: PPUSH
25387: LD_INT 1
25389: PPUSH
25390: CALL_OW 3
25394: PPUSH
25395: CALL_OW 1
25399: ST_TO_ADDR
// tmp := 1 ;
25400: LD_ADDR_VAR 0 3
25404: PUSH
25405: LD_STRING 1
25407: ST_TO_ADDR
// end ; normal := normal & tmp ;
25408: LD_ADDR_VAR 0 5
25412: PUSH
25413: LD_VAR 0 5
25417: PUSH
25418: LD_VAR 0 3
25422: STR
25423: ST_TO_ADDR
// end ;
25424: GO 25324
25426: POP
25427: POP
// for i = 1 to hardcoreCounter do
25428: LD_ADDR_VAR 0 8
25432: PUSH
25433: DOUBLE
25434: LD_INT 1
25436: DEC
25437: ST_TO_ADDR
25438: LD_EXP 54
25442: PUSH
25443: FOR_TO
25444: IFFALSE 25549
// begin tmp := 0 ;
25446: LD_ADDR_VAR 0 3
25450: PUSH
25451: LD_STRING 0
25453: ST_TO_ADDR
// if result [ 2 ] then
25454: LD_VAR 0 2
25458: PUSH
25459: LD_INT 2
25461: ARRAY
25462: IFFALSE 25531
// if result [ 2 ] [ 1 ] = 100 + i then
25464: LD_VAR 0 2
25468: PUSH
25469: LD_INT 2
25471: ARRAY
25472: PUSH
25473: LD_INT 1
25475: ARRAY
25476: PUSH
25477: LD_INT 100
25479: PUSH
25480: LD_VAR 0 8
25484: PLUS
25485: EQUAL
25486: IFFALSE 25531
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25488: LD_ADDR_VAR 0 2
25492: PUSH
25493: LD_VAR 0 2
25497: PPUSH
25498: LD_INT 2
25500: PPUSH
25501: LD_VAR 0 2
25505: PUSH
25506: LD_INT 2
25508: ARRAY
25509: PPUSH
25510: LD_INT 1
25512: PPUSH
25513: CALL_OW 3
25517: PPUSH
25518: CALL_OW 1
25522: ST_TO_ADDR
// tmp := 1 ;
25523: LD_ADDR_VAR 0 3
25527: PUSH
25528: LD_STRING 1
25530: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25531: LD_ADDR_VAR 0 6
25535: PUSH
25536: LD_VAR 0 6
25540: PUSH
25541: LD_VAR 0 3
25545: STR
25546: ST_TO_ADDR
// end ;
25547: GO 25443
25549: POP
25550: POP
// if isGameLoad then
25551: LD_VAR 0 1
25555: IFFALSE 26030
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25557: LD_ADDR_VAR 0 4
25561: PUSH
25562: LD_EXP 57
25566: PUSH
25567: LD_EXP 56
25571: PUSH
25572: LD_EXP 58
25576: PUSH
25577: LD_EXP 55
25581: PUSH
25582: LD_EXP 59
25586: PUSH
25587: LD_EXP 60
25591: PUSH
25592: LD_EXP 61
25596: PUSH
25597: LD_EXP 62
25601: PUSH
25602: LD_EXP 63
25606: PUSH
25607: LD_EXP 64
25611: PUSH
25612: LD_EXP 65
25616: PUSH
25617: LD_EXP 66
25621: PUSH
25622: LD_EXP 67
25626: PUSH
25627: LD_EXP 68
25631: PUSH
25632: LD_EXP 76
25636: PUSH
25637: LD_EXP 77
25641: PUSH
25642: LD_EXP 78
25646: PUSH
25647: LD_EXP 79
25651: PUSH
25652: LD_EXP 81
25656: PUSH
25657: LD_EXP 82
25661: PUSH
25662: LD_EXP 83
25666: PUSH
25667: LD_EXP 86
25671: PUSH
25672: LD_EXP 88
25676: PUSH
25677: LD_EXP 89
25681: PUSH
25682: LD_EXP 90
25686: PUSH
25687: LD_EXP 92
25691: PUSH
25692: LD_EXP 93
25696: PUSH
25697: LD_EXP 96
25701: PUSH
25702: LD_EXP 97
25706: PUSH
25707: LD_EXP 98
25711: PUSH
25712: LD_EXP 99
25716: PUSH
25717: LD_EXP 100
25721: PUSH
25722: LD_EXP 101
25726: PUSH
25727: LD_EXP 102
25731: PUSH
25732: LD_EXP 103
25736: PUSH
25737: LD_EXP 104
25741: PUSH
25742: LD_EXP 69
25746: PUSH
25747: LD_EXP 70
25751: PUSH
25752: LD_EXP 73
25756: PUSH
25757: LD_EXP 74
25761: PUSH
25762: LD_EXP 75
25766: PUSH
25767: LD_EXP 71
25771: PUSH
25772: LD_EXP 72
25776: PUSH
25777: LD_EXP 80
25781: PUSH
25782: LD_EXP 84
25786: PUSH
25787: LD_EXP 85
25791: PUSH
25792: LD_EXP 87
25796: PUSH
25797: LD_EXP 91
25801: PUSH
25802: LD_EXP 94
25806: PUSH
25807: LD_EXP 95
25811: PUSH
25812: LD_EXP 105
25816: PUSH
25817: LD_EXP 106
25821: PUSH
25822: LD_EXP 107
25826: PUSH
25827: LD_EXP 108
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: ST_TO_ADDR
// tmp :=  ;
25888: LD_ADDR_VAR 0 3
25892: PUSH
25893: LD_STRING 
25895: ST_TO_ADDR
// for i = 1 to normalCounter do
25896: LD_ADDR_VAR 0 8
25900: PUSH
25901: DOUBLE
25902: LD_INT 1
25904: DEC
25905: ST_TO_ADDR
25906: LD_EXP 53
25910: PUSH
25911: FOR_TO
25912: IFFALSE 25948
// begin if flags [ i ] then
25914: LD_VAR 0 4
25918: PUSH
25919: LD_VAR 0 8
25923: ARRAY
25924: IFFALSE 25946
// tmp := tmp & i & ; ;
25926: LD_ADDR_VAR 0 3
25930: PUSH
25931: LD_VAR 0 3
25935: PUSH
25936: LD_VAR 0 8
25940: STR
25941: PUSH
25942: LD_STRING ;
25944: STR
25945: ST_TO_ADDR
// end ;
25946: GO 25911
25948: POP
25949: POP
// for i = 1 to hardcoreCounter do
25950: LD_ADDR_VAR 0 8
25954: PUSH
25955: DOUBLE
25956: LD_INT 1
25958: DEC
25959: ST_TO_ADDR
25960: LD_EXP 54
25964: PUSH
25965: FOR_TO
25966: IFFALSE 26012
// begin if flags [ normalCounter + i ] then
25968: LD_VAR 0 4
25972: PUSH
25973: LD_EXP 53
25977: PUSH
25978: LD_VAR 0 8
25982: PLUS
25983: ARRAY
25984: IFFALSE 26010
// tmp := tmp & ( 100 + i ) & ; ;
25986: LD_ADDR_VAR 0 3
25990: PUSH
25991: LD_VAR 0 3
25995: PUSH
25996: LD_INT 100
25998: PUSH
25999: LD_VAR 0 8
26003: PLUS
26004: STR
26005: PUSH
26006: LD_STRING ;
26008: STR
26009: ST_TO_ADDR
// end ;
26010: GO 25965
26012: POP
26013: POP
// if tmp then
26014: LD_VAR 0 3
26018: IFFALSE 26030
// active := tmp ;
26020: LD_ADDR_VAR 0 7
26024: PUSH
26025: LD_VAR 0 3
26029: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26030: LD_STRING getStreamItemsFromMission("
26032: PUSH
26033: LD_VAR 0 5
26037: STR
26038: PUSH
26039: LD_STRING ","
26041: STR
26042: PUSH
26043: LD_VAR 0 6
26047: STR
26048: PUSH
26049: LD_STRING ","
26051: STR
26052: PUSH
26053: LD_VAR 0 7
26057: STR
26058: PUSH
26059: LD_STRING ")
26061: STR
26062: PPUSH
26063: CALL_OW 559
// end else
26067: GO 26076
// ToLua ( getStreamItemsFromMission("","","") ) ;
26069: LD_STRING getStreamItemsFromMission("","","")
26071: PPUSH
26072: CALL_OW 559
// end ;
26076: LD_VAR 0 2
26080: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26081: LD_EXP 52
26085: PUSH
26086: LD_EXP 57
26090: AND
26091: IFFALSE 26215
26093: GO 26095
26095: DISABLE
26096: LD_INT 0
26098: PPUSH
26099: PPUSH
// begin enable ;
26100: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26101: LD_ADDR_VAR 0 2
26105: PUSH
26106: LD_INT 22
26108: PUSH
26109: LD_OWVAR 2
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 2
26120: PUSH
26121: LD_INT 34
26123: PUSH
26124: LD_INT 7
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 34
26133: PUSH
26134: LD_INT 45
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 34
26143: PUSH
26144: LD_INT 28
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 34
26153: PUSH
26154: LD_INT 47
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PPUSH
26172: CALL_OW 69
26176: ST_TO_ADDR
// if not tmp then
26177: LD_VAR 0 2
26181: NOT
26182: IFFALSE 26186
// exit ;
26184: GO 26215
// for i in tmp do
26186: LD_ADDR_VAR 0 1
26190: PUSH
26191: LD_VAR 0 2
26195: PUSH
26196: FOR_IN
26197: IFFALSE 26213
// begin SetLives ( i , 0 ) ;
26199: LD_VAR 0 1
26203: PPUSH
26204: LD_INT 0
26206: PPUSH
26207: CALL_OW 234
// end ;
26211: GO 26196
26213: POP
26214: POP
// end ;
26215: PPOPN 2
26217: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26218: LD_EXP 52
26222: PUSH
26223: LD_EXP 58
26227: AND
26228: IFFALSE 26312
26230: GO 26232
26232: DISABLE
26233: LD_INT 0
26235: PPUSH
26236: PPUSH
// begin enable ;
26237: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26238: LD_ADDR_VAR 0 2
26242: PUSH
26243: LD_INT 22
26245: PUSH
26246: LD_OWVAR 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 32
26257: PUSH
26258: LD_INT 3
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PPUSH
26269: CALL_OW 69
26273: ST_TO_ADDR
// if not tmp then
26274: LD_VAR 0 2
26278: NOT
26279: IFFALSE 26283
// exit ;
26281: GO 26312
// for i in tmp do
26283: LD_ADDR_VAR 0 1
26287: PUSH
26288: LD_VAR 0 2
26292: PUSH
26293: FOR_IN
26294: IFFALSE 26310
// begin SetLives ( i , 0 ) ;
26296: LD_VAR 0 1
26300: PPUSH
26301: LD_INT 0
26303: PPUSH
26304: CALL_OW 234
// end ;
26308: GO 26293
26310: POP
26311: POP
// end ;
26312: PPOPN 2
26314: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26315: LD_EXP 52
26319: PUSH
26320: LD_EXP 55
26324: AND
26325: IFFALSE 26418
26327: GO 26329
26329: DISABLE
26330: LD_INT 0
26332: PPUSH
// begin enable ;
26333: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26334: LD_ADDR_VAR 0 1
26338: PUSH
26339: LD_INT 22
26341: PUSH
26342: LD_OWVAR 2
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 2
26353: PUSH
26354: LD_INT 25
26356: PUSH
26357: LD_INT 5
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 25
26366: PUSH
26367: LD_INT 9
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 25
26376: PUSH
26377: LD_INT 8
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PPUSH
26394: CALL_OW 69
26398: PUSH
26399: FOR_IN
26400: IFFALSE 26416
// begin SetClass ( i , 1 ) ;
26402: LD_VAR 0 1
26406: PPUSH
26407: LD_INT 1
26409: PPUSH
26410: CALL_OW 336
// end ;
26414: GO 26399
26416: POP
26417: POP
// end ;
26418: PPOPN 1
26420: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26421: LD_EXP 52
26425: PUSH
26426: LD_EXP 56
26430: AND
26431: PUSH
26432: LD_OWVAR 65
26436: PUSH
26437: LD_INT 7
26439: LESS
26440: AND
26441: IFFALSE 26455
26443: GO 26445
26445: DISABLE
// begin enable ;
26446: ENABLE
// game_speed := 7 ;
26447: LD_ADDR_OWVAR 65
26451: PUSH
26452: LD_INT 7
26454: ST_TO_ADDR
// end ;
26455: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26456: LD_EXP 52
26460: PUSH
26461: LD_EXP 59
26465: AND
26466: IFFALSE 26668
26468: GO 26470
26470: DISABLE
26471: LD_INT 0
26473: PPUSH
26474: PPUSH
26475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26476: LD_ADDR_VAR 0 3
26480: PUSH
26481: LD_INT 81
26483: PUSH
26484: LD_OWVAR 2
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 21
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PPUSH
26507: CALL_OW 69
26511: ST_TO_ADDR
// if not tmp then
26512: LD_VAR 0 3
26516: NOT
26517: IFFALSE 26521
// exit ;
26519: GO 26668
// if tmp > 5 then
26521: LD_VAR 0 3
26525: PUSH
26526: LD_INT 5
26528: GREATER
26529: IFFALSE 26541
// k := 5 else
26531: LD_ADDR_VAR 0 2
26535: PUSH
26536: LD_INT 5
26538: ST_TO_ADDR
26539: GO 26551
// k := tmp ;
26541: LD_ADDR_VAR 0 2
26545: PUSH
26546: LD_VAR 0 3
26550: ST_TO_ADDR
// for i := 1 to k do
26551: LD_ADDR_VAR 0 1
26555: PUSH
26556: DOUBLE
26557: LD_INT 1
26559: DEC
26560: ST_TO_ADDR
26561: LD_VAR 0 2
26565: PUSH
26566: FOR_TO
26567: IFFALSE 26666
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26569: LD_VAR 0 3
26573: PUSH
26574: LD_VAR 0 1
26578: ARRAY
26579: PPUSH
26580: LD_VAR 0 1
26584: PUSH
26585: LD_INT 4
26587: MOD
26588: PUSH
26589: LD_INT 1
26591: PLUS
26592: PPUSH
26593: CALL_OW 259
26597: PUSH
26598: LD_INT 10
26600: LESS
26601: IFFALSE 26664
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26603: LD_VAR 0 3
26607: PUSH
26608: LD_VAR 0 1
26612: ARRAY
26613: PPUSH
26614: LD_VAR 0 1
26618: PUSH
26619: LD_INT 4
26621: MOD
26622: PUSH
26623: LD_INT 1
26625: PLUS
26626: PPUSH
26627: LD_VAR 0 3
26631: PUSH
26632: LD_VAR 0 1
26636: ARRAY
26637: PPUSH
26638: LD_VAR 0 1
26642: PUSH
26643: LD_INT 4
26645: MOD
26646: PUSH
26647: LD_INT 1
26649: PLUS
26650: PPUSH
26651: CALL_OW 259
26655: PUSH
26656: LD_INT 1
26658: PLUS
26659: PPUSH
26660: CALL_OW 237
26664: GO 26566
26666: POP
26667: POP
// end ;
26668: PPOPN 3
26670: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26671: LD_EXP 52
26675: PUSH
26676: LD_EXP 60
26680: AND
26681: IFFALSE 26701
26683: GO 26685
26685: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26686: LD_INT 4
26688: PPUSH
26689: LD_OWVAR 2
26693: PPUSH
26694: LD_INT 0
26696: PPUSH
26697: CALL_OW 324
26701: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26702: LD_EXP 52
26706: PUSH
26707: LD_EXP 89
26711: AND
26712: IFFALSE 26732
26714: GO 26716
26716: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26717: LD_INT 19
26719: PPUSH
26720: LD_OWVAR 2
26724: PPUSH
26725: LD_INT 0
26727: PPUSH
26728: CALL_OW 324
26732: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26733: LD_EXP 52
26737: PUSH
26738: LD_EXP 61
26742: AND
26743: IFFALSE 26845
26745: GO 26747
26747: DISABLE
26748: LD_INT 0
26750: PPUSH
26751: PPUSH
// begin enable ;
26752: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26753: LD_ADDR_VAR 0 2
26757: PUSH
26758: LD_INT 22
26760: PUSH
26761: LD_OWVAR 2
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 2
26772: PUSH
26773: LD_INT 34
26775: PUSH
26776: LD_INT 11
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 34
26785: PUSH
26786: LD_INT 30
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: LIST
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PPUSH
26802: CALL_OW 69
26806: ST_TO_ADDR
// if not tmp then
26807: LD_VAR 0 2
26811: NOT
26812: IFFALSE 26816
// exit ;
26814: GO 26845
// for i in tmp do
26816: LD_ADDR_VAR 0 1
26820: PUSH
26821: LD_VAR 0 2
26825: PUSH
26826: FOR_IN
26827: IFFALSE 26843
// begin SetLives ( i , 0 ) ;
26829: LD_VAR 0 1
26833: PPUSH
26834: LD_INT 0
26836: PPUSH
26837: CALL_OW 234
// end ;
26841: GO 26826
26843: POP
26844: POP
// end ;
26845: PPOPN 2
26847: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26848: LD_EXP 52
26852: PUSH
26853: LD_EXP 62
26857: AND
26858: IFFALSE 26878
26860: GO 26862
26862: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26863: LD_INT 32
26865: PPUSH
26866: LD_OWVAR 2
26870: PPUSH
26871: LD_INT 0
26873: PPUSH
26874: CALL_OW 324
26878: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26879: LD_EXP 52
26883: PUSH
26884: LD_EXP 63
26888: AND
26889: IFFALSE 27070
26891: GO 26893
26893: DISABLE
26894: LD_INT 0
26896: PPUSH
26897: PPUSH
26898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26899: LD_ADDR_VAR 0 2
26903: PUSH
26904: LD_INT 22
26906: PUSH
26907: LD_OWVAR 2
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 33
26918: PUSH
26919: LD_INT 3
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PPUSH
26930: CALL_OW 69
26934: ST_TO_ADDR
// if not tmp then
26935: LD_VAR 0 2
26939: NOT
26940: IFFALSE 26944
// exit ;
26942: GO 27070
// side := 0 ;
26944: LD_ADDR_VAR 0 3
26948: PUSH
26949: LD_INT 0
26951: ST_TO_ADDR
// for i := 1 to 8 do
26952: LD_ADDR_VAR 0 1
26956: PUSH
26957: DOUBLE
26958: LD_INT 1
26960: DEC
26961: ST_TO_ADDR
26962: LD_INT 8
26964: PUSH
26965: FOR_TO
26966: IFFALSE 27014
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26968: LD_OWVAR 2
26972: PUSH
26973: LD_VAR 0 1
26977: NONEQUAL
26978: PUSH
26979: LD_OWVAR 2
26983: PPUSH
26984: LD_VAR 0 1
26988: PPUSH
26989: CALL_OW 81
26993: PUSH
26994: LD_INT 2
26996: EQUAL
26997: AND
26998: IFFALSE 27012
// begin side := i ;
27000: LD_ADDR_VAR 0 3
27004: PUSH
27005: LD_VAR 0 1
27009: ST_TO_ADDR
// break ;
27010: GO 27014
// end ;
27012: GO 26965
27014: POP
27015: POP
// if not side then
27016: LD_VAR 0 3
27020: NOT
27021: IFFALSE 27025
// exit ;
27023: GO 27070
// for i := 1 to tmp do
27025: LD_ADDR_VAR 0 1
27029: PUSH
27030: DOUBLE
27031: LD_INT 1
27033: DEC
27034: ST_TO_ADDR
27035: LD_VAR 0 2
27039: PUSH
27040: FOR_TO
27041: IFFALSE 27068
// if Prob ( 60 ) then
27043: LD_INT 60
27045: PPUSH
27046: CALL_OW 13
27050: IFFALSE 27066
// SetSide ( i , side ) ;
27052: LD_VAR 0 1
27056: PPUSH
27057: LD_VAR 0 3
27061: PPUSH
27062: CALL_OW 235
27066: GO 27040
27068: POP
27069: POP
// end ;
27070: PPOPN 3
27072: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27073: LD_EXP 52
27077: PUSH
27078: LD_EXP 65
27082: AND
27083: IFFALSE 27202
27085: GO 27087
27087: DISABLE
27088: LD_INT 0
27090: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27091: LD_ADDR_VAR 0 1
27095: PUSH
27096: LD_INT 22
27098: PUSH
27099: LD_OWVAR 2
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 21
27110: PUSH
27111: LD_INT 1
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 3
27120: PUSH
27121: LD_INT 23
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: LIST
27139: PPUSH
27140: CALL_OW 69
27144: PUSH
27145: FOR_IN
27146: IFFALSE 27200
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27148: LD_VAR 0 1
27152: PPUSH
27153: CALL_OW 257
27157: PUSH
27158: LD_INT 1
27160: PUSH
27161: LD_INT 2
27163: PUSH
27164: LD_INT 3
27166: PUSH
27167: LD_INT 4
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: IN
27176: IFFALSE 27198
// SetClass ( un , rand ( 1 , 4 ) ) ;
27178: LD_VAR 0 1
27182: PPUSH
27183: LD_INT 1
27185: PPUSH
27186: LD_INT 4
27188: PPUSH
27189: CALL_OW 12
27193: PPUSH
27194: CALL_OW 336
27198: GO 27145
27200: POP
27201: POP
// end ;
27202: PPOPN 1
27204: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27205: LD_EXP 52
27209: PUSH
27210: LD_EXP 64
27214: AND
27215: IFFALSE 27294
27217: GO 27219
27219: DISABLE
27220: LD_INT 0
27222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27223: LD_ADDR_VAR 0 1
27227: PUSH
27228: LD_INT 22
27230: PUSH
27231: LD_OWVAR 2
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 21
27242: PUSH
27243: LD_INT 3
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PPUSH
27254: CALL_OW 69
27258: ST_TO_ADDR
// if not tmp then
27259: LD_VAR 0 1
27263: NOT
27264: IFFALSE 27268
// exit ;
27266: GO 27294
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27268: LD_VAR 0 1
27272: PUSH
27273: LD_INT 1
27275: PPUSH
27276: LD_VAR 0 1
27280: PPUSH
27281: CALL_OW 12
27285: ARRAY
27286: PPUSH
27287: LD_INT 100
27289: PPUSH
27290: CALL_OW 234
// end ;
27294: PPOPN 1
27296: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27297: LD_EXP 52
27301: PUSH
27302: LD_EXP 66
27306: AND
27307: IFFALSE 27405
27309: GO 27311
27311: DISABLE
27312: LD_INT 0
27314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27315: LD_ADDR_VAR 0 1
27319: PUSH
27320: LD_INT 22
27322: PUSH
27323: LD_OWVAR 2
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 21
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PPUSH
27346: CALL_OW 69
27350: ST_TO_ADDR
// if not tmp then
27351: LD_VAR 0 1
27355: NOT
27356: IFFALSE 27360
// exit ;
27358: GO 27405
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27360: LD_VAR 0 1
27364: PUSH
27365: LD_INT 1
27367: PPUSH
27368: LD_VAR 0 1
27372: PPUSH
27373: CALL_OW 12
27377: ARRAY
27378: PPUSH
27379: LD_INT 1
27381: PPUSH
27382: LD_INT 4
27384: PPUSH
27385: CALL_OW 12
27389: PPUSH
27390: LD_INT 3000
27392: PPUSH
27393: LD_INT 9000
27395: PPUSH
27396: CALL_OW 12
27400: PPUSH
27401: CALL_OW 492
// end ;
27405: PPOPN 1
27407: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27408: LD_EXP 52
27412: PUSH
27413: LD_EXP 67
27417: AND
27418: IFFALSE 27438
27420: GO 27422
27422: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27423: LD_INT 1
27425: PPUSH
27426: LD_OWVAR 2
27430: PPUSH
27431: LD_INT 0
27433: PPUSH
27434: CALL_OW 324
27438: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27439: LD_EXP 52
27443: PUSH
27444: LD_EXP 68
27448: AND
27449: IFFALSE 27532
27451: GO 27453
27453: DISABLE
27454: LD_INT 0
27456: PPUSH
27457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27458: LD_ADDR_VAR 0 2
27462: PUSH
27463: LD_INT 22
27465: PUSH
27466: LD_OWVAR 2
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 21
27477: PUSH
27478: LD_INT 3
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PPUSH
27489: CALL_OW 69
27493: ST_TO_ADDR
// if not tmp then
27494: LD_VAR 0 2
27498: NOT
27499: IFFALSE 27503
// exit ;
27501: GO 27532
// for i in tmp do
27503: LD_ADDR_VAR 0 1
27507: PUSH
27508: LD_VAR 0 2
27512: PUSH
27513: FOR_IN
27514: IFFALSE 27530
// SetBLevel ( i , 10 ) ;
27516: LD_VAR 0 1
27520: PPUSH
27521: LD_INT 10
27523: PPUSH
27524: CALL_OW 241
27528: GO 27513
27530: POP
27531: POP
// end ;
27532: PPOPN 2
27534: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27535: LD_EXP 52
27539: PUSH
27540: LD_EXP 69
27544: AND
27545: IFFALSE 27656
27547: GO 27549
27549: DISABLE
27550: LD_INT 0
27552: PPUSH
27553: PPUSH
27554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27555: LD_ADDR_VAR 0 3
27559: PUSH
27560: LD_INT 22
27562: PUSH
27563: LD_OWVAR 2
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 25
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PPUSH
27586: CALL_OW 69
27590: ST_TO_ADDR
// if not tmp then
27591: LD_VAR 0 3
27595: NOT
27596: IFFALSE 27600
// exit ;
27598: GO 27656
// un := tmp [ rand ( 1 , tmp ) ] ;
27600: LD_ADDR_VAR 0 2
27604: PUSH
27605: LD_VAR 0 3
27609: PUSH
27610: LD_INT 1
27612: PPUSH
27613: LD_VAR 0 3
27617: PPUSH
27618: CALL_OW 12
27622: ARRAY
27623: ST_TO_ADDR
// if Crawls ( un ) then
27624: LD_VAR 0 2
27628: PPUSH
27629: CALL_OW 318
27633: IFFALSE 27644
// ComWalk ( un ) ;
27635: LD_VAR 0 2
27639: PPUSH
27640: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27644: LD_VAR 0 2
27648: PPUSH
27649: LD_INT 5
27651: PPUSH
27652: CALL_OW 336
// end ;
27656: PPOPN 3
27658: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27659: LD_EXP 52
27663: PUSH
27664: LD_EXP 70
27668: AND
27669: PUSH
27670: LD_OWVAR 67
27674: PUSH
27675: LD_INT 4
27677: LESS
27678: AND
27679: IFFALSE 27698
27681: GO 27683
27683: DISABLE
// begin Difficulty := Difficulty + 1 ;
27684: LD_ADDR_OWVAR 67
27688: PUSH
27689: LD_OWVAR 67
27693: PUSH
27694: LD_INT 1
27696: PLUS
27697: ST_TO_ADDR
// end ;
27698: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27699: LD_EXP 52
27703: PUSH
27704: LD_EXP 71
27708: AND
27709: IFFALSE 27812
27711: GO 27713
27713: DISABLE
27714: LD_INT 0
27716: PPUSH
// begin for i := 1 to 5 do
27717: LD_ADDR_VAR 0 1
27721: PUSH
27722: DOUBLE
27723: LD_INT 1
27725: DEC
27726: ST_TO_ADDR
27727: LD_INT 5
27729: PUSH
27730: FOR_TO
27731: IFFALSE 27810
// begin uc_nation := nation_nature ;
27733: LD_ADDR_OWVAR 21
27737: PUSH
27738: LD_INT 0
27740: ST_TO_ADDR
// uc_side := 0 ;
27741: LD_ADDR_OWVAR 20
27745: PUSH
27746: LD_INT 0
27748: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27749: LD_ADDR_OWVAR 29
27753: PUSH
27754: LD_INT 12
27756: PUSH
27757: LD_INT 12
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: ST_TO_ADDR
// hc_agressivity := 20 ;
27764: LD_ADDR_OWVAR 35
27768: PUSH
27769: LD_INT 20
27771: ST_TO_ADDR
// hc_class := class_tiger ;
27772: LD_ADDR_OWVAR 28
27776: PUSH
27777: LD_INT 14
27779: ST_TO_ADDR
// hc_gallery :=  ;
27780: LD_ADDR_OWVAR 33
27784: PUSH
27785: LD_STRING 
27787: ST_TO_ADDR
// hc_name :=  ;
27788: LD_ADDR_OWVAR 26
27792: PUSH
27793: LD_STRING 
27795: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27796: CALL_OW 44
27800: PPUSH
27801: LD_INT 0
27803: PPUSH
27804: CALL_OW 51
// end ;
27808: GO 27730
27810: POP
27811: POP
// end ;
27812: PPOPN 1
27814: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27815: LD_EXP 52
27819: PUSH
27820: LD_EXP 72
27824: AND
27825: IFFALSE 27834
27827: GO 27829
27829: DISABLE
// StreamSibBomb ;
27830: CALL 27835 0 0
27834: END
// export function StreamSibBomb ; var i , x , y ; begin
27835: LD_INT 0
27837: PPUSH
27838: PPUSH
27839: PPUSH
27840: PPUSH
// result := false ;
27841: LD_ADDR_VAR 0 1
27845: PUSH
27846: LD_INT 0
27848: ST_TO_ADDR
// for i := 1 to 16 do
27849: LD_ADDR_VAR 0 2
27853: PUSH
27854: DOUBLE
27855: LD_INT 1
27857: DEC
27858: ST_TO_ADDR
27859: LD_INT 16
27861: PUSH
27862: FOR_TO
27863: IFFALSE 28062
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27865: LD_ADDR_VAR 0 3
27869: PUSH
27870: LD_INT 10
27872: PUSH
27873: LD_INT 20
27875: PUSH
27876: LD_INT 30
27878: PUSH
27879: LD_INT 40
27881: PUSH
27882: LD_INT 50
27884: PUSH
27885: LD_INT 60
27887: PUSH
27888: LD_INT 70
27890: PUSH
27891: LD_INT 80
27893: PUSH
27894: LD_INT 90
27896: PUSH
27897: LD_INT 100
27899: PUSH
27900: LD_INT 110
27902: PUSH
27903: LD_INT 120
27905: PUSH
27906: LD_INT 130
27908: PUSH
27909: LD_INT 140
27911: PUSH
27912: LD_INT 150
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 1
27934: PPUSH
27935: LD_INT 15
27937: PPUSH
27938: CALL_OW 12
27942: ARRAY
27943: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27944: LD_ADDR_VAR 0 4
27948: PUSH
27949: LD_INT 10
27951: PUSH
27952: LD_INT 20
27954: PUSH
27955: LD_INT 30
27957: PUSH
27958: LD_INT 40
27960: PUSH
27961: LD_INT 50
27963: PUSH
27964: LD_INT 60
27966: PUSH
27967: LD_INT 70
27969: PUSH
27970: LD_INT 80
27972: PUSH
27973: LD_INT 90
27975: PUSH
27976: LD_INT 100
27978: PUSH
27979: LD_INT 110
27981: PUSH
27982: LD_INT 120
27984: PUSH
27985: LD_INT 130
27987: PUSH
27988: LD_INT 140
27990: PUSH
27991: LD_INT 150
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 1
28013: PPUSH
28014: LD_INT 15
28016: PPUSH
28017: CALL_OW 12
28021: ARRAY
28022: ST_TO_ADDR
// if ValidHex ( x , y ) then
28023: LD_VAR 0 3
28027: PPUSH
28028: LD_VAR 0 4
28032: PPUSH
28033: CALL_OW 488
28037: IFFALSE 28060
// begin result := [ x , y ] ;
28039: LD_ADDR_VAR 0 1
28043: PUSH
28044: LD_VAR 0 3
28048: PUSH
28049: LD_VAR 0 4
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: ST_TO_ADDR
// break ;
28058: GO 28062
// end ; end ;
28060: GO 27862
28062: POP
28063: POP
// if result then
28064: LD_VAR 0 1
28068: IFFALSE 28128
// begin ToLua ( playSibBomb() ) ;
28070: LD_STRING playSibBomb()
28072: PPUSH
28073: CALL_OW 559
// wait ( 0 0$14 ) ;
28077: LD_INT 490
28079: PPUSH
28080: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28084: LD_VAR 0 1
28088: PUSH
28089: LD_INT 1
28091: ARRAY
28092: PPUSH
28093: LD_VAR 0 1
28097: PUSH
28098: LD_INT 2
28100: ARRAY
28101: PPUSH
28102: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28106: LD_VAR 0 1
28110: PUSH
28111: LD_INT 1
28113: ARRAY
28114: PPUSH
28115: LD_VAR 0 1
28119: PUSH
28120: LD_INT 2
28122: ARRAY
28123: PPUSH
28124: CALL_OW 429
// end ; end ;
28128: LD_VAR 0 1
28132: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28133: LD_EXP 52
28137: PUSH
28138: LD_EXP 74
28142: AND
28143: IFFALSE 28155
28145: GO 28147
28147: DISABLE
// YouLost (  ) ;
28148: LD_STRING 
28150: PPUSH
28151: CALL_OW 104
28155: END
// every 0 0$1 trigger StreamModeActive and sFog do
28156: LD_EXP 52
28160: PUSH
28161: LD_EXP 73
28165: AND
28166: IFFALSE 28180
28168: GO 28170
28170: DISABLE
// FogOff ( your_side ) ;
28171: LD_OWVAR 2
28175: PPUSH
28176: CALL_OW 344
28180: END
// every 0 0$1 trigger StreamModeActive and sSun do
28181: LD_EXP 52
28185: PUSH
28186: LD_EXP 75
28190: AND
28191: IFFALSE 28219
28193: GO 28195
28195: DISABLE
// begin solar_recharge_percent := 0 ;
28196: LD_ADDR_OWVAR 79
28200: PUSH
28201: LD_INT 0
28203: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28204: LD_INT 10500
28206: PPUSH
28207: CALL_OW 67
// solar_recharge_percent := 100 ;
28211: LD_ADDR_OWVAR 79
28215: PUSH
28216: LD_INT 100
28218: ST_TO_ADDR
// end ;
28219: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28220: LD_EXP 52
28224: PUSH
28225: LD_EXP 76
28229: AND
28230: IFFALSE 28469
28232: GO 28234
28234: DISABLE
28235: LD_INT 0
28237: PPUSH
28238: PPUSH
28239: PPUSH
// begin tmp := [ ] ;
28240: LD_ADDR_VAR 0 3
28244: PUSH
28245: EMPTY
28246: ST_TO_ADDR
// for i := 1 to 6 do
28247: LD_ADDR_VAR 0 1
28251: PUSH
28252: DOUBLE
28253: LD_INT 1
28255: DEC
28256: ST_TO_ADDR
28257: LD_INT 6
28259: PUSH
28260: FOR_TO
28261: IFFALSE 28366
// begin uc_nation := nation_nature ;
28263: LD_ADDR_OWVAR 21
28267: PUSH
28268: LD_INT 0
28270: ST_TO_ADDR
// uc_side := 0 ;
28271: LD_ADDR_OWVAR 20
28275: PUSH
28276: LD_INT 0
28278: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28279: LD_ADDR_OWVAR 29
28283: PUSH
28284: LD_INT 12
28286: PUSH
28287: LD_INT 12
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: ST_TO_ADDR
// hc_agressivity := 20 ;
28294: LD_ADDR_OWVAR 35
28298: PUSH
28299: LD_INT 20
28301: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28302: LD_ADDR_OWVAR 28
28306: PUSH
28307: LD_INT 17
28309: ST_TO_ADDR
// hc_gallery :=  ;
28310: LD_ADDR_OWVAR 33
28314: PUSH
28315: LD_STRING 
28317: ST_TO_ADDR
// hc_name :=  ;
28318: LD_ADDR_OWVAR 26
28322: PUSH
28323: LD_STRING 
28325: ST_TO_ADDR
// un := CreateHuman ;
28326: LD_ADDR_VAR 0 2
28330: PUSH
28331: CALL_OW 44
28335: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28336: LD_VAR 0 2
28340: PPUSH
28341: LD_INT 1
28343: PPUSH
28344: CALL_OW 51
// tmp := tmp ^ un ;
28348: LD_ADDR_VAR 0 3
28352: PUSH
28353: LD_VAR 0 3
28357: PUSH
28358: LD_VAR 0 2
28362: ADD
28363: ST_TO_ADDR
// end ;
28364: GO 28260
28366: POP
28367: POP
// repeat wait ( 0 0$1 ) ;
28368: LD_INT 35
28370: PPUSH
28371: CALL_OW 67
// for un in tmp do
28375: LD_ADDR_VAR 0 2
28379: PUSH
28380: LD_VAR 0 3
28384: PUSH
28385: FOR_IN
28386: IFFALSE 28460
// begin if IsDead ( un ) then
28388: LD_VAR 0 2
28392: PPUSH
28393: CALL_OW 301
28397: IFFALSE 28417
// begin tmp := tmp diff un ;
28399: LD_ADDR_VAR 0 3
28403: PUSH
28404: LD_VAR 0 3
28408: PUSH
28409: LD_VAR 0 2
28413: DIFF
28414: ST_TO_ADDR
// continue ;
28415: GO 28385
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28417: LD_VAR 0 2
28421: PPUSH
28422: LD_INT 3
28424: PUSH
28425: LD_INT 22
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PPUSH
28439: CALL_OW 69
28443: PPUSH
28444: LD_VAR 0 2
28448: PPUSH
28449: CALL_OW 74
28453: PPUSH
28454: CALL_OW 115
// end ;
28458: GO 28385
28460: POP
28461: POP
// until not tmp ;
28462: LD_VAR 0 3
28466: NOT
28467: IFFALSE 28368
// end ;
28469: PPOPN 3
28471: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28472: LD_EXP 52
28476: PUSH
28477: LD_EXP 77
28481: AND
28482: IFFALSE 28536
28484: GO 28486
28486: DISABLE
// begin ToLua ( displayTroll(); ) ;
28487: LD_STRING displayTroll();
28489: PPUSH
28490: CALL_OW 559
// wait ( 3 3$00 ) ;
28494: LD_INT 6300
28496: PPUSH
28497: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28501: LD_STRING hideTroll();
28503: PPUSH
28504: CALL_OW 559
// wait ( 1 1$00 ) ;
28508: LD_INT 2100
28510: PPUSH
28511: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28515: LD_STRING displayTroll();
28517: PPUSH
28518: CALL_OW 559
// wait ( 1 1$00 ) ;
28522: LD_INT 2100
28524: PPUSH
28525: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28529: LD_STRING hideTroll();
28531: PPUSH
28532: CALL_OW 559
// end ;
28536: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28537: LD_EXP 52
28541: PUSH
28542: LD_EXP 78
28546: AND
28547: IFFALSE 28610
28549: GO 28551
28551: DISABLE
28552: LD_INT 0
28554: PPUSH
// begin p := 0 ;
28555: LD_ADDR_VAR 0 1
28559: PUSH
28560: LD_INT 0
28562: ST_TO_ADDR
// repeat game_speed := 1 ;
28563: LD_ADDR_OWVAR 65
28567: PUSH
28568: LD_INT 1
28570: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28571: LD_INT 35
28573: PPUSH
28574: CALL_OW 67
// p := p + 1 ;
28578: LD_ADDR_VAR 0 1
28582: PUSH
28583: LD_VAR 0 1
28587: PUSH
28588: LD_INT 1
28590: PLUS
28591: ST_TO_ADDR
// until p >= 60 ;
28592: LD_VAR 0 1
28596: PUSH
28597: LD_INT 60
28599: GREATEREQUAL
28600: IFFALSE 28563
// game_speed := 4 ;
28602: LD_ADDR_OWVAR 65
28606: PUSH
28607: LD_INT 4
28609: ST_TO_ADDR
// end ;
28610: PPOPN 1
28612: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28613: LD_EXP 52
28617: PUSH
28618: LD_EXP 79
28622: AND
28623: IFFALSE 28769
28625: GO 28627
28627: DISABLE
28628: LD_INT 0
28630: PPUSH
28631: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28632: LD_ADDR_VAR 0 1
28636: PUSH
28637: LD_INT 22
28639: PUSH
28640: LD_OWVAR 2
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 2
28651: PUSH
28652: LD_INT 30
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 30
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PPUSH
28681: CALL_OW 69
28685: ST_TO_ADDR
// if not depot then
28686: LD_VAR 0 1
28690: NOT
28691: IFFALSE 28695
// exit ;
28693: GO 28769
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28695: LD_ADDR_VAR 0 2
28699: PUSH
28700: LD_VAR 0 1
28704: PUSH
28705: LD_INT 1
28707: PPUSH
28708: LD_VAR 0 1
28712: PPUSH
28713: CALL_OW 12
28717: ARRAY
28718: PPUSH
28719: CALL_OW 274
28723: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28724: LD_VAR 0 2
28728: PPUSH
28729: LD_INT 1
28731: PPUSH
28732: LD_INT 0
28734: PPUSH
28735: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28739: LD_VAR 0 2
28743: PPUSH
28744: LD_INT 2
28746: PPUSH
28747: LD_INT 0
28749: PPUSH
28750: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28754: LD_VAR 0 2
28758: PPUSH
28759: LD_INT 3
28761: PPUSH
28762: LD_INT 0
28764: PPUSH
28765: CALL_OW 277
// end ;
28769: PPOPN 2
28771: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28772: LD_EXP 52
28776: PUSH
28777: LD_EXP 80
28781: AND
28782: IFFALSE 28879
28784: GO 28786
28786: DISABLE
28787: LD_INT 0
28789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28790: LD_ADDR_VAR 0 1
28794: PUSH
28795: LD_INT 22
28797: PUSH
28798: LD_OWVAR 2
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 21
28809: PUSH
28810: LD_INT 1
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 3
28819: PUSH
28820: LD_INT 23
28822: PUSH
28823: LD_INT 0
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: LIST
28838: PPUSH
28839: CALL_OW 69
28843: ST_TO_ADDR
// if not tmp then
28844: LD_VAR 0 1
28848: NOT
28849: IFFALSE 28853
// exit ;
28851: GO 28879
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28853: LD_VAR 0 1
28857: PUSH
28858: LD_INT 1
28860: PPUSH
28861: LD_VAR 0 1
28865: PPUSH
28866: CALL_OW 12
28870: ARRAY
28871: PPUSH
28872: LD_INT 200
28874: PPUSH
28875: CALL_OW 234
// end ;
28879: PPOPN 1
28881: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28882: LD_EXP 52
28886: PUSH
28887: LD_EXP 81
28891: AND
28892: IFFALSE 28971
28894: GO 28896
28896: DISABLE
28897: LD_INT 0
28899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28900: LD_ADDR_VAR 0 1
28904: PUSH
28905: LD_INT 22
28907: PUSH
28908: LD_OWVAR 2
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 21
28919: PUSH
28920: LD_INT 2
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PPUSH
28931: CALL_OW 69
28935: ST_TO_ADDR
// if not tmp then
28936: LD_VAR 0 1
28940: NOT
28941: IFFALSE 28945
// exit ;
28943: GO 28971
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28945: LD_VAR 0 1
28949: PUSH
28950: LD_INT 1
28952: PPUSH
28953: LD_VAR 0 1
28957: PPUSH
28958: CALL_OW 12
28962: ARRAY
28963: PPUSH
28964: LD_INT 60
28966: PPUSH
28967: CALL_OW 234
// end ;
28971: PPOPN 1
28973: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28974: LD_EXP 52
28978: PUSH
28979: LD_EXP 82
28983: AND
28984: IFFALSE 29083
28986: GO 28988
28988: DISABLE
28989: LD_INT 0
28991: PPUSH
28992: PPUSH
// begin enable ;
28993: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28994: LD_ADDR_VAR 0 1
28998: PUSH
28999: LD_INT 22
29001: PUSH
29002: LD_OWVAR 2
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 61
29013: PUSH
29014: EMPTY
29015: LIST
29016: PUSH
29017: LD_INT 33
29019: PUSH
29020: LD_INT 2
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: LIST
29031: PPUSH
29032: CALL_OW 69
29036: ST_TO_ADDR
// if not tmp then
29037: LD_VAR 0 1
29041: NOT
29042: IFFALSE 29046
// exit ;
29044: GO 29083
// for i in tmp do
29046: LD_ADDR_VAR 0 2
29050: PUSH
29051: LD_VAR 0 1
29055: PUSH
29056: FOR_IN
29057: IFFALSE 29081
// if IsControledBy ( i ) then
29059: LD_VAR 0 2
29063: PPUSH
29064: CALL_OW 312
29068: IFFALSE 29079
// ComUnlink ( i ) ;
29070: LD_VAR 0 2
29074: PPUSH
29075: CALL_OW 136
29079: GO 29056
29081: POP
29082: POP
// end ;
29083: PPOPN 2
29085: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29086: LD_EXP 52
29090: PUSH
29091: LD_EXP 83
29095: AND
29096: IFFALSE 29236
29098: GO 29100
29100: DISABLE
29101: LD_INT 0
29103: PPUSH
29104: PPUSH
// begin ToLua ( displayPowell(); ) ;
29105: LD_STRING displayPowell();
29107: PPUSH
29108: CALL_OW 559
// uc_side := 0 ;
29112: LD_ADDR_OWVAR 20
29116: PUSH
29117: LD_INT 0
29119: ST_TO_ADDR
// uc_nation := 2 ;
29120: LD_ADDR_OWVAR 21
29124: PUSH
29125: LD_INT 2
29127: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29128: LD_ADDR_OWVAR 37
29132: PUSH
29133: LD_INT 14
29135: ST_TO_ADDR
// vc_engine := engine_siberite ;
29136: LD_ADDR_OWVAR 39
29140: PUSH
29141: LD_INT 3
29143: ST_TO_ADDR
// vc_control := control_apeman ;
29144: LD_ADDR_OWVAR 38
29148: PUSH
29149: LD_INT 5
29151: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29152: LD_ADDR_OWVAR 40
29156: PUSH
29157: LD_INT 29
29159: ST_TO_ADDR
// un := CreateVehicle ;
29160: LD_ADDR_VAR 0 2
29164: PUSH
29165: CALL_OW 45
29169: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29170: LD_VAR 0 2
29174: PPUSH
29175: LD_INT 1
29177: PPUSH
29178: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29182: LD_INT 35
29184: PPUSH
29185: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29189: LD_VAR 0 2
29193: PPUSH
29194: LD_INT 22
29196: PUSH
29197: LD_OWVAR 2
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PPUSH
29206: CALL_OW 69
29210: PPUSH
29211: LD_VAR 0 2
29215: PPUSH
29216: CALL_OW 74
29220: PPUSH
29221: CALL_OW 115
// until IsDead ( un ) ;
29225: LD_VAR 0 2
29229: PPUSH
29230: CALL_OW 301
29234: IFFALSE 29182
// end ;
29236: PPOPN 2
29238: END
// every 0 0$1 trigger StreamModeActive and sStu do
29239: LD_EXP 52
29243: PUSH
29244: LD_EXP 91
29248: AND
29249: IFFALSE 29265
29251: GO 29253
29253: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29254: LD_STRING displayStucuk();
29256: PPUSH
29257: CALL_OW 559
// ResetFog ;
29261: CALL_OW 335
// end ;
29265: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29266: LD_EXP 52
29270: PUSH
29271: LD_EXP 84
29275: AND
29276: IFFALSE 29417
29278: GO 29280
29280: DISABLE
29281: LD_INT 0
29283: PPUSH
29284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29285: LD_ADDR_VAR 0 2
29289: PUSH
29290: LD_INT 22
29292: PUSH
29293: LD_OWVAR 2
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 21
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PPUSH
29316: CALL_OW 69
29320: ST_TO_ADDR
// if not tmp then
29321: LD_VAR 0 2
29325: NOT
29326: IFFALSE 29330
// exit ;
29328: GO 29417
// un := tmp [ rand ( 1 , tmp ) ] ;
29330: LD_ADDR_VAR 0 1
29334: PUSH
29335: LD_VAR 0 2
29339: PUSH
29340: LD_INT 1
29342: PPUSH
29343: LD_VAR 0 2
29347: PPUSH
29348: CALL_OW 12
29352: ARRAY
29353: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29354: LD_VAR 0 1
29358: PPUSH
29359: LD_INT 0
29361: PPUSH
29362: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29366: LD_VAR 0 1
29370: PPUSH
29371: LD_OWVAR 3
29375: PUSH
29376: LD_VAR 0 1
29380: DIFF
29381: PPUSH
29382: LD_VAR 0 1
29386: PPUSH
29387: CALL_OW 74
29391: PPUSH
29392: CALL_OW 115
// wait ( 0 0$20 ) ;
29396: LD_INT 700
29398: PPUSH
29399: CALL_OW 67
// SetSide ( un , your_side ) ;
29403: LD_VAR 0 1
29407: PPUSH
29408: LD_OWVAR 2
29412: PPUSH
29413: CALL_OW 235
// end ;
29417: PPOPN 2
29419: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29420: LD_EXP 52
29424: PUSH
29425: LD_EXP 85
29429: AND
29430: IFFALSE 29536
29432: GO 29434
29434: DISABLE
29435: LD_INT 0
29437: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29438: LD_ADDR_VAR 0 1
29442: PUSH
29443: LD_INT 22
29445: PUSH
29446: LD_OWVAR 2
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 2
29457: PUSH
29458: LD_INT 30
29460: PUSH
29461: LD_INT 0
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 30
29470: PUSH
29471: LD_INT 1
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: LIST
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PPUSH
29487: CALL_OW 69
29491: ST_TO_ADDR
// if not depot then
29492: LD_VAR 0 1
29496: NOT
29497: IFFALSE 29501
// exit ;
29499: GO 29536
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29501: LD_VAR 0 1
29505: PUSH
29506: LD_INT 1
29508: ARRAY
29509: PPUSH
29510: CALL_OW 250
29514: PPUSH
29515: LD_VAR 0 1
29519: PUSH
29520: LD_INT 1
29522: ARRAY
29523: PPUSH
29524: CALL_OW 251
29528: PPUSH
29529: LD_INT 70
29531: PPUSH
29532: CALL_OW 495
// end ;
29536: PPOPN 1
29538: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29539: LD_EXP 52
29543: PUSH
29544: LD_EXP 86
29548: AND
29549: IFFALSE 29760
29551: GO 29553
29553: DISABLE
29554: LD_INT 0
29556: PPUSH
29557: PPUSH
29558: PPUSH
29559: PPUSH
29560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29561: LD_ADDR_VAR 0 5
29565: PUSH
29566: LD_INT 22
29568: PUSH
29569: LD_OWVAR 2
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 21
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PPUSH
29592: CALL_OW 69
29596: ST_TO_ADDR
// if not tmp then
29597: LD_VAR 0 5
29601: NOT
29602: IFFALSE 29606
// exit ;
29604: GO 29760
// for i in tmp do
29606: LD_ADDR_VAR 0 1
29610: PUSH
29611: LD_VAR 0 5
29615: PUSH
29616: FOR_IN
29617: IFFALSE 29758
// begin d := rand ( 0 , 5 ) ;
29619: LD_ADDR_VAR 0 4
29623: PUSH
29624: LD_INT 0
29626: PPUSH
29627: LD_INT 5
29629: PPUSH
29630: CALL_OW 12
29634: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29635: LD_ADDR_VAR 0 2
29639: PUSH
29640: LD_VAR 0 1
29644: PPUSH
29645: CALL_OW 250
29649: PPUSH
29650: LD_VAR 0 4
29654: PPUSH
29655: LD_INT 3
29657: PPUSH
29658: LD_INT 12
29660: PPUSH
29661: CALL_OW 12
29665: PPUSH
29666: CALL_OW 272
29670: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29671: LD_ADDR_VAR 0 3
29675: PUSH
29676: LD_VAR 0 1
29680: PPUSH
29681: CALL_OW 251
29685: PPUSH
29686: LD_VAR 0 4
29690: PPUSH
29691: LD_INT 3
29693: PPUSH
29694: LD_INT 12
29696: PPUSH
29697: CALL_OW 12
29701: PPUSH
29702: CALL_OW 273
29706: ST_TO_ADDR
// if ValidHex ( x , y ) then
29707: LD_VAR 0 2
29711: PPUSH
29712: LD_VAR 0 3
29716: PPUSH
29717: CALL_OW 488
29721: IFFALSE 29756
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29723: LD_VAR 0 1
29727: PPUSH
29728: LD_VAR 0 2
29732: PPUSH
29733: LD_VAR 0 3
29737: PPUSH
29738: LD_INT 3
29740: PPUSH
29741: LD_INT 6
29743: PPUSH
29744: CALL_OW 12
29748: PPUSH
29749: LD_INT 1
29751: PPUSH
29752: CALL_OW 483
// end ;
29756: GO 29616
29758: POP
29759: POP
// end ;
29760: PPOPN 5
29762: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29763: LD_EXP 52
29767: PUSH
29768: LD_EXP 87
29772: AND
29773: IFFALSE 29867
29775: GO 29777
29777: DISABLE
29778: LD_INT 0
29780: PPUSH
29781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29782: LD_ADDR_VAR 0 2
29786: PUSH
29787: LD_INT 22
29789: PUSH
29790: LD_OWVAR 2
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 32
29801: PUSH
29802: LD_INT 1
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 21
29811: PUSH
29812: LD_INT 2
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: LIST
29823: PPUSH
29824: CALL_OW 69
29828: ST_TO_ADDR
// if not tmp then
29829: LD_VAR 0 2
29833: NOT
29834: IFFALSE 29838
// exit ;
29836: GO 29867
// for i in tmp do
29838: LD_ADDR_VAR 0 1
29842: PUSH
29843: LD_VAR 0 2
29847: PUSH
29848: FOR_IN
29849: IFFALSE 29865
// SetFuel ( i , 0 ) ;
29851: LD_VAR 0 1
29855: PPUSH
29856: LD_INT 0
29858: PPUSH
29859: CALL_OW 240
29863: GO 29848
29865: POP
29866: POP
// end ;
29867: PPOPN 2
29869: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29870: LD_EXP 52
29874: PUSH
29875: LD_EXP 88
29879: AND
29880: IFFALSE 29946
29882: GO 29884
29884: DISABLE
29885: LD_INT 0
29887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29888: LD_ADDR_VAR 0 1
29892: PUSH
29893: LD_INT 22
29895: PUSH
29896: LD_OWVAR 2
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 30
29907: PUSH
29908: LD_INT 29
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PPUSH
29919: CALL_OW 69
29923: ST_TO_ADDR
// if not tmp then
29924: LD_VAR 0 1
29928: NOT
29929: IFFALSE 29933
// exit ;
29931: GO 29946
// DestroyUnit ( tmp [ 1 ] ) ;
29933: LD_VAR 0 1
29937: PUSH
29938: LD_INT 1
29940: ARRAY
29941: PPUSH
29942: CALL_OW 65
// end ;
29946: PPOPN 1
29948: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29949: LD_EXP 52
29953: PUSH
29954: LD_EXP 90
29958: AND
29959: IFFALSE 30088
29961: GO 29963
29963: DISABLE
29964: LD_INT 0
29966: PPUSH
// begin uc_side := 0 ;
29967: LD_ADDR_OWVAR 20
29971: PUSH
29972: LD_INT 0
29974: ST_TO_ADDR
// uc_nation := nation_arabian ;
29975: LD_ADDR_OWVAR 21
29979: PUSH
29980: LD_INT 2
29982: ST_TO_ADDR
// hc_gallery :=  ;
29983: LD_ADDR_OWVAR 33
29987: PUSH
29988: LD_STRING 
29990: ST_TO_ADDR
// hc_name :=  ;
29991: LD_ADDR_OWVAR 26
29995: PUSH
29996: LD_STRING 
29998: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29999: LD_INT 1
30001: PPUSH
30002: LD_INT 11
30004: PPUSH
30005: LD_INT 10
30007: PPUSH
30008: CALL_OW 380
// un := CreateHuman ;
30012: LD_ADDR_VAR 0 1
30016: PUSH
30017: CALL_OW 44
30021: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30022: LD_VAR 0 1
30026: PPUSH
30027: LD_INT 1
30029: PPUSH
30030: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30034: LD_INT 35
30036: PPUSH
30037: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30041: LD_VAR 0 1
30045: PPUSH
30046: LD_INT 22
30048: PUSH
30049: LD_OWVAR 2
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PPUSH
30058: CALL_OW 69
30062: PPUSH
30063: LD_VAR 0 1
30067: PPUSH
30068: CALL_OW 74
30072: PPUSH
30073: CALL_OW 115
// until IsDead ( un ) ;
30077: LD_VAR 0 1
30081: PPUSH
30082: CALL_OW 301
30086: IFFALSE 30034
// end ;
30088: PPOPN 1
30090: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30091: LD_EXP 52
30095: PUSH
30096: LD_EXP 92
30100: AND
30101: IFFALSE 30113
30103: GO 30105
30105: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30106: LD_STRING earthquake(getX(game), 0, 32)
30108: PPUSH
30109: CALL_OW 559
30113: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30114: LD_EXP 52
30118: PUSH
30119: LD_EXP 93
30123: AND
30124: IFFALSE 30215
30126: GO 30128
30128: DISABLE
30129: LD_INT 0
30131: PPUSH
// begin enable ;
30132: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30133: LD_ADDR_VAR 0 1
30137: PUSH
30138: LD_INT 22
30140: PUSH
30141: LD_OWVAR 2
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 21
30152: PUSH
30153: LD_INT 2
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 33
30162: PUSH
30163: LD_INT 3
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: LIST
30174: PPUSH
30175: CALL_OW 69
30179: ST_TO_ADDR
// if not tmp then
30180: LD_VAR 0 1
30184: NOT
30185: IFFALSE 30189
// exit ;
30187: GO 30215
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30189: LD_VAR 0 1
30193: PUSH
30194: LD_INT 1
30196: PPUSH
30197: LD_VAR 0 1
30201: PPUSH
30202: CALL_OW 12
30206: ARRAY
30207: PPUSH
30208: LD_INT 1
30210: PPUSH
30211: CALL_OW 234
// end ;
30215: PPOPN 1
30217: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30218: LD_EXP 52
30222: PUSH
30223: LD_EXP 94
30227: AND
30228: IFFALSE 30369
30230: GO 30232
30232: DISABLE
30233: LD_INT 0
30235: PPUSH
30236: PPUSH
30237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30238: LD_ADDR_VAR 0 3
30242: PUSH
30243: LD_INT 22
30245: PUSH
30246: LD_OWVAR 2
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 25
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PPUSH
30269: CALL_OW 69
30273: ST_TO_ADDR
// if not tmp then
30274: LD_VAR 0 3
30278: NOT
30279: IFFALSE 30283
// exit ;
30281: GO 30369
// un := tmp [ rand ( 1 , tmp ) ] ;
30283: LD_ADDR_VAR 0 2
30287: PUSH
30288: LD_VAR 0 3
30292: PUSH
30293: LD_INT 1
30295: PPUSH
30296: LD_VAR 0 3
30300: PPUSH
30301: CALL_OW 12
30305: ARRAY
30306: ST_TO_ADDR
// if Crawls ( un ) then
30307: LD_VAR 0 2
30311: PPUSH
30312: CALL_OW 318
30316: IFFALSE 30327
// ComWalk ( un ) ;
30318: LD_VAR 0 2
30322: PPUSH
30323: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30327: LD_VAR 0 2
30331: PPUSH
30332: LD_INT 9
30334: PPUSH
30335: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30339: LD_INT 28
30341: PPUSH
30342: LD_OWVAR 2
30346: PPUSH
30347: LD_INT 2
30349: PPUSH
30350: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30354: LD_INT 29
30356: PPUSH
30357: LD_OWVAR 2
30361: PPUSH
30362: LD_INT 2
30364: PPUSH
30365: CALL_OW 322
// end ;
30369: PPOPN 3
30371: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30372: LD_EXP 52
30376: PUSH
30377: LD_EXP 95
30381: AND
30382: IFFALSE 30493
30384: GO 30386
30386: DISABLE
30387: LD_INT 0
30389: PPUSH
30390: PPUSH
30391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30392: LD_ADDR_VAR 0 3
30396: PUSH
30397: LD_INT 22
30399: PUSH
30400: LD_OWVAR 2
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 25
30411: PUSH
30412: LD_INT 1
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PPUSH
30423: CALL_OW 69
30427: ST_TO_ADDR
// if not tmp then
30428: LD_VAR 0 3
30432: NOT
30433: IFFALSE 30437
// exit ;
30435: GO 30493
// un := tmp [ rand ( 1 , tmp ) ] ;
30437: LD_ADDR_VAR 0 2
30441: PUSH
30442: LD_VAR 0 3
30446: PUSH
30447: LD_INT 1
30449: PPUSH
30450: LD_VAR 0 3
30454: PPUSH
30455: CALL_OW 12
30459: ARRAY
30460: ST_TO_ADDR
// if Crawls ( un ) then
30461: LD_VAR 0 2
30465: PPUSH
30466: CALL_OW 318
30470: IFFALSE 30481
// ComWalk ( un ) ;
30472: LD_VAR 0 2
30476: PPUSH
30477: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30481: LD_VAR 0 2
30485: PPUSH
30486: LD_INT 8
30488: PPUSH
30489: CALL_OW 336
// end ;
30493: PPOPN 3
30495: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30496: LD_EXP 52
30500: PUSH
30501: LD_EXP 96
30505: AND
30506: IFFALSE 30650
30508: GO 30510
30510: DISABLE
30511: LD_INT 0
30513: PPUSH
30514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30515: LD_ADDR_VAR 0 2
30519: PUSH
30520: LD_INT 22
30522: PUSH
30523: LD_OWVAR 2
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 21
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 2
30544: PUSH
30545: LD_INT 34
30547: PUSH
30548: LD_INT 12
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 34
30557: PUSH
30558: LD_INT 51
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 34
30567: PUSH
30568: LD_INT 32
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: PPUSH
30586: CALL_OW 69
30590: ST_TO_ADDR
// if not tmp then
30591: LD_VAR 0 2
30595: NOT
30596: IFFALSE 30600
// exit ;
30598: GO 30650
// for i in tmp do
30600: LD_ADDR_VAR 0 1
30604: PUSH
30605: LD_VAR 0 2
30609: PUSH
30610: FOR_IN
30611: IFFALSE 30648
// if GetCargo ( i , mat_artifact ) = 0 then
30613: LD_VAR 0 1
30617: PPUSH
30618: LD_INT 4
30620: PPUSH
30621: CALL_OW 289
30625: PUSH
30626: LD_INT 0
30628: EQUAL
30629: IFFALSE 30646
// SetCargo ( i , mat_siberit , 100 ) ;
30631: LD_VAR 0 1
30635: PPUSH
30636: LD_INT 3
30638: PPUSH
30639: LD_INT 100
30641: PPUSH
30642: CALL_OW 290
30646: GO 30610
30648: POP
30649: POP
// end ;
30650: PPOPN 2
30652: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30653: LD_EXP 52
30657: PUSH
30658: LD_EXP 97
30662: AND
30663: IFFALSE 30846
30665: GO 30667
30667: DISABLE
30668: LD_INT 0
30670: PPUSH
30671: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30672: LD_ADDR_VAR 0 2
30676: PUSH
30677: LD_INT 22
30679: PUSH
30680: LD_OWVAR 2
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PPUSH
30689: CALL_OW 69
30693: ST_TO_ADDR
// if not tmp then
30694: LD_VAR 0 2
30698: NOT
30699: IFFALSE 30703
// exit ;
30701: GO 30846
// for i := 1 to 2 do
30703: LD_ADDR_VAR 0 1
30707: PUSH
30708: DOUBLE
30709: LD_INT 1
30711: DEC
30712: ST_TO_ADDR
30713: LD_INT 2
30715: PUSH
30716: FOR_TO
30717: IFFALSE 30844
// begin uc_side := your_side ;
30719: LD_ADDR_OWVAR 20
30723: PUSH
30724: LD_OWVAR 2
30728: ST_TO_ADDR
// uc_nation := nation_american ;
30729: LD_ADDR_OWVAR 21
30733: PUSH
30734: LD_INT 1
30736: ST_TO_ADDR
// vc_chassis := us_morphling ;
30737: LD_ADDR_OWVAR 37
30741: PUSH
30742: LD_INT 5
30744: ST_TO_ADDR
// vc_engine := engine_siberite ;
30745: LD_ADDR_OWVAR 39
30749: PUSH
30750: LD_INT 3
30752: ST_TO_ADDR
// vc_control := control_computer ;
30753: LD_ADDR_OWVAR 38
30757: PUSH
30758: LD_INT 3
30760: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30761: LD_ADDR_OWVAR 40
30765: PUSH
30766: LD_INT 10
30768: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30769: LD_VAR 0 2
30773: PUSH
30774: LD_INT 1
30776: ARRAY
30777: PPUSH
30778: CALL_OW 310
30782: NOT
30783: IFFALSE 30830
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30785: CALL_OW 45
30789: PPUSH
30790: LD_VAR 0 2
30794: PUSH
30795: LD_INT 1
30797: ARRAY
30798: PPUSH
30799: CALL_OW 250
30803: PPUSH
30804: LD_VAR 0 2
30808: PUSH
30809: LD_INT 1
30811: ARRAY
30812: PPUSH
30813: CALL_OW 251
30817: PPUSH
30818: LD_INT 12
30820: PPUSH
30821: LD_INT 1
30823: PPUSH
30824: CALL_OW 50
30828: GO 30842
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30830: CALL_OW 45
30834: PPUSH
30835: LD_INT 1
30837: PPUSH
30838: CALL_OW 51
// end ;
30842: GO 30716
30844: POP
30845: POP
// end ;
30846: PPOPN 2
30848: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30849: LD_EXP 52
30853: PUSH
30854: LD_EXP 98
30858: AND
30859: IFFALSE 31081
30861: GO 30863
30863: DISABLE
30864: LD_INT 0
30866: PPUSH
30867: PPUSH
30868: PPUSH
30869: PPUSH
30870: PPUSH
30871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30872: LD_ADDR_VAR 0 6
30876: PUSH
30877: LD_INT 22
30879: PUSH
30880: LD_OWVAR 2
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 21
30891: PUSH
30892: LD_INT 1
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 3
30901: PUSH
30902: LD_INT 23
30904: PUSH
30905: LD_INT 0
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: LIST
30920: PPUSH
30921: CALL_OW 69
30925: ST_TO_ADDR
// if not tmp then
30926: LD_VAR 0 6
30930: NOT
30931: IFFALSE 30935
// exit ;
30933: GO 31081
// s1 := rand ( 1 , 4 ) ;
30935: LD_ADDR_VAR 0 2
30939: PUSH
30940: LD_INT 1
30942: PPUSH
30943: LD_INT 4
30945: PPUSH
30946: CALL_OW 12
30950: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30951: LD_ADDR_VAR 0 4
30955: PUSH
30956: LD_VAR 0 6
30960: PUSH
30961: LD_INT 1
30963: ARRAY
30964: PPUSH
30965: LD_VAR 0 2
30969: PPUSH
30970: CALL_OW 259
30974: ST_TO_ADDR
// if s1 = 1 then
30975: LD_VAR 0 2
30979: PUSH
30980: LD_INT 1
30982: EQUAL
30983: IFFALSE 31003
// s2 := rand ( 2 , 4 ) else
30985: LD_ADDR_VAR 0 3
30989: PUSH
30990: LD_INT 2
30992: PPUSH
30993: LD_INT 4
30995: PPUSH
30996: CALL_OW 12
31000: ST_TO_ADDR
31001: GO 31011
// s2 := 1 ;
31003: LD_ADDR_VAR 0 3
31007: PUSH
31008: LD_INT 1
31010: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31011: LD_ADDR_VAR 0 5
31015: PUSH
31016: LD_VAR 0 6
31020: PUSH
31021: LD_INT 1
31023: ARRAY
31024: PPUSH
31025: LD_VAR 0 3
31029: PPUSH
31030: CALL_OW 259
31034: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31035: LD_VAR 0 6
31039: PUSH
31040: LD_INT 1
31042: ARRAY
31043: PPUSH
31044: LD_VAR 0 2
31048: PPUSH
31049: LD_VAR 0 5
31053: PPUSH
31054: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31058: LD_VAR 0 6
31062: PUSH
31063: LD_INT 1
31065: ARRAY
31066: PPUSH
31067: LD_VAR 0 3
31071: PPUSH
31072: LD_VAR 0 4
31076: PPUSH
31077: CALL_OW 237
// end ;
31081: PPOPN 6
31083: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31084: LD_EXP 52
31088: PUSH
31089: LD_EXP 99
31093: AND
31094: IFFALSE 31173
31096: GO 31098
31098: DISABLE
31099: LD_INT 0
31101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31102: LD_ADDR_VAR 0 1
31106: PUSH
31107: LD_INT 22
31109: PUSH
31110: LD_OWVAR 2
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 30
31121: PUSH
31122: LD_INT 3
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PPUSH
31133: CALL_OW 69
31137: ST_TO_ADDR
// if not tmp then
31138: LD_VAR 0 1
31142: NOT
31143: IFFALSE 31147
// exit ;
31145: GO 31173
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31147: LD_VAR 0 1
31151: PUSH
31152: LD_INT 1
31154: PPUSH
31155: LD_VAR 0 1
31159: PPUSH
31160: CALL_OW 12
31164: ARRAY
31165: PPUSH
31166: LD_INT 1
31168: PPUSH
31169: CALL_OW 234
// end ;
31173: PPOPN 1
31175: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31176: LD_EXP 52
31180: PUSH
31181: LD_EXP 100
31185: AND
31186: IFFALSE 31298
31188: GO 31190
31190: DISABLE
31191: LD_INT 0
31193: PPUSH
31194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31195: LD_ADDR_VAR 0 2
31199: PUSH
31200: LD_INT 22
31202: PUSH
31203: LD_OWVAR 2
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 2
31214: PUSH
31215: LD_INT 30
31217: PUSH
31218: LD_INT 27
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 30
31227: PUSH
31228: LD_INT 26
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 30
31237: PUSH
31238: LD_INT 28
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PPUSH
31255: CALL_OW 69
31259: ST_TO_ADDR
// if not tmp then
31260: LD_VAR 0 2
31264: NOT
31265: IFFALSE 31269
// exit ;
31267: GO 31298
// for i in tmp do
31269: LD_ADDR_VAR 0 1
31273: PUSH
31274: LD_VAR 0 2
31278: PUSH
31279: FOR_IN
31280: IFFALSE 31296
// SetLives ( i , 1 ) ;
31282: LD_VAR 0 1
31286: PPUSH
31287: LD_INT 1
31289: PPUSH
31290: CALL_OW 234
31294: GO 31279
31296: POP
31297: POP
// end ;
31298: PPOPN 2
31300: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31301: LD_EXP 52
31305: PUSH
31306: LD_EXP 101
31310: AND
31311: IFFALSE 31598
31313: GO 31315
31315: DISABLE
31316: LD_INT 0
31318: PPUSH
31319: PPUSH
31320: PPUSH
// begin i := rand ( 1 , 7 ) ;
31321: LD_ADDR_VAR 0 1
31325: PUSH
31326: LD_INT 1
31328: PPUSH
31329: LD_INT 7
31331: PPUSH
31332: CALL_OW 12
31336: ST_TO_ADDR
// case i of 1 :
31337: LD_VAR 0 1
31341: PUSH
31342: LD_INT 1
31344: DOUBLE
31345: EQUAL
31346: IFTRUE 31350
31348: GO 31360
31350: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31351: LD_STRING earthquake(getX(game), 0, 32)
31353: PPUSH
31354: CALL_OW 559
31358: GO 31598
31360: LD_INT 2
31362: DOUBLE
31363: EQUAL
31364: IFTRUE 31368
31366: GO 31382
31368: POP
// begin ToLua ( displayStucuk(); ) ;
31369: LD_STRING displayStucuk();
31371: PPUSH
31372: CALL_OW 559
// ResetFog ;
31376: CALL_OW 335
// end ; 3 :
31380: GO 31598
31382: LD_INT 3
31384: DOUBLE
31385: EQUAL
31386: IFTRUE 31390
31388: GO 31494
31390: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31391: LD_ADDR_VAR 0 2
31395: PUSH
31396: LD_INT 22
31398: PUSH
31399: LD_OWVAR 2
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 25
31410: PUSH
31411: LD_INT 1
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PPUSH
31422: CALL_OW 69
31426: ST_TO_ADDR
// if not tmp then
31427: LD_VAR 0 2
31431: NOT
31432: IFFALSE 31436
// exit ;
31434: GO 31598
// un := tmp [ rand ( 1 , tmp ) ] ;
31436: LD_ADDR_VAR 0 3
31440: PUSH
31441: LD_VAR 0 2
31445: PUSH
31446: LD_INT 1
31448: PPUSH
31449: LD_VAR 0 2
31453: PPUSH
31454: CALL_OW 12
31458: ARRAY
31459: ST_TO_ADDR
// if Crawls ( un ) then
31460: LD_VAR 0 3
31464: PPUSH
31465: CALL_OW 318
31469: IFFALSE 31480
// ComWalk ( un ) ;
31471: LD_VAR 0 3
31475: PPUSH
31476: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31480: LD_VAR 0 3
31484: PPUSH
31485: LD_INT 8
31487: PPUSH
31488: CALL_OW 336
// end ; 4 :
31492: GO 31598
31494: LD_INT 4
31496: DOUBLE
31497: EQUAL
31498: IFTRUE 31502
31500: GO 31576
31502: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31503: LD_ADDR_VAR 0 2
31507: PUSH
31508: LD_INT 22
31510: PUSH
31511: LD_OWVAR 2
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 30
31522: PUSH
31523: LD_INT 29
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PPUSH
31534: CALL_OW 69
31538: ST_TO_ADDR
// if not tmp then
31539: LD_VAR 0 2
31543: NOT
31544: IFFALSE 31548
// exit ;
31546: GO 31598
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31548: LD_VAR 0 2
31552: PUSH
31553: LD_INT 1
31555: ARRAY
31556: PPUSH
31557: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31561: LD_VAR 0 2
31565: PUSH
31566: LD_INT 1
31568: ARRAY
31569: PPUSH
31570: CALL_OW 65
// end ; 5 .. 7 :
31574: GO 31598
31576: LD_INT 5
31578: DOUBLE
31579: GREATEREQUAL
31580: IFFALSE 31588
31582: LD_INT 7
31584: DOUBLE
31585: LESSEQUAL
31586: IFTRUE 31590
31588: GO 31597
31590: POP
// StreamSibBomb ; end ;
31591: CALL 27835 0 0
31595: GO 31598
31597: POP
// end ;
31598: PPOPN 3
31600: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31601: LD_EXP 52
31605: PUSH
31606: LD_EXP 102
31610: AND
31611: IFFALSE 31767
31613: GO 31615
31615: DISABLE
31616: LD_INT 0
31618: PPUSH
31619: PPUSH
31620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31621: LD_ADDR_VAR 0 2
31625: PUSH
31626: LD_INT 81
31628: PUSH
31629: LD_OWVAR 2
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 2
31640: PUSH
31641: LD_INT 21
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 21
31653: PUSH
31654: LD_INT 2
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: LIST
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PPUSH
31670: CALL_OW 69
31674: ST_TO_ADDR
// if not tmp then
31675: LD_VAR 0 2
31679: NOT
31680: IFFALSE 31684
// exit ;
31682: GO 31767
// p := 0 ;
31684: LD_ADDR_VAR 0 3
31688: PUSH
31689: LD_INT 0
31691: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31692: LD_INT 35
31694: PPUSH
31695: CALL_OW 67
// p := p + 1 ;
31699: LD_ADDR_VAR 0 3
31703: PUSH
31704: LD_VAR 0 3
31708: PUSH
31709: LD_INT 1
31711: PLUS
31712: ST_TO_ADDR
// for i in tmp do
31713: LD_ADDR_VAR 0 1
31717: PUSH
31718: LD_VAR 0 2
31722: PUSH
31723: FOR_IN
31724: IFFALSE 31755
// if GetLives ( i ) < 1000 then
31726: LD_VAR 0 1
31730: PPUSH
31731: CALL_OW 256
31735: PUSH
31736: LD_INT 1000
31738: LESS
31739: IFFALSE 31753
// SetLives ( i , 1000 ) ;
31741: LD_VAR 0 1
31745: PPUSH
31746: LD_INT 1000
31748: PPUSH
31749: CALL_OW 234
31753: GO 31723
31755: POP
31756: POP
// until p > 20 ;
31757: LD_VAR 0 3
31761: PUSH
31762: LD_INT 20
31764: GREATER
31765: IFFALSE 31692
// end ;
31767: PPOPN 3
31769: END
// every 0 0$1 trigger StreamModeActive and sTime do
31770: LD_EXP 52
31774: PUSH
31775: LD_EXP 103
31779: AND
31780: IFFALSE 31815
31782: GO 31784
31784: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31785: LD_INT 28
31787: PPUSH
31788: LD_OWVAR 2
31792: PPUSH
31793: LD_INT 2
31795: PPUSH
31796: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31800: LD_INT 30
31802: PPUSH
31803: LD_OWVAR 2
31807: PPUSH
31808: LD_INT 2
31810: PPUSH
31811: CALL_OW 322
// end ;
31815: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31816: LD_EXP 52
31820: PUSH
31821: LD_EXP 104
31825: AND
31826: IFFALSE 31947
31828: GO 31830
31830: DISABLE
31831: LD_INT 0
31833: PPUSH
31834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31835: LD_ADDR_VAR 0 2
31839: PUSH
31840: LD_INT 22
31842: PUSH
31843: LD_OWVAR 2
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 21
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 3
31864: PUSH
31865: LD_INT 23
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: LIST
31883: PPUSH
31884: CALL_OW 69
31888: ST_TO_ADDR
// if not tmp then
31889: LD_VAR 0 2
31893: NOT
31894: IFFALSE 31898
// exit ;
31896: GO 31947
// for i in tmp do
31898: LD_ADDR_VAR 0 1
31902: PUSH
31903: LD_VAR 0 2
31907: PUSH
31908: FOR_IN
31909: IFFALSE 31945
// begin if Crawls ( i ) then
31911: LD_VAR 0 1
31915: PPUSH
31916: CALL_OW 318
31920: IFFALSE 31931
// ComWalk ( i ) ;
31922: LD_VAR 0 1
31926: PPUSH
31927: CALL_OW 138
// SetClass ( i , 2 ) ;
31931: LD_VAR 0 1
31935: PPUSH
31936: LD_INT 2
31938: PPUSH
31939: CALL_OW 336
// end ;
31943: GO 31908
31945: POP
31946: POP
// end ;
31947: PPOPN 2
31949: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31950: LD_EXP 52
31954: PUSH
31955: LD_EXP 105
31959: AND
31960: IFFALSE 32248
31962: GO 31964
31964: DISABLE
31965: LD_INT 0
31967: PPUSH
31968: PPUSH
31969: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31970: LD_OWVAR 2
31974: PPUSH
31975: LD_INT 9
31977: PPUSH
31978: LD_INT 1
31980: PPUSH
31981: LD_INT 1
31983: PPUSH
31984: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31988: LD_INT 9
31990: PPUSH
31991: LD_OWVAR 2
31995: PPUSH
31996: CALL_OW 343
// uc_side := 9 ;
32000: LD_ADDR_OWVAR 20
32004: PUSH
32005: LD_INT 9
32007: ST_TO_ADDR
// uc_nation := 2 ;
32008: LD_ADDR_OWVAR 21
32012: PUSH
32013: LD_INT 2
32015: ST_TO_ADDR
// hc_name := Dark Warrior ;
32016: LD_ADDR_OWVAR 26
32020: PUSH
32021: LD_STRING Dark Warrior
32023: ST_TO_ADDR
// hc_gallery :=  ;
32024: LD_ADDR_OWVAR 33
32028: PUSH
32029: LD_STRING 
32031: ST_TO_ADDR
// hc_noskilllimit := true ;
32032: LD_ADDR_OWVAR 76
32036: PUSH
32037: LD_INT 1
32039: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32040: LD_ADDR_OWVAR 31
32044: PUSH
32045: LD_INT 30
32047: PUSH
32048: LD_INT 30
32050: PUSH
32051: LD_INT 30
32053: PUSH
32054: LD_INT 30
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: ST_TO_ADDR
// un := CreateHuman ;
32063: LD_ADDR_VAR 0 3
32067: PUSH
32068: CALL_OW 44
32072: ST_TO_ADDR
// hc_noskilllimit := false ;
32073: LD_ADDR_OWVAR 76
32077: PUSH
32078: LD_INT 0
32080: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32081: LD_VAR 0 3
32085: PPUSH
32086: LD_INT 1
32088: PPUSH
32089: CALL_OW 51
// ToLua ( playRanger() ) ;
32093: LD_STRING playRanger()
32095: PPUSH
32096: CALL_OW 559
// p := 0 ;
32100: LD_ADDR_VAR 0 2
32104: PUSH
32105: LD_INT 0
32107: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32108: LD_INT 35
32110: PPUSH
32111: CALL_OW 67
// p := p + 1 ;
32115: LD_ADDR_VAR 0 2
32119: PUSH
32120: LD_VAR 0 2
32124: PUSH
32125: LD_INT 1
32127: PLUS
32128: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32129: LD_VAR 0 3
32133: PPUSH
32134: CALL_OW 256
32138: PUSH
32139: LD_INT 1000
32141: LESS
32142: IFFALSE 32156
// SetLives ( un , 1000 ) ;
32144: LD_VAR 0 3
32148: PPUSH
32149: LD_INT 1000
32151: PPUSH
32152: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32156: LD_VAR 0 3
32160: PPUSH
32161: LD_INT 81
32163: PUSH
32164: LD_OWVAR 2
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 91
32175: PUSH
32176: LD_VAR 0 3
32180: PUSH
32181: LD_INT 30
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: LIST
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PPUSH
32193: CALL_OW 69
32197: PPUSH
32198: LD_VAR 0 3
32202: PPUSH
32203: CALL_OW 74
32207: PPUSH
32208: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32212: LD_VAR 0 2
32216: PUSH
32217: LD_INT 80
32219: GREATER
32220: PUSH
32221: LD_VAR 0 3
32225: PPUSH
32226: CALL_OW 301
32230: OR
32231: IFFALSE 32108
// if un then
32233: LD_VAR 0 3
32237: IFFALSE 32248
// RemoveUnit ( un ) ;
32239: LD_VAR 0 3
32243: PPUSH
32244: CALL_OW 64
// end ;
32248: PPOPN 3
32250: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32251: LD_EXP 106
32255: IFFALSE 32371
32257: GO 32259
32259: DISABLE
32260: LD_INT 0
32262: PPUSH
32263: PPUSH
32264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32265: LD_ADDR_VAR 0 2
32269: PUSH
32270: LD_INT 81
32272: PUSH
32273: LD_OWVAR 2
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 21
32284: PUSH
32285: LD_INT 1
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PPUSH
32296: CALL_OW 69
32300: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32301: LD_STRING playComputer()
32303: PPUSH
32304: CALL_OW 559
// if not tmp then
32308: LD_VAR 0 2
32312: NOT
32313: IFFALSE 32317
// exit ;
32315: GO 32371
// for i in tmp do
32317: LD_ADDR_VAR 0 1
32321: PUSH
32322: LD_VAR 0 2
32326: PUSH
32327: FOR_IN
32328: IFFALSE 32369
// for j := 1 to 4 do
32330: LD_ADDR_VAR 0 3
32334: PUSH
32335: DOUBLE
32336: LD_INT 1
32338: DEC
32339: ST_TO_ADDR
32340: LD_INT 4
32342: PUSH
32343: FOR_TO
32344: IFFALSE 32365
// SetSkill ( i , j , 10 ) ;
32346: LD_VAR 0 1
32350: PPUSH
32351: LD_VAR 0 3
32355: PPUSH
32356: LD_INT 10
32358: PPUSH
32359: CALL_OW 237
32363: GO 32343
32365: POP
32366: POP
32367: GO 32327
32369: POP
32370: POP
// end ;
32371: PPOPN 3
32373: END
// every 0 0$1 trigger s30 do var i , tmp ;
32374: LD_EXP 107
32378: IFFALSE 32447
32380: GO 32382
32382: DISABLE
32383: LD_INT 0
32385: PPUSH
32386: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32387: LD_ADDR_VAR 0 2
32391: PUSH
32392: LD_INT 22
32394: PUSH
32395: LD_OWVAR 2
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PPUSH
32404: CALL_OW 69
32408: ST_TO_ADDR
// if not tmp then
32409: LD_VAR 0 2
32413: NOT
32414: IFFALSE 32418
// exit ;
32416: GO 32447
// for i in tmp do
32418: LD_ADDR_VAR 0 1
32422: PUSH
32423: LD_VAR 0 2
32427: PUSH
32428: FOR_IN
32429: IFFALSE 32445
// SetLives ( i , 300 ) ;
32431: LD_VAR 0 1
32435: PPUSH
32436: LD_INT 300
32438: PPUSH
32439: CALL_OW 234
32443: GO 32428
32445: POP
32446: POP
// end ;
32447: PPOPN 2
32449: END
// every 0 0$1 trigger s60 do var i , tmp ;
32450: LD_EXP 108
32454: IFFALSE 32523
32456: GO 32458
32458: DISABLE
32459: LD_INT 0
32461: PPUSH
32462: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32463: LD_ADDR_VAR 0 2
32467: PUSH
32468: LD_INT 22
32470: PUSH
32471: LD_OWVAR 2
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PPUSH
32480: CALL_OW 69
32484: ST_TO_ADDR
// if not tmp then
32485: LD_VAR 0 2
32489: NOT
32490: IFFALSE 32494
// exit ;
32492: GO 32523
// for i in tmp do
32494: LD_ADDR_VAR 0 1
32498: PUSH
32499: LD_VAR 0 2
32503: PUSH
32504: FOR_IN
32505: IFFALSE 32521
// SetLives ( i , 600 ) ;
32507: LD_VAR 0 1
32511: PPUSH
32512: LD_INT 600
32514: PPUSH
32515: CALL_OW 234
32519: GO 32504
32521: POP
32522: POP
// end ;
32523: PPOPN 2
32525: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32526: LD_INT 0
32528: PPUSH
// case cmd of 301 :
32529: LD_VAR 0 1
32533: PUSH
32534: LD_INT 301
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32542
32540: GO 32574
32542: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32543: LD_VAR 0 6
32547: PPUSH
32548: LD_VAR 0 7
32552: PPUSH
32553: LD_VAR 0 8
32557: PPUSH
32558: LD_VAR 0 4
32562: PPUSH
32563: LD_VAR 0 5
32567: PPUSH
32568: CALL 33783 0 5
32572: GO 32695
32574: LD_INT 302
32576: DOUBLE
32577: EQUAL
32578: IFTRUE 32582
32580: GO 32619
32582: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32583: LD_VAR 0 6
32587: PPUSH
32588: LD_VAR 0 7
32592: PPUSH
32593: LD_VAR 0 8
32597: PPUSH
32598: LD_VAR 0 9
32602: PPUSH
32603: LD_VAR 0 4
32607: PPUSH
32608: LD_VAR 0 5
32612: PPUSH
32613: CALL 33874 0 6
32617: GO 32695
32619: LD_INT 303
32621: DOUBLE
32622: EQUAL
32623: IFTRUE 32627
32625: GO 32664
32627: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32628: LD_VAR 0 6
32632: PPUSH
32633: LD_VAR 0 7
32637: PPUSH
32638: LD_VAR 0 8
32642: PPUSH
32643: LD_VAR 0 9
32647: PPUSH
32648: LD_VAR 0 4
32652: PPUSH
32653: LD_VAR 0 5
32657: PPUSH
32658: CALL 32700 0 6
32662: GO 32695
32664: LD_INT 304
32666: DOUBLE
32667: EQUAL
32668: IFTRUE 32672
32670: GO 32694
32672: POP
// hHackTeleport ( unit , x , y ) ; end ;
32673: LD_VAR 0 2
32677: PPUSH
32678: LD_VAR 0 4
32682: PPUSH
32683: LD_VAR 0 5
32687: PPUSH
32688: CALL 34467 0 3
32692: GO 32695
32694: POP
// end ;
32695: LD_VAR 0 12
32699: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32700: LD_INT 0
32702: PPUSH
32703: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32704: LD_VAR 0 1
32708: PUSH
32709: LD_INT 1
32711: LESS
32712: PUSH
32713: LD_VAR 0 1
32717: PUSH
32718: LD_INT 3
32720: GREATER
32721: OR
32722: PUSH
32723: LD_VAR 0 5
32727: PPUSH
32728: LD_VAR 0 6
32732: PPUSH
32733: CALL_OW 428
32737: OR
32738: IFFALSE 32742
// exit ;
32740: GO 33470
// uc_side := your_side ;
32742: LD_ADDR_OWVAR 20
32746: PUSH
32747: LD_OWVAR 2
32751: ST_TO_ADDR
// uc_nation := nation ;
32752: LD_ADDR_OWVAR 21
32756: PUSH
32757: LD_VAR 0 1
32761: ST_TO_ADDR
// bc_level = 1 ;
32762: LD_ADDR_OWVAR 43
32766: PUSH
32767: LD_INT 1
32769: ST_TO_ADDR
// case btype of 1 :
32770: LD_VAR 0 2
32774: PUSH
32775: LD_INT 1
32777: DOUBLE
32778: EQUAL
32779: IFTRUE 32783
32781: GO 32794
32783: POP
// bc_type := b_depot ; 2 :
32784: LD_ADDR_OWVAR 42
32788: PUSH
32789: LD_INT 0
32791: ST_TO_ADDR
32792: GO 33414
32794: LD_INT 2
32796: DOUBLE
32797: EQUAL
32798: IFTRUE 32802
32800: GO 32813
32802: POP
// bc_type := b_warehouse ; 3 :
32803: LD_ADDR_OWVAR 42
32807: PUSH
32808: LD_INT 1
32810: ST_TO_ADDR
32811: GO 33414
32813: LD_INT 3
32815: DOUBLE
32816: EQUAL
32817: IFTRUE 32821
32819: GO 32832
32821: POP
// bc_type := b_lab ; 4 .. 9 :
32822: LD_ADDR_OWVAR 42
32826: PUSH
32827: LD_INT 6
32829: ST_TO_ADDR
32830: GO 33414
32832: LD_INT 4
32834: DOUBLE
32835: GREATEREQUAL
32836: IFFALSE 32844
32838: LD_INT 9
32840: DOUBLE
32841: LESSEQUAL
32842: IFTRUE 32846
32844: GO 32906
32846: POP
// begin bc_type := b_lab_half ;
32847: LD_ADDR_OWVAR 42
32851: PUSH
32852: LD_INT 7
32854: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32855: LD_ADDR_OWVAR 44
32859: PUSH
32860: LD_INT 10
32862: PUSH
32863: LD_INT 11
32865: PUSH
32866: LD_INT 12
32868: PUSH
32869: LD_INT 15
32871: PUSH
32872: LD_INT 14
32874: PUSH
32875: LD_INT 13
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: PUSH
32886: LD_VAR 0 2
32890: PUSH
32891: LD_INT 3
32893: MINUS
32894: ARRAY
32895: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32896: LD_ADDR_OWVAR 45
32900: PUSH
32901: LD_INT 9
32903: ST_TO_ADDR
// end ; 10 .. 13 :
32904: GO 33414
32906: LD_INT 10
32908: DOUBLE
32909: GREATEREQUAL
32910: IFFALSE 32918
32912: LD_INT 13
32914: DOUBLE
32915: LESSEQUAL
32916: IFTRUE 32920
32918: GO 32997
32920: POP
// begin bc_type := b_lab_full ;
32921: LD_ADDR_OWVAR 42
32925: PUSH
32926: LD_INT 8
32928: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32929: LD_ADDR_OWVAR 44
32933: PUSH
32934: LD_INT 10
32936: PUSH
32937: LD_INT 12
32939: PUSH
32940: LD_INT 14
32942: PUSH
32943: LD_INT 13
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: PUSH
32952: LD_VAR 0 2
32956: PUSH
32957: LD_INT 9
32959: MINUS
32960: ARRAY
32961: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32962: LD_ADDR_OWVAR 45
32966: PUSH
32967: LD_INT 11
32969: PUSH
32970: LD_INT 15
32972: PUSH
32973: LD_INT 12
32975: PUSH
32976: LD_INT 15
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: PUSH
32985: LD_VAR 0 2
32989: PUSH
32990: LD_INT 9
32992: MINUS
32993: ARRAY
32994: ST_TO_ADDR
// end ; 14 :
32995: GO 33414
32997: LD_INT 14
32999: DOUBLE
33000: EQUAL
33001: IFTRUE 33005
33003: GO 33016
33005: POP
// bc_type := b_workshop ; 15 :
33006: LD_ADDR_OWVAR 42
33010: PUSH
33011: LD_INT 2
33013: ST_TO_ADDR
33014: GO 33414
33016: LD_INT 15
33018: DOUBLE
33019: EQUAL
33020: IFTRUE 33024
33022: GO 33035
33024: POP
// bc_type := b_factory ; 16 :
33025: LD_ADDR_OWVAR 42
33029: PUSH
33030: LD_INT 3
33032: ST_TO_ADDR
33033: GO 33414
33035: LD_INT 16
33037: DOUBLE
33038: EQUAL
33039: IFTRUE 33043
33041: GO 33054
33043: POP
// bc_type := b_ext_gun ; 17 :
33044: LD_ADDR_OWVAR 42
33048: PUSH
33049: LD_INT 17
33051: ST_TO_ADDR
33052: GO 33414
33054: LD_INT 17
33056: DOUBLE
33057: EQUAL
33058: IFTRUE 33062
33060: GO 33090
33062: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33063: LD_ADDR_OWVAR 42
33067: PUSH
33068: LD_INT 19
33070: PUSH
33071: LD_INT 23
33073: PUSH
33074: LD_INT 19
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: LIST
33081: PUSH
33082: LD_VAR 0 1
33086: ARRAY
33087: ST_TO_ADDR
33088: GO 33414
33090: LD_INT 18
33092: DOUBLE
33093: EQUAL
33094: IFTRUE 33098
33096: GO 33109
33098: POP
// bc_type := b_ext_radar ; 19 :
33099: LD_ADDR_OWVAR 42
33103: PUSH
33104: LD_INT 20
33106: ST_TO_ADDR
33107: GO 33414
33109: LD_INT 19
33111: DOUBLE
33112: EQUAL
33113: IFTRUE 33117
33115: GO 33128
33117: POP
// bc_type := b_ext_radio ; 20 :
33118: LD_ADDR_OWVAR 42
33122: PUSH
33123: LD_INT 22
33125: ST_TO_ADDR
33126: GO 33414
33128: LD_INT 20
33130: DOUBLE
33131: EQUAL
33132: IFTRUE 33136
33134: GO 33147
33136: POP
// bc_type := b_ext_siberium ; 21 :
33137: LD_ADDR_OWVAR 42
33141: PUSH
33142: LD_INT 21
33144: ST_TO_ADDR
33145: GO 33414
33147: LD_INT 21
33149: DOUBLE
33150: EQUAL
33151: IFTRUE 33155
33153: GO 33166
33155: POP
// bc_type := b_ext_computer ; 22 :
33156: LD_ADDR_OWVAR 42
33160: PUSH
33161: LD_INT 24
33163: ST_TO_ADDR
33164: GO 33414
33166: LD_INT 22
33168: DOUBLE
33169: EQUAL
33170: IFTRUE 33174
33172: GO 33185
33174: POP
// bc_type := b_ext_track ; 23 :
33175: LD_ADDR_OWVAR 42
33179: PUSH
33180: LD_INT 16
33182: ST_TO_ADDR
33183: GO 33414
33185: LD_INT 23
33187: DOUBLE
33188: EQUAL
33189: IFTRUE 33193
33191: GO 33204
33193: POP
// bc_type := b_ext_laser ; 24 :
33194: LD_ADDR_OWVAR 42
33198: PUSH
33199: LD_INT 25
33201: ST_TO_ADDR
33202: GO 33414
33204: LD_INT 24
33206: DOUBLE
33207: EQUAL
33208: IFTRUE 33212
33210: GO 33223
33212: POP
// bc_type := b_control_tower ; 25 :
33213: LD_ADDR_OWVAR 42
33217: PUSH
33218: LD_INT 36
33220: ST_TO_ADDR
33221: GO 33414
33223: LD_INT 25
33225: DOUBLE
33226: EQUAL
33227: IFTRUE 33231
33229: GO 33242
33231: POP
// bc_type := b_breastwork ; 26 :
33232: LD_ADDR_OWVAR 42
33236: PUSH
33237: LD_INT 31
33239: ST_TO_ADDR
33240: GO 33414
33242: LD_INT 26
33244: DOUBLE
33245: EQUAL
33246: IFTRUE 33250
33248: GO 33261
33250: POP
// bc_type := b_bunker ; 27 :
33251: LD_ADDR_OWVAR 42
33255: PUSH
33256: LD_INT 32
33258: ST_TO_ADDR
33259: GO 33414
33261: LD_INT 27
33263: DOUBLE
33264: EQUAL
33265: IFTRUE 33269
33267: GO 33280
33269: POP
// bc_type := b_turret ; 28 :
33270: LD_ADDR_OWVAR 42
33274: PUSH
33275: LD_INT 33
33277: ST_TO_ADDR
33278: GO 33414
33280: LD_INT 28
33282: DOUBLE
33283: EQUAL
33284: IFTRUE 33288
33286: GO 33299
33288: POP
// bc_type := b_armoury ; 29 :
33289: LD_ADDR_OWVAR 42
33293: PUSH
33294: LD_INT 4
33296: ST_TO_ADDR
33297: GO 33414
33299: LD_INT 29
33301: DOUBLE
33302: EQUAL
33303: IFTRUE 33307
33305: GO 33318
33307: POP
// bc_type := b_barracks ; 30 :
33308: LD_ADDR_OWVAR 42
33312: PUSH
33313: LD_INT 5
33315: ST_TO_ADDR
33316: GO 33414
33318: LD_INT 30
33320: DOUBLE
33321: EQUAL
33322: IFTRUE 33326
33324: GO 33337
33326: POP
// bc_type := b_solar_power ; 31 :
33327: LD_ADDR_OWVAR 42
33331: PUSH
33332: LD_INT 27
33334: ST_TO_ADDR
33335: GO 33414
33337: LD_INT 31
33339: DOUBLE
33340: EQUAL
33341: IFTRUE 33345
33343: GO 33356
33345: POP
// bc_type := b_oil_power ; 32 :
33346: LD_ADDR_OWVAR 42
33350: PUSH
33351: LD_INT 26
33353: ST_TO_ADDR
33354: GO 33414
33356: LD_INT 32
33358: DOUBLE
33359: EQUAL
33360: IFTRUE 33364
33362: GO 33375
33364: POP
// bc_type := b_siberite_power ; 33 :
33365: LD_ADDR_OWVAR 42
33369: PUSH
33370: LD_INT 28
33372: ST_TO_ADDR
33373: GO 33414
33375: LD_INT 33
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33383
33381: GO 33394
33383: POP
// bc_type := b_oil_mine ; 34 :
33384: LD_ADDR_OWVAR 42
33388: PUSH
33389: LD_INT 29
33391: ST_TO_ADDR
33392: GO 33414
33394: LD_INT 34
33396: DOUBLE
33397: EQUAL
33398: IFTRUE 33402
33400: GO 33413
33402: POP
// bc_type := b_siberite_mine ; end ;
33403: LD_ADDR_OWVAR 42
33407: PUSH
33408: LD_INT 30
33410: ST_TO_ADDR
33411: GO 33414
33413: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33414: LD_ADDR_VAR 0 8
33418: PUSH
33419: LD_VAR 0 5
33423: PPUSH
33424: LD_VAR 0 6
33428: PPUSH
33429: LD_VAR 0 3
33433: PPUSH
33434: CALL_OW 47
33438: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33439: LD_OWVAR 42
33443: PUSH
33444: LD_INT 32
33446: PUSH
33447: LD_INT 33
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: IN
33454: IFFALSE 33470
// PlaceWeaponTurret ( b , weapon ) ;
33456: LD_VAR 0 8
33460: PPUSH
33461: LD_VAR 0 4
33465: PPUSH
33466: CALL_OW 431
// end ;
33470: LD_VAR 0 7
33474: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33475: LD_INT 0
33477: PPUSH
33478: PPUSH
33479: PPUSH
33480: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33481: LD_ADDR_VAR 0 4
33485: PUSH
33486: LD_INT 22
33488: PUSH
33489: LD_OWVAR 2
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 2
33500: PUSH
33501: LD_INT 30
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 30
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: LIST
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PPUSH
33530: CALL_OW 69
33534: ST_TO_ADDR
// if not tmp then
33535: LD_VAR 0 4
33539: NOT
33540: IFFALSE 33544
// exit ;
33542: GO 33603
// for i in tmp do
33544: LD_ADDR_VAR 0 2
33548: PUSH
33549: LD_VAR 0 4
33553: PUSH
33554: FOR_IN
33555: IFFALSE 33601
// for j = 1 to 3 do
33557: LD_ADDR_VAR 0 3
33561: PUSH
33562: DOUBLE
33563: LD_INT 1
33565: DEC
33566: ST_TO_ADDR
33567: LD_INT 3
33569: PUSH
33570: FOR_TO
33571: IFFALSE 33597
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33573: LD_VAR 0 2
33577: PPUSH
33578: CALL_OW 274
33582: PPUSH
33583: LD_VAR 0 3
33587: PPUSH
33588: LD_INT 99999
33590: PPUSH
33591: CALL_OW 277
33595: GO 33570
33597: POP
33598: POP
33599: GO 33554
33601: POP
33602: POP
// end ;
33603: LD_VAR 0 1
33607: RET
// export function hHackSetLevel10 ; var i , j ; begin
33608: LD_INT 0
33610: PPUSH
33611: PPUSH
33612: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33613: LD_ADDR_VAR 0 2
33617: PUSH
33618: LD_INT 21
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PPUSH
33628: CALL_OW 69
33632: PUSH
33633: FOR_IN
33634: IFFALSE 33686
// if IsSelected ( i ) then
33636: LD_VAR 0 2
33640: PPUSH
33641: CALL_OW 306
33645: IFFALSE 33684
// begin for j := 1 to 4 do
33647: LD_ADDR_VAR 0 3
33651: PUSH
33652: DOUBLE
33653: LD_INT 1
33655: DEC
33656: ST_TO_ADDR
33657: LD_INT 4
33659: PUSH
33660: FOR_TO
33661: IFFALSE 33682
// SetSkill ( i , j , 10 ) ;
33663: LD_VAR 0 2
33667: PPUSH
33668: LD_VAR 0 3
33672: PPUSH
33673: LD_INT 10
33675: PPUSH
33676: CALL_OW 237
33680: GO 33660
33682: POP
33683: POP
// end ;
33684: GO 33633
33686: POP
33687: POP
// end ;
33688: LD_VAR 0 1
33692: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33693: LD_INT 0
33695: PPUSH
33696: PPUSH
33697: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33698: LD_ADDR_VAR 0 2
33702: PUSH
33703: LD_INT 22
33705: PUSH
33706: LD_OWVAR 2
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 21
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PPUSH
33729: CALL_OW 69
33733: PUSH
33734: FOR_IN
33735: IFFALSE 33776
// begin for j := 1 to 4 do
33737: LD_ADDR_VAR 0 3
33741: PUSH
33742: DOUBLE
33743: LD_INT 1
33745: DEC
33746: ST_TO_ADDR
33747: LD_INT 4
33749: PUSH
33750: FOR_TO
33751: IFFALSE 33772
// SetSkill ( i , j , 10 ) ;
33753: LD_VAR 0 2
33757: PPUSH
33758: LD_VAR 0 3
33762: PPUSH
33763: LD_INT 10
33765: PPUSH
33766: CALL_OW 237
33770: GO 33750
33772: POP
33773: POP
// end ;
33774: GO 33734
33776: POP
33777: POP
// end ;
33778: LD_VAR 0 1
33782: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33783: LD_INT 0
33785: PPUSH
// uc_side := your_side ;
33786: LD_ADDR_OWVAR 20
33790: PUSH
33791: LD_OWVAR 2
33795: ST_TO_ADDR
// uc_nation := nation ;
33796: LD_ADDR_OWVAR 21
33800: PUSH
33801: LD_VAR 0 1
33805: ST_TO_ADDR
// InitHc ;
33806: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33810: LD_INT 0
33812: PPUSH
33813: LD_VAR 0 2
33817: PPUSH
33818: LD_VAR 0 3
33822: PPUSH
33823: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33827: LD_VAR 0 4
33831: PPUSH
33832: LD_VAR 0 5
33836: PPUSH
33837: CALL_OW 428
33841: PUSH
33842: LD_INT 0
33844: EQUAL
33845: IFFALSE 33869
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33847: CALL_OW 44
33851: PPUSH
33852: LD_VAR 0 4
33856: PPUSH
33857: LD_VAR 0 5
33861: PPUSH
33862: LD_INT 1
33864: PPUSH
33865: CALL_OW 48
// end ;
33869: LD_VAR 0 6
33873: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33874: LD_INT 0
33876: PPUSH
33877: PPUSH
// uc_side := your_side ;
33878: LD_ADDR_OWVAR 20
33882: PUSH
33883: LD_OWVAR 2
33887: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33888: LD_VAR 0 1
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: LD_INT 2
33898: PUSH
33899: LD_INT 3
33901: PUSH
33902: LD_INT 4
33904: PUSH
33905: LD_INT 5
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: IN
33915: IFFALSE 33927
// uc_nation := nation_american else
33917: LD_ADDR_OWVAR 21
33921: PUSH
33922: LD_INT 1
33924: ST_TO_ADDR
33925: GO 33970
// if chassis in [ 11 , 12 , 13 , 14 ] then
33927: LD_VAR 0 1
33931: PUSH
33932: LD_INT 11
33934: PUSH
33935: LD_INT 12
33937: PUSH
33938: LD_INT 13
33940: PUSH
33941: LD_INT 14
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: IN
33950: IFFALSE 33962
// uc_nation := nation_arabian else
33952: LD_ADDR_OWVAR 21
33956: PUSH
33957: LD_INT 2
33959: ST_TO_ADDR
33960: GO 33970
// uc_nation := nation_russian ;
33962: LD_ADDR_OWVAR 21
33966: PUSH
33967: LD_INT 3
33969: ST_TO_ADDR
// vc_chassis := chassis ;
33970: LD_ADDR_OWVAR 37
33974: PUSH
33975: LD_VAR 0 1
33979: ST_TO_ADDR
// vc_engine := engine ;
33980: LD_ADDR_OWVAR 39
33984: PUSH
33985: LD_VAR 0 2
33989: ST_TO_ADDR
// vc_control := control ;
33990: LD_ADDR_OWVAR 38
33994: PUSH
33995: LD_VAR 0 3
33999: ST_TO_ADDR
// vc_weapon := weapon ;
34000: LD_ADDR_OWVAR 40
34004: PUSH
34005: LD_VAR 0 4
34009: ST_TO_ADDR
// un := CreateVehicle ;
34010: LD_ADDR_VAR 0 8
34014: PUSH
34015: CALL_OW 45
34019: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34020: LD_VAR 0 8
34024: PPUSH
34025: LD_INT 0
34027: PPUSH
34028: LD_INT 5
34030: PPUSH
34031: CALL_OW 12
34035: PPUSH
34036: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34040: LD_VAR 0 8
34044: PPUSH
34045: LD_VAR 0 5
34049: PPUSH
34050: LD_VAR 0 6
34054: PPUSH
34055: LD_INT 1
34057: PPUSH
34058: CALL_OW 48
// end ;
34062: LD_VAR 0 7
34066: RET
// export hInvincible ; every 1 do
34067: GO 34069
34069: DISABLE
// hInvincible := [ ] ;
34070: LD_ADDR_EXP 109
34074: PUSH
34075: EMPTY
34076: ST_TO_ADDR
34077: END
// every 10 do var i ;
34078: GO 34080
34080: DISABLE
34081: LD_INT 0
34083: PPUSH
// begin enable ;
34084: ENABLE
// if not hInvincible then
34085: LD_EXP 109
34089: NOT
34090: IFFALSE 34094
// exit ;
34092: GO 34138
// for i in hInvincible do
34094: LD_ADDR_VAR 0 1
34098: PUSH
34099: LD_EXP 109
34103: PUSH
34104: FOR_IN
34105: IFFALSE 34136
// if GetLives ( i ) < 1000 then
34107: LD_VAR 0 1
34111: PPUSH
34112: CALL_OW 256
34116: PUSH
34117: LD_INT 1000
34119: LESS
34120: IFFALSE 34134
// SetLives ( i , 1000 ) ;
34122: LD_VAR 0 1
34126: PPUSH
34127: LD_INT 1000
34129: PPUSH
34130: CALL_OW 234
34134: GO 34104
34136: POP
34137: POP
// end ;
34138: PPOPN 1
34140: END
// export function hHackInvincible ; var i ; begin
34141: LD_INT 0
34143: PPUSH
34144: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34145: LD_ADDR_VAR 0 2
34149: PUSH
34150: LD_INT 2
34152: PUSH
34153: LD_INT 21
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 21
34165: PUSH
34166: LD_INT 2
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: LIST
34177: PPUSH
34178: CALL_OW 69
34182: PUSH
34183: FOR_IN
34184: IFFALSE 34245
// if IsSelected ( i ) then
34186: LD_VAR 0 2
34190: PPUSH
34191: CALL_OW 306
34195: IFFALSE 34243
// begin if i in hInvincible then
34197: LD_VAR 0 2
34201: PUSH
34202: LD_EXP 109
34206: IN
34207: IFFALSE 34227
// hInvincible := hInvincible diff i else
34209: LD_ADDR_EXP 109
34213: PUSH
34214: LD_EXP 109
34218: PUSH
34219: LD_VAR 0 2
34223: DIFF
34224: ST_TO_ADDR
34225: GO 34243
// hInvincible := hInvincible union i ;
34227: LD_ADDR_EXP 109
34231: PUSH
34232: LD_EXP 109
34236: PUSH
34237: LD_VAR 0 2
34241: UNION
34242: ST_TO_ADDR
// end ;
34243: GO 34183
34245: POP
34246: POP
// end ;
34247: LD_VAR 0 1
34251: RET
// export function hHackInvisible ; var i , j ; begin
34252: LD_INT 0
34254: PPUSH
34255: PPUSH
34256: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34257: LD_ADDR_VAR 0 2
34261: PUSH
34262: LD_INT 21
34264: PUSH
34265: LD_INT 1
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PPUSH
34272: CALL_OW 69
34276: PUSH
34277: FOR_IN
34278: IFFALSE 34302
// if IsSelected ( i ) then
34280: LD_VAR 0 2
34284: PPUSH
34285: CALL_OW 306
34289: IFFALSE 34300
// ComForceInvisible ( i ) ;
34291: LD_VAR 0 2
34295: PPUSH
34296: CALL_OW 496
34300: GO 34277
34302: POP
34303: POP
// end ;
34304: LD_VAR 0 1
34308: RET
// export function hHackChangeYourSide ; begin
34309: LD_INT 0
34311: PPUSH
// if your_side = 8 then
34312: LD_OWVAR 2
34316: PUSH
34317: LD_INT 8
34319: EQUAL
34320: IFFALSE 34332
// your_side := 0 else
34322: LD_ADDR_OWVAR 2
34326: PUSH
34327: LD_INT 0
34329: ST_TO_ADDR
34330: GO 34346
// your_side := your_side + 1 ;
34332: LD_ADDR_OWVAR 2
34336: PUSH
34337: LD_OWVAR 2
34341: PUSH
34342: LD_INT 1
34344: PLUS
34345: ST_TO_ADDR
// end ;
34346: LD_VAR 0 1
34350: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34351: LD_INT 0
34353: PPUSH
34354: PPUSH
34355: PPUSH
// for i in all_units do
34356: LD_ADDR_VAR 0 2
34360: PUSH
34361: LD_OWVAR 3
34365: PUSH
34366: FOR_IN
34367: IFFALSE 34445
// if IsSelected ( i ) then
34369: LD_VAR 0 2
34373: PPUSH
34374: CALL_OW 306
34378: IFFALSE 34443
// begin j := GetSide ( i ) ;
34380: LD_ADDR_VAR 0 3
34384: PUSH
34385: LD_VAR 0 2
34389: PPUSH
34390: CALL_OW 255
34394: ST_TO_ADDR
// if j = 8 then
34395: LD_VAR 0 3
34399: PUSH
34400: LD_INT 8
34402: EQUAL
34403: IFFALSE 34415
// j := 0 else
34405: LD_ADDR_VAR 0 3
34409: PUSH
34410: LD_INT 0
34412: ST_TO_ADDR
34413: GO 34429
// j := j + 1 ;
34415: LD_ADDR_VAR 0 3
34419: PUSH
34420: LD_VAR 0 3
34424: PUSH
34425: LD_INT 1
34427: PLUS
34428: ST_TO_ADDR
// SetSide ( i , j ) ;
34429: LD_VAR 0 2
34433: PPUSH
34434: LD_VAR 0 3
34438: PPUSH
34439: CALL_OW 235
// end ;
34443: GO 34366
34445: POP
34446: POP
// end ;
34447: LD_VAR 0 1
34451: RET
// export function hHackFog ; begin
34452: LD_INT 0
34454: PPUSH
// FogOff ( true ) ;
34455: LD_INT 1
34457: PPUSH
34458: CALL_OW 344
// end ;
34462: LD_VAR 0 1
34466: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34467: LD_INT 0
34469: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34470: LD_VAR 0 1
34474: PPUSH
34475: LD_VAR 0 2
34479: PPUSH
34480: LD_VAR 0 3
34484: PPUSH
34485: LD_INT 1
34487: PPUSH
34488: LD_INT 1
34490: PPUSH
34491: CALL_OW 483
// CenterOnXY ( x , y ) ;
34495: LD_VAR 0 2
34499: PPUSH
34500: LD_VAR 0 3
34504: PPUSH
34505: CALL_OW 84
// end ;
34509: LD_VAR 0 4
34513: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34514: LD_INT 0
34516: PPUSH
34517: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34518: LD_VAR 0 1
34522: NOT
34523: PUSH
34524: LD_VAR 0 2
34528: PPUSH
34529: LD_VAR 0 3
34533: PPUSH
34534: CALL_OW 488
34538: NOT
34539: OR
34540: PUSH
34541: LD_VAR 0 1
34545: PPUSH
34546: CALL_OW 266
34550: PUSH
34551: LD_INT 3
34553: NONEQUAL
34554: PUSH
34555: LD_VAR 0 1
34559: PPUSH
34560: CALL_OW 247
34564: PUSH
34565: LD_INT 1
34567: EQUAL
34568: NOT
34569: AND
34570: OR
34571: IFFALSE 34575
// exit ;
34573: GO 34857
// if GetType ( factory ) = unit_human then
34575: LD_VAR 0 1
34579: PPUSH
34580: CALL_OW 247
34584: PUSH
34585: LD_INT 1
34587: EQUAL
34588: IFFALSE 34605
// factory := IsInUnit ( factory ) ;
34590: LD_ADDR_VAR 0 1
34594: PUSH
34595: LD_VAR 0 1
34599: PPUSH
34600: CALL_OW 310
34604: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34605: LD_VAR 0 1
34609: PPUSH
34610: CALL_OW 266
34614: PUSH
34615: LD_INT 3
34617: NONEQUAL
34618: IFFALSE 34622
// exit ;
34620: GO 34857
// for i := 1 to Count ( factoryWaypoints ) do
34622: LD_ADDR_VAR 0 5
34626: PUSH
34627: DOUBLE
34628: LD_INT 1
34630: DEC
34631: ST_TO_ADDR
34632: LD_EXP 110
34636: PPUSH
34637: CALL 43360 0 1
34641: PUSH
34642: FOR_TO
34643: IFFALSE 34805
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34645: LD_VAR 0 2
34649: PPUSH
34650: LD_VAR 0 3
34654: PPUSH
34655: CALL_OW 428
34659: PUSH
34660: LD_EXP 110
34664: PUSH
34665: LD_VAR 0 5
34669: ARRAY
34670: PUSH
34671: LD_INT 2
34673: ARRAY
34674: EQUAL
34675: IFFALSE 34707
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34677: LD_ADDR_EXP 110
34681: PUSH
34682: LD_EXP 110
34686: PPUSH
34687: LD_VAR 0 5
34691: PPUSH
34692: CALL_OW 3
34696: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34697: CALL 34862 0 0
// exit ;
34701: POP
34702: POP
34703: GO 34857
// end else
34705: GO 34803
// if factory = factoryWaypoints [ i ] [ 2 ] then
34707: LD_VAR 0 1
34711: PUSH
34712: LD_EXP 110
34716: PUSH
34717: LD_VAR 0 5
34721: ARRAY
34722: PUSH
34723: LD_INT 2
34725: ARRAY
34726: EQUAL
34727: IFFALSE 34803
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34729: LD_ADDR_EXP 110
34733: PUSH
34734: LD_EXP 110
34738: PPUSH
34739: LD_VAR 0 5
34743: PPUSH
34744: CALL_OW 3
34748: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34749: LD_ADDR_EXP 110
34753: PUSH
34754: LD_EXP 110
34758: PPUSH
34759: LD_VAR 0 1
34763: PPUSH
34764: CALL_OW 255
34768: PUSH
34769: LD_VAR 0 1
34773: PUSH
34774: LD_VAR 0 2
34778: PUSH
34779: LD_VAR 0 3
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: PPUSH
34790: CALL 78969 0 2
34794: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34795: CALL 34862 0 0
// exit ;
34799: POP
34800: POP
34801: GO 34857
// end ; end ;
34803: GO 34642
34805: POP
34806: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34807: LD_ADDR_EXP 110
34811: PUSH
34812: LD_EXP 110
34816: PPUSH
34817: LD_VAR 0 1
34821: PPUSH
34822: CALL_OW 255
34826: PUSH
34827: LD_VAR 0 1
34831: PUSH
34832: LD_VAR 0 2
34836: PUSH
34837: LD_VAR 0 3
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: PPUSH
34848: CALL 78969 0 2
34852: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34853: CALL 34862 0 0
// end ;
34857: LD_VAR 0 4
34861: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34862: LD_INT 0
34864: PPUSH
34865: PPUSH
34866: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34867: LD_STRING resetFactoryWaypoint();
34869: PPUSH
34870: CALL_OW 559
// if factoryWaypoints then
34874: LD_EXP 110
34878: IFFALSE 34999
// begin list := factoryWaypoints ;
34880: LD_ADDR_VAR 0 3
34884: PUSH
34885: LD_EXP 110
34889: ST_TO_ADDR
// for i := 1 to list do
34890: LD_ADDR_VAR 0 2
34894: PUSH
34895: DOUBLE
34896: LD_INT 1
34898: DEC
34899: ST_TO_ADDR
34900: LD_VAR 0 3
34904: PUSH
34905: FOR_TO
34906: IFFALSE 34997
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34908: LD_STRING setFactoryWaypointXY(
34910: PUSH
34911: LD_VAR 0 3
34915: PUSH
34916: LD_VAR 0 2
34920: ARRAY
34921: PUSH
34922: LD_INT 1
34924: ARRAY
34925: STR
34926: PUSH
34927: LD_STRING ,
34929: STR
34930: PUSH
34931: LD_VAR 0 3
34935: PUSH
34936: LD_VAR 0 2
34940: ARRAY
34941: PUSH
34942: LD_INT 2
34944: ARRAY
34945: STR
34946: PUSH
34947: LD_STRING ,
34949: STR
34950: PUSH
34951: LD_VAR 0 3
34955: PUSH
34956: LD_VAR 0 2
34960: ARRAY
34961: PUSH
34962: LD_INT 3
34964: ARRAY
34965: STR
34966: PUSH
34967: LD_STRING ,
34969: STR
34970: PUSH
34971: LD_VAR 0 3
34975: PUSH
34976: LD_VAR 0 2
34980: ARRAY
34981: PUSH
34982: LD_INT 4
34984: ARRAY
34985: STR
34986: PUSH
34987: LD_STRING )
34989: STR
34990: PPUSH
34991: CALL_OW 559
34995: GO 34905
34997: POP
34998: POP
// end ; end ;
34999: LD_VAR 0 1
35003: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35004: LD_INT 0
35006: PPUSH
// if HexInfo ( x , y ) = warehouse then
35007: LD_VAR 0 2
35011: PPUSH
35012: LD_VAR 0 3
35016: PPUSH
35017: CALL_OW 428
35021: PUSH
35022: LD_VAR 0 1
35026: EQUAL
35027: IFFALSE 35054
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35029: LD_ADDR_EXP 111
35033: PUSH
35034: LD_EXP 111
35038: PPUSH
35039: LD_VAR 0 1
35043: PPUSH
35044: LD_INT 0
35046: PPUSH
35047: CALL_OW 1
35051: ST_TO_ADDR
35052: GO 35105
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35054: LD_ADDR_EXP 111
35058: PUSH
35059: LD_EXP 111
35063: PPUSH
35064: LD_VAR 0 1
35068: PPUSH
35069: LD_VAR 0 1
35073: PPUSH
35074: CALL_OW 255
35078: PUSH
35079: LD_VAR 0 1
35083: PUSH
35084: LD_VAR 0 2
35088: PUSH
35089: LD_VAR 0 3
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: PPUSH
35100: CALL_OW 1
35104: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35105: CALL 35114 0 0
// end ;
35109: LD_VAR 0 4
35113: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35114: LD_INT 0
35116: PPUSH
35117: PPUSH
35118: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35119: LD_STRING resetWarehouseGatheringPoints();
35121: PPUSH
35122: CALL_OW 559
// if warehouseGatheringPoints then
35126: LD_EXP 111
35130: IFFALSE 35256
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35132: LD_ADDR_VAR 0 3
35136: PUSH
35137: LD_EXP 111
35141: PPUSH
35142: CALL 82731 0 1
35146: ST_TO_ADDR
// for i := 1 to list do
35147: LD_ADDR_VAR 0 2
35151: PUSH
35152: DOUBLE
35153: LD_INT 1
35155: DEC
35156: ST_TO_ADDR
35157: LD_VAR 0 3
35161: PUSH
35162: FOR_TO
35163: IFFALSE 35254
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35165: LD_STRING setWarehouseGatheringPointXY(
35167: PUSH
35168: LD_VAR 0 3
35172: PUSH
35173: LD_VAR 0 2
35177: ARRAY
35178: PUSH
35179: LD_INT 1
35181: ARRAY
35182: STR
35183: PUSH
35184: LD_STRING ,
35186: STR
35187: PUSH
35188: LD_VAR 0 3
35192: PUSH
35193: LD_VAR 0 2
35197: ARRAY
35198: PUSH
35199: LD_INT 2
35201: ARRAY
35202: STR
35203: PUSH
35204: LD_STRING ,
35206: STR
35207: PUSH
35208: LD_VAR 0 3
35212: PUSH
35213: LD_VAR 0 2
35217: ARRAY
35218: PUSH
35219: LD_INT 3
35221: ARRAY
35222: STR
35223: PUSH
35224: LD_STRING ,
35226: STR
35227: PUSH
35228: LD_VAR 0 3
35232: PUSH
35233: LD_VAR 0 2
35237: ARRAY
35238: PUSH
35239: LD_INT 4
35241: ARRAY
35242: STR
35243: PUSH
35244: LD_STRING )
35246: STR
35247: PPUSH
35248: CALL_OW 559
35252: GO 35162
35254: POP
35255: POP
// end ; end ;
35256: LD_VAR 0 1
35260: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35261: LD_EXP 111
35265: IFFALSE 35950
35267: GO 35269
35269: DISABLE
35270: LD_INT 0
35272: PPUSH
35273: PPUSH
35274: PPUSH
35275: PPUSH
35276: PPUSH
35277: PPUSH
35278: PPUSH
35279: PPUSH
35280: PPUSH
// begin enable ;
35281: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35282: LD_ADDR_VAR 0 3
35286: PUSH
35287: LD_EXP 111
35291: PPUSH
35292: CALL 82731 0 1
35296: ST_TO_ADDR
// if not list then
35297: LD_VAR 0 3
35301: NOT
35302: IFFALSE 35306
// exit ;
35304: GO 35950
// for i := 1 to list do
35306: LD_ADDR_VAR 0 1
35310: PUSH
35311: DOUBLE
35312: LD_INT 1
35314: DEC
35315: ST_TO_ADDR
35316: LD_VAR 0 3
35320: PUSH
35321: FOR_TO
35322: IFFALSE 35948
// begin depot := list [ i ] [ 2 ] ;
35324: LD_ADDR_VAR 0 8
35328: PUSH
35329: LD_VAR 0 3
35333: PUSH
35334: LD_VAR 0 1
35338: ARRAY
35339: PUSH
35340: LD_INT 2
35342: ARRAY
35343: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35344: LD_ADDR_VAR 0 5
35348: PUSH
35349: LD_VAR 0 3
35353: PUSH
35354: LD_VAR 0 1
35358: ARRAY
35359: PUSH
35360: LD_INT 1
35362: ARRAY
35363: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35364: LD_VAR 0 8
35368: PPUSH
35369: CALL_OW 301
35373: PUSH
35374: LD_VAR 0 5
35378: PUSH
35379: LD_VAR 0 8
35383: PPUSH
35384: CALL_OW 255
35388: NONEQUAL
35389: OR
35390: IFFALSE 35419
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35392: LD_ADDR_EXP 111
35396: PUSH
35397: LD_EXP 111
35401: PPUSH
35402: LD_VAR 0 8
35406: PPUSH
35407: LD_INT 0
35409: PPUSH
35410: CALL_OW 1
35414: ST_TO_ADDR
// exit ;
35415: POP
35416: POP
35417: GO 35950
// end ; x := list [ i ] [ 3 ] ;
35419: LD_ADDR_VAR 0 6
35423: PUSH
35424: LD_VAR 0 3
35428: PUSH
35429: LD_VAR 0 1
35433: ARRAY
35434: PUSH
35435: LD_INT 3
35437: ARRAY
35438: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35439: LD_ADDR_VAR 0 7
35443: PUSH
35444: LD_VAR 0 3
35448: PUSH
35449: LD_VAR 0 1
35453: ARRAY
35454: PUSH
35455: LD_INT 4
35457: ARRAY
35458: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35459: LD_ADDR_VAR 0 9
35463: PUSH
35464: LD_VAR 0 6
35468: PPUSH
35469: LD_VAR 0 7
35473: PPUSH
35474: LD_INT 16
35476: PPUSH
35477: CALL 81315 0 3
35481: ST_TO_ADDR
// if not cratesNearbyPoint then
35482: LD_VAR 0 9
35486: NOT
35487: IFFALSE 35493
// exit ;
35489: POP
35490: POP
35491: GO 35950
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35493: LD_ADDR_VAR 0 4
35497: PUSH
35498: LD_INT 22
35500: PUSH
35501: LD_VAR 0 5
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 3
35512: PUSH
35513: LD_INT 60
35515: PUSH
35516: EMPTY
35517: LIST
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 91
35525: PUSH
35526: LD_VAR 0 8
35530: PUSH
35531: LD_INT 6
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: LD_INT 25
35544: PUSH
35545: LD_INT 2
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 25
35554: PUSH
35555: LD_INT 16
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: LIST
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: PPUSH
35573: CALL_OW 69
35577: PUSH
35578: LD_VAR 0 8
35582: PPUSH
35583: CALL_OW 313
35587: PPUSH
35588: LD_INT 3
35590: PUSH
35591: LD_INT 60
35593: PUSH
35594: EMPTY
35595: LIST
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 2
35603: PUSH
35604: LD_INT 25
35606: PUSH
35607: LD_INT 2
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 25
35616: PUSH
35617: LD_INT 16
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: LIST
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PPUSH
35633: CALL_OW 72
35637: UNION
35638: ST_TO_ADDR
// if tmp then
35639: LD_VAR 0 4
35643: IFFALSE 35723
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35645: LD_ADDR_VAR 0 4
35649: PUSH
35650: LD_VAR 0 4
35654: PPUSH
35655: LD_INT 3
35657: PPUSH
35658: CALL 79284 0 2
35662: ST_TO_ADDR
// for j in tmp do
35663: LD_ADDR_VAR 0 2
35667: PUSH
35668: LD_VAR 0 4
35672: PUSH
35673: FOR_IN
35674: IFFALSE 35717
// begin if IsInUnit ( j ) then
35676: LD_VAR 0 2
35680: PPUSH
35681: CALL_OW 310
35685: IFFALSE 35696
// ComExit ( j ) ;
35687: LD_VAR 0 2
35691: PPUSH
35692: CALL 79367 0 1
// AddComCollect ( j , x , y ) ;
35696: LD_VAR 0 2
35700: PPUSH
35701: LD_VAR 0 6
35705: PPUSH
35706: LD_VAR 0 7
35710: PPUSH
35711: CALL_OW 177
// end ;
35715: GO 35673
35717: POP
35718: POP
// exit ;
35719: POP
35720: POP
35721: GO 35950
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35723: LD_ADDR_VAR 0 4
35727: PUSH
35728: LD_INT 22
35730: PUSH
35731: LD_VAR 0 5
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 91
35742: PUSH
35743: LD_VAR 0 8
35747: PUSH
35748: LD_INT 8
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 2
35758: PUSH
35759: LD_INT 34
35761: PUSH
35762: LD_INT 12
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 34
35771: PUSH
35772: LD_INT 51
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 34
35781: PUSH
35782: LD_INT 32
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 34
35791: PUSH
35792: LD_INT 89
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: LIST
35810: PPUSH
35811: CALL_OW 69
35815: ST_TO_ADDR
// if tmp then
35816: LD_VAR 0 4
35820: IFFALSE 35946
// begin for j in tmp do
35822: LD_ADDR_VAR 0 2
35826: PUSH
35827: LD_VAR 0 4
35831: PUSH
35832: FOR_IN
35833: IFFALSE 35944
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35835: LD_VAR 0 2
35839: PPUSH
35840: CALL_OW 262
35844: PUSH
35845: LD_INT 3
35847: EQUAL
35848: PUSH
35849: LD_VAR 0 2
35853: PPUSH
35854: CALL_OW 261
35858: PUSH
35859: LD_INT 20
35861: GREATER
35862: OR
35863: PUSH
35864: LD_VAR 0 2
35868: PPUSH
35869: CALL_OW 314
35873: NOT
35874: AND
35875: PUSH
35876: LD_VAR 0 2
35880: PPUSH
35881: CALL_OW 263
35885: PUSH
35886: LD_INT 1
35888: NONEQUAL
35889: PUSH
35890: LD_VAR 0 2
35894: PPUSH
35895: CALL_OW 311
35899: OR
35900: AND
35901: IFFALSE 35942
// begin ComCollect ( j , x , y ) ;
35903: LD_VAR 0 2
35907: PPUSH
35908: LD_VAR 0 6
35912: PPUSH
35913: LD_VAR 0 7
35917: PPUSH
35918: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35922: LD_VAR 0 2
35926: PPUSH
35927: LD_VAR 0 8
35931: PPUSH
35932: CALL_OW 172
// exit ;
35936: POP
35937: POP
35938: POP
35939: POP
35940: GO 35950
// end ;
35942: GO 35832
35944: POP
35945: POP
// end ; end ;
35946: GO 35321
35948: POP
35949: POP
// end ; end_of_file
35950: PPOPN 9
35952: END
// export function SOS_UnitDestroyed ( un ) ; begin
35953: LD_INT 0
35955: PPUSH
// ComRadiation ( un ) ;
35956: LD_VAR 0 1
35960: PPUSH
35961: CALL 36942 0 1
// end ;
35965: LD_VAR 0 2
35969: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35970: LD_INT 0
35972: PPUSH
// ComRadiation ( un ) ;
35973: LD_VAR 0 1
35977: PPUSH
35978: CALL 36942 0 1
// end ;
35982: LD_VAR 0 2
35986: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35987: LD_INT 0
35989: PPUSH
// end ;
35990: LD_VAR 0 4
35994: RET
// export function SOS_Command ( cmd ) ; begin
35995: LD_INT 0
35997: PPUSH
// end ;
35998: LD_VAR 0 2
36002: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36003: LD_INT 0
36005: PPUSH
// end ;
36006: LD_VAR 0 6
36010: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
36011: LD_INT 0
36013: PPUSH
36014: PPUSH
36015: PPUSH
36016: PPUSH
36017: PPUSH
// if not vehicle or not factory then
36018: LD_VAR 0 1
36022: NOT
36023: PUSH
36024: LD_VAR 0 2
36028: NOT
36029: OR
36030: IFFALSE 36034
// exit ;
36032: GO 36533
// if not factoryWaypoints then
36034: LD_EXP 110
36038: NOT
36039: IFFALSE 36043
// exit ;
36041: GO 36533
// for i := 1 to Count ( factoryWaypoints ) do
36043: LD_ADDR_VAR 0 4
36047: PUSH
36048: DOUBLE
36049: LD_INT 1
36051: DEC
36052: ST_TO_ADDR
36053: LD_EXP 110
36057: PPUSH
36058: CALL 43360 0 1
36062: PUSH
36063: FOR_TO
36064: IFFALSE 36531
// if factoryWaypoints [ i ] [ 2 ] = factory then
36066: LD_EXP 110
36070: PUSH
36071: LD_VAR 0 4
36075: ARRAY
36076: PUSH
36077: LD_INT 2
36079: ARRAY
36080: PUSH
36081: LD_VAR 0 2
36085: EQUAL
36086: IFFALSE 36529
// begin if GetControl ( vehicle ) = control_manual then
36088: LD_VAR 0 1
36092: PPUSH
36093: CALL_OW 263
36097: PUSH
36098: LD_INT 1
36100: EQUAL
36101: IFFALSE 36412
// begin driver := IsDrivenBy ( vehicle ) ;
36103: LD_ADDR_VAR 0 6
36107: PUSH
36108: LD_VAR 0 1
36112: PPUSH
36113: CALL_OW 311
36117: ST_TO_ADDR
// tag := GetTag ( driver ) ;
36118: LD_ADDR_VAR 0 5
36122: PUSH
36123: LD_VAR 0 6
36127: PPUSH
36128: CALL_OW 110
36132: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
36133: LD_VAR 0 5
36137: PUSH
36138: LD_INT 501
36140: EQUAL
36141: PUSH
36142: LD_VAR 0 1
36146: PPUSH
36147: CALL_OW 110
36151: PUSH
36152: LD_INT 501
36154: EQUAL
36155: OR
36156: IFFALSE 36162
// exit ;
36158: POP
36159: POP
36160: GO 36533
// if not HasTask ( driver ) then
36162: LD_VAR 0 6
36166: PPUSH
36167: CALL_OW 314
36171: NOT
36172: IFFALSE 36410
// begin SetTag ( driver , tDriver ) ;
36174: LD_VAR 0 6
36178: PPUSH
36179: LD_INT 501
36181: PPUSH
36182: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
36186: LD_VAR 0 1
36190: PPUSH
36191: LD_INT 501
36193: PPUSH
36194: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36198: LD_ADDR_VAR 0 7
36202: PUSH
36203: LD_EXP 110
36207: PUSH
36208: LD_VAR 0 4
36212: ARRAY
36213: PUSH
36214: LD_INT 3
36216: ARRAY
36217: PPUSH
36218: LD_EXP 110
36222: PUSH
36223: LD_VAR 0 4
36227: ARRAY
36228: PUSH
36229: LD_INT 4
36231: ARRAY
36232: PPUSH
36233: CALL_OW 428
36237: ST_TO_ADDR
// if hex then
36238: LD_VAR 0 7
36242: IFFALSE 36260
// ComMoveUnit ( driver , hex ) else
36244: LD_VAR 0 6
36248: PPUSH
36249: LD_VAR 0 7
36253: PPUSH
36254: CALL_OW 112
36258: GO 36299
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36260: LD_VAR 0 6
36264: PPUSH
36265: LD_EXP 110
36269: PUSH
36270: LD_VAR 0 4
36274: ARRAY
36275: PUSH
36276: LD_INT 3
36278: ARRAY
36279: PPUSH
36280: LD_EXP 110
36284: PUSH
36285: LD_VAR 0 4
36289: ARRAY
36290: PUSH
36291: LD_INT 4
36293: ARRAY
36294: PPUSH
36295: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36299: LD_VAR 0 6
36303: PPUSH
36304: CALL_OW 181
// if Multiplayer then
36308: LD_OWVAR 4
36312: IFFALSE 36361
// begin repeat wait ( 10 ) ;
36314: LD_INT 10
36316: PPUSH
36317: CALL_OW 67
// until not IsInUnit ( driver ) ;
36321: LD_VAR 0 6
36325: PPUSH
36326: CALL_OW 310
36330: NOT
36331: IFFALSE 36314
// if not HasTask ( driver ) then
36333: LD_VAR 0 6
36337: PPUSH
36338: CALL_OW 314
36342: NOT
36343: IFFALSE 36359
// ComEnterUnit ( driver , factory ) ;
36345: LD_VAR 0 6
36349: PPUSH
36350: LD_VAR 0 2
36354: PPUSH
36355: CALL_OW 120
// end else
36359: GO 36375
// AddComEnterUnit ( driver , factory ) ;
36361: LD_VAR 0 6
36365: PPUSH
36366: LD_VAR 0 2
36370: PPUSH
36371: CALL_OW 180
// wait ( 0 0$1 ) ;
36375: LD_INT 35
36377: PPUSH
36378: CALL_OW 67
// SetTag ( driver , tag ) ;
36382: LD_VAR 0 6
36386: PPUSH
36387: LD_VAR 0 5
36391: PPUSH
36392: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
36396: LD_VAR 0 1
36400: PPUSH
36401: LD_INT 0
36403: PPUSH
36404: CALL_OW 109
// break ;
36408: GO 36531
// end ; end else
36410: GO 36529
// if GetControl ( vehicle ) = control_remote then
36412: LD_VAR 0 1
36416: PPUSH
36417: CALL_OW 263
36421: PUSH
36422: LD_INT 2
36424: EQUAL
36425: IFFALSE 36488
// begin wait ( 0 0$2 ) ;
36427: LD_INT 70
36429: PPUSH
36430: CALL_OW 67
// if Connect ( vehicle ) then
36434: LD_VAR 0 1
36438: PPUSH
36439: CALL 49566 0 1
36443: IFFALSE 36484
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36445: LD_VAR 0 1
36449: PPUSH
36450: LD_EXP 110
36454: PUSH
36455: LD_VAR 0 4
36459: ARRAY
36460: PUSH
36461: LD_INT 3
36463: ARRAY
36464: PPUSH
36465: LD_EXP 110
36469: PUSH
36470: LD_VAR 0 4
36474: ARRAY
36475: PUSH
36476: LD_INT 4
36478: ARRAY
36479: PPUSH
36480: CALL_OW 171
// break ;
36484: GO 36531
// end else
36486: GO 36529
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36488: LD_VAR 0 1
36492: PPUSH
36493: LD_EXP 110
36497: PUSH
36498: LD_VAR 0 4
36502: ARRAY
36503: PUSH
36504: LD_INT 3
36506: ARRAY
36507: PPUSH
36508: LD_EXP 110
36512: PUSH
36513: LD_VAR 0 4
36517: ARRAY
36518: PUSH
36519: LD_INT 4
36521: ARRAY
36522: PPUSH
36523: CALL_OW 171
// break ;
36527: GO 36531
// end ; end ;
36529: GO 36063
36531: POP
36532: POP
// end ;
36533: LD_VAR 0 3
36537: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36538: LD_INT 0
36540: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36541: LD_VAR 0 1
36545: PUSH
36546: LD_INT 250
36548: EQUAL
36549: PUSH
36550: LD_VAR 0 2
36554: PPUSH
36555: CALL_OW 264
36559: PUSH
36560: LD_INT 81
36562: EQUAL
36563: AND
36564: IFFALSE 36585
// MinerPlaceMine ( unit , x , y ) ;
36566: LD_VAR 0 2
36570: PPUSH
36571: LD_VAR 0 4
36575: PPUSH
36576: LD_VAR 0 5
36580: PPUSH
36581: CALL 39677 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36585: LD_VAR 0 1
36589: PUSH
36590: LD_INT 251
36592: EQUAL
36593: PUSH
36594: LD_VAR 0 2
36598: PPUSH
36599: CALL_OW 264
36603: PUSH
36604: LD_INT 81
36606: EQUAL
36607: AND
36608: IFFALSE 36629
// MinerDetonateMine ( unit , x , y ) ;
36610: LD_VAR 0 2
36614: PPUSH
36615: LD_VAR 0 4
36619: PPUSH
36620: LD_VAR 0 5
36624: PPUSH
36625: CALL 39952 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36629: LD_VAR 0 1
36633: PUSH
36634: LD_INT 252
36636: EQUAL
36637: PUSH
36638: LD_VAR 0 2
36642: PPUSH
36643: CALL_OW 264
36647: PUSH
36648: LD_INT 81
36650: EQUAL
36651: AND
36652: IFFALSE 36673
// MinerCreateMinefield ( unit , x , y ) ;
36654: LD_VAR 0 2
36658: PPUSH
36659: LD_VAR 0 4
36663: PPUSH
36664: LD_VAR 0 5
36668: PPUSH
36669: CALL 40369 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36673: LD_VAR 0 1
36677: PUSH
36678: LD_INT 253
36680: EQUAL
36681: PUSH
36682: LD_VAR 0 2
36686: PPUSH
36687: CALL_OW 257
36691: PUSH
36692: LD_INT 5
36694: EQUAL
36695: AND
36696: IFFALSE 36717
// ComBinocular ( unit , x , y ) ;
36698: LD_VAR 0 2
36702: PPUSH
36703: LD_VAR 0 4
36707: PPUSH
36708: LD_VAR 0 5
36712: PPUSH
36713: CALL 40738 0 3
// if selectedUnit then
36717: LD_VAR 0 3
36721: IFFALSE 36777
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36723: LD_VAR 0 1
36727: PUSH
36728: LD_INT 254
36730: EQUAL
36731: PUSH
36732: LD_VAR 0 2
36736: PPUSH
36737: CALL_OW 264
36741: PUSH
36742: LD_INT 99
36744: EQUAL
36745: AND
36746: PUSH
36747: LD_VAR 0 3
36751: PPUSH
36752: CALL_OW 263
36756: PUSH
36757: LD_INT 3
36759: EQUAL
36760: AND
36761: IFFALSE 36777
// HackDestroyVehicle ( unit , selectedUnit ) ;
36763: LD_VAR 0 2
36767: PPUSH
36768: LD_VAR 0 3
36772: PPUSH
36773: CALL 39041 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36777: LD_VAR 0 1
36781: PUSH
36782: LD_INT 255
36784: EQUAL
36785: PUSH
36786: LD_VAR 0 2
36790: PPUSH
36791: CALL_OW 264
36795: PUSH
36796: LD_INT 14
36798: PUSH
36799: LD_INT 53
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: IN
36806: AND
36807: PUSH
36808: LD_VAR 0 4
36812: PPUSH
36813: LD_VAR 0 5
36817: PPUSH
36818: CALL_OW 488
36822: AND
36823: IFFALSE 36847
// CutTreeXYR ( unit , x , y , 12 ) ;
36825: LD_VAR 0 2
36829: PPUSH
36830: LD_VAR 0 4
36834: PPUSH
36835: LD_VAR 0 5
36839: PPUSH
36840: LD_INT 12
36842: PPUSH
36843: CALL 37038 0 4
// if cmd = 256 then
36847: LD_VAR 0 1
36851: PUSH
36852: LD_INT 256
36854: EQUAL
36855: IFFALSE 36876
// SetFactoryWaypoint ( unit , x , y ) ;
36857: LD_VAR 0 2
36861: PPUSH
36862: LD_VAR 0 4
36866: PPUSH
36867: LD_VAR 0 5
36871: PPUSH
36872: CALL 34514 0 3
// if cmd = 257 then
36876: LD_VAR 0 1
36880: PUSH
36881: LD_INT 257
36883: EQUAL
36884: IFFALSE 36905
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36886: LD_VAR 0 2
36890: PPUSH
36891: LD_VAR 0 4
36895: PPUSH
36896: LD_VAR 0 5
36900: PPUSH
36901: CALL 35004 0 3
// if cmd = 258 then
36905: LD_VAR 0 1
36909: PUSH
36910: LD_INT 258
36912: EQUAL
36913: IFFALSE 36937
// BurnTreeXYR ( unit , x , y , 8 ) ;
36915: LD_VAR 0 2
36919: PPUSH
36920: LD_VAR 0 4
36924: PPUSH
36925: LD_VAR 0 5
36929: PPUSH
36930: LD_INT 8
36932: PPUSH
36933: CALL 37432 0 4
// end ;
36937: LD_VAR 0 6
36941: RET
// export function ComRadiation ( un ) ; var eff ; begin
36942: LD_INT 0
36944: PPUSH
36945: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
36946: LD_VAR 0 1
36950: PPUSH
36951: CALL_OW 264
36955: PUSH
36956: LD_INT 91
36958: NONEQUAL
36959: IFFALSE 36963
// exit ;
36961: GO 37033
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36963: LD_INT 68
36965: PPUSH
36966: LD_VAR 0 1
36970: PPUSH
36971: CALL_OW 255
36975: PPUSH
36976: CALL_OW 321
36980: PUSH
36981: LD_INT 2
36983: EQUAL
36984: IFFALSE 36996
// eff := 70 else
36986: LD_ADDR_VAR 0 3
36990: PUSH
36991: LD_INT 70
36993: ST_TO_ADDR
36994: GO 37004
// eff := 30 ;
36996: LD_ADDR_VAR 0 3
37000: PUSH
37001: LD_INT 30
37003: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37004: LD_VAR 0 1
37008: PPUSH
37009: CALL_OW 250
37013: PPUSH
37014: LD_VAR 0 1
37018: PPUSH
37019: CALL_OW 251
37023: PPUSH
37024: LD_VAR 0 3
37028: PPUSH
37029: CALL_OW 495
// end ;
37033: LD_VAR 0 2
37037: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37038: LD_INT 0
37040: PPUSH
37041: PPUSH
37042: PPUSH
37043: PPUSH
37044: PPUSH
37045: PPUSH
37046: PPUSH
37047: PPUSH
37048: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37049: LD_VAR 0 1
37053: PPUSH
37054: CALL_OW 302
37058: NOT
37059: PUSH
37060: LD_VAR 0 2
37064: PPUSH
37065: LD_VAR 0 3
37069: PPUSH
37070: CALL_OW 488
37074: NOT
37075: OR
37076: PUSH
37077: LD_VAR 0 4
37081: NOT
37082: OR
37083: IFFALSE 37087
// exit ;
37085: GO 37427
// list := [ ] ;
37087: LD_ADDR_VAR 0 13
37091: PUSH
37092: EMPTY
37093: ST_TO_ADDR
// if x - r < 0 then
37094: LD_VAR 0 2
37098: PUSH
37099: LD_VAR 0 4
37103: MINUS
37104: PUSH
37105: LD_INT 0
37107: LESS
37108: IFFALSE 37120
// min_x := 0 else
37110: LD_ADDR_VAR 0 7
37114: PUSH
37115: LD_INT 0
37117: ST_TO_ADDR
37118: GO 37136
// min_x := x - r ;
37120: LD_ADDR_VAR 0 7
37124: PUSH
37125: LD_VAR 0 2
37129: PUSH
37130: LD_VAR 0 4
37134: MINUS
37135: ST_TO_ADDR
// if y - r < 0 then
37136: LD_VAR 0 3
37140: PUSH
37141: LD_VAR 0 4
37145: MINUS
37146: PUSH
37147: LD_INT 0
37149: LESS
37150: IFFALSE 37162
// min_y := 0 else
37152: LD_ADDR_VAR 0 8
37156: PUSH
37157: LD_INT 0
37159: ST_TO_ADDR
37160: GO 37178
// min_y := y - r ;
37162: LD_ADDR_VAR 0 8
37166: PUSH
37167: LD_VAR 0 3
37171: PUSH
37172: LD_VAR 0 4
37176: MINUS
37177: ST_TO_ADDR
// max_x := x + r ;
37178: LD_ADDR_VAR 0 9
37182: PUSH
37183: LD_VAR 0 2
37187: PUSH
37188: LD_VAR 0 4
37192: PLUS
37193: ST_TO_ADDR
// max_y := y + r ;
37194: LD_ADDR_VAR 0 10
37198: PUSH
37199: LD_VAR 0 3
37203: PUSH
37204: LD_VAR 0 4
37208: PLUS
37209: ST_TO_ADDR
// for _x = min_x to max_x do
37210: LD_ADDR_VAR 0 11
37214: PUSH
37215: DOUBLE
37216: LD_VAR 0 7
37220: DEC
37221: ST_TO_ADDR
37222: LD_VAR 0 9
37226: PUSH
37227: FOR_TO
37228: IFFALSE 37345
// for _y = min_y to max_y do
37230: LD_ADDR_VAR 0 12
37234: PUSH
37235: DOUBLE
37236: LD_VAR 0 8
37240: DEC
37241: ST_TO_ADDR
37242: LD_VAR 0 10
37246: PUSH
37247: FOR_TO
37248: IFFALSE 37341
// begin if not ValidHex ( _x , _y ) then
37250: LD_VAR 0 11
37254: PPUSH
37255: LD_VAR 0 12
37259: PPUSH
37260: CALL_OW 488
37264: NOT
37265: IFFALSE 37269
// continue ;
37267: GO 37247
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37269: LD_VAR 0 11
37273: PPUSH
37274: LD_VAR 0 12
37278: PPUSH
37279: CALL_OW 351
37283: PUSH
37284: LD_VAR 0 11
37288: PPUSH
37289: LD_VAR 0 12
37293: PPUSH
37294: CALL_OW 554
37298: AND
37299: IFFALSE 37339
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37301: LD_ADDR_VAR 0 13
37305: PUSH
37306: LD_VAR 0 13
37310: PPUSH
37311: LD_VAR 0 13
37315: PUSH
37316: LD_INT 1
37318: PLUS
37319: PPUSH
37320: LD_VAR 0 11
37324: PUSH
37325: LD_VAR 0 12
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PPUSH
37334: CALL_OW 2
37338: ST_TO_ADDR
// end ;
37339: GO 37247
37341: POP
37342: POP
37343: GO 37227
37345: POP
37346: POP
// if not list then
37347: LD_VAR 0 13
37351: NOT
37352: IFFALSE 37356
// exit ;
37354: GO 37427
// for i in list do
37356: LD_ADDR_VAR 0 6
37360: PUSH
37361: LD_VAR 0 13
37365: PUSH
37366: FOR_IN
37367: IFFALSE 37425
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37369: LD_VAR 0 1
37373: PPUSH
37374: LD_STRING M
37376: PUSH
37377: LD_VAR 0 6
37381: PUSH
37382: LD_INT 1
37384: ARRAY
37385: PUSH
37386: LD_VAR 0 6
37390: PUSH
37391: LD_INT 2
37393: ARRAY
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: LD_INT 0
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: PUSH
37416: EMPTY
37417: LIST
37418: PPUSH
37419: CALL_OW 447
37423: GO 37366
37425: POP
37426: POP
// end ;
37427: LD_VAR 0 5
37431: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37432: LD_INT 0
37434: PPUSH
37435: PPUSH
37436: PPUSH
37437: PPUSH
37438: PPUSH
37439: PPUSH
37440: PPUSH
37441: PPUSH
37442: PPUSH
37443: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37444: LD_VAR 0 1
37448: PPUSH
37449: CALL_OW 302
37453: NOT
37454: PUSH
37455: LD_VAR 0 2
37459: PPUSH
37460: LD_VAR 0 3
37464: PPUSH
37465: CALL_OW 488
37469: NOT
37470: OR
37471: PUSH
37472: LD_VAR 0 4
37476: NOT
37477: OR
37478: IFFALSE 37482
// exit ;
37480: GO 37995
// list := [ ] ;
37482: LD_ADDR_VAR 0 13
37486: PUSH
37487: EMPTY
37488: ST_TO_ADDR
// if x - r < 0 then
37489: LD_VAR 0 2
37493: PUSH
37494: LD_VAR 0 4
37498: MINUS
37499: PUSH
37500: LD_INT 0
37502: LESS
37503: IFFALSE 37515
// min_x := 0 else
37505: LD_ADDR_VAR 0 7
37509: PUSH
37510: LD_INT 0
37512: ST_TO_ADDR
37513: GO 37531
// min_x := x - r ;
37515: LD_ADDR_VAR 0 7
37519: PUSH
37520: LD_VAR 0 2
37524: PUSH
37525: LD_VAR 0 4
37529: MINUS
37530: ST_TO_ADDR
// if y - r < 0 then
37531: LD_VAR 0 3
37535: PUSH
37536: LD_VAR 0 4
37540: MINUS
37541: PUSH
37542: LD_INT 0
37544: LESS
37545: IFFALSE 37557
// min_y := 0 else
37547: LD_ADDR_VAR 0 8
37551: PUSH
37552: LD_INT 0
37554: ST_TO_ADDR
37555: GO 37573
// min_y := y - r ;
37557: LD_ADDR_VAR 0 8
37561: PUSH
37562: LD_VAR 0 3
37566: PUSH
37567: LD_VAR 0 4
37571: MINUS
37572: ST_TO_ADDR
// max_x := x + r ;
37573: LD_ADDR_VAR 0 9
37577: PUSH
37578: LD_VAR 0 2
37582: PUSH
37583: LD_VAR 0 4
37587: PLUS
37588: ST_TO_ADDR
// max_y := y + r ;
37589: LD_ADDR_VAR 0 10
37593: PUSH
37594: LD_VAR 0 3
37598: PUSH
37599: LD_VAR 0 4
37603: PLUS
37604: ST_TO_ADDR
// for _x = min_x to max_x do
37605: LD_ADDR_VAR 0 11
37609: PUSH
37610: DOUBLE
37611: LD_VAR 0 7
37615: DEC
37616: ST_TO_ADDR
37617: LD_VAR 0 9
37621: PUSH
37622: FOR_TO
37623: IFFALSE 37740
// for _y = min_y to max_y do
37625: LD_ADDR_VAR 0 12
37629: PUSH
37630: DOUBLE
37631: LD_VAR 0 8
37635: DEC
37636: ST_TO_ADDR
37637: LD_VAR 0 10
37641: PUSH
37642: FOR_TO
37643: IFFALSE 37736
// begin if not ValidHex ( _x , _y ) then
37645: LD_VAR 0 11
37649: PPUSH
37650: LD_VAR 0 12
37654: PPUSH
37655: CALL_OW 488
37659: NOT
37660: IFFALSE 37664
// continue ;
37662: GO 37642
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37664: LD_VAR 0 11
37668: PPUSH
37669: LD_VAR 0 12
37673: PPUSH
37674: CALL_OW 351
37678: PUSH
37679: LD_VAR 0 11
37683: PPUSH
37684: LD_VAR 0 12
37688: PPUSH
37689: CALL_OW 554
37693: AND
37694: IFFALSE 37734
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37696: LD_ADDR_VAR 0 13
37700: PUSH
37701: LD_VAR 0 13
37705: PPUSH
37706: LD_VAR 0 13
37710: PUSH
37711: LD_INT 1
37713: PLUS
37714: PPUSH
37715: LD_VAR 0 11
37719: PUSH
37720: LD_VAR 0 12
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PPUSH
37729: CALL_OW 2
37733: ST_TO_ADDR
// end ;
37734: GO 37642
37736: POP
37737: POP
37738: GO 37622
37740: POP
37741: POP
// if not list then
37742: LD_VAR 0 13
37746: NOT
37747: IFFALSE 37751
// exit ;
37749: GO 37995
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37751: LD_ADDR_VAR 0 13
37755: PUSH
37756: LD_VAR 0 1
37760: PPUSH
37761: LD_VAR 0 13
37765: PPUSH
37766: LD_INT 1
37768: PPUSH
37769: LD_INT 1
37771: PPUSH
37772: CALL 46708 0 4
37776: ST_TO_ADDR
// ComStop ( flame ) ;
37777: LD_VAR 0 1
37781: PPUSH
37782: CALL_OW 141
// for i in list do
37786: LD_ADDR_VAR 0 6
37790: PUSH
37791: LD_VAR 0 13
37795: PUSH
37796: FOR_IN
37797: IFFALSE 37828
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37799: LD_VAR 0 1
37803: PPUSH
37804: LD_VAR 0 6
37808: PUSH
37809: LD_INT 1
37811: ARRAY
37812: PPUSH
37813: LD_VAR 0 6
37817: PUSH
37818: LD_INT 2
37820: ARRAY
37821: PPUSH
37822: CALL_OW 176
37826: GO 37796
37828: POP
37829: POP
// repeat wait ( 0 0$1 ) ;
37830: LD_INT 35
37832: PPUSH
37833: CALL_OW 67
// task := GetTaskList ( flame ) ;
37837: LD_ADDR_VAR 0 14
37841: PUSH
37842: LD_VAR 0 1
37846: PPUSH
37847: CALL_OW 437
37851: ST_TO_ADDR
// if not task then
37852: LD_VAR 0 14
37856: NOT
37857: IFFALSE 37861
// exit ;
37859: GO 37995
// if task [ 1 ] [ 1 ] <> | then
37861: LD_VAR 0 14
37865: PUSH
37866: LD_INT 1
37868: ARRAY
37869: PUSH
37870: LD_INT 1
37872: ARRAY
37873: PUSH
37874: LD_STRING |
37876: NONEQUAL
37877: IFFALSE 37881
// exit ;
37879: GO 37995
// _x := task [ 1 ] [ 2 ] ;
37881: LD_ADDR_VAR 0 11
37885: PUSH
37886: LD_VAR 0 14
37890: PUSH
37891: LD_INT 1
37893: ARRAY
37894: PUSH
37895: LD_INT 2
37897: ARRAY
37898: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37899: LD_ADDR_VAR 0 12
37903: PUSH
37904: LD_VAR 0 14
37908: PUSH
37909: LD_INT 1
37911: ARRAY
37912: PUSH
37913: LD_INT 3
37915: ARRAY
37916: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37917: LD_VAR 0 11
37921: PPUSH
37922: LD_VAR 0 12
37926: PPUSH
37927: CALL_OW 351
37931: NOT
37932: PUSH
37933: LD_VAR 0 11
37937: PPUSH
37938: LD_VAR 0 12
37942: PPUSH
37943: CALL_OW 554
37947: NOT
37948: OR
37949: IFFALSE 37983
// begin task := Delete ( task , 1 ) ;
37951: LD_ADDR_VAR 0 14
37955: PUSH
37956: LD_VAR 0 14
37960: PPUSH
37961: LD_INT 1
37963: PPUSH
37964: CALL_OW 3
37968: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37969: LD_VAR 0 1
37973: PPUSH
37974: LD_VAR 0 14
37978: PPUSH
37979: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37983: LD_VAR 0 1
37987: PPUSH
37988: CALL_OW 314
37992: NOT
37993: IFFALSE 37830
// end ;
37995: LD_VAR 0 5
37999: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38000: LD_EXP 113
38004: NOT
38005: IFFALSE 38055
38007: GO 38009
38009: DISABLE
// begin initHack := true ;
38010: LD_ADDR_EXP 113
38014: PUSH
38015: LD_INT 1
38017: ST_TO_ADDR
// hackTanks := [ ] ;
38018: LD_ADDR_EXP 114
38022: PUSH
38023: EMPTY
38024: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38025: LD_ADDR_EXP 115
38029: PUSH
38030: EMPTY
38031: ST_TO_ADDR
// hackLimit := 3 ;
38032: LD_ADDR_EXP 116
38036: PUSH
38037: LD_INT 3
38039: ST_TO_ADDR
// hackDist := 12 ;
38040: LD_ADDR_EXP 117
38044: PUSH
38045: LD_INT 12
38047: ST_TO_ADDR
// hackCounter := [ ] ;
38048: LD_ADDR_EXP 118
38052: PUSH
38053: EMPTY
38054: ST_TO_ADDR
// end ;
38055: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38056: LD_EXP 113
38060: PUSH
38061: LD_INT 34
38063: PUSH
38064: LD_INT 99
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PPUSH
38071: CALL_OW 69
38075: AND
38076: IFFALSE 38329
38078: GO 38080
38080: DISABLE
38081: LD_INT 0
38083: PPUSH
38084: PPUSH
// begin enable ;
38085: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38086: LD_ADDR_VAR 0 1
38090: PUSH
38091: LD_INT 34
38093: PUSH
38094: LD_INT 99
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PPUSH
38101: CALL_OW 69
38105: PUSH
38106: FOR_IN
38107: IFFALSE 38327
// begin if not i in hackTanks then
38109: LD_VAR 0 1
38113: PUSH
38114: LD_EXP 114
38118: IN
38119: NOT
38120: IFFALSE 38203
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38122: LD_ADDR_EXP 114
38126: PUSH
38127: LD_EXP 114
38131: PPUSH
38132: LD_EXP 114
38136: PUSH
38137: LD_INT 1
38139: PLUS
38140: PPUSH
38141: LD_VAR 0 1
38145: PPUSH
38146: CALL_OW 1
38150: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38151: LD_ADDR_EXP 115
38155: PUSH
38156: LD_EXP 115
38160: PPUSH
38161: LD_EXP 115
38165: PUSH
38166: LD_INT 1
38168: PLUS
38169: PPUSH
38170: EMPTY
38171: PPUSH
38172: CALL_OW 1
38176: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38177: LD_ADDR_EXP 118
38181: PUSH
38182: LD_EXP 118
38186: PPUSH
38187: LD_EXP 118
38191: PUSH
38192: LD_INT 1
38194: PLUS
38195: PPUSH
38196: EMPTY
38197: PPUSH
38198: CALL_OW 1
38202: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38203: LD_VAR 0 1
38207: PPUSH
38208: CALL_OW 302
38212: NOT
38213: IFFALSE 38226
// begin HackUnlinkAll ( i ) ;
38215: LD_VAR 0 1
38219: PPUSH
38220: CALL 38332 0 1
// continue ;
38224: GO 38106
// end ; HackCheckCapturedStatus ( i ) ;
38226: LD_VAR 0 1
38230: PPUSH
38231: CALL 38775 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38235: LD_ADDR_VAR 0 2
38239: PUSH
38240: LD_INT 81
38242: PUSH
38243: LD_VAR 0 1
38247: PPUSH
38248: CALL_OW 255
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 33
38259: PUSH
38260: LD_INT 3
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 91
38269: PUSH
38270: LD_VAR 0 1
38274: PUSH
38275: LD_EXP 117
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 50
38287: PUSH
38288: EMPTY
38289: LIST
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: PPUSH
38297: CALL_OW 69
38301: ST_TO_ADDR
// if not tmp then
38302: LD_VAR 0 2
38306: NOT
38307: IFFALSE 38311
// continue ;
38309: GO 38106
// HackLink ( i , tmp ) ;
38311: LD_VAR 0 1
38315: PPUSH
38316: LD_VAR 0 2
38320: PPUSH
38321: CALL 38468 0 2
// end ;
38325: GO 38106
38327: POP
38328: POP
// end ;
38329: PPOPN 2
38331: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38332: LD_INT 0
38334: PPUSH
38335: PPUSH
38336: PPUSH
// if not hack in hackTanks then
38337: LD_VAR 0 1
38341: PUSH
38342: LD_EXP 114
38346: IN
38347: NOT
38348: IFFALSE 38352
// exit ;
38350: GO 38463
// index := GetElementIndex ( hackTanks , hack ) ;
38352: LD_ADDR_VAR 0 4
38356: PUSH
38357: LD_EXP 114
38361: PPUSH
38362: LD_VAR 0 1
38366: PPUSH
38367: CALL 46005 0 2
38371: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38372: LD_EXP 115
38376: PUSH
38377: LD_VAR 0 4
38381: ARRAY
38382: IFFALSE 38463
// begin for i in hackTanksCaptured [ index ] do
38384: LD_ADDR_VAR 0 3
38388: PUSH
38389: LD_EXP 115
38393: PUSH
38394: LD_VAR 0 4
38398: ARRAY
38399: PUSH
38400: FOR_IN
38401: IFFALSE 38427
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38403: LD_VAR 0 3
38407: PUSH
38408: LD_INT 1
38410: ARRAY
38411: PPUSH
38412: LD_VAR 0 3
38416: PUSH
38417: LD_INT 2
38419: ARRAY
38420: PPUSH
38421: CALL_OW 235
38425: GO 38400
38427: POP
38428: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38429: LD_ADDR_EXP 115
38433: PUSH
38434: LD_EXP 115
38438: PPUSH
38439: LD_VAR 0 4
38443: PPUSH
38444: EMPTY
38445: PPUSH
38446: CALL_OW 1
38450: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38451: LD_VAR 0 1
38455: PPUSH
38456: LD_INT 0
38458: PPUSH
38459: CALL_OW 505
// end ; end ;
38463: LD_VAR 0 2
38467: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38468: LD_INT 0
38470: PPUSH
38471: PPUSH
38472: PPUSH
// if not hack in hackTanks or not vehicles then
38473: LD_VAR 0 1
38477: PUSH
38478: LD_EXP 114
38482: IN
38483: NOT
38484: PUSH
38485: LD_VAR 0 2
38489: NOT
38490: OR
38491: IFFALSE 38495
// exit ;
38493: GO 38770
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38495: LD_ADDR_VAR 0 2
38499: PUSH
38500: LD_VAR 0 1
38504: PPUSH
38505: LD_VAR 0 2
38509: PPUSH
38510: LD_INT 1
38512: PPUSH
38513: LD_INT 1
38515: PPUSH
38516: CALL 46655 0 4
38520: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38521: LD_ADDR_VAR 0 5
38525: PUSH
38526: LD_EXP 114
38530: PPUSH
38531: LD_VAR 0 1
38535: PPUSH
38536: CALL 46005 0 2
38540: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38541: LD_EXP 115
38545: PUSH
38546: LD_VAR 0 5
38550: ARRAY
38551: PUSH
38552: LD_EXP 116
38556: LESS
38557: IFFALSE 38746
// begin for i := 1 to vehicles do
38559: LD_ADDR_VAR 0 4
38563: PUSH
38564: DOUBLE
38565: LD_INT 1
38567: DEC
38568: ST_TO_ADDR
38569: LD_VAR 0 2
38573: PUSH
38574: FOR_TO
38575: IFFALSE 38744
// begin if hackTanksCaptured [ index ] = hackLimit then
38577: LD_EXP 115
38581: PUSH
38582: LD_VAR 0 5
38586: ARRAY
38587: PUSH
38588: LD_EXP 116
38592: EQUAL
38593: IFFALSE 38597
// break ;
38595: GO 38744
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38597: LD_ADDR_EXP 118
38601: PUSH
38602: LD_EXP 118
38606: PPUSH
38607: LD_VAR 0 5
38611: PPUSH
38612: LD_EXP 118
38616: PUSH
38617: LD_VAR 0 5
38621: ARRAY
38622: PUSH
38623: LD_INT 1
38625: PLUS
38626: PPUSH
38627: CALL_OW 1
38631: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38632: LD_ADDR_EXP 115
38636: PUSH
38637: LD_EXP 115
38641: PPUSH
38642: LD_VAR 0 5
38646: PUSH
38647: LD_EXP 115
38651: PUSH
38652: LD_VAR 0 5
38656: ARRAY
38657: PUSH
38658: LD_INT 1
38660: PLUS
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PPUSH
38666: LD_VAR 0 2
38670: PUSH
38671: LD_VAR 0 4
38675: ARRAY
38676: PUSH
38677: LD_VAR 0 2
38681: PUSH
38682: LD_VAR 0 4
38686: ARRAY
38687: PPUSH
38688: CALL_OW 255
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PPUSH
38697: CALL 46220 0 3
38701: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38702: LD_VAR 0 2
38706: PUSH
38707: LD_VAR 0 4
38711: ARRAY
38712: PPUSH
38713: LD_VAR 0 1
38717: PPUSH
38718: CALL_OW 255
38722: PPUSH
38723: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38727: LD_VAR 0 2
38731: PUSH
38732: LD_VAR 0 4
38736: ARRAY
38737: PPUSH
38738: CALL_OW 141
// end ;
38742: GO 38574
38744: POP
38745: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38746: LD_VAR 0 1
38750: PPUSH
38751: LD_EXP 115
38755: PUSH
38756: LD_VAR 0 5
38760: ARRAY
38761: PUSH
38762: LD_INT 0
38764: PLUS
38765: PPUSH
38766: CALL_OW 505
// end ;
38770: LD_VAR 0 3
38774: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38775: LD_INT 0
38777: PPUSH
38778: PPUSH
38779: PPUSH
38780: PPUSH
// if not hack in hackTanks then
38781: LD_VAR 0 1
38785: PUSH
38786: LD_EXP 114
38790: IN
38791: NOT
38792: IFFALSE 38796
// exit ;
38794: GO 39036
// index := GetElementIndex ( hackTanks , hack ) ;
38796: LD_ADDR_VAR 0 4
38800: PUSH
38801: LD_EXP 114
38805: PPUSH
38806: LD_VAR 0 1
38810: PPUSH
38811: CALL 46005 0 2
38815: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38816: LD_ADDR_VAR 0 3
38820: PUSH
38821: DOUBLE
38822: LD_EXP 115
38826: PUSH
38827: LD_VAR 0 4
38831: ARRAY
38832: INC
38833: ST_TO_ADDR
38834: LD_INT 1
38836: PUSH
38837: FOR_DOWNTO
38838: IFFALSE 39010
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38840: LD_ADDR_VAR 0 5
38844: PUSH
38845: LD_EXP 115
38849: PUSH
38850: LD_VAR 0 4
38854: ARRAY
38855: PUSH
38856: LD_VAR 0 3
38860: ARRAY
38861: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38862: LD_VAR 0 5
38866: PUSH
38867: LD_INT 1
38869: ARRAY
38870: PPUSH
38871: CALL_OW 302
38875: NOT
38876: PUSH
38877: LD_VAR 0 5
38881: PUSH
38882: LD_INT 1
38884: ARRAY
38885: PPUSH
38886: CALL_OW 255
38890: PUSH
38891: LD_VAR 0 1
38895: PPUSH
38896: CALL_OW 255
38900: NONEQUAL
38901: OR
38902: IFFALSE 39008
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38904: LD_VAR 0 5
38908: PUSH
38909: LD_INT 1
38911: ARRAY
38912: PPUSH
38913: CALL_OW 305
38917: PUSH
38918: LD_VAR 0 5
38922: PUSH
38923: LD_INT 1
38925: ARRAY
38926: PPUSH
38927: CALL_OW 255
38931: PUSH
38932: LD_VAR 0 1
38936: PPUSH
38937: CALL_OW 255
38941: EQUAL
38942: AND
38943: IFFALSE 38967
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38945: LD_VAR 0 5
38949: PUSH
38950: LD_INT 1
38952: ARRAY
38953: PPUSH
38954: LD_VAR 0 5
38958: PUSH
38959: LD_INT 2
38961: ARRAY
38962: PPUSH
38963: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38967: LD_ADDR_EXP 115
38971: PUSH
38972: LD_EXP 115
38976: PPUSH
38977: LD_VAR 0 4
38981: PPUSH
38982: LD_EXP 115
38986: PUSH
38987: LD_VAR 0 4
38991: ARRAY
38992: PPUSH
38993: LD_VAR 0 3
38997: PPUSH
38998: CALL_OW 3
39002: PPUSH
39003: CALL_OW 1
39007: ST_TO_ADDR
// end ; end ;
39008: GO 38837
39010: POP
39011: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39012: LD_VAR 0 1
39016: PPUSH
39017: LD_EXP 115
39021: PUSH
39022: LD_VAR 0 4
39026: ARRAY
39027: PUSH
39028: LD_INT 0
39030: PLUS
39031: PPUSH
39032: CALL_OW 505
// end ;
39036: LD_VAR 0 2
39040: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39041: LD_INT 0
39043: PPUSH
39044: PPUSH
39045: PPUSH
39046: PPUSH
// if not hack in hackTanks then
39047: LD_VAR 0 1
39051: PUSH
39052: LD_EXP 114
39056: IN
39057: NOT
39058: IFFALSE 39062
// exit ;
39060: GO 39147
// index := GetElementIndex ( hackTanks , hack ) ;
39062: LD_ADDR_VAR 0 5
39066: PUSH
39067: LD_EXP 114
39071: PPUSH
39072: LD_VAR 0 1
39076: PPUSH
39077: CALL 46005 0 2
39081: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39082: LD_ADDR_VAR 0 4
39086: PUSH
39087: DOUBLE
39088: LD_INT 1
39090: DEC
39091: ST_TO_ADDR
39092: LD_EXP 115
39096: PUSH
39097: LD_VAR 0 5
39101: ARRAY
39102: PUSH
39103: FOR_TO
39104: IFFALSE 39145
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39106: LD_EXP 115
39110: PUSH
39111: LD_VAR 0 5
39115: ARRAY
39116: PUSH
39117: LD_VAR 0 4
39121: ARRAY
39122: PUSH
39123: LD_INT 1
39125: ARRAY
39126: PUSH
39127: LD_VAR 0 2
39131: EQUAL
39132: IFFALSE 39143
// KillUnit ( vehicle ) ;
39134: LD_VAR 0 2
39138: PPUSH
39139: CALL_OW 66
39143: GO 39103
39145: POP
39146: POP
// end ;
39147: LD_VAR 0 3
39151: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39152: LD_EXP 119
39156: NOT
39157: IFFALSE 39192
39159: GO 39161
39161: DISABLE
// begin initMiner := true ;
39162: LD_ADDR_EXP 119
39166: PUSH
39167: LD_INT 1
39169: ST_TO_ADDR
// minersList := [ ] ;
39170: LD_ADDR_EXP 120
39174: PUSH
39175: EMPTY
39176: ST_TO_ADDR
// minerMinesList := [ ] ;
39177: LD_ADDR_EXP 121
39181: PUSH
39182: EMPTY
39183: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39184: LD_ADDR_EXP 122
39188: PUSH
39189: LD_INT 5
39191: ST_TO_ADDR
// end ;
39192: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39193: LD_EXP 119
39197: PUSH
39198: LD_INT 34
39200: PUSH
39201: LD_INT 81
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PPUSH
39208: CALL_OW 69
39212: AND
39213: IFFALSE 39674
39215: GO 39217
39217: DISABLE
39218: LD_INT 0
39220: PPUSH
39221: PPUSH
39222: PPUSH
39223: PPUSH
// begin enable ;
39224: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39225: LD_ADDR_VAR 0 1
39229: PUSH
39230: LD_INT 34
39232: PUSH
39233: LD_INT 81
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PPUSH
39240: CALL_OW 69
39244: PUSH
39245: FOR_IN
39246: IFFALSE 39318
// begin if not i in minersList then
39248: LD_VAR 0 1
39252: PUSH
39253: LD_EXP 120
39257: IN
39258: NOT
39259: IFFALSE 39316
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39261: LD_ADDR_EXP 120
39265: PUSH
39266: LD_EXP 120
39270: PPUSH
39271: LD_EXP 120
39275: PUSH
39276: LD_INT 1
39278: PLUS
39279: PPUSH
39280: LD_VAR 0 1
39284: PPUSH
39285: CALL_OW 1
39289: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39290: LD_ADDR_EXP 121
39294: PUSH
39295: LD_EXP 121
39299: PPUSH
39300: LD_EXP 121
39304: PUSH
39305: LD_INT 1
39307: PLUS
39308: PPUSH
39309: EMPTY
39310: PPUSH
39311: CALL_OW 1
39315: ST_TO_ADDR
// end end ;
39316: GO 39245
39318: POP
39319: POP
// for i := minerMinesList downto 1 do
39320: LD_ADDR_VAR 0 1
39324: PUSH
39325: DOUBLE
39326: LD_EXP 121
39330: INC
39331: ST_TO_ADDR
39332: LD_INT 1
39334: PUSH
39335: FOR_DOWNTO
39336: IFFALSE 39672
// begin if IsLive ( minersList [ i ] ) then
39338: LD_EXP 120
39342: PUSH
39343: LD_VAR 0 1
39347: ARRAY
39348: PPUSH
39349: CALL_OW 300
39353: IFFALSE 39381
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39355: LD_EXP 120
39359: PUSH
39360: LD_VAR 0 1
39364: ARRAY
39365: PPUSH
39366: LD_EXP 121
39370: PUSH
39371: LD_VAR 0 1
39375: ARRAY
39376: PPUSH
39377: CALL_OW 505
// if not minerMinesList [ i ] then
39381: LD_EXP 121
39385: PUSH
39386: LD_VAR 0 1
39390: ARRAY
39391: NOT
39392: IFFALSE 39396
// continue ;
39394: GO 39335
// for j := minerMinesList [ i ] downto 1 do
39396: LD_ADDR_VAR 0 2
39400: PUSH
39401: DOUBLE
39402: LD_EXP 121
39406: PUSH
39407: LD_VAR 0 1
39411: ARRAY
39412: INC
39413: ST_TO_ADDR
39414: LD_INT 1
39416: PUSH
39417: FOR_DOWNTO
39418: IFFALSE 39668
// begin side := GetSide ( minersList [ i ] ) ;
39420: LD_ADDR_VAR 0 3
39424: PUSH
39425: LD_EXP 120
39429: PUSH
39430: LD_VAR 0 1
39434: ARRAY
39435: PPUSH
39436: CALL_OW 255
39440: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39441: LD_ADDR_VAR 0 4
39445: PUSH
39446: LD_EXP 121
39450: PUSH
39451: LD_VAR 0 1
39455: ARRAY
39456: PUSH
39457: LD_VAR 0 2
39461: ARRAY
39462: PUSH
39463: LD_INT 1
39465: ARRAY
39466: PPUSH
39467: LD_EXP 121
39471: PUSH
39472: LD_VAR 0 1
39476: ARRAY
39477: PUSH
39478: LD_VAR 0 2
39482: ARRAY
39483: PUSH
39484: LD_INT 2
39486: ARRAY
39487: PPUSH
39488: CALL_OW 428
39492: ST_TO_ADDR
// if not tmp then
39493: LD_VAR 0 4
39497: NOT
39498: IFFALSE 39502
// continue ;
39500: GO 39417
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39502: LD_VAR 0 4
39506: PUSH
39507: LD_INT 81
39509: PUSH
39510: LD_VAR 0 3
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PPUSH
39519: CALL_OW 69
39523: IN
39524: PUSH
39525: LD_EXP 121
39529: PUSH
39530: LD_VAR 0 1
39534: ARRAY
39535: PUSH
39536: LD_VAR 0 2
39540: ARRAY
39541: PUSH
39542: LD_INT 1
39544: ARRAY
39545: PPUSH
39546: LD_EXP 121
39550: PUSH
39551: LD_VAR 0 1
39555: ARRAY
39556: PUSH
39557: LD_VAR 0 2
39561: ARRAY
39562: PUSH
39563: LD_INT 2
39565: ARRAY
39566: PPUSH
39567: CALL_OW 458
39571: AND
39572: IFFALSE 39666
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39574: LD_EXP 121
39578: PUSH
39579: LD_VAR 0 1
39583: ARRAY
39584: PUSH
39585: LD_VAR 0 2
39589: ARRAY
39590: PUSH
39591: LD_INT 1
39593: ARRAY
39594: PPUSH
39595: LD_EXP 121
39599: PUSH
39600: LD_VAR 0 1
39604: ARRAY
39605: PUSH
39606: LD_VAR 0 2
39610: ARRAY
39611: PUSH
39612: LD_INT 2
39614: ARRAY
39615: PPUSH
39616: LD_VAR 0 3
39620: PPUSH
39621: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39625: LD_ADDR_EXP 121
39629: PUSH
39630: LD_EXP 121
39634: PPUSH
39635: LD_VAR 0 1
39639: PPUSH
39640: LD_EXP 121
39644: PUSH
39645: LD_VAR 0 1
39649: ARRAY
39650: PPUSH
39651: LD_VAR 0 2
39655: PPUSH
39656: CALL_OW 3
39660: PPUSH
39661: CALL_OW 1
39665: ST_TO_ADDR
// end ; end ;
39666: GO 39417
39668: POP
39669: POP
// end ;
39670: GO 39335
39672: POP
39673: POP
// end ;
39674: PPOPN 4
39676: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39677: LD_INT 0
39679: PPUSH
39680: PPUSH
// result := false ;
39681: LD_ADDR_VAR 0 4
39685: PUSH
39686: LD_INT 0
39688: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39689: LD_VAR 0 1
39693: PPUSH
39694: CALL_OW 264
39698: PUSH
39699: LD_INT 81
39701: EQUAL
39702: NOT
39703: IFFALSE 39707
// exit ;
39705: GO 39947
// index := GetElementIndex ( minersList , unit ) ;
39707: LD_ADDR_VAR 0 5
39711: PUSH
39712: LD_EXP 120
39716: PPUSH
39717: LD_VAR 0 1
39721: PPUSH
39722: CALL 46005 0 2
39726: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39727: LD_EXP 121
39731: PUSH
39732: LD_VAR 0 5
39736: ARRAY
39737: PUSH
39738: LD_EXP 122
39742: GREATEREQUAL
39743: IFFALSE 39747
// exit ;
39745: GO 39947
// ComMoveXY ( unit , x , y ) ;
39747: LD_VAR 0 1
39751: PPUSH
39752: LD_VAR 0 2
39756: PPUSH
39757: LD_VAR 0 3
39761: PPUSH
39762: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39766: LD_INT 35
39768: PPUSH
39769: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39773: LD_VAR 0 1
39777: PPUSH
39778: LD_VAR 0 2
39782: PPUSH
39783: LD_VAR 0 3
39787: PPUSH
39788: CALL 77766 0 3
39792: NOT
39793: PUSH
39794: LD_VAR 0 1
39798: PPUSH
39799: CALL_OW 314
39803: AND
39804: IFFALSE 39808
// exit ;
39806: GO 39947
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39808: LD_VAR 0 2
39812: PPUSH
39813: LD_VAR 0 3
39817: PPUSH
39818: CALL_OW 428
39822: PUSH
39823: LD_VAR 0 1
39827: EQUAL
39828: PUSH
39829: LD_VAR 0 1
39833: PPUSH
39834: CALL_OW 314
39838: NOT
39839: AND
39840: IFFALSE 39766
// PlaySoundXY ( x , y , PlantMine ) ;
39842: LD_VAR 0 2
39846: PPUSH
39847: LD_VAR 0 3
39851: PPUSH
39852: LD_STRING PlantMine
39854: PPUSH
39855: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39859: LD_VAR 0 2
39863: PPUSH
39864: LD_VAR 0 3
39868: PPUSH
39869: LD_VAR 0 1
39873: PPUSH
39874: CALL_OW 255
39878: PPUSH
39879: LD_INT 0
39881: PPUSH
39882: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39886: LD_ADDR_EXP 121
39890: PUSH
39891: LD_EXP 121
39895: PPUSH
39896: LD_VAR 0 5
39900: PUSH
39901: LD_EXP 121
39905: PUSH
39906: LD_VAR 0 5
39910: ARRAY
39911: PUSH
39912: LD_INT 1
39914: PLUS
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PPUSH
39920: LD_VAR 0 2
39924: PUSH
39925: LD_VAR 0 3
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PPUSH
39934: CALL 46220 0 3
39938: ST_TO_ADDR
// result := true ;
39939: LD_ADDR_VAR 0 4
39943: PUSH
39944: LD_INT 1
39946: ST_TO_ADDR
// end ;
39947: LD_VAR 0 4
39951: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39952: LD_INT 0
39954: PPUSH
39955: PPUSH
39956: PPUSH
// if not unit in minersList then
39957: LD_VAR 0 1
39961: PUSH
39962: LD_EXP 120
39966: IN
39967: NOT
39968: IFFALSE 39972
// exit ;
39970: GO 40364
// index := GetElementIndex ( minersList , unit ) ;
39972: LD_ADDR_VAR 0 6
39976: PUSH
39977: LD_EXP 120
39981: PPUSH
39982: LD_VAR 0 1
39986: PPUSH
39987: CALL 46005 0 2
39991: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39992: LD_ADDR_VAR 0 5
39996: PUSH
39997: DOUBLE
39998: LD_EXP 121
40002: PUSH
40003: LD_VAR 0 6
40007: ARRAY
40008: INC
40009: ST_TO_ADDR
40010: LD_INT 1
40012: PUSH
40013: FOR_DOWNTO
40014: IFFALSE 40175
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40016: LD_EXP 121
40020: PUSH
40021: LD_VAR 0 6
40025: ARRAY
40026: PUSH
40027: LD_VAR 0 5
40031: ARRAY
40032: PUSH
40033: LD_INT 1
40035: ARRAY
40036: PUSH
40037: LD_VAR 0 2
40041: EQUAL
40042: PUSH
40043: LD_EXP 121
40047: PUSH
40048: LD_VAR 0 6
40052: ARRAY
40053: PUSH
40054: LD_VAR 0 5
40058: ARRAY
40059: PUSH
40060: LD_INT 2
40062: ARRAY
40063: PUSH
40064: LD_VAR 0 3
40068: EQUAL
40069: AND
40070: IFFALSE 40173
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40072: LD_EXP 121
40076: PUSH
40077: LD_VAR 0 6
40081: ARRAY
40082: PUSH
40083: LD_VAR 0 5
40087: ARRAY
40088: PUSH
40089: LD_INT 1
40091: ARRAY
40092: PPUSH
40093: LD_EXP 121
40097: PUSH
40098: LD_VAR 0 6
40102: ARRAY
40103: PUSH
40104: LD_VAR 0 5
40108: ARRAY
40109: PUSH
40110: LD_INT 2
40112: ARRAY
40113: PPUSH
40114: LD_VAR 0 1
40118: PPUSH
40119: CALL_OW 255
40123: PPUSH
40124: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40128: LD_ADDR_EXP 121
40132: PUSH
40133: LD_EXP 121
40137: PPUSH
40138: LD_VAR 0 6
40142: PPUSH
40143: LD_EXP 121
40147: PUSH
40148: LD_VAR 0 6
40152: ARRAY
40153: PPUSH
40154: LD_VAR 0 5
40158: PPUSH
40159: CALL_OW 3
40163: PPUSH
40164: CALL_OW 1
40168: ST_TO_ADDR
// exit ;
40169: POP
40170: POP
40171: GO 40364
// end ; end ;
40173: GO 40013
40175: POP
40176: POP
// for i := minerMinesList [ index ] downto 1 do
40177: LD_ADDR_VAR 0 5
40181: PUSH
40182: DOUBLE
40183: LD_EXP 121
40187: PUSH
40188: LD_VAR 0 6
40192: ARRAY
40193: INC
40194: ST_TO_ADDR
40195: LD_INT 1
40197: PUSH
40198: FOR_DOWNTO
40199: IFFALSE 40362
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40201: LD_EXP 121
40205: PUSH
40206: LD_VAR 0 6
40210: ARRAY
40211: PUSH
40212: LD_VAR 0 5
40216: ARRAY
40217: PUSH
40218: LD_INT 1
40220: ARRAY
40221: PPUSH
40222: LD_EXP 121
40226: PUSH
40227: LD_VAR 0 6
40231: ARRAY
40232: PUSH
40233: LD_VAR 0 5
40237: ARRAY
40238: PUSH
40239: LD_INT 2
40241: ARRAY
40242: PPUSH
40243: LD_VAR 0 2
40247: PPUSH
40248: LD_VAR 0 3
40252: PPUSH
40253: CALL_OW 298
40257: PUSH
40258: LD_INT 6
40260: LESS
40261: IFFALSE 40360
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40263: LD_EXP 121
40267: PUSH
40268: LD_VAR 0 6
40272: ARRAY
40273: PUSH
40274: LD_VAR 0 5
40278: ARRAY
40279: PUSH
40280: LD_INT 1
40282: ARRAY
40283: PPUSH
40284: LD_EXP 121
40288: PUSH
40289: LD_VAR 0 6
40293: ARRAY
40294: PUSH
40295: LD_VAR 0 5
40299: ARRAY
40300: PUSH
40301: LD_INT 2
40303: ARRAY
40304: PPUSH
40305: LD_VAR 0 1
40309: PPUSH
40310: CALL_OW 255
40314: PPUSH
40315: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40319: LD_ADDR_EXP 121
40323: PUSH
40324: LD_EXP 121
40328: PPUSH
40329: LD_VAR 0 6
40333: PPUSH
40334: LD_EXP 121
40338: PUSH
40339: LD_VAR 0 6
40343: ARRAY
40344: PPUSH
40345: LD_VAR 0 5
40349: PPUSH
40350: CALL_OW 3
40354: PPUSH
40355: CALL_OW 1
40359: ST_TO_ADDR
// end ; end ;
40360: GO 40198
40362: POP
40363: POP
// end ;
40364: LD_VAR 0 4
40368: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40369: LD_INT 0
40371: PPUSH
40372: PPUSH
40373: PPUSH
40374: PPUSH
40375: PPUSH
40376: PPUSH
40377: PPUSH
40378: PPUSH
40379: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40380: LD_VAR 0 1
40384: PPUSH
40385: CALL_OW 264
40389: PUSH
40390: LD_INT 81
40392: EQUAL
40393: NOT
40394: PUSH
40395: LD_VAR 0 1
40399: PUSH
40400: LD_EXP 120
40404: IN
40405: NOT
40406: OR
40407: IFFALSE 40411
// exit ;
40409: GO 40733
// index := GetElementIndex ( minersList , unit ) ;
40411: LD_ADDR_VAR 0 6
40415: PUSH
40416: LD_EXP 120
40420: PPUSH
40421: LD_VAR 0 1
40425: PPUSH
40426: CALL 46005 0 2
40430: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40431: LD_ADDR_VAR 0 8
40435: PUSH
40436: LD_EXP 122
40440: PUSH
40441: LD_EXP 121
40445: PUSH
40446: LD_VAR 0 6
40450: ARRAY
40451: MINUS
40452: ST_TO_ADDR
// if not minesFreeAmount then
40453: LD_VAR 0 8
40457: NOT
40458: IFFALSE 40462
// exit ;
40460: GO 40733
// tmp := [ ] ;
40462: LD_ADDR_VAR 0 7
40466: PUSH
40467: EMPTY
40468: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40469: LD_ADDR_VAR 0 5
40473: PUSH
40474: DOUBLE
40475: LD_INT 1
40477: DEC
40478: ST_TO_ADDR
40479: LD_VAR 0 8
40483: PUSH
40484: FOR_TO
40485: IFFALSE 40680
// begin _d := rand ( 0 , 5 ) ;
40487: LD_ADDR_VAR 0 11
40491: PUSH
40492: LD_INT 0
40494: PPUSH
40495: LD_INT 5
40497: PPUSH
40498: CALL_OW 12
40502: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40503: LD_ADDR_VAR 0 12
40507: PUSH
40508: LD_INT 2
40510: PPUSH
40511: LD_INT 6
40513: PPUSH
40514: CALL_OW 12
40518: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40519: LD_ADDR_VAR 0 9
40523: PUSH
40524: LD_VAR 0 2
40528: PPUSH
40529: LD_VAR 0 11
40533: PPUSH
40534: LD_VAR 0 12
40538: PPUSH
40539: CALL_OW 272
40543: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40544: LD_ADDR_VAR 0 10
40548: PUSH
40549: LD_VAR 0 3
40553: PPUSH
40554: LD_VAR 0 11
40558: PPUSH
40559: LD_VAR 0 12
40563: PPUSH
40564: CALL_OW 273
40568: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40569: LD_VAR 0 9
40573: PPUSH
40574: LD_VAR 0 10
40578: PPUSH
40579: CALL_OW 488
40583: PUSH
40584: LD_VAR 0 9
40588: PUSH
40589: LD_VAR 0 10
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_VAR 0 7
40602: IN
40603: NOT
40604: AND
40605: PUSH
40606: LD_VAR 0 9
40610: PPUSH
40611: LD_VAR 0 10
40615: PPUSH
40616: CALL_OW 458
40620: NOT
40621: AND
40622: IFFALSE 40664
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40624: LD_ADDR_VAR 0 7
40628: PUSH
40629: LD_VAR 0 7
40633: PPUSH
40634: LD_VAR 0 7
40638: PUSH
40639: LD_INT 1
40641: PLUS
40642: PPUSH
40643: LD_VAR 0 9
40647: PUSH
40648: LD_VAR 0 10
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PPUSH
40657: CALL_OW 1
40661: ST_TO_ADDR
40662: GO 40678
// i := i - 1 ;
40664: LD_ADDR_VAR 0 5
40668: PUSH
40669: LD_VAR 0 5
40673: PUSH
40674: LD_INT 1
40676: MINUS
40677: ST_TO_ADDR
// end ;
40678: GO 40484
40680: POP
40681: POP
// for i in tmp do
40682: LD_ADDR_VAR 0 5
40686: PUSH
40687: LD_VAR 0 7
40691: PUSH
40692: FOR_IN
40693: IFFALSE 40731
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40695: LD_VAR 0 1
40699: PPUSH
40700: LD_VAR 0 5
40704: PUSH
40705: LD_INT 1
40707: ARRAY
40708: PPUSH
40709: LD_VAR 0 5
40713: PUSH
40714: LD_INT 2
40716: ARRAY
40717: PPUSH
40718: CALL 39677 0 3
40722: NOT
40723: IFFALSE 40729
// exit ;
40725: POP
40726: POP
40727: GO 40733
40729: GO 40692
40731: POP
40732: POP
// end ;
40733: LD_VAR 0 4
40737: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40738: LD_INT 0
40740: PPUSH
40741: PPUSH
40742: PPUSH
40743: PPUSH
40744: PPUSH
40745: PPUSH
40746: PPUSH
40747: PPUSH
40748: PPUSH
// if GetClass ( unit ) <> class_sniper then
40749: LD_VAR 0 1
40753: PPUSH
40754: CALL_OW 257
40758: PUSH
40759: LD_INT 5
40761: NONEQUAL
40762: IFFALSE 40766
// exit ;
40764: GO 41232
// dist := 8 ;
40766: LD_ADDR_VAR 0 5
40770: PUSH
40771: LD_INT 8
40773: ST_TO_ADDR
// viewRange := 12 ;
40774: LD_ADDR_VAR 0 8
40778: PUSH
40779: LD_INT 12
40781: ST_TO_ADDR
// side := GetSide ( unit ) ;
40782: LD_ADDR_VAR 0 6
40786: PUSH
40787: LD_VAR 0 1
40791: PPUSH
40792: CALL_OW 255
40796: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40797: LD_INT 61
40799: PPUSH
40800: LD_VAR 0 6
40804: PPUSH
40805: CALL_OW 321
40809: PUSH
40810: LD_INT 2
40812: EQUAL
40813: IFFALSE 40823
// viewRange := 16 ;
40815: LD_ADDR_VAR 0 8
40819: PUSH
40820: LD_INT 16
40822: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40823: LD_VAR 0 1
40827: PPUSH
40828: LD_VAR 0 2
40832: PPUSH
40833: LD_VAR 0 3
40837: PPUSH
40838: CALL_OW 297
40842: PUSH
40843: LD_VAR 0 5
40847: GREATER
40848: IFFALSE 40927
// begin ComMoveXY ( unit , x , y ) ;
40850: LD_VAR 0 1
40854: PPUSH
40855: LD_VAR 0 2
40859: PPUSH
40860: LD_VAR 0 3
40864: PPUSH
40865: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40869: LD_INT 35
40871: PPUSH
40872: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40876: LD_VAR 0 1
40880: PPUSH
40881: LD_VAR 0 2
40885: PPUSH
40886: LD_VAR 0 3
40890: PPUSH
40891: CALL 77766 0 3
40895: NOT
40896: IFFALSE 40900
// exit ;
40898: GO 41232
// until GetDistUnitXY ( unit , x , y ) < dist ;
40900: LD_VAR 0 1
40904: PPUSH
40905: LD_VAR 0 2
40909: PPUSH
40910: LD_VAR 0 3
40914: PPUSH
40915: CALL_OW 297
40919: PUSH
40920: LD_VAR 0 5
40924: LESS
40925: IFFALSE 40869
// end ; ComTurnXY ( unit , x , y ) ;
40927: LD_VAR 0 1
40931: PPUSH
40932: LD_VAR 0 2
40936: PPUSH
40937: LD_VAR 0 3
40941: PPUSH
40942: CALL_OW 118
// repeat if Multiplayer then
40946: LD_OWVAR 4
40950: IFFALSE 40961
// wait ( 35 ) else
40952: LD_INT 35
40954: PPUSH
40955: CALL_OW 67
40959: GO 40968
// wait ( 5 ) ;
40961: LD_INT 5
40963: PPUSH
40964: CALL_OW 67
// _d := GetDir ( unit ) ;
40968: LD_ADDR_VAR 0 11
40972: PUSH
40973: LD_VAR 0 1
40977: PPUSH
40978: CALL_OW 254
40982: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
40983: LD_ADDR_VAR 0 7
40987: PUSH
40988: LD_VAR 0 1
40992: PPUSH
40993: CALL_OW 250
40997: PPUSH
40998: LD_VAR 0 1
41002: PPUSH
41003: CALL_OW 251
41007: PPUSH
41008: LD_VAR 0 2
41012: PPUSH
41013: LD_VAR 0 3
41017: PPUSH
41018: CALL 80374 0 4
41022: ST_TO_ADDR
// until dir = _d ;
41023: LD_VAR 0 7
41027: PUSH
41028: LD_VAR 0 11
41032: EQUAL
41033: IFFALSE 40946
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41035: LD_ADDR_VAR 0 9
41039: PUSH
41040: LD_VAR 0 1
41044: PPUSH
41045: CALL_OW 250
41049: PPUSH
41050: LD_VAR 0 7
41054: PPUSH
41055: LD_VAR 0 5
41059: PPUSH
41060: CALL_OW 272
41064: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41065: LD_ADDR_VAR 0 10
41069: PUSH
41070: LD_VAR 0 1
41074: PPUSH
41075: CALL_OW 251
41079: PPUSH
41080: LD_VAR 0 7
41084: PPUSH
41085: LD_VAR 0 5
41089: PPUSH
41090: CALL_OW 273
41094: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41095: LD_VAR 0 9
41099: PPUSH
41100: LD_VAR 0 10
41104: PPUSH
41105: CALL_OW 488
41109: NOT
41110: IFFALSE 41114
// exit ;
41112: GO 41232
// ComAnimCustom ( unit , 1 ) ;
41114: LD_VAR 0 1
41118: PPUSH
41119: LD_INT 1
41121: PPUSH
41122: CALL_OW 592
// p := 0 ;
41126: LD_ADDR_VAR 0 12
41130: PUSH
41131: LD_INT 0
41133: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41134: LD_VAR 0 9
41138: PPUSH
41139: LD_VAR 0 10
41143: PPUSH
41144: LD_VAR 0 6
41148: PPUSH
41149: LD_VAR 0 8
41153: PPUSH
41154: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41158: LD_INT 35
41160: PPUSH
41161: CALL_OW 67
// p := Inc ( p ) ;
41165: LD_ADDR_VAR 0 12
41169: PUSH
41170: LD_VAR 0 12
41174: PPUSH
41175: CALL 80330 0 1
41179: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41180: LD_VAR 0 12
41184: PUSH
41185: LD_INT 3
41187: EQUAL
41188: PUSH
41189: LD_VAR 0 1
41193: PPUSH
41194: CALL_OW 302
41198: NOT
41199: OR
41200: PUSH
41201: LD_VAR 0 1
41205: PPUSH
41206: CALL_OW 301
41210: OR
41211: IFFALSE 41158
// RemoveSeeing ( _x , _y , side ) ;
41213: LD_VAR 0 9
41217: PPUSH
41218: LD_VAR 0 10
41222: PPUSH
41223: LD_VAR 0 6
41227: PPUSH
41228: CALL_OW 331
// end ; end_of_file
41232: LD_VAR 0 4
41236: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41237: LD_INT 0
41239: PPUSH
41240: PPUSH
// if exist_mode then
41241: LD_VAR 0 2
41245: IFFALSE 41291
// begin unit := CreateCharacter ( prefix & ident ) ;
41247: LD_ADDR_VAR 0 5
41251: PUSH
41252: LD_VAR 0 3
41256: PUSH
41257: LD_VAR 0 1
41261: STR
41262: PPUSH
41263: CALL_OW 34
41267: ST_TO_ADDR
// if unit then
41268: LD_VAR 0 5
41272: IFFALSE 41289
// DeleteCharacters ( prefix & ident ) ;
41274: LD_VAR 0 3
41278: PUSH
41279: LD_VAR 0 1
41283: STR
41284: PPUSH
41285: CALL_OW 40
// end else
41289: GO 41306
// unit := NewCharacter ( ident ) ;
41291: LD_ADDR_VAR 0 5
41295: PUSH
41296: LD_VAR 0 1
41300: PPUSH
41301: CALL_OW 25
41305: ST_TO_ADDR
// result := unit ;
41306: LD_ADDR_VAR 0 4
41310: PUSH
41311: LD_VAR 0 5
41315: ST_TO_ADDR
// end ;
41316: LD_VAR 0 4
41320: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41321: LD_INT 0
41323: PPUSH
41324: PPUSH
// if not side or not nation then
41325: LD_VAR 0 1
41329: NOT
41330: PUSH
41331: LD_VAR 0 2
41335: NOT
41336: OR
41337: IFFALSE 41341
// exit ;
41339: GO 42109
// case nation of nation_american :
41341: LD_VAR 0 2
41345: PUSH
41346: LD_INT 1
41348: DOUBLE
41349: EQUAL
41350: IFTRUE 41354
41352: GO 41568
41354: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41355: LD_ADDR_VAR 0 4
41359: PUSH
41360: LD_INT 35
41362: PUSH
41363: LD_INT 45
41365: PUSH
41366: LD_INT 46
41368: PUSH
41369: LD_INT 47
41371: PUSH
41372: LD_INT 82
41374: PUSH
41375: LD_INT 83
41377: PUSH
41378: LD_INT 84
41380: PUSH
41381: LD_INT 85
41383: PUSH
41384: LD_INT 86
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: LD_INT 2
41392: PUSH
41393: LD_INT 6
41395: PUSH
41396: LD_INT 15
41398: PUSH
41399: LD_INT 16
41401: PUSH
41402: LD_INT 7
41404: PUSH
41405: LD_INT 12
41407: PUSH
41408: LD_INT 13
41410: PUSH
41411: LD_INT 10
41413: PUSH
41414: LD_INT 14
41416: PUSH
41417: LD_INT 20
41419: PUSH
41420: LD_INT 21
41422: PUSH
41423: LD_INT 22
41425: PUSH
41426: LD_INT 25
41428: PUSH
41429: LD_INT 32
41431: PUSH
41432: LD_INT 27
41434: PUSH
41435: LD_INT 36
41437: PUSH
41438: LD_INT 69
41440: PUSH
41441: LD_INT 39
41443: PUSH
41444: LD_INT 34
41446: PUSH
41447: LD_INT 40
41449: PUSH
41450: LD_INT 48
41452: PUSH
41453: LD_INT 49
41455: PUSH
41456: LD_INT 50
41458: PUSH
41459: LD_INT 51
41461: PUSH
41462: LD_INT 52
41464: PUSH
41465: LD_INT 53
41467: PUSH
41468: LD_INT 54
41470: PUSH
41471: LD_INT 55
41473: PUSH
41474: LD_INT 56
41476: PUSH
41477: LD_INT 57
41479: PUSH
41480: LD_INT 58
41482: PUSH
41483: LD_INT 59
41485: PUSH
41486: LD_INT 60
41488: PUSH
41489: LD_INT 61
41491: PUSH
41492: LD_INT 62
41494: PUSH
41495: LD_INT 80
41497: PUSH
41498: LD_INT 82
41500: PUSH
41501: LD_INT 83
41503: PUSH
41504: LD_INT 84
41506: PUSH
41507: LD_INT 85
41509: PUSH
41510: LD_INT 86
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: ST_TO_ADDR
41566: GO 42033
41568: LD_INT 2
41570: DOUBLE
41571: EQUAL
41572: IFTRUE 41576
41574: GO 41802
41576: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41577: LD_ADDR_VAR 0 4
41581: PUSH
41582: LD_INT 35
41584: PUSH
41585: LD_INT 45
41587: PUSH
41588: LD_INT 46
41590: PUSH
41591: LD_INT 47
41593: PUSH
41594: LD_INT 82
41596: PUSH
41597: LD_INT 83
41599: PUSH
41600: LD_INT 84
41602: PUSH
41603: LD_INT 85
41605: PUSH
41606: LD_INT 87
41608: PUSH
41609: LD_INT 70
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: LD_INT 11
41617: PUSH
41618: LD_INT 3
41620: PUSH
41621: LD_INT 4
41623: PUSH
41624: LD_INT 5
41626: PUSH
41627: LD_INT 6
41629: PUSH
41630: LD_INT 15
41632: PUSH
41633: LD_INT 18
41635: PUSH
41636: LD_INT 7
41638: PUSH
41639: LD_INT 17
41641: PUSH
41642: LD_INT 8
41644: PUSH
41645: LD_INT 20
41647: PUSH
41648: LD_INT 21
41650: PUSH
41651: LD_INT 22
41653: PUSH
41654: LD_INT 72
41656: PUSH
41657: LD_INT 26
41659: PUSH
41660: LD_INT 69
41662: PUSH
41663: LD_INT 39
41665: PUSH
41666: LD_INT 40
41668: PUSH
41669: LD_INT 41
41671: PUSH
41672: LD_INT 42
41674: PUSH
41675: LD_INT 43
41677: PUSH
41678: LD_INT 48
41680: PUSH
41681: LD_INT 49
41683: PUSH
41684: LD_INT 50
41686: PUSH
41687: LD_INT 51
41689: PUSH
41690: LD_INT 52
41692: PUSH
41693: LD_INT 53
41695: PUSH
41696: LD_INT 54
41698: PUSH
41699: LD_INT 55
41701: PUSH
41702: LD_INT 56
41704: PUSH
41705: LD_INT 60
41707: PUSH
41708: LD_INT 61
41710: PUSH
41711: LD_INT 62
41713: PUSH
41714: LD_INT 66
41716: PUSH
41717: LD_INT 67
41719: PUSH
41720: LD_INT 68
41722: PUSH
41723: LD_INT 81
41725: PUSH
41726: LD_INT 82
41728: PUSH
41729: LD_INT 83
41731: PUSH
41732: LD_INT 84
41734: PUSH
41735: LD_INT 85
41737: PUSH
41738: LD_INT 87
41740: PUSH
41741: LD_INT 88
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: ST_TO_ADDR
41800: GO 42033
41802: LD_INT 3
41804: DOUBLE
41805: EQUAL
41806: IFTRUE 41810
41808: GO 42032
41810: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41811: LD_ADDR_VAR 0 4
41815: PUSH
41816: LD_INT 46
41818: PUSH
41819: LD_INT 47
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: LD_INT 82
41830: PUSH
41831: LD_INT 83
41833: PUSH
41834: LD_INT 84
41836: PUSH
41837: LD_INT 85
41839: PUSH
41840: LD_INT 86
41842: PUSH
41843: LD_INT 11
41845: PUSH
41846: LD_INT 9
41848: PUSH
41849: LD_INT 20
41851: PUSH
41852: LD_INT 19
41854: PUSH
41855: LD_INT 21
41857: PUSH
41858: LD_INT 24
41860: PUSH
41861: LD_INT 22
41863: PUSH
41864: LD_INT 25
41866: PUSH
41867: LD_INT 28
41869: PUSH
41870: LD_INT 29
41872: PUSH
41873: LD_INT 30
41875: PUSH
41876: LD_INT 31
41878: PUSH
41879: LD_INT 37
41881: PUSH
41882: LD_INT 38
41884: PUSH
41885: LD_INT 32
41887: PUSH
41888: LD_INT 27
41890: PUSH
41891: LD_INT 33
41893: PUSH
41894: LD_INT 69
41896: PUSH
41897: LD_INT 39
41899: PUSH
41900: LD_INT 34
41902: PUSH
41903: LD_INT 40
41905: PUSH
41906: LD_INT 71
41908: PUSH
41909: LD_INT 23
41911: PUSH
41912: LD_INT 44
41914: PUSH
41915: LD_INT 48
41917: PUSH
41918: LD_INT 49
41920: PUSH
41921: LD_INT 50
41923: PUSH
41924: LD_INT 51
41926: PUSH
41927: LD_INT 52
41929: PUSH
41930: LD_INT 53
41932: PUSH
41933: LD_INT 54
41935: PUSH
41936: LD_INT 55
41938: PUSH
41939: LD_INT 56
41941: PUSH
41942: LD_INT 57
41944: PUSH
41945: LD_INT 58
41947: PUSH
41948: LD_INT 59
41950: PUSH
41951: LD_INT 63
41953: PUSH
41954: LD_INT 64
41956: PUSH
41957: LD_INT 65
41959: PUSH
41960: LD_INT 82
41962: PUSH
41963: LD_INT 83
41965: PUSH
41966: LD_INT 84
41968: PUSH
41969: LD_INT 85
41971: PUSH
41972: LD_INT 86
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: ST_TO_ADDR
42030: GO 42033
42032: POP
// if state > - 1 and state < 3 then
42033: LD_VAR 0 3
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: GREATER
42042: PUSH
42043: LD_VAR 0 3
42047: PUSH
42048: LD_INT 3
42050: LESS
42051: AND
42052: IFFALSE 42109
// for i in result do
42054: LD_ADDR_VAR 0 5
42058: PUSH
42059: LD_VAR 0 4
42063: PUSH
42064: FOR_IN
42065: IFFALSE 42107
// if GetTech ( i , side ) <> state then
42067: LD_VAR 0 5
42071: PPUSH
42072: LD_VAR 0 1
42076: PPUSH
42077: CALL_OW 321
42081: PUSH
42082: LD_VAR 0 3
42086: NONEQUAL
42087: IFFALSE 42105
// result := result diff i ;
42089: LD_ADDR_VAR 0 4
42093: PUSH
42094: LD_VAR 0 4
42098: PUSH
42099: LD_VAR 0 5
42103: DIFF
42104: ST_TO_ADDR
42105: GO 42064
42107: POP
42108: POP
// end ;
42109: LD_VAR 0 4
42113: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42114: LD_INT 0
42116: PPUSH
42117: PPUSH
42118: PPUSH
// result := true ;
42119: LD_ADDR_VAR 0 3
42123: PUSH
42124: LD_INT 1
42126: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42127: LD_ADDR_VAR 0 5
42131: PUSH
42132: LD_VAR 0 2
42136: PPUSH
42137: CALL_OW 480
42141: ST_TO_ADDR
// if not tmp then
42142: LD_VAR 0 5
42146: NOT
42147: IFFALSE 42151
// exit ;
42149: GO 42200
// for i in tmp do
42151: LD_ADDR_VAR 0 4
42155: PUSH
42156: LD_VAR 0 5
42160: PUSH
42161: FOR_IN
42162: IFFALSE 42198
// if GetTech ( i , side ) <> state_researched then
42164: LD_VAR 0 4
42168: PPUSH
42169: LD_VAR 0 1
42173: PPUSH
42174: CALL_OW 321
42178: PUSH
42179: LD_INT 2
42181: NONEQUAL
42182: IFFALSE 42196
// begin result := false ;
42184: LD_ADDR_VAR 0 3
42188: PUSH
42189: LD_INT 0
42191: ST_TO_ADDR
// exit ;
42192: POP
42193: POP
42194: GO 42200
// end ;
42196: GO 42161
42198: POP
42199: POP
// end ;
42200: LD_VAR 0 3
42204: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42205: LD_INT 0
42207: PPUSH
42208: PPUSH
42209: PPUSH
42210: PPUSH
42211: PPUSH
42212: PPUSH
42213: PPUSH
42214: PPUSH
42215: PPUSH
42216: PPUSH
42217: PPUSH
42218: PPUSH
42219: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42220: LD_VAR 0 1
42224: NOT
42225: PUSH
42226: LD_VAR 0 1
42230: PPUSH
42231: CALL_OW 257
42235: PUSH
42236: LD_INT 9
42238: NONEQUAL
42239: OR
42240: IFFALSE 42244
// exit ;
42242: GO 42817
// side := GetSide ( unit ) ;
42244: LD_ADDR_VAR 0 9
42248: PUSH
42249: LD_VAR 0 1
42253: PPUSH
42254: CALL_OW 255
42258: ST_TO_ADDR
// tech_space := tech_spacanom ;
42259: LD_ADDR_VAR 0 12
42263: PUSH
42264: LD_INT 29
42266: ST_TO_ADDR
// tech_time := tech_taurad ;
42267: LD_ADDR_VAR 0 13
42271: PUSH
42272: LD_INT 28
42274: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42275: LD_ADDR_VAR 0 11
42279: PUSH
42280: LD_VAR 0 1
42284: PPUSH
42285: CALL_OW 310
42289: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42290: LD_VAR 0 11
42294: PPUSH
42295: CALL_OW 247
42299: PUSH
42300: LD_INT 2
42302: EQUAL
42303: IFFALSE 42307
// exit ;
42305: GO 42817
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42307: LD_ADDR_VAR 0 8
42311: PUSH
42312: LD_INT 81
42314: PUSH
42315: LD_VAR 0 9
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 3
42326: PUSH
42327: LD_INT 21
42329: PUSH
42330: LD_INT 3
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PPUSH
42345: CALL_OW 69
42349: ST_TO_ADDR
// if not tmp then
42350: LD_VAR 0 8
42354: NOT
42355: IFFALSE 42359
// exit ;
42357: GO 42817
// if in_unit then
42359: LD_VAR 0 11
42363: IFFALSE 42387
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42365: LD_ADDR_VAR 0 10
42369: PUSH
42370: LD_VAR 0 8
42374: PPUSH
42375: LD_VAR 0 11
42379: PPUSH
42380: CALL_OW 74
42384: ST_TO_ADDR
42385: GO 42407
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42387: LD_ADDR_VAR 0 10
42391: PUSH
42392: LD_VAR 0 8
42396: PPUSH
42397: LD_VAR 0 1
42401: PPUSH
42402: CALL_OW 74
42406: ST_TO_ADDR
// if not enemy then
42407: LD_VAR 0 10
42411: NOT
42412: IFFALSE 42416
// exit ;
42414: GO 42817
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42416: LD_VAR 0 11
42420: PUSH
42421: LD_VAR 0 11
42425: PPUSH
42426: LD_VAR 0 10
42430: PPUSH
42431: CALL_OW 296
42435: PUSH
42436: LD_INT 13
42438: GREATER
42439: AND
42440: PUSH
42441: LD_VAR 0 1
42445: PPUSH
42446: LD_VAR 0 10
42450: PPUSH
42451: CALL_OW 296
42455: PUSH
42456: LD_INT 12
42458: GREATER
42459: OR
42460: IFFALSE 42464
// exit ;
42462: GO 42817
// missile := [ 1 ] ;
42464: LD_ADDR_VAR 0 14
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: EMPTY
42473: LIST
42474: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42475: LD_VAR 0 9
42479: PPUSH
42480: LD_VAR 0 12
42484: PPUSH
42485: CALL_OW 325
42489: IFFALSE 42518
// missile := Replace ( missile , missile + 1 , 2 ) ;
42491: LD_ADDR_VAR 0 14
42495: PUSH
42496: LD_VAR 0 14
42500: PPUSH
42501: LD_VAR 0 14
42505: PUSH
42506: LD_INT 1
42508: PLUS
42509: PPUSH
42510: LD_INT 2
42512: PPUSH
42513: CALL_OW 1
42517: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42518: LD_VAR 0 9
42522: PPUSH
42523: LD_VAR 0 13
42527: PPUSH
42528: CALL_OW 325
42532: PUSH
42533: LD_VAR 0 10
42537: PPUSH
42538: CALL_OW 255
42542: PPUSH
42543: LD_VAR 0 13
42547: PPUSH
42548: CALL_OW 325
42552: NOT
42553: AND
42554: IFFALSE 42583
// missile := Replace ( missile , missile + 1 , 3 ) ;
42556: LD_ADDR_VAR 0 14
42560: PUSH
42561: LD_VAR 0 14
42565: PPUSH
42566: LD_VAR 0 14
42570: PUSH
42571: LD_INT 1
42573: PLUS
42574: PPUSH
42575: LD_INT 3
42577: PPUSH
42578: CALL_OW 1
42582: ST_TO_ADDR
// if missile < 2 then
42583: LD_VAR 0 14
42587: PUSH
42588: LD_INT 2
42590: LESS
42591: IFFALSE 42595
// exit ;
42593: GO 42817
// x := GetX ( enemy ) ;
42595: LD_ADDR_VAR 0 4
42599: PUSH
42600: LD_VAR 0 10
42604: PPUSH
42605: CALL_OW 250
42609: ST_TO_ADDR
// y := GetY ( enemy ) ;
42610: LD_ADDR_VAR 0 5
42614: PUSH
42615: LD_VAR 0 10
42619: PPUSH
42620: CALL_OW 251
42624: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42625: LD_ADDR_VAR 0 6
42629: PUSH
42630: LD_VAR 0 4
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PPUSH
42639: LD_INT 1
42641: PPUSH
42642: CALL_OW 12
42646: PLUS
42647: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42648: LD_ADDR_VAR 0 7
42652: PUSH
42653: LD_VAR 0 5
42657: PUSH
42658: LD_INT 1
42660: NEG
42661: PPUSH
42662: LD_INT 1
42664: PPUSH
42665: CALL_OW 12
42669: PLUS
42670: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42671: LD_VAR 0 6
42675: PPUSH
42676: LD_VAR 0 7
42680: PPUSH
42681: CALL_OW 488
42685: NOT
42686: IFFALSE 42708
// begin _x := x ;
42688: LD_ADDR_VAR 0 6
42692: PUSH
42693: LD_VAR 0 4
42697: ST_TO_ADDR
// _y := y ;
42698: LD_ADDR_VAR 0 7
42702: PUSH
42703: LD_VAR 0 5
42707: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42708: LD_ADDR_VAR 0 3
42712: PUSH
42713: LD_INT 1
42715: PPUSH
42716: LD_VAR 0 14
42720: PPUSH
42721: CALL_OW 12
42725: ST_TO_ADDR
// case i of 1 :
42726: LD_VAR 0 3
42730: PUSH
42731: LD_INT 1
42733: DOUBLE
42734: EQUAL
42735: IFTRUE 42739
42737: GO 42756
42739: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42740: LD_VAR 0 1
42744: PPUSH
42745: LD_VAR 0 10
42749: PPUSH
42750: CALL_OW 115
42754: GO 42817
42756: LD_INT 2
42758: DOUBLE
42759: EQUAL
42760: IFTRUE 42764
42762: GO 42786
42764: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42765: LD_VAR 0 1
42769: PPUSH
42770: LD_VAR 0 6
42774: PPUSH
42775: LD_VAR 0 7
42779: PPUSH
42780: CALL_OW 153
42784: GO 42817
42786: LD_INT 3
42788: DOUBLE
42789: EQUAL
42790: IFTRUE 42794
42792: GO 42816
42794: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42795: LD_VAR 0 1
42799: PPUSH
42800: LD_VAR 0 6
42804: PPUSH
42805: LD_VAR 0 7
42809: PPUSH
42810: CALL_OW 154
42814: GO 42817
42816: POP
// end ;
42817: LD_VAR 0 2
42821: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42822: LD_INT 0
42824: PPUSH
42825: PPUSH
42826: PPUSH
42827: PPUSH
42828: PPUSH
42829: PPUSH
// if not unit or not building then
42830: LD_VAR 0 1
42834: NOT
42835: PUSH
42836: LD_VAR 0 2
42840: NOT
42841: OR
42842: IFFALSE 42846
// exit ;
42844: GO 43004
// x := GetX ( building ) ;
42846: LD_ADDR_VAR 0 5
42850: PUSH
42851: LD_VAR 0 2
42855: PPUSH
42856: CALL_OW 250
42860: ST_TO_ADDR
// y := GetY ( building ) ;
42861: LD_ADDR_VAR 0 6
42865: PUSH
42866: LD_VAR 0 2
42870: PPUSH
42871: CALL_OW 251
42875: ST_TO_ADDR
// for i = 0 to 5 do
42876: LD_ADDR_VAR 0 4
42880: PUSH
42881: DOUBLE
42882: LD_INT 0
42884: DEC
42885: ST_TO_ADDR
42886: LD_INT 5
42888: PUSH
42889: FOR_TO
42890: IFFALSE 43002
// begin _x := ShiftX ( x , i , 3 ) ;
42892: LD_ADDR_VAR 0 7
42896: PUSH
42897: LD_VAR 0 5
42901: PPUSH
42902: LD_VAR 0 4
42906: PPUSH
42907: LD_INT 3
42909: PPUSH
42910: CALL_OW 272
42914: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42915: LD_ADDR_VAR 0 8
42919: PUSH
42920: LD_VAR 0 6
42924: PPUSH
42925: LD_VAR 0 4
42929: PPUSH
42930: LD_INT 3
42932: PPUSH
42933: CALL_OW 273
42937: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42938: LD_VAR 0 7
42942: PPUSH
42943: LD_VAR 0 8
42947: PPUSH
42948: CALL_OW 488
42952: NOT
42953: IFFALSE 42957
// continue ;
42955: GO 42889
// if HexInfo ( _x , _y ) = 0 then
42957: LD_VAR 0 7
42961: PPUSH
42962: LD_VAR 0 8
42966: PPUSH
42967: CALL_OW 428
42971: PUSH
42972: LD_INT 0
42974: EQUAL
42975: IFFALSE 43000
// begin ComMoveXY ( unit , _x , _y ) ;
42977: LD_VAR 0 1
42981: PPUSH
42982: LD_VAR 0 7
42986: PPUSH
42987: LD_VAR 0 8
42991: PPUSH
42992: CALL_OW 111
// exit ;
42996: POP
42997: POP
42998: GO 43004
// end ; end ;
43000: GO 42889
43002: POP
43003: POP
// end ;
43004: LD_VAR 0 3
43008: RET
// export function ScanBase ( side , base_area ) ; begin
43009: LD_INT 0
43011: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43012: LD_ADDR_VAR 0 3
43016: PUSH
43017: LD_VAR 0 2
43021: PPUSH
43022: LD_INT 81
43024: PUSH
43025: LD_VAR 0 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PPUSH
43034: CALL_OW 70
43038: ST_TO_ADDR
// end ;
43039: LD_VAR 0 3
43043: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43044: LD_INT 0
43046: PPUSH
43047: PPUSH
43048: PPUSH
43049: PPUSH
// result := false ;
43050: LD_ADDR_VAR 0 2
43054: PUSH
43055: LD_INT 0
43057: ST_TO_ADDR
// side := GetSide ( unit ) ;
43058: LD_ADDR_VAR 0 3
43062: PUSH
43063: LD_VAR 0 1
43067: PPUSH
43068: CALL_OW 255
43072: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43073: LD_ADDR_VAR 0 4
43077: PUSH
43078: LD_VAR 0 1
43082: PPUSH
43083: CALL_OW 248
43087: ST_TO_ADDR
// case nat of 1 :
43088: LD_VAR 0 4
43092: PUSH
43093: LD_INT 1
43095: DOUBLE
43096: EQUAL
43097: IFTRUE 43101
43099: GO 43112
43101: POP
// tech := tech_lassight ; 2 :
43102: LD_ADDR_VAR 0 5
43106: PUSH
43107: LD_INT 12
43109: ST_TO_ADDR
43110: GO 43151
43112: LD_INT 2
43114: DOUBLE
43115: EQUAL
43116: IFTRUE 43120
43118: GO 43131
43120: POP
// tech := tech_mortar ; 3 :
43121: LD_ADDR_VAR 0 5
43125: PUSH
43126: LD_INT 41
43128: ST_TO_ADDR
43129: GO 43151
43131: LD_INT 3
43133: DOUBLE
43134: EQUAL
43135: IFTRUE 43139
43137: GO 43150
43139: POP
// tech := tech_bazooka ; end ;
43140: LD_ADDR_VAR 0 5
43144: PUSH
43145: LD_INT 44
43147: ST_TO_ADDR
43148: GO 43151
43150: POP
// if Researched ( side , tech ) then
43151: LD_VAR 0 3
43155: PPUSH
43156: LD_VAR 0 5
43160: PPUSH
43161: CALL_OW 325
43165: IFFALSE 43192
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43167: LD_ADDR_VAR 0 2
43171: PUSH
43172: LD_INT 5
43174: PUSH
43175: LD_INT 8
43177: PUSH
43178: LD_INT 9
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: LIST
43185: PUSH
43186: LD_VAR 0 4
43190: ARRAY
43191: ST_TO_ADDR
// end ;
43192: LD_VAR 0 2
43196: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43197: LD_INT 0
43199: PPUSH
43200: PPUSH
43201: PPUSH
// if not mines then
43202: LD_VAR 0 2
43206: NOT
43207: IFFALSE 43211
// exit ;
43209: GO 43355
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43211: LD_ADDR_VAR 0 5
43215: PUSH
43216: LD_INT 81
43218: PUSH
43219: LD_VAR 0 1
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 3
43230: PUSH
43231: LD_INT 21
43233: PUSH
43234: LD_INT 3
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PPUSH
43249: CALL_OW 69
43253: ST_TO_ADDR
// for i in mines do
43254: LD_ADDR_VAR 0 4
43258: PUSH
43259: LD_VAR 0 2
43263: PUSH
43264: FOR_IN
43265: IFFALSE 43353
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43267: LD_VAR 0 4
43271: PUSH
43272: LD_INT 1
43274: ARRAY
43275: PPUSH
43276: LD_VAR 0 4
43280: PUSH
43281: LD_INT 2
43283: ARRAY
43284: PPUSH
43285: CALL_OW 458
43289: NOT
43290: IFFALSE 43294
// continue ;
43292: GO 43264
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43294: LD_VAR 0 4
43298: PUSH
43299: LD_INT 1
43301: ARRAY
43302: PPUSH
43303: LD_VAR 0 4
43307: PUSH
43308: LD_INT 2
43310: ARRAY
43311: PPUSH
43312: CALL_OW 428
43316: PUSH
43317: LD_VAR 0 5
43321: IN
43322: IFFALSE 43351
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43324: LD_VAR 0 4
43328: PUSH
43329: LD_INT 1
43331: ARRAY
43332: PPUSH
43333: LD_VAR 0 4
43337: PUSH
43338: LD_INT 2
43340: ARRAY
43341: PPUSH
43342: LD_VAR 0 1
43346: PPUSH
43347: CALL_OW 456
// end ;
43351: GO 43264
43353: POP
43354: POP
// end ;
43355: LD_VAR 0 3
43359: RET
// export function Count ( array ) ; begin
43360: LD_INT 0
43362: PPUSH
// result := array + 0 ;
43363: LD_ADDR_VAR 0 2
43367: PUSH
43368: LD_VAR 0 1
43372: PUSH
43373: LD_INT 0
43375: PLUS
43376: ST_TO_ADDR
// end ;
43377: LD_VAR 0 2
43381: RET
// export function IsEmpty ( building ) ; begin
43382: LD_INT 0
43384: PPUSH
// if not building then
43385: LD_VAR 0 1
43389: NOT
43390: IFFALSE 43394
// exit ;
43392: GO 43437
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43394: LD_ADDR_VAR 0 2
43398: PUSH
43399: LD_VAR 0 1
43403: PUSH
43404: LD_INT 22
43406: PUSH
43407: LD_VAR 0 1
43411: PPUSH
43412: CALL_OW 255
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 58
43423: PUSH
43424: EMPTY
43425: LIST
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PPUSH
43431: CALL_OW 69
43435: IN
43436: ST_TO_ADDR
// end ;
43437: LD_VAR 0 2
43441: RET
// export function IsNotFull ( building ) ; var places ; begin
43442: LD_INT 0
43444: PPUSH
43445: PPUSH
// if not building then
43446: LD_VAR 0 1
43450: NOT
43451: IFFALSE 43455
// exit ;
43453: GO 43483
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43455: LD_ADDR_VAR 0 2
43459: PUSH
43460: LD_VAR 0 1
43464: PPUSH
43465: LD_INT 3
43467: PUSH
43468: LD_INT 62
43470: PUSH
43471: EMPTY
43472: LIST
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PPUSH
43478: CALL_OW 72
43482: ST_TO_ADDR
// end ;
43483: LD_VAR 0 2
43487: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43488: LD_INT 0
43490: PPUSH
43491: PPUSH
43492: PPUSH
43493: PPUSH
// tmp := [ ] ;
43494: LD_ADDR_VAR 0 3
43498: PUSH
43499: EMPTY
43500: ST_TO_ADDR
// list := [ ] ;
43501: LD_ADDR_VAR 0 5
43505: PUSH
43506: EMPTY
43507: ST_TO_ADDR
// for i = 16 to 25 do
43508: LD_ADDR_VAR 0 4
43512: PUSH
43513: DOUBLE
43514: LD_INT 16
43516: DEC
43517: ST_TO_ADDR
43518: LD_INT 25
43520: PUSH
43521: FOR_TO
43522: IFFALSE 43595
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43524: LD_ADDR_VAR 0 3
43528: PUSH
43529: LD_VAR 0 3
43533: PUSH
43534: LD_INT 22
43536: PUSH
43537: LD_VAR 0 1
43541: PPUSH
43542: CALL_OW 255
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 91
43553: PUSH
43554: LD_VAR 0 1
43558: PUSH
43559: LD_INT 6
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 30
43569: PUSH
43570: LD_VAR 0 4
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: LIST
43583: PUSH
43584: EMPTY
43585: LIST
43586: PPUSH
43587: CALL_OW 69
43591: ADD
43592: ST_TO_ADDR
43593: GO 43521
43595: POP
43596: POP
// for i = 1 to tmp do
43597: LD_ADDR_VAR 0 4
43601: PUSH
43602: DOUBLE
43603: LD_INT 1
43605: DEC
43606: ST_TO_ADDR
43607: LD_VAR 0 3
43611: PUSH
43612: FOR_TO
43613: IFFALSE 43701
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43615: LD_ADDR_VAR 0 5
43619: PUSH
43620: LD_VAR 0 5
43624: PUSH
43625: LD_VAR 0 3
43629: PUSH
43630: LD_VAR 0 4
43634: ARRAY
43635: PPUSH
43636: CALL_OW 266
43640: PUSH
43641: LD_VAR 0 3
43645: PUSH
43646: LD_VAR 0 4
43650: ARRAY
43651: PPUSH
43652: CALL_OW 250
43656: PUSH
43657: LD_VAR 0 3
43661: PUSH
43662: LD_VAR 0 4
43666: ARRAY
43667: PPUSH
43668: CALL_OW 251
43672: PUSH
43673: LD_VAR 0 3
43677: PUSH
43678: LD_VAR 0 4
43682: ARRAY
43683: PPUSH
43684: CALL_OW 254
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: PUSH
43695: EMPTY
43696: LIST
43697: ADD
43698: ST_TO_ADDR
43699: GO 43612
43701: POP
43702: POP
// result := list ;
43703: LD_ADDR_VAR 0 2
43707: PUSH
43708: LD_VAR 0 5
43712: ST_TO_ADDR
// end ;
43713: LD_VAR 0 2
43717: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43718: LD_INT 0
43720: PPUSH
43721: PPUSH
43722: PPUSH
43723: PPUSH
43724: PPUSH
43725: PPUSH
43726: PPUSH
// if not factory then
43727: LD_VAR 0 1
43731: NOT
43732: IFFALSE 43736
// exit ;
43734: GO 44329
// if control = control_apeman then
43736: LD_VAR 0 4
43740: PUSH
43741: LD_INT 5
43743: EQUAL
43744: IFFALSE 43853
// begin tmp := UnitsInside ( factory ) ;
43746: LD_ADDR_VAR 0 8
43750: PUSH
43751: LD_VAR 0 1
43755: PPUSH
43756: CALL_OW 313
43760: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43761: LD_VAR 0 8
43765: PPUSH
43766: LD_INT 25
43768: PUSH
43769: LD_INT 12
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PPUSH
43776: CALL_OW 72
43780: NOT
43781: IFFALSE 43791
// control := control_manual ;
43783: LD_ADDR_VAR 0 4
43787: PUSH
43788: LD_INT 1
43790: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43791: LD_ADDR_VAR 0 8
43795: PUSH
43796: LD_VAR 0 1
43800: PPUSH
43801: CALL 43488 0 1
43805: ST_TO_ADDR
// if tmp then
43806: LD_VAR 0 8
43810: IFFALSE 43853
// begin for i in tmp do
43812: LD_ADDR_VAR 0 7
43816: PUSH
43817: LD_VAR 0 8
43821: PUSH
43822: FOR_IN
43823: IFFALSE 43851
// if i [ 1 ] = b_ext_radio then
43825: LD_VAR 0 7
43829: PUSH
43830: LD_INT 1
43832: ARRAY
43833: PUSH
43834: LD_INT 22
43836: EQUAL
43837: IFFALSE 43849
// begin control := control_remote ;
43839: LD_ADDR_VAR 0 4
43843: PUSH
43844: LD_INT 2
43846: ST_TO_ADDR
// break ;
43847: GO 43851
// end ;
43849: GO 43822
43851: POP
43852: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43853: LD_VAR 0 1
43857: PPUSH
43858: LD_VAR 0 2
43862: PPUSH
43863: LD_VAR 0 3
43867: PPUSH
43868: LD_VAR 0 4
43872: PPUSH
43873: LD_VAR 0 5
43877: PPUSH
43878: CALL_OW 448
43882: IFFALSE 43917
// begin result := [ chassis , engine , control , weapon ] ;
43884: LD_ADDR_VAR 0 6
43888: PUSH
43889: LD_VAR 0 2
43893: PUSH
43894: LD_VAR 0 3
43898: PUSH
43899: LD_VAR 0 4
43903: PUSH
43904: LD_VAR 0 5
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: ST_TO_ADDR
// exit ;
43915: GO 44329
// end ; _chassis := AvailableChassisList ( factory ) ;
43917: LD_ADDR_VAR 0 9
43921: PUSH
43922: LD_VAR 0 1
43926: PPUSH
43927: CALL_OW 475
43931: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43932: LD_ADDR_VAR 0 11
43936: PUSH
43937: LD_VAR 0 1
43941: PPUSH
43942: CALL_OW 476
43946: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43947: LD_ADDR_VAR 0 12
43951: PUSH
43952: LD_VAR 0 1
43956: PPUSH
43957: CALL_OW 477
43961: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43962: LD_ADDR_VAR 0 10
43966: PUSH
43967: LD_VAR 0 1
43971: PPUSH
43972: CALL_OW 478
43976: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43977: LD_VAR 0 9
43981: NOT
43982: PUSH
43983: LD_VAR 0 11
43987: NOT
43988: OR
43989: PUSH
43990: LD_VAR 0 12
43994: NOT
43995: OR
43996: PUSH
43997: LD_VAR 0 10
44001: NOT
44002: OR
44003: IFFALSE 44038
// begin result := [ chassis , engine , control , weapon ] ;
44005: LD_ADDR_VAR 0 6
44009: PUSH
44010: LD_VAR 0 2
44014: PUSH
44015: LD_VAR 0 3
44019: PUSH
44020: LD_VAR 0 4
44024: PUSH
44025: LD_VAR 0 5
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: ST_TO_ADDR
// exit ;
44036: GO 44329
// end ; if not chassis in _chassis then
44038: LD_VAR 0 2
44042: PUSH
44043: LD_VAR 0 9
44047: IN
44048: NOT
44049: IFFALSE 44075
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44051: LD_ADDR_VAR 0 2
44055: PUSH
44056: LD_VAR 0 9
44060: PUSH
44061: LD_INT 1
44063: PPUSH
44064: LD_VAR 0 9
44068: PPUSH
44069: CALL_OW 12
44073: ARRAY
44074: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44075: LD_VAR 0 2
44079: PPUSH
44080: LD_VAR 0 3
44084: PPUSH
44085: CALL 44334 0 2
44089: NOT
44090: IFFALSE 44149
// repeat engine := _engine [ 1 ] ;
44092: LD_ADDR_VAR 0 3
44096: PUSH
44097: LD_VAR 0 11
44101: PUSH
44102: LD_INT 1
44104: ARRAY
44105: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44106: LD_ADDR_VAR 0 11
44110: PUSH
44111: LD_VAR 0 11
44115: PPUSH
44116: LD_INT 1
44118: PPUSH
44119: CALL_OW 3
44123: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44124: LD_VAR 0 2
44128: PPUSH
44129: LD_VAR 0 3
44133: PPUSH
44134: CALL 44334 0 2
44138: PUSH
44139: LD_VAR 0 11
44143: PUSH
44144: EMPTY
44145: EQUAL
44146: OR
44147: IFFALSE 44092
// if not control in _control then
44149: LD_VAR 0 4
44153: PUSH
44154: LD_VAR 0 12
44158: IN
44159: NOT
44160: IFFALSE 44186
// control := _control [ rand ( 1 , _control ) ] ;
44162: LD_ADDR_VAR 0 4
44166: PUSH
44167: LD_VAR 0 12
44171: PUSH
44172: LD_INT 1
44174: PPUSH
44175: LD_VAR 0 12
44179: PPUSH
44180: CALL_OW 12
44184: ARRAY
44185: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44186: LD_VAR 0 2
44190: PPUSH
44191: LD_VAR 0 5
44195: PPUSH
44196: CALL 44554 0 2
44200: NOT
44201: IFFALSE 44260
// repeat weapon := _weapon [ 1 ] ;
44203: LD_ADDR_VAR 0 5
44207: PUSH
44208: LD_VAR 0 10
44212: PUSH
44213: LD_INT 1
44215: ARRAY
44216: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44217: LD_ADDR_VAR 0 10
44221: PUSH
44222: LD_VAR 0 10
44226: PPUSH
44227: LD_INT 1
44229: PPUSH
44230: CALL_OW 3
44234: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44235: LD_VAR 0 2
44239: PPUSH
44240: LD_VAR 0 5
44244: PPUSH
44245: CALL 44554 0 2
44249: PUSH
44250: LD_VAR 0 10
44254: PUSH
44255: EMPTY
44256: EQUAL
44257: OR
44258: IFFALSE 44203
// result := [ ] ;
44260: LD_ADDR_VAR 0 6
44264: PUSH
44265: EMPTY
44266: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44267: LD_VAR 0 1
44271: PPUSH
44272: LD_VAR 0 2
44276: PPUSH
44277: LD_VAR 0 3
44281: PPUSH
44282: LD_VAR 0 4
44286: PPUSH
44287: LD_VAR 0 5
44291: PPUSH
44292: CALL_OW 448
44296: IFFALSE 44329
// result := [ chassis , engine , control , weapon ] ;
44298: LD_ADDR_VAR 0 6
44302: PUSH
44303: LD_VAR 0 2
44307: PUSH
44308: LD_VAR 0 3
44312: PUSH
44313: LD_VAR 0 4
44317: PUSH
44318: LD_VAR 0 5
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: ST_TO_ADDR
// end ;
44329: LD_VAR 0 6
44333: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44334: LD_INT 0
44336: PPUSH
// if not chassis or not engine then
44337: LD_VAR 0 1
44341: NOT
44342: PUSH
44343: LD_VAR 0 2
44347: NOT
44348: OR
44349: IFFALSE 44353
// exit ;
44351: GO 44549
// case engine of engine_solar :
44353: LD_VAR 0 2
44357: PUSH
44358: LD_INT 2
44360: DOUBLE
44361: EQUAL
44362: IFTRUE 44366
44364: GO 44404
44366: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44367: LD_ADDR_VAR 0 3
44371: PUSH
44372: LD_INT 11
44374: PUSH
44375: LD_INT 12
44377: PUSH
44378: LD_INT 13
44380: PUSH
44381: LD_INT 14
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: LD_INT 2
44389: PUSH
44390: LD_INT 3
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: ST_TO_ADDR
44402: GO 44533
44404: LD_INT 1
44406: DOUBLE
44407: EQUAL
44408: IFTRUE 44412
44410: GO 44474
44412: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44413: LD_ADDR_VAR 0 3
44417: PUSH
44418: LD_INT 11
44420: PUSH
44421: LD_INT 12
44423: PUSH
44424: LD_INT 13
44426: PUSH
44427: LD_INT 14
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: LD_INT 3
44438: PUSH
44439: LD_INT 4
44441: PUSH
44442: LD_INT 5
44444: PUSH
44445: LD_INT 21
44447: PUSH
44448: LD_INT 23
44450: PUSH
44451: LD_INT 22
44453: PUSH
44454: LD_INT 24
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: ST_TO_ADDR
44472: GO 44533
44474: LD_INT 3
44476: DOUBLE
44477: EQUAL
44478: IFTRUE 44482
44480: GO 44532
44482: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44483: LD_ADDR_VAR 0 3
44487: PUSH
44488: LD_INT 13
44490: PUSH
44491: LD_INT 14
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: LD_INT 3
44499: PUSH
44500: LD_INT 4
44502: PUSH
44503: LD_INT 5
44505: PUSH
44506: LD_INT 21
44508: PUSH
44509: LD_INT 22
44511: PUSH
44512: LD_INT 23
44514: PUSH
44515: LD_INT 24
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: ST_TO_ADDR
44530: GO 44533
44532: POP
// result := ( chassis in result ) ;
44533: LD_ADDR_VAR 0 3
44537: PUSH
44538: LD_VAR 0 1
44542: PUSH
44543: LD_VAR 0 3
44547: IN
44548: ST_TO_ADDR
// end ;
44549: LD_VAR 0 3
44553: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44554: LD_INT 0
44556: PPUSH
// if not chassis or not weapon then
44557: LD_VAR 0 1
44561: NOT
44562: PUSH
44563: LD_VAR 0 2
44567: NOT
44568: OR
44569: IFFALSE 44573
// exit ;
44571: GO 45633
// case weapon of us_machine_gun :
44573: LD_VAR 0 2
44577: PUSH
44578: LD_INT 2
44580: DOUBLE
44581: EQUAL
44582: IFTRUE 44586
44584: GO 44616
44586: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44587: LD_ADDR_VAR 0 3
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: LD_INT 2
44597: PUSH
44598: LD_INT 3
44600: PUSH
44601: LD_INT 4
44603: PUSH
44604: LD_INT 5
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: ST_TO_ADDR
44614: GO 45617
44616: LD_INT 3
44618: DOUBLE
44619: EQUAL
44620: IFTRUE 44624
44622: GO 44654
44624: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44625: LD_ADDR_VAR 0 3
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: LD_INT 3
44638: PUSH
44639: LD_INT 4
44641: PUSH
44642: LD_INT 5
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: ST_TO_ADDR
44652: GO 45617
44654: LD_INT 11
44656: DOUBLE
44657: EQUAL
44658: IFTRUE 44662
44660: GO 44692
44662: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44663: LD_ADDR_VAR 0 3
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: LD_INT 2
44673: PUSH
44674: LD_INT 3
44676: PUSH
44677: LD_INT 4
44679: PUSH
44680: LD_INT 5
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: ST_TO_ADDR
44690: GO 45617
44692: LD_INT 4
44694: DOUBLE
44695: EQUAL
44696: IFTRUE 44700
44698: GO 44726
44700: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44701: LD_ADDR_VAR 0 3
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: LD_INT 3
44711: PUSH
44712: LD_INT 4
44714: PUSH
44715: LD_INT 5
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: ST_TO_ADDR
44724: GO 45617
44726: LD_INT 5
44728: DOUBLE
44729: EQUAL
44730: IFTRUE 44734
44732: GO 44760
44734: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44735: LD_ADDR_VAR 0 3
44739: PUSH
44740: LD_INT 2
44742: PUSH
44743: LD_INT 3
44745: PUSH
44746: LD_INT 4
44748: PUSH
44749: LD_INT 5
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: ST_TO_ADDR
44758: GO 45617
44760: LD_INT 9
44762: DOUBLE
44763: EQUAL
44764: IFTRUE 44768
44766: GO 44794
44768: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44769: LD_ADDR_VAR 0 3
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: LD_INT 3
44779: PUSH
44780: LD_INT 4
44782: PUSH
44783: LD_INT 5
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: ST_TO_ADDR
44792: GO 45617
44794: LD_INT 7
44796: DOUBLE
44797: EQUAL
44798: IFTRUE 44802
44800: GO 44828
44802: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44803: LD_ADDR_VAR 0 3
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: LD_INT 3
44813: PUSH
44814: LD_INT 4
44816: PUSH
44817: LD_INT 5
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: ST_TO_ADDR
44826: GO 45617
44828: LD_INT 12
44830: DOUBLE
44831: EQUAL
44832: IFTRUE 44836
44834: GO 44862
44836: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44837: LD_ADDR_VAR 0 3
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: LD_INT 3
44847: PUSH
44848: LD_INT 4
44850: PUSH
44851: LD_INT 5
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: ST_TO_ADDR
44860: GO 45617
44862: LD_INT 13
44864: DOUBLE
44865: EQUAL
44866: IFTRUE 44870
44868: GO 44896
44870: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44871: LD_ADDR_VAR 0 3
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: LD_INT 3
44881: PUSH
44882: LD_INT 4
44884: PUSH
44885: LD_INT 5
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: ST_TO_ADDR
44894: GO 45617
44896: LD_INT 14
44898: DOUBLE
44899: EQUAL
44900: IFTRUE 44904
44902: GO 44922
44904: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44905: LD_ADDR_VAR 0 3
44909: PUSH
44910: LD_INT 4
44912: PUSH
44913: LD_INT 5
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: ST_TO_ADDR
44920: GO 45617
44922: LD_INT 6
44924: DOUBLE
44925: EQUAL
44926: IFTRUE 44930
44928: GO 44948
44930: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44931: LD_ADDR_VAR 0 3
44935: PUSH
44936: LD_INT 4
44938: PUSH
44939: LD_INT 5
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: ST_TO_ADDR
44946: GO 45617
44948: LD_INT 10
44950: DOUBLE
44951: EQUAL
44952: IFTRUE 44956
44954: GO 44974
44956: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44957: LD_ADDR_VAR 0 3
44961: PUSH
44962: LD_INT 4
44964: PUSH
44965: LD_INT 5
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: ST_TO_ADDR
44972: GO 45617
44974: LD_INT 22
44976: DOUBLE
44977: EQUAL
44978: IFTRUE 44982
44980: GO 45008
44982: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44983: LD_ADDR_VAR 0 3
44987: PUSH
44988: LD_INT 11
44990: PUSH
44991: LD_INT 12
44993: PUSH
44994: LD_INT 13
44996: PUSH
44997: LD_INT 14
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: ST_TO_ADDR
45006: GO 45617
45008: LD_INT 23
45010: DOUBLE
45011: EQUAL
45012: IFTRUE 45016
45014: GO 45042
45016: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45017: LD_ADDR_VAR 0 3
45021: PUSH
45022: LD_INT 11
45024: PUSH
45025: LD_INT 12
45027: PUSH
45028: LD_INT 13
45030: PUSH
45031: LD_INT 14
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: ST_TO_ADDR
45040: GO 45617
45042: LD_INT 24
45044: DOUBLE
45045: EQUAL
45046: IFTRUE 45050
45048: GO 45076
45050: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45051: LD_ADDR_VAR 0 3
45055: PUSH
45056: LD_INT 11
45058: PUSH
45059: LD_INT 12
45061: PUSH
45062: LD_INT 13
45064: PUSH
45065: LD_INT 14
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: ST_TO_ADDR
45074: GO 45617
45076: LD_INT 30
45078: DOUBLE
45079: EQUAL
45080: IFTRUE 45084
45082: GO 45110
45084: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45085: LD_ADDR_VAR 0 3
45089: PUSH
45090: LD_INT 11
45092: PUSH
45093: LD_INT 12
45095: PUSH
45096: LD_INT 13
45098: PUSH
45099: LD_INT 14
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: ST_TO_ADDR
45108: GO 45617
45110: LD_INT 25
45112: DOUBLE
45113: EQUAL
45114: IFTRUE 45118
45116: GO 45136
45118: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45119: LD_ADDR_VAR 0 3
45123: PUSH
45124: LD_INT 13
45126: PUSH
45127: LD_INT 14
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: ST_TO_ADDR
45134: GO 45617
45136: LD_INT 27
45138: DOUBLE
45139: EQUAL
45140: IFTRUE 45144
45142: GO 45162
45144: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45145: LD_ADDR_VAR 0 3
45149: PUSH
45150: LD_INT 13
45152: PUSH
45153: LD_INT 14
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: ST_TO_ADDR
45160: GO 45617
45162: LD_INT 92
45164: DOUBLE
45165: EQUAL
45166: IFTRUE 45170
45168: GO 45196
45170: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45171: LD_ADDR_VAR 0 3
45175: PUSH
45176: LD_INT 11
45178: PUSH
45179: LD_INT 12
45181: PUSH
45182: LD_INT 13
45184: PUSH
45185: LD_INT 14
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: ST_TO_ADDR
45194: GO 45617
45196: LD_INT 28
45198: DOUBLE
45199: EQUAL
45200: IFTRUE 45204
45202: GO 45222
45204: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45205: LD_ADDR_VAR 0 3
45209: PUSH
45210: LD_INT 13
45212: PUSH
45213: LD_INT 14
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: ST_TO_ADDR
45220: GO 45617
45222: LD_INT 29
45224: DOUBLE
45225: EQUAL
45226: IFTRUE 45230
45228: GO 45248
45230: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45231: LD_ADDR_VAR 0 3
45235: PUSH
45236: LD_INT 13
45238: PUSH
45239: LD_INT 14
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: ST_TO_ADDR
45246: GO 45617
45248: LD_INT 31
45250: DOUBLE
45251: EQUAL
45252: IFTRUE 45256
45254: GO 45274
45256: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45257: LD_ADDR_VAR 0 3
45261: PUSH
45262: LD_INT 13
45264: PUSH
45265: LD_INT 14
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: ST_TO_ADDR
45272: GO 45617
45274: LD_INT 26
45276: DOUBLE
45277: EQUAL
45278: IFTRUE 45282
45280: GO 45300
45282: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45283: LD_ADDR_VAR 0 3
45287: PUSH
45288: LD_INT 13
45290: PUSH
45291: LD_INT 14
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: ST_TO_ADDR
45298: GO 45617
45300: LD_INT 42
45302: DOUBLE
45303: EQUAL
45304: IFTRUE 45308
45306: GO 45334
45308: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45309: LD_ADDR_VAR 0 3
45313: PUSH
45314: LD_INT 21
45316: PUSH
45317: LD_INT 22
45319: PUSH
45320: LD_INT 23
45322: PUSH
45323: LD_INT 24
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: ST_TO_ADDR
45332: GO 45617
45334: LD_INT 43
45336: DOUBLE
45337: EQUAL
45338: IFTRUE 45342
45340: GO 45368
45342: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45343: LD_ADDR_VAR 0 3
45347: PUSH
45348: LD_INT 21
45350: PUSH
45351: LD_INT 22
45353: PUSH
45354: LD_INT 23
45356: PUSH
45357: LD_INT 24
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: ST_TO_ADDR
45366: GO 45617
45368: LD_INT 44
45370: DOUBLE
45371: EQUAL
45372: IFTRUE 45376
45374: GO 45402
45376: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45377: LD_ADDR_VAR 0 3
45381: PUSH
45382: LD_INT 21
45384: PUSH
45385: LD_INT 22
45387: PUSH
45388: LD_INT 23
45390: PUSH
45391: LD_INT 24
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: ST_TO_ADDR
45400: GO 45617
45402: LD_INT 45
45404: DOUBLE
45405: EQUAL
45406: IFTRUE 45410
45408: GO 45436
45410: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45411: LD_ADDR_VAR 0 3
45415: PUSH
45416: LD_INT 21
45418: PUSH
45419: LD_INT 22
45421: PUSH
45422: LD_INT 23
45424: PUSH
45425: LD_INT 24
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: ST_TO_ADDR
45434: GO 45617
45436: LD_INT 49
45438: DOUBLE
45439: EQUAL
45440: IFTRUE 45444
45442: GO 45470
45444: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45445: LD_ADDR_VAR 0 3
45449: PUSH
45450: LD_INT 21
45452: PUSH
45453: LD_INT 22
45455: PUSH
45456: LD_INT 23
45458: PUSH
45459: LD_INT 24
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: ST_TO_ADDR
45468: GO 45617
45470: LD_INT 51
45472: DOUBLE
45473: EQUAL
45474: IFTRUE 45478
45476: GO 45504
45478: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45479: LD_ADDR_VAR 0 3
45483: PUSH
45484: LD_INT 21
45486: PUSH
45487: LD_INT 22
45489: PUSH
45490: LD_INT 23
45492: PUSH
45493: LD_INT 24
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: ST_TO_ADDR
45502: GO 45617
45504: LD_INT 52
45506: DOUBLE
45507: EQUAL
45508: IFTRUE 45512
45510: GO 45538
45512: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45513: LD_ADDR_VAR 0 3
45517: PUSH
45518: LD_INT 21
45520: PUSH
45521: LD_INT 22
45523: PUSH
45524: LD_INT 23
45526: PUSH
45527: LD_INT 24
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: ST_TO_ADDR
45536: GO 45617
45538: LD_INT 53
45540: DOUBLE
45541: EQUAL
45542: IFTRUE 45546
45544: GO 45564
45546: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45547: LD_ADDR_VAR 0 3
45551: PUSH
45552: LD_INT 23
45554: PUSH
45555: LD_INT 24
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: ST_TO_ADDR
45562: GO 45617
45564: LD_INT 46
45566: DOUBLE
45567: EQUAL
45568: IFTRUE 45572
45570: GO 45590
45572: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45573: LD_ADDR_VAR 0 3
45577: PUSH
45578: LD_INT 23
45580: PUSH
45581: LD_INT 24
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: ST_TO_ADDR
45588: GO 45617
45590: LD_INT 47
45592: DOUBLE
45593: EQUAL
45594: IFTRUE 45598
45596: GO 45616
45598: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45599: LD_ADDR_VAR 0 3
45603: PUSH
45604: LD_INT 23
45606: PUSH
45607: LD_INT 24
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: ST_TO_ADDR
45614: GO 45617
45616: POP
// result := ( chassis in result ) ;
45617: LD_ADDR_VAR 0 3
45621: PUSH
45622: LD_VAR 0 1
45626: PUSH
45627: LD_VAR 0 3
45631: IN
45632: ST_TO_ADDR
// end ;
45633: LD_VAR 0 3
45637: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45638: LD_INT 0
45640: PPUSH
45641: PPUSH
45642: PPUSH
45643: PPUSH
45644: PPUSH
45645: PPUSH
45646: PPUSH
// result := array ;
45647: LD_ADDR_VAR 0 5
45651: PUSH
45652: LD_VAR 0 1
45656: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45657: LD_VAR 0 1
45661: NOT
45662: PUSH
45663: LD_VAR 0 2
45667: NOT
45668: OR
45669: PUSH
45670: LD_VAR 0 3
45674: NOT
45675: OR
45676: PUSH
45677: LD_VAR 0 2
45681: PUSH
45682: LD_VAR 0 1
45686: GREATER
45687: OR
45688: PUSH
45689: LD_VAR 0 3
45693: PUSH
45694: LD_VAR 0 1
45698: GREATER
45699: OR
45700: IFFALSE 45704
// exit ;
45702: GO 46000
// if direction then
45704: LD_VAR 0 4
45708: IFFALSE 45772
// begin d := 1 ;
45710: LD_ADDR_VAR 0 9
45714: PUSH
45715: LD_INT 1
45717: ST_TO_ADDR
// if i_from > i_to then
45718: LD_VAR 0 2
45722: PUSH
45723: LD_VAR 0 3
45727: GREATER
45728: IFFALSE 45754
// length := ( array - i_from ) + i_to else
45730: LD_ADDR_VAR 0 11
45734: PUSH
45735: LD_VAR 0 1
45739: PUSH
45740: LD_VAR 0 2
45744: MINUS
45745: PUSH
45746: LD_VAR 0 3
45750: PLUS
45751: ST_TO_ADDR
45752: GO 45770
// length := i_to - i_from ;
45754: LD_ADDR_VAR 0 11
45758: PUSH
45759: LD_VAR 0 3
45763: PUSH
45764: LD_VAR 0 2
45768: MINUS
45769: ST_TO_ADDR
// end else
45770: GO 45833
// begin d := - 1 ;
45772: LD_ADDR_VAR 0 9
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: ST_TO_ADDR
// if i_from > i_to then
45781: LD_VAR 0 2
45785: PUSH
45786: LD_VAR 0 3
45790: GREATER
45791: IFFALSE 45811
// length := i_from - i_to else
45793: LD_ADDR_VAR 0 11
45797: PUSH
45798: LD_VAR 0 2
45802: PUSH
45803: LD_VAR 0 3
45807: MINUS
45808: ST_TO_ADDR
45809: GO 45833
// length := ( array - i_to ) + i_from ;
45811: LD_ADDR_VAR 0 11
45815: PUSH
45816: LD_VAR 0 1
45820: PUSH
45821: LD_VAR 0 3
45825: MINUS
45826: PUSH
45827: LD_VAR 0 2
45831: PLUS
45832: ST_TO_ADDR
// end ; if not length then
45833: LD_VAR 0 11
45837: NOT
45838: IFFALSE 45842
// exit ;
45840: GO 46000
// tmp := array ;
45842: LD_ADDR_VAR 0 10
45846: PUSH
45847: LD_VAR 0 1
45851: ST_TO_ADDR
// for i = 1 to length do
45852: LD_ADDR_VAR 0 6
45856: PUSH
45857: DOUBLE
45858: LD_INT 1
45860: DEC
45861: ST_TO_ADDR
45862: LD_VAR 0 11
45866: PUSH
45867: FOR_TO
45868: IFFALSE 45988
// begin for j = 1 to array do
45870: LD_ADDR_VAR 0 7
45874: PUSH
45875: DOUBLE
45876: LD_INT 1
45878: DEC
45879: ST_TO_ADDR
45880: LD_VAR 0 1
45884: PUSH
45885: FOR_TO
45886: IFFALSE 45974
// begin k := j + d ;
45888: LD_ADDR_VAR 0 8
45892: PUSH
45893: LD_VAR 0 7
45897: PUSH
45898: LD_VAR 0 9
45902: PLUS
45903: ST_TO_ADDR
// if k > array then
45904: LD_VAR 0 8
45908: PUSH
45909: LD_VAR 0 1
45913: GREATER
45914: IFFALSE 45924
// k := 1 ;
45916: LD_ADDR_VAR 0 8
45920: PUSH
45921: LD_INT 1
45923: ST_TO_ADDR
// if not k then
45924: LD_VAR 0 8
45928: NOT
45929: IFFALSE 45941
// k := array ;
45931: LD_ADDR_VAR 0 8
45935: PUSH
45936: LD_VAR 0 1
45940: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45941: LD_ADDR_VAR 0 10
45945: PUSH
45946: LD_VAR 0 10
45950: PPUSH
45951: LD_VAR 0 8
45955: PPUSH
45956: LD_VAR 0 1
45960: PUSH
45961: LD_VAR 0 7
45965: ARRAY
45966: PPUSH
45967: CALL_OW 1
45971: ST_TO_ADDR
// end ;
45972: GO 45885
45974: POP
45975: POP
// array := tmp ;
45976: LD_ADDR_VAR 0 1
45980: PUSH
45981: LD_VAR 0 10
45985: ST_TO_ADDR
// end ;
45986: GO 45867
45988: POP
45989: POP
// result := array ;
45990: LD_ADDR_VAR 0 5
45994: PUSH
45995: LD_VAR 0 1
45999: ST_TO_ADDR
// end ;
46000: LD_VAR 0 5
46004: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46005: LD_INT 0
46007: PPUSH
46008: PPUSH
// result := 0 ;
46009: LD_ADDR_VAR 0 3
46013: PUSH
46014: LD_INT 0
46016: ST_TO_ADDR
// if not array or not value in array then
46017: LD_VAR 0 1
46021: NOT
46022: PUSH
46023: LD_VAR 0 2
46027: PUSH
46028: LD_VAR 0 1
46032: IN
46033: NOT
46034: OR
46035: IFFALSE 46039
// exit ;
46037: GO 46093
// for i = 1 to array do
46039: LD_ADDR_VAR 0 4
46043: PUSH
46044: DOUBLE
46045: LD_INT 1
46047: DEC
46048: ST_TO_ADDR
46049: LD_VAR 0 1
46053: PUSH
46054: FOR_TO
46055: IFFALSE 46091
// if value = array [ i ] then
46057: LD_VAR 0 2
46061: PUSH
46062: LD_VAR 0 1
46066: PUSH
46067: LD_VAR 0 4
46071: ARRAY
46072: EQUAL
46073: IFFALSE 46089
// begin result := i ;
46075: LD_ADDR_VAR 0 3
46079: PUSH
46080: LD_VAR 0 4
46084: ST_TO_ADDR
// exit ;
46085: POP
46086: POP
46087: GO 46093
// end ;
46089: GO 46054
46091: POP
46092: POP
// end ;
46093: LD_VAR 0 3
46097: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46098: LD_INT 0
46100: PPUSH
// vc_chassis := chassis ;
46101: LD_ADDR_OWVAR 37
46105: PUSH
46106: LD_VAR 0 1
46110: ST_TO_ADDR
// vc_engine := engine ;
46111: LD_ADDR_OWVAR 39
46115: PUSH
46116: LD_VAR 0 2
46120: ST_TO_ADDR
// vc_control := control ;
46121: LD_ADDR_OWVAR 38
46125: PUSH
46126: LD_VAR 0 3
46130: ST_TO_ADDR
// vc_weapon := weapon ;
46131: LD_ADDR_OWVAR 40
46135: PUSH
46136: LD_VAR 0 4
46140: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46141: LD_ADDR_OWVAR 41
46145: PUSH
46146: LD_VAR 0 5
46150: ST_TO_ADDR
// end ;
46151: LD_VAR 0 6
46155: RET
// export function WantPlant ( unit ) ; var task ; begin
46156: LD_INT 0
46158: PPUSH
46159: PPUSH
// result := false ;
46160: LD_ADDR_VAR 0 2
46164: PUSH
46165: LD_INT 0
46167: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46168: LD_ADDR_VAR 0 3
46172: PUSH
46173: LD_VAR 0 1
46177: PPUSH
46178: CALL_OW 437
46182: ST_TO_ADDR
// if task then
46183: LD_VAR 0 3
46187: IFFALSE 46215
// if task [ 1 ] [ 1 ] = p then
46189: LD_VAR 0 3
46193: PUSH
46194: LD_INT 1
46196: ARRAY
46197: PUSH
46198: LD_INT 1
46200: ARRAY
46201: PUSH
46202: LD_STRING p
46204: EQUAL
46205: IFFALSE 46215
// result := true ;
46207: LD_ADDR_VAR 0 2
46211: PUSH
46212: LD_INT 1
46214: ST_TO_ADDR
// end ;
46215: LD_VAR 0 2
46219: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46220: LD_INT 0
46222: PPUSH
46223: PPUSH
46224: PPUSH
46225: PPUSH
// if pos < 1 then
46226: LD_VAR 0 2
46230: PUSH
46231: LD_INT 1
46233: LESS
46234: IFFALSE 46238
// exit ;
46236: GO 46541
// if pos = 1 then
46238: LD_VAR 0 2
46242: PUSH
46243: LD_INT 1
46245: EQUAL
46246: IFFALSE 46279
// result := Replace ( arr , pos [ 1 ] , value ) else
46248: LD_ADDR_VAR 0 4
46252: PUSH
46253: LD_VAR 0 1
46257: PPUSH
46258: LD_VAR 0 2
46262: PUSH
46263: LD_INT 1
46265: ARRAY
46266: PPUSH
46267: LD_VAR 0 3
46271: PPUSH
46272: CALL_OW 1
46276: ST_TO_ADDR
46277: GO 46541
// begin tmp := arr ;
46279: LD_ADDR_VAR 0 6
46283: PUSH
46284: LD_VAR 0 1
46288: ST_TO_ADDR
// s_arr := [ tmp ] ;
46289: LD_ADDR_VAR 0 7
46293: PUSH
46294: LD_VAR 0 6
46298: PUSH
46299: EMPTY
46300: LIST
46301: ST_TO_ADDR
// for i = 1 to pos - 1 do
46302: LD_ADDR_VAR 0 5
46306: PUSH
46307: DOUBLE
46308: LD_INT 1
46310: DEC
46311: ST_TO_ADDR
46312: LD_VAR 0 2
46316: PUSH
46317: LD_INT 1
46319: MINUS
46320: PUSH
46321: FOR_TO
46322: IFFALSE 46367
// begin tmp := tmp [ pos [ i ] ] ;
46324: LD_ADDR_VAR 0 6
46328: PUSH
46329: LD_VAR 0 6
46333: PUSH
46334: LD_VAR 0 2
46338: PUSH
46339: LD_VAR 0 5
46343: ARRAY
46344: ARRAY
46345: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46346: LD_ADDR_VAR 0 7
46350: PUSH
46351: LD_VAR 0 7
46355: PUSH
46356: LD_VAR 0 6
46360: PUSH
46361: EMPTY
46362: LIST
46363: ADD
46364: ST_TO_ADDR
// end ;
46365: GO 46321
46367: POP
46368: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46369: LD_ADDR_VAR 0 6
46373: PUSH
46374: LD_VAR 0 6
46378: PPUSH
46379: LD_VAR 0 2
46383: PUSH
46384: LD_VAR 0 2
46388: ARRAY
46389: PPUSH
46390: LD_VAR 0 3
46394: PPUSH
46395: CALL_OW 1
46399: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46400: LD_ADDR_VAR 0 7
46404: PUSH
46405: LD_VAR 0 7
46409: PPUSH
46410: LD_VAR 0 7
46414: PPUSH
46415: LD_VAR 0 6
46419: PPUSH
46420: CALL_OW 1
46424: ST_TO_ADDR
// for i = s_arr downto 2 do
46425: LD_ADDR_VAR 0 5
46429: PUSH
46430: DOUBLE
46431: LD_VAR 0 7
46435: INC
46436: ST_TO_ADDR
46437: LD_INT 2
46439: PUSH
46440: FOR_DOWNTO
46441: IFFALSE 46525
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46443: LD_ADDR_VAR 0 6
46447: PUSH
46448: LD_VAR 0 7
46452: PUSH
46453: LD_VAR 0 5
46457: PUSH
46458: LD_INT 1
46460: MINUS
46461: ARRAY
46462: PPUSH
46463: LD_VAR 0 2
46467: PUSH
46468: LD_VAR 0 5
46472: PUSH
46473: LD_INT 1
46475: MINUS
46476: ARRAY
46477: PPUSH
46478: LD_VAR 0 7
46482: PUSH
46483: LD_VAR 0 5
46487: ARRAY
46488: PPUSH
46489: CALL_OW 1
46493: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46494: LD_ADDR_VAR 0 7
46498: PUSH
46499: LD_VAR 0 7
46503: PPUSH
46504: LD_VAR 0 5
46508: PUSH
46509: LD_INT 1
46511: MINUS
46512: PPUSH
46513: LD_VAR 0 6
46517: PPUSH
46518: CALL_OW 1
46522: ST_TO_ADDR
// end ;
46523: GO 46440
46525: POP
46526: POP
// result := s_arr [ 1 ] ;
46527: LD_ADDR_VAR 0 4
46531: PUSH
46532: LD_VAR 0 7
46536: PUSH
46537: LD_INT 1
46539: ARRAY
46540: ST_TO_ADDR
// end ; end ;
46541: LD_VAR 0 4
46545: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46546: LD_INT 0
46548: PPUSH
46549: PPUSH
// if not list then
46550: LD_VAR 0 1
46554: NOT
46555: IFFALSE 46559
// exit ;
46557: GO 46650
// i := list [ pos1 ] ;
46559: LD_ADDR_VAR 0 5
46563: PUSH
46564: LD_VAR 0 1
46568: PUSH
46569: LD_VAR 0 2
46573: ARRAY
46574: ST_TO_ADDR
// if not i then
46575: LD_VAR 0 5
46579: NOT
46580: IFFALSE 46584
// exit ;
46582: GO 46650
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46584: LD_ADDR_VAR 0 1
46588: PUSH
46589: LD_VAR 0 1
46593: PPUSH
46594: LD_VAR 0 2
46598: PPUSH
46599: LD_VAR 0 1
46603: PUSH
46604: LD_VAR 0 3
46608: ARRAY
46609: PPUSH
46610: CALL_OW 1
46614: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46615: LD_ADDR_VAR 0 1
46619: PUSH
46620: LD_VAR 0 1
46624: PPUSH
46625: LD_VAR 0 3
46629: PPUSH
46630: LD_VAR 0 5
46634: PPUSH
46635: CALL_OW 1
46639: ST_TO_ADDR
// result := list ;
46640: LD_ADDR_VAR 0 4
46644: PUSH
46645: LD_VAR 0 1
46649: ST_TO_ADDR
// end ;
46650: LD_VAR 0 4
46654: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46655: LD_INT 0
46657: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46658: LD_ADDR_VAR 0 5
46662: PUSH
46663: LD_VAR 0 1
46667: PPUSH
46668: CALL_OW 250
46672: PPUSH
46673: LD_VAR 0 1
46677: PPUSH
46678: CALL_OW 251
46682: PPUSH
46683: LD_VAR 0 2
46687: PPUSH
46688: LD_VAR 0 3
46692: PPUSH
46693: LD_VAR 0 4
46697: PPUSH
46698: CALL 47076 0 5
46702: ST_TO_ADDR
// end ;
46703: LD_VAR 0 5
46707: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46708: LD_INT 0
46710: PPUSH
46711: PPUSH
46712: PPUSH
46713: PPUSH
// if not list or not unit then
46714: LD_VAR 0 2
46718: NOT
46719: PUSH
46720: LD_VAR 0 1
46724: NOT
46725: OR
46726: IFFALSE 46730
// exit ;
46728: GO 47071
// result := [ ] ;
46730: LD_ADDR_VAR 0 5
46734: PUSH
46735: EMPTY
46736: ST_TO_ADDR
// for i in list do
46737: LD_ADDR_VAR 0 6
46741: PUSH
46742: LD_VAR 0 2
46746: PUSH
46747: FOR_IN
46748: IFFALSE 46966
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46750: LD_ADDR_VAR 0 8
46754: PUSH
46755: LD_VAR 0 1
46759: PPUSH
46760: LD_VAR 0 6
46764: PUSH
46765: LD_INT 1
46767: ARRAY
46768: PPUSH
46769: LD_VAR 0 6
46773: PUSH
46774: LD_INT 2
46776: ARRAY
46777: PPUSH
46778: CALL_OW 297
46782: ST_TO_ADDR
// if not Count ( result ) then
46783: LD_VAR 0 5
46787: PPUSH
46788: CALL 43360 0 1
46792: NOT
46793: IFFALSE 46826
// begin result := Join ( result , [ i , tmp ] ) ;
46795: LD_ADDR_VAR 0 5
46799: PUSH
46800: LD_VAR 0 5
46804: PPUSH
46805: LD_VAR 0 6
46809: PUSH
46810: LD_VAR 0 8
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PPUSH
46819: CALL 78969 0 2
46823: ST_TO_ADDR
// continue ;
46824: GO 46747
// end ; if result [ result ] [ 2 ] <= tmp then
46826: LD_VAR 0 5
46830: PUSH
46831: LD_VAR 0 5
46835: ARRAY
46836: PUSH
46837: LD_INT 2
46839: ARRAY
46840: PUSH
46841: LD_VAR 0 8
46845: LESSEQUAL
46846: IFFALSE 46879
// result := Join ( result , [ i , tmp ] ) else
46848: LD_ADDR_VAR 0 5
46852: PUSH
46853: LD_VAR 0 5
46857: PPUSH
46858: LD_VAR 0 6
46862: PUSH
46863: LD_VAR 0 8
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PPUSH
46872: CALL 78969 0 2
46876: ST_TO_ADDR
46877: GO 46964
// begin for j := 1 to Count ( result ) do
46879: LD_ADDR_VAR 0 7
46883: PUSH
46884: DOUBLE
46885: LD_INT 1
46887: DEC
46888: ST_TO_ADDR
46889: LD_VAR 0 5
46893: PPUSH
46894: CALL 43360 0 1
46898: PUSH
46899: FOR_TO
46900: IFFALSE 46962
// begin if tmp < result [ j ] [ 2 ] then
46902: LD_VAR 0 8
46906: PUSH
46907: LD_VAR 0 5
46911: PUSH
46912: LD_VAR 0 7
46916: ARRAY
46917: PUSH
46918: LD_INT 2
46920: ARRAY
46921: LESS
46922: IFFALSE 46960
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46924: LD_ADDR_VAR 0 5
46928: PUSH
46929: LD_VAR 0 5
46933: PPUSH
46934: LD_VAR 0 7
46938: PPUSH
46939: LD_VAR 0 6
46943: PUSH
46944: LD_VAR 0 8
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PPUSH
46953: CALL_OW 2
46957: ST_TO_ADDR
// break ;
46958: GO 46962
// end ; end ;
46960: GO 46899
46962: POP
46963: POP
// end ; end ;
46964: GO 46747
46966: POP
46967: POP
// if result and not asc then
46968: LD_VAR 0 5
46972: PUSH
46973: LD_VAR 0 3
46977: NOT
46978: AND
46979: IFFALSE 46996
// result := ReverseArray ( result ) ;
46981: LD_ADDR_VAR 0 5
46985: PUSH
46986: LD_VAR 0 5
46990: PPUSH
46991: CALL 74236 0 1
46995: ST_TO_ADDR
// tmp := [ ] ;
46996: LD_ADDR_VAR 0 8
47000: PUSH
47001: EMPTY
47002: ST_TO_ADDR
// if mode then
47003: LD_VAR 0 4
47007: IFFALSE 47071
// begin for i := 1 to result do
47009: LD_ADDR_VAR 0 6
47013: PUSH
47014: DOUBLE
47015: LD_INT 1
47017: DEC
47018: ST_TO_ADDR
47019: LD_VAR 0 5
47023: PUSH
47024: FOR_TO
47025: IFFALSE 47059
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47027: LD_ADDR_VAR 0 8
47031: PUSH
47032: LD_VAR 0 8
47036: PPUSH
47037: LD_VAR 0 5
47041: PUSH
47042: LD_VAR 0 6
47046: ARRAY
47047: PUSH
47048: LD_INT 1
47050: ARRAY
47051: PPUSH
47052: CALL 78969 0 2
47056: ST_TO_ADDR
47057: GO 47024
47059: POP
47060: POP
// result := tmp ;
47061: LD_ADDR_VAR 0 5
47065: PUSH
47066: LD_VAR 0 8
47070: ST_TO_ADDR
// end ; end ;
47071: LD_VAR 0 5
47075: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47076: LD_INT 0
47078: PPUSH
47079: PPUSH
47080: PPUSH
47081: PPUSH
// if not list then
47082: LD_VAR 0 3
47086: NOT
47087: IFFALSE 47091
// exit ;
47089: GO 47479
// result := [ ] ;
47091: LD_ADDR_VAR 0 6
47095: PUSH
47096: EMPTY
47097: ST_TO_ADDR
// for i in list do
47098: LD_ADDR_VAR 0 7
47102: PUSH
47103: LD_VAR 0 3
47107: PUSH
47108: FOR_IN
47109: IFFALSE 47311
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47111: LD_ADDR_VAR 0 9
47115: PUSH
47116: LD_VAR 0 7
47120: PPUSH
47121: LD_VAR 0 1
47125: PPUSH
47126: LD_VAR 0 2
47130: PPUSH
47131: CALL_OW 297
47135: ST_TO_ADDR
// if not result then
47136: LD_VAR 0 6
47140: NOT
47141: IFFALSE 47167
// result := [ [ i , tmp ] ] else
47143: LD_ADDR_VAR 0 6
47147: PUSH
47148: LD_VAR 0 7
47152: PUSH
47153: LD_VAR 0 9
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: EMPTY
47163: LIST
47164: ST_TO_ADDR
47165: GO 47309
// begin if result [ result ] [ 2 ] <= tmp then
47167: LD_VAR 0 6
47171: PUSH
47172: LD_VAR 0 6
47176: ARRAY
47177: PUSH
47178: LD_INT 2
47180: ARRAY
47181: PUSH
47182: LD_VAR 0 9
47186: LESSEQUAL
47187: IFFALSE 47229
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47189: LD_ADDR_VAR 0 6
47193: PUSH
47194: LD_VAR 0 6
47198: PPUSH
47199: LD_VAR 0 6
47203: PUSH
47204: LD_INT 1
47206: PLUS
47207: PPUSH
47208: LD_VAR 0 7
47212: PUSH
47213: LD_VAR 0 9
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PPUSH
47222: CALL_OW 2
47226: ST_TO_ADDR
47227: GO 47309
// for j := 1 to result do
47229: LD_ADDR_VAR 0 8
47233: PUSH
47234: DOUBLE
47235: LD_INT 1
47237: DEC
47238: ST_TO_ADDR
47239: LD_VAR 0 6
47243: PUSH
47244: FOR_TO
47245: IFFALSE 47307
// begin if tmp < result [ j ] [ 2 ] then
47247: LD_VAR 0 9
47251: PUSH
47252: LD_VAR 0 6
47256: PUSH
47257: LD_VAR 0 8
47261: ARRAY
47262: PUSH
47263: LD_INT 2
47265: ARRAY
47266: LESS
47267: IFFALSE 47305
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47269: LD_ADDR_VAR 0 6
47273: PUSH
47274: LD_VAR 0 6
47278: PPUSH
47279: LD_VAR 0 8
47283: PPUSH
47284: LD_VAR 0 7
47288: PUSH
47289: LD_VAR 0 9
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PPUSH
47298: CALL_OW 2
47302: ST_TO_ADDR
// break ;
47303: GO 47307
// end ; end ;
47305: GO 47244
47307: POP
47308: POP
// end ; end ;
47309: GO 47108
47311: POP
47312: POP
// if result and not asc then
47313: LD_VAR 0 6
47317: PUSH
47318: LD_VAR 0 4
47322: NOT
47323: AND
47324: IFFALSE 47399
// begin tmp := result ;
47326: LD_ADDR_VAR 0 9
47330: PUSH
47331: LD_VAR 0 6
47335: ST_TO_ADDR
// for i = tmp downto 1 do
47336: LD_ADDR_VAR 0 7
47340: PUSH
47341: DOUBLE
47342: LD_VAR 0 9
47346: INC
47347: ST_TO_ADDR
47348: LD_INT 1
47350: PUSH
47351: FOR_DOWNTO
47352: IFFALSE 47397
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47354: LD_ADDR_VAR 0 6
47358: PUSH
47359: LD_VAR 0 6
47363: PPUSH
47364: LD_VAR 0 9
47368: PUSH
47369: LD_VAR 0 7
47373: MINUS
47374: PUSH
47375: LD_INT 1
47377: PLUS
47378: PPUSH
47379: LD_VAR 0 9
47383: PUSH
47384: LD_VAR 0 7
47388: ARRAY
47389: PPUSH
47390: CALL_OW 1
47394: ST_TO_ADDR
47395: GO 47351
47397: POP
47398: POP
// end ; tmp := [ ] ;
47399: LD_ADDR_VAR 0 9
47403: PUSH
47404: EMPTY
47405: ST_TO_ADDR
// if mode then
47406: LD_VAR 0 5
47410: IFFALSE 47479
// begin for i = 1 to result do
47412: LD_ADDR_VAR 0 7
47416: PUSH
47417: DOUBLE
47418: LD_INT 1
47420: DEC
47421: ST_TO_ADDR
47422: LD_VAR 0 6
47426: PUSH
47427: FOR_TO
47428: IFFALSE 47467
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47430: LD_ADDR_VAR 0 9
47434: PUSH
47435: LD_VAR 0 9
47439: PPUSH
47440: LD_VAR 0 7
47444: PPUSH
47445: LD_VAR 0 6
47449: PUSH
47450: LD_VAR 0 7
47454: ARRAY
47455: PUSH
47456: LD_INT 1
47458: ARRAY
47459: PPUSH
47460: CALL_OW 1
47464: ST_TO_ADDR
47465: GO 47427
47467: POP
47468: POP
// result := tmp ;
47469: LD_ADDR_VAR 0 6
47473: PUSH
47474: LD_VAR 0 9
47478: ST_TO_ADDR
// end ; end ;
47479: LD_VAR 0 6
47483: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47484: LD_INT 0
47486: PPUSH
47487: PPUSH
47488: PPUSH
47489: PPUSH
47490: PPUSH
47491: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47492: LD_ADDR_VAR 0 5
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: EMPTY
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: ST_TO_ADDR
// if not x or not y then
47514: LD_VAR 0 2
47518: NOT
47519: PUSH
47520: LD_VAR 0 3
47524: NOT
47525: OR
47526: IFFALSE 47530
// exit ;
47528: GO 49180
// if not range then
47530: LD_VAR 0 4
47534: NOT
47535: IFFALSE 47545
// range := 10 ;
47537: LD_ADDR_VAR 0 4
47541: PUSH
47542: LD_INT 10
47544: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47545: LD_ADDR_VAR 0 8
47549: PUSH
47550: LD_INT 81
47552: PUSH
47553: LD_VAR 0 1
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 92
47564: PUSH
47565: LD_VAR 0 2
47569: PUSH
47570: LD_VAR 0 3
47574: PUSH
47575: LD_VAR 0 4
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 3
47588: PUSH
47589: LD_INT 21
47591: PUSH
47592: LD_INT 3
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: LIST
47607: PPUSH
47608: CALL_OW 69
47612: ST_TO_ADDR
// if not tmp then
47613: LD_VAR 0 8
47617: NOT
47618: IFFALSE 47622
// exit ;
47620: GO 49180
// for i in tmp do
47622: LD_ADDR_VAR 0 6
47626: PUSH
47627: LD_VAR 0 8
47631: PUSH
47632: FOR_IN
47633: IFFALSE 49155
// begin points := [ 0 , 0 , 0 ] ;
47635: LD_ADDR_VAR 0 9
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: LIST
47653: ST_TO_ADDR
// bpoints := 1 ;
47654: LD_ADDR_VAR 0 10
47658: PUSH
47659: LD_INT 1
47661: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47662: LD_VAR 0 6
47666: PPUSH
47667: CALL_OW 247
47671: PUSH
47672: LD_INT 1
47674: DOUBLE
47675: EQUAL
47676: IFTRUE 47680
47678: GO 48258
47680: POP
// begin if GetClass ( i ) = 1 then
47681: LD_VAR 0 6
47685: PPUSH
47686: CALL_OW 257
47690: PUSH
47691: LD_INT 1
47693: EQUAL
47694: IFFALSE 47715
// points := [ 10 , 5 , 3 ] ;
47696: LD_ADDR_VAR 0 9
47700: PUSH
47701: LD_INT 10
47703: PUSH
47704: LD_INT 5
47706: PUSH
47707: LD_INT 3
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: LIST
47714: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47715: LD_VAR 0 6
47719: PPUSH
47720: CALL_OW 257
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: LD_INT 3
47730: PUSH
47731: LD_INT 4
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: LIST
47738: IN
47739: IFFALSE 47760
// points := [ 3 , 2 , 1 ] ;
47741: LD_ADDR_VAR 0 9
47745: PUSH
47746: LD_INT 3
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47760: LD_VAR 0 6
47764: PPUSH
47765: CALL_OW 257
47769: PUSH
47770: LD_INT 5
47772: EQUAL
47773: IFFALSE 47794
// points := [ 130 , 5 , 2 ] ;
47775: LD_ADDR_VAR 0 9
47779: PUSH
47780: LD_INT 130
47782: PUSH
47783: LD_INT 5
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: LIST
47793: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47794: LD_VAR 0 6
47798: PPUSH
47799: CALL_OW 257
47803: PUSH
47804: LD_INT 8
47806: EQUAL
47807: IFFALSE 47828
// points := [ 35 , 35 , 30 ] ;
47809: LD_ADDR_VAR 0 9
47813: PUSH
47814: LD_INT 35
47816: PUSH
47817: LD_INT 35
47819: PUSH
47820: LD_INT 30
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: LIST
47827: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47828: LD_VAR 0 6
47832: PPUSH
47833: CALL_OW 257
47837: PUSH
47838: LD_INT 9
47840: EQUAL
47841: IFFALSE 47862
// points := [ 20 , 55 , 40 ] ;
47843: LD_ADDR_VAR 0 9
47847: PUSH
47848: LD_INT 20
47850: PUSH
47851: LD_INT 55
47853: PUSH
47854: LD_INT 40
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: LIST
47861: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47862: LD_VAR 0 6
47866: PPUSH
47867: CALL_OW 257
47871: PUSH
47872: LD_INT 12
47874: PUSH
47875: LD_INT 16
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: IN
47882: IFFALSE 47903
// points := [ 5 , 3 , 2 ] ;
47884: LD_ADDR_VAR 0 9
47888: PUSH
47889: LD_INT 5
47891: PUSH
47892: LD_INT 3
47894: PUSH
47895: LD_INT 2
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: LIST
47902: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47903: LD_VAR 0 6
47907: PPUSH
47908: CALL_OW 257
47912: PUSH
47913: LD_INT 17
47915: EQUAL
47916: IFFALSE 47937
// points := [ 100 , 50 , 75 ] ;
47918: LD_ADDR_VAR 0 9
47922: PUSH
47923: LD_INT 100
47925: PUSH
47926: LD_INT 50
47928: PUSH
47929: LD_INT 75
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: LIST
47936: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47937: LD_VAR 0 6
47941: PPUSH
47942: CALL_OW 257
47946: PUSH
47947: LD_INT 15
47949: EQUAL
47950: IFFALSE 47971
// points := [ 10 , 5 , 3 ] ;
47952: LD_ADDR_VAR 0 9
47956: PUSH
47957: LD_INT 10
47959: PUSH
47960: LD_INT 5
47962: PUSH
47963: LD_INT 3
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: LIST
47970: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47971: LD_VAR 0 6
47975: PPUSH
47976: CALL_OW 257
47980: PUSH
47981: LD_INT 14
47983: EQUAL
47984: IFFALSE 48005
// points := [ 10 , 0 , 0 ] ;
47986: LD_ADDR_VAR 0 9
47990: PUSH
47991: LD_INT 10
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: LIST
48004: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48005: LD_VAR 0 6
48009: PPUSH
48010: CALL_OW 257
48014: PUSH
48015: LD_INT 11
48017: EQUAL
48018: IFFALSE 48039
// points := [ 30 , 10 , 5 ] ;
48020: LD_ADDR_VAR 0 9
48024: PUSH
48025: LD_INT 30
48027: PUSH
48028: LD_INT 10
48030: PUSH
48031: LD_INT 5
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: LIST
48038: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48039: LD_VAR 0 1
48043: PPUSH
48044: LD_INT 5
48046: PPUSH
48047: CALL_OW 321
48051: PUSH
48052: LD_INT 2
48054: EQUAL
48055: IFFALSE 48072
// bpoints := bpoints * 1.8 ;
48057: LD_ADDR_VAR 0 10
48061: PUSH
48062: LD_VAR 0 10
48066: PUSH
48067: LD_REAL  1.80000000000000E+0000
48070: MUL
48071: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48072: LD_VAR 0 6
48076: PPUSH
48077: CALL_OW 257
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 2
48087: PUSH
48088: LD_INT 3
48090: PUSH
48091: LD_INT 4
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: IN
48100: PUSH
48101: LD_VAR 0 1
48105: PPUSH
48106: LD_INT 51
48108: PPUSH
48109: CALL_OW 321
48113: PUSH
48114: LD_INT 2
48116: EQUAL
48117: AND
48118: IFFALSE 48135
// bpoints := bpoints * 1.2 ;
48120: LD_ADDR_VAR 0 10
48124: PUSH
48125: LD_VAR 0 10
48129: PUSH
48130: LD_REAL  1.20000000000000E+0000
48133: MUL
48134: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48135: LD_VAR 0 6
48139: PPUSH
48140: CALL_OW 257
48144: PUSH
48145: LD_INT 5
48147: PUSH
48148: LD_INT 7
48150: PUSH
48151: LD_INT 9
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: LIST
48158: IN
48159: PUSH
48160: LD_VAR 0 1
48164: PPUSH
48165: LD_INT 52
48167: PPUSH
48168: CALL_OW 321
48172: PUSH
48173: LD_INT 2
48175: EQUAL
48176: AND
48177: IFFALSE 48194
// bpoints := bpoints * 1.5 ;
48179: LD_ADDR_VAR 0 10
48183: PUSH
48184: LD_VAR 0 10
48188: PUSH
48189: LD_REAL  1.50000000000000E+0000
48192: MUL
48193: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48194: LD_VAR 0 1
48198: PPUSH
48199: LD_INT 66
48201: PPUSH
48202: CALL_OW 321
48206: PUSH
48207: LD_INT 2
48209: EQUAL
48210: IFFALSE 48227
// bpoints := bpoints * 1.1 ;
48212: LD_ADDR_VAR 0 10
48216: PUSH
48217: LD_VAR 0 10
48221: PUSH
48222: LD_REAL  1.10000000000000E+0000
48225: MUL
48226: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48227: LD_ADDR_VAR 0 10
48231: PUSH
48232: LD_VAR 0 10
48236: PUSH
48237: LD_VAR 0 6
48241: PPUSH
48242: LD_INT 1
48244: PPUSH
48245: CALL_OW 259
48249: PUSH
48250: LD_REAL  1.15000000000000E+0000
48253: MUL
48254: MUL
48255: ST_TO_ADDR
// end ; unit_vehicle :
48256: GO 49084
48258: LD_INT 2
48260: DOUBLE
48261: EQUAL
48262: IFTRUE 48266
48264: GO 49072
48266: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48267: LD_VAR 0 6
48271: PPUSH
48272: CALL_OW 264
48276: PUSH
48277: LD_INT 2
48279: PUSH
48280: LD_INT 42
48282: PUSH
48283: LD_INT 24
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: LIST
48290: IN
48291: IFFALSE 48312
// points := [ 25 , 5 , 3 ] ;
48293: LD_ADDR_VAR 0 9
48297: PUSH
48298: LD_INT 25
48300: PUSH
48301: LD_INT 5
48303: PUSH
48304: LD_INT 3
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: LIST
48311: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48312: LD_VAR 0 6
48316: PPUSH
48317: CALL_OW 264
48321: PUSH
48322: LD_INT 4
48324: PUSH
48325: LD_INT 43
48327: PUSH
48328: LD_INT 25
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: LIST
48335: IN
48336: IFFALSE 48357
// points := [ 40 , 15 , 5 ] ;
48338: LD_ADDR_VAR 0 9
48342: PUSH
48343: LD_INT 40
48345: PUSH
48346: LD_INT 15
48348: PUSH
48349: LD_INT 5
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: LIST
48356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48357: LD_VAR 0 6
48361: PPUSH
48362: CALL_OW 264
48366: PUSH
48367: LD_INT 3
48369: PUSH
48370: LD_INT 23
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: IN
48377: IFFALSE 48398
// points := [ 7 , 25 , 8 ] ;
48379: LD_ADDR_VAR 0 9
48383: PUSH
48384: LD_INT 7
48386: PUSH
48387: LD_INT 25
48389: PUSH
48390: LD_INT 8
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: LIST
48397: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48398: LD_VAR 0 6
48402: PPUSH
48403: CALL_OW 264
48407: PUSH
48408: LD_INT 5
48410: PUSH
48411: LD_INT 27
48413: PUSH
48414: LD_INT 44
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: LIST
48421: IN
48422: IFFALSE 48443
// points := [ 14 , 50 , 16 ] ;
48424: LD_ADDR_VAR 0 9
48428: PUSH
48429: LD_INT 14
48431: PUSH
48432: LD_INT 50
48434: PUSH
48435: LD_INT 16
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: LIST
48442: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48443: LD_VAR 0 6
48447: PPUSH
48448: CALL_OW 264
48452: PUSH
48453: LD_INT 6
48455: PUSH
48456: LD_INT 46
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: IN
48463: IFFALSE 48484
// points := [ 32 , 120 , 70 ] ;
48465: LD_ADDR_VAR 0 9
48469: PUSH
48470: LD_INT 32
48472: PUSH
48473: LD_INT 120
48475: PUSH
48476: LD_INT 70
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: LIST
48483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48484: LD_VAR 0 6
48488: PPUSH
48489: CALL_OW 264
48493: PUSH
48494: LD_INT 7
48496: PUSH
48497: LD_INT 28
48499: PUSH
48500: LD_INT 45
48502: PUSH
48503: LD_INT 92
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: IN
48512: IFFALSE 48533
// points := [ 35 , 20 , 45 ] ;
48514: LD_ADDR_VAR 0 9
48518: PUSH
48519: LD_INT 35
48521: PUSH
48522: LD_INT 20
48524: PUSH
48525: LD_INT 45
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: LIST
48532: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48533: LD_VAR 0 6
48537: PPUSH
48538: CALL_OW 264
48542: PUSH
48543: LD_INT 47
48545: PUSH
48546: EMPTY
48547: LIST
48548: IN
48549: IFFALSE 48570
// points := [ 67 , 45 , 75 ] ;
48551: LD_ADDR_VAR 0 9
48555: PUSH
48556: LD_INT 67
48558: PUSH
48559: LD_INT 45
48561: PUSH
48562: LD_INT 75
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: LIST
48569: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48570: LD_VAR 0 6
48574: PPUSH
48575: CALL_OW 264
48579: PUSH
48580: LD_INT 26
48582: PUSH
48583: EMPTY
48584: LIST
48585: IN
48586: IFFALSE 48607
// points := [ 120 , 30 , 80 ] ;
48588: LD_ADDR_VAR 0 9
48592: PUSH
48593: LD_INT 120
48595: PUSH
48596: LD_INT 30
48598: PUSH
48599: LD_INT 80
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: LIST
48606: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48607: LD_VAR 0 6
48611: PPUSH
48612: CALL_OW 264
48616: PUSH
48617: LD_INT 22
48619: PUSH
48620: EMPTY
48621: LIST
48622: IN
48623: IFFALSE 48644
// points := [ 40 , 1 , 1 ] ;
48625: LD_ADDR_VAR 0 9
48629: PUSH
48630: LD_INT 40
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: LIST
48643: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48644: LD_VAR 0 6
48648: PPUSH
48649: CALL_OW 264
48653: PUSH
48654: LD_INT 29
48656: PUSH
48657: EMPTY
48658: LIST
48659: IN
48660: IFFALSE 48681
// points := [ 70 , 200 , 400 ] ;
48662: LD_ADDR_VAR 0 9
48666: PUSH
48667: LD_INT 70
48669: PUSH
48670: LD_INT 200
48672: PUSH
48673: LD_INT 400
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: LIST
48680: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48681: LD_VAR 0 6
48685: PPUSH
48686: CALL_OW 264
48690: PUSH
48691: LD_INT 14
48693: PUSH
48694: LD_INT 53
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: IN
48701: IFFALSE 48722
// points := [ 40 , 10 , 20 ] ;
48703: LD_ADDR_VAR 0 9
48707: PUSH
48708: LD_INT 40
48710: PUSH
48711: LD_INT 10
48713: PUSH
48714: LD_INT 20
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: LIST
48721: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48722: LD_VAR 0 6
48726: PPUSH
48727: CALL_OW 264
48731: PUSH
48732: LD_INT 9
48734: PUSH
48735: EMPTY
48736: LIST
48737: IN
48738: IFFALSE 48759
// points := [ 5 , 70 , 20 ] ;
48740: LD_ADDR_VAR 0 9
48744: PUSH
48745: LD_INT 5
48747: PUSH
48748: LD_INT 70
48750: PUSH
48751: LD_INT 20
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: LIST
48758: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48759: LD_VAR 0 6
48763: PPUSH
48764: CALL_OW 264
48768: PUSH
48769: LD_INT 10
48771: PUSH
48772: EMPTY
48773: LIST
48774: IN
48775: IFFALSE 48796
// points := [ 35 , 110 , 70 ] ;
48777: LD_ADDR_VAR 0 9
48781: PUSH
48782: LD_INT 35
48784: PUSH
48785: LD_INT 110
48787: PUSH
48788: LD_INT 70
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: LIST
48795: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48796: LD_VAR 0 6
48800: PPUSH
48801: CALL_OW 265
48805: PUSH
48806: LD_INT 25
48808: EQUAL
48809: IFFALSE 48830
// points := [ 80 , 65 , 100 ] ;
48811: LD_ADDR_VAR 0 9
48815: PUSH
48816: LD_INT 80
48818: PUSH
48819: LD_INT 65
48821: PUSH
48822: LD_INT 100
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: LIST
48829: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48830: LD_VAR 0 6
48834: PPUSH
48835: CALL_OW 263
48839: PUSH
48840: LD_INT 1
48842: EQUAL
48843: IFFALSE 48878
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48845: LD_ADDR_VAR 0 10
48849: PUSH
48850: LD_VAR 0 10
48854: PUSH
48855: LD_VAR 0 6
48859: PPUSH
48860: CALL_OW 311
48864: PPUSH
48865: LD_INT 3
48867: PPUSH
48868: CALL_OW 259
48872: PUSH
48873: LD_INT 4
48875: MUL
48876: MUL
48877: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48878: LD_VAR 0 6
48882: PPUSH
48883: CALL_OW 263
48887: PUSH
48888: LD_INT 2
48890: EQUAL
48891: IFFALSE 48942
// begin j := IsControledBy ( i ) ;
48893: LD_ADDR_VAR 0 7
48897: PUSH
48898: LD_VAR 0 6
48902: PPUSH
48903: CALL_OW 312
48907: ST_TO_ADDR
// if j then
48908: LD_VAR 0 7
48912: IFFALSE 48942
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48914: LD_ADDR_VAR 0 10
48918: PUSH
48919: LD_VAR 0 10
48923: PUSH
48924: LD_VAR 0 7
48928: PPUSH
48929: LD_INT 3
48931: PPUSH
48932: CALL_OW 259
48936: PUSH
48937: LD_INT 3
48939: MUL
48940: MUL
48941: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48942: LD_VAR 0 6
48946: PPUSH
48947: CALL_OW 264
48951: PUSH
48952: LD_INT 5
48954: PUSH
48955: LD_INT 6
48957: PUSH
48958: LD_INT 46
48960: PUSH
48961: LD_INT 44
48963: PUSH
48964: LD_INT 47
48966: PUSH
48967: LD_INT 45
48969: PUSH
48970: LD_INT 28
48972: PUSH
48973: LD_INT 7
48975: PUSH
48976: LD_INT 27
48978: PUSH
48979: LD_INT 29
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: IN
48994: PUSH
48995: LD_VAR 0 1
48999: PPUSH
49000: LD_INT 52
49002: PPUSH
49003: CALL_OW 321
49007: PUSH
49008: LD_INT 2
49010: EQUAL
49011: AND
49012: IFFALSE 49029
// bpoints := bpoints * 1.2 ;
49014: LD_ADDR_VAR 0 10
49018: PUSH
49019: LD_VAR 0 10
49023: PUSH
49024: LD_REAL  1.20000000000000E+0000
49027: MUL
49028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49029: LD_VAR 0 6
49033: PPUSH
49034: CALL_OW 264
49038: PUSH
49039: LD_INT 6
49041: PUSH
49042: LD_INT 46
49044: PUSH
49045: LD_INT 47
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: LIST
49052: IN
49053: IFFALSE 49070
// bpoints := bpoints * 1.2 ;
49055: LD_ADDR_VAR 0 10
49059: PUSH
49060: LD_VAR 0 10
49064: PUSH
49065: LD_REAL  1.20000000000000E+0000
49068: MUL
49069: ST_TO_ADDR
// end ; unit_building :
49070: GO 49084
49072: LD_INT 3
49074: DOUBLE
49075: EQUAL
49076: IFTRUE 49080
49078: GO 49083
49080: POP
// ; end ;
49081: GO 49084
49083: POP
// for j = 1 to 3 do
49084: LD_ADDR_VAR 0 7
49088: PUSH
49089: DOUBLE
49090: LD_INT 1
49092: DEC
49093: ST_TO_ADDR
49094: LD_INT 3
49096: PUSH
49097: FOR_TO
49098: IFFALSE 49151
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49100: LD_ADDR_VAR 0 5
49104: PUSH
49105: LD_VAR 0 5
49109: PPUSH
49110: LD_VAR 0 7
49114: PPUSH
49115: LD_VAR 0 5
49119: PUSH
49120: LD_VAR 0 7
49124: ARRAY
49125: PUSH
49126: LD_VAR 0 9
49130: PUSH
49131: LD_VAR 0 7
49135: ARRAY
49136: PUSH
49137: LD_VAR 0 10
49141: MUL
49142: PLUS
49143: PPUSH
49144: CALL_OW 1
49148: ST_TO_ADDR
49149: GO 49097
49151: POP
49152: POP
// end ;
49153: GO 47632
49155: POP
49156: POP
// result := Replace ( result , 4 , tmp ) ;
49157: LD_ADDR_VAR 0 5
49161: PUSH
49162: LD_VAR 0 5
49166: PPUSH
49167: LD_INT 4
49169: PPUSH
49170: LD_VAR 0 8
49174: PPUSH
49175: CALL_OW 1
49179: ST_TO_ADDR
// end ;
49180: LD_VAR 0 5
49184: RET
// export function DangerAtRange ( unit , range ) ; begin
49185: LD_INT 0
49187: PPUSH
// if not unit then
49188: LD_VAR 0 1
49192: NOT
49193: IFFALSE 49197
// exit ;
49195: GO 49242
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49197: LD_ADDR_VAR 0 3
49201: PUSH
49202: LD_VAR 0 1
49206: PPUSH
49207: CALL_OW 255
49211: PPUSH
49212: LD_VAR 0 1
49216: PPUSH
49217: CALL_OW 250
49221: PPUSH
49222: LD_VAR 0 1
49226: PPUSH
49227: CALL_OW 251
49231: PPUSH
49232: LD_VAR 0 2
49236: PPUSH
49237: CALL 47484 0 4
49241: ST_TO_ADDR
// end ;
49242: LD_VAR 0 3
49246: RET
// export function DangerInArea ( side , area ) ; begin
49247: LD_INT 0
49249: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49250: LD_ADDR_VAR 0 3
49254: PUSH
49255: LD_VAR 0 2
49259: PPUSH
49260: LD_INT 81
49262: PUSH
49263: LD_VAR 0 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PPUSH
49272: CALL_OW 70
49276: ST_TO_ADDR
// end ;
49277: LD_VAR 0 3
49281: RET
// export function IsExtension ( b ) ; begin
49282: LD_INT 0
49284: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49285: LD_ADDR_VAR 0 2
49289: PUSH
49290: LD_VAR 0 1
49294: PUSH
49295: LD_INT 23
49297: PUSH
49298: LD_INT 20
49300: PUSH
49301: LD_INT 22
49303: PUSH
49304: LD_INT 17
49306: PUSH
49307: LD_INT 24
49309: PUSH
49310: LD_INT 21
49312: PUSH
49313: LD_INT 19
49315: PUSH
49316: LD_INT 16
49318: PUSH
49319: LD_INT 25
49321: PUSH
49322: LD_INT 18
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: IN
49337: ST_TO_ADDR
// end ;
49338: LD_VAR 0 2
49342: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49343: LD_INT 0
49345: PPUSH
49346: PPUSH
49347: PPUSH
// result := [ ] ;
49348: LD_ADDR_VAR 0 4
49352: PUSH
49353: EMPTY
49354: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49355: LD_ADDR_VAR 0 5
49359: PUSH
49360: LD_VAR 0 2
49364: PPUSH
49365: LD_INT 21
49367: PUSH
49368: LD_INT 3
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PPUSH
49375: CALL_OW 70
49379: ST_TO_ADDR
// if not tmp then
49380: LD_VAR 0 5
49384: NOT
49385: IFFALSE 49389
// exit ;
49387: GO 49453
// if checkLink then
49389: LD_VAR 0 3
49393: IFFALSE 49443
// begin for i in tmp do
49395: LD_ADDR_VAR 0 6
49399: PUSH
49400: LD_VAR 0 5
49404: PUSH
49405: FOR_IN
49406: IFFALSE 49441
// if GetBase ( i ) <> base then
49408: LD_VAR 0 6
49412: PPUSH
49413: CALL_OW 274
49417: PUSH
49418: LD_VAR 0 1
49422: NONEQUAL
49423: IFFALSE 49439
// ComLinkToBase ( base , i ) ;
49425: LD_VAR 0 1
49429: PPUSH
49430: LD_VAR 0 6
49434: PPUSH
49435: CALL_OW 169
49439: GO 49405
49441: POP
49442: POP
// end ; result := tmp ;
49443: LD_ADDR_VAR 0 4
49447: PUSH
49448: LD_VAR 0 5
49452: ST_TO_ADDR
// end ;
49453: LD_VAR 0 4
49457: RET
// export function ComComplete ( units , b ) ; var i ; begin
49458: LD_INT 0
49460: PPUSH
49461: PPUSH
// if not units then
49462: LD_VAR 0 1
49466: NOT
49467: IFFALSE 49471
// exit ;
49469: GO 49561
// for i in units do
49471: LD_ADDR_VAR 0 4
49475: PUSH
49476: LD_VAR 0 1
49480: PUSH
49481: FOR_IN
49482: IFFALSE 49559
// if BuildingStatus ( b ) = bs_build then
49484: LD_VAR 0 2
49488: PPUSH
49489: CALL_OW 461
49493: PUSH
49494: LD_INT 1
49496: EQUAL
49497: IFFALSE 49557
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49499: LD_VAR 0 4
49503: PPUSH
49504: LD_STRING h
49506: PUSH
49507: LD_VAR 0 2
49511: PPUSH
49512: CALL_OW 250
49516: PUSH
49517: LD_VAR 0 2
49521: PPUSH
49522: CALL_OW 251
49526: PUSH
49527: LD_VAR 0 2
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: PUSH
49550: EMPTY
49551: LIST
49552: PPUSH
49553: CALL_OW 446
49557: GO 49481
49559: POP
49560: POP
// end ;
49561: LD_VAR 0 3
49565: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49566: LD_INT 0
49568: PPUSH
49569: PPUSH
49570: PPUSH
49571: PPUSH
49572: PPUSH
49573: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49574: LD_VAR 0 1
49578: NOT
49579: PUSH
49580: LD_VAR 0 1
49584: PPUSH
49585: CALL_OW 263
49589: PUSH
49590: LD_INT 2
49592: NONEQUAL
49593: OR
49594: IFFALSE 49598
// exit ;
49596: GO 49914
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49598: LD_ADDR_VAR 0 6
49602: PUSH
49603: LD_INT 22
49605: PUSH
49606: LD_VAR 0 1
49610: PPUSH
49611: CALL_OW 255
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: LD_INT 30
49625: PUSH
49626: LD_INT 36
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 34
49635: PUSH
49636: LD_INT 31
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: LIST
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PPUSH
49652: CALL_OW 69
49656: ST_TO_ADDR
// if not tmp then
49657: LD_VAR 0 6
49661: NOT
49662: IFFALSE 49666
// exit ;
49664: GO 49914
// result := [ ] ;
49666: LD_ADDR_VAR 0 2
49670: PUSH
49671: EMPTY
49672: ST_TO_ADDR
// for i in tmp do
49673: LD_ADDR_VAR 0 3
49677: PUSH
49678: LD_VAR 0 6
49682: PUSH
49683: FOR_IN
49684: IFFALSE 49755
// begin t := UnitsInside ( i ) ;
49686: LD_ADDR_VAR 0 4
49690: PUSH
49691: LD_VAR 0 3
49695: PPUSH
49696: CALL_OW 313
49700: ST_TO_ADDR
// if t then
49701: LD_VAR 0 4
49705: IFFALSE 49753
// for j in t do
49707: LD_ADDR_VAR 0 7
49711: PUSH
49712: LD_VAR 0 4
49716: PUSH
49717: FOR_IN
49718: IFFALSE 49751
// result := Replace ( result , result + 1 , j ) ;
49720: LD_ADDR_VAR 0 2
49724: PUSH
49725: LD_VAR 0 2
49729: PPUSH
49730: LD_VAR 0 2
49734: PUSH
49735: LD_INT 1
49737: PLUS
49738: PPUSH
49739: LD_VAR 0 7
49743: PPUSH
49744: CALL_OW 1
49748: ST_TO_ADDR
49749: GO 49717
49751: POP
49752: POP
// end ;
49753: GO 49683
49755: POP
49756: POP
// if not result then
49757: LD_VAR 0 2
49761: NOT
49762: IFFALSE 49766
// exit ;
49764: GO 49914
// mech := result [ 1 ] ;
49766: LD_ADDR_VAR 0 5
49770: PUSH
49771: LD_VAR 0 2
49775: PUSH
49776: LD_INT 1
49778: ARRAY
49779: ST_TO_ADDR
// if result > 1 then
49780: LD_VAR 0 2
49784: PUSH
49785: LD_INT 1
49787: GREATER
49788: IFFALSE 49900
// begin for i = 2 to result do
49790: LD_ADDR_VAR 0 3
49794: PUSH
49795: DOUBLE
49796: LD_INT 2
49798: DEC
49799: ST_TO_ADDR
49800: LD_VAR 0 2
49804: PUSH
49805: FOR_TO
49806: IFFALSE 49898
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49808: LD_ADDR_VAR 0 4
49812: PUSH
49813: LD_VAR 0 2
49817: PUSH
49818: LD_VAR 0 3
49822: ARRAY
49823: PPUSH
49824: LD_INT 3
49826: PPUSH
49827: CALL_OW 259
49831: PUSH
49832: LD_VAR 0 2
49836: PUSH
49837: LD_VAR 0 3
49841: ARRAY
49842: PPUSH
49843: CALL_OW 432
49847: MINUS
49848: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49849: LD_VAR 0 4
49853: PUSH
49854: LD_VAR 0 5
49858: PPUSH
49859: LD_INT 3
49861: PPUSH
49862: CALL_OW 259
49866: PUSH
49867: LD_VAR 0 5
49871: PPUSH
49872: CALL_OW 432
49876: MINUS
49877: GREATEREQUAL
49878: IFFALSE 49896
// mech := result [ i ] ;
49880: LD_ADDR_VAR 0 5
49884: PUSH
49885: LD_VAR 0 2
49889: PUSH
49890: LD_VAR 0 3
49894: ARRAY
49895: ST_TO_ADDR
// end ;
49896: GO 49805
49898: POP
49899: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49900: LD_VAR 0 1
49904: PPUSH
49905: LD_VAR 0 5
49909: PPUSH
49910: CALL_OW 135
// end ;
49914: LD_VAR 0 2
49918: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49919: LD_INT 0
49921: PPUSH
49922: PPUSH
49923: PPUSH
49924: PPUSH
49925: PPUSH
49926: PPUSH
49927: PPUSH
49928: PPUSH
49929: PPUSH
49930: PPUSH
49931: PPUSH
49932: PPUSH
49933: PPUSH
// result := [ ] ;
49934: LD_ADDR_VAR 0 7
49938: PUSH
49939: EMPTY
49940: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49941: LD_VAR 0 1
49945: PPUSH
49946: CALL_OW 266
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: IN
49961: NOT
49962: IFFALSE 49966
// exit ;
49964: GO 51600
// if name then
49966: LD_VAR 0 3
49970: IFFALSE 49986
// SetBName ( base_dep , name ) ;
49972: LD_VAR 0 1
49976: PPUSH
49977: LD_VAR 0 3
49981: PPUSH
49982: CALL_OW 500
// base := GetBase ( base_dep ) ;
49986: LD_ADDR_VAR 0 15
49990: PUSH
49991: LD_VAR 0 1
49995: PPUSH
49996: CALL_OW 274
50000: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50001: LD_ADDR_VAR 0 16
50005: PUSH
50006: LD_VAR 0 1
50010: PPUSH
50011: CALL_OW 255
50015: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50016: LD_ADDR_VAR 0 17
50020: PUSH
50021: LD_VAR 0 1
50025: PPUSH
50026: CALL_OW 248
50030: ST_TO_ADDR
// if sources then
50031: LD_VAR 0 5
50035: IFFALSE 50082
// for i = 1 to 3 do
50037: LD_ADDR_VAR 0 8
50041: PUSH
50042: DOUBLE
50043: LD_INT 1
50045: DEC
50046: ST_TO_ADDR
50047: LD_INT 3
50049: PUSH
50050: FOR_TO
50051: IFFALSE 50080
// AddResourceType ( base , i , sources [ i ] ) ;
50053: LD_VAR 0 15
50057: PPUSH
50058: LD_VAR 0 8
50062: PPUSH
50063: LD_VAR 0 5
50067: PUSH
50068: LD_VAR 0 8
50072: ARRAY
50073: PPUSH
50074: CALL_OW 276
50078: GO 50050
50080: POP
50081: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50082: LD_ADDR_VAR 0 18
50086: PUSH
50087: LD_VAR 0 15
50091: PPUSH
50092: LD_VAR 0 2
50096: PPUSH
50097: LD_INT 1
50099: PPUSH
50100: CALL 49343 0 3
50104: ST_TO_ADDR
// InitHc ;
50105: CALL_OW 19
// InitUc ;
50109: CALL_OW 18
// uc_side := side ;
50113: LD_ADDR_OWVAR 20
50117: PUSH
50118: LD_VAR 0 16
50122: ST_TO_ADDR
// uc_nation := nation ;
50123: LD_ADDR_OWVAR 21
50127: PUSH
50128: LD_VAR 0 17
50132: ST_TO_ADDR
// if buildings then
50133: LD_VAR 0 18
50137: IFFALSE 51459
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50139: LD_ADDR_VAR 0 19
50143: PUSH
50144: LD_VAR 0 18
50148: PPUSH
50149: LD_INT 2
50151: PUSH
50152: LD_INT 30
50154: PUSH
50155: LD_INT 29
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 30
50164: PUSH
50165: LD_INT 30
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: LIST
50176: PPUSH
50177: CALL_OW 72
50181: ST_TO_ADDR
// if tmp then
50182: LD_VAR 0 19
50186: IFFALSE 50234
// for i in tmp do
50188: LD_ADDR_VAR 0 8
50192: PUSH
50193: LD_VAR 0 19
50197: PUSH
50198: FOR_IN
50199: IFFALSE 50232
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50201: LD_VAR 0 8
50205: PPUSH
50206: CALL_OW 250
50210: PPUSH
50211: LD_VAR 0 8
50215: PPUSH
50216: CALL_OW 251
50220: PPUSH
50221: LD_VAR 0 16
50225: PPUSH
50226: CALL_OW 441
50230: GO 50198
50232: POP
50233: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50234: LD_VAR 0 18
50238: PPUSH
50239: LD_INT 2
50241: PUSH
50242: LD_INT 30
50244: PUSH
50245: LD_INT 32
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 30
50254: PUSH
50255: LD_INT 33
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: LIST
50266: PPUSH
50267: CALL_OW 72
50271: IFFALSE 50359
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50273: LD_ADDR_VAR 0 8
50277: PUSH
50278: LD_VAR 0 18
50282: PPUSH
50283: LD_INT 2
50285: PUSH
50286: LD_INT 30
50288: PUSH
50289: LD_INT 32
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 30
50298: PUSH
50299: LD_INT 33
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: LIST
50310: PPUSH
50311: CALL_OW 72
50315: PUSH
50316: FOR_IN
50317: IFFALSE 50357
// begin if not GetBWeapon ( i ) then
50319: LD_VAR 0 8
50323: PPUSH
50324: CALL_OW 269
50328: NOT
50329: IFFALSE 50355
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50331: LD_VAR 0 8
50335: PPUSH
50336: LD_VAR 0 8
50340: PPUSH
50341: LD_VAR 0 2
50345: PPUSH
50346: CALL 51605 0 2
50350: PPUSH
50351: CALL_OW 431
// end ;
50355: GO 50316
50357: POP
50358: POP
// end ; for i = 1 to personel do
50359: LD_ADDR_VAR 0 8
50363: PUSH
50364: DOUBLE
50365: LD_INT 1
50367: DEC
50368: ST_TO_ADDR
50369: LD_VAR 0 6
50373: PUSH
50374: FOR_TO
50375: IFFALSE 51439
// begin if i > 4 then
50377: LD_VAR 0 8
50381: PUSH
50382: LD_INT 4
50384: GREATER
50385: IFFALSE 50389
// break ;
50387: GO 51439
// case i of 1 :
50389: LD_VAR 0 8
50393: PUSH
50394: LD_INT 1
50396: DOUBLE
50397: EQUAL
50398: IFTRUE 50402
50400: GO 50482
50402: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50403: LD_ADDR_VAR 0 12
50407: PUSH
50408: LD_VAR 0 18
50412: PPUSH
50413: LD_INT 22
50415: PUSH
50416: LD_VAR 0 16
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 58
50427: PUSH
50428: EMPTY
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: PUSH
50434: LD_INT 30
50436: PUSH
50437: LD_INT 32
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 30
50446: PUSH
50447: LD_INT 4
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 30
50456: PUSH
50457: LD_INT 5
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: LIST
50474: PPUSH
50475: CALL_OW 72
50479: ST_TO_ADDR
50480: GO 50704
50482: LD_INT 2
50484: DOUBLE
50485: EQUAL
50486: IFTRUE 50490
50488: GO 50552
50490: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50491: LD_ADDR_VAR 0 12
50495: PUSH
50496: LD_VAR 0 18
50500: PPUSH
50501: LD_INT 22
50503: PUSH
50504: LD_VAR 0 16
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: LD_INT 30
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 30
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: LIST
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PPUSH
50545: CALL_OW 72
50549: ST_TO_ADDR
50550: GO 50704
50552: LD_INT 3
50554: DOUBLE
50555: EQUAL
50556: IFTRUE 50560
50558: GO 50622
50560: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50561: LD_ADDR_VAR 0 12
50565: PUSH
50566: LD_VAR 0 18
50570: PPUSH
50571: LD_INT 22
50573: PUSH
50574: LD_VAR 0 16
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: PUSH
50586: LD_INT 30
50588: PUSH
50589: LD_INT 2
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 30
50598: PUSH
50599: LD_INT 3
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: LIST
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PPUSH
50615: CALL_OW 72
50619: ST_TO_ADDR
50620: GO 50704
50622: LD_INT 4
50624: DOUBLE
50625: EQUAL
50626: IFTRUE 50630
50628: GO 50703
50630: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50631: LD_ADDR_VAR 0 12
50635: PUSH
50636: LD_VAR 0 18
50640: PPUSH
50641: LD_INT 22
50643: PUSH
50644: LD_VAR 0 16
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: LD_INT 30
50658: PUSH
50659: LD_INT 6
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 30
50668: PUSH
50669: LD_INT 7
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 30
50678: PUSH
50679: LD_INT 8
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PPUSH
50696: CALL_OW 72
50700: ST_TO_ADDR
50701: GO 50704
50703: POP
// if i = 1 then
50704: LD_VAR 0 8
50708: PUSH
50709: LD_INT 1
50711: EQUAL
50712: IFFALSE 50823
// begin tmp := [ ] ;
50714: LD_ADDR_VAR 0 19
50718: PUSH
50719: EMPTY
50720: ST_TO_ADDR
// for j in f do
50721: LD_ADDR_VAR 0 9
50725: PUSH
50726: LD_VAR 0 12
50730: PUSH
50731: FOR_IN
50732: IFFALSE 50805
// if GetBType ( j ) = b_bunker then
50734: LD_VAR 0 9
50738: PPUSH
50739: CALL_OW 266
50743: PUSH
50744: LD_INT 32
50746: EQUAL
50747: IFFALSE 50774
// tmp := Insert ( tmp , 1 , j ) else
50749: LD_ADDR_VAR 0 19
50753: PUSH
50754: LD_VAR 0 19
50758: PPUSH
50759: LD_INT 1
50761: PPUSH
50762: LD_VAR 0 9
50766: PPUSH
50767: CALL_OW 2
50771: ST_TO_ADDR
50772: GO 50803
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50774: LD_ADDR_VAR 0 19
50778: PUSH
50779: LD_VAR 0 19
50783: PPUSH
50784: LD_VAR 0 19
50788: PUSH
50789: LD_INT 1
50791: PLUS
50792: PPUSH
50793: LD_VAR 0 9
50797: PPUSH
50798: CALL_OW 2
50802: ST_TO_ADDR
50803: GO 50731
50805: POP
50806: POP
// if tmp then
50807: LD_VAR 0 19
50811: IFFALSE 50823
// f := tmp ;
50813: LD_ADDR_VAR 0 12
50817: PUSH
50818: LD_VAR 0 19
50822: ST_TO_ADDR
// end ; x := personel [ i ] ;
50823: LD_ADDR_VAR 0 13
50827: PUSH
50828: LD_VAR 0 6
50832: PUSH
50833: LD_VAR 0 8
50837: ARRAY
50838: ST_TO_ADDR
// if x = - 1 then
50839: LD_VAR 0 13
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: EQUAL
50848: IFFALSE 51057
// begin for j in f do
50850: LD_ADDR_VAR 0 9
50854: PUSH
50855: LD_VAR 0 12
50859: PUSH
50860: FOR_IN
50861: IFFALSE 51053
// repeat InitHc ;
50863: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50867: LD_VAR 0 9
50871: PPUSH
50872: CALL_OW 266
50876: PUSH
50877: LD_INT 5
50879: EQUAL
50880: IFFALSE 50950
// begin if UnitsInside ( j ) < 3 then
50882: LD_VAR 0 9
50886: PPUSH
50887: CALL_OW 313
50891: PUSH
50892: LD_INT 3
50894: LESS
50895: IFFALSE 50931
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50897: LD_INT 0
50899: PPUSH
50900: LD_INT 5
50902: PUSH
50903: LD_INT 8
50905: PUSH
50906: LD_INT 9
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: LIST
50913: PUSH
50914: LD_VAR 0 17
50918: ARRAY
50919: PPUSH
50920: LD_VAR 0 4
50924: PPUSH
50925: CALL_OW 380
50929: GO 50948
// PrepareHuman ( false , i , skill ) ;
50931: LD_INT 0
50933: PPUSH
50934: LD_VAR 0 8
50938: PPUSH
50939: LD_VAR 0 4
50943: PPUSH
50944: CALL_OW 380
// end else
50948: GO 50967
// PrepareHuman ( false , i , skill ) ;
50950: LD_INT 0
50952: PPUSH
50953: LD_VAR 0 8
50957: PPUSH
50958: LD_VAR 0 4
50962: PPUSH
50963: CALL_OW 380
// un := CreateHuman ;
50967: LD_ADDR_VAR 0 14
50971: PUSH
50972: CALL_OW 44
50976: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50977: LD_ADDR_VAR 0 7
50981: PUSH
50982: LD_VAR 0 7
50986: PPUSH
50987: LD_INT 1
50989: PPUSH
50990: LD_VAR 0 14
50994: PPUSH
50995: CALL_OW 2
50999: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51000: LD_VAR 0 14
51004: PPUSH
51005: LD_VAR 0 9
51009: PPUSH
51010: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51014: LD_VAR 0 9
51018: PPUSH
51019: CALL_OW 313
51023: PUSH
51024: LD_INT 6
51026: EQUAL
51027: PUSH
51028: LD_VAR 0 9
51032: PPUSH
51033: CALL_OW 266
51037: PUSH
51038: LD_INT 32
51040: PUSH
51041: LD_INT 31
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: IN
51048: OR
51049: IFFALSE 50863
51051: GO 50860
51053: POP
51054: POP
// end else
51055: GO 51437
// for j = 1 to x do
51057: LD_ADDR_VAR 0 9
51061: PUSH
51062: DOUBLE
51063: LD_INT 1
51065: DEC
51066: ST_TO_ADDR
51067: LD_VAR 0 13
51071: PUSH
51072: FOR_TO
51073: IFFALSE 51435
// begin InitHc ;
51075: CALL_OW 19
// if not f then
51079: LD_VAR 0 12
51083: NOT
51084: IFFALSE 51173
// begin PrepareHuman ( false , i , skill ) ;
51086: LD_INT 0
51088: PPUSH
51089: LD_VAR 0 8
51093: PPUSH
51094: LD_VAR 0 4
51098: PPUSH
51099: CALL_OW 380
// un := CreateHuman ;
51103: LD_ADDR_VAR 0 14
51107: PUSH
51108: CALL_OW 44
51112: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51113: LD_ADDR_VAR 0 7
51117: PUSH
51118: LD_VAR 0 7
51122: PPUSH
51123: LD_INT 1
51125: PPUSH
51126: LD_VAR 0 14
51130: PPUSH
51131: CALL_OW 2
51135: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51136: LD_VAR 0 14
51140: PPUSH
51141: LD_VAR 0 1
51145: PPUSH
51146: CALL_OW 250
51150: PPUSH
51151: LD_VAR 0 1
51155: PPUSH
51156: CALL_OW 251
51160: PPUSH
51161: LD_INT 10
51163: PPUSH
51164: LD_INT 0
51166: PPUSH
51167: CALL_OW 50
// continue ;
51171: GO 51072
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51173: LD_VAR 0 12
51177: PUSH
51178: LD_INT 1
51180: ARRAY
51181: PPUSH
51182: CALL_OW 313
51186: PUSH
51187: LD_VAR 0 12
51191: PUSH
51192: LD_INT 1
51194: ARRAY
51195: PPUSH
51196: CALL_OW 266
51200: PUSH
51201: LD_INT 32
51203: PUSH
51204: LD_INT 31
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: IN
51211: AND
51212: PUSH
51213: LD_VAR 0 12
51217: PUSH
51218: LD_INT 1
51220: ARRAY
51221: PPUSH
51222: CALL_OW 313
51226: PUSH
51227: LD_INT 6
51229: EQUAL
51230: OR
51231: IFFALSE 51251
// f := Delete ( f , 1 ) ;
51233: LD_ADDR_VAR 0 12
51237: PUSH
51238: LD_VAR 0 12
51242: PPUSH
51243: LD_INT 1
51245: PPUSH
51246: CALL_OW 3
51250: ST_TO_ADDR
// if not f then
51251: LD_VAR 0 12
51255: NOT
51256: IFFALSE 51274
// begin x := x + 2 ;
51258: LD_ADDR_VAR 0 13
51262: PUSH
51263: LD_VAR 0 13
51267: PUSH
51268: LD_INT 2
51270: PLUS
51271: ST_TO_ADDR
// continue ;
51272: GO 51072
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51274: LD_VAR 0 12
51278: PUSH
51279: LD_INT 1
51281: ARRAY
51282: PPUSH
51283: CALL_OW 266
51287: PUSH
51288: LD_INT 5
51290: EQUAL
51291: IFFALSE 51365
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51293: LD_VAR 0 12
51297: PUSH
51298: LD_INT 1
51300: ARRAY
51301: PPUSH
51302: CALL_OW 313
51306: PUSH
51307: LD_INT 3
51309: LESS
51310: IFFALSE 51346
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51312: LD_INT 0
51314: PPUSH
51315: LD_INT 5
51317: PUSH
51318: LD_INT 8
51320: PUSH
51321: LD_INT 9
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: LIST
51328: PUSH
51329: LD_VAR 0 17
51333: ARRAY
51334: PPUSH
51335: LD_VAR 0 4
51339: PPUSH
51340: CALL_OW 380
51344: GO 51363
// PrepareHuman ( false , i , skill ) ;
51346: LD_INT 0
51348: PPUSH
51349: LD_VAR 0 8
51353: PPUSH
51354: LD_VAR 0 4
51358: PPUSH
51359: CALL_OW 380
// end else
51363: GO 51382
// PrepareHuman ( false , i , skill ) ;
51365: LD_INT 0
51367: PPUSH
51368: LD_VAR 0 8
51372: PPUSH
51373: LD_VAR 0 4
51377: PPUSH
51378: CALL_OW 380
// un := CreateHuman ;
51382: LD_ADDR_VAR 0 14
51386: PUSH
51387: CALL_OW 44
51391: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51392: LD_ADDR_VAR 0 7
51396: PUSH
51397: LD_VAR 0 7
51401: PPUSH
51402: LD_INT 1
51404: PPUSH
51405: LD_VAR 0 14
51409: PPUSH
51410: CALL_OW 2
51414: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51415: LD_VAR 0 14
51419: PPUSH
51420: LD_VAR 0 12
51424: PUSH
51425: LD_INT 1
51427: ARRAY
51428: PPUSH
51429: CALL_OW 52
// end ;
51433: GO 51072
51435: POP
51436: POP
// end ;
51437: GO 50374
51439: POP
51440: POP
// result := result ^ buildings ;
51441: LD_ADDR_VAR 0 7
51445: PUSH
51446: LD_VAR 0 7
51450: PUSH
51451: LD_VAR 0 18
51455: ADD
51456: ST_TO_ADDR
// end else
51457: GO 51600
// begin for i = 1 to personel do
51459: LD_ADDR_VAR 0 8
51463: PUSH
51464: DOUBLE
51465: LD_INT 1
51467: DEC
51468: ST_TO_ADDR
51469: LD_VAR 0 6
51473: PUSH
51474: FOR_TO
51475: IFFALSE 51598
// begin if i > 4 then
51477: LD_VAR 0 8
51481: PUSH
51482: LD_INT 4
51484: GREATER
51485: IFFALSE 51489
// break ;
51487: GO 51598
// x := personel [ i ] ;
51489: LD_ADDR_VAR 0 13
51493: PUSH
51494: LD_VAR 0 6
51498: PUSH
51499: LD_VAR 0 8
51503: ARRAY
51504: ST_TO_ADDR
// if x = - 1 then
51505: LD_VAR 0 13
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: EQUAL
51514: IFFALSE 51518
// continue ;
51516: GO 51474
// PrepareHuman ( false , i , skill ) ;
51518: LD_INT 0
51520: PPUSH
51521: LD_VAR 0 8
51525: PPUSH
51526: LD_VAR 0 4
51530: PPUSH
51531: CALL_OW 380
// un := CreateHuman ;
51535: LD_ADDR_VAR 0 14
51539: PUSH
51540: CALL_OW 44
51544: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51545: LD_VAR 0 14
51549: PPUSH
51550: LD_VAR 0 1
51554: PPUSH
51555: CALL_OW 250
51559: PPUSH
51560: LD_VAR 0 1
51564: PPUSH
51565: CALL_OW 251
51569: PPUSH
51570: LD_INT 10
51572: PPUSH
51573: LD_INT 0
51575: PPUSH
51576: CALL_OW 50
// result := result ^ un ;
51580: LD_ADDR_VAR 0 7
51584: PUSH
51585: LD_VAR 0 7
51589: PUSH
51590: LD_VAR 0 14
51594: ADD
51595: ST_TO_ADDR
// end ;
51596: GO 51474
51598: POP
51599: POP
// end ; end ;
51600: LD_VAR 0 7
51604: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51605: LD_INT 0
51607: PPUSH
51608: PPUSH
51609: PPUSH
51610: PPUSH
51611: PPUSH
51612: PPUSH
51613: PPUSH
51614: PPUSH
51615: PPUSH
51616: PPUSH
51617: PPUSH
51618: PPUSH
51619: PPUSH
51620: PPUSH
51621: PPUSH
51622: PPUSH
// result := false ;
51623: LD_ADDR_VAR 0 3
51627: PUSH
51628: LD_INT 0
51630: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51631: LD_VAR 0 1
51635: NOT
51636: PUSH
51637: LD_VAR 0 1
51641: PPUSH
51642: CALL_OW 266
51646: PUSH
51647: LD_INT 32
51649: PUSH
51650: LD_INT 33
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: IN
51657: NOT
51658: OR
51659: IFFALSE 51663
// exit ;
51661: GO 52772
// nat := GetNation ( tower ) ;
51663: LD_ADDR_VAR 0 12
51667: PUSH
51668: LD_VAR 0 1
51672: PPUSH
51673: CALL_OW 248
51677: ST_TO_ADDR
// side := GetSide ( tower ) ;
51678: LD_ADDR_VAR 0 16
51682: PUSH
51683: LD_VAR 0 1
51687: PPUSH
51688: CALL_OW 255
51692: ST_TO_ADDR
// x := GetX ( tower ) ;
51693: LD_ADDR_VAR 0 10
51697: PUSH
51698: LD_VAR 0 1
51702: PPUSH
51703: CALL_OW 250
51707: ST_TO_ADDR
// y := GetY ( tower ) ;
51708: LD_ADDR_VAR 0 11
51712: PUSH
51713: LD_VAR 0 1
51717: PPUSH
51718: CALL_OW 251
51722: ST_TO_ADDR
// if not x or not y then
51723: LD_VAR 0 10
51727: NOT
51728: PUSH
51729: LD_VAR 0 11
51733: NOT
51734: OR
51735: IFFALSE 51739
// exit ;
51737: GO 52772
// weapon := 0 ;
51739: LD_ADDR_VAR 0 18
51743: PUSH
51744: LD_INT 0
51746: ST_TO_ADDR
// fac_list := [ ] ;
51747: LD_ADDR_VAR 0 17
51751: PUSH
51752: EMPTY
51753: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51754: LD_ADDR_VAR 0 6
51758: PUSH
51759: LD_VAR 0 1
51763: PPUSH
51764: CALL_OW 274
51768: PPUSH
51769: LD_VAR 0 2
51773: PPUSH
51774: LD_INT 0
51776: PPUSH
51777: CALL 49343 0 3
51781: PPUSH
51782: LD_INT 30
51784: PUSH
51785: LD_INT 3
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PPUSH
51792: CALL_OW 72
51796: ST_TO_ADDR
// if not factories then
51797: LD_VAR 0 6
51801: NOT
51802: IFFALSE 51806
// exit ;
51804: GO 52772
// for i in factories do
51806: LD_ADDR_VAR 0 8
51810: PUSH
51811: LD_VAR 0 6
51815: PUSH
51816: FOR_IN
51817: IFFALSE 51842
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51819: LD_ADDR_VAR 0 17
51823: PUSH
51824: LD_VAR 0 17
51828: PUSH
51829: LD_VAR 0 8
51833: PPUSH
51834: CALL_OW 478
51838: UNION
51839: ST_TO_ADDR
51840: GO 51816
51842: POP
51843: POP
// if not fac_list then
51844: LD_VAR 0 17
51848: NOT
51849: IFFALSE 51853
// exit ;
51851: GO 52772
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51853: LD_ADDR_VAR 0 5
51857: PUSH
51858: LD_INT 4
51860: PUSH
51861: LD_INT 5
51863: PUSH
51864: LD_INT 9
51866: PUSH
51867: LD_INT 10
51869: PUSH
51870: LD_INT 6
51872: PUSH
51873: LD_INT 7
51875: PUSH
51876: LD_INT 11
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 27
51890: PUSH
51891: LD_INT 28
51893: PUSH
51894: LD_INT 26
51896: PUSH
51897: LD_INT 30
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 43
51908: PUSH
51909: LD_INT 44
51911: PUSH
51912: LD_INT 46
51914: PUSH
51915: LD_INT 45
51917: PUSH
51918: LD_INT 47
51920: PUSH
51921: LD_INT 49
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: LIST
51936: PUSH
51937: LD_VAR 0 12
51941: ARRAY
51942: ST_TO_ADDR
// list := list isect fac_list ;
51943: LD_ADDR_VAR 0 5
51947: PUSH
51948: LD_VAR 0 5
51952: PUSH
51953: LD_VAR 0 17
51957: ISECT
51958: ST_TO_ADDR
// if not list then
51959: LD_VAR 0 5
51963: NOT
51964: IFFALSE 51968
// exit ;
51966: GO 52772
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51968: LD_VAR 0 12
51972: PUSH
51973: LD_INT 3
51975: EQUAL
51976: PUSH
51977: LD_INT 49
51979: PUSH
51980: LD_VAR 0 5
51984: IN
51985: AND
51986: PUSH
51987: LD_INT 31
51989: PPUSH
51990: LD_VAR 0 16
51994: PPUSH
51995: CALL_OW 321
51999: PUSH
52000: LD_INT 2
52002: EQUAL
52003: AND
52004: IFFALSE 52064
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52006: LD_INT 22
52008: PUSH
52009: LD_VAR 0 16
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 35
52020: PUSH
52021: LD_INT 49
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 91
52030: PUSH
52031: LD_VAR 0 1
52035: PUSH
52036: LD_INT 10
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: LIST
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: LIST
52048: PPUSH
52049: CALL_OW 69
52053: NOT
52054: IFFALSE 52064
// weapon := ru_time_lapser ;
52056: LD_ADDR_VAR 0 18
52060: PUSH
52061: LD_INT 49
52063: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52064: LD_VAR 0 12
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: LD_INT 2
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: IN
52079: PUSH
52080: LD_INT 11
52082: PUSH
52083: LD_VAR 0 5
52087: IN
52088: PUSH
52089: LD_INT 30
52091: PUSH
52092: LD_VAR 0 5
52096: IN
52097: OR
52098: AND
52099: PUSH
52100: LD_INT 6
52102: PPUSH
52103: LD_VAR 0 16
52107: PPUSH
52108: CALL_OW 321
52112: PUSH
52113: LD_INT 2
52115: EQUAL
52116: AND
52117: IFFALSE 52282
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52119: LD_INT 22
52121: PUSH
52122: LD_VAR 0 16
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: LD_INT 35
52136: PUSH
52137: LD_INT 11
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 35
52146: PUSH
52147: LD_INT 30
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 91
52161: PUSH
52162: LD_VAR 0 1
52166: PUSH
52167: LD_INT 18
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: LIST
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: LIST
52179: PPUSH
52180: CALL_OW 69
52184: NOT
52185: PUSH
52186: LD_INT 22
52188: PUSH
52189: LD_VAR 0 16
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: LD_INT 30
52203: PUSH
52204: LD_INT 32
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 30
52213: PUSH
52214: LD_INT 33
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 91
52228: PUSH
52229: LD_VAR 0 1
52233: PUSH
52234: LD_INT 12
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: LIST
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: LIST
52246: PUSH
52247: EMPTY
52248: LIST
52249: PPUSH
52250: CALL_OW 69
52254: PUSH
52255: LD_INT 2
52257: GREATER
52258: AND
52259: IFFALSE 52282
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52261: LD_ADDR_VAR 0 18
52265: PUSH
52266: LD_INT 11
52268: PUSH
52269: LD_INT 30
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_VAR 0 12
52280: ARRAY
52281: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52282: LD_VAR 0 18
52286: NOT
52287: PUSH
52288: LD_INT 40
52290: PPUSH
52291: LD_VAR 0 16
52295: PPUSH
52296: CALL_OW 321
52300: PUSH
52301: LD_INT 2
52303: EQUAL
52304: AND
52305: PUSH
52306: LD_INT 7
52308: PUSH
52309: LD_VAR 0 5
52313: IN
52314: PUSH
52315: LD_INT 28
52317: PUSH
52318: LD_VAR 0 5
52322: IN
52323: OR
52324: PUSH
52325: LD_INT 45
52327: PUSH
52328: LD_VAR 0 5
52332: IN
52333: OR
52334: AND
52335: IFFALSE 52589
// begin hex := GetHexInfo ( x , y ) ;
52337: LD_ADDR_VAR 0 4
52341: PUSH
52342: LD_VAR 0 10
52346: PPUSH
52347: LD_VAR 0 11
52351: PPUSH
52352: CALL_OW 546
52356: ST_TO_ADDR
// if hex [ 1 ] then
52357: LD_VAR 0 4
52361: PUSH
52362: LD_INT 1
52364: ARRAY
52365: IFFALSE 52369
// exit ;
52367: GO 52772
// height := hex [ 2 ] ;
52369: LD_ADDR_VAR 0 15
52373: PUSH
52374: LD_VAR 0 4
52378: PUSH
52379: LD_INT 2
52381: ARRAY
52382: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52383: LD_ADDR_VAR 0 14
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: LD_INT 3
52396: PUSH
52397: LD_INT 5
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: ST_TO_ADDR
// for i in tmp do
52406: LD_ADDR_VAR 0 8
52410: PUSH
52411: LD_VAR 0 14
52415: PUSH
52416: FOR_IN
52417: IFFALSE 52587
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52419: LD_ADDR_VAR 0 9
52423: PUSH
52424: LD_VAR 0 10
52428: PPUSH
52429: LD_VAR 0 8
52433: PPUSH
52434: LD_INT 5
52436: PPUSH
52437: CALL_OW 272
52441: PUSH
52442: LD_VAR 0 11
52446: PPUSH
52447: LD_VAR 0 8
52451: PPUSH
52452: LD_INT 5
52454: PPUSH
52455: CALL_OW 273
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52464: LD_VAR 0 9
52468: PUSH
52469: LD_INT 1
52471: ARRAY
52472: PPUSH
52473: LD_VAR 0 9
52477: PUSH
52478: LD_INT 2
52480: ARRAY
52481: PPUSH
52482: CALL_OW 488
52486: IFFALSE 52585
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52488: LD_ADDR_VAR 0 4
52492: PUSH
52493: LD_VAR 0 9
52497: PUSH
52498: LD_INT 1
52500: ARRAY
52501: PPUSH
52502: LD_VAR 0 9
52506: PUSH
52507: LD_INT 2
52509: ARRAY
52510: PPUSH
52511: CALL_OW 546
52515: ST_TO_ADDR
// if hex [ 1 ] then
52516: LD_VAR 0 4
52520: PUSH
52521: LD_INT 1
52523: ARRAY
52524: IFFALSE 52528
// continue ;
52526: GO 52416
// h := hex [ 2 ] ;
52528: LD_ADDR_VAR 0 13
52532: PUSH
52533: LD_VAR 0 4
52537: PUSH
52538: LD_INT 2
52540: ARRAY
52541: ST_TO_ADDR
// if h + 7 < height then
52542: LD_VAR 0 13
52546: PUSH
52547: LD_INT 7
52549: PLUS
52550: PUSH
52551: LD_VAR 0 15
52555: LESS
52556: IFFALSE 52585
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52558: LD_ADDR_VAR 0 18
52562: PUSH
52563: LD_INT 7
52565: PUSH
52566: LD_INT 28
52568: PUSH
52569: LD_INT 45
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: LIST
52576: PUSH
52577: LD_VAR 0 12
52581: ARRAY
52582: ST_TO_ADDR
// break ;
52583: GO 52587
// end ; end ; end ;
52585: GO 52416
52587: POP
52588: POP
// end ; if not weapon then
52589: LD_VAR 0 18
52593: NOT
52594: IFFALSE 52654
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52596: LD_ADDR_VAR 0 5
52600: PUSH
52601: LD_VAR 0 5
52605: PUSH
52606: LD_INT 11
52608: PUSH
52609: LD_INT 30
52611: PUSH
52612: LD_INT 49
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: LIST
52619: DIFF
52620: ST_TO_ADDR
// if not list then
52621: LD_VAR 0 5
52625: NOT
52626: IFFALSE 52630
// exit ;
52628: GO 52772
// weapon := list [ rand ( 1 , list ) ] ;
52630: LD_ADDR_VAR 0 18
52634: PUSH
52635: LD_VAR 0 5
52639: PUSH
52640: LD_INT 1
52642: PPUSH
52643: LD_VAR 0 5
52647: PPUSH
52648: CALL_OW 12
52652: ARRAY
52653: ST_TO_ADDR
// end ; if weapon then
52654: LD_VAR 0 18
52658: IFFALSE 52772
// begin tmp := CostOfWeapon ( weapon ) ;
52660: LD_ADDR_VAR 0 14
52664: PUSH
52665: LD_VAR 0 18
52669: PPUSH
52670: CALL_OW 451
52674: ST_TO_ADDR
// j := GetBase ( tower ) ;
52675: LD_ADDR_VAR 0 9
52679: PUSH
52680: LD_VAR 0 1
52684: PPUSH
52685: CALL_OW 274
52689: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52690: LD_VAR 0 9
52694: PPUSH
52695: LD_INT 1
52697: PPUSH
52698: CALL_OW 275
52702: PUSH
52703: LD_VAR 0 14
52707: PUSH
52708: LD_INT 1
52710: ARRAY
52711: GREATEREQUAL
52712: PUSH
52713: LD_VAR 0 9
52717: PPUSH
52718: LD_INT 2
52720: PPUSH
52721: CALL_OW 275
52725: PUSH
52726: LD_VAR 0 14
52730: PUSH
52731: LD_INT 2
52733: ARRAY
52734: GREATEREQUAL
52735: AND
52736: PUSH
52737: LD_VAR 0 9
52741: PPUSH
52742: LD_INT 3
52744: PPUSH
52745: CALL_OW 275
52749: PUSH
52750: LD_VAR 0 14
52754: PUSH
52755: LD_INT 3
52757: ARRAY
52758: GREATEREQUAL
52759: AND
52760: IFFALSE 52772
// result := weapon ;
52762: LD_ADDR_VAR 0 3
52766: PUSH
52767: LD_VAR 0 18
52771: ST_TO_ADDR
// end ; end ;
52772: LD_VAR 0 3
52776: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52777: LD_INT 0
52779: PPUSH
52780: PPUSH
// result := true ;
52781: LD_ADDR_VAR 0 3
52785: PUSH
52786: LD_INT 1
52788: ST_TO_ADDR
// if array1 = array2 then
52789: LD_VAR 0 1
52793: PUSH
52794: LD_VAR 0 2
52798: EQUAL
52799: IFFALSE 52859
// begin for i = 1 to array1 do
52801: LD_ADDR_VAR 0 4
52805: PUSH
52806: DOUBLE
52807: LD_INT 1
52809: DEC
52810: ST_TO_ADDR
52811: LD_VAR 0 1
52815: PUSH
52816: FOR_TO
52817: IFFALSE 52855
// if array1 [ i ] <> array2 [ i ] then
52819: LD_VAR 0 1
52823: PUSH
52824: LD_VAR 0 4
52828: ARRAY
52829: PUSH
52830: LD_VAR 0 2
52834: PUSH
52835: LD_VAR 0 4
52839: ARRAY
52840: NONEQUAL
52841: IFFALSE 52853
// begin result := false ;
52843: LD_ADDR_VAR 0 3
52847: PUSH
52848: LD_INT 0
52850: ST_TO_ADDR
// break ;
52851: GO 52855
// end ;
52853: GO 52816
52855: POP
52856: POP
// end else
52857: GO 52867
// result := false ;
52859: LD_ADDR_VAR 0 3
52863: PUSH
52864: LD_INT 0
52866: ST_TO_ADDR
// end ;
52867: LD_VAR 0 3
52871: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52872: LD_INT 0
52874: PPUSH
52875: PPUSH
// if not array1 or not array2 then
52876: LD_VAR 0 1
52880: NOT
52881: PUSH
52882: LD_VAR 0 2
52886: NOT
52887: OR
52888: IFFALSE 52892
// exit ;
52890: GO 52956
// result := true ;
52892: LD_ADDR_VAR 0 3
52896: PUSH
52897: LD_INT 1
52899: ST_TO_ADDR
// for i = 1 to array1 do
52900: LD_ADDR_VAR 0 4
52904: PUSH
52905: DOUBLE
52906: LD_INT 1
52908: DEC
52909: ST_TO_ADDR
52910: LD_VAR 0 1
52914: PUSH
52915: FOR_TO
52916: IFFALSE 52954
// if array1 [ i ] <> array2 [ i ] then
52918: LD_VAR 0 1
52922: PUSH
52923: LD_VAR 0 4
52927: ARRAY
52928: PUSH
52929: LD_VAR 0 2
52933: PUSH
52934: LD_VAR 0 4
52938: ARRAY
52939: NONEQUAL
52940: IFFALSE 52952
// begin result := false ;
52942: LD_ADDR_VAR 0 3
52946: PUSH
52947: LD_INT 0
52949: ST_TO_ADDR
// break ;
52950: GO 52954
// end ;
52952: GO 52915
52954: POP
52955: POP
// end ;
52956: LD_VAR 0 3
52960: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52961: LD_INT 0
52963: PPUSH
52964: PPUSH
52965: PPUSH
// pom := GetBase ( fac ) ;
52966: LD_ADDR_VAR 0 5
52970: PUSH
52971: LD_VAR 0 1
52975: PPUSH
52976: CALL_OW 274
52980: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52981: LD_ADDR_VAR 0 4
52985: PUSH
52986: LD_VAR 0 2
52990: PUSH
52991: LD_INT 1
52993: ARRAY
52994: PPUSH
52995: LD_VAR 0 2
52999: PUSH
53000: LD_INT 2
53002: ARRAY
53003: PPUSH
53004: LD_VAR 0 2
53008: PUSH
53009: LD_INT 3
53011: ARRAY
53012: PPUSH
53013: LD_VAR 0 2
53017: PUSH
53018: LD_INT 4
53020: ARRAY
53021: PPUSH
53022: CALL_OW 449
53026: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53027: LD_ADDR_VAR 0 3
53031: PUSH
53032: LD_VAR 0 5
53036: PPUSH
53037: LD_INT 1
53039: PPUSH
53040: CALL_OW 275
53044: PUSH
53045: LD_VAR 0 4
53049: PUSH
53050: LD_INT 1
53052: ARRAY
53053: GREATEREQUAL
53054: PUSH
53055: LD_VAR 0 5
53059: PPUSH
53060: LD_INT 2
53062: PPUSH
53063: CALL_OW 275
53067: PUSH
53068: LD_VAR 0 4
53072: PUSH
53073: LD_INT 2
53075: ARRAY
53076: GREATEREQUAL
53077: AND
53078: PUSH
53079: LD_VAR 0 5
53083: PPUSH
53084: LD_INT 3
53086: PPUSH
53087: CALL_OW 275
53091: PUSH
53092: LD_VAR 0 4
53096: PUSH
53097: LD_INT 3
53099: ARRAY
53100: GREATEREQUAL
53101: AND
53102: ST_TO_ADDR
// end ;
53103: LD_VAR 0 3
53107: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53108: LD_INT 0
53110: PPUSH
53111: PPUSH
53112: PPUSH
53113: PPUSH
// pom := GetBase ( building ) ;
53114: LD_ADDR_VAR 0 3
53118: PUSH
53119: LD_VAR 0 1
53123: PPUSH
53124: CALL_OW 274
53128: ST_TO_ADDR
// if not pom then
53129: LD_VAR 0 3
53133: NOT
53134: IFFALSE 53138
// exit ;
53136: GO 53308
// btype := GetBType ( building ) ;
53138: LD_ADDR_VAR 0 5
53142: PUSH
53143: LD_VAR 0 1
53147: PPUSH
53148: CALL_OW 266
53152: ST_TO_ADDR
// if btype = b_armoury then
53153: LD_VAR 0 5
53157: PUSH
53158: LD_INT 4
53160: EQUAL
53161: IFFALSE 53171
// btype := b_barracks ;
53163: LD_ADDR_VAR 0 5
53167: PUSH
53168: LD_INT 5
53170: ST_TO_ADDR
// if btype = b_depot then
53171: LD_VAR 0 5
53175: PUSH
53176: LD_INT 0
53178: EQUAL
53179: IFFALSE 53189
// btype := b_warehouse ;
53181: LD_ADDR_VAR 0 5
53185: PUSH
53186: LD_INT 1
53188: ST_TO_ADDR
// if btype = b_workshop then
53189: LD_VAR 0 5
53193: PUSH
53194: LD_INT 2
53196: EQUAL
53197: IFFALSE 53207
// btype := b_factory ;
53199: LD_ADDR_VAR 0 5
53203: PUSH
53204: LD_INT 3
53206: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53207: LD_ADDR_VAR 0 4
53211: PUSH
53212: LD_VAR 0 5
53216: PPUSH
53217: LD_VAR 0 1
53221: PPUSH
53222: CALL_OW 248
53226: PPUSH
53227: CALL_OW 450
53231: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53232: LD_ADDR_VAR 0 2
53236: PUSH
53237: LD_VAR 0 3
53241: PPUSH
53242: LD_INT 1
53244: PPUSH
53245: CALL_OW 275
53249: PUSH
53250: LD_VAR 0 4
53254: PUSH
53255: LD_INT 1
53257: ARRAY
53258: GREATEREQUAL
53259: PUSH
53260: LD_VAR 0 3
53264: PPUSH
53265: LD_INT 2
53267: PPUSH
53268: CALL_OW 275
53272: PUSH
53273: LD_VAR 0 4
53277: PUSH
53278: LD_INT 2
53280: ARRAY
53281: GREATEREQUAL
53282: AND
53283: PUSH
53284: LD_VAR 0 3
53288: PPUSH
53289: LD_INT 3
53291: PPUSH
53292: CALL_OW 275
53296: PUSH
53297: LD_VAR 0 4
53301: PUSH
53302: LD_INT 3
53304: ARRAY
53305: GREATEREQUAL
53306: AND
53307: ST_TO_ADDR
// end ;
53308: LD_VAR 0 2
53312: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53313: LD_INT 0
53315: PPUSH
53316: PPUSH
53317: PPUSH
// pom := GetBase ( building ) ;
53318: LD_ADDR_VAR 0 4
53322: PUSH
53323: LD_VAR 0 1
53327: PPUSH
53328: CALL_OW 274
53332: ST_TO_ADDR
// if not pom then
53333: LD_VAR 0 4
53337: NOT
53338: IFFALSE 53342
// exit ;
53340: GO 53443
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53342: LD_ADDR_VAR 0 5
53346: PUSH
53347: LD_VAR 0 2
53351: PPUSH
53352: LD_VAR 0 1
53356: PPUSH
53357: CALL_OW 248
53361: PPUSH
53362: CALL_OW 450
53366: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53367: LD_ADDR_VAR 0 3
53371: PUSH
53372: LD_VAR 0 4
53376: PPUSH
53377: LD_INT 1
53379: PPUSH
53380: CALL_OW 275
53384: PUSH
53385: LD_VAR 0 5
53389: PUSH
53390: LD_INT 1
53392: ARRAY
53393: GREATEREQUAL
53394: PUSH
53395: LD_VAR 0 4
53399: PPUSH
53400: LD_INT 2
53402: PPUSH
53403: CALL_OW 275
53407: PUSH
53408: LD_VAR 0 5
53412: PUSH
53413: LD_INT 2
53415: ARRAY
53416: GREATEREQUAL
53417: AND
53418: PUSH
53419: LD_VAR 0 4
53423: PPUSH
53424: LD_INT 3
53426: PPUSH
53427: CALL_OW 275
53431: PUSH
53432: LD_VAR 0 5
53436: PUSH
53437: LD_INT 3
53439: ARRAY
53440: GREATEREQUAL
53441: AND
53442: ST_TO_ADDR
// end ;
53443: LD_VAR 0 3
53447: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53448: LD_INT 0
53450: PPUSH
53451: PPUSH
53452: PPUSH
53453: PPUSH
53454: PPUSH
53455: PPUSH
53456: PPUSH
53457: PPUSH
53458: PPUSH
53459: PPUSH
53460: PPUSH
// result := false ;
53461: LD_ADDR_VAR 0 8
53465: PUSH
53466: LD_INT 0
53468: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53469: LD_VAR 0 5
53473: NOT
53474: PUSH
53475: LD_VAR 0 1
53479: NOT
53480: OR
53481: PUSH
53482: LD_VAR 0 2
53486: NOT
53487: OR
53488: PUSH
53489: LD_VAR 0 3
53493: NOT
53494: OR
53495: IFFALSE 53499
// exit ;
53497: GO 54313
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53499: LD_ADDR_VAR 0 14
53503: PUSH
53504: LD_VAR 0 1
53508: PPUSH
53509: LD_VAR 0 2
53513: PPUSH
53514: LD_VAR 0 3
53518: PPUSH
53519: LD_VAR 0 4
53523: PPUSH
53524: LD_VAR 0 5
53528: PUSH
53529: LD_INT 1
53531: ARRAY
53532: PPUSH
53533: CALL_OW 248
53537: PPUSH
53538: LD_INT 0
53540: PPUSH
53541: CALL 55566 0 6
53545: ST_TO_ADDR
// if not hexes then
53546: LD_VAR 0 14
53550: NOT
53551: IFFALSE 53555
// exit ;
53553: GO 54313
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53555: LD_ADDR_VAR 0 17
53559: PUSH
53560: LD_VAR 0 5
53564: PPUSH
53565: LD_INT 22
53567: PUSH
53568: LD_VAR 0 13
53572: PPUSH
53573: CALL_OW 255
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: LD_INT 30
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 30
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: LIST
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PPUSH
53614: CALL_OW 72
53618: ST_TO_ADDR
// for i = 1 to hexes do
53619: LD_ADDR_VAR 0 9
53623: PUSH
53624: DOUBLE
53625: LD_INT 1
53627: DEC
53628: ST_TO_ADDR
53629: LD_VAR 0 14
53633: PUSH
53634: FOR_TO
53635: IFFALSE 54311
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53637: LD_ADDR_VAR 0 13
53641: PUSH
53642: LD_VAR 0 14
53646: PUSH
53647: LD_VAR 0 9
53651: ARRAY
53652: PUSH
53653: LD_INT 1
53655: ARRAY
53656: PPUSH
53657: LD_VAR 0 14
53661: PUSH
53662: LD_VAR 0 9
53666: ARRAY
53667: PUSH
53668: LD_INT 2
53670: ARRAY
53671: PPUSH
53672: CALL_OW 428
53676: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53677: LD_VAR 0 14
53681: PUSH
53682: LD_VAR 0 9
53686: ARRAY
53687: PUSH
53688: LD_INT 1
53690: ARRAY
53691: PPUSH
53692: LD_VAR 0 14
53696: PUSH
53697: LD_VAR 0 9
53701: ARRAY
53702: PUSH
53703: LD_INT 2
53705: ARRAY
53706: PPUSH
53707: CALL_OW 351
53711: PUSH
53712: LD_VAR 0 14
53716: PUSH
53717: LD_VAR 0 9
53721: ARRAY
53722: PUSH
53723: LD_INT 1
53725: ARRAY
53726: PPUSH
53727: LD_VAR 0 14
53731: PUSH
53732: LD_VAR 0 9
53736: ARRAY
53737: PUSH
53738: LD_INT 2
53740: ARRAY
53741: PPUSH
53742: CALL_OW 488
53746: NOT
53747: OR
53748: PUSH
53749: LD_VAR 0 13
53753: PPUSH
53754: CALL_OW 247
53758: PUSH
53759: LD_INT 3
53761: EQUAL
53762: OR
53763: IFFALSE 53769
// exit ;
53765: POP
53766: POP
53767: GO 54313
// if not tmp then
53769: LD_VAR 0 13
53773: NOT
53774: IFFALSE 53778
// continue ;
53776: GO 53634
// result := true ;
53778: LD_ADDR_VAR 0 8
53782: PUSH
53783: LD_INT 1
53785: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53786: LD_VAR 0 6
53790: PUSH
53791: LD_VAR 0 13
53795: PPUSH
53796: CALL_OW 247
53800: PUSH
53801: LD_INT 2
53803: EQUAL
53804: AND
53805: PUSH
53806: LD_VAR 0 13
53810: PPUSH
53811: CALL_OW 263
53815: PUSH
53816: LD_INT 1
53818: EQUAL
53819: AND
53820: IFFALSE 53984
// begin if IsDrivenBy ( tmp ) then
53822: LD_VAR 0 13
53826: PPUSH
53827: CALL_OW 311
53831: IFFALSE 53835
// continue ;
53833: GO 53634
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53835: LD_VAR 0 6
53839: PPUSH
53840: LD_INT 3
53842: PUSH
53843: LD_INT 60
53845: PUSH
53846: EMPTY
53847: LIST
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 3
53855: PUSH
53856: LD_INT 55
53858: PUSH
53859: EMPTY
53860: LIST
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PPUSH
53870: CALL_OW 72
53874: IFFALSE 53982
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53876: LD_ADDR_VAR 0 18
53880: PUSH
53881: LD_VAR 0 6
53885: PPUSH
53886: LD_INT 3
53888: PUSH
53889: LD_INT 60
53891: PUSH
53892: EMPTY
53893: LIST
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 3
53901: PUSH
53902: LD_INT 55
53904: PUSH
53905: EMPTY
53906: LIST
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PPUSH
53916: CALL_OW 72
53920: PUSH
53921: LD_INT 1
53923: ARRAY
53924: ST_TO_ADDR
// if IsInUnit ( driver ) then
53925: LD_VAR 0 18
53929: PPUSH
53930: CALL_OW 310
53934: IFFALSE 53945
// ComExit ( driver ) ;
53936: LD_VAR 0 18
53940: PPUSH
53941: CALL 79367 0 1
// AddComEnterUnit ( driver , tmp ) ;
53945: LD_VAR 0 18
53949: PPUSH
53950: LD_VAR 0 13
53954: PPUSH
53955: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53959: LD_VAR 0 18
53963: PPUSH
53964: LD_VAR 0 7
53968: PPUSH
53969: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53973: LD_VAR 0 18
53977: PPUSH
53978: CALL_OW 181
// end ; continue ;
53982: GO 53634
// end ; if not cleaners or not tmp in cleaners then
53984: LD_VAR 0 6
53988: NOT
53989: PUSH
53990: LD_VAR 0 13
53994: PUSH
53995: LD_VAR 0 6
53999: IN
54000: NOT
54001: OR
54002: IFFALSE 54309
// begin if dep then
54004: LD_VAR 0 17
54008: IFFALSE 54144
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54010: LD_ADDR_VAR 0 16
54014: PUSH
54015: LD_VAR 0 17
54019: PUSH
54020: LD_INT 1
54022: ARRAY
54023: PPUSH
54024: CALL_OW 250
54028: PPUSH
54029: LD_VAR 0 17
54033: PUSH
54034: LD_INT 1
54036: ARRAY
54037: PPUSH
54038: CALL_OW 254
54042: PPUSH
54043: LD_INT 5
54045: PPUSH
54046: CALL_OW 272
54050: PUSH
54051: LD_VAR 0 17
54055: PUSH
54056: LD_INT 1
54058: ARRAY
54059: PPUSH
54060: CALL_OW 251
54064: PPUSH
54065: LD_VAR 0 17
54069: PUSH
54070: LD_INT 1
54072: ARRAY
54073: PPUSH
54074: CALL_OW 254
54078: PPUSH
54079: LD_INT 5
54081: PPUSH
54082: CALL_OW 273
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54091: LD_VAR 0 16
54095: PUSH
54096: LD_INT 1
54098: ARRAY
54099: PPUSH
54100: LD_VAR 0 16
54104: PUSH
54105: LD_INT 2
54107: ARRAY
54108: PPUSH
54109: CALL_OW 488
54113: IFFALSE 54144
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54115: LD_VAR 0 13
54119: PPUSH
54120: LD_VAR 0 16
54124: PUSH
54125: LD_INT 1
54127: ARRAY
54128: PPUSH
54129: LD_VAR 0 16
54133: PUSH
54134: LD_INT 2
54136: ARRAY
54137: PPUSH
54138: CALL_OW 111
// continue ;
54142: GO 53634
// end ; end ; r := GetDir ( tmp ) ;
54144: LD_ADDR_VAR 0 15
54148: PUSH
54149: LD_VAR 0 13
54153: PPUSH
54154: CALL_OW 254
54158: ST_TO_ADDR
// if r = 5 then
54159: LD_VAR 0 15
54163: PUSH
54164: LD_INT 5
54166: EQUAL
54167: IFFALSE 54177
// r := 0 ;
54169: LD_ADDR_VAR 0 15
54173: PUSH
54174: LD_INT 0
54176: ST_TO_ADDR
// for j = r to 5 do
54177: LD_ADDR_VAR 0 10
54181: PUSH
54182: DOUBLE
54183: LD_VAR 0 15
54187: DEC
54188: ST_TO_ADDR
54189: LD_INT 5
54191: PUSH
54192: FOR_TO
54193: IFFALSE 54307
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54195: LD_ADDR_VAR 0 11
54199: PUSH
54200: LD_VAR 0 13
54204: PPUSH
54205: CALL_OW 250
54209: PPUSH
54210: LD_VAR 0 10
54214: PPUSH
54215: LD_INT 2
54217: PPUSH
54218: CALL_OW 272
54222: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54223: LD_ADDR_VAR 0 12
54227: PUSH
54228: LD_VAR 0 13
54232: PPUSH
54233: CALL_OW 251
54237: PPUSH
54238: LD_VAR 0 10
54242: PPUSH
54243: LD_INT 2
54245: PPUSH
54246: CALL_OW 273
54250: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54251: LD_VAR 0 11
54255: PPUSH
54256: LD_VAR 0 12
54260: PPUSH
54261: CALL_OW 488
54265: PUSH
54266: LD_VAR 0 11
54270: PPUSH
54271: LD_VAR 0 12
54275: PPUSH
54276: CALL_OW 428
54280: NOT
54281: AND
54282: IFFALSE 54305
// begin ComMoveXY ( tmp , _x , _y ) ;
54284: LD_VAR 0 13
54288: PPUSH
54289: LD_VAR 0 11
54293: PPUSH
54294: LD_VAR 0 12
54298: PPUSH
54299: CALL_OW 111
// break ;
54303: GO 54307
// end ; end ;
54305: GO 54192
54307: POP
54308: POP
// end ; end ;
54309: GO 53634
54311: POP
54312: POP
// end ;
54313: LD_VAR 0 8
54317: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54318: LD_INT 0
54320: PPUSH
// result := true ;
54321: LD_ADDR_VAR 0 3
54325: PUSH
54326: LD_INT 1
54328: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54329: LD_VAR 0 2
54333: PUSH
54334: LD_INT 24
54336: DOUBLE
54337: EQUAL
54338: IFTRUE 54348
54340: LD_INT 33
54342: DOUBLE
54343: EQUAL
54344: IFTRUE 54348
54346: GO 54373
54348: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54349: LD_ADDR_VAR 0 3
54353: PUSH
54354: LD_INT 32
54356: PPUSH
54357: LD_VAR 0 1
54361: PPUSH
54362: CALL_OW 321
54366: PUSH
54367: LD_INT 2
54369: EQUAL
54370: ST_TO_ADDR
54371: GO 54689
54373: LD_INT 20
54375: DOUBLE
54376: EQUAL
54377: IFTRUE 54381
54379: GO 54406
54381: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54382: LD_ADDR_VAR 0 3
54386: PUSH
54387: LD_INT 6
54389: PPUSH
54390: LD_VAR 0 1
54394: PPUSH
54395: CALL_OW 321
54399: PUSH
54400: LD_INT 2
54402: EQUAL
54403: ST_TO_ADDR
54404: GO 54689
54406: LD_INT 22
54408: DOUBLE
54409: EQUAL
54410: IFTRUE 54420
54412: LD_INT 36
54414: DOUBLE
54415: EQUAL
54416: IFTRUE 54420
54418: GO 54445
54420: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54421: LD_ADDR_VAR 0 3
54425: PUSH
54426: LD_INT 15
54428: PPUSH
54429: LD_VAR 0 1
54433: PPUSH
54434: CALL_OW 321
54438: PUSH
54439: LD_INT 2
54441: EQUAL
54442: ST_TO_ADDR
54443: GO 54689
54445: LD_INT 30
54447: DOUBLE
54448: EQUAL
54449: IFTRUE 54453
54451: GO 54478
54453: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54454: LD_ADDR_VAR 0 3
54458: PUSH
54459: LD_INT 20
54461: PPUSH
54462: LD_VAR 0 1
54466: PPUSH
54467: CALL_OW 321
54471: PUSH
54472: LD_INT 2
54474: EQUAL
54475: ST_TO_ADDR
54476: GO 54689
54478: LD_INT 28
54480: DOUBLE
54481: EQUAL
54482: IFTRUE 54492
54484: LD_INT 21
54486: DOUBLE
54487: EQUAL
54488: IFTRUE 54492
54490: GO 54517
54492: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54493: LD_ADDR_VAR 0 3
54497: PUSH
54498: LD_INT 21
54500: PPUSH
54501: LD_VAR 0 1
54505: PPUSH
54506: CALL_OW 321
54510: PUSH
54511: LD_INT 2
54513: EQUAL
54514: ST_TO_ADDR
54515: GO 54689
54517: LD_INT 16
54519: DOUBLE
54520: EQUAL
54521: IFTRUE 54525
54523: GO 54550
54525: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54526: LD_ADDR_VAR 0 3
54530: PUSH
54531: LD_INT 84
54533: PPUSH
54534: LD_VAR 0 1
54538: PPUSH
54539: CALL_OW 321
54543: PUSH
54544: LD_INT 2
54546: EQUAL
54547: ST_TO_ADDR
54548: GO 54689
54550: LD_INT 19
54552: DOUBLE
54553: EQUAL
54554: IFTRUE 54564
54556: LD_INT 23
54558: DOUBLE
54559: EQUAL
54560: IFTRUE 54564
54562: GO 54589
54564: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54565: LD_ADDR_VAR 0 3
54569: PUSH
54570: LD_INT 83
54572: PPUSH
54573: LD_VAR 0 1
54577: PPUSH
54578: CALL_OW 321
54582: PUSH
54583: LD_INT 2
54585: EQUAL
54586: ST_TO_ADDR
54587: GO 54689
54589: LD_INT 17
54591: DOUBLE
54592: EQUAL
54593: IFTRUE 54597
54595: GO 54622
54597: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54598: LD_ADDR_VAR 0 3
54602: PUSH
54603: LD_INT 39
54605: PPUSH
54606: LD_VAR 0 1
54610: PPUSH
54611: CALL_OW 321
54615: PUSH
54616: LD_INT 2
54618: EQUAL
54619: ST_TO_ADDR
54620: GO 54689
54622: LD_INT 18
54624: DOUBLE
54625: EQUAL
54626: IFTRUE 54630
54628: GO 54655
54630: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54631: LD_ADDR_VAR 0 3
54635: PUSH
54636: LD_INT 40
54638: PPUSH
54639: LD_VAR 0 1
54643: PPUSH
54644: CALL_OW 321
54648: PUSH
54649: LD_INT 2
54651: EQUAL
54652: ST_TO_ADDR
54653: GO 54689
54655: LD_INT 27
54657: DOUBLE
54658: EQUAL
54659: IFTRUE 54663
54661: GO 54688
54663: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54664: LD_ADDR_VAR 0 3
54668: PUSH
54669: LD_INT 35
54671: PPUSH
54672: LD_VAR 0 1
54676: PPUSH
54677: CALL_OW 321
54681: PUSH
54682: LD_INT 2
54684: EQUAL
54685: ST_TO_ADDR
54686: GO 54689
54688: POP
// end ;
54689: LD_VAR 0 3
54693: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54694: LD_INT 0
54696: PPUSH
54697: PPUSH
54698: PPUSH
54699: PPUSH
54700: PPUSH
54701: PPUSH
54702: PPUSH
54703: PPUSH
54704: PPUSH
54705: PPUSH
54706: PPUSH
// result := false ;
54707: LD_ADDR_VAR 0 6
54711: PUSH
54712: LD_INT 0
54714: ST_TO_ADDR
// if btype = b_depot then
54715: LD_VAR 0 2
54719: PUSH
54720: LD_INT 0
54722: EQUAL
54723: IFFALSE 54735
// begin result := true ;
54725: LD_ADDR_VAR 0 6
54729: PUSH
54730: LD_INT 1
54732: ST_TO_ADDR
// exit ;
54733: GO 55561
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54735: LD_VAR 0 1
54739: NOT
54740: PUSH
54741: LD_VAR 0 1
54745: PPUSH
54746: CALL_OW 266
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: IN
54761: NOT
54762: OR
54763: PUSH
54764: LD_VAR 0 2
54768: NOT
54769: OR
54770: PUSH
54771: LD_VAR 0 5
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: LD_INT 3
54787: PUSH
54788: LD_INT 4
54790: PUSH
54791: LD_INT 5
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: IN
54802: NOT
54803: OR
54804: PUSH
54805: LD_VAR 0 3
54809: PPUSH
54810: LD_VAR 0 4
54814: PPUSH
54815: CALL_OW 488
54819: NOT
54820: OR
54821: IFFALSE 54825
// exit ;
54823: GO 55561
// side := GetSide ( depot ) ;
54825: LD_ADDR_VAR 0 9
54829: PUSH
54830: LD_VAR 0 1
54834: PPUSH
54835: CALL_OW 255
54839: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54840: LD_VAR 0 9
54844: PPUSH
54845: LD_VAR 0 2
54849: PPUSH
54850: CALL 54318 0 2
54854: NOT
54855: IFFALSE 54859
// exit ;
54857: GO 55561
// pom := GetBase ( depot ) ;
54859: LD_ADDR_VAR 0 10
54863: PUSH
54864: LD_VAR 0 1
54868: PPUSH
54869: CALL_OW 274
54873: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54874: LD_ADDR_VAR 0 11
54878: PUSH
54879: LD_VAR 0 2
54883: PPUSH
54884: LD_VAR 0 1
54888: PPUSH
54889: CALL_OW 248
54893: PPUSH
54894: CALL_OW 450
54898: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54899: LD_VAR 0 10
54903: PPUSH
54904: LD_INT 1
54906: PPUSH
54907: CALL_OW 275
54911: PUSH
54912: LD_VAR 0 11
54916: PUSH
54917: LD_INT 1
54919: ARRAY
54920: GREATEREQUAL
54921: PUSH
54922: LD_VAR 0 10
54926: PPUSH
54927: LD_INT 2
54929: PPUSH
54930: CALL_OW 275
54934: PUSH
54935: LD_VAR 0 11
54939: PUSH
54940: LD_INT 2
54942: ARRAY
54943: GREATEREQUAL
54944: AND
54945: PUSH
54946: LD_VAR 0 10
54950: PPUSH
54951: LD_INT 3
54953: PPUSH
54954: CALL_OW 275
54958: PUSH
54959: LD_VAR 0 11
54963: PUSH
54964: LD_INT 3
54966: ARRAY
54967: GREATEREQUAL
54968: AND
54969: NOT
54970: IFFALSE 54974
// exit ;
54972: GO 55561
// if GetBType ( depot ) = b_depot then
54974: LD_VAR 0 1
54978: PPUSH
54979: CALL_OW 266
54983: PUSH
54984: LD_INT 0
54986: EQUAL
54987: IFFALSE 54999
// dist := 28 else
54989: LD_ADDR_VAR 0 14
54993: PUSH
54994: LD_INT 28
54996: ST_TO_ADDR
54997: GO 55007
// dist := 36 ;
54999: LD_ADDR_VAR 0 14
55003: PUSH
55004: LD_INT 36
55006: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55007: LD_VAR 0 1
55011: PPUSH
55012: LD_VAR 0 3
55016: PPUSH
55017: LD_VAR 0 4
55021: PPUSH
55022: CALL_OW 297
55026: PUSH
55027: LD_VAR 0 14
55031: GREATER
55032: IFFALSE 55036
// exit ;
55034: GO 55561
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55036: LD_ADDR_VAR 0 12
55040: PUSH
55041: LD_VAR 0 2
55045: PPUSH
55046: LD_VAR 0 3
55050: PPUSH
55051: LD_VAR 0 4
55055: PPUSH
55056: LD_VAR 0 5
55060: PPUSH
55061: LD_VAR 0 1
55065: PPUSH
55066: CALL_OW 248
55070: PPUSH
55071: LD_INT 0
55073: PPUSH
55074: CALL 55566 0 6
55078: ST_TO_ADDR
// if not hexes then
55079: LD_VAR 0 12
55083: NOT
55084: IFFALSE 55088
// exit ;
55086: GO 55561
// hex := GetHexInfo ( x , y ) ;
55088: LD_ADDR_VAR 0 15
55092: PUSH
55093: LD_VAR 0 3
55097: PPUSH
55098: LD_VAR 0 4
55102: PPUSH
55103: CALL_OW 546
55107: ST_TO_ADDR
// if hex [ 1 ] then
55108: LD_VAR 0 15
55112: PUSH
55113: LD_INT 1
55115: ARRAY
55116: IFFALSE 55120
// exit ;
55118: GO 55561
// height := hex [ 2 ] ;
55120: LD_ADDR_VAR 0 13
55124: PUSH
55125: LD_VAR 0 15
55129: PUSH
55130: LD_INT 2
55132: ARRAY
55133: ST_TO_ADDR
// for i = 1 to hexes do
55134: LD_ADDR_VAR 0 7
55138: PUSH
55139: DOUBLE
55140: LD_INT 1
55142: DEC
55143: ST_TO_ADDR
55144: LD_VAR 0 12
55148: PUSH
55149: FOR_TO
55150: IFFALSE 55480
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55152: LD_VAR 0 12
55156: PUSH
55157: LD_VAR 0 7
55161: ARRAY
55162: PUSH
55163: LD_INT 1
55165: ARRAY
55166: PPUSH
55167: LD_VAR 0 12
55171: PUSH
55172: LD_VAR 0 7
55176: ARRAY
55177: PUSH
55178: LD_INT 2
55180: ARRAY
55181: PPUSH
55182: CALL_OW 488
55186: NOT
55187: PUSH
55188: LD_VAR 0 12
55192: PUSH
55193: LD_VAR 0 7
55197: ARRAY
55198: PUSH
55199: LD_INT 1
55201: ARRAY
55202: PPUSH
55203: LD_VAR 0 12
55207: PUSH
55208: LD_VAR 0 7
55212: ARRAY
55213: PUSH
55214: LD_INT 2
55216: ARRAY
55217: PPUSH
55218: CALL_OW 428
55222: PUSH
55223: LD_INT 0
55225: GREATER
55226: OR
55227: PUSH
55228: LD_VAR 0 12
55232: PUSH
55233: LD_VAR 0 7
55237: ARRAY
55238: PUSH
55239: LD_INT 1
55241: ARRAY
55242: PPUSH
55243: LD_VAR 0 12
55247: PUSH
55248: LD_VAR 0 7
55252: ARRAY
55253: PUSH
55254: LD_INT 2
55256: ARRAY
55257: PPUSH
55258: CALL_OW 351
55262: OR
55263: IFFALSE 55269
// exit ;
55265: POP
55266: POP
55267: GO 55561
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55269: LD_ADDR_VAR 0 8
55273: PUSH
55274: LD_VAR 0 12
55278: PUSH
55279: LD_VAR 0 7
55283: ARRAY
55284: PUSH
55285: LD_INT 1
55287: ARRAY
55288: PPUSH
55289: LD_VAR 0 12
55293: PUSH
55294: LD_VAR 0 7
55298: ARRAY
55299: PUSH
55300: LD_INT 2
55302: ARRAY
55303: PPUSH
55304: CALL_OW 546
55308: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55309: LD_VAR 0 8
55313: PUSH
55314: LD_INT 1
55316: ARRAY
55317: PUSH
55318: LD_VAR 0 8
55322: PUSH
55323: LD_INT 2
55325: ARRAY
55326: PUSH
55327: LD_VAR 0 13
55331: PUSH
55332: LD_INT 2
55334: PLUS
55335: GREATER
55336: OR
55337: PUSH
55338: LD_VAR 0 8
55342: PUSH
55343: LD_INT 2
55345: ARRAY
55346: PUSH
55347: LD_VAR 0 13
55351: PUSH
55352: LD_INT 2
55354: MINUS
55355: LESS
55356: OR
55357: PUSH
55358: LD_VAR 0 8
55362: PUSH
55363: LD_INT 3
55365: ARRAY
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: LD_INT 8
55372: PUSH
55373: LD_INT 9
55375: PUSH
55376: LD_INT 10
55378: PUSH
55379: LD_INT 11
55381: PUSH
55382: LD_INT 12
55384: PUSH
55385: LD_INT 13
55387: PUSH
55388: LD_INT 16
55390: PUSH
55391: LD_INT 17
55393: PUSH
55394: LD_INT 18
55396: PUSH
55397: LD_INT 19
55399: PUSH
55400: LD_INT 20
55402: PUSH
55403: LD_INT 21
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: IN
55421: NOT
55422: OR
55423: PUSH
55424: LD_VAR 0 8
55428: PUSH
55429: LD_INT 5
55431: ARRAY
55432: NOT
55433: OR
55434: PUSH
55435: LD_VAR 0 8
55439: PUSH
55440: LD_INT 6
55442: ARRAY
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 2
55449: PUSH
55450: LD_INT 7
55452: PUSH
55453: LD_INT 9
55455: PUSH
55456: LD_INT 10
55458: PUSH
55459: LD_INT 11
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: IN
55470: NOT
55471: OR
55472: IFFALSE 55478
// exit ;
55474: POP
55475: POP
55476: GO 55561
// end ;
55478: GO 55149
55480: POP
55481: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55482: LD_VAR 0 9
55486: PPUSH
55487: LD_VAR 0 3
55491: PPUSH
55492: LD_VAR 0 4
55496: PPUSH
55497: LD_INT 20
55499: PPUSH
55500: CALL 47484 0 4
55504: PUSH
55505: LD_INT 4
55507: ARRAY
55508: IFFALSE 55512
// exit ;
55510: GO 55561
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55512: LD_VAR 0 2
55516: PUSH
55517: LD_INT 29
55519: PUSH
55520: LD_INT 30
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: IN
55527: PUSH
55528: LD_VAR 0 3
55532: PPUSH
55533: LD_VAR 0 4
55537: PPUSH
55538: LD_VAR 0 9
55542: PPUSH
55543: CALL_OW 440
55547: NOT
55548: AND
55549: IFFALSE 55553
// exit ;
55551: GO 55561
// result := true ;
55553: LD_ADDR_VAR 0 6
55557: PUSH
55558: LD_INT 1
55560: ST_TO_ADDR
// end ;
55561: LD_VAR 0 6
55565: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55566: LD_INT 0
55568: PPUSH
55569: PPUSH
55570: PPUSH
55571: PPUSH
55572: PPUSH
55573: PPUSH
55574: PPUSH
55575: PPUSH
55576: PPUSH
55577: PPUSH
55578: PPUSH
55579: PPUSH
55580: PPUSH
55581: PPUSH
55582: PPUSH
55583: PPUSH
55584: PPUSH
55585: PPUSH
55586: PPUSH
55587: PPUSH
55588: PPUSH
55589: PPUSH
55590: PPUSH
55591: PPUSH
55592: PPUSH
55593: PPUSH
55594: PPUSH
55595: PPUSH
55596: PPUSH
55597: PPUSH
55598: PPUSH
55599: PPUSH
55600: PPUSH
55601: PPUSH
55602: PPUSH
55603: PPUSH
55604: PPUSH
55605: PPUSH
55606: PPUSH
55607: PPUSH
55608: PPUSH
55609: PPUSH
55610: PPUSH
55611: PPUSH
55612: PPUSH
55613: PPUSH
55614: PPUSH
55615: PPUSH
55616: PPUSH
55617: PPUSH
55618: PPUSH
55619: PPUSH
55620: PPUSH
55621: PPUSH
55622: PPUSH
55623: PPUSH
55624: PPUSH
55625: PPUSH
// result = [ ] ;
55626: LD_ADDR_VAR 0 7
55630: PUSH
55631: EMPTY
55632: ST_TO_ADDR
// temp_list = [ ] ;
55633: LD_ADDR_VAR 0 9
55637: PUSH
55638: EMPTY
55639: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55640: LD_VAR 0 4
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: LD_INT 3
55656: PUSH
55657: LD_INT 4
55659: PUSH
55660: LD_INT 5
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: IN
55671: NOT
55672: PUSH
55673: LD_VAR 0 1
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: IN
55688: PUSH
55689: LD_VAR 0 5
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: LD_INT 2
55699: PUSH
55700: LD_INT 3
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: LIST
55707: IN
55708: NOT
55709: AND
55710: OR
55711: IFFALSE 55715
// exit ;
55713: GO 74106
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55715: LD_VAR 0 1
55719: PUSH
55720: LD_INT 6
55722: PUSH
55723: LD_INT 7
55725: PUSH
55726: LD_INT 8
55728: PUSH
55729: LD_INT 13
55731: PUSH
55732: LD_INT 12
55734: PUSH
55735: LD_INT 15
55737: PUSH
55738: LD_INT 11
55740: PUSH
55741: LD_INT 14
55743: PUSH
55744: LD_INT 10
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: IN
55758: IFFALSE 55768
// btype = b_lab ;
55760: LD_ADDR_VAR 0 1
55764: PUSH
55765: LD_INT 6
55767: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55768: LD_VAR 0 6
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: LIST
55786: IN
55787: NOT
55788: PUSH
55789: LD_VAR 0 1
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: LD_INT 2
55802: PUSH
55803: LD_INT 3
55805: PUSH
55806: LD_INT 6
55808: PUSH
55809: LD_INT 36
55811: PUSH
55812: LD_INT 4
55814: PUSH
55815: LD_INT 5
55817: PUSH
55818: LD_INT 31
55820: PUSH
55821: LD_INT 32
55823: PUSH
55824: LD_INT 33
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: IN
55840: NOT
55841: PUSH
55842: LD_VAR 0 6
55846: PUSH
55847: LD_INT 1
55849: EQUAL
55850: AND
55851: OR
55852: PUSH
55853: LD_VAR 0 1
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: LD_INT 3
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: IN
55868: NOT
55869: PUSH
55870: LD_VAR 0 6
55874: PUSH
55875: LD_INT 2
55877: EQUAL
55878: AND
55879: OR
55880: IFFALSE 55890
// mode = 0 ;
55882: LD_ADDR_VAR 0 6
55886: PUSH
55887: LD_INT 0
55889: ST_TO_ADDR
// case mode of 0 :
55890: LD_VAR 0 6
55894: PUSH
55895: LD_INT 0
55897: DOUBLE
55898: EQUAL
55899: IFTRUE 55903
55901: GO 67356
55903: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55904: LD_ADDR_VAR 0 11
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 2
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: LD_INT 2
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: LD_INT 2
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: LD_INT 3
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 3
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: LD_INT 2
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56097: LD_ADDR_VAR 0 12
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 2
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 2
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: NEG
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 2
56231: NEG
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 3
56254: NEG
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 3
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56293: LD_ADDR_VAR 0 13
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 2
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 2
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 2
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 2
56428: NEG
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: LD_INT 3
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 3
56452: NEG
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 3
56464: NEG
56465: PUSH
56466: LD_INT 3
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56492: LD_ADDR_VAR 0 14
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: LD_INT 2
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: LD_INT 2
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: LD_INT 3
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: LD_INT 3
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: LD_INT 2
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56688: LD_ADDR_VAR 0 15
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 2
56811: NEG
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 2
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 3
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 3
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56881: LD_ADDR_VAR 0 16
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 1
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 2
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: LD_INT 2
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 2
57004: NEG
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: LD_INT 2
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 3
57028: PUSH
57029: LD_INT 2
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 3
57038: PUSH
57039: LD_INT 3
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 2
57048: PUSH
57049: LD_INT 3
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57074: LD_ADDR_VAR 0 17
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: LD_INT 2
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: PUSH
57210: LD_INT 2
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 2
57250: NEG
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57304: LD_ADDR_VAR 0 18
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: LD_INT 2
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: LD_INT 2
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: LD_INT 2
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: LD_INT 2
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: LD_INT 2
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 2
57480: NEG
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57534: LD_ADDR_VAR 0 19
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: NEG
57616: PUSH
57617: LD_INT 2
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: LD_INT 2
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 2
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 2
57669: PUSH
57670: LD_INT 2
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: NEG
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 2
57710: NEG
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: NEG
57734: PUSH
57735: LD_INT 2
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57764: LD_ADDR_VAR 0 20
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: LD_INT 1
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: LD_INT 2
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: LD_INT 2
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 2
57879: PUSH
57880: LD_INT 0
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 2
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 2
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: LD_INT 2
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: LD_INT 2
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57994: LD_ADDR_VAR 0 21
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: LD_INT 2
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 2
58129: PUSH
58130: LD_INT 2
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: LD_INT 2
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: LD_INT 2
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58224: LD_ADDR_VAR 0 22
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: LD_INT 2
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 2
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 2
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 2
58359: PUSH
58360: LD_INT 2
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: LD_INT 2
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: LD_INT 2
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: LD_INT 2
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58454: LD_ADDR_VAR 0 23
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: LD_INT 1
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: NEG
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 1
58523: NEG
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: NEG
58536: PUSH
58537: LD_INT 2
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 2
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 2
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 2
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: LD_INT 2
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: LD_INT 2
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 2
58630: NEG
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 2
58641: NEG
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: LD_INT 2
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: NEG
58666: PUSH
58667: LD_INT 3
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: LD_INT 3
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58734: LD_ADDR_VAR 0 24
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: LD_INT 1
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 1
58803: NEG
58804: PUSH
58805: LD_INT 1
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 1
58815: NEG
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 1
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: PUSH
58870: LD_INT 2
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: LD_INT 2
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 2
58910: NEG
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 2
58933: NEG
58934: PUSH
58935: LD_INT 2
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: LD_INT 2
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 2
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 3
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 3
58977: PUSH
58978: LD_INT 2
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59010: LD_ADDR_VAR 0 25
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: LD_INT 1
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: LD_INT 1
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: LD_INT 1
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 1
59068: NEG
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: LD_INT 2
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 2
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 2
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 2
59145: PUSH
59146: LD_INT 2
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: LD_INT 2
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: LD_INT 2
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 2
59186: NEG
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 2
59197: NEG
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 2
59209: NEG
59210: PUSH
59211: LD_INT 2
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 3
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 3
59231: PUSH
59232: LD_INT 2
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 2
59241: PUSH
59242: LD_INT 3
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 3
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59284: LD_ADDR_VAR 0 26
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: NEG
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: NEG
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: LD_INT 2
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: LD_INT 2
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 2
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 2
59460: NEG
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 2
59471: NEG
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: NEG
59484: PUSH
59485: LD_INT 2
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 2
59495: PUSH
59496: LD_INT 3
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: LD_INT 3
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: LD_INT 2
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 2
59526: NEG
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59560: LD_ADDR_VAR 0 27
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: LD_INT 1
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: LD_INT 2
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: LD_INT 2
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 2
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 2
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 2
59759: NEG
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: LD_INT 2
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 2
59782: NEG
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 3
59793: NEG
59794: PUSH
59795: LD_INT 1
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 3
59805: NEG
59806: PUSH
59807: LD_INT 2
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59840: LD_ADDR_VAR 0 28
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: LD_INT 1
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 1
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 1
59909: NEG
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: NEG
59922: PUSH
59923: LD_INT 2
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: LD_INT 2
59936: NEG
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 1
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 2
59955: PUSH
59956: LD_INT 0
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 2
59965: PUSH
59966: LD_INT 1
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 2
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: NEG
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 2
60027: NEG
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 2
60039: NEG
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: LD_INT 3
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: LD_INT 3
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 3
60075: NEG
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 3
60087: NEG
60088: PUSH
60089: LD_INT 2
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60122: LD_ADDR_VAR 0 29
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 1
60160: PUSH
60161: LD_INT 1
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: LD_INT 1
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: LD_INT 2
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: LD_INT 2
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 1
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: LD_INT 2
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: LD_INT 1
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 2
60288: NEG
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 2
60300: NEG
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 2
60312: NEG
60313: PUSH
60314: LD_INT 3
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 2
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 3
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 1
60345: PUSH
60346: LD_INT 3
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: LD_INT 2
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 3
60366: NEG
60367: PUSH
60368: LD_INT 2
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60401: LD_ADDR_VAR 0 30
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 0
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: NEG
60460: PUSH
60461: LD_INT 0
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: LD_INT 2
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 0
60494: PUSH
60495: LD_INT 2
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 2
60526: PUSH
60527: LD_INT 1
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 2
60536: PUSH
60537: LD_INT 2
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: LD_INT 2
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 2
60567: NEG
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 2
60578: NEG
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 1
60590: NEG
60591: PUSH
60592: LD_INT 3
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: LD_INT 2
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 3
60613: PUSH
60614: LD_INT 2
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: LD_INT 3
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: NEG
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 3
60644: NEG
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60679: LD_ADDR_VAR 0 31
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: LD_INT 1
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: NEG
60749: PUSH
60750: LD_INT 1
60752: NEG
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 1
60760: NEG
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 2
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 2
60793: PUSH
60794: LD_INT 1
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: LD_INT 2
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: LD_INT 2
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: LD_INT 2
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 2
60844: NEG
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: LD_INT 2
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: LD_INT 3
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 2
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 3
60891: PUSH
60892: LD_INT 1
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: LD_INT 3
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: LD_INT 2
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 3
60922: NEG
60923: PUSH
60924: LD_INT 2
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60957: LD_ADDR_VAR 0 32
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: LD_INT 1
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 1
61015: NEG
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: LD_INT 2
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: LD_INT 2
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 2
61072: PUSH
61073: LD_INT 1
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: LD_INT 2
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: LD_INT 2
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: NEG
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 2
61134: NEG
61135: PUSH
61136: LD_INT 1
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: LD_INT 3
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 3
61169: PUSH
61170: LD_INT 2
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 2
61179: PUSH
61180: LD_INT 3
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 2
61189: NEG
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 3
61200: NEG
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61235: LD_ADDR_VAR 0 33
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: LD_INT 1
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 1
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 1
61273: PUSH
61274: LD_INT 1
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: LD_INT 1
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 1
61293: NEG
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 1
61304: NEG
61305: PUSH
61306: LD_INT 1
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 1
61316: NEG
61317: PUSH
61318: LD_INT 2
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: LD_INT 1
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 2
61349: PUSH
61350: LD_INT 1
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 1
61359: PUSH
61360: LD_INT 2
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 0
61369: PUSH
61370: LD_INT 2
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 1
61379: NEG
61380: PUSH
61381: LD_INT 1
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 2
61390: NEG
61391: PUSH
61392: LD_INT 0
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 2
61401: NEG
61402: PUSH
61403: LD_INT 1
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 2
61413: NEG
61414: PUSH
61415: LD_INT 2
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: LD_INT 3
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 2
61437: PUSH
61438: LD_INT 1
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 3
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: LD_INT 3
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: LD_INT 2
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 3
61479: NEG
61480: PUSH
61481: LD_INT 2
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61514: LD_ADDR_VAR 0 34
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: LD_INT 1
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: LD_INT 1
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 1
61572: NEG
61573: PUSH
61574: LD_INT 0
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 1
61583: NEG
61584: PUSH
61585: LD_INT 1
61587: NEG
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: NEG
61596: PUSH
61597: LD_INT 2
61599: NEG
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: LD_INT 2
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: LD_INT 1
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 2
61639: PUSH
61640: LD_INT 2
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: LD_INT 2
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: NEG
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 2
61670: NEG
61671: PUSH
61672: LD_INT 0
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 2
61681: NEG
61682: PUSH
61683: LD_INT 1
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 2
61693: NEG
61694: PUSH
61695: LD_INT 2
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: PUSH
61707: LD_INT 3
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: LD_INT 2
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 3
61728: PUSH
61729: LD_INT 2
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 2
61738: PUSH
61739: LD_INT 3
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 2
61748: NEG
61749: PUSH
61750: LD_INT 1
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 3
61759: NEG
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61794: LD_ADDR_VAR 0 35
61798: PUSH
61799: LD_INT 0
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: LD_INT 1
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 1
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: PUSH
61833: LD_INT 1
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: NEG
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 1
61863: NEG
61864: PUSH
61865: LD_INT 1
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 2
61875: PUSH
61876: LD_INT 1
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 2
61885: NEG
61886: PUSH
61887: LD_INT 1
61889: NEG
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61906: LD_ADDR_VAR 0 36
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 1
61934: PUSH
61935: LD_INT 0
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 1
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 1
61964: NEG
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: NEG
61976: PUSH
61977: LD_INT 1
61979: NEG
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: LD_INT 2
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: LD_INT 2
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62018: LD_ADDR_VAR 0 37
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: LD_INT 0
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: LD_INT 1
62038: NEG
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 1
62046: PUSH
62047: LD_INT 0
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: LD_INT 1
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 1
62076: NEG
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: PUSH
62089: LD_INT 1
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 1
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: NEG
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62130: LD_ADDR_VAR 0 38
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: LD_INT 1
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 1
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 1
62168: PUSH
62169: LD_INT 1
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: LD_INT 1
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: LD_INT 0
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: LD_INT 1
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 2
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 2
62221: NEG
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62242: LD_ADDR_VAR 0 39
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: LD_INT 1
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 1
62311: NEG
62312: PUSH
62313: LD_INT 1
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 1
62323: NEG
62324: PUSH
62325: LD_INT 2
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62354: LD_ADDR_VAR 0 40
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: LD_INT 1
62374: NEG
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 1
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 1
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: LD_INT 1
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: NEG
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 1
62423: NEG
62424: PUSH
62425: LD_INT 1
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 1
62435: PUSH
62436: LD_INT 1
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 1
62446: NEG
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62466: LD_ADDR_VAR 0 41
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: LD_INT 1
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 1
62494: PUSH
62495: LD_INT 0
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: NEG
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 1
62535: NEG
62536: PUSH
62537: LD_INT 1
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 1
62547: NEG
62548: PUSH
62549: LD_INT 2
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 1
62559: PUSH
62560: LD_INT 1
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 2
62570: PUSH
62571: LD_INT 0
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 2
62580: PUSH
62581: LD_INT 1
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: LD_INT 2
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 1
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: NEG
62611: PUSH
62612: LD_INT 1
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 2
62621: NEG
62622: PUSH
62623: LD_INT 0
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 2
62632: NEG
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 2
62644: NEG
62645: PUSH
62646: LD_INT 2
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: NEG
62657: PUSH
62658: LD_INT 3
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 2
62668: PUSH
62669: LD_INT 1
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 3
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 3
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 3
62699: PUSH
62700: LD_INT 2
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 3
62709: PUSH
62710: LD_INT 3
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 2
62719: PUSH
62720: LD_INT 3
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 2
62729: NEG
62730: PUSH
62731: LD_INT 1
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 3
62740: NEG
62741: PUSH
62742: LD_INT 0
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 3
62751: NEG
62752: PUSH
62753: LD_INT 1
62755: NEG
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 3
62763: NEG
62764: PUSH
62765: LD_INT 2
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 3
62775: NEG
62776: PUSH
62777: LD_INT 3
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62816: LD_ADDR_VAR 0 42
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: LD_INT 0
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: LD_INT 1
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: LD_INT 1
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 1
62874: NEG
62875: PUSH
62876: LD_INT 0
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: LD_INT 1
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: LD_INT 2
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: LD_INT 2
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 2
62931: PUSH
62932: LD_INT 1
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 2
62941: PUSH
62942: LD_INT 2
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 1
62951: PUSH
62952: LD_INT 2
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 0
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: NEG
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 2
62982: NEG
62983: PUSH
62984: LD_INT 1
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 2
62994: NEG
62995: PUSH
62996: LD_INT 2
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 2
63006: NEG
63007: PUSH
63008: LD_INT 3
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: LD_INT 3
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: LD_INT 3
63033: NEG
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 1
63041: PUSH
63042: LD_INT 2
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 3
63052: PUSH
63053: LD_INT 2
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 3
63062: PUSH
63063: LD_INT 3
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 2
63072: PUSH
63073: LD_INT 3
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: LD_INT 3
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: LD_INT 3
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: NEG
63103: PUSH
63104: LD_INT 2
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 3
63113: NEG
63114: PUSH
63115: LD_INT 2
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 3
63125: NEG
63126: PUSH
63127: LD_INT 3
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63166: LD_ADDR_VAR 0 43
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: LD_INT 1
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 1
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: LD_INT 1
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 1
63224: NEG
63225: PUSH
63226: LD_INT 0
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 1
63235: NEG
63236: PUSH
63237: LD_INT 1
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: LD_INT 2
63251: NEG
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: LD_INT 2
63262: NEG
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: LD_INT 1
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 2
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 2
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 1
63301: PUSH
63302: LD_INT 2
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 0
63311: PUSH
63312: LD_INT 2
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: NEG
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 2
63332: NEG
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 2
63343: NEG
63344: PUSH
63345: LD_INT 1
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 1
63355: NEG
63356: PUSH
63357: LD_INT 3
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 0
63367: PUSH
63368: LD_INT 3
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: LD_INT 2
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 3
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 3
63410: PUSH
63411: LD_INT 1
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: LD_INT 3
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: LD_INT 3
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: LD_INT 2
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 2
63451: NEG
63452: PUSH
63453: LD_INT 1
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 3
63462: NEG
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 3
63473: NEG
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63514: LD_ADDR_VAR 0 44
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: LD_INT 1
63534: NEG
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 1
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 1
63552: PUSH
63553: LD_INT 1
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 0
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 1
63572: NEG
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 1
63583: NEG
63584: PUSH
63585: LD_INT 1
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 1
63595: NEG
63596: PUSH
63597: LD_INT 2
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: LD_INT 1
63610: NEG
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 2
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: LD_INT 1
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 2
63638: PUSH
63639: LD_INT 2
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 1
63648: PUSH
63649: LD_INT 2
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 1
63658: NEG
63659: PUSH
63660: LD_INT 1
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 2
63669: NEG
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 2
63680: NEG
63681: PUSH
63682: LD_INT 1
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 2
63692: NEG
63693: PUSH
63694: LD_INT 2
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 2
63704: NEG
63705: PUSH
63706: LD_INT 3
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 2
63716: PUSH
63717: LD_INT 1
63719: NEG
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 3
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 3
63737: PUSH
63738: LD_INT 1
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 3
63747: PUSH
63748: LD_INT 2
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 3
63757: PUSH
63758: LD_INT 3
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 2
63767: PUSH
63768: LD_INT 3
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 2
63777: NEG
63778: PUSH
63779: LD_INT 1
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 3
63788: NEG
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 3
63799: NEG
63800: PUSH
63801: LD_INT 1
63803: NEG
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 3
63811: NEG
63812: PUSH
63813: LD_INT 2
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 3
63823: NEG
63824: PUSH
63825: LD_INT 3
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63864: LD_ADDR_VAR 0 45
63868: PUSH
63869: LD_INT 0
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: LD_INT 1
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 1
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 1
63902: PUSH
63903: LD_INT 1
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: LD_INT 1
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 1
63922: NEG
63923: PUSH
63924: LD_INT 0
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 1
63933: NEG
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 1
63945: NEG
63946: PUSH
63947: LD_INT 2
63949: NEG
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 0
63957: PUSH
63958: LD_INT 2
63960: NEG
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: PUSH
63969: LD_INT 1
63971: NEG
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 2
63979: PUSH
63980: LD_INT 1
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 2
63989: PUSH
63990: LD_INT 2
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 1
63999: PUSH
64000: LD_INT 2
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: LD_INT 2
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: LD_INT 1
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 2
64030: NEG
64031: PUSH
64032: LD_INT 1
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 2
64042: NEG
64043: PUSH
64044: LD_INT 2
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 2
64054: NEG
64055: PUSH
64056: LD_INT 3
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 1
64066: NEG
64067: PUSH
64068: LD_INT 3
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 0
64078: PUSH
64079: LD_INT 3
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 1
64089: PUSH
64090: LD_INT 2
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 3
64100: PUSH
64101: LD_INT 2
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 3
64110: PUSH
64111: LD_INT 3
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 2
64120: PUSH
64121: LD_INT 3
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 1
64130: PUSH
64131: LD_INT 3
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 0
64140: PUSH
64141: LD_INT 3
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 1
64150: NEG
64151: PUSH
64152: LD_INT 2
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 3
64161: NEG
64162: PUSH
64163: LD_INT 2
64165: NEG
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 3
64173: NEG
64174: PUSH
64175: LD_INT 3
64177: NEG
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64214: LD_ADDR_VAR 0 46
64218: PUSH
64219: LD_INT 0
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: LD_INT 1
64234: NEG
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 1
64242: PUSH
64243: LD_INT 0
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 1
64252: PUSH
64253: LD_INT 1
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 0
64262: PUSH
64263: LD_INT 1
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 1
64283: NEG
64284: PUSH
64285: LD_INT 1
64287: NEG
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 1
64295: NEG
64296: PUSH
64297: LD_INT 2
64299: NEG
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 0
64307: PUSH
64308: LD_INT 2
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 1
64318: PUSH
64319: LD_INT 1
64321: NEG
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 2
64329: PUSH
64330: LD_INT 0
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 2
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 1
64349: PUSH
64350: LD_INT 2
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: LD_INT 2
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 1
64369: NEG
64370: PUSH
64371: LD_INT 1
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 2
64380: NEG
64381: PUSH
64382: LD_INT 0
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 2
64391: NEG
64392: PUSH
64393: LD_INT 1
64395: NEG
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 1
64403: NEG
64404: PUSH
64405: LD_INT 3
64407: NEG
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: LD_INT 3
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: PUSH
64427: LD_INT 2
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 2
64437: PUSH
64438: LD_INT 1
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 3
64448: PUSH
64449: LD_INT 0
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 3
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: LD_INT 3
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 0
64478: PUSH
64479: LD_INT 3
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 1
64488: NEG
64489: PUSH
64490: LD_INT 2
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 2
64499: NEG
64500: PUSH
64501: LD_INT 1
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 3
64510: NEG
64511: PUSH
64512: LD_INT 0
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 3
64521: NEG
64522: PUSH
64523: LD_INT 1
64525: NEG
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64562: LD_ADDR_VAR 0 47
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: LD_INT 1
64582: NEG
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 1
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: LD_INT 1
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: LD_INT 1
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: NEG
64621: PUSH
64622: LD_INT 0
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: NEG
64632: PUSH
64633: LD_INT 1
64635: NEG
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 1
64643: NEG
64644: PUSH
64645: LD_INT 2
64647: NEG
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 0
64655: PUSH
64656: LD_INT 2
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 1
64666: PUSH
64667: LD_INT 1
64669: NEG
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 2
64677: NEG
64678: PUSH
64679: LD_INT 1
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 2
64689: NEG
64690: PUSH
64691: LD_INT 2
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64713: LD_ADDR_VAR 0 48
64717: PUSH
64718: LD_INT 0
64720: PUSH
64721: LD_INT 0
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 0
64730: PUSH
64731: LD_INT 1
64733: NEG
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 1
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: PUSH
64752: LD_INT 1
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: LD_INT 1
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 1
64771: NEG
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 1
64782: NEG
64783: PUSH
64784: LD_INT 1
64786: NEG
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 1
64794: NEG
64795: PUSH
64796: LD_INT 2
64798: NEG
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: LD_INT 2
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 1
64817: PUSH
64818: LD_INT 1
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 2
64828: PUSH
64829: LD_INT 0
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 2
64838: PUSH
64839: LD_INT 1
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64860: LD_ADDR_VAR 0 49
64864: PUSH
64865: LD_INT 0
64867: PUSH
64868: LD_INT 0
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 0
64877: PUSH
64878: LD_INT 1
64880: NEG
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 0
64908: PUSH
64909: LD_INT 1
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 1
64918: NEG
64919: PUSH
64920: LD_INT 0
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: LD_INT 1
64933: NEG
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 1
64941: PUSH
64942: LD_INT 1
64944: NEG
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 2
64952: PUSH
64953: LD_INT 0
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 2
64962: PUSH
64963: LD_INT 1
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 2
64972: PUSH
64973: LD_INT 2
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 1
64982: PUSH
64983: LD_INT 2
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65004: LD_ADDR_VAR 0 50
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: LD_INT 1
65024: NEG
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 1
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: LD_INT 1
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: NEG
65063: PUSH
65064: LD_INT 0
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 1
65073: NEG
65074: PUSH
65075: LD_INT 1
65077: NEG
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 2
65085: PUSH
65086: LD_INT 1
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 2
65095: PUSH
65096: LD_INT 2
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 1
65105: PUSH
65106: LD_INT 2
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 0
65115: PUSH
65116: LD_INT 2
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 1
65125: NEG
65126: PUSH
65127: LD_INT 1
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65148: LD_ADDR_VAR 0 51
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 1
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: LD_INT 1
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: LD_INT 0
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 1
65217: NEG
65218: PUSH
65219: LD_INT 1
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 1
65229: PUSH
65230: LD_INT 2
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 0
65239: PUSH
65240: LD_INT 2
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: NEG
65250: PUSH
65251: LD_INT 1
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 2
65260: NEG
65261: PUSH
65262: LD_INT 0
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 2
65271: NEG
65272: PUSH
65273: LD_INT 1
65275: NEG
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65295: LD_ADDR_VAR 0 52
65299: PUSH
65300: LD_INT 0
65302: PUSH
65303: LD_INT 0
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: LD_INT 1
65315: NEG
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 1
65323: PUSH
65324: LD_INT 0
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 1
65333: PUSH
65334: LD_INT 1
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: LD_INT 1
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 1
65353: NEG
65354: PUSH
65355: LD_INT 0
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 1
65364: NEG
65365: PUSH
65366: LD_INT 1
65368: NEG
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 1
65376: NEG
65377: PUSH
65378: LD_INT 2
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 1
65388: NEG
65389: PUSH
65390: LD_INT 1
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 2
65399: NEG
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 2
65410: NEG
65411: PUSH
65412: LD_INT 1
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 2
65422: NEG
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65446: LD_ADDR_VAR 0 53
65450: PUSH
65451: LD_INT 0
65453: PUSH
65454: LD_INT 0
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 0
65463: PUSH
65464: LD_INT 1
65466: NEG
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 1
65474: PUSH
65475: LD_INT 0
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 1
65484: PUSH
65485: LD_INT 1
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 0
65494: PUSH
65495: LD_INT 1
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 1
65504: NEG
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 1
65515: NEG
65516: PUSH
65517: LD_INT 1
65519: NEG
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 1
65527: NEG
65528: PUSH
65529: LD_INT 2
65531: NEG
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 0
65539: PUSH
65540: LD_INT 2
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 1
65550: PUSH
65551: LD_INT 1
65553: NEG
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 2
65561: PUSH
65562: LD_INT 0
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 2
65571: PUSH
65572: LD_INT 1
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 2
65581: PUSH
65582: LD_INT 2
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 1
65591: PUSH
65592: LD_INT 2
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 0
65601: PUSH
65602: LD_INT 2
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 1
65611: NEG
65612: PUSH
65613: LD_INT 1
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 2
65622: NEG
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 2
65633: NEG
65634: PUSH
65635: LD_INT 1
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 2
65645: NEG
65646: PUSH
65647: LD_INT 2
65649: NEG
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65676: LD_ADDR_VAR 0 54
65680: PUSH
65681: LD_INT 0
65683: PUSH
65684: LD_INT 0
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 0
65693: PUSH
65694: LD_INT 1
65696: NEG
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 1
65704: PUSH
65705: LD_INT 0
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 1
65714: PUSH
65715: LD_INT 1
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 0
65724: PUSH
65725: LD_INT 1
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 1
65734: NEG
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: NEG
65746: PUSH
65747: LD_INT 1
65749: NEG
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 1
65757: NEG
65758: PUSH
65759: LD_INT 2
65761: NEG
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 0
65769: PUSH
65770: LD_INT 2
65772: NEG
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 1
65780: PUSH
65781: LD_INT 1
65783: NEG
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 2
65791: PUSH
65792: LD_INT 0
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 2
65801: PUSH
65802: LD_INT 1
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 2
65811: PUSH
65812: LD_INT 2
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 1
65821: PUSH
65822: LD_INT 2
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 0
65831: PUSH
65832: LD_INT 2
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: LD_INT 1
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 2
65852: NEG
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 2
65863: NEG
65864: PUSH
65865: LD_INT 1
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 2
65875: NEG
65876: PUSH
65877: LD_INT 2
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65906: LD_ADDR_VAR 0 55
65910: PUSH
65911: LD_INT 0
65913: PUSH
65914: LD_INT 0
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 0
65923: PUSH
65924: LD_INT 1
65926: NEG
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 1
65934: PUSH
65935: LD_INT 0
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 1
65944: PUSH
65945: LD_INT 1
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 0
65954: PUSH
65955: LD_INT 1
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 1
65964: NEG
65965: PUSH
65966: LD_INT 0
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 1
65975: NEG
65976: PUSH
65977: LD_INT 1
65979: NEG
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 1
65987: NEG
65988: PUSH
65989: LD_INT 2
65991: NEG
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 0
65999: PUSH
66000: LD_INT 2
66002: NEG
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 1
66010: PUSH
66011: LD_INT 1
66013: NEG
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 2
66021: PUSH
66022: LD_INT 0
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 2
66031: PUSH
66032: LD_INT 1
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 2
66041: PUSH
66042: LD_INT 2
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 1
66051: PUSH
66052: LD_INT 2
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 0
66061: PUSH
66062: LD_INT 2
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 1
66071: NEG
66072: PUSH
66073: LD_INT 1
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 2
66082: NEG
66083: PUSH
66084: LD_INT 0
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 2
66093: NEG
66094: PUSH
66095: LD_INT 1
66097: NEG
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 2
66105: NEG
66106: PUSH
66107: LD_INT 2
66109: NEG
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66136: LD_ADDR_VAR 0 56
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: LD_INT 0
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: LD_INT 1
66156: NEG
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 1
66164: PUSH
66165: LD_INT 0
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 1
66174: PUSH
66175: LD_INT 1
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 0
66184: PUSH
66185: LD_INT 1
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 1
66194: NEG
66195: PUSH
66196: LD_INT 0
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 1
66205: NEG
66206: PUSH
66207: LD_INT 1
66209: NEG
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 1
66217: NEG
66218: PUSH
66219: LD_INT 2
66221: NEG
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: LD_INT 2
66232: NEG
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 1
66240: PUSH
66241: LD_INT 1
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 2
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 2
66261: PUSH
66262: LD_INT 1
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 2
66271: PUSH
66272: LD_INT 2
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 1
66281: PUSH
66282: LD_INT 2
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: LD_INT 2
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 1
66301: NEG
66302: PUSH
66303: LD_INT 1
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 2
66312: NEG
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 2
66323: NEG
66324: PUSH
66325: LD_INT 1
66327: NEG
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 2
66335: NEG
66336: PUSH
66337: LD_INT 2
66339: NEG
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66366: LD_ADDR_VAR 0 57
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: LD_INT 0
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 0
66383: PUSH
66384: LD_INT 1
66386: NEG
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 1
66394: PUSH
66395: LD_INT 0
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 1
66404: PUSH
66405: LD_INT 1
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 0
66414: PUSH
66415: LD_INT 1
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 1
66424: NEG
66425: PUSH
66426: LD_INT 0
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 1
66435: NEG
66436: PUSH
66437: LD_INT 1
66439: NEG
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 1
66447: NEG
66448: PUSH
66449: LD_INT 2
66451: NEG
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: LD_INT 2
66462: NEG
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 1
66470: PUSH
66471: LD_INT 1
66473: NEG
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 2
66481: PUSH
66482: LD_INT 0
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 2
66491: PUSH
66492: LD_INT 1
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 2
66501: PUSH
66502: LD_INT 2
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 1
66511: PUSH
66512: LD_INT 2
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: LD_INT 2
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 1
66531: NEG
66532: PUSH
66533: LD_INT 1
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 2
66542: NEG
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 2
66553: NEG
66554: PUSH
66555: LD_INT 1
66557: NEG
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 2
66565: NEG
66566: PUSH
66567: LD_INT 2
66569: NEG
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66596: LD_ADDR_VAR 0 58
66600: PUSH
66601: LD_INT 0
66603: PUSH
66604: LD_INT 0
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 0
66613: PUSH
66614: LD_INT 1
66616: NEG
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 1
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 1
66634: PUSH
66635: LD_INT 1
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 0
66644: PUSH
66645: LD_INT 1
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 1
66654: NEG
66655: PUSH
66656: LD_INT 0
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 1
66665: NEG
66666: PUSH
66667: LD_INT 1
66669: NEG
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 1
66677: NEG
66678: PUSH
66679: LD_INT 2
66681: NEG
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: LD_INT 2
66692: NEG
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 1
66700: PUSH
66701: LD_INT 1
66703: NEG
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 2
66711: PUSH
66712: LD_INT 0
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 2
66721: PUSH
66722: LD_INT 1
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 2
66731: PUSH
66732: LD_INT 2
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 1
66741: PUSH
66742: LD_INT 2
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: LD_INT 2
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 1
66761: NEG
66762: PUSH
66763: LD_INT 1
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 2
66772: NEG
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 2
66783: NEG
66784: PUSH
66785: LD_INT 1
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 2
66795: NEG
66796: PUSH
66797: LD_INT 2
66799: NEG
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66826: LD_ADDR_VAR 0 59
66830: PUSH
66831: LD_INT 0
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 0
66843: PUSH
66844: LD_INT 1
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 1
66854: PUSH
66855: LD_INT 0
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 1
66864: PUSH
66865: LD_INT 1
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 0
66874: PUSH
66875: LD_INT 1
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 1
66884: NEG
66885: PUSH
66886: LD_INT 0
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 1
66895: NEG
66896: PUSH
66897: LD_INT 1
66899: NEG
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66914: LD_ADDR_VAR 0 60
66918: PUSH
66919: LD_INT 0
66921: PUSH
66922: LD_INT 0
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 0
66931: PUSH
66932: LD_INT 1
66934: NEG
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 1
66942: PUSH
66943: LD_INT 0
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 1
66952: PUSH
66953: LD_INT 1
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 0
66962: PUSH
66963: LD_INT 1
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 1
66972: NEG
66973: PUSH
66974: LD_INT 0
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 1
66983: NEG
66984: PUSH
66985: LD_INT 1
66987: NEG
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67002: LD_ADDR_VAR 0 61
67006: PUSH
67007: LD_INT 0
67009: PUSH
67010: LD_INT 0
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 0
67019: PUSH
67020: LD_INT 1
67022: NEG
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 1
67030: PUSH
67031: LD_INT 0
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 1
67040: PUSH
67041: LD_INT 1
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 0
67050: PUSH
67051: LD_INT 1
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 1
67060: NEG
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 1
67071: NEG
67072: PUSH
67073: LD_INT 1
67075: NEG
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67090: LD_ADDR_VAR 0 62
67094: PUSH
67095: LD_INT 0
67097: PUSH
67098: LD_INT 0
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 0
67107: PUSH
67108: LD_INT 1
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 1
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 1
67128: PUSH
67129: LD_INT 1
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 0
67138: PUSH
67139: LD_INT 1
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 1
67148: NEG
67149: PUSH
67150: LD_INT 0
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 1
67159: NEG
67160: PUSH
67161: LD_INT 1
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67178: LD_ADDR_VAR 0 63
67182: PUSH
67183: LD_INT 0
67185: PUSH
67186: LD_INT 0
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 0
67195: PUSH
67196: LD_INT 1
67198: NEG
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 1
67206: PUSH
67207: LD_INT 0
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 1
67216: PUSH
67217: LD_INT 1
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: LD_INT 1
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 1
67236: NEG
67237: PUSH
67238: LD_INT 0
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 1
67247: NEG
67248: PUSH
67249: LD_INT 1
67251: NEG
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67266: LD_ADDR_VAR 0 64
67270: PUSH
67271: LD_INT 0
67273: PUSH
67274: LD_INT 0
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 0
67283: PUSH
67284: LD_INT 1
67286: NEG
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 1
67294: PUSH
67295: LD_INT 0
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 1
67304: PUSH
67305: LD_INT 1
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 0
67314: PUSH
67315: LD_INT 1
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 1
67324: NEG
67325: PUSH
67326: LD_INT 0
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 1
67335: NEG
67336: PUSH
67337: LD_INT 1
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: ST_TO_ADDR
// end ; 1 :
67354: GO 73251
67356: LD_INT 1
67358: DOUBLE
67359: EQUAL
67360: IFTRUE 67364
67362: GO 69987
67364: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67365: LD_ADDR_VAR 0 11
67369: PUSH
67370: LD_INT 1
67372: NEG
67373: PUSH
67374: LD_INT 3
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: LD_INT 3
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 1
67395: PUSH
67396: LD_INT 2
67398: NEG
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: LIST
67408: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67409: LD_ADDR_VAR 0 12
67413: PUSH
67414: LD_INT 2
67416: PUSH
67417: LD_INT 1
67419: NEG
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 3
67427: PUSH
67428: LD_INT 0
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 3
67437: PUSH
67438: LD_INT 1
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: LIST
67449: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67450: LD_ADDR_VAR 0 13
67454: PUSH
67455: LD_INT 3
67457: PUSH
67458: LD_INT 2
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 3
67467: PUSH
67468: LD_INT 3
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 2
67477: PUSH
67478: LD_INT 3
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: LIST
67489: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67490: LD_ADDR_VAR 0 14
67494: PUSH
67495: LD_INT 1
67497: PUSH
67498: LD_INT 3
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: LD_INT 3
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 1
67517: NEG
67518: PUSH
67519: LD_INT 2
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: LIST
67530: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67531: LD_ADDR_VAR 0 15
67535: PUSH
67536: LD_INT 2
67538: NEG
67539: PUSH
67540: LD_INT 1
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 3
67549: NEG
67550: PUSH
67551: LD_INT 0
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 3
67560: NEG
67561: PUSH
67562: LD_INT 1
67564: NEG
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: LIST
67574: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67575: LD_ADDR_VAR 0 16
67579: PUSH
67580: LD_INT 2
67582: NEG
67583: PUSH
67584: LD_INT 3
67586: NEG
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 3
67594: NEG
67595: PUSH
67596: LD_INT 2
67598: NEG
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 3
67606: NEG
67607: PUSH
67608: LD_INT 3
67610: NEG
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: LIST
67620: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67621: LD_ADDR_VAR 0 17
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: LD_INT 3
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 0
67640: PUSH
67641: LD_INT 3
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 1
67651: PUSH
67652: LD_INT 2
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: LIST
67664: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67665: LD_ADDR_VAR 0 18
67669: PUSH
67670: LD_INT 2
67672: PUSH
67673: LD_INT 1
67675: NEG
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 3
67683: PUSH
67684: LD_INT 0
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 3
67693: PUSH
67694: LD_INT 1
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: LIST
67705: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67706: LD_ADDR_VAR 0 19
67710: PUSH
67711: LD_INT 3
67713: PUSH
67714: LD_INT 2
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 3
67723: PUSH
67724: LD_INT 3
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 2
67733: PUSH
67734: LD_INT 3
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: LIST
67745: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67746: LD_ADDR_VAR 0 20
67750: PUSH
67751: LD_INT 1
67753: PUSH
67754: LD_INT 3
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 0
67763: PUSH
67764: LD_INT 3
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 1
67773: NEG
67774: PUSH
67775: LD_INT 2
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: LIST
67786: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67787: LD_ADDR_VAR 0 21
67791: PUSH
67792: LD_INT 2
67794: NEG
67795: PUSH
67796: LD_INT 1
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 3
67805: NEG
67806: PUSH
67807: LD_INT 0
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 3
67816: NEG
67817: PUSH
67818: LD_INT 1
67820: NEG
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: LIST
67830: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67831: LD_ADDR_VAR 0 22
67835: PUSH
67836: LD_INT 2
67838: NEG
67839: PUSH
67840: LD_INT 3
67842: NEG
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 3
67850: NEG
67851: PUSH
67852: LD_INT 2
67854: NEG
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 3
67862: NEG
67863: PUSH
67864: LD_INT 3
67866: NEG
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: LIST
67876: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67877: LD_ADDR_VAR 0 23
67881: PUSH
67882: LD_INT 0
67884: PUSH
67885: LD_INT 3
67887: NEG
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 1
67895: NEG
67896: PUSH
67897: LD_INT 4
67899: NEG
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 1
67907: PUSH
67908: LD_INT 3
67910: NEG
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: LIST
67920: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67921: LD_ADDR_VAR 0 24
67925: PUSH
67926: LD_INT 3
67928: PUSH
67929: LD_INT 0
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 3
67938: PUSH
67939: LD_INT 1
67941: NEG
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 4
67949: PUSH
67950: LD_INT 1
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: LIST
67961: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67962: LD_ADDR_VAR 0 25
67966: PUSH
67967: LD_INT 3
67969: PUSH
67970: LD_INT 3
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 4
67979: PUSH
67980: LD_INT 3
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 3
67989: PUSH
67990: LD_INT 4
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: LIST
68001: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68002: LD_ADDR_VAR 0 26
68006: PUSH
68007: LD_INT 0
68009: PUSH
68010: LD_INT 3
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 1
68019: PUSH
68020: LD_INT 4
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 1
68029: NEG
68030: PUSH
68031: LD_INT 3
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: LIST
68042: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68043: LD_ADDR_VAR 0 27
68047: PUSH
68048: LD_INT 3
68050: NEG
68051: PUSH
68052: LD_INT 0
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 3
68061: NEG
68062: PUSH
68063: LD_INT 1
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 4
68072: NEG
68073: PUSH
68074: LD_INT 1
68076: NEG
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: LIST
68086: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68087: LD_ADDR_VAR 0 28
68091: PUSH
68092: LD_INT 3
68094: NEG
68095: PUSH
68096: LD_INT 3
68098: NEG
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 3
68106: NEG
68107: PUSH
68108: LD_INT 4
68110: NEG
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 4
68118: NEG
68119: PUSH
68120: LD_INT 3
68122: NEG
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: LIST
68132: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68133: LD_ADDR_VAR 0 29
68137: PUSH
68138: LD_INT 1
68140: NEG
68141: PUSH
68142: LD_INT 3
68144: NEG
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 0
68152: PUSH
68153: LD_INT 3
68155: NEG
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 1
68163: PUSH
68164: LD_INT 2
68166: NEG
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 1
68174: NEG
68175: PUSH
68176: LD_INT 4
68178: NEG
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 0
68186: PUSH
68187: LD_INT 4
68189: NEG
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 1
68197: PUSH
68198: LD_INT 3
68200: NEG
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 1
68208: NEG
68209: PUSH
68210: LD_INT 5
68212: NEG
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 0
68220: PUSH
68221: LD_INT 5
68223: NEG
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 1
68231: PUSH
68232: LD_INT 4
68234: NEG
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 1
68242: NEG
68243: PUSH
68244: LD_INT 6
68246: NEG
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 0
68254: PUSH
68255: LD_INT 6
68257: NEG
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 1
68265: PUSH
68266: LD_INT 5
68268: NEG
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68288: LD_ADDR_VAR 0 30
68292: PUSH
68293: LD_INT 2
68295: PUSH
68296: LD_INT 1
68298: NEG
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 3
68306: PUSH
68307: LD_INT 0
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 3
68316: PUSH
68317: LD_INT 1
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 3
68326: PUSH
68327: LD_INT 1
68329: NEG
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 4
68337: PUSH
68338: LD_INT 0
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 4
68347: PUSH
68348: LD_INT 1
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 4
68357: PUSH
68358: LD_INT 1
68360: NEG
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 5
68368: PUSH
68369: LD_INT 0
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 5
68378: PUSH
68379: LD_INT 1
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 5
68388: PUSH
68389: LD_INT 1
68391: NEG
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 6
68399: PUSH
68400: LD_INT 0
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 6
68409: PUSH
68410: LD_INT 1
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68431: LD_ADDR_VAR 0 31
68435: PUSH
68436: LD_INT 3
68438: PUSH
68439: LD_INT 2
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 3
68448: PUSH
68449: LD_INT 3
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 2
68458: PUSH
68459: LD_INT 3
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 4
68468: PUSH
68469: LD_INT 3
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 4
68478: PUSH
68479: LD_INT 4
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 3
68488: PUSH
68489: LD_INT 4
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 5
68498: PUSH
68499: LD_INT 4
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 5
68508: PUSH
68509: LD_INT 5
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 4
68518: PUSH
68519: LD_INT 5
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 6
68528: PUSH
68529: LD_INT 5
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 6
68538: PUSH
68539: LD_INT 6
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 5
68548: PUSH
68549: LD_INT 6
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68570: LD_ADDR_VAR 0 32
68574: PUSH
68575: LD_INT 1
68577: PUSH
68578: LD_INT 3
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 0
68587: PUSH
68588: LD_INT 3
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 1
68597: NEG
68598: PUSH
68599: LD_INT 2
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 1
68608: PUSH
68609: LD_INT 4
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: LD_INT 4
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 1
68628: NEG
68629: PUSH
68630: LD_INT 3
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 1
68639: PUSH
68640: LD_INT 5
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 0
68649: PUSH
68650: LD_INT 5
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 1
68659: NEG
68660: PUSH
68661: LD_INT 4
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 1
68670: PUSH
68671: LD_INT 6
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 0
68680: PUSH
68681: LD_INT 6
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 1
68690: NEG
68691: PUSH
68692: LD_INT 5
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68713: LD_ADDR_VAR 0 33
68717: PUSH
68718: LD_INT 2
68720: NEG
68721: PUSH
68722: LD_INT 1
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 3
68731: NEG
68732: PUSH
68733: LD_INT 0
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 3
68742: NEG
68743: PUSH
68744: LD_INT 1
68746: NEG
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 3
68754: NEG
68755: PUSH
68756: LD_INT 1
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 4
68765: NEG
68766: PUSH
68767: LD_INT 0
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 4
68776: NEG
68777: PUSH
68778: LD_INT 1
68780: NEG
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 4
68788: NEG
68789: PUSH
68790: LD_INT 1
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 5
68799: NEG
68800: PUSH
68801: LD_INT 0
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 5
68810: NEG
68811: PUSH
68812: LD_INT 1
68814: NEG
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 5
68822: NEG
68823: PUSH
68824: LD_INT 1
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 6
68833: NEG
68834: PUSH
68835: LD_INT 0
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 6
68844: NEG
68845: PUSH
68846: LD_INT 1
68848: NEG
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68868: LD_ADDR_VAR 0 34
68872: PUSH
68873: LD_INT 2
68875: NEG
68876: PUSH
68877: LD_INT 3
68879: NEG
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 3
68887: NEG
68888: PUSH
68889: LD_INT 2
68891: NEG
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 3
68899: NEG
68900: PUSH
68901: LD_INT 3
68903: NEG
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 3
68911: NEG
68912: PUSH
68913: LD_INT 4
68915: NEG
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 4
68923: NEG
68924: PUSH
68925: LD_INT 3
68927: NEG
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 4
68935: NEG
68936: PUSH
68937: LD_INT 4
68939: NEG
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 4
68947: NEG
68948: PUSH
68949: LD_INT 5
68951: NEG
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 5
68959: NEG
68960: PUSH
68961: LD_INT 4
68963: NEG
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 5
68971: NEG
68972: PUSH
68973: LD_INT 5
68975: NEG
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 5
68983: NEG
68984: PUSH
68985: LD_INT 6
68987: NEG
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 6
68995: NEG
68996: PUSH
68997: LD_INT 5
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 6
69007: NEG
69008: PUSH
69009: LD_INT 6
69011: NEG
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69031: LD_ADDR_VAR 0 41
69035: PUSH
69036: LD_INT 0
69038: PUSH
69039: LD_INT 2
69041: NEG
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 1
69049: NEG
69050: PUSH
69051: LD_INT 3
69053: NEG
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 1
69061: PUSH
69062: LD_INT 2
69064: NEG
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: LIST
69074: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69075: LD_ADDR_VAR 0 42
69079: PUSH
69080: LD_INT 2
69082: PUSH
69083: LD_INT 0
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 2
69092: PUSH
69093: LD_INT 1
69095: NEG
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 3
69103: PUSH
69104: LD_INT 1
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: LIST
69115: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69116: LD_ADDR_VAR 0 43
69120: PUSH
69121: LD_INT 2
69123: PUSH
69124: LD_INT 2
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 3
69133: PUSH
69134: LD_INT 2
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 2
69143: PUSH
69144: LD_INT 3
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: LIST
69155: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69156: LD_ADDR_VAR 0 44
69160: PUSH
69161: LD_INT 0
69163: PUSH
69164: LD_INT 2
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 1
69173: PUSH
69174: LD_INT 3
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 1
69183: NEG
69184: PUSH
69185: LD_INT 2
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: LIST
69196: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69197: LD_ADDR_VAR 0 45
69201: PUSH
69202: LD_INT 2
69204: NEG
69205: PUSH
69206: LD_INT 0
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 2
69215: NEG
69216: PUSH
69217: LD_INT 1
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 3
69226: NEG
69227: PUSH
69228: LD_INT 1
69230: NEG
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: LIST
69240: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69241: LD_ADDR_VAR 0 46
69245: PUSH
69246: LD_INT 2
69248: NEG
69249: PUSH
69250: LD_INT 2
69252: NEG
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 2
69260: NEG
69261: PUSH
69262: LD_INT 3
69264: NEG
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 3
69272: NEG
69273: PUSH
69274: LD_INT 2
69276: NEG
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: LIST
69286: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69287: LD_ADDR_VAR 0 47
69291: PUSH
69292: LD_INT 2
69294: NEG
69295: PUSH
69296: LD_INT 3
69298: NEG
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 1
69306: NEG
69307: PUSH
69308: LD_INT 3
69310: NEG
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69320: LD_ADDR_VAR 0 48
69324: PUSH
69325: LD_INT 1
69327: PUSH
69328: LD_INT 2
69330: NEG
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 2
69338: PUSH
69339: LD_INT 1
69341: NEG
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69351: LD_ADDR_VAR 0 49
69355: PUSH
69356: LD_INT 3
69358: PUSH
69359: LD_INT 1
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 3
69368: PUSH
69369: LD_INT 2
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69380: LD_ADDR_VAR 0 50
69384: PUSH
69385: LD_INT 2
69387: PUSH
69388: LD_INT 3
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 1
69397: PUSH
69398: LD_INT 3
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69409: LD_ADDR_VAR 0 51
69413: PUSH
69414: LD_INT 1
69416: NEG
69417: PUSH
69418: LD_INT 2
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 2
69427: NEG
69428: PUSH
69429: LD_INT 1
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69440: LD_ADDR_VAR 0 52
69444: PUSH
69445: LD_INT 3
69447: NEG
69448: PUSH
69449: LD_INT 1
69451: NEG
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 3
69459: NEG
69460: PUSH
69461: LD_INT 2
69463: NEG
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69473: LD_ADDR_VAR 0 53
69477: PUSH
69478: LD_INT 1
69480: NEG
69481: PUSH
69482: LD_INT 3
69484: NEG
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 0
69492: PUSH
69493: LD_INT 3
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 1
69503: PUSH
69504: LD_INT 2
69506: NEG
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: LIST
69516: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69517: LD_ADDR_VAR 0 54
69521: PUSH
69522: LD_INT 2
69524: PUSH
69525: LD_INT 1
69527: NEG
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 3
69535: PUSH
69536: LD_INT 0
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 3
69545: PUSH
69546: LD_INT 1
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: LIST
69557: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69558: LD_ADDR_VAR 0 55
69562: PUSH
69563: LD_INT 3
69565: PUSH
69566: LD_INT 2
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 3
69575: PUSH
69576: LD_INT 3
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 2
69585: PUSH
69586: LD_INT 3
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: LIST
69597: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69598: LD_ADDR_VAR 0 56
69602: PUSH
69603: LD_INT 1
69605: PUSH
69606: LD_INT 3
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 0
69615: PUSH
69616: LD_INT 3
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 1
69625: NEG
69626: PUSH
69627: LD_INT 2
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: LIST
69638: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69639: LD_ADDR_VAR 0 57
69643: PUSH
69644: LD_INT 2
69646: NEG
69647: PUSH
69648: LD_INT 1
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: LD_INT 3
69657: NEG
69658: PUSH
69659: LD_INT 0
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 3
69668: NEG
69669: PUSH
69670: LD_INT 1
69672: NEG
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: LIST
69682: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69683: LD_ADDR_VAR 0 58
69687: PUSH
69688: LD_INT 2
69690: NEG
69691: PUSH
69692: LD_INT 3
69694: NEG
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 3
69702: NEG
69703: PUSH
69704: LD_INT 2
69706: NEG
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 3
69714: NEG
69715: PUSH
69716: LD_INT 3
69718: NEG
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: LIST
69728: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69729: LD_ADDR_VAR 0 59
69733: PUSH
69734: LD_INT 1
69736: NEG
69737: PUSH
69738: LD_INT 2
69740: NEG
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 0
69748: PUSH
69749: LD_INT 2
69751: NEG
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 1
69759: PUSH
69760: LD_INT 1
69762: NEG
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: LIST
69772: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69773: LD_ADDR_VAR 0 60
69777: PUSH
69778: LD_INT 1
69780: PUSH
69781: LD_INT 1
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 2
69791: PUSH
69792: LD_INT 0
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 2
69801: PUSH
69802: LD_INT 1
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: LIST
69813: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69814: LD_ADDR_VAR 0 61
69818: PUSH
69819: LD_INT 2
69821: PUSH
69822: LD_INT 1
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 2
69831: PUSH
69832: LD_INT 2
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 1
69841: PUSH
69842: LD_INT 2
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: LIST
69853: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69854: LD_ADDR_VAR 0 62
69858: PUSH
69859: LD_INT 1
69861: PUSH
69862: LD_INT 2
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 0
69871: PUSH
69872: LD_INT 2
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 1
69881: NEG
69882: PUSH
69883: LD_INT 1
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: LIST
69894: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69895: LD_ADDR_VAR 0 63
69899: PUSH
69900: LD_INT 1
69902: NEG
69903: PUSH
69904: LD_INT 1
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: LD_INT 2
69913: NEG
69914: PUSH
69915: LD_INT 0
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 2
69924: NEG
69925: PUSH
69926: LD_INT 1
69928: NEG
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: LIST
69938: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69939: LD_ADDR_VAR 0 64
69943: PUSH
69944: LD_INT 1
69946: NEG
69947: PUSH
69948: LD_INT 2
69950: NEG
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: LD_INT 2
69958: NEG
69959: PUSH
69960: LD_INT 1
69962: NEG
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 2
69970: NEG
69971: PUSH
69972: LD_INT 2
69974: NEG
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: LIST
69984: ST_TO_ADDR
// end ; 2 :
69985: GO 73251
69987: LD_INT 2
69989: DOUBLE
69990: EQUAL
69991: IFTRUE 69995
69993: GO 73250
69995: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69996: LD_ADDR_VAR 0 29
70000: PUSH
70001: LD_INT 4
70003: PUSH
70004: LD_INT 0
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 4
70013: PUSH
70014: LD_INT 1
70016: NEG
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 5
70024: PUSH
70025: LD_INT 0
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: LD_INT 5
70034: PUSH
70035: LD_INT 1
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 4
70044: PUSH
70045: LD_INT 1
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 3
70054: PUSH
70055: LD_INT 0
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 3
70064: PUSH
70065: LD_INT 1
70067: NEG
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 3
70075: PUSH
70076: LD_INT 2
70078: NEG
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 5
70086: PUSH
70087: LD_INT 2
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 3
70096: PUSH
70097: LD_INT 3
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 3
70106: PUSH
70107: LD_INT 2
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 4
70116: PUSH
70117: LD_INT 3
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 4
70126: PUSH
70127: LD_INT 4
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 3
70136: PUSH
70137: LD_INT 4
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 2
70146: PUSH
70147: LD_INT 3
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 2
70156: PUSH
70157: LD_INT 2
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: LD_INT 4
70166: PUSH
70167: LD_INT 2
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 2
70176: PUSH
70177: LD_INT 4
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: LD_INT 4
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PUSH
70194: LD_INT 0
70196: PUSH
70197: LD_INT 3
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 1
70206: PUSH
70207: LD_INT 4
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 1
70216: PUSH
70217: LD_INT 5
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 0
70226: PUSH
70227: LD_INT 5
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 1
70236: NEG
70237: PUSH
70238: LD_INT 4
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 1
70247: NEG
70248: PUSH
70249: LD_INT 3
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 2
70258: PUSH
70259: LD_INT 5
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 2
70268: NEG
70269: PUSH
70270: LD_INT 3
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 3
70279: NEG
70280: PUSH
70281: LD_INT 0
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 3
70290: NEG
70291: PUSH
70292: LD_INT 1
70294: NEG
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 2
70302: NEG
70303: PUSH
70304: LD_INT 0
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 2
70313: NEG
70314: PUSH
70315: LD_INT 1
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: LD_INT 3
70324: NEG
70325: PUSH
70326: LD_INT 1
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 4
70335: NEG
70336: PUSH
70337: LD_INT 0
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 4
70346: NEG
70347: PUSH
70348: LD_INT 1
70350: NEG
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 4
70358: NEG
70359: PUSH
70360: LD_INT 2
70362: NEG
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 2
70370: NEG
70371: PUSH
70372: LD_INT 2
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 4
70381: NEG
70382: PUSH
70383: LD_INT 4
70385: NEG
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 4
70393: NEG
70394: PUSH
70395: LD_INT 5
70397: NEG
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 3
70405: NEG
70406: PUSH
70407: LD_INT 4
70409: NEG
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 3
70417: NEG
70418: PUSH
70419: LD_INT 3
70421: NEG
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: PUSH
70427: LD_INT 4
70429: NEG
70430: PUSH
70431: LD_INT 3
70433: NEG
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PUSH
70439: LD_INT 5
70441: NEG
70442: PUSH
70443: LD_INT 4
70445: NEG
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 5
70453: NEG
70454: PUSH
70455: LD_INT 5
70457: NEG
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 3
70465: NEG
70466: PUSH
70467: LD_INT 5
70469: NEG
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 5
70477: NEG
70478: PUSH
70479: LD_INT 3
70481: NEG
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70534: LD_ADDR_VAR 0 30
70538: PUSH
70539: LD_INT 4
70541: PUSH
70542: LD_INT 4
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 4
70551: PUSH
70552: LD_INT 3
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 5
70561: PUSH
70562: LD_INT 4
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PUSH
70569: LD_INT 5
70571: PUSH
70572: LD_INT 5
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 4
70581: PUSH
70582: LD_INT 5
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 3
70591: PUSH
70592: LD_INT 4
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 3
70601: PUSH
70602: LD_INT 3
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 5
70611: PUSH
70612: LD_INT 3
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 3
70621: PUSH
70622: LD_INT 5
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: PUSH
70629: LD_INT 0
70631: PUSH
70632: LD_INT 3
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 0
70641: PUSH
70642: LD_INT 2
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: LD_INT 1
70651: PUSH
70652: LD_INT 3
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: LD_INT 1
70661: PUSH
70662: LD_INT 4
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 0
70671: PUSH
70672: LD_INT 4
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 1
70681: NEG
70682: PUSH
70683: LD_INT 3
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 1
70692: NEG
70693: PUSH
70694: LD_INT 2
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 2
70703: PUSH
70704: LD_INT 4
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: LD_INT 2
70713: NEG
70714: PUSH
70715: LD_INT 2
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 4
70724: NEG
70725: PUSH
70726: LD_INT 0
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: PUSH
70733: LD_INT 4
70735: NEG
70736: PUSH
70737: LD_INT 1
70739: NEG
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: PUSH
70745: LD_INT 3
70747: NEG
70748: PUSH
70749: LD_INT 0
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 3
70758: NEG
70759: PUSH
70760: LD_INT 1
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 4
70769: NEG
70770: PUSH
70771: LD_INT 1
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 5
70780: NEG
70781: PUSH
70782: LD_INT 0
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 5
70791: NEG
70792: PUSH
70793: LD_INT 1
70795: NEG
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: LD_INT 5
70803: NEG
70804: PUSH
70805: LD_INT 2
70807: NEG
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 3
70815: NEG
70816: PUSH
70817: LD_INT 2
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 3
70826: NEG
70827: PUSH
70828: LD_INT 3
70830: NEG
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: PUSH
70836: LD_INT 3
70838: NEG
70839: PUSH
70840: LD_INT 4
70842: NEG
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 2
70850: NEG
70851: PUSH
70852: LD_INT 3
70854: NEG
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 2
70862: NEG
70863: PUSH
70864: LD_INT 2
70866: NEG
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 3
70874: NEG
70875: PUSH
70876: LD_INT 2
70878: NEG
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 4
70886: NEG
70887: PUSH
70888: LD_INT 3
70890: NEG
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 4
70898: NEG
70899: PUSH
70900: LD_INT 4
70902: NEG
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 2
70910: NEG
70911: PUSH
70912: LD_INT 4
70914: NEG
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 4
70922: NEG
70923: PUSH
70924: LD_INT 2
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: LD_INT 4
70937: NEG
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 0
70945: PUSH
70946: LD_INT 5
70948: NEG
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 1
70956: PUSH
70957: LD_INT 4
70959: NEG
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 1
70967: PUSH
70968: LD_INT 3
70970: NEG
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 0
70978: PUSH
70979: LD_INT 3
70981: NEG
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 1
70989: NEG
70990: PUSH
70991: LD_INT 4
70993: NEG
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 1
71001: NEG
71002: PUSH
71003: LD_INT 5
71005: NEG
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 2
71013: PUSH
71014: LD_INT 3
71016: NEG
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 2
71024: NEG
71025: PUSH
71026: LD_INT 5
71028: NEG
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71081: LD_ADDR_VAR 0 31
71085: PUSH
71086: LD_INT 0
71088: PUSH
71089: LD_INT 4
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PUSH
71096: LD_INT 0
71098: PUSH
71099: LD_INT 3
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 1
71108: PUSH
71109: LD_INT 4
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 1
71118: PUSH
71119: LD_INT 5
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 0
71128: PUSH
71129: LD_INT 5
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 1
71138: NEG
71139: PUSH
71140: LD_INT 4
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 1
71149: NEG
71150: PUSH
71151: LD_INT 3
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: LD_INT 2
71160: PUSH
71161: LD_INT 5
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PUSH
71168: LD_INT 2
71170: NEG
71171: PUSH
71172: LD_INT 3
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: PUSH
71179: LD_INT 3
71181: NEG
71182: PUSH
71183: LD_INT 0
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: PUSH
71190: LD_INT 3
71192: NEG
71193: PUSH
71194: LD_INT 1
71196: NEG
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 2
71204: NEG
71205: PUSH
71206: LD_INT 0
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_INT 2
71215: NEG
71216: PUSH
71217: LD_INT 1
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 3
71226: NEG
71227: PUSH
71228: LD_INT 1
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: LD_INT 4
71237: NEG
71238: PUSH
71239: LD_INT 0
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 4
71248: NEG
71249: PUSH
71250: LD_INT 1
71252: NEG
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PUSH
71258: LD_INT 4
71260: NEG
71261: PUSH
71262: LD_INT 2
71264: NEG
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 2
71272: NEG
71273: PUSH
71274: LD_INT 2
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: LD_INT 4
71283: NEG
71284: PUSH
71285: LD_INT 4
71287: NEG
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: LD_INT 4
71295: NEG
71296: PUSH
71297: LD_INT 5
71299: NEG
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 3
71307: NEG
71308: PUSH
71309: LD_INT 4
71311: NEG
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 3
71319: NEG
71320: PUSH
71321: LD_INT 3
71323: NEG
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 4
71331: NEG
71332: PUSH
71333: LD_INT 3
71335: NEG
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: PUSH
71341: LD_INT 5
71343: NEG
71344: PUSH
71345: LD_INT 4
71347: NEG
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 5
71355: NEG
71356: PUSH
71357: LD_INT 5
71359: NEG
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 3
71367: NEG
71368: PUSH
71369: LD_INT 5
71371: NEG
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 5
71379: NEG
71380: PUSH
71381: LD_INT 3
71383: NEG
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 0
71391: PUSH
71392: LD_INT 3
71394: NEG
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: LD_INT 0
71402: PUSH
71403: LD_INT 4
71405: NEG
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: LD_INT 1
71413: PUSH
71414: LD_INT 3
71416: NEG
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 1
71424: PUSH
71425: LD_INT 2
71427: NEG
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: PUSH
71433: LD_INT 0
71435: PUSH
71436: LD_INT 2
71438: NEG
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 1
71446: NEG
71447: PUSH
71448: LD_INT 3
71450: NEG
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 1
71458: NEG
71459: PUSH
71460: LD_INT 4
71462: NEG
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 2
71470: PUSH
71471: LD_INT 2
71473: NEG
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 2
71481: NEG
71482: PUSH
71483: LD_INT 4
71485: NEG
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: LD_INT 4
71493: PUSH
71494: LD_INT 0
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: PUSH
71501: LD_INT 4
71503: PUSH
71504: LD_INT 1
71506: NEG
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: LD_INT 5
71514: PUSH
71515: LD_INT 0
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PUSH
71522: LD_INT 5
71524: PUSH
71525: LD_INT 1
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: LD_INT 4
71534: PUSH
71535: LD_INT 1
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: LD_INT 3
71544: PUSH
71545: LD_INT 0
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 3
71554: PUSH
71555: LD_INT 1
71557: NEG
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 3
71565: PUSH
71566: LD_INT 2
71568: NEG
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: PUSH
71574: LD_INT 5
71576: PUSH
71577: LD_INT 2
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71631: LD_ADDR_VAR 0 32
71635: PUSH
71636: LD_INT 4
71638: NEG
71639: PUSH
71640: LD_INT 0
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 4
71649: NEG
71650: PUSH
71651: LD_INT 1
71653: NEG
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PUSH
71659: LD_INT 3
71661: NEG
71662: PUSH
71663: LD_INT 0
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 3
71672: NEG
71673: PUSH
71674: LD_INT 1
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 4
71683: NEG
71684: PUSH
71685: LD_INT 1
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: PUSH
71692: LD_INT 5
71694: NEG
71695: PUSH
71696: LD_INT 0
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PUSH
71703: LD_INT 5
71705: NEG
71706: PUSH
71707: LD_INT 1
71709: NEG
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: LD_INT 5
71717: NEG
71718: PUSH
71719: LD_INT 2
71721: NEG
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: LD_INT 3
71729: NEG
71730: PUSH
71731: LD_INT 2
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: PUSH
71738: LD_INT 3
71740: NEG
71741: PUSH
71742: LD_INT 3
71744: NEG
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 3
71752: NEG
71753: PUSH
71754: LD_INT 4
71756: NEG
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: PUSH
71762: LD_INT 2
71764: NEG
71765: PUSH
71766: LD_INT 3
71768: NEG
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 2
71776: NEG
71777: PUSH
71778: LD_INT 2
71780: NEG
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PUSH
71786: LD_INT 3
71788: NEG
71789: PUSH
71790: LD_INT 2
71792: NEG
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 4
71800: NEG
71801: PUSH
71802: LD_INT 3
71804: NEG
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 4
71812: NEG
71813: PUSH
71814: LD_INT 4
71816: NEG
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 2
71824: NEG
71825: PUSH
71826: LD_INT 4
71828: NEG
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 4
71836: NEG
71837: PUSH
71838: LD_INT 2
71840: NEG
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: LD_INT 0
71848: PUSH
71849: LD_INT 4
71851: NEG
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 0
71859: PUSH
71860: LD_INT 5
71862: NEG
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PUSH
71868: LD_INT 1
71870: PUSH
71871: LD_INT 4
71873: NEG
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 1
71881: PUSH
71882: LD_INT 3
71884: NEG
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: PUSH
71890: LD_INT 0
71892: PUSH
71893: LD_INT 3
71895: NEG
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: LD_INT 1
71903: NEG
71904: PUSH
71905: LD_INT 4
71907: NEG
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 1
71915: NEG
71916: PUSH
71917: LD_INT 5
71919: NEG
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 2
71927: PUSH
71928: LD_INT 3
71930: NEG
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: LD_INT 2
71938: NEG
71939: PUSH
71940: LD_INT 5
71942: NEG
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 3
71950: PUSH
71951: LD_INT 0
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: PUSH
71958: LD_INT 3
71960: PUSH
71961: LD_INT 1
71963: NEG
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: PUSH
71969: LD_INT 4
71971: PUSH
71972: LD_INT 0
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 4
71981: PUSH
71982: LD_INT 1
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: PUSH
71989: LD_INT 3
71991: PUSH
71992: LD_INT 1
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 2
72001: PUSH
72002: LD_INT 0
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: PUSH
72009: LD_INT 2
72011: PUSH
72012: LD_INT 1
72014: NEG
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 2
72022: PUSH
72023: LD_INT 2
72025: NEG
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PUSH
72031: LD_INT 4
72033: PUSH
72034: LD_INT 2
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 4
72043: PUSH
72044: LD_INT 4
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 4
72053: PUSH
72054: LD_INT 3
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PUSH
72061: LD_INT 5
72063: PUSH
72064: LD_INT 4
72066: PUSH
72067: EMPTY
72068: LIST
72069: LIST
72070: PUSH
72071: LD_INT 5
72073: PUSH
72074: LD_INT 5
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: PUSH
72081: LD_INT 4
72083: PUSH
72084: LD_INT 5
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 3
72093: PUSH
72094: LD_INT 4
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: LD_INT 3
72103: PUSH
72104: LD_INT 3
72106: PUSH
72107: EMPTY
72108: LIST
72109: LIST
72110: PUSH
72111: LD_INT 5
72113: PUSH
72114: LD_INT 3
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: LD_INT 3
72123: PUSH
72124: LD_INT 5
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72178: LD_ADDR_VAR 0 33
72182: PUSH
72183: LD_INT 4
72185: NEG
72186: PUSH
72187: LD_INT 4
72189: NEG
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: PUSH
72195: LD_INT 4
72197: NEG
72198: PUSH
72199: LD_INT 5
72201: NEG
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PUSH
72207: LD_INT 3
72209: NEG
72210: PUSH
72211: LD_INT 4
72213: NEG
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_INT 3
72221: NEG
72222: PUSH
72223: LD_INT 3
72225: NEG
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: LD_INT 4
72233: NEG
72234: PUSH
72235: LD_INT 3
72237: NEG
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 5
72245: NEG
72246: PUSH
72247: LD_INT 4
72249: NEG
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 5
72257: NEG
72258: PUSH
72259: LD_INT 5
72261: NEG
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 3
72269: NEG
72270: PUSH
72271: LD_INT 5
72273: NEG
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 5
72281: NEG
72282: PUSH
72283: LD_INT 3
72285: NEG
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_INT 0
72293: PUSH
72294: LD_INT 3
72296: NEG
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_INT 0
72304: PUSH
72305: LD_INT 4
72307: NEG
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: PUSH
72313: LD_INT 1
72315: PUSH
72316: LD_INT 3
72318: NEG
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: LD_INT 1
72326: PUSH
72327: LD_INT 2
72329: NEG
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 0
72337: PUSH
72338: LD_INT 2
72340: NEG
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: PUSH
72346: LD_INT 1
72348: NEG
72349: PUSH
72350: LD_INT 3
72352: NEG
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 1
72360: NEG
72361: PUSH
72362: LD_INT 4
72364: NEG
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 2
72372: PUSH
72373: LD_INT 2
72375: NEG
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: PUSH
72381: LD_INT 2
72383: NEG
72384: PUSH
72385: LD_INT 4
72387: NEG
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: PUSH
72393: LD_INT 4
72395: PUSH
72396: LD_INT 0
72398: PUSH
72399: EMPTY
72400: LIST
72401: LIST
72402: PUSH
72403: LD_INT 4
72405: PUSH
72406: LD_INT 1
72408: NEG
72409: PUSH
72410: EMPTY
72411: LIST
72412: LIST
72413: PUSH
72414: LD_INT 5
72416: PUSH
72417: LD_INT 0
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: PUSH
72424: LD_INT 5
72426: PUSH
72427: LD_INT 1
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: LD_INT 4
72436: PUSH
72437: LD_INT 1
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_INT 3
72446: PUSH
72447: LD_INT 0
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: PUSH
72454: LD_INT 3
72456: PUSH
72457: LD_INT 1
72459: NEG
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PUSH
72465: LD_INT 3
72467: PUSH
72468: LD_INT 2
72470: NEG
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: PUSH
72476: LD_INT 5
72478: PUSH
72479: LD_INT 2
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: LD_INT 3
72488: PUSH
72489: LD_INT 3
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: PUSH
72496: LD_INT 3
72498: PUSH
72499: LD_INT 2
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: PUSH
72506: LD_INT 4
72508: PUSH
72509: LD_INT 3
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: PUSH
72516: LD_INT 4
72518: PUSH
72519: LD_INT 4
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PUSH
72526: LD_INT 3
72528: PUSH
72529: LD_INT 4
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PUSH
72536: LD_INT 2
72538: PUSH
72539: LD_INT 3
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: LD_INT 2
72548: PUSH
72549: LD_INT 2
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: PUSH
72556: LD_INT 4
72558: PUSH
72559: LD_INT 2
72561: PUSH
72562: EMPTY
72563: LIST
72564: LIST
72565: PUSH
72566: LD_INT 2
72568: PUSH
72569: LD_INT 4
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 0
72578: PUSH
72579: LD_INT 4
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 0
72588: PUSH
72589: LD_INT 3
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: PUSH
72596: LD_INT 1
72598: PUSH
72599: LD_INT 4
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: PUSH
72606: LD_INT 1
72608: PUSH
72609: LD_INT 5
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PUSH
72616: LD_INT 0
72618: PUSH
72619: LD_INT 5
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: PUSH
72626: LD_INT 1
72628: NEG
72629: PUSH
72630: LD_INT 4
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: PUSH
72637: LD_INT 1
72639: NEG
72640: PUSH
72641: LD_INT 3
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: PUSH
72648: LD_INT 2
72650: PUSH
72651: LD_INT 5
72653: PUSH
72654: EMPTY
72655: LIST
72656: LIST
72657: PUSH
72658: LD_INT 2
72660: NEG
72661: PUSH
72662: LD_INT 3
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: LIST
72706: LIST
72707: LIST
72708: LIST
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72716: LD_ADDR_VAR 0 34
72720: PUSH
72721: LD_INT 0
72723: PUSH
72724: LD_INT 4
72726: NEG
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 0
72734: PUSH
72735: LD_INT 5
72737: NEG
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: LD_INT 1
72745: PUSH
72746: LD_INT 4
72748: NEG
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: PUSH
72754: LD_INT 1
72756: PUSH
72757: LD_INT 3
72759: NEG
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: PUSH
72765: LD_INT 0
72767: PUSH
72768: LD_INT 3
72770: NEG
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: PUSH
72776: LD_INT 1
72778: NEG
72779: PUSH
72780: LD_INT 4
72782: NEG
72783: PUSH
72784: EMPTY
72785: LIST
72786: LIST
72787: PUSH
72788: LD_INT 1
72790: NEG
72791: PUSH
72792: LD_INT 5
72794: NEG
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: PUSH
72800: LD_INT 2
72802: PUSH
72803: LD_INT 3
72805: NEG
72806: PUSH
72807: EMPTY
72808: LIST
72809: LIST
72810: PUSH
72811: LD_INT 2
72813: NEG
72814: PUSH
72815: LD_INT 5
72817: NEG
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: PUSH
72823: LD_INT 3
72825: PUSH
72826: LD_INT 0
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: PUSH
72833: LD_INT 3
72835: PUSH
72836: LD_INT 1
72838: NEG
72839: PUSH
72840: EMPTY
72841: LIST
72842: LIST
72843: PUSH
72844: LD_INT 4
72846: PUSH
72847: LD_INT 0
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: PUSH
72854: LD_INT 4
72856: PUSH
72857: LD_INT 1
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: PUSH
72864: LD_INT 3
72866: PUSH
72867: LD_INT 1
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: PUSH
72874: LD_INT 2
72876: PUSH
72877: LD_INT 0
72879: PUSH
72880: EMPTY
72881: LIST
72882: LIST
72883: PUSH
72884: LD_INT 2
72886: PUSH
72887: LD_INT 1
72889: NEG
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: PUSH
72895: LD_INT 2
72897: PUSH
72898: LD_INT 2
72900: NEG
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: PUSH
72906: LD_INT 4
72908: PUSH
72909: LD_INT 2
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: PUSH
72916: LD_INT 4
72918: PUSH
72919: LD_INT 4
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 4
72928: PUSH
72929: LD_INT 3
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_INT 5
72938: PUSH
72939: LD_INT 4
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PUSH
72946: LD_INT 5
72948: PUSH
72949: LD_INT 5
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: PUSH
72956: LD_INT 4
72958: PUSH
72959: LD_INT 5
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: PUSH
72966: LD_INT 3
72968: PUSH
72969: LD_INT 4
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: PUSH
72976: LD_INT 3
72978: PUSH
72979: LD_INT 3
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: PUSH
72986: LD_INT 5
72988: PUSH
72989: LD_INT 3
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: PUSH
72996: LD_INT 3
72998: PUSH
72999: LD_INT 5
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 0
73008: PUSH
73009: LD_INT 3
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: PUSH
73016: LD_INT 0
73018: PUSH
73019: LD_INT 2
73021: PUSH
73022: EMPTY
73023: LIST
73024: LIST
73025: PUSH
73026: LD_INT 1
73028: PUSH
73029: LD_INT 3
73031: PUSH
73032: EMPTY
73033: LIST
73034: LIST
73035: PUSH
73036: LD_INT 1
73038: PUSH
73039: LD_INT 4
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: PUSH
73046: LD_INT 0
73048: PUSH
73049: LD_INT 4
73051: PUSH
73052: EMPTY
73053: LIST
73054: LIST
73055: PUSH
73056: LD_INT 1
73058: NEG
73059: PUSH
73060: LD_INT 3
73062: PUSH
73063: EMPTY
73064: LIST
73065: LIST
73066: PUSH
73067: LD_INT 1
73069: NEG
73070: PUSH
73071: LD_INT 2
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 2
73080: PUSH
73081: LD_INT 4
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: PUSH
73088: LD_INT 2
73090: NEG
73091: PUSH
73092: LD_INT 2
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: PUSH
73099: LD_INT 4
73101: NEG
73102: PUSH
73103: LD_INT 0
73105: PUSH
73106: EMPTY
73107: LIST
73108: LIST
73109: PUSH
73110: LD_INT 4
73112: NEG
73113: PUSH
73114: LD_INT 1
73116: NEG
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 3
73124: NEG
73125: PUSH
73126: LD_INT 0
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: PUSH
73133: LD_INT 3
73135: NEG
73136: PUSH
73137: LD_INT 1
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: PUSH
73144: LD_INT 4
73146: NEG
73147: PUSH
73148: LD_INT 1
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: PUSH
73155: LD_INT 5
73157: NEG
73158: PUSH
73159: LD_INT 0
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: PUSH
73166: LD_INT 5
73168: NEG
73169: PUSH
73170: LD_INT 1
73172: NEG
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: LD_INT 5
73180: NEG
73181: PUSH
73182: LD_INT 2
73184: NEG
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: PUSH
73190: LD_INT 3
73192: NEG
73193: PUSH
73194: LD_INT 2
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: PUSH
73201: EMPTY
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: LIST
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: LIST
73247: ST_TO_ADDR
// end ; end ;
73248: GO 73251
73250: POP
// case btype of b_depot , b_warehouse :
73251: LD_VAR 0 1
73255: PUSH
73256: LD_INT 0
73258: DOUBLE
73259: EQUAL
73260: IFTRUE 73270
73262: LD_INT 1
73264: DOUBLE
73265: EQUAL
73266: IFTRUE 73270
73268: GO 73471
73270: POP
// case nation of nation_american :
73271: LD_VAR 0 5
73275: PUSH
73276: LD_INT 1
73278: DOUBLE
73279: EQUAL
73280: IFTRUE 73284
73282: GO 73340
73284: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73285: LD_ADDR_VAR 0 9
73289: PUSH
73290: LD_VAR 0 11
73294: PUSH
73295: LD_VAR 0 12
73299: PUSH
73300: LD_VAR 0 13
73304: PUSH
73305: LD_VAR 0 14
73309: PUSH
73310: LD_VAR 0 15
73314: PUSH
73315: LD_VAR 0 16
73319: PUSH
73320: EMPTY
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: PUSH
73328: LD_VAR 0 4
73332: PUSH
73333: LD_INT 1
73335: PLUS
73336: ARRAY
73337: ST_TO_ADDR
73338: GO 73469
73340: LD_INT 2
73342: DOUBLE
73343: EQUAL
73344: IFTRUE 73348
73346: GO 73404
73348: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73349: LD_ADDR_VAR 0 9
73353: PUSH
73354: LD_VAR 0 17
73358: PUSH
73359: LD_VAR 0 18
73363: PUSH
73364: LD_VAR 0 19
73368: PUSH
73369: LD_VAR 0 20
73373: PUSH
73374: LD_VAR 0 21
73378: PUSH
73379: LD_VAR 0 22
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: LIST
73388: LIST
73389: LIST
73390: LIST
73391: PUSH
73392: LD_VAR 0 4
73396: PUSH
73397: LD_INT 1
73399: PLUS
73400: ARRAY
73401: ST_TO_ADDR
73402: GO 73469
73404: LD_INT 3
73406: DOUBLE
73407: EQUAL
73408: IFTRUE 73412
73410: GO 73468
73412: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73413: LD_ADDR_VAR 0 9
73417: PUSH
73418: LD_VAR 0 23
73422: PUSH
73423: LD_VAR 0 24
73427: PUSH
73428: LD_VAR 0 25
73432: PUSH
73433: LD_VAR 0 26
73437: PUSH
73438: LD_VAR 0 27
73442: PUSH
73443: LD_VAR 0 28
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: PUSH
73456: LD_VAR 0 4
73460: PUSH
73461: LD_INT 1
73463: PLUS
73464: ARRAY
73465: ST_TO_ADDR
73466: GO 73469
73468: POP
73469: GO 74024
73471: LD_INT 2
73473: DOUBLE
73474: EQUAL
73475: IFTRUE 73485
73477: LD_INT 3
73479: DOUBLE
73480: EQUAL
73481: IFTRUE 73485
73483: GO 73541
73485: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73486: LD_ADDR_VAR 0 9
73490: PUSH
73491: LD_VAR 0 29
73495: PUSH
73496: LD_VAR 0 30
73500: PUSH
73501: LD_VAR 0 31
73505: PUSH
73506: LD_VAR 0 32
73510: PUSH
73511: LD_VAR 0 33
73515: PUSH
73516: LD_VAR 0 34
73520: PUSH
73521: EMPTY
73522: LIST
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: PUSH
73529: LD_VAR 0 4
73533: PUSH
73534: LD_INT 1
73536: PLUS
73537: ARRAY
73538: ST_TO_ADDR
73539: GO 74024
73541: LD_INT 16
73543: DOUBLE
73544: EQUAL
73545: IFTRUE 73603
73547: LD_INT 17
73549: DOUBLE
73550: EQUAL
73551: IFTRUE 73603
73553: LD_INT 18
73555: DOUBLE
73556: EQUAL
73557: IFTRUE 73603
73559: LD_INT 19
73561: DOUBLE
73562: EQUAL
73563: IFTRUE 73603
73565: LD_INT 22
73567: DOUBLE
73568: EQUAL
73569: IFTRUE 73603
73571: LD_INT 20
73573: DOUBLE
73574: EQUAL
73575: IFTRUE 73603
73577: LD_INT 21
73579: DOUBLE
73580: EQUAL
73581: IFTRUE 73603
73583: LD_INT 23
73585: DOUBLE
73586: EQUAL
73587: IFTRUE 73603
73589: LD_INT 24
73591: DOUBLE
73592: EQUAL
73593: IFTRUE 73603
73595: LD_INT 25
73597: DOUBLE
73598: EQUAL
73599: IFTRUE 73603
73601: GO 73659
73603: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73604: LD_ADDR_VAR 0 9
73608: PUSH
73609: LD_VAR 0 35
73613: PUSH
73614: LD_VAR 0 36
73618: PUSH
73619: LD_VAR 0 37
73623: PUSH
73624: LD_VAR 0 38
73628: PUSH
73629: LD_VAR 0 39
73633: PUSH
73634: LD_VAR 0 40
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: PUSH
73647: LD_VAR 0 4
73651: PUSH
73652: LD_INT 1
73654: PLUS
73655: ARRAY
73656: ST_TO_ADDR
73657: GO 74024
73659: LD_INT 6
73661: DOUBLE
73662: EQUAL
73663: IFTRUE 73715
73665: LD_INT 7
73667: DOUBLE
73668: EQUAL
73669: IFTRUE 73715
73671: LD_INT 8
73673: DOUBLE
73674: EQUAL
73675: IFTRUE 73715
73677: LD_INT 13
73679: DOUBLE
73680: EQUAL
73681: IFTRUE 73715
73683: LD_INT 12
73685: DOUBLE
73686: EQUAL
73687: IFTRUE 73715
73689: LD_INT 15
73691: DOUBLE
73692: EQUAL
73693: IFTRUE 73715
73695: LD_INT 11
73697: DOUBLE
73698: EQUAL
73699: IFTRUE 73715
73701: LD_INT 14
73703: DOUBLE
73704: EQUAL
73705: IFTRUE 73715
73707: LD_INT 10
73709: DOUBLE
73710: EQUAL
73711: IFTRUE 73715
73713: GO 73771
73715: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73716: LD_ADDR_VAR 0 9
73720: PUSH
73721: LD_VAR 0 41
73725: PUSH
73726: LD_VAR 0 42
73730: PUSH
73731: LD_VAR 0 43
73735: PUSH
73736: LD_VAR 0 44
73740: PUSH
73741: LD_VAR 0 45
73745: PUSH
73746: LD_VAR 0 46
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: PUSH
73759: LD_VAR 0 4
73763: PUSH
73764: LD_INT 1
73766: PLUS
73767: ARRAY
73768: ST_TO_ADDR
73769: GO 74024
73771: LD_INT 36
73773: DOUBLE
73774: EQUAL
73775: IFTRUE 73779
73777: GO 73835
73779: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73780: LD_ADDR_VAR 0 9
73784: PUSH
73785: LD_VAR 0 47
73789: PUSH
73790: LD_VAR 0 48
73794: PUSH
73795: LD_VAR 0 49
73799: PUSH
73800: LD_VAR 0 50
73804: PUSH
73805: LD_VAR 0 51
73809: PUSH
73810: LD_VAR 0 52
73814: PUSH
73815: EMPTY
73816: LIST
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: PUSH
73823: LD_VAR 0 4
73827: PUSH
73828: LD_INT 1
73830: PLUS
73831: ARRAY
73832: ST_TO_ADDR
73833: GO 74024
73835: LD_INT 4
73837: DOUBLE
73838: EQUAL
73839: IFTRUE 73861
73841: LD_INT 5
73843: DOUBLE
73844: EQUAL
73845: IFTRUE 73861
73847: LD_INT 34
73849: DOUBLE
73850: EQUAL
73851: IFTRUE 73861
73853: LD_INT 37
73855: DOUBLE
73856: EQUAL
73857: IFTRUE 73861
73859: GO 73917
73861: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73862: LD_ADDR_VAR 0 9
73866: PUSH
73867: LD_VAR 0 53
73871: PUSH
73872: LD_VAR 0 54
73876: PUSH
73877: LD_VAR 0 55
73881: PUSH
73882: LD_VAR 0 56
73886: PUSH
73887: LD_VAR 0 57
73891: PUSH
73892: LD_VAR 0 58
73896: PUSH
73897: EMPTY
73898: LIST
73899: LIST
73900: LIST
73901: LIST
73902: LIST
73903: LIST
73904: PUSH
73905: LD_VAR 0 4
73909: PUSH
73910: LD_INT 1
73912: PLUS
73913: ARRAY
73914: ST_TO_ADDR
73915: GO 74024
73917: LD_INT 31
73919: DOUBLE
73920: EQUAL
73921: IFTRUE 73967
73923: LD_INT 32
73925: DOUBLE
73926: EQUAL
73927: IFTRUE 73967
73929: LD_INT 33
73931: DOUBLE
73932: EQUAL
73933: IFTRUE 73967
73935: LD_INT 27
73937: DOUBLE
73938: EQUAL
73939: IFTRUE 73967
73941: LD_INT 26
73943: DOUBLE
73944: EQUAL
73945: IFTRUE 73967
73947: LD_INT 28
73949: DOUBLE
73950: EQUAL
73951: IFTRUE 73967
73953: LD_INT 29
73955: DOUBLE
73956: EQUAL
73957: IFTRUE 73967
73959: LD_INT 30
73961: DOUBLE
73962: EQUAL
73963: IFTRUE 73967
73965: GO 74023
73967: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73968: LD_ADDR_VAR 0 9
73972: PUSH
73973: LD_VAR 0 59
73977: PUSH
73978: LD_VAR 0 60
73982: PUSH
73983: LD_VAR 0 61
73987: PUSH
73988: LD_VAR 0 62
73992: PUSH
73993: LD_VAR 0 63
73997: PUSH
73998: LD_VAR 0 64
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: LIST
74007: LIST
74008: LIST
74009: LIST
74010: PUSH
74011: LD_VAR 0 4
74015: PUSH
74016: LD_INT 1
74018: PLUS
74019: ARRAY
74020: ST_TO_ADDR
74021: GO 74024
74023: POP
// temp_list2 = [ ] ;
74024: LD_ADDR_VAR 0 10
74028: PUSH
74029: EMPTY
74030: ST_TO_ADDR
// for i in temp_list do
74031: LD_ADDR_VAR 0 8
74035: PUSH
74036: LD_VAR 0 9
74040: PUSH
74041: FOR_IN
74042: IFFALSE 74094
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74044: LD_ADDR_VAR 0 10
74048: PUSH
74049: LD_VAR 0 10
74053: PUSH
74054: LD_VAR 0 8
74058: PUSH
74059: LD_INT 1
74061: ARRAY
74062: PUSH
74063: LD_VAR 0 2
74067: PLUS
74068: PUSH
74069: LD_VAR 0 8
74073: PUSH
74074: LD_INT 2
74076: ARRAY
74077: PUSH
74078: LD_VAR 0 3
74082: PLUS
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: PUSH
74088: EMPTY
74089: LIST
74090: ADD
74091: ST_TO_ADDR
74092: GO 74041
74094: POP
74095: POP
// result = temp_list2 ;
74096: LD_ADDR_VAR 0 7
74100: PUSH
74101: LD_VAR 0 10
74105: ST_TO_ADDR
// end ;
74106: LD_VAR 0 7
74110: RET
// export function EnemyInRange ( unit , dist ) ; begin
74111: LD_INT 0
74113: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74114: LD_ADDR_VAR 0 3
74118: PUSH
74119: LD_VAR 0 1
74123: PPUSH
74124: CALL_OW 255
74128: PPUSH
74129: LD_VAR 0 1
74133: PPUSH
74134: CALL_OW 250
74138: PPUSH
74139: LD_VAR 0 1
74143: PPUSH
74144: CALL_OW 251
74148: PPUSH
74149: LD_VAR 0 2
74153: PPUSH
74154: CALL 47484 0 4
74158: PUSH
74159: LD_INT 4
74161: ARRAY
74162: ST_TO_ADDR
// end ;
74163: LD_VAR 0 3
74167: RET
// export function PlayerSeeMe ( unit ) ; begin
74168: LD_INT 0
74170: PPUSH
// result := See ( your_side , unit ) ;
74171: LD_ADDR_VAR 0 2
74175: PUSH
74176: LD_OWVAR 2
74180: PPUSH
74181: LD_VAR 0 1
74185: PPUSH
74186: CALL_OW 292
74190: ST_TO_ADDR
// end ;
74191: LD_VAR 0 2
74195: RET
// export function ReverseDir ( unit ) ; begin
74196: LD_INT 0
74198: PPUSH
// if not unit then
74199: LD_VAR 0 1
74203: NOT
74204: IFFALSE 74208
// exit ;
74206: GO 74231
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74208: LD_ADDR_VAR 0 2
74212: PUSH
74213: LD_VAR 0 1
74217: PPUSH
74218: CALL_OW 254
74222: PUSH
74223: LD_INT 3
74225: PLUS
74226: PUSH
74227: LD_INT 6
74229: MOD
74230: ST_TO_ADDR
// end ;
74231: LD_VAR 0 2
74235: RET
// export function ReverseArray ( array ) ; var i ; begin
74236: LD_INT 0
74238: PPUSH
74239: PPUSH
// if not array then
74240: LD_VAR 0 1
74244: NOT
74245: IFFALSE 74249
// exit ;
74247: GO 74304
// result := [ ] ;
74249: LD_ADDR_VAR 0 2
74253: PUSH
74254: EMPTY
74255: ST_TO_ADDR
// for i := array downto 1 do
74256: LD_ADDR_VAR 0 3
74260: PUSH
74261: DOUBLE
74262: LD_VAR 0 1
74266: INC
74267: ST_TO_ADDR
74268: LD_INT 1
74270: PUSH
74271: FOR_DOWNTO
74272: IFFALSE 74302
// result := Join ( result , array [ i ] ) ;
74274: LD_ADDR_VAR 0 2
74278: PUSH
74279: LD_VAR 0 2
74283: PPUSH
74284: LD_VAR 0 1
74288: PUSH
74289: LD_VAR 0 3
74293: ARRAY
74294: PPUSH
74295: CALL 78969 0 2
74299: ST_TO_ADDR
74300: GO 74271
74302: POP
74303: POP
// end ;
74304: LD_VAR 0 2
74308: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74309: LD_INT 0
74311: PPUSH
74312: PPUSH
74313: PPUSH
74314: PPUSH
74315: PPUSH
74316: PPUSH
// if not unit or not hexes then
74317: LD_VAR 0 1
74321: NOT
74322: PUSH
74323: LD_VAR 0 2
74327: NOT
74328: OR
74329: IFFALSE 74333
// exit ;
74331: GO 74456
// dist := 9999 ;
74333: LD_ADDR_VAR 0 5
74337: PUSH
74338: LD_INT 9999
74340: ST_TO_ADDR
// for i = 1 to hexes do
74341: LD_ADDR_VAR 0 4
74345: PUSH
74346: DOUBLE
74347: LD_INT 1
74349: DEC
74350: ST_TO_ADDR
74351: LD_VAR 0 2
74355: PUSH
74356: FOR_TO
74357: IFFALSE 74444
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74359: LD_ADDR_VAR 0 6
74363: PUSH
74364: LD_VAR 0 1
74368: PPUSH
74369: LD_VAR 0 2
74373: PUSH
74374: LD_VAR 0 4
74378: ARRAY
74379: PUSH
74380: LD_INT 1
74382: ARRAY
74383: PPUSH
74384: LD_VAR 0 2
74388: PUSH
74389: LD_VAR 0 4
74393: ARRAY
74394: PUSH
74395: LD_INT 2
74397: ARRAY
74398: PPUSH
74399: CALL_OW 297
74403: ST_TO_ADDR
// if tdist < dist then
74404: LD_VAR 0 6
74408: PUSH
74409: LD_VAR 0 5
74413: LESS
74414: IFFALSE 74442
// begin hex := hexes [ i ] ;
74416: LD_ADDR_VAR 0 8
74420: PUSH
74421: LD_VAR 0 2
74425: PUSH
74426: LD_VAR 0 4
74430: ARRAY
74431: ST_TO_ADDR
// dist := tdist ;
74432: LD_ADDR_VAR 0 5
74436: PUSH
74437: LD_VAR 0 6
74441: ST_TO_ADDR
// end ; end ;
74442: GO 74356
74444: POP
74445: POP
// result := hex ;
74446: LD_ADDR_VAR 0 3
74450: PUSH
74451: LD_VAR 0 8
74455: ST_TO_ADDR
// end ;
74456: LD_VAR 0 3
74460: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74461: LD_INT 0
74463: PPUSH
74464: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74465: LD_VAR 0 1
74469: NOT
74470: PUSH
74471: LD_VAR 0 1
74475: PUSH
74476: LD_INT 21
74478: PUSH
74479: LD_INT 2
74481: PUSH
74482: EMPTY
74483: LIST
74484: LIST
74485: PUSH
74486: LD_INT 23
74488: PUSH
74489: LD_INT 2
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: PUSH
74496: EMPTY
74497: LIST
74498: LIST
74499: PPUSH
74500: CALL_OW 69
74504: IN
74505: NOT
74506: OR
74507: IFFALSE 74511
// exit ;
74509: GO 74558
// for i = 1 to 3 do
74511: LD_ADDR_VAR 0 3
74515: PUSH
74516: DOUBLE
74517: LD_INT 1
74519: DEC
74520: ST_TO_ADDR
74521: LD_INT 3
74523: PUSH
74524: FOR_TO
74525: IFFALSE 74556
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74527: LD_VAR 0 1
74531: PPUSH
74532: CALL_OW 250
74536: PPUSH
74537: LD_VAR 0 1
74541: PPUSH
74542: CALL_OW 251
74546: PPUSH
74547: LD_INT 1
74549: PPUSH
74550: CALL_OW 453
74554: GO 74524
74556: POP
74557: POP
// end ;
74558: LD_VAR 0 2
74562: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74563: LD_INT 0
74565: PPUSH
74566: PPUSH
74567: PPUSH
74568: PPUSH
74569: PPUSH
74570: PPUSH
// if not unit or not enemy_unit then
74571: LD_VAR 0 1
74575: NOT
74576: PUSH
74577: LD_VAR 0 2
74581: NOT
74582: OR
74583: IFFALSE 74587
// exit ;
74585: GO 75054
// if GetLives ( i ) < 250 then
74587: LD_VAR 0 4
74591: PPUSH
74592: CALL_OW 256
74596: PUSH
74597: LD_INT 250
74599: LESS
74600: IFFALSE 74613
// begin ComAutodestruct ( i ) ;
74602: LD_VAR 0 4
74606: PPUSH
74607: CALL 74461 0 1
// exit ;
74611: GO 75054
// end ; x := GetX ( enemy_unit ) ;
74613: LD_ADDR_VAR 0 7
74617: PUSH
74618: LD_VAR 0 2
74622: PPUSH
74623: CALL_OW 250
74627: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74628: LD_ADDR_VAR 0 8
74632: PUSH
74633: LD_VAR 0 2
74637: PPUSH
74638: CALL_OW 251
74642: ST_TO_ADDR
// if not x or not y then
74643: LD_VAR 0 7
74647: NOT
74648: PUSH
74649: LD_VAR 0 8
74653: NOT
74654: OR
74655: IFFALSE 74659
// exit ;
74657: GO 75054
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74659: LD_ADDR_VAR 0 6
74663: PUSH
74664: LD_VAR 0 7
74668: PPUSH
74669: LD_INT 0
74671: PPUSH
74672: LD_INT 4
74674: PPUSH
74675: CALL_OW 272
74679: PUSH
74680: LD_VAR 0 8
74684: PPUSH
74685: LD_INT 0
74687: PPUSH
74688: LD_INT 4
74690: PPUSH
74691: CALL_OW 273
74695: PUSH
74696: EMPTY
74697: LIST
74698: LIST
74699: PUSH
74700: LD_VAR 0 7
74704: PPUSH
74705: LD_INT 1
74707: PPUSH
74708: LD_INT 4
74710: PPUSH
74711: CALL_OW 272
74715: PUSH
74716: LD_VAR 0 8
74720: PPUSH
74721: LD_INT 1
74723: PPUSH
74724: LD_INT 4
74726: PPUSH
74727: CALL_OW 273
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: PUSH
74736: LD_VAR 0 7
74740: PPUSH
74741: LD_INT 2
74743: PPUSH
74744: LD_INT 4
74746: PPUSH
74747: CALL_OW 272
74751: PUSH
74752: LD_VAR 0 8
74756: PPUSH
74757: LD_INT 2
74759: PPUSH
74760: LD_INT 4
74762: PPUSH
74763: CALL_OW 273
74767: PUSH
74768: EMPTY
74769: LIST
74770: LIST
74771: PUSH
74772: LD_VAR 0 7
74776: PPUSH
74777: LD_INT 3
74779: PPUSH
74780: LD_INT 4
74782: PPUSH
74783: CALL_OW 272
74787: PUSH
74788: LD_VAR 0 8
74792: PPUSH
74793: LD_INT 3
74795: PPUSH
74796: LD_INT 4
74798: PPUSH
74799: CALL_OW 273
74803: PUSH
74804: EMPTY
74805: LIST
74806: LIST
74807: PUSH
74808: LD_VAR 0 7
74812: PPUSH
74813: LD_INT 4
74815: PPUSH
74816: LD_INT 4
74818: PPUSH
74819: CALL_OW 272
74823: PUSH
74824: LD_VAR 0 8
74828: PPUSH
74829: LD_INT 4
74831: PPUSH
74832: LD_INT 4
74834: PPUSH
74835: CALL_OW 273
74839: PUSH
74840: EMPTY
74841: LIST
74842: LIST
74843: PUSH
74844: LD_VAR 0 7
74848: PPUSH
74849: LD_INT 5
74851: PPUSH
74852: LD_INT 4
74854: PPUSH
74855: CALL_OW 272
74859: PUSH
74860: LD_VAR 0 8
74864: PPUSH
74865: LD_INT 5
74867: PPUSH
74868: LD_INT 4
74870: PPUSH
74871: CALL_OW 273
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: PUSH
74880: EMPTY
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: ST_TO_ADDR
// for i = tmp downto 1 do
74888: LD_ADDR_VAR 0 4
74892: PUSH
74893: DOUBLE
74894: LD_VAR 0 6
74898: INC
74899: ST_TO_ADDR
74900: LD_INT 1
74902: PUSH
74903: FOR_DOWNTO
74904: IFFALSE 75005
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74906: LD_VAR 0 6
74910: PUSH
74911: LD_VAR 0 4
74915: ARRAY
74916: PUSH
74917: LD_INT 1
74919: ARRAY
74920: PPUSH
74921: LD_VAR 0 6
74925: PUSH
74926: LD_VAR 0 4
74930: ARRAY
74931: PUSH
74932: LD_INT 2
74934: ARRAY
74935: PPUSH
74936: CALL_OW 488
74940: NOT
74941: PUSH
74942: LD_VAR 0 6
74946: PUSH
74947: LD_VAR 0 4
74951: ARRAY
74952: PUSH
74953: LD_INT 1
74955: ARRAY
74956: PPUSH
74957: LD_VAR 0 6
74961: PUSH
74962: LD_VAR 0 4
74966: ARRAY
74967: PUSH
74968: LD_INT 2
74970: ARRAY
74971: PPUSH
74972: CALL_OW 428
74976: PUSH
74977: LD_INT 0
74979: NONEQUAL
74980: OR
74981: IFFALSE 75003
// tmp := Delete ( tmp , i ) ;
74983: LD_ADDR_VAR 0 6
74987: PUSH
74988: LD_VAR 0 6
74992: PPUSH
74993: LD_VAR 0 4
74997: PPUSH
74998: CALL_OW 3
75002: ST_TO_ADDR
75003: GO 74903
75005: POP
75006: POP
// j := GetClosestHex ( unit , tmp ) ;
75007: LD_ADDR_VAR 0 5
75011: PUSH
75012: LD_VAR 0 1
75016: PPUSH
75017: LD_VAR 0 6
75021: PPUSH
75022: CALL 74309 0 2
75026: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75027: LD_VAR 0 1
75031: PPUSH
75032: LD_VAR 0 5
75036: PUSH
75037: LD_INT 1
75039: ARRAY
75040: PPUSH
75041: LD_VAR 0 5
75045: PUSH
75046: LD_INT 2
75048: ARRAY
75049: PPUSH
75050: CALL_OW 111
// end ;
75054: LD_VAR 0 3
75058: RET
// export function PrepareApemanSoldier ( ) ; begin
75059: LD_INT 0
75061: PPUSH
// uc_nation := 0 ;
75062: LD_ADDR_OWVAR 21
75066: PUSH
75067: LD_INT 0
75069: ST_TO_ADDR
// hc_sex := sex_male ;
75070: LD_ADDR_OWVAR 27
75074: PUSH
75075: LD_INT 1
75077: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75078: LD_ADDR_OWVAR 28
75082: PUSH
75083: LD_INT 15
75085: ST_TO_ADDR
// hc_gallery :=  ;
75086: LD_ADDR_OWVAR 33
75090: PUSH
75091: LD_STRING 
75093: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75094: LD_ADDR_OWVAR 31
75098: PUSH
75099: LD_INT 0
75101: PPUSH
75102: LD_INT 3
75104: PPUSH
75105: CALL_OW 12
75109: PUSH
75110: LD_INT 0
75112: PPUSH
75113: LD_INT 3
75115: PPUSH
75116: CALL_OW 12
75120: PUSH
75121: LD_INT 0
75123: PUSH
75124: LD_INT 0
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: ST_TO_ADDR
// end ;
75133: LD_VAR 0 1
75137: RET
// export function PrepareApemanEngineer ( ) ; begin
75138: LD_INT 0
75140: PPUSH
// uc_nation := 0 ;
75141: LD_ADDR_OWVAR 21
75145: PUSH
75146: LD_INT 0
75148: ST_TO_ADDR
// hc_sex := sex_male ;
75149: LD_ADDR_OWVAR 27
75153: PUSH
75154: LD_INT 1
75156: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75157: LD_ADDR_OWVAR 28
75161: PUSH
75162: LD_INT 16
75164: ST_TO_ADDR
// hc_gallery :=  ;
75165: LD_ADDR_OWVAR 33
75169: PUSH
75170: LD_STRING 
75172: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75173: LD_ADDR_OWVAR 31
75177: PUSH
75178: LD_INT 0
75180: PPUSH
75181: LD_INT 3
75183: PPUSH
75184: CALL_OW 12
75188: PUSH
75189: LD_INT 0
75191: PPUSH
75192: LD_INT 3
75194: PPUSH
75195: CALL_OW 12
75199: PUSH
75200: LD_INT 0
75202: PUSH
75203: LD_INT 0
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: LIST
75210: LIST
75211: ST_TO_ADDR
// end ;
75212: LD_VAR 0 1
75216: RET
// export function PrepareApeman ( agressivity ) ; begin
75217: LD_INT 0
75219: PPUSH
// uc_side := 0 ;
75220: LD_ADDR_OWVAR 20
75224: PUSH
75225: LD_INT 0
75227: ST_TO_ADDR
// uc_nation := 0 ;
75228: LD_ADDR_OWVAR 21
75232: PUSH
75233: LD_INT 0
75235: ST_TO_ADDR
// hc_sex := sex_male ;
75236: LD_ADDR_OWVAR 27
75240: PUSH
75241: LD_INT 1
75243: ST_TO_ADDR
// hc_class := class_apeman ;
75244: LD_ADDR_OWVAR 28
75248: PUSH
75249: LD_INT 12
75251: ST_TO_ADDR
// hc_gallery :=  ;
75252: LD_ADDR_OWVAR 33
75256: PUSH
75257: LD_STRING 
75259: ST_TO_ADDR
// if agressivity = 0 then
75260: LD_VAR 0 1
75264: PUSH
75265: LD_INT 0
75267: EQUAL
75268: IFFALSE 75280
// hc_agressivity := 0 else
75270: LD_ADDR_OWVAR 35
75274: PUSH
75275: LD_INT 0
75277: ST_TO_ADDR
75278: GO 75301
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75280: LD_ADDR_OWVAR 35
75284: PUSH
75285: LD_VAR 0 1
75289: NEG
75290: PPUSH
75291: LD_VAR 0 1
75295: PPUSH
75296: CALL_OW 12
75300: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75301: LD_ADDR_OWVAR 31
75305: PUSH
75306: LD_INT 0
75308: PPUSH
75309: LD_INT 3
75311: PPUSH
75312: CALL_OW 12
75316: PUSH
75317: LD_INT 0
75319: PPUSH
75320: LD_INT 3
75322: PPUSH
75323: CALL_OW 12
75327: PUSH
75328: LD_INT 0
75330: PUSH
75331: LD_INT 0
75333: PUSH
75334: EMPTY
75335: LIST
75336: LIST
75337: LIST
75338: LIST
75339: ST_TO_ADDR
// end ;
75340: LD_VAR 0 2
75344: RET
// export function PrepareTiger ( agressivity ) ; begin
75345: LD_INT 0
75347: PPUSH
// uc_side := 0 ;
75348: LD_ADDR_OWVAR 20
75352: PUSH
75353: LD_INT 0
75355: ST_TO_ADDR
// uc_nation := 0 ;
75356: LD_ADDR_OWVAR 21
75360: PUSH
75361: LD_INT 0
75363: ST_TO_ADDR
// hc_class := class_tiger ;
75364: LD_ADDR_OWVAR 28
75368: PUSH
75369: LD_INT 14
75371: ST_TO_ADDR
// hc_gallery :=  ;
75372: LD_ADDR_OWVAR 33
75376: PUSH
75377: LD_STRING 
75379: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75380: LD_ADDR_OWVAR 35
75384: PUSH
75385: LD_VAR 0 1
75389: NEG
75390: PPUSH
75391: LD_VAR 0 1
75395: PPUSH
75396: CALL_OW 12
75400: ST_TO_ADDR
// end ;
75401: LD_VAR 0 2
75405: RET
// export function PrepareEnchidna ( ) ; begin
75406: LD_INT 0
75408: PPUSH
// uc_side := 0 ;
75409: LD_ADDR_OWVAR 20
75413: PUSH
75414: LD_INT 0
75416: ST_TO_ADDR
// uc_nation := 0 ;
75417: LD_ADDR_OWVAR 21
75421: PUSH
75422: LD_INT 0
75424: ST_TO_ADDR
// hc_class := class_baggie ;
75425: LD_ADDR_OWVAR 28
75429: PUSH
75430: LD_INT 13
75432: ST_TO_ADDR
// hc_gallery :=  ;
75433: LD_ADDR_OWVAR 33
75437: PUSH
75438: LD_STRING 
75440: ST_TO_ADDR
// end ;
75441: LD_VAR 0 1
75445: RET
// export function PrepareFrog ( ) ; begin
75446: LD_INT 0
75448: PPUSH
// uc_side := 0 ;
75449: LD_ADDR_OWVAR 20
75453: PUSH
75454: LD_INT 0
75456: ST_TO_ADDR
// uc_nation := 0 ;
75457: LD_ADDR_OWVAR 21
75461: PUSH
75462: LD_INT 0
75464: ST_TO_ADDR
// hc_class := class_frog ;
75465: LD_ADDR_OWVAR 28
75469: PUSH
75470: LD_INT 19
75472: ST_TO_ADDR
// hc_gallery :=  ;
75473: LD_ADDR_OWVAR 33
75477: PUSH
75478: LD_STRING 
75480: ST_TO_ADDR
// end ;
75481: LD_VAR 0 1
75485: RET
// export function PrepareFish ( ) ; begin
75486: LD_INT 0
75488: PPUSH
// uc_side := 0 ;
75489: LD_ADDR_OWVAR 20
75493: PUSH
75494: LD_INT 0
75496: ST_TO_ADDR
// uc_nation := 0 ;
75497: LD_ADDR_OWVAR 21
75501: PUSH
75502: LD_INT 0
75504: ST_TO_ADDR
// hc_class := class_fish ;
75505: LD_ADDR_OWVAR 28
75509: PUSH
75510: LD_INT 20
75512: ST_TO_ADDR
// hc_gallery :=  ;
75513: LD_ADDR_OWVAR 33
75517: PUSH
75518: LD_STRING 
75520: ST_TO_ADDR
// end ;
75521: LD_VAR 0 1
75525: RET
// export function PrepareBird ( ) ; begin
75526: LD_INT 0
75528: PPUSH
// uc_side := 0 ;
75529: LD_ADDR_OWVAR 20
75533: PUSH
75534: LD_INT 0
75536: ST_TO_ADDR
// uc_nation := 0 ;
75537: LD_ADDR_OWVAR 21
75541: PUSH
75542: LD_INT 0
75544: ST_TO_ADDR
// hc_class := class_phororhacos ;
75545: LD_ADDR_OWVAR 28
75549: PUSH
75550: LD_INT 18
75552: ST_TO_ADDR
// hc_gallery :=  ;
75553: LD_ADDR_OWVAR 33
75557: PUSH
75558: LD_STRING 
75560: ST_TO_ADDR
// end ;
75561: LD_VAR 0 1
75565: RET
// export function PrepareHorse ( ) ; begin
75566: LD_INT 0
75568: PPUSH
// uc_side := 0 ;
75569: LD_ADDR_OWVAR 20
75573: PUSH
75574: LD_INT 0
75576: ST_TO_ADDR
// uc_nation := 0 ;
75577: LD_ADDR_OWVAR 21
75581: PUSH
75582: LD_INT 0
75584: ST_TO_ADDR
// hc_class := class_horse ;
75585: LD_ADDR_OWVAR 28
75589: PUSH
75590: LD_INT 21
75592: ST_TO_ADDR
// hc_gallery :=  ;
75593: LD_ADDR_OWVAR 33
75597: PUSH
75598: LD_STRING 
75600: ST_TO_ADDR
// end ;
75601: LD_VAR 0 1
75605: RET
// export function PrepareMastodont ( ) ; begin
75606: LD_INT 0
75608: PPUSH
// uc_side := 0 ;
75609: LD_ADDR_OWVAR 20
75613: PUSH
75614: LD_INT 0
75616: ST_TO_ADDR
// uc_nation := 0 ;
75617: LD_ADDR_OWVAR 21
75621: PUSH
75622: LD_INT 0
75624: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75625: LD_ADDR_OWVAR 37
75629: PUSH
75630: LD_INT 31
75632: ST_TO_ADDR
// vc_control := control_rider ;
75633: LD_ADDR_OWVAR 38
75637: PUSH
75638: LD_INT 4
75640: ST_TO_ADDR
// end ;
75641: LD_VAR 0 1
75645: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75646: LD_INT 0
75648: PPUSH
75649: PPUSH
75650: PPUSH
// uc_side = 0 ;
75651: LD_ADDR_OWVAR 20
75655: PUSH
75656: LD_INT 0
75658: ST_TO_ADDR
// uc_nation = 0 ;
75659: LD_ADDR_OWVAR 21
75663: PUSH
75664: LD_INT 0
75666: ST_TO_ADDR
// InitHc_All ( ) ;
75667: CALL_OW 584
// InitVc ;
75671: CALL_OW 20
// if mastodonts then
75675: LD_VAR 0 6
75679: IFFALSE 75746
// for i = 1 to mastodonts do
75681: LD_ADDR_VAR 0 11
75685: PUSH
75686: DOUBLE
75687: LD_INT 1
75689: DEC
75690: ST_TO_ADDR
75691: LD_VAR 0 6
75695: PUSH
75696: FOR_TO
75697: IFFALSE 75744
// begin vc_chassis := 31 ;
75699: LD_ADDR_OWVAR 37
75703: PUSH
75704: LD_INT 31
75706: ST_TO_ADDR
// vc_control := control_rider ;
75707: LD_ADDR_OWVAR 38
75711: PUSH
75712: LD_INT 4
75714: ST_TO_ADDR
// animal := CreateVehicle ;
75715: LD_ADDR_VAR 0 12
75719: PUSH
75720: CALL_OW 45
75724: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75725: LD_VAR 0 12
75729: PPUSH
75730: LD_VAR 0 8
75734: PPUSH
75735: LD_INT 0
75737: PPUSH
75738: CALL 77874 0 3
// end ;
75742: GO 75696
75744: POP
75745: POP
// if horses then
75746: LD_VAR 0 5
75750: IFFALSE 75817
// for i = 1 to horses do
75752: LD_ADDR_VAR 0 11
75756: PUSH
75757: DOUBLE
75758: LD_INT 1
75760: DEC
75761: ST_TO_ADDR
75762: LD_VAR 0 5
75766: PUSH
75767: FOR_TO
75768: IFFALSE 75815
// begin hc_class := 21 ;
75770: LD_ADDR_OWVAR 28
75774: PUSH
75775: LD_INT 21
75777: ST_TO_ADDR
// hc_gallery :=  ;
75778: LD_ADDR_OWVAR 33
75782: PUSH
75783: LD_STRING 
75785: ST_TO_ADDR
// animal := CreateHuman ;
75786: LD_ADDR_VAR 0 12
75790: PUSH
75791: CALL_OW 44
75795: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75796: LD_VAR 0 12
75800: PPUSH
75801: LD_VAR 0 8
75805: PPUSH
75806: LD_INT 0
75808: PPUSH
75809: CALL 77874 0 3
// end ;
75813: GO 75767
75815: POP
75816: POP
// if birds then
75817: LD_VAR 0 1
75821: IFFALSE 75888
// for i = 1 to birds do
75823: LD_ADDR_VAR 0 11
75827: PUSH
75828: DOUBLE
75829: LD_INT 1
75831: DEC
75832: ST_TO_ADDR
75833: LD_VAR 0 1
75837: PUSH
75838: FOR_TO
75839: IFFALSE 75886
// begin hc_class := 18 ;
75841: LD_ADDR_OWVAR 28
75845: PUSH
75846: LD_INT 18
75848: ST_TO_ADDR
// hc_gallery =  ;
75849: LD_ADDR_OWVAR 33
75853: PUSH
75854: LD_STRING 
75856: ST_TO_ADDR
// animal := CreateHuman ;
75857: LD_ADDR_VAR 0 12
75861: PUSH
75862: CALL_OW 44
75866: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75867: LD_VAR 0 12
75871: PPUSH
75872: LD_VAR 0 8
75876: PPUSH
75877: LD_INT 0
75879: PPUSH
75880: CALL 77874 0 3
// end ;
75884: GO 75838
75886: POP
75887: POP
// if tigers then
75888: LD_VAR 0 2
75892: IFFALSE 75976
// for i = 1 to tigers do
75894: LD_ADDR_VAR 0 11
75898: PUSH
75899: DOUBLE
75900: LD_INT 1
75902: DEC
75903: ST_TO_ADDR
75904: LD_VAR 0 2
75908: PUSH
75909: FOR_TO
75910: IFFALSE 75974
// begin hc_class = class_tiger ;
75912: LD_ADDR_OWVAR 28
75916: PUSH
75917: LD_INT 14
75919: ST_TO_ADDR
// hc_gallery =  ;
75920: LD_ADDR_OWVAR 33
75924: PUSH
75925: LD_STRING 
75927: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75928: LD_ADDR_OWVAR 35
75932: PUSH
75933: LD_INT 7
75935: NEG
75936: PPUSH
75937: LD_INT 7
75939: PPUSH
75940: CALL_OW 12
75944: ST_TO_ADDR
// animal := CreateHuman ;
75945: LD_ADDR_VAR 0 12
75949: PUSH
75950: CALL_OW 44
75954: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75955: LD_VAR 0 12
75959: PPUSH
75960: LD_VAR 0 8
75964: PPUSH
75965: LD_INT 0
75967: PPUSH
75968: CALL 77874 0 3
// end ;
75972: GO 75909
75974: POP
75975: POP
// if apemans then
75976: LD_VAR 0 3
75980: IFFALSE 76103
// for i = 1 to apemans do
75982: LD_ADDR_VAR 0 11
75986: PUSH
75987: DOUBLE
75988: LD_INT 1
75990: DEC
75991: ST_TO_ADDR
75992: LD_VAR 0 3
75996: PUSH
75997: FOR_TO
75998: IFFALSE 76101
// begin hc_class = class_apeman ;
76000: LD_ADDR_OWVAR 28
76004: PUSH
76005: LD_INT 12
76007: ST_TO_ADDR
// hc_gallery =  ;
76008: LD_ADDR_OWVAR 33
76012: PUSH
76013: LD_STRING 
76015: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76016: LD_ADDR_OWVAR 35
76020: PUSH
76021: LD_INT 2
76023: NEG
76024: PPUSH
76025: LD_INT 2
76027: PPUSH
76028: CALL_OW 12
76032: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76033: LD_ADDR_OWVAR 31
76037: PUSH
76038: LD_INT 1
76040: PPUSH
76041: LD_INT 3
76043: PPUSH
76044: CALL_OW 12
76048: PUSH
76049: LD_INT 1
76051: PPUSH
76052: LD_INT 3
76054: PPUSH
76055: CALL_OW 12
76059: PUSH
76060: LD_INT 0
76062: PUSH
76063: LD_INT 0
76065: PUSH
76066: EMPTY
76067: LIST
76068: LIST
76069: LIST
76070: LIST
76071: ST_TO_ADDR
// animal := CreateHuman ;
76072: LD_ADDR_VAR 0 12
76076: PUSH
76077: CALL_OW 44
76081: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76082: LD_VAR 0 12
76086: PPUSH
76087: LD_VAR 0 8
76091: PPUSH
76092: LD_INT 0
76094: PPUSH
76095: CALL 77874 0 3
// end ;
76099: GO 75997
76101: POP
76102: POP
// if enchidnas then
76103: LD_VAR 0 4
76107: IFFALSE 76174
// for i = 1 to enchidnas do
76109: LD_ADDR_VAR 0 11
76113: PUSH
76114: DOUBLE
76115: LD_INT 1
76117: DEC
76118: ST_TO_ADDR
76119: LD_VAR 0 4
76123: PUSH
76124: FOR_TO
76125: IFFALSE 76172
// begin hc_class = 13 ;
76127: LD_ADDR_OWVAR 28
76131: PUSH
76132: LD_INT 13
76134: ST_TO_ADDR
// hc_gallery =  ;
76135: LD_ADDR_OWVAR 33
76139: PUSH
76140: LD_STRING 
76142: ST_TO_ADDR
// animal := CreateHuman ;
76143: LD_ADDR_VAR 0 12
76147: PUSH
76148: CALL_OW 44
76152: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76153: LD_VAR 0 12
76157: PPUSH
76158: LD_VAR 0 8
76162: PPUSH
76163: LD_INT 0
76165: PPUSH
76166: CALL 77874 0 3
// end ;
76170: GO 76124
76172: POP
76173: POP
// if fishes then
76174: LD_VAR 0 7
76178: IFFALSE 76245
// for i = 1 to fishes do
76180: LD_ADDR_VAR 0 11
76184: PUSH
76185: DOUBLE
76186: LD_INT 1
76188: DEC
76189: ST_TO_ADDR
76190: LD_VAR 0 7
76194: PUSH
76195: FOR_TO
76196: IFFALSE 76243
// begin hc_class = 20 ;
76198: LD_ADDR_OWVAR 28
76202: PUSH
76203: LD_INT 20
76205: ST_TO_ADDR
// hc_gallery =  ;
76206: LD_ADDR_OWVAR 33
76210: PUSH
76211: LD_STRING 
76213: ST_TO_ADDR
// animal := CreateHuman ;
76214: LD_ADDR_VAR 0 12
76218: PUSH
76219: CALL_OW 44
76223: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76224: LD_VAR 0 12
76228: PPUSH
76229: LD_VAR 0 9
76233: PPUSH
76234: LD_INT 0
76236: PPUSH
76237: CALL 77874 0 3
// end ;
76241: GO 76195
76243: POP
76244: POP
// end ;
76245: LD_VAR 0 10
76249: RET
// export function WantHeal ( sci , unit ) ; begin
76250: LD_INT 0
76252: PPUSH
// if GetTaskList ( sci ) > 0 then
76253: LD_VAR 0 1
76257: PPUSH
76258: CALL_OW 437
76262: PUSH
76263: LD_INT 0
76265: GREATER
76266: IFFALSE 76336
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76268: LD_VAR 0 1
76272: PPUSH
76273: CALL_OW 437
76277: PUSH
76278: LD_INT 1
76280: ARRAY
76281: PUSH
76282: LD_INT 1
76284: ARRAY
76285: PUSH
76286: LD_STRING l
76288: EQUAL
76289: PUSH
76290: LD_VAR 0 1
76294: PPUSH
76295: CALL_OW 437
76299: PUSH
76300: LD_INT 1
76302: ARRAY
76303: PUSH
76304: LD_INT 4
76306: ARRAY
76307: PUSH
76308: LD_VAR 0 2
76312: EQUAL
76313: AND
76314: IFFALSE 76326
// result := true else
76316: LD_ADDR_VAR 0 3
76320: PUSH
76321: LD_INT 1
76323: ST_TO_ADDR
76324: GO 76334
// result := false ;
76326: LD_ADDR_VAR 0 3
76330: PUSH
76331: LD_INT 0
76333: ST_TO_ADDR
// end else
76334: GO 76344
// result := false ;
76336: LD_ADDR_VAR 0 3
76340: PUSH
76341: LD_INT 0
76343: ST_TO_ADDR
// end ;
76344: LD_VAR 0 3
76348: RET
// export function HealTarget ( sci ) ; begin
76349: LD_INT 0
76351: PPUSH
// if not sci then
76352: LD_VAR 0 1
76356: NOT
76357: IFFALSE 76361
// exit ;
76359: GO 76426
// result := 0 ;
76361: LD_ADDR_VAR 0 2
76365: PUSH
76366: LD_INT 0
76368: ST_TO_ADDR
// if GetTaskList ( sci ) then
76369: LD_VAR 0 1
76373: PPUSH
76374: CALL_OW 437
76378: IFFALSE 76426
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76380: LD_VAR 0 1
76384: PPUSH
76385: CALL_OW 437
76389: PUSH
76390: LD_INT 1
76392: ARRAY
76393: PUSH
76394: LD_INT 1
76396: ARRAY
76397: PUSH
76398: LD_STRING l
76400: EQUAL
76401: IFFALSE 76426
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76403: LD_ADDR_VAR 0 2
76407: PUSH
76408: LD_VAR 0 1
76412: PPUSH
76413: CALL_OW 437
76417: PUSH
76418: LD_INT 1
76420: ARRAY
76421: PUSH
76422: LD_INT 4
76424: ARRAY
76425: ST_TO_ADDR
// end ;
76426: LD_VAR 0 2
76430: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76431: LD_INT 0
76433: PPUSH
76434: PPUSH
76435: PPUSH
76436: PPUSH
// if not base_units then
76437: LD_VAR 0 1
76441: NOT
76442: IFFALSE 76446
// exit ;
76444: GO 76533
// result := false ;
76446: LD_ADDR_VAR 0 2
76450: PUSH
76451: LD_INT 0
76453: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76454: LD_ADDR_VAR 0 5
76458: PUSH
76459: LD_VAR 0 1
76463: PPUSH
76464: LD_INT 21
76466: PUSH
76467: LD_INT 3
76469: PUSH
76470: EMPTY
76471: LIST
76472: LIST
76473: PPUSH
76474: CALL_OW 72
76478: ST_TO_ADDR
// if not tmp then
76479: LD_VAR 0 5
76483: NOT
76484: IFFALSE 76488
// exit ;
76486: GO 76533
// for i in tmp do
76488: LD_ADDR_VAR 0 3
76492: PUSH
76493: LD_VAR 0 5
76497: PUSH
76498: FOR_IN
76499: IFFALSE 76531
// begin result := EnemyInRange ( i , 22 ) ;
76501: LD_ADDR_VAR 0 2
76505: PUSH
76506: LD_VAR 0 3
76510: PPUSH
76511: LD_INT 22
76513: PPUSH
76514: CALL 74111 0 2
76518: ST_TO_ADDR
// if result then
76519: LD_VAR 0 2
76523: IFFALSE 76529
// exit ;
76525: POP
76526: POP
76527: GO 76533
// end ;
76529: GO 76498
76531: POP
76532: POP
// end ;
76533: LD_VAR 0 2
76537: RET
// export function FilterByTag ( units , tag ) ; begin
76538: LD_INT 0
76540: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76541: LD_ADDR_VAR 0 3
76545: PUSH
76546: LD_VAR 0 1
76550: PPUSH
76551: LD_INT 120
76553: PUSH
76554: LD_VAR 0 2
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: PPUSH
76563: CALL_OW 72
76567: ST_TO_ADDR
// end ;
76568: LD_VAR 0 3
76572: RET
// export function IsDriver ( un ) ; begin
76573: LD_INT 0
76575: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76576: LD_ADDR_VAR 0 2
76580: PUSH
76581: LD_VAR 0 1
76585: PUSH
76586: LD_INT 55
76588: PUSH
76589: EMPTY
76590: LIST
76591: PPUSH
76592: CALL_OW 69
76596: IN
76597: ST_TO_ADDR
// end ;
76598: LD_VAR 0 2
76602: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76603: LD_INT 0
76605: PPUSH
76606: PPUSH
// list := [ ] ;
76607: LD_ADDR_VAR 0 5
76611: PUSH
76612: EMPTY
76613: ST_TO_ADDR
// case d of 0 :
76614: LD_VAR 0 3
76618: PUSH
76619: LD_INT 0
76621: DOUBLE
76622: EQUAL
76623: IFTRUE 76627
76625: GO 76760
76627: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76628: LD_ADDR_VAR 0 5
76632: PUSH
76633: LD_VAR 0 1
76637: PUSH
76638: LD_INT 4
76640: MINUS
76641: PUSH
76642: LD_VAR 0 2
76646: PUSH
76647: LD_INT 4
76649: MINUS
76650: PUSH
76651: LD_INT 2
76653: PUSH
76654: EMPTY
76655: LIST
76656: LIST
76657: LIST
76658: PUSH
76659: LD_VAR 0 1
76663: PUSH
76664: LD_INT 3
76666: MINUS
76667: PUSH
76668: LD_VAR 0 2
76672: PUSH
76673: LD_INT 1
76675: PUSH
76676: EMPTY
76677: LIST
76678: LIST
76679: LIST
76680: PUSH
76681: LD_VAR 0 1
76685: PUSH
76686: LD_INT 4
76688: PLUS
76689: PUSH
76690: LD_VAR 0 2
76694: PUSH
76695: LD_INT 4
76697: PUSH
76698: EMPTY
76699: LIST
76700: LIST
76701: LIST
76702: PUSH
76703: LD_VAR 0 1
76707: PUSH
76708: LD_INT 3
76710: PLUS
76711: PUSH
76712: LD_VAR 0 2
76716: PUSH
76717: LD_INT 3
76719: PLUS
76720: PUSH
76721: LD_INT 5
76723: PUSH
76724: EMPTY
76725: LIST
76726: LIST
76727: LIST
76728: PUSH
76729: LD_VAR 0 1
76733: PUSH
76734: LD_VAR 0 2
76738: PUSH
76739: LD_INT 4
76741: PLUS
76742: PUSH
76743: LD_INT 0
76745: PUSH
76746: EMPTY
76747: LIST
76748: LIST
76749: LIST
76750: PUSH
76751: EMPTY
76752: LIST
76753: LIST
76754: LIST
76755: LIST
76756: LIST
76757: ST_TO_ADDR
// end ; 1 :
76758: GO 77458
76760: LD_INT 1
76762: DOUBLE
76763: EQUAL
76764: IFTRUE 76768
76766: GO 76901
76768: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76769: LD_ADDR_VAR 0 5
76773: PUSH
76774: LD_VAR 0 1
76778: PUSH
76779: LD_VAR 0 2
76783: PUSH
76784: LD_INT 4
76786: MINUS
76787: PUSH
76788: LD_INT 3
76790: PUSH
76791: EMPTY
76792: LIST
76793: LIST
76794: LIST
76795: PUSH
76796: LD_VAR 0 1
76800: PUSH
76801: LD_INT 3
76803: MINUS
76804: PUSH
76805: LD_VAR 0 2
76809: PUSH
76810: LD_INT 3
76812: MINUS
76813: PUSH
76814: LD_INT 2
76816: PUSH
76817: EMPTY
76818: LIST
76819: LIST
76820: LIST
76821: PUSH
76822: LD_VAR 0 1
76826: PUSH
76827: LD_INT 4
76829: MINUS
76830: PUSH
76831: LD_VAR 0 2
76835: PUSH
76836: LD_INT 1
76838: PUSH
76839: EMPTY
76840: LIST
76841: LIST
76842: LIST
76843: PUSH
76844: LD_VAR 0 1
76848: PUSH
76849: LD_VAR 0 2
76853: PUSH
76854: LD_INT 3
76856: PLUS
76857: PUSH
76858: LD_INT 0
76860: PUSH
76861: EMPTY
76862: LIST
76863: LIST
76864: LIST
76865: PUSH
76866: LD_VAR 0 1
76870: PUSH
76871: LD_INT 4
76873: PLUS
76874: PUSH
76875: LD_VAR 0 2
76879: PUSH
76880: LD_INT 4
76882: PLUS
76883: PUSH
76884: LD_INT 5
76886: PUSH
76887: EMPTY
76888: LIST
76889: LIST
76890: LIST
76891: PUSH
76892: EMPTY
76893: LIST
76894: LIST
76895: LIST
76896: LIST
76897: LIST
76898: ST_TO_ADDR
// end ; 2 :
76899: GO 77458
76901: LD_INT 2
76903: DOUBLE
76904: EQUAL
76905: IFTRUE 76909
76907: GO 77038
76909: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76910: LD_ADDR_VAR 0 5
76914: PUSH
76915: LD_VAR 0 1
76919: PUSH
76920: LD_VAR 0 2
76924: PUSH
76925: LD_INT 3
76927: MINUS
76928: PUSH
76929: LD_INT 3
76931: PUSH
76932: EMPTY
76933: LIST
76934: LIST
76935: LIST
76936: PUSH
76937: LD_VAR 0 1
76941: PUSH
76942: LD_INT 4
76944: PLUS
76945: PUSH
76946: LD_VAR 0 2
76950: PUSH
76951: LD_INT 4
76953: PUSH
76954: EMPTY
76955: LIST
76956: LIST
76957: LIST
76958: PUSH
76959: LD_VAR 0 1
76963: PUSH
76964: LD_VAR 0 2
76968: PUSH
76969: LD_INT 4
76971: PLUS
76972: PUSH
76973: LD_INT 0
76975: PUSH
76976: EMPTY
76977: LIST
76978: LIST
76979: LIST
76980: PUSH
76981: LD_VAR 0 1
76985: PUSH
76986: LD_INT 3
76988: MINUS
76989: PUSH
76990: LD_VAR 0 2
76994: PUSH
76995: LD_INT 1
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: LIST
77002: PUSH
77003: LD_VAR 0 1
77007: PUSH
77008: LD_INT 4
77010: MINUS
77011: PUSH
77012: LD_VAR 0 2
77016: PUSH
77017: LD_INT 4
77019: MINUS
77020: PUSH
77021: LD_INT 2
77023: PUSH
77024: EMPTY
77025: LIST
77026: LIST
77027: LIST
77028: PUSH
77029: EMPTY
77030: LIST
77031: LIST
77032: LIST
77033: LIST
77034: LIST
77035: ST_TO_ADDR
// end ; 3 :
77036: GO 77458
77038: LD_INT 3
77040: DOUBLE
77041: EQUAL
77042: IFTRUE 77046
77044: GO 77179
77046: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77047: LD_ADDR_VAR 0 5
77051: PUSH
77052: LD_VAR 0 1
77056: PUSH
77057: LD_INT 3
77059: PLUS
77060: PUSH
77061: LD_VAR 0 2
77065: PUSH
77066: LD_INT 4
77068: PUSH
77069: EMPTY
77070: LIST
77071: LIST
77072: LIST
77073: PUSH
77074: LD_VAR 0 1
77078: PUSH
77079: LD_INT 4
77081: PLUS
77082: PUSH
77083: LD_VAR 0 2
77087: PUSH
77088: LD_INT 4
77090: PLUS
77091: PUSH
77092: LD_INT 5
77094: PUSH
77095: EMPTY
77096: LIST
77097: LIST
77098: LIST
77099: PUSH
77100: LD_VAR 0 1
77104: PUSH
77105: LD_INT 4
77107: MINUS
77108: PUSH
77109: LD_VAR 0 2
77113: PUSH
77114: LD_INT 1
77116: PUSH
77117: EMPTY
77118: LIST
77119: LIST
77120: LIST
77121: PUSH
77122: LD_VAR 0 1
77126: PUSH
77127: LD_VAR 0 2
77131: PUSH
77132: LD_INT 4
77134: MINUS
77135: PUSH
77136: LD_INT 3
77138: PUSH
77139: EMPTY
77140: LIST
77141: LIST
77142: LIST
77143: PUSH
77144: LD_VAR 0 1
77148: PUSH
77149: LD_INT 3
77151: MINUS
77152: PUSH
77153: LD_VAR 0 2
77157: PUSH
77158: LD_INT 3
77160: MINUS
77161: PUSH
77162: LD_INT 2
77164: PUSH
77165: EMPTY
77166: LIST
77167: LIST
77168: LIST
77169: PUSH
77170: EMPTY
77171: LIST
77172: LIST
77173: LIST
77174: LIST
77175: LIST
77176: ST_TO_ADDR
// end ; 4 :
77177: GO 77458
77179: LD_INT 4
77181: DOUBLE
77182: EQUAL
77183: IFTRUE 77187
77185: GO 77320
77187: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77188: LD_ADDR_VAR 0 5
77192: PUSH
77193: LD_VAR 0 1
77197: PUSH
77198: LD_VAR 0 2
77202: PUSH
77203: LD_INT 4
77205: PLUS
77206: PUSH
77207: LD_INT 0
77209: PUSH
77210: EMPTY
77211: LIST
77212: LIST
77213: LIST
77214: PUSH
77215: LD_VAR 0 1
77219: PUSH
77220: LD_INT 3
77222: PLUS
77223: PUSH
77224: LD_VAR 0 2
77228: PUSH
77229: LD_INT 3
77231: PLUS
77232: PUSH
77233: LD_INT 5
77235: PUSH
77236: EMPTY
77237: LIST
77238: LIST
77239: LIST
77240: PUSH
77241: LD_VAR 0 1
77245: PUSH
77246: LD_INT 4
77248: PLUS
77249: PUSH
77250: LD_VAR 0 2
77254: PUSH
77255: LD_INT 4
77257: PUSH
77258: EMPTY
77259: LIST
77260: LIST
77261: LIST
77262: PUSH
77263: LD_VAR 0 1
77267: PUSH
77268: LD_VAR 0 2
77272: PUSH
77273: LD_INT 3
77275: MINUS
77276: PUSH
77277: LD_INT 3
77279: PUSH
77280: EMPTY
77281: LIST
77282: LIST
77283: LIST
77284: PUSH
77285: LD_VAR 0 1
77289: PUSH
77290: LD_INT 4
77292: MINUS
77293: PUSH
77294: LD_VAR 0 2
77298: PUSH
77299: LD_INT 4
77301: MINUS
77302: PUSH
77303: LD_INT 2
77305: PUSH
77306: EMPTY
77307: LIST
77308: LIST
77309: LIST
77310: PUSH
77311: EMPTY
77312: LIST
77313: LIST
77314: LIST
77315: LIST
77316: LIST
77317: ST_TO_ADDR
// end ; 5 :
77318: GO 77458
77320: LD_INT 5
77322: DOUBLE
77323: EQUAL
77324: IFTRUE 77328
77326: GO 77457
77328: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77329: LD_ADDR_VAR 0 5
77333: PUSH
77334: LD_VAR 0 1
77338: PUSH
77339: LD_INT 4
77341: MINUS
77342: PUSH
77343: LD_VAR 0 2
77347: PUSH
77348: LD_INT 1
77350: PUSH
77351: EMPTY
77352: LIST
77353: LIST
77354: LIST
77355: PUSH
77356: LD_VAR 0 1
77360: PUSH
77361: LD_VAR 0 2
77365: PUSH
77366: LD_INT 4
77368: MINUS
77369: PUSH
77370: LD_INT 3
77372: PUSH
77373: EMPTY
77374: LIST
77375: LIST
77376: LIST
77377: PUSH
77378: LD_VAR 0 1
77382: PUSH
77383: LD_INT 4
77385: PLUS
77386: PUSH
77387: LD_VAR 0 2
77391: PUSH
77392: LD_INT 4
77394: PLUS
77395: PUSH
77396: LD_INT 5
77398: PUSH
77399: EMPTY
77400: LIST
77401: LIST
77402: LIST
77403: PUSH
77404: LD_VAR 0 1
77408: PUSH
77409: LD_INT 3
77411: PLUS
77412: PUSH
77413: LD_VAR 0 2
77417: PUSH
77418: LD_INT 4
77420: PUSH
77421: EMPTY
77422: LIST
77423: LIST
77424: LIST
77425: PUSH
77426: LD_VAR 0 1
77430: PUSH
77431: LD_VAR 0 2
77435: PUSH
77436: LD_INT 3
77438: PLUS
77439: PUSH
77440: LD_INT 0
77442: PUSH
77443: EMPTY
77444: LIST
77445: LIST
77446: LIST
77447: PUSH
77448: EMPTY
77449: LIST
77450: LIST
77451: LIST
77452: LIST
77453: LIST
77454: ST_TO_ADDR
// end ; end ;
77455: GO 77458
77457: POP
// result := list ;
77458: LD_ADDR_VAR 0 4
77462: PUSH
77463: LD_VAR 0 5
77467: ST_TO_ADDR
// end ;
77468: LD_VAR 0 4
77472: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77473: LD_INT 0
77475: PPUSH
77476: PPUSH
77477: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77478: LD_VAR 0 1
77482: NOT
77483: PUSH
77484: LD_VAR 0 2
77488: PUSH
77489: LD_INT 1
77491: PUSH
77492: LD_INT 2
77494: PUSH
77495: LD_INT 3
77497: PUSH
77498: LD_INT 4
77500: PUSH
77501: EMPTY
77502: LIST
77503: LIST
77504: LIST
77505: LIST
77506: IN
77507: NOT
77508: OR
77509: IFFALSE 77513
// exit ;
77511: GO 77596
// tmp := [ ] ;
77513: LD_ADDR_VAR 0 5
77517: PUSH
77518: EMPTY
77519: ST_TO_ADDR
// for i in units do
77520: LD_ADDR_VAR 0 4
77524: PUSH
77525: LD_VAR 0 1
77529: PUSH
77530: FOR_IN
77531: IFFALSE 77565
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77533: LD_ADDR_VAR 0 5
77537: PUSH
77538: LD_VAR 0 5
77542: PPUSH
77543: LD_VAR 0 4
77547: PPUSH
77548: LD_VAR 0 2
77552: PPUSH
77553: CALL_OW 259
77557: PPUSH
77558: CALL 78969 0 2
77562: ST_TO_ADDR
77563: GO 77530
77565: POP
77566: POP
// if not tmp then
77567: LD_VAR 0 5
77571: NOT
77572: IFFALSE 77576
// exit ;
77574: GO 77596
// result := SortListByListDesc ( units , tmp ) ;
77576: LD_ADDR_VAR 0 3
77580: PUSH
77581: LD_VAR 0 1
77585: PPUSH
77586: LD_VAR 0 5
77590: PPUSH
77591: CALL_OW 77
77595: ST_TO_ADDR
// end ;
77596: LD_VAR 0 3
77600: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77601: LD_INT 0
77603: PPUSH
77604: PPUSH
77605: PPUSH
// result := false ;
77606: LD_ADDR_VAR 0 3
77610: PUSH
77611: LD_INT 0
77613: ST_TO_ADDR
// if not building then
77614: LD_VAR 0 2
77618: NOT
77619: IFFALSE 77623
// exit ;
77621: GO 77761
// x := GetX ( building ) ;
77623: LD_ADDR_VAR 0 4
77627: PUSH
77628: LD_VAR 0 2
77632: PPUSH
77633: CALL_OW 250
77637: ST_TO_ADDR
// y := GetY ( building ) ;
77638: LD_ADDR_VAR 0 5
77642: PUSH
77643: LD_VAR 0 2
77647: PPUSH
77648: CALL_OW 251
77652: ST_TO_ADDR
// if not x or not y then
77653: LD_VAR 0 4
77657: NOT
77658: PUSH
77659: LD_VAR 0 5
77663: NOT
77664: OR
77665: IFFALSE 77669
// exit ;
77667: GO 77761
// if GetTaskList ( unit ) then
77669: LD_VAR 0 1
77673: PPUSH
77674: CALL_OW 437
77678: IFFALSE 77761
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77680: LD_STRING e
77682: PUSH
77683: LD_VAR 0 1
77687: PPUSH
77688: CALL_OW 437
77692: PUSH
77693: LD_INT 1
77695: ARRAY
77696: PUSH
77697: LD_INT 1
77699: ARRAY
77700: EQUAL
77701: PUSH
77702: LD_VAR 0 4
77706: PUSH
77707: LD_VAR 0 1
77711: PPUSH
77712: CALL_OW 437
77716: PUSH
77717: LD_INT 1
77719: ARRAY
77720: PUSH
77721: LD_INT 2
77723: ARRAY
77724: EQUAL
77725: AND
77726: PUSH
77727: LD_VAR 0 5
77731: PUSH
77732: LD_VAR 0 1
77736: PPUSH
77737: CALL_OW 437
77741: PUSH
77742: LD_INT 1
77744: ARRAY
77745: PUSH
77746: LD_INT 3
77748: ARRAY
77749: EQUAL
77750: AND
77751: IFFALSE 77761
// result := true end ;
77753: LD_ADDR_VAR 0 3
77757: PUSH
77758: LD_INT 1
77760: ST_TO_ADDR
// end ;
77761: LD_VAR 0 3
77765: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77766: LD_INT 0
77768: PPUSH
// result := false ;
77769: LD_ADDR_VAR 0 4
77773: PUSH
77774: LD_INT 0
77776: ST_TO_ADDR
// if GetTaskList ( unit ) then
77777: LD_VAR 0 1
77781: PPUSH
77782: CALL_OW 437
77786: IFFALSE 77869
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77788: LD_STRING M
77790: PUSH
77791: LD_VAR 0 1
77795: PPUSH
77796: CALL_OW 437
77800: PUSH
77801: LD_INT 1
77803: ARRAY
77804: PUSH
77805: LD_INT 1
77807: ARRAY
77808: EQUAL
77809: PUSH
77810: LD_VAR 0 2
77814: PUSH
77815: LD_VAR 0 1
77819: PPUSH
77820: CALL_OW 437
77824: PUSH
77825: LD_INT 1
77827: ARRAY
77828: PUSH
77829: LD_INT 2
77831: ARRAY
77832: EQUAL
77833: AND
77834: PUSH
77835: LD_VAR 0 3
77839: PUSH
77840: LD_VAR 0 1
77844: PPUSH
77845: CALL_OW 437
77849: PUSH
77850: LD_INT 1
77852: ARRAY
77853: PUSH
77854: LD_INT 3
77856: ARRAY
77857: EQUAL
77858: AND
77859: IFFALSE 77869
// result := true ;
77861: LD_ADDR_VAR 0 4
77865: PUSH
77866: LD_INT 1
77868: ST_TO_ADDR
// end ; end ;
77869: LD_VAR 0 4
77873: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77874: LD_INT 0
77876: PPUSH
77877: PPUSH
77878: PPUSH
77879: PPUSH
// if not unit or not area then
77880: LD_VAR 0 1
77884: NOT
77885: PUSH
77886: LD_VAR 0 2
77890: NOT
77891: OR
77892: IFFALSE 77896
// exit ;
77894: GO 78072
// tmp := AreaToList ( area , i ) ;
77896: LD_ADDR_VAR 0 6
77900: PUSH
77901: LD_VAR 0 2
77905: PPUSH
77906: LD_VAR 0 5
77910: PPUSH
77911: CALL_OW 517
77915: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77916: LD_ADDR_VAR 0 5
77920: PUSH
77921: DOUBLE
77922: LD_INT 1
77924: DEC
77925: ST_TO_ADDR
77926: LD_VAR 0 6
77930: PUSH
77931: LD_INT 1
77933: ARRAY
77934: PUSH
77935: FOR_TO
77936: IFFALSE 78070
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77938: LD_ADDR_VAR 0 7
77942: PUSH
77943: LD_VAR 0 6
77947: PUSH
77948: LD_INT 1
77950: ARRAY
77951: PUSH
77952: LD_VAR 0 5
77956: ARRAY
77957: PUSH
77958: LD_VAR 0 6
77962: PUSH
77963: LD_INT 2
77965: ARRAY
77966: PUSH
77967: LD_VAR 0 5
77971: ARRAY
77972: PUSH
77973: EMPTY
77974: LIST
77975: LIST
77976: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77977: LD_INT 92
77979: PUSH
77980: LD_VAR 0 7
77984: PUSH
77985: LD_INT 1
77987: ARRAY
77988: PUSH
77989: LD_VAR 0 7
77993: PUSH
77994: LD_INT 2
77996: ARRAY
77997: PUSH
77998: LD_INT 2
78000: PUSH
78001: EMPTY
78002: LIST
78003: LIST
78004: LIST
78005: LIST
78006: PPUSH
78007: CALL_OW 69
78011: PUSH
78012: LD_INT 0
78014: EQUAL
78015: IFFALSE 78068
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78017: LD_VAR 0 1
78021: PPUSH
78022: LD_VAR 0 7
78026: PUSH
78027: LD_INT 1
78029: ARRAY
78030: PPUSH
78031: LD_VAR 0 7
78035: PUSH
78036: LD_INT 2
78038: ARRAY
78039: PPUSH
78040: LD_VAR 0 3
78044: PPUSH
78045: CALL_OW 48
// result := IsPlaced ( unit ) ;
78049: LD_ADDR_VAR 0 4
78053: PUSH
78054: LD_VAR 0 1
78058: PPUSH
78059: CALL_OW 305
78063: ST_TO_ADDR
// exit ;
78064: POP
78065: POP
78066: GO 78072
// end ; end ;
78068: GO 77935
78070: POP
78071: POP
// end ;
78072: LD_VAR 0 4
78076: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78077: LD_INT 0
78079: PPUSH
78080: PPUSH
78081: PPUSH
// if not side or side > 8 then
78082: LD_VAR 0 1
78086: NOT
78087: PUSH
78088: LD_VAR 0 1
78092: PUSH
78093: LD_INT 8
78095: GREATER
78096: OR
78097: IFFALSE 78101
// exit ;
78099: GO 78288
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78101: LD_ADDR_VAR 0 4
78105: PUSH
78106: LD_INT 22
78108: PUSH
78109: LD_VAR 0 1
78113: PUSH
78114: EMPTY
78115: LIST
78116: LIST
78117: PUSH
78118: LD_INT 21
78120: PUSH
78121: LD_INT 3
78123: PUSH
78124: EMPTY
78125: LIST
78126: LIST
78127: PUSH
78128: EMPTY
78129: LIST
78130: LIST
78131: PPUSH
78132: CALL_OW 69
78136: ST_TO_ADDR
// if not tmp then
78137: LD_VAR 0 4
78141: NOT
78142: IFFALSE 78146
// exit ;
78144: GO 78288
// enable_addtolog := true ;
78146: LD_ADDR_OWVAR 81
78150: PUSH
78151: LD_INT 1
78153: ST_TO_ADDR
// AddToLog ( [ ) ;
78154: LD_STRING [
78156: PPUSH
78157: CALL_OW 561
// for i in tmp do
78161: LD_ADDR_VAR 0 3
78165: PUSH
78166: LD_VAR 0 4
78170: PUSH
78171: FOR_IN
78172: IFFALSE 78279
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78174: LD_STRING [
78176: PUSH
78177: LD_VAR 0 3
78181: PPUSH
78182: CALL_OW 266
78186: STR
78187: PUSH
78188: LD_STRING , 
78190: STR
78191: PUSH
78192: LD_VAR 0 3
78196: PPUSH
78197: CALL_OW 250
78201: STR
78202: PUSH
78203: LD_STRING , 
78205: STR
78206: PUSH
78207: LD_VAR 0 3
78211: PPUSH
78212: CALL_OW 251
78216: STR
78217: PUSH
78218: LD_STRING , 
78220: STR
78221: PUSH
78222: LD_VAR 0 3
78226: PPUSH
78227: CALL_OW 254
78231: STR
78232: PUSH
78233: LD_STRING , 
78235: STR
78236: PUSH
78237: LD_VAR 0 3
78241: PPUSH
78242: LD_INT 1
78244: PPUSH
78245: CALL_OW 268
78249: STR
78250: PUSH
78251: LD_STRING , 
78253: STR
78254: PUSH
78255: LD_VAR 0 3
78259: PPUSH
78260: LD_INT 2
78262: PPUSH
78263: CALL_OW 268
78267: STR
78268: PUSH
78269: LD_STRING ],
78271: STR
78272: PPUSH
78273: CALL_OW 561
// end ;
78277: GO 78171
78279: POP
78280: POP
// AddToLog ( ]; ) ;
78281: LD_STRING ];
78283: PPUSH
78284: CALL_OW 561
// end ;
78288: LD_VAR 0 2
78292: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78293: LD_INT 0
78295: PPUSH
78296: PPUSH
78297: PPUSH
78298: PPUSH
78299: PPUSH
// if not area or not rate or not max then
78300: LD_VAR 0 1
78304: NOT
78305: PUSH
78306: LD_VAR 0 2
78310: NOT
78311: OR
78312: PUSH
78313: LD_VAR 0 4
78317: NOT
78318: OR
78319: IFFALSE 78323
// exit ;
78321: GO 78512
// while 1 do
78323: LD_INT 1
78325: IFFALSE 78512
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78327: LD_ADDR_VAR 0 9
78331: PUSH
78332: LD_VAR 0 1
78336: PPUSH
78337: LD_INT 1
78339: PPUSH
78340: CALL_OW 287
78344: PUSH
78345: LD_INT 10
78347: MUL
78348: ST_TO_ADDR
// r := rate / 10 ;
78349: LD_ADDR_VAR 0 7
78353: PUSH
78354: LD_VAR 0 2
78358: PUSH
78359: LD_INT 10
78361: DIVREAL
78362: ST_TO_ADDR
// time := 1 1$00 ;
78363: LD_ADDR_VAR 0 8
78367: PUSH
78368: LD_INT 2100
78370: ST_TO_ADDR
// if amount < min then
78371: LD_VAR 0 9
78375: PUSH
78376: LD_VAR 0 3
78380: LESS
78381: IFFALSE 78399
// r := r * 2 else
78383: LD_ADDR_VAR 0 7
78387: PUSH
78388: LD_VAR 0 7
78392: PUSH
78393: LD_INT 2
78395: MUL
78396: ST_TO_ADDR
78397: GO 78425
// if amount > max then
78399: LD_VAR 0 9
78403: PUSH
78404: LD_VAR 0 4
78408: GREATER
78409: IFFALSE 78425
// r := r / 2 ;
78411: LD_ADDR_VAR 0 7
78415: PUSH
78416: LD_VAR 0 7
78420: PUSH
78421: LD_INT 2
78423: DIVREAL
78424: ST_TO_ADDR
// time := time / r ;
78425: LD_ADDR_VAR 0 8
78429: PUSH
78430: LD_VAR 0 8
78434: PUSH
78435: LD_VAR 0 7
78439: DIVREAL
78440: ST_TO_ADDR
// if time < 0 then
78441: LD_VAR 0 8
78445: PUSH
78446: LD_INT 0
78448: LESS
78449: IFFALSE 78466
// time := time * - 1 ;
78451: LD_ADDR_VAR 0 8
78455: PUSH
78456: LD_VAR 0 8
78460: PUSH
78461: LD_INT 1
78463: NEG
78464: MUL
78465: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78466: LD_VAR 0 8
78470: PUSH
78471: LD_INT 35
78473: PPUSH
78474: LD_INT 875
78476: PPUSH
78477: CALL_OW 12
78481: PLUS
78482: PPUSH
78483: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78487: LD_INT 1
78489: PPUSH
78490: LD_INT 5
78492: PPUSH
78493: CALL_OW 12
78497: PPUSH
78498: LD_VAR 0 1
78502: PPUSH
78503: LD_INT 1
78505: PPUSH
78506: CALL_OW 55
// end ;
78510: GO 78323
// end ;
78512: LD_VAR 0 5
78516: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78517: LD_INT 0
78519: PPUSH
78520: PPUSH
78521: PPUSH
78522: PPUSH
78523: PPUSH
78524: PPUSH
78525: PPUSH
78526: PPUSH
// if not turrets or not factories then
78527: LD_VAR 0 1
78531: NOT
78532: PUSH
78533: LD_VAR 0 2
78537: NOT
78538: OR
78539: IFFALSE 78543
// exit ;
78541: GO 78850
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78543: LD_ADDR_VAR 0 10
78547: PUSH
78548: LD_INT 5
78550: PUSH
78551: LD_INT 6
78553: PUSH
78554: EMPTY
78555: LIST
78556: LIST
78557: PUSH
78558: LD_INT 2
78560: PUSH
78561: LD_INT 4
78563: PUSH
78564: EMPTY
78565: LIST
78566: LIST
78567: PUSH
78568: LD_INT 3
78570: PUSH
78571: LD_INT 5
78573: PUSH
78574: EMPTY
78575: LIST
78576: LIST
78577: PUSH
78578: EMPTY
78579: LIST
78580: LIST
78581: LIST
78582: PUSH
78583: LD_INT 24
78585: PUSH
78586: LD_INT 25
78588: PUSH
78589: EMPTY
78590: LIST
78591: LIST
78592: PUSH
78593: LD_INT 23
78595: PUSH
78596: LD_INT 27
78598: PUSH
78599: EMPTY
78600: LIST
78601: LIST
78602: PUSH
78603: EMPTY
78604: LIST
78605: LIST
78606: PUSH
78607: LD_INT 42
78609: PUSH
78610: LD_INT 43
78612: PUSH
78613: EMPTY
78614: LIST
78615: LIST
78616: PUSH
78617: LD_INT 44
78619: PUSH
78620: LD_INT 46
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: PUSH
78627: LD_INT 45
78629: PUSH
78630: LD_INT 47
78632: PUSH
78633: EMPTY
78634: LIST
78635: LIST
78636: PUSH
78637: EMPTY
78638: LIST
78639: LIST
78640: LIST
78641: PUSH
78642: EMPTY
78643: LIST
78644: LIST
78645: LIST
78646: ST_TO_ADDR
// result := [ ] ;
78647: LD_ADDR_VAR 0 3
78651: PUSH
78652: EMPTY
78653: ST_TO_ADDR
// for i in turrets do
78654: LD_ADDR_VAR 0 4
78658: PUSH
78659: LD_VAR 0 1
78663: PUSH
78664: FOR_IN
78665: IFFALSE 78848
// begin nat := GetNation ( i ) ;
78667: LD_ADDR_VAR 0 7
78671: PUSH
78672: LD_VAR 0 4
78676: PPUSH
78677: CALL_OW 248
78681: ST_TO_ADDR
// weapon := 0 ;
78682: LD_ADDR_VAR 0 8
78686: PUSH
78687: LD_INT 0
78689: ST_TO_ADDR
// if not nat then
78690: LD_VAR 0 7
78694: NOT
78695: IFFALSE 78699
// continue ;
78697: GO 78664
// for j in list [ nat ] do
78699: LD_ADDR_VAR 0 5
78703: PUSH
78704: LD_VAR 0 10
78708: PUSH
78709: LD_VAR 0 7
78713: ARRAY
78714: PUSH
78715: FOR_IN
78716: IFFALSE 78757
// if GetBWeapon ( i ) = j [ 1 ] then
78718: LD_VAR 0 4
78722: PPUSH
78723: CALL_OW 269
78727: PUSH
78728: LD_VAR 0 5
78732: PUSH
78733: LD_INT 1
78735: ARRAY
78736: EQUAL
78737: IFFALSE 78755
// begin weapon := j [ 2 ] ;
78739: LD_ADDR_VAR 0 8
78743: PUSH
78744: LD_VAR 0 5
78748: PUSH
78749: LD_INT 2
78751: ARRAY
78752: ST_TO_ADDR
// break ;
78753: GO 78757
// end ;
78755: GO 78715
78757: POP
78758: POP
// if not weapon then
78759: LD_VAR 0 8
78763: NOT
78764: IFFALSE 78768
// continue ;
78766: GO 78664
// for k in factories do
78768: LD_ADDR_VAR 0 6
78772: PUSH
78773: LD_VAR 0 2
78777: PUSH
78778: FOR_IN
78779: IFFALSE 78844
// begin weapons := AvailableWeaponList ( k ) ;
78781: LD_ADDR_VAR 0 9
78785: PUSH
78786: LD_VAR 0 6
78790: PPUSH
78791: CALL_OW 478
78795: ST_TO_ADDR
// if not weapons then
78796: LD_VAR 0 9
78800: NOT
78801: IFFALSE 78805
// continue ;
78803: GO 78778
// if weapon in weapons then
78805: LD_VAR 0 8
78809: PUSH
78810: LD_VAR 0 9
78814: IN
78815: IFFALSE 78842
// begin result := [ i , weapon ] ;
78817: LD_ADDR_VAR 0 3
78821: PUSH
78822: LD_VAR 0 4
78826: PUSH
78827: LD_VAR 0 8
78831: PUSH
78832: EMPTY
78833: LIST
78834: LIST
78835: ST_TO_ADDR
// exit ;
78836: POP
78837: POP
78838: POP
78839: POP
78840: GO 78850
// end ; end ;
78842: GO 78778
78844: POP
78845: POP
// end ;
78846: GO 78664
78848: POP
78849: POP
// end ;
78850: LD_VAR 0 3
78854: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78855: LD_INT 0
78857: PPUSH
// if not side or side > 8 then
78858: LD_VAR 0 3
78862: NOT
78863: PUSH
78864: LD_VAR 0 3
78868: PUSH
78869: LD_INT 8
78871: GREATER
78872: OR
78873: IFFALSE 78877
// exit ;
78875: GO 78936
// if not range then
78877: LD_VAR 0 4
78881: NOT
78882: IFFALSE 78893
// range := - 12 ;
78884: LD_ADDR_VAR 0 4
78888: PUSH
78889: LD_INT 12
78891: NEG
78892: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78893: LD_VAR 0 1
78897: PPUSH
78898: LD_VAR 0 2
78902: PPUSH
78903: LD_VAR 0 3
78907: PPUSH
78908: LD_VAR 0 4
78912: PPUSH
78913: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78917: LD_VAR 0 1
78921: PPUSH
78922: LD_VAR 0 2
78926: PPUSH
78927: LD_VAR 0 3
78931: PPUSH
78932: CALL_OW 331
// end ;
78936: LD_VAR 0 5
78940: RET
// export function Video ( mode ) ; begin
78941: LD_INT 0
78943: PPUSH
// ingame_video = mode ;
78944: LD_ADDR_OWVAR 52
78948: PUSH
78949: LD_VAR 0 1
78953: ST_TO_ADDR
// interface_hidden = mode ;
78954: LD_ADDR_OWVAR 54
78958: PUSH
78959: LD_VAR 0 1
78963: ST_TO_ADDR
// end ;
78964: LD_VAR 0 2
78968: RET
// export function Join ( array , element ) ; begin
78969: LD_INT 0
78971: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78972: LD_ADDR_VAR 0 3
78976: PUSH
78977: LD_VAR 0 1
78981: PPUSH
78982: LD_VAR 0 1
78986: PUSH
78987: LD_INT 1
78989: PLUS
78990: PPUSH
78991: LD_VAR 0 2
78995: PPUSH
78996: CALL_OW 1
79000: ST_TO_ADDR
// end ;
79001: LD_VAR 0 3
79005: RET
// export function JoinUnion ( array , element ) ; begin
79006: LD_INT 0
79008: PPUSH
// result := array union element ;
79009: LD_ADDR_VAR 0 3
79013: PUSH
79014: LD_VAR 0 1
79018: PUSH
79019: LD_VAR 0 2
79023: UNION
79024: ST_TO_ADDR
// end ;
79025: LD_VAR 0 3
79029: RET
// export function GetBehemoths ( side ) ; begin
79030: LD_INT 0
79032: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79033: LD_ADDR_VAR 0 2
79037: PUSH
79038: LD_INT 22
79040: PUSH
79041: LD_VAR 0 1
79045: PUSH
79046: EMPTY
79047: LIST
79048: LIST
79049: PUSH
79050: LD_INT 31
79052: PUSH
79053: LD_INT 25
79055: PUSH
79056: EMPTY
79057: LIST
79058: LIST
79059: PUSH
79060: EMPTY
79061: LIST
79062: LIST
79063: PPUSH
79064: CALL_OW 69
79068: ST_TO_ADDR
// end ;
79069: LD_VAR 0 2
79073: RET
// export function Shuffle ( array ) ; var i , index ; begin
79074: LD_INT 0
79076: PPUSH
79077: PPUSH
79078: PPUSH
// result := [ ] ;
79079: LD_ADDR_VAR 0 2
79083: PUSH
79084: EMPTY
79085: ST_TO_ADDR
// if not array then
79086: LD_VAR 0 1
79090: NOT
79091: IFFALSE 79095
// exit ;
79093: GO 79194
// Randomize ;
79095: CALL_OW 10
// for i = array downto 1 do
79099: LD_ADDR_VAR 0 3
79103: PUSH
79104: DOUBLE
79105: LD_VAR 0 1
79109: INC
79110: ST_TO_ADDR
79111: LD_INT 1
79113: PUSH
79114: FOR_DOWNTO
79115: IFFALSE 79192
// begin index := rand ( 1 , array ) ;
79117: LD_ADDR_VAR 0 4
79121: PUSH
79122: LD_INT 1
79124: PPUSH
79125: LD_VAR 0 1
79129: PPUSH
79130: CALL_OW 12
79134: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79135: LD_ADDR_VAR 0 2
79139: PUSH
79140: LD_VAR 0 2
79144: PPUSH
79145: LD_VAR 0 2
79149: PUSH
79150: LD_INT 1
79152: PLUS
79153: PPUSH
79154: LD_VAR 0 1
79158: PUSH
79159: LD_VAR 0 4
79163: ARRAY
79164: PPUSH
79165: CALL_OW 2
79169: ST_TO_ADDR
// array := Delete ( array , index ) ;
79170: LD_ADDR_VAR 0 1
79174: PUSH
79175: LD_VAR 0 1
79179: PPUSH
79180: LD_VAR 0 4
79184: PPUSH
79185: CALL_OW 3
79189: ST_TO_ADDR
// end ;
79190: GO 79114
79192: POP
79193: POP
// end ;
79194: LD_VAR 0 2
79198: RET
// export function GetBaseMaterials ( base ) ; begin
79199: LD_INT 0
79201: PPUSH
// result := [ 0 , 0 , 0 ] ;
79202: LD_ADDR_VAR 0 2
79206: PUSH
79207: LD_INT 0
79209: PUSH
79210: LD_INT 0
79212: PUSH
79213: LD_INT 0
79215: PUSH
79216: EMPTY
79217: LIST
79218: LIST
79219: LIST
79220: ST_TO_ADDR
// if not base then
79221: LD_VAR 0 1
79225: NOT
79226: IFFALSE 79230
// exit ;
79228: GO 79279
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79230: LD_ADDR_VAR 0 2
79234: PUSH
79235: LD_VAR 0 1
79239: PPUSH
79240: LD_INT 1
79242: PPUSH
79243: CALL_OW 275
79247: PUSH
79248: LD_VAR 0 1
79252: PPUSH
79253: LD_INT 2
79255: PPUSH
79256: CALL_OW 275
79260: PUSH
79261: LD_VAR 0 1
79265: PPUSH
79266: LD_INT 3
79268: PPUSH
79269: CALL_OW 275
79273: PUSH
79274: EMPTY
79275: LIST
79276: LIST
79277: LIST
79278: ST_TO_ADDR
// end ;
79279: LD_VAR 0 2
79283: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79284: LD_INT 0
79286: PPUSH
79287: PPUSH
// result := array ;
79288: LD_ADDR_VAR 0 3
79292: PUSH
79293: LD_VAR 0 1
79297: ST_TO_ADDR
// if size >= result then
79298: LD_VAR 0 2
79302: PUSH
79303: LD_VAR 0 3
79307: GREATEREQUAL
79308: IFFALSE 79312
// exit ;
79310: GO 79362
// if size then
79312: LD_VAR 0 2
79316: IFFALSE 79362
// for i := array downto size do
79318: LD_ADDR_VAR 0 4
79322: PUSH
79323: DOUBLE
79324: LD_VAR 0 1
79328: INC
79329: ST_TO_ADDR
79330: LD_VAR 0 2
79334: PUSH
79335: FOR_DOWNTO
79336: IFFALSE 79360
// result := Delete ( result , result ) ;
79338: LD_ADDR_VAR 0 3
79342: PUSH
79343: LD_VAR 0 3
79347: PPUSH
79348: LD_VAR 0 3
79352: PPUSH
79353: CALL_OW 3
79357: ST_TO_ADDR
79358: GO 79335
79360: POP
79361: POP
// end ;
79362: LD_VAR 0 3
79366: RET
// export function ComExit ( unit ) ; var tmp ; begin
79367: LD_INT 0
79369: PPUSH
79370: PPUSH
// if not IsInUnit ( unit ) then
79371: LD_VAR 0 1
79375: PPUSH
79376: CALL_OW 310
79380: NOT
79381: IFFALSE 79385
// exit ;
79383: GO 79445
// tmp := IsInUnit ( unit ) ;
79385: LD_ADDR_VAR 0 3
79389: PUSH
79390: LD_VAR 0 1
79394: PPUSH
79395: CALL_OW 310
79399: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79400: LD_VAR 0 3
79404: PPUSH
79405: CALL_OW 247
79409: PUSH
79410: LD_INT 2
79412: EQUAL
79413: IFFALSE 79426
// ComExitVehicle ( unit ) else
79415: LD_VAR 0 1
79419: PPUSH
79420: CALL_OW 121
79424: GO 79435
// ComExitBuilding ( unit ) ;
79426: LD_VAR 0 1
79430: PPUSH
79431: CALL_OW 122
// result := tmp ;
79435: LD_ADDR_VAR 0 2
79439: PUSH
79440: LD_VAR 0 3
79444: ST_TO_ADDR
// end ;
79445: LD_VAR 0 2
79449: RET
// export function ComExitAll ( units ) ; var i ; begin
79450: LD_INT 0
79452: PPUSH
79453: PPUSH
// if not units then
79454: LD_VAR 0 1
79458: NOT
79459: IFFALSE 79463
// exit ;
79461: GO 79489
// for i in units do
79463: LD_ADDR_VAR 0 3
79467: PUSH
79468: LD_VAR 0 1
79472: PUSH
79473: FOR_IN
79474: IFFALSE 79487
// ComExit ( i ) ;
79476: LD_VAR 0 3
79480: PPUSH
79481: CALL 79367 0 1
79485: GO 79473
79487: POP
79488: POP
// end ;
79489: LD_VAR 0 2
79493: RET
// export function ResetHc ; begin
79494: LD_INT 0
79496: PPUSH
// InitHc ;
79497: CALL_OW 19
// hc_importance := 0 ;
79501: LD_ADDR_OWVAR 32
79505: PUSH
79506: LD_INT 0
79508: ST_TO_ADDR
// end ;
79509: LD_VAR 0 1
79513: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79514: LD_INT 0
79516: PPUSH
79517: PPUSH
79518: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79519: LD_ADDR_VAR 0 6
79523: PUSH
79524: LD_VAR 0 1
79528: PUSH
79529: LD_VAR 0 3
79533: PLUS
79534: PUSH
79535: LD_INT 2
79537: DIV
79538: ST_TO_ADDR
// if _x < 0 then
79539: LD_VAR 0 6
79543: PUSH
79544: LD_INT 0
79546: LESS
79547: IFFALSE 79564
// _x := _x * - 1 ;
79549: LD_ADDR_VAR 0 6
79553: PUSH
79554: LD_VAR 0 6
79558: PUSH
79559: LD_INT 1
79561: NEG
79562: MUL
79563: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79564: LD_ADDR_VAR 0 7
79568: PUSH
79569: LD_VAR 0 2
79573: PUSH
79574: LD_VAR 0 4
79578: PLUS
79579: PUSH
79580: LD_INT 2
79582: DIV
79583: ST_TO_ADDR
// if _y < 0 then
79584: LD_VAR 0 7
79588: PUSH
79589: LD_INT 0
79591: LESS
79592: IFFALSE 79609
// _y := _y * - 1 ;
79594: LD_ADDR_VAR 0 7
79598: PUSH
79599: LD_VAR 0 7
79603: PUSH
79604: LD_INT 1
79606: NEG
79607: MUL
79608: ST_TO_ADDR
// result := [ _x , _y ] ;
79609: LD_ADDR_VAR 0 5
79613: PUSH
79614: LD_VAR 0 6
79618: PUSH
79619: LD_VAR 0 7
79623: PUSH
79624: EMPTY
79625: LIST
79626: LIST
79627: ST_TO_ADDR
// end ;
79628: LD_VAR 0 5
79632: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79633: LD_INT 0
79635: PPUSH
79636: PPUSH
79637: PPUSH
79638: PPUSH
// task := GetTaskList ( unit ) ;
79639: LD_ADDR_VAR 0 7
79643: PUSH
79644: LD_VAR 0 1
79648: PPUSH
79649: CALL_OW 437
79653: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79654: LD_VAR 0 7
79658: NOT
79659: PUSH
79660: LD_VAR 0 1
79664: PPUSH
79665: LD_VAR 0 2
79669: PPUSH
79670: CALL_OW 308
79674: NOT
79675: AND
79676: IFFALSE 79680
// exit ;
79678: GO 79798
// if IsInArea ( unit , area ) then
79680: LD_VAR 0 1
79684: PPUSH
79685: LD_VAR 0 2
79689: PPUSH
79690: CALL_OW 308
79694: IFFALSE 79712
// begin ComMoveToArea ( unit , goAway ) ;
79696: LD_VAR 0 1
79700: PPUSH
79701: LD_VAR 0 3
79705: PPUSH
79706: CALL_OW 113
// exit ;
79710: GO 79798
// end ; if task [ 1 ] [ 1 ] <> M then
79712: LD_VAR 0 7
79716: PUSH
79717: LD_INT 1
79719: ARRAY
79720: PUSH
79721: LD_INT 1
79723: ARRAY
79724: PUSH
79725: LD_STRING M
79727: NONEQUAL
79728: IFFALSE 79732
// exit ;
79730: GO 79798
// x := task [ 1 ] [ 2 ] ;
79732: LD_ADDR_VAR 0 5
79736: PUSH
79737: LD_VAR 0 7
79741: PUSH
79742: LD_INT 1
79744: ARRAY
79745: PUSH
79746: LD_INT 2
79748: ARRAY
79749: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79750: LD_ADDR_VAR 0 6
79754: PUSH
79755: LD_VAR 0 7
79759: PUSH
79760: LD_INT 1
79762: ARRAY
79763: PUSH
79764: LD_INT 3
79766: ARRAY
79767: ST_TO_ADDR
// if InArea ( x , y , area ) then
79768: LD_VAR 0 5
79772: PPUSH
79773: LD_VAR 0 6
79777: PPUSH
79778: LD_VAR 0 2
79782: PPUSH
79783: CALL_OW 309
79787: IFFALSE 79798
// ComStop ( unit ) ;
79789: LD_VAR 0 1
79793: PPUSH
79794: CALL_OW 141
// end ;
79798: LD_VAR 0 4
79802: RET
// export function Abs ( value ) ; begin
79803: LD_INT 0
79805: PPUSH
// result := value ;
79806: LD_ADDR_VAR 0 2
79810: PUSH
79811: LD_VAR 0 1
79815: ST_TO_ADDR
// if value < 0 then
79816: LD_VAR 0 1
79820: PUSH
79821: LD_INT 0
79823: LESS
79824: IFFALSE 79841
// result := value * - 1 ;
79826: LD_ADDR_VAR 0 2
79830: PUSH
79831: LD_VAR 0 1
79835: PUSH
79836: LD_INT 1
79838: NEG
79839: MUL
79840: ST_TO_ADDR
// end ;
79841: LD_VAR 0 2
79845: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79846: LD_INT 0
79848: PPUSH
79849: PPUSH
79850: PPUSH
79851: PPUSH
79852: PPUSH
79853: PPUSH
79854: PPUSH
79855: PPUSH
// if not unit or not building then
79856: LD_VAR 0 1
79860: NOT
79861: PUSH
79862: LD_VAR 0 2
79866: NOT
79867: OR
79868: IFFALSE 79872
// exit ;
79870: GO 80098
// x := GetX ( building ) ;
79872: LD_ADDR_VAR 0 4
79876: PUSH
79877: LD_VAR 0 2
79881: PPUSH
79882: CALL_OW 250
79886: ST_TO_ADDR
// y := GetY ( building ) ;
79887: LD_ADDR_VAR 0 6
79891: PUSH
79892: LD_VAR 0 2
79896: PPUSH
79897: CALL_OW 251
79901: ST_TO_ADDR
// d := GetDir ( building ) ;
79902: LD_ADDR_VAR 0 8
79906: PUSH
79907: LD_VAR 0 2
79911: PPUSH
79912: CALL_OW 254
79916: ST_TO_ADDR
// r := 4 ;
79917: LD_ADDR_VAR 0 9
79921: PUSH
79922: LD_INT 4
79924: ST_TO_ADDR
// for i := 1 to 5 do
79925: LD_ADDR_VAR 0 10
79929: PUSH
79930: DOUBLE
79931: LD_INT 1
79933: DEC
79934: ST_TO_ADDR
79935: LD_INT 5
79937: PUSH
79938: FOR_TO
79939: IFFALSE 80096
// begin _x := ShiftX ( x , d , r + i ) ;
79941: LD_ADDR_VAR 0 5
79945: PUSH
79946: LD_VAR 0 4
79950: PPUSH
79951: LD_VAR 0 8
79955: PPUSH
79956: LD_VAR 0 9
79960: PUSH
79961: LD_VAR 0 10
79965: PLUS
79966: PPUSH
79967: CALL_OW 272
79971: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79972: LD_ADDR_VAR 0 7
79976: PUSH
79977: LD_VAR 0 6
79981: PPUSH
79982: LD_VAR 0 8
79986: PPUSH
79987: LD_VAR 0 9
79991: PUSH
79992: LD_VAR 0 10
79996: PLUS
79997: PPUSH
79998: CALL_OW 273
80002: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80003: LD_VAR 0 5
80007: PPUSH
80008: LD_VAR 0 7
80012: PPUSH
80013: CALL_OW 488
80017: PUSH
80018: LD_VAR 0 5
80022: PPUSH
80023: LD_VAR 0 7
80027: PPUSH
80028: CALL_OW 428
80032: PPUSH
80033: CALL_OW 247
80037: PUSH
80038: LD_INT 3
80040: PUSH
80041: LD_INT 2
80043: PUSH
80044: EMPTY
80045: LIST
80046: LIST
80047: IN
80048: NOT
80049: AND
80050: IFFALSE 80094
// begin ComMoveXY ( unit , _x , _y ) ;
80052: LD_VAR 0 1
80056: PPUSH
80057: LD_VAR 0 5
80061: PPUSH
80062: LD_VAR 0 7
80066: PPUSH
80067: CALL_OW 111
// result := [ _x , _y ] ;
80071: LD_ADDR_VAR 0 3
80075: PUSH
80076: LD_VAR 0 5
80080: PUSH
80081: LD_VAR 0 7
80085: PUSH
80086: EMPTY
80087: LIST
80088: LIST
80089: ST_TO_ADDR
// exit ;
80090: POP
80091: POP
80092: GO 80098
// end ; end ;
80094: GO 79938
80096: POP
80097: POP
// end ;
80098: LD_VAR 0 3
80102: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80103: LD_INT 0
80105: PPUSH
80106: PPUSH
80107: PPUSH
// result := 0 ;
80108: LD_ADDR_VAR 0 3
80112: PUSH
80113: LD_INT 0
80115: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80116: LD_VAR 0 1
80120: PUSH
80121: LD_INT 0
80123: LESS
80124: PUSH
80125: LD_VAR 0 1
80129: PUSH
80130: LD_INT 8
80132: GREATER
80133: OR
80134: PUSH
80135: LD_VAR 0 2
80139: PUSH
80140: LD_INT 0
80142: LESS
80143: OR
80144: PUSH
80145: LD_VAR 0 2
80149: PUSH
80150: LD_INT 8
80152: GREATER
80153: OR
80154: IFFALSE 80158
// exit ;
80156: GO 80233
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80158: LD_ADDR_VAR 0 4
80162: PUSH
80163: LD_INT 22
80165: PUSH
80166: LD_VAR 0 2
80170: PUSH
80171: EMPTY
80172: LIST
80173: LIST
80174: PPUSH
80175: CALL_OW 69
80179: PUSH
80180: FOR_IN
80181: IFFALSE 80231
// begin un := UnitShoot ( i ) ;
80183: LD_ADDR_VAR 0 5
80187: PUSH
80188: LD_VAR 0 4
80192: PPUSH
80193: CALL_OW 504
80197: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80198: LD_VAR 0 5
80202: PPUSH
80203: CALL_OW 255
80207: PUSH
80208: LD_VAR 0 1
80212: EQUAL
80213: IFFALSE 80229
// begin result := un ;
80215: LD_ADDR_VAR 0 3
80219: PUSH
80220: LD_VAR 0 5
80224: ST_TO_ADDR
// exit ;
80225: POP
80226: POP
80227: GO 80233
// end ; end ;
80229: GO 80180
80231: POP
80232: POP
// end ;
80233: LD_VAR 0 3
80237: RET
// export function GetCargoBay ( units ) ; begin
80238: LD_INT 0
80240: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80241: LD_ADDR_VAR 0 2
80245: PUSH
80246: LD_VAR 0 1
80250: PPUSH
80251: LD_INT 2
80253: PUSH
80254: LD_INT 34
80256: PUSH
80257: LD_INT 12
80259: PUSH
80260: EMPTY
80261: LIST
80262: LIST
80263: PUSH
80264: LD_INT 34
80266: PUSH
80267: LD_INT 51
80269: PUSH
80270: EMPTY
80271: LIST
80272: LIST
80273: PUSH
80274: LD_INT 34
80276: PUSH
80277: LD_INT 32
80279: PUSH
80280: EMPTY
80281: LIST
80282: LIST
80283: PUSH
80284: LD_INT 34
80286: PUSH
80287: LD_INT 89
80289: PUSH
80290: EMPTY
80291: LIST
80292: LIST
80293: PUSH
80294: EMPTY
80295: LIST
80296: LIST
80297: LIST
80298: LIST
80299: LIST
80300: PPUSH
80301: CALL_OW 72
80305: ST_TO_ADDR
// end ;
80306: LD_VAR 0 2
80310: RET
// export function Negate ( value ) ; begin
80311: LD_INT 0
80313: PPUSH
// result := not value ;
80314: LD_ADDR_VAR 0 2
80318: PUSH
80319: LD_VAR 0 1
80323: NOT
80324: ST_TO_ADDR
// end ;
80325: LD_VAR 0 2
80329: RET
// export function Inc ( value ) ; begin
80330: LD_INT 0
80332: PPUSH
// result := value + 1 ;
80333: LD_ADDR_VAR 0 2
80337: PUSH
80338: LD_VAR 0 1
80342: PUSH
80343: LD_INT 1
80345: PLUS
80346: ST_TO_ADDR
// end ;
80347: LD_VAR 0 2
80351: RET
// export function Dec ( value ) ; begin
80352: LD_INT 0
80354: PPUSH
// result := value - 1 ;
80355: LD_ADDR_VAR 0 2
80359: PUSH
80360: LD_VAR 0 1
80364: PUSH
80365: LD_INT 1
80367: MINUS
80368: ST_TO_ADDR
// end ;
80369: LD_VAR 0 2
80373: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80374: LD_INT 0
80376: PPUSH
80377: PPUSH
80378: PPUSH
80379: PPUSH
80380: PPUSH
80381: PPUSH
80382: PPUSH
80383: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80384: LD_VAR 0 1
80388: PPUSH
80389: LD_VAR 0 2
80393: PPUSH
80394: CALL_OW 488
80398: NOT
80399: PUSH
80400: LD_VAR 0 3
80404: PPUSH
80405: LD_VAR 0 4
80409: PPUSH
80410: CALL_OW 488
80414: NOT
80415: OR
80416: IFFALSE 80429
// begin result := - 1 ;
80418: LD_ADDR_VAR 0 5
80422: PUSH
80423: LD_INT 1
80425: NEG
80426: ST_TO_ADDR
// exit ;
80427: GO 80664
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80429: LD_ADDR_VAR 0 12
80433: PUSH
80434: LD_VAR 0 1
80438: PPUSH
80439: LD_VAR 0 2
80443: PPUSH
80444: LD_VAR 0 3
80448: PPUSH
80449: LD_VAR 0 4
80453: PPUSH
80454: CALL 79514 0 4
80458: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80459: LD_ADDR_VAR 0 11
80463: PUSH
80464: LD_VAR 0 1
80468: PPUSH
80469: LD_VAR 0 2
80473: PPUSH
80474: LD_VAR 0 12
80478: PUSH
80479: LD_INT 1
80481: ARRAY
80482: PPUSH
80483: LD_VAR 0 12
80487: PUSH
80488: LD_INT 2
80490: ARRAY
80491: PPUSH
80492: CALL_OW 298
80496: ST_TO_ADDR
// distance := 9999 ;
80497: LD_ADDR_VAR 0 10
80501: PUSH
80502: LD_INT 9999
80504: ST_TO_ADDR
// for i := 0 to 5 do
80505: LD_ADDR_VAR 0 6
80509: PUSH
80510: DOUBLE
80511: LD_INT 0
80513: DEC
80514: ST_TO_ADDR
80515: LD_INT 5
80517: PUSH
80518: FOR_TO
80519: IFFALSE 80662
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80521: LD_ADDR_VAR 0 7
80525: PUSH
80526: LD_VAR 0 1
80530: PPUSH
80531: LD_VAR 0 6
80535: PPUSH
80536: LD_VAR 0 11
80540: PPUSH
80541: CALL_OW 272
80545: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80546: LD_ADDR_VAR 0 8
80550: PUSH
80551: LD_VAR 0 2
80555: PPUSH
80556: LD_VAR 0 6
80560: PPUSH
80561: LD_VAR 0 11
80565: PPUSH
80566: CALL_OW 273
80570: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80571: LD_VAR 0 7
80575: PPUSH
80576: LD_VAR 0 8
80580: PPUSH
80581: CALL_OW 488
80585: NOT
80586: IFFALSE 80590
// continue ;
80588: GO 80518
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80590: LD_ADDR_VAR 0 9
80594: PUSH
80595: LD_VAR 0 12
80599: PUSH
80600: LD_INT 1
80602: ARRAY
80603: PPUSH
80604: LD_VAR 0 12
80608: PUSH
80609: LD_INT 2
80611: ARRAY
80612: PPUSH
80613: LD_VAR 0 7
80617: PPUSH
80618: LD_VAR 0 8
80622: PPUSH
80623: CALL_OW 298
80627: ST_TO_ADDR
// if tmp < distance then
80628: LD_VAR 0 9
80632: PUSH
80633: LD_VAR 0 10
80637: LESS
80638: IFFALSE 80660
// begin result := i ;
80640: LD_ADDR_VAR 0 5
80644: PUSH
80645: LD_VAR 0 6
80649: ST_TO_ADDR
// distance := tmp ;
80650: LD_ADDR_VAR 0 10
80654: PUSH
80655: LD_VAR 0 9
80659: ST_TO_ADDR
// end ; end ;
80660: GO 80518
80662: POP
80663: POP
// end ;
80664: LD_VAR 0 5
80668: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80669: LD_INT 0
80671: PPUSH
80672: PPUSH
// if not driver or not IsInUnit ( driver ) then
80673: LD_VAR 0 1
80677: NOT
80678: PUSH
80679: LD_VAR 0 1
80683: PPUSH
80684: CALL_OW 310
80688: NOT
80689: OR
80690: IFFALSE 80694
// exit ;
80692: GO 80784
// vehicle := IsInUnit ( driver ) ;
80694: LD_ADDR_VAR 0 3
80698: PUSH
80699: LD_VAR 0 1
80703: PPUSH
80704: CALL_OW 310
80708: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80709: LD_VAR 0 1
80713: PPUSH
80714: LD_STRING \
80716: PUSH
80717: LD_INT 0
80719: PUSH
80720: LD_INT 0
80722: PUSH
80723: LD_INT 0
80725: PUSH
80726: LD_INT 0
80728: PUSH
80729: LD_INT 0
80731: PUSH
80732: LD_INT 0
80734: PUSH
80735: EMPTY
80736: LIST
80737: LIST
80738: LIST
80739: LIST
80740: LIST
80741: LIST
80742: LIST
80743: PUSH
80744: LD_STRING E
80746: PUSH
80747: LD_INT 0
80749: PUSH
80750: LD_INT 0
80752: PUSH
80753: LD_VAR 0 3
80757: PUSH
80758: LD_INT 0
80760: PUSH
80761: LD_INT 0
80763: PUSH
80764: LD_INT 0
80766: PUSH
80767: EMPTY
80768: LIST
80769: LIST
80770: LIST
80771: LIST
80772: LIST
80773: LIST
80774: LIST
80775: PUSH
80776: EMPTY
80777: LIST
80778: LIST
80779: PPUSH
80780: CALL_OW 446
// end ;
80784: LD_VAR 0 2
80788: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80789: LD_INT 0
80791: PPUSH
80792: PPUSH
// if not driver or not IsInUnit ( driver ) then
80793: LD_VAR 0 1
80797: NOT
80798: PUSH
80799: LD_VAR 0 1
80803: PPUSH
80804: CALL_OW 310
80808: NOT
80809: OR
80810: IFFALSE 80814
// exit ;
80812: GO 80904
// vehicle := IsInUnit ( driver ) ;
80814: LD_ADDR_VAR 0 3
80818: PUSH
80819: LD_VAR 0 1
80823: PPUSH
80824: CALL_OW 310
80828: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80829: LD_VAR 0 1
80833: PPUSH
80834: LD_STRING \
80836: PUSH
80837: LD_INT 0
80839: PUSH
80840: LD_INT 0
80842: PUSH
80843: LD_INT 0
80845: PUSH
80846: LD_INT 0
80848: PUSH
80849: LD_INT 0
80851: PUSH
80852: LD_INT 0
80854: PUSH
80855: EMPTY
80856: LIST
80857: LIST
80858: LIST
80859: LIST
80860: LIST
80861: LIST
80862: LIST
80863: PUSH
80864: LD_STRING E
80866: PUSH
80867: LD_INT 0
80869: PUSH
80870: LD_INT 0
80872: PUSH
80873: LD_VAR 0 3
80877: PUSH
80878: LD_INT 0
80880: PUSH
80881: LD_INT 0
80883: PUSH
80884: LD_INT 0
80886: PUSH
80887: EMPTY
80888: LIST
80889: LIST
80890: LIST
80891: LIST
80892: LIST
80893: LIST
80894: LIST
80895: PUSH
80896: EMPTY
80897: LIST
80898: LIST
80899: PPUSH
80900: CALL_OW 447
// end ;
80904: LD_VAR 0 2
80908: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80909: LD_INT 0
80911: PPUSH
80912: PPUSH
80913: PPUSH
// tmp := [ ] ;
80914: LD_ADDR_VAR 0 5
80918: PUSH
80919: EMPTY
80920: ST_TO_ADDR
// for i in units do
80921: LD_ADDR_VAR 0 4
80925: PUSH
80926: LD_VAR 0 1
80930: PUSH
80931: FOR_IN
80932: IFFALSE 80970
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80934: LD_ADDR_VAR 0 5
80938: PUSH
80939: LD_VAR 0 5
80943: PPUSH
80944: LD_VAR 0 5
80948: PUSH
80949: LD_INT 1
80951: PLUS
80952: PPUSH
80953: LD_VAR 0 4
80957: PPUSH
80958: CALL_OW 256
80962: PPUSH
80963: CALL_OW 2
80967: ST_TO_ADDR
80968: GO 80931
80970: POP
80971: POP
// if not tmp then
80972: LD_VAR 0 5
80976: NOT
80977: IFFALSE 80981
// exit ;
80979: GO 81029
// if asc then
80981: LD_VAR 0 2
80985: IFFALSE 81009
// result := SortListByListAsc ( units , tmp ) else
80987: LD_ADDR_VAR 0 3
80991: PUSH
80992: LD_VAR 0 1
80996: PPUSH
80997: LD_VAR 0 5
81001: PPUSH
81002: CALL_OW 76
81006: ST_TO_ADDR
81007: GO 81029
// result := SortListByListDesc ( units , tmp ) ;
81009: LD_ADDR_VAR 0 3
81013: PUSH
81014: LD_VAR 0 1
81018: PPUSH
81019: LD_VAR 0 5
81023: PPUSH
81024: CALL_OW 77
81028: ST_TO_ADDR
// end ;
81029: LD_VAR 0 3
81033: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81034: LD_INT 0
81036: PPUSH
81037: PPUSH
// task := GetTaskList ( mech ) ;
81038: LD_ADDR_VAR 0 4
81042: PUSH
81043: LD_VAR 0 1
81047: PPUSH
81048: CALL_OW 437
81052: ST_TO_ADDR
// if not task then
81053: LD_VAR 0 4
81057: NOT
81058: IFFALSE 81062
// exit ;
81060: GO 81104
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81062: LD_ADDR_VAR 0 3
81066: PUSH
81067: LD_VAR 0 4
81071: PUSH
81072: LD_INT 1
81074: ARRAY
81075: PUSH
81076: LD_INT 1
81078: ARRAY
81079: PUSH
81080: LD_STRING r
81082: EQUAL
81083: PUSH
81084: LD_VAR 0 4
81088: PUSH
81089: LD_INT 1
81091: ARRAY
81092: PUSH
81093: LD_INT 4
81095: ARRAY
81096: PUSH
81097: LD_VAR 0 2
81101: EQUAL
81102: AND
81103: ST_TO_ADDR
// end ;
81104: LD_VAR 0 3
81108: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81109: LD_INT 0
81111: PPUSH
// SetDir ( unit , d ) ;
81112: LD_VAR 0 1
81116: PPUSH
81117: LD_VAR 0 4
81121: PPUSH
81122: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
81126: LD_VAR 0 1
81130: PPUSH
81131: LD_VAR 0 2
81135: PPUSH
81136: LD_VAR 0 3
81140: PPUSH
81141: LD_VAR 0 5
81145: PPUSH
81146: CALL_OW 48
// end ;
81150: LD_VAR 0 6
81154: RET
// export function ToNaturalNumber ( number ) ; begin
81155: LD_INT 0
81157: PPUSH
// result := number div 1 ;
81158: LD_ADDR_VAR 0 2
81162: PUSH
81163: LD_VAR 0 1
81167: PUSH
81168: LD_INT 1
81170: DIV
81171: ST_TO_ADDR
// if number < 0 then
81172: LD_VAR 0 1
81176: PUSH
81177: LD_INT 0
81179: LESS
81180: IFFALSE 81190
// result := 0 ;
81182: LD_ADDR_VAR 0 2
81186: PUSH
81187: LD_INT 0
81189: ST_TO_ADDR
// end ;
81190: LD_VAR 0 2
81194: RET
// export function SortByClass ( units , class ) ; var un ; begin
81195: LD_INT 0
81197: PPUSH
81198: PPUSH
// if not units or not class then
81199: LD_VAR 0 1
81203: NOT
81204: PUSH
81205: LD_VAR 0 2
81209: NOT
81210: OR
81211: IFFALSE 81215
// exit ;
81213: GO 81310
// result := [ ] ;
81215: LD_ADDR_VAR 0 3
81219: PUSH
81220: EMPTY
81221: ST_TO_ADDR
// for un in units do
81222: LD_ADDR_VAR 0 4
81226: PUSH
81227: LD_VAR 0 1
81231: PUSH
81232: FOR_IN
81233: IFFALSE 81308
// if GetClass ( un ) = class then
81235: LD_VAR 0 4
81239: PPUSH
81240: CALL_OW 257
81244: PUSH
81245: LD_VAR 0 2
81249: EQUAL
81250: IFFALSE 81277
// result := Insert ( result , 1 , un ) else
81252: LD_ADDR_VAR 0 3
81256: PUSH
81257: LD_VAR 0 3
81261: PPUSH
81262: LD_INT 1
81264: PPUSH
81265: LD_VAR 0 4
81269: PPUSH
81270: CALL_OW 2
81274: ST_TO_ADDR
81275: GO 81306
// result := Replace ( result , result + 1 , un ) ;
81277: LD_ADDR_VAR 0 3
81281: PUSH
81282: LD_VAR 0 3
81286: PPUSH
81287: LD_VAR 0 3
81291: PUSH
81292: LD_INT 1
81294: PLUS
81295: PPUSH
81296: LD_VAR 0 4
81300: PPUSH
81301: CALL_OW 1
81305: ST_TO_ADDR
81306: GO 81232
81308: POP
81309: POP
// end ;
81310: LD_VAR 0 3
81314: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81315: LD_INT 0
81317: PPUSH
81318: PPUSH
81319: PPUSH
81320: PPUSH
81321: PPUSH
81322: PPUSH
81323: PPUSH
// result := [ ] ;
81324: LD_ADDR_VAR 0 4
81328: PUSH
81329: EMPTY
81330: ST_TO_ADDR
// if x - r < 0 then
81331: LD_VAR 0 1
81335: PUSH
81336: LD_VAR 0 3
81340: MINUS
81341: PUSH
81342: LD_INT 0
81344: LESS
81345: IFFALSE 81357
// min_x := 0 else
81347: LD_ADDR_VAR 0 8
81351: PUSH
81352: LD_INT 0
81354: ST_TO_ADDR
81355: GO 81373
// min_x := x - r ;
81357: LD_ADDR_VAR 0 8
81361: PUSH
81362: LD_VAR 0 1
81366: PUSH
81367: LD_VAR 0 3
81371: MINUS
81372: ST_TO_ADDR
// if y - r < 0 then
81373: LD_VAR 0 2
81377: PUSH
81378: LD_VAR 0 3
81382: MINUS
81383: PUSH
81384: LD_INT 0
81386: LESS
81387: IFFALSE 81399
// min_y := 0 else
81389: LD_ADDR_VAR 0 7
81393: PUSH
81394: LD_INT 0
81396: ST_TO_ADDR
81397: GO 81415
// min_y := y - r ;
81399: LD_ADDR_VAR 0 7
81403: PUSH
81404: LD_VAR 0 2
81408: PUSH
81409: LD_VAR 0 3
81413: MINUS
81414: ST_TO_ADDR
// max_x := x + r ;
81415: LD_ADDR_VAR 0 9
81419: PUSH
81420: LD_VAR 0 1
81424: PUSH
81425: LD_VAR 0 3
81429: PLUS
81430: ST_TO_ADDR
// max_y := y + r ;
81431: LD_ADDR_VAR 0 10
81435: PUSH
81436: LD_VAR 0 2
81440: PUSH
81441: LD_VAR 0 3
81445: PLUS
81446: ST_TO_ADDR
// for _x = min_x to max_x do
81447: LD_ADDR_VAR 0 5
81451: PUSH
81452: DOUBLE
81453: LD_VAR 0 8
81457: DEC
81458: ST_TO_ADDR
81459: LD_VAR 0 9
81463: PUSH
81464: FOR_TO
81465: IFFALSE 81566
// for _y = min_y to max_y do
81467: LD_ADDR_VAR 0 6
81471: PUSH
81472: DOUBLE
81473: LD_VAR 0 7
81477: DEC
81478: ST_TO_ADDR
81479: LD_VAR 0 10
81483: PUSH
81484: FOR_TO
81485: IFFALSE 81562
// begin if not ValidHex ( _x , _y ) then
81487: LD_VAR 0 5
81491: PPUSH
81492: LD_VAR 0 6
81496: PPUSH
81497: CALL_OW 488
81501: NOT
81502: IFFALSE 81506
// continue ;
81504: GO 81484
// if GetResourceTypeXY ( _x , _y ) then
81506: LD_VAR 0 5
81510: PPUSH
81511: LD_VAR 0 6
81515: PPUSH
81516: CALL_OW 283
81520: IFFALSE 81560
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81522: LD_ADDR_VAR 0 4
81526: PUSH
81527: LD_VAR 0 4
81531: PPUSH
81532: LD_VAR 0 4
81536: PUSH
81537: LD_INT 1
81539: PLUS
81540: PPUSH
81541: LD_VAR 0 5
81545: PUSH
81546: LD_VAR 0 6
81550: PUSH
81551: EMPTY
81552: LIST
81553: LIST
81554: PPUSH
81555: CALL_OW 1
81559: ST_TO_ADDR
// end ;
81560: GO 81484
81562: POP
81563: POP
81564: GO 81464
81566: POP
81567: POP
// end ;
81568: LD_VAR 0 4
81572: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81573: LD_INT 0
81575: PPUSH
81576: PPUSH
81577: PPUSH
81578: PPUSH
81579: PPUSH
81580: PPUSH
81581: PPUSH
81582: PPUSH
// if not units then
81583: LD_VAR 0 1
81587: NOT
81588: IFFALSE 81592
// exit ;
81590: GO 82120
// result := UnitFilter ( units , [ f_ok ] ) ;
81592: LD_ADDR_VAR 0 3
81596: PUSH
81597: LD_VAR 0 1
81601: PPUSH
81602: LD_INT 50
81604: PUSH
81605: EMPTY
81606: LIST
81607: PPUSH
81608: CALL_OW 72
81612: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81613: LD_ADDR_VAR 0 8
81617: PUSH
81618: LD_VAR 0 1
81622: PUSH
81623: LD_INT 1
81625: ARRAY
81626: PPUSH
81627: CALL_OW 255
81631: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81632: LD_ADDR_VAR 0 10
81636: PUSH
81637: LD_INT 29
81639: PUSH
81640: LD_INT 91
81642: PUSH
81643: LD_INT 49
81645: PUSH
81646: EMPTY
81647: LIST
81648: LIST
81649: LIST
81650: ST_TO_ADDR
// if not result then
81651: LD_VAR 0 3
81655: NOT
81656: IFFALSE 81660
// exit ;
81658: GO 82120
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81660: LD_ADDR_VAR 0 5
81664: PUSH
81665: LD_INT 81
81667: PUSH
81668: LD_VAR 0 8
81672: PUSH
81673: EMPTY
81674: LIST
81675: LIST
81676: PPUSH
81677: CALL_OW 69
81681: ST_TO_ADDR
// for i in result do
81682: LD_ADDR_VAR 0 4
81686: PUSH
81687: LD_VAR 0 3
81691: PUSH
81692: FOR_IN
81693: IFFALSE 82118
// begin tag := GetTag ( i ) + 1 ;
81695: LD_ADDR_VAR 0 9
81699: PUSH
81700: LD_VAR 0 4
81704: PPUSH
81705: CALL_OW 110
81709: PUSH
81710: LD_INT 1
81712: PLUS
81713: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
81714: LD_ADDR_VAR 0 7
81718: PUSH
81719: LD_VAR 0 4
81723: PPUSH
81724: CALL_OW 250
81728: PPUSH
81729: LD_VAR 0 4
81733: PPUSH
81734: CALL_OW 251
81738: PPUSH
81739: LD_INT 4
81741: PPUSH
81742: CALL 81315 0 3
81746: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
81747: LD_VAR 0 4
81751: PPUSH
81752: CALL_OW 247
81756: PUSH
81757: LD_INT 2
81759: EQUAL
81760: PUSH
81761: LD_VAR 0 7
81765: PUSH
81766: LD_INT 2
81768: GREATER
81769: AND
81770: PUSH
81771: LD_VAR 0 4
81775: PPUSH
81776: CALL_OW 264
81780: PUSH
81781: LD_VAR 0 10
81785: IN
81786: NOT
81787: AND
81788: IFFALSE 81827
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81790: LD_VAR 0 4
81794: PPUSH
81795: LD_VAR 0 7
81799: PUSH
81800: LD_INT 1
81802: ARRAY
81803: PUSH
81804: LD_INT 1
81806: ARRAY
81807: PPUSH
81808: LD_VAR 0 7
81812: PUSH
81813: LD_INT 1
81815: ARRAY
81816: PUSH
81817: LD_INT 2
81819: ARRAY
81820: PPUSH
81821: CALL_OW 116
81825: GO 82116
// if path > tag then
81827: LD_VAR 0 2
81831: PUSH
81832: LD_VAR 0 9
81836: GREATER
81837: IFFALSE 82045
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81839: LD_ADDR_VAR 0 6
81843: PUSH
81844: LD_VAR 0 5
81848: PPUSH
81849: LD_INT 91
81851: PUSH
81852: LD_VAR 0 4
81856: PUSH
81857: LD_INT 8
81859: PUSH
81860: EMPTY
81861: LIST
81862: LIST
81863: LIST
81864: PPUSH
81865: CALL_OW 72
81869: ST_TO_ADDR
// if nearEnemy then
81870: LD_VAR 0 6
81874: IFFALSE 81943
// begin if GetWeapon ( i ) = ru_time_lapser then
81876: LD_VAR 0 4
81880: PPUSH
81881: CALL_OW 264
81885: PUSH
81886: LD_INT 49
81888: EQUAL
81889: IFFALSE 81917
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81891: LD_VAR 0 4
81895: PPUSH
81896: LD_VAR 0 6
81900: PPUSH
81901: LD_VAR 0 4
81905: PPUSH
81906: CALL_OW 74
81910: PPUSH
81911: CALL_OW 112
81915: GO 81941
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81917: LD_VAR 0 4
81921: PPUSH
81922: LD_VAR 0 6
81926: PPUSH
81927: LD_VAR 0 4
81931: PPUSH
81932: CALL_OW 74
81936: PPUSH
81937: CALL 83191 0 2
// end else
81941: GO 82043
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81943: LD_VAR 0 4
81947: PPUSH
81948: LD_VAR 0 2
81952: PUSH
81953: LD_VAR 0 9
81957: ARRAY
81958: PUSH
81959: LD_INT 1
81961: ARRAY
81962: PPUSH
81963: LD_VAR 0 2
81967: PUSH
81968: LD_VAR 0 9
81972: ARRAY
81973: PUSH
81974: LD_INT 2
81976: ARRAY
81977: PPUSH
81978: CALL_OW 297
81982: PUSH
81983: LD_INT 6
81985: GREATER
81986: IFFALSE 82029
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81988: LD_VAR 0 4
81992: PPUSH
81993: LD_VAR 0 2
81997: PUSH
81998: LD_VAR 0 9
82002: ARRAY
82003: PUSH
82004: LD_INT 1
82006: ARRAY
82007: PPUSH
82008: LD_VAR 0 2
82012: PUSH
82013: LD_VAR 0 9
82017: ARRAY
82018: PUSH
82019: LD_INT 2
82021: ARRAY
82022: PPUSH
82023: CALL_OW 114
82027: GO 82043
// SetTag ( i , tag ) ;
82029: LD_VAR 0 4
82033: PPUSH
82034: LD_VAR 0 9
82038: PPUSH
82039: CALL_OW 109
// end else
82043: GO 82116
// if enemy then
82045: LD_VAR 0 5
82049: IFFALSE 82116
// begin if GetWeapon ( i ) = ru_time_lapser then
82051: LD_VAR 0 4
82055: PPUSH
82056: CALL_OW 264
82060: PUSH
82061: LD_INT 49
82063: EQUAL
82064: IFFALSE 82092
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82066: LD_VAR 0 4
82070: PPUSH
82071: LD_VAR 0 5
82075: PPUSH
82076: LD_VAR 0 4
82080: PPUSH
82081: CALL_OW 74
82085: PPUSH
82086: CALL_OW 112
82090: GO 82116
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82092: LD_VAR 0 4
82096: PPUSH
82097: LD_VAR 0 5
82101: PPUSH
82102: LD_VAR 0 4
82106: PPUSH
82107: CALL_OW 74
82111: PPUSH
82112: CALL 83191 0 2
// end ; end ;
82116: GO 81692
82118: POP
82119: POP
// end ;
82120: LD_VAR 0 3
82124: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82125: LD_INT 0
82127: PPUSH
82128: PPUSH
82129: PPUSH
// if not unit or IsInUnit ( unit ) then
82130: LD_VAR 0 1
82134: NOT
82135: PUSH
82136: LD_VAR 0 1
82140: PPUSH
82141: CALL_OW 310
82145: OR
82146: IFFALSE 82150
// exit ;
82148: GO 82241
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82150: LD_ADDR_VAR 0 4
82154: PUSH
82155: LD_VAR 0 1
82159: PPUSH
82160: CALL_OW 250
82164: PPUSH
82165: LD_VAR 0 2
82169: PPUSH
82170: LD_INT 1
82172: PPUSH
82173: CALL_OW 272
82177: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82178: LD_ADDR_VAR 0 5
82182: PUSH
82183: LD_VAR 0 1
82187: PPUSH
82188: CALL_OW 251
82192: PPUSH
82193: LD_VAR 0 2
82197: PPUSH
82198: LD_INT 1
82200: PPUSH
82201: CALL_OW 273
82205: ST_TO_ADDR
// if ValidHex ( x , y ) then
82206: LD_VAR 0 4
82210: PPUSH
82211: LD_VAR 0 5
82215: PPUSH
82216: CALL_OW 488
82220: IFFALSE 82241
// ComTurnXY ( unit , x , y ) ;
82222: LD_VAR 0 1
82226: PPUSH
82227: LD_VAR 0 4
82231: PPUSH
82232: LD_VAR 0 5
82236: PPUSH
82237: CALL_OW 118
// end ;
82241: LD_VAR 0 3
82245: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82246: LD_INT 0
82248: PPUSH
82249: PPUSH
// result := false ;
82250: LD_ADDR_VAR 0 3
82254: PUSH
82255: LD_INT 0
82257: ST_TO_ADDR
// if not units then
82258: LD_VAR 0 2
82262: NOT
82263: IFFALSE 82267
// exit ;
82265: GO 82312
// for i in units do
82267: LD_ADDR_VAR 0 4
82271: PUSH
82272: LD_VAR 0 2
82276: PUSH
82277: FOR_IN
82278: IFFALSE 82310
// if See ( side , i ) then
82280: LD_VAR 0 1
82284: PPUSH
82285: LD_VAR 0 4
82289: PPUSH
82290: CALL_OW 292
82294: IFFALSE 82308
// begin result := true ;
82296: LD_ADDR_VAR 0 3
82300: PUSH
82301: LD_INT 1
82303: ST_TO_ADDR
// exit ;
82304: POP
82305: POP
82306: GO 82312
// end ;
82308: GO 82277
82310: POP
82311: POP
// end ;
82312: LD_VAR 0 3
82316: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82317: LD_INT 0
82319: PPUSH
82320: PPUSH
82321: PPUSH
82322: PPUSH
// if not unit or not points then
82323: LD_VAR 0 1
82327: NOT
82328: PUSH
82329: LD_VAR 0 2
82333: NOT
82334: OR
82335: IFFALSE 82339
// exit ;
82337: GO 82429
// dist := 99999 ;
82339: LD_ADDR_VAR 0 5
82343: PUSH
82344: LD_INT 99999
82346: ST_TO_ADDR
// for i in points do
82347: LD_ADDR_VAR 0 4
82351: PUSH
82352: LD_VAR 0 2
82356: PUSH
82357: FOR_IN
82358: IFFALSE 82427
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82360: LD_ADDR_VAR 0 6
82364: PUSH
82365: LD_VAR 0 1
82369: PPUSH
82370: LD_VAR 0 4
82374: PUSH
82375: LD_INT 1
82377: ARRAY
82378: PPUSH
82379: LD_VAR 0 4
82383: PUSH
82384: LD_INT 2
82386: ARRAY
82387: PPUSH
82388: CALL_OW 297
82392: ST_TO_ADDR
// if tmpDist < dist then
82393: LD_VAR 0 6
82397: PUSH
82398: LD_VAR 0 5
82402: LESS
82403: IFFALSE 82425
// begin result := i ;
82405: LD_ADDR_VAR 0 3
82409: PUSH
82410: LD_VAR 0 4
82414: ST_TO_ADDR
// dist := tmpDist ;
82415: LD_ADDR_VAR 0 5
82419: PUSH
82420: LD_VAR 0 6
82424: ST_TO_ADDR
// end ; end ;
82425: GO 82357
82427: POP
82428: POP
// end ;
82429: LD_VAR 0 3
82433: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82434: LD_INT 0
82436: PPUSH
// uc_side := side ;
82437: LD_ADDR_OWVAR 20
82441: PUSH
82442: LD_VAR 0 1
82446: ST_TO_ADDR
// uc_nation := 3 ;
82447: LD_ADDR_OWVAR 21
82451: PUSH
82452: LD_INT 3
82454: ST_TO_ADDR
// vc_chassis := 25 ;
82455: LD_ADDR_OWVAR 37
82459: PUSH
82460: LD_INT 25
82462: ST_TO_ADDR
// vc_engine := engine_siberite ;
82463: LD_ADDR_OWVAR 39
82467: PUSH
82468: LD_INT 3
82470: ST_TO_ADDR
// vc_control := control_computer ;
82471: LD_ADDR_OWVAR 38
82475: PUSH
82476: LD_INT 3
82478: ST_TO_ADDR
// vc_weapon := 59 ;
82479: LD_ADDR_OWVAR 40
82483: PUSH
82484: LD_INT 59
82486: ST_TO_ADDR
// result := CreateVehicle ;
82487: LD_ADDR_VAR 0 5
82491: PUSH
82492: CALL_OW 45
82496: ST_TO_ADDR
// SetDir ( result , d ) ;
82497: LD_VAR 0 5
82501: PPUSH
82502: LD_VAR 0 4
82506: PPUSH
82507: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82511: LD_VAR 0 5
82515: PPUSH
82516: LD_VAR 0 2
82520: PPUSH
82521: LD_VAR 0 3
82525: PPUSH
82526: LD_INT 0
82528: PPUSH
82529: CALL_OW 48
// end ;
82533: LD_VAR 0 5
82537: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82538: LD_INT 0
82540: PPUSH
82541: PPUSH
82542: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82543: LD_ADDR_VAR 0 2
82547: PUSH
82548: LD_INT 0
82550: PUSH
82551: LD_INT 0
82553: PUSH
82554: LD_INT 0
82556: PUSH
82557: LD_INT 0
82559: PUSH
82560: EMPTY
82561: LIST
82562: LIST
82563: LIST
82564: LIST
82565: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82566: LD_VAR 0 1
82570: NOT
82571: PUSH
82572: LD_VAR 0 1
82576: PPUSH
82577: CALL_OW 264
82581: PUSH
82582: LD_INT 12
82584: PUSH
82585: LD_INT 51
82587: PUSH
82588: LD_INT 32
82590: PUSH
82591: LD_INT 89
82593: PUSH
82594: EMPTY
82595: LIST
82596: LIST
82597: LIST
82598: LIST
82599: IN
82600: NOT
82601: OR
82602: IFFALSE 82606
// exit ;
82604: GO 82704
// for i := 1 to 3 do
82606: LD_ADDR_VAR 0 3
82610: PUSH
82611: DOUBLE
82612: LD_INT 1
82614: DEC
82615: ST_TO_ADDR
82616: LD_INT 3
82618: PUSH
82619: FOR_TO
82620: IFFALSE 82702
// begin tmp := GetCargo ( cargo , i ) ;
82622: LD_ADDR_VAR 0 4
82626: PUSH
82627: LD_VAR 0 1
82631: PPUSH
82632: LD_VAR 0 3
82636: PPUSH
82637: CALL_OW 289
82641: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82642: LD_ADDR_VAR 0 2
82646: PUSH
82647: LD_VAR 0 2
82651: PPUSH
82652: LD_VAR 0 3
82656: PPUSH
82657: LD_VAR 0 4
82661: PPUSH
82662: CALL_OW 1
82666: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82667: LD_ADDR_VAR 0 2
82671: PUSH
82672: LD_VAR 0 2
82676: PPUSH
82677: LD_INT 4
82679: PPUSH
82680: LD_VAR 0 2
82684: PUSH
82685: LD_INT 4
82687: ARRAY
82688: PUSH
82689: LD_VAR 0 4
82693: PLUS
82694: PPUSH
82695: CALL_OW 1
82699: ST_TO_ADDR
// end ;
82700: GO 82619
82702: POP
82703: POP
// end ;
82704: LD_VAR 0 2
82708: RET
// export function Length ( array ) ; begin
82709: LD_INT 0
82711: PPUSH
// result := array + 0 ;
82712: LD_ADDR_VAR 0 2
82716: PUSH
82717: LD_VAR 0 1
82721: PUSH
82722: LD_INT 0
82724: PLUS
82725: ST_TO_ADDR
// end ;
82726: LD_VAR 0 2
82730: RET
// export function PrepareArray ( array ) ; begin
82731: LD_INT 0
82733: PPUSH
// result := array diff 0 ;
82734: LD_ADDR_VAR 0 2
82738: PUSH
82739: LD_VAR 0 1
82743: PUSH
82744: LD_INT 0
82746: DIFF
82747: ST_TO_ADDR
// if not result [ 1 ] then
82748: LD_VAR 0 2
82752: PUSH
82753: LD_INT 1
82755: ARRAY
82756: NOT
82757: IFFALSE 82777
// result := Delete ( result , 1 ) ;
82759: LD_ADDR_VAR 0 2
82763: PUSH
82764: LD_VAR 0 2
82768: PPUSH
82769: LD_INT 1
82771: PPUSH
82772: CALL_OW 3
82776: ST_TO_ADDR
// end ;
82777: LD_VAR 0 2
82781: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82782: LD_INT 0
82784: PPUSH
82785: PPUSH
82786: PPUSH
82787: PPUSH
// sibRocketRange := 25 ;
82788: LD_ADDR_VAR 0 6
82792: PUSH
82793: LD_INT 25
82795: ST_TO_ADDR
// result := false ;
82796: LD_ADDR_VAR 0 4
82800: PUSH
82801: LD_INT 0
82803: ST_TO_ADDR
// for i := 0 to 5 do
82804: LD_ADDR_VAR 0 5
82808: PUSH
82809: DOUBLE
82810: LD_INT 0
82812: DEC
82813: ST_TO_ADDR
82814: LD_INT 5
82816: PUSH
82817: FOR_TO
82818: IFFALSE 82885
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82820: LD_VAR 0 1
82824: PPUSH
82825: LD_VAR 0 5
82829: PPUSH
82830: LD_VAR 0 6
82834: PPUSH
82835: CALL_OW 272
82839: PPUSH
82840: LD_VAR 0 2
82844: PPUSH
82845: LD_VAR 0 5
82849: PPUSH
82850: LD_VAR 0 6
82854: PPUSH
82855: CALL_OW 273
82859: PPUSH
82860: LD_VAR 0 3
82864: PPUSH
82865: CALL_OW 309
82869: IFFALSE 82883
// begin result := true ;
82871: LD_ADDR_VAR 0 4
82875: PUSH
82876: LD_INT 1
82878: ST_TO_ADDR
// exit ;
82879: POP
82880: POP
82881: GO 82887
// end ;
82883: GO 82817
82885: POP
82886: POP
// end ;
82887: LD_VAR 0 4
82891: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
82892: LD_INT 0
82894: PPUSH
82895: PPUSH
82896: PPUSH
// if btype = b_depot then
82897: LD_VAR 0 2
82901: PUSH
82902: LD_INT 0
82904: EQUAL
82905: IFFALSE 82917
// begin result := true ;
82907: LD_ADDR_VAR 0 3
82911: PUSH
82912: LD_INT 1
82914: ST_TO_ADDR
// exit ;
82915: GO 83033
// end ; pom := GetBase ( depot ) ;
82917: LD_ADDR_VAR 0 4
82921: PUSH
82922: LD_VAR 0 1
82926: PPUSH
82927: CALL_OW 274
82931: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
82932: LD_ADDR_VAR 0 5
82936: PUSH
82937: LD_VAR 0 2
82941: PPUSH
82942: LD_VAR 0 1
82946: PPUSH
82947: CALL_OW 248
82951: PPUSH
82952: CALL_OW 450
82956: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
82957: LD_ADDR_VAR 0 3
82961: PUSH
82962: LD_VAR 0 4
82966: PPUSH
82967: LD_INT 1
82969: PPUSH
82970: CALL_OW 275
82974: PUSH
82975: LD_VAR 0 5
82979: PUSH
82980: LD_INT 1
82982: ARRAY
82983: GREATEREQUAL
82984: PUSH
82985: LD_VAR 0 4
82989: PPUSH
82990: LD_INT 2
82992: PPUSH
82993: CALL_OW 275
82997: PUSH
82998: LD_VAR 0 5
83002: PUSH
83003: LD_INT 2
83005: ARRAY
83006: GREATEREQUAL
83007: AND
83008: PUSH
83009: LD_VAR 0 4
83013: PPUSH
83014: LD_INT 3
83016: PPUSH
83017: CALL_OW 275
83021: PUSH
83022: LD_VAR 0 5
83026: PUSH
83027: LD_INT 3
83029: ARRAY
83030: GREATEREQUAL
83031: AND
83032: ST_TO_ADDR
// end ;
83033: LD_VAR 0 3
83037: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83038: LD_INT 0
83040: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83041: LD_VAR 0 1
83045: PPUSH
83046: LD_VAR 0 2
83050: PPUSH
83051: LD_INT 0
83053: PPUSH
83054: LD_INT 0
83056: PPUSH
83057: LD_INT 1
83059: PPUSH
83060: LD_INT 0
83062: PPUSH
83063: CALL_OW 587
// end ;
83067: LD_VAR 0 3
83071: RET
// export function CenterOnNow ( unit ) ; begin
83072: LD_INT 0
83074: PPUSH
// result := IsInUnit ( unit ) ;
83075: LD_ADDR_VAR 0 2
83079: PUSH
83080: LD_VAR 0 1
83084: PPUSH
83085: CALL_OW 310
83089: ST_TO_ADDR
// if not result then
83090: LD_VAR 0 2
83094: NOT
83095: IFFALSE 83107
// result := unit ;
83097: LD_ADDR_VAR 0 2
83101: PUSH
83102: LD_VAR 0 1
83106: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83107: LD_VAR 0 1
83111: PPUSH
83112: CALL_OW 87
// end ;
83116: LD_VAR 0 2
83120: RET
// export function ComMoveHex ( unit , hex ) ; begin
83121: LD_INT 0
83123: PPUSH
// if not hex then
83124: LD_VAR 0 2
83128: NOT
83129: IFFALSE 83133
// exit ;
83131: GO 83186
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83133: LD_VAR 0 2
83137: PUSH
83138: LD_INT 1
83140: ARRAY
83141: PPUSH
83142: LD_VAR 0 2
83146: PUSH
83147: LD_INT 2
83149: ARRAY
83150: PPUSH
83151: CALL_OW 428
83155: IFFALSE 83159
// exit ;
83157: GO 83186
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83159: LD_VAR 0 1
83163: PPUSH
83164: LD_VAR 0 2
83168: PUSH
83169: LD_INT 1
83171: ARRAY
83172: PPUSH
83173: LD_VAR 0 2
83177: PUSH
83178: LD_INT 2
83180: ARRAY
83181: PPUSH
83182: CALL_OW 111
// end ;
83186: LD_VAR 0 3
83190: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83191: LD_INT 0
83193: PPUSH
83194: PPUSH
83195: PPUSH
// if not unit or not enemy then
83196: LD_VAR 0 1
83200: NOT
83201: PUSH
83202: LD_VAR 0 2
83206: NOT
83207: OR
83208: IFFALSE 83212
// exit ;
83210: GO 83336
// x := GetX ( enemy ) ;
83212: LD_ADDR_VAR 0 4
83216: PUSH
83217: LD_VAR 0 2
83221: PPUSH
83222: CALL_OW 250
83226: ST_TO_ADDR
// y := GetY ( enemy ) ;
83227: LD_ADDR_VAR 0 5
83231: PUSH
83232: LD_VAR 0 2
83236: PPUSH
83237: CALL_OW 251
83241: ST_TO_ADDR
// if ValidHex ( x , y ) then
83242: LD_VAR 0 4
83246: PPUSH
83247: LD_VAR 0 5
83251: PPUSH
83252: CALL_OW 488
83256: IFFALSE 83336
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83258: LD_VAR 0 2
83262: PPUSH
83263: CALL_OW 247
83267: PUSH
83268: LD_INT 3
83270: PUSH
83271: LD_INT 2
83273: PUSH
83274: EMPTY
83275: LIST
83276: LIST
83277: IN
83278: PUSH
83279: LD_VAR 0 1
83283: PPUSH
83284: CALL_OW 255
83288: PPUSH
83289: LD_VAR 0 2
83293: PPUSH
83294: CALL_OW 292
83298: OR
83299: IFFALSE 83317
// ComAttackUnit ( unit , enemy ) else
83301: LD_VAR 0 1
83305: PPUSH
83306: LD_VAR 0 2
83310: PPUSH
83311: CALL_OW 115
83315: GO 83336
// ComAgressiveMove ( unit , x , y ) ;
83317: LD_VAR 0 1
83321: PPUSH
83322: LD_VAR 0 4
83326: PPUSH
83327: LD_VAR 0 5
83331: PPUSH
83332: CALL_OW 114
// end ;
83336: LD_VAR 0 3
83340: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83341: LD_INT 0
83343: PPUSH
83344: PPUSH
83345: PPUSH
// list := AreaToList ( area , 0 ) ;
83346: LD_ADDR_VAR 0 5
83350: PUSH
83351: LD_VAR 0 1
83355: PPUSH
83356: LD_INT 0
83358: PPUSH
83359: CALL_OW 517
83363: ST_TO_ADDR
// if not list then
83364: LD_VAR 0 5
83368: NOT
83369: IFFALSE 83373
// exit ;
83371: GO 83503
// if all then
83373: LD_VAR 0 2
83377: IFFALSE 83465
// begin for i := 1 to list [ 1 ] do
83379: LD_ADDR_VAR 0 4
83383: PUSH
83384: DOUBLE
83385: LD_INT 1
83387: DEC
83388: ST_TO_ADDR
83389: LD_VAR 0 5
83393: PUSH
83394: LD_INT 1
83396: ARRAY
83397: PUSH
83398: FOR_TO
83399: IFFALSE 83461
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83401: LD_ADDR_VAR 0 3
83405: PUSH
83406: LD_VAR 0 3
83410: PPUSH
83411: LD_VAR 0 3
83415: PUSH
83416: LD_INT 1
83418: PLUS
83419: PPUSH
83420: LD_VAR 0 5
83424: PUSH
83425: LD_INT 1
83427: ARRAY
83428: PUSH
83429: LD_VAR 0 4
83433: ARRAY
83434: PUSH
83435: LD_VAR 0 5
83439: PUSH
83440: LD_INT 2
83442: ARRAY
83443: PUSH
83444: LD_VAR 0 4
83448: ARRAY
83449: PUSH
83450: EMPTY
83451: LIST
83452: LIST
83453: PPUSH
83454: CALL_OW 1
83458: ST_TO_ADDR
83459: GO 83398
83461: POP
83462: POP
// exit ;
83463: GO 83503
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83465: LD_ADDR_VAR 0 3
83469: PUSH
83470: LD_VAR 0 5
83474: PUSH
83475: LD_INT 1
83477: ARRAY
83478: PUSH
83479: LD_INT 1
83481: ARRAY
83482: PUSH
83483: LD_VAR 0 5
83487: PUSH
83488: LD_INT 2
83490: ARRAY
83491: PUSH
83492: LD_INT 1
83494: ARRAY
83495: PUSH
83496: EMPTY
83497: LIST
83498: LIST
83499: PUSH
83500: EMPTY
83501: LIST
83502: ST_TO_ADDR
// end ;
83503: LD_VAR 0 3
83507: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83508: LD_INT 0
83510: PPUSH
83511: PPUSH
// list := AreaToList ( area , 0 ) ;
83512: LD_ADDR_VAR 0 4
83516: PUSH
83517: LD_VAR 0 1
83521: PPUSH
83522: LD_INT 0
83524: PPUSH
83525: CALL_OW 517
83529: ST_TO_ADDR
// if not list then
83530: LD_VAR 0 4
83534: NOT
83535: IFFALSE 83539
// exit ;
83537: GO 83580
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83539: LD_ADDR_VAR 0 3
83543: PUSH
83544: LD_VAR 0 4
83548: PUSH
83549: LD_INT 1
83551: ARRAY
83552: PUSH
83553: LD_INT 1
83555: ARRAY
83556: PUSH
83557: LD_VAR 0 4
83561: PUSH
83562: LD_INT 2
83564: ARRAY
83565: PUSH
83566: LD_INT 1
83568: ARRAY
83569: PUSH
83570: LD_VAR 0 2
83574: PUSH
83575: EMPTY
83576: LIST
83577: LIST
83578: LIST
83579: ST_TO_ADDR
// end ;
83580: LD_VAR 0 3
83584: RET
// export function First ( array ) ; begin
83585: LD_INT 0
83587: PPUSH
// if not array then
83588: LD_VAR 0 1
83592: NOT
83593: IFFALSE 83597
// exit ;
83595: GO 83611
// result := array [ 1 ] ;
83597: LD_ADDR_VAR 0 2
83601: PUSH
83602: LD_VAR 0 1
83606: PUSH
83607: LD_INT 1
83609: ARRAY
83610: ST_TO_ADDR
// end ;
83611: LD_VAR 0 2
83615: RET
// export function Last ( array ) ; begin
83616: LD_INT 0
83618: PPUSH
// if not array then
83619: LD_VAR 0 1
83623: NOT
83624: IFFALSE 83628
// exit ;
83626: GO 83644
// result := array [ array ] ;
83628: LD_ADDR_VAR 0 2
83632: PUSH
83633: LD_VAR 0 1
83637: PUSH
83638: LD_VAR 0 1
83642: ARRAY
83643: ST_TO_ADDR
// end ;
83644: LD_VAR 0 2
83648: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83649: LD_INT 0
83651: PPUSH
83652: PPUSH
// result := [ ] ;
83653: LD_ADDR_VAR 0 5
83657: PUSH
83658: EMPTY
83659: ST_TO_ADDR
// if not array then
83660: LD_VAR 0 1
83664: NOT
83665: IFFALSE 83669
// exit ;
83667: GO 83781
// for i := 1 to array do
83669: LD_ADDR_VAR 0 6
83673: PUSH
83674: DOUBLE
83675: LD_INT 1
83677: DEC
83678: ST_TO_ADDR
83679: LD_VAR 0 1
83683: PUSH
83684: FOR_TO
83685: IFFALSE 83779
// if array [ i ] [ index ] = value then
83687: LD_VAR 0 1
83691: PUSH
83692: LD_VAR 0 6
83696: ARRAY
83697: PUSH
83698: LD_VAR 0 2
83702: ARRAY
83703: PUSH
83704: LD_VAR 0 3
83708: EQUAL
83709: IFFALSE 83777
// begin if indexColumn then
83711: LD_VAR 0 4
83715: IFFALSE 83751
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83717: LD_ADDR_VAR 0 5
83721: PUSH
83722: LD_VAR 0 5
83726: PPUSH
83727: LD_VAR 0 1
83731: PUSH
83732: LD_VAR 0 6
83736: ARRAY
83737: PUSH
83738: LD_VAR 0 4
83742: ARRAY
83743: PPUSH
83744: CALL 78969 0 2
83748: ST_TO_ADDR
83749: GO 83777
// result := Join ( result , array [ i ] ) ;
83751: LD_ADDR_VAR 0 5
83755: PUSH
83756: LD_VAR 0 5
83760: PPUSH
83761: LD_VAR 0 1
83765: PUSH
83766: LD_VAR 0 6
83770: ARRAY
83771: PPUSH
83772: CALL 78969 0 2
83776: ST_TO_ADDR
// end ;
83777: GO 83684
83779: POP
83780: POP
// end ;
83781: LD_VAR 0 5
83785: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83786: LD_INT 0
83788: PPUSH
// if not vehicles or not parkingPoint then
83789: LD_VAR 0 1
83793: NOT
83794: PUSH
83795: LD_VAR 0 2
83799: NOT
83800: OR
83801: IFFALSE 83805
// exit ;
83803: GO 83903
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83805: LD_ADDR_VAR 0 1
83809: PUSH
83810: LD_VAR 0 1
83814: PPUSH
83815: LD_INT 50
83817: PUSH
83818: EMPTY
83819: LIST
83820: PUSH
83821: LD_INT 3
83823: PUSH
83824: LD_INT 92
83826: PUSH
83827: LD_VAR 0 2
83831: PUSH
83832: LD_INT 1
83834: ARRAY
83835: PUSH
83836: LD_VAR 0 2
83840: PUSH
83841: LD_INT 2
83843: ARRAY
83844: PUSH
83845: LD_INT 8
83847: PUSH
83848: EMPTY
83849: LIST
83850: LIST
83851: LIST
83852: LIST
83853: PUSH
83854: EMPTY
83855: LIST
83856: LIST
83857: PUSH
83858: EMPTY
83859: LIST
83860: LIST
83861: PPUSH
83862: CALL_OW 72
83866: ST_TO_ADDR
// if not vehicles then
83867: LD_VAR 0 1
83871: NOT
83872: IFFALSE 83876
// exit ;
83874: GO 83903
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83876: LD_VAR 0 1
83880: PPUSH
83881: LD_VAR 0 2
83885: PUSH
83886: LD_INT 1
83888: ARRAY
83889: PPUSH
83890: LD_VAR 0 2
83894: PUSH
83895: LD_INT 2
83897: ARRAY
83898: PPUSH
83899: CALL_OW 111
// end ;
83903: LD_VAR 0 3
83907: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
83908: LD_INT 0
83910: PPUSH
83911: PPUSH
83912: PPUSH
// if not side or not area then
83913: LD_VAR 0 1
83917: NOT
83918: PUSH
83919: LD_VAR 0 2
83923: NOT
83924: OR
83925: IFFALSE 83929
// exit ;
83927: GO 84048
// tmp := AreaToList ( area , 0 ) ;
83929: LD_ADDR_VAR 0 5
83933: PUSH
83934: LD_VAR 0 2
83938: PPUSH
83939: LD_INT 0
83941: PPUSH
83942: CALL_OW 517
83946: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
83947: LD_ADDR_VAR 0 4
83951: PUSH
83952: DOUBLE
83953: LD_INT 1
83955: DEC
83956: ST_TO_ADDR
83957: LD_VAR 0 5
83961: PUSH
83962: LD_INT 1
83964: ARRAY
83965: PUSH
83966: FOR_TO
83967: IFFALSE 84046
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
83969: LD_VAR 0 5
83973: PUSH
83974: LD_INT 1
83976: ARRAY
83977: PUSH
83978: LD_VAR 0 4
83982: ARRAY
83983: PPUSH
83984: LD_VAR 0 5
83988: PUSH
83989: LD_INT 2
83991: ARRAY
83992: PUSH
83993: LD_VAR 0 4
83997: ARRAY
83998: PPUSH
83999: CALL_OW 351
84003: IFFALSE 84044
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84005: LD_VAR 0 5
84009: PUSH
84010: LD_INT 1
84012: ARRAY
84013: PUSH
84014: LD_VAR 0 4
84018: ARRAY
84019: PPUSH
84020: LD_VAR 0 5
84024: PUSH
84025: LD_INT 2
84027: ARRAY
84028: PUSH
84029: LD_VAR 0 4
84033: ARRAY
84034: PPUSH
84035: LD_VAR 0 1
84039: PPUSH
84040: CALL_OW 244
// end ;
84044: GO 83966
84046: POP
84047: POP
// end ; end_of_file
84048: LD_VAR 0 3
84052: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84053: LD_VAR 0 1
84057: PUSH
84058: LD_INT 200
84060: DOUBLE
84061: GREATEREQUAL
84062: IFFALSE 84070
84064: LD_INT 299
84066: DOUBLE
84067: LESSEQUAL
84068: IFTRUE 84072
84070: GO 84104
84072: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84073: LD_VAR 0 1
84077: PPUSH
84078: LD_VAR 0 2
84082: PPUSH
84083: LD_VAR 0 3
84087: PPUSH
84088: LD_VAR 0 4
84092: PPUSH
84093: LD_VAR 0 5
84097: PPUSH
84098: CALL 36538 0 5
84102: GO 84181
84104: LD_INT 300
84106: DOUBLE
84107: GREATEREQUAL
84108: IFFALSE 84116
84110: LD_INT 399
84112: DOUBLE
84113: LESSEQUAL
84114: IFTRUE 84118
84116: GO 84180
84118: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84119: LD_VAR 0 1
84123: PPUSH
84124: LD_VAR 0 2
84128: PPUSH
84129: LD_VAR 0 3
84133: PPUSH
84134: LD_VAR 0 4
84138: PPUSH
84139: LD_VAR 0 5
84143: PPUSH
84144: LD_VAR 0 6
84148: PPUSH
84149: LD_VAR 0 7
84153: PPUSH
84154: LD_VAR 0 8
84158: PPUSH
84159: LD_VAR 0 9
84163: PPUSH
84164: LD_VAR 0 10
84168: PPUSH
84169: LD_VAR 0 11
84173: PPUSH
84174: CALL 32526 0 11
84178: GO 84181
84180: POP
// end ;
84181: PPOPN 11
84183: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84184: LD_VAR 0 1
84188: PPUSH
84189: LD_VAR 0 2
84193: PPUSH
84194: LD_VAR 0 3
84198: PPUSH
84199: LD_VAR 0 4
84203: PPUSH
84204: LD_VAR 0 5
84208: PPUSH
84209: CALL 36003 0 5
// end ; end_of_file
84213: PPOPN 5
84215: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84216: LD_VAR 0 1
84220: PPUSH
84221: LD_VAR 0 2
84225: PPUSH
84226: LD_VAR 0 3
84230: PPUSH
84231: LD_VAR 0 4
84235: PPUSH
84236: LD_VAR 0 5
84240: PPUSH
84241: LD_VAR 0 6
84245: PPUSH
84246: CALL 20178 0 6
// end ;
84250: PPOPN 6
84252: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84253: LD_INT 0
84255: PPUSH
// begin if not units then
84256: LD_VAR 0 1
84260: NOT
84261: IFFALSE 84265
// exit ;
84263: GO 84265
// end ;
84265: PPOPN 7
84267: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84268: CALL 20065 0 0
// end ;
84272: PPOPN 1
84274: END
