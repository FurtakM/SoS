// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 48
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 49
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 45
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// bonusAvalaible = 0 ;
  68: LD_ADDR_EXP 44
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// firstRussianAttack = 0 ;
  76: LD_ADDR_EXP 23
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// saveDonaldson = 0 ;
  84: LD_ADDR_EXP 24
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// frankScoutBase = 0 ;
  92: LD_ADDR_EXP 25
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// harrAnswer = 0 ;
 100: LD_ADDR_EXP 26
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 108: LD_ADDR_EXP 27
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 116: LD_ADDR_EXP 28
 120: PUSH
 121: LD_INT 18900
 123: ST_TO_ADDR
// timerStatus = 0 ;
 124: LD_ADDR_EXP 29
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// startTimer = 0 ;
 132: LD_ADDR_EXP 30
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// factoryDialog = 0 ;
 140: LD_ADDR_EXP 31
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// bunkerDialog = 0 ;
 148: LD_ADDR_EXP 32
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// energyVDialog = 0 ;
 156: LD_ADDR_EXP 33
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildOil = 0 ;
 164: LD_ADDR_EXP 34
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// buildPower = 0 ;
 172: LD_ADDR_EXP 35
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 180: LD_ADDR_EXP 36
 184: PUSH
 185: LD_INT 14
 187: PUSH
 188: LD_INT 12
 190: PUSH
 191: LD_INT 11
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_OWVAR 67
 203: ARRAY
 204: ST_TO_ADDR
// AIEnable = 1 ;
 205: LD_ADDR_EXP 37
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 213: LD_ADDR_EXP 41
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// lostCounter = 0 ;
 221: LD_ADDR_EXP 38
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// honor = 1 ;
 229: LD_ADDR_EXP 39
 233: PUSH
 234: LD_INT 1
 236: ST_TO_ADDR
// escapeAvalaible = 0 ;
 237: LD_ADDR_EXP 40
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// specAttack := false ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// ruMobile := [ ] ;
 253: LD_ADDR_EXP 46
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// ruMech := [ 3 , 4 , 6 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 43
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: LD_INT 6
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: PUSH
 279: LD_OWVAR 67
 283: ARRAY
 284: ST_TO_ADDR
// PrepareDifficulty ;
 285: CALL 4714 0 0
// PrepareRussianBase ;
 289: CALL 3006 0 0
// PrepareRussianCommander ;
 293: CALL 2957 0 0
// PrepareHeroes ;
 297: CALL 479 0 0
// SetBName ( ambdept0 , gamma ) ;
 301: LD_INT 4
 303: PPUSH
 304: LD_STRING gamma
 306: PPUSH
 307: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 311: LD_INT 21
 313: PPUSH
 314: LD_STRING fyodor
 316: PPUSH
 317: CALL_OW 500
// end ;
 321: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 322: LD_EXP 45
 326: PUSH
 327: LD_INT 1
 329: EQUAL
 330: IFFALSE 435
 332: GO 334
 334: DISABLE
 335: LD_INT 0
 337: PPUSH
// begin enable ;
 338: ENABLE
// fogoff ( true ) ;
 339: LD_INT 1
 341: PPUSH
 342: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 346: LD_ADDR_VAR 0 1
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 1
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: FOR_IN
 381: IFFALSE 397
// SetLives ( i , 1000 ) ;
 383: LD_VAR 0 1
 387: PPUSH
 388: LD_INT 1000
 390: PPUSH
 391: CALL_OW 234
 395: GO 380
 397: POP
 398: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 399: LD_INT 4
 401: PPUSH
 402: CALL_OW 274
 406: PPUSH
 407: LD_INT 1
 409: PPUSH
 410: LD_INT 9999
 412: PPUSH
 413: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 417: LD_INT 4
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 2
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
// end ;
 435: PPOPN 1
 437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 438: LD_INT 22
 440: PUSH
 441: LD_INT 1
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 34
 450: PUSH
 451: LD_INT 44
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PPUSH
 462: CALL_OW 69
 466: IFFALSE 478
 468: GO 470
 470: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 471: LD_STRING ACH_GUN
 473: PPUSH
 474: CALL_OW 543
 478: END
// export function PrepareHeroes ; var i , tmp ; begin
 479: LD_INT 0
 481: PPUSH
 482: PPUSH
 483: PPUSH
// uc_side = 1 ;
 484: LD_ADDR_OWVAR 20
 488: PUSH
 489: LD_INT 1
 491: ST_TO_ADDR
// uc_nation = 1 ;
 492: LD_ADDR_OWVAR 21
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 500: LD_ADDR_EXP 1
 504: PUSH
 505: LD_STRING JMM
 507: PPUSH
 508: LD_INT 1
 510: PPUSH
 511: LD_EXP 49
 515: PPUSH
 516: CALL 37201 0 3
 520: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 521: LD_ADDR_EXP 4
 525: PUSH
 526: LD_STRING Lisa
 528: PPUSH
 529: LD_INT 1
 531: PPUSH
 532: LD_EXP 49
 536: PPUSH
 537: CALL 37201 0 3
 541: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 7
 546: PUSH
 547: LD_STRING Brown
 549: PPUSH
 550: LD_INT 0
 552: PPUSH
 553: LD_EXP 49
 557: PPUSH
 558: CALL 37201 0 3
 562: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 563: LD_ADDR_EXP 8
 567: PUSH
 568: LD_STRING Dickens
 570: PPUSH
 571: LD_INT 0
 573: PPUSH
 574: LD_EXP 49
 578: PPUSH
 579: CALL 37201 0 3
 583: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 584: LD_ADDR_EXP 9
 588: PUSH
 589: LD_STRING Woodruff
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: LD_EXP 49
 599: PPUSH
 600: CALL 37201 0 3
 604: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: LD_STRING Campell
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: LD_EXP 49
 620: PPUSH
 621: CALL 37201 0 3
 625: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 626: LD_ADDR_EXP 10
 630: PUSH
 631: LD_STRING Knight
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: LD_EXP 49
 641: PPUSH
 642: CALL 37201 0 3
 646: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 647: LD_ADDR_EXP 11
 651: PUSH
 652: LD_STRING Claptopn
 654: PPUSH
 655: LD_INT 0
 657: PPUSH
 658: LD_EXP 49
 662: PPUSH
 663: CALL 37201 0 3
 667: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 668: LD_ADDR_EXP 14
 672: PUSH
 673: LD_STRING Harisson
 675: PPUSH
 676: LD_INT 0
 678: PPUSH
 679: LD_EXP 49
 683: PPUSH
 684: CALL 37201 0 3
 688: ST_TO_ADDR
// if Lisa = false then
 689: LD_EXP 4
 693: PUSH
 694: LD_INT 0
 696: EQUAL
 697: IFFALSE 720
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 699: LD_ADDR_EXP 2
 703: PUSH
 704: LD_STRING Bobby
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: LD_EXP 49
 714: PPUSH
 715: CALL 37201 0 3
 719: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 720: LD_EXP 4
 724: PUSH
 725: LD_INT 0
 727: EQUAL
 728: PUSH
 729: LD_EXP 2
 733: PUSH
 734: LD_INT 0
 736: EQUAL
 737: AND
 738: IFFALSE 761
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_STRING Cyrus
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: LD_EXP 49
 755: PPUSH
 756: CALL 37201 0 3
 760: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 761: LD_EXP 4
 765: PUSH
 766: LD_INT 0
 768: EQUAL
 769: PUSH
 770: LD_EXP 2
 774: PUSH
 775: LD_INT 0
 777: EQUAL
 778: AND
 779: PUSH
 780: LD_EXP 3
 784: PUSH
 785: LD_INT 0
 787: EQUAL
 788: AND
 789: IFFALSE 888
// begin tmp = CreateCharacterSet ( 03_others ) ;
 791: LD_ADDR_VAR 0 3
 795: PUSH
 796: LD_STRING 03_others
 798: PPUSH
 799: CALL_OW 31
 803: ST_TO_ADDR
// if tmp then
 804: LD_VAR 0 3
 808: IFFALSE 865
// begin RandomBeforeMission = tmp [ 1 ] ;
 810: LD_ADDR_EXP 6
 814: PUSH
 815: LD_VAR 0 3
 819: PUSH
 820: LD_INT 1
 822: ARRAY
 823: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 824: LD_STRING 03_others
 826: PPUSH
 827: CALL_OW 40
// if tmp > 1 then
 831: LD_VAR 0 3
 835: PUSH
 836: LD_INT 1
 838: GREATER
 839: IFFALSE 863
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 841: LD_VAR 0 3
 845: PUSH
 846: LD_VAR 0 3
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: DIFF
 855: PPUSH
 856: LD_STRING 03_others
 858: PPUSH
 859: CALL_OW 38
// end else
 863: GO 888
// begin PrepareHuman ( false , 1 , 3 ) ;
 865: LD_INT 0
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: LD_INT 3
 873: PPUSH
 874: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 878: LD_ADDR_EXP 6
 882: PUSH
 883: CALL_OW 44
 887: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 888: LD_ADDR_OWVAR 20
 892: PUSH
 893: LD_INT 4
 895: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 896: LD_ADDR_EXP 13
 900: PUSH
 901: LD_STRING Donaldson
 903: PPUSH
 904: LD_INT 0
 906: PPUSH
 907: LD_EXP 49
 911: PPUSH
 912: CALL 37201 0 3
 916: ST_TO_ADDR
// if TestCharacters ( 03_Frank ) = true then
 917: LD_STRING 03_Frank
 919: PPUSH
 920: CALL_OW 28
 924: PUSH
 925: LD_INT 1
 927: EQUAL
 928: IFFALSE 982
// begin Frank = PrepareUnit ( 03_Frank , true , mission_prefix_prev ) ;
 930: LD_ADDR_EXP 5
 934: PUSH
 935: LD_STRING 03_Frank
 937: PPUSH
 938: LD_INT 1
 940: PPUSH
 941: LD_EXP 49
 945: PPUSH
 946: CALL 37201 0 3
 950: ST_TO_ADDR
// if Frank = 0 then
 951: LD_EXP 5
 955: PUSH
 956: LD_INT 0
 958: EQUAL
 959: IFFALSE 982
// Frank = PrepareUnit ( Frank , false , mission_prefix_prev ) ;
 961: LD_ADDR_EXP 5
 965: PUSH
 966: LD_STRING Frank
 968: PPUSH
 969: LD_INT 0
 971: PPUSH
 972: LD_EXP 49
 976: PPUSH
 977: CALL 37201 0 3
 981: ST_TO_ADDR
// end ; PlaceHumanInUnit ( JMM , amvj ) ;
 982: LD_EXP 1
 986: PPUSH
 987: LD_INT 32
 989: PPUSH
 990: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 994: LD_EXP 7
 998: PPUSH
 999: LD_INT 1
1001: PPUSH
1002: LD_INT 0
1004: PPUSH
1005: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
1009: LD_EXP 7
1013: PPUSH
1014: LD_INT 32
1016: PPUSH
1017: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
1021: LD_EXP 8
1025: PPUSH
1026: LD_INT 2
1028: PPUSH
1029: LD_INT 0
1031: PPUSH
1032: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1036: LD_EXP 9
1040: PPUSH
1041: LD_INT 2
1043: PPUSH
1044: LD_INT 0
1046: PPUSH
1047: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1051: LD_EXP 12
1055: PPUSH
1056: LD_INT 2
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1066: LD_EXP 10
1070: PPUSH
1071: LD_INT 2
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1081: LD_EXP 11
1085: PPUSH
1086: LD_INT 2
1088: PPUSH
1089: LD_INT 0
1091: PPUSH
1092: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1096: LD_EXP 4
1100: PPUSH
1101: LD_INT 2
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: CALL_OW 49
// if Lisa = false then
1111: LD_EXP 4
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: IFFALSE 1136
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1121: LD_EXP 2
1125: PPUSH
1126: LD_INT 2
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL_OW 49
// if Lisa = false and Bobby = false then
1136: LD_EXP 4
1140: PUSH
1141: LD_INT 0
1143: EQUAL
1144: PUSH
1145: LD_EXP 2
1149: PUSH
1150: LD_INT 0
1152: EQUAL
1153: AND
1154: IFFALSE 1171
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1156: LD_EXP 3
1160: PPUSH
1161: LD_INT 2
1163: PPUSH
1164: LD_INT 0
1166: PPUSH
1167: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1171: LD_EXP 4
1175: PUSH
1176: LD_INT 0
1178: EQUAL
1179: PUSH
1180: LD_EXP 2
1184: PUSH
1185: LD_INT 0
1187: EQUAL
1188: AND
1189: PUSH
1190: LD_EXP 3
1194: PUSH
1195: LD_INT 0
1197: EQUAL
1198: AND
1199: IFFALSE 1216
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1201: LD_EXP 6
1205: PPUSH
1206: LD_INT 2
1208: PPUSH
1209: LD_INT 0
1211: PPUSH
1212: CALL_OW 49
// end ;
1216: LD_VAR 0 1
1220: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1221: LD_INT 0
1223: PPUSH
1224: PPUSH
1225: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1226: LD_EXP 13
1230: PPUSH
1231: LD_INT 10
1233: PPUSH
1234: LD_INT 0
1236: PPUSH
1237: CALL_OW 49
// if Frank then
1241: LD_EXP 5
1245: IFFALSE 1262
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1247: LD_EXP 5
1251: PPUSH
1252: LD_INT 10
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 49
// uc_nation = 1 ;
1262: LD_ADDR_OWVAR 21
1266: PUSH
1267: LD_INT 1
1269: ST_TO_ADDR
// uc_side = 4 ;
1270: LD_ADDR_OWVAR 20
1274: PUSH
1275: LD_INT 4
1277: ST_TO_ADDR
// hc_class := 3 ;
1278: LD_ADDR_OWVAR 28
1282: PUSH
1283: LD_INT 3
1285: ST_TO_ADDR
// hc_sex := sex_male ;
1286: LD_ADDR_OWVAR 27
1290: PUSH
1291: LD_INT 1
1293: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1294: LD_ADDR_OWVAR 33
1298: PUSH
1299: LD_STRING SecondCharsGal
1301: ST_TO_ADDR
// hc_face_number := 53 ;
1302: LD_ADDR_OWVAR 34
1306: PUSH
1307: LD_INT 53
1309: ST_TO_ADDR
// hc_name := Freddie Warner ;
1310: LD_ADDR_OWVAR 26
1314: PUSH
1315: LD_STRING Freddie Warner
1317: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1318: LD_ADDR_OWVAR 29
1322: PUSH
1323: LD_INT 8
1325: PUSH
1326: LD_INT 11
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1333: LD_ADDR_OWVAR 30
1337: PUSH
1338: LD_INT 0
1340: PUSH
1341: LD_INT 0
1343: PUSH
1344: LD_INT 1
1346: PUSH
1347: LD_INT 0
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1356: LD_ADDR_OWVAR 31
1360: PUSH
1361: LD_INT 1
1363: PUSH
1364: LD_INT 0
1366: PUSH
1367: LD_INT 3
1369: PUSH
1370: LD_INT 2
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: ST_TO_ADDR
// un = CreateHuman ;
1379: LD_ADDR_VAR 0 3
1383: PUSH
1384: CALL_OW 44
1388: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1389: LD_VAR 0 3
1393: PPUSH
1394: LD_INT 10
1396: PPUSH
1397: LD_INT 0
1399: PPUSH
1400: CALL_OW 49
// hc_class := 1 ;
1404: LD_ADDR_OWVAR 28
1408: PUSH
1409: LD_INT 1
1411: ST_TO_ADDR
// hc_sex := sex_male ;
1412: LD_ADDR_OWVAR 27
1416: PUSH
1417: LD_INT 1
1419: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1420: LD_ADDR_OWVAR 33
1424: PUSH
1425: LD_STRING SecondCharsGal
1427: ST_TO_ADDR
// hc_face_number := 56 ;
1428: LD_ADDR_OWVAR 34
1432: PUSH
1433: LD_INT 56
1435: ST_TO_ADDR
// hc_name := Mel Brennan ;
1436: LD_ADDR_OWVAR 26
1440: PUSH
1441: LD_STRING Mel Brennan
1443: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1444: LD_ADDR_OWVAR 29
1448: PUSH
1449: LD_INT 12
1451: PUSH
1452: LD_INT 11
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1459: LD_ADDR_OWVAR 30
1463: PUSH
1464: LD_INT 1
1466: PUSH
1467: LD_INT 1
1469: PUSH
1470: LD_INT 0
1472: PUSH
1473: LD_INT 0
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1482: LD_ADDR_OWVAR 31
1486: PUSH
1487: LD_INT 3
1489: PUSH
1490: LD_INT 1
1492: PUSH
1493: LD_INT 1
1495: PUSH
1496: LD_INT 0
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: ST_TO_ADDR
// un = CreateHuman ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: CALL_OW 44
1514: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1515: LD_VAR 0 3
1519: PPUSH
1520: LD_INT 10
1522: PPUSH
1523: LD_INT 0
1525: PPUSH
1526: CALL_OW 49
// hc_class := 1 ;
1530: LD_ADDR_OWVAR 28
1534: PUSH
1535: LD_INT 1
1537: ST_TO_ADDR
// hc_sex := sex_male ;
1538: LD_ADDR_OWVAR 27
1542: PUSH
1543: LD_INT 1
1545: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1546: LD_ADDR_OWVAR 33
1550: PUSH
1551: LD_STRING AmGalRemake
1553: ST_TO_ADDR
// hc_face_number := 5 ;
1554: LD_ADDR_OWVAR 34
1558: PUSH
1559: LD_INT 5
1561: ST_TO_ADDR
// hc_name := Bob Joplin ;
1562: LD_ADDR_OWVAR 26
1566: PUSH
1567: LD_STRING Bob Joplin
1569: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1570: LD_ADDR_OWVAR 29
1574: PUSH
1575: LD_INT 10
1577: PUSH
1578: LD_INT 11
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1585: LD_ADDR_OWVAR 30
1589: PUSH
1590: LD_INT 0
1592: PUSH
1593: LD_INT 1
1595: PUSH
1596: LD_INT 1
1598: PUSH
1599: LD_INT 0
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1608: LD_ADDR_OWVAR 31
1612: PUSH
1613: LD_INT 3
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 1
1621: PUSH
1622: LD_INT 1
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: ST_TO_ADDR
// un = CreateHuman ;
1631: LD_ADDR_VAR 0 3
1635: PUSH
1636: CALL_OW 44
1640: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1641: LD_VAR 0 3
1645: PPUSH
1646: LD_INT 10
1648: PPUSH
1649: LD_INT 0
1651: PPUSH
1652: CALL_OW 49
// hc_class := 3 ;
1656: LD_ADDR_OWVAR 28
1660: PUSH
1661: LD_INT 3
1663: ST_TO_ADDR
// hc_sex := sex_female ;
1664: LD_ADDR_OWVAR 27
1668: PUSH
1669: LD_INT 2
1671: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1672: LD_ADDR_OWVAR 33
1676: PUSH
1677: LD_STRING AmGalRemake
1679: ST_TO_ADDR
// hc_face_number := 8 ;
1680: LD_ADDR_OWVAR 34
1684: PUSH
1685: LD_INT 8
1687: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1688: LD_ADDR_OWVAR 26
1692: PUSH
1693: LD_STRING Elizabeth Whitney
1695: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1696: LD_ADDR_OWVAR 29
1700: PUSH
1701: LD_INT 9
1703: PUSH
1704: LD_INT 11
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1711: LD_ADDR_OWVAR 30
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: LD_INT 0
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: LD_INT 0
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1734: LD_ADDR_OWVAR 31
1738: PUSH
1739: LD_INT 2
1741: PUSH
1742: LD_INT 2
1744: PUSH
1745: LD_INT 4
1747: PUSH
1748: LD_INT 2
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: ST_TO_ADDR
// un = CreateHuman ;
1757: LD_ADDR_VAR 0 3
1761: PUSH
1762: CALL_OW 44
1766: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1767: LD_VAR 0 3
1771: PPUSH
1772: LD_INT 10
1774: PPUSH
1775: LD_INT 0
1777: PPUSH
1778: CALL_OW 49
// InitHc ;
1782: CALL_OW 19
// end ;
1786: LD_VAR 0 1
1790: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1791: LD_INT 0
1793: PPUSH
1794: PPUSH
1795: PPUSH
1796: PPUSH
// uc_nation = 1 ;
1797: LD_ADDR_OWVAR 21
1801: PUSH
1802: LD_INT 1
1804: ST_TO_ADDR
// uc_side = 1 ;
1805: LD_ADDR_OWVAR 20
1809: PUSH
1810: LD_INT 1
1812: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1813: LD_ADDR_OWVAR 37
1817: PUSH
1818: LD_INT 2
1820: ST_TO_ADDR
// vc_engine := engine_combustion ;
1821: LD_ADDR_OWVAR 39
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// vc_control := control_manual ;
1829: LD_ADDR_OWVAR 38
1833: PUSH
1834: LD_INT 1
1836: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1837: LD_ADDR_OWVAR 41
1841: PUSH
1842: LD_INT 65
1844: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun ] [ Difficulty ] ;
1845: LD_ADDR_OWVAR 40
1849: PUSH
1850: LD_INT 5
1852: PUSH
1853: LD_INT 3
1855: PUSH
1856: LD_INT 4
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: LIST
1863: PUSH
1864: LD_OWVAR 67
1868: ARRAY
1869: ST_TO_ADDR
// veh := CreateVehicle ;
1870: LD_ADDR_VAR 0 5
1874: PUSH
1875: CALL_OW 45
1879: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1880: LD_VAR 0 5
1884: PPUSH
1885: LD_INT 2
1887: PPUSH
1888: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1892: LD_INT 17
1894: PPUSH
1895: LD_INT 4
1897: PPUSH
1898: CALL_OW 428
1902: PUSH
1903: LD_INT 0
1905: EQUAL
1906: IFFALSE 1928
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1908: LD_VAR 0 5
1912: PPUSH
1913: LD_INT 17
1915: PPUSH
1916: LD_INT 4
1918: PPUSH
1919: LD_INT 0
1921: PPUSH
1922: CALL_OW 48
1926: GO 1946
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1928: LD_VAR 0 5
1932: PPUSH
1933: LD_INT 23
1935: PPUSH
1936: LD_INT 10
1938: PPUSH
1939: LD_INT 0
1941: PPUSH
1942: CALL_OW 48
// hc_class := 1 ;
1946: LD_ADDR_OWVAR 28
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// hc_sex := sex_male ;
1954: LD_ADDR_OWVAR 27
1958: PUSH
1959: LD_INT 1
1961: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1962: LD_ADDR_OWVAR 33
1966: PUSH
1967: LD_STRING SecondCharsGal
1969: ST_TO_ADDR
// hc_face_number := 59 ;
1970: LD_ADDR_OWVAR 34
1974: PUSH
1975: LD_INT 59
1977: ST_TO_ADDR
// hc_name := Max Gray ;
1978: LD_ADDR_OWVAR 26
1982: PUSH
1983: LD_STRING Max Gray
1985: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1986: LD_ADDR_OWVAR 29
1990: PUSH
1991: LD_INT 9
1993: PUSH
1994: LD_INT 11
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2001: LD_ADDR_OWVAR 30
2005: PUSH
2006: LD_INT 1
2008: PUSH
2009: LD_INT 0
2011: PUSH
2012: LD_INT 0
2014: PUSH
2015: LD_INT 0
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
2024: LD_ADDR_OWVAR 31
2028: PUSH
2029: LD_INT 4
2031: PUSH
2032: LD_INT 1
2034: PUSH
2035: LD_INT 1
2037: PUSH
2038: LD_INT 0
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: ST_TO_ADDR
// un = CreateHuman ;
2047: LD_ADDR_VAR 0 4
2051: PUSH
2052: CALL_OW 44
2056: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2057: LD_VAR 0 4
2061: PPUSH
2062: LD_INT 11
2064: PPUSH
2065: LD_INT 0
2067: PPUSH
2068: CALL_OW 49
// hc_class := 2 ;
2072: LD_ADDR_OWVAR 28
2076: PUSH
2077: LD_INT 2
2079: ST_TO_ADDR
// hc_sex := sex_male ;
2080: LD_ADDR_OWVAR 27
2084: PUSH
2085: LD_INT 1
2087: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2088: LD_ADDR_OWVAR 33
2092: PUSH
2093: LD_STRING SecondCharsGal
2095: ST_TO_ADDR
// hc_face_number := 50 ;
2096: LD_ADDR_OWVAR 34
2100: PUSH
2101: LD_INT 50
2103: ST_TO_ADDR
// hc_name := Frank Hughes ;
2104: LD_ADDR_OWVAR 26
2108: PUSH
2109: LD_STRING Frank Hughes
2111: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2112: LD_ADDR_OWVAR 29
2116: PUSH
2117: LD_INT 10
2119: PUSH
2120: LD_INT 10
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2127: LD_ADDR_OWVAR 30
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: LD_INT 2
2137: PUSH
2138: LD_INT 0
2140: PUSH
2141: LD_INT 0
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2150: LD_ADDR_OWVAR 31
2154: PUSH
2155: LD_INT 1
2157: PUSH
2158: LD_INT 3
2160: PUSH
2161: LD_INT 0
2163: PUSH
2164: LD_INT 1
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: ST_TO_ADDR
// un = CreateHuman ;
2173: LD_ADDR_VAR 0 4
2177: PUSH
2178: CALL_OW 44
2182: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2183: LD_VAR 0 4
2187: PPUSH
2188: LD_INT 11
2190: PPUSH
2191: LD_INT 0
2193: PPUSH
2194: CALL_OW 49
// hc_class := 1 ;
2198: LD_ADDR_OWVAR 28
2202: PUSH
2203: LD_INT 1
2205: ST_TO_ADDR
// hc_sex := sex_male ;
2206: LD_ADDR_OWVAR 27
2210: PUSH
2211: LD_INT 1
2213: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2214: LD_ADDR_OWVAR 33
2218: PUSH
2219: LD_STRING SecondCharsGal
2221: ST_TO_ADDR
// hc_face_number := 54 ;
2222: LD_ADDR_OWVAR 34
2226: PUSH
2227: LD_INT 54
2229: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2230: LD_ADDR_OWVAR 26
2234: PUSH
2235: LD_STRING Luigi Ghbellin
2237: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2238: LD_ADDR_OWVAR 29
2242: PUSH
2243: LD_INT 11
2245: PUSH
2246: LD_INT 11
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2253: LD_ADDR_OWVAR 30
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: LD_INT 0
2263: PUSH
2264: LD_INT 0
2266: PUSH
2267: LD_INT 0
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2276: LD_ADDR_OWVAR 31
2280: PUSH
2281: LD_INT 2
2283: PUSH
2284: LD_INT 1
2286: PUSH
2287: LD_INT 1
2289: PUSH
2290: LD_INT 1
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: ST_TO_ADDR
// un = CreateHuman ;
2299: LD_ADDR_VAR 0 4
2303: PUSH
2304: CALL_OW 44
2308: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2309: LD_VAR 0 4
2313: PPUSH
2314: LD_INT 11
2316: PPUSH
2317: LD_INT 0
2319: PPUSH
2320: CALL_OW 49
// hc_class := 3 ;
2324: LD_ADDR_OWVAR 28
2328: PUSH
2329: LD_INT 3
2331: ST_TO_ADDR
// hc_sex := sex_male ;
2332: LD_ADDR_OWVAR 27
2336: PUSH
2337: LD_INT 1
2339: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2340: LD_ADDR_OWVAR 33
2344: PUSH
2345: LD_STRING AmGalRemake
2347: ST_TO_ADDR
// hc_face_number := 6 ;
2348: LD_ADDR_OWVAR 34
2352: PUSH
2353: LD_INT 6
2355: ST_TO_ADDR
// hc_name := Leon Carter ;
2356: LD_ADDR_OWVAR 26
2360: PUSH
2361: LD_STRING Leon Carter
2363: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2364: LD_ADDR_OWVAR 29
2368: PUSH
2369: LD_INT 10
2371: PUSH
2372: LD_INT 9
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2379: LD_ADDR_OWVAR 30
2383: PUSH
2384: LD_INT 0
2386: PUSH
2387: LD_INT 1
2389: PUSH
2390: LD_INT 2
2392: PUSH
2393: LD_INT 1
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2402: LD_ADDR_OWVAR 31
2406: PUSH
2407: LD_INT 0
2409: PUSH
2410: LD_INT 2
2412: PUSH
2413: LD_INT 3
2415: PUSH
2416: LD_INT 1
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: ST_TO_ADDR
// un = CreateHuman ;
2425: LD_ADDR_VAR 0 4
2429: PUSH
2430: CALL_OW 44
2434: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 52
// if count = 4 then
2449: LD_VAR 0 1
2453: PUSH
2454: LD_INT 4
2456: EQUAL
2457: IFFALSE 2585
// begin hc_class := 1 ;
2459: LD_ADDR_OWVAR 28
2463: PUSH
2464: LD_INT 1
2466: ST_TO_ADDR
// hc_sex := sex_male ;
2467: LD_ADDR_OWVAR 27
2471: PUSH
2472: LD_INT 1
2474: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2475: LD_ADDR_OWVAR 33
2479: PUSH
2480: LD_STRING SecondCharsGal
2482: ST_TO_ADDR
// hc_face_number := 34 ;
2483: LD_ADDR_OWVAR 34
2487: PUSH
2488: LD_INT 34
2490: ST_TO_ADDR
// hc_name := Ian Hill ;
2491: LD_ADDR_OWVAR 26
2495: PUSH
2496: LD_STRING Ian Hill
2498: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2499: LD_ADDR_OWVAR 29
2503: PUSH
2504: LD_INT 10
2506: PUSH
2507: LD_INT 12
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2514: LD_ADDR_OWVAR 30
2518: PUSH
2519: LD_INT 1
2521: PUSH
2522: LD_INT 0
2524: PUSH
2525: LD_INT 0
2527: PUSH
2528: LD_INT 0
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2537: LD_ADDR_OWVAR 31
2541: PUSH
2542: LD_INT 3
2544: PUSH
2545: LD_INT 1
2547: PUSH
2548: LD_INT 1
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: ST_TO_ADDR
// un = CreateHuman ;
2560: LD_ADDR_VAR 0 4
2564: PUSH
2565: CALL_OW 44
2569: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2570: LD_VAR 0 4
2574: PPUSH
2575: LD_INT 11
2577: PPUSH
2578: LD_INT 0
2580: PPUSH
2581: CALL_OW 49
// end ; if count = 5 then
2585: LD_VAR 0 1
2589: PUSH
2590: LD_INT 5
2592: EQUAL
2593: IFFALSE 2847
// begin hc_class := 1 ;
2595: LD_ADDR_OWVAR 28
2599: PUSH
2600: LD_INT 1
2602: ST_TO_ADDR
// hc_sex := sex_male ;
2603: LD_ADDR_OWVAR 27
2607: PUSH
2608: LD_INT 1
2610: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2611: LD_ADDR_OWVAR 33
2615: PUSH
2616: LD_STRING SecondCharsGal
2618: ST_TO_ADDR
// hc_face_number := 34 ;
2619: LD_ADDR_OWVAR 34
2623: PUSH
2624: LD_INT 34
2626: ST_TO_ADDR
// hc_name := Ian Hill ;
2627: LD_ADDR_OWVAR 26
2631: PUSH
2632: LD_STRING Ian Hill
2634: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2635: LD_ADDR_OWVAR 29
2639: PUSH
2640: LD_INT 10
2642: PUSH
2643: LD_INT 12
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2650: LD_ADDR_OWVAR 30
2654: PUSH
2655: LD_INT 1
2657: PUSH
2658: LD_INT 0
2660: PUSH
2661: LD_INT 0
2663: PUSH
2664: LD_INT 0
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: LIST
2671: LIST
2672: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2673: LD_ADDR_OWVAR 31
2677: PUSH
2678: LD_INT 3
2680: PUSH
2681: LD_INT 1
2683: PUSH
2684: LD_INT 1
2686: PUSH
2687: LD_INT 0
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: ST_TO_ADDR
// un = CreateHuman ;
2696: LD_ADDR_VAR 0 4
2700: PUSH
2701: CALL_OW 44
2705: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2706: LD_VAR 0 4
2710: PPUSH
2711: LD_INT 11
2713: PPUSH
2714: LD_INT 0
2716: PPUSH
2717: CALL_OW 49
// hc_class := 1 ;
2721: LD_ADDR_OWVAR 28
2725: PUSH
2726: LD_INT 1
2728: ST_TO_ADDR
// hc_sex := sex_female ;
2729: LD_ADDR_OWVAR 27
2733: PUSH
2734: LD_INT 2
2736: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2737: LD_ADDR_OWVAR 33
2741: PUSH
2742: LD_STRING SecondCharsGal
2744: ST_TO_ADDR
// hc_face_number := 41 ;
2745: LD_ADDR_OWVAR 34
2749: PUSH
2750: LD_INT 41
2752: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2753: LD_ADDR_OWVAR 26
2757: PUSH
2758: LD_STRING Kate Wadsworth
2760: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2761: LD_ADDR_OWVAR 29
2765: PUSH
2766: LD_INT 9
2768: PUSH
2769: LD_INT 9
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2776: LD_ADDR_OWVAR 30
2780: PUSH
2781: LD_INT 0
2783: PUSH
2784: LD_INT 2
2786: PUSH
2787: LD_INT 0
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2799: LD_ADDR_OWVAR 31
2803: PUSH
2804: LD_INT 2
2806: PUSH
2807: LD_INT 3
2809: PUSH
2810: LD_INT 1
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: LIST
2820: LIST
2821: ST_TO_ADDR
// un = CreateHuman ;
2822: LD_ADDR_VAR 0 4
2826: PUSH
2827: CALL_OW 44
2831: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2832: LD_VAR 0 4
2836: PPUSH
2837: LD_INT 11
2839: PPUSH
2840: LD_INT 0
2842: PPUSH
2843: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2847: LD_INT 11
2849: PPUSH
2850: LD_INT 22
2852: PUSH
2853: LD_INT 1
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PUSH
2860: LD_INT 21
2862: PUSH
2863: LD_INT 1
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: PUSH
2870: LD_INT 26
2872: PUSH
2873: LD_INT 1
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: LIST
2884: PPUSH
2885: CALL_OW 70
2889: PUSH
2890: LD_INT 1
2892: ARRAY
2893: PPUSH
2894: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2898: LD_INT 11
2900: PPUSH
2901: LD_INT 22
2903: PUSH
2904: LD_INT 1
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 21
2913: PUSH
2914: LD_INT 1
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PUSH
2921: LD_INT 26
2923: PUSH
2924: LD_INT 1
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: LIST
2935: PPUSH
2936: CALL_OW 70
2940: PUSH
2941: LD_INT 1
2943: ARRAY
2944: PPUSH
2945: LD_STRING D6-Sol3-1
2947: PPUSH
2948: CALL_OW 88
// end ; end_of_file
2952: LD_VAR 0 2
2956: RET
// export function PrepareRussianCommander ; begin
2957: LD_INT 0
2959: PPUSH
// uc_side = 3 ;
2960: LD_ADDR_OWVAR 20
2964: PUSH
2965: LD_INT 3
2967: ST_TO_ADDR
// uc_nation = 3 ;
2968: LD_ADDR_OWVAR 21
2972: PUSH
2973: LD_INT 3
2975: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2976: LD_ADDR_EXP 15
2980: PUSH
2981: LD_STRING Stolypin
2983: PPUSH
2984: CALL_OW 25
2988: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2989: LD_EXP 15
2993: PPUSH
2994: LD_INT 21
2996: PPUSH
2997: CALL_OW 52
// end ;
3001: LD_VAR 0 1
3005: RET
// export function PrepareRussianBase ; var i , b , un ; begin
3006: LD_INT 0
3008: PPUSH
3009: PPUSH
3010: PPUSH
3011: PPUSH
// if Difficulty > 1 then
3012: LD_OWVAR 67
3016: PUSH
3017: LD_INT 1
3019: GREATER
3020: IFFALSE 3130
// begin uc_side := 3 ;
3022: LD_ADDR_OWVAR 20
3026: PUSH
3027: LD_INT 3
3029: ST_TO_ADDR
// uc_nation := 3 ;
3030: LD_ADDR_OWVAR 21
3034: PUSH
3035: LD_INT 3
3037: ST_TO_ADDR
// InitHc ;
3038: CALL_OW 19
// InitBc ;
3042: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3046: LD_INT 0
3048: PPUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_INT 4
3054: PPUSH
3055: CALL_OW 380
// bc_type := b_breastwork ;
3059: LD_ADDR_OWVAR 42
3063: PUSH
3064: LD_INT 31
3066: ST_TO_ADDR
// bc_level := 4 ;
3067: LD_ADDR_OWVAR 43
3071: PUSH
3072: LD_INT 4
3074: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3075: LD_ADDR_VAR 0 3
3079: PUSH
3080: LD_INT 100
3082: PPUSH
3083: LD_INT 58
3085: PPUSH
3086: LD_INT 2
3088: PPUSH
3089: CALL_OW 47
3093: ST_TO_ADDR
// un := CreateHuman ;
3094: LD_ADDR_VAR 0 4
3098: PUSH
3099: CALL_OW 44
3103: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3104: LD_VAR 0 4
3108: PPUSH
3109: LD_INT 5
3111: PPUSH
3112: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3116: LD_VAR 0 4
3120: PPUSH
3121: LD_VAR 0 3
3125: PPUSH
3126: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3130: LD_INT 3
3132: PPUSH
3133: LD_INT 3
3135: PPUSH
3136: LD_INT 22
3138: PPUSH
3139: LD_EXP 16
3143: PPUSH
3144: LD_EXP 17
3148: PPUSH
3149: CALL_OW 12
3153: PPUSH
3154: LD_INT 1
3156: PPUSH
3157: LD_INT 3
3159: PUSH
3160: LD_INT 4
3162: PUSH
3163: LD_INT 5
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: LIST
3170: PUSH
3171: LD_OWVAR 67
3175: ARRAY
3176: PPUSH
3177: CALL 4379 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3181: LD_INT 3
3183: PPUSH
3184: LD_INT 3
3186: PPUSH
3187: LD_INT 21
3189: PPUSH
3190: LD_EXP 16
3194: PPUSH
3195: LD_EXP 17
3199: PPUSH
3200: CALL_OW 12
3204: PPUSH
3205: LD_INT 2
3207: PPUSH
3208: LD_INT 3
3210: PPUSH
3211: CALL 4379 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3215: LD_INT 3
3217: PPUSH
3218: LD_INT 3
3220: PPUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_EXP 16
3228: PPUSH
3229: LD_EXP 17
3233: PPUSH
3234: CALL_OW 12
3238: PPUSH
3239: LD_INT 4
3241: PPUSH
3242: LD_INT 3
3244: PPUSH
3245: CALL 4379 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3249: LD_INT 3
3251: PPUSH
3252: LD_INT 3
3254: PPUSH
3255: LD_INT 24
3257: PPUSH
3258: LD_EXP 16
3262: PPUSH
3263: LD_EXP 17
3267: PPUSH
3268: CALL_OW 12
3272: PPUSH
3273: LD_INT 3
3275: PPUSH
3276: LD_INT 5
3278: PPUSH
3279: CALL 4379 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3283: LD_ADDR_VAR 0 2
3287: PUSH
3288: LD_INT 22
3290: PUSH
3291: LD_INT 3
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PUSH
3298: LD_INT 30
3300: PUSH
3301: LD_INT 32
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PPUSH
3312: CALL_OW 69
3316: PUSH
3317: FOR_IN
3318: IFFALSE 3358
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3320: LD_INT 3
3322: PPUSH
3323: LD_INT 3
3325: PPUSH
3326: LD_VAR 0 2
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: LD_EXP 17
3340: PPUSH
3341: CALL_OW 12
3345: PPUSH
3346: LD_INT 1
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: CALL 4379 0 6
3356: GO 3317
3358: POP
3359: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3360: LD_ADDR_VAR 0 2
3364: PUSH
3365: LD_INT 22
3367: PUSH
3368: LD_INT 3
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PUSH
3375: LD_INT 30
3377: PUSH
3378: LD_INT 31
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PPUSH
3389: CALL_OW 69
3393: PUSH
3394: FOR_IN
3395: IFFALSE 3423
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3397: LD_EXP 16
3401: PPUSH
3402: LD_EXP 17
3406: PPUSH
3407: CALL_OW 12
3411: PPUSH
3412: LD_VAR 0 2
3416: PPUSH
3417: CALL 4489 0 2
3421: GO 3394
3423: POP
3424: POP
// end ;
3425: LD_VAR 0 1
3429: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3430: LD_INT 0
3432: PPUSH
3433: PPUSH
3434: PPUSH
3435: PPUSH
// uc_side = 6 ;
3436: LD_ADDR_OWVAR 20
3440: PUSH
3441: LD_INT 6
3443: ST_TO_ADDR
// uc_nation = 3 ;
3444: LD_ADDR_OWVAR 21
3448: PUSH
3449: LD_INT 3
3451: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
3452: LD_ADDR_VAR 0 2
3456: PUSH
3457: DOUBLE
3458: LD_INT 1
3460: DEC
3461: ST_TO_ADDR
3462: LD_INT 1
3464: PUSH
3465: LD_INT 2
3467: PUSH
3468: LD_INT 1
3470: PPUSH
3471: LD_INT 2
3473: PPUSH
3474: CALL_OW 12
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_OWVAR 67
3488: ARRAY
3489: PUSH
3490: FOR_TO
3491: IFFALSE 3651
// begin vc_engine = 1 ;
3493: LD_ADDR_OWVAR 39
3497: PUSH
3498: LD_INT 1
3500: ST_TO_ADDR
// vc_control = 1 ;
3501: LD_ADDR_OWVAR 38
3505: PUSH
3506: LD_INT 1
3508: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
3509: LD_ADDR_OWVAR 40
3513: PUSH
3514: LD_INT 42
3516: PUSH
3517: LD_INT 42
3519: PUSH
3520: LD_INT 43
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: LIST
3527: PUSH
3528: LD_OWVAR 67
3532: ARRAY
3533: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
3534: LD_ADDR_OWVAR 37
3538: PUSH
3539: LD_INT 21
3541: PUSH
3542: LD_INT 22
3544: PUSH
3545: LD_INT 22
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: LIST
3552: PUSH
3553: LD_OWVAR 67
3557: ARRAY
3558: ST_TO_ADDR
// veh = CreateVehicle ;
3559: LD_ADDR_VAR 0 3
3563: PUSH
3564: CALL_OW 45
3568: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3569: LD_VAR 0 3
3573: PPUSH
3574: LD_INT 3
3576: PPUSH
3577: LD_INT 0
3579: PPUSH
3580: CALL_OW 49
// hc_gallery =  ;
3584: LD_ADDR_OWVAR 33
3588: PUSH
3589: LD_STRING 
3591: ST_TO_ADDR
// hc_name =  ;
3592: LD_ADDR_OWVAR 26
3596: PUSH
3597: LD_STRING 
3599: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3600: LD_INT 0
3602: PPUSH
3603: LD_INT 3
3605: PPUSH
3606: LD_EXP 16
3610: PPUSH
3611: LD_EXP 17
3615: PPUSH
3616: CALL_OW 12
3620: PPUSH
3621: CALL_OW 380
// un = CreateHuman ;
3625: LD_ADDR_VAR 0 4
3629: PUSH
3630: CALL_OW 44
3634: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3635: LD_VAR 0 4
3639: PPUSH
3640: LD_VAR 0 3
3644: PPUSH
3645: CALL_OW 52
// end ;
3649: GO 3490
3651: POP
3652: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3653: LD_INT 0
3655: PPUSH
3656: LD_INT 2
3658: PPUSH
3659: LD_EXP 16
3663: PPUSH
3664: LD_EXP 17
3668: PPUSH
3669: CALL_OW 12
3673: PUSH
3674: LD_INT 2
3676: PLUS
3677: PPUSH
3678: CALL_OW 380
// un = CreateHuman ;
3682: LD_ADDR_VAR 0 4
3686: PUSH
3687: CALL_OW 44
3691: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3692: LD_VAR 0 4
3696: PPUSH
3697: LD_INT 3
3699: PPUSH
3700: LD_INT 0
3702: PPUSH
3703: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3707: LD_INT 0
3709: PPUSH
3710: LD_INT 4
3712: PPUSH
3713: LD_EXP 16
3717: PPUSH
3718: LD_EXP 17
3722: PPUSH
3723: CALL_OW 12
3727: PUSH
3728: LD_INT 2
3730: PLUS
3731: PPUSH
3732: CALL_OW 380
// un = CreateHuman ;
3736: LD_ADDR_VAR 0 4
3740: PUSH
3741: CALL_OW 44
3745: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3746: LD_VAR 0 4
3750: PPUSH
3751: LD_INT 3
3753: PPUSH
3754: LD_INT 0
3756: PPUSH
3757: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3761: LD_ADDR_VAR 0 2
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 2
3773: PUSH
3774: LD_INT 3
3776: PUSH
3777: LD_INT 3
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: PUSH
3785: LD_OWVAR 67
3789: ARRAY
3790: PUSH
3791: LD_INT 1
3793: PPUSH
3794: LD_INT 3
3796: PPUSH
3797: CALL_OW 12
3801: PLUS
3802: PUSH
3803: FOR_TO
3804: IFFALSE 3874
// begin hc_gallery =  ;
3806: LD_ADDR_OWVAR 33
3810: PUSH
3811: LD_STRING 
3813: ST_TO_ADDR
// hc_name =  ;
3814: LD_ADDR_OWVAR 26
3818: PUSH
3819: LD_STRING 
3821: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3822: LD_INT 0
3824: PPUSH
3825: LD_INT 1
3827: PPUSH
3828: LD_EXP 16
3832: PPUSH
3833: LD_EXP 17
3837: PPUSH
3838: CALL_OW 12
3842: PPUSH
3843: CALL_OW 380
// un = CreateHuman ;
3847: LD_ADDR_VAR 0 4
3851: PUSH
3852: CALL_OW 44
3856: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3857: LD_VAR 0 4
3861: PPUSH
3862: LD_INT 3
3864: PPUSH
3865: LD_INT 0
3867: PPUSH
3868: CALL_OW 49
// end ;
3872: GO 3803
3874: POP
3875: POP
// vc_engine = 1 ;
3876: LD_ADDR_OWVAR 39
3880: PUSH
3881: LD_INT 1
3883: ST_TO_ADDR
// vc_control = 1 ;
3884: LD_ADDR_OWVAR 38
3888: PUSH
3889: LD_INT 1
3891: ST_TO_ADDR
// vc_weapon = 51 ;
3892: LD_ADDR_OWVAR 40
3896: PUSH
3897: LD_INT 51
3899: ST_TO_ADDR
// vc_chassis = 22 ;
3900: LD_ADDR_OWVAR 37
3904: PUSH
3905: LD_INT 22
3907: ST_TO_ADDR
// veh = CreateVehicle ;
3908: LD_ADDR_VAR 0 3
3912: PUSH
3913: CALL_OW 45
3917: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3918: LD_VAR 0 3
3922: PPUSH
3923: LD_INT 3
3925: PPUSH
3926: LD_INT 0
3928: PPUSH
3929: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3933: LD_VAR 0 3
3937: PPUSH
3938: LD_INT 1
3940: PPUSH
3941: LD_INT 100
3943: PPUSH
3944: CALL_OW 290
// hc_gallery =  ;
3948: LD_ADDR_OWVAR 33
3952: PUSH
3953: LD_STRING 
3955: ST_TO_ADDR
// hc_name =  ;
3956: LD_ADDR_OWVAR 26
3960: PUSH
3961: LD_STRING 
3963: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3964: LD_INT 0
3966: PPUSH
3967: LD_INT 3
3969: PPUSH
3970: LD_EXP 16
3974: PPUSH
3975: LD_EXP 17
3979: PPUSH
3980: CALL_OW 12
3984: PPUSH
3985: CALL_OW 380
// un = CreateHuman ;
3989: LD_ADDR_VAR 0 4
3993: PUSH
3994: CALL_OW 44
3998: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3999: LD_VAR 0 4
4003: PPUSH
4004: LD_VAR 0 3
4008: PPUSH
4009: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: LD_INT 22
4020: PUSH
4021: LD_INT 6
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: PUSH
4028: LD_INT 1
4030: PUSH
4031: LD_INT 3
4033: PUSH
4034: LD_INT 25
4036: PUSH
4037: LD_INT 2
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: PUSH
4048: LD_INT 3
4050: PUSH
4051: LD_INT 25
4053: PUSH
4054: LD_INT 4
4056: PUSH
4057: EMPTY
4058: LIST
4059: LIST
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PPUSH
4074: CALL_OW 69
4078: PUSH
4079: FOR_IN
4080: IFFALSE 4099
// ComAgressiveMove ( i , 45 , 46 ) ;
4082: LD_VAR 0 2
4086: PPUSH
4087: LD_INT 45
4089: PPUSH
4090: LD_INT 46
4092: PPUSH
4093: CALL_OW 114
4097: GO 4079
4099: POP
4100: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4101: LD_ADDR_VAR 0 2
4105: PUSH
4106: LD_INT 22
4108: PUSH
4109: LD_INT 6
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 25
4118: PUSH
4119: LD_INT 2
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PPUSH
4130: CALL_OW 69
4134: PUSH
4135: FOR_IN
4136: IFFALSE 4167
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4138: LD_ADDR_EXP 21
4142: PUSH
4143: LD_VAR 0 2
4147: PPUSH
4148: LD_INT 0
4150: PPUSH
4151: LD_INT 48
4153: PPUSH
4154: LD_INT 55
4156: PPUSH
4157: LD_INT 5
4159: PPUSH
4160: CALL_OW 145
4164: ST_TO_ADDR
4165: GO 4135
4167: POP
4168: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4169: LD_ADDR_VAR 0 2
4173: PUSH
4174: LD_INT 22
4176: PUSH
4177: LD_INT 6
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PUSH
4184: LD_INT 25
4186: PUSH
4187: LD_INT 4
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PPUSH
4198: CALL_OW 69
4202: PUSH
4203: FOR_IN
4204: IFFALSE 4223
// ComMoveXY ( i , 39 , 55 ) ;
4206: LD_VAR 0 2
4210: PPUSH
4211: LD_INT 39
4213: PPUSH
4214: LD_INT 55
4216: PPUSH
4217: CALL_OW 111
4221: GO 4203
4223: POP
4224: POP
// end ;
4225: LD_VAR 0 1
4229: RET
// export function PrepareFirstAttack ; var i , un ; begin
4230: LD_INT 0
4232: PPUSH
4233: PPUSH
4234: PPUSH
// uc_side = 5 ;
4235: LD_ADDR_OWVAR 20
4239: PUSH
4240: LD_INT 5
4242: ST_TO_ADDR
// uc_nation = 3 ;
4243: LD_ADDR_OWVAR 21
4247: PUSH
4248: LD_INT 3
4250: ST_TO_ADDR
// for i := 1 to 4 do
4251: LD_ADDR_VAR 0 2
4255: PUSH
4256: DOUBLE
4257: LD_INT 1
4259: DEC
4260: ST_TO_ADDR
4261: LD_INT 4
4263: PUSH
4264: FOR_TO
4265: IFFALSE 4364
// begin hc_gallery =  ;
4267: LD_ADDR_OWVAR 33
4271: PUSH
4272: LD_STRING 
4274: ST_TO_ADDR
// hc_name =  ;
4275: LD_ADDR_OWVAR 26
4279: PUSH
4280: LD_STRING 
4282: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4283: LD_INT 0
4285: PPUSH
4286: LD_INT 1
4288: PPUSH
4289: LD_EXP 16
4293: PPUSH
4294: LD_EXP 17
4298: PPUSH
4299: CALL_OW 12
4303: PPUSH
4304: CALL_OW 380
// un = CreateHuman ;
4308: LD_ADDR_VAR 0 3
4312: PUSH
4313: CALL_OW 44
4317: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4318: LD_VAR 0 3
4322: PPUSH
4323: LD_INT 4
4325: PPUSH
4326: LD_INT 0
4328: PPUSH
4329: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4333: LD_VAR 0 3
4337: PPUSH
4338: LD_EXP 1
4342: PPUSH
4343: CALL_OW 250
4347: PPUSH
4348: LD_EXP 1
4352: PPUSH
4353: CALL_OW 251
4357: PPUSH
4358: CALL_OW 114
// end ;
4362: GO 4264
4364: POP
4365: POP
// firstRussianAttack = 1 ;
4366: LD_ADDR_EXP 23
4370: PUSH
4371: LD_INT 1
4373: ST_TO_ADDR
// end ; end_of_file
4374: LD_VAR 0 1
4378: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4379: LD_INT 0
4381: PPUSH
4382: PPUSH
4383: PPUSH
4384: PPUSH
// for i = 1 to count do
4385: LD_ADDR_VAR 0 8
4389: PUSH
4390: DOUBLE
4391: LD_INT 1
4393: DEC
4394: ST_TO_ADDR
4395: LD_VAR 0 6
4399: PUSH
4400: FOR_TO
4401: IFFALSE 4482
// begin uc_side = side ;
4403: LD_ADDR_OWVAR 20
4407: PUSH
4408: LD_VAR 0 1
4412: ST_TO_ADDR
// uc_nation = nation ;
4413: LD_ADDR_OWVAR 21
4417: PUSH
4418: LD_VAR 0 2
4422: ST_TO_ADDR
// hc_gallery =  ;
4423: LD_ADDR_OWVAR 33
4427: PUSH
4428: LD_STRING 
4430: ST_TO_ADDR
// hc_name =  ;
4431: LD_ADDR_OWVAR 26
4435: PUSH
4436: LD_STRING 
4438: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4439: LD_INT 0
4441: PPUSH
4442: LD_VAR 0 5
4446: PPUSH
4447: LD_VAR 0 4
4451: PPUSH
4452: CALL_OW 380
// un = CreateHuman ;
4456: LD_ADDR_VAR 0 10
4460: PUSH
4461: CALL_OW 44
4465: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4466: LD_VAR 0 10
4470: PPUSH
4471: LD_VAR 0 3
4475: PPUSH
4476: CALL_OW 52
// end ;
4480: GO 4400
4482: POP
4483: POP
// end ;
4484: LD_VAR 0 7
4488: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4489: LD_INT 0
4491: PPUSH
4492: PPUSH
4493: PPUSH
// uc_side := GetSide ( b ) ;
4494: LD_ADDR_OWVAR 20
4498: PUSH
4499: LD_VAR 0 2
4503: PPUSH
4504: CALL_OW 255
4508: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4509: LD_ADDR_OWVAR 21
4513: PUSH
4514: LD_VAR 0 2
4518: PPUSH
4519: CALL_OW 248
4523: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4524: LD_INT 0
4526: PPUSH
4527: LD_INT 1
4529: PPUSH
4530: LD_VAR 0 1
4534: PPUSH
4535: CALL_OW 380
// un = CreateHuman ;
4539: LD_ADDR_VAR 0 4
4543: PUSH
4544: CALL_OW 44
4548: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4549: LD_ADDR_VAR 0 5
4553: PUSH
4554: LD_VAR 0 2
4558: PPUSH
4559: CALL_OW 254
4563: PUSH
4564: LD_INT 3
4566: MINUS
4567: ST_TO_ADDR
// if dir < 0 then
4568: LD_VAR 0 5
4572: PUSH
4573: LD_INT 0
4575: LESS
4576: IFFALSE 4592
// dir := 6 + dir ;
4578: LD_ADDR_VAR 0 5
4582: PUSH
4583: LD_INT 6
4585: PUSH
4586: LD_VAR 0 5
4590: PLUS
4591: ST_TO_ADDR
// SetDir ( un , dir ) ;
4592: LD_VAR 0 4
4596: PPUSH
4597: LD_VAR 0 5
4601: PPUSH
4602: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4606: LD_VAR 0 4
4610: PPUSH
4611: LD_VAR 0 2
4615: PPUSH
4616: CALL_OW 52
// end ;
4620: LD_VAR 0 3
4624: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4625: LD_INT 0
4627: PPUSH
4628: PPUSH
4629: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4630: LD_ADDR_VAR 0 6
4634: PUSH
4635: LD_VAR 0 1
4639: PUSH
4640: LD_INT 1
4642: PPUSH
4643: LD_VAR 0 1
4647: PPUSH
4648: CALL_OW 12
4652: ARRAY
4653: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4654: LD_VAR 0 6
4658: PPUSH
4659: CALL_OW 258
4663: PUSH
4664: LD_INT 1
4666: EQUAL
4667: IFFALSE 4685
// Say ( speaker , dialogMID ) else
4669: LD_VAR 0 6
4673: PPUSH
4674: LD_VAR 0 2
4678: PPUSH
4679: CALL_OW 88
4683: GO 4699
// Say ( speaker , dialogFID ) ;
4685: LD_VAR 0 6
4689: PPUSH
4690: LD_VAR 0 3
4694: PPUSH
4695: CALL_OW 88
// result := speaker ;
4699: LD_ADDR_VAR 0 4
4703: PUSH
4704: LD_VAR 0 6
4708: ST_TO_ADDR
// end ;
4709: LD_VAR 0 4
4713: RET
// export function PrepareDifficulty ; var tmp ; begin
4714: LD_INT 0
4716: PPUSH
4717: PPUSH
// if Difficulty = 1 then
4718: LD_OWVAR 67
4722: PUSH
4723: LD_INT 1
4725: EQUAL
4726: IFFALSE 4744
// begin RuSoldMinLevel = 1 ;
4728: LD_ADDR_EXP 16
4732: PUSH
4733: LD_INT 1
4735: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4736: LD_ADDR_EXP 17
4740: PUSH
4741: LD_INT 2
4743: ST_TO_ADDR
// end ; if Difficulty = 2 then
4744: LD_OWVAR 67
4748: PUSH
4749: LD_INT 2
4751: EQUAL
4752: IFFALSE 4853
// begin RuSoldMinLevel = 2 ;
4754: LD_ADDR_EXP 16
4758: PUSH
4759: LD_INT 2
4761: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4762: LD_ADDR_EXP 17
4766: PUSH
4767: LD_INT 3
4769: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4770: LD_INT 23
4772: PPUSH
4773: CALL_OW 64
// uc_nation = 3 ;
4777: LD_ADDR_OWVAR 21
4781: PUSH
4782: LD_INT 3
4784: ST_TO_ADDR
// uc_side = 3 ;
4785: LD_ADDR_OWVAR 20
4789: PUSH
4790: LD_INT 3
4792: ST_TO_ADDR
// bc_level = 5 ;
4793: LD_ADDR_OWVAR 43
4797: PUSH
4798: LD_INT 5
4800: ST_TO_ADDR
// bc_type = 32 ;
4801: LD_ADDR_OWVAR 42
4805: PUSH
4806: LD_INT 32
4808: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4809: LD_ADDR_VAR 0 2
4813: PUSH
4814: LD_INT 76
4816: PPUSH
4817: LD_INT 91
4819: PPUSH
4820: LD_INT 2
4822: PPUSH
4823: CALL_OW 47
4827: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_INT 43
4835: PPUSH
4836: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4840: LD_INT 51
4842: PPUSH
4843: LD_INT 3
4845: PPUSH
4846: LD_INT 1
4848: PPUSH
4849: CALL_OW 322
// end ; if Difficulty = 3 then
4853: LD_OWVAR 67
4857: PUSH
4858: LD_INT 3
4860: EQUAL
4861: IFFALSE 5023
// begin RuSoldMinLevel = 2 ;
4863: LD_ADDR_EXP 16
4867: PUSH
4868: LD_INT 2
4870: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4871: LD_ADDR_EXP 17
4875: PUSH
4876: LD_INT 4
4878: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4879: LD_INT 26
4881: PPUSH
4882: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4886: LD_INT 23
4888: PPUSH
4889: CALL_OW 64
// uc_nation = 3 ;
4893: LD_ADDR_OWVAR 21
4897: PUSH
4898: LD_INT 3
4900: ST_TO_ADDR
// uc_side = 3 ;
4901: LD_ADDR_OWVAR 20
4905: PUSH
4906: LD_INT 3
4908: ST_TO_ADDR
// bc_level = 5 ;
4909: LD_ADDR_OWVAR 43
4913: PUSH
4914: LD_INT 5
4916: ST_TO_ADDR
// bc_type = 32 ;
4917: LD_ADDR_OWVAR 42
4921: PUSH
4922: LD_INT 32
4924: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4925: LD_ADDR_VAR 0 2
4929: PUSH
4930: LD_INT 76
4932: PPUSH
4933: LD_INT 91
4935: PPUSH
4936: LD_INT 2
4938: PPUSH
4939: CALL_OW 47
4943: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4944: LD_VAR 0 2
4948: PPUSH
4949: LD_INT 44
4951: PPUSH
4952: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: LD_INT 83
4963: PPUSH
4964: LD_INT 84
4966: PPUSH
4967: LD_INT 2
4969: PPUSH
4970: CALL_OW 47
4974: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4975: LD_VAR 0 2
4979: PPUSH
4980: LD_INT 43
4982: PPUSH
4983: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4987: LD_INT 51
4989: PPUSH
4990: LD_INT 3
4992: PPUSH
4993: LD_INT 1
4995: PPUSH
4996: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
5000: LD_INT 52
5002: PPUSH
5003: LD_INT 3
5005: PPUSH
5006: LD_INT 1
5008: PPUSH
5009: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
5013: LD_INT 25
5015: PPUSH
5016: LD_INT 44
5018: PPUSH
5019: CALL_OW 431
// end ; end ;
5023: LD_VAR 0 1
5027: RET
// export function EnergyDialog ; begin
5028: LD_INT 0
5030: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5031: LD_INT 46
5033: PPUSH
5034: LD_INT 1
5036: PPUSH
5037: CALL_OW 321
5041: PUSH
5042: LD_INT 1
5044: EQUAL
5045: PUSH
5046: LD_INT 35
5048: PPUSH
5049: LD_INT 1
5051: PPUSH
5052: CALL_OW 321
5056: PUSH
5057: LD_INT 1
5059: EQUAL
5060: AND
5061: IFFALSE 5085
// begin Say ( JMM , D9c-JMM-1 ) ;
5063: LD_EXP 1
5067: PPUSH
5068: LD_STRING D9c-JMM-1
5070: PPUSH
5071: CALL_OW 88
// energyVDialog = 1 ;
5075: LD_ADDR_EXP 33
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// end else
5083: GO 5239
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5085: LD_INT 35
5087: PPUSH
5088: LD_INT 1
5090: PPUSH
5091: CALL_OW 321
5095: PUSH
5096: LD_INT 2
5098: EQUAL
5099: PUSH
5100: LD_EXP 33
5104: PUSH
5105: LD_INT 0
5107: EQUAL
5108: AND
5109: IFFALSE 5131
// begin Say ( JMM , D9c-JMM-1a ) ;
5111: LD_EXP 1
5115: PPUSH
5116: LD_STRING D9c-JMM-1a
5118: PPUSH
5119: CALL_OW 88
// energyVDialog = 1 ;
5123: LD_ADDR_EXP 33
5127: PUSH
5128: LD_INT 1
5130: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5131: LD_INT 46
5133: PPUSH
5134: LD_INT 1
5136: PPUSH
5137: CALL_OW 321
5141: PUSH
5142: LD_INT 2
5144: EQUAL
5145: PUSH
5146: LD_EXP 33
5150: PUSH
5151: LD_INT 0
5153: EQUAL
5154: AND
5155: IFFALSE 5177
// begin Say ( JMM , D9c-JMM-1b ) ;
5157: LD_EXP 1
5161: PPUSH
5162: LD_STRING D9c-JMM-1b
5164: PPUSH
5165: CALL_OW 88
// energyVDialog = 1 ;
5169: LD_ADDR_EXP 33
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5177: LD_INT 46
5179: PPUSH
5180: LD_INT 1
5182: PPUSH
5183: CALL_OW 321
5187: PUSH
5188: LD_INT 2
5190: EQUAL
5191: PUSH
5192: LD_INT 21
5194: PPUSH
5195: LD_INT 1
5197: PPUSH
5198: CALL_OW 321
5202: PUSH
5203: LD_INT 2
5205: EQUAL
5206: AND
5207: PUSH
5208: LD_EXP 33
5212: PUSH
5213: LD_INT 0
5215: EQUAL
5216: AND
5217: IFFALSE 5239
// begin Say ( JMM , D9c-JMM-1c ) ;
5219: LD_EXP 1
5223: PPUSH
5224: LD_STRING D9c-JMM-1c
5226: PPUSH
5227: CALL_OW 88
// energyVDialog = 1 ;
5231: LD_ADDR_EXP 33
5235: PUSH
5236: LD_INT 1
5238: ST_TO_ADDR
// end ; end ; end ;
5239: LD_VAR 0 1
5243: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5244: LD_INT 0
5246: PPUSH
5247: PPUSH
5248: PPUSH
5249: PPUSH
5250: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5251: LD_VAR 0 1
5255: NOT
5256: PUSH
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 256
5266: PUSH
5267: LD_INT 250
5269: LESS
5270: OR
5271: PUSH
5272: LD_VAR 0 1
5276: PPUSH
5277: CALL_OW 314
5281: PUSH
5282: LD_VAR 0 1
5286: PPUSH
5287: CALL_OW 261
5291: PUSH
5292: LD_INT 20
5294: GREATER
5295: AND
5296: OR
5297: IFFALSE 5301
// exit ;
5299: GO 5666
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5301: LD_VAR 0 1
5305: PPUSH
5306: CALL_OW 261
5310: PUSH
5311: LD_INT 20
5313: LESS
5314: PUSH
5315: LD_VAR 0 1
5319: PPUSH
5320: CALL_OW 110
5324: PUSH
5325: LD_INT 21
5327: EQUAL
5328: NOT
5329: AND
5330: IFFALSE 5357
// begin ComStop ( bulldozer ) ;
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5341: LD_VAR 0 1
5345: PPUSH
5346: LD_INT 21
5348: PPUSH
5349: CALL_OW 109
// exit ;
5353: GO 5666
// end else
5355: GO 5384
// if GetFuel ( bulldozer ) > 20 then
5357: LD_VAR 0 1
5361: PPUSH
5362: CALL_OW 261
5366: PUSH
5367: LD_INT 20
5369: GREATER
5370: IFFALSE 5384
// SetTag ( bulldozer , 0 ) ;
5372: LD_VAR 0 1
5376: PPUSH
5377: LD_INT 0
5379: PPUSH
5380: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5384: LD_ADDR_VAR 0 5
5388: PUSH
5389: LD_VAR 0 2
5393: PPUSH
5394: CALL_OW 353
5398: ST_TO_ADDR
// tmp := [ ] ;
5399: LD_ADDR_VAR 0 6
5403: PUSH
5404: EMPTY
5405: ST_TO_ADDR
// for i = 1 to list do
5406: LD_ADDR_VAR 0 4
5410: PUSH
5411: DOUBLE
5412: LD_INT 1
5414: DEC
5415: ST_TO_ADDR
5416: LD_VAR 0 5
5420: PUSH
5421: FOR_TO
5422: IFFALSE 5520
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5424: LD_VAR 0 5
5428: PUSH
5429: LD_VAR 0 4
5433: ARRAY
5434: PUSH
5435: LD_INT 1
5437: ARRAY
5438: PPUSH
5439: LD_VAR 0 5
5443: PUSH
5444: LD_VAR 0 4
5448: ARRAY
5449: PUSH
5450: LD_INT 2
5452: ARRAY
5453: PPUSH
5454: CALL_OW 554
5458: IFFALSE 5518
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5460: LD_ADDR_VAR 0 6
5464: PUSH
5465: LD_VAR 0 6
5469: PPUSH
5470: LD_VAR 0 6
5474: PUSH
5475: LD_INT 1
5477: PLUS
5478: PPUSH
5479: LD_VAR 0 5
5483: PUSH
5484: LD_VAR 0 4
5488: ARRAY
5489: PUSH
5490: LD_INT 1
5492: ARRAY
5493: PUSH
5494: LD_VAR 0 5
5498: PUSH
5499: LD_VAR 0 4
5503: ARRAY
5504: PUSH
5505: LD_INT 2
5507: ARRAY
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PPUSH
5513: CALL_OW 1
5517: ST_TO_ADDR
// end ;
5518: GO 5421
5520: POP
5521: POP
// ComStop ( bulldozer ) ;
5522: LD_VAR 0 1
5526: PPUSH
5527: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5531: LD_ADDR_VAR 0 7
5535: PUSH
5536: LD_VAR 0 1
5540: PPUSH
5541: CALL_OW 250
5545: PUSH
5546: LD_VAR 0 1
5550: PPUSH
5551: CALL_OW 251
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: ST_TO_ADDR
// for i = tmp downto 1 do
5560: LD_ADDR_VAR 0 4
5564: PUSH
5565: DOUBLE
5566: LD_VAR 0 6
5570: INC
5571: ST_TO_ADDR
5572: LD_INT 1
5574: PUSH
5575: FOR_DOWNTO
5576: IFFALSE 5664
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5578: LD_ADDR_VAR 0 7
5582: PUSH
5583: LD_VAR 0 7
5587: PUSH
5588: LD_INT 1
5590: ARRAY
5591: PPUSH
5592: LD_VAR 0 7
5596: PUSH
5597: LD_INT 2
5599: ARRAY
5600: PPUSH
5601: LD_VAR 0 6
5605: PPUSH
5606: CALL 5767 0 3
5610: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5611: LD_VAR 0 1
5615: PPUSH
5616: LD_VAR 0 7
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: LD_VAR 0 7
5629: PUSH
5630: LD_INT 2
5632: ARRAY
5633: PPUSH
5634: CALL 5671 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5638: LD_ADDR_VAR 0 6
5642: PUSH
5643: LD_VAR 0 6
5647: PPUSH
5648: LD_VAR 0 7
5652: PUSH
5653: LD_INT 3
5655: ARRAY
5656: PPUSH
5657: CALL_OW 3
5661: ST_TO_ADDR
// end ;
5662: GO 5575
5664: POP
5665: POP
// end ;
5666: LD_VAR 0 3
5670: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5671: LD_INT 0
5673: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5674: LD_VAR 0 2
5678: PPUSH
5679: LD_VAR 0 3
5683: PPUSH
5684: CALL_OW 351
5688: PUSH
5689: LD_VAR 0 2
5693: PPUSH
5694: LD_VAR 0 3
5698: PPUSH
5699: CALL_OW 554
5703: AND
5704: PUSH
5705: LD_VAR 0 2
5709: PPUSH
5710: LD_VAR 0 3
5714: PPUSH
5715: CALL_OW 488
5719: AND
5720: PUSH
5721: LD_VAR 0 2
5725: PPUSH
5726: LD_VAR 0 3
5730: PPUSH
5731: CALL_OW 428
5735: PUSH
5736: LD_INT 1
5738: NEG
5739: EQUAL
5740: AND
5741: IFFALSE 5762
// AddComMoveXY ( bulldozer , x , y ) ;
5743: LD_VAR 0 1
5747: PPUSH
5748: LD_VAR 0 2
5752: PPUSH
5753: LD_VAR 0 3
5757: PPUSH
5758: CALL_OW 171
// end ;
5762: LD_VAR 0 4
5766: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5767: LD_INT 0
5769: PPUSH
5770: PPUSH
5771: PPUSH
5772: PPUSH
5773: PPUSH
5774: PPUSH
5775: PPUSH
// dist := 99999 ;
5776: LD_ADDR_VAR 0 6
5780: PUSH
5781: LD_INT 99999
5783: ST_TO_ADDR
// for i = 1 to list do
5784: LD_ADDR_VAR 0 5
5788: PUSH
5789: DOUBLE
5790: LD_INT 1
5792: DEC
5793: ST_TO_ADDR
5794: LD_VAR 0 3
5798: PUSH
5799: FOR_TO
5800: IFFALSE 5938
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5802: LD_ADDR_VAR 0 7
5806: PUSH
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_VAR 0 2
5816: PPUSH
5817: LD_VAR 0 3
5821: PUSH
5822: LD_VAR 0 5
5826: ARRAY
5827: PUSH
5828: LD_INT 1
5830: ARRAY
5831: PPUSH
5832: LD_VAR 0 3
5836: PUSH
5837: LD_VAR 0 5
5841: ARRAY
5842: PUSH
5843: LD_INT 2
5845: ARRAY
5846: PPUSH
5847: CALL_OW 298
5851: ST_TO_ADDR
// if d = 0 then
5852: LD_VAR 0 7
5856: PUSH
5857: LD_INT 0
5859: EQUAL
5860: IFFALSE 5864
// continue ;
5862: GO 5799
// if d < dist then
5864: LD_VAR 0 7
5868: PUSH
5869: LD_VAR 0 6
5873: LESS
5874: IFFALSE 5936
// begin _x := list [ i ] [ 1 ] ;
5876: LD_ADDR_VAR 0 8
5880: PUSH
5881: LD_VAR 0 3
5885: PUSH
5886: LD_VAR 0 5
5890: ARRAY
5891: PUSH
5892: LD_INT 1
5894: ARRAY
5895: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5896: LD_ADDR_VAR 0 9
5900: PUSH
5901: LD_VAR 0 3
5905: PUSH
5906: LD_VAR 0 5
5910: ARRAY
5911: PUSH
5912: LD_INT 2
5914: ARRAY
5915: ST_TO_ADDR
// _i := i ;
5916: LD_ADDR_VAR 0 10
5920: PUSH
5921: LD_VAR 0 5
5925: ST_TO_ADDR
// dist := d ;
5926: LD_ADDR_VAR 0 6
5930: PUSH
5931: LD_VAR 0 7
5935: ST_TO_ADDR
// end ; end ;
5936: GO 5799
5938: POP
5939: POP
// result := [ _x , _y , _i , dist ] ;
5940: LD_ADDR_VAR 0 4
5944: PUSH
5945: LD_VAR 0 8
5949: PUSH
5950: LD_VAR 0 9
5954: PUSH
5955: LD_VAR 0 10
5959: PUSH
5960: LD_VAR 0 6
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: ST_TO_ADDR
// end ;
5971: LD_VAR 0 4
5975: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5976: LD_INT 0
5978: PPUSH
5979: PPUSH
5980: PPUSH
5981: PPUSH
// for i = 1 to 72 do
5982: LD_ADDR_VAR 0 5
5986: PUSH
5987: DOUBLE
5988: LD_INT 1
5990: DEC
5991: ST_TO_ADDR
5992: LD_INT 72
5994: PUSH
5995: FOR_TO
5996: IFFALSE 6054
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_VAR 0 1
6007: PPUSH
6008: CALL_OW 321
6012: PUSH
6013: LD_INT 1
6015: EQUAL
6016: PUSH
6017: LD_VAR 0 5
6021: PPUSH
6022: LD_VAR 0 3
6026: PPUSH
6027: CALL_OW 482
6031: PUSH
6032: LD_INT 1
6034: EQUAL
6035: AND
6036: IFFALSE 6052
// AddComResearch ( lab , i ) ;
6038: LD_VAR 0 2
6042: PPUSH
6043: LD_VAR 0 5
6047: PPUSH
6048: CALL_OW 184
6052: GO 5995
6054: POP
6055: POP
// end ;
6056: LD_VAR 0 4
6060: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
6061: LD_INT 0
6063: PPUSH
6064: PPUSH
6065: PPUSH
6066: PPUSH
6067: PPUSH
6068: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6069: LD_ADDR_VAR 0 7
6073: PUSH
6074: LD_VAR 0 2
6078: PPUSH
6079: CALL_OW 313
6083: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6084: LD_ADDR_VAR 0 8
6088: PUSH
6089: LD_VAR 0 3
6093: PPUSH
6094: LD_INT 22
6096: PUSH
6097: LD_VAR 0 1
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: PUSH
6106: LD_INT 25
6108: PUSH
6109: LD_INT 2
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 24
6118: PUSH
6119: LD_INT 750
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: PUSH
6126: LD_INT 3
6128: PUSH
6129: LD_INT 54
6131: PUSH
6132: EMPTY
6133: LIST
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: PPUSH
6145: CALL_OW 70
6149: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6150: LD_ADDR_VAR 0 5
6154: PUSH
6155: LD_VAR 0 3
6159: PPUSH
6160: LD_INT 22
6162: PUSH
6163: LD_VAR 0 1
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PUSH
6172: LD_INT 21
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 3
6184: PUSH
6185: LD_INT 24
6187: PUSH
6188: LD_INT 1000
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: LIST
6203: PUSH
6204: EMPTY
6205: LIST
6206: PPUSH
6207: CALL_OW 70
6211: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6212: LD_VAR 0 5
6216: NOT
6217: PUSH
6218: LD_INT 22
6220: PUSH
6221: LD_VAR 0 1
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: PUSH
6230: LD_INT 25
6232: PUSH
6233: LD_INT 2
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 24
6242: PUSH
6243: LD_INT 250
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: LIST
6254: PPUSH
6255: CALL_OW 69
6259: NOT
6260: AND
6261: IFFALSE 6265
// exit ;
6263: GO 6377
// if buildings_list > 0 and engineerOkInside then
6265: LD_VAR 0 5
6269: PUSH
6270: LD_INT 0
6272: GREATER
6273: PUSH
6274: LD_VAR 0 7
6278: AND
6279: IFFALSE 6305
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6281: LD_VAR 0 7
6285: PPUSH
6286: LD_INT 25
6288: PUSH
6289: LD_INT 2
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: PPUSH
6296: CALL_OW 72
6300: PPUSH
6301: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
6305: LD_VAR 0 5
6309: PUSH
6310: LD_INT 0
6312: GREATER
6313: PUSH
6314: LD_VAR 0 8
6318: PUSH
6319: LD_INT 0
6321: GREATER
6322: AND
6323: IFFALSE 6343
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
6325: LD_VAR 0 8
6329: PPUSH
6330: LD_VAR 0 5
6334: PUSH
6335: LD_INT 1
6337: ARRAY
6338: PPUSH
6339: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
6343: LD_VAR 0 5
6347: PUSH
6348: LD_INT 0
6350: EQUAL
6351: PUSH
6352: LD_VAR 0 8
6356: PUSH
6357: LD_INT 0
6359: GREATER
6360: AND
6361: IFFALSE 6377
// ComEnterUnit ( engineerOkOutside , building ) ;
6363: LD_VAR 0 8
6367: PPUSH
6368: LD_VAR 0 2
6372: PPUSH
6373: CALL_OW 120
// end ;
6377: LD_VAR 0 4
6381: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
6382: LD_INT 0
6384: PPUSH
6385: PPUSH
6386: PPUSH
6387: PPUSH
6388: PPUSH
6389: PPUSH
6390: PPUSH
6391: PPUSH
6392: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6393: LD_ADDR_VAR 0 6
6397: PUSH
6398: LD_INT 22
6400: PUSH
6401: LD_VAR 0 1
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 25
6412: PUSH
6413: LD_INT 4
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: LD_INT 23
6422: PUSH
6423: LD_INT 2
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: PUSH
6430: LD_INT 24
6432: PUSH
6433: LD_INT 251
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 69
6450: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6451: LD_ADDR_VAR 0 7
6455: PUSH
6456: LD_VAR 0 3
6460: PPUSH
6461: LD_INT 22
6463: PUSH
6464: LD_VAR 0 1
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PUSH
6473: LD_INT 23
6475: PUSH
6476: LD_INT 2
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: PUSH
6483: LD_INT 25
6485: PUSH
6486: LD_INT 4
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: PUSH
6493: LD_INT 50
6495: PUSH
6496: EMPTY
6497: LIST
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: PPUSH
6505: CALL_OW 70
6509: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6510: LD_ADDR_VAR 0 10
6514: PUSH
6515: LD_VAR 0 3
6519: PPUSH
6520: LD_INT 22
6522: PUSH
6523: LD_VAR 0 1
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PUSH
6532: LD_INT 21
6534: PUSH
6535: LD_INT 1
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 3
6544: PUSH
6545: LD_INT 25
6547: PUSH
6548: LD_INT 3
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 3
6561: PUSH
6562: LD_INT 24
6564: PUSH
6565: LD_INT 750
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 70
6586: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6587: LD_ADDR_VAR 0 11
6591: PUSH
6592: LD_VAR 0 2
6596: PPUSH
6597: LD_INT 22
6599: PUSH
6600: LD_VAR 0 1
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 21
6611: PUSH
6612: LD_INT 1
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 3
6621: PUSH
6622: LD_INT 25
6624: PUSH
6625: LD_INT 3
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: PUSH
6636: LD_INT 3
6638: PUSH
6639: LD_INT 24
6641: PUSH
6642: LD_INT 1000
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: PPUSH
6659: CALL_OW 70
6663: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6664: LD_VAR 0 10
6668: NOT
6669: PUSH
6670: LD_VAR 0 11
6674: NOT
6675: AND
6676: PUSH
6677: LD_VAR 0 6
6681: NOT
6682: AND
6683: IFFALSE 6687
// exit ;
6685: GO 6921
// if damageUnits > 0 and sci_list > 0 then
6687: LD_VAR 0 10
6691: PUSH
6692: LD_INT 0
6694: GREATER
6695: PUSH
6696: LD_VAR 0 6
6700: PUSH
6701: LD_INT 0
6703: GREATER
6704: AND
6705: IFFALSE 6721
// ComMoveToArea ( damageUnits , healArea ) ;
6707: LD_VAR 0 10
6711: PPUSH
6712: LD_VAR 0 2
6716: PPUSH
6717: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6721: LD_VAR 0 11
6725: PUSH
6726: LD_INT 0
6728: GREATER
6729: PUSH
6730: LD_VAR 0 6
6734: PUSH
6735: LD_INT 0
6737: GREATER
6738: AND
6739: IFFALSE 6750
// ComExitBuilding ( sci_list ) ;
6741: LD_VAR 0 6
6745: PPUSH
6746: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6750: LD_VAR 0 11
6754: PUSH
6755: LD_INT 0
6757: GREATER
6758: PUSH
6759: LD_VAR 0 7
6763: PUSH
6764: LD_INT 0
6766: GREATER
6767: AND
6768: IFFALSE 6788
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6770: LD_VAR 0 7
6774: PPUSH
6775: LD_VAR 0 11
6779: PUSH
6780: LD_INT 1
6782: ARRAY
6783: PPUSH
6784: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6788: LD_VAR 0 10
6792: PUSH
6793: LD_INT 0
6795: EQUAL
6796: PUSH
6797: LD_VAR 0 11
6801: PUSH
6802: LD_INT 0
6804: EQUAL
6805: AND
6806: PUSH
6807: LD_VAR 0 7
6811: PUSH
6812: LD_INT 0
6814: GREATER
6815: AND
6816: IFFALSE 6921
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6818: LD_ADDR_VAR 0 12
6822: PUSH
6823: LD_INT 22
6825: PUSH
6826: LD_VAR 0 1
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 21
6837: PUSH
6838: LD_INT 3
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: LD_INT 30
6847: PUSH
6848: LD_INT 8
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: LIST
6859: PPUSH
6860: CALL_OW 69
6864: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6865: LD_ADDR_VAR 0 13
6869: PUSH
6870: LD_INT 1
6872: PPUSH
6873: LD_VAR 0 12
6877: PPUSH
6878: CALL_OW 12
6882: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6883: LD_VAR 0 7
6887: PPUSH
6888: LD_INT 3
6890: PUSH
6891: LD_INT 60
6893: PUSH
6894: EMPTY
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: PPUSH
6901: CALL_OW 72
6905: PPUSH
6906: LD_VAR 0 12
6910: PUSH
6911: LD_VAR 0 13
6915: ARRAY
6916: PPUSH
6917: CALL_OW 120
// end ; end ;
6921: LD_VAR 0 5
6925: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6926: LD_INT 0
6928: PPUSH
6929: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6930: LD_INT 22
6932: PUSH
6933: LD_VAR 0 1
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: LD_INT 21
6944: PUSH
6945: LD_INT 2
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PPUSH
6956: CALL_OW 69
6960: PUSH
6961: LD_VAR 0 3
6965: LESSEQUAL
6966: IFFALSE 7033
// for i = 1 to vehCount do
6968: LD_ADDR_VAR 0 9
6972: PUSH
6973: DOUBLE
6974: LD_INT 1
6976: DEC
6977: ST_TO_ADDR
6978: LD_VAR 0 3
6982: PUSH
6983: FOR_TO
6984: IFFALSE 7031
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6986: LD_VAR 0 2
6990: PPUSH
6991: LD_VAR 0 7
6995: PPUSH
6996: LD_VAR 0 5
7000: PPUSH
7001: LD_VAR 0 6
7005: PPUSH
7006: LD_VAR 0 4
7010: PUSH
7011: LD_INT 1
7013: PPUSH
7014: LD_VAR 0 4
7018: PPUSH
7019: CALL_OW 12
7023: ARRAY
7024: PPUSH
7025: CALL_OW 185
7029: GO 6983
7031: POP
7032: POP
// end ;
7033: LD_VAR 0 8
7037: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7038: LD_INT 0
7040: PPUSH
7041: PPUSH
7042: PPUSH
7043: PPUSH
7044: PPUSH
7045: PPUSH
7046: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7047: LD_ADDR_VAR 0 8
7051: PUSH
7052: LD_INT 22
7054: PUSH
7055: LD_VAR 0 1
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 21
7066: PUSH
7067: LD_INT 2
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: LD_INT 34
7079: PUSH
7080: LD_INT 51
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: LD_INT 34
7089: PUSH
7090: LD_INT 53
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: PUSH
7097: LD_INT 34
7099: PUSH
7100: LD_INT 52
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: PUSH
7113: LD_INT 24
7115: PUSH
7116: LD_INT 650
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: PPUSH
7129: CALL_OW 69
7133: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
7134: LD_INT 22
7136: PUSH
7137: LD_VAR 0 1
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: LD_INT 21
7148: PUSH
7149: LD_INT 2
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 24
7158: PUSH
7159: LD_INT 1000
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: PPUSH
7171: CALL_OW 69
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: LD_INT 4
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: LIST
7189: PUSH
7190: LD_OWVAR 67
7194: ARRAY
7195: GREATEREQUAL
7196: IFFALSE 7693
// repeat wait ( 0 0$1 ) ;
7198: LD_INT 35
7200: PPUSH
7201: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7205: LD_ADDR_VAR 0 8
7209: PUSH
7210: LD_INT 22
7212: PUSH
7213: LD_VAR 0 1
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: LD_INT 21
7224: PUSH
7225: LD_INT 2
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: LD_INT 3
7234: PUSH
7235: LD_INT 34
7237: PUSH
7238: LD_INT 51
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 34
7247: PUSH
7248: LD_INT 53
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 34
7257: PUSH
7258: LD_INT 52
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 24
7273: PUSH
7274: LD_INT 650
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: PPUSH
7287: CALL_OW 69
7291: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7292: LD_INT 22
7294: PUSH
7295: LD_VAR 0 1
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: LD_INT 95
7306: PUSH
7307: LD_VAR 0 2
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PPUSH
7320: CALL_OW 69
7324: NOT
7325: PUSH
7326: LD_VAR 0 11
7330: PUSH
7331: LD_INT 0
7333: EQUAL
7334: AND
7335: IFFALSE 7390
// for i := 1 to wayX do
7337: LD_ADDR_VAR 0 6
7341: PUSH
7342: DOUBLE
7343: LD_INT 1
7345: DEC
7346: ST_TO_ADDR
7347: LD_VAR 0 3
7351: PUSH
7352: FOR_TO
7353: IFFALSE 7388
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7355: LD_VAR 0 8
7359: PPUSH
7360: LD_VAR 0 3
7364: PUSH
7365: LD_VAR 0 6
7369: ARRAY
7370: PPUSH
7371: LD_VAR 0 4
7375: PUSH
7376: LD_VAR 0 6
7380: ARRAY
7381: PPUSH
7382: CALL_OW 174
7386: GO 7352
7388: POP
7389: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
7390: LD_INT 22
7392: PUSH
7393: LD_VAR 0 1
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 95
7404: PUSH
7405: LD_VAR 0 2
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PPUSH
7418: CALL_OW 69
7422: IFFALSE 7646
// begin seeEnemy = 1 ;
7424: LD_ADDR_VAR 0 11
7428: PUSH
7429: LD_INT 1
7431: ST_TO_ADDR
// for j in vehiclesOK do
7432: LD_ADDR_VAR 0 7
7436: PUSH
7437: LD_VAR 0 8
7441: PUSH
7442: FOR_IN
7443: IFFALSE 7644
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7445: LD_ADDR_VAR 0 9
7449: PUSH
7450: LD_INT 81
7452: PUSH
7453: LD_VAR 0 1
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 101
7464: PUSH
7465: LD_INT 1
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PPUSH
7476: CALL_OW 69
7480: PPUSH
7481: LD_VAR 0 7
7485: PPUSH
7486: CALL_OW 74
7490: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7491: LD_ADDR_VAR 0 10
7495: PUSH
7496: LD_INT 81
7498: PUSH
7499: LD_VAR 0 1
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_INT 101
7510: PUSH
7511: LD_INT 1
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PUSH
7518: LD_INT 2
7520: PUSH
7521: LD_INT 59
7523: PUSH
7524: EMPTY
7525: LIST
7526: PUSH
7527: LD_INT 21
7529: PUSH
7530: LD_INT 1
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 21
7539: PUSH
7540: LD_INT 2
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: PPUSH
7561: CALL_OW 69
7565: PPUSH
7566: LD_VAR 0 7
7570: PPUSH
7571: CALL_OW 74
7575: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7576: LD_VAR 0 7
7580: PPUSH
7581: LD_VAR 0 9
7585: PPUSH
7586: CALL_OW 296
7590: PUSH
7591: LD_INT 8
7593: PLUS
7594: PUSH
7595: LD_VAR 0 7
7599: PPUSH
7600: LD_VAR 0 10
7604: PPUSH
7605: CALL_OW 296
7609: LESS
7610: IFFALSE 7628
// ComAttackUnit ( j , target1 ) else
7612: LD_VAR 0 7
7616: PPUSH
7617: LD_VAR 0 9
7621: PPUSH
7622: CALL_OW 115
7626: GO 7642
// ComAttackUnit ( j , target2 ) ;
7628: LD_VAR 0 7
7632: PPUSH
7633: LD_VAR 0 10
7637: PPUSH
7638: CALL_OW 115
// end ;
7642: GO 7442
7644: POP
7645: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7646: LD_INT 22
7648: PUSH
7649: LD_VAR 0 1
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 21
7660: PUSH
7661: LD_INT 2
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 24
7670: PUSH
7671: LD_INT 1000
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: PPUSH
7683: CALL_OW 69
7687: PUSH
7688: LD_INT 0
7690: EQUAL
7691: IFFALSE 7198
// seeEnemy = 0 ;
7693: LD_ADDR_VAR 0 11
7697: PUSH
7698: LD_INT 0
7700: ST_TO_ADDR
// end ;
7701: LD_VAR 0 5
7705: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7706: LD_INT 0
7708: PPUSH
7709: PPUSH
7710: PPUSH
7711: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7712: LD_ADDR_VAR 0 8
7716: PUSH
7717: LD_INT 22
7719: PUSH
7720: LD_VAR 0 1
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 21
7731: PUSH
7732: LD_INT 2
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 3
7741: PUSH
7742: LD_INT 34
7744: PUSH
7745: LD_INT 51
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: PUSH
7752: LD_INT 34
7754: PUSH
7755: LD_INT 53
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PUSH
7762: LD_INT 34
7764: PUSH
7765: LD_INT 52
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: PUSH
7778: LD_INT 3
7780: PUSH
7781: LD_INT 24
7783: PUSH
7784: LD_INT 650
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: PPUSH
7801: CALL_OW 69
7805: ST_TO_ADDR
// if damageVehicles > 0 then
7806: LD_VAR 0 8
7810: PUSH
7811: LD_INT 0
7813: GREATER
7814: IFFALSE 7835
// ComMoveXY ( damageVehicles , repX , repY ) ;
7816: LD_VAR 0 8
7820: PPUSH
7821: LD_VAR 0 3
7825: PPUSH
7826: LD_VAR 0 4
7830: PPUSH
7831: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7835: LD_VAR 0 8
7839: PPUSH
7840: LD_INT 95
7842: PUSH
7843: LD_VAR 0 2
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 3
7854: PUSH
7855: LD_INT 58
7857: PUSH
7858: EMPTY
7859: LIST
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PPUSH
7869: CALL_OW 72
7873: PUSH
7874: LD_INT 0
7876: GREATER
7877: IFFALSE 7944
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7879: LD_ADDR_VAR 0 6
7883: PUSH
7884: LD_VAR 0 8
7888: PPUSH
7889: LD_INT 95
7891: PUSH
7892: LD_VAR 0 2
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: LD_INT 3
7903: PUSH
7904: LD_INT 58
7906: PUSH
7907: EMPTY
7908: LIST
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PPUSH
7918: CALL_OW 72
7922: PUSH
7923: FOR_IN
7924: IFFALSE 7942
// ComExitVehicle ( UnitsInside ( i ) ) ;
7926: LD_VAR 0 6
7930: PPUSH
7931: CALL_OW 313
7935: PPUSH
7936: CALL_OW 121
7940: GO 7923
7942: POP
7943: POP
// end ;
7944: LD_VAR 0 5
7948: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7949: LD_INT 0
7951: PPUSH
7952: PPUSH
7953: PPUSH
7954: PPUSH
7955: PPUSH
7956: PPUSH
7957: PPUSH
7958: PPUSH
7959: PPUSH
7960: PPUSH
7961: PPUSH
// for i = 1 to medicCount do
7962: LD_ADDR_VAR 0 14
7966: PUSH
7967: DOUBLE
7968: LD_INT 1
7970: DEC
7971: ST_TO_ADDR
7972: LD_VAR 0 7
7976: PUSH
7977: FOR_TO
7978: IFFALSE 8060
// begin uc_side = side ;
7980: LD_ADDR_OWVAR 20
7984: PUSH
7985: LD_VAR 0 1
7989: ST_TO_ADDR
// uc_nation = nation ;
7990: LD_ADDR_OWVAR 21
7994: PUSH
7995: LD_VAR 0 2
7999: ST_TO_ADDR
// hc_name =  ;
8000: LD_ADDR_OWVAR 26
8004: PUSH
8005: LD_STRING 
8007: ST_TO_ADDR
// hc_gallery =  ;
8008: LD_ADDR_OWVAR 33
8012: PUSH
8013: LD_STRING 
8015: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8016: LD_INT 0
8018: PPUSH
8019: LD_INT 4
8021: PPUSH
8022: LD_VAR 0 8
8026: PPUSH
8027: CALL_OW 380
// un = CreateHuman ;
8031: LD_ADDR_VAR 0 16
8035: PUSH
8036: CALL_OW 44
8040: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8041: LD_VAR 0 16
8045: PPUSH
8046: LD_VAR 0 9
8050: PPUSH
8051: LD_INT 0
8053: PPUSH
8054: CALL_OW 49
// end ;
8058: GO 7977
8060: POP
8061: POP
// for i = 1 to soldierCount do
8062: LD_ADDR_VAR 0 14
8066: PUSH
8067: DOUBLE
8068: LD_INT 1
8070: DEC
8071: ST_TO_ADDR
8072: LD_VAR 0 3
8076: PUSH
8077: FOR_TO
8078: IFFALSE 8160
// begin uc_side = side ;
8080: LD_ADDR_OWVAR 20
8084: PUSH
8085: LD_VAR 0 1
8089: ST_TO_ADDR
// uc_nation = nation ;
8090: LD_ADDR_OWVAR 21
8094: PUSH
8095: LD_VAR 0 2
8099: ST_TO_ADDR
// hc_name =  ;
8100: LD_ADDR_OWVAR 26
8104: PUSH
8105: LD_STRING 
8107: ST_TO_ADDR
// hc_gallery =  ;
8108: LD_ADDR_OWVAR 33
8112: PUSH
8113: LD_STRING 
8115: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8116: LD_INT 0
8118: PPUSH
8119: LD_INT 1
8121: PPUSH
8122: LD_VAR 0 8
8126: PPUSH
8127: CALL_OW 380
// un = CreateHuman ;
8131: LD_ADDR_VAR 0 16
8135: PUSH
8136: CALL_OW 44
8140: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8141: LD_VAR 0 16
8145: PPUSH
8146: LD_VAR 0 9
8150: PPUSH
8151: LD_INT 0
8153: PPUSH
8154: CALL_OW 49
// end ;
8158: GO 8077
8160: POP
8161: POP
// for i = 1 to sniperCount do
8162: LD_ADDR_VAR 0 14
8166: PUSH
8167: DOUBLE
8168: LD_INT 1
8170: DEC
8171: ST_TO_ADDR
8172: LD_VAR 0 4
8176: PUSH
8177: FOR_TO
8178: IFFALSE 8260
// begin uc_side = side ;
8180: LD_ADDR_OWVAR 20
8184: PUSH
8185: LD_VAR 0 1
8189: ST_TO_ADDR
// uc_nation = nation ;
8190: LD_ADDR_OWVAR 21
8194: PUSH
8195: LD_VAR 0 2
8199: ST_TO_ADDR
// hc_name =  ;
8200: LD_ADDR_OWVAR 26
8204: PUSH
8205: LD_STRING 
8207: ST_TO_ADDR
// hc_gallery =  ;
8208: LD_ADDR_OWVAR 33
8212: PUSH
8213: LD_STRING 
8215: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8216: LD_INT 0
8218: PPUSH
8219: LD_INT 5
8221: PPUSH
8222: LD_VAR 0 8
8226: PPUSH
8227: CALL_OW 380
// un = CreateHuman ;
8231: LD_ADDR_VAR 0 16
8235: PUSH
8236: CALL_OW 44
8240: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8241: LD_VAR 0 16
8245: PPUSH
8246: LD_VAR 0 9
8250: PPUSH
8251: LD_INT 0
8253: PPUSH
8254: CALL_OW 49
// end ;
8258: GO 8177
8260: POP
8261: POP
// for i = 1 to bazookCount do
8262: LD_ADDR_VAR 0 14
8266: PUSH
8267: DOUBLE
8268: LD_INT 1
8270: DEC
8271: ST_TO_ADDR
8272: LD_VAR 0 5
8276: PUSH
8277: FOR_TO
8278: IFFALSE 8360
// begin uc_side = side ;
8280: LD_ADDR_OWVAR 20
8284: PUSH
8285: LD_VAR 0 1
8289: ST_TO_ADDR
// uc_nation = nation ;
8290: LD_ADDR_OWVAR 21
8294: PUSH
8295: LD_VAR 0 2
8299: ST_TO_ADDR
// hc_name =  ;
8300: LD_ADDR_OWVAR 26
8304: PUSH
8305: LD_STRING 
8307: ST_TO_ADDR
// hc_gallery =  ;
8308: LD_ADDR_OWVAR 33
8312: PUSH
8313: LD_STRING 
8315: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8316: LD_INT 0
8318: PPUSH
8319: LD_INT 9
8321: PPUSH
8322: LD_VAR 0 8
8326: PPUSH
8327: CALL_OW 380
// un = CreateHuman ;
8331: LD_ADDR_VAR 0 16
8335: PUSH
8336: CALL_OW 44
8340: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8341: LD_VAR 0 16
8345: PPUSH
8346: LD_VAR 0 9
8350: PPUSH
8351: LD_INT 0
8353: PPUSH
8354: CALL_OW 49
// end ;
8358: GO 8277
8360: POP
8361: POP
// for i = 1 to mortalCount do
8362: LD_ADDR_VAR 0 14
8366: PUSH
8367: DOUBLE
8368: LD_INT 1
8370: DEC
8371: ST_TO_ADDR
8372: LD_VAR 0 6
8376: PUSH
8377: FOR_TO
8378: IFFALSE 8460
// begin uc_side = side ;
8380: LD_ADDR_OWVAR 20
8384: PUSH
8385: LD_VAR 0 1
8389: ST_TO_ADDR
// uc_nation = nation ;
8390: LD_ADDR_OWVAR 21
8394: PUSH
8395: LD_VAR 0 2
8399: ST_TO_ADDR
// hc_name =  ;
8400: LD_ADDR_OWVAR 26
8404: PUSH
8405: LD_STRING 
8407: ST_TO_ADDR
// hc_gallery =  ;
8408: LD_ADDR_OWVAR 33
8412: PUSH
8413: LD_STRING 
8415: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8416: LD_INT 0
8418: PPUSH
8419: LD_INT 8
8421: PPUSH
8422: LD_VAR 0 8
8426: PPUSH
8427: CALL_OW 380
// un = CreateHuman ;
8431: LD_ADDR_VAR 0 16
8435: PUSH
8436: CALL_OW 44
8440: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8441: LD_VAR 0 16
8445: PPUSH
8446: LD_VAR 0 9
8450: PPUSH
8451: LD_INT 0
8453: PPUSH
8454: CALL_OW 49
// end ;
8458: GO 8377
8460: POP
8461: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8462: LD_ADDR_VAR 0 19
8466: PUSH
8467: LD_INT 22
8469: PUSH
8470: LD_VAR 0 1
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 2
8481: PUSH
8482: LD_INT 25
8484: PUSH
8485: LD_INT 1
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: LD_INT 25
8494: PUSH
8495: LD_INT 5
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PUSH
8502: LD_INT 25
8504: PUSH
8505: LD_INT 8
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: PUSH
8512: LD_INT 25
8514: PUSH
8515: LD_INT 9
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PPUSH
8533: CALL_OW 69
8537: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8538: LD_ADDR_VAR 0 18
8542: PUSH
8543: LD_INT 22
8545: PUSH
8546: LD_VAR 0 1
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PUSH
8555: LD_INT 25
8557: PUSH
8558: LD_INT 4
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PPUSH
8569: CALL_OW 69
8573: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8574: LD_VAR 0 18
8578: PPUSH
8579: LD_VAR 0 10
8583: PPUSH
8584: CALL_OW 113
// if strategy = 1 then
8588: LD_VAR 0 12
8592: PUSH
8593: LD_INT 1
8595: EQUAL
8596: IFFALSE 9087
// begin for i in soldiersOK_list do
8598: LD_ADDR_VAR 0 14
8602: PUSH
8603: LD_VAR 0 19
8607: PUSH
8608: FOR_IN
8609: IFFALSE 8673
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8611: LD_VAR 0 14
8615: PPUSH
8616: LD_INT 91
8618: PPUSH
8619: LD_INT 63
8621: PPUSH
8622: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8626: LD_VAR 0 14
8630: PPUSH
8631: LD_INT 101
8633: PPUSH
8634: LD_INT 53
8636: PPUSH
8637: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8641: LD_VAR 0 14
8645: PPUSH
8646: LD_INT 75
8648: PPUSH
8649: LD_INT 23
8651: PPUSH
8652: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8656: LD_VAR 0 14
8660: PPUSH
8661: LD_INT 78
8663: PPUSH
8664: LD_INT 8
8666: PPUSH
8667: CALL_OW 174
// end ;
8671: GO 8608
8673: POP
8674: POP
// wait ( 0 0$30 ) ;
8675: LD_INT 1050
8677: PPUSH
8678: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8682: LD_INT 35
8684: PPUSH
8685: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8689: LD_ADDR_VAR 0 17
8693: PUSH
8694: LD_INT 22
8696: PUSH
8697: LD_VAR 0 1
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: LD_INT 1
8708: PUSH
8709: LD_INT 3
8711: PUSH
8712: LD_INT 24
8714: PUSH
8715: LD_INT 550
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 24
8728: PUSH
8729: LD_INT 250
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: LIST
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PPUSH
8745: CALL_OW 69
8749: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8750: LD_ADDR_VAR 0 19
8754: PUSH
8755: LD_INT 22
8757: PUSH
8758: LD_VAR 0 1
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PUSH
8767: LD_INT 2
8769: PUSH
8770: LD_INT 25
8772: PUSH
8773: LD_INT 1
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: PUSH
8780: LD_INT 25
8782: PUSH
8783: LD_INT 5
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: PUSH
8790: LD_INT 25
8792: PUSH
8793: LD_INT 8
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PUSH
8800: LD_INT 25
8802: PUSH
8803: LD_INT 9
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: PUSH
8817: LD_INT 24
8819: PUSH
8820: LD_INT 1000
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: PPUSH
8832: CALL_OW 69
8836: ST_TO_ADDR
// if medicCount > 0 then
8837: LD_VAR 0 7
8841: PUSH
8842: LD_INT 0
8844: GREATER
8845: IFFALSE 8889
// begin if damageUnit_list > 0 then
8847: LD_VAR 0 17
8851: PUSH
8852: LD_INT 0
8854: GREATER
8855: IFFALSE 8889
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8857: LD_VAR 0 17
8861: PPUSH
8862: LD_VAR 0 10
8866: PPUSH
8867: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8871: LD_VAR 0 7
8875: PPUSH
8876: LD_VAR 0 17
8880: PUSH
8881: LD_INT 1
8883: ARRAY
8884: PPUSH
8885: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8889: LD_ADDR_VAR 0 14
8893: PUSH
8894: LD_VAR 0 19
8898: PUSH
8899: FOR_IN
8900: IFFALSE 9076
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8902: LD_ADDR_VAR 0 22
8906: PUSH
8907: LD_INT 22
8909: PUSH
8910: LD_VAR 0 11
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PPUSH
8919: CALL_OW 69
8923: PPUSH
8924: LD_VAR 0 14
8928: PPUSH
8929: CALL_OW 74
8933: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8934: LD_ADDR_VAR 0 23
8938: PUSH
8939: LD_INT 22
8941: PUSH
8942: LD_VAR 0 11
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: LD_INT 2
8953: PUSH
8954: LD_INT 59
8956: PUSH
8957: EMPTY
8958: LIST
8959: PUSH
8960: LD_INT 21
8962: PUSH
8963: LD_INT 1
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 21
8972: PUSH
8973: LD_INT 2
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: PUSH
8990: EMPTY
8991: LIST
8992: PPUSH
8993: CALL_OW 69
8997: PPUSH
8998: LD_VAR 0 14
9002: PPUSH
9003: CALL_OW 74
9007: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9008: LD_VAR 0 14
9012: PPUSH
9013: LD_VAR 0 22
9017: PPUSH
9018: CALL_OW 296
9022: PUSH
9023: LD_INT 8
9025: PLUS
9026: PUSH
9027: LD_VAR 0 14
9031: PPUSH
9032: LD_VAR 0 23
9036: PPUSH
9037: CALL_OW 296
9041: LESS
9042: IFFALSE 9060
// begin ComAttackUnit ( i , target1 ) ;
9044: LD_VAR 0 14
9048: PPUSH
9049: LD_VAR 0 22
9053: PPUSH
9054: CALL_OW 115
// end else
9058: GO 9074
// begin ComAttackUnit ( i , target2 ) ;
9060: LD_VAR 0 14
9064: PPUSH
9065: LD_VAR 0 23
9069: PPUSH
9070: CALL_OW 115
// end ; end ;
9074: GO 8899
9076: POP
9077: POP
// until soldiersOK_list = [ ] ;
9078: LD_VAR 0 19
9082: PUSH
9083: EMPTY
9084: EQUAL
9085: IFFALSE 8682
// end ; if strategy = 2 then
9087: LD_VAR 0 12
9091: PUSH
9092: LD_INT 2
9094: EQUAL
9095: IFFALSE 9549
// begin for i in soldiersOK_list do
9097: LD_ADDR_VAR 0 14
9101: PUSH
9102: LD_VAR 0 19
9106: PUSH
9107: FOR_IN
9108: IFFALSE 9142
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
9110: LD_VAR 0 14
9114: PPUSH
9115: LD_INT 91
9117: PPUSH
9118: LD_INT 63
9120: PPUSH
9121: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
9125: LD_VAR 0 14
9129: PPUSH
9130: LD_INT 75
9132: PPUSH
9133: LD_INT 33
9135: PPUSH
9136: CALL_OW 174
// end ;
9140: GO 9107
9142: POP
9143: POP
// repeat wait ( 0 0$3 ) ;
9144: LD_INT 105
9146: PPUSH
9147: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9151: LD_ADDR_VAR 0 17
9155: PUSH
9156: LD_INT 22
9158: PUSH
9159: LD_VAR 0 1
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PUSH
9168: LD_INT 1
9170: PUSH
9171: LD_INT 3
9173: PUSH
9174: LD_INT 24
9176: PUSH
9177: LD_INT 550
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: LD_INT 24
9190: PUSH
9191: LD_INT 250
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: LIST
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PPUSH
9207: CALL_OW 69
9211: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9212: LD_ADDR_VAR 0 19
9216: PUSH
9217: LD_INT 22
9219: PUSH
9220: LD_VAR 0 1
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PUSH
9229: LD_INT 2
9231: PUSH
9232: LD_INT 25
9234: PUSH
9235: LD_INT 1
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 25
9244: PUSH
9245: LD_INT 5
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 25
9254: PUSH
9255: LD_INT 8
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: LD_INT 25
9264: PUSH
9265: LD_INT 9
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 24
9281: PUSH
9282: LD_INT 1000
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: EMPTY
9290: LIST
9291: LIST
9292: LIST
9293: PPUSH
9294: CALL_OW 69
9298: ST_TO_ADDR
// if medicCount > 0 then
9299: LD_VAR 0 7
9303: PUSH
9304: LD_INT 0
9306: GREATER
9307: IFFALSE 9351
// begin if damageUnit_list > 0 then
9309: LD_VAR 0 17
9313: PUSH
9314: LD_INT 0
9316: GREATER
9317: IFFALSE 9351
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
9319: LD_VAR 0 17
9323: PPUSH
9324: LD_VAR 0 10
9328: PPUSH
9329: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
9333: LD_VAR 0 7
9337: PPUSH
9338: LD_VAR 0 17
9342: PUSH
9343: LD_INT 1
9345: ARRAY
9346: PPUSH
9347: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
9351: LD_ADDR_VAR 0 14
9355: PUSH
9356: LD_VAR 0 19
9360: PUSH
9361: FOR_IN
9362: IFFALSE 9538
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9364: LD_ADDR_VAR 0 22
9368: PUSH
9369: LD_INT 22
9371: PUSH
9372: LD_VAR 0 11
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PPUSH
9381: CALL_OW 69
9385: PPUSH
9386: LD_VAR 0 14
9390: PPUSH
9391: CALL_OW 74
9395: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9396: LD_ADDR_VAR 0 23
9400: PUSH
9401: LD_INT 22
9403: PUSH
9404: LD_VAR 0 11
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PUSH
9413: LD_INT 2
9415: PUSH
9416: LD_INT 59
9418: PUSH
9419: EMPTY
9420: LIST
9421: PUSH
9422: LD_INT 21
9424: PUSH
9425: LD_INT 1
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 21
9434: PUSH
9435: LD_INT 2
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: EMPTY
9453: LIST
9454: PPUSH
9455: CALL_OW 69
9459: PPUSH
9460: LD_VAR 0 14
9464: PPUSH
9465: CALL_OW 74
9469: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9470: LD_VAR 0 14
9474: PPUSH
9475: LD_VAR 0 22
9479: PPUSH
9480: CALL_OW 296
9484: PUSH
9485: LD_INT 8
9487: PLUS
9488: PUSH
9489: LD_VAR 0 14
9493: PPUSH
9494: LD_VAR 0 23
9498: PPUSH
9499: CALL_OW 296
9503: LESS
9504: IFFALSE 9522
// begin ComAttackUnit ( i , target1 ) ;
9506: LD_VAR 0 14
9510: PPUSH
9511: LD_VAR 0 22
9515: PPUSH
9516: CALL_OW 115
// end else
9520: GO 9536
// begin ComAttackUnit ( i , target2 ) ;
9522: LD_VAR 0 14
9526: PPUSH
9527: LD_VAR 0 23
9531: PPUSH
9532: CALL_OW 115
// end ; end ;
9536: GO 9361
9538: POP
9539: POP
// until soldiersOK_list = [ ] ;
9540: LD_VAR 0 19
9544: PUSH
9545: EMPTY
9546: EQUAL
9547: IFFALSE 9144
// end ; if not soldiersOK_list and medic_list then
9549: LD_VAR 0 19
9553: NOT
9554: PUSH
9555: LD_VAR 0 18
9559: AND
9560: IFFALSE 9700
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
9562: LD_ADDR_VAR 0 18
9566: PUSH
9567: LD_INT 22
9569: PUSH
9570: LD_VAR 0 1
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: LD_INT 25
9581: PUSH
9582: LD_INT 4
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: LD_INT 50
9591: PUSH
9592: EMPTY
9593: LIST
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: LIST
9599: PPUSH
9600: CALL_OW 69
9604: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9605: LD_INT 35
9607: PPUSH
9608: CALL_OW 67
// for i in medic_list do
9612: LD_ADDR_VAR 0 14
9616: PUSH
9617: LD_VAR 0 18
9621: PUSH
9622: FOR_IN
9623: IFFALSE 9691
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
9625: LD_VAR 0 14
9629: PPUSH
9630: CALL_OW 314
9634: NOT
9635: PUSH
9636: LD_VAR 0 14
9640: PPUSH
9641: LD_INT 4
9643: PPUSH
9644: CALL_OW 308
9648: NOT
9649: AND
9650: IFFALSE 9666
// ComMoveToArea ( i , RussianAttack ) else
9652: LD_VAR 0 14
9656: PPUSH
9657: LD_INT 4
9659: PPUSH
9660: CALL_OW 113
9664: GO 9689
// if IsInArea ( i , RussianAttack ) then
9666: LD_VAR 0 14
9670: PPUSH
9671: LD_INT 4
9673: PPUSH
9674: CALL_OW 308
9678: IFFALSE 9689
// RemoveUnit ( i ) ;
9680: LD_VAR 0 14
9684: PPUSH
9685: CALL_OW 64
9689: GO 9622
9691: POP
9692: POP
// until not medic_list ;
9693: LD_VAR 0 18
9697: NOT
9698: IFFALSE 9562
// end ; end ;
9700: LD_VAR 0 13
9704: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9705: LD_INT 0
9707: PPUSH
9708: PPUSH
9709: PPUSH
9710: PPUSH
9711: PPUSH
9712: PPUSH
9713: PPUSH
9714: PPUSH
9715: PPUSH
9716: PPUSH
9717: PPUSH
// amChassisTab = [ ] ;
9718: LD_ADDR_VAR 0 19
9722: PUSH
9723: EMPTY
9724: ST_TO_ADDR
// arChassisTab = [ ] ;
9725: LD_ADDR_VAR 0 18
9729: PUSH
9730: EMPTY
9731: ST_TO_ADDR
// ruChassisTab = [ ] ;
9732: LD_ADDR_VAR 0 17
9736: PUSH
9737: EMPTY
9738: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9739: LD_INT 35
9741: PPUSH
9742: CALL_OW 67
// if nation = 1 then
9746: LD_VAR 0 5
9750: PUSH
9751: LD_INT 1
9753: EQUAL
9754: IFFALSE 10245
// begin uc_side = side ;
9756: LD_ADDR_OWVAR 20
9760: PUSH
9761: LD_VAR 0 2
9765: ST_TO_ADDR
// uc_nation = nation ;
9766: LD_ADDR_OWVAR 21
9770: PUSH
9771: LD_VAR 0 5
9775: ST_TO_ADDR
// vc_engine = vehengine ;
9776: LD_ADDR_OWVAR 39
9780: PUSH
9781: LD_VAR 0 6
9785: ST_TO_ADDR
// vc_control = vehcontrol ;
9786: LD_ADDR_OWVAR 38
9790: PUSH
9791: LD_VAR 0 7
9795: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9796: LD_ADDR_OWVAR 40
9800: PUSH
9801: LD_VAR 0 10
9805: PUSH
9806: LD_INT 1
9808: PPUSH
9809: LD_VAR 0 10
9813: PPUSH
9814: CALL_OW 12
9818: ARRAY
9819: ST_TO_ADDR
// for j = 1 to AMWeapon do
9820: LD_ADDR_VAR 0 14
9824: PUSH
9825: DOUBLE
9826: LD_INT 1
9828: DEC
9829: ST_TO_ADDR
9830: LD_VAR 0 10
9834: PUSH
9835: FOR_TO
9836: IFFALSE 10137
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9838: LD_VAR 0 10
9842: PUSH
9843: LD_VAR 0 14
9847: ARRAY
9848: PUSH
9849: LD_INT 2
9851: EQUAL
9852: PUSH
9853: LD_VAR 0 10
9857: PUSH
9858: LD_VAR 0 14
9862: ARRAY
9863: PUSH
9864: LD_INT 3
9866: EQUAL
9867: OR
9868: IFFALSE 9921
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9870: LD_ADDR_VAR 0 19
9874: PUSH
9875: LD_INT 1
9877: PUSH
9878: LD_INT 2
9880: PUSH
9881: LD_INT 3
9883: PUSH
9884: LD_INT 4
9886: PUSH
9887: LD_INT 5
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9897: LD_ADDR_OWVAR 37
9901: PUSH
9902: LD_VAR 0 19
9906: PUSH
9907: LD_INT 1
9909: PPUSH
9910: LD_VAR 0 19
9914: PPUSH
9915: CALL_OW 12
9919: ARRAY
9920: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9921: LD_VAR 0 10
9925: PUSH
9926: LD_VAR 0 14
9930: ARRAY
9931: PUSH
9932: LD_INT 4
9934: EQUAL
9935: PUSH
9936: LD_VAR 0 10
9940: PUSH
9941: LD_VAR 0 14
9945: ARRAY
9946: PUSH
9947: LD_INT 5
9949: EQUAL
9950: OR
9951: PUSH
9952: LD_VAR 0 10
9956: PUSH
9957: LD_VAR 0 14
9961: ARRAY
9962: PUSH
9963: LD_INT 9
9965: EQUAL
9966: OR
9967: PUSH
9968: LD_VAR 0 10
9972: PUSH
9973: LD_VAR 0 14
9977: ARRAY
9978: PUSH
9979: LD_INT 11
9981: EQUAL
9982: OR
9983: PUSH
9984: LD_VAR 0 10
9988: PUSH
9989: LD_VAR 0 14
9993: ARRAY
9994: PUSH
9995: LD_INT 7
9997: EQUAL
9998: OR
9999: IFFALSE 10048
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
10001: LD_ADDR_VAR 0 19
10005: PUSH
10006: LD_INT 2
10008: PUSH
10009: LD_INT 3
10011: PUSH
10012: LD_INT 4
10014: PUSH
10015: LD_INT 5
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10024: LD_ADDR_OWVAR 37
10028: PUSH
10029: LD_VAR 0 19
10033: PUSH
10034: LD_INT 1
10036: PPUSH
10037: LD_VAR 0 19
10041: PPUSH
10042: CALL_OW 12
10046: ARRAY
10047: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
10048: LD_VAR 0 10
10052: PUSH
10053: LD_VAR 0 14
10057: ARRAY
10058: PUSH
10059: LD_INT 8
10061: EQUAL
10062: PUSH
10063: LD_VAR 0 10
10067: PUSH
10068: LD_VAR 0 14
10072: ARRAY
10073: PUSH
10074: LD_INT 6
10076: EQUAL
10077: OR
10078: PUSH
10079: LD_VAR 0 10
10083: PUSH
10084: LD_VAR 0 14
10088: ARRAY
10089: PUSH
10090: LD_INT 10
10092: EQUAL
10093: OR
10094: IFFALSE 10135
// begin amChassisTab = [ 4 , 5 ] ;
10096: LD_ADDR_VAR 0 19
10100: PUSH
10101: LD_INT 4
10103: PUSH
10104: LD_INT 5
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10111: LD_ADDR_OWVAR 37
10115: PUSH
10116: LD_VAR 0 19
10120: PUSH
10121: LD_INT 1
10123: PPUSH
10124: LD_VAR 0 19
10128: PPUSH
10129: CALL_OW 12
10133: ARRAY
10134: ST_TO_ADDR
// end ; end ;
10135: GO 9835
10137: POP
10138: POP
// veh = CreateVehicle ;
10139: LD_ADDR_VAR 0 16
10143: PUSH
10144: CALL_OW 45
10148: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10149: LD_VAR 0 16
10153: PPUSH
10154: LD_VAR 0 1
10158: PPUSH
10159: LD_INT 0
10161: PPUSH
10162: CALL_OW 49
// if vehControl = 1 then
10166: LD_VAR 0 7
10170: PUSH
10171: LD_INT 1
10173: EQUAL
10174: IFFALSE 10231
// begin hc_gallery =  ;
10176: LD_ADDR_OWVAR 33
10180: PUSH
10181: LD_STRING 
10183: ST_TO_ADDR
// hc_name =  ;
10184: LD_ADDR_OWVAR 26
10188: PUSH
10189: LD_STRING 
10191: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10192: LD_INT 0
10194: PPUSH
10195: LD_INT 3
10197: PPUSH
10198: LD_VAR 0 4
10202: PPUSH
10203: CALL_OW 380
// un = CreateHuman ;
10207: LD_ADDR_VAR 0 15
10211: PUSH
10212: CALL_OW 44
10216: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10217: LD_VAR 0 15
10221: PPUSH
10222: LD_VAR 0 16
10226: PPUSH
10227: CALL_OW 52
// end ; i = i + 1 ;
10231: LD_ADDR_VAR 0 13
10235: PUSH
10236: LD_VAR 0 13
10240: PUSH
10241: LD_INT 1
10243: PLUS
10244: ST_TO_ADDR
// end ; if nation = 2 then
10245: LD_VAR 0 5
10249: PUSH
10250: LD_INT 2
10252: EQUAL
10253: IFFALSE 10677
// begin uc_side = side ;
10255: LD_ADDR_OWVAR 20
10259: PUSH
10260: LD_VAR 0 2
10264: ST_TO_ADDR
// uc_nation = nation ;
10265: LD_ADDR_OWVAR 21
10269: PUSH
10270: LD_VAR 0 5
10274: ST_TO_ADDR
// vc_engine = vehengine ;
10275: LD_ADDR_OWVAR 39
10279: PUSH
10280: LD_VAR 0 6
10284: ST_TO_ADDR
// vc_control = vehcontrol ;
10285: LD_ADDR_OWVAR 38
10289: PUSH
10290: LD_VAR 0 7
10294: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10295: LD_ADDR_OWVAR 40
10299: PUSH
10300: LD_VAR 0 9
10304: PUSH
10305: LD_INT 1
10307: PPUSH
10308: LD_VAR 0 9
10312: PPUSH
10313: CALL_OW 12
10317: ARRAY
10318: ST_TO_ADDR
// for j = 1 to ARWeapons do
10319: LD_ADDR_VAR 0 14
10323: PUSH
10324: DOUBLE
10325: LD_INT 1
10327: DEC
10328: ST_TO_ADDR
10329: LD_VAR 0 9
10333: PUSH
10334: FOR_TO
10335: IFFALSE 10569
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10337: LD_VAR 0 9
10341: PUSH
10342: LD_VAR 0 14
10346: ARRAY
10347: PUSH
10348: LD_INT 24
10350: EQUAL
10351: PUSH
10352: LD_VAR 0 9
10356: PUSH
10357: LD_VAR 0 14
10361: ARRAY
10362: PUSH
10363: LD_INT 22
10365: EQUAL
10366: OR
10367: PUSH
10368: LD_VAR 0 9
10372: PUSH
10373: LD_VAR 0 14
10377: ARRAY
10378: PUSH
10379: LD_INT 23
10381: EQUAL
10382: OR
10383: PUSH
10384: LD_VAR 0 9
10388: PUSH
10389: LD_VAR 0 14
10393: ARRAY
10394: PUSH
10395: LD_INT 30
10397: EQUAL
10398: OR
10399: IFFALSE 10448
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10401: LD_ADDR_VAR 0 18
10405: PUSH
10406: LD_INT 11
10408: PUSH
10409: LD_INT 12
10411: PUSH
10412: LD_INT 13
10414: PUSH
10415: LD_INT 14
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10424: LD_ADDR_OWVAR 37
10428: PUSH
10429: LD_VAR 0 18
10433: PUSH
10434: LD_INT 1
10436: PPUSH
10437: LD_VAR 0 18
10441: PPUSH
10442: CALL_OW 12
10446: ARRAY
10447: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10448: LD_VAR 0 9
10452: PUSH
10453: LD_VAR 0 14
10457: ARRAY
10458: PUSH
10459: LD_INT 29
10461: EQUAL
10462: PUSH
10463: LD_VAR 0 9
10467: PUSH
10468: LD_VAR 0 14
10472: ARRAY
10473: PUSH
10474: LD_INT 28
10476: EQUAL
10477: OR
10478: PUSH
10479: LD_VAR 0 9
10483: PUSH
10484: LD_VAR 0 14
10488: ARRAY
10489: PUSH
10490: LD_INT 27
10492: EQUAL
10493: OR
10494: PUSH
10495: LD_VAR 0 9
10499: PUSH
10500: LD_VAR 0 14
10504: ARRAY
10505: PUSH
10506: LD_INT 26
10508: EQUAL
10509: OR
10510: PUSH
10511: LD_VAR 0 9
10515: PUSH
10516: LD_VAR 0 14
10520: ARRAY
10521: PUSH
10522: LD_INT 25
10524: EQUAL
10525: OR
10526: IFFALSE 10567
// begin arChassisTab = [ 13 , 14 ] ;
10528: LD_ADDR_VAR 0 18
10532: PUSH
10533: LD_INT 13
10535: PUSH
10536: LD_INT 14
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10543: LD_ADDR_OWVAR 37
10547: PUSH
10548: LD_VAR 0 18
10552: PUSH
10553: LD_INT 1
10555: PPUSH
10556: LD_VAR 0 18
10560: PPUSH
10561: CALL_OW 12
10565: ARRAY
10566: ST_TO_ADDR
// end ; end ;
10567: GO 10334
10569: POP
10570: POP
// veh = CreateVehicle ;
10571: LD_ADDR_VAR 0 16
10575: PUSH
10576: CALL_OW 45
10580: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10581: LD_VAR 0 16
10585: PPUSH
10586: LD_VAR 0 1
10590: PPUSH
10591: LD_INT 0
10593: PPUSH
10594: CALL_OW 49
// if vehcontrol = 1 then
10598: LD_VAR 0 7
10602: PUSH
10603: LD_INT 1
10605: EQUAL
10606: IFFALSE 10663
// begin hc_gallery =  ;
10608: LD_ADDR_OWVAR 33
10612: PUSH
10613: LD_STRING 
10615: ST_TO_ADDR
// hc_name =  ;
10616: LD_ADDR_OWVAR 26
10620: PUSH
10621: LD_STRING 
10623: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10624: LD_INT 0
10626: PPUSH
10627: LD_INT 3
10629: PPUSH
10630: LD_VAR 0 4
10634: PPUSH
10635: CALL_OW 380
// un = CreateHuman ;
10639: LD_ADDR_VAR 0 15
10643: PUSH
10644: CALL_OW 44
10648: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10649: LD_VAR 0 15
10653: PPUSH
10654: LD_VAR 0 16
10658: PPUSH
10659: CALL_OW 52
// end ; i = i + 1 ;
10663: LD_ADDR_VAR 0 13
10667: PUSH
10668: LD_VAR 0 13
10672: PUSH
10673: LD_INT 1
10675: PLUS
10676: ST_TO_ADDR
// end ; if nation = 3 then
10677: LD_VAR 0 5
10681: PUSH
10682: LD_INT 3
10684: EQUAL
10685: IFFALSE 11077
// begin uc_side = side ;
10687: LD_ADDR_OWVAR 20
10691: PUSH
10692: LD_VAR 0 2
10696: ST_TO_ADDR
// uc_nation = nation ;
10697: LD_ADDR_OWVAR 21
10701: PUSH
10702: LD_VAR 0 5
10706: ST_TO_ADDR
// vc_engine = vehengine ;
10707: LD_ADDR_OWVAR 39
10711: PUSH
10712: LD_VAR 0 6
10716: ST_TO_ADDR
// vc_control = vehcontrol ;
10717: LD_ADDR_OWVAR 38
10721: PUSH
10722: LD_VAR 0 7
10726: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10727: LD_ADDR_OWVAR 40
10731: PUSH
10732: LD_VAR 0 8
10736: PUSH
10737: LD_INT 1
10739: PPUSH
10740: LD_VAR 0 8
10744: PPUSH
10745: CALL_OW 12
10749: ARRAY
10750: ST_TO_ADDR
// for j = 1 to RuWeapons do
10751: LD_ADDR_VAR 0 14
10755: PUSH
10756: DOUBLE
10757: LD_INT 1
10759: DEC
10760: ST_TO_ADDR
10761: LD_VAR 0 8
10765: PUSH
10766: FOR_TO
10767: IFFALSE 10969
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10769: LD_VAR 0 8
10773: PUSH
10774: LD_VAR 0 14
10778: ARRAY
10779: PUSH
10780: LD_INT 42
10782: EQUAL
10783: PUSH
10784: LD_VAR 0 8
10788: PUSH
10789: LD_VAR 0 14
10793: ARRAY
10794: PUSH
10795: LD_INT 43
10797: EQUAL
10798: OR
10799: PUSH
10800: LD_VAR 0 8
10804: PUSH
10805: LD_VAR 0 14
10809: ARRAY
10810: PUSH
10811: LD_INT 44
10813: EQUAL
10814: OR
10815: PUSH
10816: LD_VAR 0 8
10820: PUSH
10821: LD_VAR 0 14
10825: ARRAY
10826: PUSH
10827: LD_INT 45
10829: EQUAL
10830: OR
10831: PUSH
10832: LD_VAR 0 8
10836: PUSH
10837: LD_VAR 0 14
10841: ARRAY
10842: PUSH
10843: LD_INT 49
10845: EQUAL
10846: OR
10847: IFFALSE 10896
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10849: LD_ADDR_VAR 0 17
10853: PUSH
10854: LD_INT 21
10856: PUSH
10857: LD_INT 22
10859: PUSH
10860: LD_INT 23
10862: PUSH
10863: LD_INT 24
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10872: LD_ADDR_OWVAR 37
10876: PUSH
10877: LD_VAR 0 17
10881: PUSH
10882: LD_INT 1
10884: PPUSH
10885: LD_VAR 0 17
10889: PPUSH
10890: CALL_OW 12
10894: ARRAY
10895: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10896: LD_VAR 0 8
10900: PUSH
10901: LD_VAR 0 14
10905: ARRAY
10906: PUSH
10907: LD_INT 46
10909: EQUAL
10910: PUSH
10911: LD_VAR 0 8
10915: PUSH
10916: LD_VAR 0 14
10920: ARRAY
10921: PUSH
10922: LD_INT 47
10924: EQUAL
10925: OR
10926: IFFALSE 10967
// begin ruChassisTab = [ 23 , 24 ] ;
10928: LD_ADDR_VAR 0 17
10932: PUSH
10933: LD_INT 23
10935: PUSH
10936: LD_INT 24
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10943: LD_ADDR_OWVAR 37
10947: PUSH
10948: LD_VAR 0 17
10952: PUSH
10953: LD_INT 1
10955: PPUSH
10956: LD_VAR 0 17
10960: PPUSH
10961: CALL_OW 12
10965: ARRAY
10966: ST_TO_ADDR
// end ; end ;
10967: GO 10766
10969: POP
10970: POP
// veh = CreateVehicle ;
10971: LD_ADDR_VAR 0 16
10975: PUSH
10976: CALL_OW 45
10980: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10981: LD_VAR 0 16
10985: PPUSH
10986: LD_VAR 0 1
10990: PPUSH
10991: LD_INT 0
10993: PPUSH
10994: CALL_OW 49
// if vehcontrol = 1 then
10998: LD_VAR 0 7
11002: PUSH
11003: LD_INT 1
11005: EQUAL
11006: IFFALSE 11063
// begin hc_gallery =  ;
11008: LD_ADDR_OWVAR 33
11012: PUSH
11013: LD_STRING 
11015: ST_TO_ADDR
// hc_name =  ;
11016: LD_ADDR_OWVAR 26
11020: PUSH
11021: LD_STRING 
11023: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
11024: LD_INT 0
11026: PPUSH
11027: LD_INT 3
11029: PPUSH
11030: LD_VAR 0 4
11034: PPUSH
11035: CALL_OW 380
// un = CreateHuman ;
11039: LD_ADDR_VAR 0 15
11043: PUSH
11044: CALL_OW 44
11048: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11049: LD_VAR 0 15
11053: PPUSH
11054: LD_VAR 0 16
11058: PPUSH
11059: CALL_OW 52
// end ; i = i + 1 ;
11063: LD_ADDR_VAR 0 13
11067: PUSH
11068: LD_VAR 0 13
11072: PUSH
11073: LD_INT 1
11075: PLUS
11076: ST_TO_ADDR
// end ; until i = vehCount ;
11077: LD_VAR 0 13
11081: PUSH
11082: LD_VAR 0 3
11086: EQUAL
11087: IFFALSE 9739
// repeat wait ( 0 0$1 ) ;
11089: LD_INT 35
11091: PPUSH
11092: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
11096: LD_INT 22
11098: PUSH
11099: LD_VAR 0 2
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PUSH
11108: LD_INT 21
11110: PUSH
11111: LD_INT 2
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PUSH
11118: LD_INT 24
11120: PUSH
11121: LD_INT 250
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 3
11130: PUSH
11131: LD_INT 58
11133: PUSH
11134: EMPTY
11135: LIST
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: PPUSH
11147: CALL_OW 69
11151: PUSH
11152: LD_INT 0
11154: GREATER
11155: IFFALSE 11397
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
11157: LD_ADDR_VAR 0 13
11161: PUSH
11162: LD_INT 22
11164: PUSH
11165: LD_VAR 0 2
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 21
11176: PUSH
11177: LD_INT 2
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 24
11186: PUSH
11187: LD_INT 250
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: LD_INT 3
11196: PUSH
11197: LD_INT 58
11199: PUSH
11200: EMPTY
11201: LIST
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: PPUSH
11213: CALL_OW 69
11217: PUSH
11218: FOR_IN
11219: IFFALSE 11395
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11221: LD_ADDR_VAR 0 21
11225: PUSH
11226: LD_INT 22
11228: PUSH
11229: LD_VAR 0 11
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PPUSH
11238: CALL_OW 69
11242: PPUSH
11243: LD_VAR 0 13
11247: PPUSH
11248: CALL_OW 74
11252: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11253: LD_ADDR_VAR 0 22
11257: PUSH
11258: LD_INT 22
11260: PUSH
11261: LD_VAR 0 11
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: LD_INT 2
11272: PUSH
11273: LD_INT 59
11275: PUSH
11276: EMPTY
11277: LIST
11278: PUSH
11279: LD_INT 21
11281: PUSH
11282: LD_INT 1
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PUSH
11289: LD_INT 21
11291: PUSH
11292: LD_INT 2
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: EMPTY
11310: LIST
11311: PPUSH
11312: CALL_OW 69
11316: PPUSH
11317: LD_VAR 0 13
11321: PPUSH
11322: CALL_OW 74
11326: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11327: LD_VAR 0 13
11331: PPUSH
11332: LD_VAR 0 21
11336: PPUSH
11337: CALL_OW 296
11341: PUSH
11342: LD_INT 8
11344: PLUS
11345: PUSH
11346: LD_VAR 0 13
11350: PPUSH
11351: LD_VAR 0 22
11355: PPUSH
11356: CALL_OW 296
11360: LESS
11361: IFFALSE 11379
// begin ComAttackUnit ( i , target1 ) ;
11363: LD_VAR 0 13
11367: PPUSH
11368: LD_VAR 0 21
11372: PPUSH
11373: CALL_OW 115
// end else
11377: GO 11393
// begin ComAttackUnit ( i , target2 ) ;
11379: LD_VAR 0 13
11383: PPUSH
11384: LD_VAR 0 22
11388: PPUSH
11389: CALL_OW 115
// end ; end ;
11393: GO 11218
11395: POP
11396: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11397: LD_INT 22
11399: PUSH
11400: LD_VAR 0 2
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PUSH
11409: LD_INT 21
11411: PUSH
11412: LD_INT 2
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PUSH
11419: LD_INT 24
11421: PUSH
11422: LD_INT 250
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 3
11431: PUSH
11432: LD_INT 58
11434: PUSH
11435: EMPTY
11436: LIST
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: PPUSH
11448: CALL_OW 69
11452: PUSH
11453: LD_INT 0
11455: EQUAL
11456: IFFALSE 11089
// end ; end_of_file
11458: LD_VAR 0 12
11462: RET
// every 1 do var i , gammaSquad , startX , startY ;
11463: GO 11465
11465: DISABLE
11466: LD_INT 0
11468: PPUSH
11469: PPUSH
11470: PPUSH
11471: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11472: LD_ADDR_VAR 0 2
11476: PUSH
11477: LD_EXP 8
11481: PUSH
11482: LD_EXP 9
11486: PUSH
11487: LD_EXP 10
11491: PUSH
11492: LD_EXP 11
11496: PUSH
11497: LD_EXP 12
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11509: LD_ADDR_VAR 0 3
11513: PUSH
11514: LD_INT 46
11516: PUSH
11517: LD_INT 45
11519: PUSH
11520: LD_INT 44
11522: PUSH
11523: LD_INT 43
11525: PUSH
11526: LD_INT 42
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11536: LD_ADDR_VAR 0 4
11540: PUSH
11541: LD_INT 14
11543: PUSH
11544: LD_INT 12
11546: PUSH
11547: LD_INT 10
11549: PUSH
11550: LD_INT 8
11552: PUSH
11553: LD_INT 6
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
11563: LD_EXP 11
11567: PPUSH
11568: LD_INT 31
11570: PPUSH
11571: LD_INT 59
11573: PPUSH
11574: LD_INT 19
11576: PPUSH
11577: LD_INT 5
11579: PPUSH
11580: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
11584: LD_INT 32
11586: PPUSH
11587: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11591: LD_INT 32
11593: PPUSH
11594: LD_INT 51
11596: PPUSH
11597: LD_INT 26
11599: PPUSH
11600: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11604: LD_INT 32
11606: PPUSH
11607: LD_INT 53
11609: PPUSH
11610: LD_INT 23
11612: PPUSH
11613: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11617: LD_INT 32
11619: PPUSH
11620: LD_INT 52
11622: PPUSH
11623: LD_INT 19
11625: PPUSH
11626: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11630: LD_INT 35
11632: PPUSH
11633: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11637: LD_INT 32
11639: PPUSH
11640: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11644: LD_INT 32
11646: PPUSH
11647: CALL_OW 250
11651: PUSH
11652: LD_INT 52
11654: EQUAL
11655: PUSH
11656: LD_INT 32
11658: PPUSH
11659: CALL_OW 251
11663: PUSH
11664: LD_INT 19
11666: EQUAL
11667: AND
11668: IFFALSE 11630
// ComExitVehicle ( JMM ) ;
11670: LD_EXP 1
11674: PPUSH
11675: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11679: LD_EXP 7
11683: PPUSH
11684: LD_EXP 1
11688: PPUSH
11689: CALL_OW 119
// wait ( 0 0$01 ) ;
11693: LD_INT 35
11695: PPUSH
11696: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11700: LD_EXP 1
11704: PPUSH
11705: LD_INT 46
11707: PPUSH
11708: LD_INT 10
11710: PPUSH
11711: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11715: LD_EXP 1
11719: PPUSH
11720: LD_EXP 7
11724: PPUSH
11725: CALL_OW 179
// wait ( 0 0$4 ) ;
11729: LD_INT 140
11731: PPUSH
11732: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11736: LD_EXP 1
11740: PPUSH
11741: LD_STRING D1-JMM-1
11743: PPUSH
11744: CALL_OW 88
// if not dialogue_skipped then
11748: LD_OWVAR 59
11752: NOT
11753: IFFALSE 12410
// begin for i := 1 to gammaSquad do
11755: LD_ADDR_VAR 0 1
11759: PUSH
11760: DOUBLE
11761: LD_INT 1
11763: DEC
11764: ST_TO_ADDR
11765: LD_VAR 0 2
11769: PUSH
11770: FOR_TO
11771: IFFALSE 11832
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11773: LD_VAR 0 2
11777: PUSH
11778: LD_VAR 0 1
11782: ARRAY
11783: PPUSH
11784: LD_VAR 0 3
11788: PUSH
11789: LD_VAR 0 1
11793: ARRAY
11794: PPUSH
11795: LD_VAR 0 4
11799: PUSH
11800: LD_VAR 0 1
11804: ARRAY
11805: PPUSH
11806: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11810: LD_VAR 0 2
11814: PUSH
11815: LD_VAR 0 1
11819: ARRAY
11820: PPUSH
11821: LD_EXP 1
11825: PPUSH
11826: CALL_OW 179
// end ;
11830: GO 11770
11832: POP
11833: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11834: LD_EXP 4
11838: PPUSH
11839: LD_INT 41
11841: PPUSH
11842: LD_INT 4
11844: PPUSH
11845: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11849: LD_EXP 4
11853: PPUSH
11854: LD_EXP 1
11858: PPUSH
11859: CALL_OW 179
// if Lisa = false and Bobby then
11863: LD_EXP 4
11867: PUSH
11868: LD_INT 0
11870: EQUAL
11871: PUSH
11872: LD_EXP 2
11876: AND
11877: IFFALSE 11908
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11879: LD_EXP 2
11883: PPUSH
11884: LD_INT 41
11886: PPUSH
11887: LD_INT 4
11889: PPUSH
11890: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11894: LD_EXP 2
11898: PPUSH
11899: LD_EXP 1
11903: PPUSH
11904: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11908: LD_EXP 4
11912: PUSH
11913: LD_INT 0
11915: EQUAL
11916: PUSH
11917: LD_EXP 2
11921: PUSH
11922: LD_INT 0
11924: EQUAL
11925: AND
11926: PUSH
11927: LD_EXP 3
11931: AND
11932: IFFALSE 11963
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11934: LD_EXP 3
11938: PPUSH
11939: LD_INT 41
11941: PPUSH
11942: LD_INT 4
11944: PPUSH
11945: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11949: LD_EXP 3
11953: PPUSH
11954: LD_EXP 1
11958: PPUSH
11959: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11963: LD_EXP 4
11967: PUSH
11968: LD_INT 0
11970: EQUAL
11971: PUSH
11972: LD_EXP 2
11976: PUSH
11977: LD_INT 0
11979: EQUAL
11980: AND
11981: PUSH
11982: LD_EXP 3
11986: PUSH
11987: LD_INT 0
11989: EQUAL
11990: AND
11991: IFFALSE 12022
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11993: LD_EXP 6
11997: PPUSH
11998: LD_INT 41
12000: PPUSH
12001: LD_INT 4
12003: PPUSH
12004: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
12008: LD_EXP 6
12012: PPUSH
12013: LD_EXP 1
12017: PPUSH
12018: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
12022: LD_EXP 7
12026: PPUSH
12027: LD_STRING D1-Brown-1
12029: PPUSH
12030: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
12034: LD_EXP 1
12038: PPUSH
12039: LD_STRING D1-JMM-2
12041: PPUSH
12042: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
12046: LD_EXP 7
12050: PPUSH
12051: LD_STRING D1-Brown-2
12053: PPUSH
12054: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
12058: LD_EXP 1
12062: PPUSH
12063: LD_EXP 9
12067: PPUSH
12068: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
12072: LD_EXP 9
12076: PPUSH
12077: LD_STRING D1-FSol1-2
12079: PPUSH
12080: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
12084: LD_EXP 1
12088: PPUSH
12089: LD_EXP 8
12093: PPUSH
12094: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
12098: LD_EXP 8
12102: PPUSH
12103: LD_STRING D1-Sol2-2
12105: PPUSH
12106: CALL_OW 88
// if Lisa then
12110: LD_EXP 4
12114: IFFALSE 12154
// begin ComTurnUnit ( JMM , Lisa ) ;
12116: LD_EXP 1
12120: PPUSH
12121: LD_EXP 4
12125: PPUSH
12126: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
12130: LD_EXP 4
12134: PPUSH
12135: LD_STRING D1-Lisa-2
12137: PPUSH
12138: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12142: LD_EXP 1
12146: PPUSH
12147: LD_STRING D1-JMM-3
12149: PPUSH
12150: CALL_OW 88
// end ; if Bobby then
12154: LD_EXP 2
12158: IFFALSE 12198
// begin ComTurnUnit ( JMM , Bobby ) ;
12160: LD_EXP 1
12164: PPUSH
12165: LD_EXP 2
12169: PPUSH
12170: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
12174: LD_EXP 2
12178: PPUSH
12179: LD_STRING D1-Bobby-2
12181: PPUSH
12182: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12186: LD_EXP 1
12190: PPUSH
12191: LD_STRING D1-JMM-3
12193: PPUSH
12194: CALL_OW 88
// end ; if Cyrus then
12198: LD_EXP 3
12202: IFFALSE 12242
// begin ComTurnUnit ( JMM , Cyrus ) ;
12204: LD_EXP 1
12208: PPUSH
12209: LD_EXP 3
12213: PPUSH
12214: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
12218: LD_EXP 3
12222: PPUSH
12223: LD_STRING D1-Cyrus-2
12225: PPUSH
12226: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12230: LD_EXP 1
12234: PPUSH
12235: LD_STRING D1-JMM-3
12237: PPUSH
12238: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
12242: LD_EXP 1
12246: PPUSH
12247: LD_EXP 7
12251: PPUSH
12252: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
12256: LD_EXP 1
12260: PPUSH
12261: LD_STRING D1-JMM-3a
12263: PPUSH
12264: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
12268: LD_EXP 7
12272: PPUSH
12273: LD_INT 38
12275: PPUSH
12276: LD_INT 5
12278: PPUSH
12279: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
12283: LD_EXP 7
12287: PPUSH
12288: LD_EXP 1
12292: PPUSH
12293: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
12297: LD_EXP 1
12301: PPUSH
12302: LD_INT 40
12304: PPUSH
12305: LD_INT 7
12307: PPUSH
12308: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12312: LD_EXP 1
12316: PPUSH
12317: LD_EXP 7
12321: PPUSH
12322: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12326: LD_EXP 7
12330: PPUSH
12331: LD_STRING D1-Brown-3
12333: PPUSH
12334: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12338: LD_EXP 14
12342: PPUSH
12343: LD_STRING D1-Har-3
12345: PPUSH
12346: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12350: LD_EXP 1
12354: PPUSH
12355: LD_STRING D1-JMM-4
12357: PPUSH
12358: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12362: LD_EXP 14
12366: PPUSH
12367: LD_STRING D1-Har-4
12369: PPUSH
12370: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12374: LD_EXP 1
12378: PPUSH
12379: LD_STRING D1-JMM-5
12381: PPUSH
12382: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12386: LD_EXP 14
12390: PPUSH
12391: LD_STRING D1-Har-5
12393: PPUSH
12394: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12398: LD_EXP 1
12402: PPUSH
12403: LD_STRING D1-JMM-6
12405: PPUSH
12406: CALL_OW 88
// end ; InGameOff ;
12410: CALL_OW 9
// PrepareRussianConvoy ;
12414: CALL 3430 0 0
// ChangeMissionObjectives ( M1 ) ;
12418: LD_STRING M1
12420: PPUSH
12421: CALL_OW 337
// SaveForQuickRestart ;
12425: CALL_OW 22
// timerStatus = 1 ;
12429: LD_ADDR_EXP 29
12433: PUSH
12434: LD_INT 1
12436: ST_TO_ADDR
// startTimer = 1 ;
12437: LD_ADDR_EXP 30
12441: PUSH
12442: LD_INT 1
12444: ST_TO_ADDR
// bonusAvalaible = 1 ;
12445: LD_ADDR_EXP 44
12449: PUSH
12450: LD_INT 1
12452: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12453: LD_INT 105
12455: PPUSH
12456: CALL_OW 67
// DialogueOn ;
12460: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12464: LD_EXP 12
12468: PPUSH
12469: LD_STRING D9-Mech1-1
12471: PPUSH
12472: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12476: LD_EXP 1
12480: PPUSH
12481: LD_STRING D9-JMM-1
12483: PPUSH
12484: CALL_OW 88
// DialogueOff ;
12488: CALL_OW 7
// end ;
12492: PPOPN 4
12494: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) > 0 do
12495: LD_INT 47
12497: PPUSH
12498: LD_INT 1
12500: PPUSH
12501: CALL_OW 321
12505: PUSH
12506: LD_INT 2
12508: EQUAL
12509: PUSH
12510: LD_EXP 31
12514: NOT
12515: AND
12516: PUSH
12517: LD_INT 22
12519: PUSH
12520: LD_INT 1
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PUSH
12527: LD_INT 21
12529: PUSH
12530: LD_INT 3
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: LD_INT 30
12539: PUSH
12540: LD_INT 3
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: LD_INT 57
12549: PUSH
12550: EMPTY
12551: LIST
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: PPUSH
12559: CALL_OW 69
12563: PUSH
12564: LD_INT 0
12566: GREATER
12567: AND
12568: IFFALSE 12806
12570: GO 12572
12572: DISABLE
// begin factoryDialog := true ;
12573: LD_ADDR_EXP 31
12577: PUSH
12578: LD_INT 1
12580: ST_TO_ADDR
// if IsOk ( Campell ) then
12581: LD_EXP 12
12585: PPUSH
12586: CALL_OW 302
12590: IFFALSE 12606
// begin Say ( Campell , D10-Mech1-1 ) ;
12592: LD_EXP 12
12596: PPUSH
12597: LD_STRING D10-Mech1-1
12599: PPUSH
12600: CALL_OW 88
// end else
12604: GO 12806
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12606: LD_INT 22
12608: PUSH
12609: LD_INT 1
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 21
12618: PUSH
12619: LD_INT 1
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: LD_INT 25
12628: PUSH
12629: LD_INT 3
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: LD_INT 26
12638: PUSH
12639: LD_INT 1
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: PPUSH
12652: CALL_OW 69
12656: PUSH
12657: LD_EXP 1
12661: PUSH
12662: EMPTY
12663: LIST
12664: PUSH
12665: LD_INT 0
12667: GREATER
12668: DIFF
12669: IFFALSE 12743
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12671: LD_INT 22
12673: PUSH
12674: LD_INT 1
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: LD_INT 21
12683: PUSH
12684: LD_INT 1
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: LD_INT 25
12693: PUSH
12694: LD_INT 3
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PUSH
12701: LD_INT 26
12703: PUSH
12704: LD_INT 1
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: PPUSH
12717: CALL_OW 69
12721: PUSH
12722: LD_EXP 1
12726: PUSH
12727: EMPTY
12728: LIST
12729: DIFF
12730: PPUSH
12731: LD_STRING D10-Mech1-1
12733: PPUSH
12734: LD_STRING D10-Mech1-1
12736: PPUSH
12737: CALL 4625 0 3
// end else
12741: GO 12806
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12743: LD_INT 22
12745: PUSH
12746: LD_INT 1
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 21
12755: PUSH
12756: LD_INT 1
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: LD_INT 26
12765: PUSH
12766: LD_INT 1
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: LIST
12777: PUSH
12778: LD_INT 1
12780: ARRAY
12781: PPUSH
12782: CALL_OW 69
12786: PUSH
12787: LD_EXP 1
12791: PUSH
12792: EMPTY
12793: LIST
12794: DIFF
12795: PPUSH
12796: LD_STRING D10-Mech1-1
12798: PPUSH
12799: LD_STRING D10-Mech1-1
12801: PPUSH
12802: CALL 4625 0 3
// end ; end ; end ;
12806: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12807: LD_INT 22
12809: PUSH
12810: LD_INT 1
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 30
12819: PUSH
12820: LD_INT 32
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PPUSH
12831: CALL_OW 69
12835: PUSH
12836: LD_INT 0
12838: GREATER
12839: PUSH
12840: LD_EXP 32
12844: PUSH
12845: LD_INT 0
12847: EQUAL
12848: AND
12849: IFFALSE 13089
12851: GO 12853
12853: DISABLE
// begin if IsOK ( Claptopn ) then
12854: LD_EXP 11
12858: PPUSH
12859: CALL_OW 302
12863: IFFALSE 12879
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12865: LD_EXP 11
12869: PPUSH
12870: LD_STRING D9b-Eng1-1
12872: PPUSH
12873: CALL_OW 88
// end else
12877: GO 13075
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12879: LD_INT 22
12881: PUSH
12882: LD_INT 1
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: PUSH
12889: LD_INT 21
12891: PUSH
12892: LD_INT 1
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PUSH
12899: LD_INT 25
12901: PUSH
12902: LD_INT 3
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PUSH
12909: LD_INT 26
12911: PUSH
12912: LD_INT 1
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: PPUSH
12925: CALL_OW 69
12929: PUSH
12930: LD_EXP 1
12934: PUSH
12935: EMPTY
12936: LIST
12937: PUSH
12938: LD_INT 0
12940: GREATER
12941: DIFF
12942: IFFALSE 13016
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12944: LD_INT 22
12946: PUSH
12947: LD_INT 1
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 21
12956: PUSH
12957: LD_INT 1
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: LD_INT 25
12966: PUSH
12967: LD_INT 2
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: LD_INT 26
12976: PUSH
12977: LD_INT 1
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 69
12994: PUSH
12995: LD_EXP 1
12999: PUSH
13000: EMPTY
13001: LIST
13002: DIFF
13003: PPUSH
13004: LD_STRING D9b-Eng1-1
13006: PPUSH
13007: LD_STRING D9b-Eng1-11
13009: PPUSH
13010: CALL 4625 0 3
// end else
13014: GO 13075
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
13016: LD_INT 22
13018: PUSH
13019: LD_INT 1
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: LD_INT 21
13028: PUSH
13029: LD_INT 1
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 26
13038: PUSH
13039: LD_INT 1
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: PPUSH
13051: CALL_OW 69
13055: PUSH
13056: LD_EXP 1
13060: PUSH
13061: EMPTY
13062: LIST
13063: DIFF
13064: PPUSH
13065: LD_STRING D9b-Eng1-1
13067: PPUSH
13068: LD_STRING D9b-Eng1-1
13070: PPUSH
13071: CALL 4625 0 3
// end ; end ; if energyVDialog = 0 then
13075: LD_EXP 33
13079: PUSH
13080: LD_INT 0
13082: EQUAL
13083: IFFALSE 13089
// EnergyDialog ;
13085: CALL 5028 0 0
// end ;
13089: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
13090: LD_EXP 34
13094: PUSH
13095: LD_INT 1
13097: EQUAL
13098: PUSH
13099: LD_EXP 35
13103: PUSH
13104: LD_INT 1
13106: EQUAL
13107: AND
13108: IFFALSE 13120
13110: GO 13112
13112: DISABLE
// ChangeMissionObjectives ( M1a ) ;
13113: LD_STRING M1a
13115: PPUSH
13116: CALL_OW 337
13120: END
// every 3 3$0 do
13121: GO 13123
13123: DISABLE
// begin PrepareFirstAttack ;
13124: CALL 4230 0 0
// end ;
13128: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
13129: LD_INT 22
13131: PUSH
13132: LD_INT 5
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: LD_INT 21
13141: PUSH
13142: LD_INT 1
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 3
13151: PUSH
13152: LD_INT 24
13154: PUSH
13155: LD_INT 250
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: LIST
13170: PPUSH
13171: CALL_OW 69
13175: PUSH
13176: LD_INT 0
13178: GREATER
13179: PUSH
13180: LD_EXP 23
13184: PUSH
13185: LD_INT 1
13187: EQUAL
13188: AND
13189: IFFALSE 13490
13191: GO 13193
13193: DISABLE
13194: LD_INT 0
13196: PPUSH
// begin firstRussianAttack = 2 ;
13197: LD_ADDR_EXP 23
13201: PUSH
13202: LD_INT 2
13204: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
13205: LD_INT 22
13207: PUSH
13208: LD_INT 5
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PUSH
13215: LD_INT 21
13217: PUSH
13218: LD_INT 1
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PPUSH
13229: CALL_OW 69
13233: PPUSH
13234: LD_INT 125
13236: PPUSH
13237: LD_INT 98
13239: PPUSH
13240: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
13244: LD_INT 22
13246: PUSH
13247: LD_INT 1
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 21
13256: PUSH
13257: LD_INT 1
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PPUSH
13268: CALL_OW 69
13272: PUSH
13273: LD_EXP 1
13277: PUSH
13278: LD_EXP 7
13282: PUSH
13283: LD_EXP 4
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: LIST
13292: DIFF
13293: PPUSH
13294: LD_STRING DAtt1-Sol1-1
13296: PPUSH
13297: LD_STRING DAtt1-FSol1-1
13299: PPUSH
13300: CALL 4625 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
13304: LD_EXP 1
13308: PPUSH
13309: LD_STRING DAtt1-JMM-1
13311: PPUSH
13312: CALL_OW 88
// if Lisa then
13316: LD_EXP 4
13320: IFFALSE 13336
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
13322: LD_EXP 4
13326: PPUSH
13327: LD_STRING DAtt1a-Lisa-1
13329: PPUSH
13330: CALL_OW 88
// end else
13334: GO 13407
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13336: LD_INT 22
13338: PUSH
13339: LD_INT 1
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: LD_INT 21
13348: PUSH
13349: LD_INT 1
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 26
13358: PUSH
13359: LD_INT 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: LIST
13370: PPUSH
13371: CALL_OW 69
13375: PUSH
13376: LD_EXP 1
13380: PUSH
13381: LD_EXP 7
13385: PUSH
13386: LD_EXP 4
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: LIST
13395: DIFF
13396: PPUSH
13397: LD_STRING DAtt1a-Sol1-1
13399: PPUSH
13400: LD_STRING DAtt1-FSol1-1
13402: PPUSH
13403: CALL 4625 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13407: LD_EXP 1
13411: PPUSH
13412: LD_STRING DAtt1a-JMM-1
13414: PPUSH
13415: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13419: LD_INT 22
13421: PUSH
13422: LD_INT 1
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: LD_INT 21
13431: PUSH
13432: LD_INT 1
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 26
13441: PUSH
13442: LD_INT 1
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: LIST
13453: PPUSH
13454: CALL_OW 69
13458: PUSH
13459: LD_EXP 1
13463: PUSH
13464: LD_EXP 7
13468: PUSH
13469: LD_EXP 4
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: DIFF
13479: PPUSH
13480: LD_STRING DAtt1b-Sol1-1
13482: PPUSH
13483: LD_STRING DAtt1a-Sol1-1
13485: PPUSH
13486: CALL 4625 0 3
// end ;
13490: PPOPN 1
13492: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13493: LD_EXP 23
13497: PUSH
13498: LD_INT 2
13500: EQUAL
13501: IFFALSE 13563
13503: GO 13505
13505: DISABLE
13506: LD_INT 0
13508: PPUSH
// begin enable ;
13509: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13510: LD_ADDR_VAR 0 1
13514: PUSH
13515: LD_INT 5
13517: PPUSH
13518: LD_INT 22
13520: PUSH
13521: LD_INT 5
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 21
13530: PUSH
13531: LD_INT 1
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PPUSH
13542: CALL_OW 70
13546: PUSH
13547: FOR_IN
13548: IFFALSE 13561
// RemoveUnit ( i ) ;
13550: LD_VAR 0 1
13554: PPUSH
13555: CALL_OW 64
13559: GO 13547
13561: POP
13562: POP
// end ;
13563: PPOPN 1
13565: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13566: LD_INT 22
13568: PUSH
13569: LD_INT 5
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PUSH
13576: EMPTY
13577: LIST
13578: PPUSH
13579: CALL_OW 69
13583: PUSH
13584: LD_INT 0
13586: EQUAL
13587: PUSH
13588: LD_EXP 23
13592: PUSH
13593: LD_INT 2
13595: EQUAL
13596: AND
13597: IFFALSE 13610
13599: GO 13601
13601: DISABLE
// firstRussianAttack = 3 ;
13602: LD_ADDR_EXP 23
13606: PUSH
13607: LD_INT 3
13609: ST_TO_ADDR
13610: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13611: LD_EXP 28
13615: PUSH
13616: LD_INT 0
13618: EQUAL
13619: IFFALSE 13700
13621: GO 13623
13623: DISABLE
// begin timerStatus = 4 ;
13624: LD_ADDR_EXP 29
13628: PUSH
13629: LD_INT 4
13631: ST_TO_ADDR
// DialogueOn ;
13632: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13636: LD_EXP 13
13640: PPUSH
13641: LD_STRING D2-Don-1
13643: PPUSH
13644: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13648: LD_EXP 1
13652: PPUSH
13653: LD_STRING D2-JMM-1
13655: PPUSH
13656: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13660: LD_EXP 13
13664: PPUSH
13665: LD_STRING D2-Don-2
13667: PPUSH
13668: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13672: LD_EXP 1
13676: PPUSH
13677: LD_STRING D2-JMM-2
13679: PPUSH
13680: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13684: LD_EXP 13
13688: PPUSH
13689: LD_STRING D2-Don-3
13691: PPUSH
13692: CALL_OW 94
// DialogueOff ;
13696: CALL_OW 7
// end ;
13700: END
// every 12 12$0 do var tmp ;
13701: GO 13703
13703: DISABLE
13704: LD_INT 0
13706: PPUSH
// begin PrepareDonaldsonArmy ;
13707: CALL 1221 0 0
// CenterNowOnUnits ( Donaldson ) ;
13711: LD_EXP 13
13715: PPUSH
13716: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
13720: LD_INT 22
13722: PUSH
13723: LD_INT 6
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PPUSH
13730: CALL_OW 69
13734: NOT
13735: IFFALSE 13751
// begin wait ( 3 ) ;
13737: LD_INT 3
13739: PPUSH
13740: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
13744: LD_STRING ACH_BASE
13746: PPUSH
13747: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13751: LD_ADDR_VAR 0 1
13755: PUSH
13756: LD_INT 22
13758: PUSH
13759: LD_INT 4
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: LD_INT 21
13768: PUSH
13769: LD_INT 1
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 26
13778: PUSH
13779: LD_INT 1
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 25
13788: PUSH
13789: LD_INT 1
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: PPUSH
13802: CALL_OW 69
13806: PUSH
13807: LD_EXP 5
13811: PUSH
13812: EMPTY
13813: LIST
13814: DIFF
13815: ST_TO_ADDR
// DialogueOn ;
13816: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13820: LD_VAR 0 1
13824: PPUSH
13825: LD_STRING D3-Sol1-1
13827: PPUSH
13828: LD_STRING D3-Sol1-1
13830: PPUSH
13831: CALL 4625 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13835: LD_INT 22
13837: PUSH
13838: LD_INT 4
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 21
13847: PUSH
13848: LD_INT 1
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 26
13857: PUSH
13858: LD_INT 1
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: LD_INT 25
13867: PUSH
13868: LD_INT 3
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: PPUSH
13881: CALL_OW 69
13885: PPUSH
13886: LD_STRING D3-Sol2-1
13888: PPUSH
13889: LD_STRING D3-Sol2-1
13891: PPUSH
13892: CALL 4625 0 3
// if Frank then
13896: LD_EXP 5
13900: IFFALSE 13914
// Say ( Frank , D3-Frank-1 ) ;
13902: LD_EXP 5
13906: PPUSH
13907: LD_STRING D3-Frank-1
13909: PPUSH
13910: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13914: LD_EXP 13
13918: PPUSH
13919: LD_STRING D3-Don-1
13921: PPUSH
13922: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13926: LD_EXP 13
13930: PPUSH
13931: LD_STRING D3-Don-1a
13933: PPUSH
13934: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13938: LD_EXP 1
13942: PPUSH
13943: LD_STRING D3-JMM-1
13945: PPUSH
13946: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13950: LD_EXP 13
13954: PPUSH
13955: LD_STRING D3-Don-2
13957: PPUSH
13958: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13962: LD_INT 22
13964: PUSH
13965: LD_INT 6
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 21
13974: PUSH
13975: LD_INT 1
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PPUSH
13986: CALL_OW 69
13990: PUSH
13991: LD_INT 0
13993: GREATER
13994: IFFALSE 14132
// begin Say ( JMM , D3-JMM-2 ) ;
13996: LD_EXP 1
14000: PPUSH
14001: LD_STRING D3-JMM-2
14003: PPUSH
14004: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
14008: LD_EXP 13
14012: PPUSH
14013: LD_STRING D3-Don-3
14015: PPUSH
14016: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
14020: LD_EXP 1
14024: PPUSH
14025: LD_STRING D3-JMM-3
14027: PPUSH
14028: CALL_OW 88
// if IsOK ( Frank ) then
14032: LD_EXP 5
14036: PPUSH
14037: CALL_OW 302
14041: IFFALSE 14055
// Say ( Frank , D3-Frank-3 ) ;
14043: LD_EXP 5
14047: PPUSH
14048: LD_STRING D3-Frank-3
14050: PPUSH
14051: CALL_OW 88
// DialogueOff ;
14055: CALL_OW 7
// if IsOK ( Frank ) then
14059: LD_EXP 5
14063: PPUSH
14064: CALL_OW 302
14068: IFFALSE 14130
// begin SetSide ( Frank , 0 ) ;
14070: LD_EXP 5
14074: PPUSH
14075: LD_INT 0
14077: PPUSH
14078: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14082: LD_EXP 5
14086: PPUSH
14087: LD_INT 12
14089: PPUSH
14090: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14094: LD_EXP 5
14098: PPUSH
14099: LD_STRING 04t_Frank
14101: PPUSH
14102: CALL_OW 38
// Wait ( 0 0$3 ) ;
14106: LD_INT 105
14108: PPUSH
14109: CALL_OW 67
// frankScoutBase = 1 ;
14113: LD_ADDR_EXP 25
14117: PUSH
14118: LD_INT 1
14120: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14121: LD_EXP 5
14125: PPUSH
14126: CALL_OW 64
// end ; end else
14130: GO 14219
// begin Say ( JMM , D3-JMM-4 ) ;
14132: LD_EXP 1
14136: PPUSH
14137: LD_STRING D3-JMM-4
14139: PPUSH
14140: CALL_OW 88
// DialogueOff ;
14144: CALL_OW 7
// if IsOK ( Frank ) then
14148: LD_EXP 5
14152: PPUSH
14153: CALL_OW 302
14157: IFFALSE 14219
// begin SetSide ( Frank , 0 ) ;
14159: LD_EXP 5
14163: PPUSH
14164: LD_INT 0
14166: PPUSH
14167: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14171: LD_EXP 5
14175: PPUSH
14176: LD_INT 12
14178: PPUSH
14179: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14183: LD_EXP 5
14187: PPUSH
14188: LD_STRING 04t_Frank
14190: PPUSH
14191: CALL_OW 38
// Wait ( 0 0$3 ) ;
14195: LD_INT 105
14197: PPUSH
14198: CALL_OW 67
// frankScoutBase = 1 ;
14202: LD_ADDR_EXP 25
14206: PUSH
14207: LD_INT 1
14209: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14210: LD_EXP 5
14214: PPUSH
14215: CALL_OW 64
// end ; end ; end ;
14219: PPOPN 1
14221: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
14222: LD_EXP 13
14226: PPUSH
14227: CALL_OW 255
14231: PUSH
14232: LD_INT 4
14234: EQUAL
14235: PUSH
14236: LD_EXP 13
14240: PPUSH
14241: CALL_OW 302
14245: AND
14246: IFFALSE 14380
14248: GO 14250
14250: DISABLE
14251: LD_INT 0
14253: PPUSH
14254: PPUSH
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
14255: LD_EXP 13
14259: PPUSH
14260: LD_STRING D3b-Don-1
14262: PPUSH
14263: CALL_OW 94
// donaldsonCoopAttack = 1 ;
14267: LD_ADDR_EXP 41
14271: PUSH
14272: LD_INT 1
14274: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
14275: LD_ADDR_VAR 0 2
14279: PUSH
14280: LD_INT 22
14282: PUSH
14283: LD_INT 4
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PPUSH
14290: CALL_OW 69
14294: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14295: LD_INT 35
14297: PPUSH
14298: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
14302: LD_VAR 0 2
14306: NOT
14307: PUSH
14308: LD_INT 22
14310: PUSH
14311: LD_INT 6
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: LD_INT 101
14320: PUSH
14321: LD_INT 1
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PPUSH
14332: CALL_OW 69
14336: OR
14337: IFFALSE 14295
// if not tmp then
14339: LD_VAR 0 2
14343: NOT
14344: IFFALSE 14348
// exit ;
14346: GO 14380
// for i in tmp do
14348: LD_ADDR_VAR 0 1
14352: PUSH
14353: LD_VAR 0 2
14357: PUSH
14358: FOR_IN
14359: IFFALSE 14378
// ComAgressiveMove ( i , 52 , 64 ) ;
14361: LD_VAR 0 1
14365: PPUSH
14366: LD_INT 52
14368: PPUSH
14369: LD_INT 64
14371: PPUSH
14372: CALL_OW 114
14376: GO 14358
14378: POP
14379: POP
// end ;
14380: PPOPN 2
14382: END
// every 0 0$1 trigger not saveDonaldson and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_dist , JMM , 9 ] ] ) diff Frank do var i ;
14383: LD_EXP 24
14387: NOT
14388: PUSH
14389: LD_INT 22
14391: PUSH
14392: LD_INT 4
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 21
14401: PUSH
14402: LD_INT 1
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 91
14411: PUSH
14412: LD_EXP 1
14416: PUSH
14417: LD_INT 9
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: LIST
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: LIST
14429: PPUSH
14430: CALL_OW 69
14434: PUSH
14435: LD_EXP 5
14439: DIFF
14440: AND
14441: IFFALSE 14496
14443: GO 14445
14445: DISABLE
14446: LD_INT 0
14448: PPUSH
// begin saveDonaldson := 1 ;
14449: LD_ADDR_EXP 24
14453: PUSH
14454: LD_INT 1
14456: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
14457: LD_ADDR_VAR 0 1
14461: PUSH
14462: LD_INT 22
14464: PUSH
14465: LD_INT 4
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PPUSH
14472: CALL_OW 69
14476: PUSH
14477: FOR_IN
14478: IFFALSE 14494
// SetSide ( i , 1 ) ;
14480: LD_VAR 0 1
14484: PPUSH
14485: LD_INT 1
14487: PPUSH
14488: CALL_OW 235
14492: GO 14477
14494: POP
14495: POP
// end ;
14496: PPOPN 1
14498: END
// every 0 0$1 trigger frankScoutBase do
14499: LD_EXP 25
14503: IFFALSE 14868
14505: GO 14507
14507: DISABLE
// begin wait ( 2 2$30 ) ;
14508: LD_INT 5250
14510: PPUSH
14511: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14515: LD_INT 35
14517: PPUSH
14518: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
14522: LD_INT 81
14524: PUSH
14525: LD_INT 4
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PUSH
14532: LD_INT 92
14534: PUSH
14535: LD_INT 84
14537: PUSH
14538: LD_INT 28
14540: PUSH
14541: LD_INT 22
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PPUSH
14554: CALL_OW 69
14558: NOT
14559: IFFALSE 14515
// uc_side = 4 ;
14561: LD_ADDR_OWVAR 20
14565: PUSH
14566: LD_INT 4
14568: ST_TO_ADDR
// uc_nation = 1 ;
14569: LD_ADDR_OWVAR 21
14573: PUSH
14574: LD_INT 1
14576: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
14577: LD_ADDR_EXP 5
14581: PUSH
14582: LD_STRING 04t_Frank
14584: PPUSH
14585: CALL_OW 34
14589: ST_TO_ADDR
// if not Frank then
14590: LD_EXP 5
14594: NOT
14595: IFFALSE 14599
// exit ;
14597: GO 14868
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14599: LD_EXP 5
14603: PPUSH
14604: LD_INT 13
14606: PPUSH
14607: LD_INT 0
14609: PPUSH
14610: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14614: LD_INT 35
14616: PPUSH
14617: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
14621: LD_EXP 1
14625: PPUSH
14626: CALL_OW 310
14630: NOT
14631: PUSH
14632: LD_EXP 1
14636: PPUSH
14637: LD_INT 4
14639: PPUSH
14640: CALL_OW 296
14644: PUSH
14645: LD_INT 20
14647: LESS
14648: AND
14649: IFFALSE 14682
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14651: LD_EXP 5
14655: PPUSH
14656: LD_EXP 1
14660: PPUSH
14661: CALL_OW 250
14665: PPUSH
14666: LD_EXP 1
14670: PPUSH
14671: CALL_OW 251
14675: PPUSH
14676: CALL_OW 111
14680: GO 14697
// ComMoveXY ( Frank , 51 , 15 ) ;
14682: LD_EXP 5
14686: PPUSH
14687: LD_INT 51
14689: PPUSH
14690: LD_INT 15
14692: PPUSH
14693: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14697: LD_EXP 5
14701: PPUSH
14702: LD_EXP 1
14706: PPUSH
14707: CALL_OW 296
14711: PUSH
14712: LD_INT 10
14714: LESS
14715: IFFALSE 14614
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14717: LD_EXP 1
14721: PUSH
14722: LD_EXP 5
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PPUSH
14731: CALL_OW 87
// DialogueOn ;
14735: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14739: LD_EXP 5
14743: PPUSH
14744: LD_STRING D3a-Frank-1
14746: PPUSH
14747: CALL_OW 88
// if Lisa then
14751: LD_EXP 4
14755: IFFALSE 14805
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14757: LD_EXP 4
14761: PPUSH
14762: LD_STRING D3a-Lisa-1
14764: PPUSH
14765: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14769: LD_EXP 5
14773: PPUSH
14774: LD_STRING D3a-Frank-2
14776: PPUSH
14777: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14781: LD_EXP 4
14785: PPUSH
14786: LD_STRING D3a-Lisa-2
14788: PPUSH
14789: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14793: LD_EXP 5
14797: PPUSH
14798: LD_STRING D3a-Frank-3
14800: PPUSH
14801: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14805: LD_EXP 1
14809: PPUSH
14810: LD_STRING D3a-JMM-3
14812: PPUSH
14813: CALL_OW 88
// DialogueOff ;
14817: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14821: LD_EXP 5
14825: PPUSH
14826: LD_INT 1
14828: PPUSH
14829: CALL_OW 235
// InGameOn ;
14833: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14837: LD_INT 1
14839: PPUSH
14840: LD_INT 7
14842: PPUSH
14843: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14847: LD_INT 93
14849: PPUSH
14850: LD_INT 91
14852: PPUSH
14853: CALL_OW 84
// wait ( 0 0$5 ) ;
14857: LD_INT 175
14859: PPUSH
14860: CALL_OW 67
// InGameOff ;
14864: CALL_OW 9
// end ;
14868: END
// every 12 12$0 trigger Difficulty > 1 do
14869: LD_OWVAR 67
14873: PUSH
14874: LD_INT 1
14876: GREATER
14877: IFFALSE 14901
14879: GO 14881
14881: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14882: LD_INT 24
14884: PPUSH
14885: LD_INT 24
14887: PPUSH
14888: LD_INT 1
14890: PPUSH
14891: LD_INT 1
14893: PPUSH
14894: LD_INT 53
14896: PPUSH
14897: CALL_OW 185
14901: END
// every 18 18$0 do
14902: GO 14904
14904: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14905: LD_EXP 14
14909: PPUSH
14910: LD_STRING D4-Har-1
14912: PPUSH
14913: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14917: LD_EXP 1
14921: PPUSH
14922: LD_STRING D4-JMM-1
14924: PPUSH
14925: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14929: LD_EXP 14
14933: PPUSH
14934: LD_STRING D4-Har-2
14936: PPUSH
14937: CALL_OW 94
// case query ( Q1 ) of 1 :
14941: LD_STRING Q1
14943: PPUSH
14944: CALL_OW 97
14948: PUSH
14949: LD_INT 1
14951: DOUBLE
14952: EQUAL
14953: IFTRUE 14957
14955: GO 15016
14957: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14958: LD_EXP 1
14962: PPUSH
14963: LD_STRING D5-JMM-1
14965: PPUSH
14966: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14970: LD_EXP 14
14974: PPUSH
14975: LD_STRING D5-Har-1
14977: PPUSH
14978: CALL_OW 94
// timeToSupport = 10 10$0 ;
14982: LD_ADDR_EXP 28
14986: PUSH
14987: LD_INT 21000
14989: ST_TO_ADDR
// timerStatus = 2 ;
14990: LD_ADDR_EXP 29
14994: PUSH
14995: LD_INT 2
14997: ST_TO_ADDR
// startTimer = 1 ;
14998: LD_ADDR_EXP 30
15002: PUSH
15003: LD_INT 1
15005: ST_TO_ADDR
// harrAnswer = 1 ;
15006: LD_ADDR_EXP 26
15010: PUSH
15011: LD_INT 1
15013: ST_TO_ADDR
// end ; 2 :
15014: GO 15151
15016: LD_INT 2
15018: DOUBLE
15019: EQUAL
15020: IFTRUE 15024
15022: GO 15083
15024: POP
// begin Say ( JMM , D5-JMM-2 ) ;
15025: LD_EXP 1
15029: PPUSH
15030: LD_STRING D5-JMM-2
15032: PPUSH
15033: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
15037: LD_EXP 14
15041: PPUSH
15042: LD_STRING D5-Har-2
15044: PPUSH
15045: CALL_OW 94
// timeToSupport = 5 5$0 ;
15049: LD_ADDR_EXP 28
15053: PUSH
15054: LD_INT 10500
15056: ST_TO_ADDR
// timerStatus = 2 ;
15057: LD_ADDR_EXP 29
15061: PUSH
15062: LD_INT 2
15064: ST_TO_ADDR
// startTimer = 1 ;
15065: LD_ADDR_EXP 30
15069: PUSH
15070: LD_INT 1
15072: ST_TO_ADDR
// harrAnswer = 2 ;
15073: LD_ADDR_EXP 26
15077: PUSH
15078: LD_INT 2
15080: ST_TO_ADDR
// end ; 3 :
15081: GO 15151
15083: LD_INT 3
15085: DOUBLE
15086: EQUAL
15087: IFTRUE 15091
15089: GO 15150
15091: POP
// begin Say ( JMM , D5-JMM-3 ) ;
15092: LD_EXP 1
15096: PPUSH
15097: LD_STRING D5-JMM-3
15099: PPUSH
15100: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
15104: LD_EXP 14
15108: PPUSH
15109: LD_STRING D5-Har-3
15111: PPUSH
15112: CALL_OW 94
// timeToSupport = 5 5$0 ;
15116: LD_ADDR_EXP 28
15120: PUSH
15121: LD_INT 10500
15123: ST_TO_ADDR
// timerStatus = 2 ;
15124: LD_ADDR_EXP 29
15128: PUSH
15129: LD_INT 2
15131: ST_TO_ADDR
// startTimer = 1 ;
15132: LD_ADDR_EXP 30
15136: PUSH
15137: LD_INT 1
15139: ST_TO_ADDR
// harrAnswer = 3 ;
15140: LD_ADDR_EXP 26
15144: PUSH
15145: LD_INT 3
15147: ST_TO_ADDR
// end ; end ;
15148: GO 15151
15150: POP
// end ;
15151: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
15152: LD_EXP 29
15156: PUSH
15157: LD_INT 2
15159: EQUAL
15160: PUSH
15161: LD_EXP 28
15165: PUSH
15166: LD_INT 0
15168: EQUAL
15169: AND
15170: IFFALSE 15447
15172: GO 15174
15174: DISABLE
// begin timerStatus = 4 ;
15175: LD_ADDR_EXP 29
15179: PUSH
15180: LD_INT 4
15182: ST_TO_ADDR
// if harrAnswer = 1 then
15183: LD_EXP 26
15187: PUSH
15188: LD_INT 1
15190: EQUAL
15191: IFFALSE 15271
// begin PrepareHarrisonSupport ( 3 ) ;
15193: LD_INT 3
15195: PPUSH
15196: CALL 1791 0 1
// wait ( 1 1$0 ) ;
15200: LD_INT 2100
15202: PPUSH
15203: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15207: LD_EXP 14
15211: PPUSH
15212: LD_STRING D7-Har-1
15214: PPUSH
15215: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15219: LD_STRING M2
15221: PPUSH
15222: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15226: LD_ADDR_EXP 27
15230: PUSH
15231: LD_INT 31500
15233: PUSH
15234: LD_INT 10500
15236: PUSH
15237: LD_INT 8400
15239: PUSH
15240: LD_INT 6300
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: LIST
15247: PUSH
15248: LD_OWVAR 67
15252: ARRAY
15253: PLUS
15254: ST_TO_ADDR
// startTimer = 1 ;
15255: LD_ADDR_EXP 30
15259: PUSH
15260: LD_INT 1
15262: ST_TO_ADDR
// timerStatus = 3 ;
15263: LD_ADDR_EXP 29
15267: PUSH
15268: LD_INT 3
15270: ST_TO_ADDR
// end ; if harrAnswer = 2 then
15271: LD_EXP 26
15275: PUSH
15276: LD_INT 2
15278: EQUAL
15279: IFFALSE 15359
// begin PrepareHarrisonSupport ( 4 ) ;
15281: LD_INT 4
15283: PPUSH
15284: CALL 1791 0 1
// wait ( 1 1$0 ) ;
15288: LD_INT 2100
15290: PPUSH
15291: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15295: LD_EXP 14
15299: PPUSH
15300: LD_STRING D7-Har-1
15302: PPUSH
15303: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15307: LD_STRING M2
15309: PPUSH
15310: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15314: LD_ADDR_EXP 27
15318: PUSH
15319: LD_INT 33600
15321: PUSH
15322: LD_INT 10500
15324: PUSH
15325: LD_INT 8400
15327: PUSH
15328: LD_INT 6300
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: PUSH
15336: LD_OWVAR 67
15340: ARRAY
15341: PLUS
15342: ST_TO_ADDR
// startTimer = 1 ;
15343: LD_ADDR_EXP 30
15347: PUSH
15348: LD_INT 1
15350: ST_TO_ADDR
// timerStatus = 3 ;
15351: LD_ADDR_EXP 29
15355: PUSH
15356: LD_INT 3
15358: ST_TO_ADDR
// end ; if harrAnswer = 3 then
15359: LD_EXP 26
15363: PUSH
15364: LD_INT 3
15366: EQUAL
15367: IFFALSE 15447
// begin PrepareHarrisonSupport ( 5 ) ;
15369: LD_INT 5
15371: PPUSH
15372: CALL 1791 0 1
// wait ( 1 1$0 ) ;
15376: LD_INT 2100
15378: PPUSH
15379: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15383: LD_EXP 14
15387: PPUSH
15388: LD_STRING D7-Har-1
15390: PPUSH
15391: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15395: LD_STRING M2
15397: PPUSH
15398: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
15402: LD_ADDR_EXP 27
15406: PUSH
15407: LD_INT 35700
15409: PUSH
15410: LD_INT 10500
15412: PUSH
15413: LD_INT 6300
15415: PUSH
15416: LD_INT 4200
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: LIST
15423: PUSH
15424: LD_OWVAR 67
15428: ARRAY
15429: PLUS
15430: ST_TO_ADDR
// startTimer = 1 ;
15431: LD_ADDR_EXP 30
15435: PUSH
15436: LD_INT 1
15438: ST_TO_ADDR
// timerStatus = 3 ;
15439: LD_ADDR_EXP 29
15443: PUSH
15444: LD_INT 3
15446: ST_TO_ADDR
// end ; end ;
15447: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
15448: LD_EXP 27
15452: PUSH
15453: LD_INT 8400
15455: LESSEQUAL
15456: PUSH
15457: LD_EXP 29
15461: PUSH
15462: LD_INT 3
15464: EQUAL
15465: AND
15466: IFFALSE 15498
15468: GO 15470
15470: DISABLE
// begin DialogueOn ;
15471: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15475: LD_EXP 14
15479: PPUSH
15480: LD_STRING D7a-Har-1
15482: PPUSH
15483: CALL_OW 94
// DialogueOff ;
15487: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15491: LD_STRING M2a
15493: PPUSH
15494: CALL_OW 337
// end ;
15498: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
15499: LD_EXP 27
15503: PUSH
15504: LD_INT 0
15506: LESSEQUAL
15507: PUSH
15508: LD_EXP 29
15512: PUSH
15513: LD_INT 3
15515: EQUAL
15516: AND
15517: PUSH
15518: LD_EXP 40
15522: NOT
15523: AND
15524: IFFALSE 15663
15526: GO 15528
15528: DISABLE
15529: LD_INT 0
15531: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15532: LD_ADDR_VAR 0 1
15536: PUSH
15537: LD_INT 22
15539: PUSH
15540: LD_INT 1
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PPUSH
15547: CALL_OW 69
15551: PUSH
15552: LD_EXP 1
15556: PUSH
15557: EMPTY
15558: LIST
15559: DIFF
15560: ST_TO_ADDR
// saveDonaldson = 2 ;
15561: LD_ADDR_EXP 24
15565: PUSH
15566: LD_INT 2
15568: ST_TO_ADDR
// DialogueOn ;
15569: CALL_OW 6
// if IsOK ( Donaldson ) then
15573: LD_EXP 13
15577: PPUSH
15578: CALL_OW 302
15582: IFFALSE 15598
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15584: LD_EXP 14
15588: PPUSH
15589: LD_STRING D8-Har-1
15591: PPUSH
15592: CALL_OW 94
// end else
15596: GO 15610
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15598: LD_EXP 14
15602: PPUSH
15603: LD_STRING D8-Har-1a
15605: PPUSH
15606: CALL_OW 94
// end ; DialogueOff ;
15610: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15614: LD_VAR 0 1
15618: PPUSH
15619: LD_INT 4
15621: PPUSH
15622: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15626: LD_VAR 0 1
15630: PPUSH
15631: LD_INT 88
15633: PPUSH
15634: LD_INT 89
15636: PPUSH
15637: CALL_OW 114
// honor = 0 ;
15641: LD_ADDR_EXP 39
15645: PUSH
15646: LD_INT 0
15648: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15649: LD_INT 350
15651: PPUSH
15652: CALL_OW 67
// YouLost ( LostCommand ) ;
15656: LD_STRING LostCommand
15658: PPUSH
15659: CALL_OW 104
// end ;
15663: PPOPN 1
15665: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15666: LD_INT 22
15668: PUSH
15669: LD_INT 6
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 21
15678: PUSH
15679: LD_INT 1
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PPUSH
15690: CALL_OW 69
15694: PUSH
15695: LD_INT 0
15697: EQUAL
15698: PUSH
15699: LD_EXP 20
15703: PUSH
15704: LD_INT 0
15706: EQUAL
15707: AND
15708: PUSH
15709: LD_EXP 44
15713: PUSH
15714: LD_INT 1
15716: EQUAL
15717: AND
15718: IFFALSE 15812
15720: GO 15722
15722: DISABLE
15723: LD_INT 0
15725: PPUSH
15726: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15727: LD_ADDR_VAR 0 2
15731: PUSH
15732: LD_INT 22
15734: PUSH
15735: LD_INT 1
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: LD_INT 21
15744: PUSH
15745: LD_INT 1
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PUSH
15752: LD_INT 23
15754: PUSH
15755: LD_INT 1
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: LIST
15766: PPUSH
15767: CALL_OW 69
15771: ST_TO_ADDR
// for i in tmp do
15772: LD_ADDR_VAR 0 1
15776: PUSH
15777: LD_VAR 0 2
15781: PUSH
15782: FOR_IN
15783: IFFALSE 15810
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15785: LD_VAR 0 1
15789: PPUSH
15790: LD_INT 1
15792: PPUSH
15793: LD_INT 4
15795: PPUSH
15796: CALL_OW 12
15800: PPUSH
15801: LD_INT 500
15803: PPUSH
15804: CALL_OW 492
// end ;
15808: GO 15782
15810: POP
15811: POP
// end ; end_of_file
15812: PPOPN 2
15814: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15815: GO 15817
15817: DISABLE
15818: LD_INT 0
15820: PPUSH
// begin enemyWayX = [ ] ;
15821: LD_ADDR_EXP 50
15825: PUSH
15826: EMPTY
15827: ST_TO_ADDR
// enemyWayY = [ ] ;
15828: LD_ADDR_EXP 51
15832: PUSH
15833: EMPTY
15834: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15835: LD_ADDR_VAR 0 1
15839: PUSH
15840: LD_INT 1
15842: PPUSH
15843: LD_INT 3
15845: PPUSH
15846: CALL_OW 12
15850: ST_TO_ADDR
// if rnd = 1 then
15851: LD_VAR 0 1
15855: PUSH
15856: LD_INT 1
15858: EQUAL
15859: IFFALSE 15899
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15861: LD_ADDR_EXP 50
15865: PUSH
15866: LD_INT 73
15868: PUSH
15869: LD_INT 46
15871: PUSH
15872: LD_INT 29
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: LIST
15879: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15880: LD_ADDR_EXP 51
15884: PUSH
15885: LD_INT 71
15887: PUSH
15888: LD_INT 43
15890: PUSH
15891: LD_INT 29
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: LIST
15898: ST_TO_ADDR
// end ; if rnd = 2 then
15899: LD_VAR 0 1
15903: PUSH
15904: LD_INT 2
15906: EQUAL
15907: IFFALSE 15931
// begin enemyWayX = [ 64 ] ;
15909: LD_ADDR_EXP 50
15913: PUSH
15914: LD_INT 64
15916: PUSH
15917: EMPTY
15918: LIST
15919: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15920: LD_ADDR_EXP 51
15924: PUSH
15925: LD_INT 43
15927: PUSH
15928: EMPTY
15929: LIST
15930: ST_TO_ADDR
// end ; if rnd = 3 then
15931: LD_VAR 0 1
15935: PUSH
15936: LD_INT 3
15938: EQUAL
15939: IFFALSE 15963
// begin enemyWayX = [ 80 ] ;
15941: LD_ADDR_EXP 50
15945: PUSH
15946: LD_INT 80
15948: PUSH
15949: EMPTY
15950: LIST
15951: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15952: LD_ADDR_EXP 51
15956: PUSH
15957: LD_INT 28
15959: PUSH
15960: EMPTY
15961: LIST
15962: ST_TO_ADDR
// end ; enable ;
15963: ENABLE
// end ;
15964: PPOPN 1
15966: END
// every 0 0$1 trigger AIEnable = 1 do
15967: LD_EXP 37
15971: PUSH
15972: LD_INT 1
15974: EQUAL
15975: IFFALSE 16089
15977: GO 15979
15979: DISABLE
// begin enable ;
15980: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15981: LD_INT 3
15983: PPUSH
15984: LD_INT 21
15986: PPUSH
15987: LD_INT 7
15989: PPUSH
15990: CALL 6061 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15994: LD_INT 3
15996: PPUSH
15997: LD_INT 8
15999: PPUSH
16000: LD_INT 7
16002: PPUSH
16003: LD_INT 1
16005: PPUSH
16006: CALL 6382 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
16010: LD_INT 3
16012: PPUSH
16013: LD_INT 17
16015: PPUSH
16016: LD_INT 108
16018: PPUSH
16019: LD_INT 95
16021: PPUSH
16022: CALL 7706 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
16026: LD_INT 3
16028: PPUSH
16029: LD_INT 23
16031: PPUSH
16032: LD_EXP 50
16036: PPUSH
16037: LD_EXP 51
16041: PPUSH
16042: CALL 7038 0 4
// if baseReadyToBuild = 2 then
16046: LD_EXP 20
16050: PUSH
16051: LD_INT 2
16053: EQUAL
16054: IFFALSE 16089
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
16056: LD_INT 6
16058: PPUSH
16059: LD_EXP 21
16063: PPUSH
16064: LD_INT 6
16066: PPUSH
16067: CALL 6061 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
16071: LD_INT 6
16073: PPUSH
16074: LD_INT 9
16076: PPUSH
16077: LD_INT 6
16079: PPUSH
16080: LD_EXP 22
16084: PPUSH
16085: CALL 6382 0 4
// end ; end ;
16089: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
16090: LD_EXP 15
16094: PPUSH
16095: CALL_OW 310
16099: NOT
16100: PUSH
16101: LD_INT 21
16103: PPUSH
16104: CALL_OW 302
16108: AND
16109: PUSH
16110: LD_INT 21
16112: PPUSH
16113: CALL_OW 255
16117: PUSH
16118: LD_INT 3
16120: EQUAL
16121: AND
16122: IFFALSE 16140
16124: GO 16126
16126: DISABLE
// begin enable ;
16127: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
16128: LD_EXP 15
16132: PPUSH
16133: LD_INT 21
16135: PPUSH
16136: CALL_OW 120
// end ;
16140: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
16141: LD_INT 22
16143: PUSH
16144: LD_INT 3
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: LD_INT 21
16153: PUSH
16154: LD_INT 2
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 55
16163: PUSH
16164: EMPTY
16165: LIST
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: LIST
16171: PPUSH
16172: CALL_OW 69
16176: PUSH
16177: LD_INT 0
16179: EQUAL
16180: PUSH
16181: LD_INT 1
16183: PPUSH
16184: CALL_OW 255
16188: PUSH
16189: LD_INT 3
16191: EQUAL
16192: AND
16193: PUSH
16194: LD_INT 21
16196: PPUSH
16197: CALL_OW 302
16201: AND
16202: PUSH
16203: LD_INT 21
16205: PPUSH
16206: CALL_OW 255
16210: PUSH
16211: LD_INT 3
16213: EQUAL
16214: AND
16215: PUSH
16216: LD_INT 21
16218: PPUSH
16219: CALL_OW 302
16223: AND
16224: IFFALSE 16436
16226: GO 16228
16228: DISABLE
// begin enable ;
16229: ENABLE
// if Difficulty = 1 then
16230: LD_OWVAR 67
16234: PUSH
16235: LD_INT 1
16237: EQUAL
16238: IFFALSE 16282
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
16240: LD_INT 3
16242: PPUSH
16243: LD_INT 24
16245: PPUSH
16246: LD_OWVAR 67
16250: PUSH
16251: LD_INT 2
16253: PLUS
16254: PPUSH
16255: LD_INT 42
16257: PUSH
16258: LD_INT 44
16260: PUSH
16261: LD_INT 43
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: LIST
16268: PPUSH
16269: LD_INT 1
16271: PPUSH
16272: LD_INT 1
16274: PPUSH
16275: LD_INT 21
16277: PPUSH
16278: CALL 6926 0 7
// if Difficulty = 2 then
16282: LD_OWVAR 67
16286: PUSH
16287: LD_INT 2
16289: EQUAL
16290: IFFALSE 16357
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
16292: LD_INT 3
16294: PPUSH
16295: LD_INT 24
16297: PPUSH
16298: LD_OWVAR 67
16302: PUSH
16303: LD_INT 2
16305: PLUS
16306: PPUSH
16307: LD_INT 44
16309: PUSH
16310: LD_INT 44
16312: PUSH
16313: LD_INT 43
16315: PUSH
16316: LD_INT 43
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: PPUSH
16325: LD_INT 1
16327: PPUSH
16328: LD_INT 1
16330: PPUSH
16331: LD_INT 21
16333: PUSH
16334: LD_INT 22
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 1
16343: PPUSH
16344: LD_INT 2
16346: PPUSH
16347: CALL_OW 12
16351: ARRAY
16352: PPUSH
16353: CALL 6926 0 7
// if Difficulty = 3 then
16357: LD_OWVAR 67
16361: PUSH
16362: LD_INT 3
16364: EQUAL
16365: IFFALSE 16436
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
16367: LD_INT 3
16369: PPUSH
16370: LD_INT 24
16372: PPUSH
16373: LD_OWVAR 67
16377: PUSH
16378: LD_INT 2
16380: PPUSH
16381: LD_INT 3
16383: PPUSH
16384: CALL_OW 12
16388: PLUS
16389: PPUSH
16390: LD_INT 44
16392: PUSH
16393: LD_INT 44
16395: PUSH
16396: LD_INT 43
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: LIST
16403: PPUSH
16404: LD_INT 1
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: LD_INT 22
16412: PUSH
16413: LD_INT 23
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 1
16422: PPUSH
16423: LD_INT 2
16425: PPUSH
16426: CALL_OW 12
16430: ARRAY
16431: PPUSH
16432: CALL 6926 0 7
// end ;
16436: END
// every 0 0$1 do
16437: GO 16439
16439: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
16440: LD_INT 3
16442: PPUSH
16443: LD_INT 1
16445: PPUSH
16446: LD_INT 3
16448: PPUSH
16449: CALL 5976 0 3
16453: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
16454: LD_EXP 20
16458: PUSH
16459: LD_INT 1
16461: EQUAL
16462: IFFALSE 16609
16464: GO 16466
16466: DISABLE
16467: LD_INT 0
16469: PPUSH
16470: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16471: LD_ADDR_VAR 0 2
16475: PUSH
16476: LD_INT 22
16478: PUSH
16479: LD_INT 6
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 21
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 34
16498: PUSH
16499: LD_INT 51
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: LIST
16510: PPUSH
16511: CALL_OW 69
16515: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16516: LD_VAR 0 2
16520: PUSH
16521: LD_INT 1
16523: ARRAY
16524: PPUSH
16525: LD_EXP 21
16529: PPUSH
16530: CALL_OW 250
16534: PUSH
16535: LD_INT 5
16537: MINUS
16538: PPUSH
16539: LD_EXP 21
16543: PPUSH
16544: CALL_OW 251
16548: PUSH
16549: LD_INT 5
16551: MINUS
16552: PPUSH
16553: CALL_OW 111
// wait ( 0 0$5 ) ;
16557: LD_INT 175
16559: PPUSH
16560: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16564: LD_VAR 0 2
16568: PUSH
16569: LD_INT 1
16571: ARRAY
16572: PPUSH
16573: LD_INT 41
16575: PPUSH
16576: LD_INT 52
16578: PPUSH
16579: CALL_OW 177
// wait ( 0 0$40 ) ;
16583: LD_INT 1400
16585: PPUSH
16586: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16590: LD_VAR 0 2
16594: PUSH
16595: LD_INT 1
16597: ARRAY
16598: PPUSH
16599: LD_INT 41
16601: PPUSH
16602: LD_INT 44
16604: PPUSH
16605: CALL_OW 111
// end ;
16609: PPOPN 2
16611: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16612: LD_EXP 21
16616: PPUSH
16617: CALL_OW 274
16621: PPUSH
16622: LD_INT 1
16624: PPUSH
16625: CALL_OW 275
16629: PUSH
16630: LD_INT 100
16632: GREATEREQUAL
16633: IFFALSE 16861
16635: GO 16637
16637: DISABLE
16638: LD_INT 0
16640: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16641: LD_ADDR_VAR 0 1
16645: PUSH
16646: LD_INT 22
16648: PUSH
16649: LD_INT 6
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 21
16658: PUSH
16659: LD_INT 1
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 25
16668: PUSH
16669: LD_INT 2
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: LIST
16680: PPUSH
16681: CALL_OW 69
16685: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16686: LD_VAR 0 1
16690: PUSH
16691: LD_INT 1
16693: ARRAY
16694: PPUSH
16695: LD_INT 4
16697: PPUSH
16698: LD_INT 39
16700: PPUSH
16701: LD_INT 37
16703: PPUSH
16704: LD_INT 3
16706: PPUSH
16707: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16711: LD_VAR 0 1
16715: PUSH
16716: LD_INT 1
16718: ARRAY
16719: PPUSH
16720: LD_INT 29
16722: PPUSH
16723: LD_INT 42
16725: PPUSH
16726: LD_INT 54
16728: PPUSH
16729: LD_INT 3
16731: PPUSH
16732: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16736: LD_VAR 0 1
16740: PUSH
16741: LD_INT 1
16743: ARRAY
16744: PPUSH
16745: LD_INT 6
16747: PPUSH
16748: LD_INT 38
16750: PPUSH
16751: LD_INT 48
16753: PPUSH
16754: LD_INT 0
16756: PPUSH
16757: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16761: LD_VAR 0 1
16765: PUSH
16766: LD_INT 1
16768: ARRAY
16769: PPUSH
16770: LD_INT 2
16772: PPUSH
16773: LD_INT 32
16775: PPUSH
16776: LD_INT 38
16778: PPUSH
16779: LD_INT 2
16781: PPUSH
16782: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16786: LD_VAR 0 1
16790: PUSH
16791: LD_INT 1
16793: ARRAY
16794: PPUSH
16795: LD_INT 26
16797: PPUSH
16798: LD_INT 39
16800: PPUSH
16801: LD_INT 55
16803: PPUSH
16804: LD_INT 3
16806: PPUSH
16807: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16811: LD_VAR 0 1
16815: PUSH
16816: LD_INT 1
16818: ARRAY
16819: PPUSH
16820: LD_INT 32
16822: PPUSH
16823: LD_INT 31
16825: PPUSH
16826: LD_INT 31
16828: PPUSH
16829: LD_INT 3
16831: PPUSH
16832: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16836: LD_VAR 0 1
16840: PUSH
16841: LD_INT 1
16843: ARRAY
16844: PPUSH
16845: LD_INT 31
16847: PPUSH
16848: LD_INT 50
16850: PPUSH
16851: LD_INT 51
16853: PPUSH
16854: LD_INT 4
16856: PPUSH
16857: CALL_OW 205
// end ;
16861: PPOPN 1
16863: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
16864: LD_EXP 46
16868: IFFALSE 17425
16870: GO 16872
16872: DISABLE
16873: LD_INT 0
16875: PPUSH
16876: PPUSH
16877: PPUSH
// begin enable ;
16878: ENABLE
// if not ruMobile then
16879: LD_EXP 46
16883: NOT
16884: IFFALSE 16888
// exit ;
16886: GO 17425
// for i in ruMobile do
16888: LD_ADDR_VAR 0 1
16892: PUSH
16893: LD_EXP 46
16897: PUSH
16898: FOR_IN
16899: IFFALSE 17423
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
16901: LD_VAR 0 1
16905: PPUSH
16906: CALL_OW 302
16910: NOT
16911: PUSH
16912: LD_VAR 0 1
16916: PPUSH
16917: CALL_OW 255
16921: PUSH
16922: LD_INT 3
16924: NONEQUAL
16925: OR
16926: IFFALSE 16946
// begin ruMobile := ruMobile diff i ;
16928: LD_ADDR_EXP 46
16932: PUSH
16933: LD_EXP 46
16937: PUSH
16938: LD_VAR 0 1
16942: DIFF
16943: ST_TO_ADDR
// continue ;
16944: GO 16898
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
16946: LD_VAR 0 1
16950: PPUSH
16951: CALL_OW 110
16955: NOT
16956: PUSH
16957: LD_VAR 0 1
16961: PPUSH
16962: CALL_OW 110
16966: PUSH
16967: LD_INT 0
16969: EQUAL
16970: OR
16971: IFFALSE 17086
// begin if GetFuel ( i ) < 50 then
16973: LD_VAR 0 1
16977: PPUSH
16978: CALL_OW 261
16982: PUSH
16983: LD_INT 50
16985: LESS
16986: IFFALSE 17045
// begin ComMoveXY ( i , 106 , 88 ) ;
16988: LD_VAR 0 1
16992: PPUSH
16993: LD_INT 106
16995: PPUSH
16996: LD_INT 88
16998: PPUSH
16999: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17003: LD_INT 35
17005: PPUSH
17006: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
17010: LD_VAR 0 1
17014: PPUSH
17015: LD_INT 106
17017: PPUSH
17018: LD_INT 88
17020: PPUSH
17021: CALL_OW 297
17025: PUSH
17026: LD_INT 4
17028: LESS
17029: IFFALSE 17003
// SetFuel ( i , 100 ) ;
17031: LD_VAR 0 1
17035: PPUSH
17036: LD_INT 100
17038: PPUSH
17039: CALL_OW 240
// end else
17043: GO 17086
// if not IsInArea ( i , ruParking ) then
17045: LD_VAR 0 1
17049: PPUSH
17050: LD_INT 25
17052: PPUSH
17053: CALL_OW 308
17057: NOT
17058: IFFALSE 17074
// ComMoveToArea ( i , ruParking ) else
17060: LD_VAR 0 1
17064: PPUSH
17065: LD_INT 25
17067: PPUSH
17068: CALL_OW 113
17072: GO 17086
// SetTag ( i , 1 ) ;
17074: LD_VAR 0 1
17078: PPUSH
17079: LD_INT 1
17081: PPUSH
17082: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
17086: LD_VAR 0 1
17090: PPUSH
17091: CALL_OW 110
17095: PUSH
17096: LD_INT 1
17098: EQUAL
17099: IFFALSE 17229
// begin if GetLives ( i ) < 1000 then
17101: LD_VAR 0 1
17105: PPUSH
17106: CALL_OW 256
17110: PUSH
17111: LD_INT 1000
17113: LESS
17114: IFFALSE 17206
// begin if not IsDrivenBy ( i ) then
17116: LD_VAR 0 1
17120: PPUSH
17121: CALL_OW 311
17125: NOT
17126: IFFALSE 17130
// continue ;
17128: GO 16898
// mech := IsDrivenBy ( i ) ;
17130: LD_ADDR_VAR 0 2
17134: PUSH
17135: LD_VAR 0 1
17139: PPUSH
17140: CALL_OW 311
17144: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
17145: LD_VAR 0 2
17149: PPUSH
17150: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
17154: LD_VAR 0 2
17158: PPUSH
17159: LD_VAR 0 1
17163: PPUSH
17164: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
17168: LD_INT 35
17170: PPUSH
17171: CALL_OW 67
// until GetLives ( i ) = 1000 ;
17175: LD_VAR 0 1
17179: PPUSH
17180: CALL_OW 256
17184: PUSH
17185: LD_INT 1000
17187: EQUAL
17188: IFFALSE 17168
// ComEnterUnit ( mech , i ) ;
17190: LD_VAR 0 2
17194: PPUSH
17195: LD_VAR 0 1
17199: PPUSH
17200: CALL_OW 120
// end else
17204: GO 17229
// if IsDrivenBy ( i ) then
17206: LD_VAR 0 1
17210: PPUSH
17211: CALL_OW 311
17215: IFFALSE 17229
// SetTag ( i , 2 ) ;
17217: LD_VAR 0 1
17221: PPUSH
17222: LD_INT 2
17224: PPUSH
17225: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
17229: LD_VAR 0 1
17233: PPUSH
17234: CALL_OW 110
17238: PUSH
17239: LD_INT 2
17241: EQUAL
17242: IFFALSE 17421
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
17244: LD_ADDR_VAR 0 3
17248: PUSH
17249: LD_INT 24
17251: PPUSH
17252: LD_INT 81
17254: PUSH
17255: LD_INT 3
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PPUSH
17262: CALL_OW 70
17266: ST_TO_ADDR
// if GetLives ( i ) < 650 then
17267: LD_VAR 0 1
17271: PPUSH
17272: CALL_OW 256
17276: PUSH
17277: LD_INT 650
17279: LESS
17280: IFFALSE 17305
// begin ComStop ( i ) ;
17282: LD_VAR 0 1
17286: PPUSH
17287: CALL_OW 141
// SetTag ( i , 0 ) ;
17291: LD_VAR 0 1
17295: PPUSH
17296: LD_INT 0
17298: PPUSH
17299: CALL_OW 109
// continue ;
17303: GO 16898
// end ; if enemy then
17305: LD_VAR 0 3
17309: IFFALSE 17349
// begin if not HasTask ( i ) then
17311: LD_VAR 0 1
17315: PPUSH
17316: CALL_OW 314
17320: NOT
17321: IFFALSE 17347
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17323: LD_VAR 0 1
17327: PPUSH
17328: LD_VAR 0 3
17332: PPUSH
17333: LD_VAR 0 1
17337: PPUSH
17338: CALL_OW 74
17342: PPUSH
17343: CALL_OW 115
// end else
17347: GO 17421
// if ruMobile > 2 then
17349: LD_EXP 46
17353: PUSH
17354: LD_INT 2
17356: GREATER
17357: IFFALSE 17421
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17359: LD_ADDR_VAR 0 3
17363: PUSH
17364: LD_INT 81
17366: PUSH
17367: LD_INT 3
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PPUSH
17374: CALL_OW 69
17378: ST_TO_ADDR
// if enemy then
17379: LD_VAR 0 3
17383: IFFALSE 17421
// if not HasTask ( i ) then
17385: LD_VAR 0 1
17389: PPUSH
17390: CALL_OW 314
17394: NOT
17395: IFFALSE 17421
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17397: LD_VAR 0 1
17401: PPUSH
17402: LD_VAR 0 3
17406: PPUSH
17407: LD_VAR 0 1
17411: PPUSH
17412: CALL_OW 74
17416: PPUSH
17417: CALL_OW 115
// end ; end ; end ;
17421: GO 16898
17423: POP
17424: POP
// end ; end_of_file
17425: PPOPN 3
17427: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
17428: LD_INT 0
17430: PPUSH
17431: PPUSH
17432: PPUSH
17433: PPUSH
17434: PPUSH
17435: PPUSH
17436: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
17437: LD_ADDR_VAR 0 3
17441: PUSH
17442: LD_INT 22
17444: PUSH
17445: LD_INT 6
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 21
17454: PUSH
17455: LD_INT 1
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 25
17464: PUSH
17465: LD_INT 1
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 3
17474: PUSH
17475: LD_INT 54
17477: PUSH
17478: EMPTY
17479: LIST
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: PPUSH
17491: CALL_OW 69
17495: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
17496: LD_ADDR_VAR 0 7
17500: PUSH
17501: LD_INT 22
17503: PUSH
17504: LD_INT 6
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 21
17513: PUSH
17514: LD_INT 1
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 25
17523: PUSH
17524: LD_INT 1
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 54
17533: PUSH
17534: EMPTY
17535: LIST
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: PPUSH
17543: CALL_OW 69
17547: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
17548: LD_ADDR_VAR 0 4
17552: PUSH
17553: LD_INT 22
17555: PUSH
17556: LD_INT 6
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: LD_INT 21
17565: PUSH
17566: LD_INT 1
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 25
17575: PUSH
17576: LD_INT 2
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: LIST
17587: PPUSH
17588: CALL_OW 69
17592: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
17593: LD_ADDR_VAR 0 6
17597: PUSH
17598: LD_INT 22
17600: PUSH
17601: LD_INT 6
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 21
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 25
17620: PUSH
17621: LD_INT 4
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: LIST
17632: PPUSH
17633: CALL_OW 69
17637: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
17638: LD_ADDR_VAR 0 8
17642: PUSH
17643: LD_INT 22
17645: PUSH
17646: LD_INT 6
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 21
17655: PUSH
17656: LD_INT 2
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 34
17665: PUSH
17666: LD_INT 51
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: LIST
17677: PPUSH
17678: CALL_OW 69
17682: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
17683: LD_VAR 0 1
17687: PPUSH
17688: CALL_OW 255
17692: PUSH
17693: LD_INT 6
17695: EQUAL
17696: PUSH
17697: LD_VAR 0 1
17701: PPUSH
17702: CALL_OW 266
17706: PUSH
17707: LD_INT 0
17709: EQUAL
17710: AND
17711: IFFALSE 17731
// begin ruPDepot = building ;
17713: LD_ADDR_EXP 21
17717: PUSH
17718: LD_VAR 0 1
17722: ST_TO_ADDR
// baseReadyToBuild = 1 ;
17723: LD_ADDR_EXP 20
17727: PUSH
17728: LD_INT 1
17730: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
17731: LD_VAR 0 1
17735: PPUSH
17736: CALL_OW 266
17740: PUSH
17741: LD_INT 4
17743: EQUAL
17744: PUSH
17745: LD_VAR 0 1
17749: PPUSH
17750: CALL_OW 255
17754: PUSH
17755: LD_INT 6
17757: EQUAL
17758: AND
17759: IFFALSE 17792
// for i in tmpSold do
17761: LD_ADDR_VAR 0 2
17765: PUSH
17766: LD_VAR 0 3
17770: PUSH
17771: FOR_IN
17772: IFFALSE 17790
// ComEnterUnit ( i , building ) ;
17774: LD_VAR 0 2
17778: PPUSH
17779: LD_VAR 0 1
17783: PPUSH
17784: CALL_OW 120
17788: GO 17771
17790: POP
17791: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
17792: LD_VAR 0 1
17796: PPUSH
17797: CALL_OW 266
17801: PUSH
17802: LD_INT 6
17804: EQUAL
17805: PUSH
17806: LD_VAR 0 1
17810: PPUSH
17811: CALL_OW 255
17815: PUSH
17816: LD_INT 6
17818: EQUAL
17819: AND
17820: IFFALSE 17878
// begin for i in tmpSci do
17822: LD_ADDR_VAR 0 2
17826: PUSH
17827: LD_VAR 0 6
17831: PUSH
17832: FOR_IN
17833: IFFALSE 17851
// ComEnterUnit ( i , building ) ;
17835: LD_VAR 0 2
17839: PPUSH
17840: LD_VAR 0 1
17844: PPUSH
17845: CALL_OW 120
17849: GO 17832
17851: POP
17852: POP
// ResAllTechs ( 6 , building , 3 ) ;
17853: LD_INT 6
17855: PPUSH
17856: LD_VAR 0 1
17860: PPUSH
17861: LD_INT 3
17863: PPUSH
17864: CALL 5976 0 3
// ruPLab = building ;
17868: LD_ADDR_EXP 22
17872: PUSH
17873: LD_VAR 0 1
17877: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
17878: LD_VAR 0 1
17882: PPUSH
17883: CALL_OW 266
17887: PUSH
17888: LD_INT 2
17890: EQUAL
17891: PUSH
17892: LD_VAR 0 1
17896: PPUSH
17897: CALL_OW 255
17901: PUSH
17902: LD_INT 6
17904: EQUAL
17905: AND
17906: IFFALSE 17957
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
17908: LD_ADDR_VAR 0 5
17912: PUSH
17913: LD_VAR 0 8
17917: PUSH
17918: LD_INT 1
17920: ARRAY
17921: PPUSH
17922: CALL_OW 313
17926: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
17927: LD_VAR 0 5
17931: PPUSH
17932: CALL_OW 121
// wait ( 0 0$1 ) ;
17936: LD_INT 35
17938: PPUSH
17939: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
17943: LD_VAR 0 5
17947: PPUSH
17948: LD_VAR 0 1
17952: PPUSH
17953: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
17957: LD_VAR 0 1
17961: PPUSH
17962: CALL_OW 266
17966: PUSH
17967: LD_INT 32
17969: EQUAL
17970: PUSH
17971: LD_VAR 0 1
17975: PPUSH
17976: CALL_OW 255
17980: PUSH
17981: LD_INT 6
17983: EQUAL
17984: AND
17985: IFFALSE 18037
// begin ComPlaceWeapon ( building , 42 ) ;
17987: LD_VAR 0 1
17991: PPUSH
17992: LD_INT 42
17994: PPUSH
17995: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
17999: LD_VAR 0 7
18003: PUSH
18004: LD_INT 1
18006: ARRAY
18007: PPUSH
18008: CALL_OW 122
// wait ( 0 0$1 ) ;
18012: LD_INT 35
18014: PPUSH
18015: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
18019: LD_VAR 0 7
18023: PUSH
18024: LD_INT 1
18026: ARRAY
18027: PPUSH
18028: LD_VAR 0 1
18032: PPUSH
18033: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
18037: LD_VAR 0 1
18041: PPUSH
18042: CALL_OW 266
18046: PUSH
18047: LD_INT 31
18049: EQUAL
18050: PUSH
18051: LD_VAR 0 1
18055: PPUSH
18056: CALL_OW 255
18060: PUSH
18061: LD_INT 6
18063: EQUAL
18064: AND
18065: IFFALSE 18131
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
18067: LD_VAR 0 7
18071: PUSH
18072: LD_INT 2
18074: ARRAY
18075: PPUSH
18076: CALL_OW 122
// wait ( 0 0$1 ) ;
18080: LD_INT 35
18082: PPUSH
18083: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
18087: LD_VAR 0 7
18091: PUSH
18092: LD_INT 2
18094: ARRAY
18095: PPUSH
18096: LD_VAR 0 1
18100: PPUSH
18101: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
18105: LD_VAR 0 4
18109: PUSH
18110: LD_INT 1
18112: ARRAY
18113: PPUSH
18114: LD_EXP 21
18118: PPUSH
18119: CALL_OW 120
// baseReadyToBuild = 2 ;
18123: LD_ADDR_EXP 20
18127: PUSH
18128: LD_INT 2
18130: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
18131: LD_VAR 0 1
18135: PPUSH
18136: CALL_OW 266
18140: PUSH
18141: LD_INT 32
18143: EQUAL
18144: PUSH
18145: LD_VAR 0 1
18149: PPUSH
18150: CALL_OW 255
18154: PUSH
18155: LD_INT 1
18157: EQUAL
18158: AND
18159: PUSH
18160: LD_EXP 32
18164: PUSH
18165: LD_INT 0
18167: EQUAL
18168: AND
18169: IFFALSE 18414
// begin bunkerDialog = 1 ;
18171: LD_ADDR_EXP 32
18175: PUSH
18176: LD_INT 1
18178: ST_TO_ADDR
// if IsOK ( Claptopn ) then
18179: LD_EXP 11
18183: PPUSH
18184: CALL_OW 302
18188: IFFALSE 18204
// begin Say ( Claptopn , D11-Eng1-1 ) ;
18190: LD_EXP 11
18194: PPUSH
18195: LD_STRING D11-Eng1-1
18197: PPUSH
18198: CALL_OW 88
// end else
18202: GO 18400
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18204: LD_INT 22
18206: PUSH
18207: LD_INT 1
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 21
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 25
18226: PUSH
18227: LD_INT 3
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 26
18236: PUSH
18237: LD_INT 1
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: PPUSH
18250: CALL_OW 69
18254: PUSH
18255: LD_EXP 1
18259: PUSH
18260: EMPTY
18261: LIST
18262: PUSH
18263: LD_INT 0
18265: GREATER
18266: DIFF
18267: IFFALSE 18341
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18269: LD_INT 22
18271: PUSH
18272: LD_INT 1
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 21
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 25
18291: PUSH
18292: LD_INT 2
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 26
18301: PUSH
18302: LD_INT 1
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: PPUSH
18315: CALL_OW 69
18319: PUSH
18320: LD_EXP 1
18324: PUSH
18325: EMPTY
18326: LIST
18327: DIFF
18328: PPUSH
18329: LD_STRING D11-Eng1-1
18331: PPUSH
18332: LD_STRING D11-Eng1-1
18334: PPUSH
18335: CALL 4625 0 3
// end else
18339: GO 18400
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18341: LD_INT 22
18343: PUSH
18344: LD_INT 1
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 21
18353: PUSH
18354: LD_INT 1
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 26
18363: PUSH
18364: LD_INT 1
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: LIST
18375: PPUSH
18376: CALL_OW 69
18380: PUSH
18381: LD_EXP 1
18385: PUSH
18386: EMPTY
18387: LIST
18388: DIFF
18389: PPUSH
18390: LD_STRING D11-Eng1-1
18392: PPUSH
18393: LD_STRING D11-Eng1-1
18395: PPUSH
18396: CALL 4625 0 3
// end ; end ; if energyVDialog = 0 then
18400: LD_EXP 33
18404: PUSH
18405: LD_INT 0
18407: EQUAL
18408: IFFALSE 18414
// EnergyDialog ;
18410: CALL 5028 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
18414: LD_VAR 0 1
18418: PPUSH
18419: CALL_OW 266
18423: PUSH
18424: LD_INT 29
18426: EQUAL
18427: PUSH
18428: LD_VAR 0 1
18432: PPUSH
18433: CALL_OW 255
18437: PUSH
18438: LD_INT 1
18440: EQUAL
18441: AND
18442: IFFALSE 18452
// buildOil = 1 ;
18444: LD_ADDR_EXP 34
18448: PUSH
18449: LD_INT 1
18451: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
18452: LD_VAR 0 1
18456: PPUSH
18457: CALL_OW 266
18461: PUSH
18462: LD_INT 26
18464: EQUAL
18465: PUSH
18466: LD_VAR 0 1
18470: PPUSH
18471: CALL_OW 255
18475: PUSH
18476: LD_INT 1
18478: EQUAL
18479: AND
18480: IFFALSE 18490
// buildPower = 1 ;
18482: LD_ADDR_EXP 35
18486: PUSH
18487: LD_INT 1
18489: ST_TO_ADDR
// end ;
18490: PPOPN 8
18492: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
18493: LD_VAR 0 1
18497: PPUSH
18498: CALL_OW 266
18502: PUSH
18503: LD_INT 3
18505: EQUAL
18506: PUSH
18507: LD_VAR 0 1
18511: PPUSH
18512: CALL_OW 255
18516: PUSH
18517: LD_INT 1
18519: EQUAL
18520: AND
18521: PUSH
18522: LD_EXP 31
18526: PUSH
18527: LD_INT 0
18529: EQUAL
18530: AND
18531: IFFALSE 18879
// begin factoryDialog = 1 ;
18533: LD_ADDR_EXP 31
18537: PUSH
18538: LD_INT 1
18540: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
18541: LD_INT 47
18543: PPUSH
18544: LD_INT 1
18546: PPUSH
18547: CALL_OW 321
18551: PUSH
18552: LD_INT 1
18554: EQUAL
18555: PUSH
18556: LD_INT 45
18558: PPUSH
18559: LD_INT 1
18561: PPUSH
18562: CALL_OW 321
18566: PUSH
18567: LD_INT 1
18569: EQUAL
18570: AND
18571: IFFALSE 18879
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18573: LD_INT 22
18575: PUSH
18576: LD_INT 1
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 21
18585: PUSH
18586: LD_INT 3
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 30
18595: PUSH
18596: LD_INT 3
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 24
18605: PUSH
18606: LD_INT 1000
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: PPUSH
18619: CALL_OW 69
18623: PUSH
18624: LD_INT 1
18626: ARRAY
18627: PPUSH
18628: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
18632: LD_EXP 1
18636: PPUSH
18637: LD_STRING D9a-JMM-1
18639: PPUSH
18640: CALL_OW 88
// if IsOK ( Campell ) then
18644: LD_EXP 12
18648: PPUSH
18649: CALL_OW 302
18653: IFFALSE 18669
// begin Say ( Campell , D9a-Mech1-1 ) ;
18655: LD_EXP 12
18659: PPUSH
18660: LD_STRING D9a-Mech1-1
18662: PPUSH
18663: CALL_OW 88
// end else
18667: GO 18865
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18669: LD_INT 22
18671: PUSH
18672: LD_INT 1
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 21
18681: PUSH
18682: LD_INT 1
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 25
18691: PUSH
18692: LD_INT 3
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 26
18701: PUSH
18702: LD_INT 1
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: PPUSH
18715: CALL_OW 69
18719: PUSH
18720: LD_EXP 1
18724: PUSH
18725: EMPTY
18726: LIST
18727: PUSH
18728: LD_INT 0
18730: GREATER
18731: DIFF
18732: IFFALSE 18806
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18734: LD_INT 22
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 21
18746: PUSH
18747: LD_INT 1
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 25
18756: PUSH
18757: LD_INT 3
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 26
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: PPUSH
18780: CALL_OW 69
18784: PUSH
18785: LD_EXP 1
18789: PUSH
18790: EMPTY
18791: LIST
18792: DIFF
18793: PPUSH
18794: LD_STRING D9a-Mech1-1
18796: PPUSH
18797: LD_STRING D9a-Mech1-1
18799: PPUSH
18800: CALL 4625 0 3
// end else
18804: GO 18865
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18806: LD_INT 22
18808: PUSH
18809: LD_INT 1
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 21
18818: PUSH
18819: LD_INT 1
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 26
18828: PUSH
18829: LD_INT 1
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: PPUSH
18841: CALL_OW 69
18845: PUSH
18846: LD_EXP 1
18850: PUSH
18851: EMPTY
18852: LIST
18853: DIFF
18854: PPUSH
18855: LD_STRING D9a-Mech1-1
18857: PPUSH
18858: LD_STRING D9a-Mech1-1
18860: PPUSH
18861: CALL 4625 0 3
// end ; end ; if energyVDialog = 0 then
18865: LD_EXP 33
18869: PUSH
18870: LD_INT 0
18872: EQUAL
18873: IFFALSE 18879
// EnergyDialog ;
18875: CALL 5028 0 0
// end ; end ; end ;
18879: PPOPN 1
18881: END
// on UnitDestroyed ( unit ) do var mech ;
18882: LD_INT 0
18884: PPUSH
// begin if unit = JMM then
18885: LD_VAR 0 1
18889: PUSH
18890: LD_EXP 1
18894: EQUAL
18895: IFFALSE 18904
// YouLost ( JMM ) ;
18897: LD_STRING JMM
18899: PPUSH
18900: CALL_OW 104
// if unit in ruMobile then
18904: LD_VAR 0 1
18908: PUSH
18909: LD_EXP 46
18913: IN
18914: IFFALSE 18932
// ruMobile = ruMobile diff ruMobile ;
18916: LD_ADDR_EXP 46
18920: PUSH
18921: LD_EXP 46
18925: PUSH
18926: LD_EXP 46
18930: DIFF
18931: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
18932: LD_VAR 0 1
18936: PPUSH
18937: CALL_OW 247
18941: PUSH
18942: LD_INT 1
18944: EQUAL
18945: PUSH
18946: LD_VAR 0 1
18950: PPUSH
18951: CALL_OW 255
18955: PUSH
18956: LD_INT 1
18958: EQUAL
18959: AND
18960: IFFALSE 18976
// lostCounter = lostCounter + 1 ;
18962: LD_ADDR_EXP 38
18966: PUSH
18967: LD_EXP 38
18971: PUSH
18972: LD_INT 1
18974: PLUS
18975: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
18976: LD_EXP 43
18980: PUSH
18981: LD_INT 24
18983: PPUSH
18984: CALL_OW 313
18988: PUSH
18989: LD_INT 6
18991: LESS
18992: AND
18993: PUSH
18994: LD_VAR 0 1
18998: PPUSH
18999: CALL_OW 257
19003: PUSH
19004: LD_INT 3
19006: EQUAL
19007: AND
19008: PUSH
19009: LD_VAR 0 1
19013: PPUSH
19014: CALL_OW 255
19018: PUSH
19019: LD_INT 3
19021: EQUAL
19022: AND
19023: PUSH
19024: LD_INT 24
19026: PPUSH
19027: CALL_OW 302
19031: AND
19032: PUSH
19033: LD_INT 24
19035: PPUSH
19036: CALL_OW 255
19040: PUSH
19041: LD_INT 3
19043: EQUAL
19044: AND
19045: IFFALSE 19174
// begin ruMech := ruMech - 1 ;
19047: LD_ADDR_EXP 43
19051: PUSH
19052: LD_EXP 43
19056: PUSH
19057: LD_INT 1
19059: MINUS
19060: ST_TO_ADDR
// if ruMech = 0 then
19061: LD_EXP 43
19065: PUSH
19066: LD_INT 0
19068: EQUAL
19069: IFFALSE 19073
// exit ;
19071: GO 19174
// wait ( 0 0$40 ) ;
19073: LD_INT 1400
19075: PPUSH
19076: CALL_OW 67
// uc_side = 3 ;
19080: LD_ADDR_OWVAR 20
19084: PUSH
19085: LD_INT 3
19087: ST_TO_ADDR
// uc_nation = 3 ;
19088: LD_ADDR_OWVAR 21
19092: PUSH
19093: LD_INT 3
19095: ST_TO_ADDR
// hc_gallery :=  ;
19096: LD_ADDR_OWVAR 33
19100: PUSH
19101: LD_STRING 
19103: ST_TO_ADDR
// hc_name :=  ;
19104: LD_ADDR_OWVAR 26
19108: PUSH
19109: LD_STRING 
19111: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
19112: LD_INT 0
19114: PPUSH
19115: LD_EXP 16
19119: PPUSH
19120: LD_EXP 17
19124: PPUSH
19125: CALL_OW 12
19129: PPUSH
19130: CALL_OW 383
// mech := CreateHuman ;
19134: LD_ADDR_VAR 0 2
19138: PUSH
19139: CALL_OW 44
19143: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
19144: LD_VAR 0 2
19148: PPUSH
19149: LD_INT 124
19151: PPUSH
19152: LD_INT 97
19154: PPUSH
19155: LD_INT 0
19157: PPUSH
19158: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
19162: LD_VAR 0 2
19166: PPUSH
19167: LD_INT 24
19169: PPUSH
19170: CALL_OW 120
// end ; end ;
19174: PPOPN 2
19176: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
19177: LD_INT 0
19179: PPUSH
// begin if GetSide ( vehicle ) = 1 then
19180: LD_VAR 0 1
19184: PPUSH
19185: CALL_OW 255
19189: PUSH
19190: LD_INT 1
19192: EQUAL
19193: IFFALSE 19209
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
19195: LD_ADDR_EXP 42
19199: PUSH
19200: LD_EXP 42
19204: PUSH
19205: LD_INT 1
19207: PLUS
19208: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
19209: LD_VAR 0 1
19213: PPUSH
19214: CALL_OW 255
19218: PUSH
19219: LD_INT 3
19221: EQUAL
19222: PUSH
19223: LD_VAR 0 1
19227: PPUSH
19228: CALL_OW 264
19232: PUSH
19233: LD_INT 42
19235: PUSH
19236: LD_INT 43
19238: PUSH
19239: LD_INT 44
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: LIST
19246: IN
19247: AND
19248: IFFALSE 19266
// ruMobile := ruMobile union vehicle ;
19250: LD_ADDR_EXP 46
19254: PUSH
19255: LD_EXP 46
19259: PUSH
19260: LD_VAR 0 1
19264: UNION
19265: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 53 then
19266: LD_VAR 0 1
19270: PPUSH
19271: CALL_OW 264
19275: PUSH
19276: LD_INT 53
19278: EQUAL
19279: IFFALSE 19415
// begin uc_side = 3 ;
19281: LD_ADDR_OWVAR 20
19285: PUSH
19286: LD_INT 3
19288: ST_TO_ADDR
// uc_nation = 3 ;
19289: LD_ADDR_OWVAR 21
19293: PUSH
19294: LD_INT 3
19296: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
19297: LD_INT 0
19299: PPUSH
19300: LD_EXP 17
19304: PPUSH
19305: CALL_OW 383
// driver := CreateHuman ;
19309: LD_ADDR_VAR 0 3
19313: PUSH
19314: CALL_OW 44
19318: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
19319: LD_VAR 0 3
19323: PPUSH
19324: LD_VAR 0 2
19328: PPUSH
19329: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
19333: LD_VAR 0 1
19337: PPUSH
19338: LD_INT 21
19340: PPUSH
19341: CALL 5244 0 2
// repeat wait ( 0 0$1 ) ;
19345: LD_INT 35
19347: PPUSH
19348: CALL_OW 67
// until not HasTask ( vehicle ) ;
19352: LD_VAR 0 1
19356: PPUSH
19357: CALL_OW 314
19361: NOT
19362: IFFALSE 19345
// driver := IsDrivenBy ( vehicle ) ;
19364: LD_ADDR_VAR 0 3
19368: PUSH
19369: LD_VAR 0 1
19373: PPUSH
19374: CALL_OW 311
19378: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
19379: LD_VAR 0 3
19383: PPUSH
19384: LD_INT 104
19386: PPUSH
19387: LD_INT 73
19389: PPUSH
19390: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19394: LD_VAR 0 3
19398: PPUSH
19399: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
19403: LD_VAR 0 3
19407: PPUSH
19408: LD_INT 24
19410: PPUSH
19411: CALL_OW 180
// end ; end ;
19415: PPOPN 3
19417: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
19418: LD_INT 0
19420: PPUSH
19421: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
19422: LD_VAR 0 1
19426: PPUSH
19427: CALL_OW 255
19431: PUSH
19432: LD_INT 3
19434: EQUAL
19435: PUSH
19436: LD_VAR 0 1
19440: PPUSH
19441: CALL_OW 247
19445: PUSH
19446: LD_INT 2
19448: EQUAL
19449: AND
19450: IFFALSE 19544
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
19452: LD_VAR 0 1
19456: PPUSH
19457: CALL_OW 264
19461: PUSH
19462: LD_INT 42
19464: EQUAL
19465: PUSH
19466: LD_VAR 0 1
19470: PPUSH
19471: CALL_OW 264
19475: PUSH
19476: LD_INT 43
19478: EQUAL
19479: OR
19480: PUSH
19481: LD_VAR 0 1
19485: PPUSH
19486: CALL_OW 264
19490: PUSH
19491: LD_INT 44
19493: EQUAL
19494: OR
19495: IFFALSE 19544
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
19497: LD_INT 24
19499: PPUSH
19500: LD_VAR 0 1
19504: PPUSH
19505: CALL_OW 265
19509: PPUSH
19510: LD_VAR 0 1
19514: PPUSH
19515: CALL_OW 262
19519: PPUSH
19520: LD_VAR 0 1
19524: PPUSH
19525: CALL_OW 263
19529: PPUSH
19530: LD_VAR 0 1
19534: PPUSH
19535: CALL_OW 264
19539: PPUSH
19540: CALL_OW 185
// end ;
19544: PPOPN 3
19546: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
19547: LD_VAR 0 1
19551: PPUSH
19552: CALL_OW 255
19556: PUSH
19557: LD_INT 3
19559: EQUAL
19560: PUSH
19561: LD_VAR 0 2
19565: PPUSH
19566: CALL_OW 255
19570: PUSH
19571: LD_INT 3
19573: EQUAL
19574: AND
19575: PUSH
19576: LD_INT 24
19578: PPUSH
19579: CALL_OW 302
19583: AND
19584: PUSH
19585: LD_VAR 0 1
19589: PPUSH
19590: CALL_OW 302
19594: NOT
19595: AND
19596: IFFALSE 19610
// ComEnterUnit ( human , rubfact0 ) ;
19598: LD_VAR 0 2
19602: PPUSH
19603: LD_INT 24
19605: PPUSH
19606: CALL_OW 120
// end ;
19610: PPOPN 2
19612: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
19613: LD_VAR 0 1
19617: PUSH
19618: LD_INT 24
19620: EQUAL
19621: PUSH
19622: LD_VAR 0 2
19626: PPUSH
19627: CALL_OW 256
19631: PUSH
19632: LD_INT 1000
19634: LESS
19635: AND
19636: IFFALSE 19650
// SetLives ( un , 1000 ) ;
19638: LD_VAR 0 2
19642: PPUSH
19643: LD_INT 1000
19645: PPUSH
19646: CALL_OW 234
// end ;
19650: PPOPN 2
19652: END
// on Command ( comandid ) do var i , j , tmp ;
19653: LD_INT 0
19655: PPUSH
19656: PPUSH
19657: PPUSH
// begin SOS_Command ( comandid ) ;
19658: LD_VAR 0 1
19662: PPUSH
19663: CALL 35514 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
19667: LD_INT 22
19669: PUSH
19670: LD_INT 4
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PPUSH
19677: CALL_OW 69
19681: NOT
19682: IFFALSE 19686
// exit ;
19684: GO 19851
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
19686: LD_ADDR_VAR 0 2
19690: PUSH
19691: LD_INT 22
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 2
19703: PUSH
19704: LD_INT 21
19706: PUSH
19707: LD_INT 1
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 21
19716: PUSH
19717: LD_INT 2
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: LIST
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PPUSH
19733: CALL_OW 69
19737: PUSH
19738: FOR_IN
19739: IFFALSE 19849
// begin if GetTaskList ( i ) > 0 then
19741: LD_VAR 0 2
19745: PPUSH
19746: CALL_OW 437
19750: PUSH
19751: LD_INT 0
19753: GREATER
19754: IFFALSE 19847
// begin for j = 1 to GetTaskList ( i ) do
19756: LD_ADDR_VAR 0 3
19760: PUSH
19761: DOUBLE
19762: LD_INT 1
19764: DEC
19765: ST_TO_ADDR
19766: LD_VAR 0 2
19770: PPUSH
19771: CALL_OW 437
19775: PUSH
19776: FOR_TO
19777: IFFALSE 19845
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
19779: LD_ADDR_VAR 0 4
19783: PUSH
19784: LD_VAR 0 2
19788: PPUSH
19789: CALL_OW 437
19793: PUSH
19794: LD_VAR 0 3
19798: ARRAY
19799: PUSH
19800: LD_INT 4
19802: ARRAY
19803: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
19804: LD_VAR 0 4
19808: PPUSH
19809: CALL_OW 255
19813: PUSH
19814: LD_INT 4
19816: EQUAL
19817: PUSH
19818: LD_VAR 0 4
19822: PPUSH
19823: CALL_OW 255
19827: PUSH
19828: LD_INT 0
19830: EQUAL
19831: OR
19832: IFFALSE 19843
// ComStop ( i ) ;
19834: LD_VAR 0 2
19838: PPUSH
19839: CALL_OW 141
// end ;
19843: GO 19776
19845: POP
19846: POP
// end ; end ;
19847: GO 19738
19849: POP
19850: POP
// end ; end_of_file
19851: PPOPN 4
19853: END
// every 10 10$0 do
19854: GO 19856
19856: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
19857: LD_INT 5
19859: PPUSH
19860: LD_INT 3
19862: PPUSH
19863: LD_INT 2
19865: PUSH
19866: LD_INT 2
19868: PUSH
19869: LD_INT 3
19871: PUSH
19872: LD_INT 4
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: LIST
19879: PUSH
19880: LD_OWVAR 67
19884: ARRAY
19885: PLUS
19886: PPUSH
19887: LD_INT 0
19889: PPUSH
19890: LD_INT 0
19892: PPUSH
19893: LD_INT 0
19895: PPUSH
19896: LD_INT 0
19898: PPUSH
19899: LD_EXP 16
19903: PPUSH
19904: LD_EXP 17
19908: PPUSH
19909: CALL_OW 12
19913: PPUSH
19914: LD_INT 4
19916: PPUSH
19917: LD_INT 14
19919: PPUSH
19920: LD_INT 1
19922: PPUSH
19923: LD_INT 2
19925: PPUSH
19926: CALL 7949 0 12
// end ;
19930: END
// every 20 20$0 do
19931: GO 19933
19933: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
19934: LD_INT 5
19936: PPUSH
19937: LD_INT 3
19939: PPUSH
19940: LD_INT 4
19942: PUSH
19943: LD_INT 2
19945: PUSH
19946: LD_INT 3
19948: PUSH
19949: LD_INT 4
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: LIST
19956: PUSH
19957: LD_OWVAR 67
19961: ARRAY
19962: PLUS
19963: PPUSH
19964: LD_INT 0
19966: PPUSH
19967: LD_INT 0
19969: PPUSH
19970: LD_INT 0
19972: PPUSH
19973: LD_INT 2
19975: PPUSH
19976: LD_EXP 16
19980: PPUSH
19981: LD_EXP 17
19985: PPUSH
19986: CALL_OW 12
19990: PPUSH
19991: LD_INT 4
19993: PPUSH
19994: LD_INT 14
19996: PPUSH
19997: LD_INT 1
19999: PPUSH
20000: LD_INT 1
20002: PPUSH
20003: CALL 7949 0 12
// end ;
20007: END
// every 25 25$0 do
20008: GO 20010
20010: DISABLE
// begin if Difficulty > 1 then
20011: LD_OWVAR 67
20015: PUSH
20016: LD_INT 1
20018: GREATER
20019: IFFALSE 20029
// specAttack := true ;
20021: LD_ADDR_EXP 47
20025: PUSH
20026: LD_INT 1
20028: ST_TO_ADDR
// RespawnAttackVehicle ( RussianAttack , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
20029: LD_INT 4
20031: PPUSH
20032: LD_INT 5
20034: PPUSH
20035: LD_INT 4
20037: PUSH
20038: LD_INT 5
20040: PUSH
20041: LD_INT 6
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: LIST
20048: PUSH
20049: LD_OWVAR 67
20053: ARRAY
20054: PPUSH
20055: LD_EXP 16
20059: PPUSH
20060: LD_EXP 17
20064: PPUSH
20065: CALL_OW 12
20069: PPUSH
20070: LD_INT 3
20072: PPUSH
20073: LD_INT 1
20075: PPUSH
20076: LD_INT 1
20078: PPUSH
20079: LD_INT 42
20081: PUSH
20082: LD_INT 42
20084: PUSH
20085: LD_INT 43
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 42
20095: PUSH
20096: LD_INT 43
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 43
20105: PUSH
20106: LD_INT 43
20108: PUSH
20109: LD_INT 43
20111: PUSH
20112: LD_INT 44
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: LIST
20125: PUSH
20126: LD_OWVAR 67
20130: ARRAY
20131: PPUSH
20132: EMPTY
20133: PPUSH
20134: EMPTY
20135: PPUSH
20136: LD_INT 1
20138: PPUSH
20139: CALL 9705 0 11
// end ;
20143: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
20144: LD_EXP 47
20148: IFFALSE 20511
20150: GO 20152
20152: DISABLE
20153: LD_INT 0
20155: PPUSH
20156: PPUSH
20157: PPUSH
20158: PPUSH
// begin wait ( 0 0$20 ) ;
20159: LD_INT 700
20161: PPUSH
20162: CALL_OW 67
// uc_side := 5 ;
20166: LD_ADDR_OWVAR 20
20170: PUSH
20171: LD_INT 5
20173: ST_TO_ADDR
// uc_nation := 3 ;
20174: LD_ADDR_OWVAR 21
20178: PUSH
20179: LD_INT 3
20181: ST_TO_ADDR
// InitHc ;
20182: CALL_OW 19
// hc_importance := 0 ;
20186: LD_ADDR_OWVAR 32
20190: PUSH
20191: LD_INT 0
20193: ST_TO_ADDR
// tmp := [ ] ;
20194: LD_ADDR_VAR 0 2
20198: PUSH
20199: EMPTY
20200: ST_TO_ADDR
// PrepareHuman ( false , 2 , 6 ) ;
20201: LD_INT 0
20203: PPUSH
20204: LD_INT 2
20206: PPUSH
20207: LD_INT 6
20209: PPUSH
20210: CALL_OW 380
// eng := CreateHuman ;
20214: LD_ADDR_VAR 0 4
20218: PUSH
20219: CALL_OW 44
20223: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
20224: LD_VAR 0 4
20228: PPUSH
20229: LD_INT 78
20231: PPUSH
20232: LD_INT 2
20234: PPUSH
20235: LD_INT 4
20237: PPUSH
20238: LD_INT 0
20240: PPUSH
20241: CALL_OW 50
// for i = 1 to 2 + Difficulty do
20245: LD_ADDR_VAR 0 3
20249: PUSH
20250: DOUBLE
20251: LD_INT 1
20253: DEC
20254: ST_TO_ADDR
20255: LD_INT 2
20257: PUSH
20258: LD_OWVAR 67
20262: PLUS
20263: PUSH
20264: FOR_TO
20265: IFFALSE 20346
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
20267: LD_INT 0
20269: PPUSH
20270: LD_INT 1
20272: PPUSH
20273: LD_INT 4
20275: PUSH
20276: LD_INT 5
20278: PUSH
20279: LD_INT 6
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: LIST
20286: PUSH
20287: LD_OWVAR 67
20291: ARRAY
20292: PPUSH
20293: CALL_OW 380
// un := CreateHuman ;
20297: LD_ADDR_VAR 0 1
20301: PUSH
20302: CALL_OW 44
20306: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
20307: LD_VAR 0 1
20311: PPUSH
20312: LD_INT 78
20314: PPUSH
20315: LD_INT 2
20317: PPUSH
20318: LD_INT 4
20320: PPUSH
20321: LD_INT 0
20323: PPUSH
20324: CALL_OW 50
// tmp := tmp ^ un ;
20328: LD_ADDR_VAR 0 2
20332: PUSH
20333: LD_VAR 0 2
20337: PUSH
20338: LD_VAR 0 1
20342: ADD
20343: ST_TO_ADDR
// end ;
20344: GO 20264
20346: POP
20347: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
20348: LD_VAR 0 2
20352: PPUSH
20353: LD_INT 49
20355: PPUSH
20356: LD_INT 3
20358: PPUSH
20359: CALL_OW 111
// wait ( 0 0$2 ) ;
20363: LD_INT 70
20365: PPUSH
20366: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
20370: LD_VAR 0 4
20374: PPUSH
20375: LD_INT 49
20377: PPUSH
20378: LD_INT 3
20380: PPUSH
20381: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
20385: LD_VAR 0 4
20389: PPUSH
20390: LD_INT 4
20392: PPUSH
20393: CALL_OW 227
// wait ( 0 0$10 ) ;
20397: LD_INT 350
20399: PPUSH
20400: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20404: LD_INT 35
20406: PPUSH
20407: CALL_OW 67
// for i in tmp do
20411: LD_ADDR_VAR 0 3
20415: PUSH
20416: LD_VAR 0 2
20420: PUSH
20421: FOR_IN
20422: IFFALSE 20502
// if not IsOk ( i ) then
20424: LD_VAR 0 3
20428: PPUSH
20429: CALL_OW 302
20433: NOT
20434: IFFALSE 20454
// tmp := tmp diff i else
20436: LD_ADDR_VAR 0 2
20440: PUSH
20441: LD_VAR 0 2
20445: PUSH
20446: LD_VAR 0 3
20450: DIFF
20451: ST_TO_ADDR
20452: GO 20500
// if not HasTask ( i ) then
20454: LD_VAR 0 3
20458: PPUSH
20459: CALL_OW 314
20463: NOT
20464: IFFALSE 20500
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
20466: LD_VAR 0 3
20470: PPUSH
20471: LD_INT 22
20473: PUSH
20474: LD_INT 1
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PPUSH
20481: CALL_OW 69
20485: PPUSH
20486: LD_VAR 0 3
20490: PPUSH
20491: CALL_OW 74
20495: PPUSH
20496: CALL_OW 115
20500: GO 20421
20502: POP
20503: POP
// until not tmp ;
20504: LD_VAR 0 2
20508: NOT
20509: IFFALSE 20404
// end ; end_of_file
20511: PPOPN 4
20513: END
// every 0 0$1 trigger startTimer = 1 do
20514: LD_EXP 30
20518: PUSH
20519: LD_INT 1
20521: EQUAL
20522: IFFALSE 20652
20524: GO 20526
20526: DISABLE
// begin enable ;
20527: ENABLE
// if timerStatus = 1 then
20528: LD_EXP 29
20532: PUSH
20533: LD_INT 1
20535: EQUAL
20536: IFFALSE 20569
// begin timeToSupport = timeToSupport - 0 0$01 ;
20538: LD_ADDR_EXP 28
20542: PUSH
20543: LD_EXP 28
20547: PUSH
20548: LD_INT 35
20550: MINUS
20551: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
20552: LD_ADDR_OWVAR 47
20556: PUSH
20557: LD_STRING #Am04-1
20559: PUSH
20560: LD_EXP 28
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: ST_TO_ADDR
// end ; if timerStatus = 2 then
20569: LD_EXP 29
20573: PUSH
20574: LD_INT 2
20576: EQUAL
20577: IFFALSE 20610
// begin timeToSupport = timeToSupport - 0 0$01 ;
20579: LD_ADDR_EXP 28
20583: PUSH
20584: LD_EXP 28
20588: PUSH
20589: LD_INT 35
20591: MINUS
20592: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
20593: LD_ADDR_OWVAR 47
20597: PUSH
20598: LD_STRING #Am04-2
20600: PUSH
20601: LD_EXP 28
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: ST_TO_ADDR
// end ; if timerStatus = 3 then
20610: LD_EXP 29
20614: PUSH
20615: LD_INT 3
20617: EQUAL
20618: IFFALSE 20634
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
20620: LD_ADDR_EXP 27
20624: PUSH
20625: LD_EXP 27
20629: PUSH
20630: LD_INT 35
20632: MINUS
20633: ST_TO_ADDR
// end ; if timerStatus = 4 then
20634: LD_EXP 29
20638: PUSH
20639: LD_INT 4
20641: EQUAL
20642: IFFALSE 20652
// begin display_strings =  ;
20644: LD_ADDR_OWVAR 47
20648: PUSH
20649: LD_STRING 
20651: ST_TO_ADDR
// end ; end ; end_of_file
20652: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
20653: LD_INT 4
20655: PPUSH
20656: CALL_OW 301
20660: IFFALSE 20672
20662: GO 20664
20664: DISABLE
// YouLost ( Base ) ; end_of_file
20665: LD_STRING Base
20667: PPUSH
20668: CALL_OW 104
20672: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , tmp , p ;
20673: LD_EXP 15
20677: PPUSH
20678: CALL_OW 301
20682: PUSH
20683: LD_INT 22
20685: PUSH
20686: LD_INT 3
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 21
20695: PUSH
20696: LD_INT 1
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PPUSH
20707: CALL_OW 69
20711: PUSH
20712: LD_INT 14
20714: PUSH
20715: LD_INT 13
20717: PUSH
20718: LD_INT 12
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: LIST
20725: PUSH
20726: LD_OWVAR 67
20730: ARRAY
20731: LESS
20732: AND
20733: IFFALSE 21319
20735: GO 20737
20737: DISABLE
20738: LD_INT 0
20740: PPUSH
20741: PPUSH
20742: PPUSH
// begin AIEnable = 0 ;
20743: LD_ADDR_EXP 37
20747: PUSH
20748: LD_INT 0
20750: ST_TO_ADDR
// escapeAvalaible = 1 ;
20751: LD_ADDR_EXP 40
20755: PUSH
20756: LD_INT 1
20758: ST_TO_ADDR
// Video ( true ) ;
20759: LD_INT 1
20761: PPUSH
20762: CALL 73043 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
20766: LD_INT 3
20768: PPUSH
20769: LD_INT 1
20771: PPUSH
20772: LD_INT 1
20774: PPUSH
20775: LD_INT 0
20777: PPUSH
20778: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
20782: LD_INT 6
20784: PPUSH
20785: LD_INT 1
20787: PPUSH
20788: LD_INT 1
20790: PPUSH
20791: LD_INT 0
20793: PPUSH
20794: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
20798: LD_INT 5
20800: PPUSH
20801: LD_INT 1
20803: PPUSH
20804: LD_INT 1
20806: PPUSH
20807: LD_INT 0
20809: PPUSH
20810: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
20814: LD_INT 3
20816: PPUSH
20817: LD_INT 1
20819: PPUSH
20820: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
20824: LD_INT 97
20826: PPUSH
20827: LD_INT 91
20829: PPUSH
20830: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
20834: LD_INT 22
20836: PUSH
20837: LD_INT 3
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 21
20846: PUSH
20847: LD_INT 1
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PPUSH
20858: CALL_OW 69
20862: PPUSH
20863: CALL_OW 121
// wait ( 0 0$01 ) ;
20867: LD_INT 35
20869: PPUSH
20870: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20874: LD_INT 22
20876: PUSH
20877: LD_INT 3
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 21
20886: PUSH
20887: LD_INT 1
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PPUSH
20898: CALL_OW 69
20902: PPUSH
20903: LD_INT 124
20905: PPUSH
20906: LD_INT 98
20908: PPUSH
20909: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
20913: LD_INT 22
20915: PUSH
20916: LD_INT 5
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 21
20925: PUSH
20926: LD_INT 1
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PPUSH
20937: CALL_OW 69
20941: PPUSH
20942: CALL_OW 121
// wait ( 0 0$01 ) ;
20946: LD_INT 35
20948: PPUSH
20949: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20953: LD_INT 22
20955: PUSH
20956: LD_INT 5
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 21
20965: PUSH
20966: LD_INT 1
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PPUSH
20977: CALL_OW 69
20981: PPUSH
20982: LD_INT 124
20984: PPUSH
20985: LD_INT 98
20987: PPUSH
20988: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
20992: LD_INT 22
20994: PUSH
20995: LD_INT 6
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 21
21004: PUSH
21005: LD_INT 1
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PPUSH
21016: CALL_OW 69
21020: PPUSH
21021: CALL_OW 121
// wait ( 0 0$01 ) ;
21025: LD_INT 35
21027: PPUSH
21028: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21032: LD_INT 22
21034: PUSH
21035: LD_INT 6
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 21
21044: PUSH
21045: LD_INT 1
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PPUSH
21056: CALL_OW 69
21060: PPUSH
21061: LD_INT 124
21063: PPUSH
21064: LD_INT 98
21066: PPUSH
21067: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
21071: LD_INT 22
21073: PUSH
21074: LD_INT 1
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 21
21083: PUSH
21084: LD_INT 1
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PPUSH
21095: CALL_OW 69
21099: PPUSH
21100: LD_INT 124
21102: PPUSH
21103: LD_INT 96
21105: PPUSH
21106: CALL_OW 114
// wait ( 0 0$1 ) ;
21110: LD_INT 35
21112: PPUSH
21113: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
21117: LD_INT 124
21119: PPUSH
21120: LD_INT 96
21122: PPUSH
21123: CALL_OW 84
// p := 0 0$0 ;
21127: LD_ADDR_VAR 0 3
21131: PUSH
21132: LD_INT 0
21134: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
21135: LD_ADDR_VAR 0 2
21139: PUSH
21140: LD_INT 2
21142: PUSH
21143: LD_INT 22
21145: PUSH
21146: LD_INT 3
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 22
21155: PUSH
21156: LD_INT 6
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 21
21170: PUSH
21171: LD_INT 1
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PPUSH
21182: CALL_OW 69
21186: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21187: LD_INT 35
21189: PPUSH
21190: CALL_OW 67
// p := p + 0 0$1 ;
21194: LD_ADDR_VAR 0 3
21198: PUSH
21199: LD_VAR 0 3
21203: PUSH
21204: LD_INT 35
21206: PLUS
21207: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
21208: LD_VAR 0 2
21212: PPUSH
21213: LD_INT 5
21215: PPUSH
21216: CALL_OW 113
// for i in tmp do
21220: LD_ADDR_VAR 0 1
21224: PUSH
21225: LD_VAR 0 2
21229: PUSH
21230: FOR_IN
21231: IFFALSE 21258
// if IsInArea ( tmp , RussianEscape ) then
21233: LD_VAR 0 2
21237: PPUSH
21238: LD_INT 5
21240: PPUSH
21241: CALL_OW 308
21245: IFFALSE 21256
// RemoveUnit ( i ) ;
21247: LD_VAR 0 1
21251: PPUSH
21252: CALL_OW 64
21256: GO 21230
21258: POP
21259: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
21260: LD_INT 23
21262: PUSH
21263: LD_INT 3
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 21
21272: PUSH
21273: LD_INT 1
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 24
21282: PUSH
21283: LD_INT 250
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: LIST
21294: PPUSH
21295: CALL_OW 69
21299: PUSH
21300: LD_INT 0
21302: EQUAL
21303: PUSH
21304: LD_VAR 0 3
21308: PUSH
21309: LD_INT 245
21311: GREATEREQUAL
21312: OR
21313: IFFALSE 21187
// FinishMission ;
21315: CALL 21322 0 0
// end ;
21319: PPOPN 3
21321: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
21322: LD_INT 0
21324: PPUSH
21325: PPUSH
21326: PPUSH
21327: PPUSH
21328: PPUSH
// if not vehicleProduceCounter then
21329: LD_EXP 42
21333: NOT
21334: IFFALSE 21343
// SetAchievement ( ACH_INFANTRY ) ;
21336: LD_STRING ACH_INFANTRY
21338: PPUSH
21339: CALL_OW 543
// if tick <= 20 20$00 then
21343: LD_OWVAR 1
21347: PUSH
21348: LD_INT 42000
21350: LESSEQUAL
21351: IFFALSE 21367
// begin wait ( 3 ) ;
21353: LD_INT 3
21355: PPUSH
21356: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
21360: LD_STRING ACH_ASPEED_4
21362: PPUSH
21363: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
21367: LD_INT 22
21369: PPUSH
21370: CALL 22011 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
21374: LD_INT 69
21376: PPUSH
21377: LD_INT 1
21379: PPUSH
21380: CALL_OW 321
21384: PPUSH
21385: LD_STRING GatlingInGamma
21387: PPUSH
21388: CALL_OW 39
// m1 := false ;
21392: LD_ADDR_VAR 0 3
21396: PUSH
21397: LD_INT 0
21399: ST_TO_ADDR
// m2 := false ;
21400: LD_ADDR_VAR 0 4
21404: PUSH
21405: LD_INT 0
21407: ST_TO_ADDR
// m3 := false ;
21408: LD_ADDR_VAR 0 5
21412: PUSH
21413: LD_INT 0
21415: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
21416: LD_EXP 34
21420: PUSH
21421: LD_INT 1
21423: EQUAL
21424: PUSH
21425: LD_EXP 35
21429: PUSH
21430: LD_INT 1
21432: EQUAL
21433: AND
21434: IFFALSE 21456
// begin AddMedal ( oil , 1 ) ;
21436: LD_STRING oil
21438: PPUSH
21439: LD_INT 1
21441: PPUSH
21442: CALL_OW 101
// m1 := true ;
21446: LD_ADDR_VAR 0 3
21450: PUSH
21451: LD_INT 1
21453: ST_TO_ADDR
// end else
21454: GO 21549
// begin if buildOil = 1 and buildPower = 0 then
21456: LD_EXP 34
21460: PUSH
21461: LD_INT 1
21463: EQUAL
21464: PUSH
21465: LD_EXP 35
21469: PUSH
21470: LD_INT 0
21472: EQUAL
21473: AND
21474: IFFALSE 21487
// AddMedal ( oil , - 1 ) ;
21476: LD_STRING oil
21478: PPUSH
21479: LD_INT 1
21481: NEG
21482: PPUSH
21483: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
21487: LD_EXP 34
21491: PUSH
21492: LD_INT 0
21494: EQUAL
21495: PUSH
21496: LD_EXP 35
21500: PUSH
21501: LD_INT 1
21503: EQUAL
21504: AND
21505: IFFALSE 21518
// AddMedal ( oil , - 2 ) ;
21507: LD_STRING oil
21509: PPUSH
21510: LD_INT 2
21512: NEG
21513: PPUSH
21514: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
21518: LD_EXP 34
21522: PUSH
21523: LD_INT 0
21525: EQUAL
21526: PUSH
21527: LD_EXP 35
21531: PUSH
21532: LD_INT 0
21534: EQUAL
21535: AND
21536: IFFALSE 21549
// AddMedal ( oil , - 3 ) ;
21538: LD_STRING oil
21540: PPUSH
21541: LD_INT 3
21543: NEG
21544: PPUSH
21545: CALL_OW 101
// end ; if lostCounter > 3 then
21549: LD_EXP 38
21553: PUSH
21554: LD_INT 3
21556: GREATER
21557: IFFALSE 21572
// AddMedal ( deaths , - 1 ) else
21559: LD_STRING deaths
21561: PPUSH
21562: LD_INT 1
21564: NEG
21565: PPUSH
21566: CALL_OW 101
21570: GO 21590
// begin AddMedal ( deaths , 1 ) ;
21572: LD_STRING deaths
21574: PPUSH
21575: LD_INT 1
21577: PPUSH
21578: CALL_OW 101
// m2 := true ;
21582: LD_ADDR_VAR 0 4
21586: PUSH
21587: LD_INT 1
21589: ST_TO_ADDR
// end ; if honor = 1 then
21590: LD_EXP 39
21594: PUSH
21595: LD_INT 1
21597: EQUAL
21598: IFFALSE 21620
// begin AddMedal ( honour , 1 ) ;
21600: LD_STRING honour
21602: PPUSH
21603: LD_INT 1
21605: PPUSH
21606: CALL_OW 101
// m3 := true ;
21610: LD_ADDR_VAR 0 5
21614: PUSH
21615: LD_INT 1
21617: ST_TO_ADDR
// end else
21618: GO 21631
// begin AddMedal ( honour , - 1 ) ;
21620: LD_STRING honour
21622: PPUSH
21623: LD_INT 1
21625: NEG
21626: PPUSH
21627: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
21631: LD_VAR 0 3
21635: PUSH
21636: LD_VAR 0 4
21640: AND
21641: PUSH
21642: LD_VAR 0 5
21646: AND
21647: PUSH
21648: LD_OWVAR 67
21652: PUSH
21653: LD_INT 3
21655: EQUAL
21656: AND
21657: IFFALSE 21669
// SetAchievementEX ( ACH_AMER , 4 ) ;
21659: LD_STRING ACH_AMER
21661: PPUSH
21662: LD_INT 4
21664: PPUSH
21665: CALL_OW 564
// GiveMedals ( Main ) ;
21669: LD_STRING Main
21671: PPUSH
21672: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
21676: LD_INT 22
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 23
21688: PUSH
21689: LD_INT 1
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 21
21698: PUSH
21699: LD_INT 1
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: LIST
21710: PPUSH
21711: CALL_OW 69
21715: PPUSH
21716: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21720: LD_EXP 1
21724: PPUSH
21725: LD_EXP 48
21729: PUSH
21730: LD_STRING JMM
21732: STR
21733: PPUSH
21734: CALL_OW 38
// if IsOK ( Bobby ) then
21738: LD_EXP 2
21742: PPUSH
21743: CALL_OW 302
21747: IFFALSE 21767
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21749: LD_EXP 2
21753: PPUSH
21754: LD_EXP 48
21758: PUSH
21759: LD_STRING Bobby
21761: STR
21762: PPUSH
21763: CALL_OW 38
// if IsOK ( Cyrus ) then
21767: LD_EXP 3
21771: PPUSH
21772: CALL_OW 302
21776: IFFALSE 21796
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21778: LD_EXP 3
21782: PPUSH
21783: LD_EXP 48
21787: PUSH
21788: LD_STRING Cyrus
21790: STR
21791: PPUSH
21792: CALL_OW 38
// if IsOK ( Lisa ) then
21796: LD_EXP 4
21800: PPUSH
21801: CALL_OW 302
21805: IFFALSE 21825
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21807: LD_EXP 4
21811: PPUSH
21812: LD_EXP 48
21816: PUSH
21817: LD_STRING Lisa
21819: STR
21820: PPUSH
21821: CALL_OW 38
// if IsOK ( Brown ) then
21825: LD_EXP 7
21829: PPUSH
21830: CALL_OW 302
21834: IFFALSE 21854
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
21836: LD_EXP 7
21840: PPUSH
21841: LD_EXP 48
21845: PUSH
21846: LD_STRING Brown
21848: STR
21849: PPUSH
21850: CALL_OW 38
// if not IsDead ( Donaldson ) then
21854: LD_EXP 13
21858: PPUSH
21859: CALL_OW 301
21863: NOT
21864: IFFALSE 21884
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21866: LD_EXP 13
21870: PPUSH
21871: LD_EXP 48
21875: PUSH
21876: LD_STRING Donaldson
21878: STR
21879: PPUSH
21880: CALL_OW 38
// if not IsDead ( Frank ) then
21884: LD_EXP 5
21888: PPUSH
21889: CALL_OW 301
21893: NOT
21894: IFFALSE 21914
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
21896: LD_EXP 5
21900: PPUSH
21901: LD_EXP 48
21905: PUSH
21906: LD_STRING Frank
21908: STR
21909: PPUSH
21910: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
21914: LD_INT 50
21916: PUSH
21917: EMPTY
21918: LIST
21919: PUSH
21920: LD_INT 22
21922: PUSH
21923: LD_INT 1
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 21
21932: PUSH
21933: LD_INT 1
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: LIST
21944: PPUSH
21945: CALL_OW 69
21949: PUSH
21950: LD_EXP 1
21954: PUSH
21955: LD_EXP 2
21959: PUSH
21960: LD_EXP 3
21964: PUSH
21965: LD_EXP 4
21969: PUSH
21970: LD_EXP 7
21974: PUSH
21975: LD_EXP 13
21979: PUSH
21980: LD_EXP 5
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: DIFF
21994: PPUSH
21995: LD_STRING 04_other_survivors
21997: PPUSH
21998: CALL_OW 38
// YouWin ;
22002: CALL_OW 103
// end ;
22006: LD_VAR 0 1
22010: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
22011: LD_INT 0
22013: PPUSH
22014: PPUSH
22015: PPUSH
22016: PPUSH
// gammaBase = [ ] ;
22017: LD_ADDR_VAR 0 4
22021: PUSH
22022: EMPTY
22023: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
22024: LD_ADDR_VAR 0 5
22028: PUSH
22029: LD_VAR 0 1
22033: PPUSH
22034: LD_INT 22
22036: PUSH
22037: LD_INT 1
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 21
22046: PUSH
22047: LD_INT 3
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PPUSH
22058: CALL_OW 70
22062: ST_TO_ADDR
// for i in buildings do
22063: LD_ADDR_VAR 0 3
22067: PUSH
22068: LD_VAR 0 5
22072: PUSH
22073: FOR_IN
22074: IFFALSE 22411
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
22076: LD_VAR 0 3
22080: PPUSH
22081: CALL_OW 266
22085: PUSH
22086: LD_INT 6
22088: PUSH
22089: LD_INT 7
22091: PUSH
22092: LD_INT 8
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: LIST
22099: IN
22100: IFFALSE 22214
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
22102: LD_ADDR_VAR 0 4
22106: PUSH
22107: LD_VAR 0 4
22111: PUSH
22112: LD_VAR 0 3
22116: PPUSH
22117: CALL_OW 266
22121: PUSH
22122: LD_VAR 0 3
22126: PPUSH
22127: CALL_OW 250
22131: PUSH
22132: LD_VAR 0 3
22136: PPUSH
22137: CALL_OW 251
22141: PUSH
22142: LD_VAR 0 3
22146: PPUSH
22147: CALL_OW 254
22151: PUSH
22152: LD_VAR 0 3
22156: PPUSH
22157: CALL_OW 267
22161: PUSH
22162: LD_VAR 0 3
22166: PPUSH
22167: CALL_OW 248
22171: PUSH
22172: LD_VAR 0 3
22176: PPUSH
22177: LD_INT 1
22179: PPUSH
22180: CALL_OW 268
22184: PUSH
22185: LD_VAR 0 3
22189: PPUSH
22190: LD_INT 2
22192: PPUSH
22193: CALL_OW 268
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: PUSH
22208: EMPTY
22209: LIST
22210: ADD
22211: ST_TO_ADDR
22212: GO 22409
// if GetBType ( i ) in [ b_bunker ] then
22214: LD_VAR 0 3
22218: PPUSH
22219: CALL_OW 266
22223: PUSH
22224: LD_INT 32
22226: PUSH
22227: EMPTY
22228: LIST
22229: IN
22230: IFFALSE 22327
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22232: LD_ADDR_VAR 0 4
22236: PUSH
22237: LD_VAR 0 4
22241: PUSH
22242: LD_VAR 0 3
22246: PPUSH
22247: CALL_OW 266
22251: PUSH
22252: LD_VAR 0 3
22256: PPUSH
22257: CALL_OW 250
22261: PUSH
22262: LD_VAR 0 3
22266: PPUSH
22267: CALL_OW 251
22271: PUSH
22272: LD_VAR 0 3
22276: PPUSH
22277: CALL_OW 254
22281: PUSH
22282: LD_VAR 0 3
22286: PPUSH
22287: CALL_OW 267
22291: PUSH
22292: LD_VAR 0 3
22296: PPUSH
22297: CALL_OW 248
22301: PUSH
22302: LD_VAR 0 3
22306: PPUSH
22307: CALL_OW 269
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: PUSH
22321: EMPTY
22322: LIST
22323: ADD
22324: ST_TO_ADDR
22325: GO 22409
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
22327: LD_ADDR_VAR 0 4
22331: PUSH
22332: LD_VAR 0 4
22336: PUSH
22337: LD_VAR 0 3
22341: PPUSH
22342: CALL_OW 266
22346: PUSH
22347: LD_VAR 0 3
22351: PPUSH
22352: CALL_OW 250
22356: PUSH
22357: LD_VAR 0 3
22361: PPUSH
22362: CALL_OW 251
22366: PUSH
22367: LD_VAR 0 3
22371: PPUSH
22372: CALL_OW 254
22376: PUSH
22377: LD_VAR 0 3
22381: PPUSH
22382: CALL_OW 267
22386: PUSH
22387: LD_VAR 0 3
22391: PPUSH
22392: CALL_OW 248
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: PUSH
22405: EMPTY
22406: LIST
22407: ADD
22408: ST_TO_ADDR
// end ;
22409: GO 22073
22411: POP
22412: POP
// SaveVariable ( gammaBase , GammaBase ) ;
22413: LD_VAR 0 4
22417: PPUSH
22418: LD_STRING GammaBase
22420: PPUSH
22421: CALL_OW 39
// end ; end_of_file
22425: LD_VAR 0 2
22429: RET
// every 1 1$15 do
22430: GO 22432
22432: DISABLE
// begin if supply <= 13 and supply > 7 then
22433: LD_EXP 36
22437: PUSH
22438: LD_INT 13
22440: LESSEQUAL
22441: PUSH
22442: LD_EXP 36
22446: PUSH
22447: LD_INT 7
22449: GREATER
22450: AND
22451: IFFALSE 22474
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
22453: LD_INT 3
22455: PPUSH
22456: LD_INT 5
22458: PPUSH
22459: CALL_OW 12
22463: PPUSH
22464: LD_INT 18
22466: PPUSH
22467: LD_INT 1
22469: PPUSH
22470: CALL_OW 55
// if supply <= 7 and supply > 4 then
22474: LD_EXP 36
22478: PUSH
22479: LD_INT 7
22481: LESSEQUAL
22482: PUSH
22483: LD_EXP 36
22487: PUSH
22488: LD_INT 4
22490: GREATER
22491: AND
22492: IFFALSE 22515
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
22494: LD_INT 3
22496: PPUSH
22497: LD_INT 5
22499: PPUSH
22500: CALL_OW 12
22504: PPUSH
22505: LD_INT 19
22507: PPUSH
22508: LD_INT 1
22510: PPUSH
22511: CALL_OW 55
// if supply <= 4 and supply > 0 then
22515: LD_EXP 36
22519: PUSH
22520: LD_INT 4
22522: LESSEQUAL
22523: PUSH
22524: LD_EXP 36
22528: PUSH
22529: LD_INT 0
22531: GREATER
22532: AND
22533: IFFALSE 22556
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
22535: LD_INT 3
22537: PPUSH
22538: LD_INT 5
22540: PPUSH
22541: CALL_OW 12
22545: PPUSH
22546: LD_INT 20
22548: PPUSH
22549: LD_INT 1
22551: PPUSH
22552: CALL_OW 55
// if supply > 0 then
22556: LD_EXP 36
22560: PUSH
22561: LD_INT 0
22563: GREATER
22564: IFFALSE 22581
// begin supply = supply - 1 ;
22566: LD_ADDR_EXP 36
22570: PUSH
22571: LD_EXP 36
22575: PUSH
22576: LD_INT 1
22578: MINUS
22579: ST_TO_ADDR
// enable ;
22580: ENABLE
// end ; end ; end_of_file
22581: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
22582: LD_INT 0
22584: PPUSH
// ar_crane := 88 ;
22585: LD_ADDR_EXP 58
22589: PUSH
22590: LD_INT 88
22592: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22593: LD_ADDR_EXP 53
22597: PUSH
22598: LD_INT 89
22600: ST_TO_ADDR
// us_hack := 99 ;
22601: LD_ADDR_EXP 54
22605: PUSH
22606: LD_INT 99
22608: ST_TO_ADDR
// us_artillery := 97 ;
22609: LD_ADDR_EXP 55
22613: PUSH
22614: LD_INT 97
22616: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22617: LD_ADDR_EXP 56
22621: PUSH
22622: LD_INT 91
22624: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
22625: LD_ADDR_EXP 57
22629: PUSH
22630: LD_INT 92
22632: ST_TO_ADDR
// ru_radar := 98 ;
22633: LD_ADDR_EXP 52
22637: PUSH
22638: LD_INT 98
22640: ST_TO_ADDR
// tech_Artillery := 80 ;
22641: LD_ADDR_EXP 59
22645: PUSH
22646: LD_INT 80
22648: ST_TO_ADDR
// tech_RadMat := 81 ;
22649: LD_ADDR_EXP 60
22653: PUSH
22654: LD_INT 81
22656: ST_TO_ADDR
// tech_BasicTools := 82 ;
22657: LD_ADDR_EXP 61
22661: PUSH
22662: LD_INT 82
22664: ST_TO_ADDR
// tech_Cargo := 83 ;
22665: LD_ADDR_EXP 62
22669: PUSH
22670: LD_INT 83
22672: ST_TO_ADDR
// tech_Track := 84 ;
22673: LD_ADDR_EXP 63
22677: PUSH
22678: LD_INT 84
22680: ST_TO_ADDR
// tech_Crane := 85 ;
22681: LD_ADDR_EXP 64
22685: PUSH
22686: LD_INT 85
22688: ST_TO_ADDR
// tech_Bulldozer := 86 ;
22689: LD_ADDR_EXP 65
22693: PUSH
22694: LD_INT 86
22696: ST_TO_ADDR
// tech_Hovercraft := 87 ;
22697: LD_ADDR_EXP 66
22701: PUSH
22702: LD_INT 87
22704: ST_TO_ADDR
// end ;
22705: LD_VAR 0 1
22709: RET
// every 1 do
22710: GO 22712
22712: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
22713: CALL 22582 0 0
22717: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ;
22718: LD_VAR 0 1
22722: PPUSH
22723: LD_VAR 0 2
22727: PPUSH
22728: LD_VAR 0 3
22732: PPUSH
22733: LD_VAR 0 4
22737: PPUSH
22738: LD_VAR 0 5
22742: PPUSH
22743: CALL 35522 0 5
// end ;
22747: PPOPN 5
22749: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
22750: LD_VAR 0 2
22754: PUSH
22755: LD_INT 100
22757: EQUAL
22758: IFFALSE 23707
// begin if not StreamModeActive then
22760: LD_EXP 67
22764: NOT
22765: IFFALSE 22775
// StreamModeActive := true ;
22767: LD_ADDR_EXP 67
22771: PUSH
22772: LD_INT 1
22774: ST_TO_ADDR
// if p3 = 0 then
22775: LD_VAR 0 3
22779: PUSH
22780: LD_INT 0
22782: EQUAL
22783: IFFALSE 22789
// InitStreamMode ;
22785: CALL 23940 0 0
// if p3 = 1 then
22789: LD_VAR 0 3
22793: PUSH
22794: LD_INT 1
22796: EQUAL
22797: IFFALSE 22807
// sRocket := true ;
22799: LD_ADDR_EXP 72
22803: PUSH
22804: LD_INT 1
22806: ST_TO_ADDR
// if p3 = 2 then
22807: LD_VAR 0 3
22811: PUSH
22812: LD_INT 2
22814: EQUAL
22815: IFFALSE 22825
// sSpeed := true ;
22817: LD_ADDR_EXP 71
22821: PUSH
22822: LD_INT 1
22824: ST_TO_ADDR
// if p3 = 3 then
22825: LD_VAR 0 3
22829: PUSH
22830: LD_INT 3
22832: EQUAL
22833: IFFALSE 22843
// sEngine := true ;
22835: LD_ADDR_EXP 73
22839: PUSH
22840: LD_INT 1
22842: ST_TO_ADDR
// if p3 = 4 then
22843: LD_VAR 0 3
22847: PUSH
22848: LD_INT 4
22850: EQUAL
22851: IFFALSE 22861
// sSpec := true ;
22853: LD_ADDR_EXP 70
22857: PUSH
22858: LD_INT 1
22860: ST_TO_ADDR
// if p3 = 5 then
22861: LD_VAR 0 3
22865: PUSH
22866: LD_INT 5
22868: EQUAL
22869: IFFALSE 22879
// sLevel := true ;
22871: LD_ADDR_EXP 74
22875: PUSH
22876: LD_INT 1
22878: ST_TO_ADDR
// if p3 = 6 then
22879: LD_VAR 0 3
22883: PUSH
22884: LD_INT 6
22886: EQUAL
22887: IFFALSE 22897
// sArmoury := true ;
22889: LD_ADDR_EXP 75
22893: PUSH
22894: LD_INT 1
22896: ST_TO_ADDR
// if p3 = 7 then
22897: LD_VAR 0 3
22901: PUSH
22902: LD_INT 7
22904: EQUAL
22905: IFFALSE 22915
// sRadar := true ;
22907: LD_ADDR_EXP 76
22911: PUSH
22912: LD_INT 1
22914: ST_TO_ADDR
// if p3 = 8 then
22915: LD_VAR 0 3
22919: PUSH
22920: LD_INT 8
22922: EQUAL
22923: IFFALSE 22933
// sBunker := true ;
22925: LD_ADDR_EXP 77
22929: PUSH
22930: LD_INT 1
22932: ST_TO_ADDR
// if p3 = 9 then
22933: LD_VAR 0 3
22937: PUSH
22938: LD_INT 9
22940: EQUAL
22941: IFFALSE 22951
// sHack := true ;
22943: LD_ADDR_EXP 78
22947: PUSH
22948: LD_INT 1
22950: ST_TO_ADDR
// if p3 = 10 then
22951: LD_VAR 0 3
22955: PUSH
22956: LD_INT 10
22958: EQUAL
22959: IFFALSE 22969
// sFire := true ;
22961: LD_ADDR_EXP 79
22965: PUSH
22966: LD_INT 1
22968: ST_TO_ADDR
// if p3 = 11 then
22969: LD_VAR 0 3
22973: PUSH
22974: LD_INT 11
22976: EQUAL
22977: IFFALSE 22987
// sRefresh := true ;
22979: LD_ADDR_EXP 80
22983: PUSH
22984: LD_INT 1
22986: ST_TO_ADDR
// if p3 = 12 then
22987: LD_VAR 0 3
22991: PUSH
22992: LD_INT 12
22994: EQUAL
22995: IFFALSE 23005
// sExp := true ;
22997: LD_ADDR_EXP 81
23001: PUSH
23002: LD_INT 1
23004: ST_TO_ADDR
// if p3 = 13 then
23005: LD_VAR 0 3
23009: PUSH
23010: LD_INT 13
23012: EQUAL
23013: IFFALSE 23023
// sDepot := true ;
23015: LD_ADDR_EXP 82
23019: PUSH
23020: LD_INT 1
23022: ST_TO_ADDR
// if p3 = 14 then
23023: LD_VAR 0 3
23027: PUSH
23028: LD_INT 14
23030: EQUAL
23031: IFFALSE 23041
// sFlag := true ;
23033: LD_ADDR_EXP 83
23037: PUSH
23038: LD_INT 1
23040: ST_TO_ADDR
// if p3 = 15 then
23041: LD_VAR 0 3
23045: PUSH
23046: LD_INT 15
23048: EQUAL
23049: IFFALSE 23059
// sKamikadze := true ;
23051: LD_ADDR_EXP 91
23055: PUSH
23056: LD_INT 1
23058: ST_TO_ADDR
// if p3 = 16 then
23059: LD_VAR 0 3
23063: PUSH
23064: LD_INT 16
23066: EQUAL
23067: IFFALSE 23077
// sTroll := true ;
23069: LD_ADDR_EXP 92
23073: PUSH
23074: LD_INT 1
23076: ST_TO_ADDR
// if p3 = 17 then
23077: LD_VAR 0 3
23081: PUSH
23082: LD_INT 17
23084: EQUAL
23085: IFFALSE 23095
// sSlow := true ;
23087: LD_ADDR_EXP 93
23091: PUSH
23092: LD_INT 1
23094: ST_TO_ADDR
// if p3 = 18 then
23095: LD_VAR 0 3
23099: PUSH
23100: LD_INT 18
23102: EQUAL
23103: IFFALSE 23113
// sLack := true ;
23105: LD_ADDR_EXP 94
23109: PUSH
23110: LD_INT 1
23112: ST_TO_ADDR
// if p3 = 19 then
23113: LD_VAR 0 3
23117: PUSH
23118: LD_INT 19
23120: EQUAL
23121: IFFALSE 23131
// sTank := true ;
23123: LD_ADDR_EXP 96
23127: PUSH
23128: LD_INT 1
23130: ST_TO_ADDR
// if p3 = 20 then
23131: LD_VAR 0 3
23135: PUSH
23136: LD_INT 20
23138: EQUAL
23139: IFFALSE 23149
// sRemote := true ;
23141: LD_ADDR_EXP 97
23145: PUSH
23146: LD_INT 1
23148: ST_TO_ADDR
// if p3 = 21 then
23149: LD_VAR 0 3
23153: PUSH
23154: LD_INT 21
23156: EQUAL
23157: IFFALSE 23167
// sPowell := true ;
23159: LD_ADDR_EXP 98
23163: PUSH
23164: LD_INT 1
23166: ST_TO_ADDR
// if p3 = 22 then
23167: LD_VAR 0 3
23171: PUSH
23172: LD_INT 22
23174: EQUAL
23175: IFFALSE 23185
// sTeleport := true ;
23177: LD_ADDR_EXP 101
23181: PUSH
23182: LD_INT 1
23184: ST_TO_ADDR
// if p3 = 23 then
23185: LD_VAR 0 3
23189: PUSH
23190: LD_INT 23
23192: EQUAL
23193: IFFALSE 23203
// sOilTower := true ;
23195: LD_ADDR_EXP 103
23199: PUSH
23200: LD_INT 1
23202: ST_TO_ADDR
// if p3 = 24 then
23203: LD_VAR 0 3
23207: PUSH
23208: LD_INT 24
23210: EQUAL
23211: IFFALSE 23221
// sShovel := true ;
23213: LD_ADDR_EXP 104
23217: PUSH
23218: LD_INT 1
23220: ST_TO_ADDR
// if p3 = 25 then
23221: LD_VAR 0 3
23225: PUSH
23226: LD_INT 25
23228: EQUAL
23229: IFFALSE 23239
// sSheik := true ;
23231: LD_ADDR_EXP 105
23235: PUSH
23236: LD_INT 1
23238: ST_TO_ADDR
// if p3 = 26 then
23239: LD_VAR 0 3
23243: PUSH
23244: LD_INT 26
23246: EQUAL
23247: IFFALSE 23257
// sEarthquake := true ;
23249: LD_ADDR_EXP 107
23253: PUSH
23254: LD_INT 1
23256: ST_TO_ADDR
// if p3 = 27 then
23257: LD_VAR 0 3
23261: PUSH
23262: LD_INT 27
23264: EQUAL
23265: IFFALSE 23275
// sAI := true ;
23267: LD_ADDR_EXP 108
23271: PUSH
23272: LD_INT 1
23274: ST_TO_ADDR
// if p3 = 28 then
23275: LD_VAR 0 3
23279: PUSH
23280: LD_INT 28
23282: EQUAL
23283: IFFALSE 23293
// sCargo := true ;
23285: LD_ADDR_EXP 111
23289: PUSH
23290: LD_INT 1
23292: ST_TO_ADDR
// if p3 = 29 then
23293: LD_VAR 0 3
23297: PUSH
23298: LD_INT 29
23300: EQUAL
23301: IFFALSE 23311
// sDLaser := true ;
23303: LD_ADDR_EXP 112
23307: PUSH
23308: LD_INT 1
23310: ST_TO_ADDR
// if p3 = 30 then
23311: LD_VAR 0 3
23315: PUSH
23316: LD_INT 30
23318: EQUAL
23319: IFFALSE 23329
// sExchange := true ;
23321: LD_ADDR_EXP 113
23325: PUSH
23326: LD_INT 1
23328: ST_TO_ADDR
// if p3 = 31 then
23329: LD_VAR 0 3
23333: PUSH
23334: LD_INT 31
23336: EQUAL
23337: IFFALSE 23347
// sFac := true ;
23339: LD_ADDR_EXP 114
23343: PUSH
23344: LD_INT 1
23346: ST_TO_ADDR
// if p3 = 32 then
23347: LD_VAR 0 3
23351: PUSH
23352: LD_INT 32
23354: EQUAL
23355: IFFALSE 23365
// sPower := true ;
23357: LD_ADDR_EXP 115
23361: PUSH
23362: LD_INT 1
23364: ST_TO_ADDR
// if p3 = 33 then
23365: LD_VAR 0 3
23369: PUSH
23370: LD_INT 33
23372: EQUAL
23373: IFFALSE 23383
// sRandom := true ;
23375: LD_ADDR_EXP 116
23379: PUSH
23380: LD_INT 1
23382: ST_TO_ADDR
// if p3 = 34 then
23383: LD_VAR 0 3
23387: PUSH
23388: LD_INT 34
23390: EQUAL
23391: IFFALSE 23401
// sShield := true ;
23393: LD_ADDR_EXP 117
23397: PUSH
23398: LD_INT 1
23400: ST_TO_ADDR
// if p3 = 35 then
23401: LD_VAR 0 3
23405: PUSH
23406: LD_INT 35
23408: EQUAL
23409: IFFALSE 23419
// sTime := true ;
23411: LD_ADDR_EXP 118
23415: PUSH
23416: LD_INT 1
23418: ST_TO_ADDR
// if p3 = 36 then
23419: LD_VAR 0 3
23423: PUSH
23424: LD_INT 36
23426: EQUAL
23427: IFFALSE 23437
// sTools := true ;
23429: LD_ADDR_EXP 119
23433: PUSH
23434: LD_INT 1
23436: ST_TO_ADDR
// if p3 = 101 then
23437: LD_VAR 0 3
23441: PUSH
23442: LD_INT 101
23444: EQUAL
23445: IFFALSE 23455
// sSold := true ;
23447: LD_ADDR_EXP 84
23451: PUSH
23452: LD_INT 1
23454: ST_TO_ADDR
// if p3 = 102 then
23455: LD_VAR 0 3
23459: PUSH
23460: LD_INT 102
23462: EQUAL
23463: IFFALSE 23473
// sDiff := true ;
23465: LD_ADDR_EXP 85
23469: PUSH
23470: LD_INT 1
23472: ST_TO_ADDR
// if p3 = 103 then
23473: LD_VAR 0 3
23477: PUSH
23478: LD_INT 103
23480: EQUAL
23481: IFFALSE 23491
// sFog := true ;
23483: LD_ADDR_EXP 88
23487: PUSH
23488: LD_INT 1
23490: ST_TO_ADDR
// if p3 = 104 then
23491: LD_VAR 0 3
23495: PUSH
23496: LD_INT 104
23498: EQUAL
23499: IFFALSE 23509
// sReset := true ;
23501: LD_ADDR_EXP 89
23505: PUSH
23506: LD_INT 1
23508: ST_TO_ADDR
// if p3 = 105 then
23509: LD_VAR 0 3
23513: PUSH
23514: LD_INT 105
23516: EQUAL
23517: IFFALSE 23527
// sSun := true ;
23519: LD_ADDR_EXP 90
23523: PUSH
23524: LD_INT 1
23526: ST_TO_ADDR
// if p3 = 106 then
23527: LD_VAR 0 3
23531: PUSH
23532: LD_INT 106
23534: EQUAL
23535: IFFALSE 23545
// sTiger := true ;
23537: LD_ADDR_EXP 86
23541: PUSH
23542: LD_INT 1
23544: ST_TO_ADDR
// if p3 = 107 then
23545: LD_VAR 0 3
23549: PUSH
23550: LD_INT 107
23552: EQUAL
23553: IFFALSE 23563
// sBomb := true ;
23555: LD_ADDR_EXP 87
23559: PUSH
23560: LD_INT 1
23562: ST_TO_ADDR
// if p3 = 108 then
23563: LD_VAR 0 3
23567: PUSH
23568: LD_INT 108
23570: EQUAL
23571: IFFALSE 23581
// sWound := true ;
23573: LD_ADDR_EXP 95
23577: PUSH
23578: LD_INT 1
23580: ST_TO_ADDR
// if p3 = 109 then
23581: LD_VAR 0 3
23585: PUSH
23586: LD_INT 109
23588: EQUAL
23589: IFFALSE 23599
// sBetray := true ;
23591: LD_ADDR_EXP 99
23595: PUSH
23596: LD_INT 1
23598: ST_TO_ADDR
// if p3 = 110 then
23599: LD_VAR 0 3
23603: PUSH
23604: LD_INT 110
23606: EQUAL
23607: IFFALSE 23617
// sContamin := true ;
23609: LD_ADDR_EXP 100
23613: PUSH
23614: LD_INT 1
23616: ST_TO_ADDR
// if p3 = 111 then
23617: LD_VAR 0 3
23621: PUSH
23622: LD_INT 111
23624: EQUAL
23625: IFFALSE 23635
// sOil := true ;
23627: LD_ADDR_EXP 102
23631: PUSH
23632: LD_INT 1
23634: ST_TO_ADDR
// if p3 = 112 then
23635: LD_VAR 0 3
23639: PUSH
23640: LD_INT 112
23642: EQUAL
23643: IFFALSE 23653
// sStu := true ;
23645: LD_ADDR_EXP 106
23649: PUSH
23650: LD_INT 1
23652: ST_TO_ADDR
// if p3 = 113 then
23653: LD_VAR 0 3
23657: PUSH
23658: LD_INT 113
23660: EQUAL
23661: IFFALSE 23671
// sBazooka := true ;
23663: LD_ADDR_EXP 109
23667: PUSH
23668: LD_INT 1
23670: ST_TO_ADDR
// if p3 = 114 then
23671: LD_VAR 0 3
23675: PUSH
23676: LD_INT 114
23678: EQUAL
23679: IFFALSE 23689
// sMortar := true ;
23681: LD_ADDR_EXP 110
23685: PUSH
23686: LD_INT 1
23688: ST_TO_ADDR
// if p3 = 115 then
23689: LD_VAR 0 3
23693: PUSH
23694: LD_INT 115
23696: EQUAL
23697: IFFALSE 23707
// sRanger := true ;
23699: LD_ADDR_EXP 120
23703: PUSH
23704: LD_INT 1
23706: ST_TO_ADDR
// end ; if p2 = 101 then
23707: LD_VAR 0 2
23711: PUSH
23712: LD_INT 101
23714: EQUAL
23715: IFFALSE 23918
// begin case p3 of 1 :
23717: LD_VAR 0 3
23721: PUSH
23722: LD_INT 1
23724: DOUBLE
23725: EQUAL
23726: IFTRUE 23730
23728: GO 23737
23730: POP
// hHackUnlimitedResources ; 2 :
23731: CALL 34012 0 0
23735: GO 23918
23737: LD_INT 2
23739: DOUBLE
23740: EQUAL
23741: IFTRUE 23745
23743: GO 23752
23745: POP
// hHackSetLevel10 ; 3 :
23746: CALL 34145 0 0
23750: GO 23918
23752: LD_INT 3
23754: DOUBLE
23755: EQUAL
23756: IFTRUE 23760
23758: GO 23767
23760: POP
// hHackSetLevel10YourUnits ; 4 :
23761: CALL 34230 0 0
23765: GO 23918
23767: LD_INT 4
23769: DOUBLE
23770: EQUAL
23771: IFTRUE 23775
23773: GO 23797
23775: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
23776: LD_VAR 0 4
23780: PPUSH
23781: LD_VAR 0 5
23785: PPUSH
23786: LD_VAR 0 6
23790: PPUSH
23791: CALL 34320 0 3
23795: GO 23918
23797: LD_INT 5
23799: DOUBLE
23800: EQUAL
23801: IFTRUE 23805
23803: GO 23812
23805: POP
// hHackSpawnVehicle ; 6 :
23806: CALL 34381 0 0
23810: GO 23918
23812: LD_INT 6
23814: DOUBLE
23815: EQUAL
23816: IFTRUE 23820
23818: GO 23827
23820: POP
// hHackInvincible ; 7 :
23821: CALL 34927 0 0
23825: GO 23918
23827: LD_INT 7
23829: DOUBLE
23830: EQUAL
23831: IFTRUE 23835
23833: GO 23842
23835: POP
// hHackInvisible ; 8 :
23836: CALL 35038 0 0
23840: GO 23918
23842: LD_INT 8
23844: DOUBLE
23845: EQUAL
23846: IFTRUE 23850
23848: GO 23857
23850: POP
// hHackChangeYourSide ; 9 :
23851: CALL 35095 0 0
23855: GO 23918
23857: LD_INT 9
23859: DOUBLE
23860: EQUAL
23861: IFTRUE 23865
23863: GO 23872
23865: POP
// hHackChangeUnitSide ; 10 :
23866: CALL 35137 0 0
23870: GO 23918
23872: LD_INT 10
23874: DOUBLE
23875: EQUAL
23876: IFTRUE 23880
23878: GO 23887
23880: POP
// hHackFog ; 11 :
23881: CALL 35238 0 0
23885: GO 23918
23887: LD_INT 11
23889: DOUBLE
23890: EQUAL
23891: IFTRUE 23895
23893: GO 23902
23895: POP
// hHackApeman ; 12 :
23896: CALL 35253 0 0
23900: GO 23918
23902: LD_INT 12
23904: DOUBLE
23905: EQUAL
23906: IFTRUE 23910
23908: GO 23917
23910: POP
// hHackBoom ; end ;
23911: CALL 35338 0 0
23915: GO 23918
23917: POP
// end ; end ;
23918: PPOPN 6
23920: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
23921: GO 23923
23923: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
23924: LD_STRING initStreamRollete();
23926: PPUSH
23927: CALL_OW 559
// InitStreamMode ;
23931: CALL 23940 0 0
// DefineStreamItems ( ) ;
23935: CALL 24380 0 0
// end ;
23939: END
// function InitStreamMode ; begin
23940: LD_INT 0
23942: PPUSH
// streamModeActive := false ;
23943: LD_ADDR_EXP 67
23947: PUSH
23948: LD_INT 0
23950: ST_TO_ADDR
// normalCounter := 36 ;
23951: LD_ADDR_EXP 68
23955: PUSH
23956: LD_INT 36
23958: ST_TO_ADDR
// hardcoreCounter := 16 ;
23959: LD_ADDR_EXP 69
23963: PUSH
23964: LD_INT 16
23966: ST_TO_ADDR
// sRocket := false ;
23967: LD_ADDR_EXP 72
23971: PUSH
23972: LD_INT 0
23974: ST_TO_ADDR
// sSpeed := false ;
23975: LD_ADDR_EXP 71
23979: PUSH
23980: LD_INT 0
23982: ST_TO_ADDR
// sEngine := false ;
23983: LD_ADDR_EXP 73
23987: PUSH
23988: LD_INT 0
23990: ST_TO_ADDR
// sSpec := false ;
23991: LD_ADDR_EXP 70
23995: PUSH
23996: LD_INT 0
23998: ST_TO_ADDR
// sLevel := false ;
23999: LD_ADDR_EXP 74
24003: PUSH
24004: LD_INT 0
24006: ST_TO_ADDR
// sArmoury := false ;
24007: LD_ADDR_EXP 75
24011: PUSH
24012: LD_INT 0
24014: ST_TO_ADDR
// sRadar := false ;
24015: LD_ADDR_EXP 76
24019: PUSH
24020: LD_INT 0
24022: ST_TO_ADDR
// sBunker := false ;
24023: LD_ADDR_EXP 77
24027: PUSH
24028: LD_INT 0
24030: ST_TO_ADDR
// sHack := false ;
24031: LD_ADDR_EXP 78
24035: PUSH
24036: LD_INT 0
24038: ST_TO_ADDR
// sFire := false ;
24039: LD_ADDR_EXP 79
24043: PUSH
24044: LD_INT 0
24046: ST_TO_ADDR
// sRefresh := false ;
24047: LD_ADDR_EXP 80
24051: PUSH
24052: LD_INT 0
24054: ST_TO_ADDR
// sExp := false ;
24055: LD_ADDR_EXP 81
24059: PUSH
24060: LD_INT 0
24062: ST_TO_ADDR
// sDepot := false ;
24063: LD_ADDR_EXP 82
24067: PUSH
24068: LD_INT 0
24070: ST_TO_ADDR
// sFlag := false ;
24071: LD_ADDR_EXP 83
24075: PUSH
24076: LD_INT 0
24078: ST_TO_ADDR
// sKamikadze := false ;
24079: LD_ADDR_EXP 91
24083: PUSH
24084: LD_INT 0
24086: ST_TO_ADDR
// sTroll := false ;
24087: LD_ADDR_EXP 92
24091: PUSH
24092: LD_INT 0
24094: ST_TO_ADDR
// sSlow := false ;
24095: LD_ADDR_EXP 93
24099: PUSH
24100: LD_INT 0
24102: ST_TO_ADDR
// sLack := false ;
24103: LD_ADDR_EXP 94
24107: PUSH
24108: LD_INT 0
24110: ST_TO_ADDR
// sTank := false ;
24111: LD_ADDR_EXP 96
24115: PUSH
24116: LD_INT 0
24118: ST_TO_ADDR
// sRemote := false ;
24119: LD_ADDR_EXP 97
24123: PUSH
24124: LD_INT 0
24126: ST_TO_ADDR
// sPowell := false ;
24127: LD_ADDR_EXP 98
24131: PUSH
24132: LD_INT 0
24134: ST_TO_ADDR
// sTeleport := false ;
24135: LD_ADDR_EXP 101
24139: PUSH
24140: LD_INT 0
24142: ST_TO_ADDR
// sOilTower := false ;
24143: LD_ADDR_EXP 103
24147: PUSH
24148: LD_INT 0
24150: ST_TO_ADDR
// sShovel := false ;
24151: LD_ADDR_EXP 104
24155: PUSH
24156: LD_INT 0
24158: ST_TO_ADDR
// sSheik := false ;
24159: LD_ADDR_EXP 105
24163: PUSH
24164: LD_INT 0
24166: ST_TO_ADDR
// sEarthquake := false ;
24167: LD_ADDR_EXP 107
24171: PUSH
24172: LD_INT 0
24174: ST_TO_ADDR
// sAI := false ;
24175: LD_ADDR_EXP 108
24179: PUSH
24180: LD_INT 0
24182: ST_TO_ADDR
// sCargo := false ;
24183: LD_ADDR_EXP 111
24187: PUSH
24188: LD_INT 0
24190: ST_TO_ADDR
// sDLaser := false ;
24191: LD_ADDR_EXP 112
24195: PUSH
24196: LD_INT 0
24198: ST_TO_ADDR
// sExchange := false ;
24199: LD_ADDR_EXP 113
24203: PUSH
24204: LD_INT 0
24206: ST_TO_ADDR
// sFac := false ;
24207: LD_ADDR_EXP 114
24211: PUSH
24212: LD_INT 0
24214: ST_TO_ADDR
// sPower := false ;
24215: LD_ADDR_EXP 115
24219: PUSH
24220: LD_INT 0
24222: ST_TO_ADDR
// sRandom := false ;
24223: LD_ADDR_EXP 116
24227: PUSH
24228: LD_INT 0
24230: ST_TO_ADDR
// sShield := false ;
24231: LD_ADDR_EXP 117
24235: PUSH
24236: LD_INT 0
24238: ST_TO_ADDR
// sTime := false ;
24239: LD_ADDR_EXP 118
24243: PUSH
24244: LD_INT 0
24246: ST_TO_ADDR
// sTools := false ;
24247: LD_ADDR_EXP 119
24251: PUSH
24252: LD_INT 0
24254: ST_TO_ADDR
// sSold := false ;
24255: LD_ADDR_EXP 84
24259: PUSH
24260: LD_INT 0
24262: ST_TO_ADDR
// sDiff := false ;
24263: LD_ADDR_EXP 85
24267: PUSH
24268: LD_INT 0
24270: ST_TO_ADDR
// sFog := false ;
24271: LD_ADDR_EXP 88
24275: PUSH
24276: LD_INT 0
24278: ST_TO_ADDR
// sReset := false ;
24279: LD_ADDR_EXP 89
24283: PUSH
24284: LD_INT 0
24286: ST_TO_ADDR
// sSun := false ;
24287: LD_ADDR_EXP 90
24291: PUSH
24292: LD_INT 0
24294: ST_TO_ADDR
// sTiger := false ;
24295: LD_ADDR_EXP 86
24299: PUSH
24300: LD_INT 0
24302: ST_TO_ADDR
// sBomb := false ;
24303: LD_ADDR_EXP 87
24307: PUSH
24308: LD_INT 0
24310: ST_TO_ADDR
// sWound := false ;
24311: LD_ADDR_EXP 95
24315: PUSH
24316: LD_INT 0
24318: ST_TO_ADDR
// sBetray := false ;
24319: LD_ADDR_EXP 99
24323: PUSH
24324: LD_INT 0
24326: ST_TO_ADDR
// sContamin := false ;
24327: LD_ADDR_EXP 100
24331: PUSH
24332: LD_INT 0
24334: ST_TO_ADDR
// sOil := false ;
24335: LD_ADDR_EXP 102
24339: PUSH
24340: LD_INT 0
24342: ST_TO_ADDR
// sStu := false ;
24343: LD_ADDR_EXP 106
24347: PUSH
24348: LD_INT 0
24350: ST_TO_ADDR
// sBazooka := false ;
24351: LD_ADDR_EXP 109
24355: PUSH
24356: LD_INT 0
24358: ST_TO_ADDR
// sMortar := false ;
24359: LD_ADDR_EXP 110
24363: PUSH
24364: LD_INT 0
24366: ST_TO_ADDR
// sRanger := false ;
24367: LD_ADDR_EXP 120
24371: PUSH
24372: LD_INT 0
24374: ST_TO_ADDR
// end ;
24375: LD_VAR 0 1
24379: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
24380: LD_INT 0
24382: PPUSH
24383: PPUSH
24384: PPUSH
24385: PPUSH
24386: PPUSH
// result := [ ] ;
24387: LD_ADDR_VAR 0 1
24391: PUSH
24392: EMPTY
24393: ST_TO_ADDR
// if campaign_id = 1 then
24394: LD_OWVAR 69
24398: PUSH
24399: LD_INT 1
24401: EQUAL
24402: IFFALSE 27340
// begin case mission_number of 1 :
24404: LD_OWVAR 70
24408: PUSH
24409: LD_INT 1
24411: DOUBLE
24412: EQUAL
24413: IFTRUE 24417
24415: GO 24481
24417: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
24418: LD_ADDR_VAR 0 1
24422: PUSH
24423: LD_INT 2
24425: PUSH
24426: LD_INT 4
24428: PUSH
24429: LD_INT 11
24431: PUSH
24432: LD_INT 12
24434: PUSH
24435: LD_INT 15
24437: PUSH
24438: LD_INT 16
24440: PUSH
24441: LD_INT 22
24443: PUSH
24444: LD_INT 23
24446: PUSH
24447: LD_INT 26
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 101
24463: PUSH
24464: LD_INT 102
24466: PUSH
24467: LD_INT 106
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: LIST
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: ST_TO_ADDR
24479: GO 27338
24481: LD_INT 2
24483: DOUBLE
24484: EQUAL
24485: IFTRUE 24489
24487: GO 24561
24489: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
24490: LD_ADDR_VAR 0 1
24494: PUSH
24495: LD_INT 2
24497: PUSH
24498: LD_INT 4
24500: PUSH
24501: LD_INT 11
24503: PUSH
24504: LD_INT 12
24506: PUSH
24507: LD_INT 15
24509: PUSH
24510: LD_INT 16
24512: PUSH
24513: LD_INT 22
24515: PUSH
24516: LD_INT 23
24518: PUSH
24519: LD_INT 26
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 101
24535: PUSH
24536: LD_INT 102
24538: PUSH
24539: LD_INT 105
24541: PUSH
24542: LD_INT 106
24544: PUSH
24545: LD_INT 108
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: ST_TO_ADDR
24559: GO 27338
24561: LD_INT 3
24563: DOUBLE
24564: EQUAL
24565: IFTRUE 24569
24567: GO 24645
24569: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
24570: LD_ADDR_VAR 0 1
24574: PUSH
24575: LD_INT 2
24577: PUSH
24578: LD_INT 4
24580: PUSH
24581: LD_INT 5
24583: PUSH
24584: LD_INT 11
24586: PUSH
24587: LD_INT 12
24589: PUSH
24590: LD_INT 15
24592: PUSH
24593: LD_INT 16
24595: PUSH
24596: LD_INT 22
24598: PUSH
24599: LD_INT 26
24601: PUSH
24602: LD_INT 36
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 101
24619: PUSH
24620: LD_INT 102
24622: PUSH
24623: LD_INT 105
24625: PUSH
24626: LD_INT 106
24628: PUSH
24629: LD_INT 108
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: ST_TO_ADDR
24643: GO 27338
24645: LD_INT 4
24647: DOUBLE
24648: EQUAL
24649: IFTRUE 24653
24651: GO 24737
24653: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
24654: LD_ADDR_VAR 0 1
24658: PUSH
24659: LD_INT 2
24661: PUSH
24662: LD_INT 4
24664: PUSH
24665: LD_INT 5
24667: PUSH
24668: LD_INT 8
24670: PUSH
24671: LD_INT 11
24673: PUSH
24674: LD_INT 12
24676: PUSH
24677: LD_INT 15
24679: PUSH
24680: LD_INT 16
24682: PUSH
24683: LD_INT 22
24685: PUSH
24686: LD_INT 23
24688: PUSH
24689: LD_INT 26
24691: PUSH
24692: LD_INT 36
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 101
24711: PUSH
24712: LD_INT 102
24714: PUSH
24715: LD_INT 105
24717: PUSH
24718: LD_INT 106
24720: PUSH
24721: LD_INT 108
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: ST_TO_ADDR
24735: GO 27338
24737: LD_INT 5
24739: DOUBLE
24740: EQUAL
24741: IFTRUE 24745
24743: GO 24845
24745: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
24746: LD_ADDR_VAR 0 1
24750: PUSH
24751: LD_INT 2
24753: PUSH
24754: LD_INT 4
24756: PUSH
24757: LD_INT 5
24759: PUSH
24760: LD_INT 6
24762: PUSH
24763: LD_INT 8
24765: PUSH
24766: LD_INT 11
24768: PUSH
24769: LD_INT 12
24771: PUSH
24772: LD_INT 15
24774: PUSH
24775: LD_INT 16
24777: PUSH
24778: LD_INT 22
24780: PUSH
24781: LD_INT 23
24783: PUSH
24784: LD_INT 25
24786: PUSH
24787: LD_INT 26
24789: PUSH
24790: LD_INT 36
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 101
24811: PUSH
24812: LD_INT 102
24814: PUSH
24815: LD_INT 105
24817: PUSH
24818: LD_INT 106
24820: PUSH
24821: LD_INT 108
24823: PUSH
24824: LD_INT 109
24826: PUSH
24827: LD_INT 112
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: ST_TO_ADDR
24843: GO 27338
24845: LD_INT 6
24847: DOUBLE
24848: EQUAL
24849: IFTRUE 24853
24851: GO 24973
24853: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
24854: LD_ADDR_VAR 0 1
24858: PUSH
24859: LD_INT 2
24861: PUSH
24862: LD_INT 4
24864: PUSH
24865: LD_INT 5
24867: PUSH
24868: LD_INT 6
24870: PUSH
24871: LD_INT 8
24873: PUSH
24874: LD_INT 11
24876: PUSH
24877: LD_INT 12
24879: PUSH
24880: LD_INT 15
24882: PUSH
24883: LD_INT 16
24885: PUSH
24886: LD_INT 20
24888: PUSH
24889: LD_INT 21
24891: PUSH
24892: LD_INT 22
24894: PUSH
24895: LD_INT 23
24897: PUSH
24898: LD_INT 25
24900: PUSH
24901: LD_INT 26
24903: PUSH
24904: LD_INT 30
24906: PUSH
24907: LD_INT 31
24909: PUSH
24910: LD_INT 32
24912: PUSH
24913: LD_INT 36
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 101
24939: PUSH
24940: LD_INT 102
24942: PUSH
24943: LD_INT 105
24945: PUSH
24946: LD_INT 106
24948: PUSH
24949: LD_INT 108
24951: PUSH
24952: LD_INT 109
24954: PUSH
24955: LD_INT 112
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: ST_TO_ADDR
24971: GO 27338
24973: LD_INT 7
24975: DOUBLE
24976: EQUAL
24977: IFTRUE 24981
24979: GO 25081
24981: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
24982: LD_ADDR_VAR 0 1
24986: PUSH
24987: LD_INT 2
24989: PUSH
24990: LD_INT 4
24992: PUSH
24993: LD_INT 5
24995: PUSH
24996: LD_INT 7
24998: PUSH
24999: LD_INT 11
25001: PUSH
25002: LD_INT 12
25004: PUSH
25005: LD_INT 15
25007: PUSH
25008: LD_INT 16
25010: PUSH
25011: LD_INT 20
25013: PUSH
25014: LD_INT 21
25016: PUSH
25017: LD_INT 22
25019: PUSH
25020: LD_INT 23
25022: PUSH
25023: LD_INT 25
25025: PUSH
25026: LD_INT 26
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 101
25047: PUSH
25048: LD_INT 102
25050: PUSH
25051: LD_INT 103
25053: PUSH
25054: LD_INT 105
25056: PUSH
25057: LD_INT 106
25059: PUSH
25060: LD_INT 108
25062: PUSH
25063: LD_INT 112
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: ST_TO_ADDR
25079: GO 27338
25081: LD_INT 8
25083: DOUBLE
25084: EQUAL
25085: IFTRUE 25089
25087: GO 25217
25089: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
25090: LD_ADDR_VAR 0 1
25094: PUSH
25095: LD_INT 2
25097: PUSH
25098: LD_INT 4
25100: PUSH
25101: LD_INT 5
25103: PUSH
25104: LD_INT 6
25106: PUSH
25107: LD_INT 7
25109: PUSH
25110: LD_INT 8
25112: PUSH
25113: LD_INT 11
25115: PUSH
25116: LD_INT 12
25118: PUSH
25119: LD_INT 15
25121: PUSH
25122: LD_INT 16
25124: PUSH
25125: LD_INT 20
25127: PUSH
25128: LD_INT 21
25130: PUSH
25131: LD_INT 22
25133: PUSH
25134: LD_INT 23
25136: PUSH
25137: LD_INT 25
25139: PUSH
25140: LD_INT 26
25142: PUSH
25143: LD_INT 30
25145: PUSH
25146: LD_INT 31
25148: PUSH
25149: LD_INT 32
25151: PUSH
25152: LD_INT 36
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 101
25179: PUSH
25180: LD_INT 102
25182: PUSH
25183: LD_INT 103
25185: PUSH
25186: LD_INT 105
25188: PUSH
25189: LD_INT 106
25191: PUSH
25192: LD_INT 108
25194: PUSH
25195: LD_INT 109
25197: PUSH
25198: LD_INT 112
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: ST_TO_ADDR
25215: GO 27338
25217: LD_INT 9
25219: DOUBLE
25220: EQUAL
25221: IFTRUE 25225
25223: GO 25361
25225: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
25226: LD_ADDR_VAR 0 1
25230: PUSH
25231: LD_INT 2
25233: PUSH
25234: LD_INT 4
25236: PUSH
25237: LD_INT 5
25239: PUSH
25240: LD_INT 6
25242: PUSH
25243: LD_INT 7
25245: PUSH
25246: LD_INT 8
25248: PUSH
25249: LD_INT 11
25251: PUSH
25252: LD_INT 12
25254: PUSH
25255: LD_INT 15
25257: PUSH
25258: LD_INT 16
25260: PUSH
25261: LD_INT 20
25263: PUSH
25264: LD_INT 21
25266: PUSH
25267: LD_INT 22
25269: PUSH
25270: LD_INT 23
25272: PUSH
25273: LD_INT 25
25275: PUSH
25276: LD_INT 26
25278: PUSH
25279: LD_INT 28
25281: PUSH
25282: LD_INT 30
25284: PUSH
25285: LD_INT 31
25287: PUSH
25288: LD_INT 32
25290: PUSH
25291: LD_INT 36
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 101
25319: PUSH
25320: LD_INT 102
25322: PUSH
25323: LD_INT 103
25325: PUSH
25326: LD_INT 105
25328: PUSH
25329: LD_INT 106
25331: PUSH
25332: LD_INT 108
25334: PUSH
25335: LD_INT 109
25337: PUSH
25338: LD_INT 112
25340: PUSH
25341: LD_INT 114
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: ST_TO_ADDR
25359: GO 27338
25361: LD_INT 10
25363: DOUBLE
25364: EQUAL
25365: IFTRUE 25369
25367: GO 25553
25369: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
25370: LD_ADDR_VAR 0 1
25374: PUSH
25375: LD_INT 2
25377: PUSH
25378: LD_INT 4
25380: PUSH
25381: LD_INT 5
25383: PUSH
25384: LD_INT 6
25386: PUSH
25387: LD_INT 7
25389: PUSH
25390: LD_INT 8
25392: PUSH
25393: LD_INT 9
25395: PUSH
25396: LD_INT 10
25398: PUSH
25399: LD_INT 11
25401: PUSH
25402: LD_INT 12
25404: PUSH
25405: LD_INT 13
25407: PUSH
25408: LD_INT 14
25410: PUSH
25411: LD_INT 15
25413: PUSH
25414: LD_INT 16
25416: PUSH
25417: LD_INT 17
25419: PUSH
25420: LD_INT 18
25422: PUSH
25423: LD_INT 19
25425: PUSH
25426: LD_INT 20
25428: PUSH
25429: LD_INT 21
25431: PUSH
25432: LD_INT 22
25434: PUSH
25435: LD_INT 23
25437: PUSH
25438: LD_INT 24
25440: PUSH
25441: LD_INT 25
25443: PUSH
25444: LD_INT 26
25446: PUSH
25447: LD_INT 28
25449: PUSH
25450: LD_INT 30
25452: PUSH
25453: LD_INT 31
25455: PUSH
25456: LD_INT 32
25458: PUSH
25459: LD_INT 36
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 101
25495: PUSH
25496: LD_INT 102
25498: PUSH
25499: LD_INT 103
25501: PUSH
25502: LD_INT 104
25504: PUSH
25505: LD_INT 105
25507: PUSH
25508: LD_INT 106
25510: PUSH
25511: LD_INT 107
25513: PUSH
25514: LD_INT 108
25516: PUSH
25517: LD_INT 109
25519: PUSH
25520: LD_INT 110
25522: PUSH
25523: LD_INT 111
25525: PUSH
25526: LD_INT 112
25528: PUSH
25529: LD_INT 114
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: ST_TO_ADDR
25551: GO 27338
25553: LD_INT 11
25555: DOUBLE
25556: EQUAL
25557: IFTRUE 25561
25559: GO 25753
25561: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
25562: LD_ADDR_VAR 0 1
25566: PUSH
25567: LD_INT 2
25569: PUSH
25570: LD_INT 3
25572: PUSH
25573: LD_INT 4
25575: PUSH
25576: LD_INT 5
25578: PUSH
25579: LD_INT 6
25581: PUSH
25582: LD_INT 7
25584: PUSH
25585: LD_INT 8
25587: PUSH
25588: LD_INT 9
25590: PUSH
25591: LD_INT 10
25593: PUSH
25594: LD_INT 11
25596: PUSH
25597: LD_INT 12
25599: PUSH
25600: LD_INT 13
25602: PUSH
25603: LD_INT 14
25605: PUSH
25606: LD_INT 15
25608: PUSH
25609: LD_INT 16
25611: PUSH
25612: LD_INT 17
25614: PUSH
25615: LD_INT 18
25617: PUSH
25618: LD_INT 19
25620: PUSH
25621: LD_INT 20
25623: PUSH
25624: LD_INT 21
25626: PUSH
25627: LD_INT 22
25629: PUSH
25630: LD_INT 23
25632: PUSH
25633: LD_INT 24
25635: PUSH
25636: LD_INT 25
25638: PUSH
25639: LD_INT 26
25641: PUSH
25642: LD_INT 28
25644: PUSH
25645: LD_INT 30
25647: PUSH
25648: LD_INT 31
25650: PUSH
25651: LD_INT 32
25653: PUSH
25654: LD_INT 34
25656: PUSH
25657: LD_INT 36
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 101
25695: PUSH
25696: LD_INT 102
25698: PUSH
25699: LD_INT 103
25701: PUSH
25702: LD_INT 104
25704: PUSH
25705: LD_INT 105
25707: PUSH
25708: LD_INT 106
25710: PUSH
25711: LD_INT 107
25713: PUSH
25714: LD_INT 108
25716: PUSH
25717: LD_INT 109
25719: PUSH
25720: LD_INT 110
25722: PUSH
25723: LD_INT 111
25725: PUSH
25726: LD_INT 112
25728: PUSH
25729: LD_INT 114
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: ST_TO_ADDR
25751: GO 27338
25753: LD_INT 12
25755: DOUBLE
25756: EQUAL
25757: IFTRUE 25761
25759: GO 25969
25761: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
25762: LD_ADDR_VAR 0 1
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: LD_INT 3
25775: PUSH
25776: LD_INT 4
25778: PUSH
25779: LD_INT 5
25781: PUSH
25782: LD_INT 6
25784: PUSH
25785: LD_INT 7
25787: PUSH
25788: LD_INT 8
25790: PUSH
25791: LD_INT 9
25793: PUSH
25794: LD_INT 10
25796: PUSH
25797: LD_INT 11
25799: PUSH
25800: LD_INT 12
25802: PUSH
25803: LD_INT 13
25805: PUSH
25806: LD_INT 14
25808: PUSH
25809: LD_INT 15
25811: PUSH
25812: LD_INT 16
25814: PUSH
25815: LD_INT 17
25817: PUSH
25818: LD_INT 18
25820: PUSH
25821: LD_INT 19
25823: PUSH
25824: LD_INT 20
25826: PUSH
25827: LD_INT 21
25829: PUSH
25830: LD_INT 22
25832: PUSH
25833: LD_INT 23
25835: PUSH
25836: LD_INT 24
25838: PUSH
25839: LD_INT 25
25841: PUSH
25842: LD_INT 26
25844: PUSH
25845: LD_INT 27
25847: PUSH
25848: LD_INT 28
25850: PUSH
25851: LD_INT 30
25853: PUSH
25854: LD_INT 31
25856: PUSH
25857: LD_INT 32
25859: PUSH
25860: LD_INT 33
25862: PUSH
25863: LD_INT 34
25865: PUSH
25866: LD_INT 36
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 101
25907: PUSH
25908: LD_INT 102
25910: PUSH
25911: LD_INT 103
25913: PUSH
25914: LD_INT 104
25916: PUSH
25917: LD_INT 105
25919: PUSH
25920: LD_INT 106
25922: PUSH
25923: LD_INT 107
25925: PUSH
25926: LD_INT 108
25928: PUSH
25929: LD_INT 109
25931: PUSH
25932: LD_INT 110
25934: PUSH
25935: LD_INT 111
25937: PUSH
25938: LD_INT 112
25940: PUSH
25941: LD_INT 113
25943: PUSH
25944: LD_INT 114
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: ST_TO_ADDR
25967: GO 27338
25969: LD_INT 13
25971: DOUBLE
25972: EQUAL
25973: IFTRUE 25977
25975: GO 26173
25977: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
25978: LD_ADDR_VAR 0 1
25982: PUSH
25983: LD_INT 1
25985: PUSH
25986: LD_INT 2
25988: PUSH
25989: LD_INT 3
25991: PUSH
25992: LD_INT 4
25994: PUSH
25995: LD_INT 5
25997: PUSH
25998: LD_INT 8
26000: PUSH
26001: LD_INT 9
26003: PUSH
26004: LD_INT 10
26006: PUSH
26007: LD_INT 11
26009: PUSH
26010: LD_INT 12
26012: PUSH
26013: LD_INT 14
26015: PUSH
26016: LD_INT 15
26018: PUSH
26019: LD_INT 16
26021: PUSH
26022: LD_INT 17
26024: PUSH
26025: LD_INT 18
26027: PUSH
26028: LD_INT 19
26030: PUSH
26031: LD_INT 20
26033: PUSH
26034: LD_INT 21
26036: PUSH
26037: LD_INT 22
26039: PUSH
26040: LD_INT 23
26042: PUSH
26043: LD_INT 24
26045: PUSH
26046: LD_INT 25
26048: PUSH
26049: LD_INT 26
26051: PUSH
26052: LD_INT 27
26054: PUSH
26055: LD_INT 28
26057: PUSH
26058: LD_INT 30
26060: PUSH
26061: LD_INT 31
26063: PUSH
26064: LD_INT 32
26066: PUSH
26067: LD_INT 33
26069: PUSH
26070: LD_INT 34
26072: PUSH
26073: LD_INT 36
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 101
26111: PUSH
26112: LD_INT 102
26114: PUSH
26115: LD_INT 103
26117: PUSH
26118: LD_INT 104
26120: PUSH
26121: LD_INT 105
26123: PUSH
26124: LD_INT 106
26126: PUSH
26127: LD_INT 107
26129: PUSH
26130: LD_INT 108
26132: PUSH
26133: LD_INT 109
26135: PUSH
26136: LD_INT 110
26138: PUSH
26139: LD_INT 111
26141: PUSH
26142: LD_INT 112
26144: PUSH
26145: LD_INT 113
26147: PUSH
26148: LD_INT 114
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: ST_TO_ADDR
26171: GO 27338
26173: LD_INT 14
26175: DOUBLE
26176: EQUAL
26177: IFTRUE 26181
26179: GO 26393
26181: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
26182: LD_ADDR_VAR 0 1
26186: PUSH
26187: LD_INT 1
26189: PUSH
26190: LD_INT 2
26192: PUSH
26193: LD_INT 3
26195: PUSH
26196: LD_INT 4
26198: PUSH
26199: LD_INT 5
26201: PUSH
26202: LD_INT 6
26204: PUSH
26205: LD_INT 7
26207: PUSH
26208: LD_INT 8
26210: PUSH
26211: LD_INT 9
26213: PUSH
26214: LD_INT 10
26216: PUSH
26217: LD_INT 11
26219: PUSH
26220: LD_INT 12
26222: PUSH
26223: LD_INT 13
26225: PUSH
26226: LD_INT 14
26228: PUSH
26229: LD_INT 15
26231: PUSH
26232: LD_INT 16
26234: PUSH
26235: LD_INT 17
26237: PUSH
26238: LD_INT 18
26240: PUSH
26241: LD_INT 19
26243: PUSH
26244: LD_INT 20
26246: PUSH
26247: LD_INT 21
26249: PUSH
26250: LD_INT 22
26252: PUSH
26253: LD_INT 23
26255: PUSH
26256: LD_INT 24
26258: PUSH
26259: LD_INT 25
26261: PUSH
26262: LD_INT 26
26264: PUSH
26265: LD_INT 27
26267: PUSH
26268: LD_INT 28
26270: PUSH
26271: LD_INT 29
26273: PUSH
26274: LD_INT 30
26276: PUSH
26277: LD_INT 31
26279: PUSH
26280: LD_INT 32
26282: PUSH
26283: LD_INT 33
26285: PUSH
26286: LD_INT 34
26288: PUSH
26289: LD_INT 36
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 101
26331: PUSH
26332: LD_INT 102
26334: PUSH
26335: LD_INT 103
26337: PUSH
26338: LD_INT 104
26340: PUSH
26341: LD_INT 105
26343: PUSH
26344: LD_INT 106
26346: PUSH
26347: LD_INT 107
26349: PUSH
26350: LD_INT 108
26352: PUSH
26353: LD_INT 109
26355: PUSH
26356: LD_INT 110
26358: PUSH
26359: LD_INT 111
26361: PUSH
26362: LD_INT 112
26364: PUSH
26365: LD_INT 113
26367: PUSH
26368: LD_INT 114
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: ST_TO_ADDR
26391: GO 27338
26393: LD_INT 15
26395: DOUBLE
26396: EQUAL
26397: IFTRUE 26401
26399: GO 26613
26401: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
26402: LD_ADDR_VAR 0 1
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: LD_INT 2
26412: PUSH
26413: LD_INT 3
26415: PUSH
26416: LD_INT 4
26418: PUSH
26419: LD_INT 5
26421: PUSH
26422: LD_INT 6
26424: PUSH
26425: LD_INT 7
26427: PUSH
26428: LD_INT 8
26430: PUSH
26431: LD_INT 9
26433: PUSH
26434: LD_INT 10
26436: PUSH
26437: LD_INT 11
26439: PUSH
26440: LD_INT 12
26442: PUSH
26443: LD_INT 13
26445: PUSH
26446: LD_INT 14
26448: PUSH
26449: LD_INT 15
26451: PUSH
26452: LD_INT 16
26454: PUSH
26455: LD_INT 17
26457: PUSH
26458: LD_INT 18
26460: PUSH
26461: LD_INT 19
26463: PUSH
26464: LD_INT 20
26466: PUSH
26467: LD_INT 21
26469: PUSH
26470: LD_INT 22
26472: PUSH
26473: LD_INT 23
26475: PUSH
26476: LD_INT 24
26478: PUSH
26479: LD_INT 25
26481: PUSH
26482: LD_INT 26
26484: PUSH
26485: LD_INT 27
26487: PUSH
26488: LD_INT 28
26490: PUSH
26491: LD_INT 29
26493: PUSH
26494: LD_INT 30
26496: PUSH
26497: LD_INT 31
26499: PUSH
26500: LD_INT 32
26502: PUSH
26503: LD_INT 33
26505: PUSH
26506: LD_INT 34
26508: PUSH
26509: LD_INT 36
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 101
26551: PUSH
26552: LD_INT 102
26554: PUSH
26555: LD_INT 103
26557: PUSH
26558: LD_INT 104
26560: PUSH
26561: LD_INT 105
26563: PUSH
26564: LD_INT 106
26566: PUSH
26567: LD_INT 107
26569: PUSH
26570: LD_INT 108
26572: PUSH
26573: LD_INT 109
26575: PUSH
26576: LD_INT 110
26578: PUSH
26579: LD_INT 111
26581: PUSH
26582: LD_INT 112
26584: PUSH
26585: LD_INT 113
26587: PUSH
26588: LD_INT 114
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: ST_TO_ADDR
26611: GO 27338
26613: LD_INT 16
26615: DOUBLE
26616: EQUAL
26617: IFTRUE 26621
26619: GO 26745
26621: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
26622: LD_ADDR_VAR 0 1
26626: PUSH
26627: LD_INT 2
26629: PUSH
26630: LD_INT 4
26632: PUSH
26633: LD_INT 5
26635: PUSH
26636: LD_INT 7
26638: PUSH
26639: LD_INT 11
26641: PUSH
26642: LD_INT 12
26644: PUSH
26645: LD_INT 15
26647: PUSH
26648: LD_INT 16
26650: PUSH
26651: LD_INT 20
26653: PUSH
26654: LD_INT 21
26656: PUSH
26657: LD_INT 22
26659: PUSH
26660: LD_INT 23
26662: PUSH
26663: LD_INT 25
26665: PUSH
26666: LD_INT 26
26668: PUSH
26669: LD_INT 30
26671: PUSH
26672: LD_INT 31
26674: PUSH
26675: LD_INT 32
26677: PUSH
26678: LD_INT 33
26680: PUSH
26681: LD_INT 34
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 101
26707: PUSH
26708: LD_INT 102
26710: PUSH
26711: LD_INT 103
26713: PUSH
26714: LD_INT 106
26716: PUSH
26717: LD_INT 108
26719: PUSH
26720: LD_INT 112
26722: PUSH
26723: LD_INT 113
26725: PUSH
26726: LD_INT 114
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: ST_TO_ADDR
26743: GO 27338
26745: LD_INT 17
26747: DOUBLE
26748: EQUAL
26749: IFTRUE 26753
26751: GO 26965
26753: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
26754: LD_ADDR_VAR 0 1
26758: PUSH
26759: LD_INT 1
26761: PUSH
26762: LD_INT 2
26764: PUSH
26765: LD_INT 3
26767: PUSH
26768: LD_INT 4
26770: PUSH
26771: LD_INT 5
26773: PUSH
26774: LD_INT 6
26776: PUSH
26777: LD_INT 7
26779: PUSH
26780: LD_INT 8
26782: PUSH
26783: LD_INT 9
26785: PUSH
26786: LD_INT 10
26788: PUSH
26789: LD_INT 11
26791: PUSH
26792: LD_INT 12
26794: PUSH
26795: LD_INT 13
26797: PUSH
26798: LD_INT 14
26800: PUSH
26801: LD_INT 15
26803: PUSH
26804: LD_INT 16
26806: PUSH
26807: LD_INT 17
26809: PUSH
26810: LD_INT 18
26812: PUSH
26813: LD_INT 19
26815: PUSH
26816: LD_INT 20
26818: PUSH
26819: LD_INT 21
26821: PUSH
26822: LD_INT 22
26824: PUSH
26825: LD_INT 23
26827: PUSH
26828: LD_INT 24
26830: PUSH
26831: LD_INT 25
26833: PUSH
26834: LD_INT 26
26836: PUSH
26837: LD_INT 27
26839: PUSH
26840: LD_INT 28
26842: PUSH
26843: LD_INT 29
26845: PUSH
26846: LD_INT 30
26848: PUSH
26849: LD_INT 31
26851: PUSH
26852: LD_INT 32
26854: PUSH
26855: LD_INT 33
26857: PUSH
26858: LD_INT 34
26860: PUSH
26861: LD_INT 36
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 101
26903: PUSH
26904: LD_INT 102
26906: PUSH
26907: LD_INT 103
26909: PUSH
26910: LD_INT 104
26912: PUSH
26913: LD_INT 105
26915: PUSH
26916: LD_INT 106
26918: PUSH
26919: LD_INT 107
26921: PUSH
26922: LD_INT 108
26924: PUSH
26925: LD_INT 109
26927: PUSH
26928: LD_INT 110
26930: PUSH
26931: LD_INT 111
26933: PUSH
26934: LD_INT 112
26936: PUSH
26937: LD_INT 113
26939: PUSH
26940: LD_INT 114
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: ST_TO_ADDR
26963: GO 27338
26965: LD_INT 18
26967: DOUBLE
26968: EQUAL
26969: IFTRUE 26973
26971: GO 27109
26973: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
26974: LD_ADDR_VAR 0 1
26978: PUSH
26979: LD_INT 2
26981: PUSH
26982: LD_INT 4
26984: PUSH
26985: LD_INT 5
26987: PUSH
26988: LD_INT 7
26990: PUSH
26991: LD_INT 11
26993: PUSH
26994: LD_INT 12
26996: PUSH
26997: LD_INT 15
26999: PUSH
27000: LD_INT 16
27002: PUSH
27003: LD_INT 20
27005: PUSH
27006: LD_INT 21
27008: PUSH
27009: LD_INT 22
27011: PUSH
27012: LD_INT 23
27014: PUSH
27015: LD_INT 25
27017: PUSH
27018: LD_INT 26
27020: PUSH
27021: LD_INT 30
27023: PUSH
27024: LD_INT 31
27026: PUSH
27027: LD_INT 32
27029: PUSH
27030: LD_INT 33
27032: PUSH
27033: LD_INT 34
27035: PUSH
27036: LD_INT 35
27038: PUSH
27039: LD_INT 36
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 101
27067: PUSH
27068: LD_INT 102
27070: PUSH
27071: LD_INT 103
27073: PUSH
27074: LD_INT 106
27076: PUSH
27077: LD_INT 108
27079: PUSH
27080: LD_INT 112
27082: PUSH
27083: LD_INT 113
27085: PUSH
27086: LD_INT 114
27088: PUSH
27089: LD_INT 115
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: ST_TO_ADDR
27107: GO 27338
27109: LD_INT 19
27111: DOUBLE
27112: EQUAL
27113: IFTRUE 27117
27115: GO 27337
27117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
27118: LD_ADDR_VAR 0 1
27122: PUSH
27123: LD_INT 1
27125: PUSH
27126: LD_INT 2
27128: PUSH
27129: LD_INT 3
27131: PUSH
27132: LD_INT 4
27134: PUSH
27135: LD_INT 5
27137: PUSH
27138: LD_INT 6
27140: PUSH
27141: LD_INT 7
27143: PUSH
27144: LD_INT 8
27146: PUSH
27147: LD_INT 9
27149: PUSH
27150: LD_INT 10
27152: PUSH
27153: LD_INT 11
27155: PUSH
27156: LD_INT 12
27158: PUSH
27159: LD_INT 13
27161: PUSH
27162: LD_INT 14
27164: PUSH
27165: LD_INT 15
27167: PUSH
27168: LD_INT 16
27170: PUSH
27171: LD_INT 17
27173: PUSH
27174: LD_INT 18
27176: PUSH
27177: LD_INT 19
27179: PUSH
27180: LD_INT 20
27182: PUSH
27183: LD_INT 21
27185: PUSH
27186: LD_INT 22
27188: PUSH
27189: LD_INT 23
27191: PUSH
27192: LD_INT 24
27194: PUSH
27195: LD_INT 25
27197: PUSH
27198: LD_INT 26
27200: PUSH
27201: LD_INT 27
27203: PUSH
27204: LD_INT 28
27206: PUSH
27207: LD_INT 29
27209: PUSH
27210: LD_INT 30
27212: PUSH
27213: LD_INT 31
27215: PUSH
27216: LD_INT 32
27218: PUSH
27219: LD_INT 33
27221: PUSH
27222: LD_INT 34
27224: PUSH
27225: LD_INT 35
27227: PUSH
27228: LD_INT 36
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 101
27271: PUSH
27272: LD_INT 102
27274: PUSH
27275: LD_INT 103
27277: PUSH
27278: LD_INT 104
27280: PUSH
27281: LD_INT 105
27283: PUSH
27284: LD_INT 106
27286: PUSH
27287: LD_INT 107
27289: PUSH
27290: LD_INT 108
27292: PUSH
27293: LD_INT 109
27295: PUSH
27296: LD_INT 110
27298: PUSH
27299: LD_INT 111
27301: PUSH
27302: LD_INT 112
27304: PUSH
27305: LD_INT 113
27307: PUSH
27308: LD_INT 114
27310: PUSH
27311: LD_INT 115
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: ST_TO_ADDR
27335: GO 27338
27337: POP
// end else
27338: GO 27557
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
27340: LD_ADDR_VAR 0 1
27344: PUSH
27345: LD_INT 1
27347: PUSH
27348: LD_INT 2
27350: PUSH
27351: LD_INT 3
27353: PUSH
27354: LD_INT 4
27356: PUSH
27357: LD_INT 5
27359: PUSH
27360: LD_INT 6
27362: PUSH
27363: LD_INT 7
27365: PUSH
27366: LD_INT 8
27368: PUSH
27369: LD_INT 9
27371: PUSH
27372: LD_INT 10
27374: PUSH
27375: LD_INT 11
27377: PUSH
27378: LD_INT 12
27380: PUSH
27381: LD_INT 13
27383: PUSH
27384: LD_INT 14
27386: PUSH
27387: LD_INT 15
27389: PUSH
27390: LD_INT 16
27392: PUSH
27393: LD_INT 17
27395: PUSH
27396: LD_INT 18
27398: PUSH
27399: LD_INT 19
27401: PUSH
27402: LD_INT 20
27404: PUSH
27405: LD_INT 21
27407: PUSH
27408: LD_INT 22
27410: PUSH
27411: LD_INT 23
27413: PUSH
27414: LD_INT 24
27416: PUSH
27417: LD_INT 25
27419: PUSH
27420: LD_INT 26
27422: PUSH
27423: LD_INT 27
27425: PUSH
27426: LD_INT 28
27428: PUSH
27429: LD_INT 29
27431: PUSH
27432: LD_INT 30
27434: PUSH
27435: LD_INT 31
27437: PUSH
27438: LD_INT 32
27440: PUSH
27441: LD_INT 33
27443: PUSH
27444: LD_INT 34
27446: PUSH
27447: LD_INT 35
27449: PUSH
27450: LD_INT 36
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 101
27493: PUSH
27494: LD_INT 102
27496: PUSH
27497: LD_INT 103
27499: PUSH
27500: LD_INT 104
27502: PUSH
27503: LD_INT 105
27505: PUSH
27506: LD_INT 106
27508: PUSH
27509: LD_INT 107
27511: PUSH
27512: LD_INT 108
27514: PUSH
27515: LD_INT 109
27517: PUSH
27518: LD_INT 110
27520: PUSH
27521: LD_INT 111
27523: PUSH
27524: LD_INT 112
27526: PUSH
27527: LD_INT 113
27529: PUSH
27530: LD_INT 114
27532: PUSH
27533: LD_INT 115
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: ST_TO_ADDR
// if result then
27557: LD_VAR 0 1
27561: IFFALSE 27850
// begin normal :=  ;
27563: LD_ADDR_VAR 0 3
27567: PUSH
27568: LD_STRING 
27570: ST_TO_ADDR
// hardcore :=  ;
27571: LD_ADDR_VAR 0 4
27575: PUSH
27576: LD_STRING 
27578: ST_TO_ADDR
// for i = 1 to normalCounter do
27579: LD_ADDR_VAR 0 5
27583: PUSH
27584: DOUBLE
27585: LD_INT 1
27587: DEC
27588: ST_TO_ADDR
27589: LD_EXP 68
27593: PUSH
27594: FOR_TO
27595: IFFALSE 27696
// begin tmp := 0 ;
27597: LD_ADDR_VAR 0 2
27601: PUSH
27602: LD_STRING 0
27604: ST_TO_ADDR
// if result [ 1 ] then
27605: LD_VAR 0 1
27609: PUSH
27610: LD_INT 1
27612: ARRAY
27613: IFFALSE 27678
// if result [ 1 ] [ 1 ] = i then
27615: LD_VAR 0 1
27619: PUSH
27620: LD_INT 1
27622: ARRAY
27623: PUSH
27624: LD_INT 1
27626: ARRAY
27627: PUSH
27628: LD_VAR 0 5
27632: EQUAL
27633: IFFALSE 27678
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27635: LD_ADDR_VAR 0 1
27639: PUSH
27640: LD_VAR 0 1
27644: PPUSH
27645: LD_INT 1
27647: PPUSH
27648: LD_VAR 0 1
27652: PUSH
27653: LD_INT 1
27655: ARRAY
27656: PPUSH
27657: LD_INT 1
27659: PPUSH
27660: CALL_OW 3
27664: PPUSH
27665: CALL_OW 1
27669: ST_TO_ADDR
// tmp := 1 ;
27670: LD_ADDR_VAR 0 2
27674: PUSH
27675: LD_STRING 1
27677: ST_TO_ADDR
// end ; normal := normal & tmp ;
27678: LD_ADDR_VAR 0 3
27682: PUSH
27683: LD_VAR 0 3
27687: PUSH
27688: LD_VAR 0 2
27692: STR
27693: ST_TO_ADDR
// end ;
27694: GO 27594
27696: POP
27697: POP
// for i = 1 to hardcoreCounter do
27698: LD_ADDR_VAR 0 5
27702: PUSH
27703: DOUBLE
27704: LD_INT 1
27706: DEC
27707: ST_TO_ADDR
27708: LD_EXP 69
27712: PUSH
27713: FOR_TO
27714: IFFALSE 27819
// begin tmp := 0 ;
27716: LD_ADDR_VAR 0 2
27720: PUSH
27721: LD_STRING 0
27723: ST_TO_ADDR
// if result [ 2 ] then
27724: LD_VAR 0 1
27728: PUSH
27729: LD_INT 2
27731: ARRAY
27732: IFFALSE 27801
// if result [ 2 ] [ 1 ] = 100 + i then
27734: LD_VAR 0 1
27738: PUSH
27739: LD_INT 2
27741: ARRAY
27742: PUSH
27743: LD_INT 1
27745: ARRAY
27746: PUSH
27747: LD_INT 100
27749: PUSH
27750: LD_VAR 0 5
27754: PLUS
27755: EQUAL
27756: IFFALSE 27801
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27758: LD_ADDR_VAR 0 1
27762: PUSH
27763: LD_VAR 0 1
27767: PPUSH
27768: LD_INT 2
27770: PPUSH
27771: LD_VAR 0 1
27775: PUSH
27776: LD_INT 2
27778: ARRAY
27779: PPUSH
27780: LD_INT 1
27782: PPUSH
27783: CALL_OW 3
27787: PPUSH
27788: CALL_OW 1
27792: ST_TO_ADDR
// tmp := 1 ;
27793: LD_ADDR_VAR 0 2
27797: PUSH
27798: LD_STRING 1
27800: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27801: LD_ADDR_VAR 0 4
27805: PUSH
27806: LD_VAR 0 4
27810: PUSH
27811: LD_VAR 0 2
27815: STR
27816: ST_TO_ADDR
// end ;
27817: GO 27713
27819: POP
27820: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
27821: LD_STRING getStreamItemsFromMission("
27823: PUSH
27824: LD_VAR 0 3
27828: STR
27829: PUSH
27830: LD_STRING ","
27832: STR
27833: PUSH
27834: LD_VAR 0 4
27838: STR
27839: PUSH
27840: LD_STRING ")
27842: STR
27843: PPUSH
27844: CALL_OW 559
// end else
27848: GO 27857
// ToLua ( getStreamItemsFromMission("","") ) ;
27850: LD_STRING getStreamItemsFromMission("","")
27852: PPUSH
27853: CALL_OW 559
// end ;
27857: LD_VAR 0 1
27861: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27862: LD_EXP 67
27866: PUSH
27867: LD_EXP 72
27871: AND
27872: IFFALSE 27996
27874: GO 27876
27876: DISABLE
27877: LD_INT 0
27879: PPUSH
27880: PPUSH
// begin enable ;
27881: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27882: LD_ADDR_VAR 0 2
27886: PUSH
27887: LD_INT 22
27889: PUSH
27890: LD_OWVAR 2
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 2
27901: PUSH
27902: LD_INT 34
27904: PUSH
27905: LD_INT 7
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 34
27914: PUSH
27915: LD_INT 45
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 34
27924: PUSH
27925: LD_INT 28
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 34
27934: PUSH
27935: LD_INT 47
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PPUSH
27953: CALL_OW 69
27957: ST_TO_ADDR
// if not tmp then
27958: LD_VAR 0 2
27962: NOT
27963: IFFALSE 27967
// exit ;
27965: GO 27996
// for i in tmp do
27967: LD_ADDR_VAR 0 1
27971: PUSH
27972: LD_VAR 0 2
27976: PUSH
27977: FOR_IN
27978: IFFALSE 27994
// begin SetLives ( i , 0 ) ;
27980: LD_VAR 0 1
27984: PPUSH
27985: LD_INT 0
27987: PPUSH
27988: CALL_OW 234
// end ;
27992: GO 27977
27994: POP
27995: POP
// end ;
27996: PPOPN 2
27998: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27999: LD_EXP 67
28003: PUSH
28004: LD_EXP 73
28008: AND
28009: IFFALSE 28093
28011: GO 28013
28013: DISABLE
28014: LD_INT 0
28016: PPUSH
28017: PPUSH
// begin enable ;
28018: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
28019: LD_ADDR_VAR 0 2
28023: PUSH
28024: LD_INT 22
28026: PUSH
28027: LD_OWVAR 2
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 32
28038: PUSH
28039: LD_INT 3
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PPUSH
28050: CALL_OW 69
28054: ST_TO_ADDR
// if not tmp then
28055: LD_VAR 0 2
28059: NOT
28060: IFFALSE 28064
// exit ;
28062: GO 28093
// for i in tmp do
28064: LD_ADDR_VAR 0 1
28068: PUSH
28069: LD_VAR 0 2
28073: PUSH
28074: FOR_IN
28075: IFFALSE 28091
// begin SetLives ( i , 0 ) ;
28077: LD_VAR 0 1
28081: PPUSH
28082: LD_INT 0
28084: PPUSH
28085: CALL_OW 234
// end ;
28089: GO 28074
28091: POP
28092: POP
// end ;
28093: PPOPN 2
28095: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
28096: LD_EXP 67
28100: PUSH
28101: LD_EXP 70
28105: AND
28106: IFFALSE 28199
28108: GO 28110
28110: DISABLE
28111: LD_INT 0
28113: PPUSH
// begin enable ;
28114: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28115: LD_ADDR_VAR 0 1
28119: PUSH
28120: LD_INT 22
28122: PUSH
28123: LD_OWVAR 2
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 2
28134: PUSH
28135: LD_INT 25
28137: PUSH
28138: LD_INT 5
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 25
28147: PUSH
28148: LD_INT 9
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 25
28157: PUSH
28158: LD_INT 8
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PPUSH
28175: CALL_OW 69
28179: PUSH
28180: FOR_IN
28181: IFFALSE 28197
// begin SetClass ( i , 1 ) ;
28183: LD_VAR 0 1
28187: PPUSH
28188: LD_INT 1
28190: PPUSH
28191: CALL_OW 336
// end ;
28195: GO 28180
28197: POP
28198: POP
// end ;
28199: PPOPN 1
28201: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28202: LD_EXP 67
28206: PUSH
28207: LD_EXP 71
28211: AND
28212: PUSH
28213: LD_OWVAR 65
28217: PUSH
28218: LD_INT 7
28220: LESS
28221: AND
28222: IFFALSE 28236
28224: GO 28226
28226: DISABLE
// begin enable ;
28227: ENABLE
// game_speed := 7 ;
28228: LD_ADDR_OWVAR 65
28232: PUSH
28233: LD_INT 7
28235: ST_TO_ADDR
// end ;
28236: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28237: LD_EXP 67
28241: PUSH
28242: LD_EXP 74
28246: AND
28247: IFFALSE 28449
28249: GO 28251
28251: DISABLE
28252: LD_INT 0
28254: PPUSH
28255: PPUSH
28256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28257: LD_ADDR_VAR 0 3
28261: PUSH
28262: LD_INT 81
28264: PUSH
28265: LD_OWVAR 2
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 21
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PPUSH
28288: CALL_OW 69
28292: ST_TO_ADDR
// if not tmp then
28293: LD_VAR 0 3
28297: NOT
28298: IFFALSE 28302
// exit ;
28300: GO 28449
// if tmp > 5 then
28302: LD_VAR 0 3
28306: PUSH
28307: LD_INT 5
28309: GREATER
28310: IFFALSE 28322
// k := 5 else
28312: LD_ADDR_VAR 0 2
28316: PUSH
28317: LD_INT 5
28319: ST_TO_ADDR
28320: GO 28332
// k := tmp ;
28322: LD_ADDR_VAR 0 2
28326: PUSH
28327: LD_VAR 0 3
28331: ST_TO_ADDR
// for i := 1 to k do
28332: LD_ADDR_VAR 0 1
28336: PUSH
28337: DOUBLE
28338: LD_INT 1
28340: DEC
28341: ST_TO_ADDR
28342: LD_VAR 0 2
28346: PUSH
28347: FOR_TO
28348: IFFALSE 28447
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28350: LD_VAR 0 3
28354: PUSH
28355: LD_VAR 0 1
28359: ARRAY
28360: PPUSH
28361: LD_VAR 0 1
28365: PUSH
28366: LD_INT 4
28368: MOD
28369: PUSH
28370: LD_INT 1
28372: PLUS
28373: PPUSH
28374: CALL_OW 259
28378: PUSH
28379: LD_INT 10
28381: LESS
28382: IFFALSE 28445
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28384: LD_VAR 0 3
28388: PUSH
28389: LD_VAR 0 1
28393: ARRAY
28394: PPUSH
28395: LD_VAR 0 1
28399: PUSH
28400: LD_INT 4
28402: MOD
28403: PUSH
28404: LD_INT 1
28406: PLUS
28407: PPUSH
28408: LD_VAR 0 3
28412: PUSH
28413: LD_VAR 0 1
28417: ARRAY
28418: PPUSH
28419: LD_VAR 0 1
28423: PUSH
28424: LD_INT 4
28426: MOD
28427: PUSH
28428: LD_INT 1
28430: PLUS
28431: PPUSH
28432: CALL_OW 259
28436: PUSH
28437: LD_INT 1
28439: PLUS
28440: PPUSH
28441: CALL_OW 237
28445: GO 28347
28447: POP
28448: POP
// end ;
28449: PPOPN 3
28451: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28452: LD_EXP 67
28456: PUSH
28457: LD_EXP 75
28461: AND
28462: IFFALSE 28482
28464: GO 28466
28466: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28467: LD_INT 4
28469: PPUSH
28470: LD_OWVAR 2
28474: PPUSH
28475: LD_INT 0
28477: PPUSH
28478: CALL_OW 324
28482: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28483: LD_EXP 67
28487: PUSH
28488: LD_EXP 104
28492: AND
28493: IFFALSE 28513
28495: GO 28497
28497: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28498: LD_INT 19
28500: PPUSH
28501: LD_OWVAR 2
28505: PPUSH
28506: LD_INT 0
28508: PPUSH
28509: CALL_OW 324
28513: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28514: LD_EXP 67
28518: PUSH
28519: LD_EXP 76
28523: AND
28524: IFFALSE 28626
28526: GO 28528
28528: DISABLE
28529: LD_INT 0
28531: PPUSH
28532: PPUSH
// begin enable ;
28533: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28534: LD_ADDR_VAR 0 2
28538: PUSH
28539: LD_INT 22
28541: PUSH
28542: LD_OWVAR 2
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 2
28553: PUSH
28554: LD_INT 34
28556: PUSH
28557: LD_INT 11
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 34
28566: PUSH
28567: LD_INT 30
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: LIST
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PPUSH
28583: CALL_OW 69
28587: ST_TO_ADDR
// if not tmp then
28588: LD_VAR 0 2
28592: NOT
28593: IFFALSE 28597
// exit ;
28595: GO 28626
// for i in tmp do
28597: LD_ADDR_VAR 0 1
28601: PUSH
28602: LD_VAR 0 2
28606: PUSH
28607: FOR_IN
28608: IFFALSE 28624
// begin SetLives ( i , 0 ) ;
28610: LD_VAR 0 1
28614: PPUSH
28615: LD_INT 0
28617: PPUSH
28618: CALL_OW 234
// end ;
28622: GO 28607
28624: POP
28625: POP
// end ;
28626: PPOPN 2
28628: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28629: LD_EXP 67
28633: PUSH
28634: LD_EXP 77
28638: AND
28639: IFFALSE 28659
28641: GO 28643
28643: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28644: LD_INT 32
28646: PPUSH
28647: LD_OWVAR 2
28651: PPUSH
28652: LD_INT 0
28654: PPUSH
28655: CALL_OW 324
28659: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28660: LD_EXP 67
28664: PUSH
28665: LD_EXP 78
28669: AND
28670: IFFALSE 28851
28672: GO 28674
28674: DISABLE
28675: LD_INT 0
28677: PPUSH
28678: PPUSH
28679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28680: LD_ADDR_VAR 0 2
28684: PUSH
28685: LD_INT 22
28687: PUSH
28688: LD_OWVAR 2
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 33
28699: PUSH
28700: LD_INT 3
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PPUSH
28711: CALL_OW 69
28715: ST_TO_ADDR
// if not tmp then
28716: LD_VAR 0 2
28720: NOT
28721: IFFALSE 28725
// exit ;
28723: GO 28851
// side := 0 ;
28725: LD_ADDR_VAR 0 3
28729: PUSH
28730: LD_INT 0
28732: ST_TO_ADDR
// for i := 1 to 8 do
28733: LD_ADDR_VAR 0 1
28737: PUSH
28738: DOUBLE
28739: LD_INT 1
28741: DEC
28742: ST_TO_ADDR
28743: LD_INT 8
28745: PUSH
28746: FOR_TO
28747: IFFALSE 28795
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28749: LD_OWVAR 2
28753: PUSH
28754: LD_VAR 0 1
28758: NONEQUAL
28759: PUSH
28760: LD_OWVAR 2
28764: PPUSH
28765: LD_VAR 0 1
28769: PPUSH
28770: CALL_OW 81
28774: PUSH
28775: LD_INT 2
28777: EQUAL
28778: AND
28779: IFFALSE 28793
// begin side := i ;
28781: LD_ADDR_VAR 0 3
28785: PUSH
28786: LD_VAR 0 1
28790: ST_TO_ADDR
// break ;
28791: GO 28795
// end ;
28793: GO 28746
28795: POP
28796: POP
// if not side then
28797: LD_VAR 0 3
28801: NOT
28802: IFFALSE 28806
// exit ;
28804: GO 28851
// for i := 1 to tmp do
28806: LD_ADDR_VAR 0 1
28810: PUSH
28811: DOUBLE
28812: LD_INT 1
28814: DEC
28815: ST_TO_ADDR
28816: LD_VAR 0 2
28820: PUSH
28821: FOR_TO
28822: IFFALSE 28849
// if Prob ( 60 ) then
28824: LD_INT 60
28826: PPUSH
28827: CALL_OW 13
28831: IFFALSE 28847
// SetSide ( i , side ) ;
28833: LD_VAR 0 1
28837: PPUSH
28838: LD_VAR 0 3
28842: PPUSH
28843: CALL_OW 235
28847: GO 28821
28849: POP
28850: POP
// end ;
28851: PPOPN 3
28853: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28854: LD_EXP 67
28858: PUSH
28859: LD_EXP 80
28863: AND
28864: IFFALSE 28983
28866: GO 28868
28868: DISABLE
28869: LD_INT 0
28871: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28872: LD_ADDR_VAR 0 1
28876: PUSH
28877: LD_INT 22
28879: PUSH
28880: LD_OWVAR 2
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 21
28891: PUSH
28892: LD_INT 1
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 3
28901: PUSH
28902: LD_INT 23
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: PPUSH
28921: CALL_OW 69
28925: PUSH
28926: FOR_IN
28927: IFFALSE 28981
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28929: LD_VAR 0 1
28933: PPUSH
28934: CALL_OW 257
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: LD_INT 2
28944: PUSH
28945: LD_INT 3
28947: PUSH
28948: LD_INT 4
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: IN
28957: IFFALSE 28979
// SetClass ( un , rand ( 1 , 4 ) ) ;
28959: LD_VAR 0 1
28963: PPUSH
28964: LD_INT 1
28966: PPUSH
28967: LD_INT 4
28969: PPUSH
28970: CALL_OW 12
28974: PPUSH
28975: CALL_OW 336
28979: GO 28926
28981: POP
28982: POP
// end ;
28983: PPOPN 1
28985: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28986: LD_EXP 67
28990: PUSH
28991: LD_EXP 79
28995: AND
28996: IFFALSE 29075
28998: GO 29000
29000: DISABLE
29001: LD_INT 0
29003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29004: LD_ADDR_VAR 0 1
29008: PUSH
29009: LD_INT 22
29011: PUSH
29012: LD_OWVAR 2
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 21
29023: PUSH
29024: LD_INT 3
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PPUSH
29035: CALL_OW 69
29039: ST_TO_ADDR
// if not tmp then
29040: LD_VAR 0 1
29044: NOT
29045: IFFALSE 29049
// exit ;
29047: GO 29075
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
29049: LD_VAR 0 1
29053: PUSH
29054: LD_INT 1
29056: PPUSH
29057: LD_VAR 0 1
29061: PPUSH
29062: CALL_OW 12
29066: ARRAY
29067: PPUSH
29068: LD_INT 100
29070: PPUSH
29071: CALL_OW 234
// end ;
29075: PPOPN 1
29077: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
29078: LD_EXP 67
29082: PUSH
29083: LD_EXP 81
29087: AND
29088: IFFALSE 29186
29090: GO 29092
29092: DISABLE
29093: LD_INT 0
29095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29096: LD_ADDR_VAR 0 1
29100: PUSH
29101: LD_INT 22
29103: PUSH
29104: LD_OWVAR 2
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 21
29115: PUSH
29116: LD_INT 1
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PPUSH
29127: CALL_OW 69
29131: ST_TO_ADDR
// if not tmp then
29132: LD_VAR 0 1
29136: NOT
29137: IFFALSE 29141
// exit ;
29139: GO 29186
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29141: LD_VAR 0 1
29145: PUSH
29146: LD_INT 1
29148: PPUSH
29149: LD_VAR 0 1
29153: PPUSH
29154: CALL_OW 12
29158: ARRAY
29159: PPUSH
29160: LD_INT 1
29162: PPUSH
29163: LD_INT 4
29165: PPUSH
29166: CALL_OW 12
29170: PPUSH
29171: LD_INT 3000
29173: PPUSH
29174: LD_INT 9000
29176: PPUSH
29177: CALL_OW 12
29181: PPUSH
29182: CALL_OW 492
// end ;
29186: PPOPN 1
29188: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29189: LD_EXP 67
29193: PUSH
29194: LD_EXP 82
29198: AND
29199: IFFALSE 29219
29201: GO 29203
29203: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29204: LD_INT 1
29206: PPUSH
29207: LD_OWVAR 2
29211: PPUSH
29212: LD_INT 0
29214: PPUSH
29215: CALL_OW 324
29219: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29220: LD_EXP 67
29224: PUSH
29225: LD_EXP 83
29229: AND
29230: IFFALSE 29313
29232: GO 29234
29234: DISABLE
29235: LD_INT 0
29237: PPUSH
29238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29239: LD_ADDR_VAR 0 2
29243: PUSH
29244: LD_INT 22
29246: PUSH
29247: LD_OWVAR 2
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 21
29258: PUSH
29259: LD_INT 3
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PPUSH
29270: CALL_OW 69
29274: ST_TO_ADDR
// if not tmp then
29275: LD_VAR 0 2
29279: NOT
29280: IFFALSE 29284
// exit ;
29282: GO 29313
// for i in tmp do
29284: LD_ADDR_VAR 0 1
29288: PUSH
29289: LD_VAR 0 2
29293: PUSH
29294: FOR_IN
29295: IFFALSE 29311
// SetBLevel ( i , 10 ) ;
29297: LD_VAR 0 1
29301: PPUSH
29302: LD_INT 10
29304: PPUSH
29305: CALL_OW 241
29309: GO 29294
29311: POP
29312: POP
// end ;
29313: PPOPN 2
29315: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29316: LD_EXP 67
29320: PUSH
29321: LD_EXP 84
29325: AND
29326: IFFALSE 29437
29328: GO 29330
29330: DISABLE
29331: LD_INT 0
29333: PPUSH
29334: PPUSH
29335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29336: LD_ADDR_VAR 0 3
29340: PUSH
29341: LD_INT 22
29343: PUSH
29344: LD_OWVAR 2
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 25
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PPUSH
29367: CALL_OW 69
29371: ST_TO_ADDR
// if not tmp then
29372: LD_VAR 0 3
29376: NOT
29377: IFFALSE 29381
// exit ;
29379: GO 29437
// un := tmp [ rand ( 1 , tmp ) ] ;
29381: LD_ADDR_VAR 0 2
29385: PUSH
29386: LD_VAR 0 3
29390: PUSH
29391: LD_INT 1
29393: PPUSH
29394: LD_VAR 0 3
29398: PPUSH
29399: CALL_OW 12
29403: ARRAY
29404: ST_TO_ADDR
// if Crawls ( un ) then
29405: LD_VAR 0 2
29409: PPUSH
29410: CALL_OW 318
29414: IFFALSE 29425
// ComWalk ( un ) ;
29416: LD_VAR 0 2
29420: PPUSH
29421: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29425: LD_VAR 0 2
29429: PPUSH
29430: LD_INT 5
29432: PPUSH
29433: CALL_OW 336
// end ;
29437: PPOPN 3
29439: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
29440: LD_EXP 67
29444: PUSH
29445: LD_EXP 85
29449: AND
29450: PUSH
29451: LD_OWVAR 67
29455: PUSH
29456: LD_INT 3
29458: LESS
29459: AND
29460: IFFALSE 29479
29462: GO 29464
29464: DISABLE
// Difficulty := Difficulty + 1 ;
29465: LD_ADDR_OWVAR 67
29469: PUSH
29470: LD_OWVAR 67
29474: PUSH
29475: LD_INT 1
29477: PLUS
29478: ST_TO_ADDR
29479: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29480: LD_EXP 67
29484: PUSH
29485: LD_EXP 86
29489: AND
29490: IFFALSE 29593
29492: GO 29494
29494: DISABLE
29495: LD_INT 0
29497: PPUSH
// begin for i := 1 to 5 do
29498: LD_ADDR_VAR 0 1
29502: PUSH
29503: DOUBLE
29504: LD_INT 1
29506: DEC
29507: ST_TO_ADDR
29508: LD_INT 5
29510: PUSH
29511: FOR_TO
29512: IFFALSE 29591
// begin uc_nation := nation_nature ;
29514: LD_ADDR_OWVAR 21
29518: PUSH
29519: LD_INT 0
29521: ST_TO_ADDR
// uc_side := 0 ;
29522: LD_ADDR_OWVAR 20
29526: PUSH
29527: LD_INT 0
29529: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29530: LD_ADDR_OWVAR 29
29534: PUSH
29535: LD_INT 12
29537: PUSH
29538: LD_INT 12
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: ST_TO_ADDR
// hc_agressivity := 20 ;
29545: LD_ADDR_OWVAR 35
29549: PUSH
29550: LD_INT 20
29552: ST_TO_ADDR
// hc_class := class_tiger ;
29553: LD_ADDR_OWVAR 28
29557: PUSH
29558: LD_INT 14
29560: ST_TO_ADDR
// hc_gallery :=  ;
29561: LD_ADDR_OWVAR 33
29565: PUSH
29566: LD_STRING 
29568: ST_TO_ADDR
// hc_name :=  ;
29569: LD_ADDR_OWVAR 26
29573: PUSH
29574: LD_STRING 
29576: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29577: CALL_OW 44
29581: PPUSH
29582: LD_INT 0
29584: PPUSH
29585: CALL_OW 51
// end ;
29589: GO 29511
29591: POP
29592: POP
// end ;
29593: PPOPN 1
29595: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29596: LD_EXP 67
29600: PUSH
29601: LD_EXP 87
29605: AND
29606: IFFALSE 29615
29608: GO 29610
29610: DISABLE
// StreamSibBomb ;
29611: CALL 29616 0 0
29615: END
// export function StreamSibBomb ; var i , x , y ; begin
29616: LD_INT 0
29618: PPUSH
29619: PPUSH
29620: PPUSH
29621: PPUSH
// result := false ;
29622: LD_ADDR_VAR 0 1
29626: PUSH
29627: LD_INT 0
29629: ST_TO_ADDR
// for i := 1 to 16 do
29630: LD_ADDR_VAR 0 2
29634: PUSH
29635: DOUBLE
29636: LD_INT 1
29638: DEC
29639: ST_TO_ADDR
29640: LD_INT 16
29642: PUSH
29643: FOR_TO
29644: IFFALSE 29843
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29646: LD_ADDR_VAR 0 3
29650: PUSH
29651: LD_INT 10
29653: PUSH
29654: LD_INT 20
29656: PUSH
29657: LD_INT 30
29659: PUSH
29660: LD_INT 40
29662: PUSH
29663: LD_INT 50
29665: PUSH
29666: LD_INT 60
29668: PUSH
29669: LD_INT 70
29671: PUSH
29672: LD_INT 80
29674: PUSH
29675: LD_INT 90
29677: PUSH
29678: LD_INT 100
29680: PUSH
29681: LD_INT 110
29683: PUSH
29684: LD_INT 120
29686: PUSH
29687: LD_INT 130
29689: PUSH
29690: LD_INT 140
29692: PUSH
29693: LD_INT 150
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 1
29715: PPUSH
29716: LD_INT 15
29718: PPUSH
29719: CALL_OW 12
29723: ARRAY
29724: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29725: LD_ADDR_VAR 0 4
29729: PUSH
29730: LD_INT 10
29732: PUSH
29733: LD_INT 20
29735: PUSH
29736: LD_INT 30
29738: PUSH
29739: LD_INT 40
29741: PUSH
29742: LD_INT 50
29744: PUSH
29745: LD_INT 60
29747: PUSH
29748: LD_INT 70
29750: PUSH
29751: LD_INT 80
29753: PUSH
29754: LD_INT 90
29756: PUSH
29757: LD_INT 100
29759: PUSH
29760: LD_INT 110
29762: PUSH
29763: LD_INT 120
29765: PUSH
29766: LD_INT 130
29768: PUSH
29769: LD_INT 140
29771: PUSH
29772: LD_INT 150
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: PPUSH
29795: LD_INT 15
29797: PPUSH
29798: CALL_OW 12
29802: ARRAY
29803: ST_TO_ADDR
// if ValidHex ( x , y ) then
29804: LD_VAR 0 3
29808: PPUSH
29809: LD_VAR 0 4
29813: PPUSH
29814: CALL_OW 488
29818: IFFALSE 29841
// begin result := [ x , y ] ;
29820: LD_ADDR_VAR 0 1
29824: PUSH
29825: LD_VAR 0 3
29829: PUSH
29830: LD_VAR 0 4
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: ST_TO_ADDR
// break ;
29839: GO 29843
// end ; end ;
29841: GO 29643
29843: POP
29844: POP
// if result then
29845: LD_VAR 0 1
29849: IFFALSE 29909
// begin ToLua ( playSibBomb() ) ;
29851: LD_STRING playSibBomb()
29853: PPUSH
29854: CALL_OW 559
// wait ( 0 0$14 ) ;
29858: LD_INT 490
29860: PPUSH
29861: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29865: LD_VAR 0 1
29869: PUSH
29870: LD_INT 1
29872: ARRAY
29873: PPUSH
29874: LD_VAR 0 1
29878: PUSH
29879: LD_INT 2
29881: ARRAY
29882: PPUSH
29883: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29887: LD_VAR 0 1
29891: PUSH
29892: LD_INT 1
29894: ARRAY
29895: PPUSH
29896: LD_VAR 0 1
29900: PUSH
29901: LD_INT 2
29903: ARRAY
29904: PPUSH
29905: CALL_OW 429
// end ; end ;
29909: LD_VAR 0 1
29913: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29914: LD_EXP 67
29918: PUSH
29919: LD_EXP 89
29923: AND
29924: IFFALSE 29936
29926: GO 29928
29928: DISABLE
// YouLost (  ) ;
29929: LD_STRING 
29931: PPUSH
29932: CALL_OW 104
29936: END
// every 0 0$1 trigger StreamModeActive and sFog do
29937: LD_EXP 67
29941: PUSH
29942: LD_EXP 88
29946: AND
29947: IFFALSE 29961
29949: GO 29951
29951: DISABLE
// FogOff ( your_side ) ;
29952: LD_OWVAR 2
29956: PPUSH
29957: CALL_OW 344
29961: END
// every 0 0$1 trigger StreamModeActive and sSun do
29962: LD_EXP 67
29966: PUSH
29967: LD_EXP 90
29971: AND
29972: IFFALSE 30000
29974: GO 29976
29976: DISABLE
// begin solar_recharge_percent := 0 ;
29977: LD_ADDR_OWVAR 79
29981: PUSH
29982: LD_INT 0
29984: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29985: LD_INT 10500
29987: PPUSH
29988: CALL_OW 67
// solar_recharge_percent := 100 ;
29992: LD_ADDR_OWVAR 79
29996: PUSH
29997: LD_INT 100
29999: ST_TO_ADDR
// end ;
30000: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
30001: LD_EXP 67
30005: PUSH
30006: LD_EXP 91
30010: AND
30011: IFFALSE 30250
30013: GO 30015
30015: DISABLE
30016: LD_INT 0
30018: PPUSH
30019: PPUSH
30020: PPUSH
// begin tmp := [ ] ;
30021: LD_ADDR_VAR 0 3
30025: PUSH
30026: EMPTY
30027: ST_TO_ADDR
// for i := 1 to 6 do
30028: LD_ADDR_VAR 0 1
30032: PUSH
30033: DOUBLE
30034: LD_INT 1
30036: DEC
30037: ST_TO_ADDR
30038: LD_INT 6
30040: PUSH
30041: FOR_TO
30042: IFFALSE 30147
// begin uc_nation := nation_nature ;
30044: LD_ADDR_OWVAR 21
30048: PUSH
30049: LD_INT 0
30051: ST_TO_ADDR
// uc_side := 0 ;
30052: LD_ADDR_OWVAR 20
30056: PUSH
30057: LD_INT 0
30059: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30060: LD_ADDR_OWVAR 29
30064: PUSH
30065: LD_INT 12
30067: PUSH
30068: LD_INT 12
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: ST_TO_ADDR
// hc_agressivity := 20 ;
30075: LD_ADDR_OWVAR 35
30079: PUSH
30080: LD_INT 20
30082: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
30083: LD_ADDR_OWVAR 28
30087: PUSH
30088: LD_INT 17
30090: ST_TO_ADDR
// hc_gallery :=  ;
30091: LD_ADDR_OWVAR 33
30095: PUSH
30096: LD_STRING 
30098: ST_TO_ADDR
// hc_name :=  ;
30099: LD_ADDR_OWVAR 26
30103: PUSH
30104: LD_STRING 
30106: ST_TO_ADDR
// un := CreateHuman ;
30107: LD_ADDR_VAR 0 2
30111: PUSH
30112: CALL_OW 44
30116: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30117: LD_VAR 0 2
30121: PPUSH
30122: LD_INT 1
30124: PPUSH
30125: CALL_OW 51
// tmp := tmp ^ un ;
30129: LD_ADDR_VAR 0 3
30133: PUSH
30134: LD_VAR 0 3
30138: PUSH
30139: LD_VAR 0 2
30143: ADD
30144: ST_TO_ADDR
// end ;
30145: GO 30041
30147: POP
30148: POP
// repeat wait ( 0 0$1 ) ;
30149: LD_INT 35
30151: PPUSH
30152: CALL_OW 67
// for un in tmp do
30156: LD_ADDR_VAR 0 2
30160: PUSH
30161: LD_VAR 0 3
30165: PUSH
30166: FOR_IN
30167: IFFALSE 30241
// begin if IsDead ( un ) then
30169: LD_VAR 0 2
30173: PPUSH
30174: CALL_OW 301
30178: IFFALSE 30198
// begin tmp := tmp diff un ;
30180: LD_ADDR_VAR 0 3
30184: PUSH
30185: LD_VAR 0 3
30189: PUSH
30190: LD_VAR 0 2
30194: DIFF
30195: ST_TO_ADDR
// continue ;
30196: GO 30166
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30198: LD_VAR 0 2
30202: PPUSH
30203: LD_INT 3
30205: PUSH
30206: LD_INT 22
30208: PUSH
30209: LD_INT 0
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PPUSH
30220: CALL_OW 69
30224: PPUSH
30225: LD_VAR 0 2
30229: PPUSH
30230: CALL_OW 74
30234: PPUSH
30235: CALL_OW 115
// end ;
30239: GO 30166
30241: POP
30242: POP
// until not tmp ;
30243: LD_VAR 0 3
30247: NOT
30248: IFFALSE 30149
// end ;
30250: PPOPN 3
30252: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30253: LD_EXP 67
30257: PUSH
30258: LD_EXP 92
30262: AND
30263: IFFALSE 30317
30265: GO 30267
30267: DISABLE
// begin ToLua ( displayTroll(); ) ;
30268: LD_STRING displayTroll();
30270: PPUSH
30271: CALL_OW 559
// wait ( 3 3$00 ) ;
30275: LD_INT 6300
30277: PPUSH
30278: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30282: LD_STRING hideTroll();
30284: PPUSH
30285: CALL_OW 559
// wait ( 1 1$00 ) ;
30289: LD_INT 2100
30291: PPUSH
30292: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30296: LD_STRING displayTroll();
30298: PPUSH
30299: CALL_OW 559
// wait ( 1 1$00 ) ;
30303: LD_INT 2100
30305: PPUSH
30306: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30310: LD_STRING hideTroll();
30312: PPUSH
30313: CALL_OW 559
// end ;
30317: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30318: LD_EXP 67
30322: PUSH
30323: LD_EXP 93
30327: AND
30328: IFFALSE 30391
30330: GO 30332
30332: DISABLE
30333: LD_INT 0
30335: PPUSH
// begin p := 0 ;
30336: LD_ADDR_VAR 0 1
30340: PUSH
30341: LD_INT 0
30343: ST_TO_ADDR
// repeat game_speed := 1 ;
30344: LD_ADDR_OWVAR 65
30348: PUSH
30349: LD_INT 1
30351: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30352: LD_INT 35
30354: PPUSH
30355: CALL_OW 67
// p := p + 1 ;
30359: LD_ADDR_VAR 0 1
30363: PUSH
30364: LD_VAR 0 1
30368: PUSH
30369: LD_INT 1
30371: PLUS
30372: ST_TO_ADDR
// until p >= 60 ;
30373: LD_VAR 0 1
30377: PUSH
30378: LD_INT 60
30380: GREATEREQUAL
30381: IFFALSE 30344
// game_speed := 4 ;
30383: LD_ADDR_OWVAR 65
30387: PUSH
30388: LD_INT 4
30390: ST_TO_ADDR
// end ;
30391: PPOPN 1
30393: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30394: LD_EXP 67
30398: PUSH
30399: LD_EXP 94
30403: AND
30404: IFFALSE 30550
30406: GO 30408
30408: DISABLE
30409: LD_INT 0
30411: PPUSH
30412: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30413: LD_ADDR_VAR 0 1
30417: PUSH
30418: LD_INT 22
30420: PUSH
30421: LD_OWVAR 2
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 2
30432: PUSH
30433: LD_INT 30
30435: PUSH
30436: LD_INT 0
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 30
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: LIST
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PPUSH
30462: CALL_OW 69
30466: ST_TO_ADDR
// if not depot then
30467: LD_VAR 0 1
30471: NOT
30472: IFFALSE 30476
// exit ;
30474: GO 30550
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30476: LD_ADDR_VAR 0 2
30480: PUSH
30481: LD_VAR 0 1
30485: PUSH
30486: LD_INT 1
30488: PPUSH
30489: LD_VAR 0 1
30493: PPUSH
30494: CALL_OW 12
30498: ARRAY
30499: PPUSH
30500: CALL_OW 274
30504: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30505: LD_VAR 0 2
30509: PPUSH
30510: LD_INT 1
30512: PPUSH
30513: LD_INT 0
30515: PPUSH
30516: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30520: LD_VAR 0 2
30524: PPUSH
30525: LD_INT 2
30527: PPUSH
30528: LD_INT 0
30530: PPUSH
30531: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30535: LD_VAR 0 2
30539: PPUSH
30540: LD_INT 3
30542: PPUSH
30543: LD_INT 0
30545: PPUSH
30546: CALL_OW 277
// end ;
30550: PPOPN 2
30552: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30553: LD_EXP 67
30557: PUSH
30558: LD_EXP 95
30562: AND
30563: IFFALSE 30660
30565: GO 30567
30567: DISABLE
30568: LD_INT 0
30570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30571: LD_ADDR_VAR 0 1
30575: PUSH
30576: LD_INT 22
30578: PUSH
30579: LD_OWVAR 2
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 21
30590: PUSH
30591: LD_INT 1
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 3
30600: PUSH
30601: LD_INT 23
30603: PUSH
30604: LD_INT 0
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: PPUSH
30620: CALL_OW 69
30624: ST_TO_ADDR
// if not tmp then
30625: LD_VAR 0 1
30629: NOT
30630: IFFALSE 30634
// exit ;
30632: GO 30660
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30634: LD_VAR 0 1
30638: PUSH
30639: LD_INT 1
30641: PPUSH
30642: LD_VAR 0 1
30646: PPUSH
30647: CALL_OW 12
30651: ARRAY
30652: PPUSH
30653: LD_INT 200
30655: PPUSH
30656: CALL_OW 234
// end ;
30660: PPOPN 1
30662: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30663: LD_EXP 67
30667: PUSH
30668: LD_EXP 96
30672: AND
30673: IFFALSE 30752
30675: GO 30677
30677: DISABLE
30678: LD_INT 0
30680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30681: LD_ADDR_VAR 0 1
30685: PUSH
30686: LD_INT 22
30688: PUSH
30689: LD_OWVAR 2
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 21
30700: PUSH
30701: LD_INT 2
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PPUSH
30712: CALL_OW 69
30716: ST_TO_ADDR
// if not tmp then
30717: LD_VAR 0 1
30721: NOT
30722: IFFALSE 30726
// exit ;
30724: GO 30752
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30726: LD_VAR 0 1
30730: PUSH
30731: LD_INT 1
30733: PPUSH
30734: LD_VAR 0 1
30738: PPUSH
30739: CALL_OW 12
30743: ARRAY
30744: PPUSH
30745: LD_INT 60
30747: PPUSH
30748: CALL_OW 234
// end ;
30752: PPOPN 1
30754: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30755: LD_EXP 67
30759: PUSH
30760: LD_EXP 97
30764: AND
30765: IFFALSE 30864
30767: GO 30769
30769: DISABLE
30770: LD_INT 0
30772: PPUSH
30773: PPUSH
// begin enable ;
30774: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30775: LD_ADDR_VAR 0 1
30779: PUSH
30780: LD_INT 22
30782: PUSH
30783: LD_OWVAR 2
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 61
30794: PUSH
30795: EMPTY
30796: LIST
30797: PUSH
30798: LD_INT 33
30800: PUSH
30801: LD_INT 2
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: LIST
30812: PPUSH
30813: CALL_OW 69
30817: ST_TO_ADDR
// if not tmp then
30818: LD_VAR 0 1
30822: NOT
30823: IFFALSE 30827
// exit ;
30825: GO 30864
// for i in tmp do
30827: LD_ADDR_VAR 0 2
30831: PUSH
30832: LD_VAR 0 1
30836: PUSH
30837: FOR_IN
30838: IFFALSE 30862
// if IsControledBy ( i ) then
30840: LD_VAR 0 2
30844: PPUSH
30845: CALL_OW 312
30849: IFFALSE 30860
// ComUnlink ( i ) ;
30851: LD_VAR 0 2
30855: PPUSH
30856: CALL_OW 136
30860: GO 30837
30862: POP
30863: POP
// end ;
30864: PPOPN 2
30866: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30867: LD_EXP 67
30871: PUSH
30872: LD_EXP 98
30876: AND
30877: IFFALSE 31017
30879: GO 30881
30881: DISABLE
30882: LD_INT 0
30884: PPUSH
30885: PPUSH
// begin ToLua ( displayPowell(); ) ;
30886: LD_STRING displayPowell();
30888: PPUSH
30889: CALL_OW 559
// uc_side := 0 ;
30893: LD_ADDR_OWVAR 20
30897: PUSH
30898: LD_INT 0
30900: ST_TO_ADDR
// uc_nation := 2 ;
30901: LD_ADDR_OWVAR 21
30905: PUSH
30906: LD_INT 2
30908: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30909: LD_ADDR_OWVAR 37
30913: PUSH
30914: LD_INT 14
30916: ST_TO_ADDR
// vc_engine := engine_siberite ;
30917: LD_ADDR_OWVAR 39
30921: PUSH
30922: LD_INT 3
30924: ST_TO_ADDR
// vc_control := control_apeman ;
30925: LD_ADDR_OWVAR 38
30929: PUSH
30930: LD_INT 5
30932: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30933: LD_ADDR_OWVAR 40
30937: PUSH
30938: LD_INT 29
30940: ST_TO_ADDR
// un := CreateVehicle ;
30941: LD_ADDR_VAR 0 2
30945: PUSH
30946: CALL_OW 45
30950: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30951: LD_VAR 0 2
30955: PPUSH
30956: LD_INT 1
30958: PPUSH
30959: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30963: LD_INT 35
30965: PPUSH
30966: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30970: LD_VAR 0 2
30974: PPUSH
30975: LD_INT 22
30977: PUSH
30978: LD_OWVAR 2
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PPUSH
30987: CALL_OW 69
30991: PPUSH
30992: LD_VAR 0 2
30996: PPUSH
30997: CALL_OW 74
31001: PPUSH
31002: CALL_OW 115
// until IsDead ( un ) ;
31006: LD_VAR 0 2
31010: PPUSH
31011: CALL_OW 301
31015: IFFALSE 30963
// end ;
31017: PPOPN 2
31019: END
// every 0 0$1 trigger StreamModeActive and sStu do
31020: LD_EXP 67
31024: PUSH
31025: LD_EXP 106
31029: AND
31030: IFFALSE 31046
31032: GO 31034
31034: DISABLE
// begin ToLua ( displayStucuk(); ) ;
31035: LD_STRING displayStucuk();
31037: PPUSH
31038: CALL_OW 559
// ResetFog ;
31042: CALL_OW 335
// end ;
31046: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
31047: LD_EXP 67
31051: PUSH
31052: LD_EXP 99
31056: AND
31057: IFFALSE 31198
31059: GO 31061
31061: DISABLE
31062: LD_INT 0
31064: PPUSH
31065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31066: LD_ADDR_VAR 0 2
31070: PUSH
31071: LD_INT 22
31073: PUSH
31074: LD_OWVAR 2
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 21
31085: PUSH
31086: LD_INT 1
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PPUSH
31097: CALL_OW 69
31101: ST_TO_ADDR
// if not tmp then
31102: LD_VAR 0 2
31106: NOT
31107: IFFALSE 31111
// exit ;
31109: GO 31198
// un := tmp [ rand ( 1 , tmp ) ] ;
31111: LD_ADDR_VAR 0 1
31115: PUSH
31116: LD_VAR 0 2
31120: PUSH
31121: LD_INT 1
31123: PPUSH
31124: LD_VAR 0 2
31128: PPUSH
31129: CALL_OW 12
31133: ARRAY
31134: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31135: LD_VAR 0 1
31139: PPUSH
31140: LD_INT 0
31142: PPUSH
31143: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31147: LD_VAR 0 1
31151: PPUSH
31152: LD_OWVAR 3
31156: PUSH
31157: LD_VAR 0 1
31161: DIFF
31162: PPUSH
31163: LD_VAR 0 1
31167: PPUSH
31168: CALL_OW 74
31172: PPUSH
31173: CALL_OW 115
// wait ( 0 0$20 ) ;
31177: LD_INT 700
31179: PPUSH
31180: CALL_OW 67
// SetSide ( un , your_side ) ;
31184: LD_VAR 0 1
31188: PPUSH
31189: LD_OWVAR 2
31193: PPUSH
31194: CALL_OW 235
// end ;
31198: PPOPN 2
31200: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31201: LD_EXP 67
31205: PUSH
31206: LD_EXP 100
31210: AND
31211: IFFALSE 31317
31213: GO 31215
31215: DISABLE
31216: LD_INT 0
31218: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31219: LD_ADDR_VAR 0 1
31223: PUSH
31224: LD_INT 22
31226: PUSH
31227: LD_OWVAR 2
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 2
31238: PUSH
31239: LD_INT 30
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 30
31251: PUSH
31252: LD_INT 1
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: LIST
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PPUSH
31268: CALL_OW 69
31272: ST_TO_ADDR
// if not depot then
31273: LD_VAR 0 1
31277: NOT
31278: IFFALSE 31282
// exit ;
31280: GO 31317
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31282: LD_VAR 0 1
31286: PUSH
31287: LD_INT 1
31289: ARRAY
31290: PPUSH
31291: CALL_OW 250
31295: PPUSH
31296: LD_VAR 0 1
31300: PUSH
31301: LD_INT 1
31303: ARRAY
31304: PPUSH
31305: CALL_OW 251
31309: PPUSH
31310: LD_INT 70
31312: PPUSH
31313: CALL_OW 495
// end ;
31317: PPOPN 1
31319: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31320: LD_EXP 67
31324: PUSH
31325: LD_EXP 101
31329: AND
31330: IFFALSE 31541
31332: GO 31334
31334: DISABLE
31335: LD_INT 0
31337: PPUSH
31338: PPUSH
31339: PPUSH
31340: PPUSH
31341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31342: LD_ADDR_VAR 0 5
31346: PUSH
31347: LD_INT 22
31349: PUSH
31350: LD_OWVAR 2
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 21
31361: PUSH
31362: LD_INT 1
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PPUSH
31373: CALL_OW 69
31377: ST_TO_ADDR
// if not tmp then
31378: LD_VAR 0 5
31382: NOT
31383: IFFALSE 31387
// exit ;
31385: GO 31541
// for i in tmp do
31387: LD_ADDR_VAR 0 1
31391: PUSH
31392: LD_VAR 0 5
31396: PUSH
31397: FOR_IN
31398: IFFALSE 31539
// begin d := rand ( 0 , 5 ) ;
31400: LD_ADDR_VAR 0 4
31404: PUSH
31405: LD_INT 0
31407: PPUSH
31408: LD_INT 5
31410: PPUSH
31411: CALL_OW 12
31415: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31416: LD_ADDR_VAR 0 2
31420: PUSH
31421: LD_VAR 0 1
31425: PPUSH
31426: CALL_OW 250
31430: PPUSH
31431: LD_VAR 0 4
31435: PPUSH
31436: LD_INT 3
31438: PPUSH
31439: LD_INT 12
31441: PPUSH
31442: CALL_OW 12
31446: PPUSH
31447: CALL_OW 272
31451: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31452: LD_ADDR_VAR 0 3
31456: PUSH
31457: LD_VAR 0 1
31461: PPUSH
31462: CALL_OW 251
31466: PPUSH
31467: LD_VAR 0 4
31471: PPUSH
31472: LD_INT 3
31474: PPUSH
31475: LD_INT 12
31477: PPUSH
31478: CALL_OW 12
31482: PPUSH
31483: CALL_OW 273
31487: ST_TO_ADDR
// if ValidHex ( x , y ) then
31488: LD_VAR 0 2
31492: PPUSH
31493: LD_VAR 0 3
31497: PPUSH
31498: CALL_OW 488
31502: IFFALSE 31537
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31504: LD_VAR 0 1
31508: PPUSH
31509: LD_VAR 0 2
31513: PPUSH
31514: LD_VAR 0 3
31518: PPUSH
31519: LD_INT 3
31521: PPUSH
31522: LD_INT 6
31524: PPUSH
31525: CALL_OW 12
31529: PPUSH
31530: LD_INT 1
31532: PPUSH
31533: CALL_OW 483
// end ;
31537: GO 31397
31539: POP
31540: POP
// end ;
31541: PPOPN 5
31543: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31544: LD_EXP 67
31548: PUSH
31549: LD_EXP 102
31553: AND
31554: IFFALSE 31648
31556: GO 31558
31558: DISABLE
31559: LD_INT 0
31561: PPUSH
31562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31563: LD_ADDR_VAR 0 2
31567: PUSH
31568: LD_INT 22
31570: PUSH
31571: LD_OWVAR 2
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 32
31582: PUSH
31583: LD_INT 1
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 21
31592: PUSH
31593: LD_INT 2
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: LIST
31604: PPUSH
31605: CALL_OW 69
31609: ST_TO_ADDR
// if not tmp then
31610: LD_VAR 0 2
31614: NOT
31615: IFFALSE 31619
// exit ;
31617: GO 31648
// for i in tmp do
31619: LD_ADDR_VAR 0 1
31623: PUSH
31624: LD_VAR 0 2
31628: PUSH
31629: FOR_IN
31630: IFFALSE 31646
// SetFuel ( i , 0 ) ;
31632: LD_VAR 0 1
31636: PPUSH
31637: LD_INT 0
31639: PPUSH
31640: CALL_OW 240
31644: GO 31629
31646: POP
31647: POP
// end ;
31648: PPOPN 2
31650: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31651: LD_EXP 67
31655: PUSH
31656: LD_EXP 103
31660: AND
31661: IFFALSE 31727
31663: GO 31665
31665: DISABLE
31666: LD_INT 0
31668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31669: LD_ADDR_VAR 0 1
31673: PUSH
31674: LD_INT 22
31676: PUSH
31677: LD_OWVAR 2
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 30
31688: PUSH
31689: LD_INT 29
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PPUSH
31700: CALL_OW 69
31704: ST_TO_ADDR
// if not tmp then
31705: LD_VAR 0 1
31709: NOT
31710: IFFALSE 31714
// exit ;
31712: GO 31727
// DestroyUnit ( tmp [ 1 ] ) ;
31714: LD_VAR 0 1
31718: PUSH
31719: LD_INT 1
31721: ARRAY
31722: PPUSH
31723: CALL_OW 65
// end ;
31727: PPOPN 1
31729: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31730: LD_EXP 67
31734: PUSH
31735: LD_EXP 105
31739: AND
31740: IFFALSE 31869
31742: GO 31744
31744: DISABLE
31745: LD_INT 0
31747: PPUSH
// begin uc_side := 0 ;
31748: LD_ADDR_OWVAR 20
31752: PUSH
31753: LD_INT 0
31755: ST_TO_ADDR
// uc_nation := nation_arabian ;
31756: LD_ADDR_OWVAR 21
31760: PUSH
31761: LD_INT 2
31763: ST_TO_ADDR
// hc_gallery :=  ;
31764: LD_ADDR_OWVAR 33
31768: PUSH
31769: LD_STRING 
31771: ST_TO_ADDR
// hc_name :=  ;
31772: LD_ADDR_OWVAR 26
31776: PUSH
31777: LD_STRING 
31779: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31780: LD_INT 1
31782: PPUSH
31783: LD_INT 11
31785: PPUSH
31786: LD_INT 10
31788: PPUSH
31789: CALL_OW 380
// un := CreateHuman ;
31793: LD_ADDR_VAR 0 1
31797: PUSH
31798: CALL_OW 44
31802: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31803: LD_VAR 0 1
31807: PPUSH
31808: LD_INT 1
31810: PPUSH
31811: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31815: LD_INT 35
31817: PPUSH
31818: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31822: LD_VAR 0 1
31826: PPUSH
31827: LD_INT 22
31829: PUSH
31830: LD_OWVAR 2
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PPUSH
31839: CALL_OW 69
31843: PPUSH
31844: LD_VAR 0 1
31848: PPUSH
31849: CALL_OW 74
31853: PPUSH
31854: CALL_OW 115
// until IsDead ( un ) ;
31858: LD_VAR 0 1
31862: PPUSH
31863: CALL_OW 301
31867: IFFALSE 31815
// end ;
31869: PPOPN 1
31871: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31872: LD_EXP 67
31876: PUSH
31877: LD_EXP 107
31881: AND
31882: IFFALSE 31894
31884: GO 31886
31886: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31887: LD_STRING earthquake(getX(game), 0, 32)
31889: PPUSH
31890: CALL_OW 559
31894: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31895: LD_EXP 67
31899: PUSH
31900: LD_EXP 108
31904: AND
31905: IFFALSE 31996
31907: GO 31909
31909: DISABLE
31910: LD_INT 0
31912: PPUSH
// begin enable ;
31913: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31914: LD_ADDR_VAR 0 1
31918: PUSH
31919: LD_INT 22
31921: PUSH
31922: LD_OWVAR 2
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 21
31933: PUSH
31934: LD_INT 2
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 33
31943: PUSH
31944: LD_INT 3
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: LIST
31955: PPUSH
31956: CALL_OW 69
31960: ST_TO_ADDR
// if not tmp then
31961: LD_VAR 0 1
31965: NOT
31966: IFFALSE 31970
// exit ;
31968: GO 31996
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31970: LD_VAR 0 1
31974: PUSH
31975: LD_INT 1
31977: PPUSH
31978: LD_VAR 0 1
31982: PPUSH
31983: CALL_OW 12
31987: ARRAY
31988: PPUSH
31989: LD_INT 1
31991: PPUSH
31992: CALL_OW 234
// end ;
31996: PPOPN 1
31998: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31999: LD_EXP 67
32003: PUSH
32004: LD_EXP 109
32008: AND
32009: IFFALSE 32150
32011: GO 32013
32013: DISABLE
32014: LD_INT 0
32016: PPUSH
32017: PPUSH
32018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32019: LD_ADDR_VAR 0 3
32023: PUSH
32024: LD_INT 22
32026: PUSH
32027: LD_OWVAR 2
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 25
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PPUSH
32050: CALL_OW 69
32054: ST_TO_ADDR
// if not tmp then
32055: LD_VAR 0 3
32059: NOT
32060: IFFALSE 32064
// exit ;
32062: GO 32150
// un := tmp [ rand ( 1 , tmp ) ] ;
32064: LD_ADDR_VAR 0 2
32068: PUSH
32069: LD_VAR 0 3
32073: PUSH
32074: LD_INT 1
32076: PPUSH
32077: LD_VAR 0 3
32081: PPUSH
32082: CALL_OW 12
32086: ARRAY
32087: ST_TO_ADDR
// if Crawls ( un ) then
32088: LD_VAR 0 2
32092: PPUSH
32093: CALL_OW 318
32097: IFFALSE 32108
// ComWalk ( un ) ;
32099: LD_VAR 0 2
32103: PPUSH
32104: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32108: LD_VAR 0 2
32112: PPUSH
32113: LD_INT 9
32115: PPUSH
32116: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32120: LD_INT 28
32122: PPUSH
32123: LD_OWVAR 2
32127: PPUSH
32128: LD_INT 2
32130: PPUSH
32131: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32135: LD_INT 29
32137: PPUSH
32138: LD_OWVAR 2
32142: PPUSH
32143: LD_INT 2
32145: PPUSH
32146: CALL_OW 322
// end ;
32150: PPOPN 3
32152: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32153: LD_EXP 67
32157: PUSH
32158: LD_EXP 110
32162: AND
32163: IFFALSE 32274
32165: GO 32167
32167: DISABLE
32168: LD_INT 0
32170: PPUSH
32171: PPUSH
32172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32173: LD_ADDR_VAR 0 3
32177: PUSH
32178: LD_INT 22
32180: PUSH
32181: LD_OWVAR 2
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 25
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PPUSH
32204: CALL_OW 69
32208: ST_TO_ADDR
// if not tmp then
32209: LD_VAR 0 3
32213: NOT
32214: IFFALSE 32218
// exit ;
32216: GO 32274
// un := tmp [ rand ( 1 , tmp ) ] ;
32218: LD_ADDR_VAR 0 2
32222: PUSH
32223: LD_VAR 0 3
32227: PUSH
32228: LD_INT 1
32230: PPUSH
32231: LD_VAR 0 3
32235: PPUSH
32236: CALL_OW 12
32240: ARRAY
32241: ST_TO_ADDR
// if Crawls ( un ) then
32242: LD_VAR 0 2
32246: PPUSH
32247: CALL_OW 318
32251: IFFALSE 32262
// ComWalk ( un ) ;
32253: LD_VAR 0 2
32257: PPUSH
32258: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32262: LD_VAR 0 2
32266: PPUSH
32267: LD_INT 8
32269: PPUSH
32270: CALL_OW 336
// end ;
32274: PPOPN 3
32276: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32277: LD_EXP 67
32281: PUSH
32282: LD_EXP 111
32286: AND
32287: IFFALSE 32431
32289: GO 32291
32291: DISABLE
32292: LD_INT 0
32294: PPUSH
32295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32296: LD_ADDR_VAR 0 2
32300: PUSH
32301: LD_INT 22
32303: PUSH
32304: LD_OWVAR 2
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 21
32315: PUSH
32316: LD_INT 2
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 2
32325: PUSH
32326: LD_INT 34
32328: PUSH
32329: LD_INT 12
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 34
32338: PUSH
32339: LD_INT 51
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 34
32348: PUSH
32349: LD_INT 32
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: PPUSH
32367: CALL_OW 69
32371: ST_TO_ADDR
// if not tmp then
32372: LD_VAR 0 2
32376: NOT
32377: IFFALSE 32381
// exit ;
32379: GO 32431
// for i in tmp do
32381: LD_ADDR_VAR 0 1
32385: PUSH
32386: LD_VAR 0 2
32390: PUSH
32391: FOR_IN
32392: IFFALSE 32429
// if GetCargo ( i , mat_artifact ) = 0 then
32394: LD_VAR 0 1
32398: PPUSH
32399: LD_INT 4
32401: PPUSH
32402: CALL_OW 289
32406: PUSH
32407: LD_INT 0
32409: EQUAL
32410: IFFALSE 32427
// SetCargo ( i , mat_siberit , 100 ) ;
32412: LD_VAR 0 1
32416: PPUSH
32417: LD_INT 3
32419: PPUSH
32420: LD_INT 100
32422: PPUSH
32423: CALL_OW 290
32427: GO 32391
32429: POP
32430: POP
// end ;
32431: PPOPN 2
32433: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32434: LD_EXP 67
32438: PUSH
32439: LD_EXP 112
32443: AND
32444: IFFALSE 32627
32446: GO 32448
32448: DISABLE
32449: LD_INT 0
32451: PPUSH
32452: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32453: LD_ADDR_VAR 0 2
32457: PUSH
32458: LD_INT 22
32460: PUSH
32461: LD_OWVAR 2
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PPUSH
32470: CALL_OW 69
32474: ST_TO_ADDR
// if not tmp then
32475: LD_VAR 0 2
32479: NOT
32480: IFFALSE 32484
// exit ;
32482: GO 32627
// for i := 1 to 2 do
32484: LD_ADDR_VAR 0 1
32488: PUSH
32489: DOUBLE
32490: LD_INT 1
32492: DEC
32493: ST_TO_ADDR
32494: LD_INT 2
32496: PUSH
32497: FOR_TO
32498: IFFALSE 32625
// begin uc_side := your_side ;
32500: LD_ADDR_OWVAR 20
32504: PUSH
32505: LD_OWVAR 2
32509: ST_TO_ADDR
// uc_nation := nation_american ;
32510: LD_ADDR_OWVAR 21
32514: PUSH
32515: LD_INT 1
32517: ST_TO_ADDR
// vc_chassis := us_morphling ;
32518: LD_ADDR_OWVAR 37
32522: PUSH
32523: LD_INT 5
32525: ST_TO_ADDR
// vc_engine := engine_siberite ;
32526: LD_ADDR_OWVAR 39
32530: PUSH
32531: LD_INT 3
32533: ST_TO_ADDR
// vc_control := control_computer ;
32534: LD_ADDR_OWVAR 38
32538: PUSH
32539: LD_INT 3
32541: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32542: LD_ADDR_OWVAR 40
32546: PUSH
32547: LD_INT 10
32549: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32550: LD_VAR 0 2
32554: PUSH
32555: LD_INT 1
32557: ARRAY
32558: PPUSH
32559: CALL_OW 310
32563: NOT
32564: IFFALSE 32611
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32566: CALL_OW 45
32570: PPUSH
32571: LD_VAR 0 2
32575: PUSH
32576: LD_INT 1
32578: ARRAY
32579: PPUSH
32580: CALL_OW 250
32584: PPUSH
32585: LD_VAR 0 2
32589: PUSH
32590: LD_INT 1
32592: ARRAY
32593: PPUSH
32594: CALL_OW 251
32598: PPUSH
32599: LD_INT 12
32601: PPUSH
32602: LD_INT 1
32604: PPUSH
32605: CALL_OW 50
32609: GO 32623
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32611: CALL_OW 45
32615: PPUSH
32616: LD_INT 1
32618: PPUSH
32619: CALL_OW 51
// end ;
32623: GO 32497
32625: POP
32626: POP
// end ;
32627: PPOPN 2
32629: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32630: LD_EXP 67
32634: PUSH
32635: LD_EXP 113
32639: AND
32640: IFFALSE 32862
32642: GO 32644
32644: DISABLE
32645: LD_INT 0
32647: PPUSH
32648: PPUSH
32649: PPUSH
32650: PPUSH
32651: PPUSH
32652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32653: LD_ADDR_VAR 0 6
32657: PUSH
32658: LD_INT 22
32660: PUSH
32661: LD_OWVAR 2
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 21
32672: PUSH
32673: LD_INT 1
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 3
32682: PUSH
32683: LD_INT 23
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: LIST
32701: PPUSH
32702: CALL_OW 69
32706: ST_TO_ADDR
// if not tmp then
32707: LD_VAR 0 6
32711: NOT
32712: IFFALSE 32716
// exit ;
32714: GO 32862
// s1 := rand ( 1 , 4 ) ;
32716: LD_ADDR_VAR 0 2
32720: PUSH
32721: LD_INT 1
32723: PPUSH
32724: LD_INT 4
32726: PPUSH
32727: CALL_OW 12
32731: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32732: LD_ADDR_VAR 0 4
32736: PUSH
32737: LD_VAR 0 6
32741: PUSH
32742: LD_INT 1
32744: ARRAY
32745: PPUSH
32746: LD_VAR 0 2
32750: PPUSH
32751: CALL_OW 259
32755: ST_TO_ADDR
// if s1 = 1 then
32756: LD_VAR 0 2
32760: PUSH
32761: LD_INT 1
32763: EQUAL
32764: IFFALSE 32784
// s2 := rand ( 2 , 4 ) else
32766: LD_ADDR_VAR 0 3
32770: PUSH
32771: LD_INT 2
32773: PPUSH
32774: LD_INT 4
32776: PPUSH
32777: CALL_OW 12
32781: ST_TO_ADDR
32782: GO 32792
// s2 := 1 ;
32784: LD_ADDR_VAR 0 3
32788: PUSH
32789: LD_INT 1
32791: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32792: LD_ADDR_VAR 0 5
32796: PUSH
32797: LD_VAR 0 6
32801: PUSH
32802: LD_INT 1
32804: ARRAY
32805: PPUSH
32806: LD_VAR 0 3
32810: PPUSH
32811: CALL_OW 259
32815: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32816: LD_VAR 0 6
32820: PUSH
32821: LD_INT 1
32823: ARRAY
32824: PPUSH
32825: LD_VAR 0 2
32829: PPUSH
32830: LD_VAR 0 5
32834: PPUSH
32835: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32839: LD_VAR 0 6
32843: PUSH
32844: LD_INT 1
32846: ARRAY
32847: PPUSH
32848: LD_VAR 0 3
32852: PPUSH
32853: LD_VAR 0 4
32857: PPUSH
32858: CALL_OW 237
// end ;
32862: PPOPN 6
32864: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32865: LD_EXP 67
32869: PUSH
32870: LD_EXP 114
32874: AND
32875: IFFALSE 32954
32877: GO 32879
32879: DISABLE
32880: LD_INT 0
32882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32883: LD_ADDR_VAR 0 1
32887: PUSH
32888: LD_INT 22
32890: PUSH
32891: LD_OWVAR 2
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 30
32902: PUSH
32903: LD_INT 3
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PPUSH
32914: CALL_OW 69
32918: ST_TO_ADDR
// if not tmp then
32919: LD_VAR 0 1
32923: NOT
32924: IFFALSE 32928
// exit ;
32926: GO 32954
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32928: LD_VAR 0 1
32932: PUSH
32933: LD_INT 1
32935: PPUSH
32936: LD_VAR 0 1
32940: PPUSH
32941: CALL_OW 12
32945: ARRAY
32946: PPUSH
32947: LD_INT 1
32949: PPUSH
32950: CALL_OW 234
// end ;
32954: PPOPN 1
32956: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32957: LD_EXP 67
32961: PUSH
32962: LD_EXP 115
32966: AND
32967: IFFALSE 33079
32969: GO 32971
32971: DISABLE
32972: LD_INT 0
32974: PPUSH
32975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32976: LD_ADDR_VAR 0 2
32980: PUSH
32981: LD_INT 22
32983: PUSH
32984: LD_OWVAR 2
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 2
32995: PUSH
32996: LD_INT 30
32998: PUSH
32999: LD_INT 27
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 30
33008: PUSH
33009: LD_INT 26
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 30
33018: PUSH
33019: LD_INT 28
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PPUSH
33036: CALL_OW 69
33040: ST_TO_ADDR
// if not tmp then
33041: LD_VAR 0 2
33045: NOT
33046: IFFALSE 33050
// exit ;
33048: GO 33079
// for i in tmp do
33050: LD_ADDR_VAR 0 1
33054: PUSH
33055: LD_VAR 0 2
33059: PUSH
33060: FOR_IN
33061: IFFALSE 33077
// SetLives ( i , 1 ) ;
33063: LD_VAR 0 1
33067: PPUSH
33068: LD_INT 1
33070: PPUSH
33071: CALL_OW 234
33075: GO 33060
33077: POP
33078: POP
// end ;
33079: PPOPN 2
33081: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
33082: LD_EXP 67
33086: PUSH
33087: LD_EXP 116
33091: AND
33092: IFFALSE 33366
33094: GO 33096
33096: DISABLE
33097: LD_INT 0
33099: PPUSH
33100: PPUSH
33101: PPUSH
// begin i := rand ( 1 , 7 ) ;
33102: LD_ADDR_VAR 0 1
33106: PUSH
33107: LD_INT 1
33109: PPUSH
33110: LD_INT 7
33112: PPUSH
33113: CALL_OW 12
33117: ST_TO_ADDR
// case i of 1 :
33118: LD_VAR 0 1
33122: PUSH
33123: LD_INT 1
33125: DOUBLE
33126: EQUAL
33127: IFTRUE 33131
33129: GO 33141
33131: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33132: LD_STRING earthquake(getX(game), 0, 32)
33134: PPUSH
33135: CALL_OW 559
33139: GO 33366
33141: LD_INT 2
33143: DOUBLE
33144: EQUAL
33145: IFTRUE 33149
33147: GO 33163
33149: POP
// begin ToLua ( displayStucuk(); ) ;
33150: LD_STRING displayStucuk();
33152: PPUSH
33153: CALL_OW 559
// ResetFog ;
33157: CALL_OW 335
// end ; 3 :
33161: GO 33366
33163: LD_INT 3
33165: DOUBLE
33166: EQUAL
33167: IFTRUE 33171
33169: GO 33275
33171: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33172: LD_ADDR_VAR 0 2
33176: PUSH
33177: LD_INT 22
33179: PUSH
33180: LD_OWVAR 2
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 25
33191: PUSH
33192: LD_INT 1
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PPUSH
33203: CALL_OW 69
33207: ST_TO_ADDR
// if not tmp then
33208: LD_VAR 0 2
33212: NOT
33213: IFFALSE 33217
// exit ;
33215: GO 33366
// un := tmp [ rand ( 1 , tmp ) ] ;
33217: LD_ADDR_VAR 0 3
33221: PUSH
33222: LD_VAR 0 2
33226: PUSH
33227: LD_INT 1
33229: PPUSH
33230: LD_VAR 0 2
33234: PPUSH
33235: CALL_OW 12
33239: ARRAY
33240: ST_TO_ADDR
// if Crawls ( un ) then
33241: LD_VAR 0 3
33245: PPUSH
33246: CALL_OW 318
33250: IFFALSE 33261
// ComWalk ( un ) ;
33252: LD_VAR 0 3
33256: PPUSH
33257: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33261: LD_VAR 0 3
33265: PPUSH
33266: LD_INT 8
33268: PPUSH
33269: CALL_OW 336
// end ; 4 :
33273: GO 33366
33275: LD_INT 4
33277: DOUBLE
33278: EQUAL
33279: IFTRUE 33283
33281: GO 33344
33283: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33284: LD_ADDR_VAR 0 2
33288: PUSH
33289: LD_INT 22
33291: PUSH
33292: LD_OWVAR 2
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 30
33303: PUSH
33304: LD_INT 29
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PPUSH
33315: CALL_OW 69
33319: ST_TO_ADDR
// if not tmp then
33320: LD_VAR 0 2
33324: NOT
33325: IFFALSE 33329
// exit ;
33327: GO 33366
// DestroyUnit ( tmp [ 1 ] ) ;
33329: LD_VAR 0 2
33333: PUSH
33334: LD_INT 1
33336: ARRAY
33337: PPUSH
33338: CALL_OW 65
// end ; 5 .. 7 :
33342: GO 33366
33344: LD_INT 5
33346: DOUBLE
33347: GREATEREQUAL
33348: IFFALSE 33356
33350: LD_INT 7
33352: DOUBLE
33353: LESSEQUAL
33354: IFTRUE 33358
33356: GO 33365
33358: POP
// StreamSibBomb ; end ;
33359: CALL 29616 0 0
33363: GO 33366
33365: POP
// end ;
33366: PPOPN 3
33368: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33369: LD_EXP 67
33373: PUSH
33374: LD_EXP 117
33378: AND
33379: IFFALSE 33535
33381: GO 33383
33383: DISABLE
33384: LD_INT 0
33386: PPUSH
33387: PPUSH
33388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33389: LD_ADDR_VAR 0 2
33393: PUSH
33394: LD_INT 81
33396: PUSH
33397: LD_OWVAR 2
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 2
33408: PUSH
33409: LD_INT 21
33411: PUSH
33412: LD_INT 1
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 21
33421: PUSH
33422: LD_INT 2
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: LIST
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PPUSH
33438: CALL_OW 69
33442: ST_TO_ADDR
// if not tmp then
33443: LD_VAR 0 2
33447: NOT
33448: IFFALSE 33452
// exit ;
33450: GO 33535
// p := 0 ;
33452: LD_ADDR_VAR 0 3
33456: PUSH
33457: LD_INT 0
33459: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33460: LD_INT 35
33462: PPUSH
33463: CALL_OW 67
// p := p + 1 ;
33467: LD_ADDR_VAR 0 3
33471: PUSH
33472: LD_VAR 0 3
33476: PUSH
33477: LD_INT 1
33479: PLUS
33480: ST_TO_ADDR
// for i in tmp do
33481: LD_ADDR_VAR 0 1
33485: PUSH
33486: LD_VAR 0 2
33490: PUSH
33491: FOR_IN
33492: IFFALSE 33523
// if GetLives ( i ) < 1000 then
33494: LD_VAR 0 1
33498: PPUSH
33499: CALL_OW 256
33503: PUSH
33504: LD_INT 1000
33506: LESS
33507: IFFALSE 33521
// SetLives ( i , 1000 ) ;
33509: LD_VAR 0 1
33513: PPUSH
33514: LD_INT 1000
33516: PPUSH
33517: CALL_OW 234
33521: GO 33491
33523: POP
33524: POP
// until p > 20 ;
33525: LD_VAR 0 3
33529: PUSH
33530: LD_INT 20
33532: GREATER
33533: IFFALSE 33460
// end ;
33535: PPOPN 3
33537: END
// every 0 0$1 trigger StreamModeActive and sTime do
33538: LD_EXP 67
33542: PUSH
33543: LD_EXP 118
33547: AND
33548: IFFALSE 33583
33550: GO 33552
33552: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33553: LD_INT 28
33555: PPUSH
33556: LD_OWVAR 2
33560: PPUSH
33561: LD_INT 2
33563: PPUSH
33564: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33568: LD_INT 30
33570: PPUSH
33571: LD_OWVAR 2
33575: PPUSH
33576: LD_INT 2
33578: PPUSH
33579: CALL_OW 322
// end ;
33583: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33584: LD_EXP 67
33588: PUSH
33589: LD_EXP 119
33593: AND
33594: IFFALSE 33715
33596: GO 33598
33598: DISABLE
33599: LD_INT 0
33601: PPUSH
33602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33603: LD_ADDR_VAR 0 2
33607: PUSH
33608: LD_INT 22
33610: PUSH
33611: LD_OWVAR 2
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 21
33622: PUSH
33623: LD_INT 1
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 3
33632: PUSH
33633: LD_INT 23
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: LIST
33651: PPUSH
33652: CALL_OW 69
33656: ST_TO_ADDR
// if not tmp then
33657: LD_VAR 0 2
33661: NOT
33662: IFFALSE 33666
// exit ;
33664: GO 33715
// for i in tmp do
33666: LD_ADDR_VAR 0 1
33670: PUSH
33671: LD_VAR 0 2
33675: PUSH
33676: FOR_IN
33677: IFFALSE 33713
// begin if Crawls ( i ) then
33679: LD_VAR 0 1
33683: PPUSH
33684: CALL_OW 318
33688: IFFALSE 33699
// ComWalk ( i ) ;
33690: LD_VAR 0 1
33694: PPUSH
33695: CALL_OW 138
// SetClass ( i , 2 ) ;
33699: LD_VAR 0 1
33703: PPUSH
33704: LD_INT 2
33706: PPUSH
33707: CALL_OW 336
// end ;
33711: GO 33676
33713: POP
33714: POP
// end ;
33715: PPOPN 2
33717: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33718: LD_EXP 67
33722: PUSH
33723: LD_EXP 120
33727: AND
33728: IFFALSE 34009
33730: GO 33732
33732: DISABLE
33733: LD_INT 0
33735: PPUSH
33736: PPUSH
33737: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33738: LD_OWVAR 2
33742: PPUSH
33743: LD_INT 9
33745: PPUSH
33746: LD_INT 1
33748: PPUSH
33749: LD_INT 1
33751: PPUSH
33752: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33756: LD_INT 9
33758: PPUSH
33759: LD_OWVAR 2
33763: PPUSH
33764: CALL_OW 343
// uc_side := 9 ;
33768: LD_ADDR_OWVAR 20
33772: PUSH
33773: LD_INT 9
33775: ST_TO_ADDR
// uc_nation := 2 ;
33776: LD_ADDR_OWVAR 21
33780: PUSH
33781: LD_INT 2
33783: ST_TO_ADDR
// hc_name := Dark Warrior ;
33784: LD_ADDR_OWVAR 26
33788: PUSH
33789: LD_STRING Dark Warrior
33791: ST_TO_ADDR
// hc_gallery :=  ;
33792: LD_ADDR_OWVAR 33
33796: PUSH
33797: LD_STRING 
33799: ST_TO_ADDR
// hc_noskilllimit := true ;
33800: LD_ADDR_OWVAR 76
33804: PUSH
33805: LD_INT 1
33807: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33808: LD_ADDR_OWVAR 31
33812: PUSH
33813: LD_INT 30
33815: PUSH
33816: LD_INT 30
33818: PUSH
33819: LD_INT 30
33821: PUSH
33822: LD_INT 30
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: ST_TO_ADDR
// un := CreateHuman ;
33831: LD_ADDR_VAR 0 3
33835: PUSH
33836: CALL_OW 44
33840: ST_TO_ADDR
// hc_noskilllimit := false ;
33841: LD_ADDR_OWVAR 76
33845: PUSH
33846: LD_INT 0
33848: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33849: LD_VAR 0 3
33853: PPUSH
33854: LD_INT 1
33856: PPUSH
33857: CALL_OW 51
// p := 0 ;
33861: LD_ADDR_VAR 0 2
33865: PUSH
33866: LD_INT 0
33868: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33869: LD_INT 35
33871: PPUSH
33872: CALL_OW 67
// p := p + 1 ;
33876: LD_ADDR_VAR 0 2
33880: PUSH
33881: LD_VAR 0 2
33885: PUSH
33886: LD_INT 1
33888: PLUS
33889: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33890: LD_VAR 0 3
33894: PPUSH
33895: CALL_OW 256
33899: PUSH
33900: LD_INT 1000
33902: LESS
33903: IFFALSE 33917
// SetLives ( un , 1000 ) ;
33905: LD_VAR 0 3
33909: PPUSH
33910: LD_INT 1000
33912: PPUSH
33913: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33917: LD_VAR 0 3
33921: PPUSH
33922: LD_INT 81
33924: PUSH
33925: LD_OWVAR 2
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 91
33936: PUSH
33937: LD_VAR 0 3
33941: PUSH
33942: LD_INT 30
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: LIST
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PPUSH
33954: CALL_OW 69
33958: PPUSH
33959: LD_VAR 0 3
33963: PPUSH
33964: CALL_OW 74
33968: PPUSH
33969: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
33973: LD_VAR 0 2
33977: PUSH
33978: LD_INT 60
33980: GREATER
33981: PUSH
33982: LD_VAR 0 3
33986: PPUSH
33987: CALL_OW 301
33991: OR
33992: IFFALSE 33869
// if un then
33994: LD_VAR 0 3
33998: IFFALSE 34009
// RemoveUnit ( un ) ;
34000: LD_VAR 0 3
34004: PPUSH
34005: CALL_OW 64
// end ;
34009: PPOPN 3
34011: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34012: LD_INT 0
34014: PPUSH
34015: PPUSH
34016: PPUSH
34017: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34018: LD_ADDR_VAR 0 4
34022: PUSH
34023: LD_INT 22
34025: PUSH
34026: LD_OWVAR 2
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 2
34037: PUSH
34038: LD_INT 30
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 30
34050: PUSH
34051: LD_INT 1
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: LIST
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PPUSH
34067: CALL_OW 69
34071: ST_TO_ADDR
// if not tmp then
34072: LD_VAR 0 4
34076: NOT
34077: IFFALSE 34081
// exit ;
34079: GO 34140
// for i in tmp do
34081: LD_ADDR_VAR 0 2
34085: PUSH
34086: LD_VAR 0 4
34090: PUSH
34091: FOR_IN
34092: IFFALSE 34138
// for j = 1 to 3 do
34094: LD_ADDR_VAR 0 3
34098: PUSH
34099: DOUBLE
34100: LD_INT 1
34102: DEC
34103: ST_TO_ADDR
34104: LD_INT 3
34106: PUSH
34107: FOR_TO
34108: IFFALSE 34134
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34110: LD_VAR 0 2
34114: PPUSH
34115: CALL_OW 274
34119: PPUSH
34120: LD_VAR 0 3
34124: PPUSH
34125: LD_INT 99999
34127: PPUSH
34128: CALL_OW 277
34132: GO 34107
34134: POP
34135: POP
34136: GO 34091
34138: POP
34139: POP
// end ;
34140: LD_VAR 0 1
34144: RET
// export function hHackSetLevel10 ; var i , j ; begin
34145: LD_INT 0
34147: PPUSH
34148: PPUSH
34149: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34150: LD_ADDR_VAR 0 2
34154: PUSH
34155: LD_INT 21
34157: PUSH
34158: LD_INT 1
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PPUSH
34165: CALL_OW 69
34169: PUSH
34170: FOR_IN
34171: IFFALSE 34223
// if IsSelected ( i ) then
34173: LD_VAR 0 2
34177: PPUSH
34178: CALL_OW 306
34182: IFFALSE 34221
// begin for j := 1 to 4 do
34184: LD_ADDR_VAR 0 3
34188: PUSH
34189: DOUBLE
34190: LD_INT 1
34192: DEC
34193: ST_TO_ADDR
34194: LD_INT 4
34196: PUSH
34197: FOR_TO
34198: IFFALSE 34219
// SetSkill ( i , j , 10 ) ;
34200: LD_VAR 0 2
34204: PPUSH
34205: LD_VAR 0 3
34209: PPUSH
34210: LD_INT 10
34212: PPUSH
34213: CALL_OW 237
34217: GO 34197
34219: POP
34220: POP
// end ;
34221: GO 34170
34223: POP
34224: POP
// end ;
34225: LD_VAR 0 1
34229: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34230: LD_INT 0
34232: PPUSH
34233: PPUSH
34234: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34235: LD_ADDR_VAR 0 2
34239: PUSH
34240: LD_INT 22
34242: PUSH
34243: LD_OWVAR 2
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 21
34254: PUSH
34255: LD_INT 1
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PPUSH
34266: CALL_OW 69
34270: PUSH
34271: FOR_IN
34272: IFFALSE 34313
// begin for j := 1 to 4 do
34274: LD_ADDR_VAR 0 3
34278: PUSH
34279: DOUBLE
34280: LD_INT 1
34282: DEC
34283: ST_TO_ADDR
34284: LD_INT 4
34286: PUSH
34287: FOR_TO
34288: IFFALSE 34309
// SetSkill ( i , j , 10 ) ;
34290: LD_VAR 0 2
34294: PPUSH
34295: LD_VAR 0 3
34299: PPUSH
34300: LD_INT 10
34302: PPUSH
34303: CALL_OW 237
34307: GO 34287
34309: POP
34310: POP
// end ;
34311: GO 34271
34313: POP
34314: POP
// end ;
34315: LD_VAR 0 1
34319: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
34320: LD_INT 0
34322: PPUSH
// uc_side := your_side ;
34323: LD_ADDR_OWVAR 20
34327: PUSH
34328: LD_OWVAR 2
34332: ST_TO_ADDR
// uc_nation := nation ;
34333: LD_ADDR_OWVAR 21
34337: PUSH
34338: LD_VAR 0 1
34342: ST_TO_ADDR
// InitHc ;
34343: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34347: LD_INT 0
34349: PPUSH
34350: LD_VAR 0 2
34354: PPUSH
34355: LD_VAR 0 3
34359: PPUSH
34360: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
34364: CALL_OW 44
34368: PPUSH
34369: LD_INT 1
34371: PPUSH
34372: CALL_OW 51
// end ;
34376: LD_VAR 0 4
34380: RET
// export function hHackSpawnVehicle ; begin
34381: LD_INT 0
34383: PPUSH
// uc_side := your_side ;
34384: LD_ADDR_OWVAR 20
34388: PUSH
34389: LD_OWVAR 2
34393: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
34394: LD_ADDR_OWVAR 21
34398: PUSH
34399: LD_INT 1
34401: PPUSH
34402: LD_INT 3
34404: PPUSH
34405: CALL_OW 12
34409: ST_TO_ADDR
// InitVc ;
34410: CALL_OW 20
// case uc_nation of 1 :
34414: LD_OWVAR 21
34418: PUSH
34419: LD_INT 1
34421: DOUBLE
34422: EQUAL
34423: IFTRUE 34427
34425: GO 34571
34427: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
34428: LD_ADDR_OWVAR 37
34432: PUSH
34433: LD_INT 1
34435: PUSH
34436: LD_INT 2
34438: PUSH
34439: LD_INT 3
34441: PUSH
34442: LD_INT 4
34444: PUSH
34445: LD_INT 5
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 1
34457: PPUSH
34458: LD_INT 5
34460: PPUSH
34461: CALL_OW 12
34465: ARRAY
34466: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
34467: LD_ADDR_OWVAR 39
34471: PUSH
34472: LD_INT 1
34474: PPUSH
34475: LD_INT 3
34477: PPUSH
34478: CALL_OW 12
34482: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
34483: LD_ADDR_OWVAR 38
34487: PUSH
34488: LD_INT 1
34490: PUSH
34491: LD_INT 2
34493: PUSH
34494: LD_INT 3
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 1
34504: PPUSH
34505: LD_INT 3
34507: PPUSH
34508: CALL_OW 12
34512: ARRAY
34513: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
34514: LD_ADDR_OWVAR 40
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: LD_INT 4
34524: PUSH
34525: LD_INT 5
34527: PUSH
34528: LD_INT 3
34530: PUSH
34531: LD_INT 7
34533: PUSH
34534: LD_INT 8
34536: PUSH
34537: LD_INT 9
34539: PUSH
34540: LD_INT 10
34542: PUSH
34543: LD_INT 6
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 1
34559: PPUSH
34560: LD_INT 9
34562: PPUSH
34563: CALL_OW 12
34567: ARRAY
34568: ST_TO_ADDR
// end ; 2 :
34569: GO 34836
34571: LD_INT 2
34573: DOUBLE
34574: EQUAL
34575: IFTRUE 34579
34577: GO 34703
34579: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
34580: LD_ADDR_OWVAR 37
34584: PUSH
34585: LD_INT 11
34587: PUSH
34588: LD_INT 12
34590: PUSH
34591: LD_INT 13
34593: PUSH
34594: LD_INT 14
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 1
34605: PPUSH
34606: LD_INT 4
34608: PPUSH
34609: CALL_OW 12
34613: ARRAY
34614: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
34615: LD_ADDR_OWVAR 39
34619: PUSH
34620: LD_INT 1
34622: PPUSH
34623: LD_INT 3
34625: PPUSH
34626: CALL_OW 12
34630: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
34631: LD_ADDR_OWVAR 38
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: LD_INT 2
34641: PUSH
34642: LD_INT 5
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: PPUSH
34653: LD_INT 3
34655: PPUSH
34656: CALL_OW 12
34660: ARRAY
34661: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
34662: LD_ADDR_OWVAR 40
34666: PUSH
34667: LD_INT 24
34669: PUSH
34670: LD_INT 26
34672: PUSH
34673: LD_INT 27
34675: PUSH
34676: LD_INT 28
34678: PUSH
34679: LD_INT 29
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 1
34691: PPUSH
34692: LD_INT 5
34694: PPUSH
34695: CALL_OW 12
34699: ARRAY
34700: ST_TO_ADDR
// end ; 3 :
34701: GO 34836
34703: LD_INT 3
34705: DOUBLE
34706: EQUAL
34707: IFTRUE 34711
34709: GO 34835
34711: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
34712: LD_ADDR_OWVAR 37
34716: PUSH
34717: LD_INT 21
34719: PUSH
34720: LD_INT 23
34722: PUSH
34723: LD_INT 22
34725: PUSH
34726: LD_INT 24
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 1
34737: PPUSH
34738: LD_INT 4
34740: PPUSH
34741: CALL_OW 12
34745: ARRAY
34746: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
34747: LD_ADDR_OWVAR 39
34751: PUSH
34752: LD_INT 1
34754: PPUSH
34755: LD_INT 3
34757: PPUSH
34758: CALL_OW 12
34762: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
34763: LD_ADDR_OWVAR 38
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: LD_INT 3
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: PPUSH
34781: LD_INT 2
34783: PPUSH
34784: CALL_OW 12
34788: ARRAY
34789: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
34790: LD_ADDR_OWVAR 40
34794: PUSH
34795: LD_INT 42
34797: PUSH
34798: LD_INT 43
34800: PUSH
34801: LD_INT 44
34803: PUSH
34804: LD_INT 46
34806: PUSH
34807: LD_INT 48
34809: PUSH
34810: LD_INT 47
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 1
34823: PPUSH
34824: LD_INT 6
34826: PPUSH
34827: CALL_OW 12
34831: ARRAY
34832: ST_TO_ADDR
// end ; end ;
34833: GO 34836
34835: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
34836: CALL_OW 45
34840: PPUSH
34841: LD_INT 1
34843: PPUSH
34844: CALL_OW 51
// end ;
34848: LD_VAR 0 1
34852: RET
// export hInvincible ; every 1 do
34853: GO 34855
34855: DISABLE
// hInvincible := [ ] ;
34856: LD_ADDR_EXP 121
34860: PUSH
34861: EMPTY
34862: ST_TO_ADDR
34863: END
// every 10 do var i ;
34864: GO 34866
34866: DISABLE
34867: LD_INT 0
34869: PPUSH
// begin enable ;
34870: ENABLE
// if not hInvincible then
34871: LD_EXP 121
34875: NOT
34876: IFFALSE 34880
// exit ;
34878: GO 34924
// for i in hInvincible do
34880: LD_ADDR_VAR 0 1
34884: PUSH
34885: LD_EXP 121
34889: PUSH
34890: FOR_IN
34891: IFFALSE 34922
// if GetLives ( i ) < 1000 then
34893: LD_VAR 0 1
34897: PPUSH
34898: CALL_OW 256
34902: PUSH
34903: LD_INT 1000
34905: LESS
34906: IFFALSE 34920
// SetLives ( i , 1000 ) ;
34908: LD_VAR 0 1
34912: PPUSH
34913: LD_INT 1000
34915: PPUSH
34916: CALL_OW 234
34920: GO 34890
34922: POP
34923: POP
// end ;
34924: PPOPN 1
34926: END
// export function hHackInvincible ; var i ; begin
34927: LD_INT 0
34929: PPUSH
34930: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34931: LD_ADDR_VAR 0 2
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: LD_INT 21
34941: PUSH
34942: LD_INT 1
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 21
34951: PUSH
34952: LD_INT 2
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: LIST
34963: PPUSH
34964: CALL_OW 69
34968: PUSH
34969: FOR_IN
34970: IFFALSE 35031
// if IsSelected ( i ) then
34972: LD_VAR 0 2
34976: PPUSH
34977: CALL_OW 306
34981: IFFALSE 35029
// begin if i in hInvincible then
34983: LD_VAR 0 2
34987: PUSH
34988: LD_EXP 121
34992: IN
34993: IFFALSE 35013
// hInvincible := hInvincible diff i else
34995: LD_ADDR_EXP 121
34999: PUSH
35000: LD_EXP 121
35004: PUSH
35005: LD_VAR 0 2
35009: DIFF
35010: ST_TO_ADDR
35011: GO 35029
// hInvincible := hInvincible union i ;
35013: LD_ADDR_EXP 121
35017: PUSH
35018: LD_EXP 121
35022: PUSH
35023: LD_VAR 0 2
35027: UNION
35028: ST_TO_ADDR
// end ;
35029: GO 34969
35031: POP
35032: POP
// end ;
35033: LD_VAR 0 1
35037: RET
// export function hHackInvisible ; var i , j ; begin
35038: LD_INT 0
35040: PPUSH
35041: PPUSH
35042: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35043: LD_ADDR_VAR 0 2
35047: PUSH
35048: LD_INT 21
35050: PUSH
35051: LD_INT 1
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PPUSH
35058: CALL_OW 69
35062: PUSH
35063: FOR_IN
35064: IFFALSE 35088
// if IsSelected ( i ) then
35066: LD_VAR 0 2
35070: PPUSH
35071: CALL_OW 306
35075: IFFALSE 35086
// ComForceInvisible ( i ) ;
35077: LD_VAR 0 2
35081: PPUSH
35082: CALL_OW 496
35086: GO 35063
35088: POP
35089: POP
// end ;
35090: LD_VAR 0 1
35094: RET
// export function hHackChangeYourSide ; begin
35095: LD_INT 0
35097: PPUSH
// if your_side = 8 then
35098: LD_OWVAR 2
35102: PUSH
35103: LD_INT 8
35105: EQUAL
35106: IFFALSE 35118
// your_side := 0 else
35108: LD_ADDR_OWVAR 2
35112: PUSH
35113: LD_INT 0
35115: ST_TO_ADDR
35116: GO 35132
// your_side := your_side + 1 ;
35118: LD_ADDR_OWVAR 2
35122: PUSH
35123: LD_OWVAR 2
35127: PUSH
35128: LD_INT 1
35130: PLUS
35131: ST_TO_ADDR
// end ;
35132: LD_VAR 0 1
35136: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35137: LD_INT 0
35139: PPUSH
35140: PPUSH
35141: PPUSH
// for i in all_units do
35142: LD_ADDR_VAR 0 2
35146: PUSH
35147: LD_OWVAR 3
35151: PUSH
35152: FOR_IN
35153: IFFALSE 35231
// if IsSelected ( i ) then
35155: LD_VAR 0 2
35159: PPUSH
35160: CALL_OW 306
35164: IFFALSE 35229
// begin j := GetSide ( i ) ;
35166: LD_ADDR_VAR 0 3
35170: PUSH
35171: LD_VAR 0 2
35175: PPUSH
35176: CALL_OW 255
35180: ST_TO_ADDR
// if j = 8 then
35181: LD_VAR 0 3
35185: PUSH
35186: LD_INT 8
35188: EQUAL
35189: IFFALSE 35201
// j := 0 else
35191: LD_ADDR_VAR 0 3
35195: PUSH
35196: LD_INT 0
35198: ST_TO_ADDR
35199: GO 35215
// j := j + 1 ;
35201: LD_ADDR_VAR 0 3
35205: PUSH
35206: LD_VAR 0 3
35210: PUSH
35211: LD_INT 1
35213: PLUS
35214: ST_TO_ADDR
// SetSide ( i , j ) ;
35215: LD_VAR 0 2
35219: PPUSH
35220: LD_VAR 0 3
35224: PPUSH
35225: CALL_OW 235
// end ;
35229: GO 35152
35231: POP
35232: POP
// end ;
35233: LD_VAR 0 1
35237: RET
// export function hHackFog ; begin
35238: LD_INT 0
35240: PPUSH
// FogOff ( true ) ;
35241: LD_INT 1
35243: PPUSH
35244: CALL_OW 344
// end ;
35248: LD_VAR 0 1
35252: RET
// export function hHackApeman ; begin
35253: LD_INT 0
35255: PPUSH
// uc_side := your_side ;
35256: LD_ADDR_OWVAR 20
35260: PUSH
35261: LD_OWVAR 2
35265: ST_TO_ADDR
// uc_nation := 0 ;
35266: LD_ADDR_OWVAR 21
35270: PUSH
35271: LD_INT 0
35273: ST_TO_ADDR
// hc_name :=  ;
35274: LD_ADDR_OWVAR 26
35278: PUSH
35279: LD_STRING 
35281: ST_TO_ADDR
// hc_gallery :=  ;
35282: LD_ADDR_OWVAR 33
35286: PUSH
35287: LD_STRING 
35289: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
35290: LD_ADDR_OWVAR 31
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: LD_INT 0
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: LD_INT 0
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: ST_TO_ADDR
// hc_class := class_apeman ;
35313: LD_ADDR_OWVAR 28
35317: PUSH
35318: LD_INT 12
35320: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
35321: CALL_OW 44
35325: PPUSH
35326: LD_INT 1
35328: PPUSH
35329: CALL_OW 51
// end ;
35333: LD_VAR 0 1
35337: RET
// export function hHackBoom ; begin
35338: LD_INT 0
35340: PPUSH
// uc_side := your_side ;
35341: LD_ADDR_OWVAR 20
35345: PUSH
35346: LD_OWVAR 2
35350: ST_TO_ADDR
// uc_nation := 1 ;
35351: LD_ADDR_OWVAR 21
35355: PUSH
35356: LD_INT 1
35358: ST_TO_ADDR
// vc_chassis := us_morphling ;
35359: LD_ADDR_OWVAR 37
35363: PUSH
35364: LD_INT 5
35366: ST_TO_ADDR
// vc_engine := engine_siberite ;
35367: LD_ADDR_OWVAR 39
35371: PUSH
35372: LD_INT 3
35374: ST_TO_ADDR
// vc_control := control_computer ;
35375: LD_ADDR_OWVAR 38
35379: PUSH
35380: LD_INT 3
35382: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
35383: LD_ADDR_OWVAR 40
35387: PUSH
35388: LD_INT 8
35390: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
35391: CALL_OW 45
35395: PPUSH
35396: LD_INT 1
35398: PPUSH
35399: CALL_OW 51
// end ; end_of_file
35403: LD_VAR 0 1
35407: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35408: LD_INT 0
35410: PPUSH
35411: PPUSH
35412: PPUSH
35413: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35414: LD_VAR 0 1
35418: PPUSH
35419: CALL_OW 264
35423: PUSH
35424: LD_EXP 56
35428: EQUAL
35429: IFFALSE 35501
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35431: LD_INT 68
35433: PPUSH
35434: LD_VAR 0 1
35438: PPUSH
35439: CALL_OW 255
35443: PPUSH
35444: CALL_OW 321
35448: PUSH
35449: LD_INT 2
35451: EQUAL
35452: IFFALSE 35464
// eff := 70 else
35454: LD_ADDR_VAR 0 4
35458: PUSH
35459: LD_INT 70
35461: ST_TO_ADDR
35462: GO 35472
// eff := 30 ;
35464: LD_ADDR_VAR 0 4
35468: PUSH
35469: LD_INT 30
35471: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35472: LD_VAR 0 1
35476: PPUSH
35477: CALL_OW 250
35481: PPUSH
35482: LD_VAR 0 1
35486: PPUSH
35487: CALL_OW 251
35491: PPUSH
35492: LD_VAR 0 4
35496: PPUSH
35497: CALL_OW 495
// end ; end ;
35501: LD_VAR 0 2
35505: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35506: LD_INT 0
35508: PPUSH
// end ;
35509: LD_VAR 0 4
35513: RET
// export function SOS_Command ( cmd ) ; begin
35514: LD_INT 0
35516: PPUSH
// end ;
35517: LD_VAR 0 2
35521: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35522: LD_INT 0
35524: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35525: LD_VAR 0 1
35529: PUSH
35530: LD_INT 254
35532: EQUAL
35533: PUSH
35534: LD_VAR 0 2
35538: PPUSH
35539: CALL_OW 264
35543: PUSH
35544: LD_EXP 54
35548: EQUAL
35549: AND
35550: PUSH
35551: LD_VAR 0 3
35555: PPUSH
35556: CALL_OW 263
35560: PUSH
35561: LD_INT 3
35563: EQUAL
35564: AND
35565: IFFALSE 35581
// HackDestroyVehicle ( unit , selectedUnit ) ;
35567: LD_VAR 0 2
35571: PPUSH
35572: LD_VAR 0 3
35576: PPUSH
35577: CALL 37090 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35581: LD_VAR 0 1
35585: PUSH
35586: LD_INT 255
35588: EQUAL
35589: PUSH
35590: LD_VAR 0 2
35594: PPUSH
35595: CALL_OW 264
35599: PUSH
35600: LD_INT 14
35602: PUSH
35603: LD_INT 53
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: IN
35610: AND
35611: PUSH
35612: LD_VAR 0 4
35616: PPUSH
35617: LD_VAR 0 5
35621: PPUSH
35622: CALL_OW 488
35626: AND
35627: IFFALSE 35651
// CutTreeXYR ( unit , x , y , 12 ) ;
35629: LD_VAR 0 2
35633: PPUSH
35634: LD_VAR 0 4
35638: PPUSH
35639: LD_VAR 0 5
35643: PPUSH
35644: LD_INT 12
35646: PPUSH
35647: CALL 35656 0 4
// end ;
35651: LD_VAR 0 6
35655: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35656: LD_INT 0
35658: PPUSH
35659: PPUSH
35660: PPUSH
35661: PPUSH
35662: PPUSH
35663: PPUSH
35664: PPUSH
35665: PPUSH
35666: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35667: LD_VAR 0 1
35671: NOT
35672: PUSH
35673: LD_VAR 0 2
35677: PPUSH
35678: LD_VAR 0 3
35682: PPUSH
35683: CALL_OW 488
35687: NOT
35688: OR
35689: PUSH
35690: LD_VAR 0 4
35694: NOT
35695: OR
35696: IFFALSE 35700
// exit ;
35698: GO 36040
// list := [ ] ;
35700: LD_ADDR_VAR 0 13
35704: PUSH
35705: EMPTY
35706: ST_TO_ADDR
// if x - r < 0 then
35707: LD_VAR 0 2
35711: PUSH
35712: LD_VAR 0 4
35716: MINUS
35717: PUSH
35718: LD_INT 0
35720: LESS
35721: IFFALSE 35733
// min_x := 0 else
35723: LD_ADDR_VAR 0 7
35727: PUSH
35728: LD_INT 0
35730: ST_TO_ADDR
35731: GO 35749
// min_x := x - r ;
35733: LD_ADDR_VAR 0 7
35737: PUSH
35738: LD_VAR 0 2
35742: PUSH
35743: LD_VAR 0 4
35747: MINUS
35748: ST_TO_ADDR
// if y - r < 0 then
35749: LD_VAR 0 3
35753: PUSH
35754: LD_VAR 0 4
35758: MINUS
35759: PUSH
35760: LD_INT 0
35762: LESS
35763: IFFALSE 35775
// min_y := 0 else
35765: LD_ADDR_VAR 0 8
35769: PUSH
35770: LD_INT 0
35772: ST_TO_ADDR
35773: GO 35791
// min_y := y - r ;
35775: LD_ADDR_VAR 0 8
35779: PUSH
35780: LD_VAR 0 3
35784: PUSH
35785: LD_VAR 0 4
35789: MINUS
35790: ST_TO_ADDR
// max_x := x + r ;
35791: LD_ADDR_VAR 0 9
35795: PUSH
35796: LD_VAR 0 2
35800: PUSH
35801: LD_VAR 0 4
35805: PLUS
35806: ST_TO_ADDR
// max_y := y + r ;
35807: LD_ADDR_VAR 0 10
35811: PUSH
35812: LD_VAR 0 3
35816: PUSH
35817: LD_VAR 0 4
35821: PLUS
35822: ST_TO_ADDR
// for _x = min_x to max_x do
35823: LD_ADDR_VAR 0 11
35827: PUSH
35828: DOUBLE
35829: LD_VAR 0 7
35833: DEC
35834: ST_TO_ADDR
35835: LD_VAR 0 9
35839: PUSH
35840: FOR_TO
35841: IFFALSE 35958
// for _y = min_y to max_y do
35843: LD_ADDR_VAR 0 12
35847: PUSH
35848: DOUBLE
35849: LD_VAR 0 8
35853: DEC
35854: ST_TO_ADDR
35855: LD_VAR 0 10
35859: PUSH
35860: FOR_TO
35861: IFFALSE 35954
// begin if not ValidHex ( _x , _y ) then
35863: LD_VAR 0 11
35867: PPUSH
35868: LD_VAR 0 12
35872: PPUSH
35873: CALL_OW 488
35877: NOT
35878: IFFALSE 35882
// continue ;
35880: GO 35860
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35882: LD_VAR 0 11
35886: PPUSH
35887: LD_VAR 0 12
35891: PPUSH
35892: CALL_OW 351
35896: PUSH
35897: LD_VAR 0 11
35901: PPUSH
35902: LD_VAR 0 12
35906: PPUSH
35907: CALL_OW 554
35911: AND
35912: IFFALSE 35952
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35914: LD_ADDR_VAR 0 13
35918: PUSH
35919: LD_VAR 0 13
35923: PPUSH
35924: LD_VAR 0 13
35928: PUSH
35929: LD_INT 1
35931: PLUS
35932: PPUSH
35933: LD_VAR 0 11
35937: PUSH
35938: LD_VAR 0 12
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PPUSH
35947: CALL_OW 2
35951: ST_TO_ADDR
// end ;
35952: GO 35860
35954: POP
35955: POP
35956: GO 35840
35958: POP
35959: POP
// if not list then
35960: LD_VAR 0 13
35964: NOT
35965: IFFALSE 35969
// exit ;
35967: GO 36040
// for i in list do
35969: LD_ADDR_VAR 0 6
35973: PUSH
35974: LD_VAR 0 13
35978: PUSH
35979: FOR_IN
35980: IFFALSE 36038
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35982: LD_VAR 0 1
35986: PPUSH
35987: LD_STRING M
35989: PUSH
35990: LD_VAR 0 6
35994: PUSH
35995: LD_INT 1
35997: ARRAY
35998: PUSH
35999: LD_VAR 0 6
36003: PUSH
36004: LD_INT 2
36006: ARRAY
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: PUSH
36029: EMPTY
36030: LIST
36031: PPUSH
36032: CALL_OW 447
36036: GO 35979
36038: POP
36039: POP
// end ;
36040: LD_VAR 0 5
36044: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36045: LD_EXP 122
36049: NOT
36050: IFFALSE 36100
36052: GO 36054
36054: DISABLE
// begin initHack := true ;
36055: LD_ADDR_EXP 122
36059: PUSH
36060: LD_INT 1
36062: ST_TO_ADDR
// hackTanks := [ ] ;
36063: LD_ADDR_EXP 123
36067: PUSH
36068: EMPTY
36069: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36070: LD_ADDR_EXP 124
36074: PUSH
36075: EMPTY
36076: ST_TO_ADDR
// hackLimit := 3 ;
36077: LD_ADDR_EXP 125
36081: PUSH
36082: LD_INT 3
36084: ST_TO_ADDR
// hackDist := 12 ;
36085: LD_ADDR_EXP 126
36089: PUSH
36090: LD_INT 12
36092: ST_TO_ADDR
// hackCounter := [ ] ;
36093: LD_ADDR_EXP 127
36097: PUSH
36098: EMPTY
36099: ST_TO_ADDR
// end ;
36100: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36101: LD_EXP 122
36105: PUSH
36106: LD_INT 34
36108: PUSH
36109: LD_EXP 54
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PPUSH
36118: CALL_OW 69
36122: AND
36123: IFFALSE 36378
36125: GO 36127
36127: DISABLE
36128: LD_INT 0
36130: PPUSH
36131: PPUSH
// begin enable ;
36132: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36133: LD_ADDR_VAR 0 1
36137: PUSH
36138: LD_INT 34
36140: PUSH
36141: LD_EXP 54
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PPUSH
36150: CALL_OW 69
36154: PUSH
36155: FOR_IN
36156: IFFALSE 36376
// begin if not i in hackTanks then
36158: LD_VAR 0 1
36162: PUSH
36163: LD_EXP 123
36167: IN
36168: NOT
36169: IFFALSE 36252
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36171: LD_ADDR_EXP 123
36175: PUSH
36176: LD_EXP 123
36180: PPUSH
36181: LD_EXP 123
36185: PUSH
36186: LD_INT 1
36188: PLUS
36189: PPUSH
36190: LD_VAR 0 1
36194: PPUSH
36195: CALL_OW 1
36199: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36200: LD_ADDR_EXP 124
36204: PUSH
36205: LD_EXP 124
36209: PPUSH
36210: LD_EXP 124
36214: PUSH
36215: LD_INT 1
36217: PLUS
36218: PPUSH
36219: EMPTY
36220: PPUSH
36221: CALL_OW 1
36225: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36226: LD_ADDR_EXP 127
36230: PUSH
36231: LD_EXP 127
36235: PPUSH
36236: LD_EXP 127
36240: PUSH
36241: LD_INT 1
36243: PLUS
36244: PPUSH
36245: EMPTY
36246: PPUSH
36247: CALL_OW 1
36251: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36252: LD_VAR 0 1
36256: PPUSH
36257: CALL_OW 302
36261: NOT
36262: IFFALSE 36275
// begin HackUnlinkAll ( i ) ;
36264: LD_VAR 0 1
36268: PPUSH
36269: CALL 36381 0 1
// continue ;
36273: GO 36155
// end ; HackCheckCapturedStatus ( i ) ;
36275: LD_VAR 0 1
36279: PPUSH
36280: CALL 36824 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36284: LD_ADDR_VAR 0 2
36288: PUSH
36289: LD_INT 81
36291: PUSH
36292: LD_VAR 0 1
36296: PPUSH
36297: CALL_OW 255
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 33
36308: PUSH
36309: LD_INT 3
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 91
36318: PUSH
36319: LD_VAR 0 1
36323: PUSH
36324: LD_EXP 126
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 50
36336: PUSH
36337: EMPTY
36338: LIST
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: PPUSH
36346: CALL_OW 69
36350: ST_TO_ADDR
// if not tmp then
36351: LD_VAR 0 2
36355: NOT
36356: IFFALSE 36360
// continue ;
36358: GO 36155
// HackLink ( i , tmp ) ;
36360: LD_VAR 0 1
36364: PPUSH
36365: LD_VAR 0 2
36369: PPUSH
36370: CALL 36517 0 2
// end ;
36374: GO 36155
36376: POP
36377: POP
// end ;
36378: PPOPN 2
36380: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36381: LD_INT 0
36383: PPUSH
36384: PPUSH
36385: PPUSH
// if not hack in hackTanks then
36386: LD_VAR 0 1
36390: PUSH
36391: LD_EXP 123
36395: IN
36396: NOT
36397: IFFALSE 36401
// exit ;
36399: GO 36512
// index := GetElementIndex ( hackTanks , hack ) ;
36401: LD_ADDR_VAR 0 4
36405: PUSH
36406: LD_EXP 123
36410: PPUSH
36411: LD_VAR 0 1
36415: PPUSH
36416: CALL 41932 0 2
36420: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36421: LD_EXP 124
36425: PUSH
36426: LD_VAR 0 4
36430: ARRAY
36431: IFFALSE 36512
// begin for i in hackTanksCaptured [ index ] do
36433: LD_ADDR_VAR 0 3
36437: PUSH
36438: LD_EXP 124
36442: PUSH
36443: LD_VAR 0 4
36447: ARRAY
36448: PUSH
36449: FOR_IN
36450: IFFALSE 36476
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36452: LD_VAR 0 3
36456: PUSH
36457: LD_INT 1
36459: ARRAY
36460: PPUSH
36461: LD_VAR 0 3
36465: PUSH
36466: LD_INT 2
36468: ARRAY
36469: PPUSH
36470: CALL_OW 235
36474: GO 36449
36476: POP
36477: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36478: LD_ADDR_EXP 124
36482: PUSH
36483: LD_EXP 124
36487: PPUSH
36488: LD_VAR 0 4
36492: PPUSH
36493: EMPTY
36494: PPUSH
36495: CALL_OW 1
36499: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36500: LD_VAR 0 1
36504: PPUSH
36505: LD_INT 0
36507: PPUSH
36508: CALL_OW 505
// end ; end ;
36512: LD_VAR 0 2
36516: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36517: LD_INT 0
36519: PPUSH
36520: PPUSH
36521: PPUSH
// if not hack in hackTanks or not vehicles then
36522: LD_VAR 0 1
36526: PUSH
36527: LD_EXP 123
36531: IN
36532: NOT
36533: PUSH
36534: LD_VAR 0 2
36538: NOT
36539: OR
36540: IFFALSE 36544
// exit ;
36542: GO 36819
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36544: LD_ADDR_VAR 0 2
36548: PUSH
36549: LD_VAR 0 1
36553: PPUSH
36554: LD_VAR 0 2
36558: PPUSH
36559: LD_INT 1
36561: PPUSH
36562: LD_INT 1
36564: PPUSH
36565: CALL 42582 0 4
36569: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36570: LD_ADDR_VAR 0 5
36574: PUSH
36575: LD_EXP 123
36579: PPUSH
36580: LD_VAR 0 1
36584: PPUSH
36585: CALL 41932 0 2
36589: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36590: LD_EXP 124
36594: PUSH
36595: LD_VAR 0 5
36599: ARRAY
36600: PUSH
36601: LD_EXP 125
36605: LESS
36606: IFFALSE 36795
// begin for i := 1 to vehicles do
36608: LD_ADDR_VAR 0 4
36612: PUSH
36613: DOUBLE
36614: LD_INT 1
36616: DEC
36617: ST_TO_ADDR
36618: LD_VAR 0 2
36622: PUSH
36623: FOR_TO
36624: IFFALSE 36793
// begin if hackTanksCaptured [ index ] = hackLimit then
36626: LD_EXP 124
36630: PUSH
36631: LD_VAR 0 5
36635: ARRAY
36636: PUSH
36637: LD_EXP 125
36641: EQUAL
36642: IFFALSE 36646
// break ;
36644: GO 36793
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36646: LD_ADDR_EXP 127
36650: PUSH
36651: LD_EXP 127
36655: PPUSH
36656: LD_VAR 0 5
36660: PPUSH
36661: LD_EXP 127
36665: PUSH
36666: LD_VAR 0 5
36670: ARRAY
36671: PUSH
36672: LD_INT 1
36674: PLUS
36675: PPUSH
36676: CALL_OW 1
36680: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36681: LD_ADDR_EXP 124
36685: PUSH
36686: LD_EXP 124
36690: PPUSH
36691: LD_VAR 0 5
36695: PUSH
36696: LD_EXP 124
36700: PUSH
36701: LD_VAR 0 5
36705: ARRAY
36706: PUSH
36707: LD_INT 1
36709: PLUS
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PPUSH
36715: LD_VAR 0 2
36719: PUSH
36720: LD_VAR 0 4
36724: ARRAY
36725: PUSH
36726: LD_VAR 0 2
36730: PUSH
36731: LD_VAR 0 4
36735: ARRAY
36736: PPUSH
36737: CALL_OW 255
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PPUSH
36746: CALL 42147 0 3
36750: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36751: LD_VAR 0 2
36755: PUSH
36756: LD_VAR 0 4
36760: ARRAY
36761: PPUSH
36762: LD_VAR 0 1
36766: PPUSH
36767: CALL_OW 255
36771: PPUSH
36772: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36776: LD_VAR 0 2
36780: PUSH
36781: LD_VAR 0 4
36785: ARRAY
36786: PPUSH
36787: CALL_OW 141
// end ;
36791: GO 36623
36793: POP
36794: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36795: LD_VAR 0 1
36799: PPUSH
36800: LD_EXP 124
36804: PUSH
36805: LD_VAR 0 5
36809: ARRAY
36810: PUSH
36811: LD_INT 0
36813: PLUS
36814: PPUSH
36815: CALL_OW 505
// end ;
36819: LD_VAR 0 3
36823: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36824: LD_INT 0
36826: PPUSH
36827: PPUSH
36828: PPUSH
36829: PPUSH
// if not hack in hackTanks then
36830: LD_VAR 0 1
36834: PUSH
36835: LD_EXP 123
36839: IN
36840: NOT
36841: IFFALSE 36845
// exit ;
36843: GO 37085
// index := GetElementIndex ( hackTanks , hack ) ;
36845: LD_ADDR_VAR 0 4
36849: PUSH
36850: LD_EXP 123
36854: PPUSH
36855: LD_VAR 0 1
36859: PPUSH
36860: CALL 41932 0 2
36864: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36865: LD_ADDR_VAR 0 3
36869: PUSH
36870: DOUBLE
36871: LD_EXP 124
36875: PUSH
36876: LD_VAR 0 4
36880: ARRAY
36881: INC
36882: ST_TO_ADDR
36883: LD_INT 1
36885: PUSH
36886: FOR_DOWNTO
36887: IFFALSE 37059
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36889: LD_ADDR_VAR 0 5
36893: PUSH
36894: LD_EXP 124
36898: PUSH
36899: LD_VAR 0 4
36903: ARRAY
36904: PUSH
36905: LD_VAR 0 3
36909: ARRAY
36910: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36911: LD_VAR 0 5
36915: PUSH
36916: LD_INT 1
36918: ARRAY
36919: PPUSH
36920: CALL_OW 302
36924: NOT
36925: PUSH
36926: LD_VAR 0 5
36930: PUSH
36931: LD_INT 1
36933: ARRAY
36934: PPUSH
36935: CALL_OW 255
36939: PUSH
36940: LD_VAR 0 1
36944: PPUSH
36945: CALL_OW 255
36949: NONEQUAL
36950: OR
36951: IFFALSE 37057
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36953: LD_VAR 0 5
36957: PUSH
36958: LD_INT 1
36960: ARRAY
36961: PPUSH
36962: CALL_OW 305
36966: PUSH
36967: LD_VAR 0 5
36971: PUSH
36972: LD_INT 1
36974: ARRAY
36975: PPUSH
36976: CALL_OW 255
36980: PUSH
36981: LD_VAR 0 1
36985: PPUSH
36986: CALL_OW 255
36990: EQUAL
36991: AND
36992: IFFALSE 37016
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36994: LD_VAR 0 5
36998: PUSH
36999: LD_INT 1
37001: ARRAY
37002: PPUSH
37003: LD_VAR 0 5
37007: PUSH
37008: LD_INT 2
37010: ARRAY
37011: PPUSH
37012: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37016: LD_ADDR_EXP 124
37020: PUSH
37021: LD_EXP 124
37025: PPUSH
37026: LD_VAR 0 4
37030: PPUSH
37031: LD_EXP 124
37035: PUSH
37036: LD_VAR 0 4
37040: ARRAY
37041: PPUSH
37042: LD_VAR 0 3
37046: PPUSH
37047: CALL_OW 3
37051: PPUSH
37052: CALL_OW 1
37056: ST_TO_ADDR
// end ; end ;
37057: GO 36886
37059: POP
37060: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37061: LD_VAR 0 1
37065: PPUSH
37066: LD_EXP 124
37070: PUSH
37071: LD_VAR 0 4
37075: ARRAY
37076: PUSH
37077: LD_INT 0
37079: PLUS
37080: PPUSH
37081: CALL_OW 505
// end ;
37085: LD_VAR 0 2
37089: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37090: LD_INT 0
37092: PPUSH
37093: PPUSH
37094: PPUSH
37095: PPUSH
// if not hack in hackTanks then
37096: LD_VAR 0 1
37100: PUSH
37101: LD_EXP 123
37105: IN
37106: NOT
37107: IFFALSE 37111
// exit ;
37109: GO 37196
// index := GetElementIndex ( hackTanks , hack ) ;
37111: LD_ADDR_VAR 0 5
37115: PUSH
37116: LD_EXP 123
37120: PPUSH
37121: LD_VAR 0 1
37125: PPUSH
37126: CALL 41932 0 2
37130: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37131: LD_ADDR_VAR 0 4
37135: PUSH
37136: DOUBLE
37137: LD_INT 1
37139: DEC
37140: ST_TO_ADDR
37141: LD_EXP 124
37145: PUSH
37146: LD_VAR 0 5
37150: ARRAY
37151: PUSH
37152: FOR_TO
37153: IFFALSE 37194
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37155: LD_EXP 124
37159: PUSH
37160: LD_VAR 0 5
37164: ARRAY
37165: PUSH
37166: LD_VAR 0 4
37170: ARRAY
37171: PUSH
37172: LD_INT 1
37174: ARRAY
37175: PUSH
37176: LD_VAR 0 2
37180: EQUAL
37181: IFFALSE 37192
// KillUnit ( vehicle ) ;
37183: LD_VAR 0 2
37187: PPUSH
37188: CALL_OW 66
37192: GO 37152
37194: POP
37195: POP
// end ; end_of_file
37196: LD_VAR 0 3
37200: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37201: LD_INT 0
37203: PPUSH
37204: PPUSH
// if exist_mode then
37205: LD_VAR 0 2
37209: IFFALSE 37234
// unit := CreateCharacter ( prefix & ident ) else
37211: LD_ADDR_VAR 0 5
37215: PUSH
37216: LD_VAR 0 3
37220: PUSH
37221: LD_VAR 0 1
37225: STR
37226: PPUSH
37227: CALL_OW 34
37231: ST_TO_ADDR
37232: GO 37249
// unit := NewCharacter ( ident ) ;
37234: LD_ADDR_VAR 0 5
37238: PUSH
37239: LD_VAR 0 1
37243: PPUSH
37244: CALL_OW 25
37248: ST_TO_ADDR
// result := unit ;
37249: LD_ADDR_VAR 0 4
37253: PUSH
37254: LD_VAR 0 5
37258: ST_TO_ADDR
// end ;
37259: LD_VAR 0 4
37263: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37264: LD_INT 0
37266: PPUSH
37267: PPUSH
// if not side or not nation then
37268: LD_VAR 0 1
37272: NOT
37273: PUSH
37274: LD_VAR 0 2
37278: NOT
37279: OR
37280: IFFALSE 37284
// exit ;
37282: GO 38048
// case nation of nation_american :
37284: LD_VAR 0 2
37288: PUSH
37289: LD_INT 1
37291: DOUBLE
37292: EQUAL
37293: IFTRUE 37297
37295: GO 37511
37297: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37298: LD_ADDR_VAR 0 4
37302: PUSH
37303: LD_INT 35
37305: PUSH
37306: LD_INT 45
37308: PUSH
37309: LD_INT 46
37311: PUSH
37312: LD_INT 47
37314: PUSH
37315: LD_INT 82
37317: PUSH
37318: LD_INT 83
37320: PUSH
37321: LD_INT 84
37323: PUSH
37324: LD_INT 85
37326: PUSH
37327: LD_INT 86
37329: PUSH
37330: LD_INT 1
37332: PUSH
37333: LD_INT 2
37335: PUSH
37336: LD_INT 6
37338: PUSH
37339: LD_INT 15
37341: PUSH
37342: LD_INT 16
37344: PUSH
37345: LD_INT 7
37347: PUSH
37348: LD_INT 12
37350: PUSH
37351: LD_INT 13
37353: PUSH
37354: LD_INT 10
37356: PUSH
37357: LD_INT 14
37359: PUSH
37360: LD_INT 20
37362: PUSH
37363: LD_INT 21
37365: PUSH
37366: LD_INT 22
37368: PUSH
37369: LD_INT 25
37371: PUSH
37372: LD_INT 32
37374: PUSH
37375: LD_INT 27
37377: PUSH
37378: LD_INT 36
37380: PUSH
37381: LD_INT 69
37383: PUSH
37384: LD_INT 39
37386: PUSH
37387: LD_INT 34
37389: PUSH
37390: LD_INT 40
37392: PUSH
37393: LD_INT 48
37395: PUSH
37396: LD_INT 49
37398: PUSH
37399: LD_INT 50
37401: PUSH
37402: LD_INT 51
37404: PUSH
37405: LD_INT 52
37407: PUSH
37408: LD_INT 53
37410: PUSH
37411: LD_INT 54
37413: PUSH
37414: LD_INT 55
37416: PUSH
37417: LD_INT 56
37419: PUSH
37420: LD_INT 57
37422: PUSH
37423: LD_INT 58
37425: PUSH
37426: LD_INT 59
37428: PUSH
37429: LD_INT 60
37431: PUSH
37432: LD_INT 61
37434: PUSH
37435: LD_INT 62
37437: PUSH
37438: LD_INT 80
37440: PUSH
37441: LD_INT 82
37443: PUSH
37444: LD_INT 83
37446: PUSH
37447: LD_INT 84
37449: PUSH
37450: LD_INT 85
37452: PUSH
37453: LD_INT 86
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: ST_TO_ADDR
37509: GO 37972
37511: LD_INT 2
37513: DOUBLE
37514: EQUAL
37515: IFTRUE 37519
37517: GO 37741
37519: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
37520: LD_ADDR_VAR 0 4
37524: PUSH
37525: LD_INT 35
37527: PUSH
37528: LD_INT 45
37530: PUSH
37531: LD_INT 46
37533: PUSH
37534: LD_INT 47
37536: PUSH
37537: LD_INT 82
37539: PUSH
37540: LD_INT 83
37542: PUSH
37543: LD_INT 84
37545: PUSH
37546: LD_INT 85
37548: PUSH
37549: LD_INT 87
37551: PUSH
37552: LD_INT 70
37554: PUSH
37555: LD_INT 1
37557: PUSH
37558: LD_INT 11
37560: PUSH
37561: LD_INT 3
37563: PUSH
37564: LD_INT 4
37566: PUSH
37567: LD_INT 5
37569: PUSH
37570: LD_INT 6
37572: PUSH
37573: LD_INT 15
37575: PUSH
37576: LD_INT 18
37578: PUSH
37579: LD_INT 7
37581: PUSH
37582: LD_INT 17
37584: PUSH
37585: LD_INT 8
37587: PUSH
37588: LD_INT 20
37590: PUSH
37591: LD_INT 21
37593: PUSH
37594: LD_INT 22
37596: PUSH
37597: LD_INT 72
37599: PUSH
37600: LD_INT 26
37602: PUSH
37603: LD_INT 69
37605: PUSH
37606: LD_INT 39
37608: PUSH
37609: LD_INT 40
37611: PUSH
37612: LD_INT 41
37614: PUSH
37615: LD_INT 42
37617: PUSH
37618: LD_INT 43
37620: PUSH
37621: LD_INT 48
37623: PUSH
37624: LD_INT 49
37626: PUSH
37627: LD_INT 50
37629: PUSH
37630: LD_INT 51
37632: PUSH
37633: LD_INT 52
37635: PUSH
37636: LD_INT 53
37638: PUSH
37639: LD_INT 54
37641: PUSH
37642: LD_INT 55
37644: PUSH
37645: LD_INT 56
37647: PUSH
37648: LD_INT 60
37650: PUSH
37651: LD_INT 61
37653: PUSH
37654: LD_INT 62
37656: PUSH
37657: LD_INT 66
37659: PUSH
37660: LD_INT 67
37662: PUSH
37663: LD_INT 68
37665: PUSH
37666: LD_INT 81
37668: PUSH
37669: LD_INT 82
37671: PUSH
37672: LD_INT 83
37674: PUSH
37675: LD_INT 84
37677: PUSH
37678: LD_INT 85
37680: PUSH
37681: LD_INT 87
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: ST_TO_ADDR
37739: GO 37972
37741: LD_INT 3
37743: DOUBLE
37744: EQUAL
37745: IFTRUE 37749
37747: GO 37971
37749: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37750: LD_ADDR_VAR 0 4
37754: PUSH
37755: LD_INT 46
37757: PUSH
37758: LD_INT 47
37760: PUSH
37761: LD_INT 1
37763: PUSH
37764: LD_INT 2
37766: PUSH
37767: LD_INT 82
37769: PUSH
37770: LD_INT 83
37772: PUSH
37773: LD_INT 84
37775: PUSH
37776: LD_INT 85
37778: PUSH
37779: LD_INT 86
37781: PUSH
37782: LD_INT 11
37784: PUSH
37785: LD_INT 9
37787: PUSH
37788: LD_INT 20
37790: PUSH
37791: LD_INT 19
37793: PUSH
37794: LD_INT 21
37796: PUSH
37797: LD_INT 24
37799: PUSH
37800: LD_INT 22
37802: PUSH
37803: LD_INT 25
37805: PUSH
37806: LD_INT 28
37808: PUSH
37809: LD_INT 29
37811: PUSH
37812: LD_INT 30
37814: PUSH
37815: LD_INT 31
37817: PUSH
37818: LD_INT 37
37820: PUSH
37821: LD_INT 38
37823: PUSH
37824: LD_INT 32
37826: PUSH
37827: LD_INT 27
37829: PUSH
37830: LD_INT 33
37832: PUSH
37833: LD_INT 69
37835: PUSH
37836: LD_INT 39
37838: PUSH
37839: LD_INT 34
37841: PUSH
37842: LD_INT 40
37844: PUSH
37845: LD_INT 71
37847: PUSH
37848: LD_INT 23
37850: PUSH
37851: LD_INT 44
37853: PUSH
37854: LD_INT 48
37856: PUSH
37857: LD_INT 49
37859: PUSH
37860: LD_INT 50
37862: PUSH
37863: LD_INT 51
37865: PUSH
37866: LD_INT 52
37868: PUSH
37869: LD_INT 53
37871: PUSH
37872: LD_INT 54
37874: PUSH
37875: LD_INT 55
37877: PUSH
37878: LD_INT 56
37880: PUSH
37881: LD_INT 57
37883: PUSH
37884: LD_INT 58
37886: PUSH
37887: LD_INT 59
37889: PUSH
37890: LD_INT 63
37892: PUSH
37893: LD_INT 64
37895: PUSH
37896: LD_INT 65
37898: PUSH
37899: LD_INT 82
37901: PUSH
37902: LD_INT 83
37904: PUSH
37905: LD_INT 84
37907: PUSH
37908: LD_INT 85
37910: PUSH
37911: LD_INT 86
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: ST_TO_ADDR
37969: GO 37972
37971: POP
// if state > - 1 and state < 3 then
37972: LD_VAR 0 3
37976: PUSH
37977: LD_INT 1
37979: NEG
37980: GREATER
37981: PUSH
37982: LD_VAR 0 3
37986: PUSH
37987: LD_INT 3
37989: LESS
37990: AND
37991: IFFALSE 38048
// for i in result do
37993: LD_ADDR_VAR 0 5
37997: PUSH
37998: LD_VAR 0 4
38002: PUSH
38003: FOR_IN
38004: IFFALSE 38046
// if GetTech ( i , side ) <> state then
38006: LD_VAR 0 5
38010: PPUSH
38011: LD_VAR 0 1
38015: PPUSH
38016: CALL_OW 321
38020: PUSH
38021: LD_VAR 0 3
38025: NONEQUAL
38026: IFFALSE 38044
// result := result diff i ;
38028: LD_ADDR_VAR 0 4
38032: PUSH
38033: LD_VAR 0 4
38037: PUSH
38038: LD_VAR 0 5
38042: DIFF
38043: ST_TO_ADDR
38044: GO 38003
38046: POP
38047: POP
// end ;
38048: LD_VAR 0 4
38052: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38053: LD_INT 0
38055: PPUSH
38056: PPUSH
38057: PPUSH
// result := true ;
38058: LD_ADDR_VAR 0 3
38062: PUSH
38063: LD_INT 1
38065: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38066: LD_ADDR_VAR 0 5
38070: PUSH
38071: LD_VAR 0 2
38075: PPUSH
38076: CALL_OW 480
38080: ST_TO_ADDR
// if not tmp then
38081: LD_VAR 0 5
38085: NOT
38086: IFFALSE 38090
// exit ;
38088: GO 38139
// for i in tmp do
38090: LD_ADDR_VAR 0 4
38094: PUSH
38095: LD_VAR 0 5
38099: PUSH
38100: FOR_IN
38101: IFFALSE 38137
// if GetTech ( i , side ) <> state_researched then
38103: LD_VAR 0 4
38107: PPUSH
38108: LD_VAR 0 1
38112: PPUSH
38113: CALL_OW 321
38117: PUSH
38118: LD_INT 2
38120: NONEQUAL
38121: IFFALSE 38135
// begin result := false ;
38123: LD_ADDR_VAR 0 3
38127: PUSH
38128: LD_INT 0
38130: ST_TO_ADDR
// exit ;
38131: POP
38132: POP
38133: GO 38139
// end ;
38135: GO 38100
38137: POP
38138: POP
// end ;
38139: LD_VAR 0 3
38143: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38144: LD_INT 0
38146: PPUSH
38147: PPUSH
38148: PPUSH
38149: PPUSH
38150: PPUSH
38151: PPUSH
38152: PPUSH
38153: PPUSH
38154: PPUSH
38155: PPUSH
38156: PPUSH
38157: PPUSH
38158: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38159: LD_VAR 0 1
38163: NOT
38164: PUSH
38165: LD_VAR 0 1
38169: PPUSH
38170: CALL_OW 257
38174: PUSH
38175: LD_INT 9
38177: NONEQUAL
38178: OR
38179: IFFALSE 38183
// exit ;
38181: GO 38756
// side := GetSide ( unit ) ;
38183: LD_ADDR_VAR 0 9
38187: PUSH
38188: LD_VAR 0 1
38192: PPUSH
38193: CALL_OW 255
38197: ST_TO_ADDR
// tech_space := tech_spacanom ;
38198: LD_ADDR_VAR 0 12
38202: PUSH
38203: LD_INT 29
38205: ST_TO_ADDR
// tech_time := tech_taurad ;
38206: LD_ADDR_VAR 0 13
38210: PUSH
38211: LD_INT 28
38213: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38214: LD_ADDR_VAR 0 11
38218: PUSH
38219: LD_VAR 0 1
38223: PPUSH
38224: CALL_OW 310
38228: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38229: LD_VAR 0 11
38233: PPUSH
38234: CALL_OW 247
38238: PUSH
38239: LD_INT 2
38241: EQUAL
38242: IFFALSE 38246
// exit ;
38244: GO 38756
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38246: LD_ADDR_VAR 0 8
38250: PUSH
38251: LD_INT 81
38253: PUSH
38254: LD_VAR 0 9
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 3
38265: PUSH
38266: LD_INT 21
38268: PUSH
38269: LD_INT 3
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PPUSH
38284: CALL_OW 69
38288: ST_TO_ADDR
// if not tmp then
38289: LD_VAR 0 8
38293: NOT
38294: IFFALSE 38298
// exit ;
38296: GO 38756
// if in_unit then
38298: LD_VAR 0 11
38302: IFFALSE 38326
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38304: LD_ADDR_VAR 0 10
38308: PUSH
38309: LD_VAR 0 8
38313: PPUSH
38314: LD_VAR 0 11
38318: PPUSH
38319: CALL_OW 74
38323: ST_TO_ADDR
38324: GO 38346
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38326: LD_ADDR_VAR 0 10
38330: PUSH
38331: LD_VAR 0 8
38335: PPUSH
38336: LD_VAR 0 1
38340: PPUSH
38341: CALL_OW 74
38345: ST_TO_ADDR
// if not enemy then
38346: LD_VAR 0 10
38350: NOT
38351: IFFALSE 38355
// exit ;
38353: GO 38756
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38355: LD_VAR 0 11
38359: PUSH
38360: LD_VAR 0 11
38364: PPUSH
38365: LD_VAR 0 10
38369: PPUSH
38370: CALL_OW 296
38374: PUSH
38375: LD_INT 13
38377: GREATER
38378: AND
38379: PUSH
38380: LD_VAR 0 1
38384: PPUSH
38385: LD_VAR 0 10
38389: PPUSH
38390: CALL_OW 296
38394: PUSH
38395: LD_INT 12
38397: GREATER
38398: OR
38399: IFFALSE 38403
// exit ;
38401: GO 38756
// missile := [ 1 ] ;
38403: LD_ADDR_VAR 0 14
38407: PUSH
38408: LD_INT 1
38410: PUSH
38411: EMPTY
38412: LIST
38413: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38414: LD_VAR 0 9
38418: PPUSH
38419: LD_VAR 0 12
38423: PPUSH
38424: CALL_OW 325
38428: IFFALSE 38457
// missile := Insert ( missile , missile + 1 , 2 ) ;
38430: LD_ADDR_VAR 0 14
38434: PUSH
38435: LD_VAR 0 14
38439: PPUSH
38440: LD_VAR 0 14
38444: PUSH
38445: LD_INT 1
38447: PLUS
38448: PPUSH
38449: LD_INT 2
38451: PPUSH
38452: CALL_OW 2
38456: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38457: LD_VAR 0 9
38461: PPUSH
38462: LD_VAR 0 13
38466: PPUSH
38467: CALL_OW 325
38471: PUSH
38472: LD_VAR 0 10
38476: PPUSH
38477: CALL_OW 255
38481: PPUSH
38482: LD_VAR 0 13
38486: PPUSH
38487: CALL_OW 325
38491: NOT
38492: AND
38493: IFFALSE 38522
// missile := Insert ( missile , missile + 1 , 3 ) ;
38495: LD_ADDR_VAR 0 14
38499: PUSH
38500: LD_VAR 0 14
38504: PPUSH
38505: LD_VAR 0 14
38509: PUSH
38510: LD_INT 1
38512: PLUS
38513: PPUSH
38514: LD_INT 3
38516: PPUSH
38517: CALL_OW 2
38521: ST_TO_ADDR
// if missile < 2 then
38522: LD_VAR 0 14
38526: PUSH
38527: LD_INT 2
38529: LESS
38530: IFFALSE 38534
// exit ;
38532: GO 38756
// x := GetX ( enemy ) ;
38534: LD_ADDR_VAR 0 4
38538: PUSH
38539: LD_VAR 0 10
38543: PPUSH
38544: CALL_OW 250
38548: ST_TO_ADDR
// y := GetY ( enemy ) ;
38549: LD_ADDR_VAR 0 5
38553: PUSH
38554: LD_VAR 0 10
38558: PPUSH
38559: CALL_OW 251
38563: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38564: LD_ADDR_VAR 0 6
38568: PUSH
38569: LD_VAR 0 4
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PPUSH
38578: LD_INT 1
38580: PPUSH
38581: CALL_OW 12
38585: PLUS
38586: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38587: LD_ADDR_VAR 0 7
38591: PUSH
38592: LD_VAR 0 5
38596: PUSH
38597: LD_INT 1
38599: NEG
38600: PPUSH
38601: LD_INT 1
38603: PPUSH
38604: CALL_OW 12
38608: PLUS
38609: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38610: LD_VAR 0 6
38614: PPUSH
38615: LD_VAR 0 7
38619: PPUSH
38620: CALL_OW 488
38624: NOT
38625: IFFALSE 38647
// begin _x := x ;
38627: LD_ADDR_VAR 0 6
38631: PUSH
38632: LD_VAR 0 4
38636: ST_TO_ADDR
// _y := y ;
38637: LD_ADDR_VAR 0 7
38641: PUSH
38642: LD_VAR 0 5
38646: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38647: LD_ADDR_VAR 0 3
38651: PUSH
38652: LD_INT 1
38654: PPUSH
38655: LD_VAR 0 14
38659: PPUSH
38660: CALL_OW 12
38664: ST_TO_ADDR
// case i of 1 :
38665: LD_VAR 0 3
38669: PUSH
38670: LD_INT 1
38672: DOUBLE
38673: EQUAL
38674: IFTRUE 38678
38676: GO 38695
38678: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38679: LD_VAR 0 1
38683: PPUSH
38684: LD_VAR 0 10
38688: PPUSH
38689: CALL_OW 115
38693: GO 38756
38695: LD_INT 2
38697: DOUBLE
38698: EQUAL
38699: IFTRUE 38703
38701: GO 38725
38703: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38704: LD_VAR 0 1
38708: PPUSH
38709: LD_VAR 0 6
38713: PPUSH
38714: LD_VAR 0 7
38718: PPUSH
38719: CALL_OW 153
38723: GO 38756
38725: LD_INT 3
38727: DOUBLE
38728: EQUAL
38729: IFTRUE 38733
38731: GO 38755
38733: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38734: LD_VAR 0 1
38738: PPUSH
38739: LD_VAR 0 6
38743: PPUSH
38744: LD_VAR 0 7
38748: PPUSH
38749: CALL_OW 154
38753: GO 38756
38755: POP
// end ;
38756: LD_VAR 0 2
38760: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38761: LD_INT 0
38763: PPUSH
38764: PPUSH
38765: PPUSH
38766: PPUSH
38767: PPUSH
38768: PPUSH
// if not unit or not building then
38769: LD_VAR 0 1
38773: NOT
38774: PUSH
38775: LD_VAR 0 2
38779: NOT
38780: OR
38781: IFFALSE 38785
// exit ;
38783: GO 38943
// x := GetX ( building ) ;
38785: LD_ADDR_VAR 0 5
38789: PUSH
38790: LD_VAR 0 2
38794: PPUSH
38795: CALL_OW 250
38799: ST_TO_ADDR
// y := GetY ( building ) ;
38800: LD_ADDR_VAR 0 6
38804: PUSH
38805: LD_VAR 0 2
38809: PPUSH
38810: CALL_OW 251
38814: ST_TO_ADDR
// for i = 0 to 5 do
38815: LD_ADDR_VAR 0 4
38819: PUSH
38820: DOUBLE
38821: LD_INT 0
38823: DEC
38824: ST_TO_ADDR
38825: LD_INT 5
38827: PUSH
38828: FOR_TO
38829: IFFALSE 38941
// begin _x := ShiftX ( x , i , 3 ) ;
38831: LD_ADDR_VAR 0 7
38835: PUSH
38836: LD_VAR 0 5
38840: PPUSH
38841: LD_VAR 0 4
38845: PPUSH
38846: LD_INT 3
38848: PPUSH
38849: CALL_OW 272
38853: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38854: LD_ADDR_VAR 0 8
38858: PUSH
38859: LD_VAR 0 6
38863: PPUSH
38864: LD_VAR 0 4
38868: PPUSH
38869: LD_INT 3
38871: PPUSH
38872: CALL_OW 273
38876: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38877: LD_VAR 0 7
38881: PPUSH
38882: LD_VAR 0 8
38886: PPUSH
38887: CALL_OW 488
38891: NOT
38892: IFFALSE 38896
// continue ;
38894: GO 38828
// if HexInfo ( _x , _y ) = 0 then
38896: LD_VAR 0 7
38900: PPUSH
38901: LD_VAR 0 8
38905: PPUSH
38906: CALL_OW 428
38910: PUSH
38911: LD_INT 0
38913: EQUAL
38914: IFFALSE 38939
// begin ComMoveXY ( unit , _x , _y ) ;
38916: LD_VAR 0 1
38920: PPUSH
38921: LD_VAR 0 7
38925: PPUSH
38926: LD_VAR 0 8
38930: PPUSH
38931: CALL_OW 111
// exit ;
38935: POP
38936: POP
38937: GO 38943
// end ; end ;
38939: GO 38828
38941: POP
38942: POP
// end ;
38943: LD_VAR 0 3
38947: RET
// export function ScanBase ( side , base_area ) ; begin
38948: LD_INT 0
38950: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38951: LD_ADDR_VAR 0 3
38955: PUSH
38956: LD_VAR 0 2
38960: PPUSH
38961: LD_INT 81
38963: PUSH
38964: LD_VAR 0 1
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PPUSH
38973: CALL_OW 70
38977: ST_TO_ADDR
// end ;
38978: LD_VAR 0 3
38982: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38983: LD_INT 0
38985: PPUSH
38986: PPUSH
38987: PPUSH
38988: PPUSH
// result := false ;
38989: LD_ADDR_VAR 0 2
38993: PUSH
38994: LD_INT 0
38996: ST_TO_ADDR
// side := GetSide ( unit ) ;
38997: LD_ADDR_VAR 0 3
39001: PUSH
39002: LD_VAR 0 1
39006: PPUSH
39007: CALL_OW 255
39011: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39012: LD_ADDR_VAR 0 4
39016: PUSH
39017: LD_VAR 0 1
39021: PPUSH
39022: CALL_OW 248
39026: ST_TO_ADDR
// case nat of 1 :
39027: LD_VAR 0 4
39031: PUSH
39032: LD_INT 1
39034: DOUBLE
39035: EQUAL
39036: IFTRUE 39040
39038: GO 39051
39040: POP
// tech := tech_lassight ; 2 :
39041: LD_ADDR_VAR 0 5
39045: PUSH
39046: LD_INT 12
39048: ST_TO_ADDR
39049: GO 39090
39051: LD_INT 2
39053: DOUBLE
39054: EQUAL
39055: IFTRUE 39059
39057: GO 39070
39059: POP
// tech := tech_mortar ; 3 :
39060: LD_ADDR_VAR 0 5
39064: PUSH
39065: LD_INT 41
39067: ST_TO_ADDR
39068: GO 39090
39070: LD_INT 3
39072: DOUBLE
39073: EQUAL
39074: IFTRUE 39078
39076: GO 39089
39078: POP
// tech := tech_bazooka ; end ;
39079: LD_ADDR_VAR 0 5
39083: PUSH
39084: LD_INT 44
39086: ST_TO_ADDR
39087: GO 39090
39089: POP
// if Researched ( side , tech ) then
39090: LD_VAR 0 3
39094: PPUSH
39095: LD_VAR 0 5
39099: PPUSH
39100: CALL_OW 325
39104: IFFALSE 39131
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39106: LD_ADDR_VAR 0 2
39110: PUSH
39111: LD_INT 5
39113: PUSH
39114: LD_INT 8
39116: PUSH
39117: LD_INT 9
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: LIST
39124: PUSH
39125: LD_VAR 0 4
39129: ARRAY
39130: ST_TO_ADDR
// end ;
39131: LD_VAR 0 2
39135: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39136: LD_INT 0
39138: PPUSH
39139: PPUSH
39140: PPUSH
// if not mines then
39141: LD_VAR 0 2
39145: NOT
39146: IFFALSE 39150
// exit ;
39148: GO 39294
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39150: LD_ADDR_VAR 0 5
39154: PUSH
39155: LD_INT 81
39157: PUSH
39158: LD_VAR 0 1
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 3
39169: PUSH
39170: LD_INT 21
39172: PUSH
39173: LD_INT 3
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PPUSH
39188: CALL_OW 69
39192: ST_TO_ADDR
// for i in mines do
39193: LD_ADDR_VAR 0 4
39197: PUSH
39198: LD_VAR 0 2
39202: PUSH
39203: FOR_IN
39204: IFFALSE 39292
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39206: LD_VAR 0 4
39210: PUSH
39211: LD_INT 1
39213: ARRAY
39214: PPUSH
39215: LD_VAR 0 4
39219: PUSH
39220: LD_INT 2
39222: ARRAY
39223: PPUSH
39224: CALL_OW 458
39228: NOT
39229: IFFALSE 39233
// continue ;
39231: GO 39203
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39233: LD_VAR 0 4
39237: PUSH
39238: LD_INT 1
39240: ARRAY
39241: PPUSH
39242: LD_VAR 0 4
39246: PUSH
39247: LD_INT 2
39249: ARRAY
39250: PPUSH
39251: CALL_OW 428
39255: PUSH
39256: LD_VAR 0 5
39260: IN
39261: IFFALSE 39290
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39263: LD_VAR 0 4
39267: PUSH
39268: LD_INT 1
39270: ARRAY
39271: PPUSH
39272: LD_VAR 0 4
39276: PUSH
39277: LD_INT 2
39279: ARRAY
39280: PPUSH
39281: LD_VAR 0 1
39285: PPUSH
39286: CALL_OW 456
// end ;
39290: GO 39203
39292: POP
39293: POP
// end ;
39294: LD_VAR 0 3
39298: RET
// export function Count ( array ) ; var i ; begin
39299: LD_INT 0
39301: PPUSH
39302: PPUSH
// result := 0 ;
39303: LD_ADDR_VAR 0 2
39307: PUSH
39308: LD_INT 0
39310: ST_TO_ADDR
// for i in array do
39311: LD_ADDR_VAR 0 3
39315: PUSH
39316: LD_VAR 0 1
39320: PUSH
39321: FOR_IN
39322: IFFALSE 39346
// if i then
39324: LD_VAR 0 3
39328: IFFALSE 39344
// result := result + 1 ;
39330: LD_ADDR_VAR 0 2
39334: PUSH
39335: LD_VAR 0 2
39339: PUSH
39340: LD_INT 1
39342: PLUS
39343: ST_TO_ADDR
39344: GO 39321
39346: POP
39347: POP
// end ;
39348: LD_VAR 0 2
39352: RET
// export function IsEmpty ( building ) ; begin
39353: LD_INT 0
39355: PPUSH
// if not building then
39356: LD_VAR 0 1
39360: NOT
39361: IFFALSE 39365
// exit ;
39363: GO 39408
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39365: LD_ADDR_VAR 0 2
39369: PUSH
39370: LD_VAR 0 1
39374: PUSH
39375: LD_INT 22
39377: PUSH
39378: LD_VAR 0 1
39382: PPUSH
39383: CALL_OW 255
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 58
39394: PUSH
39395: EMPTY
39396: LIST
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PPUSH
39402: CALL_OW 69
39406: IN
39407: ST_TO_ADDR
// end ;
39408: LD_VAR 0 2
39412: RET
// export function IsNotFull ( building ) ; begin
39413: LD_INT 0
39415: PPUSH
// if not building then
39416: LD_VAR 0 1
39420: NOT
39421: IFFALSE 39425
// exit ;
39423: GO 39444
// result := UnitsInside ( building ) < 6 ;
39425: LD_ADDR_VAR 0 2
39429: PUSH
39430: LD_VAR 0 1
39434: PPUSH
39435: CALL_OW 313
39439: PUSH
39440: LD_INT 6
39442: LESS
39443: ST_TO_ADDR
// end ;
39444: LD_VAR 0 2
39448: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39449: LD_INT 0
39451: PPUSH
39452: PPUSH
39453: PPUSH
39454: PPUSH
// tmp := [ ] ;
39455: LD_ADDR_VAR 0 3
39459: PUSH
39460: EMPTY
39461: ST_TO_ADDR
// list := [ ] ;
39462: LD_ADDR_VAR 0 5
39466: PUSH
39467: EMPTY
39468: ST_TO_ADDR
// for i = 16 to 25 do
39469: LD_ADDR_VAR 0 4
39473: PUSH
39474: DOUBLE
39475: LD_INT 16
39477: DEC
39478: ST_TO_ADDR
39479: LD_INT 25
39481: PUSH
39482: FOR_TO
39483: IFFALSE 39556
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39485: LD_ADDR_VAR 0 3
39489: PUSH
39490: LD_VAR 0 3
39494: PUSH
39495: LD_INT 22
39497: PUSH
39498: LD_VAR 0 1
39502: PPUSH
39503: CALL_OW 255
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 91
39514: PUSH
39515: LD_VAR 0 1
39519: PUSH
39520: LD_INT 6
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 30
39530: PUSH
39531: LD_VAR 0 4
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: LIST
39544: PUSH
39545: EMPTY
39546: LIST
39547: PPUSH
39548: CALL_OW 69
39552: ADD
39553: ST_TO_ADDR
39554: GO 39482
39556: POP
39557: POP
// for i = 1 to tmp do
39558: LD_ADDR_VAR 0 4
39562: PUSH
39563: DOUBLE
39564: LD_INT 1
39566: DEC
39567: ST_TO_ADDR
39568: LD_VAR 0 3
39572: PUSH
39573: FOR_TO
39574: IFFALSE 39662
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39576: LD_ADDR_VAR 0 5
39580: PUSH
39581: LD_VAR 0 5
39585: PUSH
39586: LD_VAR 0 3
39590: PUSH
39591: LD_VAR 0 4
39595: ARRAY
39596: PPUSH
39597: CALL_OW 266
39601: PUSH
39602: LD_VAR 0 3
39606: PUSH
39607: LD_VAR 0 4
39611: ARRAY
39612: PPUSH
39613: CALL_OW 250
39617: PUSH
39618: LD_VAR 0 3
39622: PUSH
39623: LD_VAR 0 4
39627: ARRAY
39628: PPUSH
39629: CALL_OW 251
39633: PUSH
39634: LD_VAR 0 3
39638: PUSH
39639: LD_VAR 0 4
39643: ARRAY
39644: PPUSH
39645: CALL_OW 254
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: PUSH
39656: EMPTY
39657: LIST
39658: ADD
39659: ST_TO_ADDR
39660: GO 39573
39662: POP
39663: POP
// result := list ;
39664: LD_ADDR_VAR 0 2
39668: PUSH
39669: LD_VAR 0 5
39673: ST_TO_ADDR
// end ;
39674: LD_VAR 0 2
39678: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39679: LD_INT 0
39681: PPUSH
39682: PPUSH
39683: PPUSH
39684: PPUSH
39685: PPUSH
39686: PPUSH
39687: PPUSH
// if not factory then
39688: LD_VAR 0 1
39692: NOT
39693: IFFALSE 39697
// exit ;
39695: GO 40290
// if control = control_apeman then
39697: LD_VAR 0 4
39701: PUSH
39702: LD_INT 5
39704: EQUAL
39705: IFFALSE 39814
// begin tmp := UnitsInside ( factory ) ;
39707: LD_ADDR_VAR 0 8
39711: PUSH
39712: LD_VAR 0 1
39716: PPUSH
39717: CALL_OW 313
39721: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39722: LD_VAR 0 8
39726: PPUSH
39727: LD_INT 25
39729: PUSH
39730: LD_INT 12
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PPUSH
39737: CALL_OW 72
39741: NOT
39742: IFFALSE 39752
// control := control_manual ;
39744: LD_ADDR_VAR 0 4
39748: PUSH
39749: LD_INT 1
39751: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39752: LD_ADDR_VAR 0 8
39756: PUSH
39757: LD_VAR 0 1
39761: PPUSH
39762: CALL 39449 0 1
39766: ST_TO_ADDR
// if tmp then
39767: LD_VAR 0 8
39771: IFFALSE 39814
// begin for i in tmp do
39773: LD_ADDR_VAR 0 7
39777: PUSH
39778: LD_VAR 0 8
39782: PUSH
39783: FOR_IN
39784: IFFALSE 39812
// if i [ 1 ] = b_ext_radio then
39786: LD_VAR 0 7
39790: PUSH
39791: LD_INT 1
39793: ARRAY
39794: PUSH
39795: LD_INT 22
39797: EQUAL
39798: IFFALSE 39810
// begin control := control_remote ;
39800: LD_ADDR_VAR 0 4
39804: PUSH
39805: LD_INT 2
39807: ST_TO_ADDR
// break ;
39808: GO 39812
// end ;
39810: GO 39783
39812: POP
39813: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39814: LD_VAR 0 1
39818: PPUSH
39819: LD_VAR 0 2
39823: PPUSH
39824: LD_VAR 0 3
39828: PPUSH
39829: LD_VAR 0 4
39833: PPUSH
39834: LD_VAR 0 5
39838: PPUSH
39839: CALL_OW 448
39843: IFFALSE 39878
// begin result := [ chassis , engine , control , weapon ] ;
39845: LD_ADDR_VAR 0 6
39849: PUSH
39850: LD_VAR 0 2
39854: PUSH
39855: LD_VAR 0 3
39859: PUSH
39860: LD_VAR 0 4
39864: PUSH
39865: LD_VAR 0 5
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: ST_TO_ADDR
// exit ;
39876: GO 40290
// end ; _chassis := AvailableChassisList ( factory ) ;
39878: LD_ADDR_VAR 0 9
39882: PUSH
39883: LD_VAR 0 1
39887: PPUSH
39888: CALL_OW 475
39892: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39893: LD_ADDR_VAR 0 11
39897: PUSH
39898: LD_VAR 0 1
39902: PPUSH
39903: CALL_OW 476
39907: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39908: LD_ADDR_VAR 0 12
39912: PUSH
39913: LD_VAR 0 1
39917: PPUSH
39918: CALL_OW 477
39922: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39923: LD_ADDR_VAR 0 10
39927: PUSH
39928: LD_VAR 0 1
39932: PPUSH
39933: CALL_OW 478
39937: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39938: LD_VAR 0 9
39942: NOT
39943: PUSH
39944: LD_VAR 0 11
39948: NOT
39949: OR
39950: PUSH
39951: LD_VAR 0 12
39955: NOT
39956: OR
39957: PUSH
39958: LD_VAR 0 10
39962: NOT
39963: OR
39964: IFFALSE 39999
// begin result := [ chassis , engine , control , weapon ] ;
39966: LD_ADDR_VAR 0 6
39970: PUSH
39971: LD_VAR 0 2
39975: PUSH
39976: LD_VAR 0 3
39980: PUSH
39981: LD_VAR 0 4
39985: PUSH
39986: LD_VAR 0 5
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: ST_TO_ADDR
// exit ;
39997: GO 40290
// end ; if not chassis in _chassis then
39999: LD_VAR 0 2
40003: PUSH
40004: LD_VAR 0 9
40008: IN
40009: NOT
40010: IFFALSE 40036
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40012: LD_ADDR_VAR 0 2
40016: PUSH
40017: LD_VAR 0 9
40021: PUSH
40022: LD_INT 1
40024: PPUSH
40025: LD_VAR 0 9
40029: PPUSH
40030: CALL_OW 12
40034: ARRAY
40035: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40036: LD_VAR 0 2
40040: PPUSH
40041: LD_VAR 0 3
40045: PPUSH
40046: CALL 40295 0 2
40050: NOT
40051: IFFALSE 40110
// repeat engine := _engine [ 1 ] ;
40053: LD_ADDR_VAR 0 3
40057: PUSH
40058: LD_VAR 0 11
40062: PUSH
40063: LD_INT 1
40065: ARRAY
40066: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40067: LD_ADDR_VAR 0 11
40071: PUSH
40072: LD_VAR 0 11
40076: PPUSH
40077: LD_INT 1
40079: PPUSH
40080: CALL_OW 3
40084: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40085: LD_VAR 0 2
40089: PPUSH
40090: LD_VAR 0 3
40094: PPUSH
40095: CALL 40295 0 2
40099: PUSH
40100: LD_VAR 0 11
40104: PUSH
40105: EMPTY
40106: EQUAL
40107: OR
40108: IFFALSE 40053
// if not control in _control then
40110: LD_VAR 0 4
40114: PUSH
40115: LD_VAR 0 12
40119: IN
40120: NOT
40121: IFFALSE 40147
// control := _control [ rand ( 1 , _control ) ] ;
40123: LD_ADDR_VAR 0 4
40127: PUSH
40128: LD_VAR 0 12
40132: PUSH
40133: LD_INT 1
40135: PPUSH
40136: LD_VAR 0 12
40140: PPUSH
40141: CALL_OW 12
40145: ARRAY
40146: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40147: LD_VAR 0 2
40151: PPUSH
40152: LD_VAR 0 5
40156: PPUSH
40157: CALL 40515 0 2
40161: NOT
40162: IFFALSE 40221
// repeat weapon := _weapon [ 1 ] ;
40164: LD_ADDR_VAR 0 5
40168: PUSH
40169: LD_VAR 0 10
40173: PUSH
40174: LD_INT 1
40176: ARRAY
40177: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40178: LD_ADDR_VAR 0 10
40182: PUSH
40183: LD_VAR 0 10
40187: PPUSH
40188: LD_INT 1
40190: PPUSH
40191: CALL_OW 3
40195: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40196: LD_VAR 0 2
40200: PPUSH
40201: LD_VAR 0 5
40205: PPUSH
40206: CALL 40515 0 2
40210: PUSH
40211: LD_VAR 0 10
40215: PUSH
40216: EMPTY
40217: EQUAL
40218: OR
40219: IFFALSE 40164
// result := [ ] ;
40221: LD_ADDR_VAR 0 6
40225: PUSH
40226: EMPTY
40227: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40228: LD_VAR 0 1
40232: PPUSH
40233: LD_VAR 0 2
40237: PPUSH
40238: LD_VAR 0 3
40242: PPUSH
40243: LD_VAR 0 4
40247: PPUSH
40248: LD_VAR 0 5
40252: PPUSH
40253: CALL_OW 448
40257: IFFALSE 40290
// result := [ chassis , engine , control , weapon ] ;
40259: LD_ADDR_VAR 0 6
40263: PUSH
40264: LD_VAR 0 2
40268: PUSH
40269: LD_VAR 0 3
40273: PUSH
40274: LD_VAR 0 4
40278: PUSH
40279: LD_VAR 0 5
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: ST_TO_ADDR
// end ;
40290: LD_VAR 0 6
40294: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40295: LD_INT 0
40297: PPUSH
// if not chassis or not engine then
40298: LD_VAR 0 1
40302: NOT
40303: PUSH
40304: LD_VAR 0 2
40308: NOT
40309: OR
40310: IFFALSE 40314
// exit ;
40312: GO 40510
// case engine of engine_solar :
40314: LD_VAR 0 2
40318: PUSH
40319: LD_INT 2
40321: DOUBLE
40322: EQUAL
40323: IFTRUE 40327
40325: GO 40365
40327: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40328: LD_ADDR_VAR 0 3
40332: PUSH
40333: LD_INT 11
40335: PUSH
40336: LD_INT 12
40338: PUSH
40339: LD_INT 13
40341: PUSH
40342: LD_INT 14
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: LD_INT 3
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: ST_TO_ADDR
40363: GO 40494
40365: LD_INT 1
40367: DOUBLE
40368: EQUAL
40369: IFTRUE 40373
40371: GO 40435
40373: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40374: LD_ADDR_VAR 0 3
40378: PUSH
40379: LD_INT 11
40381: PUSH
40382: LD_INT 12
40384: PUSH
40385: LD_INT 13
40387: PUSH
40388: LD_INT 14
40390: PUSH
40391: LD_INT 1
40393: PUSH
40394: LD_INT 2
40396: PUSH
40397: LD_INT 3
40399: PUSH
40400: LD_INT 4
40402: PUSH
40403: LD_INT 5
40405: PUSH
40406: LD_INT 21
40408: PUSH
40409: LD_INT 23
40411: PUSH
40412: LD_INT 22
40414: PUSH
40415: LD_INT 24
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: ST_TO_ADDR
40433: GO 40494
40435: LD_INT 3
40437: DOUBLE
40438: EQUAL
40439: IFTRUE 40443
40441: GO 40493
40443: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40444: LD_ADDR_VAR 0 3
40448: PUSH
40449: LD_INT 13
40451: PUSH
40452: LD_INT 14
40454: PUSH
40455: LD_INT 2
40457: PUSH
40458: LD_INT 3
40460: PUSH
40461: LD_INT 4
40463: PUSH
40464: LD_INT 5
40466: PUSH
40467: LD_INT 21
40469: PUSH
40470: LD_INT 22
40472: PUSH
40473: LD_INT 23
40475: PUSH
40476: LD_INT 24
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: ST_TO_ADDR
40491: GO 40494
40493: POP
// result := ( chassis in result ) ;
40494: LD_ADDR_VAR 0 3
40498: PUSH
40499: LD_VAR 0 1
40503: PUSH
40504: LD_VAR 0 3
40508: IN
40509: ST_TO_ADDR
// end ;
40510: LD_VAR 0 3
40514: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40515: LD_INT 0
40517: PPUSH
// if not chassis or not weapon then
40518: LD_VAR 0 1
40522: NOT
40523: PUSH
40524: LD_VAR 0 2
40528: NOT
40529: OR
40530: IFFALSE 40534
// exit ;
40532: GO 41560
// case weapon of us_machine_gun :
40534: LD_VAR 0 2
40538: PUSH
40539: LD_INT 2
40541: DOUBLE
40542: EQUAL
40543: IFTRUE 40547
40545: GO 40577
40547: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40548: LD_ADDR_VAR 0 3
40552: PUSH
40553: LD_INT 1
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: LD_INT 3
40561: PUSH
40562: LD_INT 4
40564: PUSH
40565: LD_INT 5
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: ST_TO_ADDR
40575: GO 41544
40577: LD_INT 3
40579: DOUBLE
40580: EQUAL
40581: IFTRUE 40585
40583: GO 40615
40585: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40586: LD_ADDR_VAR 0 3
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: LD_INT 2
40596: PUSH
40597: LD_INT 3
40599: PUSH
40600: LD_INT 4
40602: PUSH
40603: LD_INT 5
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: ST_TO_ADDR
40613: GO 41544
40615: LD_INT 11
40617: DOUBLE
40618: EQUAL
40619: IFTRUE 40623
40621: GO 40653
40623: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40624: LD_ADDR_VAR 0 3
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: LD_INT 2
40634: PUSH
40635: LD_INT 3
40637: PUSH
40638: LD_INT 4
40640: PUSH
40641: LD_INT 5
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: ST_TO_ADDR
40651: GO 41544
40653: LD_INT 4
40655: DOUBLE
40656: EQUAL
40657: IFTRUE 40661
40659: GO 40687
40661: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40662: LD_ADDR_VAR 0 3
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: LD_INT 3
40672: PUSH
40673: LD_INT 4
40675: PUSH
40676: LD_INT 5
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: ST_TO_ADDR
40685: GO 41544
40687: LD_INT 5
40689: DOUBLE
40690: EQUAL
40691: IFTRUE 40695
40693: GO 40721
40695: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40696: LD_ADDR_VAR 0 3
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: LD_INT 3
40706: PUSH
40707: LD_INT 4
40709: PUSH
40710: LD_INT 5
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: ST_TO_ADDR
40719: GO 41544
40721: LD_INT 9
40723: DOUBLE
40724: EQUAL
40725: IFTRUE 40729
40727: GO 40755
40729: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40730: LD_ADDR_VAR 0 3
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: LD_INT 3
40740: PUSH
40741: LD_INT 4
40743: PUSH
40744: LD_INT 5
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: ST_TO_ADDR
40753: GO 41544
40755: LD_INT 7
40757: DOUBLE
40758: EQUAL
40759: IFTRUE 40763
40761: GO 40789
40763: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40764: LD_ADDR_VAR 0 3
40768: PUSH
40769: LD_INT 2
40771: PUSH
40772: LD_INT 3
40774: PUSH
40775: LD_INT 4
40777: PUSH
40778: LD_INT 5
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: ST_TO_ADDR
40787: GO 41544
40789: LD_INT 12
40791: DOUBLE
40792: EQUAL
40793: IFTRUE 40797
40795: GO 40823
40797: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40798: LD_ADDR_VAR 0 3
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: LD_INT 3
40808: PUSH
40809: LD_INT 4
40811: PUSH
40812: LD_INT 5
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: ST_TO_ADDR
40821: GO 41544
40823: LD_INT 13
40825: DOUBLE
40826: EQUAL
40827: IFTRUE 40831
40829: GO 40857
40831: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40832: LD_ADDR_VAR 0 3
40836: PUSH
40837: LD_INT 2
40839: PUSH
40840: LD_INT 3
40842: PUSH
40843: LD_INT 4
40845: PUSH
40846: LD_INT 5
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: ST_TO_ADDR
40855: GO 41544
40857: LD_INT 14
40859: DOUBLE
40860: EQUAL
40861: IFTRUE 40865
40863: GO 40883
40865: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40866: LD_ADDR_VAR 0 3
40870: PUSH
40871: LD_INT 4
40873: PUSH
40874: LD_INT 5
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: ST_TO_ADDR
40881: GO 41544
40883: LD_INT 6
40885: DOUBLE
40886: EQUAL
40887: IFTRUE 40891
40889: GO 40909
40891: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40892: LD_ADDR_VAR 0 3
40896: PUSH
40897: LD_INT 4
40899: PUSH
40900: LD_INT 5
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: ST_TO_ADDR
40907: GO 41544
40909: LD_INT 10
40911: DOUBLE
40912: EQUAL
40913: IFTRUE 40917
40915: GO 40935
40917: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40918: LD_ADDR_VAR 0 3
40922: PUSH
40923: LD_INT 4
40925: PUSH
40926: LD_INT 5
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: ST_TO_ADDR
40933: GO 41544
40935: LD_INT 22
40937: DOUBLE
40938: EQUAL
40939: IFTRUE 40943
40941: GO 40969
40943: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40944: LD_ADDR_VAR 0 3
40948: PUSH
40949: LD_INT 11
40951: PUSH
40952: LD_INT 12
40954: PUSH
40955: LD_INT 13
40957: PUSH
40958: LD_INT 14
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: ST_TO_ADDR
40967: GO 41544
40969: LD_INT 23
40971: DOUBLE
40972: EQUAL
40973: IFTRUE 40977
40975: GO 41003
40977: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40978: LD_ADDR_VAR 0 3
40982: PUSH
40983: LD_INT 11
40985: PUSH
40986: LD_INT 12
40988: PUSH
40989: LD_INT 13
40991: PUSH
40992: LD_INT 14
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: ST_TO_ADDR
41001: GO 41544
41003: LD_INT 24
41005: DOUBLE
41006: EQUAL
41007: IFTRUE 41011
41009: GO 41037
41011: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41012: LD_ADDR_VAR 0 3
41016: PUSH
41017: LD_INT 11
41019: PUSH
41020: LD_INT 12
41022: PUSH
41023: LD_INT 13
41025: PUSH
41026: LD_INT 14
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: ST_TO_ADDR
41035: GO 41544
41037: LD_INT 30
41039: DOUBLE
41040: EQUAL
41041: IFTRUE 41045
41043: GO 41071
41045: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41046: LD_ADDR_VAR 0 3
41050: PUSH
41051: LD_INT 11
41053: PUSH
41054: LD_INT 12
41056: PUSH
41057: LD_INT 13
41059: PUSH
41060: LD_INT 14
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: ST_TO_ADDR
41069: GO 41544
41071: LD_INT 25
41073: DOUBLE
41074: EQUAL
41075: IFTRUE 41079
41077: GO 41097
41079: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41080: LD_ADDR_VAR 0 3
41084: PUSH
41085: LD_INT 13
41087: PUSH
41088: LD_INT 14
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: ST_TO_ADDR
41095: GO 41544
41097: LD_INT 27
41099: DOUBLE
41100: EQUAL
41101: IFTRUE 41105
41103: GO 41123
41105: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41106: LD_ADDR_VAR 0 3
41110: PUSH
41111: LD_INT 13
41113: PUSH
41114: LD_INT 14
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: ST_TO_ADDR
41121: GO 41544
41123: LD_INT 28
41125: DOUBLE
41126: EQUAL
41127: IFTRUE 41131
41129: GO 41149
41131: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41132: LD_ADDR_VAR 0 3
41136: PUSH
41137: LD_INT 13
41139: PUSH
41140: LD_INT 14
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: ST_TO_ADDR
41147: GO 41544
41149: LD_INT 29
41151: DOUBLE
41152: EQUAL
41153: IFTRUE 41157
41155: GO 41175
41157: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41158: LD_ADDR_VAR 0 3
41162: PUSH
41163: LD_INT 13
41165: PUSH
41166: LD_INT 14
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: ST_TO_ADDR
41173: GO 41544
41175: LD_INT 31
41177: DOUBLE
41178: EQUAL
41179: IFTRUE 41183
41181: GO 41201
41183: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41184: LD_ADDR_VAR 0 3
41188: PUSH
41189: LD_INT 13
41191: PUSH
41192: LD_INT 14
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: ST_TO_ADDR
41199: GO 41544
41201: LD_INT 26
41203: DOUBLE
41204: EQUAL
41205: IFTRUE 41209
41207: GO 41227
41209: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41210: LD_ADDR_VAR 0 3
41214: PUSH
41215: LD_INT 13
41217: PUSH
41218: LD_INT 14
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: ST_TO_ADDR
41225: GO 41544
41227: LD_INT 42
41229: DOUBLE
41230: EQUAL
41231: IFTRUE 41235
41233: GO 41261
41235: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41236: LD_ADDR_VAR 0 3
41240: PUSH
41241: LD_INT 21
41243: PUSH
41244: LD_INT 22
41246: PUSH
41247: LD_INT 23
41249: PUSH
41250: LD_INT 24
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: ST_TO_ADDR
41259: GO 41544
41261: LD_INT 43
41263: DOUBLE
41264: EQUAL
41265: IFTRUE 41269
41267: GO 41295
41269: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41270: LD_ADDR_VAR 0 3
41274: PUSH
41275: LD_INT 21
41277: PUSH
41278: LD_INT 22
41280: PUSH
41281: LD_INT 23
41283: PUSH
41284: LD_INT 24
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: ST_TO_ADDR
41293: GO 41544
41295: LD_INT 44
41297: DOUBLE
41298: EQUAL
41299: IFTRUE 41303
41301: GO 41329
41303: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41304: LD_ADDR_VAR 0 3
41308: PUSH
41309: LD_INT 21
41311: PUSH
41312: LD_INT 22
41314: PUSH
41315: LD_INT 23
41317: PUSH
41318: LD_INT 24
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: ST_TO_ADDR
41327: GO 41544
41329: LD_INT 45
41331: DOUBLE
41332: EQUAL
41333: IFTRUE 41337
41335: GO 41363
41337: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41338: LD_ADDR_VAR 0 3
41342: PUSH
41343: LD_INT 21
41345: PUSH
41346: LD_INT 22
41348: PUSH
41349: LD_INT 23
41351: PUSH
41352: LD_INT 24
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: ST_TO_ADDR
41361: GO 41544
41363: LD_INT 49
41365: DOUBLE
41366: EQUAL
41367: IFTRUE 41371
41369: GO 41397
41371: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41372: LD_ADDR_VAR 0 3
41376: PUSH
41377: LD_INT 21
41379: PUSH
41380: LD_INT 22
41382: PUSH
41383: LD_INT 23
41385: PUSH
41386: LD_INT 24
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: ST_TO_ADDR
41395: GO 41544
41397: LD_INT 51
41399: DOUBLE
41400: EQUAL
41401: IFTRUE 41405
41403: GO 41431
41405: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41406: LD_ADDR_VAR 0 3
41410: PUSH
41411: LD_INT 21
41413: PUSH
41414: LD_INT 22
41416: PUSH
41417: LD_INT 23
41419: PUSH
41420: LD_INT 24
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: ST_TO_ADDR
41429: GO 41544
41431: LD_INT 52
41433: DOUBLE
41434: EQUAL
41435: IFTRUE 41439
41437: GO 41465
41439: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41440: LD_ADDR_VAR 0 3
41444: PUSH
41445: LD_INT 21
41447: PUSH
41448: LD_INT 22
41450: PUSH
41451: LD_INT 23
41453: PUSH
41454: LD_INT 24
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: ST_TO_ADDR
41463: GO 41544
41465: LD_INT 53
41467: DOUBLE
41468: EQUAL
41469: IFTRUE 41473
41471: GO 41491
41473: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41474: LD_ADDR_VAR 0 3
41478: PUSH
41479: LD_INT 23
41481: PUSH
41482: LD_INT 24
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: ST_TO_ADDR
41489: GO 41544
41491: LD_INT 46
41493: DOUBLE
41494: EQUAL
41495: IFTRUE 41499
41497: GO 41517
41499: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41500: LD_ADDR_VAR 0 3
41504: PUSH
41505: LD_INT 23
41507: PUSH
41508: LD_INT 24
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: ST_TO_ADDR
41515: GO 41544
41517: LD_INT 47
41519: DOUBLE
41520: EQUAL
41521: IFTRUE 41525
41523: GO 41543
41525: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41526: LD_ADDR_VAR 0 3
41530: PUSH
41531: LD_INT 23
41533: PUSH
41534: LD_INT 24
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: ST_TO_ADDR
41541: GO 41544
41543: POP
// result := ( chassis in result ) ;
41544: LD_ADDR_VAR 0 3
41548: PUSH
41549: LD_VAR 0 1
41553: PUSH
41554: LD_VAR 0 3
41558: IN
41559: ST_TO_ADDR
// end ;
41560: LD_VAR 0 3
41564: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41565: LD_INT 0
41567: PPUSH
41568: PPUSH
41569: PPUSH
41570: PPUSH
41571: PPUSH
41572: PPUSH
41573: PPUSH
// result := array ;
41574: LD_ADDR_VAR 0 5
41578: PUSH
41579: LD_VAR 0 1
41583: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41584: LD_VAR 0 1
41588: NOT
41589: PUSH
41590: LD_VAR 0 2
41594: NOT
41595: OR
41596: PUSH
41597: LD_VAR 0 3
41601: NOT
41602: OR
41603: PUSH
41604: LD_VAR 0 2
41608: PUSH
41609: LD_VAR 0 1
41613: GREATER
41614: OR
41615: PUSH
41616: LD_VAR 0 3
41620: PUSH
41621: LD_VAR 0 1
41625: GREATER
41626: OR
41627: IFFALSE 41631
// exit ;
41629: GO 41927
// if direction then
41631: LD_VAR 0 4
41635: IFFALSE 41699
// begin d := 1 ;
41637: LD_ADDR_VAR 0 9
41641: PUSH
41642: LD_INT 1
41644: ST_TO_ADDR
// if i_from > i_to then
41645: LD_VAR 0 2
41649: PUSH
41650: LD_VAR 0 3
41654: GREATER
41655: IFFALSE 41681
// length := ( array - i_from ) + i_to else
41657: LD_ADDR_VAR 0 11
41661: PUSH
41662: LD_VAR 0 1
41666: PUSH
41667: LD_VAR 0 2
41671: MINUS
41672: PUSH
41673: LD_VAR 0 3
41677: PLUS
41678: ST_TO_ADDR
41679: GO 41697
// length := i_to - i_from ;
41681: LD_ADDR_VAR 0 11
41685: PUSH
41686: LD_VAR 0 3
41690: PUSH
41691: LD_VAR 0 2
41695: MINUS
41696: ST_TO_ADDR
// end else
41697: GO 41760
// begin d := - 1 ;
41699: LD_ADDR_VAR 0 9
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: ST_TO_ADDR
// if i_from > i_to then
41708: LD_VAR 0 2
41712: PUSH
41713: LD_VAR 0 3
41717: GREATER
41718: IFFALSE 41738
// length := i_from - i_to else
41720: LD_ADDR_VAR 0 11
41724: PUSH
41725: LD_VAR 0 2
41729: PUSH
41730: LD_VAR 0 3
41734: MINUS
41735: ST_TO_ADDR
41736: GO 41760
// length := ( array - i_to ) + i_from ;
41738: LD_ADDR_VAR 0 11
41742: PUSH
41743: LD_VAR 0 1
41747: PUSH
41748: LD_VAR 0 3
41752: MINUS
41753: PUSH
41754: LD_VAR 0 2
41758: PLUS
41759: ST_TO_ADDR
// end ; if not length then
41760: LD_VAR 0 11
41764: NOT
41765: IFFALSE 41769
// exit ;
41767: GO 41927
// tmp := array ;
41769: LD_ADDR_VAR 0 10
41773: PUSH
41774: LD_VAR 0 1
41778: ST_TO_ADDR
// for i = 1 to length do
41779: LD_ADDR_VAR 0 6
41783: PUSH
41784: DOUBLE
41785: LD_INT 1
41787: DEC
41788: ST_TO_ADDR
41789: LD_VAR 0 11
41793: PUSH
41794: FOR_TO
41795: IFFALSE 41915
// begin for j = 1 to array do
41797: LD_ADDR_VAR 0 7
41801: PUSH
41802: DOUBLE
41803: LD_INT 1
41805: DEC
41806: ST_TO_ADDR
41807: LD_VAR 0 1
41811: PUSH
41812: FOR_TO
41813: IFFALSE 41901
// begin k := j + d ;
41815: LD_ADDR_VAR 0 8
41819: PUSH
41820: LD_VAR 0 7
41824: PUSH
41825: LD_VAR 0 9
41829: PLUS
41830: ST_TO_ADDR
// if k > array then
41831: LD_VAR 0 8
41835: PUSH
41836: LD_VAR 0 1
41840: GREATER
41841: IFFALSE 41851
// k := 1 ;
41843: LD_ADDR_VAR 0 8
41847: PUSH
41848: LD_INT 1
41850: ST_TO_ADDR
// if not k then
41851: LD_VAR 0 8
41855: NOT
41856: IFFALSE 41868
// k := array ;
41858: LD_ADDR_VAR 0 8
41862: PUSH
41863: LD_VAR 0 1
41867: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41868: LD_ADDR_VAR 0 10
41872: PUSH
41873: LD_VAR 0 10
41877: PPUSH
41878: LD_VAR 0 8
41882: PPUSH
41883: LD_VAR 0 1
41887: PUSH
41888: LD_VAR 0 7
41892: ARRAY
41893: PPUSH
41894: CALL_OW 1
41898: ST_TO_ADDR
// end ;
41899: GO 41812
41901: POP
41902: POP
// array := tmp ;
41903: LD_ADDR_VAR 0 1
41907: PUSH
41908: LD_VAR 0 10
41912: ST_TO_ADDR
// end ;
41913: GO 41794
41915: POP
41916: POP
// result := array ;
41917: LD_ADDR_VAR 0 5
41921: PUSH
41922: LD_VAR 0 1
41926: ST_TO_ADDR
// end ;
41927: LD_VAR 0 5
41931: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41932: LD_INT 0
41934: PPUSH
41935: PPUSH
// result := 0 ;
41936: LD_ADDR_VAR 0 3
41940: PUSH
41941: LD_INT 0
41943: ST_TO_ADDR
// if not array or not value in array then
41944: LD_VAR 0 1
41948: NOT
41949: PUSH
41950: LD_VAR 0 2
41954: PUSH
41955: LD_VAR 0 1
41959: IN
41960: NOT
41961: OR
41962: IFFALSE 41966
// exit ;
41964: GO 42020
// for i = 1 to array do
41966: LD_ADDR_VAR 0 4
41970: PUSH
41971: DOUBLE
41972: LD_INT 1
41974: DEC
41975: ST_TO_ADDR
41976: LD_VAR 0 1
41980: PUSH
41981: FOR_TO
41982: IFFALSE 42018
// if value = array [ i ] then
41984: LD_VAR 0 2
41988: PUSH
41989: LD_VAR 0 1
41993: PUSH
41994: LD_VAR 0 4
41998: ARRAY
41999: EQUAL
42000: IFFALSE 42016
// begin result := i ;
42002: LD_ADDR_VAR 0 3
42006: PUSH
42007: LD_VAR 0 4
42011: ST_TO_ADDR
// exit ;
42012: POP
42013: POP
42014: GO 42020
// end ;
42016: GO 41981
42018: POP
42019: POP
// end ;
42020: LD_VAR 0 3
42024: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42025: LD_INT 0
42027: PPUSH
// vc_chassis := chassis ;
42028: LD_ADDR_OWVAR 37
42032: PUSH
42033: LD_VAR 0 1
42037: ST_TO_ADDR
// vc_engine := engine ;
42038: LD_ADDR_OWVAR 39
42042: PUSH
42043: LD_VAR 0 2
42047: ST_TO_ADDR
// vc_control := control ;
42048: LD_ADDR_OWVAR 38
42052: PUSH
42053: LD_VAR 0 3
42057: ST_TO_ADDR
// vc_weapon := weapon ;
42058: LD_ADDR_OWVAR 40
42062: PUSH
42063: LD_VAR 0 4
42067: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42068: LD_ADDR_OWVAR 41
42072: PUSH
42073: LD_VAR 0 5
42077: ST_TO_ADDR
// end ;
42078: LD_VAR 0 6
42082: RET
// export function WantPlant ( unit ) ; var task ; begin
42083: LD_INT 0
42085: PPUSH
42086: PPUSH
// result := false ;
42087: LD_ADDR_VAR 0 2
42091: PUSH
42092: LD_INT 0
42094: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42095: LD_ADDR_VAR 0 3
42099: PUSH
42100: LD_VAR 0 1
42104: PPUSH
42105: CALL_OW 437
42109: ST_TO_ADDR
// if task then
42110: LD_VAR 0 3
42114: IFFALSE 42142
// if task [ 1 ] [ 1 ] = p then
42116: LD_VAR 0 3
42120: PUSH
42121: LD_INT 1
42123: ARRAY
42124: PUSH
42125: LD_INT 1
42127: ARRAY
42128: PUSH
42129: LD_STRING p
42131: EQUAL
42132: IFFALSE 42142
// result := true ;
42134: LD_ADDR_VAR 0 2
42138: PUSH
42139: LD_INT 1
42141: ST_TO_ADDR
// end ;
42142: LD_VAR 0 2
42146: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42147: LD_INT 0
42149: PPUSH
42150: PPUSH
42151: PPUSH
42152: PPUSH
// if pos < 1 then
42153: LD_VAR 0 2
42157: PUSH
42158: LD_INT 1
42160: LESS
42161: IFFALSE 42165
// exit ;
42163: GO 42468
// if pos = 1 then
42165: LD_VAR 0 2
42169: PUSH
42170: LD_INT 1
42172: EQUAL
42173: IFFALSE 42206
// result := Replace ( arr , pos [ 1 ] , value ) else
42175: LD_ADDR_VAR 0 4
42179: PUSH
42180: LD_VAR 0 1
42184: PPUSH
42185: LD_VAR 0 2
42189: PUSH
42190: LD_INT 1
42192: ARRAY
42193: PPUSH
42194: LD_VAR 0 3
42198: PPUSH
42199: CALL_OW 1
42203: ST_TO_ADDR
42204: GO 42468
// begin tmp := arr ;
42206: LD_ADDR_VAR 0 6
42210: PUSH
42211: LD_VAR 0 1
42215: ST_TO_ADDR
// s_arr := [ tmp ] ;
42216: LD_ADDR_VAR 0 7
42220: PUSH
42221: LD_VAR 0 6
42225: PUSH
42226: EMPTY
42227: LIST
42228: ST_TO_ADDR
// for i = 1 to pos - 1 do
42229: LD_ADDR_VAR 0 5
42233: PUSH
42234: DOUBLE
42235: LD_INT 1
42237: DEC
42238: ST_TO_ADDR
42239: LD_VAR 0 2
42243: PUSH
42244: LD_INT 1
42246: MINUS
42247: PUSH
42248: FOR_TO
42249: IFFALSE 42294
// begin tmp := tmp [ pos [ i ] ] ;
42251: LD_ADDR_VAR 0 6
42255: PUSH
42256: LD_VAR 0 6
42260: PUSH
42261: LD_VAR 0 2
42265: PUSH
42266: LD_VAR 0 5
42270: ARRAY
42271: ARRAY
42272: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42273: LD_ADDR_VAR 0 7
42277: PUSH
42278: LD_VAR 0 7
42282: PUSH
42283: LD_VAR 0 6
42287: PUSH
42288: EMPTY
42289: LIST
42290: ADD
42291: ST_TO_ADDR
// end ;
42292: GO 42248
42294: POP
42295: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42296: LD_ADDR_VAR 0 6
42300: PUSH
42301: LD_VAR 0 6
42305: PPUSH
42306: LD_VAR 0 2
42310: PUSH
42311: LD_VAR 0 2
42315: ARRAY
42316: PPUSH
42317: LD_VAR 0 3
42321: PPUSH
42322: CALL_OW 1
42326: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42327: LD_ADDR_VAR 0 7
42331: PUSH
42332: LD_VAR 0 7
42336: PPUSH
42337: LD_VAR 0 7
42341: PPUSH
42342: LD_VAR 0 6
42346: PPUSH
42347: CALL_OW 1
42351: ST_TO_ADDR
// for i = s_arr downto 2 do
42352: LD_ADDR_VAR 0 5
42356: PUSH
42357: DOUBLE
42358: LD_VAR 0 7
42362: INC
42363: ST_TO_ADDR
42364: LD_INT 2
42366: PUSH
42367: FOR_DOWNTO
42368: IFFALSE 42452
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42370: LD_ADDR_VAR 0 6
42374: PUSH
42375: LD_VAR 0 7
42379: PUSH
42380: LD_VAR 0 5
42384: PUSH
42385: LD_INT 1
42387: MINUS
42388: ARRAY
42389: PPUSH
42390: LD_VAR 0 2
42394: PUSH
42395: LD_VAR 0 5
42399: PUSH
42400: LD_INT 1
42402: MINUS
42403: ARRAY
42404: PPUSH
42405: LD_VAR 0 7
42409: PUSH
42410: LD_VAR 0 5
42414: ARRAY
42415: PPUSH
42416: CALL_OW 1
42420: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42421: LD_ADDR_VAR 0 7
42425: PUSH
42426: LD_VAR 0 7
42430: PPUSH
42431: LD_VAR 0 5
42435: PUSH
42436: LD_INT 1
42438: MINUS
42439: PPUSH
42440: LD_VAR 0 6
42444: PPUSH
42445: CALL_OW 1
42449: ST_TO_ADDR
// end ;
42450: GO 42367
42452: POP
42453: POP
// result := s_arr [ 1 ] ;
42454: LD_ADDR_VAR 0 4
42458: PUSH
42459: LD_VAR 0 7
42463: PUSH
42464: LD_INT 1
42466: ARRAY
42467: ST_TO_ADDR
// end ; end ;
42468: LD_VAR 0 4
42472: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42473: LD_INT 0
42475: PPUSH
42476: PPUSH
// if not list then
42477: LD_VAR 0 1
42481: NOT
42482: IFFALSE 42486
// exit ;
42484: GO 42577
// i := list [ pos1 ] ;
42486: LD_ADDR_VAR 0 5
42490: PUSH
42491: LD_VAR 0 1
42495: PUSH
42496: LD_VAR 0 2
42500: ARRAY
42501: ST_TO_ADDR
// if not i then
42502: LD_VAR 0 5
42506: NOT
42507: IFFALSE 42511
// exit ;
42509: GO 42577
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42511: LD_ADDR_VAR 0 1
42515: PUSH
42516: LD_VAR 0 1
42520: PPUSH
42521: LD_VAR 0 2
42525: PPUSH
42526: LD_VAR 0 1
42530: PUSH
42531: LD_VAR 0 3
42535: ARRAY
42536: PPUSH
42537: CALL_OW 1
42541: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42542: LD_ADDR_VAR 0 1
42546: PUSH
42547: LD_VAR 0 1
42551: PPUSH
42552: LD_VAR 0 3
42556: PPUSH
42557: LD_VAR 0 5
42561: PPUSH
42562: CALL_OW 1
42566: ST_TO_ADDR
// result := list ;
42567: LD_ADDR_VAR 0 4
42571: PUSH
42572: LD_VAR 0 1
42576: ST_TO_ADDR
// end ;
42577: LD_VAR 0 4
42581: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42582: LD_INT 0
42584: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42585: LD_ADDR_VAR 0 5
42589: PUSH
42590: LD_VAR 0 1
42594: PPUSH
42595: CALL_OW 250
42599: PPUSH
42600: LD_VAR 0 1
42604: PPUSH
42605: CALL_OW 251
42609: PPUSH
42610: LD_VAR 0 2
42614: PPUSH
42615: LD_VAR 0 3
42619: PPUSH
42620: LD_VAR 0 4
42624: PPUSH
42625: CALL 42635 0 5
42629: ST_TO_ADDR
// end ;
42630: LD_VAR 0 5
42634: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42635: LD_INT 0
42637: PPUSH
42638: PPUSH
42639: PPUSH
42640: PPUSH
// if not list then
42641: LD_VAR 0 3
42645: NOT
42646: IFFALSE 42650
// exit ;
42648: GO 43038
// result := [ ] ;
42650: LD_ADDR_VAR 0 6
42654: PUSH
42655: EMPTY
42656: ST_TO_ADDR
// for i in list do
42657: LD_ADDR_VAR 0 7
42661: PUSH
42662: LD_VAR 0 3
42666: PUSH
42667: FOR_IN
42668: IFFALSE 42870
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42670: LD_ADDR_VAR 0 9
42674: PUSH
42675: LD_VAR 0 7
42679: PPUSH
42680: LD_VAR 0 1
42684: PPUSH
42685: LD_VAR 0 2
42689: PPUSH
42690: CALL_OW 297
42694: ST_TO_ADDR
// if not result then
42695: LD_VAR 0 6
42699: NOT
42700: IFFALSE 42726
// result := [ [ i , tmp ] ] else
42702: LD_ADDR_VAR 0 6
42706: PUSH
42707: LD_VAR 0 7
42711: PUSH
42712: LD_VAR 0 9
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: EMPTY
42722: LIST
42723: ST_TO_ADDR
42724: GO 42868
// begin if result [ result ] [ 2 ] < tmp then
42726: LD_VAR 0 6
42730: PUSH
42731: LD_VAR 0 6
42735: ARRAY
42736: PUSH
42737: LD_INT 2
42739: ARRAY
42740: PUSH
42741: LD_VAR 0 9
42745: LESS
42746: IFFALSE 42788
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42748: LD_ADDR_VAR 0 6
42752: PUSH
42753: LD_VAR 0 6
42757: PPUSH
42758: LD_VAR 0 6
42762: PUSH
42763: LD_INT 1
42765: PLUS
42766: PPUSH
42767: LD_VAR 0 7
42771: PUSH
42772: LD_VAR 0 9
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PPUSH
42781: CALL_OW 2
42785: ST_TO_ADDR
42786: GO 42868
// for j = 1 to result do
42788: LD_ADDR_VAR 0 8
42792: PUSH
42793: DOUBLE
42794: LD_INT 1
42796: DEC
42797: ST_TO_ADDR
42798: LD_VAR 0 6
42802: PUSH
42803: FOR_TO
42804: IFFALSE 42866
// begin if tmp < result [ j ] [ 2 ] then
42806: LD_VAR 0 9
42810: PUSH
42811: LD_VAR 0 6
42815: PUSH
42816: LD_VAR 0 8
42820: ARRAY
42821: PUSH
42822: LD_INT 2
42824: ARRAY
42825: LESS
42826: IFFALSE 42864
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42828: LD_ADDR_VAR 0 6
42832: PUSH
42833: LD_VAR 0 6
42837: PPUSH
42838: LD_VAR 0 8
42842: PPUSH
42843: LD_VAR 0 7
42847: PUSH
42848: LD_VAR 0 9
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PPUSH
42857: CALL_OW 2
42861: ST_TO_ADDR
// break ;
42862: GO 42866
// end ; end ;
42864: GO 42803
42866: POP
42867: POP
// end ; end ;
42868: GO 42667
42870: POP
42871: POP
// if result and not asc then
42872: LD_VAR 0 6
42876: PUSH
42877: LD_VAR 0 4
42881: NOT
42882: AND
42883: IFFALSE 42958
// begin tmp := result ;
42885: LD_ADDR_VAR 0 9
42889: PUSH
42890: LD_VAR 0 6
42894: ST_TO_ADDR
// for i = tmp downto 1 do
42895: LD_ADDR_VAR 0 7
42899: PUSH
42900: DOUBLE
42901: LD_VAR 0 9
42905: INC
42906: ST_TO_ADDR
42907: LD_INT 1
42909: PUSH
42910: FOR_DOWNTO
42911: IFFALSE 42956
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42913: LD_ADDR_VAR 0 6
42917: PUSH
42918: LD_VAR 0 6
42922: PPUSH
42923: LD_VAR 0 9
42927: PUSH
42928: LD_VAR 0 7
42932: MINUS
42933: PUSH
42934: LD_INT 1
42936: PLUS
42937: PPUSH
42938: LD_VAR 0 9
42942: PUSH
42943: LD_VAR 0 7
42947: ARRAY
42948: PPUSH
42949: CALL_OW 1
42953: ST_TO_ADDR
42954: GO 42910
42956: POP
42957: POP
// end ; tmp := [ ] ;
42958: LD_ADDR_VAR 0 9
42962: PUSH
42963: EMPTY
42964: ST_TO_ADDR
// if mode then
42965: LD_VAR 0 5
42969: IFFALSE 43038
// begin for i = 1 to result do
42971: LD_ADDR_VAR 0 7
42975: PUSH
42976: DOUBLE
42977: LD_INT 1
42979: DEC
42980: ST_TO_ADDR
42981: LD_VAR 0 6
42985: PUSH
42986: FOR_TO
42987: IFFALSE 43026
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42989: LD_ADDR_VAR 0 9
42993: PUSH
42994: LD_VAR 0 9
42998: PPUSH
42999: LD_VAR 0 7
43003: PPUSH
43004: LD_VAR 0 6
43008: PUSH
43009: LD_VAR 0 7
43013: ARRAY
43014: PUSH
43015: LD_INT 1
43017: ARRAY
43018: PPUSH
43019: CALL_OW 1
43023: ST_TO_ADDR
43024: GO 42986
43026: POP
43027: POP
// result := tmp ;
43028: LD_ADDR_VAR 0 6
43032: PUSH
43033: LD_VAR 0 9
43037: ST_TO_ADDR
// end ; end ;
43038: LD_VAR 0 6
43042: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43043: LD_INT 0
43045: PPUSH
43046: PPUSH
43047: PPUSH
43048: PPUSH
43049: PPUSH
43050: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43051: LD_ADDR_VAR 0 5
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: ST_TO_ADDR
// if not x or not y then
43073: LD_VAR 0 2
43077: NOT
43078: PUSH
43079: LD_VAR 0 3
43083: NOT
43084: OR
43085: IFFALSE 43089
// exit ;
43087: GO 44735
// if not range then
43089: LD_VAR 0 4
43093: NOT
43094: IFFALSE 43104
// range := 10 ;
43096: LD_ADDR_VAR 0 4
43100: PUSH
43101: LD_INT 10
43103: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43104: LD_ADDR_VAR 0 8
43108: PUSH
43109: LD_INT 81
43111: PUSH
43112: LD_VAR 0 1
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 92
43123: PUSH
43124: LD_VAR 0 2
43128: PUSH
43129: LD_VAR 0 3
43133: PUSH
43134: LD_VAR 0 4
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 3
43147: PUSH
43148: LD_INT 21
43150: PUSH
43151: LD_INT 3
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: LIST
43166: PPUSH
43167: CALL_OW 69
43171: ST_TO_ADDR
// if not tmp then
43172: LD_VAR 0 8
43176: NOT
43177: IFFALSE 43181
// exit ;
43179: GO 44735
// for i in tmp do
43181: LD_ADDR_VAR 0 6
43185: PUSH
43186: LD_VAR 0 8
43190: PUSH
43191: FOR_IN
43192: IFFALSE 44710
// begin points := [ 0 , 0 , 0 ] ;
43194: LD_ADDR_VAR 0 9
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: LIST
43212: ST_TO_ADDR
// bpoints := 1 ;
43213: LD_ADDR_VAR 0 10
43217: PUSH
43218: LD_INT 1
43220: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43221: LD_VAR 0 6
43225: PPUSH
43226: CALL_OW 247
43230: PUSH
43231: LD_INT 1
43233: DOUBLE
43234: EQUAL
43235: IFTRUE 43239
43237: GO 43817
43239: POP
// begin if GetClass ( i ) = 1 then
43240: LD_VAR 0 6
43244: PPUSH
43245: CALL_OW 257
43249: PUSH
43250: LD_INT 1
43252: EQUAL
43253: IFFALSE 43274
// points := [ 10 , 5 , 3 ] ;
43255: LD_ADDR_VAR 0 9
43259: PUSH
43260: LD_INT 10
43262: PUSH
43263: LD_INT 5
43265: PUSH
43266: LD_INT 3
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: LIST
43273: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43274: LD_VAR 0 6
43278: PPUSH
43279: CALL_OW 257
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: LD_INT 3
43289: PUSH
43290: LD_INT 4
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: LIST
43297: IN
43298: IFFALSE 43319
// points := [ 3 , 2 , 1 ] ;
43300: LD_ADDR_VAR 0 9
43304: PUSH
43305: LD_INT 3
43307: PUSH
43308: LD_INT 2
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: LIST
43318: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43319: LD_VAR 0 6
43323: PPUSH
43324: CALL_OW 257
43328: PUSH
43329: LD_INT 5
43331: EQUAL
43332: IFFALSE 43353
// points := [ 130 , 5 , 2 ] ;
43334: LD_ADDR_VAR 0 9
43338: PUSH
43339: LD_INT 130
43341: PUSH
43342: LD_INT 5
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: LIST
43352: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43353: LD_VAR 0 6
43357: PPUSH
43358: CALL_OW 257
43362: PUSH
43363: LD_INT 8
43365: EQUAL
43366: IFFALSE 43387
// points := [ 35 , 35 , 30 ] ;
43368: LD_ADDR_VAR 0 9
43372: PUSH
43373: LD_INT 35
43375: PUSH
43376: LD_INT 35
43378: PUSH
43379: LD_INT 30
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: LIST
43386: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43387: LD_VAR 0 6
43391: PPUSH
43392: CALL_OW 257
43396: PUSH
43397: LD_INT 9
43399: EQUAL
43400: IFFALSE 43421
// points := [ 20 , 55 , 40 ] ;
43402: LD_ADDR_VAR 0 9
43406: PUSH
43407: LD_INT 20
43409: PUSH
43410: LD_INT 55
43412: PUSH
43413: LD_INT 40
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: LIST
43420: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43421: LD_VAR 0 6
43425: PPUSH
43426: CALL_OW 257
43430: PUSH
43431: LD_INT 12
43433: PUSH
43434: LD_INT 16
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: IN
43441: IFFALSE 43462
// points := [ 5 , 3 , 2 ] ;
43443: LD_ADDR_VAR 0 9
43447: PUSH
43448: LD_INT 5
43450: PUSH
43451: LD_INT 3
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: LIST
43461: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43462: LD_VAR 0 6
43466: PPUSH
43467: CALL_OW 257
43471: PUSH
43472: LD_INT 17
43474: EQUAL
43475: IFFALSE 43496
// points := [ 100 , 50 , 75 ] ;
43477: LD_ADDR_VAR 0 9
43481: PUSH
43482: LD_INT 100
43484: PUSH
43485: LD_INT 50
43487: PUSH
43488: LD_INT 75
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: LIST
43495: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43496: LD_VAR 0 6
43500: PPUSH
43501: CALL_OW 257
43505: PUSH
43506: LD_INT 15
43508: EQUAL
43509: IFFALSE 43530
// points := [ 10 , 5 , 3 ] ;
43511: LD_ADDR_VAR 0 9
43515: PUSH
43516: LD_INT 10
43518: PUSH
43519: LD_INT 5
43521: PUSH
43522: LD_INT 3
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: LIST
43529: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43530: LD_VAR 0 6
43534: PPUSH
43535: CALL_OW 257
43539: PUSH
43540: LD_INT 14
43542: EQUAL
43543: IFFALSE 43564
// points := [ 10 , 0 , 0 ] ;
43545: LD_ADDR_VAR 0 9
43549: PUSH
43550: LD_INT 10
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: LIST
43563: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43564: LD_VAR 0 6
43568: PPUSH
43569: CALL_OW 257
43573: PUSH
43574: LD_INT 11
43576: EQUAL
43577: IFFALSE 43598
// points := [ 30 , 10 , 5 ] ;
43579: LD_ADDR_VAR 0 9
43583: PUSH
43584: LD_INT 30
43586: PUSH
43587: LD_INT 10
43589: PUSH
43590: LD_INT 5
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: LIST
43597: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43598: LD_VAR 0 1
43602: PPUSH
43603: LD_INT 5
43605: PPUSH
43606: CALL_OW 321
43610: PUSH
43611: LD_INT 2
43613: EQUAL
43614: IFFALSE 43631
// bpoints := bpoints * 1.8 ;
43616: LD_ADDR_VAR 0 10
43620: PUSH
43621: LD_VAR 0 10
43625: PUSH
43626: LD_REAL  1.80000000000000E+0000
43629: MUL
43630: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43631: LD_VAR 0 6
43635: PPUSH
43636: CALL_OW 257
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: LD_INT 2
43646: PUSH
43647: LD_INT 3
43649: PUSH
43650: LD_INT 4
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: IN
43659: PUSH
43660: LD_VAR 0 1
43664: PPUSH
43665: LD_INT 51
43667: PPUSH
43668: CALL_OW 321
43672: PUSH
43673: LD_INT 2
43675: EQUAL
43676: AND
43677: IFFALSE 43694
// bpoints := bpoints * 1.2 ;
43679: LD_ADDR_VAR 0 10
43683: PUSH
43684: LD_VAR 0 10
43688: PUSH
43689: LD_REAL  1.20000000000000E+0000
43692: MUL
43693: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43694: LD_VAR 0 6
43698: PPUSH
43699: CALL_OW 257
43703: PUSH
43704: LD_INT 5
43706: PUSH
43707: LD_INT 7
43709: PUSH
43710: LD_INT 9
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: LIST
43717: IN
43718: PUSH
43719: LD_VAR 0 1
43723: PPUSH
43724: LD_INT 52
43726: PPUSH
43727: CALL_OW 321
43731: PUSH
43732: LD_INT 2
43734: EQUAL
43735: AND
43736: IFFALSE 43753
// bpoints := bpoints * 1.5 ;
43738: LD_ADDR_VAR 0 10
43742: PUSH
43743: LD_VAR 0 10
43747: PUSH
43748: LD_REAL  1.50000000000000E+0000
43751: MUL
43752: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43753: LD_VAR 0 1
43757: PPUSH
43758: LD_INT 66
43760: PPUSH
43761: CALL_OW 321
43765: PUSH
43766: LD_INT 2
43768: EQUAL
43769: IFFALSE 43786
// bpoints := bpoints * 1.1 ;
43771: LD_ADDR_VAR 0 10
43775: PUSH
43776: LD_VAR 0 10
43780: PUSH
43781: LD_REAL  1.10000000000000E+0000
43784: MUL
43785: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43786: LD_ADDR_VAR 0 10
43790: PUSH
43791: LD_VAR 0 10
43795: PUSH
43796: LD_VAR 0 6
43800: PPUSH
43801: LD_INT 1
43803: PPUSH
43804: CALL_OW 259
43808: PUSH
43809: LD_REAL  1.15000000000000E+0000
43812: MUL
43813: MUL
43814: ST_TO_ADDR
// end ; unit_vehicle :
43815: GO 44639
43817: LD_INT 2
43819: DOUBLE
43820: EQUAL
43821: IFTRUE 43825
43823: GO 44627
43825: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43826: LD_VAR 0 6
43830: PPUSH
43831: CALL_OW 264
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: LD_INT 42
43841: PUSH
43842: LD_INT 24
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: LIST
43849: IN
43850: IFFALSE 43871
// points := [ 25 , 5 , 3 ] ;
43852: LD_ADDR_VAR 0 9
43856: PUSH
43857: LD_INT 25
43859: PUSH
43860: LD_INT 5
43862: PUSH
43863: LD_INT 3
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: LIST
43870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43871: LD_VAR 0 6
43875: PPUSH
43876: CALL_OW 264
43880: PUSH
43881: LD_INT 4
43883: PUSH
43884: LD_INT 43
43886: PUSH
43887: LD_INT 25
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: LIST
43894: IN
43895: IFFALSE 43916
// points := [ 40 , 15 , 5 ] ;
43897: LD_ADDR_VAR 0 9
43901: PUSH
43902: LD_INT 40
43904: PUSH
43905: LD_INT 15
43907: PUSH
43908: LD_INT 5
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: LIST
43915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43916: LD_VAR 0 6
43920: PPUSH
43921: CALL_OW 264
43925: PUSH
43926: LD_INT 3
43928: PUSH
43929: LD_INT 23
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: IN
43936: IFFALSE 43957
// points := [ 7 , 25 , 8 ] ;
43938: LD_ADDR_VAR 0 9
43942: PUSH
43943: LD_INT 7
43945: PUSH
43946: LD_INT 25
43948: PUSH
43949: LD_INT 8
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: LIST
43956: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43957: LD_VAR 0 6
43961: PPUSH
43962: CALL_OW 264
43966: PUSH
43967: LD_INT 5
43969: PUSH
43970: LD_INT 27
43972: PUSH
43973: LD_INT 44
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: LIST
43980: IN
43981: IFFALSE 44002
// points := [ 14 , 50 , 16 ] ;
43983: LD_ADDR_VAR 0 9
43987: PUSH
43988: LD_INT 14
43990: PUSH
43991: LD_INT 50
43993: PUSH
43994: LD_INT 16
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: LIST
44001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44002: LD_VAR 0 6
44006: PPUSH
44007: CALL_OW 264
44011: PUSH
44012: LD_INT 6
44014: PUSH
44015: LD_INT 46
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: IN
44022: IFFALSE 44043
// points := [ 32 , 120 , 70 ] ;
44024: LD_ADDR_VAR 0 9
44028: PUSH
44029: LD_INT 32
44031: PUSH
44032: LD_INT 120
44034: PUSH
44035: LD_INT 70
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: LIST
44042: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
44043: LD_VAR 0 6
44047: PPUSH
44048: CALL_OW 264
44052: PUSH
44053: LD_INT 7
44055: PUSH
44056: LD_INT 28
44058: PUSH
44059: LD_INT 45
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: LIST
44066: IN
44067: IFFALSE 44088
// points := [ 35 , 20 , 45 ] ;
44069: LD_ADDR_VAR 0 9
44073: PUSH
44074: LD_INT 35
44076: PUSH
44077: LD_INT 20
44079: PUSH
44080: LD_INT 45
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: LIST
44087: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44088: LD_VAR 0 6
44092: PPUSH
44093: CALL_OW 264
44097: PUSH
44098: LD_INT 47
44100: PUSH
44101: EMPTY
44102: LIST
44103: IN
44104: IFFALSE 44125
// points := [ 67 , 45 , 75 ] ;
44106: LD_ADDR_VAR 0 9
44110: PUSH
44111: LD_INT 67
44113: PUSH
44114: LD_INT 45
44116: PUSH
44117: LD_INT 75
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: LIST
44124: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44125: LD_VAR 0 6
44129: PPUSH
44130: CALL_OW 264
44134: PUSH
44135: LD_INT 26
44137: PUSH
44138: EMPTY
44139: LIST
44140: IN
44141: IFFALSE 44162
// points := [ 120 , 30 , 80 ] ;
44143: LD_ADDR_VAR 0 9
44147: PUSH
44148: LD_INT 120
44150: PUSH
44151: LD_INT 30
44153: PUSH
44154: LD_INT 80
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: LIST
44161: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44162: LD_VAR 0 6
44166: PPUSH
44167: CALL_OW 264
44171: PUSH
44172: LD_INT 22
44174: PUSH
44175: EMPTY
44176: LIST
44177: IN
44178: IFFALSE 44199
// points := [ 40 , 1 , 1 ] ;
44180: LD_ADDR_VAR 0 9
44184: PUSH
44185: LD_INT 40
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: LIST
44198: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44199: LD_VAR 0 6
44203: PPUSH
44204: CALL_OW 264
44208: PUSH
44209: LD_INT 29
44211: PUSH
44212: EMPTY
44213: LIST
44214: IN
44215: IFFALSE 44236
// points := [ 70 , 200 , 400 ] ;
44217: LD_ADDR_VAR 0 9
44221: PUSH
44222: LD_INT 70
44224: PUSH
44225: LD_INT 200
44227: PUSH
44228: LD_INT 400
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: LIST
44235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44236: LD_VAR 0 6
44240: PPUSH
44241: CALL_OW 264
44245: PUSH
44246: LD_INT 14
44248: PUSH
44249: LD_INT 53
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: IN
44256: IFFALSE 44277
// points := [ 40 , 10 , 20 ] ;
44258: LD_ADDR_VAR 0 9
44262: PUSH
44263: LD_INT 40
44265: PUSH
44266: LD_INT 10
44268: PUSH
44269: LD_INT 20
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: LIST
44276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44277: LD_VAR 0 6
44281: PPUSH
44282: CALL_OW 264
44286: PUSH
44287: LD_INT 9
44289: PUSH
44290: EMPTY
44291: LIST
44292: IN
44293: IFFALSE 44314
// points := [ 5 , 70 , 20 ] ;
44295: LD_ADDR_VAR 0 9
44299: PUSH
44300: LD_INT 5
44302: PUSH
44303: LD_INT 70
44305: PUSH
44306: LD_INT 20
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: LIST
44313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44314: LD_VAR 0 6
44318: PPUSH
44319: CALL_OW 264
44323: PUSH
44324: LD_INT 10
44326: PUSH
44327: EMPTY
44328: LIST
44329: IN
44330: IFFALSE 44351
// points := [ 35 , 110 , 70 ] ;
44332: LD_ADDR_VAR 0 9
44336: PUSH
44337: LD_INT 35
44339: PUSH
44340: LD_INT 110
44342: PUSH
44343: LD_INT 70
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: LIST
44350: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44351: LD_VAR 0 6
44355: PPUSH
44356: CALL_OW 265
44360: PUSH
44361: LD_INT 25
44363: EQUAL
44364: IFFALSE 44385
// points := [ 80 , 65 , 100 ] ;
44366: LD_ADDR_VAR 0 9
44370: PUSH
44371: LD_INT 80
44373: PUSH
44374: LD_INT 65
44376: PUSH
44377: LD_INT 100
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: LIST
44384: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44385: LD_VAR 0 6
44389: PPUSH
44390: CALL_OW 263
44394: PUSH
44395: LD_INT 1
44397: EQUAL
44398: IFFALSE 44433
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44400: LD_ADDR_VAR 0 10
44404: PUSH
44405: LD_VAR 0 10
44409: PUSH
44410: LD_VAR 0 6
44414: PPUSH
44415: CALL_OW 311
44419: PPUSH
44420: LD_INT 3
44422: PPUSH
44423: CALL_OW 259
44427: PUSH
44428: LD_INT 4
44430: MUL
44431: MUL
44432: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44433: LD_VAR 0 6
44437: PPUSH
44438: CALL_OW 263
44442: PUSH
44443: LD_INT 2
44445: EQUAL
44446: IFFALSE 44497
// begin j := IsControledBy ( i ) ;
44448: LD_ADDR_VAR 0 7
44452: PUSH
44453: LD_VAR 0 6
44457: PPUSH
44458: CALL_OW 312
44462: ST_TO_ADDR
// if j then
44463: LD_VAR 0 7
44467: IFFALSE 44497
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44469: LD_ADDR_VAR 0 10
44473: PUSH
44474: LD_VAR 0 10
44478: PUSH
44479: LD_VAR 0 7
44483: PPUSH
44484: LD_INT 3
44486: PPUSH
44487: CALL_OW 259
44491: PUSH
44492: LD_INT 3
44494: MUL
44495: MUL
44496: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44497: LD_VAR 0 6
44501: PPUSH
44502: CALL_OW 264
44506: PUSH
44507: LD_INT 5
44509: PUSH
44510: LD_INT 6
44512: PUSH
44513: LD_INT 46
44515: PUSH
44516: LD_INT 44
44518: PUSH
44519: LD_INT 47
44521: PUSH
44522: LD_INT 45
44524: PUSH
44525: LD_INT 28
44527: PUSH
44528: LD_INT 7
44530: PUSH
44531: LD_INT 27
44533: PUSH
44534: LD_INT 29
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: IN
44549: PUSH
44550: LD_VAR 0 1
44554: PPUSH
44555: LD_INT 52
44557: PPUSH
44558: CALL_OW 321
44562: PUSH
44563: LD_INT 2
44565: EQUAL
44566: AND
44567: IFFALSE 44584
// bpoints := bpoints * 1.2 ;
44569: LD_ADDR_VAR 0 10
44573: PUSH
44574: LD_VAR 0 10
44578: PUSH
44579: LD_REAL  1.20000000000000E+0000
44582: MUL
44583: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44584: LD_VAR 0 6
44588: PPUSH
44589: CALL_OW 264
44593: PUSH
44594: LD_INT 6
44596: PUSH
44597: LD_INT 46
44599: PUSH
44600: LD_INT 47
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: LIST
44607: IN
44608: IFFALSE 44625
// bpoints := bpoints * 1.2 ;
44610: LD_ADDR_VAR 0 10
44614: PUSH
44615: LD_VAR 0 10
44619: PUSH
44620: LD_REAL  1.20000000000000E+0000
44623: MUL
44624: ST_TO_ADDR
// end ; unit_building :
44625: GO 44639
44627: LD_INT 3
44629: DOUBLE
44630: EQUAL
44631: IFTRUE 44635
44633: GO 44638
44635: POP
// ; end ;
44636: GO 44639
44638: POP
// for j = 1 to 3 do
44639: LD_ADDR_VAR 0 7
44643: PUSH
44644: DOUBLE
44645: LD_INT 1
44647: DEC
44648: ST_TO_ADDR
44649: LD_INT 3
44651: PUSH
44652: FOR_TO
44653: IFFALSE 44706
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44655: LD_ADDR_VAR 0 5
44659: PUSH
44660: LD_VAR 0 5
44664: PPUSH
44665: LD_VAR 0 7
44669: PPUSH
44670: LD_VAR 0 5
44674: PUSH
44675: LD_VAR 0 7
44679: ARRAY
44680: PUSH
44681: LD_VAR 0 9
44685: PUSH
44686: LD_VAR 0 7
44690: ARRAY
44691: PUSH
44692: LD_VAR 0 10
44696: MUL
44697: PLUS
44698: PPUSH
44699: CALL_OW 1
44703: ST_TO_ADDR
44704: GO 44652
44706: POP
44707: POP
// end ;
44708: GO 43191
44710: POP
44711: POP
// result := Replace ( result , 4 , tmp ) ;
44712: LD_ADDR_VAR 0 5
44716: PUSH
44717: LD_VAR 0 5
44721: PPUSH
44722: LD_INT 4
44724: PPUSH
44725: LD_VAR 0 8
44729: PPUSH
44730: CALL_OW 1
44734: ST_TO_ADDR
// end ;
44735: LD_VAR 0 5
44739: RET
// export function DangerAtRange ( unit , range ) ; begin
44740: LD_INT 0
44742: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44743: LD_ADDR_VAR 0 3
44747: PUSH
44748: LD_VAR 0 1
44752: PPUSH
44753: CALL_OW 255
44757: PPUSH
44758: LD_VAR 0 1
44762: PPUSH
44763: CALL_OW 250
44767: PPUSH
44768: LD_VAR 0 1
44772: PPUSH
44773: CALL_OW 251
44777: PPUSH
44778: LD_VAR 0 2
44782: PPUSH
44783: CALL 43043 0 4
44787: ST_TO_ADDR
// end ;
44788: LD_VAR 0 3
44792: RET
// export function DangerInArea ( side , area ) ; begin
44793: LD_INT 0
44795: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44796: LD_ADDR_VAR 0 3
44800: PUSH
44801: LD_VAR 0 2
44805: PPUSH
44806: LD_INT 81
44808: PUSH
44809: LD_VAR 0 1
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PPUSH
44818: CALL_OW 70
44822: ST_TO_ADDR
// end ;
44823: LD_VAR 0 3
44827: RET
// export function IsExtension ( b ) ; begin
44828: LD_INT 0
44830: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44831: LD_ADDR_VAR 0 2
44835: PUSH
44836: LD_VAR 0 1
44840: PUSH
44841: LD_INT 23
44843: PUSH
44844: LD_INT 20
44846: PUSH
44847: LD_INT 22
44849: PUSH
44850: LD_INT 17
44852: PUSH
44853: LD_INT 24
44855: PUSH
44856: LD_INT 21
44858: PUSH
44859: LD_INT 19
44861: PUSH
44862: LD_INT 16
44864: PUSH
44865: LD_INT 25
44867: PUSH
44868: LD_INT 18
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: IN
44883: ST_TO_ADDR
// end ;
44884: LD_VAR 0 2
44888: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
44889: LD_INT 0
44891: PPUSH
44892: PPUSH
44893: PPUSH
// result := [ ] ;
44894: LD_ADDR_VAR 0 3
44898: PUSH
44899: EMPTY
44900: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44901: LD_ADDR_VAR 0 4
44905: PUSH
44906: LD_VAR 0 2
44910: PPUSH
44911: LD_INT 21
44913: PUSH
44914: LD_INT 3
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PPUSH
44921: CALL_OW 70
44925: ST_TO_ADDR
// if not tmp then
44926: LD_VAR 0 4
44930: NOT
44931: IFFALSE 44935
// exit ;
44933: GO 44993
// for i in tmp do
44935: LD_ADDR_VAR 0 5
44939: PUSH
44940: LD_VAR 0 4
44944: PUSH
44945: FOR_IN
44946: IFFALSE 44981
// if GetBase ( i ) <> base then
44948: LD_VAR 0 5
44952: PPUSH
44953: CALL_OW 274
44957: PUSH
44958: LD_VAR 0 1
44962: NONEQUAL
44963: IFFALSE 44979
// ComLinkToBase ( base , i ) ;
44965: LD_VAR 0 1
44969: PPUSH
44970: LD_VAR 0 5
44974: PPUSH
44975: CALL_OW 169
44979: GO 44945
44981: POP
44982: POP
// result := tmp ;
44983: LD_ADDR_VAR 0 3
44987: PUSH
44988: LD_VAR 0 4
44992: ST_TO_ADDR
// end ;
44993: LD_VAR 0 3
44997: RET
// export function ComComplete ( unit , b ) ; var i ; begin
44998: LD_INT 0
45000: PPUSH
45001: PPUSH
// if BuildingStatus ( b ) = bs_build then
45002: LD_VAR 0 2
45006: PPUSH
45007: CALL_OW 461
45011: PUSH
45012: LD_INT 1
45014: EQUAL
45015: IFFALSE 45075
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45017: LD_VAR 0 1
45021: PPUSH
45022: LD_STRING h
45024: PUSH
45025: LD_VAR 0 2
45029: PPUSH
45030: CALL_OW 250
45034: PUSH
45035: LD_VAR 0 2
45039: PPUSH
45040: CALL_OW 251
45044: PUSH
45045: LD_VAR 0 2
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: PUSH
45068: EMPTY
45069: LIST
45070: PPUSH
45071: CALL_OW 446
// end ;
45075: LD_VAR 0 3
45079: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45080: LD_INT 0
45082: PPUSH
45083: PPUSH
45084: PPUSH
45085: PPUSH
45086: PPUSH
45087: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
45088: LD_VAR 0 1
45092: NOT
45093: PUSH
45094: LD_VAR 0 1
45098: PPUSH
45099: CALL_OW 263
45103: PUSH
45104: LD_INT 2
45106: EQUAL
45107: NOT
45108: OR
45109: IFFALSE 45113
// exit ;
45111: GO 45429
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45113: LD_ADDR_VAR 0 6
45117: PUSH
45118: LD_INT 22
45120: PUSH
45121: LD_VAR 0 1
45125: PPUSH
45126: CALL_OW 255
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 2
45137: PUSH
45138: LD_INT 30
45140: PUSH
45141: LD_INT 36
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 34
45150: PUSH
45151: LD_INT 31
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: LIST
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PPUSH
45167: CALL_OW 69
45171: ST_TO_ADDR
// if not tmp then
45172: LD_VAR 0 6
45176: NOT
45177: IFFALSE 45181
// exit ;
45179: GO 45429
// result := [ ] ;
45181: LD_ADDR_VAR 0 2
45185: PUSH
45186: EMPTY
45187: ST_TO_ADDR
// for i in tmp do
45188: LD_ADDR_VAR 0 3
45192: PUSH
45193: LD_VAR 0 6
45197: PUSH
45198: FOR_IN
45199: IFFALSE 45270
// begin t := UnitsInside ( i ) ;
45201: LD_ADDR_VAR 0 4
45205: PUSH
45206: LD_VAR 0 3
45210: PPUSH
45211: CALL_OW 313
45215: ST_TO_ADDR
// if t then
45216: LD_VAR 0 4
45220: IFFALSE 45268
// for j in t do
45222: LD_ADDR_VAR 0 7
45226: PUSH
45227: LD_VAR 0 4
45231: PUSH
45232: FOR_IN
45233: IFFALSE 45266
// result := Insert ( result , result + 1 , j ) ;
45235: LD_ADDR_VAR 0 2
45239: PUSH
45240: LD_VAR 0 2
45244: PPUSH
45245: LD_VAR 0 2
45249: PUSH
45250: LD_INT 1
45252: PLUS
45253: PPUSH
45254: LD_VAR 0 7
45258: PPUSH
45259: CALL_OW 2
45263: ST_TO_ADDR
45264: GO 45232
45266: POP
45267: POP
// end ;
45268: GO 45198
45270: POP
45271: POP
// if not result then
45272: LD_VAR 0 2
45276: NOT
45277: IFFALSE 45281
// exit ;
45279: GO 45429
// mech := result [ 1 ] ;
45281: LD_ADDR_VAR 0 5
45285: PUSH
45286: LD_VAR 0 2
45290: PUSH
45291: LD_INT 1
45293: ARRAY
45294: ST_TO_ADDR
// if result > 1 then
45295: LD_VAR 0 2
45299: PUSH
45300: LD_INT 1
45302: GREATER
45303: IFFALSE 45415
// for i = 2 to result do
45305: LD_ADDR_VAR 0 3
45309: PUSH
45310: DOUBLE
45311: LD_INT 2
45313: DEC
45314: ST_TO_ADDR
45315: LD_VAR 0 2
45319: PUSH
45320: FOR_TO
45321: IFFALSE 45413
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45323: LD_ADDR_VAR 0 4
45327: PUSH
45328: LD_VAR 0 2
45332: PUSH
45333: LD_VAR 0 3
45337: ARRAY
45338: PPUSH
45339: LD_INT 3
45341: PPUSH
45342: CALL_OW 259
45346: PUSH
45347: LD_VAR 0 2
45351: PUSH
45352: LD_VAR 0 3
45356: ARRAY
45357: PPUSH
45358: CALL_OW 432
45362: MINUS
45363: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45364: LD_VAR 0 4
45368: PUSH
45369: LD_VAR 0 5
45373: PPUSH
45374: LD_INT 3
45376: PPUSH
45377: CALL_OW 259
45381: PUSH
45382: LD_VAR 0 5
45386: PPUSH
45387: CALL_OW 432
45391: MINUS
45392: GREATEREQUAL
45393: IFFALSE 45411
// mech := result [ i ] ;
45395: LD_ADDR_VAR 0 5
45399: PUSH
45400: LD_VAR 0 2
45404: PUSH
45405: LD_VAR 0 3
45409: ARRAY
45410: ST_TO_ADDR
// end ;
45411: GO 45320
45413: POP
45414: POP
// ComLinkTo ( vehicle , mech ) ;
45415: LD_VAR 0 1
45419: PPUSH
45420: LD_VAR 0 5
45424: PPUSH
45425: CALL_OW 135
// end ;
45429: LD_VAR 0 2
45433: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45434: LD_INT 0
45436: PPUSH
45437: PPUSH
45438: PPUSH
45439: PPUSH
45440: PPUSH
45441: PPUSH
45442: PPUSH
45443: PPUSH
45444: PPUSH
45445: PPUSH
45446: PPUSH
45447: PPUSH
45448: PPUSH
// result := [ ] ;
45449: LD_ADDR_VAR 0 7
45453: PUSH
45454: EMPTY
45455: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45456: LD_VAR 0 1
45460: PPUSH
45461: CALL_OW 266
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: IN
45476: NOT
45477: IFFALSE 45481
// exit ;
45479: GO 47112
// if name then
45481: LD_VAR 0 3
45485: IFFALSE 45501
// SetBName ( base_dep , name ) ;
45487: LD_VAR 0 1
45491: PPUSH
45492: LD_VAR 0 3
45496: PPUSH
45497: CALL_OW 500
// base := GetBase ( base_dep ) ;
45501: LD_ADDR_VAR 0 15
45505: PUSH
45506: LD_VAR 0 1
45510: PPUSH
45511: CALL_OW 274
45515: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45516: LD_ADDR_VAR 0 16
45520: PUSH
45521: LD_VAR 0 1
45525: PPUSH
45526: CALL_OW 255
45530: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45531: LD_ADDR_VAR 0 17
45535: PUSH
45536: LD_VAR 0 1
45540: PPUSH
45541: CALL_OW 248
45545: ST_TO_ADDR
// if sources then
45546: LD_VAR 0 5
45550: IFFALSE 45597
// for i = 1 to 3 do
45552: LD_ADDR_VAR 0 8
45556: PUSH
45557: DOUBLE
45558: LD_INT 1
45560: DEC
45561: ST_TO_ADDR
45562: LD_INT 3
45564: PUSH
45565: FOR_TO
45566: IFFALSE 45595
// AddResourceType ( base , i , sources [ i ] ) ;
45568: LD_VAR 0 15
45572: PPUSH
45573: LD_VAR 0 8
45577: PPUSH
45578: LD_VAR 0 5
45582: PUSH
45583: LD_VAR 0 8
45587: ARRAY
45588: PPUSH
45589: CALL_OW 276
45593: GO 45565
45595: POP
45596: POP
// buildings := GetBaseBuildings ( base , area ) ;
45597: LD_ADDR_VAR 0 18
45601: PUSH
45602: LD_VAR 0 15
45606: PPUSH
45607: LD_VAR 0 2
45611: PPUSH
45612: CALL 44889 0 2
45616: ST_TO_ADDR
// InitHc ;
45617: CALL_OW 19
// InitUc ;
45621: CALL_OW 18
// uc_side := side ;
45625: LD_ADDR_OWVAR 20
45629: PUSH
45630: LD_VAR 0 16
45634: ST_TO_ADDR
// uc_nation := nation ;
45635: LD_ADDR_OWVAR 21
45639: PUSH
45640: LD_VAR 0 17
45644: ST_TO_ADDR
// if buildings then
45645: LD_VAR 0 18
45649: IFFALSE 46971
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45651: LD_ADDR_VAR 0 19
45655: PUSH
45656: LD_VAR 0 18
45660: PPUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 30
45666: PUSH
45667: LD_INT 29
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 30
45676: PUSH
45677: LD_INT 30
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: LIST
45688: PPUSH
45689: CALL_OW 72
45693: ST_TO_ADDR
// if tmp then
45694: LD_VAR 0 19
45698: IFFALSE 45746
// for i in tmp do
45700: LD_ADDR_VAR 0 8
45704: PUSH
45705: LD_VAR 0 19
45709: PUSH
45710: FOR_IN
45711: IFFALSE 45744
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45713: LD_VAR 0 8
45717: PPUSH
45718: CALL_OW 250
45722: PPUSH
45723: LD_VAR 0 8
45727: PPUSH
45728: CALL_OW 251
45732: PPUSH
45733: LD_VAR 0 16
45737: PPUSH
45738: CALL_OW 441
45742: GO 45710
45744: POP
45745: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45746: LD_VAR 0 18
45750: PPUSH
45751: LD_INT 2
45753: PUSH
45754: LD_INT 30
45756: PUSH
45757: LD_INT 32
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 30
45766: PUSH
45767: LD_INT 33
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: LIST
45778: PPUSH
45779: CALL_OW 72
45783: IFFALSE 45871
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45785: LD_ADDR_VAR 0 8
45789: PUSH
45790: LD_VAR 0 18
45794: PPUSH
45795: LD_INT 2
45797: PUSH
45798: LD_INT 30
45800: PUSH
45801: LD_INT 32
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 30
45810: PUSH
45811: LD_INT 33
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: LIST
45822: PPUSH
45823: CALL_OW 72
45827: PUSH
45828: FOR_IN
45829: IFFALSE 45869
// begin if not GetBWeapon ( i ) then
45831: LD_VAR 0 8
45835: PPUSH
45836: CALL_OW 269
45840: NOT
45841: IFFALSE 45867
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45843: LD_VAR 0 8
45847: PPUSH
45848: LD_VAR 0 8
45852: PPUSH
45853: LD_VAR 0 2
45857: PPUSH
45858: CALL 47117 0 2
45862: PPUSH
45863: CALL_OW 431
// end ;
45867: GO 45828
45869: POP
45870: POP
// end ; for i = 1 to personel do
45871: LD_ADDR_VAR 0 8
45875: PUSH
45876: DOUBLE
45877: LD_INT 1
45879: DEC
45880: ST_TO_ADDR
45881: LD_VAR 0 6
45885: PUSH
45886: FOR_TO
45887: IFFALSE 46951
// begin if i > 4 then
45889: LD_VAR 0 8
45893: PUSH
45894: LD_INT 4
45896: GREATER
45897: IFFALSE 45901
// break ;
45899: GO 46951
// case i of 1 :
45901: LD_VAR 0 8
45905: PUSH
45906: LD_INT 1
45908: DOUBLE
45909: EQUAL
45910: IFTRUE 45914
45912: GO 45994
45914: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45915: LD_ADDR_VAR 0 12
45919: PUSH
45920: LD_VAR 0 18
45924: PPUSH
45925: LD_INT 22
45927: PUSH
45928: LD_VAR 0 16
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 58
45939: PUSH
45940: EMPTY
45941: LIST
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: LD_INT 30
45948: PUSH
45949: LD_INT 32
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 30
45958: PUSH
45959: LD_INT 4
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 30
45968: PUSH
45969: LD_INT 5
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: LIST
45986: PPUSH
45987: CALL_OW 72
45991: ST_TO_ADDR
45992: GO 46216
45994: LD_INT 2
45996: DOUBLE
45997: EQUAL
45998: IFTRUE 46002
46000: GO 46064
46002: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46003: LD_ADDR_VAR 0 12
46007: PUSH
46008: LD_VAR 0 18
46012: PPUSH
46013: LD_INT 22
46015: PUSH
46016: LD_VAR 0 16
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: LD_INT 30
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 30
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: LIST
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PPUSH
46057: CALL_OW 72
46061: ST_TO_ADDR
46062: GO 46216
46064: LD_INT 3
46066: DOUBLE
46067: EQUAL
46068: IFTRUE 46072
46070: GO 46134
46072: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46073: LD_ADDR_VAR 0 12
46077: PUSH
46078: LD_VAR 0 18
46082: PPUSH
46083: LD_INT 22
46085: PUSH
46086: LD_VAR 0 16
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: LD_INT 30
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 30
46110: PUSH
46111: LD_INT 3
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: LIST
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PPUSH
46127: CALL_OW 72
46131: ST_TO_ADDR
46132: GO 46216
46134: LD_INT 4
46136: DOUBLE
46137: EQUAL
46138: IFTRUE 46142
46140: GO 46215
46142: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46143: LD_ADDR_VAR 0 12
46147: PUSH
46148: LD_VAR 0 18
46152: PPUSH
46153: LD_INT 22
46155: PUSH
46156: LD_VAR 0 16
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 2
46167: PUSH
46168: LD_INT 30
46170: PUSH
46171: LD_INT 6
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 30
46180: PUSH
46181: LD_INT 7
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 30
46190: PUSH
46191: LD_INT 8
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PPUSH
46208: CALL_OW 72
46212: ST_TO_ADDR
46213: GO 46216
46215: POP
// if i = 1 then
46216: LD_VAR 0 8
46220: PUSH
46221: LD_INT 1
46223: EQUAL
46224: IFFALSE 46335
// begin tmp := [ ] ;
46226: LD_ADDR_VAR 0 19
46230: PUSH
46231: EMPTY
46232: ST_TO_ADDR
// for j in f do
46233: LD_ADDR_VAR 0 9
46237: PUSH
46238: LD_VAR 0 12
46242: PUSH
46243: FOR_IN
46244: IFFALSE 46317
// if GetBType ( j ) = b_bunker then
46246: LD_VAR 0 9
46250: PPUSH
46251: CALL_OW 266
46255: PUSH
46256: LD_INT 32
46258: EQUAL
46259: IFFALSE 46286
// tmp := Insert ( tmp , 1 , j ) else
46261: LD_ADDR_VAR 0 19
46265: PUSH
46266: LD_VAR 0 19
46270: PPUSH
46271: LD_INT 1
46273: PPUSH
46274: LD_VAR 0 9
46278: PPUSH
46279: CALL_OW 2
46283: ST_TO_ADDR
46284: GO 46315
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46286: LD_ADDR_VAR 0 19
46290: PUSH
46291: LD_VAR 0 19
46295: PPUSH
46296: LD_VAR 0 19
46300: PUSH
46301: LD_INT 1
46303: PLUS
46304: PPUSH
46305: LD_VAR 0 9
46309: PPUSH
46310: CALL_OW 2
46314: ST_TO_ADDR
46315: GO 46243
46317: POP
46318: POP
// if tmp then
46319: LD_VAR 0 19
46323: IFFALSE 46335
// f := tmp ;
46325: LD_ADDR_VAR 0 12
46329: PUSH
46330: LD_VAR 0 19
46334: ST_TO_ADDR
// end ; x := personel [ i ] ;
46335: LD_ADDR_VAR 0 13
46339: PUSH
46340: LD_VAR 0 6
46344: PUSH
46345: LD_VAR 0 8
46349: ARRAY
46350: ST_TO_ADDR
// if x = - 1 then
46351: LD_VAR 0 13
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: EQUAL
46360: IFFALSE 46569
// begin for j in f do
46362: LD_ADDR_VAR 0 9
46366: PUSH
46367: LD_VAR 0 12
46371: PUSH
46372: FOR_IN
46373: IFFALSE 46565
// repeat InitHc ;
46375: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46379: LD_VAR 0 9
46383: PPUSH
46384: CALL_OW 266
46388: PUSH
46389: LD_INT 5
46391: EQUAL
46392: IFFALSE 46462
// begin if UnitsInside ( j ) < 3 then
46394: LD_VAR 0 9
46398: PPUSH
46399: CALL_OW 313
46403: PUSH
46404: LD_INT 3
46406: LESS
46407: IFFALSE 46443
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46409: LD_INT 0
46411: PPUSH
46412: LD_INT 5
46414: PUSH
46415: LD_INT 8
46417: PUSH
46418: LD_INT 9
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: LIST
46425: PUSH
46426: LD_VAR 0 17
46430: ARRAY
46431: PPUSH
46432: LD_VAR 0 4
46436: PPUSH
46437: CALL_OW 380
46441: GO 46460
// PrepareHuman ( false , i , skill ) ;
46443: LD_INT 0
46445: PPUSH
46446: LD_VAR 0 8
46450: PPUSH
46451: LD_VAR 0 4
46455: PPUSH
46456: CALL_OW 380
// end else
46460: GO 46479
// PrepareHuman ( false , i , skill ) ;
46462: LD_INT 0
46464: PPUSH
46465: LD_VAR 0 8
46469: PPUSH
46470: LD_VAR 0 4
46474: PPUSH
46475: CALL_OW 380
// un := CreateHuman ;
46479: LD_ADDR_VAR 0 14
46483: PUSH
46484: CALL_OW 44
46488: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46489: LD_ADDR_VAR 0 7
46493: PUSH
46494: LD_VAR 0 7
46498: PPUSH
46499: LD_INT 1
46501: PPUSH
46502: LD_VAR 0 14
46506: PPUSH
46507: CALL_OW 2
46511: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46512: LD_VAR 0 14
46516: PPUSH
46517: LD_VAR 0 9
46521: PPUSH
46522: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46526: LD_VAR 0 9
46530: PPUSH
46531: CALL_OW 313
46535: PUSH
46536: LD_INT 6
46538: EQUAL
46539: PUSH
46540: LD_VAR 0 9
46544: PPUSH
46545: CALL_OW 266
46549: PUSH
46550: LD_INT 32
46552: PUSH
46553: LD_INT 31
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: IN
46560: OR
46561: IFFALSE 46375
46563: GO 46372
46565: POP
46566: POP
// end else
46567: GO 46949
// for j = 1 to x do
46569: LD_ADDR_VAR 0 9
46573: PUSH
46574: DOUBLE
46575: LD_INT 1
46577: DEC
46578: ST_TO_ADDR
46579: LD_VAR 0 13
46583: PUSH
46584: FOR_TO
46585: IFFALSE 46947
// begin InitHc ;
46587: CALL_OW 19
// if not f then
46591: LD_VAR 0 12
46595: NOT
46596: IFFALSE 46685
// begin PrepareHuman ( false , i , skill ) ;
46598: LD_INT 0
46600: PPUSH
46601: LD_VAR 0 8
46605: PPUSH
46606: LD_VAR 0 4
46610: PPUSH
46611: CALL_OW 380
// un := CreateHuman ;
46615: LD_ADDR_VAR 0 14
46619: PUSH
46620: CALL_OW 44
46624: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46625: LD_ADDR_VAR 0 7
46629: PUSH
46630: LD_VAR 0 7
46634: PPUSH
46635: LD_INT 1
46637: PPUSH
46638: LD_VAR 0 14
46642: PPUSH
46643: CALL_OW 2
46647: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46648: LD_VAR 0 14
46652: PPUSH
46653: LD_VAR 0 1
46657: PPUSH
46658: CALL_OW 250
46662: PPUSH
46663: LD_VAR 0 1
46667: PPUSH
46668: CALL_OW 251
46672: PPUSH
46673: LD_INT 10
46675: PPUSH
46676: LD_INT 0
46678: PPUSH
46679: CALL_OW 50
// continue ;
46683: GO 46584
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46685: LD_VAR 0 12
46689: PUSH
46690: LD_INT 1
46692: ARRAY
46693: PPUSH
46694: CALL_OW 313
46698: PUSH
46699: LD_VAR 0 12
46703: PUSH
46704: LD_INT 1
46706: ARRAY
46707: PPUSH
46708: CALL_OW 266
46712: PUSH
46713: LD_INT 32
46715: PUSH
46716: LD_INT 31
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: IN
46723: AND
46724: PUSH
46725: LD_VAR 0 12
46729: PUSH
46730: LD_INT 1
46732: ARRAY
46733: PPUSH
46734: CALL_OW 313
46738: PUSH
46739: LD_INT 6
46741: EQUAL
46742: OR
46743: IFFALSE 46763
// f := Delete ( f , 1 ) ;
46745: LD_ADDR_VAR 0 12
46749: PUSH
46750: LD_VAR 0 12
46754: PPUSH
46755: LD_INT 1
46757: PPUSH
46758: CALL_OW 3
46762: ST_TO_ADDR
// if not f then
46763: LD_VAR 0 12
46767: NOT
46768: IFFALSE 46786
// begin x := x + 2 ;
46770: LD_ADDR_VAR 0 13
46774: PUSH
46775: LD_VAR 0 13
46779: PUSH
46780: LD_INT 2
46782: PLUS
46783: ST_TO_ADDR
// continue ;
46784: GO 46584
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46786: LD_VAR 0 12
46790: PUSH
46791: LD_INT 1
46793: ARRAY
46794: PPUSH
46795: CALL_OW 266
46799: PUSH
46800: LD_INT 5
46802: EQUAL
46803: IFFALSE 46877
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46805: LD_VAR 0 12
46809: PUSH
46810: LD_INT 1
46812: ARRAY
46813: PPUSH
46814: CALL_OW 313
46818: PUSH
46819: LD_INT 3
46821: LESS
46822: IFFALSE 46858
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46824: LD_INT 0
46826: PPUSH
46827: LD_INT 5
46829: PUSH
46830: LD_INT 8
46832: PUSH
46833: LD_INT 9
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: LIST
46840: PUSH
46841: LD_VAR 0 17
46845: ARRAY
46846: PPUSH
46847: LD_VAR 0 4
46851: PPUSH
46852: CALL_OW 380
46856: GO 46875
// PrepareHuman ( false , i , skill ) ;
46858: LD_INT 0
46860: PPUSH
46861: LD_VAR 0 8
46865: PPUSH
46866: LD_VAR 0 4
46870: PPUSH
46871: CALL_OW 380
// end else
46875: GO 46894
// PrepareHuman ( false , i , skill ) ;
46877: LD_INT 0
46879: PPUSH
46880: LD_VAR 0 8
46884: PPUSH
46885: LD_VAR 0 4
46889: PPUSH
46890: CALL_OW 380
// un := CreateHuman ;
46894: LD_ADDR_VAR 0 14
46898: PUSH
46899: CALL_OW 44
46903: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46904: LD_ADDR_VAR 0 7
46908: PUSH
46909: LD_VAR 0 7
46913: PPUSH
46914: LD_INT 1
46916: PPUSH
46917: LD_VAR 0 14
46921: PPUSH
46922: CALL_OW 2
46926: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46927: LD_VAR 0 14
46931: PPUSH
46932: LD_VAR 0 12
46936: PUSH
46937: LD_INT 1
46939: ARRAY
46940: PPUSH
46941: CALL_OW 52
// end ;
46945: GO 46584
46947: POP
46948: POP
// end ;
46949: GO 45886
46951: POP
46952: POP
// result := result ^ buildings ;
46953: LD_ADDR_VAR 0 7
46957: PUSH
46958: LD_VAR 0 7
46962: PUSH
46963: LD_VAR 0 18
46967: ADD
46968: ST_TO_ADDR
// end else
46969: GO 47112
// begin for i = 1 to personel do
46971: LD_ADDR_VAR 0 8
46975: PUSH
46976: DOUBLE
46977: LD_INT 1
46979: DEC
46980: ST_TO_ADDR
46981: LD_VAR 0 6
46985: PUSH
46986: FOR_TO
46987: IFFALSE 47110
// begin if i > 4 then
46989: LD_VAR 0 8
46993: PUSH
46994: LD_INT 4
46996: GREATER
46997: IFFALSE 47001
// break ;
46999: GO 47110
// x := personel [ i ] ;
47001: LD_ADDR_VAR 0 13
47005: PUSH
47006: LD_VAR 0 6
47010: PUSH
47011: LD_VAR 0 8
47015: ARRAY
47016: ST_TO_ADDR
// if x = - 1 then
47017: LD_VAR 0 13
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: EQUAL
47026: IFFALSE 47030
// continue ;
47028: GO 46986
// PrepareHuman ( false , i , skill ) ;
47030: LD_INT 0
47032: PPUSH
47033: LD_VAR 0 8
47037: PPUSH
47038: LD_VAR 0 4
47042: PPUSH
47043: CALL_OW 380
// un := CreateHuman ;
47047: LD_ADDR_VAR 0 14
47051: PUSH
47052: CALL_OW 44
47056: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47057: LD_VAR 0 14
47061: PPUSH
47062: LD_VAR 0 1
47066: PPUSH
47067: CALL_OW 250
47071: PPUSH
47072: LD_VAR 0 1
47076: PPUSH
47077: CALL_OW 251
47081: PPUSH
47082: LD_INT 10
47084: PPUSH
47085: LD_INT 0
47087: PPUSH
47088: CALL_OW 50
// result := result ^ un ;
47092: LD_ADDR_VAR 0 7
47096: PUSH
47097: LD_VAR 0 7
47101: PUSH
47102: LD_VAR 0 14
47106: ADD
47107: ST_TO_ADDR
// end ;
47108: GO 46986
47110: POP
47111: POP
// end ; end ;
47112: LD_VAR 0 7
47116: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47117: LD_INT 0
47119: PPUSH
47120: PPUSH
47121: PPUSH
47122: PPUSH
47123: PPUSH
47124: PPUSH
47125: PPUSH
47126: PPUSH
47127: PPUSH
47128: PPUSH
47129: PPUSH
47130: PPUSH
47131: PPUSH
47132: PPUSH
47133: PPUSH
47134: PPUSH
// result := false ;
47135: LD_ADDR_VAR 0 3
47139: PUSH
47140: LD_INT 0
47142: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47143: LD_VAR 0 1
47147: NOT
47148: PUSH
47149: LD_VAR 0 1
47153: PPUSH
47154: CALL_OW 266
47158: PUSH
47159: LD_INT 32
47161: PUSH
47162: LD_INT 33
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: IN
47169: NOT
47170: OR
47171: IFFALSE 47175
// exit ;
47173: GO 48311
// nat := GetNation ( tower ) ;
47175: LD_ADDR_VAR 0 12
47179: PUSH
47180: LD_VAR 0 1
47184: PPUSH
47185: CALL_OW 248
47189: ST_TO_ADDR
// side := GetSide ( tower ) ;
47190: LD_ADDR_VAR 0 16
47194: PUSH
47195: LD_VAR 0 1
47199: PPUSH
47200: CALL_OW 255
47204: ST_TO_ADDR
// x := GetX ( tower ) ;
47205: LD_ADDR_VAR 0 10
47209: PUSH
47210: LD_VAR 0 1
47214: PPUSH
47215: CALL_OW 250
47219: ST_TO_ADDR
// y := GetY ( tower ) ;
47220: LD_ADDR_VAR 0 11
47224: PUSH
47225: LD_VAR 0 1
47229: PPUSH
47230: CALL_OW 251
47234: ST_TO_ADDR
// if not x or not y then
47235: LD_VAR 0 10
47239: NOT
47240: PUSH
47241: LD_VAR 0 11
47245: NOT
47246: OR
47247: IFFALSE 47251
// exit ;
47249: GO 48311
// weapon := 0 ;
47251: LD_ADDR_VAR 0 18
47255: PUSH
47256: LD_INT 0
47258: ST_TO_ADDR
// fac_list := [ ] ;
47259: LD_ADDR_VAR 0 17
47263: PUSH
47264: EMPTY
47265: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
47266: LD_ADDR_VAR 0 6
47270: PUSH
47271: LD_VAR 0 1
47275: PPUSH
47276: CALL_OW 274
47280: PPUSH
47281: LD_VAR 0 2
47285: PPUSH
47286: CALL 44889 0 2
47290: PPUSH
47291: LD_INT 30
47293: PUSH
47294: LD_INT 3
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PPUSH
47301: CALL_OW 72
47305: ST_TO_ADDR
// if not factories then
47306: LD_VAR 0 6
47310: NOT
47311: IFFALSE 47315
// exit ;
47313: GO 48311
// for i in factories do
47315: LD_ADDR_VAR 0 8
47319: PUSH
47320: LD_VAR 0 6
47324: PUSH
47325: FOR_IN
47326: IFFALSE 47351
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47328: LD_ADDR_VAR 0 17
47332: PUSH
47333: LD_VAR 0 17
47337: PUSH
47338: LD_VAR 0 8
47342: PPUSH
47343: CALL_OW 478
47347: UNION
47348: ST_TO_ADDR
47349: GO 47325
47351: POP
47352: POP
// if not fac_list then
47353: LD_VAR 0 17
47357: NOT
47358: IFFALSE 47362
// exit ;
47360: GO 48311
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47362: LD_ADDR_VAR 0 5
47366: PUSH
47367: LD_INT 4
47369: PUSH
47370: LD_INT 5
47372: PUSH
47373: LD_INT 9
47375: PUSH
47376: LD_INT 10
47378: PUSH
47379: LD_INT 6
47381: PUSH
47382: LD_INT 7
47384: PUSH
47385: LD_INT 11
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 27
47399: PUSH
47400: LD_INT 28
47402: PUSH
47403: LD_INT 26
47405: PUSH
47406: LD_INT 30
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 43
47417: PUSH
47418: LD_INT 44
47420: PUSH
47421: LD_INT 46
47423: PUSH
47424: LD_INT 45
47426: PUSH
47427: LD_INT 47
47429: PUSH
47430: LD_INT 49
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: LIST
47445: PUSH
47446: LD_VAR 0 12
47450: ARRAY
47451: ST_TO_ADDR
// for i in list do
47452: LD_ADDR_VAR 0 8
47456: PUSH
47457: LD_VAR 0 5
47461: PUSH
47462: FOR_IN
47463: IFFALSE 47496
// if not i in fac_list then
47465: LD_VAR 0 8
47469: PUSH
47470: LD_VAR 0 17
47474: IN
47475: NOT
47476: IFFALSE 47494
// list := list diff i ;
47478: LD_ADDR_VAR 0 5
47482: PUSH
47483: LD_VAR 0 5
47487: PUSH
47488: LD_VAR 0 8
47492: DIFF
47493: ST_TO_ADDR
47494: GO 47462
47496: POP
47497: POP
// if not list then
47498: LD_VAR 0 5
47502: NOT
47503: IFFALSE 47507
// exit ;
47505: GO 48311
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47507: LD_VAR 0 12
47511: PUSH
47512: LD_INT 3
47514: EQUAL
47515: PUSH
47516: LD_INT 49
47518: PUSH
47519: LD_VAR 0 5
47523: IN
47524: AND
47525: PUSH
47526: LD_INT 31
47528: PPUSH
47529: LD_VAR 0 16
47533: PPUSH
47534: CALL_OW 321
47538: PUSH
47539: LD_INT 2
47541: EQUAL
47542: AND
47543: IFFALSE 47603
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47545: LD_INT 22
47547: PUSH
47548: LD_VAR 0 16
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 35
47559: PUSH
47560: LD_INT 49
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 91
47569: PUSH
47570: LD_VAR 0 1
47574: PUSH
47575: LD_INT 10
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: LIST
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: LIST
47587: PPUSH
47588: CALL_OW 69
47592: NOT
47593: IFFALSE 47603
// weapon := ru_time_lapser ;
47595: LD_ADDR_VAR 0 18
47599: PUSH
47600: LD_INT 49
47602: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47603: LD_VAR 0 12
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: IN
47618: PUSH
47619: LD_INT 11
47621: PUSH
47622: LD_VAR 0 5
47626: IN
47627: PUSH
47628: LD_INT 30
47630: PUSH
47631: LD_VAR 0 5
47635: IN
47636: OR
47637: AND
47638: PUSH
47639: LD_INT 6
47641: PPUSH
47642: LD_VAR 0 16
47646: PPUSH
47647: CALL_OW 321
47651: PUSH
47652: LD_INT 2
47654: EQUAL
47655: AND
47656: IFFALSE 47821
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47658: LD_INT 22
47660: PUSH
47661: LD_VAR 0 16
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: LD_INT 35
47675: PUSH
47676: LD_INT 11
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 35
47685: PUSH
47686: LD_INT 30
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 91
47700: PUSH
47701: LD_VAR 0 1
47705: PUSH
47706: LD_INT 18
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: LIST
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: PPUSH
47719: CALL_OW 69
47723: NOT
47724: PUSH
47725: LD_INT 22
47727: PUSH
47728: LD_VAR 0 16
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: LD_INT 30
47742: PUSH
47743: LD_INT 32
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 30
47752: PUSH
47753: LD_INT 33
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 91
47767: PUSH
47768: LD_VAR 0 1
47772: PUSH
47773: LD_INT 12
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: LIST
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: LIST
47785: PUSH
47786: EMPTY
47787: LIST
47788: PPUSH
47789: CALL_OW 69
47793: PUSH
47794: LD_INT 2
47796: GREATER
47797: AND
47798: IFFALSE 47821
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47800: LD_ADDR_VAR 0 18
47804: PUSH
47805: LD_INT 11
47807: PUSH
47808: LD_INT 30
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_VAR 0 12
47819: ARRAY
47820: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47821: LD_VAR 0 18
47825: NOT
47826: PUSH
47827: LD_INT 40
47829: PPUSH
47830: LD_VAR 0 16
47834: PPUSH
47835: CALL_OW 321
47839: PUSH
47840: LD_INT 2
47842: EQUAL
47843: AND
47844: PUSH
47845: LD_INT 7
47847: PUSH
47848: LD_VAR 0 5
47852: IN
47853: PUSH
47854: LD_INT 28
47856: PUSH
47857: LD_VAR 0 5
47861: IN
47862: OR
47863: PUSH
47864: LD_INT 45
47866: PUSH
47867: LD_VAR 0 5
47871: IN
47872: OR
47873: AND
47874: IFFALSE 48128
// begin hex := GetHexInfo ( x , y ) ;
47876: LD_ADDR_VAR 0 4
47880: PUSH
47881: LD_VAR 0 10
47885: PPUSH
47886: LD_VAR 0 11
47890: PPUSH
47891: CALL_OW 546
47895: ST_TO_ADDR
// if hex [ 1 ] then
47896: LD_VAR 0 4
47900: PUSH
47901: LD_INT 1
47903: ARRAY
47904: IFFALSE 47908
// exit ;
47906: GO 48311
// height := hex [ 2 ] ;
47908: LD_ADDR_VAR 0 15
47912: PUSH
47913: LD_VAR 0 4
47917: PUSH
47918: LD_INT 2
47920: ARRAY
47921: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47922: LD_ADDR_VAR 0 14
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: LD_INT 3
47935: PUSH
47936: LD_INT 5
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: ST_TO_ADDR
// for i in tmp do
47945: LD_ADDR_VAR 0 8
47949: PUSH
47950: LD_VAR 0 14
47954: PUSH
47955: FOR_IN
47956: IFFALSE 48126
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47958: LD_ADDR_VAR 0 9
47962: PUSH
47963: LD_VAR 0 10
47967: PPUSH
47968: LD_VAR 0 8
47972: PPUSH
47973: LD_INT 5
47975: PPUSH
47976: CALL_OW 272
47980: PUSH
47981: LD_VAR 0 11
47985: PPUSH
47986: LD_VAR 0 8
47990: PPUSH
47991: LD_INT 5
47993: PPUSH
47994: CALL_OW 273
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48003: LD_VAR 0 9
48007: PUSH
48008: LD_INT 1
48010: ARRAY
48011: PPUSH
48012: LD_VAR 0 9
48016: PUSH
48017: LD_INT 2
48019: ARRAY
48020: PPUSH
48021: CALL_OW 488
48025: IFFALSE 48124
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48027: LD_ADDR_VAR 0 4
48031: PUSH
48032: LD_VAR 0 9
48036: PUSH
48037: LD_INT 1
48039: ARRAY
48040: PPUSH
48041: LD_VAR 0 9
48045: PUSH
48046: LD_INT 2
48048: ARRAY
48049: PPUSH
48050: CALL_OW 546
48054: ST_TO_ADDR
// if hex [ 1 ] then
48055: LD_VAR 0 4
48059: PUSH
48060: LD_INT 1
48062: ARRAY
48063: IFFALSE 48067
// continue ;
48065: GO 47955
// h := hex [ 2 ] ;
48067: LD_ADDR_VAR 0 13
48071: PUSH
48072: LD_VAR 0 4
48076: PUSH
48077: LD_INT 2
48079: ARRAY
48080: ST_TO_ADDR
// if h + 7 < height then
48081: LD_VAR 0 13
48085: PUSH
48086: LD_INT 7
48088: PLUS
48089: PUSH
48090: LD_VAR 0 15
48094: LESS
48095: IFFALSE 48124
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48097: LD_ADDR_VAR 0 18
48101: PUSH
48102: LD_INT 7
48104: PUSH
48105: LD_INT 28
48107: PUSH
48108: LD_INT 45
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: LIST
48115: PUSH
48116: LD_VAR 0 12
48120: ARRAY
48121: ST_TO_ADDR
// break ;
48122: GO 48126
// end ; end ; end ;
48124: GO 47955
48126: POP
48127: POP
// end ; if not weapon then
48128: LD_VAR 0 18
48132: NOT
48133: IFFALSE 48193
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48135: LD_ADDR_VAR 0 5
48139: PUSH
48140: LD_VAR 0 5
48144: PUSH
48145: LD_INT 11
48147: PUSH
48148: LD_INT 30
48150: PUSH
48151: LD_INT 49
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: LIST
48158: DIFF
48159: ST_TO_ADDR
// if not list then
48160: LD_VAR 0 5
48164: NOT
48165: IFFALSE 48169
// exit ;
48167: GO 48311
// weapon := list [ rand ( 1 , list ) ] ;
48169: LD_ADDR_VAR 0 18
48173: PUSH
48174: LD_VAR 0 5
48178: PUSH
48179: LD_INT 1
48181: PPUSH
48182: LD_VAR 0 5
48186: PPUSH
48187: CALL_OW 12
48191: ARRAY
48192: ST_TO_ADDR
// end ; if weapon then
48193: LD_VAR 0 18
48197: IFFALSE 48311
// begin tmp := CostOfWeapon ( weapon ) ;
48199: LD_ADDR_VAR 0 14
48203: PUSH
48204: LD_VAR 0 18
48208: PPUSH
48209: CALL_OW 451
48213: ST_TO_ADDR
// j := GetBase ( tower ) ;
48214: LD_ADDR_VAR 0 9
48218: PUSH
48219: LD_VAR 0 1
48223: PPUSH
48224: CALL_OW 274
48228: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48229: LD_VAR 0 9
48233: PPUSH
48234: LD_INT 1
48236: PPUSH
48237: CALL_OW 275
48241: PUSH
48242: LD_VAR 0 14
48246: PUSH
48247: LD_INT 1
48249: ARRAY
48250: GREATEREQUAL
48251: PUSH
48252: LD_VAR 0 9
48256: PPUSH
48257: LD_INT 2
48259: PPUSH
48260: CALL_OW 275
48264: PUSH
48265: LD_VAR 0 14
48269: PUSH
48270: LD_INT 2
48272: ARRAY
48273: GREATEREQUAL
48274: AND
48275: PUSH
48276: LD_VAR 0 9
48280: PPUSH
48281: LD_INT 3
48283: PPUSH
48284: CALL_OW 275
48288: PUSH
48289: LD_VAR 0 14
48293: PUSH
48294: LD_INT 3
48296: ARRAY
48297: GREATEREQUAL
48298: AND
48299: IFFALSE 48311
// result := weapon ;
48301: LD_ADDR_VAR 0 3
48305: PUSH
48306: LD_VAR 0 18
48310: ST_TO_ADDR
// end ; end ;
48311: LD_VAR 0 3
48315: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48316: LD_INT 0
48318: PPUSH
48319: PPUSH
// result := true ;
48320: LD_ADDR_VAR 0 3
48324: PUSH
48325: LD_INT 1
48327: ST_TO_ADDR
// if array1 = array2 then
48328: LD_VAR 0 1
48332: PUSH
48333: LD_VAR 0 2
48337: EQUAL
48338: IFFALSE 48398
// begin for i = 1 to array1 do
48340: LD_ADDR_VAR 0 4
48344: PUSH
48345: DOUBLE
48346: LD_INT 1
48348: DEC
48349: ST_TO_ADDR
48350: LD_VAR 0 1
48354: PUSH
48355: FOR_TO
48356: IFFALSE 48394
// if array1 [ i ] <> array2 [ i ] then
48358: LD_VAR 0 1
48362: PUSH
48363: LD_VAR 0 4
48367: ARRAY
48368: PUSH
48369: LD_VAR 0 2
48373: PUSH
48374: LD_VAR 0 4
48378: ARRAY
48379: NONEQUAL
48380: IFFALSE 48392
// begin result := false ;
48382: LD_ADDR_VAR 0 3
48386: PUSH
48387: LD_INT 0
48389: ST_TO_ADDR
// break ;
48390: GO 48394
// end ;
48392: GO 48355
48394: POP
48395: POP
// end else
48396: GO 48406
// result := false ;
48398: LD_ADDR_VAR 0 3
48402: PUSH
48403: LD_INT 0
48405: ST_TO_ADDR
// end ;
48406: LD_VAR 0 3
48410: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48411: LD_INT 0
48413: PPUSH
48414: PPUSH
48415: PPUSH
// pom := GetBase ( fac ) ;
48416: LD_ADDR_VAR 0 5
48420: PUSH
48421: LD_VAR 0 1
48425: PPUSH
48426: CALL_OW 274
48430: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48431: LD_ADDR_VAR 0 4
48435: PUSH
48436: LD_VAR 0 2
48440: PUSH
48441: LD_INT 1
48443: ARRAY
48444: PPUSH
48445: LD_VAR 0 2
48449: PUSH
48450: LD_INT 2
48452: ARRAY
48453: PPUSH
48454: LD_VAR 0 2
48458: PUSH
48459: LD_INT 3
48461: ARRAY
48462: PPUSH
48463: LD_VAR 0 2
48467: PUSH
48468: LD_INT 4
48470: ARRAY
48471: PPUSH
48472: CALL_OW 449
48476: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48477: LD_ADDR_VAR 0 3
48481: PUSH
48482: LD_VAR 0 5
48486: PPUSH
48487: LD_INT 1
48489: PPUSH
48490: CALL_OW 275
48494: PUSH
48495: LD_VAR 0 4
48499: PUSH
48500: LD_INT 1
48502: ARRAY
48503: GREATEREQUAL
48504: PUSH
48505: LD_VAR 0 5
48509: PPUSH
48510: LD_INT 2
48512: PPUSH
48513: CALL_OW 275
48517: PUSH
48518: LD_VAR 0 4
48522: PUSH
48523: LD_INT 2
48525: ARRAY
48526: GREATEREQUAL
48527: AND
48528: PUSH
48529: LD_VAR 0 5
48533: PPUSH
48534: LD_INT 3
48536: PPUSH
48537: CALL_OW 275
48541: PUSH
48542: LD_VAR 0 4
48546: PUSH
48547: LD_INT 3
48549: ARRAY
48550: GREATEREQUAL
48551: AND
48552: ST_TO_ADDR
// end ;
48553: LD_VAR 0 3
48557: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48558: LD_INT 0
48560: PPUSH
48561: PPUSH
48562: PPUSH
48563: PPUSH
// pom := GetBase ( building ) ;
48564: LD_ADDR_VAR 0 3
48568: PUSH
48569: LD_VAR 0 1
48573: PPUSH
48574: CALL_OW 274
48578: ST_TO_ADDR
// if not pom then
48579: LD_VAR 0 3
48583: NOT
48584: IFFALSE 48588
// exit ;
48586: GO 48758
// btype := GetBType ( building ) ;
48588: LD_ADDR_VAR 0 5
48592: PUSH
48593: LD_VAR 0 1
48597: PPUSH
48598: CALL_OW 266
48602: ST_TO_ADDR
// if btype = b_armoury then
48603: LD_VAR 0 5
48607: PUSH
48608: LD_INT 4
48610: EQUAL
48611: IFFALSE 48621
// btype := b_barracks ;
48613: LD_ADDR_VAR 0 5
48617: PUSH
48618: LD_INT 5
48620: ST_TO_ADDR
// if btype = b_depot then
48621: LD_VAR 0 5
48625: PUSH
48626: LD_INT 0
48628: EQUAL
48629: IFFALSE 48639
// btype := b_warehouse ;
48631: LD_ADDR_VAR 0 5
48635: PUSH
48636: LD_INT 1
48638: ST_TO_ADDR
// if btype = b_workshop then
48639: LD_VAR 0 5
48643: PUSH
48644: LD_INT 2
48646: EQUAL
48647: IFFALSE 48657
// btype := b_factory ;
48649: LD_ADDR_VAR 0 5
48653: PUSH
48654: LD_INT 3
48656: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48657: LD_ADDR_VAR 0 4
48661: PUSH
48662: LD_VAR 0 5
48666: PPUSH
48667: LD_VAR 0 1
48671: PPUSH
48672: CALL_OW 248
48676: PPUSH
48677: CALL_OW 450
48681: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48682: LD_ADDR_VAR 0 2
48686: PUSH
48687: LD_VAR 0 3
48691: PPUSH
48692: LD_INT 1
48694: PPUSH
48695: CALL_OW 275
48699: PUSH
48700: LD_VAR 0 4
48704: PUSH
48705: LD_INT 1
48707: ARRAY
48708: GREATEREQUAL
48709: PUSH
48710: LD_VAR 0 3
48714: PPUSH
48715: LD_INT 2
48717: PPUSH
48718: CALL_OW 275
48722: PUSH
48723: LD_VAR 0 4
48727: PUSH
48728: LD_INT 2
48730: ARRAY
48731: GREATEREQUAL
48732: AND
48733: PUSH
48734: LD_VAR 0 3
48738: PPUSH
48739: LD_INT 3
48741: PPUSH
48742: CALL_OW 275
48746: PUSH
48747: LD_VAR 0 4
48751: PUSH
48752: LD_INT 3
48754: ARRAY
48755: GREATEREQUAL
48756: AND
48757: ST_TO_ADDR
// end ;
48758: LD_VAR 0 2
48762: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48763: LD_INT 0
48765: PPUSH
48766: PPUSH
48767: PPUSH
// pom := GetBase ( building ) ;
48768: LD_ADDR_VAR 0 4
48772: PUSH
48773: LD_VAR 0 1
48777: PPUSH
48778: CALL_OW 274
48782: ST_TO_ADDR
// if not pom then
48783: LD_VAR 0 4
48787: NOT
48788: IFFALSE 48792
// exit ;
48790: GO 48893
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48792: LD_ADDR_VAR 0 5
48796: PUSH
48797: LD_VAR 0 2
48801: PPUSH
48802: LD_VAR 0 1
48806: PPUSH
48807: CALL_OW 248
48811: PPUSH
48812: CALL_OW 450
48816: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48817: LD_ADDR_VAR 0 3
48821: PUSH
48822: LD_VAR 0 4
48826: PPUSH
48827: LD_INT 1
48829: PPUSH
48830: CALL_OW 275
48834: PUSH
48835: LD_VAR 0 5
48839: PUSH
48840: LD_INT 1
48842: ARRAY
48843: GREATEREQUAL
48844: PUSH
48845: LD_VAR 0 4
48849: PPUSH
48850: LD_INT 2
48852: PPUSH
48853: CALL_OW 275
48857: PUSH
48858: LD_VAR 0 5
48862: PUSH
48863: LD_INT 2
48865: ARRAY
48866: GREATEREQUAL
48867: AND
48868: PUSH
48869: LD_VAR 0 4
48873: PPUSH
48874: LD_INT 3
48876: PPUSH
48877: CALL_OW 275
48881: PUSH
48882: LD_VAR 0 5
48886: PUSH
48887: LD_INT 3
48889: ARRAY
48890: GREATEREQUAL
48891: AND
48892: ST_TO_ADDR
// end ;
48893: LD_VAR 0 3
48897: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
48898: LD_INT 0
48900: PPUSH
48901: PPUSH
48902: PPUSH
48903: PPUSH
48904: PPUSH
48905: PPUSH
48906: PPUSH
48907: PPUSH
48908: PPUSH
48909: PPUSH
// result := false ;
48910: LD_ADDR_VAR 0 6
48914: PUSH
48915: LD_INT 0
48917: ST_TO_ADDR
// if not base or not btype or not x or not y then
48918: LD_VAR 0 1
48922: NOT
48923: PUSH
48924: LD_VAR 0 2
48928: NOT
48929: OR
48930: PUSH
48931: LD_VAR 0 3
48935: NOT
48936: OR
48937: PUSH
48938: LD_VAR 0 4
48942: NOT
48943: OR
48944: IFFALSE 48948
// exit ;
48946: GO 49557
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
48948: LD_ADDR_VAR 0 12
48952: PUSH
48953: LD_VAR 0 2
48957: PPUSH
48958: LD_VAR 0 3
48962: PPUSH
48963: LD_VAR 0 4
48967: PPUSH
48968: LD_VAR 0 5
48972: PPUSH
48973: LD_VAR 0 1
48977: PUSH
48978: LD_INT 1
48980: ARRAY
48981: PPUSH
48982: CALL_OW 248
48986: PPUSH
48987: LD_INT 0
48989: PPUSH
48990: CALL 50394 0 6
48994: ST_TO_ADDR
// if not hexes then
48995: LD_VAR 0 12
48999: NOT
49000: IFFALSE 49004
// exit ;
49002: GO 49557
// for i = 1 to hexes do
49004: LD_ADDR_VAR 0 7
49008: PUSH
49009: DOUBLE
49010: LD_INT 1
49012: DEC
49013: ST_TO_ADDR
49014: LD_VAR 0 12
49018: PUSH
49019: FOR_TO
49020: IFFALSE 49555
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49022: LD_ADDR_VAR 0 11
49026: PUSH
49027: LD_VAR 0 12
49031: PUSH
49032: LD_VAR 0 7
49036: ARRAY
49037: PUSH
49038: LD_INT 1
49040: ARRAY
49041: PPUSH
49042: LD_VAR 0 12
49046: PUSH
49047: LD_VAR 0 7
49051: ARRAY
49052: PUSH
49053: LD_INT 2
49055: ARRAY
49056: PPUSH
49057: CALL_OW 428
49061: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49062: LD_VAR 0 12
49066: PUSH
49067: LD_VAR 0 7
49071: ARRAY
49072: PUSH
49073: LD_INT 1
49075: ARRAY
49076: PPUSH
49077: LD_VAR 0 12
49081: PUSH
49082: LD_VAR 0 7
49086: ARRAY
49087: PUSH
49088: LD_INT 2
49090: ARRAY
49091: PPUSH
49092: CALL_OW 351
49096: PUSH
49097: LD_VAR 0 12
49101: PUSH
49102: LD_VAR 0 7
49106: ARRAY
49107: PUSH
49108: LD_INT 1
49110: ARRAY
49111: PPUSH
49112: LD_VAR 0 12
49116: PUSH
49117: LD_VAR 0 7
49121: ARRAY
49122: PUSH
49123: LD_INT 2
49125: ARRAY
49126: PPUSH
49127: CALL_OW 488
49131: NOT
49132: OR
49133: PUSH
49134: LD_VAR 0 11
49138: PPUSH
49139: CALL_OW 247
49143: PUSH
49144: LD_INT 3
49146: EQUAL
49147: OR
49148: IFFALSE 49154
// exit ;
49150: POP
49151: POP
49152: GO 49557
// if not tmp or not tmp in base then
49154: LD_VAR 0 11
49158: NOT
49159: PUSH
49160: LD_VAR 0 11
49164: PUSH
49165: LD_VAR 0 1
49169: IN
49170: NOT
49171: OR
49172: IFFALSE 49176
// continue ;
49174: GO 49019
// result := true ;
49176: LD_ADDR_VAR 0 6
49180: PUSH
49181: LD_INT 1
49183: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49184: LD_ADDR_VAR 0 15
49188: PUSH
49189: LD_VAR 0 1
49193: PPUSH
49194: LD_INT 22
49196: PUSH
49197: LD_VAR 0 11
49201: PPUSH
49202: CALL_OW 255
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: LD_INT 30
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 30
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: LIST
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PPUSH
49243: CALL_OW 72
49247: ST_TO_ADDR
// if dep then
49248: LD_VAR 0 15
49252: IFFALSE 49388
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49254: LD_ADDR_VAR 0 14
49258: PUSH
49259: LD_VAR 0 15
49263: PUSH
49264: LD_INT 1
49266: ARRAY
49267: PPUSH
49268: CALL_OW 250
49272: PPUSH
49273: LD_VAR 0 15
49277: PUSH
49278: LD_INT 1
49280: ARRAY
49281: PPUSH
49282: CALL_OW 254
49286: PPUSH
49287: LD_INT 5
49289: PPUSH
49290: CALL_OW 272
49294: PUSH
49295: LD_VAR 0 15
49299: PUSH
49300: LD_INT 1
49302: ARRAY
49303: PPUSH
49304: CALL_OW 251
49308: PPUSH
49309: LD_VAR 0 15
49313: PUSH
49314: LD_INT 1
49316: ARRAY
49317: PPUSH
49318: CALL_OW 254
49322: PPUSH
49323: LD_INT 5
49325: PPUSH
49326: CALL_OW 273
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49335: LD_VAR 0 14
49339: PUSH
49340: LD_INT 1
49342: ARRAY
49343: PPUSH
49344: LD_VAR 0 14
49348: PUSH
49349: LD_INT 2
49351: ARRAY
49352: PPUSH
49353: CALL_OW 488
49357: IFFALSE 49388
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49359: LD_VAR 0 11
49363: PPUSH
49364: LD_VAR 0 14
49368: PUSH
49369: LD_INT 1
49371: ARRAY
49372: PPUSH
49373: LD_VAR 0 14
49377: PUSH
49378: LD_INT 2
49380: ARRAY
49381: PPUSH
49382: CALL_OW 111
// continue ;
49386: GO 49019
// end ; end ; r := GetDir ( tmp ) ;
49388: LD_ADDR_VAR 0 13
49392: PUSH
49393: LD_VAR 0 11
49397: PPUSH
49398: CALL_OW 254
49402: ST_TO_ADDR
// if r = 5 then
49403: LD_VAR 0 13
49407: PUSH
49408: LD_INT 5
49410: EQUAL
49411: IFFALSE 49421
// r := 0 ;
49413: LD_ADDR_VAR 0 13
49417: PUSH
49418: LD_INT 0
49420: ST_TO_ADDR
// for j = r to 5 do
49421: LD_ADDR_VAR 0 8
49425: PUSH
49426: DOUBLE
49427: LD_VAR 0 13
49431: DEC
49432: ST_TO_ADDR
49433: LD_INT 5
49435: PUSH
49436: FOR_TO
49437: IFFALSE 49551
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49439: LD_ADDR_VAR 0 9
49443: PUSH
49444: LD_VAR 0 11
49448: PPUSH
49449: CALL_OW 250
49453: PPUSH
49454: LD_VAR 0 8
49458: PPUSH
49459: LD_INT 2
49461: PPUSH
49462: CALL_OW 272
49466: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49467: LD_ADDR_VAR 0 10
49471: PUSH
49472: LD_VAR 0 11
49476: PPUSH
49477: CALL_OW 251
49481: PPUSH
49482: LD_VAR 0 8
49486: PPUSH
49487: LD_INT 2
49489: PPUSH
49490: CALL_OW 273
49494: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49495: LD_VAR 0 9
49499: PPUSH
49500: LD_VAR 0 10
49504: PPUSH
49505: CALL_OW 488
49509: PUSH
49510: LD_VAR 0 9
49514: PPUSH
49515: LD_VAR 0 10
49519: PPUSH
49520: CALL_OW 428
49524: NOT
49525: AND
49526: IFFALSE 49549
// begin ComMoveXY ( tmp , _x , _y ) ;
49528: LD_VAR 0 11
49532: PPUSH
49533: LD_VAR 0 9
49537: PPUSH
49538: LD_VAR 0 10
49542: PPUSH
49543: CALL_OW 111
// break ;
49547: GO 49551
// end ; end ;
49549: GO 49436
49551: POP
49552: POP
// end ;
49553: GO 49019
49555: POP
49556: POP
// end ;
49557: LD_VAR 0 6
49561: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
49562: LD_INT 0
49564: PPUSH
49565: PPUSH
49566: PPUSH
49567: PPUSH
49568: PPUSH
49569: PPUSH
49570: PPUSH
49571: PPUSH
49572: PPUSH
49573: PPUSH
// result := false ;
49574: LD_ADDR_VAR 0 6
49578: PUSH
49579: LD_INT 0
49581: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49582: LD_VAR 0 1
49586: NOT
49587: PUSH
49588: LD_VAR 0 1
49592: PPUSH
49593: CALL_OW 266
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: IN
49608: NOT
49609: OR
49610: PUSH
49611: LD_VAR 0 2
49615: NOT
49616: OR
49617: PUSH
49618: LD_VAR 0 5
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: LD_INT 2
49631: PUSH
49632: LD_INT 3
49634: PUSH
49635: LD_INT 4
49637: PUSH
49638: LD_INT 5
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: IN
49649: NOT
49650: OR
49651: PUSH
49652: LD_VAR 0 3
49656: PPUSH
49657: LD_VAR 0 4
49661: PPUSH
49662: CALL_OW 488
49666: NOT
49667: OR
49668: IFFALSE 49672
// exit ;
49670: GO 50389
// pom := GetBase ( depot ) ;
49672: LD_ADDR_VAR 0 10
49676: PUSH
49677: LD_VAR 0 1
49681: PPUSH
49682: CALL_OW 274
49686: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49687: LD_ADDR_VAR 0 11
49691: PUSH
49692: LD_VAR 0 2
49696: PPUSH
49697: LD_VAR 0 1
49701: PPUSH
49702: CALL_OW 248
49706: PPUSH
49707: CALL_OW 450
49711: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49712: LD_VAR 0 10
49716: PPUSH
49717: LD_INT 1
49719: PPUSH
49720: CALL_OW 275
49724: PUSH
49725: LD_VAR 0 11
49729: PUSH
49730: LD_INT 1
49732: ARRAY
49733: GREATEREQUAL
49734: PUSH
49735: LD_VAR 0 10
49739: PPUSH
49740: LD_INT 2
49742: PPUSH
49743: CALL_OW 275
49747: PUSH
49748: LD_VAR 0 11
49752: PUSH
49753: LD_INT 2
49755: ARRAY
49756: GREATEREQUAL
49757: AND
49758: PUSH
49759: LD_VAR 0 10
49763: PPUSH
49764: LD_INT 3
49766: PPUSH
49767: CALL_OW 275
49771: PUSH
49772: LD_VAR 0 11
49776: PUSH
49777: LD_INT 3
49779: ARRAY
49780: GREATEREQUAL
49781: AND
49782: NOT
49783: IFFALSE 49787
// exit ;
49785: GO 50389
// if GetBType ( depot ) = b_depot then
49787: LD_VAR 0 1
49791: PPUSH
49792: CALL_OW 266
49796: PUSH
49797: LD_INT 0
49799: EQUAL
49800: IFFALSE 49812
// dist := 28 else
49802: LD_ADDR_VAR 0 14
49806: PUSH
49807: LD_INT 28
49809: ST_TO_ADDR
49810: GO 49820
// dist := 36 ;
49812: LD_ADDR_VAR 0 14
49816: PUSH
49817: LD_INT 36
49819: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49820: LD_VAR 0 1
49824: PPUSH
49825: LD_VAR 0 3
49829: PPUSH
49830: LD_VAR 0 4
49834: PPUSH
49835: CALL_OW 297
49839: PUSH
49840: LD_VAR 0 14
49844: GREATER
49845: IFFALSE 49849
// exit ;
49847: GO 50389
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49849: LD_ADDR_VAR 0 12
49853: PUSH
49854: LD_VAR 0 2
49858: PPUSH
49859: LD_VAR 0 3
49863: PPUSH
49864: LD_VAR 0 4
49868: PPUSH
49869: LD_VAR 0 5
49873: PPUSH
49874: LD_VAR 0 1
49878: PPUSH
49879: CALL_OW 248
49883: PPUSH
49884: LD_INT 0
49886: PPUSH
49887: CALL 50394 0 6
49891: ST_TO_ADDR
// if not hexes then
49892: LD_VAR 0 12
49896: NOT
49897: IFFALSE 49901
// exit ;
49899: GO 50389
// hex := GetHexInfo ( x , y ) ;
49901: LD_ADDR_VAR 0 15
49905: PUSH
49906: LD_VAR 0 3
49910: PPUSH
49911: LD_VAR 0 4
49915: PPUSH
49916: CALL_OW 546
49920: ST_TO_ADDR
// if hex [ 1 ] then
49921: LD_VAR 0 15
49925: PUSH
49926: LD_INT 1
49928: ARRAY
49929: IFFALSE 49933
// exit ;
49931: GO 50389
// height := hex [ 2 ] ;
49933: LD_ADDR_VAR 0 13
49937: PUSH
49938: LD_VAR 0 15
49942: PUSH
49943: LD_INT 2
49945: ARRAY
49946: ST_TO_ADDR
// for i = 1 to hexes do
49947: LD_ADDR_VAR 0 7
49951: PUSH
49952: DOUBLE
49953: LD_INT 1
49955: DEC
49956: ST_TO_ADDR
49957: LD_VAR 0 12
49961: PUSH
49962: FOR_TO
49963: IFFALSE 50293
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49965: LD_VAR 0 12
49969: PUSH
49970: LD_VAR 0 7
49974: ARRAY
49975: PUSH
49976: LD_INT 1
49978: ARRAY
49979: PPUSH
49980: LD_VAR 0 12
49984: PUSH
49985: LD_VAR 0 7
49989: ARRAY
49990: PUSH
49991: LD_INT 2
49993: ARRAY
49994: PPUSH
49995: CALL_OW 488
49999: NOT
50000: PUSH
50001: LD_VAR 0 12
50005: PUSH
50006: LD_VAR 0 7
50010: ARRAY
50011: PUSH
50012: LD_INT 1
50014: ARRAY
50015: PPUSH
50016: LD_VAR 0 12
50020: PUSH
50021: LD_VAR 0 7
50025: ARRAY
50026: PUSH
50027: LD_INT 2
50029: ARRAY
50030: PPUSH
50031: CALL_OW 428
50035: PUSH
50036: LD_INT 0
50038: GREATER
50039: OR
50040: PUSH
50041: LD_VAR 0 12
50045: PUSH
50046: LD_VAR 0 7
50050: ARRAY
50051: PUSH
50052: LD_INT 1
50054: ARRAY
50055: PPUSH
50056: LD_VAR 0 12
50060: PUSH
50061: LD_VAR 0 7
50065: ARRAY
50066: PUSH
50067: LD_INT 2
50069: ARRAY
50070: PPUSH
50071: CALL_OW 351
50075: OR
50076: IFFALSE 50082
// exit ;
50078: POP
50079: POP
50080: GO 50389
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50082: LD_ADDR_VAR 0 8
50086: PUSH
50087: LD_VAR 0 12
50091: PUSH
50092: LD_VAR 0 7
50096: ARRAY
50097: PUSH
50098: LD_INT 1
50100: ARRAY
50101: PPUSH
50102: LD_VAR 0 12
50106: PUSH
50107: LD_VAR 0 7
50111: ARRAY
50112: PUSH
50113: LD_INT 2
50115: ARRAY
50116: PPUSH
50117: CALL_OW 546
50121: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50122: LD_VAR 0 8
50126: PUSH
50127: LD_INT 1
50129: ARRAY
50130: PUSH
50131: LD_VAR 0 8
50135: PUSH
50136: LD_INT 2
50138: ARRAY
50139: PUSH
50140: LD_VAR 0 13
50144: PUSH
50145: LD_INT 2
50147: PLUS
50148: GREATER
50149: OR
50150: PUSH
50151: LD_VAR 0 8
50155: PUSH
50156: LD_INT 2
50158: ARRAY
50159: PUSH
50160: LD_VAR 0 13
50164: PUSH
50165: LD_INT 2
50167: MINUS
50168: LESS
50169: OR
50170: PUSH
50171: LD_VAR 0 8
50175: PUSH
50176: LD_INT 3
50178: ARRAY
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: LD_INT 8
50185: PUSH
50186: LD_INT 9
50188: PUSH
50189: LD_INT 10
50191: PUSH
50192: LD_INT 11
50194: PUSH
50195: LD_INT 12
50197: PUSH
50198: LD_INT 13
50200: PUSH
50201: LD_INT 16
50203: PUSH
50204: LD_INT 17
50206: PUSH
50207: LD_INT 18
50209: PUSH
50210: LD_INT 19
50212: PUSH
50213: LD_INT 20
50215: PUSH
50216: LD_INT 21
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: IN
50234: NOT
50235: OR
50236: PUSH
50237: LD_VAR 0 8
50241: PUSH
50242: LD_INT 5
50244: ARRAY
50245: NOT
50246: OR
50247: PUSH
50248: LD_VAR 0 8
50252: PUSH
50253: LD_INT 6
50255: ARRAY
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: LD_INT 7
50265: PUSH
50266: LD_INT 9
50268: PUSH
50269: LD_INT 10
50271: PUSH
50272: LD_INT 11
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: IN
50283: NOT
50284: OR
50285: IFFALSE 50291
// exit ;
50287: POP
50288: POP
50289: GO 50389
// end ;
50291: GO 49962
50293: POP
50294: POP
// side := GetSide ( depot ) ;
50295: LD_ADDR_VAR 0 9
50299: PUSH
50300: LD_VAR 0 1
50304: PPUSH
50305: CALL_OW 255
50309: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50310: LD_VAR 0 9
50314: PPUSH
50315: LD_VAR 0 3
50319: PPUSH
50320: LD_VAR 0 4
50324: PPUSH
50325: LD_INT 20
50327: PPUSH
50328: CALL 43043 0 4
50332: PUSH
50333: LD_INT 4
50335: ARRAY
50336: IFFALSE 50340
// exit ;
50338: GO 50389
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50340: LD_VAR 0 2
50344: PUSH
50345: LD_INT 29
50347: PUSH
50348: LD_INT 30
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: IN
50355: PUSH
50356: LD_VAR 0 3
50360: PPUSH
50361: LD_VAR 0 4
50365: PPUSH
50366: LD_VAR 0 9
50370: PPUSH
50371: CALL_OW 440
50375: NOT
50376: AND
50377: IFFALSE 50381
// exit ;
50379: GO 50389
// result := true ;
50381: LD_ADDR_VAR 0 6
50385: PUSH
50386: LD_INT 1
50388: ST_TO_ADDR
// end ;
50389: LD_VAR 0 6
50393: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
50394: LD_INT 0
50396: PPUSH
50397: PPUSH
50398: PPUSH
50399: PPUSH
50400: PPUSH
50401: PPUSH
50402: PPUSH
50403: PPUSH
50404: PPUSH
50405: PPUSH
50406: PPUSH
50407: PPUSH
50408: PPUSH
50409: PPUSH
50410: PPUSH
50411: PPUSH
50412: PPUSH
50413: PPUSH
50414: PPUSH
50415: PPUSH
50416: PPUSH
50417: PPUSH
50418: PPUSH
50419: PPUSH
50420: PPUSH
50421: PPUSH
50422: PPUSH
50423: PPUSH
50424: PPUSH
50425: PPUSH
50426: PPUSH
50427: PPUSH
50428: PPUSH
50429: PPUSH
50430: PPUSH
50431: PPUSH
50432: PPUSH
50433: PPUSH
50434: PPUSH
50435: PPUSH
50436: PPUSH
50437: PPUSH
50438: PPUSH
50439: PPUSH
50440: PPUSH
50441: PPUSH
50442: PPUSH
50443: PPUSH
50444: PPUSH
50445: PPUSH
50446: PPUSH
50447: PPUSH
50448: PPUSH
50449: PPUSH
50450: PPUSH
50451: PPUSH
50452: PPUSH
50453: PPUSH
// result = [ ] ;
50454: LD_ADDR_VAR 0 7
50458: PUSH
50459: EMPTY
50460: ST_TO_ADDR
// temp_list = [ ] ;
50461: LD_ADDR_VAR 0 9
50465: PUSH
50466: EMPTY
50467: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50468: LD_VAR 0 4
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: LD_INT 3
50484: PUSH
50485: LD_INT 4
50487: PUSH
50488: LD_INT 5
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: IN
50499: NOT
50500: PUSH
50501: LD_VAR 0 1
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: IN
50516: PUSH
50517: LD_VAR 0 5
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: LD_INT 3
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: IN
50536: NOT
50537: AND
50538: OR
50539: IFFALSE 50543
// exit ;
50541: GO 68934
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50543: LD_VAR 0 1
50547: PUSH
50548: LD_INT 6
50550: PUSH
50551: LD_INT 7
50553: PUSH
50554: LD_INT 8
50556: PUSH
50557: LD_INT 13
50559: PUSH
50560: LD_INT 12
50562: PUSH
50563: LD_INT 15
50565: PUSH
50566: LD_INT 11
50568: PUSH
50569: LD_INT 14
50571: PUSH
50572: LD_INT 10
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: IN
50586: IFFALSE 50596
// btype = b_lab ;
50588: LD_ADDR_VAR 0 1
50592: PUSH
50593: LD_INT 6
50595: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50596: LD_VAR 0 6
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: LIST
50614: IN
50615: NOT
50616: PUSH
50617: LD_VAR 0 1
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: LD_INT 3
50633: PUSH
50634: LD_INT 6
50636: PUSH
50637: LD_INT 36
50639: PUSH
50640: LD_INT 4
50642: PUSH
50643: LD_INT 5
50645: PUSH
50646: LD_INT 31
50648: PUSH
50649: LD_INT 32
50651: PUSH
50652: LD_INT 33
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: IN
50668: NOT
50669: PUSH
50670: LD_VAR 0 6
50674: PUSH
50675: LD_INT 1
50677: EQUAL
50678: AND
50679: OR
50680: PUSH
50681: LD_VAR 0 1
50685: PUSH
50686: LD_INT 2
50688: PUSH
50689: LD_INT 3
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: IN
50696: NOT
50697: PUSH
50698: LD_VAR 0 6
50702: PUSH
50703: LD_INT 2
50705: EQUAL
50706: AND
50707: OR
50708: IFFALSE 50718
// mode = 0 ;
50710: LD_ADDR_VAR 0 6
50714: PUSH
50715: LD_INT 0
50717: ST_TO_ADDR
// case mode of 0 :
50718: LD_VAR 0 6
50722: PUSH
50723: LD_INT 0
50725: DOUBLE
50726: EQUAL
50727: IFTRUE 50731
50729: GO 62184
50731: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50732: LD_ADDR_VAR 0 11
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 3
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: LD_INT 3
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50925: LD_ADDR_VAR 0 12
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 2
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 2
51048: NEG
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: NEG
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 3
51082: NEG
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 3
51093: NEG
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51121: LD_ADDR_VAR 0 13
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: LD_INT 2
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 2
51224: PUSH
51225: LD_INT 2
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 2
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: NEG
51257: PUSH
51258: LD_INT 2
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: LD_INT 3
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 3
51280: NEG
51281: PUSH
51282: LD_INT 2
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 3
51292: NEG
51293: PUSH
51294: LD_INT 3
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51320: LD_ADDR_VAR 0 14
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 2
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: LD_INT 2
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 3
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 3
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: LD_INT 2
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51516: LD_ADDR_VAR 0 15
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 2
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 3
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 3
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51709: LD_ADDR_VAR 0 16
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 1
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 2
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: NEG
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 2
51844: NEG
51845: PUSH
51846: LD_INT 2
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: PUSH
51857: LD_INT 2
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 3
51866: PUSH
51867: LD_INT 3
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: LD_INT 3
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51902: LD_ADDR_VAR 0 17
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: LD_INT 2
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 2
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: NEG
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52132: LD_ADDR_VAR 0 18
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: LD_INT 2
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 2
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 2
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 2
52308: NEG
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 2
52319: NEG
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 2
52331: NEG
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52362: LD_ADDR_VAR 0 19
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: LD_INT 2
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: LD_INT 2
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: LD_INT 2
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 2
52549: NEG
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 2
52561: NEG
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52592: LD_ADDR_VAR 0 20
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: LD_INT 2
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: LD_INT 2
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 2
52779: NEG
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 2
52791: NEG
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52822: LD_ADDR_VAR 0 21
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: LD_INT 2
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 2
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 2
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: LD_INT 2
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 2
52998: NEG
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53052: LD_ADDR_VAR 0 22
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 2
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 2
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 2
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 2
53251: NEG
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53282: LD_ADDR_VAR 0 23
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 2
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 2
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: NEG
53494: PUSH
53495: LD_INT 3
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 3
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 2
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53562: LD_ADDR_VAR 0 24
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 2
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 2
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 2
53749: NEG
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 2
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 3
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 3
53805: PUSH
53806: LD_INT 2
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53838: LD_ADDR_VAR 0 25
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: LD_INT 2
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 2
54037: NEG
54038: PUSH
54039: LD_INT 2
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 3
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 3
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 2
54069: PUSH
54070: LD_INT 3
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: LD_INT 3
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54112: LD_ADDR_VAR 0 26
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 2
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: NEG
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: LD_INT 3
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 3
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: LD_INT 2
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 2
54354: NEG
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54388: LD_ADDR_VAR 0 27
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 2
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 2
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 2
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: LD_INT 2
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: LD_INT 2
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 3
54621: NEG
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54668: LD_ADDR_VAR 0 28
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: LD_INT 2
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 2
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 2
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 2
54844: NEG
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: LD_INT 2
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: LD_INT 3
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: LD_INT 3
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 3
54903: NEG
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 3
54915: NEG
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54950: LD_ADDR_VAR 0 29
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 2
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 2
55128: NEG
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: LD_INT 3
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 3
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: LD_INT 3
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 3
55194: NEG
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55229: LD_ADDR_VAR 0 30
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: LD_INT 2
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 2
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: LD_INT 2
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 2
55395: NEG
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: LD_INT 3
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 3
55441: PUSH
55442: LD_INT 2
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: LD_INT 3
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 2
55461: NEG
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 3
55472: NEG
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55507: LD_ADDR_VAR 0 31
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 2
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 2
55672: NEG
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: NEG
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: NEG
55697: PUSH
55698: LD_INT 3
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 2
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 3
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: LD_INT 3
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 3
55750: NEG
55751: PUSH
55752: LD_INT 2
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55785: LD_ADDR_VAR 0 32
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: LD_INT 2
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: LD_INT 2
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 2
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: LD_INT 2
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 2
55951: NEG
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: LD_INT 3
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 3
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 2
56007: PUSH
56008: LD_INT 3
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 2
56017: NEG
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 3
56028: NEG
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56063: LD_ADDR_VAR 0 33
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: LD_INT 1
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: LD_INT 2
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 2
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: NEG
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 2
56229: NEG
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 2
56253: NEG
56254: PUSH
56255: LD_INT 3
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 3
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: LD_INT 3
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 3
56307: NEG
56308: PUSH
56309: LD_INT 2
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56342: LD_ADDR_VAR 0 34
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: LD_INT 2
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: LD_INT 2
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 2
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 2
56467: PUSH
56468: LD_INT 2
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: NEG
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: NEG
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 2
56521: NEG
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: LD_INT 3
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: LD_INT 2
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 3
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 2
56566: PUSH
56567: LD_INT 3
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 2
56576: NEG
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 3
56587: NEG
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56622: LD_ADDR_VAR 0 35
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 1
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: NEG
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56734: LD_ADDR_VAR 0 36
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56846: LD_ADDR_VAR 0 37
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 1
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: LD_INT 1
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56958: LD_ADDR_VAR 0 38
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 2
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: NEG
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57070: LD_ADDR_VAR 0 39
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: LD_INT 2
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57182: LD_ADDR_VAR 0 40
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57294: LD_ADDR_VAR 0 41
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: LD_INT 2
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 2
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 2
57418: PUSH
57419: LD_INT 2
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 1
57438: NEG
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 2
57449: NEG
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: NEG
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 2
57484: NEG
57485: PUSH
57486: LD_INT 3
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 2
57496: PUSH
57497: LD_INT 1
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 3
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 3
57517: PUSH
57518: LD_INT 1
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 3
57527: PUSH
57528: LD_INT 2
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 3
57537: PUSH
57538: LD_INT 3
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: PUSH
57548: LD_INT 3
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: NEG
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 3
57568: NEG
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 3
57579: NEG
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 3
57591: NEG
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 3
57603: NEG
57604: PUSH
57605: LD_INT 3
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57644: LD_ADDR_VAR 0 42
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 2
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: LD_INT 2
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 2
57810: NEG
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 2
57822: NEG
57823: PUSH
57824: LD_INT 2
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 2
57834: NEG
57835: PUSH
57836: LD_INT 3
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: LD_INT 3
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: LD_INT 3
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 3
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 3
57890: PUSH
57891: LD_INT 3
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: LD_INT 3
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: LD_INT 3
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: LD_INT 3
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: LD_INT 2
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 3
57941: NEG
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 3
57953: NEG
57954: PUSH
57955: LD_INT 3
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57994: LD_ADDR_VAR 0 43
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: LD_INT 2
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: LD_INT 2
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 2
58160: NEG
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: LD_INT 3
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 3
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: LD_INT 3
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 3
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 3
58290: NEG
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 3
58301: NEG
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58342: LD_ADDR_VAR 0 44
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: LD_INT 2
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 1
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 2
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: LD_INT 2
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 2
58497: NEG
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 2
58508: NEG
58509: PUSH
58510: LD_INT 1
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 2
58520: NEG
58521: PUSH
58522: LD_INT 2
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 2
58532: NEG
58533: PUSH
58534: LD_INT 3
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 3
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 3
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 3
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 3
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 2
58595: PUSH
58596: LD_INT 3
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 3
58616: NEG
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 3
58627: NEG
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 3
58639: NEG
58640: PUSH
58641: LD_INT 2
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 3
58651: NEG
58652: PUSH
58653: LD_INT 3
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58692: LD_ADDR_VAR 0 45
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: LD_INT 2
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 2
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 2
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: LD_INT 2
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 2
58858: NEG
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 2
58870: NEG
58871: PUSH
58872: LD_INT 2
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: LD_INT 3
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: LD_INT 3
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: LD_INT 3
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: LD_INT 2
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 3
58928: PUSH
58929: LD_INT 2
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 3
58938: PUSH
58939: LD_INT 3
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 2
58948: PUSH
58949: LD_INT 3
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: LD_INT 3
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: LD_INT 3
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 3
58989: NEG
58990: PUSH
58991: LD_INT 2
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 3
59001: NEG
59002: PUSH
59003: LD_INT 3
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59042: LD_ADDR_VAR 0 46
59046: PUSH
59047: LD_INT 0
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 2
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 2
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: LD_INT 2
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 2
59208: NEG
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 2
59219: NEG
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: LD_INT 3
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: LD_INT 3
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: LD_INT 2
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 3
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 3
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: LD_INT 3
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: LD_INT 3
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: LD_INT 2
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 2
59327: NEG
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 3
59338: NEG
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 3
59349: NEG
59350: PUSH
59351: LD_INT 1
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59390: LD_ADDR_VAR 0 47
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 1
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: LD_INT 2
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 2
59505: NEG
59506: PUSH
59507: LD_INT 1
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: NEG
59518: PUSH
59519: LD_INT 2
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59541: LD_ADDR_VAR 0 48
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: LD_INT 1
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: LD_INT 1
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: LD_INT 2
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: LD_INT 2
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: LD_INT 1
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 2
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 2
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59688: LD_ADDR_VAR 0 49
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59832: LD_ADDR_VAR 0 50
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 2
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: LD_INT 2
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: LD_INT 2
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: LD_INT 2
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: NEG
59954: PUSH
59955: LD_INT 1
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59976: LD_ADDR_VAR 0 51
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: LD_INT 1
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: LD_INT 2
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: NEG
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 2
60088: NEG
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 2
60099: NEG
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60123: LD_ADDR_VAR 0 52
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 0
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 0
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: LD_INT 2
60208: NEG
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 2
60227: NEG
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 2
60238: NEG
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 2
60250: NEG
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60274: LD_ADDR_VAR 0 53
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: LD_INT 1
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: LD_INT 1
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: LD_INT 2
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: LD_INT 2
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 2
60389: PUSH
60390: LD_INT 0
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 2
60399: PUSH
60400: LD_INT 1
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 2
60409: PUSH
60410: LD_INT 2
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 2
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 2
60450: NEG
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 2
60461: NEG
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 2
60473: NEG
60474: PUSH
60475: LD_INT 2
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60504: LD_ADDR_VAR 0 54
60508: PUSH
60509: LD_INT 0
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: LD_INT 2
60589: NEG
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: LD_INT 2
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: LD_INT 1
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 2
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: LD_INT 2
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: LD_INT 2
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: LD_INT 1
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 2
60680: NEG
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 2
60691: NEG
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 2
60703: NEG
60704: PUSH
60705: LD_INT 2
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60734: LD_ADDR_VAR 0 55
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 1
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: LD_INT 1
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 1
60792: NEG
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: NEG
60816: PUSH
60817: LD_INT 2
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: LD_INT 2
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: LD_INT 1
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 2
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 2
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 2
60869: PUSH
60870: LD_INT 2
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: LD_INT 2
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: LD_INT 2
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 1
60899: NEG
60900: PUSH
60901: LD_INT 1
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 2
60910: NEG
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 2
60921: NEG
60922: PUSH
60923: LD_INT 1
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 2
60933: NEG
60934: PUSH
60935: LD_INT 2
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60964: LD_ADDR_VAR 0 56
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: LD_INT 1
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: LD_INT 1
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 1
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 1
61045: NEG
61046: PUSH
61047: LD_INT 2
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: LD_INT 2
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 1
61068: PUSH
61069: LD_INT 1
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 2
61079: PUSH
61080: LD_INT 0
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 2
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: LD_INT 2
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: LD_INT 2
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: LD_INT 2
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 2
61140: NEG
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 2
61151: NEG
61152: PUSH
61153: LD_INT 1
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 2
61163: NEG
61164: PUSH
61165: LD_INT 2
61167: NEG
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61194: LD_ADDR_VAR 0 57
61198: PUSH
61199: LD_INT 0
61201: PUSH
61202: LD_INT 0
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: NEG
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 1
61263: NEG
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 1
61275: NEG
61276: PUSH
61277: LD_INT 2
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 0
61287: PUSH
61288: LD_INT 2
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 2
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 2
61329: PUSH
61330: LD_INT 2
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: LD_INT 2
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 2
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 2
61381: NEG
61382: PUSH
61383: LD_INT 1
61385: NEG
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 2
61393: NEG
61394: PUSH
61395: LD_INT 2
61397: NEG
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61424: LD_ADDR_VAR 0 58
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: LD_INT 0
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 1
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 1
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: LD_INT 1
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: NEG
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 1
61505: NEG
61506: PUSH
61507: LD_INT 2
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: LD_INT 1
61531: NEG
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 2
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 2
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 2
61559: PUSH
61560: LD_INT 2
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: LD_INT 2
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 1
61589: NEG
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 2
61600: NEG
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 2
61611: NEG
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: LD_INT 2
61627: NEG
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61654: LD_ADDR_VAR 0 59
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 1
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 1
61712: NEG
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61742: LD_ADDR_VAR 0 60
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: LD_INT 1
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: LD_INT 1
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 1
61811: NEG
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61830: LD_ADDR_VAR 0 61
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: LD_INT 1
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: PUSH
61869: LD_INT 1
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 1
61899: NEG
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61918: LD_ADDR_VAR 0 62
61922: PUSH
61923: LD_INT 0
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 0
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: NEG
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62006: LD_ADDR_VAR 0 63
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: LD_INT 1
62026: NEG
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 1
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 1
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: LD_INT 1
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: LD_INT 1
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62094: LD_ADDR_VAR 0 64
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: LD_INT 0
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 1
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: LD_INT 1
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: NEG
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: ST_TO_ADDR
// end ; 1 :
62182: GO 68079
62184: LD_INT 1
62186: DOUBLE
62187: EQUAL
62188: IFTRUE 62192
62190: GO 64815
62192: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62193: LD_ADDR_VAR 0 11
62197: PUSH
62198: LD_INT 1
62200: NEG
62201: PUSH
62202: LD_INT 3
62204: NEG
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: LD_INT 3
62215: NEG
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 1
62223: PUSH
62224: LD_INT 2
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: LIST
62236: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62237: LD_ADDR_VAR 0 12
62241: PUSH
62242: LD_INT 2
62244: PUSH
62245: LD_INT 1
62247: NEG
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 3
62255: PUSH
62256: LD_INT 0
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 3
62265: PUSH
62266: LD_INT 1
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: LIST
62277: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62278: LD_ADDR_VAR 0 13
62282: PUSH
62283: LD_INT 3
62285: PUSH
62286: LD_INT 2
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 3
62295: PUSH
62296: LD_INT 3
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 2
62305: PUSH
62306: LD_INT 3
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: LIST
62317: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62318: LD_ADDR_VAR 0 14
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: LD_INT 3
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: LD_INT 3
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 1
62345: NEG
62346: PUSH
62347: LD_INT 2
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: LIST
62358: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62359: LD_ADDR_VAR 0 15
62363: PUSH
62364: LD_INT 2
62366: NEG
62367: PUSH
62368: LD_INT 1
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 3
62377: NEG
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 3
62388: NEG
62389: PUSH
62390: LD_INT 1
62392: NEG
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: LIST
62402: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62403: LD_ADDR_VAR 0 16
62407: PUSH
62408: LD_INT 2
62410: NEG
62411: PUSH
62412: LD_INT 3
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 3
62422: NEG
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 3
62434: NEG
62435: PUSH
62436: LD_INT 3
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: LIST
62448: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62449: LD_ADDR_VAR 0 17
62453: PUSH
62454: LD_INT 1
62456: NEG
62457: PUSH
62458: LD_INT 3
62460: NEG
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: LD_INT 3
62471: NEG
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 1
62479: PUSH
62480: LD_INT 2
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: LIST
62492: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62493: LD_ADDR_VAR 0 18
62497: PUSH
62498: LD_INT 2
62500: PUSH
62501: LD_INT 1
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 3
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 3
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: LIST
62533: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62534: LD_ADDR_VAR 0 19
62538: PUSH
62539: LD_INT 3
62541: PUSH
62542: LD_INT 2
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 3
62551: PUSH
62552: LD_INT 3
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 2
62561: PUSH
62562: LD_INT 3
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: LIST
62573: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62574: LD_ADDR_VAR 0 20
62578: PUSH
62579: LD_INT 1
62581: PUSH
62582: LD_INT 3
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: LD_INT 3
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 1
62601: NEG
62602: PUSH
62603: LD_INT 2
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: LIST
62614: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62615: LD_ADDR_VAR 0 21
62619: PUSH
62620: LD_INT 2
62622: NEG
62623: PUSH
62624: LD_INT 1
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 3
62633: NEG
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 3
62644: NEG
62645: PUSH
62646: LD_INT 1
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: LIST
62658: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62659: LD_ADDR_VAR 0 22
62663: PUSH
62664: LD_INT 2
62666: NEG
62667: PUSH
62668: LD_INT 3
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 3
62678: NEG
62679: PUSH
62680: LD_INT 2
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 3
62690: NEG
62691: PUSH
62692: LD_INT 3
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: LIST
62704: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62705: LD_ADDR_VAR 0 23
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: LD_INT 3
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: LD_INT 4
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: LD_INT 3
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: LIST
62748: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62749: LD_ADDR_VAR 0 24
62753: PUSH
62754: LD_INT 3
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 3
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 4
62777: PUSH
62778: LD_INT 1
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: LIST
62789: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62790: LD_ADDR_VAR 0 25
62794: PUSH
62795: LD_INT 3
62797: PUSH
62798: LD_INT 3
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 4
62807: PUSH
62808: LD_INT 3
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 3
62817: PUSH
62818: LD_INT 4
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: LIST
62829: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62830: LD_ADDR_VAR 0 26
62834: PUSH
62835: LD_INT 0
62837: PUSH
62838: LD_INT 3
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 1
62847: PUSH
62848: LD_INT 4
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 1
62857: NEG
62858: PUSH
62859: LD_INT 3
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: LIST
62870: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62871: LD_ADDR_VAR 0 27
62875: PUSH
62876: LD_INT 3
62878: NEG
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 3
62889: NEG
62890: PUSH
62891: LD_INT 1
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 4
62900: NEG
62901: PUSH
62902: LD_INT 1
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: LIST
62914: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62915: LD_ADDR_VAR 0 28
62919: PUSH
62920: LD_INT 3
62922: NEG
62923: PUSH
62924: LD_INT 3
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 3
62934: NEG
62935: PUSH
62936: LD_INT 4
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 4
62946: NEG
62947: PUSH
62948: LD_INT 3
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: LIST
62960: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62961: LD_ADDR_VAR 0 29
62965: PUSH
62966: LD_INT 1
62968: NEG
62969: PUSH
62970: LD_INT 3
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: LD_INT 3
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 1
62991: PUSH
62992: LD_INT 2
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: NEG
63003: PUSH
63004: LD_INT 4
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 0
63014: PUSH
63015: LD_INT 4
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 1
63025: PUSH
63026: LD_INT 3
63028: NEG
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: NEG
63037: PUSH
63038: LD_INT 5
63040: NEG
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 0
63048: PUSH
63049: LD_INT 5
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 1
63059: PUSH
63060: LD_INT 4
63062: NEG
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 1
63070: NEG
63071: PUSH
63072: LD_INT 6
63074: NEG
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: LD_INT 6
63085: NEG
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: PUSH
63094: LD_INT 5
63096: NEG
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63116: LD_ADDR_VAR 0 30
63120: PUSH
63121: LD_INT 2
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 3
63134: PUSH
63135: LD_INT 0
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 3
63144: PUSH
63145: LD_INT 1
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 3
63154: PUSH
63155: LD_INT 1
63157: NEG
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 4
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 4
63175: PUSH
63176: LD_INT 1
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 4
63185: PUSH
63186: LD_INT 1
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 5
63196: PUSH
63197: LD_INT 0
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 5
63206: PUSH
63207: LD_INT 1
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 5
63216: PUSH
63217: LD_INT 1
63219: NEG
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 6
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 6
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63259: LD_ADDR_VAR 0 31
63263: PUSH
63264: LD_INT 3
63266: PUSH
63267: LD_INT 2
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 3
63276: PUSH
63277: LD_INT 3
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 2
63286: PUSH
63287: LD_INT 3
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 4
63296: PUSH
63297: LD_INT 3
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 4
63306: PUSH
63307: LD_INT 4
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 3
63316: PUSH
63317: LD_INT 4
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 5
63326: PUSH
63327: LD_INT 4
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 5
63336: PUSH
63337: LD_INT 5
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 4
63346: PUSH
63347: LD_INT 5
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 6
63356: PUSH
63357: LD_INT 5
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 6
63366: PUSH
63367: LD_INT 6
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 5
63376: PUSH
63377: LD_INT 6
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63398: LD_ADDR_VAR 0 32
63402: PUSH
63403: LD_INT 1
63405: PUSH
63406: LD_INT 3
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: LD_INT 3
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 1
63425: NEG
63426: PUSH
63427: LD_INT 2
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 1
63436: PUSH
63437: LD_INT 4
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: LD_INT 4
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 1
63456: NEG
63457: PUSH
63458: LD_INT 3
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: LD_INT 5
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: LD_INT 5
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 1
63487: NEG
63488: PUSH
63489: LD_INT 4
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: PUSH
63499: LD_INT 6
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 0
63508: PUSH
63509: LD_INT 6
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 1
63518: NEG
63519: PUSH
63520: LD_INT 5
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63541: LD_ADDR_VAR 0 33
63545: PUSH
63546: LD_INT 2
63548: NEG
63549: PUSH
63550: LD_INT 1
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 3
63559: NEG
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 3
63570: NEG
63571: PUSH
63572: LD_INT 1
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 3
63582: NEG
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 4
63593: NEG
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 4
63604: NEG
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 4
63616: NEG
63617: PUSH
63618: LD_INT 1
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 5
63627: NEG
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 5
63638: NEG
63639: PUSH
63640: LD_INT 1
63642: NEG
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 5
63650: NEG
63651: PUSH
63652: LD_INT 1
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 6
63661: NEG
63662: PUSH
63663: LD_INT 0
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 6
63672: NEG
63673: PUSH
63674: LD_INT 1
63676: NEG
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63696: LD_ADDR_VAR 0 34
63700: PUSH
63701: LD_INT 2
63703: NEG
63704: PUSH
63705: LD_INT 3
63707: NEG
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 3
63715: NEG
63716: PUSH
63717: LD_INT 2
63719: NEG
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 3
63727: NEG
63728: PUSH
63729: LD_INT 3
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 3
63739: NEG
63740: PUSH
63741: LD_INT 4
63743: NEG
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 4
63751: NEG
63752: PUSH
63753: LD_INT 3
63755: NEG
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 4
63763: NEG
63764: PUSH
63765: LD_INT 4
63767: NEG
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 4
63775: NEG
63776: PUSH
63777: LD_INT 5
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 5
63787: NEG
63788: PUSH
63789: LD_INT 4
63791: NEG
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 5
63799: NEG
63800: PUSH
63801: LD_INT 5
63803: NEG
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 5
63811: NEG
63812: PUSH
63813: LD_INT 6
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 6
63823: NEG
63824: PUSH
63825: LD_INT 5
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 6
63835: NEG
63836: PUSH
63837: LD_INT 6
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63859: LD_ADDR_VAR 0 41
63863: PUSH
63864: LD_INT 0
63866: PUSH
63867: LD_INT 2
63869: NEG
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 1
63877: NEG
63878: PUSH
63879: LD_INT 3
63881: NEG
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 1
63889: PUSH
63890: LD_INT 2
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: LIST
63902: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63903: LD_ADDR_VAR 0 42
63907: PUSH
63908: LD_INT 2
63910: PUSH
63911: LD_INT 0
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 2
63920: PUSH
63921: LD_INT 1
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 3
63931: PUSH
63932: LD_INT 1
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: LIST
63943: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63944: LD_ADDR_VAR 0 43
63948: PUSH
63949: LD_INT 2
63951: PUSH
63952: LD_INT 2
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 3
63961: PUSH
63962: LD_INT 2
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 2
63971: PUSH
63972: LD_INT 3
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: LIST
63983: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63984: LD_ADDR_VAR 0 44
63988: PUSH
63989: LD_INT 0
63991: PUSH
63992: LD_INT 2
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: LD_INT 3
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: NEG
64012: PUSH
64013: LD_INT 2
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: LIST
64024: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64025: LD_ADDR_VAR 0 45
64029: PUSH
64030: LD_INT 2
64032: NEG
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 2
64043: NEG
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 3
64054: NEG
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: LIST
64068: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64069: LD_ADDR_VAR 0 46
64073: PUSH
64074: LD_INT 2
64076: NEG
64077: PUSH
64078: LD_INT 2
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 2
64088: NEG
64089: PUSH
64090: LD_INT 3
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 3
64100: NEG
64101: PUSH
64102: LD_INT 2
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: LIST
64114: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64115: LD_ADDR_VAR 0 47
64119: PUSH
64120: LD_INT 2
64122: NEG
64123: PUSH
64124: LD_INT 3
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 1
64134: NEG
64135: PUSH
64136: LD_INT 3
64138: NEG
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64148: LD_ADDR_VAR 0 48
64152: PUSH
64153: LD_INT 1
64155: PUSH
64156: LD_INT 2
64158: NEG
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 2
64166: PUSH
64167: LD_INT 1
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64179: LD_ADDR_VAR 0 49
64183: PUSH
64184: LD_INT 3
64186: PUSH
64187: LD_INT 1
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 3
64196: PUSH
64197: LD_INT 2
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64208: LD_ADDR_VAR 0 50
64212: PUSH
64213: LD_INT 2
64215: PUSH
64216: LD_INT 3
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 1
64225: PUSH
64226: LD_INT 3
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64237: LD_ADDR_VAR 0 51
64241: PUSH
64242: LD_INT 1
64244: NEG
64245: PUSH
64246: LD_INT 2
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 2
64255: NEG
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64268: LD_ADDR_VAR 0 52
64272: PUSH
64273: LD_INT 3
64275: NEG
64276: PUSH
64277: LD_INT 1
64279: NEG
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 3
64287: NEG
64288: PUSH
64289: LD_INT 2
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64301: LD_ADDR_VAR 0 53
64305: PUSH
64306: LD_INT 1
64308: NEG
64309: PUSH
64310: LD_INT 3
64312: NEG
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 0
64320: PUSH
64321: LD_INT 3
64323: NEG
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: LD_INT 2
64334: NEG
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: LIST
64344: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64345: LD_ADDR_VAR 0 54
64349: PUSH
64350: LD_INT 2
64352: PUSH
64353: LD_INT 1
64355: NEG
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 3
64363: PUSH
64364: LD_INT 0
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 3
64373: PUSH
64374: LD_INT 1
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: LIST
64385: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64386: LD_ADDR_VAR 0 55
64390: PUSH
64391: LD_INT 3
64393: PUSH
64394: LD_INT 2
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 3
64403: PUSH
64404: LD_INT 3
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 2
64413: PUSH
64414: LD_INT 3
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: LIST
64425: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64426: LD_ADDR_VAR 0 56
64430: PUSH
64431: LD_INT 1
64433: PUSH
64434: LD_INT 3
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: LD_INT 3
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: LD_INT 2
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: LIST
64466: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64467: LD_ADDR_VAR 0 57
64471: PUSH
64472: LD_INT 2
64474: NEG
64475: PUSH
64476: LD_INT 1
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 3
64485: NEG
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 3
64496: NEG
64497: PUSH
64498: LD_INT 1
64500: NEG
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: LIST
64510: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64511: LD_ADDR_VAR 0 58
64515: PUSH
64516: LD_INT 2
64518: NEG
64519: PUSH
64520: LD_INT 3
64522: NEG
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 3
64530: NEG
64531: PUSH
64532: LD_INT 2
64534: NEG
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 3
64542: NEG
64543: PUSH
64544: LD_INT 3
64546: NEG
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: LIST
64556: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64557: LD_ADDR_VAR 0 59
64561: PUSH
64562: LD_INT 1
64564: NEG
64565: PUSH
64566: LD_INT 2
64568: NEG
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 0
64576: PUSH
64577: LD_INT 2
64579: NEG
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: LIST
64600: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64601: LD_ADDR_VAR 0 60
64605: PUSH
64606: LD_INT 1
64608: PUSH
64609: LD_INT 1
64611: NEG
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 2
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 2
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: LIST
64641: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64642: LD_ADDR_VAR 0 61
64646: PUSH
64647: LD_INT 2
64649: PUSH
64650: LD_INT 1
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 2
64659: PUSH
64660: LD_INT 2
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: PUSH
64670: LD_INT 2
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: LIST
64681: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64682: LD_ADDR_VAR 0 62
64686: PUSH
64687: LD_INT 1
64689: PUSH
64690: LD_INT 2
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 0
64699: PUSH
64700: LD_INT 2
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 1
64709: NEG
64710: PUSH
64711: LD_INT 1
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: LIST
64722: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64723: LD_ADDR_VAR 0 63
64727: PUSH
64728: LD_INT 1
64730: NEG
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 2
64741: NEG
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 2
64752: NEG
64753: PUSH
64754: LD_INT 1
64756: NEG
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: LIST
64766: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64767: LD_ADDR_VAR 0 64
64771: PUSH
64772: LD_INT 1
64774: NEG
64775: PUSH
64776: LD_INT 2
64778: NEG
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 2
64786: NEG
64787: PUSH
64788: LD_INT 1
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 2
64798: NEG
64799: PUSH
64800: LD_INT 2
64802: NEG
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: LIST
64812: ST_TO_ADDR
// end ; 2 :
64813: GO 68079
64815: LD_INT 2
64817: DOUBLE
64818: EQUAL
64819: IFTRUE 64823
64821: GO 68078
64823: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64824: LD_ADDR_VAR 0 29
64828: PUSH
64829: LD_INT 4
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 4
64841: PUSH
64842: LD_INT 1
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 5
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 5
64862: PUSH
64863: LD_INT 1
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 4
64872: PUSH
64873: LD_INT 1
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 3
64882: PUSH
64883: LD_INT 0
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 3
64892: PUSH
64893: LD_INT 1
64895: NEG
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 3
64903: PUSH
64904: LD_INT 2
64906: NEG
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 5
64914: PUSH
64915: LD_INT 2
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 3
64924: PUSH
64925: LD_INT 3
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 3
64934: PUSH
64935: LD_INT 2
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 4
64944: PUSH
64945: LD_INT 3
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 4
64954: PUSH
64955: LD_INT 4
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 3
64964: PUSH
64965: LD_INT 4
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 2
64974: PUSH
64975: LD_INT 3
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 2
64984: PUSH
64985: LD_INT 2
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 4
64994: PUSH
64995: LD_INT 2
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 2
65004: PUSH
65005: LD_INT 4
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: LD_INT 4
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: LD_INT 3
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 1
65034: PUSH
65035: LD_INT 4
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: LD_INT 5
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 0
65054: PUSH
65055: LD_INT 5
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 1
65064: NEG
65065: PUSH
65066: LD_INT 4
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 1
65075: NEG
65076: PUSH
65077: LD_INT 3
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 2
65086: PUSH
65087: LD_INT 5
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 2
65096: NEG
65097: PUSH
65098: LD_INT 3
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 3
65107: NEG
65108: PUSH
65109: LD_INT 0
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 3
65118: NEG
65119: PUSH
65120: LD_INT 1
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 2
65130: NEG
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 2
65141: NEG
65142: PUSH
65143: LD_INT 1
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 3
65152: NEG
65153: PUSH
65154: LD_INT 1
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 4
65163: NEG
65164: PUSH
65165: LD_INT 0
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 4
65174: NEG
65175: PUSH
65176: LD_INT 1
65178: NEG
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 4
65186: NEG
65187: PUSH
65188: LD_INT 2
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 2
65198: NEG
65199: PUSH
65200: LD_INT 2
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 4
65209: NEG
65210: PUSH
65211: LD_INT 4
65213: NEG
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 4
65221: NEG
65222: PUSH
65223: LD_INT 5
65225: NEG
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 3
65233: NEG
65234: PUSH
65235: LD_INT 4
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 3
65245: NEG
65246: PUSH
65247: LD_INT 3
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 4
65257: NEG
65258: PUSH
65259: LD_INT 3
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 5
65269: NEG
65270: PUSH
65271: LD_INT 4
65273: NEG
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 5
65281: NEG
65282: PUSH
65283: LD_INT 5
65285: NEG
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 3
65293: NEG
65294: PUSH
65295: LD_INT 5
65297: NEG
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 5
65305: NEG
65306: PUSH
65307: LD_INT 3
65309: NEG
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65362: LD_ADDR_VAR 0 30
65366: PUSH
65367: LD_INT 4
65369: PUSH
65370: LD_INT 4
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 4
65379: PUSH
65380: LD_INT 3
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 5
65389: PUSH
65390: LD_INT 4
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 5
65399: PUSH
65400: LD_INT 5
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 4
65409: PUSH
65410: LD_INT 5
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 3
65419: PUSH
65420: LD_INT 4
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 3
65429: PUSH
65430: LD_INT 3
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 5
65439: PUSH
65440: LD_INT 3
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 3
65449: PUSH
65450: LD_INT 5
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: LD_INT 3
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 0
65469: PUSH
65470: LD_INT 2
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 1
65479: PUSH
65480: LD_INT 3
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: LD_INT 4
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: LD_INT 4
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 1
65509: NEG
65510: PUSH
65511: LD_INT 3
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 1
65520: NEG
65521: PUSH
65522: LD_INT 2
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 2
65531: PUSH
65532: LD_INT 4
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 2
65541: NEG
65542: PUSH
65543: LD_INT 2
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 4
65552: NEG
65553: PUSH
65554: LD_INT 0
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 4
65563: NEG
65564: PUSH
65565: LD_INT 1
65567: NEG
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 3
65575: NEG
65576: PUSH
65577: LD_INT 0
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 3
65586: NEG
65587: PUSH
65588: LD_INT 1
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 4
65597: NEG
65598: PUSH
65599: LD_INT 1
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 5
65608: NEG
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 5
65619: NEG
65620: PUSH
65621: LD_INT 1
65623: NEG
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 5
65631: NEG
65632: PUSH
65633: LD_INT 2
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 3
65643: NEG
65644: PUSH
65645: LD_INT 2
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 3
65654: NEG
65655: PUSH
65656: LD_INT 3
65658: NEG
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 3
65666: NEG
65667: PUSH
65668: LD_INT 4
65670: NEG
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 2
65678: NEG
65679: PUSH
65680: LD_INT 3
65682: NEG
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 2
65690: NEG
65691: PUSH
65692: LD_INT 2
65694: NEG
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 3
65702: NEG
65703: PUSH
65704: LD_INT 2
65706: NEG
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 4
65714: NEG
65715: PUSH
65716: LD_INT 3
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 4
65726: NEG
65727: PUSH
65728: LD_INT 4
65730: NEG
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 2
65738: NEG
65739: PUSH
65740: LD_INT 4
65742: NEG
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 4
65750: NEG
65751: PUSH
65752: LD_INT 2
65754: NEG
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 0
65762: PUSH
65763: LD_INT 4
65765: NEG
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: LD_INT 5
65776: NEG
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 1
65784: PUSH
65785: LD_INT 4
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 1
65795: PUSH
65796: LD_INT 3
65798: NEG
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 0
65806: PUSH
65807: LD_INT 3
65809: NEG
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 1
65817: NEG
65818: PUSH
65819: LD_INT 4
65821: NEG
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 1
65829: NEG
65830: PUSH
65831: LD_INT 5
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 2
65841: PUSH
65842: LD_INT 3
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 2
65852: NEG
65853: PUSH
65854: LD_INT 5
65856: NEG
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65909: LD_ADDR_VAR 0 31
65913: PUSH
65914: LD_INT 0
65916: PUSH
65917: LD_INT 4
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 0
65926: PUSH
65927: LD_INT 3
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 1
65936: PUSH
65937: LD_INT 4
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 1
65946: PUSH
65947: LD_INT 5
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: LD_INT 5
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 1
65966: NEG
65967: PUSH
65968: LD_INT 4
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 1
65977: NEG
65978: PUSH
65979: LD_INT 3
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 2
65988: PUSH
65989: LD_INT 5
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 2
65998: NEG
65999: PUSH
66000: LD_INT 3
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 3
66009: NEG
66010: PUSH
66011: LD_INT 0
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 3
66020: NEG
66021: PUSH
66022: LD_INT 1
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 2
66032: NEG
66033: PUSH
66034: LD_INT 0
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 2
66043: NEG
66044: PUSH
66045: LD_INT 1
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 3
66054: NEG
66055: PUSH
66056: LD_INT 1
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 4
66065: NEG
66066: PUSH
66067: LD_INT 0
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 4
66076: NEG
66077: PUSH
66078: LD_INT 1
66080: NEG
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 4
66088: NEG
66089: PUSH
66090: LD_INT 2
66092: NEG
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 2
66100: NEG
66101: PUSH
66102: LD_INT 2
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 4
66111: NEG
66112: PUSH
66113: LD_INT 4
66115: NEG
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 4
66123: NEG
66124: PUSH
66125: LD_INT 5
66127: NEG
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 3
66135: NEG
66136: PUSH
66137: LD_INT 4
66139: NEG
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 3
66147: NEG
66148: PUSH
66149: LD_INT 3
66151: NEG
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 4
66159: NEG
66160: PUSH
66161: LD_INT 3
66163: NEG
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 5
66171: NEG
66172: PUSH
66173: LD_INT 4
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 5
66183: NEG
66184: PUSH
66185: LD_INT 5
66187: NEG
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 3
66195: NEG
66196: PUSH
66197: LD_INT 5
66199: NEG
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 5
66207: NEG
66208: PUSH
66209: LD_INT 3
66211: NEG
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 0
66219: PUSH
66220: LD_INT 3
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: LD_INT 4
66233: NEG
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 1
66241: PUSH
66242: LD_INT 3
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 1
66252: PUSH
66253: LD_INT 2
66255: NEG
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 0
66263: PUSH
66264: LD_INT 2
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 1
66274: NEG
66275: PUSH
66276: LD_INT 3
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 1
66286: NEG
66287: PUSH
66288: LD_INT 4
66290: NEG
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 2
66298: PUSH
66299: LD_INT 2
66301: NEG
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 2
66309: NEG
66310: PUSH
66311: LD_INT 4
66313: NEG
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 4
66321: PUSH
66322: LD_INT 0
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 4
66331: PUSH
66332: LD_INT 1
66334: NEG
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 5
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 5
66352: PUSH
66353: LD_INT 1
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 4
66362: PUSH
66363: LD_INT 1
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 3
66372: PUSH
66373: LD_INT 0
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 3
66382: PUSH
66383: LD_INT 1
66385: NEG
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 3
66393: PUSH
66394: LD_INT 2
66396: NEG
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 5
66404: PUSH
66405: LD_INT 2
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66459: LD_ADDR_VAR 0 32
66463: PUSH
66464: LD_INT 4
66466: NEG
66467: PUSH
66468: LD_INT 0
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 4
66477: NEG
66478: PUSH
66479: LD_INT 1
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 3
66489: NEG
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 3
66500: NEG
66501: PUSH
66502: LD_INT 1
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 4
66511: NEG
66512: PUSH
66513: LD_INT 1
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 5
66522: NEG
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 5
66533: NEG
66534: PUSH
66535: LD_INT 1
66537: NEG
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 5
66545: NEG
66546: PUSH
66547: LD_INT 2
66549: NEG
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 3
66557: NEG
66558: PUSH
66559: LD_INT 2
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 3
66568: NEG
66569: PUSH
66570: LD_INT 3
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 3
66580: NEG
66581: PUSH
66582: LD_INT 4
66584: NEG
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 2
66592: NEG
66593: PUSH
66594: LD_INT 3
66596: NEG
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 2
66604: NEG
66605: PUSH
66606: LD_INT 2
66608: NEG
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 3
66616: NEG
66617: PUSH
66618: LD_INT 2
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 4
66628: NEG
66629: PUSH
66630: LD_INT 3
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 4
66640: NEG
66641: PUSH
66642: LD_INT 4
66644: NEG
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 2
66652: NEG
66653: PUSH
66654: LD_INT 4
66656: NEG
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 4
66664: NEG
66665: PUSH
66666: LD_INT 2
66668: NEG
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 0
66676: PUSH
66677: LD_INT 4
66679: NEG
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 0
66687: PUSH
66688: LD_INT 5
66690: NEG
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 1
66698: PUSH
66699: LD_INT 4
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 1
66709: PUSH
66710: LD_INT 3
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 0
66720: PUSH
66721: LD_INT 3
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 1
66731: NEG
66732: PUSH
66733: LD_INT 4
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 1
66743: NEG
66744: PUSH
66745: LD_INT 5
66747: NEG
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 2
66755: PUSH
66756: LD_INT 3
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 2
66766: NEG
66767: PUSH
66768: LD_INT 5
66770: NEG
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 3
66778: PUSH
66779: LD_INT 0
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 3
66788: PUSH
66789: LD_INT 1
66791: NEG
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 4
66799: PUSH
66800: LD_INT 0
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 4
66809: PUSH
66810: LD_INT 1
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 3
66819: PUSH
66820: LD_INT 1
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 2
66829: PUSH
66830: LD_INT 0
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 2
66839: PUSH
66840: LD_INT 1
66842: NEG
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 2
66850: PUSH
66851: LD_INT 2
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 4
66861: PUSH
66862: LD_INT 2
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 4
66871: PUSH
66872: LD_INT 4
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 4
66881: PUSH
66882: LD_INT 3
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 5
66891: PUSH
66892: LD_INT 4
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 5
66901: PUSH
66902: LD_INT 5
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 4
66911: PUSH
66912: LD_INT 5
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 3
66921: PUSH
66922: LD_INT 4
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 3
66931: PUSH
66932: LD_INT 3
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 5
66941: PUSH
66942: LD_INT 3
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 3
66951: PUSH
66952: LD_INT 5
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67006: LD_ADDR_VAR 0 33
67010: PUSH
67011: LD_INT 4
67013: NEG
67014: PUSH
67015: LD_INT 4
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 4
67025: NEG
67026: PUSH
67027: LD_INT 5
67029: NEG
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 3
67037: NEG
67038: PUSH
67039: LD_INT 4
67041: NEG
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 3
67049: NEG
67050: PUSH
67051: LD_INT 3
67053: NEG
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 4
67061: NEG
67062: PUSH
67063: LD_INT 3
67065: NEG
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 5
67073: NEG
67074: PUSH
67075: LD_INT 4
67077: NEG
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 5
67085: NEG
67086: PUSH
67087: LD_INT 5
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 3
67097: NEG
67098: PUSH
67099: LD_INT 5
67101: NEG
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 5
67109: NEG
67110: PUSH
67111: LD_INT 3
67113: NEG
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: LD_INT 3
67124: NEG
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 0
67132: PUSH
67133: LD_INT 4
67135: NEG
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 1
67143: PUSH
67144: LD_INT 3
67146: NEG
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 1
67154: PUSH
67155: LD_INT 2
67157: NEG
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 0
67165: PUSH
67166: LD_INT 2
67168: NEG
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 1
67176: NEG
67177: PUSH
67178: LD_INT 3
67180: NEG
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 1
67188: NEG
67189: PUSH
67190: LD_INT 4
67192: NEG
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 2
67200: PUSH
67201: LD_INT 2
67203: NEG
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 2
67211: NEG
67212: PUSH
67213: LD_INT 4
67215: NEG
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 4
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 4
67233: PUSH
67234: LD_INT 1
67236: NEG
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 5
67244: PUSH
67245: LD_INT 0
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 5
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 4
67264: PUSH
67265: LD_INT 1
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 3
67274: PUSH
67275: LD_INT 0
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 3
67284: PUSH
67285: LD_INT 1
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 3
67295: PUSH
67296: LD_INT 2
67298: NEG
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 5
67306: PUSH
67307: LD_INT 2
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 3
67316: PUSH
67317: LD_INT 3
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 3
67326: PUSH
67327: LD_INT 2
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 4
67336: PUSH
67337: LD_INT 3
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 4
67346: PUSH
67347: LD_INT 4
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 3
67356: PUSH
67357: LD_INT 4
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 2
67366: PUSH
67367: LD_INT 3
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 2
67376: PUSH
67377: LD_INT 2
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 4
67386: PUSH
67387: LD_INT 2
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 2
67396: PUSH
67397: LD_INT 4
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 0
67406: PUSH
67407: LD_INT 4
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 0
67416: PUSH
67417: LD_INT 3
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 1
67426: PUSH
67427: LD_INT 4
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 1
67436: PUSH
67437: LD_INT 5
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: LD_INT 5
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 1
67456: NEG
67457: PUSH
67458: LD_INT 4
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 1
67467: NEG
67468: PUSH
67469: LD_INT 3
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 2
67478: PUSH
67479: LD_INT 5
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 2
67488: NEG
67489: PUSH
67490: LD_INT 3
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67544: LD_ADDR_VAR 0 34
67548: PUSH
67549: LD_INT 0
67551: PUSH
67552: LD_INT 4
67554: NEG
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 0
67562: PUSH
67563: LD_INT 5
67565: NEG
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 1
67573: PUSH
67574: LD_INT 4
67576: NEG
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 1
67584: PUSH
67585: LD_INT 3
67587: NEG
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 0
67595: PUSH
67596: LD_INT 3
67598: NEG
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 1
67606: NEG
67607: PUSH
67608: LD_INT 4
67610: NEG
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 1
67618: NEG
67619: PUSH
67620: LD_INT 5
67622: NEG
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 2
67630: PUSH
67631: LD_INT 3
67633: NEG
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 2
67641: NEG
67642: PUSH
67643: LD_INT 5
67645: NEG
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 3
67653: PUSH
67654: LD_INT 0
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 3
67663: PUSH
67664: LD_INT 1
67666: NEG
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 4
67674: PUSH
67675: LD_INT 0
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 4
67684: PUSH
67685: LD_INT 1
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 3
67694: PUSH
67695: LD_INT 1
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 2
67704: PUSH
67705: LD_INT 0
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 2
67714: PUSH
67715: LD_INT 1
67717: NEG
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 2
67725: PUSH
67726: LD_INT 2
67728: NEG
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 4
67736: PUSH
67737: LD_INT 2
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 4
67746: PUSH
67747: LD_INT 4
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 4
67756: PUSH
67757: LD_INT 3
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 5
67766: PUSH
67767: LD_INT 4
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 5
67776: PUSH
67777: LD_INT 5
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 4
67786: PUSH
67787: LD_INT 5
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 3
67796: PUSH
67797: LD_INT 4
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 3
67806: PUSH
67807: LD_INT 3
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 5
67816: PUSH
67817: LD_INT 3
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 3
67826: PUSH
67827: LD_INT 5
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 0
67836: PUSH
67837: LD_INT 3
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 0
67846: PUSH
67847: LD_INT 2
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 1
67856: PUSH
67857: LD_INT 3
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 1
67866: PUSH
67867: LD_INT 4
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 0
67876: PUSH
67877: LD_INT 4
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 1
67886: NEG
67887: PUSH
67888: LD_INT 3
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 1
67897: NEG
67898: PUSH
67899: LD_INT 2
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 2
67908: PUSH
67909: LD_INT 4
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 2
67918: NEG
67919: PUSH
67920: LD_INT 2
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 4
67929: NEG
67930: PUSH
67931: LD_INT 0
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 4
67940: NEG
67941: PUSH
67942: LD_INT 1
67944: NEG
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 3
67952: NEG
67953: PUSH
67954: LD_INT 0
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 3
67963: NEG
67964: PUSH
67965: LD_INT 1
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 4
67974: NEG
67975: PUSH
67976: LD_INT 1
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 5
67985: NEG
67986: PUSH
67987: LD_INT 0
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 5
67996: NEG
67997: PUSH
67998: LD_INT 1
68000: NEG
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 5
68008: NEG
68009: PUSH
68010: LD_INT 2
68012: NEG
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 3
68020: NEG
68021: PUSH
68022: LD_INT 2
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: ST_TO_ADDR
// end ; end ;
68076: GO 68079
68078: POP
// case btype of b_depot , b_warehouse :
68079: LD_VAR 0 1
68083: PUSH
68084: LD_INT 0
68086: DOUBLE
68087: EQUAL
68088: IFTRUE 68098
68090: LD_INT 1
68092: DOUBLE
68093: EQUAL
68094: IFTRUE 68098
68096: GO 68299
68098: POP
// case nation of nation_american :
68099: LD_VAR 0 5
68103: PUSH
68104: LD_INT 1
68106: DOUBLE
68107: EQUAL
68108: IFTRUE 68112
68110: GO 68168
68112: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
68113: LD_ADDR_VAR 0 9
68117: PUSH
68118: LD_VAR 0 11
68122: PUSH
68123: LD_VAR 0 12
68127: PUSH
68128: LD_VAR 0 13
68132: PUSH
68133: LD_VAR 0 14
68137: PUSH
68138: LD_VAR 0 15
68142: PUSH
68143: LD_VAR 0 16
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: PUSH
68156: LD_VAR 0 4
68160: PUSH
68161: LD_INT 1
68163: PLUS
68164: ARRAY
68165: ST_TO_ADDR
68166: GO 68297
68168: LD_INT 2
68170: DOUBLE
68171: EQUAL
68172: IFTRUE 68176
68174: GO 68232
68176: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
68177: LD_ADDR_VAR 0 9
68181: PUSH
68182: LD_VAR 0 17
68186: PUSH
68187: LD_VAR 0 18
68191: PUSH
68192: LD_VAR 0 19
68196: PUSH
68197: LD_VAR 0 20
68201: PUSH
68202: LD_VAR 0 21
68206: PUSH
68207: LD_VAR 0 22
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: PUSH
68220: LD_VAR 0 4
68224: PUSH
68225: LD_INT 1
68227: PLUS
68228: ARRAY
68229: ST_TO_ADDR
68230: GO 68297
68232: LD_INT 3
68234: DOUBLE
68235: EQUAL
68236: IFTRUE 68240
68238: GO 68296
68240: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68241: LD_ADDR_VAR 0 9
68245: PUSH
68246: LD_VAR 0 23
68250: PUSH
68251: LD_VAR 0 24
68255: PUSH
68256: LD_VAR 0 25
68260: PUSH
68261: LD_VAR 0 26
68265: PUSH
68266: LD_VAR 0 27
68270: PUSH
68271: LD_VAR 0 28
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: PUSH
68284: LD_VAR 0 4
68288: PUSH
68289: LD_INT 1
68291: PLUS
68292: ARRAY
68293: ST_TO_ADDR
68294: GO 68297
68296: POP
68297: GO 68852
68299: LD_INT 2
68301: DOUBLE
68302: EQUAL
68303: IFTRUE 68313
68305: LD_INT 3
68307: DOUBLE
68308: EQUAL
68309: IFTRUE 68313
68311: GO 68369
68313: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68314: LD_ADDR_VAR 0 9
68318: PUSH
68319: LD_VAR 0 29
68323: PUSH
68324: LD_VAR 0 30
68328: PUSH
68329: LD_VAR 0 31
68333: PUSH
68334: LD_VAR 0 32
68338: PUSH
68339: LD_VAR 0 33
68343: PUSH
68344: LD_VAR 0 34
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: PUSH
68357: LD_VAR 0 4
68361: PUSH
68362: LD_INT 1
68364: PLUS
68365: ARRAY
68366: ST_TO_ADDR
68367: GO 68852
68369: LD_INT 16
68371: DOUBLE
68372: EQUAL
68373: IFTRUE 68431
68375: LD_INT 17
68377: DOUBLE
68378: EQUAL
68379: IFTRUE 68431
68381: LD_INT 18
68383: DOUBLE
68384: EQUAL
68385: IFTRUE 68431
68387: LD_INT 19
68389: DOUBLE
68390: EQUAL
68391: IFTRUE 68431
68393: LD_INT 22
68395: DOUBLE
68396: EQUAL
68397: IFTRUE 68431
68399: LD_INT 20
68401: DOUBLE
68402: EQUAL
68403: IFTRUE 68431
68405: LD_INT 21
68407: DOUBLE
68408: EQUAL
68409: IFTRUE 68431
68411: LD_INT 23
68413: DOUBLE
68414: EQUAL
68415: IFTRUE 68431
68417: LD_INT 24
68419: DOUBLE
68420: EQUAL
68421: IFTRUE 68431
68423: LD_INT 25
68425: DOUBLE
68426: EQUAL
68427: IFTRUE 68431
68429: GO 68487
68431: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68432: LD_ADDR_VAR 0 9
68436: PUSH
68437: LD_VAR 0 35
68441: PUSH
68442: LD_VAR 0 36
68446: PUSH
68447: LD_VAR 0 37
68451: PUSH
68452: LD_VAR 0 38
68456: PUSH
68457: LD_VAR 0 39
68461: PUSH
68462: LD_VAR 0 40
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: PUSH
68475: LD_VAR 0 4
68479: PUSH
68480: LD_INT 1
68482: PLUS
68483: ARRAY
68484: ST_TO_ADDR
68485: GO 68852
68487: LD_INT 6
68489: DOUBLE
68490: EQUAL
68491: IFTRUE 68543
68493: LD_INT 7
68495: DOUBLE
68496: EQUAL
68497: IFTRUE 68543
68499: LD_INT 8
68501: DOUBLE
68502: EQUAL
68503: IFTRUE 68543
68505: LD_INT 13
68507: DOUBLE
68508: EQUAL
68509: IFTRUE 68543
68511: LD_INT 12
68513: DOUBLE
68514: EQUAL
68515: IFTRUE 68543
68517: LD_INT 15
68519: DOUBLE
68520: EQUAL
68521: IFTRUE 68543
68523: LD_INT 11
68525: DOUBLE
68526: EQUAL
68527: IFTRUE 68543
68529: LD_INT 14
68531: DOUBLE
68532: EQUAL
68533: IFTRUE 68543
68535: LD_INT 10
68537: DOUBLE
68538: EQUAL
68539: IFTRUE 68543
68541: GO 68599
68543: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
68544: LD_ADDR_VAR 0 9
68548: PUSH
68549: LD_VAR 0 41
68553: PUSH
68554: LD_VAR 0 42
68558: PUSH
68559: LD_VAR 0 43
68563: PUSH
68564: LD_VAR 0 44
68568: PUSH
68569: LD_VAR 0 45
68573: PUSH
68574: LD_VAR 0 46
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: PUSH
68587: LD_VAR 0 4
68591: PUSH
68592: LD_INT 1
68594: PLUS
68595: ARRAY
68596: ST_TO_ADDR
68597: GO 68852
68599: LD_INT 36
68601: DOUBLE
68602: EQUAL
68603: IFTRUE 68607
68605: GO 68663
68607: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68608: LD_ADDR_VAR 0 9
68612: PUSH
68613: LD_VAR 0 47
68617: PUSH
68618: LD_VAR 0 48
68622: PUSH
68623: LD_VAR 0 49
68627: PUSH
68628: LD_VAR 0 50
68632: PUSH
68633: LD_VAR 0 51
68637: PUSH
68638: LD_VAR 0 52
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: PUSH
68651: LD_VAR 0 4
68655: PUSH
68656: LD_INT 1
68658: PLUS
68659: ARRAY
68660: ST_TO_ADDR
68661: GO 68852
68663: LD_INT 4
68665: DOUBLE
68666: EQUAL
68667: IFTRUE 68689
68669: LD_INT 5
68671: DOUBLE
68672: EQUAL
68673: IFTRUE 68689
68675: LD_INT 34
68677: DOUBLE
68678: EQUAL
68679: IFTRUE 68689
68681: LD_INT 37
68683: DOUBLE
68684: EQUAL
68685: IFTRUE 68689
68687: GO 68745
68689: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68690: LD_ADDR_VAR 0 9
68694: PUSH
68695: LD_VAR 0 53
68699: PUSH
68700: LD_VAR 0 54
68704: PUSH
68705: LD_VAR 0 55
68709: PUSH
68710: LD_VAR 0 56
68714: PUSH
68715: LD_VAR 0 57
68719: PUSH
68720: LD_VAR 0 58
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: PUSH
68733: LD_VAR 0 4
68737: PUSH
68738: LD_INT 1
68740: PLUS
68741: ARRAY
68742: ST_TO_ADDR
68743: GO 68852
68745: LD_INT 31
68747: DOUBLE
68748: EQUAL
68749: IFTRUE 68795
68751: LD_INT 32
68753: DOUBLE
68754: EQUAL
68755: IFTRUE 68795
68757: LD_INT 33
68759: DOUBLE
68760: EQUAL
68761: IFTRUE 68795
68763: LD_INT 27
68765: DOUBLE
68766: EQUAL
68767: IFTRUE 68795
68769: LD_INT 26
68771: DOUBLE
68772: EQUAL
68773: IFTRUE 68795
68775: LD_INT 28
68777: DOUBLE
68778: EQUAL
68779: IFTRUE 68795
68781: LD_INT 29
68783: DOUBLE
68784: EQUAL
68785: IFTRUE 68795
68787: LD_INT 30
68789: DOUBLE
68790: EQUAL
68791: IFTRUE 68795
68793: GO 68851
68795: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
68796: LD_ADDR_VAR 0 9
68800: PUSH
68801: LD_VAR 0 59
68805: PUSH
68806: LD_VAR 0 60
68810: PUSH
68811: LD_VAR 0 61
68815: PUSH
68816: LD_VAR 0 62
68820: PUSH
68821: LD_VAR 0 63
68825: PUSH
68826: LD_VAR 0 64
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: PUSH
68839: LD_VAR 0 4
68843: PUSH
68844: LD_INT 1
68846: PLUS
68847: ARRAY
68848: ST_TO_ADDR
68849: GO 68852
68851: POP
// temp_list2 = [ ] ;
68852: LD_ADDR_VAR 0 10
68856: PUSH
68857: EMPTY
68858: ST_TO_ADDR
// for i in temp_list do
68859: LD_ADDR_VAR 0 8
68863: PUSH
68864: LD_VAR 0 9
68868: PUSH
68869: FOR_IN
68870: IFFALSE 68922
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68872: LD_ADDR_VAR 0 10
68876: PUSH
68877: LD_VAR 0 10
68881: PUSH
68882: LD_VAR 0 8
68886: PUSH
68887: LD_INT 1
68889: ARRAY
68890: PUSH
68891: LD_VAR 0 2
68895: PLUS
68896: PUSH
68897: LD_VAR 0 8
68901: PUSH
68902: LD_INT 2
68904: ARRAY
68905: PUSH
68906: LD_VAR 0 3
68910: PLUS
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: EMPTY
68917: LIST
68918: ADD
68919: ST_TO_ADDR
68920: GO 68869
68922: POP
68923: POP
// result = temp_list2 ;
68924: LD_ADDR_VAR 0 7
68928: PUSH
68929: LD_VAR 0 10
68933: ST_TO_ADDR
// end ;
68934: LD_VAR 0 7
68938: RET
// export function EnemyInRange ( unit , dist ) ; begin
68939: LD_INT 0
68941: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68942: LD_ADDR_VAR 0 3
68946: PUSH
68947: LD_VAR 0 1
68951: PPUSH
68952: CALL_OW 255
68956: PPUSH
68957: LD_VAR 0 1
68961: PPUSH
68962: CALL_OW 250
68966: PPUSH
68967: LD_VAR 0 1
68971: PPUSH
68972: CALL_OW 251
68976: PPUSH
68977: LD_VAR 0 2
68981: PPUSH
68982: CALL 43043 0 4
68986: PUSH
68987: LD_INT 4
68989: ARRAY
68990: ST_TO_ADDR
// end ;
68991: LD_VAR 0 3
68995: RET
// export function PlayerSeeMe ( unit ) ; begin
68996: LD_INT 0
68998: PPUSH
// result := See ( your_side , unit ) ;
68999: LD_ADDR_VAR 0 2
69003: PUSH
69004: LD_OWVAR 2
69008: PPUSH
69009: LD_VAR 0 1
69013: PPUSH
69014: CALL_OW 292
69018: ST_TO_ADDR
// end ;
69019: LD_VAR 0 2
69023: RET
// export function ReverseDir ( unit ) ; begin
69024: LD_INT 0
69026: PPUSH
// if not unit then
69027: LD_VAR 0 1
69031: NOT
69032: IFFALSE 69036
// exit ;
69034: GO 69059
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69036: LD_ADDR_VAR 0 2
69040: PUSH
69041: LD_VAR 0 1
69045: PPUSH
69046: CALL_OW 254
69050: PUSH
69051: LD_INT 3
69053: PLUS
69054: PUSH
69055: LD_INT 6
69057: MOD
69058: ST_TO_ADDR
// end ;
69059: LD_VAR 0 2
69063: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69064: LD_INT 0
69066: PPUSH
69067: PPUSH
69068: PPUSH
69069: PPUSH
69070: PPUSH
// if not hexes then
69071: LD_VAR 0 2
69075: NOT
69076: IFFALSE 69080
// exit ;
69078: GO 69228
// dist := 9999 ;
69080: LD_ADDR_VAR 0 5
69084: PUSH
69085: LD_INT 9999
69087: ST_TO_ADDR
// for i = 1 to hexes do
69088: LD_ADDR_VAR 0 4
69092: PUSH
69093: DOUBLE
69094: LD_INT 1
69096: DEC
69097: ST_TO_ADDR
69098: LD_VAR 0 2
69102: PUSH
69103: FOR_TO
69104: IFFALSE 69216
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69106: LD_VAR 0 1
69110: PPUSH
69111: LD_VAR 0 2
69115: PUSH
69116: LD_VAR 0 4
69120: ARRAY
69121: PUSH
69122: LD_INT 1
69124: ARRAY
69125: PPUSH
69126: LD_VAR 0 2
69130: PUSH
69131: LD_VAR 0 4
69135: ARRAY
69136: PUSH
69137: LD_INT 2
69139: ARRAY
69140: PPUSH
69141: CALL_OW 297
69145: PUSH
69146: LD_VAR 0 5
69150: LESS
69151: IFFALSE 69214
// begin hex := hexes [ i ] ;
69153: LD_ADDR_VAR 0 7
69157: PUSH
69158: LD_VAR 0 2
69162: PUSH
69163: LD_VAR 0 4
69167: ARRAY
69168: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69169: LD_ADDR_VAR 0 5
69173: PUSH
69174: LD_VAR 0 1
69178: PPUSH
69179: LD_VAR 0 2
69183: PUSH
69184: LD_VAR 0 4
69188: ARRAY
69189: PUSH
69190: LD_INT 1
69192: ARRAY
69193: PPUSH
69194: LD_VAR 0 2
69198: PUSH
69199: LD_VAR 0 4
69203: ARRAY
69204: PUSH
69205: LD_INT 2
69207: ARRAY
69208: PPUSH
69209: CALL_OW 297
69213: ST_TO_ADDR
// end ; end ;
69214: GO 69103
69216: POP
69217: POP
// result := hex ;
69218: LD_ADDR_VAR 0 3
69222: PUSH
69223: LD_VAR 0 7
69227: ST_TO_ADDR
// end ;
69228: LD_VAR 0 3
69232: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69233: LD_INT 0
69235: PPUSH
69236: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69237: LD_VAR 0 1
69241: NOT
69242: PUSH
69243: LD_VAR 0 1
69247: PUSH
69248: LD_INT 21
69250: PUSH
69251: LD_INT 2
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 23
69260: PUSH
69261: LD_INT 2
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PPUSH
69272: CALL_OW 69
69276: IN
69277: NOT
69278: OR
69279: IFFALSE 69283
// exit ;
69281: GO 69330
// for i = 1 to 3 do
69283: LD_ADDR_VAR 0 3
69287: PUSH
69288: DOUBLE
69289: LD_INT 1
69291: DEC
69292: ST_TO_ADDR
69293: LD_INT 3
69295: PUSH
69296: FOR_TO
69297: IFFALSE 69328
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69299: LD_VAR 0 1
69303: PPUSH
69304: CALL_OW 250
69308: PPUSH
69309: LD_VAR 0 1
69313: PPUSH
69314: CALL_OW 251
69318: PPUSH
69319: LD_INT 1
69321: PPUSH
69322: CALL_OW 453
69326: GO 69296
69328: POP
69329: POP
// end ;
69330: LD_VAR 0 2
69334: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69335: LD_INT 0
69337: PPUSH
69338: PPUSH
69339: PPUSH
69340: PPUSH
69341: PPUSH
69342: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69343: LD_VAR 0 1
69347: NOT
69348: PUSH
69349: LD_VAR 0 2
69353: NOT
69354: OR
69355: PUSH
69356: LD_VAR 0 1
69360: PPUSH
69361: CALL_OW 314
69365: OR
69366: IFFALSE 69370
// exit ;
69368: GO 69811
// x := GetX ( enemy_unit ) ;
69370: LD_ADDR_VAR 0 7
69374: PUSH
69375: LD_VAR 0 2
69379: PPUSH
69380: CALL_OW 250
69384: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69385: LD_ADDR_VAR 0 8
69389: PUSH
69390: LD_VAR 0 2
69394: PPUSH
69395: CALL_OW 251
69399: ST_TO_ADDR
// if not x or not y then
69400: LD_VAR 0 7
69404: NOT
69405: PUSH
69406: LD_VAR 0 8
69410: NOT
69411: OR
69412: IFFALSE 69416
// exit ;
69414: GO 69811
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69416: LD_ADDR_VAR 0 6
69420: PUSH
69421: LD_VAR 0 7
69425: PPUSH
69426: LD_INT 0
69428: PPUSH
69429: LD_INT 4
69431: PPUSH
69432: CALL_OW 272
69436: PUSH
69437: LD_VAR 0 8
69441: PPUSH
69442: LD_INT 0
69444: PPUSH
69445: LD_INT 4
69447: PPUSH
69448: CALL_OW 273
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_VAR 0 7
69461: PPUSH
69462: LD_INT 1
69464: PPUSH
69465: LD_INT 4
69467: PPUSH
69468: CALL_OW 272
69472: PUSH
69473: LD_VAR 0 8
69477: PPUSH
69478: LD_INT 1
69480: PPUSH
69481: LD_INT 4
69483: PPUSH
69484: CALL_OW 273
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_VAR 0 7
69497: PPUSH
69498: LD_INT 2
69500: PPUSH
69501: LD_INT 4
69503: PPUSH
69504: CALL_OW 272
69508: PUSH
69509: LD_VAR 0 8
69513: PPUSH
69514: LD_INT 2
69516: PPUSH
69517: LD_INT 4
69519: PPUSH
69520: CALL_OW 273
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_VAR 0 7
69533: PPUSH
69534: LD_INT 3
69536: PPUSH
69537: LD_INT 4
69539: PPUSH
69540: CALL_OW 272
69544: PUSH
69545: LD_VAR 0 8
69549: PPUSH
69550: LD_INT 3
69552: PPUSH
69553: LD_INT 4
69555: PPUSH
69556: CALL_OW 273
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_VAR 0 7
69569: PPUSH
69570: LD_INT 4
69572: PPUSH
69573: LD_INT 4
69575: PPUSH
69576: CALL_OW 272
69580: PUSH
69581: LD_VAR 0 8
69585: PPUSH
69586: LD_INT 4
69588: PPUSH
69589: LD_INT 4
69591: PPUSH
69592: CALL_OW 273
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_VAR 0 7
69605: PPUSH
69606: LD_INT 5
69608: PPUSH
69609: LD_INT 4
69611: PPUSH
69612: CALL_OW 272
69616: PUSH
69617: LD_VAR 0 8
69621: PPUSH
69622: LD_INT 5
69624: PPUSH
69625: LD_INT 4
69627: PPUSH
69628: CALL_OW 273
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: ST_TO_ADDR
// for i = tmp downto 1 do
69645: LD_ADDR_VAR 0 4
69649: PUSH
69650: DOUBLE
69651: LD_VAR 0 6
69655: INC
69656: ST_TO_ADDR
69657: LD_INT 1
69659: PUSH
69660: FOR_DOWNTO
69661: IFFALSE 69762
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69663: LD_VAR 0 6
69667: PUSH
69668: LD_VAR 0 4
69672: ARRAY
69673: PUSH
69674: LD_INT 1
69676: ARRAY
69677: PPUSH
69678: LD_VAR 0 6
69682: PUSH
69683: LD_VAR 0 4
69687: ARRAY
69688: PUSH
69689: LD_INT 2
69691: ARRAY
69692: PPUSH
69693: CALL_OW 488
69697: NOT
69698: PUSH
69699: LD_VAR 0 6
69703: PUSH
69704: LD_VAR 0 4
69708: ARRAY
69709: PUSH
69710: LD_INT 1
69712: ARRAY
69713: PPUSH
69714: LD_VAR 0 6
69718: PUSH
69719: LD_VAR 0 4
69723: ARRAY
69724: PUSH
69725: LD_INT 2
69727: ARRAY
69728: PPUSH
69729: CALL_OW 428
69733: PUSH
69734: LD_INT 0
69736: NONEQUAL
69737: OR
69738: IFFALSE 69760
// tmp := Delete ( tmp , i ) ;
69740: LD_ADDR_VAR 0 6
69744: PUSH
69745: LD_VAR 0 6
69749: PPUSH
69750: LD_VAR 0 4
69754: PPUSH
69755: CALL_OW 3
69759: ST_TO_ADDR
69760: GO 69660
69762: POP
69763: POP
// j := GetClosestHex ( unit , tmp ) ;
69764: LD_ADDR_VAR 0 5
69768: PUSH
69769: LD_VAR 0 1
69773: PPUSH
69774: LD_VAR 0 6
69778: PPUSH
69779: CALL 69064 0 2
69783: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69784: LD_VAR 0 1
69788: PPUSH
69789: LD_VAR 0 5
69793: PUSH
69794: LD_INT 1
69796: ARRAY
69797: PPUSH
69798: LD_VAR 0 5
69802: PUSH
69803: LD_INT 2
69805: ARRAY
69806: PPUSH
69807: CALL_OW 111
// end ;
69811: LD_VAR 0 3
69815: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69816: LD_INT 0
69818: PPUSH
69819: PPUSH
69820: PPUSH
// uc_side = 0 ;
69821: LD_ADDR_OWVAR 20
69825: PUSH
69826: LD_INT 0
69828: ST_TO_ADDR
// uc_nation = 0 ;
69829: LD_ADDR_OWVAR 21
69833: PUSH
69834: LD_INT 0
69836: ST_TO_ADDR
// InitHc ;
69837: CALL_OW 19
// InitVc ;
69841: CALL_OW 20
// if mastodonts then
69845: LD_VAR 0 6
69849: IFFALSE 69916
// for i = 1 to mastodonts do
69851: LD_ADDR_VAR 0 11
69855: PUSH
69856: DOUBLE
69857: LD_INT 1
69859: DEC
69860: ST_TO_ADDR
69861: LD_VAR 0 6
69865: PUSH
69866: FOR_TO
69867: IFFALSE 69914
// begin vc_chassis := 31 ;
69869: LD_ADDR_OWVAR 37
69873: PUSH
69874: LD_INT 31
69876: ST_TO_ADDR
// vc_control := control_rider ;
69877: LD_ADDR_OWVAR 38
69881: PUSH
69882: LD_INT 4
69884: ST_TO_ADDR
// animal := CreateVehicle ;
69885: LD_ADDR_VAR 0 12
69889: PUSH
69890: CALL_OW 45
69894: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69895: LD_VAR 0 12
69899: PPUSH
69900: LD_VAR 0 8
69904: PPUSH
69905: LD_INT 0
69907: PPUSH
69908: CALL 71985 0 3
// end ;
69912: GO 69866
69914: POP
69915: POP
// if horses then
69916: LD_VAR 0 5
69920: IFFALSE 69987
// for i = 1 to horses do
69922: LD_ADDR_VAR 0 11
69926: PUSH
69927: DOUBLE
69928: LD_INT 1
69930: DEC
69931: ST_TO_ADDR
69932: LD_VAR 0 5
69936: PUSH
69937: FOR_TO
69938: IFFALSE 69985
// begin hc_class := 21 ;
69940: LD_ADDR_OWVAR 28
69944: PUSH
69945: LD_INT 21
69947: ST_TO_ADDR
// hc_gallery :=  ;
69948: LD_ADDR_OWVAR 33
69952: PUSH
69953: LD_STRING 
69955: ST_TO_ADDR
// animal := CreateHuman ;
69956: LD_ADDR_VAR 0 12
69960: PUSH
69961: CALL_OW 44
69965: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69966: LD_VAR 0 12
69970: PPUSH
69971: LD_VAR 0 8
69975: PPUSH
69976: LD_INT 0
69978: PPUSH
69979: CALL 71985 0 3
// end ;
69983: GO 69937
69985: POP
69986: POP
// if birds then
69987: LD_VAR 0 1
69991: IFFALSE 70058
// for i = 1 to birds do
69993: LD_ADDR_VAR 0 11
69997: PUSH
69998: DOUBLE
69999: LD_INT 1
70001: DEC
70002: ST_TO_ADDR
70003: LD_VAR 0 1
70007: PUSH
70008: FOR_TO
70009: IFFALSE 70056
// begin hc_class = 18 ;
70011: LD_ADDR_OWVAR 28
70015: PUSH
70016: LD_INT 18
70018: ST_TO_ADDR
// hc_gallery =  ;
70019: LD_ADDR_OWVAR 33
70023: PUSH
70024: LD_STRING 
70026: ST_TO_ADDR
// animal := CreateHuman ;
70027: LD_ADDR_VAR 0 12
70031: PUSH
70032: CALL_OW 44
70036: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70037: LD_VAR 0 12
70041: PPUSH
70042: LD_VAR 0 8
70046: PPUSH
70047: LD_INT 0
70049: PPUSH
70050: CALL 71985 0 3
// end ;
70054: GO 70008
70056: POP
70057: POP
// if tigers then
70058: LD_VAR 0 2
70062: IFFALSE 70146
// for i = 1 to tigers do
70064: LD_ADDR_VAR 0 11
70068: PUSH
70069: DOUBLE
70070: LD_INT 1
70072: DEC
70073: ST_TO_ADDR
70074: LD_VAR 0 2
70078: PUSH
70079: FOR_TO
70080: IFFALSE 70144
// begin hc_class = class_tiger ;
70082: LD_ADDR_OWVAR 28
70086: PUSH
70087: LD_INT 14
70089: ST_TO_ADDR
// hc_gallery =  ;
70090: LD_ADDR_OWVAR 33
70094: PUSH
70095: LD_STRING 
70097: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70098: LD_ADDR_OWVAR 35
70102: PUSH
70103: LD_INT 7
70105: NEG
70106: PPUSH
70107: LD_INT 7
70109: PPUSH
70110: CALL_OW 12
70114: ST_TO_ADDR
// animal := CreateHuman ;
70115: LD_ADDR_VAR 0 12
70119: PUSH
70120: CALL_OW 44
70124: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70125: LD_VAR 0 12
70129: PPUSH
70130: LD_VAR 0 8
70134: PPUSH
70135: LD_INT 0
70137: PPUSH
70138: CALL 71985 0 3
// end ;
70142: GO 70079
70144: POP
70145: POP
// if apemans then
70146: LD_VAR 0 3
70150: IFFALSE 70273
// for i = 1 to apemans do
70152: LD_ADDR_VAR 0 11
70156: PUSH
70157: DOUBLE
70158: LD_INT 1
70160: DEC
70161: ST_TO_ADDR
70162: LD_VAR 0 3
70166: PUSH
70167: FOR_TO
70168: IFFALSE 70271
// begin hc_class = class_apeman ;
70170: LD_ADDR_OWVAR 28
70174: PUSH
70175: LD_INT 12
70177: ST_TO_ADDR
// hc_gallery =  ;
70178: LD_ADDR_OWVAR 33
70182: PUSH
70183: LD_STRING 
70185: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
70186: LD_ADDR_OWVAR 35
70190: PUSH
70191: LD_INT 5
70193: NEG
70194: PPUSH
70195: LD_INT 5
70197: PPUSH
70198: CALL_OW 12
70202: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70203: LD_ADDR_OWVAR 31
70207: PUSH
70208: LD_INT 1
70210: PPUSH
70211: LD_INT 3
70213: PPUSH
70214: CALL_OW 12
70218: PUSH
70219: LD_INT 1
70221: PPUSH
70222: LD_INT 3
70224: PPUSH
70225: CALL_OW 12
70229: PUSH
70230: LD_INT 0
70232: PUSH
70233: LD_INT 0
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: ST_TO_ADDR
// animal := CreateHuman ;
70242: LD_ADDR_VAR 0 12
70246: PUSH
70247: CALL_OW 44
70251: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70252: LD_VAR 0 12
70256: PPUSH
70257: LD_VAR 0 8
70261: PPUSH
70262: LD_INT 0
70264: PPUSH
70265: CALL 71985 0 3
// end ;
70269: GO 70167
70271: POP
70272: POP
// if enchidnas then
70273: LD_VAR 0 4
70277: IFFALSE 70344
// for i = 1 to enchidnas do
70279: LD_ADDR_VAR 0 11
70283: PUSH
70284: DOUBLE
70285: LD_INT 1
70287: DEC
70288: ST_TO_ADDR
70289: LD_VAR 0 4
70293: PUSH
70294: FOR_TO
70295: IFFALSE 70342
// begin hc_class = 13 ;
70297: LD_ADDR_OWVAR 28
70301: PUSH
70302: LD_INT 13
70304: ST_TO_ADDR
// hc_gallery =  ;
70305: LD_ADDR_OWVAR 33
70309: PUSH
70310: LD_STRING 
70312: ST_TO_ADDR
// animal := CreateHuman ;
70313: LD_ADDR_VAR 0 12
70317: PUSH
70318: CALL_OW 44
70322: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70323: LD_VAR 0 12
70327: PPUSH
70328: LD_VAR 0 8
70332: PPUSH
70333: LD_INT 0
70335: PPUSH
70336: CALL 71985 0 3
// end ;
70340: GO 70294
70342: POP
70343: POP
// if fishes then
70344: LD_VAR 0 7
70348: IFFALSE 70415
// for i = 1 to fishes do
70350: LD_ADDR_VAR 0 11
70354: PUSH
70355: DOUBLE
70356: LD_INT 1
70358: DEC
70359: ST_TO_ADDR
70360: LD_VAR 0 7
70364: PUSH
70365: FOR_TO
70366: IFFALSE 70413
// begin hc_class = 20 ;
70368: LD_ADDR_OWVAR 28
70372: PUSH
70373: LD_INT 20
70375: ST_TO_ADDR
// hc_gallery =  ;
70376: LD_ADDR_OWVAR 33
70380: PUSH
70381: LD_STRING 
70383: ST_TO_ADDR
// animal := CreateHuman ;
70384: LD_ADDR_VAR 0 12
70388: PUSH
70389: CALL_OW 44
70393: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70394: LD_VAR 0 12
70398: PPUSH
70399: LD_VAR 0 9
70403: PPUSH
70404: LD_INT 0
70406: PPUSH
70407: CALL 71985 0 3
// end ;
70411: GO 70365
70413: POP
70414: POP
// end ;
70415: LD_VAR 0 10
70419: RET
// export function WantHeal ( sci , unit ) ; begin
70420: LD_INT 0
70422: PPUSH
// if GetTaskList ( sci ) > 0 then
70423: LD_VAR 0 1
70427: PPUSH
70428: CALL_OW 437
70432: PUSH
70433: LD_INT 0
70435: GREATER
70436: IFFALSE 70506
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70438: LD_VAR 0 1
70442: PPUSH
70443: CALL_OW 437
70447: PUSH
70448: LD_INT 1
70450: ARRAY
70451: PUSH
70452: LD_INT 1
70454: ARRAY
70455: PUSH
70456: LD_STRING l
70458: EQUAL
70459: PUSH
70460: LD_VAR 0 1
70464: PPUSH
70465: CALL_OW 437
70469: PUSH
70470: LD_INT 1
70472: ARRAY
70473: PUSH
70474: LD_INT 4
70476: ARRAY
70477: PUSH
70478: LD_VAR 0 2
70482: EQUAL
70483: AND
70484: IFFALSE 70496
// result := true else
70486: LD_ADDR_VAR 0 3
70490: PUSH
70491: LD_INT 1
70493: ST_TO_ADDR
70494: GO 70504
// result := false ;
70496: LD_ADDR_VAR 0 3
70500: PUSH
70501: LD_INT 0
70503: ST_TO_ADDR
// end else
70504: GO 70514
// result := false ;
70506: LD_ADDR_VAR 0 3
70510: PUSH
70511: LD_INT 0
70513: ST_TO_ADDR
// end ;
70514: LD_VAR 0 3
70518: RET
// export function HealTarget ( sci ) ; begin
70519: LD_INT 0
70521: PPUSH
// if not sci then
70522: LD_VAR 0 1
70526: NOT
70527: IFFALSE 70531
// exit ;
70529: GO 70596
// result := 0 ;
70531: LD_ADDR_VAR 0 2
70535: PUSH
70536: LD_INT 0
70538: ST_TO_ADDR
// if GetTaskList ( sci ) then
70539: LD_VAR 0 1
70543: PPUSH
70544: CALL_OW 437
70548: IFFALSE 70596
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70550: LD_VAR 0 1
70554: PPUSH
70555: CALL_OW 437
70559: PUSH
70560: LD_INT 1
70562: ARRAY
70563: PUSH
70564: LD_INT 1
70566: ARRAY
70567: PUSH
70568: LD_STRING l
70570: EQUAL
70571: IFFALSE 70596
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70573: LD_ADDR_VAR 0 2
70577: PUSH
70578: LD_VAR 0 1
70582: PPUSH
70583: CALL_OW 437
70587: PUSH
70588: LD_INT 1
70590: ARRAY
70591: PUSH
70592: LD_INT 4
70594: ARRAY
70595: ST_TO_ADDR
// end ;
70596: LD_VAR 0 2
70600: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70601: LD_INT 0
70603: PPUSH
70604: PPUSH
70605: PPUSH
70606: PPUSH
// if not base_units then
70607: LD_VAR 0 1
70611: NOT
70612: IFFALSE 70616
// exit ;
70614: GO 70703
// result := false ;
70616: LD_ADDR_VAR 0 2
70620: PUSH
70621: LD_INT 0
70623: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70624: LD_ADDR_VAR 0 5
70628: PUSH
70629: LD_VAR 0 1
70633: PPUSH
70634: LD_INT 21
70636: PUSH
70637: LD_INT 3
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PPUSH
70644: CALL_OW 72
70648: ST_TO_ADDR
// if not tmp then
70649: LD_VAR 0 5
70653: NOT
70654: IFFALSE 70658
// exit ;
70656: GO 70703
// for i in tmp do
70658: LD_ADDR_VAR 0 3
70662: PUSH
70663: LD_VAR 0 5
70667: PUSH
70668: FOR_IN
70669: IFFALSE 70701
// begin result := EnemyInRange ( i , 22 ) ;
70671: LD_ADDR_VAR 0 2
70675: PUSH
70676: LD_VAR 0 3
70680: PPUSH
70681: LD_INT 22
70683: PPUSH
70684: CALL 68939 0 2
70688: ST_TO_ADDR
// if result then
70689: LD_VAR 0 2
70693: IFFALSE 70699
// exit ;
70695: POP
70696: POP
70697: GO 70703
// end ;
70699: GO 70668
70701: POP
70702: POP
// end ;
70703: LD_VAR 0 2
70707: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70708: LD_INT 0
70710: PPUSH
70711: PPUSH
// if not units then
70712: LD_VAR 0 1
70716: NOT
70717: IFFALSE 70721
// exit ;
70719: GO 70791
// result := [ ] ;
70721: LD_ADDR_VAR 0 3
70725: PUSH
70726: EMPTY
70727: ST_TO_ADDR
// for i in units do
70728: LD_ADDR_VAR 0 4
70732: PUSH
70733: LD_VAR 0 1
70737: PUSH
70738: FOR_IN
70739: IFFALSE 70789
// if GetTag ( i ) = tag then
70741: LD_VAR 0 4
70745: PPUSH
70746: CALL_OW 110
70750: PUSH
70751: LD_VAR 0 2
70755: EQUAL
70756: IFFALSE 70787
// result := Insert ( result , result + 1 , i ) ;
70758: LD_ADDR_VAR 0 3
70762: PUSH
70763: LD_VAR 0 3
70767: PPUSH
70768: LD_VAR 0 3
70772: PUSH
70773: LD_INT 1
70775: PLUS
70776: PPUSH
70777: LD_VAR 0 4
70781: PPUSH
70782: CALL_OW 2
70786: ST_TO_ADDR
70787: GO 70738
70789: POP
70790: POP
// end ;
70791: LD_VAR 0 3
70795: RET
// export function IsDriver ( un ) ; begin
70796: LD_INT 0
70798: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70799: LD_ADDR_VAR 0 2
70803: PUSH
70804: LD_VAR 0 1
70808: PUSH
70809: LD_INT 55
70811: PUSH
70812: EMPTY
70813: LIST
70814: PPUSH
70815: CALL_OW 69
70819: IN
70820: ST_TO_ADDR
// end ;
70821: LD_VAR 0 2
70825: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70826: LD_INT 0
70828: PPUSH
70829: PPUSH
// list := [ ] ;
70830: LD_ADDR_VAR 0 5
70834: PUSH
70835: EMPTY
70836: ST_TO_ADDR
// case d of 0 :
70837: LD_VAR 0 3
70841: PUSH
70842: LD_INT 0
70844: DOUBLE
70845: EQUAL
70846: IFTRUE 70850
70848: GO 70983
70850: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70851: LD_ADDR_VAR 0 5
70855: PUSH
70856: LD_VAR 0 1
70860: PUSH
70861: LD_INT 4
70863: MINUS
70864: PUSH
70865: LD_VAR 0 2
70869: PUSH
70870: LD_INT 4
70872: MINUS
70873: PUSH
70874: LD_INT 2
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: LIST
70881: PUSH
70882: LD_VAR 0 1
70886: PUSH
70887: LD_INT 3
70889: MINUS
70890: PUSH
70891: LD_VAR 0 2
70895: PUSH
70896: LD_INT 1
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: LIST
70903: PUSH
70904: LD_VAR 0 1
70908: PUSH
70909: LD_INT 4
70911: PLUS
70912: PUSH
70913: LD_VAR 0 2
70917: PUSH
70918: LD_INT 4
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: LIST
70925: PUSH
70926: LD_VAR 0 1
70930: PUSH
70931: LD_INT 3
70933: PLUS
70934: PUSH
70935: LD_VAR 0 2
70939: PUSH
70940: LD_INT 3
70942: PLUS
70943: PUSH
70944: LD_INT 5
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: LIST
70951: PUSH
70952: LD_VAR 0 1
70956: PUSH
70957: LD_VAR 0 2
70961: PUSH
70962: LD_INT 4
70964: PLUS
70965: PUSH
70966: LD_INT 0
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: LIST
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: ST_TO_ADDR
// end ; 1 :
70981: GO 71681
70983: LD_INT 1
70985: DOUBLE
70986: EQUAL
70987: IFTRUE 70991
70989: GO 71124
70991: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70992: LD_ADDR_VAR 0 5
70996: PUSH
70997: LD_VAR 0 1
71001: PUSH
71002: LD_VAR 0 2
71006: PUSH
71007: LD_INT 4
71009: MINUS
71010: PUSH
71011: LD_INT 3
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: LIST
71018: PUSH
71019: LD_VAR 0 1
71023: PUSH
71024: LD_INT 3
71026: MINUS
71027: PUSH
71028: LD_VAR 0 2
71032: PUSH
71033: LD_INT 3
71035: MINUS
71036: PUSH
71037: LD_INT 2
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: LIST
71044: PUSH
71045: LD_VAR 0 1
71049: PUSH
71050: LD_INT 4
71052: MINUS
71053: PUSH
71054: LD_VAR 0 2
71058: PUSH
71059: LD_INT 1
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: LIST
71066: PUSH
71067: LD_VAR 0 1
71071: PUSH
71072: LD_VAR 0 2
71076: PUSH
71077: LD_INT 3
71079: PLUS
71080: PUSH
71081: LD_INT 0
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: LIST
71088: PUSH
71089: LD_VAR 0 1
71093: PUSH
71094: LD_INT 4
71096: PLUS
71097: PUSH
71098: LD_VAR 0 2
71102: PUSH
71103: LD_INT 4
71105: PLUS
71106: PUSH
71107: LD_INT 5
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: LIST
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: ST_TO_ADDR
// end ; 2 :
71122: GO 71681
71124: LD_INT 2
71126: DOUBLE
71127: EQUAL
71128: IFTRUE 71132
71130: GO 71261
71132: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71133: LD_ADDR_VAR 0 5
71137: PUSH
71138: LD_VAR 0 1
71142: PUSH
71143: LD_VAR 0 2
71147: PUSH
71148: LD_INT 3
71150: MINUS
71151: PUSH
71152: LD_INT 3
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: LIST
71159: PUSH
71160: LD_VAR 0 1
71164: PUSH
71165: LD_INT 4
71167: PLUS
71168: PUSH
71169: LD_VAR 0 2
71173: PUSH
71174: LD_INT 4
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: LIST
71181: PUSH
71182: LD_VAR 0 1
71186: PUSH
71187: LD_VAR 0 2
71191: PUSH
71192: LD_INT 4
71194: PLUS
71195: PUSH
71196: LD_INT 0
71198: PUSH
71199: EMPTY
71200: LIST
71201: LIST
71202: LIST
71203: PUSH
71204: LD_VAR 0 1
71208: PUSH
71209: LD_INT 3
71211: MINUS
71212: PUSH
71213: LD_VAR 0 2
71217: PUSH
71218: LD_INT 1
71220: PUSH
71221: EMPTY
71222: LIST
71223: LIST
71224: LIST
71225: PUSH
71226: LD_VAR 0 1
71230: PUSH
71231: LD_INT 4
71233: MINUS
71234: PUSH
71235: LD_VAR 0 2
71239: PUSH
71240: LD_INT 4
71242: MINUS
71243: PUSH
71244: LD_INT 2
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: LIST
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: ST_TO_ADDR
// end ; 3 :
71259: GO 71681
71261: LD_INT 3
71263: DOUBLE
71264: EQUAL
71265: IFTRUE 71269
71267: GO 71402
71269: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71270: LD_ADDR_VAR 0 5
71274: PUSH
71275: LD_VAR 0 1
71279: PUSH
71280: LD_INT 3
71282: PLUS
71283: PUSH
71284: LD_VAR 0 2
71288: PUSH
71289: LD_INT 4
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: LIST
71296: PUSH
71297: LD_VAR 0 1
71301: PUSH
71302: LD_INT 4
71304: PLUS
71305: PUSH
71306: LD_VAR 0 2
71310: PUSH
71311: LD_INT 4
71313: PLUS
71314: PUSH
71315: LD_INT 5
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: LIST
71322: PUSH
71323: LD_VAR 0 1
71327: PUSH
71328: LD_INT 4
71330: MINUS
71331: PUSH
71332: LD_VAR 0 2
71336: PUSH
71337: LD_INT 1
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: LIST
71344: PUSH
71345: LD_VAR 0 1
71349: PUSH
71350: LD_VAR 0 2
71354: PUSH
71355: LD_INT 4
71357: MINUS
71358: PUSH
71359: LD_INT 3
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: LIST
71366: PUSH
71367: LD_VAR 0 1
71371: PUSH
71372: LD_INT 3
71374: MINUS
71375: PUSH
71376: LD_VAR 0 2
71380: PUSH
71381: LD_INT 3
71383: MINUS
71384: PUSH
71385: LD_INT 2
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: LIST
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: ST_TO_ADDR
// end ; 4 :
71400: GO 71681
71402: LD_INT 4
71404: DOUBLE
71405: EQUAL
71406: IFTRUE 71410
71408: GO 71543
71410: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71411: LD_ADDR_VAR 0 5
71415: PUSH
71416: LD_VAR 0 1
71420: PUSH
71421: LD_VAR 0 2
71425: PUSH
71426: LD_INT 4
71428: PLUS
71429: PUSH
71430: LD_INT 0
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: LIST
71437: PUSH
71438: LD_VAR 0 1
71442: PUSH
71443: LD_INT 3
71445: PLUS
71446: PUSH
71447: LD_VAR 0 2
71451: PUSH
71452: LD_INT 3
71454: PLUS
71455: PUSH
71456: LD_INT 5
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: LIST
71463: PUSH
71464: LD_VAR 0 1
71468: PUSH
71469: LD_INT 4
71471: PLUS
71472: PUSH
71473: LD_VAR 0 2
71477: PUSH
71478: LD_INT 4
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: LIST
71485: PUSH
71486: LD_VAR 0 1
71490: PUSH
71491: LD_VAR 0 2
71495: PUSH
71496: LD_INT 3
71498: MINUS
71499: PUSH
71500: LD_INT 3
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: LIST
71507: PUSH
71508: LD_VAR 0 1
71512: PUSH
71513: LD_INT 4
71515: MINUS
71516: PUSH
71517: LD_VAR 0 2
71521: PUSH
71522: LD_INT 4
71524: MINUS
71525: PUSH
71526: LD_INT 2
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: LIST
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: ST_TO_ADDR
// end ; 5 :
71541: GO 71681
71543: LD_INT 5
71545: DOUBLE
71546: EQUAL
71547: IFTRUE 71551
71549: GO 71680
71551: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71552: LD_ADDR_VAR 0 5
71556: PUSH
71557: LD_VAR 0 1
71561: PUSH
71562: LD_INT 4
71564: MINUS
71565: PUSH
71566: LD_VAR 0 2
71570: PUSH
71571: LD_INT 1
71573: PUSH
71574: EMPTY
71575: LIST
71576: LIST
71577: LIST
71578: PUSH
71579: LD_VAR 0 1
71583: PUSH
71584: LD_VAR 0 2
71588: PUSH
71589: LD_INT 4
71591: MINUS
71592: PUSH
71593: LD_INT 3
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: LIST
71600: PUSH
71601: LD_VAR 0 1
71605: PUSH
71606: LD_INT 4
71608: PLUS
71609: PUSH
71610: LD_VAR 0 2
71614: PUSH
71615: LD_INT 4
71617: PLUS
71618: PUSH
71619: LD_INT 5
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: LIST
71626: PUSH
71627: LD_VAR 0 1
71631: PUSH
71632: LD_INT 3
71634: PLUS
71635: PUSH
71636: LD_VAR 0 2
71640: PUSH
71641: LD_INT 4
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: LIST
71648: PUSH
71649: LD_VAR 0 1
71653: PUSH
71654: LD_VAR 0 2
71658: PUSH
71659: LD_INT 3
71661: PLUS
71662: PUSH
71663: LD_INT 0
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: LIST
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: ST_TO_ADDR
// end ; end ;
71678: GO 71681
71680: POP
// result := list ;
71681: LD_ADDR_VAR 0 4
71685: PUSH
71686: LD_VAR 0 5
71690: ST_TO_ADDR
// end ;
71691: LD_VAR 0 4
71695: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71696: LD_INT 0
71698: PPUSH
71699: PPUSH
71700: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71701: LD_VAR 0 1
71705: NOT
71706: PUSH
71707: LD_VAR 0 2
71711: PUSH
71712: LD_INT 1
71714: PUSH
71715: LD_INT 2
71717: PUSH
71718: LD_INT 3
71720: PUSH
71721: LD_INT 4
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: IN
71730: NOT
71731: OR
71732: IFFALSE 71736
// exit ;
71734: GO 71828
// tmp := [ ] ;
71736: LD_ADDR_VAR 0 5
71740: PUSH
71741: EMPTY
71742: ST_TO_ADDR
// for i in units do
71743: LD_ADDR_VAR 0 4
71747: PUSH
71748: LD_VAR 0 1
71752: PUSH
71753: FOR_IN
71754: IFFALSE 71797
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71756: LD_ADDR_VAR 0 5
71760: PUSH
71761: LD_VAR 0 5
71765: PPUSH
71766: LD_VAR 0 5
71770: PUSH
71771: LD_INT 1
71773: PLUS
71774: PPUSH
71775: LD_VAR 0 4
71779: PPUSH
71780: LD_VAR 0 2
71784: PPUSH
71785: CALL_OW 259
71789: PPUSH
71790: CALL_OW 2
71794: ST_TO_ADDR
71795: GO 71753
71797: POP
71798: POP
// if not tmp then
71799: LD_VAR 0 5
71803: NOT
71804: IFFALSE 71808
// exit ;
71806: GO 71828
// result := SortListByListDesc ( units , tmp ) ;
71808: LD_ADDR_VAR 0 3
71812: PUSH
71813: LD_VAR 0 1
71817: PPUSH
71818: LD_VAR 0 5
71822: PPUSH
71823: CALL_OW 77
71827: ST_TO_ADDR
// end ;
71828: LD_VAR 0 3
71832: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71833: LD_INT 0
71835: PPUSH
71836: PPUSH
71837: PPUSH
// x := GetX ( building ) ;
71838: LD_ADDR_VAR 0 4
71842: PUSH
71843: LD_VAR 0 2
71847: PPUSH
71848: CALL_OW 250
71852: ST_TO_ADDR
// y := GetY ( building ) ;
71853: LD_ADDR_VAR 0 5
71857: PUSH
71858: LD_VAR 0 2
71862: PPUSH
71863: CALL_OW 251
71867: ST_TO_ADDR
// if GetTaskList ( unit ) then
71868: LD_VAR 0 1
71872: PPUSH
71873: CALL_OW 437
71877: IFFALSE 71972
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71879: LD_STRING e
71881: PUSH
71882: LD_VAR 0 1
71886: PPUSH
71887: CALL_OW 437
71891: PUSH
71892: LD_INT 1
71894: ARRAY
71895: PUSH
71896: LD_INT 1
71898: ARRAY
71899: EQUAL
71900: PUSH
71901: LD_VAR 0 4
71905: PUSH
71906: LD_VAR 0 1
71910: PPUSH
71911: CALL_OW 437
71915: PUSH
71916: LD_INT 1
71918: ARRAY
71919: PUSH
71920: LD_INT 2
71922: ARRAY
71923: EQUAL
71924: AND
71925: PUSH
71926: LD_VAR 0 5
71930: PUSH
71931: LD_VAR 0 1
71935: PPUSH
71936: CALL_OW 437
71940: PUSH
71941: LD_INT 1
71943: ARRAY
71944: PUSH
71945: LD_INT 3
71947: ARRAY
71948: EQUAL
71949: AND
71950: IFFALSE 71962
// result := true else
71952: LD_ADDR_VAR 0 3
71956: PUSH
71957: LD_INT 1
71959: ST_TO_ADDR
71960: GO 71970
// result := false ;
71962: LD_ADDR_VAR 0 3
71966: PUSH
71967: LD_INT 0
71969: ST_TO_ADDR
// end else
71970: GO 71980
// result := false ;
71972: LD_ADDR_VAR 0 3
71976: PUSH
71977: LD_INT 0
71979: ST_TO_ADDR
// end ;
71980: LD_VAR 0 3
71984: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71985: LD_INT 0
71987: PPUSH
71988: PPUSH
71989: PPUSH
71990: PPUSH
// if not unit or not area then
71991: LD_VAR 0 1
71995: NOT
71996: PUSH
71997: LD_VAR 0 2
72001: NOT
72002: OR
72003: IFFALSE 72007
// exit ;
72005: GO 72171
// tmp := AreaToList ( area , i ) ;
72007: LD_ADDR_VAR 0 6
72011: PUSH
72012: LD_VAR 0 2
72016: PPUSH
72017: LD_VAR 0 5
72021: PPUSH
72022: CALL_OW 517
72026: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72027: LD_ADDR_VAR 0 5
72031: PUSH
72032: DOUBLE
72033: LD_INT 1
72035: DEC
72036: ST_TO_ADDR
72037: LD_VAR 0 6
72041: PUSH
72042: LD_INT 1
72044: ARRAY
72045: PUSH
72046: FOR_TO
72047: IFFALSE 72169
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72049: LD_ADDR_VAR 0 7
72053: PUSH
72054: LD_VAR 0 6
72058: PUSH
72059: LD_INT 1
72061: ARRAY
72062: PUSH
72063: LD_VAR 0 5
72067: ARRAY
72068: PUSH
72069: LD_VAR 0 6
72073: PUSH
72074: LD_INT 2
72076: ARRAY
72077: PUSH
72078: LD_VAR 0 5
72082: ARRAY
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72088: LD_VAR 0 7
72092: PUSH
72093: LD_INT 1
72095: ARRAY
72096: PPUSH
72097: LD_VAR 0 7
72101: PUSH
72102: LD_INT 2
72104: ARRAY
72105: PPUSH
72106: CALL_OW 428
72110: PUSH
72111: LD_INT 0
72113: EQUAL
72114: IFFALSE 72167
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72116: LD_VAR 0 1
72120: PPUSH
72121: LD_VAR 0 7
72125: PUSH
72126: LD_INT 1
72128: ARRAY
72129: PPUSH
72130: LD_VAR 0 7
72134: PUSH
72135: LD_INT 2
72137: ARRAY
72138: PPUSH
72139: LD_VAR 0 3
72143: PPUSH
72144: CALL_OW 48
// result := IsPlaced ( unit ) ;
72148: LD_ADDR_VAR 0 4
72152: PUSH
72153: LD_VAR 0 1
72157: PPUSH
72158: CALL_OW 305
72162: ST_TO_ADDR
// exit ;
72163: POP
72164: POP
72165: GO 72171
// end ; end ;
72167: GO 72046
72169: POP
72170: POP
// end ;
72171: LD_VAR 0 4
72175: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72176: LD_INT 0
72178: PPUSH
72179: PPUSH
72180: PPUSH
// if not side or side > 8 then
72181: LD_VAR 0 1
72185: NOT
72186: PUSH
72187: LD_VAR 0 1
72191: PUSH
72192: LD_INT 8
72194: GREATER
72195: OR
72196: IFFALSE 72200
// exit ;
72198: GO 72387
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72200: LD_ADDR_VAR 0 4
72204: PUSH
72205: LD_INT 22
72207: PUSH
72208: LD_VAR 0 1
72212: PUSH
72213: EMPTY
72214: LIST
72215: LIST
72216: PUSH
72217: LD_INT 21
72219: PUSH
72220: LD_INT 3
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PPUSH
72231: CALL_OW 69
72235: ST_TO_ADDR
// if not tmp then
72236: LD_VAR 0 4
72240: NOT
72241: IFFALSE 72245
// exit ;
72243: GO 72387
// enable_addtolog := true ;
72245: LD_ADDR_OWVAR 81
72249: PUSH
72250: LD_INT 1
72252: ST_TO_ADDR
// AddToLog ( [ ) ;
72253: LD_STRING [
72255: PPUSH
72256: CALL_OW 561
// for i in tmp do
72260: LD_ADDR_VAR 0 3
72264: PUSH
72265: LD_VAR 0 4
72269: PUSH
72270: FOR_IN
72271: IFFALSE 72378
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72273: LD_STRING [
72275: PUSH
72276: LD_VAR 0 3
72280: PPUSH
72281: CALL_OW 266
72285: STR
72286: PUSH
72287: LD_STRING , 
72289: STR
72290: PUSH
72291: LD_VAR 0 3
72295: PPUSH
72296: CALL_OW 250
72300: STR
72301: PUSH
72302: LD_STRING , 
72304: STR
72305: PUSH
72306: LD_VAR 0 3
72310: PPUSH
72311: CALL_OW 251
72315: STR
72316: PUSH
72317: LD_STRING , 
72319: STR
72320: PUSH
72321: LD_VAR 0 3
72325: PPUSH
72326: CALL_OW 254
72330: STR
72331: PUSH
72332: LD_STRING , 
72334: STR
72335: PUSH
72336: LD_VAR 0 3
72340: PPUSH
72341: LD_INT 1
72343: PPUSH
72344: CALL_OW 268
72348: STR
72349: PUSH
72350: LD_STRING , 
72352: STR
72353: PUSH
72354: LD_VAR 0 3
72358: PPUSH
72359: LD_INT 2
72361: PPUSH
72362: CALL_OW 268
72366: STR
72367: PUSH
72368: LD_STRING ],
72370: STR
72371: PPUSH
72372: CALL_OW 561
// end ;
72376: GO 72270
72378: POP
72379: POP
// AddToLog ( ]; ) ;
72380: LD_STRING ];
72382: PPUSH
72383: CALL_OW 561
// end ;
72387: LD_VAR 0 2
72391: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72392: LD_INT 0
72394: PPUSH
72395: PPUSH
72396: PPUSH
72397: PPUSH
72398: PPUSH
// if not area or not rate or not max then
72399: LD_VAR 0 1
72403: NOT
72404: PUSH
72405: LD_VAR 0 2
72409: NOT
72410: OR
72411: PUSH
72412: LD_VAR 0 4
72416: NOT
72417: OR
72418: IFFALSE 72422
// exit ;
72420: GO 72614
// while 1 do
72422: LD_INT 1
72424: IFFALSE 72614
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72426: LD_ADDR_VAR 0 9
72430: PUSH
72431: LD_VAR 0 1
72435: PPUSH
72436: LD_INT 1
72438: PPUSH
72439: CALL_OW 287
72443: PUSH
72444: LD_INT 10
72446: MUL
72447: ST_TO_ADDR
// r := rate / 10 ;
72448: LD_ADDR_VAR 0 7
72452: PUSH
72453: LD_VAR 0 2
72457: PUSH
72458: LD_INT 10
72460: DIVREAL
72461: ST_TO_ADDR
// time := 1 1$00 ;
72462: LD_ADDR_VAR 0 8
72466: PUSH
72467: LD_INT 2100
72469: ST_TO_ADDR
// if amount < min then
72470: LD_VAR 0 9
72474: PUSH
72475: LD_VAR 0 3
72479: LESS
72480: IFFALSE 72498
// r := r * 2 else
72482: LD_ADDR_VAR 0 7
72486: PUSH
72487: LD_VAR 0 7
72491: PUSH
72492: LD_INT 2
72494: MUL
72495: ST_TO_ADDR
72496: GO 72524
// if amount > max then
72498: LD_VAR 0 9
72502: PUSH
72503: LD_VAR 0 4
72507: GREATER
72508: IFFALSE 72524
// r := r / 2 ;
72510: LD_ADDR_VAR 0 7
72514: PUSH
72515: LD_VAR 0 7
72519: PUSH
72520: LD_INT 2
72522: DIVREAL
72523: ST_TO_ADDR
// time := time / r ;
72524: LD_ADDR_VAR 0 8
72528: PUSH
72529: LD_VAR 0 8
72533: PUSH
72534: LD_VAR 0 7
72538: DIVREAL
72539: ST_TO_ADDR
// if time < 0 then
72540: LD_VAR 0 8
72544: PUSH
72545: LD_INT 0
72547: LESS
72548: IFFALSE 72565
// time := time * - 1 ;
72550: LD_ADDR_VAR 0 8
72554: PUSH
72555: LD_VAR 0 8
72559: PUSH
72560: LD_INT 1
72562: NEG
72563: MUL
72564: ST_TO_ADDR
// wait ( time ) ;
72565: LD_VAR 0 8
72569: PPUSH
72570: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72574: LD_INT 35
72576: PPUSH
72577: LD_INT 875
72579: PPUSH
72580: CALL_OW 12
72584: PPUSH
72585: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72589: LD_INT 1
72591: PPUSH
72592: LD_INT 5
72594: PPUSH
72595: CALL_OW 12
72599: PPUSH
72600: LD_VAR 0 1
72604: PPUSH
72605: LD_INT 1
72607: PPUSH
72608: CALL_OW 55
// end ;
72612: GO 72422
// end ;
72614: LD_VAR 0 5
72618: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72619: LD_INT 0
72621: PPUSH
72622: PPUSH
72623: PPUSH
72624: PPUSH
72625: PPUSH
72626: PPUSH
72627: PPUSH
72628: PPUSH
// if not turrets or not factories then
72629: LD_VAR 0 1
72633: NOT
72634: PUSH
72635: LD_VAR 0 2
72639: NOT
72640: OR
72641: IFFALSE 72645
// exit ;
72643: GO 72952
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72645: LD_ADDR_VAR 0 10
72649: PUSH
72650: LD_INT 5
72652: PUSH
72653: LD_INT 6
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 2
72662: PUSH
72663: LD_INT 4
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: PUSH
72670: LD_INT 3
72672: PUSH
72673: LD_INT 5
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: LIST
72684: PUSH
72685: LD_INT 24
72687: PUSH
72688: LD_INT 25
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: LD_INT 23
72697: PUSH
72698: LD_INT 27
72700: PUSH
72701: EMPTY
72702: LIST
72703: LIST
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: PUSH
72709: LD_INT 42
72711: PUSH
72712: LD_INT 43
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: LD_INT 44
72721: PUSH
72722: LD_INT 46
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: LD_INT 45
72731: PUSH
72732: LD_INT 47
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: LIST
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: LIST
72748: ST_TO_ADDR
// result := [ ] ;
72749: LD_ADDR_VAR 0 3
72753: PUSH
72754: EMPTY
72755: ST_TO_ADDR
// for i in turrets do
72756: LD_ADDR_VAR 0 4
72760: PUSH
72761: LD_VAR 0 1
72765: PUSH
72766: FOR_IN
72767: IFFALSE 72950
// begin nat := GetNation ( i ) ;
72769: LD_ADDR_VAR 0 7
72773: PUSH
72774: LD_VAR 0 4
72778: PPUSH
72779: CALL_OW 248
72783: ST_TO_ADDR
// weapon := 0 ;
72784: LD_ADDR_VAR 0 8
72788: PUSH
72789: LD_INT 0
72791: ST_TO_ADDR
// if not nat then
72792: LD_VAR 0 7
72796: NOT
72797: IFFALSE 72801
// continue ;
72799: GO 72766
// for j in list [ nat ] do
72801: LD_ADDR_VAR 0 5
72805: PUSH
72806: LD_VAR 0 10
72810: PUSH
72811: LD_VAR 0 7
72815: ARRAY
72816: PUSH
72817: FOR_IN
72818: IFFALSE 72859
// if GetBWeapon ( i ) = j [ 1 ] then
72820: LD_VAR 0 4
72824: PPUSH
72825: CALL_OW 269
72829: PUSH
72830: LD_VAR 0 5
72834: PUSH
72835: LD_INT 1
72837: ARRAY
72838: EQUAL
72839: IFFALSE 72857
// begin weapon := j [ 2 ] ;
72841: LD_ADDR_VAR 0 8
72845: PUSH
72846: LD_VAR 0 5
72850: PUSH
72851: LD_INT 2
72853: ARRAY
72854: ST_TO_ADDR
// break ;
72855: GO 72859
// end ;
72857: GO 72817
72859: POP
72860: POP
// if not weapon then
72861: LD_VAR 0 8
72865: NOT
72866: IFFALSE 72870
// continue ;
72868: GO 72766
// for k in factories do
72870: LD_ADDR_VAR 0 6
72874: PUSH
72875: LD_VAR 0 2
72879: PUSH
72880: FOR_IN
72881: IFFALSE 72946
// begin weapons := AvailableWeaponList ( k ) ;
72883: LD_ADDR_VAR 0 9
72887: PUSH
72888: LD_VAR 0 6
72892: PPUSH
72893: CALL_OW 478
72897: ST_TO_ADDR
// if not weapons then
72898: LD_VAR 0 9
72902: NOT
72903: IFFALSE 72907
// continue ;
72905: GO 72880
// if weapon in weapons then
72907: LD_VAR 0 8
72911: PUSH
72912: LD_VAR 0 9
72916: IN
72917: IFFALSE 72944
// begin result := [ i , weapon ] ;
72919: LD_ADDR_VAR 0 3
72923: PUSH
72924: LD_VAR 0 4
72928: PUSH
72929: LD_VAR 0 8
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: ST_TO_ADDR
// exit ;
72938: POP
72939: POP
72940: POP
72941: POP
72942: GO 72952
// end ; end ;
72944: GO 72880
72946: POP
72947: POP
// end ;
72948: GO 72766
72950: POP
72951: POP
// end ;
72952: LD_VAR 0 3
72956: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72957: LD_INT 0
72959: PPUSH
// if not side or side > 8 then
72960: LD_VAR 0 3
72964: NOT
72965: PUSH
72966: LD_VAR 0 3
72970: PUSH
72971: LD_INT 8
72973: GREATER
72974: OR
72975: IFFALSE 72979
// exit ;
72977: GO 73038
// if not range then
72979: LD_VAR 0 4
72983: NOT
72984: IFFALSE 72995
// range := - 12 ;
72986: LD_ADDR_VAR 0 4
72990: PUSH
72991: LD_INT 12
72993: NEG
72994: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72995: LD_VAR 0 1
72999: PPUSH
73000: LD_VAR 0 2
73004: PPUSH
73005: LD_VAR 0 3
73009: PPUSH
73010: LD_VAR 0 4
73014: PPUSH
73015: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73019: LD_VAR 0 1
73023: PPUSH
73024: LD_VAR 0 2
73028: PPUSH
73029: LD_VAR 0 3
73033: PPUSH
73034: CALL_OW 331
// end ;
73038: LD_VAR 0 5
73042: RET
// export function Video ( mode ) ; begin
73043: LD_INT 0
73045: PPUSH
// ingame_video = mode ;
73046: LD_ADDR_OWVAR 52
73050: PUSH
73051: LD_VAR 0 1
73055: ST_TO_ADDR
// interface_hidden = mode ;
73056: LD_ADDR_OWVAR 54
73060: PUSH
73061: LD_VAR 0 1
73065: ST_TO_ADDR
// end ;
73066: LD_VAR 0 2
73070: RET
// export function Join ( array , element ) ; begin
73071: LD_INT 0
73073: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73074: LD_ADDR_VAR 0 3
73078: PUSH
73079: LD_VAR 0 1
73083: PPUSH
73084: LD_VAR 0 1
73088: PUSH
73089: LD_INT 1
73091: PLUS
73092: PPUSH
73093: LD_VAR 0 2
73097: PPUSH
73098: CALL_OW 1
73102: ST_TO_ADDR
// end ;
73103: LD_VAR 0 3
73107: RET
// export function JoinUnion ( array , element ) ; begin
73108: LD_INT 0
73110: PPUSH
// result := array union element ;
73111: LD_ADDR_VAR 0 3
73115: PUSH
73116: LD_VAR 0 1
73120: PUSH
73121: LD_VAR 0 2
73125: UNION
73126: ST_TO_ADDR
// end ;
73127: LD_VAR 0 3
73131: RET
// export function GetBehemoths ( side ) ; begin
73132: LD_INT 0
73134: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73135: LD_ADDR_VAR 0 2
73139: PUSH
73140: LD_INT 22
73142: PUSH
73143: LD_VAR 0 1
73147: PUSH
73148: EMPTY
73149: LIST
73150: LIST
73151: PUSH
73152: LD_INT 31
73154: PUSH
73155: LD_INT 25
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: PPUSH
73166: CALL_OW 69
73170: ST_TO_ADDR
// end ;
73171: LD_VAR 0 2
73175: RET
// export function Shuffle ( array ) ; var i , index ; begin
73176: LD_INT 0
73178: PPUSH
73179: PPUSH
73180: PPUSH
// result := [ ] ;
73181: LD_ADDR_VAR 0 2
73185: PUSH
73186: EMPTY
73187: ST_TO_ADDR
// if not array then
73188: LD_VAR 0 1
73192: NOT
73193: IFFALSE 73197
// exit ;
73195: GO 73296
// Randomize ;
73197: CALL_OW 10
// for i = array downto 1 do
73201: LD_ADDR_VAR 0 3
73205: PUSH
73206: DOUBLE
73207: LD_VAR 0 1
73211: INC
73212: ST_TO_ADDR
73213: LD_INT 1
73215: PUSH
73216: FOR_DOWNTO
73217: IFFALSE 73294
// begin index := rand ( 1 , array ) ;
73219: LD_ADDR_VAR 0 4
73223: PUSH
73224: LD_INT 1
73226: PPUSH
73227: LD_VAR 0 1
73231: PPUSH
73232: CALL_OW 12
73236: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73237: LD_ADDR_VAR 0 2
73241: PUSH
73242: LD_VAR 0 2
73246: PPUSH
73247: LD_VAR 0 2
73251: PUSH
73252: LD_INT 1
73254: PLUS
73255: PPUSH
73256: LD_VAR 0 1
73260: PUSH
73261: LD_VAR 0 4
73265: ARRAY
73266: PPUSH
73267: CALL_OW 2
73271: ST_TO_ADDR
// array := Delete ( array , index ) ;
73272: LD_ADDR_VAR 0 1
73276: PUSH
73277: LD_VAR 0 1
73281: PPUSH
73282: LD_VAR 0 4
73286: PPUSH
73287: CALL_OW 3
73291: ST_TO_ADDR
// end ;
73292: GO 73216
73294: POP
73295: POP
// end ;
73296: LD_VAR 0 2
73300: RET
// export function GetBaseMaterials ( base ) ; begin
73301: LD_INT 0
73303: PPUSH
// result := [ 0 , 0 , 0 ] ;
73304: LD_ADDR_VAR 0 2
73308: PUSH
73309: LD_INT 0
73311: PUSH
73312: LD_INT 0
73314: PUSH
73315: LD_INT 0
73317: PUSH
73318: EMPTY
73319: LIST
73320: LIST
73321: LIST
73322: ST_TO_ADDR
// if not base then
73323: LD_VAR 0 1
73327: NOT
73328: IFFALSE 73332
// exit ;
73330: GO 73381
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73332: LD_ADDR_VAR 0 2
73336: PUSH
73337: LD_VAR 0 1
73341: PPUSH
73342: LD_INT 1
73344: PPUSH
73345: CALL_OW 275
73349: PUSH
73350: LD_VAR 0 1
73354: PPUSH
73355: LD_INT 2
73357: PPUSH
73358: CALL_OW 275
73362: PUSH
73363: LD_VAR 0 1
73367: PPUSH
73368: LD_INT 3
73370: PPUSH
73371: CALL_OW 275
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: LIST
73380: ST_TO_ADDR
// end ;
73381: LD_VAR 0 2
73385: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73386: LD_INT 0
73388: PPUSH
73389: PPUSH
// result := array ;
73390: LD_ADDR_VAR 0 3
73394: PUSH
73395: LD_VAR 0 1
73399: ST_TO_ADDR
// if size > 0 then
73400: LD_VAR 0 2
73404: PUSH
73405: LD_INT 0
73407: GREATER
73408: IFFALSE 73454
// for i := array downto size do
73410: LD_ADDR_VAR 0 4
73414: PUSH
73415: DOUBLE
73416: LD_VAR 0 1
73420: INC
73421: ST_TO_ADDR
73422: LD_VAR 0 2
73426: PUSH
73427: FOR_DOWNTO
73428: IFFALSE 73452
// result := Delete ( result , result ) ;
73430: LD_ADDR_VAR 0 3
73434: PUSH
73435: LD_VAR 0 3
73439: PPUSH
73440: LD_VAR 0 3
73444: PPUSH
73445: CALL_OW 3
73449: ST_TO_ADDR
73450: GO 73427
73452: POP
73453: POP
// end ;
73454: LD_VAR 0 3
73458: RET
// export function ComExit ( unit ) ; var tmp ; begin
73459: LD_INT 0
73461: PPUSH
73462: PPUSH
// if not IsInUnit ( unit ) then
73463: LD_VAR 0 1
73467: PPUSH
73468: CALL_OW 310
73472: NOT
73473: IFFALSE 73477
// exit ;
73475: GO 73537
// tmp := IsInUnit ( unit ) ;
73477: LD_ADDR_VAR 0 3
73481: PUSH
73482: LD_VAR 0 1
73486: PPUSH
73487: CALL_OW 310
73491: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73492: LD_VAR 0 3
73496: PPUSH
73497: CALL_OW 247
73501: PUSH
73502: LD_INT 2
73504: EQUAL
73505: IFFALSE 73518
// ComExitVehicle ( unit ) else
73507: LD_VAR 0 1
73511: PPUSH
73512: CALL_OW 121
73516: GO 73527
// ComExitBuilding ( unit ) ;
73518: LD_VAR 0 1
73522: PPUSH
73523: CALL_OW 122
// result := tmp ;
73527: LD_ADDR_VAR 0 2
73531: PUSH
73532: LD_VAR 0 3
73536: ST_TO_ADDR
// end ;
73537: LD_VAR 0 2
73541: RET
// export function ResetHc ; begin
73542: LD_INT 0
73544: PPUSH
// InitHc ;
73545: CALL_OW 19
// hc_importance := 0 ;
73549: LD_ADDR_OWVAR 32
73553: PUSH
73554: LD_INT 0
73556: ST_TO_ADDR
// end ;
73557: LD_VAR 0 1
73561: RET
