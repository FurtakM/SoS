// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4687 0 0
// PrepareRussianBase ;
  29: CALL 2976 0 0
// PrepareRussianCommander ;
  33: CALL 2927 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8306 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild = 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode = 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible = 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack = 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson = 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase = 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer = 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus = 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer = 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog = 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog = 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog = 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil = 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower = 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable = 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter = 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor = 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 39668 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 39668 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: LD_EXP 49
 585: PPUSH
 586: CALL 39668 0 3
 590: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 591: LD_ADDR_EXP 8
 595: PUSH
 596: LD_STRING Dickens
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: LD_EXP 49
 606: PPUSH
 607: CALL 39668 0 3
 611: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 612: LD_ADDR_EXP 9
 616: PUSH
 617: LD_STRING Woodruff
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_EXP 49
 627: PPUSH
 628: CALL 39668 0 3
 632: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 633: LD_ADDR_EXP 12
 637: PUSH
 638: LD_STRING Campell
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_EXP 49
 648: PPUSH
 649: CALL 39668 0 3
 653: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING Knight
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: LD_EXP 49
 669: PPUSH
 670: CALL 39668 0 3
 674: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 675: LD_ADDR_EXP 11
 679: PUSH
 680: LD_STRING Claptopn
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_EXP 49
 690: PPUSH
 691: CALL 39668 0 3
 695: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING Harisson
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: LD_EXP 49
 711: PPUSH
 712: CALL 39668 0 3
 716: ST_TO_ADDR
// if not Lisa then
 717: LD_EXP 4
 721: NOT
 722: IFFALSE 745
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 724: LD_ADDR_EXP 2
 728: PUSH
 729: LD_STRING Bobby
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_EXP 49
 739: PPUSH
 740: CALL 39668 0 3
 744: ST_TO_ADDR
// if not Lisa and not Bobby then
 745: LD_EXP 4
 749: NOT
 750: PUSH
 751: LD_EXP 2
 755: NOT
 756: AND
 757: IFFALSE 780
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 759: LD_ADDR_EXP 3
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_EXP 49
 774: PPUSH
 775: CALL 39668 0 3
 779: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 780: LD_EXP 4
 784: NOT
 785: PUSH
 786: LD_EXP 2
 790: NOT
 791: AND
 792: PUSH
 793: LD_EXP 3
 797: NOT
 798: AND
 799: IFFALSE 898
// begin tmp = CreateCharacterSet ( 03_others ) ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 31
 813: ST_TO_ADDR
// if tmp then
 814: LD_VAR 0 3
 818: IFFALSE 875
// begin RandomBeforeMission = tmp [ 1 ] ;
 820: LD_ADDR_EXP 6
 824: PUSH
 825: LD_VAR 0 3
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 834: LD_STRING 03_others
 836: PPUSH
 837: CALL_OW 40
// if tmp > 1 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: GREATER
 849: IFFALSE 873
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: DIFF
 865: PPUSH
 866: LD_STRING 03_others
 868: PPUSH
 869: CALL_OW 38
// end else
 873: GO 898
// begin PrepareHuman ( false , 1 , 3 ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: LD_INT 3
 883: PPUSH
 884: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 888: LD_ADDR_EXP 6
 892: PUSH
 893: CALL_OW 44
 897: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 4
 905: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 906: LD_ADDR_EXP 13
 910: PUSH
 911: LD_STRING Donaldson
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: LD_EXP 49
 921: PPUSH
 922: CALL 39668 0 3
 926: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Frank
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 39668 0 3
 947: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 32
 955: PPUSH
 956: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 960: LD_EXP 7
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 975: LD_EXP 7
 979: PPUSH
 980: LD_INT 32
 982: PPUSH
 983: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 987: LD_EXP 8
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1002: LD_EXP 9
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1017: LD_EXP 12
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1032: LD_EXP 10
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1047: LD_EXP 11
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 49
// if Lisa = false then
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1087: LD_EXP 2
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// if Lisa = false and Bobby = false then
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: PUSH
1111: LD_EXP 2
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1137: LD_EXP 4
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: PUSH
1146: LD_EXP 2
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: PUSH
1156: LD_EXP 3
1160: PUSH
1161: LD_INT 0
1163: EQUAL
1164: AND
1165: IFFALSE 1182
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1167: LD_EXP 6
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 49
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1187: LD_INT 0
1189: PPUSH
1190: PPUSH
1191: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1192: LD_EXP 13
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// if Frank then
1207: LD_EXP 5
1211: IFFALSE 1228
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1213: LD_EXP 5
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// uc_nation = 1 ;
1228: LD_ADDR_OWVAR 21
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// uc_side = 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// hc_class := 3 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING SecondCharsGal
1267: ST_TO_ADDR
// hc_face_number := 53 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 53
1275: ST_TO_ADDR
// hc_name := Freddie Warner ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Freddie Warner
1283: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 8
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 2
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 56 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 56
1401: ST_TO_ADDR
// hc_name := Mel Brennan ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Mel Brennan
1409: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 12
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// hc_class := 1 ;
1496: LD_ADDR_OWVAR 28
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_sex := sex_male ;
1504: LD_ADDR_OWVAR 27
1508: PUSH
1509: LD_INT 1
1511: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING AmGalRemake
1519: ST_TO_ADDR
// hc_face_number := 5 ;
1520: LD_ADDR_OWVAR 34
1524: PUSH
1525: LD_INT 5
1527: ST_TO_ADDR
// hc_name := Bob Joplin ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Bob Joplin
1535: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1536: LD_ADDR_OWVAR 29
1540: PUSH
1541: LD_INT 10
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1551: LD_ADDR_OWVAR 30
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1574: LD_ADDR_OWVAR 31
1578: PUSH
1579: LD_INT 3
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// un = CreateHuman ;
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: CALL_OW 44
1606: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1607: LD_VAR 0 3
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// hc_class := 3 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// hc_sex := sex_female ;
1630: LD_ADDR_OWVAR 27
1634: PUSH
1635: LD_INT 2
1637: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING AmGalRemake
1645: ST_TO_ADDR
// hc_face_number := 8 ;
1646: LD_ADDR_OWVAR 34
1650: PUSH
1651: LD_INT 8
1653: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1654: LD_ADDR_OWVAR 26
1658: PUSH
1659: LD_STRING Elizabeth Whitney
1661: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1662: LD_ADDR_OWVAR 29
1666: PUSH
1667: LD_INT 9
1669: PUSH
1670: LD_INT 11
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1677: LD_ADDR_OWVAR 30
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1700: LD_ADDR_OWVAR 31
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: LD_INT 4
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// un = CreateHuman ;
1723: LD_ADDR_VAR 0 3
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// InitHc ;
1748: CALL_OW 19
// end ;
1752: LD_VAR 0 1
1756: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
1761: PPUSH
1762: PPUSH
// uc_nation = 1 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// uc_side = 1 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 2
1786: ST_TO_ADDR
// vc_engine := engine_combustion ;
1787: LD_ADDR_OWVAR 39
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_control := control_manual ;
1795: LD_ADDR_OWVAR 38
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1803: LD_ADDR_OWVAR 41
1807: PUSH
1808: LD_INT 65
1810: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_OWVAR 67
1838: ARRAY
1839: ST_TO_ADDR
// veh := CreateVehicle ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 2
1857: PPUSH
1858: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: CALL_OW 428
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: IFFALSE 1898
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1878: LD_VAR 0 5
1882: PPUSH
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 48
1896: GO 1916
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1898: LD_VAR 0 5
1902: PPUSH
1903: LD_INT 23
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 48
// hc_class := 1 ;
1916: LD_ADDR_OWVAR 28
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_sex := sex_male ;
1924: LD_ADDR_OWVAR 27
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1932: LD_ADDR_OWVAR 33
1936: PUSH
1937: LD_STRING SecondCharsGal
1939: ST_TO_ADDR
// hc_face_number := 59 ;
1940: LD_ADDR_OWVAR 34
1944: PUSH
1945: LD_INT 59
1947: ST_TO_ADDR
// hc_name := Max Gray ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING Max Gray
1955: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 9
1963: PUSH
1964: LD_INT 11
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1971: LD_ADDR_OWVAR 30
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1994: LD_ADDR_OWVAR 31
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 0
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: ST_TO_ADDR
// un = CreateHuman ;
2017: LD_ADDR_VAR 0 4
2021: PUSH
2022: CALL_OW 44
2026: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_INT 11
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// hc_class := 2 ;
2042: LD_ADDR_OWVAR 28
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_sex := sex_male ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2058: LD_ADDR_OWVAR 33
2062: PUSH
2063: LD_STRING SecondCharsGal
2065: ST_TO_ADDR
// hc_face_number := 50 ;
2066: LD_ADDR_OWVAR 34
2070: PUSH
2071: LD_INT 50
2073: ST_TO_ADDR
// hc_name := Frank Hughes ;
2074: LD_ADDR_OWVAR 26
2078: PUSH
2079: LD_STRING Frank Hughes
2081: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2082: LD_ADDR_OWVAR 29
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: LD_INT 10
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2097: LD_ADDR_OWVAR 30
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 11
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// hc_class := 1 ;
2168: LD_ADDR_OWVAR 28
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_sex := sex_male ;
2176: LD_ADDR_OWVAR 27
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2184: LD_ADDR_OWVAR 33
2188: PUSH
2189: LD_STRING SecondCharsGal
2191: ST_TO_ADDR
// hc_face_number := 54 ;
2192: LD_ADDR_OWVAR 34
2196: PUSH
2197: LD_INT 54
2199: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_STRING Luigi Ghbellin
2207: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2208: LD_ADDR_OWVAR 29
2212: PUSH
2213: LD_INT 11
2215: PUSH
2216: LD_INT 11
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2223: LD_ADDR_OWVAR 30
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2246: LD_ADDR_OWVAR 31
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// un = CreateHuman ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: CALL_OW 44
2278: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2279: LD_VAR 0 4
2283: PPUSH
2284: LD_INT 11
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL_OW 49
// hc_class := 3 ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 3
2301: ST_TO_ADDR
// hc_sex := sex_male ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2310: LD_ADDR_OWVAR 33
2314: PUSH
2315: LD_STRING AmGalRemake
2317: ST_TO_ADDR
// hc_face_number := 6 ;
2318: LD_ADDR_OWVAR 34
2322: PUSH
2323: LD_INT 6
2325: ST_TO_ADDR
// hc_name := Leon Carter ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Leon Carter
2333: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2334: LD_ADDR_OWVAR 29
2338: PUSH
2339: LD_INT 10
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2349: LD_ADDR_OWVAR 30
2353: PUSH
2354: LD_INT 0
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2372: LD_ADDR_OWVAR 31
2376: PUSH
2377: LD_INT 0
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: ST_TO_ADDR
// un = CreateHuman ;
2395: LD_ADDR_VAR 0 4
2399: PUSH
2400: CALL_OW 44
2404: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2405: LD_VAR 0 4
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 52
// if count = 4 then
2419: LD_VAR 0 1
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2555
// begin hc_class := 1 ;
2429: LD_ADDR_OWVAR 28
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_sex := sex_male ;
2437: LD_ADDR_OWVAR 27
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING SecondCharsGal
2452: ST_TO_ADDR
// hc_face_number := 34 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 34
2460: ST_TO_ADDR
// hc_name := Ian Hill ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING Ian Hill
2468: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2469: LD_ADDR_OWVAR 29
2473: PUSH
2474: LD_INT 10
2476: PUSH
2477: LD_INT 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2484: LD_ADDR_OWVAR 30
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: LD_INT 0
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2507: LD_ADDR_OWVAR 31
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: ST_TO_ADDR
// un = CreateHuman ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: CALL_OW 44
2539: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2540: LD_VAR 0 4
2544: PPUSH
2545: LD_INT 11
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 49
// end ; if count = 5 then
2555: LD_VAR 0 1
2559: PUSH
2560: LD_INT 5
2562: EQUAL
2563: IFFALSE 2817
// begin hc_class := 1 ;
2565: LD_ADDR_OWVAR 28
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_sex := sex_male ;
2573: LD_ADDR_OWVAR 27
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2581: LD_ADDR_OWVAR 33
2585: PUSH
2586: LD_STRING SecondCharsGal
2588: ST_TO_ADDR
// hc_face_number := 34 ;
2589: LD_ADDR_OWVAR 34
2593: PUSH
2594: LD_INT 34
2596: ST_TO_ADDR
// hc_name := Ian Hill ;
2597: LD_ADDR_OWVAR 26
2601: PUSH
2602: LD_STRING Ian Hill
2604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2605: LD_ADDR_OWVAR 29
2609: PUSH
2610: LD_INT 10
2612: PUSH
2613: LD_INT 12
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2620: LD_ADDR_OWVAR 30
2624: PUSH
2625: LD_INT 1
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 0
2633: PUSH
2634: LD_INT 0
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2643: LD_ADDR_OWVAR 31
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: ST_TO_ADDR
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// hc_class := 1 ;
2691: LD_ADDR_OWVAR 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// hc_sex := sex_female ;
2699: LD_ADDR_OWVAR 27
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2707: LD_ADDR_OWVAR 33
2711: PUSH
2712: LD_STRING SecondCharsGal
2714: ST_TO_ADDR
// hc_face_number := 41 ;
2715: LD_ADDR_OWVAR 34
2719: PUSH
2720: LD_INT 41
2722: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2723: LD_ADDR_OWVAR 26
2727: PUSH
2728: LD_STRING Kate Wadsworth
2730: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2731: LD_ADDR_OWVAR 29
2735: PUSH
2736: LD_INT 9
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2746: LD_ADDR_OWVAR 30
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2769: LD_ADDR_OWVAR 31
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// un = CreateHuman ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 11
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2817: LD_INT 11
2819: PPUSH
2820: LD_INT 22
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 21
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 26
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 70
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2868: LD_INT 11
2870: PPUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 26
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 70
2910: PUSH
2911: LD_INT 1
2913: ARRAY
2914: PPUSH
2915: LD_STRING D6-Sol3-1
2917: PPUSH
2918: CALL_OW 88
// end ; end_of_file
2922: LD_VAR 0 2
2926: RET
// export function PrepareRussianCommander ; begin
2927: LD_INT 0
2929: PPUSH
// uc_side = 3 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// uc_nation = 3 ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Stolypin
2953: PPUSH
2954: CALL_OW 25
2958: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2959: LD_EXP 15
2963: PPUSH
2964: LD_INT 21
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: LD_VAR 0 1
2975: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// if Difficulty > 1 then
2982: LD_OWVAR 67
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3100
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := 3 ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// InitHc_All ( ) ;
3008: CALL_OW 584
// InitBc ;
3012: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3016: LD_INT 0
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL_OW 380
// bc_type := b_breastwork ;
3029: LD_ADDR_OWVAR 42
3033: PUSH
3034: LD_INT 31
3036: ST_TO_ADDR
// bc_level := 4 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 4
3044: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3045: LD_ADDR_VAR 0 3
3049: PUSH
3050: LD_INT 100
3052: PPUSH
3053: LD_INT 58
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 5
3081: PPUSH
3082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3086: LD_VAR 0 4
3090: PPUSH
3091: LD_VAR 0 3
3095: PPUSH
3096: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3100: LD_INT 3
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 22
3108: PPUSH
3109: LD_EXP 16
3113: PPUSH
3114: LD_EXP 17
3118: PPUSH
3119: CALL_OW 12
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 4
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 6
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_OWVAR 67
3149: ARRAY
3150: PPUSH
3151: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 21
3163: PPUSH
3164: LD_EXP 16
3168: PPUSH
3169: LD_EXP 17
3173: PPUSH
3174: CALL_OW 12
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: LD_EXP 16
3202: PPUSH
3203: LD_EXP 17
3207: PPUSH
3208: CALL_OW 12
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 24
3231: PPUSH
3232: LD_EXP 16
3236: PPUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 5
3252: PPUSH
3253: CALL 4353 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3332
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3294: LD_INT 3
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: LD_EXP 17
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL 4353 0 6
3330: GO 3291
3332: POP
3333: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 30
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: FOR_IN
3369: IFFALSE 3397
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL 4462 0 2
3395: GO 3368
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 1
3403: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 6 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 6
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// InitHC_All ( ) ;
3426: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: DOUBLE
3436: LD_INT 1
3438: DEC
3439: ST_TO_ADDR
3440: LD_INT 1
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: LD_INT 2
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_OWVAR 67
3462: ARRAY
3463: PUSH
3464: FOR_TO
3465: IFFALSE 3633
// begin vc_engine = 1 ;
3467: LD_ADDR_OWVAR 39
3471: PUSH
3472: LD_INT 1
3474: ST_TO_ADDR
// vc_control = 1 ;
3475: LD_ADDR_OWVAR 38
3479: PUSH
3480: LD_INT 1
3482: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3483: LD_ADDR_OWVAR 40
3487: PUSH
3488: LD_INT 42
3490: PUSH
3491: LD_INT 42
3493: PUSH
3494: LD_INT 43
3496: PUSH
3497: LD_INT 43
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: LD_OWVAR 67
3510: ARRAY
3511: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3512: LD_ADDR_OWVAR 37
3516: PUSH
3517: LD_INT 21
3519: PUSH
3520: LD_INT 22
3522: PUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 22
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_OWVAR 67
3539: ARRAY
3540: ST_TO_ADDR
// veh = CreateVehicle ;
3541: LD_ADDR_VAR 0 3
3545: PUSH
3546: CALL_OW 45
3550: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_INT 3
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// hc_gallery =  ;
3566: LD_ADDR_OWVAR 33
3570: PUSH
3571: LD_STRING 
3573: ST_TO_ADDR
// hc_name =  ;
3574: LD_ADDR_OWVAR 26
3578: PUSH
3579: LD_STRING 
3581: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3582: LD_INT 0
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: LD_EXP 16
3592: PPUSH
3593: LD_EXP 17
3597: PPUSH
3598: CALL_OW 12
3602: PPUSH
3603: CALL_OW 380
// un = CreateHuman ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: CALL_OW 44
3616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3617: LD_VAR 0 4
3621: PPUSH
3622: LD_VAR 0 3
3626: PPUSH
3627: CALL_OW 52
// end ;
3631: GO 3464
3633: POP
3634: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3635: LD_INT 0
3637: PPUSH
3638: LD_INT 2
3640: PPUSH
3641: LD_EXP 16
3645: PPUSH
3646: LD_EXP 17
3650: PPUSH
3651: CALL_OW 12
3655: PUSH
3656: LD_INT 2
3658: PLUS
3659: PPUSH
3660: CALL_OW 380
// un = CreateHuman ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3689: LD_INT 0
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_EXP 16
3699: PPUSH
3700: LD_EXP 17
3704: PPUSH
3705: CALL_OW 12
3709: PUSH
3710: LD_INT 2
3712: PLUS
3713: PPUSH
3714: CALL_OW 380
// un = CreateHuman ;
3718: LD_ADDR_VAR 0 4
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3728: LD_VAR 0 4
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 2
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_OWVAR 67
3775: ARRAY
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 3
3782: PPUSH
3783: CALL_OW 12
3787: PLUS
3788: PUSH
3789: FOR_TO
3790: IFFALSE 3860
// begin hc_gallery =  ;
3792: LD_ADDR_OWVAR 33
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// hc_name =  ;
3800: LD_ADDR_OWVAR 26
3804: PUSH
3805: LD_STRING 
3807: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_EXP 16
3818: PPUSH
3819: LD_EXP 17
3823: PPUSH
3824: CALL_OW 12
3828: PPUSH
3829: CALL_OW 380
// un = CreateHuman ;
3833: LD_ADDR_VAR 0 4
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3843: LD_VAR 0 4
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 49
// end ;
3858: GO 3789
3860: POP
3861: POP
// vc_engine = 1 ;
3862: LD_ADDR_OWVAR 39
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// vc_control = 1 ;
3870: LD_ADDR_OWVAR 38
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// vc_weapon = 51 ;
3878: LD_ADDR_OWVAR 40
3882: PUSH
3883: LD_INT 51
3885: ST_TO_ADDR
// vc_chassis = 22 ;
3886: LD_ADDR_OWVAR 37
3890: PUSH
3891: LD_INT 22
3893: ST_TO_ADDR
// veh = CreateVehicle ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 100
3929: PPUSH
3930: CALL_OW 290
// hc_gallery =  ;
3934: LD_ADDR_OWVAR 33
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// hc_name =  ;
3942: LD_ADDR_OWVAR 26
3946: PUSH
3947: LD_STRING 
3949: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: LD_EXP 16
3960: PPUSH
3961: LD_EXP 17
3965: PPUSH
3966: CALL_OW 12
3970: PPUSH
3971: CALL_OW 380
// un = CreateHuman ;
3975: LD_ADDR_VAR 0 4
3979: PUSH
3980: CALL_OW 44
3984: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3985: LD_VAR 0 4
3989: PPUSH
3990: LD_VAR 0 3
3994: PPUSH
3995: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3999: LD_ADDR_VAR 0 2
4003: PUSH
4004: LD_INT 22
4006: PUSH
4007: LD_INT 6
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: LD_INT 25
4022: PUSH
4023: LD_INT 2
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 69
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4085
// ComAgressiveMove ( i , 45 , 46 ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_INT 45
4075: PPUSH
4076: LD_INT 46
4078: PPUSH
4079: CALL_OW 114
4083: GO 4065
4085: POP
4086: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_INT 22
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 25
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 69
4120: PUSH
4121: FOR_IN
4122: IFFALSE 4153
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4124: LD_ADDR_EXP 21
4128: PUSH
4129: LD_VAR 0 2
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: LD_INT 48
4139: PPUSH
4140: LD_INT 55
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: CALL_OW 145
4150: ST_TO_ADDR
4151: GO 4121
4153: POP
4154: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4155: LD_ADDR_VAR 0 2
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 6
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 69
4188: PUSH
4189: FOR_IN
4190: IFFALSE 4209
// ComMoveXY ( i , 39 , 55 ) ;
4192: LD_VAR 0 2
4196: PPUSH
4197: LD_INT 39
4199: PPUSH
4200: LD_INT 55
4202: PPUSH
4203: CALL_OW 111
4207: GO 4189
4209: POP
4210: POP
// end ;
4211: LD_VAR 0 1
4215: RET
// export function PrepareFirstAttack ; var i , un ; begin
4216: LD_INT 0
4218: PPUSH
4219: PPUSH
4220: PPUSH
// uc_side = 5 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 5
4228: ST_TO_ADDR
// uc_nation = 3 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 3
4236: ST_TO_ADDR
// for i := 1 to 4 do
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: DOUBLE
4243: LD_INT 1
4245: DEC
4246: ST_TO_ADDR
4247: LD_INT 4
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4338
// begin InitHC_All ( ) ;
4253: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4257: LD_INT 0
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_EXP 16
4267: PPUSH
4268: LD_EXP 17
4272: PPUSH
4273: CALL_OW 12
4277: PPUSH
4278: CALL_OW 380
// un = CreateHuman ;
4282: LD_ADDR_VAR 0 3
4286: PUSH
4287: CALL_OW 44
4291: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4292: LD_VAR 0 3
4296: PPUSH
4297: LD_INT 4
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_EXP 1
4316: PPUSH
4317: CALL_OW 250
4321: PPUSH
4322: LD_EXP 1
4326: PPUSH
4327: CALL_OW 251
4331: PPUSH
4332: CALL_OW 114
// end ;
4336: GO 4250
4338: POP
4339: POP
// firstRussianAttack = 1 ;
4340: LD_ADDR_EXP 23
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// end ; end_of_file
4348: LD_VAR 0 1
4352: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4353: LD_INT 0
4355: PPUSH
4356: PPUSH
4357: PPUSH
// for i = 1 to count do
4358: LD_ADDR_VAR 0 8
4362: PUSH
4363: DOUBLE
4364: LD_INT 1
4366: DEC
4367: ST_TO_ADDR
4368: LD_VAR 0 6
4372: PUSH
4373: FOR_TO
4374: IFFALSE 4455
// begin uc_side = side ;
4376: LD_ADDR_OWVAR 20
4380: PUSH
4381: LD_VAR 0 1
4385: ST_TO_ADDR
// uc_nation = nation ;
4386: LD_ADDR_OWVAR 21
4390: PUSH
4391: LD_VAR 0 2
4395: ST_TO_ADDR
// hc_gallery =  ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING 
4403: ST_TO_ADDR
// hc_name =  ;
4404: LD_ADDR_OWVAR 26
4408: PUSH
4409: LD_STRING 
4411: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4412: LD_INT 0
4414: PPUSH
4415: LD_VAR 0 5
4419: PPUSH
4420: LD_VAR 0 4
4424: PPUSH
4425: CALL_OW 380
// un = CreateHuman ;
4429: LD_ADDR_VAR 0 9
4433: PUSH
4434: CALL_OW 44
4438: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4439: LD_VAR 0 9
4443: PPUSH
4444: LD_VAR 0 3
4448: PPUSH
4449: CALL_OW 52
// end ;
4453: GO 4373
4455: POP
4456: POP
// end ;
4457: LD_VAR 0 7
4461: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4462: LD_INT 0
4464: PPUSH
4465: PPUSH
4466: PPUSH
// uc_side := GetSide ( b ) ;
4467: LD_ADDR_OWVAR 20
4471: PUSH
4472: LD_VAR 0 2
4476: PPUSH
4477: CALL_OW 255
4481: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4482: LD_ADDR_OWVAR 21
4486: PUSH
4487: LD_VAR 0 2
4491: PPUSH
4492: CALL_OW 248
4496: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4497: LD_INT 0
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 380
// un = CreateHuman ;
4512: LD_ADDR_VAR 0 4
4516: PUSH
4517: CALL_OW 44
4521: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4522: LD_ADDR_VAR 0 5
4526: PUSH
4527: LD_VAR 0 2
4531: PPUSH
4532: CALL_OW 254
4536: PUSH
4537: LD_INT 3
4539: MINUS
4540: ST_TO_ADDR
// if dir < 0 then
4541: LD_VAR 0 5
4545: PUSH
4546: LD_INT 0
4548: LESS
4549: IFFALSE 4565
// dir := 6 + dir ;
4551: LD_ADDR_VAR 0 5
4555: PUSH
4556: LD_INT 6
4558: PUSH
4559: LD_VAR 0 5
4563: PLUS
4564: ST_TO_ADDR
// SetDir ( un , dir ) ;
4565: LD_VAR 0 4
4569: PPUSH
4570: LD_VAR 0 5
4574: PPUSH
4575: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: LD_VAR 0 2
4588: PPUSH
4589: CALL_OW 52
// end ;
4593: LD_VAR 0 3
4597: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4598: LD_INT 0
4600: PPUSH
4601: PPUSH
4602: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4603: LD_ADDR_VAR 0 6
4607: PUSH
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: PPUSH
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 12
4625: ARRAY
4626: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4627: LD_VAR 0 6
4631: PPUSH
4632: CALL_OW 258
4636: PUSH
4637: LD_INT 1
4639: EQUAL
4640: IFFALSE 4658
// Say ( speaker , dialogMID ) else
4642: LD_VAR 0 6
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: CALL_OW 88
4656: GO 4672
// Say ( speaker , dialogFID ) ;
4658: LD_VAR 0 6
4662: PPUSH
4663: LD_VAR 0 3
4667: PPUSH
4668: CALL_OW 88
// result := speaker ;
4672: LD_ADDR_VAR 0 4
4676: PUSH
4677: LD_VAR 0 6
4681: ST_TO_ADDR
// end ;
4682: LD_VAR 0 4
4686: RET
// export function PrepareDifficulty ; var tmp ; begin
4687: LD_INT 0
4689: PPUSH
4690: PPUSH
// if Difficulty = 1 then
4691: LD_OWVAR 67
4695: PUSH
4696: LD_INT 1
4698: EQUAL
4699: IFFALSE 4717
// begin RuSoldMinLevel = 1 ;
4701: LD_ADDR_EXP 16
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4709: LD_ADDR_EXP 17
4713: PUSH
4714: LD_INT 2
4716: ST_TO_ADDR
// end ; if Difficulty = 2 then
4717: LD_OWVAR 67
4721: PUSH
4722: LD_INT 2
4724: EQUAL
4725: IFFALSE 4826
// begin RuSoldMinLevel = 2 ;
4727: LD_ADDR_EXP 16
4731: PUSH
4732: LD_INT 2
4734: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4735: LD_ADDR_EXP 17
4739: PUSH
4740: LD_INT 3
4742: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4743: LD_INT 23
4745: PPUSH
4746: CALL_OW 64
// uc_nation = 3 ;
4750: LD_ADDR_OWVAR 21
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// uc_side = 3 ;
4758: LD_ADDR_OWVAR 20
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// bc_level = 5 ;
4766: LD_ADDR_OWVAR 43
4770: PUSH
4771: LD_INT 5
4773: ST_TO_ADDR
// bc_type = 32 ;
4774: LD_ADDR_OWVAR 42
4778: PUSH
4779: LD_INT 32
4781: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: LD_INT 76
4789: PPUSH
4790: LD_INT 91
4792: PPUSH
4793: LD_INT 2
4795: PPUSH
4796: CALL_OW 47
4800: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4801: LD_VAR 0 2
4805: PPUSH
4806: LD_INT 43
4808: PPUSH
4809: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4813: LD_INT 51
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 322
// end ; if Difficulty >= 3 then
4826: LD_OWVAR 67
4830: PUSH
4831: LD_INT 3
4833: GREATEREQUAL
4834: IFFALSE 4998
// begin RuSoldMinLevel = Difficulty ;
4836: LD_ADDR_EXP 16
4840: PUSH
4841: LD_OWVAR 67
4845: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4846: LD_ADDR_EXP 17
4850: PUSH
4851: LD_INT 4
4853: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4854: LD_INT 26
4856: PPUSH
4857: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4861: LD_INT 23
4863: PPUSH
4864: CALL_OW 64
// uc_nation = 3 ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// uc_side = 3 ;
4876: LD_ADDR_OWVAR 20
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// bc_level = 5 ;
4884: LD_ADDR_OWVAR 43
4888: PUSH
4889: LD_INT 5
4891: ST_TO_ADDR
// bc_type = 32 ;
4892: LD_ADDR_OWVAR 42
4896: PUSH
4897: LD_INT 32
4899: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4900: LD_ADDR_VAR 0 2
4904: PUSH
4905: LD_INT 76
4907: PPUSH
4908: LD_INT 91
4910: PPUSH
4911: LD_INT 2
4913: PPUSH
4914: CALL_OW 47
4918: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_INT 44
4926: PPUSH
4927: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4931: LD_ADDR_VAR 0 2
4935: PUSH
4936: LD_INT 83
4938: PPUSH
4939: LD_INT 84
4941: PPUSH
4942: LD_INT 2
4944: PPUSH
4945: CALL_OW 47
4949: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4950: LD_VAR 0 2
4954: PPUSH
4955: LD_INT 43
4957: PPUSH
4958: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4962: LD_INT 51
4964: PPUSH
4965: LD_INT 3
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4975: LD_INT 52
4977: PPUSH
4978: LD_INT 3
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4988: LD_INT 25
4990: PPUSH
4991: LD_INT 44
4993: PPUSH
4994: CALL_OW 431
// end ; end ;
4998: LD_VAR 0 1
5002: RET
// export function EnergyDialog ; begin
5003: LD_INT 0
5005: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5006: LD_INT 46
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: CALL_OW 321
5016: PUSH
5017: LD_INT 1
5019: EQUAL
5020: PUSH
5021: LD_INT 35
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 321
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: AND
5036: IFFALSE 5060
// begin Say ( JMM , D9c-JMM-1 ) ;
5038: LD_EXP 1
5042: PPUSH
5043: LD_STRING D9c-JMM-1
5045: PPUSH
5046: CALL_OW 88
// energyVDialog = 1 ;
5050: LD_ADDR_EXP 33
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// end else
5058: GO 5214
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5060: LD_INT 35
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 321
5070: PUSH
5071: LD_INT 2
5073: EQUAL
5074: PUSH
5075: LD_EXP 33
5079: PUSH
5080: LD_INT 0
5082: EQUAL
5083: AND
5084: IFFALSE 5106
// begin Say ( JMM , D9c-JMM-1a ) ;
5086: LD_EXP 1
5090: PPUSH
5091: LD_STRING D9c-JMM-1a
5093: PPUSH
5094: CALL_OW 88
// energyVDialog = 1 ;
5098: LD_ADDR_EXP 33
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5106: LD_INT 46
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: CALL_OW 321
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: PUSH
5121: LD_EXP 33
5125: PUSH
5126: LD_INT 0
5128: EQUAL
5129: AND
5130: IFFALSE 5152
// begin Say ( JMM , D9c-JMM-1b ) ;
5132: LD_EXP 1
5136: PPUSH
5137: LD_STRING D9c-JMM-1b
5139: PPUSH
5140: CALL_OW 88
// energyVDialog = 1 ;
5144: LD_ADDR_EXP 33
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5152: LD_INT 46
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 321
5162: PUSH
5163: LD_INT 2
5165: EQUAL
5166: PUSH
5167: LD_INT 21
5169: PPUSH
5170: LD_INT 1
5172: PPUSH
5173: CALL_OW 321
5177: PUSH
5178: LD_INT 2
5180: EQUAL
5181: AND
5182: PUSH
5183: LD_EXP 33
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: AND
5192: IFFALSE 5214
// begin Say ( JMM , D9c-JMM-1c ) ;
5194: LD_EXP 1
5198: PPUSH
5199: LD_STRING D9c-JMM-1c
5201: PPUSH
5202: CALL_OW 88
// energyVDialog = 1 ;
5206: LD_ADDR_EXP 33
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ; end ; end ;
5214: LD_VAR 0 1
5218: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5226: LD_VAR 0 1
5230: NOT
5231: PUSH
5232: LD_VAR 0 1
5236: PPUSH
5237: CALL_OW 256
5241: PUSH
5242: LD_INT 250
5244: LESS
5245: OR
5246: PUSH
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 314
5256: PUSH
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 261
5266: PUSH
5267: LD_INT 20
5269: GREATER
5270: AND
5271: OR
5272: IFFALSE 5276
// exit ;
5274: GO 5641
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5276: LD_VAR 0 1
5280: PPUSH
5281: CALL_OW 261
5285: PUSH
5286: LD_INT 20
5288: LESS
5289: PUSH
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 110
5299: PUSH
5300: LD_INT 21
5302: EQUAL
5303: NOT
5304: AND
5305: IFFALSE 5332
// begin ComStop ( bulldozer ) ;
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_INT 21
5323: PPUSH
5324: CALL_OW 109
// exit ;
5328: GO 5641
// end else
5330: GO 5359
// if GetFuel ( bulldozer ) > 20 then
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 261
5341: PUSH
5342: LD_INT 20
5344: GREATER
5345: IFFALSE 5359
// SetTag ( bulldozer , 0 ) ;
5347: LD_VAR 0 1
5351: PPUSH
5352: LD_INT 0
5354: PPUSH
5355: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5359: LD_ADDR_VAR 0 5
5363: PUSH
5364: LD_VAR 0 2
5368: PPUSH
5369: CALL_OW 353
5373: ST_TO_ADDR
// tmp := [ ] ;
5374: LD_ADDR_VAR 0 6
5378: PUSH
5379: EMPTY
5380: ST_TO_ADDR
// for i = 1 to list do
5381: LD_ADDR_VAR 0 4
5385: PUSH
5386: DOUBLE
5387: LD_INT 1
5389: DEC
5390: ST_TO_ADDR
5391: LD_VAR 0 5
5395: PUSH
5396: FOR_TO
5397: IFFALSE 5495
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5399: LD_VAR 0 5
5403: PUSH
5404: LD_VAR 0 4
5408: ARRAY
5409: PUSH
5410: LD_INT 1
5412: ARRAY
5413: PPUSH
5414: LD_VAR 0 5
5418: PUSH
5419: LD_VAR 0 4
5423: ARRAY
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: PPUSH
5429: CALL_OW 554
5433: IFFALSE 5493
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5435: LD_ADDR_VAR 0 6
5439: PUSH
5440: LD_VAR 0 6
5444: PPUSH
5445: LD_VAR 0 6
5449: PUSH
5450: LD_INT 1
5452: PLUS
5453: PPUSH
5454: LD_VAR 0 5
5458: PUSH
5459: LD_VAR 0 4
5463: ARRAY
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PUSH
5469: LD_VAR 0 5
5473: PUSH
5474: LD_VAR 0 4
5478: ARRAY
5479: PUSH
5480: LD_INT 2
5482: ARRAY
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PPUSH
5488: CALL_OW 1
5492: ST_TO_ADDR
// end ;
5493: GO 5396
5495: POP
5496: POP
// ComStop ( bulldozer ) ;
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5506: LD_ADDR_VAR 0 7
5510: PUSH
5511: LD_VAR 0 1
5515: PPUSH
5516: CALL_OW 250
5520: PUSH
5521: LD_VAR 0 1
5525: PPUSH
5526: CALL_OW 251
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: ST_TO_ADDR
// for i = tmp downto 1 do
5535: LD_ADDR_VAR 0 4
5539: PUSH
5540: DOUBLE
5541: LD_VAR 0 6
5545: INC
5546: ST_TO_ADDR
5547: LD_INT 1
5549: PUSH
5550: FOR_DOWNTO
5551: IFFALSE 5639
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5553: LD_ADDR_VAR 0 7
5557: PUSH
5558: LD_VAR 0 7
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: PPUSH
5567: LD_VAR 0 7
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: LD_VAR 0 6
5580: PPUSH
5581: CALL 5742 0 3
5585: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5586: LD_VAR 0 1
5590: PPUSH
5591: LD_VAR 0 7
5595: PUSH
5596: LD_INT 1
5598: ARRAY
5599: PPUSH
5600: LD_VAR 0 7
5604: PUSH
5605: LD_INT 2
5607: ARRAY
5608: PPUSH
5609: CALL 5646 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: LD_VAR 0 6
5622: PPUSH
5623: LD_VAR 0 7
5627: PUSH
5628: LD_INT 3
5630: ARRAY
5631: PPUSH
5632: CALL_OW 3
5636: ST_TO_ADDR
// end ;
5637: GO 5550
5639: POP
5640: POP
// end ;
5641: LD_VAR 0 3
5645: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5646: LD_INT 0
5648: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5649: LD_VAR 0 2
5653: PPUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: CALL_OW 351
5663: PUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: CALL_OW 554
5678: AND
5679: PUSH
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: CALL_OW 488
5694: AND
5695: PUSH
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 428
5710: PUSH
5711: LD_INT 1
5713: NEG
5714: EQUAL
5715: AND
5716: IFFALSE 5737
// AddComMoveXY ( bulldozer , x , y ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_VAR 0 3
5732: PPUSH
5733: CALL_OW 171
// end ;
5737: LD_VAR 0 4
5741: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
5749: PPUSH
5750: PPUSH
// dist := 99999 ;
5751: LD_ADDR_VAR 0 6
5755: PUSH
5756: LD_INT 99999
5758: ST_TO_ADDR
// for i = 1 to list do
5759: LD_ADDR_VAR 0 5
5763: PUSH
5764: DOUBLE
5765: LD_INT 1
5767: DEC
5768: ST_TO_ADDR
5769: LD_VAR 0 3
5773: PUSH
5774: FOR_TO
5775: IFFALSE 5913
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5777: LD_ADDR_VAR 0 7
5781: PUSH
5782: LD_VAR 0 1
5786: PPUSH
5787: LD_VAR 0 2
5791: PPUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_VAR 0 5
5801: ARRAY
5802: PUSH
5803: LD_INT 1
5805: ARRAY
5806: PPUSH
5807: LD_VAR 0 3
5811: PUSH
5812: LD_VAR 0 5
5816: ARRAY
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PPUSH
5822: CALL_OW 298
5826: ST_TO_ADDR
// if d = 0 then
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 0
5834: EQUAL
5835: IFFALSE 5839
// continue ;
5837: GO 5774
// if d < dist then
5839: LD_VAR 0 7
5843: PUSH
5844: LD_VAR 0 6
5848: LESS
5849: IFFALSE 5911
// begin _x := list [ i ] [ 1 ] ;
5851: LD_ADDR_VAR 0 8
5855: PUSH
5856: LD_VAR 0 3
5860: PUSH
5861: LD_VAR 0 5
5865: ARRAY
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5871: LD_ADDR_VAR 0 9
5875: PUSH
5876: LD_VAR 0 3
5880: PUSH
5881: LD_VAR 0 5
5885: ARRAY
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: ST_TO_ADDR
// _i := i ;
5891: LD_ADDR_VAR 0 10
5895: PUSH
5896: LD_VAR 0 5
5900: ST_TO_ADDR
// dist := d ;
5901: LD_ADDR_VAR 0 6
5905: PUSH
5906: LD_VAR 0 7
5910: ST_TO_ADDR
// end ; end ;
5911: GO 5774
5913: POP
5914: POP
// result := [ _x , _y , _i , dist ] ;
5915: LD_ADDR_VAR 0 4
5919: PUSH
5920: LD_VAR 0 8
5924: PUSH
5925: LD_VAR 0 9
5929: PUSH
5930: LD_VAR 0 10
5934: PUSH
5935: LD_VAR 0 6
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: ST_TO_ADDR
// end ;
5946: LD_VAR 0 4
5950: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// for i = 1 to 72 do
5955: LD_ADDR_VAR 0 5
5959: PUSH
5960: DOUBLE
5961: LD_INT 1
5963: DEC
5964: ST_TO_ADDR
5965: LD_INT 72
5967: PUSH
5968: FOR_TO
5969: IFFALSE 6023
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5971: LD_VAR 0 5
5975: PPUSH
5976: LD_VAR 0 1
5980: PPUSH
5981: CALL_OW 321
5985: PUSH
5986: LD_INT 1
5988: EQUAL
5989: PUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: LD_VAR 0 3
5999: PPUSH
6000: CALL_OW 482
6004: AND
6005: IFFALSE 6021
// AddComResearch ( lab , i ) ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 5
6016: PPUSH
6017: CALL_OW 184
6021: GO 5968
6023: POP
6024: POP
// end ;
6025: LD_VAR 0 4
6029: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
6036: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6037: LD_ADDR_VAR 0 7
6041: PUSH
6042: LD_VAR 0 2
6046: PPUSH
6047: CALL_OW 313
6051: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6052: LD_ADDR_VAR 0 8
6056: PUSH
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_INT 22
6064: PUSH
6065: LD_VAR 0 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 2
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 24
6086: PUSH
6087: LD_INT 750
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: LD_INT 54
6099: PUSH
6100: EMPTY
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 70
6117: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6118: LD_ADDR_VAR 0 5
6122: PUSH
6123: LD_VAR 0 3
6127: PPUSH
6128: LD_INT 22
6130: PUSH
6131: LD_VAR 0 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 21
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: LD_INT 24
6155: PUSH
6156: LD_INT 1000
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: EMPTY
6173: LIST
6174: PPUSH
6175: CALL_OW 70
6179: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6180: LD_VAR 0 5
6184: NOT
6185: PUSH
6186: LD_INT 22
6188: PUSH
6189: LD_VAR 0 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 24
6210: PUSH
6211: LD_INT 250
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: PPUSH
6223: CALL_OW 69
6227: NOT
6228: AND
6229: IFFALSE 6233
// exit ;
6231: GO 6329
// if buildingsList and engineerOkInside then
6233: LD_VAR 0 5
6237: PUSH
6238: LD_VAR 0 7
6242: AND
6243: IFFALSE 6269
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6245: LD_VAR 0 7
6249: PPUSH
6250: LD_INT 25
6252: PUSH
6253: LD_INT 2
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 72
6264: PPUSH
6265: CALL_OW 122
// if buildingsList and engineerOkOutside then
6269: LD_VAR 0 5
6273: PUSH
6274: LD_VAR 0 8
6278: AND
6279: IFFALSE 6299
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6299: LD_VAR 0 5
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: PUSH
6308: LD_VAR 0 8
6312: AND
6313: IFFALSE 6329
// ComEnterUnit ( engineerOkOutside , building ) ;
6315: LD_VAR 0 8
6319: PPUSH
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL_OW 120
// end ;
6329: LD_VAR 0 4
6333: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6343: LD_ADDR_VAR 0 6
6347: PUSH
6348: LD_INT 22
6350: PUSH
6351: LD_VAR 0 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 23
6372: PUSH
6373: LD_INT 2
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 251
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6401: LD_ADDR_VAR 0 7
6405: PUSH
6406: LD_VAR 0 3
6410: PPUSH
6411: LD_INT 22
6413: PUSH
6414: LD_VAR 0 1
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 23
6425: PUSH
6426: LD_INT 2
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 25
6435: PUSH
6436: LD_INT 4
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 50
6445: PUSH
6446: EMPTY
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PPUSH
6455: CALL_OW 70
6459: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6460: LD_ADDR_VAR 0 8
6464: PUSH
6465: LD_VAR 0 3
6469: PPUSH
6470: LD_INT 22
6472: PUSH
6473: LD_VAR 0 1
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 21
6484: PUSH
6485: LD_INT 1
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 3
6494: PUSH
6495: LD_INT 25
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 24
6514: PUSH
6515: LD_INT 750
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: PPUSH
6532: CALL_OW 70
6536: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6537: LD_ADDR_VAR 0 9
6541: PUSH
6542: LD_VAR 0 2
6546: PPUSH
6547: LD_INT 22
6549: PUSH
6550: LD_VAR 0 1
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 21
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 25
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 3
6588: PUSH
6589: LD_INT 24
6591: PUSH
6592: LD_INT 1000
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: PPUSH
6609: CALL_OW 70
6613: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6614: LD_VAR 0 8
6618: NOT
6619: PUSH
6620: LD_VAR 0 9
6624: NOT
6625: AND
6626: PUSH
6627: LD_VAR 0 6
6631: NOT
6632: AND
6633: IFFALSE 6637
// exit ;
6635: GO 6843
// if damageUnits and sciList then
6637: LD_VAR 0 8
6641: PUSH
6642: LD_VAR 0 6
6646: AND
6647: IFFALSE 6663
// ComMoveToArea ( damageUnits , healArea ) ;
6649: LD_VAR 0 8
6653: PPUSH
6654: LD_VAR 0 2
6658: PPUSH
6659: CALL_OW 113
// if unitsToHeal and sciList then
6663: LD_VAR 0 9
6667: PUSH
6668: LD_VAR 0 6
6672: AND
6673: IFFALSE 6684
// ComExitBuilding ( sciList ) ;
6675: LD_VAR 0 6
6679: PPUSH
6680: CALL_OW 122
// if unitsToHeal and sciListOutside then
6684: LD_VAR 0 9
6688: PUSH
6689: LD_VAR 0 7
6693: AND
6694: IFFALSE 6714
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6696: LD_VAR 0 7
6700: PPUSH
6701: LD_VAR 0 9
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: PPUSH
6710: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6714: LD_VAR 0 8
6718: PUSH
6719: LD_INT 0
6721: EQUAL
6722: PUSH
6723: LD_VAR 0 9
6727: PUSH
6728: LD_INT 0
6730: EQUAL
6731: AND
6732: PUSH
6733: LD_VAR 0 7
6737: AND
6738: IFFALSE 6843
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6740: LD_ADDR_VAR 0 10
6744: PUSH
6745: LD_INT 22
6747: PUSH
6748: LD_VAR 0 1
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 21
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 8
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 69
6786: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6787: LD_ADDR_VAR 0 11
6791: PUSH
6792: LD_INT 1
6794: PPUSH
6795: LD_VAR 0 10
6799: PPUSH
6800: CALL_OW 12
6804: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6805: LD_VAR 0 7
6809: PPUSH
6810: LD_INT 3
6812: PUSH
6813: LD_INT 60
6815: PUSH
6816: EMPTY
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PPUSH
6823: CALL_OW 72
6827: PPUSH
6828: LD_VAR 0 10
6832: PUSH
6833: LD_VAR 0 11
6837: ARRAY
6838: PPUSH
6839: CALL_OW 120
// end ; end ;
6843: LD_VAR 0 5
6847: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6852: LD_INT 22
6854: PUSH
6855: LD_VAR 0 1
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 21
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 69
6882: PUSH
6883: LD_VAR 0 3
6887: LESSEQUAL
6888: IFFALSE 6955
// for i = 1 to vehCount do
6890: LD_ADDR_VAR 0 9
6894: PUSH
6895: DOUBLE
6896: LD_INT 1
6898: DEC
6899: ST_TO_ADDR
6900: LD_VAR 0 3
6904: PUSH
6905: FOR_TO
6906: IFFALSE 6953
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6908: LD_VAR 0 2
6912: PPUSH
6913: LD_VAR 0 7
6917: PPUSH
6918: LD_VAR 0 5
6922: PPUSH
6923: LD_VAR 0 6
6927: PPUSH
6928: LD_VAR 0 4
6932: PUSH
6933: LD_INT 1
6935: PPUSH
6936: LD_VAR 0 4
6940: PPUSH
6941: CALL_OW 12
6945: ARRAY
6946: PPUSH
6947: CALL_OW 185
6951: GO 6905
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 8
6959: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
// for i = 1 to medicCount do
6973: LD_ADDR_VAR 0 11
6977: PUSH
6978: DOUBLE
6979: LD_INT 1
6981: DEC
6982: ST_TO_ADDR
6983: LD_VAR 0 4
6987: PUSH
6988: FOR_TO
6989: IFFALSE 7059
// begin uc_side = side ;
6991: LD_ADDR_OWVAR 20
6995: PUSH
6996: LD_VAR 0 1
7000: ST_TO_ADDR
// uc_nation = nation ;
7001: LD_ADDR_OWVAR 21
7005: PUSH
7006: LD_VAR 0 2
7010: ST_TO_ADDR
// InitHC_All ( ) ;
7011: CALL_OW 584
// PrepareHuman ( false , 4 , skil ) ;
7015: LD_INT 0
7017: PPUSH
7018: LD_INT 4
7020: PPUSH
7021: LD_VAR 0 5
7025: PPUSH
7026: CALL_OW 380
// un = CreateHuman ;
7030: LD_ADDR_VAR 0 13
7034: PUSH
7035: CALL_OW 44
7039: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7040: LD_VAR 0 13
7044: PPUSH
7045: LD_VAR 0 6
7049: PPUSH
7050: LD_INT 0
7052: PPUSH
7053: CALL_OW 49
// end ;
7057: GO 6988
7059: POP
7060: POP
// for i = 1 to soldierCount do
7061: LD_ADDR_VAR 0 11
7065: PUSH
7066: DOUBLE
7067: LD_INT 1
7069: DEC
7070: ST_TO_ADDR
7071: LD_VAR 0 3
7075: PUSH
7076: FOR_TO
7077: IFFALSE 7147
// begin uc_side = side ;
7079: LD_ADDR_OWVAR 20
7083: PUSH
7084: LD_VAR 0 1
7088: ST_TO_ADDR
// uc_nation = nation ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_VAR 0 2
7098: ST_TO_ADDR
// InitHC_All ( ) ;
7099: CALL_OW 584
// PrepareHuman ( false , 1 , skil ) ;
7103: LD_INT 0
7105: PPUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_VAR 0 5
7113: PPUSH
7114: CALL_OW 380
// un = CreateHuman ;
7118: LD_ADDR_VAR 0 13
7122: PUSH
7123: CALL_OW 44
7127: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7128: LD_VAR 0 13
7132: PPUSH
7133: LD_VAR 0 6
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7076
7147: POP
7148: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7149: LD_ADDR_VAR 0 16
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 1
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 25
7201: PUSH
7202: LD_INT 9
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7225: LD_ADDR_VAR 0 15
7229: PUSH
7230: LD_INT 22
7232: PUSH
7233: LD_VAR 0 1
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 4
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 69
7260: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7261: LD_VAR 0 15
7265: PPUSH
7266: LD_VAR 0 7
7270: PPUSH
7271: CALL_OW 113
// if strategy = 1 then
7275: LD_VAR 0 9
7279: PUSH
7280: LD_INT 1
7282: EQUAL
7283: IFFALSE 7731
// begin for i in soldiersOK_list do
7285: LD_ADDR_VAR 0 11
7289: PUSH
7290: LD_VAR 0 16
7294: PUSH
7295: FOR_IN
7296: IFFALSE 7360
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7298: LD_VAR 0 11
7302: PPUSH
7303: LD_INT 91
7305: PPUSH
7306: LD_INT 63
7308: PPUSH
7309: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7313: LD_VAR 0 11
7317: PPUSH
7318: LD_INT 101
7320: PPUSH
7321: LD_INT 53
7323: PPUSH
7324: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7328: LD_VAR 0 11
7332: PPUSH
7333: LD_INT 75
7335: PPUSH
7336: LD_INT 23
7338: PPUSH
7339: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7343: LD_VAR 0 11
7347: PPUSH
7348: LD_INT 78
7350: PPUSH
7351: LD_INT 8
7353: PPUSH
7354: CALL_OW 174
// end ;
7358: GO 7295
7360: POP
7361: POP
// wait ( 0 0$30 ) ;
7362: LD_INT 1050
7364: PPUSH
7365: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7369: LD_INT 35
7371: PPUSH
7372: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7376: LD_ADDR_VAR 0 14
7380: PUSH
7381: LD_INT 22
7383: PUSH
7384: LD_VAR 0 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: LD_INT 24
7401: PUSH
7402: LD_INT 550
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 24
7415: PUSH
7416: LD_INT 250
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7437: LD_ADDR_VAR 0 16
7441: PUSH
7442: LD_INT 22
7444: PUSH
7445: LD_VAR 0 1
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 25
7456: PUSH
7457: LD_INT 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 24
7466: PUSH
7467: LD_INT 1000
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: PPUSH
7479: CALL_OW 69
7483: ST_TO_ADDR
// if medicCount then
7484: LD_VAR 0 4
7488: IFFALSE 7528
// begin if damageUnit_list then
7490: LD_VAR 0 14
7494: IFFALSE 7528
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7496: LD_VAR 0 14
7500: PPUSH
7501: LD_VAR 0 7
7505: PPUSH
7506: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_VAR 0 14
7519: PUSH
7520: LD_INT 1
7522: ARRAY
7523: PPUSH
7524: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7528: LD_ADDR_VAR 0 11
7532: PUSH
7533: LD_VAR 0 16
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7715
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7541: LD_ADDR_VAR 0 19
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_VAR 0 8
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 69
7562: PPUSH
7563: LD_VAR 0 11
7567: PPUSH
7568: CALL_OW 74
7572: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7573: LD_ADDR_VAR 0 20
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 2
7592: PUSH
7593: LD_INT 59
7595: PUSH
7596: EMPTY
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 1
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 21
7611: PUSH
7612: LD_INT 2
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: PPUSH
7632: CALL_OW 69
7636: PPUSH
7637: LD_VAR 0 11
7641: PPUSH
7642: CALL_OW 74
7646: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7647: LD_VAR 0 11
7651: PPUSH
7652: LD_VAR 0 19
7656: PPUSH
7657: CALL_OW 296
7661: PUSH
7662: LD_INT 8
7664: PLUS
7665: PUSH
7666: LD_VAR 0 11
7670: PPUSH
7671: LD_VAR 0 20
7675: PPUSH
7676: CALL_OW 296
7680: LESS
7681: IFFALSE 7699
// ComAttackUnit ( i , target1 ) else
7683: LD_VAR 0 11
7687: PPUSH
7688: LD_VAR 0 19
7692: PPUSH
7693: CALL_OW 115
7697: GO 7713
// ComAttackUnit ( i , target2 ) ;
7699: LD_VAR 0 11
7703: PPUSH
7704: LD_VAR 0 20
7708: PPUSH
7709: CALL_OW 115
// end ;
7713: GO 7538
7715: POP
7716: POP
// until not soldiersOK_list and not damageUnit_list ;
7717: LD_VAR 0 16
7721: NOT
7722: PUSH
7723: LD_VAR 0 14
7727: NOT
7728: AND
7729: IFFALSE 7369
// end ; if strategy = 2 then
7731: LD_VAR 0 9
7735: PUSH
7736: LD_INT 2
7738: EQUAL
7739: IFFALSE 8157
// begin for i in soldiersOK_list do
7741: LD_ADDR_VAR 0 11
7745: PUSH
7746: LD_VAR 0 16
7750: PUSH
7751: FOR_IN
7752: IFFALSE 7786
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7754: LD_VAR 0 11
7758: PPUSH
7759: LD_INT 91
7761: PPUSH
7762: LD_INT 63
7764: PPUSH
7765: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7769: LD_VAR 0 11
7773: PPUSH
7774: LD_INT 75
7776: PPUSH
7777: LD_INT 33
7779: PPUSH
7780: CALL_OW 174
// end ;
7784: GO 7751
7786: POP
7787: POP
// wait ( 0 0$10 ) ;
7788: LD_INT 350
7790: PPUSH
7791: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7795: LD_INT 105
7797: PPUSH
7798: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7802: LD_ADDR_VAR 0 14
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: LD_INT 24
7827: PUSH
7828: LD_INT 550
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 24
7841: PUSH
7842: LD_INT 250
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 69
7862: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7863: LD_ADDR_VAR 0 16
7867: PUSH
7868: LD_INT 22
7870: PUSH
7871: LD_VAR 0 1
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 25
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 24
7892: PUSH
7893: LD_INT 1000
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: PPUSH
7905: CALL_OW 69
7909: ST_TO_ADDR
// if medicCount then
7910: LD_VAR 0 4
7914: IFFALSE 7954
// begin if damageUnit_list then
7916: LD_VAR 0 14
7920: IFFALSE 7954
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7922: LD_VAR 0 14
7926: PPUSH
7927: LD_VAR 0 7
7931: PPUSH
7932: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7936: LD_VAR 0 4
7940: PPUSH
7941: LD_VAR 0 14
7945: PUSH
7946: LD_INT 1
7948: ARRAY
7949: PPUSH
7950: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7954: LD_ADDR_VAR 0 11
7958: PUSH
7959: LD_VAR 0 16
7963: PUSH
7964: FOR_IN
7965: IFFALSE 8141
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7967: LD_ADDR_VAR 0 19
7971: PUSH
7972: LD_INT 22
7974: PUSH
7975: LD_VAR 0 8
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PPUSH
7984: CALL_OW 69
7988: PPUSH
7989: LD_VAR 0 11
7993: PPUSH
7994: CALL_OW 74
7998: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7999: LD_ADDR_VAR 0 20
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 8
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: LD_INT 59
8021: PUSH
8022: EMPTY
8023: LIST
8024: PUSH
8025: LD_INT 21
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: LD_INT 21
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: PPUSH
8058: CALL_OW 69
8062: PPUSH
8063: LD_VAR 0 11
8067: PPUSH
8068: CALL_OW 74
8072: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8073: LD_VAR 0 11
8077: PPUSH
8078: LD_VAR 0 19
8082: PPUSH
8083: CALL_OW 296
8087: PUSH
8088: LD_INT 8
8090: PLUS
8091: PUSH
8092: LD_VAR 0 11
8096: PPUSH
8097: LD_VAR 0 20
8101: PPUSH
8102: CALL_OW 296
8106: LESS
8107: IFFALSE 8125
// ComAttackUnit ( i , target1 ) else
8109: LD_VAR 0 11
8113: PPUSH
8114: LD_VAR 0 19
8118: PPUSH
8119: CALL_OW 115
8123: GO 8139
// ComAttackUnit ( i , target2 ) ;
8125: LD_VAR 0 11
8129: PPUSH
8130: LD_VAR 0 20
8134: PPUSH
8135: CALL_OW 115
// end ;
8139: GO 7964
8141: POP
8142: POP
// until not soldiersOK_list and not damageUnit_list ;
8143: LD_VAR 0 16
8147: NOT
8148: PUSH
8149: LD_VAR 0 14
8153: NOT
8154: AND
8155: IFFALSE 7795
// end ; if medic_list then
8157: LD_VAR 0 15
8161: IFFALSE 8301
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8163: LD_ADDR_VAR 0 15
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_VAR 0 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 25
8182: PUSH
8183: LD_INT 4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 50
8192: PUSH
8193: EMPTY
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8206: LD_INT 35
8208: PPUSH
8209: CALL_OW 67
// for i in medic_list do
8213: LD_ADDR_VAR 0 11
8217: PUSH
8218: LD_VAR 0 15
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8292
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8226: LD_VAR 0 11
8230: PPUSH
8231: CALL_OW 314
8235: NOT
8236: PUSH
8237: LD_VAR 0 11
8241: PPUSH
8242: LD_INT 4
8244: PPUSH
8245: CALL_OW 308
8249: NOT
8250: AND
8251: IFFALSE 8267
// ComMoveToArea ( i , RussianAttack ) else
8253: LD_VAR 0 11
8257: PPUSH
8258: LD_INT 4
8260: PPUSH
8261: CALL_OW 113
8265: GO 8290
// if IsInArea ( i , RussianAttack ) then
8267: LD_VAR 0 11
8271: PPUSH
8272: LD_INT 4
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8290
// RemoveUnit ( i ) ;
8281: LD_VAR 0 11
8285: PPUSH
8286: CALL_OW 64
8290: GO 8223
8292: POP
8293: POP
// until not medic_list ;
8294: LD_VAR 0 15
8298: NOT
8299: IFFALSE 8163
// end ; end ; end_of_file
8301: LD_VAR 0 10
8305: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8306: LD_INT 0
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
// InGameOn ;
8313: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8317: LD_ADDR_VAR 0 3
8321: PUSH
8322: LD_EXP 8
8326: PUSH
8327: LD_EXP 9
8331: PUSH
8332: LD_EXP 10
8336: PUSH
8337: LD_EXP 11
8341: PUSH
8342: LD_EXP 12
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8354: LD_ADDR_VAR 0 4
8358: PUSH
8359: LD_INT 46
8361: PUSH
8362: LD_INT 45
8364: PUSH
8365: LD_INT 44
8367: PUSH
8368: LD_INT 43
8370: PUSH
8371: LD_INT 42
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8381: LD_ADDR_VAR 0 5
8385: PUSH
8386: LD_INT 14
8388: PUSH
8389: LD_INT 12
8391: PUSH
8392: LD_INT 10
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 6
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8408: LD_EXP 11
8412: PPUSH
8413: LD_INT 31
8415: PPUSH
8416: LD_INT 59
8418: PPUSH
8419: LD_INT 19
8421: PPUSH
8422: LD_INT 5
8424: PPUSH
8425: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8429: LD_INT 32
8431: PPUSH
8432: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8436: LD_INT 32
8438: PPUSH
8439: LD_INT 51
8441: PPUSH
8442: LD_INT 26
8444: PPUSH
8445: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8449: LD_INT 32
8451: PPUSH
8452: LD_INT 53
8454: PPUSH
8455: LD_INT 23
8457: PPUSH
8458: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8462: LD_INT 32
8464: PPUSH
8465: LD_INT 52
8467: PPUSH
8468: LD_INT 19
8470: PPUSH
8471: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8475: LD_INT 35
8477: PPUSH
8478: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8482: LD_INT 32
8484: PPUSH
8485: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8489: LD_INT 32
8491: PPUSH
8492: CALL_OW 250
8496: PUSH
8497: LD_INT 52
8499: EQUAL
8500: PUSH
8501: LD_INT 32
8503: PPUSH
8504: CALL_OW 251
8508: PUSH
8509: LD_INT 19
8511: EQUAL
8512: AND
8513: IFFALSE 8475
// ComExitVehicle ( JMM ) ;
8515: LD_EXP 1
8519: PPUSH
8520: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8524: LD_EXP 7
8528: PPUSH
8529: LD_EXP 1
8533: PPUSH
8534: CALL_OW 119
// wait ( 0 0$01 ) ;
8538: LD_INT 35
8540: PPUSH
8541: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8545: LD_EXP 1
8549: PPUSH
8550: LD_INT 46
8552: PPUSH
8553: LD_INT 10
8555: PPUSH
8556: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8560: LD_EXP 1
8564: PPUSH
8565: LD_EXP 7
8569: PPUSH
8570: CALL_OW 179
// wait ( 0 0$4 ) ;
8574: LD_INT 140
8576: PPUSH
8577: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8581: LD_EXP 1
8585: PPUSH
8586: LD_STRING D1-JMM-1
8588: PPUSH
8589: CALL_OW 88
// if not dialogue_skipped then
8593: LD_OWVAR 59
8597: NOT
8598: IFFALSE 9255
// begin for i := 1 to gammaSquad do
8600: LD_ADDR_VAR 0 2
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 3
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8677
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8618: LD_VAR 0 3
8622: PUSH
8623: LD_VAR 0 2
8627: ARRAY
8628: PPUSH
8629: LD_VAR 0 4
8633: PUSH
8634: LD_VAR 0 2
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 5
8644: PUSH
8645: LD_VAR 0 2
8649: ARRAY
8650: PPUSH
8651: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8655: LD_VAR 0 3
8659: PUSH
8660: LD_VAR 0 2
8664: ARRAY
8665: PPUSH
8666: LD_EXP 1
8670: PPUSH
8671: CALL_OW 179
// end ;
8675: GO 8615
8677: POP
8678: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8679: LD_EXP 4
8683: PPUSH
8684: LD_INT 41
8686: PPUSH
8687: LD_INT 4
8689: PPUSH
8690: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8694: LD_EXP 4
8698: PPUSH
8699: LD_EXP 1
8703: PPUSH
8704: CALL_OW 179
// if Lisa = false and Bobby then
8708: LD_EXP 4
8712: PUSH
8713: LD_INT 0
8715: EQUAL
8716: PUSH
8717: LD_EXP 2
8721: AND
8722: IFFALSE 8753
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8724: LD_EXP 2
8728: PPUSH
8729: LD_INT 41
8731: PPUSH
8732: LD_INT 4
8734: PPUSH
8735: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8739: LD_EXP 2
8743: PPUSH
8744: LD_EXP 1
8748: PPUSH
8749: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8753: LD_EXP 4
8757: PUSH
8758: LD_INT 0
8760: EQUAL
8761: PUSH
8762: LD_EXP 2
8766: PUSH
8767: LD_INT 0
8769: EQUAL
8770: AND
8771: PUSH
8772: LD_EXP 3
8776: AND
8777: IFFALSE 8808
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8779: LD_EXP 3
8783: PPUSH
8784: LD_INT 41
8786: PPUSH
8787: LD_INT 4
8789: PPUSH
8790: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8794: LD_EXP 3
8798: PPUSH
8799: LD_EXP 1
8803: PPUSH
8804: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8808: LD_EXP 4
8812: PUSH
8813: LD_INT 0
8815: EQUAL
8816: PUSH
8817: LD_EXP 2
8821: PUSH
8822: LD_INT 0
8824: EQUAL
8825: AND
8826: PUSH
8827: LD_EXP 3
8831: PUSH
8832: LD_INT 0
8834: EQUAL
8835: AND
8836: IFFALSE 8867
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8838: LD_EXP 6
8842: PPUSH
8843: LD_INT 41
8845: PPUSH
8846: LD_INT 4
8848: PPUSH
8849: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8853: LD_EXP 6
8857: PPUSH
8858: LD_EXP 1
8862: PPUSH
8863: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8867: LD_EXP 7
8871: PPUSH
8872: LD_STRING D1-Brown-1
8874: PPUSH
8875: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8879: LD_EXP 1
8883: PPUSH
8884: LD_STRING D1-JMM-2
8886: PPUSH
8887: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8891: LD_EXP 7
8895: PPUSH
8896: LD_STRING D1-Brown-2
8898: PPUSH
8899: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8903: LD_EXP 1
8907: PPUSH
8908: LD_EXP 9
8912: PPUSH
8913: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8917: LD_EXP 9
8921: PPUSH
8922: LD_STRING D1-FSol1-2
8924: PPUSH
8925: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8929: LD_EXP 1
8933: PPUSH
8934: LD_EXP 8
8938: PPUSH
8939: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8943: LD_EXP 8
8947: PPUSH
8948: LD_STRING D1-Sol2-2
8950: PPUSH
8951: CALL_OW 88
// if Lisa then
8955: LD_EXP 4
8959: IFFALSE 8999
// begin ComTurnUnit ( JMM , Lisa ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_EXP 4
8970: PPUSH
8971: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8975: LD_EXP 4
8979: PPUSH
8980: LD_STRING D1-Lisa-2
8982: PPUSH
8983: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8987: LD_EXP 1
8991: PPUSH
8992: LD_STRING D1-JMM-3
8994: PPUSH
8995: CALL_OW 88
// end ; if Bobby then
8999: LD_EXP 2
9003: IFFALSE 9043
// begin ComTurnUnit ( JMM , Bobby ) ;
9005: LD_EXP 1
9009: PPUSH
9010: LD_EXP 2
9014: PPUSH
9015: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9019: LD_EXP 2
9023: PPUSH
9024: LD_STRING D1-Bobby-2
9026: PPUSH
9027: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9031: LD_EXP 1
9035: PPUSH
9036: LD_STRING D1-JMM-3
9038: PPUSH
9039: CALL_OW 88
// end ; if Cyrus then
9043: LD_EXP 3
9047: IFFALSE 9087
// begin ComTurnUnit ( JMM , Cyrus ) ;
9049: LD_EXP 1
9053: PPUSH
9054: LD_EXP 3
9058: PPUSH
9059: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9063: LD_EXP 3
9067: PPUSH
9068: LD_STRING D1-Cyrus-2
9070: PPUSH
9071: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9075: LD_EXP 1
9079: PPUSH
9080: LD_STRING D1-JMM-3
9082: PPUSH
9083: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9087: LD_EXP 1
9091: PPUSH
9092: LD_EXP 7
9096: PPUSH
9097: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9101: LD_EXP 1
9105: PPUSH
9106: LD_STRING D1-JMM-3a
9108: PPUSH
9109: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9113: LD_EXP 7
9117: PPUSH
9118: LD_INT 38
9120: PPUSH
9121: LD_INT 5
9123: PPUSH
9124: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9128: LD_EXP 7
9132: PPUSH
9133: LD_EXP 1
9137: PPUSH
9138: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9142: LD_EXP 1
9146: PPUSH
9147: LD_INT 40
9149: PPUSH
9150: LD_INT 7
9152: PPUSH
9153: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_EXP 7
9166: PPUSH
9167: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9171: LD_EXP 7
9175: PPUSH
9176: LD_STRING D1-Brown-3
9178: PPUSH
9179: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9183: LD_EXP 14
9187: PPUSH
9188: LD_STRING D1-Har-3
9190: PPUSH
9191: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9195: LD_EXP 1
9199: PPUSH
9200: LD_STRING D1-JMM-4
9202: PPUSH
9203: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9207: LD_EXP 14
9211: PPUSH
9212: LD_STRING D1-Har-4
9214: PPUSH
9215: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9219: LD_EXP 1
9223: PPUSH
9224: LD_STRING D1-JMM-5
9226: PPUSH
9227: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9231: LD_EXP 14
9235: PPUSH
9236: LD_STRING D1-Har-5
9238: PPUSH
9239: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9243: LD_EXP 1
9247: PPUSH
9248: LD_STRING D1-JMM-6
9250: PPUSH
9251: CALL_OW 88
// end ; InGameOff ;
9255: CALL_OW 9
// PrepareRussianConvoy ;
9259: CALL 3404 0 0
// ChangeMissionObjectives ( M1 ) ;
9263: LD_STRING M1
9265: PPUSH
9266: CALL_OW 337
// SaveForQuickRestart ;
9270: CALL_OW 22
// timerStatus = 1 ;
9274: LD_ADDR_EXP 29
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// startTimer = 1 ;
9282: LD_ADDR_EXP 30
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// bonusAvalaible = 1 ;
9290: LD_ADDR_EXP 44
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9298: LD_INT 105
9300: PPUSH
9301: CALL_OW 67
// DialogueOn ;
9305: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9309: LD_EXP 12
9313: PPUSH
9314: LD_STRING D9-Mech1-1
9316: PPUSH
9317: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9321: LD_EXP 1
9325: PPUSH
9326: LD_STRING D9-JMM-1
9328: PPUSH
9329: CALL_OW 88
// DialogueOff ;
9333: CALL_OW 7
// end ;
9337: LD_VAR 0 1
9341: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9342: LD_INT 47
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 321
9352: PUSH
9353: LD_INT 2
9355: EQUAL
9356: PUSH
9357: LD_EXP 31
9361: NOT
9362: AND
9363: PUSH
9364: LD_INT 22
9366: PUSH
9367: LD_INT 1
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 21
9376: PUSH
9377: LD_INT 3
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 30
9386: PUSH
9387: LD_INT 3
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 57
9396: PUSH
9397: EMPTY
9398: LIST
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 69
9410: AND
9411: IFFALSE 9645
9413: GO 9415
9415: DISABLE
// begin factoryDialog := true ;
9416: LD_ADDR_EXP 31
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// if IsOk ( Campell ) then
9424: LD_EXP 12
9428: PPUSH
9429: CALL_OW 302
9433: IFFALSE 9449
// Say ( Campell , D10-Mech1-1 ) else
9435: LD_EXP 12
9439: PPUSH
9440: LD_STRING D10-Mech1-1
9442: PPUSH
9443: CALL_OW 88
9447: GO 9645
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9449: LD_INT 22
9451: PUSH
9452: LD_INT 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 21
9461: PUSH
9462: LD_INT 1
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 25
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 26
9481: PUSH
9482: LD_INT 1
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: PUSH
9500: LD_EXP 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: DIFF
9508: IFFALSE 9582
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9510: LD_INT 22
9512: PUSH
9513: LD_INT 1
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 21
9522: PUSH
9523: LD_INT 1
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 25
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 26
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: PUSH
9561: LD_EXP 1
9565: PUSH
9566: EMPTY
9567: LIST
9568: DIFF
9569: PPUSH
9570: LD_STRING D10-Mech1-1
9572: PPUSH
9573: LD_STRING D10-Mech1-1
9575: PPUSH
9576: CALL 4598 0 3
9580: GO 9645
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9582: LD_INT 22
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 26
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 1
9619: ARRAY
9620: PPUSH
9621: CALL_OW 69
9625: PUSH
9626: LD_EXP 1
9630: PUSH
9631: EMPTY
9632: LIST
9633: DIFF
9634: PPUSH
9635: LD_STRING D10-Mech1-1
9637: PPUSH
9638: LD_STRING D10-Mech1-1
9640: PPUSH
9641: CALL 4598 0 3
// end ; end ;
9645: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9646: LD_INT 22
9648: PUSH
9649: LD_INT 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 30
9658: PUSH
9659: LD_INT 32
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 69
9674: PUSH
9675: LD_EXP 32
9679: PUSH
9680: LD_INT 0
9682: EQUAL
9683: AND
9684: IFFALSE 9920
9686: GO 9688
9688: DISABLE
// begin if IsOk ( Claptopn ) then
9689: LD_EXP 11
9693: PPUSH
9694: CALL_OW 302
9698: IFFALSE 9714
// Say ( Claptopn , D9b-Eng1-1 ) else
9700: LD_EXP 11
9704: PPUSH
9705: LD_STRING D9b-Eng1-1
9707: PPUSH
9708: CALL_OW 88
9712: GO 9906
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9714: LD_INT 22
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 21
9726: PUSH
9727: LD_INT 1
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 25
9736: PUSH
9737: LD_INT 3
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 26
9746: PUSH
9747: LD_INT 1
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PPUSH
9760: CALL_OW 69
9764: PUSH
9765: LD_EXP 1
9769: PUSH
9770: EMPTY
9771: LIST
9772: DIFF
9773: IFFALSE 9847
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9775: LD_INT 22
9777: PUSH
9778: LD_INT 1
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 21
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 25
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 26
9807: PUSH
9808: LD_INT 1
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 69
9825: PUSH
9826: LD_EXP 1
9830: PUSH
9831: EMPTY
9832: LIST
9833: DIFF
9834: PPUSH
9835: LD_STRING D9b-Eng1-1
9837: PPUSH
9838: LD_STRING D9b-Eng1-11
9840: PPUSH
9841: CALL 4598 0 3
9845: GO 9906
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9847: LD_INT 22
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 21
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 26
9869: PUSH
9870: LD_INT 1
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 69
9886: PUSH
9887: LD_EXP 1
9891: PUSH
9892: EMPTY
9893: LIST
9894: DIFF
9895: PPUSH
9896: LD_STRING D9b-Eng1-1
9898: PPUSH
9899: LD_STRING D9b-Eng1-1
9901: PPUSH
9902: CALL 4598 0 3
// end ; if energyVDialog = 0 then
9906: LD_EXP 33
9910: PUSH
9911: LD_INT 0
9913: EQUAL
9914: IFFALSE 9920
// EnergyDialog ;
9916: CALL 5003 0 0
// end ;
9920: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9921: LD_EXP 34
9925: PUSH
9926: LD_INT 1
9928: EQUAL
9929: PUSH
9930: LD_EXP 35
9934: PUSH
9935: LD_INT 1
9937: EQUAL
9938: AND
9939: IFFALSE 9951
9941: GO 9943
9943: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9944: LD_STRING M1a
9946: PPUSH
9947: CALL_OW 337
9951: END
// every 3 3$0 do
9952: GO 9954
9954: DISABLE
// PrepareFirstAttack ;
9955: CALL 4216 0 0
9959: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9960: LD_INT 22
9962: PUSH
9963: LD_INT 5
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 21
9972: PUSH
9973: LD_INT 1
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 3
9982: PUSH
9983: LD_INT 24
9985: PUSH
9986: LD_INT 250
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 69
10006: PUSH
10007: LD_INT 0
10009: GREATER
10010: PUSH
10011: LD_EXP 23
10015: PUSH
10016: LD_INT 1
10018: EQUAL
10019: AND
10020: IFFALSE 10321
10022: GO 10024
10024: DISABLE
10025: LD_INT 0
10027: PPUSH
// begin firstRussianAttack = 2 ;
10028: LD_ADDR_EXP 23
10032: PUSH
10033: LD_INT 2
10035: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10036: LD_INT 22
10038: PUSH
10039: LD_INT 5
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 21
10048: PUSH
10049: LD_INT 1
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 69
10064: PPUSH
10065: LD_INT 125
10067: PPUSH
10068: LD_INT 98
10070: PPUSH
10071: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10075: LD_INT 22
10077: PUSH
10078: LD_INT 1
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 21
10087: PUSH
10088: LD_INT 1
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: LD_EXP 1
10108: PUSH
10109: LD_EXP 7
10113: PUSH
10114: LD_EXP 4
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: DIFF
10124: PPUSH
10125: LD_STRING DAtt1-Sol1-1
10127: PPUSH
10128: LD_STRING DAtt1-FSol1-1
10130: PPUSH
10131: CALL 4598 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10135: LD_EXP 1
10139: PPUSH
10140: LD_STRING DAtt1-JMM-1
10142: PPUSH
10143: CALL_OW 88
// if Lisa then
10147: LD_EXP 4
10151: IFFALSE 10167
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10153: LD_EXP 4
10157: PPUSH
10158: LD_STRING DAtt1a-Lisa-1
10160: PPUSH
10161: CALL_OW 88
10165: GO 10238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10167: LD_INT 22
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 1
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 26
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PUSH
10207: LD_EXP 1
10211: PUSH
10212: LD_EXP 7
10216: PUSH
10217: LD_EXP 4
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: DIFF
10227: PPUSH
10228: LD_STRING DAtt1a-Sol1-1
10230: PPUSH
10231: LD_STRING DAtt1-FSol1-1
10233: PPUSH
10234: CALL 4598 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10238: LD_EXP 1
10242: PPUSH
10243: LD_STRING DAtt1a-JMM-1
10245: PPUSH
10246: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10250: LD_INT 22
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 26
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 69
10289: PUSH
10290: LD_EXP 1
10294: PUSH
10295: LD_EXP 7
10299: PUSH
10300: LD_EXP 4
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: DIFF
10310: PPUSH
10311: LD_STRING DAtt1b-Sol1-1
10313: PPUSH
10314: LD_STRING DAtt1a-Sol1-1
10316: PPUSH
10317: CALL 4598 0 3
// end ;
10321: PPOPN 1
10323: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10324: LD_EXP 23
10328: PUSH
10329: LD_INT 2
10331: EQUAL
10332: PUSH
10333: LD_INT 5
10335: PPUSH
10336: LD_INT 22
10338: PUSH
10339: LD_INT 5
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 21
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PPUSH
10360: CALL_OW 70
10364: AND
10365: IFFALSE 10423
10367: GO 10369
10369: DISABLE
10370: LD_INT 0
10372: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10373: LD_ADDR_VAR 0 1
10377: PUSH
10378: LD_INT 22
10380: PUSH
10381: LD_INT 5
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 21
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PPUSH
10402: CALL_OW 69
10406: PUSH
10407: FOR_IN
10408: IFFALSE 10421
// RemoveUnit ( i ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL_OW 64
10419: GO 10407
10421: POP
10422: POP
// end ;
10423: PPOPN 1
10425: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10426: LD_INT 22
10428: PUSH
10429: LD_INT 5
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: PPUSH
10439: CALL_OW 69
10443: PUSH
10444: LD_INT 0
10446: EQUAL
10447: PUSH
10448: LD_EXP 23
10452: PUSH
10453: LD_INT 2
10455: EQUAL
10456: AND
10457: IFFALSE 10470
10459: GO 10461
10461: DISABLE
// firstRussianAttack = 3 ;
10462: LD_ADDR_EXP 23
10466: PUSH
10467: LD_INT 3
10469: ST_TO_ADDR
10470: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10471: LD_EXP 28
10475: PUSH
10476: LD_INT 0
10478: EQUAL
10479: IFFALSE 10560
10481: GO 10483
10483: DISABLE
// begin timerStatus = 4 ;
10484: LD_ADDR_EXP 29
10488: PUSH
10489: LD_INT 4
10491: ST_TO_ADDR
// DialogueOn ;
10492: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10496: LD_EXP 13
10500: PPUSH
10501: LD_STRING D2-Don-1
10503: PPUSH
10504: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10508: LD_EXP 1
10512: PPUSH
10513: LD_STRING D2-JMM-1
10515: PPUSH
10516: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10520: LD_EXP 13
10524: PPUSH
10525: LD_STRING D2-Don-2
10527: PPUSH
10528: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10532: LD_EXP 1
10536: PPUSH
10537: LD_STRING D2-JMM-2
10539: PPUSH
10540: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10544: LD_EXP 13
10548: PPUSH
10549: LD_STRING D2-Don-3
10551: PPUSH
10552: CALL_OW 94
// DialogueOff ;
10556: CALL_OW 7
// end ;
10560: END
// every 12 12$0 do var tmp ;
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
// begin PrepareDonaldsonArmy ;
10567: CALL 1187 0 0
// CenterNowOnUnits ( Donaldson ) ;
10571: LD_EXP 13
10575: PPUSH
10576: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10580: LD_INT 22
10582: PUSH
10583: LD_INT 6
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: NOT
10595: IFFALSE 10611
// begin wait ( 3 ) ;
10597: LD_INT 3
10599: PPUSH
10600: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10604: LD_STRING ACH_BASE
10606: PPUSH
10607: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
10611: LD_ADDR_VAR 0 1
10615: PUSH
10616: LD_INT 22
10618: PUSH
10619: LD_INT 4
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 26
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 25
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: PPUSH
10662: CALL_OW 69
10666: PUSH
10667: LD_EXP 5
10671: PUSH
10672: EMPTY
10673: LIST
10674: DIFF
10675: ST_TO_ADDR
// DialogueOn ;
10676: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10680: LD_VAR 0 1
10684: PPUSH
10685: LD_STRING D3-Sol1-1
10687: PPUSH
10688: LD_STRING D3-Sol1-1
10690: PPUSH
10691: CALL 4598 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
10695: LD_INT 22
10697: PUSH
10698: LD_INT 4
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 21
10707: PUSH
10708: LD_INT 1
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: LD_INT 26
10717: PUSH
10718: LD_INT 1
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 25
10727: PUSH
10728: LD_INT 3
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: PPUSH
10741: CALL_OW 69
10745: PPUSH
10746: LD_STRING D3-Sol2-1
10748: PPUSH
10749: LD_STRING D3-Sol2-1
10751: PPUSH
10752: CALL 4598 0 3
// if Frank then
10756: LD_EXP 5
10760: IFFALSE 10774
// Say ( Frank , D3-Frank-1 ) ;
10762: LD_EXP 5
10766: PPUSH
10767: LD_STRING D3-Frank-1
10769: PPUSH
10770: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10774: LD_EXP 13
10778: PPUSH
10779: LD_STRING D3-Don-1
10781: PPUSH
10782: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10786: LD_EXP 13
10790: PPUSH
10791: LD_STRING D3-Don-1a
10793: PPUSH
10794: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10798: LD_EXP 1
10802: PPUSH
10803: LD_STRING D3-JMM-1
10805: PPUSH
10806: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10810: LD_EXP 13
10814: PPUSH
10815: LD_STRING D3-Don-2
10817: PPUSH
10818: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10822: LD_INT 22
10824: PUSH
10825: LD_INT 6
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 21
10834: PUSH
10835: LD_INT 1
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PPUSH
10846: CALL_OW 69
10850: IFFALSE 10988
// begin Say ( JMM , D3-JMM-2 ) ;
10852: LD_EXP 1
10856: PPUSH
10857: LD_STRING D3-JMM-2
10859: PPUSH
10860: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10864: LD_EXP 13
10868: PPUSH
10869: LD_STRING D3-Don-3
10871: PPUSH
10872: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10876: LD_EXP 1
10880: PPUSH
10881: LD_STRING D3-JMM-3
10883: PPUSH
10884: CALL_OW 88
// if IsOK ( Frank ) then
10888: LD_EXP 5
10892: PPUSH
10893: CALL_OW 302
10897: IFFALSE 10911
// Say ( Frank , D3-Frank-3 ) ;
10899: LD_EXP 5
10903: PPUSH
10904: LD_STRING D3-Frank-3
10906: PPUSH
10907: CALL_OW 88
// DialogueOff ;
10911: CALL_OW 7
// if IsOk ( Frank ) then
10915: LD_EXP 5
10919: PPUSH
10920: CALL_OW 302
10924: IFFALSE 10986
// begin SetSide ( Frank , 0 ) ;
10926: LD_EXP 5
10930: PPUSH
10931: LD_INT 0
10933: PPUSH
10934: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10938: LD_EXP 5
10942: PPUSH
10943: LD_INT 12
10945: PPUSH
10946: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10950: LD_EXP 5
10954: PPUSH
10955: LD_STRING 04t_Frank
10957: PPUSH
10958: CALL_OW 38
// wait ( 0 0$3 ) ;
10962: LD_INT 105
10964: PPUSH
10965: CALL_OW 67
// frankScoutBase = 1 ;
10969: LD_ADDR_EXP 25
10973: PUSH
10974: LD_INT 1
10976: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10977: LD_EXP 5
10981: PPUSH
10982: CALL_OW 64
// end ; end else
10986: GO 11075
// begin Say ( JMM , D3-JMM-4 ) ;
10988: LD_EXP 1
10992: PPUSH
10993: LD_STRING D3-JMM-4
10995: PPUSH
10996: CALL_OW 88
// DialogueOff ;
11000: CALL_OW 7
// if IsOk ( Frank ) then
11004: LD_EXP 5
11008: PPUSH
11009: CALL_OW 302
11013: IFFALSE 11075
// begin SetSide ( Frank , 0 ) ;
11015: LD_EXP 5
11019: PPUSH
11020: LD_INT 0
11022: PPUSH
11023: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11027: LD_EXP 5
11031: PPUSH
11032: LD_INT 12
11034: PPUSH
11035: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
11039: LD_EXP 5
11043: PPUSH
11044: LD_STRING 04t_Frank
11046: PPUSH
11047: CALL_OW 38
// wait ( 0 0$3 ) ;
11051: LD_INT 105
11053: PPUSH
11054: CALL_OW 67
// frankScoutBase = 1 ;
11058: LD_ADDR_EXP 25
11062: PUSH
11063: LD_INT 1
11065: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11066: LD_EXP 5
11070: PPUSH
11071: CALL_OW 64
// end ; end ; end ;
11075: PPOPN 1
11077: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11078: LD_EXP 13
11082: PPUSH
11083: CALL_OW 255
11087: PUSH
11088: LD_INT 4
11090: EQUAL
11091: PUSH
11092: LD_EXP 13
11096: PPUSH
11097: CALL_OW 302
11101: AND
11102: IFFALSE 11342
11104: GO 11106
11106: DISABLE
11107: LD_INT 0
11109: PPUSH
11110: PPUSH
// begin wait ( 5 5$00 ) ;
11111: LD_INT 10500
11113: PPUSH
11114: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11118: LD_EXP 13
11122: PPUSH
11123: CALL_OW 255
11127: PUSH
11128: LD_INT 1
11130: EQUAL
11131: PUSH
11132: LD_EXP 13
11136: PPUSH
11137: CALL_OW 301
11141: OR
11142: IFFALSE 11146
// exit ;
11144: GO 11342
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11146: LD_EXP 13
11150: PPUSH
11151: LD_STRING D3b-Don-1
11153: PPUSH
11154: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11158: LD_ADDR_EXP 41
11162: PUSH
11163: LD_INT 1
11165: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11166: LD_ADDR_VAR 0 2
11170: PUSH
11171: LD_INT 22
11173: PUSH
11174: LD_INT 4
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PPUSH
11181: CALL_OW 69
11185: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11186: LD_INT 35
11188: PPUSH
11189: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11193: LD_VAR 0 2
11197: NOT
11198: PUSH
11199: LD_INT 22
11201: PUSH
11202: LD_INT 6
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 101
11211: PUSH
11212: LD_INT 1
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PPUSH
11223: CALL_OW 69
11227: OR
11228: IFFALSE 11186
// if not tmp then
11230: LD_VAR 0 2
11234: NOT
11235: IFFALSE 11239
// exit ;
11237: GO 11342
// for i in tmp do
11239: LD_ADDR_VAR 0 1
11243: PUSH
11244: LD_VAR 0 2
11248: PUSH
11249: FOR_IN
11250: IFFALSE 11269
// ComAgressiveMove ( i , 52 , 64 ) ;
11252: LD_VAR 0 1
11256: PPUSH
11257: LD_INT 52
11259: PPUSH
11260: LD_INT 64
11262: PPUSH
11263: CALL_OW 114
11267: GO 11249
11269: POP
11270: POP
// wait ( 0 0$10 ) ;
11271: LD_INT 350
11273: PPUSH
11274: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11278: LD_ADDR_VAR 0 1
11282: PUSH
11283: LD_INT 22
11285: PUSH
11286: LD_INT 4
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 69
11297: PUSH
11298: LD_EXP 5
11302: DIFF
11303: PUSH
11304: FOR_IN
11305: IFFALSE 11321
// SetSide ( i , 1 ) ;
11307: LD_VAR 0 1
11311: PPUSH
11312: LD_INT 1
11314: PPUSH
11315: CALL_OW 235
11319: GO 11304
11321: POP
11322: POP
// if IsLive ( Donaldson ) then
11323: LD_EXP 13
11327: PPUSH
11328: CALL_OW 300
11332: IFFALSE 11342
// saveDonaldson := 1 ;
11334: LD_ADDR_EXP 24
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// end ;
11342: PPOPN 2
11344: END
// every 0 0$1 trigger not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11345: LD_EXP 24
11349: NOT
11350: PUSH
11351: LD_EXP 41
11355: NOT
11356: AND
11357: PUSH
11358: LD_INT 26
11360: PPUSH
11361: LD_INT 22
11363: PUSH
11364: LD_INT 1
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PPUSH
11371: CALL_OW 70
11375: PUSH
11376: LD_EXP 13
11380: PPUSH
11381: LD_EXP 1
11385: PPUSH
11386: CALL_OW 296
11390: PUSH
11391: LD_INT 6
11393: LESS
11394: OR
11395: AND
11396: IFFALSE 11451
11398: GO 11400
11400: DISABLE
11401: LD_INT 0
11403: PPUSH
// begin saveDonaldson := 1 ;
11404: LD_ADDR_EXP 24
11408: PUSH
11409: LD_INT 1
11411: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11412: LD_ADDR_VAR 0 1
11416: PUSH
11417: LD_INT 22
11419: PUSH
11420: LD_INT 4
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PPUSH
11427: CALL_OW 69
11431: PUSH
11432: FOR_IN
11433: IFFALSE 11449
// SetSide ( i , 1 ) ;
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_INT 1
11442: PPUSH
11443: CALL_OW 235
11447: GO 11432
11449: POP
11450: POP
// end ;
11451: PPOPN 1
11453: END
// every 0 0$1 trigger frankScoutBase do
11454: LD_EXP 25
11458: IFFALSE 11823
11460: GO 11462
11462: DISABLE
// begin wait ( 2 2$30 ) ;
11463: LD_INT 5250
11465: PPUSH
11466: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11470: LD_INT 35
11472: PPUSH
11473: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11477: LD_INT 81
11479: PUSH
11480: LD_INT 4
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: LD_INT 92
11489: PUSH
11490: LD_INT 84
11492: PUSH
11493: LD_INT 28
11495: PUSH
11496: LD_INT 22
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PPUSH
11509: CALL_OW 69
11513: NOT
11514: IFFALSE 11470
// uc_side = 4 ;
11516: LD_ADDR_OWVAR 20
11520: PUSH
11521: LD_INT 4
11523: ST_TO_ADDR
// uc_nation = 1 ;
11524: LD_ADDR_OWVAR 21
11528: PUSH
11529: LD_INT 1
11531: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11532: LD_ADDR_EXP 5
11536: PUSH
11537: LD_STRING 04t_Frank
11539: PPUSH
11540: CALL_OW 34
11544: ST_TO_ADDR
// if not Frank then
11545: LD_EXP 5
11549: NOT
11550: IFFALSE 11554
// exit ;
11552: GO 11823
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11554: LD_EXP 5
11558: PPUSH
11559: LD_INT 13
11561: PPUSH
11562: LD_INT 0
11564: PPUSH
11565: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11569: LD_INT 35
11571: PPUSH
11572: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11576: LD_EXP 1
11580: PPUSH
11581: CALL_OW 310
11585: NOT
11586: PUSH
11587: LD_EXP 1
11591: PPUSH
11592: LD_INT 4
11594: PPUSH
11595: CALL_OW 296
11599: PUSH
11600: LD_INT 20
11602: LESS
11603: AND
11604: IFFALSE 11637
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11606: LD_EXP 5
11610: PPUSH
11611: LD_EXP 1
11615: PPUSH
11616: CALL_OW 250
11620: PPUSH
11621: LD_EXP 1
11625: PPUSH
11626: CALL_OW 251
11630: PPUSH
11631: CALL_OW 111
11635: GO 11652
// ComMoveXY ( Frank , 51 , 15 ) ;
11637: LD_EXP 5
11641: PPUSH
11642: LD_INT 51
11644: PPUSH
11645: LD_INT 15
11647: PPUSH
11648: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11652: LD_EXP 5
11656: PPUSH
11657: LD_EXP 1
11661: PPUSH
11662: CALL_OW 296
11666: PUSH
11667: LD_INT 10
11669: LESS
11670: IFFALSE 11569
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11672: LD_EXP 1
11676: PUSH
11677: LD_EXP 5
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PPUSH
11686: CALL_OW 87
// DialogueOn ;
11690: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11694: LD_EXP 5
11698: PPUSH
11699: LD_STRING D3a-Frank-1
11701: PPUSH
11702: CALL_OW 88
// if Lisa then
11706: LD_EXP 4
11710: IFFALSE 11760
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11712: LD_EXP 4
11716: PPUSH
11717: LD_STRING D3a-Lisa-1
11719: PPUSH
11720: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11724: LD_EXP 5
11728: PPUSH
11729: LD_STRING D3a-Frank-2
11731: PPUSH
11732: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11736: LD_EXP 4
11740: PPUSH
11741: LD_STRING D3a-Lisa-2
11743: PPUSH
11744: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11748: LD_EXP 5
11752: PPUSH
11753: LD_STRING D3a-Frank-3
11755: PPUSH
11756: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11760: LD_EXP 1
11764: PPUSH
11765: LD_STRING D3a-JMM-3
11767: PPUSH
11768: CALL_OW 88
// DialogueOff ;
11772: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11776: LD_EXP 5
11780: PPUSH
11781: LD_INT 1
11783: PPUSH
11784: CALL_OW 235
// InGameOn ;
11788: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11792: LD_INT 1
11794: PPUSH
11795: LD_INT 7
11797: PPUSH
11798: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11802: LD_INT 93
11804: PPUSH
11805: LD_INT 91
11807: PPUSH
11808: CALL_OW 84
// wait ( 0 0$5 ) ;
11812: LD_INT 175
11814: PPUSH
11815: CALL_OW 67
// InGameOff ;
11819: CALL_OW 9
// end ;
11823: END
// every 12 12$0 trigger Difficulty > 1 do
11824: LD_OWVAR 67
11828: PUSH
11829: LD_INT 1
11831: GREATER
11832: IFFALSE 11856
11834: GO 11836
11836: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11837: LD_INT 24
11839: PPUSH
11840: LD_INT 24
11842: PPUSH
11843: LD_INT 1
11845: PPUSH
11846: LD_INT 1
11848: PPUSH
11849: LD_INT 53
11851: PPUSH
11852: CALL_OW 185
11856: END
// every 18 18$0 do
11857: GO 11859
11859: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11860: LD_EXP 14
11864: PPUSH
11865: LD_STRING D4-Har-1
11867: PPUSH
11868: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11872: LD_EXP 1
11876: PPUSH
11877: LD_STRING D4-JMM-1
11879: PPUSH
11880: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11884: LD_EXP 14
11888: PPUSH
11889: LD_STRING D4-Har-2
11891: PPUSH
11892: CALL_OW 94
// case Query ( Q1 ) of 1 :
11896: LD_STRING Q1
11898: PPUSH
11899: CALL_OW 97
11903: PUSH
11904: LD_INT 1
11906: DOUBLE
11907: EQUAL
11908: IFTRUE 11912
11910: GO 11971
11912: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11913: LD_EXP 1
11917: PPUSH
11918: LD_STRING D5-JMM-1
11920: PPUSH
11921: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11925: LD_EXP 14
11929: PPUSH
11930: LD_STRING D5-Har-1
11932: PPUSH
11933: CALL_OW 94
// timeToSupport = 10 10$0 ;
11937: LD_ADDR_EXP 28
11941: PUSH
11942: LD_INT 21000
11944: ST_TO_ADDR
// timerStatus = 2 ;
11945: LD_ADDR_EXP 29
11949: PUSH
11950: LD_INT 2
11952: ST_TO_ADDR
// startTimer = 1 ;
11953: LD_ADDR_EXP 30
11957: PUSH
11958: LD_INT 1
11960: ST_TO_ADDR
// harrAnswer = 1 ;
11961: LD_ADDR_EXP 26
11965: PUSH
11966: LD_INT 1
11968: ST_TO_ADDR
// end ; 2 :
11969: GO 12106
11971: LD_INT 2
11973: DOUBLE
11974: EQUAL
11975: IFTRUE 11979
11977: GO 12038
11979: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11980: LD_EXP 1
11984: PPUSH
11985: LD_STRING D5-JMM-2
11987: PPUSH
11988: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11992: LD_EXP 14
11996: PPUSH
11997: LD_STRING D5-Har-2
11999: PPUSH
12000: CALL_OW 94
// timeToSupport = 5 5$0 ;
12004: LD_ADDR_EXP 28
12008: PUSH
12009: LD_INT 10500
12011: ST_TO_ADDR
// timerStatus = 2 ;
12012: LD_ADDR_EXP 29
12016: PUSH
12017: LD_INT 2
12019: ST_TO_ADDR
// startTimer = 1 ;
12020: LD_ADDR_EXP 30
12024: PUSH
12025: LD_INT 1
12027: ST_TO_ADDR
// harrAnswer = 2 ;
12028: LD_ADDR_EXP 26
12032: PUSH
12033: LD_INT 2
12035: ST_TO_ADDR
// end ; 3 :
12036: GO 12106
12038: LD_INT 3
12040: DOUBLE
12041: EQUAL
12042: IFTRUE 12046
12044: GO 12105
12046: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12047: LD_EXP 1
12051: PPUSH
12052: LD_STRING D5-JMM-3
12054: PPUSH
12055: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12059: LD_EXP 14
12063: PPUSH
12064: LD_STRING D5-Har-3
12066: PPUSH
12067: CALL_OW 94
// timeToSupport = 5 5$0 ;
12071: LD_ADDR_EXP 28
12075: PUSH
12076: LD_INT 10500
12078: ST_TO_ADDR
// timerStatus = 2 ;
12079: LD_ADDR_EXP 29
12083: PUSH
12084: LD_INT 2
12086: ST_TO_ADDR
// startTimer = 1 ;
12087: LD_ADDR_EXP 30
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// harrAnswer = 3 ;
12095: LD_ADDR_EXP 26
12099: PUSH
12100: LD_INT 3
12102: ST_TO_ADDR
// end ; end ;
12103: GO 12106
12105: POP
// end ;
12106: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12107: LD_EXP 29
12111: PUSH
12112: LD_INT 2
12114: EQUAL
12115: PUSH
12116: LD_EXP 28
12120: PUSH
12121: LD_INT 0
12123: EQUAL
12124: AND
12125: IFFALSE 12414
12127: GO 12129
12129: DISABLE
// begin timerStatus = 4 ;
12130: LD_ADDR_EXP 29
12134: PUSH
12135: LD_INT 4
12137: ST_TO_ADDR
// if harrAnswer = 1 then
12138: LD_EXP 26
12142: PUSH
12143: LD_INT 1
12145: EQUAL
12146: IFFALSE 12230
// begin PrepareHarrisonSupport ( 3 ) ;
12148: LD_INT 3
12150: PPUSH
12151: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12155: LD_INT 2100
12157: PPUSH
12158: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12162: LD_EXP 14
12166: PPUSH
12167: LD_STRING D7-Har-1
12169: PPUSH
12170: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12174: LD_STRING M2
12176: PPUSH
12177: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12181: LD_ADDR_EXP 27
12185: PUSH
12186: LD_INT 31500
12188: PUSH
12189: LD_INT 10500
12191: PUSH
12192: LD_INT 8400
12194: PUSH
12195: LD_INT 6300
12197: PUSH
12198: LD_INT 6300
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: LD_OWVAR 67
12211: ARRAY
12212: PLUS
12213: ST_TO_ADDR
// startTimer = 1 ;
12214: LD_ADDR_EXP 30
12218: PUSH
12219: LD_INT 1
12221: ST_TO_ADDR
// timerStatus = 3 ;
12222: LD_ADDR_EXP 29
12226: PUSH
12227: LD_INT 3
12229: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12230: LD_EXP 26
12234: PUSH
12235: LD_INT 2
12237: EQUAL
12238: IFFALSE 12322
// begin PrepareHarrisonSupport ( 4 ) ;
12240: LD_INT 4
12242: PPUSH
12243: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12247: LD_INT 2100
12249: PPUSH
12250: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12254: LD_EXP 14
12258: PPUSH
12259: LD_STRING D7-Har-1
12261: PPUSH
12262: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12266: LD_STRING M2
12268: PPUSH
12269: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12273: LD_ADDR_EXP 27
12277: PUSH
12278: LD_INT 33600
12280: PUSH
12281: LD_INT 10500
12283: PUSH
12284: LD_INT 8400
12286: PUSH
12287: LD_INT 6300
12289: PUSH
12290: LD_INT 5250
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: PUSH
12299: LD_OWVAR 67
12303: ARRAY
12304: PLUS
12305: ST_TO_ADDR
// startTimer = 1 ;
12306: LD_ADDR_EXP 30
12310: PUSH
12311: LD_INT 1
12313: ST_TO_ADDR
// timerStatus = 3 ;
12314: LD_ADDR_EXP 29
12318: PUSH
12319: LD_INT 3
12321: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12322: LD_EXP 26
12326: PUSH
12327: LD_INT 3
12329: EQUAL
12330: IFFALSE 12414
// begin PrepareHarrisonSupport ( 5 ) ;
12332: LD_INT 5
12334: PPUSH
12335: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12339: LD_INT 2100
12341: PPUSH
12342: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12346: LD_EXP 14
12350: PPUSH
12351: LD_STRING D7-Har-1
12353: PPUSH
12354: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12358: LD_STRING M2
12360: PPUSH
12361: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12365: LD_ADDR_EXP 27
12369: PUSH
12370: LD_INT 35700
12372: PUSH
12373: LD_INT 10500
12375: PUSH
12376: LD_INT 6300
12378: PUSH
12379: LD_INT 4200
12381: PUSH
12382: LD_INT 3150
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: LD_OWVAR 67
12395: ARRAY
12396: PLUS
12397: ST_TO_ADDR
// startTimer = 1 ;
12398: LD_ADDR_EXP 30
12402: PUSH
12403: LD_INT 1
12405: ST_TO_ADDR
// timerStatus = 3 ;
12406: LD_ADDR_EXP 29
12410: PUSH
12411: LD_INT 3
12413: ST_TO_ADDR
// end ; end ;
12414: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12415: LD_EXP 27
12419: PUSH
12420: LD_INT 8400
12422: LESSEQUAL
12423: PUSH
12424: LD_EXP 29
12428: PUSH
12429: LD_INT 3
12431: EQUAL
12432: AND
12433: IFFALSE 12465
12435: GO 12437
12437: DISABLE
// begin DialogueOn ;
12438: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12442: LD_EXP 14
12446: PPUSH
12447: LD_STRING D7a-Har-1
12449: PPUSH
12450: CALL_OW 94
// DialogueOff ;
12454: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12458: LD_STRING M2a
12460: PPUSH
12461: CALL_OW 337
// end ;
12465: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12466: LD_EXP 27
12470: PUSH
12471: LD_INT 0
12473: LESSEQUAL
12474: PUSH
12475: LD_EXP 29
12479: PUSH
12480: LD_INT 3
12482: EQUAL
12483: AND
12484: PUSH
12485: LD_EXP 40
12489: NOT
12490: AND
12491: IFFALSE 12630
12493: GO 12495
12495: DISABLE
12496: LD_INT 0
12498: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12499: LD_ADDR_VAR 0 1
12503: PUSH
12504: LD_INT 22
12506: PUSH
12507: LD_INT 1
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: PUSH
12519: LD_EXP 1
12523: PUSH
12524: EMPTY
12525: LIST
12526: DIFF
12527: ST_TO_ADDR
// saveDonaldson = 2 ;
12528: LD_ADDR_EXP 24
12532: PUSH
12533: LD_INT 2
12535: ST_TO_ADDR
// DialogueOn ;
12536: CALL_OW 6
// if IsOk ( Donaldson ) then
12540: LD_EXP 13
12544: PPUSH
12545: CALL_OW 302
12549: IFFALSE 12565
// SayRadio ( Harisson , D8-Har-1 ) else
12551: LD_EXP 14
12555: PPUSH
12556: LD_STRING D8-Har-1
12558: PPUSH
12559: CALL_OW 94
12563: GO 12577
// SayRadio ( Harisson , D8-Har-1a ) ;
12565: LD_EXP 14
12569: PPUSH
12570: LD_STRING D8-Har-1a
12572: PPUSH
12573: CALL_OW 94
// DialogueOff ;
12577: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12581: LD_VAR 0 1
12585: PPUSH
12586: LD_INT 4
12588: PPUSH
12589: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12593: LD_VAR 0 1
12597: PPUSH
12598: LD_INT 88
12600: PPUSH
12601: LD_INT 89
12603: PPUSH
12604: CALL_OW 114
// honor = 0 ;
12608: LD_ADDR_EXP 39
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12616: LD_INT 350
12618: PPUSH
12619: CALL_OW 67
// YouLost ( LostCommand ) ;
12623: LD_STRING LostCommand
12625: PPUSH
12626: CALL_OW 104
// end ;
12630: PPOPN 1
12632: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12633: LD_INT 22
12635: PUSH
12636: LD_INT 6
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 21
12645: PUSH
12646: LD_INT 1
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PPUSH
12657: CALL_OW 69
12661: PUSH
12662: LD_INT 0
12664: EQUAL
12665: PUSH
12666: LD_EXP 20
12670: PUSH
12671: LD_INT 0
12673: EQUAL
12674: AND
12675: PUSH
12676: LD_EXP 44
12680: PUSH
12681: LD_INT 1
12683: EQUAL
12684: AND
12685: IFFALSE 12779
12687: GO 12689
12689: DISABLE
12690: LD_INT 0
12692: PPUSH
12693: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12694: LD_ADDR_VAR 0 2
12698: PUSH
12699: LD_INT 22
12701: PUSH
12702: LD_INT 1
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 21
12711: PUSH
12712: LD_INT 1
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 23
12721: PUSH
12722: LD_INT 1
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: PPUSH
12734: CALL_OW 69
12738: ST_TO_ADDR
// for i in tmp do
12739: LD_ADDR_VAR 0 1
12743: PUSH
12744: LD_VAR 0 2
12748: PUSH
12749: FOR_IN
12750: IFFALSE 12777
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12752: LD_VAR 0 1
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: LD_INT 4
12762: PPUSH
12763: CALL_OW 12
12767: PPUSH
12768: LD_INT 500
12770: PPUSH
12771: CALL_OW 492
12775: GO 12749
12777: POP
12778: POP
// end ; end_of_file
12779: PPOPN 2
12781: END
// every 0 0$1 trigger AIEnable do
12782: LD_EXP 37
12786: IFFALSE 12880
12788: GO 12790
12790: DISABLE
// begin enable ;
12791: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12792: LD_INT 3
12794: PPUSH
12795: LD_INT 21
12797: PPUSH
12798: LD_INT 7
12800: PPUSH
12801: CALL 6030 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12805: LD_INT 3
12807: PPUSH
12808: LD_INT 8
12810: PPUSH
12811: LD_INT 7
12813: PPUSH
12814: LD_INT 1
12816: PPUSH
12817: CALL 6334 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12821: LD_EXP 20
12825: PUSH
12826: LD_INT 2
12828: EQUAL
12829: PUSH
12830: LD_INT 22
12832: PUSH
12833: LD_INT 6
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PPUSH
12840: CALL_OW 69
12844: AND
12845: IFFALSE 12880
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12847: LD_INT 6
12849: PPUSH
12850: LD_EXP 21
12854: PPUSH
12855: LD_INT 6
12857: PPUSH
12858: CALL 6030 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12862: LD_INT 6
12864: PPUSH
12865: LD_INT 9
12867: PPUSH
12868: LD_INT 6
12870: PPUSH
12871: LD_EXP 22
12875: PPUSH
12876: CALL 6334 0 4
// end ; end ;
12880: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12881: LD_EXP 15
12885: PPUSH
12886: CALL_OW 310
12890: NOT
12891: PUSH
12892: LD_INT 21
12894: PPUSH
12895: CALL_OW 302
12899: AND
12900: PUSH
12901: LD_INT 21
12903: PPUSH
12904: CALL_OW 255
12908: PUSH
12909: LD_INT 3
12911: EQUAL
12912: AND
12913: IFFALSE 12930
12915: GO 12917
12917: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12918: LD_EXP 15
12922: PPUSH
12923: LD_INT 21
12925: PPUSH
12926: CALL_OW 120
12930: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12931: LD_INT 22
12933: PUSH
12934: LD_INT 3
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 21
12943: PUSH
12944: LD_INT 2
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 55
12953: PUSH
12954: EMPTY
12955: LIST
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: LIST
12961: PPUSH
12962: CALL_OW 69
12966: PUSH
12967: LD_INT 0
12969: EQUAL
12970: PUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 255
12978: PUSH
12979: LD_INT 3
12981: EQUAL
12982: AND
12983: PUSH
12984: LD_INT 21
12986: PPUSH
12987: CALL_OW 302
12991: AND
12992: PUSH
12993: LD_INT 21
12995: PPUSH
12996: CALL_OW 255
13000: PUSH
13001: LD_INT 3
13003: EQUAL
13004: AND
13005: PUSH
13006: LD_INT 21
13008: PPUSH
13009: CALL_OW 302
13013: AND
13014: IFFALSE 13226
13016: GO 13018
13018: DISABLE
// begin enable ;
13019: ENABLE
// if Difficulty = 1 then
13020: LD_OWVAR 67
13024: PUSH
13025: LD_INT 1
13027: EQUAL
13028: IFFALSE 13072
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
13030: LD_INT 3
13032: PPUSH
13033: LD_INT 24
13035: PPUSH
13036: LD_OWVAR 67
13040: PUSH
13041: LD_INT 2
13043: PLUS
13044: PPUSH
13045: LD_INT 42
13047: PUSH
13048: LD_INT 44
13050: PUSH
13051: LD_INT 43
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: PPUSH
13059: LD_INT 1
13061: PPUSH
13062: LD_INT 1
13064: PPUSH
13065: LD_INT 21
13067: PPUSH
13068: CALL 6848 0 7
// if Difficulty = 2 then
13072: LD_OWVAR 67
13076: PUSH
13077: LD_INT 2
13079: EQUAL
13080: IFFALSE 13147
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13082: LD_INT 3
13084: PPUSH
13085: LD_INT 24
13087: PPUSH
13088: LD_OWVAR 67
13092: PUSH
13093: LD_INT 2
13095: PLUS
13096: PPUSH
13097: LD_INT 44
13099: PUSH
13100: LD_INT 44
13102: PUSH
13103: LD_INT 43
13105: PUSH
13106: LD_INT 43
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: PPUSH
13115: LD_INT 1
13117: PPUSH
13118: LD_INT 1
13120: PPUSH
13121: LD_INT 21
13123: PUSH
13124: LD_INT 22
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 1
13133: PPUSH
13134: LD_INT 2
13136: PPUSH
13137: CALL_OW 12
13141: ARRAY
13142: PPUSH
13143: CALL 6848 0 7
// if Difficulty >= 3 then
13147: LD_OWVAR 67
13151: PUSH
13152: LD_INT 3
13154: GREATEREQUAL
13155: IFFALSE 13226
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13157: LD_INT 3
13159: PPUSH
13160: LD_INT 24
13162: PPUSH
13163: LD_OWVAR 67
13167: PUSH
13168: LD_INT 2
13170: PPUSH
13171: LD_INT 3
13173: PPUSH
13174: CALL_OW 12
13178: PLUS
13179: PPUSH
13180: LD_INT 44
13182: PUSH
13183: LD_INT 44
13185: PUSH
13186: LD_INT 43
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: PPUSH
13194: LD_INT 1
13196: PPUSH
13197: LD_INT 1
13199: PPUSH
13200: LD_INT 22
13202: PUSH
13203: LD_INT 23
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 1
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: CALL_OW 12
13220: ARRAY
13221: PPUSH
13222: CALL 6848 0 7
// end ;
13226: END
// every 0 0$1 do
13227: GO 13229
13229: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13230: LD_INT 3
13232: PPUSH
13233: LD_INT 1
13235: PPUSH
13236: LD_INT 3
13238: PPUSH
13239: CALL 5951 0 3
13243: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13244: LD_EXP 20
13248: PUSH
13249: LD_INT 1
13251: EQUAL
13252: IFFALSE 13399
13254: GO 13256
13256: DISABLE
13257: LD_INT 0
13259: PPUSH
13260: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13261: LD_ADDR_VAR 0 2
13265: PUSH
13266: LD_INT 22
13268: PUSH
13269: LD_INT 6
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 21
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 34
13288: PUSH
13289: LD_INT 51
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: LIST
13300: PPUSH
13301: CALL_OW 69
13305: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13306: LD_VAR 0 2
13310: PUSH
13311: LD_INT 1
13313: ARRAY
13314: PPUSH
13315: LD_EXP 21
13319: PPUSH
13320: CALL_OW 250
13324: PUSH
13325: LD_INT 5
13327: MINUS
13328: PPUSH
13329: LD_EXP 21
13333: PPUSH
13334: CALL_OW 251
13338: PUSH
13339: LD_INT 5
13341: MINUS
13342: PPUSH
13343: CALL_OW 111
// wait ( 0 0$5 ) ;
13347: LD_INT 175
13349: PPUSH
13350: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13354: LD_VAR 0 2
13358: PUSH
13359: LD_INT 1
13361: ARRAY
13362: PPUSH
13363: LD_INT 41
13365: PPUSH
13366: LD_INT 52
13368: PPUSH
13369: CALL_OW 177
// wait ( 0 0$40 ) ;
13373: LD_INT 1400
13375: PPUSH
13376: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13380: LD_VAR 0 2
13384: PUSH
13385: LD_INT 1
13387: ARRAY
13388: PPUSH
13389: LD_INT 41
13391: PPUSH
13392: LD_INT 44
13394: PPUSH
13395: CALL_OW 111
// end ;
13399: PPOPN 2
13401: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13402: LD_EXP 21
13406: PPUSH
13407: CALL_OW 274
13411: PPUSH
13412: LD_INT 1
13414: PPUSH
13415: CALL_OW 275
13419: PUSH
13420: LD_INT 100
13422: GREATEREQUAL
13423: IFFALSE 13651
13425: GO 13427
13427: DISABLE
13428: LD_INT 0
13430: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13431: LD_ADDR_VAR 0 1
13435: PUSH
13436: LD_INT 22
13438: PUSH
13439: LD_INT 6
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 21
13448: PUSH
13449: LD_INT 1
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 25
13458: PUSH
13459: LD_INT 2
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: LIST
13470: PPUSH
13471: CALL_OW 69
13475: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13476: LD_VAR 0 1
13480: PUSH
13481: LD_INT 1
13483: ARRAY
13484: PPUSH
13485: LD_INT 4
13487: PPUSH
13488: LD_INT 39
13490: PPUSH
13491: LD_INT 37
13493: PPUSH
13494: LD_INT 3
13496: PPUSH
13497: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13501: LD_VAR 0 1
13505: PUSH
13506: LD_INT 1
13508: ARRAY
13509: PPUSH
13510: LD_INT 29
13512: PPUSH
13513: LD_INT 42
13515: PPUSH
13516: LD_INT 54
13518: PPUSH
13519: LD_INT 3
13521: PPUSH
13522: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13526: LD_VAR 0 1
13530: PUSH
13531: LD_INT 1
13533: ARRAY
13534: PPUSH
13535: LD_INT 6
13537: PPUSH
13538: LD_INT 38
13540: PPUSH
13541: LD_INT 48
13543: PPUSH
13544: LD_INT 0
13546: PPUSH
13547: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13551: LD_VAR 0 1
13555: PUSH
13556: LD_INT 1
13558: ARRAY
13559: PPUSH
13560: LD_INT 2
13562: PPUSH
13563: LD_INT 32
13565: PPUSH
13566: LD_INT 38
13568: PPUSH
13569: LD_INT 2
13571: PPUSH
13572: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13576: LD_VAR 0 1
13580: PUSH
13581: LD_INT 1
13583: ARRAY
13584: PPUSH
13585: LD_INT 26
13587: PPUSH
13588: LD_INT 39
13590: PPUSH
13591: LD_INT 55
13593: PPUSH
13594: LD_INT 3
13596: PPUSH
13597: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13601: LD_VAR 0 1
13605: PUSH
13606: LD_INT 1
13608: ARRAY
13609: PPUSH
13610: LD_INT 32
13612: PPUSH
13613: LD_INT 31
13615: PPUSH
13616: LD_INT 31
13618: PPUSH
13619: LD_INT 3
13621: PPUSH
13622: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13626: LD_VAR 0 1
13630: PUSH
13631: LD_INT 1
13633: ARRAY
13634: PPUSH
13635: LD_INT 31
13637: PPUSH
13638: LD_INT 50
13640: PPUSH
13641: LD_INT 51
13643: PPUSH
13644: LD_INT 4
13646: PPUSH
13647: CALL_OW 205
// end ;
13651: PPOPN 1
13653: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13654: LD_EXP 46
13658: IFFALSE 14223
13660: GO 13662
13662: DISABLE
13663: LD_INT 0
13665: PPUSH
13666: PPUSH
13667: PPUSH
// begin enable ;
13668: ENABLE
// if not ruMobile then
13669: LD_EXP 46
13673: NOT
13674: IFFALSE 13678
// exit ;
13676: GO 14223
// for i in ruMobile do
13678: LD_ADDR_VAR 0 1
13682: PUSH
13683: LD_EXP 46
13687: PUSH
13688: FOR_IN
13689: IFFALSE 14221
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13691: LD_VAR 0 1
13695: PPUSH
13696: CALL_OW 302
13700: NOT
13701: PUSH
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 255
13711: PUSH
13712: LD_INT 3
13714: NONEQUAL
13715: OR
13716: IFFALSE 13736
// begin ruMobile := ruMobile diff i ;
13718: LD_ADDR_EXP 46
13722: PUSH
13723: LD_EXP 46
13727: PUSH
13728: LD_VAR 0 1
13732: DIFF
13733: ST_TO_ADDR
// continue ;
13734: GO 13688
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13736: LD_VAR 0 1
13740: PPUSH
13741: CALL_OW 110
13745: NOT
13746: PUSH
13747: LD_VAR 0 1
13751: PPUSH
13752: CALL_OW 110
13756: PUSH
13757: LD_INT 0
13759: EQUAL
13760: OR
13761: IFFALSE 13876
// begin if GetFuel ( i ) < 50 then
13763: LD_VAR 0 1
13767: PPUSH
13768: CALL_OW 261
13772: PUSH
13773: LD_INT 50
13775: LESS
13776: IFFALSE 13835
// begin ComMoveXY ( i , 106 , 88 ) ;
13778: LD_VAR 0 1
13782: PPUSH
13783: LD_INT 106
13785: PPUSH
13786: LD_INT 88
13788: PPUSH
13789: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13793: LD_INT 35
13795: PPUSH
13796: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13800: LD_VAR 0 1
13804: PPUSH
13805: LD_INT 106
13807: PPUSH
13808: LD_INT 88
13810: PPUSH
13811: CALL_OW 297
13815: PUSH
13816: LD_INT 4
13818: LESS
13819: IFFALSE 13793
// SetFuel ( i , 100 ) ;
13821: LD_VAR 0 1
13825: PPUSH
13826: LD_INT 100
13828: PPUSH
13829: CALL_OW 240
// end else
13833: GO 13876
// if not IsInArea ( i , ruParking ) then
13835: LD_VAR 0 1
13839: PPUSH
13840: LD_INT 25
13842: PPUSH
13843: CALL_OW 308
13847: NOT
13848: IFFALSE 13864
// ComMoveToArea ( i , ruParking ) else
13850: LD_VAR 0 1
13854: PPUSH
13855: LD_INT 25
13857: PPUSH
13858: CALL_OW 113
13862: GO 13876
// SetTag ( i , 1 ) ;
13864: LD_VAR 0 1
13868: PPUSH
13869: LD_INT 1
13871: PPUSH
13872: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13876: LD_VAR 0 1
13880: PPUSH
13881: CALL_OW 110
13885: PUSH
13886: LD_INT 1
13888: EQUAL
13889: IFFALSE 14019
// begin if GetLives ( i ) < 1000 then
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 256
13900: PUSH
13901: LD_INT 1000
13903: LESS
13904: IFFALSE 13996
// begin if not IsDrivenBy ( i ) then
13906: LD_VAR 0 1
13910: PPUSH
13911: CALL_OW 311
13915: NOT
13916: IFFALSE 13920
// continue ;
13918: GO 13688
// mech := IsDrivenBy ( i ) ;
13920: LD_ADDR_VAR 0 2
13924: PUSH
13925: LD_VAR 0 1
13929: PPUSH
13930: CALL_OW 311
13934: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13935: LD_VAR 0 2
13939: PPUSH
13940: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13944: LD_VAR 0 2
13948: PPUSH
13949: LD_VAR 0 1
13953: PPUSH
13954: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13958: LD_INT 35
13960: PPUSH
13961: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13965: LD_VAR 0 1
13969: PPUSH
13970: CALL_OW 256
13974: PUSH
13975: LD_INT 1000
13977: EQUAL
13978: IFFALSE 13958
// ComEnterUnit ( mech , i ) ;
13980: LD_VAR 0 2
13984: PPUSH
13985: LD_VAR 0 1
13989: PPUSH
13990: CALL_OW 120
// end else
13994: GO 14019
// if IsDrivenBy ( i ) then
13996: LD_VAR 0 1
14000: PPUSH
14001: CALL_OW 311
14005: IFFALSE 14019
// SetTag ( i , 2 ) ;
14007: LD_VAR 0 1
14011: PPUSH
14012: LD_INT 2
14014: PPUSH
14015: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
14019: LD_VAR 0 1
14023: PPUSH
14024: CALL_OW 110
14028: PUSH
14029: LD_INT 2
14031: EQUAL
14032: IFFALSE 14219
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14034: LD_ADDR_VAR 0 3
14038: PUSH
14039: LD_INT 24
14041: PPUSH
14042: LD_INT 81
14044: PUSH
14045: LD_INT 3
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PPUSH
14052: CALL_OW 70
14056: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14057: LD_VAR 0 1
14061: PPUSH
14062: CALL_OW 256
14066: PUSH
14067: LD_INT 650
14069: LESS
14070: IFFALSE 14095
// begin ComStop ( i ) ;
14072: LD_VAR 0 1
14076: PPUSH
14077: CALL_OW 141
// SetTag ( i , 0 ) ;
14081: LD_VAR 0 1
14085: PPUSH
14086: LD_INT 0
14088: PPUSH
14089: CALL_OW 109
// continue ;
14093: GO 13688
// end ; if enemy then
14095: LD_VAR 0 3
14099: IFFALSE 14139
// begin if not HasTask ( i ) then
14101: LD_VAR 0 1
14105: PPUSH
14106: CALL_OW 314
14110: NOT
14111: IFFALSE 14137
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14113: LD_VAR 0 1
14117: PPUSH
14118: LD_VAR 0 3
14122: PPUSH
14123: LD_VAR 0 1
14127: PPUSH
14128: CALL_OW 74
14132: PPUSH
14133: CALL_OW 115
// end else
14137: GO 14219
// if ruMobile > 2 then
14139: LD_EXP 46
14143: PUSH
14144: LD_INT 2
14146: GREATER
14147: IFFALSE 14219
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14149: LD_ADDR_VAR 0 3
14153: PUSH
14154: LD_INT 81
14156: PUSH
14157: LD_INT 3
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PPUSH
14164: CALL_OW 69
14168: ST_TO_ADDR
// if enemy then
14169: LD_VAR 0 3
14173: IFFALSE 14219
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
14175: LD_VAR 0 1
14179: PPUSH
14180: LD_INT 95
14182: PUSH
14183: LD_INT 74
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 67
14192: PUSH
14193: LD_INT 59
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PUSH
14200: LD_INT 55
14202: PUSH
14203: LD_INT 41
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: LIST
14214: PPUSH
14215: CALL 79648 0 2
// end ; end ; end ;
14219: GO 13688
14221: POP
14222: POP
// end ; end_of_file
14223: PPOPN 3
14225: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14226: LD_INT 0
14228: PPUSH
14229: PPUSH
14230: PPUSH
14231: PPUSH
14232: PPUSH
14233: PPUSH
14234: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14235: LD_ADDR_VAR 0 3
14239: PUSH
14240: LD_INT 22
14242: PUSH
14243: LD_INT 6
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 21
14252: PUSH
14253: LD_INT 1
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 1
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 54
14275: PUSH
14276: EMPTY
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: PPUSH
14289: CALL_OW 69
14293: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14294: LD_ADDR_VAR 0 7
14298: PUSH
14299: LD_INT 22
14301: PUSH
14302: LD_INT 6
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 21
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 25
14321: PUSH
14322: LD_INT 1
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 54
14331: PUSH
14332: EMPTY
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: PPUSH
14341: CALL_OW 69
14345: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14346: LD_ADDR_VAR 0 4
14350: PUSH
14351: LD_INT 22
14353: PUSH
14354: LD_INT 6
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 21
14363: PUSH
14364: LD_INT 1
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 25
14373: PUSH
14374: LD_INT 2
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: LIST
14385: PPUSH
14386: CALL_OW 69
14390: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14391: LD_ADDR_VAR 0 6
14395: PUSH
14396: LD_INT 22
14398: PUSH
14399: LD_INT 6
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 21
14408: PUSH
14409: LD_INT 1
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 25
14418: PUSH
14419: LD_INT 4
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: PPUSH
14431: CALL_OW 69
14435: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14436: LD_ADDR_VAR 0 8
14440: PUSH
14441: LD_INT 22
14443: PUSH
14444: LD_INT 6
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 21
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 34
14463: PUSH
14464: LD_INT 51
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: LIST
14475: PPUSH
14476: CALL_OW 69
14480: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14481: LD_VAR 0 1
14485: PPUSH
14486: CALL_OW 255
14490: PUSH
14491: LD_INT 6
14493: EQUAL
14494: PUSH
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 266
14504: PUSH
14505: LD_INT 0
14507: EQUAL
14508: AND
14509: IFFALSE 14529
// begin ruPDepot = building ;
14511: LD_ADDR_EXP 21
14515: PUSH
14516: LD_VAR 0 1
14520: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14521: LD_ADDR_EXP 20
14525: PUSH
14526: LD_INT 1
14528: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14529: LD_VAR 0 1
14533: PPUSH
14534: CALL_OW 266
14538: PUSH
14539: LD_INT 4
14541: EQUAL
14542: PUSH
14543: LD_VAR 0 1
14547: PPUSH
14548: CALL_OW 255
14552: PUSH
14553: LD_INT 6
14555: EQUAL
14556: AND
14557: IFFALSE 14590
// for i in tmpSold do
14559: LD_ADDR_VAR 0 2
14563: PUSH
14564: LD_VAR 0 3
14568: PUSH
14569: FOR_IN
14570: IFFALSE 14588
// ComEnterUnit ( i , building ) ;
14572: LD_VAR 0 2
14576: PPUSH
14577: LD_VAR 0 1
14581: PPUSH
14582: CALL_OW 120
14586: GO 14569
14588: POP
14589: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14590: LD_VAR 0 1
14594: PPUSH
14595: CALL_OW 266
14599: PUSH
14600: LD_INT 6
14602: EQUAL
14603: PUSH
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 6
14616: EQUAL
14617: AND
14618: IFFALSE 14676
// begin for i in tmpSci do
14620: LD_ADDR_VAR 0 2
14624: PUSH
14625: LD_VAR 0 6
14629: PUSH
14630: FOR_IN
14631: IFFALSE 14649
// ComEnterUnit ( i , building ) ;
14633: LD_VAR 0 2
14637: PPUSH
14638: LD_VAR 0 1
14642: PPUSH
14643: CALL_OW 120
14647: GO 14630
14649: POP
14650: POP
// ResAllTechs ( 6 , building , 3 ) ;
14651: LD_INT 6
14653: PPUSH
14654: LD_VAR 0 1
14658: PPUSH
14659: LD_INT 3
14661: PPUSH
14662: CALL 5951 0 3
// ruPLab = building ;
14666: LD_ADDR_EXP 22
14670: PUSH
14671: LD_VAR 0 1
14675: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14676: LD_VAR 0 1
14680: PPUSH
14681: CALL_OW 266
14685: PUSH
14686: LD_INT 2
14688: EQUAL
14689: PUSH
14690: LD_VAR 0 1
14694: PPUSH
14695: CALL_OW 255
14699: PUSH
14700: LD_INT 6
14702: EQUAL
14703: AND
14704: IFFALSE 14755
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14706: LD_ADDR_VAR 0 5
14710: PUSH
14711: LD_VAR 0 8
14715: PUSH
14716: LD_INT 1
14718: ARRAY
14719: PPUSH
14720: CALL_OW 313
14724: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14725: LD_VAR 0 5
14729: PPUSH
14730: CALL_OW 121
// wait ( 0 0$1 ) ;
14734: LD_INT 35
14736: PPUSH
14737: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14741: LD_VAR 0 5
14745: PPUSH
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14755: LD_VAR 0 1
14759: PPUSH
14760: CALL_OW 266
14764: PUSH
14765: LD_INT 32
14767: EQUAL
14768: PUSH
14769: LD_VAR 0 1
14773: PPUSH
14774: CALL_OW 255
14778: PUSH
14779: LD_INT 6
14781: EQUAL
14782: AND
14783: IFFALSE 14835
// begin ComPlaceWeapon ( building , 42 ) ;
14785: LD_VAR 0 1
14789: PPUSH
14790: LD_INT 42
14792: PPUSH
14793: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14797: LD_VAR 0 7
14801: PUSH
14802: LD_INT 1
14804: ARRAY
14805: PPUSH
14806: CALL_OW 122
// wait ( 0 0$1 ) ;
14810: LD_INT 35
14812: PPUSH
14813: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14817: LD_VAR 0 7
14821: PUSH
14822: LD_INT 1
14824: ARRAY
14825: PPUSH
14826: LD_VAR 0 1
14830: PPUSH
14831: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 266
14844: PUSH
14845: LD_INT 31
14847: EQUAL
14848: PUSH
14849: LD_VAR 0 1
14853: PPUSH
14854: CALL_OW 255
14858: PUSH
14859: LD_INT 6
14861: EQUAL
14862: AND
14863: IFFALSE 14929
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14865: LD_VAR 0 7
14869: PUSH
14870: LD_INT 2
14872: ARRAY
14873: PPUSH
14874: CALL_OW 122
// wait ( 0 0$1 ) ;
14878: LD_INT 35
14880: PPUSH
14881: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14885: LD_VAR 0 7
14889: PUSH
14890: LD_INT 2
14892: ARRAY
14893: PPUSH
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14903: LD_VAR 0 4
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: PPUSH
14912: LD_EXP 21
14916: PPUSH
14917: CALL_OW 120
// baseReadyToBuild = 2 ;
14921: LD_ADDR_EXP 20
14925: PUSH
14926: LD_INT 2
14928: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14929: LD_VAR 0 1
14933: PPUSH
14934: CALL_OW 266
14938: PUSH
14939: LD_INT 32
14941: EQUAL
14942: PUSH
14943: LD_VAR 0 1
14947: PPUSH
14948: CALL_OW 255
14952: PUSH
14953: LD_INT 1
14955: EQUAL
14956: AND
14957: PUSH
14958: LD_EXP 32
14962: PUSH
14963: LD_INT 0
14965: EQUAL
14966: AND
14967: IFFALSE 15212
// begin bunkerDialog = 1 ;
14969: LD_ADDR_EXP 32
14973: PUSH
14974: LD_INT 1
14976: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14977: LD_EXP 11
14981: PPUSH
14982: CALL_OW 302
14986: IFFALSE 15002
// Say ( Claptopn , D11-Eng1-1 ) else
14988: LD_EXP 11
14992: PPUSH
14993: LD_STRING D11-Eng1-1
14995: PPUSH
14996: CALL_OW 88
15000: GO 15198
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15002: LD_INT 22
15004: PUSH
15005: LD_INT 1
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 21
15014: PUSH
15015: LD_INT 1
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: LD_INT 25
15024: PUSH
15025: LD_INT 3
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 26
15034: PUSH
15035: LD_INT 1
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: PPUSH
15048: CALL_OW 69
15052: PUSH
15053: LD_EXP 1
15057: PUSH
15058: EMPTY
15059: LIST
15060: PUSH
15061: LD_INT 0
15063: GREATER
15064: DIFF
15065: IFFALSE 15139
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15067: LD_INT 22
15069: PUSH
15070: LD_INT 1
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: LD_INT 21
15079: PUSH
15080: LD_INT 1
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 25
15089: PUSH
15090: LD_INT 2
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 26
15099: PUSH
15100: LD_INT 1
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: PPUSH
15113: CALL_OW 69
15117: PUSH
15118: LD_EXP 1
15122: PUSH
15123: EMPTY
15124: LIST
15125: DIFF
15126: PPUSH
15127: LD_STRING D11-Eng1-1
15129: PPUSH
15130: LD_STRING D11-Eng1-1
15132: PPUSH
15133: CALL 4598 0 3
15137: GO 15198
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15139: LD_INT 22
15141: PUSH
15142: LD_INT 1
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 21
15151: PUSH
15152: LD_INT 1
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: LD_INT 26
15161: PUSH
15162: LD_INT 1
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: LIST
15173: PPUSH
15174: CALL_OW 69
15178: PUSH
15179: LD_EXP 1
15183: PUSH
15184: EMPTY
15185: LIST
15186: DIFF
15187: PPUSH
15188: LD_STRING D11-Eng1-1
15190: PPUSH
15191: LD_STRING D11-Eng1-1
15193: PPUSH
15194: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15198: LD_EXP 33
15202: PUSH
15203: LD_INT 0
15205: EQUAL
15206: IFFALSE 15212
// EnergyDialog ;
15208: CALL 5003 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15212: LD_VAR 0 1
15216: PPUSH
15217: CALL_OW 266
15221: PUSH
15222: LD_INT 29
15224: EQUAL
15225: PUSH
15226: LD_VAR 0 1
15230: PPUSH
15231: CALL_OW 255
15235: PUSH
15236: LD_INT 1
15238: EQUAL
15239: AND
15240: IFFALSE 15250
// buildOil = 1 ;
15242: LD_ADDR_EXP 34
15246: PUSH
15247: LD_INT 1
15249: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 266
15259: PUSH
15260: LD_INT 26
15262: EQUAL
15263: PUSH
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 255
15273: PUSH
15274: LD_INT 1
15276: EQUAL
15277: AND
15278: IFFALSE 15288
// buildPower = 1 ;
15280: LD_ADDR_EXP 35
15284: PUSH
15285: LD_INT 1
15287: ST_TO_ADDR
// end ;
15288: PPOPN 8
15290: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15291: LD_VAR 0 1
15295: PPUSH
15296: CALL_OW 266
15300: PUSH
15301: LD_INT 3
15303: EQUAL
15304: PUSH
15305: LD_VAR 0 1
15309: PPUSH
15310: CALL_OW 255
15314: PUSH
15315: LD_INT 1
15317: EQUAL
15318: AND
15319: PUSH
15320: LD_EXP 31
15324: PUSH
15325: LD_INT 0
15327: EQUAL
15328: AND
15329: IFFALSE 15677
// begin factoryDialog = 1 ;
15331: LD_ADDR_EXP 31
15335: PUSH
15336: LD_INT 1
15338: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15339: LD_INT 47
15341: PPUSH
15342: LD_INT 1
15344: PPUSH
15345: CALL_OW 321
15349: PUSH
15350: LD_INT 1
15352: EQUAL
15353: PUSH
15354: LD_INT 45
15356: PPUSH
15357: LD_INT 1
15359: PPUSH
15360: CALL_OW 321
15364: PUSH
15365: LD_INT 1
15367: EQUAL
15368: AND
15369: IFFALSE 15677
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15371: LD_INT 22
15373: PUSH
15374: LD_INT 1
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 21
15383: PUSH
15384: LD_INT 3
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 30
15393: PUSH
15394: LD_INT 3
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 24
15403: PUSH
15404: LD_INT 1000
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: PPUSH
15417: CALL_OW 69
15421: PUSH
15422: LD_INT 1
15424: ARRAY
15425: PPUSH
15426: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15430: LD_EXP 1
15434: PPUSH
15435: LD_STRING D9a-JMM-1
15437: PPUSH
15438: CALL_OW 88
// if IsOK ( Campell ) then
15442: LD_EXP 12
15446: PPUSH
15447: CALL_OW 302
15451: IFFALSE 15467
// Say ( Campell , D9a-Mech1-1 ) else
15453: LD_EXP 12
15457: PPUSH
15458: LD_STRING D9a-Mech1-1
15460: PPUSH
15461: CALL_OW 88
15465: GO 15663
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15467: LD_INT 22
15469: PUSH
15470: LD_INT 1
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 21
15479: PUSH
15480: LD_INT 1
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 25
15489: PUSH
15490: LD_INT 3
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 26
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: PPUSH
15513: CALL_OW 69
15517: PUSH
15518: LD_EXP 1
15522: PUSH
15523: EMPTY
15524: LIST
15525: PUSH
15526: LD_INT 0
15528: GREATER
15529: DIFF
15530: IFFALSE 15604
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15532: LD_INT 22
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 21
15544: PUSH
15545: LD_INT 1
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 25
15554: PUSH
15555: LD_INT 3
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 26
15564: PUSH
15565: LD_INT 1
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 69
15582: PUSH
15583: LD_EXP 1
15587: PUSH
15588: EMPTY
15589: LIST
15590: DIFF
15591: PPUSH
15592: LD_STRING D9a-Mech1-1
15594: PPUSH
15595: LD_STRING D9a-Mech1-1
15597: PPUSH
15598: CALL 4598 0 3
15602: GO 15663
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15604: LD_INT 22
15606: PUSH
15607: LD_INT 1
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 21
15616: PUSH
15617: LD_INT 1
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: LD_INT 26
15626: PUSH
15627: LD_INT 1
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: LIST
15638: PPUSH
15639: CALL_OW 69
15643: PUSH
15644: LD_EXP 1
15648: PUSH
15649: EMPTY
15650: LIST
15651: DIFF
15652: PPUSH
15653: LD_STRING D9a-Mech1-1
15655: PPUSH
15656: LD_STRING D9a-Mech1-1
15658: PPUSH
15659: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15663: LD_EXP 33
15667: PUSH
15668: LD_INT 0
15670: EQUAL
15671: IFFALSE 15677
// EnergyDialog ;
15673: CALL 5003 0 0
// end ; end ; end ;
15677: PPOPN 1
15679: END
// on UnitDestroyed ( unit ) do var mech ;
15680: LD_INT 0
15682: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15683: LD_VAR 0 1
15687: PPUSH
15688: CALL 35379 0 1
// if unit = JMM then
15692: LD_VAR 0 1
15696: PUSH
15697: LD_EXP 1
15701: EQUAL
15702: IFFALSE 15711
// YouLost ( JMM ) ;
15704: LD_STRING JMM
15706: PPUSH
15707: CALL_OW 104
// if unit = ambdept0 then
15711: LD_VAR 0 1
15715: PUSH
15716: LD_INT 4
15718: EQUAL
15719: IFFALSE 15728
// YouLost ( Base ) ;
15721: LD_STRING Base
15723: PPUSH
15724: CALL_OW 104
// if unit in ruMobile then
15728: LD_VAR 0 1
15732: PUSH
15733: LD_EXP 46
15737: IN
15738: IFFALSE 15756
// ruMobile = ruMobile diff ruMobile ;
15740: LD_ADDR_EXP 46
15744: PUSH
15745: LD_EXP 46
15749: PUSH
15750: LD_EXP 46
15754: DIFF
15755: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15756: LD_VAR 0 1
15760: PPUSH
15761: CALL_OW 247
15765: PUSH
15766: LD_INT 1
15768: EQUAL
15769: PUSH
15770: LD_VAR 0 1
15774: PPUSH
15775: CALL_OW 255
15779: PUSH
15780: LD_INT 1
15782: EQUAL
15783: AND
15784: IFFALSE 15800
// lostCounter = lostCounter + 1 ;
15786: LD_ADDR_EXP 38
15790: PUSH
15791: LD_EXP 38
15795: PUSH
15796: LD_INT 1
15798: PLUS
15799: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15800: LD_EXP 43
15804: PUSH
15805: LD_INT 24
15807: PPUSH
15808: CALL_OW 313
15812: PUSH
15813: LD_INT 6
15815: LESS
15816: AND
15817: PUSH
15818: LD_VAR 0 1
15822: PPUSH
15823: CALL_OW 257
15827: PUSH
15828: LD_INT 3
15830: EQUAL
15831: AND
15832: PUSH
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 255
15842: PUSH
15843: LD_INT 3
15845: EQUAL
15846: AND
15847: PUSH
15848: LD_INT 24
15850: PPUSH
15851: CALL_OW 302
15855: AND
15856: PUSH
15857: LD_INT 24
15859: PPUSH
15860: CALL_OW 255
15864: PUSH
15865: LD_INT 3
15867: EQUAL
15868: AND
15869: IFFALSE 15998
// begin ruMech := ruMech - 1 ;
15871: LD_ADDR_EXP 43
15875: PUSH
15876: LD_EXP 43
15880: PUSH
15881: LD_INT 1
15883: MINUS
15884: ST_TO_ADDR
// if ruMech = 0 then
15885: LD_EXP 43
15889: PUSH
15890: LD_INT 0
15892: EQUAL
15893: IFFALSE 15897
// exit ;
15895: GO 15998
// wait ( 0 0$40 ) ;
15897: LD_INT 1400
15899: PPUSH
15900: CALL_OW 67
// uc_side = 3 ;
15904: LD_ADDR_OWVAR 20
15908: PUSH
15909: LD_INT 3
15911: ST_TO_ADDR
// uc_nation = 3 ;
15912: LD_ADDR_OWVAR 21
15916: PUSH
15917: LD_INT 3
15919: ST_TO_ADDR
// hc_gallery :=  ;
15920: LD_ADDR_OWVAR 33
15924: PUSH
15925: LD_STRING 
15927: ST_TO_ADDR
// hc_name :=  ;
15928: LD_ADDR_OWVAR 26
15932: PUSH
15933: LD_STRING 
15935: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15936: LD_INT 0
15938: PPUSH
15939: LD_EXP 16
15943: PPUSH
15944: LD_EXP 17
15948: PPUSH
15949: CALL_OW 12
15953: PPUSH
15954: CALL_OW 383
// mech := CreateHuman ;
15958: LD_ADDR_VAR 0 2
15962: PUSH
15963: CALL_OW 44
15967: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15968: LD_VAR 0 2
15972: PPUSH
15973: LD_INT 124
15975: PPUSH
15976: LD_INT 97
15978: PPUSH
15979: LD_INT 0
15981: PPUSH
15982: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
15986: LD_VAR 0 2
15990: PPUSH
15991: LD_INT 24
15993: PPUSH
15994: CALL_OW 120
// end ; end ;
15998: PPOPN 2
16000: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
16001: LD_INT 0
16003: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
16004: LD_VAR 0 1
16008: PPUSH
16009: LD_VAR 0 2
16013: PPUSH
16014: CALL 35499 0 2
// if GetSide ( vehicle ) = 1 then
16018: LD_VAR 0 1
16022: PPUSH
16023: CALL_OW 255
16027: PUSH
16028: LD_INT 1
16030: EQUAL
16031: IFFALSE 16047
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
16033: LD_ADDR_EXP 42
16037: PUSH
16038: LD_EXP 42
16042: PUSH
16043: LD_INT 1
16045: PLUS
16046: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 255
16056: PUSH
16057: LD_INT 3
16059: EQUAL
16060: PUSH
16061: LD_VAR 0 1
16065: PPUSH
16066: CALL_OW 264
16070: PUSH
16071: LD_INT 42
16073: PUSH
16074: LD_INT 43
16076: PUSH
16077: LD_INT 44
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: LIST
16084: IN
16085: AND
16086: IFFALSE 16104
// ruMobile := ruMobile union vehicle ;
16088: LD_ADDR_EXP 46
16092: PUSH
16093: LD_EXP 46
16097: PUSH
16098: LD_VAR 0 1
16102: UNION
16103: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16104: LD_VAR 0 1
16108: PPUSH
16109: CALL_OW 264
16113: PUSH
16114: LD_INT 53
16116: EQUAL
16117: IFFALSE 16253
// begin uc_side = 3 ;
16119: LD_ADDR_OWVAR 20
16123: PUSH
16124: LD_INT 3
16126: ST_TO_ADDR
// uc_nation = 3 ;
16127: LD_ADDR_OWVAR 21
16131: PUSH
16132: LD_INT 3
16134: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16135: LD_INT 0
16137: PPUSH
16138: LD_EXP 17
16142: PPUSH
16143: CALL_OW 383
// driver := CreateHuman ;
16147: LD_ADDR_VAR 0 3
16151: PUSH
16152: CALL_OW 44
16156: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16157: LD_VAR 0 3
16161: PPUSH
16162: LD_VAR 0 2
16166: PPUSH
16167: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16171: LD_VAR 0 1
16175: PPUSH
16176: LD_INT 21
16178: PPUSH
16179: CALL 5219 0 2
// repeat wait ( 0 0$1 ) ;
16183: LD_INT 35
16185: PPUSH
16186: CALL_OW 67
// until not HasTask ( vehicle ) ;
16190: LD_VAR 0 1
16194: PPUSH
16195: CALL_OW 314
16199: NOT
16200: IFFALSE 16183
// driver := IsDrivenBy ( vehicle ) ;
16202: LD_ADDR_VAR 0 3
16206: PUSH
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL_OW 311
16216: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16217: LD_VAR 0 3
16221: PPUSH
16222: LD_INT 104
16224: PPUSH
16225: LD_INT 73
16227: PPUSH
16228: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16232: LD_VAR 0 3
16236: PPUSH
16237: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16241: LD_VAR 0 3
16245: PPUSH
16246: LD_INT 24
16248: PPUSH
16249: CALL_OW 180
// end ; end ;
16253: PPOPN 3
16255: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 255
16265: PUSH
16266: LD_INT 3
16268: EQUAL
16269: PUSH
16270: LD_VAR 0 1
16274: PPUSH
16275: CALL_OW 247
16279: PUSH
16280: LD_INT 2
16282: EQUAL
16283: AND
16284: PUSH
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 264
16294: PUSH
16295: LD_INT 42
16297: PUSH
16298: LD_INT 43
16300: PUSH
16301: LD_INT 44
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: LIST
16308: IN
16309: AND
16310: IFFALSE 16359
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16312: LD_INT 24
16314: PPUSH
16315: LD_VAR 0 1
16319: PPUSH
16320: CALL_OW 265
16324: PPUSH
16325: LD_VAR 0 1
16329: PPUSH
16330: CALL_OW 262
16334: PPUSH
16335: LD_VAR 0 1
16339: PPUSH
16340: CALL_OW 263
16344: PPUSH
16345: LD_VAR 0 1
16349: PPUSH
16350: CALL_OW 264
16354: PPUSH
16355: CALL_OW 185
// end ;
16359: PPOPN 1
16361: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16362: LD_VAR 0 1
16366: PPUSH
16367: CALL_OW 255
16371: PUSH
16372: LD_INT 3
16374: EQUAL
16375: PUSH
16376: LD_VAR 0 2
16380: PPUSH
16381: CALL_OW 255
16385: PUSH
16386: LD_INT 3
16388: EQUAL
16389: AND
16390: PUSH
16391: LD_INT 24
16393: PPUSH
16394: CALL_OW 302
16398: AND
16399: PUSH
16400: LD_VAR 0 1
16404: PPUSH
16405: CALL_OW 302
16409: NOT
16410: AND
16411: IFFALSE 16425
// ComEnterUnit ( human , rubfact0 ) ;
16413: LD_VAR 0 2
16417: PPUSH
16418: LD_INT 24
16420: PPUSH
16421: CALL_OW 120
// end ;
16425: PPOPN 2
16427: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16428: LD_VAR 0 1
16432: PUSH
16433: LD_INT 24
16435: EQUAL
16436: PUSH
16437: LD_VAR 0 2
16441: PPUSH
16442: CALL_OW 256
16446: PUSH
16447: LD_INT 1000
16449: LESS
16450: AND
16451: IFFALSE 16465
// SetLives ( un , 1000 ) ;
16453: LD_VAR 0 2
16457: PPUSH
16458: LD_INT 1000
16460: PPUSH
16461: CALL_OW 234
// end ;
16465: PPOPN 2
16467: END
// on Command ( comandid ) do var i , j , tmp ;
16468: LD_INT 0
16470: PPUSH
16471: PPUSH
16472: PPUSH
// begin SOS_Command ( comandid ) ;
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL 35483 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16482: LD_INT 22
16484: PUSH
16485: LD_INT 4
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PPUSH
16492: CALL_OW 69
16496: NOT
16497: IFFALSE 16501
// exit ;
16499: GO 16666
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16501: LD_ADDR_VAR 0 2
16505: PUSH
16506: LD_INT 22
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 2
16518: PUSH
16519: LD_INT 21
16521: PUSH
16522: LD_INT 1
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 21
16531: PUSH
16532: LD_INT 2
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PPUSH
16548: CALL_OW 69
16552: PUSH
16553: FOR_IN
16554: IFFALSE 16664
// begin if GetTaskList ( i ) > 0 then
16556: LD_VAR 0 2
16560: PPUSH
16561: CALL_OW 437
16565: PUSH
16566: LD_INT 0
16568: GREATER
16569: IFFALSE 16662
// begin for j = 1 to GetTaskList ( i ) do
16571: LD_ADDR_VAR 0 3
16575: PUSH
16576: DOUBLE
16577: LD_INT 1
16579: DEC
16580: ST_TO_ADDR
16581: LD_VAR 0 2
16585: PPUSH
16586: CALL_OW 437
16590: PUSH
16591: FOR_TO
16592: IFFALSE 16660
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16594: LD_ADDR_VAR 0 4
16598: PUSH
16599: LD_VAR 0 2
16603: PPUSH
16604: CALL_OW 437
16608: PUSH
16609: LD_VAR 0 3
16613: ARRAY
16614: PUSH
16615: LD_INT 4
16617: ARRAY
16618: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16619: LD_VAR 0 4
16623: PPUSH
16624: CALL_OW 255
16628: PUSH
16629: LD_INT 4
16631: EQUAL
16632: PUSH
16633: LD_VAR 0 4
16637: PPUSH
16638: CALL_OW 255
16642: PUSH
16643: LD_INT 0
16645: EQUAL
16646: OR
16647: IFFALSE 16658
// ComStop ( i ) ;
16649: LD_VAR 0 2
16653: PPUSH
16654: CALL_OW 141
// end ;
16658: GO 16591
16660: POP
16661: POP
// end ; end ;
16662: GO 16553
16664: POP
16665: POP
// end ; end_of_file
16666: PPOPN 4
16668: END
// every 10 10$0 do
16669: GO 16671
16671: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16672: LD_INT 5
16674: PPUSH
16675: LD_INT 3
16677: PPUSH
16678: LD_INT 2
16680: PUSH
16681: LD_INT 2
16683: PUSH
16684: LD_INT 3
16686: PUSH
16687: LD_INT 4
16689: PUSH
16690: LD_INT 4
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: PUSH
16699: LD_OWVAR 67
16703: ARRAY
16704: PLUS
16705: PPUSH
16706: LD_INT 0
16708: PPUSH
16709: LD_EXP 16
16713: PPUSH
16714: LD_EXP 17
16718: PPUSH
16719: CALL_OW 12
16723: PPUSH
16724: LD_INT 4
16726: PPUSH
16727: LD_INT 14
16729: PPUSH
16730: LD_INT 1
16732: PPUSH
16733: LD_INT 2
16735: PPUSH
16736: CALL 6960 0 9
16740: END
// every 20 20$0 do
16741: GO 16743
16743: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16744: LD_INT 5
16746: PPUSH
16747: LD_INT 3
16749: PPUSH
16750: LD_INT 4
16752: PUSH
16753: LD_INT 2
16755: PUSH
16756: LD_INT 3
16758: PUSH
16759: LD_INT 4
16761: PUSH
16762: LD_INT 5
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: PUSH
16771: LD_OWVAR 67
16775: ARRAY
16776: PLUS
16777: PPUSH
16778: LD_INT 2
16780: PPUSH
16781: LD_EXP 16
16785: PPUSH
16786: LD_EXP 17
16790: PPUSH
16791: CALL_OW 12
16795: PPUSH
16796: LD_INT 4
16798: PPUSH
16799: LD_INT 14
16801: PPUSH
16802: LD_INT 1
16804: PPUSH
16805: LD_INT 1
16807: PPUSH
16808: CALL 6960 0 9
16812: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16813: GO 16815
16815: DISABLE
16816: LD_INT 0
16818: PPUSH
16819: PPUSH
16820: PPUSH
16821: PPUSH
16822: PPUSH
// begin hex := [ 123 , 95 ] ;
16823: LD_ADDR_VAR 0 4
16827: PUSH
16828: LD_INT 123
16830: PUSH
16831: LD_INT 95
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: ST_TO_ADDR
// tmp := [ ] ;
16838: LD_ADDR_VAR 0 5
16842: PUSH
16843: EMPTY
16844: ST_TO_ADDR
// if Difficulty > 1 then
16845: LD_OWVAR 67
16849: PUSH
16850: LD_INT 1
16852: GREATER
16853: IFFALSE 16863
// specAttack := true ;
16855: LD_ADDR_EXP 47
16859: PUSH
16860: LD_INT 1
16862: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16863: LD_ADDR_VAR 0 1
16867: PUSH
16868: DOUBLE
16869: LD_INT 1
16871: DEC
16872: ST_TO_ADDR
16873: LD_INT 4
16875: PUSH
16876: LD_INT 5
16878: PUSH
16879: LD_INT 6
16881: PUSH
16882: LD_INT 7
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: PUSH
16891: LD_OWVAR 67
16895: ARRAY
16896: PUSH
16897: FOR_TO
16898: IFFALSE 17200
// begin uc_side := 5 ;
16900: LD_ADDR_OWVAR 20
16904: PUSH
16905: LD_INT 5
16907: ST_TO_ADDR
// uc_nation := 3 ;
16908: LD_ADDR_OWVAR 21
16912: PUSH
16913: LD_INT 3
16915: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16916: LD_ADDR_OWVAR 37
16920: PUSH
16921: LD_INT 21
16923: PUSH
16924: LD_INT 22
16926: PUSH
16927: LD_INT 23
16929: PUSH
16930: LD_INT 24
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: PUSH
16939: LD_VAR 0 1
16943: PUSH
16944: LD_OWVAR 67
16948: MOD
16949: PUSH
16950: LD_INT 1
16952: PLUS
16953: ARRAY
16954: ST_TO_ADDR
// vc_engine := engine_combustion ;
16955: LD_ADDR_OWVAR 39
16959: PUSH
16960: LD_INT 1
16962: ST_TO_ADDR
// vc_control := control_manual ;
16963: LD_ADDR_OWVAR 38
16967: PUSH
16968: LD_INT 1
16970: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16971: LD_ADDR_OWVAR 40
16975: PUSH
16976: LD_INT 42
16978: PUSH
16979: LD_INT 43
16981: PUSH
16982: LD_INT 44
16984: PUSH
16985: LD_INT 44
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: PUSH
16994: LD_VAR 0 1
16998: PUSH
16999: LD_OWVAR 67
17003: MOD
17004: PUSH
17005: LD_INT 1
17007: PLUS
17008: ARRAY
17009: ST_TO_ADDR
// veh := CreateVehicle ;
17010: LD_ADDR_VAR 0 3
17014: PUSH
17015: CALL_OW 45
17019: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17020: LD_VAR 0 3
17024: PPUSH
17025: LD_INT 5
17027: PPUSH
17028: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
17032: LD_INT 35
17034: PPUSH
17035: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17039: LD_VAR 0 4
17043: PUSH
17044: LD_INT 1
17046: ARRAY
17047: PPUSH
17048: LD_VAR 0 4
17052: PUSH
17053: LD_INT 2
17055: ARRAY
17056: PPUSH
17057: CALL_OW 428
17061: PUSH
17062: LD_INT 0
17064: EQUAL
17065: IFFALSE 17032
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17067: LD_VAR 0 3
17071: PPUSH
17072: LD_VAR 0 4
17076: PUSH
17077: LD_INT 1
17079: ARRAY
17080: PPUSH
17081: LD_VAR 0 4
17085: PUSH
17086: LD_INT 2
17088: ARRAY
17089: PPUSH
17090: LD_INT 0
17092: PPUSH
17093: CALL_OW 48
// uc_side := 5 ;
17097: LD_ADDR_OWVAR 20
17101: PUSH
17102: LD_INT 5
17104: ST_TO_ADDR
// uc_nation := 3 ;
17105: LD_ADDR_OWVAR 21
17109: PUSH
17110: LD_INT 3
17112: ST_TO_ADDR
// InitHC_All ( ) ;
17113: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
17117: LD_INT 0
17119: PPUSH
17120: LD_INT 2
17122: PUSH
17123: LD_OWVAR 67
17127: PLUS
17128: PPUSH
17129: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17133: CALL_OW 44
17137: PPUSH
17138: LD_VAR 0 3
17142: PPUSH
17143: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17147: LD_VAR 0 3
17151: PPUSH
17152: LD_INT 101
17154: PPUSH
17155: LD_INT 77
17157: PPUSH
17158: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17162: LD_ADDR_VAR 0 5
17166: PUSH
17167: LD_VAR 0 5
17171: PPUSH
17172: LD_VAR 0 5
17176: PUSH
17177: LD_INT 1
17179: PLUS
17180: PPUSH
17181: LD_VAR 0 3
17185: PPUSH
17186: CALL_OW 1
17190: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17191: LD_INT 105
17193: PPUSH
17194: CALL_OW 67
// end ;
17198: GO 16897
17200: POP
17201: POP
// repeat wait ( 0 0$1 ) ;
17202: LD_INT 35
17204: PPUSH
17205: CALL_OW 67
// for i in tmp do
17209: LD_ADDR_VAR 0 1
17213: PUSH
17214: LD_VAR 0 5
17218: PUSH
17219: FOR_IN
17220: IFFALSE 17288
// if not IsOk ( i ) then
17222: LD_VAR 0 1
17226: PPUSH
17227: CALL_OW 302
17231: NOT
17232: IFFALSE 17252
// tmp := tmp diff i else
17234: LD_ADDR_VAR 0 5
17238: PUSH
17239: LD_VAR 0 5
17243: PUSH
17244: LD_VAR 0 1
17248: DIFF
17249: ST_TO_ADDR
17250: GO 17286
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17252: LD_VAR 0 1
17256: PPUSH
17257: LD_INT 22
17259: PUSH
17260: LD_INT 1
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PPUSH
17267: CALL_OW 69
17271: PPUSH
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 74
17281: PPUSH
17282: CALL_OW 115
17286: GO 17219
17288: POP
17289: POP
// until not tmp ;
17290: LD_VAR 0 5
17294: NOT
17295: IFFALSE 17202
// end ;
17297: PPOPN 5
17299: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17300: LD_EXP 47
17304: IFFALSE 17679
17306: GO 17308
17308: DISABLE
17309: LD_INT 0
17311: PPUSH
17312: PPUSH
17313: PPUSH
17314: PPUSH
// begin wait ( 0 0$20 ) ;
17315: LD_INT 700
17317: PPUSH
17318: CALL_OW 67
// uc_side := 5 ;
17322: LD_ADDR_OWVAR 20
17326: PUSH
17327: LD_INT 5
17329: ST_TO_ADDR
// uc_nation := 3 ;
17330: LD_ADDR_OWVAR 21
17334: PUSH
17335: LD_INT 3
17337: ST_TO_ADDR
// InitHc ;
17338: CALL_OW 19
// hc_importance := 0 ;
17342: LD_ADDR_OWVAR 32
17346: PUSH
17347: LD_INT 0
17349: ST_TO_ADDR
// tmp := [ ] ;
17350: LD_ADDR_VAR 0 2
17354: PUSH
17355: EMPTY
17356: ST_TO_ADDR
// InitHC_All ( ) ;
17357: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17361: LD_INT 0
17363: PPUSH
17364: LD_INT 2
17366: PPUSH
17367: LD_INT 6
17369: PPUSH
17370: CALL_OW 380
// eng := CreateHuman ;
17374: LD_ADDR_VAR 0 4
17378: PUSH
17379: CALL_OW 44
17383: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17384: LD_VAR 0 4
17388: PPUSH
17389: LD_INT 78
17391: PPUSH
17392: LD_INT 2
17394: PPUSH
17395: LD_INT 4
17397: PPUSH
17398: LD_INT 0
17400: PPUSH
17401: CALL_OW 50
// for i = 1 to 2 + Difficulty do
17405: LD_ADDR_VAR 0 3
17409: PUSH
17410: DOUBLE
17411: LD_INT 1
17413: DEC
17414: ST_TO_ADDR
17415: LD_INT 2
17417: PUSH
17418: LD_OWVAR 67
17422: PLUS
17423: PUSH
17424: FOR_TO
17425: IFFALSE 17514
// begin InitHC_All ( ) ;
17427: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17431: LD_INT 0
17433: PPUSH
17434: LD_INT 1
17436: PPUSH
17437: LD_INT 4
17439: PUSH
17440: LD_INT 5
17442: PUSH
17443: LD_INT 6
17445: PUSH
17446: LD_INT 6
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: PUSH
17455: LD_OWVAR 67
17459: ARRAY
17460: PPUSH
17461: CALL_OW 380
// un := CreateHuman ;
17465: LD_ADDR_VAR 0 1
17469: PUSH
17470: CALL_OW 44
17474: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17475: LD_VAR 0 1
17479: PPUSH
17480: LD_INT 78
17482: PPUSH
17483: LD_INT 2
17485: PPUSH
17486: LD_INT 4
17488: PPUSH
17489: LD_INT 0
17491: PPUSH
17492: CALL_OW 50
// tmp := tmp ^ un ;
17496: LD_ADDR_VAR 0 2
17500: PUSH
17501: LD_VAR 0 2
17505: PUSH
17506: LD_VAR 0 1
17510: ADD
17511: ST_TO_ADDR
// end ;
17512: GO 17424
17514: POP
17515: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17516: LD_VAR 0 2
17520: PPUSH
17521: LD_INT 49
17523: PPUSH
17524: LD_INT 3
17526: PPUSH
17527: CALL_OW 111
// wait ( 0 0$2 ) ;
17531: LD_INT 70
17533: PPUSH
17534: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17538: LD_VAR 0 4
17542: PPUSH
17543: LD_INT 49
17545: PPUSH
17546: LD_INT 3
17548: PPUSH
17549: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17553: LD_VAR 0 4
17557: PPUSH
17558: LD_INT 4
17560: PPUSH
17561: CALL_OW 227
// wait ( 0 0$10 ) ;
17565: LD_INT 350
17567: PPUSH
17568: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17572: LD_INT 35
17574: PPUSH
17575: CALL_OW 67
// for i in tmp do
17579: LD_ADDR_VAR 0 3
17583: PUSH
17584: LD_VAR 0 2
17588: PUSH
17589: FOR_IN
17590: IFFALSE 17670
// if not IsOk ( i ) then
17592: LD_VAR 0 3
17596: PPUSH
17597: CALL_OW 302
17601: NOT
17602: IFFALSE 17622
// tmp := tmp diff i else
17604: LD_ADDR_VAR 0 2
17608: PUSH
17609: LD_VAR 0 2
17613: PUSH
17614: LD_VAR 0 3
17618: DIFF
17619: ST_TO_ADDR
17620: GO 17668
// if not HasTask ( i ) then
17622: LD_VAR 0 3
17626: PPUSH
17627: CALL_OW 314
17631: NOT
17632: IFFALSE 17668
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17634: LD_VAR 0 3
17638: PPUSH
17639: LD_INT 22
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PPUSH
17649: CALL_OW 69
17653: PPUSH
17654: LD_VAR 0 3
17658: PPUSH
17659: CALL_OW 74
17663: PPUSH
17664: CALL_OW 115
17668: GO 17589
17670: POP
17671: POP
// until not tmp ;
17672: LD_VAR 0 2
17676: NOT
17677: IFFALSE 17572
// end ; end_of_file
17679: PPOPN 4
17681: END
// every 0 0$1 trigger startTimer = 1 do
17682: LD_EXP 30
17686: PUSH
17687: LD_INT 1
17689: EQUAL
17690: IFFALSE 17820
17692: GO 17694
17694: DISABLE
// begin enable ;
17695: ENABLE
// if timerStatus = 1 then
17696: LD_EXP 29
17700: PUSH
17701: LD_INT 1
17703: EQUAL
17704: IFFALSE 17737
// begin timeToSupport = timeToSupport - 0 0$01 ;
17706: LD_ADDR_EXP 28
17710: PUSH
17711: LD_EXP 28
17715: PUSH
17716: LD_INT 35
17718: MINUS
17719: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17720: LD_ADDR_OWVAR 47
17724: PUSH
17725: LD_STRING #Am04-1
17727: PUSH
17728: LD_EXP 28
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: ST_TO_ADDR
// end ; if timerStatus = 2 then
17737: LD_EXP 29
17741: PUSH
17742: LD_INT 2
17744: EQUAL
17745: IFFALSE 17778
// begin timeToSupport = timeToSupport - 0 0$01 ;
17747: LD_ADDR_EXP 28
17751: PUSH
17752: LD_EXP 28
17756: PUSH
17757: LD_INT 35
17759: MINUS
17760: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17761: LD_ADDR_OWVAR 47
17765: PUSH
17766: LD_STRING #Am04-2
17768: PUSH
17769: LD_EXP 28
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: ST_TO_ADDR
// end ; if timerStatus = 3 then
17778: LD_EXP 29
17782: PUSH
17783: LD_INT 3
17785: EQUAL
17786: IFFALSE 17802
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17788: LD_ADDR_EXP 27
17792: PUSH
17793: LD_EXP 27
17797: PUSH
17798: LD_INT 35
17800: MINUS
17801: ST_TO_ADDR
// if timerStatus = 4 then
17802: LD_EXP 29
17806: PUSH
17807: LD_INT 4
17809: EQUAL
17810: IFFALSE 17820
// display_strings =  ;
17812: LD_ADDR_OWVAR 47
17816: PUSH
17817: LD_STRING 
17819: ST_TO_ADDR
// end ; end_of_file
17820: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17821: LD_EXP 15
17825: PPUSH
17826: CALL_OW 301
17830: PUSH
17831: LD_INT 22
17833: PUSH
17834: LD_INT 3
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 21
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PPUSH
17855: CALL_OW 69
17859: PUSH
17860: LD_INT 14
17862: PUSH
17863: LD_INT 13
17865: PUSH
17866: LD_INT 12
17868: PUSH
17869: LD_INT 11
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: PUSH
17878: LD_OWVAR 67
17882: ARRAY
17883: LESS
17884: AND
17885: IFFALSE 18471
17887: GO 17889
17889: DISABLE
17890: LD_INT 0
17892: PPUSH
17893: PPUSH
17894: PPUSH
// begin AIEnable = 0 ;
17895: LD_ADDR_EXP 37
17899: PUSH
17900: LD_INT 0
17902: ST_TO_ADDR
// escapeAvalaible = 1 ;
17903: LD_ADDR_EXP 40
17907: PUSH
17908: LD_INT 1
17910: ST_TO_ADDR
// Video ( true ) ;
17911: LD_INT 1
17913: PPUSH
17914: CALL 77016 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17918: LD_INT 3
17920: PPUSH
17921: LD_INT 1
17923: PPUSH
17924: LD_INT 1
17926: PPUSH
17927: LD_INT 0
17929: PPUSH
17930: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17934: LD_INT 6
17936: PPUSH
17937: LD_INT 1
17939: PPUSH
17940: LD_INT 1
17942: PPUSH
17943: LD_INT 0
17945: PPUSH
17946: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17950: LD_INT 5
17952: PPUSH
17953: LD_INT 1
17955: PPUSH
17956: LD_INT 1
17958: PPUSH
17959: LD_INT 0
17961: PPUSH
17962: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17966: LD_INT 3
17968: PPUSH
17969: LD_INT 1
17971: PPUSH
17972: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17976: LD_INT 97
17978: PPUSH
17979: LD_INT 91
17981: PPUSH
17982: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17986: LD_INT 22
17988: PUSH
17989: LD_INT 3
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 21
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PPUSH
18010: CALL_OW 69
18014: PPUSH
18015: CALL_OW 121
// wait ( 0 0$01 ) ;
18019: LD_INT 35
18021: PPUSH
18022: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18026: LD_INT 22
18028: PUSH
18029: LD_INT 3
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: LD_INT 21
18038: PUSH
18039: LD_INT 1
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PPUSH
18050: CALL_OW 69
18054: PPUSH
18055: LD_INT 124
18057: PPUSH
18058: LD_INT 98
18060: PPUSH
18061: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18065: LD_INT 22
18067: PUSH
18068: LD_INT 5
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 21
18077: PUSH
18078: LD_INT 1
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PPUSH
18089: CALL_OW 69
18093: PPUSH
18094: CALL_OW 121
// wait ( 0 0$01 ) ;
18098: LD_INT 35
18100: PPUSH
18101: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18105: LD_INT 22
18107: PUSH
18108: LD_INT 5
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 21
18117: PUSH
18118: LD_INT 1
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PPUSH
18129: CALL_OW 69
18133: PPUSH
18134: LD_INT 124
18136: PPUSH
18137: LD_INT 98
18139: PPUSH
18140: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18144: LD_INT 22
18146: PUSH
18147: LD_INT 6
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 21
18156: PUSH
18157: LD_INT 1
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PPUSH
18168: CALL_OW 69
18172: PPUSH
18173: CALL_OW 121
// wait ( 0 0$01 ) ;
18177: LD_INT 35
18179: PPUSH
18180: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18184: LD_INT 22
18186: PUSH
18187: LD_INT 6
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 21
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PPUSH
18208: CALL_OW 69
18212: PPUSH
18213: LD_INT 124
18215: PPUSH
18216: LD_INT 98
18218: PPUSH
18219: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18223: LD_INT 22
18225: PUSH
18226: LD_INT 1
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 21
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PPUSH
18247: CALL_OW 69
18251: PPUSH
18252: LD_INT 124
18254: PPUSH
18255: LD_INT 96
18257: PPUSH
18258: CALL_OW 114
// wait ( 0 0$1 ) ;
18262: LD_INT 35
18264: PPUSH
18265: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18269: LD_INT 124
18271: PPUSH
18272: LD_INT 96
18274: PPUSH
18275: CALL_OW 84
// p := 0 0$0 ;
18279: LD_ADDR_VAR 0 3
18283: PUSH
18284: LD_INT 0
18286: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18287: LD_ADDR_VAR 0 2
18291: PUSH
18292: LD_INT 2
18294: PUSH
18295: LD_INT 22
18297: PUSH
18298: LD_INT 3
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 22
18307: PUSH
18308: LD_INT 6
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 21
18322: PUSH
18323: LD_INT 1
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PPUSH
18334: CALL_OW 69
18338: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18339: LD_INT 35
18341: PPUSH
18342: CALL_OW 67
// p := p + 0 0$1 ;
18346: LD_ADDR_VAR 0 3
18350: PUSH
18351: LD_VAR 0 3
18355: PUSH
18356: LD_INT 35
18358: PLUS
18359: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18360: LD_VAR 0 2
18364: PPUSH
18365: LD_INT 5
18367: PPUSH
18368: CALL_OW 113
// for i in tmp do
18372: LD_ADDR_VAR 0 1
18376: PUSH
18377: LD_VAR 0 2
18381: PUSH
18382: FOR_IN
18383: IFFALSE 18410
// if IsInArea ( tmp , RussianEscape ) then
18385: LD_VAR 0 2
18389: PPUSH
18390: LD_INT 5
18392: PPUSH
18393: CALL_OW 308
18397: IFFALSE 18408
// RemoveUnit ( i ) ;
18399: LD_VAR 0 1
18403: PPUSH
18404: CALL_OW 64
18408: GO 18382
18410: POP
18411: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18412: LD_INT 23
18414: PUSH
18415: LD_INT 3
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 21
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 24
18434: PUSH
18435: LD_INT 250
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: LIST
18446: PPUSH
18447: CALL_OW 69
18451: PUSH
18452: LD_INT 0
18454: EQUAL
18455: PUSH
18456: LD_VAR 0 3
18460: PUSH
18461: LD_INT 245
18463: GREATEREQUAL
18464: OR
18465: IFFALSE 18339
// FinishMission ;
18467: CALL 18474 0 0
// end ;
18471: PPOPN 3
18473: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18474: LD_INT 0
18476: PPUSH
18477: PPUSH
18478: PPUSH
18479: PPUSH
18480: PPUSH
// if not vehicleProduceCounter then
18481: LD_EXP 42
18485: NOT
18486: IFFALSE 18495
// SetAchievement ( ACH_INFANTRY ) ;
18488: LD_STRING ACH_INFANTRY
18490: PPUSH
18491: CALL_OW 543
// if tick <= 20 20$00 then
18495: LD_OWVAR 1
18499: PUSH
18500: LD_INT 42000
18502: LESSEQUAL
18503: IFFALSE 18519
// begin wait ( 3 ) ;
18505: LD_INT 3
18507: PPUSH
18508: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18512: LD_STRING ACH_ASPEED_4
18514: PPUSH
18515: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18519: LD_INT 22
18521: PPUSH
18522: CALL 19163 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18526: LD_INT 69
18528: PPUSH
18529: LD_INT 1
18531: PPUSH
18532: CALL_OW 321
18536: PPUSH
18537: LD_STRING GatlingInGamma
18539: PPUSH
18540: CALL_OW 39
// m1 := false ;
18544: LD_ADDR_VAR 0 3
18548: PUSH
18549: LD_INT 0
18551: ST_TO_ADDR
// m2 := false ;
18552: LD_ADDR_VAR 0 4
18556: PUSH
18557: LD_INT 0
18559: ST_TO_ADDR
// m3 := false ;
18560: LD_ADDR_VAR 0 5
18564: PUSH
18565: LD_INT 0
18567: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18568: LD_EXP 34
18572: PUSH
18573: LD_INT 1
18575: EQUAL
18576: PUSH
18577: LD_EXP 35
18581: PUSH
18582: LD_INT 1
18584: EQUAL
18585: AND
18586: IFFALSE 18608
// begin AddMedal ( oil , 1 ) ;
18588: LD_STRING oil
18590: PPUSH
18591: LD_INT 1
18593: PPUSH
18594: CALL_OW 101
// m1 := true ;
18598: LD_ADDR_VAR 0 3
18602: PUSH
18603: LD_INT 1
18605: ST_TO_ADDR
// end else
18606: GO 18701
// begin if buildOil = 1 and buildPower = 0 then
18608: LD_EXP 34
18612: PUSH
18613: LD_INT 1
18615: EQUAL
18616: PUSH
18617: LD_EXP 35
18621: PUSH
18622: LD_INT 0
18624: EQUAL
18625: AND
18626: IFFALSE 18639
// AddMedal ( oil , - 1 ) ;
18628: LD_STRING oil
18630: PPUSH
18631: LD_INT 1
18633: NEG
18634: PPUSH
18635: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18639: LD_EXP 34
18643: PUSH
18644: LD_INT 0
18646: EQUAL
18647: PUSH
18648: LD_EXP 35
18652: PUSH
18653: LD_INT 1
18655: EQUAL
18656: AND
18657: IFFALSE 18670
// AddMedal ( oil , - 2 ) ;
18659: LD_STRING oil
18661: PPUSH
18662: LD_INT 2
18664: NEG
18665: PPUSH
18666: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18670: LD_EXP 34
18674: PUSH
18675: LD_INT 0
18677: EQUAL
18678: PUSH
18679: LD_EXP 35
18683: PUSH
18684: LD_INT 0
18686: EQUAL
18687: AND
18688: IFFALSE 18701
// AddMedal ( oil , - 3 ) ;
18690: LD_STRING oil
18692: PPUSH
18693: LD_INT 3
18695: NEG
18696: PPUSH
18697: CALL_OW 101
// end ; if lostCounter > 3 then
18701: LD_EXP 38
18705: PUSH
18706: LD_INT 3
18708: GREATER
18709: IFFALSE 18724
// AddMedal ( deaths , - 1 ) else
18711: LD_STRING deaths
18713: PPUSH
18714: LD_INT 1
18716: NEG
18717: PPUSH
18718: CALL_OW 101
18722: GO 18742
// begin AddMedal ( deaths , 1 ) ;
18724: LD_STRING deaths
18726: PPUSH
18727: LD_INT 1
18729: PPUSH
18730: CALL_OW 101
// m2 := true ;
18734: LD_ADDR_VAR 0 4
18738: PUSH
18739: LD_INT 1
18741: ST_TO_ADDR
// end ; if honor = 1 then
18742: LD_EXP 39
18746: PUSH
18747: LD_INT 1
18749: EQUAL
18750: IFFALSE 18772
// begin AddMedal ( honour , 1 ) ;
18752: LD_STRING honour
18754: PPUSH
18755: LD_INT 1
18757: PPUSH
18758: CALL_OW 101
// m3 := true ;
18762: LD_ADDR_VAR 0 5
18766: PUSH
18767: LD_INT 1
18769: ST_TO_ADDR
// end else
18770: GO 18783
// AddMedal ( honour , - 1 ) ;
18772: LD_STRING honour
18774: PPUSH
18775: LD_INT 1
18777: NEG
18778: PPUSH
18779: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18783: LD_VAR 0 3
18787: PUSH
18788: LD_VAR 0 4
18792: AND
18793: PUSH
18794: LD_VAR 0 5
18798: AND
18799: PUSH
18800: LD_OWVAR 67
18804: PUSH
18805: LD_INT 3
18807: GREATEREQUAL
18808: AND
18809: IFFALSE 18821
// SetAchievementEX ( ACH_AMER , 4 ) ;
18811: LD_STRING ACH_AMER
18813: PPUSH
18814: LD_INT 4
18816: PPUSH
18817: CALL_OW 564
// GiveMedals ( Main ) ;
18821: LD_STRING Main
18823: PPUSH
18824: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18828: LD_INT 22
18830: PUSH
18831: LD_INT 1
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 23
18840: PUSH
18841: LD_INT 1
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 21
18850: PUSH
18851: LD_INT 1
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: LIST
18862: PPUSH
18863: CALL_OW 69
18867: PPUSH
18868: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18872: LD_EXP 1
18876: PPUSH
18877: LD_EXP 48
18881: PUSH
18882: LD_STRING JMM
18884: STR
18885: PPUSH
18886: CALL_OW 38
// if IsOK ( Bobby ) then
18890: LD_EXP 2
18894: PPUSH
18895: CALL_OW 302
18899: IFFALSE 18919
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18901: LD_EXP 2
18905: PPUSH
18906: LD_EXP 48
18910: PUSH
18911: LD_STRING Bobby
18913: STR
18914: PPUSH
18915: CALL_OW 38
// if IsOK ( Cyrus ) then
18919: LD_EXP 3
18923: PPUSH
18924: CALL_OW 302
18928: IFFALSE 18948
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18930: LD_EXP 3
18934: PPUSH
18935: LD_EXP 48
18939: PUSH
18940: LD_STRING Cyrus
18942: STR
18943: PPUSH
18944: CALL_OW 38
// if IsOK ( Lisa ) then
18948: LD_EXP 4
18952: PPUSH
18953: CALL_OW 302
18957: IFFALSE 18977
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18959: LD_EXP 4
18963: PPUSH
18964: LD_EXP 48
18968: PUSH
18969: LD_STRING Lisa
18971: STR
18972: PPUSH
18973: CALL_OW 38
// if IsOK ( Brown ) then
18977: LD_EXP 7
18981: PPUSH
18982: CALL_OW 302
18986: IFFALSE 19006
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18988: LD_EXP 7
18992: PPUSH
18993: LD_EXP 48
18997: PUSH
18998: LD_STRING Brown
19000: STR
19001: PPUSH
19002: CALL_OW 38
// if not IsDead ( Donaldson ) then
19006: LD_EXP 13
19010: PPUSH
19011: CALL_OW 301
19015: NOT
19016: IFFALSE 19036
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19018: LD_EXP 13
19022: PPUSH
19023: LD_EXP 48
19027: PUSH
19028: LD_STRING Donaldson
19030: STR
19031: PPUSH
19032: CALL_OW 38
// if not IsDead ( Frank ) then
19036: LD_EXP 5
19040: PPUSH
19041: CALL_OW 301
19045: NOT
19046: IFFALSE 19066
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19048: LD_EXP 5
19052: PPUSH
19053: LD_EXP 48
19057: PUSH
19058: LD_STRING Frank
19060: STR
19061: PPUSH
19062: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19066: LD_INT 50
19068: PUSH
19069: EMPTY
19070: LIST
19071: PUSH
19072: LD_INT 22
19074: PUSH
19075: LD_INT 1
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 21
19084: PUSH
19085: LD_INT 1
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: LIST
19096: PPUSH
19097: CALL_OW 69
19101: PUSH
19102: LD_EXP 1
19106: PUSH
19107: LD_EXP 2
19111: PUSH
19112: LD_EXP 3
19116: PUSH
19117: LD_EXP 4
19121: PUSH
19122: LD_EXP 7
19126: PUSH
19127: LD_EXP 13
19131: PUSH
19132: LD_EXP 5
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: DIFF
19146: PPUSH
19147: LD_STRING 04_other_survivors
19149: PPUSH
19150: CALL_OW 38
// YouWin ;
19154: CALL_OW 103
// end ;
19158: LD_VAR 0 1
19162: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19163: LD_INT 0
19165: PPUSH
19166: PPUSH
19167: PPUSH
19168: PPUSH
// gammaBase = [ ] ;
19169: LD_ADDR_VAR 0 4
19173: PUSH
19174: EMPTY
19175: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19176: LD_ADDR_VAR 0 5
19180: PUSH
19181: LD_VAR 0 1
19185: PPUSH
19186: LD_INT 22
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 21
19198: PUSH
19199: LD_INT 3
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PPUSH
19210: CALL_OW 70
19214: ST_TO_ADDR
// for i in buildings do
19215: LD_ADDR_VAR 0 3
19219: PUSH
19220: LD_VAR 0 5
19224: PUSH
19225: FOR_IN
19226: IFFALSE 19563
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19228: LD_VAR 0 3
19232: PPUSH
19233: CALL_OW 266
19237: PUSH
19238: LD_INT 6
19240: PUSH
19241: LD_INT 7
19243: PUSH
19244: LD_INT 8
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: LIST
19251: IN
19252: IFFALSE 19366
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19254: LD_ADDR_VAR 0 4
19258: PUSH
19259: LD_VAR 0 4
19263: PUSH
19264: LD_VAR 0 3
19268: PPUSH
19269: CALL_OW 266
19273: PUSH
19274: LD_VAR 0 3
19278: PPUSH
19279: CALL_OW 250
19283: PUSH
19284: LD_VAR 0 3
19288: PPUSH
19289: CALL_OW 251
19293: PUSH
19294: LD_VAR 0 3
19298: PPUSH
19299: CALL_OW 254
19303: PUSH
19304: LD_VAR 0 3
19308: PPUSH
19309: CALL_OW 267
19313: PUSH
19314: LD_VAR 0 3
19318: PPUSH
19319: CALL_OW 248
19323: PUSH
19324: LD_VAR 0 3
19328: PPUSH
19329: LD_INT 1
19331: PPUSH
19332: CALL_OW 268
19336: PUSH
19337: LD_VAR 0 3
19341: PPUSH
19342: LD_INT 2
19344: PPUSH
19345: CALL_OW 268
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: PUSH
19360: EMPTY
19361: LIST
19362: ADD
19363: ST_TO_ADDR
19364: GO 19561
// if GetBType ( i ) in [ b_bunker ] then
19366: LD_VAR 0 3
19370: PPUSH
19371: CALL_OW 266
19375: PUSH
19376: LD_INT 32
19378: PUSH
19379: EMPTY
19380: LIST
19381: IN
19382: IFFALSE 19479
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19384: LD_ADDR_VAR 0 4
19388: PUSH
19389: LD_VAR 0 4
19393: PUSH
19394: LD_VAR 0 3
19398: PPUSH
19399: CALL_OW 266
19403: PUSH
19404: LD_VAR 0 3
19408: PPUSH
19409: CALL_OW 250
19413: PUSH
19414: LD_VAR 0 3
19418: PPUSH
19419: CALL_OW 251
19423: PUSH
19424: LD_VAR 0 3
19428: PPUSH
19429: CALL_OW 254
19433: PUSH
19434: LD_VAR 0 3
19438: PPUSH
19439: CALL_OW 267
19443: PUSH
19444: LD_VAR 0 3
19448: PPUSH
19449: CALL_OW 248
19453: PUSH
19454: LD_VAR 0 3
19458: PPUSH
19459: CALL_OW 269
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: PUSH
19473: EMPTY
19474: LIST
19475: ADD
19476: ST_TO_ADDR
19477: GO 19561
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19479: LD_ADDR_VAR 0 4
19483: PUSH
19484: LD_VAR 0 4
19488: PUSH
19489: LD_VAR 0 3
19493: PPUSH
19494: CALL_OW 266
19498: PUSH
19499: LD_VAR 0 3
19503: PPUSH
19504: CALL_OW 250
19508: PUSH
19509: LD_VAR 0 3
19513: PPUSH
19514: CALL_OW 251
19518: PUSH
19519: LD_VAR 0 3
19523: PPUSH
19524: CALL_OW 254
19528: PUSH
19529: LD_VAR 0 3
19533: PPUSH
19534: CALL_OW 267
19538: PUSH
19539: LD_VAR 0 3
19543: PPUSH
19544: CALL_OW 248
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: PUSH
19557: EMPTY
19558: LIST
19559: ADD
19560: ST_TO_ADDR
// end ;
19561: GO 19225
19563: POP
19564: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19565: LD_VAR 0 4
19569: PPUSH
19570: LD_STRING GammaBase
19572: PPUSH
19573: CALL_OW 39
// end ; end_of_file
19577: LD_VAR 0 2
19581: RET
// every 1 1$15 do
19582: GO 19584
19584: DISABLE
// begin if supply <= 13 and supply > 7 then
19585: LD_EXP 36
19589: PUSH
19590: LD_INT 13
19592: LESSEQUAL
19593: PUSH
19594: LD_EXP 36
19598: PUSH
19599: LD_INT 7
19601: GREATER
19602: AND
19603: IFFALSE 19626
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19605: LD_INT 3
19607: PPUSH
19608: LD_INT 5
19610: PPUSH
19611: CALL_OW 12
19615: PPUSH
19616: LD_INT 18
19618: PPUSH
19619: LD_INT 1
19621: PPUSH
19622: CALL_OW 55
// if supply <= 7 and supply > 4 then
19626: LD_EXP 36
19630: PUSH
19631: LD_INT 7
19633: LESSEQUAL
19634: PUSH
19635: LD_EXP 36
19639: PUSH
19640: LD_INT 4
19642: GREATER
19643: AND
19644: IFFALSE 19667
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19646: LD_INT 3
19648: PPUSH
19649: LD_INT 5
19651: PPUSH
19652: CALL_OW 12
19656: PPUSH
19657: LD_INT 19
19659: PPUSH
19660: LD_INT 1
19662: PPUSH
19663: CALL_OW 55
// if supply <= 4 and supply > 0 then
19667: LD_EXP 36
19671: PUSH
19672: LD_INT 4
19674: LESSEQUAL
19675: PUSH
19676: LD_EXP 36
19680: PUSH
19681: LD_INT 0
19683: GREATER
19684: AND
19685: IFFALSE 19708
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19687: LD_INT 3
19689: PPUSH
19690: LD_INT 5
19692: PPUSH
19693: CALL_OW 12
19697: PPUSH
19698: LD_INT 20
19700: PPUSH
19701: LD_INT 1
19703: PPUSH
19704: CALL_OW 55
// if supply then
19708: LD_EXP 36
19712: IFFALSE 19729
// begin supply = supply - 1 ;
19714: LD_ADDR_EXP 36
19718: PUSH
19719: LD_EXP 36
19723: PUSH
19724: LD_INT 1
19726: MINUS
19727: ST_TO_ADDR
// enable ;
19728: ENABLE
// end ; end ; end_of_file end_of_file
19729: END
// every 0 0$1 do
19730: GO 19732
19732: DISABLE
// begin enable ;
19733: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19734: LD_STRING updateTimer(
19736: PUSH
19737: LD_OWVAR 1
19741: STR
19742: PUSH
19743: LD_STRING );
19745: STR
19746: PPUSH
19747: CALL_OW 559
// end ;
19751: END
// export function SOS_MapStart ( ) ; begin
19752: LD_INT 0
19754: PPUSH
// if streamModeActive then
19755: LD_EXP 50
19759: IFFALSE 19768
// DefineStreamItems ( true ) ;
19761: LD_INT 1
19763: PPUSH
19764: CALL 21422 0 1
// UpdateFactoryWaypoints ( ) ;
19768: CALL 34283 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19772: CALL 34540 0 0
// end ;
19776: LD_VAR 0 1
19780: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19781: LD_INT 0
19783: PPUSH
// if p2 = 100 then
19784: LD_VAR 0 2
19788: PUSH
19789: LD_INT 100
19791: EQUAL
19792: IFFALSE 20795
// begin if not StreamModeActive then
19794: LD_EXP 50
19798: NOT
19799: IFFALSE 19809
// StreamModeActive := true ;
19801: LD_ADDR_EXP 50
19805: PUSH
19806: LD_INT 1
19808: ST_TO_ADDR
// if p3 = 0 then
19809: LD_VAR 0 3
19813: PUSH
19814: LD_INT 0
19816: EQUAL
19817: IFFALSE 19823
// InitStreamMode ;
19819: CALL 20958 0 0
// if p3 = 1 then
19823: LD_VAR 0 3
19827: PUSH
19828: LD_INT 1
19830: EQUAL
19831: IFFALSE 19841
// sRocket := true ;
19833: LD_ADDR_EXP 55
19837: PUSH
19838: LD_INT 1
19840: ST_TO_ADDR
// if p3 = 2 then
19841: LD_VAR 0 3
19845: PUSH
19846: LD_INT 2
19848: EQUAL
19849: IFFALSE 19859
// sSpeed := true ;
19851: LD_ADDR_EXP 54
19855: PUSH
19856: LD_INT 1
19858: ST_TO_ADDR
// if p3 = 3 then
19859: LD_VAR 0 3
19863: PUSH
19864: LD_INT 3
19866: EQUAL
19867: IFFALSE 19877
// sEngine := true ;
19869: LD_ADDR_EXP 56
19873: PUSH
19874: LD_INT 1
19876: ST_TO_ADDR
// if p3 = 4 then
19877: LD_VAR 0 3
19881: PUSH
19882: LD_INT 4
19884: EQUAL
19885: IFFALSE 19895
// sSpec := true ;
19887: LD_ADDR_EXP 53
19891: PUSH
19892: LD_INT 1
19894: ST_TO_ADDR
// if p3 = 5 then
19895: LD_VAR 0 3
19899: PUSH
19900: LD_INT 5
19902: EQUAL
19903: IFFALSE 19913
// sLevel := true ;
19905: LD_ADDR_EXP 57
19909: PUSH
19910: LD_INT 1
19912: ST_TO_ADDR
// if p3 = 6 then
19913: LD_VAR 0 3
19917: PUSH
19918: LD_INT 6
19920: EQUAL
19921: IFFALSE 19931
// sArmoury := true ;
19923: LD_ADDR_EXP 58
19927: PUSH
19928: LD_INT 1
19930: ST_TO_ADDR
// if p3 = 7 then
19931: LD_VAR 0 3
19935: PUSH
19936: LD_INT 7
19938: EQUAL
19939: IFFALSE 19949
// sRadar := true ;
19941: LD_ADDR_EXP 59
19945: PUSH
19946: LD_INT 1
19948: ST_TO_ADDR
// if p3 = 8 then
19949: LD_VAR 0 3
19953: PUSH
19954: LD_INT 8
19956: EQUAL
19957: IFFALSE 19967
// sBunker := true ;
19959: LD_ADDR_EXP 60
19963: PUSH
19964: LD_INT 1
19966: ST_TO_ADDR
// if p3 = 9 then
19967: LD_VAR 0 3
19971: PUSH
19972: LD_INT 9
19974: EQUAL
19975: IFFALSE 19985
// sHack := true ;
19977: LD_ADDR_EXP 61
19981: PUSH
19982: LD_INT 1
19984: ST_TO_ADDR
// if p3 = 10 then
19985: LD_VAR 0 3
19989: PUSH
19990: LD_INT 10
19992: EQUAL
19993: IFFALSE 20003
// sFire := true ;
19995: LD_ADDR_EXP 62
19999: PUSH
20000: LD_INT 1
20002: ST_TO_ADDR
// if p3 = 11 then
20003: LD_VAR 0 3
20007: PUSH
20008: LD_INT 11
20010: EQUAL
20011: IFFALSE 20021
// sRefresh := true ;
20013: LD_ADDR_EXP 63
20017: PUSH
20018: LD_INT 1
20020: ST_TO_ADDR
// if p3 = 12 then
20021: LD_VAR 0 3
20025: PUSH
20026: LD_INT 12
20028: EQUAL
20029: IFFALSE 20039
// sExp := true ;
20031: LD_ADDR_EXP 64
20035: PUSH
20036: LD_INT 1
20038: ST_TO_ADDR
// if p3 = 13 then
20039: LD_VAR 0 3
20043: PUSH
20044: LD_INT 13
20046: EQUAL
20047: IFFALSE 20057
// sDepot := true ;
20049: LD_ADDR_EXP 65
20053: PUSH
20054: LD_INT 1
20056: ST_TO_ADDR
// if p3 = 14 then
20057: LD_VAR 0 3
20061: PUSH
20062: LD_INT 14
20064: EQUAL
20065: IFFALSE 20075
// sFlag := true ;
20067: LD_ADDR_EXP 66
20071: PUSH
20072: LD_INT 1
20074: ST_TO_ADDR
// if p3 = 15 then
20075: LD_VAR 0 3
20079: PUSH
20080: LD_INT 15
20082: EQUAL
20083: IFFALSE 20093
// sKamikadze := true ;
20085: LD_ADDR_EXP 74
20089: PUSH
20090: LD_INT 1
20092: ST_TO_ADDR
// if p3 = 16 then
20093: LD_VAR 0 3
20097: PUSH
20098: LD_INT 16
20100: EQUAL
20101: IFFALSE 20111
// sTroll := true ;
20103: LD_ADDR_EXP 75
20107: PUSH
20108: LD_INT 1
20110: ST_TO_ADDR
// if p3 = 17 then
20111: LD_VAR 0 3
20115: PUSH
20116: LD_INT 17
20118: EQUAL
20119: IFFALSE 20129
// sSlow := true ;
20121: LD_ADDR_EXP 76
20125: PUSH
20126: LD_INT 1
20128: ST_TO_ADDR
// if p3 = 18 then
20129: LD_VAR 0 3
20133: PUSH
20134: LD_INT 18
20136: EQUAL
20137: IFFALSE 20147
// sLack := true ;
20139: LD_ADDR_EXP 77
20143: PUSH
20144: LD_INT 1
20146: ST_TO_ADDR
// if p3 = 19 then
20147: LD_VAR 0 3
20151: PUSH
20152: LD_INT 19
20154: EQUAL
20155: IFFALSE 20165
// sTank := true ;
20157: LD_ADDR_EXP 79
20161: PUSH
20162: LD_INT 1
20164: ST_TO_ADDR
// if p3 = 20 then
20165: LD_VAR 0 3
20169: PUSH
20170: LD_INT 20
20172: EQUAL
20173: IFFALSE 20183
// sRemote := true ;
20175: LD_ADDR_EXP 80
20179: PUSH
20180: LD_INT 1
20182: ST_TO_ADDR
// if p3 = 21 then
20183: LD_VAR 0 3
20187: PUSH
20188: LD_INT 21
20190: EQUAL
20191: IFFALSE 20201
// sPowell := true ;
20193: LD_ADDR_EXP 81
20197: PUSH
20198: LD_INT 1
20200: ST_TO_ADDR
// if p3 = 22 then
20201: LD_VAR 0 3
20205: PUSH
20206: LD_INT 22
20208: EQUAL
20209: IFFALSE 20219
// sTeleport := true ;
20211: LD_ADDR_EXP 84
20215: PUSH
20216: LD_INT 1
20218: ST_TO_ADDR
// if p3 = 23 then
20219: LD_VAR 0 3
20223: PUSH
20224: LD_INT 23
20226: EQUAL
20227: IFFALSE 20237
// sOilTower := true ;
20229: LD_ADDR_EXP 86
20233: PUSH
20234: LD_INT 1
20236: ST_TO_ADDR
// if p3 = 24 then
20237: LD_VAR 0 3
20241: PUSH
20242: LD_INT 24
20244: EQUAL
20245: IFFALSE 20255
// sShovel := true ;
20247: LD_ADDR_EXP 87
20251: PUSH
20252: LD_INT 1
20254: ST_TO_ADDR
// if p3 = 25 then
20255: LD_VAR 0 3
20259: PUSH
20260: LD_INT 25
20262: EQUAL
20263: IFFALSE 20273
// sSheik := true ;
20265: LD_ADDR_EXP 88
20269: PUSH
20270: LD_INT 1
20272: ST_TO_ADDR
// if p3 = 26 then
20273: LD_VAR 0 3
20277: PUSH
20278: LD_INT 26
20280: EQUAL
20281: IFFALSE 20291
// sEarthquake := true ;
20283: LD_ADDR_EXP 90
20287: PUSH
20288: LD_INT 1
20290: ST_TO_ADDR
// if p3 = 27 then
20291: LD_VAR 0 3
20295: PUSH
20296: LD_INT 27
20298: EQUAL
20299: IFFALSE 20309
// sAI := true ;
20301: LD_ADDR_EXP 91
20305: PUSH
20306: LD_INT 1
20308: ST_TO_ADDR
// if p3 = 28 then
20309: LD_VAR 0 3
20313: PUSH
20314: LD_INT 28
20316: EQUAL
20317: IFFALSE 20327
// sCargo := true ;
20319: LD_ADDR_EXP 94
20323: PUSH
20324: LD_INT 1
20326: ST_TO_ADDR
// if p3 = 29 then
20327: LD_VAR 0 3
20331: PUSH
20332: LD_INT 29
20334: EQUAL
20335: IFFALSE 20345
// sDLaser := true ;
20337: LD_ADDR_EXP 95
20341: PUSH
20342: LD_INT 1
20344: ST_TO_ADDR
// if p3 = 30 then
20345: LD_VAR 0 3
20349: PUSH
20350: LD_INT 30
20352: EQUAL
20353: IFFALSE 20363
// sExchange := true ;
20355: LD_ADDR_EXP 96
20359: PUSH
20360: LD_INT 1
20362: ST_TO_ADDR
// if p3 = 31 then
20363: LD_VAR 0 3
20367: PUSH
20368: LD_INT 31
20370: EQUAL
20371: IFFALSE 20381
// sFac := true ;
20373: LD_ADDR_EXP 97
20377: PUSH
20378: LD_INT 1
20380: ST_TO_ADDR
// if p3 = 32 then
20381: LD_VAR 0 3
20385: PUSH
20386: LD_INT 32
20388: EQUAL
20389: IFFALSE 20399
// sPower := true ;
20391: LD_ADDR_EXP 98
20395: PUSH
20396: LD_INT 1
20398: ST_TO_ADDR
// if p3 = 33 then
20399: LD_VAR 0 3
20403: PUSH
20404: LD_INT 33
20406: EQUAL
20407: IFFALSE 20417
// sRandom := true ;
20409: LD_ADDR_EXP 99
20413: PUSH
20414: LD_INT 1
20416: ST_TO_ADDR
// if p3 = 34 then
20417: LD_VAR 0 3
20421: PUSH
20422: LD_INT 34
20424: EQUAL
20425: IFFALSE 20435
// sShield := true ;
20427: LD_ADDR_EXP 100
20431: PUSH
20432: LD_INT 1
20434: ST_TO_ADDR
// if p3 = 35 then
20435: LD_VAR 0 3
20439: PUSH
20440: LD_INT 35
20442: EQUAL
20443: IFFALSE 20453
// sTime := true ;
20445: LD_ADDR_EXP 101
20449: PUSH
20450: LD_INT 1
20452: ST_TO_ADDR
// if p3 = 36 then
20453: LD_VAR 0 3
20457: PUSH
20458: LD_INT 36
20460: EQUAL
20461: IFFALSE 20471
// sTools := true ;
20463: LD_ADDR_EXP 102
20467: PUSH
20468: LD_INT 1
20470: ST_TO_ADDR
// if p3 = 101 then
20471: LD_VAR 0 3
20475: PUSH
20476: LD_INT 101
20478: EQUAL
20479: IFFALSE 20489
// sSold := true ;
20481: LD_ADDR_EXP 67
20485: PUSH
20486: LD_INT 1
20488: ST_TO_ADDR
// if p3 = 102 then
20489: LD_VAR 0 3
20493: PUSH
20494: LD_INT 102
20496: EQUAL
20497: IFFALSE 20507
// sDiff := true ;
20499: LD_ADDR_EXP 68
20503: PUSH
20504: LD_INT 1
20506: ST_TO_ADDR
// if p3 = 103 then
20507: LD_VAR 0 3
20511: PUSH
20512: LD_INT 103
20514: EQUAL
20515: IFFALSE 20525
// sFog := true ;
20517: LD_ADDR_EXP 71
20521: PUSH
20522: LD_INT 1
20524: ST_TO_ADDR
// if p3 = 104 then
20525: LD_VAR 0 3
20529: PUSH
20530: LD_INT 104
20532: EQUAL
20533: IFFALSE 20543
// sReset := true ;
20535: LD_ADDR_EXP 72
20539: PUSH
20540: LD_INT 1
20542: ST_TO_ADDR
// if p3 = 105 then
20543: LD_VAR 0 3
20547: PUSH
20548: LD_INT 105
20550: EQUAL
20551: IFFALSE 20561
// sSun := true ;
20553: LD_ADDR_EXP 73
20557: PUSH
20558: LD_INT 1
20560: ST_TO_ADDR
// if p3 = 106 then
20561: LD_VAR 0 3
20565: PUSH
20566: LD_INT 106
20568: EQUAL
20569: IFFALSE 20579
// sTiger := true ;
20571: LD_ADDR_EXP 69
20575: PUSH
20576: LD_INT 1
20578: ST_TO_ADDR
// if p3 = 107 then
20579: LD_VAR 0 3
20583: PUSH
20584: LD_INT 107
20586: EQUAL
20587: IFFALSE 20597
// sBomb := true ;
20589: LD_ADDR_EXP 70
20593: PUSH
20594: LD_INT 1
20596: ST_TO_ADDR
// if p3 = 108 then
20597: LD_VAR 0 3
20601: PUSH
20602: LD_INT 108
20604: EQUAL
20605: IFFALSE 20615
// sWound := true ;
20607: LD_ADDR_EXP 78
20611: PUSH
20612: LD_INT 1
20614: ST_TO_ADDR
// if p3 = 109 then
20615: LD_VAR 0 3
20619: PUSH
20620: LD_INT 109
20622: EQUAL
20623: IFFALSE 20633
// sBetray := true ;
20625: LD_ADDR_EXP 82
20629: PUSH
20630: LD_INT 1
20632: ST_TO_ADDR
// if p3 = 110 then
20633: LD_VAR 0 3
20637: PUSH
20638: LD_INT 110
20640: EQUAL
20641: IFFALSE 20651
// sContamin := true ;
20643: LD_ADDR_EXP 83
20647: PUSH
20648: LD_INT 1
20650: ST_TO_ADDR
// if p3 = 111 then
20651: LD_VAR 0 3
20655: PUSH
20656: LD_INT 111
20658: EQUAL
20659: IFFALSE 20669
// sOil := true ;
20661: LD_ADDR_EXP 85
20665: PUSH
20666: LD_INT 1
20668: ST_TO_ADDR
// if p3 = 112 then
20669: LD_VAR 0 3
20673: PUSH
20674: LD_INT 112
20676: EQUAL
20677: IFFALSE 20687
// sStu := true ;
20679: LD_ADDR_EXP 89
20683: PUSH
20684: LD_INT 1
20686: ST_TO_ADDR
// if p3 = 113 then
20687: LD_VAR 0 3
20691: PUSH
20692: LD_INT 113
20694: EQUAL
20695: IFFALSE 20705
// sBazooka := true ;
20697: LD_ADDR_EXP 92
20701: PUSH
20702: LD_INT 1
20704: ST_TO_ADDR
// if p3 = 114 then
20705: LD_VAR 0 3
20709: PUSH
20710: LD_INT 114
20712: EQUAL
20713: IFFALSE 20723
// sMortar := true ;
20715: LD_ADDR_EXP 93
20719: PUSH
20720: LD_INT 1
20722: ST_TO_ADDR
// if p3 = 115 then
20723: LD_VAR 0 3
20727: PUSH
20728: LD_INT 115
20730: EQUAL
20731: IFFALSE 20741
// sRanger := true ;
20733: LD_ADDR_EXP 103
20737: PUSH
20738: LD_INT 1
20740: ST_TO_ADDR
// if p3 = 116 then
20741: LD_VAR 0 3
20745: PUSH
20746: LD_INT 116
20748: EQUAL
20749: IFFALSE 20759
// sComputer := true ;
20751: LD_ADDR_EXP 104
20755: PUSH
20756: LD_INT 1
20758: ST_TO_ADDR
// if p3 = 117 then
20759: LD_VAR 0 3
20763: PUSH
20764: LD_INT 117
20766: EQUAL
20767: IFFALSE 20777
// s30 := true ;
20769: LD_ADDR_EXP 105
20773: PUSH
20774: LD_INT 1
20776: ST_TO_ADDR
// if p3 = 118 then
20777: LD_VAR 0 3
20781: PUSH
20782: LD_INT 118
20784: EQUAL
20785: IFFALSE 20795
// s60 := true ;
20787: LD_ADDR_EXP 106
20791: PUSH
20792: LD_INT 1
20794: ST_TO_ADDR
// end ; if p2 = 101 then
20795: LD_VAR 0 2
20799: PUSH
20800: LD_INT 101
20802: EQUAL
20803: IFFALSE 20931
// begin case p3 of 1 :
20805: LD_VAR 0 3
20809: PUSH
20810: LD_INT 1
20812: DOUBLE
20813: EQUAL
20814: IFTRUE 20818
20816: GO 20825
20818: POP
// hHackUnlimitedResources ; 2 :
20819: CALL 33029 0 0
20823: GO 20931
20825: LD_INT 2
20827: DOUBLE
20828: EQUAL
20829: IFTRUE 20833
20831: GO 20840
20833: POP
// hHackSetLevel10 ; 3 :
20834: CALL 33162 0 0
20838: GO 20931
20840: LD_INT 3
20842: DOUBLE
20843: EQUAL
20844: IFTRUE 20848
20846: GO 20855
20848: POP
// hHackSetLevel10YourUnits ; 4 :
20849: CALL 33247 0 0
20853: GO 20931
20855: LD_INT 4
20857: DOUBLE
20858: EQUAL
20859: IFTRUE 20863
20861: GO 20870
20863: POP
// hHackInvincible ; 5 :
20864: CALL 33695 0 0
20868: GO 20931
20870: LD_INT 5
20872: DOUBLE
20873: EQUAL
20874: IFTRUE 20878
20876: GO 20885
20878: POP
// hHackInvisible ; 6 :
20879: CALL 33806 0 0
20883: GO 20931
20885: LD_INT 6
20887: DOUBLE
20888: EQUAL
20889: IFTRUE 20893
20891: GO 20900
20893: POP
// hHackChangeYourSide ; 7 :
20894: CALL 33863 0 0
20898: GO 20931
20900: LD_INT 7
20902: DOUBLE
20903: EQUAL
20904: IFTRUE 20908
20906: GO 20915
20908: POP
// hHackChangeUnitSide ; 8 :
20909: CALL 33905 0 0
20913: GO 20931
20915: LD_INT 8
20917: DOUBLE
20918: EQUAL
20919: IFTRUE 20923
20921: GO 20930
20923: POP
// hHackFog ; end ;
20924: CALL 34006 0 0
20928: GO 20931
20930: POP
// end ; end ;
20931: LD_VAR 0 7
20935: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20936: GO 20938
20938: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20939: LD_STRING initStreamRollete();
20941: PPUSH
20942: CALL_OW 559
// InitStreamMode ;
20946: CALL 20958 0 0
// DefineStreamItems ( false ) ;
20950: LD_INT 0
20952: PPUSH
20953: CALL 21422 0 1
// end ;
20957: END
// function InitStreamMode ; begin
20958: LD_INT 0
20960: PPUSH
// streamModeActive := false ;
20961: LD_ADDR_EXP 50
20965: PUSH
20966: LD_INT 0
20968: ST_TO_ADDR
// normalCounter := 36 ;
20969: LD_ADDR_EXP 51
20973: PUSH
20974: LD_INT 36
20976: ST_TO_ADDR
// hardcoreCounter := 18 ;
20977: LD_ADDR_EXP 52
20981: PUSH
20982: LD_INT 18
20984: ST_TO_ADDR
// sRocket := false ;
20985: LD_ADDR_EXP 55
20989: PUSH
20990: LD_INT 0
20992: ST_TO_ADDR
// sSpeed := false ;
20993: LD_ADDR_EXP 54
20997: PUSH
20998: LD_INT 0
21000: ST_TO_ADDR
// sEngine := false ;
21001: LD_ADDR_EXP 56
21005: PUSH
21006: LD_INT 0
21008: ST_TO_ADDR
// sSpec := false ;
21009: LD_ADDR_EXP 53
21013: PUSH
21014: LD_INT 0
21016: ST_TO_ADDR
// sLevel := false ;
21017: LD_ADDR_EXP 57
21021: PUSH
21022: LD_INT 0
21024: ST_TO_ADDR
// sArmoury := false ;
21025: LD_ADDR_EXP 58
21029: PUSH
21030: LD_INT 0
21032: ST_TO_ADDR
// sRadar := false ;
21033: LD_ADDR_EXP 59
21037: PUSH
21038: LD_INT 0
21040: ST_TO_ADDR
// sBunker := false ;
21041: LD_ADDR_EXP 60
21045: PUSH
21046: LD_INT 0
21048: ST_TO_ADDR
// sHack := false ;
21049: LD_ADDR_EXP 61
21053: PUSH
21054: LD_INT 0
21056: ST_TO_ADDR
// sFire := false ;
21057: LD_ADDR_EXP 62
21061: PUSH
21062: LD_INT 0
21064: ST_TO_ADDR
// sRefresh := false ;
21065: LD_ADDR_EXP 63
21069: PUSH
21070: LD_INT 0
21072: ST_TO_ADDR
// sExp := false ;
21073: LD_ADDR_EXP 64
21077: PUSH
21078: LD_INT 0
21080: ST_TO_ADDR
// sDepot := false ;
21081: LD_ADDR_EXP 65
21085: PUSH
21086: LD_INT 0
21088: ST_TO_ADDR
// sFlag := false ;
21089: LD_ADDR_EXP 66
21093: PUSH
21094: LD_INT 0
21096: ST_TO_ADDR
// sKamikadze := false ;
21097: LD_ADDR_EXP 74
21101: PUSH
21102: LD_INT 0
21104: ST_TO_ADDR
// sTroll := false ;
21105: LD_ADDR_EXP 75
21109: PUSH
21110: LD_INT 0
21112: ST_TO_ADDR
// sSlow := false ;
21113: LD_ADDR_EXP 76
21117: PUSH
21118: LD_INT 0
21120: ST_TO_ADDR
// sLack := false ;
21121: LD_ADDR_EXP 77
21125: PUSH
21126: LD_INT 0
21128: ST_TO_ADDR
// sTank := false ;
21129: LD_ADDR_EXP 79
21133: PUSH
21134: LD_INT 0
21136: ST_TO_ADDR
// sRemote := false ;
21137: LD_ADDR_EXP 80
21141: PUSH
21142: LD_INT 0
21144: ST_TO_ADDR
// sPowell := false ;
21145: LD_ADDR_EXP 81
21149: PUSH
21150: LD_INT 0
21152: ST_TO_ADDR
// sTeleport := false ;
21153: LD_ADDR_EXP 84
21157: PUSH
21158: LD_INT 0
21160: ST_TO_ADDR
// sOilTower := false ;
21161: LD_ADDR_EXP 86
21165: PUSH
21166: LD_INT 0
21168: ST_TO_ADDR
// sShovel := false ;
21169: LD_ADDR_EXP 87
21173: PUSH
21174: LD_INT 0
21176: ST_TO_ADDR
// sSheik := false ;
21177: LD_ADDR_EXP 88
21181: PUSH
21182: LD_INT 0
21184: ST_TO_ADDR
// sEarthquake := false ;
21185: LD_ADDR_EXP 90
21189: PUSH
21190: LD_INT 0
21192: ST_TO_ADDR
// sAI := false ;
21193: LD_ADDR_EXP 91
21197: PUSH
21198: LD_INT 0
21200: ST_TO_ADDR
// sCargo := false ;
21201: LD_ADDR_EXP 94
21205: PUSH
21206: LD_INT 0
21208: ST_TO_ADDR
// sDLaser := false ;
21209: LD_ADDR_EXP 95
21213: PUSH
21214: LD_INT 0
21216: ST_TO_ADDR
// sExchange := false ;
21217: LD_ADDR_EXP 96
21221: PUSH
21222: LD_INT 0
21224: ST_TO_ADDR
// sFac := false ;
21225: LD_ADDR_EXP 97
21229: PUSH
21230: LD_INT 0
21232: ST_TO_ADDR
// sPower := false ;
21233: LD_ADDR_EXP 98
21237: PUSH
21238: LD_INT 0
21240: ST_TO_ADDR
// sRandom := false ;
21241: LD_ADDR_EXP 99
21245: PUSH
21246: LD_INT 0
21248: ST_TO_ADDR
// sShield := false ;
21249: LD_ADDR_EXP 100
21253: PUSH
21254: LD_INT 0
21256: ST_TO_ADDR
// sTime := false ;
21257: LD_ADDR_EXP 101
21261: PUSH
21262: LD_INT 0
21264: ST_TO_ADDR
// sTools := false ;
21265: LD_ADDR_EXP 102
21269: PUSH
21270: LD_INT 0
21272: ST_TO_ADDR
// sSold := false ;
21273: LD_ADDR_EXP 67
21277: PUSH
21278: LD_INT 0
21280: ST_TO_ADDR
// sDiff := false ;
21281: LD_ADDR_EXP 68
21285: PUSH
21286: LD_INT 0
21288: ST_TO_ADDR
// sFog := false ;
21289: LD_ADDR_EXP 71
21293: PUSH
21294: LD_INT 0
21296: ST_TO_ADDR
// sReset := false ;
21297: LD_ADDR_EXP 72
21301: PUSH
21302: LD_INT 0
21304: ST_TO_ADDR
// sSun := false ;
21305: LD_ADDR_EXP 73
21309: PUSH
21310: LD_INT 0
21312: ST_TO_ADDR
// sTiger := false ;
21313: LD_ADDR_EXP 69
21317: PUSH
21318: LD_INT 0
21320: ST_TO_ADDR
// sBomb := false ;
21321: LD_ADDR_EXP 70
21325: PUSH
21326: LD_INT 0
21328: ST_TO_ADDR
// sWound := false ;
21329: LD_ADDR_EXP 78
21333: PUSH
21334: LD_INT 0
21336: ST_TO_ADDR
// sBetray := false ;
21337: LD_ADDR_EXP 82
21341: PUSH
21342: LD_INT 0
21344: ST_TO_ADDR
// sContamin := false ;
21345: LD_ADDR_EXP 83
21349: PUSH
21350: LD_INT 0
21352: ST_TO_ADDR
// sOil := false ;
21353: LD_ADDR_EXP 85
21357: PUSH
21358: LD_INT 0
21360: ST_TO_ADDR
// sStu := false ;
21361: LD_ADDR_EXP 89
21365: PUSH
21366: LD_INT 0
21368: ST_TO_ADDR
// sBazooka := false ;
21369: LD_ADDR_EXP 92
21373: PUSH
21374: LD_INT 0
21376: ST_TO_ADDR
// sMortar := false ;
21377: LD_ADDR_EXP 93
21381: PUSH
21382: LD_INT 0
21384: ST_TO_ADDR
// sRanger := false ;
21385: LD_ADDR_EXP 103
21389: PUSH
21390: LD_INT 0
21392: ST_TO_ADDR
// sComputer := false ;
21393: LD_ADDR_EXP 104
21397: PUSH
21398: LD_INT 0
21400: ST_TO_ADDR
// s30 := false ;
21401: LD_ADDR_EXP 105
21405: PUSH
21406: LD_INT 0
21408: ST_TO_ADDR
// s60 := false ;
21409: LD_ADDR_EXP 106
21413: PUSH
21414: LD_INT 0
21416: ST_TO_ADDR
// end ;
21417: LD_VAR 0 1
21421: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21422: LD_INT 0
21424: PPUSH
21425: PPUSH
21426: PPUSH
21427: PPUSH
21428: PPUSH
21429: PPUSH
21430: PPUSH
// result := [ ] ;
21431: LD_ADDR_VAR 0 2
21435: PUSH
21436: EMPTY
21437: ST_TO_ADDR
// if campaign_id = 1 then
21438: LD_OWVAR 69
21442: PUSH
21443: LD_INT 1
21445: EQUAL
21446: IFFALSE 24612
// begin case mission_number of 1 :
21448: LD_OWVAR 70
21452: PUSH
21453: LD_INT 1
21455: DOUBLE
21456: EQUAL
21457: IFTRUE 21461
21459: GO 21537
21461: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21462: LD_ADDR_VAR 0 2
21466: PUSH
21467: LD_INT 2
21469: PUSH
21470: LD_INT 4
21472: PUSH
21473: LD_INT 11
21475: PUSH
21476: LD_INT 12
21478: PUSH
21479: LD_INT 15
21481: PUSH
21482: LD_INT 16
21484: PUSH
21485: LD_INT 22
21487: PUSH
21488: LD_INT 23
21490: PUSH
21491: LD_INT 26
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 101
21507: PUSH
21508: LD_INT 102
21510: PUSH
21511: LD_INT 106
21513: PUSH
21514: LD_INT 116
21516: PUSH
21517: LD_INT 117
21519: PUSH
21520: LD_INT 118
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: ST_TO_ADDR
21535: GO 24610
21537: LD_INT 2
21539: DOUBLE
21540: EQUAL
21541: IFTRUE 21545
21543: GO 21629
21545: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21546: LD_ADDR_VAR 0 2
21550: PUSH
21551: LD_INT 2
21553: PUSH
21554: LD_INT 4
21556: PUSH
21557: LD_INT 11
21559: PUSH
21560: LD_INT 12
21562: PUSH
21563: LD_INT 15
21565: PUSH
21566: LD_INT 16
21568: PUSH
21569: LD_INT 22
21571: PUSH
21572: LD_INT 23
21574: PUSH
21575: LD_INT 26
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 101
21591: PUSH
21592: LD_INT 102
21594: PUSH
21595: LD_INT 105
21597: PUSH
21598: LD_INT 106
21600: PUSH
21601: LD_INT 108
21603: PUSH
21604: LD_INT 116
21606: PUSH
21607: LD_INT 117
21609: PUSH
21610: LD_INT 118
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: ST_TO_ADDR
21627: GO 24610
21629: LD_INT 3
21631: DOUBLE
21632: EQUAL
21633: IFTRUE 21637
21635: GO 21725
21637: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21638: LD_ADDR_VAR 0 2
21642: PUSH
21643: LD_INT 2
21645: PUSH
21646: LD_INT 4
21648: PUSH
21649: LD_INT 5
21651: PUSH
21652: LD_INT 11
21654: PUSH
21655: LD_INT 12
21657: PUSH
21658: LD_INT 15
21660: PUSH
21661: LD_INT 16
21663: PUSH
21664: LD_INT 22
21666: PUSH
21667: LD_INT 26
21669: PUSH
21670: LD_INT 36
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 101
21687: PUSH
21688: LD_INT 102
21690: PUSH
21691: LD_INT 105
21693: PUSH
21694: LD_INT 106
21696: PUSH
21697: LD_INT 108
21699: PUSH
21700: LD_INT 116
21702: PUSH
21703: LD_INT 117
21705: PUSH
21706: LD_INT 118
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: ST_TO_ADDR
21723: GO 24610
21725: LD_INT 4
21727: DOUBLE
21728: EQUAL
21729: IFTRUE 21733
21731: GO 21829
21733: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21734: LD_ADDR_VAR 0 2
21738: PUSH
21739: LD_INT 2
21741: PUSH
21742: LD_INT 4
21744: PUSH
21745: LD_INT 5
21747: PUSH
21748: LD_INT 8
21750: PUSH
21751: LD_INT 11
21753: PUSH
21754: LD_INT 12
21756: PUSH
21757: LD_INT 15
21759: PUSH
21760: LD_INT 16
21762: PUSH
21763: LD_INT 22
21765: PUSH
21766: LD_INT 23
21768: PUSH
21769: LD_INT 26
21771: PUSH
21772: LD_INT 36
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 101
21791: PUSH
21792: LD_INT 102
21794: PUSH
21795: LD_INT 105
21797: PUSH
21798: LD_INT 106
21800: PUSH
21801: LD_INT 108
21803: PUSH
21804: LD_INT 116
21806: PUSH
21807: LD_INT 117
21809: PUSH
21810: LD_INT 118
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: ST_TO_ADDR
21827: GO 24610
21829: LD_INT 5
21831: DOUBLE
21832: EQUAL
21833: IFTRUE 21837
21835: GO 21949
21837: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21838: LD_ADDR_VAR 0 2
21842: PUSH
21843: LD_INT 2
21845: PUSH
21846: LD_INT 4
21848: PUSH
21849: LD_INT 5
21851: PUSH
21852: LD_INT 6
21854: PUSH
21855: LD_INT 8
21857: PUSH
21858: LD_INT 11
21860: PUSH
21861: LD_INT 12
21863: PUSH
21864: LD_INT 15
21866: PUSH
21867: LD_INT 16
21869: PUSH
21870: LD_INT 22
21872: PUSH
21873: LD_INT 23
21875: PUSH
21876: LD_INT 25
21878: PUSH
21879: LD_INT 26
21881: PUSH
21882: LD_INT 36
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 101
21903: PUSH
21904: LD_INT 102
21906: PUSH
21907: LD_INT 105
21909: PUSH
21910: LD_INT 106
21912: PUSH
21913: LD_INT 108
21915: PUSH
21916: LD_INT 109
21918: PUSH
21919: LD_INT 112
21921: PUSH
21922: LD_INT 116
21924: PUSH
21925: LD_INT 117
21927: PUSH
21928: LD_INT 118
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: ST_TO_ADDR
21947: GO 24610
21949: LD_INT 6
21951: DOUBLE
21952: EQUAL
21953: IFTRUE 21957
21955: GO 22089
21957: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21958: LD_ADDR_VAR 0 2
21962: PUSH
21963: LD_INT 2
21965: PUSH
21966: LD_INT 4
21968: PUSH
21969: LD_INT 5
21971: PUSH
21972: LD_INT 6
21974: PUSH
21975: LD_INT 8
21977: PUSH
21978: LD_INT 11
21980: PUSH
21981: LD_INT 12
21983: PUSH
21984: LD_INT 15
21986: PUSH
21987: LD_INT 16
21989: PUSH
21990: LD_INT 20
21992: PUSH
21993: LD_INT 21
21995: PUSH
21996: LD_INT 22
21998: PUSH
21999: LD_INT 23
22001: PUSH
22002: LD_INT 25
22004: PUSH
22005: LD_INT 26
22007: PUSH
22008: LD_INT 30
22010: PUSH
22011: LD_INT 31
22013: PUSH
22014: LD_INT 32
22016: PUSH
22017: LD_INT 36
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 101
22043: PUSH
22044: LD_INT 102
22046: PUSH
22047: LD_INT 105
22049: PUSH
22050: LD_INT 106
22052: PUSH
22053: LD_INT 108
22055: PUSH
22056: LD_INT 109
22058: PUSH
22059: LD_INT 112
22061: PUSH
22062: LD_INT 116
22064: PUSH
22065: LD_INT 117
22067: PUSH
22068: LD_INT 118
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: ST_TO_ADDR
22087: GO 24610
22089: LD_INT 7
22091: DOUBLE
22092: EQUAL
22093: IFTRUE 22097
22095: GO 22209
22097: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22098: LD_ADDR_VAR 0 2
22102: PUSH
22103: LD_INT 2
22105: PUSH
22106: LD_INT 4
22108: PUSH
22109: LD_INT 5
22111: PUSH
22112: LD_INT 7
22114: PUSH
22115: LD_INT 11
22117: PUSH
22118: LD_INT 12
22120: PUSH
22121: LD_INT 15
22123: PUSH
22124: LD_INT 16
22126: PUSH
22127: LD_INT 20
22129: PUSH
22130: LD_INT 21
22132: PUSH
22133: LD_INT 22
22135: PUSH
22136: LD_INT 23
22138: PUSH
22139: LD_INT 25
22141: PUSH
22142: LD_INT 26
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 101
22163: PUSH
22164: LD_INT 102
22166: PUSH
22167: LD_INT 103
22169: PUSH
22170: LD_INT 105
22172: PUSH
22173: LD_INT 106
22175: PUSH
22176: LD_INT 108
22178: PUSH
22179: LD_INT 112
22181: PUSH
22182: LD_INT 116
22184: PUSH
22185: LD_INT 117
22187: PUSH
22188: LD_INT 118
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: ST_TO_ADDR
22207: GO 24610
22209: LD_INT 8
22211: DOUBLE
22212: EQUAL
22213: IFTRUE 22217
22215: GO 22357
22217: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22218: LD_ADDR_VAR 0 2
22222: PUSH
22223: LD_INT 2
22225: PUSH
22226: LD_INT 4
22228: PUSH
22229: LD_INT 5
22231: PUSH
22232: LD_INT 6
22234: PUSH
22235: LD_INT 7
22237: PUSH
22238: LD_INT 8
22240: PUSH
22241: LD_INT 11
22243: PUSH
22244: LD_INT 12
22246: PUSH
22247: LD_INT 15
22249: PUSH
22250: LD_INT 16
22252: PUSH
22253: LD_INT 20
22255: PUSH
22256: LD_INT 21
22258: PUSH
22259: LD_INT 22
22261: PUSH
22262: LD_INT 23
22264: PUSH
22265: LD_INT 25
22267: PUSH
22268: LD_INT 26
22270: PUSH
22271: LD_INT 30
22273: PUSH
22274: LD_INT 31
22276: PUSH
22277: LD_INT 32
22279: PUSH
22280: LD_INT 36
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 101
22307: PUSH
22308: LD_INT 102
22310: PUSH
22311: LD_INT 103
22313: PUSH
22314: LD_INT 105
22316: PUSH
22317: LD_INT 106
22319: PUSH
22320: LD_INT 108
22322: PUSH
22323: LD_INT 109
22325: PUSH
22326: LD_INT 112
22328: PUSH
22329: LD_INT 116
22331: PUSH
22332: LD_INT 117
22334: PUSH
22335: LD_INT 118
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: ST_TO_ADDR
22355: GO 24610
22357: LD_INT 9
22359: DOUBLE
22360: EQUAL
22361: IFTRUE 22365
22363: GO 22513
22365: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22366: LD_ADDR_VAR 0 2
22370: PUSH
22371: LD_INT 2
22373: PUSH
22374: LD_INT 4
22376: PUSH
22377: LD_INT 5
22379: PUSH
22380: LD_INT 6
22382: PUSH
22383: LD_INT 7
22385: PUSH
22386: LD_INT 8
22388: PUSH
22389: LD_INT 11
22391: PUSH
22392: LD_INT 12
22394: PUSH
22395: LD_INT 15
22397: PUSH
22398: LD_INT 16
22400: PUSH
22401: LD_INT 20
22403: PUSH
22404: LD_INT 21
22406: PUSH
22407: LD_INT 22
22409: PUSH
22410: LD_INT 23
22412: PUSH
22413: LD_INT 25
22415: PUSH
22416: LD_INT 26
22418: PUSH
22419: LD_INT 28
22421: PUSH
22422: LD_INT 30
22424: PUSH
22425: LD_INT 31
22427: PUSH
22428: LD_INT 32
22430: PUSH
22431: LD_INT 36
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 101
22459: PUSH
22460: LD_INT 102
22462: PUSH
22463: LD_INT 103
22465: PUSH
22466: LD_INT 105
22468: PUSH
22469: LD_INT 106
22471: PUSH
22472: LD_INT 108
22474: PUSH
22475: LD_INT 109
22477: PUSH
22478: LD_INT 112
22480: PUSH
22481: LD_INT 114
22483: PUSH
22484: LD_INT 116
22486: PUSH
22487: LD_INT 117
22489: PUSH
22490: LD_INT 118
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: ST_TO_ADDR
22511: GO 24610
22513: LD_INT 10
22515: DOUBLE
22516: EQUAL
22517: IFTRUE 22521
22519: GO 22717
22521: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22522: LD_ADDR_VAR 0 2
22526: PUSH
22527: LD_INT 2
22529: PUSH
22530: LD_INT 4
22532: PUSH
22533: LD_INT 5
22535: PUSH
22536: LD_INT 6
22538: PUSH
22539: LD_INT 7
22541: PUSH
22542: LD_INT 8
22544: PUSH
22545: LD_INT 9
22547: PUSH
22548: LD_INT 10
22550: PUSH
22551: LD_INT 11
22553: PUSH
22554: LD_INT 12
22556: PUSH
22557: LD_INT 13
22559: PUSH
22560: LD_INT 14
22562: PUSH
22563: LD_INT 15
22565: PUSH
22566: LD_INT 16
22568: PUSH
22569: LD_INT 17
22571: PUSH
22572: LD_INT 18
22574: PUSH
22575: LD_INT 19
22577: PUSH
22578: LD_INT 20
22580: PUSH
22581: LD_INT 21
22583: PUSH
22584: LD_INT 22
22586: PUSH
22587: LD_INT 23
22589: PUSH
22590: LD_INT 24
22592: PUSH
22593: LD_INT 25
22595: PUSH
22596: LD_INT 26
22598: PUSH
22599: LD_INT 28
22601: PUSH
22602: LD_INT 30
22604: PUSH
22605: LD_INT 31
22607: PUSH
22608: LD_INT 32
22610: PUSH
22611: LD_INT 36
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 101
22647: PUSH
22648: LD_INT 102
22650: PUSH
22651: LD_INT 103
22653: PUSH
22654: LD_INT 104
22656: PUSH
22657: LD_INT 105
22659: PUSH
22660: LD_INT 106
22662: PUSH
22663: LD_INT 107
22665: PUSH
22666: LD_INT 108
22668: PUSH
22669: LD_INT 109
22671: PUSH
22672: LD_INT 110
22674: PUSH
22675: LD_INT 111
22677: PUSH
22678: LD_INT 112
22680: PUSH
22681: LD_INT 114
22683: PUSH
22684: LD_INT 116
22686: PUSH
22687: LD_INT 117
22689: PUSH
22690: LD_INT 118
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: ST_TO_ADDR
22715: GO 24610
22717: LD_INT 11
22719: DOUBLE
22720: EQUAL
22721: IFTRUE 22725
22723: GO 22929
22725: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22726: LD_ADDR_VAR 0 2
22730: PUSH
22731: LD_INT 2
22733: PUSH
22734: LD_INT 3
22736: PUSH
22737: LD_INT 4
22739: PUSH
22740: LD_INT 5
22742: PUSH
22743: LD_INT 6
22745: PUSH
22746: LD_INT 7
22748: PUSH
22749: LD_INT 8
22751: PUSH
22752: LD_INT 9
22754: PUSH
22755: LD_INT 10
22757: PUSH
22758: LD_INT 11
22760: PUSH
22761: LD_INT 12
22763: PUSH
22764: LD_INT 13
22766: PUSH
22767: LD_INT 14
22769: PUSH
22770: LD_INT 15
22772: PUSH
22773: LD_INT 16
22775: PUSH
22776: LD_INT 17
22778: PUSH
22779: LD_INT 18
22781: PUSH
22782: LD_INT 19
22784: PUSH
22785: LD_INT 20
22787: PUSH
22788: LD_INT 21
22790: PUSH
22791: LD_INT 22
22793: PUSH
22794: LD_INT 23
22796: PUSH
22797: LD_INT 24
22799: PUSH
22800: LD_INT 25
22802: PUSH
22803: LD_INT 26
22805: PUSH
22806: LD_INT 28
22808: PUSH
22809: LD_INT 30
22811: PUSH
22812: LD_INT 31
22814: PUSH
22815: LD_INT 32
22817: PUSH
22818: LD_INT 34
22820: PUSH
22821: LD_INT 36
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 101
22859: PUSH
22860: LD_INT 102
22862: PUSH
22863: LD_INT 103
22865: PUSH
22866: LD_INT 104
22868: PUSH
22869: LD_INT 105
22871: PUSH
22872: LD_INT 106
22874: PUSH
22875: LD_INT 107
22877: PUSH
22878: LD_INT 108
22880: PUSH
22881: LD_INT 109
22883: PUSH
22884: LD_INT 110
22886: PUSH
22887: LD_INT 111
22889: PUSH
22890: LD_INT 112
22892: PUSH
22893: LD_INT 114
22895: PUSH
22896: LD_INT 116
22898: PUSH
22899: LD_INT 117
22901: PUSH
22902: LD_INT 118
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: ST_TO_ADDR
22927: GO 24610
22929: LD_INT 12
22931: DOUBLE
22932: EQUAL
22933: IFTRUE 22937
22935: GO 23157
22937: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22938: LD_ADDR_VAR 0 2
22942: PUSH
22943: LD_INT 1
22945: PUSH
22946: LD_INT 2
22948: PUSH
22949: LD_INT 3
22951: PUSH
22952: LD_INT 4
22954: PUSH
22955: LD_INT 5
22957: PUSH
22958: LD_INT 6
22960: PUSH
22961: LD_INT 7
22963: PUSH
22964: LD_INT 8
22966: PUSH
22967: LD_INT 9
22969: PUSH
22970: LD_INT 10
22972: PUSH
22973: LD_INT 11
22975: PUSH
22976: LD_INT 12
22978: PUSH
22979: LD_INT 13
22981: PUSH
22982: LD_INT 14
22984: PUSH
22985: LD_INT 15
22987: PUSH
22988: LD_INT 16
22990: PUSH
22991: LD_INT 17
22993: PUSH
22994: LD_INT 18
22996: PUSH
22997: LD_INT 19
22999: PUSH
23000: LD_INT 20
23002: PUSH
23003: LD_INT 21
23005: PUSH
23006: LD_INT 22
23008: PUSH
23009: LD_INT 23
23011: PUSH
23012: LD_INT 24
23014: PUSH
23015: LD_INT 25
23017: PUSH
23018: LD_INT 26
23020: PUSH
23021: LD_INT 27
23023: PUSH
23024: LD_INT 28
23026: PUSH
23027: LD_INT 30
23029: PUSH
23030: LD_INT 31
23032: PUSH
23033: LD_INT 32
23035: PUSH
23036: LD_INT 33
23038: PUSH
23039: LD_INT 34
23041: PUSH
23042: LD_INT 36
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 101
23083: PUSH
23084: LD_INT 102
23086: PUSH
23087: LD_INT 103
23089: PUSH
23090: LD_INT 104
23092: PUSH
23093: LD_INT 105
23095: PUSH
23096: LD_INT 106
23098: PUSH
23099: LD_INT 107
23101: PUSH
23102: LD_INT 108
23104: PUSH
23105: LD_INT 109
23107: PUSH
23108: LD_INT 110
23110: PUSH
23111: LD_INT 111
23113: PUSH
23114: LD_INT 112
23116: PUSH
23117: LD_INT 113
23119: PUSH
23120: LD_INT 114
23122: PUSH
23123: LD_INT 116
23125: PUSH
23126: LD_INT 117
23128: PUSH
23129: LD_INT 118
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: ST_TO_ADDR
23155: GO 24610
23157: LD_INT 13
23159: DOUBLE
23160: EQUAL
23161: IFTRUE 23165
23163: GO 23373
23165: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23166: LD_ADDR_VAR 0 2
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: LD_INT 2
23176: PUSH
23177: LD_INT 3
23179: PUSH
23180: LD_INT 4
23182: PUSH
23183: LD_INT 5
23185: PUSH
23186: LD_INT 8
23188: PUSH
23189: LD_INT 9
23191: PUSH
23192: LD_INT 10
23194: PUSH
23195: LD_INT 11
23197: PUSH
23198: LD_INT 12
23200: PUSH
23201: LD_INT 14
23203: PUSH
23204: LD_INT 15
23206: PUSH
23207: LD_INT 16
23209: PUSH
23210: LD_INT 17
23212: PUSH
23213: LD_INT 18
23215: PUSH
23216: LD_INT 19
23218: PUSH
23219: LD_INT 20
23221: PUSH
23222: LD_INT 21
23224: PUSH
23225: LD_INT 22
23227: PUSH
23228: LD_INT 23
23230: PUSH
23231: LD_INT 24
23233: PUSH
23234: LD_INT 25
23236: PUSH
23237: LD_INT 26
23239: PUSH
23240: LD_INT 27
23242: PUSH
23243: LD_INT 28
23245: PUSH
23246: LD_INT 30
23248: PUSH
23249: LD_INT 31
23251: PUSH
23252: LD_INT 32
23254: PUSH
23255: LD_INT 33
23257: PUSH
23258: LD_INT 34
23260: PUSH
23261: LD_INT 36
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 101
23299: PUSH
23300: LD_INT 102
23302: PUSH
23303: LD_INT 103
23305: PUSH
23306: LD_INT 104
23308: PUSH
23309: LD_INT 105
23311: PUSH
23312: LD_INT 106
23314: PUSH
23315: LD_INT 107
23317: PUSH
23318: LD_INT 108
23320: PUSH
23321: LD_INT 109
23323: PUSH
23324: LD_INT 110
23326: PUSH
23327: LD_INT 111
23329: PUSH
23330: LD_INT 112
23332: PUSH
23333: LD_INT 113
23335: PUSH
23336: LD_INT 114
23338: PUSH
23339: LD_INT 116
23341: PUSH
23342: LD_INT 117
23344: PUSH
23345: LD_INT 118
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: ST_TO_ADDR
23371: GO 24610
23373: LD_INT 14
23375: DOUBLE
23376: EQUAL
23377: IFTRUE 23381
23379: GO 23605
23381: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23382: LD_ADDR_VAR 0 2
23386: PUSH
23387: LD_INT 1
23389: PUSH
23390: LD_INT 2
23392: PUSH
23393: LD_INT 3
23395: PUSH
23396: LD_INT 4
23398: PUSH
23399: LD_INT 5
23401: PUSH
23402: LD_INT 6
23404: PUSH
23405: LD_INT 7
23407: PUSH
23408: LD_INT 8
23410: PUSH
23411: LD_INT 9
23413: PUSH
23414: LD_INT 10
23416: PUSH
23417: LD_INT 11
23419: PUSH
23420: LD_INT 12
23422: PUSH
23423: LD_INT 13
23425: PUSH
23426: LD_INT 14
23428: PUSH
23429: LD_INT 15
23431: PUSH
23432: LD_INT 16
23434: PUSH
23435: LD_INT 17
23437: PUSH
23438: LD_INT 18
23440: PUSH
23441: LD_INT 19
23443: PUSH
23444: LD_INT 20
23446: PUSH
23447: LD_INT 21
23449: PUSH
23450: LD_INT 22
23452: PUSH
23453: LD_INT 23
23455: PUSH
23456: LD_INT 24
23458: PUSH
23459: LD_INT 25
23461: PUSH
23462: LD_INT 26
23464: PUSH
23465: LD_INT 27
23467: PUSH
23468: LD_INT 28
23470: PUSH
23471: LD_INT 29
23473: PUSH
23474: LD_INT 30
23476: PUSH
23477: LD_INT 31
23479: PUSH
23480: LD_INT 32
23482: PUSH
23483: LD_INT 33
23485: PUSH
23486: LD_INT 34
23488: PUSH
23489: LD_INT 36
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 101
23531: PUSH
23532: LD_INT 102
23534: PUSH
23535: LD_INT 103
23537: PUSH
23538: LD_INT 104
23540: PUSH
23541: LD_INT 105
23543: PUSH
23544: LD_INT 106
23546: PUSH
23547: LD_INT 107
23549: PUSH
23550: LD_INT 108
23552: PUSH
23553: LD_INT 109
23555: PUSH
23556: LD_INT 110
23558: PUSH
23559: LD_INT 111
23561: PUSH
23562: LD_INT 112
23564: PUSH
23565: LD_INT 113
23567: PUSH
23568: LD_INT 114
23570: PUSH
23571: LD_INT 116
23573: PUSH
23574: LD_INT 117
23576: PUSH
23577: LD_INT 118
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: ST_TO_ADDR
23603: GO 24610
23605: LD_INT 15
23607: DOUBLE
23608: EQUAL
23609: IFTRUE 23613
23611: GO 23837
23613: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23614: LD_ADDR_VAR 0 2
23618: PUSH
23619: LD_INT 1
23621: PUSH
23622: LD_INT 2
23624: PUSH
23625: LD_INT 3
23627: PUSH
23628: LD_INT 4
23630: PUSH
23631: LD_INT 5
23633: PUSH
23634: LD_INT 6
23636: PUSH
23637: LD_INT 7
23639: PUSH
23640: LD_INT 8
23642: PUSH
23643: LD_INT 9
23645: PUSH
23646: LD_INT 10
23648: PUSH
23649: LD_INT 11
23651: PUSH
23652: LD_INT 12
23654: PUSH
23655: LD_INT 13
23657: PUSH
23658: LD_INT 14
23660: PUSH
23661: LD_INT 15
23663: PUSH
23664: LD_INT 16
23666: PUSH
23667: LD_INT 17
23669: PUSH
23670: LD_INT 18
23672: PUSH
23673: LD_INT 19
23675: PUSH
23676: LD_INT 20
23678: PUSH
23679: LD_INT 21
23681: PUSH
23682: LD_INT 22
23684: PUSH
23685: LD_INT 23
23687: PUSH
23688: LD_INT 24
23690: PUSH
23691: LD_INT 25
23693: PUSH
23694: LD_INT 26
23696: PUSH
23697: LD_INT 27
23699: PUSH
23700: LD_INT 28
23702: PUSH
23703: LD_INT 29
23705: PUSH
23706: LD_INT 30
23708: PUSH
23709: LD_INT 31
23711: PUSH
23712: LD_INT 32
23714: PUSH
23715: LD_INT 33
23717: PUSH
23718: LD_INT 34
23720: PUSH
23721: LD_INT 36
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 101
23763: PUSH
23764: LD_INT 102
23766: PUSH
23767: LD_INT 103
23769: PUSH
23770: LD_INT 104
23772: PUSH
23773: LD_INT 105
23775: PUSH
23776: LD_INT 106
23778: PUSH
23779: LD_INT 107
23781: PUSH
23782: LD_INT 108
23784: PUSH
23785: LD_INT 109
23787: PUSH
23788: LD_INT 110
23790: PUSH
23791: LD_INT 111
23793: PUSH
23794: LD_INT 112
23796: PUSH
23797: LD_INT 113
23799: PUSH
23800: LD_INT 114
23802: PUSH
23803: LD_INT 116
23805: PUSH
23806: LD_INT 117
23808: PUSH
23809: LD_INT 118
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: ST_TO_ADDR
23835: GO 24610
23837: LD_INT 16
23839: DOUBLE
23840: EQUAL
23841: IFTRUE 23845
23843: GO 23981
23845: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23846: LD_ADDR_VAR 0 2
23850: PUSH
23851: LD_INT 2
23853: PUSH
23854: LD_INT 4
23856: PUSH
23857: LD_INT 5
23859: PUSH
23860: LD_INT 7
23862: PUSH
23863: LD_INT 11
23865: PUSH
23866: LD_INT 12
23868: PUSH
23869: LD_INT 15
23871: PUSH
23872: LD_INT 16
23874: PUSH
23875: LD_INT 20
23877: PUSH
23878: LD_INT 21
23880: PUSH
23881: LD_INT 22
23883: PUSH
23884: LD_INT 23
23886: PUSH
23887: LD_INT 25
23889: PUSH
23890: LD_INT 26
23892: PUSH
23893: LD_INT 30
23895: PUSH
23896: LD_INT 31
23898: PUSH
23899: LD_INT 32
23901: PUSH
23902: LD_INT 33
23904: PUSH
23905: LD_INT 34
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 101
23931: PUSH
23932: LD_INT 102
23934: PUSH
23935: LD_INT 103
23937: PUSH
23938: LD_INT 106
23940: PUSH
23941: LD_INT 108
23943: PUSH
23944: LD_INT 112
23946: PUSH
23947: LD_INT 113
23949: PUSH
23950: LD_INT 114
23952: PUSH
23953: LD_INT 116
23955: PUSH
23956: LD_INT 117
23958: PUSH
23959: LD_INT 118
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: ST_TO_ADDR
23979: GO 24610
23981: LD_INT 17
23983: DOUBLE
23984: EQUAL
23985: IFTRUE 23989
23987: GO 24213
23989: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23990: LD_ADDR_VAR 0 2
23994: PUSH
23995: LD_INT 1
23997: PUSH
23998: LD_INT 2
24000: PUSH
24001: LD_INT 3
24003: PUSH
24004: LD_INT 4
24006: PUSH
24007: LD_INT 5
24009: PUSH
24010: LD_INT 6
24012: PUSH
24013: LD_INT 7
24015: PUSH
24016: LD_INT 8
24018: PUSH
24019: LD_INT 9
24021: PUSH
24022: LD_INT 10
24024: PUSH
24025: LD_INT 11
24027: PUSH
24028: LD_INT 12
24030: PUSH
24031: LD_INT 13
24033: PUSH
24034: LD_INT 14
24036: PUSH
24037: LD_INT 15
24039: PUSH
24040: LD_INT 16
24042: PUSH
24043: LD_INT 17
24045: PUSH
24046: LD_INT 18
24048: PUSH
24049: LD_INT 19
24051: PUSH
24052: LD_INT 20
24054: PUSH
24055: LD_INT 21
24057: PUSH
24058: LD_INT 22
24060: PUSH
24061: LD_INT 23
24063: PUSH
24064: LD_INT 24
24066: PUSH
24067: LD_INT 25
24069: PUSH
24070: LD_INT 26
24072: PUSH
24073: LD_INT 27
24075: PUSH
24076: LD_INT 28
24078: PUSH
24079: LD_INT 29
24081: PUSH
24082: LD_INT 30
24084: PUSH
24085: LD_INT 31
24087: PUSH
24088: LD_INT 32
24090: PUSH
24091: LD_INT 33
24093: PUSH
24094: LD_INT 34
24096: PUSH
24097: LD_INT 36
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 101
24139: PUSH
24140: LD_INT 102
24142: PUSH
24143: LD_INT 103
24145: PUSH
24146: LD_INT 104
24148: PUSH
24149: LD_INT 105
24151: PUSH
24152: LD_INT 106
24154: PUSH
24155: LD_INT 107
24157: PUSH
24158: LD_INT 108
24160: PUSH
24161: LD_INT 109
24163: PUSH
24164: LD_INT 110
24166: PUSH
24167: LD_INT 111
24169: PUSH
24170: LD_INT 112
24172: PUSH
24173: LD_INT 113
24175: PUSH
24176: LD_INT 114
24178: PUSH
24179: LD_INT 116
24181: PUSH
24182: LD_INT 117
24184: PUSH
24185: LD_INT 118
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: ST_TO_ADDR
24211: GO 24610
24213: LD_INT 18
24215: DOUBLE
24216: EQUAL
24217: IFTRUE 24221
24219: GO 24369
24221: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24222: LD_ADDR_VAR 0 2
24226: PUSH
24227: LD_INT 2
24229: PUSH
24230: LD_INT 4
24232: PUSH
24233: LD_INT 5
24235: PUSH
24236: LD_INT 7
24238: PUSH
24239: LD_INT 11
24241: PUSH
24242: LD_INT 12
24244: PUSH
24245: LD_INT 15
24247: PUSH
24248: LD_INT 16
24250: PUSH
24251: LD_INT 20
24253: PUSH
24254: LD_INT 21
24256: PUSH
24257: LD_INT 22
24259: PUSH
24260: LD_INT 23
24262: PUSH
24263: LD_INT 25
24265: PUSH
24266: LD_INT 26
24268: PUSH
24269: LD_INT 30
24271: PUSH
24272: LD_INT 31
24274: PUSH
24275: LD_INT 32
24277: PUSH
24278: LD_INT 33
24280: PUSH
24281: LD_INT 34
24283: PUSH
24284: LD_INT 35
24286: PUSH
24287: LD_INT 36
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 101
24315: PUSH
24316: LD_INT 102
24318: PUSH
24319: LD_INT 103
24321: PUSH
24322: LD_INT 106
24324: PUSH
24325: LD_INT 108
24327: PUSH
24328: LD_INT 112
24330: PUSH
24331: LD_INT 113
24333: PUSH
24334: LD_INT 114
24336: PUSH
24337: LD_INT 115
24339: PUSH
24340: LD_INT 116
24342: PUSH
24343: LD_INT 117
24345: PUSH
24346: LD_INT 118
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: ST_TO_ADDR
24367: GO 24610
24369: LD_INT 19
24371: DOUBLE
24372: EQUAL
24373: IFTRUE 24377
24375: GO 24609
24377: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24378: LD_ADDR_VAR 0 2
24382: PUSH
24383: LD_INT 1
24385: PUSH
24386: LD_INT 2
24388: PUSH
24389: LD_INT 3
24391: PUSH
24392: LD_INT 4
24394: PUSH
24395: LD_INT 5
24397: PUSH
24398: LD_INT 6
24400: PUSH
24401: LD_INT 7
24403: PUSH
24404: LD_INT 8
24406: PUSH
24407: LD_INT 9
24409: PUSH
24410: LD_INT 10
24412: PUSH
24413: LD_INT 11
24415: PUSH
24416: LD_INT 12
24418: PUSH
24419: LD_INT 13
24421: PUSH
24422: LD_INT 14
24424: PUSH
24425: LD_INT 15
24427: PUSH
24428: LD_INT 16
24430: PUSH
24431: LD_INT 17
24433: PUSH
24434: LD_INT 18
24436: PUSH
24437: LD_INT 19
24439: PUSH
24440: LD_INT 20
24442: PUSH
24443: LD_INT 21
24445: PUSH
24446: LD_INT 22
24448: PUSH
24449: LD_INT 23
24451: PUSH
24452: LD_INT 24
24454: PUSH
24455: LD_INT 25
24457: PUSH
24458: LD_INT 26
24460: PUSH
24461: LD_INT 27
24463: PUSH
24464: LD_INT 28
24466: PUSH
24467: LD_INT 29
24469: PUSH
24470: LD_INT 30
24472: PUSH
24473: LD_INT 31
24475: PUSH
24476: LD_INT 32
24478: PUSH
24479: LD_INT 33
24481: PUSH
24482: LD_INT 34
24484: PUSH
24485: LD_INT 35
24487: PUSH
24488: LD_INT 36
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 101
24531: PUSH
24532: LD_INT 102
24534: PUSH
24535: LD_INT 103
24537: PUSH
24538: LD_INT 104
24540: PUSH
24541: LD_INT 105
24543: PUSH
24544: LD_INT 106
24546: PUSH
24547: LD_INT 107
24549: PUSH
24550: LD_INT 108
24552: PUSH
24553: LD_INT 109
24555: PUSH
24556: LD_INT 110
24558: PUSH
24559: LD_INT 111
24561: PUSH
24562: LD_INT 112
24564: PUSH
24565: LD_INT 113
24567: PUSH
24568: LD_INT 114
24570: PUSH
24571: LD_INT 115
24573: PUSH
24574: LD_INT 116
24576: PUSH
24577: LD_INT 117
24579: PUSH
24580: LD_INT 118
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: ST_TO_ADDR
24607: GO 24610
24609: POP
// end else
24610: GO 24841
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24612: LD_ADDR_VAR 0 2
24616: PUSH
24617: LD_INT 1
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: LD_INT 3
24625: PUSH
24626: LD_INT 4
24628: PUSH
24629: LD_INT 5
24631: PUSH
24632: LD_INT 6
24634: PUSH
24635: LD_INT 7
24637: PUSH
24638: LD_INT 8
24640: PUSH
24641: LD_INT 9
24643: PUSH
24644: LD_INT 10
24646: PUSH
24647: LD_INT 11
24649: PUSH
24650: LD_INT 12
24652: PUSH
24653: LD_INT 13
24655: PUSH
24656: LD_INT 14
24658: PUSH
24659: LD_INT 15
24661: PUSH
24662: LD_INT 16
24664: PUSH
24665: LD_INT 17
24667: PUSH
24668: LD_INT 18
24670: PUSH
24671: LD_INT 19
24673: PUSH
24674: LD_INT 20
24676: PUSH
24677: LD_INT 21
24679: PUSH
24680: LD_INT 22
24682: PUSH
24683: LD_INT 23
24685: PUSH
24686: LD_INT 24
24688: PUSH
24689: LD_INT 25
24691: PUSH
24692: LD_INT 26
24694: PUSH
24695: LD_INT 27
24697: PUSH
24698: LD_INT 28
24700: PUSH
24701: LD_INT 29
24703: PUSH
24704: LD_INT 30
24706: PUSH
24707: LD_INT 31
24709: PUSH
24710: LD_INT 32
24712: PUSH
24713: LD_INT 33
24715: PUSH
24716: LD_INT 34
24718: PUSH
24719: LD_INT 35
24721: PUSH
24722: LD_INT 36
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 101
24765: PUSH
24766: LD_INT 102
24768: PUSH
24769: LD_INT 103
24771: PUSH
24772: LD_INT 104
24774: PUSH
24775: LD_INT 105
24777: PUSH
24778: LD_INT 106
24780: PUSH
24781: LD_INT 107
24783: PUSH
24784: LD_INT 108
24786: PUSH
24787: LD_INT 109
24789: PUSH
24790: LD_INT 110
24792: PUSH
24793: LD_INT 111
24795: PUSH
24796: LD_INT 112
24798: PUSH
24799: LD_INT 113
24801: PUSH
24802: LD_INT 114
24804: PUSH
24805: LD_INT 115
24807: PUSH
24808: LD_INT 116
24810: PUSH
24811: LD_INT 117
24813: PUSH
24814: LD_INT 118
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: ST_TO_ADDR
// if result then
24841: LD_VAR 0 2
24845: IFFALSE 25631
// begin normal :=  ;
24847: LD_ADDR_VAR 0 5
24851: PUSH
24852: LD_STRING 
24854: ST_TO_ADDR
// hardcore :=  ;
24855: LD_ADDR_VAR 0 6
24859: PUSH
24860: LD_STRING 
24862: ST_TO_ADDR
// active :=  ;
24863: LD_ADDR_VAR 0 7
24867: PUSH
24868: LD_STRING 
24870: ST_TO_ADDR
// for i = 1 to normalCounter do
24871: LD_ADDR_VAR 0 8
24875: PUSH
24876: DOUBLE
24877: LD_INT 1
24879: DEC
24880: ST_TO_ADDR
24881: LD_EXP 51
24885: PUSH
24886: FOR_TO
24887: IFFALSE 24988
// begin tmp := 0 ;
24889: LD_ADDR_VAR 0 3
24893: PUSH
24894: LD_STRING 0
24896: ST_TO_ADDR
// if result [ 1 ] then
24897: LD_VAR 0 2
24901: PUSH
24902: LD_INT 1
24904: ARRAY
24905: IFFALSE 24970
// if result [ 1 ] [ 1 ] = i then
24907: LD_VAR 0 2
24911: PUSH
24912: LD_INT 1
24914: ARRAY
24915: PUSH
24916: LD_INT 1
24918: ARRAY
24919: PUSH
24920: LD_VAR 0 8
24924: EQUAL
24925: IFFALSE 24970
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24927: LD_ADDR_VAR 0 2
24931: PUSH
24932: LD_VAR 0 2
24936: PPUSH
24937: LD_INT 1
24939: PPUSH
24940: LD_VAR 0 2
24944: PUSH
24945: LD_INT 1
24947: ARRAY
24948: PPUSH
24949: LD_INT 1
24951: PPUSH
24952: CALL_OW 3
24956: PPUSH
24957: CALL_OW 1
24961: ST_TO_ADDR
// tmp := 1 ;
24962: LD_ADDR_VAR 0 3
24966: PUSH
24967: LD_STRING 1
24969: ST_TO_ADDR
// end ; normal := normal & tmp ;
24970: LD_ADDR_VAR 0 5
24974: PUSH
24975: LD_VAR 0 5
24979: PUSH
24980: LD_VAR 0 3
24984: STR
24985: ST_TO_ADDR
// end ;
24986: GO 24886
24988: POP
24989: POP
// for i = 1 to hardcoreCounter do
24990: LD_ADDR_VAR 0 8
24994: PUSH
24995: DOUBLE
24996: LD_INT 1
24998: DEC
24999: ST_TO_ADDR
25000: LD_EXP 52
25004: PUSH
25005: FOR_TO
25006: IFFALSE 25111
// begin tmp := 0 ;
25008: LD_ADDR_VAR 0 3
25012: PUSH
25013: LD_STRING 0
25015: ST_TO_ADDR
// if result [ 2 ] then
25016: LD_VAR 0 2
25020: PUSH
25021: LD_INT 2
25023: ARRAY
25024: IFFALSE 25093
// if result [ 2 ] [ 1 ] = 100 + i then
25026: LD_VAR 0 2
25030: PUSH
25031: LD_INT 2
25033: ARRAY
25034: PUSH
25035: LD_INT 1
25037: ARRAY
25038: PUSH
25039: LD_INT 100
25041: PUSH
25042: LD_VAR 0 8
25046: PLUS
25047: EQUAL
25048: IFFALSE 25093
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25050: LD_ADDR_VAR 0 2
25054: PUSH
25055: LD_VAR 0 2
25059: PPUSH
25060: LD_INT 2
25062: PPUSH
25063: LD_VAR 0 2
25067: PUSH
25068: LD_INT 2
25070: ARRAY
25071: PPUSH
25072: LD_INT 1
25074: PPUSH
25075: CALL_OW 3
25079: PPUSH
25080: CALL_OW 1
25084: ST_TO_ADDR
// tmp := 1 ;
25085: LD_ADDR_VAR 0 3
25089: PUSH
25090: LD_STRING 1
25092: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25093: LD_ADDR_VAR 0 6
25097: PUSH
25098: LD_VAR 0 6
25102: PUSH
25103: LD_VAR 0 3
25107: STR
25108: ST_TO_ADDR
// end ;
25109: GO 25005
25111: POP
25112: POP
// if isGameLoad then
25113: LD_VAR 0 1
25117: IFFALSE 25592
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25119: LD_ADDR_VAR 0 4
25123: PUSH
25124: LD_EXP 55
25128: PUSH
25129: LD_EXP 54
25133: PUSH
25134: LD_EXP 56
25138: PUSH
25139: LD_EXP 53
25143: PUSH
25144: LD_EXP 57
25148: PUSH
25149: LD_EXP 58
25153: PUSH
25154: LD_EXP 59
25158: PUSH
25159: LD_EXP 60
25163: PUSH
25164: LD_EXP 61
25168: PUSH
25169: LD_EXP 62
25173: PUSH
25174: LD_EXP 63
25178: PUSH
25179: LD_EXP 64
25183: PUSH
25184: LD_EXP 65
25188: PUSH
25189: LD_EXP 66
25193: PUSH
25194: LD_EXP 74
25198: PUSH
25199: LD_EXP 75
25203: PUSH
25204: LD_EXP 76
25208: PUSH
25209: LD_EXP 77
25213: PUSH
25214: LD_EXP 79
25218: PUSH
25219: LD_EXP 80
25223: PUSH
25224: LD_EXP 81
25228: PUSH
25229: LD_EXP 84
25233: PUSH
25234: LD_EXP 86
25238: PUSH
25239: LD_EXP 87
25243: PUSH
25244: LD_EXP 88
25248: PUSH
25249: LD_EXP 90
25253: PUSH
25254: LD_EXP 91
25258: PUSH
25259: LD_EXP 94
25263: PUSH
25264: LD_EXP 95
25268: PUSH
25269: LD_EXP 96
25273: PUSH
25274: LD_EXP 97
25278: PUSH
25279: LD_EXP 98
25283: PUSH
25284: LD_EXP 99
25288: PUSH
25289: LD_EXP 100
25293: PUSH
25294: LD_EXP 101
25298: PUSH
25299: LD_EXP 102
25303: PUSH
25304: LD_EXP 67
25308: PUSH
25309: LD_EXP 68
25313: PUSH
25314: LD_EXP 71
25318: PUSH
25319: LD_EXP 72
25323: PUSH
25324: LD_EXP 73
25328: PUSH
25329: LD_EXP 69
25333: PUSH
25334: LD_EXP 70
25338: PUSH
25339: LD_EXP 78
25343: PUSH
25344: LD_EXP 82
25348: PUSH
25349: LD_EXP 83
25353: PUSH
25354: LD_EXP 85
25358: PUSH
25359: LD_EXP 89
25363: PUSH
25364: LD_EXP 92
25368: PUSH
25369: LD_EXP 93
25373: PUSH
25374: LD_EXP 103
25378: PUSH
25379: LD_EXP 104
25383: PUSH
25384: LD_EXP 105
25388: PUSH
25389: LD_EXP 106
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: ST_TO_ADDR
// tmp :=  ;
25450: LD_ADDR_VAR 0 3
25454: PUSH
25455: LD_STRING 
25457: ST_TO_ADDR
// for i = 1 to normalCounter do
25458: LD_ADDR_VAR 0 8
25462: PUSH
25463: DOUBLE
25464: LD_INT 1
25466: DEC
25467: ST_TO_ADDR
25468: LD_EXP 51
25472: PUSH
25473: FOR_TO
25474: IFFALSE 25510
// begin if flags [ i ] then
25476: LD_VAR 0 4
25480: PUSH
25481: LD_VAR 0 8
25485: ARRAY
25486: IFFALSE 25508
// tmp := tmp & i & ; ;
25488: LD_ADDR_VAR 0 3
25492: PUSH
25493: LD_VAR 0 3
25497: PUSH
25498: LD_VAR 0 8
25502: STR
25503: PUSH
25504: LD_STRING ;
25506: STR
25507: ST_TO_ADDR
// end ;
25508: GO 25473
25510: POP
25511: POP
// for i = 1 to hardcoreCounter do
25512: LD_ADDR_VAR 0 8
25516: PUSH
25517: DOUBLE
25518: LD_INT 1
25520: DEC
25521: ST_TO_ADDR
25522: LD_EXP 52
25526: PUSH
25527: FOR_TO
25528: IFFALSE 25574
// begin if flags [ normalCounter + i ] then
25530: LD_VAR 0 4
25534: PUSH
25535: LD_EXP 51
25539: PUSH
25540: LD_VAR 0 8
25544: PLUS
25545: ARRAY
25546: IFFALSE 25572
// tmp := tmp & ( 100 + i ) & ; ;
25548: LD_ADDR_VAR 0 3
25552: PUSH
25553: LD_VAR 0 3
25557: PUSH
25558: LD_INT 100
25560: PUSH
25561: LD_VAR 0 8
25565: PLUS
25566: STR
25567: PUSH
25568: LD_STRING ;
25570: STR
25571: ST_TO_ADDR
// end ;
25572: GO 25527
25574: POP
25575: POP
// if tmp then
25576: LD_VAR 0 3
25580: IFFALSE 25592
// active := tmp ;
25582: LD_ADDR_VAR 0 7
25586: PUSH
25587: LD_VAR 0 3
25591: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25592: LD_STRING getStreamItemsFromMission("
25594: PUSH
25595: LD_VAR 0 5
25599: STR
25600: PUSH
25601: LD_STRING ","
25603: STR
25604: PUSH
25605: LD_VAR 0 6
25609: STR
25610: PUSH
25611: LD_STRING ","
25613: STR
25614: PUSH
25615: LD_VAR 0 7
25619: STR
25620: PUSH
25621: LD_STRING ")
25623: STR
25624: PPUSH
25625: CALL_OW 559
// end else
25629: GO 25638
// ToLua ( getStreamItemsFromMission("","","") ) ;
25631: LD_STRING getStreamItemsFromMission("","","")
25633: PPUSH
25634: CALL_OW 559
// end ;
25638: LD_VAR 0 2
25642: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25643: LD_EXP 50
25647: PUSH
25648: LD_EXP 55
25652: AND
25653: IFFALSE 25777
25655: GO 25657
25657: DISABLE
25658: LD_INT 0
25660: PPUSH
25661: PPUSH
// begin enable ;
25662: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25663: LD_ADDR_VAR 0 2
25667: PUSH
25668: LD_INT 22
25670: PUSH
25671: LD_OWVAR 2
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 2
25682: PUSH
25683: LD_INT 34
25685: PUSH
25686: LD_INT 7
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 34
25695: PUSH
25696: LD_INT 45
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 34
25705: PUSH
25706: LD_INT 28
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 34
25715: PUSH
25716: LD_INT 47
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PPUSH
25734: CALL_OW 69
25738: ST_TO_ADDR
// if not tmp then
25739: LD_VAR 0 2
25743: NOT
25744: IFFALSE 25748
// exit ;
25746: GO 25777
// for i in tmp do
25748: LD_ADDR_VAR 0 1
25752: PUSH
25753: LD_VAR 0 2
25757: PUSH
25758: FOR_IN
25759: IFFALSE 25775
// begin SetLives ( i , 0 ) ;
25761: LD_VAR 0 1
25765: PPUSH
25766: LD_INT 0
25768: PPUSH
25769: CALL_OW 234
// end ;
25773: GO 25758
25775: POP
25776: POP
// end ;
25777: PPOPN 2
25779: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25780: LD_EXP 50
25784: PUSH
25785: LD_EXP 56
25789: AND
25790: IFFALSE 25874
25792: GO 25794
25794: DISABLE
25795: LD_INT 0
25797: PPUSH
25798: PPUSH
// begin enable ;
25799: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25800: LD_ADDR_VAR 0 2
25804: PUSH
25805: LD_INT 22
25807: PUSH
25808: LD_OWVAR 2
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 32
25819: PUSH
25820: LD_INT 3
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PPUSH
25831: CALL_OW 69
25835: ST_TO_ADDR
// if not tmp then
25836: LD_VAR 0 2
25840: NOT
25841: IFFALSE 25845
// exit ;
25843: GO 25874
// for i in tmp do
25845: LD_ADDR_VAR 0 1
25849: PUSH
25850: LD_VAR 0 2
25854: PUSH
25855: FOR_IN
25856: IFFALSE 25872
// begin SetLives ( i , 0 ) ;
25858: LD_VAR 0 1
25862: PPUSH
25863: LD_INT 0
25865: PPUSH
25866: CALL_OW 234
// end ;
25870: GO 25855
25872: POP
25873: POP
// end ;
25874: PPOPN 2
25876: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25877: LD_EXP 50
25881: PUSH
25882: LD_EXP 53
25886: AND
25887: IFFALSE 25980
25889: GO 25891
25891: DISABLE
25892: LD_INT 0
25894: PPUSH
// begin enable ;
25895: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25896: LD_ADDR_VAR 0 1
25900: PUSH
25901: LD_INT 22
25903: PUSH
25904: LD_OWVAR 2
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 2
25915: PUSH
25916: LD_INT 25
25918: PUSH
25919: LD_INT 5
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 25
25928: PUSH
25929: LD_INT 9
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 25
25938: PUSH
25939: LD_INT 8
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PPUSH
25956: CALL_OW 69
25960: PUSH
25961: FOR_IN
25962: IFFALSE 25978
// begin SetClass ( i , 1 ) ;
25964: LD_VAR 0 1
25968: PPUSH
25969: LD_INT 1
25971: PPUSH
25972: CALL_OW 336
// end ;
25976: GO 25961
25978: POP
25979: POP
// end ;
25980: PPOPN 1
25982: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25983: LD_EXP 50
25987: PUSH
25988: LD_EXP 54
25992: AND
25993: PUSH
25994: LD_OWVAR 65
25998: PUSH
25999: LD_INT 7
26001: LESS
26002: AND
26003: IFFALSE 26017
26005: GO 26007
26007: DISABLE
// begin enable ;
26008: ENABLE
// game_speed := 7 ;
26009: LD_ADDR_OWVAR 65
26013: PUSH
26014: LD_INT 7
26016: ST_TO_ADDR
// end ;
26017: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26018: LD_EXP 50
26022: PUSH
26023: LD_EXP 57
26027: AND
26028: IFFALSE 26230
26030: GO 26032
26032: DISABLE
26033: LD_INT 0
26035: PPUSH
26036: PPUSH
26037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26038: LD_ADDR_VAR 0 3
26042: PUSH
26043: LD_INT 81
26045: PUSH
26046: LD_OWVAR 2
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 21
26057: PUSH
26058: LD_INT 1
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PPUSH
26069: CALL_OW 69
26073: ST_TO_ADDR
// if not tmp then
26074: LD_VAR 0 3
26078: NOT
26079: IFFALSE 26083
// exit ;
26081: GO 26230
// if tmp > 5 then
26083: LD_VAR 0 3
26087: PUSH
26088: LD_INT 5
26090: GREATER
26091: IFFALSE 26103
// k := 5 else
26093: LD_ADDR_VAR 0 2
26097: PUSH
26098: LD_INT 5
26100: ST_TO_ADDR
26101: GO 26113
// k := tmp ;
26103: LD_ADDR_VAR 0 2
26107: PUSH
26108: LD_VAR 0 3
26112: ST_TO_ADDR
// for i := 1 to k do
26113: LD_ADDR_VAR 0 1
26117: PUSH
26118: DOUBLE
26119: LD_INT 1
26121: DEC
26122: ST_TO_ADDR
26123: LD_VAR 0 2
26127: PUSH
26128: FOR_TO
26129: IFFALSE 26228
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26131: LD_VAR 0 3
26135: PUSH
26136: LD_VAR 0 1
26140: ARRAY
26141: PPUSH
26142: LD_VAR 0 1
26146: PUSH
26147: LD_INT 4
26149: MOD
26150: PUSH
26151: LD_INT 1
26153: PLUS
26154: PPUSH
26155: CALL_OW 259
26159: PUSH
26160: LD_INT 10
26162: LESS
26163: IFFALSE 26226
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26165: LD_VAR 0 3
26169: PUSH
26170: LD_VAR 0 1
26174: ARRAY
26175: PPUSH
26176: LD_VAR 0 1
26180: PUSH
26181: LD_INT 4
26183: MOD
26184: PUSH
26185: LD_INT 1
26187: PLUS
26188: PPUSH
26189: LD_VAR 0 3
26193: PUSH
26194: LD_VAR 0 1
26198: ARRAY
26199: PPUSH
26200: LD_VAR 0 1
26204: PUSH
26205: LD_INT 4
26207: MOD
26208: PUSH
26209: LD_INT 1
26211: PLUS
26212: PPUSH
26213: CALL_OW 259
26217: PUSH
26218: LD_INT 1
26220: PLUS
26221: PPUSH
26222: CALL_OW 237
26226: GO 26128
26228: POP
26229: POP
// end ;
26230: PPOPN 3
26232: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26233: LD_EXP 50
26237: PUSH
26238: LD_EXP 58
26242: AND
26243: IFFALSE 26263
26245: GO 26247
26247: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26248: LD_INT 4
26250: PPUSH
26251: LD_OWVAR 2
26255: PPUSH
26256: LD_INT 0
26258: PPUSH
26259: CALL_OW 324
26263: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26264: LD_EXP 50
26268: PUSH
26269: LD_EXP 87
26273: AND
26274: IFFALSE 26294
26276: GO 26278
26278: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26279: LD_INT 19
26281: PPUSH
26282: LD_OWVAR 2
26286: PPUSH
26287: LD_INT 0
26289: PPUSH
26290: CALL_OW 324
26294: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26295: LD_EXP 50
26299: PUSH
26300: LD_EXP 59
26304: AND
26305: IFFALSE 26407
26307: GO 26309
26309: DISABLE
26310: LD_INT 0
26312: PPUSH
26313: PPUSH
// begin enable ;
26314: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26315: LD_ADDR_VAR 0 2
26319: PUSH
26320: LD_INT 22
26322: PUSH
26323: LD_OWVAR 2
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 2
26334: PUSH
26335: LD_INT 34
26337: PUSH
26338: LD_INT 11
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 34
26347: PUSH
26348: LD_INT 30
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: LIST
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PPUSH
26364: CALL_OW 69
26368: ST_TO_ADDR
// if not tmp then
26369: LD_VAR 0 2
26373: NOT
26374: IFFALSE 26378
// exit ;
26376: GO 26407
// for i in tmp do
26378: LD_ADDR_VAR 0 1
26382: PUSH
26383: LD_VAR 0 2
26387: PUSH
26388: FOR_IN
26389: IFFALSE 26405
// begin SetLives ( i , 0 ) ;
26391: LD_VAR 0 1
26395: PPUSH
26396: LD_INT 0
26398: PPUSH
26399: CALL_OW 234
// end ;
26403: GO 26388
26405: POP
26406: POP
// end ;
26407: PPOPN 2
26409: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26410: LD_EXP 50
26414: PUSH
26415: LD_EXP 60
26419: AND
26420: IFFALSE 26440
26422: GO 26424
26424: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26425: LD_INT 32
26427: PPUSH
26428: LD_OWVAR 2
26432: PPUSH
26433: LD_INT 0
26435: PPUSH
26436: CALL_OW 324
26440: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26441: LD_EXP 50
26445: PUSH
26446: LD_EXP 61
26450: AND
26451: IFFALSE 26632
26453: GO 26455
26455: DISABLE
26456: LD_INT 0
26458: PPUSH
26459: PPUSH
26460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26461: LD_ADDR_VAR 0 2
26465: PUSH
26466: LD_INT 22
26468: PUSH
26469: LD_OWVAR 2
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 33
26480: PUSH
26481: LD_INT 3
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PPUSH
26492: CALL_OW 69
26496: ST_TO_ADDR
// if not tmp then
26497: LD_VAR 0 2
26501: NOT
26502: IFFALSE 26506
// exit ;
26504: GO 26632
// side := 0 ;
26506: LD_ADDR_VAR 0 3
26510: PUSH
26511: LD_INT 0
26513: ST_TO_ADDR
// for i := 1 to 8 do
26514: LD_ADDR_VAR 0 1
26518: PUSH
26519: DOUBLE
26520: LD_INT 1
26522: DEC
26523: ST_TO_ADDR
26524: LD_INT 8
26526: PUSH
26527: FOR_TO
26528: IFFALSE 26576
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26530: LD_OWVAR 2
26534: PUSH
26535: LD_VAR 0 1
26539: NONEQUAL
26540: PUSH
26541: LD_OWVAR 2
26545: PPUSH
26546: LD_VAR 0 1
26550: PPUSH
26551: CALL_OW 81
26555: PUSH
26556: LD_INT 2
26558: EQUAL
26559: AND
26560: IFFALSE 26574
// begin side := i ;
26562: LD_ADDR_VAR 0 3
26566: PUSH
26567: LD_VAR 0 1
26571: ST_TO_ADDR
// break ;
26572: GO 26576
// end ;
26574: GO 26527
26576: POP
26577: POP
// if not side then
26578: LD_VAR 0 3
26582: NOT
26583: IFFALSE 26587
// exit ;
26585: GO 26632
// for i := 1 to tmp do
26587: LD_ADDR_VAR 0 1
26591: PUSH
26592: DOUBLE
26593: LD_INT 1
26595: DEC
26596: ST_TO_ADDR
26597: LD_VAR 0 2
26601: PUSH
26602: FOR_TO
26603: IFFALSE 26630
// if Prob ( 60 ) then
26605: LD_INT 60
26607: PPUSH
26608: CALL_OW 13
26612: IFFALSE 26628
// SetSide ( i , side ) ;
26614: LD_VAR 0 1
26618: PPUSH
26619: LD_VAR 0 3
26623: PPUSH
26624: CALL_OW 235
26628: GO 26602
26630: POP
26631: POP
// end ;
26632: PPOPN 3
26634: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26635: LD_EXP 50
26639: PUSH
26640: LD_EXP 63
26644: AND
26645: IFFALSE 26764
26647: GO 26649
26649: DISABLE
26650: LD_INT 0
26652: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26653: LD_ADDR_VAR 0 1
26657: PUSH
26658: LD_INT 22
26660: PUSH
26661: LD_OWVAR 2
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 21
26672: PUSH
26673: LD_INT 1
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 3
26682: PUSH
26683: LD_INT 23
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: LIST
26701: PPUSH
26702: CALL_OW 69
26706: PUSH
26707: FOR_IN
26708: IFFALSE 26762
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26710: LD_VAR 0 1
26714: PPUSH
26715: CALL_OW 257
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: LD_INT 2
26725: PUSH
26726: LD_INT 3
26728: PUSH
26729: LD_INT 4
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: IN
26738: IFFALSE 26760
// SetClass ( un , rand ( 1 , 4 ) ) ;
26740: LD_VAR 0 1
26744: PPUSH
26745: LD_INT 1
26747: PPUSH
26748: LD_INT 4
26750: PPUSH
26751: CALL_OW 12
26755: PPUSH
26756: CALL_OW 336
26760: GO 26707
26762: POP
26763: POP
// end ;
26764: PPOPN 1
26766: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26767: LD_EXP 50
26771: PUSH
26772: LD_EXP 62
26776: AND
26777: IFFALSE 26856
26779: GO 26781
26781: DISABLE
26782: LD_INT 0
26784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26785: LD_ADDR_VAR 0 1
26789: PUSH
26790: LD_INT 22
26792: PUSH
26793: LD_OWVAR 2
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 21
26804: PUSH
26805: LD_INT 3
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PPUSH
26816: CALL_OW 69
26820: ST_TO_ADDR
// if not tmp then
26821: LD_VAR 0 1
26825: NOT
26826: IFFALSE 26830
// exit ;
26828: GO 26856
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26830: LD_VAR 0 1
26834: PUSH
26835: LD_INT 1
26837: PPUSH
26838: LD_VAR 0 1
26842: PPUSH
26843: CALL_OW 12
26847: ARRAY
26848: PPUSH
26849: LD_INT 100
26851: PPUSH
26852: CALL_OW 234
// end ;
26856: PPOPN 1
26858: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26859: LD_EXP 50
26863: PUSH
26864: LD_EXP 64
26868: AND
26869: IFFALSE 26967
26871: GO 26873
26873: DISABLE
26874: LD_INT 0
26876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26877: LD_ADDR_VAR 0 1
26881: PUSH
26882: LD_INT 22
26884: PUSH
26885: LD_OWVAR 2
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 21
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PPUSH
26908: CALL_OW 69
26912: ST_TO_ADDR
// if not tmp then
26913: LD_VAR 0 1
26917: NOT
26918: IFFALSE 26922
// exit ;
26920: GO 26967
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26922: LD_VAR 0 1
26926: PUSH
26927: LD_INT 1
26929: PPUSH
26930: LD_VAR 0 1
26934: PPUSH
26935: CALL_OW 12
26939: ARRAY
26940: PPUSH
26941: LD_INT 1
26943: PPUSH
26944: LD_INT 4
26946: PPUSH
26947: CALL_OW 12
26951: PPUSH
26952: LD_INT 3000
26954: PPUSH
26955: LD_INT 9000
26957: PPUSH
26958: CALL_OW 12
26962: PPUSH
26963: CALL_OW 492
// end ;
26967: PPOPN 1
26969: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26970: LD_EXP 50
26974: PUSH
26975: LD_EXP 65
26979: AND
26980: IFFALSE 27000
26982: GO 26984
26984: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26985: LD_INT 1
26987: PPUSH
26988: LD_OWVAR 2
26992: PPUSH
26993: LD_INT 0
26995: PPUSH
26996: CALL_OW 324
27000: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27001: LD_EXP 50
27005: PUSH
27006: LD_EXP 66
27010: AND
27011: IFFALSE 27094
27013: GO 27015
27015: DISABLE
27016: LD_INT 0
27018: PPUSH
27019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27020: LD_ADDR_VAR 0 2
27024: PUSH
27025: LD_INT 22
27027: PUSH
27028: LD_OWVAR 2
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 21
27039: PUSH
27040: LD_INT 3
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PPUSH
27051: CALL_OW 69
27055: ST_TO_ADDR
// if not tmp then
27056: LD_VAR 0 2
27060: NOT
27061: IFFALSE 27065
// exit ;
27063: GO 27094
// for i in tmp do
27065: LD_ADDR_VAR 0 1
27069: PUSH
27070: LD_VAR 0 2
27074: PUSH
27075: FOR_IN
27076: IFFALSE 27092
// SetBLevel ( i , 10 ) ;
27078: LD_VAR 0 1
27082: PPUSH
27083: LD_INT 10
27085: PPUSH
27086: CALL_OW 241
27090: GO 27075
27092: POP
27093: POP
// end ;
27094: PPOPN 2
27096: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27097: LD_EXP 50
27101: PUSH
27102: LD_EXP 67
27106: AND
27107: IFFALSE 27218
27109: GO 27111
27111: DISABLE
27112: LD_INT 0
27114: PPUSH
27115: PPUSH
27116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27117: LD_ADDR_VAR 0 3
27121: PUSH
27122: LD_INT 22
27124: PUSH
27125: LD_OWVAR 2
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 25
27136: PUSH
27137: LD_INT 1
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PPUSH
27148: CALL_OW 69
27152: ST_TO_ADDR
// if not tmp then
27153: LD_VAR 0 3
27157: NOT
27158: IFFALSE 27162
// exit ;
27160: GO 27218
// un := tmp [ rand ( 1 , tmp ) ] ;
27162: LD_ADDR_VAR 0 2
27166: PUSH
27167: LD_VAR 0 3
27171: PUSH
27172: LD_INT 1
27174: PPUSH
27175: LD_VAR 0 3
27179: PPUSH
27180: CALL_OW 12
27184: ARRAY
27185: ST_TO_ADDR
// if Crawls ( un ) then
27186: LD_VAR 0 2
27190: PPUSH
27191: CALL_OW 318
27195: IFFALSE 27206
// ComWalk ( un ) ;
27197: LD_VAR 0 2
27201: PPUSH
27202: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27206: LD_VAR 0 2
27210: PPUSH
27211: LD_INT 5
27213: PPUSH
27214: CALL_OW 336
// end ;
27218: PPOPN 3
27220: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27221: LD_EXP 50
27225: PUSH
27226: LD_EXP 68
27230: AND
27231: PUSH
27232: LD_OWVAR 67
27236: PUSH
27237: LD_INT 4
27239: LESS
27240: AND
27241: IFFALSE 27260
27243: GO 27245
27245: DISABLE
// begin Difficulty := Difficulty + 1 ;
27246: LD_ADDR_OWVAR 67
27250: PUSH
27251: LD_OWVAR 67
27255: PUSH
27256: LD_INT 1
27258: PLUS
27259: ST_TO_ADDR
// end ;
27260: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27261: LD_EXP 50
27265: PUSH
27266: LD_EXP 69
27270: AND
27271: IFFALSE 27374
27273: GO 27275
27275: DISABLE
27276: LD_INT 0
27278: PPUSH
// begin for i := 1 to 5 do
27279: LD_ADDR_VAR 0 1
27283: PUSH
27284: DOUBLE
27285: LD_INT 1
27287: DEC
27288: ST_TO_ADDR
27289: LD_INT 5
27291: PUSH
27292: FOR_TO
27293: IFFALSE 27372
// begin uc_nation := nation_nature ;
27295: LD_ADDR_OWVAR 21
27299: PUSH
27300: LD_INT 0
27302: ST_TO_ADDR
// uc_side := 0 ;
27303: LD_ADDR_OWVAR 20
27307: PUSH
27308: LD_INT 0
27310: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27311: LD_ADDR_OWVAR 29
27315: PUSH
27316: LD_INT 12
27318: PUSH
27319: LD_INT 12
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: ST_TO_ADDR
// hc_agressivity := 20 ;
27326: LD_ADDR_OWVAR 35
27330: PUSH
27331: LD_INT 20
27333: ST_TO_ADDR
// hc_class := class_tiger ;
27334: LD_ADDR_OWVAR 28
27338: PUSH
27339: LD_INT 14
27341: ST_TO_ADDR
// hc_gallery :=  ;
27342: LD_ADDR_OWVAR 33
27346: PUSH
27347: LD_STRING 
27349: ST_TO_ADDR
// hc_name :=  ;
27350: LD_ADDR_OWVAR 26
27354: PUSH
27355: LD_STRING 
27357: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27358: CALL_OW 44
27362: PPUSH
27363: LD_INT 0
27365: PPUSH
27366: CALL_OW 51
// end ;
27370: GO 27292
27372: POP
27373: POP
// end ;
27374: PPOPN 1
27376: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27377: LD_EXP 50
27381: PUSH
27382: LD_EXP 70
27386: AND
27387: IFFALSE 27396
27389: GO 27391
27391: DISABLE
// StreamSibBomb ;
27392: CALL 27397 0 0
27396: END
// export function StreamSibBomb ; var i , x , y ; begin
27397: LD_INT 0
27399: PPUSH
27400: PPUSH
27401: PPUSH
27402: PPUSH
// result := false ;
27403: LD_ADDR_VAR 0 1
27407: PUSH
27408: LD_INT 0
27410: ST_TO_ADDR
// for i := 1 to 16 do
27411: LD_ADDR_VAR 0 2
27415: PUSH
27416: DOUBLE
27417: LD_INT 1
27419: DEC
27420: ST_TO_ADDR
27421: LD_INT 16
27423: PUSH
27424: FOR_TO
27425: IFFALSE 27624
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27427: LD_ADDR_VAR 0 3
27431: PUSH
27432: LD_INT 10
27434: PUSH
27435: LD_INT 20
27437: PUSH
27438: LD_INT 30
27440: PUSH
27441: LD_INT 40
27443: PUSH
27444: LD_INT 50
27446: PUSH
27447: LD_INT 60
27449: PUSH
27450: LD_INT 70
27452: PUSH
27453: LD_INT 80
27455: PUSH
27456: LD_INT 90
27458: PUSH
27459: LD_INT 100
27461: PUSH
27462: LD_INT 110
27464: PUSH
27465: LD_INT 120
27467: PUSH
27468: LD_INT 130
27470: PUSH
27471: LD_INT 140
27473: PUSH
27474: LD_INT 150
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 1
27496: PPUSH
27497: LD_INT 15
27499: PPUSH
27500: CALL_OW 12
27504: ARRAY
27505: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27506: LD_ADDR_VAR 0 4
27510: PUSH
27511: LD_INT 10
27513: PUSH
27514: LD_INT 20
27516: PUSH
27517: LD_INT 30
27519: PUSH
27520: LD_INT 40
27522: PUSH
27523: LD_INT 50
27525: PUSH
27526: LD_INT 60
27528: PUSH
27529: LD_INT 70
27531: PUSH
27532: LD_INT 80
27534: PUSH
27535: LD_INT 90
27537: PUSH
27538: LD_INT 100
27540: PUSH
27541: LD_INT 110
27543: PUSH
27544: LD_INT 120
27546: PUSH
27547: LD_INT 130
27549: PUSH
27550: LD_INT 140
27552: PUSH
27553: LD_INT 150
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 1
27575: PPUSH
27576: LD_INT 15
27578: PPUSH
27579: CALL_OW 12
27583: ARRAY
27584: ST_TO_ADDR
// if ValidHex ( x , y ) then
27585: LD_VAR 0 3
27589: PPUSH
27590: LD_VAR 0 4
27594: PPUSH
27595: CALL_OW 488
27599: IFFALSE 27622
// begin result := [ x , y ] ;
27601: LD_ADDR_VAR 0 1
27605: PUSH
27606: LD_VAR 0 3
27610: PUSH
27611: LD_VAR 0 4
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: ST_TO_ADDR
// break ;
27620: GO 27624
// end ; end ;
27622: GO 27424
27624: POP
27625: POP
// if result then
27626: LD_VAR 0 1
27630: IFFALSE 27690
// begin ToLua ( playSibBomb() ) ;
27632: LD_STRING playSibBomb()
27634: PPUSH
27635: CALL_OW 559
// wait ( 0 0$14 ) ;
27639: LD_INT 490
27641: PPUSH
27642: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27646: LD_VAR 0 1
27650: PUSH
27651: LD_INT 1
27653: ARRAY
27654: PPUSH
27655: LD_VAR 0 1
27659: PUSH
27660: LD_INT 2
27662: ARRAY
27663: PPUSH
27664: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27668: LD_VAR 0 1
27672: PUSH
27673: LD_INT 1
27675: ARRAY
27676: PPUSH
27677: LD_VAR 0 1
27681: PUSH
27682: LD_INT 2
27684: ARRAY
27685: PPUSH
27686: CALL_OW 429
// end ; end ;
27690: LD_VAR 0 1
27694: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27695: LD_EXP 50
27699: PUSH
27700: LD_EXP 72
27704: AND
27705: IFFALSE 27717
27707: GO 27709
27709: DISABLE
// YouLost (  ) ;
27710: LD_STRING 
27712: PPUSH
27713: CALL_OW 104
27717: END
// every 0 0$1 trigger StreamModeActive and sFog do
27718: LD_EXP 50
27722: PUSH
27723: LD_EXP 71
27727: AND
27728: IFFALSE 27742
27730: GO 27732
27732: DISABLE
// FogOff ( your_side ) ;
27733: LD_OWVAR 2
27737: PPUSH
27738: CALL_OW 344
27742: END
// every 0 0$1 trigger StreamModeActive and sSun do
27743: LD_EXP 50
27747: PUSH
27748: LD_EXP 73
27752: AND
27753: IFFALSE 27781
27755: GO 27757
27757: DISABLE
// begin solar_recharge_percent := 0 ;
27758: LD_ADDR_OWVAR 79
27762: PUSH
27763: LD_INT 0
27765: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27766: LD_INT 10500
27768: PPUSH
27769: CALL_OW 67
// solar_recharge_percent := 100 ;
27773: LD_ADDR_OWVAR 79
27777: PUSH
27778: LD_INT 100
27780: ST_TO_ADDR
// end ;
27781: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27782: LD_EXP 50
27786: PUSH
27787: LD_EXP 74
27791: AND
27792: IFFALSE 28031
27794: GO 27796
27796: DISABLE
27797: LD_INT 0
27799: PPUSH
27800: PPUSH
27801: PPUSH
// begin tmp := [ ] ;
27802: LD_ADDR_VAR 0 3
27806: PUSH
27807: EMPTY
27808: ST_TO_ADDR
// for i := 1 to 6 do
27809: LD_ADDR_VAR 0 1
27813: PUSH
27814: DOUBLE
27815: LD_INT 1
27817: DEC
27818: ST_TO_ADDR
27819: LD_INT 6
27821: PUSH
27822: FOR_TO
27823: IFFALSE 27928
// begin uc_nation := nation_nature ;
27825: LD_ADDR_OWVAR 21
27829: PUSH
27830: LD_INT 0
27832: ST_TO_ADDR
// uc_side := 0 ;
27833: LD_ADDR_OWVAR 20
27837: PUSH
27838: LD_INT 0
27840: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27841: LD_ADDR_OWVAR 29
27845: PUSH
27846: LD_INT 12
27848: PUSH
27849: LD_INT 12
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: ST_TO_ADDR
// hc_agressivity := 20 ;
27856: LD_ADDR_OWVAR 35
27860: PUSH
27861: LD_INT 20
27863: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27864: LD_ADDR_OWVAR 28
27868: PUSH
27869: LD_INT 17
27871: ST_TO_ADDR
// hc_gallery :=  ;
27872: LD_ADDR_OWVAR 33
27876: PUSH
27877: LD_STRING 
27879: ST_TO_ADDR
// hc_name :=  ;
27880: LD_ADDR_OWVAR 26
27884: PUSH
27885: LD_STRING 
27887: ST_TO_ADDR
// un := CreateHuman ;
27888: LD_ADDR_VAR 0 2
27892: PUSH
27893: CALL_OW 44
27897: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27898: LD_VAR 0 2
27902: PPUSH
27903: LD_INT 1
27905: PPUSH
27906: CALL_OW 51
// tmp := tmp ^ un ;
27910: LD_ADDR_VAR 0 3
27914: PUSH
27915: LD_VAR 0 3
27919: PUSH
27920: LD_VAR 0 2
27924: ADD
27925: ST_TO_ADDR
// end ;
27926: GO 27822
27928: POP
27929: POP
// repeat wait ( 0 0$1 ) ;
27930: LD_INT 35
27932: PPUSH
27933: CALL_OW 67
// for un in tmp do
27937: LD_ADDR_VAR 0 2
27941: PUSH
27942: LD_VAR 0 3
27946: PUSH
27947: FOR_IN
27948: IFFALSE 28022
// begin if IsDead ( un ) then
27950: LD_VAR 0 2
27954: PPUSH
27955: CALL_OW 301
27959: IFFALSE 27979
// begin tmp := tmp diff un ;
27961: LD_ADDR_VAR 0 3
27965: PUSH
27966: LD_VAR 0 3
27970: PUSH
27971: LD_VAR 0 2
27975: DIFF
27976: ST_TO_ADDR
// continue ;
27977: GO 27947
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27979: LD_VAR 0 2
27983: PPUSH
27984: LD_INT 3
27986: PUSH
27987: LD_INT 22
27989: PUSH
27990: LD_INT 0
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PPUSH
28001: CALL_OW 69
28005: PPUSH
28006: LD_VAR 0 2
28010: PPUSH
28011: CALL_OW 74
28015: PPUSH
28016: CALL_OW 115
// end ;
28020: GO 27947
28022: POP
28023: POP
// until not tmp ;
28024: LD_VAR 0 3
28028: NOT
28029: IFFALSE 27930
// end ;
28031: PPOPN 3
28033: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28034: LD_EXP 50
28038: PUSH
28039: LD_EXP 75
28043: AND
28044: IFFALSE 28098
28046: GO 28048
28048: DISABLE
// begin ToLua ( displayTroll(); ) ;
28049: LD_STRING displayTroll();
28051: PPUSH
28052: CALL_OW 559
// wait ( 3 3$00 ) ;
28056: LD_INT 6300
28058: PPUSH
28059: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28063: LD_STRING hideTroll();
28065: PPUSH
28066: CALL_OW 559
// wait ( 1 1$00 ) ;
28070: LD_INT 2100
28072: PPUSH
28073: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28077: LD_STRING displayTroll();
28079: PPUSH
28080: CALL_OW 559
// wait ( 1 1$00 ) ;
28084: LD_INT 2100
28086: PPUSH
28087: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28091: LD_STRING hideTroll();
28093: PPUSH
28094: CALL_OW 559
// end ;
28098: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28099: LD_EXP 50
28103: PUSH
28104: LD_EXP 76
28108: AND
28109: IFFALSE 28172
28111: GO 28113
28113: DISABLE
28114: LD_INT 0
28116: PPUSH
// begin p := 0 ;
28117: LD_ADDR_VAR 0 1
28121: PUSH
28122: LD_INT 0
28124: ST_TO_ADDR
// repeat game_speed := 1 ;
28125: LD_ADDR_OWVAR 65
28129: PUSH
28130: LD_INT 1
28132: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28133: LD_INT 35
28135: PPUSH
28136: CALL_OW 67
// p := p + 1 ;
28140: LD_ADDR_VAR 0 1
28144: PUSH
28145: LD_VAR 0 1
28149: PUSH
28150: LD_INT 1
28152: PLUS
28153: ST_TO_ADDR
// until p >= 60 ;
28154: LD_VAR 0 1
28158: PUSH
28159: LD_INT 60
28161: GREATEREQUAL
28162: IFFALSE 28125
// game_speed := 4 ;
28164: LD_ADDR_OWVAR 65
28168: PUSH
28169: LD_INT 4
28171: ST_TO_ADDR
// end ;
28172: PPOPN 1
28174: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28175: LD_EXP 50
28179: PUSH
28180: LD_EXP 77
28184: AND
28185: IFFALSE 28331
28187: GO 28189
28189: DISABLE
28190: LD_INT 0
28192: PPUSH
28193: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28194: LD_ADDR_VAR 0 1
28198: PUSH
28199: LD_INT 22
28201: PUSH
28202: LD_OWVAR 2
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 2
28213: PUSH
28214: LD_INT 30
28216: PUSH
28217: LD_INT 0
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 30
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: LIST
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PPUSH
28243: CALL_OW 69
28247: ST_TO_ADDR
// if not depot then
28248: LD_VAR 0 1
28252: NOT
28253: IFFALSE 28257
// exit ;
28255: GO 28331
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28257: LD_ADDR_VAR 0 2
28261: PUSH
28262: LD_VAR 0 1
28266: PUSH
28267: LD_INT 1
28269: PPUSH
28270: LD_VAR 0 1
28274: PPUSH
28275: CALL_OW 12
28279: ARRAY
28280: PPUSH
28281: CALL_OW 274
28285: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28286: LD_VAR 0 2
28290: PPUSH
28291: LD_INT 1
28293: PPUSH
28294: LD_INT 0
28296: PPUSH
28297: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28301: LD_VAR 0 2
28305: PPUSH
28306: LD_INT 2
28308: PPUSH
28309: LD_INT 0
28311: PPUSH
28312: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28316: LD_VAR 0 2
28320: PPUSH
28321: LD_INT 3
28323: PPUSH
28324: LD_INT 0
28326: PPUSH
28327: CALL_OW 277
// end ;
28331: PPOPN 2
28333: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28334: LD_EXP 50
28338: PUSH
28339: LD_EXP 78
28343: AND
28344: IFFALSE 28441
28346: GO 28348
28348: DISABLE
28349: LD_INT 0
28351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28352: LD_ADDR_VAR 0 1
28356: PUSH
28357: LD_INT 22
28359: PUSH
28360: LD_OWVAR 2
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 21
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 3
28381: PUSH
28382: LD_INT 23
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: LIST
28400: PPUSH
28401: CALL_OW 69
28405: ST_TO_ADDR
// if not tmp then
28406: LD_VAR 0 1
28410: NOT
28411: IFFALSE 28415
// exit ;
28413: GO 28441
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28415: LD_VAR 0 1
28419: PUSH
28420: LD_INT 1
28422: PPUSH
28423: LD_VAR 0 1
28427: PPUSH
28428: CALL_OW 12
28432: ARRAY
28433: PPUSH
28434: LD_INT 200
28436: PPUSH
28437: CALL_OW 234
// end ;
28441: PPOPN 1
28443: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28444: LD_EXP 50
28448: PUSH
28449: LD_EXP 79
28453: AND
28454: IFFALSE 28533
28456: GO 28458
28458: DISABLE
28459: LD_INT 0
28461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28462: LD_ADDR_VAR 0 1
28466: PUSH
28467: LD_INT 22
28469: PUSH
28470: LD_OWVAR 2
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 21
28481: PUSH
28482: LD_INT 2
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PPUSH
28493: CALL_OW 69
28497: ST_TO_ADDR
// if not tmp then
28498: LD_VAR 0 1
28502: NOT
28503: IFFALSE 28507
// exit ;
28505: GO 28533
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28507: LD_VAR 0 1
28511: PUSH
28512: LD_INT 1
28514: PPUSH
28515: LD_VAR 0 1
28519: PPUSH
28520: CALL_OW 12
28524: ARRAY
28525: PPUSH
28526: LD_INT 60
28528: PPUSH
28529: CALL_OW 234
// end ;
28533: PPOPN 1
28535: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28536: LD_EXP 50
28540: PUSH
28541: LD_EXP 80
28545: AND
28546: IFFALSE 28645
28548: GO 28550
28550: DISABLE
28551: LD_INT 0
28553: PPUSH
28554: PPUSH
// begin enable ;
28555: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28556: LD_ADDR_VAR 0 1
28560: PUSH
28561: LD_INT 22
28563: PUSH
28564: LD_OWVAR 2
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 61
28575: PUSH
28576: EMPTY
28577: LIST
28578: PUSH
28579: LD_INT 33
28581: PUSH
28582: LD_INT 2
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: PPUSH
28594: CALL_OW 69
28598: ST_TO_ADDR
// if not tmp then
28599: LD_VAR 0 1
28603: NOT
28604: IFFALSE 28608
// exit ;
28606: GO 28645
// for i in tmp do
28608: LD_ADDR_VAR 0 2
28612: PUSH
28613: LD_VAR 0 1
28617: PUSH
28618: FOR_IN
28619: IFFALSE 28643
// if IsControledBy ( i ) then
28621: LD_VAR 0 2
28625: PPUSH
28626: CALL_OW 312
28630: IFFALSE 28641
// ComUnlink ( i ) ;
28632: LD_VAR 0 2
28636: PPUSH
28637: CALL_OW 136
28641: GO 28618
28643: POP
28644: POP
// end ;
28645: PPOPN 2
28647: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28648: LD_EXP 50
28652: PUSH
28653: LD_EXP 81
28657: AND
28658: IFFALSE 28798
28660: GO 28662
28662: DISABLE
28663: LD_INT 0
28665: PPUSH
28666: PPUSH
// begin ToLua ( displayPowell(); ) ;
28667: LD_STRING displayPowell();
28669: PPUSH
28670: CALL_OW 559
// uc_side := 0 ;
28674: LD_ADDR_OWVAR 20
28678: PUSH
28679: LD_INT 0
28681: ST_TO_ADDR
// uc_nation := 2 ;
28682: LD_ADDR_OWVAR 21
28686: PUSH
28687: LD_INT 2
28689: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28690: LD_ADDR_OWVAR 37
28694: PUSH
28695: LD_INT 14
28697: ST_TO_ADDR
// vc_engine := engine_siberite ;
28698: LD_ADDR_OWVAR 39
28702: PUSH
28703: LD_INT 3
28705: ST_TO_ADDR
// vc_control := control_apeman ;
28706: LD_ADDR_OWVAR 38
28710: PUSH
28711: LD_INT 5
28713: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28714: LD_ADDR_OWVAR 40
28718: PUSH
28719: LD_INT 29
28721: ST_TO_ADDR
// un := CreateVehicle ;
28722: LD_ADDR_VAR 0 2
28726: PUSH
28727: CALL_OW 45
28731: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28732: LD_VAR 0 2
28736: PPUSH
28737: LD_INT 1
28739: PPUSH
28740: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28744: LD_INT 35
28746: PPUSH
28747: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28751: LD_VAR 0 2
28755: PPUSH
28756: LD_INT 22
28758: PUSH
28759: LD_OWVAR 2
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PPUSH
28768: CALL_OW 69
28772: PPUSH
28773: LD_VAR 0 2
28777: PPUSH
28778: CALL_OW 74
28782: PPUSH
28783: CALL_OW 115
// until IsDead ( un ) ;
28787: LD_VAR 0 2
28791: PPUSH
28792: CALL_OW 301
28796: IFFALSE 28744
// end ;
28798: PPOPN 2
28800: END
// every 0 0$1 trigger StreamModeActive and sStu do
28801: LD_EXP 50
28805: PUSH
28806: LD_EXP 89
28810: AND
28811: IFFALSE 28827
28813: GO 28815
28815: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28816: LD_STRING displayStucuk();
28818: PPUSH
28819: CALL_OW 559
// ResetFog ;
28823: CALL_OW 335
// end ;
28827: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28828: LD_EXP 50
28832: PUSH
28833: LD_EXP 82
28837: AND
28838: IFFALSE 28979
28840: GO 28842
28842: DISABLE
28843: LD_INT 0
28845: PPUSH
28846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28847: LD_ADDR_VAR 0 2
28851: PUSH
28852: LD_INT 22
28854: PUSH
28855: LD_OWVAR 2
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 21
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PPUSH
28878: CALL_OW 69
28882: ST_TO_ADDR
// if not tmp then
28883: LD_VAR 0 2
28887: NOT
28888: IFFALSE 28892
// exit ;
28890: GO 28979
// un := tmp [ rand ( 1 , tmp ) ] ;
28892: LD_ADDR_VAR 0 1
28896: PUSH
28897: LD_VAR 0 2
28901: PUSH
28902: LD_INT 1
28904: PPUSH
28905: LD_VAR 0 2
28909: PPUSH
28910: CALL_OW 12
28914: ARRAY
28915: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28916: LD_VAR 0 1
28920: PPUSH
28921: LD_INT 0
28923: PPUSH
28924: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28928: LD_VAR 0 1
28932: PPUSH
28933: LD_OWVAR 3
28937: PUSH
28938: LD_VAR 0 1
28942: DIFF
28943: PPUSH
28944: LD_VAR 0 1
28948: PPUSH
28949: CALL_OW 74
28953: PPUSH
28954: CALL_OW 115
// wait ( 0 0$20 ) ;
28958: LD_INT 700
28960: PPUSH
28961: CALL_OW 67
// SetSide ( un , your_side ) ;
28965: LD_VAR 0 1
28969: PPUSH
28970: LD_OWVAR 2
28974: PPUSH
28975: CALL_OW 235
// end ;
28979: PPOPN 2
28981: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28982: LD_EXP 50
28986: PUSH
28987: LD_EXP 83
28991: AND
28992: IFFALSE 29098
28994: GO 28996
28996: DISABLE
28997: LD_INT 0
28999: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29000: LD_ADDR_VAR 0 1
29004: PUSH
29005: LD_INT 22
29007: PUSH
29008: LD_OWVAR 2
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 2
29019: PUSH
29020: LD_INT 30
29022: PUSH
29023: LD_INT 0
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 30
29032: PUSH
29033: LD_INT 1
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: LIST
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PPUSH
29049: CALL_OW 69
29053: ST_TO_ADDR
// if not depot then
29054: LD_VAR 0 1
29058: NOT
29059: IFFALSE 29063
// exit ;
29061: GO 29098
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29063: LD_VAR 0 1
29067: PUSH
29068: LD_INT 1
29070: ARRAY
29071: PPUSH
29072: CALL_OW 250
29076: PPUSH
29077: LD_VAR 0 1
29081: PUSH
29082: LD_INT 1
29084: ARRAY
29085: PPUSH
29086: CALL_OW 251
29090: PPUSH
29091: LD_INT 70
29093: PPUSH
29094: CALL_OW 495
// end ;
29098: PPOPN 1
29100: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29101: LD_EXP 50
29105: PUSH
29106: LD_EXP 84
29110: AND
29111: IFFALSE 29322
29113: GO 29115
29115: DISABLE
29116: LD_INT 0
29118: PPUSH
29119: PPUSH
29120: PPUSH
29121: PPUSH
29122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29123: LD_ADDR_VAR 0 5
29127: PUSH
29128: LD_INT 22
29130: PUSH
29131: LD_OWVAR 2
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 21
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PPUSH
29154: CALL_OW 69
29158: ST_TO_ADDR
// if not tmp then
29159: LD_VAR 0 5
29163: NOT
29164: IFFALSE 29168
// exit ;
29166: GO 29322
// for i in tmp do
29168: LD_ADDR_VAR 0 1
29172: PUSH
29173: LD_VAR 0 5
29177: PUSH
29178: FOR_IN
29179: IFFALSE 29320
// begin d := rand ( 0 , 5 ) ;
29181: LD_ADDR_VAR 0 4
29185: PUSH
29186: LD_INT 0
29188: PPUSH
29189: LD_INT 5
29191: PPUSH
29192: CALL_OW 12
29196: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29197: LD_ADDR_VAR 0 2
29201: PUSH
29202: LD_VAR 0 1
29206: PPUSH
29207: CALL_OW 250
29211: PPUSH
29212: LD_VAR 0 4
29216: PPUSH
29217: LD_INT 3
29219: PPUSH
29220: LD_INT 12
29222: PPUSH
29223: CALL_OW 12
29227: PPUSH
29228: CALL_OW 272
29232: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29233: LD_ADDR_VAR 0 3
29237: PUSH
29238: LD_VAR 0 1
29242: PPUSH
29243: CALL_OW 251
29247: PPUSH
29248: LD_VAR 0 4
29252: PPUSH
29253: LD_INT 3
29255: PPUSH
29256: LD_INT 12
29258: PPUSH
29259: CALL_OW 12
29263: PPUSH
29264: CALL_OW 273
29268: ST_TO_ADDR
// if ValidHex ( x , y ) then
29269: LD_VAR 0 2
29273: PPUSH
29274: LD_VAR 0 3
29278: PPUSH
29279: CALL_OW 488
29283: IFFALSE 29318
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29285: LD_VAR 0 1
29289: PPUSH
29290: LD_VAR 0 2
29294: PPUSH
29295: LD_VAR 0 3
29299: PPUSH
29300: LD_INT 3
29302: PPUSH
29303: LD_INT 6
29305: PPUSH
29306: CALL_OW 12
29310: PPUSH
29311: LD_INT 1
29313: PPUSH
29314: CALL_OW 483
// end ;
29318: GO 29178
29320: POP
29321: POP
// end ;
29322: PPOPN 5
29324: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29325: LD_EXP 50
29329: PUSH
29330: LD_EXP 85
29334: AND
29335: IFFALSE 29429
29337: GO 29339
29339: DISABLE
29340: LD_INT 0
29342: PPUSH
29343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29344: LD_ADDR_VAR 0 2
29348: PUSH
29349: LD_INT 22
29351: PUSH
29352: LD_OWVAR 2
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 32
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 21
29373: PUSH
29374: LD_INT 2
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: LIST
29385: PPUSH
29386: CALL_OW 69
29390: ST_TO_ADDR
// if not tmp then
29391: LD_VAR 0 2
29395: NOT
29396: IFFALSE 29400
// exit ;
29398: GO 29429
// for i in tmp do
29400: LD_ADDR_VAR 0 1
29404: PUSH
29405: LD_VAR 0 2
29409: PUSH
29410: FOR_IN
29411: IFFALSE 29427
// SetFuel ( i , 0 ) ;
29413: LD_VAR 0 1
29417: PPUSH
29418: LD_INT 0
29420: PPUSH
29421: CALL_OW 240
29425: GO 29410
29427: POP
29428: POP
// end ;
29429: PPOPN 2
29431: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29432: LD_EXP 50
29436: PUSH
29437: LD_EXP 86
29441: AND
29442: IFFALSE 29508
29444: GO 29446
29446: DISABLE
29447: LD_INT 0
29449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29450: LD_ADDR_VAR 0 1
29454: PUSH
29455: LD_INT 22
29457: PUSH
29458: LD_OWVAR 2
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 30
29469: PUSH
29470: LD_INT 29
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PPUSH
29481: CALL_OW 69
29485: ST_TO_ADDR
// if not tmp then
29486: LD_VAR 0 1
29490: NOT
29491: IFFALSE 29495
// exit ;
29493: GO 29508
// DestroyUnit ( tmp [ 1 ] ) ;
29495: LD_VAR 0 1
29499: PUSH
29500: LD_INT 1
29502: ARRAY
29503: PPUSH
29504: CALL_OW 65
// end ;
29508: PPOPN 1
29510: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29511: LD_EXP 50
29515: PUSH
29516: LD_EXP 88
29520: AND
29521: IFFALSE 29650
29523: GO 29525
29525: DISABLE
29526: LD_INT 0
29528: PPUSH
// begin uc_side := 0 ;
29529: LD_ADDR_OWVAR 20
29533: PUSH
29534: LD_INT 0
29536: ST_TO_ADDR
// uc_nation := nation_arabian ;
29537: LD_ADDR_OWVAR 21
29541: PUSH
29542: LD_INT 2
29544: ST_TO_ADDR
// hc_gallery :=  ;
29545: LD_ADDR_OWVAR 33
29549: PUSH
29550: LD_STRING 
29552: ST_TO_ADDR
// hc_name :=  ;
29553: LD_ADDR_OWVAR 26
29557: PUSH
29558: LD_STRING 
29560: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29561: LD_INT 1
29563: PPUSH
29564: LD_INT 11
29566: PPUSH
29567: LD_INT 10
29569: PPUSH
29570: CALL_OW 380
// un := CreateHuman ;
29574: LD_ADDR_VAR 0 1
29578: PUSH
29579: CALL_OW 44
29583: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29584: LD_VAR 0 1
29588: PPUSH
29589: LD_INT 1
29591: PPUSH
29592: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29596: LD_INT 35
29598: PPUSH
29599: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29603: LD_VAR 0 1
29607: PPUSH
29608: LD_INT 22
29610: PUSH
29611: LD_OWVAR 2
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PPUSH
29620: CALL_OW 69
29624: PPUSH
29625: LD_VAR 0 1
29629: PPUSH
29630: CALL_OW 74
29634: PPUSH
29635: CALL_OW 115
// until IsDead ( un ) ;
29639: LD_VAR 0 1
29643: PPUSH
29644: CALL_OW 301
29648: IFFALSE 29596
// end ;
29650: PPOPN 1
29652: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29653: LD_EXP 50
29657: PUSH
29658: LD_EXP 90
29662: AND
29663: IFFALSE 29675
29665: GO 29667
29667: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29668: LD_STRING earthquake(getX(game), 0, 32)
29670: PPUSH
29671: CALL_OW 559
29675: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29676: LD_EXP 50
29680: PUSH
29681: LD_EXP 91
29685: AND
29686: IFFALSE 29777
29688: GO 29690
29690: DISABLE
29691: LD_INT 0
29693: PPUSH
// begin enable ;
29694: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29695: LD_ADDR_VAR 0 1
29699: PUSH
29700: LD_INT 22
29702: PUSH
29703: LD_OWVAR 2
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 21
29714: PUSH
29715: LD_INT 2
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 33
29724: PUSH
29725: LD_INT 3
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: LIST
29736: PPUSH
29737: CALL_OW 69
29741: ST_TO_ADDR
// if not tmp then
29742: LD_VAR 0 1
29746: NOT
29747: IFFALSE 29751
// exit ;
29749: GO 29777
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29751: LD_VAR 0 1
29755: PUSH
29756: LD_INT 1
29758: PPUSH
29759: LD_VAR 0 1
29763: PPUSH
29764: CALL_OW 12
29768: ARRAY
29769: PPUSH
29770: LD_INT 1
29772: PPUSH
29773: CALL_OW 234
// end ;
29777: PPOPN 1
29779: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29780: LD_EXP 50
29784: PUSH
29785: LD_EXP 92
29789: AND
29790: IFFALSE 29931
29792: GO 29794
29794: DISABLE
29795: LD_INT 0
29797: PPUSH
29798: PPUSH
29799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29800: LD_ADDR_VAR 0 3
29804: PUSH
29805: LD_INT 22
29807: PUSH
29808: LD_OWVAR 2
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 25
29819: PUSH
29820: LD_INT 1
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PPUSH
29831: CALL_OW 69
29835: ST_TO_ADDR
// if not tmp then
29836: LD_VAR 0 3
29840: NOT
29841: IFFALSE 29845
// exit ;
29843: GO 29931
// un := tmp [ rand ( 1 , tmp ) ] ;
29845: LD_ADDR_VAR 0 2
29849: PUSH
29850: LD_VAR 0 3
29854: PUSH
29855: LD_INT 1
29857: PPUSH
29858: LD_VAR 0 3
29862: PPUSH
29863: CALL_OW 12
29867: ARRAY
29868: ST_TO_ADDR
// if Crawls ( un ) then
29869: LD_VAR 0 2
29873: PPUSH
29874: CALL_OW 318
29878: IFFALSE 29889
// ComWalk ( un ) ;
29880: LD_VAR 0 2
29884: PPUSH
29885: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29889: LD_VAR 0 2
29893: PPUSH
29894: LD_INT 9
29896: PPUSH
29897: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29901: LD_INT 28
29903: PPUSH
29904: LD_OWVAR 2
29908: PPUSH
29909: LD_INT 2
29911: PPUSH
29912: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29916: LD_INT 29
29918: PPUSH
29919: LD_OWVAR 2
29923: PPUSH
29924: LD_INT 2
29926: PPUSH
29927: CALL_OW 322
// end ;
29931: PPOPN 3
29933: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29934: LD_EXP 50
29938: PUSH
29939: LD_EXP 93
29943: AND
29944: IFFALSE 30055
29946: GO 29948
29948: DISABLE
29949: LD_INT 0
29951: PPUSH
29952: PPUSH
29953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29954: LD_ADDR_VAR 0 3
29958: PUSH
29959: LD_INT 22
29961: PUSH
29962: LD_OWVAR 2
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 25
29973: PUSH
29974: LD_INT 1
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PPUSH
29985: CALL_OW 69
29989: ST_TO_ADDR
// if not tmp then
29990: LD_VAR 0 3
29994: NOT
29995: IFFALSE 29999
// exit ;
29997: GO 30055
// un := tmp [ rand ( 1 , tmp ) ] ;
29999: LD_ADDR_VAR 0 2
30003: PUSH
30004: LD_VAR 0 3
30008: PUSH
30009: LD_INT 1
30011: PPUSH
30012: LD_VAR 0 3
30016: PPUSH
30017: CALL_OW 12
30021: ARRAY
30022: ST_TO_ADDR
// if Crawls ( un ) then
30023: LD_VAR 0 2
30027: PPUSH
30028: CALL_OW 318
30032: IFFALSE 30043
// ComWalk ( un ) ;
30034: LD_VAR 0 2
30038: PPUSH
30039: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30043: LD_VAR 0 2
30047: PPUSH
30048: LD_INT 8
30050: PPUSH
30051: CALL_OW 336
// end ;
30055: PPOPN 3
30057: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30058: LD_EXP 50
30062: PUSH
30063: LD_EXP 94
30067: AND
30068: IFFALSE 30212
30070: GO 30072
30072: DISABLE
30073: LD_INT 0
30075: PPUSH
30076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30077: LD_ADDR_VAR 0 2
30081: PUSH
30082: LD_INT 22
30084: PUSH
30085: LD_OWVAR 2
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 21
30096: PUSH
30097: LD_INT 2
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 2
30106: PUSH
30107: LD_INT 34
30109: PUSH
30110: LD_INT 12
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 34
30119: PUSH
30120: LD_INT 51
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 34
30129: PUSH
30130: LD_INT 32
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: LIST
30147: PPUSH
30148: CALL_OW 69
30152: ST_TO_ADDR
// if not tmp then
30153: LD_VAR 0 2
30157: NOT
30158: IFFALSE 30162
// exit ;
30160: GO 30212
// for i in tmp do
30162: LD_ADDR_VAR 0 1
30166: PUSH
30167: LD_VAR 0 2
30171: PUSH
30172: FOR_IN
30173: IFFALSE 30210
// if GetCargo ( i , mat_artifact ) = 0 then
30175: LD_VAR 0 1
30179: PPUSH
30180: LD_INT 4
30182: PPUSH
30183: CALL_OW 289
30187: PUSH
30188: LD_INT 0
30190: EQUAL
30191: IFFALSE 30208
// SetCargo ( i , mat_siberit , 100 ) ;
30193: LD_VAR 0 1
30197: PPUSH
30198: LD_INT 3
30200: PPUSH
30201: LD_INT 100
30203: PPUSH
30204: CALL_OW 290
30208: GO 30172
30210: POP
30211: POP
// end ;
30212: PPOPN 2
30214: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30215: LD_EXP 50
30219: PUSH
30220: LD_EXP 95
30224: AND
30225: IFFALSE 30408
30227: GO 30229
30229: DISABLE
30230: LD_INT 0
30232: PPUSH
30233: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30234: LD_ADDR_VAR 0 2
30238: PUSH
30239: LD_INT 22
30241: PUSH
30242: LD_OWVAR 2
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PPUSH
30251: CALL_OW 69
30255: ST_TO_ADDR
// if not tmp then
30256: LD_VAR 0 2
30260: NOT
30261: IFFALSE 30265
// exit ;
30263: GO 30408
// for i := 1 to 2 do
30265: LD_ADDR_VAR 0 1
30269: PUSH
30270: DOUBLE
30271: LD_INT 1
30273: DEC
30274: ST_TO_ADDR
30275: LD_INT 2
30277: PUSH
30278: FOR_TO
30279: IFFALSE 30406
// begin uc_side := your_side ;
30281: LD_ADDR_OWVAR 20
30285: PUSH
30286: LD_OWVAR 2
30290: ST_TO_ADDR
// uc_nation := nation_american ;
30291: LD_ADDR_OWVAR 21
30295: PUSH
30296: LD_INT 1
30298: ST_TO_ADDR
// vc_chassis := us_morphling ;
30299: LD_ADDR_OWVAR 37
30303: PUSH
30304: LD_INT 5
30306: ST_TO_ADDR
// vc_engine := engine_siberite ;
30307: LD_ADDR_OWVAR 39
30311: PUSH
30312: LD_INT 3
30314: ST_TO_ADDR
// vc_control := control_computer ;
30315: LD_ADDR_OWVAR 38
30319: PUSH
30320: LD_INT 3
30322: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30323: LD_ADDR_OWVAR 40
30327: PUSH
30328: LD_INT 10
30330: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30331: LD_VAR 0 2
30335: PUSH
30336: LD_INT 1
30338: ARRAY
30339: PPUSH
30340: CALL_OW 310
30344: NOT
30345: IFFALSE 30392
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30347: CALL_OW 45
30351: PPUSH
30352: LD_VAR 0 2
30356: PUSH
30357: LD_INT 1
30359: ARRAY
30360: PPUSH
30361: CALL_OW 250
30365: PPUSH
30366: LD_VAR 0 2
30370: PUSH
30371: LD_INT 1
30373: ARRAY
30374: PPUSH
30375: CALL_OW 251
30379: PPUSH
30380: LD_INT 12
30382: PPUSH
30383: LD_INT 1
30385: PPUSH
30386: CALL_OW 50
30390: GO 30404
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30392: CALL_OW 45
30396: PPUSH
30397: LD_INT 1
30399: PPUSH
30400: CALL_OW 51
// end ;
30404: GO 30278
30406: POP
30407: POP
// end ;
30408: PPOPN 2
30410: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30411: LD_EXP 50
30415: PUSH
30416: LD_EXP 96
30420: AND
30421: IFFALSE 30643
30423: GO 30425
30425: DISABLE
30426: LD_INT 0
30428: PPUSH
30429: PPUSH
30430: PPUSH
30431: PPUSH
30432: PPUSH
30433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30434: LD_ADDR_VAR 0 6
30438: PUSH
30439: LD_INT 22
30441: PUSH
30442: LD_OWVAR 2
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 21
30453: PUSH
30454: LD_INT 1
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 3
30463: PUSH
30464: LD_INT 23
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: LIST
30482: PPUSH
30483: CALL_OW 69
30487: ST_TO_ADDR
// if not tmp then
30488: LD_VAR 0 6
30492: NOT
30493: IFFALSE 30497
// exit ;
30495: GO 30643
// s1 := rand ( 1 , 4 ) ;
30497: LD_ADDR_VAR 0 2
30501: PUSH
30502: LD_INT 1
30504: PPUSH
30505: LD_INT 4
30507: PPUSH
30508: CALL_OW 12
30512: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30513: LD_ADDR_VAR 0 4
30517: PUSH
30518: LD_VAR 0 6
30522: PUSH
30523: LD_INT 1
30525: ARRAY
30526: PPUSH
30527: LD_VAR 0 2
30531: PPUSH
30532: CALL_OW 259
30536: ST_TO_ADDR
// if s1 = 1 then
30537: LD_VAR 0 2
30541: PUSH
30542: LD_INT 1
30544: EQUAL
30545: IFFALSE 30565
// s2 := rand ( 2 , 4 ) else
30547: LD_ADDR_VAR 0 3
30551: PUSH
30552: LD_INT 2
30554: PPUSH
30555: LD_INT 4
30557: PPUSH
30558: CALL_OW 12
30562: ST_TO_ADDR
30563: GO 30573
// s2 := 1 ;
30565: LD_ADDR_VAR 0 3
30569: PUSH
30570: LD_INT 1
30572: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30573: LD_ADDR_VAR 0 5
30577: PUSH
30578: LD_VAR 0 6
30582: PUSH
30583: LD_INT 1
30585: ARRAY
30586: PPUSH
30587: LD_VAR 0 3
30591: PPUSH
30592: CALL_OW 259
30596: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30597: LD_VAR 0 6
30601: PUSH
30602: LD_INT 1
30604: ARRAY
30605: PPUSH
30606: LD_VAR 0 2
30610: PPUSH
30611: LD_VAR 0 5
30615: PPUSH
30616: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30620: LD_VAR 0 6
30624: PUSH
30625: LD_INT 1
30627: ARRAY
30628: PPUSH
30629: LD_VAR 0 3
30633: PPUSH
30634: LD_VAR 0 4
30638: PPUSH
30639: CALL_OW 237
// end ;
30643: PPOPN 6
30645: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30646: LD_EXP 50
30650: PUSH
30651: LD_EXP 97
30655: AND
30656: IFFALSE 30735
30658: GO 30660
30660: DISABLE
30661: LD_INT 0
30663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30664: LD_ADDR_VAR 0 1
30668: PUSH
30669: LD_INT 22
30671: PUSH
30672: LD_OWVAR 2
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 30
30683: PUSH
30684: LD_INT 3
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PPUSH
30695: CALL_OW 69
30699: ST_TO_ADDR
// if not tmp then
30700: LD_VAR 0 1
30704: NOT
30705: IFFALSE 30709
// exit ;
30707: GO 30735
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30709: LD_VAR 0 1
30713: PUSH
30714: LD_INT 1
30716: PPUSH
30717: LD_VAR 0 1
30721: PPUSH
30722: CALL_OW 12
30726: ARRAY
30727: PPUSH
30728: LD_INT 1
30730: PPUSH
30731: CALL_OW 234
// end ;
30735: PPOPN 1
30737: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30738: LD_EXP 50
30742: PUSH
30743: LD_EXP 98
30747: AND
30748: IFFALSE 30860
30750: GO 30752
30752: DISABLE
30753: LD_INT 0
30755: PPUSH
30756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30757: LD_ADDR_VAR 0 2
30761: PUSH
30762: LD_INT 22
30764: PUSH
30765: LD_OWVAR 2
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 2
30776: PUSH
30777: LD_INT 30
30779: PUSH
30780: LD_INT 27
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 30
30789: PUSH
30790: LD_INT 26
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 30
30799: PUSH
30800: LD_INT 28
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PPUSH
30817: CALL_OW 69
30821: ST_TO_ADDR
// if not tmp then
30822: LD_VAR 0 2
30826: NOT
30827: IFFALSE 30831
// exit ;
30829: GO 30860
// for i in tmp do
30831: LD_ADDR_VAR 0 1
30835: PUSH
30836: LD_VAR 0 2
30840: PUSH
30841: FOR_IN
30842: IFFALSE 30858
// SetLives ( i , 1 ) ;
30844: LD_VAR 0 1
30848: PPUSH
30849: LD_INT 1
30851: PPUSH
30852: CALL_OW 234
30856: GO 30841
30858: POP
30859: POP
// end ;
30860: PPOPN 2
30862: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30863: LD_EXP 50
30867: PUSH
30868: LD_EXP 99
30872: AND
30873: IFFALSE 31160
30875: GO 30877
30877: DISABLE
30878: LD_INT 0
30880: PPUSH
30881: PPUSH
30882: PPUSH
// begin i := rand ( 1 , 7 ) ;
30883: LD_ADDR_VAR 0 1
30887: PUSH
30888: LD_INT 1
30890: PPUSH
30891: LD_INT 7
30893: PPUSH
30894: CALL_OW 12
30898: ST_TO_ADDR
// case i of 1 :
30899: LD_VAR 0 1
30903: PUSH
30904: LD_INT 1
30906: DOUBLE
30907: EQUAL
30908: IFTRUE 30912
30910: GO 30922
30912: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30913: LD_STRING earthquake(getX(game), 0, 32)
30915: PPUSH
30916: CALL_OW 559
30920: GO 31160
30922: LD_INT 2
30924: DOUBLE
30925: EQUAL
30926: IFTRUE 30930
30928: GO 30944
30930: POP
// begin ToLua ( displayStucuk(); ) ;
30931: LD_STRING displayStucuk();
30933: PPUSH
30934: CALL_OW 559
// ResetFog ;
30938: CALL_OW 335
// end ; 3 :
30942: GO 31160
30944: LD_INT 3
30946: DOUBLE
30947: EQUAL
30948: IFTRUE 30952
30950: GO 31056
30952: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30953: LD_ADDR_VAR 0 2
30957: PUSH
30958: LD_INT 22
30960: PUSH
30961: LD_OWVAR 2
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 25
30972: PUSH
30973: LD_INT 1
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PPUSH
30984: CALL_OW 69
30988: ST_TO_ADDR
// if not tmp then
30989: LD_VAR 0 2
30993: NOT
30994: IFFALSE 30998
// exit ;
30996: GO 31160
// un := tmp [ rand ( 1 , tmp ) ] ;
30998: LD_ADDR_VAR 0 3
31002: PUSH
31003: LD_VAR 0 2
31007: PUSH
31008: LD_INT 1
31010: PPUSH
31011: LD_VAR 0 2
31015: PPUSH
31016: CALL_OW 12
31020: ARRAY
31021: ST_TO_ADDR
// if Crawls ( un ) then
31022: LD_VAR 0 3
31026: PPUSH
31027: CALL_OW 318
31031: IFFALSE 31042
// ComWalk ( un ) ;
31033: LD_VAR 0 3
31037: PPUSH
31038: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31042: LD_VAR 0 3
31046: PPUSH
31047: LD_INT 8
31049: PPUSH
31050: CALL_OW 336
// end ; 4 :
31054: GO 31160
31056: LD_INT 4
31058: DOUBLE
31059: EQUAL
31060: IFTRUE 31064
31062: GO 31138
31064: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31065: LD_ADDR_VAR 0 2
31069: PUSH
31070: LD_INT 22
31072: PUSH
31073: LD_OWVAR 2
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 30
31084: PUSH
31085: LD_INT 29
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PPUSH
31096: CALL_OW 69
31100: ST_TO_ADDR
// if not tmp then
31101: LD_VAR 0 2
31105: NOT
31106: IFFALSE 31110
// exit ;
31108: GO 31160
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31110: LD_VAR 0 2
31114: PUSH
31115: LD_INT 1
31117: ARRAY
31118: PPUSH
31119: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31123: LD_VAR 0 2
31127: PUSH
31128: LD_INT 1
31130: ARRAY
31131: PPUSH
31132: CALL_OW 65
// end ; 5 .. 7 :
31136: GO 31160
31138: LD_INT 5
31140: DOUBLE
31141: GREATEREQUAL
31142: IFFALSE 31150
31144: LD_INT 7
31146: DOUBLE
31147: LESSEQUAL
31148: IFTRUE 31152
31150: GO 31159
31152: POP
// StreamSibBomb ; end ;
31153: CALL 27397 0 0
31157: GO 31160
31159: POP
// end ;
31160: PPOPN 3
31162: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31163: LD_EXP 50
31167: PUSH
31168: LD_EXP 100
31172: AND
31173: IFFALSE 31329
31175: GO 31177
31177: DISABLE
31178: LD_INT 0
31180: PPUSH
31181: PPUSH
31182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31183: LD_ADDR_VAR 0 2
31187: PUSH
31188: LD_INT 81
31190: PUSH
31191: LD_OWVAR 2
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 2
31202: PUSH
31203: LD_INT 21
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 21
31215: PUSH
31216: LD_INT 2
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: LIST
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PPUSH
31232: CALL_OW 69
31236: ST_TO_ADDR
// if not tmp then
31237: LD_VAR 0 2
31241: NOT
31242: IFFALSE 31246
// exit ;
31244: GO 31329
// p := 0 ;
31246: LD_ADDR_VAR 0 3
31250: PUSH
31251: LD_INT 0
31253: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31254: LD_INT 35
31256: PPUSH
31257: CALL_OW 67
// p := p + 1 ;
31261: LD_ADDR_VAR 0 3
31265: PUSH
31266: LD_VAR 0 3
31270: PUSH
31271: LD_INT 1
31273: PLUS
31274: ST_TO_ADDR
// for i in tmp do
31275: LD_ADDR_VAR 0 1
31279: PUSH
31280: LD_VAR 0 2
31284: PUSH
31285: FOR_IN
31286: IFFALSE 31317
// if GetLives ( i ) < 1000 then
31288: LD_VAR 0 1
31292: PPUSH
31293: CALL_OW 256
31297: PUSH
31298: LD_INT 1000
31300: LESS
31301: IFFALSE 31315
// SetLives ( i , 1000 ) ;
31303: LD_VAR 0 1
31307: PPUSH
31308: LD_INT 1000
31310: PPUSH
31311: CALL_OW 234
31315: GO 31285
31317: POP
31318: POP
// until p > 20 ;
31319: LD_VAR 0 3
31323: PUSH
31324: LD_INT 20
31326: GREATER
31327: IFFALSE 31254
// end ;
31329: PPOPN 3
31331: END
// every 0 0$1 trigger StreamModeActive and sTime do
31332: LD_EXP 50
31336: PUSH
31337: LD_EXP 101
31341: AND
31342: IFFALSE 31377
31344: GO 31346
31346: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31347: LD_INT 28
31349: PPUSH
31350: LD_OWVAR 2
31354: PPUSH
31355: LD_INT 2
31357: PPUSH
31358: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31362: LD_INT 30
31364: PPUSH
31365: LD_OWVAR 2
31369: PPUSH
31370: LD_INT 2
31372: PPUSH
31373: CALL_OW 322
// end ;
31377: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31378: LD_EXP 50
31382: PUSH
31383: LD_EXP 102
31387: AND
31388: IFFALSE 31509
31390: GO 31392
31392: DISABLE
31393: LD_INT 0
31395: PPUSH
31396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31397: LD_ADDR_VAR 0 2
31401: PUSH
31402: LD_INT 22
31404: PUSH
31405: LD_OWVAR 2
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 21
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 3
31426: PUSH
31427: LD_INT 23
31429: PUSH
31430: LD_INT 0
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: LIST
31445: PPUSH
31446: CALL_OW 69
31450: ST_TO_ADDR
// if not tmp then
31451: LD_VAR 0 2
31455: NOT
31456: IFFALSE 31460
// exit ;
31458: GO 31509
// for i in tmp do
31460: LD_ADDR_VAR 0 1
31464: PUSH
31465: LD_VAR 0 2
31469: PUSH
31470: FOR_IN
31471: IFFALSE 31507
// begin if Crawls ( i ) then
31473: LD_VAR 0 1
31477: PPUSH
31478: CALL_OW 318
31482: IFFALSE 31493
// ComWalk ( i ) ;
31484: LD_VAR 0 1
31488: PPUSH
31489: CALL_OW 138
// SetClass ( i , 2 ) ;
31493: LD_VAR 0 1
31497: PPUSH
31498: LD_INT 2
31500: PPUSH
31501: CALL_OW 336
// end ;
31505: GO 31470
31507: POP
31508: POP
// end ;
31509: PPOPN 2
31511: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31512: LD_EXP 50
31516: PUSH
31517: LD_EXP 103
31521: AND
31522: IFFALSE 31810
31524: GO 31526
31526: DISABLE
31527: LD_INT 0
31529: PPUSH
31530: PPUSH
31531: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31532: LD_OWVAR 2
31536: PPUSH
31537: LD_INT 9
31539: PPUSH
31540: LD_INT 1
31542: PPUSH
31543: LD_INT 1
31545: PPUSH
31546: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31550: LD_INT 9
31552: PPUSH
31553: LD_OWVAR 2
31557: PPUSH
31558: CALL_OW 343
// uc_side := 9 ;
31562: LD_ADDR_OWVAR 20
31566: PUSH
31567: LD_INT 9
31569: ST_TO_ADDR
// uc_nation := 2 ;
31570: LD_ADDR_OWVAR 21
31574: PUSH
31575: LD_INT 2
31577: ST_TO_ADDR
// hc_name := Dark Warrior ;
31578: LD_ADDR_OWVAR 26
31582: PUSH
31583: LD_STRING Dark Warrior
31585: ST_TO_ADDR
// hc_gallery :=  ;
31586: LD_ADDR_OWVAR 33
31590: PUSH
31591: LD_STRING 
31593: ST_TO_ADDR
// hc_noskilllimit := true ;
31594: LD_ADDR_OWVAR 76
31598: PUSH
31599: LD_INT 1
31601: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31602: LD_ADDR_OWVAR 31
31606: PUSH
31607: LD_INT 30
31609: PUSH
31610: LD_INT 30
31612: PUSH
31613: LD_INT 30
31615: PUSH
31616: LD_INT 30
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: ST_TO_ADDR
// un := CreateHuman ;
31625: LD_ADDR_VAR 0 3
31629: PUSH
31630: CALL_OW 44
31634: ST_TO_ADDR
// hc_noskilllimit := false ;
31635: LD_ADDR_OWVAR 76
31639: PUSH
31640: LD_INT 0
31642: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31643: LD_VAR 0 3
31647: PPUSH
31648: LD_INT 1
31650: PPUSH
31651: CALL_OW 51
// ToLua ( playRanger() ) ;
31655: LD_STRING playRanger()
31657: PPUSH
31658: CALL_OW 559
// p := 0 ;
31662: LD_ADDR_VAR 0 2
31666: PUSH
31667: LD_INT 0
31669: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31670: LD_INT 35
31672: PPUSH
31673: CALL_OW 67
// p := p + 1 ;
31677: LD_ADDR_VAR 0 2
31681: PUSH
31682: LD_VAR 0 2
31686: PUSH
31687: LD_INT 1
31689: PLUS
31690: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31691: LD_VAR 0 3
31695: PPUSH
31696: CALL_OW 256
31700: PUSH
31701: LD_INT 1000
31703: LESS
31704: IFFALSE 31718
// SetLives ( un , 1000 ) ;
31706: LD_VAR 0 3
31710: PPUSH
31711: LD_INT 1000
31713: PPUSH
31714: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31718: LD_VAR 0 3
31722: PPUSH
31723: LD_INT 81
31725: PUSH
31726: LD_OWVAR 2
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 91
31737: PUSH
31738: LD_VAR 0 3
31742: PUSH
31743: LD_INT 30
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: LIST
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PPUSH
31755: CALL_OW 69
31759: PPUSH
31760: LD_VAR 0 3
31764: PPUSH
31765: CALL_OW 74
31769: PPUSH
31770: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31774: LD_VAR 0 2
31778: PUSH
31779: LD_INT 80
31781: GREATER
31782: PUSH
31783: LD_VAR 0 3
31787: PPUSH
31788: CALL_OW 301
31792: OR
31793: IFFALSE 31670
// if un then
31795: LD_VAR 0 3
31799: IFFALSE 31810
// RemoveUnit ( un ) ;
31801: LD_VAR 0 3
31805: PPUSH
31806: CALL_OW 64
// end ;
31810: PPOPN 3
31812: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31813: LD_EXP 104
31817: IFFALSE 31933
31819: GO 31821
31821: DISABLE
31822: LD_INT 0
31824: PPUSH
31825: PPUSH
31826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31827: LD_ADDR_VAR 0 2
31831: PUSH
31832: LD_INT 81
31834: PUSH
31835: LD_OWVAR 2
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 21
31846: PUSH
31847: LD_INT 1
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PPUSH
31858: CALL_OW 69
31862: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31863: LD_STRING playComputer()
31865: PPUSH
31866: CALL_OW 559
// if not tmp then
31870: LD_VAR 0 2
31874: NOT
31875: IFFALSE 31879
// exit ;
31877: GO 31933
// for i in tmp do
31879: LD_ADDR_VAR 0 1
31883: PUSH
31884: LD_VAR 0 2
31888: PUSH
31889: FOR_IN
31890: IFFALSE 31931
// for j := 1 to 4 do
31892: LD_ADDR_VAR 0 3
31896: PUSH
31897: DOUBLE
31898: LD_INT 1
31900: DEC
31901: ST_TO_ADDR
31902: LD_INT 4
31904: PUSH
31905: FOR_TO
31906: IFFALSE 31927
// SetSkill ( i , j , 10 ) ;
31908: LD_VAR 0 1
31912: PPUSH
31913: LD_VAR 0 3
31917: PPUSH
31918: LD_INT 10
31920: PPUSH
31921: CALL_OW 237
31925: GO 31905
31927: POP
31928: POP
31929: GO 31889
31931: POP
31932: POP
// end ;
31933: PPOPN 3
31935: END
// every 0 0$1 trigger s30 do var i , tmp ;
31936: LD_EXP 105
31940: IFFALSE 32009
31942: GO 31944
31944: DISABLE
31945: LD_INT 0
31947: PPUSH
31948: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31949: LD_ADDR_VAR 0 2
31953: PUSH
31954: LD_INT 22
31956: PUSH
31957: LD_OWVAR 2
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PPUSH
31966: CALL_OW 69
31970: ST_TO_ADDR
// if not tmp then
31971: LD_VAR 0 2
31975: NOT
31976: IFFALSE 31980
// exit ;
31978: GO 32009
// for i in tmp do
31980: LD_ADDR_VAR 0 1
31984: PUSH
31985: LD_VAR 0 2
31989: PUSH
31990: FOR_IN
31991: IFFALSE 32007
// SetLives ( i , 300 ) ;
31993: LD_VAR 0 1
31997: PPUSH
31998: LD_INT 300
32000: PPUSH
32001: CALL_OW 234
32005: GO 31990
32007: POP
32008: POP
// end ;
32009: PPOPN 2
32011: END
// every 0 0$1 trigger s60 do var i , tmp ;
32012: LD_EXP 106
32016: IFFALSE 32085
32018: GO 32020
32020: DISABLE
32021: LD_INT 0
32023: PPUSH
32024: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32025: LD_ADDR_VAR 0 2
32029: PUSH
32030: LD_INT 22
32032: PUSH
32033: LD_OWVAR 2
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PPUSH
32042: CALL_OW 69
32046: ST_TO_ADDR
// if not tmp then
32047: LD_VAR 0 2
32051: NOT
32052: IFFALSE 32056
// exit ;
32054: GO 32085
// for i in tmp do
32056: LD_ADDR_VAR 0 1
32060: PUSH
32061: LD_VAR 0 2
32065: PUSH
32066: FOR_IN
32067: IFFALSE 32083
// SetLives ( i , 600 ) ;
32069: LD_VAR 0 1
32073: PPUSH
32074: LD_INT 600
32076: PPUSH
32077: CALL_OW 234
32081: GO 32066
32083: POP
32084: POP
// end ;
32085: PPOPN 2
32087: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32088: LD_INT 0
32090: PPUSH
// case cmd of 301 :
32091: LD_VAR 0 1
32095: PUSH
32096: LD_INT 301
32098: DOUBLE
32099: EQUAL
32100: IFTRUE 32104
32102: GO 32136
32104: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32105: LD_VAR 0 6
32109: PPUSH
32110: LD_VAR 0 7
32114: PPUSH
32115: LD_VAR 0 8
32119: PPUSH
32120: LD_VAR 0 4
32124: PPUSH
32125: LD_VAR 0 5
32129: PPUSH
32130: CALL 33337 0 5
32134: GO 32257
32136: LD_INT 302
32138: DOUBLE
32139: EQUAL
32140: IFTRUE 32144
32142: GO 32181
32144: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32145: LD_VAR 0 6
32149: PPUSH
32150: LD_VAR 0 7
32154: PPUSH
32155: LD_VAR 0 8
32159: PPUSH
32160: LD_VAR 0 9
32164: PPUSH
32165: LD_VAR 0 4
32169: PPUSH
32170: LD_VAR 0 5
32174: PPUSH
32175: CALL 33428 0 6
32179: GO 32257
32181: LD_INT 303
32183: DOUBLE
32184: EQUAL
32185: IFTRUE 32189
32187: GO 32226
32189: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32190: LD_VAR 0 6
32194: PPUSH
32195: LD_VAR 0 7
32199: PPUSH
32200: LD_VAR 0 8
32204: PPUSH
32205: LD_VAR 0 9
32209: PPUSH
32210: LD_VAR 0 4
32214: PPUSH
32215: LD_VAR 0 5
32219: PPUSH
32220: CALL 32262 0 6
32224: GO 32257
32226: LD_INT 304
32228: DOUBLE
32229: EQUAL
32230: IFTRUE 32234
32232: GO 32256
32234: POP
// hHackTeleport ( unit , x , y ) ; end ;
32235: LD_VAR 0 2
32239: PPUSH
32240: LD_VAR 0 4
32244: PPUSH
32245: LD_VAR 0 5
32249: PPUSH
32250: CALL 34021 0 3
32254: GO 32257
32256: POP
// end ;
32257: LD_VAR 0 12
32261: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32262: LD_INT 0
32264: PPUSH
32265: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32266: LD_VAR 0 1
32270: PUSH
32271: LD_INT 1
32273: LESS
32274: PUSH
32275: LD_VAR 0 1
32279: PUSH
32280: LD_INT 3
32282: GREATER
32283: OR
32284: PUSH
32285: LD_VAR 0 5
32289: PPUSH
32290: LD_VAR 0 6
32294: PPUSH
32295: CALL_OW 428
32299: OR
32300: IFFALSE 32304
// exit ;
32302: GO 33024
// uc_side := your_side ;
32304: LD_ADDR_OWVAR 20
32308: PUSH
32309: LD_OWVAR 2
32313: ST_TO_ADDR
// uc_nation := nation ;
32314: LD_ADDR_OWVAR 21
32318: PUSH
32319: LD_VAR 0 1
32323: ST_TO_ADDR
// bc_level = 1 ;
32324: LD_ADDR_OWVAR 43
32328: PUSH
32329: LD_INT 1
32331: ST_TO_ADDR
// case btype of 1 :
32332: LD_VAR 0 2
32336: PUSH
32337: LD_INT 1
32339: DOUBLE
32340: EQUAL
32341: IFTRUE 32345
32343: GO 32356
32345: POP
// bc_type := b_depot ; 2 :
32346: LD_ADDR_OWVAR 42
32350: PUSH
32351: LD_INT 0
32353: ST_TO_ADDR
32354: GO 32968
32356: LD_INT 2
32358: DOUBLE
32359: EQUAL
32360: IFTRUE 32364
32362: GO 32375
32364: POP
// bc_type := b_warehouse ; 3 :
32365: LD_ADDR_OWVAR 42
32369: PUSH
32370: LD_INT 1
32372: ST_TO_ADDR
32373: GO 32968
32375: LD_INT 3
32377: DOUBLE
32378: EQUAL
32379: IFTRUE 32383
32381: GO 32394
32383: POP
// bc_type := b_lab ; 4 .. 9 :
32384: LD_ADDR_OWVAR 42
32388: PUSH
32389: LD_INT 6
32391: ST_TO_ADDR
32392: GO 32968
32394: LD_INT 4
32396: DOUBLE
32397: GREATEREQUAL
32398: IFFALSE 32406
32400: LD_INT 9
32402: DOUBLE
32403: LESSEQUAL
32404: IFTRUE 32408
32406: GO 32460
32408: POP
// begin bc_type := b_lab_half ;
32409: LD_ADDR_OWVAR 42
32413: PUSH
32414: LD_INT 7
32416: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32417: LD_ADDR_OWVAR 44
32421: PUSH
32422: LD_INT 10
32424: PUSH
32425: LD_INT 11
32427: PUSH
32428: LD_INT 12
32430: PUSH
32431: LD_INT 15
32433: PUSH
32434: LD_INT 14
32436: PUSH
32437: LD_INT 13
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: PUSH
32448: LD_VAR 0 2
32452: PUSH
32453: LD_INT 3
32455: MINUS
32456: ARRAY
32457: ST_TO_ADDR
// end ; 10 .. 13 :
32458: GO 32968
32460: LD_INT 10
32462: DOUBLE
32463: GREATEREQUAL
32464: IFFALSE 32472
32466: LD_INT 13
32468: DOUBLE
32469: LESSEQUAL
32470: IFTRUE 32474
32472: GO 32551
32474: POP
// begin bc_type := b_lab_full ;
32475: LD_ADDR_OWVAR 42
32479: PUSH
32480: LD_INT 8
32482: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32483: LD_ADDR_OWVAR 44
32487: PUSH
32488: LD_INT 10
32490: PUSH
32491: LD_INT 12
32493: PUSH
32494: LD_INT 14
32496: PUSH
32497: LD_INT 13
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: PUSH
32506: LD_VAR 0 2
32510: PUSH
32511: LD_INT 9
32513: MINUS
32514: ARRAY
32515: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32516: LD_ADDR_OWVAR 45
32520: PUSH
32521: LD_INT 11
32523: PUSH
32524: LD_INT 15
32526: PUSH
32527: LD_INT 12
32529: PUSH
32530: LD_INT 15
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: PUSH
32539: LD_VAR 0 2
32543: PUSH
32544: LD_INT 9
32546: MINUS
32547: ARRAY
32548: ST_TO_ADDR
// end ; 14 :
32549: GO 32968
32551: LD_INT 14
32553: DOUBLE
32554: EQUAL
32555: IFTRUE 32559
32557: GO 32570
32559: POP
// bc_type := b_workshop ; 15 :
32560: LD_ADDR_OWVAR 42
32564: PUSH
32565: LD_INT 2
32567: ST_TO_ADDR
32568: GO 32968
32570: LD_INT 15
32572: DOUBLE
32573: EQUAL
32574: IFTRUE 32578
32576: GO 32589
32578: POP
// bc_type := b_factory ; 16 :
32579: LD_ADDR_OWVAR 42
32583: PUSH
32584: LD_INT 3
32586: ST_TO_ADDR
32587: GO 32968
32589: LD_INT 16
32591: DOUBLE
32592: EQUAL
32593: IFTRUE 32597
32595: GO 32608
32597: POP
// bc_type := b_ext_gun ; 17 :
32598: LD_ADDR_OWVAR 42
32602: PUSH
32603: LD_INT 17
32605: ST_TO_ADDR
32606: GO 32968
32608: LD_INT 17
32610: DOUBLE
32611: EQUAL
32612: IFTRUE 32616
32614: GO 32644
32616: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32617: LD_ADDR_OWVAR 42
32621: PUSH
32622: LD_INT 19
32624: PUSH
32625: LD_INT 23
32627: PUSH
32628: LD_INT 19
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: LIST
32635: PUSH
32636: LD_VAR 0 1
32640: ARRAY
32641: ST_TO_ADDR
32642: GO 32968
32644: LD_INT 18
32646: DOUBLE
32647: EQUAL
32648: IFTRUE 32652
32650: GO 32663
32652: POP
// bc_type := b_ext_radar ; 19 :
32653: LD_ADDR_OWVAR 42
32657: PUSH
32658: LD_INT 20
32660: ST_TO_ADDR
32661: GO 32968
32663: LD_INT 19
32665: DOUBLE
32666: EQUAL
32667: IFTRUE 32671
32669: GO 32682
32671: POP
// bc_type := b_ext_radio ; 20 :
32672: LD_ADDR_OWVAR 42
32676: PUSH
32677: LD_INT 22
32679: ST_TO_ADDR
32680: GO 32968
32682: LD_INT 20
32684: DOUBLE
32685: EQUAL
32686: IFTRUE 32690
32688: GO 32701
32690: POP
// bc_type := b_ext_siberium ; 21 :
32691: LD_ADDR_OWVAR 42
32695: PUSH
32696: LD_INT 21
32698: ST_TO_ADDR
32699: GO 32968
32701: LD_INT 21
32703: DOUBLE
32704: EQUAL
32705: IFTRUE 32709
32707: GO 32720
32709: POP
// bc_type := b_ext_computer ; 22 :
32710: LD_ADDR_OWVAR 42
32714: PUSH
32715: LD_INT 24
32717: ST_TO_ADDR
32718: GO 32968
32720: LD_INT 22
32722: DOUBLE
32723: EQUAL
32724: IFTRUE 32728
32726: GO 32739
32728: POP
// bc_type := b_ext_track ; 23 :
32729: LD_ADDR_OWVAR 42
32733: PUSH
32734: LD_INT 16
32736: ST_TO_ADDR
32737: GO 32968
32739: LD_INT 23
32741: DOUBLE
32742: EQUAL
32743: IFTRUE 32747
32745: GO 32758
32747: POP
// bc_type := b_ext_laser ; 24 :
32748: LD_ADDR_OWVAR 42
32752: PUSH
32753: LD_INT 25
32755: ST_TO_ADDR
32756: GO 32968
32758: LD_INT 24
32760: DOUBLE
32761: EQUAL
32762: IFTRUE 32766
32764: GO 32777
32766: POP
// bc_type := b_control_tower ; 25 :
32767: LD_ADDR_OWVAR 42
32771: PUSH
32772: LD_INT 36
32774: ST_TO_ADDR
32775: GO 32968
32777: LD_INT 25
32779: DOUBLE
32780: EQUAL
32781: IFTRUE 32785
32783: GO 32796
32785: POP
// bc_type := b_breastwork ; 26 :
32786: LD_ADDR_OWVAR 42
32790: PUSH
32791: LD_INT 31
32793: ST_TO_ADDR
32794: GO 32968
32796: LD_INT 26
32798: DOUBLE
32799: EQUAL
32800: IFTRUE 32804
32802: GO 32815
32804: POP
// bc_type := b_bunker ; 27 :
32805: LD_ADDR_OWVAR 42
32809: PUSH
32810: LD_INT 32
32812: ST_TO_ADDR
32813: GO 32968
32815: LD_INT 27
32817: DOUBLE
32818: EQUAL
32819: IFTRUE 32823
32821: GO 32834
32823: POP
// bc_type := b_turret ; 28 :
32824: LD_ADDR_OWVAR 42
32828: PUSH
32829: LD_INT 33
32831: ST_TO_ADDR
32832: GO 32968
32834: LD_INT 28
32836: DOUBLE
32837: EQUAL
32838: IFTRUE 32842
32840: GO 32853
32842: POP
// bc_type := b_armoury ; 29 :
32843: LD_ADDR_OWVAR 42
32847: PUSH
32848: LD_INT 4
32850: ST_TO_ADDR
32851: GO 32968
32853: LD_INT 29
32855: DOUBLE
32856: EQUAL
32857: IFTRUE 32861
32859: GO 32872
32861: POP
// bc_type := b_barracks ; 30 :
32862: LD_ADDR_OWVAR 42
32866: PUSH
32867: LD_INT 5
32869: ST_TO_ADDR
32870: GO 32968
32872: LD_INT 30
32874: DOUBLE
32875: EQUAL
32876: IFTRUE 32880
32878: GO 32891
32880: POP
// bc_type := b_solar_power ; 31 :
32881: LD_ADDR_OWVAR 42
32885: PUSH
32886: LD_INT 27
32888: ST_TO_ADDR
32889: GO 32968
32891: LD_INT 31
32893: DOUBLE
32894: EQUAL
32895: IFTRUE 32899
32897: GO 32910
32899: POP
// bc_type := b_oil_power ; 32 :
32900: LD_ADDR_OWVAR 42
32904: PUSH
32905: LD_INT 26
32907: ST_TO_ADDR
32908: GO 32968
32910: LD_INT 32
32912: DOUBLE
32913: EQUAL
32914: IFTRUE 32918
32916: GO 32929
32918: POP
// bc_type := b_siberite_power ; 33 :
32919: LD_ADDR_OWVAR 42
32923: PUSH
32924: LD_INT 28
32926: ST_TO_ADDR
32927: GO 32968
32929: LD_INT 33
32931: DOUBLE
32932: EQUAL
32933: IFTRUE 32937
32935: GO 32948
32937: POP
// bc_type := b_oil_mine ; 34 :
32938: LD_ADDR_OWVAR 42
32942: PUSH
32943: LD_INT 29
32945: ST_TO_ADDR
32946: GO 32968
32948: LD_INT 34
32950: DOUBLE
32951: EQUAL
32952: IFTRUE 32956
32954: GO 32967
32956: POP
// bc_type := b_siberite_mine ; end ;
32957: LD_ADDR_OWVAR 42
32961: PUSH
32962: LD_INT 30
32964: ST_TO_ADDR
32965: GO 32968
32967: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32968: LD_ADDR_VAR 0 8
32972: PUSH
32973: LD_VAR 0 5
32977: PPUSH
32978: LD_VAR 0 6
32982: PPUSH
32983: LD_VAR 0 3
32987: PPUSH
32988: CALL_OW 47
32992: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32993: LD_OWVAR 42
32997: PUSH
32998: LD_INT 32
33000: PUSH
33001: LD_INT 33
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: IN
33008: IFFALSE 33024
// PlaceWeaponTurret ( b , weapon ) ;
33010: LD_VAR 0 8
33014: PPUSH
33015: LD_VAR 0 4
33019: PPUSH
33020: CALL_OW 431
// end ;
33024: LD_VAR 0 7
33028: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33029: LD_INT 0
33031: PPUSH
33032: PPUSH
33033: PPUSH
33034: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33035: LD_ADDR_VAR 0 4
33039: PUSH
33040: LD_INT 22
33042: PUSH
33043: LD_OWVAR 2
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 2
33054: PUSH
33055: LD_INT 30
33057: PUSH
33058: LD_INT 0
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 30
33067: PUSH
33068: LD_INT 1
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: LIST
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PPUSH
33084: CALL_OW 69
33088: ST_TO_ADDR
// if not tmp then
33089: LD_VAR 0 4
33093: NOT
33094: IFFALSE 33098
// exit ;
33096: GO 33157
// for i in tmp do
33098: LD_ADDR_VAR 0 2
33102: PUSH
33103: LD_VAR 0 4
33107: PUSH
33108: FOR_IN
33109: IFFALSE 33155
// for j = 1 to 3 do
33111: LD_ADDR_VAR 0 3
33115: PUSH
33116: DOUBLE
33117: LD_INT 1
33119: DEC
33120: ST_TO_ADDR
33121: LD_INT 3
33123: PUSH
33124: FOR_TO
33125: IFFALSE 33151
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33127: LD_VAR 0 2
33131: PPUSH
33132: CALL_OW 274
33136: PPUSH
33137: LD_VAR 0 3
33141: PPUSH
33142: LD_INT 99999
33144: PPUSH
33145: CALL_OW 277
33149: GO 33124
33151: POP
33152: POP
33153: GO 33108
33155: POP
33156: POP
// end ;
33157: LD_VAR 0 1
33161: RET
// export function hHackSetLevel10 ; var i , j ; begin
33162: LD_INT 0
33164: PPUSH
33165: PPUSH
33166: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33167: LD_ADDR_VAR 0 2
33171: PUSH
33172: LD_INT 21
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PPUSH
33182: CALL_OW 69
33186: PUSH
33187: FOR_IN
33188: IFFALSE 33240
// if IsSelected ( i ) then
33190: LD_VAR 0 2
33194: PPUSH
33195: CALL_OW 306
33199: IFFALSE 33238
// begin for j := 1 to 4 do
33201: LD_ADDR_VAR 0 3
33205: PUSH
33206: DOUBLE
33207: LD_INT 1
33209: DEC
33210: ST_TO_ADDR
33211: LD_INT 4
33213: PUSH
33214: FOR_TO
33215: IFFALSE 33236
// SetSkill ( i , j , 10 ) ;
33217: LD_VAR 0 2
33221: PPUSH
33222: LD_VAR 0 3
33226: PPUSH
33227: LD_INT 10
33229: PPUSH
33230: CALL_OW 237
33234: GO 33214
33236: POP
33237: POP
// end ;
33238: GO 33187
33240: POP
33241: POP
// end ;
33242: LD_VAR 0 1
33246: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33247: LD_INT 0
33249: PPUSH
33250: PPUSH
33251: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33252: LD_ADDR_VAR 0 2
33256: PUSH
33257: LD_INT 22
33259: PUSH
33260: LD_OWVAR 2
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 21
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PPUSH
33283: CALL_OW 69
33287: PUSH
33288: FOR_IN
33289: IFFALSE 33330
// begin for j := 1 to 4 do
33291: LD_ADDR_VAR 0 3
33295: PUSH
33296: DOUBLE
33297: LD_INT 1
33299: DEC
33300: ST_TO_ADDR
33301: LD_INT 4
33303: PUSH
33304: FOR_TO
33305: IFFALSE 33326
// SetSkill ( i , j , 10 ) ;
33307: LD_VAR 0 2
33311: PPUSH
33312: LD_VAR 0 3
33316: PPUSH
33317: LD_INT 10
33319: PPUSH
33320: CALL_OW 237
33324: GO 33304
33326: POP
33327: POP
// end ;
33328: GO 33288
33330: POP
33331: POP
// end ;
33332: LD_VAR 0 1
33336: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33337: LD_INT 0
33339: PPUSH
// uc_side := your_side ;
33340: LD_ADDR_OWVAR 20
33344: PUSH
33345: LD_OWVAR 2
33349: ST_TO_ADDR
// uc_nation := nation ;
33350: LD_ADDR_OWVAR 21
33354: PUSH
33355: LD_VAR 0 1
33359: ST_TO_ADDR
// InitHc ;
33360: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33364: LD_INT 0
33366: PPUSH
33367: LD_VAR 0 2
33371: PPUSH
33372: LD_VAR 0 3
33376: PPUSH
33377: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33381: LD_VAR 0 4
33385: PPUSH
33386: LD_VAR 0 5
33390: PPUSH
33391: CALL_OW 428
33395: PUSH
33396: LD_INT 0
33398: EQUAL
33399: IFFALSE 33423
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33401: CALL_OW 44
33405: PPUSH
33406: LD_VAR 0 4
33410: PPUSH
33411: LD_VAR 0 5
33415: PPUSH
33416: LD_INT 1
33418: PPUSH
33419: CALL_OW 48
// end ;
33423: LD_VAR 0 6
33427: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33428: LD_INT 0
33430: PPUSH
33431: PPUSH
// uc_side := your_side ;
33432: LD_ADDR_OWVAR 20
33436: PUSH
33437: LD_OWVAR 2
33441: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33442: LD_VAR 0 1
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: LD_INT 2
33452: PUSH
33453: LD_INT 3
33455: PUSH
33456: LD_INT 4
33458: PUSH
33459: LD_INT 5
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: IN
33469: IFFALSE 33481
// uc_nation := nation_american else
33471: LD_ADDR_OWVAR 21
33475: PUSH
33476: LD_INT 1
33478: ST_TO_ADDR
33479: GO 33524
// if chassis in [ 11 , 12 , 13 , 14 ] then
33481: LD_VAR 0 1
33485: PUSH
33486: LD_INT 11
33488: PUSH
33489: LD_INT 12
33491: PUSH
33492: LD_INT 13
33494: PUSH
33495: LD_INT 14
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: IN
33504: IFFALSE 33516
// uc_nation := nation_arabian else
33506: LD_ADDR_OWVAR 21
33510: PUSH
33511: LD_INT 2
33513: ST_TO_ADDR
33514: GO 33524
// uc_nation := nation_russian ;
33516: LD_ADDR_OWVAR 21
33520: PUSH
33521: LD_INT 3
33523: ST_TO_ADDR
// vc_chassis := chassis ;
33524: LD_ADDR_OWVAR 37
33528: PUSH
33529: LD_VAR 0 1
33533: ST_TO_ADDR
// vc_engine := engine ;
33534: LD_ADDR_OWVAR 39
33538: PUSH
33539: LD_VAR 0 2
33543: ST_TO_ADDR
// vc_control := control ;
33544: LD_ADDR_OWVAR 38
33548: PUSH
33549: LD_VAR 0 3
33553: ST_TO_ADDR
// vc_weapon := weapon ;
33554: LD_ADDR_OWVAR 40
33558: PUSH
33559: LD_VAR 0 4
33563: ST_TO_ADDR
// un := CreateVehicle ;
33564: LD_ADDR_VAR 0 8
33568: PUSH
33569: CALL_OW 45
33573: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33574: LD_VAR 0 8
33578: PPUSH
33579: LD_INT 0
33581: PPUSH
33582: LD_INT 5
33584: PPUSH
33585: CALL_OW 12
33589: PPUSH
33590: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33594: LD_VAR 0 8
33598: PPUSH
33599: LD_VAR 0 5
33603: PPUSH
33604: LD_VAR 0 6
33608: PPUSH
33609: LD_INT 1
33611: PPUSH
33612: CALL_OW 48
// end ;
33616: LD_VAR 0 7
33620: RET
// export hInvincible ; every 1 do
33621: GO 33623
33623: DISABLE
// hInvincible := [ ] ;
33624: LD_ADDR_EXP 107
33628: PUSH
33629: EMPTY
33630: ST_TO_ADDR
33631: END
// every 10 do var i ;
33632: GO 33634
33634: DISABLE
33635: LD_INT 0
33637: PPUSH
// begin enable ;
33638: ENABLE
// if not hInvincible then
33639: LD_EXP 107
33643: NOT
33644: IFFALSE 33648
// exit ;
33646: GO 33692
// for i in hInvincible do
33648: LD_ADDR_VAR 0 1
33652: PUSH
33653: LD_EXP 107
33657: PUSH
33658: FOR_IN
33659: IFFALSE 33690
// if GetLives ( i ) < 1000 then
33661: LD_VAR 0 1
33665: PPUSH
33666: CALL_OW 256
33670: PUSH
33671: LD_INT 1000
33673: LESS
33674: IFFALSE 33688
// SetLives ( i , 1000 ) ;
33676: LD_VAR 0 1
33680: PPUSH
33681: LD_INT 1000
33683: PPUSH
33684: CALL_OW 234
33688: GO 33658
33690: POP
33691: POP
// end ;
33692: PPOPN 1
33694: END
// export function hHackInvincible ; var i ; begin
33695: LD_INT 0
33697: PPUSH
33698: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33699: LD_ADDR_VAR 0 2
33703: PUSH
33704: LD_INT 2
33706: PUSH
33707: LD_INT 21
33709: PUSH
33710: LD_INT 1
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 21
33719: PUSH
33720: LD_INT 2
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: LIST
33731: PPUSH
33732: CALL_OW 69
33736: PUSH
33737: FOR_IN
33738: IFFALSE 33799
// if IsSelected ( i ) then
33740: LD_VAR 0 2
33744: PPUSH
33745: CALL_OW 306
33749: IFFALSE 33797
// begin if i in hInvincible then
33751: LD_VAR 0 2
33755: PUSH
33756: LD_EXP 107
33760: IN
33761: IFFALSE 33781
// hInvincible := hInvincible diff i else
33763: LD_ADDR_EXP 107
33767: PUSH
33768: LD_EXP 107
33772: PUSH
33773: LD_VAR 0 2
33777: DIFF
33778: ST_TO_ADDR
33779: GO 33797
// hInvincible := hInvincible union i ;
33781: LD_ADDR_EXP 107
33785: PUSH
33786: LD_EXP 107
33790: PUSH
33791: LD_VAR 0 2
33795: UNION
33796: ST_TO_ADDR
// end ;
33797: GO 33737
33799: POP
33800: POP
// end ;
33801: LD_VAR 0 1
33805: RET
// export function hHackInvisible ; var i , j ; begin
33806: LD_INT 0
33808: PPUSH
33809: PPUSH
33810: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33811: LD_ADDR_VAR 0 2
33815: PUSH
33816: LD_INT 21
33818: PUSH
33819: LD_INT 1
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PPUSH
33826: CALL_OW 69
33830: PUSH
33831: FOR_IN
33832: IFFALSE 33856
// if IsSelected ( i ) then
33834: LD_VAR 0 2
33838: PPUSH
33839: CALL_OW 306
33843: IFFALSE 33854
// ComForceInvisible ( i ) ;
33845: LD_VAR 0 2
33849: PPUSH
33850: CALL_OW 496
33854: GO 33831
33856: POP
33857: POP
// end ;
33858: LD_VAR 0 1
33862: RET
// export function hHackChangeYourSide ; begin
33863: LD_INT 0
33865: PPUSH
// if your_side = 8 then
33866: LD_OWVAR 2
33870: PUSH
33871: LD_INT 8
33873: EQUAL
33874: IFFALSE 33886
// your_side := 0 else
33876: LD_ADDR_OWVAR 2
33880: PUSH
33881: LD_INT 0
33883: ST_TO_ADDR
33884: GO 33900
// your_side := your_side + 1 ;
33886: LD_ADDR_OWVAR 2
33890: PUSH
33891: LD_OWVAR 2
33895: PUSH
33896: LD_INT 1
33898: PLUS
33899: ST_TO_ADDR
// end ;
33900: LD_VAR 0 1
33904: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33905: LD_INT 0
33907: PPUSH
33908: PPUSH
33909: PPUSH
// for i in all_units do
33910: LD_ADDR_VAR 0 2
33914: PUSH
33915: LD_OWVAR 3
33919: PUSH
33920: FOR_IN
33921: IFFALSE 33999
// if IsSelected ( i ) then
33923: LD_VAR 0 2
33927: PPUSH
33928: CALL_OW 306
33932: IFFALSE 33997
// begin j := GetSide ( i ) ;
33934: LD_ADDR_VAR 0 3
33938: PUSH
33939: LD_VAR 0 2
33943: PPUSH
33944: CALL_OW 255
33948: ST_TO_ADDR
// if j = 8 then
33949: LD_VAR 0 3
33953: PUSH
33954: LD_INT 8
33956: EQUAL
33957: IFFALSE 33969
// j := 0 else
33959: LD_ADDR_VAR 0 3
33963: PUSH
33964: LD_INT 0
33966: ST_TO_ADDR
33967: GO 33983
// j := j + 1 ;
33969: LD_ADDR_VAR 0 3
33973: PUSH
33974: LD_VAR 0 3
33978: PUSH
33979: LD_INT 1
33981: PLUS
33982: ST_TO_ADDR
// SetSide ( i , j ) ;
33983: LD_VAR 0 2
33987: PPUSH
33988: LD_VAR 0 3
33992: PPUSH
33993: CALL_OW 235
// end ;
33997: GO 33920
33999: POP
34000: POP
// end ;
34001: LD_VAR 0 1
34005: RET
// export function hHackFog ; begin
34006: LD_INT 0
34008: PPUSH
// FogOff ( true ) ;
34009: LD_INT 1
34011: PPUSH
34012: CALL_OW 344
// end ;
34016: LD_VAR 0 1
34020: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34021: LD_INT 0
34023: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34024: LD_VAR 0 1
34028: PPUSH
34029: LD_VAR 0 2
34033: PPUSH
34034: LD_VAR 0 3
34038: PPUSH
34039: LD_INT 1
34041: PPUSH
34042: LD_INT 1
34044: PPUSH
34045: CALL_OW 483
// CenterOnXY ( x , y ) ;
34049: LD_VAR 0 2
34053: PPUSH
34054: LD_VAR 0 3
34058: PPUSH
34059: CALL_OW 84
// end ;
34063: LD_VAR 0 4
34067: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34068: LD_INT 0
34070: PPUSH
34071: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34072: LD_VAR 0 1
34076: NOT
34077: PUSH
34078: LD_VAR 0 2
34082: PPUSH
34083: LD_VAR 0 3
34087: PPUSH
34088: CALL_OW 488
34092: NOT
34093: OR
34094: PUSH
34095: LD_VAR 0 1
34099: PPUSH
34100: CALL_OW 266
34104: PUSH
34105: LD_INT 3
34107: NONEQUAL
34108: PUSH
34109: LD_VAR 0 1
34113: PPUSH
34114: CALL_OW 247
34118: PUSH
34119: LD_INT 1
34121: EQUAL
34122: NOT
34123: AND
34124: OR
34125: IFFALSE 34129
// exit ;
34127: GO 34278
// if GetType ( factory ) = unit_human then
34129: LD_VAR 0 1
34133: PPUSH
34134: CALL_OW 247
34138: PUSH
34139: LD_INT 1
34141: EQUAL
34142: IFFALSE 34159
// factory := IsInUnit ( factory ) ;
34144: LD_ADDR_VAR 0 1
34148: PUSH
34149: LD_VAR 0 1
34153: PPUSH
34154: CALL_OW 310
34158: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34159: LD_VAR 0 1
34163: PPUSH
34164: CALL_OW 266
34168: PUSH
34169: LD_INT 3
34171: NONEQUAL
34172: IFFALSE 34176
// exit ;
34174: GO 34278
// if HexInfo ( x , y ) = factory then
34176: LD_VAR 0 2
34180: PPUSH
34181: LD_VAR 0 3
34185: PPUSH
34186: CALL_OW 428
34190: PUSH
34191: LD_VAR 0 1
34195: EQUAL
34196: IFFALSE 34223
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34198: LD_ADDR_EXP 108
34202: PUSH
34203: LD_EXP 108
34207: PPUSH
34208: LD_VAR 0 1
34212: PPUSH
34213: LD_INT 0
34215: PPUSH
34216: CALL_OW 1
34220: ST_TO_ADDR
34221: GO 34274
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34223: LD_ADDR_EXP 108
34227: PUSH
34228: LD_EXP 108
34232: PPUSH
34233: LD_VAR 0 1
34237: PPUSH
34238: LD_VAR 0 1
34242: PPUSH
34243: CALL_OW 255
34247: PUSH
34248: LD_VAR 0 1
34252: PUSH
34253: LD_VAR 0 2
34257: PUSH
34258: LD_VAR 0 3
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: PPUSH
34269: CALL_OW 1
34273: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34274: CALL 34283 0 0
// end ;
34278: LD_VAR 0 4
34282: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34283: LD_INT 0
34285: PPUSH
34286: PPUSH
34287: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34288: LD_STRING resetFactoryWaypoint();
34290: PPUSH
34291: CALL_OW 559
// if factoryWaypoints then
34295: LD_EXP 108
34299: IFFALSE 34425
// begin list := PrepareArray ( factoryWaypoints ) ;
34301: LD_ADDR_VAR 0 3
34305: PUSH
34306: LD_EXP 108
34310: PPUSH
34311: CALL 80802 0 1
34315: ST_TO_ADDR
// for i := 1 to list do
34316: LD_ADDR_VAR 0 2
34320: PUSH
34321: DOUBLE
34322: LD_INT 1
34324: DEC
34325: ST_TO_ADDR
34326: LD_VAR 0 3
34330: PUSH
34331: FOR_TO
34332: IFFALSE 34423
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34334: LD_STRING setFactoryWaypointXY(
34336: PUSH
34337: LD_VAR 0 3
34341: PUSH
34342: LD_VAR 0 2
34346: ARRAY
34347: PUSH
34348: LD_INT 1
34350: ARRAY
34351: STR
34352: PUSH
34353: LD_STRING ,
34355: STR
34356: PUSH
34357: LD_VAR 0 3
34361: PUSH
34362: LD_VAR 0 2
34366: ARRAY
34367: PUSH
34368: LD_INT 2
34370: ARRAY
34371: STR
34372: PUSH
34373: LD_STRING ,
34375: STR
34376: PUSH
34377: LD_VAR 0 3
34381: PUSH
34382: LD_VAR 0 2
34386: ARRAY
34387: PUSH
34388: LD_INT 3
34390: ARRAY
34391: STR
34392: PUSH
34393: LD_STRING ,
34395: STR
34396: PUSH
34397: LD_VAR 0 3
34401: PUSH
34402: LD_VAR 0 2
34406: ARRAY
34407: PUSH
34408: LD_INT 4
34410: ARRAY
34411: STR
34412: PUSH
34413: LD_STRING )
34415: STR
34416: PPUSH
34417: CALL_OW 559
34421: GO 34331
34423: POP
34424: POP
// end ; end ;
34425: LD_VAR 0 1
34429: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34430: LD_INT 0
34432: PPUSH
// if HexInfo ( x , y ) = warehouse then
34433: LD_VAR 0 2
34437: PPUSH
34438: LD_VAR 0 3
34442: PPUSH
34443: CALL_OW 428
34447: PUSH
34448: LD_VAR 0 1
34452: EQUAL
34453: IFFALSE 34480
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34455: LD_ADDR_EXP 109
34459: PUSH
34460: LD_EXP 109
34464: PPUSH
34465: LD_VAR 0 1
34469: PPUSH
34470: LD_INT 0
34472: PPUSH
34473: CALL_OW 1
34477: ST_TO_ADDR
34478: GO 34531
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34480: LD_ADDR_EXP 109
34484: PUSH
34485: LD_EXP 109
34489: PPUSH
34490: LD_VAR 0 1
34494: PPUSH
34495: LD_VAR 0 1
34499: PPUSH
34500: CALL_OW 255
34504: PUSH
34505: LD_VAR 0 1
34509: PUSH
34510: LD_VAR 0 2
34514: PUSH
34515: LD_VAR 0 3
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: PPUSH
34526: CALL_OW 1
34530: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34531: CALL 34540 0 0
// end ;
34535: LD_VAR 0 4
34539: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34540: LD_INT 0
34542: PPUSH
34543: PPUSH
34544: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34545: LD_STRING resetWarehouseGatheringPoints();
34547: PPUSH
34548: CALL_OW 559
// if warehouseGatheringPoints then
34552: LD_EXP 109
34556: IFFALSE 34682
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34558: LD_ADDR_VAR 0 3
34562: PUSH
34563: LD_EXP 109
34567: PPUSH
34568: CALL 80802 0 1
34572: ST_TO_ADDR
// for i := 1 to list do
34573: LD_ADDR_VAR 0 2
34577: PUSH
34578: DOUBLE
34579: LD_INT 1
34581: DEC
34582: ST_TO_ADDR
34583: LD_VAR 0 3
34587: PUSH
34588: FOR_TO
34589: IFFALSE 34680
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34591: LD_STRING setWarehouseGatheringPointXY(
34593: PUSH
34594: LD_VAR 0 3
34598: PUSH
34599: LD_VAR 0 2
34603: ARRAY
34604: PUSH
34605: LD_INT 1
34607: ARRAY
34608: STR
34609: PUSH
34610: LD_STRING ,
34612: STR
34613: PUSH
34614: LD_VAR 0 3
34618: PUSH
34619: LD_VAR 0 2
34623: ARRAY
34624: PUSH
34625: LD_INT 2
34627: ARRAY
34628: STR
34629: PUSH
34630: LD_STRING ,
34632: STR
34633: PUSH
34634: LD_VAR 0 3
34638: PUSH
34639: LD_VAR 0 2
34643: ARRAY
34644: PUSH
34645: LD_INT 3
34647: ARRAY
34648: STR
34649: PUSH
34650: LD_STRING ,
34652: STR
34653: PUSH
34654: LD_VAR 0 3
34658: PUSH
34659: LD_VAR 0 2
34663: ARRAY
34664: PUSH
34665: LD_INT 4
34667: ARRAY
34668: STR
34669: PUSH
34670: LD_STRING )
34672: STR
34673: PPUSH
34674: CALL_OW 559
34678: GO 34588
34680: POP
34681: POP
// end ; end ;
34682: LD_VAR 0 1
34686: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34687: LD_EXP 109
34691: IFFALSE 35376
34693: GO 34695
34695: DISABLE
34696: LD_INT 0
34698: PPUSH
34699: PPUSH
34700: PPUSH
34701: PPUSH
34702: PPUSH
34703: PPUSH
34704: PPUSH
34705: PPUSH
34706: PPUSH
// begin enable ;
34707: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34708: LD_ADDR_VAR 0 3
34712: PUSH
34713: LD_EXP 109
34717: PPUSH
34718: CALL 80802 0 1
34722: ST_TO_ADDR
// if not list then
34723: LD_VAR 0 3
34727: NOT
34728: IFFALSE 34732
// exit ;
34730: GO 35376
// for i := 1 to list do
34732: LD_ADDR_VAR 0 1
34736: PUSH
34737: DOUBLE
34738: LD_INT 1
34740: DEC
34741: ST_TO_ADDR
34742: LD_VAR 0 3
34746: PUSH
34747: FOR_TO
34748: IFFALSE 35374
// begin depot := list [ i ] [ 2 ] ;
34750: LD_ADDR_VAR 0 8
34754: PUSH
34755: LD_VAR 0 3
34759: PUSH
34760: LD_VAR 0 1
34764: ARRAY
34765: PUSH
34766: LD_INT 2
34768: ARRAY
34769: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34770: LD_ADDR_VAR 0 5
34774: PUSH
34775: LD_VAR 0 3
34779: PUSH
34780: LD_VAR 0 1
34784: ARRAY
34785: PUSH
34786: LD_INT 1
34788: ARRAY
34789: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34790: LD_VAR 0 8
34794: PPUSH
34795: CALL_OW 301
34799: PUSH
34800: LD_VAR 0 5
34804: PUSH
34805: LD_VAR 0 8
34809: PPUSH
34810: CALL_OW 255
34814: NONEQUAL
34815: OR
34816: IFFALSE 34845
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34818: LD_ADDR_EXP 109
34822: PUSH
34823: LD_EXP 109
34827: PPUSH
34828: LD_VAR 0 8
34832: PPUSH
34833: LD_INT 0
34835: PPUSH
34836: CALL_OW 1
34840: ST_TO_ADDR
// exit ;
34841: POP
34842: POP
34843: GO 35376
// end ; x := list [ i ] [ 3 ] ;
34845: LD_ADDR_VAR 0 6
34849: PUSH
34850: LD_VAR 0 3
34854: PUSH
34855: LD_VAR 0 1
34859: ARRAY
34860: PUSH
34861: LD_INT 3
34863: ARRAY
34864: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34865: LD_ADDR_VAR 0 7
34869: PUSH
34870: LD_VAR 0 3
34874: PUSH
34875: LD_VAR 0 1
34879: ARRAY
34880: PUSH
34881: LD_INT 4
34883: ARRAY
34884: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34885: LD_ADDR_VAR 0 9
34889: PUSH
34890: LD_VAR 0 6
34894: PPUSH
34895: LD_VAR 0 7
34899: PPUSH
34900: LD_INT 16
34902: PPUSH
34903: CALL 79390 0 3
34907: ST_TO_ADDR
// if not cratesNearbyPoint then
34908: LD_VAR 0 9
34912: NOT
34913: IFFALSE 34919
// exit ;
34915: POP
34916: POP
34917: GO 35376
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34919: LD_ADDR_VAR 0 4
34923: PUSH
34924: LD_INT 22
34926: PUSH
34927: LD_VAR 0 5
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 3
34938: PUSH
34939: LD_INT 60
34941: PUSH
34942: EMPTY
34943: LIST
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 91
34951: PUSH
34952: LD_VAR 0 8
34956: PUSH
34957: LD_INT 6
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: LD_INT 25
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 25
34980: PUSH
34981: LD_INT 16
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: LIST
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: PPUSH
34999: CALL_OW 69
35003: PUSH
35004: LD_VAR 0 8
35008: PPUSH
35009: CALL_OW 313
35013: PPUSH
35014: LD_INT 3
35016: PUSH
35017: LD_INT 60
35019: PUSH
35020: EMPTY
35021: LIST
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 2
35029: PUSH
35030: LD_INT 25
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 25
35042: PUSH
35043: LD_INT 16
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: LIST
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PPUSH
35059: CALL_OW 72
35063: UNION
35064: ST_TO_ADDR
// if tmp then
35065: LD_VAR 0 4
35069: IFFALSE 35149
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35071: LD_ADDR_VAR 0 4
35075: PUSH
35076: LD_VAR 0 4
35080: PPUSH
35081: LD_INT 3
35083: PPUSH
35084: CALL 77359 0 2
35088: ST_TO_ADDR
// for j in tmp do
35089: LD_ADDR_VAR 0 2
35093: PUSH
35094: LD_VAR 0 4
35098: PUSH
35099: FOR_IN
35100: IFFALSE 35143
// begin if IsInUnit ( j ) then
35102: LD_VAR 0 2
35106: PPUSH
35107: CALL_OW 310
35111: IFFALSE 35122
// ComExit ( j ) ;
35113: LD_VAR 0 2
35117: PPUSH
35118: CALL 77442 0 1
// AddComCollect ( j , x , y ) ;
35122: LD_VAR 0 2
35126: PPUSH
35127: LD_VAR 0 6
35131: PPUSH
35132: LD_VAR 0 7
35136: PPUSH
35137: CALL_OW 177
// end ;
35141: GO 35099
35143: POP
35144: POP
// exit ;
35145: POP
35146: POP
35147: GO 35376
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35149: LD_ADDR_VAR 0 4
35153: PUSH
35154: LD_INT 22
35156: PUSH
35157: LD_VAR 0 5
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 91
35168: PUSH
35169: LD_VAR 0 8
35173: PUSH
35174: LD_INT 8
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 2
35184: PUSH
35185: LD_INT 34
35187: PUSH
35188: LD_INT 12
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 34
35197: PUSH
35198: LD_INT 51
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 34
35207: PUSH
35208: LD_INT 32
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 34
35217: PUSH
35218: LD_INT 89
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: LIST
35236: PPUSH
35237: CALL_OW 69
35241: ST_TO_ADDR
// if tmp then
35242: LD_VAR 0 4
35246: IFFALSE 35372
// begin for j in tmp do
35248: LD_ADDR_VAR 0 2
35252: PUSH
35253: LD_VAR 0 4
35257: PUSH
35258: FOR_IN
35259: IFFALSE 35370
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35261: LD_VAR 0 2
35265: PPUSH
35266: CALL_OW 262
35270: PUSH
35271: LD_INT 3
35273: EQUAL
35274: PUSH
35275: LD_VAR 0 2
35279: PPUSH
35280: CALL_OW 261
35284: PUSH
35285: LD_INT 20
35287: GREATER
35288: OR
35289: PUSH
35290: LD_VAR 0 2
35294: PPUSH
35295: CALL_OW 314
35299: NOT
35300: AND
35301: PUSH
35302: LD_VAR 0 2
35306: PPUSH
35307: CALL_OW 263
35311: PUSH
35312: LD_INT 1
35314: NONEQUAL
35315: PUSH
35316: LD_VAR 0 2
35320: PPUSH
35321: CALL_OW 311
35325: OR
35326: AND
35327: IFFALSE 35368
// begin ComCollect ( j , x , y ) ;
35329: LD_VAR 0 2
35333: PPUSH
35334: LD_VAR 0 6
35338: PPUSH
35339: LD_VAR 0 7
35343: PPUSH
35344: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35348: LD_VAR 0 2
35352: PPUSH
35353: LD_VAR 0 8
35357: PPUSH
35358: CALL_OW 172
// exit ;
35362: POP
35363: POP
35364: POP
35365: POP
35366: GO 35376
// end ;
35368: GO 35258
35370: POP
35371: POP
// end ; end ;
35372: GO 34747
35374: POP
35375: POP
// end ; end_of_file
35376: PPOPN 9
35378: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35379: LD_INT 0
35381: PPUSH
35382: PPUSH
35383: PPUSH
35384: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35385: LD_VAR 0 1
35389: PPUSH
35390: CALL_OW 264
35394: PUSH
35395: LD_INT 91
35397: EQUAL
35398: IFFALSE 35470
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35400: LD_INT 68
35402: PPUSH
35403: LD_VAR 0 1
35407: PPUSH
35408: CALL_OW 255
35412: PPUSH
35413: CALL_OW 321
35417: PUSH
35418: LD_INT 2
35420: EQUAL
35421: IFFALSE 35433
// eff := 70 else
35423: LD_ADDR_VAR 0 4
35427: PUSH
35428: LD_INT 70
35430: ST_TO_ADDR
35431: GO 35441
// eff := 30 ;
35433: LD_ADDR_VAR 0 4
35437: PUSH
35438: LD_INT 30
35440: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35441: LD_VAR 0 1
35445: PPUSH
35446: CALL_OW 250
35450: PPUSH
35451: LD_VAR 0 1
35455: PPUSH
35456: CALL_OW 251
35460: PPUSH
35461: LD_VAR 0 4
35465: PPUSH
35466: CALL_OW 495
// end ; end ;
35470: LD_VAR 0 2
35474: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35475: LD_INT 0
35477: PPUSH
// end ;
35478: LD_VAR 0 4
35482: RET
// export function SOS_Command ( cmd ) ; begin
35483: LD_INT 0
35485: PPUSH
// end ;
35486: LD_VAR 0 2
35490: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35491: LD_INT 0
35493: PPUSH
// end ;
35494: LD_VAR 0 6
35498: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35499: LD_INT 0
35501: PPUSH
35502: PPUSH
// if not vehicle or not factory then
35503: LD_VAR 0 1
35507: NOT
35508: PUSH
35509: LD_VAR 0 2
35513: NOT
35514: OR
35515: IFFALSE 35519
// exit ;
35517: GO 35750
// if factoryWaypoints >= factory then
35519: LD_EXP 108
35523: PUSH
35524: LD_VAR 0 2
35528: GREATEREQUAL
35529: IFFALSE 35750
// if factoryWaypoints [ factory ] then
35531: LD_EXP 108
35535: PUSH
35536: LD_VAR 0 2
35540: ARRAY
35541: IFFALSE 35750
// begin if GetControl ( vehicle ) = control_manual then
35543: LD_VAR 0 1
35547: PPUSH
35548: CALL_OW 263
35552: PUSH
35553: LD_INT 1
35555: EQUAL
35556: IFFALSE 35637
// begin driver := IsDrivenBy ( vehicle ) ;
35558: LD_ADDR_VAR 0 4
35562: PUSH
35563: LD_VAR 0 1
35567: PPUSH
35568: CALL_OW 311
35572: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35573: LD_VAR 0 4
35577: PPUSH
35578: LD_EXP 108
35582: PUSH
35583: LD_VAR 0 2
35587: ARRAY
35588: PUSH
35589: LD_INT 3
35591: ARRAY
35592: PPUSH
35593: LD_EXP 108
35597: PUSH
35598: LD_VAR 0 2
35602: ARRAY
35603: PUSH
35604: LD_INT 4
35606: ARRAY
35607: PPUSH
35608: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35612: LD_VAR 0 4
35616: PPUSH
35617: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35621: LD_VAR 0 4
35625: PPUSH
35626: LD_VAR 0 2
35630: PPUSH
35631: CALL_OW 180
// end else
35635: GO 35750
// if GetControl ( vehicle ) = control_remote then
35637: LD_VAR 0 1
35641: PPUSH
35642: CALL_OW 263
35646: PUSH
35647: LD_INT 2
35649: EQUAL
35650: IFFALSE 35711
// begin wait ( 0 0$2 ) ;
35652: LD_INT 70
35654: PPUSH
35655: CALL_OW 67
// if Connect ( vehicle ) then
35659: LD_VAR 0 1
35663: PPUSH
35664: CALL 47774 0 1
35668: IFFALSE 35709
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35670: LD_VAR 0 1
35674: PPUSH
35675: LD_EXP 108
35679: PUSH
35680: LD_VAR 0 2
35684: ARRAY
35685: PUSH
35686: LD_INT 3
35688: ARRAY
35689: PPUSH
35690: LD_EXP 108
35694: PUSH
35695: LD_VAR 0 2
35699: ARRAY
35700: PUSH
35701: LD_INT 4
35703: ARRAY
35704: PPUSH
35705: CALL_OW 171
// end else
35709: GO 35750
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35711: LD_VAR 0 1
35715: PPUSH
35716: LD_EXP 108
35720: PUSH
35721: LD_VAR 0 2
35725: ARRAY
35726: PUSH
35727: LD_INT 3
35729: ARRAY
35730: PPUSH
35731: LD_EXP 108
35735: PUSH
35736: LD_VAR 0 2
35740: ARRAY
35741: PUSH
35742: LD_INT 4
35744: ARRAY
35745: PPUSH
35746: CALL_OW 171
// end ; end ;
35750: LD_VAR 0 3
35754: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35755: LD_INT 0
35757: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35758: LD_VAR 0 1
35762: PUSH
35763: LD_INT 250
35765: EQUAL
35766: PUSH
35767: LD_VAR 0 2
35771: PPUSH
35772: CALL_OW 264
35776: PUSH
35777: LD_INT 81
35779: EQUAL
35780: AND
35781: IFFALSE 35802
// MinerPlaceMine ( unit , x , y ) ;
35783: LD_VAR 0 2
35787: PPUSH
35788: LD_VAR 0 4
35792: PPUSH
35793: LD_VAR 0 5
35797: PPUSH
35798: CALL 38187 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35802: LD_VAR 0 1
35806: PUSH
35807: LD_INT 251
35809: EQUAL
35810: PUSH
35811: LD_VAR 0 2
35815: PPUSH
35816: CALL_OW 264
35820: PUSH
35821: LD_INT 81
35823: EQUAL
35824: AND
35825: IFFALSE 35846
// MinerDetonateMine ( unit , x , y ) ;
35827: LD_VAR 0 2
35831: PPUSH
35832: LD_VAR 0 4
35836: PPUSH
35837: LD_VAR 0 5
35841: PPUSH
35842: CALL 38462 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35846: LD_VAR 0 1
35850: PUSH
35851: LD_INT 252
35853: EQUAL
35854: PUSH
35855: LD_VAR 0 2
35859: PPUSH
35860: CALL_OW 264
35864: PUSH
35865: LD_INT 81
35867: EQUAL
35868: AND
35869: IFFALSE 35890
// MinerCreateMinefield ( unit , x , y ) ;
35871: LD_VAR 0 2
35875: PPUSH
35876: LD_VAR 0 4
35880: PPUSH
35881: LD_VAR 0 5
35885: PPUSH
35886: CALL 38879 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35890: LD_VAR 0 1
35894: PUSH
35895: LD_INT 253
35897: EQUAL
35898: PUSH
35899: LD_VAR 0 2
35903: PPUSH
35904: CALL_OW 257
35908: PUSH
35909: LD_INT 5
35911: EQUAL
35912: AND
35913: IFFALSE 35934
// ComBinocular ( unit , x , y ) ;
35915: LD_VAR 0 2
35919: PPUSH
35920: LD_VAR 0 4
35924: PPUSH
35925: LD_VAR 0 5
35929: PPUSH
35930: CALL 39248 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35934: LD_VAR 0 1
35938: PUSH
35939: LD_INT 254
35941: EQUAL
35942: PUSH
35943: LD_VAR 0 2
35947: PPUSH
35948: CALL_OW 264
35952: PUSH
35953: LD_INT 99
35955: EQUAL
35956: AND
35957: PUSH
35958: LD_VAR 0 3
35962: PPUSH
35963: CALL_OW 263
35967: PUSH
35968: LD_INT 3
35970: EQUAL
35971: AND
35972: IFFALSE 35988
// HackDestroyVehicle ( unit , selectedUnit ) ;
35974: LD_VAR 0 2
35978: PPUSH
35979: LD_VAR 0 3
35983: PPUSH
35984: CALL 37551 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35988: LD_VAR 0 1
35992: PUSH
35993: LD_INT 255
35995: EQUAL
35996: PUSH
35997: LD_VAR 0 2
36001: PPUSH
36002: CALL_OW 264
36006: PUSH
36007: LD_INT 14
36009: PUSH
36010: LD_INT 53
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: IN
36017: AND
36018: PUSH
36019: LD_VAR 0 4
36023: PPUSH
36024: LD_VAR 0 5
36028: PPUSH
36029: CALL_OW 488
36033: AND
36034: IFFALSE 36058
// CutTreeXYR ( unit , x , y , 12 ) ;
36036: LD_VAR 0 2
36040: PPUSH
36041: LD_VAR 0 4
36045: PPUSH
36046: LD_VAR 0 5
36050: PPUSH
36051: LD_INT 12
36053: PPUSH
36054: CALL 36121 0 4
// if cmd = 256 then
36058: LD_VAR 0 1
36062: PUSH
36063: LD_INT 256
36065: EQUAL
36066: IFFALSE 36087
// SetFactoryWaypoint ( unit , x , y ) ;
36068: LD_VAR 0 2
36072: PPUSH
36073: LD_VAR 0 4
36077: PPUSH
36078: LD_VAR 0 5
36082: PPUSH
36083: CALL 34068 0 3
// if cmd = 257 then
36087: LD_VAR 0 1
36091: PUSH
36092: LD_INT 257
36094: EQUAL
36095: IFFALSE 36116
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36097: LD_VAR 0 2
36101: PPUSH
36102: LD_VAR 0 4
36106: PPUSH
36107: LD_VAR 0 5
36111: PPUSH
36112: CALL 34430 0 3
// end ;
36116: LD_VAR 0 6
36120: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36121: LD_INT 0
36123: PPUSH
36124: PPUSH
36125: PPUSH
36126: PPUSH
36127: PPUSH
36128: PPUSH
36129: PPUSH
36130: PPUSH
36131: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36132: LD_VAR 0 1
36136: NOT
36137: PUSH
36138: LD_VAR 0 2
36142: PPUSH
36143: LD_VAR 0 3
36147: PPUSH
36148: CALL_OW 488
36152: NOT
36153: OR
36154: PUSH
36155: LD_VAR 0 4
36159: NOT
36160: OR
36161: IFFALSE 36165
// exit ;
36163: GO 36505
// list := [ ] ;
36165: LD_ADDR_VAR 0 13
36169: PUSH
36170: EMPTY
36171: ST_TO_ADDR
// if x - r < 0 then
36172: LD_VAR 0 2
36176: PUSH
36177: LD_VAR 0 4
36181: MINUS
36182: PUSH
36183: LD_INT 0
36185: LESS
36186: IFFALSE 36198
// min_x := 0 else
36188: LD_ADDR_VAR 0 7
36192: PUSH
36193: LD_INT 0
36195: ST_TO_ADDR
36196: GO 36214
// min_x := x - r ;
36198: LD_ADDR_VAR 0 7
36202: PUSH
36203: LD_VAR 0 2
36207: PUSH
36208: LD_VAR 0 4
36212: MINUS
36213: ST_TO_ADDR
// if y - r < 0 then
36214: LD_VAR 0 3
36218: PUSH
36219: LD_VAR 0 4
36223: MINUS
36224: PUSH
36225: LD_INT 0
36227: LESS
36228: IFFALSE 36240
// min_y := 0 else
36230: LD_ADDR_VAR 0 8
36234: PUSH
36235: LD_INT 0
36237: ST_TO_ADDR
36238: GO 36256
// min_y := y - r ;
36240: LD_ADDR_VAR 0 8
36244: PUSH
36245: LD_VAR 0 3
36249: PUSH
36250: LD_VAR 0 4
36254: MINUS
36255: ST_TO_ADDR
// max_x := x + r ;
36256: LD_ADDR_VAR 0 9
36260: PUSH
36261: LD_VAR 0 2
36265: PUSH
36266: LD_VAR 0 4
36270: PLUS
36271: ST_TO_ADDR
// max_y := y + r ;
36272: LD_ADDR_VAR 0 10
36276: PUSH
36277: LD_VAR 0 3
36281: PUSH
36282: LD_VAR 0 4
36286: PLUS
36287: ST_TO_ADDR
// for _x = min_x to max_x do
36288: LD_ADDR_VAR 0 11
36292: PUSH
36293: DOUBLE
36294: LD_VAR 0 7
36298: DEC
36299: ST_TO_ADDR
36300: LD_VAR 0 9
36304: PUSH
36305: FOR_TO
36306: IFFALSE 36423
// for _y = min_y to max_y do
36308: LD_ADDR_VAR 0 12
36312: PUSH
36313: DOUBLE
36314: LD_VAR 0 8
36318: DEC
36319: ST_TO_ADDR
36320: LD_VAR 0 10
36324: PUSH
36325: FOR_TO
36326: IFFALSE 36419
// begin if not ValidHex ( _x , _y ) then
36328: LD_VAR 0 11
36332: PPUSH
36333: LD_VAR 0 12
36337: PPUSH
36338: CALL_OW 488
36342: NOT
36343: IFFALSE 36347
// continue ;
36345: GO 36325
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36347: LD_VAR 0 11
36351: PPUSH
36352: LD_VAR 0 12
36356: PPUSH
36357: CALL_OW 351
36361: PUSH
36362: LD_VAR 0 11
36366: PPUSH
36367: LD_VAR 0 12
36371: PPUSH
36372: CALL_OW 554
36376: AND
36377: IFFALSE 36417
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36379: LD_ADDR_VAR 0 13
36383: PUSH
36384: LD_VAR 0 13
36388: PPUSH
36389: LD_VAR 0 13
36393: PUSH
36394: LD_INT 1
36396: PLUS
36397: PPUSH
36398: LD_VAR 0 11
36402: PUSH
36403: LD_VAR 0 12
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PPUSH
36412: CALL_OW 2
36416: ST_TO_ADDR
// end ;
36417: GO 36325
36419: POP
36420: POP
36421: GO 36305
36423: POP
36424: POP
// if not list then
36425: LD_VAR 0 13
36429: NOT
36430: IFFALSE 36434
// exit ;
36432: GO 36505
// for i in list do
36434: LD_ADDR_VAR 0 6
36438: PUSH
36439: LD_VAR 0 13
36443: PUSH
36444: FOR_IN
36445: IFFALSE 36503
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36447: LD_VAR 0 1
36451: PPUSH
36452: LD_STRING M
36454: PUSH
36455: LD_VAR 0 6
36459: PUSH
36460: LD_INT 1
36462: ARRAY
36463: PUSH
36464: LD_VAR 0 6
36468: PUSH
36469: LD_INT 2
36471: ARRAY
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: PUSH
36494: EMPTY
36495: LIST
36496: PPUSH
36497: CALL_OW 447
36501: GO 36444
36503: POP
36504: POP
// end ;
36505: LD_VAR 0 5
36509: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36510: LD_EXP 111
36514: NOT
36515: IFFALSE 36565
36517: GO 36519
36519: DISABLE
// begin initHack := true ;
36520: LD_ADDR_EXP 111
36524: PUSH
36525: LD_INT 1
36527: ST_TO_ADDR
// hackTanks := [ ] ;
36528: LD_ADDR_EXP 112
36532: PUSH
36533: EMPTY
36534: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36535: LD_ADDR_EXP 113
36539: PUSH
36540: EMPTY
36541: ST_TO_ADDR
// hackLimit := 3 ;
36542: LD_ADDR_EXP 114
36546: PUSH
36547: LD_INT 3
36549: ST_TO_ADDR
// hackDist := 12 ;
36550: LD_ADDR_EXP 115
36554: PUSH
36555: LD_INT 12
36557: ST_TO_ADDR
// hackCounter := [ ] ;
36558: LD_ADDR_EXP 116
36562: PUSH
36563: EMPTY
36564: ST_TO_ADDR
// end ;
36565: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36566: LD_EXP 111
36570: PUSH
36571: LD_INT 34
36573: PUSH
36574: LD_INT 99
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PPUSH
36581: CALL_OW 69
36585: AND
36586: IFFALSE 36839
36588: GO 36590
36590: DISABLE
36591: LD_INT 0
36593: PPUSH
36594: PPUSH
// begin enable ;
36595: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36596: LD_ADDR_VAR 0 1
36600: PUSH
36601: LD_INT 34
36603: PUSH
36604: LD_INT 99
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PPUSH
36611: CALL_OW 69
36615: PUSH
36616: FOR_IN
36617: IFFALSE 36837
// begin if not i in hackTanks then
36619: LD_VAR 0 1
36623: PUSH
36624: LD_EXP 112
36628: IN
36629: NOT
36630: IFFALSE 36713
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36632: LD_ADDR_EXP 112
36636: PUSH
36637: LD_EXP 112
36641: PPUSH
36642: LD_EXP 112
36646: PUSH
36647: LD_INT 1
36649: PLUS
36650: PPUSH
36651: LD_VAR 0 1
36655: PPUSH
36656: CALL_OW 1
36660: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36661: LD_ADDR_EXP 113
36665: PUSH
36666: LD_EXP 113
36670: PPUSH
36671: LD_EXP 113
36675: PUSH
36676: LD_INT 1
36678: PLUS
36679: PPUSH
36680: EMPTY
36681: PPUSH
36682: CALL_OW 1
36686: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36687: LD_ADDR_EXP 116
36691: PUSH
36692: LD_EXP 116
36696: PPUSH
36697: LD_EXP 116
36701: PUSH
36702: LD_INT 1
36704: PLUS
36705: PPUSH
36706: EMPTY
36707: PPUSH
36708: CALL_OW 1
36712: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36713: LD_VAR 0 1
36717: PPUSH
36718: CALL_OW 302
36722: NOT
36723: IFFALSE 36736
// begin HackUnlinkAll ( i ) ;
36725: LD_VAR 0 1
36729: PPUSH
36730: CALL 36842 0 1
// continue ;
36734: GO 36616
// end ; HackCheckCapturedStatus ( i ) ;
36736: LD_VAR 0 1
36740: PPUSH
36741: CALL 37285 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36745: LD_ADDR_VAR 0 2
36749: PUSH
36750: LD_INT 81
36752: PUSH
36753: LD_VAR 0 1
36757: PPUSH
36758: CALL_OW 255
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 33
36769: PUSH
36770: LD_INT 3
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 91
36779: PUSH
36780: LD_VAR 0 1
36784: PUSH
36785: LD_EXP 115
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 50
36797: PUSH
36798: EMPTY
36799: LIST
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: PPUSH
36807: CALL_OW 69
36811: ST_TO_ADDR
// if not tmp then
36812: LD_VAR 0 2
36816: NOT
36817: IFFALSE 36821
// continue ;
36819: GO 36616
// HackLink ( i , tmp ) ;
36821: LD_VAR 0 1
36825: PPUSH
36826: LD_VAR 0 2
36830: PPUSH
36831: CALL 36978 0 2
// end ;
36835: GO 36616
36837: POP
36838: POP
// end ;
36839: PPOPN 2
36841: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36842: LD_INT 0
36844: PPUSH
36845: PPUSH
36846: PPUSH
// if not hack in hackTanks then
36847: LD_VAR 0 1
36851: PUSH
36852: LD_EXP 112
36856: IN
36857: NOT
36858: IFFALSE 36862
// exit ;
36860: GO 36973
// index := GetElementIndex ( hackTanks , hack ) ;
36862: LD_ADDR_VAR 0 4
36866: PUSH
36867: LD_EXP 112
36871: PPUSH
36872: LD_VAR 0 1
36876: PPUSH
36877: CALL 44590 0 2
36881: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36882: LD_EXP 113
36886: PUSH
36887: LD_VAR 0 4
36891: ARRAY
36892: IFFALSE 36973
// begin for i in hackTanksCaptured [ index ] do
36894: LD_ADDR_VAR 0 3
36898: PUSH
36899: LD_EXP 113
36903: PUSH
36904: LD_VAR 0 4
36908: ARRAY
36909: PUSH
36910: FOR_IN
36911: IFFALSE 36937
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36913: LD_VAR 0 3
36917: PUSH
36918: LD_INT 1
36920: ARRAY
36921: PPUSH
36922: LD_VAR 0 3
36926: PUSH
36927: LD_INT 2
36929: ARRAY
36930: PPUSH
36931: CALL_OW 235
36935: GO 36910
36937: POP
36938: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36939: LD_ADDR_EXP 113
36943: PUSH
36944: LD_EXP 113
36948: PPUSH
36949: LD_VAR 0 4
36953: PPUSH
36954: EMPTY
36955: PPUSH
36956: CALL_OW 1
36960: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36961: LD_VAR 0 1
36965: PPUSH
36966: LD_INT 0
36968: PPUSH
36969: CALL_OW 505
// end ; end ;
36973: LD_VAR 0 2
36977: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36978: LD_INT 0
36980: PPUSH
36981: PPUSH
36982: PPUSH
// if not hack in hackTanks or not vehicles then
36983: LD_VAR 0 1
36987: PUSH
36988: LD_EXP 112
36992: IN
36993: NOT
36994: PUSH
36995: LD_VAR 0 2
36999: NOT
37000: OR
37001: IFFALSE 37005
// exit ;
37003: GO 37280
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37005: LD_ADDR_VAR 0 2
37009: PUSH
37010: LD_VAR 0 1
37014: PPUSH
37015: LD_VAR 0 2
37019: PPUSH
37020: LD_INT 1
37022: PPUSH
37023: LD_INT 1
37025: PPUSH
37026: CALL 45240 0 4
37030: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37031: LD_ADDR_VAR 0 5
37035: PUSH
37036: LD_EXP 112
37040: PPUSH
37041: LD_VAR 0 1
37045: PPUSH
37046: CALL 44590 0 2
37050: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37051: LD_EXP 113
37055: PUSH
37056: LD_VAR 0 5
37060: ARRAY
37061: PUSH
37062: LD_EXP 114
37066: LESS
37067: IFFALSE 37256
// begin for i := 1 to vehicles do
37069: LD_ADDR_VAR 0 4
37073: PUSH
37074: DOUBLE
37075: LD_INT 1
37077: DEC
37078: ST_TO_ADDR
37079: LD_VAR 0 2
37083: PUSH
37084: FOR_TO
37085: IFFALSE 37254
// begin if hackTanksCaptured [ index ] = hackLimit then
37087: LD_EXP 113
37091: PUSH
37092: LD_VAR 0 5
37096: ARRAY
37097: PUSH
37098: LD_EXP 114
37102: EQUAL
37103: IFFALSE 37107
// break ;
37105: GO 37254
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37107: LD_ADDR_EXP 116
37111: PUSH
37112: LD_EXP 116
37116: PPUSH
37117: LD_VAR 0 5
37121: PPUSH
37122: LD_EXP 116
37126: PUSH
37127: LD_VAR 0 5
37131: ARRAY
37132: PUSH
37133: LD_INT 1
37135: PLUS
37136: PPUSH
37137: CALL_OW 1
37141: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37142: LD_ADDR_EXP 113
37146: PUSH
37147: LD_EXP 113
37151: PPUSH
37152: LD_VAR 0 5
37156: PUSH
37157: LD_EXP 113
37161: PUSH
37162: LD_VAR 0 5
37166: ARRAY
37167: PUSH
37168: LD_INT 1
37170: PLUS
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PPUSH
37176: LD_VAR 0 2
37180: PUSH
37181: LD_VAR 0 4
37185: ARRAY
37186: PUSH
37187: LD_VAR 0 2
37191: PUSH
37192: LD_VAR 0 4
37196: ARRAY
37197: PPUSH
37198: CALL_OW 255
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PPUSH
37207: CALL 44805 0 3
37211: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37212: LD_VAR 0 2
37216: PUSH
37217: LD_VAR 0 4
37221: ARRAY
37222: PPUSH
37223: LD_VAR 0 1
37227: PPUSH
37228: CALL_OW 255
37232: PPUSH
37233: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37237: LD_VAR 0 2
37241: PUSH
37242: LD_VAR 0 4
37246: ARRAY
37247: PPUSH
37248: CALL_OW 141
// end ;
37252: GO 37084
37254: POP
37255: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37256: LD_VAR 0 1
37260: PPUSH
37261: LD_EXP 113
37265: PUSH
37266: LD_VAR 0 5
37270: ARRAY
37271: PUSH
37272: LD_INT 0
37274: PLUS
37275: PPUSH
37276: CALL_OW 505
// end ;
37280: LD_VAR 0 3
37284: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37285: LD_INT 0
37287: PPUSH
37288: PPUSH
37289: PPUSH
37290: PPUSH
// if not hack in hackTanks then
37291: LD_VAR 0 1
37295: PUSH
37296: LD_EXP 112
37300: IN
37301: NOT
37302: IFFALSE 37306
// exit ;
37304: GO 37546
// index := GetElementIndex ( hackTanks , hack ) ;
37306: LD_ADDR_VAR 0 4
37310: PUSH
37311: LD_EXP 112
37315: PPUSH
37316: LD_VAR 0 1
37320: PPUSH
37321: CALL 44590 0 2
37325: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37326: LD_ADDR_VAR 0 3
37330: PUSH
37331: DOUBLE
37332: LD_EXP 113
37336: PUSH
37337: LD_VAR 0 4
37341: ARRAY
37342: INC
37343: ST_TO_ADDR
37344: LD_INT 1
37346: PUSH
37347: FOR_DOWNTO
37348: IFFALSE 37520
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37350: LD_ADDR_VAR 0 5
37354: PUSH
37355: LD_EXP 113
37359: PUSH
37360: LD_VAR 0 4
37364: ARRAY
37365: PUSH
37366: LD_VAR 0 3
37370: ARRAY
37371: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37372: LD_VAR 0 5
37376: PUSH
37377: LD_INT 1
37379: ARRAY
37380: PPUSH
37381: CALL_OW 302
37385: NOT
37386: PUSH
37387: LD_VAR 0 5
37391: PUSH
37392: LD_INT 1
37394: ARRAY
37395: PPUSH
37396: CALL_OW 255
37400: PUSH
37401: LD_VAR 0 1
37405: PPUSH
37406: CALL_OW 255
37410: NONEQUAL
37411: OR
37412: IFFALSE 37518
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37414: LD_VAR 0 5
37418: PUSH
37419: LD_INT 1
37421: ARRAY
37422: PPUSH
37423: CALL_OW 305
37427: PUSH
37428: LD_VAR 0 5
37432: PUSH
37433: LD_INT 1
37435: ARRAY
37436: PPUSH
37437: CALL_OW 255
37441: PUSH
37442: LD_VAR 0 1
37446: PPUSH
37447: CALL_OW 255
37451: EQUAL
37452: AND
37453: IFFALSE 37477
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37455: LD_VAR 0 5
37459: PUSH
37460: LD_INT 1
37462: ARRAY
37463: PPUSH
37464: LD_VAR 0 5
37468: PUSH
37469: LD_INT 2
37471: ARRAY
37472: PPUSH
37473: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37477: LD_ADDR_EXP 113
37481: PUSH
37482: LD_EXP 113
37486: PPUSH
37487: LD_VAR 0 4
37491: PPUSH
37492: LD_EXP 113
37496: PUSH
37497: LD_VAR 0 4
37501: ARRAY
37502: PPUSH
37503: LD_VAR 0 3
37507: PPUSH
37508: CALL_OW 3
37512: PPUSH
37513: CALL_OW 1
37517: ST_TO_ADDR
// end ; end ;
37518: GO 37347
37520: POP
37521: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37522: LD_VAR 0 1
37526: PPUSH
37527: LD_EXP 113
37531: PUSH
37532: LD_VAR 0 4
37536: ARRAY
37537: PUSH
37538: LD_INT 0
37540: PLUS
37541: PPUSH
37542: CALL_OW 505
// end ;
37546: LD_VAR 0 2
37550: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37551: LD_INT 0
37553: PPUSH
37554: PPUSH
37555: PPUSH
37556: PPUSH
// if not hack in hackTanks then
37557: LD_VAR 0 1
37561: PUSH
37562: LD_EXP 112
37566: IN
37567: NOT
37568: IFFALSE 37572
// exit ;
37570: GO 37657
// index := GetElementIndex ( hackTanks , hack ) ;
37572: LD_ADDR_VAR 0 5
37576: PUSH
37577: LD_EXP 112
37581: PPUSH
37582: LD_VAR 0 1
37586: PPUSH
37587: CALL 44590 0 2
37591: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37592: LD_ADDR_VAR 0 4
37596: PUSH
37597: DOUBLE
37598: LD_INT 1
37600: DEC
37601: ST_TO_ADDR
37602: LD_EXP 113
37606: PUSH
37607: LD_VAR 0 5
37611: ARRAY
37612: PUSH
37613: FOR_TO
37614: IFFALSE 37655
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37616: LD_EXP 113
37620: PUSH
37621: LD_VAR 0 5
37625: ARRAY
37626: PUSH
37627: LD_VAR 0 4
37631: ARRAY
37632: PUSH
37633: LD_INT 1
37635: ARRAY
37636: PUSH
37637: LD_VAR 0 2
37641: EQUAL
37642: IFFALSE 37653
// KillUnit ( vehicle ) ;
37644: LD_VAR 0 2
37648: PPUSH
37649: CALL_OW 66
37653: GO 37613
37655: POP
37656: POP
// end ;
37657: LD_VAR 0 3
37661: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37662: LD_EXP 117
37666: NOT
37667: IFFALSE 37702
37669: GO 37671
37671: DISABLE
// begin initMiner := true ;
37672: LD_ADDR_EXP 117
37676: PUSH
37677: LD_INT 1
37679: ST_TO_ADDR
// minersList := [ ] ;
37680: LD_ADDR_EXP 118
37684: PUSH
37685: EMPTY
37686: ST_TO_ADDR
// minerMinesList := [ ] ;
37687: LD_ADDR_EXP 119
37691: PUSH
37692: EMPTY
37693: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37694: LD_ADDR_EXP 120
37698: PUSH
37699: LD_INT 5
37701: ST_TO_ADDR
// end ;
37702: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37703: LD_EXP 117
37707: PUSH
37708: LD_INT 34
37710: PUSH
37711: LD_INT 81
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PPUSH
37718: CALL_OW 69
37722: AND
37723: IFFALSE 38184
37725: GO 37727
37727: DISABLE
37728: LD_INT 0
37730: PPUSH
37731: PPUSH
37732: PPUSH
37733: PPUSH
// begin enable ;
37734: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37735: LD_ADDR_VAR 0 1
37739: PUSH
37740: LD_INT 34
37742: PUSH
37743: LD_INT 81
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PPUSH
37750: CALL_OW 69
37754: PUSH
37755: FOR_IN
37756: IFFALSE 37828
// begin if not i in minersList then
37758: LD_VAR 0 1
37762: PUSH
37763: LD_EXP 118
37767: IN
37768: NOT
37769: IFFALSE 37826
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37771: LD_ADDR_EXP 118
37775: PUSH
37776: LD_EXP 118
37780: PPUSH
37781: LD_EXP 118
37785: PUSH
37786: LD_INT 1
37788: PLUS
37789: PPUSH
37790: LD_VAR 0 1
37794: PPUSH
37795: CALL_OW 1
37799: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37800: LD_ADDR_EXP 119
37804: PUSH
37805: LD_EXP 119
37809: PPUSH
37810: LD_EXP 119
37814: PUSH
37815: LD_INT 1
37817: PLUS
37818: PPUSH
37819: EMPTY
37820: PPUSH
37821: CALL_OW 1
37825: ST_TO_ADDR
// end end ;
37826: GO 37755
37828: POP
37829: POP
// for i := minerMinesList downto 1 do
37830: LD_ADDR_VAR 0 1
37834: PUSH
37835: DOUBLE
37836: LD_EXP 119
37840: INC
37841: ST_TO_ADDR
37842: LD_INT 1
37844: PUSH
37845: FOR_DOWNTO
37846: IFFALSE 38182
// begin if IsLive ( minersList [ i ] ) then
37848: LD_EXP 118
37852: PUSH
37853: LD_VAR 0 1
37857: ARRAY
37858: PPUSH
37859: CALL_OW 300
37863: IFFALSE 37891
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37865: LD_EXP 118
37869: PUSH
37870: LD_VAR 0 1
37874: ARRAY
37875: PPUSH
37876: LD_EXP 119
37880: PUSH
37881: LD_VAR 0 1
37885: ARRAY
37886: PPUSH
37887: CALL_OW 505
// if not minerMinesList [ i ] then
37891: LD_EXP 119
37895: PUSH
37896: LD_VAR 0 1
37900: ARRAY
37901: NOT
37902: IFFALSE 37906
// continue ;
37904: GO 37845
// for j := minerMinesList [ i ] downto 1 do
37906: LD_ADDR_VAR 0 2
37910: PUSH
37911: DOUBLE
37912: LD_EXP 119
37916: PUSH
37917: LD_VAR 0 1
37921: ARRAY
37922: INC
37923: ST_TO_ADDR
37924: LD_INT 1
37926: PUSH
37927: FOR_DOWNTO
37928: IFFALSE 38178
// begin side := GetSide ( minersList [ i ] ) ;
37930: LD_ADDR_VAR 0 3
37934: PUSH
37935: LD_EXP 118
37939: PUSH
37940: LD_VAR 0 1
37944: ARRAY
37945: PPUSH
37946: CALL_OW 255
37950: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37951: LD_ADDR_VAR 0 4
37955: PUSH
37956: LD_EXP 119
37960: PUSH
37961: LD_VAR 0 1
37965: ARRAY
37966: PUSH
37967: LD_VAR 0 2
37971: ARRAY
37972: PUSH
37973: LD_INT 1
37975: ARRAY
37976: PPUSH
37977: LD_EXP 119
37981: PUSH
37982: LD_VAR 0 1
37986: ARRAY
37987: PUSH
37988: LD_VAR 0 2
37992: ARRAY
37993: PUSH
37994: LD_INT 2
37996: ARRAY
37997: PPUSH
37998: CALL_OW 428
38002: ST_TO_ADDR
// if not tmp then
38003: LD_VAR 0 4
38007: NOT
38008: IFFALSE 38012
// continue ;
38010: GO 37927
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38012: LD_VAR 0 4
38016: PUSH
38017: LD_INT 81
38019: PUSH
38020: LD_VAR 0 3
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PPUSH
38029: CALL_OW 69
38033: IN
38034: PUSH
38035: LD_EXP 119
38039: PUSH
38040: LD_VAR 0 1
38044: ARRAY
38045: PUSH
38046: LD_VAR 0 2
38050: ARRAY
38051: PUSH
38052: LD_INT 1
38054: ARRAY
38055: PPUSH
38056: LD_EXP 119
38060: PUSH
38061: LD_VAR 0 1
38065: ARRAY
38066: PUSH
38067: LD_VAR 0 2
38071: ARRAY
38072: PUSH
38073: LD_INT 2
38075: ARRAY
38076: PPUSH
38077: CALL_OW 458
38081: AND
38082: IFFALSE 38176
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38084: LD_EXP 119
38088: PUSH
38089: LD_VAR 0 1
38093: ARRAY
38094: PUSH
38095: LD_VAR 0 2
38099: ARRAY
38100: PUSH
38101: LD_INT 1
38103: ARRAY
38104: PPUSH
38105: LD_EXP 119
38109: PUSH
38110: LD_VAR 0 1
38114: ARRAY
38115: PUSH
38116: LD_VAR 0 2
38120: ARRAY
38121: PUSH
38122: LD_INT 2
38124: ARRAY
38125: PPUSH
38126: LD_VAR 0 3
38130: PPUSH
38131: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38135: LD_ADDR_EXP 119
38139: PUSH
38140: LD_EXP 119
38144: PPUSH
38145: LD_VAR 0 1
38149: PPUSH
38150: LD_EXP 119
38154: PUSH
38155: LD_VAR 0 1
38159: ARRAY
38160: PPUSH
38161: LD_VAR 0 2
38165: PPUSH
38166: CALL_OW 3
38170: PPUSH
38171: CALL_OW 1
38175: ST_TO_ADDR
// end ; end ;
38176: GO 37927
38178: POP
38179: POP
// end ;
38180: GO 37845
38182: POP
38183: POP
// end ;
38184: PPOPN 4
38186: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38187: LD_INT 0
38189: PPUSH
38190: PPUSH
// result := false ;
38191: LD_ADDR_VAR 0 4
38195: PUSH
38196: LD_INT 0
38198: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38199: LD_VAR 0 1
38203: PPUSH
38204: CALL_OW 264
38208: PUSH
38209: LD_INT 81
38211: EQUAL
38212: NOT
38213: IFFALSE 38217
// exit ;
38215: GO 38457
// index := GetElementIndex ( minersList , unit ) ;
38217: LD_ADDR_VAR 0 5
38221: PUSH
38222: LD_EXP 118
38226: PPUSH
38227: LD_VAR 0 1
38231: PPUSH
38232: CALL 44590 0 2
38236: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38237: LD_EXP 119
38241: PUSH
38242: LD_VAR 0 5
38246: ARRAY
38247: PUSH
38248: LD_EXP 120
38252: GREATEREQUAL
38253: IFFALSE 38257
// exit ;
38255: GO 38457
// ComMoveXY ( unit , x , y ) ;
38257: LD_VAR 0 1
38261: PPUSH
38262: LD_VAR 0 2
38266: PPUSH
38267: LD_VAR 0 3
38271: PPUSH
38272: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38276: LD_INT 35
38278: PPUSH
38279: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38283: LD_VAR 0 1
38287: PPUSH
38288: LD_VAR 0 2
38292: PPUSH
38293: LD_VAR 0 3
38297: PPUSH
38298: CALL 75853 0 3
38302: NOT
38303: PUSH
38304: LD_VAR 0 1
38308: PPUSH
38309: CALL_OW 314
38313: AND
38314: IFFALSE 38318
// exit ;
38316: GO 38457
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38318: LD_VAR 0 2
38322: PPUSH
38323: LD_VAR 0 3
38327: PPUSH
38328: CALL_OW 428
38332: PUSH
38333: LD_VAR 0 1
38337: EQUAL
38338: PUSH
38339: LD_VAR 0 1
38343: PPUSH
38344: CALL_OW 314
38348: NOT
38349: AND
38350: IFFALSE 38276
// PlaySoundXY ( x , y , PlantMine ) ;
38352: LD_VAR 0 2
38356: PPUSH
38357: LD_VAR 0 3
38361: PPUSH
38362: LD_STRING PlantMine
38364: PPUSH
38365: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38369: LD_VAR 0 2
38373: PPUSH
38374: LD_VAR 0 3
38378: PPUSH
38379: LD_VAR 0 1
38383: PPUSH
38384: CALL_OW 255
38388: PPUSH
38389: LD_INT 0
38391: PPUSH
38392: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38396: LD_ADDR_EXP 119
38400: PUSH
38401: LD_EXP 119
38405: PPUSH
38406: LD_VAR 0 5
38410: PUSH
38411: LD_EXP 119
38415: PUSH
38416: LD_VAR 0 5
38420: ARRAY
38421: PUSH
38422: LD_INT 1
38424: PLUS
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PPUSH
38430: LD_VAR 0 2
38434: PUSH
38435: LD_VAR 0 3
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PPUSH
38444: CALL 44805 0 3
38448: ST_TO_ADDR
// result := true ;
38449: LD_ADDR_VAR 0 4
38453: PUSH
38454: LD_INT 1
38456: ST_TO_ADDR
// end ;
38457: LD_VAR 0 4
38461: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38462: LD_INT 0
38464: PPUSH
38465: PPUSH
38466: PPUSH
// if not unit in minersList then
38467: LD_VAR 0 1
38471: PUSH
38472: LD_EXP 118
38476: IN
38477: NOT
38478: IFFALSE 38482
// exit ;
38480: GO 38874
// index := GetElementIndex ( minersList , unit ) ;
38482: LD_ADDR_VAR 0 6
38486: PUSH
38487: LD_EXP 118
38491: PPUSH
38492: LD_VAR 0 1
38496: PPUSH
38497: CALL 44590 0 2
38501: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38502: LD_ADDR_VAR 0 5
38506: PUSH
38507: DOUBLE
38508: LD_EXP 119
38512: PUSH
38513: LD_VAR 0 6
38517: ARRAY
38518: INC
38519: ST_TO_ADDR
38520: LD_INT 1
38522: PUSH
38523: FOR_DOWNTO
38524: IFFALSE 38685
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38526: LD_EXP 119
38530: PUSH
38531: LD_VAR 0 6
38535: ARRAY
38536: PUSH
38537: LD_VAR 0 5
38541: ARRAY
38542: PUSH
38543: LD_INT 1
38545: ARRAY
38546: PUSH
38547: LD_VAR 0 2
38551: EQUAL
38552: PUSH
38553: LD_EXP 119
38557: PUSH
38558: LD_VAR 0 6
38562: ARRAY
38563: PUSH
38564: LD_VAR 0 5
38568: ARRAY
38569: PUSH
38570: LD_INT 2
38572: ARRAY
38573: PUSH
38574: LD_VAR 0 3
38578: EQUAL
38579: AND
38580: IFFALSE 38683
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38582: LD_EXP 119
38586: PUSH
38587: LD_VAR 0 6
38591: ARRAY
38592: PUSH
38593: LD_VAR 0 5
38597: ARRAY
38598: PUSH
38599: LD_INT 1
38601: ARRAY
38602: PPUSH
38603: LD_EXP 119
38607: PUSH
38608: LD_VAR 0 6
38612: ARRAY
38613: PUSH
38614: LD_VAR 0 5
38618: ARRAY
38619: PUSH
38620: LD_INT 2
38622: ARRAY
38623: PPUSH
38624: LD_VAR 0 1
38628: PPUSH
38629: CALL_OW 255
38633: PPUSH
38634: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38638: LD_ADDR_EXP 119
38642: PUSH
38643: LD_EXP 119
38647: PPUSH
38648: LD_VAR 0 6
38652: PPUSH
38653: LD_EXP 119
38657: PUSH
38658: LD_VAR 0 6
38662: ARRAY
38663: PPUSH
38664: LD_VAR 0 5
38668: PPUSH
38669: CALL_OW 3
38673: PPUSH
38674: CALL_OW 1
38678: ST_TO_ADDR
// exit ;
38679: POP
38680: POP
38681: GO 38874
// end ; end ;
38683: GO 38523
38685: POP
38686: POP
// for i := minerMinesList [ index ] downto 1 do
38687: LD_ADDR_VAR 0 5
38691: PUSH
38692: DOUBLE
38693: LD_EXP 119
38697: PUSH
38698: LD_VAR 0 6
38702: ARRAY
38703: INC
38704: ST_TO_ADDR
38705: LD_INT 1
38707: PUSH
38708: FOR_DOWNTO
38709: IFFALSE 38872
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38711: LD_EXP 119
38715: PUSH
38716: LD_VAR 0 6
38720: ARRAY
38721: PUSH
38722: LD_VAR 0 5
38726: ARRAY
38727: PUSH
38728: LD_INT 1
38730: ARRAY
38731: PPUSH
38732: LD_EXP 119
38736: PUSH
38737: LD_VAR 0 6
38741: ARRAY
38742: PUSH
38743: LD_VAR 0 5
38747: ARRAY
38748: PUSH
38749: LD_INT 2
38751: ARRAY
38752: PPUSH
38753: LD_VAR 0 2
38757: PPUSH
38758: LD_VAR 0 3
38762: PPUSH
38763: CALL_OW 298
38767: PUSH
38768: LD_INT 6
38770: LESS
38771: IFFALSE 38870
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38773: LD_EXP 119
38777: PUSH
38778: LD_VAR 0 6
38782: ARRAY
38783: PUSH
38784: LD_VAR 0 5
38788: ARRAY
38789: PUSH
38790: LD_INT 1
38792: ARRAY
38793: PPUSH
38794: LD_EXP 119
38798: PUSH
38799: LD_VAR 0 6
38803: ARRAY
38804: PUSH
38805: LD_VAR 0 5
38809: ARRAY
38810: PUSH
38811: LD_INT 2
38813: ARRAY
38814: PPUSH
38815: LD_VAR 0 1
38819: PPUSH
38820: CALL_OW 255
38824: PPUSH
38825: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38829: LD_ADDR_EXP 119
38833: PUSH
38834: LD_EXP 119
38838: PPUSH
38839: LD_VAR 0 6
38843: PPUSH
38844: LD_EXP 119
38848: PUSH
38849: LD_VAR 0 6
38853: ARRAY
38854: PPUSH
38855: LD_VAR 0 5
38859: PPUSH
38860: CALL_OW 3
38864: PPUSH
38865: CALL_OW 1
38869: ST_TO_ADDR
// end ; end ;
38870: GO 38708
38872: POP
38873: POP
// end ;
38874: LD_VAR 0 4
38878: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38879: LD_INT 0
38881: PPUSH
38882: PPUSH
38883: PPUSH
38884: PPUSH
38885: PPUSH
38886: PPUSH
38887: PPUSH
38888: PPUSH
38889: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38890: LD_VAR 0 1
38894: PPUSH
38895: CALL_OW 264
38899: PUSH
38900: LD_INT 81
38902: EQUAL
38903: NOT
38904: PUSH
38905: LD_VAR 0 1
38909: PUSH
38910: LD_EXP 118
38914: IN
38915: NOT
38916: OR
38917: IFFALSE 38921
// exit ;
38919: GO 39243
// index := GetElementIndex ( minersList , unit ) ;
38921: LD_ADDR_VAR 0 6
38925: PUSH
38926: LD_EXP 118
38930: PPUSH
38931: LD_VAR 0 1
38935: PPUSH
38936: CALL 44590 0 2
38940: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38941: LD_ADDR_VAR 0 8
38945: PUSH
38946: LD_EXP 120
38950: PUSH
38951: LD_EXP 119
38955: PUSH
38956: LD_VAR 0 6
38960: ARRAY
38961: MINUS
38962: ST_TO_ADDR
// if not minesFreeAmount then
38963: LD_VAR 0 8
38967: NOT
38968: IFFALSE 38972
// exit ;
38970: GO 39243
// tmp := [ ] ;
38972: LD_ADDR_VAR 0 7
38976: PUSH
38977: EMPTY
38978: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38979: LD_ADDR_VAR 0 5
38983: PUSH
38984: DOUBLE
38985: LD_INT 1
38987: DEC
38988: ST_TO_ADDR
38989: LD_VAR 0 8
38993: PUSH
38994: FOR_TO
38995: IFFALSE 39190
// begin _d := rand ( 0 , 5 ) ;
38997: LD_ADDR_VAR 0 11
39001: PUSH
39002: LD_INT 0
39004: PPUSH
39005: LD_INT 5
39007: PPUSH
39008: CALL_OW 12
39012: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39013: LD_ADDR_VAR 0 12
39017: PUSH
39018: LD_INT 2
39020: PPUSH
39021: LD_INT 6
39023: PPUSH
39024: CALL_OW 12
39028: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39029: LD_ADDR_VAR 0 9
39033: PUSH
39034: LD_VAR 0 2
39038: PPUSH
39039: LD_VAR 0 11
39043: PPUSH
39044: LD_VAR 0 12
39048: PPUSH
39049: CALL_OW 272
39053: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39054: LD_ADDR_VAR 0 10
39058: PUSH
39059: LD_VAR 0 3
39063: PPUSH
39064: LD_VAR 0 11
39068: PPUSH
39069: LD_VAR 0 12
39073: PPUSH
39074: CALL_OW 273
39078: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39079: LD_VAR 0 9
39083: PPUSH
39084: LD_VAR 0 10
39088: PPUSH
39089: CALL_OW 488
39093: PUSH
39094: LD_VAR 0 9
39098: PUSH
39099: LD_VAR 0 10
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_VAR 0 7
39112: IN
39113: NOT
39114: AND
39115: PUSH
39116: LD_VAR 0 9
39120: PPUSH
39121: LD_VAR 0 10
39125: PPUSH
39126: CALL_OW 458
39130: NOT
39131: AND
39132: IFFALSE 39174
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39134: LD_ADDR_VAR 0 7
39138: PUSH
39139: LD_VAR 0 7
39143: PPUSH
39144: LD_VAR 0 7
39148: PUSH
39149: LD_INT 1
39151: PLUS
39152: PPUSH
39153: LD_VAR 0 9
39157: PUSH
39158: LD_VAR 0 10
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PPUSH
39167: CALL_OW 1
39171: ST_TO_ADDR
39172: GO 39188
// i := i - 1 ;
39174: LD_ADDR_VAR 0 5
39178: PUSH
39179: LD_VAR 0 5
39183: PUSH
39184: LD_INT 1
39186: MINUS
39187: ST_TO_ADDR
// end ;
39188: GO 38994
39190: POP
39191: POP
// for i in tmp do
39192: LD_ADDR_VAR 0 5
39196: PUSH
39197: LD_VAR 0 7
39201: PUSH
39202: FOR_IN
39203: IFFALSE 39241
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39205: LD_VAR 0 1
39209: PPUSH
39210: LD_VAR 0 5
39214: PUSH
39215: LD_INT 1
39217: ARRAY
39218: PPUSH
39219: LD_VAR 0 5
39223: PUSH
39224: LD_INT 2
39226: ARRAY
39227: PPUSH
39228: CALL 38187 0 3
39232: NOT
39233: IFFALSE 39239
// exit ;
39235: POP
39236: POP
39237: GO 39243
39239: GO 39202
39241: POP
39242: POP
// end ;
39243: LD_VAR 0 4
39247: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39248: LD_INT 0
39250: PPUSH
39251: PPUSH
39252: PPUSH
39253: PPUSH
39254: PPUSH
39255: PPUSH
39256: PPUSH
// if not GetClass ( unit ) = class_sniper then
39257: LD_VAR 0 1
39261: PPUSH
39262: CALL_OW 257
39266: PUSH
39267: LD_INT 5
39269: EQUAL
39270: NOT
39271: IFFALSE 39275
// exit ;
39273: GO 39663
// dist := 8 ;
39275: LD_ADDR_VAR 0 5
39279: PUSH
39280: LD_INT 8
39282: ST_TO_ADDR
// viewRange := 12 ;
39283: LD_ADDR_VAR 0 7
39287: PUSH
39288: LD_INT 12
39290: ST_TO_ADDR
// side := GetSide ( unit ) ;
39291: LD_ADDR_VAR 0 6
39295: PUSH
39296: LD_VAR 0 1
39300: PPUSH
39301: CALL_OW 255
39305: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39306: LD_INT 61
39308: PPUSH
39309: LD_VAR 0 6
39313: PPUSH
39314: CALL_OW 321
39318: PUSH
39319: LD_INT 2
39321: EQUAL
39322: IFFALSE 39332
// viewRange := 16 ;
39324: LD_ADDR_VAR 0 7
39328: PUSH
39329: LD_INT 16
39331: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39332: LD_VAR 0 1
39336: PPUSH
39337: LD_VAR 0 2
39341: PPUSH
39342: LD_VAR 0 3
39346: PPUSH
39347: CALL_OW 297
39351: PUSH
39352: LD_VAR 0 5
39356: GREATER
39357: IFFALSE 39436
// begin ComMoveXY ( unit , x , y ) ;
39359: LD_VAR 0 1
39363: PPUSH
39364: LD_VAR 0 2
39368: PPUSH
39369: LD_VAR 0 3
39373: PPUSH
39374: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39378: LD_INT 35
39380: PPUSH
39381: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39385: LD_VAR 0 1
39389: PPUSH
39390: LD_VAR 0 2
39394: PPUSH
39395: LD_VAR 0 3
39399: PPUSH
39400: CALL 75853 0 3
39404: NOT
39405: IFFALSE 39409
// exit ;
39407: GO 39663
// until GetDistUnitXY ( unit , x , y ) < dist ;
39409: LD_VAR 0 1
39413: PPUSH
39414: LD_VAR 0 2
39418: PPUSH
39419: LD_VAR 0 3
39423: PPUSH
39424: CALL_OW 297
39428: PUSH
39429: LD_VAR 0 5
39433: LESS
39434: IFFALSE 39378
// end ; ComTurnXY ( unit , x , y ) ;
39436: LD_VAR 0 1
39440: PPUSH
39441: LD_VAR 0 2
39445: PPUSH
39446: LD_VAR 0 3
39450: PPUSH
39451: CALL_OW 118
// wait ( 5 ) ;
39455: LD_INT 5
39457: PPUSH
39458: CALL_OW 67
// _d := GetDir ( unit ) ;
39462: LD_ADDR_VAR 0 10
39466: PUSH
39467: LD_VAR 0 1
39471: PPUSH
39472: CALL_OW 254
39476: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39477: LD_ADDR_VAR 0 8
39481: PUSH
39482: LD_VAR 0 1
39486: PPUSH
39487: CALL_OW 250
39491: PPUSH
39492: LD_VAR 0 10
39496: PPUSH
39497: LD_VAR 0 5
39501: PPUSH
39502: CALL_OW 272
39506: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39507: LD_ADDR_VAR 0 9
39511: PUSH
39512: LD_VAR 0 1
39516: PPUSH
39517: CALL_OW 251
39521: PPUSH
39522: LD_VAR 0 10
39526: PPUSH
39527: LD_VAR 0 5
39531: PPUSH
39532: CALL_OW 273
39536: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39537: LD_VAR 0 8
39541: PPUSH
39542: LD_VAR 0 9
39546: PPUSH
39547: CALL_OW 488
39551: NOT
39552: IFFALSE 39556
// exit ;
39554: GO 39663
// ComAnimCustom ( unit , 1 ) ;
39556: LD_VAR 0 1
39560: PPUSH
39561: LD_INT 1
39563: PPUSH
39564: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39568: LD_VAR 0 8
39572: PPUSH
39573: LD_VAR 0 9
39577: PPUSH
39578: LD_VAR 0 6
39582: PPUSH
39583: LD_VAR 0 7
39587: PPUSH
39588: CALL_OW 330
// repeat wait ( 1 ) ;
39592: LD_INT 1
39594: PPUSH
39595: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39599: LD_VAR 0 1
39603: PPUSH
39604: CALL_OW 316
39608: PUSH
39609: LD_VAR 0 1
39613: PPUSH
39614: CALL_OW 314
39618: OR
39619: PUSH
39620: LD_VAR 0 1
39624: PPUSH
39625: CALL_OW 302
39629: NOT
39630: OR
39631: PUSH
39632: LD_VAR 0 1
39636: PPUSH
39637: CALL_OW 301
39641: OR
39642: IFFALSE 39592
// RemoveSeeing ( _x , _y , side ) ;
39644: LD_VAR 0 8
39648: PPUSH
39649: LD_VAR 0 9
39653: PPUSH
39654: LD_VAR 0 6
39658: PPUSH
39659: CALL_OW 331
// end ; end_of_file
39663: LD_VAR 0 4
39667: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39668: LD_INT 0
39670: PPUSH
39671: PPUSH
// if exist_mode then
39672: LD_VAR 0 2
39676: IFFALSE 39701
// unit := CreateCharacter ( prefix & ident ) else
39678: LD_ADDR_VAR 0 5
39682: PUSH
39683: LD_VAR 0 3
39687: PUSH
39688: LD_VAR 0 1
39692: STR
39693: PPUSH
39694: CALL_OW 34
39698: ST_TO_ADDR
39699: GO 39716
// unit := NewCharacter ( ident ) ;
39701: LD_ADDR_VAR 0 5
39705: PUSH
39706: LD_VAR 0 1
39710: PPUSH
39711: CALL_OW 25
39715: ST_TO_ADDR
// result := unit ;
39716: LD_ADDR_VAR 0 4
39720: PUSH
39721: LD_VAR 0 5
39725: ST_TO_ADDR
// end ;
39726: LD_VAR 0 4
39730: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39731: LD_INT 0
39733: PPUSH
39734: PPUSH
// if not side or not nation then
39735: LD_VAR 0 1
39739: NOT
39740: PUSH
39741: LD_VAR 0 2
39745: NOT
39746: OR
39747: IFFALSE 39751
// exit ;
39749: GO 40519
// case nation of nation_american :
39751: LD_VAR 0 2
39755: PUSH
39756: LD_INT 1
39758: DOUBLE
39759: EQUAL
39760: IFTRUE 39764
39762: GO 39978
39764: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39765: LD_ADDR_VAR 0 4
39769: PUSH
39770: LD_INT 35
39772: PUSH
39773: LD_INT 45
39775: PUSH
39776: LD_INT 46
39778: PUSH
39779: LD_INT 47
39781: PUSH
39782: LD_INT 82
39784: PUSH
39785: LD_INT 83
39787: PUSH
39788: LD_INT 84
39790: PUSH
39791: LD_INT 85
39793: PUSH
39794: LD_INT 86
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: LD_INT 6
39805: PUSH
39806: LD_INT 15
39808: PUSH
39809: LD_INT 16
39811: PUSH
39812: LD_INT 7
39814: PUSH
39815: LD_INT 12
39817: PUSH
39818: LD_INT 13
39820: PUSH
39821: LD_INT 10
39823: PUSH
39824: LD_INT 14
39826: PUSH
39827: LD_INT 20
39829: PUSH
39830: LD_INT 21
39832: PUSH
39833: LD_INT 22
39835: PUSH
39836: LD_INT 25
39838: PUSH
39839: LD_INT 32
39841: PUSH
39842: LD_INT 27
39844: PUSH
39845: LD_INT 36
39847: PUSH
39848: LD_INT 69
39850: PUSH
39851: LD_INT 39
39853: PUSH
39854: LD_INT 34
39856: PUSH
39857: LD_INT 40
39859: PUSH
39860: LD_INT 48
39862: PUSH
39863: LD_INT 49
39865: PUSH
39866: LD_INT 50
39868: PUSH
39869: LD_INT 51
39871: PUSH
39872: LD_INT 52
39874: PUSH
39875: LD_INT 53
39877: PUSH
39878: LD_INT 54
39880: PUSH
39881: LD_INT 55
39883: PUSH
39884: LD_INT 56
39886: PUSH
39887: LD_INT 57
39889: PUSH
39890: LD_INT 58
39892: PUSH
39893: LD_INT 59
39895: PUSH
39896: LD_INT 60
39898: PUSH
39899: LD_INT 61
39901: PUSH
39902: LD_INT 62
39904: PUSH
39905: LD_INT 80
39907: PUSH
39908: LD_INT 82
39910: PUSH
39911: LD_INT 83
39913: PUSH
39914: LD_INT 84
39916: PUSH
39917: LD_INT 85
39919: PUSH
39920: LD_INT 86
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: ST_TO_ADDR
39976: GO 40443
39978: LD_INT 2
39980: DOUBLE
39981: EQUAL
39982: IFTRUE 39986
39984: GO 40212
39986: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39987: LD_ADDR_VAR 0 4
39991: PUSH
39992: LD_INT 35
39994: PUSH
39995: LD_INT 45
39997: PUSH
39998: LD_INT 46
40000: PUSH
40001: LD_INT 47
40003: PUSH
40004: LD_INT 82
40006: PUSH
40007: LD_INT 83
40009: PUSH
40010: LD_INT 84
40012: PUSH
40013: LD_INT 85
40015: PUSH
40016: LD_INT 87
40018: PUSH
40019: LD_INT 70
40021: PUSH
40022: LD_INT 1
40024: PUSH
40025: LD_INT 11
40027: PUSH
40028: LD_INT 3
40030: PUSH
40031: LD_INT 4
40033: PUSH
40034: LD_INT 5
40036: PUSH
40037: LD_INT 6
40039: PUSH
40040: LD_INT 15
40042: PUSH
40043: LD_INT 18
40045: PUSH
40046: LD_INT 7
40048: PUSH
40049: LD_INT 17
40051: PUSH
40052: LD_INT 8
40054: PUSH
40055: LD_INT 20
40057: PUSH
40058: LD_INT 21
40060: PUSH
40061: LD_INT 22
40063: PUSH
40064: LD_INT 72
40066: PUSH
40067: LD_INT 26
40069: PUSH
40070: LD_INT 69
40072: PUSH
40073: LD_INT 39
40075: PUSH
40076: LD_INT 40
40078: PUSH
40079: LD_INT 41
40081: PUSH
40082: LD_INT 42
40084: PUSH
40085: LD_INT 43
40087: PUSH
40088: LD_INT 48
40090: PUSH
40091: LD_INT 49
40093: PUSH
40094: LD_INT 50
40096: PUSH
40097: LD_INT 51
40099: PUSH
40100: LD_INT 52
40102: PUSH
40103: LD_INT 53
40105: PUSH
40106: LD_INT 54
40108: PUSH
40109: LD_INT 55
40111: PUSH
40112: LD_INT 56
40114: PUSH
40115: LD_INT 60
40117: PUSH
40118: LD_INT 61
40120: PUSH
40121: LD_INT 62
40123: PUSH
40124: LD_INT 66
40126: PUSH
40127: LD_INT 67
40129: PUSH
40130: LD_INT 68
40132: PUSH
40133: LD_INT 81
40135: PUSH
40136: LD_INT 82
40138: PUSH
40139: LD_INT 83
40141: PUSH
40142: LD_INT 84
40144: PUSH
40145: LD_INT 85
40147: PUSH
40148: LD_INT 87
40150: PUSH
40151: LD_INT 88
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: ST_TO_ADDR
40210: GO 40443
40212: LD_INT 3
40214: DOUBLE
40215: EQUAL
40216: IFTRUE 40220
40218: GO 40442
40220: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40221: LD_ADDR_VAR 0 4
40225: PUSH
40226: LD_INT 46
40228: PUSH
40229: LD_INT 47
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: LD_INT 2
40237: PUSH
40238: LD_INT 82
40240: PUSH
40241: LD_INT 83
40243: PUSH
40244: LD_INT 84
40246: PUSH
40247: LD_INT 85
40249: PUSH
40250: LD_INT 86
40252: PUSH
40253: LD_INT 11
40255: PUSH
40256: LD_INT 9
40258: PUSH
40259: LD_INT 20
40261: PUSH
40262: LD_INT 19
40264: PUSH
40265: LD_INT 21
40267: PUSH
40268: LD_INT 24
40270: PUSH
40271: LD_INT 22
40273: PUSH
40274: LD_INT 25
40276: PUSH
40277: LD_INT 28
40279: PUSH
40280: LD_INT 29
40282: PUSH
40283: LD_INT 30
40285: PUSH
40286: LD_INT 31
40288: PUSH
40289: LD_INT 37
40291: PUSH
40292: LD_INT 38
40294: PUSH
40295: LD_INT 32
40297: PUSH
40298: LD_INT 27
40300: PUSH
40301: LD_INT 33
40303: PUSH
40304: LD_INT 69
40306: PUSH
40307: LD_INT 39
40309: PUSH
40310: LD_INT 34
40312: PUSH
40313: LD_INT 40
40315: PUSH
40316: LD_INT 71
40318: PUSH
40319: LD_INT 23
40321: PUSH
40322: LD_INT 44
40324: PUSH
40325: LD_INT 48
40327: PUSH
40328: LD_INT 49
40330: PUSH
40331: LD_INT 50
40333: PUSH
40334: LD_INT 51
40336: PUSH
40337: LD_INT 52
40339: PUSH
40340: LD_INT 53
40342: PUSH
40343: LD_INT 54
40345: PUSH
40346: LD_INT 55
40348: PUSH
40349: LD_INT 56
40351: PUSH
40352: LD_INT 57
40354: PUSH
40355: LD_INT 58
40357: PUSH
40358: LD_INT 59
40360: PUSH
40361: LD_INT 63
40363: PUSH
40364: LD_INT 64
40366: PUSH
40367: LD_INT 65
40369: PUSH
40370: LD_INT 82
40372: PUSH
40373: LD_INT 83
40375: PUSH
40376: LD_INT 84
40378: PUSH
40379: LD_INT 85
40381: PUSH
40382: LD_INT 86
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: ST_TO_ADDR
40440: GO 40443
40442: POP
// if state > - 1 and state < 3 then
40443: LD_VAR 0 3
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: GREATER
40452: PUSH
40453: LD_VAR 0 3
40457: PUSH
40458: LD_INT 3
40460: LESS
40461: AND
40462: IFFALSE 40519
// for i in result do
40464: LD_ADDR_VAR 0 5
40468: PUSH
40469: LD_VAR 0 4
40473: PUSH
40474: FOR_IN
40475: IFFALSE 40517
// if GetTech ( i , side ) <> state then
40477: LD_VAR 0 5
40481: PPUSH
40482: LD_VAR 0 1
40486: PPUSH
40487: CALL_OW 321
40491: PUSH
40492: LD_VAR 0 3
40496: NONEQUAL
40497: IFFALSE 40515
// result := result diff i ;
40499: LD_ADDR_VAR 0 4
40503: PUSH
40504: LD_VAR 0 4
40508: PUSH
40509: LD_VAR 0 5
40513: DIFF
40514: ST_TO_ADDR
40515: GO 40474
40517: POP
40518: POP
// end ;
40519: LD_VAR 0 4
40523: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40524: LD_INT 0
40526: PPUSH
40527: PPUSH
40528: PPUSH
// result := true ;
40529: LD_ADDR_VAR 0 3
40533: PUSH
40534: LD_INT 1
40536: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40537: LD_ADDR_VAR 0 5
40541: PUSH
40542: LD_VAR 0 2
40546: PPUSH
40547: CALL_OW 480
40551: ST_TO_ADDR
// if not tmp then
40552: LD_VAR 0 5
40556: NOT
40557: IFFALSE 40561
// exit ;
40559: GO 40610
// for i in tmp do
40561: LD_ADDR_VAR 0 4
40565: PUSH
40566: LD_VAR 0 5
40570: PUSH
40571: FOR_IN
40572: IFFALSE 40608
// if GetTech ( i , side ) <> state_researched then
40574: LD_VAR 0 4
40578: PPUSH
40579: LD_VAR 0 1
40583: PPUSH
40584: CALL_OW 321
40588: PUSH
40589: LD_INT 2
40591: NONEQUAL
40592: IFFALSE 40606
// begin result := false ;
40594: LD_ADDR_VAR 0 3
40598: PUSH
40599: LD_INT 0
40601: ST_TO_ADDR
// exit ;
40602: POP
40603: POP
40604: GO 40610
// end ;
40606: GO 40571
40608: POP
40609: POP
// end ;
40610: LD_VAR 0 3
40614: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40615: LD_INT 0
40617: PPUSH
40618: PPUSH
40619: PPUSH
40620: PPUSH
40621: PPUSH
40622: PPUSH
40623: PPUSH
40624: PPUSH
40625: PPUSH
40626: PPUSH
40627: PPUSH
40628: PPUSH
40629: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40630: LD_VAR 0 1
40634: NOT
40635: PUSH
40636: LD_VAR 0 1
40640: PPUSH
40641: CALL_OW 257
40645: PUSH
40646: LD_INT 9
40648: NONEQUAL
40649: OR
40650: IFFALSE 40654
// exit ;
40652: GO 41227
// side := GetSide ( unit ) ;
40654: LD_ADDR_VAR 0 9
40658: PUSH
40659: LD_VAR 0 1
40663: PPUSH
40664: CALL_OW 255
40668: ST_TO_ADDR
// tech_space := tech_spacanom ;
40669: LD_ADDR_VAR 0 12
40673: PUSH
40674: LD_INT 29
40676: ST_TO_ADDR
// tech_time := tech_taurad ;
40677: LD_ADDR_VAR 0 13
40681: PUSH
40682: LD_INT 28
40684: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40685: LD_ADDR_VAR 0 11
40689: PUSH
40690: LD_VAR 0 1
40694: PPUSH
40695: CALL_OW 310
40699: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40700: LD_VAR 0 11
40704: PPUSH
40705: CALL_OW 247
40709: PUSH
40710: LD_INT 2
40712: EQUAL
40713: IFFALSE 40717
// exit ;
40715: GO 41227
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40717: LD_ADDR_VAR 0 8
40721: PUSH
40722: LD_INT 81
40724: PUSH
40725: LD_VAR 0 9
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 3
40736: PUSH
40737: LD_INT 21
40739: PUSH
40740: LD_INT 3
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PPUSH
40755: CALL_OW 69
40759: ST_TO_ADDR
// if not tmp then
40760: LD_VAR 0 8
40764: NOT
40765: IFFALSE 40769
// exit ;
40767: GO 41227
// if in_unit then
40769: LD_VAR 0 11
40773: IFFALSE 40797
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40775: LD_ADDR_VAR 0 10
40779: PUSH
40780: LD_VAR 0 8
40784: PPUSH
40785: LD_VAR 0 11
40789: PPUSH
40790: CALL_OW 74
40794: ST_TO_ADDR
40795: GO 40817
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40797: LD_ADDR_VAR 0 10
40801: PUSH
40802: LD_VAR 0 8
40806: PPUSH
40807: LD_VAR 0 1
40811: PPUSH
40812: CALL_OW 74
40816: ST_TO_ADDR
// if not enemy then
40817: LD_VAR 0 10
40821: NOT
40822: IFFALSE 40826
// exit ;
40824: GO 41227
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40826: LD_VAR 0 11
40830: PUSH
40831: LD_VAR 0 11
40835: PPUSH
40836: LD_VAR 0 10
40840: PPUSH
40841: CALL_OW 296
40845: PUSH
40846: LD_INT 13
40848: GREATER
40849: AND
40850: PUSH
40851: LD_VAR 0 1
40855: PPUSH
40856: LD_VAR 0 10
40860: PPUSH
40861: CALL_OW 296
40865: PUSH
40866: LD_INT 12
40868: GREATER
40869: OR
40870: IFFALSE 40874
// exit ;
40872: GO 41227
// missile := [ 1 ] ;
40874: LD_ADDR_VAR 0 14
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: EMPTY
40883: LIST
40884: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40885: LD_VAR 0 9
40889: PPUSH
40890: LD_VAR 0 12
40894: PPUSH
40895: CALL_OW 325
40899: IFFALSE 40928
// missile := Replace ( missile , missile + 1 , 2 ) ;
40901: LD_ADDR_VAR 0 14
40905: PUSH
40906: LD_VAR 0 14
40910: PPUSH
40911: LD_VAR 0 14
40915: PUSH
40916: LD_INT 1
40918: PLUS
40919: PPUSH
40920: LD_INT 2
40922: PPUSH
40923: CALL_OW 1
40927: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40928: LD_VAR 0 9
40932: PPUSH
40933: LD_VAR 0 13
40937: PPUSH
40938: CALL_OW 325
40942: PUSH
40943: LD_VAR 0 10
40947: PPUSH
40948: CALL_OW 255
40952: PPUSH
40953: LD_VAR 0 13
40957: PPUSH
40958: CALL_OW 325
40962: NOT
40963: AND
40964: IFFALSE 40993
// missile := Replace ( missile , missile + 1 , 3 ) ;
40966: LD_ADDR_VAR 0 14
40970: PUSH
40971: LD_VAR 0 14
40975: PPUSH
40976: LD_VAR 0 14
40980: PUSH
40981: LD_INT 1
40983: PLUS
40984: PPUSH
40985: LD_INT 3
40987: PPUSH
40988: CALL_OW 1
40992: ST_TO_ADDR
// if missile < 2 then
40993: LD_VAR 0 14
40997: PUSH
40998: LD_INT 2
41000: LESS
41001: IFFALSE 41005
// exit ;
41003: GO 41227
// x := GetX ( enemy ) ;
41005: LD_ADDR_VAR 0 4
41009: PUSH
41010: LD_VAR 0 10
41014: PPUSH
41015: CALL_OW 250
41019: ST_TO_ADDR
// y := GetY ( enemy ) ;
41020: LD_ADDR_VAR 0 5
41024: PUSH
41025: LD_VAR 0 10
41029: PPUSH
41030: CALL_OW 251
41034: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41035: LD_ADDR_VAR 0 6
41039: PUSH
41040: LD_VAR 0 4
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PPUSH
41049: LD_INT 1
41051: PPUSH
41052: CALL_OW 12
41056: PLUS
41057: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41058: LD_ADDR_VAR 0 7
41062: PUSH
41063: LD_VAR 0 5
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PPUSH
41072: LD_INT 1
41074: PPUSH
41075: CALL_OW 12
41079: PLUS
41080: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41081: LD_VAR 0 6
41085: PPUSH
41086: LD_VAR 0 7
41090: PPUSH
41091: CALL_OW 488
41095: NOT
41096: IFFALSE 41118
// begin _x := x ;
41098: LD_ADDR_VAR 0 6
41102: PUSH
41103: LD_VAR 0 4
41107: ST_TO_ADDR
// _y := y ;
41108: LD_ADDR_VAR 0 7
41112: PUSH
41113: LD_VAR 0 5
41117: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41118: LD_ADDR_VAR 0 3
41122: PUSH
41123: LD_INT 1
41125: PPUSH
41126: LD_VAR 0 14
41130: PPUSH
41131: CALL_OW 12
41135: ST_TO_ADDR
// case i of 1 :
41136: LD_VAR 0 3
41140: PUSH
41141: LD_INT 1
41143: DOUBLE
41144: EQUAL
41145: IFTRUE 41149
41147: GO 41166
41149: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41150: LD_VAR 0 1
41154: PPUSH
41155: LD_VAR 0 10
41159: PPUSH
41160: CALL_OW 115
41164: GO 41227
41166: LD_INT 2
41168: DOUBLE
41169: EQUAL
41170: IFTRUE 41174
41172: GO 41196
41174: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41175: LD_VAR 0 1
41179: PPUSH
41180: LD_VAR 0 6
41184: PPUSH
41185: LD_VAR 0 7
41189: PPUSH
41190: CALL_OW 153
41194: GO 41227
41196: LD_INT 3
41198: DOUBLE
41199: EQUAL
41200: IFTRUE 41204
41202: GO 41226
41204: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41205: LD_VAR 0 1
41209: PPUSH
41210: LD_VAR 0 6
41214: PPUSH
41215: LD_VAR 0 7
41219: PPUSH
41220: CALL_OW 154
41224: GO 41227
41226: POP
// end ;
41227: LD_VAR 0 2
41231: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41232: LD_INT 0
41234: PPUSH
41235: PPUSH
41236: PPUSH
41237: PPUSH
41238: PPUSH
41239: PPUSH
// if not unit or not building then
41240: LD_VAR 0 1
41244: NOT
41245: PUSH
41246: LD_VAR 0 2
41250: NOT
41251: OR
41252: IFFALSE 41256
// exit ;
41254: GO 41414
// x := GetX ( building ) ;
41256: LD_ADDR_VAR 0 5
41260: PUSH
41261: LD_VAR 0 2
41265: PPUSH
41266: CALL_OW 250
41270: ST_TO_ADDR
// y := GetY ( building ) ;
41271: LD_ADDR_VAR 0 6
41275: PUSH
41276: LD_VAR 0 2
41280: PPUSH
41281: CALL_OW 251
41285: ST_TO_ADDR
// for i = 0 to 5 do
41286: LD_ADDR_VAR 0 4
41290: PUSH
41291: DOUBLE
41292: LD_INT 0
41294: DEC
41295: ST_TO_ADDR
41296: LD_INT 5
41298: PUSH
41299: FOR_TO
41300: IFFALSE 41412
// begin _x := ShiftX ( x , i , 3 ) ;
41302: LD_ADDR_VAR 0 7
41306: PUSH
41307: LD_VAR 0 5
41311: PPUSH
41312: LD_VAR 0 4
41316: PPUSH
41317: LD_INT 3
41319: PPUSH
41320: CALL_OW 272
41324: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41325: LD_ADDR_VAR 0 8
41329: PUSH
41330: LD_VAR 0 6
41334: PPUSH
41335: LD_VAR 0 4
41339: PPUSH
41340: LD_INT 3
41342: PPUSH
41343: CALL_OW 273
41347: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41348: LD_VAR 0 7
41352: PPUSH
41353: LD_VAR 0 8
41357: PPUSH
41358: CALL_OW 488
41362: NOT
41363: IFFALSE 41367
// continue ;
41365: GO 41299
// if HexInfo ( _x , _y ) = 0 then
41367: LD_VAR 0 7
41371: PPUSH
41372: LD_VAR 0 8
41376: PPUSH
41377: CALL_OW 428
41381: PUSH
41382: LD_INT 0
41384: EQUAL
41385: IFFALSE 41410
// begin ComMoveXY ( unit , _x , _y ) ;
41387: LD_VAR 0 1
41391: PPUSH
41392: LD_VAR 0 7
41396: PPUSH
41397: LD_VAR 0 8
41401: PPUSH
41402: CALL_OW 111
// exit ;
41406: POP
41407: POP
41408: GO 41414
// end ; end ;
41410: GO 41299
41412: POP
41413: POP
// end ;
41414: LD_VAR 0 3
41418: RET
// export function ScanBase ( side , base_area ) ; begin
41419: LD_INT 0
41421: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41422: LD_ADDR_VAR 0 3
41426: PUSH
41427: LD_VAR 0 2
41431: PPUSH
41432: LD_INT 81
41434: PUSH
41435: LD_VAR 0 1
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PPUSH
41444: CALL_OW 70
41448: ST_TO_ADDR
// end ;
41449: LD_VAR 0 3
41453: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41454: LD_INT 0
41456: PPUSH
41457: PPUSH
41458: PPUSH
41459: PPUSH
// result := false ;
41460: LD_ADDR_VAR 0 2
41464: PUSH
41465: LD_INT 0
41467: ST_TO_ADDR
// side := GetSide ( unit ) ;
41468: LD_ADDR_VAR 0 3
41472: PUSH
41473: LD_VAR 0 1
41477: PPUSH
41478: CALL_OW 255
41482: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41483: LD_ADDR_VAR 0 4
41487: PUSH
41488: LD_VAR 0 1
41492: PPUSH
41493: CALL_OW 248
41497: ST_TO_ADDR
// case nat of 1 :
41498: LD_VAR 0 4
41502: PUSH
41503: LD_INT 1
41505: DOUBLE
41506: EQUAL
41507: IFTRUE 41511
41509: GO 41522
41511: POP
// tech := tech_lassight ; 2 :
41512: LD_ADDR_VAR 0 5
41516: PUSH
41517: LD_INT 12
41519: ST_TO_ADDR
41520: GO 41561
41522: LD_INT 2
41524: DOUBLE
41525: EQUAL
41526: IFTRUE 41530
41528: GO 41541
41530: POP
// tech := tech_mortar ; 3 :
41531: LD_ADDR_VAR 0 5
41535: PUSH
41536: LD_INT 41
41538: ST_TO_ADDR
41539: GO 41561
41541: LD_INT 3
41543: DOUBLE
41544: EQUAL
41545: IFTRUE 41549
41547: GO 41560
41549: POP
// tech := tech_bazooka ; end ;
41550: LD_ADDR_VAR 0 5
41554: PUSH
41555: LD_INT 44
41557: ST_TO_ADDR
41558: GO 41561
41560: POP
// if Researched ( side , tech ) then
41561: LD_VAR 0 3
41565: PPUSH
41566: LD_VAR 0 5
41570: PPUSH
41571: CALL_OW 325
41575: IFFALSE 41602
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41577: LD_ADDR_VAR 0 2
41581: PUSH
41582: LD_INT 5
41584: PUSH
41585: LD_INT 8
41587: PUSH
41588: LD_INT 9
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: LIST
41595: PUSH
41596: LD_VAR 0 4
41600: ARRAY
41601: ST_TO_ADDR
// end ;
41602: LD_VAR 0 2
41606: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41607: LD_INT 0
41609: PPUSH
41610: PPUSH
41611: PPUSH
// if not mines then
41612: LD_VAR 0 2
41616: NOT
41617: IFFALSE 41621
// exit ;
41619: GO 41765
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41621: LD_ADDR_VAR 0 5
41625: PUSH
41626: LD_INT 81
41628: PUSH
41629: LD_VAR 0 1
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 3
41640: PUSH
41641: LD_INT 21
41643: PUSH
41644: LD_INT 3
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PPUSH
41659: CALL_OW 69
41663: ST_TO_ADDR
// for i in mines do
41664: LD_ADDR_VAR 0 4
41668: PUSH
41669: LD_VAR 0 2
41673: PUSH
41674: FOR_IN
41675: IFFALSE 41763
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41677: LD_VAR 0 4
41681: PUSH
41682: LD_INT 1
41684: ARRAY
41685: PPUSH
41686: LD_VAR 0 4
41690: PUSH
41691: LD_INT 2
41693: ARRAY
41694: PPUSH
41695: CALL_OW 458
41699: NOT
41700: IFFALSE 41704
// continue ;
41702: GO 41674
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41704: LD_VAR 0 4
41708: PUSH
41709: LD_INT 1
41711: ARRAY
41712: PPUSH
41713: LD_VAR 0 4
41717: PUSH
41718: LD_INT 2
41720: ARRAY
41721: PPUSH
41722: CALL_OW 428
41726: PUSH
41727: LD_VAR 0 5
41731: IN
41732: IFFALSE 41761
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41734: LD_VAR 0 4
41738: PUSH
41739: LD_INT 1
41741: ARRAY
41742: PPUSH
41743: LD_VAR 0 4
41747: PUSH
41748: LD_INT 2
41750: ARRAY
41751: PPUSH
41752: LD_VAR 0 1
41756: PPUSH
41757: CALL_OW 456
// end ;
41761: GO 41674
41763: POP
41764: POP
// end ;
41765: LD_VAR 0 3
41769: RET
// export function Count ( array ) ; var i ; begin
41770: LD_INT 0
41772: PPUSH
41773: PPUSH
// result := 0 ;
41774: LD_ADDR_VAR 0 2
41778: PUSH
41779: LD_INT 0
41781: ST_TO_ADDR
// for i in array do
41782: LD_ADDR_VAR 0 3
41786: PUSH
41787: LD_VAR 0 1
41791: PUSH
41792: FOR_IN
41793: IFFALSE 41817
// if i then
41795: LD_VAR 0 3
41799: IFFALSE 41815
// result := result + 1 ;
41801: LD_ADDR_VAR 0 2
41805: PUSH
41806: LD_VAR 0 2
41810: PUSH
41811: LD_INT 1
41813: PLUS
41814: ST_TO_ADDR
41815: GO 41792
41817: POP
41818: POP
// end ;
41819: LD_VAR 0 2
41823: RET
// export function IsEmpty ( building ) ; begin
41824: LD_INT 0
41826: PPUSH
// if not building then
41827: LD_VAR 0 1
41831: NOT
41832: IFFALSE 41836
// exit ;
41834: GO 41879
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41836: LD_ADDR_VAR 0 2
41840: PUSH
41841: LD_VAR 0 1
41845: PUSH
41846: LD_INT 22
41848: PUSH
41849: LD_VAR 0 1
41853: PPUSH
41854: CALL_OW 255
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 58
41865: PUSH
41866: EMPTY
41867: LIST
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PPUSH
41873: CALL_OW 69
41877: IN
41878: ST_TO_ADDR
// end ;
41879: LD_VAR 0 2
41883: RET
// export function IsNotFull ( building ) ; var places ; begin
41884: LD_INT 0
41886: PPUSH
41887: PPUSH
// if not building then
41888: LD_VAR 0 1
41892: NOT
41893: IFFALSE 41897
// exit ;
41895: GO 42068
// result := false ;
41897: LD_ADDR_VAR 0 2
41901: PUSH
41902: LD_INT 0
41904: ST_TO_ADDR
// places := 0 ;
41905: LD_ADDR_VAR 0 3
41909: PUSH
41910: LD_INT 0
41912: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41913: LD_VAR 0 1
41917: PPUSH
41918: CALL_OW 266
41922: PUSH
41923: LD_INT 0
41925: DOUBLE
41926: EQUAL
41927: IFTRUE 41985
41929: LD_INT 1
41931: DOUBLE
41932: EQUAL
41933: IFTRUE 41985
41935: LD_INT 6
41937: DOUBLE
41938: EQUAL
41939: IFTRUE 41985
41941: LD_INT 7
41943: DOUBLE
41944: EQUAL
41945: IFTRUE 41985
41947: LD_INT 8
41949: DOUBLE
41950: EQUAL
41951: IFTRUE 41985
41953: LD_INT 4
41955: DOUBLE
41956: EQUAL
41957: IFTRUE 41985
41959: LD_INT 5
41961: DOUBLE
41962: EQUAL
41963: IFTRUE 41985
41965: LD_INT 2
41967: DOUBLE
41968: EQUAL
41969: IFTRUE 41985
41971: LD_INT 3
41973: DOUBLE
41974: EQUAL
41975: IFTRUE 41985
41977: LD_INT 35
41979: DOUBLE
41980: EQUAL
41981: IFTRUE 41985
41983: GO 41996
41985: POP
// places := 6 ; b_bunker , b_breastwork :
41986: LD_ADDR_VAR 0 3
41990: PUSH
41991: LD_INT 6
41993: ST_TO_ADDR
41994: GO 42041
41996: LD_INT 32
41998: DOUBLE
41999: EQUAL
42000: IFTRUE 42010
42002: LD_INT 31
42004: DOUBLE
42005: EQUAL
42006: IFTRUE 42010
42008: GO 42021
42010: POP
// places := 1 ; b_control_tower :
42011: LD_ADDR_VAR 0 3
42015: PUSH
42016: LD_INT 1
42018: ST_TO_ADDR
42019: GO 42041
42021: LD_INT 36
42023: DOUBLE
42024: EQUAL
42025: IFTRUE 42029
42027: GO 42040
42029: POP
// places := 3 ; end ;
42030: LD_ADDR_VAR 0 3
42034: PUSH
42035: LD_INT 3
42037: ST_TO_ADDR
42038: GO 42041
42040: POP
// if places then
42041: LD_VAR 0 3
42045: IFFALSE 42068
// result := UnitsInside ( building ) < places ;
42047: LD_ADDR_VAR 0 2
42051: PUSH
42052: LD_VAR 0 1
42056: PPUSH
42057: CALL_OW 313
42061: PUSH
42062: LD_VAR 0 3
42066: LESS
42067: ST_TO_ADDR
// end ;
42068: LD_VAR 0 2
42072: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42073: LD_INT 0
42075: PPUSH
42076: PPUSH
42077: PPUSH
42078: PPUSH
// tmp := [ ] ;
42079: LD_ADDR_VAR 0 3
42083: PUSH
42084: EMPTY
42085: ST_TO_ADDR
// list := [ ] ;
42086: LD_ADDR_VAR 0 5
42090: PUSH
42091: EMPTY
42092: ST_TO_ADDR
// for i = 16 to 25 do
42093: LD_ADDR_VAR 0 4
42097: PUSH
42098: DOUBLE
42099: LD_INT 16
42101: DEC
42102: ST_TO_ADDR
42103: LD_INT 25
42105: PUSH
42106: FOR_TO
42107: IFFALSE 42180
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42109: LD_ADDR_VAR 0 3
42113: PUSH
42114: LD_VAR 0 3
42118: PUSH
42119: LD_INT 22
42121: PUSH
42122: LD_VAR 0 1
42126: PPUSH
42127: CALL_OW 255
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 91
42138: PUSH
42139: LD_VAR 0 1
42143: PUSH
42144: LD_INT 6
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 30
42154: PUSH
42155: LD_VAR 0 4
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: LIST
42168: PUSH
42169: EMPTY
42170: LIST
42171: PPUSH
42172: CALL_OW 69
42176: ADD
42177: ST_TO_ADDR
42178: GO 42106
42180: POP
42181: POP
// for i = 1 to tmp do
42182: LD_ADDR_VAR 0 4
42186: PUSH
42187: DOUBLE
42188: LD_INT 1
42190: DEC
42191: ST_TO_ADDR
42192: LD_VAR 0 3
42196: PUSH
42197: FOR_TO
42198: IFFALSE 42286
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42200: LD_ADDR_VAR 0 5
42204: PUSH
42205: LD_VAR 0 5
42209: PUSH
42210: LD_VAR 0 3
42214: PUSH
42215: LD_VAR 0 4
42219: ARRAY
42220: PPUSH
42221: CALL_OW 266
42225: PUSH
42226: LD_VAR 0 3
42230: PUSH
42231: LD_VAR 0 4
42235: ARRAY
42236: PPUSH
42237: CALL_OW 250
42241: PUSH
42242: LD_VAR 0 3
42246: PUSH
42247: LD_VAR 0 4
42251: ARRAY
42252: PPUSH
42253: CALL_OW 251
42257: PUSH
42258: LD_VAR 0 3
42262: PUSH
42263: LD_VAR 0 4
42267: ARRAY
42268: PPUSH
42269: CALL_OW 254
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: PUSH
42280: EMPTY
42281: LIST
42282: ADD
42283: ST_TO_ADDR
42284: GO 42197
42286: POP
42287: POP
// result := list ;
42288: LD_ADDR_VAR 0 2
42292: PUSH
42293: LD_VAR 0 5
42297: ST_TO_ADDR
// end ;
42298: LD_VAR 0 2
42302: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42303: LD_INT 0
42305: PPUSH
42306: PPUSH
42307: PPUSH
42308: PPUSH
42309: PPUSH
42310: PPUSH
42311: PPUSH
// if not factory then
42312: LD_VAR 0 1
42316: NOT
42317: IFFALSE 42321
// exit ;
42319: GO 42914
// if control = control_apeman then
42321: LD_VAR 0 4
42325: PUSH
42326: LD_INT 5
42328: EQUAL
42329: IFFALSE 42438
// begin tmp := UnitsInside ( factory ) ;
42331: LD_ADDR_VAR 0 8
42335: PUSH
42336: LD_VAR 0 1
42340: PPUSH
42341: CALL_OW 313
42345: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42346: LD_VAR 0 8
42350: PPUSH
42351: LD_INT 25
42353: PUSH
42354: LD_INT 12
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PPUSH
42361: CALL_OW 72
42365: NOT
42366: IFFALSE 42376
// control := control_manual ;
42368: LD_ADDR_VAR 0 4
42372: PUSH
42373: LD_INT 1
42375: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42376: LD_ADDR_VAR 0 8
42380: PUSH
42381: LD_VAR 0 1
42385: PPUSH
42386: CALL 42073 0 1
42390: ST_TO_ADDR
// if tmp then
42391: LD_VAR 0 8
42395: IFFALSE 42438
// begin for i in tmp do
42397: LD_ADDR_VAR 0 7
42401: PUSH
42402: LD_VAR 0 8
42406: PUSH
42407: FOR_IN
42408: IFFALSE 42436
// if i [ 1 ] = b_ext_radio then
42410: LD_VAR 0 7
42414: PUSH
42415: LD_INT 1
42417: ARRAY
42418: PUSH
42419: LD_INT 22
42421: EQUAL
42422: IFFALSE 42434
// begin control := control_remote ;
42424: LD_ADDR_VAR 0 4
42428: PUSH
42429: LD_INT 2
42431: ST_TO_ADDR
// break ;
42432: GO 42436
// end ;
42434: GO 42407
42436: POP
42437: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42438: LD_VAR 0 1
42442: PPUSH
42443: LD_VAR 0 2
42447: PPUSH
42448: LD_VAR 0 3
42452: PPUSH
42453: LD_VAR 0 4
42457: PPUSH
42458: LD_VAR 0 5
42462: PPUSH
42463: CALL_OW 448
42467: IFFALSE 42502
// begin result := [ chassis , engine , control , weapon ] ;
42469: LD_ADDR_VAR 0 6
42473: PUSH
42474: LD_VAR 0 2
42478: PUSH
42479: LD_VAR 0 3
42483: PUSH
42484: LD_VAR 0 4
42488: PUSH
42489: LD_VAR 0 5
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: ST_TO_ADDR
// exit ;
42500: GO 42914
// end ; _chassis := AvailableChassisList ( factory ) ;
42502: LD_ADDR_VAR 0 9
42506: PUSH
42507: LD_VAR 0 1
42511: PPUSH
42512: CALL_OW 475
42516: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42517: LD_ADDR_VAR 0 11
42521: PUSH
42522: LD_VAR 0 1
42526: PPUSH
42527: CALL_OW 476
42531: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42532: LD_ADDR_VAR 0 12
42536: PUSH
42537: LD_VAR 0 1
42541: PPUSH
42542: CALL_OW 477
42546: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42547: LD_ADDR_VAR 0 10
42551: PUSH
42552: LD_VAR 0 1
42556: PPUSH
42557: CALL_OW 478
42561: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42562: LD_VAR 0 9
42566: NOT
42567: PUSH
42568: LD_VAR 0 11
42572: NOT
42573: OR
42574: PUSH
42575: LD_VAR 0 12
42579: NOT
42580: OR
42581: PUSH
42582: LD_VAR 0 10
42586: NOT
42587: OR
42588: IFFALSE 42623
// begin result := [ chassis , engine , control , weapon ] ;
42590: LD_ADDR_VAR 0 6
42594: PUSH
42595: LD_VAR 0 2
42599: PUSH
42600: LD_VAR 0 3
42604: PUSH
42605: LD_VAR 0 4
42609: PUSH
42610: LD_VAR 0 5
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: ST_TO_ADDR
// exit ;
42621: GO 42914
// end ; if not chassis in _chassis then
42623: LD_VAR 0 2
42627: PUSH
42628: LD_VAR 0 9
42632: IN
42633: NOT
42634: IFFALSE 42660
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42636: LD_ADDR_VAR 0 2
42640: PUSH
42641: LD_VAR 0 9
42645: PUSH
42646: LD_INT 1
42648: PPUSH
42649: LD_VAR 0 9
42653: PPUSH
42654: CALL_OW 12
42658: ARRAY
42659: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42660: LD_VAR 0 2
42664: PPUSH
42665: LD_VAR 0 3
42669: PPUSH
42670: CALL 42919 0 2
42674: NOT
42675: IFFALSE 42734
// repeat engine := _engine [ 1 ] ;
42677: LD_ADDR_VAR 0 3
42681: PUSH
42682: LD_VAR 0 11
42686: PUSH
42687: LD_INT 1
42689: ARRAY
42690: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42691: LD_ADDR_VAR 0 11
42695: PUSH
42696: LD_VAR 0 11
42700: PPUSH
42701: LD_INT 1
42703: PPUSH
42704: CALL_OW 3
42708: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42709: LD_VAR 0 2
42713: PPUSH
42714: LD_VAR 0 3
42718: PPUSH
42719: CALL 42919 0 2
42723: PUSH
42724: LD_VAR 0 11
42728: PUSH
42729: EMPTY
42730: EQUAL
42731: OR
42732: IFFALSE 42677
// if not control in _control then
42734: LD_VAR 0 4
42738: PUSH
42739: LD_VAR 0 12
42743: IN
42744: NOT
42745: IFFALSE 42771
// control := _control [ rand ( 1 , _control ) ] ;
42747: LD_ADDR_VAR 0 4
42751: PUSH
42752: LD_VAR 0 12
42756: PUSH
42757: LD_INT 1
42759: PPUSH
42760: LD_VAR 0 12
42764: PPUSH
42765: CALL_OW 12
42769: ARRAY
42770: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42771: LD_VAR 0 2
42775: PPUSH
42776: LD_VAR 0 5
42780: PPUSH
42781: CALL 43139 0 2
42785: NOT
42786: IFFALSE 42845
// repeat weapon := _weapon [ 1 ] ;
42788: LD_ADDR_VAR 0 5
42792: PUSH
42793: LD_VAR 0 10
42797: PUSH
42798: LD_INT 1
42800: ARRAY
42801: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42802: LD_ADDR_VAR 0 10
42806: PUSH
42807: LD_VAR 0 10
42811: PPUSH
42812: LD_INT 1
42814: PPUSH
42815: CALL_OW 3
42819: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42820: LD_VAR 0 2
42824: PPUSH
42825: LD_VAR 0 5
42829: PPUSH
42830: CALL 43139 0 2
42834: PUSH
42835: LD_VAR 0 10
42839: PUSH
42840: EMPTY
42841: EQUAL
42842: OR
42843: IFFALSE 42788
// result := [ ] ;
42845: LD_ADDR_VAR 0 6
42849: PUSH
42850: EMPTY
42851: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42852: LD_VAR 0 1
42856: PPUSH
42857: LD_VAR 0 2
42861: PPUSH
42862: LD_VAR 0 3
42866: PPUSH
42867: LD_VAR 0 4
42871: PPUSH
42872: LD_VAR 0 5
42876: PPUSH
42877: CALL_OW 448
42881: IFFALSE 42914
// result := [ chassis , engine , control , weapon ] ;
42883: LD_ADDR_VAR 0 6
42887: PUSH
42888: LD_VAR 0 2
42892: PUSH
42893: LD_VAR 0 3
42897: PUSH
42898: LD_VAR 0 4
42902: PUSH
42903: LD_VAR 0 5
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: ST_TO_ADDR
// end ;
42914: LD_VAR 0 6
42918: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42919: LD_INT 0
42921: PPUSH
// if not chassis or not engine then
42922: LD_VAR 0 1
42926: NOT
42927: PUSH
42928: LD_VAR 0 2
42932: NOT
42933: OR
42934: IFFALSE 42938
// exit ;
42936: GO 43134
// case engine of engine_solar :
42938: LD_VAR 0 2
42942: PUSH
42943: LD_INT 2
42945: DOUBLE
42946: EQUAL
42947: IFTRUE 42951
42949: GO 42989
42951: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42952: LD_ADDR_VAR 0 3
42956: PUSH
42957: LD_INT 11
42959: PUSH
42960: LD_INT 12
42962: PUSH
42963: LD_INT 13
42965: PUSH
42966: LD_INT 14
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: LD_INT 3
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: ST_TO_ADDR
42987: GO 43118
42989: LD_INT 1
42991: DOUBLE
42992: EQUAL
42993: IFTRUE 42997
42995: GO 43059
42997: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42998: LD_ADDR_VAR 0 3
43002: PUSH
43003: LD_INT 11
43005: PUSH
43006: LD_INT 12
43008: PUSH
43009: LD_INT 13
43011: PUSH
43012: LD_INT 14
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: LD_INT 3
43023: PUSH
43024: LD_INT 4
43026: PUSH
43027: LD_INT 5
43029: PUSH
43030: LD_INT 21
43032: PUSH
43033: LD_INT 23
43035: PUSH
43036: LD_INT 22
43038: PUSH
43039: LD_INT 24
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: ST_TO_ADDR
43057: GO 43118
43059: LD_INT 3
43061: DOUBLE
43062: EQUAL
43063: IFTRUE 43067
43065: GO 43117
43067: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43068: LD_ADDR_VAR 0 3
43072: PUSH
43073: LD_INT 13
43075: PUSH
43076: LD_INT 14
43078: PUSH
43079: LD_INT 2
43081: PUSH
43082: LD_INT 3
43084: PUSH
43085: LD_INT 4
43087: PUSH
43088: LD_INT 5
43090: PUSH
43091: LD_INT 21
43093: PUSH
43094: LD_INT 22
43096: PUSH
43097: LD_INT 23
43099: PUSH
43100: LD_INT 24
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: ST_TO_ADDR
43115: GO 43118
43117: POP
// result := ( chassis in result ) ;
43118: LD_ADDR_VAR 0 3
43122: PUSH
43123: LD_VAR 0 1
43127: PUSH
43128: LD_VAR 0 3
43132: IN
43133: ST_TO_ADDR
// end ;
43134: LD_VAR 0 3
43138: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43139: LD_INT 0
43141: PPUSH
// if not chassis or not weapon then
43142: LD_VAR 0 1
43146: NOT
43147: PUSH
43148: LD_VAR 0 2
43152: NOT
43153: OR
43154: IFFALSE 43158
// exit ;
43156: GO 44218
// case weapon of us_machine_gun :
43158: LD_VAR 0 2
43162: PUSH
43163: LD_INT 2
43165: DOUBLE
43166: EQUAL
43167: IFTRUE 43171
43169: GO 43201
43171: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43172: LD_ADDR_VAR 0 3
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: LD_INT 3
43185: PUSH
43186: LD_INT 4
43188: PUSH
43189: LD_INT 5
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: ST_TO_ADDR
43199: GO 44202
43201: LD_INT 3
43203: DOUBLE
43204: EQUAL
43205: IFTRUE 43209
43207: GO 43239
43209: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43210: LD_ADDR_VAR 0 3
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: LD_INT 2
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: LD_INT 4
43226: PUSH
43227: LD_INT 5
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: ST_TO_ADDR
43237: GO 44202
43239: LD_INT 11
43241: DOUBLE
43242: EQUAL
43243: IFTRUE 43247
43245: GO 43277
43247: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43248: LD_ADDR_VAR 0 3
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 2
43258: PUSH
43259: LD_INT 3
43261: PUSH
43262: LD_INT 4
43264: PUSH
43265: LD_INT 5
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: ST_TO_ADDR
43275: GO 44202
43277: LD_INT 4
43279: DOUBLE
43280: EQUAL
43281: IFTRUE 43285
43283: GO 43311
43285: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43286: LD_ADDR_VAR 0 3
43290: PUSH
43291: LD_INT 2
43293: PUSH
43294: LD_INT 3
43296: PUSH
43297: LD_INT 4
43299: PUSH
43300: LD_INT 5
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: ST_TO_ADDR
43309: GO 44202
43311: LD_INT 5
43313: DOUBLE
43314: EQUAL
43315: IFTRUE 43319
43317: GO 43345
43319: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43320: LD_ADDR_VAR 0 3
43324: PUSH
43325: LD_INT 2
43327: PUSH
43328: LD_INT 3
43330: PUSH
43331: LD_INT 4
43333: PUSH
43334: LD_INT 5
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: ST_TO_ADDR
43343: GO 44202
43345: LD_INT 9
43347: DOUBLE
43348: EQUAL
43349: IFTRUE 43353
43351: GO 43379
43353: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43354: LD_ADDR_VAR 0 3
43358: PUSH
43359: LD_INT 2
43361: PUSH
43362: LD_INT 3
43364: PUSH
43365: LD_INT 4
43367: PUSH
43368: LD_INT 5
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: ST_TO_ADDR
43377: GO 44202
43379: LD_INT 7
43381: DOUBLE
43382: EQUAL
43383: IFTRUE 43387
43385: GO 43413
43387: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43388: LD_ADDR_VAR 0 3
43392: PUSH
43393: LD_INT 2
43395: PUSH
43396: LD_INT 3
43398: PUSH
43399: LD_INT 4
43401: PUSH
43402: LD_INT 5
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: ST_TO_ADDR
43411: GO 44202
43413: LD_INT 12
43415: DOUBLE
43416: EQUAL
43417: IFTRUE 43421
43419: GO 43447
43421: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43422: LD_ADDR_VAR 0 3
43426: PUSH
43427: LD_INT 2
43429: PUSH
43430: LD_INT 3
43432: PUSH
43433: LD_INT 4
43435: PUSH
43436: LD_INT 5
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: ST_TO_ADDR
43445: GO 44202
43447: LD_INT 13
43449: DOUBLE
43450: EQUAL
43451: IFTRUE 43455
43453: GO 43481
43455: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43456: LD_ADDR_VAR 0 3
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: LD_INT 3
43466: PUSH
43467: LD_INT 4
43469: PUSH
43470: LD_INT 5
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: ST_TO_ADDR
43479: GO 44202
43481: LD_INT 14
43483: DOUBLE
43484: EQUAL
43485: IFTRUE 43489
43487: GO 43507
43489: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43490: LD_ADDR_VAR 0 3
43494: PUSH
43495: LD_INT 4
43497: PUSH
43498: LD_INT 5
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: ST_TO_ADDR
43505: GO 44202
43507: LD_INT 6
43509: DOUBLE
43510: EQUAL
43511: IFTRUE 43515
43513: GO 43533
43515: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43516: LD_ADDR_VAR 0 3
43520: PUSH
43521: LD_INT 4
43523: PUSH
43524: LD_INT 5
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: ST_TO_ADDR
43531: GO 44202
43533: LD_INT 10
43535: DOUBLE
43536: EQUAL
43537: IFTRUE 43541
43539: GO 43559
43541: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43542: LD_ADDR_VAR 0 3
43546: PUSH
43547: LD_INT 4
43549: PUSH
43550: LD_INT 5
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: ST_TO_ADDR
43557: GO 44202
43559: LD_INT 22
43561: DOUBLE
43562: EQUAL
43563: IFTRUE 43567
43565: GO 43593
43567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43568: LD_ADDR_VAR 0 3
43572: PUSH
43573: LD_INT 11
43575: PUSH
43576: LD_INT 12
43578: PUSH
43579: LD_INT 13
43581: PUSH
43582: LD_INT 14
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: ST_TO_ADDR
43591: GO 44202
43593: LD_INT 23
43595: DOUBLE
43596: EQUAL
43597: IFTRUE 43601
43599: GO 43627
43601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43602: LD_ADDR_VAR 0 3
43606: PUSH
43607: LD_INT 11
43609: PUSH
43610: LD_INT 12
43612: PUSH
43613: LD_INT 13
43615: PUSH
43616: LD_INT 14
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: ST_TO_ADDR
43625: GO 44202
43627: LD_INT 24
43629: DOUBLE
43630: EQUAL
43631: IFTRUE 43635
43633: GO 43661
43635: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43636: LD_ADDR_VAR 0 3
43640: PUSH
43641: LD_INT 11
43643: PUSH
43644: LD_INT 12
43646: PUSH
43647: LD_INT 13
43649: PUSH
43650: LD_INT 14
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: ST_TO_ADDR
43659: GO 44202
43661: LD_INT 30
43663: DOUBLE
43664: EQUAL
43665: IFTRUE 43669
43667: GO 43695
43669: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43670: LD_ADDR_VAR 0 3
43674: PUSH
43675: LD_INT 11
43677: PUSH
43678: LD_INT 12
43680: PUSH
43681: LD_INT 13
43683: PUSH
43684: LD_INT 14
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: ST_TO_ADDR
43693: GO 44202
43695: LD_INT 25
43697: DOUBLE
43698: EQUAL
43699: IFTRUE 43703
43701: GO 43721
43703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43704: LD_ADDR_VAR 0 3
43708: PUSH
43709: LD_INT 13
43711: PUSH
43712: LD_INT 14
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: ST_TO_ADDR
43719: GO 44202
43721: LD_INT 27
43723: DOUBLE
43724: EQUAL
43725: IFTRUE 43729
43727: GO 43747
43729: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43730: LD_ADDR_VAR 0 3
43734: PUSH
43735: LD_INT 13
43737: PUSH
43738: LD_INT 14
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: ST_TO_ADDR
43745: GO 44202
43747: LD_INT 92
43749: DOUBLE
43750: EQUAL
43751: IFTRUE 43755
43753: GO 43781
43755: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43756: LD_ADDR_VAR 0 3
43760: PUSH
43761: LD_INT 11
43763: PUSH
43764: LD_INT 12
43766: PUSH
43767: LD_INT 13
43769: PUSH
43770: LD_INT 14
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: ST_TO_ADDR
43779: GO 44202
43781: LD_INT 28
43783: DOUBLE
43784: EQUAL
43785: IFTRUE 43789
43787: GO 43807
43789: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43790: LD_ADDR_VAR 0 3
43794: PUSH
43795: LD_INT 13
43797: PUSH
43798: LD_INT 14
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: ST_TO_ADDR
43805: GO 44202
43807: LD_INT 29
43809: DOUBLE
43810: EQUAL
43811: IFTRUE 43815
43813: GO 43833
43815: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43816: LD_ADDR_VAR 0 3
43820: PUSH
43821: LD_INT 13
43823: PUSH
43824: LD_INT 14
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: ST_TO_ADDR
43831: GO 44202
43833: LD_INT 31
43835: DOUBLE
43836: EQUAL
43837: IFTRUE 43841
43839: GO 43859
43841: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43842: LD_ADDR_VAR 0 3
43846: PUSH
43847: LD_INT 13
43849: PUSH
43850: LD_INT 14
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: ST_TO_ADDR
43857: GO 44202
43859: LD_INT 26
43861: DOUBLE
43862: EQUAL
43863: IFTRUE 43867
43865: GO 43885
43867: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43868: LD_ADDR_VAR 0 3
43872: PUSH
43873: LD_INT 13
43875: PUSH
43876: LD_INT 14
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: ST_TO_ADDR
43883: GO 44202
43885: LD_INT 42
43887: DOUBLE
43888: EQUAL
43889: IFTRUE 43893
43891: GO 43919
43893: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43894: LD_ADDR_VAR 0 3
43898: PUSH
43899: LD_INT 21
43901: PUSH
43902: LD_INT 22
43904: PUSH
43905: LD_INT 23
43907: PUSH
43908: LD_INT 24
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: ST_TO_ADDR
43917: GO 44202
43919: LD_INT 43
43921: DOUBLE
43922: EQUAL
43923: IFTRUE 43927
43925: GO 43953
43927: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43928: LD_ADDR_VAR 0 3
43932: PUSH
43933: LD_INT 21
43935: PUSH
43936: LD_INT 22
43938: PUSH
43939: LD_INT 23
43941: PUSH
43942: LD_INT 24
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: ST_TO_ADDR
43951: GO 44202
43953: LD_INT 44
43955: DOUBLE
43956: EQUAL
43957: IFTRUE 43961
43959: GO 43987
43961: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43962: LD_ADDR_VAR 0 3
43966: PUSH
43967: LD_INT 21
43969: PUSH
43970: LD_INT 22
43972: PUSH
43973: LD_INT 23
43975: PUSH
43976: LD_INT 24
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: ST_TO_ADDR
43985: GO 44202
43987: LD_INT 45
43989: DOUBLE
43990: EQUAL
43991: IFTRUE 43995
43993: GO 44021
43995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43996: LD_ADDR_VAR 0 3
44000: PUSH
44001: LD_INT 21
44003: PUSH
44004: LD_INT 22
44006: PUSH
44007: LD_INT 23
44009: PUSH
44010: LD_INT 24
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: ST_TO_ADDR
44019: GO 44202
44021: LD_INT 49
44023: DOUBLE
44024: EQUAL
44025: IFTRUE 44029
44027: GO 44055
44029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44030: LD_ADDR_VAR 0 3
44034: PUSH
44035: LD_INT 21
44037: PUSH
44038: LD_INT 22
44040: PUSH
44041: LD_INT 23
44043: PUSH
44044: LD_INT 24
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: ST_TO_ADDR
44053: GO 44202
44055: LD_INT 51
44057: DOUBLE
44058: EQUAL
44059: IFTRUE 44063
44061: GO 44089
44063: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44064: LD_ADDR_VAR 0 3
44068: PUSH
44069: LD_INT 21
44071: PUSH
44072: LD_INT 22
44074: PUSH
44075: LD_INT 23
44077: PUSH
44078: LD_INT 24
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: ST_TO_ADDR
44087: GO 44202
44089: LD_INT 52
44091: DOUBLE
44092: EQUAL
44093: IFTRUE 44097
44095: GO 44123
44097: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44098: LD_ADDR_VAR 0 3
44102: PUSH
44103: LD_INT 21
44105: PUSH
44106: LD_INT 22
44108: PUSH
44109: LD_INT 23
44111: PUSH
44112: LD_INT 24
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: ST_TO_ADDR
44121: GO 44202
44123: LD_INT 53
44125: DOUBLE
44126: EQUAL
44127: IFTRUE 44131
44129: GO 44149
44131: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44132: LD_ADDR_VAR 0 3
44136: PUSH
44137: LD_INT 23
44139: PUSH
44140: LD_INT 24
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: ST_TO_ADDR
44147: GO 44202
44149: LD_INT 46
44151: DOUBLE
44152: EQUAL
44153: IFTRUE 44157
44155: GO 44175
44157: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44158: LD_ADDR_VAR 0 3
44162: PUSH
44163: LD_INT 23
44165: PUSH
44166: LD_INT 24
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: ST_TO_ADDR
44173: GO 44202
44175: LD_INT 47
44177: DOUBLE
44178: EQUAL
44179: IFTRUE 44183
44181: GO 44201
44183: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44184: LD_ADDR_VAR 0 3
44188: PUSH
44189: LD_INT 23
44191: PUSH
44192: LD_INT 24
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: ST_TO_ADDR
44199: GO 44202
44201: POP
// result := ( chassis in result ) ;
44202: LD_ADDR_VAR 0 3
44206: PUSH
44207: LD_VAR 0 1
44211: PUSH
44212: LD_VAR 0 3
44216: IN
44217: ST_TO_ADDR
// end ;
44218: LD_VAR 0 3
44222: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44223: LD_INT 0
44225: PPUSH
44226: PPUSH
44227: PPUSH
44228: PPUSH
44229: PPUSH
44230: PPUSH
44231: PPUSH
// result := array ;
44232: LD_ADDR_VAR 0 5
44236: PUSH
44237: LD_VAR 0 1
44241: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44242: LD_VAR 0 1
44246: NOT
44247: PUSH
44248: LD_VAR 0 2
44252: NOT
44253: OR
44254: PUSH
44255: LD_VAR 0 3
44259: NOT
44260: OR
44261: PUSH
44262: LD_VAR 0 2
44266: PUSH
44267: LD_VAR 0 1
44271: GREATER
44272: OR
44273: PUSH
44274: LD_VAR 0 3
44278: PUSH
44279: LD_VAR 0 1
44283: GREATER
44284: OR
44285: IFFALSE 44289
// exit ;
44287: GO 44585
// if direction then
44289: LD_VAR 0 4
44293: IFFALSE 44357
// begin d := 1 ;
44295: LD_ADDR_VAR 0 9
44299: PUSH
44300: LD_INT 1
44302: ST_TO_ADDR
// if i_from > i_to then
44303: LD_VAR 0 2
44307: PUSH
44308: LD_VAR 0 3
44312: GREATER
44313: IFFALSE 44339
// length := ( array - i_from ) + i_to else
44315: LD_ADDR_VAR 0 11
44319: PUSH
44320: LD_VAR 0 1
44324: PUSH
44325: LD_VAR 0 2
44329: MINUS
44330: PUSH
44331: LD_VAR 0 3
44335: PLUS
44336: ST_TO_ADDR
44337: GO 44355
// length := i_to - i_from ;
44339: LD_ADDR_VAR 0 11
44343: PUSH
44344: LD_VAR 0 3
44348: PUSH
44349: LD_VAR 0 2
44353: MINUS
44354: ST_TO_ADDR
// end else
44355: GO 44418
// begin d := - 1 ;
44357: LD_ADDR_VAR 0 9
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: ST_TO_ADDR
// if i_from > i_to then
44366: LD_VAR 0 2
44370: PUSH
44371: LD_VAR 0 3
44375: GREATER
44376: IFFALSE 44396
// length := i_from - i_to else
44378: LD_ADDR_VAR 0 11
44382: PUSH
44383: LD_VAR 0 2
44387: PUSH
44388: LD_VAR 0 3
44392: MINUS
44393: ST_TO_ADDR
44394: GO 44418
// length := ( array - i_to ) + i_from ;
44396: LD_ADDR_VAR 0 11
44400: PUSH
44401: LD_VAR 0 1
44405: PUSH
44406: LD_VAR 0 3
44410: MINUS
44411: PUSH
44412: LD_VAR 0 2
44416: PLUS
44417: ST_TO_ADDR
// end ; if not length then
44418: LD_VAR 0 11
44422: NOT
44423: IFFALSE 44427
// exit ;
44425: GO 44585
// tmp := array ;
44427: LD_ADDR_VAR 0 10
44431: PUSH
44432: LD_VAR 0 1
44436: ST_TO_ADDR
// for i = 1 to length do
44437: LD_ADDR_VAR 0 6
44441: PUSH
44442: DOUBLE
44443: LD_INT 1
44445: DEC
44446: ST_TO_ADDR
44447: LD_VAR 0 11
44451: PUSH
44452: FOR_TO
44453: IFFALSE 44573
// begin for j = 1 to array do
44455: LD_ADDR_VAR 0 7
44459: PUSH
44460: DOUBLE
44461: LD_INT 1
44463: DEC
44464: ST_TO_ADDR
44465: LD_VAR 0 1
44469: PUSH
44470: FOR_TO
44471: IFFALSE 44559
// begin k := j + d ;
44473: LD_ADDR_VAR 0 8
44477: PUSH
44478: LD_VAR 0 7
44482: PUSH
44483: LD_VAR 0 9
44487: PLUS
44488: ST_TO_ADDR
// if k > array then
44489: LD_VAR 0 8
44493: PUSH
44494: LD_VAR 0 1
44498: GREATER
44499: IFFALSE 44509
// k := 1 ;
44501: LD_ADDR_VAR 0 8
44505: PUSH
44506: LD_INT 1
44508: ST_TO_ADDR
// if not k then
44509: LD_VAR 0 8
44513: NOT
44514: IFFALSE 44526
// k := array ;
44516: LD_ADDR_VAR 0 8
44520: PUSH
44521: LD_VAR 0 1
44525: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44526: LD_ADDR_VAR 0 10
44530: PUSH
44531: LD_VAR 0 10
44535: PPUSH
44536: LD_VAR 0 8
44540: PPUSH
44541: LD_VAR 0 1
44545: PUSH
44546: LD_VAR 0 7
44550: ARRAY
44551: PPUSH
44552: CALL_OW 1
44556: ST_TO_ADDR
// end ;
44557: GO 44470
44559: POP
44560: POP
// array := tmp ;
44561: LD_ADDR_VAR 0 1
44565: PUSH
44566: LD_VAR 0 10
44570: ST_TO_ADDR
// end ;
44571: GO 44452
44573: POP
44574: POP
// result := array ;
44575: LD_ADDR_VAR 0 5
44579: PUSH
44580: LD_VAR 0 1
44584: ST_TO_ADDR
// end ;
44585: LD_VAR 0 5
44589: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44590: LD_INT 0
44592: PPUSH
44593: PPUSH
// result := 0 ;
44594: LD_ADDR_VAR 0 3
44598: PUSH
44599: LD_INT 0
44601: ST_TO_ADDR
// if not array or not value in array then
44602: LD_VAR 0 1
44606: NOT
44607: PUSH
44608: LD_VAR 0 2
44612: PUSH
44613: LD_VAR 0 1
44617: IN
44618: NOT
44619: OR
44620: IFFALSE 44624
// exit ;
44622: GO 44678
// for i = 1 to array do
44624: LD_ADDR_VAR 0 4
44628: PUSH
44629: DOUBLE
44630: LD_INT 1
44632: DEC
44633: ST_TO_ADDR
44634: LD_VAR 0 1
44638: PUSH
44639: FOR_TO
44640: IFFALSE 44676
// if value = array [ i ] then
44642: LD_VAR 0 2
44646: PUSH
44647: LD_VAR 0 1
44651: PUSH
44652: LD_VAR 0 4
44656: ARRAY
44657: EQUAL
44658: IFFALSE 44674
// begin result := i ;
44660: LD_ADDR_VAR 0 3
44664: PUSH
44665: LD_VAR 0 4
44669: ST_TO_ADDR
// exit ;
44670: POP
44671: POP
44672: GO 44678
// end ;
44674: GO 44639
44676: POP
44677: POP
// end ;
44678: LD_VAR 0 3
44682: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44683: LD_INT 0
44685: PPUSH
// vc_chassis := chassis ;
44686: LD_ADDR_OWVAR 37
44690: PUSH
44691: LD_VAR 0 1
44695: ST_TO_ADDR
// vc_engine := engine ;
44696: LD_ADDR_OWVAR 39
44700: PUSH
44701: LD_VAR 0 2
44705: ST_TO_ADDR
// vc_control := control ;
44706: LD_ADDR_OWVAR 38
44710: PUSH
44711: LD_VAR 0 3
44715: ST_TO_ADDR
// vc_weapon := weapon ;
44716: LD_ADDR_OWVAR 40
44720: PUSH
44721: LD_VAR 0 4
44725: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44726: LD_ADDR_OWVAR 41
44730: PUSH
44731: LD_VAR 0 5
44735: ST_TO_ADDR
// end ;
44736: LD_VAR 0 6
44740: RET
// export function WantPlant ( unit ) ; var task ; begin
44741: LD_INT 0
44743: PPUSH
44744: PPUSH
// result := false ;
44745: LD_ADDR_VAR 0 2
44749: PUSH
44750: LD_INT 0
44752: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44753: LD_ADDR_VAR 0 3
44757: PUSH
44758: LD_VAR 0 1
44762: PPUSH
44763: CALL_OW 437
44767: ST_TO_ADDR
// if task then
44768: LD_VAR 0 3
44772: IFFALSE 44800
// if task [ 1 ] [ 1 ] = p then
44774: LD_VAR 0 3
44778: PUSH
44779: LD_INT 1
44781: ARRAY
44782: PUSH
44783: LD_INT 1
44785: ARRAY
44786: PUSH
44787: LD_STRING p
44789: EQUAL
44790: IFFALSE 44800
// result := true ;
44792: LD_ADDR_VAR 0 2
44796: PUSH
44797: LD_INT 1
44799: ST_TO_ADDR
// end ;
44800: LD_VAR 0 2
44804: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44805: LD_INT 0
44807: PPUSH
44808: PPUSH
44809: PPUSH
44810: PPUSH
// if pos < 1 then
44811: LD_VAR 0 2
44815: PUSH
44816: LD_INT 1
44818: LESS
44819: IFFALSE 44823
// exit ;
44821: GO 45126
// if pos = 1 then
44823: LD_VAR 0 2
44827: PUSH
44828: LD_INT 1
44830: EQUAL
44831: IFFALSE 44864
// result := Replace ( arr , pos [ 1 ] , value ) else
44833: LD_ADDR_VAR 0 4
44837: PUSH
44838: LD_VAR 0 1
44842: PPUSH
44843: LD_VAR 0 2
44847: PUSH
44848: LD_INT 1
44850: ARRAY
44851: PPUSH
44852: LD_VAR 0 3
44856: PPUSH
44857: CALL_OW 1
44861: ST_TO_ADDR
44862: GO 45126
// begin tmp := arr ;
44864: LD_ADDR_VAR 0 6
44868: PUSH
44869: LD_VAR 0 1
44873: ST_TO_ADDR
// s_arr := [ tmp ] ;
44874: LD_ADDR_VAR 0 7
44878: PUSH
44879: LD_VAR 0 6
44883: PUSH
44884: EMPTY
44885: LIST
44886: ST_TO_ADDR
// for i = 1 to pos - 1 do
44887: LD_ADDR_VAR 0 5
44891: PUSH
44892: DOUBLE
44893: LD_INT 1
44895: DEC
44896: ST_TO_ADDR
44897: LD_VAR 0 2
44901: PUSH
44902: LD_INT 1
44904: MINUS
44905: PUSH
44906: FOR_TO
44907: IFFALSE 44952
// begin tmp := tmp [ pos [ i ] ] ;
44909: LD_ADDR_VAR 0 6
44913: PUSH
44914: LD_VAR 0 6
44918: PUSH
44919: LD_VAR 0 2
44923: PUSH
44924: LD_VAR 0 5
44928: ARRAY
44929: ARRAY
44930: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44931: LD_ADDR_VAR 0 7
44935: PUSH
44936: LD_VAR 0 7
44940: PUSH
44941: LD_VAR 0 6
44945: PUSH
44946: EMPTY
44947: LIST
44948: ADD
44949: ST_TO_ADDR
// end ;
44950: GO 44906
44952: POP
44953: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44954: LD_ADDR_VAR 0 6
44958: PUSH
44959: LD_VAR 0 6
44963: PPUSH
44964: LD_VAR 0 2
44968: PUSH
44969: LD_VAR 0 2
44973: ARRAY
44974: PPUSH
44975: LD_VAR 0 3
44979: PPUSH
44980: CALL_OW 1
44984: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44985: LD_ADDR_VAR 0 7
44989: PUSH
44990: LD_VAR 0 7
44994: PPUSH
44995: LD_VAR 0 7
44999: PPUSH
45000: LD_VAR 0 6
45004: PPUSH
45005: CALL_OW 1
45009: ST_TO_ADDR
// for i = s_arr downto 2 do
45010: LD_ADDR_VAR 0 5
45014: PUSH
45015: DOUBLE
45016: LD_VAR 0 7
45020: INC
45021: ST_TO_ADDR
45022: LD_INT 2
45024: PUSH
45025: FOR_DOWNTO
45026: IFFALSE 45110
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45028: LD_ADDR_VAR 0 6
45032: PUSH
45033: LD_VAR 0 7
45037: PUSH
45038: LD_VAR 0 5
45042: PUSH
45043: LD_INT 1
45045: MINUS
45046: ARRAY
45047: PPUSH
45048: LD_VAR 0 2
45052: PUSH
45053: LD_VAR 0 5
45057: PUSH
45058: LD_INT 1
45060: MINUS
45061: ARRAY
45062: PPUSH
45063: LD_VAR 0 7
45067: PUSH
45068: LD_VAR 0 5
45072: ARRAY
45073: PPUSH
45074: CALL_OW 1
45078: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45079: LD_ADDR_VAR 0 7
45083: PUSH
45084: LD_VAR 0 7
45088: PPUSH
45089: LD_VAR 0 5
45093: PUSH
45094: LD_INT 1
45096: MINUS
45097: PPUSH
45098: LD_VAR 0 6
45102: PPUSH
45103: CALL_OW 1
45107: ST_TO_ADDR
// end ;
45108: GO 45025
45110: POP
45111: POP
// result := s_arr [ 1 ] ;
45112: LD_ADDR_VAR 0 4
45116: PUSH
45117: LD_VAR 0 7
45121: PUSH
45122: LD_INT 1
45124: ARRAY
45125: ST_TO_ADDR
// end ; end ;
45126: LD_VAR 0 4
45130: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45131: LD_INT 0
45133: PPUSH
45134: PPUSH
// if not list then
45135: LD_VAR 0 1
45139: NOT
45140: IFFALSE 45144
// exit ;
45142: GO 45235
// i := list [ pos1 ] ;
45144: LD_ADDR_VAR 0 5
45148: PUSH
45149: LD_VAR 0 1
45153: PUSH
45154: LD_VAR 0 2
45158: ARRAY
45159: ST_TO_ADDR
// if not i then
45160: LD_VAR 0 5
45164: NOT
45165: IFFALSE 45169
// exit ;
45167: GO 45235
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45169: LD_ADDR_VAR 0 1
45173: PUSH
45174: LD_VAR 0 1
45178: PPUSH
45179: LD_VAR 0 2
45183: PPUSH
45184: LD_VAR 0 1
45188: PUSH
45189: LD_VAR 0 3
45193: ARRAY
45194: PPUSH
45195: CALL_OW 1
45199: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45200: LD_ADDR_VAR 0 1
45204: PUSH
45205: LD_VAR 0 1
45209: PPUSH
45210: LD_VAR 0 3
45214: PPUSH
45215: LD_VAR 0 5
45219: PPUSH
45220: CALL_OW 1
45224: ST_TO_ADDR
// result := list ;
45225: LD_ADDR_VAR 0 4
45229: PUSH
45230: LD_VAR 0 1
45234: ST_TO_ADDR
// end ;
45235: LD_VAR 0 4
45239: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45240: LD_INT 0
45242: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45243: LD_ADDR_VAR 0 5
45247: PUSH
45248: LD_VAR 0 1
45252: PPUSH
45253: CALL_OW 250
45257: PPUSH
45258: LD_VAR 0 1
45262: PPUSH
45263: CALL_OW 251
45267: PPUSH
45268: LD_VAR 0 2
45272: PPUSH
45273: LD_VAR 0 3
45277: PPUSH
45278: LD_VAR 0 4
45282: PPUSH
45283: CALL 45293 0 5
45287: ST_TO_ADDR
// end ;
45288: LD_VAR 0 5
45292: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45293: LD_INT 0
45295: PPUSH
45296: PPUSH
45297: PPUSH
45298: PPUSH
// if not list then
45299: LD_VAR 0 3
45303: NOT
45304: IFFALSE 45308
// exit ;
45306: GO 45696
// result := [ ] ;
45308: LD_ADDR_VAR 0 6
45312: PUSH
45313: EMPTY
45314: ST_TO_ADDR
// for i in list do
45315: LD_ADDR_VAR 0 7
45319: PUSH
45320: LD_VAR 0 3
45324: PUSH
45325: FOR_IN
45326: IFFALSE 45528
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45328: LD_ADDR_VAR 0 9
45332: PUSH
45333: LD_VAR 0 7
45337: PPUSH
45338: LD_VAR 0 1
45342: PPUSH
45343: LD_VAR 0 2
45347: PPUSH
45348: CALL_OW 297
45352: ST_TO_ADDR
// if not result then
45353: LD_VAR 0 6
45357: NOT
45358: IFFALSE 45384
// result := [ [ i , tmp ] ] else
45360: LD_ADDR_VAR 0 6
45364: PUSH
45365: LD_VAR 0 7
45369: PUSH
45370: LD_VAR 0 9
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: EMPTY
45380: LIST
45381: ST_TO_ADDR
45382: GO 45526
// begin if result [ result ] [ 2 ] < tmp then
45384: LD_VAR 0 6
45388: PUSH
45389: LD_VAR 0 6
45393: ARRAY
45394: PUSH
45395: LD_INT 2
45397: ARRAY
45398: PUSH
45399: LD_VAR 0 9
45403: LESS
45404: IFFALSE 45446
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45406: LD_ADDR_VAR 0 6
45410: PUSH
45411: LD_VAR 0 6
45415: PPUSH
45416: LD_VAR 0 6
45420: PUSH
45421: LD_INT 1
45423: PLUS
45424: PPUSH
45425: LD_VAR 0 7
45429: PUSH
45430: LD_VAR 0 9
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PPUSH
45439: CALL_OW 2
45443: ST_TO_ADDR
45444: GO 45526
// for j = 1 to result do
45446: LD_ADDR_VAR 0 8
45450: PUSH
45451: DOUBLE
45452: LD_INT 1
45454: DEC
45455: ST_TO_ADDR
45456: LD_VAR 0 6
45460: PUSH
45461: FOR_TO
45462: IFFALSE 45524
// begin if tmp < result [ j ] [ 2 ] then
45464: LD_VAR 0 9
45468: PUSH
45469: LD_VAR 0 6
45473: PUSH
45474: LD_VAR 0 8
45478: ARRAY
45479: PUSH
45480: LD_INT 2
45482: ARRAY
45483: LESS
45484: IFFALSE 45522
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45486: LD_ADDR_VAR 0 6
45490: PUSH
45491: LD_VAR 0 6
45495: PPUSH
45496: LD_VAR 0 8
45500: PPUSH
45501: LD_VAR 0 7
45505: PUSH
45506: LD_VAR 0 9
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PPUSH
45515: CALL_OW 2
45519: ST_TO_ADDR
// break ;
45520: GO 45524
// end ; end ;
45522: GO 45461
45524: POP
45525: POP
// end ; end ;
45526: GO 45325
45528: POP
45529: POP
// if result and not asc then
45530: LD_VAR 0 6
45534: PUSH
45535: LD_VAR 0 4
45539: NOT
45540: AND
45541: IFFALSE 45616
// begin tmp := result ;
45543: LD_ADDR_VAR 0 9
45547: PUSH
45548: LD_VAR 0 6
45552: ST_TO_ADDR
// for i = tmp downto 1 do
45553: LD_ADDR_VAR 0 7
45557: PUSH
45558: DOUBLE
45559: LD_VAR 0 9
45563: INC
45564: ST_TO_ADDR
45565: LD_INT 1
45567: PUSH
45568: FOR_DOWNTO
45569: IFFALSE 45614
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45571: LD_ADDR_VAR 0 6
45575: PUSH
45576: LD_VAR 0 6
45580: PPUSH
45581: LD_VAR 0 9
45585: PUSH
45586: LD_VAR 0 7
45590: MINUS
45591: PUSH
45592: LD_INT 1
45594: PLUS
45595: PPUSH
45596: LD_VAR 0 9
45600: PUSH
45601: LD_VAR 0 7
45605: ARRAY
45606: PPUSH
45607: CALL_OW 1
45611: ST_TO_ADDR
45612: GO 45568
45614: POP
45615: POP
// end ; tmp := [ ] ;
45616: LD_ADDR_VAR 0 9
45620: PUSH
45621: EMPTY
45622: ST_TO_ADDR
// if mode then
45623: LD_VAR 0 5
45627: IFFALSE 45696
// begin for i = 1 to result do
45629: LD_ADDR_VAR 0 7
45633: PUSH
45634: DOUBLE
45635: LD_INT 1
45637: DEC
45638: ST_TO_ADDR
45639: LD_VAR 0 6
45643: PUSH
45644: FOR_TO
45645: IFFALSE 45684
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45647: LD_ADDR_VAR 0 9
45651: PUSH
45652: LD_VAR 0 9
45656: PPUSH
45657: LD_VAR 0 7
45661: PPUSH
45662: LD_VAR 0 6
45666: PUSH
45667: LD_VAR 0 7
45671: ARRAY
45672: PUSH
45673: LD_INT 1
45675: ARRAY
45676: PPUSH
45677: CALL_OW 1
45681: ST_TO_ADDR
45682: GO 45644
45684: POP
45685: POP
// result := tmp ;
45686: LD_ADDR_VAR 0 6
45690: PUSH
45691: LD_VAR 0 9
45695: ST_TO_ADDR
// end ; end ;
45696: LD_VAR 0 6
45700: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45701: LD_INT 0
45703: PPUSH
45704: PPUSH
45705: PPUSH
45706: PPUSH
45707: PPUSH
45708: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45709: LD_ADDR_VAR 0 5
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: ST_TO_ADDR
// if not x or not y then
45731: LD_VAR 0 2
45735: NOT
45736: PUSH
45737: LD_VAR 0 3
45741: NOT
45742: OR
45743: IFFALSE 45747
// exit ;
45745: GO 47397
// if not range then
45747: LD_VAR 0 4
45751: NOT
45752: IFFALSE 45762
// range := 10 ;
45754: LD_ADDR_VAR 0 4
45758: PUSH
45759: LD_INT 10
45761: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45762: LD_ADDR_VAR 0 8
45766: PUSH
45767: LD_INT 81
45769: PUSH
45770: LD_VAR 0 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 92
45781: PUSH
45782: LD_VAR 0 2
45786: PUSH
45787: LD_VAR 0 3
45791: PUSH
45792: LD_VAR 0 4
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 3
45805: PUSH
45806: LD_INT 21
45808: PUSH
45809: LD_INT 3
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: LIST
45824: PPUSH
45825: CALL_OW 69
45829: ST_TO_ADDR
// if not tmp then
45830: LD_VAR 0 8
45834: NOT
45835: IFFALSE 45839
// exit ;
45837: GO 47397
// for i in tmp do
45839: LD_ADDR_VAR 0 6
45843: PUSH
45844: LD_VAR 0 8
45848: PUSH
45849: FOR_IN
45850: IFFALSE 47372
// begin points := [ 0 , 0 , 0 ] ;
45852: LD_ADDR_VAR 0 9
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: LIST
45870: ST_TO_ADDR
// bpoints := 1 ;
45871: LD_ADDR_VAR 0 10
45875: PUSH
45876: LD_INT 1
45878: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45879: LD_VAR 0 6
45883: PPUSH
45884: CALL_OW 247
45888: PUSH
45889: LD_INT 1
45891: DOUBLE
45892: EQUAL
45893: IFTRUE 45897
45895: GO 46475
45897: POP
// begin if GetClass ( i ) = 1 then
45898: LD_VAR 0 6
45902: PPUSH
45903: CALL_OW 257
45907: PUSH
45908: LD_INT 1
45910: EQUAL
45911: IFFALSE 45932
// points := [ 10 , 5 , 3 ] ;
45913: LD_ADDR_VAR 0 9
45917: PUSH
45918: LD_INT 10
45920: PUSH
45921: LD_INT 5
45923: PUSH
45924: LD_INT 3
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: LIST
45931: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45932: LD_VAR 0 6
45936: PPUSH
45937: CALL_OW 257
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: LD_INT 3
45947: PUSH
45948: LD_INT 4
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: IN
45956: IFFALSE 45977
// points := [ 3 , 2 , 1 ] ;
45958: LD_ADDR_VAR 0 9
45962: PUSH
45963: LD_INT 3
45965: PUSH
45966: LD_INT 2
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45977: LD_VAR 0 6
45981: PPUSH
45982: CALL_OW 257
45986: PUSH
45987: LD_INT 5
45989: EQUAL
45990: IFFALSE 46011
// points := [ 130 , 5 , 2 ] ;
45992: LD_ADDR_VAR 0 9
45996: PUSH
45997: LD_INT 130
45999: PUSH
46000: LD_INT 5
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: LIST
46010: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46011: LD_VAR 0 6
46015: PPUSH
46016: CALL_OW 257
46020: PUSH
46021: LD_INT 8
46023: EQUAL
46024: IFFALSE 46045
// points := [ 35 , 35 , 30 ] ;
46026: LD_ADDR_VAR 0 9
46030: PUSH
46031: LD_INT 35
46033: PUSH
46034: LD_INT 35
46036: PUSH
46037: LD_INT 30
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: LIST
46044: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46045: LD_VAR 0 6
46049: PPUSH
46050: CALL_OW 257
46054: PUSH
46055: LD_INT 9
46057: EQUAL
46058: IFFALSE 46079
// points := [ 20 , 55 , 40 ] ;
46060: LD_ADDR_VAR 0 9
46064: PUSH
46065: LD_INT 20
46067: PUSH
46068: LD_INT 55
46070: PUSH
46071: LD_INT 40
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: LIST
46078: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46079: LD_VAR 0 6
46083: PPUSH
46084: CALL_OW 257
46088: PUSH
46089: LD_INT 12
46091: PUSH
46092: LD_INT 16
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: IN
46099: IFFALSE 46120
// points := [ 5 , 3 , 2 ] ;
46101: LD_ADDR_VAR 0 9
46105: PUSH
46106: LD_INT 5
46108: PUSH
46109: LD_INT 3
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: LIST
46119: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46120: LD_VAR 0 6
46124: PPUSH
46125: CALL_OW 257
46129: PUSH
46130: LD_INT 17
46132: EQUAL
46133: IFFALSE 46154
// points := [ 100 , 50 , 75 ] ;
46135: LD_ADDR_VAR 0 9
46139: PUSH
46140: LD_INT 100
46142: PUSH
46143: LD_INT 50
46145: PUSH
46146: LD_INT 75
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: LIST
46153: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46154: LD_VAR 0 6
46158: PPUSH
46159: CALL_OW 257
46163: PUSH
46164: LD_INT 15
46166: EQUAL
46167: IFFALSE 46188
// points := [ 10 , 5 , 3 ] ;
46169: LD_ADDR_VAR 0 9
46173: PUSH
46174: LD_INT 10
46176: PUSH
46177: LD_INT 5
46179: PUSH
46180: LD_INT 3
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: LIST
46187: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46188: LD_VAR 0 6
46192: PPUSH
46193: CALL_OW 257
46197: PUSH
46198: LD_INT 14
46200: EQUAL
46201: IFFALSE 46222
// points := [ 10 , 0 , 0 ] ;
46203: LD_ADDR_VAR 0 9
46207: PUSH
46208: LD_INT 10
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: LIST
46221: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46222: LD_VAR 0 6
46226: PPUSH
46227: CALL_OW 257
46231: PUSH
46232: LD_INT 11
46234: EQUAL
46235: IFFALSE 46256
// points := [ 30 , 10 , 5 ] ;
46237: LD_ADDR_VAR 0 9
46241: PUSH
46242: LD_INT 30
46244: PUSH
46245: LD_INT 10
46247: PUSH
46248: LD_INT 5
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: LIST
46255: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46256: LD_VAR 0 1
46260: PPUSH
46261: LD_INT 5
46263: PPUSH
46264: CALL_OW 321
46268: PUSH
46269: LD_INT 2
46271: EQUAL
46272: IFFALSE 46289
// bpoints := bpoints * 1.8 ;
46274: LD_ADDR_VAR 0 10
46278: PUSH
46279: LD_VAR 0 10
46283: PUSH
46284: LD_REAL  1.80000000000000E+0000
46287: MUL
46288: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46289: LD_VAR 0 6
46293: PPUSH
46294: CALL_OW 257
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: LD_INT 3
46307: PUSH
46308: LD_INT 4
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: IN
46317: PUSH
46318: LD_VAR 0 1
46322: PPUSH
46323: LD_INT 51
46325: PPUSH
46326: CALL_OW 321
46330: PUSH
46331: LD_INT 2
46333: EQUAL
46334: AND
46335: IFFALSE 46352
// bpoints := bpoints * 1.2 ;
46337: LD_ADDR_VAR 0 10
46341: PUSH
46342: LD_VAR 0 10
46346: PUSH
46347: LD_REAL  1.20000000000000E+0000
46350: MUL
46351: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46352: LD_VAR 0 6
46356: PPUSH
46357: CALL_OW 257
46361: PUSH
46362: LD_INT 5
46364: PUSH
46365: LD_INT 7
46367: PUSH
46368: LD_INT 9
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: LIST
46375: IN
46376: PUSH
46377: LD_VAR 0 1
46381: PPUSH
46382: LD_INT 52
46384: PPUSH
46385: CALL_OW 321
46389: PUSH
46390: LD_INT 2
46392: EQUAL
46393: AND
46394: IFFALSE 46411
// bpoints := bpoints * 1.5 ;
46396: LD_ADDR_VAR 0 10
46400: PUSH
46401: LD_VAR 0 10
46405: PUSH
46406: LD_REAL  1.50000000000000E+0000
46409: MUL
46410: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46411: LD_VAR 0 1
46415: PPUSH
46416: LD_INT 66
46418: PPUSH
46419: CALL_OW 321
46423: PUSH
46424: LD_INT 2
46426: EQUAL
46427: IFFALSE 46444
// bpoints := bpoints * 1.1 ;
46429: LD_ADDR_VAR 0 10
46433: PUSH
46434: LD_VAR 0 10
46438: PUSH
46439: LD_REAL  1.10000000000000E+0000
46442: MUL
46443: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46444: LD_ADDR_VAR 0 10
46448: PUSH
46449: LD_VAR 0 10
46453: PUSH
46454: LD_VAR 0 6
46458: PPUSH
46459: LD_INT 1
46461: PPUSH
46462: CALL_OW 259
46466: PUSH
46467: LD_REAL  1.15000000000000E+0000
46470: MUL
46471: MUL
46472: ST_TO_ADDR
// end ; unit_vehicle :
46473: GO 47301
46475: LD_INT 2
46477: DOUBLE
46478: EQUAL
46479: IFTRUE 46483
46481: GO 47289
46483: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46484: LD_VAR 0 6
46488: PPUSH
46489: CALL_OW 264
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: LD_INT 42
46499: PUSH
46500: LD_INT 24
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: LIST
46507: IN
46508: IFFALSE 46529
// points := [ 25 , 5 , 3 ] ;
46510: LD_ADDR_VAR 0 9
46514: PUSH
46515: LD_INT 25
46517: PUSH
46518: LD_INT 5
46520: PUSH
46521: LD_INT 3
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: LIST
46528: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46529: LD_VAR 0 6
46533: PPUSH
46534: CALL_OW 264
46538: PUSH
46539: LD_INT 4
46541: PUSH
46542: LD_INT 43
46544: PUSH
46545: LD_INT 25
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: LIST
46552: IN
46553: IFFALSE 46574
// points := [ 40 , 15 , 5 ] ;
46555: LD_ADDR_VAR 0 9
46559: PUSH
46560: LD_INT 40
46562: PUSH
46563: LD_INT 15
46565: PUSH
46566: LD_INT 5
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: LIST
46573: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46574: LD_VAR 0 6
46578: PPUSH
46579: CALL_OW 264
46583: PUSH
46584: LD_INT 3
46586: PUSH
46587: LD_INT 23
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: IN
46594: IFFALSE 46615
// points := [ 7 , 25 , 8 ] ;
46596: LD_ADDR_VAR 0 9
46600: PUSH
46601: LD_INT 7
46603: PUSH
46604: LD_INT 25
46606: PUSH
46607: LD_INT 8
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: LIST
46614: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46615: LD_VAR 0 6
46619: PPUSH
46620: CALL_OW 264
46624: PUSH
46625: LD_INT 5
46627: PUSH
46628: LD_INT 27
46630: PUSH
46631: LD_INT 44
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: LIST
46638: IN
46639: IFFALSE 46660
// points := [ 14 , 50 , 16 ] ;
46641: LD_ADDR_VAR 0 9
46645: PUSH
46646: LD_INT 14
46648: PUSH
46649: LD_INT 50
46651: PUSH
46652: LD_INT 16
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: LIST
46659: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46660: LD_VAR 0 6
46664: PPUSH
46665: CALL_OW 264
46669: PUSH
46670: LD_INT 6
46672: PUSH
46673: LD_INT 46
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: IN
46680: IFFALSE 46701
// points := [ 32 , 120 , 70 ] ;
46682: LD_ADDR_VAR 0 9
46686: PUSH
46687: LD_INT 32
46689: PUSH
46690: LD_INT 120
46692: PUSH
46693: LD_INT 70
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: LIST
46700: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46701: LD_VAR 0 6
46705: PPUSH
46706: CALL_OW 264
46710: PUSH
46711: LD_INT 7
46713: PUSH
46714: LD_INT 28
46716: PUSH
46717: LD_INT 45
46719: PUSH
46720: LD_INT 92
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: IN
46729: IFFALSE 46750
// points := [ 35 , 20 , 45 ] ;
46731: LD_ADDR_VAR 0 9
46735: PUSH
46736: LD_INT 35
46738: PUSH
46739: LD_INT 20
46741: PUSH
46742: LD_INT 45
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: LIST
46749: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46750: LD_VAR 0 6
46754: PPUSH
46755: CALL_OW 264
46759: PUSH
46760: LD_INT 47
46762: PUSH
46763: EMPTY
46764: LIST
46765: IN
46766: IFFALSE 46787
// points := [ 67 , 45 , 75 ] ;
46768: LD_ADDR_VAR 0 9
46772: PUSH
46773: LD_INT 67
46775: PUSH
46776: LD_INT 45
46778: PUSH
46779: LD_INT 75
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: LIST
46786: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46787: LD_VAR 0 6
46791: PPUSH
46792: CALL_OW 264
46796: PUSH
46797: LD_INT 26
46799: PUSH
46800: EMPTY
46801: LIST
46802: IN
46803: IFFALSE 46824
// points := [ 120 , 30 , 80 ] ;
46805: LD_ADDR_VAR 0 9
46809: PUSH
46810: LD_INT 120
46812: PUSH
46813: LD_INT 30
46815: PUSH
46816: LD_INT 80
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: LIST
46823: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46824: LD_VAR 0 6
46828: PPUSH
46829: CALL_OW 264
46833: PUSH
46834: LD_INT 22
46836: PUSH
46837: EMPTY
46838: LIST
46839: IN
46840: IFFALSE 46861
// points := [ 40 , 1 , 1 ] ;
46842: LD_ADDR_VAR 0 9
46846: PUSH
46847: LD_INT 40
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: LIST
46860: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46861: LD_VAR 0 6
46865: PPUSH
46866: CALL_OW 264
46870: PUSH
46871: LD_INT 29
46873: PUSH
46874: EMPTY
46875: LIST
46876: IN
46877: IFFALSE 46898
// points := [ 70 , 200 , 400 ] ;
46879: LD_ADDR_VAR 0 9
46883: PUSH
46884: LD_INT 70
46886: PUSH
46887: LD_INT 200
46889: PUSH
46890: LD_INT 400
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: LIST
46897: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46898: LD_VAR 0 6
46902: PPUSH
46903: CALL_OW 264
46907: PUSH
46908: LD_INT 14
46910: PUSH
46911: LD_INT 53
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: IN
46918: IFFALSE 46939
// points := [ 40 , 10 , 20 ] ;
46920: LD_ADDR_VAR 0 9
46924: PUSH
46925: LD_INT 40
46927: PUSH
46928: LD_INT 10
46930: PUSH
46931: LD_INT 20
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: LIST
46938: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46939: LD_VAR 0 6
46943: PPUSH
46944: CALL_OW 264
46948: PUSH
46949: LD_INT 9
46951: PUSH
46952: EMPTY
46953: LIST
46954: IN
46955: IFFALSE 46976
// points := [ 5 , 70 , 20 ] ;
46957: LD_ADDR_VAR 0 9
46961: PUSH
46962: LD_INT 5
46964: PUSH
46965: LD_INT 70
46967: PUSH
46968: LD_INT 20
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: LIST
46975: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46976: LD_VAR 0 6
46980: PPUSH
46981: CALL_OW 264
46985: PUSH
46986: LD_INT 10
46988: PUSH
46989: EMPTY
46990: LIST
46991: IN
46992: IFFALSE 47013
// points := [ 35 , 110 , 70 ] ;
46994: LD_ADDR_VAR 0 9
46998: PUSH
46999: LD_INT 35
47001: PUSH
47002: LD_INT 110
47004: PUSH
47005: LD_INT 70
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: LIST
47012: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47013: LD_VAR 0 6
47017: PPUSH
47018: CALL_OW 265
47022: PUSH
47023: LD_INT 25
47025: EQUAL
47026: IFFALSE 47047
// points := [ 80 , 65 , 100 ] ;
47028: LD_ADDR_VAR 0 9
47032: PUSH
47033: LD_INT 80
47035: PUSH
47036: LD_INT 65
47038: PUSH
47039: LD_INT 100
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: LIST
47046: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47047: LD_VAR 0 6
47051: PPUSH
47052: CALL_OW 263
47056: PUSH
47057: LD_INT 1
47059: EQUAL
47060: IFFALSE 47095
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47062: LD_ADDR_VAR 0 10
47066: PUSH
47067: LD_VAR 0 10
47071: PUSH
47072: LD_VAR 0 6
47076: PPUSH
47077: CALL_OW 311
47081: PPUSH
47082: LD_INT 3
47084: PPUSH
47085: CALL_OW 259
47089: PUSH
47090: LD_INT 4
47092: MUL
47093: MUL
47094: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47095: LD_VAR 0 6
47099: PPUSH
47100: CALL_OW 263
47104: PUSH
47105: LD_INT 2
47107: EQUAL
47108: IFFALSE 47159
// begin j := IsControledBy ( i ) ;
47110: LD_ADDR_VAR 0 7
47114: PUSH
47115: LD_VAR 0 6
47119: PPUSH
47120: CALL_OW 312
47124: ST_TO_ADDR
// if j then
47125: LD_VAR 0 7
47129: IFFALSE 47159
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47131: LD_ADDR_VAR 0 10
47135: PUSH
47136: LD_VAR 0 10
47140: PUSH
47141: LD_VAR 0 7
47145: PPUSH
47146: LD_INT 3
47148: PPUSH
47149: CALL_OW 259
47153: PUSH
47154: LD_INT 3
47156: MUL
47157: MUL
47158: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47159: LD_VAR 0 6
47163: PPUSH
47164: CALL_OW 264
47168: PUSH
47169: LD_INT 5
47171: PUSH
47172: LD_INT 6
47174: PUSH
47175: LD_INT 46
47177: PUSH
47178: LD_INT 44
47180: PUSH
47181: LD_INT 47
47183: PUSH
47184: LD_INT 45
47186: PUSH
47187: LD_INT 28
47189: PUSH
47190: LD_INT 7
47192: PUSH
47193: LD_INT 27
47195: PUSH
47196: LD_INT 29
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: IN
47211: PUSH
47212: LD_VAR 0 1
47216: PPUSH
47217: LD_INT 52
47219: PPUSH
47220: CALL_OW 321
47224: PUSH
47225: LD_INT 2
47227: EQUAL
47228: AND
47229: IFFALSE 47246
// bpoints := bpoints * 1.2 ;
47231: LD_ADDR_VAR 0 10
47235: PUSH
47236: LD_VAR 0 10
47240: PUSH
47241: LD_REAL  1.20000000000000E+0000
47244: MUL
47245: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47246: LD_VAR 0 6
47250: PPUSH
47251: CALL_OW 264
47255: PUSH
47256: LD_INT 6
47258: PUSH
47259: LD_INT 46
47261: PUSH
47262: LD_INT 47
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: LIST
47269: IN
47270: IFFALSE 47287
// bpoints := bpoints * 1.2 ;
47272: LD_ADDR_VAR 0 10
47276: PUSH
47277: LD_VAR 0 10
47281: PUSH
47282: LD_REAL  1.20000000000000E+0000
47285: MUL
47286: ST_TO_ADDR
// end ; unit_building :
47287: GO 47301
47289: LD_INT 3
47291: DOUBLE
47292: EQUAL
47293: IFTRUE 47297
47295: GO 47300
47297: POP
// ; end ;
47298: GO 47301
47300: POP
// for j = 1 to 3 do
47301: LD_ADDR_VAR 0 7
47305: PUSH
47306: DOUBLE
47307: LD_INT 1
47309: DEC
47310: ST_TO_ADDR
47311: LD_INT 3
47313: PUSH
47314: FOR_TO
47315: IFFALSE 47368
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47317: LD_ADDR_VAR 0 5
47321: PUSH
47322: LD_VAR 0 5
47326: PPUSH
47327: LD_VAR 0 7
47331: PPUSH
47332: LD_VAR 0 5
47336: PUSH
47337: LD_VAR 0 7
47341: ARRAY
47342: PUSH
47343: LD_VAR 0 9
47347: PUSH
47348: LD_VAR 0 7
47352: ARRAY
47353: PUSH
47354: LD_VAR 0 10
47358: MUL
47359: PLUS
47360: PPUSH
47361: CALL_OW 1
47365: ST_TO_ADDR
47366: GO 47314
47368: POP
47369: POP
// end ;
47370: GO 45849
47372: POP
47373: POP
// result := Replace ( result , 4 , tmp ) ;
47374: LD_ADDR_VAR 0 5
47378: PUSH
47379: LD_VAR 0 5
47383: PPUSH
47384: LD_INT 4
47386: PPUSH
47387: LD_VAR 0 8
47391: PPUSH
47392: CALL_OW 1
47396: ST_TO_ADDR
// end ;
47397: LD_VAR 0 5
47401: RET
// export function DangerAtRange ( unit , range ) ; begin
47402: LD_INT 0
47404: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47405: LD_ADDR_VAR 0 3
47409: PUSH
47410: LD_VAR 0 1
47414: PPUSH
47415: CALL_OW 255
47419: PPUSH
47420: LD_VAR 0 1
47424: PPUSH
47425: CALL_OW 250
47429: PPUSH
47430: LD_VAR 0 1
47434: PPUSH
47435: CALL_OW 251
47439: PPUSH
47440: LD_VAR 0 2
47444: PPUSH
47445: CALL 45701 0 4
47449: ST_TO_ADDR
// end ;
47450: LD_VAR 0 3
47454: RET
// export function DangerInArea ( side , area ) ; begin
47455: LD_INT 0
47457: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47458: LD_ADDR_VAR 0 3
47462: PUSH
47463: LD_VAR 0 2
47467: PPUSH
47468: LD_INT 81
47470: PUSH
47471: LD_VAR 0 1
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PPUSH
47480: CALL_OW 70
47484: ST_TO_ADDR
// end ;
47485: LD_VAR 0 3
47489: RET
// export function IsExtension ( b ) ; begin
47490: LD_INT 0
47492: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47493: LD_ADDR_VAR 0 2
47497: PUSH
47498: LD_VAR 0 1
47502: PUSH
47503: LD_INT 23
47505: PUSH
47506: LD_INT 20
47508: PUSH
47509: LD_INT 22
47511: PUSH
47512: LD_INT 17
47514: PUSH
47515: LD_INT 24
47517: PUSH
47518: LD_INT 21
47520: PUSH
47521: LD_INT 19
47523: PUSH
47524: LD_INT 16
47526: PUSH
47527: LD_INT 25
47529: PUSH
47530: LD_INT 18
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: IN
47545: ST_TO_ADDR
// end ;
47546: LD_VAR 0 2
47550: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47551: LD_INT 0
47553: PPUSH
47554: PPUSH
47555: PPUSH
// result := [ ] ;
47556: LD_ADDR_VAR 0 4
47560: PUSH
47561: EMPTY
47562: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47563: LD_ADDR_VAR 0 5
47567: PUSH
47568: LD_VAR 0 2
47572: PPUSH
47573: LD_INT 21
47575: PUSH
47576: LD_INT 3
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PPUSH
47583: CALL_OW 70
47587: ST_TO_ADDR
// if not tmp then
47588: LD_VAR 0 5
47592: NOT
47593: IFFALSE 47597
// exit ;
47595: GO 47661
// if checkLink then
47597: LD_VAR 0 3
47601: IFFALSE 47651
// begin for i in tmp do
47603: LD_ADDR_VAR 0 6
47607: PUSH
47608: LD_VAR 0 5
47612: PUSH
47613: FOR_IN
47614: IFFALSE 47649
// if GetBase ( i ) <> base then
47616: LD_VAR 0 6
47620: PPUSH
47621: CALL_OW 274
47625: PUSH
47626: LD_VAR 0 1
47630: NONEQUAL
47631: IFFALSE 47647
// ComLinkToBase ( base , i ) ;
47633: LD_VAR 0 1
47637: PPUSH
47638: LD_VAR 0 6
47642: PPUSH
47643: CALL_OW 169
47647: GO 47613
47649: POP
47650: POP
// end ; result := tmp ;
47651: LD_ADDR_VAR 0 4
47655: PUSH
47656: LD_VAR 0 5
47660: ST_TO_ADDR
// end ;
47661: LD_VAR 0 4
47665: RET
// export function ComComplete ( units , b ) ; var i ; begin
47666: LD_INT 0
47668: PPUSH
47669: PPUSH
// if not units then
47670: LD_VAR 0 1
47674: NOT
47675: IFFALSE 47679
// exit ;
47677: GO 47769
// for i in units do
47679: LD_ADDR_VAR 0 4
47683: PUSH
47684: LD_VAR 0 1
47688: PUSH
47689: FOR_IN
47690: IFFALSE 47767
// if BuildingStatus ( b ) = bs_build then
47692: LD_VAR 0 2
47696: PPUSH
47697: CALL_OW 461
47701: PUSH
47702: LD_INT 1
47704: EQUAL
47705: IFFALSE 47765
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47707: LD_VAR 0 4
47711: PPUSH
47712: LD_STRING h
47714: PUSH
47715: LD_VAR 0 2
47719: PPUSH
47720: CALL_OW 250
47724: PUSH
47725: LD_VAR 0 2
47729: PPUSH
47730: CALL_OW 251
47734: PUSH
47735: LD_VAR 0 2
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: PUSH
47758: EMPTY
47759: LIST
47760: PPUSH
47761: CALL_OW 446
47765: GO 47689
47767: POP
47768: POP
// end ;
47769: LD_VAR 0 3
47773: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47774: LD_INT 0
47776: PPUSH
47777: PPUSH
47778: PPUSH
47779: PPUSH
47780: PPUSH
47781: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47782: LD_VAR 0 1
47786: NOT
47787: PUSH
47788: LD_VAR 0 1
47792: PPUSH
47793: CALL_OW 263
47797: PUSH
47798: LD_INT 2
47800: NONEQUAL
47801: OR
47802: IFFALSE 47806
// exit ;
47804: GO 48122
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47806: LD_ADDR_VAR 0 6
47810: PUSH
47811: LD_INT 22
47813: PUSH
47814: LD_VAR 0 1
47818: PPUSH
47819: CALL_OW 255
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: LD_INT 30
47833: PUSH
47834: LD_INT 36
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 34
47843: PUSH
47844: LD_INT 31
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PPUSH
47860: CALL_OW 69
47864: ST_TO_ADDR
// if not tmp then
47865: LD_VAR 0 6
47869: NOT
47870: IFFALSE 47874
// exit ;
47872: GO 48122
// result := [ ] ;
47874: LD_ADDR_VAR 0 2
47878: PUSH
47879: EMPTY
47880: ST_TO_ADDR
// for i in tmp do
47881: LD_ADDR_VAR 0 3
47885: PUSH
47886: LD_VAR 0 6
47890: PUSH
47891: FOR_IN
47892: IFFALSE 47963
// begin t := UnitsInside ( i ) ;
47894: LD_ADDR_VAR 0 4
47898: PUSH
47899: LD_VAR 0 3
47903: PPUSH
47904: CALL_OW 313
47908: ST_TO_ADDR
// if t then
47909: LD_VAR 0 4
47913: IFFALSE 47961
// for j in t do
47915: LD_ADDR_VAR 0 7
47919: PUSH
47920: LD_VAR 0 4
47924: PUSH
47925: FOR_IN
47926: IFFALSE 47959
// result := Replace ( result , result + 1 , j ) ;
47928: LD_ADDR_VAR 0 2
47932: PUSH
47933: LD_VAR 0 2
47937: PPUSH
47938: LD_VAR 0 2
47942: PUSH
47943: LD_INT 1
47945: PLUS
47946: PPUSH
47947: LD_VAR 0 7
47951: PPUSH
47952: CALL_OW 1
47956: ST_TO_ADDR
47957: GO 47925
47959: POP
47960: POP
// end ;
47961: GO 47891
47963: POP
47964: POP
// if not result then
47965: LD_VAR 0 2
47969: NOT
47970: IFFALSE 47974
// exit ;
47972: GO 48122
// mech := result [ 1 ] ;
47974: LD_ADDR_VAR 0 5
47978: PUSH
47979: LD_VAR 0 2
47983: PUSH
47984: LD_INT 1
47986: ARRAY
47987: ST_TO_ADDR
// if result > 1 then
47988: LD_VAR 0 2
47992: PUSH
47993: LD_INT 1
47995: GREATER
47996: IFFALSE 48108
// begin for i = 2 to result do
47998: LD_ADDR_VAR 0 3
48002: PUSH
48003: DOUBLE
48004: LD_INT 2
48006: DEC
48007: ST_TO_ADDR
48008: LD_VAR 0 2
48012: PUSH
48013: FOR_TO
48014: IFFALSE 48106
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48016: LD_ADDR_VAR 0 4
48020: PUSH
48021: LD_VAR 0 2
48025: PUSH
48026: LD_VAR 0 3
48030: ARRAY
48031: PPUSH
48032: LD_INT 3
48034: PPUSH
48035: CALL_OW 259
48039: PUSH
48040: LD_VAR 0 2
48044: PUSH
48045: LD_VAR 0 3
48049: ARRAY
48050: PPUSH
48051: CALL_OW 432
48055: MINUS
48056: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48057: LD_VAR 0 4
48061: PUSH
48062: LD_VAR 0 5
48066: PPUSH
48067: LD_INT 3
48069: PPUSH
48070: CALL_OW 259
48074: PUSH
48075: LD_VAR 0 5
48079: PPUSH
48080: CALL_OW 432
48084: MINUS
48085: GREATEREQUAL
48086: IFFALSE 48104
// mech := result [ i ] ;
48088: LD_ADDR_VAR 0 5
48092: PUSH
48093: LD_VAR 0 2
48097: PUSH
48098: LD_VAR 0 3
48102: ARRAY
48103: ST_TO_ADDR
// end ;
48104: GO 48013
48106: POP
48107: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48108: LD_VAR 0 1
48112: PPUSH
48113: LD_VAR 0 5
48117: PPUSH
48118: CALL_OW 135
// end ;
48122: LD_VAR 0 2
48126: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48127: LD_INT 0
48129: PPUSH
48130: PPUSH
48131: PPUSH
48132: PPUSH
48133: PPUSH
48134: PPUSH
48135: PPUSH
48136: PPUSH
48137: PPUSH
48138: PPUSH
48139: PPUSH
48140: PPUSH
48141: PPUSH
// result := [ ] ;
48142: LD_ADDR_VAR 0 7
48146: PUSH
48147: EMPTY
48148: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48149: LD_VAR 0 1
48153: PPUSH
48154: CALL_OW 266
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: IN
48169: NOT
48170: IFFALSE 48174
// exit ;
48172: GO 49808
// if name then
48174: LD_VAR 0 3
48178: IFFALSE 48194
// SetBName ( base_dep , name ) ;
48180: LD_VAR 0 1
48184: PPUSH
48185: LD_VAR 0 3
48189: PPUSH
48190: CALL_OW 500
// base := GetBase ( base_dep ) ;
48194: LD_ADDR_VAR 0 15
48198: PUSH
48199: LD_VAR 0 1
48203: PPUSH
48204: CALL_OW 274
48208: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48209: LD_ADDR_VAR 0 16
48213: PUSH
48214: LD_VAR 0 1
48218: PPUSH
48219: CALL_OW 255
48223: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48224: LD_ADDR_VAR 0 17
48228: PUSH
48229: LD_VAR 0 1
48233: PPUSH
48234: CALL_OW 248
48238: ST_TO_ADDR
// if sources then
48239: LD_VAR 0 5
48243: IFFALSE 48290
// for i = 1 to 3 do
48245: LD_ADDR_VAR 0 8
48249: PUSH
48250: DOUBLE
48251: LD_INT 1
48253: DEC
48254: ST_TO_ADDR
48255: LD_INT 3
48257: PUSH
48258: FOR_TO
48259: IFFALSE 48288
// AddResourceType ( base , i , sources [ i ] ) ;
48261: LD_VAR 0 15
48265: PPUSH
48266: LD_VAR 0 8
48270: PPUSH
48271: LD_VAR 0 5
48275: PUSH
48276: LD_VAR 0 8
48280: ARRAY
48281: PPUSH
48282: CALL_OW 276
48286: GO 48258
48288: POP
48289: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48290: LD_ADDR_VAR 0 18
48294: PUSH
48295: LD_VAR 0 15
48299: PPUSH
48300: LD_VAR 0 2
48304: PPUSH
48305: LD_INT 1
48307: PPUSH
48308: CALL 47551 0 3
48312: ST_TO_ADDR
// InitHc ;
48313: CALL_OW 19
// InitUc ;
48317: CALL_OW 18
// uc_side := side ;
48321: LD_ADDR_OWVAR 20
48325: PUSH
48326: LD_VAR 0 16
48330: ST_TO_ADDR
// uc_nation := nation ;
48331: LD_ADDR_OWVAR 21
48335: PUSH
48336: LD_VAR 0 17
48340: ST_TO_ADDR
// if buildings then
48341: LD_VAR 0 18
48345: IFFALSE 49667
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48347: LD_ADDR_VAR 0 19
48351: PUSH
48352: LD_VAR 0 18
48356: PPUSH
48357: LD_INT 2
48359: PUSH
48360: LD_INT 30
48362: PUSH
48363: LD_INT 29
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 30
48372: PUSH
48373: LD_INT 30
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: LIST
48384: PPUSH
48385: CALL_OW 72
48389: ST_TO_ADDR
// if tmp then
48390: LD_VAR 0 19
48394: IFFALSE 48442
// for i in tmp do
48396: LD_ADDR_VAR 0 8
48400: PUSH
48401: LD_VAR 0 19
48405: PUSH
48406: FOR_IN
48407: IFFALSE 48440
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48409: LD_VAR 0 8
48413: PPUSH
48414: CALL_OW 250
48418: PPUSH
48419: LD_VAR 0 8
48423: PPUSH
48424: CALL_OW 251
48428: PPUSH
48429: LD_VAR 0 16
48433: PPUSH
48434: CALL_OW 441
48438: GO 48406
48440: POP
48441: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48442: LD_VAR 0 18
48446: PPUSH
48447: LD_INT 2
48449: PUSH
48450: LD_INT 30
48452: PUSH
48453: LD_INT 32
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 30
48462: PUSH
48463: LD_INT 33
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: LIST
48474: PPUSH
48475: CALL_OW 72
48479: IFFALSE 48567
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48481: LD_ADDR_VAR 0 8
48485: PUSH
48486: LD_VAR 0 18
48490: PPUSH
48491: LD_INT 2
48493: PUSH
48494: LD_INT 30
48496: PUSH
48497: LD_INT 32
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 30
48506: PUSH
48507: LD_INT 33
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: LIST
48518: PPUSH
48519: CALL_OW 72
48523: PUSH
48524: FOR_IN
48525: IFFALSE 48565
// begin if not GetBWeapon ( i ) then
48527: LD_VAR 0 8
48531: PPUSH
48532: CALL_OW 269
48536: NOT
48537: IFFALSE 48563
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48539: LD_VAR 0 8
48543: PPUSH
48544: LD_VAR 0 8
48548: PPUSH
48549: LD_VAR 0 2
48553: PPUSH
48554: CALL 49813 0 2
48558: PPUSH
48559: CALL_OW 431
// end ;
48563: GO 48524
48565: POP
48566: POP
// end ; for i = 1 to personel do
48567: LD_ADDR_VAR 0 8
48571: PUSH
48572: DOUBLE
48573: LD_INT 1
48575: DEC
48576: ST_TO_ADDR
48577: LD_VAR 0 6
48581: PUSH
48582: FOR_TO
48583: IFFALSE 49647
// begin if i > 4 then
48585: LD_VAR 0 8
48589: PUSH
48590: LD_INT 4
48592: GREATER
48593: IFFALSE 48597
// break ;
48595: GO 49647
// case i of 1 :
48597: LD_VAR 0 8
48601: PUSH
48602: LD_INT 1
48604: DOUBLE
48605: EQUAL
48606: IFTRUE 48610
48608: GO 48690
48610: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48611: LD_ADDR_VAR 0 12
48615: PUSH
48616: LD_VAR 0 18
48620: PPUSH
48621: LD_INT 22
48623: PUSH
48624: LD_VAR 0 16
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 58
48635: PUSH
48636: EMPTY
48637: LIST
48638: PUSH
48639: LD_INT 2
48641: PUSH
48642: LD_INT 30
48644: PUSH
48645: LD_INT 32
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 30
48654: PUSH
48655: LD_INT 4
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 30
48664: PUSH
48665: LD_INT 5
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: LIST
48682: PPUSH
48683: CALL_OW 72
48687: ST_TO_ADDR
48688: GO 48912
48690: LD_INT 2
48692: DOUBLE
48693: EQUAL
48694: IFTRUE 48698
48696: GO 48760
48698: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48699: LD_ADDR_VAR 0 12
48703: PUSH
48704: LD_VAR 0 18
48708: PPUSH
48709: LD_INT 22
48711: PUSH
48712: LD_VAR 0 16
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: LD_INT 30
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 30
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: LIST
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PPUSH
48753: CALL_OW 72
48757: ST_TO_ADDR
48758: GO 48912
48760: LD_INT 3
48762: DOUBLE
48763: EQUAL
48764: IFTRUE 48768
48766: GO 48830
48768: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48769: LD_ADDR_VAR 0 12
48773: PUSH
48774: LD_VAR 0 18
48778: PPUSH
48779: LD_INT 22
48781: PUSH
48782: LD_VAR 0 16
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: PUSH
48794: LD_INT 30
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 30
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: LIST
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PPUSH
48823: CALL_OW 72
48827: ST_TO_ADDR
48828: GO 48912
48830: LD_INT 4
48832: DOUBLE
48833: EQUAL
48834: IFTRUE 48838
48836: GO 48911
48838: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48839: LD_ADDR_VAR 0 12
48843: PUSH
48844: LD_VAR 0 18
48848: PPUSH
48849: LD_INT 22
48851: PUSH
48852: LD_VAR 0 16
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: PUSH
48864: LD_INT 30
48866: PUSH
48867: LD_INT 6
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 30
48876: PUSH
48877: LD_INT 7
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 30
48886: PUSH
48887: LD_INT 8
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PPUSH
48904: CALL_OW 72
48908: ST_TO_ADDR
48909: GO 48912
48911: POP
// if i = 1 then
48912: LD_VAR 0 8
48916: PUSH
48917: LD_INT 1
48919: EQUAL
48920: IFFALSE 49031
// begin tmp := [ ] ;
48922: LD_ADDR_VAR 0 19
48926: PUSH
48927: EMPTY
48928: ST_TO_ADDR
// for j in f do
48929: LD_ADDR_VAR 0 9
48933: PUSH
48934: LD_VAR 0 12
48938: PUSH
48939: FOR_IN
48940: IFFALSE 49013
// if GetBType ( j ) = b_bunker then
48942: LD_VAR 0 9
48946: PPUSH
48947: CALL_OW 266
48951: PUSH
48952: LD_INT 32
48954: EQUAL
48955: IFFALSE 48982
// tmp := Insert ( tmp , 1 , j ) else
48957: LD_ADDR_VAR 0 19
48961: PUSH
48962: LD_VAR 0 19
48966: PPUSH
48967: LD_INT 1
48969: PPUSH
48970: LD_VAR 0 9
48974: PPUSH
48975: CALL_OW 2
48979: ST_TO_ADDR
48980: GO 49011
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48982: LD_ADDR_VAR 0 19
48986: PUSH
48987: LD_VAR 0 19
48991: PPUSH
48992: LD_VAR 0 19
48996: PUSH
48997: LD_INT 1
48999: PLUS
49000: PPUSH
49001: LD_VAR 0 9
49005: PPUSH
49006: CALL_OW 2
49010: ST_TO_ADDR
49011: GO 48939
49013: POP
49014: POP
// if tmp then
49015: LD_VAR 0 19
49019: IFFALSE 49031
// f := tmp ;
49021: LD_ADDR_VAR 0 12
49025: PUSH
49026: LD_VAR 0 19
49030: ST_TO_ADDR
// end ; x := personel [ i ] ;
49031: LD_ADDR_VAR 0 13
49035: PUSH
49036: LD_VAR 0 6
49040: PUSH
49041: LD_VAR 0 8
49045: ARRAY
49046: ST_TO_ADDR
// if x = - 1 then
49047: LD_VAR 0 13
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: EQUAL
49056: IFFALSE 49265
// begin for j in f do
49058: LD_ADDR_VAR 0 9
49062: PUSH
49063: LD_VAR 0 12
49067: PUSH
49068: FOR_IN
49069: IFFALSE 49261
// repeat InitHc ;
49071: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49075: LD_VAR 0 9
49079: PPUSH
49080: CALL_OW 266
49084: PUSH
49085: LD_INT 5
49087: EQUAL
49088: IFFALSE 49158
// begin if UnitsInside ( j ) < 3 then
49090: LD_VAR 0 9
49094: PPUSH
49095: CALL_OW 313
49099: PUSH
49100: LD_INT 3
49102: LESS
49103: IFFALSE 49139
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49105: LD_INT 0
49107: PPUSH
49108: LD_INT 5
49110: PUSH
49111: LD_INT 8
49113: PUSH
49114: LD_INT 9
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: LIST
49121: PUSH
49122: LD_VAR 0 17
49126: ARRAY
49127: PPUSH
49128: LD_VAR 0 4
49132: PPUSH
49133: CALL_OW 380
49137: GO 49156
// PrepareHuman ( false , i , skill ) ;
49139: LD_INT 0
49141: PPUSH
49142: LD_VAR 0 8
49146: PPUSH
49147: LD_VAR 0 4
49151: PPUSH
49152: CALL_OW 380
// end else
49156: GO 49175
// PrepareHuman ( false , i , skill ) ;
49158: LD_INT 0
49160: PPUSH
49161: LD_VAR 0 8
49165: PPUSH
49166: LD_VAR 0 4
49170: PPUSH
49171: CALL_OW 380
// un := CreateHuman ;
49175: LD_ADDR_VAR 0 14
49179: PUSH
49180: CALL_OW 44
49184: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49185: LD_ADDR_VAR 0 7
49189: PUSH
49190: LD_VAR 0 7
49194: PPUSH
49195: LD_INT 1
49197: PPUSH
49198: LD_VAR 0 14
49202: PPUSH
49203: CALL_OW 2
49207: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49208: LD_VAR 0 14
49212: PPUSH
49213: LD_VAR 0 9
49217: PPUSH
49218: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49222: LD_VAR 0 9
49226: PPUSH
49227: CALL_OW 313
49231: PUSH
49232: LD_INT 6
49234: EQUAL
49235: PUSH
49236: LD_VAR 0 9
49240: PPUSH
49241: CALL_OW 266
49245: PUSH
49246: LD_INT 32
49248: PUSH
49249: LD_INT 31
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: IN
49256: OR
49257: IFFALSE 49071
49259: GO 49068
49261: POP
49262: POP
// end else
49263: GO 49645
// for j = 1 to x do
49265: LD_ADDR_VAR 0 9
49269: PUSH
49270: DOUBLE
49271: LD_INT 1
49273: DEC
49274: ST_TO_ADDR
49275: LD_VAR 0 13
49279: PUSH
49280: FOR_TO
49281: IFFALSE 49643
// begin InitHc ;
49283: CALL_OW 19
// if not f then
49287: LD_VAR 0 12
49291: NOT
49292: IFFALSE 49381
// begin PrepareHuman ( false , i , skill ) ;
49294: LD_INT 0
49296: PPUSH
49297: LD_VAR 0 8
49301: PPUSH
49302: LD_VAR 0 4
49306: PPUSH
49307: CALL_OW 380
// un := CreateHuman ;
49311: LD_ADDR_VAR 0 14
49315: PUSH
49316: CALL_OW 44
49320: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49321: LD_ADDR_VAR 0 7
49325: PUSH
49326: LD_VAR 0 7
49330: PPUSH
49331: LD_INT 1
49333: PPUSH
49334: LD_VAR 0 14
49338: PPUSH
49339: CALL_OW 2
49343: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49344: LD_VAR 0 14
49348: PPUSH
49349: LD_VAR 0 1
49353: PPUSH
49354: CALL_OW 250
49358: PPUSH
49359: LD_VAR 0 1
49363: PPUSH
49364: CALL_OW 251
49368: PPUSH
49369: LD_INT 10
49371: PPUSH
49372: LD_INT 0
49374: PPUSH
49375: CALL_OW 50
// continue ;
49379: GO 49280
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49381: LD_VAR 0 12
49385: PUSH
49386: LD_INT 1
49388: ARRAY
49389: PPUSH
49390: CALL_OW 313
49394: PUSH
49395: LD_VAR 0 12
49399: PUSH
49400: LD_INT 1
49402: ARRAY
49403: PPUSH
49404: CALL_OW 266
49408: PUSH
49409: LD_INT 32
49411: PUSH
49412: LD_INT 31
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: IN
49419: AND
49420: PUSH
49421: LD_VAR 0 12
49425: PUSH
49426: LD_INT 1
49428: ARRAY
49429: PPUSH
49430: CALL_OW 313
49434: PUSH
49435: LD_INT 6
49437: EQUAL
49438: OR
49439: IFFALSE 49459
// f := Delete ( f , 1 ) ;
49441: LD_ADDR_VAR 0 12
49445: PUSH
49446: LD_VAR 0 12
49450: PPUSH
49451: LD_INT 1
49453: PPUSH
49454: CALL_OW 3
49458: ST_TO_ADDR
// if not f then
49459: LD_VAR 0 12
49463: NOT
49464: IFFALSE 49482
// begin x := x + 2 ;
49466: LD_ADDR_VAR 0 13
49470: PUSH
49471: LD_VAR 0 13
49475: PUSH
49476: LD_INT 2
49478: PLUS
49479: ST_TO_ADDR
// continue ;
49480: GO 49280
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49482: LD_VAR 0 12
49486: PUSH
49487: LD_INT 1
49489: ARRAY
49490: PPUSH
49491: CALL_OW 266
49495: PUSH
49496: LD_INT 5
49498: EQUAL
49499: IFFALSE 49573
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49501: LD_VAR 0 12
49505: PUSH
49506: LD_INT 1
49508: ARRAY
49509: PPUSH
49510: CALL_OW 313
49514: PUSH
49515: LD_INT 3
49517: LESS
49518: IFFALSE 49554
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49520: LD_INT 0
49522: PPUSH
49523: LD_INT 5
49525: PUSH
49526: LD_INT 8
49528: PUSH
49529: LD_INT 9
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: LIST
49536: PUSH
49537: LD_VAR 0 17
49541: ARRAY
49542: PPUSH
49543: LD_VAR 0 4
49547: PPUSH
49548: CALL_OW 380
49552: GO 49571
// PrepareHuman ( false , i , skill ) ;
49554: LD_INT 0
49556: PPUSH
49557: LD_VAR 0 8
49561: PPUSH
49562: LD_VAR 0 4
49566: PPUSH
49567: CALL_OW 380
// end else
49571: GO 49590
// PrepareHuman ( false , i , skill ) ;
49573: LD_INT 0
49575: PPUSH
49576: LD_VAR 0 8
49580: PPUSH
49581: LD_VAR 0 4
49585: PPUSH
49586: CALL_OW 380
// un := CreateHuman ;
49590: LD_ADDR_VAR 0 14
49594: PUSH
49595: CALL_OW 44
49599: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49600: LD_ADDR_VAR 0 7
49604: PUSH
49605: LD_VAR 0 7
49609: PPUSH
49610: LD_INT 1
49612: PPUSH
49613: LD_VAR 0 14
49617: PPUSH
49618: CALL_OW 2
49622: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49623: LD_VAR 0 14
49627: PPUSH
49628: LD_VAR 0 12
49632: PUSH
49633: LD_INT 1
49635: ARRAY
49636: PPUSH
49637: CALL_OW 52
// end ;
49641: GO 49280
49643: POP
49644: POP
// end ;
49645: GO 48582
49647: POP
49648: POP
// result := result ^ buildings ;
49649: LD_ADDR_VAR 0 7
49653: PUSH
49654: LD_VAR 0 7
49658: PUSH
49659: LD_VAR 0 18
49663: ADD
49664: ST_TO_ADDR
// end else
49665: GO 49808
// begin for i = 1 to personel do
49667: LD_ADDR_VAR 0 8
49671: PUSH
49672: DOUBLE
49673: LD_INT 1
49675: DEC
49676: ST_TO_ADDR
49677: LD_VAR 0 6
49681: PUSH
49682: FOR_TO
49683: IFFALSE 49806
// begin if i > 4 then
49685: LD_VAR 0 8
49689: PUSH
49690: LD_INT 4
49692: GREATER
49693: IFFALSE 49697
// break ;
49695: GO 49806
// x := personel [ i ] ;
49697: LD_ADDR_VAR 0 13
49701: PUSH
49702: LD_VAR 0 6
49706: PUSH
49707: LD_VAR 0 8
49711: ARRAY
49712: ST_TO_ADDR
// if x = - 1 then
49713: LD_VAR 0 13
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: EQUAL
49722: IFFALSE 49726
// continue ;
49724: GO 49682
// PrepareHuman ( false , i , skill ) ;
49726: LD_INT 0
49728: PPUSH
49729: LD_VAR 0 8
49733: PPUSH
49734: LD_VAR 0 4
49738: PPUSH
49739: CALL_OW 380
// un := CreateHuman ;
49743: LD_ADDR_VAR 0 14
49747: PUSH
49748: CALL_OW 44
49752: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49753: LD_VAR 0 14
49757: PPUSH
49758: LD_VAR 0 1
49762: PPUSH
49763: CALL_OW 250
49767: PPUSH
49768: LD_VAR 0 1
49772: PPUSH
49773: CALL_OW 251
49777: PPUSH
49778: LD_INT 10
49780: PPUSH
49781: LD_INT 0
49783: PPUSH
49784: CALL_OW 50
// result := result ^ un ;
49788: LD_ADDR_VAR 0 7
49792: PUSH
49793: LD_VAR 0 7
49797: PUSH
49798: LD_VAR 0 14
49802: ADD
49803: ST_TO_ADDR
// end ;
49804: GO 49682
49806: POP
49807: POP
// end ; end ;
49808: LD_VAR 0 7
49812: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49813: LD_INT 0
49815: PPUSH
49816: PPUSH
49817: PPUSH
49818: PPUSH
49819: PPUSH
49820: PPUSH
49821: PPUSH
49822: PPUSH
49823: PPUSH
49824: PPUSH
49825: PPUSH
49826: PPUSH
49827: PPUSH
49828: PPUSH
49829: PPUSH
49830: PPUSH
// result := false ;
49831: LD_ADDR_VAR 0 3
49835: PUSH
49836: LD_INT 0
49838: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49839: LD_VAR 0 1
49843: NOT
49844: PUSH
49845: LD_VAR 0 1
49849: PPUSH
49850: CALL_OW 266
49854: PUSH
49855: LD_INT 32
49857: PUSH
49858: LD_INT 33
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: IN
49865: NOT
49866: OR
49867: IFFALSE 49871
// exit ;
49869: GO 50980
// nat := GetNation ( tower ) ;
49871: LD_ADDR_VAR 0 12
49875: PUSH
49876: LD_VAR 0 1
49880: PPUSH
49881: CALL_OW 248
49885: ST_TO_ADDR
// side := GetSide ( tower ) ;
49886: LD_ADDR_VAR 0 16
49890: PUSH
49891: LD_VAR 0 1
49895: PPUSH
49896: CALL_OW 255
49900: ST_TO_ADDR
// x := GetX ( tower ) ;
49901: LD_ADDR_VAR 0 10
49905: PUSH
49906: LD_VAR 0 1
49910: PPUSH
49911: CALL_OW 250
49915: ST_TO_ADDR
// y := GetY ( tower ) ;
49916: LD_ADDR_VAR 0 11
49920: PUSH
49921: LD_VAR 0 1
49925: PPUSH
49926: CALL_OW 251
49930: ST_TO_ADDR
// if not x or not y then
49931: LD_VAR 0 10
49935: NOT
49936: PUSH
49937: LD_VAR 0 11
49941: NOT
49942: OR
49943: IFFALSE 49947
// exit ;
49945: GO 50980
// weapon := 0 ;
49947: LD_ADDR_VAR 0 18
49951: PUSH
49952: LD_INT 0
49954: ST_TO_ADDR
// fac_list := [ ] ;
49955: LD_ADDR_VAR 0 17
49959: PUSH
49960: EMPTY
49961: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49962: LD_ADDR_VAR 0 6
49966: PUSH
49967: LD_VAR 0 1
49971: PPUSH
49972: CALL_OW 274
49976: PPUSH
49977: LD_VAR 0 2
49981: PPUSH
49982: LD_INT 0
49984: PPUSH
49985: CALL 47551 0 3
49989: PPUSH
49990: LD_INT 30
49992: PUSH
49993: LD_INT 3
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PPUSH
50000: CALL_OW 72
50004: ST_TO_ADDR
// if not factories then
50005: LD_VAR 0 6
50009: NOT
50010: IFFALSE 50014
// exit ;
50012: GO 50980
// for i in factories do
50014: LD_ADDR_VAR 0 8
50018: PUSH
50019: LD_VAR 0 6
50023: PUSH
50024: FOR_IN
50025: IFFALSE 50050
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50027: LD_ADDR_VAR 0 17
50031: PUSH
50032: LD_VAR 0 17
50036: PUSH
50037: LD_VAR 0 8
50041: PPUSH
50042: CALL_OW 478
50046: UNION
50047: ST_TO_ADDR
50048: GO 50024
50050: POP
50051: POP
// if not fac_list then
50052: LD_VAR 0 17
50056: NOT
50057: IFFALSE 50061
// exit ;
50059: GO 50980
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50061: LD_ADDR_VAR 0 5
50065: PUSH
50066: LD_INT 4
50068: PUSH
50069: LD_INT 5
50071: PUSH
50072: LD_INT 9
50074: PUSH
50075: LD_INT 10
50077: PUSH
50078: LD_INT 6
50080: PUSH
50081: LD_INT 7
50083: PUSH
50084: LD_INT 11
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 27
50098: PUSH
50099: LD_INT 28
50101: PUSH
50102: LD_INT 26
50104: PUSH
50105: LD_INT 30
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 43
50116: PUSH
50117: LD_INT 44
50119: PUSH
50120: LD_INT 46
50122: PUSH
50123: LD_INT 45
50125: PUSH
50126: LD_INT 47
50128: PUSH
50129: LD_INT 49
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: LIST
50144: PUSH
50145: LD_VAR 0 12
50149: ARRAY
50150: ST_TO_ADDR
// list := list isect fac_list ;
50151: LD_ADDR_VAR 0 5
50155: PUSH
50156: LD_VAR 0 5
50160: PUSH
50161: LD_VAR 0 17
50165: ISECT
50166: ST_TO_ADDR
// if not list then
50167: LD_VAR 0 5
50171: NOT
50172: IFFALSE 50176
// exit ;
50174: GO 50980
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50176: LD_VAR 0 12
50180: PUSH
50181: LD_INT 3
50183: EQUAL
50184: PUSH
50185: LD_INT 49
50187: PUSH
50188: LD_VAR 0 5
50192: IN
50193: AND
50194: PUSH
50195: LD_INT 31
50197: PPUSH
50198: LD_VAR 0 16
50202: PPUSH
50203: CALL_OW 321
50207: PUSH
50208: LD_INT 2
50210: EQUAL
50211: AND
50212: IFFALSE 50272
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50214: LD_INT 22
50216: PUSH
50217: LD_VAR 0 16
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 35
50228: PUSH
50229: LD_INT 49
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 91
50238: PUSH
50239: LD_VAR 0 1
50243: PUSH
50244: LD_INT 10
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: LIST
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: LIST
50256: PPUSH
50257: CALL_OW 69
50261: NOT
50262: IFFALSE 50272
// weapon := ru_time_lapser ;
50264: LD_ADDR_VAR 0 18
50268: PUSH
50269: LD_INT 49
50271: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50272: LD_VAR 0 12
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: IN
50287: PUSH
50288: LD_INT 11
50290: PUSH
50291: LD_VAR 0 5
50295: IN
50296: PUSH
50297: LD_INT 30
50299: PUSH
50300: LD_VAR 0 5
50304: IN
50305: OR
50306: AND
50307: PUSH
50308: LD_INT 6
50310: PPUSH
50311: LD_VAR 0 16
50315: PPUSH
50316: CALL_OW 321
50320: PUSH
50321: LD_INT 2
50323: EQUAL
50324: AND
50325: IFFALSE 50490
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50327: LD_INT 22
50329: PUSH
50330: LD_VAR 0 16
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 2
50341: PUSH
50342: LD_INT 35
50344: PUSH
50345: LD_INT 11
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 35
50354: PUSH
50355: LD_INT 30
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 91
50369: PUSH
50370: LD_VAR 0 1
50374: PUSH
50375: LD_INT 18
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: LIST
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: LIST
50387: PPUSH
50388: CALL_OW 69
50392: NOT
50393: PUSH
50394: LD_INT 22
50396: PUSH
50397: LD_VAR 0 16
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 2
50408: PUSH
50409: LD_INT 30
50411: PUSH
50412: LD_INT 32
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 30
50421: PUSH
50422: LD_INT 33
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 91
50436: PUSH
50437: LD_VAR 0 1
50441: PUSH
50442: LD_INT 12
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: LIST
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: LIST
50454: PUSH
50455: EMPTY
50456: LIST
50457: PPUSH
50458: CALL_OW 69
50462: PUSH
50463: LD_INT 2
50465: GREATER
50466: AND
50467: IFFALSE 50490
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50469: LD_ADDR_VAR 0 18
50473: PUSH
50474: LD_INT 11
50476: PUSH
50477: LD_INT 30
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_VAR 0 12
50488: ARRAY
50489: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50490: LD_VAR 0 18
50494: NOT
50495: PUSH
50496: LD_INT 40
50498: PPUSH
50499: LD_VAR 0 16
50503: PPUSH
50504: CALL_OW 321
50508: PUSH
50509: LD_INT 2
50511: EQUAL
50512: AND
50513: PUSH
50514: LD_INT 7
50516: PUSH
50517: LD_VAR 0 5
50521: IN
50522: PUSH
50523: LD_INT 28
50525: PUSH
50526: LD_VAR 0 5
50530: IN
50531: OR
50532: PUSH
50533: LD_INT 45
50535: PUSH
50536: LD_VAR 0 5
50540: IN
50541: OR
50542: AND
50543: IFFALSE 50797
// begin hex := GetHexInfo ( x , y ) ;
50545: LD_ADDR_VAR 0 4
50549: PUSH
50550: LD_VAR 0 10
50554: PPUSH
50555: LD_VAR 0 11
50559: PPUSH
50560: CALL_OW 546
50564: ST_TO_ADDR
// if hex [ 1 ] then
50565: LD_VAR 0 4
50569: PUSH
50570: LD_INT 1
50572: ARRAY
50573: IFFALSE 50577
// exit ;
50575: GO 50980
// height := hex [ 2 ] ;
50577: LD_ADDR_VAR 0 15
50581: PUSH
50582: LD_VAR 0 4
50586: PUSH
50587: LD_INT 2
50589: ARRAY
50590: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50591: LD_ADDR_VAR 0 14
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: LD_INT 2
50601: PUSH
50602: LD_INT 3
50604: PUSH
50605: LD_INT 5
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: ST_TO_ADDR
// for i in tmp do
50614: LD_ADDR_VAR 0 8
50618: PUSH
50619: LD_VAR 0 14
50623: PUSH
50624: FOR_IN
50625: IFFALSE 50795
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50627: LD_ADDR_VAR 0 9
50631: PUSH
50632: LD_VAR 0 10
50636: PPUSH
50637: LD_VAR 0 8
50641: PPUSH
50642: LD_INT 5
50644: PPUSH
50645: CALL_OW 272
50649: PUSH
50650: LD_VAR 0 11
50654: PPUSH
50655: LD_VAR 0 8
50659: PPUSH
50660: LD_INT 5
50662: PPUSH
50663: CALL_OW 273
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50672: LD_VAR 0 9
50676: PUSH
50677: LD_INT 1
50679: ARRAY
50680: PPUSH
50681: LD_VAR 0 9
50685: PUSH
50686: LD_INT 2
50688: ARRAY
50689: PPUSH
50690: CALL_OW 488
50694: IFFALSE 50793
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50696: LD_ADDR_VAR 0 4
50700: PUSH
50701: LD_VAR 0 9
50705: PUSH
50706: LD_INT 1
50708: ARRAY
50709: PPUSH
50710: LD_VAR 0 9
50714: PUSH
50715: LD_INT 2
50717: ARRAY
50718: PPUSH
50719: CALL_OW 546
50723: ST_TO_ADDR
// if hex [ 1 ] then
50724: LD_VAR 0 4
50728: PUSH
50729: LD_INT 1
50731: ARRAY
50732: IFFALSE 50736
// continue ;
50734: GO 50624
// h := hex [ 2 ] ;
50736: LD_ADDR_VAR 0 13
50740: PUSH
50741: LD_VAR 0 4
50745: PUSH
50746: LD_INT 2
50748: ARRAY
50749: ST_TO_ADDR
// if h + 7 < height then
50750: LD_VAR 0 13
50754: PUSH
50755: LD_INT 7
50757: PLUS
50758: PUSH
50759: LD_VAR 0 15
50763: LESS
50764: IFFALSE 50793
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50766: LD_ADDR_VAR 0 18
50770: PUSH
50771: LD_INT 7
50773: PUSH
50774: LD_INT 28
50776: PUSH
50777: LD_INT 45
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: LIST
50784: PUSH
50785: LD_VAR 0 12
50789: ARRAY
50790: ST_TO_ADDR
// break ;
50791: GO 50795
// end ; end ; end ;
50793: GO 50624
50795: POP
50796: POP
// end ; if not weapon then
50797: LD_VAR 0 18
50801: NOT
50802: IFFALSE 50862
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50804: LD_ADDR_VAR 0 5
50808: PUSH
50809: LD_VAR 0 5
50813: PUSH
50814: LD_INT 11
50816: PUSH
50817: LD_INT 30
50819: PUSH
50820: LD_INT 49
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: LIST
50827: DIFF
50828: ST_TO_ADDR
// if not list then
50829: LD_VAR 0 5
50833: NOT
50834: IFFALSE 50838
// exit ;
50836: GO 50980
// weapon := list [ rand ( 1 , list ) ] ;
50838: LD_ADDR_VAR 0 18
50842: PUSH
50843: LD_VAR 0 5
50847: PUSH
50848: LD_INT 1
50850: PPUSH
50851: LD_VAR 0 5
50855: PPUSH
50856: CALL_OW 12
50860: ARRAY
50861: ST_TO_ADDR
// end ; if weapon then
50862: LD_VAR 0 18
50866: IFFALSE 50980
// begin tmp := CostOfWeapon ( weapon ) ;
50868: LD_ADDR_VAR 0 14
50872: PUSH
50873: LD_VAR 0 18
50877: PPUSH
50878: CALL_OW 451
50882: ST_TO_ADDR
// j := GetBase ( tower ) ;
50883: LD_ADDR_VAR 0 9
50887: PUSH
50888: LD_VAR 0 1
50892: PPUSH
50893: CALL_OW 274
50897: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50898: LD_VAR 0 9
50902: PPUSH
50903: LD_INT 1
50905: PPUSH
50906: CALL_OW 275
50910: PUSH
50911: LD_VAR 0 14
50915: PUSH
50916: LD_INT 1
50918: ARRAY
50919: GREATEREQUAL
50920: PUSH
50921: LD_VAR 0 9
50925: PPUSH
50926: LD_INT 2
50928: PPUSH
50929: CALL_OW 275
50933: PUSH
50934: LD_VAR 0 14
50938: PUSH
50939: LD_INT 2
50941: ARRAY
50942: GREATEREQUAL
50943: AND
50944: PUSH
50945: LD_VAR 0 9
50949: PPUSH
50950: LD_INT 3
50952: PPUSH
50953: CALL_OW 275
50957: PUSH
50958: LD_VAR 0 14
50962: PUSH
50963: LD_INT 3
50965: ARRAY
50966: GREATEREQUAL
50967: AND
50968: IFFALSE 50980
// result := weapon ;
50970: LD_ADDR_VAR 0 3
50974: PUSH
50975: LD_VAR 0 18
50979: ST_TO_ADDR
// end ; end ;
50980: LD_VAR 0 3
50984: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50985: LD_INT 0
50987: PPUSH
50988: PPUSH
// result := true ;
50989: LD_ADDR_VAR 0 3
50993: PUSH
50994: LD_INT 1
50996: ST_TO_ADDR
// if array1 = array2 then
50997: LD_VAR 0 1
51001: PUSH
51002: LD_VAR 0 2
51006: EQUAL
51007: IFFALSE 51067
// begin for i = 1 to array1 do
51009: LD_ADDR_VAR 0 4
51013: PUSH
51014: DOUBLE
51015: LD_INT 1
51017: DEC
51018: ST_TO_ADDR
51019: LD_VAR 0 1
51023: PUSH
51024: FOR_TO
51025: IFFALSE 51063
// if array1 [ i ] <> array2 [ i ] then
51027: LD_VAR 0 1
51031: PUSH
51032: LD_VAR 0 4
51036: ARRAY
51037: PUSH
51038: LD_VAR 0 2
51042: PUSH
51043: LD_VAR 0 4
51047: ARRAY
51048: NONEQUAL
51049: IFFALSE 51061
// begin result := false ;
51051: LD_ADDR_VAR 0 3
51055: PUSH
51056: LD_INT 0
51058: ST_TO_ADDR
// break ;
51059: GO 51063
// end ;
51061: GO 51024
51063: POP
51064: POP
// end else
51065: GO 51075
// result := false ;
51067: LD_ADDR_VAR 0 3
51071: PUSH
51072: LD_INT 0
51074: ST_TO_ADDR
// end ;
51075: LD_VAR 0 3
51079: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51080: LD_INT 0
51082: PPUSH
51083: PPUSH
// if not array1 or not array2 then
51084: LD_VAR 0 1
51088: NOT
51089: PUSH
51090: LD_VAR 0 2
51094: NOT
51095: OR
51096: IFFALSE 51100
// exit ;
51098: GO 51164
// result := true ;
51100: LD_ADDR_VAR 0 3
51104: PUSH
51105: LD_INT 1
51107: ST_TO_ADDR
// for i = 1 to array1 do
51108: LD_ADDR_VAR 0 4
51112: PUSH
51113: DOUBLE
51114: LD_INT 1
51116: DEC
51117: ST_TO_ADDR
51118: LD_VAR 0 1
51122: PUSH
51123: FOR_TO
51124: IFFALSE 51162
// if array1 [ i ] <> array2 [ i ] then
51126: LD_VAR 0 1
51130: PUSH
51131: LD_VAR 0 4
51135: ARRAY
51136: PUSH
51137: LD_VAR 0 2
51141: PUSH
51142: LD_VAR 0 4
51146: ARRAY
51147: NONEQUAL
51148: IFFALSE 51160
// begin result := false ;
51150: LD_ADDR_VAR 0 3
51154: PUSH
51155: LD_INT 0
51157: ST_TO_ADDR
// break ;
51158: GO 51162
// end ;
51160: GO 51123
51162: POP
51163: POP
// end ;
51164: LD_VAR 0 3
51168: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51169: LD_INT 0
51171: PPUSH
51172: PPUSH
51173: PPUSH
// pom := GetBase ( fac ) ;
51174: LD_ADDR_VAR 0 5
51178: PUSH
51179: LD_VAR 0 1
51183: PPUSH
51184: CALL_OW 274
51188: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51189: LD_ADDR_VAR 0 4
51193: PUSH
51194: LD_VAR 0 2
51198: PUSH
51199: LD_INT 1
51201: ARRAY
51202: PPUSH
51203: LD_VAR 0 2
51207: PUSH
51208: LD_INT 2
51210: ARRAY
51211: PPUSH
51212: LD_VAR 0 2
51216: PUSH
51217: LD_INT 3
51219: ARRAY
51220: PPUSH
51221: LD_VAR 0 2
51225: PUSH
51226: LD_INT 4
51228: ARRAY
51229: PPUSH
51230: CALL_OW 449
51234: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51235: LD_ADDR_VAR 0 3
51239: PUSH
51240: LD_VAR 0 5
51244: PPUSH
51245: LD_INT 1
51247: PPUSH
51248: CALL_OW 275
51252: PUSH
51253: LD_VAR 0 4
51257: PUSH
51258: LD_INT 1
51260: ARRAY
51261: GREATEREQUAL
51262: PUSH
51263: LD_VAR 0 5
51267: PPUSH
51268: LD_INT 2
51270: PPUSH
51271: CALL_OW 275
51275: PUSH
51276: LD_VAR 0 4
51280: PUSH
51281: LD_INT 2
51283: ARRAY
51284: GREATEREQUAL
51285: AND
51286: PUSH
51287: LD_VAR 0 5
51291: PPUSH
51292: LD_INT 3
51294: PPUSH
51295: CALL_OW 275
51299: PUSH
51300: LD_VAR 0 4
51304: PUSH
51305: LD_INT 3
51307: ARRAY
51308: GREATEREQUAL
51309: AND
51310: ST_TO_ADDR
// end ;
51311: LD_VAR 0 3
51315: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51316: LD_INT 0
51318: PPUSH
51319: PPUSH
51320: PPUSH
51321: PPUSH
// pom := GetBase ( building ) ;
51322: LD_ADDR_VAR 0 3
51326: PUSH
51327: LD_VAR 0 1
51331: PPUSH
51332: CALL_OW 274
51336: ST_TO_ADDR
// if not pom then
51337: LD_VAR 0 3
51341: NOT
51342: IFFALSE 51346
// exit ;
51344: GO 51516
// btype := GetBType ( building ) ;
51346: LD_ADDR_VAR 0 5
51350: PUSH
51351: LD_VAR 0 1
51355: PPUSH
51356: CALL_OW 266
51360: ST_TO_ADDR
// if btype = b_armoury then
51361: LD_VAR 0 5
51365: PUSH
51366: LD_INT 4
51368: EQUAL
51369: IFFALSE 51379
// btype := b_barracks ;
51371: LD_ADDR_VAR 0 5
51375: PUSH
51376: LD_INT 5
51378: ST_TO_ADDR
// if btype = b_depot then
51379: LD_VAR 0 5
51383: PUSH
51384: LD_INT 0
51386: EQUAL
51387: IFFALSE 51397
// btype := b_warehouse ;
51389: LD_ADDR_VAR 0 5
51393: PUSH
51394: LD_INT 1
51396: ST_TO_ADDR
// if btype = b_workshop then
51397: LD_VAR 0 5
51401: PUSH
51402: LD_INT 2
51404: EQUAL
51405: IFFALSE 51415
// btype := b_factory ;
51407: LD_ADDR_VAR 0 5
51411: PUSH
51412: LD_INT 3
51414: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51415: LD_ADDR_VAR 0 4
51419: PUSH
51420: LD_VAR 0 5
51424: PPUSH
51425: LD_VAR 0 1
51429: PPUSH
51430: CALL_OW 248
51434: PPUSH
51435: CALL_OW 450
51439: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51440: LD_ADDR_VAR 0 2
51444: PUSH
51445: LD_VAR 0 3
51449: PPUSH
51450: LD_INT 1
51452: PPUSH
51453: CALL_OW 275
51457: PUSH
51458: LD_VAR 0 4
51462: PUSH
51463: LD_INT 1
51465: ARRAY
51466: GREATEREQUAL
51467: PUSH
51468: LD_VAR 0 3
51472: PPUSH
51473: LD_INT 2
51475: PPUSH
51476: CALL_OW 275
51480: PUSH
51481: LD_VAR 0 4
51485: PUSH
51486: LD_INT 2
51488: ARRAY
51489: GREATEREQUAL
51490: AND
51491: PUSH
51492: LD_VAR 0 3
51496: PPUSH
51497: LD_INT 3
51499: PPUSH
51500: CALL_OW 275
51504: PUSH
51505: LD_VAR 0 4
51509: PUSH
51510: LD_INT 3
51512: ARRAY
51513: GREATEREQUAL
51514: AND
51515: ST_TO_ADDR
// end ;
51516: LD_VAR 0 2
51520: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51521: LD_INT 0
51523: PPUSH
51524: PPUSH
51525: PPUSH
// pom := GetBase ( building ) ;
51526: LD_ADDR_VAR 0 4
51530: PUSH
51531: LD_VAR 0 1
51535: PPUSH
51536: CALL_OW 274
51540: ST_TO_ADDR
// if not pom then
51541: LD_VAR 0 4
51545: NOT
51546: IFFALSE 51550
// exit ;
51548: GO 51651
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51550: LD_ADDR_VAR 0 5
51554: PUSH
51555: LD_VAR 0 2
51559: PPUSH
51560: LD_VAR 0 1
51564: PPUSH
51565: CALL_OW 248
51569: PPUSH
51570: CALL_OW 450
51574: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51575: LD_ADDR_VAR 0 3
51579: PUSH
51580: LD_VAR 0 4
51584: PPUSH
51585: LD_INT 1
51587: PPUSH
51588: CALL_OW 275
51592: PUSH
51593: LD_VAR 0 5
51597: PUSH
51598: LD_INT 1
51600: ARRAY
51601: GREATEREQUAL
51602: PUSH
51603: LD_VAR 0 4
51607: PPUSH
51608: LD_INT 2
51610: PPUSH
51611: CALL_OW 275
51615: PUSH
51616: LD_VAR 0 5
51620: PUSH
51621: LD_INT 2
51623: ARRAY
51624: GREATEREQUAL
51625: AND
51626: PUSH
51627: LD_VAR 0 4
51631: PPUSH
51632: LD_INT 3
51634: PPUSH
51635: CALL_OW 275
51639: PUSH
51640: LD_VAR 0 5
51644: PUSH
51645: LD_INT 3
51647: ARRAY
51648: GREATEREQUAL
51649: AND
51650: ST_TO_ADDR
// end ;
51651: LD_VAR 0 3
51655: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51656: LD_INT 0
51658: PPUSH
51659: PPUSH
51660: PPUSH
51661: PPUSH
51662: PPUSH
51663: PPUSH
51664: PPUSH
51665: PPUSH
51666: PPUSH
51667: PPUSH
51668: PPUSH
// result := false ;
51669: LD_ADDR_VAR 0 8
51673: PUSH
51674: LD_INT 0
51676: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51677: LD_VAR 0 5
51681: NOT
51682: PUSH
51683: LD_VAR 0 1
51687: NOT
51688: OR
51689: PUSH
51690: LD_VAR 0 2
51694: NOT
51695: OR
51696: PUSH
51697: LD_VAR 0 3
51701: NOT
51702: OR
51703: IFFALSE 51707
// exit ;
51705: GO 52521
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51707: LD_ADDR_VAR 0 14
51711: PUSH
51712: LD_VAR 0 1
51716: PPUSH
51717: LD_VAR 0 2
51721: PPUSH
51722: LD_VAR 0 3
51726: PPUSH
51727: LD_VAR 0 4
51731: PPUSH
51732: LD_VAR 0 5
51736: PUSH
51737: LD_INT 1
51739: ARRAY
51740: PPUSH
51741: CALL_OW 248
51745: PPUSH
51746: LD_INT 0
51748: PPUSH
51749: CALL 53754 0 6
51753: ST_TO_ADDR
// if not hexes then
51754: LD_VAR 0 14
51758: NOT
51759: IFFALSE 51763
// exit ;
51761: GO 52521
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51763: LD_ADDR_VAR 0 17
51767: PUSH
51768: LD_VAR 0 5
51772: PPUSH
51773: LD_INT 22
51775: PUSH
51776: LD_VAR 0 13
51780: PPUSH
51781: CALL_OW 255
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 2
51792: PUSH
51793: LD_INT 30
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 30
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: LIST
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PPUSH
51822: CALL_OW 72
51826: ST_TO_ADDR
// for i = 1 to hexes do
51827: LD_ADDR_VAR 0 9
51831: PUSH
51832: DOUBLE
51833: LD_INT 1
51835: DEC
51836: ST_TO_ADDR
51837: LD_VAR 0 14
51841: PUSH
51842: FOR_TO
51843: IFFALSE 52519
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51845: LD_ADDR_VAR 0 13
51849: PUSH
51850: LD_VAR 0 14
51854: PUSH
51855: LD_VAR 0 9
51859: ARRAY
51860: PUSH
51861: LD_INT 1
51863: ARRAY
51864: PPUSH
51865: LD_VAR 0 14
51869: PUSH
51870: LD_VAR 0 9
51874: ARRAY
51875: PUSH
51876: LD_INT 2
51878: ARRAY
51879: PPUSH
51880: CALL_OW 428
51884: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51885: LD_VAR 0 14
51889: PUSH
51890: LD_VAR 0 9
51894: ARRAY
51895: PUSH
51896: LD_INT 1
51898: ARRAY
51899: PPUSH
51900: LD_VAR 0 14
51904: PUSH
51905: LD_VAR 0 9
51909: ARRAY
51910: PUSH
51911: LD_INT 2
51913: ARRAY
51914: PPUSH
51915: CALL_OW 351
51919: PUSH
51920: LD_VAR 0 14
51924: PUSH
51925: LD_VAR 0 9
51929: ARRAY
51930: PUSH
51931: LD_INT 1
51933: ARRAY
51934: PPUSH
51935: LD_VAR 0 14
51939: PUSH
51940: LD_VAR 0 9
51944: ARRAY
51945: PUSH
51946: LD_INT 2
51948: ARRAY
51949: PPUSH
51950: CALL_OW 488
51954: NOT
51955: OR
51956: PUSH
51957: LD_VAR 0 13
51961: PPUSH
51962: CALL_OW 247
51966: PUSH
51967: LD_INT 3
51969: EQUAL
51970: OR
51971: IFFALSE 51977
// exit ;
51973: POP
51974: POP
51975: GO 52521
// if not tmp then
51977: LD_VAR 0 13
51981: NOT
51982: IFFALSE 51986
// continue ;
51984: GO 51842
// result := true ;
51986: LD_ADDR_VAR 0 8
51990: PUSH
51991: LD_INT 1
51993: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51994: LD_VAR 0 6
51998: PUSH
51999: LD_VAR 0 13
52003: PPUSH
52004: CALL_OW 247
52008: PUSH
52009: LD_INT 2
52011: EQUAL
52012: AND
52013: PUSH
52014: LD_VAR 0 13
52018: PPUSH
52019: CALL_OW 263
52023: PUSH
52024: LD_INT 1
52026: EQUAL
52027: AND
52028: IFFALSE 52192
// begin if IsDrivenBy ( tmp ) then
52030: LD_VAR 0 13
52034: PPUSH
52035: CALL_OW 311
52039: IFFALSE 52043
// continue ;
52041: GO 51842
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52043: LD_VAR 0 6
52047: PPUSH
52048: LD_INT 3
52050: PUSH
52051: LD_INT 60
52053: PUSH
52054: EMPTY
52055: LIST
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 3
52063: PUSH
52064: LD_INT 55
52066: PUSH
52067: EMPTY
52068: LIST
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PPUSH
52078: CALL_OW 72
52082: IFFALSE 52190
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52084: LD_ADDR_VAR 0 18
52088: PUSH
52089: LD_VAR 0 6
52093: PPUSH
52094: LD_INT 3
52096: PUSH
52097: LD_INT 60
52099: PUSH
52100: EMPTY
52101: LIST
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 3
52109: PUSH
52110: LD_INT 55
52112: PUSH
52113: EMPTY
52114: LIST
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PPUSH
52124: CALL_OW 72
52128: PUSH
52129: LD_INT 1
52131: ARRAY
52132: ST_TO_ADDR
// if IsInUnit ( driver ) then
52133: LD_VAR 0 18
52137: PPUSH
52138: CALL_OW 310
52142: IFFALSE 52153
// ComExit ( driver ) ;
52144: LD_VAR 0 18
52148: PPUSH
52149: CALL 77442 0 1
// AddComEnterUnit ( driver , tmp ) ;
52153: LD_VAR 0 18
52157: PPUSH
52158: LD_VAR 0 13
52162: PPUSH
52163: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52167: LD_VAR 0 18
52171: PPUSH
52172: LD_VAR 0 7
52176: PPUSH
52177: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52181: LD_VAR 0 18
52185: PPUSH
52186: CALL_OW 181
// end ; continue ;
52190: GO 51842
// end ; if not cleaners or not tmp in cleaners then
52192: LD_VAR 0 6
52196: NOT
52197: PUSH
52198: LD_VAR 0 13
52202: PUSH
52203: LD_VAR 0 6
52207: IN
52208: NOT
52209: OR
52210: IFFALSE 52517
// begin if dep then
52212: LD_VAR 0 17
52216: IFFALSE 52352
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52218: LD_ADDR_VAR 0 16
52222: PUSH
52223: LD_VAR 0 17
52227: PUSH
52228: LD_INT 1
52230: ARRAY
52231: PPUSH
52232: CALL_OW 250
52236: PPUSH
52237: LD_VAR 0 17
52241: PUSH
52242: LD_INT 1
52244: ARRAY
52245: PPUSH
52246: CALL_OW 254
52250: PPUSH
52251: LD_INT 5
52253: PPUSH
52254: CALL_OW 272
52258: PUSH
52259: LD_VAR 0 17
52263: PUSH
52264: LD_INT 1
52266: ARRAY
52267: PPUSH
52268: CALL_OW 251
52272: PPUSH
52273: LD_VAR 0 17
52277: PUSH
52278: LD_INT 1
52280: ARRAY
52281: PPUSH
52282: CALL_OW 254
52286: PPUSH
52287: LD_INT 5
52289: PPUSH
52290: CALL_OW 273
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52299: LD_VAR 0 16
52303: PUSH
52304: LD_INT 1
52306: ARRAY
52307: PPUSH
52308: LD_VAR 0 16
52312: PUSH
52313: LD_INT 2
52315: ARRAY
52316: PPUSH
52317: CALL_OW 488
52321: IFFALSE 52352
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52323: LD_VAR 0 13
52327: PPUSH
52328: LD_VAR 0 16
52332: PUSH
52333: LD_INT 1
52335: ARRAY
52336: PPUSH
52337: LD_VAR 0 16
52341: PUSH
52342: LD_INT 2
52344: ARRAY
52345: PPUSH
52346: CALL_OW 111
// continue ;
52350: GO 51842
// end ; end ; r := GetDir ( tmp ) ;
52352: LD_ADDR_VAR 0 15
52356: PUSH
52357: LD_VAR 0 13
52361: PPUSH
52362: CALL_OW 254
52366: ST_TO_ADDR
// if r = 5 then
52367: LD_VAR 0 15
52371: PUSH
52372: LD_INT 5
52374: EQUAL
52375: IFFALSE 52385
// r := 0 ;
52377: LD_ADDR_VAR 0 15
52381: PUSH
52382: LD_INT 0
52384: ST_TO_ADDR
// for j = r to 5 do
52385: LD_ADDR_VAR 0 10
52389: PUSH
52390: DOUBLE
52391: LD_VAR 0 15
52395: DEC
52396: ST_TO_ADDR
52397: LD_INT 5
52399: PUSH
52400: FOR_TO
52401: IFFALSE 52515
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52403: LD_ADDR_VAR 0 11
52407: PUSH
52408: LD_VAR 0 13
52412: PPUSH
52413: CALL_OW 250
52417: PPUSH
52418: LD_VAR 0 10
52422: PPUSH
52423: LD_INT 2
52425: PPUSH
52426: CALL_OW 272
52430: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52431: LD_ADDR_VAR 0 12
52435: PUSH
52436: LD_VAR 0 13
52440: PPUSH
52441: CALL_OW 251
52445: PPUSH
52446: LD_VAR 0 10
52450: PPUSH
52451: LD_INT 2
52453: PPUSH
52454: CALL_OW 273
52458: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52459: LD_VAR 0 11
52463: PPUSH
52464: LD_VAR 0 12
52468: PPUSH
52469: CALL_OW 488
52473: PUSH
52474: LD_VAR 0 11
52478: PPUSH
52479: LD_VAR 0 12
52483: PPUSH
52484: CALL_OW 428
52488: NOT
52489: AND
52490: IFFALSE 52513
// begin ComMoveXY ( tmp , _x , _y ) ;
52492: LD_VAR 0 13
52496: PPUSH
52497: LD_VAR 0 11
52501: PPUSH
52502: LD_VAR 0 12
52506: PPUSH
52507: CALL_OW 111
// break ;
52511: GO 52515
// end ; end ;
52513: GO 52400
52515: POP
52516: POP
// end ; end ;
52517: GO 51842
52519: POP
52520: POP
// end ;
52521: LD_VAR 0 8
52525: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52526: LD_INT 0
52528: PPUSH
// result := true ;
52529: LD_ADDR_VAR 0 3
52533: PUSH
52534: LD_INT 1
52536: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52537: LD_VAR 0 2
52541: PUSH
52542: LD_INT 24
52544: DOUBLE
52545: EQUAL
52546: IFTRUE 52556
52548: LD_INT 33
52550: DOUBLE
52551: EQUAL
52552: IFTRUE 52556
52554: GO 52581
52556: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52557: LD_ADDR_VAR 0 3
52561: PUSH
52562: LD_INT 32
52564: PPUSH
52565: LD_VAR 0 1
52569: PPUSH
52570: CALL_OW 321
52574: PUSH
52575: LD_INT 2
52577: EQUAL
52578: ST_TO_ADDR
52579: GO 52897
52581: LD_INT 20
52583: DOUBLE
52584: EQUAL
52585: IFTRUE 52589
52587: GO 52614
52589: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52590: LD_ADDR_VAR 0 3
52594: PUSH
52595: LD_INT 6
52597: PPUSH
52598: LD_VAR 0 1
52602: PPUSH
52603: CALL_OW 321
52607: PUSH
52608: LD_INT 2
52610: EQUAL
52611: ST_TO_ADDR
52612: GO 52897
52614: LD_INT 22
52616: DOUBLE
52617: EQUAL
52618: IFTRUE 52628
52620: LD_INT 36
52622: DOUBLE
52623: EQUAL
52624: IFTRUE 52628
52626: GO 52653
52628: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52629: LD_ADDR_VAR 0 3
52633: PUSH
52634: LD_INT 15
52636: PPUSH
52637: LD_VAR 0 1
52641: PPUSH
52642: CALL_OW 321
52646: PUSH
52647: LD_INT 2
52649: EQUAL
52650: ST_TO_ADDR
52651: GO 52897
52653: LD_INT 30
52655: DOUBLE
52656: EQUAL
52657: IFTRUE 52661
52659: GO 52686
52661: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52662: LD_ADDR_VAR 0 3
52666: PUSH
52667: LD_INT 20
52669: PPUSH
52670: LD_VAR 0 1
52674: PPUSH
52675: CALL_OW 321
52679: PUSH
52680: LD_INT 2
52682: EQUAL
52683: ST_TO_ADDR
52684: GO 52897
52686: LD_INT 28
52688: DOUBLE
52689: EQUAL
52690: IFTRUE 52700
52692: LD_INT 21
52694: DOUBLE
52695: EQUAL
52696: IFTRUE 52700
52698: GO 52725
52700: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52701: LD_ADDR_VAR 0 3
52705: PUSH
52706: LD_INT 21
52708: PPUSH
52709: LD_VAR 0 1
52713: PPUSH
52714: CALL_OW 321
52718: PUSH
52719: LD_INT 2
52721: EQUAL
52722: ST_TO_ADDR
52723: GO 52897
52725: LD_INT 16
52727: DOUBLE
52728: EQUAL
52729: IFTRUE 52733
52731: GO 52758
52733: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52734: LD_ADDR_VAR 0 3
52738: PUSH
52739: LD_INT 84
52741: PPUSH
52742: LD_VAR 0 1
52746: PPUSH
52747: CALL_OW 321
52751: PUSH
52752: LD_INT 2
52754: EQUAL
52755: ST_TO_ADDR
52756: GO 52897
52758: LD_INT 19
52760: DOUBLE
52761: EQUAL
52762: IFTRUE 52772
52764: LD_INT 23
52766: DOUBLE
52767: EQUAL
52768: IFTRUE 52772
52770: GO 52797
52772: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52773: LD_ADDR_VAR 0 3
52777: PUSH
52778: LD_INT 83
52780: PPUSH
52781: LD_VAR 0 1
52785: PPUSH
52786: CALL_OW 321
52790: PUSH
52791: LD_INT 2
52793: EQUAL
52794: ST_TO_ADDR
52795: GO 52897
52797: LD_INT 17
52799: DOUBLE
52800: EQUAL
52801: IFTRUE 52805
52803: GO 52830
52805: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52806: LD_ADDR_VAR 0 3
52810: PUSH
52811: LD_INT 39
52813: PPUSH
52814: LD_VAR 0 1
52818: PPUSH
52819: CALL_OW 321
52823: PUSH
52824: LD_INT 2
52826: EQUAL
52827: ST_TO_ADDR
52828: GO 52897
52830: LD_INT 18
52832: DOUBLE
52833: EQUAL
52834: IFTRUE 52838
52836: GO 52863
52838: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52839: LD_ADDR_VAR 0 3
52843: PUSH
52844: LD_INT 40
52846: PPUSH
52847: LD_VAR 0 1
52851: PPUSH
52852: CALL_OW 321
52856: PUSH
52857: LD_INT 2
52859: EQUAL
52860: ST_TO_ADDR
52861: GO 52897
52863: LD_INT 27
52865: DOUBLE
52866: EQUAL
52867: IFTRUE 52871
52869: GO 52896
52871: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52872: LD_ADDR_VAR 0 3
52876: PUSH
52877: LD_INT 35
52879: PPUSH
52880: LD_VAR 0 1
52884: PPUSH
52885: CALL_OW 321
52889: PUSH
52890: LD_INT 2
52892: EQUAL
52893: ST_TO_ADDR
52894: GO 52897
52896: POP
// end ;
52897: LD_VAR 0 3
52901: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52902: LD_INT 0
52904: PPUSH
52905: PPUSH
52906: PPUSH
52907: PPUSH
52908: PPUSH
52909: PPUSH
52910: PPUSH
52911: PPUSH
52912: PPUSH
52913: PPUSH
52914: PPUSH
// result := false ;
52915: LD_ADDR_VAR 0 6
52919: PUSH
52920: LD_INT 0
52922: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52923: LD_VAR 0 1
52927: NOT
52928: PUSH
52929: LD_VAR 0 1
52933: PPUSH
52934: CALL_OW 266
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: IN
52949: NOT
52950: OR
52951: PUSH
52952: LD_VAR 0 2
52956: NOT
52957: OR
52958: PUSH
52959: LD_VAR 0 5
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 2
52972: PUSH
52973: LD_INT 3
52975: PUSH
52976: LD_INT 4
52978: PUSH
52979: LD_INT 5
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: IN
52990: NOT
52991: OR
52992: PUSH
52993: LD_VAR 0 3
52997: PPUSH
52998: LD_VAR 0 4
53002: PPUSH
53003: CALL_OW 488
53007: NOT
53008: OR
53009: IFFALSE 53013
// exit ;
53011: GO 53749
// side := GetSide ( depot ) ;
53013: LD_ADDR_VAR 0 9
53017: PUSH
53018: LD_VAR 0 1
53022: PPUSH
53023: CALL_OW 255
53027: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53028: LD_VAR 0 9
53032: PPUSH
53033: LD_VAR 0 2
53037: PPUSH
53038: CALL 52526 0 2
53042: NOT
53043: IFFALSE 53047
// exit ;
53045: GO 53749
// pom := GetBase ( depot ) ;
53047: LD_ADDR_VAR 0 10
53051: PUSH
53052: LD_VAR 0 1
53056: PPUSH
53057: CALL_OW 274
53061: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53062: LD_ADDR_VAR 0 11
53066: PUSH
53067: LD_VAR 0 2
53071: PPUSH
53072: LD_VAR 0 1
53076: PPUSH
53077: CALL_OW 248
53081: PPUSH
53082: CALL_OW 450
53086: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53087: LD_VAR 0 10
53091: PPUSH
53092: LD_INT 1
53094: PPUSH
53095: CALL_OW 275
53099: PUSH
53100: LD_VAR 0 11
53104: PUSH
53105: LD_INT 1
53107: ARRAY
53108: GREATEREQUAL
53109: PUSH
53110: LD_VAR 0 10
53114: PPUSH
53115: LD_INT 2
53117: PPUSH
53118: CALL_OW 275
53122: PUSH
53123: LD_VAR 0 11
53127: PUSH
53128: LD_INT 2
53130: ARRAY
53131: GREATEREQUAL
53132: AND
53133: PUSH
53134: LD_VAR 0 10
53138: PPUSH
53139: LD_INT 3
53141: PPUSH
53142: CALL_OW 275
53146: PUSH
53147: LD_VAR 0 11
53151: PUSH
53152: LD_INT 3
53154: ARRAY
53155: GREATEREQUAL
53156: AND
53157: NOT
53158: IFFALSE 53162
// exit ;
53160: GO 53749
// if GetBType ( depot ) = b_depot then
53162: LD_VAR 0 1
53166: PPUSH
53167: CALL_OW 266
53171: PUSH
53172: LD_INT 0
53174: EQUAL
53175: IFFALSE 53187
// dist := 28 else
53177: LD_ADDR_VAR 0 14
53181: PUSH
53182: LD_INT 28
53184: ST_TO_ADDR
53185: GO 53195
// dist := 36 ;
53187: LD_ADDR_VAR 0 14
53191: PUSH
53192: LD_INT 36
53194: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53195: LD_VAR 0 1
53199: PPUSH
53200: LD_VAR 0 3
53204: PPUSH
53205: LD_VAR 0 4
53209: PPUSH
53210: CALL_OW 297
53214: PUSH
53215: LD_VAR 0 14
53219: GREATER
53220: IFFALSE 53224
// exit ;
53222: GO 53749
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53224: LD_ADDR_VAR 0 12
53228: PUSH
53229: LD_VAR 0 2
53233: PPUSH
53234: LD_VAR 0 3
53238: PPUSH
53239: LD_VAR 0 4
53243: PPUSH
53244: LD_VAR 0 5
53248: PPUSH
53249: LD_VAR 0 1
53253: PPUSH
53254: CALL_OW 248
53258: PPUSH
53259: LD_INT 0
53261: PPUSH
53262: CALL 53754 0 6
53266: ST_TO_ADDR
// if not hexes then
53267: LD_VAR 0 12
53271: NOT
53272: IFFALSE 53276
// exit ;
53274: GO 53749
// hex := GetHexInfo ( x , y ) ;
53276: LD_ADDR_VAR 0 15
53280: PUSH
53281: LD_VAR 0 3
53285: PPUSH
53286: LD_VAR 0 4
53290: PPUSH
53291: CALL_OW 546
53295: ST_TO_ADDR
// if hex [ 1 ] then
53296: LD_VAR 0 15
53300: PUSH
53301: LD_INT 1
53303: ARRAY
53304: IFFALSE 53308
// exit ;
53306: GO 53749
// height := hex [ 2 ] ;
53308: LD_ADDR_VAR 0 13
53312: PUSH
53313: LD_VAR 0 15
53317: PUSH
53318: LD_INT 2
53320: ARRAY
53321: ST_TO_ADDR
// for i = 1 to hexes do
53322: LD_ADDR_VAR 0 7
53326: PUSH
53327: DOUBLE
53328: LD_INT 1
53330: DEC
53331: ST_TO_ADDR
53332: LD_VAR 0 12
53336: PUSH
53337: FOR_TO
53338: IFFALSE 53668
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53340: LD_VAR 0 12
53344: PUSH
53345: LD_VAR 0 7
53349: ARRAY
53350: PUSH
53351: LD_INT 1
53353: ARRAY
53354: PPUSH
53355: LD_VAR 0 12
53359: PUSH
53360: LD_VAR 0 7
53364: ARRAY
53365: PUSH
53366: LD_INT 2
53368: ARRAY
53369: PPUSH
53370: CALL_OW 488
53374: NOT
53375: PUSH
53376: LD_VAR 0 12
53380: PUSH
53381: LD_VAR 0 7
53385: ARRAY
53386: PUSH
53387: LD_INT 1
53389: ARRAY
53390: PPUSH
53391: LD_VAR 0 12
53395: PUSH
53396: LD_VAR 0 7
53400: ARRAY
53401: PUSH
53402: LD_INT 2
53404: ARRAY
53405: PPUSH
53406: CALL_OW 428
53410: PUSH
53411: LD_INT 0
53413: GREATER
53414: OR
53415: PUSH
53416: LD_VAR 0 12
53420: PUSH
53421: LD_VAR 0 7
53425: ARRAY
53426: PUSH
53427: LD_INT 1
53429: ARRAY
53430: PPUSH
53431: LD_VAR 0 12
53435: PUSH
53436: LD_VAR 0 7
53440: ARRAY
53441: PUSH
53442: LD_INT 2
53444: ARRAY
53445: PPUSH
53446: CALL_OW 351
53450: OR
53451: IFFALSE 53457
// exit ;
53453: POP
53454: POP
53455: GO 53749
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53457: LD_ADDR_VAR 0 8
53461: PUSH
53462: LD_VAR 0 12
53466: PUSH
53467: LD_VAR 0 7
53471: ARRAY
53472: PUSH
53473: LD_INT 1
53475: ARRAY
53476: PPUSH
53477: LD_VAR 0 12
53481: PUSH
53482: LD_VAR 0 7
53486: ARRAY
53487: PUSH
53488: LD_INT 2
53490: ARRAY
53491: PPUSH
53492: CALL_OW 546
53496: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53497: LD_VAR 0 8
53501: PUSH
53502: LD_INT 1
53504: ARRAY
53505: PUSH
53506: LD_VAR 0 8
53510: PUSH
53511: LD_INT 2
53513: ARRAY
53514: PUSH
53515: LD_VAR 0 13
53519: PUSH
53520: LD_INT 2
53522: PLUS
53523: GREATER
53524: OR
53525: PUSH
53526: LD_VAR 0 8
53530: PUSH
53531: LD_INT 2
53533: ARRAY
53534: PUSH
53535: LD_VAR 0 13
53539: PUSH
53540: LD_INT 2
53542: MINUS
53543: LESS
53544: OR
53545: PUSH
53546: LD_VAR 0 8
53550: PUSH
53551: LD_INT 3
53553: ARRAY
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 8
53560: PUSH
53561: LD_INT 9
53563: PUSH
53564: LD_INT 10
53566: PUSH
53567: LD_INT 11
53569: PUSH
53570: LD_INT 12
53572: PUSH
53573: LD_INT 13
53575: PUSH
53576: LD_INT 16
53578: PUSH
53579: LD_INT 17
53581: PUSH
53582: LD_INT 18
53584: PUSH
53585: LD_INT 19
53587: PUSH
53588: LD_INT 20
53590: PUSH
53591: LD_INT 21
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: IN
53609: NOT
53610: OR
53611: PUSH
53612: LD_VAR 0 8
53616: PUSH
53617: LD_INT 5
53619: ARRAY
53620: NOT
53621: OR
53622: PUSH
53623: LD_VAR 0 8
53627: PUSH
53628: LD_INT 6
53630: ARRAY
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: LD_INT 7
53640: PUSH
53641: LD_INT 9
53643: PUSH
53644: LD_INT 10
53646: PUSH
53647: LD_INT 11
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: IN
53658: NOT
53659: OR
53660: IFFALSE 53666
// exit ;
53662: POP
53663: POP
53664: GO 53749
// end ;
53666: GO 53337
53668: POP
53669: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53670: LD_VAR 0 9
53674: PPUSH
53675: LD_VAR 0 3
53679: PPUSH
53680: LD_VAR 0 4
53684: PPUSH
53685: LD_INT 20
53687: PPUSH
53688: CALL 45701 0 4
53692: PUSH
53693: LD_INT 4
53695: ARRAY
53696: IFFALSE 53700
// exit ;
53698: GO 53749
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53700: LD_VAR 0 2
53704: PUSH
53705: LD_INT 29
53707: PUSH
53708: LD_INT 30
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: IN
53715: PUSH
53716: LD_VAR 0 3
53720: PPUSH
53721: LD_VAR 0 4
53725: PPUSH
53726: LD_VAR 0 9
53730: PPUSH
53731: CALL_OW 440
53735: NOT
53736: AND
53737: IFFALSE 53741
// exit ;
53739: GO 53749
// result := true ;
53741: LD_ADDR_VAR 0 6
53745: PUSH
53746: LD_INT 1
53748: ST_TO_ADDR
// end ;
53749: LD_VAR 0 6
53753: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53754: LD_INT 0
53756: PPUSH
53757: PPUSH
53758: PPUSH
53759: PPUSH
53760: PPUSH
53761: PPUSH
53762: PPUSH
53763: PPUSH
53764: PPUSH
53765: PPUSH
53766: PPUSH
53767: PPUSH
53768: PPUSH
53769: PPUSH
53770: PPUSH
53771: PPUSH
53772: PPUSH
53773: PPUSH
53774: PPUSH
53775: PPUSH
53776: PPUSH
53777: PPUSH
53778: PPUSH
53779: PPUSH
53780: PPUSH
53781: PPUSH
53782: PPUSH
53783: PPUSH
53784: PPUSH
53785: PPUSH
53786: PPUSH
53787: PPUSH
53788: PPUSH
53789: PPUSH
53790: PPUSH
53791: PPUSH
53792: PPUSH
53793: PPUSH
53794: PPUSH
53795: PPUSH
53796: PPUSH
53797: PPUSH
53798: PPUSH
53799: PPUSH
53800: PPUSH
53801: PPUSH
53802: PPUSH
53803: PPUSH
53804: PPUSH
53805: PPUSH
53806: PPUSH
53807: PPUSH
53808: PPUSH
53809: PPUSH
53810: PPUSH
53811: PPUSH
53812: PPUSH
53813: PPUSH
// result = [ ] ;
53814: LD_ADDR_VAR 0 7
53818: PUSH
53819: EMPTY
53820: ST_TO_ADDR
// temp_list = [ ] ;
53821: LD_ADDR_VAR 0 9
53825: PUSH
53826: EMPTY
53827: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53828: LD_VAR 0 4
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: LD_INT 3
53844: PUSH
53845: LD_INT 4
53847: PUSH
53848: LD_INT 5
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: IN
53859: NOT
53860: PUSH
53861: LD_VAR 0 1
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: IN
53876: PUSH
53877: LD_VAR 0 5
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: LD_INT 3
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: LIST
53895: IN
53896: NOT
53897: AND
53898: OR
53899: IFFALSE 53903
// exit ;
53901: GO 72294
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53903: LD_VAR 0 1
53907: PUSH
53908: LD_INT 6
53910: PUSH
53911: LD_INT 7
53913: PUSH
53914: LD_INT 8
53916: PUSH
53917: LD_INT 13
53919: PUSH
53920: LD_INT 12
53922: PUSH
53923: LD_INT 15
53925: PUSH
53926: LD_INT 11
53928: PUSH
53929: LD_INT 14
53931: PUSH
53932: LD_INT 10
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: IN
53946: IFFALSE 53956
// btype = b_lab ;
53948: LD_ADDR_VAR 0 1
53952: PUSH
53953: LD_INT 6
53955: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53956: LD_VAR 0 6
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: LD_INT 2
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: LIST
53974: IN
53975: NOT
53976: PUSH
53977: LD_VAR 0 1
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: LD_INT 3
53993: PUSH
53994: LD_INT 6
53996: PUSH
53997: LD_INT 36
53999: PUSH
54000: LD_INT 4
54002: PUSH
54003: LD_INT 5
54005: PUSH
54006: LD_INT 31
54008: PUSH
54009: LD_INT 32
54011: PUSH
54012: LD_INT 33
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: IN
54028: NOT
54029: PUSH
54030: LD_VAR 0 6
54034: PUSH
54035: LD_INT 1
54037: EQUAL
54038: AND
54039: OR
54040: PUSH
54041: LD_VAR 0 1
54045: PUSH
54046: LD_INT 2
54048: PUSH
54049: LD_INT 3
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: IN
54056: NOT
54057: PUSH
54058: LD_VAR 0 6
54062: PUSH
54063: LD_INT 2
54065: EQUAL
54066: AND
54067: OR
54068: IFFALSE 54078
// mode = 0 ;
54070: LD_ADDR_VAR 0 6
54074: PUSH
54075: LD_INT 0
54077: ST_TO_ADDR
// case mode of 0 :
54078: LD_VAR 0 6
54082: PUSH
54083: LD_INT 0
54085: DOUBLE
54086: EQUAL
54087: IFTRUE 54091
54089: GO 65544
54091: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54092: LD_ADDR_VAR 0 11
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: LD_INT 2
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: LD_INT 2
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: LD_INT 3
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: LD_INT 3
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54285: LD_ADDR_VAR 0 12
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 2
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 2
54408: NEG
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 2
54419: NEG
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: NEG
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 3
54442: NEG
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 3
54453: NEG
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54481: LD_ADDR_VAR 0 13
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: NEG
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 2
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 2
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 2
54604: NEG
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 2
54616: NEG
54617: PUSH
54618: LD_INT 2
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 2
54628: NEG
54629: PUSH
54630: LD_INT 3
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 3
54640: NEG
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: NEG
54653: PUSH
54654: LD_INT 3
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54680: LD_ADDR_VAR 0 14
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: LD_INT 3
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: LD_INT 3
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54876: LD_ADDR_VAR 0 15
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: NEG
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 2
54999: NEG
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 2
55010: NEG
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 3
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 3
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55069: LD_ADDR_VAR 0 16
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 2
55192: NEG
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 3
55216: PUSH
55217: LD_INT 2
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 3
55226: PUSH
55227: LD_INT 3
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 2
55236: PUSH
55237: LD_INT 3
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55262: LD_ADDR_VAR 0 17
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: LD_INT 0
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: LD_INT 2
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: LD_INT 2
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: PUSH
55408: LD_INT 2
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 2
55449: NEG
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 2
55461: NEG
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55492: LD_ADDR_VAR 0 18
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: LD_INT 2
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 2
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: LD_INT 2
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: LD_INT 2
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 2
55668: NEG
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 2
55679: NEG
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 2
55691: NEG
55692: PUSH
55693: LD_INT 2
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55722: LD_ADDR_VAR 0 19
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 2
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 2
55898: NEG
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: NEG
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55952: LD_ADDR_VAR 0 20
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 2
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 2
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 2
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 2
56128: NEG
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: NEG
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 2
56151: NEG
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56182: LD_ADDR_VAR 0 21
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 2
56317: PUSH
56318: LD_INT 2
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 2
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 2
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 2
56358: NEG
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 2
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 2
56381: NEG
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56412: LD_ADDR_VAR 0 22
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: LD_INT 2
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: LD_INT 2
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 2
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: LD_INT 2
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 2
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 2
56588: NEG
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 2
56599: NEG
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: LD_INT 2
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56642: LD_ADDR_VAR 0 23
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: LD_INT 2
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 2
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 2
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 2
56841: NEG
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 2
56853: NEG
56854: PUSH
56855: LD_INT 3
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: LD_INT 3
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: LD_INT 2
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56922: LD_ADDR_VAR 0 24
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: LD_INT 2
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: LD_INT 2
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 2
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 2
57057: PUSH
57058: LD_INT 2
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: LD_INT 2
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 2
57098: NEG
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 2
57109: NEG
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 2
57121: NEG
57122: PUSH
57123: LD_INT 2
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 3
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 3
57165: PUSH
57166: LD_INT 2
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57198: LD_ADDR_VAR 0 25
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 0
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 2
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 2
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 2
57397: NEG
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 3
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 3
57419: PUSH
57420: LD_INT 2
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: LD_INT 3
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: LD_INT 3
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57472: LD_ADDR_VAR 0 26
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: LD_INT 0
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: LD_INT 1
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: LD_INT 2
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: LD_INT 2
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 2
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 2
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: NEG
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: LD_INT 3
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: LD_INT 3
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: LD_INT 2
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 2
57714: NEG
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57748: LD_ADDR_VAR 0 27
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: LD_INT 1
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: LD_INT 2
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: LD_INT 2
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 2
57935: NEG
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 2
57947: NEG
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: LD_INT 2
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 2
57970: NEG
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 3
57981: NEG
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 3
57993: NEG
57994: PUSH
57995: LD_INT 2
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58028: LD_ADDR_VAR 0 28
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 1
58086: NEG
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: LD_INT 2
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: LD_INT 2
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: LD_INT 2
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_INT 2
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 2
58204: NEG
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: NEG
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 2
58227: NEG
58228: PUSH
58229: LD_INT 2
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 2
58239: NEG
58240: PUSH
58241: LD_INT 3
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: LD_INT 3
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 3
58263: NEG
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 3
58275: NEG
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58310: LD_ADDR_VAR 0 29
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: LD_INT 2
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: LD_INT 2
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 2
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: LD_INT 2
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 2
58476: NEG
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 2
58488: NEG
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 2
58500: NEG
58501: PUSH
58502: LD_INT 3
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 2
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 3
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: NEG
58544: PUSH
58545: LD_INT 2
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 3
58554: NEG
58555: PUSH
58556: LD_INT 2
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58589: LD_ADDR_VAR 0 30
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: LD_INT 2
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: LD_INT 2
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 2
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 2
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 2
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 2
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 2
58766: NEG
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: LD_INT 3
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: LD_INT 2
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 2
58811: PUSH
58812: LD_INT 3
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 3
58832: NEG
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58867: LD_ADDR_VAR 0 31
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: LD_INT 2
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 2
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 2
58991: PUSH
58992: LD_INT 2
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: LD_INT 2
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: LD_INT 2
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 2
59032: NEG
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 2
59044: NEG
59045: PUSH
59046: LD_INT 2
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: LD_INT 3
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 3
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: LD_INT 3
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: LD_INT 2
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 3
59110: NEG
59111: PUSH
59112: LD_INT 2
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59145: LD_ADDR_VAR 0 32
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 0
59162: PUSH
59163: LD_INT 1
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: LD_INT 2
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: LD_INT 2
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 1
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 2
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 1
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 1
59300: NEG
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 2
59311: NEG
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 2
59322: NEG
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: LD_INT 3
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 3
59357: PUSH
59358: LD_INT 2
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 2
59367: PUSH
59368: LD_INT 3
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 2
59377: NEG
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 3
59388: NEG
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59423: LD_ADDR_VAR 0 33
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 1
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: LD_INT 1
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 1
59492: NEG
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: LD_INT 2
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 2
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 1
59547: PUSH
59548: LD_INT 2
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: LD_INT 2
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 2
59578: NEG
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 2
59589: NEG
59590: PUSH
59591: LD_INT 1
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: LD_INT 2
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 2
59613: NEG
59614: PUSH
59615: LD_INT 3
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 3
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: LD_INT 3
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: LD_INT 2
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 3
59667: NEG
59668: PUSH
59669: LD_INT 2
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59702: LD_ADDR_VAR 0 34
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 1
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 2
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: LD_INT 2
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: LD_INT 2
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: LD_INT 2
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: NEG
59848: PUSH
59849: LD_INT 1
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 2
59858: NEG
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: NEG
59870: PUSH
59871: LD_INT 1
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 2
59881: NEG
59882: PUSH
59883: LD_INT 2
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: PUSH
59895: LD_INT 3
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: LD_INT 2
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 3
59916: PUSH
59917: LD_INT 2
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 2
59926: PUSH
59927: LD_INT 3
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 2
59936: NEG
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 3
59947: NEG
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59982: LD_ADDR_VAR 0 35
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: LD_INT 1
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60094: LD_ADDR_VAR 0 36
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 0
60111: PUSH
60112: LD_INT 1
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 1
60163: NEG
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 1
60175: NEG
60176: PUSH
60177: LD_INT 2
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60206: LD_ADDR_VAR 0 37
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: LD_INT 1
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: LD_INT 1
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: NEG
60299: PUSH
60300: LD_INT 1
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60318: LD_ADDR_VAR 0 38
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: LD_INT 1
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 1
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: NEG
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 2
60399: PUSH
60400: LD_INT 1
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 2
60409: NEG
60410: PUSH
60411: LD_INT 1
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60430: LD_ADDR_VAR 0 39
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: LD_INT 0
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 1
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: LD_INT 0
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 1
60499: NEG
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: LD_INT 2
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 2
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60542: LD_ADDR_VAR 0 40
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: LD_INT 1
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: NEG
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60654: LD_ADDR_VAR 0 41
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 0
60702: PUSH
60703: LD_INT 1
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 1
60712: NEG
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: LD_INT 2
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 2
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 2
60809: NEG
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 2
60820: NEG
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 2
60832: NEG
60833: PUSH
60834: LD_INT 2
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 2
60844: NEG
60845: PUSH
60846: LD_INT 3
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 3
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 3
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 3
60887: PUSH
60888: LD_INT 2
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 3
60897: PUSH
60898: LD_INT 3
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 2
60907: PUSH
60908: LD_INT 3
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 2
60917: NEG
60918: PUSH
60919: LD_INT 1
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 3
60928: NEG
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 3
60939: NEG
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 3
60951: NEG
60952: PUSH
60953: LD_INT 2
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 3
60963: NEG
60964: PUSH
60965: LD_INT 3
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61004: LD_ADDR_VAR 0 42
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: LD_INT 0
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 0
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: LD_INT 2
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 1
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 2
61129: PUSH
61130: LD_INT 2
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: LD_INT 2
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 2
61170: NEG
61171: PUSH
61172: LD_INT 1
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 2
61182: NEG
61183: PUSH
61184: LD_INT 2
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: NEG
61195: PUSH
61196: LD_INT 3
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 1
61206: NEG
61207: PUSH
61208: LD_INT 3
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: LD_INT 3
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 3
61240: PUSH
61241: LD_INT 2
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 3
61250: PUSH
61251: LD_INT 3
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 2
61260: PUSH
61261: LD_INT 3
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: PUSH
61271: LD_INT 3
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: LD_INT 3
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: LD_INT 2
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 3
61301: NEG
61302: PUSH
61303: LD_INT 2
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: LD_INT 3
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61354: LD_ADDR_VAR 0 43
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 1
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: LD_INT 2
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 2
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 2
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 2
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: LD_INT 2
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: LD_INT 2
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 2
61531: NEG
61532: PUSH
61533: LD_INT 1
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: LD_INT 3
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 0
61555: PUSH
61556: LD_INT 3
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: LD_INT 2
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 2
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 3
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 3
61598: PUSH
61599: LD_INT 1
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: LD_INT 3
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: LD_INT 3
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: LD_INT 2
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 2
61639: NEG
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 3
61650: NEG
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 3
61661: NEG
61662: PUSH
61663: LD_INT 1
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61702: LD_ADDR_VAR 0 44
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 0
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 1
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: LD_INT 1
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: NEG
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: LD_INT 1
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: LD_INT 2
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: LD_INT 1
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 2
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 2
61816: PUSH
61817: LD_INT 1
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 2
61826: PUSH
61827: LD_INT 2
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: LD_INT 2
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 1
61846: NEG
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 2
61868: NEG
61869: PUSH
61870: LD_INT 1
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 2
61880: NEG
61881: PUSH
61882: LD_INT 2
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 2
61892: NEG
61893: PUSH
61894: LD_INT 3
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 3
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 3
61925: PUSH
61926: LD_INT 1
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 3
61935: PUSH
61936: LD_INT 2
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 3
61945: PUSH
61946: LD_INT 3
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 2
61955: PUSH
61956: LD_INT 3
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 2
61965: NEG
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 3
61976: NEG
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 3
61987: NEG
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 3
61999: NEG
62000: PUSH
62001: LD_INT 2
62003: NEG
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 3
62011: NEG
62012: PUSH
62013: LD_INT 3
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62052: LD_ADDR_VAR 0 45
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: LD_INT 1
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 1
62090: PUSH
62091: LD_INT 1
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: NEG
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 1
62121: NEG
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: LD_INT 2
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: LD_INT 2
62148: NEG
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 1
62156: PUSH
62157: LD_INT 1
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 2
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 2
62177: PUSH
62178: LD_INT 2
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: LD_INT 2
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: LD_INT 1
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 2
62218: NEG
62219: PUSH
62220: LD_INT 1
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 2
62230: NEG
62231: PUSH
62232: LD_INT 2
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 2
62242: NEG
62243: PUSH
62244: LD_INT 3
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: NEG
62255: PUSH
62256: LD_INT 3
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: LD_INT 3
62269: NEG
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: LD_INT 2
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 3
62288: PUSH
62289: LD_INT 2
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 3
62298: PUSH
62299: LD_INT 3
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 2
62308: PUSH
62309: LD_INT 3
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: LD_INT 3
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 3
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: LD_INT 2
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 3
62349: NEG
62350: PUSH
62351: LD_INT 2
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 3
62361: NEG
62362: PUSH
62363: LD_INT 3
62365: NEG
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62402: LD_ADDR_VAR 0 46
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: PUSH
62441: LD_INT 1
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: LD_INT 2
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: LD_INT 2
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: LD_INT 1
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 2
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 2
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: LD_INT 2
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: LD_INT 2
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 1
62557: NEG
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 2
62568: NEG
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 2
62579: NEG
62580: PUSH
62581: LD_INT 1
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 1
62591: NEG
62592: PUSH
62593: LD_INT 3
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: LD_INT 3
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 1
62614: PUSH
62615: LD_INT 2
62617: NEG
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 2
62625: PUSH
62626: LD_INT 1
62628: NEG
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 3
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 3
62646: PUSH
62647: LD_INT 1
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 1
62656: PUSH
62657: LD_INT 3
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: LD_INT 3
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 1
62676: NEG
62677: PUSH
62678: LD_INT 2
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 2
62687: NEG
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 3
62698: NEG
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 3
62709: NEG
62710: PUSH
62711: LD_INT 1
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62750: LD_ADDR_VAR 0 47
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: LD_INT 0
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: LD_INT 1
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 1
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 1
62788: PUSH
62789: LD_INT 1
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: LD_INT 1
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 1
62819: NEG
62820: PUSH
62821: LD_INT 1
62823: NEG
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 1
62831: NEG
62832: PUSH
62833: LD_INT 2
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: LD_INT 2
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: LD_INT 1
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 2
62865: NEG
62866: PUSH
62867: LD_INT 1
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 2
62877: NEG
62878: PUSH
62879: LD_INT 2
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62901: LD_ADDR_VAR 0 48
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 0
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: NEG
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 1
62982: NEG
62983: PUSH
62984: LD_INT 2
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: LD_INT 2
62997: NEG
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 1
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 2
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 2
63026: PUSH
63027: LD_INT 1
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63048: LD_ADDR_VAR 0 49
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: LD_INT 0
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: LD_INT 1
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: LD_INT 1
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: LD_INT 1
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 1
63106: NEG
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: NEG
63118: PUSH
63119: LD_INT 1
63121: NEG
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 1
63129: PUSH
63130: LD_INT 1
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 2
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 2
63150: PUSH
63151: LD_INT 1
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 2
63160: PUSH
63161: LD_INT 2
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 1
63170: PUSH
63171: LD_INT 2
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63192: LD_ADDR_VAR 0 50
63196: PUSH
63197: LD_INT 0
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: LD_INT 0
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: LD_INT 1
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 0
63240: PUSH
63241: LD_INT 1
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 1
63250: NEG
63251: PUSH
63252: LD_INT 0
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: LD_INT 1
63265: NEG
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 2
63273: PUSH
63274: LD_INT 1
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 2
63283: PUSH
63284: LD_INT 2
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 1
63293: PUSH
63294: LD_INT 2
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 0
63303: PUSH
63304: LD_INT 2
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 1
63313: NEG
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63336: LD_ADDR_VAR 0 51
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 1
63364: PUSH
63365: LD_INT 0
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 1
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: LD_INT 1
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 1
63405: NEG
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 1
63417: PUSH
63418: LD_INT 2
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 0
63427: PUSH
63428: LD_INT 2
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: NEG
63438: PUSH
63439: LD_INT 1
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 2
63448: NEG
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 2
63459: NEG
63460: PUSH
63461: LD_INT 1
63463: NEG
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63483: LD_ADDR_VAR 0 52
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: LD_INT 0
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 0
63500: PUSH
63501: LD_INT 1
63503: NEG
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 1
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: LD_INT 1
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 1
63552: NEG
63553: PUSH
63554: LD_INT 1
63556: NEG
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 1
63564: NEG
63565: PUSH
63566: LD_INT 2
63568: NEG
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: LD_INT 1
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 2
63587: NEG
63588: PUSH
63589: LD_INT 0
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 2
63598: NEG
63599: PUSH
63600: LD_INT 1
63602: NEG
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 2
63610: NEG
63611: PUSH
63612: LD_INT 2
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63634: LD_ADDR_VAR 0 53
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 0
63651: PUSH
63652: LD_INT 1
63654: NEG
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 1
63662: PUSH
63663: LD_INT 0
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: LD_INT 1
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: LD_INT 1
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: LD_INT 0
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: LD_INT 1
63707: NEG
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 1
63715: NEG
63716: PUSH
63717: LD_INT 2
63719: NEG
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 0
63727: PUSH
63728: LD_INT 2
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 1
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: LD_INT 0
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 2
63759: PUSH
63760: LD_INT 1
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: LD_INT 2
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 1
63779: PUSH
63780: LD_INT 2
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: LD_INT 2
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 1
63799: NEG
63800: PUSH
63801: LD_INT 1
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 2
63810: NEG
63811: PUSH
63812: LD_INT 0
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 2
63821: NEG
63822: PUSH
63823: LD_INT 1
63825: NEG
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 2
63833: NEG
63834: PUSH
63835: LD_INT 2
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63864: LD_ADDR_VAR 0 54
63868: PUSH
63869: LD_INT 0
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: LD_INT 1
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 1
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 1
63902: PUSH
63903: LD_INT 1
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: LD_INT 1
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 1
63922: NEG
63923: PUSH
63924: LD_INT 0
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 1
63933: NEG
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 1
63945: NEG
63946: PUSH
63947: LD_INT 2
63949: NEG
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 0
63957: PUSH
63958: LD_INT 2
63960: NEG
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: PUSH
63969: LD_INT 1
63971: NEG
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 2
63979: PUSH
63980: LD_INT 0
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 2
63989: PUSH
63990: LD_INT 1
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 2
63999: PUSH
64000: LD_INT 2
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 1
64009: PUSH
64010: LD_INT 2
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: LD_INT 2
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 1
64029: NEG
64030: PUSH
64031: LD_INT 1
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 2
64040: NEG
64041: PUSH
64042: LD_INT 0
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 2
64051: NEG
64052: PUSH
64053: LD_INT 1
64055: NEG
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 2
64063: NEG
64064: PUSH
64065: LD_INT 2
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64094: LD_ADDR_VAR 0 55
64098: PUSH
64099: LD_INT 0
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 0
64111: PUSH
64112: LD_INT 1
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 1
64122: PUSH
64123: LD_INT 0
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 1
64132: PUSH
64133: LD_INT 1
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 1
64152: NEG
64153: PUSH
64154: LD_INT 0
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 1
64163: NEG
64164: PUSH
64165: LD_INT 1
64167: NEG
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: LD_INT 2
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: LD_INT 2
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 1
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 2
64209: PUSH
64210: LD_INT 0
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 2
64219: PUSH
64220: LD_INT 1
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 2
64229: PUSH
64230: LD_INT 2
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: LD_INT 2
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 2
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: NEG
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 2
64270: NEG
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 2
64281: NEG
64282: PUSH
64283: LD_INT 1
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 2
64293: NEG
64294: PUSH
64295: LD_INT 2
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64324: LD_ADDR_VAR 0 56
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 1
64352: PUSH
64353: LD_INT 0
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 1
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: LD_INT 1
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 1
64393: NEG
64394: PUSH
64395: LD_INT 1
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 1
64405: NEG
64406: PUSH
64407: LD_INT 2
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 0
64417: PUSH
64418: LD_INT 2
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 1
64428: PUSH
64429: LD_INT 1
64431: NEG
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 2
64439: PUSH
64440: LD_INT 0
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 2
64449: PUSH
64450: LD_INT 1
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 2
64459: PUSH
64460: LD_INT 2
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: LD_INT 2
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: LD_INT 2
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 2
64500: NEG
64501: PUSH
64502: LD_INT 0
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 2
64511: NEG
64512: PUSH
64513: LD_INT 1
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 2
64523: NEG
64524: PUSH
64525: LD_INT 2
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64554: LD_ADDR_VAR 0 57
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 0
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 1
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 1
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 1
64612: NEG
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: LD_INT 1
64627: NEG
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: NEG
64636: PUSH
64637: LD_INT 2
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: LD_INT 2
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 1
64658: PUSH
64659: LD_INT 1
64661: NEG
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 2
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 2
64679: PUSH
64680: LD_INT 1
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 2
64689: PUSH
64690: LD_INT 2
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 1
64699: PUSH
64700: LD_INT 2
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 0
64709: PUSH
64710: LD_INT 2
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 1
64719: NEG
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 2
64730: NEG
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 2
64741: NEG
64742: PUSH
64743: LD_INT 1
64745: NEG
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 2
64753: NEG
64754: PUSH
64755: LD_INT 2
64757: NEG
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64784: LD_ADDR_VAR 0 58
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 0
64801: PUSH
64802: LD_INT 1
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 1
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 1
64842: NEG
64843: PUSH
64844: LD_INT 0
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 1
64853: NEG
64854: PUSH
64855: LD_INT 1
64857: NEG
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 1
64865: NEG
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 0
64877: PUSH
64878: LD_INT 2
64880: NEG
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: LD_INT 1
64891: NEG
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 2
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 2
64909: PUSH
64910: LD_INT 1
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 2
64919: PUSH
64920: LD_INT 2
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: LD_INT 2
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 0
64939: PUSH
64940: LD_INT 2
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 1
64949: NEG
64950: PUSH
64951: LD_INT 1
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 2
64960: NEG
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 2
64971: NEG
64972: PUSH
64973: LD_INT 1
64975: NEG
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 2
64983: NEG
64984: PUSH
64985: LD_INT 2
64987: NEG
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65014: LD_ADDR_VAR 0 59
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: LD_INT 1
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 1
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: LD_INT 0
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 1
65083: NEG
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65102: LD_ADDR_VAR 0 60
65106: PUSH
65107: LD_INT 0
65109: PUSH
65110: LD_INT 0
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: LD_INT 1
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 1
65130: PUSH
65131: LD_INT 0
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 0
65150: PUSH
65151: LD_INT 1
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 1
65160: NEG
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 1
65171: NEG
65172: PUSH
65173: LD_INT 1
65175: NEG
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65190: LD_ADDR_VAR 0 61
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: LD_INT 0
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 0
65207: PUSH
65208: LD_INT 1
65210: NEG
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 1
65218: PUSH
65219: LD_INT 0
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 1
65228: PUSH
65229: LD_INT 1
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: LD_INT 1
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 1
65248: NEG
65249: PUSH
65250: LD_INT 0
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 1
65259: NEG
65260: PUSH
65261: LD_INT 1
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65278: LD_ADDR_VAR 0 62
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 0
65295: PUSH
65296: LD_INT 1
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 1
65306: PUSH
65307: LD_INT 0
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 1
65316: PUSH
65317: LD_INT 1
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 0
65326: PUSH
65327: LD_INT 1
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 1
65336: NEG
65337: PUSH
65338: LD_INT 0
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 1
65347: NEG
65348: PUSH
65349: LD_INT 1
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65366: LD_ADDR_VAR 0 63
65370: PUSH
65371: LD_INT 0
65373: PUSH
65374: LD_INT 0
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 0
65383: PUSH
65384: LD_INT 1
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 1
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 1
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 0
65414: PUSH
65415: LD_INT 1
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 1
65424: NEG
65425: PUSH
65426: LD_INT 0
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: NEG
65436: PUSH
65437: LD_INT 1
65439: NEG
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65454: LD_ADDR_VAR 0 64
65458: PUSH
65459: LD_INT 0
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: LD_INT 1
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 1
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 1
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 0
65502: PUSH
65503: LD_INT 1
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 1
65512: NEG
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 1
65523: NEG
65524: PUSH
65525: LD_INT 1
65527: NEG
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: ST_TO_ADDR
// end ; 1 :
65542: GO 71439
65544: LD_INT 1
65546: DOUBLE
65547: EQUAL
65548: IFTRUE 65552
65550: GO 68175
65552: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65553: LD_ADDR_VAR 0 11
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: LD_INT 3
65564: NEG
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: LD_INT 3
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: PUSH
65584: LD_INT 2
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: LIST
65596: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65597: LD_ADDR_VAR 0 12
65601: PUSH
65602: LD_INT 2
65604: PUSH
65605: LD_INT 1
65607: NEG
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 3
65615: PUSH
65616: LD_INT 0
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 3
65625: PUSH
65626: LD_INT 1
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: LIST
65637: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65638: LD_ADDR_VAR 0 13
65642: PUSH
65643: LD_INT 3
65645: PUSH
65646: LD_INT 2
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 3
65655: PUSH
65656: LD_INT 3
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 2
65665: PUSH
65666: LD_INT 3
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: LIST
65677: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65678: LD_ADDR_VAR 0 14
65682: PUSH
65683: LD_INT 1
65685: PUSH
65686: LD_INT 3
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: LD_INT 3
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: NEG
65706: PUSH
65707: LD_INT 2
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: LIST
65718: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65719: LD_ADDR_VAR 0 15
65723: PUSH
65724: LD_INT 2
65726: NEG
65727: PUSH
65728: LD_INT 1
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 3
65737: NEG
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 3
65748: NEG
65749: PUSH
65750: LD_INT 1
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: LIST
65762: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65763: LD_ADDR_VAR 0 16
65767: PUSH
65768: LD_INT 2
65770: NEG
65771: PUSH
65772: LD_INT 3
65774: NEG
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 3
65782: NEG
65783: PUSH
65784: LD_INT 2
65786: NEG
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 3
65794: NEG
65795: PUSH
65796: LD_INT 3
65798: NEG
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: LIST
65808: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65809: LD_ADDR_VAR 0 17
65813: PUSH
65814: LD_INT 1
65816: NEG
65817: PUSH
65818: LD_INT 3
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 0
65828: PUSH
65829: LD_INT 3
65831: NEG
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 1
65839: PUSH
65840: LD_INT 2
65842: NEG
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: LIST
65852: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65853: LD_ADDR_VAR 0 18
65857: PUSH
65858: LD_INT 2
65860: PUSH
65861: LD_INT 1
65863: NEG
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 3
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 3
65881: PUSH
65882: LD_INT 1
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: LIST
65893: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65894: LD_ADDR_VAR 0 19
65898: PUSH
65899: LD_INT 3
65901: PUSH
65902: LD_INT 2
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 3
65911: PUSH
65912: LD_INT 3
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 2
65921: PUSH
65922: LD_INT 3
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: LIST
65933: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65934: LD_ADDR_VAR 0 20
65938: PUSH
65939: LD_INT 1
65941: PUSH
65942: LD_INT 3
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 0
65951: PUSH
65952: LD_INT 3
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 1
65961: NEG
65962: PUSH
65963: LD_INT 2
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: LIST
65974: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65975: LD_ADDR_VAR 0 21
65979: PUSH
65980: LD_INT 2
65982: NEG
65983: PUSH
65984: LD_INT 1
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 3
65993: NEG
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 3
66004: NEG
66005: PUSH
66006: LD_INT 1
66008: NEG
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: LIST
66018: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66019: LD_ADDR_VAR 0 22
66023: PUSH
66024: LD_INT 2
66026: NEG
66027: PUSH
66028: LD_INT 3
66030: NEG
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 3
66038: NEG
66039: PUSH
66040: LD_INT 2
66042: NEG
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 3
66050: NEG
66051: PUSH
66052: LD_INT 3
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: LIST
66064: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66065: LD_ADDR_VAR 0 23
66069: PUSH
66070: LD_INT 0
66072: PUSH
66073: LD_INT 3
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 1
66083: NEG
66084: PUSH
66085: LD_INT 4
66087: NEG
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 1
66095: PUSH
66096: LD_INT 3
66098: NEG
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: LIST
66108: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66109: LD_ADDR_VAR 0 24
66113: PUSH
66114: LD_INT 3
66116: PUSH
66117: LD_INT 0
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 3
66126: PUSH
66127: LD_INT 1
66129: NEG
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 4
66137: PUSH
66138: LD_INT 1
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: LIST
66149: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66150: LD_ADDR_VAR 0 25
66154: PUSH
66155: LD_INT 3
66157: PUSH
66158: LD_INT 3
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 4
66167: PUSH
66168: LD_INT 3
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 3
66177: PUSH
66178: LD_INT 4
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: LIST
66189: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66190: LD_ADDR_VAR 0 26
66194: PUSH
66195: LD_INT 0
66197: PUSH
66198: LD_INT 3
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 1
66207: PUSH
66208: LD_INT 4
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 1
66217: NEG
66218: PUSH
66219: LD_INT 3
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: LIST
66230: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66231: LD_ADDR_VAR 0 27
66235: PUSH
66236: LD_INT 3
66238: NEG
66239: PUSH
66240: LD_INT 0
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 3
66249: NEG
66250: PUSH
66251: LD_INT 1
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 4
66260: NEG
66261: PUSH
66262: LD_INT 1
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: LIST
66274: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66275: LD_ADDR_VAR 0 28
66279: PUSH
66280: LD_INT 3
66282: NEG
66283: PUSH
66284: LD_INT 3
66286: NEG
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 3
66294: NEG
66295: PUSH
66296: LD_INT 4
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 4
66306: NEG
66307: PUSH
66308: LD_INT 3
66310: NEG
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: LIST
66320: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66321: LD_ADDR_VAR 0 29
66325: PUSH
66326: LD_INT 1
66328: NEG
66329: PUSH
66330: LD_INT 3
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 0
66340: PUSH
66341: LD_INT 3
66343: NEG
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 1
66351: PUSH
66352: LD_INT 2
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 1
66362: NEG
66363: PUSH
66364: LD_INT 4
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 0
66374: PUSH
66375: LD_INT 4
66377: NEG
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 1
66385: PUSH
66386: LD_INT 3
66388: NEG
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 1
66396: NEG
66397: PUSH
66398: LD_INT 5
66400: NEG
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 0
66408: PUSH
66409: LD_INT 5
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 1
66419: PUSH
66420: LD_INT 4
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 1
66430: NEG
66431: PUSH
66432: LD_INT 6
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 0
66442: PUSH
66443: LD_INT 6
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 1
66453: PUSH
66454: LD_INT 5
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66476: LD_ADDR_VAR 0 30
66480: PUSH
66481: LD_INT 2
66483: PUSH
66484: LD_INT 1
66486: NEG
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 3
66494: PUSH
66495: LD_INT 0
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 3
66504: PUSH
66505: LD_INT 1
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 3
66514: PUSH
66515: LD_INT 1
66517: NEG
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 4
66525: PUSH
66526: LD_INT 0
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 4
66535: PUSH
66536: LD_INT 1
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 4
66545: PUSH
66546: LD_INT 1
66548: NEG
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 5
66556: PUSH
66557: LD_INT 0
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 5
66566: PUSH
66567: LD_INT 1
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 5
66576: PUSH
66577: LD_INT 1
66579: NEG
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 6
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 6
66597: PUSH
66598: LD_INT 1
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66619: LD_ADDR_VAR 0 31
66623: PUSH
66624: LD_INT 3
66626: PUSH
66627: LD_INT 2
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 3
66636: PUSH
66637: LD_INT 3
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 2
66646: PUSH
66647: LD_INT 3
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 4
66656: PUSH
66657: LD_INT 3
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 4
66666: PUSH
66667: LD_INT 4
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 3
66676: PUSH
66677: LD_INT 4
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 5
66686: PUSH
66687: LD_INT 4
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 5
66696: PUSH
66697: LD_INT 5
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 4
66706: PUSH
66707: LD_INT 5
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 6
66716: PUSH
66717: LD_INT 5
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 6
66726: PUSH
66727: LD_INT 6
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 5
66736: PUSH
66737: LD_INT 6
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66758: LD_ADDR_VAR 0 32
66762: PUSH
66763: LD_INT 1
66765: PUSH
66766: LD_INT 3
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 0
66775: PUSH
66776: LD_INT 3
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 1
66785: NEG
66786: PUSH
66787: LD_INT 2
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 1
66796: PUSH
66797: LD_INT 4
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 0
66806: PUSH
66807: LD_INT 4
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 1
66816: NEG
66817: PUSH
66818: LD_INT 3
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 1
66827: PUSH
66828: LD_INT 5
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 0
66837: PUSH
66838: LD_INT 5
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 1
66847: NEG
66848: PUSH
66849: LD_INT 4
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 1
66858: PUSH
66859: LD_INT 6
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 0
66868: PUSH
66869: LD_INT 6
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 1
66878: NEG
66879: PUSH
66880: LD_INT 5
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66901: LD_ADDR_VAR 0 33
66905: PUSH
66906: LD_INT 2
66908: NEG
66909: PUSH
66910: LD_INT 1
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 3
66919: NEG
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 3
66930: NEG
66931: PUSH
66932: LD_INT 1
66934: NEG
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 3
66942: NEG
66943: PUSH
66944: LD_INT 1
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 4
66953: NEG
66954: PUSH
66955: LD_INT 0
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 4
66964: NEG
66965: PUSH
66966: LD_INT 1
66968: NEG
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 4
66976: NEG
66977: PUSH
66978: LD_INT 1
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 5
66987: NEG
66988: PUSH
66989: LD_INT 0
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 5
66998: NEG
66999: PUSH
67000: LD_INT 1
67002: NEG
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 5
67010: NEG
67011: PUSH
67012: LD_INT 1
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 6
67021: NEG
67022: PUSH
67023: LD_INT 0
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 6
67032: NEG
67033: PUSH
67034: LD_INT 1
67036: NEG
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67056: LD_ADDR_VAR 0 34
67060: PUSH
67061: LD_INT 2
67063: NEG
67064: PUSH
67065: LD_INT 3
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 3
67075: NEG
67076: PUSH
67077: LD_INT 2
67079: NEG
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 3
67087: NEG
67088: PUSH
67089: LD_INT 3
67091: NEG
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 3
67099: NEG
67100: PUSH
67101: LD_INT 4
67103: NEG
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 4
67111: NEG
67112: PUSH
67113: LD_INT 3
67115: NEG
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 4
67123: NEG
67124: PUSH
67125: LD_INT 4
67127: NEG
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 4
67135: NEG
67136: PUSH
67137: LD_INT 5
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 5
67147: NEG
67148: PUSH
67149: LD_INT 4
67151: NEG
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 5
67159: NEG
67160: PUSH
67161: LD_INT 5
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 5
67171: NEG
67172: PUSH
67173: LD_INT 6
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 6
67183: NEG
67184: PUSH
67185: LD_INT 5
67187: NEG
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 6
67195: NEG
67196: PUSH
67197: LD_INT 6
67199: NEG
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67219: LD_ADDR_VAR 0 41
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: LD_INT 2
67229: NEG
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 1
67237: NEG
67238: PUSH
67239: LD_INT 3
67241: NEG
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 1
67249: PUSH
67250: LD_INT 2
67252: NEG
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: LIST
67262: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67263: LD_ADDR_VAR 0 42
67267: PUSH
67268: LD_INT 2
67270: PUSH
67271: LD_INT 0
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 2
67280: PUSH
67281: LD_INT 1
67283: NEG
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 3
67291: PUSH
67292: LD_INT 1
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: LIST
67303: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67304: LD_ADDR_VAR 0 43
67308: PUSH
67309: LD_INT 2
67311: PUSH
67312: LD_INT 2
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 3
67321: PUSH
67322: LD_INT 2
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 2
67331: PUSH
67332: LD_INT 3
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: LIST
67343: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67344: LD_ADDR_VAR 0 44
67348: PUSH
67349: LD_INT 0
67351: PUSH
67352: LD_INT 2
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 1
67361: PUSH
67362: LD_INT 3
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 1
67371: NEG
67372: PUSH
67373: LD_INT 2
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: LIST
67384: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67385: LD_ADDR_VAR 0 45
67389: PUSH
67390: LD_INT 2
67392: NEG
67393: PUSH
67394: LD_INT 0
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 2
67403: NEG
67404: PUSH
67405: LD_INT 1
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 3
67414: NEG
67415: PUSH
67416: LD_INT 1
67418: NEG
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: LIST
67428: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67429: LD_ADDR_VAR 0 46
67433: PUSH
67434: LD_INT 2
67436: NEG
67437: PUSH
67438: LD_INT 2
67440: NEG
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 2
67448: NEG
67449: PUSH
67450: LD_INT 3
67452: NEG
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 3
67460: NEG
67461: PUSH
67462: LD_INT 2
67464: NEG
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: LIST
67474: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67475: LD_ADDR_VAR 0 47
67479: PUSH
67480: LD_INT 2
67482: NEG
67483: PUSH
67484: LD_INT 3
67486: NEG
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 1
67494: NEG
67495: PUSH
67496: LD_INT 3
67498: NEG
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67508: LD_ADDR_VAR 0 48
67512: PUSH
67513: LD_INT 1
67515: PUSH
67516: LD_INT 2
67518: NEG
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 2
67526: PUSH
67527: LD_INT 1
67529: NEG
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67539: LD_ADDR_VAR 0 49
67543: PUSH
67544: LD_INT 3
67546: PUSH
67547: LD_INT 1
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 3
67556: PUSH
67557: LD_INT 2
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67568: LD_ADDR_VAR 0 50
67572: PUSH
67573: LD_INT 2
67575: PUSH
67576: LD_INT 3
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 1
67585: PUSH
67586: LD_INT 3
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67597: LD_ADDR_VAR 0 51
67601: PUSH
67602: LD_INT 1
67604: NEG
67605: PUSH
67606: LD_INT 2
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 2
67615: NEG
67616: PUSH
67617: LD_INT 1
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67628: LD_ADDR_VAR 0 52
67632: PUSH
67633: LD_INT 3
67635: NEG
67636: PUSH
67637: LD_INT 1
67639: NEG
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 3
67647: NEG
67648: PUSH
67649: LD_INT 2
67651: NEG
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67661: LD_ADDR_VAR 0 53
67665: PUSH
67666: LD_INT 1
67668: NEG
67669: PUSH
67670: LD_INT 3
67672: NEG
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 0
67680: PUSH
67681: LD_INT 3
67683: NEG
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 1
67691: PUSH
67692: LD_INT 2
67694: NEG
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: LIST
67704: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67705: LD_ADDR_VAR 0 54
67709: PUSH
67710: LD_INT 2
67712: PUSH
67713: LD_INT 1
67715: NEG
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 3
67723: PUSH
67724: LD_INT 0
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 3
67733: PUSH
67734: LD_INT 1
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: LIST
67745: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67746: LD_ADDR_VAR 0 55
67750: PUSH
67751: LD_INT 3
67753: PUSH
67754: LD_INT 2
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 3
67763: PUSH
67764: LD_INT 3
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 2
67773: PUSH
67774: LD_INT 3
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: LIST
67785: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67786: LD_ADDR_VAR 0 56
67790: PUSH
67791: LD_INT 1
67793: PUSH
67794: LD_INT 3
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 0
67803: PUSH
67804: LD_INT 3
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 1
67813: NEG
67814: PUSH
67815: LD_INT 2
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: LIST
67826: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67827: LD_ADDR_VAR 0 57
67831: PUSH
67832: LD_INT 2
67834: NEG
67835: PUSH
67836: LD_INT 1
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 3
67845: NEG
67846: PUSH
67847: LD_INT 0
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 3
67856: NEG
67857: PUSH
67858: LD_INT 1
67860: NEG
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: LIST
67870: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67871: LD_ADDR_VAR 0 58
67875: PUSH
67876: LD_INT 2
67878: NEG
67879: PUSH
67880: LD_INT 3
67882: NEG
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 3
67890: NEG
67891: PUSH
67892: LD_INT 2
67894: NEG
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 3
67902: NEG
67903: PUSH
67904: LD_INT 3
67906: NEG
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: LIST
67916: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67917: LD_ADDR_VAR 0 59
67921: PUSH
67922: LD_INT 1
67924: NEG
67925: PUSH
67926: LD_INT 2
67928: NEG
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: LD_INT 0
67936: PUSH
67937: LD_INT 2
67939: NEG
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 1
67947: PUSH
67948: LD_INT 1
67950: NEG
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: LIST
67960: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67961: LD_ADDR_VAR 0 60
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: LD_INT 1
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 2
67979: PUSH
67980: LD_INT 0
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 2
67989: PUSH
67990: LD_INT 1
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: LIST
68001: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68002: LD_ADDR_VAR 0 61
68006: PUSH
68007: LD_INT 2
68009: PUSH
68010: LD_INT 1
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 2
68019: PUSH
68020: LD_INT 2
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 1
68029: PUSH
68030: LD_INT 2
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: LIST
68041: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68042: LD_ADDR_VAR 0 62
68046: PUSH
68047: LD_INT 1
68049: PUSH
68050: LD_INT 2
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 0
68059: PUSH
68060: LD_INT 2
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 1
68069: NEG
68070: PUSH
68071: LD_INT 1
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: LIST
68082: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68083: LD_ADDR_VAR 0 63
68087: PUSH
68088: LD_INT 1
68090: NEG
68091: PUSH
68092: LD_INT 1
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 2
68101: NEG
68102: PUSH
68103: LD_INT 0
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 2
68112: NEG
68113: PUSH
68114: LD_INT 1
68116: NEG
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: LIST
68126: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68127: LD_ADDR_VAR 0 64
68131: PUSH
68132: LD_INT 1
68134: NEG
68135: PUSH
68136: LD_INT 2
68138: NEG
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 2
68146: NEG
68147: PUSH
68148: LD_INT 1
68150: NEG
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 2
68158: NEG
68159: PUSH
68160: LD_INT 2
68162: NEG
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: LIST
68172: ST_TO_ADDR
// end ; 2 :
68173: GO 71439
68175: LD_INT 2
68177: DOUBLE
68178: EQUAL
68179: IFTRUE 68183
68181: GO 71438
68183: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68184: LD_ADDR_VAR 0 29
68188: PUSH
68189: LD_INT 4
68191: PUSH
68192: LD_INT 0
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 4
68201: PUSH
68202: LD_INT 1
68204: NEG
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 5
68212: PUSH
68213: LD_INT 0
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 5
68222: PUSH
68223: LD_INT 1
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 4
68232: PUSH
68233: LD_INT 1
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 3
68242: PUSH
68243: LD_INT 0
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 3
68252: PUSH
68253: LD_INT 1
68255: NEG
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 3
68263: PUSH
68264: LD_INT 2
68266: NEG
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 5
68274: PUSH
68275: LD_INT 2
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 3
68284: PUSH
68285: LD_INT 3
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 3
68294: PUSH
68295: LD_INT 2
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 4
68304: PUSH
68305: LD_INT 3
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 4
68314: PUSH
68315: LD_INT 4
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 3
68324: PUSH
68325: LD_INT 4
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 2
68334: PUSH
68335: LD_INT 3
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 2
68344: PUSH
68345: LD_INT 2
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 4
68354: PUSH
68355: LD_INT 2
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 2
68364: PUSH
68365: LD_INT 4
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 0
68374: PUSH
68375: LD_INT 4
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 0
68384: PUSH
68385: LD_INT 3
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 1
68394: PUSH
68395: LD_INT 4
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 1
68404: PUSH
68405: LD_INT 5
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 0
68414: PUSH
68415: LD_INT 5
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 1
68424: NEG
68425: PUSH
68426: LD_INT 4
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 1
68435: NEG
68436: PUSH
68437: LD_INT 3
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 2
68446: PUSH
68447: LD_INT 5
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 2
68456: NEG
68457: PUSH
68458: LD_INT 3
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 3
68467: NEG
68468: PUSH
68469: LD_INT 0
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 3
68478: NEG
68479: PUSH
68480: LD_INT 1
68482: NEG
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 2
68490: NEG
68491: PUSH
68492: LD_INT 0
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 2
68501: NEG
68502: PUSH
68503: LD_INT 1
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 3
68512: NEG
68513: PUSH
68514: LD_INT 1
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 4
68523: NEG
68524: PUSH
68525: LD_INT 0
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 4
68534: NEG
68535: PUSH
68536: LD_INT 1
68538: NEG
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 4
68546: NEG
68547: PUSH
68548: LD_INT 2
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 2
68558: NEG
68559: PUSH
68560: LD_INT 2
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 4
68569: NEG
68570: PUSH
68571: LD_INT 4
68573: NEG
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 4
68581: NEG
68582: PUSH
68583: LD_INT 5
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 3
68593: NEG
68594: PUSH
68595: LD_INT 4
68597: NEG
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 3
68605: NEG
68606: PUSH
68607: LD_INT 3
68609: NEG
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: LD_INT 4
68617: NEG
68618: PUSH
68619: LD_INT 3
68621: NEG
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 5
68629: NEG
68630: PUSH
68631: LD_INT 4
68633: NEG
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 5
68641: NEG
68642: PUSH
68643: LD_INT 5
68645: NEG
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 3
68653: NEG
68654: PUSH
68655: LD_INT 5
68657: NEG
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 5
68665: NEG
68666: PUSH
68667: LD_INT 3
68669: NEG
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68722: LD_ADDR_VAR 0 30
68726: PUSH
68727: LD_INT 4
68729: PUSH
68730: LD_INT 4
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 4
68739: PUSH
68740: LD_INT 3
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 5
68749: PUSH
68750: LD_INT 4
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 5
68759: PUSH
68760: LD_INT 5
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 4
68769: PUSH
68770: LD_INT 5
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 3
68779: PUSH
68780: LD_INT 4
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 3
68789: PUSH
68790: LD_INT 3
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 5
68799: PUSH
68800: LD_INT 3
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 3
68809: PUSH
68810: LD_INT 5
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 0
68819: PUSH
68820: LD_INT 3
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 0
68829: PUSH
68830: LD_INT 2
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 1
68839: PUSH
68840: LD_INT 3
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 1
68849: PUSH
68850: LD_INT 4
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 0
68859: PUSH
68860: LD_INT 4
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 1
68869: NEG
68870: PUSH
68871: LD_INT 3
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 1
68880: NEG
68881: PUSH
68882: LD_INT 2
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 2
68891: PUSH
68892: LD_INT 4
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 2
68901: NEG
68902: PUSH
68903: LD_INT 2
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 4
68912: NEG
68913: PUSH
68914: LD_INT 0
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 4
68923: NEG
68924: PUSH
68925: LD_INT 1
68927: NEG
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 3
68935: NEG
68936: PUSH
68937: LD_INT 0
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 3
68946: NEG
68947: PUSH
68948: LD_INT 1
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 4
68957: NEG
68958: PUSH
68959: LD_INT 1
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 5
68968: NEG
68969: PUSH
68970: LD_INT 0
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 5
68979: NEG
68980: PUSH
68981: LD_INT 1
68983: NEG
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 5
68991: NEG
68992: PUSH
68993: LD_INT 2
68995: NEG
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 3
69003: NEG
69004: PUSH
69005: LD_INT 2
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: LD_INT 3
69014: NEG
69015: PUSH
69016: LD_INT 3
69018: NEG
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 3
69026: NEG
69027: PUSH
69028: LD_INT 4
69030: NEG
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 2
69038: NEG
69039: PUSH
69040: LD_INT 3
69042: NEG
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 2
69050: NEG
69051: PUSH
69052: LD_INT 2
69054: NEG
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 3
69062: NEG
69063: PUSH
69064: LD_INT 2
69066: NEG
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 4
69074: NEG
69075: PUSH
69076: LD_INT 3
69078: NEG
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 4
69086: NEG
69087: PUSH
69088: LD_INT 4
69090: NEG
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 2
69098: NEG
69099: PUSH
69100: LD_INT 4
69102: NEG
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 4
69110: NEG
69111: PUSH
69112: LD_INT 2
69114: NEG
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 0
69122: PUSH
69123: LD_INT 4
69125: NEG
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 0
69133: PUSH
69134: LD_INT 5
69136: NEG
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 1
69144: PUSH
69145: LD_INT 4
69147: NEG
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 1
69155: PUSH
69156: LD_INT 3
69158: NEG
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 0
69166: PUSH
69167: LD_INT 3
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 1
69177: NEG
69178: PUSH
69179: LD_INT 4
69181: NEG
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 1
69189: NEG
69190: PUSH
69191: LD_INT 5
69193: NEG
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 2
69201: PUSH
69202: LD_INT 3
69204: NEG
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 2
69212: NEG
69213: PUSH
69214: LD_INT 5
69216: NEG
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69269: LD_ADDR_VAR 0 31
69273: PUSH
69274: LD_INT 0
69276: PUSH
69277: LD_INT 4
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 0
69286: PUSH
69287: LD_INT 3
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 1
69296: PUSH
69297: LD_INT 4
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 1
69306: PUSH
69307: LD_INT 5
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 0
69316: PUSH
69317: LD_INT 5
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 1
69326: NEG
69327: PUSH
69328: LD_INT 4
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 1
69337: NEG
69338: PUSH
69339: LD_INT 3
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 2
69348: PUSH
69349: LD_INT 5
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 2
69358: NEG
69359: PUSH
69360: LD_INT 3
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 3
69369: NEG
69370: PUSH
69371: LD_INT 0
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 3
69380: NEG
69381: PUSH
69382: LD_INT 1
69384: NEG
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 2
69392: NEG
69393: PUSH
69394: LD_INT 0
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 2
69403: NEG
69404: PUSH
69405: LD_INT 1
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 3
69414: NEG
69415: PUSH
69416: LD_INT 1
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 4
69425: NEG
69426: PUSH
69427: LD_INT 0
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 4
69436: NEG
69437: PUSH
69438: LD_INT 1
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 4
69448: NEG
69449: PUSH
69450: LD_INT 2
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 2
69460: NEG
69461: PUSH
69462: LD_INT 2
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: LD_INT 4
69471: NEG
69472: PUSH
69473: LD_INT 4
69475: NEG
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: PUSH
69481: LD_INT 4
69483: NEG
69484: PUSH
69485: LD_INT 5
69487: NEG
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 3
69495: NEG
69496: PUSH
69497: LD_INT 4
69499: NEG
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 3
69507: NEG
69508: PUSH
69509: LD_INT 3
69511: NEG
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 4
69519: NEG
69520: PUSH
69521: LD_INT 3
69523: NEG
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 5
69531: NEG
69532: PUSH
69533: LD_INT 4
69535: NEG
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 5
69543: NEG
69544: PUSH
69545: LD_INT 5
69547: NEG
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 3
69555: NEG
69556: PUSH
69557: LD_INT 5
69559: NEG
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 5
69567: NEG
69568: PUSH
69569: LD_INT 3
69571: NEG
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 0
69579: PUSH
69580: LD_INT 3
69582: NEG
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 0
69590: PUSH
69591: LD_INT 4
69593: NEG
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 1
69601: PUSH
69602: LD_INT 3
69604: NEG
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 1
69612: PUSH
69613: LD_INT 2
69615: NEG
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: PUSH
69621: LD_INT 0
69623: PUSH
69624: LD_INT 2
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 1
69634: NEG
69635: PUSH
69636: LD_INT 3
69638: NEG
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 1
69646: NEG
69647: PUSH
69648: LD_INT 4
69650: NEG
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 2
69658: PUSH
69659: LD_INT 2
69661: NEG
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 2
69669: NEG
69670: PUSH
69671: LD_INT 4
69673: NEG
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 4
69681: PUSH
69682: LD_INT 0
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 4
69691: PUSH
69692: LD_INT 1
69694: NEG
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 5
69702: PUSH
69703: LD_INT 0
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 5
69712: PUSH
69713: LD_INT 1
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 4
69722: PUSH
69723: LD_INT 1
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 3
69732: PUSH
69733: LD_INT 0
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 3
69742: PUSH
69743: LD_INT 1
69745: NEG
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 3
69753: PUSH
69754: LD_INT 2
69756: NEG
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 5
69764: PUSH
69765: LD_INT 2
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69819: LD_ADDR_VAR 0 32
69823: PUSH
69824: LD_INT 4
69826: NEG
69827: PUSH
69828: LD_INT 0
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 4
69837: NEG
69838: PUSH
69839: LD_INT 1
69841: NEG
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 3
69849: NEG
69850: PUSH
69851: LD_INT 0
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 3
69860: NEG
69861: PUSH
69862: LD_INT 1
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 4
69871: NEG
69872: PUSH
69873: LD_INT 1
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 5
69882: NEG
69883: PUSH
69884: LD_INT 0
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 5
69893: NEG
69894: PUSH
69895: LD_INT 1
69897: NEG
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 5
69905: NEG
69906: PUSH
69907: LD_INT 2
69909: NEG
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 3
69917: NEG
69918: PUSH
69919: LD_INT 2
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 3
69928: NEG
69929: PUSH
69930: LD_INT 3
69932: NEG
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 3
69940: NEG
69941: PUSH
69942: LD_INT 4
69944: NEG
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 2
69952: NEG
69953: PUSH
69954: LD_INT 3
69956: NEG
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 2
69964: NEG
69965: PUSH
69966: LD_INT 2
69968: NEG
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 3
69976: NEG
69977: PUSH
69978: LD_INT 2
69980: NEG
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 4
69988: NEG
69989: PUSH
69990: LD_INT 3
69992: NEG
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 4
70000: NEG
70001: PUSH
70002: LD_INT 4
70004: NEG
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 2
70012: NEG
70013: PUSH
70014: LD_INT 4
70016: NEG
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 4
70024: NEG
70025: PUSH
70026: LD_INT 2
70028: NEG
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 0
70036: PUSH
70037: LD_INT 4
70039: NEG
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 0
70047: PUSH
70048: LD_INT 5
70050: NEG
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 1
70058: PUSH
70059: LD_INT 4
70061: NEG
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 1
70069: PUSH
70070: LD_INT 3
70072: NEG
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 0
70080: PUSH
70081: LD_INT 3
70083: NEG
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 1
70091: NEG
70092: PUSH
70093: LD_INT 4
70095: NEG
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 1
70103: NEG
70104: PUSH
70105: LD_INT 5
70107: NEG
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 2
70115: PUSH
70116: LD_INT 3
70118: NEG
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 2
70126: NEG
70127: PUSH
70128: LD_INT 5
70130: NEG
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 3
70138: PUSH
70139: LD_INT 0
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 3
70148: PUSH
70149: LD_INT 1
70151: NEG
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 4
70159: PUSH
70160: LD_INT 0
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 4
70169: PUSH
70170: LD_INT 1
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 3
70179: PUSH
70180: LD_INT 1
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 2
70189: PUSH
70190: LD_INT 0
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 2
70199: PUSH
70200: LD_INT 1
70202: NEG
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 2
70210: PUSH
70211: LD_INT 2
70213: NEG
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 4
70221: PUSH
70222: LD_INT 2
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 4
70231: PUSH
70232: LD_INT 4
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 4
70241: PUSH
70242: LD_INT 3
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 5
70251: PUSH
70252: LD_INT 4
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 5
70261: PUSH
70262: LD_INT 5
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: LD_INT 4
70271: PUSH
70272: LD_INT 5
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 3
70281: PUSH
70282: LD_INT 4
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 3
70291: PUSH
70292: LD_INT 3
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 5
70301: PUSH
70302: LD_INT 3
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 3
70311: PUSH
70312: LD_INT 5
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70366: LD_ADDR_VAR 0 33
70370: PUSH
70371: LD_INT 4
70373: NEG
70374: PUSH
70375: LD_INT 4
70377: NEG
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 4
70385: NEG
70386: PUSH
70387: LD_INT 5
70389: NEG
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 3
70397: NEG
70398: PUSH
70399: LD_INT 4
70401: NEG
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 3
70409: NEG
70410: PUSH
70411: LD_INT 3
70413: NEG
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 4
70421: NEG
70422: PUSH
70423: LD_INT 3
70425: NEG
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 5
70433: NEG
70434: PUSH
70435: LD_INT 4
70437: NEG
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 5
70445: NEG
70446: PUSH
70447: LD_INT 5
70449: NEG
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 3
70457: NEG
70458: PUSH
70459: LD_INT 5
70461: NEG
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 5
70469: NEG
70470: PUSH
70471: LD_INT 3
70473: NEG
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 0
70481: PUSH
70482: LD_INT 3
70484: NEG
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 0
70492: PUSH
70493: LD_INT 4
70495: NEG
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 1
70503: PUSH
70504: LD_INT 3
70506: NEG
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 1
70514: PUSH
70515: LD_INT 2
70517: NEG
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 0
70525: PUSH
70526: LD_INT 2
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 1
70536: NEG
70537: PUSH
70538: LD_INT 3
70540: NEG
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 1
70548: NEG
70549: PUSH
70550: LD_INT 4
70552: NEG
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 2
70560: PUSH
70561: LD_INT 2
70563: NEG
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PUSH
70569: LD_INT 2
70571: NEG
70572: PUSH
70573: LD_INT 4
70575: NEG
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 4
70583: PUSH
70584: LD_INT 0
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 4
70593: PUSH
70594: LD_INT 1
70596: NEG
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 5
70604: PUSH
70605: LD_INT 0
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 5
70614: PUSH
70615: LD_INT 1
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 4
70624: PUSH
70625: LD_INT 1
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 3
70634: PUSH
70635: LD_INT 0
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 3
70644: PUSH
70645: LD_INT 1
70647: NEG
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: LD_INT 3
70655: PUSH
70656: LD_INT 2
70658: NEG
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: PUSH
70664: LD_INT 5
70666: PUSH
70667: LD_INT 2
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 3
70676: PUSH
70677: LD_INT 3
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: LD_INT 3
70686: PUSH
70687: LD_INT 2
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 4
70696: PUSH
70697: LD_INT 3
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: LD_INT 4
70706: PUSH
70707: LD_INT 4
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: LD_INT 3
70716: PUSH
70717: LD_INT 4
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 2
70726: PUSH
70727: LD_INT 3
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 2
70736: PUSH
70737: LD_INT 2
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 4
70746: PUSH
70747: LD_INT 2
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 2
70756: PUSH
70757: LD_INT 4
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 0
70766: PUSH
70767: LD_INT 4
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 0
70776: PUSH
70777: LD_INT 3
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 1
70786: PUSH
70787: LD_INT 4
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 1
70796: PUSH
70797: LD_INT 5
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: LD_INT 0
70806: PUSH
70807: LD_INT 5
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 1
70816: NEG
70817: PUSH
70818: LD_INT 4
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: LD_INT 1
70827: NEG
70828: PUSH
70829: LD_INT 3
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: PUSH
70836: LD_INT 2
70838: PUSH
70839: LD_INT 5
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: LD_INT 2
70848: NEG
70849: PUSH
70850: LD_INT 3
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70904: LD_ADDR_VAR 0 34
70908: PUSH
70909: LD_INT 0
70911: PUSH
70912: LD_INT 4
70914: NEG
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 0
70922: PUSH
70923: LD_INT 5
70925: NEG
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: LD_INT 1
70933: PUSH
70934: LD_INT 4
70936: NEG
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 1
70944: PUSH
70945: LD_INT 3
70947: NEG
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 0
70955: PUSH
70956: LD_INT 3
70958: NEG
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 1
70966: NEG
70967: PUSH
70968: LD_INT 4
70970: NEG
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 1
70978: NEG
70979: PUSH
70980: LD_INT 5
70982: NEG
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 2
70990: PUSH
70991: LD_INT 3
70993: NEG
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 2
71001: NEG
71002: PUSH
71003: LD_INT 5
71005: NEG
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 3
71013: PUSH
71014: LD_INT 0
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 3
71023: PUSH
71024: LD_INT 1
71026: NEG
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 4
71034: PUSH
71035: LD_INT 0
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 4
71044: PUSH
71045: LD_INT 1
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 3
71054: PUSH
71055: LD_INT 1
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 2
71064: PUSH
71065: LD_INT 0
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 2
71074: PUSH
71075: LD_INT 1
71077: NEG
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 2
71085: PUSH
71086: LD_INT 2
71088: NEG
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 4
71096: PUSH
71097: LD_INT 2
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 4
71106: PUSH
71107: LD_INT 4
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 4
71116: PUSH
71117: LD_INT 3
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 5
71126: PUSH
71127: LD_INT 4
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 5
71136: PUSH
71137: LD_INT 5
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 4
71146: PUSH
71147: LD_INT 5
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 3
71156: PUSH
71157: LD_INT 4
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 3
71166: PUSH
71167: LD_INT 3
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 5
71176: PUSH
71177: LD_INT 3
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 3
71186: PUSH
71187: LD_INT 5
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 0
71196: PUSH
71197: LD_INT 3
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 0
71206: PUSH
71207: LD_INT 2
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 1
71216: PUSH
71217: LD_INT 3
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 1
71226: PUSH
71227: LD_INT 4
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 0
71236: PUSH
71237: LD_INT 4
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 1
71246: NEG
71247: PUSH
71248: LD_INT 3
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: PUSH
71255: LD_INT 1
71257: NEG
71258: PUSH
71259: LD_INT 2
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 2
71268: PUSH
71269: LD_INT 4
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 2
71278: NEG
71279: PUSH
71280: LD_INT 2
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 4
71289: NEG
71290: PUSH
71291: LD_INT 0
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 4
71300: NEG
71301: PUSH
71302: LD_INT 1
71304: NEG
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 3
71312: NEG
71313: PUSH
71314: LD_INT 0
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: LD_INT 3
71323: NEG
71324: PUSH
71325: LD_INT 1
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 4
71334: NEG
71335: PUSH
71336: LD_INT 1
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 5
71345: NEG
71346: PUSH
71347: LD_INT 0
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: LD_INT 5
71356: NEG
71357: PUSH
71358: LD_INT 1
71360: NEG
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 5
71368: NEG
71369: PUSH
71370: LD_INT 2
71372: NEG
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 3
71380: NEG
71381: PUSH
71382: LD_INT 2
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: ST_TO_ADDR
// end ; end ;
71436: GO 71439
71438: POP
// case btype of b_depot , b_warehouse :
71439: LD_VAR 0 1
71443: PUSH
71444: LD_INT 0
71446: DOUBLE
71447: EQUAL
71448: IFTRUE 71458
71450: LD_INT 1
71452: DOUBLE
71453: EQUAL
71454: IFTRUE 71458
71456: GO 71659
71458: POP
// case nation of nation_american :
71459: LD_VAR 0 5
71463: PUSH
71464: LD_INT 1
71466: DOUBLE
71467: EQUAL
71468: IFTRUE 71472
71470: GO 71528
71472: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71473: LD_ADDR_VAR 0 9
71477: PUSH
71478: LD_VAR 0 11
71482: PUSH
71483: LD_VAR 0 12
71487: PUSH
71488: LD_VAR 0 13
71492: PUSH
71493: LD_VAR 0 14
71497: PUSH
71498: LD_VAR 0 15
71502: PUSH
71503: LD_VAR 0 16
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: PUSH
71516: LD_VAR 0 4
71520: PUSH
71521: LD_INT 1
71523: PLUS
71524: ARRAY
71525: ST_TO_ADDR
71526: GO 71657
71528: LD_INT 2
71530: DOUBLE
71531: EQUAL
71532: IFTRUE 71536
71534: GO 71592
71536: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71537: LD_ADDR_VAR 0 9
71541: PUSH
71542: LD_VAR 0 17
71546: PUSH
71547: LD_VAR 0 18
71551: PUSH
71552: LD_VAR 0 19
71556: PUSH
71557: LD_VAR 0 20
71561: PUSH
71562: LD_VAR 0 21
71566: PUSH
71567: LD_VAR 0 22
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: PUSH
71580: LD_VAR 0 4
71584: PUSH
71585: LD_INT 1
71587: PLUS
71588: ARRAY
71589: ST_TO_ADDR
71590: GO 71657
71592: LD_INT 3
71594: DOUBLE
71595: EQUAL
71596: IFTRUE 71600
71598: GO 71656
71600: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71601: LD_ADDR_VAR 0 9
71605: PUSH
71606: LD_VAR 0 23
71610: PUSH
71611: LD_VAR 0 24
71615: PUSH
71616: LD_VAR 0 25
71620: PUSH
71621: LD_VAR 0 26
71625: PUSH
71626: LD_VAR 0 27
71630: PUSH
71631: LD_VAR 0 28
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: LIST
71642: LIST
71643: PUSH
71644: LD_VAR 0 4
71648: PUSH
71649: LD_INT 1
71651: PLUS
71652: ARRAY
71653: ST_TO_ADDR
71654: GO 71657
71656: POP
71657: GO 72212
71659: LD_INT 2
71661: DOUBLE
71662: EQUAL
71663: IFTRUE 71673
71665: LD_INT 3
71667: DOUBLE
71668: EQUAL
71669: IFTRUE 71673
71671: GO 71729
71673: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71674: LD_ADDR_VAR 0 9
71678: PUSH
71679: LD_VAR 0 29
71683: PUSH
71684: LD_VAR 0 30
71688: PUSH
71689: LD_VAR 0 31
71693: PUSH
71694: LD_VAR 0 32
71698: PUSH
71699: LD_VAR 0 33
71703: PUSH
71704: LD_VAR 0 34
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: PUSH
71717: LD_VAR 0 4
71721: PUSH
71722: LD_INT 1
71724: PLUS
71725: ARRAY
71726: ST_TO_ADDR
71727: GO 72212
71729: LD_INT 16
71731: DOUBLE
71732: EQUAL
71733: IFTRUE 71791
71735: LD_INT 17
71737: DOUBLE
71738: EQUAL
71739: IFTRUE 71791
71741: LD_INT 18
71743: DOUBLE
71744: EQUAL
71745: IFTRUE 71791
71747: LD_INT 19
71749: DOUBLE
71750: EQUAL
71751: IFTRUE 71791
71753: LD_INT 22
71755: DOUBLE
71756: EQUAL
71757: IFTRUE 71791
71759: LD_INT 20
71761: DOUBLE
71762: EQUAL
71763: IFTRUE 71791
71765: LD_INT 21
71767: DOUBLE
71768: EQUAL
71769: IFTRUE 71791
71771: LD_INT 23
71773: DOUBLE
71774: EQUAL
71775: IFTRUE 71791
71777: LD_INT 24
71779: DOUBLE
71780: EQUAL
71781: IFTRUE 71791
71783: LD_INT 25
71785: DOUBLE
71786: EQUAL
71787: IFTRUE 71791
71789: GO 71847
71791: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71792: LD_ADDR_VAR 0 9
71796: PUSH
71797: LD_VAR 0 35
71801: PUSH
71802: LD_VAR 0 36
71806: PUSH
71807: LD_VAR 0 37
71811: PUSH
71812: LD_VAR 0 38
71816: PUSH
71817: LD_VAR 0 39
71821: PUSH
71822: LD_VAR 0 40
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: LIST
71834: PUSH
71835: LD_VAR 0 4
71839: PUSH
71840: LD_INT 1
71842: PLUS
71843: ARRAY
71844: ST_TO_ADDR
71845: GO 72212
71847: LD_INT 6
71849: DOUBLE
71850: EQUAL
71851: IFTRUE 71903
71853: LD_INT 7
71855: DOUBLE
71856: EQUAL
71857: IFTRUE 71903
71859: LD_INT 8
71861: DOUBLE
71862: EQUAL
71863: IFTRUE 71903
71865: LD_INT 13
71867: DOUBLE
71868: EQUAL
71869: IFTRUE 71903
71871: LD_INT 12
71873: DOUBLE
71874: EQUAL
71875: IFTRUE 71903
71877: LD_INT 15
71879: DOUBLE
71880: EQUAL
71881: IFTRUE 71903
71883: LD_INT 11
71885: DOUBLE
71886: EQUAL
71887: IFTRUE 71903
71889: LD_INT 14
71891: DOUBLE
71892: EQUAL
71893: IFTRUE 71903
71895: LD_INT 10
71897: DOUBLE
71898: EQUAL
71899: IFTRUE 71903
71901: GO 71959
71903: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71904: LD_ADDR_VAR 0 9
71908: PUSH
71909: LD_VAR 0 41
71913: PUSH
71914: LD_VAR 0 42
71918: PUSH
71919: LD_VAR 0 43
71923: PUSH
71924: LD_VAR 0 44
71928: PUSH
71929: LD_VAR 0 45
71933: PUSH
71934: LD_VAR 0 46
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: PUSH
71947: LD_VAR 0 4
71951: PUSH
71952: LD_INT 1
71954: PLUS
71955: ARRAY
71956: ST_TO_ADDR
71957: GO 72212
71959: LD_INT 36
71961: DOUBLE
71962: EQUAL
71963: IFTRUE 71967
71965: GO 72023
71967: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71968: LD_ADDR_VAR 0 9
71972: PUSH
71973: LD_VAR 0 47
71977: PUSH
71978: LD_VAR 0 48
71982: PUSH
71983: LD_VAR 0 49
71987: PUSH
71988: LD_VAR 0 50
71992: PUSH
71993: LD_VAR 0 51
71997: PUSH
71998: LD_VAR 0 52
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: LIST
72007: LIST
72008: LIST
72009: LIST
72010: PUSH
72011: LD_VAR 0 4
72015: PUSH
72016: LD_INT 1
72018: PLUS
72019: ARRAY
72020: ST_TO_ADDR
72021: GO 72212
72023: LD_INT 4
72025: DOUBLE
72026: EQUAL
72027: IFTRUE 72049
72029: LD_INT 5
72031: DOUBLE
72032: EQUAL
72033: IFTRUE 72049
72035: LD_INT 34
72037: DOUBLE
72038: EQUAL
72039: IFTRUE 72049
72041: LD_INT 37
72043: DOUBLE
72044: EQUAL
72045: IFTRUE 72049
72047: GO 72105
72049: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72050: LD_ADDR_VAR 0 9
72054: PUSH
72055: LD_VAR 0 53
72059: PUSH
72060: LD_VAR 0 54
72064: PUSH
72065: LD_VAR 0 55
72069: PUSH
72070: LD_VAR 0 56
72074: PUSH
72075: LD_VAR 0 57
72079: PUSH
72080: LD_VAR 0 58
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: PUSH
72093: LD_VAR 0 4
72097: PUSH
72098: LD_INT 1
72100: PLUS
72101: ARRAY
72102: ST_TO_ADDR
72103: GO 72212
72105: LD_INT 31
72107: DOUBLE
72108: EQUAL
72109: IFTRUE 72155
72111: LD_INT 32
72113: DOUBLE
72114: EQUAL
72115: IFTRUE 72155
72117: LD_INT 33
72119: DOUBLE
72120: EQUAL
72121: IFTRUE 72155
72123: LD_INT 27
72125: DOUBLE
72126: EQUAL
72127: IFTRUE 72155
72129: LD_INT 26
72131: DOUBLE
72132: EQUAL
72133: IFTRUE 72155
72135: LD_INT 28
72137: DOUBLE
72138: EQUAL
72139: IFTRUE 72155
72141: LD_INT 29
72143: DOUBLE
72144: EQUAL
72145: IFTRUE 72155
72147: LD_INT 30
72149: DOUBLE
72150: EQUAL
72151: IFTRUE 72155
72153: GO 72211
72155: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72156: LD_ADDR_VAR 0 9
72160: PUSH
72161: LD_VAR 0 59
72165: PUSH
72166: LD_VAR 0 60
72170: PUSH
72171: LD_VAR 0 61
72175: PUSH
72176: LD_VAR 0 62
72180: PUSH
72181: LD_VAR 0 63
72185: PUSH
72186: LD_VAR 0 64
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: PUSH
72199: LD_VAR 0 4
72203: PUSH
72204: LD_INT 1
72206: PLUS
72207: ARRAY
72208: ST_TO_ADDR
72209: GO 72212
72211: POP
// temp_list2 = [ ] ;
72212: LD_ADDR_VAR 0 10
72216: PUSH
72217: EMPTY
72218: ST_TO_ADDR
// for i in temp_list do
72219: LD_ADDR_VAR 0 8
72223: PUSH
72224: LD_VAR 0 9
72228: PUSH
72229: FOR_IN
72230: IFFALSE 72282
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72232: LD_ADDR_VAR 0 10
72236: PUSH
72237: LD_VAR 0 10
72241: PUSH
72242: LD_VAR 0 8
72246: PUSH
72247: LD_INT 1
72249: ARRAY
72250: PUSH
72251: LD_VAR 0 2
72255: PLUS
72256: PUSH
72257: LD_VAR 0 8
72261: PUSH
72262: LD_INT 2
72264: ARRAY
72265: PUSH
72266: LD_VAR 0 3
72270: PLUS
72271: PUSH
72272: EMPTY
72273: LIST
72274: LIST
72275: PUSH
72276: EMPTY
72277: LIST
72278: ADD
72279: ST_TO_ADDR
72280: GO 72229
72282: POP
72283: POP
// result = temp_list2 ;
72284: LD_ADDR_VAR 0 7
72288: PUSH
72289: LD_VAR 0 10
72293: ST_TO_ADDR
// end ;
72294: LD_VAR 0 7
72298: RET
// export function EnemyInRange ( unit , dist ) ; begin
72299: LD_INT 0
72301: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72302: LD_ADDR_VAR 0 3
72306: PUSH
72307: LD_VAR 0 1
72311: PPUSH
72312: CALL_OW 255
72316: PPUSH
72317: LD_VAR 0 1
72321: PPUSH
72322: CALL_OW 250
72326: PPUSH
72327: LD_VAR 0 1
72331: PPUSH
72332: CALL_OW 251
72336: PPUSH
72337: LD_VAR 0 2
72341: PPUSH
72342: CALL 45701 0 4
72346: PUSH
72347: LD_INT 4
72349: ARRAY
72350: ST_TO_ADDR
// end ;
72351: LD_VAR 0 3
72355: RET
// export function PlayerSeeMe ( unit ) ; begin
72356: LD_INT 0
72358: PPUSH
// result := See ( your_side , unit ) ;
72359: LD_ADDR_VAR 0 2
72363: PUSH
72364: LD_OWVAR 2
72368: PPUSH
72369: LD_VAR 0 1
72373: PPUSH
72374: CALL_OW 292
72378: ST_TO_ADDR
// end ;
72379: LD_VAR 0 2
72383: RET
// export function ReverseDir ( unit ) ; begin
72384: LD_INT 0
72386: PPUSH
// if not unit then
72387: LD_VAR 0 1
72391: NOT
72392: IFFALSE 72396
// exit ;
72394: GO 72419
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72396: LD_ADDR_VAR 0 2
72400: PUSH
72401: LD_VAR 0 1
72405: PPUSH
72406: CALL_OW 254
72410: PUSH
72411: LD_INT 3
72413: PLUS
72414: PUSH
72415: LD_INT 6
72417: MOD
72418: ST_TO_ADDR
// end ;
72419: LD_VAR 0 2
72423: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72424: LD_INT 0
72426: PPUSH
72427: PPUSH
72428: PPUSH
72429: PPUSH
72430: PPUSH
72431: PPUSH
// if not unit or not hexes then
72432: LD_VAR 0 1
72436: NOT
72437: PUSH
72438: LD_VAR 0 2
72442: NOT
72443: OR
72444: IFFALSE 72448
// exit ;
72446: GO 72571
// dist := 9999 ;
72448: LD_ADDR_VAR 0 5
72452: PUSH
72453: LD_INT 9999
72455: ST_TO_ADDR
// for i = 1 to hexes do
72456: LD_ADDR_VAR 0 4
72460: PUSH
72461: DOUBLE
72462: LD_INT 1
72464: DEC
72465: ST_TO_ADDR
72466: LD_VAR 0 2
72470: PUSH
72471: FOR_TO
72472: IFFALSE 72559
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72474: LD_ADDR_VAR 0 6
72478: PUSH
72479: LD_VAR 0 1
72483: PPUSH
72484: LD_VAR 0 2
72488: PUSH
72489: LD_VAR 0 4
72493: ARRAY
72494: PUSH
72495: LD_INT 1
72497: ARRAY
72498: PPUSH
72499: LD_VAR 0 2
72503: PUSH
72504: LD_VAR 0 4
72508: ARRAY
72509: PUSH
72510: LD_INT 2
72512: ARRAY
72513: PPUSH
72514: CALL_OW 297
72518: ST_TO_ADDR
// if tdist < dist then
72519: LD_VAR 0 6
72523: PUSH
72524: LD_VAR 0 5
72528: LESS
72529: IFFALSE 72557
// begin hex := hexes [ i ] ;
72531: LD_ADDR_VAR 0 8
72535: PUSH
72536: LD_VAR 0 2
72540: PUSH
72541: LD_VAR 0 4
72545: ARRAY
72546: ST_TO_ADDR
// dist := tdist ;
72547: LD_ADDR_VAR 0 5
72551: PUSH
72552: LD_VAR 0 6
72556: ST_TO_ADDR
// end ; end ;
72557: GO 72471
72559: POP
72560: POP
// result := hex ;
72561: LD_ADDR_VAR 0 3
72565: PUSH
72566: LD_VAR 0 8
72570: ST_TO_ADDR
// end ;
72571: LD_VAR 0 3
72575: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72576: LD_INT 0
72578: PPUSH
72579: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72580: LD_VAR 0 1
72584: NOT
72585: PUSH
72586: LD_VAR 0 1
72590: PUSH
72591: LD_INT 21
72593: PUSH
72594: LD_INT 2
72596: PUSH
72597: EMPTY
72598: LIST
72599: LIST
72600: PUSH
72601: LD_INT 23
72603: PUSH
72604: LD_INT 2
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PPUSH
72615: CALL_OW 69
72619: IN
72620: NOT
72621: OR
72622: IFFALSE 72626
// exit ;
72624: GO 72673
// for i = 1 to 3 do
72626: LD_ADDR_VAR 0 3
72630: PUSH
72631: DOUBLE
72632: LD_INT 1
72634: DEC
72635: ST_TO_ADDR
72636: LD_INT 3
72638: PUSH
72639: FOR_TO
72640: IFFALSE 72671
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72642: LD_VAR 0 1
72646: PPUSH
72647: CALL_OW 250
72651: PPUSH
72652: LD_VAR 0 1
72656: PPUSH
72657: CALL_OW 251
72661: PPUSH
72662: LD_INT 1
72664: PPUSH
72665: CALL_OW 453
72669: GO 72639
72671: POP
72672: POP
// end ;
72673: LD_VAR 0 2
72677: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72678: LD_INT 0
72680: PPUSH
72681: PPUSH
72682: PPUSH
72683: PPUSH
72684: PPUSH
72685: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72686: LD_VAR 0 1
72690: NOT
72691: PUSH
72692: LD_VAR 0 2
72696: NOT
72697: OR
72698: PUSH
72699: LD_VAR 0 1
72703: PPUSH
72704: CALL_OW 314
72708: OR
72709: IFFALSE 72713
// exit ;
72711: GO 73154
// x := GetX ( enemy_unit ) ;
72713: LD_ADDR_VAR 0 7
72717: PUSH
72718: LD_VAR 0 2
72722: PPUSH
72723: CALL_OW 250
72727: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72728: LD_ADDR_VAR 0 8
72732: PUSH
72733: LD_VAR 0 2
72737: PPUSH
72738: CALL_OW 251
72742: ST_TO_ADDR
// if not x or not y then
72743: LD_VAR 0 7
72747: NOT
72748: PUSH
72749: LD_VAR 0 8
72753: NOT
72754: OR
72755: IFFALSE 72759
// exit ;
72757: GO 73154
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72759: LD_ADDR_VAR 0 6
72763: PUSH
72764: LD_VAR 0 7
72768: PPUSH
72769: LD_INT 0
72771: PPUSH
72772: LD_INT 4
72774: PPUSH
72775: CALL_OW 272
72779: PUSH
72780: LD_VAR 0 8
72784: PPUSH
72785: LD_INT 0
72787: PPUSH
72788: LD_INT 4
72790: PPUSH
72791: CALL_OW 273
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: PUSH
72800: LD_VAR 0 7
72804: PPUSH
72805: LD_INT 1
72807: PPUSH
72808: LD_INT 4
72810: PPUSH
72811: CALL_OW 272
72815: PUSH
72816: LD_VAR 0 8
72820: PPUSH
72821: LD_INT 1
72823: PPUSH
72824: LD_INT 4
72826: PPUSH
72827: CALL_OW 273
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_VAR 0 7
72840: PPUSH
72841: LD_INT 2
72843: PPUSH
72844: LD_INT 4
72846: PPUSH
72847: CALL_OW 272
72851: PUSH
72852: LD_VAR 0 8
72856: PPUSH
72857: LD_INT 2
72859: PPUSH
72860: LD_INT 4
72862: PPUSH
72863: CALL_OW 273
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: PUSH
72872: LD_VAR 0 7
72876: PPUSH
72877: LD_INT 3
72879: PPUSH
72880: LD_INT 4
72882: PPUSH
72883: CALL_OW 272
72887: PUSH
72888: LD_VAR 0 8
72892: PPUSH
72893: LD_INT 3
72895: PPUSH
72896: LD_INT 4
72898: PPUSH
72899: CALL_OW 273
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: PUSH
72908: LD_VAR 0 7
72912: PPUSH
72913: LD_INT 4
72915: PPUSH
72916: LD_INT 4
72918: PPUSH
72919: CALL_OW 272
72923: PUSH
72924: LD_VAR 0 8
72928: PPUSH
72929: LD_INT 4
72931: PPUSH
72932: LD_INT 4
72934: PPUSH
72935: CALL_OW 273
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: PUSH
72944: LD_VAR 0 7
72948: PPUSH
72949: LD_INT 5
72951: PPUSH
72952: LD_INT 4
72954: PPUSH
72955: CALL_OW 272
72959: PUSH
72960: LD_VAR 0 8
72964: PPUSH
72965: LD_INT 5
72967: PPUSH
72968: LD_INT 4
72970: PPUSH
72971: CALL_OW 273
72975: PUSH
72976: EMPTY
72977: LIST
72978: LIST
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: LIST
72984: LIST
72985: LIST
72986: LIST
72987: ST_TO_ADDR
// for i = tmp downto 1 do
72988: LD_ADDR_VAR 0 4
72992: PUSH
72993: DOUBLE
72994: LD_VAR 0 6
72998: INC
72999: ST_TO_ADDR
73000: LD_INT 1
73002: PUSH
73003: FOR_DOWNTO
73004: IFFALSE 73105
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73006: LD_VAR 0 6
73010: PUSH
73011: LD_VAR 0 4
73015: ARRAY
73016: PUSH
73017: LD_INT 1
73019: ARRAY
73020: PPUSH
73021: LD_VAR 0 6
73025: PUSH
73026: LD_VAR 0 4
73030: ARRAY
73031: PUSH
73032: LD_INT 2
73034: ARRAY
73035: PPUSH
73036: CALL_OW 488
73040: NOT
73041: PUSH
73042: LD_VAR 0 6
73046: PUSH
73047: LD_VAR 0 4
73051: ARRAY
73052: PUSH
73053: LD_INT 1
73055: ARRAY
73056: PPUSH
73057: LD_VAR 0 6
73061: PUSH
73062: LD_VAR 0 4
73066: ARRAY
73067: PUSH
73068: LD_INT 2
73070: ARRAY
73071: PPUSH
73072: CALL_OW 428
73076: PUSH
73077: LD_INT 0
73079: NONEQUAL
73080: OR
73081: IFFALSE 73103
// tmp := Delete ( tmp , i ) ;
73083: LD_ADDR_VAR 0 6
73087: PUSH
73088: LD_VAR 0 6
73092: PPUSH
73093: LD_VAR 0 4
73097: PPUSH
73098: CALL_OW 3
73102: ST_TO_ADDR
73103: GO 73003
73105: POP
73106: POP
// j := GetClosestHex ( unit , tmp ) ;
73107: LD_ADDR_VAR 0 5
73111: PUSH
73112: LD_VAR 0 1
73116: PPUSH
73117: LD_VAR 0 6
73121: PPUSH
73122: CALL 72424 0 2
73126: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73127: LD_VAR 0 1
73131: PPUSH
73132: LD_VAR 0 5
73136: PUSH
73137: LD_INT 1
73139: ARRAY
73140: PPUSH
73141: LD_VAR 0 5
73145: PUSH
73146: LD_INT 2
73148: ARRAY
73149: PPUSH
73150: CALL_OW 111
// end ;
73154: LD_VAR 0 3
73158: RET
// export function PrepareApemanSoldier ( ) ; begin
73159: LD_INT 0
73161: PPUSH
// uc_nation := 0 ;
73162: LD_ADDR_OWVAR 21
73166: PUSH
73167: LD_INT 0
73169: ST_TO_ADDR
// hc_sex := sex_male ;
73170: LD_ADDR_OWVAR 27
73174: PUSH
73175: LD_INT 1
73177: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73178: LD_ADDR_OWVAR 28
73182: PUSH
73183: LD_INT 15
73185: ST_TO_ADDR
// hc_gallery :=  ;
73186: LD_ADDR_OWVAR 33
73190: PUSH
73191: LD_STRING 
73193: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73194: LD_ADDR_OWVAR 31
73198: PUSH
73199: LD_INT 0
73201: PPUSH
73202: LD_INT 3
73204: PPUSH
73205: CALL_OW 12
73209: PUSH
73210: LD_INT 0
73212: PPUSH
73213: LD_INT 3
73215: PPUSH
73216: CALL_OW 12
73220: PUSH
73221: LD_INT 0
73223: PUSH
73224: LD_INT 0
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: ST_TO_ADDR
// end ;
73233: LD_VAR 0 1
73237: RET
// export function PrepareApemanEngineer ( ) ; begin
73238: LD_INT 0
73240: PPUSH
// uc_nation := 0 ;
73241: LD_ADDR_OWVAR 21
73245: PUSH
73246: LD_INT 0
73248: ST_TO_ADDR
// hc_sex := sex_male ;
73249: LD_ADDR_OWVAR 27
73253: PUSH
73254: LD_INT 1
73256: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73257: LD_ADDR_OWVAR 28
73261: PUSH
73262: LD_INT 16
73264: ST_TO_ADDR
// hc_gallery :=  ;
73265: LD_ADDR_OWVAR 33
73269: PUSH
73270: LD_STRING 
73272: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73273: LD_ADDR_OWVAR 31
73277: PUSH
73278: LD_INT 0
73280: PPUSH
73281: LD_INT 3
73283: PPUSH
73284: CALL_OW 12
73288: PUSH
73289: LD_INT 0
73291: PPUSH
73292: LD_INT 3
73294: PPUSH
73295: CALL_OW 12
73299: PUSH
73300: LD_INT 0
73302: PUSH
73303: LD_INT 0
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: ST_TO_ADDR
// end ;
73312: LD_VAR 0 1
73316: RET
// export function PrepareApeman ( agressivity ) ; begin
73317: LD_INT 0
73319: PPUSH
// uc_side := 0 ;
73320: LD_ADDR_OWVAR 20
73324: PUSH
73325: LD_INT 0
73327: ST_TO_ADDR
// uc_nation := 0 ;
73328: LD_ADDR_OWVAR 21
73332: PUSH
73333: LD_INT 0
73335: ST_TO_ADDR
// hc_sex := sex_male ;
73336: LD_ADDR_OWVAR 27
73340: PUSH
73341: LD_INT 1
73343: ST_TO_ADDR
// hc_class := class_apeman ;
73344: LD_ADDR_OWVAR 28
73348: PUSH
73349: LD_INT 12
73351: ST_TO_ADDR
// hc_gallery :=  ;
73352: LD_ADDR_OWVAR 33
73356: PUSH
73357: LD_STRING 
73359: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73360: LD_ADDR_OWVAR 35
73364: PUSH
73365: LD_VAR 0 1
73369: NEG
73370: PPUSH
73371: LD_VAR 0 1
73375: PPUSH
73376: CALL_OW 12
73380: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73381: LD_ADDR_OWVAR 31
73385: PUSH
73386: LD_INT 0
73388: PPUSH
73389: LD_INT 3
73391: PPUSH
73392: CALL_OW 12
73396: PUSH
73397: LD_INT 0
73399: PPUSH
73400: LD_INT 3
73402: PPUSH
73403: CALL_OW 12
73407: PUSH
73408: LD_INT 0
73410: PUSH
73411: LD_INT 0
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: ST_TO_ADDR
// end ;
73420: LD_VAR 0 2
73424: RET
// export function PrepareTiger ( agressivity ) ; begin
73425: LD_INT 0
73427: PPUSH
// uc_side := 0 ;
73428: LD_ADDR_OWVAR 20
73432: PUSH
73433: LD_INT 0
73435: ST_TO_ADDR
// uc_nation := 0 ;
73436: LD_ADDR_OWVAR 21
73440: PUSH
73441: LD_INT 0
73443: ST_TO_ADDR
// hc_class := class_tiger ;
73444: LD_ADDR_OWVAR 28
73448: PUSH
73449: LD_INT 14
73451: ST_TO_ADDR
// hc_gallery :=  ;
73452: LD_ADDR_OWVAR 33
73456: PUSH
73457: LD_STRING 
73459: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73460: LD_ADDR_OWVAR 35
73464: PUSH
73465: LD_VAR 0 1
73469: NEG
73470: PPUSH
73471: LD_VAR 0 1
73475: PPUSH
73476: CALL_OW 12
73480: ST_TO_ADDR
// end ;
73481: LD_VAR 0 2
73485: RET
// export function PrepareEnchidna ( ) ; begin
73486: LD_INT 0
73488: PPUSH
// uc_side := 0 ;
73489: LD_ADDR_OWVAR 20
73493: PUSH
73494: LD_INT 0
73496: ST_TO_ADDR
// uc_nation := 0 ;
73497: LD_ADDR_OWVAR 21
73501: PUSH
73502: LD_INT 0
73504: ST_TO_ADDR
// hc_class := class_baggie ;
73505: LD_ADDR_OWVAR 28
73509: PUSH
73510: LD_INT 13
73512: ST_TO_ADDR
// hc_gallery :=  ;
73513: LD_ADDR_OWVAR 33
73517: PUSH
73518: LD_STRING 
73520: ST_TO_ADDR
// end ;
73521: LD_VAR 0 1
73525: RET
// export function PrepareFrog ( ) ; begin
73526: LD_INT 0
73528: PPUSH
// uc_side := 0 ;
73529: LD_ADDR_OWVAR 20
73533: PUSH
73534: LD_INT 0
73536: ST_TO_ADDR
// uc_nation := 0 ;
73537: LD_ADDR_OWVAR 21
73541: PUSH
73542: LD_INT 0
73544: ST_TO_ADDR
// hc_class := class_frog ;
73545: LD_ADDR_OWVAR 28
73549: PUSH
73550: LD_INT 19
73552: ST_TO_ADDR
// hc_gallery :=  ;
73553: LD_ADDR_OWVAR 33
73557: PUSH
73558: LD_STRING 
73560: ST_TO_ADDR
// end ;
73561: LD_VAR 0 1
73565: RET
// export function PrepareFish ( ) ; begin
73566: LD_INT 0
73568: PPUSH
// uc_side := 0 ;
73569: LD_ADDR_OWVAR 20
73573: PUSH
73574: LD_INT 0
73576: ST_TO_ADDR
// uc_nation := 0 ;
73577: LD_ADDR_OWVAR 21
73581: PUSH
73582: LD_INT 0
73584: ST_TO_ADDR
// hc_class := class_fish ;
73585: LD_ADDR_OWVAR 28
73589: PUSH
73590: LD_INT 20
73592: ST_TO_ADDR
// hc_gallery :=  ;
73593: LD_ADDR_OWVAR 33
73597: PUSH
73598: LD_STRING 
73600: ST_TO_ADDR
// end ;
73601: LD_VAR 0 1
73605: RET
// export function PrepareBird ( ) ; begin
73606: LD_INT 0
73608: PPUSH
// uc_side := 0 ;
73609: LD_ADDR_OWVAR 20
73613: PUSH
73614: LD_INT 0
73616: ST_TO_ADDR
// uc_nation := 0 ;
73617: LD_ADDR_OWVAR 21
73621: PUSH
73622: LD_INT 0
73624: ST_TO_ADDR
// hc_class := class_phororhacos ;
73625: LD_ADDR_OWVAR 28
73629: PUSH
73630: LD_INT 18
73632: ST_TO_ADDR
// hc_gallery :=  ;
73633: LD_ADDR_OWVAR 33
73637: PUSH
73638: LD_STRING 
73640: ST_TO_ADDR
// end ;
73641: LD_VAR 0 1
73645: RET
// export function PrepareHorse ( ) ; begin
73646: LD_INT 0
73648: PPUSH
// uc_side := 0 ;
73649: LD_ADDR_OWVAR 20
73653: PUSH
73654: LD_INT 0
73656: ST_TO_ADDR
// uc_nation := 0 ;
73657: LD_ADDR_OWVAR 21
73661: PUSH
73662: LD_INT 0
73664: ST_TO_ADDR
// hc_class := class_horse ;
73665: LD_ADDR_OWVAR 28
73669: PUSH
73670: LD_INT 21
73672: ST_TO_ADDR
// hc_gallery :=  ;
73673: LD_ADDR_OWVAR 33
73677: PUSH
73678: LD_STRING 
73680: ST_TO_ADDR
// end ;
73681: LD_VAR 0 1
73685: RET
// export function PrepareMastodont ( ) ; begin
73686: LD_INT 0
73688: PPUSH
// uc_side := 0 ;
73689: LD_ADDR_OWVAR 20
73693: PUSH
73694: LD_INT 0
73696: ST_TO_ADDR
// uc_nation := 0 ;
73697: LD_ADDR_OWVAR 21
73701: PUSH
73702: LD_INT 0
73704: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73705: LD_ADDR_OWVAR 37
73709: PUSH
73710: LD_INT 31
73712: ST_TO_ADDR
// vc_control := control_rider ;
73713: LD_ADDR_OWVAR 38
73717: PUSH
73718: LD_INT 4
73720: ST_TO_ADDR
// end ;
73721: LD_VAR 0 1
73725: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73726: LD_INT 0
73728: PPUSH
73729: PPUSH
73730: PPUSH
// uc_side = 0 ;
73731: LD_ADDR_OWVAR 20
73735: PUSH
73736: LD_INT 0
73738: ST_TO_ADDR
// uc_nation = 0 ;
73739: LD_ADDR_OWVAR 21
73743: PUSH
73744: LD_INT 0
73746: ST_TO_ADDR
// InitHc_All ( ) ;
73747: CALL_OW 584
// InitVc ;
73751: CALL_OW 20
// if mastodonts then
73755: LD_VAR 0 6
73759: IFFALSE 73826
// for i = 1 to mastodonts do
73761: LD_ADDR_VAR 0 11
73765: PUSH
73766: DOUBLE
73767: LD_INT 1
73769: DEC
73770: ST_TO_ADDR
73771: LD_VAR 0 6
73775: PUSH
73776: FOR_TO
73777: IFFALSE 73824
// begin vc_chassis := 31 ;
73779: LD_ADDR_OWVAR 37
73783: PUSH
73784: LD_INT 31
73786: ST_TO_ADDR
// vc_control := control_rider ;
73787: LD_ADDR_OWVAR 38
73791: PUSH
73792: LD_INT 4
73794: ST_TO_ADDR
// animal := CreateVehicle ;
73795: LD_ADDR_VAR 0 12
73799: PUSH
73800: CALL_OW 45
73804: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73805: LD_VAR 0 12
73809: PPUSH
73810: LD_VAR 0 8
73814: PPUSH
73815: LD_INT 0
73817: PPUSH
73818: CALL 75961 0 3
// end ;
73822: GO 73776
73824: POP
73825: POP
// if horses then
73826: LD_VAR 0 5
73830: IFFALSE 73897
// for i = 1 to horses do
73832: LD_ADDR_VAR 0 11
73836: PUSH
73837: DOUBLE
73838: LD_INT 1
73840: DEC
73841: ST_TO_ADDR
73842: LD_VAR 0 5
73846: PUSH
73847: FOR_TO
73848: IFFALSE 73895
// begin hc_class := 21 ;
73850: LD_ADDR_OWVAR 28
73854: PUSH
73855: LD_INT 21
73857: ST_TO_ADDR
// hc_gallery :=  ;
73858: LD_ADDR_OWVAR 33
73862: PUSH
73863: LD_STRING 
73865: ST_TO_ADDR
// animal := CreateHuman ;
73866: LD_ADDR_VAR 0 12
73870: PUSH
73871: CALL_OW 44
73875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73876: LD_VAR 0 12
73880: PPUSH
73881: LD_VAR 0 8
73885: PPUSH
73886: LD_INT 0
73888: PPUSH
73889: CALL 75961 0 3
// end ;
73893: GO 73847
73895: POP
73896: POP
// if birds then
73897: LD_VAR 0 1
73901: IFFALSE 73968
// for i = 1 to birds do
73903: LD_ADDR_VAR 0 11
73907: PUSH
73908: DOUBLE
73909: LD_INT 1
73911: DEC
73912: ST_TO_ADDR
73913: LD_VAR 0 1
73917: PUSH
73918: FOR_TO
73919: IFFALSE 73966
// begin hc_class = 18 ;
73921: LD_ADDR_OWVAR 28
73925: PUSH
73926: LD_INT 18
73928: ST_TO_ADDR
// hc_gallery =  ;
73929: LD_ADDR_OWVAR 33
73933: PUSH
73934: LD_STRING 
73936: ST_TO_ADDR
// animal := CreateHuman ;
73937: LD_ADDR_VAR 0 12
73941: PUSH
73942: CALL_OW 44
73946: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73947: LD_VAR 0 12
73951: PPUSH
73952: LD_VAR 0 8
73956: PPUSH
73957: LD_INT 0
73959: PPUSH
73960: CALL 75961 0 3
// end ;
73964: GO 73918
73966: POP
73967: POP
// if tigers then
73968: LD_VAR 0 2
73972: IFFALSE 74056
// for i = 1 to tigers do
73974: LD_ADDR_VAR 0 11
73978: PUSH
73979: DOUBLE
73980: LD_INT 1
73982: DEC
73983: ST_TO_ADDR
73984: LD_VAR 0 2
73988: PUSH
73989: FOR_TO
73990: IFFALSE 74054
// begin hc_class = class_tiger ;
73992: LD_ADDR_OWVAR 28
73996: PUSH
73997: LD_INT 14
73999: ST_TO_ADDR
// hc_gallery =  ;
74000: LD_ADDR_OWVAR 33
74004: PUSH
74005: LD_STRING 
74007: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74008: LD_ADDR_OWVAR 35
74012: PUSH
74013: LD_INT 7
74015: NEG
74016: PPUSH
74017: LD_INT 7
74019: PPUSH
74020: CALL_OW 12
74024: ST_TO_ADDR
// animal := CreateHuman ;
74025: LD_ADDR_VAR 0 12
74029: PUSH
74030: CALL_OW 44
74034: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74035: LD_VAR 0 12
74039: PPUSH
74040: LD_VAR 0 8
74044: PPUSH
74045: LD_INT 0
74047: PPUSH
74048: CALL 75961 0 3
// end ;
74052: GO 73989
74054: POP
74055: POP
// if apemans then
74056: LD_VAR 0 3
74060: IFFALSE 74183
// for i = 1 to apemans do
74062: LD_ADDR_VAR 0 11
74066: PUSH
74067: DOUBLE
74068: LD_INT 1
74070: DEC
74071: ST_TO_ADDR
74072: LD_VAR 0 3
74076: PUSH
74077: FOR_TO
74078: IFFALSE 74181
// begin hc_class = class_apeman ;
74080: LD_ADDR_OWVAR 28
74084: PUSH
74085: LD_INT 12
74087: ST_TO_ADDR
// hc_gallery =  ;
74088: LD_ADDR_OWVAR 33
74092: PUSH
74093: LD_STRING 
74095: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74096: LD_ADDR_OWVAR 35
74100: PUSH
74101: LD_INT 2
74103: NEG
74104: PPUSH
74105: LD_INT 2
74107: PPUSH
74108: CALL_OW 12
74112: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74113: LD_ADDR_OWVAR 31
74117: PUSH
74118: LD_INT 1
74120: PPUSH
74121: LD_INT 3
74123: PPUSH
74124: CALL_OW 12
74128: PUSH
74129: LD_INT 1
74131: PPUSH
74132: LD_INT 3
74134: PPUSH
74135: CALL_OW 12
74139: PUSH
74140: LD_INT 0
74142: PUSH
74143: LD_INT 0
74145: PUSH
74146: EMPTY
74147: LIST
74148: LIST
74149: LIST
74150: LIST
74151: ST_TO_ADDR
// animal := CreateHuman ;
74152: LD_ADDR_VAR 0 12
74156: PUSH
74157: CALL_OW 44
74161: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74162: LD_VAR 0 12
74166: PPUSH
74167: LD_VAR 0 8
74171: PPUSH
74172: LD_INT 0
74174: PPUSH
74175: CALL 75961 0 3
// end ;
74179: GO 74077
74181: POP
74182: POP
// if enchidnas then
74183: LD_VAR 0 4
74187: IFFALSE 74254
// for i = 1 to enchidnas do
74189: LD_ADDR_VAR 0 11
74193: PUSH
74194: DOUBLE
74195: LD_INT 1
74197: DEC
74198: ST_TO_ADDR
74199: LD_VAR 0 4
74203: PUSH
74204: FOR_TO
74205: IFFALSE 74252
// begin hc_class = 13 ;
74207: LD_ADDR_OWVAR 28
74211: PUSH
74212: LD_INT 13
74214: ST_TO_ADDR
// hc_gallery =  ;
74215: LD_ADDR_OWVAR 33
74219: PUSH
74220: LD_STRING 
74222: ST_TO_ADDR
// animal := CreateHuman ;
74223: LD_ADDR_VAR 0 12
74227: PUSH
74228: CALL_OW 44
74232: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74233: LD_VAR 0 12
74237: PPUSH
74238: LD_VAR 0 8
74242: PPUSH
74243: LD_INT 0
74245: PPUSH
74246: CALL 75961 0 3
// end ;
74250: GO 74204
74252: POP
74253: POP
// if fishes then
74254: LD_VAR 0 7
74258: IFFALSE 74325
// for i = 1 to fishes do
74260: LD_ADDR_VAR 0 11
74264: PUSH
74265: DOUBLE
74266: LD_INT 1
74268: DEC
74269: ST_TO_ADDR
74270: LD_VAR 0 7
74274: PUSH
74275: FOR_TO
74276: IFFALSE 74323
// begin hc_class = 20 ;
74278: LD_ADDR_OWVAR 28
74282: PUSH
74283: LD_INT 20
74285: ST_TO_ADDR
// hc_gallery =  ;
74286: LD_ADDR_OWVAR 33
74290: PUSH
74291: LD_STRING 
74293: ST_TO_ADDR
// animal := CreateHuman ;
74294: LD_ADDR_VAR 0 12
74298: PUSH
74299: CALL_OW 44
74303: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74304: LD_VAR 0 12
74308: PPUSH
74309: LD_VAR 0 9
74313: PPUSH
74314: LD_INT 0
74316: PPUSH
74317: CALL 75961 0 3
// end ;
74321: GO 74275
74323: POP
74324: POP
// end ;
74325: LD_VAR 0 10
74329: RET
// export function WantHeal ( sci , unit ) ; begin
74330: LD_INT 0
74332: PPUSH
// if GetTaskList ( sci ) > 0 then
74333: LD_VAR 0 1
74337: PPUSH
74338: CALL_OW 437
74342: PUSH
74343: LD_INT 0
74345: GREATER
74346: IFFALSE 74416
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74348: LD_VAR 0 1
74352: PPUSH
74353: CALL_OW 437
74357: PUSH
74358: LD_INT 1
74360: ARRAY
74361: PUSH
74362: LD_INT 1
74364: ARRAY
74365: PUSH
74366: LD_STRING l
74368: EQUAL
74369: PUSH
74370: LD_VAR 0 1
74374: PPUSH
74375: CALL_OW 437
74379: PUSH
74380: LD_INT 1
74382: ARRAY
74383: PUSH
74384: LD_INT 4
74386: ARRAY
74387: PUSH
74388: LD_VAR 0 2
74392: EQUAL
74393: AND
74394: IFFALSE 74406
// result := true else
74396: LD_ADDR_VAR 0 3
74400: PUSH
74401: LD_INT 1
74403: ST_TO_ADDR
74404: GO 74414
// result := false ;
74406: LD_ADDR_VAR 0 3
74410: PUSH
74411: LD_INT 0
74413: ST_TO_ADDR
// end else
74414: GO 74424
// result := false ;
74416: LD_ADDR_VAR 0 3
74420: PUSH
74421: LD_INT 0
74423: ST_TO_ADDR
// end ;
74424: LD_VAR 0 3
74428: RET
// export function HealTarget ( sci ) ; begin
74429: LD_INT 0
74431: PPUSH
// if not sci then
74432: LD_VAR 0 1
74436: NOT
74437: IFFALSE 74441
// exit ;
74439: GO 74506
// result := 0 ;
74441: LD_ADDR_VAR 0 2
74445: PUSH
74446: LD_INT 0
74448: ST_TO_ADDR
// if GetTaskList ( sci ) then
74449: LD_VAR 0 1
74453: PPUSH
74454: CALL_OW 437
74458: IFFALSE 74506
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74460: LD_VAR 0 1
74464: PPUSH
74465: CALL_OW 437
74469: PUSH
74470: LD_INT 1
74472: ARRAY
74473: PUSH
74474: LD_INT 1
74476: ARRAY
74477: PUSH
74478: LD_STRING l
74480: EQUAL
74481: IFFALSE 74506
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74483: LD_ADDR_VAR 0 2
74487: PUSH
74488: LD_VAR 0 1
74492: PPUSH
74493: CALL_OW 437
74497: PUSH
74498: LD_INT 1
74500: ARRAY
74501: PUSH
74502: LD_INT 4
74504: ARRAY
74505: ST_TO_ADDR
// end ;
74506: LD_VAR 0 2
74510: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74511: LD_INT 0
74513: PPUSH
74514: PPUSH
74515: PPUSH
74516: PPUSH
// if not base_units then
74517: LD_VAR 0 1
74521: NOT
74522: IFFALSE 74526
// exit ;
74524: GO 74613
// result := false ;
74526: LD_ADDR_VAR 0 2
74530: PUSH
74531: LD_INT 0
74533: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74534: LD_ADDR_VAR 0 5
74538: PUSH
74539: LD_VAR 0 1
74543: PPUSH
74544: LD_INT 21
74546: PUSH
74547: LD_INT 3
74549: PUSH
74550: EMPTY
74551: LIST
74552: LIST
74553: PPUSH
74554: CALL_OW 72
74558: ST_TO_ADDR
// if not tmp then
74559: LD_VAR 0 5
74563: NOT
74564: IFFALSE 74568
// exit ;
74566: GO 74613
// for i in tmp do
74568: LD_ADDR_VAR 0 3
74572: PUSH
74573: LD_VAR 0 5
74577: PUSH
74578: FOR_IN
74579: IFFALSE 74611
// begin result := EnemyInRange ( i , 22 ) ;
74581: LD_ADDR_VAR 0 2
74585: PUSH
74586: LD_VAR 0 3
74590: PPUSH
74591: LD_INT 22
74593: PPUSH
74594: CALL 72299 0 2
74598: ST_TO_ADDR
// if result then
74599: LD_VAR 0 2
74603: IFFALSE 74609
// exit ;
74605: POP
74606: POP
74607: GO 74613
// end ;
74609: GO 74578
74611: POP
74612: POP
// end ;
74613: LD_VAR 0 2
74617: RET
// export function FilterByTag ( units , tag ) ; begin
74618: LD_INT 0
74620: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74621: LD_ADDR_VAR 0 3
74625: PUSH
74626: LD_VAR 0 1
74630: PPUSH
74631: LD_INT 120
74633: PUSH
74634: LD_VAR 0 2
74638: PUSH
74639: EMPTY
74640: LIST
74641: LIST
74642: PPUSH
74643: CALL_OW 72
74647: ST_TO_ADDR
// end ;
74648: LD_VAR 0 3
74652: RET
// export function IsDriver ( un ) ; begin
74653: LD_INT 0
74655: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74656: LD_ADDR_VAR 0 2
74660: PUSH
74661: LD_VAR 0 1
74665: PUSH
74666: LD_INT 55
74668: PUSH
74669: EMPTY
74670: LIST
74671: PPUSH
74672: CALL_OW 69
74676: IN
74677: ST_TO_ADDR
// end ;
74678: LD_VAR 0 2
74682: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74683: LD_INT 0
74685: PPUSH
74686: PPUSH
// list := [ ] ;
74687: LD_ADDR_VAR 0 5
74691: PUSH
74692: EMPTY
74693: ST_TO_ADDR
// case d of 0 :
74694: LD_VAR 0 3
74698: PUSH
74699: LD_INT 0
74701: DOUBLE
74702: EQUAL
74703: IFTRUE 74707
74705: GO 74840
74707: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74708: LD_ADDR_VAR 0 5
74712: PUSH
74713: LD_VAR 0 1
74717: PUSH
74718: LD_INT 4
74720: MINUS
74721: PUSH
74722: LD_VAR 0 2
74726: PUSH
74727: LD_INT 4
74729: MINUS
74730: PUSH
74731: LD_INT 2
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: LIST
74738: PUSH
74739: LD_VAR 0 1
74743: PUSH
74744: LD_INT 3
74746: MINUS
74747: PUSH
74748: LD_VAR 0 2
74752: PUSH
74753: LD_INT 1
74755: PUSH
74756: EMPTY
74757: LIST
74758: LIST
74759: LIST
74760: PUSH
74761: LD_VAR 0 1
74765: PUSH
74766: LD_INT 4
74768: PLUS
74769: PUSH
74770: LD_VAR 0 2
74774: PUSH
74775: LD_INT 4
74777: PUSH
74778: EMPTY
74779: LIST
74780: LIST
74781: LIST
74782: PUSH
74783: LD_VAR 0 1
74787: PUSH
74788: LD_INT 3
74790: PLUS
74791: PUSH
74792: LD_VAR 0 2
74796: PUSH
74797: LD_INT 3
74799: PLUS
74800: PUSH
74801: LD_INT 5
74803: PUSH
74804: EMPTY
74805: LIST
74806: LIST
74807: LIST
74808: PUSH
74809: LD_VAR 0 1
74813: PUSH
74814: LD_VAR 0 2
74818: PUSH
74819: LD_INT 4
74821: PLUS
74822: PUSH
74823: LD_INT 0
74825: PUSH
74826: EMPTY
74827: LIST
74828: LIST
74829: LIST
74830: PUSH
74831: EMPTY
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: ST_TO_ADDR
// end ; 1 :
74838: GO 75538
74840: LD_INT 1
74842: DOUBLE
74843: EQUAL
74844: IFTRUE 74848
74846: GO 74981
74848: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74849: LD_ADDR_VAR 0 5
74853: PUSH
74854: LD_VAR 0 1
74858: PUSH
74859: LD_VAR 0 2
74863: PUSH
74864: LD_INT 4
74866: MINUS
74867: PUSH
74868: LD_INT 3
74870: PUSH
74871: EMPTY
74872: LIST
74873: LIST
74874: LIST
74875: PUSH
74876: LD_VAR 0 1
74880: PUSH
74881: LD_INT 3
74883: MINUS
74884: PUSH
74885: LD_VAR 0 2
74889: PUSH
74890: LD_INT 3
74892: MINUS
74893: PUSH
74894: LD_INT 2
74896: PUSH
74897: EMPTY
74898: LIST
74899: LIST
74900: LIST
74901: PUSH
74902: LD_VAR 0 1
74906: PUSH
74907: LD_INT 4
74909: MINUS
74910: PUSH
74911: LD_VAR 0 2
74915: PUSH
74916: LD_INT 1
74918: PUSH
74919: EMPTY
74920: LIST
74921: LIST
74922: LIST
74923: PUSH
74924: LD_VAR 0 1
74928: PUSH
74929: LD_VAR 0 2
74933: PUSH
74934: LD_INT 3
74936: PLUS
74937: PUSH
74938: LD_INT 0
74940: PUSH
74941: EMPTY
74942: LIST
74943: LIST
74944: LIST
74945: PUSH
74946: LD_VAR 0 1
74950: PUSH
74951: LD_INT 4
74953: PLUS
74954: PUSH
74955: LD_VAR 0 2
74959: PUSH
74960: LD_INT 4
74962: PLUS
74963: PUSH
74964: LD_INT 5
74966: PUSH
74967: EMPTY
74968: LIST
74969: LIST
74970: LIST
74971: PUSH
74972: EMPTY
74973: LIST
74974: LIST
74975: LIST
74976: LIST
74977: LIST
74978: ST_TO_ADDR
// end ; 2 :
74979: GO 75538
74981: LD_INT 2
74983: DOUBLE
74984: EQUAL
74985: IFTRUE 74989
74987: GO 75118
74989: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74990: LD_ADDR_VAR 0 5
74994: PUSH
74995: LD_VAR 0 1
74999: PUSH
75000: LD_VAR 0 2
75004: PUSH
75005: LD_INT 3
75007: MINUS
75008: PUSH
75009: LD_INT 3
75011: PUSH
75012: EMPTY
75013: LIST
75014: LIST
75015: LIST
75016: PUSH
75017: LD_VAR 0 1
75021: PUSH
75022: LD_INT 4
75024: PLUS
75025: PUSH
75026: LD_VAR 0 2
75030: PUSH
75031: LD_INT 4
75033: PUSH
75034: EMPTY
75035: LIST
75036: LIST
75037: LIST
75038: PUSH
75039: LD_VAR 0 1
75043: PUSH
75044: LD_VAR 0 2
75048: PUSH
75049: LD_INT 4
75051: PLUS
75052: PUSH
75053: LD_INT 0
75055: PUSH
75056: EMPTY
75057: LIST
75058: LIST
75059: LIST
75060: PUSH
75061: LD_VAR 0 1
75065: PUSH
75066: LD_INT 3
75068: MINUS
75069: PUSH
75070: LD_VAR 0 2
75074: PUSH
75075: LD_INT 1
75077: PUSH
75078: EMPTY
75079: LIST
75080: LIST
75081: LIST
75082: PUSH
75083: LD_VAR 0 1
75087: PUSH
75088: LD_INT 4
75090: MINUS
75091: PUSH
75092: LD_VAR 0 2
75096: PUSH
75097: LD_INT 4
75099: MINUS
75100: PUSH
75101: LD_INT 2
75103: PUSH
75104: EMPTY
75105: LIST
75106: LIST
75107: LIST
75108: PUSH
75109: EMPTY
75110: LIST
75111: LIST
75112: LIST
75113: LIST
75114: LIST
75115: ST_TO_ADDR
// end ; 3 :
75116: GO 75538
75118: LD_INT 3
75120: DOUBLE
75121: EQUAL
75122: IFTRUE 75126
75124: GO 75259
75126: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75127: LD_ADDR_VAR 0 5
75131: PUSH
75132: LD_VAR 0 1
75136: PUSH
75137: LD_INT 3
75139: PLUS
75140: PUSH
75141: LD_VAR 0 2
75145: PUSH
75146: LD_INT 4
75148: PUSH
75149: EMPTY
75150: LIST
75151: LIST
75152: LIST
75153: PUSH
75154: LD_VAR 0 1
75158: PUSH
75159: LD_INT 4
75161: PLUS
75162: PUSH
75163: LD_VAR 0 2
75167: PUSH
75168: LD_INT 4
75170: PLUS
75171: PUSH
75172: LD_INT 5
75174: PUSH
75175: EMPTY
75176: LIST
75177: LIST
75178: LIST
75179: PUSH
75180: LD_VAR 0 1
75184: PUSH
75185: LD_INT 4
75187: MINUS
75188: PUSH
75189: LD_VAR 0 2
75193: PUSH
75194: LD_INT 1
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: LIST
75201: PUSH
75202: LD_VAR 0 1
75206: PUSH
75207: LD_VAR 0 2
75211: PUSH
75212: LD_INT 4
75214: MINUS
75215: PUSH
75216: LD_INT 3
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: LIST
75223: PUSH
75224: LD_VAR 0 1
75228: PUSH
75229: LD_INT 3
75231: MINUS
75232: PUSH
75233: LD_VAR 0 2
75237: PUSH
75238: LD_INT 3
75240: MINUS
75241: PUSH
75242: LD_INT 2
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: LIST
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: LIST
75254: LIST
75255: LIST
75256: ST_TO_ADDR
// end ; 4 :
75257: GO 75538
75259: LD_INT 4
75261: DOUBLE
75262: EQUAL
75263: IFTRUE 75267
75265: GO 75400
75267: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75268: LD_ADDR_VAR 0 5
75272: PUSH
75273: LD_VAR 0 1
75277: PUSH
75278: LD_VAR 0 2
75282: PUSH
75283: LD_INT 4
75285: PLUS
75286: PUSH
75287: LD_INT 0
75289: PUSH
75290: EMPTY
75291: LIST
75292: LIST
75293: LIST
75294: PUSH
75295: LD_VAR 0 1
75299: PUSH
75300: LD_INT 3
75302: PLUS
75303: PUSH
75304: LD_VAR 0 2
75308: PUSH
75309: LD_INT 3
75311: PLUS
75312: PUSH
75313: LD_INT 5
75315: PUSH
75316: EMPTY
75317: LIST
75318: LIST
75319: LIST
75320: PUSH
75321: LD_VAR 0 1
75325: PUSH
75326: LD_INT 4
75328: PLUS
75329: PUSH
75330: LD_VAR 0 2
75334: PUSH
75335: LD_INT 4
75337: PUSH
75338: EMPTY
75339: LIST
75340: LIST
75341: LIST
75342: PUSH
75343: LD_VAR 0 1
75347: PUSH
75348: LD_VAR 0 2
75352: PUSH
75353: LD_INT 3
75355: MINUS
75356: PUSH
75357: LD_INT 3
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: LIST
75364: PUSH
75365: LD_VAR 0 1
75369: PUSH
75370: LD_INT 4
75372: MINUS
75373: PUSH
75374: LD_VAR 0 2
75378: PUSH
75379: LD_INT 4
75381: MINUS
75382: PUSH
75383: LD_INT 2
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: LIST
75390: PUSH
75391: EMPTY
75392: LIST
75393: LIST
75394: LIST
75395: LIST
75396: LIST
75397: ST_TO_ADDR
// end ; 5 :
75398: GO 75538
75400: LD_INT 5
75402: DOUBLE
75403: EQUAL
75404: IFTRUE 75408
75406: GO 75537
75408: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75409: LD_ADDR_VAR 0 5
75413: PUSH
75414: LD_VAR 0 1
75418: PUSH
75419: LD_INT 4
75421: MINUS
75422: PUSH
75423: LD_VAR 0 2
75427: PUSH
75428: LD_INT 1
75430: PUSH
75431: EMPTY
75432: LIST
75433: LIST
75434: LIST
75435: PUSH
75436: LD_VAR 0 1
75440: PUSH
75441: LD_VAR 0 2
75445: PUSH
75446: LD_INT 4
75448: MINUS
75449: PUSH
75450: LD_INT 3
75452: PUSH
75453: EMPTY
75454: LIST
75455: LIST
75456: LIST
75457: PUSH
75458: LD_VAR 0 1
75462: PUSH
75463: LD_INT 4
75465: PLUS
75466: PUSH
75467: LD_VAR 0 2
75471: PUSH
75472: LD_INT 4
75474: PLUS
75475: PUSH
75476: LD_INT 5
75478: PUSH
75479: EMPTY
75480: LIST
75481: LIST
75482: LIST
75483: PUSH
75484: LD_VAR 0 1
75488: PUSH
75489: LD_INT 3
75491: PLUS
75492: PUSH
75493: LD_VAR 0 2
75497: PUSH
75498: LD_INT 4
75500: PUSH
75501: EMPTY
75502: LIST
75503: LIST
75504: LIST
75505: PUSH
75506: LD_VAR 0 1
75510: PUSH
75511: LD_VAR 0 2
75515: PUSH
75516: LD_INT 3
75518: PLUS
75519: PUSH
75520: LD_INT 0
75522: PUSH
75523: EMPTY
75524: LIST
75525: LIST
75526: LIST
75527: PUSH
75528: EMPTY
75529: LIST
75530: LIST
75531: LIST
75532: LIST
75533: LIST
75534: ST_TO_ADDR
// end ; end ;
75535: GO 75538
75537: POP
// result := list ;
75538: LD_ADDR_VAR 0 4
75542: PUSH
75543: LD_VAR 0 5
75547: ST_TO_ADDR
// end ;
75548: LD_VAR 0 4
75552: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75553: LD_INT 0
75555: PPUSH
75556: PPUSH
75557: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75558: LD_VAR 0 1
75562: NOT
75563: PUSH
75564: LD_VAR 0 2
75568: PUSH
75569: LD_INT 1
75571: PUSH
75572: LD_INT 2
75574: PUSH
75575: LD_INT 3
75577: PUSH
75578: LD_INT 4
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: LIST
75585: LIST
75586: IN
75587: NOT
75588: OR
75589: IFFALSE 75593
// exit ;
75591: GO 75685
// tmp := [ ] ;
75593: LD_ADDR_VAR 0 5
75597: PUSH
75598: EMPTY
75599: ST_TO_ADDR
// for i in units do
75600: LD_ADDR_VAR 0 4
75604: PUSH
75605: LD_VAR 0 1
75609: PUSH
75610: FOR_IN
75611: IFFALSE 75654
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75613: LD_ADDR_VAR 0 5
75617: PUSH
75618: LD_VAR 0 5
75622: PPUSH
75623: LD_VAR 0 5
75627: PUSH
75628: LD_INT 1
75630: PLUS
75631: PPUSH
75632: LD_VAR 0 4
75636: PPUSH
75637: LD_VAR 0 2
75641: PPUSH
75642: CALL_OW 259
75646: PPUSH
75647: CALL_OW 2
75651: ST_TO_ADDR
75652: GO 75610
75654: POP
75655: POP
// if not tmp then
75656: LD_VAR 0 5
75660: NOT
75661: IFFALSE 75665
// exit ;
75663: GO 75685
// result := SortListByListDesc ( units , tmp ) ;
75665: LD_ADDR_VAR 0 3
75669: PUSH
75670: LD_VAR 0 1
75674: PPUSH
75675: LD_VAR 0 5
75679: PPUSH
75680: CALL_OW 77
75684: ST_TO_ADDR
// end ;
75685: LD_VAR 0 3
75689: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75690: LD_INT 0
75692: PPUSH
75693: PPUSH
75694: PPUSH
// result := false ;
75695: LD_ADDR_VAR 0 3
75699: PUSH
75700: LD_INT 0
75702: ST_TO_ADDR
// x := GetX ( building ) ;
75703: LD_ADDR_VAR 0 4
75707: PUSH
75708: LD_VAR 0 2
75712: PPUSH
75713: CALL_OW 250
75717: ST_TO_ADDR
// y := GetY ( building ) ;
75718: LD_ADDR_VAR 0 5
75722: PUSH
75723: LD_VAR 0 2
75727: PPUSH
75728: CALL_OW 251
75732: ST_TO_ADDR
// if not building or not x or not y then
75733: LD_VAR 0 2
75737: NOT
75738: PUSH
75739: LD_VAR 0 4
75743: NOT
75744: OR
75745: PUSH
75746: LD_VAR 0 5
75750: NOT
75751: OR
75752: IFFALSE 75756
// exit ;
75754: GO 75848
// if GetTaskList ( unit ) then
75756: LD_VAR 0 1
75760: PPUSH
75761: CALL_OW 437
75765: IFFALSE 75848
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75767: LD_STRING e
75769: PUSH
75770: LD_VAR 0 1
75774: PPUSH
75775: CALL_OW 437
75779: PUSH
75780: LD_INT 1
75782: ARRAY
75783: PUSH
75784: LD_INT 1
75786: ARRAY
75787: EQUAL
75788: PUSH
75789: LD_VAR 0 4
75793: PUSH
75794: LD_VAR 0 1
75798: PPUSH
75799: CALL_OW 437
75803: PUSH
75804: LD_INT 1
75806: ARRAY
75807: PUSH
75808: LD_INT 2
75810: ARRAY
75811: EQUAL
75812: AND
75813: PUSH
75814: LD_VAR 0 5
75818: PUSH
75819: LD_VAR 0 1
75823: PPUSH
75824: CALL_OW 437
75828: PUSH
75829: LD_INT 1
75831: ARRAY
75832: PUSH
75833: LD_INT 3
75835: ARRAY
75836: EQUAL
75837: AND
75838: IFFALSE 75848
// result := true end ;
75840: LD_ADDR_VAR 0 3
75844: PUSH
75845: LD_INT 1
75847: ST_TO_ADDR
// end ;
75848: LD_VAR 0 3
75852: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75853: LD_INT 0
75855: PPUSH
// result := false ;
75856: LD_ADDR_VAR 0 4
75860: PUSH
75861: LD_INT 0
75863: ST_TO_ADDR
// if GetTaskList ( unit ) then
75864: LD_VAR 0 1
75868: PPUSH
75869: CALL_OW 437
75873: IFFALSE 75956
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75875: LD_STRING M
75877: PUSH
75878: LD_VAR 0 1
75882: PPUSH
75883: CALL_OW 437
75887: PUSH
75888: LD_INT 1
75890: ARRAY
75891: PUSH
75892: LD_INT 1
75894: ARRAY
75895: EQUAL
75896: PUSH
75897: LD_VAR 0 2
75901: PUSH
75902: LD_VAR 0 1
75906: PPUSH
75907: CALL_OW 437
75911: PUSH
75912: LD_INT 1
75914: ARRAY
75915: PUSH
75916: LD_INT 2
75918: ARRAY
75919: EQUAL
75920: AND
75921: PUSH
75922: LD_VAR 0 3
75926: PUSH
75927: LD_VAR 0 1
75931: PPUSH
75932: CALL_OW 437
75936: PUSH
75937: LD_INT 1
75939: ARRAY
75940: PUSH
75941: LD_INT 3
75943: ARRAY
75944: EQUAL
75945: AND
75946: IFFALSE 75956
// result := true ;
75948: LD_ADDR_VAR 0 4
75952: PUSH
75953: LD_INT 1
75955: ST_TO_ADDR
// end ; end ;
75956: LD_VAR 0 4
75960: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75961: LD_INT 0
75963: PPUSH
75964: PPUSH
75965: PPUSH
75966: PPUSH
// if not unit or not area then
75967: LD_VAR 0 1
75971: NOT
75972: PUSH
75973: LD_VAR 0 2
75977: NOT
75978: OR
75979: IFFALSE 75983
// exit ;
75981: GO 76147
// tmp := AreaToList ( area , i ) ;
75983: LD_ADDR_VAR 0 6
75987: PUSH
75988: LD_VAR 0 2
75992: PPUSH
75993: LD_VAR 0 5
75997: PPUSH
75998: CALL_OW 517
76002: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76003: LD_ADDR_VAR 0 5
76007: PUSH
76008: DOUBLE
76009: LD_INT 1
76011: DEC
76012: ST_TO_ADDR
76013: LD_VAR 0 6
76017: PUSH
76018: LD_INT 1
76020: ARRAY
76021: PUSH
76022: FOR_TO
76023: IFFALSE 76145
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76025: LD_ADDR_VAR 0 7
76029: PUSH
76030: LD_VAR 0 6
76034: PUSH
76035: LD_INT 1
76037: ARRAY
76038: PUSH
76039: LD_VAR 0 5
76043: ARRAY
76044: PUSH
76045: LD_VAR 0 6
76049: PUSH
76050: LD_INT 2
76052: ARRAY
76053: PUSH
76054: LD_VAR 0 5
76058: ARRAY
76059: PUSH
76060: EMPTY
76061: LIST
76062: LIST
76063: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76064: LD_VAR 0 7
76068: PUSH
76069: LD_INT 1
76071: ARRAY
76072: PPUSH
76073: LD_VAR 0 7
76077: PUSH
76078: LD_INT 2
76080: ARRAY
76081: PPUSH
76082: CALL_OW 428
76086: PUSH
76087: LD_INT 0
76089: EQUAL
76090: IFFALSE 76143
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76092: LD_VAR 0 1
76096: PPUSH
76097: LD_VAR 0 7
76101: PUSH
76102: LD_INT 1
76104: ARRAY
76105: PPUSH
76106: LD_VAR 0 7
76110: PUSH
76111: LD_INT 2
76113: ARRAY
76114: PPUSH
76115: LD_VAR 0 3
76119: PPUSH
76120: CALL_OW 48
// result := IsPlaced ( unit ) ;
76124: LD_ADDR_VAR 0 4
76128: PUSH
76129: LD_VAR 0 1
76133: PPUSH
76134: CALL_OW 305
76138: ST_TO_ADDR
// exit ;
76139: POP
76140: POP
76141: GO 76147
// end ; end ;
76143: GO 76022
76145: POP
76146: POP
// end ;
76147: LD_VAR 0 4
76151: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76152: LD_INT 0
76154: PPUSH
76155: PPUSH
76156: PPUSH
// if not side or side > 8 then
76157: LD_VAR 0 1
76161: NOT
76162: PUSH
76163: LD_VAR 0 1
76167: PUSH
76168: LD_INT 8
76170: GREATER
76171: OR
76172: IFFALSE 76176
// exit ;
76174: GO 76363
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76176: LD_ADDR_VAR 0 4
76180: PUSH
76181: LD_INT 22
76183: PUSH
76184: LD_VAR 0 1
76188: PUSH
76189: EMPTY
76190: LIST
76191: LIST
76192: PUSH
76193: LD_INT 21
76195: PUSH
76196: LD_INT 3
76198: PUSH
76199: EMPTY
76200: LIST
76201: LIST
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: PPUSH
76207: CALL_OW 69
76211: ST_TO_ADDR
// if not tmp then
76212: LD_VAR 0 4
76216: NOT
76217: IFFALSE 76221
// exit ;
76219: GO 76363
// enable_addtolog := true ;
76221: LD_ADDR_OWVAR 81
76225: PUSH
76226: LD_INT 1
76228: ST_TO_ADDR
// AddToLog ( [ ) ;
76229: LD_STRING [
76231: PPUSH
76232: CALL_OW 561
// for i in tmp do
76236: LD_ADDR_VAR 0 3
76240: PUSH
76241: LD_VAR 0 4
76245: PUSH
76246: FOR_IN
76247: IFFALSE 76354
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76249: LD_STRING [
76251: PUSH
76252: LD_VAR 0 3
76256: PPUSH
76257: CALL_OW 266
76261: STR
76262: PUSH
76263: LD_STRING , 
76265: STR
76266: PUSH
76267: LD_VAR 0 3
76271: PPUSH
76272: CALL_OW 250
76276: STR
76277: PUSH
76278: LD_STRING , 
76280: STR
76281: PUSH
76282: LD_VAR 0 3
76286: PPUSH
76287: CALL_OW 251
76291: STR
76292: PUSH
76293: LD_STRING , 
76295: STR
76296: PUSH
76297: LD_VAR 0 3
76301: PPUSH
76302: CALL_OW 254
76306: STR
76307: PUSH
76308: LD_STRING , 
76310: STR
76311: PUSH
76312: LD_VAR 0 3
76316: PPUSH
76317: LD_INT 1
76319: PPUSH
76320: CALL_OW 268
76324: STR
76325: PUSH
76326: LD_STRING , 
76328: STR
76329: PUSH
76330: LD_VAR 0 3
76334: PPUSH
76335: LD_INT 2
76337: PPUSH
76338: CALL_OW 268
76342: STR
76343: PUSH
76344: LD_STRING ],
76346: STR
76347: PPUSH
76348: CALL_OW 561
// end ;
76352: GO 76246
76354: POP
76355: POP
// AddToLog ( ]; ) ;
76356: LD_STRING ];
76358: PPUSH
76359: CALL_OW 561
// end ;
76363: LD_VAR 0 2
76367: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76368: LD_INT 0
76370: PPUSH
76371: PPUSH
76372: PPUSH
76373: PPUSH
76374: PPUSH
// if not area or not rate or not max then
76375: LD_VAR 0 1
76379: NOT
76380: PUSH
76381: LD_VAR 0 2
76385: NOT
76386: OR
76387: PUSH
76388: LD_VAR 0 4
76392: NOT
76393: OR
76394: IFFALSE 76398
// exit ;
76396: GO 76587
// while 1 do
76398: LD_INT 1
76400: IFFALSE 76587
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76402: LD_ADDR_VAR 0 9
76406: PUSH
76407: LD_VAR 0 1
76411: PPUSH
76412: LD_INT 1
76414: PPUSH
76415: CALL_OW 287
76419: PUSH
76420: LD_INT 10
76422: MUL
76423: ST_TO_ADDR
// r := rate / 10 ;
76424: LD_ADDR_VAR 0 7
76428: PUSH
76429: LD_VAR 0 2
76433: PUSH
76434: LD_INT 10
76436: DIVREAL
76437: ST_TO_ADDR
// time := 1 1$00 ;
76438: LD_ADDR_VAR 0 8
76442: PUSH
76443: LD_INT 2100
76445: ST_TO_ADDR
// if amount < min then
76446: LD_VAR 0 9
76450: PUSH
76451: LD_VAR 0 3
76455: LESS
76456: IFFALSE 76474
// r := r * 2 else
76458: LD_ADDR_VAR 0 7
76462: PUSH
76463: LD_VAR 0 7
76467: PUSH
76468: LD_INT 2
76470: MUL
76471: ST_TO_ADDR
76472: GO 76500
// if amount > max then
76474: LD_VAR 0 9
76478: PUSH
76479: LD_VAR 0 4
76483: GREATER
76484: IFFALSE 76500
// r := r / 2 ;
76486: LD_ADDR_VAR 0 7
76490: PUSH
76491: LD_VAR 0 7
76495: PUSH
76496: LD_INT 2
76498: DIVREAL
76499: ST_TO_ADDR
// time := time / r ;
76500: LD_ADDR_VAR 0 8
76504: PUSH
76505: LD_VAR 0 8
76509: PUSH
76510: LD_VAR 0 7
76514: DIVREAL
76515: ST_TO_ADDR
// if time < 0 then
76516: LD_VAR 0 8
76520: PUSH
76521: LD_INT 0
76523: LESS
76524: IFFALSE 76541
// time := time * - 1 ;
76526: LD_ADDR_VAR 0 8
76530: PUSH
76531: LD_VAR 0 8
76535: PUSH
76536: LD_INT 1
76538: NEG
76539: MUL
76540: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76541: LD_VAR 0 8
76545: PUSH
76546: LD_INT 35
76548: PPUSH
76549: LD_INT 875
76551: PPUSH
76552: CALL_OW 12
76556: PLUS
76557: PPUSH
76558: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76562: LD_INT 1
76564: PPUSH
76565: LD_INT 5
76567: PPUSH
76568: CALL_OW 12
76572: PPUSH
76573: LD_VAR 0 1
76577: PPUSH
76578: LD_INT 1
76580: PPUSH
76581: CALL_OW 55
// end ;
76585: GO 76398
// end ;
76587: LD_VAR 0 5
76591: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76592: LD_INT 0
76594: PPUSH
76595: PPUSH
76596: PPUSH
76597: PPUSH
76598: PPUSH
76599: PPUSH
76600: PPUSH
76601: PPUSH
// if not turrets or not factories then
76602: LD_VAR 0 1
76606: NOT
76607: PUSH
76608: LD_VAR 0 2
76612: NOT
76613: OR
76614: IFFALSE 76618
// exit ;
76616: GO 76925
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76618: LD_ADDR_VAR 0 10
76622: PUSH
76623: LD_INT 5
76625: PUSH
76626: LD_INT 6
76628: PUSH
76629: EMPTY
76630: LIST
76631: LIST
76632: PUSH
76633: LD_INT 2
76635: PUSH
76636: LD_INT 4
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: PUSH
76643: LD_INT 3
76645: PUSH
76646: LD_INT 5
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: LIST
76657: PUSH
76658: LD_INT 24
76660: PUSH
76661: LD_INT 25
76663: PUSH
76664: EMPTY
76665: LIST
76666: LIST
76667: PUSH
76668: LD_INT 23
76670: PUSH
76671: LD_INT 27
76673: PUSH
76674: EMPTY
76675: LIST
76676: LIST
76677: PUSH
76678: EMPTY
76679: LIST
76680: LIST
76681: PUSH
76682: LD_INT 42
76684: PUSH
76685: LD_INT 43
76687: PUSH
76688: EMPTY
76689: LIST
76690: LIST
76691: PUSH
76692: LD_INT 44
76694: PUSH
76695: LD_INT 46
76697: PUSH
76698: EMPTY
76699: LIST
76700: LIST
76701: PUSH
76702: LD_INT 45
76704: PUSH
76705: LD_INT 47
76707: PUSH
76708: EMPTY
76709: LIST
76710: LIST
76711: PUSH
76712: EMPTY
76713: LIST
76714: LIST
76715: LIST
76716: PUSH
76717: EMPTY
76718: LIST
76719: LIST
76720: LIST
76721: ST_TO_ADDR
// result := [ ] ;
76722: LD_ADDR_VAR 0 3
76726: PUSH
76727: EMPTY
76728: ST_TO_ADDR
// for i in turrets do
76729: LD_ADDR_VAR 0 4
76733: PUSH
76734: LD_VAR 0 1
76738: PUSH
76739: FOR_IN
76740: IFFALSE 76923
// begin nat := GetNation ( i ) ;
76742: LD_ADDR_VAR 0 7
76746: PUSH
76747: LD_VAR 0 4
76751: PPUSH
76752: CALL_OW 248
76756: ST_TO_ADDR
// weapon := 0 ;
76757: LD_ADDR_VAR 0 8
76761: PUSH
76762: LD_INT 0
76764: ST_TO_ADDR
// if not nat then
76765: LD_VAR 0 7
76769: NOT
76770: IFFALSE 76774
// continue ;
76772: GO 76739
// for j in list [ nat ] do
76774: LD_ADDR_VAR 0 5
76778: PUSH
76779: LD_VAR 0 10
76783: PUSH
76784: LD_VAR 0 7
76788: ARRAY
76789: PUSH
76790: FOR_IN
76791: IFFALSE 76832
// if GetBWeapon ( i ) = j [ 1 ] then
76793: LD_VAR 0 4
76797: PPUSH
76798: CALL_OW 269
76802: PUSH
76803: LD_VAR 0 5
76807: PUSH
76808: LD_INT 1
76810: ARRAY
76811: EQUAL
76812: IFFALSE 76830
// begin weapon := j [ 2 ] ;
76814: LD_ADDR_VAR 0 8
76818: PUSH
76819: LD_VAR 0 5
76823: PUSH
76824: LD_INT 2
76826: ARRAY
76827: ST_TO_ADDR
// break ;
76828: GO 76832
// end ;
76830: GO 76790
76832: POP
76833: POP
// if not weapon then
76834: LD_VAR 0 8
76838: NOT
76839: IFFALSE 76843
// continue ;
76841: GO 76739
// for k in factories do
76843: LD_ADDR_VAR 0 6
76847: PUSH
76848: LD_VAR 0 2
76852: PUSH
76853: FOR_IN
76854: IFFALSE 76919
// begin weapons := AvailableWeaponList ( k ) ;
76856: LD_ADDR_VAR 0 9
76860: PUSH
76861: LD_VAR 0 6
76865: PPUSH
76866: CALL_OW 478
76870: ST_TO_ADDR
// if not weapons then
76871: LD_VAR 0 9
76875: NOT
76876: IFFALSE 76880
// continue ;
76878: GO 76853
// if weapon in weapons then
76880: LD_VAR 0 8
76884: PUSH
76885: LD_VAR 0 9
76889: IN
76890: IFFALSE 76917
// begin result := [ i , weapon ] ;
76892: LD_ADDR_VAR 0 3
76896: PUSH
76897: LD_VAR 0 4
76901: PUSH
76902: LD_VAR 0 8
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: ST_TO_ADDR
// exit ;
76911: POP
76912: POP
76913: POP
76914: POP
76915: GO 76925
// end ; end ;
76917: GO 76853
76919: POP
76920: POP
// end ;
76921: GO 76739
76923: POP
76924: POP
// end ;
76925: LD_VAR 0 3
76929: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76930: LD_INT 0
76932: PPUSH
// if not side or side > 8 then
76933: LD_VAR 0 3
76937: NOT
76938: PUSH
76939: LD_VAR 0 3
76943: PUSH
76944: LD_INT 8
76946: GREATER
76947: OR
76948: IFFALSE 76952
// exit ;
76950: GO 77011
// if not range then
76952: LD_VAR 0 4
76956: NOT
76957: IFFALSE 76968
// range := - 12 ;
76959: LD_ADDR_VAR 0 4
76963: PUSH
76964: LD_INT 12
76966: NEG
76967: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76968: LD_VAR 0 1
76972: PPUSH
76973: LD_VAR 0 2
76977: PPUSH
76978: LD_VAR 0 3
76982: PPUSH
76983: LD_VAR 0 4
76987: PPUSH
76988: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76992: LD_VAR 0 1
76996: PPUSH
76997: LD_VAR 0 2
77001: PPUSH
77002: LD_VAR 0 3
77006: PPUSH
77007: CALL_OW 331
// end ;
77011: LD_VAR 0 5
77015: RET
// export function Video ( mode ) ; begin
77016: LD_INT 0
77018: PPUSH
// ingame_video = mode ;
77019: LD_ADDR_OWVAR 52
77023: PUSH
77024: LD_VAR 0 1
77028: ST_TO_ADDR
// interface_hidden = mode ;
77029: LD_ADDR_OWVAR 54
77033: PUSH
77034: LD_VAR 0 1
77038: ST_TO_ADDR
// end ;
77039: LD_VAR 0 2
77043: RET
// export function Join ( array , element ) ; begin
77044: LD_INT 0
77046: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77047: LD_ADDR_VAR 0 3
77051: PUSH
77052: LD_VAR 0 1
77056: PPUSH
77057: LD_VAR 0 1
77061: PUSH
77062: LD_INT 1
77064: PLUS
77065: PPUSH
77066: LD_VAR 0 2
77070: PPUSH
77071: CALL_OW 1
77075: ST_TO_ADDR
// end ;
77076: LD_VAR 0 3
77080: RET
// export function JoinUnion ( array , element ) ; begin
77081: LD_INT 0
77083: PPUSH
// result := array union element ;
77084: LD_ADDR_VAR 0 3
77088: PUSH
77089: LD_VAR 0 1
77093: PUSH
77094: LD_VAR 0 2
77098: UNION
77099: ST_TO_ADDR
// end ;
77100: LD_VAR 0 3
77104: RET
// export function GetBehemoths ( side ) ; begin
77105: LD_INT 0
77107: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77108: LD_ADDR_VAR 0 2
77112: PUSH
77113: LD_INT 22
77115: PUSH
77116: LD_VAR 0 1
77120: PUSH
77121: EMPTY
77122: LIST
77123: LIST
77124: PUSH
77125: LD_INT 31
77127: PUSH
77128: LD_INT 25
77130: PUSH
77131: EMPTY
77132: LIST
77133: LIST
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: PPUSH
77139: CALL_OW 69
77143: ST_TO_ADDR
// end ;
77144: LD_VAR 0 2
77148: RET
// export function Shuffle ( array ) ; var i , index ; begin
77149: LD_INT 0
77151: PPUSH
77152: PPUSH
77153: PPUSH
// result := [ ] ;
77154: LD_ADDR_VAR 0 2
77158: PUSH
77159: EMPTY
77160: ST_TO_ADDR
// if not array then
77161: LD_VAR 0 1
77165: NOT
77166: IFFALSE 77170
// exit ;
77168: GO 77269
// Randomize ;
77170: CALL_OW 10
// for i = array downto 1 do
77174: LD_ADDR_VAR 0 3
77178: PUSH
77179: DOUBLE
77180: LD_VAR 0 1
77184: INC
77185: ST_TO_ADDR
77186: LD_INT 1
77188: PUSH
77189: FOR_DOWNTO
77190: IFFALSE 77267
// begin index := rand ( 1 , array ) ;
77192: LD_ADDR_VAR 0 4
77196: PUSH
77197: LD_INT 1
77199: PPUSH
77200: LD_VAR 0 1
77204: PPUSH
77205: CALL_OW 12
77209: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77210: LD_ADDR_VAR 0 2
77214: PUSH
77215: LD_VAR 0 2
77219: PPUSH
77220: LD_VAR 0 2
77224: PUSH
77225: LD_INT 1
77227: PLUS
77228: PPUSH
77229: LD_VAR 0 1
77233: PUSH
77234: LD_VAR 0 4
77238: ARRAY
77239: PPUSH
77240: CALL_OW 2
77244: ST_TO_ADDR
// array := Delete ( array , index ) ;
77245: LD_ADDR_VAR 0 1
77249: PUSH
77250: LD_VAR 0 1
77254: PPUSH
77255: LD_VAR 0 4
77259: PPUSH
77260: CALL_OW 3
77264: ST_TO_ADDR
// end ;
77265: GO 77189
77267: POP
77268: POP
// end ;
77269: LD_VAR 0 2
77273: RET
// export function GetBaseMaterials ( base ) ; begin
77274: LD_INT 0
77276: PPUSH
// result := [ 0 , 0 , 0 ] ;
77277: LD_ADDR_VAR 0 2
77281: PUSH
77282: LD_INT 0
77284: PUSH
77285: LD_INT 0
77287: PUSH
77288: LD_INT 0
77290: PUSH
77291: EMPTY
77292: LIST
77293: LIST
77294: LIST
77295: ST_TO_ADDR
// if not base then
77296: LD_VAR 0 1
77300: NOT
77301: IFFALSE 77305
// exit ;
77303: GO 77354
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77305: LD_ADDR_VAR 0 2
77309: PUSH
77310: LD_VAR 0 1
77314: PPUSH
77315: LD_INT 1
77317: PPUSH
77318: CALL_OW 275
77322: PUSH
77323: LD_VAR 0 1
77327: PPUSH
77328: LD_INT 2
77330: PPUSH
77331: CALL_OW 275
77335: PUSH
77336: LD_VAR 0 1
77340: PPUSH
77341: LD_INT 3
77343: PPUSH
77344: CALL_OW 275
77348: PUSH
77349: EMPTY
77350: LIST
77351: LIST
77352: LIST
77353: ST_TO_ADDR
// end ;
77354: LD_VAR 0 2
77358: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77359: LD_INT 0
77361: PPUSH
77362: PPUSH
// result := array ;
77363: LD_ADDR_VAR 0 3
77367: PUSH
77368: LD_VAR 0 1
77372: ST_TO_ADDR
// if size >= result then
77373: LD_VAR 0 2
77377: PUSH
77378: LD_VAR 0 3
77382: GREATEREQUAL
77383: IFFALSE 77387
// exit ;
77385: GO 77437
// if size then
77387: LD_VAR 0 2
77391: IFFALSE 77437
// for i := array downto size do
77393: LD_ADDR_VAR 0 4
77397: PUSH
77398: DOUBLE
77399: LD_VAR 0 1
77403: INC
77404: ST_TO_ADDR
77405: LD_VAR 0 2
77409: PUSH
77410: FOR_DOWNTO
77411: IFFALSE 77435
// result := Delete ( result , result ) ;
77413: LD_ADDR_VAR 0 3
77417: PUSH
77418: LD_VAR 0 3
77422: PPUSH
77423: LD_VAR 0 3
77427: PPUSH
77428: CALL_OW 3
77432: ST_TO_ADDR
77433: GO 77410
77435: POP
77436: POP
// end ;
77437: LD_VAR 0 3
77441: RET
// export function ComExit ( unit ) ; var tmp ; begin
77442: LD_INT 0
77444: PPUSH
77445: PPUSH
// if not IsInUnit ( unit ) then
77446: LD_VAR 0 1
77450: PPUSH
77451: CALL_OW 310
77455: NOT
77456: IFFALSE 77460
// exit ;
77458: GO 77520
// tmp := IsInUnit ( unit ) ;
77460: LD_ADDR_VAR 0 3
77464: PUSH
77465: LD_VAR 0 1
77469: PPUSH
77470: CALL_OW 310
77474: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77475: LD_VAR 0 3
77479: PPUSH
77480: CALL_OW 247
77484: PUSH
77485: LD_INT 2
77487: EQUAL
77488: IFFALSE 77501
// ComExitVehicle ( unit ) else
77490: LD_VAR 0 1
77494: PPUSH
77495: CALL_OW 121
77499: GO 77510
// ComExitBuilding ( unit ) ;
77501: LD_VAR 0 1
77505: PPUSH
77506: CALL_OW 122
// result := tmp ;
77510: LD_ADDR_VAR 0 2
77514: PUSH
77515: LD_VAR 0 3
77519: ST_TO_ADDR
// end ;
77520: LD_VAR 0 2
77524: RET
// export function ComExitAll ( units ) ; var i ; begin
77525: LD_INT 0
77527: PPUSH
77528: PPUSH
// if not units then
77529: LD_VAR 0 1
77533: NOT
77534: IFFALSE 77538
// exit ;
77536: GO 77564
// for i in units do
77538: LD_ADDR_VAR 0 3
77542: PUSH
77543: LD_VAR 0 1
77547: PUSH
77548: FOR_IN
77549: IFFALSE 77562
// ComExit ( i ) ;
77551: LD_VAR 0 3
77555: PPUSH
77556: CALL 77442 0 1
77560: GO 77548
77562: POP
77563: POP
// end ;
77564: LD_VAR 0 2
77568: RET
// export function ResetHc ; begin
77569: LD_INT 0
77571: PPUSH
// InitHc ;
77572: CALL_OW 19
// hc_importance := 0 ;
77576: LD_ADDR_OWVAR 32
77580: PUSH
77581: LD_INT 0
77583: ST_TO_ADDR
// end ;
77584: LD_VAR 0 1
77588: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77589: LD_INT 0
77591: PPUSH
77592: PPUSH
77593: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77594: LD_ADDR_VAR 0 6
77598: PUSH
77599: LD_VAR 0 1
77603: PUSH
77604: LD_VAR 0 3
77608: PLUS
77609: PUSH
77610: LD_INT 2
77612: DIV
77613: ST_TO_ADDR
// if _x < 0 then
77614: LD_VAR 0 6
77618: PUSH
77619: LD_INT 0
77621: LESS
77622: IFFALSE 77639
// _x := _x * - 1 ;
77624: LD_ADDR_VAR 0 6
77628: PUSH
77629: LD_VAR 0 6
77633: PUSH
77634: LD_INT 1
77636: NEG
77637: MUL
77638: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77639: LD_ADDR_VAR 0 7
77643: PUSH
77644: LD_VAR 0 2
77648: PUSH
77649: LD_VAR 0 4
77653: PLUS
77654: PUSH
77655: LD_INT 2
77657: DIV
77658: ST_TO_ADDR
// if _y < 0 then
77659: LD_VAR 0 7
77663: PUSH
77664: LD_INT 0
77666: LESS
77667: IFFALSE 77684
// _y := _y * - 1 ;
77669: LD_ADDR_VAR 0 7
77673: PUSH
77674: LD_VAR 0 7
77678: PUSH
77679: LD_INT 1
77681: NEG
77682: MUL
77683: ST_TO_ADDR
// result := [ _x , _y ] ;
77684: LD_ADDR_VAR 0 5
77688: PUSH
77689: LD_VAR 0 6
77693: PUSH
77694: LD_VAR 0 7
77698: PUSH
77699: EMPTY
77700: LIST
77701: LIST
77702: ST_TO_ADDR
// end ;
77703: LD_VAR 0 5
77707: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77708: LD_INT 0
77710: PPUSH
77711: PPUSH
77712: PPUSH
77713: PPUSH
// task := GetTaskList ( unit ) ;
77714: LD_ADDR_VAR 0 7
77718: PUSH
77719: LD_VAR 0 1
77723: PPUSH
77724: CALL_OW 437
77728: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77729: LD_VAR 0 7
77733: NOT
77734: PUSH
77735: LD_VAR 0 1
77739: PPUSH
77740: LD_VAR 0 2
77744: PPUSH
77745: CALL_OW 308
77749: NOT
77750: AND
77751: IFFALSE 77755
// exit ;
77753: GO 77873
// if IsInArea ( unit , area ) then
77755: LD_VAR 0 1
77759: PPUSH
77760: LD_VAR 0 2
77764: PPUSH
77765: CALL_OW 308
77769: IFFALSE 77787
// begin ComMoveToArea ( unit , goAway ) ;
77771: LD_VAR 0 1
77775: PPUSH
77776: LD_VAR 0 3
77780: PPUSH
77781: CALL_OW 113
// exit ;
77785: GO 77873
// end ; if task [ 1 ] [ 1 ] <> M then
77787: LD_VAR 0 7
77791: PUSH
77792: LD_INT 1
77794: ARRAY
77795: PUSH
77796: LD_INT 1
77798: ARRAY
77799: PUSH
77800: LD_STRING M
77802: NONEQUAL
77803: IFFALSE 77807
// exit ;
77805: GO 77873
// x := task [ 1 ] [ 2 ] ;
77807: LD_ADDR_VAR 0 5
77811: PUSH
77812: LD_VAR 0 7
77816: PUSH
77817: LD_INT 1
77819: ARRAY
77820: PUSH
77821: LD_INT 2
77823: ARRAY
77824: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77825: LD_ADDR_VAR 0 6
77829: PUSH
77830: LD_VAR 0 7
77834: PUSH
77835: LD_INT 1
77837: ARRAY
77838: PUSH
77839: LD_INT 3
77841: ARRAY
77842: ST_TO_ADDR
// if InArea ( x , y , area ) then
77843: LD_VAR 0 5
77847: PPUSH
77848: LD_VAR 0 6
77852: PPUSH
77853: LD_VAR 0 2
77857: PPUSH
77858: CALL_OW 309
77862: IFFALSE 77873
// ComStop ( unit ) ;
77864: LD_VAR 0 1
77868: PPUSH
77869: CALL_OW 141
// end ;
77873: LD_VAR 0 4
77877: RET
// export function Abs ( value ) ; begin
77878: LD_INT 0
77880: PPUSH
// result := value ;
77881: LD_ADDR_VAR 0 2
77885: PUSH
77886: LD_VAR 0 1
77890: ST_TO_ADDR
// if value < 0 then
77891: LD_VAR 0 1
77895: PUSH
77896: LD_INT 0
77898: LESS
77899: IFFALSE 77916
// result := value * - 1 ;
77901: LD_ADDR_VAR 0 2
77905: PUSH
77906: LD_VAR 0 1
77910: PUSH
77911: LD_INT 1
77913: NEG
77914: MUL
77915: ST_TO_ADDR
// end ;
77916: LD_VAR 0 2
77920: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77921: LD_INT 0
77923: PPUSH
77924: PPUSH
77925: PPUSH
77926: PPUSH
77927: PPUSH
77928: PPUSH
77929: PPUSH
77930: PPUSH
// if not unit or not building then
77931: LD_VAR 0 1
77935: NOT
77936: PUSH
77937: LD_VAR 0 2
77941: NOT
77942: OR
77943: IFFALSE 77947
// exit ;
77945: GO 78173
// x := GetX ( building ) ;
77947: LD_ADDR_VAR 0 4
77951: PUSH
77952: LD_VAR 0 2
77956: PPUSH
77957: CALL_OW 250
77961: ST_TO_ADDR
// y := GetY ( building ) ;
77962: LD_ADDR_VAR 0 6
77966: PUSH
77967: LD_VAR 0 2
77971: PPUSH
77972: CALL_OW 251
77976: ST_TO_ADDR
// d := GetDir ( building ) ;
77977: LD_ADDR_VAR 0 8
77981: PUSH
77982: LD_VAR 0 2
77986: PPUSH
77987: CALL_OW 254
77991: ST_TO_ADDR
// r := 4 ;
77992: LD_ADDR_VAR 0 9
77996: PUSH
77997: LD_INT 4
77999: ST_TO_ADDR
// for i := 1 to 5 do
78000: LD_ADDR_VAR 0 10
78004: PUSH
78005: DOUBLE
78006: LD_INT 1
78008: DEC
78009: ST_TO_ADDR
78010: LD_INT 5
78012: PUSH
78013: FOR_TO
78014: IFFALSE 78171
// begin _x := ShiftX ( x , d , r + i ) ;
78016: LD_ADDR_VAR 0 5
78020: PUSH
78021: LD_VAR 0 4
78025: PPUSH
78026: LD_VAR 0 8
78030: PPUSH
78031: LD_VAR 0 9
78035: PUSH
78036: LD_VAR 0 10
78040: PLUS
78041: PPUSH
78042: CALL_OW 272
78046: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78047: LD_ADDR_VAR 0 7
78051: PUSH
78052: LD_VAR 0 6
78056: PPUSH
78057: LD_VAR 0 8
78061: PPUSH
78062: LD_VAR 0 9
78066: PUSH
78067: LD_VAR 0 10
78071: PLUS
78072: PPUSH
78073: CALL_OW 273
78077: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78078: LD_VAR 0 5
78082: PPUSH
78083: LD_VAR 0 7
78087: PPUSH
78088: CALL_OW 488
78092: PUSH
78093: LD_VAR 0 5
78097: PPUSH
78098: LD_VAR 0 7
78102: PPUSH
78103: CALL_OW 428
78107: PPUSH
78108: CALL_OW 247
78112: PUSH
78113: LD_INT 3
78115: PUSH
78116: LD_INT 2
78118: PUSH
78119: EMPTY
78120: LIST
78121: LIST
78122: IN
78123: NOT
78124: AND
78125: IFFALSE 78169
// begin ComMoveXY ( unit , _x , _y ) ;
78127: LD_VAR 0 1
78131: PPUSH
78132: LD_VAR 0 5
78136: PPUSH
78137: LD_VAR 0 7
78141: PPUSH
78142: CALL_OW 111
// result := [ _x , _y ] ;
78146: LD_ADDR_VAR 0 3
78150: PUSH
78151: LD_VAR 0 5
78155: PUSH
78156: LD_VAR 0 7
78160: PUSH
78161: EMPTY
78162: LIST
78163: LIST
78164: ST_TO_ADDR
// exit ;
78165: POP
78166: POP
78167: GO 78173
// end ; end ;
78169: GO 78013
78171: POP
78172: POP
// end ;
78173: LD_VAR 0 3
78177: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78178: LD_INT 0
78180: PPUSH
78181: PPUSH
78182: PPUSH
// result := 0 ;
78183: LD_ADDR_VAR 0 3
78187: PUSH
78188: LD_INT 0
78190: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78191: LD_VAR 0 1
78195: PUSH
78196: LD_INT 0
78198: LESS
78199: PUSH
78200: LD_VAR 0 1
78204: PUSH
78205: LD_INT 8
78207: GREATER
78208: OR
78209: PUSH
78210: LD_VAR 0 2
78214: PUSH
78215: LD_INT 0
78217: LESS
78218: OR
78219: PUSH
78220: LD_VAR 0 2
78224: PUSH
78225: LD_INT 8
78227: GREATER
78228: OR
78229: IFFALSE 78233
// exit ;
78231: GO 78308
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78233: LD_ADDR_VAR 0 4
78237: PUSH
78238: LD_INT 22
78240: PUSH
78241: LD_VAR 0 2
78245: PUSH
78246: EMPTY
78247: LIST
78248: LIST
78249: PPUSH
78250: CALL_OW 69
78254: PUSH
78255: FOR_IN
78256: IFFALSE 78306
// begin un := UnitShoot ( i ) ;
78258: LD_ADDR_VAR 0 5
78262: PUSH
78263: LD_VAR 0 4
78267: PPUSH
78268: CALL_OW 504
78272: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78273: LD_VAR 0 5
78277: PPUSH
78278: CALL_OW 255
78282: PUSH
78283: LD_VAR 0 1
78287: EQUAL
78288: IFFALSE 78304
// begin result := un ;
78290: LD_ADDR_VAR 0 3
78294: PUSH
78295: LD_VAR 0 5
78299: ST_TO_ADDR
// exit ;
78300: POP
78301: POP
78302: GO 78308
// end ; end ;
78304: GO 78255
78306: POP
78307: POP
// end ;
78308: LD_VAR 0 3
78312: RET
// export function GetCargoBay ( units ) ; begin
78313: LD_INT 0
78315: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78316: LD_ADDR_VAR 0 2
78320: PUSH
78321: LD_VAR 0 1
78325: PPUSH
78326: LD_INT 2
78328: PUSH
78329: LD_INT 34
78331: PUSH
78332: LD_INT 12
78334: PUSH
78335: EMPTY
78336: LIST
78337: LIST
78338: PUSH
78339: LD_INT 34
78341: PUSH
78342: LD_INT 51
78344: PUSH
78345: EMPTY
78346: LIST
78347: LIST
78348: PUSH
78349: LD_INT 34
78351: PUSH
78352: LD_INT 32
78354: PUSH
78355: EMPTY
78356: LIST
78357: LIST
78358: PUSH
78359: LD_INT 34
78361: PUSH
78362: LD_INT 89
78364: PUSH
78365: EMPTY
78366: LIST
78367: LIST
78368: PUSH
78369: EMPTY
78370: LIST
78371: LIST
78372: LIST
78373: LIST
78374: LIST
78375: PPUSH
78376: CALL_OW 72
78380: ST_TO_ADDR
// end ;
78381: LD_VAR 0 2
78385: RET
// export function Negate ( value ) ; begin
78386: LD_INT 0
78388: PPUSH
// result := not value ;
78389: LD_ADDR_VAR 0 2
78393: PUSH
78394: LD_VAR 0 1
78398: NOT
78399: ST_TO_ADDR
// end ;
78400: LD_VAR 0 2
78404: RET
// export function Inc ( value ) ; begin
78405: LD_INT 0
78407: PPUSH
// result := value + 1 ;
78408: LD_ADDR_VAR 0 2
78412: PUSH
78413: LD_VAR 0 1
78417: PUSH
78418: LD_INT 1
78420: PLUS
78421: ST_TO_ADDR
// end ;
78422: LD_VAR 0 2
78426: RET
// export function Dec ( value ) ; begin
78427: LD_INT 0
78429: PPUSH
// result := value - 1 ;
78430: LD_ADDR_VAR 0 2
78434: PUSH
78435: LD_VAR 0 1
78439: PUSH
78440: LD_INT 1
78442: MINUS
78443: ST_TO_ADDR
// end ;
78444: LD_VAR 0 2
78448: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78449: LD_INT 0
78451: PPUSH
78452: PPUSH
78453: PPUSH
78454: PPUSH
78455: PPUSH
78456: PPUSH
78457: PPUSH
78458: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78459: LD_VAR 0 1
78463: PPUSH
78464: LD_VAR 0 2
78468: PPUSH
78469: CALL_OW 488
78473: NOT
78474: PUSH
78475: LD_VAR 0 3
78479: PPUSH
78480: LD_VAR 0 4
78484: PPUSH
78485: CALL_OW 488
78489: NOT
78490: OR
78491: IFFALSE 78504
// begin result := - 1 ;
78493: LD_ADDR_VAR 0 5
78497: PUSH
78498: LD_INT 1
78500: NEG
78501: ST_TO_ADDR
// exit ;
78502: GO 78739
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78504: LD_ADDR_VAR 0 12
78508: PUSH
78509: LD_VAR 0 1
78513: PPUSH
78514: LD_VAR 0 2
78518: PPUSH
78519: LD_VAR 0 3
78523: PPUSH
78524: LD_VAR 0 4
78528: PPUSH
78529: CALL 77589 0 4
78533: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78534: LD_ADDR_VAR 0 11
78538: PUSH
78539: LD_VAR 0 1
78543: PPUSH
78544: LD_VAR 0 2
78548: PPUSH
78549: LD_VAR 0 12
78553: PUSH
78554: LD_INT 1
78556: ARRAY
78557: PPUSH
78558: LD_VAR 0 12
78562: PUSH
78563: LD_INT 2
78565: ARRAY
78566: PPUSH
78567: CALL_OW 298
78571: ST_TO_ADDR
// distance := 9999 ;
78572: LD_ADDR_VAR 0 10
78576: PUSH
78577: LD_INT 9999
78579: ST_TO_ADDR
// for i := 0 to 5 do
78580: LD_ADDR_VAR 0 6
78584: PUSH
78585: DOUBLE
78586: LD_INT 0
78588: DEC
78589: ST_TO_ADDR
78590: LD_INT 5
78592: PUSH
78593: FOR_TO
78594: IFFALSE 78737
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78596: LD_ADDR_VAR 0 7
78600: PUSH
78601: LD_VAR 0 1
78605: PPUSH
78606: LD_VAR 0 6
78610: PPUSH
78611: LD_VAR 0 11
78615: PPUSH
78616: CALL_OW 272
78620: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78621: LD_ADDR_VAR 0 8
78625: PUSH
78626: LD_VAR 0 2
78630: PPUSH
78631: LD_VAR 0 6
78635: PPUSH
78636: LD_VAR 0 11
78640: PPUSH
78641: CALL_OW 273
78645: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78646: LD_VAR 0 7
78650: PPUSH
78651: LD_VAR 0 8
78655: PPUSH
78656: CALL_OW 488
78660: NOT
78661: IFFALSE 78665
// continue ;
78663: GO 78593
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78665: LD_ADDR_VAR 0 9
78669: PUSH
78670: LD_VAR 0 12
78674: PUSH
78675: LD_INT 1
78677: ARRAY
78678: PPUSH
78679: LD_VAR 0 12
78683: PUSH
78684: LD_INT 2
78686: ARRAY
78687: PPUSH
78688: LD_VAR 0 7
78692: PPUSH
78693: LD_VAR 0 8
78697: PPUSH
78698: CALL_OW 298
78702: ST_TO_ADDR
// if tmp < distance then
78703: LD_VAR 0 9
78707: PUSH
78708: LD_VAR 0 10
78712: LESS
78713: IFFALSE 78735
// begin result := i ;
78715: LD_ADDR_VAR 0 5
78719: PUSH
78720: LD_VAR 0 6
78724: ST_TO_ADDR
// distance := tmp ;
78725: LD_ADDR_VAR 0 10
78729: PUSH
78730: LD_VAR 0 9
78734: ST_TO_ADDR
// end ; end ;
78735: GO 78593
78737: POP
78738: POP
// end ;
78739: LD_VAR 0 5
78743: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78744: LD_INT 0
78746: PPUSH
78747: PPUSH
// if not driver or not IsInUnit ( driver ) then
78748: LD_VAR 0 1
78752: NOT
78753: PUSH
78754: LD_VAR 0 1
78758: PPUSH
78759: CALL_OW 310
78763: NOT
78764: OR
78765: IFFALSE 78769
// exit ;
78767: GO 78859
// vehicle := IsInUnit ( driver ) ;
78769: LD_ADDR_VAR 0 3
78773: PUSH
78774: LD_VAR 0 1
78778: PPUSH
78779: CALL_OW 310
78783: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78784: LD_VAR 0 1
78788: PPUSH
78789: LD_STRING \
78791: PUSH
78792: LD_INT 0
78794: PUSH
78795: LD_INT 0
78797: PUSH
78798: LD_INT 0
78800: PUSH
78801: LD_INT 0
78803: PUSH
78804: LD_INT 0
78806: PUSH
78807: LD_INT 0
78809: PUSH
78810: EMPTY
78811: LIST
78812: LIST
78813: LIST
78814: LIST
78815: LIST
78816: LIST
78817: LIST
78818: PUSH
78819: LD_STRING E
78821: PUSH
78822: LD_INT 0
78824: PUSH
78825: LD_INT 0
78827: PUSH
78828: LD_VAR 0 3
78832: PUSH
78833: LD_INT 0
78835: PUSH
78836: LD_INT 0
78838: PUSH
78839: LD_INT 0
78841: PUSH
78842: EMPTY
78843: LIST
78844: LIST
78845: LIST
78846: LIST
78847: LIST
78848: LIST
78849: LIST
78850: PUSH
78851: EMPTY
78852: LIST
78853: LIST
78854: PPUSH
78855: CALL_OW 446
// end ;
78859: LD_VAR 0 2
78863: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78864: LD_INT 0
78866: PPUSH
78867: PPUSH
// if not driver or not IsInUnit ( driver ) then
78868: LD_VAR 0 1
78872: NOT
78873: PUSH
78874: LD_VAR 0 1
78878: PPUSH
78879: CALL_OW 310
78883: NOT
78884: OR
78885: IFFALSE 78889
// exit ;
78887: GO 78979
// vehicle := IsInUnit ( driver ) ;
78889: LD_ADDR_VAR 0 3
78893: PUSH
78894: LD_VAR 0 1
78898: PPUSH
78899: CALL_OW 310
78903: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78904: LD_VAR 0 1
78908: PPUSH
78909: LD_STRING \
78911: PUSH
78912: LD_INT 0
78914: PUSH
78915: LD_INT 0
78917: PUSH
78918: LD_INT 0
78920: PUSH
78921: LD_INT 0
78923: PUSH
78924: LD_INT 0
78926: PUSH
78927: LD_INT 0
78929: PUSH
78930: EMPTY
78931: LIST
78932: LIST
78933: LIST
78934: LIST
78935: LIST
78936: LIST
78937: LIST
78938: PUSH
78939: LD_STRING E
78941: PUSH
78942: LD_INT 0
78944: PUSH
78945: LD_INT 0
78947: PUSH
78948: LD_VAR 0 3
78952: PUSH
78953: LD_INT 0
78955: PUSH
78956: LD_INT 0
78958: PUSH
78959: LD_INT 0
78961: PUSH
78962: EMPTY
78963: LIST
78964: LIST
78965: LIST
78966: LIST
78967: LIST
78968: LIST
78969: LIST
78970: PUSH
78971: EMPTY
78972: LIST
78973: LIST
78974: PPUSH
78975: CALL_OW 447
// end ;
78979: LD_VAR 0 2
78983: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78984: LD_INT 0
78986: PPUSH
78987: PPUSH
78988: PPUSH
// tmp := [ ] ;
78989: LD_ADDR_VAR 0 5
78993: PUSH
78994: EMPTY
78995: ST_TO_ADDR
// for i in units do
78996: LD_ADDR_VAR 0 4
79000: PUSH
79001: LD_VAR 0 1
79005: PUSH
79006: FOR_IN
79007: IFFALSE 79045
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79009: LD_ADDR_VAR 0 5
79013: PUSH
79014: LD_VAR 0 5
79018: PPUSH
79019: LD_VAR 0 5
79023: PUSH
79024: LD_INT 1
79026: PLUS
79027: PPUSH
79028: LD_VAR 0 4
79032: PPUSH
79033: CALL_OW 256
79037: PPUSH
79038: CALL_OW 2
79042: ST_TO_ADDR
79043: GO 79006
79045: POP
79046: POP
// if not tmp then
79047: LD_VAR 0 5
79051: NOT
79052: IFFALSE 79056
// exit ;
79054: GO 79104
// if asc then
79056: LD_VAR 0 2
79060: IFFALSE 79084
// result := SortListByListAsc ( units , tmp ) else
79062: LD_ADDR_VAR 0 3
79066: PUSH
79067: LD_VAR 0 1
79071: PPUSH
79072: LD_VAR 0 5
79076: PPUSH
79077: CALL_OW 76
79081: ST_TO_ADDR
79082: GO 79104
// result := SortListByListDesc ( units , tmp ) ;
79084: LD_ADDR_VAR 0 3
79088: PUSH
79089: LD_VAR 0 1
79093: PPUSH
79094: LD_VAR 0 5
79098: PPUSH
79099: CALL_OW 77
79103: ST_TO_ADDR
// end ;
79104: LD_VAR 0 3
79108: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79109: LD_INT 0
79111: PPUSH
79112: PPUSH
// task := GetTaskList ( mech ) ;
79113: LD_ADDR_VAR 0 4
79117: PUSH
79118: LD_VAR 0 1
79122: PPUSH
79123: CALL_OW 437
79127: ST_TO_ADDR
// if not task then
79128: LD_VAR 0 4
79132: NOT
79133: IFFALSE 79137
// exit ;
79135: GO 79179
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79137: LD_ADDR_VAR 0 3
79141: PUSH
79142: LD_VAR 0 4
79146: PUSH
79147: LD_INT 1
79149: ARRAY
79150: PUSH
79151: LD_INT 1
79153: ARRAY
79154: PUSH
79155: LD_STRING r
79157: EQUAL
79158: PUSH
79159: LD_VAR 0 4
79163: PUSH
79164: LD_INT 1
79166: ARRAY
79167: PUSH
79168: LD_INT 4
79170: ARRAY
79171: PUSH
79172: LD_VAR 0 2
79176: EQUAL
79177: AND
79178: ST_TO_ADDR
// end ;
79179: LD_VAR 0 3
79183: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79184: LD_INT 0
79186: PPUSH
// SetDir ( unit , d ) ;
79187: LD_VAR 0 1
79191: PPUSH
79192: LD_VAR 0 4
79196: PPUSH
79197: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79201: LD_VAR 0 1
79205: PPUSH
79206: LD_VAR 0 2
79210: PPUSH
79211: LD_VAR 0 3
79215: PPUSH
79216: LD_VAR 0 5
79220: PPUSH
79221: CALL_OW 48
// end ;
79225: LD_VAR 0 6
79229: RET
// export function ToNaturalNumber ( number ) ; begin
79230: LD_INT 0
79232: PPUSH
// result := number div 1 ;
79233: LD_ADDR_VAR 0 2
79237: PUSH
79238: LD_VAR 0 1
79242: PUSH
79243: LD_INT 1
79245: DIV
79246: ST_TO_ADDR
// if number < 0 then
79247: LD_VAR 0 1
79251: PUSH
79252: LD_INT 0
79254: LESS
79255: IFFALSE 79265
// result := 0 ;
79257: LD_ADDR_VAR 0 2
79261: PUSH
79262: LD_INT 0
79264: ST_TO_ADDR
// end ;
79265: LD_VAR 0 2
79269: RET
// export function SortByClass ( units , class ) ; var un ; begin
79270: LD_INT 0
79272: PPUSH
79273: PPUSH
// if not units or not class then
79274: LD_VAR 0 1
79278: NOT
79279: PUSH
79280: LD_VAR 0 2
79284: NOT
79285: OR
79286: IFFALSE 79290
// exit ;
79288: GO 79385
// result := [ ] ;
79290: LD_ADDR_VAR 0 3
79294: PUSH
79295: EMPTY
79296: ST_TO_ADDR
// for un in units do
79297: LD_ADDR_VAR 0 4
79301: PUSH
79302: LD_VAR 0 1
79306: PUSH
79307: FOR_IN
79308: IFFALSE 79383
// if GetClass ( un ) = class then
79310: LD_VAR 0 4
79314: PPUSH
79315: CALL_OW 257
79319: PUSH
79320: LD_VAR 0 2
79324: EQUAL
79325: IFFALSE 79352
// result := Insert ( result , 1 , un ) else
79327: LD_ADDR_VAR 0 3
79331: PUSH
79332: LD_VAR 0 3
79336: PPUSH
79337: LD_INT 1
79339: PPUSH
79340: LD_VAR 0 4
79344: PPUSH
79345: CALL_OW 2
79349: ST_TO_ADDR
79350: GO 79381
// result := Replace ( result , result + 1 , un ) ;
79352: LD_ADDR_VAR 0 3
79356: PUSH
79357: LD_VAR 0 3
79361: PPUSH
79362: LD_VAR 0 3
79366: PUSH
79367: LD_INT 1
79369: PLUS
79370: PPUSH
79371: LD_VAR 0 4
79375: PPUSH
79376: CALL_OW 1
79380: ST_TO_ADDR
79381: GO 79307
79383: POP
79384: POP
// end ;
79385: LD_VAR 0 3
79389: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79390: LD_INT 0
79392: PPUSH
79393: PPUSH
79394: PPUSH
79395: PPUSH
79396: PPUSH
79397: PPUSH
79398: PPUSH
// result := [ ] ;
79399: LD_ADDR_VAR 0 4
79403: PUSH
79404: EMPTY
79405: ST_TO_ADDR
// if x - r < 0 then
79406: LD_VAR 0 1
79410: PUSH
79411: LD_VAR 0 3
79415: MINUS
79416: PUSH
79417: LD_INT 0
79419: LESS
79420: IFFALSE 79432
// min_x := 0 else
79422: LD_ADDR_VAR 0 8
79426: PUSH
79427: LD_INT 0
79429: ST_TO_ADDR
79430: GO 79448
// min_x := x - r ;
79432: LD_ADDR_VAR 0 8
79436: PUSH
79437: LD_VAR 0 1
79441: PUSH
79442: LD_VAR 0 3
79446: MINUS
79447: ST_TO_ADDR
// if y - r < 0 then
79448: LD_VAR 0 2
79452: PUSH
79453: LD_VAR 0 3
79457: MINUS
79458: PUSH
79459: LD_INT 0
79461: LESS
79462: IFFALSE 79474
// min_y := 0 else
79464: LD_ADDR_VAR 0 7
79468: PUSH
79469: LD_INT 0
79471: ST_TO_ADDR
79472: GO 79490
// min_y := y - r ;
79474: LD_ADDR_VAR 0 7
79478: PUSH
79479: LD_VAR 0 2
79483: PUSH
79484: LD_VAR 0 3
79488: MINUS
79489: ST_TO_ADDR
// max_x := x + r ;
79490: LD_ADDR_VAR 0 9
79494: PUSH
79495: LD_VAR 0 1
79499: PUSH
79500: LD_VAR 0 3
79504: PLUS
79505: ST_TO_ADDR
// max_y := y + r ;
79506: LD_ADDR_VAR 0 10
79510: PUSH
79511: LD_VAR 0 2
79515: PUSH
79516: LD_VAR 0 3
79520: PLUS
79521: ST_TO_ADDR
// for _x = min_x to max_x do
79522: LD_ADDR_VAR 0 5
79526: PUSH
79527: DOUBLE
79528: LD_VAR 0 8
79532: DEC
79533: ST_TO_ADDR
79534: LD_VAR 0 9
79538: PUSH
79539: FOR_TO
79540: IFFALSE 79641
// for _y = min_y to max_y do
79542: LD_ADDR_VAR 0 6
79546: PUSH
79547: DOUBLE
79548: LD_VAR 0 7
79552: DEC
79553: ST_TO_ADDR
79554: LD_VAR 0 10
79558: PUSH
79559: FOR_TO
79560: IFFALSE 79637
// begin if not ValidHex ( _x , _y ) then
79562: LD_VAR 0 5
79566: PPUSH
79567: LD_VAR 0 6
79571: PPUSH
79572: CALL_OW 488
79576: NOT
79577: IFFALSE 79581
// continue ;
79579: GO 79559
// if GetResourceTypeXY ( _x , _y ) then
79581: LD_VAR 0 5
79585: PPUSH
79586: LD_VAR 0 6
79590: PPUSH
79591: CALL_OW 283
79595: IFFALSE 79635
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79597: LD_ADDR_VAR 0 4
79601: PUSH
79602: LD_VAR 0 4
79606: PPUSH
79607: LD_VAR 0 4
79611: PUSH
79612: LD_INT 1
79614: PLUS
79615: PPUSH
79616: LD_VAR 0 5
79620: PUSH
79621: LD_VAR 0 6
79625: PUSH
79626: EMPTY
79627: LIST
79628: LIST
79629: PPUSH
79630: CALL_OW 1
79634: ST_TO_ADDR
// end ;
79635: GO 79559
79637: POP
79638: POP
79639: GO 79539
79641: POP
79642: POP
// end ;
79643: LD_VAR 0 4
79647: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79648: LD_INT 0
79650: PPUSH
79651: PPUSH
79652: PPUSH
79653: PPUSH
79654: PPUSH
79655: PPUSH
79656: PPUSH
79657: PPUSH
// if not units then
79658: LD_VAR 0 1
79662: NOT
79663: IFFALSE 79667
// exit ;
79665: GO 80191
// result := UnitFilter ( units , [ f_ok ] ) ;
79667: LD_ADDR_VAR 0 3
79671: PUSH
79672: LD_VAR 0 1
79676: PPUSH
79677: LD_INT 50
79679: PUSH
79680: EMPTY
79681: LIST
79682: PPUSH
79683: CALL_OW 72
79687: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79688: LD_ADDR_VAR 0 8
79692: PUSH
79693: LD_VAR 0 1
79697: PUSH
79698: LD_INT 1
79700: ARRAY
79701: PPUSH
79702: CALL_OW 255
79706: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79707: LD_ADDR_VAR 0 10
79711: PUSH
79712: LD_INT 29
79714: PUSH
79715: LD_INT 91
79717: PUSH
79718: LD_INT 49
79720: PUSH
79721: EMPTY
79722: LIST
79723: LIST
79724: LIST
79725: ST_TO_ADDR
// if not result then
79726: LD_VAR 0 3
79730: NOT
79731: IFFALSE 79735
// exit ;
79733: GO 80191
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79735: LD_ADDR_VAR 0 5
79739: PUSH
79740: LD_INT 81
79742: PUSH
79743: LD_VAR 0 8
79747: PUSH
79748: EMPTY
79749: LIST
79750: LIST
79751: PPUSH
79752: CALL_OW 69
79756: ST_TO_ADDR
// for i in result do
79757: LD_ADDR_VAR 0 4
79761: PUSH
79762: LD_VAR 0 3
79766: PUSH
79767: FOR_IN
79768: IFFALSE 80189
// begin tag := GetTag ( i ) + 1 ;
79770: LD_ADDR_VAR 0 9
79774: PUSH
79775: LD_VAR 0 4
79779: PPUSH
79780: CALL_OW 110
79784: PUSH
79785: LD_INT 1
79787: PLUS
79788: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79789: LD_ADDR_VAR 0 7
79793: PUSH
79794: LD_VAR 0 4
79798: PPUSH
79799: CALL_OW 250
79803: PPUSH
79804: LD_VAR 0 4
79808: PPUSH
79809: CALL_OW 251
79813: PPUSH
79814: LD_INT 6
79816: PPUSH
79817: CALL 79390 0 3
79821: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79822: LD_VAR 0 4
79826: PPUSH
79827: CALL_OW 247
79831: PUSH
79832: LD_INT 2
79834: EQUAL
79835: PUSH
79836: LD_VAR 0 7
79840: AND
79841: PUSH
79842: LD_VAR 0 4
79846: PPUSH
79847: CALL_OW 264
79851: PUSH
79852: LD_VAR 0 10
79856: IN
79857: NOT
79858: AND
79859: IFFALSE 79898
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79861: LD_VAR 0 4
79865: PPUSH
79866: LD_VAR 0 7
79870: PUSH
79871: LD_INT 1
79873: ARRAY
79874: PUSH
79875: LD_INT 1
79877: ARRAY
79878: PPUSH
79879: LD_VAR 0 7
79883: PUSH
79884: LD_INT 1
79886: ARRAY
79887: PUSH
79888: LD_INT 2
79890: ARRAY
79891: PPUSH
79892: CALL_OW 116
79896: GO 80187
// if path > tag then
79898: LD_VAR 0 2
79902: PUSH
79903: LD_VAR 0 9
79907: GREATER
79908: IFFALSE 80116
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79910: LD_ADDR_VAR 0 6
79914: PUSH
79915: LD_VAR 0 5
79919: PPUSH
79920: LD_INT 91
79922: PUSH
79923: LD_VAR 0 4
79927: PUSH
79928: LD_INT 8
79930: PUSH
79931: EMPTY
79932: LIST
79933: LIST
79934: LIST
79935: PPUSH
79936: CALL_OW 72
79940: ST_TO_ADDR
// if nearEnemy then
79941: LD_VAR 0 6
79945: IFFALSE 80014
// begin if GetWeapon ( i ) = ru_time_lapser then
79947: LD_VAR 0 4
79951: PPUSH
79952: CALL_OW 264
79956: PUSH
79957: LD_INT 49
79959: EQUAL
79960: IFFALSE 79988
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79962: LD_VAR 0 4
79966: PPUSH
79967: LD_VAR 0 6
79971: PPUSH
79972: LD_VAR 0 4
79976: PPUSH
79977: CALL_OW 74
79981: PPUSH
79982: CALL_OW 112
79986: GO 80012
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79988: LD_VAR 0 4
79992: PPUSH
79993: LD_VAR 0 6
79997: PPUSH
79998: LD_VAR 0 4
80002: PPUSH
80003: CALL_OW 74
80007: PPUSH
80008: CALL_OW 115
// end else
80012: GO 80114
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80014: LD_VAR 0 4
80018: PPUSH
80019: LD_VAR 0 2
80023: PUSH
80024: LD_VAR 0 9
80028: ARRAY
80029: PUSH
80030: LD_INT 1
80032: ARRAY
80033: PPUSH
80034: LD_VAR 0 2
80038: PUSH
80039: LD_VAR 0 9
80043: ARRAY
80044: PUSH
80045: LD_INT 2
80047: ARRAY
80048: PPUSH
80049: CALL_OW 297
80053: PUSH
80054: LD_INT 6
80056: GREATER
80057: IFFALSE 80100
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80059: LD_VAR 0 4
80063: PPUSH
80064: LD_VAR 0 2
80068: PUSH
80069: LD_VAR 0 9
80073: ARRAY
80074: PUSH
80075: LD_INT 1
80077: ARRAY
80078: PPUSH
80079: LD_VAR 0 2
80083: PUSH
80084: LD_VAR 0 9
80088: ARRAY
80089: PUSH
80090: LD_INT 2
80092: ARRAY
80093: PPUSH
80094: CALL_OW 114
80098: GO 80114
// SetTag ( i , tag ) ;
80100: LD_VAR 0 4
80104: PPUSH
80105: LD_VAR 0 9
80109: PPUSH
80110: CALL_OW 109
// end else
80114: GO 80187
// if enemy then
80116: LD_VAR 0 5
80120: IFFALSE 80187
// begin if GetWeapon ( i ) = ru_time_lapser then
80122: LD_VAR 0 4
80126: PPUSH
80127: CALL_OW 264
80131: PUSH
80132: LD_INT 49
80134: EQUAL
80135: IFFALSE 80163
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80137: LD_VAR 0 4
80141: PPUSH
80142: LD_VAR 0 5
80146: PPUSH
80147: LD_VAR 0 4
80151: PPUSH
80152: CALL_OW 74
80156: PPUSH
80157: CALL_OW 112
80161: GO 80187
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80163: LD_VAR 0 4
80167: PPUSH
80168: LD_VAR 0 5
80172: PPUSH
80173: LD_VAR 0 4
80177: PPUSH
80178: CALL_OW 74
80182: PPUSH
80183: CALL_OW 115
// end ; end ;
80187: GO 79767
80189: POP
80190: POP
// end ;
80191: LD_VAR 0 3
80195: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80196: LD_INT 0
80198: PPUSH
80199: PPUSH
80200: PPUSH
// if not unit or IsInUnit ( unit ) then
80201: LD_VAR 0 1
80205: NOT
80206: PUSH
80207: LD_VAR 0 1
80211: PPUSH
80212: CALL_OW 310
80216: OR
80217: IFFALSE 80221
// exit ;
80219: GO 80312
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80221: LD_ADDR_VAR 0 4
80225: PUSH
80226: LD_VAR 0 1
80230: PPUSH
80231: CALL_OW 250
80235: PPUSH
80236: LD_VAR 0 2
80240: PPUSH
80241: LD_INT 1
80243: PPUSH
80244: CALL_OW 272
80248: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80249: LD_ADDR_VAR 0 5
80253: PUSH
80254: LD_VAR 0 1
80258: PPUSH
80259: CALL_OW 251
80263: PPUSH
80264: LD_VAR 0 2
80268: PPUSH
80269: LD_INT 1
80271: PPUSH
80272: CALL_OW 273
80276: ST_TO_ADDR
// if ValidHex ( x , y ) then
80277: LD_VAR 0 4
80281: PPUSH
80282: LD_VAR 0 5
80286: PPUSH
80287: CALL_OW 488
80291: IFFALSE 80312
// ComTurnXY ( unit , x , y ) ;
80293: LD_VAR 0 1
80297: PPUSH
80298: LD_VAR 0 4
80302: PPUSH
80303: LD_VAR 0 5
80307: PPUSH
80308: CALL_OW 118
// end ;
80312: LD_VAR 0 3
80316: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80317: LD_INT 0
80319: PPUSH
80320: PPUSH
// result := false ;
80321: LD_ADDR_VAR 0 3
80325: PUSH
80326: LD_INT 0
80328: ST_TO_ADDR
// if not units then
80329: LD_VAR 0 2
80333: NOT
80334: IFFALSE 80338
// exit ;
80336: GO 80383
// for i in units do
80338: LD_ADDR_VAR 0 4
80342: PUSH
80343: LD_VAR 0 2
80347: PUSH
80348: FOR_IN
80349: IFFALSE 80381
// if See ( side , i ) then
80351: LD_VAR 0 1
80355: PPUSH
80356: LD_VAR 0 4
80360: PPUSH
80361: CALL_OW 292
80365: IFFALSE 80379
// begin result := true ;
80367: LD_ADDR_VAR 0 3
80371: PUSH
80372: LD_INT 1
80374: ST_TO_ADDR
// exit ;
80375: POP
80376: POP
80377: GO 80383
// end ;
80379: GO 80348
80381: POP
80382: POP
// end ;
80383: LD_VAR 0 3
80387: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80388: LD_INT 0
80390: PPUSH
80391: PPUSH
80392: PPUSH
80393: PPUSH
// if not unit or not points then
80394: LD_VAR 0 1
80398: NOT
80399: PUSH
80400: LD_VAR 0 2
80404: NOT
80405: OR
80406: IFFALSE 80410
// exit ;
80408: GO 80500
// dist := 99999 ;
80410: LD_ADDR_VAR 0 5
80414: PUSH
80415: LD_INT 99999
80417: ST_TO_ADDR
// for i in points do
80418: LD_ADDR_VAR 0 4
80422: PUSH
80423: LD_VAR 0 2
80427: PUSH
80428: FOR_IN
80429: IFFALSE 80498
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80431: LD_ADDR_VAR 0 6
80435: PUSH
80436: LD_VAR 0 1
80440: PPUSH
80441: LD_VAR 0 4
80445: PUSH
80446: LD_INT 1
80448: ARRAY
80449: PPUSH
80450: LD_VAR 0 4
80454: PUSH
80455: LD_INT 2
80457: ARRAY
80458: PPUSH
80459: CALL_OW 297
80463: ST_TO_ADDR
// if tmpDist < dist then
80464: LD_VAR 0 6
80468: PUSH
80469: LD_VAR 0 5
80473: LESS
80474: IFFALSE 80496
// begin result := i ;
80476: LD_ADDR_VAR 0 3
80480: PUSH
80481: LD_VAR 0 4
80485: ST_TO_ADDR
// dist := tmpDist ;
80486: LD_ADDR_VAR 0 5
80490: PUSH
80491: LD_VAR 0 6
80495: ST_TO_ADDR
// end ; end ;
80496: GO 80428
80498: POP
80499: POP
// end ;
80500: LD_VAR 0 3
80504: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80505: LD_INT 0
80507: PPUSH
// uc_side := side ;
80508: LD_ADDR_OWVAR 20
80512: PUSH
80513: LD_VAR 0 1
80517: ST_TO_ADDR
// uc_nation := 3 ;
80518: LD_ADDR_OWVAR 21
80522: PUSH
80523: LD_INT 3
80525: ST_TO_ADDR
// vc_chassis := 25 ;
80526: LD_ADDR_OWVAR 37
80530: PUSH
80531: LD_INT 25
80533: ST_TO_ADDR
// vc_engine := engine_siberite ;
80534: LD_ADDR_OWVAR 39
80538: PUSH
80539: LD_INT 3
80541: ST_TO_ADDR
// vc_control := control_computer ;
80542: LD_ADDR_OWVAR 38
80546: PUSH
80547: LD_INT 3
80549: ST_TO_ADDR
// vc_weapon := 59 ;
80550: LD_ADDR_OWVAR 40
80554: PUSH
80555: LD_INT 59
80557: ST_TO_ADDR
// result := CreateVehicle ;
80558: LD_ADDR_VAR 0 5
80562: PUSH
80563: CALL_OW 45
80567: ST_TO_ADDR
// SetDir ( result , d ) ;
80568: LD_VAR 0 5
80572: PPUSH
80573: LD_VAR 0 4
80577: PPUSH
80578: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80582: LD_VAR 0 5
80586: PPUSH
80587: LD_VAR 0 2
80591: PPUSH
80592: LD_VAR 0 3
80596: PPUSH
80597: LD_INT 0
80599: PPUSH
80600: CALL_OW 48
// end ;
80604: LD_VAR 0 5
80608: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80609: LD_INT 0
80611: PPUSH
80612: PPUSH
80613: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80614: LD_ADDR_VAR 0 2
80618: PUSH
80619: LD_INT 0
80621: PUSH
80622: LD_INT 0
80624: PUSH
80625: LD_INT 0
80627: PUSH
80628: LD_INT 0
80630: PUSH
80631: EMPTY
80632: LIST
80633: LIST
80634: LIST
80635: LIST
80636: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80637: LD_VAR 0 1
80641: NOT
80642: PUSH
80643: LD_VAR 0 1
80647: PPUSH
80648: CALL_OW 264
80652: PUSH
80653: LD_INT 12
80655: PUSH
80656: LD_INT 51
80658: PUSH
80659: LD_INT 32
80661: PUSH
80662: LD_INT 89
80664: PUSH
80665: EMPTY
80666: LIST
80667: LIST
80668: LIST
80669: LIST
80670: IN
80671: NOT
80672: OR
80673: IFFALSE 80677
// exit ;
80675: GO 80775
// for i := 1 to 3 do
80677: LD_ADDR_VAR 0 3
80681: PUSH
80682: DOUBLE
80683: LD_INT 1
80685: DEC
80686: ST_TO_ADDR
80687: LD_INT 3
80689: PUSH
80690: FOR_TO
80691: IFFALSE 80773
// begin tmp := GetCargo ( cargo , i ) ;
80693: LD_ADDR_VAR 0 4
80697: PUSH
80698: LD_VAR 0 1
80702: PPUSH
80703: LD_VAR 0 3
80707: PPUSH
80708: CALL_OW 289
80712: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80713: LD_ADDR_VAR 0 2
80717: PUSH
80718: LD_VAR 0 2
80722: PPUSH
80723: LD_VAR 0 3
80727: PPUSH
80728: LD_VAR 0 4
80732: PPUSH
80733: CALL_OW 1
80737: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80738: LD_ADDR_VAR 0 2
80742: PUSH
80743: LD_VAR 0 2
80747: PPUSH
80748: LD_INT 4
80750: PPUSH
80751: LD_VAR 0 2
80755: PUSH
80756: LD_INT 4
80758: ARRAY
80759: PUSH
80760: LD_VAR 0 4
80764: PLUS
80765: PPUSH
80766: CALL_OW 1
80770: ST_TO_ADDR
// end ;
80771: GO 80690
80773: POP
80774: POP
// end ;
80775: LD_VAR 0 2
80779: RET
// export function Length ( array ) ; begin
80780: LD_INT 0
80782: PPUSH
// result := array + 0 ;
80783: LD_ADDR_VAR 0 2
80787: PUSH
80788: LD_VAR 0 1
80792: PUSH
80793: LD_INT 0
80795: PLUS
80796: ST_TO_ADDR
// end ;
80797: LD_VAR 0 2
80801: RET
// export function PrepareArray ( array ) ; begin
80802: LD_INT 0
80804: PPUSH
// result := array diff 0 ;
80805: LD_ADDR_VAR 0 2
80809: PUSH
80810: LD_VAR 0 1
80814: PUSH
80815: LD_INT 0
80817: DIFF
80818: ST_TO_ADDR
// if not result [ 1 ] then
80819: LD_VAR 0 2
80823: PUSH
80824: LD_INT 1
80826: ARRAY
80827: NOT
80828: IFFALSE 80848
// result := Delete ( result , 1 ) ;
80830: LD_ADDR_VAR 0 2
80834: PUSH
80835: LD_VAR 0 2
80839: PPUSH
80840: LD_INT 1
80842: PPUSH
80843: CALL_OW 3
80847: ST_TO_ADDR
// end ; end_of_file
80848: LD_VAR 0 2
80852: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80853: LD_VAR 0 1
80857: PUSH
80858: LD_INT 200
80860: DOUBLE
80861: GREATEREQUAL
80862: IFFALSE 80870
80864: LD_INT 299
80866: DOUBLE
80867: LESSEQUAL
80868: IFTRUE 80872
80870: GO 80904
80872: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80873: LD_VAR 0 1
80877: PPUSH
80878: LD_VAR 0 2
80882: PPUSH
80883: LD_VAR 0 3
80887: PPUSH
80888: LD_VAR 0 4
80892: PPUSH
80893: LD_VAR 0 5
80897: PPUSH
80898: CALL 35755 0 5
80902: GO 80981
80904: LD_INT 300
80906: DOUBLE
80907: GREATEREQUAL
80908: IFFALSE 80916
80910: LD_INT 399
80912: DOUBLE
80913: LESSEQUAL
80914: IFTRUE 80918
80916: GO 80980
80918: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80919: LD_VAR 0 1
80923: PPUSH
80924: LD_VAR 0 2
80928: PPUSH
80929: LD_VAR 0 3
80933: PPUSH
80934: LD_VAR 0 4
80938: PPUSH
80939: LD_VAR 0 5
80943: PPUSH
80944: LD_VAR 0 6
80948: PPUSH
80949: LD_VAR 0 7
80953: PPUSH
80954: LD_VAR 0 8
80958: PPUSH
80959: LD_VAR 0 9
80963: PPUSH
80964: LD_VAR 0 10
80968: PPUSH
80969: LD_VAR 0 11
80973: PPUSH
80974: CALL 32088 0 11
80978: GO 80981
80980: POP
// end ;
80981: PPOPN 11
80983: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80984: LD_VAR 0 1
80988: PPUSH
80989: LD_VAR 0 2
80993: PPUSH
80994: LD_VAR 0 3
80998: PPUSH
80999: LD_VAR 0 4
81003: PPUSH
81004: LD_VAR 0 5
81008: PPUSH
81009: CALL 35491 0 5
// end ; end_of_file
81013: PPOPN 5
81015: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81016: LD_VAR 0 1
81020: PPUSH
81021: LD_VAR 0 2
81025: PPUSH
81026: LD_VAR 0 3
81030: PPUSH
81031: LD_VAR 0 4
81035: PPUSH
81036: LD_VAR 0 5
81040: PPUSH
81041: LD_VAR 0 6
81045: PPUSH
81046: CALL 19781 0 6
// end ;
81050: PPOPN 6
81052: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81053: LD_INT 0
81055: PPUSH
// begin if not units then
81056: LD_VAR 0 1
81060: NOT
81061: IFFALSE 81065
// exit ;
81063: GO 81065
// end ;
81065: PPOPN 7
81067: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81068: CALL 19752 0 0
// end ;
81072: PPOPN 1
81074: END
