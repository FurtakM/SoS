// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4716 0 0
// PrepareRussianBase ;
  29: CALL 2997 0 0
// PrepareRussianCommander ;
  33: CALL 2948 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8359 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild = 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode = 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible = 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack = 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson = 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase = 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer = 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus = 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer = 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog = 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog = 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog = 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil = 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower = 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable = 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter = 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor = 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 37095 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 37095 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_EXP 45
 582: NOT
 583: PPUSH
 584: LD_EXP 49
 588: PPUSH
 589: CALL 37095 0 3
 593: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 594: LD_ADDR_EXP 8
 598: PUSH
 599: LD_STRING Dickens
 601: PPUSH
 602: LD_INT 0
 604: PPUSH
 605: LD_EXP 49
 609: PPUSH
 610: CALL 37095 0 3
 614: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 615: LD_ADDR_EXP 9
 619: PUSH
 620: LD_STRING Woodruff
 622: PPUSH
 623: LD_INT 0
 625: PPUSH
 626: LD_EXP 49
 630: PPUSH
 631: CALL 37095 0 3
 635: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 636: LD_ADDR_EXP 12
 640: PUSH
 641: LD_STRING Campell
 643: PPUSH
 644: LD_INT 0
 646: PPUSH
 647: LD_EXP 49
 651: PPUSH
 652: CALL 37095 0 3
 656: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 657: LD_ADDR_EXP 10
 661: PUSH
 662: LD_STRING Knight
 664: PPUSH
 665: LD_INT 0
 667: PPUSH
 668: LD_EXP 49
 672: PPUSH
 673: CALL 37095 0 3
 677: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 678: LD_ADDR_EXP 11
 682: PUSH
 683: LD_STRING Claptopn
 685: PPUSH
 686: LD_INT 0
 688: PPUSH
 689: LD_EXP 49
 693: PPUSH
 694: CALL 37095 0 3
 698: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 699: LD_ADDR_EXP 14
 703: PUSH
 704: LD_STRING Harisson
 706: PPUSH
 707: LD_INT 0
 709: PPUSH
 710: LD_EXP 49
 714: PPUSH
 715: CALL 37095 0 3
 719: ST_TO_ADDR
// if Lisa = false then
 720: LD_EXP 4
 724: PUSH
 725: LD_INT 0
 727: EQUAL
 728: IFFALSE 751
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 730: LD_ADDR_EXP 2
 734: PUSH
 735: LD_STRING Bobby
 737: PPUSH
 738: LD_INT 1
 740: PPUSH
 741: LD_EXP 49
 745: PPUSH
 746: CALL 37095 0 3
 750: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 751: LD_EXP 4
 755: PUSH
 756: LD_INT 0
 758: EQUAL
 759: PUSH
 760: LD_EXP 2
 764: PUSH
 765: LD_INT 0
 767: EQUAL
 768: AND
 769: IFFALSE 792
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 771: LD_ADDR_EXP 3
 775: PUSH
 776: LD_STRING Cyrus
 778: PPUSH
 779: LD_INT 1
 781: PPUSH
 782: LD_EXP 49
 786: PPUSH
 787: CALL 37095 0 3
 791: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 792: LD_EXP 4
 796: PUSH
 797: LD_INT 0
 799: EQUAL
 800: PUSH
 801: LD_EXP 2
 805: PUSH
 806: LD_INT 0
 808: EQUAL
 809: AND
 810: PUSH
 811: LD_EXP 3
 815: PUSH
 816: LD_INT 0
 818: EQUAL
 819: AND
 820: IFFALSE 919
// begin tmp = CreateCharacterSet ( 03_others ) ;
 822: LD_ADDR_VAR 0 3
 826: PUSH
 827: LD_STRING 03_others
 829: PPUSH
 830: CALL_OW 31
 834: ST_TO_ADDR
// if tmp then
 835: LD_VAR 0 3
 839: IFFALSE 896
// begin RandomBeforeMission = tmp [ 1 ] ;
 841: LD_ADDR_EXP 6
 845: PUSH
 846: LD_VAR 0 3
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 855: LD_STRING 03_others
 857: PPUSH
 858: CALL_OW 40
// if tmp > 1 then
 862: LD_VAR 0 3
 866: PUSH
 867: LD_INT 1
 869: GREATER
 870: IFFALSE 894
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 872: LD_VAR 0 3
 876: PUSH
 877: LD_VAR 0 3
 881: PUSH
 882: LD_INT 1
 884: ARRAY
 885: DIFF
 886: PPUSH
 887: LD_STRING 03_others
 889: PPUSH
 890: CALL_OW 38
// end else
 894: GO 919
// begin PrepareHuman ( false , 1 , 3 ) ;
 896: LD_INT 0
 898: PPUSH
 899: LD_INT 1
 901: PPUSH
 902: LD_INT 3
 904: PPUSH
 905: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 909: LD_ADDR_EXP 6
 913: PUSH
 914: CALL_OW 44
 918: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 919: LD_ADDR_OWVAR 20
 923: PUSH
 924: LD_INT 4
 926: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 13
 931: PUSH
 932: LD_STRING Donaldson
 934: PPUSH
 935: LD_INT 0
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 37095 0 3
 947: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 948: LD_ADDR_EXP 5
 952: PUSH
 953: LD_STRING Frank
 955: PPUSH
 956: LD_INT 1
 958: PPUSH
 959: LD_EXP 49
 963: PPUSH
 964: CALL 37095 0 3
 968: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 969: LD_EXP 1
 973: PPUSH
 974: LD_INT 32
 976: PPUSH
 977: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 981: LD_EXP 7
 985: PPUSH
 986: LD_INT 1
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 996: LD_EXP 7
1000: PPUSH
1001: LD_INT 32
1003: PPUSH
1004: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
1008: LD_EXP 8
1012: PPUSH
1013: LD_INT 2
1015: PPUSH
1016: LD_INT 0
1018: PPUSH
1019: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1023: LD_EXP 9
1027: PPUSH
1028: LD_INT 2
1030: PPUSH
1031: LD_INT 0
1033: PPUSH
1034: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1038: LD_EXP 12
1042: PPUSH
1043: LD_INT 2
1045: PPUSH
1046: LD_INT 0
1048: PPUSH
1049: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1053: LD_EXP 10
1057: PPUSH
1058: LD_INT 2
1060: PPUSH
1061: LD_INT 0
1063: PPUSH
1064: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1068: LD_EXP 11
1072: PPUSH
1073: LD_INT 2
1075: PPUSH
1076: LD_INT 0
1078: PPUSH
1079: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1083: LD_EXP 4
1087: PPUSH
1088: LD_INT 2
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 49
// if Lisa = false then
1098: LD_EXP 4
1102: PUSH
1103: LD_INT 0
1105: EQUAL
1106: IFFALSE 1123
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1108: LD_EXP 2
1112: PPUSH
1113: LD_INT 2
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: CALL_OW 49
// if Lisa = false and Bobby = false then
1123: LD_EXP 4
1127: PUSH
1128: LD_INT 0
1130: EQUAL
1131: PUSH
1132: LD_EXP 2
1136: PUSH
1137: LD_INT 0
1139: EQUAL
1140: AND
1141: IFFALSE 1158
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1143: LD_EXP 3
1147: PPUSH
1148: LD_INT 2
1150: PPUSH
1151: LD_INT 0
1153: PPUSH
1154: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1158: LD_EXP 4
1162: PUSH
1163: LD_INT 0
1165: EQUAL
1166: PUSH
1167: LD_EXP 2
1171: PUSH
1172: LD_INT 0
1174: EQUAL
1175: AND
1176: PUSH
1177: LD_EXP 3
1181: PUSH
1182: LD_INT 0
1184: EQUAL
1185: AND
1186: IFFALSE 1203
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1188: LD_EXP 6
1192: PPUSH
1193: LD_INT 2
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 49
// end ;
1203: LD_VAR 0 1
1207: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1208: LD_INT 0
1210: PPUSH
1211: PPUSH
1212: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1213: LD_EXP 13
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// if Frank then
1228: LD_EXP 5
1232: IFFALSE 1249
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1234: LD_EXP 5
1238: PPUSH
1239: LD_INT 10
1241: PPUSH
1242: LD_INT 0
1244: PPUSH
1245: CALL_OW 49
// uc_nation = 1 ;
1249: LD_ADDR_OWVAR 21
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
// uc_side = 4 ;
1257: LD_ADDR_OWVAR 20
1261: PUSH
1262: LD_INT 4
1264: ST_TO_ADDR
// hc_class := 3 ;
1265: LD_ADDR_OWVAR 28
1269: PUSH
1270: LD_INT 3
1272: ST_TO_ADDR
// hc_sex := sex_male ;
1273: LD_ADDR_OWVAR 27
1277: PUSH
1278: LD_INT 1
1280: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1281: LD_ADDR_OWVAR 33
1285: PUSH
1286: LD_STRING SecondCharsGal
1288: ST_TO_ADDR
// hc_face_number := 53 ;
1289: LD_ADDR_OWVAR 34
1293: PUSH
1294: LD_INT 53
1296: ST_TO_ADDR
// hc_name := Freddie Warner ;
1297: LD_ADDR_OWVAR 26
1301: PUSH
1302: LD_STRING Freddie Warner
1304: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1305: LD_ADDR_OWVAR 29
1309: PUSH
1310: LD_INT 8
1312: PUSH
1313: LD_INT 11
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1320: LD_ADDR_OWVAR 30
1324: PUSH
1325: LD_INT 0
1327: PUSH
1328: LD_INT 0
1330: PUSH
1331: LD_INT 1
1333: PUSH
1334: LD_INT 0
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1343: LD_ADDR_OWVAR 31
1347: PUSH
1348: LD_INT 1
1350: PUSH
1351: LD_INT 0
1353: PUSH
1354: LD_INT 3
1356: PUSH
1357: LD_INT 2
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: ST_TO_ADDR
// un = CreateHuman ;
1366: LD_ADDR_VAR 0 3
1370: PUSH
1371: CALL_OW 44
1375: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1376: LD_VAR 0 3
1380: PPUSH
1381: LD_INT 10
1383: PPUSH
1384: LD_INT 0
1386: PPUSH
1387: CALL_OW 49
// hc_class := 1 ;
1391: LD_ADDR_OWVAR 28
1395: PUSH
1396: LD_INT 1
1398: ST_TO_ADDR
// hc_sex := sex_male ;
1399: LD_ADDR_OWVAR 27
1403: PUSH
1404: LD_INT 1
1406: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1407: LD_ADDR_OWVAR 33
1411: PUSH
1412: LD_STRING SecondCharsGal
1414: ST_TO_ADDR
// hc_face_number := 56 ;
1415: LD_ADDR_OWVAR 34
1419: PUSH
1420: LD_INT 56
1422: ST_TO_ADDR
// hc_name := Mel Brennan ;
1423: LD_ADDR_OWVAR 26
1427: PUSH
1428: LD_STRING Mel Brennan
1430: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1431: LD_ADDR_OWVAR 29
1435: PUSH
1436: LD_INT 12
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1446: LD_ADDR_OWVAR 30
1450: PUSH
1451: LD_INT 1
1453: PUSH
1454: LD_INT 1
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 0
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1469: LD_ADDR_OWVAR 31
1473: PUSH
1474: LD_INT 3
1476: PUSH
1477: LD_INT 1
1479: PUSH
1480: LD_INT 1
1482: PUSH
1483: LD_INT 0
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: ST_TO_ADDR
// un = CreateHuman ;
1492: LD_ADDR_VAR 0 3
1496: PUSH
1497: CALL_OW 44
1501: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1502: LD_VAR 0 3
1506: PPUSH
1507: LD_INT 10
1509: PPUSH
1510: LD_INT 0
1512: PPUSH
1513: CALL_OW 49
// hc_class := 1 ;
1517: LD_ADDR_OWVAR 28
1521: PUSH
1522: LD_INT 1
1524: ST_TO_ADDR
// hc_sex := sex_male ;
1525: LD_ADDR_OWVAR 27
1529: PUSH
1530: LD_INT 1
1532: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1533: LD_ADDR_OWVAR 33
1537: PUSH
1538: LD_STRING AmGalRemake
1540: ST_TO_ADDR
// hc_face_number := 5 ;
1541: LD_ADDR_OWVAR 34
1545: PUSH
1546: LD_INT 5
1548: ST_TO_ADDR
// hc_name := Bob Joplin ;
1549: LD_ADDR_OWVAR 26
1553: PUSH
1554: LD_STRING Bob Joplin
1556: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1557: LD_ADDR_OWVAR 29
1561: PUSH
1562: LD_INT 10
1564: PUSH
1565: LD_INT 11
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1572: LD_ADDR_OWVAR 30
1576: PUSH
1577: LD_INT 0
1579: PUSH
1580: LD_INT 1
1582: PUSH
1583: LD_INT 1
1585: PUSH
1586: LD_INT 0
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1595: LD_ADDR_OWVAR 31
1599: PUSH
1600: LD_INT 3
1602: PUSH
1603: LD_INT 1
1605: PUSH
1606: LD_INT 1
1608: PUSH
1609: LD_INT 1
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: ST_TO_ADDR
// un = CreateHuman ;
1618: LD_ADDR_VAR 0 3
1622: PUSH
1623: CALL_OW 44
1627: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1628: LD_VAR 0 3
1632: PPUSH
1633: LD_INT 10
1635: PPUSH
1636: LD_INT 0
1638: PPUSH
1639: CALL_OW 49
// hc_class := 3 ;
1643: LD_ADDR_OWVAR 28
1647: PUSH
1648: LD_INT 3
1650: ST_TO_ADDR
// hc_sex := sex_female ;
1651: LD_ADDR_OWVAR 27
1655: PUSH
1656: LD_INT 2
1658: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1659: LD_ADDR_OWVAR 33
1663: PUSH
1664: LD_STRING AmGalRemake
1666: ST_TO_ADDR
// hc_face_number := 8 ;
1667: LD_ADDR_OWVAR 34
1671: PUSH
1672: LD_INT 8
1674: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1675: LD_ADDR_OWVAR 26
1679: PUSH
1680: LD_STRING Elizabeth Whitney
1682: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1683: LD_ADDR_OWVAR 29
1687: PUSH
1688: LD_INT 9
1690: PUSH
1691: LD_INT 11
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1698: LD_ADDR_OWVAR 30
1702: PUSH
1703: LD_INT 0
1705: PUSH
1706: LD_INT 0
1708: PUSH
1709: LD_INT 2
1711: PUSH
1712: LD_INT 0
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1721: LD_ADDR_OWVAR 31
1725: PUSH
1726: LD_INT 2
1728: PUSH
1729: LD_INT 2
1731: PUSH
1732: LD_INT 4
1734: PUSH
1735: LD_INT 2
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: ST_TO_ADDR
// un = CreateHuman ;
1744: LD_ADDR_VAR 0 3
1748: PUSH
1749: CALL_OW 44
1753: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1754: LD_VAR 0 3
1758: PPUSH
1759: LD_INT 10
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL_OW 49
// InitHc ;
1769: CALL_OW 19
// end ;
1773: LD_VAR 0 1
1777: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1778: LD_INT 0
1780: PPUSH
1781: PPUSH
1782: PPUSH
1783: PPUSH
// uc_nation = 1 ;
1784: LD_ADDR_OWVAR 21
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// uc_side = 1 ;
1792: LD_ADDR_OWVAR 20
1796: PUSH
1797: LD_INT 1
1799: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 2
1807: ST_TO_ADDR
// vc_engine := engine_combustion ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 1
1815: ST_TO_ADDR
// vc_control := control_manual ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 1
1823: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1824: LD_ADDR_OWVAR 41
1828: PUSH
1829: LD_INT 65
1831: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1832: LD_ADDR_OWVAR 40
1836: PUSH
1837: LD_INT 5
1839: PUSH
1840: LD_INT 3
1842: PUSH
1843: LD_INT 4
1845: PUSH
1846: LD_INT 4
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: LD_OWVAR 67
1859: ARRAY
1860: ST_TO_ADDR
// veh := CreateVehicle ;
1861: LD_ADDR_VAR 0 5
1865: PUSH
1866: CALL_OW 45
1870: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1871: LD_VAR 0 5
1875: PPUSH
1876: LD_INT 2
1878: PPUSH
1879: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: CALL_OW 428
1893: PUSH
1894: LD_INT 0
1896: EQUAL
1897: IFFALSE 1919
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1899: LD_VAR 0 5
1903: PPUSH
1904: LD_INT 17
1906: PPUSH
1907: LD_INT 4
1909: PPUSH
1910: LD_INT 0
1912: PPUSH
1913: CALL_OW 48
1917: GO 1937
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1919: LD_VAR 0 5
1923: PPUSH
1924: LD_INT 23
1926: PPUSH
1927: LD_INT 10
1929: PPUSH
1930: LD_INT 0
1932: PPUSH
1933: CALL_OW 48
// hc_class := 1 ;
1937: LD_ADDR_OWVAR 28
1941: PUSH
1942: LD_INT 1
1944: ST_TO_ADDR
// hc_sex := sex_male ;
1945: LD_ADDR_OWVAR 27
1949: PUSH
1950: LD_INT 1
1952: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1953: LD_ADDR_OWVAR 33
1957: PUSH
1958: LD_STRING SecondCharsGal
1960: ST_TO_ADDR
// hc_face_number := 59 ;
1961: LD_ADDR_OWVAR 34
1965: PUSH
1966: LD_INT 59
1968: ST_TO_ADDR
// hc_name := Max Gray ;
1969: LD_ADDR_OWVAR 26
1973: PUSH
1974: LD_STRING Max Gray
1976: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1977: LD_ADDR_OWVAR 29
1981: PUSH
1982: LD_INT 9
1984: PUSH
1985: LD_INT 11
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1992: LD_ADDR_OWVAR 30
1996: PUSH
1997: LD_INT 1
1999: PUSH
2000: LD_INT 0
2002: PUSH
2003: LD_INT 0
2005: PUSH
2006: LD_INT 0
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
2015: LD_ADDR_OWVAR 31
2019: PUSH
2020: LD_INT 4
2022: PUSH
2023: LD_INT 1
2025: PUSH
2026: LD_INT 1
2028: PUSH
2029: LD_INT 0
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: ST_TO_ADDR
// un = CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 11
2055: PPUSH
2056: LD_INT 0
2058: PPUSH
2059: CALL_OW 49
// hc_class := 2 ;
2063: LD_ADDR_OWVAR 28
2067: PUSH
2068: LD_INT 2
2070: ST_TO_ADDR
// hc_sex := sex_male ;
2071: LD_ADDR_OWVAR 27
2075: PUSH
2076: LD_INT 1
2078: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2079: LD_ADDR_OWVAR 33
2083: PUSH
2084: LD_STRING SecondCharsGal
2086: ST_TO_ADDR
// hc_face_number := 50 ;
2087: LD_ADDR_OWVAR 34
2091: PUSH
2092: LD_INT 50
2094: ST_TO_ADDR
// hc_name := Frank Hughes ;
2095: LD_ADDR_OWVAR 26
2099: PUSH
2100: LD_STRING Frank Hughes
2102: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2103: LD_ADDR_OWVAR 29
2107: PUSH
2108: LD_INT 10
2110: PUSH
2111: LD_INT 10
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2118: LD_ADDR_OWVAR 30
2122: PUSH
2123: LD_INT 1
2125: PUSH
2126: LD_INT 2
2128: PUSH
2129: LD_INT 0
2131: PUSH
2132: LD_INT 0
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2141: LD_ADDR_OWVAR 31
2145: PUSH
2146: LD_INT 1
2148: PUSH
2149: LD_INT 3
2151: PUSH
2152: LD_INT 0
2154: PUSH
2155: LD_INT 1
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: ST_TO_ADDR
// un = CreateHuman ;
2164: LD_ADDR_VAR 0 4
2168: PUSH
2169: CALL_OW 44
2173: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2174: LD_VAR 0 4
2178: PPUSH
2179: LD_INT 11
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 49
// hc_class := 1 ;
2189: LD_ADDR_OWVAR 28
2193: PUSH
2194: LD_INT 1
2196: ST_TO_ADDR
// hc_sex := sex_male ;
2197: LD_ADDR_OWVAR 27
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2205: LD_ADDR_OWVAR 33
2209: PUSH
2210: LD_STRING SecondCharsGal
2212: ST_TO_ADDR
// hc_face_number := 54 ;
2213: LD_ADDR_OWVAR 34
2217: PUSH
2218: LD_INT 54
2220: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2221: LD_ADDR_OWVAR 26
2225: PUSH
2226: LD_STRING Luigi Ghbellin
2228: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2229: LD_ADDR_OWVAR 29
2233: PUSH
2234: LD_INT 11
2236: PUSH
2237: LD_INT 11
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2244: LD_ADDR_OWVAR 30
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: LD_INT 0
2254: PUSH
2255: LD_INT 0
2257: PUSH
2258: LD_INT 0
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2267: LD_ADDR_OWVAR 31
2271: PUSH
2272: LD_INT 2
2274: PUSH
2275: LD_INT 1
2277: PUSH
2278: LD_INT 1
2280: PUSH
2281: LD_INT 1
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: ST_TO_ADDR
// un = CreateHuman ;
2290: LD_ADDR_VAR 0 4
2294: PUSH
2295: CALL_OW 44
2299: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2300: LD_VAR 0 4
2304: PPUSH
2305: LD_INT 11
2307: PPUSH
2308: LD_INT 0
2310: PPUSH
2311: CALL_OW 49
// hc_class := 3 ;
2315: LD_ADDR_OWVAR 28
2319: PUSH
2320: LD_INT 3
2322: ST_TO_ADDR
// hc_sex := sex_male ;
2323: LD_ADDR_OWVAR 27
2327: PUSH
2328: LD_INT 1
2330: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2331: LD_ADDR_OWVAR 33
2335: PUSH
2336: LD_STRING AmGalRemake
2338: ST_TO_ADDR
// hc_face_number := 6 ;
2339: LD_ADDR_OWVAR 34
2343: PUSH
2344: LD_INT 6
2346: ST_TO_ADDR
// hc_name := Leon Carter ;
2347: LD_ADDR_OWVAR 26
2351: PUSH
2352: LD_STRING Leon Carter
2354: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2355: LD_ADDR_OWVAR 29
2359: PUSH
2360: LD_INT 10
2362: PUSH
2363: LD_INT 9
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2370: LD_ADDR_OWVAR 30
2374: PUSH
2375: LD_INT 0
2377: PUSH
2378: LD_INT 1
2380: PUSH
2381: LD_INT 2
2383: PUSH
2384: LD_INT 1
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2393: LD_ADDR_OWVAR 31
2397: PUSH
2398: LD_INT 0
2400: PUSH
2401: LD_INT 2
2403: PUSH
2404: LD_INT 3
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: ST_TO_ADDR
// un = CreateHuman ;
2416: LD_ADDR_VAR 0 4
2420: PUSH
2421: CALL_OW 44
2425: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_VAR 0 5
2435: PPUSH
2436: CALL_OW 52
// if count = 4 then
2440: LD_VAR 0 1
2444: PUSH
2445: LD_INT 4
2447: EQUAL
2448: IFFALSE 2576
// begin hc_class := 1 ;
2450: LD_ADDR_OWVAR 28
2454: PUSH
2455: LD_INT 1
2457: ST_TO_ADDR
// hc_sex := sex_male ;
2458: LD_ADDR_OWVAR 27
2462: PUSH
2463: LD_INT 1
2465: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2466: LD_ADDR_OWVAR 33
2470: PUSH
2471: LD_STRING SecondCharsGal
2473: ST_TO_ADDR
// hc_face_number := 34 ;
2474: LD_ADDR_OWVAR 34
2478: PUSH
2479: LD_INT 34
2481: ST_TO_ADDR
// hc_name := Ian Hill ;
2482: LD_ADDR_OWVAR 26
2486: PUSH
2487: LD_STRING Ian Hill
2489: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2490: LD_ADDR_OWVAR 29
2494: PUSH
2495: LD_INT 10
2497: PUSH
2498: LD_INT 12
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2505: LD_ADDR_OWVAR 30
2509: PUSH
2510: LD_INT 1
2512: PUSH
2513: LD_INT 0
2515: PUSH
2516: LD_INT 0
2518: PUSH
2519: LD_INT 0
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2528: LD_ADDR_OWVAR 31
2532: PUSH
2533: LD_INT 3
2535: PUSH
2536: LD_INT 1
2538: PUSH
2539: LD_INT 1
2541: PUSH
2542: LD_INT 0
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: ST_TO_ADDR
// un = CreateHuman ;
2551: LD_ADDR_VAR 0 4
2555: PUSH
2556: CALL_OW 44
2560: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2561: LD_VAR 0 4
2565: PPUSH
2566: LD_INT 11
2568: PPUSH
2569: LD_INT 0
2571: PPUSH
2572: CALL_OW 49
// end ; if count = 5 then
2576: LD_VAR 0 1
2580: PUSH
2581: LD_INT 5
2583: EQUAL
2584: IFFALSE 2838
// begin hc_class := 1 ;
2586: LD_ADDR_OWVAR 28
2590: PUSH
2591: LD_INT 1
2593: ST_TO_ADDR
// hc_sex := sex_male ;
2594: LD_ADDR_OWVAR 27
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2602: LD_ADDR_OWVAR 33
2606: PUSH
2607: LD_STRING SecondCharsGal
2609: ST_TO_ADDR
// hc_face_number := 34 ;
2610: LD_ADDR_OWVAR 34
2614: PUSH
2615: LD_INT 34
2617: ST_TO_ADDR
// hc_name := Ian Hill ;
2618: LD_ADDR_OWVAR 26
2622: PUSH
2623: LD_STRING Ian Hill
2625: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2626: LD_ADDR_OWVAR 29
2630: PUSH
2631: LD_INT 10
2633: PUSH
2634: LD_INT 12
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2641: LD_ADDR_OWVAR 30
2645: PUSH
2646: LD_INT 1
2648: PUSH
2649: LD_INT 0
2651: PUSH
2652: LD_INT 0
2654: PUSH
2655: LD_INT 0
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2664: LD_ADDR_OWVAR 31
2668: PUSH
2669: LD_INT 3
2671: PUSH
2672: LD_INT 1
2674: PUSH
2675: LD_INT 1
2677: PUSH
2678: LD_INT 0
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: LIST
2685: LIST
2686: ST_TO_ADDR
// un = CreateHuman ;
2687: LD_ADDR_VAR 0 4
2691: PUSH
2692: CALL_OW 44
2696: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2697: LD_VAR 0 4
2701: PPUSH
2702: LD_INT 11
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// hc_class := 1 ;
2712: LD_ADDR_OWVAR 28
2716: PUSH
2717: LD_INT 1
2719: ST_TO_ADDR
// hc_sex := sex_female ;
2720: LD_ADDR_OWVAR 27
2724: PUSH
2725: LD_INT 2
2727: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2728: LD_ADDR_OWVAR 33
2732: PUSH
2733: LD_STRING SecondCharsGal
2735: ST_TO_ADDR
// hc_face_number := 41 ;
2736: LD_ADDR_OWVAR 34
2740: PUSH
2741: LD_INT 41
2743: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2744: LD_ADDR_OWVAR 26
2748: PUSH
2749: LD_STRING Kate Wadsworth
2751: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2752: LD_ADDR_OWVAR 29
2756: PUSH
2757: LD_INT 9
2759: PUSH
2760: LD_INT 9
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2767: LD_ADDR_OWVAR 30
2771: PUSH
2772: LD_INT 0
2774: PUSH
2775: LD_INT 2
2777: PUSH
2778: LD_INT 0
2780: PUSH
2781: LD_INT 0
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2790: LD_ADDR_OWVAR 31
2794: PUSH
2795: LD_INT 2
2797: PUSH
2798: LD_INT 3
2800: PUSH
2801: LD_INT 1
2803: PUSH
2804: LD_INT 0
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: ST_TO_ADDR
// un = CreateHuman ;
2813: LD_ADDR_VAR 0 4
2817: PUSH
2818: CALL_OW 44
2822: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2823: LD_VAR 0 4
2827: PPUSH
2828: LD_INT 11
2830: PPUSH
2831: LD_INT 0
2833: PPUSH
2834: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2838: LD_INT 11
2840: PPUSH
2841: LD_INT 22
2843: PUSH
2844: LD_INT 1
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: PUSH
2851: LD_INT 21
2853: PUSH
2854: LD_INT 1
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: LD_INT 26
2863: PUSH
2864: LD_INT 1
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: LIST
2875: PPUSH
2876: CALL_OW 70
2880: PUSH
2881: LD_INT 1
2883: ARRAY
2884: PPUSH
2885: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2889: LD_INT 11
2891: PPUSH
2892: LD_INT 22
2894: PUSH
2895: LD_INT 1
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: PUSH
2902: LD_INT 21
2904: PUSH
2905: LD_INT 1
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 26
2914: PUSH
2915: LD_INT 1
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: LIST
2926: PPUSH
2927: CALL_OW 70
2931: PUSH
2932: LD_INT 1
2934: ARRAY
2935: PPUSH
2936: LD_STRING D6-Sol3-1
2938: PPUSH
2939: CALL_OW 88
// end ; end_of_file
2943: LD_VAR 0 2
2947: RET
// export function PrepareRussianCommander ; begin
2948: LD_INT 0
2950: PPUSH
// uc_side = 3 ;
2951: LD_ADDR_OWVAR 20
2955: PUSH
2956: LD_INT 3
2958: ST_TO_ADDR
// uc_nation = 3 ;
2959: LD_ADDR_OWVAR 21
2963: PUSH
2964: LD_INT 3
2966: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2967: LD_ADDR_EXP 15
2971: PUSH
2972: LD_STRING Stolypin
2974: PPUSH
2975: CALL_OW 25
2979: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2980: LD_EXP 15
2984: PPUSH
2985: LD_INT 21
2987: PPUSH
2988: CALL_OW 52
// end ;
2992: LD_VAR 0 1
2996: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2997: LD_INT 0
2999: PPUSH
3000: PPUSH
3001: PPUSH
3002: PPUSH
// if Difficulty > 1 then
3003: LD_OWVAR 67
3007: PUSH
3008: LD_INT 1
3010: GREATER
3011: IFFALSE 3121
// begin uc_side := 3 ;
3013: LD_ADDR_OWVAR 20
3017: PUSH
3018: LD_INT 3
3020: ST_TO_ADDR
// uc_nation := 3 ;
3021: LD_ADDR_OWVAR 21
3025: PUSH
3026: LD_INT 3
3028: ST_TO_ADDR
// InitHc ;
3029: CALL_OW 19
// InitBc ;
3033: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3037: LD_INT 0
3039: PPUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 4
3045: PPUSH
3046: CALL_OW 380
// bc_type := b_breastwork ;
3050: LD_ADDR_OWVAR 42
3054: PUSH
3055: LD_INT 31
3057: ST_TO_ADDR
// bc_level := 4 ;
3058: LD_ADDR_OWVAR 43
3062: PUSH
3063: LD_INT 4
3065: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3066: LD_ADDR_VAR 0 3
3070: PUSH
3071: LD_INT 100
3073: PPUSH
3074: LD_INT 58
3076: PPUSH
3077: LD_INT 2
3079: PPUSH
3080: CALL_OW 47
3084: ST_TO_ADDR
// un := CreateHuman ;
3085: LD_ADDR_VAR 0 4
3089: PUSH
3090: CALL_OW 44
3094: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3095: LD_VAR 0 4
3099: PPUSH
3100: LD_INT 5
3102: PPUSH
3103: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3107: LD_VAR 0 4
3111: PPUSH
3112: LD_VAR 0 3
3116: PPUSH
3117: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3121: LD_INT 3
3123: PPUSH
3124: LD_INT 3
3126: PPUSH
3127: LD_INT 22
3129: PPUSH
3130: LD_EXP 16
3134: PPUSH
3135: LD_EXP 17
3139: PPUSH
3140: CALL_OW 12
3144: PPUSH
3145: LD_INT 1
3147: PPUSH
3148: LD_INT 3
3150: PUSH
3151: LD_INT 4
3153: PUSH
3154: LD_INT 5
3156: PUSH
3157: LD_INT 6
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: PUSH
3166: LD_OWVAR 67
3170: ARRAY
3171: PPUSH
3172: CALL 4382 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3176: LD_INT 3
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: LD_INT 21
3184: PPUSH
3185: LD_EXP 16
3189: PPUSH
3190: LD_EXP 17
3194: PPUSH
3195: CALL_OW 12
3199: PPUSH
3200: LD_INT 2
3202: PPUSH
3203: LD_INT 3
3205: PPUSH
3206: CALL 4382 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3210: LD_INT 3
3212: PPUSH
3213: LD_INT 3
3215: PPUSH
3216: LD_INT 1
3218: PPUSH
3219: LD_EXP 16
3223: PPUSH
3224: LD_EXP 17
3228: PPUSH
3229: CALL_OW 12
3233: PPUSH
3234: LD_INT 4
3236: PPUSH
3237: LD_INT 3
3239: PPUSH
3240: CALL 4382 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3244: LD_INT 3
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 24
3252: PPUSH
3253: LD_EXP 16
3257: PPUSH
3258: LD_EXP 17
3262: PPUSH
3263: CALL_OW 12
3267: PPUSH
3268: LD_INT 3
3270: PPUSH
3271: LD_INT 5
3273: PPUSH
3274: CALL 4382 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3278: LD_ADDR_VAR 0 2
3282: PUSH
3283: LD_INT 22
3285: PUSH
3286: LD_INT 3
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: PUSH
3293: LD_INT 30
3295: PUSH
3296: LD_INT 32
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: PUSH
3303: EMPTY
3304: LIST
3305: LIST
3306: PPUSH
3307: CALL_OW 69
3311: PUSH
3312: FOR_IN
3313: IFFALSE 3353
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3315: LD_INT 3
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: LD_VAR 0 2
3325: PPUSH
3326: LD_EXP 16
3330: PPUSH
3331: LD_EXP 17
3335: PPUSH
3336: CALL_OW 12
3340: PPUSH
3341: LD_INT 1
3343: PPUSH
3344: LD_INT 1
3346: PPUSH
3347: CALL 4382 0 6
3351: GO 3312
3353: POP
3354: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3355: LD_ADDR_VAR 0 2
3359: PUSH
3360: LD_INT 22
3362: PUSH
3363: LD_INT 3
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PUSH
3370: LD_INT 30
3372: PUSH
3373: LD_INT 31
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PPUSH
3384: CALL_OW 69
3388: PUSH
3389: FOR_IN
3390: IFFALSE 3418
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3392: LD_EXP 16
3396: PPUSH
3397: LD_EXP 17
3401: PPUSH
3402: CALL_OW 12
3406: PPUSH
3407: LD_VAR 0 2
3411: PPUSH
3412: CALL 4491 0 2
3416: GO 3389
3418: POP
3419: POP
// end ;
3420: LD_VAR 0 1
3424: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3425: LD_INT 0
3427: PPUSH
3428: PPUSH
3429: PPUSH
3430: PPUSH
// uc_side = 6 ;
3431: LD_ADDR_OWVAR 20
3435: PUSH
3436: LD_INT 6
3438: ST_TO_ADDR
// uc_nation = 3 ;
3439: LD_ADDR_OWVAR 21
3443: PUSH
3444: LD_INT 3
3446: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3447: LD_ADDR_VAR 0 2
3451: PUSH
3452: DOUBLE
3453: LD_INT 1
3455: DEC
3456: ST_TO_ADDR
3457: LD_INT 1
3459: PUSH
3460: LD_INT 2
3462: PUSH
3463: LD_INT 2
3465: PUSH
3466: LD_INT 3
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: PUSH
3475: LD_OWVAR 67
3479: ARRAY
3480: PUSH
3481: FOR_TO
3482: IFFALSE 3650
// begin vc_engine = 1 ;
3484: LD_ADDR_OWVAR 39
3488: PUSH
3489: LD_INT 1
3491: ST_TO_ADDR
// vc_control = 1 ;
3492: LD_ADDR_OWVAR 38
3496: PUSH
3497: LD_INT 1
3499: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3500: LD_ADDR_OWVAR 40
3504: PUSH
3505: LD_INT 42
3507: PUSH
3508: LD_INT 42
3510: PUSH
3511: LD_INT 43
3513: PUSH
3514: LD_INT 43
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: PUSH
3523: LD_OWVAR 67
3527: ARRAY
3528: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3529: LD_ADDR_OWVAR 37
3533: PUSH
3534: LD_INT 21
3536: PUSH
3537: LD_INT 22
3539: PUSH
3540: LD_INT 22
3542: PUSH
3543: LD_INT 22
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: PUSH
3552: LD_OWVAR 67
3556: ARRAY
3557: ST_TO_ADDR
// veh = CreateVehicle ;
3558: LD_ADDR_VAR 0 3
3562: PUSH
3563: CALL_OW 45
3567: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3568: LD_VAR 0 3
3572: PPUSH
3573: LD_INT 3
3575: PPUSH
3576: LD_INT 0
3578: PPUSH
3579: CALL_OW 49
// hc_gallery =  ;
3583: LD_ADDR_OWVAR 33
3587: PUSH
3588: LD_STRING 
3590: ST_TO_ADDR
// hc_name =  ;
3591: LD_ADDR_OWVAR 26
3595: PUSH
3596: LD_STRING 
3598: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3599: LD_INT 0
3601: PPUSH
3602: LD_INT 3
3604: PPUSH
3605: LD_EXP 16
3609: PPUSH
3610: LD_EXP 17
3614: PPUSH
3615: CALL_OW 12
3619: PPUSH
3620: CALL_OW 380
// un = CreateHuman ;
3624: LD_ADDR_VAR 0 4
3628: PUSH
3629: CALL_OW 44
3633: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3634: LD_VAR 0 4
3638: PPUSH
3639: LD_VAR 0 3
3643: PPUSH
3644: CALL_OW 52
// end ;
3648: GO 3481
3650: POP
3651: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3652: LD_INT 0
3654: PPUSH
3655: LD_INT 2
3657: PPUSH
3658: LD_EXP 16
3662: PPUSH
3663: LD_EXP 17
3667: PPUSH
3668: CALL_OW 12
3672: PUSH
3673: LD_INT 2
3675: PLUS
3676: PPUSH
3677: CALL_OW 380
// un = CreateHuman ;
3681: LD_ADDR_VAR 0 4
3685: PUSH
3686: CALL_OW 44
3690: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3691: LD_VAR 0 4
3695: PPUSH
3696: LD_INT 3
3698: PPUSH
3699: LD_INT 0
3701: PPUSH
3702: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3706: LD_INT 0
3708: PPUSH
3709: LD_INT 4
3711: PPUSH
3712: LD_EXP 16
3716: PPUSH
3717: LD_EXP 17
3721: PPUSH
3722: CALL_OW 12
3726: PUSH
3727: LD_INT 2
3729: PLUS
3730: PPUSH
3731: CALL_OW 380
// un = CreateHuman ;
3735: LD_ADDR_VAR 0 4
3739: PUSH
3740: CALL_OW 44
3744: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3745: LD_VAR 0 4
3749: PPUSH
3750: LD_INT 3
3752: PPUSH
3753: LD_INT 0
3755: PPUSH
3756: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3760: LD_ADDR_VAR 0 2
3764: PUSH
3765: DOUBLE
3766: LD_INT 1
3768: DEC
3769: ST_TO_ADDR
3770: LD_INT 2
3772: PUSH
3773: LD_INT 3
3775: PUSH
3776: LD_INT 3
3778: PUSH
3779: LD_INT 4
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: PUSH
3788: LD_OWVAR 67
3792: ARRAY
3793: PUSH
3794: LD_INT 1
3796: PPUSH
3797: LD_INT 3
3799: PPUSH
3800: CALL_OW 12
3804: PLUS
3805: PUSH
3806: FOR_TO
3807: IFFALSE 3877
// begin hc_gallery =  ;
3809: LD_ADDR_OWVAR 33
3813: PUSH
3814: LD_STRING 
3816: ST_TO_ADDR
// hc_name =  ;
3817: LD_ADDR_OWVAR 26
3821: PUSH
3822: LD_STRING 
3824: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3825: LD_INT 0
3827: PPUSH
3828: LD_INT 1
3830: PPUSH
3831: LD_EXP 16
3835: PPUSH
3836: LD_EXP 17
3840: PPUSH
3841: CALL_OW 12
3845: PPUSH
3846: CALL_OW 380
// un = CreateHuman ;
3850: LD_ADDR_VAR 0 4
3854: PUSH
3855: CALL_OW 44
3859: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3860: LD_VAR 0 4
3864: PPUSH
3865: LD_INT 3
3867: PPUSH
3868: LD_INT 0
3870: PPUSH
3871: CALL_OW 49
// end ;
3875: GO 3806
3877: POP
3878: POP
// vc_engine = 1 ;
3879: LD_ADDR_OWVAR 39
3883: PUSH
3884: LD_INT 1
3886: ST_TO_ADDR
// vc_control = 1 ;
3887: LD_ADDR_OWVAR 38
3891: PUSH
3892: LD_INT 1
3894: ST_TO_ADDR
// vc_weapon = 51 ;
3895: LD_ADDR_OWVAR 40
3899: PUSH
3900: LD_INT 51
3902: ST_TO_ADDR
// vc_chassis = 22 ;
3903: LD_ADDR_OWVAR 37
3907: PUSH
3908: LD_INT 22
3910: ST_TO_ADDR
// veh = CreateVehicle ;
3911: LD_ADDR_VAR 0 3
3915: PUSH
3916: CALL_OW 45
3920: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3921: LD_VAR 0 3
3925: PPUSH
3926: LD_INT 3
3928: PPUSH
3929: LD_INT 0
3931: PPUSH
3932: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3936: LD_VAR 0 3
3940: PPUSH
3941: LD_INT 1
3943: PPUSH
3944: LD_INT 100
3946: PPUSH
3947: CALL_OW 290
// hc_gallery =  ;
3951: LD_ADDR_OWVAR 33
3955: PUSH
3956: LD_STRING 
3958: ST_TO_ADDR
// hc_name =  ;
3959: LD_ADDR_OWVAR 26
3963: PUSH
3964: LD_STRING 
3966: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3967: LD_INT 0
3969: PPUSH
3970: LD_INT 3
3972: PPUSH
3973: LD_EXP 16
3977: PPUSH
3978: LD_EXP 17
3982: PPUSH
3983: CALL_OW 12
3987: PPUSH
3988: CALL_OW 380
// un = CreateHuman ;
3992: LD_ADDR_VAR 0 4
3996: PUSH
3997: CALL_OW 44
4001: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4002: LD_VAR 0 4
4006: PPUSH
4007: LD_VAR 0 3
4011: PPUSH
4012: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
4016: LD_ADDR_VAR 0 2
4020: PUSH
4021: LD_INT 22
4023: PUSH
4024: LD_INT 6
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: PUSH
4031: LD_INT 1
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 2
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 3
4053: PUSH
4054: LD_INT 25
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: PPUSH
4077: CALL_OW 69
4081: PUSH
4082: FOR_IN
4083: IFFALSE 4102
// ComAgressiveMove ( i , 45 , 46 ) ;
4085: LD_VAR 0 2
4089: PPUSH
4090: LD_INT 45
4092: PPUSH
4093: LD_INT 46
4095: PPUSH
4096: CALL_OW 114
4100: GO 4082
4102: POP
4103: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4104: LD_ADDR_VAR 0 2
4108: PUSH
4109: LD_INT 22
4111: PUSH
4112: LD_INT 6
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PUSH
4119: LD_INT 25
4121: PUSH
4122: LD_INT 2
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PPUSH
4133: CALL_OW 69
4137: PUSH
4138: FOR_IN
4139: IFFALSE 4170
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4141: LD_ADDR_EXP 21
4145: PUSH
4146: LD_VAR 0 2
4150: PPUSH
4151: LD_INT 0
4153: PPUSH
4154: LD_INT 48
4156: PPUSH
4157: LD_INT 55
4159: PPUSH
4160: LD_INT 5
4162: PPUSH
4163: CALL_OW 145
4167: ST_TO_ADDR
4168: GO 4138
4170: POP
4171: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4172: LD_ADDR_VAR 0 2
4176: PUSH
4177: LD_INT 22
4179: PUSH
4180: LD_INT 6
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: PUSH
4187: LD_INT 25
4189: PUSH
4190: LD_INT 4
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PPUSH
4201: CALL_OW 69
4205: PUSH
4206: FOR_IN
4207: IFFALSE 4226
// ComMoveXY ( i , 39 , 55 ) ;
4209: LD_VAR 0 2
4213: PPUSH
4214: LD_INT 39
4216: PPUSH
4217: LD_INT 55
4219: PPUSH
4220: CALL_OW 111
4224: GO 4206
4226: POP
4227: POP
// end ;
4228: LD_VAR 0 1
4232: RET
// export function PrepareFirstAttack ; var i , un ; begin
4233: LD_INT 0
4235: PPUSH
4236: PPUSH
4237: PPUSH
// uc_side = 5 ;
4238: LD_ADDR_OWVAR 20
4242: PUSH
4243: LD_INT 5
4245: ST_TO_ADDR
// uc_nation = 3 ;
4246: LD_ADDR_OWVAR 21
4250: PUSH
4251: LD_INT 3
4253: ST_TO_ADDR
// for i := 1 to 4 do
4254: LD_ADDR_VAR 0 2
4258: PUSH
4259: DOUBLE
4260: LD_INT 1
4262: DEC
4263: ST_TO_ADDR
4264: LD_INT 4
4266: PUSH
4267: FOR_TO
4268: IFFALSE 4367
// begin hc_gallery =  ;
4270: LD_ADDR_OWVAR 33
4274: PUSH
4275: LD_STRING 
4277: ST_TO_ADDR
// hc_name =  ;
4278: LD_ADDR_OWVAR 26
4282: PUSH
4283: LD_STRING 
4285: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_EXP 16
4296: PPUSH
4297: LD_EXP 17
4301: PPUSH
4302: CALL_OW 12
4306: PPUSH
4307: CALL_OW 380
// un = CreateHuman ;
4311: LD_ADDR_VAR 0 3
4315: PUSH
4316: CALL_OW 44
4320: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4321: LD_VAR 0 3
4325: PPUSH
4326: LD_INT 4
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4336: LD_VAR 0 3
4340: PPUSH
4341: LD_EXP 1
4345: PPUSH
4346: CALL_OW 250
4350: PPUSH
4351: LD_EXP 1
4355: PPUSH
4356: CALL_OW 251
4360: PPUSH
4361: CALL_OW 114
// end ;
4365: GO 4267
4367: POP
4368: POP
// firstRussianAttack = 1 ;
4369: LD_ADDR_EXP 23
4373: PUSH
4374: LD_INT 1
4376: ST_TO_ADDR
// end ; end_of_file
4377: LD_VAR 0 1
4381: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4382: LD_INT 0
4384: PPUSH
4385: PPUSH
4386: PPUSH
// for i = 1 to count do
4387: LD_ADDR_VAR 0 8
4391: PUSH
4392: DOUBLE
4393: LD_INT 1
4395: DEC
4396: ST_TO_ADDR
4397: LD_VAR 0 6
4401: PUSH
4402: FOR_TO
4403: IFFALSE 4484
// begin uc_side = side ;
4405: LD_ADDR_OWVAR 20
4409: PUSH
4410: LD_VAR 0 1
4414: ST_TO_ADDR
// uc_nation = nation ;
4415: LD_ADDR_OWVAR 21
4419: PUSH
4420: LD_VAR 0 2
4424: ST_TO_ADDR
// hc_gallery =  ;
4425: LD_ADDR_OWVAR 33
4429: PUSH
4430: LD_STRING 
4432: ST_TO_ADDR
// hc_name =  ;
4433: LD_ADDR_OWVAR 26
4437: PUSH
4438: LD_STRING 
4440: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4441: LD_INT 0
4443: PPUSH
4444: LD_VAR 0 5
4448: PPUSH
4449: LD_VAR 0 4
4453: PPUSH
4454: CALL_OW 380
// un = CreateHuman ;
4458: LD_ADDR_VAR 0 9
4462: PUSH
4463: CALL_OW 44
4467: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4468: LD_VAR 0 9
4472: PPUSH
4473: LD_VAR 0 3
4477: PPUSH
4478: CALL_OW 52
// end ;
4482: GO 4402
4484: POP
4485: POP
// end ;
4486: LD_VAR 0 7
4490: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4491: LD_INT 0
4493: PPUSH
4494: PPUSH
4495: PPUSH
// uc_side := GetSide ( b ) ;
4496: LD_ADDR_OWVAR 20
4500: PUSH
4501: LD_VAR 0 2
4505: PPUSH
4506: CALL_OW 255
4510: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4511: LD_ADDR_OWVAR 21
4515: PUSH
4516: LD_VAR 0 2
4520: PPUSH
4521: CALL_OW 248
4525: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4526: LD_INT 0
4528: PPUSH
4529: LD_INT 1
4531: PPUSH
4532: LD_VAR 0 1
4536: PPUSH
4537: CALL_OW 380
// un = CreateHuman ;
4541: LD_ADDR_VAR 0 4
4545: PUSH
4546: CALL_OW 44
4550: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4551: LD_ADDR_VAR 0 5
4555: PUSH
4556: LD_VAR 0 2
4560: PPUSH
4561: CALL_OW 254
4565: PUSH
4566: LD_INT 3
4568: MINUS
4569: ST_TO_ADDR
// if dir < 0 then
4570: LD_VAR 0 5
4574: PUSH
4575: LD_INT 0
4577: LESS
4578: IFFALSE 4594
// dir := 6 + dir ;
4580: LD_ADDR_VAR 0 5
4584: PUSH
4585: LD_INT 6
4587: PUSH
4588: LD_VAR 0 5
4592: PLUS
4593: ST_TO_ADDR
// SetDir ( un , dir ) ;
4594: LD_VAR 0 4
4598: PPUSH
4599: LD_VAR 0 5
4603: PPUSH
4604: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4608: LD_VAR 0 4
4612: PPUSH
4613: LD_VAR 0 2
4617: PPUSH
4618: CALL_OW 52
// end ;
4622: LD_VAR 0 3
4626: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4627: LD_INT 0
4629: PPUSH
4630: PPUSH
4631: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4632: LD_ADDR_VAR 0 6
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: PPUSH
4645: LD_VAR 0 1
4649: PPUSH
4650: CALL_OW 12
4654: ARRAY
4655: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4656: LD_VAR 0 6
4660: PPUSH
4661: CALL_OW 258
4665: PUSH
4666: LD_INT 1
4668: EQUAL
4669: IFFALSE 4687
// Say ( speaker , dialogMID ) else
4671: LD_VAR 0 6
4675: PPUSH
4676: LD_VAR 0 2
4680: PPUSH
4681: CALL_OW 88
4685: GO 4701
// Say ( speaker , dialogFID ) ;
4687: LD_VAR 0 6
4691: PPUSH
4692: LD_VAR 0 3
4696: PPUSH
4697: CALL_OW 88
// result := speaker ;
4701: LD_ADDR_VAR 0 4
4705: PUSH
4706: LD_VAR 0 6
4710: ST_TO_ADDR
// end ;
4711: LD_VAR 0 4
4715: RET
// export function PrepareDifficulty ; var tmp ; begin
4716: LD_INT 0
4718: PPUSH
4719: PPUSH
// if Difficulty = 1 then
4720: LD_OWVAR 67
4724: PUSH
4725: LD_INT 1
4727: EQUAL
4728: IFFALSE 4746
// begin RuSoldMinLevel = 1 ;
4730: LD_ADDR_EXP 16
4734: PUSH
4735: LD_INT 1
4737: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4738: LD_ADDR_EXP 17
4742: PUSH
4743: LD_INT 2
4745: ST_TO_ADDR
// end ; if Difficulty = 2 then
4746: LD_OWVAR 67
4750: PUSH
4751: LD_INT 2
4753: EQUAL
4754: IFFALSE 4855
// begin RuSoldMinLevel = 2 ;
4756: LD_ADDR_EXP 16
4760: PUSH
4761: LD_INT 2
4763: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4764: LD_ADDR_EXP 17
4768: PUSH
4769: LD_INT 3
4771: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4772: LD_INT 23
4774: PPUSH
4775: CALL_OW 64
// uc_nation = 3 ;
4779: LD_ADDR_OWVAR 21
4783: PUSH
4784: LD_INT 3
4786: ST_TO_ADDR
// uc_side = 3 ;
4787: LD_ADDR_OWVAR 20
4791: PUSH
4792: LD_INT 3
4794: ST_TO_ADDR
// bc_level = 5 ;
4795: LD_ADDR_OWVAR 43
4799: PUSH
4800: LD_INT 5
4802: ST_TO_ADDR
// bc_type = 32 ;
4803: LD_ADDR_OWVAR 42
4807: PUSH
4808: LD_INT 32
4810: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4811: LD_ADDR_VAR 0 2
4815: PUSH
4816: LD_INT 76
4818: PPUSH
4819: LD_INT 91
4821: PPUSH
4822: LD_INT 2
4824: PPUSH
4825: CALL_OW 47
4829: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4830: LD_VAR 0 2
4834: PPUSH
4835: LD_INT 43
4837: PPUSH
4838: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4842: LD_INT 51
4844: PPUSH
4845: LD_INT 3
4847: PPUSH
4848: LD_INT 1
4850: PPUSH
4851: CALL_OW 322
// end ; if Difficulty >= 3 then
4855: LD_OWVAR 67
4859: PUSH
4860: LD_INT 3
4862: GREATEREQUAL
4863: IFFALSE 5027
// begin RuSoldMinLevel = Difficulty ;
4865: LD_ADDR_EXP 16
4869: PUSH
4870: LD_OWVAR 67
4874: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4875: LD_ADDR_EXP 17
4879: PUSH
4880: LD_INT 4
4882: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4883: LD_INT 26
4885: PPUSH
4886: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4890: LD_INT 23
4892: PPUSH
4893: CALL_OW 64
// uc_nation = 3 ;
4897: LD_ADDR_OWVAR 21
4901: PUSH
4902: LD_INT 3
4904: ST_TO_ADDR
// uc_side = 3 ;
4905: LD_ADDR_OWVAR 20
4909: PUSH
4910: LD_INT 3
4912: ST_TO_ADDR
// bc_level = 5 ;
4913: LD_ADDR_OWVAR 43
4917: PUSH
4918: LD_INT 5
4920: ST_TO_ADDR
// bc_type = 32 ;
4921: LD_ADDR_OWVAR 42
4925: PUSH
4926: LD_INT 32
4928: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4929: LD_ADDR_VAR 0 2
4933: PUSH
4934: LD_INT 76
4936: PPUSH
4937: LD_INT 91
4939: PPUSH
4940: LD_INT 2
4942: PPUSH
4943: CALL_OW 47
4947: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4948: LD_VAR 0 2
4952: PPUSH
4953: LD_INT 44
4955: PPUSH
4956: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4960: LD_ADDR_VAR 0 2
4964: PUSH
4965: LD_INT 83
4967: PPUSH
4968: LD_INT 84
4970: PPUSH
4971: LD_INT 2
4973: PPUSH
4974: CALL_OW 47
4978: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4979: LD_VAR 0 2
4983: PPUSH
4984: LD_INT 43
4986: PPUSH
4987: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4991: LD_INT 51
4993: PPUSH
4994: LD_INT 3
4996: PPUSH
4997: LD_INT 1
4999: PPUSH
5000: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
5004: LD_INT 52
5006: PPUSH
5007: LD_INT 3
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
5017: LD_INT 25
5019: PPUSH
5020: LD_INT 44
5022: PPUSH
5023: CALL_OW 431
// end ; end ;
5027: LD_VAR 0 1
5031: RET
// export function EnergyDialog ; begin
5032: LD_INT 0
5034: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5035: LD_INT 46
5037: PPUSH
5038: LD_INT 1
5040: PPUSH
5041: CALL_OW 321
5045: PUSH
5046: LD_INT 1
5048: EQUAL
5049: PUSH
5050: LD_INT 35
5052: PPUSH
5053: LD_INT 1
5055: PPUSH
5056: CALL_OW 321
5060: PUSH
5061: LD_INT 1
5063: EQUAL
5064: AND
5065: IFFALSE 5089
// begin Say ( JMM , D9c-JMM-1 ) ;
5067: LD_EXP 1
5071: PPUSH
5072: LD_STRING D9c-JMM-1
5074: PPUSH
5075: CALL_OW 88
// energyVDialog = 1 ;
5079: LD_ADDR_EXP 33
5083: PUSH
5084: LD_INT 1
5086: ST_TO_ADDR
// end else
5087: GO 5243
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5089: LD_INT 35
5091: PPUSH
5092: LD_INT 1
5094: PPUSH
5095: CALL_OW 321
5099: PUSH
5100: LD_INT 2
5102: EQUAL
5103: PUSH
5104: LD_EXP 33
5108: PUSH
5109: LD_INT 0
5111: EQUAL
5112: AND
5113: IFFALSE 5135
// begin Say ( JMM , D9c-JMM-1a ) ;
5115: LD_EXP 1
5119: PPUSH
5120: LD_STRING D9c-JMM-1a
5122: PPUSH
5123: CALL_OW 88
// energyVDialog = 1 ;
5127: LD_ADDR_EXP 33
5131: PUSH
5132: LD_INT 1
5134: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5135: LD_INT 46
5137: PPUSH
5138: LD_INT 1
5140: PPUSH
5141: CALL_OW 321
5145: PUSH
5146: LD_INT 2
5148: EQUAL
5149: PUSH
5150: LD_EXP 33
5154: PUSH
5155: LD_INT 0
5157: EQUAL
5158: AND
5159: IFFALSE 5181
// begin Say ( JMM , D9c-JMM-1b ) ;
5161: LD_EXP 1
5165: PPUSH
5166: LD_STRING D9c-JMM-1b
5168: PPUSH
5169: CALL_OW 88
// energyVDialog = 1 ;
5173: LD_ADDR_EXP 33
5177: PUSH
5178: LD_INT 1
5180: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5181: LD_INT 46
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: CALL_OW 321
5191: PUSH
5192: LD_INT 2
5194: EQUAL
5195: PUSH
5196: LD_INT 21
5198: PPUSH
5199: LD_INT 1
5201: PPUSH
5202: CALL_OW 321
5206: PUSH
5207: LD_INT 2
5209: EQUAL
5210: AND
5211: PUSH
5212: LD_EXP 33
5216: PUSH
5217: LD_INT 0
5219: EQUAL
5220: AND
5221: IFFALSE 5243
// begin Say ( JMM , D9c-JMM-1c ) ;
5223: LD_EXP 1
5227: PPUSH
5228: LD_STRING D9c-JMM-1c
5230: PPUSH
5231: CALL_OW 88
// energyVDialog = 1 ;
5235: LD_ADDR_EXP 33
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// end ; end ; end ;
5243: LD_VAR 0 1
5247: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5248: LD_INT 0
5250: PPUSH
5251: PPUSH
5252: PPUSH
5253: PPUSH
5254: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5255: LD_VAR 0 1
5259: NOT
5260: PUSH
5261: LD_VAR 0 1
5265: PPUSH
5266: CALL_OW 256
5270: PUSH
5271: LD_INT 250
5273: LESS
5274: OR
5275: PUSH
5276: LD_VAR 0 1
5280: PPUSH
5281: CALL_OW 314
5285: PUSH
5286: LD_VAR 0 1
5290: PPUSH
5291: CALL_OW 261
5295: PUSH
5296: LD_INT 20
5298: GREATER
5299: AND
5300: OR
5301: IFFALSE 5305
// exit ;
5303: GO 5670
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5305: LD_VAR 0 1
5309: PPUSH
5310: CALL_OW 261
5314: PUSH
5315: LD_INT 20
5317: LESS
5318: PUSH
5319: LD_VAR 0 1
5323: PPUSH
5324: CALL_OW 110
5328: PUSH
5329: LD_INT 21
5331: EQUAL
5332: NOT
5333: AND
5334: IFFALSE 5361
// begin ComStop ( bulldozer ) ;
5336: LD_VAR 0 1
5340: PPUSH
5341: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5345: LD_VAR 0 1
5349: PPUSH
5350: LD_INT 21
5352: PPUSH
5353: CALL_OW 109
// exit ;
5357: GO 5670
// end else
5359: GO 5388
// if GetFuel ( bulldozer ) > 20 then
5361: LD_VAR 0 1
5365: PPUSH
5366: CALL_OW 261
5370: PUSH
5371: LD_INT 20
5373: GREATER
5374: IFFALSE 5388
// SetTag ( bulldozer , 0 ) ;
5376: LD_VAR 0 1
5380: PPUSH
5381: LD_INT 0
5383: PPUSH
5384: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5388: LD_ADDR_VAR 0 5
5392: PUSH
5393: LD_VAR 0 2
5397: PPUSH
5398: CALL_OW 353
5402: ST_TO_ADDR
// tmp := [ ] ;
5403: LD_ADDR_VAR 0 6
5407: PUSH
5408: EMPTY
5409: ST_TO_ADDR
// for i = 1 to list do
5410: LD_ADDR_VAR 0 4
5414: PUSH
5415: DOUBLE
5416: LD_INT 1
5418: DEC
5419: ST_TO_ADDR
5420: LD_VAR 0 5
5424: PUSH
5425: FOR_TO
5426: IFFALSE 5524
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5428: LD_VAR 0 5
5432: PUSH
5433: LD_VAR 0 4
5437: ARRAY
5438: PUSH
5439: LD_INT 1
5441: ARRAY
5442: PPUSH
5443: LD_VAR 0 5
5447: PUSH
5448: LD_VAR 0 4
5452: ARRAY
5453: PUSH
5454: LD_INT 2
5456: ARRAY
5457: PPUSH
5458: CALL_OW 554
5462: IFFALSE 5522
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5464: LD_ADDR_VAR 0 6
5468: PUSH
5469: LD_VAR 0 6
5473: PPUSH
5474: LD_VAR 0 6
5478: PUSH
5479: LD_INT 1
5481: PLUS
5482: PPUSH
5483: LD_VAR 0 5
5487: PUSH
5488: LD_VAR 0 4
5492: ARRAY
5493: PUSH
5494: LD_INT 1
5496: ARRAY
5497: PUSH
5498: LD_VAR 0 5
5502: PUSH
5503: LD_VAR 0 4
5507: ARRAY
5508: PUSH
5509: LD_INT 2
5511: ARRAY
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PPUSH
5517: CALL_OW 1
5521: ST_TO_ADDR
// end ;
5522: GO 5425
5524: POP
5525: POP
// ComStop ( bulldozer ) ;
5526: LD_VAR 0 1
5530: PPUSH
5531: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5535: LD_ADDR_VAR 0 7
5539: PUSH
5540: LD_VAR 0 1
5544: PPUSH
5545: CALL_OW 250
5549: PUSH
5550: LD_VAR 0 1
5554: PPUSH
5555: CALL_OW 251
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: ST_TO_ADDR
// for i = tmp downto 1 do
5564: LD_ADDR_VAR 0 4
5568: PUSH
5569: DOUBLE
5570: LD_VAR 0 6
5574: INC
5575: ST_TO_ADDR
5576: LD_INT 1
5578: PUSH
5579: FOR_DOWNTO
5580: IFFALSE 5668
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5582: LD_ADDR_VAR 0 7
5586: PUSH
5587: LD_VAR 0 7
5591: PUSH
5592: LD_INT 1
5594: ARRAY
5595: PPUSH
5596: LD_VAR 0 7
5600: PUSH
5601: LD_INT 2
5603: ARRAY
5604: PPUSH
5605: LD_VAR 0 6
5609: PPUSH
5610: CALL 5771 0 3
5614: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5615: LD_VAR 0 1
5619: PPUSH
5620: LD_VAR 0 7
5624: PUSH
5625: LD_INT 1
5627: ARRAY
5628: PPUSH
5629: LD_VAR 0 7
5633: PUSH
5634: LD_INT 2
5636: ARRAY
5637: PPUSH
5638: CALL 5675 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5642: LD_ADDR_VAR 0 6
5646: PUSH
5647: LD_VAR 0 6
5651: PPUSH
5652: LD_VAR 0 7
5656: PUSH
5657: LD_INT 3
5659: ARRAY
5660: PPUSH
5661: CALL_OW 3
5665: ST_TO_ADDR
// end ;
5666: GO 5579
5668: POP
5669: POP
// end ;
5670: LD_VAR 0 3
5674: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5675: LD_INT 0
5677: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5678: LD_VAR 0 2
5682: PPUSH
5683: LD_VAR 0 3
5687: PPUSH
5688: CALL_OW 351
5692: PUSH
5693: LD_VAR 0 2
5697: PPUSH
5698: LD_VAR 0 3
5702: PPUSH
5703: CALL_OW 554
5707: AND
5708: PUSH
5709: LD_VAR 0 2
5713: PPUSH
5714: LD_VAR 0 3
5718: PPUSH
5719: CALL_OW 488
5723: AND
5724: PUSH
5725: LD_VAR 0 2
5729: PPUSH
5730: LD_VAR 0 3
5734: PPUSH
5735: CALL_OW 428
5739: PUSH
5740: LD_INT 1
5742: NEG
5743: EQUAL
5744: AND
5745: IFFALSE 5766
// AddComMoveXY ( bulldozer , x , y ) ;
5747: LD_VAR 0 1
5751: PPUSH
5752: LD_VAR 0 2
5756: PPUSH
5757: LD_VAR 0 3
5761: PPUSH
5762: CALL_OW 171
// end ;
5766: LD_VAR 0 4
5770: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5771: LD_INT 0
5773: PPUSH
5774: PPUSH
5775: PPUSH
5776: PPUSH
5777: PPUSH
5778: PPUSH
5779: PPUSH
// dist := 99999 ;
5780: LD_ADDR_VAR 0 6
5784: PUSH
5785: LD_INT 99999
5787: ST_TO_ADDR
// for i = 1 to list do
5788: LD_ADDR_VAR 0 5
5792: PUSH
5793: DOUBLE
5794: LD_INT 1
5796: DEC
5797: ST_TO_ADDR
5798: LD_VAR 0 3
5802: PUSH
5803: FOR_TO
5804: IFFALSE 5942
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5806: LD_ADDR_VAR 0 7
5810: PUSH
5811: LD_VAR 0 1
5815: PPUSH
5816: LD_VAR 0 2
5820: PPUSH
5821: LD_VAR 0 3
5825: PUSH
5826: LD_VAR 0 5
5830: ARRAY
5831: PUSH
5832: LD_INT 1
5834: ARRAY
5835: PPUSH
5836: LD_VAR 0 3
5840: PUSH
5841: LD_VAR 0 5
5845: ARRAY
5846: PUSH
5847: LD_INT 2
5849: ARRAY
5850: PPUSH
5851: CALL_OW 298
5855: ST_TO_ADDR
// if d = 0 then
5856: LD_VAR 0 7
5860: PUSH
5861: LD_INT 0
5863: EQUAL
5864: IFFALSE 5868
// continue ;
5866: GO 5803
// if d < dist then
5868: LD_VAR 0 7
5872: PUSH
5873: LD_VAR 0 6
5877: LESS
5878: IFFALSE 5940
// begin _x := list [ i ] [ 1 ] ;
5880: LD_ADDR_VAR 0 8
5884: PUSH
5885: LD_VAR 0 3
5889: PUSH
5890: LD_VAR 0 5
5894: ARRAY
5895: PUSH
5896: LD_INT 1
5898: ARRAY
5899: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5900: LD_ADDR_VAR 0 9
5904: PUSH
5905: LD_VAR 0 3
5909: PUSH
5910: LD_VAR 0 5
5914: ARRAY
5915: PUSH
5916: LD_INT 2
5918: ARRAY
5919: ST_TO_ADDR
// _i := i ;
5920: LD_ADDR_VAR 0 10
5924: PUSH
5925: LD_VAR 0 5
5929: ST_TO_ADDR
// dist := d ;
5930: LD_ADDR_VAR 0 6
5934: PUSH
5935: LD_VAR 0 7
5939: ST_TO_ADDR
// end ; end ;
5940: GO 5803
5942: POP
5943: POP
// result := [ _x , _y , _i , dist ] ;
5944: LD_ADDR_VAR 0 4
5948: PUSH
5949: LD_VAR 0 8
5953: PUSH
5954: LD_VAR 0 9
5958: PUSH
5959: LD_VAR 0 10
5963: PUSH
5964: LD_VAR 0 6
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: ST_TO_ADDR
// end ;
5975: LD_VAR 0 4
5979: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5980: LD_INT 0
5982: PPUSH
5983: PPUSH
// for i = 1 to 72 do
5984: LD_ADDR_VAR 0 5
5988: PUSH
5989: DOUBLE
5990: LD_INT 1
5992: DEC
5993: ST_TO_ADDR
5994: LD_INT 72
5996: PUSH
5997: FOR_TO
5998: IFFALSE 6052
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
6000: LD_VAR 0 5
6004: PPUSH
6005: LD_VAR 0 1
6009: PPUSH
6010: CALL_OW 321
6014: PUSH
6015: LD_INT 1
6017: EQUAL
6018: PUSH
6019: LD_VAR 0 5
6023: PPUSH
6024: LD_VAR 0 3
6028: PPUSH
6029: CALL_OW 482
6033: AND
6034: IFFALSE 6050
// AddComResearch ( lab , i ) ;
6036: LD_VAR 0 2
6040: PPUSH
6041: LD_VAR 0 5
6045: PPUSH
6046: CALL_OW 184
6050: GO 5997
6052: POP
6053: POP
// end ;
6054: LD_VAR 0 4
6058: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6059: LD_INT 0
6061: PPUSH
6062: PPUSH
6063: PPUSH
6064: PPUSH
6065: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6066: LD_ADDR_VAR 0 7
6070: PUSH
6071: LD_VAR 0 2
6075: PPUSH
6076: CALL_OW 313
6080: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6081: LD_ADDR_VAR 0 8
6085: PUSH
6086: LD_VAR 0 3
6090: PPUSH
6091: LD_INT 22
6093: PUSH
6094: LD_VAR 0 1
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: LD_INT 25
6105: PUSH
6106: LD_INT 2
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: PUSH
6113: LD_INT 24
6115: PUSH
6116: LD_INT 750
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 3
6125: PUSH
6126: LD_INT 54
6128: PUSH
6129: EMPTY
6130: LIST
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: PPUSH
6142: CALL_OW 70
6146: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6147: LD_ADDR_VAR 0 5
6151: PUSH
6152: LD_VAR 0 3
6156: PPUSH
6157: LD_INT 22
6159: PUSH
6160: LD_VAR 0 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 21
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 24
6184: PUSH
6185: LD_INT 1000
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: PUSH
6201: EMPTY
6202: LIST
6203: PPUSH
6204: CALL_OW 70
6208: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6209: LD_VAR 0 5
6213: NOT
6214: PUSH
6215: LD_INT 22
6217: PUSH
6218: LD_VAR 0 1
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: PUSH
6227: LD_INT 25
6229: PUSH
6230: LD_INT 2
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PUSH
6237: LD_INT 24
6239: PUSH
6240: LD_INT 250
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 69
6256: NOT
6257: AND
6258: IFFALSE 6262
// exit ;
6260: GO 6358
// if buildingsList and engineerOkInside then
6262: LD_VAR 0 5
6266: PUSH
6267: LD_VAR 0 7
6271: AND
6272: IFFALSE 6298
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6274: LD_VAR 0 7
6278: PPUSH
6279: LD_INT 25
6281: PUSH
6282: LD_INT 2
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: PPUSH
6289: CALL_OW 72
6293: PPUSH
6294: CALL_OW 122
// if buildingsList and engineerOkOutside then
6298: LD_VAR 0 5
6302: PUSH
6303: LD_VAR 0 8
6307: AND
6308: IFFALSE 6328
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6310: LD_VAR 0 8
6314: PPUSH
6315: LD_VAR 0 5
6319: PUSH
6320: LD_INT 1
6322: ARRAY
6323: PPUSH
6324: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6328: LD_VAR 0 5
6332: PUSH
6333: LD_INT 0
6335: EQUAL
6336: PUSH
6337: LD_VAR 0 8
6341: AND
6342: IFFALSE 6358
// ComEnterUnit ( engineerOkOutside , building ) ;
6344: LD_VAR 0 8
6348: PPUSH
6349: LD_VAR 0 2
6353: PPUSH
6354: CALL_OW 120
// end ;
6358: LD_VAR 0 4
6362: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6363: LD_INT 0
6365: PPUSH
6366: PPUSH
6367: PPUSH
6368: PPUSH
6369: PPUSH
6370: PPUSH
6371: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6372: LD_ADDR_VAR 0 6
6376: PUSH
6377: LD_INT 22
6379: PUSH
6380: LD_VAR 0 1
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PUSH
6389: LD_INT 25
6391: PUSH
6392: LD_INT 4
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: LD_INT 23
6401: PUSH
6402: LD_INT 2
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 24
6411: PUSH
6412: LD_INT 251
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: PPUSH
6425: CALL_OW 69
6429: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6430: LD_ADDR_VAR 0 7
6434: PUSH
6435: LD_VAR 0 3
6439: PPUSH
6440: LD_INT 22
6442: PUSH
6443: LD_VAR 0 1
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: PUSH
6452: LD_INT 23
6454: PUSH
6455: LD_INT 2
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 25
6464: PUSH
6465: LD_INT 4
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: PUSH
6472: LD_INT 50
6474: PUSH
6475: EMPTY
6476: LIST
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: PPUSH
6484: CALL_OW 70
6488: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6489: LD_ADDR_VAR 0 8
6493: PUSH
6494: LD_VAR 0 3
6498: PPUSH
6499: LD_INT 22
6501: PUSH
6502: LD_VAR 0 1
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: LD_INT 21
6513: PUSH
6514: LD_INT 1
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 3
6523: PUSH
6524: LD_INT 25
6526: PUSH
6527: LD_INT 3
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 3
6540: PUSH
6541: LD_INT 24
6543: PUSH
6544: LD_INT 750
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: PPUSH
6561: CALL_OW 70
6565: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6566: LD_ADDR_VAR 0 9
6570: PUSH
6571: LD_VAR 0 2
6575: PPUSH
6576: LD_INT 22
6578: PUSH
6579: LD_VAR 0 1
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 21
6590: PUSH
6591: LD_INT 1
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: LD_INT 3
6600: PUSH
6601: LD_INT 25
6603: PUSH
6604: LD_INT 3
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 3
6617: PUSH
6618: LD_INT 24
6620: PUSH
6621: LD_INT 1000
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: PPUSH
6638: CALL_OW 70
6642: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6643: LD_VAR 0 8
6647: NOT
6648: PUSH
6649: LD_VAR 0 9
6653: NOT
6654: AND
6655: PUSH
6656: LD_VAR 0 6
6660: NOT
6661: AND
6662: IFFALSE 6666
// exit ;
6664: GO 6872
// if damageUnits and sciList then
6666: LD_VAR 0 8
6670: PUSH
6671: LD_VAR 0 6
6675: AND
6676: IFFALSE 6692
// ComMoveToArea ( damageUnits , healArea ) ;
6678: LD_VAR 0 8
6682: PPUSH
6683: LD_VAR 0 2
6687: PPUSH
6688: CALL_OW 113
// if unitsToHeal and sciList then
6692: LD_VAR 0 9
6696: PUSH
6697: LD_VAR 0 6
6701: AND
6702: IFFALSE 6713
// ComExitBuilding ( sciList ) ;
6704: LD_VAR 0 6
6708: PPUSH
6709: CALL_OW 122
// if unitsToHeal and sciListOutside then
6713: LD_VAR 0 9
6717: PUSH
6718: LD_VAR 0 7
6722: AND
6723: IFFALSE 6743
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6725: LD_VAR 0 7
6729: PPUSH
6730: LD_VAR 0 9
6734: PUSH
6735: LD_INT 1
6737: ARRAY
6738: PPUSH
6739: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6743: LD_VAR 0 8
6747: PUSH
6748: LD_INT 0
6750: EQUAL
6751: PUSH
6752: LD_VAR 0 9
6756: PUSH
6757: LD_INT 0
6759: EQUAL
6760: AND
6761: PUSH
6762: LD_VAR 0 7
6766: AND
6767: IFFALSE 6872
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6769: LD_ADDR_VAR 0 10
6773: PUSH
6774: LD_INT 22
6776: PUSH
6777: LD_VAR 0 1
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PUSH
6786: LD_INT 21
6788: PUSH
6789: LD_INT 3
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: LD_INT 30
6798: PUSH
6799: LD_INT 8
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: PPUSH
6811: CALL_OW 69
6815: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6816: LD_ADDR_VAR 0 11
6820: PUSH
6821: LD_INT 1
6823: PPUSH
6824: LD_VAR 0 10
6828: PPUSH
6829: CALL_OW 12
6833: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6834: LD_VAR 0 7
6838: PPUSH
6839: LD_INT 3
6841: PUSH
6842: LD_INT 60
6844: PUSH
6845: EMPTY
6846: LIST
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: PPUSH
6852: CALL_OW 72
6856: PPUSH
6857: LD_VAR 0 10
6861: PUSH
6862: LD_VAR 0 11
6866: ARRAY
6867: PPUSH
6868: CALL_OW 120
// end ; end ;
6872: LD_VAR 0 5
6876: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6877: LD_INT 0
6879: PPUSH
6880: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6881: LD_INT 22
6883: PUSH
6884: LD_VAR 0 1
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 21
6895: PUSH
6896: LD_INT 2
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PPUSH
6907: CALL_OW 69
6911: PUSH
6912: LD_VAR 0 3
6916: LESSEQUAL
6917: IFFALSE 6984
// for i = 1 to vehCount do
6919: LD_ADDR_VAR 0 9
6923: PUSH
6924: DOUBLE
6925: LD_INT 1
6927: DEC
6928: ST_TO_ADDR
6929: LD_VAR 0 3
6933: PUSH
6934: FOR_TO
6935: IFFALSE 6982
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6937: LD_VAR 0 2
6941: PPUSH
6942: LD_VAR 0 7
6946: PPUSH
6947: LD_VAR 0 5
6951: PPUSH
6952: LD_VAR 0 6
6956: PPUSH
6957: LD_VAR 0 4
6961: PUSH
6962: LD_INT 1
6964: PPUSH
6965: LD_VAR 0 4
6969: PPUSH
6970: CALL_OW 12
6974: ARRAY
6975: PPUSH
6976: CALL_OW 185
6980: GO 6934
6982: POP
6983: POP
// end ;
6984: LD_VAR 0 8
6988: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6989: LD_INT 0
6991: PPUSH
6992: PPUSH
6993: PPUSH
6994: PPUSH
6995: PPUSH
6996: PPUSH
6997: PPUSH
6998: PPUSH
6999: PPUSH
7000: PPUSH
7001: PPUSH
// for i = 1 to medicCount do
7002: LD_ADDR_VAR 0 11
7006: PUSH
7007: DOUBLE
7008: LD_INT 1
7010: DEC
7011: ST_TO_ADDR
7012: LD_VAR 0 4
7016: PUSH
7017: FOR_TO
7018: IFFALSE 7100
// begin uc_side = side ;
7020: LD_ADDR_OWVAR 20
7024: PUSH
7025: LD_VAR 0 1
7029: ST_TO_ADDR
// uc_nation = nation ;
7030: LD_ADDR_OWVAR 21
7034: PUSH
7035: LD_VAR 0 2
7039: ST_TO_ADDR
// hc_name =  ;
7040: LD_ADDR_OWVAR 26
7044: PUSH
7045: LD_STRING 
7047: ST_TO_ADDR
// hc_gallery =  ;
7048: LD_ADDR_OWVAR 33
7052: PUSH
7053: LD_STRING 
7055: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7056: LD_INT 0
7058: PPUSH
7059: LD_INT 4
7061: PPUSH
7062: LD_VAR 0 5
7066: PPUSH
7067: CALL_OW 380
// un = CreateHuman ;
7071: LD_ADDR_VAR 0 13
7075: PUSH
7076: CALL_OW 44
7080: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7081: LD_VAR 0 13
7085: PPUSH
7086: LD_VAR 0 6
7090: PPUSH
7091: LD_INT 0
7093: PPUSH
7094: CALL_OW 49
// end ;
7098: GO 7017
7100: POP
7101: POP
// for i = 1 to soldierCount do
7102: LD_ADDR_VAR 0 11
7106: PUSH
7107: DOUBLE
7108: LD_INT 1
7110: DEC
7111: ST_TO_ADDR
7112: LD_VAR 0 3
7116: PUSH
7117: FOR_TO
7118: IFFALSE 7200
// begin uc_side = side ;
7120: LD_ADDR_OWVAR 20
7124: PUSH
7125: LD_VAR 0 1
7129: ST_TO_ADDR
// uc_nation = nation ;
7130: LD_ADDR_OWVAR 21
7134: PUSH
7135: LD_VAR 0 2
7139: ST_TO_ADDR
// hc_name =  ;
7140: LD_ADDR_OWVAR 26
7144: PUSH
7145: LD_STRING 
7147: ST_TO_ADDR
// hc_gallery =  ;
7148: LD_ADDR_OWVAR 33
7152: PUSH
7153: LD_STRING 
7155: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7156: LD_INT 0
7158: PPUSH
7159: LD_INT 1
7161: PPUSH
7162: LD_VAR 0 5
7166: PPUSH
7167: CALL_OW 380
// un = CreateHuman ;
7171: LD_ADDR_VAR 0 13
7175: PUSH
7176: CALL_OW 44
7180: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7181: LD_VAR 0 13
7185: PPUSH
7186: LD_VAR 0 6
7190: PPUSH
7191: LD_INT 0
7193: PPUSH
7194: CALL_OW 49
// end ;
7198: GO 7117
7200: POP
7201: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7202: LD_ADDR_VAR 0 16
7206: PUSH
7207: LD_INT 22
7209: PUSH
7210: LD_VAR 0 1
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 2
7221: PUSH
7222: LD_INT 25
7224: PUSH
7225: LD_INT 1
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: LD_INT 25
7234: PUSH
7235: LD_INT 5
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 8
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: LD_INT 25
7254: PUSH
7255: LD_INT 9
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PPUSH
7273: CALL_OW 69
7277: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7278: LD_ADDR_VAR 0 15
7282: PUSH
7283: LD_INT 22
7285: PUSH
7286: LD_VAR 0 1
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: LD_INT 25
7297: PUSH
7298: LD_INT 4
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PPUSH
7309: CALL_OW 69
7313: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7314: LD_VAR 0 15
7318: PPUSH
7319: LD_VAR 0 7
7323: PPUSH
7324: CALL_OW 113
// if strategy = 1 then
7328: LD_VAR 0 9
7332: PUSH
7333: LD_INT 1
7335: EQUAL
7336: IFFALSE 7784
// begin for i in soldiersOK_list do
7338: LD_ADDR_VAR 0 11
7342: PUSH
7343: LD_VAR 0 16
7347: PUSH
7348: FOR_IN
7349: IFFALSE 7413
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7351: LD_VAR 0 11
7355: PPUSH
7356: LD_INT 91
7358: PPUSH
7359: LD_INT 63
7361: PPUSH
7362: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7366: LD_VAR 0 11
7370: PPUSH
7371: LD_INT 101
7373: PPUSH
7374: LD_INT 53
7376: PPUSH
7377: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7381: LD_VAR 0 11
7385: PPUSH
7386: LD_INT 75
7388: PPUSH
7389: LD_INT 23
7391: PPUSH
7392: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7396: LD_VAR 0 11
7400: PPUSH
7401: LD_INT 78
7403: PPUSH
7404: LD_INT 8
7406: PPUSH
7407: CALL_OW 174
// end ;
7411: GO 7348
7413: POP
7414: POP
// wait ( 0 0$30 ) ;
7415: LD_INT 1050
7417: PPUSH
7418: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7422: LD_INT 35
7424: PPUSH
7425: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7429: LD_ADDR_VAR 0 14
7433: PUSH
7434: LD_INT 22
7436: PUSH
7437: LD_VAR 0 1
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 1
7448: PUSH
7449: LD_INT 3
7451: PUSH
7452: LD_INT 24
7454: PUSH
7455: LD_INT 550
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 24
7468: PUSH
7469: LD_INT 250
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: LIST
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PPUSH
7485: CALL_OW 69
7489: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7490: LD_ADDR_VAR 0 16
7494: PUSH
7495: LD_INT 22
7497: PUSH
7498: LD_VAR 0 1
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: PUSH
7507: LD_INT 25
7509: PUSH
7510: LD_INT 1
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: PUSH
7517: LD_INT 24
7519: PUSH
7520: LD_INT 1000
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: PPUSH
7532: CALL_OW 69
7536: ST_TO_ADDR
// if medicCount then
7537: LD_VAR 0 4
7541: IFFALSE 7581
// begin if damageUnit_list then
7543: LD_VAR 0 14
7547: IFFALSE 7581
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7549: LD_VAR 0 14
7553: PPUSH
7554: LD_VAR 0 7
7558: PPUSH
7559: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7563: LD_VAR 0 4
7567: PPUSH
7568: LD_VAR 0 14
7572: PUSH
7573: LD_INT 1
7575: ARRAY
7576: PPUSH
7577: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7581: LD_ADDR_VAR 0 11
7585: PUSH
7586: LD_VAR 0 16
7590: PUSH
7591: FOR_IN
7592: IFFALSE 7768
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7594: LD_ADDR_VAR 0 19
7598: PUSH
7599: LD_INT 22
7601: PUSH
7602: LD_VAR 0 8
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PPUSH
7611: CALL_OW 69
7615: PPUSH
7616: LD_VAR 0 11
7620: PPUSH
7621: CALL_OW 74
7625: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7626: LD_ADDR_VAR 0 20
7630: PUSH
7631: LD_INT 22
7633: PUSH
7634: LD_VAR 0 8
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PUSH
7643: LD_INT 2
7645: PUSH
7646: LD_INT 59
7648: PUSH
7649: EMPTY
7650: LIST
7651: PUSH
7652: LD_INT 21
7654: PUSH
7655: LD_INT 1
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 21
7664: PUSH
7665: LD_INT 2
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: PPUSH
7685: CALL_OW 69
7689: PPUSH
7690: LD_VAR 0 11
7694: PPUSH
7695: CALL_OW 74
7699: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7700: LD_VAR 0 11
7704: PPUSH
7705: LD_VAR 0 19
7709: PPUSH
7710: CALL_OW 296
7714: PUSH
7715: LD_INT 8
7717: PLUS
7718: PUSH
7719: LD_VAR 0 11
7723: PPUSH
7724: LD_VAR 0 20
7728: PPUSH
7729: CALL_OW 296
7733: LESS
7734: IFFALSE 7752
// ComAttackUnit ( i , target1 ) else
7736: LD_VAR 0 11
7740: PPUSH
7741: LD_VAR 0 19
7745: PPUSH
7746: CALL_OW 115
7750: GO 7766
// ComAttackUnit ( i , target2 ) ;
7752: LD_VAR 0 11
7756: PPUSH
7757: LD_VAR 0 20
7761: PPUSH
7762: CALL_OW 115
// end ;
7766: GO 7591
7768: POP
7769: POP
// until not soldiersOK_list and not damageUnit_list ;
7770: LD_VAR 0 16
7774: NOT
7775: PUSH
7776: LD_VAR 0 14
7780: NOT
7781: AND
7782: IFFALSE 7422
// end ; if strategy = 2 then
7784: LD_VAR 0 9
7788: PUSH
7789: LD_INT 2
7791: EQUAL
7792: IFFALSE 8210
// begin for i in soldiersOK_list do
7794: LD_ADDR_VAR 0 11
7798: PUSH
7799: LD_VAR 0 16
7803: PUSH
7804: FOR_IN
7805: IFFALSE 7839
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7807: LD_VAR 0 11
7811: PPUSH
7812: LD_INT 91
7814: PPUSH
7815: LD_INT 63
7817: PPUSH
7818: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7822: LD_VAR 0 11
7826: PPUSH
7827: LD_INT 75
7829: PPUSH
7830: LD_INT 33
7832: PPUSH
7833: CALL_OW 174
// end ;
7837: GO 7804
7839: POP
7840: POP
// wait ( 0 0$10 ) ;
7841: LD_INT 350
7843: PPUSH
7844: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7848: LD_INT 105
7850: PPUSH
7851: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7855: LD_ADDR_VAR 0 14
7859: PUSH
7860: LD_INT 22
7862: PUSH
7863: LD_VAR 0 1
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 1
7874: PUSH
7875: LD_INT 3
7877: PUSH
7878: LD_INT 24
7880: PUSH
7881: LD_INT 550
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PUSH
7892: LD_INT 24
7894: PUSH
7895: LD_INT 250
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: LIST
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PPUSH
7911: CALL_OW 69
7915: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7916: LD_ADDR_VAR 0 16
7920: PUSH
7921: LD_INT 22
7923: PUSH
7924: LD_VAR 0 1
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 25
7935: PUSH
7936: LD_INT 1
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 24
7945: PUSH
7946: LD_INT 1000
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: LIST
7957: PPUSH
7958: CALL_OW 69
7962: ST_TO_ADDR
// if medicCount then
7963: LD_VAR 0 4
7967: IFFALSE 8007
// begin if damageUnit_list then
7969: LD_VAR 0 14
7973: IFFALSE 8007
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7975: LD_VAR 0 14
7979: PPUSH
7980: LD_VAR 0 7
7984: PPUSH
7985: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7989: LD_VAR 0 4
7993: PPUSH
7994: LD_VAR 0 14
7998: PUSH
7999: LD_INT 1
8001: ARRAY
8002: PPUSH
8003: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8007: LD_ADDR_VAR 0 11
8011: PUSH
8012: LD_VAR 0 16
8016: PUSH
8017: FOR_IN
8018: IFFALSE 8194
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8020: LD_ADDR_VAR 0 19
8024: PUSH
8025: LD_INT 22
8027: PUSH
8028: LD_VAR 0 8
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PPUSH
8037: CALL_OW 69
8041: PPUSH
8042: LD_VAR 0 11
8046: PPUSH
8047: CALL_OW 74
8051: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8052: LD_ADDR_VAR 0 20
8056: PUSH
8057: LD_INT 22
8059: PUSH
8060: LD_VAR 0 8
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: PUSH
8069: LD_INT 2
8071: PUSH
8072: LD_INT 59
8074: PUSH
8075: EMPTY
8076: LIST
8077: PUSH
8078: LD_INT 21
8080: PUSH
8081: LD_INT 1
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: LD_INT 21
8090: PUSH
8091: LD_INT 2
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PUSH
8108: EMPTY
8109: LIST
8110: PPUSH
8111: CALL_OW 69
8115: PPUSH
8116: LD_VAR 0 11
8120: PPUSH
8121: CALL_OW 74
8125: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8126: LD_VAR 0 11
8130: PPUSH
8131: LD_VAR 0 19
8135: PPUSH
8136: CALL_OW 296
8140: PUSH
8141: LD_INT 8
8143: PLUS
8144: PUSH
8145: LD_VAR 0 11
8149: PPUSH
8150: LD_VAR 0 20
8154: PPUSH
8155: CALL_OW 296
8159: LESS
8160: IFFALSE 8178
// ComAttackUnit ( i , target1 ) else
8162: LD_VAR 0 11
8166: PPUSH
8167: LD_VAR 0 19
8171: PPUSH
8172: CALL_OW 115
8176: GO 8192
// ComAttackUnit ( i , target2 ) ;
8178: LD_VAR 0 11
8182: PPUSH
8183: LD_VAR 0 20
8187: PPUSH
8188: CALL_OW 115
// end ;
8192: GO 8017
8194: POP
8195: POP
// until not soldiersOK_list and not damageUnit_list ;
8196: LD_VAR 0 16
8200: NOT
8201: PUSH
8202: LD_VAR 0 14
8206: NOT
8207: AND
8208: IFFALSE 7848
// end ; if medic_list then
8210: LD_VAR 0 15
8214: IFFALSE 8354
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8216: LD_ADDR_VAR 0 15
8220: PUSH
8221: LD_INT 22
8223: PUSH
8224: LD_VAR 0 1
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: PUSH
8233: LD_INT 25
8235: PUSH
8236: LD_INT 4
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: PUSH
8243: LD_INT 50
8245: PUSH
8246: EMPTY
8247: LIST
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: PPUSH
8254: CALL_OW 69
8258: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8259: LD_INT 35
8261: PPUSH
8262: CALL_OW 67
// for i in medic_list do
8266: LD_ADDR_VAR 0 11
8270: PUSH
8271: LD_VAR 0 15
8275: PUSH
8276: FOR_IN
8277: IFFALSE 8345
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8279: LD_VAR 0 11
8283: PPUSH
8284: CALL_OW 314
8288: NOT
8289: PUSH
8290: LD_VAR 0 11
8294: PPUSH
8295: LD_INT 4
8297: PPUSH
8298: CALL_OW 308
8302: NOT
8303: AND
8304: IFFALSE 8320
// ComMoveToArea ( i , RussianAttack ) else
8306: LD_VAR 0 11
8310: PPUSH
8311: LD_INT 4
8313: PPUSH
8314: CALL_OW 113
8318: GO 8343
// if IsInArea ( i , RussianAttack ) then
8320: LD_VAR 0 11
8324: PPUSH
8325: LD_INT 4
8327: PPUSH
8328: CALL_OW 308
8332: IFFALSE 8343
// RemoveUnit ( i ) ;
8334: LD_VAR 0 11
8338: PPUSH
8339: CALL_OW 64
8343: GO 8276
8345: POP
8346: POP
// until not medic_list ;
8347: LD_VAR 0 15
8351: NOT
8352: IFFALSE 8216
// end ; end ; end_of_file
8354: LD_VAR 0 10
8358: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8359: LD_INT 0
8361: PPUSH
8362: PPUSH
8363: PPUSH
8364: PPUSH
8365: PPUSH
// InGameOn ;
8366: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8370: LD_ADDR_VAR 0 3
8374: PUSH
8375: LD_EXP 8
8379: PUSH
8380: LD_EXP 9
8384: PUSH
8385: LD_EXP 10
8389: PUSH
8390: LD_EXP 11
8394: PUSH
8395: LD_EXP 12
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8407: LD_ADDR_VAR 0 4
8411: PUSH
8412: LD_INT 46
8414: PUSH
8415: LD_INT 45
8417: PUSH
8418: LD_INT 44
8420: PUSH
8421: LD_INT 43
8423: PUSH
8424: LD_INT 42
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8434: LD_ADDR_VAR 0 5
8438: PUSH
8439: LD_INT 14
8441: PUSH
8442: LD_INT 12
8444: PUSH
8445: LD_INT 10
8447: PUSH
8448: LD_INT 8
8450: PUSH
8451: LD_INT 6
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8461: LD_EXP 11
8465: PPUSH
8466: LD_INT 31
8468: PPUSH
8469: LD_INT 59
8471: PPUSH
8472: LD_INT 19
8474: PPUSH
8475: LD_INT 5
8477: PPUSH
8478: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8482: LD_INT 32
8484: PPUSH
8485: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8489: LD_INT 32
8491: PPUSH
8492: LD_INT 51
8494: PPUSH
8495: LD_INT 26
8497: PPUSH
8498: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8502: LD_INT 32
8504: PPUSH
8505: LD_INT 53
8507: PPUSH
8508: LD_INT 23
8510: PPUSH
8511: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8515: LD_INT 32
8517: PPUSH
8518: LD_INT 52
8520: PPUSH
8521: LD_INT 19
8523: PPUSH
8524: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8528: LD_INT 35
8530: PPUSH
8531: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8535: LD_INT 32
8537: PPUSH
8538: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8542: LD_INT 32
8544: PPUSH
8545: CALL_OW 250
8549: PUSH
8550: LD_INT 52
8552: EQUAL
8553: PUSH
8554: LD_INT 32
8556: PPUSH
8557: CALL_OW 251
8561: PUSH
8562: LD_INT 19
8564: EQUAL
8565: AND
8566: IFFALSE 8528
// ComExitVehicle ( JMM ) ;
8568: LD_EXP 1
8572: PPUSH
8573: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8577: LD_EXP 7
8581: PPUSH
8582: LD_EXP 1
8586: PPUSH
8587: CALL_OW 119
// wait ( 0 0$01 ) ;
8591: LD_INT 35
8593: PPUSH
8594: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8598: LD_EXP 1
8602: PPUSH
8603: LD_INT 46
8605: PPUSH
8606: LD_INT 10
8608: PPUSH
8609: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8613: LD_EXP 1
8617: PPUSH
8618: LD_EXP 7
8622: PPUSH
8623: CALL_OW 179
// wait ( 0 0$4 ) ;
8627: LD_INT 140
8629: PPUSH
8630: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8634: LD_EXP 1
8638: PPUSH
8639: LD_STRING D1-JMM-1
8641: PPUSH
8642: CALL_OW 88
// if not dialogue_skipped then
8646: LD_OWVAR 59
8650: NOT
8651: IFFALSE 9308
// begin for i := 1 to gammaSquad do
8653: LD_ADDR_VAR 0 2
8657: PUSH
8658: DOUBLE
8659: LD_INT 1
8661: DEC
8662: ST_TO_ADDR
8663: LD_VAR 0 3
8667: PUSH
8668: FOR_TO
8669: IFFALSE 8730
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8671: LD_VAR 0 3
8675: PUSH
8676: LD_VAR 0 2
8680: ARRAY
8681: PPUSH
8682: LD_VAR 0 4
8686: PUSH
8687: LD_VAR 0 2
8691: ARRAY
8692: PPUSH
8693: LD_VAR 0 5
8697: PUSH
8698: LD_VAR 0 2
8702: ARRAY
8703: PPUSH
8704: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8708: LD_VAR 0 3
8712: PUSH
8713: LD_VAR 0 2
8717: ARRAY
8718: PPUSH
8719: LD_EXP 1
8723: PPUSH
8724: CALL_OW 179
// end ;
8728: GO 8668
8730: POP
8731: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8732: LD_EXP 4
8736: PPUSH
8737: LD_INT 41
8739: PPUSH
8740: LD_INT 4
8742: PPUSH
8743: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8747: LD_EXP 4
8751: PPUSH
8752: LD_EXP 1
8756: PPUSH
8757: CALL_OW 179
// if Lisa = false and Bobby then
8761: LD_EXP 4
8765: PUSH
8766: LD_INT 0
8768: EQUAL
8769: PUSH
8770: LD_EXP 2
8774: AND
8775: IFFALSE 8806
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8777: LD_EXP 2
8781: PPUSH
8782: LD_INT 41
8784: PPUSH
8785: LD_INT 4
8787: PPUSH
8788: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8792: LD_EXP 2
8796: PPUSH
8797: LD_EXP 1
8801: PPUSH
8802: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8806: LD_EXP 4
8810: PUSH
8811: LD_INT 0
8813: EQUAL
8814: PUSH
8815: LD_EXP 2
8819: PUSH
8820: LD_INT 0
8822: EQUAL
8823: AND
8824: PUSH
8825: LD_EXP 3
8829: AND
8830: IFFALSE 8861
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8832: LD_EXP 3
8836: PPUSH
8837: LD_INT 41
8839: PPUSH
8840: LD_INT 4
8842: PPUSH
8843: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8847: LD_EXP 3
8851: PPUSH
8852: LD_EXP 1
8856: PPUSH
8857: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8861: LD_EXP 4
8865: PUSH
8866: LD_INT 0
8868: EQUAL
8869: PUSH
8870: LD_EXP 2
8874: PUSH
8875: LD_INT 0
8877: EQUAL
8878: AND
8879: PUSH
8880: LD_EXP 3
8884: PUSH
8885: LD_INT 0
8887: EQUAL
8888: AND
8889: IFFALSE 8920
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8891: LD_EXP 6
8895: PPUSH
8896: LD_INT 41
8898: PPUSH
8899: LD_INT 4
8901: PPUSH
8902: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8906: LD_EXP 6
8910: PPUSH
8911: LD_EXP 1
8915: PPUSH
8916: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8920: LD_EXP 7
8924: PPUSH
8925: LD_STRING D1-Brown-1
8927: PPUSH
8928: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8932: LD_EXP 1
8936: PPUSH
8937: LD_STRING D1-JMM-2
8939: PPUSH
8940: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8944: LD_EXP 7
8948: PPUSH
8949: LD_STRING D1-Brown-2
8951: PPUSH
8952: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8956: LD_EXP 1
8960: PPUSH
8961: LD_EXP 9
8965: PPUSH
8966: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8970: LD_EXP 9
8974: PPUSH
8975: LD_STRING D1-FSol1-2
8977: PPUSH
8978: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8982: LD_EXP 1
8986: PPUSH
8987: LD_EXP 8
8991: PPUSH
8992: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8996: LD_EXP 8
9000: PPUSH
9001: LD_STRING D1-Sol2-2
9003: PPUSH
9004: CALL_OW 88
// if Lisa then
9008: LD_EXP 4
9012: IFFALSE 9052
// begin ComTurnUnit ( JMM , Lisa ) ;
9014: LD_EXP 1
9018: PPUSH
9019: LD_EXP 4
9023: PPUSH
9024: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
9028: LD_EXP 4
9032: PPUSH
9033: LD_STRING D1-Lisa-2
9035: PPUSH
9036: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9040: LD_EXP 1
9044: PPUSH
9045: LD_STRING D1-JMM-3
9047: PPUSH
9048: CALL_OW 88
// end ; if Bobby then
9052: LD_EXP 2
9056: IFFALSE 9096
// begin ComTurnUnit ( JMM , Bobby ) ;
9058: LD_EXP 1
9062: PPUSH
9063: LD_EXP 2
9067: PPUSH
9068: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9072: LD_EXP 2
9076: PPUSH
9077: LD_STRING D1-Bobby-2
9079: PPUSH
9080: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9084: LD_EXP 1
9088: PPUSH
9089: LD_STRING D1-JMM-3
9091: PPUSH
9092: CALL_OW 88
// end ; if Cyrus then
9096: LD_EXP 3
9100: IFFALSE 9140
// begin ComTurnUnit ( JMM , Cyrus ) ;
9102: LD_EXP 1
9106: PPUSH
9107: LD_EXP 3
9111: PPUSH
9112: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9116: LD_EXP 3
9120: PPUSH
9121: LD_STRING D1-Cyrus-2
9123: PPUSH
9124: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9128: LD_EXP 1
9132: PPUSH
9133: LD_STRING D1-JMM-3
9135: PPUSH
9136: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9140: LD_EXP 1
9144: PPUSH
9145: LD_EXP 7
9149: PPUSH
9150: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9154: LD_EXP 1
9158: PPUSH
9159: LD_STRING D1-JMM-3a
9161: PPUSH
9162: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9166: LD_EXP 7
9170: PPUSH
9171: LD_INT 38
9173: PPUSH
9174: LD_INT 5
9176: PPUSH
9177: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9181: LD_EXP 7
9185: PPUSH
9186: LD_EXP 1
9190: PPUSH
9191: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9195: LD_EXP 1
9199: PPUSH
9200: LD_INT 40
9202: PPUSH
9203: LD_INT 7
9205: PPUSH
9206: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9210: LD_EXP 1
9214: PPUSH
9215: LD_EXP 7
9219: PPUSH
9220: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9224: LD_EXP 7
9228: PPUSH
9229: LD_STRING D1-Brown-3
9231: PPUSH
9232: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9236: LD_EXP 14
9240: PPUSH
9241: LD_STRING D1-Har-3
9243: PPUSH
9244: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9248: LD_EXP 1
9252: PPUSH
9253: LD_STRING D1-JMM-4
9255: PPUSH
9256: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9260: LD_EXP 14
9264: PPUSH
9265: LD_STRING D1-Har-4
9267: PPUSH
9268: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9272: LD_EXP 1
9276: PPUSH
9277: LD_STRING D1-JMM-5
9279: PPUSH
9280: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9284: LD_EXP 14
9288: PPUSH
9289: LD_STRING D1-Har-5
9291: PPUSH
9292: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9296: LD_EXP 1
9300: PPUSH
9301: LD_STRING D1-JMM-6
9303: PPUSH
9304: CALL_OW 88
// end ; InGameOff ;
9308: CALL_OW 9
// PrepareRussianConvoy ;
9312: CALL 3425 0 0
// ChangeMissionObjectives ( M1 ) ;
9316: LD_STRING M1
9318: PPUSH
9319: CALL_OW 337
// SaveForQuickRestart ;
9323: CALL_OW 22
// timerStatus = 1 ;
9327: LD_ADDR_EXP 29
9331: PUSH
9332: LD_INT 1
9334: ST_TO_ADDR
// startTimer = 1 ;
9335: LD_ADDR_EXP 30
9339: PUSH
9340: LD_INT 1
9342: ST_TO_ADDR
// bonusAvalaible = 1 ;
9343: LD_ADDR_EXP 44
9347: PUSH
9348: LD_INT 1
9350: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9351: LD_INT 105
9353: PPUSH
9354: CALL_OW 67
// DialogueOn ;
9358: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9362: LD_EXP 12
9366: PPUSH
9367: LD_STRING D9-Mech1-1
9369: PPUSH
9370: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9374: LD_EXP 1
9378: PPUSH
9379: LD_STRING D9-JMM-1
9381: PPUSH
9382: CALL_OW 88
// DialogueOff ;
9386: CALL_OW 7
// end ;
9390: LD_VAR 0 1
9394: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9395: LD_INT 47
9397: PPUSH
9398: LD_INT 1
9400: PPUSH
9401: CALL_OW 321
9405: PUSH
9406: LD_INT 2
9408: EQUAL
9409: PUSH
9410: LD_EXP 31
9414: NOT
9415: AND
9416: PUSH
9417: LD_INT 22
9419: PUSH
9420: LD_INT 1
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: PUSH
9427: LD_INT 21
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PUSH
9437: LD_INT 30
9439: PUSH
9440: LD_INT 3
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: LD_INT 57
9449: PUSH
9450: EMPTY
9451: LIST
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: PPUSH
9459: CALL_OW 69
9463: AND
9464: IFFALSE 9698
9466: GO 9468
9468: DISABLE
// begin factoryDialog := true ;
9469: LD_ADDR_EXP 31
9473: PUSH
9474: LD_INT 1
9476: ST_TO_ADDR
// if IsOk ( Campell ) then
9477: LD_EXP 12
9481: PPUSH
9482: CALL_OW 302
9486: IFFALSE 9502
// Say ( Campell , D10-Mech1-1 ) else
9488: LD_EXP 12
9492: PPUSH
9493: LD_STRING D10-Mech1-1
9495: PPUSH
9496: CALL_OW 88
9500: GO 9698
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9502: LD_INT 22
9504: PUSH
9505: LD_INT 1
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PUSH
9512: LD_INT 21
9514: PUSH
9515: LD_INT 1
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 25
9524: PUSH
9525: LD_INT 3
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: LD_INT 26
9534: PUSH
9535: LD_INT 1
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: PPUSH
9548: CALL_OW 69
9552: PUSH
9553: LD_EXP 1
9557: PUSH
9558: EMPTY
9559: LIST
9560: DIFF
9561: IFFALSE 9635
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9563: LD_INT 22
9565: PUSH
9566: LD_INT 1
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PUSH
9573: LD_INT 21
9575: PUSH
9576: LD_INT 1
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 25
9585: PUSH
9586: LD_INT 3
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PUSH
9593: LD_INT 26
9595: PUSH
9596: LD_INT 1
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: PPUSH
9609: CALL_OW 69
9613: PUSH
9614: LD_EXP 1
9618: PUSH
9619: EMPTY
9620: LIST
9621: DIFF
9622: PPUSH
9623: LD_STRING D10-Mech1-1
9625: PPUSH
9626: LD_STRING D10-Mech1-1
9628: PPUSH
9629: CALL 4627 0 3
9633: GO 9698
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9635: LD_INT 22
9637: PUSH
9638: LD_INT 1
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 21
9647: PUSH
9648: LD_INT 1
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: LD_INT 26
9657: PUSH
9658: LD_INT 1
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: PPUSH
9674: CALL_OW 69
9678: PUSH
9679: LD_EXP 1
9683: PUSH
9684: EMPTY
9685: LIST
9686: DIFF
9687: PPUSH
9688: LD_STRING D10-Mech1-1
9690: PPUSH
9691: LD_STRING D10-Mech1-1
9693: PPUSH
9694: CALL 4627 0 3
// end ; end ;
9698: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9699: LD_INT 22
9701: PUSH
9702: LD_INT 1
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: PUSH
9709: LD_INT 30
9711: PUSH
9712: LD_INT 32
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PPUSH
9723: CALL_OW 69
9727: PUSH
9728: LD_EXP 32
9732: PUSH
9733: LD_INT 0
9735: EQUAL
9736: AND
9737: IFFALSE 9973
9739: GO 9741
9741: DISABLE
// begin if IsOk ( Claptopn ) then
9742: LD_EXP 11
9746: PPUSH
9747: CALL_OW 302
9751: IFFALSE 9767
// Say ( Claptopn , D9b-Eng1-1 ) else
9753: LD_EXP 11
9757: PPUSH
9758: LD_STRING D9b-Eng1-1
9760: PPUSH
9761: CALL_OW 88
9765: GO 9959
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9767: LD_INT 22
9769: PUSH
9770: LD_INT 1
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PUSH
9777: LD_INT 21
9779: PUSH
9780: LD_INT 1
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: LD_INT 25
9789: PUSH
9790: LD_INT 3
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PUSH
9797: LD_INT 26
9799: PUSH
9800: LD_INT 1
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: PPUSH
9813: CALL_OW 69
9817: PUSH
9818: LD_EXP 1
9822: PUSH
9823: EMPTY
9824: LIST
9825: DIFF
9826: IFFALSE 9900
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9828: LD_INT 22
9830: PUSH
9831: LD_INT 1
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PUSH
9838: LD_INT 21
9840: PUSH
9841: LD_INT 1
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 25
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: LD_INT 26
9860: PUSH
9861: LD_INT 1
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: PPUSH
9874: CALL_OW 69
9878: PUSH
9879: LD_EXP 1
9883: PUSH
9884: EMPTY
9885: LIST
9886: DIFF
9887: PPUSH
9888: LD_STRING D9b-Eng1-1
9890: PPUSH
9891: LD_STRING D9b-Eng1-11
9893: PPUSH
9894: CALL 4627 0 3
9898: GO 9959
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9900: LD_INT 22
9902: PUSH
9903: LD_INT 1
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 21
9912: PUSH
9913: LD_INT 1
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PUSH
9920: LD_INT 26
9922: PUSH
9923: LD_INT 1
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: LIST
9934: PPUSH
9935: CALL_OW 69
9939: PUSH
9940: LD_EXP 1
9944: PUSH
9945: EMPTY
9946: LIST
9947: DIFF
9948: PPUSH
9949: LD_STRING D9b-Eng1-1
9951: PPUSH
9952: LD_STRING D9b-Eng1-1
9954: PPUSH
9955: CALL 4627 0 3
// end ; if energyVDialog = 0 then
9959: LD_EXP 33
9963: PUSH
9964: LD_INT 0
9966: EQUAL
9967: IFFALSE 9973
// EnergyDialog ;
9969: CALL 5032 0 0
// end ;
9973: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9974: LD_EXP 34
9978: PUSH
9979: LD_INT 1
9981: EQUAL
9982: PUSH
9983: LD_EXP 35
9987: PUSH
9988: LD_INT 1
9990: EQUAL
9991: AND
9992: IFFALSE 10004
9994: GO 9996
9996: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9997: LD_STRING M1a
9999: PPUSH
10000: CALL_OW 337
10004: END
// every 3 3$0 do
10005: GO 10007
10007: DISABLE
// PrepareFirstAttack ;
10008: CALL 4233 0 0
10012: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
10013: LD_INT 22
10015: PUSH
10016: LD_INT 5
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 21
10025: PUSH
10026: LD_INT 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: LD_INT 3
10035: PUSH
10036: LD_INT 24
10038: PUSH
10039: LD_INT 250
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: LIST
10054: PPUSH
10055: CALL_OW 69
10059: PUSH
10060: LD_INT 0
10062: GREATER
10063: PUSH
10064: LD_EXP 23
10068: PUSH
10069: LD_INT 1
10071: EQUAL
10072: AND
10073: IFFALSE 10374
10075: GO 10077
10077: DISABLE
10078: LD_INT 0
10080: PPUSH
// begin firstRussianAttack = 2 ;
10081: LD_ADDR_EXP 23
10085: PUSH
10086: LD_INT 2
10088: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10089: LD_INT 22
10091: PUSH
10092: LD_INT 5
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: LD_INT 21
10101: PUSH
10102: LD_INT 1
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PPUSH
10113: CALL_OW 69
10117: PPUSH
10118: LD_INT 125
10120: PPUSH
10121: LD_INT 98
10123: PPUSH
10124: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10128: LD_INT 22
10130: PUSH
10131: LD_INT 1
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PUSH
10138: LD_INT 21
10140: PUSH
10141: LD_INT 1
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PPUSH
10152: CALL_OW 69
10156: PUSH
10157: LD_EXP 1
10161: PUSH
10162: LD_EXP 7
10166: PUSH
10167: LD_EXP 4
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: LIST
10176: DIFF
10177: PPUSH
10178: LD_STRING DAtt1-Sol1-1
10180: PPUSH
10181: LD_STRING DAtt1-FSol1-1
10183: PPUSH
10184: CALL 4627 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10188: LD_EXP 1
10192: PPUSH
10193: LD_STRING DAtt1-JMM-1
10195: PPUSH
10196: CALL_OW 88
// if Lisa then
10200: LD_EXP 4
10204: IFFALSE 10220
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10206: LD_EXP 4
10210: PPUSH
10211: LD_STRING DAtt1a-Lisa-1
10213: PPUSH
10214: CALL_OW 88
10218: GO 10291
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10220: LD_INT 22
10222: PUSH
10223: LD_INT 1
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 21
10232: PUSH
10233: LD_INT 1
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: PUSH
10240: LD_INT 26
10242: PUSH
10243: LD_INT 1
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: LIST
10254: PPUSH
10255: CALL_OW 69
10259: PUSH
10260: LD_EXP 1
10264: PUSH
10265: LD_EXP 7
10269: PUSH
10270: LD_EXP 4
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: DIFF
10280: PPUSH
10281: LD_STRING DAtt1a-Sol1-1
10283: PPUSH
10284: LD_STRING DAtt1-FSol1-1
10286: PPUSH
10287: CALL 4627 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10291: LD_EXP 1
10295: PPUSH
10296: LD_STRING DAtt1a-JMM-1
10298: PPUSH
10299: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10303: LD_INT 22
10305: PUSH
10306: LD_INT 1
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 21
10315: PUSH
10316: LD_INT 1
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 26
10325: PUSH
10326: LD_INT 1
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: LIST
10337: PPUSH
10338: CALL_OW 69
10342: PUSH
10343: LD_EXP 1
10347: PUSH
10348: LD_EXP 7
10352: PUSH
10353: LD_EXP 4
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: LIST
10362: DIFF
10363: PPUSH
10364: LD_STRING DAtt1b-Sol1-1
10366: PPUSH
10367: LD_STRING DAtt1a-Sol1-1
10369: PPUSH
10370: CALL 4627 0 3
// end ;
10374: PPOPN 1
10376: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10377: LD_EXP 23
10381: PUSH
10382: LD_INT 2
10384: EQUAL
10385: PUSH
10386: LD_INT 5
10388: PPUSH
10389: LD_INT 22
10391: PUSH
10392: LD_INT 5
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PUSH
10399: LD_INT 21
10401: PUSH
10402: LD_INT 1
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: PPUSH
10413: CALL_OW 70
10417: AND
10418: IFFALSE 10476
10420: GO 10422
10422: DISABLE
10423: LD_INT 0
10425: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10426: LD_ADDR_VAR 0 1
10430: PUSH
10431: LD_INT 22
10433: PUSH
10434: LD_INT 5
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 21
10443: PUSH
10444: LD_INT 1
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PPUSH
10455: CALL_OW 69
10459: PUSH
10460: FOR_IN
10461: IFFALSE 10474
// RemoveUnit ( i ) ;
10463: LD_VAR 0 1
10467: PPUSH
10468: CALL_OW 64
10472: GO 10460
10474: POP
10475: POP
// end ;
10476: PPOPN 1
10478: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10479: LD_INT 22
10481: PUSH
10482: LD_INT 5
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PUSH
10489: EMPTY
10490: LIST
10491: PPUSH
10492: CALL_OW 69
10496: PUSH
10497: LD_INT 0
10499: EQUAL
10500: PUSH
10501: LD_EXP 23
10505: PUSH
10506: LD_INT 2
10508: EQUAL
10509: AND
10510: IFFALSE 10523
10512: GO 10514
10514: DISABLE
// firstRussianAttack = 3 ;
10515: LD_ADDR_EXP 23
10519: PUSH
10520: LD_INT 3
10522: ST_TO_ADDR
10523: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10524: LD_EXP 28
10528: PUSH
10529: LD_INT 0
10531: EQUAL
10532: IFFALSE 10613
10534: GO 10536
10536: DISABLE
// begin timerStatus = 4 ;
10537: LD_ADDR_EXP 29
10541: PUSH
10542: LD_INT 4
10544: ST_TO_ADDR
// DialogueOn ;
10545: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10549: LD_EXP 13
10553: PPUSH
10554: LD_STRING D2-Don-1
10556: PPUSH
10557: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10561: LD_EXP 1
10565: PPUSH
10566: LD_STRING D2-JMM-1
10568: PPUSH
10569: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10573: LD_EXP 13
10577: PPUSH
10578: LD_STRING D2-Don-2
10580: PPUSH
10581: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10585: LD_EXP 1
10589: PPUSH
10590: LD_STRING D2-JMM-2
10592: PPUSH
10593: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10597: LD_EXP 13
10601: PPUSH
10602: LD_STRING D2-Don-3
10604: PPUSH
10605: CALL_OW 94
// DialogueOff ;
10609: CALL_OW 7
// end ;
10613: END
// every 12 12$0 do var tmp ;
10614: GO 10616
10616: DISABLE
10617: LD_INT 0
10619: PPUSH
// begin PrepareDonaldsonArmy ;
10620: CALL 1208 0 0
// CenterNowOnUnits ( Donaldson ) ;
10624: LD_EXP 13
10628: PPUSH
10629: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10633: LD_INT 22
10635: PUSH
10636: LD_INT 6
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 69
10647: NOT
10648: IFFALSE 10664
// begin wait ( 3 ) ;
10650: LD_INT 3
10652: PPUSH
10653: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10657: LD_STRING ACH_BASE
10659: PPUSH
10660: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
10664: LD_ADDR_VAR 0 1
10668: PUSH
10669: LD_INT 22
10671: PUSH
10672: LD_INT 4
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PUSH
10679: LD_INT 21
10681: PUSH
10682: LD_INT 1
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 26
10691: PUSH
10692: LD_INT 1
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 25
10701: PUSH
10702: LD_INT 1
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: PPUSH
10715: CALL_OW 69
10719: PUSH
10720: LD_EXP 5
10724: PUSH
10725: EMPTY
10726: LIST
10727: DIFF
10728: ST_TO_ADDR
// DialogueOn ;
10729: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10733: LD_VAR 0 1
10737: PPUSH
10738: LD_STRING D3-Sol1-1
10740: PPUSH
10741: LD_STRING D3-Sol1-1
10743: PPUSH
10744: CALL 4627 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
10748: LD_INT 22
10750: PUSH
10751: LD_INT 4
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 21
10760: PUSH
10761: LD_INT 1
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 26
10770: PUSH
10771: LD_INT 1
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 25
10780: PUSH
10781: LD_INT 3
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: PPUSH
10794: CALL_OW 69
10798: PPUSH
10799: LD_STRING D3-Sol2-1
10801: PPUSH
10802: LD_STRING D3-Sol2-1
10804: PPUSH
10805: CALL 4627 0 3
// if Frank then
10809: LD_EXP 5
10813: IFFALSE 10827
// Say ( Frank , D3-Frank-1 ) ;
10815: LD_EXP 5
10819: PPUSH
10820: LD_STRING D3-Frank-1
10822: PPUSH
10823: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10827: LD_EXP 13
10831: PPUSH
10832: LD_STRING D3-Don-1
10834: PPUSH
10835: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10839: LD_EXP 13
10843: PPUSH
10844: LD_STRING D3-Don-1a
10846: PPUSH
10847: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10851: LD_EXP 1
10855: PPUSH
10856: LD_STRING D3-JMM-1
10858: PPUSH
10859: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10863: LD_EXP 13
10867: PPUSH
10868: LD_STRING D3-Don-2
10870: PPUSH
10871: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10875: LD_INT 22
10877: PUSH
10878: LD_INT 6
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: PUSH
10885: LD_INT 21
10887: PUSH
10888: LD_INT 1
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PPUSH
10899: CALL_OW 69
10903: IFFALSE 11041
// begin Say ( JMM , D3-JMM-2 ) ;
10905: LD_EXP 1
10909: PPUSH
10910: LD_STRING D3-JMM-2
10912: PPUSH
10913: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10917: LD_EXP 13
10921: PPUSH
10922: LD_STRING D3-Don-3
10924: PPUSH
10925: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10929: LD_EXP 1
10933: PPUSH
10934: LD_STRING D3-JMM-3
10936: PPUSH
10937: CALL_OW 88
// if IsOK ( Frank ) then
10941: LD_EXP 5
10945: PPUSH
10946: CALL_OW 302
10950: IFFALSE 10964
// Say ( Frank , D3-Frank-3 ) ;
10952: LD_EXP 5
10956: PPUSH
10957: LD_STRING D3-Frank-3
10959: PPUSH
10960: CALL_OW 88
// DialogueOff ;
10964: CALL_OW 7
// if IsOk ( Frank ) then
10968: LD_EXP 5
10972: PPUSH
10973: CALL_OW 302
10977: IFFALSE 11039
// begin SetSide ( Frank , 0 ) ;
10979: LD_EXP 5
10983: PPUSH
10984: LD_INT 0
10986: PPUSH
10987: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10991: LD_EXP 5
10995: PPUSH
10996: LD_INT 12
10998: PPUSH
10999: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
11003: LD_EXP 5
11007: PPUSH
11008: LD_STRING 04t_Frank
11010: PPUSH
11011: CALL_OW 38
// wait ( 0 0$3 ) ;
11015: LD_INT 105
11017: PPUSH
11018: CALL_OW 67
// frankScoutBase = 1 ;
11022: LD_ADDR_EXP 25
11026: PUSH
11027: LD_INT 1
11029: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11030: LD_EXP 5
11034: PPUSH
11035: CALL_OW 64
// end ; end else
11039: GO 11128
// begin Say ( JMM , D3-JMM-4 ) ;
11041: LD_EXP 1
11045: PPUSH
11046: LD_STRING D3-JMM-4
11048: PPUSH
11049: CALL_OW 88
// DialogueOff ;
11053: CALL_OW 7
// if IsOk ( Frank ) then
11057: LD_EXP 5
11061: PPUSH
11062: CALL_OW 302
11066: IFFALSE 11128
// begin SetSide ( Frank , 0 ) ;
11068: LD_EXP 5
11072: PPUSH
11073: LD_INT 0
11075: PPUSH
11076: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11080: LD_EXP 5
11084: PPUSH
11085: LD_INT 12
11087: PPUSH
11088: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
11092: LD_EXP 5
11096: PPUSH
11097: LD_STRING 04t_Frank
11099: PPUSH
11100: CALL_OW 38
// wait ( 0 0$3 ) ;
11104: LD_INT 105
11106: PPUSH
11107: CALL_OW 67
// frankScoutBase = 1 ;
11111: LD_ADDR_EXP 25
11115: PUSH
11116: LD_INT 1
11118: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11119: LD_EXP 5
11123: PPUSH
11124: CALL_OW 64
// end ; end ; end ;
11128: PPOPN 1
11130: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11131: LD_EXP 13
11135: PPUSH
11136: CALL_OW 255
11140: PUSH
11141: LD_INT 4
11143: EQUAL
11144: PUSH
11145: LD_EXP 13
11149: PPUSH
11150: CALL_OW 302
11154: AND
11155: IFFALSE 11395
11157: GO 11159
11159: DISABLE
11160: LD_INT 0
11162: PPUSH
11163: PPUSH
// begin wait ( 5 5$00 ) ;
11164: LD_INT 10500
11166: PPUSH
11167: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11171: LD_EXP 13
11175: PPUSH
11176: CALL_OW 255
11180: PUSH
11181: LD_INT 1
11183: EQUAL
11184: PUSH
11185: LD_EXP 13
11189: PPUSH
11190: CALL_OW 301
11194: OR
11195: IFFALSE 11199
// exit ;
11197: GO 11395
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11199: LD_EXP 13
11203: PPUSH
11204: LD_STRING D3b-Don-1
11206: PPUSH
11207: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11211: LD_ADDR_EXP 41
11215: PUSH
11216: LD_INT 1
11218: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11219: LD_ADDR_VAR 0 2
11223: PUSH
11224: LD_INT 22
11226: PUSH
11227: LD_INT 4
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PPUSH
11234: CALL_OW 69
11238: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11239: LD_INT 35
11241: PPUSH
11242: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11246: LD_VAR 0 2
11250: NOT
11251: PUSH
11252: LD_INT 22
11254: PUSH
11255: LD_INT 6
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 101
11264: PUSH
11265: LD_INT 1
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: OR
11281: IFFALSE 11239
// if not tmp then
11283: LD_VAR 0 2
11287: NOT
11288: IFFALSE 11292
// exit ;
11290: GO 11395
// for i in tmp do
11292: LD_ADDR_VAR 0 1
11296: PUSH
11297: LD_VAR 0 2
11301: PUSH
11302: FOR_IN
11303: IFFALSE 11322
// ComAgressiveMove ( i , 52 , 64 ) ;
11305: LD_VAR 0 1
11309: PPUSH
11310: LD_INT 52
11312: PPUSH
11313: LD_INT 64
11315: PPUSH
11316: CALL_OW 114
11320: GO 11302
11322: POP
11323: POP
// wait ( 0 0$10 ) ;
11324: LD_INT 350
11326: PPUSH
11327: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11331: LD_ADDR_VAR 0 1
11335: PUSH
11336: LD_INT 22
11338: PUSH
11339: LD_INT 4
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: PPUSH
11346: CALL_OW 69
11350: PUSH
11351: LD_EXP 5
11355: DIFF
11356: PUSH
11357: FOR_IN
11358: IFFALSE 11374
// SetSide ( i , 1 ) ;
11360: LD_VAR 0 1
11364: PPUSH
11365: LD_INT 1
11367: PPUSH
11368: CALL_OW 235
11372: GO 11357
11374: POP
11375: POP
// if IsLive ( Donaldson ) then
11376: LD_EXP 13
11380: PPUSH
11381: CALL_OW 300
11385: IFFALSE 11395
// saveDonaldson := 1 ;
11387: LD_ADDR_EXP 24
11391: PUSH
11392: LD_INT 1
11394: ST_TO_ADDR
// end ;
11395: PPOPN 2
11397: END
// every 0 0$1 trigger not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11398: LD_EXP 24
11402: NOT
11403: PUSH
11404: LD_EXP 41
11408: NOT
11409: AND
11410: PUSH
11411: LD_INT 26
11413: PPUSH
11414: LD_INT 22
11416: PUSH
11417: LD_INT 1
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 70
11428: PUSH
11429: LD_EXP 13
11433: PPUSH
11434: LD_EXP 1
11438: PPUSH
11439: CALL_OW 296
11443: PUSH
11444: LD_INT 6
11446: LESS
11447: OR
11448: AND
11449: IFFALSE 11504
11451: GO 11453
11453: DISABLE
11454: LD_INT 0
11456: PPUSH
// begin saveDonaldson := 1 ;
11457: LD_ADDR_EXP 24
11461: PUSH
11462: LD_INT 1
11464: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11465: LD_ADDR_VAR 0 1
11469: PUSH
11470: LD_INT 22
11472: PUSH
11473: LD_INT 4
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: PPUSH
11480: CALL_OW 69
11484: PUSH
11485: FOR_IN
11486: IFFALSE 11502
// SetSide ( i , 1 ) ;
11488: LD_VAR 0 1
11492: PPUSH
11493: LD_INT 1
11495: PPUSH
11496: CALL_OW 235
11500: GO 11485
11502: POP
11503: POP
// end ;
11504: PPOPN 1
11506: END
// every 0 0$1 trigger frankScoutBase do
11507: LD_EXP 25
11511: IFFALSE 11876
11513: GO 11515
11515: DISABLE
// begin wait ( 2 2$30 ) ;
11516: LD_INT 5250
11518: PPUSH
11519: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11523: LD_INT 35
11525: PPUSH
11526: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11530: LD_INT 81
11532: PUSH
11533: LD_INT 4
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: LD_INT 92
11542: PUSH
11543: LD_INT 84
11545: PUSH
11546: LD_INT 28
11548: PUSH
11549: LD_INT 22
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PPUSH
11562: CALL_OW 69
11566: NOT
11567: IFFALSE 11523
// uc_side = 4 ;
11569: LD_ADDR_OWVAR 20
11573: PUSH
11574: LD_INT 4
11576: ST_TO_ADDR
// uc_nation = 1 ;
11577: LD_ADDR_OWVAR 21
11581: PUSH
11582: LD_INT 1
11584: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11585: LD_ADDR_EXP 5
11589: PUSH
11590: LD_STRING 04t_Frank
11592: PPUSH
11593: CALL_OW 34
11597: ST_TO_ADDR
// if not Frank then
11598: LD_EXP 5
11602: NOT
11603: IFFALSE 11607
// exit ;
11605: GO 11876
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11607: LD_EXP 5
11611: PPUSH
11612: LD_INT 13
11614: PPUSH
11615: LD_INT 0
11617: PPUSH
11618: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11622: LD_INT 35
11624: PPUSH
11625: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11629: LD_EXP 1
11633: PPUSH
11634: CALL_OW 310
11638: NOT
11639: PUSH
11640: LD_EXP 1
11644: PPUSH
11645: LD_INT 4
11647: PPUSH
11648: CALL_OW 296
11652: PUSH
11653: LD_INT 20
11655: LESS
11656: AND
11657: IFFALSE 11690
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11659: LD_EXP 5
11663: PPUSH
11664: LD_EXP 1
11668: PPUSH
11669: CALL_OW 250
11673: PPUSH
11674: LD_EXP 1
11678: PPUSH
11679: CALL_OW 251
11683: PPUSH
11684: CALL_OW 111
11688: GO 11705
// ComMoveXY ( Frank , 51 , 15 ) ;
11690: LD_EXP 5
11694: PPUSH
11695: LD_INT 51
11697: PPUSH
11698: LD_INT 15
11700: PPUSH
11701: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11705: LD_EXP 5
11709: PPUSH
11710: LD_EXP 1
11714: PPUSH
11715: CALL_OW 296
11719: PUSH
11720: LD_INT 10
11722: LESS
11723: IFFALSE 11622
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11725: LD_EXP 1
11729: PUSH
11730: LD_EXP 5
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PPUSH
11739: CALL_OW 87
// DialogueOn ;
11743: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11747: LD_EXP 5
11751: PPUSH
11752: LD_STRING D3a-Frank-1
11754: PPUSH
11755: CALL_OW 88
// if Lisa then
11759: LD_EXP 4
11763: IFFALSE 11813
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11765: LD_EXP 4
11769: PPUSH
11770: LD_STRING D3a-Lisa-1
11772: PPUSH
11773: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11777: LD_EXP 5
11781: PPUSH
11782: LD_STRING D3a-Frank-2
11784: PPUSH
11785: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11789: LD_EXP 4
11793: PPUSH
11794: LD_STRING D3a-Lisa-2
11796: PPUSH
11797: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11801: LD_EXP 5
11805: PPUSH
11806: LD_STRING D3a-Frank-3
11808: PPUSH
11809: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11813: LD_EXP 1
11817: PPUSH
11818: LD_STRING D3a-JMM-3
11820: PPUSH
11821: CALL_OW 88
// DialogueOff ;
11825: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11829: LD_EXP 5
11833: PPUSH
11834: LD_INT 1
11836: PPUSH
11837: CALL_OW 235
// InGameOn ;
11841: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11845: LD_INT 1
11847: PPUSH
11848: LD_INT 7
11850: PPUSH
11851: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11855: LD_INT 93
11857: PPUSH
11858: LD_INT 91
11860: PPUSH
11861: CALL_OW 84
// wait ( 0 0$5 ) ;
11865: LD_INT 175
11867: PPUSH
11868: CALL_OW 67
// InGameOff ;
11872: CALL_OW 9
// end ;
11876: END
// every 12 12$0 trigger Difficulty > 1 do
11877: LD_OWVAR 67
11881: PUSH
11882: LD_INT 1
11884: GREATER
11885: IFFALSE 11909
11887: GO 11889
11889: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11890: LD_INT 24
11892: PPUSH
11893: LD_INT 24
11895: PPUSH
11896: LD_INT 1
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: LD_INT 53
11904: PPUSH
11905: CALL_OW 185
11909: END
// every 18 18$0 do
11910: GO 11912
11912: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11913: LD_EXP 14
11917: PPUSH
11918: LD_STRING D4-Har-1
11920: PPUSH
11921: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11925: LD_EXP 1
11929: PPUSH
11930: LD_STRING D4-JMM-1
11932: PPUSH
11933: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11937: LD_EXP 14
11941: PPUSH
11942: LD_STRING D4-Har-2
11944: PPUSH
11945: CALL_OW 94
// case Query ( Q1 ) of 1 :
11949: LD_STRING Q1
11951: PPUSH
11952: CALL_OW 97
11956: PUSH
11957: LD_INT 1
11959: DOUBLE
11960: EQUAL
11961: IFTRUE 11965
11963: GO 12024
11965: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11966: LD_EXP 1
11970: PPUSH
11971: LD_STRING D5-JMM-1
11973: PPUSH
11974: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11978: LD_EXP 14
11982: PPUSH
11983: LD_STRING D5-Har-1
11985: PPUSH
11986: CALL_OW 94
// timeToSupport = 10 10$0 ;
11990: LD_ADDR_EXP 28
11994: PUSH
11995: LD_INT 21000
11997: ST_TO_ADDR
// timerStatus = 2 ;
11998: LD_ADDR_EXP 29
12002: PUSH
12003: LD_INT 2
12005: ST_TO_ADDR
// startTimer = 1 ;
12006: LD_ADDR_EXP 30
12010: PUSH
12011: LD_INT 1
12013: ST_TO_ADDR
// harrAnswer = 1 ;
12014: LD_ADDR_EXP 26
12018: PUSH
12019: LD_INT 1
12021: ST_TO_ADDR
// end ; 2 :
12022: GO 12159
12024: LD_INT 2
12026: DOUBLE
12027: EQUAL
12028: IFTRUE 12032
12030: GO 12091
12032: POP
// begin Say ( JMM , D5-JMM-2 ) ;
12033: LD_EXP 1
12037: PPUSH
12038: LD_STRING D5-JMM-2
12040: PPUSH
12041: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
12045: LD_EXP 14
12049: PPUSH
12050: LD_STRING D5-Har-2
12052: PPUSH
12053: CALL_OW 94
// timeToSupport = 5 5$0 ;
12057: LD_ADDR_EXP 28
12061: PUSH
12062: LD_INT 10500
12064: ST_TO_ADDR
// timerStatus = 2 ;
12065: LD_ADDR_EXP 29
12069: PUSH
12070: LD_INT 2
12072: ST_TO_ADDR
// startTimer = 1 ;
12073: LD_ADDR_EXP 30
12077: PUSH
12078: LD_INT 1
12080: ST_TO_ADDR
// harrAnswer = 2 ;
12081: LD_ADDR_EXP 26
12085: PUSH
12086: LD_INT 2
12088: ST_TO_ADDR
// end ; 3 :
12089: GO 12159
12091: LD_INT 3
12093: DOUBLE
12094: EQUAL
12095: IFTRUE 12099
12097: GO 12158
12099: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12100: LD_EXP 1
12104: PPUSH
12105: LD_STRING D5-JMM-3
12107: PPUSH
12108: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12112: LD_EXP 14
12116: PPUSH
12117: LD_STRING D5-Har-3
12119: PPUSH
12120: CALL_OW 94
// timeToSupport = 5 5$0 ;
12124: LD_ADDR_EXP 28
12128: PUSH
12129: LD_INT 10500
12131: ST_TO_ADDR
// timerStatus = 2 ;
12132: LD_ADDR_EXP 29
12136: PUSH
12137: LD_INT 2
12139: ST_TO_ADDR
// startTimer = 1 ;
12140: LD_ADDR_EXP 30
12144: PUSH
12145: LD_INT 1
12147: ST_TO_ADDR
// harrAnswer = 3 ;
12148: LD_ADDR_EXP 26
12152: PUSH
12153: LD_INT 3
12155: ST_TO_ADDR
// end ; end ;
12156: GO 12159
12158: POP
// end ;
12159: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12160: LD_EXP 29
12164: PUSH
12165: LD_INT 2
12167: EQUAL
12168: PUSH
12169: LD_EXP 28
12173: PUSH
12174: LD_INT 0
12176: EQUAL
12177: AND
12178: IFFALSE 12467
12180: GO 12182
12182: DISABLE
// begin timerStatus = 4 ;
12183: LD_ADDR_EXP 29
12187: PUSH
12188: LD_INT 4
12190: ST_TO_ADDR
// if harrAnswer = 1 then
12191: LD_EXP 26
12195: PUSH
12196: LD_INT 1
12198: EQUAL
12199: IFFALSE 12283
// begin PrepareHarrisonSupport ( 3 ) ;
12201: LD_INT 3
12203: PPUSH
12204: CALL 1778 0 1
// wait ( 1 1$0 ) ;
12208: LD_INT 2100
12210: PPUSH
12211: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12215: LD_EXP 14
12219: PPUSH
12220: LD_STRING D7-Har-1
12222: PPUSH
12223: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12227: LD_STRING M2
12229: PPUSH
12230: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12234: LD_ADDR_EXP 27
12238: PUSH
12239: LD_INT 31500
12241: PUSH
12242: LD_INT 10500
12244: PUSH
12245: LD_INT 8400
12247: PUSH
12248: LD_INT 6300
12250: PUSH
12251: LD_INT 6300
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: PUSH
12260: LD_OWVAR 67
12264: ARRAY
12265: PLUS
12266: ST_TO_ADDR
// startTimer = 1 ;
12267: LD_ADDR_EXP 30
12271: PUSH
12272: LD_INT 1
12274: ST_TO_ADDR
// timerStatus = 3 ;
12275: LD_ADDR_EXP 29
12279: PUSH
12280: LD_INT 3
12282: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12283: LD_EXP 26
12287: PUSH
12288: LD_INT 2
12290: EQUAL
12291: IFFALSE 12375
// begin PrepareHarrisonSupport ( 4 ) ;
12293: LD_INT 4
12295: PPUSH
12296: CALL 1778 0 1
// wait ( 1 1$0 ) ;
12300: LD_INT 2100
12302: PPUSH
12303: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12307: LD_EXP 14
12311: PPUSH
12312: LD_STRING D7-Har-1
12314: PPUSH
12315: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12319: LD_STRING M2
12321: PPUSH
12322: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12326: LD_ADDR_EXP 27
12330: PUSH
12331: LD_INT 33600
12333: PUSH
12334: LD_INT 10500
12336: PUSH
12337: LD_INT 8400
12339: PUSH
12340: LD_INT 6300
12342: PUSH
12343: LD_INT 5250
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: PUSH
12352: LD_OWVAR 67
12356: ARRAY
12357: PLUS
12358: ST_TO_ADDR
// startTimer = 1 ;
12359: LD_ADDR_EXP 30
12363: PUSH
12364: LD_INT 1
12366: ST_TO_ADDR
// timerStatus = 3 ;
12367: LD_ADDR_EXP 29
12371: PUSH
12372: LD_INT 3
12374: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12375: LD_EXP 26
12379: PUSH
12380: LD_INT 3
12382: EQUAL
12383: IFFALSE 12467
// begin PrepareHarrisonSupport ( 5 ) ;
12385: LD_INT 5
12387: PPUSH
12388: CALL 1778 0 1
// wait ( 1 1$0 ) ;
12392: LD_INT 2100
12394: PPUSH
12395: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12399: LD_EXP 14
12403: PPUSH
12404: LD_STRING D7-Har-1
12406: PPUSH
12407: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12411: LD_STRING M2
12413: PPUSH
12414: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12418: LD_ADDR_EXP 27
12422: PUSH
12423: LD_INT 35700
12425: PUSH
12426: LD_INT 10500
12428: PUSH
12429: LD_INT 6300
12431: PUSH
12432: LD_INT 4200
12434: PUSH
12435: LD_INT 3150
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: PUSH
12444: LD_OWVAR 67
12448: ARRAY
12449: PLUS
12450: ST_TO_ADDR
// startTimer = 1 ;
12451: LD_ADDR_EXP 30
12455: PUSH
12456: LD_INT 1
12458: ST_TO_ADDR
// timerStatus = 3 ;
12459: LD_ADDR_EXP 29
12463: PUSH
12464: LD_INT 3
12466: ST_TO_ADDR
// end ; end ;
12467: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12468: LD_EXP 27
12472: PUSH
12473: LD_INT 8400
12475: LESSEQUAL
12476: PUSH
12477: LD_EXP 29
12481: PUSH
12482: LD_INT 3
12484: EQUAL
12485: AND
12486: IFFALSE 12518
12488: GO 12490
12490: DISABLE
// begin DialogueOn ;
12491: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12495: LD_EXP 14
12499: PPUSH
12500: LD_STRING D7a-Har-1
12502: PPUSH
12503: CALL_OW 94
// DialogueOff ;
12507: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12511: LD_STRING M2a
12513: PPUSH
12514: CALL_OW 337
// end ;
12518: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12519: LD_EXP 27
12523: PUSH
12524: LD_INT 0
12526: LESSEQUAL
12527: PUSH
12528: LD_EXP 29
12532: PUSH
12533: LD_INT 3
12535: EQUAL
12536: AND
12537: PUSH
12538: LD_EXP 40
12542: NOT
12543: AND
12544: IFFALSE 12683
12546: GO 12548
12548: DISABLE
12549: LD_INT 0
12551: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12552: LD_ADDR_VAR 0 1
12556: PUSH
12557: LD_INT 22
12559: PUSH
12560: LD_INT 1
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PPUSH
12567: CALL_OW 69
12571: PUSH
12572: LD_EXP 1
12576: PUSH
12577: EMPTY
12578: LIST
12579: DIFF
12580: ST_TO_ADDR
// saveDonaldson = 2 ;
12581: LD_ADDR_EXP 24
12585: PUSH
12586: LD_INT 2
12588: ST_TO_ADDR
// DialogueOn ;
12589: CALL_OW 6
// if IsOk ( Donaldson ) then
12593: LD_EXP 13
12597: PPUSH
12598: CALL_OW 302
12602: IFFALSE 12618
// SayRadio ( Harisson , D8-Har-1 ) else
12604: LD_EXP 14
12608: PPUSH
12609: LD_STRING D8-Har-1
12611: PPUSH
12612: CALL_OW 94
12616: GO 12630
// SayRadio ( Harisson , D8-Har-1a ) ;
12618: LD_EXP 14
12622: PPUSH
12623: LD_STRING D8-Har-1a
12625: PPUSH
12626: CALL_OW 94
// DialogueOff ;
12630: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12634: LD_VAR 0 1
12638: PPUSH
12639: LD_INT 4
12641: PPUSH
12642: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12646: LD_VAR 0 1
12650: PPUSH
12651: LD_INT 88
12653: PPUSH
12654: LD_INT 89
12656: PPUSH
12657: CALL_OW 114
// honor = 0 ;
12661: LD_ADDR_EXP 39
12665: PUSH
12666: LD_INT 0
12668: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12669: LD_INT 350
12671: PPUSH
12672: CALL_OW 67
// YouLost ( LostCommand ) ;
12676: LD_STRING LostCommand
12678: PPUSH
12679: CALL_OW 104
// end ;
12683: PPOPN 1
12685: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12686: LD_INT 22
12688: PUSH
12689: LD_INT 6
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 21
12698: PUSH
12699: LD_INT 1
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PPUSH
12710: CALL_OW 69
12714: PUSH
12715: LD_INT 0
12717: EQUAL
12718: PUSH
12719: LD_EXP 20
12723: PUSH
12724: LD_INT 0
12726: EQUAL
12727: AND
12728: PUSH
12729: LD_EXP 44
12733: PUSH
12734: LD_INT 1
12736: EQUAL
12737: AND
12738: IFFALSE 12832
12740: GO 12742
12742: DISABLE
12743: LD_INT 0
12745: PPUSH
12746: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12747: LD_ADDR_VAR 0 2
12751: PUSH
12752: LD_INT 22
12754: PUSH
12755: LD_INT 1
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: LD_INT 21
12764: PUSH
12765: LD_INT 1
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PUSH
12772: LD_INT 23
12774: PUSH
12775: LD_INT 1
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 69
12791: ST_TO_ADDR
// for i in tmp do
12792: LD_ADDR_VAR 0 1
12796: PUSH
12797: LD_VAR 0 2
12801: PUSH
12802: FOR_IN
12803: IFFALSE 12830
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12805: LD_VAR 0 1
12809: PPUSH
12810: LD_INT 1
12812: PPUSH
12813: LD_INT 4
12815: PPUSH
12816: CALL_OW 12
12820: PPUSH
12821: LD_INT 500
12823: PPUSH
12824: CALL_OW 492
12828: GO 12802
12830: POP
12831: POP
// end ; end_of_file
12832: PPOPN 2
12834: END
// every 0 0$1 trigger AIEnable do
12835: LD_EXP 37
12839: IFFALSE 12933
12841: GO 12843
12843: DISABLE
// begin enable ;
12844: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12845: LD_INT 3
12847: PPUSH
12848: LD_INT 21
12850: PPUSH
12851: LD_INT 7
12853: PPUSH
12854: CALL 6059 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12858: LD_INT 3
12860: PPUSH
12861: LD_INT 8
12863: PPUSH
12864: LD_INT 7
12866: PPUSH
12867: LD_INT 1
12869: PPUSH
12870: CALL 6363 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12874: LD_EXP 20
12878: PUSH
12879: LD_INT 2
12881: EQUAL
12882: PUSH
12883: LD_INT 22
12885: PUSH
12886: LD_INT 6
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PPUSH
12893: CALL_OW 69
12897: AND
12898: IFFALSE 12933
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12900: LD_INT 6
12902: PPUSH
12903: LD_EXP 21
12907: PPUSH
12908: LD_INT 6
12910: PPUSH
12911: CALL 6059 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12915: LD_INT 6
12917: PPUSH
12918: LD_INT 9
12920: PPUSH
12921: LD_INT 6
12923: PPUSH
12924: LD_EXP 22
12928: PPUSH
12929: CALL 6363 0 4
// end ; end ;
12933: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12934: LD_EXP 15
12938: PPUSH
12939: CALL_OW 310
12943: NOT
12944: PUSH
12945: LD_INT 21
12947: PPUSH
12948: CALL_OW 302
12952: AND
12953: PUSH
12954: LD_INT 21
12956: PPUSH
12957: CALL_OW 255
12961: PUSH
12962: LD_INT 3
12964: EQUAL
12965: AND
12966: IFFALSE 12983
12968: GO 12970
12970: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12971: LD_EXP 15
12975: PPUSH
12976: LD_INT 21
12978: PPUSH
12979: CALL_OW 120
12983: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12984: LD_INT 22
12986: PUSH
12987: LD_INT 3
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PUSH
12994: LD_INT 21
12996: PUSH
12997: LD_INT 2
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: PUSH
13004: LD_INT 55
13006: PUSH
13007: EMPTY
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: PPUSH
13015: CALL_OW 69
13019: PUSH
13020: LD_INT 0
13022: EQUAL
13023: PUSH
13024: LD_INT 1
13026: PPUSH
13027: CALL_OW 255
13031: PUSH
13032: LD_INT 3
13034: EQUAL
13035: AND
13036: PUSH
13037: LD_INT 21
13039: PPUSH
13040: CALL_OW 302
13044: AND
13045: PUSH
13046: LD_INT 21
13048: PPUSH
13049: CALL_OW 255
13053: PUSH
13054: LD_INT 3
13056: EQUAL
13057: AND
13058: PUSH
13059: LD_INT 21
13061: PPUSH
13062: CALL_OW 302
13066: AND
13067: IFFALSE 13279
13069: GO 13071
13071: DISABLE
// begin enable ;
13072: ENABLE
// if Difficulty = 1 then
13073: LD_OWVAR 67
13077: PUSH
13078: LD_INT 1
13080: EQUAL
13081: IFFALSE 13125
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
13083: LD_INT 3
13085: PPUSH
13086: LD_INT 24
13088: PPUSH
13089: LD_OWVAR 67
13093: PUSH
13094: LD_INT 2
13096: PLUS
13097: PPUSH
13098: LD_INT 42
13100: PUSH
13101: LD_INT 44
13103: PUSH
13104: LD_INT 43
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: LIST
13111: PPUSH
13112: LD_INT 1
13114: PPUSH
13115: LD_INT 1
13117: PPUSH
13118: LD_INT 21
13120: PPUSH
13121: CALL 6877 0 7
// if Difficulty = 2 then
13125: LD_OWVAR 67
13129: PUSH
13130: LD_INT 2
13132: EQUAL
13133: IFFALSE 13200
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13135: LD_INT 3
13137: PPUSH
13138: LD_INT 24
13140: PPUSH
13141: LD_OWVAR 67
13145: PUSH
13146: LD_INT 2
13148: PLUS
13149: PPUSH
13150: LD_INT 44
13152: PUSH
13153: LD_INT 44
13155: PUSH
13156: LD_INT 43
13158: PUSH
13159: LD_INT 43
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: PPUSH
13168: LD_INT 1
13170: PPUSH
13171: LD_INT 1
13173: PPUSH
13174: LD_INT 21
13176: PUSH
13177: LD_INT 22
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: LD_INT 1
13186: PPUSH
13187: LD_INT 2
13189: PPUSH
13190: CALL_OW 12
13194: ARRAY
13195: PPUSH
13196: CALL 6877 0 7
// if Difficulty >= 3 then
13200: LD_OWVAR 67
13204: PUSH
13205: LD_INT 3
13207: GREATEREQUAL
13208: IFFALSE 13279
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13210: LD_INT 3
13212: PPUSH
13213: LD_INT 24
13215: PPUSH
13216: LD_OWVAR 67
13220: PUSH
13221: LD_INT 2
13223: PPUSH
13224: LD_INT 3
13226: PPUSH
13227: CALL_OW 12
13231: PLUS
13232: PPUSH
13233: LD_INT 44
13235: PUSH
13236: LD_INT 44
13238: PUSH
13239: LD_INT 43
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: PPUSH
13247: LD_INT 1
13249: PPUSH
13250: LD_INT 1
13252: PPUSH
13253: LD_INT 22
13255: PUSH
13256: LD_INT 23
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: LD_INT 1
13265: PPUSH
13266: LD_INT 2
13268: PPUSH
13269: CALL_OW 12
13273: ARRAY
13274: PPUSH
13275: CALL 6877 0 7
// end ;
13279: END
// every 0 0$1 do
13280: GO 13282
13282: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13283: LD_INT 3
13285: PPUSH
13286: LD_INT 1
13288: PPUSH
13289: LD_INT 3
13291: PPUSH
13292: CALL 5980 0 3
13296: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13297: LD_EXP 20
13301: PUSH
13302: LD_INT 1
13304: EQUAL
13305: IFFALSE 13452
13307: GO 13309
13309: DISABLE
13310: LD_INT 0
13312: PPUSH
13313: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13314: LD_ADDR_VAR 0 2
13318: PUSH
13319: LD_INT 22
13321: PUSH
13322: LD_INT 6
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PUSH
13329: LD_INT 21
13331: PUSH
13332: LD_INT 2
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PUSH
13339: LD_INT 34
13341: PUSH
13342: LD_INT 51
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: LIST
13353: PPUSH
13354: CALL_OW 69
13358: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13359: LD_VAR 0 2
13363: PUSH
13364: LD_INT 1
13366: ARRAY
13367: PPUSH
13368: LD_EXP 21
13372: PPUSH
13373: CALL_OW 250
13377: PUSH
13378: LD_INT 5
13380: MINUS
13381: PPUSH
13382: LD_EXP 21
13386: PPUSH
13387: CALL_OW 251
13391: PUSH
13392: LD_INT 5
13394: MINUS
13395: PPUSH
13396: CALL_OW 111
// wait ( 0 0$5 ) ;
13400: LD_INT 175
13402: PPUSH
13403: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13407: LD_VAR 0 2
13411: PUSH
13412: LD_INT 1
13414: ARRAY
13415: PPUSH
13416: LD_INT 41
13418: PPUSH
13419: LD_INT 52
13421: PPUSH
13422: CALL_OW 177
// wait ( 0 0$40 ) ;
13426: LD_INT 1400
13428: PPUSH
13429: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13433: LD_VAR 0 2
13437: PUSH
13438: LD_INT 1
13440: ARRAY
13441: PPUSH
13442: LD_INT 41
13444: PPUSH
13445: LD_INT 44
13447: PPUSH
13448: CALL_OW 111
// end ;
13452: PPOPN 2
13454: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13455: LD_EXP 21
13459: PPUSH
13460: CALL_OW 274
13464: PPUSH
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 275
13472: PUSH
13473: LD_INT 100
13475: GREATEREQUAL
13476: IFFALSE 13704
13478: GO 13480
13480: DISABLE
13481: LD_INT 0
13483: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13484: LD_ADDR_VAR 0 1
13488: PUSH
13489: LD_INT 22
13491: PUSH
13492: LD_INT 6
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: LD_INT 21
13501: PUSH
13502: LD_INT 1
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: PUSH
13509: LD_INT 25
13511: PUSH
13512: LD_INT 2
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: LIST
13523: PPUSH
13524: CALL_OW 69
13528: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13529: LD_VAR 0 1
13533: PUSH
13534: LD_INT 1
13536: ARRAY
13537: PPUSH
13538: LD_INT 4
13540: PPUSH
13541: LD_INT 39
13543: PPUSH
13544: LD_INT 37
13546: PPUSH
13547: LD_INT 3
13549: PPUSH
13550: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13554: LD_VAR 0 1
13558: PUSH
13559: LD_INT 1
13561: ARRAY
13562: PPUSH
13563: LD_INT 29
13565: PPUSH
13566: LD_INT 42
13568: PPUSH
13569: LD_INT 54
13571: PPUSH
13572: LD_INT 3
13574: PPUSH
13575: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13579: LD_VAR 0 1
13583: PUSH
13584: LD_INT 1
13586: ARRAY
13587: PPUSH
13588: LD_INT 6
13590: PPUSH
13591: LD_INT 38
13593: PPUSH
13594: LD_INT 48
13596: PPUSH
13597: LD_INT 0
13599: PPUSH
13600: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13604: LD_VAR 0 1
13608: PUSH
13609: LD_INT 1
13611: ARRAY
13612: PPUSH
13613: LD_INT 2
13615: PPUSH
13616: LD_INT 32
13618: PPUSH
13619: LD_INT 38
13621: PPUSH
13622: LD_INT 2
13624: PPUSH
13625: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13629: LD_VAR 0 1
13633: PUSH
13634: LD_INT 1
13636: ARRAY
13637: PPUSH
13638: LD_INT 26
13640: PPUSH
13641: LD_INT 39
13643: PPUSH
13644: LD_INT 55
13646: PPUSH
13647: LD_INT 3
13649: PPUSH
13650: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13654: LD_VAR 0 1
13658: PUSH
13659: LD_INT 1
13661: ARRAY
13662: PPUSH
13663: LD_INT 32
13665: PPUSH
13666: LD_INT 31
13668: PPUSH
13669: LD_INT 31
13671: PPUSH
13672: LD_INT 3
13674: PPUSH
13675: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13679: LD_VAR 0 1
13683: PUSH
13684: LD_INT 1
13686: ARRAY
13687: PPUSH
13688: LD_INT 31
13690: PPUSH
13691: LD_INT 50
13693: PPUSH
13694: LD_INT 51
13696: PPUSH
13697: LD_INT 4
13699: PPUSH
13700: CALL_OW 205
// end ;
13704: PPOPN 1
13706: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13707: LD_EXP 46
13711: IFFALSE 14268
13713: GO 13715
13715: DISABLE
13716: LD_INT 0
13718: PPUSH
13719: PPUSH
13720: PPUSH
// begin enable ;
13721: ENABLE
// if not ruMobile then
13722: LD_EXP 46
13726: NOT
13727: IFFALSE 13731
// exit ;
13729: GO 14268
// for i in ruMobile do
13731: LD_ADDR_VAR 0 1
13735: PUSH
13736: LD_EXP 46
13740: PUSH
13741: FOR_IN
13742: IFFALSE 14266
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13744: LD_VAR 0 1
13748: PPUSH
13749: CALL_OW 302
13753: NOT
13754: PUSH
13755: LD_VAR 0 1
13759: PPUSH
13760: CALL_OW 255
13764: PUSH
13765: LD_INT 3
13767: NONEQUAL
13768: OR
13769: IFFALSE 13789
// begin ruMobile := ruMobile diff i ;
13771: LD_ADDR_EXP 46
13775: PUSH
13776: LD_EXP 46
13780: PUSH
13781: LD_VAR 0 1
13785: DIFF
13786: ST_TO_ADDR
// continue ;
13787: GO 13741
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13789: LD_VAR 0 1
13793: PPUSH
13794: CALL_OW 110
13798: NOT
13799: PUSH
13800: LD_VAR 0 1
13804: PPUSH
13805: CALL_OW 110
13809: PUSH
13810: LD_INT 0
13812: EQUAL
13813: OR
13814: IFFALSE 13929
// begin if GetFuel ( i ) < 50 then
13816: LD_VAR 0 1
13820: PPUSH
13821: CALL_OW 261
13825: PUSH
13826: LD_INT 50
13828: LESS
13829: IFFALSE 13888
// begin ComMoveXY ( i , 106 , 88 ) ;
13831: LD_VAR 0 1
13835: PPUSH
13836: LD_INT 106
13838: PPUSH
13839: LD_INT 88
13841: PPUSH
13842: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13846: LD_INT 35
13848: PPUSH
13849: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13853: LD_VAR 0 1
13857: PPUSH
13858: LD_INT 106
13860: PPUSH
13861: LD_INT 88
13863: PPUSH
13864: CALL_OW 297
13868: PUSH
13869: LD_INT 4
13871: LESS
13872: IFFALSE 13846
// SetFuel ( i , 100 ) ;
13874: LD_VAR 0 1
13878: PPUSH
13879: LD_INT 100
13881: PPUSH
13882: CALL_OW 240
// end else
13886: GO 13929
// if not IsInArea ( i , ruParking ) then
13888: LD_VAR 0 1
13892: PPUSH
13893: LD_INT 25
13895: PPUSH
13896: CALL_OW 308
13900: NOT
13901: IFFALSE 13917
// ComMoveToArea ( i , ruParking ) else
13903: LD_VAR 0 1
13907: PPUSH
13908: LD_INT 25
13910: PPUSH
13911: CALL_OW 113
13915: GO 13929
// SetTag ( i , 1 ) ;
13917: LD_VAR 0 1
13921: PPUSH
13922: LD_INT 1
13924: PPUSH
13925: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13929: LD_VAR 0 1
13933: PPUSH
13934: CALL_OW 110
13938: PUSH
13939: LD_INT 1
13941: EQUAL
13942: IFFALSE 14072
// begin if GetLives ( i ) < 1000 then
13944: LD_VAR 0 1
13948: PPUSH
13949: CALL_OW 256
13953: PUSH
13954: LD_INT 1000
13956: LESS
13957: IFFALSE 14049
// begin if not IsDrivenBy ( i ) then
13959: LD_VAR 0 1
13963: PPUSH
13964: CALL_OW 311
13968: NOT
13969: IFFALSE 13973
// continue ;
13971: GO 13741
// mech := IsDrivenBy ( i ) ;
13973: LD_ADDR_VAR 0 2
13977: PUSH
13978: LD_VAR 0 1
13982: PPUSH
13983: CALL_OW 311
13987: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13988: LD_VAR 0 2
13992: PPUSH
13993: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13997: LD_VAR 0 2
14001: PPUSH
14002: LD_VAR 0 1
14006: PPUSH
14007: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
14011: LD_INT 35
14013: PPUSH
14014: CALL_OW 67
// until GetLives ( i ) = 1000 ;
14018: LD_VAR 0 1
14022: PPUSH
14023: CALL_OW 256
14027: PUSH
14028: LD_INT 1000
14030: EQUAL
14031: IFFALSE 14011
// ComEnterUnit ( mech , i ) ;
14033: LD_VAR 0 2
14037: PPUSH
14038: LD_VAR 0 1
14042: PPUSH
14043: CALL_OW 120
// end else
14047: GO 14072
// if IsDrivenBy ( i ) then
14049: LD_VAR 0 1
14053: PPUSH
14054: CALL_OW 311
14058: IFFALSE 14072
// SetTag ( i , 2 ) ;
14060: LD_VAR 0 1
14064: PPUSH
14065: LD_INT 2
14067: PPUSH
14068: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
14072: LD_VAR 0 1
14076: PPUSH
14077: CALL_OW 110
14081: PUSH
14082: LD_INT 2
14084: EQUAL
14085: IFFALSE 14264
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14087: LD_ADDR_VAR 0 3
14091: PUSH
14092: LD_INT 24
14094: PPUSH
14095: LD_INT 81
14097: PUSH
14098: LD_INT 3
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PPUSH
14105: CALL_OW 70
14109: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14110: LD_VAR 0 1
14114: PPUSH
14115: CALL_OW 256
14119: PUSH
14120: LD_INT 650
14122: LESS
14123: IFFALSE 14148
// begin ComStop ( i ) ;
14125: LD_VAR 0 1
14129: PPUSH
14130: CALL_OW 141
// SetTag ( i , 0 ) ;
14134: LD_VAR 0 1
14138: PPUSH
14139: LD_INT 0
14141: PPUSH
14142: CALL_OW 109
// continue ;
14146: GO 13741
// end ; if enemy then
14148: LD_VAR 0 3
14152: IFFALSE 14192
// begin if not HasTask ( i ) then
14154: LD_VAR 0 1
14158: PPUSH
14159: CALL_OW 314
14163: NOT
14164: IFFALSE 14190
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14166: LD_VAR 0 1
14170: PPUSH
14171: LD_VAR 0 3
14175: PPUSH
14176: LD_VAR 0 1
14180: PPUSH
14181: CALL_OW 74
14185: PPUSH
14186: CALL_OW 115
// end else
14190: GO 14264
// if ruMobile > 2 then
14192: LD_EXP 46
14196: PUSH
14197: LD_INT 2
14199: GREATER
14200: IFFALSE 14264
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14202: LD_ADDR_VAR 0 3
14206: PUSH
14207: LD_INT 81
14209: PUSH
14210: LD_INT 3
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PPUSH
14217: CALL_OW 69
14221: ST_TO_ADDR
// if enemy then
14222: LD_VAR 0 3
14226: IFFALSE 14264
// if not HasTask ( i ) then
14228: LD_VAR 0 1
14232: PPUSH
14233: CALL_OW 314
14237: NOT
14238: IFFALSE 14264
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14240: LD_VAR 0 1
14244: PPUSH
14245: LD_VAR 0 3
14249: PPUSH
14250: LD_VAR 0 1
14254: PPUSH
14255: CALL_OW 74
14259: PPUSH
14260: CALL_OW 115
// end ; end ; end ;
14264: GO 13741
14266: POP
14267: POP
// end ; end_of_file
14268: PPOPN 3
14270: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14271: LD_INT 0
14273: PPUSH
14274: PPUSH
14275: PPUSH
14276: PPUSH
14277: PPUSH
14278: PPUSH
14279: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14280: LD_ADDR_VAR 0 3
14284: PUSH
14285: LD_INT 22
14287: PUSH
14288: LD_INT 6
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 21
14297: PUSH
14298: LD_INT 1
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: LD_INT 25
14307: PUSH
14308: LD_INT 1
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PUSH
14315: LD_INT 3
14317: PUSH
14318: LD_INT 54
14320: PUSH
14321: EMPTY
14322: LIST
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: PPUSH
14334: CALL_OW 69
14338: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14339: LD_ADDR_VAR 0 7
14343: PUSH
14344: LD_INT 22
14346: PUSH
14347: LD_INT 6
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 21
14356: PUSH
14357: LD_INT 1
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 25
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: LD_INT 54
14376: PUSH
14377: EMPTY
14378: LIST
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: PPUSH
14386: CALL_OW 69
14390: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14391: LD_ADDR_VAR 0 4
14395: PUSH
14396: LD_INT 22
14398: PUSH
14399: LD_INT 6
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 21
14408: PUSH
14409: LD_INT 1
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 25
14418: PUSH
14419: LD_INT 2
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: PPUSH
14431: CALL_OW 69
14435: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14436: LD_ADDR_VAR 0 6
14440: PUSH
14441: LD_INT 22
14443: PUSH
14444: LD_INT 6
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 21
14453: PUSH
14454: LD_INT 1
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 25
14463: PUSH
14464: LD_INT 4
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: LIST
14475: PPUSH
14476: CALL_OW 69
14480: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14481: LD_ADDR_VAR 0 8
14485: PUSH
14486: LD_INT 22
14488: PUSH
14489: LD_INT 6
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PUSH
14496: LD_INT 21
14498: PUSH
14499: LD_INT 2
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 34
14508: PUSH
14509: LD_INT 51
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: LIST
14520: PPUSH
14521: CALL_OW 69
14525: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14526: LD_VAR 0 1
14530: PPUSH
14531: CALL_OW 255
14535: PUSH
14536: LD_INT 6
14538: EQUAL
14539: PUSH
14540: LD_VAR 0 1
14544: PPUSH
14545: CALL_OW 266
14549: PUSH
14550: LD_INT 0
14552: EQUAL
14553: AND
14554: IFFALSE 14574
// begin ruPDepot = building ;
14556: LD_ADDR_EXP 21
14560: PUSH
14561: LD_VAR 0 1
14565: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14566: LD_ADDR_EXP 20
14570: PUSH
14571: LD_INT 1
14573: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14574: LD_VAR 0 1
14578: PPUSH
14579: CALL_OW 266
14583: PUSH
14584: LD_INT 4
14586: EQUAL
14587: PUSH
14588: LD_VAR 0 1
14592: PPUSH
14593: CALL_OW 255
14597: PUSH
14598: LD_INT 6
14600: EQUAL
14601: AND
14602: IFFALSE 14635
// for i in tmpSold do
14604: LD_ADDR_VAR 0 2
14608: PUSH
14609: LD_VAR 0 3
14613: PUSH
14614: FOR_IN
14615: IFFALSE 14633
// ComEnterUnit ( i , building ) ;
14617: LD_VAR 0 2
14621: PPUSH
14622: LD_VAR 0 1
14626: PPUSH
14627: CALL_OW 120
14631: GO 14614
14633: POP
14634: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14635: LD_VAR 0 1
14639: PPUSH
14640: CALL_OW 266
14644: PUSH
14645: LD_INT 6
14647: EQUAL
14648: PUSH
14649: LD_VAR 0 1
14653: PPUSH
14654: CALL_OW 255
14658: PUSH
14659: LD_INT 6
14661: EQUAL
14662: AND
14663: IFFALSE 14721
// begin for i in tmpSci do
14665: LD_ADDR_VAR 0 2
14669: PUSH
14670: LD_VAR 0 6
14674: PUSH
14675: FOR_IN
14676: IFFALSE 14694
// ComEnterUnit ( i , building ) ;
14678: LD_VAR 0 2
14682: PPUSH
14683: LD_VAR 0 1
14687: PPUSH
14688: CALL_OW 120
14692: GO 14675
14694: POP
14695: POP
// ResAllTechs ( 6 , building , 3 ) ;
14696: LD_INT 6
14698: PPUSH
14699: LD_VAR 0 1
14703: PPUSH
14704: LD_INT 3
14706: PPUSH
14707: CALL 5980 0 3
// ruPLab = building ;
14711: LD_ADDR_EXP 22
14715: PUSH
14716: LD_VAR 0 1
14720: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14721: LD_VAR 0 1
14725: PPUSH
14726: CALL_OW 266
14730: PUSH
14731: LD_INT 2
14733: EQUAL
14734: PUSH
14735: LD_VAR 0 1
14739: PPUSH
14740: CALL_OW 255
14744: PUSH
14745: LD_INT 6
14747: EQUAL
14748: AND
14749: IFFALSE 14800
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14751: LD_ADDR_VAR 0 5
14755: PUSH
14756: LD_VAR 0 8
14760: PUSH
14761: LD_INT 1
14763: ARRAY
14764: PPUSH
14765: CALL_OW 313
14769: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14770: LD_VAR 0 5
14774: PPUSH
14775: CALL_OW 121
// wait ( 0 0$1 ) ;
14779: LD_INT 35
14781: PPUSH
14782: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14786: LD_VAR 0 5
14790: PPUSH
14791: LD_VAR 0 1
14795: PPUSH
14796: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14800: LD_VAR 0 1
14804: PPUSH
14805: CALL_OW 266
14809: PUSH
14810: LD_INT 32
14812: EQUAL
14813: PUSH
14814: LD_VAR 0 1
14818: PPUSH
14819: CALL_OW 255
14823: PUSH
14824: LD_INT 6
14826: EQUAL
14827: AND
14828: IFFALSE 14880
// begin ComPlaceWeapon ( building , 42 ) ;
14830: LD_VAR 0 1
14834: PPUSH
14835: LD_INT 42
14837: PPUSH
14838: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14842: LD_VAR 0 7
14846: PUSH
14847: LD_INT 1
14849: ARRAY
14850: PPUSH
14851: CALL_OW 122
// wait ( 0 0$1 ) ;
14855: LD_INT 35
14857: PPUSH
14858: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14862: LD_VAR 0 7
14866: PUSH
14867: LD_INT 1
14869: ARRAY
14870: PPUSH
14871: LD_VAR 0 1
14875: PPUSH
14876: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14880: LD_VAR 0 1
14884: PPUSH
14885: CALL_OW 266
14889: PUSH
14890: LD_INT 31
14892: EQUAL
14893: PUSH
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 255
14903: PUSH
14904: LD_INT 6
14906: EQUAL
14907: AND
14908: IFFALSE 14974
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14910: LD_VAR 0 7
14914: PUSH
14915: LD_INT 2
14917: ARRAY
14918: PPUSH
14919: CALL_OW 122
// wait ( 0 0$1 ) ;
14923: LD_INT 35
14925: PPUSH
14926: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14930: LD_VAR 0 7
14934: PUSH
14935: LD_INT 2
14937: ARRAY
14938: PPUSH
14939: LD_VAR 0 1
14943: PPUSH
14944: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14948: LD_VAR 0 4
14952: PUSH
14953: LD_INT 1
14955: ARRAY
14956: PPUSH
14957: LD_EXP 21
14961: PPUSH
14962: CALL_OW 120
// baseReadyToBuild = 2 ;
14966: LD_ADDR_EXP 20
14970: PUSH
14971: LD_INT 2
14973: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14974: LD_VAR 0 1
14978: PPUSH
14979: CALL_OW 266
14983: PUSH
14984: LD_INT 32
14986: EQUAL
14987: PUSH
14988: LD_VAR 0 1
14992: PPUSH
14993: CALL_OW 255
14997: PUSH
14998: LD_INT 1
15000: EQUAL
15001: AND
15002: PUSH
15003: LD_EXP 32
15007: PUSH
15008: LD_INT 0
15010: EQUAL
15011: AND
15012: IFFALSE 15257
// begin bunkerDialog = 1 ;
15014: LD_ADDR_EXP 32
15018: PUSH
15019: LD_INT 1
15021: ST_TO_ADDR
// if IsOK ( Claptopn ) then
15022: LD_EXP 11
15026: PPUSH
15027: CALL_OW 302
15031: IFFALSE 15047
// Say ( Claptopn , D11-Eng1-1 ) else
15033: LD_EXP 11
15037: PPUSH
15038: LD_STRING D11-Eng1-1
15040: PPUSH
15041: CALL_OW 88
15045: GO 15243
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15047: LD_INT 22
15049: PUSH
15050: LD_INT 1
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: LD_INT 21
15059: PUSH
15060: LD_INT 1
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: LD_INT 25
15069: PUSH
15070: LD_INT 3
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: LD_INT 26
15079: PUSH
15080: LD_INT 1
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: PPUSH
15093: CALL_OW 69
15097: PUSH
15098: LD_EXP 1
15102: PUSH
15103: EMPTY
15104: LIST
15105: PUSH
15106: LD_INT 0
15108: GREATER
15109: DIFF
15110: IFFALSE 15184
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15112: LD_INT 22
15114: PUSH
15115: LD_INT 1
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PUSH
15122: LD_INT 21
15124: PUSH
15125: LD_INT 1
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PUSH
15132: LD_INT 25
15134: PUSH
15135: LD_INT 2
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PUSH
15142: LD_INT 26
15144: PUSH
15145: LD_INT 1
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: PPUSH
15158: CALL_OW 69
15162: PUSH
15163: LD_EXP 1
15167: PUSH
15168: EMPTY
15169: LIST
15170: DIFF
15171: PPUSH
15172: LD_STRING D11-Eng1-1
15174: PPUSH
15175: LD_STRING D11-Eng1-1
15177: PPUSH
15178: CALL 4627 0 3
15182: GO 15243
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15184: LD_INT 22
15186: PUSH
15187: LD_INT 1
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 21
15196: PUSH
15197: LD_INT 1
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 26
15206: PUSH
15207: LD_INT 1
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: PPUSH
15219: CALL_OW 69
15223: PUSH
15224: LD_EXP 1
15228: PUSH
15229: EMPTY
15230: LIST
15231: DIFF
15232: PPUSH
15233: LD_STRING D11-Eng1-1
15235: PPUSH
15236: LD_STRING D11-Eng1-1
15238: PPUSH
15239: CALL 4627 0 3
// end ; if energyVDialog = 0 then
15243: LD_EXP 33
15247: PUSH
15248: LD_INT 0
15250: EQUAL
15251: IFFALSE 15257
// EnergyDialog ;
15253: CALL 5032 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15257: LD_VAR 0 1
15261: PPUSH
15262: CALL_OW 266
15266: PUSH
15267: LD_INT 29
15269: EQUAL
15270: PUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 255
15280: PUSH
15281: LD_INT 1
15283: EQUAL
15284: AND
15285: IFFALSE 15295
// buildOil = 1 ;
15287: LD_ADDR_EXP 34
15291: PUSH
15292: LD_INT 1
15294: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15295: LD_VAR 0 1
15299: PPUSH
15300: CALL_OW 266
15304: PUSH
15305: LD_INT 26
15307: EQUAL
15308: PUSH
15309: LD_VAR 0 1
15313: PPUSH
15314: CALL_OW 255
15318: PUSH
15319: LD_INT 1
15321: EQUAL
15322: AND
15323: IFFALSE 15333
// buildPower = 1 ;
15325: LD_ADDR_EXP 35
15329: PUSH
15330: LD_INT 1
15332: ST_TO_ADDR
// end ;
15333: PPOPN 8
15335: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15336: LD_VAR 0 1
15340: PPUSH
15341: CALL_OW 266
15345: PUSH
15346: LD_INT 3
15348: EQUAL
15349: PUSH
15350: LD_VAR 0 1
15354: PPUSH
15355: CALL_OW 255
15359: PUSH
15360: LD_INT 1
15362: EQUAL
15363: AND
15364: PUSH
15365: LD_EXP 31
15369: PUSH
15370: LD_INT 0
15372: EQUAL
15373: AND
15374: IFFALSE 15722
// begin factoryDialog = 1 ;
15376: LD_ADDR_EXP 31
15380: PUSH
15381: LD_INT 1
15383: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15384: LD_INT 47
15386: PPUSH
15387: LD_INT 1
15389: PPUSH
15390: CALL_OW 321
15394: PUSH
15395: LD_INT 1
15397: EQUAL
15398: PUSH
15399: LD_INT 45
15401: PPUSH
15402: LD_INT 1
15404: PPUSH
15405: CALL_OW 321
15409: PUSH
15410: LD_INT 1
15412: EQUAL
15413: AND
15414: IFFALSE 15722
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15416: LD_INT 22
15418: PUSH
15419: LD_INT 1
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 21
15428: PUSH
15429: LD_INT 3
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 30
15438: PUSH
15439: LD_INT 3
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: LD_INT 24
15448: PUSH
15449: LD_INT 1000
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: PPUSH
15462: CALL_OW 69
15466: PUSH
15467: LD_INT 1
15469: ARRAY
15470: PPUSH
15471: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15475: LD_EXP 1
15479: PPUSH
15480: LD_STRING D9a-JMM-1
15482: PPUSH
15483: CALL_OW 88
// if IsOK ( Campell ) then
15487: LD_EXP 12
15491: PPUSH
15492: CALL_OW 302
15496: IFFALSE 15512
// Say ( Campell , D9a-Mech1-1 ) else
15498: LD_EXP 12
15502: PPUSH
15503: LD_STRING D9a-Mech1-1
15505: PPUSH
15506: CALL_OW 88
15510: GO 15708
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15512: LD_INT 22
15514: PUSH
15515: LD_INT 1
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 21
15524: PUSH
15525: LD_INT 1
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 25
15534: PUSH
15535: LD_INT 3
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 26
15544: PUSH
15545: LD_INT 1
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: PPUSH
15558: CALL_OW 69
15562: PUSH
15563: LD_EXP 1
15567: PUSH
15568: EMPTY
15569: LIST
15570: PUSH
15571: LD_INT 0
15573: GREATER
15574: DIFF
15575: IFFALSE 15649
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15577: LD_INT 22
15579: PUSH
15580: LD_INT 1
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 21
15589: PUSH
15590: LD_INT 1
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 25
15599: PUSH
15600: LD_INT 3
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 26
15609: PUSH
15610: LD_INT 1
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: PPUSH
15623: CALL_OW 69
15627: PUSH
15628: LD_EXP 1
15632: PUSH
15633: EMPTY
15634: LIST
15635: DIFF
15636: PPUSH
15637: LD_STRING D9a-Mech1-1
15639: PPUSH
15640: LD_STRING D9a-Mech1-1
15642: PPUSH
15643: CALL 4627 0 3
15647: GO 15708
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15649: LD_INT 22
15651: PUSH
15652: LD_INT 1
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 21
15661: PUSH
15662: LD_INT 1
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 26
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 69
15688: PUSH
15689: LD_EXP 1
15693: PUSH
15694: EMPTY
15695: LIST
15696: DIFF
15697: PPUSH
15698: LD_STRING D9a-Mech1-1
15700: PPUSH
15701: LD_STRING D9a-Mech1-1
15703: PPUSH
15704: CALL 4627 0 3
// end ; if energyVDialog = 0 then
15708: LD_EXP 33
15712: PUSH
15713: LD_INT 0
15715: EQUAL
15716: IFFALSE 15722
// EnergyDialog ;
15718: CALL 5032 0 0
// end ; end ; end ;
15722: PPOPN 1
15724: END
// on UnitDestroyed ( unit ) do var mech ;
15725: LD_INT 0
15727: PPUSH
// begin if unit = JMM then
15728: LD_VAR 0 1
15732: PUSH
15733: LD_EXP 1
15737: EQUAL
15738: IFFALSE 15747
// YouLost ( JMM ) ;
15740: LD_STRING JMM
15742: PPUSH
15743: CALL_OW 104
// if unit = ambdept0 then
15747: LD_VAR 0 1
15751: PUSH
15752: LD_INT 4
15754: EQUAL
15755: IFFALSE 15764
// YouLost ( Base ) ;
15757: LD_STRING Base
15759: PPUSH
15760: CALL_OW 104
// if unit in ruMobile then
15764: LD_VAR 0 1
15768: PUSH
15769: LD_EXP 46
15773: IN
15774: IFFALSE 15792
// ruMobile = ruMobile diff ruMobile ;
15776: LD_ADDR_EXP 46
15780: PUSH
15781: LD_EXP 46
15785: PUSH
15786: LD_EXP 46
15790: DIFF
15791: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15792: LD_VAR 0 1
15796: PPUSH
15797: CALL_OW 247
15801: PUSH
15802: LD_INT 1
15804: EQUAL
15805: PUSH
15806: LD_VAR 0 1
15810: PPUSH
15811: CALL_OW 255
15815: PUSH
15816: LD_INT 1
15818: EQUAL
15819: AND
15820: IFFALSE 15836
// lostCounter = lostCounter + 1 ;
15822: LD_ADDR_EXP 38
15826: PUSH
15827: LD_EXP 38
15831: PUSH
15832: LD_INT 1
15834: PLUS
15835: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15836: LD_EXP 43
15840: PUSH
15841: LD_INT 24
15843: PPUSH
15844: CALL_OW 313
15848: PUSH
15849: LD_INT 6
15851: LESS
15852: AND
15853: PUSH
15854: LD_VAR 0 1
15858: PPUSH
15859: CALL_OW 257
15863: PUSH
15864: LD_INT 3
15866: EQUAL
15867: AND
15868: PUSH
15869: LD_VAR 0 1
15873: PPUSH
15874: CALL_OW 255
15878: PUSH
15879: LD_INT 3
15881: EQUAL
15882: AND
15883: PUSH
15884: LD_INT 24
15886: PPUSH
15887: CALL_OW 302
15891: AND
15892: PUSH
15893: LD_INT 24
15895: PPUSH
15896: CALL_OW 255
15900: PUSH
15901: LD_INT 3
15903: EQUAL
15904: AND
15905: IFFALSE 16034
// begin ruMech := ruMech - 1 ;
15907: LD_ADDR_EXP 43
15911: PUSH
15912: LD_EXP 43
15916: PUSH
15917: LD_INT 1
15919: MINUS
15920: ST_TO_ADDR
// if ruMech = 0 then
15921: LD_EXP 43
15925: PUSH
15926: LD_INT 0
15928: EQUAL
15929: IFFALSE 15933
// exit ;
15931: GO 16034
// wait ( 0 0$40 ) ;
15933: LD_INT 1400
15935: PPUSH
15936: CALL_OW 67
// uc_side = 3 ;
15940: LD_ADDR_OWVAR 20
15944: PUSH
15945: LD_INT 3
15947: ST_TO_ADDR
// uc_nation = 3 ;
15948: LD_ADDR_OWVAR 21
15952: PUSH
15953: LD_INT 3
15955: ST_TO_ADDR
// hc_gallery :=  ;
15956: LD_ADDR_OWVAR 33
15960: PUSH
15961: LD_STRING 
15963: ST_TO_ADDR
// hc_name :=  ;
15964: LD_ADDR_OWVAR 26
15968: PUSH
15969: LD_STRING 
15971: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15972: LD_INT 0
15974: PPUSH
15975: LD_EXP 16
15979: PPUSH
15980: LD_EXP 17
15984: PPUSH
15985: CALL_OW 12
15989: PPUSH
15990: CALL_OW 383
// mech := CreateHuman ;
15994: LD_ADDR_VAR 0 2
15998: PUSH
15999: CALL_OW 44
16003: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
16004: LD_VAR 0 2
16008: PPUSH
16009: LD_INT 124
16011: PPUSH
16012: LD_INT 97
16014: PPUSH
16015: LD_INT 0
16017: PPUSH
16018: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
16022: LD_VAR 0 2
16026: PPUSH
16027: LD_INT 24
16029: PPUSH
16030: CALL_OW 120
// end ; end ;
16034: PPOPN 2
16036: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
16037: LD_INT 0
16039: PPUSH
// begin if GetSide ( vehicle ) = 1 then
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL_OW 255
16049: PUSH
16050: LD_INT 1
16052: EQUAL
16053: IFFALSE 16069
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
16055: LD_ADDR_EXP 42
16059: PUSH
16060: LD_EXP 42
16064: PUSH
16065: LD_INT 1
16067: PLUS
16068: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16069: LD_VAR 0 1
16073: PPUSH
16074: CALL_OW 255
16078: PUSH
16079: LD_INT 3
16081: EQUAL
16082: PUSH
16083: LD_VAR 0 1
16087: PPUSH
16088: CALL_OW 264
16092: PUSH
16093: LD_INT 42
16095: PUSH
16096: LD_INT 43
16098: PUSH
16099: LD_INT 44
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: LIST
16106: IN
16107: AND
16108: IFFALSE 16126
// ruMobile := ruMobile union vehicle ;
16110: LD_ADDR_EXP 46
16114: PUSH
16115: LD_EXP 46
16119: PUSH
16120: LD_VAR 0 1
16124: UNION
16125: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16126: LD_VAR 0 1
16130: PPUSH
16131: CALL_OW 264
16135: PUSH
16136: LD_INT 53
16138: EQUAL
16139: IFFALSE 16275
// begin uc_side = 3 ;
16141: LD_ADDR_OWVAR 20
16145: PUSH
16146: LD_INT 3
16148: ST_TO_ADDR
// uc_nation = 3 ;
16149: LD_ADDR_OWVAR 21
16153: PUSH
16154: LD_INT 3
16156: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16157: LD_INT 0
16159: PPUSH
16160: LD_EXP 17
16164: PPUSH
16165: CALL_OW 383
// driver := CreateHuman ;
16169: LD_ADDR_VAR 0 3
16173: PUSH
16174: CALL_OW 44
16178: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16179: LD_VAR 0 3
16183: PPUSH
16184: LD_VAR 0 2
16188: PPUSH
16189: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16193: LD_VAR 0 1
16197: PPUSH
16198: LD_INT 21
16200: PPUSH
16201: CALL 5248 0 2
// repeat wait ( 0 0$1 ) ;
16205: LD_INT 35
16207: PPUSH
16208: CALL_OW 67
// until not HasTask ( vehicle ) ;
16212: LD_VAR 0 1
16216: PPUSH
16217: CALL_OW 314
16221: NOT
16222: IFFALSE 16205
// driver := IsDrivenBy ( vehicle ) ;
16224: LD_ADDR_VAR 0 3
16228: PUSH
16229: LD_VAR 0 1
16233: PPUSH
16234: CALL_OW 311
16238: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16239: LD_VAR 0 3
16243: PPUSH
16244: LD_INT 104
16246: PPUSH
16247: LD_INT 73
16249: PPUSH
16250: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16254: LD_VAR 0 3
16258: PPUSH
16259: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16263: LD_VAR 0 3
16267: PPUSH
16268: LD_INT 24
16270: PPUSH
16271: CALL_OW 180
// end ; end ;
16275: PPOPN 3
16277: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16278: LD_VAR 0 1
16282: PPUSH
16283: CALL_OW 255
16287: PUSH
16288: LD_INT 3
16290: EQUAL
16291: PUSH
16292: LD_VAR 0 1
16296: PPUSH
16297: CALL_OW 247
16301: PUSH
16302: LD_INT 2
16304: EQUAL
16305: AND
16306: PUSH
16307: LD_VAR 0 1
16311: PPUSH
16312: CALL_OW 264
16316: PUSH
16317: LD_INT 42
16319: PUSH
16320: LD_INT 43
16322: PUSH
16323: LD_INT 44
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: LIST
16330: IN
16331: AND
16332: IFFALSE 16381
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16334: LD_INT 24
16336: PPUSH
16337: LD_VAR 0 1
16341: PPUSH
16342: CALL_OW 265
16346: PPUSH
16347: LD_VAR 0 1
16351: PPUSH
16352: CALL_OW 262
16356: PPUSH
16357: LD_VAR 0 1
16361: PPUSH
16362: CALL_OW 263
16366: PPUSH
16367: LD_VAR 0 1
16371: PPUSH
16372: CALL_OW 264
16376: PPUSH
16377: CALL_OW 185
// end ;
16381: PPOPN 1
16383: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16384: LD_VAR 0 1
16388: PPUSH
16389: CALL_OW 255
16393: PUSH
16394: LD_INT 3
16396: EQUAL
16397: PUSH
16398: LD_VAR 0 2
16402: PPUSH
16403: CALL_OW 255
16407: PUSH
16408: LD_INT 3
16410: EQUAL
16411: AND
16412: PUSH
16413: LD_INT 24
16415: PPUSH
16416: CALL_OW 302
16420: AND
16421: PUSH
16422: LD_VAR 0 1
16426: PPUSH
16427: CALL_OW 302
16431: NOT
16432: AND
16433: IFFALSE 16447
// ComEnterUnit ( human , rubfact0 ) ;
16435: LD_VAR 0 2
16439: PPUSH
16440: LD_INT 24
16442: PPUSH
16443: CALL_OW 120
// end ;
16447: PPOPN 2
16449: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16450: LD_VAR 0 1
16454: PUSH
16455: LD_INT 24
16457: EQUAL
16458: PUSH
16459: LD_VAR 0 2
16463: PPUSH
16464: CALL_OW 256
16468: PUSH
16469: LD_INT 1000
16471: LESS
16472: AND
16473: IFFALSE 16487
// SetLives ( un , 1000 ) ;
16475: LD_VAR 0 2
16479: PPUSH
16480: LD_INT 1000
16482: PPUSH
16483: CALL_OW 234
// end ;
16487: PPOPN 2
16489: END
// on Command ( comandid ) do var i , j , tmp ;
16490: LD_INT 0
16492: PPUSH
16493: PPUSH
16494: PPUSH
// begin SOS_Command ( comandid ) ;
16495: LD_VAR 0 1
16499: PPUSH
16500: CALL 33186 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16504: LD_INT 22
16506: PUSH
16507: LD_INT 4
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PPUSH
16514: CALL_OW 69
16518: NOT
16519: IFFALSE 16523
// exit ;
16521: GO 16688
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16523: LD_ADDR_VAR 0 2
16527: PUSH
16528: LD_INT 22
16530: PUSH
16531: LD_INT 1
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 2
16540: PUSH
16541: LD_INT 21
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: LD_INT 21
16553: PUSH
16554: LD_INT 2
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: LIST
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PPUSH
16570: CALL_OW 69
16574: PUSH
16575: FOR_IN
16576: IFFALSE 16686
// begin if GetTaskList ( i ) > 0 then
16578: LD_VAR 0 2
16582: PPUSH
16583: CALL_OW 437
16587: PUSH
16588: LD_INT 0
16590: GREATER
16591: IFFALSE 16684
// begin for j = 1 to GetTaskList ( i ) do
16593: LD_ADDR_VAR 0 3
16597: PUSH
16598: DOUBLE
16599: LD_INT 1
16601: DEC
16602: ST_TO_ADDR
16603: LD_VAR 0 2
16607: PPUSH
16608: CALL_OW 437
16612: PUSH
16613: FOR_TO
16614: IFFALSE 16682
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16616: LD_ADDR_VAR 0 4
16620: PUSH
16621: LD_VAR 0 2
16625: PPUSH
16626: CALL_OW 437
16630: PUSH
16631: LD_VAR 0 3
16635: ARRAY
16636: PUSH
16637: LD_INT 4
16639: ARRAY
16640: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16641: LD_VAR 0 4
16645: PPUSH
16646: CALL_OW 255
16650: PUSH
16651: LD_INT 4
16653: EQUAL
16654: PUSH
16655: LD_VAR 0 4
16659: PPUSH
16660: CALL_OW 255
16664: PUSH
16665: LD_INT 0
16667: EQUAL
16668: OR
16669: IFFALSE 16680
// ComStop ( i ) ;
16671: LD_VAR 0 2
16675: PPUSH
16676: CALL_OW 141
// end ;
16680: GO 16613
16682: POP
16683: POP
// end ; end ;
16684: GO 16575
16686: POP
16687: POP
// end ; end_of_file
16688: PPOPN 4
16690: END
// every 10 10$0 do
16691: GO 16693
16693: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16694: LD_INT 5
16696: PPUSH
16697: LD_INT 3
16699: PPUSH
16700: LD_INT 2
16702: PUSH
16703: LD_INT 2
16705: PUSH
16706: LD_INT 3
16708: PUSH
16709: LD_INT 4
16711: PUSH
16712: LD_INT 4
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: PUSH
16721: LD_OWVAR 67
16725: ARRAY
16726: PLUS
16727: PPUSH
16728: LD_INT 0
16730: PPUSH
16731: LD_EXP 16
16735: PPUSH
16736: LD_EXP 17
16740: PPUSH
16741: CALL_OW 12
16745: PPUSH
16746: LD_INT 4
16748: PPUSH
16749: LD_INT 14
16751: PPUSH
16752: LD_INT 1
16754: PPUSH
16755: LD_INT 2
16757: PPUSH
16758: CALL 6989 0 9
16762: END
// every 20 20$0 do
16763: GO 16765
16765: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16766: LD_INT 5
16768: PPUSH
16769: LD_INT 3
16771: PPUSH
16772: LD_INT 4
16774: PUSH
16775: LD_INT 2
16777: PUSH
16778: LD_INT 3
16780: PUSH
16781: LD_INT 4
16783: PUSH
16784: LD_INT 5
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: PUSH
16793: LD_OWVAR 67
16797: ARRAY
16798: PLUS
16799: PPUSH
16800: LD_INT 2
16802: PPUSH
16803: LD_EXP 16
16807: PPUSH
16808: LD_EXP 17
16812: PPUSH
16813: CALL_OW 12
16817: PPUSH
16818: LD_INT 4
16820: PPUSH
16821: LD_INT 14
16823: PPUSH
16824: LD_INT 1
16826: PPUSH
16827: LD_INT 1
16829: PPUSH
16830: CALL 6989 0 9
16834: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16835: GO 16837
16837: DISABLE
16838: LD_INT 0
16840: PPUSH
16841: PPUSH
16842: PPUSH
16843: PPUSH
16844: PPUSH
// begin hex := [ 123 , 95 ] ;
16845: LD_ADDR_VAR 0 4
16849: PUSH
16850: LD_INT 123
16852: PUSH
16853: LD_INT 95
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: ST_TO_ADDR
// tmp := [ ] ;
16860: LD_ADDR_VAR 0 5
16864: PUSH
16865: EMPTY
16866: ST_TO_ADDR
// if Difficulty > 1 then
16867: LD_OWVAR 67
16871: PUSH
16872: LD_INT 1
16874: GREATER
16875: IFFALSE 16885
// specAttack := true ;
16877: LD_ADDR_EXP 47
16881: PUSH
16882: LD_INT 1
16884: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16885: LD_ADDR_VAR 0 1
16889: PUSH
16890: DOUBLE
16891: LD_INT 1
16893: DEC
16894: ST_TO_ADDR
16895: LD_INT 4
16897: PUSH
16898: LD_INT 5
16900: PUSH
16901: LD_INT 6
16903: PUSH
16904: LD_INT 7
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: PUSH
16913: LD_OWVAR 67
16917: ARRAY
16918: PUSH
16919: FOR_TO
16920: IFFALSE 17218
// begin uc_side := 5 ;
16922: LD_ADDR_OWVAR 20
16926: PUSH
16927: LD_INT 5
16929: ST_TO_ADDR
// uc_nation := 3 ;
16930: LD_ADDR_OWVAR 21
16934: PUSH
16935: LD_INT 3
16937: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16938: LD_ADDR_OWVAR 37
16942: PUSH
16943: LD_INT 21
16945: PUSH
16946: LD_INT 22
16948: PUSH
16949: LD_INT 23
16951: PUSH
16952: LD_INT 24
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: PUSH
16961: LD_VAR 0 1
16965: PUSH
16966: LD_OWVAR 67
16970: MOD
16971: PUSH
16972: LD_INT 1
16974: PLUS
16975: ARRAY
16976: ST_TO_ADDR
// vc_engine := engine_combustion ;
16977: LD_ADDR_OWVAR 39
16981: PUSH
16982: LD_INT 1
16984: ST_TO_ADDR
// vc_control := control_manual ;
16985: LD_ADDR_OWVAR 38
16989: PUSH
16990: LD_INT 1
16992: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16993: LD_ADDR_OWVAR 40
16997: PUSH
16998: LD_INT 42
17000: PUSH
17001: LD_INT 43
17003: PUSH
17004: LD_INT 44
17006: PUSH
17007: LD_INT 44
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: PUSH
17016: LD_VAR 0 1
17020: PUSH
17021: LD_OWVAR 67
17025: MOD
17026: PUSH
17027: LD_INT 1
17029: PLUS
17030: ARRAY
17031: ST_TO_ADDR
// veh := CreateVehicle ;
17032: LD_ADDR_VAR 0 3
17036: PUSH
17037: CALL_OW 45
17041: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17042: LD_VAR 0 3
17046: PPUSH
17047: LD_INT 5
17049: PPUSH
17050: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
17054: LD_INT 35
17056: PPUSH
17057: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17061: LD_VAR 0 4
17065: PUSH
17066: LD_INT 1
17068: ARRAY
17069: PPUSH
17070: LD_VAR 0 4
17074: PUSH
17075: LD_INT 2
17077: ARRAY
17078: PPUSH
17079: CALL_OW 428
17083: PUSH
17084: LD_INT 0
17086: EQUAL
17087: IFFALSE 17054
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17089: LD_VAR 0 3
17093: PPUSH
17094: LD_VAR 0 4
17098: PUSH
17099: LD_INT 1
17101: ARRAY
17102: PPUSH
17103: LD_VAR 0 4
17107: PUSH
17108: LD_INT 2
17110: ARRAY
17111: PPUSH
17112: LD_INT 0
17114: PPUSH
17115: CALL_OW 48
// uc_side := 5 ;
17119: LD_ADDR_OWVAR 20
17123: PUSH
17124: LD_INT 5
17126: ST_TO_ADDR
// uc_nation := 3 ;
17127: LD_ADDR_OWVAR 21
17131: PUSH
17132: LD_INT 3
17134: ST_TO_ADDR
// PrepareMechanic ( false , 2 + Difficulty ) ;
17135: LD_INT 0
17137: PPUSH
17138: LD_INT 2
17140: PUSH
17141: LD_OWVAR 67
17145: PLUS
17146: PPUSH
17147: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17151: CALL_OW 44
17155: PPUSH
17156: LD_VAR 0 3
17160: PPUSH
17161: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17165: LD_VAR 0 3
17169: PPUSH
17170: LD_INT 101
17172: PPUSH
17173: LD_INT 77
17175: PPUSH
17176: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17180: LD_ADDR_VAR 0 5
17184: PUSH
17185: LD_VAR 0 5
17189: PPUSH
17190: LD_VAR 0 5
17194: PUSH
17195: LD_INT 1
17197: PLUS
17198: PPUSH
17199: LD_VAR 0 3
17203: PPUSH
17204: CALL_OW 1
17208: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17209: LD_INT 105
17211: PPUSH
17212: CALL_OW 67
// end ;
17216: GO 16919
17218: POP
17219: POP
// repeat wait ( 0 0$1 ) ;
17220: LD_INT 35
17222: PPUSH
17223: CALL_OW 67
// for i in tmp do
17227: LD_ADDR_VAR 0 1
17231: PUSH
17232: LD_VAR 0 5
17236: PUSH
17237: FOR_IN
17238: IFFALSE 17306
// if not IsOk ( i ) then
17240: LD_VAR 0 1
17244: PPUSH
17245: CALL_OW 302
17249: NOT
17250: IFFALSE 17270
// tmp := tmp diff i else
17252: LD_ADDR_VAR 0 5
17256: PUSH
17257: LD_VAR 0 5
17261: PUSH
17262: LD_VAR 0 1
17266: DIFF
17267: ST_TO_ADDR
17268: GO 17304
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17270: LD_VAR 0 1
17274: PPUSH
17275: LD_INT 22
17277: PUSH
17278: LD_INT 1
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PPUSH
17285: CALL_OW 69
17289: PPUSH
17290: LD_VAR 0 1
17294: PPUSH
17295: CALL_OW 74
17299: PPUSH
17300: CALL_OW 115
17304: GO 17237
17306: POP
17307: POP
// until not tmp ;
17308: LD_VAR 0 5
17312: NOT
17313: IFFALSE 17220
// end ;
17315: PPOPN 5
17317: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17318: LD_EXP 47
17322: IFFALSE 17689
17324: GO 17326
17326: DISABLE
17327: LD_INT 0
17329: PPUSH
17330: PPUSH
17331: PPUSH
17332: PPUSH
// begin wait ( 0 0$20 ) ;
17333: LD_INT 700
17335: PPUSH
17336: CALL_OW 67
// uc_side := 5 ;
17340: LD_ADDR_OWVAR 20
17344: PUSH
17345: LD_INT 5
17347: ST_TO_ADDR
// uc_nation := 3 ;
17348: LD_ADDR_OWVAR 21
17352: PUSH
17353: LD_INT 3
17355: ST_TO_ADDR
// InitHc ;
17356: CALL_OW 19
// hc_importance := 0 ;
17360: LD_ADDR_OWVAR 32
17364: PUSH
17365: LD_INT 0
17367: ST_TO_ADDR
// tmp := [ ] ;
17368: LD_ADDR_VAR 0 2
17372: PUSH
17373: EMPTY
17374: ST_TO_ADDR
// PrepareHuman ( false , 2 , 6 ) ;
17375: LD_INT 0
17377: PPUSH
17378: LD_INT 2
17380: PPUSH
17381: LD_INT 6
17383: PPUSH
17384: CALL_OW 380
// eng := CreateHuman ;
17388: LD_ADDR_VAR 0 4
17392: PUSH
17393: CALL_OW 44
17397: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17398: LD_VAR 0 4
17402: PPUSH
17403: LD_INT 78
17405: PPUSH
17406: LD_INT 2
17408: PPUSH
17409: LD_INT 4
17411: PPUSH
17412: LD_INT 0
17414: PPUSH
17415: CALL_OW 50
// for i = 1 to 2 + Difficulty do
17419: LD_ADDR_VAR 0 3
17423: PUSH
17424: DOUBLE
17425: LD_INT 1
17427: DEC
17428: ST_TO_ADDR
17429: LD_INT 2
17431: PUSH
17432: LD_OWVAR 67
17436: PLUS
17437: PUSH
17438: FOR_TO
17439: IFFALSE 17524
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17441: LD_INT 0
17443: PPUSH
17444: LD_INT 1
17446: PPUSH
17447: LD_INT 4
17449: PUSH
17450: LD_INT 5
17452: PUSH
17453: LD_INT 6
17455: PUSH
17456: LD_INT 6
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: PUSH
17465: LD_OWVAR 67
17469: ARRAY
17470: PPUSH
17471: CALL_OW 380
// un := CreateHuman ;
17475: LD_ADDR_VAR 0 1
17479: PUSH
17480: CALL_OW 44
17484: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17485: LD_VAR 0 1
17489: PPUSH
17490: LD_INT 78
17492: PPUSH
17493: LD_INT 2
17495: PPUSH
17496: LD_INT 4
17498: PPUSH
17499: LD_INT 0
17501: PPUSH
17502: CALL_OW 50
// tmp := tmp ^ un ;
17506: LD_ADDR_VAR 0 2
17510: PUSH
17511: LD_VAR 0 2
17515: PUSH
17516: LD_VAR 0 1
17520: ADD
17521: ST_TO_ADDR
// end ;
17522: GO 17438
17524: POP
17525: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17526: LD_VAR 0 2
17530: PPUSH
17531: LD_INT 49
17533: PPUSH
17534: LD_INT 3
17536: PPUSH
17537: CALL_OW 111
// wait ( 0 0$2 ) ;
17541: LD_INT 70
17543: PPUSH
17544: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17548: LD_VAR 0 4
17552: PPUSH
17553: LD_INT 49
17555: PPUSH
17556: LD_INT 3
17558: PPUSH
17559: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17563: LD_VAR 0 4
17567: PPUSH
17568: LD_INT 4
17570: PPUSH
17571: CALL_OW 227
// wait ( 0 0$10 ) ;
17575: LD_INT 350
17577: PPUSH
17578: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17582: LD_INT 35
17584: PPUSH
17585: CALL_OW 67
// for i in tmp do
17589: LD_ADDR_VAR 0 3
17593: PUSH
17594: LD_VAR 0 2
17598: PUSH
17599: FOR_IN
17600: IFFALSE 17680
// if not IsOk ( i ) then
17602: LD_VAR 0 3
17606: PPUSH
17607: CALL_OW 302
17611: NOT
17612: IFFALSE 17632
// tmp := tmp diff i else
17614: LD_ADDR_VAR 0 2
17618: PUSH
17619: LD_VAR 0 2
17623: PUSH
17624: LD_VAR 0 3
17628: DIFF
17629: ST_TO_ADDR
17630: GO 17678
// if not HasTask ( i ) then
17632: LD_VAR 0 3
17636: PPUSH
17637: CALL_OW 314
17641: NOT
17642: IFFALSE 17678
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17644: LD_VAR 0 3
17648: PPUSH
17649: LD_INT 22
17651: PUSH
17652: LD_INT 1
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PPUSH
17659: CALL_OW 69
17663: PPUSH
17664: LD_VAR 0 3
17668: PPUSH
17669: CALL_OW 74
17673: PPUSH
17674: CALL_OW 115
17678: GO 17599
17680: POP
17681: POP
// until not tmp ;
17682: LD_VAR 0 2
17686: NOT
17687: IFFALSE 17582
// end ; end_of_file
17689: PPOPN 4
17691: END
// every 0 0$1 trigger startTimer = 1 do
17692: LD_EXP 30
17696: PUSH
17697: LD_INT 1
17699: EQUAL
17700: IFFALSE 17830
17702: GO 17704
17704: DISABLE
// begin enable ;
17705: ENABLE
// if timerStatus = 1 then
17706: LD_EXP 29
17710: PUSH
17711: LD_INT 1
17713: EQUAL
17714: IFFALSE 17747
// begin timeToSupport = timeToSupport - 0 0$01 ;
17716: LD_ADDR_EXP 28
17720: PUSH
17721: LD_EXP 28
17725: PUSH
17726: LD_INT 35
17728: MINUS
17729: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17730: LD_ADDR_OWVAR 47
17734: PUSH
17735: LD_STRING #Am04-1
17737: PUSH
17738: LD_EXP 28
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: ST_TO_ADDR
// end ; if timerStatus = 2 then
17747: LD_EXP 29
17751: PUSH
17752: LD_INT 2
17754: EQUAL
17755: IFFALSE 17788
// begin timeToSupport = timeToSupport - 0 0$01 ;
17757: LD_ADDR_EXP 28
17761: PUSH
17762: LD_EXP 28
17766: PUSH
17767: LD_INT 35
17769: MINUS
17770: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17771: LD_ADDR_OWVAR 47
17775: PUSH
17776: LD_STRING #Am04-2
17778: PUSH
17779: LD_EXP 28
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: ST_TO_ADDR
// end ; if timerStatus = 3 then
17788: LD_EXP 29
17792: PUSH
17793: LD_INT 3
17795: EQUAL
17796: IFFALSE 17812
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17798: LD_ADDR_EXP 27
17802: PUSH
17803: LD_EXP 27
17807: PUSH
17808: LD_INT 35
17810: MINUS
17811: ST_TO_ADDR
// if timerStatus = 4 then
17812: LD_EXP 29
17816: PUSH
17817: LD_INT 4
17819: EQUAL
17820: IFFALSE 17830
// display_strings =  ;
17822: LD_ADDR_OWVAR 47
17826: PUSH
17827: LD_STRING 
17829: ST_TO_ADDR
// end ; end_of_file
17830: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17831: LD_EXP 15
17835: PPUSH
17836: CALL_OW 301
17840: PUSH
17841: LD_INT 22
17843: PUSH
17844: LD_INT 3
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 21
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PPUSH
17865: CALL_OW 69
17869: PUSH
17870: LD_INT 14
17872: PUSH
17873: LD_INT 13
17875: PUSH
17876: LD_INT 12
17878: PUSH
17879: LD_INT 11
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: PUSH
17888: LD_OWVAR 67
17892: ARRAY
17893: LESS
17894: AND
17895: IFFALSE 18481
17897: GO 17899
17899: DISABLE
17900: LD_INT 0
17902: PPUSH
17903: PPUSH
17904: PPUSH
// begin AIEnable = 0 ;
17905: LD_ADDR_EXP 37
17909: PUSH
17910: LD_INT 0
17912: ST_TO_ADDR
// escapeAvalaible = 1 ;
17913: LD_ADDR_EXP 40
17917: PUSH
17918: LD_INT 1
17920: ST_TO_ADDR
// Video ( true ) ;
17921: LD_INT 1
17923: PPUSH
17924: CALL 73804 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17928: LD_INT 3
17930: PPUSH
17931: LD_INT 1
17933: PPUSH
17934: LD_INT 1
17936: PPUSH
17937: LD_INT 0
17939: PPUSH
17940: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17944: LD_INT 6
17946: PPUSH
17947: LD_INT 1
17949: PPUSH
17950: LD_INT 1
17952: PPUSH
17953: LD_INT 0
17955: PPUSH
17956: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17960: LD_INT 5
17962: PPUSH
17963: LD_INT 1
17965: PPUSH
17966: LD_INT 1
17968: PPUSH
17969: LD_INT 0
17971: PPUSH
17972: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17976: LD_INT 3
17978: PPUSH
17979: LD_INT 1
17981: PPUSH
17982: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17986: LD_INT 97
17988: PPUSH
17989: LD_INT 91
17991: PPUSH
17992: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17996: LD_INT 22
17998: PUSH
17999: LD_INT 3
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 21
18008: PUSH
18009: LD_INT 1
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PPUSH
18020: CALL_OW 69
18024: PPUSH
18025: CALL_OW 121
// wait ( 0 0$01 ) ;
18029: LD_INT 35
18031: PPUSH
18032: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18036: LD_INT 22
18038: PUSH
18039: LD_INT 3
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PUSH
18046: LD_INT 21
18048: PUSH
18049: LD_INT 1
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PPUSH
18060: CALL_OW 69
18064: PPUSH
18065: LD_INT 124
18067: PPUSH
18068: LD_INT 98
18070: PPUSH
18071: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18075: LD_INT 22
18077: PUSH
18078: LD_INT 5
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 21
18087: PUSH
18088: LD_INT 1
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PPUSH
18099: CALL_OW 69
18103: PPUSH
18104: CALL_OW 121
// wait ( 0 0$01 ) ;
18108: LD_INT 35
18110: PPUSH
18111: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18115: LD_INT 22
18117: PUSH
18118: LD_INT 5
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 21
18127: PUSH
18128: LD_INT 1
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PPUSH
18139: CALL_OW 69
18143: PPUSH
18144: LD_INT 124
18146: PPUSH
18147: LD_INT 98
18149: PPUSH
18150: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18154: LD_INT 22
18156: PUSH
18157: LD_INT 6
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 21
18166: PUSH
18167: LD_INT 1
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PPUSH
18178: CALL_OW 69
18182: PPUSH
18183: CALL_OW 121
// wait ( 0 0$01 ) ;
18187: LD_INT 35
18189: PPUSH
18190: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18194: LD_INT 22
18196: PUSH
18197: LD_INT 6
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 21
18206: PUSH
18207: LD_INT 1
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PPUSH
18218: CALL_OW 69
18222: PPUSH
18223: LD_INT 124
18225: PPUSH
18226: LD_INT 98
18228: PPUSH
18229: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18233: LD_INT 22
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 21
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PPUSH
18257: CALL_OW 69
18261: PPUSH
18262: LD_INT 124
18264: PPUSH
18265: LD_INT 96
18267: PPUSH
18268: CALL_OW 114
// wait ( 0 0$1 ) ;
18272: LD_INT 35
18274: PPUSH
18275: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18279: LD_INT 124
18281: PPUSH
18282: LD_INT 96
18284: PPUSH
18285: CALL_OW 84
// p := 0 0$0 ;
18289: LD_ADDR_VAR 0 3
18293: PUSH
18294: LD_INT 0
18296: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18297: LD_ADDR_VAR 0 2
18301: PUSH
18302: LD_INT 2
18304: PUSH
18305: LD_INT 22
18307: PUSH
18308: LD_INT 3
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 22
18317: PUSH
18318: LD_INT 6
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 21
18332: PUSH
18333: LD_INT 1
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PPUSH
18344: CALL_OW 69
18348: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18349: LD_INT 35
18351: PPUSH
18352: CALL_OW 67
// p := p + 0 0$1 ;
18356: LD_ADDR_VAR 0 3
18360: PUSH
18361: LD_VAR 0 3
18365: PUSH
18366: LD_INT 35
18368: PLUS
18369: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18370: LD_VAR 0 2
18374: PPUSH
18375: LD_INT 5
18377: PPUSH
18378: CALL_OW 113
// for i in tmp do
18382: LD_ADDR_VAR 0 1
18386: PUSH
18387: LD_VAR 0 2
18391: PUSH
18392: FOR_IN
18393: IFFALSE 18420
// if IsInArea ( tmp , RussianEscape ) then
18395: LD_VAR 0 2
18399: PPUSH
18400: LD_INT 5
18402: PPUSH
18403: CALL_OW 308
18407: IFFALSE 18418
// RemoveUnit ( i ) ;
18409: LD_VAR 0 1
18413: PPUSH
18414: CALL_OW 64
18418: GO 18392
18420: POP
18421: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18422: LD_INT 23
18424: PUSH
18425: LD_INT 3
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 21
18434: PUSH
18435: LD_INT 1
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 24
18444: PUSH
18445: LD_INT 250
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: LIST
18456: PPUSH
18457: CALL_OW 69
18461: PUSH
18462: LD_INT 0
18464: EQUAL
18465: PUSH
18466: LD_VAR 0 3
18470: PUSH
18471: LD_INT 245
18473: GREATEREQUAL
18474: OR
18475: IFFALSE 18349
// FinishMission ;
18477: CALL 18484 0 0
// end ;
18481: PPOPN 3
18483: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18484: LD_INT 0
18486: PPUSH
18487: PPUSH
18488: PPUSH
18489: PPUSH
18490: PPUSH
// if not vehicleProduceCounter then
18491: LD_EXP 42
18495: NOT
18496: IFFALSE 18505
// SetAchievement ( ACH_INFANTRY ) ;
18498: LD_STRING ACH_INFANTRY
18500: PPUSH
18501: CALL_OW 543
// if tick <= 20 20$00 then
18505: LD_OWVAR 1
18509: PUSH
18510: LD_INT 42000
18512: LESSEQUAL
18513: IFFALSE 18529
// begin wait ( 3 ) ;
18515: LD_INT 3
18517: PPUSH
18518: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18522: LD_STRING ACH_ASPEED_4
18524: PPUSH
18525: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18529: LD_INT 22
18531: PPUSH
18532: CALL 19173 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18536: LD_INT 69
18538: PPUSH
18539: LD_INT 1
18541: PPUSH
18542: CALL_OW 321
18546: PPUSH
18547: LD_STRING GatlingInGamma
18549: PPUSH
18550: CALL_OW 39
// m1 := false ;
18554: LD_ADDR_VAR 0 3
18558: PUSH
18559: LD_INT 0
18561: ST_TO_ADDR
// m2 := false ;
18562: LD_ADDR_VAR 0 4
18566: PUSH
18567: LD_INT 0
18569: ST_TO_ADDR
// m3 := false ;
18570: LD_ADDR_VAR 0 5
18574: PUSH
18575: LD_INT 0
18577: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18578: LD_EXP 34
18582: PUSH
18583: LD_INT 1
18585: EQUAL
18586: PUSH
18587: LD_EXP 35
18591: PUSH
18592: LD_INT 1
18594: EQUAL
18595: AND
18596: IFFALSE 18618
// begin AddMedal ( oil , 1 ) ;
18598: LD_STRING oil
18600: PPUSH
18601: LD_INT 1
18603: PPUSH
18604: CALL_OW 101
// m1 := true ;
18608: LD_ADDR_VAR 0 3
18612: PUSH
18613: LD_INT 1
18615: ST_TO_ADDR
// end else
18616: GO 18711
// begin if buildOil = 1 and buildPower = 0 then
18618: LD_EXP 34
18622: PUSH
18623: LD_INT 1
18625: EQUAL
18626: PUSH
18627: LD_EXP 35
18631: PUSH
18632: LD_INT 0
18634: EQUAL
18635: AND
18636: IFFALSE 18649
// AddMedal ( oil , - 1 ) ;
18638: LD_STRING oil
18640: PPUSH
18641: LD_INT 1
18643: NEG
18644: PPUSH
18645: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18649: LD_EXP 34
18653: PUSH
18654: LD_INT 0
18656: EQUAL
18657: PUSH
18658: LD_EXP 35
18662: PUSH
18663: LD_INT 1
18665: EQUAL
18666: AND
18667: IFFALSE 18680
// AddMedal ( oil , - 2 ) ;
18669: LD_STRING oil
18671: PPUSH
18672: LD_INT 2
18674: NEG
18675: PPUSH
18676: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18680: LD_EXP 34
18684: PUSH
18685: LD_INT 0
18687: EQUAL
18688: PUSH
18689: LD_EXP 35
18693: PUSH
18694: LD_INT 0
18696: EQUAL
18697: AND
18698: IFFALSE 18711
// AddMedal ( oil , - 3 ) ;
18700: LD_STRING oil
18702: PPUSH
18703: LD_INT 3
18705: NEG
18706: PPUSH
18707: CALL_OW 101
// end ; if lostCounter > 3 then
18711: LD_EXP 38
18715: PUSH
18716: LD_INT 3
18718: GREATER
18719: IFFALSE 18734
// AddMedal ( deaths , - 1 ) else
18721: LD_STRING deaths
18723: PPUSH
18724: LD_INT 1
18726: NEG
18727: PPUSH
18728: CALL_OW 101
18732: GO 18752
// begin AddMedal ( deaths , 1 ) ;
18734: LD_STRING deaths
18736: PPUSH
18737: LD_INT 1
18739: PPUSH
18740: CALL_OW 101
// m2 := true ;
18744: LD_ADDR_VAR 0 4
18748: PUSH
18749: LD_INT 1
18751: ST_TO_ADDR
// end ; if honor = 1 then
18752: LD_EXP 39
18756: PUSH
18757: LD_INT 1
18759: EQUAL
18760: IFFALSE 18782
// begin AddMedal ( honour , 1 ) ;
18762: LD_STRING honour
18764: PPUSH
18765: LD_INT 1
18767: PPUSH
18768: CALL_OW 101
// m3 := true ;
18772: LD_ADDR_VAR 0 5
18776: PUSH
18777: LD_INT 1
18779: ST_TO_ADDR
// end else
18780: GO 18793
// AddMedal ( honour , - 1 ) ;
18782: LD_STRING honour
18784: PPUSH
18785: LD_INT 1
18787: NEG
18788: PPUSH
18789: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18793: LD_VAR 0 3
18797: PUSH
18798: LD_VAR 0 4
18802: AND
18803: PUSH
18804: LD_VAR 0 5
18808: AND
18809: PUSH
18810: LD_OWVAR 67
18814: PUSH
18815: LD_INT 3
18817: GREATEREQUAL
18818: AND
18819: IFFALSE 18831
// SetAchievementEX ( ACH_AMER , 4 ) ;
18821: LD_STRING ACH_AMER
18823: PPUSH
18824: LD_INT 4
18826: PPUSH
18827: CALL_OW 564
// GiveMedals ( Main ) ;
18831: LD_STRING Main
18833: PPUSH
18834: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18838: LD_INT 22
18840: PUSH
18841: LD_INT 1
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 23
18850: PUSH
18851: LD_INT 1
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 21
18860: PUSH
18861: LD_INT 1
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: LIST
18872: PPUSH
18873: CALL_OW 69
18877: PPUSH
18878: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18882: LD_EXP 1
18886: PPUSH
18887: LD_EXP 48
18891: PUSH
18892: LD_STRING JMM
18894: STR
18895: PPUSH
18896: CALL_OW 38
// if IsOK ( Bobby ) then
18900: LD_EXP 2
18904: PPUSH
18905: CALL_OW 302
18909: IFFALSE 18929
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18911: LD_EXP 2
18915: PPUSH
18916: LD_EXP 48
18920: PUSH
18921: LD_STRING Bobby
18923: STR
18924: PPUSH
18925: CALL_OW 38
// if IsOK ( Cyrus ) then
18929: LD_EXP 3
18933: PPUSH
18934: CALL_OW 302
18938: IFFALSE 18958
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18940: LD_EXP 3
18944: PPUSH
18945: LD_EXP 48
18949: PUSH
18950: LD_STRING Cyrus
18952: STR
18953: PPUSH
18954: CALL_OW 38
// if IsOK ( Lisa ) then
18958: LD_EXP 4
18962: PPUSH
18963: CALL_OW 302
18967: IFFALSE 18987
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18969: LD_EXP 4
18973: PPUSH
18974: LD_EXP 48
18978: PUSH
18979: LD_STRING Lisa
18981: STR
18982: PPUSH
18983: CALL_OW 38
// if IsOK ( Brown ) then
18987: LD_EXP 7
18991: PPUSH
18992: CALL_OW 302
18996: IFFALSE 19016
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18998: LD_EXP 7
19002: PPUSH
19003: LD_EXP 48
19007: PUSH
19008: LD_STRING Brown
19010: STR
19011: PPUSH
19012: CALL_OW 38
// if not IsDead ( Donaldson ) then
19016: LD_EXP 13
19020: PPUSH
19021: CALL_OW 301
19025: NOT
19026: IFFALSE 19046
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19028: LD_EXP 13
19032: PPUSH
19033: LD_EXP 48
19037: PUSH
19038: LD_STRING Donaldson
19040: STR
19041: PPUSH
19042: CALL_OW 38
// if not IsDead ( Frank ) then
19046: LD_EXP 5
19050: PPUSH
19051: CALL_OW 301
19055: NOT
19056: IFFALSE 19076
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19058: LD_EXP 5
19062: PPUSH
19063: LD_EXP 48
19067: PUSH
19068: LD_STRING Frank
19070: STR
19071: PPUSH
19072: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19076: LD_INT 50
19078: PUSH
19079: EMPTY
19080: LIST
19081: PUSH
19082: LD_INT 22
19084: PUSH
19085: LD_INT 1
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 21
19094: PUSH
19095: LD_INT 1
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: LIST
19106: PPUSH
19107: CALL_OW 69
19111: PUSH
19112: LD_EXP 1
19116: PUSH
19117: LD_EXP 2
19121: PUSH
19122: LD_EXP 3
19126: PUSH
19127: LD_EXP 4
19131: PUSH
19132: LD_EXP 7
19136: PUSH
19137: LD_EXP 13
19141: PUSH
19142: LD_EXP 5
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: DIFF
19156: PPUSH
19157: LD_STRING 04_other_survivors
19159: PPUSH
19160: CALL_OW 38
// YouWin ;
19164: CALL_OW 103
// end ;
19168: LD_VAR 0 1
19172: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19173: LD_INT 0
19175: PPUSH
19176: PPUSH
19177: PPUSH
19178: PPUSH
// gammaBase = [ ] ;
19179: LD_ADDR_VAR 0 4
19183: PUSH
19184: EMPTY
19185: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19186: LD_ADDR_VAR 0 5
19190: PUSH
19191: LD_VAR 0 1
19195: PPUSH
19196: LD_INT 22
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 21
19208: PUSH
19209: LD_INT 3
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PPUSH
19220: CALL_OW 70
19224: ST_TO_ADDR
// for i in buildings do
19225: LD_ADDR_VAR 0 3
19229: PUSH
19230: LD_VAR 0 5
19234: PUSH
19235: FOR_IN
19236: IFFALSE 19573
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19238: LD_VAR 0 3
19242: PPUSH
19243: CALL_OW 266
19247: PUSH
19248: LD_INT 6
19250: PUSH
19251: LD_INT 7
19253: PUSH
19254: LD_INT 8
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: LIST
19261: IN
19262: IFFALSE 19376
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19264: LD_ADDR_VAR 0 4
19268: PUSH
19269: LD_VAR 0 4
19273: PUSH
19274: LD_VAR 0 3
19278: PPUSH
19279: CALL_OW 266
19283: PUSH
19284: LD_VAR 0 3
19288: PPUSH
19289: CALL_OW 250
19293: PUSH
19294: LD_VAR 0 3
19298: PPUSH
19299: CALL_OW 251
19303: PUSH
19304: LD_VAR 0 3
19308: PPUSH
19309: CALL_OW 254
19313: PUSH
19314: LD_VAR 0 3
19318: PPUSH
19319: CALL_OW 267
19323: PUSH
19324: LD_VAR 0 3
19328: PPUSH
19329: CALL_OW 248
19333: PUSH
19334: LD_VAR 0 3
19338: PPUSH
19339: LD_INT 1
19341: PPUSH
19342: CALL_OW 268
19346: PUSH
19347: LD_VAR 0 3
19351: PPUSH
19352: LD_INT 2
19354: PPUSH
19355: CALL_OW 268
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: PUSH
19370: EMPTY
19371: LIST
19372: ADD
19373: ST_TO_ADDR
19374: GO 19571
// if GetBType ( i ) in [ b_bunker ] then
19376: LD_VAR 0 3
19380: PPUSH
19381: CALL_OW 266
19385: PUSH
19386: LD_INT 32
19388: PUSH
19389: EMPTY
19390: LIST
19391: IN
19392: IFFALSE 19489
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19394: LD_ADDR_VAR 0 4
19398: PUSH
19399: LD_VAR 0 4
19403: PUSH
19404: LD_VAR 0 3
19408: PPUSH
19409: CALL_OW 266
19413: PUSH
19414: LD_VAR 0 3
19418: PPUSH
19419: CALL_OW 250
19423: PUSH
19424: LD_VAR 0 3
19428: PPUSH
19429: CALL_OW 251
19433: PUSH
19434: LD_VAR 0 3
19438: PPUSH
19439: CALL_OW 254
19443: PUSH
19444: LD_VAR 0 3
19448: PPUSH
19449: CALL_OW 267
19453: PUSH
19454: LD_VAR 0 3
19458: PPUSH
19459: CALL_OW 248
19463: PUSH
19464: LD_VAR 0 3
19468: PPUSH
19469: CALL_OW 269
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: PUSH
19483: EMPTY
19484: LIST
19485: ADD
19486: ST_TO_ADDR
19487: GO 19571
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19489: LD_ADDR_VAR 0 4
19493: PUSH
19494: LD_VAR 0 4
19498: PUSH
19499: LD_VAR 0 3
19503: PPUSH
19504: CALL_OW 266
19508: PUSH
19509: LD_VAR 0 3
19513: PPUSH
19514: CALL_OW 250
19518: PUSH
19519: LD_VAR 0 3
19523: PPUSH
19524: CALL_OW 251
19528: PUSH
19529: LD_VAR 0 3
19533: PPUSH
19534: CALL_OW 254
19538: PUSH
19539: LD_VAR 0 3
19543: PPUSH
19544: CALL_OW 267
19548: PUSH
19549: LD_VAR 0 3
19553: PPUSH
19554: CALL_OW 248
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: PUSH
19567: EMPTY
19568: LIST
19569: ADD
19570: ST_TO_ADDR
// end ;
19571: GO 19235
19573: POP
19574: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19575: LD_VAR 0 4
19579: PPUSH
19580: LD_STRING GammaBase
19582: PPUSH
19583: CALL_OW 39
// end ; end_of_file
19587: LD_VAR 0 2
19591: RET
// every 1 1$15 do
19592: GO 19594
19594: DISABLE
// begin if supply <= 13 and supply > 7 then
19595: LD_EXP 36
19599: PUSH
19600: LD_INT 13
19602: LESSEQUAL
19603: PUSH
19604: LD_EXP 36
19608: PUSH
19609: LD_INT 7
19611: GREATER
19612: AND
19613: IFFALSE 19636
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19615: LD_INT 3
19617: PPUSH
19618: LD_INT 5
19620: PPUSH
19621: CALL_OW 12
19625: PPUSH
19626: LD_INT 18
19628: PPUSH
19629: LD_INT 1
19631: PPUSH
19632: CALL_OW 55
// if supply <= 7 and supply > 4 then
19636: LD_EXP 36
19640: PUSH
19641: LD_INT 7
19643: LESSEQUAL
19644: PUSH
19645: LD_EXP 36
19649: PUSH
19650: LD_INT 4
19652: GREATER
19653: AND
19654: IFFALSE 19677
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19656: LD_INT 3
19658: PPUSH
19659: LD_INT 5
19661: PPUSH
19662: CALL_OW 12
19666: PPUSH
19667: LD_INT 19
19669: PPUSH
19670: LD_INT 1
19672: PPUSH
19673: CALL_OW 55
// if supply <= 4 and supply > 0 then
19677: LD_EXP 36
19681: PUSH
19682: LD_INT 4
19684: LESSEQUAL
19685: PUSH
19686: LD_EXP 36
19690: PUSH
19691: LD_INT 0
19693: GREATER
19694: AND
19695: IFFALSE 19718
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19697: LD_INT 3
19699: PPUSH
19700: LD_INT 5
19702: PPUSH
19703: CALL_OW 12
19707: PPUSH
19708: LD_INT 20
19710: PPUSH
19711: LD_INT 1
19713: PPUSH
19714: CALL_OW 55
// if supply then
19718: LD_EXP 36
19722: IFFALSE 19739
// begin supply = supply - 1 ;
19724: LD_ADDR_EXP 36
19728: PUSH
19729: LD_EXP 36
19733: PUSH
19734: LD_INT 1
19736: MINUS
19737: ST_TO_ADDR
// enable ;
19738: ENABLE
// end ; end ; end_of_file
19739: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19740: LD_INT 0
19742: PPUSH
// ar_miner := 81 ;
19743: LD_ADDR_EXP 57
19747: PUSH
19748: LD_INT 81
19750: ST_TO_ADDR
// ar_crane := 88 ;
19751: LD_ADDR_EXP 56
19755: PUSH
19756: LD_INT 88
19758: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19759: LD_ADDR_EXP 51
19763: PUSH
19764: LD_INT 89
19766: ST_TO_ADDR
// us_hack := 99 ;
19767: LD_ADDR_EXP 52
19771: PUSH
19772: LD_INT 99
19774: ST_TO_ADDR
// us_artillery := 97 ;
19775: LD_ADDR_EXP 53
19779: PUSH
19780: LD_INT 97
19782: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19783: LD_ADDR_EXP 54
19787: PUSH
19788: LD_INT 91
19790: ST_TO_ADDR
// ar_mortar := 92 ;
19791: LD_ADDR_EXP 55
19795: PUSH
19796: LD_INT 92
19798: ST_TO_ADDR
// ru_radar := 98 ;
19799: LD_ADDR_EXP 50
19803: PUSH
19804: LD_INT 98
19806: ST_TO_ADDR
// tech_Artillery := 80 ;
19807: LD_ADDR_EXP 58
19811: PUSH
19812: LD_INT 80
19814: ST_TO_ADDR
// tech_RadMat := 81 ;
19815: LD_ADDR_EXP 59
19819: PUSH
19820: LD_INT 81
19822: ST_TO_ADDR
// tech_BasicTools := 82 ;
19823: LD_ADDR_EXP 60
19827: PUSH
19828: LD_INT 82
19830: ST_TO_ADDR
// tech_Cargo := 83 ;
19831: LD_ADDR_EXP 61
19835: PUSH
19836: LD_INT 83
19838: ST_TO_ADDR
// tech_Track := 84 ;
19839: LD_ADDR_EXP 62
19843: PUSH
19844: LD_INT 84
19846: ST_TO_ADDR
// tech_Crane := 85 ;
19847: LD_ADDR_EXP 63
19851: PUSH
19852: LD_INT 85
19854: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19855: LD_ADDR_EXP 64
19859: PUSH
19860: LD_INT 86
19862: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19863: LD_ADDR_EXP 65
19867: PUSH
19868: LD_INT 87
19870: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19871: LD_ADDR_EXP 66
19875: PUSH
19876: LD_INT 88
19878: ST_TO_ADDR
// class_mastodont := 31 ;
19879: LD_ADDR_EXP 67
19883: PUSH
19884: LD_INT 31
19886: ST_TO_ADDR
// class_horse := 21 ;
19887: LD_ADDR_EXP 68
19891: PUSH
19892: LD_INT 21
19894: ST_TO_ADDR
// end ;
19895: LD_VAR 0 1
19899: RET
// every 1 do
19900: GO 19902
19902: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19903: CALL 19740 0 0
19907: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19908: LD_INT 0
19910: PPUSH
// if p2 = 100 then
19911: LD_VAR 0 2
19915: PUSH
19916: LD_INT 100
19918: EQUAL
19919: IFFALSE 20868
// begin if not StreamModeActive then
19921: LD_EXP 69
19925: NOT
19926: IFFALSE 19936
// StreamModeActive := true ;
19928: LD_ADDR_EXP 69
19932: PUSH
19933: LD_INT 1
19935: ST_TO_ADDR
// if p3 = 0 then
19936: LD_VAR 0 3
19940: PUSH
19941: LD_INT 0
19943: EQUAL
19944: IFFALSE 19950
// InitStreamMode ;
19946: CALL 21028 0 0
// if p3 = 1 then
19950: LD_VAR 0 3
19954: PUSH
19955: LD_INT 1
19957: EQUAL
19958: IFFALSE 19968
// sRocket := true ;
19960: LD_ADDR_EXP 74
19964: PUSH
19965: LD_INT 1
19967: ST_TO_ADDR
// if p3 = 2 then
19968: LD_VAR 0 3
19972: PUSH
19973: LD_INT 2
19975: EQUAL
19976: IFFALSE 19986
// sSpeed := true ;
19978: LD_ADDR_EXP 73
19982: PUSH
19983: LD_INT 1
19985: ST_TO_ADDR
// if p3 = 3 then
19986: LD_VAR 0 3
19990: PUSH
19991: LD_INT 3
19993: EQUAL
19994: IFFALSE 20004
// sEngine := true ;
19996: LD_ADDR_EXP 75
20000: PUSH
20001: LD_INT 1
20003: ST_TO_ADDR
// if p3 = 4 then
20004: LD_VAR 0 3
20008: PUSH
20009: LD_INT 4
20011: EQUAL
20012: IFFALSE 20022
// sSpec := true ;
20014: LD_ADDR_EXP 72
20018: PUSH
20019: LD_INT 1
20021: ST_TO_ADDR
// if p3 = 5 then
20022: LD_VAR 0 3
20026: PUSH
20027: LD_INT 5
20029: EQUAL
20030: IFFALSE 20040
// sLevel := true ;
20032: LD_ADDR_EXP 76
20036: PUSH
20037: LD_INT 1
20039: ST_TO_ADDR
// if p3 = 6 then
20040: LD_VAR 0 3
20044: PUSH
20045: LD_INT 6
20047: EQUAL
20048: IFFALSE 20058
// sArmoury := true ;
20050: LD_ADDR_EXP 77
20054: PUSH
20055: LD_INT 1
20057: ST_TO_ADDR
// if p3 = 7 then
20058: LD_VAR 0 3
20062: PUSH
20063: LD_INT 7
20065: EQUAL
20066: IFFALSE 20076
// sRadar := true ;
20068: LD_ADDR_EXP 78
20072: PUSH
20073: LD_INT 1
20075: ST_TO_ADDR
// if p3 = 8 then
20076: LD_VAR 0 3
20080: PUSH
20081: LD_INT 8
20083: EQUAL
20084: IFFALSE 20094
// sBunker := true ;
20086: LD_ADDR_EXP 79
20090: PUSH
20091: LD_INT 1
20093: ST_TO_ADDR
// if p3 = 9 then
20094: LD_VAR 0 3
20098: PUSH
20099: LD_INT 9
20101: EQUAL
20102: IFFALSE 20112
// sHack := true ;
20104: LD_ADDR_EXP 80
20108: PUSH
20109: LD_INT 1
20111: ST_TO_ADDR
// if p3 = 10 then
20112: LD_VAR 0 3
20116: PUSH
20117: LD_INT 10
20119: EQUAL
20120: IFFALSE 20130
// sFire := true ;
20122: LD_ADDR_EXP 81
20126: PUSH
20127: LD_INT 1
20129: ST_TO_ADDR
// if p3 = 11 then
20130: LD_VAR 0 3
20134: PUSH
20135: LD_INT 11
20137: EQUAL
20138: IFFALSE 20148
// sRefresh := true ;
20140: LD_ADDR_EXP 82
20144: PUSH
20145: LD_INT 1
20147: ST_TO_ADDR
// if p3 = 12 then
20148: LD_VAR 0 3
20152: PUSH
20153: LD_INT 12
20155: EQUAL
20156: IFFALSE 20166
// sExp := true ;
20158: LD_ADDR_EXP 83
20162: PUSH
20163: LD_INT 1
20165: ST_TO_ADDR
// if p3 = 13 then
20166: LD_VAR 0 3
20170: PUSH
20171: LD_INT 13
20173: EQUAL
20174: IFFALSE 20184
// sDepot := true ;
20176: LD_ADDR_EXP 84
20180: PUSH
20181: LD_INT 1
20183: ST_TO_ADDR
// if p3 = 14 then
20184: LD_VAR 0 3
20188: PUSH
20189: LD_INT 14
20191: EQUAL
20192: IFFALSE 20202
// sFlag := true ;
20194: LD_ADDR_EXP 85
20198: PUSH
20199: LD_INT 1
20201: ST_TO_ADDR
// if p3 = 15 then
20202: LD_VAR 0 3
20206: PUSH
20207: LD_INT 15
20209: EQUAL
20210: IFFALSE 20220
// sKamikadze := true ;
20212: LD_ADDR_EXP 93
20216: PUSH
20217: LD_INT 1
20219: ST_TO_ADDR
// if p3 = 16 then
20220: LD_VAR 0 3
20224: PUSH
20225: LD_INT 16
20227: EQUAL
20228: IFFALSE 20238
// sTroll := true ;
20230: LD_ADDR_EXP 94
20234: PUSH
20235: LD_INT 1
20237: ST_TO_ADDR
// if p3 = 17 then
20238: LD_VAR 0 3
20242: PUSH
20243: LD_INT 17
20245: EQUAL
20246: IFFALSE 20256
// sSlow := true ;
20248: LD_ADDR_EXP 95
20252: PUSH
20253: LD_INT 1
20255: ST_TO_ADDR
// if p3 = 18 then
20256: LD_VAR 0 3
20260: PUSH
20261: LD_INT 18
20263: EQUAL
20264: IFFALSE 20274
// sLack := true ;
20266: LD_ADDR_EXP 96
20270: PUSH
20271: LD_INT 1
20273: ST_TO_ADDR
// if p3 = 19 then
20274: LD_VAR 0 3
20278: PUSH
20279: LD_INT 19
20281: EQUAL
20282: IFFALSE 20292
// sTank := true ;
20284: LD_ADDR_EXP 98
20288: PUSH
20289: LD_INT 1
20291: ST_TO_ADDR
// if p3 = 20 then
20292: LD_VAR 0 3
20296: PUSH
20297: LD_INT 20
20299: EQUAL
20300: IFFALSE 20310
// sRemote := true ;
20302: LD_ADDR_EXP 99
20306: PUSH
20307: LD_INT 1
20309: ST_TO_ADDR
// if p3 = 21 then
20310: LD_VAR 0 3
20314: PUSH
20315: LD_INT 21
20317: EQUAL
20318: IFFALSE 20328
// sPowell := true ;
20320: LD_ADDR_EXP 100
20324: PUSH
20325: LD_INT 1
20327: ST_TO_ADDR
// if p3 = 22 then
20328: LD_VAR 0 3
20332: PUSH
20333: LD_INT 22
20335: EQUAL
20336: IFFALSE 20346
// sTeleport := true ;
20338: LD_ADDR_EXP 103
20342: PUSH
20343: LD_INT 1
20345: ST_TO_ADDR
// if p3 = 23 then
20346: LD_VAR 0 3
20350: PUSH
20351: LD_INT 23
20353: EQUAL
20354: IFFALSE 20364
// sOilTower := true ;
20356: LD_ADDR_EXP 105
20360: PUSH
20361: LD_INT 1
20363: ST_TO_ADDR
// if p3 = 24 then
20364: LD_VAR 0 3
20368: PUSH
20369: LD_INT 24
20371: EQUAL
20372: IFFALSE 20382
// sShovel := true ;
20374: LD_ADDR_EXP 106
20378: PUSH
20379: LD_INT 1
20381: ST_TO_ADDR
// if p3 = 25 then
20382: LD_VAR 0 3
20386: PUSH
20387: LD_INT 25
20389: EQUAL
20390: IFFALSE 20400
// sSheik := true ;
20392: LD_ADDR_EXP 107
20396: PUSH
20397: LD_INT 1
20399: ST_TO_ADDR
// if p3 = 26 then
20400: LD_VAR 0 3
20404: PUSH
20405: LD_INT 26
20407: EQUAL
20408: IFFALSE 20418
// sEarthquake := true ;
20410: LD_ADDR_EXP 109
20414: PUSH
20415: LD_INT 1
20417: ST_TO_ADDR
// if p3 = 27 then
20418: LD_VAR 0 3
20422: PUSH
20423: LD_INT 27
20425: EQUAL
20426: IFFALSE 20436
// sAI := true ;
20428: LD_ADDR_EXP 110
20432: PUSH
20433: LD_INT 1
20435: ST_TO_ADDR
// if p3 = 28 then
20436: LD_VAR 0 3
20440: PUSH
20441: LD_INT 28
20443: EQUAL
20444: IFFALSE 20454
// sCargo := true ;
20446: LD_ADDR_EXP 113
20450: PUSH
20451: LD_INT 1
20453: ST_TO_ADDR
// if p3 = 29 then
20454: LD_VAR 0 3
20458: PUSH
20459: LD_INT 29
20461: EQUAL
20462: IFFALSE 20472
// sDLaser := true ;
20464: LD_ADDR_EXP 114
20468: PUSH
20469: LD_INT 1
20471: ST_TO_ADDR
// if p3 = 30 then
20472: LD_VAR 0 3
20476: PUSH
20477: LD_INT 30
20479: EQUAL
20480: IFFALSE 20490
// sExchange := true ;
20482: LD_ADDR_EXP 115
20486: PUSH
20487: LD_INT 1
20489: ST_TO_ADDR
// if p3 = 31 then
20490: LD_VAR 0 3
20494: PUSH
20495: LD_INT 31
20497: EQUAL
20498: IFFALSE 20508
// sFac := true ;
20500: LD_ADDR_EXP 116
20504: PUSH
20505: LD_INT 1
20507: ST_TO_ADDR
// if p3 = 32 then
20508: LD_VAR 0 3
20512: PUSH
20513: LD_INT 32
20515: EQUAL
20516: IFFALSE 20526
// sPower := true ;
20518: LD_ADDR_EXP 117
20522: PUSH
20523: LD_INT 1
20525: ST_TO_ADDR
// if p3 = 33 then
20526: LD_VAR 0 3
20530: PUSH
20531: LD_INT 33
20533: EQUAL
20534: IFFALSE 20544
// sRandom := true ;
20536: LD_ADDR_EXP 118
20540: PUSH
20541: LD_INT 1
20543: ST_TO_ADDR
// if p3 = 34 then
20544: LD_VAR 0 3
20548: PUSH
20549: LD_INT 34
20551: EQUAL
20552: IFFALSE 20562
// sShield := true ;
20554: LD_ADDR_EXP 119
20558: PUSH
20559: LD_INT 1
20561: ST_TO_ADDR
// if p3 = 35 then
20562: LD_VAR 0 3
20566: PUSH
20567: LD_INT 35
20569: EQUAL
20570: IFFALSE 20580
// sTime := true ;
20572: LD_ADDR_EXP 120
20576: PUSH
20577: LD_INT 1
20579: ST_TO_ADDR
// if p3 = 36 then
20580: LD_VAR 0 3
20584: PUSH
20585: LD_INT 36
20587: EQUAL
20588: IFFALSE 20598
// sTools := true ;
20590: LD_ADDR_EXP 121
20594: PUSH
20595: LD_INT 1
20597: ST_TO_ADDR
// if p3 = 101 then
20598: LD_VAR 0 3
20602: PUSH
20603: LD_INT 101
20605: EQUAL
20606: IFFALSE 20616
// sSold := true ;
20608: LD_ADDR_EXP 86
20612: PUSH
20613: LD_INT 1
20615: ST_TO_ADDR
// if p3 = 102 then
20616: LD_VAR 0 3
20620: PUSH
20621: LD_INT 102
20623: EQUAL
20624: IFFALSE 20634
// sDiff := true ;
20626: LD_ADDR_EXP 87
20630: PUSH
20631: LD_INT 1
20633: ST_TO_ADDR
// if p3 = 103 then
20634: LD_VAR 0 3
20638: PUSH
20639: LD_INT 103
20641: EQUAL
20642: IFFALSE 20652
// sFog := true ;
20644: LD_ADDR_EXP 90
20648: PUSH
20649: LD_INT 1
20651: ST_TO_ADDR
// if p3 = 104 then
20652: LD_VAR 0 3
20656: PUSH
20657: LD_INT 104
20659: EQUAL
20660: IFFALSE 20670
// sReset := true ;
20662: LD_ADDR_EXP 91
20666: PUSH
20667: LD_INT 1
20669: ST_TO_ADDR
// if p3 = 105 then
20670: LD_VAR 0 3
20674: PUSH
20675: LD_INT 105
20677: EQUAL
20678: IFFALSE 20688
// sSun := true ;
20680: LD_ADDR_EXP 92
20684: PUSH
20685: LD_INT 1
20687: ST_TO_ADDR
// if p3 = 106 then
20688: LD_VAR 0 3
20692: PUSH
20693: LD_INT 106
20695: EQUAL
20696: IFFALSE 20706
// sTiger := true ;
20698: LD_ADDR_EXP 88
20702: PUSH
20703: LD_INT 1
20705: ST_TO_ADDR
// if p3 = 107 then
20706: LD_VAR 0 3
20710: PUSH
20711: LD_INT 107
20713: EQUAL
20714: IFFALSE 20724
// sBomb := true ;
20716: LD_ADDR_EXP 89
20720: PUSH
20721: LD_INT 1
20723: ST_TO_ADDR
// if p3 = 108 then
20724: LD_VAR 0 3
20728: PUSH
20729: LD_INT 108
20731: EQUAL
20732: IFFALSE 20742
// sWound := true ;
20734: LD_ADDR_EXP 97
20738: PUSH
20739: LD_INT 1
20741: ST_TO_ADDR
// if p3 = 109 then
20742: LD_VAR 0 3
20746: PUSH
20747: LD_INT 109
20749: EQUAL
20750: IFFALSE 20760
// sBetray := true ;
20752: LD_ADDR_EXP 101
20756: PUSH
20757: LD_INT 1
20759: ST_TO_ADDR
// if p3 = 110 then
20760: LD_VAR 0 3
20764: PUSH
20765: LD_INT 110
20767: EQUAL
20768: IFFALSE 20778
// sContamin := true ;
20770: LD_ADDR_EXP 102
20774: PUSH
20775: LD_INT 1
20777: ST_TO_ADDR
// if p3 = 111 then
20778: LD_VAR 0 3
20782: PUSH
20783: LD_INT 111
20785: EQUAL
20786: IFFALSE 20796
// sOil := true ;
20788: LD_ADDR_EXP 104
20792: PUSH
20793: LD_INT 1
20795: ST_TO_ADDR
// if p3 = 112 then
20796: LD_VAR 0 3
20800: PUSH
20801: LD_INT 112
20803: EQUAL
20804: IFFALSE 20814
// sStu := true ;
20806: LD_ADDR_EXP 108
20810: PUSH
20811: LD_INT 1
20813: ST_TO_ADDR
// if p3 = 113 then
20814: LD_VAR 0 3
20818: PUSH
20819: LD_INT 113
20821: EQUAL
20822: IFFALSE 20832
// sBazooka := true ;
20824: LD_ADDR_EXP 111
20828: PUSH
20829: LD_INT 1
20831: ST_TO_ADDR
// if p3 = 114 then
20832: LD_VAR 0 3
20836: PUSH
20837: LD_INT 114
20839: EQUAL
20840: IFFALSE 20850
// sMortar := true ;
20842: LD_ADDR_EXP 112
20846: PUSH
20847: LD_INT 1
20849: ST_TO_ADDR
// if p3 = 115 then
20850: LD_VAR 0 3
20854: PUSH
20855: LD_INT 115
20857: EQUAL
20858: IFFALSE 20868
// sRanger := true ;
20860: LD_ADDR_EXP 122
20864: PUSH
20865: LD_INT 1
20867: ST_TO_ADDR
// end ; if p2 = 101 then
20868: LD_VAR 0 2
20872: PUSH
20873: LD_INT 101
20875: EQUAL
20876: IFFALSE 21004
// begin case p3 of 1 :
20878: LD_VAR 0 3
20882: PUSH
20883: LD_INT 1
20885: DOUBLE
20886: EQUAL
20887: IFTRUE 20891
20889: GO 20898
20891: POP
// hHackUnlimitedResources ; 2 :
20892: CALL 32041 0 0
20896: GO 21004
20898: LD_INT 2
20900: DOUBLE
20901: EQUAL
20902: IFTRUE 20906
20904: GO 20913
20906: POP
// hHackSetLevel10 ; 3 :
20907: CALL 32174 0 0
20911: GO 21004
20913: LD_INT 3
20915: DOUBLE
20916: EQUAL
20917: IFTRUE 20921
20919: GO 20928
20921: POP
// hHackSetLevel10YourUnits ; 4 :
20922: CALL 32259 0 0
20926: GO 21004
20928: LD_INT 4
20930: DOUBLE
20931: EQUAL
20932: IFTRUE 20936
20934: GO 20943
20936: POP
// hHackInvincible ; 5 :
20937: CALL 32707 0 0
20941: GO 21004
20943: LD_INT 5
20945: DOUBLE
20946: EQUAL
20947: IFTRUE 20951
20949: GO 20958
20951: POP
// hHackInvisible ; 6 :
20952: CALL 32818 0 0
20956: GO 21004
20958: LD_INT 6
20960: DOUBLE
20961: EQUAL
20962: IFTRUE 20966
20964: GO 20973
20966: POP
// hHackChangeYourSide ; 7 :
20967: CALL 32875 0 0
20971: GO 21004
20973: LD_INT 7
20975: DOUBLE
20976: EQUAL
20977: IFTRUE 20981
20979: GO 20988
20981: POP
// hHackChangeUnitSide ; 8 :
20982: CALL 32917 0 0
20986: GO 21004
20988: LD_INT 8
20990: DOUBLE
20991: EQUAL
20992: IFTRUE 20996
20994: GO 21003
20996: POP
// hHackFog ; end ;
20997: CALL 33018 0 0
21001: GO 21004
21003: POP
// end ; end ;
21004: LD_VAR 0 7
21008: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
21009: GO 21011
21011: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21012: LD_STRING initStreamRollete();
21014: PPUSH
21015: CALL_OW 559
// InitStreamMode ;
21019: CALL 21028 0 0
// DefineStreamItems ( ) ;
21023: CALL 21468 0 0
// end ;
21027: END
// function InitStreamMode ; begin
21028: LD_INT 0
21030: PPUSH
// streamModeActive := false ;
21031: LD_ADDR_EXP 69
21035: PUSH
21036: LD_INT 0
21038: ST_TO_ADDR
// normalCounter := 36 ;
21039: LD_ADDR_EXP 70
21043: PUSH
21044: LD_INT 36
21046: ST_TO_ADDR
// hardcoreCounter := 16 ;
21047: LD_ADDR_EXP 71
21051: PUSH
21052: LD_INT 16
21054: ST_TO_ADDR
// sRocket := false ;
21055: LD_ADDR_EXP 74
21059: PUSH
21060: LD_INT 0
21062: ST_TO_ADDR
// sSpeed := false ;
21063: LD_ADDR_EXP 73
21067: PUSH
21068: LD_INT 0
21070: ST_TO_ADDR
// sEngine := false ;
21071: LD_ADDR_EXP 75
21075: PUSH
21076: LD_INT 0
21078: ST_TO_ADDR
// sSpec := false ;
21079: LD_ADDR_EXP 72
21083: PUSH
21084: LD_INT 0
21086: ST_TO_ADDR
// sLevel := false ;
21087: LD_ADDR_EXP 76
21091: PUSH
21092: LD_INT 0
21094: ST_TO_ADDR
// sArmoury := false ;
21095: LD_ADDR_EXP 77
21099: PUSH
21100: LD_INT 0
21102: ST_TO_ADDR
// sRadar := false ;
21103: LD_ADDR_EXP 78
21107: PUSH
21108: LD_INT 0
21110: ST_TO_ADDR
// sBunker := false ;
21111: LD_ADDR_EXP 79
21115: PUSH
21116: LD_INT 0
21118: ST_TO_ADDR
// sHack := false ;
21119: LD_ADDR_EXP 80
21123: PUSH
21124: LD_INT 0
21126: ST_TO_ADDR
// sFire := false ;
21127: LD_ADDR_EXP 81
21131: PUSH
21132: LD_INT 0
21134: ST_TO_ADDR
// sRefresh := false ;
21135: LD_ADDR_EXP 82
21139: PUSH
21140: LD_INT 0
21142: ST_TO_ADDR
// sExp := false ;
21143: LD_ADDR_EXP 83
21147: PUSH
21148: LD_INT 0
21150: ST_TO_ADDR
// sDepot := false ;
21151: LD_ADDR_EXP 84
21155: PUSH
21156: LD_INT 0
21158: ST_TO_ADDR
// sFlag := false ;
21159: LD_ADDR_EXP 85
21163: PUSH
21164: LD_INT 0
21166: ST_TO_ADDR
// sKamikadze := false ;
21167: LD_ADDR_EXP 93
21171: PUSH
21172: LD_INT 0
21174: ST_TO_ADDR
// sTroll := false ;
21175: LD_ADDR_EXP 94
21179: PUSH
21180: LD_INT 0
21182: ST_TO_ADDR
// sSlow := false ;
21183: LD_ADDR_EXP 95
21187: PUSH
21188: LD_INT 0
21190: ST_TO_ADDR
// sLack := false ;
21191: LD_ADDR_EXP 96
21195: PUSH
21196: LD_INT 0
21198: ST_TO_ADDR
// sTank := false ;
21199: LD_ADDR_EXP 98
21203: PUSH
21204: LD_INT 0
21206: ST_TO_ADDR
// sRemote := false ;
21207: LD_ADDR_EXP 99
21211: PUSH
21212: LD_INT 0
21214: ST_TO_ADDR
// sPowell := false ;
21215: LD_ADDR_EXP 100
21219: PUSH
21220: LD_INT 0
21222: ST_TO_ADDR
// sTeleport := false ;
21223: LD_ADDR_EXP 103
21227: PUSH
21228: LD_INT 0
21230: ST_TO_ADDR
// sOilTower := false ;
21231: LD_ADDR_EXP 105
21235: PUSH
21236: LD_INT 0
21238: ST_TO_ADDR
// sShovel := false ;
21239: LD_ADDR_EXP 106
21243: PUSH
21244: LD_INT 0
21246: ST_TO_ADDR
// sSheik := false ;
21247: LD_ADDR_EXP 107
21251: PUSH
21252: LD_INT 0
21254: ST_TO_ADDR
// sEarthquake := false ;
21255: LD_ADDR_EXP 109
21259: PUSH
21260: LD_INT 0
21262: ST_TO_ADDR
// sAI := false ;
21263: LD_ADDR_EXP 110
21267: PUSH
21268: LD_INT 0
21270: ST_TO_ADDR
// sCargo := false ;
21271: LD_ADDR_EXP 113
21275: PUSH
21276: LD_INT 0
21278: ST_TO_ADDR
// sDLaser := false ;
21279: LD_ADDR_EXP 114
21283: PUSH
21284: LD_INT 0
21286: ST_TO_ADDR
// sExchange := false ;
21287: LD_ADDR_EXP 115
21291: PUSH
21292: LD_INT 0
21294: ST_TO_ADDR
// sFac := false ;
21295: LD_ADDR_EXP 116
21299: PUSH
21300: LD_INT 0
21302: ST_TO_ADDR
// sPower := false ;
21303: LD_ADDR_EXP 117
21307: PUSH
21308: LD_INT 0
21310: ST_TO_ADDR
// sRandom := false ;
21311: LD_ADDR_EXP 118
21315: PUSH
21316: LD_INT 0
21318: ST_TO_ADDR
// sShield := false ;
21319: LD_ADDR_EXP 119
21323: PUSH
21324: LD_INT 0
21326: ST_TO_ADDR
// sTime := false ;
21327: LD_ADDR_EXP 120
21331: PUSH
21332: LD_INT 0
21334: ST_TO_ADDR
// sTools := false ;
21335: LD_ADDR_EXP 121
21339: PUSH
21340: LD_INT 0
21342: ST_TO_ADDR
// sSold := false ;
21343: LD_ADDR_EXP 86
21347: PUSH
21348: LD_INT 0
21350: ST_TO_ADDR
// sDiff := false ;
21351: LD_ADDR_EXP 87
21355: PUSH
21356: LD_INT 0
21358: ST_TO_ADDR
// sFog := false ;
21359: LD_ADDR_EXP 90
21363: PUSH
21364: LD_INT 0
21366: ST_TO_ADDR
// sReset := false ;
21367: LD_ADDR_EXP 91
21371: PUSH
21372: LD_INT 0
21374: ST_TO_ADDR
// sSun := false ;
21375: LD_ADDR_EXP 92
21379: PUSH
21380: LD_INT 0
21382: ST_TO_ADDR
// sTiger := false ;
21383: LD_ADDR_EXP 88
21387: PUSH
21388: LD_INT 0
21390: ST_TO_ADDR
// sBomb := false ;
21391: LD_ADDR_EXP 89
21395: PUSH
21396: LD_INT 0
21398: ST_TO_ADDR
// sWound := false ;
21399: LD_ADDR_EXP 97
21403: PUSH
21404: LD_INT 0
21406: ST_TO_ADDR
// sBetray := false ;
21407: LD_ADDR_EXP 101
21411: PUSH
21412: LD_INT 0
21414: ST_TO_ADDR
// sContamin := false ;
21415: LD_ADDR_EXP 102
21419: PUSH
21420: LD_INT 0
21422: ST_TO_ADDR
// sOil := false ;
21423: LD_ADDR_EXP 104
21427: PUSH
21428: LD_INT 0
21430: ST_TO_ADDR
// sStu := false ;
21431: LD_ADDR_EXP 108
21435: PUSH
21436: LD_INT 0
21438: ST_TO_ADDR
// sBazooka := false ;
21439: LD_ADDR_EXP 111
21443: PUSH
21444: LD_INT 0
21446: ST_TO_ADDR
// sMortar := false ;
21447: LD_ADDR_EXP 112
21451: PUSH
21452: LD_INT 0
21454: ST_TO_ADDR
// sRanger := false ;
21455: LD_ADDR_EXP 122
21459: PUSH
21460: LD_INT 0
21462: ST_TO_ADDR
// end ;
21463: LD_VAR 0 1
21467: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21468: LD_INT 0
21470: PPUSH
21471: PPUSH
21472: PPUSH
21473: PPUSH
21474: PPUSH
// result := [ ] ;
21475: LD_ADDR_VAR 0 1
21479: PUSH
21480: EMPTY
21481: ST_TO_ADDR
// if campaign_id = 1 then
21482: LD_OWVAR 69
21486: PUSH
21487: LD_INT 1
21489: EQUAL
21490: IFFALSE 24428
// begin case mission_number of 1 :
21492: LD_OWVAR 70
21496: PUSH
21497: LD_INT 1
21499: DOUBLE
21500: EQUAL
21501: IFTRUE 21505
21503: GO 21569
21505: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
21506: LD_ADDR_VAR 0 1
21510: PUSH
21511: LD_INT 2
21513: PUSH
21514: LD_INT 4
21516: PUSH
21517: LD_INT 11
21519: PUSH
21520: LD_INT 12
21522: PUSH
21523: LD_INT 15
21525: PUSH
21526: LD_INT 16
21528: PUSH
21529: LD_INT 22
21531: PUSH
21532: LD_INT 23
21534: PUSH
21535: LD_INT 26
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 101
21551: PUSH
21552: LD_INT 102
21554: PUSH
21555: LD_INT 106
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: LIST
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: ST_TO_ADDR
21567: GO 24426
21569: LD_INT 2
21571: DOUBLE
21572: EQUAL
21573: IFTRUE 21577
21575: GO 21649
21577: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
21578: LD_ADDR_VAR 0 1
21582: PUSH
21583: LD_INT 2
21585: PUSH
21586: LD_INT 4
21588: PUSH
21589: LD_INT 11
21591: PUSH
21592: LD_INT 12
21594: PUSH
21595: LD_INT 15
21597: PUSH
21598: LD_INT 16
21600: PUSH
21601: LD_INT 22
21603: PUSH
21604: LD_INT 23
21606: PUSH
21607: LD_INT 26
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 101
21623: PUSH
21624: LD_INT 102
21626: PUSH
21627: LD_INT 105
21629: PUSH
21630: LD_INT 106
21632: PUSH
21633: LD_INT 108
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: ST_TO_ADDR
21647: GO 24426
21649: LD_INT 3
21651: DOUBLE
21652: EQUAL
21653: IFTRUE 21657
21655: GO 21733
21657: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
21658: LD_ADDR_VAR 0 1
21662: PUSH
21663: LD_INT 2
21665: PUSH
21666: LD_INT 4
21668: PUSH
21669: LD_INT 5
21671: PUSH
21672: LD_INT 11
21674: PUSH
21675: LD_INT 12
21677: PUSH
21678: LD_INT 15
21680: PUSH
21681: LD_INT 16
21683: PUSH
21684: LD_INT 22
21686: PUSH
21687: LD_INT 26
21689: PUSH
21690: LD_INT 36
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 101
21707: PUSH
21708: LD_INT 102
21710: PUSH
21711: LD_INT 105
21713: PUSH
21714: LD_INT 106
21716: PUSH
21717: LD_INT 108
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: ST_TO_ADDR
21731: GO 24426
21733: LD_INT 4
21735: DOUBLE
21736: EQUAL
21737: IFTRUE 21741
21739: GO 21825
21741: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21742: LD_ADDR_VAR 0 1
21746: PUSH
21747: LD_INT 2
21749: PUSH
21750: LD_INT 4
21752: PUSH
21753: LD_INT 5
21755: PUSH
21756: LD_INT 8
21758: PUSH
21759: LD_INT 11
21761: PUSH
21762: LD_INT 12
21764: PUSH
21765: LD_INT 15
21767: PUSH
21768: LD_INT 16
21770: PUSH
21771: LD_INT 22
21773: PUSH
21774: LD_INT 23
21776: PUSH
21777: LD_INT 26
21779: PUSH
21780: LD_INT 36
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 101
21799: PUSH
21800: LD_INT 102
21802: PUSH
21803: LD_INT 105
21805: PUSH
21806: LD_INT 106
21808: PUSH
21809: LD_INT 108
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: ST_TO_ADDR
21823: GO 24426
21825: LD_INT 5
21827: DOUBLE
21828: EQUAL
21829: IFTRUE 21833
21831: GO 21933
21833: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21834: LD_ADDR_VAR 0 1
21838: PUSH
21839: LD_INT 2
21841: PUSH
21842: LD_INT 4
21844: PUSH
21845: LD_INT 5
21847: PUSH
21848: LD_INT 6
21850: PUSH
21851: LD_INT 8
21853: PUSH
21854: LD_INT 11
21856: PUSH
21857: LD_INT 12
21859: PUSH
21860: LD_INT 15
21862: PUSH
21863: LD_INT 16
21865: PUSH
21866: LD_INT 22
21868: PUSH
21869: LD_INT 23
21871: PUSH
21872: LD_INT 25
21874: PUSH
21875: LD_INT 26
21877: PUSH
21878: LD_INT 36
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 101
21899: PUSH
21900: LD_INT 102
21902: PUSH
21903: LD_INT 105
21905: PUSH
21906: LD_INT 106
21908: PUSH
21909: LD_INT 108
21911: PUSH
21912: LD_INT 109
21914: PUSH
21915: LD_INT 112
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: ST_TO_ADDR
21931: GO 24426
21933: LD_INT 6
21935: DOUBLE
21936: EQUAL
21937: IFTRUE 21941
21939: GO 22061
21941: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21942: LD_ADDR_VAR 0 1
21946: PUSH
21947: LD_INT 2
21949: PUSH
21950: LD_INT 4
21952: PUSH
21953: LD_INT 5
21955: PUSH
21956: LD_INT 6
21958: PUSH
21959: LD_INT 8
21961: PUSH
21962: LD_INT 11
21964: PUSH
21965: LD_INT 12
21967: PUSH
21968: LD_INT 15
21970: PUSH
21971: LD_INT 16
21973: PUSH
21974: LD_INT 20
21976: PUSH
21977: LD_INT 21
21979: PUSH
21980: LD_INT 22
21982: PUSH
21983: LD_INT 23
21985: PUSH
21986: LD_INT 25
21988: PUSH
21989: LD_INT 26
21991: PUSH
21992: LD_INT 30
21994: PUSH
21995: LD_INT 31
21997: PUSH
21998: LD_INT 32
22000: PUSH
22001: LD_INT 36
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 101
22027: PUSH
22028: LD_INT 102
22030: PUSH
22031: LD_INT 105
22033: PUSH
22034: LD_INT 106
22036: PUSH
22037: LD_INT 108
22039: PUSH
22040: LD_INT 109
22042: PUSH
22043: LD_INT 112
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: ST_TO_ADDR
22059: GO 24426
22061: LD_INT 7
22063: DOUBLE
22064: EQUAL
22065: IFTRUE 22069
22067: GO 22169
22069: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
22070: LD_ADDR_VAR 0 1
22074: PUSH
22075: LD_INT 2
22077: PUSH
22078: LD_INT 4
22080: PUSH
22081: LD_INT 5
22083: PUSH
22084: LD_INT 7
22086: PUSH
22087: LD_INT 11
22089: PUSH
22090: LD_INT 12
22092: PUSH
22093: LD_INT 15
22095: PUSH
22096: LD_INT 16
22098: PUSH
22099: LD_INT 20
22101: PUSH
22102: LD_INT 21
22104: PUSH
22105: LD_INT 22
22107: PUSH
22108: LD_INT 23
22110: PUSH
22111: LD_INT 25
22113: PUSH
22114: LD_INT 26
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 101
22135: PUSH
22136: LD_INT 102
22138: PUSH
22139: LD_INT 103
22141: PUSH
22142: LD_INT 105
22144: PUSH
22145: LD_INT 106
22147: PUSH
22148: LD_INT 108
22150: PUSH
22151: LD_INT 112
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: ST_TO_ADDR
22167: GO 24426
22169: LD_INT 8
22171: DOUBLE
22172: EQUAL
22173: IFTRUE 22177
22175: GO 22305
22177: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
22178: LD_ADDR_VAR 0 1
22182: PUSH
22183: LD_INT 2
22185: PUSH
22186: LD_INT 4
22188: PUSH
22189: LD_INT 5
22191: PUSH
22192: LD_INT 6
22194: PUSH
22195: LD_INT 7
22197: PUSH
22198: LD_INT 8
22200: PUSH
22201: LD_INT 11
22203: PUSH
22204: LD_INT 12
22206: PUSH
22207: LD_INT 15
22209: PUSH
22210: LD_INT 16
22212: PUSH
22213: LD_INT 20
22215: PUSH
22216: LD_INT 21
22218: PUSH
22219: LD_INT 22
22221: PUSH
22222: LD_INT 23
22224: PUSH
22225: LD_INT 25
22227: PUSH
22228: LD_INT 26
22230: PUSH
22231: LD_INT 30
22233: PUSH
22234: LD_INT 31
22236: PUSH
22237: LD_INT 32
22239: PUSH
22240: LD_INT 36
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 101
22267: PUSH
22268: LD_INT 102
22270: PUSH
22271: LD_INT 103
22273: PUSH
22274: LD_INT 105
22276: PUSH
22277: LD_INT 106
22279: PUSH
22280: LD_INT 108
22282: PUSH
22283: LD_INT 109
22285: PUSH
22286: LD_INT 112
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: ST_TO_ADDR
22303: GO 24426
22305: LD_INT 9
22307: DOUBLE
22308: EQUAL
22309: IFTRUE 22313
22311: GO 22449
22313: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
22314: LD_ADDR_VAR 0 1
22318: PUSH
22319: LD_INT 2
22321: PUSH
22322: LD_INT 4
22324: PUSH
22325: LD_INT 5
22327: PUSH
22328: LD_INT 6
22330: PUSH
22331: LD_INT 7
22333: PUSH
22334: LD_INT 8
22336: PUSH
22337: LD_INT 11
22339: PUSH
22340: LD_INT 12
22342: PUSH
22343: LD_INT 15
22345: PUSH
22346: LD_INT 16
22348: PUSH
22349: LD_INT 20
22351: PUSH
22352: LD_INT 21
22354: PUSH
22355: LD_INT 22
22357: PUSH
22358: LD_INT 23
22360: PUSH
22361: LD_INT 25
22363: PUSH
22364: LD_INT 26
22366: PUSH
22367: LD_INT 28
22369: PUSH
22370: LD_INT 30
22372: PUSH
22373: LD_INT 31
22375: PUSH
22376: LD_INT 32
22378: PUSH
22379: LD_INT 36
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 101
22407: PUSH
22408: LD_INT 102
22410: PUSH
22411: LD_INT 103
22413: PUSH
22414: LD_INT 105
22416: PUSH
22417: LD_INT 106
22419: PUSH
22420: LD_INT 108
22422: PUSH
22423: LD_INT 109
22425: PUSH
22426: LD_INT 112
22428: PUSH
22429: LD_INT 114
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: ST_TO_ADDR
22447: GO 24426
22449: LD_INT 10
22451: DOUBLE
22452: EQUAL
22453: IFTRUE 22457
22455: GO 22641
22457: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
22458: LD_ADDR_VAR 0 1
22462: PUSH
22463: LD_INT 2
22465: PUSH
22466: LD_INT 4
22468: PUSH
22469: LD_INT 5
22471: PUSH
22472: LD_INT 6
22474: PUSH
22475: LD_INT 7
22477: PUSH
22478: LD_INT 8
22480: PUSH
22481: LD_INT 9
22483: PUSH
22484: LD_INT 10
22486: PUSH
22487: LD_INT 11
22489: PUSH
22490: LD_INT 12
22492: PUSH
22493: LD_INT 13
22495: PUSH
22496: LD_INT 14
22498: PUSH
22499: LD_INT 15
22501: PUSH
22502: LD_INT 16
22504: PUSH
22505: LD_INT 17
22507: PUSH
22508: LD_INT 18
22510: PUSH
22511: LD_INT 19
22513: PUSH
22514: LD_INT 20
22516: PUSH
22517: LD_INT 21
22519: PUSH
22520: LD_INT 22
22522: PUSH
22523: LD_INT 23
22525: PUSH
22526: LD_INT 24
22528: PUSH
22529: LD_INT 25
22531: PUSH
22532: LD_INT 26
22534: PUSH
22535: LD_INT 28
22537: PUSH
22538: LD_INT 30
22540: PUSH
22541: LD_INT 31
22543: PUSH
22544: LD_INT 32
22546: PUSH
22547: LD_INT 36
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 101
22583: PUSH
22584: LD_INT 102
22586: PUSH
22587: LD_INT 103
22589: PUSH
22590: LD_INT 104
22592: PUSH
22593: LD_INT 105
22595: PUSH
22596: LD_INT 106
22598: PUSH
22599: LD_INT 107
22601: PUSH
22602: LD_INT 108
22604: PUSH
22605: LD_INT 109
22607: PUSH
22608: LD_INT 110
22610: PUSH
22611: LD_INT 111
22613: PUSH
22614: LD_INT 112
22616: PUSH
22617: LD_INT 114
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: ST_TO_ADDR
22639: GO 24426
22641: LD_INT 11
22643: DOUBLE
22644: EQUAL
22645: IFTRUE 22649
22647: GO 22841
22649: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
22650: LD_ADDR_VAR 0 1
22654: PUSH
22655: LD_INT 2
22657: PUSH
22658: LD_INT 3
22660: PUSH
22661: LD_INT 4
22663: PUSH
22664: LD_INT 5
22666: PUSH
22667: LD_INT 6
22669: PUSH
22670: LD_INT 7
22672: PUSH
22673: LD_INT 8
22675: PUSH
22676: LD_INT 9
22678: PUSH
22679: LD_INT 10
22681: PUSH
22682: LD_INT 11
22684: PUSH
22685: LD_INT 12
22687: PUSH
22688: LD_INT 13
22690: PUSH
22691: LD_INT 14
22693: PUSH
22694: LD_INT 15
22696: PUSH
22697: LD_INT 16
22699: PUSH
22700: LD_INT 17
22702: PUSH
22703: LD_INT 18
22705: PUSH
22706: LD_INT 19
22708: PUSH
22709: LD_INT 20
22711: PUSH
22712: LD_INT 21
22714: PUSH
22715: LD_INT 22
22717: PUSH
22718: LD_INT 23
22720: PUSH
22721: LD_INT 24
22723: PUSH
22724: LD_INT 25
22726: PUSH
22727: LD_INT 26
22729: PUSH
22730: LD_INT 28
22732: PUSH
22733: LD_INT 30
22735: PUSH
22736: LD_INT 31
22738: PUSH
22739: LD_INT 32
22741: PUSH
22742: LD_INT 34
22744: PUSH
22745: LD_INT 36
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 101
22783: PUSH
22784: LD_INT 102
22786: PUSH
22787: LD_INT 103
22789: PUSH
22790: LD_INT 104
22792: PUSH
22793: LD_INT 105
22795: PUSH
22796: LD_INT 106
22798: PUSH
22799: LD_INT 107
22801: PUSH
22802: LD_INT 108
22804: PUSH
22805: LD_INT 109
22807: PUSH
22808: LD_INT 110
22810: PUSH
22811: LD_INT 111
22813: PUSH
22814: LD_INT 112
22816: PUSH
22817: LD_INT 114
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: ST_TO_ADDR
22839: GO 24426
22841: LD_INT 12
22843: DOUBLE
22844: EQUAL
22845: IFTRUE 22849
22847: GO 23057
22849: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22850: LD_ADDR_VAR 0 1
22854: PUSH
22855: LD_INT 1
22857: PUSH
22858: LD_INT 2
22860: PUSH
22861: LD_INT 3
22863: PUSH
22864: LD_INT 4
22866: PUSH
22867: LD_INT 5
22869: PUSH
22870: LD_INT 6
22872: PUSH
22873: LD_INT 7
22875: PUSH
22876: LD_INT 8
22878: PUSH
22879: LD_INT 9
22881: PUSH
22882: LD_INT 10
22884: PUSH
22885: LD_INT 11
22887: PUSH
22888: LD_INT 12
22890: PUSH
22891: LD_INT 13
22893: PUSH
22894: LD_INT 14
22896: PUSH
22897: LD_INT 15
22899: PUSH
22900: LD_INT 16
22902: PUSH
22903: LD_INT 17
22905: PUSH
22906: LD_INT 18
22908: PUSH
22909: LD_INT 19
22911: PUSH
22912: LD_INT 20
22914: PUSH
22915: LD_INT 21
22917: PUSH
22918: LD_INT 22
22920: PUSH
22921: LD_INT 23
22923: PUSH
22924: LD_INT 24
22926: PUSH
22927: LD_INT 25
22929: PUSH
22930: LD_INT 26
22932: PUSH
22933: LD_INT 27
22935: PUSH
22936: LD_INT 28
22938: PUSH
22939: LD_INT 30
22941: PUSH
22942: LD_INT 31
22944: PUSH
22945: LD_INT 32
22947: PUSH
22948: LD_INT 33
22950: PUSH
22951: LD_INT 34
22953: PUSH
22954: LD_INT 36
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 101
22995: PUSH
22996: LD_INT 102
22998: PUSH
22999: LD_INT 103
23001: PUSH
23002: LD_INT 104
23004: PUSH
23005: LD_INT 105
23007: PUSH
23008: LD_INT 106
23010: PUSH
23011: LD_INT 107
23013: PUSH
23014: LD_INT 108
23016: PUSH
23017: LD_INT 109
23019: PUSH
23020: LD_INT 110
23022: PUSH
23023: LD_INT 111
23025: PUSH
23026: LD_INT 112
23028: PUSH
23029: LD_INT 113
23031: PUSH
23032: LD_INT 114
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: ST_TO_ADDR
23055: GO 24426
23057: LD_INT 13
23059: DOUBLE
23060: EQUAL
23061: IFTRUE 23065
23063: GO 23261
23065: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
23066: LD_ADDR_VAR 0 1
23070: PUSH
23071: LD_INT 1
23073: PUSH
23074: LD_INT 2
23076: PUSH
23077: LD_INT 3
23079: PUSH
23080: LD_INT 4
23082: PUSH
23083: LD_INT 5
23085: PUSH
23086: LD_INT 8
23088: PUSH
23089: LD_INT 9
23091: PUSH
23092: LD_INT 10
23094: PUSH
23095: LD_INT 11
23097: PUSH
23098: LD_INT 12
23100: PUSH
23101: LD_INT 14
23103: PUSH
23104: LD_INT 15
23106: PUSH
23107: LD_INT 16
23109: PUSH
23110: LD_INT 17
23112: PUSH
23113: LD_INT 18
23115: PUSH
23116: LD_INT 19
23118: PUSH
23119: LD_INT 20
23121: PUSH
23122: LD_INT 21
23124: PUSH
23125: LD_INT 22
23127: PUSH
23128: LD_INT 23
23130: PUSH
23131: LD_INT 24
23133: PUSH
23134: LD_INT 25
23136: PUSH
23137: LD_INT 26
23139: PUSH
23140: LD_INT 27
23142: PUSH
23143: LD_INT 28
23145: PUSH
23146: LD_INT 30
23148: PUSH
23149: LD_INT 31
23151: PUSH
23152: LD_INT 32
23154: PUSH
23155: LD_INT 33
23157: PUSH
23158: LD_INT 34
23160: PUSH
23161: LD_INT 36
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 101
23199: PUSH
23200: LD_INT 102
23202: PUSH
23203: LD_INT 103
23205: PUSH
23206: LD_INT 104
23208: PUSH
23209: LD_INT 105
23211: PUSH
23212: LD_INT 106
23214: PUSH
23215: LD_INT 107
23217: PUSH
23218: LD_INT 108
23220: PUSH
23221: LD_INT 109
23223: PUSH
23224: LD_INT 110
23226: PUSH
23227: LD_INT 111
23229: PUSH
23230: LD_INT 112
23232: PUSH
23233: LD_INT 113
23235: PUSH
23236: LD_INT 114
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: ST_TO_ADDR
23259: GO 24426
23261: LD_INT 14
23263: DOUBLE
23264: EQUAL
23265: IFTRUE 23269
23267: GO 23481
23269: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
23270: LD_ADDR_VAR 0 1
23274: PUSH
23275: LD_INT 1
23277: PUSH
23278: LD_INT 2
23280: PUSH
23281: LD_INT 3
23283: PUSH
23284: LD_INT 4
23286: PUSH
23287: LD_INT 5
23289: PUSH
23290: LD_INT 6
23292: PUSH
23293: LD_INT 7
23295: PUSH
23296: LD_INT 8
23298: PUSH
23299: LD_INT 9
23301: PUSH
23302: LD_INT 10
23304: PUSH
23305: LD_INT 11
23307: PUSH
23308: LD_INT 12
23310: PUSH
23311: LD_INT 13
23313: PUSH
23314: LD_INT 14
23316: PUSH
23317: LD_INT 15
23319: PUSH
23320: LD_INT 16
23322: PUSH
23323: LD_INT 17
23325: PUSH
23326: LD_INT 18
23328: PUSH
23329: LD_INT 19
23331: PUSH
23332: LD_INT 20
23334: PUSH
23335: LD_INT 21
23337: PUSH
23338: LD_INT 22
23340: PUSH
23341: LD_INT 23
23343: PUSH
23344: LD_INT 24
23346: PUSH
23347: LD_INT 25
23349: PUSH
23350: LD_INT 26
23352: PUSH
23353: LD_INT 27
23355: PUSH
23356: LD_INT 28
23358: PUSH
23359: LD_INT 29
23361: PUSH
23362: LD_INT 30
23364: PUSH
23365: LD_INT 31
23367: PUSH
23368: LD_INT 32
23370: PUSH
23371: LD_INT 33
23373: PUSH
23374: LD_INT 34
23376: PUSH
23377: LD_INT 36
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 101
23419: PUSH
23420: LD_INT 102
23422: PUSH
23423: LD_INT 103
23425: PUSH
23426: LD_INT 104
23428: PUSH
23429: LD_INT 105
23431: PUSH
23432: LD_INT 106
23434: PUSH
23435: LD_INT 107
23437: PUSH
23438: LD_INT 108
23440: PUSH
23441: LD_INT 109
23443: PUSH
23444: LD_INT 110
23446: PUSH
23447: LD_INT 111
23449: PUSH
23450: LD_INT 112
23452: PUSH
23453: LD_INT 113
23455: PUSH
23456: LD_INT 114
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: ST_TO_ADDR
23479: GO 24426
23481: LD_INT 15
23483: DOUBLE
23484: EQUAL
23485: IFTRUE 23489
23487: GO 23701
23489: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
23490: LD_ADDR_VAR 0 1
23494: PUSH
23495: LD_INT 1
23497: PUSH
23498: LD_INT 2
23500: PUSH
23501: LD_INT 3
23503: PUSH
23504: LD_INT 4
23506: PUSH
23507: LD_INT 5
23509: PUSH
23510: LD_INT 6
23512: PUSH
23513: LD_INT 7
23515: PUSH
23516: LD_INT 8
23518: PUSH
23519: LD_INT 9
23521: PUSH
23522: LD_INT 10
23524: PUSH
23525: LD_INT 11
23527: PUSH
23528: LD_INT 12
23530: PUSH
23531: LD_INT 13
23533: PUSH
23534: LD_INT 14
23536: PUSH
23537: LD_INT 15
23539: PUSH
23540: LD_INT 16
23542: PUSH
23543: LD_INT 17
23545: PUSH
23546: LD_INT 18
23548: PUSH
23549: LD_INT 19
23551: PUSH
23552: LD_INT 20
23554: PUSH
23555: LD_INT 21
23557: PUSH
23558: LD_INT 22
23560: PUSH
23561: LD_INT 23
23563: PUSH
23564: LD_INT 24
23566: PUSH
23567: LD_INT 25
23569: PUSH
23570: LD_INT 26
23572: PUSH
23573: LD_INT 27
23575: PUSH
23576: LD_INT 28
23578: PUSH
23579: LD_INT 29
23581: PUSH
23582: LD_INT 30
23584: PUSH
23585: LD_INT 31
23587: PUSH
23588: LD_INT 32
23590: PUSH
23591: LD_INT 33
23593: PUSH
23594: LD_INT 34
23596: PUSH
23597: LD_INT 36
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 101
23639: PUSH
23640: LD_INT 102
23642: PUSH
23643: LD_INT 103
23645: PUSH
23646: LD_INT 104
23648: PUSH
23649: LD_INT 105
23651: PUSH
23652: LD_INT 106
23654: PUSH
23655: LD_INT 107
23657: PUSH
23658: LD_INT 108
23660: PUSH
23661: LD_INT 109
23663: PUSH
23664: LD_INT 110
23666: PUSH
23667: LD_INT 111
23669: PUSH
23670: LD_INT 112
23672: PUSH
23673: LD_INT 113
23675: PUSH
23676: LD_INT 114
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: ST_TO_ADDR
23699: GO 24426
23701: LD_INT 16
23703: DOUBLE
23704: EQUAL
23705: IFTRUE 23709
23707: GO 23833
23709: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
23710: LD_ADDR_VAR 0 1
23714: PUSH
23715: LD_INT 2
23717: PUSH
23718: LD_INT 4
23720: PUSH
23721: LD_INT 5
23723: PUSH
23724: LD_INT 7
23726: PUSH
23727: LD_INT 11
23729: PUSH
23730: LD_INT 12
23732: PUSH
23733: LD_INT 15
23735: PUSH
23736: LD_INT 16
23738: PUSH
23739: LD_INT 20
23741: PUSH
23742: LD_INT 21
23744: PUSH
23745: LD_INT 22
23747: PUSH
23748: LD_INT 23
23750: PUSH
23751: LD_INT 25
23753: PUSH
23754: LD_INT 26
23756: PUSH
23757: LD_INT 30
23759: PUSH
23760: LD_INT 31
23762: PUSH
23763: LD_INT 32
23765: PUSH
23766: LD_INT 33
23768: PUSH
23769: LD_INT 34
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 101
23795: PUSH
23796: LD_INT 102
23798: PUSH
23799: LD_INT 103
23801: PUSH
23802: LD_INT 106
23804: PUSH
23805: LD_INT 108
23807: PUSH
23808: LD_INT 112
23810: PUSH
23811: LD_INT 113
23813: PUSH
23814: LD_INT 114
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: ST_TO_ADDR
23831: GO 24426
23833: LD_INT 17
23835: DOUBLE
23836: EQUAL
23837: IFTRUE 23841
23839: GO 24053
23841: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23842: LD_ADDR_VAR 0 1
23846: PUSH
23847: LD_INT 1
23849: PUSH
23850: LD_INT 2
23852: PUSH
23853: LD_INT 3
23855: PUSH
23856: LD_INT 4
23858: PUSH
23859: LD_INT 5
23861: PUSH
23862: LD_INT 6
23864: PUSH
23865: LD_INT 7
23867: PUSH
23868: LD_INT 8
23870: PUSH
23871: LD_INT 9
23873: PUSH
23874: LD_INT 10
23876: PUSH
23877: LD_INT 11
23879: PUSH
23880: LD_INT 12
23882: PUSH
23883: LD_INT 13
23885: PUSH
23886: LD_INT 14
23888: PUSH
23889: LD_INT 15
23891: PUSH
23892: LD_INT 16
23894: PUSH
23895: LD_INT 17
23897: PUSH
23898: LD_INT 18
23900: PUSH
23901: LD_INT 19
23903: PUSH
23904: LD_INT 20
23906: PUSH
23907: LD_INT 21
23909: PUSH
23910: LD_INT 22
23912: PUSH
23913: LD_INT 23
23915: PUSH
23916: LD_INT 24
23918: PUSH
23919: LD_INT 25
23921: PUSH
23922: LD_INT 26
23924: PUSH
23925: LD_INT 27
23927: PUSH
23928: LD_INT 28
23930: PUSH
23931: LD_INT 29
23933: PUSH
23934: LD_INT 30
23936: PUSH
23937: LD_INT 31
23939: PUSH
23940: LD_INT 32
23942: PUSH
23943: LD_INT 33
23945: PUSH
23946: LD_INT 34
23948: PUSH
23949: LD_INT 36
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 101
23991: PUSH
23992: LD_INT 102
23994: PUSH
23995: LD_INT 103
23997: PUSH
23998: LD_INT 104
24000: PUSH
24001: LD_INT 105
24003: PUSH
24004: LD_INT 106
24006: PUSH
24007: LD_INT 107
24009: PUSH
24010: LD_INT 108
24012: PUSH
24013: LD_INT 109
24015: PUSH
24016: LD_INT 110
24018: PUSH
24019: LD_INT 111
24021: PUSH
24022: LD_INT 112
24024: PUSH
24025: LD_INT 113
24027: PUSH
24028: LD_INT 114
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: ST_TO_ADDR
24051: GO 24426
24053: LD_INT 18
24055: DOUBLE
24056: EQUAL
24057: IFTRUE 24061
24059: GO 24197
24061: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
24062: LD_ADDR_VAR 0 1
24066: PUSH
24067: LD_INT 2
24069: PUSH
24070: LD_INT 4
24072: PUSH
24073: LD_INT 5
24075: PUSH
24076: LD_INT 7
24078: PUSH
24079: LD_INT 11
24081: PUSH
24082: LD_INT 12
24084: PUSH
24085: LD_INT 15
24087: PUSH
24088: LD_INT 16
24090: PUSH
24091: LD_INT 20
24093: PUSH
24094: LD_INT 21
24096: PUSH
24097: LD_INT 22
24099: PUSH
24100: LD_INT 23
24102: PUSH
24103: LD_INT 25
24105: PUSH
24106: LD_INT 26
24108: PUSH
24109: LD_INT 30
24111: PUSH
24112: LD_INT 31
24114: PUSH
24115: LD_INT 32
24117: PUSH
24118: LD_INT 33
24120: PUSH
24121: LD_INT 34
24123: PUSH
24124: LD_INT 35
24126: PUSH
24127: LD_INT 36
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 101
24155: PUSH
24156: LD_INT 102
24158: PUSH
24159: LD_INT 103
24161: PUSH
24162: LD_INT 106
24164: PUSH
24165: LD_INT 108
24167: PUSH
24168: LD_INT 112
24170: PUSH
24171: LD_INT 113
24173: PUSH
24174: LD_INT 114
24176: PUSH
24177: LD_INT 115
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: ST_TO_ADDR
24195: GO 24426
24197: LD_INT 19
24199: DOUBLE
24200: EQUAL
24201: IFTRUE 24205
24203: GO 24425
24205: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
24206: LD_ADDR_VAR 0 1
24210: PUSH
24211: LD_INT 1
24213: PUSH
24214: LD_INT 2
24216: PUSH
24217: LD_INT 3
24219: PUSH
24220: LD_INT 4
24222: PUSH
24223: LD_INT 5
24225: PUSH
24226: LD_INT 6
24228: PUSH
24229: LD_INT 7
24231: PUSH
24232: LD_INT 8
24234: PUSH
24235: LD_INT 9
24237: PUSH
24238: LD_INT 10
24240: PUSH
24241: LD_INT 11
24243: PUSH
24244: LD_INT 12
24246: PUSH
24247: LD_INT 13
24249: PUSH
24250: LD_INT 14
24252: PUSH
24253: LD_INT 15
24255: PUSH
24256: LD_INT 16
24258: PUSH
24259: LD_INT 17
24261: PUSH
24262: LD_INT 18
24264: PUSH
24265: LD_INT 19
24267: PUSH
24268: LD_INT 20
24270: PUSH
24271: LD_INT 21
24273: PUSH
24274: LD_INT 22
24276: PUSH
24277: LD_INT 23
24279: PUSH
24280: LD_INT 24
24282: PUSH
24283: LD_INT 25
24285: PUSH
24286: LD_INT 26
24288: PUSH
24289: LD_INT 27
24291: PUSH
24292: LD_INT 28
24294: PUSH
24295: LD_INT 29
24297: PUSH
24298: LD_INT 30
24300: PUSH
24301: LD_INT 31
24303: PUSH
24304: LD_INT 32
24306: PUSH
24307: LD_INT 33
24309: PUSH
24310: LD_INT 34
24312: PUSH
24313: LD_INT 35
24315: PUSH
24316: LD_INT 36
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 101
24359: PUSH
24360: LD_INT 102
24362: PUSH
24363: LD_INT 103
24365: PUSH
24366: LD_INT 104
24368: PUSH
24369: LD_INT 105
24371: PUSH
24372: LD_INT 106
24374: PUSH
24375: LD_INT 107
24377: PUSH
24378: LD_INT 108
24380: PUSH
24381: LD_INT 109
24383: PUSH
24384: LD_INT 110
24386: PUSH
24387: LD_INT 111
24389: PUSH
24390: LD_INT 112
24392: PUSH
24393: LD_INT 113
24395: PUSH
24396: LD_INT 114
24398: PUSH
24399: LD_INT 115
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: ST_TO_ADDR
24423: GO 24426
24425: POP
// end else
24426: GO 24645
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
24428: LD_ADDR_VAR 0 1
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: LD_INT 3
24441: PUSH
24442: LD_INT 4
24444: PUSH
24445: LD_INT 5
24447: PUSH
24448: LD_INT 6
24450: PUSH
24451: LD_INT 7
24453: PUSH
24454: LD_INT 8
24456: PUSH
24457: LD_INT 9
24459: PUSH
24460: LD_INT 10
24462: PUSH
24463: LD_INT 11
24465: PUSH
24466: LD_INT 12
24468: PUSH
24469: LD_INT 13
24471: PUSH
24472: LD_INT 14
24474: PUSH
24475: LD_INT 15
24477: PUSH
24478: LD_INT 16
24480: PUSH
24481: LD_INT 17
24483: PUSH
24484: LD_INT 18
24486: PUSH
24487: LD_INT 19
24489: PUSH
24490: LD_INT 20
24492: PUSH
24493: LD_INT 21
24495: PUSH
24496: LD_INT 22
24498: PUSH
24499: LD_INT 23
24501: PUSH
24502: LD_INT 24
24504: PUSH
24505: LD_INT 25
24507: PUSH
24508: LD_INT 26
24510: PUSH
24511: LD_INT 27
24513: PUSH
24514: LD_INT 28
24516: PUSH
24517: LD_INT 29
24519: PUSH
24520: LD_INT 30
24522: PUSH
24523: LD_INT 31
24525: PUSH
24526: LD_INT 32
24528: PUSH
24529: LD_INT 33
24531: PUSH
24532: LD_INT 34
24534: PUSH
24535: LD_INT 35
24537: PUSH
24538: LD_INT 36
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 101
24581: PUSH
24582: LD_INT 102
24584: PUSH
24585: LD_INT 103
24587: PUSH
24588: LD_INT 104
24590: PUSH
24591: LD_INT 105
24593: PUSH
24594: LD_INT 106
24596: PUSH
24597: LD_INT 107
24599: PUSH
24600: LD_INT 108
24602: PUSH
24603: LD_INT 109
24605: PUSH
24606: LD_INT 110
24608: PUSH
24609: LD_INT 111
24611: PUSH
24612: LD_INT 112
24614: PUSH
24615: LD_INT 113
24617: PUSH
24618: LD_INT 114
24620: PUSH
24621: LD_INT 115
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: ST_TO_ADDR
// if result then
24645: LD_VAR 0 1
24649: IFFALSE 24938
// begin normal :=  ;
24651: LD_ADDR_VAR 0 3
24655: PUSH
24656: LD_STRING 
24658: ST_TO_ADDR
// hardcore :=  ;
24659: LD_ADDR_VAR 0 4
24663: PUSH
24664: LD_STRING 
24666: ST_TO_ADDR
// for i = 1 to normalCounter do
24667: LD_ADDR_VAR 0 5
24671: PUSH
24672: DOUBLE
24673: LD_INT 1
24675: DEC
24676: ST_TO_ADDR
24677: LD_EXP 70
24681: PUSH
24682: FOR_TO
24683: IFFALSE 24784
// begin tmp := 0 ;
24685: LD_ADDR_VAR 0 2
24689: PUSH
24690: LD_STRING 0
24692: ST_TO_ADDR
// if result [ 1 ] then
24693: LD_VAR 0 1
24697: PUSH
24698: LD_INT 1
24700: ARRAY
24701: IFFALSE 24766
// if result [ 1 ] [ 1 ] = i then
24703: LD_VAR 0 1
24707: PUSH
24708: LD_INT 1
24710: ARRAY
24711: PUSH
24712: LD_INT 1
24714: ARRAY
24715: PUSH
24716: LD_VAR 0 5
24720: EQUAL
24721: IFFALSE 24766
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24723: LD_ADDR_VAR 0 1
24727: PUSH
24728: LD_VAR 0 1
24732: PPUSH
24733: LD_INT 1
24735: PPUSH
24736: LD_VAR 0 1
24740: PUSH
24741: LD_INT 1
24743: ARRAY
24744: PPUSH
24745: LD_INT 1
24747: PPUSH
24748: CALL_OW 3
24752: PPUSH
24753: CALL_OW 1
24757: ST_TO_ADDR
// tmp := 1 ;
24758: LD_ADDR_VAR 0 2
24762: PUSH
24763: LD_STRING 1
24765: ST_TO_ADDR
// end ; normal := normal & tmp ;
24766: LD_ADDR_VAR 0 3
24770: PUSH
24771: LD_VAR 0 3
24775: PUSH
24776: LD_VAR 0 2
24780: STR
24781: ST_TO_ADDR
// end ;
24782: GO 24682
24784: POP
24785: POP
// for i = 1 to hardcoreCounter do
24786: LD_ADDR_VAR 0 5
24790: PUSH
24791: DOUBLE
24792: LD_INT 1
24794: DEC
24795: ST_TO_ADDR
24796: LD_EXP 71
24800: PUSH
24801: FOR_TO
24802: IFFALSE 24907
// begin tmp := 0 ;
24804: LD_ADDR_VAR 0 2
24808: PUSH
24809: LD_STRING 0
24811: ST_TO_ADDR
// if result [ 2 ] then
24812: LD_VAR 0 1
24816: PUSH
24817: LD_INT 2
24819: ARRAY
24820: IFFALSE 24889
// if result [ 2 ] [ 1 ] = 100 + i then
24822: LD_VAR 0 1
24826: PUSH
24827: LD_INT 2
24829: ARRAY
24830: PUSH
24831: LD_INT 1
24833: ARRAY
24834: PUSH
24835: LD_INT 100
24837: PUSH
24838: LD_VAR 0 5
24842: PLUS
24843: EQUAL
24844: IFFALSE 24889
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24846: LD_ADDR_VAR 0 1
24850: PUSH
24851: LD_VAR 0 1
24855: PPUSH
24856: LD_INT 2
24858: PPUSH
24859: LD_VAR 0 1
24863: PUSH
24864: LD_INT 2
24866: ARRAY
24867: PPUSH
24868: LD_INT 1
24870: PPUSH
24871: CALL_OW 3
24875: PPUSH
24876: CALL_OW 1
24880: ST_TO_ADDR
// tmp := 1 ;
24881: LD_ADDR_VAR 0 2
24885: PUSH
24886: LD_STRING 1
24888: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24889: LD_ADDR_VAR 0 4
24893: PUSH
24894: LD_VAR 0 4
24898: PUSH
24899: LD_VAR 0 2
24903: STR
24904: ST_TO_ADDR
// end ;
24905: GO 24801
24907: POP
24908: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24909: LD_STRING getStreamItemsFromMission("
24911: PUSH
24912: LD_VAR 0 3
24916: STR
24917: PUSH
24918: LD_STRING ","
24920: STR
24921: PUSH
24922: LD_VAR 0 4
24926: STR
24927: PUSH
24928: LD_STRING ")
24930: STR
24931: PPUSH
24932: CALL_OW 559
// end else
24936: GO 24945
// ToLua ( getStreamItemsFromMission("","") ) ;
24938: LD_STRING getStreamItemsFromMission("","")
24940: PPUSH
24941: CALL_OW 559
// end ;
24945: LD_VAR 0 1
24949: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24950: LD_EXP 69
24954: PUSH
24955: LD_EXP 74
24959: AND
24960: IFFALSE 25084
24962: GO 24964
24964: DISABLE
24965: LD_INT 0
24967: PPUSH
24968: PPUSH
// begin enable ;
24969: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24970: LD_ADDR_VAR 0 2
24974: PUSH
24975: LD_INT 22
24977: PUSH
24978: LD_OWVAR 2
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 2
24989: PUSH
24990: LD_INT 34
24992: PUSH
24993: LD_INT 7
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 34
25002: PUSH
25003: LD_INT 45
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 34
25012: PUSH
25013: LD_INT 28
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 34
25022: PUSH
25023: LD_INT 47
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PPUSH
25041: CALL_OW 69
25045: ST_TO_ADDR
// if not tmp then
25046: LD_VAR 0 2
25050: NOT
25051: IFFALSE 25055
// exit ;
25053: GO 25084
// for i in tmp do
25055: LD_ADDR_VAR 0 1
25059: PUSH
25060: LD_VAR 0 2
25064: PUSH
25065: FOR_IN
25066: IFFALSE 25082
// begin SetLives ( i , 0 ) ;
25068: LD_VAR 0 1
25072: PPUSH
25073: LD_INT 0
25075: PPUSH
25076: CALL_OW 234
// end ;
25080: GO 25065
25082: POP
25083: POP
// end ;
25084: PPOPN 2
25086: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25087: LD_EXP 69
25091: PUSH
25092: LD_EXP 75
25096: AND
25097: IFFALSE 25181
25099: GO 25101
25101: DISABLE
25102: LD_INT 0
25104: PPUSH
25105: PPUSH
// begin enable ;
25106: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25107: LD_ADDR_VAR 0 2
25111: PUSH
25112: LD_INT 22
25114: PUSH
25115: LD_OWVAR 2
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 32
25126: PUSH
25127: LD_INT 3
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PPUSH
25138: CALL_OW 69
25142: ST_TO_ADDR
// if not tmp then
25143: LD_VAR 0 2
25147: NOT
25148: IFFALSE 25152
// exit ;
25150: GO 25181
// for i in tmp do
25152: LD_ADDR_VAR 0 1
25156: PUSH
25157: LD_VAR 0 2
25161: PUSH
25162: FOR_IN
25163: IFFALSE 25179
// begin SetLives ( i , 0 ) ;
25165: LD_VAR 0 1
25169: PPUSH
25170: LD_INT 0
25172: PPUSH
25173: CALL_OW 234
// end ;
25177: GO 25162
25179: POP
25180: POP
// end ;
25181: PPOPN 2
25183: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25184: LD_EXP 69
25188: PUSH
25189: LD_EXP 72
25193: AND
25194: IFFALSE 25287
25196: GO 25198
25198: DISABLE
25199: LD_INT 0
25201: PPUSH
// begin enable ;
25202: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25203: LD_ADDR_VAR 0 1
25207: PUSH
25208: LD_INT 22
25210: PUSH
25211: LD_OWVAR 2
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 2
25222: PUSH
25223: LD_INT 25
25225: PUSH
25226: LD_INT 5
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 25
25235: PUSH
25236: LD_INT 9
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 25
25245: PUSH
25246: LD_INT 8
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PPUSH
25263: CALL_OW 69
25267: PUSH
25268: FOR_IN
25269: IFFALSE 25285
// begin SetClass ( i , 1 ) ;
25271: LD_VAR 0 1
25275: PPUSH
25276: LD_INT 1
25278: PPUSH
25279: CALL_OW 336
// end ;
25283: GO 25268
25285: POP
25286: POP
// end ;
25287: PPOPN 1
25289: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25290: LD_EXP 69
25294: PUSH
25295: LD_EXP 73
25299: AND
25300: PUSH
25301: LD_OWVAR 65
25305: PUSH
25306: LD_INT 7
25308: LESS
25309: AND
25310: IFFALSE 25324
25312: GO 25314
25314: DISABLE
// begin enable ;
25315: ENABLE
// game_speed := 7 ;
25316: LD_ADDR_OWVAR 65
25320: PUSH
25321: LD_INT 7
25323: ST_TO_ADDR
// end ;
25324: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25325: LD_EXP 69
25329: PUSH
25330: LD_EXP 76
25334: AND
25335: IFFALSE 25537
25337: GO 25339
25339: DISABLE
25340: LD_INT 0
25342: PPUSH
25343: PPUSH
25344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25345: LD_ADDR_VAR 0 3
25349: PUSH
25350: LD_INT 81
25352: PUSH
25353: LD_OWVAR 2
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 21
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PPUSH
25376: CALL_OW 69
25380: ST_TO_ADDR
// if not tmp then
25381: LD_VAR 0 3
25385: NOT
25386: IFFALSE 25390
// exit ;
25388: GO 25537
// if tmp > 5 then
25390: LD_VAR 0 3
25394: PUSH
25395: LD_INT 5
25397: GREATER
25398: IFFALSE 25410
// k := 5 else
25400: LD_ADDR_VAR 0 2
25404: PUSH
25405: LD_INT 5
25407: ST_TO_ADDR
25408: GO 25420
// k := tmp ;
25410: LD_ADDR_VAR 0 2
25414: PUSH
25415: LD_VAR 0 3
25419: ST_TO_ADDR
// for i := 1 to k do
25420: LD_ADDR_VAR 0 1
25424: PUSH
25425: DOUBLE
25426: LD_INT 1
25428: DEC
25429: ST_TO_ADDR
25430: LD_VAR 0 2
25434: PUSH
25435: FOR_TO
25436: IFFALSE 25535
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25438: LD_VAR 0 3
25442: PUSH
25443: LD_VAR 0 1
25447: ARRAY
25448: PPUSH
25449: LD_VAR 0 1
25453: PUSH
25454: LD_INT 4
25456: MOD
25457: PUSH
25458: LD_INT 1
25460: PLUS
25461: PPUSH
25462: CALL_OW 259
25466: PUSH
25467: LD_INT 10
25469: LESS
25470: IFFALSE 25533
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25472: LD_VAR 0 3
25476: PUSH
25477: LD_VAR 0 1
25481: ARRAY
25482: PPUSH
25483: LD_VAR 0 1
25487: PUSH
25488: LD_INT 4
25490: MOD
25491: PUSH
25492: LD_INT 1
25494: PLUS
25495: PPUSH
25496: LD_VAR 0 3
25500: PUSH
25501: LD_VAR 0 1
25505: ARRAY
25506: PPUSH
25507: LD_VAR 0 1
25511: PUSH
25512: LD_INT 4
25514: MOD
25515: PUSH
25516: LD_INT 1
25518: PLUS
25519: PPUSH
25520: CALL_OW 259
25524: PUSH
25525: LD_INT 1
25527: PLUS
25528: PPUSH
25529: CALL_OW 237
25533: GO 25435
25535: POP
25536: POP
// end ;
25537: PPOPN 3
25539: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25540: LD_EXP 69
25544: PUSH
25545: LD_EXP 77
25549: AND
25550: IFFALSE 25570
25552: GO 25554
25554: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25555: LD_INT 4
25557: PPUSH
25558: LD_OWVAR 2
25562: PPUSH
25563: LD_INT 0
25565: PPUSH
25566: CALL_OW 324
25570: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25571: LD_EXP 69
25575: PUSH
25576: LD_EXP 106
25580: AND
25581: IFFALSE 25601
25583: GO 25585
25585: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25586: LD_INT 19
25588: PPUSH
25589: LD_OWVAR 2
25593: PPUSH
25594: LD_INT 0
25596: PPUSH
25597: CALL_OW 324
25601: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25602: LD_EXP 69
25606: PUSH
25607: LD_EXP 78
25611: AND
25612: IFFALSE 25714
25614: GO 25616
25616: DISABLE
25617: LD_INT 0
25619: PPUSH
25620: PPUSH
// begin enable ;
25621: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25622: LD_ADDR_VAR 0 2
25626: PUSH
25627: LD_INT 22
25629: PUSH
25630: LD_OWVAR 2
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 2
25641: PUSH
25642: LD_INT 34
25644: PUSH
25645: LD_INT 11
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 34
25654: PUSH
25655: LD_INT 30
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: LIST
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PPUSH
25671: CALL_OW 69
25675: ST_TO_ADDR
// if not tmp then
25676: LD_VAR 0 2
25680: NOT
25681: IFFALSE 25685
// exit ;
25683: GO 25714
// for i in tmp do
25685: LD_ADDR_VAR 0 1
25689: PUSH
25690: LD_VAR 0 2
25694: PUSH
25695: FOR_IN
25696: IFFALSE 25712
// begin SetLives ( i , 0 ) ;
25698: LD_VAR 0 1
25702: PPUSH
25703: LD_INT 0
25705: PPUSH
25706: CALL_OW 234
// end ;
25710: GO 25695
25712: POP
25713: POP
// end ;
25714: PPOPN 2
25716: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25717: LD_EXP 69
25721: PUSH
25722: LD_EXP 79
25726: AND
25727: IFFALSE 25747
25729: GO 25731
25731: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25732: LD_INT 32
25734: PPUSH
25735: LD_OWVAR 2
25739: PPUSH
25740: LD_INT 0
25742: PPUSH
25743: CALL_OW 324
25747: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25748: LD_EXP 69
25752: PUSH
25753: LD_EXP 80
25757: AND
25758: IFFALSE 25939
25760: GO 25762
25762: DISABLE
25763: LD_INT 0
25765: PPUSH
25766: PPUSH
25767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25768: LD_ADDR_VAR 0 2
25772: PUSH
25773: LD_INT 22
25775: PUSH
25776: LD_OWVAR 2
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 33
25787: PUSH
25788: LD_INT 3
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PPUSH
25799: CALL_OW 69
25803: ST_TO_ADDR
// if not tmp then
25804: LD_VAR 0 2
25808: NOT
25809: IFFALSE 25813
// exit ;
25811: GO 25939
// side := 0 ;
25813: LD_ADDR_VAR 0 3
25817: PUSH
25818: LD_INT 0
25820: ST_TO_ADDR
// for i := 1 to 8 do
25821: LD_ADDR_VAR 0 1
25825: PUSH
25826: DOUBLE
25827: LD_INT 1
25829: DEC
25830: ST_TO_ADDR
25831: LD_INT 8
25833: PUSH
25834: FOR_TO
25835: IFFALSE 25883
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25837: LD_OWVAR 2
25841: PUSH
25842: LD_VAR 0 1
25846: NONEQUAL
25847: PUSH
25848: LD_OWVAR 2
25852: PPUSH
25853: LD_VAR 0 1
25857: PPUSH
25858: CALL_OW 81
25862: PUSH
25863: LD_INT 2
25865: EQUAL
25866: AND
25867: IFFALSE 25881
// begin side := i ;
25869: LD_ADDR_VAR 0 3
25873: PUSH
25874: LD_VAR 0 1
25878: ST_TO_ADDR
// break ;
25879: GO 25883
// end ;
25881: GO 25834
25883: POP
25884: POP
// if not side then
25885: LD_VAR 0 3
25889: NOT
25890: IFFALSE 25894
// exit ;
25892: GO 25939
// for i := 1 to tmp do
25894: LD_ADDR_VAR 0 1
25898: PUSH
25899: DOUBLE
25900: LD_INT 1
25902: DEC
25903: ST_TO_ADDR
25904: LD_VAR 0 2
25908: PUSH
25909: FOR_TO
25910: IFFALSE 25937
// if Prob ( 60 ) then
25912: LD_INT 60
25914: PPUSH
25915: CALL_OW 13
25919: IFFALSE 25935
// SetSide ( i , side ) ;
25921: LD_VAR 0 1
25925: PPUSH
25926: LD_VAR 0 3
25930: PPUSH
25931: CALL_OW 235
25935: GO 25909
25937: POP
25938: POP
// end ;
25939: PPOPN 3
25941: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25942: LD_EXP 69
25946: PUSH
25947: LD_EXP 82
25951: AND
25952: IFFALSE 26071
25954: GO 25956
25956: DISABLE
25957: LD_INT 0
25959: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25960: LD_ADDR_VAR 0 1
25964: PUSH
25965: LD_INT 22
25967: PUSH
25968: LD_OWVAR 2
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 21
25979: PUSH
25980: LD_INT 1
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 3
25989: PUSH
25990: LD_INT 23
25992: PUSH
25993: LD_INT 0
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: LIST
26008: PPUSH
26009: CALL_OW 69
26013: PUSH
26014: FOR_IN
26015: IFFALSE 26069
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26017: LD_VAR 0 1
26021: PPUSH
26022: CALL_OW 257
26026: PUSH
26027: LD_INT 1
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: LD_INT 3
26035: PUSH
26036: LD_INT 4
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: IN
26045: IFFALSE 26067
// SetClass ( un , rand ( 1 , 4 ) ) ;
26047: LD_VAR 0 1
26051: PPUSH
26052: LD_INT 1
26054: PPUSH
26055: LD_INT 4
26057: PPUSH
26058: CALL_OW 12
26062: PPUSH
26063: CALL_OW 336
26067: GO 26014
26069: POP
26070: POP
// end ;
26071: PPOPN 1
26073: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26074: LD_EXP 69
26078: PUSH
26079: LD_EXP 81
26083: AND
26084: IFFALSE 26163
26086: GO 26088
26088: DISABLE
26089: LD_INT 0
26091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26092: LD_ADDR_VAR 0 1
26096: PUSH
26097: LD_INT 22
26099: PUSH
26100: LD_OWVAR 2
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 21
26111: PUSH
26112: LD_INT 3
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PPUSH
26123: CALL_OW 69
26127: ST_TO_ADDR
// if not tmp then
26128: LD_VAR 0 1
26132: NOT
26133: IFFALSE 26137
// exit ;
26135: GO 26163
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26137: LD_VAR 0 1
26141: PUSH
26142: LD_INT 1
26144: PPUSH
26145: LD_VAR 0 1
26149: PPUSH
26150: CALL_OW 12
26154: ARRAY
26155: PPUSH
26156: LD_INT 100
26158: PPUSH
26159: CALL_OW 234
// end ;
26163: PPOPN 1
26165: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26166: LD_EXP 69
26170: PUSH
26171: LD_EXP 83
26175: AND
26176: IFFALSE 26274
26178: GO 26180
26180: DISABLE
26181: LD_INT 0
26183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26184: LD_ADDR_VAR 0 1
26188: PUSH
26189: LD_INT 22
26191: PUSH
26192: LD_OWVAR 2
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 21
26203: PUSH
26204: LD_INT 1
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PPUSH
26215: CALL_OW 69
26219: ST_TO_ADDR
// if not tmp then
26220: LD_VAR 0 1
26224: NOT
26225: IFFALSE 26229
// exit ;
26227: GO 26274
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26229: LD_VAR 0 1
26233: PUSH
26234: LD_INT 1
26236: PPUSH
26237: LD_VAR 0 1
26241: PPUSH
26242: CALL_OW 12
26246: ARRAY
26247: PPUSH
26248: LD_INT 1
26250: PPUSH
26251: LD_INT 4
26253: PPUSH
26254: CALL_OW 12
26258: PPUSH
26259: LD_INT 3000
26261: PPUSH
26262: LD_INT 9000
26264: PPUSH
26265: CALL_OW 12
26269: PPUSH
26270: CALL_OW 492
// end ;
26274: PPOPN 1
26276: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26277: LD_EXP 69
26281: PUSH
26282: LD_EXP 84
26286: AND
26287: IFFALSE 26307
26289: GO 26291
26291: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26292: LD_INT 1
26294: PPUSH
26295: LD_OWVAR 2
26299: PPUSH
26300: LD_INT 0
26302: PPUSH
26303: CALL_OW 324
26307: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26308: LD_EXP 69
26312: PUSH
26313: LD_EXP 85
26317: AND
26318: IFFALSE 26401
26320: GO 26322
26322: DISABLE
26323: LD_INT 0
26325: PPUSH
26326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26327: LD_ADDR_VAR 0 2
26331: PUSH
26332: LD_INT 22
26334: PUSH
26335: LD_OWVAR 2
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 21
26346: PUSH
26347: LD_INT 3
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PPUSH
26358: CALL_OW 69
26362: ST_TO_ADDR
// if not tmp then
26363: LD_VAR 0 2
26367: NOT
26368: IFFALSE 26372
// exit ;
26370: GO 26401
// for i in tmp do
26372: LD_ADDR_VAR 0 1
26376: PUSH
26377: LD_VAR 0 2
26381: PUSH
26382: FOR_IN
26383: IFFALSE 26399
// SetBLevel ( i , 10 ) ;
26385: LD_VAR 0 1
26389: PPUSH
26390: LD_INT 10
26392: PPUSH
26393: CALL_OW 241
26397: GO 26382
26399: POP
26400: POP
// end ;
26401: PPOPN 2
26403: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26404: LD_EXP 69
26408: PUSH
26409: LD_EXP 86
26413: AND
26414: IFFALSE 26525
26416: GO 26418
26418: DISABLE
26419: LD_INT 0
26421: PPUSH
26422: PPUSH
26423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26424: LD_ADDR_VAR 0 3
26428: PUSH
26429: LD_INT 22
26431: PUSH
26432: LD_OWVAR 2
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 25
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PPUSH
26455: CALL_OW 69
26459: ST_TO_ADDR
// if not tmp then
26460: LD_VAR 0 3
26464: NOT
26465: IFFALSE 26469
// exit ;
26467: GO 26525
// un := tmp [ rand ( 1 , tmp ) ] ;
26469: LD_ADDR_VAR 0 2
26473: PUSH
26474: LD_VAR 0 3
26478: PUSH
26479: LD_INT 1
26481: PPUSH
26482: LD_VAR 0 3
26486: PPUSH
26487: CALL_OW 12
26491: ARRAY
26492: ST_TO_ADDR
// if Crawls ( un ) then
26493: LD_VAR 0 2
26497: PPUSH
26498: CALL_OW 318
26502: IFFALSE 26513
// ComWalk ( un ) ;
26504: LD_VAR 0 2
26508: PPUSH
26509: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26513: LD_VAR 0 2
26517: PPUSH
26518: LD_INT 5
26520: PPUSH
26521: CALL_OW 336
// end ;
26525: PPOPN 3
26527: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
26528: LD_EXP 69
26532: PUSH
26533: LD_EXP 87
26537: AND
26538: PUSH
26539: LD_OWVAR 67
26543: PUSH
26544: LD_INT 3
26546: LESS
26547: AND
26548: IFFALSE 26567
26550: GO 26552
26552: DISABLE
// Difficulty := Difficulty + 1 ;
26553: LD_ADDR_OWVAR 67
26557: PUSH
26558: LD_OWVAR 67
26562: PUSH
26563: LD_INT 1
26565: PLUS
26566: ST_TO_ADDR
26567: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26568: LD_EXP 69
26572: PUSH
26573: LD_EXP 88
26577: AND
26578: IFFALSE 26681
26580: GO 26582
26582: DISABLE
26583: LD_INT 0
26585: PPUSH
// begin for i := 1 to 5 do
26586: LD_ADDR_VAR 0 1
26590: PUSH
26591: DOUBLE
26592: LD_INT 1
26594: DEC
26595: ST_TO_ADDR
26596: LD_INT 5
26598: PUSH
26599: FOR_TO
26600: IFFALSE 26679
// begin uc_nation := nation_nature ;
26602: LD_ADDR_OWVAR 21
26606: PUSH
26607: LD_INT 0
26609: ST_TO_ADDR
// uc_side := 0 ;
26610: LD_ADDR_OWVAR 20
26614: PUSH
26615: LD_INT 0
26617: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26618: LD_ADDR_OWVAR 29
26622: PUSH
26623: LD_INT 12
26625: PUSH
26626: LD_INT 12
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: ST_TO_ADDR
// hc_agressivity := 20 ;
26633: LD_ADDR_OWVAR 35
26637: PUSH
26638: LD_INT 20
26640: ST_TO_ADDR
// hc_class := class_tiger ;
26641: LD_ADDR_OWVAR 28
26645: PUSH
26646: LD_INT 14
26648: ST_TO_ADDR
// hc_gallery :=  ;
26649: LD_ADDR_OWVAR 33
26653: PUSH
26654: LD_STRING 
26656: ST_TO_ADDR
// hc_name :=  ;
26657: LD_ADDR_OWVAR 26
26661: PUSH
26662: LD_STRING 
26664: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26665: CALL_OW 44
26669: PPUSH
26670: LD_INT 0
26672: PPUSH
26673: CALL_OW 51
// end ;
26677: GO 26599
26679: POP
26680: POP
// end ;
26681: PPOPN 1
26683: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26684: LD_EXP 69
26688: PUSH
26689: LD_EXP 89
26693: AND
26694: IFFALSE 26703
26696: GO 26698
26698: DISABLE
// StreamSibBomb ;
26699: CALL 26704 0 0
26703: END
// export function StreamSibBomb ; var i , x , y ; begin
26704: LD_INT 0
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
// result := false ;
26710: LD_ADDR_VAR 0 1
26714: PUSH
26715: LD_INT 0
26717: ST_TO_ADDR
// for i := 1 to 16 do
26718: LD_ADDR_VAR 0 2
26722: PUSH
26723: DOUBLE
26724: LD_INT 1
26726: DEC
26727: ST_TO_ADDR
26728: LD_INT 16
26730: PUSH
26731: FOR_TO
26732: IFFALSE 26931
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26734: LD_ADDR_VAR 0 3
26738: PUSH
26739: LD_INT 10
26741: PUSH
26742: LD_INT 20
26744: PUSH
26745: LD_INT 30
26747: PUSH
26748: LD_INT 40
26750: PUSH
26751: LD_INT 50
26753: PUSH
26754: LD_INT 60
26756: PUSH
26757: LD_INT 70
26759: PUSH
26760: LD_INT 80
26762: PUSH
26763: LD_INT 90
26765: PUSH
26766: LD_INT 100
26768: PUSH
26769: LD_INT 110
26771: PUSH
26772: LD_INT 120
26774: PUSH
26775: LD_INT 130
26777: PUSH
26778: LD_INT 140
26780: PUSH
26781: LD_INT 150
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: PPUSH
26804: LD_INT 15
26806: PPUSH
26807: CALL_OW 12
26811: ARRAY
26812: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26813: LD_ADDR_VAR 0 4
26817: PUSH
26818: LD_INT 10
26820: PUSH
26821: LD_INT 20
26823: PUSH
26824: LD_INT 30
26826: PUSH
26827: LD_INT 40
26829: PUSH
26830: LD_INT 50
26832: PUSH
26833: LD_INT 60
26835: PUSH
26836: LD_INT 70
26838: PUSH
26839: LD_INT 80
26841: PUSH
26842: LD_INT 90
26844: PUSH
26845: LD_INT 100
26847: PUSH
26848: LD_INT 110
26850: PUSH
26851: LD_INT 120
26853: PUSH
26854: LD_INT 130
26856: PUSH
26857: LD_INT 140
26859: PUSH
26860: LD_INT 150
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 1
26882: PPUSH
26883: LD_INT 15
26885: PPUSH
26886: CALL_OW 12
26890: ARRAY
26891: ST_TO_ADDR
// if ValidHex ( x , y ) then
26892: LD_VAR 0 3
26896: PPUSH
26897: LD_VAR 0 4
26901: PPUSH
26902: CALL_OW 488
26906: IFFALSE 26929
// begin result := [ x , y ] ;
26908: LD_ADDR_VAR 0 1
26912: PUSH
26913: LD_VAR 0 3
26917: PUSH
26918: LD_VAR 0 4
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: ST_TO_ADDR
// break ;
26927: GO 26931
// end ; end ;
26929: GO 26731
26931: POP
26932: POP
// if result then
26933: LD_VAR 0 1
26937: IFFALSE 26997
// begin ToLua ( playSibBomb() ) ;
26939: LD_STRING playSibBomb()
26941: PPUSH
26942: CALL_OW 559
// wait ( 0 0$14 ) ;
26946: LD_INT 490
26948: PPUSH
26949: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26953: LD_VAR 0 1
26957: PUSH
26958: LD_INT 1
26960: ARRAY
26961: PPUSH
26962: LD_VAR 0 1
26966: PUSH
26967: LD_INT 2
26969: ARRAY
26970: PPUSH
26971: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26975: LD_VAR 0 1
26979: PUSH
26980: LD_INT 1
26982: ARRAY
26983: PPUSH
26984: LD_VAR 0 1
26988: PUSH
26989: LD_INT 2
26991: ARRAY
26992: PPUSH
26993: CALL_OW 429
// end ; end ;
26997: LD_VAR 0 1
27001: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27002: LD_EXP 69
27006: PUSH
27007: LD_EXP 91
27011: AND
27012: IFFALSE 27024
27014: GO 27016
27016: DISABLE
// YouLost (  ) ;
27017: LD_STRING 
27019: PPUSH
27020: CALL_OW 104
27024: END
// every 0 0$1 trigger StreamModeActive and sFog do
27025: LD_EXP 69
27029: PUSH
27030: LD_EXP 90
27034: AND
27035: IFFALSE 27049
27037: GO 27039
27039: DISABLE
// FogOff ( your_side ) ;
27040: LD_OWVAR 2
27044: PPUSH
27045: CALL_OW 344
27049: END
// every 0 0$1 trigger StreamModeActive and sSun do
27050: LD_EXP 69
27054: PUSH
27055: LD_EXP 92
27059: AND
27060: IFFALSE 27088
27062: GO 27064
27064: DISABLE
// begin solar_recharge_percent := 0 ;
27065: LD_ADDR_OWVAR 79
27069: PUSH
27070: LD_INT 0
27072: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27073: LD_INT 10500
27075: PPUSH
27076: CALL_OW 67
// solar_recharge_percent := 100 ;
27080: LD_ADDR_OWVAR 79
27084: PUSH
27085: LD_INT 100
27087: ST_TO_ADDR
// end ;
27088: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27089: LD_EXP 69
27093: PUSH
27094: LD_EXP 93
27098: AND
27099: IFFALSE 27338
27101: GO 27103
27103: DISABLE
27104: LD_INT 0
27106: PPUSH
27107: PPUSH
27108: PPUSH
// begin tmp := [ ] ;
27109: LD_ADDR_VAR 0 3
27113: PUSH
27114: EMPTY
27115: ST_TO_ADDR
// for i := 1 to 6 do
27116: LD_ADDR_VAR 0 1
27120: PUSH
27121: DOUBLE
27122: LD_INT 1
27124: DEC
27125: ST_TO_ADDR
27126: LD_INT 6
27128: PUSH
27129: FOR_TO
27130: IFFALSE 27235
// begin uc_nation := nation_nature ;
27132: LD_ADDR_OWVAR 21
27136: PUSH
27137: LD_INT 0
27139: ST_TO_ADDR
// uc_side := 0 ;
27140: LD_ADDR_OWVAR 20
27144: PUSH
27145: LD_INT 0
27147: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27148: LD_ADDR_OWVAR 29
27152: PUSH
27153: LD_INT 12
27155: PUSH
27156: LD_INT 12
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: ST_TO_ADDR
// hc_agressivity := 20 ;
27163: LD_ADDR_OWVAR 35
27167: PUSH
27168: LD_INT 20
27170: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27171: LD_ADDR_OWVAR 28
27175: PUSH
27176: LD_INT 17
27178: ST_TO_ADDR
// hc_gallery :=  ;
27179: LD_ADDR_OWVAR 33
27183: PUSH
27184: LD_STRING 
27186: ST_TO_ADDR
// hc_name :=  ;
27187: LD_ADDR_OWVAR 26
27191: PUSH
27192: LD_STRING 
27194: ST_TO_ADDR
// un := CreateHuman ;
27195: LD_ADDR_VAR 0 2
27199: PUSH
27200: CALL_OW 44
27204: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27205: LD_VAR 0 2
27209: PPUSH
27210: LD_INT 1
27212: PPUSH
27213: CALL_OW 51
// tmp := tmp ^ un ;
27217: LD_ADDR_VAR 0 3
27221: PUSH
27222: LD_VAR 0 3
27226: PUSH
27227: LD_VAR 0 2
27231: ADD
27232: ST_TO_ADDR
// end ;
27233: GO 27129
27235: POP
27236: POP
// repeat wait ( 0 0$1 ) ;
27237: LD_INT 35
27239: PPUSH
27240: CALL_OW 67
// for un in tmp do
27244: LD_ADDR_VAR 0 2
27248: PUSH
27249: LD_VAR 0 3
27253: PUSH
27254: FOR_IN
27255: IFFALSE 27329
// begin if IsDead ( un ) then
27257: LD_VAR 0 2
27261: PPUSH
27262: CALL_OW 301
27266: IFFALSE 27286
// begin tmp := tmp diff un ;
27268: LD_ADDR_VAR 0 3
27272: PUSH
27273: LD_VAR 0 3
27277: PUSH
27278: LD_VAR 0 2
27282: DIFF
27283: ST_TO_ADDR
// continue ;
27284: GO 27254
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27286: LD_VAR 0 2
27290: PPUSH
27291: LD_INT 3
27293: PUSH
27294: LD_INT 22
27296: PUSH
27297: LD_INT 0
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PPUSH
27308: CALL_OW 69
27312: PPUSH
27313: LD_VAR 0 2
27317: PPUSH
27318: CALL_OW 74
27322: PPUSH
27323: CALL_OW 115
// end ;
27327: GO 27254
27329: POP
27330: POP
// until not tmp ;
27331: LD_VAR 0 3
27335: NOT
27336: IFFALSE 27237
// end ;
27338: PPOPN 3
27340: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27341: LD_EXP 69
27345: PUSH
27346: LD_EXP 94
27350: AND
27351: IFFALSE 27405
27353: GO 27355
27355: DISABLE
// begin ToLua ( displayTroll(); ) ;
27356: LD_STRING displayTroll();
27358: PPUSH
27359: CALL_OW 559
// wait ( 3 3$00 ) ;
27363: LD_INT 6300
27365: PPUSH
27366: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27370: LD_STRING hideTroll();
27372: PPUSH
27373: CALL_OW 559
// wait ( 1 1$00 ) ;
27377: LD_INT 2100
27379: PPUSH
27380: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27384: LD_STRING displayTroll();
27386: PPUSH
27387: CALL_OW 559
// wait ( 1 1$00 ) ;
27391: LD_INT 2100
27393: PPUSH
27394: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27398: LD_STRING hideTroll();
27400: PPUSH
27401: CALL_OW 559
// end ;
27405: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27406: LD_EXP 69
27410: PUSH
27411: LD_EXP 95
27415: AND
27416: IFFALSE 27479
27418: GO 27420
27420: DISABLE
27421: LD_INT 0
27423: PPUSH
// begin p := 0 ;
27424: LD_ADDR_VAR 0 1
27428: PUSH
27429: LD_INT 0
27431: ST_TO_ADDR
// repeat game_speed := 1 ;
27432: LD_ADDR_OWVAR 65
27436: PUSH
27437: LD_INT 1
27439: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27440: LD_INT 35
27442: PPUSH
27443: CALL_OW 67
// p := p + 1 ;
27447: LD_ADDR_VAR 0 1
27451: PUSH
27452: LD_VAR 0 1
27456: PUSH
27457: LD_INT 1
27459: PLUS
27460: ST_TO_ADDR
// until p >= 60 ;
27461: LD_VAR 0 1
27465: PUSH
27466: LD_INT 60
27468: GREATEREQUAL
27469: IFFALSE 27432
// game_speed := 4 ;
27471: LD_ADDR_OWVAR 65
27475: PUSH
27476: LD_INT 4
27478: ST_TO_ADDR
// end ;
27479: PPOPN 1
27481: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27482: LD_EXP 69
27486: PUSH
27487: LD_EXP 96
27491: AND
27492: IFFALSE 27638
27494: GO 27496
27496: DISABLE
27497: LD_INT 0
27499: PPUSH
27500: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27501: LD_ADDR_VAR 0 1
27505: PUSH
27506: LD_INT 22
27508: PUSH
27509: LD_OWVAR 2
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 2
27520: PUSH
27521: LD_INT 30
27523: PUSH
27524: LD_INT 0
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 30
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: LIST
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PPUSH
27550: CALL_OW 69
27554: ST_TO_ADDR
// if not depot then
27555: LD_VAR 0 1
27559: NOT
27560: IFFALSE 27564
// exit ;
27562: GO 27638
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27564: LD_ADDR_VAR 0 2
27568: PUSH
27569: LD_VAR 0 1
27573: PUSH
27574: LD_INT 1
27576: PPUSH
27577: LD_VAR 0 1
27581: PPUSH
27582: CALL_OW 12
27586: ARRAY
27587: PPUSH
27588: CALL_OW 274
27592: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27593: LD_VAR 0 2
27597: PPUSH
27598: LD_INT 1
27600: PPUSH
27601: LD_INT 0
27603: PPUSH
27604: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27608: LD_VAR 0 2
27612: PPUSH
27613: LD_INT 2
27615: PPUSH
27616: LD_INT 0
27618: PPUSH
27619: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27623: LD_VAR 0 2
27627: PPUSH
27628: LD_INT 3
27630: PPUSH
27631: LD_INT 0
27633: PPUSH
27634: CALL_OW 277
// end ;
27638: PPOPN 2
27640: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27641: LD_EXP 69
27645: PUSH
27646: LD_EXP 97
27650: AND
27651: IFFALSE 27748
27653: GO 27655
27655: DISABLE
27656: LD_INT 0
27658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27659: LD_ADDR_VAR 0 1
27663: PUSH
27664: LD_INT 22
27666: PUSH
27667: LD_OWVAR 2
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 21
27678: PUSH
27679: LD_INT 1
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 3
27688: PUSH
27689: LD_INT 23
27691: PUSH
27692: LD_INT 0
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: LIST
27707: PPUSH
27708: CALL_OW 69
27712: ST_TO_ADDR
// if not tmp then
27713: LD_VAR 0 1
27717: NOT
27718: IFFALSE 27722
// exit ;
27720: GO 27748
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27722: LD_VAR 0 1
27726: PUSH
27727: LD_INT 1
27729: PPUSH
27730: LD_VAR 0 1
27734: PPUSH
27735: CALL_OW 12
27739: ARRAY
27740: PPUSH
27741: LD_INT 200
27743: PPUSH
27744: CALL_OW 234
// end ;
27748: PPOPN 1
27750: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27751: LD_EXP 69
27755: PUSH
27756: LD_EXP 98
27760: AND
27761: IFFALSE 27840
27763: GO 27765
27765: DISABLE
27766: LD_INT 0
27768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27769: LD_ADDR_VAR 0 1
27773: PUSH
27774: LD_INT 22
27776: PUSH
27777: LD_OWVAR 2
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 21
27788: PUSH
27789: LD_INT 2
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PPUSH
27800: CALL_OW 69
27804: ST_TO_ADDR
// if not tmp then
27805: LD_VAR 0 1
27809: NOT
27810: IFFALSE 27814
// exit ;
27812: GO 27840
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27814: LD_VAR 0 1
27818: PUSH
27819: LD_INT 1
27821: PPUSH
27822: LD_VAR 0 1
27826: PPUSH
27827: CALL_OW 12
27831: ARRAY
27832: PPUSH
27833: LD_INT 60
27835: PPUSH
27836: CALL_OW 234
// end ;
27840: PPOPN 1
27842: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27843: LD_EXP 69
27847: PUSH
27848: LD_EXP 99
27852: AND
27853: IFFALSE 27952
27855: GO 27857
27857: DISABLE
27858: LD_INT 0
27860: PPUSH
27861: PPUSH
// begin enable ;
27862: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27863: LD_ADDR_VAR 0 1
27867: PUSH
27868: LD_INT 22
27870: PUSH
27871: LD_OWVAR 2
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 61
27882: PUSH
27883: EMPTY
27884: LIST
27885: PUSH
27886: LD_INT 33
27888: PUSH
27889: LD_INT 2
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: LIST
27900: PPUSH
27901: CALL_OW 69
27905: ST_TO_ADDR
// if not tmp then
27906: LD_VAR 0 1
27910: NOT
27911: IFFALSE 27915
// exit ;
27913: GO 27952
// for i in tmp do
27915: LD_ADDR_VAR 0 2
27919: PUSH
27920: LD_VAR 0 1
27924: PUSH
27925: FOR_IN
27926: IFFALSE 27950
// if IsControledBy ( i ) then
27928: LD_VAR 0 2
27932: PPUSH
27933: CALL_OW 312
27937: IFFALSE 27948
// ComUnlink ( i ) ;
27939: LD_VAR 0 2
27943: PPUSH
27944: CALL_OW 136
27948: GO 27925
27950: POP
27951: POP
// end ;
27952: PPOPN 2
27954: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27955: LD_EXP 69
27959: PUSH
27960: LD_EXP 100
27964: AND
27965: IFFALSE 28105
27967: GO 27969
27969: DISABLE
27970: LD_INT 0
27972: PPUSH
27973: PPUSH
// begin ToLua ( displayPowell(); ) ;
27974: LD_STRING displayPowell();
27976: PPUSH
27977: CALL_OW 559
// uc_side := 0 ;
27981: LD_ADDR_OWVAR 20
27985: PUSH
27986: LD_INT 0
27988: ST_TO_ADDR
// uc_nation := 2 ;
27989: LD_ADDR_OWVAR 21
27993: PUSH
27994: LD_INT 2
27996: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27997: LD_ADDR_OWVAR 37
28001: PUSH
28002: LD_INT 14
28004: ST_TO_ADDR
// vc_engine := engine_siberite ;
28005: LD_ADDR_OWVAR 39
28009: PUSH
28010: LD_INT 3
28012: ST_TO_ADDR
// vc_control := control_apeman ;
28013: LD_ADDR_OWVAR 38
28017: PUSH
28018: LD_INT 5
28020: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28021: LD_ADDR_OWVAR 40
28025: PUSH
28026: LD_INT 29
28028: ST_TO_ADDR
// un := CreateVehicle ;
28029: LD_ADDR_VAR 0 2
28033: PUSH
28034: CALL_OW 45
28038: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28039: LD_VAR 0 2
28043: PPUSH
28044: LD_INT 1
28046: PPUSH
28047: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28051: LD_INT 35
28053: PPUSH
28054: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28058: LD_VAR 0 2
28062: PPUSH
28063: LD_INT 22
28065: PUSH
28066: LD_OWVAR 2
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PPUSH
28075: CALL_OW 69
28079: PPUSH
28080: LD_VAR 0 2
28084: PPUSH
28085: CALL_OW 74
28089: PPUSH
28090: CALL_OW 115
// until IsDead ( un ) ;
28094: LD_VAR 0 2
28098: PPUSH
28099: CALL_OW 301
28103: IFFALSE 28051
// end ;
28105: PPOPN 2
28107: END
// every 0 0$1 trigger StreamModeActive and sStu do
28108: LD_EXP 69
28112: PUSH
28113: LD_EXP 108
28117: AND
28118: IFFALSE 28134
28120: GO 28122
28122: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28123: LD_STRING displayStucuk();
28125: PPUSH
28126: CALL_OW 559
// ResetFog ;
28130: CALL_OW 335
// end ;
28134: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28135: LD_EXP 69
28139: PUSH
28140: LD_EXP 101
28144: AND
28145: IFFALSE 28286
28147: GO 28149
28149: DISABLE
28150: LD_INT 0
28152: PPUSH
28153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28154: LD_ADDR_VAR 0 2
28158: PUSH
28159: LD_INT 22
28161: PUSH
28162: LD_OWVAR 2
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 21
28173: PUSH
28174: LD_INT 1
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PPUSH
28185: CALL_OW 69
28189: ST_TO_ADDR
// if not tmp then
28190: LD_VAR 0 2
28194: NOT
28195: IFFALSE 28199
// exit ;
28197: GO 28286
// un := tmp [ rand ( 1 , tmp ) ] ;
28199: LD_ADDR_VAR 0 1
28203: PUSH
28204: LD_VAR 0 2
28208: PUSH
28209: LD_INT 1
28211: PPUSH
28212: LD_VAR 0 2
28216: PPUSH
28217: CALL_OW 12
28221: ARRAY
28222: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28223: LD_VAR 0 1
28227: PPUSH
28228: LD_INT 0
28230: PPUSH
28231: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28235: LD_VAR 0 1
28239: PPUSH
28240: LD_OWVAR 3
28244: PUSH
28245: LD_VAR 0 1
28249: DIFF
28250: PPUSH
28251: LD_VAR 0 1
28255: PPUSH
28256: CALL_OW 74
28260: PPUSH
28261: CALL_OW 115
// wait ( 0 0$20 ) ;
28265: LD_INT 700
28267: PPUSH
28268: CALL_OW 67
// SetSide ( un , your_side ) ;
28272: LD_VAR 0 1
28276: PPUSH
28277: LD_OWVAR 2
28281: PPUSH
28282: CALL_OW 235
// end ;
28286: PPOPN 2
28288: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28289: LD_EXP 69
28293: PUSH
28294: LD_EXP 102
28298: AND
28299: IFFALSE 28405
28301: GO 28303
28303: DISABLE
28304: LD_INT 0
28306: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28307: LD_ADDR_VAR 0 1
28311: PUSH
28312: LD_INT 22
28314: PUSH
28315: LD_OWVAR 2
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 2
28326: PUSH
28327: LD_INT 30
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 30
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: LIST
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PPUSH
28356: CALL_OW 69
28360: ST_TO_ADDR
// if not depot then
28361: LD_VAR 0 1
28365: NOT
28366: IFFALSE 28370
// exit ;
28368: GO 28405
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28370: LD_VAR 0 1
28374: PUSH
28375: LD_INT 1
28377: ARRAY
28378: PPUSH
28379: CALL_OW 250
28383: PPUSH
28384: LD_VAR 0 1
28388: PUSH
28389: LD_INT 1
28391: ARRAY
28392: PPUSH
28393: CALL_OW 251
28397: PPUSH
28398: LD_INT 70
28400: PPUSH
28401: CALL_OW 495
// end ;
28405: PPOPN 1
28407: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28408: LD_EXP 69
28412: PUSH
28413: LD_EXP 103
28417: AND
28418: IFFALSE 28629
28420: GO 28422
28422: DISABLE
28423: LD_INT 0
28425: PPUSH
28426: PPUSH
28427: PPUSH
28428: PPUSH
28429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28430: LD_ADDR_VAR 0 5
28434: PUSH
28435: LD_INT 22
28437: PUSH
28438: LD_OWVAR 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 21
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 69
28465: ST_TO_ADDR
// if not tmp then
28466: LD_VAR 0 5
28470: NOT
28471: IFFALSE 28475
// exit ;
28473: GO 28629
// for i in tmp do
28475: LD_ADDR_VAR 0 1
28479: PUSH
28480: LD_VAR 0 5
28484: PUSH
28485: FOR_IN
28486: IFFALSE 28627
// begin d := rand ( 0 , 5 ) ;
28488: LD_ADDR_VAR 0 4
28492: PUSH
28493: LD_INT 0
28495: PPUSH
28496: LD_INT 5
28498: PPUSH
28499: CALL_OW 12
28503: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28504: LD_ADDR_VAR 0 2
28508: PUSH
28509: LD_VAR 0 1
28513: PPUSH
28514: CALL_OW 250
28518: PPUSH
28519: LD_VAR 0 4
28523: PPUSH
28524: LD_INT 3
28526: PPUSH
28527: LD_INT 12
28529: PPUSH
28530: CALL_OW 12
28534: PPUSH
28535: CALL_OW 272
28539: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28540: LD_ADDR_VAR 0 3
28544: PUSH
28545: LD_VAR 0 1
28549: PPUSH
28550: CALL_OW 251
28554: PPUSH
28555: LD_VAR 0 4
28559: PPUSH
28560: LD_INT 3
28562: PPUSH
28563: LD_INT 12
28565: PPUSH
28566: CALL_OW 12
28570: PPUSH
28571: CALL_OW 273
28575: ST_TO_ADDR
// if ValidHex ( x , y ) then
28576: LD_VAR 0 2
28580: PPUSH
28581: LD_VAR 0 3
28585: PPUSH
28586: CALL_OW 488
28590: IFFALSE 28625
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28592: LD_VAR 0 1
28596: PPUSH
28597: LD_VAR 0 2
28601: PPUSH
28602: LD_VAR 0 3
28606: PPUSH
28607: LD_INT 3
28609: PPUSH
28610: LD_INT 6
28612: PPUSH
28613: CALL_OW 12
28617: PPUSH
28618: LD_INT 1
28620: PPUSH
28621: CALL_OW 483
// end ;
28625: GO 28485
28627: POP
28628: POP
// end ;
28629: PPOPN 5
28631: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28632: LD_EXP 69
28636: PUSH
28637: LD_EXP 104
28641: AND
28642: IFFALSE 28736
28644: GO 28646
28646: DISABLE
28647: LD_INT 0
28649: PPUSH
28650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28651: LD_ADDR_VAR 0 2
28655: PUSH
28656: LD_INT 22
28658: PUSH
28659: LD_OWVAR 2
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 32
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 21
28680: PUSH
28681: LD_INT 2
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: LIST
28692: PPUSH
28693: CALL_OW 69
28697: ST_TO_ADDR
// if not tmp then
28698: LD_VAR 0 2
28702: NOT
28703: IFFALSE 28707
// exit ;
28705: GO 28736
// for i in tmp do
28707: LD_ADDR_VAR 0 1
28711: PUSH
28712: LD_VAR 0 2
28716: PUSH
28717: FOR_IN
28718: IFFALSE 28734
// SetFuel ( i , 0 ) ;
28720: LD_VAR 0 1
28724: PPUSH
28725: LD_INT 0
28727: PPUSH
28728: CALL_OW 240
28732: GO 28717
28734: POP
28735: POP
// end ;
28736: PPOPN 2
28738: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28739: LD_EXP 69
28743: PUSH
28744: LD_EXP 105
28748: AND
28749: IFFALSE 28815
28751: GO 28753
28753: DISABLE
28754: LD_INT 0
28756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28757: LD_ADDR_VAR 0 1
28761: PUSH
28762: LD_INT 22
28764: PUSH
28765: LD_OWVAR 2
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 30
28776: PUSH
28777: LD_INT 29
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PPUSH
28788: CALL_OW 69
28792: ST_TO_ADDR
// if not tmp then
28793: LD_VAR 0 1
28797: NOT
28798: IFFALSE 28802
// exit ;
28800: GO 28815
// DestroyUnit ( tmp [ 1 ] ) ;
28802: LD_VAR 0 1
28806: PUSH
28807: LD_INT 1
28809: ARRAY
28810: PPUSH
28811: CALL_OW 65
// end ;
28815: PPOPN 1
28817: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28818: LD_EXP 69
28822: PUSH
28823: LD_EXP 107
28827: AND
28828: IFFALSE 28957
28830: GO 28832
28832: DISABLE
28833: LD_INT 0
28835: PPUSH
// begin uc_side := 0 ;
28836: LD_ADDR_OWVAR 20
28840: PUSH
28841: LD_INT 0
28843: ST_TO_ADDR
// uc_nation := nation_arabian ;
28844: LD_ADDR_OWVAR 21
28848: PUSH
28849: LD_INT 2
28851: ST_TO_ADDR
// hc_gallery :=  ;
28852: LD_ADDR_OWVAR 33
28856: PUSH
28857: LD_STRING 
28859: ST_TO_ADDR
// hc_name :=  ;
28860: LD_ADDR_OWVAR 26
28864: PUSH
28865: LD_STRING 
28867: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28868: LD_INT 1
28870: PPUSH
28871: LD_INT 11
28873: PPUSH
28874: LD_INT 10
28876: PPUSH
28877: CALL_OW 380
// un := CreateHuman ;
28881: LD_ADDR_VAR 0 1
28885: PUSH
28886: CALL_OW 44
28890: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28891: LD_VAR 0 1
28895: PPUSH
28896: LD_INT 1
28898: PPUSH
28899: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28903: LD_INT 35
28905: PPUSH
28906: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28910: LD_VAR 0 1
28914: PPUSH
28915: LD_INT 22
28917: PUSH
28918: LD_OWVAR 2
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PPUSH
28927: CALL_OW 69
28931: PPUSH
28932: LD_VAR 0 1
28936: PPUSH
28937: CALL_OW 74
28941: PPUSH
28942: CALL_OW 115
// until IsDead ( un ) ;
28946: LD_VAR 0 1
28950: PPUSH
28951: CALL_OW 301
28955: IFFALSE 28903
// end ;
28957: PPOPN 1
28959: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28960: LD_EXP 69
28964: PUSH
28965: LD_EXP 109
28969: AND
28970: IFFALSE 28982
28972: GO 28974
28974: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28975: LD_STRING earthquake(getX(game), 0, 32)
28977: PPUSH
28978: CALL_OW 559
28982: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28983: LD_EXP 69
28987: PUSH
28988: LD_EXP 110
28992: AND
28993: IFFALSE 29084
28995: GO 28997
28997: DISABLE
28998: LD_INT 0
29000: PPUSH
// begin enable ;
29001: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29002: LD_ADDR_VAR 0 1
29006: PUSH
29007: LD_INT 22
29009: PUSH
29010: LD_OWVAR 2
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 21
29021: PUSH
29022: LD_INT 2
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 33
29031: PUSH
29032: LD_INT 3
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: LIST
29043: PPUSH
29044: CALL_OW 69
29048: ST_TO_ADDR
// if not tmp then
29049: LD_VAR 0 1
29053: NOT
29054: IFFALSE 29058
// exit ;
29056: GO 29084
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29058: LD_VAR 0 1
29062: PUSH
29063: LD_INT 1
29065: PPUSH
29066: LD_VAR 0 1
29070: PPUSH
29071: CALL_OW 12
29075: ARRAY
29076: PPUSH
29077: LD_INT 1
29079: PPUSH
29080: CALL_OW 234
// end ;
29084: PPOPN 1
29086: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29087: LD_EXP 69
29091: PUSH
29092: LD_EXP 111
29096: AND
29097: IFFALSE 29238
29099: GO 29101
29101: DISABLE
29102: LD_INT 0
29104: PPUSH
29105: PPUSH
29106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29107: LD_ADDR_VAR 0 3
29111: PUSH
29112: LD_INT 22
29114: PUSH
29115: LD_OWVAR 2
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 25
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PPUSH
29138: CALL_OW 69
29142: ST_TO_ADDR
// if not tmp then
29143: LD_VAR 0 3
29147: NOT
29148: IFFALSE 29152
// exit ;
29150: GO 29238
// un := tmp [ rand ( 1 , tmp ) ] ;
29152: LD_ADDR_VAR 0 2
29156: PUSH
29157: LD_VAR 0 3
29161: PUSH
29162: LD_INT 1
29164: PPUSH
29165: LD_VAR 0 3
29169: PPUSH
29170: CALL_OW 12
29174: ARRAY
29175: ST_TO_ADDR
// if Crawls ( un ) then
29176: LD_VAR 0 2
29180: PPUSH
29181: CALL_OW 318
29185: IFFALSE 29196
// ComWalk ( un ) ;
29187: LD_VAR 0 2
29191: PPUSH
29192: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29196: LD_VAR 0 2
29200: PPUSH
29201: LD_INT 9
29203: PPUSH
29204: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29208: LD_INT 28
29210: PPUSH
29211: LD_OWVAR 2
29215: PPUSH
29216: LD_INT 2
29218: PPUSH
29219: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29223: LD_INT 29
29225: PPUSH
29226: LD_OWVAR 2
29230: PPUSH
29231: LD_INT 2
29233: PPUSH
29234: CALL_OW 322
// end ;
29238: PPOPN 3
29240: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29241: LD_EXP 69
29245: PUSH
29246: LD_EXP 112
29250: AND
29251: IFFALSE 29362
29253: GO 29255
29255: DISABLE
29256: LD_INT 0
29258: PPUSH
29259: PPUSH
29260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29261: LD_ADDR_VAR 0 3
29265: PUSH
29266: LD_INT 22
29268: PUSH
29269: LD_OWVAR 2
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 25
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PPUSH
29292: CALL_OW 69
29296: ST_TO_ADDR
// if not tmp then
29297: LD_VAR 0 3
29301: NOT
29302: IFFALSE 29306
// exit ;
29304: GO 29362
// un := tmp [ rand ( 1 , tmp ) ] ;
29306: LD_ADDR_VAR 0 2
29310: PUSH
29311: LD_VAR 0 3
29315: PUSH
29316: LD_INT 1
29318: PPUSH
29319: LD_VAR 0 3
29323: PPUSH
29324: CALL_OW 12
29328: ARRAY
29329: ST_TO_ADDR
// if Crawls ( un ) then
29330: LD_VAR 0 2
29334: PPUSH
29335: CALL_OW 318
29339: IFFALSE 29350
// ComWalk ( un ) ;
29341: LD_VAR 0 2
29345: PPUSH
29346: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29350: LD_VAR 0 2
29354: PPUSH
29355: LD_INT 8
29357: PPUSH
29358: CALL_OW 336
// end ;
29362: PPOPN 3
29364: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29365: LD_EXP 69
29369: PUSH
29370: LD_EXP 113
29374: AND
29375: IFFALSE 29519
29377: GO 29379
29379: DISABLE
29380: LD_INT 0
29382: PPUSH
29383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29384: LD_ADDR_VAR 0 2
29388: PUSH
29389: LD_INT 22
29391: PUSH
29392: LD_OWVAR 2
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 21
29403: PUSH
29404: LD_INT 2
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 2
29413: PUSH
29414: LD_INT 34
29416: PUSH
29417: LD_INT 12
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 34
29426: PUSH
29427: LD_INT 51
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 34
29436: PUSH
29437: LD_INT 32
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: PPUSH
29455: CALL_OW 69
29459: ST_TO_ADDR
// if not tmp then
29460: LD_VAR 0 2
29464: NOT
29465: IFFALSE 29469
// exit ;
29467: GO 29519
// for i in tmp do
29469: LD_ADDR_VAR 0 1
29473: PUSH
29474: LD_VAR 0 2
29478: PUSH
29479: FOR_IN
29480: IFFALSE 29517
// if GetCargo ( i , mat_artifact ) = 0 then
29482: LD_VAR 0 1
29486: PPUSH
29487: LD_INT 4
29489: PPUSH
29490: CALL_OW 289
29494: PUSH
29495: LD_INT 0
29497: EQUAL
29498: IFFALSE 29515
// SetCargo ( i , mat_siberit , 100 ) ;
29500: LD_VAR 0 1
29504: PPUSH
29505: LD_INT 3
29507: PPUSH
29508: LD_INT 100
29510: PPUSH
29511: CALL_OW 290
29515: GO 29479
29517: POP
29518: POP
// end ;
29519: PPOPN 2
29521: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29522: LD_EXP 69
29526: PUSH
29527: LD_EXP 114
29531: AND
29532: IFFALSE 29715
29534: GO 29536
29536: DISABLE
29537: LD_INT 0
29539: PPUSH
29540: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29541: LD_ADDR_VAR 0 2
29545: PUSH
29546: LD_INT 22
29548: PUSH
29549: LD_OWVAR 2
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PPUSH
29558: CALL_OW 69
29562: ST_TO_ADDR
// if not tmp then
29563: LD_VAR 0 2
29567: NOT
29568: IFFALSE 29572
// exit ;
29570: GO 29715
// for i := 1 to 2 do
29572: LD_ADDR_VAR 0 1
29576: PUSH
29577: DOUBLE
29578: LD_INT 1
29580: DEC
29581: ST_TO_ADDR
29582: LD_INT 2
29584: PUSH
29585: FOR_TO
29586: IFFALSE 29713
// begin uc_side := your_side ;
29588: LD_ADDR_OWVAR 20
29592: PUSH
29593: LD_OWVAR 2
29597: ST_TO_ADDR
// uc_nation := nation_american ;
29598: LD_ADDR_OWVAR 21
29602: PUSH
29603: LD_INT 1
29605: ST_TO_ADDR
// vc_chassis := us_morphling ;
29606: LD_ADDR_OWVAR 37
29610: PUSH
29611: LD_INT 5
29613: ST_TO_ADDR
// vc_engine := engine_siberite ;
29614: LD_ADDR_OWVAR 39
29618: PUSH
29619: LD_INT 3
29621: ST_TO_ADDR
// vc_control := control_computer ;
29622: LD_ADDR_OWVAR 38
29626: PUSH
29627: LD_INT 3
29629: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29630: LD_ADDR_OWVAR 40
29634: PUSH
29635: LD_INT 10
29637: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29638: LD_VAR 0 2
29642: PUSH
29643: LD_INT 1
29645: ARRAY
29646: PPUSH
29647: CALL_OW 310
29651: NOT
29652: IFFALSE 29699
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29654: CALL_OW 45
29658: PPUSH
29659: LD_VAR 0 2
29663: PUSH
29664: LD_INT 1
29666: ARRAY
29667: PPUSH
29668: CALL_OW 250
29672: PPUSH
29673: LD_VAR 0 2
29677: PUSH
29678: LD_INT 1
29680: ARRAY
29681: PPUSH
29682: CALL_OW 251
29686: PPUSH
29687: LD_INT 12
29689: PPUSH
29690: LD_INT 1
29692: PPUSH
29693: CALL_OW 50
29697: GO 29711
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29699: CALL_OW 45
29703: PPUSH
29704: LD_INT 1
29706: PPUSH
29707: CALL_OW 51
// end ;
29711: GO 29585
29713: POP
29714: POP
// end ;
29715: PPOPN 2
29717: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29718: LD_EXP 69
29722: PUSH
29723: LD_EXP 115
29727: AND
29728: IFFALSE 29950
29730: GO 29732
29732: DISABLE
29733: LD_INT 0
29735: PPUSH
29736: PPUSH
29737: PPUSH
29738: PPUSH
29739: PPUSH
29740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29741: LD_ADDR_VAR 0 6
29745: PUSH
29746: LD_INT 22
29748: PUSH
29749: LD_OWVAR 2
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 21
29760: PUSH
29761: LD_INT 1
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 3
29770: PUSH
29771: LD_INT 23
29773: PUSH
29774: LD_INT 0
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: LIST
29789: PPUSH
29790: CALL_OW 69
29794: ST_TO_ADDR
// if not tmp then
29795: LD_VAR 0 6
29799: NOT
29800: IFFALSE 29804
// exit ;
29802: GO 29950
// s1 := rand ( 1 , 4 ) ;
29804: LD_ADDR_VAR 0 2
29808: PUSH
29809: LD_INT 1
29811: PPUSH
29812: LD_INT 4
29814: PPUSH
29815: CALL_OW 12
29819: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29820: LD_ADDR_VAR 0 4
29824: PUSH
29825: LD_VAR 0 6
29829: PUSH
29830: LD_INT 1
29832: ARRAY
29833: PPUSH
29834: LD_VAR 0 2
29838: PPUSH
29839: CALL_OW 259
29843: ST_TO_ADDR
// if s1 = 1 then
29844: LD_VAR 0 2
29848: PUSH
29849: LD_INT 1
29851: EQUAL
29852: IFFALSE 29872
// s2 := rand ( 2 , 4 ) else
29854: LD_ADDR_VAR 0 3
29858: PUSH
29859: LD_INT 2
29861: PPUSH
29862: LD_INT 4
29864: PPUSH
29865: CALL_OW 12
29869: ST_TO_ADDR
29870: GO 29880
// s2 := 1 ;
29872: LD_ADDR_VAR 0 3
29876: PUSH
29877: LD_INT 1
29879: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29880: LD_ADDR_VAR 0 5
29884: PUSH
29885: LD_VAR 0 6
29889: PUSH
29890: LD_INT 1
29892: ARRAY
29893: PPUSH
29894: LD_VAR 0 3
29898: PPUSH
29899: CALL_OW 259
29903: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29904: LD_VAR 0 6
29908: PUSH
29909: LD_INT 1
29911: ARRAY
29912: PPUSH
29913: LD_VAR 0 2
29917: PPUSH
29918: LD_VAR 0 5
29922: PPUSH
29923: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29927: LD_VAR 0 6
29931: PUSH
29932: LD_INT 1
29934: ARRAY
29935: PPUSH
29936: LD_VAR 0 3
29940: PPUSH
29941: LD_VAR 0 4
29945: PPUSH
29946: CALL_OW 237
// end ;
29950: PPOPN 6
29952: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29953: LD_EXP 69
29957: PUSH
29958: LD_EXP 116
29962: AND
29963: IFFALSE 30042
29965: GO 29967
29967: DISABLE
29968: LD_INT 0
29970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29971: LD_ADDR_VAR 0 1
29975: PUSH
29976: LD_INT 22
29978: PUSH
29979: LD_OWVAR 2
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 30
29990: PUSH
29991: LD_INT 3
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PPUSH
30002: CALL_OW 69
30006: ST_TO_ADDR
// if not tmp then
30007: LD_VAR 0 1
30011: NOT
30012: IFFALSE 30016
// exit ;
30014: GO 30042
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30016: LD_VAR 0 1
30020: PUSH
30021: LD_INT 1
30023: PPUSH
30024: LD_VAR 0 1
30028: PPUSH
30029: CALL_OW 12
30033: ARRAY
30034: PPUSH
30035: LD_INT 1
30037: PPUSH
30038: CALL_OW 234
// end ;
30042: PPOPN 1
30044: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30045: LD_EXP 69
30049: PUSH
30050: LD_EXP 117
30054: AND
30055: IFFALSE 30167
30057: GO 30059
30059: DISABLE
30060: LD_INT 0
30062: PPUSH
30063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30064: LD_ADDR_VAR 0 2
30068: PUSH
30069: LD_INT 22
30071: PUSH
30072: LD_OWVAR 2
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 2
30083: PUSH
30084: LD_INT 30
30086: PUSH
30087: LD_INT 27
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 30
30096: PUSH
30097: LD_INT 26
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 30
30106: PUSH
30107: LD_INT 28
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PPUSH
30124: CALL_OW 69
30128: ST_TO_ADDR
// if not tmp then
30129: LD_VAR 0 2
30133: NOT
30134: IFFALSE 30138
// exit ;
30136: GO 30167
// for i in tmp do
30138: LD_ADDR_VAR 0 1
30142: PUSH
30143: LD_VAR 0 2
30147: PUSH
30148: FOR_IN
30149: IFFALSE 30165
// SetLives ( i , 1 ) ;
30151: LD_VAR 0 1
30155: PPUSH
30156: LD_INT 1
30158: PPUSH
30159: CALL_OW 234
30163: GO 30148
30165: POP
30166: POP
// end ;
30167: PPOPN 2
30169: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30170: LD_EXP 69
30174: PUSH
30175: LD_EXP 118
30179: AND
30180: IFFALSE 30454
30182: GO 30184
30184: DISABLE
30185: LD_INT 0
30187: PPUSH
30188: PPUSH
30189: PPUSH
// begin i := rand ( 1 , 7 ) ;
30190: LD_ADDR_VAR 0 1
30194: PUSH
30195: LD_INT 1
30197: PPUSH
30198: LD_INT 7
30200: PPUSH
30201: CALL_OW 12
30205: ST_TO_ADDR
// case i of 1 :
30206: LD_VAR 0 1
30210: PUSH
30211: LD_INT 1
30213: DOUBLE
30214: EQUAL
30215: IFTRUE 30219
30217: GO 30229
30219: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30220: LD_STRING earthquake(getX(game), 0, 32)
30222: PPUSH
30223: CALL_OW 559
30227: GO 30454
30229: LD_INT 2
30231: DOUBLE
30232: EQUAL
30233: IFTRUE 30237
30235: GO 30251
30237: POP
// begin ToLua ( displayStucuk(); ) ;
30238: LD_STRING displayStucuk();
30240: PPUSH
30241: CALL_OW 559
// ResetFog ;
30245: CALL_OW 335
// end ; 3 :
30249: GO 30454
30251: LD_INT 3
30253: DOUBLE
30254: EQUAL
30255: IFTRUE 30259
30257: GO 30363
30259: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30260: LD_ADDR_VAR 0 2
30264: PUSH
30265: LD_INT 22
30267: PUSH
30268: LD_OWVAR 2
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 25
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PPUSH
30291: CALL_OW 69
30295: ST_TO_ADDR
// if not tmp then
30296: LD_VAR 0 2
30300: NOT
30301: IFFALSE 30305
// exit ;
30303: GO 30454
// un := tmp [ rand ( 1 , tmp ) ] ;
30305: LD_ADDR_VAR 0 3
30309: PUSH
30310: LD_VAR 0 2
30314: PUSH
30315: LD_INT 1
30317: PPUSH
30318: LD_VAR 0 2
30322: PPUSH
30323: CALL_OW 12
30327: ARRAY
30328: ST_TO_ADDR
// if Crawls ( un ) then
30329: LD_VAR 0 3
30333: PPUSH
30334: CALL_OW 318
30338: IFFALSE 30349
// ComWalk ( un ) ;
30340: LD_VAR 0 3
30344: PPUSH
30345: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30349: LD_VAR 0 3
30353: PPUSH
30354: LD_INT 8
30356: PPUSH
30357: CALL_OW 336
// end ; 4 :
30361: GO 30454
30363: LD_INT 4
30365: DOUBLE
30366: EQUAL
30367: IFTRUE 30371
30369: GO 30432
30371: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30372: LD_ADDR_VAR 0 2
30376: PUSH
30377: LD_INT 22
30379: PUSH
30380: LD_OWVAR 2
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 30
30391: PUSH
30392: LD_INT 29
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PPUSH
30403: CALL_OW 69
30407: ST_TO_ADDR
// if not tmp then
30408: LD_VAR 0 2
30412: NOT
30413: IFFALSE 30417
// exit ;
30415: GO 30454
// DestroyUnit ( tmp [ 1 ] ) ;
30417: LD_VAR 0 2
30421: PUSH
30422: LD_INT 1
30424: ARRAY
30425: PPUSH
30426: CALL_OW 65
// end ; 5 .. 7 :
30430: GO 30454
30432: LD_INT 5
30434: DOUBLE
30435: GREATEREQUAL
30436: IFFALSE 30444
30438: LD_INT 7
30440: DOUBLE
30441: LESSEQUAL
30442: IFTRUE 30446
30444: GO 30453
30446: POP
// StreamSibBomb ; end ;
30447: CALL 26704 0 0
30451: GO 30454
30453: POP
// end ;
30454: PPOPN 3
30456: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30457: LD_EXP 69
30461: PUSH
30462: LD_EXP 119
30466: AND
30467: IFFALSE 30623
30469: GO 30471
30471: DISABLE
30472: LD_INT 0
30474: PPUSH
30475: PPUSH
30476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30477: LD_ADDR_VAR 0 2
30481: PUSH
30482: LD_INT 81
30484: PUSH
30485: LD_OWVAR 2
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 2
30496: PUSH
30497: LD_INT 21
30499: PUSH
30500: LD_INT 1
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 21
30509: PUSH
30510: LD_INT 2
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PPUSH
30526: CALL_OW 69
30530: ST_TO_ADDR
// if not tmp then
30531: LD_VAR 0 2
30535: NOT
30536: IFFALSE 30540
// exit ;
30538: GO 30623
// p := 0 ;
30540: LD_ADDR_VAR 0 3
30544: PUSH
30545: LD_INT 0
30547: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30548: LD_INT 35
30550: PPUSH
30551: CALL_OW 67
// p := p + 1 ;
30555: LD_ADDR_VAR 0 3
30559: PUSH
30560: LD_VAR 0 3
30564: PUSH
30565: LD_INT 1
30567: PLUS
30568: ST_TO_ADDR
// for i in tmp do
30569: LD_ADDR_VAR 0 1
30573: PUSH
30574: LD_VAR 0 2
30578: PUSH
30579: FOR_IN
30580: IFFALSE 30611
// if GetLives ( i ) < 1000 then
30582: LD_VAR 0 1
30586: PPUSH
30587: CALL_OW 256
30591: PUSH
30592: LD_INT 1000
30594: LESS
30595: IFFALSE 30609
// SetLives ( i , 1000 ) ;
30597: LD_VAR 0 1
30601: PPUSH
30602: LD_INT 1000
30604: PPUSH
30605: CALL_OW 234
30609: GO 30579
30611: POP
30612: POP
// until p > 20 ;
30613: LD_VAR 0 3
30617: PUSH
30618: LD_INT 20
30620: GREATER
30621: IFFALSE 30548
// end ;
30623: PPOPN 3
30625: END
// every 0 0$1 trigger StreamModeActive and sTime do
30626: LD_EXP 69
30630: PUSH
30631: LD_EXP 120
30635: AND
30636: IFFALSE 30671
30638: GO 30640
30640: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30641: LD_INT 28
30643: PPUSH
30644: LD_OWVAR 2
30648: PPUSH
30649: LD_INT 2
30651: PPUSH
30652: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30656: LD_INT 30
30658: PPUSH
30659: LD_OWVAR 2
30663: PPUSH
30664: LD_INT 2
30666: PPUSH
30667: CALL_OW 322
// end ;
30671: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30672: LD_EXP 69
30676: PUSH
30677: LD_EXP 121
30681: AND
30682: IFFALSE 30803
30684: GO 30686
30686: DISABLE
30687: LD_INT 0
30689: PPUSH
30690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30691: LD_ADDR_VAR 0 2
30695: PUSH
30696: LD_INT 22
30698: PUSH
30699: LD_OWVAR 2
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 21
30710: PUSH
30711: LD_INT 1
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 3
30720: PUSH
30721: LD_INT 23
30723: PUSH
30724: LD_INT 0
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: PPUSH
30740: CALL_OW 69
30744: ST_TO_ADDR
// if not tmp then
30745: LD_VAR 0 2
30749: NOT
30750: IFFALSE 30754
// exit ;
30752: GO 30803
// for i in tmp do
30754: LD_ADDR_VAR 0 1
30758: PUSH
30759: LD_VAR 0 2
30763: PUSH
30764: FOR_IN
30765: IFFALSE 30801
// begin if Crawls ( i ) then
30767: LD_VAR 0 1
30771: PPUSH
30772: CALL_OW 318
30776: IFFALSE 30787
// ComWalk ( i ) ;
30778: LD_VAR 0 1
30782: PPUSH
30783: CALL_OW 138
// SetClass ( i , 2 ) ;
30787: LD_VAR 0 1
30791: PPUSH
30792: LD_INT 2
30794: PPUSH
30795: CALL_OW 336
// end ;
30799: GO 30764
30801: POP
30802: POP
// end ;
30803: PPOPN 2
30805: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30806: LD_EXP 69
30810: PUSH
30811: LD_EXP 122
30815: AND
30816: IFFALSE 31097
30818: GO 30820
30820: DISABLE
30821: LD_INT 0
30823: PPUSH
30824: PPUSH
30825: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30826: LD_OWVAR 2
30830: PPUSH
30831: LD_INT 9
30833: PPUSH
30834: LD_INT 1
30836: PPUSH
30837: LD_INT 1
30839: PPUSH
30840: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30844: LD_INT 9
30846: PPUSH
30847: LD_OWVAR 2
30851: PPUSH
30852: CALL_OW 343
// uc_side := 9 ;
30856: LD_ADDR_OWVAR 20
30860: PUSH
30861: LD_INT 9
30863: ST_TO_ADDR
// uc_nation := 2 ;
30864: LD_ADDR_OWVAR 21
30868: PUSH
30869: LD_INT 2
30871: ST_TO_ADDR
// hc_name := Dark Warrior ;
30872: LD_ADDR_OWVAR 26
30876: PUSH
30877: LD_STRING Dark Warrior
30879: ST_TO_ADDR
// hc_gallery :=  ;
30880: LD_ADDR_OWVAR 33
30884: PUSH
30885: LD_STRING 
30887: ST_TO_ADDR
// hc_noskilllimit := true ;
30888: LD_ADDR_OWVAR 76
30892: PUSH
30893: LD_INT 1
30895: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30896: LD_ADDR_OWVAR 31
30900: PUSH
30901: LD_INT 30
30903: PUSH
30904: LD_INT 30
30906: PUSH
30907: LD_INT 30
30909: PUSH
30910: LD_INT 30
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: ST_TO_ADDR
// un := CreateHuman ;
30919: LD_ADDR_VAR 0 3
30923: PUSH
30924: CALL_OW 44
30928: ST_TO_ADDR
// hc_noskilllimit := false ;
30929: LD_ADDR_OWVAR 76
30933: PUSH
30934: LD_INT 0
30936: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30937: LD_VAR 0 3
30941: PPUSH
30942: LD_INT 1
30944: PPUSH
30945: CALL_OW 51
// p := 0 ;
30949: LD_ADDR_VAR 0 2
30953: PUSH
30954: LD_INT 0
30956: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30957: LD_INT 35
30959: PPUSH
30960: CALL_OW 67
// p := p + 1 ;
30964: LD_ADDR_VAR 0 2
30968: PUSH
30969: LD_VAR 0 2
30973: PUSH
30974: LD_INT 1
30976: PLUS
30977: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30978: LD_VAR 0 3
30982: PPUSH
30983: CALL_OW 256
30987: PUSH
30988: LD_INT 1000
30990: LESS
30991: IFFALSE 31005
// SetLives ( un , 1000 ) ;
30993: LD_VAR 0 3
30997: PPUSH
30998: LD_INT 1000
31000: PPUSH
31001: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31005: LD_VAR 0 3
31009: PPUSH
31010: LD_INT 81
31012: PUSH
31013: LD_OWVAR 2
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 91
31024: PUSH
31025: LD_VAR 0 3
31029: PUSH
31030: LD_INT 30
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: LIST
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PPUSH
31042: CALL_OW 69
31046: PPUSH
31047: LD_VAR 0 3
31051: PPUSH
31052: CALL_OW 74
31056: PPUSH
31057: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
31061: LD_VAR 0 2
31065: PUSH
31066: LD_INT 60
31068: GREATER
31069: PUSH
31070: LD_VAR 0 3
31074: PPUSH
31075: CALL_OW 301
31079: OR
31080: IFFALSE 30957
// if un then
31082: LD_VAR 0 3
31086: IFFALSE 31097
// RemoveUnit ( un ) ;
31088: LD_VAR 0 3
31092: PPUSH
31093: CALL_OW 64
// end ;
31097: PPOPN 3
31099: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31100: LD_INT 0
31102: PPUSH
// case cmd of 301 :
31103: LD_VAR 0 1
31107: PUSH
31108: LD_INT 301
31110: DOUBLE
31111: EQUAL
31112: IFTRUE 31116
31114: GO 31148
31116: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31117: LD_VAR 0 6
31121: PPUSH
31122: LD_VAR 0 7
31126: PPUSH
31127: LD_VAR 0 8
31131: PPUSH
31132: LD_VAR 0 4
31136: PPUSH
31137: LD_VAR 0 5
31141: PPUSH
31142: CALL 32349 0 5
31146: GO 31269
31148: LD_INT 302
31150: DOUBLE
31151: EQUAL
31152: IFTRUE 31156
31154: GO 31193
31156: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31157: LD_VAR 0 6
31161: PPUSH
31162: LD_VAR 0 7
31166: PPUSH
31167: LD_VAR 0 8
31171: PPUSH
31172: LD_VAR 0 9
31176: PPUSH
31177: LD_VAR 0 4
31181: PPUSH
31182: LD_VAR 0 5
31186: PPUSH
31187: CALL 32440 0 6
31191: GO 31269
31193: LD_INT 303
31195: DOUBLE
31196: EQUAL
31197: IFTRUE 31201
31199: GO 31238
31201: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31202: LD_VAR 0 6
31206: PPUSH
31207: LD_VAR 0 7
31211: PPUSH
31212: LD_VAR 0 8
31216: PPUSH
31217: LD_VAR 0 9
31221: PPUSH
31222: LD_VAR 0 4
31226: PPUSH
31227: LD_VAR 0 5
31231: PPUSH
31232: CALL 31274 0 6
31236: GO 31269
31238: LD_INT 304
31240: DOUBLE
31241: EQUAL
31242: IFTRUE 31246
31244: GO 31268
31246: POP
// hHackTeleport ( unit , x , y ) ; end ;
31247: LD_VAR 0 2
31251: PPUSH
31252: LD_VAR 0 4
31256: PPUSH
31257: LD_VAR 0 5
31261: PPUSH
31262: CALL 33033 0 3
31266: GO 31269
31268: POP
// end ;
31269: LD_VAR 0 12
31273: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31274: LD_INT 0
31276: PPUSH
31277: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31278: LD_VAR 0 1
31282: PUSH
31283: LD_INT 1
31285: LESS
31286: PUSH
31287: LD_VAR 0 1
31291: PUSH
31292: LD_INT 3
31294: GREATER
31295: OR
31296: PUSH
31297: LD_VAR 0 5
31301: PPUSH
31302: LD_VAR 0 6
31306: PPUSH
31307: CALL_OW 428
31311: OR
31312: IFFALSE 31316
// exit ;
31314: GO 32036
// uc_side := your_side ;
31316: LD_ADDR_OWVAR 20
31320: PUSH
31321: LD_OWVAR 2
31325: ST_TO_ADDR
// uc_nation := nation ;
31326: LD_ADDR_OWVAR 21
31330: PUSH
31331: LD_VAR 0 1
31335: ST_TO_ADDR
// bc_level = 1 ;
31336: LD_ADDR_OWVAR 43
31340: PUSH
31341: LD_INT 1
31343: ST_TO_ADDR
// case btype of 1 :
31344: LD_VAR 0 2
31348: PUSH
31349: LD_INT 1
31351: DOUBLE
31352: EQUAL
31353: IFTRUE 31357
31355: GO 31368
31357: POP
// bc_type := b_depot ; 2 :
31358: LD_ADDR_OWVAR 42
31362: PUSH
31363: LD_INT 0
31365: ST_TO_ADDR
31366: GO 31980
31368: LD_INT 2
31370: DOUBLE
31371: EQUAL
31372: IFTRUE 31376
31374: GO 31387
31376: POP
// bc_type := b_warehouse ; 3 :
31377: LD_ADDR_OWVAR 42
31381: PUSH
31382: LD_INT 1
31384: ST_TO_ADDR
31385: GO 31980
31387: LD_INT 3
31389: DOUBLE
31390: EQUAL
31391: IFTRUE 31395
31393: GO 31406
31395: POP
// bc_type := b_lab ; 4 .. 9 :
31396: LD_ADDR_OWVAR 42
31400: PUSH
31401: LD_INT 6
31403: ST_TO_ADDR
31404: GO 31980
31406: LD_INT 4
31408: DOUBLE
31409: GREATEREQUAL
31410: IFFALSE 31418
31412: LD_INT 9
31414: DOUBLE
31415: LESSEQUAL
31416: IFTRUE 31420
31418: GO 31472
31420: POP
// begin bc_type := b_lab_half ;
31421: LD_ADDR_OWVAR 42
31425: PUSH
31426: LD_INT 7
31428: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31429: LD_ADDR_OWVAR 44
31433: PUSH
31434: LD_INT 10
31436: PUSH
31437: LD_INT 11
31439: PUSH
31440: LD_INT 12
31442: PUSH
31443: LD_INT 15
31445: PUSH
31446: LD_INT 14
31448: PUSH
31449: LD_INT 13
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: PUSH
31460: LD_VAR 0 2
31464: PUSH
31465: LD_INT 3
31467: MINUS
31468: ARRAY
31469: ST_TO_ADDR
// end ; 10 .. 13 :
31470: GO 31980
31472: LD_INT 10
31474: DOUBLE
31475: GREATEREQUAL
31476: IFFALSE 31484
31478: LD_INT 13
31480: DOUBLE
31481: LESSEQUAL
31482: IFTRUE 31486
31484: GO 31563
31486: POP
// begin bc_type := b_lab_full ;
31487: LD_ADDR_OWVAR 42
31491: PUSH
31492: LD_INT 8
31494: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31495: LD_ADDR_OWVAR 44
31499: PUSH
31500: LD_INT 10
31502: PUSH
31503: LD_INT 12
31505: PUSH
31506: LD_INT 14
31508: PUSH
31509: LD_INT 13
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: PUSH
31518: LD_VAR 0 2
31522: PUSH
31523: LD_INT 9
31525: MINUS
31526: ARRAY
31527: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31528: LD_ADDR_OWVAR 45
31532: PUSH
31533: LD_INT 11
31535: PUSH
31536: LD_INT 15
31538: PUSH
31539: LD_INT 12
31541: PUSH
31542: LD_INT 15
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: PUSH
31551: LD_VAR 0 2
31555: PUSH
31556: LD_INT 9
31558: MINUS
31559: ARRAY
31560: ST_TO_ADDR
// end ; 14 :
31561: GO 31980
31563: LD_INT 14
31565: DOUBLE
31566: EQUAL
31567: IFTRUE 31571
31569: GO 31582
31571: POP
// bc_type := b_workshop ; 15 :
31572: LD_ADDR_OWVAR 42
31576: PUSH
31577: LD_INT 2
31579: ST_TO_ADDR
31580: GO 31980
31582: LD_INT 15
31584: DOUBLE
31585: EQUAL
31586: IFTRUE 31590
31588: GO 31601
31590: POP
// bc_type := b_factory ; 16 :
31591: LD_ADDR_OWVAR 42
31595: PUSH
31596: LD_INT 3
31598: ST_TO_ADDR
31599: GO 31980
31601: LD_INT 16
31603: DOUBLE
31604: EQUAL
31605: IFTRUE 31609
31607: GO 31620
31609: POP
// bc_type := b_ext_gun ; 17 :
31610: LD_ADDR_OWVAR 42
31614: PUSH
31615: LD_INT 17
31617: ST_TO_ADDR
31618: GO 31980
31620: LD_INT 17
31622: DOUBLE
31623: EQUAL
31624: IFTRUE 31628
31626: GO 31656
31628: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31629: LD_ADDR_OWVAR 42
31633: PUSH
31634: LD_INT 19
31636: PUSH
31637: LD_INT 23
31639: PUSH
31640: LD_INT 19
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: LIST
31647: PUSH
31648: LD_VAR 0 1
31652: ARRAY
31653: ST_TO_ADDR
31654: GO 31980
31656: LD_INT 18
31658: DOUBLE
31659: EQUAL
31660: IFTRUE 31664
31662: GO 31675
31664: POP
// bc_type := b_ext_radar ; 19 :
31665: LD_ADDR_OWVAR 42
31669: PUSH
31670: LD_INT 20
31672: ST_TO_ADDR
31673: GO 31980
31675: LD_INT 19
31677: DOUBLE
31678: EQUAL
31679: IFTRUE 31683
31681: GO 31694
31683: POP
// bc_type := b_ext_radio ; 20 :
31684: LD_ADDR_OWVAR 42
31688: PUSH
31689: LD_INT 22
31691: ST_TO_ADDR
31692: GO 31980
31694: LD_INT 20
31696: DOUBLE
31697: EQUAL
31698: IFTRUE 31702
31700: GO 31713
31702: POP
// bc_type := b_ext_siberium ; 21 :
31703: LD_ADDR_OWVAR 42
31707: PUSH
31708: LD_INT 21
31710: ST_TO_ADDR
31711: GO 31980
31713: LD_INT 21
31715: DOUBLE
31716: EQUAL
31717: IFTRUE 31721
31719: GO 31732
31721: POP
// bc_type := b_ext_computer ; 22 :
31722: LD_ADDR_OWVAR 42
31726: PUSH
31727: LD_INT 24
31729: ST_TO_ADDR
31730: GO 31980
31732: LD_INT 22
31734: DOUBLE
31735: EQUAL
31736: IFTRUE 31740
31738: GO 31751
31740: POP
// bc_type := b_ext_track ; 23 :
31741: LD_ADDR_OWVAR 42
31745: PUSH
31746: LD_INT 16
31748: ST_TO_ADDR
31749: GO 31980
31751: LD_INT 23
31753: DOUBLE
31754: EQUAL
31755: IFTRUE 31759
31757: GO 31770
31759: POP
// bc_type := b_ext_laser ; 24 :
31760: LD_ADDR_OWVAR 42
31764: PUSH
31765: LD_INT 25
31767: ST_TO_ADDR
31768: GO 31980
31770: LD_INT 24
31772: DOUBLE
31773: EQUAL
31774: IFTRUE 31778
31776: GO 31789
31778: POP
// bc_type := b_control_tower ; 25 :
31779: LD_ADDR_OWVAR 42
31783: PUSH
31784: LD_INT 36
31786: ST_TO_ADDR
31787: GO 31980
31789: LD_INT 25
31791: DOUBLE
31792: EQUAL
31793: IFTRUE 31797
31795: GO 31808
31797: POP
// bc_type := b_breastwork ; 26 :
31798: LD_ADDR_OWVAR 42
31802: PUSH
31803: LD_INT 31
31805: ST_TO_ADDR
31806: GO 31980
31808: LD_INT 26
31810: DOUBLE
31811: EQUAL
31812: IFTRUE 31816
31814: GO 31827
31816: POP
// bc_type := b_bunker ; 27 :
31817: LD_ADDR_OWVAR 42
31821: PUSH
31822: LD_INT 32
31824: ST_TO_ADDR
31825: GO 31980
31827: LD_INT 27
31829: DOUBLE
31830: EQUAL
31831: IFTRUE 31835
31833: GO 31846
31835: POP
// bc_type := b_turret ; 28 :
31836: LD_ADDR_OWVAR 42
31840: PUSH
31841: LD_INT 33
31843: ST_TO_ADDR
31844: GO 31980
31846: LD_INT 28
31848: DOUBLE
31849: EQUAL
31850: IFTRUE 31854
31852: GO 31865
31854: POP
// bc_type := b_armoury ; 29 :
31855: LD_ADDR_OWVAR 42
31859: PUSH
31860: LD_INT 4
31862: ST_TO_ADDR
31863: GO 31980
31865: LD_INT 29
31867: DOUBLE
31868: EQUAL
31869: IFTRUE 31873
31871: GO 31884
31873: POP
// bc_type := b_barracks ; 30 :
31874: LD_ADDR_OWVAR 42
31878: PUSH
31879: LD_INT 5
31881: ST_TO_ADDR
31882: GO 31980
31884: LD_INT 30
31886: DOUBLE
31887: EQUAL
31888: IFTRUE 31892
31890: GO 31903
31892: POP
// bc_type := b_solar_power ; 31 :
31893: LD_ADDR_OWVAR 42
31897: PUSH
31898: LD_INT 27
31900: ST_TO_ADDR
31901: GO 31980
31903: LD_INT 31
31905: DOUBLE
31906: EQUAL
31907: IFTRUE 31911
31909: GO 31922
31911: POP
// bc_type := b_oil_power ; 32 :
31912: LD_ADDR_OWVAR 42
31916: PUSH
31917: LD_INT 26
31919: ST_TO_ADDR
31920: GO 31980
31922: LD_INT 32
31924: DOUBLE
31925: EQUAL
31926: IFTRUE 31930
31928: GO 31941
31930: POP
// bc_type := b_siberite_power ; 33 :
31931: LD_ADDR_OWVAR 42
31935: PUSH
31936: LD_INT 28
31938: ST_TO_ADDR
31939: GO 31980
31941: LD_INT 33
31943: DOUBLE
31944: EQUAL
31945: IFTRUE 31949
31947: GO 31960
31949: POP
// bc_type := b_oil_mine ; 34 :
31950: LD_ADDR_OWVAR 42
31954: PUSH
31955: LD_INT 29
31957: ST_TO_ADDR
31958: GO 31980
31960: LD_INT 34
31962: DOUBLE
31963: EQUAL
31964: IFTRUE 31968
31966: GO 31979
31968: POP
// bc_type := b_siberite_mine ; end ;
31969: LD_ADDR_OWVAR 42
31973: PUSH
31974: LD_INT 30
31976: ST_TO_ADDR
31977: GO 31980
31979: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31980: LD_ADDR_VAR 0 8
31984: PUSH
31985: LD_VAR 0 5
31989: PPUSH
31990: LD_VAR 0 6
31994: PPUSH
31995: LD_VAR 0 3
31999: PPUSH
32000: CALL_OW 47
32004: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32005: LD_OWVAR 42
32009: PUSH
32010: LD_INT 32
32012: PUSH
32013: LD_INT 33
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: IN
32020: IFFALSE 32036
// PlaceWeaponTurret ( b , weapon ) ;
32022: LD_VAR 0 8
32026: PPUSH
32027: LD_VAR 0 4
32031: PPUSH
32032: CALL_OW 431
// end ;
32036: LD_VAR 0 7
32040: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32041: LD_INT 0
32043: PPUSH
32044: PPUSH
32045: PPUSH
32046: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32047: LD_ADDR_VAR 0 4
32051: PUSH
32052: LD_INT 22
32054: PUSH
32055: LD_OWVAR 2
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 2
32066: PUSH
32067: LD_INT 30
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 30
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: LIST
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PPUSH
32096: CALL_OW 69
32100: ST_TO_ADDR
// if not tmp then
32101: LD_VAR 0 4
32105: NOT
32106: IFFALSE 32110
// exit ;
32108: GO 32169
// for i in tmp do
32110: LD_ADDR_VAR 0 2
32114: PUSH
32115: LD_VAR 0 4
32119: PUSH
32120: FOR_IN
32121: IFFALSE 32167
// for j = 1 to 3 do
32123: LD_ADDR_VAR 0 3
32127: PUSH
32128: DOUBLE
32129: LD_INT 1
32131: DEC
32132: ST_TO_ADDR
32133: LD_INT 3
32135: PUSH
32136: FOR_TO
32137: IFFALSE 32163
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32139: LD_VAR 0 2
32143: PPUSH
32144: CALL_OW 274
32148: PPUSH
32149: LD_VAR 0 3
32153: PPUSH
32154: LD_INT 99999
32156: PPUSH
32157: CALL_OW 277
32161: GO 32136
32163: POP
32164: POP
32165: GO 32120
32167: POP
32168: POP
// end ;
32169: LD_VAR 0 1
32173: RET
// export function hHackSetLevel10 ; var i , j ; begin
32174: LD_INT 0
32176: PPUSH
32177: PPUSH
32178: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32179: LD_ADDR_VAR 0 2
32183: PUSH
32184: LD_INT 21
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PPUSH
32194: CALL_OW 69
32198: PUSH
32199: FOR_IN
32200: IFFALSE 32252
// if IsSelected ( i ) then
32202: LD_VAR 0 2
32206: PPUSH
32207: CALL_OW 306
32211: IFFALSE 32250
// begin for j := 1 to 4 do
32213: LD_ADDR_VAR 0 3
32217: PUSH
32218: DOUBLE
32219: LD_INT 1
32221: DEC
32222: ST_TO_ADDR
32223: LD_INT 4
32225: PUSH
32226: FOR_TO
32227: IFFALSE 32248
// SetSkill ( i , j , 10 ) ;
32229: LD_VAR 0 2
32233: PPUSH
32234: LD_VAR 0 3
32238: PPUSH
32239: LD_INT 10
32241: PPUSH
32242: CALL_OW 237
32246: GO 32226
32248: POP
32249: POP
// end ;
32250: GO 32199
32252: POP
32253: POP
// end ;
32254: LD_VAR 0 1
32258: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32259: LD_INT 0
32261: PPUSH
32262: PPUSH
32263: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32264: LD_ADDR_VAR 0 2
32268: PUSH
32269: LD_INT 22
32271: PUSH
32272: LD_OWVAR 2
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 21
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PPUSH
32295: CALL_OW 69
32299: PUSH
32300: FOR_IN
32301: IFFALSE 32342
// begin for j := 1 to 4 do
32303: LD_ADDR_VAR 0 3
32307: PUSH
32308: DOUBLE
32309: LD_INT 1
32311: DEC
32312: ST_TO_ADDR
32313: LD_INT 4
32315: PUSH
32316: FOR_TO
32317: IFFALSE 32338
// SetSkill ( i , j , 10 ) ;
32319: LD_VAR 0 2
32323: PPUSH
32324: LD_VAR 0 3
32328: PPUSH
32329: LD_INT 10
32331: PPUSH
32332: CALL_OW 237
32336: GO 32316
32338: POP
32339: POP
// end ;
32340: GO 32300
32342: POP
32343: POP
// end ;
32344: LD_VAR 0 1
32348: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32349: LD_INT 0
32351: PPUSH
// uc_side := your_side ;
32352: LD_ADDR_OWVAR 20
32356: PUSH
32357: LD_OWVAR 2
32361: ST_TO_ADDR
// uc_nation := nation ;
32362: LD_ADDR_OWVAR 21
32366: PUSH
32367: LD_VAR 0 1
32371: ST_TO_ADDR
// InitHc ;
32372: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32376: LD_INT 0
32378: PPUSH
32379: LD_VAR 0 2
32383: PPUSH
32384: LD_VAR 0 3
32388: PPUSH
32389: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32393: LD_VAR 0 4
32397: PPUSH
32398: LD_VAR 0 5
32402: PPUSH
32403: CALL_OW 428
32407: PUSH
32408: LD_INT 0
32410: EQUAL
32411: IFFALSE 32435
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32413: CALL_OW 44
32417: PPUSH
32418: LD_VAR 0 4
32422: PPUSH
32423: LD_VAR 0 5
32427: PPUSH
32428: LD_INT 1
32430: PPUSH
32431: CALL_OW 48
// end ;
32435: LD_VAR 0 6
32439: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32440: LD_INT 0
32442: PPUSH
32443: PPUSH
// uc_side := your_side ;
32444: LD_ADDR_OWVAR 20
32448: PUSH
32449: LD_OWVAR 2
32453: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32454: LD_VAR 0 1
32458: PUSH
32459: LD_INT 1
32461: PUSH
32462: LD_INT 2
32464: PUSH
32465: LD_INT 3
32467: PUSH
32468: LD_INT 4
32470: PUSH
32471: LD_INT 5
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: IN
32481: IFFALSE 32493
// uc_nation := nation_american else
32483: LD_ADDR_OWVAR 21
32487: PUSH
32488: LD_INT 1
32490: ST_TO_ADDR
32491: GO 32536
// if chassis in [ 11 , 12 , 13 , 14 ] then
32493: LD_VAR 0 1
32497: PUSH
32498: LD_INT 11
32500: PUSH
32501: LD_INT 12
32503: PUSH
32504: LD_INT 13
32506: PUSH
32507: LD_INT 14
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: IN
32516: IFFALSE 32528
// uc_nation := nation_arabian else
32518: LD_ADDR_OWVAR 21
32522: PUSH
32523: LD_INT 2
32525: ST_TO_ADDR
32526: GO 32536
// uc_nation := nation_russian ;
32528: LD_ADDR_OWVAR 21
32532: PUSH
32533: LD_INT 3
32535: ST_TO_ADDR
// vc_chassis := chassis ;
32536: LD_ADDR_OWVAR 37
32540: PUSH
32541: LD_VAR 0 1
32545: ST_TO_ADDR
// vc_engine := engine ;
32546: LD_ADDR_OWVAR 39
32550: PUSH
32551: LD_VAR 0 2
32555: ST_TO_ADDR
// vc_control := control ;
32556: LD_ADDR_OWVAR 38
32560: PUSH
32561: LD_VAR 0 3
32565: ST_TO_ADDR
// vc_weapon := weapon ;
32566: LD_ADDR_OWVAR 40
32570: PUSH
32571: LD_VAR 0 4
32575: ST_TO_ADDR
// un := CreateVehicle ;
32576: LD_ADDR_VAR 0 8
32580: PUSH
32581: CALL_OW 45
32585: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32586: LD_VAR 0 8
32590: PPUSH
32591: LD_INT 0
32593: PPUSH
32594: LD_INT 5
32596: PPUSH
32597: CALL_OW 12
32601: PPUSH
32602: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32606: LD_VAR 0 8
32610: PPUSH
32611: LD_VAR 0 5
32615: PPUSH
32616: LD_VAR 0 6
32620: PPUSH
32621: LD_INT 1
32623: PPUSH
32624: CALL_OW 48
// end ;
32628: LD_VAR 0 7
32632: RET
// export hInvincible ; every 1 do
32633: GO 32635
32635: DISABLE
// hInvincible := [ ] ;
32636: LD_ADDR_EXP 123
32640: PUSH
32641: EMPTY
32642: ST_TO_ADDR
32643: END
// every 10 do var i ;
32644: GO 32646
32646: DISABLE
32647: LD_INT 0
32649: PPUSH
// begin enable ;
32650: ENABLE
// if not hInvincible then
32651: LD_EXP 123
32655: NOT
32656: IFFALSE 32660
// exit ;
32658: GO 32704
// for i in hInvincible do
32660: LD_ADDR_VAR 0 1
32664: PUSH
32665: LD_EXP 123
32669: PUSH
32670: FOR_IN
32671: IFFALSE 32702
// if GetLives ( i ) < 1000 then
32673: LD_VAR 0 1
32677: PPUSH
32678: CALL_OW 256
32682: PUSH
32683: LD_INT 1000
32685: LESS
32686: IFFALSE 32700
// SetLives ( i , 1000 ) ;
32688: LD_VAR 0 1
32692: PPUSH
32693: LD_INT 1000
32695: PPUSH
32696: CALL_OW 234
32700: GO 32670
32702: POP
32703: POP
// end ;
32704: PPOPN 1
32706: END
// export function hHackInvincible ; var i ; begin
32707: LD_INT 0
32709: PPUSH
32710: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32711: LD_ADDR_VAR 0 2
32715: PUSH
32716: LD_INT 2
32718: PUSH
32719: LD_INT 21
32721: PUSH
32722: LD_INT 1
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 21
32731: PUSH
32732: LD_INT 2
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: LIST
32743: PPUSH
32744: CALL_OW 69
32748: PUSH
32749: FOR_IN
32750: IFFALSE 32811
// if IsSelected ( i ) then
32752: LD_VAR 0 2
32756: PPUSH
32757: CALL_OW 306
32761: IFFALSE 32809
// begin if i in hInvincible then
32763: LD_VAR 0 2
32767: PUSH
32768: LD_EXP 123
32772: IN
32773: IFFALSE 32793
// hInvincible := hInvincible diff i else
32775: LD_ADDR_EXP 123
32779: PUSH
32780: LD_EXP 123
32784: PUSH
32785: LD_VAR 0 2
32789: DIFF
32790: ST_TO_ADDR
32791: GO 32809
// hInvincible := hInvincible union i ;
32793: LD_ADDR_EXP 123
32797: PUSH
32798: LD_EXP 123
32802: PUSH
32803: LD_VAR 0 2
32807: UNION
32808: ST_TO_ADDR
// end ;
32809: GO 32749
32811: POP
32812: POP
// end ;
32813: LD_VAR 0 1
32817: RET
// export function hHackInvisible ; var i , j ; begin
32818: LD_INT 0
32820: PPUSH
32821: PPUSH
32822: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32823: LD_ADDR_VAR 0 2
32827: PUSH
32828: LD_INT 21
32830: PUSH
32831: LD_INT 1
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PPUSH
32838: CALL_OW 69
32842: PUSH
32843: FOR_IN
32844: IFFALSE 32868
// if IsSelected ( i ) then
32846: LD_VAR 0 2
32850: PPUSH
32851: CALL_OW 306
32855: IFFALSE 32866
// ComForceInvisible ( i ) ;
32857: LD_VAR 0 2
32861: PPUSH
32862: CALL_OW 496
32866: GO 32843
32868: POP
32869: POP
// end ;
32870: LD_VAR 0 1
32874: RET
// export function hHackChangeYourSide ; begin
32875: LD_INT 0
32877: PPUSH
// if your_side = 8 then
32878: LD_OWVAR 2
32882: PUSH
32883: LD_INT 8
32885: EQUAL
32886: IFFALSE 32898
// your_side := 0 else
32888: LD_ADDR_OWVAR 2
32892: PUSH
32893: LD_INT 0
32895: ST_TO_ADDR
32896: GO 32912
// your_side := your_side + 1 ;
32898: LD_ADDR_OWVAR 2
32902: PUSH
32903: LD_OWVAR 2
32907: PUSH
32908: LD_INT 1
32910: PLUS
32911: ST_TO_ADDR
// end ;
32912: LD_VAR 0 1
32916: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32917: LD_INT 0
32919: PPUSH
32920: PPUSH
32921: PPUSH
// for i in all_units do
32922: LD_ADDR_VAR 0 2
32926: PUSH
32927: LD_OWVAR 3
32931: PUSH
32932: FOR_IN
32933: IFFALSE 33011
// if IsSelected ( i ) then
32935: LD_VAR 0 2
32939: PPUSH
32940: CALL_OW 306
32944: IFFALSE 33009
// begin j := GetSide ( i ) ;
32946: LD_ADDR_VAR 0 3
32950: PUSH
32951: LD_VAR 0 2
32955: PPUSH
32956: CALL_OW 255
32960: ST_TO_ADDR
// if j = 8 then
32961: LD_VAR 0 3
32965: PUSH
32966: LD_INT 8
32968: EQUAL
32969: IFFALSE 32981
// j := 0 else
32971: LD_ADDR_VAR 0 3
32975: PUSH
32976: LD_INT 0
32978: ST_TO_ADDR
32979: GO 32995
// j := j + 1 ;
32981: LD_ADDR_VAR 0 3
32985: PUSH
32986: LD_VAR 0 3
32990: PUSH
32991: LD_INT 1
32993: PLUS
32994: ST_TO_ADDR
// SetSide ( i , j ) ;
32995: LD_VAR 0 2
32999: PPUSH
33000: LD_VAR 0 3
33004: PPUSH
33005: CALL_OW 235
// end ;
33009: GO 32932
33011: POP
33012: POP
// end ;
33013: LD_VAR 0 1
33017: RET
// export function hHackFog ; begin
33018: LD_INT 0
33020: PPUSH
// FogOff ( true ) ;
33021: LD_INT 1
33023: PPUSH
33024: CALL_OW 344
// end ;
33028: LD_VAR 0 1
33032: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33033: LD_INT 0
33035: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33036: LD_VAR 0 1
33040: PPUSH
33041: LD_VAR 0 2
33045: PPUSH
33046: LD_VAR 0 3
33050: PPUSH
33051: LD_INT 1
33053: PPUSH
33054: LD_INT 1
33056: PPUSH
33057: CALL_OW 483
// CenterOnXY ( x , y ) ;
33061: LD_VAR 0 2
33065: PPUSH
33066: LD_VAR 0 3
33070: PPUSH
33071: CALL_OW 84
// end ; end_of_file
33075: LD_VAR 0 4
33079: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33080: LD_INT 0
33082: PPUSH
33083: PPUSH
33084: PPUSH
33085: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33086: LD_VAR 0 1
33090: PPUSH
33091: CALL_OW 264
33095: PUSH
33096: LD_EXP 54
33100: EQUAL
33101: IFFALSE 33173
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33103: LD_INT 68
33105: PPUSH
33106: LD_VAR 0 1
33110: PPUSH
33111: CALL_OW 255
33115: PPUSH
33116: CALL_OW 321
33120: PUSH
33121: LD_INT 2
33123: EQUAL
33124: IFFALSE 33136
// eff := 70 else
33126: LD_ADDR_VAR 0 4
33130: PUSH
33131: LD_INT 70
33133: ST_TO_ADDR
33134: GO 33144
// eff := 30 ;
33136: LD_ADDR_VAR 0 4
33140: PUSH
33141: LD_INT 30
33143: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33144: LD_VAR 0 1
33148: PPUSH
33149: CALL_OW 250
33153: PPUSH
33154: LD_VAR 0 1
33158: PPUSH
33159: CALL_OW 251
33163: PPUSH
33164: LD_VAR 0 4
33168: PPUSH
33169: CALL_OW 495
// end ; end ;
33173: LD_VAR 0 2
33177: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33178: LD_INT 0
33180: PPUSH
// end ;
33181: LD_VAR 0 4
33185: RET
// export function SOS_Command ( cmd ) ; begin
33186: LD_INT 0
33188: PPUSH
// end ;
33189: LD_VAR 0 2
33193: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33194: LD_INT 0
33196: PPUSH
// if cmd = 121 then
33197: LD_VAR 0 1
33201: PUSH
33202: LD_INT 121
33204: EQUAL
33205: IFFALSE 33207
// end ;
33207: LD_VAR 0 6
33211: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33212: LD_INT 0
33214: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33215: LD_VAR 0 1
33219: PUSH
33220: LD_INT 250
33222: EQUAL
33223: PUSH
33224: LD_VAR 0 2
33228: PPUSH
33229: CALL_OW 264
33233: PUSH
33234: LD_EXP 57
33238: EQUAL
33239: AND
33240: IFFALSE 33261
// MinerPlaceMine ( unit , x , y ) ;
33242: LD_VAR 0 2
33246: PPUSH
33247: LD_VAR 0 4
33251: PPUSH
33252: LD_VAR 0 5
33256: PPUSH
33257: CALL 35610 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33261: LD_VAR 0 1
33265: PUSH
33266: LD_INT 251
33268: EQUAL
33269: PUSH
33270: LD_VAR 0 2
33274: PPUSH
33275: CALL_OW 264
33279: PUSH
33280: LD_EXP 57
33284: EQUAL
33285: AND
33286: IFFALSE 33307
// MinerDetonateMine ( unit , x , y ) ;
33288: LD_VAR 0 2
33292: PPUSH
33293: LD_VAR 0 4
33297: PPUSH
33298: LD_VAR 0 5
33302: PPUSH
33303: CALL 35887 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33307: LD_VAR 0 1
33311: PUSH
33312: LD_INT 252
33314: EQUAL
33315: PUSH
33316: LD_VAR 0 2
33320: PPUSH
33321: CALL_OW 264
33325: PUSH
33326: LD_EXP 57
33330: EQUAL
33331: AND
33332: IFFALSE 33353
// MinerCreateMinefield ( unit , x , y ) ;
33334: LD_VAR 0 2
33338: PPUSH
33339: LD_VAR 0 4
33343: PPUSH
33344: LD_VAR 0 5
33348: PPUSH
33349: CALL 36304 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33353: LD_VAR 0 1
33357: PUSH
33358: LD_INT 253
33360: EQUAL
33361: PUSH
33362: LD_VAR 0 2
33366: PPUSH
33367: CALL_OW 257
33371: PUSH
33372: LD_INT 5
33374: EQUAL
33375: AND
33376: IFFALSE 33397
// ComBinocular ( unit , x , y ) ;
33378: LD_VAR 0 2
33382: PPUSH
33383: LD_VAR 0 4
33387: PPUSH
33388: LD_VAR 0 5
33392: PPUSH
33393: CALL 36675 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33397: LD_VAR 0 1
33401: PUSH
33402: LD_INT 254
33404: EQUAL
33405: PUSH
33406: LD_VAR 0 2
33410: PPUSH
33411: CALL_OW 264
33415: PUSH
33416: LD_EXP 52
33420: EQUAL
33421: AND
33422: PUSH
33423: LD_VAR 0 3
33427: PPUSH
33428: CALL_OW 263
33432: PUSH
33433: LD_INT 3
33435: EQUAL
33436: AND
33437: IFFALSE 33453
// HackDestroyVehicle ( unit , selectedUnit ) ;
33439: LD_VAR 0 2
33443: PPUSH
33444: LD_VAR 0 3
33448: PPUSH
33449: CALL 34970 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33453: LD_VAR 0 1
33457: PUSH
33458: LD_INT 255
33460: EQUAL
33461: PUSH
33462: LD_VAR 0 2
33466: PPUSH
33467: CALL_OW 264
33471: PUSH
33472: LD_INT 14
33474: PUSH
33475: LD_INT 53
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: IN
33482: AND
33483: PUSH
33484: LD_VAR 0 4
33488: PPUSH
33489: LD_VAR 0 5
33493: PPUSH
33494: CALL_OW 488
33498: AND
33499: IFFALSE 33523
// CutTreeXYR ( unit , x , y , 12 ) ;
33501: LD_VAR 0 2
33505: PPUSH
33506: LD_VAR 0 4
33510: PPUSH
33511: LD_VAR 0 5
33515: PPUSH
33516: LD_INT 12
33518: PPUSH
33519: CALL 33536 0 4
// end ;
33523: LD_VAR 0 6
33527: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33528: LD_INT 0
33530: PPUSH
// end ;
33531: LD_VAR 0 4
33535: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33536: LD_INT 0
33538: PPUSH
33539: PPUSH
33540: PPUSH
33541: PPUSH
33542: PPUSH
33543: PPUSH
33544: PPUSH
33545: PPUSH
33546: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33547: LD_VAR 0 1
33551: NOT
33552: PUSH
33553: LD_VAR 0 2
33557: PPUSH
33558: LD_VAR 0 3
33562: PPUSH
33563: CALL_OW 488
33567: NOT
33568: OR
33569: PUSH
33570: LD_VAR 0 4
33574: NOT
33575: OR
33576: IFFALSE 33580
// exit ;
33578: GO 33920
// list := [ ] ;
33580: LD_ADDR_VAR 0 13
33584: PUSH
33585: EMPTY
33586: ST_TO_ADDR
// if x - r < 0 then
33587: LD_VAR 0 2
33591: PUSH
33592: LD_VAR 0 4
33596: MINUS
33597: PUSH
33598: LD_INT 0
33600: LESS
33601: IFFALSE 33613
// min_x := 0 else
33603: LD_ADDR_VAR 0 7
33607: PUSH
33608: LD_INT 0
33610: ST_TO_ADDR
33611: GO 33629
// min_x := x - r ;
33613: LD_ADDR_VAR 0 7
33617: PUSH
33618: LD_VAR 0 2
33622: PUSH
33623: LD_VAR 0 4
33627: MINUS
33628: ST_TO_ADDR
// if y - r < 0 then
33629: LD_VAR 0 3
33633: PUSH
33634: LD_VAR 0 4
33638: MINUS
33639: PUSH
33640: LD_INT 0
33642: LESS
33643: IFFALSE 33655
// min_y := 0 else
33645: LD_ADDR_VAR 0 8
33649: PUSH
33650: LD_INT 0
33652: ST_TO_ADDR
33653: GO 33671
// min_y := y - r ;
33655: LD_ADDR_VAR 0 8
33659: PUSH
33660: LD_VAR 0 3
33664: PUSH
33665: LD_VAR 0 4
33669: MINUS
33670: ST_TO_ADDR
// max_x := x + r ;
33671: LD_ADDR_VAR 0 9
33675: PUSH
33676: LD_VAR 0 2
33680: PUSH
33681: LD_VAR 0 4
33685: PLUS
33686: ST_TO_ADDR
// max_y := y + r ;
33687: LD_ADDR_VAR 0 10
33691: PUSH
33692: LD_VAR 0 3
33696: PUSH
33697: LD_VAR 0 4
33701: PLUS
33702: ST_TO_ADDR
// for _x = min_x to max_x do
33703: LD_ADDR_VAR 0 11
33707: PUSH
33708: DOUBLE
33709: LD_VAR 0 7
33713: DEC
33714: ST_TO_ADDR
33715: LD_VAR 0 9
33719: PUSH
33720: FOR_TO
33721: IFFALSE 33838
// for _y = min_y to max_y do
33723: LD_ADDR_VAR 0 12
33727: PUSH
33728: DOUBLE
33729: LD_VAR 0 8
33733: DEC
33734: ST_TO_ADDR
33735: LD_VAR 0 10
33739: PUSH
33740: FOR_TO
33741: IFFALSE 33834
// begin if not ValidHex ( _x , _y ) then
33743: LD_VAR 0 11
33747: PPUSH
33748: LD_VAR 0 12
33752: PPUSH
33753: CALL_OW 488
33757: NOT
33758: IFFALSE 33762
// continue ;
33760: GO 33740
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33762: LD_VAR 0 11
33766: PPUSH
33767: LD_VAR 0 12
33771: PPUSH
33772: CALL_OW 351
33776: PUSH
33777: LD_VAR 0 11
33781: PPUSH
33782: LD_VAR 0 12
33786: PPUSH
33787: CALL_OW 554
33791: AND
33792: IFFALSE 33832
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33794: LD_ADDR_VAR 0 13
33798: PUSH
33799: LD_VAR 0 13
33803: PPUSH
33804: LD_VAR 0 13
33808: PUSH
33809: LD_INT 1
33811: PLUS
33812: PPUSH
33813: LD_VAR 0 11
33817: PUSH
33818: LD_VAR 0 12
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PPUSH
33827: CALL_OW 2
33831: ST_TO_ADDR
// end ;
33832: GO 33740
33834: POP
33835: POP
33836: GO 33720
33838: POP
33839: POP
// if not list then
33840: LD_VAR 0 13
33844: NOT
33845: IFFALSE 33849
// exit ;
33847: GO 33920
// for i in list do
33849: LD_ADDR_VAR 0 6
33853: PUSH
33854: LD_VAR 0 13
33858: PUSH
33859: FOR_IN
33860: IFFALSE 33918
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33862: LD_VAR 0 1
33866: PPUSH
33867: LD_STRING M
33869: PUSH
33870: LD_VAR 0 6
33874: PUSH
33875: LD_INT 1
33877: ARRAY
33878: PUSH
33879: LD_VAR 0 6
33883: PUSH
33884: LD_INT 2
33886: ARRAY
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: LD_INT 0
33893: PUSH
33894: LD_INT 0
33896: PUSH
33897: LD_INT 0
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: PUSH
33909: EMPTY
33910: LIST
33911: PPUSH
33912: CALL_OW 447
33916: GO 33859
33918: POP
33919: POP
// end ;
33920: LD_VAR 0 5
33924: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33925: LD_EXP 126
33929: NOT
33930: IFFALSE 33980
33932: GO 33934
33934: DISABLE
// begin initHack := true ;
33935: LD_ADDR_EXP 126
33939: PUSH
33940: LD_INT 1
33942: ST_TO_ADDR
// hackTanks := [ ] ;
33943: LD_ADDR_EXP 127
33947: PUSH
33948: EMPTY
33949: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33950: LD_ADDR_EXP 128
33954: PUSH
33955: EMPTY
33956: ST_TO_ADDR
// hackLimit := 3 ;
33957: LD_ADDR_EXP 129
33961: PUSH
33962: LD_INT 3
33964: ST_TO_ADDR
// hackDist := 12 ;
33965: LD_ADDR_EXP 130
33969: PUSH
33970: LD_INT 12
33972: ST_TO_ADDR
// hackCounter := [ ] ;
33973: LD_ADDR_EXP 131
33977: PUSH
33978: EMPTY
33979: ST_TO_ADDR
// end ;
33980: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33981: LD_EXP 126
33985: PUSH
33986: LD_INT 34
33988: PUSH
33989: LD_EXP 52
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PPUSH
33998: CALL_OW 69
34002: AND
34003: IFFALSE 34258
34005: GO 34007
34007: DISABLE
34008: LD_INT 0
34010: PPUSH
34011: PPUSH
// begin enable ;
34012: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34013: LD_ADDR_VAR 0 1
34017: PUSH
34018: LD_INT 34
34020: PUSH
34021: LD_EXP 52
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PPUSH
34030: CALL_OW 69
34034: PUSH
34035: FOR_IN
34036: IFFALSE 34256
// begin if not i in hackTanks then
34038: LD_VAR 0 1
34042: PUSH
34043: LD_EXP 127
34047: IN
34048: NOT
34049: IFFALSE 34132
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34051: LD_ADDR_EXP 127
34055: PUSH
34056: LD_EXP 127
34060: PPUSH
34061: LD_EXP 127
34065: PUSH
34066: LD_INT 1
34068: PLUS
34069: PPUSH
34070: LD_VAR 0 1
34074: PPUSH
34075: CALL_OW 1
34079: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34080: LD_ADDR_EXP 128
34084: PUSH
34085: LD_EXP 128
34089: PPUSH
34090: LD_EXP 128
34094: PUSH
34095: LD_INT 1
34097: PLUS
34098: PPUSH
34099: EMPTY
34100: PPUSH
34101: CALL_OW 1
34105: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34106: LD_ADDR_EXP 131
34110: PUSH
34111: LD_EXP 131
34115: PPUSH
34116: LD_EXP 131
34120: PUSH
34121: LD_INT 1
34123: PLUS
34124: PPUSH
34125: EMPTY
34126: PPUSH
34127: CALL_OW 1
34131: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34132: LD_VAR 0 1
34136: PPUSH
34137: CALL_OW 302
34141: NOT
34142: IFFALSE 34155
// begin HackUnlinkAll ( i ) ;
34144: LD_VAR 0 1
34148: PPUSH
34149: CALL 34261 0 1
// continue ;
34153: GO 34035
// end ; HackCheckCapturedStatus ( i ) ;
34155: LD_VAR 0 1
34159: PPUSH
34160: CALL 34704 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34164: LD_ADDR_VAR 0 2
34168: PUSH
34169: LD_INT 81
34171: PUSH
34172: LD_VAR 0 1
34176: PPUSH
34177: CALL_OW 255
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 33
34188: PUSH
34189: LD_INT 3
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 91
34198: PUSH
34199: LD_VAR 0 1
34203: PUSH
34204: LD_EXP 130
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 50
34216: PUSH
34217: EMPTY
34218: LIST
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: PPUSH
34226: CALL_OW 69
34230: ST_TO_ADDR
// if not tmp then
34231: LD_VAR 0 2
34235: NOT
34236: IFFALSE 34240
// continue ;
34238: GO 34035
// HackLink ( i , tmp ) ;
34240: LD_VAR 0 1
34244: PPUSH
34245: LD_VAR 0 2
34249: PPUSH
34250: CALL 34397 0 2
// end ;
34254: GO 34035
34256: POP
34257: POP
// end ;
34258: PPOPN 2
34260: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34261: LD_INT 0
34263: PPUSH
34264: PPUSH
34265: PPUSH
// if not hack in hackTanks then
34266: LD_VAR 0 1
34270: PUSH
34271: LD_EXP 127
34275: IN
34276: NOT
34277: IFFALSE 34281
// exit ;
34279: GO 34392
// index := GetElementIndex ( hackTanks , hack ) ;
34281: LD_ADDR_VAR 0 4
34285: PUSH
34286: LD_EXP 127
34290: PPUSH
34291: LD_VAR 0 1
34295: PPUSH
34296: CALL 41866 0 2
34300: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34301: LD_EXP 128
34305: PUSH
34306: LD_VAR 0 4
34310: ARRAY
34311: IFFALSE 34392
// begin for i in hackTanksCaptured [ index ] do
34313: LD_ADDR_VAR 0 3
34317: PUSH
34318: LD_EXP 128
34322: PUSH
34323: LD_VAR 0 4
34327: ARRAY
34328: PUSH
34329: FOR_IN
34330: IFFALSE 34356
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34332: LD_VAR 0 3
34336: PUSH
34337: LD_INT 1
34339: ARRAY
34340: PPUSH
34341: LD_VAR 0 3
34345: PUSH
34346: LD_INT 2
34348: ARRAY
34349: PPUSH
34350: CALL_OW 235
34354: GO 34329
34356: POP
34357: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34358: LD_ADDR_EXP 128
34362: PUSH
34363: LD_EXP 128
34367: PPUSH
34368: LD_VAR 0 4
34372: PPUSH
34373: EMPTY
34374: PPUSH
34375: CALL_OW 1
34379: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34380: LD_VAR 0 1
34384: PPUSH
34385: LD_INT 0
34387: PPUSH
34388: CALL_OW 505
// end ; end ;
34392: LD_VAR 0 2
34396: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34397: LD_INT 0
34399: PPUSH
34400: PPUSH
34401: PPUSH
// if not hack in hackTanks or not vehicles then
34402: LD_VAR 0 1
34406: PUSH
34407: LD_EXP 127
34411: IN
34412: NOT
34413: PUSH
34414: LD_VAR 0 2
34418: NOT
34419: OR
34420: IFFALSE 34424
// exit ;
34422: GO 34699
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34424: LD_ADDR_VAR 0 2
34428: PUSH
34429: LD_VAR 0 1
34433: PPUSH
34434: LD_VAR 0 2
34438: PPUSH
34439: LD_INT 1
34441: PPUSH
34442: LD_INT 1
34444: PPUSH
34445: CALL 42516 0 4
34449: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34450: LD_ADDR_VAR 0 5
34454: PUSH
34455: LD_EXP 127
34459: PPUSH
34460: LD_VAR 0 1
34464: PPUSH
34465: CALL 41866 0 2
34469: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34470: LD_EXP 128
34474: PUSH
34475: LD_VAR 0 5
34479: ARRAY
34480: PUSH
34481: LD_EXP 129
34485: LESS
34486: IFFALSE 34675
// begin for i := 1 to vehicles do
34488: LD_ADDR_VAR 0 4
34492: PUSH
34493: DOUBLE
34494: LD_INT 1
34496: DEC
34497: ST_TO_ADDR
34498: LD_VAR 0 2
34502: PUSH
34503: FOR_TO
34504: IFFALSE 34673
// begin if hackTanksCaptured [ index ] = hackLimit then
34506: LD_EXP 128
34510: PUSH
34511: LD_VAR 0 5
34515: ARRAY
34516: PUSH
34517: LD_EXP 129
34521: EQUAL
34522: IFFALSE 34526
// break ;
34524: GO 34673
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34526: LD_ADDR_EXP 131
34530: PUSH
34531: LD_EXP 131
34535: PPUSH
34536: LD_VAR 0 5
34540: PPUSH
34541: LD_EXP 131
34545: PUSH
34546: LD_VAR 0 5
34550: ARRAY
34551: PUSH
34552: LD_INT 1
34554: PLUS
34555: PPUSH
34556: CALL_OW 1
34560: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34561: LD_ADDR_EXP 128
34565: PUSH
34566: LD_EXP 128
34570: PPUSH
34571: LD_VAR 0 5
34575: PUSH
34576: LD_EXP 128
34580: PUSH
34581: LD_VAR 0 5
34585: ARRAY
34586: PUSH
34587: LD_INT 1
34589: PLUS
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PPUSH
34595: LD_VAR 0 2
34599: PUSH
34600: LD_VAR 0 4
34604: ARRAY
34605: PUSH
34606: LD_VAR 0 2
34610: PUSH
34611: LD_VAR 0 4
34615: ARRAY
34616: PPUSH
34617: CALL_OW 255
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PPUSH
34626: CALL 42081 0 3
34630: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34631: LD_VAR 0 2
34635: PUSH
34636: LD_VAR 0 4
34640: ARRAY
34641: PPUSH
34642: LD_VAR 0 1
34646: PPUSH
34647: CALL_OW 255
34651: PPUSH
34652: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34656: LD_VAR 0 2
34660: PUSH
34661: LD_VAR 0 4
34665: ARRAY
34666: PPUSH
34667: CALL_OW 141
// end ;
34671: GO 34503
34673: POP
34674: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34675: LD_VAR 0 1
34679: PPUSH
34680: LD_EXP 128
34684: PUSH
34685: LD_VAR 0 5
34689: ARRAY
34690: PUSH
34691: LD_INT 0
34693: PLUS
34694: PPUSH
34695: CALL_OW 505
// end ;
34699: LD_VAR 0 3
34703: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34704: LD_INT 0
34706: PPUSH
34707: PPUSH
34708: PPUSH
34709: PPUSH
// if not hack in hackTanks then
34710: LD_VAR 0 1
34714: PUSH
34715: LD_EXP 127
34719: IN
34720: NOT
34721: IFFALSE 34725
// exit ;
34723: GO 34965
// index := GetElementIndex ( hackTanks , hack ) ;
34725: LD_ADDR_VAR 0 4
34729: PUSH
34730: LD_EXP 127
34734: PPUSH
34735: LD_VAR 0 1
34739: PPUSH
34740: CALL 41866 0 2
34744: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34745: LD_ADDR_VAR 0 3
34749: PUSH
34750: DOUBLE
34751: LD_EXP 128
34755: PUSH
34756: LD_VAR 0 4
34760: ARRAY
34761: INC
34762: ST_TO_ADDR
34763: LD_INT 1
34765: PUSH
34766: FOR_DOWNTO
34767: IFFALSE 34939
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34769: LD_ADDR_VAR 0 5
34773: PUSH
34774: LD_EXP 128
34778: PUSH
34779: LD_VAR 0 4
34783: ARRAY
34784: PUSH
34785: LD_VAR 0 3
34789: ARRAY
34790: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34791: LD_VAR 0 5
34795: PUSH
34796: LD_INT 1
34798: ARRAY
34799: PPUSH
34800: CALL_OW 302
34804: NOT
34805: PUSH
34806: LD_VAR 0 5
34810: PUSH
34811: LD_INT 1
34813: ARRAY
34814: PPUSH
34815: CALL_OW 255
34819: PUSH
34820: LD_VAR 0 1
34824: PPUSH
34825: CALL_OW 255
34829: NONEQUAL
34830: OR
34831: IFFALSE 34937
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34833: LD_VAR 0 5
34837: PUSH
34838: LD_INT 1
34840: ARRAY
34841: PPUSH
34842: CALL_OW 305
34846: PUSH
34847: LD_VAR 0 5
34851: PUSH
34852: LD_INT 1
34854: ARRAY
34855: PPUSH
34856: CALL_OW 255
34860: PUSH
34861: LD_VAR 0 1
34865: PPUSH
34866: CALL_OW 255
34870: EQUAL
34871: AND
34872: IFFALSE 34896
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34874: LD_VAR 0 5
34878: PUSH
34879: LD_INT 1
34881: ARRAY
34882: PPUSH
34883: LD_VAR 0 5
34887: PUSH
34888: LD_INT 2
34890: ARRAY
34891: PPUSH
34892: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34896: LD_ADDR_EXP 128
34900: PUSH
34901: LD_EXP 128
34905: PPUSH
34906: LD_VAR 0 4
34910: PPUSH
34911: LD_EXP 128
34915: PUSH
34916: LD_VAR 0 4
34920: ARRAY
34921: PPUSH
34922: LD_VAR 0 3
34926: PPUSH
34927: CALL_OW 3
34931: PPUSH
34932: CALL_OW 1
34936: ST_TO_ADDR
// end ; end ;
34937: GO 34766
34939: POP
34940: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34941: LD_VAR 0 1
34945: PPUSH
34946: LD_EXP 128
34950: PUSH
34951: LD_VAR 0 4
34955: ARRAY
34956: PUSH
34957: LD_INT 0
34959: PLUS
34960: PPUSH
34961: CALL_OW 505
// end ;
34965: LD_VAR 0 2
34969: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34970: LD_INT 0
34972: PPUSH
34973: PPUSH
34974: PPUSH
34975: PPUSH
// if not hack in hackTanks then
34976: LD_VAR 0 1
34980: PUSH
34981: LD_EXP 127
34985: IN
34986: NOT
34987: IFFALSE 34991
// exit ;
34989: GO 35076
// index := GetElementIndex ( hackTanks , hack ) ;
34991: LD_ADDR_VAR 0 5
34995: PUSH
34996: LD_EXP 127
35000: PPUSH
35001: LD_VAR 0 1
35005: PPUSH
35006: CALL 41866 0 2
35010: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35011: LD_ADDR_VAR 0 4
35015: PUSH
35016: DOUBLE
35017: LD_INT 1
35019: DEC
35020: ST_TO_ADDR
35021: LD_EXP 128
35025: PUSH
35026: LD_VAR 0 5
35030: ARRAY
35031: PUSH
35032: FOR_TO
35033: IFFALSE 35074
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35035: LD_EXP 128
35039: PUSH
35040: LD_VAR 0 5
35044: ARRAY
35045: PUSH
35046: LD_VAR 0 4
35050: ARRAY
35051: PUSH
35052: LD_INT 1
35054: ARRAY
35055: PUSH
35056: LD_VAR 0 2
35060: EQUAL
35061: IFFALSE 35072
// KillUnit ( vehicle ) ;
35063: LD_VAR 0 2
35067: PPUSH
35068: CALL_OW 66
35072: GO 35032
35074: POP
35075: POP
// end ;
35076: LD_VAR 0 3
35080: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35081: LD_EXP 132
35085: NOT
35086: IFFALSE 35121
35088: GO 35090
35090: DISABLE
// begin initMiner := true ;
35091: LD_ADDR_EXP 132
35095: PUSH
35096: LD_INT 1
35098: ST_TO_ADDR
// minersList := [ ] ;
35099: LD_ADDR_EXP 133
35103: PUSH
35104: EMPTY
35105: ST_TO_ADDR
// minerMinesList := [ ] ;
35106: LD_ADDR_EXP 134
35110: PUSH
35111: EMPTY
35112: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35113: LD_ADDR_EXP 135
35117: PUSH
35118: LD_INT 5
35120: ST_TO_ADDR
// end ;
35121: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35122: LD_EXP 132
35126: PUSH
35127: LD_INT 34
35129: PUSH
35130: LD_EXP 57
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PPUSH
35139: CALL_OW 69
35143: AND
35144: IFFALSE 35607
35146: GO 35148
35148: DISABLE
35149: LD_INT 0
35151: PPUSH
35152: PPUSH
35153: PPUSH
35154: PPUSH
// begin enable ;
35155: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35156: LD_ADDR_VAR 0 1
35160: PUSH
35161: LD_INT 34
35163: PUSH
35164: LD_EXP 57
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PPUSH
35173: CALL_OW 69
35177: PUSH
35178: FOR_IN
35179: IFFALSE 35251
// begin if not i in minersList then
35181: LD_VAR 0 1
35185: PUSH
35186: LD_EXP 133
35190: IN
35191: NOT
35192: IFFALSE 35249
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35194: LD_ADDR_EXP 133
35198: PUSH
35199: LD_EXP 133
35203: PPUSH
35204: LD_EXP 133
35208: PUSH
35209: LD_INT 1
35211: PLUS
35212: PPUSH
35213: LD_VAR 0 1
35217: PPUSH
35218: CALL_OW 1
35222: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35223: LD_ADDR_EXP 134
35227: PUSH
35228: LD_EXP 134
35232: PPUSH
35233: LD_EXP 134
35237: PUSH
35238: LD_INT 1
35240: PLUS
35241: PPUSH
35242: EMPTY
35243: PPUSH
35244: CALL_OW 1
35248: ST_TO_ADDR
// end end ;
35249: GO 35178
35251: POP
35252: POP
// for i := minerMinesList downto 1 do
35253: LD_ADDR_VAR 0 1
35257: PUSH
35258: DOUBLE
35259: LD_EXP 134
35263: INC
35264: ST_TO_ADDR
35265: LD_INT 1
35267: PUSH
35268: FOR_DOWNTO
35269: IFFALSE 35605
// begin if IsLive ( minersList [ i ] ) then
35271: LD_EXP 133
35275: PUSH
35276: LD_VAR 0 1
35280: ARRAY
35281: PPUSH
35282: CALL_OW 300
35286: IFFALSE 35314
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35288: LD_EXP 133
35292: PUSH
35293: LD_VAR 0 1
35297: ARRAY
35298: PPUSH
35299: LD_EXP 134
35303: PUSH
35304: LD_VAR 0 1
35308: ARRAY
35309: PPUSH
35310: CALL_OW 505
// if not minerMinesList [ i ] then
35314: LD_EXP 134
35318: PUSH
35319: LD_VAR 0 1
35323: ARRAY
35324: NOT
35325: IFFALSE 35329
// continue ;
35327: GO 35268
// for j := minerMinesList [ i ] downto 1 do
35329: LD_ADDR_VAR 0 2
35333: PUSH
35334: DOUBLE
35335: LD_EXP 134
35339: PUSH
35340: LD_VAR 0 1
35344: ARRAY
35345: INC
35346: ST_TO_ADDR
35347: LD_INT 1
35349: PUSH
35350: FOR_DOWNTO
35351: IFFALSE 35601
// begin side := GetSide ( minersList [ i ] ) ;
35353: LD_ADDR_VAR 0 3
35357: PUSH
35358: LD_EXP 133
35362: PUSH
35363: LD_VAR 0 1
35367: ARRAY
35368: PPUSH
35369: CALL_OW 255
35373: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35374: LD_ADDR_VAR 0 4
35378: PUSH
35379: LD_EXP 134
35383: PUSH
35384: LD_VAR 0 1
35388: ARRAY
35389: PUSH
35390: LD_VAR 0 2
35394: ARRAY
35395: PUSH
35396: LD_INT 1
35398: ARRAY
35399: PPUSH
35400: LD_EXP 134
35404: PUSH
35405: LD_VAR 0 1
35409: ARRAY
35410: PUSH
35411: LD_VAR 0 2
35415: ARRAY
35416: PUSH
35417: LD_INT 2
35419: ARRAY
35420: PPUSH
35421: CALL_OW 428
35425: ST_TO_ADDR
// if not tmp then
35426: LD_VAR 0 4
35430: NOT
35431: IFFALSE 35435
// continue ;
35433: GO 35350
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35435: LD_VAR 0 4
35439: PUSH
35440: LD_INT 81
35442: PUSH
35443: LD_VAR 0 3
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PPUSH
35452: CALL_OW 69
35456: IN
35457: PUSH
35458: LD_EXP 134
35462: PUSH
35463: LD_VAR 0 1
35467: ARRAY
35468: PUSH
35469: LD_VAR 0 2
35473: ARRAY
35474: PUSH
35475: LD_INT 1
35477: ARRAY
35478: PPUSH
35479: LD_EXP 134
35483: PUSH
35484: LD_VAR 0 1
35488: ARRAY
35489: PUSH
35490: LD_VAR 0 2
35494: ARRAY
35495: PUSH
35496: LD_INT 2
35498: ARRAY
35499: PPUSH
35500: CALL_OW 458
35504: AND
35505: IFFALSE 35599
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35507: LD_EXP 134
35511: PUSH
35512: LD_VAR 0 1
35516: ARRAY
35517: PUSH
35518: LD_VAR 0 2
35522: ARRAY
35523: PUSH
35524: LD_INT 1
35526: ARRAY
35527: PPUSH
35528: LD_EXP 134
35532: PUSH
35533: LD_VAR 0 1
35537: ARRAY
35538: PUSH
35539: LD_VAR 0 2
35543: ARRAY
35544: PUSH
35545: LD_INT 2
35547: ARRAY
35548: PPUSH
35549: LD_VAR 0 3
35553: PPUSH
35554: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35558: LD_ADDR_EXP 134
35562: PUSH
35563: LD_EXP 134
35567: PPUSH
35568: LD_VAR 0 1
35572: PPUSH
35573: LD_EXP 134
35577: PUSH
35578: LD_VAR 0 1
35582: ARRAY
35583: PPUSH
35584: LD_VAR 0 2
35588: PPUSH
35589: CALL_OW 3
35593: PPUSH
35594: CALL_OW 1
35598: ST_TO_ADDR
// end ; end ;
35599: GO 35350
35601: POP
35602: POP
// end ;
35603: GO 35268
35605: POP
35606: POP
// end ;
35607: PPOPN 4
35609: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35610: LD_INT 0
35612: PPUSH
35613: PPUSH
// result := false ;
35614: LD_ADDR_VAR 0 4
35618: PUSH
35619: LD_INT 0
35621: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35622: LD_VAR 0 1
35626: PPUSH
35627: CALL_OW 264
35631: PUSH
35632: LD_EXP 57
35636: EQUAL
35637: NOT
35638: IFFALSE 35642
// exit ;
35640: GO 35882
// index := GetElementIndex ( minersList , unit ) ;
35642: LD_ADDR_VAR 0 5
35646: PUSH
35647: LD_EXP 133
35651: PPUSH
35652: LD_VAR 0 1
35656: PPUSH
35657: CALL 41866 0 2
35661: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35662: LD_EXP 134
35666: PUSH
35667: LD_VAR 0 5
35671: ARRAY
35672: PUSH
35673: LD_EXP 135
35677: GREATEREQUAL
35678: IFFALSE 35682
// exit ;
35680: GO 35882
// ComMoveXY ( unit , x , y ) ;
35682: LD_VAR 0 1
35686: PPUSH
35687: LD_VAR 0 2
35691: PPUSH
35692: LD_VAR 0 3
35696: PPUSH
35697: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35701: LD_INT 35
35703: PPUSH
35704: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35708: LD_VAR 0 1
35712: PPUSH
35713: LD_VAR 0 2
35717: PPUSH
35718: LD_VAR 0 3
35722: PPUSH
35723: CALL 72638 0 3
35727: NOT
35728: PUSH
35729: LD_VAR 0 1
35733: PPUSH
35734: CALL_OW 314
35738: AND
35739: IFFALSE 35743
// exit ;
35741: GO 35882
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35743: LD_VAR 0 2
35747: PPUSH
35748: LD_VAR 0 3
35752: PPUSH
35753: CALL_OW 428
35757: PUSH
35758: LD_VAR 0 1
35762: EQUAL
35763: PUSH
35764: LD_VAR 0 1
35768: PPUSH
35769: CALL_OW 314
35773: NOT
35774: AND
35775: IFFALSE 35701
// PlaySoundXY ( x , y , PlantMine ) ;
35777: LD_VAR 0 2
35781: PPUSH
35782: LD_VAR 0 3
35786: PPUSH
35787: LD_STRING PlantMine
35789: PPUSH
35790: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35794: LD_VAR 0 2
35798: PPUSH
35799: LD_VAR 0 3
35803: PPUSH
35804: LD_VAR 0 1
35808: PPUSH
35809: CALL_OW 255
35813: PPUSH
35814: LD_INT 0
35816: PPUSH
35817: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35821: LD_ADDR_EXP 134
35825: PUSH
35826: LD_EXP 134
35830: PPUSH
35831: LD_VAR 0 5
35835: PUSH
35836: LD_EXP 134
35840: PUSH
35841: LD_VAR 0 5
35845: ARRAY
35846: PUSH
35847: LD_INT 1
35849: PLUS
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PPUSH
35855: LD_VAR 0 2
35859: PUSH
35860: LD_VAR 0 3
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PPUSH
35869: CALL 42081 0 3
35873: ST_TO_ADDR
// result := true ;
35874: LD_ADDR_VAR 0 4
35878: PUSH
35879: LD_INT 1
35881: ST_TO_ADDR
// end ;
35882: LD_VAR 0 4
35886: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35887: LD_INT 0
35889: PPUSH
35890: PPUSH
35891: PPUSH
// if not unit in minersList then
35892: LD_VAR 0 1
35896: PUSH
35897: LD_EXP 133
35901: IN
35902: NOT
35903: IFFALSE 35907
// exit ;
35905: GO 36299
// index := GetElementIndex ( minersList , unit ) ;
35907: LD_ADDR_VAR 0 6
35911: PUSH
35912: LD_EXP 133
35916: PPUSH
35917: LD_VAR 0 1
35921: PPUSH
35922: CALL 41866 0 2
35926: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35927: LD_ADDR_VAR 0 5
35931: PUSH
35932: DOUBLE
35933: LD_EXP 134
35937: PUSH
35938: LD_VAR 0 6
35942: ARRAY
35943: INC
35944: ST_TO_ADDR
35945: LD_INT 1
35947: PUSH
35948: FOR_DOWNTO
35949: IFFALSE 36110
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35951: LD_EXP 134
35955: PUSH
35956: LD_VAR 0 6
35960: ARRAY
35961: PUSH
35962: LD_VAR 0 5
35966: ARRAY
35967: PUSH
35968: LD_INT 1
35970: ARRAY
35971: PUSH
35972: LD_VAR 0 2
35976: EQUAL
35977: PUSH
35978: LD_EXP 134
35982: PUSH
35983: LD_VAR 0 6
35987: ARRAY
35988: PUSH
35989: LD_VAR 0 5
35993: ARRAY
35994: PUSH
35995: LD_INT 2
35997: ARRAY
35998: PUSH
35999: LD_VAR 0 3
36003: EQUAL
36004: AND
36005: IFFALSE 36108
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36007: LD_EXP 134
36011: PUSH
36012: LD_VAR 0 6
36016: ARRAY
36017: PUSH
36018: LD_VAR 0 5
36022: ARRAY
36023: PUSH
36024: LD_INT 1
36026: ARRAY
36027: PPUSH
36028: LD_EXP 134
36032: PUSH
36033: LD_VAR 0 6
36037: ARRAY
36038: PUSH
36039: LD_VAR 0 5
36043: ARRAY
36044: PUSH
36045: LD_INT 2
36047: ARRAY
36048: PPUSH
36049: LD_VAR 0 1
36053: PPUSH
36054: CALL_OW 255
36058: PPUSH
36059: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36063: LD_ADDR_EXP 134
36067: PUSH
36068: LD_EXP 134
36072: PPUSH
36073: LD_VAR 0 6
36077: PPUSH
36078: LD_EXP 134
36082: PUSH
36083: LD_VAR 0 6
36087: ARRAY
36088: PPUSH
36089: LD_VAR 0 5
36093: PPUSH
36094: CALL_OW 3
36098: PPUSH
36099: CALL_OW 1
36103: ST_TO_ADDR
// exit ;
36104: POP
36105: POP
36106: GO 36299
// end ; end ;
36108: GO 35948
36110: POP
36111: POP
// for i := minerMinesList [ index ] downto 1 do
36112: LD_ADDR_VAR 0 5
36116: PUSH
36117: DOUBLE
36118: LD_EXP 134
36122: PUSH
36123: LD_VAR 0 6
36127: ARRAY
36128: INC
36129: ST_TO_ADDR
36130: LD_INT 1
36132: PUSH
36133: FOR_DOWNTO
36134: IFFALSE 36297
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36136: LD_EXP 134
36140: PUSH
36141: LD_VAR 0 6
36145: ARRAY
36146: PUSH
36147: LD_VAR 0 5
36151: ARRAY
36152: PUSH
36153: LD_INT 1
36155: ARRAY
36156: PPUSH
36157: LD_EXP 134
36161: PUSH
36162: LD_VAR 0 6
36166: ARRAY
36167: PUSH
36168: LD_VAR 0 5
36172: ARRAY
36173: PUSH
36174: LD_INT 2
36176: ARRAY
36177: PPUSH
36178: LD_VAR 0 2
36182: PPUSH
36183: LD_VAR 0 3
36187: PPUSH
36188: CALL_OW 298
36192: PUSH
36193: LD_INT 6
36195: LESS
36196: IFFALSE 36295
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36198: LD_EXP 134
36202: PUSH
36203: LD_VAR 0 6
36207: ARRAY
36208: PUSH
36209: LD_VAR 0 5
36213: ARRAY
36214: PUSH
36215: LD_INT 1
36217: ARRAY
36218: PPUSH
36219: LD_EXP 134
36223: PUSH
36224: LD_VAR 0 6
36228: ARRAY
36229: PUSH
36230: LD_VAR 0 5
36234: ARRAY
36235: PUSH
36236: LD_INT 2
36238: ARRAY
36239: PPUSH
36240: LD_VAR 0 1
36244: PPUSH
36245: CALL_OW 255
36249: PPUSH
36250: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36254: LD_ADDR_EXP 134
36258: PUSH
36259: LD_EXP 134
36263: PPUSH
36264: LD_VAR 0 6
36268: PPUSH
36269: LD_EXP 134
36273: PUSH
36274: LD_VAR 0 6
36278: ARRAY
36279: PPUSH
36280: LD_VAR 0 5
36284: PPUSH
36285: CALL_OW 3
36289: PPUSH
36290: CALL_OW 1
36294: ST_TO_ADDR
// end ; end ;
36295: GO 36133
36297: POP
36298: POP
// end ;
36299: LD_VAR 0 4
36303: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36304: LD_INT 0
36306: PPUSH
36307: PPUSH
36308: PPUSH
36309: PPUSH
36310: PPUSH
36311: PPUSH
36312: PPUSH
36313: PPUSH
36314: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36315: LD_VAR 0 1
36319: PPUSH
36320: CALL_OW 264
36324: PUSH
36325: LD_EXP 57
36329: EQUAL
36330: NOT
36331: PUSH
36332: LD_VAR 0 1
36336: PUSH
36337: LD_EXP 133
36341: IN
36342: NOT
36343: OR
36344: IFFALSE 36348
// exit ;
36346: GO 36670
// index := GetElementIndex ( minersList , unit ) ;
36348: LD_ADDR_VAR 0 6
36352: PUSH
36353: LD_EXP 133
36357: PPUSH
36358: LD_VAR 0 1
36362: PPUSH
36363: CALL 41866 0 2
36367: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36368: LD_ADDR_VAR 0 8
36372: PUSH
36373: LD_EXP 135
36377: PUSH
36378: LD_EXP 134
36382: PUSH
36383: LD_VAR 0 6
36387: ARRAY
36388: MINUS
36389: ST_TO_ADDR
// if not minesFreeAmount then
36390: LD_VAR 0 8
36394: NOT
36395: IFFALSE 36399
// exit ;
36397: GO 36670
// tmp := [ ] ;
36399: LD_ADDR_VAR 0 7
36403: PUSH
36404: EMPTY
36405: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36406: LD_ADDR_VAR 0 5
36410: PUSH
36411: DOUBLE
36412: LD_INT 1
36414: DEC
36415: ST_TO_ADDR
36416: LD_VAR 0 8
36420: PUSH
36421: FOR_TO
36422: IFFALSE 36617
// begin _d := rand ( 0 , 5 ) ;
36424: LD_ADDR_VAR 0 11
36428: PUSH
36429: LD_INT 0
36431: PPUSH
36432: LD_INT 5
36434: PPUSH
36435: CALL_OW 12
36439: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36440: LD_ADDR_VAR 0 12
36444: PUSH
36445: LD_INT 2
36447: PPUSH
36448: LD_INT 6
36450: PPUSH
36451: CALL_OW 12
36455: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36456: LD_ADDR_VAR 0 9
36460: PUSH
36461: LD_VAR 0 2
36465: PPUSH
36466: LD_VAR 0 11
36470: PPUSH
36471: LD_VAR 0 12
36475: PPUSH
36476: CALL_OW 272
36480: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36481: LD_ADDR_VAR 0 10
36485: PUSH
36486: LD_VAR 0 3
36490: PPUSH
36491: LD_VAR 0 11
36495: PPUSH
36496: LD_VAR 0 12
36500: PPUSH
36501: CALL_OW 273
36505: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36506: LD_VAR 0 9
36510: PPUSH
36511: LD_VAR 0 10
36515: PPUSH
36516: CALL_OW 488
36520: PUSH
36521: LD_VAR 0 9
36525: PUSH
36526: LD_VAR 0 10
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_VAR 0 7
36539: IN
36540: NOT
36541: AND
36542: PUSH
36543: LD_VAR 0 9
36547: PPUSH
36548: LD_VAR 0 10
36552: PPUSH
36553: CALL_OW 458
36557: NOT
36558: AND
36559: IFFALSE 36601
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36561: LD_ADDR_VAR 0 7
36565: PUSH
36566: LD_VAR 0 7
36570: PPUSH
36571: LD_VAR 0 7
36575: PUSH
36576: LD_INT 1
36578: PLUS
36579: PPUSH
36580: LD_VAR 0 9
36584: PUSH
36585: LD_VAR 0 10
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PPUSH
36594: CALL_OW 1
36598: ST_TO_ADDR
36599: GO 36615
// i := i - 1 ;
36601: LD_ADDR_VAR 0 5
36605: PUSH
36606: LD_VAR 0 5
36610: PUSH
36611: LD_INT 1
36613: MINUS
36614: ST_TO_ADDR
// end ;
36615: GO 36421
36617: POP
36618: POP
// for i in tmp do
36619: LD_ADDR_VAR 0 5
36623: PUSH
36624: LD_VAR 0 7
36628: PUSH
36629: FOR_IN
36630: IFFALSE 36668
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36632: LD_VAR 0 1
36636: PPUSH
36637: LD_VAR 0 5
36641: PUSH
36642: LD_INT 1
36644: ARRAY
36645: PPUSH
36646: LD_VAR 0 5
36650: PUSH
36651: LD_INT 2
36653: ARRAY
36654: PPUSH
36655: CALL 35610 0 3
36659: NOT
36660: IFFALSE 36666
// exit ;
36662: POP
36663: POP
36664: GO 36670
36666: GO 36629
36668: POP
36669: POP
// end ;
36670: LD_VAR 0 4
36674: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36675: LD_INT 0
36677: PPUSH
36678: PPUSH
36679: PPUSH
36680: PPUSH
36681: PPUSH
36682: PPUSH
36683: PPUSH
// if not GetClass ( unit ) = class_sniper then
36684: LD_VAR 0 1
36688: PPUSH
36689: CALL_OW 257
36693: PUSH
36694: LD_INT 5
36696: EQUAL
36697: NOT
36698: IFFALSE 36702
// exit ;
36700: GO 37090
// dist := 8 ;
36702: LD_ADDR_VAR 0 5
36706: PUSH
36707: LD_INT 8
36709: ST_TO_ADDR
// viewRange := 12 ;
36710: LD_ADDR_VAR 0 7
36714: PUSH
36715: LD_INT 12
36717: ST_TO_ADDR
// side := GetSide ( unit ) ;
36718: LD_ADDR_VAR 0 6
36722: PUSH
36723: LD_VAR 0 1
36727: PPUSH
36728: CALL_OW 255
36732: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36733: LD_INT 61
36735: PPUSH
36736: LD_VAR 0 6
36740: PPUSH
36741: CALL_OW 321
36745: PUSH
36746: LD_INT 2
36748: EQUAL
36749: IFFALSE 36759
// viewRange := 16 ;
36751: LD_ADDR_VAR 0 7
36755: PUSH
36756: LD_INT 16
36758: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36759: LD_VAR 0 1
36763: PPUSH
36764: LD_VAR 0 2
36768: PPUSH
36769: LD_VAR 0 3
36773: PPUSH
36774: CALL_OW 297
36778: PUSH
36779: LD_VAR 0 5
36783: GREATER
36784: IFFALSE 36863
// begin ComMoveXY ( unit , x , y ) ;
36786: LD_VAR 0 1
36790: PPUSH
36791: LD_VAR 0 2
36795: PPUSH
36796: LD_VAR 0 3
36800: PPUSH
36801: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36805: LD_INT 35
36807: PPUSH
36808: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36812: LD_VAR 0 1
36816: PPUSH
36817: LD_VAR 0 2
36821: PPUSH
36822: LD_VAR 0 3
36826: PPUSH
36827: CALL 72638 0 3
36831: NOT
36832: IFFALSE 36836
// exit ;
36834: GO 37090
// until GetDistUnitXY ( unit , x , y ) < dist ;
36836: LD_VAR 0 1
36840: PPUSH
36841: LD_VAR 0 2
36845: PPUSH
36846: LD_VAR 0 3
36850: PPUSH
36851: CALL_OW 297
36855: PUSH
36856: LD_VAR 0 5
36860: LESS
36861: IFFALSE 36805
// end ; ComTurnXY ( unit , x , y ) ;
36863: LD_VAR 0 1
36867: PPUSH
36868: LD_VAR 0 2
36872: PPUSH
36873: LD_VAR 0 3
36877: PPUSH
36878: CALL_OW 118
// wait ( 5 ) ;
36882: LD_INT 5
36884: PPUSH
36885: CALL_OW 67
// _d := GetDir ( unit ) ;
36889: LD_ADDR_VAR 0 10
36893: PUSH
36894: LD_VAR 0 1
36898: PPUSH
36899: CALL_OW 254
36903: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36904: LD_ADDR_VAR 0 8
36908: PUSH
36909: LD_VAR 0 1
36913: PPUSH
36914: CALL_OW 250
36918: PPUSH
36919: LD_VAR 0 10
36923: PPUSH
36924: LD_VAR 0 5
36928: PPUSH
36929: CALL_OW 272
36933: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36934: LD_ADDR_VAR 0 9
36938: PUSH
36939: LD_VAR 0 1
36943: PPUSH
36944: CALL_OW 251
36948: PPUSH
36949: LD_VAR 0 10
36953: PPUSH
36954: LD_VAR 0 5
36958: PPUSH
36959: CALL_OW 273
36963: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36964: LD_VAR 0 8
36968: PPUSH
36969: LD_VAR 0 9
36973: PPUSH
36974: CALL_OW 488
36978: NOT
36979: IFFALSE 36983
// exit ;
36981: GO 37090
// ComAnimCustom ( unit , 1 ) ;
36983: LD_VAR 0 1
36987: PPUSH
36988: LD_INT 1
36990: PPUSH
36991: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36995: LD_VAR 0 8
36999: PPUSH
37000: LD_VAR 0 9
37004: PPUSH
37005: LD_VAR 0 6
37009: PPUSH
37010: LD_VAR 0 7
37014: PPUSH
37015: CALL_OW 330
// repeat wait ( 1 ) ;
37019: LD_INT 1
37021: PPUSH
37022: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37026: LD_VAR 0 1
37030: PPUSH
37031: CALL_OW 316
37035: PUSH
37036: LD_VAR 0 1
37040: PPUSH
37041: CALL_OW 314
37045: OR
37046: PUSH
37047: LD_VAR 0 1
37051: PPUSH
37052: CALL_OW 302
37056: NOT
37057: OR
37058: PUSH
37059: LD_VAR 0 1
37063: PPUSH
37064: CALL_OW 301
37068: OR
37069: IFFALSE 37019
// RemoveSeeing ( _x , _y , side ) ;
37071: LD_VAR 0 8
37075: PPUSH
37076: LD_VAR 0 9
37080: PPUSH
37081: LD_VAR 0 6
37085: PPUSH
37086: CALL_OW 331
// end ; end_of_file
37090: LD_VAR 0 4
37094: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37095: LD_INT 0
37097: PPUSH
37098: PPUSH
// if exist_mode then
37099: LD_VAR 0 2
37103: IFFALSE 37128
// unit := CreateCharacter ( prefix & ident ) else
37105: LD_ADDR_VAR 0 5
37109: PUSH
37110: LD_VAR 0 3
37114: PUSH
37115: LD_VAR 0 1
37119: STR
37120: PPUSH
37121: CALL_OW 34
37125: ST_TO_ADDR
37126: GO 37143
// unit := NewCharacter ( ident ) ;
37128: LD_ADDR_VAR 0 5
37132: PUSH
37133: LD_VAR 0 1
37137: PPUSH
37138: CALL_OW 25
37142: ST_TO_ADDR
// result := unit ;
37143: LD_ADDR_VAR 0 4
37147: PUSH
37148: LD_VAR 0 5
37152: ST_TO_ADDR
// end ;
37153: LD_VAR 0 4
37157: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37158: LD_INT 0
37160: PPUSH
37161: PPUSH
// if not side or not nation then
37162: LD_VAR 0 1
37166: NOT
37167: PUSH
37168: LD_VAR 0 2
37172: NOT
37173: OR
37174: IFFALSE 37178
// exit ;
37176: GO 37946
// case nation of nation_american :
37178: LD_VAR 0 2
37182: PUSH
37183: LD_INT 1
37185: DOUBLE
37186: EQUAL
37187: IFTRUE 37191
37189: GO 37405
37191: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37192: LD_ADDR_VAR 0 4
37196: PUSH
37197: LD_INT 35
37199: PUSH
37200: LD_INT 45
37202: PUSH
37203: LD_INT 46
37205: PUSH
37206: LD_INT 47
37208: PUSH
37209: LD_INT 82
37211: PUSH
37212: LD_INT 83
37214: PUSH
37215: LD_INT 84
37217: PUSH
37218: LD_INT 85
37220: PUSH
37221: LD_INT 86
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: LD_INT 2
37229: PUSH
37230: LD_INT 6
37232: PUSH
37233: LD_INT 15
37235: PUSH
37236: LD_INT 16
37238: PUSH
37239: LD_INT 7
37241: PUSH
37242: LD_INT 12
37244: PUSH
37245: LD_INT 13
37247: PUSH
37248: LD_INT 10
37250: PUSH
37251: LD_INT 14
37253: PUSH
37254: LD_INT 20
37256: PUSH
37257: LD_INT 21
37259: PUSH
37260: LD_INT 22
37262: PUSH
37263: LD_INT 25
37265: PUSH
37266: LD_INT 32
37268: PUSH
37269: LD_INT 27
37271: PUSH
37272: LD_INT 36
37274: PUSH
37275: LD_INT 69
37277: PUSH
37278: LD_INT 39
37280: PUSH
37281: LD_INT 34
37283: PUSH
37284: LD_INT 40
37286: PUSH
37287: LD_INT 48
37289: PUSH
37290: LD_INT 49
37292: PUSH
37293: LD_INT 50
37295: PUSH
37296: LD_INT 51
37298: PUSH
37299: LD_INT 52
37301: PUSH
37302: LD_INT 53
37304: PUSH
37305: LD_INT 54
37307: PUSH
37308: LD_INT 55
37310: PUSH
37311: LD_INT 56
37313: PUSH
37314: LD_INT 57
37316: PUSH
37317: LD_INT 58
37319: PUSH
37320: LD_INT 59
37322: PUSH
37323: LD_INT 60
37325: PUSH
37326: LD_INT 61
37328: PUSH
37329: LD_INT 62
37331: PUSH
37332: LD_INT 80
37334: PUSH
37335: LD_INT 82
37337: PUSH
37338: LD_INT 83
37340: PUSH
37341: LD_INT 84
37343: PUSH
37344: LD_INT 85
37346: PUSH
37347: LD_INT 86
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: ST_TO_ADDR
37403: GO 37870
37405: LD_INT 2
37407: DOUBLE
37408: EQUAL
37409: IFTRUE 37413
37411: GO 37639
37413: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37414: LD_ADDR_VAR 0 4
37418: PUSH
37419: LD_INT 35
37421: PUSH
37422: LD_INT 45
37424: PUSH
37425: LD_INT 46
37427: PUSH
37428: LD_INT 47
37430: PUSH
37431: LD_INT 82
37433: PUSH
37434: LD_INT 83
37436: PUSH
37437: LD_INT 84
37439: PUSH
37440: LD_INT 85
37442: PUSH
37443: LD_INT 87
37445: PUSH
37446: LD_INT 70
37448: PUSH
37449: LD_INT 1
37451: PUSH
37452: LD_INT 11
37454: PUSH
37455: LD_INT 3
37457: PUSH
37458: LD_INT 4
37460: PUSH
37461: LD_INT 5
37463: PUSH
37464: LD_INT 6
37466: PUSH
37467: LD_INT 15
37469: PUSH
37470: LD_INT 18
37472: PUSH
37473: LD_INT 7
37475: PUSH
37476: LD_INT 17
37478: PUSH
37479: LD_INT 8
37481: PUSH
37482: LD_INT 20
37484: PUSH
37485: LD_INT 21
37487: PUSH
37488: LD_INT 22
37490: PUSH
37491: LD_INT 72
37493: PUSH
37494: LD_INT 26
37496: PUSH
37497: LD_INT 69
37499: PUSH
37500: LD_INT 39
37502: PUSH
37503: LD_INT 40
37505: PUSH
37506: LD_INT 41
37508: PUSH
37509: LD_INT 42
37511: PUSH
37512: LD_INT 43
37514: PUSH
37515: LD_INT 48
37517: PUSH
37518: LD_INT 49
37520: PUSH
37521: LD_INT 50
37523: PUSH
37524: LD_INT 51
37526: PUSH
37527: LD_INT 52
37529: PUSH
37530: LD_INT 53
37532: PUSH
37533: LD_INT 54
37535: PUSH
37536: LD_INT 55
37538: PUSH
37539: LD_INT 56
37541: PUSH
37542: LD_INT 60
37544: PUSH
37545: LD_INT 61
37547: PUSH
37548: LD_INT 62
37550: PUSH
37551: LD_INT 66
37553: PUSH
37554: LD_INT 67
37556: PUSH
37557: LD_INT 68
37559: PUSH
37560: LD_INT 81
37562: PUSH
37563: LD_INT 82
37565: PUSH
37566: LD_INT 83
37568: PUSH
37569: LD_INT 84
37571: PUSH
37572: LD_INT 85
37574: PUSH
37575: LD_INT 87
37577: PUSH
37578: LD_INT 88
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: ST_TO_ADDR
37637: GO 37870
37639: LD_INT 3
37641: DOUBLE
37642: EQUAL
37643: IFTRUE 37647
37645: GO 37869
37647: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37648: LD_ADDR_VAR 0 4
37652: PUSH
37653: LD_INT 46
37655: PUSH
37656: LD_INT 47
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: LD_INT 2
37664: PUSH
37665: LD_INT 82
37667: PUSH
37668: LD_INT 83
37670: PUSH
37671: LD_INT 84
37673: PUSH
37674: LD_INT 85
37676: PUSH
37677: LD_INT 86
37679: PUSH
37680: LD_INT 11
37682: PUSH
37683: LD_INT 9
37685: PUSH
37686: LD_INT 20
37688: PUSH
37689: LD_INT 19
37691: PUSH
37692: LD_INT 21
37694: PUSH
37695: LD_INT 24
37697: PUSH
37698: LD_INT 22
37700: PUSH
37701: LD_INT 25
37703: PUSH
37704: LD_INT 28
37706: PUSH
37707: LD_INT 29
37709: PUSH
37710: LD_INT 30
37712: PUSH
37713: LD_INT 31
37715: PUSH
37716: LD_INT 37
37718: PUSH
37719: LD_INT 38
37721: PUSH
37722: LD_INT 32
37724: PUSH
37725: LD_INT 27
37727: PUSH
37728: LD_INT 33
37730: PUSH
37731: LD_INT 69
37733: PUSH
37734: LD_INT 39
37736: PUSH
37737: LD_INT 34
37739: PUSH
37740: LD_INT 40
37742: PUSH
37743: LD_INT 71
37745: PUSH
37746: LD_INT 23
37748: PUSH
37749: LD_INT 44
37751: PUSH
37752: LD_INT 48
37754: PUSH
37755: LD_INT 49
37757: PUSH
37758: LD_INT 50
37760: PUSH
37761: LD_INT 51
37763: PUSH
37764: LD_INT 52
37766: PUSH
37767: LD_INT 53
37769: PUSH
37770: LD_INT 54
37772: PUSH
37773: LD_INT 55
37775: PUSH
37776: LD_INT 56
37778: PUSH
37779: LD_INT 57
37781: PUSH
37782: LD_INT 58
37784: PUSH
37785: LD_INT 59
37787: PUSH
37788: LD_INT 63
37790: PUSH
37791: LD_INT 64
37793: PUSH
37794: LD_INT 65
37796: PUSH
37797: LD_INT 82
37799: PUSH
37800: LD_INT 83
37802: PUSH
37803: LD_INT 84
37805: PUSH
37806: LD_INT 85
37808: PUSH
37809: LD_INT 86
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: ST_TO_ADDR
37867: GO 37870
37869: POP
// if state > - 1 and state < 3 then
37870: LD_VAR 0 3
37874: PUSH
37875: LD_INT 1
37877: NEG
37878: GREATER
37879: PUSH
37880: LD_VAR 0 3
37884: PUSH
37885: LD_INT 3
37887: LESS
37888: AND
37889: IFFALSE 37946
// for i in result do
37891: LD_ADDR_VAR 0 5
37895: PUSH
37896: LD_VAR 0 4
37900: PUSH
37901: FOR_IN
37902: IFFALSE 37944
// if GetTech ( i , side ) <> state then
37904: LD_VAR 0 5
37908: PPUSH
37909: LD_VAR 0 1
37913: PPUSH
37914: CALL_OW 321
37918: PUSH
37919: LD_VAR 0 3
37923: NONEQUAL
37924: IFFALSE 37942
// result := result diff i ;
37926: LD_ADDR_VAR 0 4
37930: PUSH
37931: LD_VAR 0 4
37935: PUSH
37936: LD_VAR 0 5
37940: DIFF
37941: ST_TO_ADDR
37942: GO 37901
37944: POP
37945: POP
// end ;
37946: LD_VAR 0 4
37950: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37951: LD_INT 0
37953: PPUSH
37954: PPUSH
37955: PPUSH
// result := true ;
37956: LD_ADDR_VAR 0 3
37960: PUSH
37961: LD_INT 1
37963: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37964: LD_ADDR_VAR 0 5
37968: PUSH
37969: LD_VAR 0 2
37973: PPUSH
37974: CALL_OW 480
37978: ST_TO_ADDR
// if not tmp then
37979: LD_VAR 0 5
37983: NOT
37984: IFFALSE 37988
// exit ;
37986: GO 38037
// for i in tmp do
37988: LD_ADDR_VAR 0 4
37992: PUSH
37993: LD_VAR 0 5
37997: PUSH
37998: FOR_IN
37999: IFFALSE 38035
// if GetTech ( i , side ) <> state_researched then
38001: LD_VAR 0 4
38005: PPUSH
38006: LD_VAR 0 1
38010: PPUSH
38011: CALL_OW 321
38015: PUSH
38016: LD_INT 2
38018: NONEQUAL
38019: IFFALSE 38033
// begin result := false ;
38021: LD_ADDR_VAR 0 3
38025: PUSH
38026: LD_INT 0
38028: ST_TO_ADDR
// exit ;
38029: POP
38030: POP
38031: GO 38037
// end ;
38033: GO 37998
38035: POP
38036: POP
// end ;
38037: LD_VAR 0 3
38041: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38042: LD_INT 0
38044: PPUSH
38045: PPUSH
38046: PPUSH
38047: PPUSH
38048: PPUSH
38049: PPUSH
38050: PPUSH
38051: PPUSH
38052: PPUSH
38053: PPUSH
38054: PPUSH
38055: PPUSH
38056: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38057: LD_VAR 0 1
38061: NOT
38062: PUSH
38063: LD_VAR 0 1
38067: PPUSH
38068: CALL_OW 257
38072: PUSH
38073: LD_INT 9
38075: NONEQUAL
38076: OR
38077: IFFALSE 38081
// exit ;
38079: GO 38654
// side := GetSide ( unit ) ;
38081: LD_ADDR_VAR 0 9
38085: PUSH
38086: LD_VAR 0 1
38090: PPUSH
38091: CALL_OW 255
38095: ST_TO_ADDR
// tech_space := tech_spacanom ;
38096: LD_ADDR_VAR 0 12
38100: PUSH
38101: LD_INT 29
38103: ST_TO_ADDR
// tech_time := tech_taurad ;
38104: LD_ADDR_VAR 0 13
38108: PUSH
38109: LD_INT 28
38111: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38112: LD_ADDR_VAR 0 11
38116: PUSH
38117: LD_VAR 0 1
38121: PPUSH
38122: CALL_OW 310
38126: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38127: LD_VAR 0 11
38131: PPUSH
38132: CALL_OW 247
38136: PUSH
38137: LD_INT 2
38139: EQUAL
38140: IFFALSE 38144
// exit ;
38142: GO 38654
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38144: LD_ADDR_VAR 0 8
38148: PUSH
38149: LD_INT 81
38151: PUSH
38152: LD_VAR 0 9
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 3
38163: PUSH
38164: LD_INT 21
38166: PUSH
38167: LD_INT 3
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PPUSH
38182: CALL_OW 69
38186: ST_TO_ADDR
// if not tmp then
38187: LD_VAR 0 8
38191: NOT
38192: IFFALSE 38196
// exit ;
38194: GO 38654
// if in_unit then
38196: LD_VAR 0 11
38200: IFFALSE 38224
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38202: LD_ADDR_VAR 0 10
38206: PUSH
38207: LD_VAR 0 8
38211: PPUSH
38212: LD_VAR 0 11
38216: PPUSH
38217: CALL_OW 74
38221: ST_TO_ADDR
38222: GO 38244
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38224: LD_ADDR_VAR 0 10
38228: PUSH
38229: LD_VAR 0 8
38233: PPUSH
38234: LD_VAR 0 1
38238: PPUSH
38239: CALL_OW 74
38243: ST_TO_ADDR
// if not enemy then
38244: LD_VAR 0 10
38248: NOT
38249: IFFALSE 38253
// exit ;
38251: GO 38654
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38253: LD_VAR 0 11
38257: PUSH
38258: LD_VAR 0 11
38262: PPUSH
38263: LD_VAR 0 10
38267: PPUSH
38268: CALL_OW 296
38272: PUSH
38273: LD_INT 13
38275: GREATER
38276: AND
38277: PUSH
38278: LD_VAR 0 1
38282: PPUSH
38283: LD_VAR 0 10
38287: PPUSH
38288: CALL_OW 296
38292: PUSH
38293: LD_INT 12
38295: GREATER
38296: OR
38297: IFFALSE 38301
// exit ;
38299: GO 38654
// missile := [ 1 ] ;
38301: LD_ADDR_VAR 0 14
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: EMPTY
38310: LIST
38311: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38312: LD_VAR 0 9
38316: PPUSH
38317: LD_VAR 0 12
38321: PPUSH
38322: CALL_OW 325
38326: IFFALSE 38355
// missile := Insert ( missile , missile + 1 , 2 ) ;
38328: LD_ADDR_VAR 0 14
38332: PUSH
38333: LD_VAR 0 14
38337: PPUSH
38338: LD_VAR 0 14
38342: PUSH
38343: LD_INT 1
38345: PLUS
38346: PPUSH
38347: LD_INT 2
38349: PPUSH
38350: CALL_OW 2
38354: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38355: LD_VAR 0 9
38359: PPUSH
38360: LD_VAR 0 13
38364: PPUSH
38365: CALL_OW 325
38369: PUSH
38370: LD_VAR 0 10
38374: PPUSH
38375: CALL_OW 255
38379: PPUSH
38380: LD_VAR 0 13
38384: PPUSH
38385: CALL_OW 325
38389: NOT
38390: AND
38391: IFFALSE 38420
// missile := Insert ( missile , missile + 1 , 3 ) ;
38393: LD_ADDR_VAR 0 14
38397: PUSH
38398: LD_VAR 0 14
38402: PPUSH
38403: LD_VAR 0 14
38407: PUSH
38408: LD_INT 1
38410: PLUS
38411: PPUSH
38412: LD_INT 3
38414: PPUSH
38415: CALL_OW 2
38419: ST_TO_ADDR
// if missile < 2 then
38420: LD_VAR 0 14
38424: PUSH
38425: LD_INT 2
38427: LESS
38428: IFFALSE 38432
// exit ;
38430: GO 38654
// x := GetX ( enemy ) ;
38432: LD_ADDR_VAR 0 4
38436: PUSH
38437: LD_VAR 0 10
38441: PPUSH
38442: CALL_OW 250
38446: ST_TO_ADDR
// y := GetY ( enemy ) ;
38447: LD_ADDR_VAR 0 5
38451: PUSH
38452: LD_VAR 0 10
38456: PPUSH
38457: CALL_OW 251
38461: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38462: LD_ADDR_VAR 0 6
38466: PUSH
38467: LD_VAR 0 4
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PPUSH
38476: LD_INT 1
38478: PPUSH
38479: CALL_OW 12
38483: PLUS
38484: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38485: LD_ADDR_VAR 0 7
38489: PUSH
38490: LD_VAR 0 5
38494: PUSH
38495: LD_INT 1
38497: NEG
38498: PPUSH
38499: LD_INT 1
38501: PPUSH
38502: CALL_OW 12
38506: PLUS
38507: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38508: LD_VAR 0 6
38512: PPUSH
38513: LD_VAR 0 7
38517: PPUSH
38518: CALL_OW 488
38522: NOT
38523: IFFALSE 38545
// begin _x := x ;
38525: LD_ADDR_VAR 0 6
38529: PUSH
38530: LD_VAR 0 4
38534: ST_TO_ADDR
// _y := y ;
38535: LD_ADDR_VAR 0 7
38539: PUSH
38540: LD_VAR 0 5
38544: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38545: LD_ADDR_VAR 0 3
38549: PUSH
38550: LD_INT 1
38552: PPUSH
38553: LD_VAR 0 14
38557: PPUSH
38558: CALL_OW 12
38562: ST_TO_ADDR
// case i of 1 :
38563: LD_VAR 0 3
38567: PUSH
38568: LD_INT 1
38570: DOUBLE
38571: EQUAL
38572: IFTRUE 38576
38574: GO 38593
38576: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38577: LD_VAR 0 1
38581: PPUSH
38582: LD_VAR 0 10
38586: PPUSH
38587: CALL_OW 115
38591: GO 38654
38593: LD_INT 2
38595: DOUBLE
38596: EQUAL
38597: IFTRUE 38601
38599: GO 38623
38601: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38602: LD_VAR 0 1
38606: PPUSH
38607: LD_VAR 0 6
38611: PPUSH
38612: LD_VAR 0 7
38616: PPUSH
38617: CALL_OW 153
38621: GO 38654
38623: LD_INT 3
38625: DOUBLE
38626: EQUAL
38627: IFTRUE 38631
38629: GO 38653
38631: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38632: LD_VAR 0 1
38636: PPUSH
38637: LD_VAR 0 6
38641: PPUSH
38642: LD_VAR 0 7
38646: PPUSH
38647: CALL_OW 154
38651: GO 38654
38653: POP
// end ;
38654: LD_VAR 0 2
38658: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38659: LD_INT 0
38661: PPUSH
38662: PPUSH
38663: PPUSH
38664: PPUSH
38665: PPUSH
38666: PPUSH
// if not unit or not building then
38667: LD_VAR 0 1
38671: NOT
38672: PUSH
38673: LD_VAR 0 2
38677: NOT
38678: OR
38679: IFFALSE 38683
// exit ;
38681: GO 38841
// x := GetX ( building ) ;
38683: LD_ADDR_VAR 0 5
38687: PUSH
38688: LD_VAR 0 2
38692: PPUSH
38693: CALL_OW 250
38697: ST_TO_ADDR
// y := GetY ( building ) ;
38698: LD_ADDR_VAR 0 6
38702: PUSH
38703: LD_VAR 0 2
38707: PPUSH
38708: CALL_OW 251
38712: ST_TO_ADDR
// for i = 0 to 5 do
38713: LD_ADDR_VAR 0 4
38717: PUSH
38718: DOUBLE
38719: LD_INT 0
38721: DEC
38722: ST_TO_ADDR
38723: LD_INT 5
38725: PUSH
38726: FOR_TO
38727: IFFALSE 38839
// begin _x := ShiftX ( x , i , 3 ) ;
38729: LD_ADDR_VAR 0 7
38733: PUSH
38734: LD_VAR 0 5
38738: PPUSH
38739: LD_VAR 0 4
38743: PPUSH
38744: LD_INT 3
38746: PPUSH
38747: CALL_OW 272
38751: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38752: LD_ADDR_VAR 0 8
38756: PUSH
38757: LD_VAR 0 6
38761: PPUSH
38762: LD_VAR 0 4
38766: PPUSH
38767: LD_INT 3
38769: PPUSH
38770: CALL_OW 273
38774: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38775: LD_VAR 0 7
38779: PPUSH
38780: LD_VAR 0 8
38784: PPUSH
38785: CALL_OW 488
38789: NOT
38790: IFFALSE 38794
// continue ;
38792: GO 38726
// if HexInfo ( _x , _y ) = 0 then
38794: LD_VAR 0 7
38798: PPUSH
38799: LD_VAR 0 8
38803: PPUSH
38804: CALL_OW 428
38808: PUSH
38809: LD_INT 0
38811: EQUAL
38812: IFFALSE 38837
// begin ComMoveXY ( unit , _x , _y ) ;
38814: LD_VAR 0 1
38818: PPUSH
38819: LD_VAR 0 7
38823: PPUSH
38824: LD_VAR 0 8
38828: PPUSH
38829: CALL_OW 111
// exit ;
38833: POP
38834: POP
38835: GO 38841
// end ; end ;
38837: GO 38726
38839: POP
38840: POP
// end ;
38841: LD_VAR 0 3
38845: RET
// export function ScanBase ( side , base_area ) ; begin
38846: LD_INT 0
38848: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38849: LD_ADDR_VAR 0 3
38853: PUSH
38854: LD_VAR 0 2
38858: PPUSH
38859: LD_INT 81
38861: PUSH
38862: LD_VAR 0 1
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PPUSH
38871: CALL_OW 70
38875: ST_TO_ADDR
// end ;
38876: LD_VAR 0 3
38880: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38881: LD_INT 0
38883: PPUSH
38884: PPUSH
38885: PPUSH
38886: PPUSH
// result := false ;
38887: LD_ADDR_VAR 0 2
38891: PUSH
38892: LD_INT 0
38894: ST_TO_ADDR
// side := GetSide ( unit ) ;
38895: LD_ADDR_VAR 0 3
38899: PUSH
38900: LD_VAR 0 1
38904: PPUSH
38905: CALL_OW 255
38909: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38910: LD_ADDR_VAR 0 4
38914: PUSH
38915: LD_VAR 0 1
38919: PPUSH
38920: CALL_OW 248
38924: ST_TO_ADDR
// case nat of 1 :
38925: LD_VAR 0 4
38929: PUSH
38930: LD_INT 1
38932: DOUBLE
38933: EQUAL
38934: IFTRUE 38938
38936: GO 38949
38938: POP
// tech := tech_lassight ; 2 :
38939: LD_ADDR_VAR 0 5
38943: PUSH
38944: LD_INT 12
38946: ST_TO_ADDR
38947: GO 38988
38949: LD_INT 2
38951: DOUBLE
38952: EQUAL
38953: IFTRUE 38957
38955: GO 38968
38957: POP
// tech := tech_mortar ; 3 :
38958: LD_ADDR_VAR 0 5
38962: PUSH
38963: LD_INT 41
38965: ST_TO_ADDR
38966: GO 38988
38968: LD_INT 3
38970: DOUBLE
38971: EQUAL
38972: IFTRUE 38976
38974: GO 38987
38976: POP
// tech := tech_bazooka ; end ;
38977: LD_ADDR_VAR 0 5
38981: PUSH
38982: LD_INT 44
38984: ST_TO_ADDR
38985: GO 38988
38987: POP
// if Researched ( side , tech ) then
38988: LD_VAR 0 3
38992: PPUSH
38993: LD_VAR 0 5
38997: PPUSH
38998: CALL_OW 325
39002: IFFALSE 39029
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39004: LD_ADDR_VAR 0 2
39008: PUSH
39009: LD_INT 5
39011: PUSH
39012: LD_INT 8
39014: PUSH
39015: LD_INT 9
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: LIST
39022: PUSH
39023: LD_VAR 0 4
39027: ARRAY
39028: ST_TO_ADDR
// end ;
39029: LD_VAR 0 2
39033: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39034: LD_INT 0
39036: PPUSH
39037: PPUSH
39038: PPUSH
// if not mines then
39039: LD_VAR 0 2
39043: NOT
39044: IFFALSE 39048
// exit ;
39046: GO 39192
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39048: LD_ADDR_VAR 0 5
39052: PUSH
39053: LD_INT 81
39055: PUSH
39056: LD_VAR 0 1
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 3
39067: PUSH
39068: LD_INT 21
39070: PUSH
39071: LD_INT 3
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PPUSH
39086: CALL_OW 69
39090: ST_TO_ADDR
// for i in mines do
39091: LD_ADDR_VAR 0 4
39095: PUSH
39096: LD_VAR 0 2
39100: PUSH
39101: FOR_IN
39102: IFFALSE 39190
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39104: LD_VAR 0 4
39108: PUSH
39109: LD_INT 1
39111: ARRAY
39112: PPUSH
39113: LD_VAR 0 4
39117: PUSH
39118: LD_INT 2
39120: ARRAY
39121: PPUSH
39122: CALL_OW 458
39126: NOT
39127: IFFALSE 39131
// continue ;
39129: GO 39101
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39131: LD_VAR 0 4
39135: PUSH
39136: LD_INT 1
39138: ARRAY
39139: PPUSH
39140: LD_VAR 0 4
39144: PUSH
39145: LD_INT 2
39147: ARRAY
39148: PPUSH
39149: CALL_OW 428
39153: PUSH
39154: LD_VAR 0 5
39158: IN
39159: IFFALSE 39188
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39161: LD_VAR 0 4
39165: PUSH
39166: LD_INT 1
39168: ARRAY
39169: PPUSH
39170: LD_VAR 0 4
39174: PUSH
39175: LD_INT 2
39177: ARRAY
39178: PPUSH
39179: LD_VAR 0 1
39183: PPUSH
39184: CALL_OW 456
// end ;
39188: GO 39101
39190: POP
39191: POP
// end ;
39192: LD_VAR 0 3
39196: RET
// export function Count ( array ) ; var i ; begin
39197: LD_INT 0
39199: PPUSH
39200: PPUSH
// result := 0 ;
39201: LD_ADDR_VAR 0 2
39205: PUSH
39206: LD_INT 0
39208: ST_TO_ADDR
// for i in array do
39209: LD_ADDR_VAR 0 3
39213: PUSH
39214: LD_VAR 0 1
39218: PUSH
39219: FOR_IN
39220: IFFALSE 39244
// if i then
39222: LD_VAR 0 3
39226: IFFALSE 39242
// result := result + 1 ;
39228: LD_ADDR_VAR 0 2
39232: PUSH
39233: LD_VAR 0 2
39237: PUSH
39238: LD_INT 1
39240: PLUS
39241: ST_TO_ADDR
39242: GO 39219
39244: POP
39245: POP
// end ;
39246: LD_VAR 0 2
39250: RET
// export function IsEmpty ( building ) ; begin
39251: LD_INT 0
39253: PPUSH
// if not building then
39254: LD_VAR 0 1
39258: NOT
39259: IFFALSE 39263
// exit ;
39261: GO 39306
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39263: LD_ADDR_VAR 0 2
39267: PUSH
39268: LD_VAR 0 1
39272: PUSH
39273: LD_INT 22
39275: PUSH
39276: LD_VAR 0 1
39280: PPUSH
39281: CALL_OW 255
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 58
39292: PUSH
39293: EMPTY
39294: LIST
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PPUSH
39300: CALL_OW 69
39304: IN
39305: ST_TO_ADDR
// end ;
39306: LD_VAR 0 2
39310: RET
// export function IsNotFull ( building ) ; begin
39311: LD_INT 0
39313: PPUSH
// if not building then
39314: LD_VAR 0 1
39318: NOT
39319: IFFALSE 39323
// exit ;
39321: GO 39342
// result := UnitsInside ( building ) < 6 ;
39323: LD_ADDR_VAR 0 2
39327: PUSH
39328: LD_VAR 0 1
39332: PPUSH
39333: CALL_OW 313
39337: PUSH
39338: LD_INT 6
39340: LESS
39341: ST_TO_ADDR
// end ;
39342: LD_VAR 0 2
39346: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39347: LD_INT 0
39349: PPUSH
39350: PPUSH
39351: PPUSH
39352: PPUSH
// tmp := [ ] ;
39353: LD_ADDR_VAR 0 3
39357: PUSH
39358: EMPTY
39359: ST_TO_ADDR
// list := [ ] ;
39360: LD_ADDR_VAR 0 5
39364: PUSH
39365: EMPTY
39366: ST_TO_ADDR
// for i = 16 to 25 do
39367: LD_ADDR_VAR 0 4
39371: PUSH
39372: DOUBLE
39373: LD_INT 16
39375: DEC
39376: ST_TO_ADDR
39377: LD_INT 25
39379: PUSH
39380: FOR_TO
39381: IFFALSE 39454
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39383: LD_ADDR_VAR 0 3
39387: PUSH
39388: LD_VAR 0 3
39392: PUSH
39393: LD_INT 22
39395: PUSH
39396: LD_VAR 0 1
39400: PPUSH
39401: CALL_OW 255
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 91
39412: PUSH
39413: LD_VAR 0 1
39417: PUSH
39418: LD_INT 6
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 30
39428: PUSH
39429: LD_VAR 0 4
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: LIST
39442: PUSH
39443: EMPTY
39444: LIST
39445: PPUSH
39446: CALL_OW 69
39450: ADD
39451: ST_TO_ADDR
39452: GO 39380
39454: POP
39455: POP
// for i = 1 to tmp do
39456: LD_ADDR_VAR 0 4
39460: PUSH
39461: DOUBLE
39462: LD_INT 1
39464: DEC
39465: ST_TO_ADDR
39466: LD_VAR 0 3
39470: PUSH
39471: FOR_TO
39472: IFFALSE 39560
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39474: LD_ADDR_VAR 0 5
39478: PUSH
39479: LD_VAR 0 5
39483: PUSH
39484: LD_VAR 0 3
39488: PUSH
39489: LD_VAR 0 4
39493: ARRAY
39494: PPUSH
39495: CALL_OW 266
39499: PUSH
39500: LD_VAR 0 3
39504: PUSH
39505: LD_VAR 0 4
39509: ARRAY
39510: PPUSH
39511: CALL_OW 250
39515: PUSH
39516: LD_VAR 0 3
39520: PUSH
39521: LD_VAR 0 4
39525: ARRAY
39526: PPUSH
39527: CALL_OW 251
39531: PUSH
39532: LD_VAR 0 3
39536: PUSH
39537: LD_VAR 0 4
39541: ARRAY
39542: PPUSH
39543: CALL_OW 254
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: PUSH
39554: EMPTY
39555: LIST
39556: ADD
39557: ST_TO_ADDR
39558: GO 39471
39560: POP
39561: POP
// result := list ;
39562: LD_ADDR_VAR 0 2
39566: PUSH
39567: LD_VAR 0 5
39571: ST_TO_ADDR
// end ;
39572: LD_VAR 0 2
39576: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39577: LD_INT 0
39579: PPUSH
39580: PPUSH
39581: PPUSH
39582: PPUSH
39583: PPUSH
39584: PPUSH
39585: PPUSH
// if not factory then
39586: LD_VAR 0 1
39590: NOT
39591: IFFALSE 39595
// exit ;
39593: GO 40188
// if control = control_apeman then
39595: LD_VAR 0 4
39599: PUSH
39600: LD_INT 5
39602: EQUAL
39603: IFFALSE 39712
// begin tmp := UnitsInside ( factory ) ;
39605: LD_ADDR_VAR 0 8
39609: PUSH
39610: LD_VAR 0 1
39614: PPUSH
39615: CALL_OW 313
39619: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39620: LD_VAR 0 8
39624: PPUSH
39625: LD_INT 25
39627: PUSH
39628: LD_INT 12
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PPUSH
39635: CALL_OW 72
39639: NOT
39640: IFFALSE 39650
// control := control_manual ;
39642: LD_ADDR_VAR 0 4
39646: PUSH
39647: LD_INT 1
39649: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39650: LD_ADDR_VAR 0 8
39654: PUSH
39655: LD_VAR 0 1
39659: PPUSH
39660: CALL 39347 0 1
39664: ST_TO_ADDR
// if tmp then
39665: LD_VAR 0 8
39669: IFFALSE 39712
// begin for i in tmp do
39671: LD_ADDR_VAR 0 7
39675: PUSH
39676: LD_VAR 0 8
39680: PUSH
39681: FOR_IN
39682: IFFALSE 39710
// if i [ 1 ] = b_ext_radio then
39684: LD_VAR 0 7
39688: PUSH
39689: LD_INT 1
39691: ARRAY
39692: PUSH
39693: LD_INT 22
39695: EQUAL
39696: IFFALSE 39708
// begin control := control_remote ;
39698: LD_ADDR_VAR 0 4
39702: PUSH
39703: LD_INT 2
39705: ST_TO_ADDR
// break ;
39706: GO 39710
// end ;
39708: GO 39681
39710: POP
39711: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39712: LD_VAR 0 1
39716: PPUSH
39717: LD_VAR 0 2
39721: PPUSH
39722: LD_VAR 0 3
39726: PPUSH
39727: LD_VAR 0 4
39731: PPUSH
39732: LD_VAR 0 5
39736: PPUSH
39737: CALL_OW 448
39741: IFFALSE 39776
// begin result := [ chassis , engine , control , weapon ] ;
39743: LD_ADDR_VAR 0 6
39747: PUSH
39748: LD_VAR 0 2
39752: PUSH
39753: LD_VAR 0 3
39757: PUSH
39758: LD_VAR 0 4
39762: PUSH
39763: LD_VAR 0 5
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: ST_TO_ADDR
// exit ;
39774: GO 40188
// end ; _chassis := AvailableChassisList ( factory ) ;
39776: LD_ADDR_VAR 0 9
39780: PUSH
39781: LD_VAR 0 1
39785: PPUSH
39786: CALL_OW 475
39790: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39791: LD_ADDR_VAR 0 11
39795: PUSH
39796: LD_VAR 0 1
39800: PPUSH
39801: CALL_OW 476
39805: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39806: LD_ADDR_VAR 0 12
39810: PUSH
39811: LD_VAR 0 1
39815: PPUSH
39816: CALL_OW 477
39820: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39821: LD_ADDR_VAR 0 10
39825: PUSH
39826: LD_VAR 0 1
39830: PPUSH
39831: CALL_OW 478
39835: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39836: LD_VAR 0 9
39840: NOT
39841: PUSH
39842: LD_VAR 0 11
39846: NOT
39847: OR
39848: PUSH
39849: LD_VAR 0 12
39853: NOT
39854: OR
39855: PUSH
39856: LD_VAR 0 10
39860: NOT
39861: OR
39862: IFFALSE 39897
// begin result := [ chassis , engine , control , weapon ] ;
39864: LD_ADDR_VAR 0 6
39868: PUSH
39869: LD_VAR 0 2
39873: PUSH
39874: LD_VAR 0 3
39878: PUSH
39879: LD_VAR 0 4
39883: PUSH
39884: LD_VAR 0 5
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: ST_TO_ADDR
// exit ;
39895: GO 40188
// end ; if not chassis in _chassis then
39897: LD_VAR 0 2
39901: PUSH
39902: LD_VAR 0 9
39906: IN
39907: NOT
39908: IFFALSE 39934
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39910: LD_ADDR_VAR 0 2
39914: PUSH
39915: LD_VAR 0 9
39919: PUSH
39920: LD_INT 1
39922: PPUSH
39923: LD_VAR 0 9
39927: PPUSH
39928: CALL_OW 12
39932: ARRAY
39933: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39934: LD_VAR 0 2
39938: PPUSH
39939: LD_VAR 0 3
39943: PPUSH
39944: CALL 40193 0 2
39948: NOT
39949: IFFALSE 40008
// repeat engine := _engine [ 1 ] ;
39951: LD_ADDR_VAR 0 3
39955: PUSH
39956: LD_VAR 0 11
39960: PUSH
39961: LD_INT 1
39963: ARRAY
39964: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39965: LD_ADDR_VAR 0 11
39969: PUSH
39970: LD_VAR 0 11
39974: PPUSH
39975: LD_INT 1
39977: PPUSH
39978: CALL_OW 3
39982: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39983: LD_VAR 0 2
39987: PPUSH
39988: LD_VAR 0 3
39992: PPUSH
39993: CALL 40193 0 2
39997: PUSH
39998: LD_VAR 0 11
40002: PUSH
40003: EMPTY
40004: EQUAL
40005: OR
40006: IFFALSE 39951
// if not control in _control then
40008: LD_VAR 0 4
40012: PUSH
40013: LD_VAR 0 12
40017: IN
40018: NOT
40019: IFFALSE 40045
// control := _control [ rand ( 1 , _control ) ] ;
40021: LD_ADDR_VAR 0 4
40025: PUSH
40026: LD_VAR 0 12
40030: PUSH
40031: LD_INT 1
40033: PPUSH
40034: LD_VAR 0 12
40038: PPUSH
40039: CALL_OW 12
40043: ARRAY
40044: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40045: LD_VAR 0 2
40049: PPUSH
40050: LD_VAR 0 5
40054: PPUSH
40055: CALL 40413 0 2
40059: NOT
40060: IFFALSE 40119
// repeat weapon := _weapon [ 1 ] ;
40062: LD_ADDR_VAR 0 5
40066: PUSH
40067: LD_VAR 0 10
40071: PUSH
40072: LD_INT 1
40074: ARRAY
40075: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40076: LD_ADDR_VAR 0 10
40080: PUSH
40081: LD_VAR 0 10
40085: PPUSH
40086: LD_INT 1
40088: PPUSH
40089: CALL_OW 3
40093: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40094: LD_VAR 0 2
40098: PPUSH
40099: LD_VAR 0 5
40103: PPUSH
40104: CALL 40413 0 2
40108: PUSH
40109: LD_VAR 0 10
40113: PUSH
40114: EMPTY
40115: EQUAL
40116: OR
40117: IFFALSE 40062
// result := [ ] ;
40119: LD_ADDR_VAR 0 6
40123: PUSH
40124: EMPTY
40125: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40126: LD_VAR 0 1
40130: PPUSH
40131: LD_VAR 0 2
40135: PPUSH
40136: LD_VAR 0 3
40140: PPUSH
40141: LD_VAR 0 4
40145: PPUSH
40146: LD_VAR 0 5
40150: PPUSH
40151: CALL_OW 448
40155: IFFALSE 40188
// result := [ chassis , engine , control , weapon ] ;
40157: LD_ADDR_VAR 0 6
40161: PUSH
40162: LD_VAR 0 2
40166: PUSH
40167: LD_VAR 0 3
40171: PUSH
40172: LD_VAR 0 4
40176: PUSH
40177: LD_VAR 0 5
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: ST_TO_ADDR
// end ;
40188: LD_VAR 0 6
40192: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40193: LD_INT 0
40195: PPUSH
// if not chassis or not engine then
40196: LD_VAR 0 1
40200: NOT
40201: PUSH
40202: LD_VAR 0 2
40206: NOT
40207: OR
40208: IFFALSE 40212
// exit ;
40210: GO 40408
// case engine of engine_solar :
40212: LD_VAR 0 2
40216: PUSH
40217: LD_INT 2
40219: DOUBLE
40220: EQUAL
40221: IFTRUE 40225
40223: GO 40263
40225: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40226: LD_ADDR_VAR 0 3
40230: PUSH
40231: LD_INT 11
40233: PUSH
40234: LD_INT 12
40236: PUSH
40237: LD_INT 13
40239: PUSH
40240: LD_INT 14
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 2
40248: PUSH
40249: LD_INT 3
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: ST_TO_ADDR
40261: GO 40392
40263: LD_INT 1
40265: DOUBLE
40266: EQUAL
40267: IFTRUE 40271
40269: GO 40333
40271: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40272: LD_ADDR_VAR 0 3
40276: PUSH
40277: LD_INT 11
40279: PUSH
40280: LD_INT 12
40282: PUSH
40283: LD_INT 13
40285: PUSH
40286: LD_INT 14
40288: PUSH
40289: LD_INT 1
40291: PUSH
40292: LD_INT 2
40294: PUSH
40295: LD_INT 3
40297: PUSH
40298: LD_INT 4
40300: PUSH
40301: LD_INT 5
40303: PUSH
40304: LD_INT 21
40306: PUSH
40307: LD_INT 23
40309: PUSH
40310: LD_INT 22
40312: PUSH
40313: LD_INT 24
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: ST_TO_ADDR
40331: GO 40392
40333: LD_INT 3
40335: DOUBLE
40336: EQUAL
40337: IFTRUE 40341
40339: GO 40391
40341: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40342: LD_ADDR_VAR 0 3
40346: PUSH
40347: LD_INT 13
40349: PUSH
40350: LD_INT 14
40352: PUSH
40353: LD_INT 2
40355: PUSH
40356: LD_INT 3
40358: PUSH
40359: LD_INT 4
40361: PUSH
40362: LD_INT 5
40364: PUSH
40365: LD_INT 21
40367: PUSH
40368: LD_INT 22
40370: PUSH
40371: LD_INT 23
40373: PUSH
40374: LD_INT 24
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: ST_TO_ADDR
40389: GO 40392
40391: POP
// result := ( chassis in result ) ;
40392: LD_ADDR_VAR 0 3
40396: PUSH
40397: LD_VAR 0 1
40401: PUSH
40402: LD_VAR 0 3
40406: IN
40407: ST_TO_ADDR
// end ;
40408: LD_VAR 0 3
40412: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40413: LD_INT 0
40415: PPUSH
// if not chassis or not weapon then
40416: LD_VAR 0 1
40420: NOT
40421: PUSH
40422: LD_VAR 0 2
40426: NOT
40427: OR
40428: IFFALSE 40432
// exit ;
40430: GO 41494
// case weapon of us_machine_gun :
40432: LD_VAR 0 2
40436: PUSH
40437: LD_INT 2
40439: DOUBLE
40440: EQUAL
40441: IFTRUE 40445
40443: GO 40475
40445: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40446: LD_ADDR_VAR 0 3
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: LD_INT 2
40456: PUSH
40457: LD_INT 3
40459: PUSH
40460: LD_INT 4
40462: PUSH
40463: LD_INT 5
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: ST_TO_ADDR
40473: GO 41478
40475: LD_INT 3
40477: DOUBLE
40478: EQUAL
40479: IFTRUE 40483
40481: GO 40513
40483: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40484: LD_ADDR_VAR 0 3
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: LD_INT 2
40494: PUSH
40495: LD_INT 3
40497: PUSH
40498: LD_INT 4
40500: PUSH
40501: LD_INT 5
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: ST_TO_ADDR
40511: GO 41478
40513: LD_INT 11
40515: DOUBLE
40516: EQUAL
40517: IFTRUE 40521
40519: GO 40551
40521: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40522: LD_ADDR_VAR 0 3
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: LD_INT 3
40535: PUSH
40536: LD_INT 4
40538: PUSH
40539: LD_INT 5
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: ST_TO_ADDR
40549: GO 41478
40551: LD_INT 4
40553: DOUBLE
40554: EQUAL
40555: IFTRUE 40559
40557: GO 40585
40559: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40560: LD_ADDR_VAR 0 3
40564: PUSH
40565: LD_INT 2
40567: PUSH
40568: LD_INT 3
40570: PUSH
40571: LD_INT 4
40573: PUSH
40574: LD_INT 5
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: ST_TO_ADDR
40583: GO 41478
40585: LD_INT 5
40587: DOUBLE
40588: EQUAL
40589: IFTRUE 40593
40591: GO 40619
40593: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40594: LD_ADDR_VAR 0 3
40598: PUSH
40599: LD_INT 2
40601: PUSH
40602: LD_INT 3
40604: PUSH
40605: LD_INT 4
40607: PUSH
40608: LD_INT 5
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: ST_TO_ADDR
40617: GO 41478
40619: LD_INT 9
40621: DOUBLE
40622: EQUAL
40623: IFTRUE 40627
40625: GO 40653
40627: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40628: LD_ADDR_VAR 0 3
40632: PUSH
40633: LD_INT 2
40635: PUSH
40636: LD_INT 3
40638: PUSH
40639: LD_INT 4
40641: PUSH
40642: LD_INT 5
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: ST_TO_ADDR
40651: GO 41478
40653: LD_INT 7
40655: DOUBLE
40656: EQUAL
40657: IFTRUE 40661
40659: GO 40687
40661: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40662: LD_ADDR_VAR 0 3
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: LD_INT 3
40672: PUSH
40673: LD_INT 4
40675: PUSH
40676: LD_INT 5
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: ST_TO_ADDR
40685: GO 41478
40687: LD_INT 12
40689: DOUBLE
40690: EQUAL
40691: IFTRUE 40695
40693: GO 40721
40695: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40696: LD_ADDR_VAR 0 3
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: LD_INT 3
40706: PUSH
40707: LD_INT 4
40709: PUSH
40710: LD_INT 5
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: ST_TO_ADDR
40719: GO 41478
40721: LD_INT 13
40723: DOUBLE
40724: EQUAL
40725: IFTRUE 40729
40727: GO 40755
40729: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40730: LD_ADDR_VAR 0 3
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: LD_INT 3
40740: PUSH
40741: LD_INT 4
40743: PUSH
40744: LD_INT 5
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: ST_TO_ADDR
40753: GO 41478
40755: LD_INT 14
40757: DOUBLE
40758: EQUAL
40759: IFTRUE 40763
40761: GO 40781
40763: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40764: LD_ADDR_VAR 0 3
40768: PUSH
40769: LD_INT 4
40771: PUSH
40772: LD_INT 5
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: ST_TO_ADDR
40779: GO 41478
40781: LD_INT 6
40783: DOUBLE
40784: EQUAL
40785: IFTRUE 40789
40787: GO 40807
40789: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40790: LD_ADDR_VAR 0 3
40794: PUSH
40795: LD_INT 4
40797: PUSH
40798: LD_INT 5
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: ST_TO_ADDR
40805: GO 41478
40807: LD_INT 10
40809: DOUBLE
40810: EQUAL
40811: IFTRUE 40815
40813: GO 40833
40815: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40816: LD_ADDR_VAR 0 3
40820: PUSH
40821: LD_INT 4
40823: PUSH
40824: LD_INT 5
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: ST_TO_ADDR
40831: GO 41478
40833: LD_INT 22
40835: DOUBLE
40836: EQUAL
40837: IFTRUE 40841
40839: GO 40867
40841: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40842: LD_ADDR_VAR 0 3
40846: PUSH
40847: LD_INT 11
40849: PUSH
40850: LD_INT 12
40852: PUSH
40853: LD_INT 13
40855: PUSH
40856: LD_INT 14
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: ST_TO_ADDR
40865: GO 41478
40867: LD_INT 23
40869: DOUBLE
40870: EQUAL
40871: IFTRUE 40875
40873: GO 40901
40875: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40876: LD_ADDR_VAR 0 3
40880: PUSH
40881: LD_INT 11
40883: PUSH
40884: LD_INT 12
40886: PUSH
40887: LD_INT 13
40889: PUSH
40890: LD_INT 14
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: ST_TO_ADDR
40899: GO 41478
40901: LD_INT 24
40903: DOUBLE
40904: EQUAL
40905: IFTRUE 40909
40907: GO 40935
40909: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40910: LD_ADDR_VAR 0 3
40914: PUSH
40915: LD_INT 11
40917: PUSH
40918: LD_INT 12
40920: PUSH
40921: LD_INT 13
40923: PUSH
40924: LD_INT 14
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: ST_TO_ADDR
40933: GO 41478
40935: LD_INT 30
40937: DOUBLE
40938: EQUAL
40939: IFTRUE 40943
40941: GO 40969
40943: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40944: LD_ADDR_VAR 0 3
40948: PUSH
40949: LD_INT 11
40951: PUSH
40952: LD_INT 12
40954: PUSH
40955: LD_INT 13
40957: PUSH
40958: LD_INT 14
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: ST_TO_ADDR
40967: GO 41478
40969: LD_INT 25
40971: DOUBLE
40972: EQUAL
40973: IFTRUE 40977
40975: GO 40995
40977: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40978: LD_ADDR_VAR 0 3
40982: PUSH
40983: LD_INT 13
40985: PUSH
40986: LD_INT 14
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: ST_TO_ADDR
40993: GO 41478
40995: LD_INT 27
40997: DOUBLE
40998: EQUAL
40999: IFTRUE 41003
41001: GO 41021
41003: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41004: LD_ADDR_VAR 0 3
41008: PUSH
41009: LD_INT 13
41011: PUSH
41012: LD_INT 14
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: ST_TO_ADDR
41019: GO 41478
41021: LD_EXP 55
41025: DOUBLE
41026: EQUAL
41027: IFTRUE 41031
41029: GO 41057
41031: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41032: LD_ADDR_VAR 0 3
41036: PUSH
41037: LD_INT 11
41039: PUSH
41040: LD_INT 12
41042: PUSH
41043: LD_INT 13
41045: PUSH
41046: LD_INT 14
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: ST_TO_ADDR
41055: GO 41478
41057: LD_INT 28
41059: DOUBLE
41060: EQUAL
41061: IFTRUE 41065
41063: GO 41083
41065: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41066: LD_ADDR_VAR 0 3
41070: PUSH
41071: LD_INT 13
41073: PUSH
41074: LD_INT 14
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: ST_TO_ADDR
41081: GO 41478
41083: LD_INT 29
41085: DOUBLE
41086: EQUAL
41087: IFTRUE 41091
41089: GO 41109
41091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41092: LD_ADDR_VAR 0 3
41096: PUSH
41097: LD_INT 13
41099: PUSH
41100: LD_INT 14
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: ST_TO_ADDR
41107: GO 41478
41109: LD_INT 31
41111: DOUBLE
41112: EQUAL
41113: IFTRUE 41117
41115: GO 41135
41117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41118: LD_ADDR_VAR 0 3
41122: PUSH
41123: LD_INT 13
41125: PUSH
41126: LD_INT 14
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: ST_TO_ADDR
41133: GO 41478
41135: LD_INT 26
41137: DOUBLE
41138: EQUAL
41139: IFTRUE 41143
41141: GO 41161
41143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41144: LD_ADDR_VAR 0 3
41148: PUSH
41149: LD_INT 13
41151: PUSH
41152: LD_INT 14
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: ST_TO_ADDR
41159: GO 41478
41161: LD_INT 42
41163: DOUBLE
41164: EQUAL
41165: IFTRUE 41169
41167: GO 41195
41169: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41170: LD_ADDR_VAR 0 3
41174: PUSH
41175: LD_INT 21
41177: PUSH
41178: LD_INT 22
41180: PUSH
41181: LD_INT 23
41183: PUSH
41184: LD_INT 24
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: ST_TO_ADDR
41193: GO 41478
41195: LD_INT 43
41197: DOUBLE
41198: EQUAL
41199: IFTRUE 41203
41201: GO 41229
41203: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41204: LD_ADDR_VAR 0 3
41208: PUSH
41209: LD_INT 21
41211: PUSH
41212: LD_INT 22
41214: PUSH
41215: LD_INT 23
41217: PUSH
41218: LD_INT 24
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: ST_TO_ADDR
41227: GO 41478
41229: LD_INT 44
41231: DOUBLE
41232: EQUAL
41233: IFTRUE 41237
41235: GO 41263
41237: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41238: LD_ADDR_VAR 0 3
41242: PUSH
41243: LD_INT 21
41245: PUSH
41246: LD_INT 22
41248: PUSH
41249: LD_INT 23
41251: PUSH
41252: LD_INT 24
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: ST_TO_ADDR
41261: GO 41478
41263: LD_INT 45
41265: DOUBLE
41266: EQUAL
41267: IFTRUE 41271
41269: GO 41297
41271: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41272: LD_ADDR_VAR 0 3
41276: PUSH
41277: LD_INT 21
41279: PUSH
41280: LD_INT 22
41282: PUSH
41283: LD_INT 23
41285: PUSH
41286: LD_INT 24
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: ST_TO_ADDR
41295: GO 41478
41297: LD_INT 49
41299: DOUBLE
41300: EQUAL
41301: IFTRUE 41305
41303: GO 41331
41305: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41306: LD_ADDR_VAR 0 3
41310: PUSH
41311: LD_INT 21
41313: PUSH
41314: LD_INT 22
41316: PUSH
41317: LD_INT 23
41319: PUSH
41320: LD_INT 24
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: ST_TO_ADDR
41329: GO 41478
41331: LD_INT 51
41333: DOUBLE
41334: EQUAL
41335: IFTRUE 41339
41337: GO 41365
41339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41340: LD_ADDR_VAR 0 3
41344: PUSH
41345: LD_INT 21
41347: PUSH
41348: LD_INT 22
41350: PUSH
41351: LD_INT 23
41353: PUSH
41354: LD_INT 24
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: ST_TO_ADDR
41363: GO 41478
41365: LD_INT 52
41367: DOUBLE
41368: EQUAL
41369: IFTRUE 41373
41371: GO 41399
41373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41374: LD_ADDR_VAR 0 3
41378: PUSH
41379: LD_INT 21
41381: PUSH
41382: LD_INT 22
41384: PUSH
41385: LD_INT 23
41387: PUSH
41388: LD_INT 24
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: ST_TO_ADDR
41397: GO 41478
41399: LD_INT 53
41401: DOUBLE
41402: EQUAL
41403: IFTRUE 41407
41405: GO 41425
41407: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41408: LD_ADDR_VAR 0 3
41412: PUSH
41413: LD_INT 23
41415: PUSH
41416: LD_INT 24
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: ST_TO_ADDR
41423: GO 41478
41425: LD_INT 46
41427: DOUBLE
41428: EQUAL
41429: IFTRUE 41433
41431: GO 41451
41433: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41434: LD_ADDR_VAR 0 3
41438: PUSH
41439: LD_INT 23
41441: PUSH
41442: LD_INT 24
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: ST_TO_ADDR
41449: GO 41478
41451: LD_INT 47
41453: DOUBLE
41454: EQUAL
41455: IFTRUE 41459
41457: GO 41477
41459: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41460: LD_ADDR_VAR 0 3
41464: PUSH
41465: LD_INT 23
41467: PUSH
41468: LD_INT 24
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: ST_TO_ADDR
41475: GO 41478
41477: POP
// result := ( chassis in result ) ;
41478: LD_ADDR_VAR 0 3
41482: PUSH
41483: LD_VAR 0 1
41487: PUSH
41488: LD_VAR 0 3
41492: IN
41493: ST_TO_ADDR
// end ;
41494: LD_VAR 0 3
41498: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41499: LD_INT 0
41501: PPUSH
41502: PPUSH
41503: PPUSH
41504: PPUSH
41505: PPUSH
41506: PPUSH
41507: PPUSH
// result := array ;
41508: LD_ADDR_VAR 0 5
41512: PUSH
41513: LD_VAR 0 1
41517: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41518: LD_VAR 0 1
41522: NOT
41523: PUSH
41524: LD_VAR 0 2
41528: NOT
41529: OR
41530: PUSH
41531: LD_VAR 0 3
41535: NOT
41536: OR
41537: PUSH
41538: LD_VAR 0 2
41542: PUSH
41543: LD_VAR 0 1
41547: GREATER
41548: OR
41549: PUSH
41550: LD_VAR 0 3
41554: PUSH
41555: LD_VAR 0 1
41559: GREATER
41560: OR
41561: IFFALSE 41565
// exit ;
41563: GO 41861
// if direction then
41565: LD_VAR 0 4
41569: IFFALSE 41633
// begin d := 1 ;
41571: LD_ADDR_VAR 0 9
41575: PUSH
41576: LD_INT 1
41578: ST_TO_ADDR
// if i_from > i_to then
41579: LD_VAR 0 2
41583: PUSH
41584: LD_VAR 0 3
41588: GREATER
41589: IFFALSE 41615
// length := ( array - i_from ) + i_to else
41591: LD_ADDR_VAR 0 11
41595: PUSH
41596: LD_VAR 0 1
41600: PUSH
41601: LD_VAR 0 2
41605: MINUS
41606: PUSH
41607: LD_VAR 0 3
41611: PLUS
41612: ST_TO_ADDR
41613: GO 41631
// length := i_to - i_from ;
41615: LD_ADDR_VAR 0 11
41619: PUSH
41620: LD_VAR 0 3
41624: PUSH
41625: LD_VAR 0 2
41629: MINUS
41630: ST_TO_ADDR
// end else
41631: GO 41694
// begin d := - 1 ;
41633: LD_ADDR_VAR 0 9
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: ST_TO_ADDR
// if i_from > i_to then
41642: LD_VAR 0 2
41646: PUSH
41647: LD_VAR 0 3
41651: GREATER
41652: IFFALSE 41672
// length := i_from - i_to else
41654: LD_ADDR_VAR 0 11
41658: PUSH
41659: LD_VAR 0 2
41663: PUSH
41664: LD_VAR 0 3
41668: MINUS
41669: ST_TO_ADDR
41670: GO 41694
// length := ( array - i_to ) + i_from ;
41672: LD_ADDR_VAR 0 11
41676: PUSH
41677: LD_VAR 0 1
41681: PUSH
41682: LD_VAR 0 3
41686: MINUS
41687: PUSH
41688: LD_VAR 0 2
41692: PLUS
41693: ST_TO_ADDR
// end ; if not length then
41694: LD_VAR 0 11
41698: NOT
41699: IFFALSE 41703
// exit ;
41701: GO 41861
// tmp := array ;
41703: LD_ADDR_VAR 0 10
41707: PUSH
41708: LD_VAR 0 1
41712: ST_TO_ADDR
// for i = 1 to length do
41713: LD_ADDR_VAR 0 6
41717: PUSH
41718: DOUBLE
41719: LD_INT 1
41721: DEC
41722: ST_TO_ADDR
41723: LD_VAR 0 11
41727: PUSH
41728: FOR_TO
41729: IFFALSE 41849
// begin for j = 1 to array do
41731: LD_ADDR_VAR 0 7
41735: PUSH
41736: DOUBLE
41737: LD_INT 1
41739: DEC
41740: ST_TO_ADDR
41741: LD_VAR 0 1
41745: PUSH
41746: FOR_TO
41747: IFFALSE 41835
// begin k := j + d ;
41749: LD_ADDR_VAR 0 8
41753: PUSH
41754: LD_VAR 0 7
41758: PUSH
41759: LD_VAR 0 9
41763: PLUS
41764: ST_TO_ADDR
// if k > array then
41765: LD_VAR 0 8
41769: PUSH
41770: LD_VAR 0 1
41774: GREATER
41775: IFFALSE 41785
// k := 1 ;
41777: LD_ADDR_VAR 0 8
41781: PUSH
41782: LD_INT 1
41784: ST_TO_ADDR
// if not k then
41785: LD_VAR 0 8
41789: NOT
41790: IFFALSE 41802
// k := array ;
41792: LD_ADDR_VAR 0 8
41796: PUSH
41797: LD_VAR 0 1
41801: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41802: LD_ADDR_VAR 0 10
41806: PUSH
41807: LD_VAR 0 10
41811: PPUSH
41812: LD_VAR 0 8
41816: PPUSH
41817: LD_VAR 0 1
41821: PUSH
41822: LD_VAR 0 7
41826: ARRAY
41827: PPUSH
41828: CALL_OW 1
41832: ST_TO_ADDR
// end ;
41833: GO 41746
41835: POP
41836: POP
// array := tmp ;
41837: LD_ADDR_VAR 0 1
41841: PUSH
41842: LD_VAR 0 10
41846: ST_TO_ADDR
// end ;
41847: GO 41728
41849: POP
41850: POP
// result := array ;
41851: LD_ADDR_VAR 0 5
41855: PUSH
41856: LD_VAR 0 1
41860: ST_TO_ADDR
// end ;
41861: LD_VAR 0 5
41865: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41866: LD_INT 0
41868: PPUSH
41869: PPUSH
// result := 0 ;
41870: LD_ADDR_VAR 0 3
41874: PUSH
41875: LD_INT 0
41877: ST_TO_ADDR
// if not array or not value in array then
41878: LD_VAR 0 1
41882: NOT
41883: PUSH
41884: LD_VAR 0 2
41888: PUSH
41889: LD_VAR 0 1
41893: IN
41894: NOT
41895: OR
41896: IFFALSE 41900
// exit ;
41898: GO 41954
// for i = 1 to array do
41900: LD_ADDR_VAR 0 4
41904: PUSH
41905: DOUBLE
41906: LD_INT 1
41908: DEC
41909: ST_TO_ADDR
41910: LD_VAR 0 1
41914: PUSH
41915: FOR_TO
41916: IFFALSE 41952
// if value = array [ i ] then
41918: LD_VAR 0 2
41922: PUSH
41923: LD_VAR 0 1
41927: PUSH
41928: LD_VAR 0 4
41932: ARRAY
41933: EQUAL
41934: IFFALSE 41950
// begin result := i ;
41936: LD_ADDR_VAR 0 3
41940: PUSH
41941: LD_VAR 0 4
41945: ST_TO_ADDR
// exit ;
41946: POP
41947: POP
41948: GO 41954
// end ;
41950: GO 41915
41952: POP
41953: POP
// end ;
41954: LD_VAR 0 3
41958: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41959: LD_INT 0
41961: PPUSH
// vc_chassis := chassis ;
41962: LD_ADDR_OWVAR 37
41966: PUSH
41967: LD_VAR 0 1
41971: ST_TO_ADDR
// vc_engine := engine ;
41972: LD_ADDR_OWVAR 39
41976: PUSH
41977: LD_VAR 0 2
41981: ST_TO_ADDR
// vc_control := control ;
41982: LD_ADDR_OWVAR 38
41986: PUSH
41987: LD_VAR 0 3
41991: ST_TO_ADDR
// vc_weapon := weapon ;
41992: LD_ADDR_OWVAR 40
41996: PUSH
41997: LD_VAR 0 4
42001: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42002: LD_ADDR_OWVAR 41
42006: PUSH
42007: LD_VAR 0 5
42011: ST_TO_ADDR
// end ;
42012: LD_VAR 0 6
42016: RET
// export function WantPlant ( unit ) ; var task ; begin
42017: LD_INT 0
42019: PPUSH
42020: PPUSH
// result := false ;
42021: LD_ADDR_VAR 0 2
42025: PUSH
42026: LD_INT 0
42028: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42029: LD_ADDR_VAR 0 3
42033: PUSH
42034: LD_VAR 0 1
42038: PPUSH
42039: CALL_OW 437
42043: ST_TO_ADDR
// if task then
42044: LD_VAR 0 3
42048: IFFALSE 42076
// if task [ 1 ] [ 1 ] = p then
42050: LD_VAR 0 3
42054: PUSH
42055: LD_INT 1
42057: ARRAY
42058: PUSH
42059: LD_INT 1
42061: ARRAY
42062: PUSH
42063: LD_STRING p
42065: EQUAL
42066: IFFALSE 42076
// result := true ;
42068: LD_ADDR_VAR 0 2
42072: PUSH
42073: LD_INT 1
42075: ST_TO_ADDR
// end ;
42076: LD_VAR 0 2
42080: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42081: LD_INT 0
42083: PPUSH
42084: PPUSH
42085: PPUSH
42086: PPUSH
// if pos < 1 then
42087: LD_VAR 0 2
42091: PUSH
42092: LD_INT 1
42094: LESS
42095: IFFALSE 42099
// exit ;
42097: GO 42402
// if pos = 1 then
42099: LD_VAR 0 2
42103: PUSH
42104: LD_INT 1
42106: EQUAL
42107: IFFALSE 42140
// result := Replace ( arr , pos [ 1 ] , value ) else
42109: LD_ADDR_VAR 0 4
42113: PUSH
42114: LD_VAR 0 1
42118: PPUSH
42119: LD_VAR 0 2
42123: PUSH
42124: LD_INT 1
42126: ARRAY
42127: PPUSH
42128: LD_VAR 0 3
42132: PPUSH
42133: CALL_OW 1
42137: ST_TO_ADDR
42138: GO 42402
// begin tmp := arr ;
42140: LD_ADDR_VAR 0 6
42144: PUSH
42145: LD_VAR 0 1
42149: ST_TO_ADDR
// s_arr := [ tmp ] ;
42150: LD_ADDR_VAR 0 7
42154: PUSH
42155: LD_VAR 0 6
42159: PUSH
42160: EMPTY
42161: LIST
42162: ST_TO_ADDR
// for i = 1 to pos - 1 do
42163: LD_ADDR_VAR 0 5
42167: PUSH
42168: DOUBLE
42169: LD_INT 1
42171: DEC
42172: ST_TO_ADDR
42173: LD_VAR 0 2
42177: PUSH
42178: LD_INT 1
42180: MINUS
42181: PUSH
42182: FOR_TO
42183: IFFALSE 42228
// begin tmp := tmp [ pos [ i ] ] ;
42185: LD_ADDR_VAR 0 6
42189: PUSH
42190: LD_VAR 0 6
42194: PUSH
42195: LD_VAR 0 2
42199: PUSH
42200: LD_VAR 0 5
42204: ARRAY
42205: ARRAY
42206: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42207: LD_ADDR_VAR 0 7
42211: PUSH
42212: LD_VAR 0 7
42216: PUSH
42217: LD_VAR 0 6
42221: PUSH
42222: EMPTY
42223: LIST
42224: ADD
42225: ST_TO_ADDR
// end ;
42226: GO 42182
42228: POP
42229: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42230: LD_ADDR_VAR 0 6
42234: PUSH
42235: LD_VAR 0 6
42239: PPUSH
42240: LD_VAR 0 2
42244: PUSH
42245: LD_VAR 0 2
42249: ARRAY
42250: PPUSH
42251: LD_VAR 0 3
42255: PPUSH
42256: CALL_OW 1
42260: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42261: LD_ADDR_VAR 0 7
42265: PUSH
42266: LD_VAR 0 7
42270: PPUSH
42271: LD_VAR 0 7
42275: PPUSH
42276: LD_VAR 0 6
42280: PPUSH
42281: CALL_OW 1
42285: ST_TO_ADDR
// for i = s_arr downto 2 do
42286: LD_ADDR_VAR 0 5
42290: PUSH
42291: DOUBLE
42292: LD_VAR 0 7
42296: INC
42297: ST_TO_ADDR
42298: LD_INT 2
42300: PUSH
42301: FOR_DOWNTO
42302: IFFALSE 42386
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42304: LD_ADDR_VAR 0 6
42308: PUSH
42309: LD_VAR 0 7
42313: PUSH
42314: LD_VAR 0 5
42318: PUSH
42319: LD_INT 1
42321: MINUS
42322: ARRAY
42323: PPUSH
42324: LD_VAR 0 2
42328: PUSH
42329: LD_VAR 0 5
42333: PUSH
42334: LD_INT 1
42336: MINUS
42337: ARRAY
42338: PPUSH
42339: LD_VAR 0 7
42343: PUSH
42344: LD_VAR 0 5
42348: ARRAY
42349: PPUSH
42350: CALL_OW 1
42354: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42355: LD_ADDR_VAR 0 7
42359: PUSH
42360: LD_VAR 0 7
42364: PPUSH
42365: LD_VAR 0 5
42369: PUSH
42370: LD_INT 1
42372: MINUS
42373: PPUSH
42374: LD_VAR 0 6
42378: PPUSH
42379: CALL_OW 1
42383: ST_TO_ADDR
// end ;
42384: GO 42301
42386: POP
42387: POP
// result := s_arr [ 1 ] ;
42388: LD_ADDR_VAR 0 4
42392: PUSH
42393: LD_VAR 0 7
42397: PUSH
42398: LD_INT 1
42400: ARRAY
42401: ST_TO_ADDR
// end ; end ;
42402: LD_VAR 0 4
42406: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42407: LD_INT 0
42409: PPUSH
42410: PPUSH
// if not list then
42411: LD_VAR 0 1
42415: NOT
42416: IFFALSE 42420
// exit ;
42418: GO 42511
// i := list [ pos1 ] ;
42420: LD_ADDR_VAR 0 5
42424: PUSH
42425: LD_VAR 0 1
42429: PUSH
42430: LD_VAR 0 2
42434: ARRAY
42435: ST_TO_ADDR
// if not i then
42436: LD_VAR 0 5
42440: NOT
42441: IFFALSE 42445
// exit ;
42443: GO 42511
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42445: LD_ADDR_VAR 0 1
42449: PUSH
42450: LD_VAR 0 1
42454: PPUSH
42455: LD_VAR 0 2
42459: PPUSH
42460: LD_VAR 0 1
42464: PUSH
42465: LD_VAR 0 3
42469: ARRAY
42470: PPUSH
42471: CALL_OW 1
42475: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42476: LD_ADDR_VAR 0 1
42480: PUSH
42481: LD_VAR 0 1
42485: PPUSH
42486: LD_VAR 0 3
42490: PPUSH
42491: LD_VAR 0 5
42495: PPUSH
42496: CALL_OW 1
42500: ST_TO_ADDR
// result := list ;
42501: LD_ADDR_VAR 0 4
42505: PUSH
42506: LD_VAR 0 1
42510: ST_TO_ADDR
// end ;
42511: LD_VAR 0 4
42515: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42516: LD_INT 0
42518: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42519: LD_ADDR_VAR 0 5
42523: PUSH
42524: LD_VAR 0 1
42528: PPUSH
42529: CALL_OW 250
42533: PPUSH
42534: LD_VAR 0 1
42538: PPUSH
42539: CALL_OW 251
42543: PPUSH
42544: LD_VAR 0 2
42548: PPUSH
42549: LD_VAR 0 3
42553: PPUSH
42554: LD_VAR 0 4
42558: PPUSH
42559: CALL 42569 0 5
42563: ST_TO_ADDR
// end ;
42564: LD_VAR 0 5
42568: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42569: LD_INT 0
42571: PPUSH
42572: PPUSH
42573: PPUSH
42574: PPUSH
// if not list then
42575: LD_VAR 0 3
42579: NOT
42580: IFFALSE 42584
// exit ;
42582: GO 42972
// result := [ ] ;
42584: LD_ADDR_VAR 0 6
42588: PUSH
42589: EMPTY
42590: ST_TO_ADDR
// for i in list do
42591: LD_ADDR_VAR 0 7
42595: PUSH
42596: LD_VAR 0 3
42600: PUSH
42601: FOR_IN
42602: IFFALSE 42804
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42604: LD_ADDR_VAR 0 9
42608: PUSH
42609: LD_VAR 0 7
42613: PPUSH
42614: LD_VAR 0 1
42618: PPUSH
42619: LD_VAR 0 2
42623: PPUSH
42624: CALL_OW 297
42628: ST_TO_ADDR
// if not result then
42629: LD_VAR 0 6
42633: NOT
42634: IFFALSE 42660
// result := [ [ i , tmp ] ] else
42636: LD_ADDR_VAR 0 6
42640: PUSH
42641: LD_VAR 0 7
42645: PUSH
42646: LD_VAR 0 9
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: EMPTY
42656: LIST
42657: ST_TO_ADDR
42658: GO 42802
// begin if result [ result ] [ 2 ] < tmp then
42660: LD_VAR 0 6
42664: PUSH
42665: LD_VAR 0 6
42669: ARRAY
42670: PUSH
42671: LD_INT 2
42673: ARRAY
42674: PUSH
42675: LD_VAR 0 9
42679: LESS
42680: IFFALSE 42722
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42682: LD_ADDR_VAR 0 6
42686: PUSH
42687: LD_VAR 0 6
42691: PPUSH
42692: LD_VAR 0 6
42696: PUSH
42697: LD_INT 1
42699: PLUS
42700: PPUSH
42701: LD_VAR 0 7
42705: PUSH
42706: LD_VAR 0 9
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PPUSH
42715: CALL_OW 2
42719: ST_TO_ADDR
42720: GO 42802
// for j = 1 to result do
42722: LD_ADDR_VAR 0 8
42726: PUSH
42727: DOUBLE
42728: LD_INT 1
42730: DEC
42731: ST_TO_ADDR
42732: LD_VAR 0 6
42736: PUSH
42737: FOR_TO
42738: IFFALSE 42800
// begin if tmp < result [ j ] [ 2 ] then
42740: LD_VAR 0 9
42744: PUSH
42745: LD_VAR 0 6
42749: PUSH
42750: LD_VAR 0 8
42754: ARRAY
42755: PUSH
42756: LD_INT 2
42758: ARRAY
42759: LESS
42760: IFFALSE 42798
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42762: LD_ADDR_VAR 0 6
42766: PUSH
42767: LD_VAR 0 6
42771: PPUSH
42772: LD_VAR 0 8
42776: PPUSH
42777: LD_VAR 0 7
42781: PUSH
42782: LD_VAR 0 9
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PPUSH
42791: CALL_OW 2
42795: ST_TO_ADDR
// break ;
42796: GO 42800
// end ; end ;
42798: GO 42737
42800: POP
42801: POP
// end ; end ;
42802: GO 42601
42804: POP
42805: POP
// if result and not asc then
42806: LD_VAR 0 6
42810: PUSH
42811: LD_VAR 0 4
42815: NOT
42816: AND
42817: IFFALSE 42892
// begin tmp := result ;
42819: LD_ADDR_VAR 0 9
42823: PUSH
42824: LD_VAR 0 6
42828: ST_TO_ADDR
// for i = tmp downto 1 do
42829: LD_ADDR_VAR 0 7
42833: PUSH
42834: DOUBLE
42835: LD_VAR 0 9
42839: INC
42840: ST_TO_ADDR
42841: LD_INT 1
42843: PUSH
42844: FOR_DOWNTO
42845: IFFALSE 42890
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42847: LD_ADDR_VAR 0 6
42851: PUSH
42852: LD_VAR 0 6
42856: PPUSH
42857: LD_VAR 0 9
42861: PUSH
42862: LD_VAR 0 7
42866: MINUS
42867: PUSH
42868: LD_INT 1
42870: PLUS
42871: PPUSH
42872: LD_VAR 0 9
42876: PUSH
42877: LD_VAR 0 7
42881: ARRAY
42882: PPUSH
42883: CALL_OW 1
42887: ST_TO_ADDR
42888: GO 42844
42890: POP
42891: POP
// end ; tmp := [ ] ;
42892: LD_ADDR_VAR 0 9
42896: PUSH
42897: EMPTY
42898: ST_TO_ADDR
// if mode then
42899: LD_VAR 0 5
42903: IFFALSE 42972
// begin for i = 1 to result do
42905: LD_ADDR_VAR 0 7
42909: PUSH
42910: DOUBLE
42911: LD_INT 1
42913: DEC
42914: ST_TO_ADDR
42915: LD_VAR 0 6
42919: PUSH
42920: FOR_TO
42921: IFFALSE 42960
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42923: LD_ADDR_VAR 0 9
42927: PUSH
42928: LD_VAR 0 9
42932: PPUSH
42933: LD_VAR 0 7
42937: PPUSH
42938: LD_VAR 0 6
42942: PUSH
42943: LD_VAR 0 7
42947: ARRAY
42948: PUSH
42949: LD_INT 1
42951: ARRAY
42952: PPUSH
42953: CALL_OW 1
42957: ST_TO_ADDR
42958: GO 42920
42960: POP
42961: POP
// result := tmp ;
42962: LD_ADDR_VAR 0 6
42966: PUSH
42967: LD_VAR 0 9
42971: ST_TO_ADDR
// end ; end ;
42972: LD_VAR 0 6
42976: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42977: LD_INT 0
42979: PPUSH
42980: PPUSH
42981: PPUSH
42982: PPUSH
42983: PPUSH
42984: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42985: LD_ADDR_VAR 0 5
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: EMPTY
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: ST_TO_ADDR
// if not x or not y then
43007: LD_VAR 0 2
43011: NOT
43012: PUSH
43013: LD_VAR 0 3
43017: NOT
43018: OR
43019: IFFALSE 43023
// exit ;
43021: GO 44675
// if not range then
43023: LD_VAR 0 4
43027: NOT
43028: IFFALSE 43038
// range := 10 ;
43030: LD_ADDR_VAR 0 4
43034: PUSH
43035: LD_INT 10
43037: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43038: LD_ADDR_VAR 0 8
43042: PUSH
43043: LD_INT 81
43045: PUSH
43046: LD_VAR 0 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 92
43057: PUSH
43058: LD_VAR 0 2
43062: PUSH
43063: LD_VAR 0 3
43067: PUSH
43068: LD_VAR 0 4
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 3
43081: PUSH
43082: LD_INT 21
43084: PUSH
43085: LD_INT 3
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: LIST
43100: PPUSH
43101: CALL_OW 69
43105: ST_TO_ADDR
// if not tmp then
43106: LD_VAR 0 8
43110: NOT
43111: IFFALSE 43115
// exit ;
43113: GO 44675
// for i in tmp do
43115: LD_ADDR_VAR 0 6
43119: PUSH
43120: LD_VAR 0 8
43124: PUSH
43125: FOR_IN
43126: IFFALSE 44650
// begin points := [ 0 , 0 , 0 ] ;
43128: LD_ADDR_VAR 0 9
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: LIST
43146: ST_TO_ADDR
// bpoints := 1 ;
43147: LD_ADDR_VAR 0 10
43151: PUSH
43152: LD_INT 1
43154: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43155: LD_VAR 0 6
43159: PPUSH
43160: CALL_OW 247
43164: PUSH
43165: LD_INT 1
43167: DOUBLE
43168: EQUAL
43169: IFTRUE 43173
43171: GO 43751
43173: POP
// begin if GetClass ( i ) = 1 then
43174: LD_VAR 0 6
43178: PPUSH
43179: CALL_OW 257
43183: PUSH
43184: LD_INT 1
43186: EQUAL
43187: IFFALSE 43208
// points := [ 10 , 5 , 3 ] ;
43189: LD_ADDR_VAR 0 9
43193: PUSH
43194: LD_INT 10
43196: PUSH
43197: LD_INT 5
43199: PUSH
43200: LD_INT 3
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: LIST
43207: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43208: LD_VAR 0 6
43212: PPUSH
43213: CALL_OW 257
43217: PUSH
43218: LD_INT 2
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: LD_INT 4
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: LIST
43231: IN
43232: IFFALSE 43253
// points := [ 3 , 2 , 1 ] ;
43234: LD_ADDR_VAR 0 9
43238: PUSH
43239: LD_INT 3
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: LIST
43252: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43253: LD_VAR 0 6
43257: PPUSH
43258: CALL_OW 257
43262: PUSH
43263: LD_INT 5
43265: EQUAL
43266: IFFALSE 43287
// points := [ 130 , 5 , 2 ] ;
43268: LD_ADDR_VAR 0 9
43272: PUSH
43273: LD_INT 130
43275: PUSH
43276: LD_INT 5
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: LIST
43286: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43287: LD_VAR 0 6
43291: PPUSH
43292: CALL_OW 257
43296: PUSH
43297: LD_INT 8
43299: EQUAL
43300: IFFALSE 43321
// points := [ 35 , 35 , 30 ] ;
43302: LD_ADDR_VAR 0 9
43306: PUSH
43307: LD_INT 35
43309: PUSH
43310: LD_INT 35
43312: PUSH
43313: LD_INT 30
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: LIST
43320: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43321: LD_VAR 0 6
43325: PPUSH
43326: CALL_OW 257
43330: PUSH
43331: LD_INT 9
43333: EQUAL
43334: IFFALSE 43355
// points := [ 20 , 55 , 40 ] ;
43336: LD_ADDR_VAR 0 9
43340: PUSH
43341: LD_INT 20
43343: PUSH
43344: LD_INT 55
43346: PUSH
43347: LD_INT 40
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: LIST
43354: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43355: LD_VAR 0 6
43359: PPUSH
43360: CALL_OW 257
43364: PUSH
43365: LD_INT 12
43367: PUSH
43368: LD_INT 16
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: IN
43375: IFFALSE 43396
// points := [ 5 , 3 , 2 ] ;
43377: LD_ADDR_VAR 0 9
43381: PUSH
43382: LD_INT 5
43384: PUSH
43385: LD_INT 3
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: LIST
43395: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43396: LD_VAR 0 6
43400: PPUSH
43401: CALL_OW 257
43405: PUSH
43406: LD_INT 17
43408: EQUAL
43409: IFFALSE 43430
// points := [ 100 , 50 , 75 ] ;
43411: LD_ADDR_VAR 0 9
43415: PUSH
43416: LD_INT 100
43418: PUSH
43419: LD_INT 50
43421: PUSH
43422: LD_INT 75
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: LIST
43429: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43430: LD_VAR 0 6
43434: PPUSH
43435: CALL_OW 257
43439: PUSH
43440: LD_INT 15
43442: EQUAL
43443: IFFALSE 43464
// points := [ 10 , 5 , 3 ] ;
43445: LD_ADDR_VAR 0 9
43449: PUSH
43450: LD_INT 10
43452: PUSH
43453: LD_INT 5
43455: PUSH
43456: LD_INT 3
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: LIST
43463: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43464: LD_VAR 0 6
43468: PPUSH
43469: CALL_OW 257
43473: PUSH
43474: LD_INT 14
43476: EQUAL
43477: IFFALSE 43498
// points := [ 10 , 0 , 0 ] ;
43479: LD_ADDR_VAR 0 9
43483: PUSH
43484: LD_INT 10
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43498: LD_VAR 0 6
43502: PPUSH
43503: CALL_OW 257
43507: PUSH
43508: LD_INT 11
43510: EQUAL
43511: IFFALSE 43532
// points := [ 30 , 10 , 5 ] ;
43513: LD_ADDR_VAR 0 9
43517: PUSH
43518: LD_INT 30
43520: PUSH
43521: LD_INT 10
43523: PUSH
43524: LD_INT 5
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: LIST
43531: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43532: LD_VAR 0 1
43536: PPUSH
43537: LD_INT 5
43539: PPUSH
43540: CALL_OW 321
43544: PUSH
43545: LD_INT 2
43547: EQUAL
43548: IFFALSE 43565
// bpoints := bpoints * 1.8 ;
43550: LD_ADDR_VAR 0 10
43554: PUSH
43555: LD_VAR 0 10
43559: PUSH
43560: LD_REAL  1.80000000000000E+0000
43563: MUL
43564: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43565: LD_VAR 0 6
43569: PPUSH
43570: CALL_OW 257
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: LD_INT 3
43583: PUSH
43584: LD_INT 4
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: IN
43593: PUSH
43594: LD_VAR 0 1
43598: PPUSH
43599: LD_INT 51
43601: PPUSH
43602: CALL_OW 321
43606: PUSH
43607: LD_INT 2
43609: EQUAL
43610: AND
43611: IFFALSE 43628
// bpoints := bpoints * 1.2 ;
43613: LD_ADDR_VAR 0 10
43617: PUSH
43618: LD_VAR 0 10
43622: PUSH
43623: LD_REAL  1.20000000000000E+0000
43626: MUL
43627: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43628: LD_VAR 0 6
43632: PPUSH
43633: CALL_OW 257
43637: PUSH
43638: LD_INT 5
43640: PUSH
43641: LD_INT 7
43643: PUSH
43644: LD_INT 9
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: LIST
43651: IN
43652: PUSH
43653: LD_VAR 0 1
43657: PPUSH
43658: LD_INT 52
43660: PPUSH
43661: CALL_OW 321
43665: PUSH
43666: LD_INT 2
43668: EQUAL
43669: AND
43670: IFFALSE 43687
// bpoints := bpoints * 1.5 ;
43672: LD_ADDR_VAR 0 10
43676: PUSH
43677: LD_VAR 0 10
43681: PUSH
43682: LD_REAL  1.50000000000000E+0000
43685: MUL
43686: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43687: LD_VAR 0 1
43691: PPUSH
43692: LD_INT 66
43694: PPUSH
43695: CALL_OW 321
43699: PUSH
43700: LD_INT 2
43702: EQUAL
43703: IFFALSE 43720
// bpoints := bpoints * 1.1 ;
43705: LD_ADDR_VAR 0 10
43709: PUSH
43710: LD_VAR 0 10
43714: PUSH
43715: LD_REAL  1.10000000000000E+0000
43718: MUL
43719: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43720: LD_ADDR_VAR 0 10
43724: PUSH
43725: LD_VAR 0 10
43729: PUSH
43730: LD_VAR 0 6
43734: PPUSH
43735: LD_INT 1
43737: PPUSH
43738: CALL_OW 259
43742: PUSH
43743: LD_REAL  1.15000000000000E+0000
43746: MUL
43747: MUL
43748: ST_TO_ADDR
// end ; unit_vehicle :
43749: GO 44579
43751: LD_INT 2
43753: DOUBLE
43754: EQUAL
43755: IFTRUE 43759
43757: GO 44567
43759: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43760: LD_VAR 0 6
43764: PPUSH
43765: CALL_OW 264
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: LD_INT 42
43775: PUSH
43776: LD_INT 24
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: LIST
43783: IN
43784: IFFALSE 43805
// points := [ 25 , 5 , 3 ] ;
43786: LD_ADDR_VAR 0 9
43790: PUSH
43791: LD_INT 25
43793: PUSH
43794: LD_INT 5
43796: PUSH
43797: LD_INT 3
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: LIST
43804: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43805: LD_VAR 0 6
43809: PPUSH
43810: CALL_OW 264
43814: PUSH
43815: LD_INT 4
43817: PUSH
43818: LD_INT 43
43820: PUSH
43821: LD_INT 25
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: LIST
43828: IN
43829: IFFALSE 43850
// points := [ 40 , 15 , 5 ] ;
43831: LD_ADDR_VAR 0 9
43835: PUSH
43836: LD_INT 40
43838: PUSH
43839: LD_INT 15
43841: PUSH
43842: LD_INT 5
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: LIST
43849: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43850: LD_VAR 0 6
43854: PPUSH
43855: CALL_OW 264
43859: PUSH
43860: LD_INT 3
43862: PUSH
43863: LD_INT 23
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: IN
43870: IFFALSE 43891
// points := [ 7 , 25 , 8 ] ;
43872: LD_ADDR_VAR 0 9
43876: PUSH
43877: LD_INT 7
43879: PUSH
43880: LD_INT 25
43882: PUSH
43883: LD_INT 8
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43891: LD_VAR 0 6
43895: PPUSH
43896: CALL_OW 264
43900: PUSH
43901: LD_INT 5
43903: PUSH
43904: LD_INT 27
43906: PUSH
43907: LD_INT 44
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: LIST
43914: IN
43915: IFFALSE 43936
// points := [ 14 , 50 , 16 ] ;
43917: LD_ADDR_VAR 0 9
43921: PUSH
43922: LD_INT 14
43924: PUSH
43925: LD_INT 50
43927: PUSH
43928: LD_INT 16
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: LIST
43935: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43936: LD_VAR 0 6
43940: PPUSH
43941: CALL_OW 264
43945: PUSH
43946: LD_INT 6
43948: PUSH
43949: LD_INT 46
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: IN
43956: IFFALSE 43977
// points := [ 32 , 120 , 70 ] ;
43958: LD_ADDR_VAR 0 9
43962: PUSH
43963: LD_INT 32
43965: PUSH
43966: LD_INT 120
43968: PUSH
43969: LD_INT 70
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: LIST
43976: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43977: LD_VAR 0 6
43981: PPUSH
43982: CALL_OW 264
43986: PUSH
43987: LD_INT 7
43989: PUSH
43990: LD_INT 28
43992: PUSH
43993: LD_INT 45
43995: PUSH
43996: LD_EXP 55
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: IN
44007: IFFALSE 44028
// points := [ 35 , 20 , 45 ] ;
44009: LD_ADDR_VAR 0 9
44013: PUSH
44014: LD_INT 35
44016: PUSH
44017: LD_INT 20
44019: PUSH
44020: LD_INT 45
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: LIST
44027: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44028: LD_VAR 0 6
44032: PPUSH
44033: CALL_OW 264
44037: PUSH
44038: LD_INT 47
44040: PUSH
44041: EMPTY
44042: LIST
44043: IN
44044: IFFALSE 44065
// points := [ 67 , 45 , 75 ] ;
44046: LD_ADDR_VAR 0 9
44050: PUSH
44051: LD_INT 67
44053: PUSH
44054: LD_INT 45
44056: PUSH
44057: LD_INT 75
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: LIST
44064: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44065: LD_VAR 0 6
44069: PPUSH
44070: CALL_OW 264
44074: PUSH
44075: LD_INT 26
44077: PUSH
44078: EMPTY
44079: LIST
44080: IN
44081: IFFALSE 44102
// points := [ 120 , 30 , 80 ] ;
44083: LD_ADDR_VAR 0 9
44087: PUSH
44088: LD_INT 120
44090: PUSH
44091: LD_INT 30
44093: PUSH
44094: LD_INT 80
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: LIST
44101: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44102: LD_VAR 0 6
44106: PPUSH
44107: CALL_OW 264
44111: PUSH
44112: LD_INT 22
44114: PUSH
44115: EMPTY
44116: LIST
44117: IN
44118: IFFALSE 44139
// points := [ 40 , 1 , 1 ] ;
44120: LD_ADDR_VAR 0 9
44124: PUSH
44125: LD_INT 40
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44139: LD_VAR 0 6
44143: PPUSH
44144: CALL_OW 264
44148: PUSH
44149: LD_INT 29
44151: PUSH
44152: EMPTY
44153: LIST
44154: IN
44155: IFFALSE 44176
// points := [ 70 , 200 , 400 ] ;
44157: LD_ADDR_VAR 0 9
44161: PUSH
44162: LD_INT 70
44164: PUSH
44165: LD_INT 200
44167: PUSH
44168: LD_INT 400
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: LIST
44175: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44176: LD_VAR 0 6
44180: PPUSH
44181: CALL_OW 264
44185: PUSH
44186: LD_INT 14
44188: PUSH
44189: LD_INT 53
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: IN
44196: IFFALSE 44217
// points := [ 40 , 10 , 20 ] ;
44198: LD_ADDR_VAR 0 9
44202: PUSH
44203: LD_INT 40
44205: PUSH
44206: LD_INT 10
44208: PUSH
44209: LD_INT 20
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: LIST
44216: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44217: LD_VAR 0 6
44221: PPUSH
44222: CALL_OW 264
44226: PUSH
44227: LD_INT 9
44229: PUSH
44230: EMPTY
44231: LIST
44232: IN
44233: IFFALSE 44254
// points := [ 5 , 70 , 20 ] ;
44235: LD_ADDR_VAR 0 9
44239: PUSH
44240: LD_INT 5
44242: PUSH
44243: LD_INT 70
44245: PUSH
44246: LD_INT 20
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: LIST
44253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44254: LD_VAR 0 6
44258: PPUSH
44259: CALL_OW 264
44263: PUSH
44264: LD_INT 10
44266: PUSH
44267: EMPTY
44268: LIST
44269: IN
44270: IFFALSE 44291
// points := [ 35 , 110 , 70 ] ;
44272: LD_ADDR_VAR 0 9
44276: PUSH
44277: LD_INT 35
44279: PUSH
44280: LD_INT 110
44282: PUSH
44283: LD_INT 70
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: LIST
44290: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44291: LD_VAR 0 6
44295: PPUSH
44296: CALL_OW 265
44300: PUSH
44301: LD_INT 25
44303: EQUAL
44304: IFFALSE 44325
// points := [ 80 , 65 , 100 ] ;
44306: LD_ADDR_VAR 0 9
44310: PUSH
44311: LD_INT 80
44313: PUSH
44314: LD_INT 65
44316: PUSH
44317: LD_INT 100
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: LIST
44324: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44325: LD_VAR 0 6
44329: PPUSH
44330: CALL_OW 263
44334: PUSH
44335: LD_INT 1
44337: EQUAL
44338: IFFALSE 44373
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44340: LD_ADDR_VAR 0 10
44344: PUSH
44345: LD_VAR 0 10
44349: PUSH
44350: LD_VAR 0 6
44354: PPUSH
44355: CALL_OW 311
44359: PPUSH
44360: LD_INT 3
44362: PPUSH
44363: CALL_OW 259
44367: PUSH
44368: LD_INT 4
44370: MUL
44371: MUL
44372: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44373: LD_VAR 0 6
44377: PPUSH
44378: CALL_OW 263
44382: PUSH
44383: LD_INT 2
44385: EQUAL
44386: IFFALSE 44437
// begin j := IsControledBy ( i ) ;
44388: LD_ADDR_VAR 0 7
44392: PUSH
44393: LD_VAR 0 6
44397: PPUSH
44398: CALL_OW 312
44402: ST_TO_ADDR
// if j then
44403: LD_VAR 0 7
44407: IFFALSE 44437
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44409: LD_ADDR_VAR 0 10
44413: PUSH
44414: LD_VAR 0 10
44418: PUSH
44419: LD_VAR 0 7
44423: PPUSH
44424: LD_INT 3
44426: PPUSH
44427: CALL_OW 259
44431: PUSH
44432: LD_INT 3
44434: MUL
44435: MUL
44436: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44437: LD_VAR 0 6
44441: PPUSH
44442: CALL_OW 264
44446: PUSH
44447: LD_INT 5
44449: PUSH
44450: LD_INT 6
44452: PUSH
44453: LD_INT 46
44455: PUSH
44456: LD_INT 44
44458: PUSH
44459: LD_INT 47
44461: PUSH
44462: LD_INT 45
44464: PUSH
44465: LD_INT 28
44467: PUSH
44468: LD_INT 7
44470: PUSH
44471: LD_INT 27
44473: PUSH
44474: LD_INT 29
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: IN
44489: PUSH
44490: LD_VAR 0 1
44494: PPUSH
44495: LD_INT 52
44497: PPUSH
44498: CALL_OW 321
44502: PUSH
44503: LD_INT 2
44505: EQUAL
44506: AND
44507: IFFALSE 44524
// bpoints := bpoints * 1.2 ;
44509: LD_ADDR_VAR 0 10
44513: PUSH
44514: LD_VAR 0 10
44518: PUSH
44519: LD_REAL  1.20000000000000E+0000
44522: MUL
44523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44524: LD_VAR 0 6
44528: PPUSH
44529: CALL_OW 264
44533: PUSH
44534: LD_INT 6
44536: PUSH
44537: LD_INT 46
44539: PUSH
44540: LD_INT 47
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: LIST
44547: IN
44548: IFFALSE 44565
// bpoints := bpoints * 1.2 ;
44550: LD_ADDR_VAR 0 10
44554: PUSH
44555: LD_VAR 0 10
44559: PUSH
44560: LD_REAL  1.20000000000000E+0000
44563: MUL
44564: ST_TO_ADDR
// end ; unit_building :
44565: GO 44579
44567: LD_INT 3
44569: DOUBLE
44570: EQUAL
44571: IFTRUE 44575
44573: GO 44578
44575: POP
// ; end ;
44576: GO 44579
44578: POP
// for j = 1 to 3 do
44579: LD_ADDR_VAR 0 7
44583: PUSH
44584: DOUBLE
44585: LD_INT 1
44587: DEC
44588: ST_TO_ADDR
44589: LD_INT 3
44591: PUSH
44592: FOR_TO
44593: IFFALSE 44646
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44595: LD_ADDR_VAR 0 5
44599: PUSH
44600: LD_VAR 0 5
44604: PPUSH
44605: LD_VAR 0 7
44609: PPUSH
44610: LD_VAR 0 5
44614: PUSH
44615: LD_VAR 0 7
44619: ARRAY
44620: PUSH
44621: LD_VAR 0 9
44625: PUSH
44626: LD_VAR 0 7
44630: ARRAY
44631: PUSH
44632: LD_VAR 0 10
44636: MUL
44637: PLUS
44638: PPUSH
44639: CALL_OW 1
44643: ST_TO_ADDR
44644: GO 44592
44646: POP
44647: POP
// end ;
44648: GO 43125
44650: POP
44651: POP
// result := Replace ( result , 4 , tmp ) ;
44652: LD_ADDR_VAR 0 5
44656: PUSH
44657: LD_VAR 0 5
44661: PPUSH
44662: LD_INT 4
44664: PPUSH
44665: LD_VAR 0 8
44669: PPUSH
44670: CALL_OW 1
44674: ST_TO_ADDR
// end ;
44675: LD_VAR 0 5
44679: RET
// export function DangerAtRange ( unit , range ) ; begin
44680: LD_INT 0
44682: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44683: LD_ADDR_VAR 0 3
44687: PUSH
44688: LD_VAR 0 1
44692: PPUSH
44693: CALL_OW 255
44697: PPUSH
44698: LD_VAR 0 1
44702: PPUSH
44703: CALL_OW 250
44707: PPUSH
44708: LD_VAR 0 1
44712: PPUSH
44713: CALL_OW 251
44717: PPUSH
44718: LD_VAR 0 2
44722: PPUSH
44723: CALL 42977 0 4
44727: ST_TO_ADDR
// end ;
44728: LD_VAR 0 3
44732: RET
// export function DangerInArea ( side , area ) ; begin
44733: LD_INT 0
44735: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44736: LD_ADDR_VAR 0 3
44740: PUSH
44741: LD_VAR 0 2
44745: PPUSH
44746: LD_INT 81
44748: PUSH
44749: LD_VAR 0 1
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PPUSH
44758: CALL_OW 70
44762: ST_TO_ADDR
// end ;
44763: LD_VAR 0 3
44767: RET
// export function IsExtension ( b ) ; begin
44768: LD_INT 0
44770: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44771: LD_ADDR_VAR 0 2
44775: PUSH
44776: LD_VAR 0 1
44780: PUSH
44781: LD_INT 23
44783: PUSH
44784: LD_INT 20
44786: PUSH
44787: LD_INT 22
44789: PUSH
44790: LD_INT 17
44792: PUSH
44793: LD_INT 24
44795: PUSH
44796: LD_INT 21
44798: PUSH
44799: LD_INT 19
44801: PUSH
44802: LD_INT 16
44804: PUSH
44805: LD_INT 25
44807: PUSH
44808: LD_INT 18
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: IN
44823: ST_TO_ADDR
// end ;
44824: LD_VAR 0 2
44828: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44829: LD_INT 0
44831: PPUSH
44832: PPUSH
44833: PPUSH
// result := [ ] ;
44834: LD_ADDR_VAR 0 4
44838: PUSH
44839: EMPTY
44840: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44841: LD_ADDR_VAR 0 5
44845: PUSH
44846: LD_VAR 0 2
44850: PPUSH
44851: LD_INT 21
44853: PUSH
44854: LD_INT 3
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PPUSH
44861: CALL_OW 70
44865: ST_TO_ADDR
// if not tmp then
44866: LD_VAR 0 5
44870: NOT
44871: IFFALSE 44875
// exit ;
44873: GO 44939
// if checkLink then
44875: LD_VAR 0 3
44879: IFFALSE 44929
// begin for i in tmp do
44881: LD_ADDR_VAR 0 6
44885: PUSH
44886: LD_VAR 0 5
44890: PUSH
44891: FOR_IN
44892: IFFALSE 44927
// if GetBase ( i ) <> base then
44894: LD_VAR 0 6
44898: PPUSH
44899: CALL_OW 274
44903: PUSH
44904: LD_VAR 0 1
44908: NONEQUAL
44909: IFFALSE 44925
// ComLinkToBase ( base , i ) ;
44911: LD_VAR 0 1
44915: PPUSH
44916: LD_VAR 0 6
44920: PPUSH
44921: CALL_OW 169
44925: GO 44891
44927: POP
44928: POP
// end ; result := tmp ;
44929: LD_ADDR_VAR 0 4
44933: PUSH
44934: LD_VAR 0 5
44938: ST_TO_ADDR
// end ;
44939: LD_VAR 0 4
44943: RET
// export function ComComplete ( units , b ) ; var i ; begin
44944: LD_INT 0
44946: PPUSH
44947: PPUSH
// if not units then
44948: LD_VAR 0 1
44952: NOT
44953: IFFALSE 44957
// exit ;
44955: GO 45047
// for i in units do
44957: LD_ADDR_VAR 0 4
44961: PUSH
44962: LD_VAR 0 1
44966: PUSH
44967: FOR_IN
44968: IFFALSE 45045
// if BuildingStatus ( b ) = bs_build then
44970: LD_VAR 0 2
44974: PPUSH
44975: CALL_OW 461
44979: PUSH
44980: LD_INT 1
44982: EQUAL
44983: IFFALSE 45043
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44985: LD_VAR 0 4
44989: PPUSH
44990: LD_STRING h
44992: PUSH
44993: LD_VAR 0 2
44997: PPUSH
44998: CALL_OW 250
45002: PUSH
45003: LD_VAR 0 2
45007: PPUSH
45008: CALL_OW 251
45012: PUSH
45013: LD_VAR 0 2
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: PUSH
45036: EMPTY
45037: LIST
45038: PPUSH
45039: CALL_OW 446
45043: GO 44967
45045: POP
45046: POP
// end ;
45047: LD_VAR 0 3
45051: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45052: LD_INT 0
45054: PPUSH
45055: PPUSH
45056: PPUSH
45057: PPUSH
45058: PPUSH
45059: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45060: LD_VAR 0 1
45064: NOT
45065: PUSH
45066: LD_VAR 0 1
45070: PPUSH
45071: CALL_OW 263
45075: PUSH
45076: LD_INT 2
45078: NONEQUAL
45079: OR
45080: IFFALSE 45084
// exit ;
45082: GO 45400
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45084: LD_ADDR_VAR 0 6
45088: PUSH
45089: LD_INT 22
45091: PUSH
45092: LD_VAR 0 1
45096: PPUSH
45097: CALL_OW 255
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: LD_INT 30
45111: PUSH
45112: LD_INT 36
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 34
45121: PUSH
45122: LD_INT 31
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: LIST
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PPUSH
45138: CALL_OW 69
45142: ST_TO_ADDR
// if not tmp then
45143: LD_VAR 0 6
45147: NOT
45148: IFFALSE 45152
// exit ;
45150: GO 45400
// result := [ ] ;
45152: LD_ADDR_VAR 0 2
45156: PUSH
45157: EMPTY
45158: ST_TO_ADDR
// for i in tmp do
45159: LD_ADDR_VAR 0 3
45163: PUSH
45164: LD_VAR 0 6
45168: PUSH
45169: FOR_IN
45170: IFFALSE 45241
// begin t := UnitsInside ( i ) ;
45172: LD_ADDR_VAR 0 4
45176: PUSH
45177: LD_VAR 0 3
45181: PPUSH
45182: CALL_OW 313
45186: ST_TO_ADDR
// if t then
45187: LD_VAR 0 4
45191: IFFALSE 45239
// for j in t do
45193: LD_ADDR_VAR 0 7
45197: PUSH
45198: LD_VAR 0 4
45202: PUSH
45203: FOR_IN
45204: IFFALSE 45237
// result := Replace ( result , result + 1 , j ) ;
45206: LD_ADDR_VAR 0 2
45210: PUSH
45211: LD_VAR 0 2
45215: PPUSH
45216: LD_VAR 0 2
45220: PUSH
45221: LD_INT 1
45223: PLUS
45224: PPUSH
45225: LD_VAR 0 7
45229: PPUSH
45230: CALL_OW 1
45234: ST_TO_ADDR
45235: GO 45203
45237: POP
45238: POP
// end ;
45239: GO 45169
45241: POP
45242: POP
// if not result then
45243: LD_VAR 0 2
45247: NOT
45248: IFFALSE 45252
// exit ;
45250: GO 45400
// mech := result [ 1 ] ;
45252: LD_ADDR_VAR 0 5
45256: PUSH
45257: LD_VAR 0 2
45261: PUSH
45262: LD_INT 1
45264: ARRAY
45265: ST_TO_ADDR
// if result > 1 then
45266: LD_VAR 0 2
45270: PUSH
45271: LD_INT 1
45273: GREATER
45274: IFFALSE 45386
// begin for i = 2 to result do
45276: LD_ADDR_VAR 0 3
45280: PUSH
45281: DOUBLE
45282: LD_INT 2
45284: DEC
45285: ST_TO_ADDR
45286: LD_VAR 0 2
45290: PUSH
45291: FOR_TO
45292: IFFALSE 45384
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45294: LD_ADDR_VAR 0 4
45298: PUSH
45299: LD_VAR 0 2
45303: PUSH
45304: LD_VAR 0 3
45308: ARRAY
45309: PPUSH
45310: LD_INT 3
45312: PPUSH
45313: CALL_OW 259
45317: PUSH
45318: LD_VAR 0 2
45322: PUSH
45323: LD_VAR 0 3
45327: ARRAY
45328: PPUSH
45329: CALL_OW 432
45333: MINUS
45334: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45335: LD_VAR 0 4
45339: PUSH
45340: LD_VAR 0 5
45344: PPUSH
45345: LD_INT 3
45347: PPUSH
45348: CALL_OW 259
45352: PUSH
45353: LD_VAR 0 5
45357: PPUSH
45358: CALL_OW 432
45362: MINUS
45363: GREATEREQUAL
45364: IFFALSE 45382
// mech := result [ i ] ;
45366: LD_ADDR_VAR 0 5
45370: PUSH
45371: LD_VAR 0 2
45375: PUSH
45376: LD_VAR 0 3
45380: ARRAY
45381: ST_TO_ADDR
// end ;
45382: GO 45291
45384: POP
45385: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45386: LD_VAR 0 1
45390: PPUSH
45391: LD_VAR 0 5
45395: PPUSH
45396: CALL_OW 135
// end ;
45400: LD_VAR 0 2
45404: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45405: LD_INT 0
45407: PPUSH
45408: PPUSH
45409: PPUSH
45410: PPUSH
45411: PPUSH
45412: PPUSH
45413: PPUSH
45414: PPUSH
45415: PPUSH
45416: PPUSH
45417: PPUSH
45418: PPUSH
45419: PPUSH
// result := [ ] ;
45420: LD_ADDR_VAR 0 7
45424: PUSH
45425: EMPTY
45426: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45427: LD_VAR 0 1
45431: PPUSH
45432: CALL_OW 266
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: IN
45447: NOT
45448: IFFALSE 45452
// exit ;
45450: GO 47086
// if name then
45452: LD_VAR 0 3
45456: IFFALSE 45472
// SetBName ( base_dep , name ) ;
45458: LD_VAR 0 1
45462: PPUSH
45463: LD_VAR 0 3
45467: PPUSH
45468: CALL_OW 500
// base := GetBase ( base_dep ) ;
45472: LD_ADDR_VAR 0 15
45476: PUSH
45477: LD_VAR 0 1
45481: PPUSH
45482: CALL_OW 274
45486: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45487: LD_ADDR_VAR 0 16
45491: PUSH
45492: LD_VAR 0 1
45496: PPUSH
45497: CALL_OW 255
45501: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45502: LD_ADDR_VAR 0 17
45506: PUSH
45507: LD_VAR 0 1
45511: PPUSH
45512: CALL_OW 248
45516: ST_TO_ADDR
// if sources then
45517: LD_VAR 0 5
45521: IFFALSE 45568
// for i = 1 to 3 do
45523: LD_ADDR_VAR 0 8
45527: PUSH
45528: DOUBLE
45529: LD_INT 1
45531: DEC
45532: ST_TO_ADDR
45533: LD_INT 3
45535: PUSH
45536: FOR_TO
45537: IFFALSE 45566
// AddResourceType ( base , i , sources [ i ] ) ;
45539: LD_VAR 0 15
45543: PPUSH
45544: LD_VAR 0 8
45548: PPUSH
45549: LD_VAR 0 5
45553: PUSH
45554: LD_VAR 0 8
45558: ARRAY
45559: PPUSH
45560: CALL_OW 276
45564: GO 45536
45566: POP
45567: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45568: LD_ADDR_VAR 0 18
45572: PUSH
45573: LD_VAR 0 15
45577: PPUSH
45578: LD_VAR 0 2
45582: PPUSH
45583: LD_INT 1
45585: PPUSH
45586: CALL 44829 0 3
45590: ST_TO_ADDR
// InitHc ;
45591: CALL_OW 19
// InitUc ;
45595: CALL_OW 18
// uc_side := side ;
45599: LD_ADDR_OWVAR 20
45603: PUSH
45604: LD_VAR 0 16
45608: ST_TO_ADDR
// uc_nation := nation ;
45609: LD_ADDR_OWVAR 21
45613: PUSH
45614: LD_VAR 0 17
45618: ST_TO_ADDR
// if buildings then
45619: LD_VAR 0 18
45623: IFFALSE 46945
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45625: LD_ADDR_VAR 0 19
45629: PUSH
45630: LD_VAR 0 18
45634: PPUSH
45635: LD_INT 2
45637: PUSH
45638: LD_INT 30
45640: PUSH
45641: LD_INT 29
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 30
45650: PUSH
45651: LD_INT 30
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: LIST
45662: PPUSH
45663: CALL_OW 72
45667: ST_TO_ADDR
// if tmp then
45668: LD_VAR 0 19
45672: IFFALSE 45720
// for i in tmp do
45674: LD_ADDR_VAR 0 8
45678: PUSH
45679: LD_VAR 0 19
45683: PUSH
45684: FOR_IN
45685: IFFALSE 45718
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45687: LD_VAR 0 8
45691: PPUSH
45692: CALL_OW 250
45696: PPUSH
45697: LD_VAR 0 8
45701: PPUSH
45702: CALL_OW 251
45706: PPUSH
45707: LD_VAR 0 16
45711: PPUSH
45712: CALL_OW 441
45716: GO 45684
45718: POP
45719: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45720: LD_VAR 0 18
45724: PPUSH
45725: LD_INT 2
45727: PUSH
45728: LD_INT 30
45730: PUSH
45731: LD_INT 32
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 30
45740: PUSH
45741: LD_INT 33
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: LIST
45752: PPUSH
45753: CALL_OW 72
45757: IFFALSE 45845
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45759: LD_ADDR_VAR 0 8
45763: PUSH
45764: LD_VAR 0 18
45768: PPUSH
45769: LD_INT 2
45771: PUSH
45772: LD_INT 30
45774: PUSH
45775: LD_INT 32
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 30
45784: PUSH
45785: LD_INT 33
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: LIST
45796: PPUSH
45797: CALL_OW 72
45801: PUSH
45802: FOR_IN
45803: IFFALSE 45843
// begin if not GetBWeapon ( i ) then
45805: LD_VAR 0 8
45809: PPUSH
45810: CALL_OW 269
45814: NOT
45815: IFFALSE 45841
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45817: LD_VAR 0 8
45821: PPUSH
45822: LD_VAR 0 8
45826: PPUSH
45827: LD_VAR 0 2
45831: PPUSH
45832: CALL 47091 0 2
45836: PPUSH
45837: CALL_OW 431
// end ;
45841: GO 45802
45843: POP
45844: POP
// end ; for i = 1 to personel do
45845: LD_ADDR_VAR 0 8
45849: PUSH
45850: DOUBLE
45851: LD_INT 1
45853: DEC
45854: ST_TO_ADDR
45855: LD_VAR 0 6
45859: PUSH
45860: FOR_TO
45861: IFFALSE 46925
// begin if i > 4 then
45863: LD_VAR 0 8
45867: PUSH
45868: LD_INT 4
45870: GREATER
45871: IFFALSE 45875
// break ;
45873: GO 46925
// case i of 1 :
45875: LD_VAR 0 8
45879: PUSH
45880: LD_INT 1
45882: DOUBLE
45883: EQUAL
45884: IFTRUE 45888
45886: GO 45968
45888: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45889: LD_ADDR_VAR 0 12
45893: PUSH
45894: LD_VAR 0 18
45898: PPUSH
45899: LD_INT 22
45901: PUSH
45902: LD_VAR 0 16
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 58
45913: PUSH
45914: EMPTY
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: LD_INT 30
45922: PUSH
45923: LD_INT 32
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 30
45932: PUSH
45933: LD_INT 4
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 30
45942: PUSH
45943: LD_INT 5
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: LIST
45960: PPUSH
45961: CALL_OW 72
45965: ST_TO_ADDR
45966: GO 46190
45968: LD_INT 2
45970: DOUBLE
45971: EQUAL
45972: IFTRUE 45976
45974: GO 46038
45976: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45977: LD_ADDR_VAR 0 12
45981: PUSH
45982: LD_VAR 0 18
45986: PPUSH
45987: LD_INT 22
45989: PUSH
45990: LD_VAR 0 16
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: PUSH
46002: LD_INT 30
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 30
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: LIST
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PPUSH
46031: CALL_OW 72
46035: ST_TO_ADDR
46036: GO 46190
46038: LD_INT 3
46040: DOUBLE
46041: EQUAL
46042: IFTRUE 46046
46044: GO 46108
46046: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46047: LD_ADDR_VAR 0 12
46051: PUSH
46052: LD_VAR 0 18
46056: PPUSH
46057: LD_INT 22
46059: PUSH
46060: LD_VAR 0 16
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 2
46071: PUSH
46072: LD_INT 30
46074: PUSH
46075: LD_INT 2
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 30
46084: PUSH
46085: LD_INT 3
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: LIST
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PPUSH
46101: CALL_OW 72
46105: ST_TO_ADDR
46106: GO 46190
46108: LD_INT 4
46110: DOUBLE
46111: EQUAL
46112: IFTRUE 46116
46114: GO 46189
46116: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46117: LD_ADDR_VAR 0 12
46121: PUSH
46122: LD_VAR 0 18
46126: PPUSH
46127: LD_INT 22
46129: PUSH
46130: LD_VAR 0 16
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: LD_INT 30
46144: PUSH
46145: LD_INT 6
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 30
46154: PUSH
46155: LD_INT 7
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 30
46164: PUSH
46165: LD_INT 8
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PPUSH
46182: CALL_OW 72
46186: ST_TO_ADDR
46187: GO 46190
46189: POP
// if i = 1 then
46190: LD_VAR 0 8
46194: PUSH
46195: LD_INT 1
46197: EQUAL
46198: IFFALSE 46309
// begin tmp := [ ] ;
46200: LD_ADDR_VAR 0 19
46204: PUSH
46205: EMPTY
46206: ST_TO_ADDR
// for j in f do
46207: LD_ADDR_VAR 0 9
46211: PUSH
46212: LD_VAR 0 12
46216: PUSH
46217: FOR_IN
46218: IFFALSE 46291
// if GetBType ( j ) = b_bunker then
46220: LD_VAR 0 9
46224: PPUSH
46225: CALL_OW 266
46229: PUSH
46230: LD_INT 32
46232: EQUAL
46233: IFFALSE 46260
// tmp := Insert ( tmp , 1 , j ) else
46235: LD_ADDR_VAR 0 19
46239: PUSH
46240: LD_VAR 0 19
46244: PPUSH
46245: LD_INT 1
46247: PPUSH
46248: LD_VAR 0 9
46252: PPUSH
46253: CALL_OW 2
46257: ST_TO_ADDR
46258: GO 46289
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46260: LD_ADDR_VAR 0 19
46264: PUSH
46265: LD_VAR 0 19
46269: PPUSH
46270: LD_VAR 0 19
46274: PUSH
46275: LD_INT 1
46277: PLUS
46278: PPUSH
46279: LD_VAR 0 9
46283: PPUSH
46284: CALL_OW 2
46288: ST_TO_ADDR
46289: GO 46217
46291: POP
46292: POP
// if tmp then
46293: LD_VAR 0 19
46297: IFFALSE 46309
// f := tmp ;
46299: LD_ADDR_VAR 0 12
46303: PUSH
46304: LD_VAR 0 19
46308: ST_TO_ADDR
// end ; x := personel [ i ] ;
46309: LD_ADDR_VAR 0 13
46313: PUSH
46314: LD_VAR 0 6
46318: PUSH
46319: LD_VAR 0 8
46323: ARRAY
46324: ST_TO_ADDR
// if x = - 1 then
46325: LD_VAR 0 13
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: EQUAL
46334: IFFALSE 46543
// begin for j in f do
46336: LD_ADDR_VAR 0 9
46340: PUSH
46341: LD_VAR 0 12
46345: PUSH
46346: FOR_IN
46347: IFFALSE 46539
// repeat InitHc ;
46349: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46353: LD_VAR 0 9
46357: PPUSH
46358: CALL_OW 266
46362: PUSH
46363: LD_INT 5
46365: EQUAL
46366: IFFALSE 46436
// begin if UnitsInside ( j ) < 3 then
46368: LD_VAR 0 9
46372: PPUSH
46373: CALL_OW 313
46377: PUSH
46378: LD_INT 3
46380: LESS
46381: IFFALSE 46417
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46383: LD_INT 0
46385: PPUSH
46386: LD_INT 5
46388: PUSH
46389: LD_INT 8
46391: PUSH
46392: LD_INT 9
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: PUSH
46400: LD_VAR 0 17
46404: ARRAY
46405: PPUSH
46406: LD_VAR 0 4
46410: PPUSH
46411: CALL_OW 380
46415: GO 46434
// PrepareHuman ( false , i , skill ) ;
46417: LD_INT 0
46419: PPUSH
46420: LD_VAR 0 8
46424: PPUSH
46425: LD_VAR 0 4
46429: PPUSH
46430: CALL_OW 380
// end else
46434: GO 46453
// PrepareHuman ( false , i , skill ) ;
46436: LD_INT 0
46438: PPUSH
46439: LD_VAR 0 8
46443: PPUSH
46444: LD_VAR 0 4
46448: PPUSH
46449: CALL_OW 380
// un := CreateHuman ;
46453: LD_ADDR_VAR 0 14
46457: PUSH
46458: CALL_OW 44
46462: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46463: LD_ADDR_VAR 0 7
46467: PUSH
46468: LD_VAR 0 7
46472: PPUSH
46473: LD_INT 1
46475: PPUSH
46476: LD_VAR 0 14
46480: PPUSH
46481: CALL_OW 2
46485: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46486: LD_VAR 0 14
46490: PPUSH
46491: LD_VAR 0 9
46495: PPUSH
46496: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46500: LD_VAR 0 9
46504: PPUSH
46505: CALL_OW 313
46509: PUSH
46510: LD_INT 6
46512: EQUAL
46513: PUSH
46514: LD_VAR 0 9
46518: PPUSH
46519: CALL_OW 266
46523: PUSH
46524: LD_INT 32
46526: PUSH
46527: LD_INT 31
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: IN
46534: OR
46535: IFFALSE 46349
46537: GO 46346
46539: POP
46540: POP
// end else
46541: GO 46923
// for j = 1 to x do
46543: LD_ADDR_VAR 0 9
46547: PUSH
46548: DOUBLE
46549: LD_INT 1
46551: DEC
46552: ST_TO_ADDR
46553: LD_VAR 0 13
46557: PUSH
46558: FOR_TO
46559: IFFALSE 46921
// begin InitHc ;
46561: CALL_OW 19
// if not f then
46565: LD_VAR 0 12
46569: NOT
46570: IFFALSE 46659
// begin PrepareHuman ( false , i , skill ) ;
46572: LD_INT 0
46574: PPUSH
46575: LD_VAR 0 8
46579: PPUSH
46580: LD_VAR 0 4
46584: PPUSH
46585: CALL_OW 380
// un := CreateHuman ;
46589: LD_ADDR_VAR 0 14
46593: PUSH
46594: CALL_OW 44
46598: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46599: LD_ADDR_VAR 0 7
46603: PUSH
46604: LD_VAR 0 7
46608: PPUSH
46609: LD_INT 1
46611: PPUSH
46612: LD_VAR 0 14
46616: PPUSH
46617: CALL_OW 2
46621: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46622: LD_VAR 0 14
46626: PPUSH
46627: LD_VAR 0 1
46631: PPUSH
46632: CALL_OW 250
46636: PPUSH
46637: LD_VAR 0 1
46641: PPUSH
46642: CALL_OW 251
46646: PPUSH
46647: LD_INT 10
46649: PPUSH
46650: LD_INT 0
46652: PPUSH
46653: CALL_OW 50
// continue ;
46657: GO 46558
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46659: LD_VAR 0 12
46663: PUSH
46664: LD_INT 1
46666: ARRAY
46667: PPUSH
46668: CALL_OW 313
46672: PUSH
46673: LD_VAR 0 12
46677: PUSH
46678: LD_INT 1
46680: ARRAY
46681: PPUSH
46682: CALL_OW 266
46686: PUSH
46687: LD_INT 32
46689: PUSH
46690: LD_INT 31
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: IN
46697: AND
46698: PUSH
46699: LD_VAR 0 12
46703: PUSH
46704: LD_INT 1
46706: ARRAY
46707: PPUSH
46708: CALL_OW 313
46712: PUSH
46713: LD_INT 6
46715: EQUAL
46716: OR
46717: IFFALSE 46737
// f := Delete ( f , 1 ) ;
46719: LD_ADDR_VAR 0 12
46723: PUSH
46724: LD_VAR 0 12
46728: PPUSH
46729: LD_INT 1
46731: PPUSH
46732: CALL_OW 3
46736: ST_TO_ADDR
// if not f then
46737: LD_VAR 0 12
46741: NOT
46742: IFFALSE 46760
// begin x := x + 2 ;
46744: LD_ADDR_VAR 0 13
46748: PUSH
46749: LD_VAR 0 13
46753: PUSH
46754: LD_INT 2
46756: PLUS
46757: ST_TO_ADDR
// continue ;
46758: GO 46558
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46760: LD_VAR 0 12
46764: PUSH
46765: LD_INT 1
46767: ARRAY
46768: PPUSH
46769: CALL_OW 266
46773: PUSH
46774: LD_INT 5
46776: EQUAL
46777: IFFALSE 46851
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46779: LD_VAR 0 12
46783: PUSH
46784: LD_INT 1
46786: ARRAY
46787: PPUSH
46788: CALL_OW 313
46792: PUSH
46793: LD_INT 3
46795: LESS
46796: IFFALSE 46832
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46798: LD_INT 0
46800: PPUSH
46801: LD_INT 5
46803: PUSH
46804: LD_INT 8
46806: PUSH
46807: LD_INT 9
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: LIST
46814: PUSH
46815: LD_VAR 0 17
46819: ARRAY
46820: PPUSH
46821: LD_VAR 0 4
46825: PPUSH
46826: CALL_OW 380
46830: GO 46849
// PrepareHuman ( false , i , skill ) ;
46832: LD_INT 0
46834: PPUSH
46835: LD_VAR 0 8
46839: PPUSH
46840: LD_VAR 0 4
46844: PPUSH
46845: CALL_OW 380
// end else
46849: GO 46868
// PrepareHuman ( false , i , skill ) ;
46851: LD_INT 0
46853: PPUSH
46854: LD_VAR 0 8
46858: PPUSH
46859: LD_VAR 0 4
46863: PPUSH
46864: CALL_OW 380
// un := CreateHuman ;
46868: LD_ADDR_VAR 0 14
46872: PUSH
46873: CALL_OW 44
46877: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46878: LD_ADDR_VAR 0 7
46882: PUSH
46883: LD_VAR 0 7
46887: PPUSH
46888: LD_INT 1
46890: PPUSH
46891: LD_VAR 0 14
46895: PPUSH
46896: CALL_OW 2
46900: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46901: LD_VAR 0 14
46905: PPUSH
46906: LD_VAR 0 12
46910: PUSH
46911: LD_INT 1
46913: ARRAY
46914: PPUSH
46915: CALL_OW 52
// end ;
46919: GO 46558
46921: POP
46922: POP
// end ;
46923: GO 45860
46925: POP
46926: POP
// result := result ^ buildings ;
46927: LD_ADDR_VAR 0 7
46931: PUSH
46932: LD_VAR 0 7
46936: PUSH
46937: LD_VAR 0 18
46941: ADD
46942: ST_TO_ADDR
// end else
46943: GO 47086
// begin for i = 1 to personel do
46945: LD_ADDR_VAR 0 8
46949: PUSH
46950: DOUBLE
46951: LD_INT 1
46953: DEC
46954: ST_TO_ADDR
46955: LD_VAR 0 6
46959: PUSH
46960: FOR_TO
46961: IFFALSE 47084
// begin if i > 4 then
46963: LD_VAR 0 8
46967: PUSH
46968: LD_INT 4
46970: GREATER
46971: IFFALSE 46975
// break ;
46973: GO 47084
// x := personel [ i ] ;
46975: LD_ADDR_VAR 0 13
46979: PUSH
46980: LD_VAR 0 6
46984: PUSH
46985: LD_VAR 0 8
46989: ARRAY
46990: ST_TO_ADDR
// if x = - 1 then
46991: LD_VAR 0 13
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: EQUAL
47000: IFFALSE 47004
// continue ;
47002: GO 46960
// PrepareHuman ( false , i , skill ) ;
47004: LD_INT 0
47006: PPUSH
47007: LD_VAR 0 8
47011: PPUSH
47012: LD_VAR 0 4
47016: PPUSH
47017: CALL_OW 380
// un := CreateHuman ;
47021: LD_ADDR_VAR 0 14
47025: PUSH
47026: CALL_OW 44
47030: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47031: LD_VAR 0 14
47035: PPUSH
47036: LD_VAR 0 1
47040: PPUSH
47041: CALL_OW 250
47045: PPUSH
47046: LD_VAR 0 1
47050: PPUSH
47051: CALL_OW 251
47055: PPUSH
47056: LD_INT 10
47058: PPUSH
47059: LD_INT 0
47061: PPUSH
47062: CALL_OW 50
// result := result ^ un ;
47066: LD_ADDR_VAR 0 7
47070: PUSH
47071: LD_VAR 0 7
47075: PUSH
47076: LD_VAR 0 14
47080: ADD
47081: ST_TO_ADDR
// end ;
47082: GO 46960
47084: POP
47085: POP
// end ; end ;
47086: LD_VAR 0 7
47090: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47091: LD_INT 0
47093: PPUSH
47094: PPUSH
47095: PPUSH
47096: PPUSH
47097: PPUSH
47098: PPUSH
47099: PPUSH
47100: PPUSH
47101: PPUSH
47102: PPUSH
47103: PPUSH
47104: PPUSH
47105: PPUSH
47106: PPUSH
47107: PPUSH
47108: PPUSH
// result := false ;
47109: LD_ADDR_VAR 0 3
47113: PUSH
47114: LD_INT 0
47116: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47117: LD_VAR 0 1
47121: NOT
47122: PUSH
47123: LD_VAR 0 1
47127: PPUSH
47128: CALL_OW 266
47132: PUSH
47133: LD_INT 32
47135: PUSH
47136: LD_INT 33
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: IN
47143: NOT
47144: OR
47145: IFFALSE 47149
// exit ;
47147: GO 48258
// nat := GetNation ( tower ) ;
47149: LD_ADDR_VAR 0 12
47153: PUSH
47154: LD_VAR 0 1
47158: PPUSH
47159: CALL_OW 248
47163: ST_TO_ADDR
// side := GetSide ( tower ) ;
47164: LD_ADDR_VAR 0 16
47168: PUSH
47169: LD_VAR 0 1
47173: PPUSH
47174: CALL_OW 255
47178: ST_TO_ADDR
// x := GetX ( tower ) ;
47179: LD_ADDR_VAR 0 10
47183: PUSH
47184: LD_VAR 0 1
47188: PPUSH
47189: CALL_OW 250
47193: ST_TO_ADDR
// y := GetY ( tower ) ;
47194: LD_ADDR_VAR 0 11
47198: PUSH
47199: LD_VAR 0 1
47203: PPUSH
47204: CALL_OW 251
47208: ST_TO_ADDR
// if not x or not y then
47209: LD_VAR 0 10
47213: NOT
47214: PUSH
47215: LD_VAR 0 11
47219: NOT
47220: OR
47221: IFFALSE 47225
// exit ;
47223: GO 48258
// weapon := 0 ;
47225: LD_ADDR_VAR 0 18
47229: PUSH
47230: LD_INT 0
47232: ST_TO_ADDR
// fac_list := [ ] ;
47233: LD_ADDR_VAR 0 17
47237: PUSH
47238: EMPTY
47239: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47240: LD_ADDR_VAR 0 6
47244: PUSH
47245: LD_VAR 0 1
47249: PPUSH
47250: CALL_OW 274
47254: PPUSH
47255: LD_VAR 0 2
47259: PPUSH
47260: LD_INT 0
47262: PPUSH
47263: CALL 44829 0 3
47267: PPUSH
47268: LD_INT 30
47270: PUSH
47271: LD_INT 3
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PPUSH
47278: CALL_OW 72
47282: ST_TO_ADDR
// if not factories then
47283: LD_VAR 0 6
47287: NOT
47288: IFFALSE 47292
// exit ;
47290: GO 48258
// for i in factories do
47292: LD_ADDR_VAR 0 8
47296: PUSH
47297: LD_VAR 0 6
47301: PUSH
47302: FOR_IN
47303: IFFALSE 47328
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47305: LD_ADDR_VAR 0 17
47309: PUSH
47310: LD_VAR 0 17
47314: PUSH
47315: LD_VAR 0 8
47319: PPUSH
47320: CALL_OW 478
47324: UNION
47325: ST_TO_ADDR
47326: GO 47302
47328: POP
47329: POP
// if not fac_list then
47330: LD_VAR 0 17
47334: NOT
47335: IFFALSE 47339
// exit ;
47337: GO 48258
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47339: LD_ADDR_VAR 0 5
47343: PUSH
47344: LD_INT 4
47346: PUSH
47347: LD_INT 5
47349: PUSH
47350: LD_INT 9
47352: PUSH
47353: LD_INT 10
47355: PUSH
47356: LD_INT 6
47358: PUSH
47359: LD_INT 7
47361: PUSH
47362: LD_INT 11
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 27
47376: PUSH
47377: LD_INT 28
47379: PUSH
47380: LD_INT 26
47382: PUSH
47383: LD_INT 30
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 43
47394: PUSH
47395: LD_INT 44
47397: PUSH
47398: LD_INT 46
47400: PUSH
47401: LD_INT 45
47403: PUSH
47404: LD_INT 47
47406: PUSH
47407: LD_INT 49
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: LIST
47422: PUSH
47423: LD_VAR 0 12
47427: ARRAY
47428: ST_TO_ADDR
// list := list isect fac_list ;
47429: LD_ADDR_VAR 0 5
47433: PUSH
47434: LD_VAR 0 5
47438: PUSH
47439: LD_VAR 0 17
47443: ISECT
47444: ST_TO_ADDR
// if not list then
47445: LD_VAR 0 5
47449: NOT
47450: IFFALSE 47454
// exit ;
47452: GO 48258
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47454: LD_VAR 0 12
47458: PUSH
47459: LD_INT 3
47461: EQUAL
47462: PUSH
47463: LD_INT 49
47465: PUSH
47466: LD_VAR 0 5
47470: IN
47471: AND
47472: PUSH
47473: LD_INT 31
47475: PPUSH
47476: LD_VAR 0 16
47480: PPUSH
47481: CALL_OW 321
47485: PUSH
47486: LD_INT 2
47488: EQUAL
47489: AND
47490: IFFALSE 47550
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47492: LD_INT 22
47494: PUSH
47495: LD_VAR 0 16
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 35
47506: PUSH
47507: LD_INT 49
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 91
47516: PUSH
47517: LD_VAR 0 1
47521: PUSH
47522: LD_INT 10
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: LIST
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: LIST
47534: PPUSH
47535: CALL_OW 69
47539: NOT
47540: IFFALSE 47550
// weapon := ru_time_lapser ;
47542: LD_ADDR_VAR 0 18
47546: PUSH
47547: LD_INT 49
47549: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47550: LD_VAR 0 12
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: IN
47565: PUSH
47566: LD_INT 11
47568: PUSH
47569: LD_VAR 0 5
47573: IN
47574: PUSH
47575: LD_INT 30
47577: PUSH
47578: LD_VAR 0 5
47582: IN
47583: OR
47584: AND
47585: PUSH
47586: LD_INT 6
47588: PPUSH
47589: LD_VAR 0 16
47593: PPUSH
47594: CALL_OW 321
47598: PUSH
47599: LD_INT 2
47601: EQUAL
47602: AND
47603: IFFALSE 47768
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47605: LD_INT 22
47607: PUSH
47608: LD_VAR 0 16
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: LD_INT 35
47622: PUSH
47623: LD_INT 11
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 35
47632: PUSH
47633: LD_INT 30
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 91
47647: PUSH
47648: LD_VAR 0 1
47652: PUSH
47653: LD_INT 18
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: LIST
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: LIST
47665: PPUSH
47666: CALL_OW 69
47670: NOT
47671: PUSH
47672: LD_INT 22
47674: PUSH
47675: LD_VAR 0 16
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: LD_INT 30
47689: PUSH
47690: LD_INT 32
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 30
47699: PUSH
47700: LD_INT 33
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 91
47714: PUSH
47715: LD_VAR 0 1
47719: PUSH
47720: LD_INT 12
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: LIST
47732: PUSH
47733: EMPTY
47734: LIST
47735: PPUSH
47736: CALL_OW 69
47740: PUSH
47741: LD_INT 2
47743: GREATER
47744: AND
47745: IFFALSE 47768
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47747: LD_ADDR_VAR 0 18
47751: PUSH
47752: LD_INT 11
47754: PUSH
47755: LD_INT 30
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_VAR 0 12
47766: ARRAY
47767: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47768: LD_VAR 0 18
47772: NOT
47773: PUSH
47774: LD_INT 40
47776: PPUSH
47777: LD_VAR 0 16
47781: PPUSH
47782: CALL_OW 321
47786: PUSH
47787: LD_INT 2
47789: EQUAL
47790: AND
47791: PUSH
47792: LD_INT 7
47794: PUSH
47795: LD_VAR 0 5
47799: IN
47800: PUSH
47801: LD_INT 28
47803: PUSH
47804: LD_VAR 0 5
47808: IN
47809: OR
47810: PUSH
47811: LD_INT 45
47813: PUSH
47814: LD_VAR 0 5
47818: IN
47819: OR
47820: AND
47821: IFFALSE 48075
// begin hex := GetHexInfo ( x , y ) ;
47823: LD_ADDR_VAR 0 4
47827: PUSH
47828: LD_VAR 0 10
47832: PPUSH
47833: LD_VAR 0 11
47837: PPUSH
47838: CALL_OW 546
47842: ST_TO_ADDR
// if hex [ 1 ] then
47843: LD_VAR 0 4
47847: PUSH
47848: LD_INT 1
47850: ARRAY
47851: IFFALSE 47855
// exit ;
47853: GO 48258
// height := hex [ 2 ] ;
47855: LD_ADDR_VAR 0 15
47859: PUSH
47860: LD_VAR 0 4
47864: PUSH
47865: LD_INT 2
47867: ARRAY
47868: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47869: LD_ADDR_VAR 0 14
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: LD_INT 3
47882: PUSH
47883: LD_INT 5
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: ST_TO_ADDR
// for i in tmp do
47892: LD_ADDR_VAR 0 8
47896: PUSH
47897: LD_VAR 0 14
47901: PUSH
47902: FOR_IN
47903: IFFALSE 48073
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47905: LD_ADDR_VAR 0 9
47909: PUSH
47910: LD_VAR 0 10
47914: PPUSH
47915: LD_VAR 0 8
47919: PPUSH
47920: LD_INT 5
47922: PPUSH
47923: CALL_OW 272
47927: PUSH
47928: LD_VAR 0 11
47932: PPUSH
47933: LD_VAR 0 8
47937: PPUSH
47938: LD_INT 5
47940: PPUSH
47941: CALL_OW 273
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47950: LD_VAR 0 9
47954: PUSH
47955: LD_INT 1
47957: ARRAY
47958: PPUSH
47959: LD_VAR 0 9
47963: PUSH
47964: LD_INT 2
47966: ARRAY
47967: PPUSH
47968: CALL_OW 488
47972: IFFALSE 48071
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47974: LD_ADDR_VAR 0 4
47978: PUSH
47979: LD_VAR 0 9
47983: PUSH
47984: LD_INT 1
47986: ARRAY
47987: PPUSH
47988: LD_VAR 0 9
47992: PUSH
47993: LD_INT 2
47995: ARRAY
47996: PPUSH
47997: CALL_OW 546
48001: ST_TO_ADDR
// if hex [ 1 ] then
48002: LD_VAR 0 4
48006: PUSH
48007: LD_INT 1
48009: ARRAY
48010: IFFALSE 48014
// continue ;
48012: GO 47902
// h := hex [ 2 ] ;
48014: LD_ADDR_VAR 0 13
48018: PUSH
48019: LD_VAR 0 4
48023: PUSH
48024: LD_INT 2
48026: ARRAY
48027: ST_TO_ADDR
// if h + 7 < height then
48028: LD_VAR 0 13
48032: PUSH
48033: LD_INT 7
48035: PLUS
48036: PUSH
48037: LD_VAR 0 15
48041: LESS
48042: IFFALSE 48071
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48044: LD_ADDR_VAR 0 18
48048: PUSH
48049: LD_INT 7
48051: PUSH
48052: LD_INT 28
48054: PUSH
48055: LD_INT 45
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: LIST
48062: PUSH
48063: LD_VAR 0 12
48067: ARRAY
48068: ST_TO_ADDR
// break ;
48069: GO 48073
// end ; end ; end ;
48071: GO 47902
48073: POP
48074: POP
// end ; if not weapon then
48075: LD_VAR 0 18
48079: NOT
48080: IFFALSE 48140
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48082: LD_ADDR_VAR 0 5
48086: PUSH
48087: LD_VAR 0 5
48091: PUSH
48092: LD_INT 11
48094: PUSH
48095: LD_INT 30
48097: PUSH
48098: LD_INT 49
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: LIST
48105: DIFF
48106: ST_TO_ADDR
// if not list then
48107: LD_VAR 0 5
48111: NOT
48112: IFFALSE 48116
// exit ;
48114: GO 48258
// weapon := list [ rand ( 1 , list ) ] ;
48116: LD_ADDR_VAR 0 18
48120: PUSH
48121: LD_VAR 0 5
48125: PUSH
48126: LD_INT 1
48128: PPUSH
48129: LD_VAR 0 5
48133: PPUSH
48134: CALL_OW 12
48138: ARRAY
48139: ST_TO_ADDR
// end ; if weapon then
48140: LD_VAR 0 18
48144: IFFALSE 48258
// begin tmp := CostOfWeapon ( weapon ) ;
48146: LD_ADDR_VAR 0 14
48150: PUSH
48151: LD_VAR 0 18
48155: PPUSH
48156: CALL_OW 451
48160: ST_TO_ADDR
// j := GetBase ( tower ) ;
48161: LD_ADDR_VAR 0 9
48165: PUSH
48166: LD_VAR 0 1
48170: PPUSH
48171: CALL_OW 274
48175: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48176: LD_VAR 0 9
48180: PPUSH
48181: LD_INT 1
48183: PPUSH
48184: CALL_OW 275
48188: PUSH
48189: LD_VAR 0 14
48193: PUSH
48194: LD_INT 1
48196: ARRAY
48197: GREATEREQUAL
48198: PUSH
48199: LD_VAR 0 9
48203: PPUSH
48204: LD_INT 2
48206: PPUSH
48207: CALL_OW 275
48211: PUSH
48212: LD_VAR 0 14
48216: PUSH
48217: LD_INT 2
48219: ARRAY
48220: GREATEREQUAL
48221: AND
48222: PUSH
48223: LD_VAR 0 9
48227: PPUSH
48228: LD_INT 3
48230: PPUSH
48231: CALL_OW 275
48235: PUSH
48236: LD_VAR 0 14
48240: PUSH
48241: LD_INT 3
48243: ARRAY
48244: GREATEREQUAL
48245: AND
48246: IFFALSE 48258
// result := weapon ;
48248: LD_ADDR_VAR 0 3
48252: PUSH
48253: LD_VAR 0 18
48257: ST_TO_ADDR
// end ; end ;
48258: LD_VAR 0 3
48262: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48263: LD_INT 0
48265: PPUSH
48266: PPUSH
// result := true ;
48267: LD_ADDR_VAR 0 3
48271: PUSH
48272: LD_INT 1
48274: ST_TO_ADDR
// if array1 = array2 then
48275: LD_VAR 0 1
48279: PUSH
48280: LD_VAR 0 2
48284: EQUAL
48285: IFFALSE 48345
// begin for i = 1 to array1 do
48287: LD_ADDR_VAR 0 4
48291: PUSH
48292: DOUBLE
48293: LD_INT 1
48295: DEC
48296: ST_TO_ADDR
48297: LD_VAR 0 1
48301: PUSH
48302: FOR_TO
48303: IFFALSE 48341
// if array1 [ i ] <> array2 [ i ] then
48305: LD_VAR 0 1
48309: PUSH
48310: LD_VAR 0 4
48314: ARRAY
48315: PUSH
48316: LD_VAR 0 2
48320: PUSH
48321: LD_VAR 0 4
48325: ARRAY
48326: NONEQUAL
48327: IFFALSE 48339
// begin result := false ;
48329: LD_ADDR_VAR 0 3
48333: PUSH
48334: LD_INT 0
48336: ST_TO_ADDR
// break ;
48337: GO 48341
// end ;
48339: GO 48302
48341: POP
48342: POP
// end else
48343: GO 48353
// result := false ;
48345: LD_ADDR_VAR 0 3
48349: PUSH
48350: LD_INT 0
48352: ST_TO_ADDR
// end ;
48353: LD_VAR 0 3
48357: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48358: LD_INT 0
48360: PPUSH
48361: PPUSH
// if not array1 or not array2 then
48362: LD_VAR 0 1
48366: NOT
48367: PUSH
48368: LD_VAR 0 2
48372: NOT
48373: OR
48374: IFFALSE 48378
// exit ;
48376: GO 48442
// result := true ;
48378: LD_ADDR_VAR 0 3
48382: PUSH
48383: LD_INT 1
48385: ST_TO_ADDR
// for i = 1 to array1 do
48386: LD_ADDR_VAR 0 4
48390: PUSH
48391: DOUBLE
48392: LD_INT 1
48394: DEC
48395: ST_TO_ADDR
48396: LD_VAR 0 1
48400: PUSH
48401: FOR_TO
48402: IFFALSE 48440
// if array1 [ i ] <> array2 [ i ] then
48404: LD_VAR 0 1
48408: PUSH
48409: LD_VAR 0 4
48413: ARRAY
48414: PUSH
48415: LD_VAR 0 2
48419: PUSH
48420: LD_VAR 0 4
48424: ARRAY
48425: NONEQUAL
48426: IFFALSE 48438
// begin result := false ;
48428: LD_ADDR_VAR 0 3
48432: PUSH
48433: LD_INT 0
48435: ST_TO_ADDR
// break ;
48436: GO 48440
// end ;
48438: GO 48401
48440: POP
48441: POP
// end ;
48442: LD_VAR 0 3
48446: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48447: LD_INT 0
48449: PPUSH
48450: PPUSH
48451: PPUSH
// pom := GetBase ( fac ) ;
48452: LD_ADDR_VAR 0 5
48456: PUSH
48457: LD_VAR 0 1
48461: PPUSH
48462: CALL_OW 274
48466: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48467: LD_ADDR_VAR 0 4
48471: PUSH
48472: LD_VAR 0 2
48476: PUSH
48477: LD_INT 1
48479: ARRAY
48480: PPUSH
48481: LD_VAR 0 2
48485: PUSH
48486: LD_INT 2
48488: ARRAY
48489: PPUSH
48490: LD_VAR 0 2
48494: PUSH
48495: LD_INT 3
48497: ARRAY
48498: PPUSH
48499: LD_VAR 0 2
48503: PUSH
48504: LD_INT 4
48506: ARRAY
48507: PPUSH
48508: CALL_OW 449
48512: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48513: LD_ADDR_VAR 0 3
48517: PUSH
48518: LD_VAR 0 5
48522: PPUSH
48523: LD_INT 1
48525: PPUSH
48526: CALL_OW 275
48530: PUSH
48531: LD_VAR 0 4
48535: PUSH
48536: LD_INT 1
48538: ARRAY
48539: GREATEREQUAL
48540: PUSH
48541: LD_VAR 0 5
48545: PPUSH
48546: LD_INT 2
48548: PPUSH
48549: CALL_OW 275
48553: PUSH
48554: LD_VAR 0 4
48558: PUSH
48559: LD_INT 2
48561: ARRAY
48562: GREATEREQUAL
48563: AND
48564: PUSH
48565: LD_VAR 0 5
48569: PPUSH
48570: LD_INT 3
48572: PPUSH
48573: CALL_OW 275
48577: PUSH
48578: LD_VAR 0 4
48582: PUSH
48583: LD_INT 3
48585: ARRAY
48586: GREATEREQUAL
48587: AND
48588: ST_TO_ADDR
// end ;
48589: LD_VAR 0 3
48593: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48594: LD_INT 0
48596: PPUSH
48597: PPUSH
48598: PPUSH
48599: PPUSH
// pom := GetBase ( building ) ;
48600: LD_ADDR_VAR 0 3
48604: PUSH
48605: LD_VAR 0 1
48609: PPUSH
48610: CALL_OW 274
48614: ST_TO_ADDR
// if not pom then
48615: LD_VAR 0 3
48619: NOT
48620: IFFALSE 48624
// exit ;
48622: GO 48794
// btype := GetBType ( building ) ;
48624: LD_ADDR_VAR 0 5
48628: PUSH
48629: LD_VAR 0 1
48633: PPUSH
48634: CALL_OW 266
48638: ST_TO_ADDR
// if btype = b_armoury then
48639: LD_VAR 0 5
48643: PUSH
48644: LD_INT 4
48646: EQUAL
48647: IFFALSE 48657
// btype := b_barracks ;
48649: LD_ADDR_VAR 0 5
48653: PUSH
48654: LD_INT 5
48656: ST_TO_ADDR
// if btype = b_depot then
48657: LD_VAR 0 5
48661: PUSH
48662: LD_INT 0
48664: EQUAL
48665: IFFALSE 48675
// btype := b_warehouse ;
48667: LD_ADDR_VAR 0 5
48671: PUSH
48672: LD_INT 1
48674: ST_TO_ADDR
// if btype = b_workshop then
48675: LD_VAR 0 5
48679: PUSH
48680: LD_INT 2
48682: EQUAL
48683: IFFALSE 48693
// btype := b_factory ;
48685: LD_ADDR_VAR 0 5
48689: PUSH
48690: LD_INT 3
48692: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48693: LD_ADDR_VAR 0 4
48697: PUSH
48698: LD_VAR 0 5
48702: PPUSH
48703: LD_VAR 0 1
48707: PPUSH
48708: CALL_OW 248
48712: PPUSH
48713: CALL_OW 450
48717: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48718: LD_ADDR_VAR 0 2
48722: PUSH
48723: LD_VAR 0 3
48727: PPUSH
48728: LD_INT 1
48730: PPUSH
48731: CALL_OW 275
48735: PUSH
48736: LD_VAR 0 4
48740: PUSH
48741: LD_INT 1
48743: ARRAY
48744: GREATEREQUAL
48745: PUSH
48746: LD_VAR 0 3
48750: PPUSH
48751: LD_INT 2
48753: PPUSH
48754: CALL_OW 275
48758: PUSH
48759: LD_VAR 0 4
48763: PUSH
48764: LD_INT 2
48766: ARRAY
48767: GREATEREQUAL
48768: AND
48769: PUSH
48770: LD_VAR 0 3
48774: PPUSH
48775: LD_INT 3
48777: PPUSH
48778: CALL_OW 275
48782: PUSH
48783: LD_VAR 0 4
48787: PUSH
48788: LD_INT 3
48790: ARRAY
48791: GREATEREQUAL
48792: AND
48793: ST_TO_ADDR
// end ;
48794: LD_VAR 0 2
48798: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48799: LD_INT 0
48801: PPUSH
48802: PPUSH
48803: PPUSH
// pom := GetBase ( building ) ;
48804: LD_ADDR_VAR 0 4
48808: PUSH
48809: LD_VAR 0 1
48813: PPUSH
48814: CALL_OW 274
48818: ST_TO_ADDR
// if not pom then
48819: LD_VAR 0 4
48823: NOT
48824: IFFALSE 48828
// exit ;
48826: GO 48929
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48828: LD_ADDR_VAR 0 5
48832: PUSH
48833: LD_VAR 0 2
48837: PPUSH
48838: LD_VAR 0 1
48842: PPUSH
48843: CALL_OW 248
48847: PPUSH
48848: CALL_OW 450
48852: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48853: LD_ADDR_VAR 0 3
48857: PUSH
48858: LD_VAR 0 4
48862: PPUSH
48863: LD_INT 1
48865: PPUSH
48866: CALL_OW 275
48870: PUSH
48871: LD_VAR 0 5
48875: PUSH
48876: LD_INT 1
48878: ARRAY
48879: GREATEREQUAL
48880: PUSH
48881: LD_VAR 0 4
48885: PPUSH
48886: LD_INT 2
48888: PPUSH
48889: CALL_OW 275
48893: PUSH
48894: LD_VAR 0 5
48898: PUSH
48899: LD_INT 2
48901: ARRAY
48902: GREATEREQUAL
48903: AND
48904: PUSH
48905: LD_VAR 0 4
48909: PPUSH
48910: LD_INT 3
48912: PPUSH
48913: CALL_OW 275
48917: PUSH
48918: LD_VAR 0 5
48922: PUSH
48923: LD_INT 3
48925: ARRAY
48926: GREATEREQUAL
48927: AND
48928: ST_TO_ADDR
// end ;
48929: LD_VAR 0 3
48933: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48934: LD_INT 0
48936: PPUSH
48937: PPUSH
48938: PPUSH
48939: PPUSH
48940: PPUSH
48941: PPUSH
48942: PPUSH
48943: PPUSH
48944: PPUSH
48945: PPUSH
48946: PPUSH
// result := false ;
48947: LD_ADDR_VAR 0 8
48951: PUSH
48952: LD_INT 0
48954: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48955: LD_VAR 0 5
48959: NOT
48960: PUSH
48961: LD_VAR 0 1
48965: NOT
48966: OR
48967: PUSH
48968: LD_VAR 0 2
48972: NOT
48973: OR
48974: PUSH
48975: LD_VAR 0 3
48979: NOT
48980: OR
48981: IFFALSE 48985
// exit ;
48983: GO 49799
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48985: LD_ADDR_VAR 0 14
48989: PUSH
48990: LD_VAR 0 1
48994: PPUSH
48995: LD_VAR 0 2
48999: PPUSH
49000: LD_VAR 0 3
49004: PPUSH
49005: LD_VAR 0 4
49009: PPUSH
49010: LD_VAR 0 5
49014: PUSH
49015: LD_INT 1
49017: ARRAY
49018: PPUSH
49019: CALL_OW 248
49023: PPUSH
49024: LD_INT 0
49026: PPUSH
49027: CALL 51036 0 6
49031: ST_TO_ADDR
// if not hexes then
49032: LD_VAR 0 14
49036: NOT
49037: IFFALSE 49041
// exit ;
49039: GO 49799
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49041: LD_ADDR_VAR 0 17
49045: PUSH
49046: LD_VAR 0 5
49050: PPUSH
49051: LD_INT 22
49053: PUSH
49054: LD_VAR 0 13
49058: PPUSH
49059: CALL_OW 255
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: PUSH
49071: LD_INT 30
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 30
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: LIST
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PPUSH
49100: CALL_OW 72
49104: ST_TO_ADDR
// for i = 1 to hexes do
49105: LD_ADDR_VAR 0 9
49109: PUSH
49110: DOUBLE
49111: LD_INT 1
49113: DEC
49114: ST_TO_ADDR
49115: LD_VAR 0 14
49119: PUSH
49120: FOR_TO
49121: IFFALSE 49797
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49123: LD_ADDR_VAR 0 13
49127: PUSH
49128: LD_VAR 0 14
49132: PUSH
49133: LD_VAR 0 9
49137: ARRAY
49138: PUSH
49139: LD_INT 1
49141: ARRAY
49142: PPUSH
49143: LD_VAR 0 14
49147: PUSH
49148: LD_VAR 0 9
49152: ARRAY
49153: PUSH
49154: LD_INT 2
49156: ARRAY
49157: PPUSH
49158: CALL_OW 428
49162: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49163: LD_VAR 0 14
49167: PUSH
49168: LD_VAR 0 9
49172: ARRAY
49173: PUSH
49174: LD_INT 1
49176: ARRAY
49177: PPUSH
49178: LD_VAR 0 14
49182: PUSH
49183: LD_VAR 0 9
49187: ARRAY
49188: PUSH
49189: LD_INT 2
49191: ARRAY
49192: PPUSH
49193: CALL_OW 351
49197: PUSH
49198: LD_VAR 0 14
49202: PUSH
49203: LD_VAR 0 9
49207: ARRAY
49208: PUSH
49209: LD_INT 1
49211: ARRAY
49212: PPUSH
49213: LD_VAR 0 14
49217: PUSH
49218: LD_VAR 0 9
49222: ARRAY
49223: PUSH
49224: LD_INT 2
49226: ARRAY
49227: PPUSH
49228: CALL_OW 488
49232: NOT
49233: OR
49234: PUSH
49235: LD_VAR 0 13
49239: PPUSH
49240: CALL_OW 247
49244: PUSH
49245: LD_INT 3
49247: EQUAL
49248: OR
49249: IFFALSE 49255
// exit ;
49251: POP
49252: POP
49253: GO 49799
// if not tmp then
49255: LD_VAR 0 13
49259: NOT
49260: IFFALSE 49264
// continue ;
49262: GO 49120
// result := true ;
49264: LD_ADDR_VAR 0 8
49268: PUSH
49269: LD_INT 1
49271: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49272: LD_VAR 0 6
49276: PUSH
49277: LD_VAR 0 13
49281: PPUSH
49282: CALL_OW 247
49286: PUSH
49287: LD_INT 2
49289: EQUAL
49290: AND
49291: PUSH
49292: LD_VAR 0 13
49296: PPUSH
49297: CALL_OW 263
49301: PUSH
49302: LD_INT 1
49304: EQUAL
49305: AND
49306: IFFALSE 49470
// begin if IsDrivenBy ( tmp ) then
49308: LD_VAR 0 13
49312: PPUSH
49313: CALL_OW 311
49317: IFFALSE 49321
// continue ;
49319: GO 49120
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49321: LD_VAR 0 6
49325: PPUSH
49326: LD_INT 3
49328: PUSH
49329: LD_INT 60
49331: PUSH
49332: EMPTY
49333: LIST
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 3
49341: PUSH
49342: LD_INT 55
49344: PUSH
49345: EMPTY
49346: LIST
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PPUSH
49356: CALL_OW 72
49360: IFFALSE 49468
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49362: LD_ADDR_VAR 0 18
49366: PUSH
49367: LD_VAR 0 6
49371: PPUSH
49372: LD_INT 3
49374: PUSH
49375: LD_INT 60
49377: PUSH
49378: EMPTY
49379: LIST
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 3
49387: PUSH
49388: LD_INT 55
49390: PUSH
49391: EMPTY
49392: LIST
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PPUSH
49402: CALL_OW 72
49406: PUSH
49407: LD_INT 1
49409: ARRAY
49410: ST_TO_ADDR
// if IsInUnit ( driver ) then
49411: LD_VAR 0 18
49415: PPUSH
49416: CALL_OW 310
49420: IFFALSE 49431
// ComExit ( driver ) ;
49422: LD_VAR 0 18
49426: PPUSH
49427: CALL 74220 0 1
// AddComEnterUnit ( driver , tmp ) ;
49431: LD_VAR 0 18
49435: PPUSH
49436: LD_VAR 0 13
49440: PPUSH
49441: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49445: LD_VAR 0 18
49449: PPUSH
49450: LD_VAR 0 7
49454: PPUSH
49455: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49459: LD_VAR 0 18
49463: PPUSH
49464: CALL_OW 181
// end ; continue ;
49468: GO 49120
// end ; if not cleaners or not tmp in cleaners then
49470: LD_VAR 0 6
49474: NOT
49475: PUSH
49476: LD_VAR 0 13
49480: PUSH
49481: LD_VAR 0 6
49485: IN
49486: NOT
49487: OR
49488: IFFALSE 49795
// begin if dep then
49490: LD_VAR 0 17
49494: IFFALSE 49630
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49496: LD_ADDR_VAR 0 16
49500: PUSH
49501: LD_VAR 0 17
49505: PUSH
49506: LD_INT 1
49508: ARRAY
49509: PPUSH
49510: CALL_OW 250
49514: PPUSH
49515: LD_VAR 0 17
49519: PUSH
49520: LD_INT 1
49522: ARRAY
49523: PPUSH
49524: CALL_OW 254
49528: PPUSH
49529: LD_INT 5
49531: PPUSH
49532: CALL_OW 272
49536: PUSH
49537: LD_VAR 0 17
49541: PUSH
49542: LD_INT 1
49544: ARRAY
49545: PPUSH
49546: CALL_OW 251
49550: PPUSH
49551: LD_VAR 0 17
49555: PUSH
49556: LD_INT 1
49558: ARRAY
49559: PPUSH
49560: CALL_OW 254
49564: PPUSH
49565: LD_INT 5
49567: PPUSH
49568: CALL_OW 273
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49577: LD_VAR 0 16
49581: PUSH
49582: LD_INT 1
49584: ARRAY
49585: PPUSH
49586: LD_VAR 0 16
49590: PUSH
49591: LD_INT 2
49593: ARRAY
49594: PPUSH
49595: CALL_OW 488
49599: IFFALSE 49630
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49601: LD_VAR 0 13
49605: PPUSH
49606: LD_VAR 0 16
49610: PUSH
49611: LD_INT 1
49613: ARRAY
49614: PPUSH
49615: LD_VAR 0 16
49619: PUSH
49620: LD_INT 2
49622: ARRAY
49623: PPUSH
49624: CALL_OW 111
// continue ;
49628: GO 49120
// end ; end ; r := GetDir ( tmp ) ;
49630: LD_ADDR_VAR 0 15
49634: PUSH
49635: LD_VAR 0 13
49639: PPUSH
49640: CALL_OW 254
49644: ST_TO_ADDR
// if r = 5 then
49645: LD_VAR 0 15
49649: PUSH
49650: LD_INT 5
49652: EQUAL
49653: IFFALSE 49663
// r := 0 ;
49655: LD_ADDR_VAR 0 15
49659: PUSH
49660: LD_INT 0
49662: ST_TO_ADDR
// for j = r to 5 do
49663: LD_ADDR_VAR 0 10
49667: PUSH
49668: DOUBLE
49669: LD_VAR 0 15
49673: DEC
49674: ST_TO_ADDR
49675: LD_INT 5
49677: PUSH
49678: FOR_TO
49679: IFFALSE 49793
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49681: LD_ADDR_VAR 0 11
49685: PUSH
49686: LD_VAR 0 13
49690: PPUSH
49691: CALL_OW 250
49695: PPUSH
49696: LD_VAR 0 10
49700: PPUSH
49701: LD_INT 2
49703: PPUSH
49704: CALL_OW 272
49708: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49709: LD_ADDR_VAR 0 12
49713: PUSH
49714: LD_VAR 0 13
49718: PPUSH
49719: CALL_OW 251
49723: PPUSH
49724: LD_VAR 0 10
49728: PPUSH
49729: LD_INT 2
49731: PPUSH
49732: CALL_OW 273
49736: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49737: LD_VAR 0 11
49741: PPUSH
49742: LD_VAR 0 12
49746: PPUSH
49747: CALL_OW 488
49751: PUSH
49752: LD_VAR 0 11
49756: PPUSH
49757: LD_VAR 0 12
49761: PPUSH
49762: CALL_OW 428
49766: NOT
49767: AND
49768: IFFALSE 49791
// begin ComMoveXY ( tmp , _x , _y ) ;
49770: LD_VAR 0 13
49774: PPUSH
49775: LD_VAR 0 11
49779: PPUSH
49780: LD_VAR 0 12
49784: PPUSH
49785: CALL_OW 111
// break ;
49789: GO 49793
// end ; end ;
49791: GO 49678
49793: POP
49794: POP
// end ; end ;
49795: GO 49120
49797: POP
49798: POP
// end ;
49799: LD_VAR 0 8
49803: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49804: LD_INT 0
49806: PPUSH
// result := true ;
49807: LD_ADDR_VAR 0 3
49811: PUSH
49812: LD_INT 1
49814: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49815: LD_VAR 0 2
49819: PUSH
49820: LD_INT 24
49822: DOUBLE
49823: EQUAL
49824: IFTRUE 49834
49826: LD_INT 33
49828: DOUBLE
49829: EQUAL
49830: IFTRUE 49834
49832: GO 49859
49834: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49835: LD_ADDR_VAR 0 3
49839: PUSH
49840: LD_INT 32
49842: PPUSH
49843: LD_VAR 0 1
49847: PPUSH
49848: CALL_OW 321
49852: PUSH
49853: LD_INT 2
49855: EQUAL
49856: ST_TO_ADDR
49857: GO 50179
49859: LD_INT 20
49861: DOUBLE
49862: EQUAL
49863: IFTRUE 49867
49865: GO 49892
49867: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49868: LD_ADDR_VAR 0 3
49872: PUSH
49873: LD_INT 6
49875: PPUSH
49876: LD_VAR 0 1
49880: PPUSH
49881: CALL_OW 321
49885: PUSH
49886: LD_INT 2
49888: EQUAL
49889: ST_TO_ADDR
49890: GO 50179
49892: LD_INT 22
49894: DOUBLE
49895: EQUAL
49896: IFTRUE 49906
49898: LD_INT 36
49900: DOUBLE
49901: EQUAL
49902: IFTRUE 49906
49904: GO 49931
49906: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49907: LD_ADDR_VAR 0 3
49911: PUSH
49912: LD_INT 15
49914: PPUSH
49915: LD_VAR 0 1
49919: PPUSH
49920: CALL_OW 321
49924: PUSH
49925: LD_INT 2
49927: EQUAL
49928: ST_TO_ADDR
49929: GO 50179
49931: LD_INT 30
49933: DOUBLE
49934: EQUAL
49935: IFTRUE 49939
49937: GO 49964
49939: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49940: LD_ADDR_VAR 0 3
49944: PUSH
49945: LD_INT 20
49947: PPUSH
49948: LD_VAR 0 1
49952: PPUSH
49953: CALL_OW 321
49957: PUSH
49958: LD_INT 2
49960: EQUAL
49961: ST_TO_ADDR
49962: GO 50179
49964: LD_INT 28
49966: DOUBLE
49967: EQUAL
49968: IFTRUE 49978
49970: LD_INT 21
49972: DOUBLE
49973: EQUAL
49974: IFTRUE 49978
49976: GO 50003
49978: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49979: LD_ADDR_VAR 0 3
49983: PUSH
49984: LD_INT 21
49986: PPUSH
49987: LD_VAR 0 1
49991: PPUSH
49992: CALL_OW 321
49996: PUSH
49997: LD_INT 2
49999: EQUAL
50000: ST_TO_ADDR
50001: GO 50179
50003: LD_INT 16
50005: DOUBLE
50006: EQUAL
50007: IFTRUE 50011
50009: GO 50038
50011: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50012: LD_ADDR_VAR 0 3
50016: PUSH
50017: LD_EXP 62
50021: PPUSH
50022: LD_VAR 0 1
50026: PPUSH
50027: CALL_OW 321
50031: PUSH
50032: LD_INT 2
50034: EQUAL
50035: ST_TO_ADDR
50036: GO 50179
50038: LD_INT 19
50040: DOUBLE
50041: EQUAL
50042: IFTRUE 50052
50044: LD_INT 23
50046: DOUBLE
50047: EQUAL
50048: IFTRUE 50052
50050: GO 50079
50052: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50053: LD_ADDR_VAR 0 3
50057: PUSH
50058: LD_EXP 61
50062: PPUSH
50063: LD_VAR 0 1
50067: PPUSH
50068: CALL_OW 321
50072: PUSH
50073: LD_INT 2
50075: EQUAL
50076: ST_TO_ADDR
50077: GO 50179
50079: LD_INT 17
50081: DOUBLE
50082: EQUAL
50083: IFTRUE 50087
50085: GO 50112
50087: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50088: LD_ADDR_VAR 0 3
50092: PUSH
50093: LD_INT 39
50095: PPUSH
50096: LD_VAR 0 1
50100: PPUSH
50101: CALL_OW 321
50105: PUSH
50106: LD_INT 2
50108: EQUAL
50109: ST_TO_ADDR
50110: GO 50179
50112: LD_INT 18
50114: DOUBLE
50115: EQUAL
50116: IFTRUE 50120
50118: GO 50145
50120: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50121: LD_ADDR_VAR 0 3
50125: PUSH
50126: LD_INT 40
50128: PPUSH
50129: LD_VAR 0 1
50133: PPUSH
50134: CALL_OW 321
50138: PUSH
50139: LD_INT 2
50141: EQUAL
50142: ST_TO_ADDR
50143: GO 50179
50145: LD_INT 27
50147: DOUBLE
50148: EQUAL
50149: IFTRUE 50153
50151: GO 50178
50153: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50154: LD_ADDR_VAR 0 3
50158: PUSH
50159: LD_INT 35
50161: PPUSH
50162: LD_VAR 0 1
50166: PPUSH
50167: CALL_OW 321
50171: PUSH
50172: LD_INT 2
50174: EQUAL
50175: ST_TO_ADDR
50176: GO 50179
50178: POP
// end ;
50179: LD_VAR 0 3
50183: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50184: LD_INT 0
50186: PPUSH
50187: PPUSH
50188: PPUSH
50189: PPUSH
50190: PPUSH
50191: PPUSH
50192: PPUSH
50193: PPUSH
50194: PPUSH
50195: PPUSH
50196: PPUSH
// result := false ;
50197: LD_ADDR_VAR 0 6
50201: PUSH
50202: LD_INT 0
50204: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50205: LD_VAR 0 1
50209: NOT
50210: PUSH
50211: LD_VAR 0 1
50215: PPUSH
50216: CALL_OW 266
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: IN
50231: NOT
50232: OR
50233: PUSH
50234: LD_VAR 0 2
50238: NOT
50239: OR
50240: PUSH
50241: LD_VAR 0 5
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: LD_INT 2
50254: PUSH
50255: LD_INT 3
50257: PUSH
50258: LD_INT 4
50260: PUSH
50261: LD_INT 5
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: IN
50272: NOT
50273: OR
50274: PUSH
50275: LD_VAR 0 3
50279: PPUSH
50280: LD_VAR 0 4
50284: PPUSH
50285: CALL_OW 488
50289: NOT
50290: OR
50291: IFFALSE 50295
// exit ;
50293: GO 51031
// side := GetSide ( depot ) ;
50295: LD_ADDR_VAR 0 9
50299: PUSH
50300: LD_VAR 0 1
50304: PPUSH
50305: CALL_OW 255
50309: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50310: LD_VAR 0 9
50314: PPUSH
50315: LD_VAR 0 2
50319: PPUSH
50320: CALL 49804 0 2
50324: NOT
50325: IFFALSE 50329
// exit ;
50327: GO 51031
// pom := GetBase ( depot ) ;
50329: LD_ADDR_VAR 0 10
50333: PUSH
50334: LD_VAR 0 1
50338: PPUSH
50339: CALL_OW 274
50343: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50344: LD_ADDR_VAR 0 11
50348: PUSH
50349: LD_VAR 0 2
50353: PPUSH
50354: LD_VAR 0 1
50358: PPUSH
50359: CALL_OW 248
50363: PPUSH
50364: CALL_OW 450
50368: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50369: LD_VAR 0 10
50373: PPUSH
50374: LD_INT 1
50376: PPUSH
50377: CALL_OW 275
50381: PUSH
50382: LD_VAR 0 11
50386: PUSH
50387: LD_INT 1
50389: ARRAY
50390: GREATEREQUAL
50391: PUSH
50392: LD_VAR 0 10
50396: PPUSH
50397: LD_INT 2
50399: PPUSH
50400: CALL_OW 275
50404: PUSH
50405: LD_VAR 0 11
50409: PUSH
50410: LD_INT 2
50412: ARRAY
50413: GREATEREQUAL
50414: AND
50415: PUSH
50416: LD_VAR 0 10
50420: PPUSH
50421: LD_INT 3
50423: PPUSH
50424: CALL_OW 275
50428: PUSH
50429: LD_VAR 0 11
50433: PUSH
50434: LD_INT 3
50436: ARRAY
50437: GREATEREQUAL
50438: AND
50439: NOT
50440: IFFALSE 50444
// exit ;
50442: GO 51031
// if GetBType ( depot ) = b_depot then
50444: LD_VAR 0 1
50448: PPUSH
50449: CALL_OW 266
50453: PUSH
50454: LD_INT 0
50456: EQUAL
50457: IFFALSE 50469
// dist := 28 else
50459: LD_ADDR_VAR 0 14
50463: PUSH
50464: LD_INT 28
50466: ST_TO_ADDR
50467: GO 50477
// dist := 36 ;
50469: LD_ADDR_VAR 0 14
50473: PUSH
50474: LD_INT 36
50476: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50477: LD_VAR 0 1
50481: PPUSH
50482: LD_VAR 0 3
50486: PPUSH
50487: LD_VAR 0 4
50491: PPUSH
50492: CALL_OW 297
50496: PUSH
50497: LD_VAR 0 14
50501: GREATER
50502: IFFALSE 50506
// exit ;
50504: GO 51031
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50506: LD_ADDR_VAR 0 12
50510: PUSH
50511: LD_VAR 0 2
50515: PPUSH
50516: LD_VAR 0 3
50520: PPUSH
50521: LD_VAR 0 4
50525: PPUSH
50526: LD_VAR 0 5
50530: PPUSH
50531: LD_VAR 0 1
50535: PPUSH
50536: CALL_OW 248
50540: PPUSH
50541: LD_INT 0
50543: PPUSH
50544: CALL 51036 0 6
50548: ST_TO_ADDR
// if not hexes then
50549: LD_VAR 0 12
50553: NOT
50554: IFFALSE 50558
// exit ;
50556: GO 51031
// hex := GetHexInfo ( x , y ) ;
50558: LD_ADDR_VAR 0 15
50562: PUSH
50563: LD_VAR 0 3
50567: PPUSH
50568: LD_VAR 0 4
50572: PPUSH
50573: CALL_OW 546
50577: ST_TO_ADDR
// if hex [ 1 ] then
50578: LD_VAR 0 15
50582: PUSH
50583: LD_INT 1
50585: ARRAY
50586: IFFALSE 50590
// exit ;
50588: GO 51031
// height := hex [ 2 ] ;
50590: LD_ADDR_VAR 0 13
50594: PUSH
50595: LD_VAR 0 15
50599: PUSH
50600: LD_INT 2
50602: ARRAY
50603: ST_TO_ADDR
// for i = 1 to hexes do
50604: LD_ADDR_VAR 0 7
50608: PUSH
50609: DOUBLE
50610: LD_INT 1
50612: DEC
50613: ST_TO_ADDR
50614: LD_VAR 0 12
50618: PUSH
50619: FOR_TO
50620: IFFALSE 50950
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50622: LD_VAR 0 12
50626: PUSH
50627: LD_VAR 0 7
50631: ARRAY
50632: PUSH
50633: LD_INT 1
50635: ARRAY
50636: PPUSH
50637: LD_VAR 0 12
50641: PUSH
50642: LD_VAR 0 7
50646: ARRAY
50647: PUSH
50648: LD_INT 2
50650: ARRAY
50651: PPUSH
50652: CALL_OW 488
50656: NOT
50657: PUSH
50658: LD_VAR 0 12
50662: PUSH
50663: LD_VAR 0 7
50667: ARRAY
50668: PUSH
50669: LD_INT 1
50671: ARRAY
50672: PPUSH
50673: LD_VAR 0 12
50677: PUSH
50678: LD_VAR 0 7
50682: ARRAY
50683: PUSH
50684: LD_INT 2
50686: ARRAY
50687: PPUSH
50688: CALL_OW 428
50692: PUSH
50693: LD_INT 0
50695: GREATER
50696: OR
50697: PUSH
50698: LD_VAR 0 12
50702: PUSH
50703: LD_VAR 0 7
50707: ARRAY
50708: PUSH
50709: LD_INT 1
50711: ARRAY
50712: PPUSH
50713: LD_VAR 0 12
50717: PUSH
50718: LD_VAR 0 7
50722: ARRAY
50723: PUSH
50724: LD_INT 2
50726: ARRAY
50727: PPUSH
50728: CALL_OW 351
50732: OR
50733: IFFALSE 50739
// exit ;
50735: POP
50736: POP
50737: GO 51031
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50739: LD_ADDR_VAR 0 8
50743: PUSH
50744: LD_VAR 0 12
50748: PUSH
50749: LD_VAR 0 7
50753: ARRAY
50754: PUSH
50755: LD_INT 1
50757: ARRAY
50758: PPUSH
50759: LD_VAR 0 12
50763: PUSH
50764: LD_VAR 0 7
50768: ARRAY
50769: PUSH
50770: LD_INT 2
50772: ARRAY
50773: PPUSH
50774: CALL_OW 546
50778: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50779: LD_VAR 0 8
50783: PUSH
50784: LD_INT 1
50786: ARRAY
50787: PUSH
50788: LD_VAR 0 8
50792: PUSH
50793: LD_INT 2
50795: ARRAY
50796: PUSH
50797: LD_VAR 0 13
50801: PUSH
50802: LD_INT 2
50804: PLUS
50805: GREATER
50806: OR
50807: PUSH
50808: LD_VAR 0 8
50812: PUSH
50813: LD_INT 2
50815: ARRAY
50816: PUSH
50817: LD_VAR 0 13
50821: PUSH
50822: LD_INT 2
50824: MINUS
50825: LESS
50826: OR
50827: PUSH
50828: LD_VAR 0 8
50832: PUSH
50833: LD_INT 3
50835: ARRAY
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: LD_INT 8
50842: PUSH
50843: LD_INT 9
50845: PUSH
50846: LD_INT 10
50848: PUSH
50849: LD_INT 11
50851: PUSH
50852: LD_INT 12
50854: PUSH
50855: LD_INT 13
50857: PUSH
50858: LD_INT 16
50860: PUSH
50861: LD_INT 17
50863: PUSH
50864: LD_INT 18
50866: PUSH
50867: LD_INT 19
50869: PUSH
50870: LD_INT 20
50872: PUSH
50873: LD_INT 21
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: IN
50891: NOT
50892: OR
50893: PUSH
50894: LD_VAR 0 8
50898: PUSH
50899: LD_INT 5
50901: ARRAY
50902: NOT
50903: OR
50904: PUSH
50905: LD_VAR 0 8
50909: PUSH
50910: LD_INT 6
50912: ARRAY
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: LD_INT 7
50922: PUSH
50923: LD_INT 9
50925: PUSH
50926: LD_INT 10
50928: PUSH
50929: LD_INT 11
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: IN
50940: NOT
50941: OR
50942: IFFALSE 50948
// exit ;
50944: POP
50945: POP
50946: GO 51031
// end ;
50948: GO 50619
50950: POP
50951: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50952: LD_VAR 0 9
50956: PPUSH
50957: LD_VAR 0 3
50961: PPUSH
50962: LD_VAR 0 4
50966: PPUSH
50967: LD_INT 20
50969: PPUSH
50970: CALL 42977 0 4
50974: PUSH
50975: LD_INT 4
50977: ARRAY
50978: IFFALSE 50982
// exit ;
50980: GO 51031
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50982: LD_VAR 0 2
50986: PUSH
50987: LD_INT 29
50989: PUSH
50990: LD_INT 30
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: IN
50997: PUSH
50998: LD_VAR 0 3
51002: PPUSH
51003: LD_VAR 0 4
51007: PPUSH
51008: LD_VAR 0 9
51012: PPUSH
51013: CALL_OW 440
51017: NOT
51018: AND
51019: IFFALSE 51023
// exit ;
51021: GO 51031
// result := true ;
51023: LD_ADDR_VAR 0 6
51027: PUSH
51028: LD_INT 1
51030: ST_TO_ADDR
// end ;
51031: LD_VAR 0 6
51035: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51036: LD_INT 0
51038: PPUSH
51039: PPUSH
51040: PPUSH
51041: PPUSH
51042: PPUSH
51043: PPUSH
51044: PPUSH
51045: PPUSH
51046: PPUSH
51047: PPUSH
51048: PPUSH
51049: PPUSH
51050: PPUSH
51051: PPUSH
51052: PPUSH
51053: PPUSH
51054: PPUSH
51055: PPUSH
51056: PPUSH
51057: PPUSH
51058: PPUSH
51059: PPUSH
51060: PPUSH
51061: PPUSH
51062: PPUSH
51063: PPUSH
51064: PPUSH
51065: PPUSH
51066: PPUSH
51067: PPUSH
51068: PPUSH
51069: PPUSH
51070: PPUSH
51071: PPUSH
51072: PPUSH
51073: PPUSH
51074: PPUSH
51075: PPUSH
51076: PPUSH
51077: PPUSH
51078: PPUSH
51079: PPUSH
51080: PPUSH
51081: PPUSH
51082: PPUSH
51083: PPUSH
51084: PPUSH
51085: PPUSH
51086: PPUSH
51087: PPUSH
51088: PPUSH
51089: PPUSH
51090: PPUSH
51091: PPUSH
51092: PPUSH
51093: PPUSH
51094: PPUSH
51095: PPUSH
// result = [ ] ;
51096: LD_ADDR_VAR 0 7
51100: PUSH
51101: EMPTY
51102: ST_TO_ADDR
// temp_list = [ ] ;
51103: LD_ADDR_VAR 0 9
51107: PUSH
51108: EMPTY
51109: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51110: LD_VAR 0 4
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 2
51123: PUSH
51124: LD_INT 3
51126: PUSH
51127: LD_INT 4
51129: PUSH
51130: LD_INT 5
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: IN
51141: NOT
51142: PUSH
51143: LD_VAR 0 1
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: IN
51158: PUSH
51159: LD_VAR 0 5
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: LD_INT 3
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: LIST
51177: IN
51178: NOT
51179: AND
51180: OR
51181: IFFALSE 51185
// exit ;
51183: GO 69576
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51185: LD_VAR 0 1
51189: PUSH
51190: LD_INT 6
51192: PUSH
51193: LD_INT 7
51195: PUSH
51196: LD_INT 8
51198: PUSH
51199: LD_INT 13
51201: PUSH
51202: LD_INT 12
51204: PUSH
51205: LD_INT 15
51207: PUSH
51208: LD_INT 11
51210: PUSH
51211: LD_INT 14
51213: PUSH
51214: LD_INT 10
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: IN
51228: IFFALSE 51238
// btype = b_lab ;
51230: LD_ADDR_VAR 0 1
51234: PUSH
51235: LD_INT 6
51237: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51238: LD_VAR 0 6
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: LIST
51256: IN
51257: NOT
51258: PUSH
51259: LD_VAR 0 1
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: LD_INT 3
51275: PUSH
51276: LD_INT 6
51278: PUSH
51279: LD_INT 36
51281: PUSH
51282: LD_INT 4
51284: PUSH
51285: LD_INT 5
51287: PUSH
51288: LD_INT 31
51290: PUSH
51291: LD_INT 32
51293: PUSH
51294: LD_INT 33
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: IN
51310: NOT
51311: PUSH
51312: LD_VAR 0 6
51316: PUSH
51317: LD_INT 1
51319: EQUAL
51320: AND
51321: OR
51322: PUSH
51323: LD_VAR 0 1
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: LD_INT 3
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: IN
51338: NOT
51339: PUSH
51340: LD_VAR 0 6
51344: PUSH
51345: LD_INT 2
51347: EQUAL
51348: AND
51349: OR
51350: IFFALSE 51360
// mode = 0 ;
51352: LD_ADDR_VAR 0 6
51356: PUSH
51357: LD_INT 0
51359: ST_TO_ADDR
// case mode of 0 :
51360: LD_VAR 0 6
51364: PUSH
51365: LD_INT 0
51367: DOUBLE
51368: EQUAL
51369: IFTRUE 51373
51371: GO 62826
51373: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51374: LD_ADDR_VAR 0 11
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 2
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 0
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: LD_INT 3
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: LD_INT 3
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: LD_INT 2
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51567: LD_ADDR_VAR 0 12
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 3
51724: NEG
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 3
51735: NEG
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51763: LD_ADDR_VAR 0 13
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: LD_INT 1
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: LD_INT 2
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: LD_INT 2
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: NEG
51899: PUSH
51900: LD_INT 2
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: LD_INT 3
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 3
51922: NEG
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 3
51934: NEG
51935: PUSH
51936: LD_INT 3
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51962: LD_ADDR_VAR 0 14
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: LD_INT 3
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: LD_INT 3
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: LD_INT 2
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52158: LD_ADDR_VAR 0 15
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 3
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52351: LD_ADDR_VAR 0 16
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 2
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: LD_INT 2
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 2
52474: NEG
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: LD_INT 2
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 3
52498: PUSH
52499: LD_INT 2
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 3
52508: PUSH
52509: LD_INT 3
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 2
52518: PUSH
52519: LD_INT 3
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52544: LD_ADDR_VAR 0 17
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 2
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 2
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 2
52720: NEG
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52774: LD_ADDR_VAR 0 18
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: LD_INT 2
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: LD_INT 2
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 2
52950: NEG
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: NEG
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 2
52973: NEG
52974: PUSH
52975: LD_INT 2
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53004: LD_ADDR_VAR 0 19
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: LD_INT 2
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 2
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 2
53139: PUSH
53140: LD_INT 2
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 2
53180: NEG
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 2
53203: NEG
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53234: LD_ADDR_VAR 0 20
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 2
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 2
53410: NEG
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: LD_INT 2
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53464: LD_ADDR_VAR 0 21
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 1
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 2
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 2
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 2
53640: NEG
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 2
53651: NEG
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53694: LD_ADDR_VAR 0 22
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: LD_INT 2
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 2
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: LD_INT 2
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: NEG
53894: PUSH
53895: LD_INT 2
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53924: LD_ADDR_VAR 0 23
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: LD_INT 2
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 2
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 2
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: NEG
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 2
54135: NEG
54136: PUSH
54137: LD_INT 3
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: LD_INT 3
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: LD_INT 2
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 2
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54204: LD_ADDR_VAR 0 24
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: LD_INT 2
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 2
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 2
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 3
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 3
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54480: LD_ADDR_VAR 0 25
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: LD_INT 2
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 2
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 2
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 2
54679: NEG
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 3
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 3
54701: PUSH
54702: LD_INT 2
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: LD_INT 3
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: LD_INT 3
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54754: LD_ADDR_VAR 0 26
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: LD_INT 1
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 2
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 2
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 2
54889: PUSH
54890: LD_INT 2
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: LD_INT 2
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: LD_INT 2
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 1
54919: NEG
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 2
54930: NEG
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 2
54941: NEG
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 2
54953: NEG
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 2
54965: PUSH
54966: LD_INT 3
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: LD_INT 3
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55030: LD_ADDR_VAR 0 27
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 2
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: LD_INT 2
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: LD_INT 2
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 2
55252: NEG
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 3
55263: NEG
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 3
55275: NEG
55276: PUSH
55277: LD_INT 2
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55310: LD_ADDR_VAR 0 28
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: LD_INT 2
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 2
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: LD_INT 2
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: LD_INT 2
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 2
55486: NEG
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 2
55497: NEG
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 2
55509: NEG
55510: PUSH
55511: LD_INT 2
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 2
55521: NEG
55522: PUSH
55523: LD_INT 3
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: LD_INT 3
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 3
55545: NEG
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 3
55557: NEG
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55592: LD_ADDR_VAR 0 29
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: LD_INT 2
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: LD_INT 3
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 3
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 3
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 3
55836: NEG
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55871: LD_ADDR_VAR 0 30
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: LD_INT 2
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: LD_INT 2
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: LD_INT 2
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: LD_INT 2
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: LD_INT 3
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 3
56083: PUSH
56084: LD_INT 2
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: LD_INT 3
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 3
56114: NEG
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56149: LD_ADDR_VAR 0 31
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: LD_INT 2
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 2
56273: PUSH
56274: LD_INT 2
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: LD_INT 2
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: LD_INT 2
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: NEG
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: LD_INT 2
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 2
56338: NEG
56339: PUSH
56340: LD_INT 3
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 2
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 3
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: LD_INT 3
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 3
56392: NEG
56393: PUSH
56394: LD_INT 2
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56427: LD_ADDR_VAR 0 32
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: LD_INT 2
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: LD_INT 2
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 2
56604: NEG
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: LD_INT 3
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 1
56628: PUSH
56629: LD_INT 2
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 3
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 2
56649: PUSH
56650: LD_INT 3
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 2
56659: NEG
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 3
56670: NEG
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56705: LD_ADDR_VAR 0 33
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 2
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 2
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: NEG
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 2
56871: NEG
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: NEG
56884: PUSH
56885: LD_INT 2
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 2
56895: NEG
56896: PUSH
56897: LD_INT 3
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 3
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: LD_INT 3
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 3
56949: NEG
56950: PUSH
56951: LD_INT 2
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56984: LD_ADDR_VAR 0 34
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 1
57042: NEG
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: LD_INT 2
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: LD_INT 2
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 2
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 2
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 2
57151: NEG
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: LD_INT 2
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: LD_INT 3
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: LD_INT 2
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 3
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: LD_INT 3
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 3
57229: NEG
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57264: LD_ADDR_VAR 0 35
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: LD_INT 1
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 2
57355: NEG
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57376: LD_ADDR_VAR 0 36
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 0
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: LD_INT 2
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: PUSH
57470: LD_INT 2
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57488: LD_ADDR_VAR 0 37
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57600: LD_ADDR_VAR 0 38
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: LD_INT 1
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: NEG
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57712: LD_ADDR_VAR 0 39
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: LD_INT 2
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: LD_INT 2
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57824: LD_ADDR_VAR 0 40
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 1
57893: NEG
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: LD_INT 1
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57936: LD_ADDR_VAR 0 41
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: LD_INT 2
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 2
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: LD_INT 3
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 2
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 3
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 3
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 3
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 3
58179: PUSH
58180: LD_INT 3
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: LD_INT 3
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 2
58199: NEG
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 3
58210: NEG
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 3
58221: NEG
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 3
58233: NEG
58234: PUSH
58235: LD_INT 2
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 3
58245: NEG
58246: PUSH
58247: LD_INT 3
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58286: LD_ADDR_VAR 0 42
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: LD_INT 2
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 2
58464: NEG
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 2
58476: NEG
58477: PUSH
58478: LD_INT 3
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: LD_INT 3
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: LD_INT 3
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: PUSH
58512: LD_INT 2
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 3
58522: PUSH
58523: LD_INT 2
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 3
58532: PUSH
58533: LD_INT 3
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 2
58542: PUSH
58543: LD_INT 3
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: PUSH
58553: LD_INT 3
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: LD_INT 3
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 3
58583: NEG
58584: PUSH
58585: LD_INT 2
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 3
58595: NEG
58596: PUSH
58597: LD_INT 3
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58636: LD_ADDR_VAR 0 43
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 0
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 0
58729: PUSH
58730: LD_INT 2
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 2
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 2
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: LD_INT 3
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: LD_INT 3
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: LD_INT 2
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 3
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 3
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: LD_INT 3
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: LD_INT 3
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: LD_INT 2
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 3
58932: NEG
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 3
58943: NEG
58944: PUSH
58945: LD_INT 1
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58984: LD_ADDR_VAR 0 44
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: LD_INT 2
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 2
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 2
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 2
59108: PUSH
59109: LD_INT 2
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 2
59150: NEG
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 2
59162: NEG
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: LD_INT 3
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 2
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 3
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 3
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 3
59217: PUSH
59218: LD_INT 2
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 3
59227: PUSH
59228: LD_INT 3
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: PUSH
59238: LD_INT 3
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 2
59247: NEG
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 3
59258: NEG
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 3
59269: NEG
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 3
59281: NEG
59282: PUSH
59283: LD_INT 2
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 3
59293: NEG
59294: PUSH
59295: LD_INT 3
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59334: LD_ADDR_VAR 0 45
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 0
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: LD_INT 2
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: LD_INT 2
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 2
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 2
59459: PUSH
59460: LD_INT 2
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: LD_INT 2
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: LD_INT 2
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 2
59500: NEG
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 2
59512: NEG
59513: PUSH
59514: LD_INT 2
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: LD_INT 3
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: LD_INT 3
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: LD_INT 3
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: PUSH
59560: LD_INT 2
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 3
59570: PUSH
59571: LD_INT 2
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 3
59580: PUSH
59581: LD_INT 3
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: PUSH
59591: LD_INT 3
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: PUSH
59601: LD_INT 3
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: LD_INT 3
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: LD_INT 2
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 3
59631: NEG
59632: PUSH
59633: LD_INT 2
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 3
59643: NEG
59644: PUSH
59645: LD_INT 3
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59684: LD_ADDR_VAR 0 46
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: LD_INT 1
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: LD_INT 1
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 0
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: NEG
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: LD_INT 2
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: LD_INT 2
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 2
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 2
59809: PUSH
59810: LD_INT 1
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 1
59819: PUSH
59820: LD_INT 2
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 2
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 2
59850: NEG
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 2
59861: NEG
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: NEG
59874: PUSH
59875: LD_INT 3
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 0
59885: PUSH
59886: LD_INT 3
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 3
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 3
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: LD_INT 3
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 0
59948: PUSH
59949: LD_INT 3
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 2
59969: NEG
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 3
59980: NEG
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 3
59991: NEG
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60032: LD_ADDR_VAR 0 47
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: LD_INT 1
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: LD_INT 2
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: LD_INT 2
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 2
60147: NEG
60148: PUSH
60149: LD_INT 1
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: LD_INT 2
60163: NEG
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60183: LD_ADDR_VAR 0 48
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 1
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: LD_INT 2
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: LD_INT 2
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 2
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60330: LD_ADDR_VAR 0 49
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: LD_INT 0
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: LD_INT 1
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 1
60411: PUSH
60412: LD_INT 1
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 2
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: LD_INT 2
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60474: LD_ADDR_VAR 0 50
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: LD_INT 1
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: LD_INT 1
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 1
60532: NEG
60533: PUSH
60534: LD_INT 0
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: LD_INT 1
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 2
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 2
60565: PUSH
60566: LD_INT 2
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 1
60575: PUSH
60576: LD_INT 2
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: LD_INT 2
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: NEG
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60618: LD_ADDR_VAR 0 51
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: LD_INT 2
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: LD_INT 2
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: LD_INT 1
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 2
60730: NEG
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 2
60741: NEG
60742: PUSH
60743: LD_INT 1
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60765: LD_ADDR_VAR 0 52
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: LD_INT 1
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 1
60823: NEG
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: NEG
60847: PUSH
60848: LD_INT 2
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 2
60869: NEG
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 2
60880: NEG
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 2
60892: NEG
60893: PUSH
60894: LD_INT 2
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60916: LD_ADDR_VAR 0 53
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 1
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: NEG
60998: PUSH
60999: LD_INT 2
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: LD_INT 2
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: LD_INT 1
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 2
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 2
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 2
61051: PUSH
61052: LD_INT 2
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 1
61081: NEG
61082: PUSH
61083: LD_INT 1
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 2
61092: NEG
61093: PUSH
61094: LD_INT 0
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: LD_INT 1
61107: NEG
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 2
61115: NEG
61116: PUSH
61117: LD_INT 2
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61146: LD_ADDR_VAR 0 54
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 1
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: LD_INT 1
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 1
61215: NEG
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: NEG
61228: PUSH
61229: LD_INT 2
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: LD_INT 1
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 2
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 2
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 2
61281: PUSH
61282: LD_INT 2
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: LD_INT 2
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: LD_INT 2
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 1
61311: NEG
61312: PUSH
61313: LD_INT 1
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 2
61322: NEG
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 2
61333: NEG
61334: PUSH
61335: LD_INT 1
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 2
61345: NEG
61346: PUSH
61347: LD_INT 2
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61376: LD_ADDR_VAR 0 55
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 0
61393: PUSH
61394: LD_INT 1
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 1
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: PUSH
61415: LD_INT 1
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: LD_INT 1
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 1
61445: NEG
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: NEG
61458: PUSH
61459: LD_INT 2
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: LD_INT 2
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 1
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 2
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 2
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 2
61511: PUSH
61512: LD_INT 2
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: PUSH
61522: LD_INT 2
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: LD_INT 2
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 2
61552: NEG
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 2
61563: NEG
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: NEG
61576: PUSH
61577: LD_INT 2
61579: NEG
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61606: LD_ADDR_VAR 0 56
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: LD_INT 1
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: LD_INT 1
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: LD_INT 1
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 1
61675: NEG
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 1
61687: NEG
61688: PUSH
61689: LD_INT 2
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: LD_INT 2
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 2
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 2
61731: PUSH
61732: LD_INT 1
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 2
61741: PUSH
61742: LD_INT 2
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: LD_INT 2
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: LD_INT 2
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: LD_INT 1
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 2
61782: NEG
61783: PUSH
61784: LD_INT 0
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 2
61793: NEG
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 2
61805: NEG
61806: PUSH
61807: LD_INT 2
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61836: LD_ADDR_VAR 0 57
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 0
61853: PUSH
61854: LD_INT 1
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 1
61874: PUSH
61875: LD_INT 1
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 1
61917: NEG
61918: PUSH
61919: LD_INT 2
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: LD_INT 2
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 2
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 2
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 2
61971: PUSH
61972: LD_INT 2
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: LD_INT 2
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 2
62012: NEG
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 2
62023: NEG
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 2
62035: NEG
62036: PUSH
62037: LD_INT 2
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62066: LD_ADDR_VAR 0 58
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: NEG
62148: PUSH
62149: LD_INT 2
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: LD_INT 2
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 2
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 2
62191: PUSH
62192: LD_INT 1
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 2
62201: PUSH
62202: LD_INT 2
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 1
62211: PUSH
62212: LD_INT 2
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: LD_INT 2
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 2
62242: NEG
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 2
62253: NEG
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 2
62265: NEG
62266: PUSH
62267: LD_INT 2
62269: NEG
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62296: LD_ADDR_VAR 0 59
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 0
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 1
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 1
62334: PUSH
62335: LD_INT 1
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 1
62354: NEG
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 1
62365: NEG
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62384: LD_ADDR_VAR 0 60
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: LD_INT 1
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: LD_INT 1
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: LD_INT 0
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 1
62453: NEG
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62472: LD_ADDR_VAR 0 61
62476: PUSH
62477: LD_INT 0
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 0
62489: PUSH
62490: LD_INT 1
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 1
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: LD_INT 1
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 1
62541: NEG
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62560: LD_ADDR_VAR 0 62
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: LD_INT 1
62580: NEG
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 0
62608: PUSH
62609: LD_INT 1
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 1
62618: NEG
62619: PUSH
62620: LD_INT 0
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62648: LD_ADDR_VAR 0 63
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 0
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 1
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: NEG
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 1
62717: NEG
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62736: LD_ADDR_VAR 0 64
62740: PUSH
62741: LD_INT 0
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 0
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 1
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 1
62774: PUSH
62775: LD_INT 1
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: LD_INT 1
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 1
62794: NEG
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 1
62805: NEG
62806: PUSH
62807: LD_INT 1
62809: NEG
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: ST_TO_ADDR
// end ; 1 :
62824: GO 68721
62826: LD_INT 1
62828: DOUBLE
62829: EQUAL
62830: IFTRUE 62834
62832: GO 65457
62834: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62835: LD_ADDR_VAR 0 11
62839: PUSH
62840: LD_INT 1
62842: NEG
62843: PUSH
62844: LD_INT 3
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: LD_INT 3
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: LD_INT 2
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: LIST
62878: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62879: LD_ADDR_VAR 0 12
62883: PUSH
62884: LD_INT 2
62886: PUSH
62887: LD_INT 1
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 3
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 3
62907: PUSH
62908: LD_INT 1
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: LIST
62919: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62920: LD_ADDR_VAR 0 13
62924: PUSH
62925: LD_INT 3
62927: PUSH
62928: LD_INT 2
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 3
62937: PUSH
62938: LD_INT 3
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 2
62947: PUSH
62948: LD_INT 3
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: LIST
62959: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62960: LD_ADDR_VAR 0 14
62964: PUSH
62965: LD_INT 1
62967: PUSH
62968: LD_INT 3
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: LD_INT 3
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 1
62987: NEG
62988: PUSH
62989: LD_INT 2
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: LIST
63000: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63001: LD_ADDR_VAR 0 15
63005: PUSH
63006: LD_INT 2
63008: NEG
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 3
63019: NEG
63020: PUSH
63021: LD_INT 0
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 3
63030: NEG
63031: PUSH
63032: LD_INT 1
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: LIST
63044: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63045: LD_ADDR_VAR 0 16
63049: PUSH
63050: LD_INT 2
63052: NEG
63053: PUSH
63054: LD_INT 3
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 3
63064: NEG
63065: PUSH
63066: LD_INT 2
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 3
63076: NEG
63077: PUSH
63078: LD_INT 3
63080: NEG
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: LIST
63090: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63091: LD_ADDR_VAR 0 17
63095: PUSH
63096: LD_INT 1
63098: NEG
63099: PUSH
63100: LD_INT 3
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: LD_INT 3
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: LD_INT 2
63124: NEG
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: LIST
63134: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63135: LD_ADDR_VAR 0 18
63139: PUSH
63140: LD_INT 2
63142: PUSH
63143: LD_INT 1
63145: NEG
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 3
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 3
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63176: LD_ADDR_VAR 0 19
63180: PUSH
63181: LD_INT 3
63183: PUSH
63184: LD_INT 2
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 3
63193: PUSH
63194: LD_INT 3
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 2
63203: PUSH
63204: LD_INT 3
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: LIST
63215: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63216: LD_ADDR_VAR 0 20
63220: PUSH
63221: LD_INT 1
63223: PUSH
63224: LD_INT 3
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: LD_INT 3
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: LD_INT 2
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: LIST
63256: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63257: LD_ADDR_VAR 0 21
63261: PUSH
63262: LD_INT 2
63264: NEG
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 3
63275: NEG
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 3
63286: NEG
63287: PUSH
63288: LD_INT 1
63290: NEG
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: LIST
63300: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63301: LD_ADDR_VAR 0 22
63305: PUSH
63306: LD_INT 2
63308: NEG
63309: PUSH
63310: LD_INT 3
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 3
63320: NEG
63321: PUSH
63322: LD_INT 2
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 3
63332: NEG
63333: PUSH
63334: LD_INT 3
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: LIST
63346: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63347: LD_ADDR_VAR 0 23
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: LD_INT 3
63357: NEG
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 1
63365: NEG
63366: PUSH
63367: LD_INT 4
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: LD_INT 3
63380: NEG
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: LIST
63390: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63391: LD_ADDR_VAR 0 24
63395: PUSH
63396: LD_INT 3
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 3
63408: PUSH
63409: LD_INT 1
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 4
63419: PUSH
63420: LD_INT 1
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: LIST
63431: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63432: LD_ADDR_VAR 0 25
63436: PUSH
63437: LD_INT 3
63439: PUSH
63440: LD_INT 3
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 4
63449: PUSH
63450: LD_INT 3
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 3
63459: PUSH
63460: LD_INT 4
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: LIST
63471: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63472: LD_ADDR_VAR 0 26
63476: PUSH
63477: LD_INT 0
63479: PUSH
63480: LD_INT 3
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 1
63489: PUSH
63490: LD_INT 4
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 1
63499: NEG
63500: PUSH
63501: LD_INT 3
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: LIST
63512: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63513: LD_ADDR_VAR 0 27
63517: PUSH
63518: LD_INT 3
63520: NEG
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 3
63531: NEG
63532: PUSH
63533: LD_INT 1
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 4
63542: NEG
63543: PUSH
63544: LD_INT 1
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: LIST
63556: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63557: LD_ADDR_VAR 0 28
63561: PUSH
63562: LD_INT 3
63564: NEG
63565: PUSH
63566: LD_INT 3
63568: NEG
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 3
63576: NEG
63577: PUSH
63578: LD_INT 4
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 4
63588: NEG
63589: PUSH
63590: LD_INT 3
63592: NEG
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: LIST
63602: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63603: LD_ADDR_VAR 0 29
63607: PUSH
63608: LD_INT 1
63610: NEG
63611: PUSH
63612: LD_INT 3
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: LD_INT 3
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 1
63633: PUSH
63634: LD_INT 2
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 1
63644: NEG
63645: PUSH
63646: LD_INT 4
63648: NEG
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: LD_INT 4
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 1
63667: PUSH
63668: LD_INT 3
63670: NEG
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: LD_INT 5
63682: NEG
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: LD_INT 5
63693: NEG
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: LD_INT 4
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: LD_INT 6
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: LD_INT 6
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 1
63735: PUSH
63736: LD_INT 5
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63758: LD_ADDR_VAR 0 30
63762: PUSH
63763: LD_INT 2
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 3
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 3
63786: PUSH
63787: LD_INT 1
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 3
63796: PUSH
63797: LD_INT 1
63799: NEG
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 4
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 4
63817: PUSH
63818: LD_INT 1
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 4
63827: PUSH
63828: LD_INT 1
63830: NEG
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 5
63838: PUSH
63839: LD_INT 0
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 5
63848: PUSH
63849: LD_INT 1
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 5
63858: PUSH
63859: LD_INT 1
63861: NEG
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 6
63869: PUSH
63870: LD_INT 0
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 6
63879: PUSH
63880: LD_INT 1
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63901: LD_ADDR_VAR 0 31
63905: PUSH
63906: LD_INT 3
63908: PUSH
63909: LD_INT 2
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 3
63918: PUSH
63919: LD_INT 3
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 2
63928: PUSH
63929: LD_INT 3
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 4
63938: PUSH
63939: LD_INT 3
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 4
63948: PUSH
63949: LD_INT 4
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 3
63958: PUSH
63959: LD_INT 4
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 5
63968: PUSH
63969: LD_INT 4
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 5
63978: PUSH
63979: LD_INT 5
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 4
63988: PUSH
63989: LD_INT 5
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 6
63998: PUSH
63999: LD_INT 5
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 6
64008: PUSH
64009: LD_INT 6
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 5
64018: PUSH
64019: LD_INT 6
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64040: LD_ADDR_VAR 0 32
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: LD_INT 3
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: LD_INT 3
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 1
64067: NEG
64068: PUSH
64069: LD_INT 2
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: LD_INT 4
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 0
64088: PUSH
64089: LD_INT 4
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: LD_INT 3
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 1
64109: PUSH
64110: LD_INT 5
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 0
64119: PUSH
64120: LD_INT 5
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 1
64129: NEG
64130: PUSH
64131: LD_INT 4
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 1
64140: PUSH
64141: LD_INT 6
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: LD_INT 6
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 1
64160: NEG
64161: PUSH
64162: LD_INT 5
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64183: LD_ADDR_VAR 0 33
64187: PUSH
64188: LD_INT 2
64190: NEG
64191: PUSH
64192: LD_INT 1
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 3
64201: NEG
64202: PUSH
64203: LD_INT 0
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 3
64212: NEG
64213: PUSH
64214: LD_INT 1
64216: NEG
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 3
64224: NEG
64225: PUSH
64226: LD_INT 1
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 4
64235: NEG
64236: PUSH
64237: LD_INT 0
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 4
64246: NEG
64247: PUSH
64248: LD_INT 1
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 4
64258: NEG
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 5
64269: NEG
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 5
64280: NEG
64281: PUSH
64282: LD_INT 1
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 5
64292: NEG
64293: PUSH
64294: LD_INT 1
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 6
64303: NEG
64304: PUSH
64305: LD_INT 0
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 6
64314: NEG
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64338: LD_ADDR_VAR 0 34
64342: PUSH
64343: LD_INT 2
64345: NEG
64346: PUSH
64347: LD_INT 3
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 3
64357: NEG
64358: PUSH
64359: LD_INT 2
64361: NEG
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 3
64369: NEG
64370: PUSH
64371: LD_INT 3
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 3
64381: NEG
64382: PUSH
64383: LD_INT 4
64385: NEG
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 4
64393: NEG
64394: PUSH
64395: LD_INT 3
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 4
64405: NEG
64406: PUSH
64407: LD_INT 4
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 4
64417: NEG
64418: PUSH
64419: LD_INT 5
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 5
64429: NEG
64430: PUSH
64431: LD_INT 4
64433: NEG
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 5
64441: NEG
64442: PUSH
64443: LD_INT 5
64445: NEG
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 5
64453: NEG
64454: PUSH
64455: LD_INT 6
64457: NEG
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 6
64465: NEG
64466: PUSH
64467: LD_INT 5
64469: NEG
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 6
64477: NEG
64478: PUSH
64479: LD_INT 6
64481: NEG
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64501: LD_ADDR_VAR 0 41
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: LD_INT 2
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: LD_INT 3
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 1
64531: PUSH
64532: LD_INT 2
64534: NEG
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: LIST
64544: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64545: LD_ADDR_VAR 0 42
64549: PUSH
64550: LD_INT 2
64552: PUSH
64553: LD_INT 0
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 2
64562: PUSH
64563: LD_INT 1
64565: NEG
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 3
64573: PUSH
64574: LD_INT 1
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: LIST
64585: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64586: LD_ADDR_VAR 0 43
64590: PUSH
64591: LD_INT 2
64593: PUSH
64594: LD_INT 2
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 3
64603: PUSH
64604: LD_INT 2
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 2
64613: PUSH
64614: LD_INT 3
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: LIST
64625: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64626: LD_ADDR_VAR 0 44
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: LD_INT 2
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 1
64643: PUSH
64644: LD_INT 3
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 1
64653: NEG
64654: PUSH
64655: LD_INT 2
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: LIST
64666: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64667: LD_ADDR_VAR 0 45
64671: PUSH
64672: LD_INT 2
64674: NEG
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 2
64685: NEG
64686: PUSH
64687: LD_INT 1
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 3
64696: NEG
64697: PUSH
64698: LD_INT 1
64700: NEG
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: LIST
64710: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64711: LD_ADDR_VAR 0 46
64715: PUSH
64716: LD_INT 2
64718: NEG
64719: PUSH
64720: LD_INT 2
64722: NEG
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 2
64730: NEG
64731: PUSH
64732: LD_INT 3
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 3
64742: NEG
64743: PUSH
64744: LD_INT 2
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: LIST
64756: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64757: LD_ADDR_VAR 0 47
64761: PUSH
64762: LD_INT 2
64764: NEG
64765: PUSH
64766: LD_INT 3
64768: NEG
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 1
64776: NEG
64777: PUSH
64778: LD_INT 3
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64790: LD_ADDR_VAR 0 48
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: LD_INT 2
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 2
64808: PUSH
64809: LD_INT 1
64811: NEG
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64821: LD_ADDR_VAR 0 49
64825: PUSH
64826: LD_INT 3
64828: PUSH
64829: LD_INT 1
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 3
64838: PUSH
64839: LD_INT 2
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64850: LD_ADDR_VAR 0 50
64854: PUSH
64855: LD_INT 2
64857: PUSH
64858: LD_INT 3
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 1
64867: PUSH
64868: LD_INT 3
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64879: LD_ADDR_VAR 0 51
64883: PUSH
64884: LD_INT 1
64886: NEG
64887: PUSH
64888: LD_INT 2
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 2
64897: NEG
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64910: LD_ADDR_VAR 0 52
64914: PUSH
64915: LD_INT 3
64917: NEG
64918: PUSH
64919: LD_INT 1
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 3
64929: NEG
64930: PUSH
64931: LD_INT 2
64933: NEG
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64943: LD_ADDR_VAR 0 53
64947: PUSH
64948: LD_INT 1
64950: NEG
64951: PUSH
64952: LD_INT 3
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 0
64962: PUSH
64963: LD_INT 3
64965: NEG
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 1
64973: PUSH
64974: LD_INT 2
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: LIST
64986: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64987: LD_ADDR_VAR 0 54
64991: PUSH
64992: LD_INT 2
64994: PUSH
64995: LD_INT 1
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 3
65005: PUSH
65006: LD_INT 0
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 3
65015: PUSH
65016: LD_INT 1
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: LIST
65027: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65028: LD_ADDR_VAR 0 55
65032: PUSH
65033: LD_INT 3
65035: PUSH
65036: LD_INT 2
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 3
65045: PUSH
65046: LD_INT 3
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 2
65055: PUSH
65056: LD_INT 3
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: LIST
65067: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65068: LD_ADDR_VAR 0 56
65072: PUSH
65073: LD_INT 1
65075: PUSH
65076: LD_INT 3
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: LD_INT 3
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 1
65095: NEG
65096: PUSH
65097: LD_INT 2
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: LIST
65108: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65109: LD_ADDR_VAR 0 57
65113: PUSH
65114: LD_INT 2
65116: NEG
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 3
65127: NEG
65128: PUSH
65129: LD_INT 0
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 3
65138: NEG
65139: PUSH
65140: LD_INT 1
65142: NEG
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: LIST
65152: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65153: LD_ADDR_VAR 0 58
65157: PUSH
65158: LD_INT 2
65160: NEG
65161: PUSH
65162: LD_INT 3
65164: NEG
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 3
65172: NEG
65173: PUSH
65174: LD_INT 2
65176: NEG
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 3
65184: NEG
65185: PUSH
65186: LD_INT 3
65188: NEG
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: LIST
65198: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65199: LD_ADDR_VAR 0 59
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: LD_INT 2
65210: NEG
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 0
65218: PUSH
65219: LD_INT 2
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 1
65229: PUSH
65230: LD_INT 1
65232: NEG
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: LIST
65242: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65243: LD_ADDR_VAR 0 60
65247: PUSH
65248: LD_INT 1
65250: PUSH
65251: LD_INT 1
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 2
65261: PUSH
65262: LD_INT 0
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 2
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: LIST
65283: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65284: LD_ADDR_VAR 0 61
65288: PUSH
65289: LD_INT 2
65291: PUSH
65292: LD_INT 1
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 2
65301: PUSH
65302: LD_INT 2
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 1
65311: PUSH
65312: LD_INT 2
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: LIST
65323: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65324: LD_ADDR_VAR 0 62
65328: PUSH
65329: LD_INT 1
65331: PUSH
65332: LD_INT 2
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: LD_INT 2
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 1
65351: NEG
65352: PUSH
65353: LD_INT 1
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: LIST
65364: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65365: LD_ADDR_VAR 0 63
65369: PUSH
65370: LD_INT 1
65372: NEG
65373: PUSH
65374: LD_INT 1
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 2
65383: NEG
65384: PUSH
65385: LD_INT 0
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 2
65394: NEG
65395: PUSH
65396: LD_INT 1
65398: NEG
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: LIST
65408: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65409: LD_ADDR_VAR 0 64
65413: PUSH
65414: LD_INT 1
65416: NEG
65417: PUSH
65418: LD_INT 2
65420: NEG
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 2
65428: NEG
65429: PUSH
65430: LD_INT 1
65432: NEG
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 2
65440: NEG
65441: PUSH
65442: LD_INT 2
65444: NEG
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: LIST
65454: ST_TO_ADDR
// end ; 2 :
65455: GO 68721
65457: LD_INT 2
65459: DOUBLE
65460: EQUAL
65461: IFTRUE 65465
65463: GO 68720
65465: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65466: LD_ADDR_VAR 0 29
65470: PUSH
65471: LD_INT 4
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 4
65483: PUSH
65484: LD_INT 1
65486: NEG
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 5
65494: PUSH
65495: LD_INT 0
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 5
65504: PUSH
65505: LD_INT 1
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 4
65514: PUSH
65515: LD_INT 1
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 3
65524: PUSH
65525: LD_INT 0
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 3
65534: PUSH
65535: LD_INT 1
65537: NEG
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 3
65545: PUSH
65546: LD_INT 2
65548: NEG
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 5
65556: PUSH
65557: LD_INT 2
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 3
65566: PUSH
65567: LD_INT 3
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 3
65576: PUSH
65577: LD_INT 2
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 4
65586: PUSH
65587: LD_INT 3
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 4
65596: PUSH
65597: LD_INT 4
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 3
65606: PUSH
65607: LD_INT 4
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 2
65616: PUSH
65617: LD_INT 3
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 2
65626: PUSH
65627: LD_INT 2
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 4
65636: PUSH
65637: LD_INT 2
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 2
65646: PUSH
65647: LD_INT 4
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 0
65656: PUSH
65657: LD_INT 4
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 0
65666: PUSH
65667: LD_INT 3
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 1
65676: PUSH
65677: LD_INT 4
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 1
65686: PUSH
65687: LD_INT 5
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 0
65696: PUSH
65697: LD_INT 5
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 1
65706: NEG
65707: PUSH
65708: LD_INT 4
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 1
65717: NEG
65718: PUSH
65719: LD_INT 3
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 2
65728: PUSH
65729: LD_INT 5
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 2
65738: NEG
65739: PUSH
65740: LD_INT 3
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 3
65749: NEG
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 3
65760: NEG
65761: PUSH
65762: LD_INT 1
65764: NEG
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 2
65772: NEG
65773: PUSH
65774: LD_INT 0
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 2
65783: NEG
65784: PUSH
65785: LD_INT 1
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 3
65794: NEG
65795: PUSH
65796: LD_INT 1
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 4
65805: NEG
65806: PUSH
65807: LD_INT 0
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 4
65816: NEG
65817: PUSH
65818: LD_INT 1
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 4
65828: NEG
65829: PUSH
65830: LD_INT 2
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 2
65840: NEG
65841: PUSH
65842: LD_INT 2
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 4
65851: NEG
65852: PUSH
65853: LD_INT 4
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 4
65863: NEG
65864: PUSH
65865: LD_INT 5
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 3
65875: NEG
65876: PUSH
65877: LD_INT 4
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 3
65887: NEG
65888: PUSH
65889: LD_INT 3
65891: NEG
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 4
65899: NEG
65900: PUSH
65901: LD_INT 3
65903: NEG
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 5
65911: NEG
65912: PUSH
65913: LD_INT 4
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 5
65923: NEG
65924: PUSH
65925: LD_INT 5
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 3
65935: NEG
65936: PUSH
65937: LD_INT 5
65939: NEG
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 5
65947: NEG
65948: PUSH
65949: LD_INT 3
65951: NEG
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66004: LD_ADDR_VAR 0 30
66008: PUSH
66009: LD_INT 4
66011: PUSH
66012: LD_INT 4
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 4
66021: PUSH
66022: LD_INT 3
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 5
66031: PUSH
66032: LD_INT 4
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 5
66041: PUSH
66042: LD_INT 5
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 4
66051: PUSH
66052: LD_INT 5
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 3
66061: PUSH
66062: LD_INT 4
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 3
66071: PUSH
66072: LD_INT 3
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 5
66081: PUSH
66082: LD_INT 3
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 3
66091: PUSH
66092: LD_INT 5
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 0
66101: PUSH
66102: LD_INT 3
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 0
66111: PUSH
66112: LD_INT 2
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 1
66121: PUSH
66122: LD_INT 3
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 1
66131: PUSH
66132: LD_INT 4
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 0
66141: PUSH
66142: LD_INT 4
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 1
66151: NEG
66152: PUSH
66153: LD_INT 3
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 1
66162: NEG
66163: PUSH
66164: LD_INT 2
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 2
66173: PUSH
66174: LD_INT 4
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 2
66183: NEG
66184: PUSH
66185: LD_INT 2
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 4
66194: NEG
66195: PUSH
66196: LD_INT 0
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 4
66205: NEG
66206: PUSH
66207: LD_INT 1
66209: NEG
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 3
66217: NEG
66218: PUSH
66219: LD_INT 0
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 3
66228: NEG
66229: PUSH
66230: LD_INT 1
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 4
66239: NEG
66240: PUSH
66241: LD_INT 1
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 5
66250: NEG
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 5
66261: NEG
66262: PUSH
66263: LD_INT 1
66265: NEG
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 5
66273: NEG
66274: PUSH
66275: LD_INT 2
66277: NEG
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 3
66285: NEG
66286: PUSH
66287: LD_INT 2
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 3
66296: NEG
66297: PUSH
66298: LD_INT 3
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 3
66308: NEG
66309: PUSH
66310: LD_INT 4
66312: NEG
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 2
66320: NEG
66321: PUSH
66322: LD_INT 3
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 2
66332: NEG
66333: PUSH
66334: LD_INT 2
66336: NEG
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 3
66344: NEG
66345: PUSH
66346: LD_INT 2
66348: NEG
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 4
66356: NEG
66357: PUSH
66358: LD_INT 3
66360: NEG
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 4
66368: NEG
66369: PUSH
66370: LD_INT 4
66372: NEG
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 2
66380: NEG
66381: PUSH
66382: LD_INT 4
66384: NEG
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 4
66392: NEG
66393: PUSH
66394: LD_INT 2
66396: NEG
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: LD_INT 4
66407: NEG
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 0
66415: PUSH
66416: LD_INT 5
66418: NEG
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 1
66426: PUSH
66427: LD_INT 4
66429: NEG
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 1
66437: PUSH
66438: LD_INT 3
66440: NEG
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 0
66448: PUSH
66449: LD_INT 3
66451: NEG
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 1
66459: NEG
66460: PUSH
66461: LD_INT 4
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 1
66471: NEG
66472: PUSH
66473: LD_INT 5
66475: NEG
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 2
66483: PUSH
66484: LD_INT 3
66486: NEG
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 2
66494: NEG
66495: PUSH
66496: LD_INT 5
66498: NEG
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66551: LD_ADDR_VAR 0 31
66555: PUSH
66556: LD_INT 0
66558: PUSH
66559: LD_INT 4
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 0
66568: PUSH
66569: LD_INT 3
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 1
66578: PUSH
66579: LD_INT 4
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 1
66588: PUSH
66589: LD_INT 5
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 0
66598: PUSH
66599: LD_INT 5
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 1
66608: NEG
66609: PUSH
66610: LD_INT 4
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 1
66619: NEG
66620: PUSH
66621: LD_INT 3
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 2
66630: PUSH
66631: LD_INT 5
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 2
66640: NEG
66641: PUSH
66642: LD_INT 3
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 3
66651: NEG
66652: PUSH
66653: LD_INT 0
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 3
66662: NEG
66663: PUSH
66664: LD_INT 1
66666: NEG
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 2
66674: NEG
66675: PUSH
66676: LD_INT 0
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 2
66685: NEG
66686: PUSH
66687: LD_INT 1
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 3
66696: NEG
66697: PUSH
66698: LD_INT 1
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 4
66707: NEG
66708: PUSH
66709: LD_INT 0
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 4
66718: NEG
66719: PUSH
66720: LD_INT 1
66722: NEG
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 4
66730: NEG
66731: PUSH
66732: LD_INT 2
66734: NEG
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 2
66742: NEG
66743: PUSH
66744: LD_INT 2
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 4
66753: NEG
66754: PUSH
66755: LD_INT 4
66757: NEG
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 4
66765: NEG
66766: PUSH
66767: LD_INT 5
66769: NEG
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 3
66777: NEG
66778: PUSH
66779: LD_INT 4
66781: NEG
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 3
66789: NEG
66790: PUSH
66791: LD_INT 3
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 4
66801: NEG
66802: PUSH
66803: LD_INT 3
66805: NEG
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 5
66813: NEG
66814: PUSH
66815: LD_INT 4
66817: NEG
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 5
66825: NEG
66826: PUSH
66827: LD_INT 5
66829: NEG
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 3
66837: NEG
66838: PUSH
66839: LD_INT 5
66841: NEG
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 5
66849: NEG
66850: PUSH
66851: LD_INT 3
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 0
66861: PUSH
66862: LD_INT 3
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 0
66872: PUSH
66873: LD_INT 4
66875: NEG
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 1
66883: PUSH
66884: LD_INT 3
66886: NEG
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 1
66894: PUSH
66895: LD_INT 2
66897: NEG
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: LD_INT 2
66908: NEG
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 1
66916: NEG
66917: PUSH
66918: LD_INT 3
66920: NEG
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 1
66928: NEG
66929: PUSH
66930: LD_INT 4
66932: NEG
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 2
66940: PUSH
66941: LD_INT 2
66943: NEG
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 2
66951: NEG
66952: PUSH
66953: LD_INT 4
66955: NEG
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 4
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 4
66973: PUSH
66974: LD_INT 1
66976: NEG
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 5
66984: PUSH
66985: LD_INT 0
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 5
66994: PUSH
66995: LD_INT 1
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 4
67004: PUSH
67005: LD_INT 1
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 3
67014: PUSH
67015: LD_INT 0
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 3
67024: PUSH
67025: LD_INT 1
67027: NEG
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 3
67035: PUSH
67036: LD_INT 2
67038: NEG
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 5
67046: PUSH
67047: LD_INT 2
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67101: LD_ADDR_VAR 0 32
67105: PUSH
67106: LD_INT 4
67108: NEG
67109: PUSH
67110: LD_INT 0
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 4
67119: NEG
67120: PUSH
67121: LD_INT 1
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 3
67131: NEG
67132: PUSH
67133: LD_INT 0
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 3
67142: NEG
67143: PUSH
67144: LD_INT 1
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 4
67153: NEG
67154: PUSH
67155: LD_INT 1
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 5
67164: NEG
67165: PUSH
67166: LD_INT 0
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 5
67175: NEG
67176: PUSH
67177: LD_INT 1
67179: NEG
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 5
67187: NEG
67188: PUSH
67189: LD_INT 2
67191: NEG
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 3
67199: NEG
67200: PUSH
67201: LD_INT 2
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 3
67210: NEG
67211: PUSH
67212: LD_INT 3
67214: NEG
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 3
67222: NEG
67223: PUSH
67224: LD_INT 4
67226: NEG
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 2
67234: NEG
67235: PUSH
67236: LD_INT 3
67238: NEG
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 2
67246: NEG
67247: PUSH
67248: LD_INT 2
67250: NEG
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 3
67258: NEG
67259: PUSH
67260: LD_INT 2
67262: NEG
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 4
67270: NEG
67271: PUSH
67272: LD_INT 3
67274: NEG
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 4
67282: NEG
67283: PUSH
67284: LD_INT 4
67286: NEG
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 2
67294: NEG
67295: PUSH
67296: LD_INT 4
67298: NEG
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 4
67306: NEG
67307: PUSH
67308: LD_INT 2
67310: NEG
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 0
67318: PUSH
67319: LD_INT 4
67321: NEG
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 0
67329: PUSH
67330: LD_INT 5
67332: NEG
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 1
67340: PUSH
67341: LD_INT 4
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 1
67351: PUSH
67352: LD_INT 3
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 0
67362: PUSH
67363: LD_INT 3
67365: NEG
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 1
67373: NEG
67374: PUSH
67375: LD_INT 4
67377: NEG
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 1
67385: NEG
67386: PUSH
67387: LD_INT 5
67389: NEG
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 2
67397: PUSH
67398: LD_INT 3
67400: NEG
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 2
67408: NEG
67409: PUSH
67410: LD_INT 5
67412: NEG
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 3
67420: PUSH
67421: LD_INT 0
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 3
67430: PUSH
67431: LD_INT 1
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 4
67441: PUSH
67442: LD_INT 0
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 4
67451: PUSH
67452: LD_INT 1
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 3
67461: PUSH
67462: LD_INT 1
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 2
67471: PUSH
67472: LD_INT 0
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 2
67481: PUSH
67482: LD_INT 1
67484: NEG
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 2
67492: PUSH
67493: LD_INT 2
67495: NEG
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 4
67503: PUSH
67504: LD_INT 2
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 4
67513: PUSH
67514: LD_INT 4
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 4
67523: PUSH
67524: LD_INT 3
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 5
67533: PUSH
67534: LD_INT 4
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 5
67543: PUSH
67544: LD_INT 5
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 4
67553: PUSH
67554: LD_INT 5
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 3
67563: PUSH
67564: LD_INT 4
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 3
67573: PUSH
67574: LD_INT 3
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 5
67583: PUSH
67584: LD_INT 3
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 3
67593: PUSH
67594: LD_INT 5
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67648: LD_ADDR_VAR 0 33
67652: PUSH
67653: LD_INT 4
67655: NEG
67656: PUSH
67657: LD_INT 4
67659: NEG
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 4
67667: NEG
67668: PUSH
67669: LD_INT 5
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 3
67679: NEG
67680: PUSH
67681: LD_INT 4
67683: NEG
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 3
67691: NEG
67692: PUSH
67693: LD_INT 3
67695: NEG
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 4
67703: NEG
67704: PUSH
67705: LD_INT 3
67707: NEG
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 5
67715: NEG
67716: PUSH
67717: LD_INT 4
67719: NEG
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 5
67727: NEG
67728: PUSH
67729: LD_INT 5
67731: NEG
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 3
67739: NEG
67740: PUSH
67741: LD_INT 5
67743: NEG
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 5
67751: NEG
67752: PUSH
67753: LD_INT 3
67755: NEG
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 0
67763: PUSH
67764: LD_INT 3
67766: NEG
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 0
67774: PUSH
67775: LD_INT 4
67777: NEG
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 1
67785: PUSH
67786: LD_INT 3
67788: NEG
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 1
67796: PUSH
67797: LD_INT 2
67799: NEG
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 0
67807: PUSH
67808: LD_INT 2
67810: NEG
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 1
67818: NEG
67819: PUSH
67820: LD_INT 3
67822: NEG
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 1
67830: NEG
67831: PUSH
67832: LD_INT 4
67834: NEG
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 2
67842: PUSH
67843: LD_INT 2
67845: NEG
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 2
67853: NEG
67854: PUSH
67855: LD_INT 4
67857: NEG
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 4
67865: PUSH
67866: LD_INT 0
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 4
67875: PUSH
67876: LD_INT 1
67878: NEG
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 5
67886: PUSH
67887: LD_INT 0
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 5
67896: PUSH
67897: LD_INT 1
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 4
67906: PUSH
67907: LD_INT 1
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 3
67916: PUSH
67917: LD_INT 0
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 3
67926: PUSH
67927: LD_INT 1
67929: NEG
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 3
67937: PUSH
67938: LD_INT 2
67940: NEG
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 5
67948: PUSH
67949: LD_INT 2
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 3
67958: PUSH
67959: LD_INT 3
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 3
67968: PUSH
67969: LD_INT 2
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 4
67978: PUSH
67979: LD_INT 3
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 4
67988: PUSH
67989: LD_INT 4
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 3
67998: PUSH
67999: LD_INT 4
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 2
68008: PUSH
68009: LD_INT 3
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 2
68018: PUSH
68019: LD_INT 2
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 4
68028: PUSH
68029: LD_INT 2
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 2
68038: PUSH
68039: LD_INT 4
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: LD_INT 4
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 0
68058: PUSH
68059: LD_INT 3
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 1
68068: PUSH
68069: LD_INT 4
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 1
68078: PUSH
68079: LD_INT 5
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 0
68088: PUSH
68089: LD_INT 5
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 1
68098: NEG
68099: PUSH
68100: LD_INT 4
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 1
68109: NEG
68110: PUSH
68111: LD_INT 3
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 2
68120: PUSH
68121: LD_INT 5
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 2
68130: NEG
68131: PUSH
68132: LD_INT 3
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68186: LD_ADDR_VAR 0 34
68190: PUSH
68191: LD_INT 0
68193: PUSH
68194: LD_INT 4
68196: NEG
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 0
68204: PUSH
68205: LD_INT 5
68207: NEG
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 1
68215: PUSH
68216: LD_INT 4
68218: NEG
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 1
68226: PUSH
68227: LD_INT 3
68229: NEG
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 0
68237: PUSH
68238: LD_INT 3
68240: NEG
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 1
68248: NEG
68249: PUSH
68250: LD_INT 4
68252: NEG
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 1
68260: NEG
68261: PUSH
68262: LD_INT 5
68264: NEG
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 2
68272: PUSH
68273: LD_INT 3
68275: NEG
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 2
68283: NEG
68284: PUSH
68285: LD_INT 5
68287: NEG
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 3
68295: PUSH
68296: LD_INT 0
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 3
68305: PUSH
68306: LD_INT 1
68308: NEG
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 4
68316: PUSH
68317: LD_INT 0
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 4
68326: PUSH
68327: LD_INT 1
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 3
68336: PUSH
68337: LD_INT 1
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 2
68346: PUSH
68347: LD_INT 0
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 2
68356: PUSH
68357: LD_INT 1
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 2
68367: PUSH
68368: LD_INT 2
68370: NEG
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 4
68378: PUSH
68379: LD_INT 2
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 4
68388: PUSH
68389: LD_INT 4
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 4
68398: PUSH
68399: LD_INT 3
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 5
68408: PUSH
68409: LD_INT 4
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 5
68418: PUSH
68419: LD_INT 5
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 4
68428: PUSH
68429: LD_INT 5
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 3
68438: PUSH
68439: LD_INT 4
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 3
68448: PUSH
68449: LD_INT 3
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 5
68458: PUSH
68459: LD_INT 3
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 3
68468: PUSH
68469: LD_INT 5
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 0
68478: PUSH
68479: LD_INT 3
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 0
68488: PUSH
68489: LD_INT 2
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 1
68498: PUSH
68499: LD_INT 3
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 1
68508: PUSH
68509: LD_INT 4
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 0
68518: PUSH
68519: LD_INT 4
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 1
68528: NEG
68529: PUSH
68530: LD_INT 3
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 1
68539: NEG
68540: PUSH
68541: LD_INT 2
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 2
68550: PUSH
68551: LD_INT 4
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 2
68560: NEG
68561: PUSH
68562: LD_INT 2
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 4
68571: NEG
68572: PUSH
68573: LD_INT 0
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 4
68582: NEG
68583: PUSH
68584: LD_INT 1
68586: NEG
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 3
68594: NEG
68595: PUSH
68596: LD_INT 0
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 3
68605: NEG
68606: PUSH
68607: LD_INT 1
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 4
68616: NEG
68617: PUSH
68618: LD_INT 1
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 5
68627: NEG
68628: PUSH
68629: LD_INT 0
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 5
68638: NEG
68639: PUSH
68640: LD_INT 1
68642: NEG
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 5
68650: NEG
68651: PUSH
68652: LD_INT 2
68654: NEG
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 3
68662: NEG
68663: PUSH
68664: LD_INT 2
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: ST_TO_ADDR
// end ; end ;
68718: GO 68721
68720: POP
// case btype of b_depot , b_warehouse :
68721: LD_VAR 0 1
68725: PUSH
68726: LD_INT 0
68728: DOUBLE
68729: EQUAL
68730: IFTRUE 68740
68732: LD_INT 1
68734: DOUBLE
68735: EQUAL
68736: IFTRUE 68740
68738: GO 68941
68740: POP
// case nation of nation_american :
68741: LD_VAR 0 5
68745: PUSH
68746: LD_INT 1
68748: DOUBLE
68749: EQUAL
68750: IFTRUE 68754
68752: GO 68810
68754: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68755: LD_ADDR_VAR 0 9
68759: PUSH
68760: LD_VAR 0 11
68764: PUSH
68765: LD_VAR 0 12
68769: PUSH
68770: LD_VAR 0 13
68774: PUSH
68775: LD_VAR 0 14
68779: PUSH
68780: LD_VAR 0 15
68784: PUSH
68785: LD_VAR 0 16
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: PUSH
68798: LD_VAR 0 4
68802: PUSH
68803: LD_INT 1
68805: PLUS
68806: ARRAY
68807: ST_TO_ADDR
68808: GO 68939
68810: LD_INT 2
68812: DOUBLE
68813: EQUAL
68814: IFTRUE 68818
68816: GO 68874
68818: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68819: LD_ADDR_VAR 0 9
68823: PUSH
68824: LD_VAR 0 17
68828: PUSH
68829: LD_VAR 0 18
68833: PUSH
68834: LD_VAR 0 19
68838: PUSH
68839: LD_VAR 0 20
68843: PUSH
68844: LD_VAR 0 21
68848: PUSH
68849: LD_VAR 0 22
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: PUSH
68862: LD_VAR 0 4
68866: PUSH
68867: LD_INT 1
68869: PLUS
68870: ARRAY
68871: ST_TO_ADDR
68872: GO 68939
68874: LD_INT 3
68876: DOUBLE
68877: EQUAL
68878: IFTRUE 68882
68880: GO 68938
68882: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68883: LD_ADDR_VAR 0 9
68887: PUSH
68888: LD_VAR 0 23
68892: PUSH
68893: LD_VAR 0 24
68897: PUSH
68898: LD_VAR 0 25
68902: PUSH
68903: LD_VAR 0 26
68907: PUSH
68908: LD_VAR 0 27
68912: PUSH
68913: LD_VAR 0 28
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: PUSH
68926: LD_VAR 0 4
68930: PUSH
68931: LD_INT 1
68933: PLUS
68934: ARRAY
68935: ST_TO_ADDR
68936: GO 68939
68938: POP
68939: GO 69494
68941: LD_INT 2
68943: DOUBLE
68944: EQUAL
68945: IFTRUE 68955
68947: LD_INT 3
68949: DOUBLE
68950: EQUAL
68951: IFTRUE 68955
68953: GO 69011
68955: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68956: LD_ADDR_VAR 0 9
68960: PUSH
68961: LD_VAR 0 29
68965: PUSH
68966: LD_VAR 0 30
68970: PUSH
68971: LD_VAR 0 31
68975: PUSH
68976: LD_VAR 0 32
68980: PUSH
68981: LD_VAR 0 33
68985: PUSH
68986: LD_VAR 0 34
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: PUSH
68999: LD_VAR 0 4
69003: PUSH
69004: LD_INT 1
69006: PLUS
69007: ARRAY
69008: ST_TO_ADDR
69009: GO 69494
69011: LD_INT 16
69013: DOUBLE
69014: EQUAL
69015: IFTRUE 69073
69017: LD_INT 17
69019: DOUBLE
69020: EQUAL
69021: IFTRUE 69073
69023: LD_INT 18
69025: DOUBLE
69026: EQUAL
69027: IFTRUE 69073
69029: LD_INT 19
69031: DOUBLE
69032: EQUAL
69033: IFTRUE 69073
69035: LD_INT 22
69037: DOUBLE
69038: EQUAL
69039: IFTRUE 69073
69041: LD_INT 20
69043: DOUBLE
69044: EQUAL
69045: IFTRUE 69073
69047: LD_INT 21
69049: DOUBLE
69050: EQUAL
69051: IFTRUE 69073
69053: LD_INT 23
69055: DOUBLE
69056: EQUAL
69057: IFTRUE 69073
69059: LD_INT 24
69061: DOUBLE
69062: EQUAL
69063: IFTRUE 69073
69065: LD_INT 25
69067: DOUBLE
69068: EQUAL
69069: IFTRUE 69073
69071: GO 69129
69073: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69074: LD_ADDR_VAR 0 9
69078: PUSH
69079: LD_VAR 0 35
69083: PUSH
69084: LD_VAR 0 36
69088: PUSH
69089: LD_VAR 0 37
69093: PUSH
69094: LD_VAR 0 38
69098: PUSH
69099: LD_VAR 0 39
69103: PUSH
69104: LD_VAR 0 40
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: PUSH
69117: LD_VAR 0 4
69121: PUSH
69122: LD_INT 1
69124: PLUS
69125: ARRAY
69126: ST_TO_ADDR
69127: GO 69494
69129: LD_INT 6
69131: DOUBLE
69132: EQUAL
69133: IFTRUE 69185
69135: LD_INT 7
69137: DOUBLE
69138: EQUAL
69139: IFTRUE 69185
69141: LD_INT 8
69143: DOUBLE
69144: EQUAL
69145: IFTRUE 69185
69147: LD_INT 13
69149: DOUBLE
69150: EQUAL
69151: IFTRUE 69185
69153: LD_INT 12
69155: DOUBLE
69156: EQUAL
69157: IFTRUE 69185
69159: LD_INT 15
69161: DOUBLE
69162: EQUAL
69163: IFTRUE 69185
69165: LD_INT 11
69167: DOUBLE
69168: EQUAL
69169: IFTRUE 69185
69171: LD_INT 14
69173: DOUBLE
69174: EQUAL
69175: IFTRUE 69185
69177: LD_INT 10
69179: DOUBLE
69180: EQUAL
69181: IFTRUE 69185
69183: GO 69241
69185: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69186: LD_ADDR_VAR 0 9
69190: PUSH
69191: LD_VAR 0 41
69195: PUSH
69196: LD_VAR 0 42
69200: PUSH
69201: LD_VAR 0 43
69205: PUSH
69206: LD_VAR 0 44
69210: PUSH
69211: LD_VAR 0 45
69215: PUSH
69216: LD_VAR 0 46
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: PUSH
69229: LD_VAR 0 4
69233: PUSH
69234: LD_INT 1
69236: PLUS
69237: ARRAY
69238: ST_TO_ADDR
69239: GO 69494
69241: LD_INT 36
69243: DOUBLE
69244: EQUAL
69245: IFTRUE 69249
69247: GO 69305
69249: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69250: LD_ADDR_VAR 0 9
69254: PUSH
69255: LD_VAR 0 47
69259: PUSH
69260: LD_VAR 0 48
69264: PUSH
69265: LD_VAR 0 49
69269: PUSH
69270: LD_VAR 0 50
69274: PUSH
69275: LD_VAR 0 51
69279: PUSH
69280: LD_VAR 0 52
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: PUSH
69293: LD_VAR 0 4
69297: PUSH
69298: LD_INT 1
69300: PLUS
69301: ARRAY
69302: ST_TO_ADDR
69303: GO 69494
69305: LD_INT 4
69307: DOUBLE
69308: EQUAL
69309: IFTRUE 69331
69311: LD_INT 5
69313: DOUBLE
69314: EQUAL
69315: IFTRUE 69331
69317: LD_INT 34
69319: DOUBLE
69320: EQUAL
69321: IFTRUE 69331
69323: LD_INT 37
69325: DOUBLE
69326: EQUAL
69327: IFTRUE 69331
69329: GO 69387
69331: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69332: LD_ADDR_VAR 0 9
69336: PUSH
69337: LD_VAR 0 53
69341: PUSH
69342: LD_VAR 0 54
69346: PUSH
69347: LD_VAR 0 55
69351: PUSH
69352: LD_VAR 0 56
69356: PUSH
69357: LD_VAR 0 57
69361: PUSH
69362: LD_VAR 0 58
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: PUSH
69375: LD_VAR 0 4
69379: PUSH
69380: LD_INT 1
69382: PLUS
69383: ARRAY
69384: ST_TO_ADDR
69385: GO 69494
69387: LD_INT 31
69389: DOUBLE
69390: EQUAL
69391: IFTRUE 69437
69393: LD_INT 32
69395: DOUBLE
69396: EQUAL
69397: IFTRUE 69437
69399: LD_INT 33
69401: DOUBLE
69402: EQUAL
69403: IFTRUE 69437
69405: LD_INT 27
69407: DOUBLE
69408: EQUAL
69409: IFTRUE 69437
69411: LD_INT 26
69413: DOUBLE
69414: EQUAL
69415: IFTRUE 69437
69417: LD_INT 28
69419: DOUBLE
69420: EQUAL
69421: IFTRUE 69437
69423: LD_INT 29
69425: DOUBLE
69426: EQUAL
69427: IFTRUE 69437
69429: LD_INT 30
69431: DOUBLE
69432: EQUAL
69433: IFTRUE 69437
69435: GO 69493
69437: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69438: LD_ADDR_VAR 0 9
69442: PUSH
69443: LD_VAR 0 59
69447: PUSH
69448: LD_VAR 0 60
69452: PUSH
69453: LD_VAR 0 61
69457: PUSH
69458: LD_VAR 0 62
69462: PUSH
69463: LD_VAR 0 63
69467: PUSH
69468: LD_VAR 0 64
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: PUSH
69481: LD_VAR 0 4
69485: PUSH
69486: LD_INT 1
69488: PLUS
69489: ARRAY
69490: ST_TO_ADDR
69491: GO 69494
69493: POP
// temp_list2 = [ ] ;
69494: LD_ADDR_VAR 0 10
69498: PUSH
69499: EMPTY
69500: ST_TO_ADDR
// for i in temp_list do
69501: LD_ADDR_VAR 0 8
69505: PUSH
69506: LD_VAR 0 9
69510: PUSH
69511: FOR_IN
69512: IFFALSE 69564
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69514: LD_ADDR_VAR 0 10
69518: PUSH
69519: LD_VAR 0 10
69523: PUSH
69524: LD_VAR 0 8
69528: PUSH
69529: LD_INT 1
69531: ARRAY
69532: PUSH
69533: LD_VAR 0 2
69537: PLUS
69538: PUSH
69539: LD_VAR 0 8
69543: PUSH
69544: LD_INT 2
69546: ARRAY
69547: PUSH
69548: LD_VAR 0 3
69552: PLUS
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: EMPTY
69559: LIST
69560: ADD
69561: ST_TO_ADDR
69562: GO 69511
69564: POP
69565: POP
// result = temp_list2 ;
69566: LD_ADDR_VAR 0 7
69570: PUSH
69571: LD_VAR 0 10
69575: ST_TO_ADDR
// end ;
69576: LD_VAR 0 7
69580: RET
// export function EnemyInRange ( unit , dist ) ; begin
69581: LD_INT 0
69583: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69584: LD_ADDR_VAR 0 3
69588: PUSH
69589: LD_VAR 0 1
69593: PPUSH
69594: CALL_OW 255
69598: PPUSH
69599: LD_VAR 0 1
69603: PPUSH
69604: CALL_OW 250
69608: PPUSH
69609: LD_VAR 0 1
69613: PPUSH
69614: CALL_OW 251
69618: PPUSH
69619: LD_VAR 0 2
69623: PPUSH
69624: CALL 42977 0 4
69628: PUSH
69629: LD_INT 4
69631: ARRAY
69632: ST_TO_ADDR
// end ;
69633: LD_VAR 0 3
69637: RET
// export function PlayerSeeMe ( unit ) ; begin
69638: LD_INT 0
69640: PPUSH
// result := See ( your_side , unit ) ;
69641: LD_ADDR_VAR 0 2
69645: PUSH
69646: LD_OWVAR 2
69650: PPUSH
69651: LD_VAR 0 1
69655: PPUSH
69656: CALL_OW 292
69660: ST_TO_ADDR
// end ;
69661: LD_VAR 0 2
69665: RET
// export function ReverseDir ( unit ) ; begin
69666: LD_INT 0
69668: PPUSH
// if not unit then
69669: LD_VAR 0 1
69673: NOT
69674: IFFALSE 69678
// exit ;
69676: GO 69701
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69678: LD_ADDR_VAR 0 2
69682: PUSH
69683: LD_VAR 0 1
69687: PPUSH
69688: CALL_OW 254
69692: PUSH
69693: LD_INT 3
69695: PLUS
69696: PUSH
69697: LD_INT 6
69699: MOD
69700: ST_TO_ADDR
// end ;
69701: LD_VAR 0 2
69705: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69706: LD_INT 0
69708: PPUSH
69709: PPUSH
69710: PPUSH
69711: PPUSH
69712: PPUSH
// if not hexes then
69713: LD_VAR 0 2
69717: NOT
69718: IFFALSE 69722
// exit ;
69720: GO 69870
// dist := 9999 ;
69722: LD_ADDR_VAR 0 5
69726: PUSH
69727: LD_INT 9999
69729: ST_TO_ADDR
// for i = 1 to hexes do
69730: LD_ADDR_VAR 0 4
69734: PUSH
69735: DOUBLE
69736: LD_INT 1
69738: DEC
69739: ST_TO_ADDR
69740: LD_VAR 0 2
69744: PUSH
69745: FOR_TO
69746: IFFALSE 69858
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69748: LD_VAR 0 1
69752: PPUSH
69753: LD_VAR 0 2
69757: PUSH
69758: LD_VAR 0 4
69762: ARRAY
69763: PUSH
69764: LD_INT 1
69766: ARRAY
69767: PPUSH
69768: LD_VAR 0 2
69772: PUSH
69773: LD_VAR 0 4
69777: ARRAY
69778: PUSH
69779: LD_INT 2
69781: ARRAY
69782: PPUSH
69783: CALL_OW 297
69787: PUSH
69788: LD_VAR 0 5
69792: LESS
69793: IFFALSE 69856
// begin hex := hexes [ i ] ;
69795: LD_ADDR_VAR 0 7
69799: PUSH
69800: LD_VAR 0 2
69804: PUSH
69805: LD_VAR 0 4
69809: ARRAY
69810: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69811: LD_ADDR_VAR 0 5
69815: PUSH
69816: LD_VAR 0 1
69820: PPUSH
69821: LD_VAR 0 2
69825: PUSH
69826: LD_VAR 0 4
69830: ARRAY
69831: PUSH
69832: LD_INT 1
69834: ARRAY
69835: PPUSH
69836: LD_VAR 0 2
69840: PUSH
69841: LD_VAR 0 4
69845: ARRAY
69846: PUSH
69847: LD_INT 2
69849: ARRAY
69850: PPUSH
69851: CALL_OW 297
69855: ST_TO_ADDR
// end ; end ;
69856: GO 69745
69858: POP
69859: POP
// result := hex ;
69860: LD_ADDR_VAR 0 3
69864: PUSH
69865: LD_VAR 0 7
69869: ST_TO_ADDR
// end ;
69870: LD_VAR 0 3
69874: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69875: LD_INT 0
69877: PPUSH
69878: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69879: LD_VAR 0 1
69883: NOT
69884: PUSH
69885: LD_VAR 0 1
69889: PUSH
69890: LD_INT 21
69892: PUSH
69893: LD_INT 2
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 23
69902: PUSH
69903: LD_INT 2
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PPUSH
69914: CALL_OW 69
69918: IN
69919: NOT
69920: OR
69921: IFFALSE 69925
// exit ;
69923: GO 69972
// for i = 1 to 3 do
69925: LD_ADDR_VAR 0 3
69929: PUSH
69930: DOUBLE
69931: LD_INT 1
69933: DEC
69934: ST_TO_ADDR
69935: LD_INT 3
69937: PUSH
69938: FOR_TO
69939: IFFALSE 69970
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69941: LD_VAR 0 1
69945: PPUSH
69946: CALL_OW 250
69950: PPUSH
69951: LD_VAR 0 1
69955: PPUSH
69956: CALL_OW 251
69960: PPUSH
69961: LD_INT 1
69963: PPUSH
69964: CALL_OW 453
69968: GO 69938
69970: POP
69971: POP
// end ;
69972: LD_VAR 0 2
69976: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69977: LD_INT 0
69979: PPUSH
69980: PPUSH
69981: PPUSH
69982: PPUSH
69983: PPUSH
69984: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69985: LD_VAR 0 1
69989: NOT
69990: PUSH
69991: LD_VAR 0 2
69995: NOT
69996: OR
69997: PUSH
69998: LD_VAR 0 1
70002: PPUSH
70003: CALL_OW 314
70007: OR
70008: IFFALSE 70012
// exit ;
70010: GO 70453
// x := GetX ( enemy_unit ) ;
70012: LD_ADDR_VAR 0 7
70016: PUSH
70017: LD_VAR 0 2
70021: PPUSH
70022: CALL_OW 250
70026: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70027: LD_ADDR_VAR 0 8
70031: PUSH
70032: LD_VAR 0 2
70036: PPUSH
70037: CALL_OW 251
70041: ST_TO_ADDR
// if not x or not y then
70042: LD_VAR 0 7
70046: NOT
70047: PUSH
70048: LD_VAR 0 8
70052: NOT
70053: OR
70054: IFFALSE 70058
// exit ;
70056: GO 70453
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70058: LD_ADDR_VAR 0 6
70062: PUSH
70063: LD_VAR 0 7
70067: PPUSH
70068: LD_INT 0
70070: PPUSH
70071: LD_INT 4
70073: PPUSH
70074: CALL_OW 272
70078: PUSH
70079: LD_VAR 0 8
70083: PPUSH
70084: LD_INT 0
70086: PPUSH
70087: LD_INT 4
70089: PPUSH
70090: CALL_OW 273
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_VAR 0 7
70103: PPUSH
70104: LD_INT 1
70106: PPUSH
70107: LD_INT 4
70109: PPUSH
70110: CALL_OW 272
70114: PUSH
70115: LD_VAR 0 8
70119: PPUSH
70120: LD_INT 1
70122: PPUSH
70123: LD_INT 4
70125: PPUSH
70126: CALL_OW 273
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_VAR 0 7
70139: PPUSH
70140: LD_INT 2
70142: PPUSH
70143: LD_INT 4
70145: PPUSH
70146: CALL_OW 272
70150: PUSH
70151: LD_VAR 0 8
70155: PPUSH
70156: LD_INT 2
70158: PPUSH
70159: LD_INT 4
70161: PPUSH
70162: CALL_OW 273
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_VAR 0 7
70175: PPUSH
70176: LD_INT 3
70178: PPUSH
70179: LD_INT 4
70181: PPUSH
70182: CALL_OW 272
70186: PUSH
70187: LD_VAR 0 8
70191: PPUSH
70192: LD_INT 3
70194: PPUSH
70195: LD_INT 4
70197: PPUSH
70198: CALL_OW 273
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_VAR 0 7
70211: PPUSH
70212: LD_INT 4
70214: PPUSH
70215: LD_INT 4
70217: PPUSH
70218: CALL_OW 272
70222: PUSH
70223: LD_VAR 0 8
70227: PPUSH
70228: LD_INT 4
70230: PPUSH
70231: LD_INT 4
70233: PPUSH
70234: CALL_OW 273
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_VAR 0 7
70247: PPUSH
70248: LD_INT 5
70250: PPUSH
70251: LD_INT 4
70253: PPUSH
70254: CALL_OW 272
70258: PUSH
70259: LD_VAR 0 8
70263: PPUSH
70264: LD_INT 5
70266: PPUSH
70267: LD_INT 4
70269: PPUSH
70270: CALL_OW 273
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: ST_TO_ADDR
// for i = tmp downto 1 do
70287: LD_ADDR_VAR 0 4
70291: PUSH
70292: DOUBLE
70293: LD_VAR 0 6
70297: INC
70298: ST_TO_ADDR
70299: LD_INT 1
70301: PUSH
70302: FOR_DOWNTO
70303: IFFALSE 70404
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70305: LD_VAR 0 6
70309: PUSH
70310: LD_VAR 0 4
70314: ARRAY
70315: PUSH
70316: LD_INT 1
70318: ARRAY
70319: PPUSH
70320: LD_VAR 0 6
70324: PUSH
70325: LD_VAR 0 4
70329: ARRAY
70330: PUSH
70331: LD_INT 2
70333: ARRAY
70334: PPUSH
70335: CALL_OW 488
70339: NOT
70340: PUSH
70341: LD_VAR 0 6
70345: PUSH
70346: LD_VAR 0 4
70350: ARRAY
70351: PUSH
70352: LD_INT 1
70354: ARRAY
70355: PPUSH
70356: LD_VAR 0 6
70360: PUSH
70361: LD_VAR 0 4
70365: ARRAY
70366: PUSH
70367: LD_INT 2
70369: ARRAY
70370: PPUSH
70371: CALL_OW 428
70375: PUSH
70376: LD_INT 0
70378: NONEQUAL
70379: OR
70380: IFFALSE 70402
// tmp := Delete ( tmp , i ) ;
70382: LD_ADDR_VAR 0 6
70386: PUSH
70387: LD_VAR 0 6
70391: PPUSH
70392: LD_VAR 0 4
70396: PPUSH
70397: CALL_OW 3
70401: ST_TO_ADDR
70402: GO 70302
70404: POP
70405: POP
// j := GetClosestHex ( unit , tmp ) ;
70406: LD_ADDR_VAR 0 5
70410: PUSH
70411: LD_VAR 0 1
70415: PPUSH
70416: LD_VAR 0 6
70420: PPUSH
70421: CALL 69706 0 2
70425: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70426: LD_VAR 0 1
70430: PPUSH
70431: LD_VAR 0 5
70435: PUSH
70436: LD_INT 1
70438: ARRAY
70439: PPUSH
70440: LD_VAR 0 5
70444: PUSH
70445: LD_INT 2
70447: ARRAY
70448: PPUSH
70449: CALL_OW 111
// end ;
70453: LD_VAR 0 3
70457: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70458: LD_INT 0
70460: PPUSH
70461: PPUSH
70462: PPUSH
// uc_side = 0 ;
70463: LD_ADDR_OWVAR 20
70467: PUSH
70468: LD_INT 0
70470: ST_TO_ADDR
// uc_nation = 0 ;
70471: LD_ADDR_OWVAR 21
70475: PUSH
70476: LD_INT 0
70478: ST_TO_ADDR
// InitHc_All ( ) ;
70479: CALL_OW 584
// InitVc ;
70483: CALL_OW 20
// if mastodonts then
70487: LD_VAR 0 6
70491: IFFALSE 70558
// for i = 1 to mastodonts do
70493: LD_ADDR_VAR 0 11
70497: PUSH
70498: DOUBLE
70499: LD_INT 1
70501: DEC
70502: ST_TO_ADDR
70503: LD_VAR 0 6
70507: PUSH
70508: FOR_TO
70509: IFFALSE 70556
// begin vc_chassis := 31 ;
70511: LD_ADDR_OWVAR 37
70515: PUSH
70516: LD_INT 31
70518: ST_TO_ADDR
// vc_control := control_rider ;
70519: LD_ADDR_OWVAR 38
70523: PUSH
70524: LD_INT 4
70526: ST_TO_ADDR
// animal := CreateVehicle ;
70527: LD_ADDR_VAR 0 12
70531: PUSH
70532: CALL_OW 45
70536: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70537: LD_VAR 0 12
70541: PPUSH
70542: LD_VAR 0 8
70546: PPUSH
70547: LD_INT 0
70549: PPUSH
70550: CALL 72746 0 3
// end ;
70554: GO 70508
70556: POP
70557: POP
// if horses then
70558: LD_VAR 0 5
70562: IFFALSE 70629
// for i = 1 to horses do
70564: LD_ADDR_VAR 0 11
70568: PUSH
70569: DOUBLE
70570: LD_INT 1
70572: DEC
70573: ST_TO_ADDR
70574: LD_VAR 0 5
70578: PUSH
70579: FOR_TO
70580: IFFALSE 70627
// begin hc_class := 21 ;
70582: LD_ADDR_OWVAR 28
70586: PUSH
70587: LD_INT 21
70589: ST_TO_ADDR
// hc_gallery :=  ;
70590: LD_ADDR_OWVAR 33
70594: PUSH
70595: LD_STRING 
70597: ST_TO_ADDR
// animal := CreateHuman ;
70598: LD_ADDR_VAR 0 12
70602: PUSH
70603: CALL_OW 44
70607: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70608: LD_VAR 0 12
70612: PPUSH
70613: LD_VAR 0 8
70617: PPUSH
70618: LD_INT 0
70620: PPUSH
70621: CALL 72746 0 3
// end ;
70625: GO 70579
70627: POP
70628: POP
// if birds then
70629: LD_VAR 0 1
70633: IFFALSE 70700
// for i = 1 to birds do
70635: LD_ADDR_VAR 0 11
70639: PUSH
70640: DOUBLE
70641: LD_INT 1
70643: DEC
70644: ST_TO_ADDR
70645: LD_VAR 0 1
70649: PUSH
70650: FOR_TO
70651: IFFALSE 70698
// begin hc_class = 18 ;
70653: LD_ADDR_OWVAR 28
70657: PUSH
70658: LD_INT 18
70660: ST_TO_ADDR
// hc_gallery =  ;
70661: LD_ADDR_OWVAR 33
70665: PUSH
70666: LD_STRING 
70668: ST_TO_ADDR
// animal := CreateHuman ;
70669: LD_ADDR_VAR 0 12
70673: PUSH
70674: CALL_OW 44
70678: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70679: LD_VAR 0 12
70683: PPUSH
70684: LD_VAR 0 8
70688: PPUSH
70689: LD_INT 0
70691: PPUSH
70692: CALL 72746 0 3
// end ;
70696: GO 70650
70698: POP
70699: POP
// if tigers then
70700: LD_VAR 0 2
70704: IFFALSE 70788
// for i = 1 to tigers do
70706: LD_ADDR_VAR 0 11
70710: PUSH
70711: DOUBLE
70712: LD_INT 1
70714: DEC
70715: ST_TO_ADDR
70716: LD_VAR 0 2
70720: PUSH
70721: FOR_TO
70722: IFFALSE 70786
// begin hc_class = class_tiger ;
70724: LD_ADDR_OWVAR 28
70728: PUSH
70729: LD_INT 14
70731: ST_TO_ADDR
// hc_gallery =  ;
70732: LD_ADDR_OWVAR 33
70736: PUSH
70737: LD_STRING 
70739: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70740: LD_ADDR_OWVAR 35
70744: PUSH
70745: LD_INT 7
70747: NEG
70748: PPUSH
70749: LD_INT 7
70751: PPUSH
70752: CALL_OW 12
70756: ST_TO_ADDR
// animal := CreateHuman ;
70757: LD_ADDR_VAR 0 12
70761: PUSH
70762: CALL_OW 44
70766: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70767: LD_VAR 0 12
70771: PPUSH
70772: LD_VAR 0 8
70776: PPUSH
70777: LD_INT 0
70779: PPUSH
70780: CALL 72746 0 3
// end ;
70784: GO 70721
70786: POP
70787: POP
// if apemans then
70788: LD_VAR 0 3
70792: IFFALSE 70915
// for i = 1 to apemans do
70794: LD_ADDR_VAR 0 11
70798: PUSH
70799: DOUBLE
70800: LD_INT 1
70802: DEC
70803: ST_TO_ADDR
70804: LD_VAR 0 3
70808: PUSH
70809: FOR_TO
70810: IFFALSE 70913
// begin hc_class = class_apeman ;
70812: LD_ADDR_OWVAR 28
70816: PUSH
70817: LD_INT 12
70819: ST_TO_ADDR
// hc_gallery =  ;
70820: LD_ADDR_OWVAR 33
70824: PUSH
70825: LD_STRING 
70827: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70828: LD_ADDR_OWVAR 35
70832: PUSH
70833: LD_INT 2
70835: NEG
70836: PPUSH
70837: LD_INT 2
70839: PPUSH
70840: CALL_OW 12
70844: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70845: LD_ADDR_OWVAR 31
70849: PUSH
70850: LD_INT 1
70852: PPUSH
70853: LD_INT 3
70855: PPUSH
70856: CALL_OW 12
70860: PUSH
70861: LD_INT 1
70863: PPUSH
70864: LD_INT 3
70866: PPUSH
70867: CALL_OW 12
70871: PUSH
70872: LD_INT 0
70874: PUSH
70875: LD_INT 0
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: ST_TO_ADDR
// animal := CreateHuman ;
70884: LD_ADDR_VAR 0 12
70888: PUSH
70889: CALL_OW 44
70893: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70894: LD_VAR 0 12
70898: PPUSH
70899: LD_VAR 0 8
70903: PPUSH
70904: LD_INT 0
70906: PPUSH
70907: CALL 72746 0 3
// end ;
70911: GO 70809
70913: POP
70914: POP
// if enchidnas then
70915: LD_VAR 0 4
70919: IFFALSE 70986
// for i = 1 to enchidnas do
70921: LD_ADDR_VAR 0 11
70925: PUSH
70926: DOUBLE
70927: LD_INT 1
70929: DEC
70930: ST_TO_ADDR
70931: LD_VAR 0 4
70935: PUSH
70936: FOR_TO
70937: IFFALSE 70984
// begin hc_class = 13 ;
70939: LD_ADDR_OWVAR 28
70943: PUSH
70944: LD_INT 13
70946: ST_TO_ADDR
// hc_gallery =  ;
70947: LD_ADDR_OWVAR 33
70951: PUSH
70952: LD_STRING 
70954: ST_TO_ADDR
// animal := CreateHuman ;
70955: LD_ADDR_VAR 0 12
70959: PUSH
70960: CALL_OW 44
70964: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70965: LD_VAR 0 12
70969: PPUSH
70970: LD_VAR 0 8
70974: PPUSH
70975: LD_INT 0
70977: PPUSH
70978: CALL 72746 0 3
// end ;
70982: GO 70936
70984: POP
70985: POP
// if fishes then
70986: LD_VAR 0 7
70990: IFFALSE 71057
// for i = 1 to fishes do
70992: LD_ADDR_VAR 0 11
70996: PUSH
70997: DOUBLE
70998: LD_INT 1
71000: DEC
71001: ST_TO_ADDR
71002: LD_VAR 0 7
71006: PUSH
71007: FOR_TO
71008: IFFALSE 71055
// begin hc_class = 20 ;
71010: LD_ADDR_OWVAR 28
71014: PUSH
71015: LD_INT 20
71017: ST_TO_ADDR
// hc_gallery =  ;
71018: LD_ADDR_OWVAR 33
71022: PUSH
71023: LD_STRING 
71025: ST_TO_ADDR
// animal := CreateHuman ;
71026: LD_ADDR_VAR 0 12
71030: PUSH
71031: CALL_OW 44
71035: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71036: LD_VAR 0 12
71040: PPUSH
71041: LD_VAR 0 9
71045: PPUSH
71046: LD_INT 0
71048: PPUSH
71049: CALL 72746 0 3
// end ;
71053: GO 71007
71055: POP
71056: POP
// end ;
71057: LD_VAR 0 10
71061: RET
// export function WantHeal ( sci , unit ) ; begin
71062: LD_INT 0
71064: PPUSH
// if GetTaskList ( sci ) > 0 then
71065: LD_VAR 0 1
71069: PPUSH
71070: CALL_OW 437
71074: PUSH
71075: LD_INT 0
71077: GREATER
71078: IFFALSE 71148
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71080: LD_VAR 0 1
71084: PPUSH
71085: CALL_OW 437
71089: PUSH
71090: LD_INT 1
71092: ARRAY
71093: PUSH
71094: LD_INT 1
71096: ARRAY
71097: PUSH
71098: LD_STRING l
71100: EQUAL
71101: PUSH
71102: LD_VAR 0 1
71106: PPUSH
71107: CALL_OW 437
71111: PUSH
71112: LD_INT 1
71114: ARRAY
71115: PUSH
71116: LD_INT 4
71118: ARRAY
71119: PUSH
71120: LD_VAR 0 2
71124: EQUAL
71125: AND
71126: IFFALSE 71138
// result := true else
71128: LD_ADDR_VAR 0 3
71132: PUSH
71133: LD_INT 1
71135: ST_TO_ADDR
71136: GO 71146
// result := false ;
71138: LD_ADDR_VAR 0 3
71142: PUSH
71143: LD_INT 0
71145: ST_TO_ADDR
// end else
71146: GO 71156
// result := false ;
71148: LD_ADDR_VAR 0 3
71152: PUSH
71153: LD_INT 0
71155: ST_TO_ADDR
// end ;
71156: LD_VAR 0 3
71160: RET
// export function HealTarget ( sci ) ; begin
71161: LD_INT 0
71163: PPUSH
// if not sci then
71164: LD_VAR 0 1
71168: NOT
71169: IFFALSE 71173
// exit ;
71171: GO 71238
// result := 0 ;
71173: LD_ADDR_VAR 0 2
71177: PUSH
71178: LD_INT 0
71180: ST_TO_ADDR
// if GetTaskList ( sci ) then
71181: LD_VAR 0 1
71185: PPUSH
71186: CALL_OW 437
71190: IFFALSE 71238
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71192: LD_VAR 0 1
71196: PPUSH
71197: CALL_OW 437
71201: PUSH
71202: LD_INT 1
71204: ARRAY
71205: PUSH
71206: LD_INT 1
71208: ARRAY
71209: PUSH
71210: LD_STRING l
71212: EQUAL
71213: IFFALSE 71238
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71215: LD_ADDR_VAR 0 2
71219: PUSH
71220: LD_VAR 0 1
71224: PPUSH
71225: CALL_OW 437
71229: PUSH
71230: LD_INT 1
71232: ARRAY
71233: PUSH
71234: LD_INT 4
71236: ARRAY
71237: ST_TO_ADDR
// end ;
71238: LD_VAR 0 2
71242: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71243: LD_INT 0
71245: PPUSH
71246: PPUSH
71247: PPUSH
71248: PPUSH
// if not base_units then
71249: LD_VAR 0 1
71253: NOT
71254: IFFALSE 71258
// exit ;
71256: GO 71345
// result := false ;
71258: LD_ADDR_VAR 0 2
71262: PUSH
71263: LD_INT 0
71265: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71266: LD_ADDR_VAR 0 5
71270: PUSH
71271: LD_VAR 0 1
71275: PPUSH
71276: LD_INT 21
71278: PUSH
71279: LD_INT 3
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PPUSH
71286: CALL_OW 72
71290: ST_TO_ADDR
// if not tmp then
71291: LD_VAR 0 5
71295: NOT
71296: IFFALSE 71300
// exit ;
71298: GO 71345
// for i in tmp do
71300: LD_ADDR_VAR 0 3
71304: PUSH
71305: LD_VAR 0 5
71309: PUSH
71310: FOR_IN
71311: IFFALSE 71343
// begin result := EnemyInRange ( i , 22 ) ;
71313: LD_ADDR_VAR 0 2
71317: PUSH
71318: LD_VAR 0 3
71322: PPUSH
71323: LD_INT 22
71325: PPUSH
71326: CALL 69581 0 2
71330: ST_TO_ADDR
// if result then
71331: LD_VAR 0 2
71335: IFFALSE 71341
// exit ;
71337: POP
71338: POP
71339: GO 71345
// end ;
71341: GO 71310
71343: POP
71344: POP
// end ;
71345: LD_VAR 0 2
71349: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71350: LD_INT 0
71352: PPUSH
71353: PPUSH
// if not units then
71354: LD_VAR 0 1
71358: NOT
71359: IFFALSE 71363
// exit ;
71361: GO 71433
// result := [ ] ;
71363: LD_ADDR_VAR 0 3
71367: PUSH
71368: EMPTY
71369: ST_TO_ADDR
// for i in units do
71370: LD_ADDR_VAR 0 4
71374: PUSH
71375: LD_VAR 0 1
71379: PUSH
71380: FOR_IN
71381: IFFALSE 71431
// if GetTag ( i ) = tag then
71383: LD_VAR 0 4
71387: PPUSH
71388: CALL_OW 110
71392: PUSH
71393: LD_VAR 0 2
71397: EQUAL
71398: IFFALSE 71429
// result := Insert ( result , result + 1 , i ) ;
71400: LD_ADDR_VAR 0 3
71404: PUSH
71405: LD_VAR 0 3
71409: PPUSH
71410: LD_VAR 0 3
71414: PUSH
71415: LD_INT 1
71417: PLUS
71418: PPUSH
71419: LD_VAR 0 4
71423: PPUSH
71424: CALL_OW 2
71428: ST_TO_ADDR
71429: GO 71380
71431: POP
71432: POP
// end ;
71433: LD_VAR 0 3
71437: RET
// export function IsDriver ( un ) ; begin
71438: LD_INT 0
71440: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71441: LD_ADDR_VAR 0 2
71445: PUSH
71446: LD_VAR 0 1
71450: PUSH
71451: LD_INT 55
71453: PUSH
71454: EMPTY
71455: LIST
71456: PPUSH
71457: CALL_OW 69
71461: IN
71462: ST_TO_ADDR
// end ;
71463: LD_VAR 0 2
71467: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71468: LD_INT 0
71470: PPUSH
71471: PPUSH
// list := [ ] ;
71472: LD_ADDR_VAR 0 5
71476: PUSH
71477: EMPTY
71478: ST_TO_ADDR
// case d of 0 :
71479: LD_VAR 0 3
71483: PUSH
71484: LD_INT 0
71486: DOUBLE
71487: EQUAL
71488: IFTRUE 71492
71490: GO 71625
71492: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71493: LD_ADDR_VAR 0 5
71497: PUSH
71498: LD_VAR 0 1
71502: PUSH
71503: LD_INT 4
71505: MINUS
71506: PUSH
71507: LD_VAR 0 2
71511: PUSH
71512: LD_INT 4
71514: MINUS
71515: PUSH
71516: LD_INT 2
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: LIST
71523: PUSH
71524: LD_VAR 0 1
71528: PUSH
71529: LD_INT 3
71531: MINUS
71532: PUSH
71533: LD_VAR 0 2
71537: PUSH
71538: LD_INT 1
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: LIST
71545: PUSH
71546: LD_VAR 0 1
71550: PUSH
71551: LD_INT 4
71553: PLUS
71554: PUSH
71555: LD_VAR 0 2
71559: PUSH
71560: LD_INT 4
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: LIST
71567: PUSH
71568: LD_VAR 0 1
71572: PUSH
71573: LD_INT 3
71575: PLUS
71576: PUSH
71577: LD_VAR 0 2
71581: PUSH
71582: LD_INT 3
71584: PLUS
71585: PUSH
71586: LD_INT 5
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: LIST
71593: PUSH
71594: LD_VAR 0 1
71598: PUSH
71599: LD_VAR 0 2
71603: PUSH
71604: LD_INT 4
71606: PLUS
71607: PUSH
71608: LD_INT 0
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: LIST
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: ST_TO_ADDR
// end ; 1 :
71623: GO 72323
71625: LD_INT 1
71627: DOUBLE
71628: EQUAL
71629: IFTRUE 71633
71631: GO 71766
71633: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71634: LD_ADDR_VAR 0 5
71638: PUSH
71639: LD_VAR 0 1
71643: PUSH
71644: LD_VAR 0 2
71648: PUSH
71649: LD_INT 4
71651: MINUS
71652: PUSH
71653: LD_INT 3
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: LIST
71660: PUSH
71661: LD_VAR 0 1
71665: PUSH
71666: LD_INT 3
71668: MINUS
71669: PUSH
71670: LD_VAR 0 2
71674: PUSH
71675: LD_INT 3
71677: MINUS
71678: PUSH
71679: LD_INT 2
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: LIST
71686: PUSH
71687: LD_VAR 0 1
71691: PUSH
71692: LD_INT 4
71694: MINUS
71695: PUSH
71696: LD_VAR 0 2
71700: PUSH
71701: LD_INT 1
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: LIST
71708: PUSH
71709: LD_VAR 0 1
71713: PUSH
71714: LD_VAR 0 2
71718: PUSH
71719: LD_INT 3
71721: PLUS
71722: PUSH
71723: LD_INT 0
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: LIST
71730: PUSH
71731: LD_VAR 0 1
71735: PUSH
71736: LD_INT 4
71738: PLUS
71739: PUSH
71740: LD_VAR 0 2
71744: PUSH
71745: LD_INT 4
71747: PLUS
71748: PUSH
71749: LD_INT 5
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: LIST
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: ST_TO_ADDR
// end ; 2 :
71764: GO 72323
71766: LD_INT 2
71768: DOUBLE
71769: EQUAL
71770: IFTRUE 71774
71772: GO 71903
71774: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71775: LD_ADDR_VAR 0 5
71779: PUSH
71780: LD_VAR 0 1
71784: PUSH
71785: LD_VAR 0 2
71789: PUSH
71790: LD_INT 3
71792: MINUS
71793: PUSH
71794: LD_INT 3
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: LIST
71801: PUSH
71802: LD_VAR 0 1
71806: PUSH
71807: LD_INT 4
71809: PLUS
71810: PUSH
71811: LD_VAR 0 2
71815: PUSH
71816: LD_INT 4
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: LIST
71823: PUSH
71824: LD_VAR 0 1
71828: PUSH
71829: LD_VAR 0 2
71833: PUSH
71834: LD_INT 4
71836: PLUS
71837: PUSH
71838: LD_INT 0
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: LIST
71845: PUSH
71846: LD_VAR 0 1
71850: PUSH
71851: LD_INT 3
71853: MINUS
71854: PUSH
71855: LD_VAR 0 2
71859: PUSH
71860: LD_INT 1
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: LIST
71867: PUSH
71868: LD_VAR 0 1
71872: PUSH
71873: LD_INT 4
71875: MINUS
71876: PUSH
71877: LD_VAR 0 2
71881: PUSH
71882: LD_INT 4
71884: MINUS
71885: PUSH
71886: LD_INT 2
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: LIST
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: ST_TO_ADDR
// end ; 3 :
71901: GO 72323
71903: LD_INT 3
71905: DOUBLE
71906: EQUAL
71907: IFTRUE 71911
71909: GO 72044
71911: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71912: LD_ADDR_VAR 0 5
71916: PUSH
71917: LD_VAR 0 1
71921: PUSH
71922: LD_INT 3
71924: PLUS
71925: PUSH
71926: LD_VAR 0 2
71930: PUSH
71931: LD_INT 4
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: LIST
71938: PUSH
71939: LD_VAR 0 1
71943: PUSH
71944: LD_INT 4
71946: PLUS
71947: PUSH
71948: LD_VAR 0 2
71952: PUSH
71953: LD_INT 4
71955: PLUS
71956: PUSH
71957: LD_INT 5
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: LIST
71964: PUSH
71965: LD_VAR 0 1
71969: PUSH
71970: LD_INT 4
71972: MINUS
71973: PUSH
71974: LD_VAR 0 2
71978: PUSH
71979: LD_INT 1
71981: PUSH
71982: EMPTY
71983: LIST
71984: LIST
71985: LIST
71986: PUSH
71987: LD_VAR 0 1
71991: PUSH
71992: LD_VAR 0 2
71996: PUSH
71997: LD_INT 4
71999: MINUS
72000: PUSH
72001: LD_INT 3
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: LIST
72008: PUSH
72009: LD_VAR 0 1
72013: PUSH
72014: LD_INT 3
72016: MINUS
72017: PUSH
72018: LD_VAR 0 2
72022: PUSH
72023: LD_INT 3
72025: MINUS
72026: PUSH
72027: LD_INT 2
72029: PUSH
72030: EMPTY
72031: LIST
72032: LIST
72033: LIST
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: LIST
72039: LIST
72040: LIST
72041: ST_TO_ADDR
// end ; 4 :
72042: GO 72323
72044: LD_INT 4
72046: DOUBLE
72047: EQUAL
72048: IFTRUE 72052
72050: GO 72185
72052: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72053: LD_ADDR_VAR 0 5
72057: PUSH
72058: LD_VAR 0 1
72062: PUSH
72063: LD_VAR 0 2
72067: PUSH
72068: LD_INT 4
72070: PLUS
72071: PUSH
72072: LD_INT 0
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: LIST
72079: PUSH
72080: LD_VAR 0 1
72084: PUSH
72085: LD_INT 3
72087: PLUS
72088: PUSH
72089: LD_VAR 0 2
72093: PUSH
72094: LD_INT 3
72096: PLUS
72097: PUSH
72098: LD_INT 5
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: LIST
72105: PUSH
72106: LD_VAR 0 1
72110: PUSH
72111: LD_INT 4
72113: PLUS
72114: PUSH
72115: LD_VAR 0 2
72119: PUSH
72120: LD_INT 4
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: LIST
72127: PUSH
72128: LD_VAR 0 1
72132: PUSH
72133: LD_VAR 0 2
72137: PUSH
72138: LD_INT 3
72140: MINUS
72141: PUSH
72142: LD_INT 3
72144: PUSH
72145: EMPTY
72146: LIST
72147: LIST
72148: LIST
72149: PUSH
72150: LD_VAR 0 1
72154: PUSH
72155: LD_INT 4
72157: MINUS
72158: PUSH
72159: LD_VAR 0 2
72163: PUSH
72164: LD_INT 4
72166: MINUS
72167: PUSH
72168: LD_INT 2
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: LIST
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: LIST
72182: ST_TO_ADDR
// end ; 5 :
72183: GO 72323
72185: LD_INT 5
72187: DOUBLE
72188: EQUAL
72189: IFTRUE 72193
72191: GO 72322
72193: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72194: LD_ADDR_VAR 0 5
72198: PUSH
72199: LD_VAR 0 1
72203: PUSH
72204: LD_INT 4
72206: MINUS
72207: PUSH
72208: LD_VAR 0 2
72212: PUSH
72213: LD_INT 1
72215: PUSH
72216: EMPTY
72217: LIST
72218: LIST
72219: LIST
72220: PUSH
72221: LD_VAR 0 1
72225: PUSH
72226: LD_VAR 0 2
72230: PUSH
72231: LD_INT 4
72233: MINUS
72234: PUSH
72235: LD_INT 3
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: LIST
72242: PUSH
72243: LD_VAR 0 1
72247: PUSH
72248: LD_INT 4
72250: PLUS
72251: PUSH
72252: LD_VAR 0 2
72256: PUSH
72257: LD_INT 4
72259: PLUS
72260: PUSH
72261: LD_INT 5
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: LIST
72268: PUSH
72269: LD_VAR 0 1
72273: PUSH
72274: LD_INT 3
72276: PLUS
72277: PUSH
72278: LD_VAR 0 2
72282: PUSH
72283: LD_INT 4
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: LIST
72290: PUSH
72291: LD_VAR 0 1
72295: PUSH
72296: LD_VAR 0 2
72300: PUSH
72301: LD_INT 3
72303: PLUS
72304: PUSH
72305: LD_INT 0
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: LIST
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: ST_TO_ADDR
// end ; end ;
72320: GO 72323
72322: POP
// result := list ;
72323: LD_ADDR_VAR 0 4
72327: PUSH
72328: LD_VAR 0 5
72332: ST_TO_ADDR
// end ;
72333: LD_VAR 0 4
72337: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72338: LD_INT 0
72340: PPUSH
72341: PPUSH
72342: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72343: LD_VAR 0 1
72347: NOT
72348: PUSH
72349: LD_VAR 0 2
72353: PUSH
72354: LD_INT 1
72356: PUSH
72357: LD_INT 2
72359: PUSH
72360: LD_INT 3
72362: PUSH
72363: LD_INT 4
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: LIST
72370: LIST
72371: IN
72372: NOT
72373: OR
72374: IFFALSE 72378
// exit ;
72376: GO 72470
// tmp := [ ] ;
72378: LD_ADDR_VAR 0 5
72382: PUSH
72383: EMPTY
72384: ST_TO_ADDR
// for i in units do
72385: LD_ADDR_VAR 0 4
72389: PUSH
72390: LD_VAR 0 1
72394: PUSH
72395: FOR_IN
72396: IFFALSE 72439
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72398: LD_ADDR_VAR 0 5
72402: PUSH
72403: LD_VAR 0 5
72407: PPUSH
72408: LD_VAR 0 5
72412: PUSH
72413: LD_INT 1
72415: PLUS
72416: PPUSH
72417: LD_VAR 0 4
72421: PPUSH
72422: LD_VAR 0 2
72426: PPUSH
72427: CALL_OW 259
72431: PPUSH
72432: CALL_OW 2
72436: ST_TO_ADDR
72437: GO 72395
72439: POP
72440: POP
// if not tmp then
72441: LD_VAR 0 5
72445: NOT
72446: IFFALSE 72450
// exit ;
72448: GO 72470
// result := SortListByListDesc ( units , tmp ) ;
72450: LD_ADDR_VAR 0 3
72454: PUSH
72455: LD_VAR 0 1
72459: PPUSH
72460: LD_VAR 0 5
72464: PPUSH
72465: CALL_OW 77
72469: ST_TO_ADDR
// end ;
72470: LD_VAR 0 3
72474: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72475: LD_INT 0
72477: PPUSH
72478: PPUSH
72479: PPUSH
// result := false ;
72480: LD_ADDR_VAR 0 3
72484: PUSH
72485: LD_INT 0
72487: ST_TO_ADDR
// x := GetX ( building ) ;
72488: LD_ADDR_VAR 0 4
72492: PUSH
72493: LD_VAR 0 2
72497: PPUSH
72498: CALL_OW 250
72502: ST_TO_ADDR
// y := GetY ( building ) ;
72503: LD_ADDR_VAR 0 5
72507: PUSH
72508: LD_VAR 0 2
72512: PPUSH
72513: CALL_OW 251
72517: ST_TO_ADDR
// if not building or not x or not y then
72518: LD_VAR 0 2
72522: NOT
72523: PUSH
72524: LD_VAR 0 4
72528: NOT
72529: OR
72530: PUSH
72531: LD_VAR 0 5
72535: NOT
72536: OR
72537: IFFALSE 72541
// exit ;
72539: GO 72633
// if GetTaskList ( unit ) then
72541: LD_VAR 0 1
72545: PPUSH
72546: CALL_OW 437
72550: IFFALSE 72633
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72552: LD_STRING e
72554: PUSH
72555: LD_VAR 0 1
72559: PPUSH
72560: CALL_OW 437
72564: PUSH
72565: LD_INT 1
72567: ARRAY
72568: PUSH
72569: LD_INT 1
72571: ARRAY
72572: EQUAL
72573: PUSH
72574: LD_VAR 0 4
72578: PUSH
72579: LD_VAR 0 1
72583: PPUSH
72584: CALL_OW 437
72588: PUSH
72589: LD_INT 1
72591: ARRAY
72592: PUSH
72593: LD_INT 2
72595: ARRAY
72596: EQUAL
72597: AND
72598: PUSH
72599: LD_VAR 0 5
72603: PUSH
72604: LD_VAR 0 1
72608: PPUSH
72609: CALL_OW 437
72613: PUSH
72614: LD_INT 1
72616: ARRAY
72617: PUSH
72618: LD_INT 3
72620: ARRAY
72621: EQUAL
72622: AND
72623: IFFALSE 72633
// result := true end ;
72625: LD_ADDR_VAR 0 3
72629: PUSH
72630: LD_INT 1
72632: ST_TO_ADDR
// end ;
72633: LD_VAR 0 3
72637: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72638: LD_INT 0
72640: PPUSH
// result := false ;
72641: LD_ADDR_VAR 0 4
72645: PUSH
72646: LD_INT 0
72648: ST_TO_ADDR
// if GetTaskList ( unit ) then
72649: LD_VAR 0 1
72653: PPUSH
72654: CALL_OW 437
72658: IFFALSE 72741
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72660: LD_STRING M
72662: PUSH
72663: LD_VAR 0 1
72667: PPUSH
72668: CALL_OW 437
72672: PUSH
72673: LD_INT 1
72675: ARRAY
72676: PUSH
72677: LD_INT 1
72679: ARRAY
72680: EQUAL
72681: PUSH
72682: LD_VAR 0 2
72686: PUSH
72687: LD_VAR 0 1
72691: PPUSH
72692: CALL_OW 437
72696: PUSH
72697: LD_INT 1
72699: ARRAY
72700: PUSH
72701: LD_INT 2
72703: ARRAY
72704: EQUAL
72705: AND
72706: PUSH
72707: LD_VAR 0 3
72711: PUSH
72712: LD_VAR 0 1
72716: PPUSH
72717: CALL_OW 437
72721: PUSH
72722: LD_INT 1
72724: ARRAY
72725: PUSH
72726: LD_INT 3
72728: ARRAY
72729: EQUAL
72730: AND
72731: IFFALSE 72741
// result := true ;
72733: LD_ADDR_VAR 0 4
72737: PUSH
72738: LD_INT 1
72740: ST_TO_ADDR
// end ; end ;
72741: LD_VAR 0 4
72745: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72746: LD_INT 0
72748: PPUSH
72749: PPUSH
72750: PPUSH
72751: PPUSH
// if not unit or not area then
72752: LD_VAR 0 1
72756: NOT
72757: PUSH
72758: LD_VAR 0 2
72762: NOT
72763: OR
72764: IFFALSE 72768
// exit ;
72766: GO 72932
// tmp := AreaToList ( area , i ) ;
72768: LD_ADDR_VAR 0 6
72772: PUSH
72773: LD_VAR 0 2
72777: PPUSH
72778: LD_VAR 0 5
72782: PPUSH
72783: CALL_OW 517
72787: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72788: LD_ADDR_VAR 0 5
72792: PUSH
72793: DOUBLE
72794: LD_INT 1
72796: DEC
72797: ST_TO_ADDR
72798: LD_VAR 0 6
72802: PUSH
72803: LD_INT 1
72805: ARRAY
72806: PUSH
72807: FOR_TO
72808: IFFALSE 72930
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72810: LD_ADDR_VAR 0 7
72814: PUSH
72815: LD_VAR 0 6
72819: PUSH
72820: LD_INT 1
72822: ARRAY
72823: PUSH
72824: LD_VAR 0 5
72828: ARRAY
72829: PUSH
72830: LD_VAR 0 6
72834: PUSH
72835: LD_INT 2
72837: ARRAY
72838: PUSH
72839: LD_VAR 0 5
72843: ARRAY
72844: PUSH
72845: EMPTY
72846: LIST
72847: LIST
72848: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72849: LD_VAR 0 7
72853: PUSH
72854: LD_INT 1
72856: ARRAY
72857: PPUSH
72858: LD_VAR 0 7
72862: PUSH
72863: LD_INT 2
72865: ARRAY
72866: PPUSH
72867: CALL_OW 428
72871: PUSH
72872: LD_INT 0
72874: EQUAL
72875: IFFALSE 72928
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72877: LD_VAR 0 1
72881: PPUSH
72882: LD_VAR 0 7
72886: PUSH
72887: LD_INT 1
72889: ARRAY
72890: PPUSH
72891: LD_VAR 0 7
72895: PUSH
72896: LD_INT 2
72898: ARRAY
72899: PPUSH
72900: LD_VAR 0 3
72904: PPUSH
72905: CALL_OW 48
// result := IsPlaced ( unit ) ;
72909: LD_ADDR_VAR 0 4
72913: PUSH
72914: LD_VAR 0 1
72918: PPUSH
72919: CALL_OW 305
72923: ST_TO_ADDR
// exit ;
72924: POP
72925: POP
72926: GO 72932
// end ; end ;
72928: GO 72807
72930: POP
72931: POP
// end ;
72932: LD_VAR 0 4
72936: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72937: LD_INT 0
72939: PPUSH
72940: PPUSH
72941: PPUSH
// if not side or side > 8 then
72942: LD_VAR 0 1
72946: NOT
72947: PUSH
72948: LD_VAR 0 1
72952: PUSH
72953: LD_INT 8
72955: GREATER
72956: OR
72957: IFFALSE 72961
// exit ;
72959: GO 73148
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72961: LD_ADDR_VAR 0 4
72965: PUSH
72966: LD_INT 22
72968: PUSH
72969: LD_VAR 0 1
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: LD_INT 21
72980: PUSH
72981: LD_INT 3
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: PPUSH
72992: CALL_OW 69
72996: ST_TO_ADDR
// if not tmp then
72997: LD_VAR 0 4
73001: NOT
73002: IFFALSE 73006
// exit ;
73004: GO 73148
// enable_addtolog := true ;
73006: LD_ADDR_OWVAR 81
73010: PUSH
73011: LD_INT 1
73013: ST_TO_ADDR
// AddToLog ( [ ) ;
73014: LD_STRING [
73016: PPUSH
73017: CALL_OW 561
// for i in tmp do
73021: LD_ADDR_VAR 0 3
73025: PUSH
73026: LD_VAR 0 4
73030: PUSH
73031: FOR_IN
73032: IFFALSE 73139
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73034: LD_STRING [
73036: PUSH
73037: LD_VAR 0 3
73041: PPUSH
73042: CALL_OW 266
73046: STR
73047: PUSH
73048: LD_STRING , 
73050: STR
73051: PUSH
73052: LD_VAR 0 3
73056: PPUSH
73057: CALL_OW 250
73061: STR
73062: PUSH
73063: LD_STRING , 
73065: STR
73066: PUSH
73067: LD_VAR 0 3
73071: PPUSH
73072: CALL_OW 251
73076: STR
73077: PUSH
73078: LD_STRING , 
73080: STR
73081: PUSH
73082: LD_VAR 0 3
73086: PPUSH
73087: CALL_OW 254
73091: STR
73092: PUSH
73093: LD_STRING , 
73095: STR
73096: PUSH
73097: LD_VAR 0 3
73101: PPUSH
73102: LD_INT 1
73104: PPUSH
73105: CALL_OW 268
73109: STR
73110: PUSH
73111: LD_STRING , 
73113: STR
73114: PUSH
73115: LD_VAR 0 3
73119: PPUSH
73120: LD_INT 2
73122: PPUSH
73123: CALL_OW 268
73127: STR
73128: PUSH
73129: LD_STRING ],
73131: STR
73132: PPUSH
73133: CALL_OW 561
// end ;
73137: GO 73031
73139: POP
73140: POP
// AddToLog ( ]; ) ;
73141: LD_STRING ];
73143: PPUSH
73144: CALL_OW 561
// end ;
73148: LD_VAR 0 2
73152: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73153: LD_INT 0
73155: PPUSH
73156: PPUSH
73157: PPUSH
73158: PPUSH
73159: PPUSH
// if not area or not rate or not max then
73160: LD_VAR 0 1
73164: NOT
73165: PUSH
73166: LD_VAR 0 2
73170: NOT
73171: OR
73172: PUSH
73173: LD_VAR 0 4
73177: NOT
73178: OR
73179: IFFALSE 73183
// exit ;
73181: GO 73375
// while 1 do
73183: LD_INT 1
73185: IFFALSE 73375
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73187: LD_ADDR_VAR 0 9
73191: PUSH
73192: LD_VAR 0 1
73196: PPUSH
73197: LD_INT 1
73199: PPUSH
73200: CALL_OW 287
73204: PUSH
73205: LD_INT 10
73207: MUL
73208: ST_TO_ADDR
// r := rate / 10 ;
73209: LD_ADDR_VAR 0 7
73213: PUSH
73214: LD_VAR 0 2
73218: PUSH
73219: LD_INT 10
73221: DIVREAL
73222: ST_TO_ADDR
// time := 1 1$00 ;
73223: LD_ADDR_VAR 0 8
73227: PUSH
73228: LD_INT 2100
73230: ST_TO_ADDR
// if amount < min then
73231: LD_VAR 0 9
73235: PUSH
73236: LD_VAR 0 3
73240: LESS
73241: IFFALSE 73259
// r := r * 2 else
73243: LD_ADDR_VAR 0 7
73247: PUSH
73248: LD_VAR 0 7
73252: PUSH
73253: LD_INT 2
73255: MUL
73256: ST_TO_ADDR
73257: GO 73285
// if amount > max then
73259: LD_VAR 0 9
73263: PUSH
73264: LD_VAR 0 4
73268: GREATER
73269: IFFALSE 73285
// r := r / 2 ;
73271: LD_ADDR_VAR 0 7
73275: PUSH
73276: LD_VAR 0 7
73280: PUSH
73281: LD_INT 2
73283: DIVREAL
73284: ST_TO_ADDR
// time := time / r ;
73285: LD_ADDR_VAR 0 8
73289: PUSH
73290: LD_VAR 0 8
73294: PUSH
73295: LD_VAR 0 7
73299: DIVREAL
73300: ST_TO_ADDR
// if time < 0 then
73301: LD_VAR 0 8
73305: PUSH
73306: LD_INT 0
73308: LESS
73309: IFFALSE 73326
// time := time * - 1 ;
73311: LD_ADDR_VAR 0 8
73315: PUSH
73316: LD_VAR 0 8
73320: PUSH
73321: LD_INT 1
73323: NEG
73324: MUL
73325: ST_TO_ADDR
// wait ( time ) ;
73326: LD_VAR 0 8
73330: PPUSH
73331: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73335: LD_INT 35
73337: PPUSH
73338: LD_INT 875
73340: PPUSH
73341: CALL_OW 12
73345: PPUSH
73346: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73350: LD_INT 1
73352: PPUSH
73353: LD_INT 5
73355: PPUSH
73356: CALL_OW 12
73360: PPUSH
73361: LD_VAR 0 1
73365: PPUSH
73366: LD_INT 1
73368: PPUSH
73369: CALL_OW 55
// end ;
73373: GO 73183
// end ;
73375: LD_VAR 0 5
73379: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73380: LD_INT 0
73382: PPUSH
73383: PPUSH
73384: PPUSH
73385: PPUSH
73386: PPUSH
73387: PPUSH
73388: PPUSH
73389: PPUSH
// if not turrets or not factories then
73390: LD_VAR 0 1
73394: NOT
73395: PUSH
73396: LD_VAR 0 2
73400: NOT
73401: OR
73402: IFFALSE 73406
// exit ;
73404: GO 73713
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73406: LD_ADDR_VAR 0 10
73410: PUSH
73411: LD_INT 5
73413: PUSH
73414: LD_INT 6
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: PUSH
73421: LD_INT 2
73423: PUSH
73424: LD_INT 4
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: LD_INT 3
73433: PUSH
73434: LD_INT 5
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: LIST
73445: PUSH
73446: LD_INT 24
73448: PUSH
73449: LD_INT 25
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: PUSH
73456: LD_INT 23
73458: PUSH
73459: LD_INT 27
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: PUSH
73466: EMPTY
73467: LIST
73468: LIST
73469: PUSH
73470: LD_INT 42
73472: PUSH
73473: LD_INT 43
73475: PUSH
73476: EMPTY
73477: LIST
73478: LIST
73479: PUSH
73480: LD_INT 44
73482: PUSH
73483: LD_INT 46
73485: PUSH
73486: EMPTY
73487: LIST
73488: LIST
73489: PUSH
73490: LD_INT 45
73492: PUSH
73493: LD_INT 47
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: LIST
73504: PUSH
73505: EMPTY
73506: LIST
73507: LIST
73508: LIST
73509: ST_TO_ADDR
// result := [ ] ;
73510: LD_ADDR_VAR 0 3
73514: PUSH
73515: EMPTY
73516: ST_TO_ADDR
// for i in turrets do
73517: LD_ADDR_VAR 0 4
73521: PUSH
73522: LD_VAR 0 1
73526: PUSH
73527: FOR_IN
73528: IFFALSE 73711
// begin nat := GetNation ( i ) ;
73530: LD_ADDR_VAR 0 7
73534: PUSH
73535: LD_VAR 0 4
73539: PPUSH
73540: CALL_OW 248
73544: ST_TO_ADDR
// weapon := 0 ;
73545: LD_ADDR_VAR 0 8
73549: PUSH
73550: LD_INT 0
73552: ST_TO_ADDR
// if not nat then
73553: LD_VAR 0 7
73557: NOT
73558: IFFALSE 73562
// continue ;
73560: GO 73527
// for j in list [ nat ] do
73562: LD_ADDR_VAR 0 5
73566: PUSH
73567: LD_VAR 0 10
73571: PUSH
73572: LD_VAR 0 7
73576: ARRAY
73577: PUSH
73578: FOR_IN
73579: IFFALSE 73620
// if GetBWeapon ( i ) = j [ 1 ] then
73581: LD_VAR 0 4
73585: PPUSH
73586: CALL_OW 269
73590: PUSH
73591: LD_VAR 0 5
73595: PUSH
73596: LD_INT 1
73598: ARRAY
73599: EQUAL
73600: IFFALSE 73618
// begin weapon := j [ 2 ] ;
73602: LD_ADDR_VAR 0 8
73606: PUSH
73607: LD_VAR 0 5
73611: PUSH
73612: LD_INT 2
73614: ARRAY
73615: ST_TO_ADDR
// break ;
73616: GO 73620
// end ;
73618: GO 73578
73620: POP
73621: POP
// if not weapon then
73622: LD_VAR 0 8
73626: NOT
73627: IFFALSE 73631
// continue ;
73629: GO 73527
// for k in factories do
73631: LD_ADDR_VAR 0 6
73635: PUSH
73636: LD_VAR 0 2
73640: PUSH
73641: FOR_IN
73642: IFFALSE 73707
// begin weapons := AvailableWeaponList ( k ) ;
73644: LD_ADDR_VAR 0 9
73648: PUSH
73649: LD_VAR 0 6
73653: PPUSH
73654: CALL_OW 478
73658: ST_TO_ADDR
// if not weapons then
73659: LD_VAR 0 9
73663: NOT
73664: IFFALSE 73668
// continue ;
73666: GO 73641
// if weapon in weapons then
73668: LD_VAR 0 8
73672: PUSH
73673: LD_VAR 0 9
73677: IN
73678: IFFALSE 73705
// begin result := [ i , weapon ] ;
73680: LD_ADDR_VAR 0 3
73684: PUSH
73685: LD_VAR 0 4
73689: PUSH
73690: LD_VAR 0 8
73694: PUSH
73695: EMPTY
73696: LIST
73697: LIST
73698: ST_TO_ADDR
// exit ;
73699: POP
73700: POP
73701: POP
73702: POP
73703: GO 73713
// end ; end ;
73705: GO 73641
73707: POP
73708: POP
// end ;
73709: GO 73527
73711: POP
73712: POP
// end ;
73713: LD_VAR 0 3
73717: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73718: LD_INT 0
73720: PPUSH
// if not side or side > 8 then
73721: LD_VAR 0 3
73725: NOT
73726: PUSH
73727: LD_VAR 0 3
73731: PUSH
73732: LD_INT 8
73734: GREATER
73735: OR
73736: IFFALSE 73740
// exit ;
73738: GO 73799
// if not range then
73740: LD_VAR 0 4
73744: NOT
73745: IFFALSE 73756
// range := - 12 ;
73747: LD_ADDR_VAR 0 4
73751: PUSH
73752: LD_INT 12
73754: NEG
73755: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73756: LD_VAR 0 1
73760: PPUSH
73761: LD_VAR 0 2
73765: PPUSH
73766: LD_VAR 0 3
73770: PPUSH
73771: LD_VAR 0 4
73775: PPUSH
73776: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73780: LD_VAR 0 1
73784: PPUSH
73785: LD_VAR 0 2
73789: PPUSH
73790: LD_VAR 0 3
73794: PPUSH
73795: CALL_OW 331
// end ;
73799: LD_VAR 0 5
73803: RET
// export function Video ( mode ) ; begin
73804: LD_INT 0
73806: PPUSH
// ingame_video = mode ;
73807: LD_ADDR_OWVAR 52
73811: PUSH
73812: LD_VAR 0 1
73816: ST_TO_ADDR
// interface_hidden = mode ;
73817: LD_ADDR_OWVAR 54
73821: PUSH
73822: LD_VAR 0 1
73826: ST_TO_ADDR
// end ;
73827: LD_VAR 0 2
73831: RET
// export function Join ( array , element ) ; begin
73832: LD_INT 0
73834: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73835: LD_ADDR_VAR 0 3
73839: PUSH
73840: LD_VAR 0 1
73844: PPUSH
73845: LD_VAR 0 1
73849: PUSH
73850: LD_INT 1
73852: PLUS
73853: PPUSH
73854: LD_VAR 0 2
73858: PPUSH
73859: CALL_OW 1
73863: ST_TO_ADDR
// end ;
73864: LD_VAR 0 3
73868: RET
// export function JoinUnion ( array , element ) ; begin
73869: LD_INT 0
73871: PPUSH
// result := array union element ;
73872: LD_ADDR_VAR 0 3
73876: PUSH
73877: LD_VAR 0 1
73881: PUSH
73882: LD_VAR 0 2
73886: UNION
73887: ST_TO_ADDR
// end ;
73888: LD_VAR 0 3
73892: RET
// export function GetBehemoths ( side ) ; begin
73893: LD_INT 0
73895: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73896: LD_ADDR_VAR 0 2
73900: PUSH
73901: LD_INT 22
73903: PUSH
73904: LD_VAR 0 1
73908: PUSH
73909: EMPTY
73910: LIST
73911: LIST
73912: PUSH
73913: LD_INT 31
73915: PUSH
73916: LD_INT 25
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: PUSH
73923: EMPTY
73924: LIST
73925: LIST
73926: PPUSH
73927: CALL_OW 69
73931: ST_TO_ADDR
// end ;
73932: LD_VAR 0 2
73936: RET
// export function Shuffle ( array ) ; var i , index ; begin
73937: LD_INT 0
73939: PPUSH
73940: PPUSH
73941: PPUSH
// result := [ ] ;
73942: LD_ADDR_VAR 0 2
73946: PUSH
73947: EMPTY
73948: ST_TO_ADDR
// if not array then
73949: LD_VAR 0 1
73953: NOT
73954: IFFALSE 73958
// exit ;
73956: GO 74057
// Randomize ;
73958: CALL_OW 10
// for i = array downto 1 do
73962: LD_ADDR_VAR 0 3
73966: PUSH
73967: DOUBLE
73968: LD_VAR 0 1
73972: INC
73973: ST_TO_ADDR
73974: LD_INT 1
73976: PUSH
73977: FOR_DOWNTO
73978: IFFALSE 74055
// begin index := rand ( 1 , array ) ;
73980: LD_ADDR_VAR 0 4
73984: PUSH
73985: LD_INT 1
73987: PPUSH
73988: LD_VAR 0 1
73992: PPUSH
73993: CALL_OW 12
73997: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73998: LD_ADDR_VAR 0 2
74002: PUSH
74003: LD_VAR 0 2
74007: PPUSH
74008: LD_VAR 0 2
74012: PUSH
74013: LD_INT 1
74015: PLUS
74016: PPUSH
74017: LD_VAR 0 1
74021: PUSH
74022: LD_VAR 0 4
74026: ARRAY
74027: PPUSH
74028: CALL_OW 2
74032: ST_TO_ADDR
// array := Delete ( array , index ) ;
74033: LD_ADDR_VAR 0 1
74037: PUSH
74038: LD_VAR 0 1
74042: PPUSH
74043: LD_VAR 0 4
74047: PPUSH
74048: CALL_OW 3
74052: ST_TO_ADDR
// end ;
74053: GO 73977
74055: POP
74056: POP
// end ;
74057: LD_VAR 0 2
74061: RET
// export function GetBaseMaterials ( base ) ; begin
74062: LD_INT 0
74064: PPUSH
// result := [ 0 , 0 , 0 ] ;
74065: LD_ADDR_VAR 0 2
74069: PUSH
74070: LD_INT 0
74072: PUSH
74073: LD_INT 0
74075: PUSH
74076: LD_INT 0
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: LIST
74083: ST_TO_ADDR
// if not base then
74084: LD_VAR 0 1
74088: NOT
74089: IFFALSE 74093
// exit ;
74091: GO 74142
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74093: LD_ADDR_VAR 0 2
74097: PUSH
74098: LD_VAR 0 1
74102: PPUSH
74103: LD_INT 1
74105: PPUSH
74106: CALL_OW 275
74110: PUSH
74111: LD_VAR 0 1
74115: PPUSH
74116: LD_INT 2
74118: PPUSH
74119: CALL_OW 275
74123: PUSH
74124: LD_VAR 0 1
74128: PPUSH
74129: LD_INT 3
74131: PPUSH
74132: CALL_OW 275
74136: PUSH
74137: EMPTY
74138: LIST
74139: LIST
74140: LIST
74141: ST_TO_ADDR
// end ;
74142: LD_VAR 0 2
74146: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74147: LD_INT 0
74149: PPUSH
74150: PPUSH
// result := array ;
74151: LD_ADDR_VAR 0 3
74155: PUSH
74156: LD_VAR 0 1
74160: ST_TO_ADDR
// if size > 0 then
74161: LD_VAR 0 2
74165: PUSH
74166: LD_INT 0
74168: GREATER
74169: IFFALSE 74215
// for i := array downto size do
74171: LD_ADDR_VAR 0 4
74175: PUSH
74176: DOUBLE
74177: LD_VAR 0 1
74181: INC
74182: ST_TO_ADDR
74183: LD_VAR 0 2
74187: PUSH
74188: FOR_DOWNTO
74189: IFFALSE 74213
// result := Delete ( result , result ) ;
74191: LD_ADDR_VAR 0 3
74195: PUSH
74196: LD_VAR 0 3
74200: PPUSH
74201: LD_VAR 0 3
74205: PPUSH
74206: CALL_OW 3
74210: ST_TO_ADDR
74211: GO 74188
74213: POP
74214: POP
// end ;
74215: LD_VAR 0 3
74219: RET
// export function ComExit ( unit ) ; var tmp ; begin
74220: LD_INT 0
74222: PPUSH
74223: PPUSH
// if not IsInUnit ( unit ) then
74224: LD_VAR 0 1
74228: PPUSH
74229: CALL_OW 310
74233: NOT
74234: IFFALSE 74238
// exit ;
74236: GO 74298
// tmp := IsInUnit ( unit ) ;
74238: LD_ADDR_VAR 0 3
74242: PUSH
74243: LD_VAR 0 1
74247: PPUSH
74248: CALL_OW 310
74252: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74253: LD_VAR 0 3
74257: PPUSH
74258: CALL_OW 247
74262: PUSH
74263: LD_INT 2
74265: EQUAL
74266: IFFALSE 74279
// ComExitVehicle ( unit ) else
74268: LD_VAR 0 1
74272: PPUSH
74273: CALL_OW 121
74277: GO 74288
// ComExitBuilding ( unit ) ;
74279: LD_VAR 0 1
74283: PPUSH
74284: CALL_OW 122
// result := tmp ;
74288: LD_ADDR_VAR 0 2
74292: PUSH
74293: LD_VAR 0 3
74297: ST_TO_ADDR
// end ;
74298: LD_VAR 0 2
74302: RET
// export function ComExitAll ( units ) ; var i ; begin
74303: LD_INT 0
74305: PPUSH
74306: PPUSH
// if not units then
74307: LD_VAR 0 1
74311: NOT
74312: IFFALSE 74316
// exit ;
74314: GO 74342
// for i in units do
74316: LD_ADDR_VAR 0 3
74320: PUSH
74321: LD_VAR 0 1
74325: PUSH
74326: FOR_IN
74327: IFFALSE 74340
// ComExit ( i ) ;
74329: LD_VAR 0 3
74333: PPUSH
74334: CALL 74220 0 1
74338: GO 74326
74340: POP
74341: POP
// end ;
74342: LD_VAR 0 2
74346: RET
// export function ResetHc ; begin
74347: LD_INT 0
74349: PPUSH
// InitHc ;
74350: CALL_OW 19
// hc_importance := 0 ;
74354: LD_ADDR_OWVAR 32
74358: PUSH
74359: LD_INT 0
74361: ST_TO_ADDR
// end ;
74362: LD_VAR 0 1
74366: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74367: LD_INT 0
74369: PPUSH
74370: PPUSH
74371: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74372: LD_ADDR_VAR 0 6
74376: PUSH
74377: LD_VAR 0 1
74381: PUSH
74382: LD_VAR 0 3
74386: PLUS
74387: PUSH
74388: LD_INT 2
74390: DIV
74391: ST_TO_ADDR
// if _x < 0 then
74392: LD_VAR 0 6
74396: PUSH
74397: LD_INT 0
74399: LESS
74400: IFFALSE 74417
// _x := _x * - 1 ;
74402: LD_ADDR_VAR 0 6
74406: PUSH
74407: LD_VAR 0 6
74411: PUSH
74412: LD_INT 1
74414: NEG
74415: MUL
74416: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74417: LD_ADDR_VAR 0 7
74421: PUSH
74422: LD_VAR 0 2
74426: PUSH
74427: LD_VAR 0 4
74431: PLUS
74432: PUSH
74433: LD_INT 2
74435: DIV
74436: ST_TO_ADDR
// if _y < 0 then
74437: LD_VAR 0 7
74441: PUSH
74442: LD_INT 0
74444: LESS
74445: IFFALSE 74462
// _y := _y * - 1 ;
74447: LD_ADDR_VAR 0 7
74451: PUSH
74452: LD_VAR 0 7
74456: PUSH
74457: LD_INT 1
74459: NEG
74460: MUL
74461: ST_TO_ADDR
// result := [ _x , _y ] ;
74462: LD_ADDR_VAR 0 5
74466: PUSH
74467: LD_VAR 0 6
74471: PUSH
74472: LD_VAR 0 7
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: ST_TO_ADDR
// end ;
74481: LD_VAR 0 5
74485: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74486: LD_INT 0
74488: PPUSH
74489: PPUSH
74490: PPUSH
74491: PPUSH
// task := GetTaskList ( unit ) ;
74492: LD_ADDR_VAR 0 7
74496: PUSH
74497: LD_VAR 0 1
74501: PPUSH
74502: CALL_OW 437
74506: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74507: LD_VAR 0 7
74511: NOT
74512: PUSH
74513: LD_VAR 0 1
74517: PPUSH
74518: LD_VAR 0 2
74522: PPUSH
74523: CALL_OW 308
74527: NOT
74528: AND
74529: IFFALSE 74533
// exit ;
74531: GO 74651
// if IsInArea ( unit , area ) then
74533: LD_VAR 0 1
74537: PPUSH
74538: LD_VAR 0 2
74542: PPUSH
74543: CALL_OW 308
74547: IFFALSE 74565
// begin ComMoveToArea ( unit , goAway ) ;
74549: LD_VAR 0 1
74553: PPUSH
74554: LD_VAR 0 3
74558: PPUSH
74559: CALL_OW 113
// exit ;
74563: GO 74651
// end ; if task [ 1 ] [ 1 ] <> M then
74565: LD_VAR 0 7
74569: PUSH
74570: LD_INT 1
74572: ARRAY
74573: PUSH
74574: LD_INT 1
74576: ARRAY
74577: PUSH
74578: LD_STRING M
74580: NONEQUAL
74581: IFFALSE 74585
// exit ;
74583: GO 74651
// x := task [ 1 ] [ 2 ] ;
74585: LD_ADDR_VAR 0 5
74589: PUSH
74590: LD_VAR 0 7
74594: PUSH
74595: LD_INT 1
74597: ARRAY
74598: PUSH
74599: LD_INT 2
74601: ARRAY
74602: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74603: LD_ADDR_VAR 0 6
74607: PUSH
74608: LD_VAR 0 7
74612: PUSH
74613: LD_INT 1
74615: ARRAY
74616: PUSH
74617: LD_INT 3
74619: ARRAY
74620: ST_TO_ADDR
// if InArea ( x , y , area ) then
74621: LD_VAR 0 5
74625: PPUSH
74626: LD_VAR 0 6
74630: PPUSH
74631: LD_VAR 0 2
74635: PPUSH
74636: CALL_OW 309
74640: IFFALSE 74651
// ComStop ( unit ) ;
74642: LD_VAR 0 1
74646: PPUSH
74647: CALL_OW 141
// end ;
74651: LD_VAR 0 4
74655: RET
// export function Abs ( value ) ; begin
74656: LD_INT 0
74658: PPUSH
// result := value ;
74659: LD_ADDR_VAR 0 2
74663: PUSH
74664: LD_VAR 0 1
74668: ST_TO_ADDR
// if value < 0 then
74669: LD_VAR 0 1
74673: PUSH
74674: LD_INT 0
74676: LESS
74677: IFFALSE 74694
// result := value * - 1 ;
74679: LD_ADDR_VAR 0 2
74683: PUSH
74684: LD_VAR 0 1
74688: PUSH
74689: LD_INT 1
74691: NEG
74692: MUL
74693: ST_TO_ADDR
// end ;
74694: LD_VAR 0 2
74698: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74699: LD_INT 0
74701: PPUSH
74702: PPUSH
74703: PPUSH
74704: PPUSH
74705: PPUSH
74706: PPUSH
74707: PPUSH
74708: PPUSH
// if not unit or not building then
74709: LD_VAR 0 1
74713: NOT
74714: PUSH
74715: LD_VAR 0 2
74719: NOT
74720: OR
74721: IFFALSE 74725
// exit ;
74723: GO 74951
// x := GetX ( building ) ;
74725: LD_ADDR_VAR 0 4
74729: PUSH
74730: LD_VAR 0 2
74734: PPUSH
74735: CALL_OW 250
74739: ST_TO_ADDR
// y := GetY ( building ) ;
74740: LD_ADDR_VAR 0 6
74744: PUSH
74745: LD_VAR 0 2
74749: PPUSH
74750: CALL_OW 251
74754: ST_TO_ADDR
// d := GetDir ( building ) ;
74755: LD_ADDR_VAR 0 8
74759: PUSH
74760: LD_VAR 0 2
74764: PPUSH
74765: CALL_OW 254
74769: ST_TO_ADDR
// r := 4 ;
74770: LD_ADDR_VAR 0 9
74774: PUSH
74775: LD_INT 4
74777: ST_TO_ADDR
// for i := 1 to 5 do
74778: LD_ADDR_VAR 0 10
74782: PUSH
74783: DOUBLE
74784: LD_INT 1
74786: DEC
74787: ST_TO_ADDR
74788: LD_INT 5
74790: PUSH
74791: FOR_TO
74792: IFFALSE 74949
// begin _x := ShiftX ( x , d , r + i ) ;
74794: LD_ADDR_VAR 0 5
74798: PUSH
74799: LD_VAR 0 4
74803: PPUSH
74804: LD_VAR 0 8
74808: PPUSH
74809: LD_VAR 0 9
74813: PUSH
74814: LD_VAR 0 10
74818: PLUS
74819: PPUSH
74820: CALL_OW 272
74824: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74825: LD_ADDR_VAR 0 7
74829: PUSH
74830: LD_VAR 0 6
74834: PPUSH
74835: LD_VAR 0 8
74839: PPUSH
74840: LD_VAR 0 9
74844: PUSH
74845: LD_VAR 0 10
74849: PLUS
74850: PPUSH
74851: CALL_OW 273
74855: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74856: LD_VAR 0 5
74860: PPUSH
74861: LD_VAR 0 7
74865: PPUSH
74866: CALL_OW 488
74870: PUSH
74871: LD_VAR 0 5
74875: PPUSH
74876: LD_VAR 0 7
74880: PPUSH
74881: CALL_OW 428
74885: PPUSH
74886: CALL_OW 247
74890: PUSH
74891: LD_INT 3
74893: PUSH
74894: LD_INT 2
74896: PUSH
74897: EMPTY
74898: LIST
74899: LIST
74900: IN
74901: NOT
74902: AND
74903: IFFALSE 74947
// begin ComMoveXY ( unit , _x , _y ) ;
74905: LD_VAR 0 1
74909: PPUSH
74910: LD_VAR 0 5
74914: PPUSH
74915: LD_VAR 0 7
74919: PPUSH
74920: CALL_OW 111
// result := [ _x , _y ] ;
74924: LD_ADDR_VAR 0 3
74928: PUSH
74929: LD_VAR 0 5
74933: PUSH
74934: LD_VAR 0 7
74938: PUSH
74939: EMPTY
74940: LIST
74941: LIST
74942: ST_TO_ADDR
// exit ;
74943: POP
74944: POP
74945: GO 74951
// end ; end ;
74947: GO 74791
74949: POP
74950: POP
// end ;
74951: LD_VAR 0 3
74955: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74956: LD_INT 0
74958: PPUSH
74959: PPUSH
74960: PPUSH
// result := 0 ;
74961: LD_ADDR_VAR 0 3
74965: PUSH
74966: LD_INT 0
74968: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74969: LD_VAR 0 1
74973: PUSH
74974: LD_INT 0
74976: LESS
74977: PUSH
74978: LD_VAR 0 1
74982: PUSH
74983: LD_INT 8
74985: GREATER
74986: OR
74987: PUSH
74988: LD_VAR 0 2
74992: PUSH
74993: LD_INT 0
74995: LESS
74996: OR
74997: PUSH
74998: LD_VAR 0 2
75002: PUSH
75003: LD_INT 8
75005: GREATER
75006: OR
75007: IFFALSE 75011
// exit ;
75009: GO 75086
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75011: LD_ADDR_VAR 0 4
75015: PUSH
75016: LD_INT 22
75018: PUSH
75019: LD_VAR 0 2
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PPUSH
75028: CALL_OW 69
75032: PUSH
75033: FOR_IN
75034: IFFALSE 75084
// begin un := UnitShoot ( i ) ;
75036: LD_ADDR_VAR 0 5
75040: PUSH
75041: LD_VAR 0 4
75045: PPUSH
75046: CALL_OW 504
75050: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75051: LD_VAR 0 5
75055: PPUSH
75056: CALL_OW 255
75060: PUSH
75061: LD_VAR 0 1
75065: EQUAL
75066: IFFALSE 75082
// begin result := un ;
75068: LD_ADDR_VAR 0 3
75072: PUSH
75073: LD_VAR 0 5
75077: ST_TO_ADDR
// exit ;
75078: POP
75079: POP
75080: GO 75086
// end ; end ;
75082: GO 75033
75084: POP
75085: POP
// end ;
75086: LD_VAR 0 3
75090: RET
// export function GetCargoBay ( units ) ; begin
75091: LD_INT 0
75093: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75094: LD_ADDR_VAR 0 2
75098: PUSH
75099: LD_VAR 0 1
75103: PPUSH
75104: LD_INT 2
75106: PUSH
75107: LD_INT 34
75109: PUSH
75110: LD_INT 12
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: PUSH
75117: LD_INT 34
75119: PUSH
75120: LD_INT 51
75122: PUSH
75123: EMPTY
75124: LIST
75125: LIST
75126: PUSH
75127: LD_INT 34
75129: PUSH
75130: LD_INT 32
75132: PUSH
75133: EMPTY
75134: LIST
75135: LIST
75136: PUSH
75137: LD_INT 34
75139: PUSH
75140: LD_EXP 51
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: PUSH
75149: EMPTY
75150: LIST
75151: LIST
75152: LIST
75153: LIST
75154: LIST
75155: PPUSH
75156: CALL_OW 72
75160: ST_TO_ADDR
// end ;
75161: LD_VAR 0 2
75165: RET
// export function Negate ( value ) ; begin
75166: LD_INT 0
75168: PPUSH
// result := not value ;
75169: LD_ADDR_VAR 0 2
75173: PUSH
75174: LD_VAR 0 1
75178: NOT
75179: ST_TO_ADDR
// end ;
75180: LD_VAR 0 2
75184: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
75185: LD_INT 0
75187: PPUSH
// if x1 = x2 then
75188: LD_VAR 0 1
75192: PUSH
75193: LD_VAR 0 3
75197: EQUAL
75198: IFFALSE 75232
// begin if y1 > y2 then
75200: LD_VAR 0 2
75204: PUSH
75205: LD_VAR 0 4
75209: GREATER
75210: IFFALSE 75222
// result := 0 else
75212: LD_ADDR_VAR 0 5
75216: PUSH
75217: LD_INT 0
75219: ST_TO_ADDR
75220: GO 75230
// result := 3 ;
75222: LD_ADDR_VAR 0 5
75226: PUSH
75227: LD_INT 3
75229: ST_TO_ADDR
// exit ;
75230: GO 75318
// end ; if y1 = y2 then
75232: LD_VAR 0 2
75236: PUSH
75237: LD_VAR 0 4
75241: EQUAL
75242: IFFALSE 75276
// begin if x1 > x2 then
75244: LD_VAR 0 1
75248: PUSH
75249: LD_VAR 0 3
75253: GREATER
75254: IFFALSE 75266
// result := 1 else
75256: LD_ADDR_VAR 0 5
75260: PUSH
75261: LD_INT 1
75263: ST_TO_ADDR
75264: GO 75274
// result := 4 ;
75266: LD_ADDR_VAR 0 5
75270: PUSH
75271: LD_INT 4
75273: ST_TO_ADDR
// exit ;
75274: GO 75318
// end ; if x1 > x2 and y1 > y2 then
75276: LD_VAR 0 1
75280: PUSH
75281: LD_VAR 0 3
75285: GREATER
75286: PUSH
75287: LD_VAR 0 2
75291: PUSH
75292: LD_VAR 0 4
75296: GREATER
75297: AND
75298: IFFALSE 75310
// result := 2 else
75300: LD_ADDR_VAR 0 5
75304: PUSH
75305: LD_INT 2
75307: ST_TO_ADDR
75308: GO 75318
// result := 5 ;
75310: LD_ADDR_VAR 0 5
75314: PUSH
75315: LD_INT 5
75317: ST_TO_ADDR
// end ;
75318: LD_VAR 0 5
75322: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75323: LD_INT 0
75325: PPUSH
75326: PPUSH
// if not driver or not IsInUnit ( driver ) then
75327: LD_VAR 0 1
75331: NOT
75332: PUSH
75333: LD_VAR 0 1
75337: PPUSH
75338: CALL_OW 310
75342: NOT
75343: OR
75344: IFFALSE 75348
// exit ;
75346: GO 75438
// vehicle := IsInUnit ( driver ) ;
75348: LD_ADDR_VAR 0 3
75352: PUSH
75353: LD_VAR 0 1
75357: PPUSH
75358: CALL_OW 310
75362: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75363: LD_VAR 0 1
75367: PPUSH
75368: LD_STRING \
75370: PUSH
75371: LD_INT 0
75373: PUSH
75374: LD_INT 0
75376: PUSH
75377: LD_INT 0
75379: PUSH
75380: LD_INT 0
75382: PUSH
75383: LD_INT 0
75385: PUSH
75386: LD_INT 0
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: LIST
75393: LIST
75394: LIST
75395: LIST
75396: LIST
75397: PUSH
75398: LD_STRING E
75400: PUSH
75401: LD_INT 0
75403: PUSH
75404: LD_INT 0
75406: PUSH
75407: LD_VAR 0 3
75411: PUSH
75412: LD_INT 0
75414: PUSH
75415: LD_INT 0
75417: PUSH
75418: LD_INT 0
75420: PUSH
75421: EMPTY
75422: LIST
75423: LIST
75424: LIST
75425: LIST
75426: LIST
75427: LIST
75428: LIST
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: PPUSH
75434: CALL_OW 446
// end ;
75438: LD_VAR 0 2
75442: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75443: LD_INT 0
75445: PPUSH
75446: PPUSH
// if not driver or not IsInUnit ( driver ) then
75447: LD_VAR 0 1
75451: NOT
75452: PUSH
75453: LD_VAR 0 1
75457: PPUSH
75458: CALL_OW 310
75462: NOT
75463: OR
75464: IFFALSE 75468
// exit ;
75466: GO 75558
// vehicle := IsInUnit ( driver ) ;
75468: LD_ADDR_VAR 0 3
75472: PUSH
75473: LD_VAR 0 1
75477: PPUSH
75478: CALL_OW 310
75482: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75483: LD_VAR 0 1
75487: PPUSH
75488: LD_STRING \
75490: PUSH
75491: LD_INT 0
75493: PUSH
75494: LD_INT 0
75496: PUSH
75497: LD_INT 0
75499: PUSH
75500: LD_INT 0
75502: PUSH
75503: LD_INT 0
75505: PUSH
75506: LD_INT 0
75508: PUSH
75509: EMPTY
75510: LIST
75511: LIST
75512: LIST
75513: LIST
75514: LIST
75515: LIST
75516: LIST
75517: PUSH
75518: LD_STRING E
75520: PUSH
75521: LD_INT 0
75523: PUSH
75524: LD_INT 0
75526: PUSH
75527: LD_VAR 0 3
75531: PUSH
75532: LD_INT 0
75534: PUSH
75535: LD_INT 0
75537: PUSH
75538: LD_INT 0
75540: PUSH
75541: EMPTY
75542: LIST
75543: LIST
75544: LIST
75545: LIST
75546: LIST
75547: LIST
75548: LIST
75549: PUSH
75550: EMPTY
75551: LIST
75552: LIST
75553: PPUSH
75554: CALL_OW 447
// end ;
75558: LD_VAR 0 2
75562: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75563: LD_INT 0
75565: PPUSH
75566: PPUSH
75567: PPUSH
// tmp := [ ] ;
75568: LD_ADDR_VAR 0 5
75572: PUSH
75573: EMPTY
75574: ST_TO_ADDR
// for i in units do
75575: LD_ADDR_VAR 0 4
75579: PUSH
75580: LD_VAR 0 1
75584: PUSH
75585: FOR_IN
75586: IFFALSE 75624
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75588: LD_ADDR_VAR 0 5
75592: PUSH
75593: LD_VAR 0 5
75597: PPUSH
75598: LD_VAR 0 5
75602: PUSH
75603: LD_INT 1
75605: PLUS
75606: PPUSH
75607: LD_VAR 0 4
75611: PPUSH
75612: CALL_OW 256
75616: PPUSH
75617: CALL_OW 2
75621: ST_TO_ADDR
75622: GO 75585
75624: POP
75625: POP
// if not tmp then
75626: LD_VAR 0 5
75630: NOT
75631: IFFALSE 75635
// exit ;
75633: GO 75683
// if asc then
75635: LD_VAR 0 2
75639: IFFALSE 75663
// result := SortListByListAsc ( units , tmp ) else
75641: LD_ADDR_VAR 0 3
75645: PUSH
75646: LD_VAR 0 1
75650: PPUSH
75651: LD_VAR 0 5
75655: PPUSH
75656: CALL_OW 76
75660: ST_TO_ADDR
75661: GO 75683
// result := SortListByListDesc ( units , tmp ) ;
75663: LD_ADDR_VAR 0 3
75667: PUSH
75668: LD_VAR 0 1
75672: PPUSH
75673: LD_VAR 0 5
75677: PPUSH
75678: CALL_OW 77
75682: ST_TO_ADDR
// end ;
75683: LD_VAR 0 3
75687: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75688: LD_INT 0
75690: PPUSH
75691: PPUSH
// task := GetTaskList ( mech ) ;
75692: LD_ADDR_VAR 0 4
75696: PUSH
75697: LD_VAR 0 1
75701: PPUSH
75702: CALL_OW 437
75706: ST_TO_ADDR
// if not task then
75707: LD_VAR 0 4
75711: NOT
75712: IFFALSE 75716
// exit ;
75714: GO 75758
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75716: LD_ADDR_VAR 0 3
75720: PUSH
75721: LD_VAR 0 4
75725: PUSH
75726: LD_INT 1
75728: ARRAY
75729: PUSH
75730: LD_INT 1
75732: ARRAY
75733: PUSH
75734: LD_STRING r
75736: EQUAL
75737: PUSH
75738: LD_VAR 0 4
75742: PUSH
75743: LD_INT 1
75745: ARRAY
75746: PUSH
75747: LD_INT 4
75749: ARRAY
75750: PUSH
75751: LD_VAR 0 2
75755: EQUAL
75756: AND
75757: ST_TO_ADDR
// end ;
75758: LD_VAR 0 3
75762: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75763: LD_INT 0
75765: PPUSH
// SetDir ( unit , d ) ;
75766: LD_VAR 0 1
75770: PPUSH
75771: LD_VAR 0 4
75775: PPUSH
75776: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75780: LD_VAR 0 1
75784: PPUSH
75785: LD_VAR 0 2
75789: PPUSH
75790: LD_VAR 0 3
75794: PPUSH
75795: LD_VAR 0 5
75799: PPUSH
75800: CALL_OW 48
// end ;
75804: LD_VAR 0 6
75808: RET
// export function ToNaturalNumber ( number ) ; begin
75809: LD_INT 0
75811: PPUSH
// result := number div 1 ;
75812: LD_ADDR_VAR 0 2
75816: PUSH
75817: LD_VAR 0 1
75821: PUSH
75822: LD_INT 1
75824: DIV
75825: ST_TO_ADDR
// if number < 0 then
75826: LD_VAR 0 1
75830: PUSH
75831: LD_INT 0
75833: LESS
75834: IFFALSE 75844
// result := 0 ;
75836: LD_ADDR_VAR 0 2
75840: PUSH
75841: LD_INT 0
75843: ST_TO_ADDR
// end ;
75844: LD_VAR 0 2
75848: RET
// export function SortByClass ( units , class ) ; var un ; begin
75849: LD_INT 0
75851: PPUSH
75852: PPUSH
// if not units or not class then
75853: LD_VAR 0 1
75857: NOT
75858: PUSH
75859: LD_VAR 0 2
75863: NOT
75864: OR
75865: IFFALSE 75869
// exit ;
75867: GO 75964
// result := [ ] ;
75869: LD_ADDR_VAR 0 3
75873: PUSH
75874: EMPTY
75875: ST_TO_ADDR
// for un in units do
75876: LD_ADDR_VAR 0 4
75880: PUSH
75881: LD_VAR 0 1
75885: PUSH
75886: FOR_IN
75887: IFFALSE 75962
// if GetClass ( un ) = class then
75889: LD_VAR 0 4
75893: PPUSH
75894: CALL_OW 257
75898: PUSH
75899: LD_VAR 0 2
75903: EQUAL
75904: IFFALSE 75931
// result := Insert ( result , 1 , un ) else
75906: LD_ADDR_VAR 0 3
75910: PUSH
75911: LD_VAR 0 3
75915: PPUSH
75916: LD_INT 1
75918: PPUSH
75919: LD_VAR 0 4
75923: PPUSH
75924: CALL_OW 2
75928: ST_TO_ADDR
75929: GO 75960
// result := Replace ( result , result + 1 , un ) ;
75931: LD_ADDR_VAR 0 3
75935: PUSH
75936: LD_VAR 0 3
75940: PPUSH
75941: LD_VAR 0 3
75945: PUSH
75946: LD_INT 1
75948: PLUS
75949: PPUSH
75950: LD_VAR 0 4
75954: PPUSH
75955: CALL_OW 1
75959: ST_TO_ADDR
75960: GO 75886
75962: POP
75963: POP
// end ; end_of_file
75964: LD_VAR 0 3
75968: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75969: LD_VAR 0 1
75973: PUSH
75974: LD_INT 200
75976: DOUBLE
75977: GREATEREQUAL
75978: IFFALSE 75986
75980: LD_INT 299
75982: DOUBLE
75983: LESSEQUAL
75984: IFTRUE 75988
75986: GO 76020
75988: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75989: LD_VAR 0 1
75993: PPUSH
75994: LD_VAR 0 2
75998: PPUSH
75999: LD_VAR 0 3
76003: PPUSH
76004: LD_VAR 0 4
76008: PPUSH
76009: LD_VAR 0 5
76013: PPUSH
76014: CALL 33212 0 5
76018: GO 76097
76020: LD_INT 300
76022: DOUBLE
76023: GREATEREQUAL
76024: IFFALSE 76032
76026: LD_INT 399
76028: DOUBLE
76029: LESSEQUAL
76030: IFTRUE 76034
76032: GO 76096
76034: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76035: LD_VAR 0 1
76039: PPUSH
76040: LD_VAR 0 2
76044: PPUSH
76045: LD_VAR 0 3
76049: PPUSH
76050: LD_VAR 0 4
76054: PPUSH
76055: LD_VAR 0 5
76059: PPUSH
76060: LD_VAR 0 6
76064: PPUSH
76065: LD_VAR 0 7
76069: PPUSH
76070: LD_VAR 0 8
76074: PPUSH
76075: LD_VAR 0 9
76079: PPUSH
76080: LD_VAR 0 10
76084: PPUSH
76085: LD_VAR 0 11
76089: PPUSH
76090: CALL 31100 0 11
76094: GO 76097
76096: POP
// end ;
76097: PPOPN 11
76099: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76100: LD_VAR 0 1
76104: PPUSH
76105: LD_VAR 0 2
76109: PPUSH
76110: LD_VAR 0 3
76114: PPUSH
76115: LD_VAR 0 4
76119: PPUSH
76120: LD_VAR 0 5
76124: PPUSH
76125: CALL 33194 0 5
// end ; end_of_file
76129: PPOPN 5
76131: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76132: LD_VAR 0 1
76136: PPUSH
76137: LD_VAR 0 2
76141: PPUSH
76142: LD_VAR 0 3
76146: PPUSH
76147: LD_VAR 0 4
76151: PPUSH
76152: LD_VAR 0 5
76156: PPUSH
76157: LD_VAR 0 6
76161: PPUSH
76162: CALL 19908 0 6
// end ;
76166: PPOPN 6
76168: END
