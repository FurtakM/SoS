// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4695 0 0
// PrepareRussianBase ;
  29: CALL 2976 0 0
// PrepareRussianCommander ;
  33: CALL 2927 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8338 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild = 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode = 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible = 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack = 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson = 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase = 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer = 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus = 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer = 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog = 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog = 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog = 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil = 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower = 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable = 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter = 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor = 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 38856 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 38856 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: LD_EXP 49
 585: PPUSH
 586: CALL 38856 0 3
 590: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 591: LD_ADDR_EXP 8
 595: PUSH
 596: LD_STRING Dickens
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: LD_EXP 49
 606: PPUSH
 607: CALL 38856 0 3
 611: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 612: LD_ADDR_EXP 9
 616: PUSH
 617: LD_STRING Woodruff
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_EXP 49
 627: PPUSH
 628: CALL 38856 0 3
 632: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 633: LD_ADDR_EXP 12
 637: PUSH
 638: LD_STRING Campell
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_EXP 49
 648: PPUSH
 649: CALL 38856 0 3
 653: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING Knight
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: LD_EXP 49
 669: PPUSH
 670: CALL 38856 0 3
 674: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 675: LD_ADDR_EXP 11
 679: PUSH
 680: LD_STRING Claptopn
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_EXP 49
 690: PPUSH
 691: CALL 38856 0 3
 695: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING Harisson
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: LD_EXP 49
 711: PPUSH
 712: CALL 38856 0 3
 716: ST_TO_ADDR
// if not Lisa then
 717: LD_EXP 4
 721: NOT
 722: IFFALSE 745
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 724: LD_ADDR_EXP 2
 728: PUSH
 729: LD_STRING Bobby
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_EXP 49
 739: PPUSH
 740: CALL 38856 0 3
 744: ST_TO_ADDR
// if not Lisa and not Bobby then
 745: LD_EXP 4
 749: NOT
 750: PUSH
 751: LD_EXP 2
 755: NOT
 756: AND
 757: IFFALSE 780
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 759: LD_ADDR_EXP 3
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_EXP 49
 774: PPUSH
 775: CALL 38856 0 3
 779: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 780: LD_EXP 4
 784: NOT
 785: PUSH
 786: LD_EXP 2
 790: NOT
 791: AND
 792: PUSH
 793: LD_EXP 3
 797: NOT
 798: AND
 799: IFFALSE 898
// begin tmp = CreateCharacterSet ( 03_others ) ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 31
 813: ST_TO_ADDR
// if tmp then
 814: LD_VAR 0 3
 818: IFFALSE 875
// begin RandomBeforeMission = tmp [ 1 ] ;
 820: LD_ADDR_EXP 6
 824: PUSH
 825: LD_VAR 0 3
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 834: LD_STRING 03_others
 836: PPUSH
 837: CALL_OW 40
// if tmp > 1 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: GREATER
 849: IFFALSE 873
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: DIFF
 865: PPUSH
 866: LD_STRING 03_others
 868: PPUSH
 869: CALL_OW 38
// end else
 873: GO 898
// begin PrepareHuman ( false , 1 , 3 ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: LD_INT 3
 883: PPUSH
 884: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 888: LD_ADDR_EXP 6
 892: PUSH
 893: CALL_OW 44
 897: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 4
 905: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 906: LD_ADDR_EXP 13
 910: PUSH
 911: LD_STRING Donaldson
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: LD_EXP 49
 921: PPUSH
 922: CALL 38856 0 3
 926: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Frank
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 38856 0 3
 947: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 32
 955: PPUSH
 956: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 960: LD_EXP 7
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 975: LD_EXP 7
 979: PPUSH
 980: LD_INT 32
 982: PPUSH
 983: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 987: LD_EXP 8
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1002: LD_EXP 9
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1017: LD_EXP 12
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1032: LD_EXP 10
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1047: LD_EXP 11
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 49
// if Lisa = false then
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1087: LD_EXP 2
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// if Lisa = false and Bobby = false then
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: PUSH
1111: LD_EXP 2
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1137: LD_EXP 4
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: PUSH
1146: LD_EXP 2
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: PUSH
1156: LD_EXP 3
1160: PUSH
1161: LD_INT 0
1163: EQUAL
1164: AND
1165: IFFALSE 1182
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1167: LD_EXP 6
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 49
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1187: LD_INT 0
1189: PPUSH
1190: PPUSH
1191: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1192: LD_EXP 13
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// if Frank then
1207: LD_EXP 5
1211: IFFALSE 1228
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1213: LD_EXP 5
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// uc_nation = 1 ;
1228: LD_ADDR_OWVAR 21
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// uc_side = 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// hc_class := 3 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING SecondCharsGal
1267: ST_TO_ADDR
// hc_face_number := 53 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 53
1275: ST_TO_ADDR
// hc_name := Freddie Warner ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Freddie Warner
1283: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 8
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 2
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 56 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 56
1401: ST_TO_ADDR
// hc_name := Mel Brennan ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Mel Brennan
1409: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 12
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// hc_class := 1 ;
1496: LD_ADDR_OWVAR 28
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_sex := sex_male ;
1504: LD_ADDR_OWVAR 27
1508: PUSH
1509: LD_INT 1
1511: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING AmGalRemake
1519: ST_TO_ADDR
// hc_face_number := 5 ;
1520: LD_ADDR_OWVAR 34
1524: PUSH
1525: LD_INT 5
1527: ST_TO_ADDR
// hc_name := Bob Joplin ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Bob Joplin
1535: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1536: LD_ADDR_OWVAR 29
1540: PUSH
1541: LD_INT 10
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1551: LD_ADDR_OWVAR 30
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1574: LD_ADDR_OWVAR 31
1578: PUSH
1579: LD_INT 3
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// un = CreateHuman ;
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: CALL_OW 44
1606: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1607: LD_VAR 0 3
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// hc_class := 3 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// hc_sex := sex_female ;
1630: LD_ADDR_OWVAR 27
1634: PUSH
1635: LD_INT 2
1637: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING AmGalRemake
1645: ST_TO_ADDR
// hc_face_number := 8 ;
1646: LD_ADDR_OWVAR 34
1650: PUSH
1651: LD_INT 8
1653: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1654: LD_ADDR_OWVAR 26
1658: PUSH
1659: LD_STRING Elizabeth Whitney
1661: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1662: LD_ADDR_OWVAR 29
1666: PUSH
1667: LD_INT 9
1669: PUSH
1670: LD_INT 11
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1677: LD_ADDR_OWVAR 30
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1700: LD_ADDR_OWVAR 31
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: LD_INT 4
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// un = CreateHuman ;
1723: LD_ADDR_VAR 0 3
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// InitHc ;
1748: CALL_OW 19
// end ;
1752: LD_VAR 0 1
1756: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
1761: PPUSH
1762: PPUSH
// uc_nation = 1 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// uc_side = 1 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 2
1786: ST_TO_ADDR
// vc_engine := engine_combustion ;
1787: LD_ADDR_OWVAR 39
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_control := control_manual ;
1795: LD_ADDR_OWVAR 38
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1803: LD_ADDR_OWVAR 41
1807: PUSH
1808: LD_INT 65
1810: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_OWVAR 67
1838: ARRAY
1839: ST_TO_ADDR
// veh := CreateVehicle ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 2
1857: PPUSH
1858: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: CALL_OW 428
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: IFFALSE 1898
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1878: LD_VAR 0 5
1882: PPUSH
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 48
1896: GO 1916
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1898: LD_VAR 0 5
1902: PPUSH
1903: LD_INT 23
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 48
// hc_class := 1 ;
1916: LD_ADDR_OWVAR 28
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_sex := sex_male ;
1924: LD_ADDR_OWVAR 27
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1932: LD_ADDR_OWVAR 33
1936: PUSH
1937: LD_STRING SecondCharsGal
1939: ST_TO_ADDR
// hc_face_number := 59 ;
1940: LD_ADDR_OWVAR 34
1944: PUSH
1945: LD_INT 59
1947: ST_TO_ADDR
// hc_name := Max Gray ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING Max Gray
1955: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 9
1963: PUSH
1964: LD_INT 11
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1971: LD_ADDR_OWVAR 30
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1994: LD_ADDR_OWVAR 31
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 0
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: ST_TO_ADDR
// un = CreateHuman ;
2017: LD_ADDR_VAR 0 4
2021: PUSH
2022: CALL_OW 44
2026: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_INT 11
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// hc_class := 2 ;
2042: LD_ADDR_OWVAR 28
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_sex := sex_male ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2058: LD_ADDR_OWVAR 33
2062: PUSH
2063: LD_STRING SecondCharsGal
2065: ST_TO_ADDR
// hc_face_number := 50 ;
2066: LD_ADDR_OWVAR 34
2070: PUSH
2071: LD_INT 50
2073: ST_TO_ADDR
// hc_name := Frank Hughes ;
2074: LD_ADDR_OWVAR 26
2078: PUSH
2079: LD_STRING Frank Hughes
2081: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2082: LD_ADDR_OWVAR 29
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: LD_INT 10
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2097: LD_ADDR_OWVAR 30
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 11
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// hc_class := 1 ;
2168: LD_ADDR_OWVAR 28
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_sex := sex_male ;
2176: LD_ADDR_OWVAR 27
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2184: LD_ADDR_OWVAR 33
2188: PUSH
2189: LD_STRING SecondCharsGal
2191: ST_TO_ADDR
// hc_face_number := 54 ;
2192: LD_ADDR_OWVAR 34
2196: PUSH
2197: LD_INT 54
2199: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_STRING Luigi Ghbellin
2207: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2208: LD_ADDR_OWVAR 29
2212: PUSH
2213: LD_INT 11
2215: PUSH
2216: LD_INT 11
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2223: LD_ADDR_OWVAR 30
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2246: LD_ADDR_OWVAR 31
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// un = CreateHuman ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: CALL_OW 44
2278: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2279: LD_VAR 0 4
2283: PPUSH
2284: LD_INT 11
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL_OW 49
// hc_class := 3 ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 3
2301: ST_TO_ADDR
// hc_sex := sex_male ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2310: LD_ADDR_OWVAR 33
2314: PUSH
2315: LD_STRING AmGalRemake
2317: ST_TO_ADDR
// hc_face_number := 6 ;
2318: LD_ADDR_OWVAR 34
2322: PUSH
2323: LD_INT 6
2325: ST_TO_ADDR
// hc_name := Leon Carter ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Leon Carter
2333: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2334: LD_ADDR_OWVAR 29
2338: PUSH
2339: LD_INT 10
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2349: LD_ADDR_OWVAR 30
2353: PUSH
2354: LD_INT 0
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2372: LD_ADDR_OWVAR 31
2376: PUSH
2377: LD_INT 0
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: ST_TO_ADDR
// un = CreateHuman ;
2395: LD_ADDR_VAR 0 4
2399: PUSH
2400: CALL_OW 44
2404: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2405: LD_VAR 0 4
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 52
// if count = 4 then
2419: LD_VAR 0 1
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2555
// begin hc_class := 1 ;
2429: LD_ADDR_OWVAR 28
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_sex := sex_male ;
2437: LD_ADDR_OWVAR 27
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING SecondCharsGal
2452: ST_TO_ADDR
// hc_face_number := 34 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 34
2460: ST_TO_ADDR
// hc_name := Ian Hill ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING Ian Hill
2468: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2469: LD_ADDR_OWVAR 29
2473: PUSH
2474: LD_INT 10
2476: PUSH
2477: LD_INT 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2484: LD_ADDR_OWVAR 30
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: LD_INT 0
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2507: LD_ADDR_OWVAR 31
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: ST_TO_ADDR
// un = CreateHuman ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: CALL_OW 44
2539: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2540: LD_VAR 0 4
2544: PPUSH
2545: LD_INT 11
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 49
// end ; if count = 5 then
2555: LD_VAR 0 1
2559: PUSH
2560: LD_INT 5
2562: EQUAL
2563: IFFALSE 2817
// begin hc_class := 1 ;
2565: LD_ADDR_OWVAR 28
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_sex := sex_male ;
2573: LD_ADDR_OWVAR 27
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2581: LD_ADDR_OWVAR 33
2585: PUSH
2586: LD_STRING SecondCharsGal
2588: ST_TO_ADDR
// hc_face_number := 34 ;
2589: LD_ADDR_OWVAR 34
2593: PUSH
2594: LD_INT 34
2596: ST_TO_ADDR
// hc_name := Ian Hill ;
2597: LD_ADDR_OWVAR 26
2601: PUSH
2602: LD_STRING Ian Hill
2604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2605: LD_ADDR_OWVAR 29
2609: PUSH
2610: LD_INT 10
2612: PUSH
2613: LD_INT 12
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2620: LD_ADDR_OWVAR 30
2624: PUSH
2625: LD_INT 1
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 0
2633: PUSH
2634: LD_INT 0
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2643: LD_ADDR_OWVAR 31
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: ST_TO_ADDR
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// hc_class := 1 ;
2691: LD_ADDR_OWVAR 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// hc_sex := sex_female ;
2699: LD_ADDR_OWVAR 27
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2707: LD_ADDR_OWVAR 33
2711: PUSH
2712: LD_STRING SecondCharsGal
2714: ST_TO_ADDR
// hc_face_number := 41 ;
2715: LD_ADDR_OWVAR 34
2719: PUSH
2720: LD_INT 41
2722: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2723: LD_ADDR_OWVAR 26
2727: PUSH
2728: LD_STRING Kate Wadsworth
2730: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2731: LD_ADDR_OWVAR 29
2735: PUSH
2736: LD_INT 9
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2746: LD_ADDR_OWVAR 30
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2769: LD_ADDR_OWVAR 31
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// un = CreateHuman ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 11
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2817: LD_INT 11
2819: PPUSH
2820: LD_INT 22
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 21
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 26
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 70
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2868: LD_INT 11
2870: PPUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 26
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 70
2910: PUSH
2911: LD_INT 1
2913: ARRAY
2914: PPUSH
2915: LD_STRING D6-Sol3-1
2917: PPUSH
2918: CALL_OW 88
// end ; end_of_file
2922: LD_VAR 0 2
2926: RET
// export function PrepareRussianCommander ; begin
2927: LD_INT 0
2929: PPUSH
// uc_side = 3 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// uc_nation = 3 ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Stolypin
2953: PPUSH
2954: CALL_OW 25
2958: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2959: LD_EXP 15
2963: PPUSH
2964: LD_INT 21
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: LD_VAR 0 1
2975: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// if Difficulty > 1 then
2982: LD_OWVAR 67
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3100
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := 3 ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// InitHc ;
3008: CALL_OW 19
// InitBc ;
3012: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3016: LD_INT 0
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL_OW 380
// bc_type := b_breastwork ;
3029: LD_ADDR_OWVAR 42
3033: PUSH
3034: LD_INT 31
3036: ST_TO_ADDR
// bc_level := 4 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 4
3044: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3045: LD_ADDR_VAR 0 3
3049: PUSH
3050: LD_INT 100
3052: PPUSH
3053: LD_INT 58
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 5
3081: PPUSH
3082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3086: LD_VAR 0 4
3090: PPUSH
3091: LD_VAR 0 3
3095: PPUSH
3096: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3100: LD_INT 3
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 22
3108: PPUSH
3109: LD_EXP 16
3113: PPUSH
3114: LD_EXP 17
3118: PPUSH
3119: CALL_OW 12
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 4
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 6
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_OWVAR 67
3149: ARRAY
3150: PPUSH
3151: CALL 4361 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 21
3163: PPUSH
3164: LD_EXP 16
3168: PPUSH
3169: LD_EXP 17
3173: PPUSH
3174: CALL_OW 12
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL 4361 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: LD_EXP 16
3202: PPUSH
3203: LD_EXP 17
3207: PPUSH
3208: CALL_OW 12
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL 4361 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 24
3231: PPUSH
3232: LD_EXP 16
3236: PPUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 5
3252: PPUSH
3253: CALL 4361 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3332
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3294: LD_INT 3
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: LD_EXP 17
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL 4361 0 6
3330: GO 3291
3332: POP
3333: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 30
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: FOR_IN
3369: IFFALSE 3397
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL 4470 0 2
3395: GO 3368
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 1
3403: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 6 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 6
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3426: LD_ADDR_VAR 0 2
3430: PUSH
3431: DOUBLE
3432: LD_INT 1
3434: DEC
3435: ST_TO_ADDR
3436: LD_INT 1
3438: PUSH
3439: LD_INT 2
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: LD_INT 3
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: PUSH
3454: LD_OWVAR 67
3458: ARRAY
3459: PUSH
3460: FOR_TO
3461: IFFALSE 3629
// begin vc_engine = 1 ;
3463: LD_ADDR_OWVAR 39
3467: PUSH
3468: LD_INT 1
3470: ST_TO_ADDR
// vc_control = 1 ;
3471: LD_ADDR_OWVAR 38
3475: PUSH
3476: LD_INT 1
3478: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3479: LD_ADDR_OWVAR 40
3483: PUSH
3484: LD_INT 42
3486: PUSH
3487: LD_INT 42
3489: PUSH
3490: LD_INT 43
3492: PUSH
3493: LD_INT 43
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: PUSH
3502: LD_OWVAR 67
3506: ARRAY
3507: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3508: LD_ADDR_OWVAR 37
3512: PUSH
3513: LD_INT 21
3515: PUSH
3516: LD_INT 22
3518: PUSH
3519: LD_INT 22
3521: PUSH
3522: LD_INT 22
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: PUSH
3531: LD_OWVAR 67
3535: ARRAY
3536: ST_TO_ADDR
// veh = CreateVehicle ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 45
3546: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3547: LD_VAR 0 3
3551: PPUSH
3552: LD_INT 3
3554: PPUSH
3555: LD_INT 0
3557: PPUSH
3558: CALL_OW 49
// hc_gallery =  ;
3562: LD_ADDR_OWVAR 33
3566: PUSH
3567: LD_STRING 
3569: ST_TO_ADDR
// hc_name =  ;
3570: LD_ADDR_OWVAR 26
3574: PUSH
3575: LD_STRING 
3577: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3578: LD_INT 0
3580: PPUSH
3581: LD_INT 3
3583: PPUSH
3584: LD_EXP 16
3588: PPUSH
3589: LD_EXP 17
3593: PPUSH
3594: CALL_OW 12
3598: PPUSH
3599: CALL_OW 380
// un = CreateHuman ;
3603: LD_ADDR_VAR 0 4
3607: PUSH
3608: CALL_OW 44
3612: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3613: LD_VAR 0 4
3617: PPUSH
3618: LD_VAR 0 3
3622: PPUSH
3623: CALL_OW 52
// end ;
3627: GO 3460
3629: POP
3630: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3631: LD_INT 0
3633: PPUSH
3634: LD_INT 2
3636: PPUSH
3637: LD_EXP 16
3641: PPUSH
3642: LD_EXP 17
3646: PPUSH
3647: CALL_OW 12
3651: PUSH
3652: LD_INT 2
3654: PLUS
3655: PPUSH
3656: CALL_OW 380
// un = CreateHuman ;
3660: LD_ADDR_VAR 0 4
3664: PUSH
3665: CALL_OW 44
3669: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3670: LD_VAR 0 4
3674: PPUSH
3675: LD_INT 3
3677: PPUSH
3678: LD_INT 0
3680: PPUSH
3681: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3685: LD_INT 0
3687: PPUSH
3688: LD_INT 4
3690: PPUSH
3691: LD_EXP 16
3695: PPUSH
3696: LD_EXP 17
3700: PPUSH
3701: CALL_OW 12
3705: PUSH
3706: LD_INT 2
3708: PLUS
3709: PPUSH
3710: CALL_OW 380
// un = CreateHuman ;
3714: LD_ADDR_VAR 0 4
3718: PUSH
3719: CALL_OW 44
3723: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3724: LD_VAR 0 4
3728: PPUSH
3729: LD_INT 3
3731: PPUSH
3732: LD_INT 0
3734: PPUSH
3735: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3739: LD_ADDR_VAR 0 2
3743: PUSH
3744: DOUBLE
3745: LD_INT 1
3747: DEC
3748: ST_TO_ADDR
3749: LD_INT 2
3751: PUSH
3752: LD_INT 3
3754: PUSH
3755: LD_INT 3
3757: PUSH
3758: LD_INT 4
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: PUSH
3767: LD_OWVAR 67
3771: ARRAY
3772: PUSH
3773: LD_INT 1
3775: PPUSH
3776: LD_INT 3
3778: PPUSH
3779: CALL_OW 12
3783: PLUS
3784: PUSH
3785: FOR_TO
3786: IFFALSE 3856
// begin hc_gallery =  ;
3788: LD_ADDR_OWVAR 33
3792: PUSH
3793: LD_STRING 
3795: ST_TO_ADDR
// hc_name =  ;
3796: LD_ADDR_OWVAR 26
3800: PUSH
3801: LD_STRING 
3803: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3804: LD_INT 0
3806: PPUSH
3807: LD_INT 1
3809: PPUSH
3810: LD_EXP 16
3814: PPUSH
3815: LD_EXP 17
3819: PPUSH
3820: CALL_OW 12
3824: PPUSH
3825: CALL_OW 380
// un = CreateHuman ;
3829: LD_ADDR_VAR 0 4
3833: PUSH
3834: CALL_OW 44
3838: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3839: LD_VAR 0 4
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 0
3849: PPUSH
3850: CALL_OW 49
// end ;
3854: GO 3785
3856: POP
3857: POP
// vc_engine = 1 ;
3858: LD_ADDR_OWVAR 39
3862: PUSH
3863: LD_INT 1
3865: ST_TO_ADDR
// vc_control = 1 ;
3866: LD_ADDR_OWVAR 38
3870: PUSH
3871: LD_INT 1
3873: ST_TO_ADDR
// vc_weapon = 51 ;
3874: LD_ADDR_OWVAR 40
3878: PUSH
3879: LD_INT 51
3881: ST_TO_ADDR
// vc_chassis = 22 ;
3882: LD_ADDR_OWVAR 37
3886: PUSH
3887: LD_INT 22
3889: ST_TO_ADDR
// veh = CreateVehicle ;
3890: LD_ADDR_VAR 0 3
3894: PUSH
3895: CALL_OW 45
3899: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3900: LD_VAR 0 3
3904: PPUSH
3905: LD_INT 3
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3915: LD_VAR 0 3
3919: PPUSH
3920: LD_INT 1
3922: PPUSH
3923: LD_INT 100
3925: PPUSH
3926: CALL_OW 290
// hc_gallery =  ;
3930: LD_ADDR_OWVAR 33
3934: PUSH
3935: LD_STRING 
3937: ST_TO_ADDR
// hc_name =  ;
3938: LD_ADDR_OWVAR 26
3942: PUSH
3943: LD_STRING 
3945: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3946: LD_INT 0
3948: PPUSH
3949: LD_INT 3
3951: PPUSH
3952: LD_EXP 16
3956: PPUSH
3957: LD_EXP 17
3961: PPUSH
3962: CALL_OW 12
3966: PPUSH
3967: CALL_OW 380
// un = CreateHuman ;
3971: LD_ADDR_VAR 0 4
3975: PUSH
3976: CALL_OW 44
3980: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3981: LD_VAR 0 4
3985: PPUSH
3986: LD_VAR 0 3
3990: PPUSH
3991: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3995: LD_ADDR_VAR 0 2
3999: PUSH
4000: LD_INT 22
4002: PUSH
4003: LD_INT 6
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: PUSH
4010: LD_INT 1
4012: PUSH
4013: LD_INT 3
4015: PUSH
4016: LD_INT 25
4018: PUSH
4019: LD_INT 2
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 3
4032: PUSH
4033: LD_INT 25
4035: PUSH
4036: LD_INT 4
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: LIST
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: PPUSH
4056: CALL_OW 69
4060: PUSH
4061: FOR_IN
4062: IFFALSE 4081
// ComAgressiveMove ( i , 45 , 46 ) ;
4064: LD_VAR 0 2
4068: PPUSH
4069: LD_INT 45
4071: PPUSH
4072: LD_INT 46
4074: PPUSH
4075: CALL_OW 114
4079: GO 4061
4081: POP
4082: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4083: LD_ADDR_VAR 0 2
4087: PUSH
4088: LD_INT 22
4090: PUSH
4091: LD_INT 6
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: LD_INT 25
4100: PUSH
4101: LD_INT 2
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PPUSH
4112: CALL_OW 69
4116: PUSH
4117: FOR_IN
4118: IFFALSE 4149
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4120: LD_ADDR_EXP 21
4124: PUSH
4125: LD_VAR 0 2
4129: PPUSH
4130: LD_INT 0
4132: PPUSH
4133: LD_INT 48
4135: PPUSH
4136: LD_INT 55
4138: PPUSH
4139: LD_INT 5
4141: PPUSH
4142: CALL_OW 145
4146: ST_TO_ADDR
4147: GO 4117
4149: POP
4150: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4151: LD_ADDR_VAR 0 2
4155: PUSH
4156: LD_INT 22
4158: PUSH
4159: LD_INT 6
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 25
4168: PUSH
4169: LD_INT 4
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 69
4184: PUSH
4185: FOR_IN
4186: IFFALSE 4205
// ComMoveXY ( i , 39 , 55 ) ;
4188: LD_VAR 0 2
4192: PPUSH
4193: LD_INT 39
4195: PPUSH
4196: LD_INT 55
4198: PPUSH
4199: CALL_OW 111
4203: GO 4185
4205: POP
4206: POP
// end ;
4207: LD_VAR 0 1
4211: RET
// export function PrepareFirstAttack ; var i , un ; begin
4212: LD_INT 0
4214: PPUSH
4215: PPUSH
4216: PPUSH
// uc_side = 5 ;
4217: LD_ADDR_OWVAR 20
4221: PUSH
4222: LD_INT 5
4224: ST_TO_ADDR
// uc_nation = 3 ;
4225: LD_ADDR_OWVAR 21
4229: PUSH
4230: LD_INT 3
4232: ST_TO_ADDR
// for i := 1 to 4 do
4233: LD_ADDR_VAR 0 2
4237: PUSH
4238: DOUBLE
4239: LD_INT 1
4241: DEC
4242: ST_TO_ADDR
4243: LD_INT 4
4245: PUSH
4246: FOR_TO
4247: IFFALSE 4346
// begin hc_gallery =  ;
4249: LD_ADDR_OWVAR 33
4253: PUSH
4254: LD_STRING 
4256: ST_TO_ADDR
// hc_name =  ;
4257: LD_ADDR_OWVAR 26
4261: PUSH
4262: LD_STRING 
4264: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4265: LD_INT 0
4267: PPUSH
4268: LD_INT 1
4270: PPUSH
4271: LD_EXP 16
4275: PPUSH
4276: LD_EXP 17
4280: PPUSH
4281: CALL_OW 12
4285: PPUSH
4286: CALL_OW 380
// un = CreateHuman ;
4290: LD_ADDR_VAR 0 3
4294: PUSH
4295: CALL_OW 44
4299: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4300: LD_VAR 0 3
4304: PPUSH
4305: LD_INT 4
4307: PPUSH
4308: LD_INT 0
4310: PPUSH
4311: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_EXP 1
4324: PPUSH
4325: CALL_OW 250
4329: PPUSH
4330: LD_EXP 1
4334: PPUSH
4335: CALL_OW 251
4339: PPUSH
4340: CALL_OW 114
// end ;
4344: GO 4246
4346: POP
4347: POP
// firstRussianAttack = 1 ;
4348: LD_ADDR_EXP 23
4352: PUSH
4353: LD_INT 1
4355: ST_TO_ADDR
// end ; end_of_file
4356: LD_VAR 0 1
4360: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4361: LD_INT 0
4363: PPUSH
4364: PPUSH
4365: PPUSH
// for i = 1 to count do
4366: LD_ADDR_VAR 0 8
4370: PUSH
4371: DOUBLE
4372: LD_INT 1
4374: DEC
4375: ST_TO_ADDR
4376: LD_VAR 0 6
4380: PUSH
4381: FOR_TO
4382: IFFALSE 4463
// begin uc_side = side ;
4384: LD_ADDR_OWVAR 20
4388: PUSH
4389: LD_VAR 0 1
4393: ST_TO_ADDR
// uc_nation = nation ;
4394: LD_ADDR_OWVAR 21
4398: PUSH
4399: LD_VAR 0 2
4403: ST_TO_ADDR
// hc_gallery =  ;
4404: LD_ADDR_OWVAR 33
4408: PUSH
4409: LD_STRING 
4411: ST_TO_ADDR
// hc_name =  ;
4412: LD_ADDR_OWVAR 26
4416: PUSH
4417: LD_STRING 
4419: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4420: LD_INT 0
4422: PPUSH
4423: LD_VAR 0 5
4427: PPUSH
4428: LD_VAR 0 4
4432: PPUSH
4433: CALL_OW 380
// un = CreateHuman ;
4437: LD_ADDR_VAR 0 9
4441: PUSH
4442: CALL_OW 44
4446: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4447: LD_VAR 0 9
4451: PPUSH
4452: LD_VAR 0 3
4456: PPUSH
4457: CALL_OW 52
// end ;
4461: GO 4381
4463: POP
4464: POP
// end ;
4465: LD_VAR 0 7
4469: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4470: LD_INT 0
4472: PPUSH
4473: PPUSH
4474: PPUSH
// uc_side := GetSide ( b ) ;
4475: LD_ADDR_OWVAR 20
4479: PUSH
4480: LD_VAR 0 2
4484: PPUSH
4485: CALL_OW 255
4489: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4490: LD_ADDR_OWVAR 21
4494: PUSH
4495: LD_VAR 0 2
4499: PPUSH
4500: CALL_OW 248
4504: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4505: LD_INT 0
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_VAR 0 1
4515: PPUSH
4516: CALL_OW 380
// un = CreateHuman ;
4520: LD_ADDR_VAR 0 4
4524: PUSH
4525: CALL_OW 44
4529: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4530: LD_ADDR_VAR 0 5
4534: PUSH
4535: LD_VAR 0 2
4539: PPUSH
4540: CALL_OW 254
4544: PUSH
4545: LD_INT 3
4547: MINUS
4548: ST_TO_ADDR
// if dir < 0 then
4549: LD_VAR 0 5
4553: PUSH
4554: LD_INT 0
4556: LESS
4557: IFFALSE 4573
// dir := 6 + dir ;
4559: LD_ADDR_VAR 0 5
4563: PUSH
4564: LD_INT 6
4566: PUSH
4567: LD_VAR 0 5
4571: PLUS
4572: ST_TO_ADDR
// SetDir ( un , dir ) ;
4573: LD_VAR 0 4
4577: PPUSH
4578: LD_VAR 0 5
4582: PPUSH
4583: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4587: LD_VAR 0 4
4591: PPUSH
4592: LD_VAR 0 2
4596: PPUSH
4597: CALL_OW 52
// end ;
4601: LD_VAR 0 3
4605: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4606: LD_INT 0
4608: PPUSH
4609: PPUSH
4610: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4611: LD_ADDR_VAR 0 6
4615: PUSH
4616: LD_VAR 0 1
4620: PUSH
4621: LD_INT 1
4623: PPUSH
4624: LD_VAR 0 1
4628: PPUSH
4629: CALL_OW 12
4633: ARRAY
4634: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4635: LD_VAR 0 6
4639: PPUSH
4640: CALL_OW 258
4644: PUSH
4645: LD_INT 1
4647: EQUAL
4648: IFFALSE 4666
// Say ( speaker , dialogMID ) else
4650: LD_VAR 0 6
4654: PPUSH
4655: LD_VAR 0 2
4659: PPUSH
4660: CALL_OW 88
4664: GO 4680
// Say ( speaker , dialogFID ) ;
4666: LD_VAR 0 6
4670: PPUSH
4671: LD_VAR 0 3
4675: PPUSH
4676: CALL_OW 88
// result := speaker ;
4680: LD_ADDR_VAR 0 4
4684: PUSH
4685: LD_VAR 0 6
4689: ST_TO_ADDR
// end ;
4690: LD_VAR 0 4
4694: RET
// export function PrepareDifficulty ; var tmp ; begin
4695: LD_INT 0
4697: PPUSH
4698: PPUSH
// if Difficulty = 1 then
4699: LD_OWVAR 67
4703: PUSH
4704: LD_INT 1
4706: EQUAL
4707: IFFALSE 4725
// begin RuSoldMinLevel = 1 ;
4709: LD_ADDR_EXP 16
4713: PUSH
4714: LD_INT 1
4716: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4717: LD_ADDR_EXP 17
4721: PUSH
4722: LD_INT 2
4724: ST_TO_ADDR
// end ; if Difficulty = 2 then
4725: LD_OWVAR 67
4729: PUSH
4730: LD_INT 2
4732: EQUAL
4733: IFFALSE 4834
// begin RuSoldMinLevel = 2 ;
4735: LD_ADDR_EXP 16
4739: PUSH
4740: LD_INT 2
4742: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4743: LD_ADDR_EXP 17
4747: PUSH
4748: LD_INT 3
4750: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4751: LD_INT 23
4753: PPUSH
4754: CALL_OW 64
// uc_nation = 3 ;
4758: LD_ADDR_OWVAR 21
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// uc_side = 3 ;
4766: LD_ADDR_OWVAR 20
4770: PUSH
4771: LD_INT 3
4773: ST_TO_ADDR
// bc_level = 5 ;
4774: LD_ADDR_OWVAR 43
4778: PUSH
4779: LD_INT 5
4781: ST_TO_ADDR
// bc_type = 32 ;
4782: LD_ADDR_OWVAR 42
4786: PUSH
4787: LD_INT 32
4789: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4790: LD_ADDR_VAR 0 2
4794: PUSH
4795: LD_INT 76
4797: PPUSH
4798: LD_INT 91
4800: PPUSH
4801: LD_INT 2
4803: PPUSH
4804: CALL_OW 47
4808: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4809: LD_VAR 0 2
4813: PPUSH
4814: LD_INT 43
4816: PPUSH
4817: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4821: LD_INT 51
4823: PPUSH
4824: LD_INT 3
4826: PPUSH
4827: LD_INT 1
4829: PPUSH
4830: CALL_OW 322
// end ; if Difficulty >= 3 then
4834: LD_OWVAR 67
4838: PUSH
4839: LD_INT 3
4841: GREATEREQUAL
4842: IFFALSE 5006
// begin RuSoldMinLevel = Difficulty ;
4844: LD_ADDR_EXP 16
4848: PUSH
4849: LD_OWVAR 67
4853: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4854: LD_ADDR_EXP 17
4858: PUSH
4859: LD_INT 4
4861: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4862: LD_INT 26
4864: PPUSH
4865: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4869: LD_INT 23
4871: PPUSH
4872: CALL_OW 64
// uc_nation = 3 ;
4876: LD_ADDR_OWVAR 21
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// uc_side = 3 ;
4884: LD_ADDR_OWVAR 20
4888: PUSH
4889: LD_INT 3
4891: ST_TO_ADDR
// bc_level = 5 ;
4892: LD_ADDR_OWVAR 43
4896: PUSH
4897: LD_INT 5
4899: ST_TO_ADDR
// bc_type = 32 ;
4900: LD_ADDR_OWVAR 42
4904: PUSH
4905: LD_INT 32
4907: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4908: LD_ADDR_VAR 0 2
4912: PUSH
4913: LD_INT 76
4915: PPUSH
4916: LD_INT 91
4918: PPUSH
4919: LD_INT 2
4921: PPUSH
4922: CALL_OW 47
4926: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4927: LD_VAR 0 2
4931: PPUSH
4932: LD_INT 44
4934: PPUSH
4935: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4939: LD_ADDR_VAR 0 2
4943: PUSH
4944: LD_INT 83
4946: PPUSH
4947: LD_INT 84
4949: PPUSH
4950: LD_INT 2
4952: PPUSH
4953: CALL_OW 47
4957: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4958: LD_VAR 0 2
4962: PPUSH
4963: LD_INT 43
4965: PPUSH
4966: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4970: LD_INT 51
4972: PPUSH
4973: LD_INT 3
4975: PPUSH
4976: LD_INT 1
4978: PPUSH
4979: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4983: LD_INT 52
4985: PPUSH
4986: LD_INT 3
4988: PPUSH
4989: LD_INT 1
4991: PPUSH
4992: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4996: LD_INT 25
4998: PPUSH
4999: LD_INT 44
5001: PPUSH
5002: CALL_OW 431
// end ; end ;
5006: LD_VAR 0 1
5010: RET
// export function EnergyDialog ; begin
5011: LD_INT 0
5013: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5014: LD_INT 46
5016: PPUSH
5017: LD_INT 1
5019: PPUSH
5020: CALL_OW 321
5024: PUSH
5025: LD_INT 1
5027: EQUAL
5028: PUSH
5029: LD_INT 35
5031: PPUSH
5032: LD_INT 1
5034: PPUSH
5035: CALL_OW 321
5039: PUSH
5040: LD_INT 1
5042: EQUAL
5043: AND
5044: IFFALSE 5068
// begin Say ( JMM , D9c-JMM-1 ) ;
5046: LD_EXP 1
5050: PPUSH
5051: LD_STRING D9c-JMM-1
5053: PPUSH
5054: CALL_OW 88
// energyVDialog = 1 ;
5058: LD_ADDR_EXP 33
5062: PUSH
5063: LD_INT 1
5065: ST_TO_ADDR
// end else
5066: GO 5222
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5068: LD_INT 35
5070: PPUSH
5071: LD_INT 1
5073: PPUSH
5074: CALL_OW 321
5078: PUSH
5079: LD_INT 2
5081: EQUAL
5082: PUSH
5083: LD_EXP 33
5087: PUSH
5088: LD_INT 0
5090: EQUAL
5091: AND
5092: IFFALSE 5114
// begin Say ( JMM , D9c-JMM-1a ) ;
5094: LD_EXP 1
5098: PPUSH
5099: LD_STRING D9c-JMM-1a
5101: PPUSH
5102: CALL_OW 88
// energyVDialog = 1 ;
5106: LD_ADDR_EXP 33
5110: PUSH
5111: LD_INT 1
5113: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5114: LD_INT 46
5116: PPUSH
5117: LD_INT 1
5119: PPUSH
5120: CALL_OW 321
5124: PUSH
5125: LD_INT 2
5127: EQUAL
5128: PUSH
5129: LD_EXP 33
5133: PUSH
5134: LD_INT 0
5136: EQUAL
5137: AND
5138: IFFALSE 5160
// begin Say ( JMM , D9c-JMM-1b ) ;
5140: LD_EXP 1
5144: PPUSH
5145: LD_STRING D9c-JMM-1b
5147: PPUSH
5148: CALL_OW 88
// energyVDialog = 1 ;
5152: LD_ADDR_EXP 33
5156: PUSH
5157: LD_INT 1
5159: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5160: LD_INT 46
5162: PPUSH
5163: LD_INT 1
5165: PPUSH
5166: CALL_OW 321
5170: PUSH
5171: LD_INT 2
5173: EQUAL
5174: PUSH
5175: LD_INT 21
5177: PPUSH
5178: LD_INT 1
5180: PPUSH
5181: CALL_OW 321
5185: PUSH
5186: LD_INT 2
5188: EQUAL
5189: AND
5190: PUSH
5191: LD_EXP 33
5195: PUSH
5196: LD_INT 0
5198: EQUAL
5199: AND
5200: IFFALSE 5222
// begin Say ( JMM , D9c-JMM-1c ) ;
5202: LD_EXP 1
5206: PPUSH
5207: LD_STRING D9c-JMM-1c
5209: PPUSH
5210: CALL_OW 88
// energyVDialog = 1 ;
5214: LD_ADDR_EXP 33
5218: PUSH
5219: LD_INT 1
5221: ST_TO_ADDR
// end ; end ; end ;
5222: LD_VAR 0 1
5226: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5227: LD_INT 0
5229: PPUSH
5230: PPUSH
5231: PPUSH
5232: PPUSH
5233: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5234: LD_VAR 0 1
5238: NOT
5239: PUSH
5240: LD_VAR 0 1
5244: PPUSH
5245: CALL_OW 256
5249: PUSH
5250: LD_INT 250
5252: LESS
5253: OR
5254: PUSH
5255: LD_VAR 0 1
5259: PPUSH
5260: CALL_OW 314
5264: PUSH
5265: LD_VAR 0 1
5269: PPUSH
5270: CALL_OW 261
5274: PUSH
5275: LD_INT 20
5277: GREATER
5278: AND
5279: OR
5280: IFFALSE 5284
// exit ;
5282: GO 5649
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5284: LD_VAR 0 1
5288: PPUSH
5289: CALL_OW 261
5293: PUSH
5294: LD_INT 20
5296: LESS
5297: PUSH
5298: LD_VAR 0 1
5302: PPUSH
5303: CALL_OW 110
5307: PUSH
5308: LD_INT 21
5310: EQUAL
5311: NOT
5312: AND
5313: IFFALSE 5340
// begin ComStop ( bulldozer ) ;
5315: LD_VAR 0 1
5319: PPUSH
5320: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5324: LD_VAR 0 1
5328: PPUSH
5329: LD_INT 21
5331: PPUSH
5332: CALL_OW 109
// exit ;
5336: GO 5649
// end else
5338: GO 5367
// if GetFuel ( bulldozer ) > 20 then
5340: LD_VAR 0 1
5344: PPUSH
5345: CALL_OW 261
5349: PUSH
5350: LD_INT 20
5352: GREATER
5353: IFFALSE 5367
// SetTag ( bulldozer , 0 ) ;
5355: LD_VAR 0 1
5359: PPUSH
5360: LD_INT 0
5362: PPUSH
5363: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5367: LD_ADDR_VAR 0 5
5371: PUSH
5372: LD_VAR 0 2
5376: PPUSH
5377: CALL_OW 353
5381: ST_TO_ADDR
// tmp := [ ] ;
5382: LD_ADDR_VAR 0 6
5386: PUSH
5387: EMPTY
5388: ST_TO_ADDR
// for i = 1 to list do
5389: LD_ADDR_VAR 0 4
5393: PUSH
5394: DOUBLE
5395: LD_INT 1
5397: DEC
5398: ST_TO_ADDR
5399: LD_VAR 0 5
5403: PUSH
5404: FOR_TO
5405: IFFALSE 5503
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5407: LD_VAR 0 5
5411: PUSH
5412: LD_VAR 0 4
5416: ARRAY
5417: PUSH
5418: LD_INT 1
5420: ARRAY
5421: PPUSH
5422: LD_VAR 0 5
5426: PUSH
5427: LD_VAR 0 4
5431: ARRAY
5432: PUSH
5433: LD_INT 2
5435: ARRAY
5436: PPUSH
5437: CALL_OW 554
5441: IFFALSE 5501
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5443: LD_ADDR_VAR 0 6
5447: PUSH
5448: LD_VAR 0 6
5452: PPUSH
5453: LD_VAR 0 6
5457: PUSH
5458: LD_INT 1
5460: PLUS
5461: PPUSH
5462: LD_VAR 0 5
5466: PUSH
5467: LD_VAR 0 4
5471: ARRAY
5472: PUSH
5473: LD_INT 1
5475: ARRAY
5476: PUSH
5477: LD_VAR 0 5
5481: PUSH
5482: LD_VAR 0 4
5486: ARRAY
5487: PUSH
5488: LD_INT 2
5490: ARRAY
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PPUSH
5496: CALL_OW 1
5500: ST_TO_ADDR
// end ;
5501: GO 5404
5503: POP
5504: POP
// ComStop ( bulldozer ) ;
5505: LD_VAR 0 1
5509: PPUSH
5510: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5514: LD_ADDR_VAR 0 7
5518: PUSH
5519: LD_VAR 0 1
5523: PPUSH
5524: CALL_OW 250
5528: PUSH
5529: LD_VAR 0 1
5533: PPUSH
5534: CALL_OW 251
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: ST_TO_ADDR
// for i = tmp downto 1 do
5543: LD_ADDR_VAR 0 4
5547: PUSH
5548: DOUBLE
5549: LD_VAR 0 6
5553: INC
5554: ST_TO_ADDR
5555: LD_INT 1
5557: PUSH
5558: FOR_DOWNTO
5559: IFFALSE 5647
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5561: LD_ADDR_VAR 0 7
5565: PUSH
5566: LD_VAR 0 7
5570: PUSH
5571: LD_INT 1
5573: ARRAY
5574: PPUSH
5575: LD_VAR 0 7
5579: PUSH
5580: LD_INT 2
5582: ARRAY
5583: PPUSH
5584: LD_VAR 0 6
5588: PPUSH
5589: CALL 5750 0 3
5593: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5594: LD_VAR 0 1
5598: PPUSH
5599: LD_VAR 0 7
5603: PUSH
5604: LD_INT 1
5606: ARRAY
5607: PPUSH
5608: LD_VAR 0 7
5612: PUSH
5613: LD_INT 2
5615: ARRAY
5616: PPUSH
5617: CALL 5654 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5621: LD_ADDR_VAR 0 6
5625: PUSH
5626: LD_VAR 0 6
5630: PPUSH
5631: LD_VAR 0 7
5635: PUSH
5636: LD_INT 3
5638: ARRAY
5639: PPUSH
5640: CALL_OW 3
5644: ST_TO_ADDR
// end ;
5645: GO 5558
5647: POP
5648: POP
// end ;
5649: LD_VAR 0 3
5653: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5654: LD_INT 0
5656: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5657: LD_VAR 0 2
5661: PPUSH
5662: LD_VAR 0 3
5666: PPUSH
5667: CALL_OW 351
5671: PUSH
5672: LD_VAR 0 2
5676: PPUSH
5677: LD_VAR 0 3
5681: PPUSH
5682: CALL_OW 554
5686: AND
5687: PUSH
5688: LD_VAR 0 2
5692: PPUSH
5693: LD_VAR 0 3
5697: PPUSH
5698: CALL_OW 488
5702: AND
5703: PUSH
5704: LD_VAR 0 2
5708: PPUSH
5709: LD_VAR 0 3
5713: PPUSH
5714: CALL_OW 428
5718: PUSH
5719: LD_INT 1
5721: NEG
5722: EQUAL
5723: AND
5724: IFFALSE 5745
// AddComMoveXY ( bulldozer , x , y ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: LD_VAR 0 3
5740: PPUSH
5741: CALL_OW 171
// end ;
5745: LD_VAR 0 4
5749: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5750: LD_INT 0
5752: PPUSH
5753: PPUSH
5754: PPUSH
5755: PPUSH
5756: PPUSH
5757: PPUSH
5758: PPUSH
// dist := 99999 ;
5759: LD_ADDR_VAR 0 6
5763: PUSH
5764: LD_INT 99999
5766: ST_TO_ADDR
// for i = 1 to list do
5767: LD_ADDR_VAR 0 5
5771: PUSH
5772: DOUBLE
5773: LD_INT 1
5775: DEC
5776: ST_TO_ADDR
5777: LD_VAR 0 3
5781: PUSH
5782: FOR_TO
5783: IFFALSE 5921
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5785: LD_ADDR_VAR 0 7
5789: PUSH
5790: LD_VAR 0 1
5794: PPUSH
5795: LD_VAR 0 2
5799: PPUSH
5800: LD_VAR 0 3
5804: PUSH
5805: LD_VAR 0 5
5809: ARRAY
5810: PUSH
5811: LD_INT 1
5813: ARRAY
5814: PPUSH
5815: LD_VAR 0 3
5819: PUSH
5820: LD_VAR 0 5
5824: ARRAY
5825: PUSH
5826: LD_INT 2
5828: ARRAY
5829: PPUSH
5830: CALL_OW 298
5834: ST_TO_ADDR
// if d = 0 then
5835: LD_VAR 0 7
5839: PUSH
5840: LD_INT 0
5842: EQUAL
5843: IFFALSE 5847
// continue ;
5845: GO 5782
// if d < dist then
5847: LD_VAR 0 7
5851: PUSH
5852: LD_VAR 0 6
5856: LESS
5857: IFFALSE 5919
// begin _x := list [ i ] [ 1 ] ;
5859: LD_ADDR_VAR 0 8
5863: PUSH
5864: LD_VAR 0 3
5868: PUSH
5869: LD_VAR 0 5
5873: ARRAY
5874: PUSH
5875: LD_INT 1
5877: ARRAY
5878: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5879: LD_ADDR_VAR 0 9
5883: PUSH
5884: LD_VAR 0 3
5888: PUSH
5889: LD_VAR 0 5
5893: ARRAY
5894: PUSH
5895: LD_INT 2
5897: ARRAY
5898: ST_TO_ADDR
// _i := i ;
5899: LD_ADDR_VAR 0 10
5903: PUSH
5904: LD_VAR 0 5
5908: ST_TO_ADDR
// dist := d ;
5909: LD_ADDR_VAR 0 6
5913: PUSH
5914: LD_VAR 0 7
5918: ST_TO_ADDR
// end ; end ;
5919: GO 5782
5921: POP
5922: POP
// result := [ _x , _y , _i , dist ] ;
5923: LD_ADDR_VAR 0 4
5927: PUSH
5928: LD_VAR 0 8
5932: PUSH
5933: LD_VAR 0 9
5937: PUSH
5938: LD_VAR 0 10
5942: PUSH
5943: LD_VAR 0 6
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: ST_TO_ADDR
// end ;
5954: LD_VAR 0 4
5958: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5959: LD_INT 0
5961: PPUSH
5962: PPUSH
// for i = 1 to 72 do
5963: LD_ADDR_VAR 0 5
5967: PUSH
5968: DOUBLE
5969: LD_INT 1
5971: DEC
5972: ST_TO_ADDR
5973: LD_INT 72
5975: PUSH
5976: FOR_TO
5977: IFFALSE 6031
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5979: LD_VAR 0 5
5983: PPUSH
5984: LD_VAR 0 1
5988: PPUSH
5989: CALL_OW 321
5993: PUSH
5994: LD_INT 1
5996: EQUAL
5997: PUSH
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_VAR 0 3
6007: PPUSH
6008: CALL_OW 482
6012: AND
6013: IFFALSE 6029
// AddComResearch ( lab , i ) ;
6015: LD_VAR 0 2
6019: PPUSH
6020: LD_VAR 0 5
6024: PPUSH
6025: CALL_OW 184
6029: GO 5976
6031: POP
6032: POP
// end ;
6033: LD_VAR 0 4
6037: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6038: LD_INT 0
6040: PPUSH
6041: PPUSH
6042: PPUSH
6043: PPUSH
6044: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6045: LD_ADDR_VAR 0 7
6049: PUSH
6050: LD_VAR 0 2
6054: PPUSH
6055: CALL_OW 313
6059: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6060: LD_ADDR_VAR 0 8
6064: PUSH
6065: LD_VAR 0 3
6069: PPUSH
6070: LD_INT 22
6072: PUSH
6073: LD_VAR 0 1
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: LD_INT 25
6084: PUSH
6085: LD_INT 2
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: LD_INT 24
6094: PUSH
6095: LD_INT 750
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: PUSH
6102: LD_INT 3
6104: PUSH
6105: LD_INT 54
6107: PUSH
6108: EMPTY
6109: LIST
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 70
6125: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6126: LD_ADDR_VAR 0 5
6130: PUSH
6131: LD_VAR 0 3
6135: PPUSH
6136: LD_INT 22
6138: PUSH
6139: LD_VAR 0 1
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 21
6150: PUSH
6151: LD_INT 3
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 3
6160: PUSH
6161: LD_INT 24
6163: PUSH
6164: LD_INT 1000
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: PUSH
6180: EMPTY
6181: LIST
6182: PPUSH
6183: CALL_OW 70
6187: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6188: LD_VAR 0 5
6192: NOT
6193: PUSH
6194: LD_INT 22
6196: PUSH
6197: LD_VAR 0 1
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 25
6208: PUSH
6209: LD_INT 2
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 24
6218: PUSH
6219: LD_INT 250
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: PPUSH
6231: CALL_OW 69
6235: NOT
6236: AND
6237: IFFALSE 6241
// exit ;
6239: GO 6337
// if buildingsList and engineerOkInside then
6241: LD_VAR 0 5
6245: PUSH
6246: LD_VAR 0 7
6250: AND
6251: IFFALSE 6277
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6253: LD_VAR 0 7
6257: PPUSH
6258: LD_INT 25
6260: PUSH
6261: LD_INT 2
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PPUSH
6268: CALL_OW 72
6272: PPUSH
6273: CALL_OW 122
// if buildingsList and engineerOkOutside then
6277: LD_VAR 0 5
6281: PUSH
6282: LD_VAR 0 8
6286: AND
6287: IFFALSE 6307
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6289: LD_VAR 0 8
6293: PPUSH
6294: LD_VAR 0 5
6298: PUSH
6299: LD_INT 1
6301: ARRAY
6302: PPUSH
6303: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6307: LD_VAR 0 5
6311: PUSH
6312: LD_INT 0
6314: EQUAL
6315: PUSH
6316: LD_VAR 0 8
6320: AND
6321: IFFALSE 6337
// ComEnterUnit ( engineerOkOutside , building ) ;
6323: LD_VAR 0 8
6327: PPUSH
6328: LD_VAR 0 2
6332: PPUSH
6333: CALL_OW 120
// end ;
6337: LD_VAR 0 4
6341: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6342: LD_INT 0
6344: PPUSH
6345: PPUSH
6346: PPUSH
6347: PPUSH
6348: PPUSH
6349: PPUSH
6350: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6351: LD_ADDR_VAR 0 6
6355: PUSH
6356: LD_INT 22
6358: PUSH
6359: LD_VAR 0 1
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: PUSH
6368: LD_INT 25
6370: PUSH
6371: LD_INT 4
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 23
6380: PUSH
6381: LD_INT 2
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 24
6390: PUSH
6391: LD_INT 251
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 69
6408: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6409: LD_ADDR_VAR 0 7
6413: PUSH
6414: LD_VAR 0 3
6418: PPUSH
6419: LD_INT 22
6421: PUSH
6422: LD_VAR 0 1
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 23
6433: PUSH
6434: LD_INT 2
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 25
6443: PUSH
6444: LD_INT 4
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 50
6453: PUSH
6454: EMPTY
6455: LIST
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: PPUSH
6463: CALL_OW 70
6467: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6468: LD_ADDR_VAR 0 8
6472: PUSH
6473: LD_VAR 0 3
6477: PPUSH
6478: LD_INT 22
6480: PUSH
6481: LD_VAR 0 1
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: LD_INT 21
6492: PUSH
6493: LD_INT 1
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 3
6502: PUSH
6503: LD_INT 25
6505: PUSH
6506: LD_INT 3
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: LD_INT 3
6519: PUSH
6520: LD_INT 24
6522: PUSH
6523: LD_INT 750
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: PPUSH
6540: CALL_OW 70
6544: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6545: LD_ADDR_VAR 0 9
6549: PUSH
6550: LD_VAR 0 2
6554: PPUSH
6555: LD_INT 22
6557: PUSH
6558: LD_VAR 0 1
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PUSH
6567: LD_INT 21
6569: PUSH
6570: LD_INT 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: LD_INT 3
6579: PUSH
6580: LD_INT 25
6582: PUSH
6583: LD_INT 3
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 3
6596: PUSH
6597: LD_INT 24
6599: PUSH
6600: LD_INT 1000
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: PPUSH
6617: CALL_OW 70
6621: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6622: LD_VAR 0 8
6626: NOT
6627: PUSH
6628: LD_VAR 0 9
6632: NOT
6633: AND
6634: PUSH
6635: LD_VAR 0 6
6639: NOT
6640: AND
6641: IFFALSE 6645
// exit ;
6643: GO 6851
// if damageUnits and sciList then
6645: LD_VAR 0 8
6649: PUSH
6650: LD_VAR 0 6
6654: AND
6655: IFFALSE 6671
// ComMoveToArea ( damageUnits , healArea ) ;
6657: LD_VAR 0 8
6661: PPUSH
6662: LD_VAR 0 2
6666: PPUSH
6667: CALL_OW 113
// if unitsToHeal and sciList then
6671: LD_VAR 0 9
6675: PUSH
6676: LD_VAR 0 6
6680: AND
6681: IFFALSE 6692
// ComExitBuilding ( sciList ) ;
6683: LD_VAR 0 6
6687: PPUSH
6688: CALL_OW 122
// if unitsToHeal and sciListOutside then
6692: LD_VAR 0 9
6696: PUSH
6697: LD_VAR 0 7
6701: AND
6702: IFFALSE 6722
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6704: LD_VAR 0 7
6708: PPUSH
6709: LD_VAR 0 9
6713: PUSH
6714: LD_INT 1
6716: ARRAY
6717: PPUSH
6718: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6722: LD_VAR 0 8
6726: PUSH
6727: LD_INT 0
6729: EQUAL
6730: PUSH
6731: LD_VAR 0 9
6735: PUSH
6736: LD_INT 0
6738: EQUAL
6739: AND
6740: PUSH
6741: LD_VAR 0 7
6745: AND
6746: IFFALSE 6851
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6748: LD_ADDR_VAR 0 10
6752: PUSH
6753: LD_INT 22
6755: PUSH
6756: LD_VAR 0 1
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: LD_INT 21
6767: PUSH
6768: LD_INT 3
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PUSH
6775: LD_INT 30
6777: PUSH
6778: LD_INT 8
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: PPUSH
6790: CALL_OW 69
6794: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6795: LD_ADDR_VAR 0 11
6799: PUSH
6800: LD_INT 1
6802: PPUSH
6803: LD_VAR 0 10
6807: PPUSH
6808: CALL_OW 12
6812: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6813: LD_VAR 0 7
6817: PPUSH
6818: LD_INT 3
6820: PUSH
6821: LD_INT 60
6823: PUSH
6824: EMPTY
6825: LIST
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: PPUSH
6831: CALL_OW 72
6835: PPUSH
6836: LD_VAR 0 10
6840: PUSH
6841: LD_VAR 0 11
6845: ARRAY
6846: PPUSH
6847: CALL_OW 120
// end ; end ;
6851: LD_VAR 0 5
6855: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6856: LD_INT 0
6858: PPUSH
6859: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6860: LD_INT 22
6862: PUSH
6863: LD_VAR 0 1
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: LD_INT 21
6874: PUSH
6875: LD_INT 2
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 69
6890: PUSH
6891: LD_VAR 0 3
6895: LESSEQUAL
6896: IFFALSE 6963
// for i = 1 to vehCount do
6898: LD_ADDR_VAR 0 9
6902: PUSH
6903: DOUBLE
6904: LD_INT 1
6906: DEC
6907: ST_TO_ADDR
6908: LD_VAR 0 3
6912: PUSH
6913: FOR_TO
6914: IFFALSE 6961
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6916: LD_VAR 0 2
6920: PPUSH
6921: LD_VAR 0 7
6925: PPUSH
6926: LD_VAR 0 5
6930: PPUSH
6931: LD_VAR 0 6
6935: PPUSH
6936: LD_VAR 0 4
6940: PUSH
6941: LD_INT 1
6943: PPUSH
6944: LD_VAR 0 4
6948: PPUSH
6949: CALL_OW 12
6953: ARRAY
6954: PPUSH
6955: CALL_OW 185
6959: GO 6913
6961: POP
6962: POP
// end ;
6963: LD_VAR 0 8
6967: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6968: LD_INT 0
6970: PPUSH
6971: PPUSH
6972: PPUSH
6973: PPUSH
6974: PPUSH
6975: PPUSH
6976: PPUSH
6977: PPUSH
6978: PPUSH
6979: PPUSH
6980: PPUSH
// for i = 1 to medicCount do
6981: LD_ADDR_VAR 0 11
6985: PUSH
6986: DOUBLE
6987: LD_INT 1
6989: DEC
6990: ST_TO_ADDR
6991: LD_VAR 0 4
6995: PUSH
6996: FOR_TO
6997: IFFALSE 7079
// begin uc_side = side ;
6999: LD_ADDR_OWVAR 20
7003: PUSH
7004: LD_VAR 0 1
7008: ST_TO_ADDR
// uc_nation = nation ;
7009: LD_ADDR_OWVAR 21
7013: PUSH
7014: LD_VAR 0 2
7018: ST_TO_ADDR
// hc_name =  ;
7019: LD_ADDR_OWVAR 26
7023: PUSH
7024: LD_STRING 
7026: ST_TO_ADDR
// hc_gallery =  ;
7027: LD_ADDR_OWVAR 33
7031: PUSH
7032: LD_STRING 
7034: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7035: LD_INT 0
7037: PPUSH
7038: LD_INT 4
7040: PPUSH
7041: LD_VAR 0 5
7045: PPUSH
7046: CALL_OW 380
// un = CreateHuman ;
7050: LD_ADDR_VAR 0 13
7054: PUSH
7055: CALL_OW 44
7059: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7060: LD_VAR 0 13
7064: PPUSH
7065: LD_VAR 0 6
7069: PPUSH
7070: LD_INT 0
7072: PPUSH
7073: CALL_OW 49
// end ;
7077: GO 6996
7079: POP
7080: POP
// for i = 1 to soldierCount do
7081: LD_ADDR_VAR 0 11
7085: PUSH
7086: DOUBLE
7087: LD_INT 1
7089: DEC
7090: ST_TO_ADDR
7091: LD_VAR 0 3
7095: PUSH
7096: FOR_TO
7097: IFFALSE 7179
// begin uc_side = side ;
7099: LD_ADDR_OWVAR 20
7103: PUSH
7104: LD_VAR 0 1
7108: ST_TO_ADDR
// uc_nation = nation ;
7109: LD_ADDR_OWVAR 21
7113: PUSH
7114: LD_VAR 0 2
7118: ST_TO_ADDR
// hc_name =  ;
7119: LD_ADDR_OWVAR 26
7123: PUSH
7124: LD_STRING 
7126: ST_TO_ADDR
// hc_gallery =  ;
7127: LD_ADDR_OWVAR 33
7131: PUSH
7132: LD_STRING 
7134: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7135: LD_INT 0
7137: PPUSH
7138: LD_INT 1
7140: PPUSH
7141: LD_VAR 0 5
7145: PPUSH
7146: CALL_OW 380
// un = CreateHuman ;
7150: LD_ADDR_VAR 0 13
7154: PUSH
7155: CALL_OW 44
7159: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7160: LD_VAR 0 13
7164: PPUSH
7165: LD_VAR 0 6
7169: PPUSH
7170: LD_INT 0
7172: PPUSH
7173: CALL_OW 49
// end ;
7177: GO 7096
7179: POP
7180: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7181: LD_ADDR_VAR 0 16
7185: PUSH
7186: LD_INT 22
7188: PUSH
7189: LD_VAR 0 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 2
7200: PUSH
7201: LD_INT 25
7203: PUSH
7204: LD_INT 1
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 25
7213: PUSH
7214: LD_INT 5
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 25
7223: PUSH
7224: LD_INT 8
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 25
7233: PUSH
7234: LD_INT 9
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PPUSH
7252: CALL_OW 69
7256: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7257: LD_ADDR_VAR 0 15
7261: PUSH
7262: LD_INT 22
7264: PUSH
7265: LD_VAR 0 1
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: LD_INT 25
7276: PUSH
7277: LD_INT 4
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PPUSH
7288: CALL_OW 69
7292: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7293: LD_VAR 0 15
7297: PPUSH
7298: LD_VAR 0 7
7302: PPUSH
7303: CALL_OW 113
// if strategy = 1 then
7307: LD_VAR 0 9
7311: PUSH
7312: LD_INT 1
7314: EQUAL
7315: IFFALSE 7763
// begin for i in soldiersOK_list do
7317: LD_ADDR_VAR 0 11
7321: PUSH
7322: LD_VAR 0 16
7326: PUSH
7327: FOR_IN
7328: IFFALSE 7392
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7330: LD_VAR 0 11
7334: PPUSH
7335: LD_INT 91
7337: PPUSH
7338: LD_INT 63
7340: PPUSH
7341: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7345: LD_VAR 0 11
7349: PPUSH
7350: LD_INT 101
7352: PPUSH
7353: LD_INT 53
7355: PPUSH
7356: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7360: LD_VAR 0 11
7364: PPUSH
7365: LD_INT 75
7367: PPUSH
7368: LD_INT 23
7370: PPUSH
7371: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7375: LD_VAR 0 11
7379: PPUSH
7380: LD_INT 78
7382: PPUSH
7383: LD_INT 8
7385: PPUSH
7386: CALL_OW 174
// end ;
7390: GO 7327
7392: POP
7393: POP
// wait ( 0 0$30 ) ;
7394: LD_INT 1050
7396: PPUSH
7397: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7401: LD_INT 35
7403: PPUSH
7404: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7408: LD_ADDR_VAR 0 14
7412: PUSH
7413: LD_INT 22
7415: PUSH
7416: LD_VAR 0 1
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: LD_INT 1
7427: PUSH
7428: LD_INT 3
7430: PUSH
7431: LD_INT 24
7433: PUSH
7434: LD_INT 550
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 24
7447: PUSH
7448: LD_INT 250
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PPUSH
7464: CALL_OW 69
7468: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7469: LD_ADDR_VAR 0 16
7473: PUSH
7474: LD_INT 22
7476: PUSH
7477: LD_VAR 0 1
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 25
7488: PUSH
7489: LD_INT 1
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 24
7498: PUSH
7499: LD_INT 1000
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: LIST
7510: PPUSH
7511: CALL_OW 69
7515: ST_TO_ADDR
// if medicCount then
7516: LD_VAR 0 4
7520: IFFALSE 7560
// begin if damageUnit_list then
7522: LD_VAR 0 14
7526: IFFALSE 7560
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7528: LD_VAR 0 14
7532: PPUSH
7533: LD_VAR 0 7
7537: PPUSH
7538: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7542: LD_VAR 0 4
7546: PPUSH
7547: LD_VAR 0 14
7551: PUSH
7552: LD_INT 1
7554: ARRAY
7555: PPUSH
7556: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7560: LD_ADDR_VAR 0 11
7564: PUSH
7565: LD_VAR 0 16
7569: PUSH
7570: FOR_IN
7571: IFFALSE 7747
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7573: LD_ADDR_VAR 0 19
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PPUSH
7590: CALL_OW 69
7594: PPUSH
7595: LD_VAR 0 11
7599: PPUSH
7600: CALL_OW 74
7604: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7605: LD_ADDR_VAR 0 20
7609: PUSH
7610: LD_INT 22
7612: PUSH
7613: LD_VAR 0 8
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 2
7624: PUSH
7625: LD_INT 59
7627: PUSH
7628: EMPTY
7629: LIST
7630: PUSH
7631: LD_INT 21
7633: PUSH
7634: LD_INT 1
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: LD_INT 21
7643: PUSH
7644: LD_INT 2
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: EMPTY
7662: LIST
7663: PPUSH
7664: CALL_OW 69
7668: PPUSH
7669: LD_VAR 0 11
7673: PPUSH
7674: CALL_OW 74
7678: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7679: LD_VAR 0 11
7683: PPUSH
7684: LD_VAR 0 19
7688: PPUSH
7689: CALL_OW 296
7693: PUSH
7694: LD_INT 8
7696: PLUS
7697: PUSH
7698: LD_VAR 0 11
7702: PPUSH
7703: LD_VAR 0 20
7707: PPUSH
7708: CALL_OW 296
7712: LESS
7713: IFFALSE 7731
// ComAttackUnit ( i , target1 ) else
7715: LD_VAR 0 11
7719: PPUSH
7720: LD_VAR 0 19
7724: PPUSH
7725: CALL_OW 115
7729: GO 7745
// ComAttackUnit ( i , target2 ) ;
7731: LD_VAR 0 11
7735: PPUSH
7736: LD_VAR 0 20
7740: PPUSH
7741: CALL_OW 115
// end ;
7745: GO 7570
7747: POP
7748: POP
// until not soldiersOK_list and not damageUnit_list ;
7749: LD_VAR 0 16
7753: NOT
7754: PUSH
7755: LD_VAR 0 14
7759: NOT
7760: AND
7761: IFFALSE 7401
// end ; if strategy = 2 then
7763: LD_VAR 0 9
7767: PUSH
7768: LD_INT 2
7770: EQUAL
7771: IFFALSE 8189
// begin for i in soldiersOK_list do
7773: LD_ADDR_VAR 0 11
7777: PUSH
7778: LD_VAR 0 16
7782: PUSH
7783: FOR_IN
7784: IFFALSE 7818
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7786: LD_VAR 0 11
7790: PPUSH
7791: LD_INT 91
7793: PPUSH
7794: LD_INT 63
7796: PPUSH
7797: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7801: LD_VAR 0 11
7805: PPUSH
7806: LD_INT 75
7808: PPUSH
7809: LD_INT 33
7811: PPUSH
7812: CALL_OW 174
// end ;
7816: GO 7783
7818: POP
7819: POP
// wait ( 0 0$10 ) ;
7820: LD_INT 350
7822: PPUSH
7823: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7827: LD_INT 105
7829: PPUSH
7830: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7834: LD_ADDR_VAR 0 14
7838: PUSH
7839: LD_INT 22
7841: PUSH
7842: LD_VAR 0 1
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 1
7853: PUSH
7854: LD_INT 3
7856: PUSH
7857: LD_INT 24
7859: PUSH
7860: LD_INT 550
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: PUSH
7871: LD_INT 24
7873: PUSH
7874: LD_INT 250
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: LIST
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PPUSH
7890: CALL_OW 69
7894: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7895: LD_ADDR_VAR 0 16
7899: PUSH
7900: LD_INT 22
7902: PUSH
7903: LD_VAR 0 1
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 25
7914: PUSH
7915: LD_INT 1
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 24
7924: PUSH
7925: LD_INT 1000
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: PPUSH
7937: CALL_OW 69
7941: ST_TO_ADDR
// if medicCount then
7942: LD_VAR 0 4
7946: IFFALSE 7986
// begin if damageUnit_list then
7948: LD_VAR 0 14
7952: IFFALSE 7986
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7954: LD_VAR 0 14
7958: PPUSH
7959: LD_VAR 0 7
7963: PPUSH
7964: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7968: LD_VAR 0 4
7972: PPUSH
7973: LD_VAR 0 14
7977: PUSH
7978: LD_INT 1
7980: ARRAY
7981: PPUSH
7982: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7986: LD_ADDR_VAR 0 11
7990: PUSH
7991: LD_VAR 0 16
7995: PUSH
7996: FOR_IN
7997: IFFALSE 8173
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7999: LD_ADDR_VAR 0 19
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 8
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PPUSH
8016: CALL_OW 69
8020: PPUSH
8021: LD_VAR 0 11
8025: PPUSH
8026: CALL_OW 74
8030: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8031: LD_ADDR_VAR 0 20
8035: PUSH
8036: LD_INT 22
8038: PUSH
8039: LD_VAR 0 8
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 2
8050: PUSH
8051: LD_INT 59
8053: PUSH
8054: EMPTY
8055: LIST
8056: PUSH
8057: LD_INT 21
8059: PUSH
8060: LD_INT 1
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 21
8069: PUSH
8070: LD_INT 2
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: EMPTY
8088: LIST
8089: PPUSH
8090: CALL_OW 69
8094: PPUSH
8095: LD_VAR 0 11
8099: PPUSH
8100: CALL_OW 74
8104: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8105: LD_VAR 0 11
8109: PPUSH
8110: LD_VAR 0 19
8114: PPUSH
8115: CALL_OW 296
8119: PUSH
8120: LD_INT 8
8122: PLUS
8123: PUSH
8124: LD_VAR 0 11
8128: PPUSH
8129: LD_VAR 0 20
8133: PPUSH
8134: CALL_OW 296
8138: LESS
8139: IFFALSE 8157
// ComAttackUnit ( i , target1 ) else
8141: LD_VAR 0 11
8145: PPUSH
8146: LD_VAR 0 19
8150: PPUSH
8151: CALL_OW 115
8155: GO 8171
// ComAttackUnit ( i , target2 ) ;
8157: LD_VAR 0 11
8161: PPUSH
8162: LD_VAR 0 20
8166: PPUSH
8167: CALL_OW 115
// end ;
8171: GO 7996
8173: POP
8174: POP
// until not soldiersOK_list and not damageUnit_list ;
8175: LD_VAR 0 16
8179: NOT
8180: PUSH
8181: LD_VAR 0 14
8185: NOT
8186: AND
8187: IFFALSE 7827
// end ; if medic_list then
8189: LD_VAR 0 15
8193: IFFALSE 8333
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8195: LD_ADDR_VAR 0 15
8199: PUSH
8200: LD_INT 22
8202: PUSH
8203: LD_VAR 0 1
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 25
8214: PUSH
8215: LD_INT 4
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 50
8224: PUSH
8225: EMPTY
8226: LIST
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: PPUSH
8233: CALL_OW 69
8237: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8238: LD_INT 35
8240: PPUSH
8241: CALL_OW 67
// for i in medic_list do
8245: LD_ADDR_VAR 0 11
8249: PUSH
8250: LD_VAR 0 15
8254: PUSH
8255: FOR_IN
8256: IFFALSE 8324
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8258: LD_VAR 0 11
8262: PPUSH
8263: CALL_OW 314
8267: NOT
8268: PUSH
8269: LD_VAR 0 11
8273: PPUSH
8274: LD_INT 4
8276: PPUSH
8277: CALL_OW 308
8281: NOT
8282: AND
8283: IFFALSE 8299
// ComMoveToArea ( i , RussianAttack ) else
8285: LD_VAR 0 11
8289: PPUSH
8290: LD_INT 4
8292: PPUSH
8293: CALL_OW 113
8297: GO 8322
// if IsInArea ( i , RussianAttack ) then
8299: LD_VAR 0 11
8303: PPUSH
8304: LD_INT 4
8306: PPUSH
8307: CALL_OW 308
8311: IFFALSE 8322
// RemoveUnit ( i ) ;
8313: LD_VAR 0 11
8317: PPUSH
8318: CALL_OW 64
8322: GO 8255
8324: POP
8325: POP
// until not medic_list ;
8326: LD_VAR 0 15
8330: NOT
8331: IFFALSE 8195
// end ; end ; end_of_file
8333: LD_VAR 0 10
8337: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8338: LD_INT 0
8340: PPUSH
8341: PPUSH
8342: PPUSH
8343: PPUSH
8344: PPUSH
// InGameOn ;
8345: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8349: LD_ADDR_VAR 0 3
8353: PUSH
8354: LD_EXP 8
8358: PUSH
8359: LD_EXP 9
8363: PUSH
8364: LD_EXP 10
8368: PUSH
8369: LD_EXP 11
8373: PUSH
8374: LD_EXP 12
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8386: LD_ADDR_VAR 0 4
8390: PUSH
8391: LD_INT 46
8393: PUSH
8394: LD_INT 45
8396: PUSH
8397: LD_INT 44
8399: PUSH
8400: LD_INT 43
8402: PUSH
8403: LD_INT 42
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8413: LD_ADDR_VAR 0 5
8417: PUSH
8418: LD_INT 14
8420: PUSH
8421: LD_INT 12
8423: PUSH
8424: LD_INT 10
8426: PUSH
8427: LD_INT 8
8429: PUSH
8430: LD_INT 6
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8440: LD_EXP 11
8444: PPUSH
8445: LD_INT 31
8447: PPUSH
8448: LD_INT 59
8450: PPUSH
8451: LD_INT 19
8453: PPUSH
8454: LD_INT 5
8456: PPUSH
8457: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8461: LD_INT 32
8463: PPUSH
8464: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8468: LD_INT 32
8470: PPUSH
8471: LD_INT 51
8473: PPUSH
8474: LD_INT 26
8476: PPUSH
8477: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8481: LD_INT 32
8483: PPUSH
8484: LD_INT 53
8486: PPUSH
8487: LD_INT 23
8489: PPUSH
8490: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8494: LD_INT 32
8496: PPUSH
8497: LD_INT 52
8499: PPUSH
8500: LD_INT 19
8502: PPUSH
8503: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8507: LD_INT 35
8509: PPUSH
8510: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8514: LD_INT 32
8516: PPUSH
8517: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8521: LD_INT 32
8523: PPUSH
8524: CALL_OW 250
8528: PUSH
8529: LD_INT 52
8531: EQUAL
8532: PUSH
8533: LD_INT 32
8535: PPUSH
8536: CALL_OW 251
8540: PUSH
8541: LD_INT 19
8543: EQUAL
8544: AND
8545: IFFALSE 8507
// ComExitVehicle ( JMM ) ;
8547: LD_EXP 1
8551: PPUSH
8552: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8556: LD_EXP 7
8560: PPUSH
8561: LD_EXP 1
8565: PPUSH
8566: CALL_OW 119
// wait ( 0 0$01 ) ;
8570: LD_INT 35
8572: PPUSH
8573: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8577: LD_EXP 1
8581: PPUSH
8582: LD_INT 46
8584: PPUSH
8585: LD_INT 10
8587: PPUSH
8588: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8592: LD_EXP 1
8596: PPUSH
8597: LD_EXP 7
8601: PPUSH
8602: CALL_OW 179
// wait ( 0 0$4 ) ;
8606: LD_INT 140
8608: PPUSH
8609: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8613: LD_EXP 1
8617: PPUSH
8618: LD_STRING D1-JMM-1
8620: PPUSH
8621: CALL_OW 88
// if not dialogue_skipped then
8625: LD_OWVAR 59
8629: NOT
8630: IFFALSE 9287
// begin for i := 1 to gammaSquad do
8632: LD_ADDR_VAR 0 2
8636: PUSH
8637: DOUBLE
8638: LD_INT 1
8640: DEC
8641: ST_TO_ADDR
8642: LD_VAR 0 3
8646: PUSH
8647: FOR_TO
8648: IFFALSE 8709
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8650: LD_VAR 0 3
8654: PUSH
8655: LD_VAR 0 2
8659: ARRAY
8660: PPUSH
8661: LD_VAR 0 4
8665: PUSH
8666: LD_VAR 0 2
8670: ARRAY
8671: PPUSH
8672: LD_VAR 0 5
8676: PUSH
8677: LD_VAR 0 2
8681: ARRAY
8682: PPUSH
8683: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8687: LD_VAR 0 3
8691: PUSH
8692: LD_VAR 0 2
8696: ARRAY
8697: PPUSH
8698: LD_EXP 1
8702: PPUSH
8703: CALL_OW 179
// end ;
8707: GO 8647
8709: POP
8710: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8711: LD_EXP 4
8715: PPUSH
8716: LD_INT 41
8718: PPUSH
8719: LD_INT 4
8721: PPUSH
8722: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8726: LD_EXP 4
8730: PPUSH
8731: LD_EXP 1
8735: PPUSH
8736: CALL_OW 179
// if Lisa = false and Bobby then
8740: LD_EXP 4
8744: PUSH
8745: LD_INT 0
8747: EQUAL
8748: PUSH
8749: LD_EXP 2
8753: AND
8754: IFFALSE 8785
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8756: LD_EXP 2
8760: PPUSH
8761: LD_INT 41
8763: PPUSH
8764: LD_INT 4
8766: PPUSH
8767: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8771: LD_EXP 2
8775: PPUSH
8776: LD_EXP 1
8780: PPUSH
8781: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8785: LD_EXP 4
8789: PUSH
8790: LD_INT 0
8792: EQUAL
8793: PUSH
8794: LD_EXP 2
8798: PUSH
8799: LD_INT 0
8801: EQUAL
8802: AND
8803: PUSH
8804: LD_EXP 3
8808: AND
8809: IFFALSE 8840
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8811: LD_EXP 3
8815: PPUSH
8816: LD_INT 41
8818: PPUSH
8819: LD_INT 4
8821: PPUSH
8822: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8826: LD_EXP 3
8830: PPUSH
8831: LD_EXP 1
8835: PPUSH
8836: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8840: LD_EXP 4
8844: PUSH
8845: LD_INT 0
8847: EQUAL
8848: PUSH
8849: LD_EXP 2
8853: PUSH
8854: LD_INT 0
8856: EQUAL
8857: AND
8858: PUSH
8859: LD_EXP 3
8863: PUSH
8864: LD_INT 0
8866: EQUAL
8867: AND
8868: IFFALSE 8899
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8870: LD_EXP 6
8874: PPUSH
8875: LD_INT 41
8877: PPUSH
8878: LD_INT 4
8880: PPUSH
8881: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8885: LD_EXP 6
8889: PPUSH
8890: LD_EXP 1
8894: PPUSH
8895: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8899: LD_EXP 7
8903: PPUSH
8904: LD_STRING D1-Brown-1
8906: PPUSH
8907: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8911: LD_EXP 1
8915: PPUSH
8916: LD_STRING D1-JMM-2
8918: PPUSH
8919: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8923: LD_EXP 7
8927: PPUSH
8928: LD_STRING D1-Brown-2
8930: PPUSH
8931: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8935: LD_EXP 1
8939: PPUSH
8940: LD_EXP 9
8944: PPUSH
8945: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8949: LD_EXP 9
8953: PPUSH
8954: LD_STRING D1-FSol1-2
8956: PPUSH
8957: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_EXP 8
8970: PPUSH
8971: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8975: LD_EXP 8
8979: PPUSH
8980: LD_STRING D1-Sol2-2
8982: PPUSH
8983: CALL_OW 88
// if Lisa then
8987: LD_EXP 4
8991: IFFALSE 9031
// begin ComTurnUnit ( JMM , Lisa ) ;
8993: LD_EXP 1
8997: PPUSH
8998: LD_EXP 4
9002: PPUSH
9003: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
9007: LD_EXP 4
9011: PPUSH
9012: LD_STRING D1-Lisa-2
9014: PPUSH
9015: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9019: LD_EXP 1
9023: PPUSH
9024: LD_STRING D1-JMM-3
9026: PPUSH
9027: CALL_OW 88
// end ; if Bobby then
9031: LD_EXP 2
9035: IFFALSE 9075
// begin ComTurnUnit ( JMM , Bobby ) ;
9037: LD_EXP 1
9041: PPUSH
9042: LD_EXP 2
9046: PPUSH
9047: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9051: LD_EXP 2
9055: PPUSH
9056: LD_STRING D1-Bobby-2
9058: PPUSH
9059: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9063: LD_EXP 1
9067: PPUSH
9068: LD_STRING D1-JMM-3
9070: PPUSH
9071: CALL_OW 88
// end ; if Cyrus then
9075: LD_EXP 3
9079: IFFALSE 9119
// begin ComTurnUnit ( JMM , Cyrus ) ;
9081: LD_EXP 1
9085: PPUSH
9086: LD_EXP 3
9090: PPUSH
9091: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9095: LD_EXP 3
9099: PPUSH
9100: LD_STRING D1-Cyrus-2
9102: PPUSH
9103: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9107: LD_EXP 1
9111: PPUSH
9112: LD_STRING D1-JMM-3
9114: PPUSH
9115: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9119: LD_EXP 1
9123: PPUSH
9124: LD_EXP 7
9128: PPUSH
9129: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9133: LD_EXP 1
9137: PPUSH
9138: LD_STRING D1-JMM-3a
9140: PPUSH
9141: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9145: LD_EXP 7
9149: PPUSH
9150: LD_INT 38
9152: PPUSH
9153: LD_INT 5
9155: PPUSH
9156: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9160: LD_EXP 7
9164: PPUSH
9165: LD_EXP 1
9169: PPUSH
9170: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9174: LD_EXP 1
9178: PPUSH
9179: LD_INT 40
9181: PPUSH
9182: LD_INT 7
9184: PPUSH
9185: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9189: LD_EXP 1
9193: PPUSH
9194: LD_EXP 7
9198: PPUSH
9199: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9203: LD_EXP 7
9207: PPUSH
9208: LD_STRING D1-Brown-3
9210: PPUSH
9211: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9215: LD_EXP 14
9219: PPUSH
9220: LD_STRING D1-Har-3
9222: PPUSH
9223: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9227: LD_EXP 1
9231: PPUSH
9232: LD_STRING D1-JMM-4
9234: PPUSH
9235: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9239: LD_EXP 14
9243: PPUSH
9244: LD_STRING D1-Har-4
9246: PPUSH
9247: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9251: LD_EXP 1
9255: PPUSH
9256: LD_STRING D1-JMM-5
9258: PPUSH
9259: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9263: LD_EXP 14
9267: PPUSH
9268: LD_STRING D1-Har-5
9270: PPUSH
9271: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9275: LD_EXP 1
9279: PPUSH
9280: LD_STRING D1-JMM-6
9282: PPUSH
9283: CALL_OW 88
// end ; InGameOff ;
9287: CALL_OW 9
// PrepareRussianConvoy ;
9291: CALL 3404 0 0
// ChangeMissionObjectives ( M1 ) ;
9295: LD_STRING M1
9297: PPUSH
9298: CALL_OW 337
// SaveForQuickRestart ;
9302: CALL_OW 22
// timerStatus = 1 ;
9306: LD_ADDR_EXP 29
9310: PUSH
9311: LD_INT 1
9313: ST_TO_ADDR
// startTimer = 1 ;
9314: LD_ADDR_EXP 30
9318: PUSH
9319: LD_INT 1
9321: ST_TO_ADDR
// bonusAvalaible = 1 ;
9322: LD_ADDR_EXP 44
9326: PUSH
9327: LD_INT 1
9329: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9330: LD_INT 105
9332: PPUSH
9333: CALL_OW 67
// DialogueOn ;
9337: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9341: LD_EXP 12
9345: PPUSH
9346: LD_STRING D9-Mech1-1
9348: PPUSH
9349: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9353: LD_EXP 1
9357: PPUSH
9358: LD_STRING D9-JMM-1
9360: PPUSH
9361: CALL_OW 88
// DialogueOff ;
9365: CALL_OW 7
// end ;
9369: LD_VAR 0 1
9373: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9374: LD_INT 47
9376: PPUSH
9377: LD_INT 1
9379: PPUSH
9380: CALL_OW 321
9384: PUSH
9385: LD_INT 2
9387: EQUAL
9388: PUSH
9389: LD_EXP 31
9393: NOT
9394: AND
9395: PUSH
9396: LD_INT 22
9398: PUSH
9399: LD_INT 1
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 21
9408: PUSH
9409: LD_INT 3
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 30
9418: PUSH
9419: LD_INT 3
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 57
9428: PUSH
9429: EMPTY
9430: LIST
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: PPUSH
9438: CALL_OW 69
9442: AND
9443: IFFALSE 9677
9445: GO 9447
9447: DISABLE
// begin factoryDialog := true ;
9448: LD_ADDR_EXP 31
9452: PUSH
9453: LD_INT 1
9455: ST_TO_ADDR
// if IsOk ( Campell ) then
9456: LD_EXP 12
9460: PPUSH
9461: CALL_OW 302
9465: IFFALSE 9481
// Say ( Campell , D10-Mech1-1 ) else
9467: LD_EXP 12
9471: PPUSH
9472: LD_STRING D10-Mech1-1
9474: PPUSH
9475: CALL_OW 88
9479: GO 9677
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9481: LD_INT 22
9483: PUSH
9484: LD_INT 1
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 21
9493: PUSH
9494: LD_INT 1
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 25
9503: PUSH
9504: LD_INT 3
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 26
9513: PUSH
9514: LD_INT 1
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: PPUSH
9527: CALL_OW 69
9531: PUSH
9532: LD_EXP 1
9536: PUSH
9537: EMPTY
9538: LIST
9539: DIFF
9540: IFFALSE 9614
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9542: LD_INT 22
9544: PUSH
9545: LD_INT 1
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 21
9554: PUSH
9555: LD_INT 1
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 25
9564: PUSH
9565: LD_INT 3
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 26
9574: PUSH
9575: LD_INT 1
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: PPUSH
9588: CALL_OW 69
9592: PUSH
9593: LD_EXP 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: DIFF
9601: PPUSH
9602: LD_STRING D10-Mech1-1
9604: PPUSH
9605: LD_STRING D10-Mech1-1
9607: PPUSH
9608: CALL 4606 0 3
9612: GO 9677
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9614: LD_INT 22
9616: PUSH
9617: LD_INT 1
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 21
9626: PUSH
9627: LD_INT 1
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: LD_INT 26
9636: PUSH
9637: LD_INT 1
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: LIST
9648: PUSH
9649: LD_INT 1
9651: ARRAY
9652: PPUSH
9653: CALL_OW 69
9657: PUSH
9658: LD_EXP 1
9662: PUSH
9663: EMPTY
9664: LIST
9665: DIFF
9666: PPUSH
9667: LD_STRING D10-Mech1-1
9669: PPUSH
9670: LD_STRING D10-Mech1-1
9672: PPUSH
9673: CALL 4606 0 3
// end ; end ;
9677: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9678: LD_INT 22
9680: PUSH
9681: LD_INT 1
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: LD_INT 30
9690: PUSH
9691: LD_INT 32
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PPUSH
9702: CALL_OW 69
9706: PUSH
9707: LD_EXP 32
9711: PUSH
9712: LD_INT 0
9714: EQUAL
9715: AND
9716: IFFALSE 9952
9718: GO 9720
9720: DISABLE
// begin if IsOk ( Claptopn ) then
9721: LD_EXP 11
9725: PPUSH
9726: CALL_OW 302
9730: IFFALSE 9746
// Say ( Claptopn , D9b-Eng1-1 ) else
9732: LD_EXP 11
9736: PPUSH
9737: LD_STRING D9b-Eng1-1
9739: PPUSH
9740: CALL_OW 88
9744: GO 9938
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9746: LD_INT 22
9748: PUSH
9749: LD_INT 1
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 21
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 25
9768: PUSH
9769: LD_INT 3
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 26
9778: PUSH
9779: LD_INT 1
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: PPUSH
9792: CALL_OW 69
9796: PUSH
9797: LD_EXP 1
9801: PUSH
9802: EMPTY
9803: LIST
9804: DIFF
9805: IFFALSE 9879
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9807: LD_INT 22
9809: PUSH
9810: LD_INT 1
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 21
9819: PUSH
9820: LD_INT 1
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 25
9829: PUSH
9830: LD_INT 2
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 26
9839: PUSH
9840: LD_INT 1
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: PPUSH
9853: CALL_OW 69
9857: PUSH
9858: LD_EXP 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: DIFF
9866: PPUSH
9867: LD_STRING D9b-Eng1-1
9869: PPUSH
9870: LD_STRING D9b-Eng1-11
9872: PPUSH
9873: CALL 4606 0 3
9877: GO 9938
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9879: LD_INT 22
9881: PUSH
9882: LD_INT 1
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 21
9891: PUSH
9892: LD_INT 1
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: LD_INT 26
9901: PUSH
9902: LD_INT 1
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: LIST
9913: PPUSH
9914: CALL_OW 69
9918: PUSH
9919: LD_EXP 1
9923: PUSH
9924: EMPTY
9925: LIST
9926: DIFF
9927: PPUSH
9928: LD_STRING D9b-Eng1-1
9930: PPUSH
9931: LD_STRING D9b-Eng1-1
9933: PPUSH
9934: CALL 4606 0 3
// end ; if energyVDialog = 0 then
9938: LD_EXP 33
9942: PUSH
9943: LD_INT 0
9945: EQUAL
9946: IFFALSE 9952
// EnergyDialog ;
9948: CALL 5011 0 0
// end ;
9952: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9953: LD_EXP 34
9957: PUSH
9958: LD_INT 1
9960: EQUAL
9961: PUSH
9962: LD_EXP 35
9966: PUSH
9967: LD_INT 1
9969: EQUAL
9970: AND
9971: IFFALSE 9983
9973: GO 9975
9975: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9976: LD_STRING M1a
9978: PPUSH
9979: CALL_OW 337
9983: END
// every 3 3$0 do
9984: GO 9986
9986: DISABLE
// PrepareFirstAttack ;
9987: CALL 4212 0 0
9991: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9992: LD_INT 22
9994: PUSH
9995: LD_INT 5
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 21
10004: PUSH
10005: LD_INT 1
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: LD_INT 24
10017: PUSH
10018: LD_INT 250
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: LIST
10033: PPUSH
10034: CALL_OW 69
10038: PUSH
10039: LD_INT 0
10041: GREATER
10042: PUSH
10043: LD_EXP 23
10047: PUSH
10048: LD_INT 1
10050: EQUAL
10051: AND
10052: IFFALSE 10353
10054: GO 10056
10056: DISABLE
10057: LD_INT 0
10059: PPUSH
// begin firstRussianAttack = 2 ;
10060: LD_ADDR_EXP 23
10064: PUSH
10065: LD_INT 2
10067: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10068: LD_INT 22
10070: PUSH
10071: LD_INT 5
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: LD_INT 21
10080: PUSH
10081: LD_INT 1
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: PPUSH
10092: CALL_OW 69
10096: PPUSH
10097: LD_INT 125
10099: PPUSH
10100: LD_INT 98
10102: PPUSH
10103: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10107: LD_INT 22
10109: PUSH
10110: LD_INT 1
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: LD_INT 21
10119: PUSH
10120: LD_INT 1
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PPUSH
10131: CALL_OW 69
10135: PUSH
10136: LD_EXP 1
10140: PUSH
10141: LD_EXP 7
10145: PUSH
10146: LD_EXP 4
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: DIFF
10156: PPUSH
10157: LD_STRING DAtt1-Sol1-1
10159: PPUSH
10160: LD_STRING DAtt1-FSol1-1
10162: PPUSH
10163: CALL 4606 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10167: LD_EXP 1
10171: PPUSH
10172: LD_STRING DAtt1-JMM-1
10174: PPUSH
10175: CALL_OW 88
// if Lisa then
10179: LD_EXP 4
10183: IFFALSE 10199
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10185: LD_EXP 4
10189: PPUSH
10190: LD_STRING DAtt1a-Lisa-1
10192: PPUSH
10193: CALL_OW 88
10197: GO 10270
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10199: LD_INT 22
10201: PUSH
10202: LD_INT 1
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 21
10211: PUSH
10212: LD_INT 1
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 26
10221: PUSH
10222: LD_INT 1
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL_OW 69
10238: PUSH
10239: LD_EXP 1
10243: PUSH
10244: LD_EXP 7
10248: PUSH
10249: LD_EXP 4
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: LIST
10258: DIFF
10259: PPUSH
10260: LD_STRING DAtt1a-Sol1-1
10262: PPUSH
10263: LD_STRING DAtt1-FSol1-1
10265: PPUSH
10266: CALL 4606 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10270: LD_EXP 1
10274: PPUSH
10275: LD_STRING DAtt1a-JMM-1
10277: PPUSH
10278: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10282: LD_INT 22
10284: PUSH
10285: LD_INT 1
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 21
10294: PUSH
10295: LD_INT 1
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 26
10304: PUSH
10305: LD_INT 1
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: LIST
10316: PPUSH
10317: CALL_OW 69
10321: PUSH
10322: LD_EXP 1
10326: PUSH
10327: LD_EXP 7
10331: PUSH
10332: LD_EXP 4
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: LIST
10341: DIFF
10342: PPUSH
10343: LD_STRING DAtt1b-Sol1-1
10345: PPUSH
10346: LD_STRING DAtt1a-Sol1-1
10348: PPUSH
10349: CALL 4606 0 3
// end ;
10353: PPOPN 1
10355: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10356: LD_EXP 23
10360: PUSH
10361: LD_INT 2
10363: EQUAL
10364: PUSH
10365: LD_INT 5
10367: PPUSH
10368: LD_INT 22
10370: PUSH
10371: LD_INT 5
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 21
10380: PUSH
10381: LD_INT 1
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PPUSH
10392: CALL_OW 70
10396: AND
10397: IFFALSE 10455
10399: GO 10401
10401: DISABLE
10402: LD_INT 0
10404: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10405: LD_ADDR_VAR 0 1
10409: PUSH
10410: LD_INT 22
10412: PUSH
10413: LD_INT 5
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: LD_INT 21
10422: PUSH
10423: LD_INT 1
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 69
10438: PUSH
10439: FOR_IN
10440: IFFALSE 10453
// RemoveUnit ( i ) ;
10442: LD_VAR 0 1
10446: PPUSH
10447: CALL_OW 64
10451: GO 10439
10453: POP
10454: POP
// end ;
10455: PPOPN 1
10457: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10458: LD_INT 22
10460: PUSH
10461: LD_INT 5
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: PPUSH
10471: CALL_OW 69
10475: PUSH
10476: LD_INT 0
10478: EQUAL
10479: PUSH
10480: LD_EXP 23
10484: PUSH
10485: LD_INT 2
10487: EQUAL
10488: AND
10489: IFFALSE 10502
10491: GO 10493
10493: DISABLE
// firstRussianAttack = 3 ;
10494: LD_ADDR_EXP 23
10498: PUSH
10499: LD_INT 3
10501: ST_TO_ADDR
10502: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10503: LD_EXP 28
10507: PUSH
10508: LD_INT 0
10510: EQUAL
10511: IFFALSE 10592
10513: GO 10515
10515: DISABLE
// begin timerStatus = 4 ;
10516: LD_ADDR_EXP 29
10520: PUSH
10521: LD_INT 4
10523: ST_TO_ADDR
// DialogueOn ;
10524: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10528: LD_EXP 13
10532: PPUSH
10533: LD_STRING D2-Don-1
10535: PPUSH
10536: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10540: LD_EXP 1
10544: PPUSH
10545: LD_STRING D2-JMM-1
10547: PPUSH
10548: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10552: LD_EXP 13
10556: PPUSH
10557: LD_STRING D2-Don-2
10559: PPUSH
10560: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10564: LD_EXP 1
10568: PPUSH
10569: LD_STRING D2-JMM-2
10571: PPUSH
10572: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10576: LD_EXP 13
10580: PPUSH
10581: LD_STRING D2-Don-3
10583: PPUSH
10584: CALL_OW 94
// DialogueOff ;
10588: CALL_OW 7
// end ;
10592: END
// every 12 12$0 do var tmp ;
10593: GO 10595
10595: DISABLE
10596: LD_INT 0
10598: PPUSH
// begin PrepareDonaldsonArmy ;
10599: CALL 1187 0 0
// CenterNowOnUnits ( Donaldson ) ;
10603: LD_EXP 13
10607: PPUSH
10608: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10612: LD_INT 22
10614: PUSH
10615: LD_INT 6
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PPUSH
10622: CALL_OW 69
10626: NOT
10627: IFFALSE 10643
// begin wait ( 3 ) ;
10629: LD_INT 3
10631: PPUSH
10632: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10636: LD_STRING ACH_BASE
10638: PPUSH
10639: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
10643: LD_ADDR_VAR 0 1
10647: PUSH
10648: LD_INT 22
10650: PUSH
10651: LD_INT 4
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 21
10660: PUSH
10661: LD_INT 1
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 26
10670: PUSH
10671: LD_INT 1
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 25
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: PPUSH
10694: CALL_OW 69
10698: PUSH
10699: LD_EXP 5
10703: PUSH
10704: EMPTY
10705: LIST
10706: DIFF
10707: ST_TO_ADDR
// DialogueOn ;
10708: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10712: LD_VAR 0 1
10716: PPUSH
10717: LD_STRING D3-Sol1-1
10719: PPUSH
10720: LD_STRING D3-Sol1-1
10722: PPUSH
10723: CALL 4606 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
10727: LD_INT 22
10729: PUSH
10730: LD_INT 4
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 21
10739: PUSH
10740: LD_INT 1
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 26
10749: PUSH
10750: LD_INT 1
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 25
10759: PUSH
10760: LD_INT 3
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: PPUSH
10773: CALL_OW 69
10777: PPUSH
10778: LD_STRING D3-Sol2-1
10780: PPUSH
10781: LD_STRING D3-Sol2-1
10783: PPUSH
10784: CALL 4606 0 3
// if Frank then
10788: LD_EXP 5
10792: IFFALSE 10806
// Say ( Frank , D3-Frank-1 ) ;
10794: LD_EXP 5
10798: PPUSH
10799: LD_STRING D3-Frank-1
10801: PPUSH
10802: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10806: LD_EXP 13
10810: PPUSH
10811: LD_STRING D3-Don-1
10813: PPUSH
10814: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10818: LD_EXP 13
10822: PPUSH
10823: LD_STRING D3-Don-1a
10825: PPUSH
10826: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10830: LD_EXP 1
10834: PPUSH
10835: LD_STRING D3-JMM-1
10837: PPUSH
10838: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10842: LD_EXP 13
10846: PPUSH
10847: LD_STRING D3-Don-2
10849: PPUSH
10850: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10854: LD_INT 22
10856: PUSH
10857: LD_INT 6
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 21
10866: PUSH
10867: LD_INT 1
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PPUSH
10878: CALL_OW 69
10882: IFFALSE 11020
// begin Say ( JMM , D3-JMM-2 ) ;
10884: LD_EXP 1
10888: PPUSH
10889: LD_STRING D3-JMM-2
10891: PPUSH
10892: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10896: LD_EXP 13
10900: PPUSH
10901: LD_STRING D3-Don-3
10903: PPUSH
10904: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10908: LD_EXP 1
10912: PPUSH
10913: LD_STRING D3-JMM-3
10915: PPUSH
10916: CALL_OW 88
// if IsOK ( Frank ) then
10920: LD_EXP 5
10924: PPUSH
10925: CALL_OW 302
10929: IFFALSE 10943
// Say ( Frank , D3-Frank-3 ) ;
10931: LD_EXP 5
10935: PPUSH
10936: LD_STRING D3-Frank-3
10938: PPUSH
10939: CALL_OW 88
// DialogueOff ;
10943: CALL_OW 7
// if IsOk ( Frank ) then
10947: LD_EXP 5
10951: PPUSH
10952: CALL_OW 302
10956: IFFALSE 11018
// begin SetSide ( Frank , 0 ) ;
10958: LD_EXP 5
10962: PPUSH
10963: LD_INT 0
10965: PPUSH
10966: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10970: LD_EXP 5
10974: PPUSH
10975: LD_INT 12
10977: PPUSH
10978: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10982: LD_EXP 5
10986: PPUSH
10987: LD_STRING 04t_Frank
10989: PPUSH
10990: CALL_OW 38
// wait ( 0 0$3 ) ;
10994: LD_INT 105
10996: PPUSH
10997: CALL_OW 67
// frankScoutBase = 1 ;
11001: LD_ADDR_EXP 25
11005: PUSH
11006: LD_INT 1
11008: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11009: LD_EXP 5
11013: PPUSH
11014: CALL_OW 64
// end ; end else
11018: GO 11107
// begin Say ( JMM , D3-JMM-4 ) ;
11020: LD_EXP 1
11024: PPUSH
11025: LD_STRING D3-JMM-4
11027: PPUSH
11028: CALL_OW 88
// DialogueOff ;
11032: CALL_OW 7
// if IsOk ( Frank ) then
11036: LD_EXP 5
11040: PPUSH
11041: CALL_OW 302
11045: IFFALSE 11107
// begin SetSide ( Frank , 0 ) ;
11047: LD_EXP 5
11051: PPUSH
11052: LD_INT 0
11054: PPUSH
11055: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11059: LD_EXP 5
11063: PPUSH
11064: LD_INT 12
11066: PPUSH
11067: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
11071: LD_EXP 5
11075: PPUSH
11076: LD_STRING 04t_Frank
11078: PPUSH
11079: CALL_OW 38
// wait ( 0 0$3 ) ;
11083: LD_INT 105
11085: PPUSH
11086: CALL_OW 67
// frankScoutBase = 1 ;
11090: LD_ADDR_EXP 25
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11098: LD_EXP 5
11102: PPUSH
11103: CALL_OW 64
// end ; end ; end ;
11107: PPOPN 1
11109: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11110: LD_EXP 13
11114: PPUSH
11115: CALL_OW 255
11119: PUSH
11120: LD_INT 4
11122: EQUAL
11123: PUSH
11124: LD_EXP 13
11128: PPUSH
11129: CALL_OW 302
11133: AND
11134: IFFALSE 11374
11136: GO 11138
11138: DISABLE
11139: LD_INT 0
11141: PPUSH
11142: PPUSH
// begin wait ( 5 5$00 ) ;
11143: LD_INT 10500
11145: PPUSH
11146: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11150: LD_EXP 13
11154: PPUSH
11155: CALL_OW 255
11159: PUSH
11160: LD_INT 1
11162: EQUAL
11163: PUSH
11164: LD_EXP 13
11168: PPUSH
11169: CALL_OW 301
11173: OR
11174: IFFALSE 11178
// exit ;
11176: GO 11374
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11178: LD_EXP 13
11182: PPUSH
11183: LD_STRING D3b-Don-1
11185: PPUSH
11186: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11190: LD_ADDR_EXP 41
11194: PUSH
11195: LD_INT 1
11197: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11198: LD_ADDR_VAR 0 2
11202: PUSH
11203: LD_INT 22
11205: PUSH
11206: LD_INT 4
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PPUSH
11213: CALL_OW 69
11217: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11218: LD_INT 35
11220: PPUSH
11221: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11225: LD_VAR 0 2
11229: NOT
11230: PUSH
11231: LD_INT 22
11233: PUSH
11234: LD_INT 6
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 101
11243: PUSH
11244: LD_INT 1
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PPUSH
11255: CALL_OW 69
11259: OR
11260: IFFALSE 11218
// if not tmp then
11262: LD_VAR 0 2
11266: NOT
11267: IFFALSE 11271
// exit ;
11269: GO 11374
// for i in tmp do
11271: LD_ADDR_VAR 0 1
11275: PUSH
11276: LD_VAR 0 2
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11301
// ComAgressiveMove ( i , 52 , 64 ) ;
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_INT 52
11291: PPUSH
11292: LD_INT 64
11294: PPUSH
11295: CALL_OW 114
11299: GO 11281
11301: POP
11302: POP
// wait ( 0 0$10 ) ;
11303: LD_INT 350
11305: PPUSH
11306: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11310: LD_ADDR_VAR 0 1
11314: PUSH
11315: LD_INT 22
11317: PUSH
11318: LD_INT 4
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PPUSH
11325: CALL_OW 69
11329: PUSH
11330: LD_EXP 5
11334: DIFF
11335: PUSH
11336: FOR_IN
11337: IFFALSE 11353
// SetSide ( i , 1 ) ;
11339: LD_VAR 0 1
11343: PPUSH
11344: LD_INT 1
11346: PPUSH
11347: CALL_OW 235
11351: GO 11336
11353: POP
11354: POP
// if IsLive ( Donaldson ) then
11355: LD_EXP 13
11359: PPUSH
11360: CALL_OW 300
11364: IFFALSE 11374
// saveDonaldson := 1 ;
11366: LD_ADDR_EXP 24
11370: PUSH
11371: LD_INT 1
11373: ST_TO_ADDR
// end ;
11374: PPOPN 2
11376: END
// every 0 0$1 trigger not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11377: LD_EXP 24
11381: NOT
11382: PUSH
11383: LD_EXP 41
11387: NOT
11388: AND
11389: PUSH
11390: LD_INT 26
11392: PPUSH
11393: LD_INT 22
11395: PUSH
11396: LD_INT 1
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PPUSH
11403: CALL_OW 70
11407: PUSH
11408: LD_EXP 13
11412: PPUSH
11413: LD_EXP 1
11417: PPUSH
11418: CALL_OW 296
11422: PUSH
11423: LD_INT 6
11425: LESS
11426: OR
11427: AND
11428: IFFALSE 11483
11430: GO 11432
11432: DISABLE
11433: LD_INT 0
11435: PPUSH
// begin saveDonaldson := 1 ;
11436: LD_ADDR_EXP 24
11440: PUSH
11441: LD_INT 1
11443: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11444: LD_ADDR_VAR 0 1
11448: PUSH
11449: LD_INT 22
11451: PUSH
11452: LD_INT 4
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PPUSH
11459: CALL_OW 69
11463: PUSH
11464: FOR_IN
11465: IFFALSE 11481
// SetSide ( i , 1 ) ;
11467: LD_VAR 0 1
11471: PPUSH
11472: LD_INT 1
11474: PPUSH
11475: CALL_OW 235
11479: GO 11464
11481: POP
11482: POP
// end ;
11483: PPOPN 1
11485: END
// every 0 0$1 trigger frankScoutBase do
11486: LD_EXP 25
11490: IFFALSE 11855
11492: GO 11494
11494: DISABLE
// begin wait ( 2 2$30 ) ;
11495: LD_INT 5250
11497: PPUSH
11498: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11502: LD_INT 35
11504: PPUSH
11505: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11509: LD_INT 81
11511: PUSH
11512: LD_INT 4
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 92
11521: PUSH
11522: LD_INT 84
11524: PUSH
11525: LD_INT 28
11527: PUSH
11528: LD_INT 22
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PPUSH
11541: CALL_OW 69
11545: NOT
11546: IFFALSE 11502
// uc_side = 4 ;
11548: LD_ADDR_OWVAR 20
11552: PUSH
11553: LD_INT 4
11555: ST_TO_ADDR
// uc_nation = 1 ;
11556: LD_ADDR_OWVAR 21
11560: PUSH
11561: LD_INT 1
11563: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11564: LD_ADDR_EXP 5
11568: PUSH
11569: LD_STRING 04t_Frank
11571: PPUSH
11572: CALL_OW 34
11576: ST_TO_ADDR
// if not Frank then
11577: LD_EXP 5
11581: NOT
11582: IFFALSE 11586
// exit ;
11584: GO 11855
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11586: LD_EXP 5
11590: PPUSH
11591: LD_INT 13
11593: PPUSH
11594: LD_INT 0
11596: PPUSH
11597: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11601: LD_INT 35
11603: PPUSH
11604: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11608: LD_EXP 1
11612: PPUSH
11613: CALL_OW 310
11617: NOT
11618: PUSH
11619: LD_EXP 1
11623: PPUSH
11624: LD_INT 4
11626: PPUSH
11627: CALL_OW 296
11631: PUSH
11632: LD_INT 20
11634: LESS
11635: AND
11636: IFFALSE 11669
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11638: LD_EXP 5
11642: PPUSH
11643: LD_EXP 1
11647: PPUSH
11648: CALL_OW 250
11652: PPUSH
11653: LD_EXP 1
11657: PPUSH
11658: CALL_OW 251
11662: PPUSH
11663: CALL_OW 111
11667: GO 11684
// ComMoveXY ( Frank , 51 , 15 ) ;
11669: LD_EXP 5
11673: PPUSH
11674: LD_INT 51
11676: PPUSH
11677: LD_INT 15
11679: PPUSH
11680: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11684: LD_EXP 5
11688: PPUSH
11689: LD_EXP 1
11693: PPUSH
11694: CALL_OW 296
11698: PUSH
11699: LD_INT 10
11701: LESS
11702: IFFALSE 11601
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11704: LD_EXP 1
11708: PUSH
11709: LD_EXP 5
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PPUSH
11718: CALL_OW 87
// DialogueOn ;
11722: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11726: LD_EXP 5
11730: PPUSH
11731: LD_STRING D3a-Frank-1
11733: PPUSH
11734: CALL_OW 88
// if Lisa then
11738: LD_EXP 4
11742: IFFALSE 11792
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11744: LD_EXP 4
11748: PPUSH
11749: LD_STRING D3a-Lisa-1
11751: PPUSH
11752: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11756: LD_EXP 5
11760: PPUSH
11761: LD_STRING D3a-Frank-2
11763: PPUSH
11764: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11768: LD_EXP 4
11772: PPUSH
11773: LD_STRING D3a-Lisa-2
11775: PPUSH
11776: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11780: LD_EXP 5
11784: PPUSH
11785: LD_STRING D3a-Frank-3
11787: PPUSH
11788: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11792: LD_EXP 1
11796: PPUSH
11797: LD_STRING D3a-JMM-3
11799: PPUSH
11800: CALL_OW 88
// DialogueOff ;
11804: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11808: LD_EXP 5
11812: PPUSH
11813: LD_INT 1
11815: PPUSH
11816: CALL_OW 235
// InGameOn ;
11820: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11824: LD_INT 1
11826: PPUSH
11827: LD_INT 7
11829: PPUSH
11830: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11834: LD_INT 93
11836: PPUSH
11837: LD_INT 91
11839: PPUSH
11840: CALL_OW 84
// wait ( 0 0$5 ) ;
11844: LD_INT 175
11846: PPUSH
11847: CALL_OW 67
// InGameOff ;
11851: CALL_OW 9
// end ;
11855: END
// every 12 12$0 trigger Difficulty > 1 do
11856: LD_OWVAR 67
11860: PUSH
11861: LD_INT 1
11863: GREATER
11864: IFFALSE 11888
11866: GO 11868
11868: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11869: LD_INT 24
11871: PPUSH
11872: LD_INT 24
11874: PPUSH
11875: LD_INT 1
11877: PPUSH
11878: LD_INT 1
11880: PPUSH
11881: LD_INT 53
11883: PPUSH
11884: CALL_OW 185
11888: END
// every 18 18$0 do
11889: GO 11891
11891: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11892: LD_EXP 14
11896: PPUSH
11897: LD_STRING D4-Har-1
11899: PPUSH
11900: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11904: LD_EXP 1
11908: PPUSH
11909: LD_STRING D4-JMM-1
11911: PPUSH
11912: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11916: LD_EXP 14
11920: PPUSH
11921: LD_STRING D4-Har-2
11923: PPUSH
11924: CALL_OW 94
// case Query ( Q1 ) of 1 :
11928: LD_STRING Q1
11930: PPUSH
11931: CALL_OW 97
11935: PUSH
11936: LD_INT 1
11938: DOUBLE
11939: EQUAL
11940: IFTRUE 11944
11942: GO 12003
11944: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11945: LD_EXP 1
11949: PPUSH
11950: LD_STRING D5-JMM-1
11952: PPUSH
11953: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11957: LD_EXP 14
11961: PPUSH
11962: LD_STRING D5-Har-1
11964: PPUSH
11965: CALL_OW 94
// timeToSupport = 10 10$0 ;
11969: LD_ADDR_EXP 28
11973: PUSH
11974: LD_INT 21000
11976: ST_TO_ADDR
// timerStatus = 2 ;
11977: LD_ADDR_EXP 29
11981: PUSH
11982: LD_INT 2
11984: ST_TO_ADDR
// startTimer = 1 ;
11985: LD_ADDR_EXP 30
11989: PUSH
11990: LD_INT 1
11992: ST_TO_ADDR
// harrAnswer = 1 ;
11993: LD_ADDR_EXP 26
11997: PUSH
11998: LD_INT 1
12000: ST_TO_ADDR
// end ; 2 :
12001: GO 12138
12003: LD_INT 2
12005: DOUBLE
12006: EQUAL
12007: IFTRUE 12011
12009: GO 12070
12011: POP
// begin Say ( JMM , D5-JMM-2 ) ;
12012: LD_EXP 1
12016: PPUSH
12017: LD_STRING D5-JMM-2
12019: PPUSH
12020: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
12024: LD_EXP 14
12028: PPUSH
12029: LD_STRING D5-Har-2
12031: PPUSH
12032: CALL_OW 94
// timeToSupport = 5 5$0 ;
12036: LD_ADDR_EXP 28
12040: PUSH
12041: LD_INT 10500
12043: ST_TO_ADDR
// timerStatus = 2 ;
12044: LD_ADDR_EXP 29
12048: PUSH
12049: LD_INT 2
12051: ST_TO_ADDR
// startTimer = 1 ;
12052: LD_ADDR_EXP 30
12056: PUSH
12057: LD_INT 1
12059: ST_TO_ADDR
// harrAnswer = 2 ;
12060: LD_ADDR_EXP 26
12064: PUSH
12065: LD_INT 2
12067: ST_TO_ADDR
// end ; 3 :
12068: GO 12138
12070: LD_INT 3
12072: DOUBLE
12073: EQUAL
12074: IFTRUE 12078
12076: GO 12137
12078: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12079: LD_EXP 1
12083: PPUSH
12084: LD_STRING D5-JMM-3
12086: PPUSH
12087: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12091: LD_EXP 14
12095: PPUSH
12096: LD_STRING D5-Har-3
12098: PPUSH
12099: CALL_OW 94
// timeToSupport = 5 5$0 ;
12103: LD_ADDR_EXP 28
12107: PUSH
12108: LD_INT 10500
12110: ST_TO_ADDR
// timerStatus = 2 ;
12111: LD_ADDR_EXP 29
12115: PUSH
12116: LD_INT 2
12118: ST_TO_ADDR
// startTimer = 1 ;
12119: LD_ADDR_EXP 30
12123: PUSH
12124: LD_INT 1
12126: ST_TO_ADDR
// harrAnswer = 3 ;
12127: LD_ADDR_EXP 26
12131: PUSH
12132: LD_INT 3
12134: ST_TO_ADDR
// end ; end ;
12135: GO 12138
12137: POP
// end ;
12138: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12139: LD_EXP 29
12143: PUSH
12144: LD_INT 2
12146: EQUAL
12147: PUSH
12148: LD_EXP 28
12152: PUSH
12153: LD_INT 0
12155: EQUAL
12156: AND
12157: IFFALSE 12446
12159: GO 12161
12161: DISABLE
// begin timerStatus = 4 ;
12162: LD_ADDR_EXP 29
12166: PUSH
12167: LD_INT 4
12169: ST_TO_ADDR
// if harrAnswer = 1 then
12170: LD_EXP 26
12174: PUSH
12175: LD_INT 1
12177: EQUAL
12178: IFFALSE 12262
// begin PrepareHarrisonSupport ( 3 ) ;
12180: LD_INT 3
12182: PPUSH
12183: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12187: LD_INT 2100
12189: PPUSH
12190: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12194: LD_EXP 14
12198: PPUSH
12199: LD_STRING D7-Har-1
12201: PPUSH
12202: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12206: LD_STRING M2
12208: PPUSH
12209: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12213: LD_ADDR_EXP 27
12217: PUSH
12218: LD_INT 31500
12220: PUSH
12221: LD_INT 10500
12223: PUSH
12224: LD_INT 8400
12226: PUSH
12227: LD_INT 6300
12229: PUSH
12230: LD_INT 6300
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: PUSH
12239: LD_OWVAR 67
12243: ARRAY
12244: PLUS
12245: ST_TO_ADDR
// startTimer = 1 ;
12246: LD_ADDR_EXP 30
12250: PUSH
12251: LD_INT 1
12253: ST_TO_ADDR
// timerStatus = 3 ;
12254: LD_ADDR_EXP 29
12258: PUSH
12259: LD_INT 3
12261: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12262: LD_EXP 26
12266: PUSH
12267: LD_INT 2
12269: EQUAL
12270: IFFALSE 12354
// begin PrepareHarrisonSupport ( 4 ) ;
12272: LD_INT 4
12274: PPUSH
12275: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12279: LD_INT 2100
12281: PPUSH
12282: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12286: LD_EXP 14
12290: PPUSH
12291: LD_STRING D7-Har-1
12293: PPUSH
12294: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12298: LD_STRING M2
12300: PPUSH
12301: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12305: LD_ADDR_EXP 27
12309: PUSH
12310: LD_INT 33600
12312: PUSH
12313: LD_INT 10500
12315: PUSH
12316: LD_INT 8400
12318: PUSH
12319: LD_INT 6300
12321: PUSH
12322: LD_INT 5250
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: PUSH
12331: LD_OWVAR 67
12335: ARRAY
12336: PLUS
12337: ST_TO_ADDR
// startTimer = 1 ;
12338: LD_ADDR_EXP 30
12342: PUSH
12343: LD_INT 1
12345: ST_TO_ADDR
// timerStatus = 3 ;
12346: LD_ADDR_EXP 29
12350: PUSH
12351: LD_INT 3
12353: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12354: LD_EXP 26
12358: PUSH
12359: LD_INT 3
12361: EQUAL
12362: IFFALSE 12446
// begin PrepareHarrisonSupport ( 5 ) ;
12364: LD_INT 5
12366: PPUSH
12367: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12371: LD_INT 2100
12373: PPUSH
12374: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12378: LD_EXP 14
12382: PPUSH
12383: LD_STRING D7-Har-1
12385: PPUSH
12386: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12390: LD_STRING M2
12392: PPUSH
12393: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12397: LD_ADDR_EXP 27
12401: PUSH
12402: LD_INT 35700
12404: PUSH
12405: LD_INT 10500
12407: PUSH
12408: LD_INT 6300
12410: PUSH
12411: LD_INT 4200
12413: PUSH
12414: LD_INT 3150
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: PUSH
12423: LD_OWVAR 67
12427: ARRAY
12428: PLUS
12429: ST_TO_ADDR
// startTimer = 1 ;
12430: LD_ADDR_EXP 30
12434: PUSH
12435: LD_INT 1
12437: ST_TO_ADDR
// timerStatus = 3 ;
12438: LD_ADDR_EXP 29
12442: PUSH
12443: LD_INT 3
12445: ST_TO_ADDR
// end ; end ;
12446: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12447: LD_EXP 27
12451: PUSH
12452: LD_INT 8400
12454: LESSEQUAL
12455: PUSH
12456: LD_EXP 29
12460: PUSH
12461: LD_INT 3
12463: EQUAL
12464: AND
12465: IFFALSE 12497
12467: GO 12469
12469: DISABLE
// begin DialogueOn ;
12470: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12474: LD_EXP 14
12478: PPUSH
12479: LD_STRING D7a-Har-1
12481: PPUSH
12482: CALL_OW 94
// DialogueOff ;
12486: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12490: LD_STRING M2a
12492: PPUSH
12493: CALL_OW 337
// end ;
12497: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12498: LD_EXP 27
12502: PUSH
12503: LD_INT 0
12505: LESSEQUAL
12506: PUSH
12507: LD_EXP 29
12511: PUSH
12512: LD_INT 3
12514: EQUAL
12515: AND
12516: PUSH
12517: LD_EXP 40
12521: NOT
12522: AND
12523: IFFALSE 12662
12525: GO 12527
12527: DISABLE
12528: LD_INT 0
12530: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12531: LD_ADDR_VAR 0 1
12535: PUSH
12536: LD_INT 22
12538: PUSH
12539: LD_INT 1
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PPUSH
12546: CALL_OW 69
12550: PUSH
12551: LD_EXP 1
12555: PUSH
12556: EMPTY
12557: LIST
12558: DIFF
12559: ST_TO_ADDR
// saveDonaldson = 2 ;
12560: LD_ADDR_EXP 24
12564: PUSH
12565: LD_INT 2
12567: ST_TO_ADDR
// DialogueOn ;
12568: CALL_OW 6
// if IsOk ( Donaldson ) then
12572: LD_EXP 13
12576: PPUSH
12577: CALL_OW 302
12581: IFFALSE 12597
// SayRadio ( Harisson , D8-Har-1 ) else
12583: LD_EXP 14
12587: PPUSH
12588: LD_STRING D8-Har-1
12590: PPUSH
12591: CALL_OW 94
12595: GO 12609
// SayRadio ( Harisson , D8-Har-1a ) ;
12597: LD_EXP 14
12601: PPUSH
12602: LD_STRING D8-Har-1a
12604: PPUSH
12605: CALL_OW 94
// DialogueOff ;
12609: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12613: LD_VAR 0 1
12617: PPUSH
12618: LD_INT 4
12620: PPUSH
12621: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12625: LD_VAR 0 1
12629: PPUSH
12630: LD_INT 88
12632: PPUSH
12633: LD_INT 89
12635: PPUSH
12636: CALL_OW 114
// honor = 0 ;
12640: LD_ADDR_EXP 39
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12648: LD_INT 350
12650: PPUSH
12651: CALL_OW 67
// YouLost ( LostCommand ) ;
12655: LD_STRING LostCommand
12657: PPUSH
12658: CALL_OW 104
// end ;
12662: PPOPN 1
12664: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12665: LD_INT 22
12667: PUSH
12668: LD_INT 6
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 21
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PPUSH
12689: CALL_OW 69
12693: PUSH
12694: LD_INT 0
12696: EQUAL
12697: PUSH
12698: LD_EXP 20
12702: PUSH
12703: LD_INT 0
12705: EQUAL
12706: AND
12707: PUSH
12708: LD_EXP 44
12712: PUSH
12713: LD_INT 1
12715: EQUAL
12716: AND
12717: IFFALSE 12811
12719: GO 12721
12721: DISABLE
12722: LD_INT 0
12724: PPUSH
12725: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12726: LD_ADDR_VAR 0 2
12730: PUSH
12731: LD_INT 22
12733: PUSH
12734: LD_INT 1
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PUSH
12741: LD_INT 21
12743: PUSH
12744: LD_INT 1
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PUSH
12751: LD_INT 23
12753: PUSH
12754: LD_INT 1
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: LIST
12765: PPUSH
12766: CALL_OW 69
12770: ST_TO_ADDR
// for i in tmp do
12771: LD_ADDR_VAR 0 1
12775: PUSH
12776: LD_VAR 0 2
12780: PUSH
12781: FOR_IN
12782: IFFALSE 12809
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12784: LD_VAR 0 1
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: LD_INT 4
12794: PPUSH
12795: CALL_OW 12
12799: PPUSH
12800: LD_INT 500
12802: PPUSH
12803: CALL_OW 492
12807: GO 12781
12809: POP
12810: POP
// end ; end_of_file
12811: PPOPN 2
12813: END
// every 0 0$1 trigger AIEnable do
12814: LD_EXP 37
12818: IFFALSE 12912
12820: GO 12822
12822: DISABLE
// begin enable ;
12823: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12824: LD_INT 3
12826: PPUSH
12827: LD_INT 21
12829: PPUSH
12830: LD_INT 7
12832: PPUSH
12833: CALL 6038 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12837: LD_INT 3
12839: PPUSH
12840: LD_INT 8
12842: PPUSH
12843: LD_INT 7
12845: PPUSH
12846: LD_INT 1
12848: PPUSH
12849: CALL 6342 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12853: LD_EXP 20
12857: PUSH
12858: LD_INT 2
12860: EQUAL
12861: PUSH
12862: LD_INT 22
12864: PUSH
12865: LD_INT 6
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PPUSH
12872: CALL_OW 69
12876: AND
12877: IFFALSE 12912
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12879: LD_INT 6
12881: PPUSH
12882: LD_EXP 21
12886: PPUSH
12887: LD_INT 6
12889: PPUSH
12890: CALL 6038 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12894: LD_INT 6
12896: PPUSH
12897: LD_INT 9
12899: PPUSH
12900: LD_INT 6
12902: PPUSH
12903: LD_EXP 22
12907: PPUSH
12908: CALL 6342 0 4
// end ; end ;
12912: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12913: LD_EXP 15
12917: PPUSH
12918: CALL_OW 310
12922: NOT
12923: PUSH
12924: LD_INT 21
12926: PPUSH
12927: CALL_OW 302
12931: AND
12932: PUSH
12933: LD_INT 21
12935: PPUSH
12936: CALL_OW 255
12940: PUSH
12941: LD_INT 3
12943: EQUAL
12944: AND
12945: IFFALSE 12962
12947: GO 12949
12949: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12950: LD_EXP 15
12954: PPUSH
12955: LD_INT 21
12957: PPUSH
12958: CALL_OW 120
12962: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12963: LD_INT 22
12965: PUSH
12966: LD_INT 3
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PUSH
12973: LD_INT 21
12975: PUSH
12976: LD_INT 2
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: PUSH
12983: LD_INT 55
12985: PUSH
12986: EMPTY
12987: LIST
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: LIST
12993: PPUSH
12994: CALL_OW 69
12998: PUSH
12999: LD_INT 0
13001: EQUAL
13002: PUSH
13003: LD_INT 1
13005: PPUSH
13006: CALL_OW 255
13010: PUSH
13011: LD_INT 3
13013: EQUAL
13014: AND
13015: PUSH
13016: LD_INT 21
13018: PPUSH
13019: CALL_OW 302
13023: AND
13024: PUSH
13025: LD_INT 21
13027: PPUSH
13028: CALL_OW 255
13032: PUSH
13033: LD_INT 3
13035: EQUAL
13036: AND
13037: PUSH
13038: LD_INT 21
13040: PPUSH
13041: CALL_OW 302
13045: AND
13046: IFFALSE 13258
13048: GO 13050
13050: DISABLE
// begin enable ;
13051: ENABLE
// if Difficulty = 1 then
13052: LD_OWVAR 67
13056: PUSH
13057: LD_INT 1
13059: EQUAL
13060: IFFALSE 13104
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
13062: LD_INT 3
13064: PPUSH
13065: LD_INT 24
13067: PPUSH
13068: LD_OWVAR 67
13072: PUSH
13073: LD_INT 2
13075: PLUS
13076: PPUSH
13077: LD_INT 42
13079: PUSH
13080: LD_INT 44
13082: PUSH
13083: LD_INT 43
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: LIST
13090: PPUSH
13091: LD_INT 1
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: LD_INT 21
13099: PPUSH
13100: CALL 6856 0 7
// if Difficulty = 2 then
13104: LD_OWVAR 67
13108: PUSH
13109: LD_INT 2
13111: EQUAL
13112: IFFALSE 13179
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13114: LD_INT 3
13116: PPUSH
13117: LD_INT 24
13119: PPUSH
13120: LD_OWVAR 67
13124: PUSH
13125: LD_INT 2
13127: PLUS
13128: PPUSH
13129: LD_INT 44
13131: PUSH
13132: LD_INT 44
13134: PUSH
13135: LD_INT 43
13137: PUSH
13138: LD_INT 43
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: PPUSH
13147: LD_INT 1
13149: PPUSH
13150: LD_INT 1
13152: PPUSH
13153: LD_INT 21
13155: PUSH
13156: LD_INT 22
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 1
13165: PPUSH
13166: LD_INT 2
13168: PPUSH
13169: CALL_OW 12
13173: ARRAY
13174: PPUSH
13175: CALL 6856 0 7
// if Difficulty >= 3 then
13179: LD_OWVAR 67
13183: PUSH
13184: LD_INT 3
13186: GREATEREQUAL
13187: IFFALSE 13258
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13189: LD_INT 3
13191: PPUSH
13192: LD_INT 24
13194: PPUSH
13195: LD_OWVAR 67
13199: PUSH
13200: LD_INT 2
13202: PPUSH
13203: LD_INT 3
13205: PPUSH
13206: CALL_OW 12
13210: PLUS
13211: PPUSH
13212: LD_INT 44
13214: PUSH
13215: LD_INT 44
13217: PUSH
13218: LD_INT 43
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: LIST
13225: PPUSH
13226: LD_INT 1
13228: PPUSH
13229: LD_INT 1
13231: PPUSH
13232: LD_INT 22
13234: PUSH
13235: LD_INT 23
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 1
13244: PPUSH
13245: LD_INT 2
13247: PPUSH
13248: CALL_OW 12
13252: ARRAY
13253: PPUSH
13254: CALL 6856 0 7
// end ;
13258: END
// every 0 0$1 do
13259: GO 13261
13261: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13262: LD_INT 3
13264: PPUSH
13265: LD_INT 1
13267: PPUSH
13268: LD_INT 3
13270: PPUSH
13271: CALL 5959 0 3
13275: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13276: LD_EXP 20
13280: PUSH
13281: LD_INT 1
13283: EQUAL
13284: IFFALSE 13431
13286: GO 13288
13288: DISABLE
13289: LD_INT 0
13291: PPUSH
13292: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13293: LD_ADDR_VAR 0 2
13297: PUSH
13298: LD_INT 22
13300: PUSH
13301: LD_INT 6
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 21
13310: PUSH
13311: LD_INT 2
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 34
13320: PUSH
13321: LD_INT 51
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: LIST
13332: PPUSH
13333: CALL_OW 69
13337: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13338: LD_VAR 0 2
13342: PUSH
13343: LD_INT 1
13345: ARRAY
13346: PPUSH
13347: LD_EXP 21
13351: PPUSH
13352: CALL_OW 250
13356: PUSH
13357: LD_INT 5
13359: MINUS
13360: PPUSH
13361: LD_EXP 21
13365: PPUSH
13366: CALL_OW 251
13370: PUSH
13371: LD_INT 5
13373: MINUS
13374: PPUSH
13375: CALL_OW 111
// wait ( 0 0$5 ) ;
13379: LD_INT 175
13381: PPUSH
13382: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13386: LD_VAR 0 2
13390: PUSH
13391: LD_INT 1
13393: ARRAY
13394: PPUSH
13395: LD_INT 41
13397: PPUSH
13398: LD_INT 52
13400: PPUSH
13401: CALL_OW 177
// wait ( 0 0$40 ) ;
13405: LD_INT 1400
13407: PPUSH
13408: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13412: LD_VAR 0 2
13416: PUSH
13417: LD_INT 1
13419: ARRAY
13420: PPUSH
13421: LD_INT 41
13423: PPUSH
13424: LD_INT 44
13426: PPUSH
13427: CALL_OW 111
// end ;
13431: PPOPN 2
13433: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13434: LD_EXP 21
13438: PPUSH
13439: CALL_OW 274
13443: PPUSH
13444: LD_INT 1
13446: PPUSH
13447: CALL_OW 275
13451: PUSH
13452: LD_INT 100
13454: GREATEREQUAL
13455: IFFALSE 13683
13457: GO 13459
13459: DISABLE
13460: LD_INT 0
13462: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13463: LD_ADDR_VAR 0 1
13467: PUSH
13468: LD_INT 22
13470: PUSH
13471: LD_INT 6
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 21
13480: PUSH
13481: LD_INT 1
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 25
13490: PUSH
13491: LD_INT 2
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: LIST
13502: PPUSH
13503: CALL_OW 69
13507: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13508: LD_VAR 0 1
13512: PUSH
13513: LD_INT 1
13515: ARRAY
13516: PPUSH
13517: LD_INT 4
13519: PPUSH
13520: LD_INT 39
13522: PPUSH
13523: LD_INT 37
13525: PPUSH
13526: LD_INT 3
13528: PPUSH
13529: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13533: LD_VAR 0 1
13537: PUSH
13538: LD_INT 1
13540: ARRAY
13541: PPUSH
13542: LD_INT 29
13544: PPUSH
13545: LD_INT 42
13547: PPUSH
13548: LD_INT 54
13550: PPUSH
13551: LD_INT 3
13553: PPUSH
13554: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13558: LD_VAR 0 1
13562: PUSH
13563: LD_INT 1
13565: ARRAY
13566: PPUSH
13567: LD_INT 6
13569: PPUSH
13570: LD_INT 38
13572: PPUSH
13573: LD_INT 48
13575: PPUSH
13576: LD_INT 0
13578: PPUSH
13579: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13583: LD_VAR 0 1
13587: PUSH
13588: LD_INT 1
13590: ARRAY
13591: PPUSH
13592: LD_INT 2
13594: PPUSH
13595: LD_INT 32
13597: PPUSH
13598: LD_INT 38
13600: PPUSH
13601: LD_INT 2
13603: PPUSH
13604: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13608: LD_VAR 0 1
13612: PUSH
13613: LD_INT 1
13615: ARRAY
13616: PPUSH
13617: LD_INT 26
13619: PPUSH
13620: LD_INT 39
13622: PPUSH
13623: LD_INT 55
13625: PPUSH
13626: LD_INT 3
13628: PPUSH
13629: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13633: LD_VAR 0 1
13637: PUSH
13638: LD_INT 1
13640: ARRAY
13641: PPUSH
13642: LD_INT 32
13644: PPUSH
13645: LD_INT 31
13647: PPUSH
13648: LD_INT 31
13650: PPUSH
13651: LD_INT 3
13653: PPUSH
13654: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13658: LD_VAR 0 1
13662: PUSH
13663: LD_INT 1
13665: ARRAY
13666: PPUSH
13667: LD_INT 31
13669: PPUSH
13670: LD_INT 50
13672: PPUSH
13673: LD_INT 51
13675: PPUSH
13676: LD_INT 4
13678: PPUSH
13679: CALL_OW 205
// end ;
13683: PPOPN 1
13685: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13686: LD_EXP 46
13690: IFFALSE 14247
13692: GO 13694
13694: DISABLE
13695: LD_INT 0
13697: PPUSH
13698: PPUSH
13699: PPUSH
// begin enable ;
13700: ENABLE
// if not ruMobile then
13701: LD_EXP 46
13705: NOT
13706: IFFALSE 13710
// exit ;
13708: GO 14247
// for i in ruMobile do
13710: LD_ADDR_VAR 0 1
13714: PUSH
13715: LD_EXP 46
13719: PUSH
13720: FOR_IN
13721: IFFALSE 14245
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13723: LD_VAR 0 1
13727: PPUSH
13728: CALL_OW 302
13732: NOT
13733: PUSH
13734: LD_VAR 0 1
13738: PPUSH
13739: CALL_OW 255
13743: PUSH
13744: LD_INT 3
13746: NONEQUAL
13747: OR
13748: IFFALSE 13768
// begin ruMobile := ruMobile diff i ;
13750: LD_ADDR_EXP 46
13754: PUSH
13755: LD_EXP 46
13759: PUSH
13760: LD_VAR 0 1
13764: DIFF
13765: ST_TO_ADDR
// continue ;
13766: GO 13720
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13768: LD_VAR 0 1
13772: PPUSH
13773: CALL_OW 110
13777: NOT
13778: PUSH
13779: LD_VAR 0 1
13783: PPUSH
13784: CALL_OW 110
13788: PUSH
13789: LD_INT 0
13791: EQUAL
13792: OR
13793: IFFALSE 13908
// begin if GetFuel ( i ) < 50 then
13795: LD_VAR 0 1
13799: PPUSH
13800: CALL_OW 261
13804: PUSH
13805: LD_INT 50
13807: LESS
13808: IFFALSE 13867
// begin ComMoveXY ( i , 106 , 88 ) ;
13810: LD_VAR 0 1
13814: PPUSH
13815: LD_INT 106
13817: PPUSH
13818: LD_INT 88
13820: PPUSH
13821: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13825: LD_INT 35
13827: PPUSH
13828: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13832: LD_VAR 0 1
13836: PPUSH
13837: LD_INT 106
13839: PPUSH
13840: LD_INT 88
13842: PPUSH
13843: CALL_OW 297
13847: PUSH
13848: LD_INT 4
13850: LESS
13851: IFFALSE 13825
// SetFuel ( i , 100 ) ;
13853: LD_VAR 0 1
13857: PPUSH
13858: LD_INT 100
13860: PPUSH
13861: CALL_OW 240
// end else
13865: GO 13908
// if not IsInArea ( i , ruParking ) then
13867: LD_VAR 0 1
13871: PPUSH
13872: LD_INT 25
13874: PPUSH
13875: CALL_OW 308
13879: NOT
13880: IFFALSE 13896
// ComMoveToArea ( i , ruParking ) else
13882: LD_VAR 0 1
13886: PPUSH
13887: LD_INT 25
13889: PPUSH
13890: CALL_OW 113
13894: GO 13908
// SetTag ( i , 1 ) ;
13896: LD_VAR 0 1
13900: PPUSH
13901: LD_INT 1
13903: PPUSH
13904: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13908: LD_VAR 0 1
13912: PPUSH
13913: CALL_OW 110
13917: PUSH
13918: LD_INT 1
13920: EQUAL
13921: IFFALSE 14051
// begin if GetLives ( i ) < 1000 then
13923: LD_VAR 0 1
13927: PPUSH
13928: CALL_OW 256
13932: PUSH
13933: LD_INT 1000
13935: LESS
13936: IFFALSE 14028
// begin if not IsDrivenBy ( i ) then
13938: LD_VAR 0 1
13942: PPUSH
13943: CALL_OW 311
13947: NOT
13948: IFFALSE 13952
// continue ;
13950: GO 13720
// mech := IsDrivenBy ( i ) ;
13952: LD_ADDR_VAR 0 2
13956: PUSH
13957: LD_VAR 0 1
13961: PPUSH
13962: CALL_OW 311
13966: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13967: LD_VAR 0 2
13971: PPUSH
13972: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13976: LD_VAR 0 2
13980: PPUSH
13981: LD_VAR 0 1
13985: PPUSH
13986: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13990: LD_INT 35
13992: PPUSH
13993: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13997: LD_VAR 0 1
14001: PPUSH
14002: CALL_OW 256
14006: PUSH
14007: LD_INT 1000
14009: EQUAL
14010: IFFALSE 13990
// ComEnterUnit ( mech , i ) ;
14012: LD_VAR 0 2
14016: PPUSH
14017: LD_VAR 0 1
14021: PPUSH
14022: CALL_OW 120
// end else
14026: GO 14051
// if IsDrivenBy ( i ) then
14028: LD_VAR 0 1
14032: PPUSH
14033: CALL_OW 311
14037: IFFALSE 14051
// SetTag ( i , 2 ) ;
14039: LD_VAR 0 1
14043: PPUSH
14044: LD_INT 2
14046: PPUSH
14047: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
14051: LD_VAR 0 1
14055: PPUSH
14056: CALL_OW 110
14060: PUSH
14061: LD_INT 2
14063: EQUAL
14064: IFFALSE 14243
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14066: LD_ADDR_VAR 0 3
14070: PUSH
14071: LD_INT 24
14073: PPUSH
14074: LD_INT 81
14076: PUSH
14077: LD_INT 3
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PPUSH
14084: CALL_OW 70
14088: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14089: LD_VAR 0 1
14093: PPUSH
14094: CALL_OW 256
14098: PUSH
14099: LD_INT 650
14101: LESS
14102: IFFALSE 14127
// begin ComStop ( i ) ;
14104: LD_VAR 0 1
14108: PPUSH
14109: CALL_OW 141
// SetTag ( i , 0 ) ;
14113: LD_VAR 0 1
14117: PPUSH
14118: LD_INT 0
14120: PPUSH
14121: CALL_OW 109
// continue ;
14125: GO 13720
// end ; if enemy then
14127: LD_VAR 0 3
14131: IFFALSE 14171
// begin if not HasTask ( i ) then
14133: LD_VAR 0 1
14137: PPUSH
14138: CALL_OW 314
14142: NOT
14143: IFFALSE 14169
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14145: LD_VAR 0 1
14149: PPUSH
14150: LD_VAR 0 3
14154: PPUSH
14155: LD_VAR 0 1
14159: PPUSH
14160: CALL_OW 74
14164: PPUSH
14165: CALL_OW 115
// end else
14169: GO 14243
// if ruMobile > 2 then
14171: LD_EXP 46
14175: PUSH
14176: LD_INT 2
14178: GREATER
14179: IFFALSE 14243
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14181: LD_ADDR_VAR 0 3
14185: PUSH
14186: LD_INT 81
14188: PUSH
14189: LD_INT 3
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PPUSH
14196: CALL_OW 69
14200: ST_TO_ADDR
// if enemy then
14201: LD_VAR 0 3
14205: IFFALSE 14243
// if not HasTask ( i ) then
14207: LD_VAR 0 1
14211: PPUSH
14212: CALL_OW 314
14216: NOT
14217: IFFALSE 14243
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14219: LD_VAR 0 1
14223: PPUSH
14224: LD_VAR 0 3
14228: PPUSH
14229: LD_VAR 0 1
14233: PPUSH
14234: CALL_OW 74
14238: PPUSH
14239: CALL_OW 115
// end ; end ; end ;
14243: GO 13720
14245: POP
14246: POP
// end ; end_of_file
14247: PPOPN 3
14249: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14250: LD_INT 0
14252: PPUSH
14253: PPUSH
14254: PPUSH
14255: PPUSH
14256: PPUSH
14257: PPUSH
14258: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14259: LD_ADDR_VAR 0 3
14263: PUSH
14264: LD_INT 22
14266: PUSH
14267: LD_INT 6
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: LD_INT 21
14276: PUSH
14277: LD_INT 1
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: LD_INT 25
14286: PUSH
14287: LD_INT 1
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PUSH
14294: LD_INT 3
14296: PUSH
14297: LD_INT 54
14299: PUSH
14300: EMPTY
14301: LIST
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: PPUSH
14313: CALL_OW 69
14317: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14318: LD_ADDR_VAR 0 7
14322: PUSH
14323: LD_INT 22
14325: PUSH
14326: LD_INT 6
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 21
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 25
14345: PUSH
14346: LD_INT 1
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 54
14355: PUSH
14356: EMPTY
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: PPUSH
14365: CALL_OW 69
14369: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14370: LD_ADDR_VAR 0 4
14374: PUSH
14375: LD_INT 22
14377: PUSH
14378: LD_INT 6
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 21
14387: PUSH
14388: LD_INT 1
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 25
14397: PUSH
14398: LD_INT 2
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 69
14414: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14415: LD_ADDR_VAR 0 6
14419: PUSH
14420: LD_INT 22
14422: PUSH
14423: LD_INT 6
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 21
14432: PUSH
14433: LD_INT 1
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 25
14442: PUSH
14443: LD_INT 4
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: LIST
14454: PPUSH
14455: CALL_OW 69
14459: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14460: LD_ADDR_VAR 0 8
14464: PUSH
14465: LD_INT 22
14467: PUSH
14468: LD_INT 6
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 21
14477: PUSH
14478: LD_INT 2
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: LD_INT 34
14487: PUSH
14488: LD_INT 51
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: LIST
14499: PPUSH
14500: CALL_OW 69
14504: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14505: LD_VAR 0 1
14509: PPUSH
14510: CALL_OW 255
14514: PUSH
14515: LD_INT 6
14517: EQUAL
14518: PUSH
14519: LD_VAR 0 1
14523: PPUSH
14524: CALL_OW 266
14528: PUSH
14529: LD_INT 0
14531: EQUAL
14532: AND
14533: IFFALSE 14553
// begin ruPDepot = building ;
14535: LD_ADDR_EXP 21
14539: PUSH
14540: LD_VAR 0 1
14544: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14545: LD_ADDR_EXP 20
14549: PUSH
14550: LD_INT 1
14552: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14553: LD_VAR 0 1
14557: PPUSH
14558: CALL_OW 266
14562: PUSH
14563: LD_INT 4
14565: EQUAL
14566: PUSH
14567: LD_VAR 0 1
14571: PPUSH
14572: CALL_OW 255
14576: PUSH
14577: LD_INT 6
14579: EQUAL
14580: AND
14581: IFFALSE 14614
// for i in tmpSold do
14583: LD_ADDR_VAR 0 2
14587: PUSH
14588: LD_VAR 0 3
14592: PUSH
14593: FOR_IN
14594: IFFALSE 14612
// ComEnterUnit ( i , building ) ;
14596: LD_VAR 0 2
14600: PPUSH
14601: LD_VAR 0 1
14605: PPUSH
14606: CALL_OW 120
14610: GO 14593
14612: POP
14613: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14614: LD_VAR 0 1
14618: PPUSH
14619: CALL_OW 266
14623: PUSH
14624: LD_INT 6
14626: EQUAL
14627: PUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 255
14637: PUSH
14638: LD_INT 6
14640: EQUAL
14641: AND
14642: IFFALSE 14700
// begin for i in tmpSci do
14644: LD_ADDR_VAR 0 2
14648: PUSH
14649: LD_VAR 0 6
14653: PUSH
14654: FOR_IN
14655: IFFALSE 14673
// ComEnterUnit ( i , building ) ;
14657: LD_VAR 0 2
14661: PPUSH
14662: LD_VAR 0 1
14666: PPUSH
14667: CALL_OW 120
14671: GO 14654
14673: POP
14674: POP
// ResAllTechs ( 6 , building , 3 ) ;
14675: LD_INT 6
14677: PPUSH
14678: LD_VAR 0 1
14682: PPUSH
14683: LD_INT 3
14685: PPUSH
14686: CALL 5959 0 3
// ruPLab = building ;
14690: LD_ADDR_EXP 22
14694: PUSH
14695: LD_VAR 0 1
14699: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14700: LD_VAR 0 1
14704: PPUSH
14705: CALL_OW 266
14709: PUSH
14710: LD_INT 2
14712: EQUAL
14713: PUSH
14714: LD_VAR 0 1
14718: PPUSH
14719: CALL_OW 255
14723: PUSH
14724: LD_INT 6
14726: EQUAL
14727: AND
14728: IFFALSE 14779
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14730: LD_ADDR_VAR 0 5
14734: PUSH
14735: LD_VAR 0 8
14739: PUSH
14740: LD_INT 1
14742: ARRAY
14743: PPUSH
14744: CALL_OW 313
14748: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14749: LD_VAR 0 5
14753: PPUSH
14754: CALL_OW 121
// wait ( 0 0$1 ) ;
14758: LD_INT 35
14760: PPUSH
14761: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14765: LD_VAR 0 5
14769: PPUSH
14770: LD_VAR 0 1
14774: PPUSH
14775: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14779: LD_VAR 0 1
14783: PPUSH
14784: CALL_OW 266
14788: PUSH
14789: LD_INT 32
14791: EQUAL
14792: PUSH
14793: LD_VAR 0 1
14797: PPUSH
14798: CALL_OW 255
14802: PUSH
14803: LD_INT 6
14805: EQUAL
14806: AND
14807: IFFALSE 14859
// begin ComPlaceWeapon ( building , 42 ) ;
14809: LD_VAR 0 1
14813: PPUSH
14814: LD_INT 42
14816: PPUSH
14817: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14821: LD_VAR 0 7
14825: PUSH
14826: LD_INT 1
14828: ARRAY
14829: PPUSH
14830: CALL_OW 122
// wait ( 0 0$1 ) ;
14834: LD_INT 35
14836: PPUSH
14837: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14841: LD_VAR 0 7
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PPUSH
14850: LD_VAR 0 1
14854: PPUSH
14855: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14859: LD_VAR 0 1
14863: PPUSH
14864: CALL_OW 266
14868: PUSH
14869: LD_INT 31
14871: EQUAL
14872: PUSH
14873: LD_VAR 0 1
14877: PPUSH
14878: CALL_OW 255
14882: PUSH
14883: LD_INT 6
14885: EQUAL
14886: AND
14887: IFFALSE 14953
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14889: LD_VAR 0 7
14893: PUSH
14894: LD_INT 2
14896: ARRAY
14897: PPUSH
14898: CALL_OW 122
// wait ( 0 0$1 ) ;
14902: LD_INT 35
14904: PPUSH
14905: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14909: LD_VAR 0 7
14913: PUSH
14914: LD_INT 2
14916: ARRAY
14917: PPUSH
14918: LD_VAR 0 1
14922: PPUSH
14923: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14927: LD_VAR 0 4
14931: PUSH
14932: LD_INT 1
14934: ARRAY
14935: PPUSH
14936: LD_EXP 21
14940: PPUSH
14941: CALL_OW 120
// baseReadyToBuild = 2 ;
14945: LD_ADDR_EXP 20
14949: PUSH
14950: LD_INT 2
14952: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14953: LD_VAR 0 1
14957: PPUSH
14958: CALL_OW 266
14962: PUSH
14963: LD_INT 32
14965: EQUAL
14966: PUSH
14967: LD_VAR 0 1
14971: PPUSH
14972: CALL_OW 255
14976: PUSH
14977: LD_INT 1
14979: EQUAL
14980: AND
14981: PUSH
14982: LD_EXP 32
14986: PUSH
14987: LD_INT 0
14989: EQUAL
14990: AND
14991: IFFALSE 15236
// begin bunkerDialog = 1 ;
14993: LD_ADDR_EXP 32
14997: PUSH
14998: LD_INT 1
15000: ST_TO_ADDR
// if IsOK ( Claptopn ) then
15001: LD_EXP 11
15005: PPUSH
15006: CALL_OW 302
15010: IFFALSE 15026
// Say ( Claptopn , D11-Eng1-1 ) else
15012: LD_EXP 11
15016: PPUSH
15017: LD_STRING D11-Eng1-1
15019: PPUSH
15020: CALL_OW 88
15024: GO 15222
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15026: LD_INT 22
15028: PUSH
15029: LD_INT 1
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 21
15038: PUSH
15039: LD_INT 1
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: LD_INT 25
15048: PUSH
15049: LD_INT 3
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: LD_INT 26
15058: PUSH
15059: LD_INT 1
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: PPUSH
15072: CALL_OW 69
15076: PUSH
15077: LD_EXP 1
15081: PUSH
15082: EMPTY
15083: LIST
15084: PUSH
15085: LD_INT 0
15087: GREATER
15088: DIFF
15089: IFFALSE 15163
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15091: LD_INT 22
15093: PUSH
15094: LD_INT 1
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 21
15103: PUSH
15104: LD_INT 1
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 25
15113: PUSH
15114: LD_INT 2
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 26
15123: PUSH
15124: LD_INT 1
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: PPUSH
15137: CALL_OW 69
15141: PUSH
15142: LD_EXP 1
15146: PUSH
15147: EMPTY
15148: LIST
15149: DIFF
15150: PPUSH
15151: LD_STRING D11-Eng1-1
15153: PPUSH
15154: LD_STRING D11-Eng1-1
15156: PPUSH
15157: CALL 4606 0 3
15161: GO 15222
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15163: LD_INT 22
15165: PUSH
15166: LD_INT 1
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: LD_INT 21
15175: PUSH
15176: LD_INT 1
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: LD_INT 26
15185: PUSH
15186: LD_INT 1
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: LIST
15197: PPUSH
15198: CALL_OW 69
15202: PUSH
15203: LD_EXP 1
15207: PUSH
15208: EMPTY
15209: LIST
15210: DIFF
15211: PPUSH
15212: LD_STRING D11-Eng1-1
15214: PPUSH
15215: LD_STRING D11-Eng1-1
15217: PPUSH
15218: CALL 4606 0 3
// end ; if energyVDialog = 0 then
15222: LD_EXP 33
15226: PUSH
15227: LD_INT 0
15229: EQUAL
15230: IFFALSE 15236
// EnergyDialog ;
15232: CALL 5011 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15236: LD_VAR 0 1
15240: PPUSH
15241: CALL_OW 266
15245: PUSH
15246: LD_INT 29
15248: EQUAL
15249: PUSH
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 255
15259: PUSH
15260: LD_INT 1
15262: EQUAL
15263: AND
15264: IFFALSE 15274
// buildOil = 1 ;
15266: LD_ADDR_EXP 34
15270: PUSH
15271: LD_INT 1
15273: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15274: LD_VAR 0 1
15278: PPUSH
15279: CALL_OW 266
15283: PUSH
15284: LD_INT 26
15286: EQUAL
15287: PUSH
15288: LD_VAR 0 1
15292: PPUSH
15293: CALL_OW 255
15297: PUSH
15298: LD_INT 1
15300: EQUAL
15301: AND
15302: IFFALSE 15312
// buildPower = 1 ;
15304: LD_ADDR_EXP 35
15308: PUSH
15309: LD_INT 1
15311: ST_TO_ADDR
// end ;
15312: PPOPN 8
15314: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15315: LD_VAR 0 1
15319: PPUSH
15320: CALL_OW 266
15324: PUSH
15325: LD_INT 3
15327: EQUAL
15328: PUSH
15329: LD_VAR 0 1
15333: PPUSH
15334: CALL_OW 255
15338: PUSH
15339: LD_INT 1
15341: EQUAL
15342: AND
15343: PUSH
15344: LD_EXP 31
15348: PUSH
15349: LD_INT 0
15351: EQUAL
15352: AND
15353: IFFALSE 15701
// begin factoryDialog = 1 ;
15355: LD_ADDR_EXP 31
15359: PUSH
15360: LD_INT 1
15362: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15363: LD_INT 47
15365: PPUSH
15366: LD_INT 1
15368: PPUSH
15369: CALL_OW 321
15373: PUSH
15374: LD_INT 1
15376: EQUAL
15377: PUSH
15378: LD_INT 45
15380: PPUSH
15381: LD_INT 1
15383: PPUSH
15384: CALL_OW 321
15388: PUSH
15389: LD_INT 1
15391: EQUAL
15392: AND
15393: IFFALSE 15701
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15395: LD_INT 22
15397: PUSH
15398: LD_INT 1
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 21
15407: PUSH
15408: LD_INT 3
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 30
15417: PUSH
15418: LD_INT 3
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 24
15427: PUSH
15428: LD_INT 1000
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: PPUSH
15441: CALL_OW 69
15445: PUSH
15446: LD_INT 1
15448: ARRAY
15449: PPUSH
15450: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15454: LD_EXP 1
15458: PPUSH
15459: LD_STRING D9a-JMM-1
15461: PPUSH
15462: CALL_OW 88
// if IsOK ( Campell ) then
15466: LD_EXP 12
15470: PPUSH
15471: CALL_OW 302
15475: IFFALSE 15491
// Say ( Campell , D9a-Mech1-1 ) else
15477: LD_EXP 12
15481: PPUSH
15482: LD_STRING D9a-Mech1-1
15484: PPUSH
15485: CALL_OW 88
15489: GO 15687
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15491: LD_INT 22
15493: PUSH
15494: LD_INT 1
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 21
15503: PUSH
15504: LD_INT 1
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 25
15513: PUSH
15514: LD_INT 3
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 26
15523: PUSH
15524: LD_INT 1
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: PPUSH
15537: CALL_OW 69
15541: PUSH
15542: LD_EXP 1
15546: PUSH
15547: EMPTY
15548: LIST
15549: PUSH
15550: LD_INT 0
15552: GREATER
15553: DIFF
15554: IFFALSE 15628
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15556: LD_INT 22
15558: PUSH
15559: LD_INT 1
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 21
15568: PUSH
15569: LD_INT 1
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 25
15578: PUSH
15579: LD_INT 3
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 26
15588: PUSH
15589: LD_INT 1
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: PPUSH
15602: CALL_OW 69
15606: PUSH
15607: LD_EXP 1
15611: PUSH
15612: EMPTY
15613: LIST
15614: DIFF
15615: PPUSH
15616: LD_STRING D9a-Mech1-1
15618: PPUSH
15619: LD_STRING D9a-Mech1-1
15621: PPUSH
15622: CALL 4606 0 3
15626: GO 15687
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15628: LD_INT 22
15630: PUSH
15631: LD_INT 1
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 21
15640: PUSH
15641: LD_INT 1
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: LD_INT 26
15650: PUSH
15651: LD_INT 1
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: LIST
15662: PPUSH
15663: CALL_OW 69
15667: PUSH
15668: LD_EXP 1
15672: PUSH
15673: EMPTY
15674: LIST
15675: DIFF
15676: PPUSH
15677: LD_STRING D9a-Mech1-1
15679: PPUSH
15680: LD_STRING D9a-Mech1-1
15682: PPUSH
15683: CALL 4606 0 3
// end ; if energyVDialog = 0 then
15687: LD_EXP 33
15691: PUSH
15692: LD_INT 0
15694: EQUAL
15695: IFFALSE 15701
// EnergyDialog ;
15697: CALL 5011 0 0
// end ; end ; end ;
15701: PPOPN 1
15703: END
// on UnitDestroyed ( unit ) do var mech ;
15704: LD_INT 0
15706: PPUSH
// begin if unit = JMM then
15707: LD_VAR 0 1
15711: PUSH
15712: LD_EXP 1
15716: EQUAL
15717: IFFALSE 15726
// YouLost ( JMM ) ;
15719: LD_STRING JMM
15721: PPUSH
15722: CALL_OW 104
// if unit = ambdept0 then
15726: LD_VAR 0 1
15730: PUSH
15731: LD_INT 4
15733: EQUAL
15734: IFFALSE 15743
// YouLost ( Base ) ;
15736: LD_STRING Base
15738: PPUSH
15739: CALL_OW 104
// if unit in ruMobile then
15743: LD_VAR 0 1
15747: PUSH
15748: LD_EXP 46
15752: IN
15753: IFFALSE 15771
// ruMobile = ruMobile diff ruMobile ;
15755: LD_ADDR_EXP 46
15759: PUSH
15760: LD_EXP 46
15764: PUSH
15765: LD_EXP 46
15769: DIFF
15770: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15771: LD_VAR 0 1
15775: PPUSH
15776: CALL_OW 247
15780: PUSH
15781: LD_INT 1
15783: EQUAL
15784: PUSH
15785: LD_VAR 0 1
15789: PPUSH
15790: CALL_OW 255
15794: PUSH
15795: LD_INT 1
15797: EQUAL
15798: AND
15799: IFFALSE 15815
// lostCounter = lostCounter + 1 ;
15801: LD_ADDR_EXP 38
15805: PUSH
15806: LD_EXP 38
15810: PUSH
15811: LD_INT 1
15813: PLUS
15814: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15815: LD_EXP 43
15819: PUSH
15820: LD_INT 24
15822: PPUSH
15823: CALL_OW 313
15827: PUSH
15828: LD_INT 6
15830: LESS
15831: AND
15832: PUSH
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 257
15842: PUSH
15843: LD_INT 3
15845: EQUAL
15846: AND
15847: PUSH
15848: LD_VAR 0 1
15852: PPUSH
15853: CALL_OW 255
15857: PUSH
15858: LD_INT 3
15860: EQUAL
15861: AND
15862: PUSH
15863: LD_INT 24
15865: PPUSH
15866: CALL_OW 302
15870: AND
15871: PUSH
15872: LD_INT 24
15874: PPUSH
15875: CALL_OW 255
15879: PUSH
15880: LD_INT 3
15882: EQUAL
15883: AND
15884: IFFALSE 16013
// begin ruMech := ruMech - 1 ;
15886: LD_ADDR_EXP 43
15890: PUSH
15891: LD_EXP 43
15895: PUSH
15896: LD_INT 1
15898: MINUS
15899: ST_TO_ADDR
// if ruMech = 0 then
15900: LD_EXP 43
15904: PUSH
15905: LD_INT 0
15907: EQUAL
15908: IFFALSE 15912
// exit ;
15910: GO 16013
// wait ( 0 0$40 ) ;
15912: LD_INT 1400
15914: PPUSH
15915: CALL_OW 67
// uc_side = 3 ;
15919: LD_ADDR_OWVAR 20
15923: PUSH
15924: LD_INT 3
15926: ST_TO_ADDR
// uc_nation = 3 ;
15927: LD_ADDR_OWVAR 21
15931: PUSH
15932: LD_INT 3
15934: ST_TO_ADDR
// hc_gallery :=  ;
15935: LD_ADDR_OWVAR 33
15939: PUSH
15940: LD_STRING 
15942: ST_TO_ADDR
// hc_name :=  ;
15943: LD_ADDR_OWVAR 26
15947: PUSH
15948: LD_STRING 
15950: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15951: LD_INT 0
15953: PPUSH
15954: LD_EXP 16
15958: PPUSH
15959: LD_EXP 17
15963: PPUSH
15964: CALL_OW 12
15968: PPUSH
15969: CALL_OW 383
// mech := CreateHuman ;
15973: LD_ADDR_VAR 0 2
15977: PUSH
15978: CALL_OW 44
15982: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15983: LD_VAR 0 2
15987: PPUSH
15988: LD_INT 124
15990: PPUSH
15991: LD_INT 97
15993: PPUSH
15994: LD_INT 0
15996: PPUSH
15997: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
16001: LD_VAR 0 2
16005: PPUSH
16006: LD_INT 24
16008: PPUSH
16009: CALL_OW 120
// end ; end ;
16013: PPOPN 2
16015: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
16016: LD_INT 0
16018: PPUSH
// begin if GetSide ( vehicle ) = 1 then
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 255
16028: PUSH
16029: LD_INT 1
16031: EQUAL
16032: IFFALSE 16048
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
16034: LD_ADDR_EXP 42
16038: PUSH
16039: LD_EXP 42
16043: PUSH
16044: LD_INT 1
16046: PLUS
16047: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16048: LD_VAR 0 1
16052: PPUSH
16053: CALL_OW 255
16057: PUSH
16058: LD_INT 3
16060: EQUAL
16061: PUSH
16062: LD_VAR 0 1
16066: PPUSH
16067: CALL_OW 264
16071: PUSH
16072: LD_INT 42
16074: PUSH
16075: LD_INT 43
16077: PUSH
16078: LD_INT 44
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: LIST
16085: IN
16086: AND
16087: IFFALSE 16105
// ruMobile := ruMobile union vehicle ;
16089: LD_ADDR_EXP 46
16093: PUSH
16094: LD_EXP 46
16098: PUSH
16099: LD_VAR 0 1
16103: UNION
16104: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16105: LD_VAR 0 1
16109: PPUSH
16110: CALL_OW 264
16114: PUSH
16115: LD_INT 53
16117: EQUAL
16118: IFFALSE 16254
// begin uc_side = 3 ;
16120: LD_ADDR_OWVAR 20
16124: PUSH
16125: LD_INT 3
16127: ST_TO_ADDR
// uc_nation = 3 ;
16128: LD_ADDR_OWVAR 21
16132: PUSH
16133: LD_INT 3
16135: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16136: LD_INT 0
16138: PPUSH
16139: LD_EXP 17
16143: PPUSH
16144: CALL_OW 383
// driver := CreateHuman ;
16148: LD_ADDR_VAR 0 3
16152: PUSH
16153: CALL_OW 44
16157: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16158: LD_VAR 0 3
16162: PPUSH
16163: LD_VAR 0 2
16167: PPUSH
16168: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16172: LD_VAR 0 1
16176: PPUSH
16177: LD_INT 21
16179: PPUSH
16180: CALL 5227 0 2
// repeat wait ( 0 0$1 ) ;
16184: LD_INT 35
16186: PPUSH
16187: CALL_OW 67
// until not HasTask ( vehicle ) ;
16191: LD_VAR 0 1
16195: PPUSH
16196: CALL_OW 314
16200: NOT
16201: IFFALSE 16184
// driver := IsDrivenBy ( vehicle ) ;
16203: LD_ADDR_VAR 0 3
16207: PUSH
16208: LD_VAR 0 1
16212: PPUSH
16213: CALL_OW 311
16217: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16218: LD_VAR 0 3
16222: PPUSH
16223: LD_INT 104
16225: PPUSH
16226: LD_INT 73
16228: PPUSH
16229: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16233: LD_VAR 0 3
16237: PPUSH
16238: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16242: LD_VAR 0 3
16246: PPUSH
16247: LD_INT 24
16249: PPUSH
16250: CALL_OW 180
// end ; end ;
16254: PPOPN 3
16256: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16257: LD_VAR 0 1
16261: PPUSH
16262: CALL_OW 255
16266: PUSH
16267: LD_INT 3
16269: EQUAL
16270: PUSH
16271: LD_VAR 0 1
16275: PPUSH
16276: CALL_OW 247
16280: PUSH
16281: LD_INT 2
16283: EQUAL
16284: AND
16285: PUSH
16286: LD_VAR 0 1
16290: PPUSH
16291: CALL_OW 264
16295: PUSH
16296: LD_INT 42
16298: PUSH
16299: LD_INT 43
16301: PUSH
16302: LD_INT 44
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: LIST
16309: IN
16310: AND
16311: IFFALSE 16360
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16313: LD_INT 24
16315: PPUSH
16316: LD_VAR 0 1
16320: PPUSH
16321: CALL_OW 265
16325: PPUSH
16326: LD_VAR 0 1
16330: PPUSH
16331: CALL_OW 262
16335: PPUSH
16336: LD_VAR 0 1
16340: PPUSH
16341: CALL_OW 263
16345: PPUSH
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 264
16355: PPUSH
16356: CALL_OW 185
// end ;
16360: PPOPN 1
16362: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16363: LD_VAR 0 1
16367: PPUSH
16368: CALL_OW 255
16372: PUSH
16373: LD_INT 3
16375: EQUAL
16376: PUSH
16377: LD_VAR 0 2
16381: PPUSH
16382: CALL_OW 255
16386: PUSH
16387: LD_INT 3
16389: EQUAL
16390: AND
16391: PUSH
16392: LD_INT 24
16394: PPUSH
16395: CALL_OW 302
16399: AND
16400: PUSH
16401: LD_VAR 0 1
16405: PPUSH
16406: CALL_OW 302
16410: NOT
16411: AND
16412: IFFALSE 16426
// ComEnterUnit ( human , rubfact0 ) ;
16414: LD_VAR 0 2
16418: PPUSH
16419: LD_INT 24
16421: PPUSH
16422: CALL_OW 120
// end ;
16426: PPOPN 2
16428: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16429: LD_VAR 0 1
16433: PUSH
16434: LD_INT 24
16436: EQUAL
16437: PUSH
16438: LD_VAR 0 2
16442: PPUSH
16443: CALL_OW 256
16447: PUSH
16448: LD_INT 1000
16450: LESS
16451: AND
16452: IFFALSE 16466
// SetLives ( un , 1000 ) ;
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_INT 1000
16461: PPUSH
16462: CALL_OW 234
// end ;
16466: PPOPN 2
16468: END
// on Command ( comandid ) do var i , j , tmp ;
16469: LD_INT 0
16471: PPUSH
16472: PPUSH
16473: PPUSH
// begin SOS_Command ( comandid ) ;
16474: LD_VAR 0 1
16478: PPUSH
16479: CALL 34322 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16483: LD_INT 22
16485: PUSH
16486: LD_INT 4
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PPUSH
16493: CALL_OW 69
16497: NOT
16498: IFFALSE 16502
// exit ;
16500: GO 16667
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16502: LD_ADDR_VAR 0 2
16506: PUSH
16507: LD_INT 22
16509: PUSH
16510: LD_INT 1
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 2
16519: PUSH
16520: LD_INT 21
16522: PUSH
16523: LD_INT 1
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 21
16532: PUSH
16533: LD_INT 2
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: LIST
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PPUSH
16549: CALL_OW 69
16553: PUSH
16554: FOR_IN
16555: IFFALSE 16665
// begin if GetTaskList ( i ) > 0 then
16557: LD_VAR 0 2
16561: PPUSH
16562: CALL_OW 437
16566: PUSH
16567: LD_INT 0
16569: GREATER
16570: IFFALSE 16663
// begin for j = 1 to GetTaskList ( i ) do
16572: LD_ADDR_VAR 0 3
16576: PUSH
16577: DOUBLE
16578: LD_INT 1
16580: DEC
16581: ST_TO_ADDR
16582: LD_VAR 0 2
16586: PPUSH
16587: CALL_OW 437
16591: PUSH
16592: FOR_TO
16593: IFFALSE 16661
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16595: LD_ADDR_VAR 0 4
16599: PUSH
16600: LD_VAR 0 2
16604: PPUSH
16605: CALL_OW 437
16609: PUSH
16610: LD_VAR 0 3
16614: ARRAY
16615: PUSH
16616: LD_INT 4
16618: ARRAY
16619: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16620: LD_VAR 0 4
16624: PPUSH
16625: CALL_OW 255
16629: PUSH
16630: LD_INT 4
16632: EQUAL
16633: PUSH
16634: LD_VAR 0 4
16638: PPUSH
16639: CALL_OW 255
16643: PUSH
16644: LD_INT 0
16646: EQUAL
16647: OR
16648: IFFALSE 16659
// ComStop ( i ) ;
16650: LD_VAR 0 2
16654: PPUSH
16655: CALL_OW 141
// end ;
16659: GO 16592
16661: POP
16662: POP
// end ; end ;
16663: GO 16554
16665: POP
16666: POP
// end ; end_of_file
16667: PPOPN 4
16669: END
// every 10 10$0 do
16670: GO 16672
16672: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16673: LD_INT 5
16675: PPUSH
16676: LD_INT 3
16678: PPUSH
16679: LD_INT 2
16681: PUSH
16682: LD_INT 2
16684: PUSH
16685: LD_INT 3
16687: PUSH
16688: LD_INT 4
16690: PUSH
16691: LD_INT 4
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: PUSH
16700: LD_OWVAR 67
16704: ARRAY
16705: PLUS
16706: PPUSH
16707: LD_INT 0
16709: PPUSH
16710: LD_EXP 16
16714: PPUSH
16715: LD_EXP 17
16719: PPUSH
16720: CALL_OW 12
16724: PPUSH
16725: LD_INT 4
16727: PPUSH
16728: LD_INT 14
16730: PPUSH
16731: LD_INT 1
16733: PPUSH
16734: LD_INT 2
16736: PPUSH
16737: CALL 6968 0 9
16741: END
// every 20 20$0 do
16742: GO 16744
16744: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16745: LD_INT 5
16747: PPUSH
16748: LD_INT 3
16750: PPUSH
16751: LD_INT 4
16753: PUSH
16754: LD_INT 2
16756: PUSH
16757: LD_INT 3
16759: PUSH
16760: LD_INT 4
16762: PUSH
16763: LD_INT 5
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: PUSH
16772: LD_OWVAR 67
16776: ARRAY
16777: PLUS
16778: PPUSH
16779: LD_INT 2
16781: PPUSH
16782: LD_EXP 16
16786: PPUSH
16787: LD_EXP 17
16791: PPUSH
16792: CALL_OW 12
16796: PPUSH
16797: LD_INT 4
16799: PPUSH
16800: LD_INT 14
16802: PPUSH
16803: LD_INT 1
16805: PPUSH
16806: LD_INT 1
16808: PPUSH
16809: CALL 6968 0 9
16813: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16814: GO 16816
16816: DISABLE
16817: LD_INT 0
16819: PPUSH
16820: PPUSH
16821: PPUSH
16822: PPUSH
16823: PPUSH
// begin hex := [ 123 , 95 ] ;
16824: LD_ADDR_VAR 0 4
16828: PUSH
16829: LD_INT 123
16831: PUSH
16832: LD_INT 95
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: ST_TO_ADDR
// tmp := [ ] ;
16839: LD_ADDR_VAR 0 5
16843: PUSH
16844: EMPTY
16845: ST_TO_ADDR
// if Difficulty > 1 then
16846: LD_OWVAR 67
16850: PUSH
16851: LD_INT 1
16853: GREATER
16854: IFFALSE 16864
// specAttack := true ;
16856: LD_ADDR_EXP 47
16860: PUSH
16861: LD_INT 1
16863: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16864: LD_ADDR_VAR 0 1
16868: PUSH
16869: DOUBLE
16870: LD_INT 1
16872: DEC
16873: ST_TO_ADDR
16874: LD_INT 4
16876: PUSH
16877: LD_INT 5
16879: PUSH
16880: LD_INT 6
16882: PUSH
16883: LD_INT 7
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: PUSH
16892: LD_OWVAR 67
16896: ARRAY
16897: PUSH
16898: FOR_TO
16899: IFFALSE 17197
// begin uc_side := 5 ;
16901: LD_ADDR_OWVAR 20
16905: PUSH
16906: LD_INT 5
16908: ST_TO_ADDR
// uc_nation := 3 ;
16909: LD_ADDR_OWVAR 21
16913: PUSH
16914: LD_INT 3
16916: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16917: LD_ADDR_OWVAR 37
16921: PUSH
16922: LD_INT 21
16924: PUSH
16925: LD_INT 22
16927: PUSH
16928: LD_INT 23
16930: PUSH
16931: LD_INT 24
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: PUSH
16940: LD_VAR 0 1
16944: PUSH
16945: LD_OWVAR 67
16949: MOD
16950: PUSH
16951: LD_INT 1
16953: PLUS
16954: ARRAY
16955: ST_TO_ADDR
// vc_engine := engine_combustion ;
16956: LD_ADDR_OWVAR 39
16960: PUSH
16961: LD_INT 1
16963: ST_TO_ADDR
// vc_control := control_manual ;
16964: LD_ADDR_OWVAR 38
16968: PUSH
16969: LD_INT 1
16971: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16972: LD_ADDR_OWVAR 40
16976: PUSH
16977: LD_INT 42
16979: PUSH
16980: LD_INT 43
16982: PUSH
16983: LD_INT 44
16985: PUSH
16986: LD_INT 44
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: PUSH
16995: LD_VAR 0 1
16999: PUSH
17000: LD_OWVAR 67
17004: MOD
17005: PUSH
17006: LD_INT 1
17008: PLUS
17009: ARRAY
17010: ST_TO_ADDR
// veh := CreateVehicle ;
17011: LD_ADDR_VAR 0 3
17015: PUSH
17016: CALL_OW 45
17020: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17021: LD_VAR 0 3
17025: PPUSH
17026: LD_INT 5
17028: PPUSH
17029: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
17033: LD_INT 35
17035: PPUSH
17036: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17040: LD_VAR 0 4
17044: PUSH
17045: LD_INT 1
17047: ARRAY
17048: PPUSH
17049: LD_VAR 0 4
17053: PUSH
17054: LD_INT 2
17056: ARRAY
17057: PPUSH
17058: CALL_OW 428
17062: PUSH
17063: LD_INT 0
17065: EQUAL
17066: IFFALSE 17033
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17068: LD_VAR 0 3
17072: PPUSH
17073: LD_VAR 0 4
17077: PUSH
17078: LD_INT 1
17080: ARRAY
17081: PPUSH
17082: LD_VAR 0 4
17086: PUSH
17087: LD_INT 2
17089: ARRAY
17090: PPUSH
17091: LD_INT 0
17093: PPUSH
17094: CALL_OW 48
// uc_side := 5 ;
17098: LD_ADDR_OWVAR 20
17102: PUSH
17103: LD_INT 5
17105: ST_TO_ADDR
// uc_nation := 3 ;
17106: LD_ADDR_OWVAR 21
17110: PUSH
17111: LD_INT 3
17113: ST_TO_ADDR
// PrepareMechanic ( false , 2 + Difficulty ) ;
17114: LD_INT 0
17116: PPUSH
17117: LD_INT 2
17119: PUSH
17120: LD_OWVAR 67
17124: PLUS
17125: PPUSH
17126: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17130: CALL_OW 44
17134: PPUSH
17135: LD_VAR 0 3
17139: PPUSH
17140: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17144: LD_VAR 0 3
17148: PPUSH
17149: LD_INT 101
17151: PPUSH
17152: LD_INT 77
17154: PPUSH
17155: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17159: LD_ADDR_VAR 0 5
17163: PUSH
17164: LD_VAR 0 5
17168: PPUSH
17169: LD_VAR 0 5
17173: PUSH
17174: LD_INT 1
17176: PLUS
17177: PPUSH
17178: LD_VAR 0 3
17182: PPUSH
17183: CALL_OW 1
17187: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17188: LD_INT 105
17190: PPUSH
17191: CALL_OW 67
// end ;
17195: GO 16898
17197: POP
17198: POP
// repeat wait ( 0 0$1 ) ;
17199: LD_INT 35
17201: PPUSH
17202: CALL_OW 67
// for i in tmp do
17206: LD_ADDR_VAR 0 1
17210: PUSH
17211: LD_VAR 0 5
17215: PUSH
17216: FOR_IN
17217: IFFALSE 17285
// if not IsOk ( i ) then
17219: LD_VAR 0 1
17223: PPUSH
17224: CALL_OW 302
17228: NOT
17229: IFFALSE 17249
// tmp := tmp diff i else
17231: LD_ADDR_VAR 0 5
17235: PUSH
17236: LD_VAR 0 5
17240: PUSH
17241: LD_VAR 0 1
17245: DIFF
17246: ST_TO_ADDR
17247: GO 17283
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17249: LD_VAR 0 1
17253: PPUSH
17254: LD_INT 22
17256: PUSH
17257: LD_INT 1
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PPUSH
17264: CALL_OW 69
17268: PPUSH
17269: LD_VAR 0 1
17273: PPUSH
17274: CALL_OW 74
17278: PPUSH
17279: CALL_OW 115
17283: GO 17216
17285: POP
17286: POP
// until not tmp ;
17287: LD_VAR 0 5
17291: NOT
17292: IFFALSE 17199
// end ;
17294: PPOPN 5
17296: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17297: LD_EXP 47
17301: IFFALSE 17668
17303: GO 17305
17305: DISABLE
17306: LD_INT 0
17308: PPUSH
17309: PPUSH
17310: PPUSH
17311: PPUSH
// begin wait ( 0 0$20 ) ;
17312: LD_INT 700
17314: PPUSH
17315: CALL_OW 67
// uc_side := 5 ;
17319: LD_ADDR_OWVAR 20
17323: PUSH
17324: LD_INT 5
17326: ST_TO_ADDR
// uc_nation := 3 ;
17327: LD_ADDR_OWVAR 21
17331: PUSH
17332: LD_INT 3
17334: ST_TO_ADDR
// InitHc ;
17335: CALL_OW 19
// hc_importance := 0 ;
17339: LD_ADDR_OWVAR 32
17343: PUSH
17344: LD_INT 0
17346: ST_TO_ADDR
// tmp := [ ] ;
17347: LD_ADDR_VAR 0 2
17351: PUSH
17352: EMPTY
17353: ST_TO_ADDR
// PrepareHuman ( false , 2 , 6 ) ;
17354: LD_INT 0
17356: PPUSH
17357: LD_INT 2
17359: PPUSH
17360: LD_INT 6
17362: PPUSH
17363: CALL_OW 380
// eng := CreateHuman ;
17367: LD_ADDR_VAR 0 4
17371: PUSH
17372: CALL_OW 44
17376: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17377: LD_VAR 0 4
17381: PPUSH
17382: LD_INT 78
17384: PPUSH
17385: LD_INT 2
17387: PPUSH
17388: LD_INT 4
17390: PPUSH
17391: LD_INT 0
17393: PPUSH
17394: CALL_OW 50
// for i = 1 to 2 + Difficulty do
17398: LD_ADDR_VAR 0 3
17402: PUSH
17403: DOUBLE
17404: LD_INT 1
17406: DEC
17407: ST_TO_ADDR
17408: LD_INT 2
17410: PUSH
17411: LD_OWVAR 67
17415: PLUS
17416: PUSH
17417: FOR_TO
17418: IFFALSE 17503
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17420: LD_INT 0
17422: PPUSH
17423: LD_INT 1
17425: PPUSH
17426: LD_INT 4
17428: PUSH
17429: LD_INT 5
17431: PUSH
17432: LD_INT 6
17434: PUSH
17435: LD_INT 6
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: PUSH
17444: LD_OWVAR 67
17448: ARRAY
17449: PPUSH
17450: CALL_OW 380
// un := CreateHuman ;
17454: LD_ADDR_VAR 0 1
17458: PUSH
17459: CALL_OW 44
17463: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17464: LD_VAR 0 1
17468: PPUSH
17469: LD_INT 78
17471: PPUSH
17472: LD_INT 2
17474: PPUSH
17475: LD_INT 4
17477: PPUSH
17478: LD_INT 0
17480: PPUSH
17481: CALL_OW 50
// tmp := tmp ^ un ;
17485: LD_ADDR_VAR 0 2
17489: PUSH
17490: LD_VAR 0 2
17494: PUSH
17495: LD_VAR 0 1
17499: ADD
17500: ST_TO_ADDR
// end ;
17501: GO 17417
17503: POP
17504: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17505: LD_VAR 0 2
17509: PPUSH
17510: LD_INT 49
17512: PPUSH
17513: LD_INT 3
17515: PPUSH
17516: CALL_OW 111
// wait ( 0 0$2 ) ;
17520: LD_INT 70
17522: PPUSH
17523: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17527: LD_VAR 0 4
17531: PPUSH
17532: LD_INT 49
17534: PPUSH
17535: LD_INT 3
17537: PPUSH
17538: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17542: LD_VAR 0 4
17546: PPUSH
17547: LD_INT 4
17549: PPUSH
17550: CALL_OW 227
// wait ( 0 0$10 ) ;
17554: LD_INT 350
17556: PPUSH
17557: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17561: LD_INT 35
17563: PPUSH
17564: CALL_OW 67
// for i in tmp do
17568: LD_ADDR_VAR 0 3
17572: PUSH
17573: LD_VAR 0 2
17577: PUSH
17578: FOR_IN
17579: IFFALSE 17659
// if not IsOk ( i ) then
17581: LD_VAR 0 3
17585: PPUSH
17586: CALL_OW 302
17590: NOT
17591: IFFALSE 17611
// tmp := tmp diff i else
17593: LD_ADDR_VAR 0 2
17597: PUSH
17598: LD_VAR 0 2
17602: PUSH
17603: LD_VAR 0 3
17607: DIFF
17608: ST_TO_ADDR
17609: GO 17657
// if not HasTask ( i ) then
17611: LD_VAR 0 3
17615: PPUSH
17616: CALL_OW 314
17620: NOT
17621: IFFALSE 17657
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17623: LD_VAR 0 3
17627: PPUSH
17628: LD_INT 22
17630: PUSH
17631: LD_INT 1
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PPUSH
17638: CALL_OW 69
17642: PPUSH
17643: LD_VAR 0 3
17647: PPUSH
17648: CALL_OW 74
17652: PPUSH
17653: CALL_OW 115
17657: GO 17578
17659: POP
17660: POP
// until not tmp ;
17661: LD_VAR 0 2
17665: NOT
17666: IFFALSE 17561
// end ; end_of_file
17668: PPOPN 4
17670: END
// every 0 0$1 trigger startTimer = 1 do
17671: LD_EXP 30
17675: PUSH
17676: LD_INT 1
17678: EQUAL
17679: IFFALSE 17809
17681: GO 17683
17683: DISABLE
// begin enable ;
17684: ENABLE
// if timerStatus = 1 then
17685: LD_EXP 29
17689: PUSH
17690: LD_INT 1
17692: EQUAL
17693: IFFALSE 17726
// begin timeToSupport = timeToSupport - 0 0$01 ;
17695: LD_ADDR_EXP 28
17699: PUSH
17700: LD_EXP 28
17704: PUSH
17705: LD_INT 35
17707: MINUS
17708: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17709: LD_ADDR_OWVAR 47
17713: PUSH
17714: LD_STRING #Am04-1
17716: PUSH
17717: LD_EXP 28
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: ST_TO_ADDR
// end ; if timerStatus = 2 then
17726: LD_EXP 29
17730: PUSH
17731: LD_INT 2
17733: EQUAL
17734: IFFALSE 17767
// begin timeToSupport = timeToSupport - 0 0$01 ;
17736: LD_ADDR_EXP 28
17740: PUSH
17741: LD_EXP 28
17745: PUSH
17746: LD_INT 35
17748: MINUS
17749: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17750: LD_ADDR_OWVAR 47
17754: PUSH
17755: LD_STRING #Am04-2
17757: PUSH
17758: LD_EXP 28
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: ST_TO_ADDR
// end ; if timerStatus = 3 then
17767: LD_EXP 29
17771: PUSH
17772: LD_INT 3
17774: EQUAL
17775: IFFALSE 17791
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17777: LD_ADDR_EXP 27
17781: PUSH
17782: LD_EXP 27
17786: PUSH
17787: LD_INT 35
17789: MINUS
17790: ST_TO_ADDR
// if timerStatus = 4 then
17791: LD_EXP 29
17795: PUSH
17796: LD_INT 4
17798: EQUAL
17799: IFFALSE 17809
// display_strings =  ;
17801: LD_ADDR_OWVAR 47
17805: PUSH
17806: LD_STRING 
17808: ST_TO_ADDR
// end ; end_of_file
17809: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17810: LD_EXP 15
17814: PPUSH
17815: CALL_OW 301
17819: PUSH
17820: LD_INT 22
17822: PUSH
17823: LD_INT 3
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 21
17832: PUSH
17833: LD_INT 1
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PPUSH
17844: CALL_OW 69
17848: PUSH
17849: LD_INT 14
17851: PUSH
17852: LD_INT 13
17854: PUSH
17855: LD_INT 12
17857: PUSH
17858: LD_INT 11
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: PUSH
17867: LD_OWVAR 67
17871: ARRAY
17872: LESS
17873: AND
17874: IFFALSE 18460
17876: GO 17878
17878: DISABLE
17879: LD_INT 0
17881: PPUSH
17882: PPUSH
17883: PPUSH
// begin AIEnable = 0 ;
17884: LD_ADDR_EXP 37
17888: PUSH
17889: LD_INT 0
17891: ST_TO_ADDR
// escapeAvalaible = 1 ;
17892: LD_ADDR_EXP 40
17896: PUSH
17897: LD_INT 1
17899: ST_TO_ADDR
// Video ( true ) ;
17900: LD_INT 1
17902: PPUSH
17903: CALL 75565 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17907: LD_INT 3
17909: PPUSH
17910: LD_INT 1
17912: PPUSH
17913: LD_INT 1
17915: PPUSH
17916: LD_INT 0
17918: PPUSH
17919: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17923: LD_INT 6
17925: PPUSH
17926: LD_INT 1
17928: PPUSH
17929: LD_INT 1
17931: PPUSH
17932: LD_INT 0
17934: PPUSH
17935: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17939: LD_INT 5
17941: PPUSH
17942: LD_INT 1
17944: PPUSH
17945: LD_INT 1
17947: PPUSH
17948: LD_INT 0
17950: PPUSH
17951: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17955: LD_INT 3
17957: PPUSH
17958: LD_INT 1
17960: PPUSH
17961: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17965: LD_INT 97
17967: PPUSH
17968: LD_INT 91
17970: PPUSH
17971: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17975: LD_INT 22
17977: PUSH
17978: LD_INT 3
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 21
17987: PUSH
17988: LD_INT 1
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PPUSH
17999: CALL_OW 69
18003: PPUSH
18004: CALL_OW 121
// wait ( 0 0$01 ) ;
18008: LD_INT 35
18010: PPUSH
18011: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18015: LD_INT 22
18017: PUSH
18018: LD_INT 3
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 21
18027: PUSH
18028: LD_INT 1
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PPUSH
18039: CALL_OW 69
18043: PPUSH
18044: LD_INT 124
18046: PPUSH
18047: LD_INT 98
18049: PPUSH
18050: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18054: LD_INT 22
18056: PUSH
18057: LD_INT 5
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 21
18066: PUSH
18067: LD_INT 1
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PPUSH
18078: CALL_OW 69
18082: PPUSH
18083: CALL_OW 121
// wait ( 0 0$01 ) ;
18087: LD_INT 35
18089: PPUSH
18090: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18094: LD_INT 22
18096: PUSH
18097: LD_INT 5
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 21
18106: PUSH
18107: LD_INT 1
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PPUSH
18118: CALL_OW 69
18122: PPUSH
18123: LD_INT 124
18125: PPUSH
18126: LD_INT 98
18128: PPUSH
18129: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18133: LD_INT 22
18135: PUSH
18136: LD_INT 6
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 21
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PPUSH
18157: CALL_OW 69
18161: PPUSH
18162: CALL_OW 121
// wait ( 0 0$01 ) ;
18166: LD_INT 35
18168: PPUSH
18169: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18173: LD_INT 22
18175: PUSH
18176: LD_INT 6
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 21
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PPUSH
18197: CALL_OW 69
18201: PPUSH
18202: LD_INT 124
18204: PPUSH
18205: LD_INT 98
18207: PPUSH
18208: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18212: LD_INT 22
18214: PUSH
18215: LD_INT 1
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 21
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PPUSH
18236: CALL_OW 69
18240: PPUSH
18241: LD_INT 124
18243: PPUSH
18244: LD_INT 96
18246: PPUSH
18247: CALL_OW 114
// wait ( 0 0$1 ) ;
18251: LD_INT 35
18253: PPUSH
18254: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18258: LD_INT 124
18260: PPUSH
18261: LD_INT 96
18263: PPUSH
18264: CALL_OW 84
// p := 0 0$0 ;
18268: LD_ADDR_VAR 0 3
18272: PUSH
18273: LD_INT 0
18275: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18276: LD_ADDR_VAR 0 2
18280: PUSH
18281: LD_INT 2
18283: PUSH
18284: LD_INT 22
18286: PUSH
18287: LD_INT 3
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 22
18296: PUSH
18297: LD_INT 6
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 21
18311: PUSH
18312: LD_INT 1
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PPUSH
18323: CALL_OW 69
18327: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18328: LD_INT 35
18330: PPUSH
18331: CALL_OW 67
// p := p + 0 0$1 ;
18335: LD_ADDR_VAR 0 3
18339: PUSH
18340: LD_VAR 0 3
18344: PUSH
18345: LD_INT 35
18347: PLUS
18348: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18349: LD_VAR 0 2
18353: PPUSH
18354: LD_INT 5
18356: PPUSH
18357: CALL_OW 113
// for i in tmp do
18361: LD_ADDR_VAR 0 1
18365: PUSH
18366: LD_VAR 0 2
18370: PUSH
18371: FOR_IN
18372: IFFALSE 18399
// if IsInArea ( tmp , RussianEscape ) then
18374: LD_VAR 0 2
18378: PPUSH
18379: LD_INT 5
18381: PPUSH
18382: CALL_OW 308
18386: IFFALSE 18397
// RemoveUnit ( i ) ;
18388: LD_VAR 0 1
18392: PPUSH
18393: CALL_OW 64
18397: GO 18371
18399: POP
18400: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18401: LD_INT 23
18403: PUSH
18404: LD_INT 3
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 21
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 24
18423: PUSH
18424: LD_INT 250
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: LIST
18435: PPUSH
18436: CALL_OW 69
18440: PUSH
18441: LD_INT 0
18443: EQUAL
18444: PUSH
18445: LD_VAR 0 3
18449: PUSH
18450: LD_INT 245
18452: GREATEREQUAL
18453: OR
18454: IFFALSE 18328
// FinishMission ;
18456: CALL 18463 0 0
// end ;
18460: PPOPN 3
18462: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18463: LD_INT 0
18465: PPUSH
18466: PPUSH
18467: PPUSH
18468: PPUSH
18469: PPUSH
// if not vehicleProduceCounter then
18470: LD_EXP 42
18474: NOT
18475: IFFALSE 18484
// SetAchievement ( ACH_INFANTRY ) ;
18477: LD_STRING ACH_INFANTRY
18479: PPUSH
18480: CALL_OW 543
// if tick <= 20 20$00 then
18484: LD_OWVAR 1
18488: PUSH
18489: LD_INT 42000
18491: LESSEQUAL
18492: IFFALSE 18508
// begin wait ( 3 ) ;
18494: LD_INT 3
18496: PPUSH
18497: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18501: LD_STRING ACH_ASPEED_4
18503: PPUSH
18504: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18508: LD_INT 22
18510: PPUSH
18511: CALL 19152 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18515: LD_INT 69
18517: PPUSH
18518: LD_INT 1
18520: PPUSH
18521: CALL_OW 321
18525: PPUSH
18526: LD_STRING GatlingInGamma
18528: PPUSH
18529: CALL_OW 39
// m1 := false ;
18533: LD_ADDR_VAR 0 3
18537: PUSH
18538: LD_INT 0
18540: ST_TO_ADDR
// m2 := false ;
18541: LD_ADDR_VAR 0 4
18545: PUSH
18546: LD_INT 0
18548: ST_TO_ADDR
// m3 := false ;
18549: LD_ADDR_VAR 0 5
18553: PUSH
18554: LD_INT 0
18556: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18557: LD_EXP 34
18561: PUSH
18562: LD_INT 1
18564: EQUAL
18565: PUSH
18566: LD_EXP 35
18570: PUSH
18571: LD_INT 1
18573: EQUAL
18574: AND
18575: IFFALSE 18597
// begin AddMedal ( oil , 1 ) ;
18577: LD_STRING oil
18579: PPUSH
18580: LD_INT 1
18582: PPUSH
18583: CALL_OW 101
// m1 := true ;
18587: LD_ADDR_VAR 0 3
18591: PUSH
18592: LD_INT 1
18594: ST_TO_ADDR
// end else
18595: GO 18690
// begin if buildOil = 1 and buildPower = 0 then
18597: LD_EXP 34
18601: PUSH
18602: LD_INT 1
18604: EQUAL
18605: PUSH
18606: LD_EXP 35
18610: PUSH
18611: LD_INT 0
18613: EQUAL
18614: AND
18615: IFFALSE 18628
// AddMedal ( oil , - 1 ) ;
18617: LD_STRING oil
18619: PPUSH
18620: LD_INT 1
18622: NEG
18623: PPUSH
18624: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18628: LD_EXP 34
18632: PUSH
18633: LD_INT 0
18635: EQUAL
18636: PUSH
18637: LD_EXP 35
18641: PUSH
18642: LD_INT 1
18644: EQUAL
18645: AND
18646: IFFALSE 18659
// AddMedal ( oil , - 2 ) ;
18648: LD_STRING oil
18650: PPUSH
18651: LD_INT 2
18653: NEG
18654: PPUSH
18655: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18659: LD_EXP 34
18663: PUSH
18664: LD_INT 0
18666: EQUAL
18667: PUSH
18668: LD_EXP 35
18672: PUSH
18673: LD_INT 0
18675: EQUAL
18676: AND
18677: IFFALSE 18690
// AddMedal ( oil , - 3 ) ;
18679: LD_STRING oil
18681: PPUSH
18682: LD_INT 3
18684: NEG
18685: PPUSH
18686: CALL_OW 101
// end ; if lostCounter > 3 then
18690: LD_EXP 38
18694: PUSH
18695: LD_INT 3
18697: GREATER
18698: IFFALSE 18713
// AddMedal ( deaths , - 1 ) else
18700: LD_STRING deaths
18702: PPUSH
18703: LD_INT 1
18705: NEG
18706: PPUSH
18707: CALL_OW 101
18711: GO 18731
// begin AddMedal ( deaths , 1 ) ;
18713: LD_STRING deaths
18715: PPUSH
18716: LD_INT 1
18718: PPUSH
18719: CALL_OW 101
// m2 := true ;
18723: LD_ADDR_VAR 0 4
18727: PUSH
18728: LD_INT 1
18730: ST_TO_ADDR
// end ; if honor = 1 then
18731: LD_EXP 39
18735: PUSH
18736: LD_INT 1
18738: EQUAL
18739: IFFALSE 18761
// begin AddMedal ( honour , 1 ) ;
18741: LD_STRING honour
18743: PPUSH
18744: LD_INT 1
18746: PPUSH
18747: CALL_OW 101
// m3 := true ;
18751: LD_ADDR_VAR 0 5
18755: PUSH
18756: LD_INT 1
18758: ST_TO_ADDR
// end else
18759: GO 18772
// AddMedal ( honour , - 1 ) ;
18761: LD_STRING honour
18763: PPUSH
18764: LD_INT 1
18766: NEG
18767: PPUSH
18768: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18772: LD_VAR 0 3
18776: PUSH
18777: LD_VAR 0 4
18781: AND
18782: PUSH
18783: LD_VAR 0 5
18787: AND
18788: PUSH
18789: LD_OWVAR 67
18793: PUSH
18794: LD_INT 3
18796: GREATEREQUAL
18797: AND
18798: IFFALSE 18810
// SetAchievementEX ( ACH_AMER , 4 ) ;
18800: LD_STRING ACH_AMER
18802: PPUSH
18803: LD_INT 4
18805: PPUSH
18806: CALL_OW 564
// GiveMedals ( Main ) ;
18810: LD_STRING Main
18812: PPUSH
18813: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18817: LD_INT 22
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 23
18829: PUSH
18830: LD_INT 1
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 21
18839: PUSH
18840: LD_INT 1
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: PPUSH
18852: CALL_OW 69
18856: PPUSH
18857: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18861: LD_EXP 1
18865: PPUSH
18866: LD_EXP 48
18870: PUSH
18871: LD_STRING JMM
18873: STR
18874: PPUSH
18875: CALL_OW 38
// if IsOK ( Bobby ) then
18879: LD_EXP 2
18883: PPUSH
18884: CALL_OW 302
18888: IFFALSE 18908
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18890: LD_EXP 2
18894: PPUSH
18895: LD_EXP 48
18899: PUSH
18900: LD_STRING Bobby
18902: STR
18903: PPUSH
18904: CALL_OW 38
// if IsOK ( Cyrus ) then
18908: LD_EXP 3
18912: PPUSH
18913: CALL_OW 302
18917: IFFALSE 18937
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18919: LD_EXP 3
18923: PPUSH
18924: LD_EXP 48
18928: PUSH
18929: LD_STRING Cyrus
18931: STR
18932: PPUSH
18933: CALL_OW 38
// if IsOK ( Lisa ) then
18937: LD_EXP 4
18941: PPUSH
18942: CALL_OW 302
18946: IFFALSE 18966
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18948: LD_EXP 4
18952: PPUSH
18953: LD_EXP 48
18957: PUSH
18958: LD_STRING Lisa
18960: STR
18961: PPUSH
18962: CALL_OW 38
// if IsOK ( Brown ) then
18966: LD_EXP 7
18970: PPUSH
18971: CALL_OW 302
18975: IFFALSE 18995
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18977: LD_EXP 7
18981: PPUSH
18982: LD_EXP 48
18986: PUSH
18987: LD_STRING Brown
18989: STR
18990: PPUSH
18991: CALL_OW 38
// if not IsDead ( Donaldson ) then
18995: LD_EXP 13
18999: PPUSH
19000: CALL_OW 301
19004: NOT
19005: IFFALSE 19025
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19007: LD_EXP 13
19011: PPUSH
19012: LD_EXP 48
19016: PUSH
19017: LD_STRING Donaldson
19019: STR
19020: PPUSH
19021: CALL_OW 38
// if not IsDead ( Frank ) then
19025: LD_EXP 5
19029: PPUSH
19030: CALL_OW 301
19034: NOT
19035: IFFALSE 19055
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19037: LD_EXP 5
19041: PPUSH
19042: LD_EXP 48
19046: PUSH
19047: LD_STRING Frank
19049: STR
19050: PPUSH
19051: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19055: LD_INT 50
19057: PUSH
19058: EMPTY
19059: LIST
19060: PUSH
19061: LD_INT 22
19063: PUSH
19064: LD_INT 1
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 21
19073: PUSH
19074: LD_INT 1
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: LIST
19085: PPUSH
19086: CALL_OW 69
19090: PUSH
19091: LD_EXP 1
19095: PUSH
19096: LD_EXP 2
19100: PUSH
19101: LD_EXP 3
19105: PUSH
19106: LD_EXP 4
19110: PUSH
19111: LD_EXP 7
19115: PUSH
19116: LD_EXP 13
19120: PUSH
19121: LD_EXP 5
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: DIFF
19135: PPUSH
19136: LD_STRING 04_other_survivors
19138: PPUSH
19139: CALL_OW 38
// YouWin ;
19143: CALL_OW 103
// end ;
19147: LD_VAR 0 1
19151: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19152: LD_INT 0
19154: PPUSH
19155: PPUSH
19156: PPUSH
19157: PPUSH
// gammaBase = [ ] ;
19158: LD_ADDR_VAR 0 4
19162: PUSH
19163: EMPTY
19164: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19165: LD_ADDR_VAR 0 5
19169: PUSH
19170: LD_VAR 0 1
19174: PPUSH
19175: LD_INT 22
19177: PUSH
19178: LD_INT 1
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 21
19187: PUSH
19188: LD_INT 3
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PPUSH
19199: CALL_OW 70
19203: ST_TO_ADDR
// for i in buildings do
19204: LD_ADDR_VAR 0 3
19208: PUSH
19209: LD_VAR 0 5
19213: PUSH
19214: FOR_IN
19215: IFFALSE 19552
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19217: LD_VAR 0 3
19221: PPUSH
19222: CALL_OW 266
19226: PUSH
19227: LD_INT 6
19229: PUSH
19230: LD_INT 7
19232: PUSH
19233: LD_INT 8
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: LIST
19240: IN
19241: IFFALSE 19355
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19243: LD_ADDR_VAR 0 4
19247: PUSH
19248: LD_VAR 0 4
19252: PUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: CALL_OW 266
19262: PUSH
19263: LD_VAR 0 3
19267: PPUSH
19268: CALL_OW 250
19272: PUSH
19273: LD_VAR 0 3
19277: PPUSH
19278: CALL_OW 251
19282: PUSH
19283: LD_VAR 0 3
19287: PPUSH
19288: CALL_OW 254
19292: PUSH
19293: LD_VAR 0 3
19297: PPUSH
19298: CALL_OW 267
19302: PUSH
19303: LD_VAR 0 3
19307: PPUSH
19308: CALL_OW 248
19312: PUSH
19313: LD_VAR 0 3
19317: PPUSH
19318: LD_INT 1
19320: PPUSH
19321: CALL_OW 268
19325: PUSH
19326: LD_VAR 0 3
19330: PPUSH
19331: LD_INT 2
19333: PPUSH
19334: CALL_OW 268
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: PUSH
19349: EMPTY
19350: LIST
19351: ADD
19352: ST_TO_ADDR
19353: GO 19550
// if GetBType ( i ) in [ b_bunker ] then
19355: LD_VAR 0 3
19359: PPUSH
19360: CALL_OW 266
19364: PUSH
19365: LD_INT 32
19367: PUSH
19368: EMPTY
19369: LIST
19370: IN
19371: IFFALSE 19468
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19373: LD_ADDR_VAR 0 4
19377: PUSH
19378: LD_VAR 0 4
19382: PUSH
19383: LD_VAR 0 3
19387: PPUSH
19388: CALL_OW 266
19392: PUSH
19393: LD_VAR 0 3
19397: PPUSH
19398: CALL_OW 250
19402: PUSH
19403: LD_VAR 0 3
19407: PPUSH
19408: CALL_OW 251
19412: PUSH
19413: LD_VAR 0 3
19417: PPUSH
19418: CALL_OW 254
19422: PUSH
19423: LD_VAR 0 3
19427: PPUSH
19428: CALL_OW 267
19432: PUSH
19433: LD_VAR 0 3
19437: PPUSH
19438: CALL_OW 248
19442: PUSH
19443: LD_VAR 0 3
19447: PPUSH
19448: CALL_OW 269
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: PUSH
19462: EMPTY
19463: LIST
19464: ADD
19465: ST_TO_ADDR
19466: GO 19550
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19468: LD_ADDR_VAR 0 4
19472: PUSH
19473: LD_VAR 0 4
19477: PUSH
19478: LD_VAR 0 3
19482: PPUSH
19483: CALL_OW 266
19487: PUSH
19488: LD_VAR 0 3
19492: PPUSH
19493: CALL_OW 250
19497: PUSH
19498: LD_VAR 0 3
19502: PPUSH
19503: CALL_OW 251
19507: PUSH
19508: LD_VAR 0 3
19512: PPUSH
19513: CALL_OW 254
19517: PUSH
19518: LD_VAR 0 3
19522: PPUSH
19523: CALL_OW 267
19527: PUSH
19528: LD_VAR 0 3
19532: PPUSH
19533: CALL_OW 248
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: PUSH
19546: EMPTY
19547: LIST
19548: ADD
19549: ST_TO_ADDR
// end ;
19550: GO 19214
19552: POP
19553: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19554: LD_VAR 0 4
19558: PPUSH
19559: LD_STRING GammaBase
19561: PPUSH
19562: CALL_OW 39
// end ; end_of_file
19566: LD_VAR 0 2
19570: RET
// every 1 1$15 do
19571: GO 19573
19573: DISABLE
// begin if supply <= 13 and supply > 7 then
19574: LD_EXP 36
19578: PUSH
19579: LD_INT 13
19581: LESSEQUAL
19582: PUSH
19583: LD_EXP 36
19587: PUSH
19588: LD_INT 7
19590: GREATER
19591: AND
19592: IFFALSE 19615
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19594: LD_INT 3
19596: PPUSH
19597: LD_INT 5
19599: PPUSH
19600: CALL_OW 12
19604: PPUSH
19605: LD_INT 18
19607: PPUSH
19608: LD_INT 1
19610: PPUSH
19611: CALL_OW 55
// if supply <= 7 and supply > 4 then
19615: LD_EXP 36
19619: PUSH
19620: LD_INT 7
19622: LESSEQUAL
19623: PUSH
19624: LD_EXP 36
19628: PUSH
19629: LD_INT 4
19631: GREATER
19632: AND
19633: IFFALSE 19656
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19635: LD_INT 3
19637: PPUSH
19638: LD_INT 5
19640: PPUSH
19641: CALL_OW 12
19645: PPUSH
19646: LD_INT 19
19648: PPUSH
19649: LD_INT 1
19651: PPUSH
19652: CALL_OW 55
// if supply <= 4 and supply > 0 then
19656: LD_EXP 36
19660: PUSH
19661: LD_INT 4
19663: LESSEQUAL
19664: PUSH
19665: LD_EXP 36
19669: PUSH
19670: LD_INT 0
19672: GREATER
19673: AND
19674: IFFALSE 19697
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19676: LD_INT 3
19678: PPUSH
19679: LD_INT 5
19681: PPUSH
19682: CALL_OW 12
19686: PPUSH
19687: LD_INT 20
19689: PPUSH
19690: LD_INT 1
19692: PPUSH
19693: CALL_OW 55
// if supply then
19697: LD_EXP 36
19701: IFFALSE 19718
// begin supply = supply - 1 ;
19703: LD_ADDR_EXP 36
19707: PUSH
19708: LD_EXP 36
19712: PUSH
19713: LD_INT 1
19715: MINUS
19716: ST_TO_ADDR
// enable ;
19717: ENABLE
// end ; end ; end_of_file
19718: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19719: LD_INT 0
19721: PPUSH
// ar_miner := 81 ;
19722: LD_ADDR_EXP 57
19726: PUSH
19727: LD_INT 81
19729: ST_TO_ADDR
// ar_crane := 88 ;
19730: LD_ADDR_EXP 56
19734: PUSH
19735: LD_INT 88
19737: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19738: LD_ADDR_EXP 51
19742: PUSH
19743: LD_INT 89
19745: ST_TO_ADDR
// us_hack := 99 ;
19746: LD_ADDR_EXP 52
19750: PUSH
19751: LD_INT 99
19753: ST_TO_ADDR
// us_artillery := 97 ;
19754: LD_ADDR_EXP 53
19758: PUSH
19759: LD_INT 97
19761: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19762: LD_ADDR_EXP 54
19766: PUSH
19767: LD_INT 91
19769: ST_TO_ADDR
// ar_mortar := 92 ;
19770: LD_ADDR_EXP 55
19774: PUSH
19775: LD_INT 92
19777: ST_TO_ADDR
// ru_radar := 98 ;
19778: LD_ADDR_EXP 50
19782: PUSH
19783: LD_INT 98
19785: ST_TO_ADDR
// tech_Artillery := 80 ;
19786: LD_ADDR_EXP 58
19790: PUSH
19791: LD_INT 80
19793: ST_TO_ADDR
// tech_RadMat := 81 ;
19794: LD_ADDR_EXP 59
19798: PUSH
19799: LD_INT 81
19801: ST_TO_ADDR
// tech_BasicTools := 82 ;
19802: LD_ADDR_EXP 60
19806: PUSH
19807: LD_INT 82
19809: ST_TO_ADDR
// tech_Cargo := 83 ;
19810: LD_ADDR_EXP 61
19814: PUSH
19815: LD_INT 83
19817: ST_TO_ADDR
// tech_Track := 84 ;
19818: LD_ADDR_EXP 62
19822: PUSH
19823: LD_INT 84
19825: ST_TO_ADDR
// tech_Crane := 85 ;
19826: LD_ADDR_EXP 63
19830: PUSH
19831: LD_INT 85
19833: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19834: LD_ADDR_EXP 64
19838: PUSH
19839: LD_INT 86
19841: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19842: LD_ADDR_EXP 65
19846: PUSH
19847: LD_INT 87
19849: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19850: LD_ADDR_EXP 66
19854: PUSH
19855: LD_INT 88
19857: ST_TO_ADDR
// class_mastodont := 31 ;
19858: LD_ADDR_EXP 67
19862: PUSH
19863: LD_INT 31
19865: ST_TO_ADDR
// class_horse := 21 ;
19866: LD_ADDR_EXP 68
19870: PUSH
19871: LD_INT 21
19873: ST_TO_ADDR
// end ;
19874: LD_VAR 0 1
19878: RET
// every 1 do
19879: GO 19881
19881: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19882: CALL 19719 0 0
19886: END
// every 0 0$1 do
19887: GO 19889
19889: DISABLE
// begin enable ;
19890: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19891: LD_STRING updateTimer(
19893: PUSH
19894: LD_OWVAR 1
19898: STR
19899: PUSH
19900: LD_STRING );
19902: STR
19903: PPUSH
19904: CALL_OW 559
// end ;
19908: END
// on MapStart ( p ) do begin if streamModeActive then
19909: LD_EXP 69
19913: IFFALSE 19922
// DefineStreamItems ( true ) ;
19915: LD_INT 1
19917: PPUSH
19918: CALL 21570 0 1
// UpdateFactoryWaypoints ( ) ;
19922: CALL 35154 0 0
// end ;
19926: PPOPN 1
19928: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19929: LD_INT 0
19931: PPUSH
// if p2 = 100 then
19932: LD_VAR 0 2
19936: PUSH
19937: LD_INT 100
19939: EQUAL
19940: IFFALSE 20943
// begin if not StreamModeActive then
19942: LD_EXP 69
19946: NOT
19947: IFFALSE 19957
// StreamModeActive := true ;
19949: LD_ADDR_EXP 69
19953: PUSH
19954: LD_INT 1
19956: ST_TO_ADDR
// if p3 = 0 then
19957: LD_VAR 0 3
19961: PUSH
19962: LD_INT 0
19964: EQUAL
19965: IFFALSE 19971
// InitStreamMode ;
19967: CALL 21106 0 0
// if p3 = 1 then
19971: LD_VAR 0 3
19975: PUSH
19976: LD_INT 1
19978: EQUAL
19979: IFFALSE 19989
// sRocket := true ;
19981: LD_ADDR_EXP 74
19985: PUSH
19986: LD_INT 1
19988: ST_TO_ADDR
// if p3 = 2 then
19989: LD_VAR 0 3
19993: PUSH
19994: LD_INT 2
19996: EQUAL
19997: IFFALSE 20007
// sSpeed := true ;
19999: LD_ADDR_EXP 73
20003: PUSH
20004: LD_INT 1
20006: ST_TO_ADDR
// if p3 = 3 then
20007: LD_VAR 0 3
20011: PUSH
20012: LD_INT 3
20014: EQUAL
20015: IFFALSE 20025
// sEngine := true ;
20017: LD_ADDR_EXP 75
20021: PUSH
20022: LD_INT 1
20024: ST_TO_ADDR
// if p3 = 4 then
20025: LD_VAR 0 3
20029: PUSH
20030: LD_INT 4
20032: EQUAL
20033: IFFALSE 20043
// sSpec := true ;
20035: LD_ADDR_EXP 72
20039: PUSH
20040: LD_INT 1
20042: ST_TO_ADDR
// if p3 = 5 then
20043: LD_VAR 0 3
20047: PUSH
20048: LD_INT 5
20050: EQUAL
20051: IFFALSE 20061
// sLevel := true ;
20053: LD_ADDR_EXP 76
20057: PUSH
20058: LD_INT 1
20060: ST_TO_ADDR
// if p3 = 6 then
20061: LD_VAR 0 3
20065: PUSH
20066: LD_INT 6
20068: EQUAL
20069: IFFALSE 20079
// sArmoury := true ;
20071: LD_ADDR_EXP 77
20075: PUSH
20076: LD_INT 1
20078: ST_TO_ADDR
// if p3 = 7 then
20079: LD_VAR 0 3
20083: PUSH
20084: LD_INT 7
20086: EQUAL
20087: IFFALSE 20097
// sRadar := true ;
20089: LD_ADDR_EXP 78
20093: PUSH
20094: LD_INT 1
20096: ST_TO_ADDR
// if p3 = 8 then
20097: LD_VAR 0 3
20101: PUSH
20102: LD_INT 8
20104: EQUAL
20105: IFFALSE 20115
// sBunker := true ;
20107: LD_ADDR_EXP 79
20111: PUSH
20112: LD_INT 1
20114: ST_TO_ADDR
// if p3 = 9 then
20115: LD_VAR 0 3
20119: PUSH
20120: LD_INT 9
20122: EQUAL
20123: IFFALSE 20133
// sHack := true ;
20125: LD_ADDR_EXP 80
20129: PUSH
20130: LD_INT 1
20132: ST_TO_ADDR
// if p3 = 10 then
20133: LD_VAR 0 3
20137: PUSH
20138: LD_INT 10
20140: EQUAL
20141: IFFALSE 20151
// sFire := true ;
20143: LD_ADDR_EXP 81
20147: PUSH
20148: LD_INT 1
20150: ST_TO_ADDR
// if p3 = 11 then
20151: LD_VAR 0 3
20155: PUSH
20156: LD_INT 11
20158: EQUAL
20159: IFFALSE 20169
// sRefresh := true ;
20161: LD_ADDR_EXP 82
20165: PUSH
20166: LD_INT 1
20168: ST_TO_ADDR
// if p3 = 12 then
20169: LD_VAR 0 3
20173: PUSH
20174: LD_INT 12
20176: EQUAL
20177: IFFALSE 20187
// sExp := true ;
20179: LD_ADDR_EXP 83
20183: PUSH
20184: LD_INT 1
20186: ST_TO_ADDR
// if p3 = 13 then
20187: LD_VAR 0 3
20191: PUSH
20192: LD_INT 13
20194: EQUAL
20195: IFFALSE 20205
// sDepot := true ;
20197: LD_ADDR_EXP 84
20201: PUSH
20202: LD_INT 1
20204: ST_TO_ADDR
// if p3 = 14 then
20205: LD_VAR 0 3
20209: PUSH
20210: LD_INT 14
20212: EQUAL
20213: IFFALSE 20223
// sFlag := true ;
20215: LD_ADDR_EXP 85
20219: PUSH
20220: LD_INT 1
20222: ST_TO_ADDR
// if p3 = 15 then
20223: LD_VAR 0 3
20227: PUSH
20228: LD_INT 15
20230: EQUAL
20231: IFFALSE 20241
// sKamikadze := true ;
20233: LD_ADDR_EXP 93
20237: PUSH
20238: LD_INT 1
20240: ST_TO_ADDR
// if p3 = 16 then
20241: LD_VAR 0 3
20245: PUSH
20246: LD_INT 16
20248: EQUAL
20249: IFFALSE 20259
// sTroll := true ;
20251: LD_ADDR_EXP 94
20255: PUSH
20256: LD_INT 1
20258: ST_TO_ADDR
// if p3 = 17 then
20259: LD_VAR 0 3
20263: PUSH
20264: LD_INT 17
20266: EQUAL
20267: IFFALSE 20277
// sSlow := true ;
20269: LD_ADDR_EXP 95
20273: PUSH
20274: LD_INT 1
20276: ST_TO_ADDR
// if p3 = 18 then
20277: LD_VAR 0 3
20281: PUSH
20282: LD_INT 18
20284: EQUAL
20285: IFFALSE 20295
// sLack := true ;
20287: LD_ADDR_EXP 96
20291: PUSH
20292: LD_INT 1
20294: ST_TO_ADDR
// if p3 = 19 then
20295: LD_VAR 0 3
20299: PUSH
20300: LD_INT 19
20302: EQUAL
20303: IFFALSE 20313
// sTank := true ;
20305: LD_ADDR_EXP 98
20309: PUSH
20310: LD_INT 1
20312: ST_TO_ADDR
// if p3 = 20 then
20313: LD_VAR 0 3
20317: PUSH
20318: LD_INT 20
20320: EQUAL
20321: IFFALSE 20331
// sRemote := true ;
20323: LD_ADDR_EXP 99
20327: PUSH
20328: LD_INT 1
20330: ST_TO_ADDR
// if p3 = 21 then
20331: LD_VAR 0 3
20335: PUSH
20336: LD_INT 21
20338: EQUAL
20339: IFFALSE 20349
// sPowell := true ;
20341: LD_ADDR_EXP 100
20345: PUSH
20346: LD_INT 1
20348: ST_TO_ADDR
// if p3 = 22 then
20349: LD_VAR 0 3
20353: PUSH
20354: LD_INT 22
20356: EQUAL
20357: IFFALSE 20367
// sTeleport := true ;
20359: LD_ADDR_EXP 103
20363: PUSH
20364: LD_INT 1
20366: ST_TO_ADDR
// if p3 = 23 then
20367: LD_VAR 0 3
20371: PUSH
20372: LD_INT 23
20374: EQUAL
20375: IFFALSE 20385
// sOilTower := true ;
20377: LD_ADDR_EXP 105
20381: PUSH
20382: LD_INT 1
20384: ST_TO_ADDR
// if p3 = 24 then
20385: LD_VAR 0 3
20389: PUSH
20390: LD_INT 24
20392: EQUAL
20393: IFFALSE 20403
// sShovel := true ;
20395: LD_ADDR_EXP 106
20399: PUSH
20400: LD_INT 1
20402: ST_TO_ADDR
// if p3 = 25 then
20403: LD_VAR 0 3
20407: PUSH
20408: LD_INT 25
20410: EQUAL
20411: IFFALSE 20421
// sSheik := true ;
20413: LD_ADDR_EXP 107
20417: PUSH
20418: LD_INT 1
20420: ST_TO_ADDR
// if p3 = 26 then
20421: LD_VAR 0 3
20425: PUSH
20426: LD_INT 26
20428: EQUAL
20429: IFFALSE 20439
// sEarthquake := true ;
20431: LD_ADDR_EXP 109
20435: PUSH
20436: LD_INT 1
20438: ST_TO_ADDR
// if p3 = 27 then
20439: LD_VAR 0 3
20443: PUSH
20444: LD_INT 27
20446: EQUAL
20447: IFFALSE 20457
// sAI := true ;
20449: LD_ADDR_EXP 110
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
// if p3 = 28 then
20457: LD_VAR 0 3
20461: PUSH
20462: LD_INT 28
20464: EQUAL
20465: IFFALSE 20475
// sCargo := true ;
20467: LD_ADDR_EXP 113
20471: PUSH
20472: LD_INT 1
20474: ST_TO_ADDR
// if p3 = 29 then
20475: LD_VAR 0 3
20479: PUSH
20480: LD_INT 29
20482: EQUAL
20483: IFFALSE 20493
// sDLaser := true ;
20485: LD_ADDR_EXP 114
20489: PUSH
20490: LD_INT 1
20492: ST_TO_ADDR
// if p3 = 30 then
20493: LD_VAR 0 3
20497: PUSH
20498: LD_INT 30
20500: EQUAL
20501: IFFALSE 20511
// sExchange := true ;
20503: LD_ADDR_EXP 115
20507: PUSH
20508: LD_INT 1
20510: ST_TO_ADDR
// if p3 = 31 then
20511: LD_VAR 0 3
20515: PUSH
20516: LD_INT 31
20518: EQUAL
20519: IFFALSE 20529
// sFac := true ;
20521: LD_ADDR_EXP 116
20525: PUSH
20526: LD_INT 1
20528: ST_TO_ADDR
// if p3 = 32 then
20529: LD_VAR 0 3
20533: PUSH
20534: LD_INT 32
20536: EQUAL
20537: IFFALSE 20547
// sPower := true ;
20539: LD_ADDR_EXP 117
20543: PUSH
20544: LD_INT 1
20546: ST_TO_ADDR
// if p3 = 33 then
20547: LD_VAR 0 3
20551: PUSH
20552: LD_INT 33
20554: EQUAL
20555: IFFALSE 20565
// sRandom := true ;
20557: LD_ADDR_EXP 118
20561: PUSH
20562: LD_INT 1
20564: ST_TO_ADDR
// if p3 = 34 then
20565: LD_VAR 0 3
20569: PUSH
20570: LD_INT 34
20572: EQUAL
20573: IFFALSE 20583
// sShield := true ;
20575: LD_ADDR_EXP 119
20579: PUSH
20580: LD_INT 1
20582: ST_TO_ADDR
// if p3 = 35 then
20583: LD_VAR 0 3
20587: PUSH
20588: LD_INT 35
20590: EQUAL
20591: IFFALSE 20601
// sTime := true ;
20593: LD_ADDR_EXP 120
20597: PUSH
20598: LD_INT 1
20600: ST_TO_ADDR
// if p3 = 36 then
20601: LD_VAR 0 3
20605: PUSH
20606: LD_INT 36
20608: EQUAL
20609: IFFALSE 20619
// sTools := true ;
20611: LD_ADDR_EXP 121
20615: PUSH
20616: LD_INT 1
20618: ST_TO_ADDR
// if p3 = 101 then
20619: LD_VAR 0 3
20623: PUSH
20624: LD_INT 101
20626: EQUAL
20627: IFFALSE 20637
// sSold := true ;
20629: LD_ADDR_EXP 86
20633: PUSH
20634: LD_INT 1
20636: ST_TO_ADDR
// if p3 = 102 then
20637: LD_VAR 0 3
20641: PUSH
20642: LD_INT 102
20644: EQUAL
20645: IFFALSE 20655
// sDiff := true ;
20647: LD_ADDR_EXP 87
20651: PUSH
20652: LD_INT 1
20654: ST_TO_ADDR
// if p3 = 103 then
20655: LD_VAR 0 3
20659: PUSH
20660: LD_INT 103
20662: EQUAL
20663: IFFALSE 20673
// sFog := true ;
20665: LD_ADDR_EXP 90
20669: PUSH
20670: LD_INT 1
20672: ST_TO_ADDR
// if p3 = 104 then
20673: LD_VAR 0 3
20677: PUSH
20678: LD_INT 104
20680: EQUAL
20681: IFFALSE 20691
// sReset := true ;
20683: LD_ADDR_EXP 91
20687: PUSH
20688: LD_INT 1
20690: ST_TO_ADDR
// if p3 = 105 then
20691: LD_VAR 0 3
20695: PUSH
20696: LD_INT 105
20698: EQUAL
20699: IFFALSE 20709
// sSun := true ;
20701: LD_ADDR_EXP 92
20705: PUSH
20706: LD_INT 1
20708: ST_TO_ADDR
// if p3 = 106 then
20709: LD_VAR 0 3
20713: PUSH
20714: LD_INT 106
20716: EQUAL
20717: IFFALSE 20727
// sTiger := true ;
20719: LD_ADDR_EXP 88
20723: PUSH
20724: LD_INT 1
20726: ST_TO_ADDR
// if p3 = 107 then
20727: LD_VAR 0 3
20731: PUSH
20732: LD_INT 107
20734: EQUAL
20735: IFFALSE 20745
// sBomb := true ;
20737: LD_ADDR_EXP 89
20741: PUSH
20742: LD_INT 1
20744: ST_TO_ADDR
// if p3 = 108 then
20745: LD_VAR 0 3
20749: PUSH
20750: LD_INT 108
20752: EQUAL
20753: IFFALSE 20763
// sWound := true ;
20755: LD_ADDR_EXP 97
20759: PUSH
20760: LD_INT 1
20762: ST_TO_ADDR
// if p3 = 109 then
20763: LD_VAR 0 3
20767: PUSH
20768: LD_INT 109
20770: EQUAL
20771: IFFALSE 20781
// sBetray := true ;
20773: LD_ADDR_EXP 101
20777: PUSH
20778: LD_INT 1
20780: ST_TO_ADDR
// if p3 = 110 then
20781: LD_VAR 0 3
20785: PUSH
20786: LD_INT 110
20788: EQUAL
20789: IFFALSE 20799
// sContamin := true ;
20791: LD_ADDR_EXP 102
20795: PUSH
20796: LD_INT 1
20798: ST_TO_ADDR
// if p3 = 111 then
20799: LD_VAR 0 3
20803: PUSH
20804: LD_INT 111
20806: EQUAL
20807: IFFALSE 20817
// sOil := true ;
20809: LD_ADDR_EXP 104
20813: PUSH
20814: LD_INT 1
20816: ST_TO_ADDR
// if p3 = 112 then
20817: LD_VAR 0 3
20821: PUSH
20822: LD_INT 112
20824: EQUAL
20825: IFFALSE 20835
// sStu := true ;
20827: LD_ADDR_EXP 108
20831: PUSH
20832: LD_INT 1
20834: ST_TO_ADDR
// if p3 = 113 then
20835: LD_VAR 0 3
20839: PUSH
20840: LD_INT 113
20842: EQUAL
20843: IFFALSE 20853
// sBazooka := true ;
20845: LD_ADDR_EXP 111
20849: PUSH
20850: LD_INT 1
20852: ST_TO_ADDR
// if p3 = 114 then
20853: LD_VAR 0 3
20857: PUSH
20858: LD_INT 114
20860: EQUAL
20861: IFFALSE 20871
// sMortar := true ;
20863: LD_ADDR_EXP 112
20867: PUSH
20868: LD_INT 1
20870: ST_TO_ADDR
// if p3 = 115 then
20871: LD_VAR 0 3
20875: PUSH
20876: LD_INT 115
20878: EQUAL
20879: IFFALSE 20889
// sRanger := true ;
20881: LD_ADDR_EXP 122
20885: PUSH
20886: LD_INT 1
20888: ST_TO_ADDR
// if p3 = 116 then
20889: LD_VAR 0 3
20893: PUSH
20894: LD_INT 116
20896: EQUAL
20897: IFFALSE 20907
// sComputer := true ;
20899: LD_ADDR_EXP 123
20903: PUSH
20904: LD_INT 1
20906: ST_TO_ADDR
// if p3 = 117 then
20907: LD_VAR 0 3
20911: PUSH
20912: LD_INT 117
20914: EQUAL
20915: IFFALSE 20925
// s30 := true ;
20917: LD_ADDR_EXP 124
20921: PUSH
20922: LD_INT 1
20924: ST_TO_ADDR
// if p3 = 118 then
20925: LD_VAR 0 3
20929: PUSH
20930: LD_INT 118
20932: EQUAL
20933: IFFALSE 20943
// s60 := true ;
20935: LD_ADDR_EXP 125
20939: PUSH
20940: LD_INT 1
20942: ST_TO_ADDR
// end ; if p2 = 101 then
20943: LD_VAR 0 2
20947: PUSH
20948: LD_INT 101
20950: EQUAL
20951: IFFALSE 21079
// begin case p3 of 1 :
20953: LD_VAR 0 3
20957: PUSH
20958: LD_INT 1
20960: DOUBLE
20961: EQUAL
20962: IFTRUE 20966
20964: GO 20973
20966: POP
// hHackUnlimitedResources ; 2 :
20967: CALL 33177 0 0
20971: GO 21079
20973: LD_INT 2
20975: DOUBLE
20976: EQUAL
20977: IFTRUE 20981
20979: GO 20988
20981: POP
// hHackSetLevel10 ; 3 :
20982: CALL 33310 0 0
20986: GO 21079
20988: LD_INT 3
20990: DOUBLE
20991: EQUAL
20992: IFTRUE 20996
20994: GO 21003
20996: POP
// hHackSetLevel10YourUnits ; 4 :
20997: CALL 33395 0 0
21001: GO 21079
21003: LD_INT 4
21005: DOUBLE
21006: EQUAL
21007: IFTRUE 21011
21009: GO 21018
21011: POP
// hHackInvincible ; 5 :
21012: CALL 33843 0 0
21016: GO 21079
21018: LD_INT 5
21020: DOUBLE
21021: EQUAL
21022: IFTRUE 21026
21024: GO 21033
21026: POP
// hHackInvisible ; 6 :
21027: CALL 33954 0 0
21031: GO 21079
21033: LD_INT 6
21035: DOUBLE
21036: EQUAL
21037: IFTRUE 21041
21039: GO 21048
21041: POP
// hHackChangeYourSide ; 7 :
21042: CALL 34011 0 0
21046: GO 21079
21048: LD_INT 7
21050: DOUBLE
21051: EQUAL
21052: IFTRUE 21056
21054: GO 21063
21056: POP
// hHackChangeUnitSide ; 8 :
21057: CALL 34053 0 0
21061: GO 21079
21063: LD_INT 8
21065: DOUBLE
21066: EQUAL
21067: IFTRUE 21071
21069: GO 21078
21071: POP
// hHackFog ; end ;
21072: CALL 34154 0 0
21076: GO 21079
21078: POP
// end ; end ;
21079: LD_VAR 0 7
21083: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21084: GO 21086
21086: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21087: LD_STRING initStreamRollete();
21089: PPUSH
21090: CALL_OW 559
// InitStreamMode ;
21094: CALL 21106 0 0
// DefineStreamItems ( false ) ;
21098: LD_INT 0
21100: PPUSH
21101: CALL 21570 0 1
// end ;
21105: END
// function InitStreamMode ; begin
21106: LD_INT 0
21108: PPUSH
// streamModeActive := false ;
21109: LD_ADDR_EXP 69
21113: PUSH
21114: LD_INT 0
21116: ST_TO_ADDR
// normalCounter := 36 ;
21117: LD_ADDR_EXP 70
21121: PUSH
21122: LD_INT 36
21124: ST_TO_ADDR
// hardcoreCounter := 18 ;
21125: LD_ADDR_EXP 71
21129: PUSH
21130: LD_INT 18
21132: ST_TO_ADDR
// sRocket := false ;
21133: LD_ADDR_EXP 74
21137: PUSH
21138: LD_INT 0
21140: ST_TO_ADDR
// sSpeed := false ;
21141: LD_ADDR_EXP 73
21145: PUSH
21146: LD_INT 0
21148: ST_TO_ADDR
// sEngine := false ;
21149: LD_ADDR_EXP 75
21153: PUSH
21154: LD_INT 0
21156: ST_TO_ADDR
// sSpec := false ;
21157: LD_ADDR_EXP 72
21161: PUSH
21162: LD_INT 0
21164: ST_TO_ADDR
// sLevel := false ;
21165: LD_ADDR_EXP 76
21169: PUSH
21170: LD_INT 0
21172: ST_TO_ADDR
// sArmoury := false ;
21173: LD_ADDR_EXP 77
21177: PUSH
21178: LD_INT 0
21180: ST_TO_ADDR
// sRadar := false ;
21181: LD_ADDR_EXP 78
21185: PUSH
21186: LD_INT 0
21188: ST_TO_ADDR
// sBunker := false ;
21189: LD_ADDR_EXP 79
21193: PUSH
21194: LD_INT 0
21196: ST_TO_ADDR
// sHack := false ;
21197: LD_ADDR_EXP 80
21201: PUSH
21202: LD_INT 0
21204: ST_TO_ADDR
// sFire := false ;
21205: LD_ADDR_EXP 81
21209: PUSH
21210: LD_INT 0
21212: ST_TO_ADDR
// sRefresh := false ;
21213: LD_ADDR_EXP 82
21217: PUSH
21218: LD_INT 0
21220: ST_TO_ADDR
// sExp := false ;
21221: LD_ADDR_EXP 83
21225: PUSH
21226: LD_INT 0
21228: ST_TO_ADDR
// sDepot := false ;
21229: LD_ADDR_EXP 84
21233: PUSH
21234: LD_INT 0
21236: ST_TO_ADDR
// sFlag := false ;
21237: LD_ADDR_EXP 85
21241: PUSH
21242: LD_INT 0
21244: ST_TO_ADDR
// sKamikadze := false ;
21245: LD_ADDR_EXP 93
21249: PUSH
21250: LD_INT 0
21252: ST_TO_ADDR
// sTroll := false ;
21253: LD_ADDR_EXP 94
21257: PUSH
21258: LD_INT 0
21260: ST_TO_ADDR
// sSlow := false ;
21261: LD_ADDR_EXP 95
21265: PUSH
21266: LD_INT 0
21268: ST_TO_ADDR
// sLack := false ;
21269: LD_ADDR_EXP 96
21273: PUSH
21274: LD_INT 0
21276: ST_TO_ADDR
// sTank := false ;
21277: LD_ADDR_EXP 98
21281: PUSH
21282: LD_INT 0
21284: ST_TO_ADDR
// sRemote := false ;
21285: LD_ADDR_EXP 99
21289: PUSH
21290: LD_INT 0
21292: ST_TO_ADDR
// sPowell := false ;
21293: LD_ADDR_EXP 100
21297: PUSH
21298: LD_INT 0
21300: ST_TO_ADDR
// sTeleport := false ;
21301: LD_ADDR_EXP 103
21305: PUSH
21306: LD_INT 0
21308: ST_TO_ADDR
// sOilTower := false ;
21309: LD_ADDR_EXP 105
21313: PUSH
21314: LD_INT 0
21316: ST_TO_ADDR
// sShovel := false ;
21317: LD_ADDR_EXP 106
21321: PUSH
21322: LD_INT 0
21324: ST_TO_ADDR
// sSheik := false ;
21325: LD_ADDR_EXP 107
21329: PUSH
21330: LD_INT 0
21332: ST_TO_ADDR
// sEarthquake := false ;
21333: LD_ADDR_EXP 109
21337: PUSH
21338: LD_INT 0
21340: ST_TO_ADDR
// sAI := false ;
21341: LD_ADDR_EXP 110
21345: PUSH
21346: LD_INT 0
21348: ST_TO_ADDR
// sCargo := false ;
21349: LD_ADDR_EXP 113
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
// sDLaser := false ;
21357: LD_ADDR_EXP 114
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// sExchange := false ;
21365: LD_ADDR_EXP 115
21369: PUSH
21370: LD_INT 0
21372: ST_TO_ADDR
// sFac := false ;
21373: LD_ADDR_EXP 116
21377: PUSH
21378: LD_INT 0
21380: ST_TO_ADDR
// sPower := false ;
21381: LD_ADDR_EXP 117
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// sRandom := false ;
21389: LD_ADDR_EXP 118
21393: PUSH
21394: LD_INT 0
21396: ST_TO_ADDR
// sShield := false ;
21397: LD_ADDR_EXP 119
21401: PUSH
21402: LD_INT 0
21404: ST_TO_ADDR
// sTime := false ;
21405: LD_ADDR_EXP 120
21409: PUSH
21410: LD_INT 0
21412: ST_TO_ADDR
// sTools := false ;
21413: LD_ADDR_EXP 121
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// sSold := false ;
21421: LD_ADDR_EXP 86
21425: PUSH
21426: LD_INT 0
21428: ST_TO_ADDR
// sDiff := false ;
21429: LD_ADDR_EXP 87
21433: PUSH
21434: LD_INT 0
21436: ST_TO_ADDR
// sFog := false ;
21437: LD_ADDR_EXP 90
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
// sReset := false ;
21445: LD_ADDR_EXP 91
21449: PUSH
21450: LD_INT 0
21452: ST_TO_ADDR
// sSun := false ;
21453: LD_ADDR_EXP 92
21457: PUSH
21458: LD_INT 0
21460: ST_TO_ADDR
// sTiger := false ;
21461: LD_ADDR_EXP 88
21465: PUSH
21466: LD_INT 0
21468: ST_TO_ADDR
// sBomb := false ;
21469: LD_ADDR_EXP 89
21473: PUSH
21474: LD_INT 0
21476: ST_TO_ADDR
// sWound := false ;
21477: LD_ADDR_EXP 97
21481: PUSH
21482: LD_INT 0
21484: ST_TO_ADDR
// sBetray := false ;
21485: LD_ADDR_EXP 101
21489: PUSH
21490: LD_INT 0
21492: ST_TO_ADDR
// sContamin := false ;
21493: LD_ADDR_EXP 102
21497: PUSH
21498: LD_INT 0
21500: ST_TO_ADDR
// sOil := false ;
21501: LD_ADDR_EXP 104
21505: PUSH
21506: LD_INT 0
21508: ST_TO_ADDR
// sStu := false ;
21509: LD_ADDR_EXP 108
21513: PUSH
21514: LD_INT 0
21516: ST_TO_ADDR
// sBazooka := false ;
21517: LD_ADDR_EXP 111
21521: PUSH
21522: LD_INT 0
21524: ST_TO_ADDR
// sMortar := false ;
21525: LD_ADDR_EXP 112
21529: PUSH
21530: LD_INT 0
21532: ST_TO_ADDR
// sRanger := false ;
21533: LD_ADDR_EXP 122
21537: PUSH
21538: LD_INT 0
21540: ST_TO_ADDR
// sComputer := false ;
21541: LD_ADDR_EXP 123
21545: PUSH
21546: LD_INT 0
21548: ST_TO_ADDR
// s30 := false ;
21549: LD_ADDR_EXP 124
21553: PUSH
21554: LD_INT 0
21556: ST_TO_ADDR
// s60 := false ;
21557: LD_ADDR_EXP 125
21561: PUSH
21562: LD_INT 0
21564: ST_TO_ADDR
// end ;
21565: LD_VAR 0 1
21569: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21570: LD_INT 0
21572: PPUSH
21573: PPUSH
21574: PPUSH
21575: PPUSH
21576: PPUSH
21577: PPUSH
21578: PPUSH
// result := [ ] ;
21579: LD_ADDR_VAR 0 2
21583: PUSH
21584: EMPTY
21585: ST_TO_ADDR
// if campaign_id = 1 then
21586: LD_OWVAR 69
21590: PUSH
21591: LD_INT 1
21593: EQUAL
21594: IFFALSE 24760
// begin case mission_number of 1 :
21596: LD_OWVAR 70
21600: PUSH
21601: LD_INT 1
21603: DOUBLE
21604: EQUAL
21605: IFTRUE 21609
21607: GO 21685
21609: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21610: LD_ADDR_VAR 0 2
21614: PUSH
21615: LD_INT 2
21617: PUSH
21618: LD_INT 4
21620: PUSH
21621: LD_INT 11
21623: PUSH
21624: LD_INT 12
21626: PUSH
21627: LD_INT 15
21629: PUSH
21630: LD_INT 16
21632: PUSH
21633: LD_INT 22
21635: PUSH
21636: LD_INT 23
21638: PUSH
21639: LD_INT 26
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 101
21655: PUSH
21656: LD_INT 102
21658: PUSH
21659: LD_INT 106
21661: PUSH
21662: LD_INT 116
21664: PUSH
21665: LD_INT 117
21667: PUSH
21668: LD_INT 118
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: ST_TO_ADDR
21683: GO 24758
21685: LD_INT 2
21687: DOUBLE
21688: EQUAL
21689: IFTRUE 21693
21691: GO 21777
21693: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21694: LD_ADDR_VAR 0 2
21698: PUSH
21699: LD_INT 2
21701: PUSH
21702: LD_INT 4
21704: PUSH
21705: LD_INT 11
21707: PUSH
21708: LD_INT 12
21710: PUSH
21711: LD_INT 15
21713: PUSH
21714: LD_INT 16
21716: PUSH
21717: LD_INT 22
21719: PUSH
21720: LD_INT 23
21722: PUSH
21723: LD_INT 26
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 101
21739: PUSH
21740: LD_INT 102
21742: PUSH
21743: LD_INT 105
21745: PUSH
21746: LD_INT 106
21748: PUSH
21749: LD_INT 108
21751: PUSH
21752: LD_INT 116
21754: PUSH
21755: LD_INT 117
21757: PUSH
21758: LD_INT 118
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: ST_TO_ADDR
21775: GO 24758
21777: LD_INT 3
21779: DOUBLE
21780: EQUAL
21781: IFTRUE 21785
21783: GO 21873
21785: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21786: LD_ADDR_VAR 0 2
21790: PUSH
21791: LD_INT 2
21793: PUSH
21794: LD_INT 4
21796: PUSH
21797: LD_INT 5
21799: PUSH
21800: LD_INT 11
21802: PUSH
21803: LD_INT 12
21805: PUSH
21806: LD_INT 15
21808: PUSH
21809: LD_INT 16
21811: PUSH
21812: LD_INT 22
21814: PUSH
21815: LD_INT 26
21817: PUSH
21818: LD_INT 36
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 101
21835: PUSH
21836: LD_INT 102
21838: PUSH
21839: LD_INT 105
21841: PUSH
21842: LD_INT 106
21844: PUSH
21845: LD_INT 108
21847: PUSH
21848: LD_INT 116
21850: PUSH
21851: LD_INT 117
21853: PUSH
21854: LD_INT 118
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: ST_TO_ADDR
21871: GO 24758
21873: LD_INT 4
21875: DOUBLE
21876: EQUAL
21877: IFTRUE 21881
21879: GO 21977
21881: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21882: LD_ADDR_VAR 0 2
21886: PUSH
21887: LD_INT 2
21889: PUSH
21890: LD_INT 4
21892: PUSH
21893: LD_INT 5
21895: PUSH
21896: LD_INT 8
21898: PUSH
21899: LD_INT 11
21901: PUSH
21902: LD_INT 12
21904: PUSH
21905: LD_INT 15
21907: PUSH
21908: LD_INT 16
21910: PUSH
21911: LD_INT 22
21913: PUSH
21914: LD_INT 23
21916: PUSH
21917: LD_INT 26
21919: PUSH
21920: LD_INT 36
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 101
21939: PUSH
21940: LD_INT 102
21942: PUSH
21943: LD_INT 105
21945: PUSH
21946: LD_INT 106
21948: PUSH
21949: LD_INT 108
21951: PUSH
21952: LD_INT 116
21954: PUSH
21955: LD_INT 117
21957: PUSH
21958: LD_INT 118
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: ST_TO_ADDR
21975: GO 24758
21977: LD_INT 5
21979: DOUBLE
21980: EQUAL
21981: IFTRUE 21985
21983: GO 22097
21985: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21986: LD_ADDR_VAR 0 2
21990: PUSH
21991: LD_INT 2
21993: PUSH
21994: LD_INT 4
21996: PUSH
21997: LD_INT 5
21999: PUSH
22000: LD_INT 6
22002: PUSH
22003: LD_INT 8
22005: PUSH
22006: LD_INT 11
22008: PUSH
22009: LD_INT 12
22011: PUSH
22012: LD_INT 15
22014: PUSH
22015: LD_INT 16
22017: PUSH
22018: LD_INT 22
22020: PUSH
22021: LD_INT 23
22023: PUSH
22024: LD_INT 25
22026: PUSH
22027: LD_INT 26
22029: PUSH
22030: LD_INT 36
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 101
22051: PUSH
22052: LD_INT 102
22054: PUSH
22055: LD_INT 105
22057: PUSH
22058: LD_INT 106
22060: PUSH
22061: LD_INT 108
22063: PUSH
22064: LD_INT 109
22066: PUSH
22067: LD_INT 112
22069: PUSH
22070: LD_INT 116
22072: PUSH
22073: LD_INT 117
22075: PUSH
22076: LD_INT 118
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: ST_TO_ADDR
22095: GO 24758
22097: LD_INT 6
22099: DOUBLE
22100: EQUAL
22101: IFTRUE 22105
22103: GO 22237
22105: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22106: LD_ADDR_VAR 0 2
22110: PUSH
22111: LD_INT 2
22113: PUSH
22114: LD_INT 4
22116: PUSH
22117: LD_INT 5
22119: PUSH
22120: LD_INT 6
22122: PUSH
22123: LD_INT 8
22125: PUSH
22126: LD_INT 11
22128: PUSH
22129: LD_INT 12
22131: PUSH
22132: LD_INT 15
22134: PUSH
22135: LD_INT 16
22137: PUSH
22138: LD_INT 20
22140: PUSH
22141: LD_INT 21
22143: PUSH
22144: LD_INT 22
22146: PUSH
22147: LD_INT 23
22149: PUSH
22150: LD_INT 25
22152: PUSH
22153: LD_INT 26
22155: PUSH
22156: LD_INT 30
22158: PUSH
22159: LD_INT 31
22161: PUSH
22162: LD_INT 32
22164: PUSH
22165: LD_INT 36
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 101
22191: PUSH
22192: LD_INT 102
22194: PUSH
22195: LD_INT 105
22197: PUSH
22198: LD_INT 106
22200: PUSH
22201: LD_INT 108
22203: PUSH
22204: LD_INT 109
22206: PUSH
22207: LD_INT 112
22209: PUSH
22210: LD_INT 116
22212: PUSH
22213: LD_INT 117
22215: PUSH
22216: LD_INT 118
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: ST_TO_ADDR
22235: GO 24758
22237: LD_INT 7
22239: DOUBLE
22240: EQUAL
22241: IFTRUE 22245
22243: GO 22357
22245: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22246: LD_ADDR_VAR 0 2
22250: PUSH
22251: LD_INT 2
22253: PUSH
22254: LD_INT 4
22256: PUSH
22257: LD_INT 5
22259: PUSH
22260: LD_INT 7
22262: PUSH
22263: LD_INT 11
22265: PUSH
22266: LD_INT 12
22268: PUSH
22269: LD_INT 15
22271: PUSH
22272: LD_INT 16
22274: PUSH
22275: LD_INT 20
22277: PUSH
22278: LD_INT 21
22280: PUSH
22281: LD_INT 22
22283: PUSH
22284: LD_INT 23
22286: PUSH
22287: LD_INT 25
22289: PUSH
22290: LD_INT 26
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 101
22311: PUSH
22312: LD_INT 102
22314: PUSH
22315: LD_INT 103
22317: PUSH
22318: LD_INT 105
22320: PUSH
22321: LD_INT 106
22323: PUSH
22324: LD_INT 108
22326: PUSH
22327: LD_INT 112
22329: PUSH
22330: LD_INT 116
22332: PUSH
22333: LD_INT 117
22335: PUSH
22336: LD_INT 118
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: ST_TO_ADDR
22355: GO 24758
22357: LD_INT 8
22359: DOUBLE
22360: EQUAL
22361: IFTRUE 22365
22363: GO 22505
22365: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22366: LD_ADDR_VAR 0 2
22370: PUSH
22371: LD_INT 2
22373: PUSH
22374: LD_INT 4
22376: PUSH
22377: LD_INT 5
22379: PUSH
22380: LD_INT 6
22382: PUSH
22383: LD_INT 7
22385: PUSH
22386: LD_INT 8
22388: PUSH
22389: LD_INT 11
22391: PUSH
22392: LD_INT 12
22394: PUSH
22395: LD_INT 15
22397: PUSH
22398: LD_INT 16
22400: PUSH
22401: LD_INT 20
22403: PUSH
22404: LD_INT 21
22406: PUSH
22407: LD_INT 22
22409: PUSH
22410: LD_INT 23
22412: PUSH
22413: LD_INT 25
22415: PUSH
22416: LD_INT 26
22418: PUSH
22419: LD_INT 30
22421: PUSH
22422: LD_INT 31
22424: PUSH
22425: LD_INT 32
22427: PUSH
22428: LD_INT 36
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 101
22455: PUSH
22456: LD_INT 102
22458: PUSH
22459: LD_INT 103
22461: PUSH
22462: LD_INT 105
22464: PUSH
22465: LD_INT 106
22467: PUSH
22468: LD_INT 108
22470: PUSH
22471: LD_INT 109
22473: PUSH
22474: LD_INT 112
22476: PUSH
22477: LD_INT 116
22479: PUSH
22480: LD_INT 117
22482: PUSH
22483: LD_INT 118
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: ST_TO_ADDR
22503: GO 24758
22505: LD_INT 9
22507: DOUBLE
22508: EQUAL
22509: IFTRUE 22513
22511: GO 22661
22513: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22514: LD_ADDR_VAR 0 2
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: LD_INT 4
22524: PUSH
22525: LD_INT 5
22527: PUSH
22528: LD_INT 6
22530: PUSH
22531: LD_INT 7
22533: PUSH
22534: LD_INT 8
22536: PUSH
22537: LD_INT 11
22539: PUSH
22540: LD_INT 12
22542: PUSH
22543: LD_INT 15
22545: PUSH
22546: LD_INT 16
22548: PUSH
22549: LD_INT 20
22551: PUSH
22552: LD_INT 21
22554: PUSH
22555: LD_INT 22
22557: PUSH
22558: LD_INT 23
22560: PUSH
22561: LD_INT 25
22563: PUSH
22564: LD_INT 26
22566: PUSH
22567: LD_INT 28
22569: PUSH
22570: LD_INT 30
22572: PUSH
22573: LD_INT 31
22575: PUSH
22576: LD_INT 32
22578: PUSH
22579: LD_INT 36
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 101
22607: PUSH
22608: LD_INT 102
22610: PUSH
22611: LD_INT 103
22613: PUSH
22614: LD_INT 105
22616: PUSH
22617: LD_INT 106
22619: PUSH
22620: LD_INT 108
22622: PUSH
22623: LD_INT 109
22625: PUSH
22626: LD_INT 112
22628: PUSH
22629: LD_INT 114
22631: PUSH
22632: LD_INT 116
22634: PUSH
22635: LD_INT 117
22637: PUSH
22638: LD_INT 118
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: ST_TO_ADDR
22659: GO 24758
22661: LD_INT 10
22663: DOUBLE
22664: EQUAL
22665: IFTRUE 22669
22667: GO 22865
22669: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22670: LD_ADDR_VAR 0 2
22674: PUSH
22675: LD_INT 2
22677: PUSH
22678: LD_INT 4
22680: PUSH
22681: LD_INT 5
22683: PUSH
22684: LD_INT 6
22686: PUSH
22687: LD_INT 7
22689: PUSH
22690: LD_INT 8
22692: PUSH
22693: LD_INT 9
22695: PUSH
22696: LD_INT 10
22698: PUSH
22699: LD_INT 11
22701: PUSH
22702: LD_INT 12
22704: PUSH
22705: LD_INT 13
22707: PUSH
22708: LD_INT 14
22710: PUSH
22711: LD_INT 15
22713: PUSH
22714: LD_INT 16
22716: PUSH
22717: LD_INT 17
22719: PUSH
22720: LD_INT 18
22722: PUSH
22723: LD_INT 19
22725: PUSH
22726: LD_INT 20
22728: PUSH
22729: LD_INT 21
22731: PUSH
22732: LD_INT 22
22734: PUSH
22735: LD_INT 23
22737: PUSH
22738: LD_INT 24
22740: PUSH
22741: LD_INT 25
22743: PUSH
22744: LD_INT 26
22746: PUSH
22747: LD_INT 28
22749: PUSH
22750: LD_INT 30
22752: PUSH
22753: LD_INT 31
22755: PUSH
22756: LD_INT 32
22758: PUSH
22759: LD_INT 36
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 101
22795: PUSH
22796: LD_INT 102
22798: PUSH
22799: LD_INT 103
22801: PUSH
22802: LD_INT 104
22804: PUSH
22805: LD_INT 105
22807: PUSH
22808: LD_INT 106
22810: PUSH
22811: LD_INT 107
22813: PUSH
22814: LD_INT 108
22816: PUSH
22817: LD_INT 109
22819: PUSH
22820: LD_INT 110
22822: PUSH
22823: LD_INT 111
22825: PUSH
22826: LD_INT 112
22828: PUSH
22829: LD_INT 114
22831: PUSH
22832: LD_INT 116
22834: PUSH
22835: LD_INT 117
22837: PUSH
22838: LD_INT 118
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: ST_TO_ADDR
22863: GO 24758
22865: LD_INT 11
22867: DOUBLE
22868: EQUAL
22869: IFTRUE 22873
22871: GO 23077
22873: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22874: LD_ADDR_VAR 0 2
22878: PUSH
22879: LD_INT 2
22881: PUSH
22882: LD_INT 3
22884: PUSH
22885: LD_INT 4
22887: PUSH
22888: LD_INT 5
22890: PUSH
22891: LD_INT 6
22893: PUSH
22894: LD_INT 7
22896: PUSH
22897: LD_INT 8
22899: PUSH
22900: LD_INT 9
22902: PUSH
22903: LD_INT 10
22905: PUSH
22906: LD_INT 11
22908: PUSH
22909: LD_INT 12
22911: PUSH
22912: LD_INT 13
22914: PUSH
22915: LD_INT 14
22917: PUSH
22918: LD_INT 15
22920: PUSH
22921: LD_INT 16
22923: PUSH
22924: LD_INT 17
22926: PUSH
22927: LD_INT 18
22929: PUSH
22930: LD_INT 19
22932: PUSH
22933: LD_INT 20
22935: PUSH
22936: LD_INT 21
22938: PUSH
22939: LD_INT 22
22941: PUSH
22942: LD_INT 23
22944: PUSH
22945: LD_INT 24
22947: PUSH
22948: LD_INT 25
22950: PUSH
22951: LD_INT 26
22953: PUSH
22954: LD_INT 28
22956: PUSH
22957: LD_INT 30
22959: PUSH
22960: LD_INT 31
22962: PUSH
22963: LD_INT 32
22965: PUSH
22966: LD_INT 34
22968: PUSH
22969: LD_INT 36
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 101
23007: PUSH
23008: LD_INT 102
23010: PUSH
23011: LD_INT 103
23013: PUSH
23014: LD_INT 104
23016: PUSH
23017: LD_INT 105
23019: PUSH
23020: LD_INT 106
23022: PUSH
23023: LD_INT 107
23025: PUSH
23026: LD_INT 108
23028: PUSH
23029: LD_INT 109
23031: PUSH
23032: LD_INT 110
23034: PUSH
23035: LD_INT 111
23037: PUSH
23038: LD_INT 112
23040: PUSH
23041: LD_INT 114
23043: PUSH
23044: LD_INT 116
23046: PUSH
23047: LD_INT 117
23049: PUSH
23050: LD_INT 118
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: ST_TO_ADDR
23075: GO 24758
23077: LD_INT 12
23079: DOUBLE
23080: EQUAL
23081: IFTRUE 23085
23083: GO 23305
23085: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23086: LD_ADDR_VAR 0 2
23090: PUSH
23091: LD_INT 1
23093: PUSH
23094: LD_INT 2
23096: PUSH
23097: LD_INT 3
23099: PUSH
23100: LD_INT 4
23102: PUSH
23103: LD_INT 5
23105: PUSH
23106: LD_INT 6
23108: PUSH
23109: LD_INT 7
23111: PUSH
23112: LD_INT 8
23114: PUSH
23115: LD_INT 9
23117: PUSH
23118: LD_INT 10
23120: PUSH
23121: LD_INT 11
23123: PUSH
23124: LD_INT 12
23126: PUSH
23127: LD_INT 13
23129: PUSH
23130: LD_INT 14
23132: PUSH
23133: LD_INT 15
23135: PUSH
23136: LD_INT 16
23138: PUSH
23139: LD_INT 17
23141: PUSH
23142: LD_INT 18
23144: PUSH
23145: LD_INT 19
23147: PUSH
23148: LD_INT 20
23150: PUSH
23151: LD_INT 21
23153: PUSH
23154: LD_INT 22
23156: PUSH
23157: LD_INT 23
23159: PUSH
23160: LD_INT 24
23162: PUSH
23163: LD_INT 25
23165: PUSH
23166: LD_INT 26
23168: PUSH
23169: LD_INT 27
23171: PUSH
23172: LD_INT 28
23174: PUSH
23175: LD_INT 30
23177: PUSH
23178: LD_INT 31
23180: PUSH
23181: LD_INT 32
23183: PUSH
23184: LD_INT 33
23186: PUSH
23187: LD_INT 34
23189: PUSH
23190: LD_INT 36
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 101
23231: PUSH
23232: LD_INT 102
23234: PUSH
23235: LD_INT 103
23237: PUSH
23238: LD_INT 104
23240: PUSH
23241: LD_INT 105
23243: PUSH
23244: LD_INT 106
23246: PUSH
23247: LD_INT 107
23249: PUSH
23250: LD_INT 108
23252: PUSH
23253: LD_INT 109
23255: PUSH
23256: LD_INT 110
23258: PUSH
23259: LD_INT 111
23261: PUSH
23262: LD_INT 112
23264: PUSH
23265: LD_INT 113
23267: PUSH
23268: LD_INT 114
23270: PUSH
23271: LD_INT 116
23273: PUSH
23274: LD_INT 117
23276: PUSH
23277: LD_INT 118
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: ST_TO_ADDR
23303: GO 24758
23305: LD_INT 13
23307: DOUBLE
23308: EQUAL
23309: IFTRUE 23313
23311: GO 23521
23313: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23314: LD_ADDR_VAR 0 2
23318: PUSH
23319: LD_INT 1
23321: PUSH
23322: LD_INT 2
23324: PUSH
23325: LD_INT 3
23327: PUSH
23328: LD_INT 4
23330: PUSH
23331: LD_INT 5
23333: PUSH
23334: LD_INT 8
23336: PUSH
23337: LD_INT 9
23339: PUSH
23340: LD_INT 10
23342: PUSH
23343: LD_INT 11
23345: PUSH
23346: LD_INT 12
23348: PUSH
23349: LD_INT 14
23351: PUSH
23352: LD_INT 15
23354: PUSH
23355: LD_INT 16
23357: PUSH
23358: LD_INT 17
23360: PUSH
23361: LD_INT 18
23363: PUSH
23364: LD_INT 19
23366: PUSH
23367: LD_INT 20
23369: PUSH
23370: LD_INT 21
23372: PUSH
23373: LD_INT 22
23375: PUSH
23376: LD_INT 23
23378: PUSH
23379: LD_INT 24
23381: PUSH
23382: LD_INT 25
23384: PUSH
23385: LD_INT 26
23387: PUSH
23388: LD_INT 27
23390: PUSH
23391: LD_INT 28
23393: PUSH
23394: LD_INT 30
23396: PUSH
23397: LD_INT 31
23399: PUSH
23400: LD_INT 32
23402: PUSH
23403: LD_INT 33
23405: PUSH
23406: LD_INT 34
23408: PUSH
23409: LD_INT 36
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 101
23447: PUSH
23448: LD_INT 102
23450: PUSH
23451: LD_INT 103
23453: PUSH
23454: LD_INT 104
23456: PUSH
23457: LD_INT 105
23459: PUSH
23460: LD_INT 106
23462: PUSH
23463: LD_INT 107
23465: PUSH
23466: LD_INT 108
23468: PUSH
23469: LD_INT 109
23471: PUSH
23472: LD_INT 110
23474: PUSH
23475: LD_INT 111
23477: PUSH
23478: LD_INT 112
23480: PUSH
23481: LD_INT 113
23483: PUSH
23484: LD_INT 114
23486: PUSH
23487: LD_INT 116
23489: PUSH
23490: LD_INT 117
23492: PUSH
23493: LD_INT 118
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: ST_TO_ADDR
23519: GO 24758
23521: LD_INT 14
23523: DOUBLE
23524: EQUAL
23525: IFTRUE 23529
23527: GO 23753
23529: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23530: LD_ADDR_VAR 0 2
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: LD_INT 3
23543: PUSH
23544: LD_INT 4
23546: PUSH
23547: LD_INT 5
23549: PUSH
23550: LD_INT 6
23552: PUSH
23553: LD_INT 7
23555: PUSH
23556: LD_INT 8
23558: PUSH
23559: LD_INT 9
23561: PUSH
23562: LD_INT 10
23564: PUSH
23565: LD_INT 11
23567: PUSH
23568: LD_INT 12
23570: PUSH
23571: LD_INT 13
23573: PUSH
23574: LD_INT 14
23576: PUSH
23577: LD_INT 15
23579: PUSH
23580: LD_INT 16
23582: PUSH
23583: LD_INT 17
23585: PUSH
23586: LD_INT 18
23588: PUSH
23589: LD_INT 19
23591: PUSH
23592: LD_INT 20
23594: PUSH
23595: LD_INT 21
23597: PUSH
23598: LD_INT 22
23600: PUSH
23601: LD_INT 23
23603: PUSH
23604: LD_INT 24
23606: PUSH
23607: LD_INT 25
23609: PUSH
23610: LD_INT 26
23612: PUSH
23613: LD_INT 27
23615: PUSH
23616: LD_INT 28
23618: PUSH
23619: LD_INT 29
23621: PUSH
23622: LD_INT 30
23624: PUSH
23625: LD_INT 31
23627: PUSH
23628: LD_INT 32
23630: PUSH
23631: LD_INT 33
23633: PUSH
23634: LD_INT 34
23636: PUSH
23637: LD_INT 36
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 101
23679: PUSH
23680: LD_INT 102
23682: PUSH
23683: LD_INT 103
23685: PUSH
23686: LD_INT 104
23688: PUSH
23689: LD_INT 105
23691: PUSH
23692: LD_INT 106
23694: PUSH
23695: LD_INT 107
23697: PUSH
23698: LD_INT 108
23700: PUSH
23701: LD_INT 109
23703: PUSH
23704: LD_INT 110
23706: PUSH
23707: LD_INT 111
23709: PUSH
23710: LD_INT 112
23712: PUSH
23713: LD_INT 113
23715: PUSH
23716: LD_INT 114
23718: PUSH
23719: LD_INT 116
23721: PUSH
23722: LD_INT 117
23724: PUSH
23725: LD_INT 118
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: ST_TO_ADDR
23751: GO 24758
23753: LD_INT 15
23755: DOUBLE
23756: EQUAL
23757: IFTRUE 23761
23759: GO 23985
23761: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23762: LD_ADDR_VAR 0 2
23766: PUSH
23767: LD_INT 1
23769: PUSH
23770: LD_INT 2
23772: PUSH
23773: LD_INT 3
23775: PUSH
23776: LD_INT 4
23778: PUSH
23779: LD_INT 5
23781: PUSH
23782: LD_INT 6
23784: PUSH
23785: LD_INT 7
23787: PUSH
23788: LD_INT 8
23790: PUSH
23791: LD_INT 9
23793: PUSH
23794: LD_INT 10
23796: PUSH
23797: LD_INT 11
23799: PUSH
23800: LD_INT 12
23802: PUSH
23803: LD_INT 13
23805: PUSH
23806: LD_INT 14
23808: PUSH
23809: LD_INT 15
23811: PUSH
23812: LD_INT 16
23814: PUSH
23815: LD_INT 17
23817: PUSH
23818: LD_INT 18
23820: PUSH
23821: LD_INT 19
23823: PUSH
23824: LD_INT 20
23826: PUSH
23827: LD_INT 21
23829: PUSH
23830: LD_INT 22
23832: PUSH
23833: LD_INT 23
23835: PUSH
23836: LD_INT 24
23838: PUSH
23839: LD_INT 25
23841: PUSH
23842: LD_INT 26
23844: PUSH
23845: LD_INT 27
23847: PUSH
23848: LD_INT 28
23850: PUSH
23851: LD_INT 29
23853: PUSH
23854: LD_INT 30
23856: PUSH
23857: LD_INT 31
23859: PUSH
23860: LD_INT 32
23862: PUSH
23863: LD_INT 33
23865: PUSH
23866: LD_INT 34
23868: PUSH
23869: LD_INT 36
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 101
23911: PUSH
23912: LD_INT 102
23914: PUSH
23915: LD_INT 103
23917: PUSH
23918: LD_INT 104
23920: PUSH
23921: LD_INT 105
23923: PUSH
23924: LD_INT 106
23926: PUSH
23927: LD_INT 107
23929: PUSH
23930: LD_INT 108
23932: PUSH
23933: LD_INT 109
23935: PUSH
23936: LD_INT 110
23938: PUSH
23939: LD_INT 111
23941: PUSH
23942: LD_INT 112
23944: PUSH
23945: LD_INT 113
23947: PUSH
23948: LD_INT 114
23950: PUSH
23951: LD_INT 116
23953: PUSH
23954: LD_INT 117
23956: PUSH
23957: LD_INT 118
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: ST_TO_ADDR
23983: GO 24758
23985: LD_INT 16
23987: DOUBLE
23988: EQUAL
23989: IFTRUE 23993
23991: GO 24129
23993: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23994: LD_ADDR_VAR 0 2
23998: PUSH
23999: LD_INT 2
24001: PUSH
24002: LD_INT 4
24004: PUSH
24005: LD_INT 5
24007: PUSH
24008: LD_INT 7
24010: PUSH
24011: LD_INT 11
24013: PUSH
24014: LD_INT 12
24016: PUSH
24017: LD_INT 15
24019: PUSH
24020: LD_INT 16
24022: PUSH
24023: LD_INT 20
24025: PUSH
24026: LD_INT 21
24028: PUSH
24029: LD_INT 22
24031: PUSH
24032: LD_INT 23
24034: PUSH
24035: LD_INT 25
24037: PUSH
24038: LD_INT 26
24040: PUSH
24041: LD_INT 30
24043: PUSH
24044: LD_INT 31
24046: PUSH
24047: LD_INT 32
24049: PUSH
24050: LD_INT 33
24052: PUSH
24053: LD_INT 34
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 101
24079: PUSH
24080: LD_INT 102
24082: PUSH
24083: LD_INT 103
24085: PUSH
24086: LD_INT 106
24088: PUSH
24089: LD_INT 108
24091: PUSH
24092: LD_INT 112
24094: PUSH
24095: LD_INT 113
24097: PUSH
24098: LD_INT 114
24100: PUSH
24101: LD_INT 116
24103: PUSH
24104: LD_INT 117
24106: PUSH
24107: LD_INT 118
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: ST_TO_ADDR
24127: GO 24758
24129: LD_INT 17
24131: DOUBLE
24132: EQUAL
24133: IFTRUE 24137
24135: GO 24361
24137: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24138: LD_ADDR_VAR 0 2
24142: PUSH
24143: LD_INT 1
24145: PUSH
24146: LD_INT 2
24148: PUSH
24149: LD_INT 3
24151: PUSH
24152: LD_INT 4
24154: PUSH
24155: LD_INT 5
24157: PUSH
24158: LD_INT 6
24160: PUSH
24161: LD_INT 7
24163: PUSH
24164: LD_INT 8
24166: PUSH
24167: LD_INT 9
24169: PUSH
24170: LD_INT 10
24172: PUSH
24173: LD_INT 11
24175: PUSH
24176: LD_INT 12
24178: PUSH
24179: LD_INT 13
24181: PUSH
24182: LD_INT 14
24184: PUSH
24185: LD_INT 15
24187: PUSH
24188: LD_INT 16
24190: PUSH
24191: LD_INT 17
24193: PUSH
24194: LD_INT 18
24196: PUSH
24197: LD_INT 19
24199: PUSH
24200: LD_INT 20
24202: PUSH
24203: LD_INT 21
24205: PUSH
24206: LD_INT 22
24208: PUSH
24209: LD_INT 23
24211: PUSH
24212: LD_INT 24
24214: PUSH
24215: LD_INT 25
24217: PUSH
24218: LD_INT 26
24220: PUSH
24221: LD_INT 27
24223: PUSH
24224: LD_INT 28
24226: PUSH
24227: LD_INT 29
24229: PUSH
24230: LD_INT 30
24232: PUSH
24233: LD_INT 31
24235: PUSH
24236: LD_INT 32
24238: PUSH
24239: LD_INT 33
24241: PUSH
24242: LD_INT 34
24244: PUSH
24245: LD_INT 36
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 101
24287: PUSH
24288: LD_INT 102
24290: PUSH
24291: LD_INT 103
24293: PUSH
24294: LD_INT 104
24296: PUSH
24297: LD_INT 105
24299: PUSH
24300: LD_INT 106
24302: PUSH
24303: LD_INT 107
24305: PUSH
24306: LD_INT 108
24308: PUSH
24309: LD_INT 109
24311: PUSH
24312: LD_INT 110
24314: PUSH
24315: LD_INT 111
24317: PUSH
24318: LD_INT 112
24320: PUSH
24321: LD_INT 113
24323: PUSH
24324: LD_INT 114
24326: PUSH
24327: LD_INT 116
24329: PUSH
24330: LD_INT 117
24332: PUSH
24333: LD_INT 118
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: ST_TO_ADDR
24359: GO 24758
24361: LD_INT 18
24363: DOUBLE
24364: EQUAL
24365: IFTRUE 24369
24367: GO 24517
24369: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24370: LD_ADDR_VAR 0 2
24374: PUSH
24375: LD_INT 2
24377: PUSH
24378: LD_INT 4
24380: PUSH
24381: LD_INT 5
24383: PUSH
24384: LD_INT 7
24386: PUSH
24387: LD_INT 11
24389: PUSH
24390: LD_INT 12
24392: PUSH
24393: LD_INT 15
24395: PUSH
24396: LD_INT 16
24398: PUSH
24399: LD_INT 20
24401: PUSH
24402: LD_INT 21
24404: PUSH
24405: LD_INT 22
24407: PUSH
24408: LD_INT 23
24410: PUSH
24411: LD_INT 25
24413: PUSH
24414: LD_INT 26
24416: PUSH
24417: LD_INT 30
24419: PUSH
24420: LD_INT 31
24422: PUSH
24423: LD_INT 32
24425: PUSH
24426: LD_INT 33
24428: PUSH
24429: LD_INT 34
24431: PUSH
24432: LD_INT 35
24434: PUSH
24435: LD_INT 36
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 101
24463: PUSH
24464: LD_INT 102
24466: PUSH
24467: LD_INT 103
24469: PUSH
24470: LD_INT 106
24472: PUSH
24473: LD_INT 108
24475: PUSH
24476: LD_INT 112
24478: PUSH
24479: LD_INT 113
24481: PUSH
24482: LD_INT 114
24484: PUSH
24485: LD_INT 115
24487: PUSH
24488: LD_INT 116
24490: PUSH
24491: LD_INT 117
24493: PUSH
24494: LD_INT 118
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: ST_TO_ADDR
24515: GO 24758
24517: LD_INT 19
24519: DOUBLE
24520: EQUAL
24521: IFTRUE 24525
24523: GO 24757
24525: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24526: LD_ADDR_VAR 0 2
24530: PUSH
24531: LD_INT 1
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: LD_INT 3
24539: PUSH
24540: LD_INT 4
24542: PUSH
24543: LD_INT 5
24545: PUSH
24546: LD_INT 6
24548: PUSH
24549: LD_INT 7
24551: PUSH
24552: LD_INT 8
24554: PUSH
24555: LD_INT 9
24557: PUSH
24558: LD_INT 10
24560: PUSH
24561: LD_INT 11
24563: PUSH
24564: LD_INT 12
24566: PUSH
24567: LD_INT 13
24569: PUSH
24570: LD_INT 14
24572: PUSH
24573: LD_INT 15
24575: PUSH
24576: LD_INT 16
24578: PUSH
24579: LD_INT 17
24581: PUSH
24582: LD_INT 18
24584: PUSH
24585: LD_INT 19
24587: PUSH
24588: LD_INT 20
24590: PUSH
24591: LD_INT 21
24593: PUSH
24594: LD_INT 22
24596: PUSH
24597: LD_INT 23
24599: PUSH
24600: LD_INT 24
24602: PUSH
24603: LD_INT 25
24605: PUSH
24606: LD_INT 26
24608: PUSH
24609: LD_INT 27
24611: PUSH
24612: LD_INT 28
24614: PUSH
24615: LD_INT 29
24617: PUSH
24618: LD_INT 30
24620: PUSH
24621: LD_INT 31
24623: PUSH
24624: LD_INT 32
24626: PUSH
24627: LD_INT 33
24629: PUSH
24630: LD_INT 34
24632: PUSH
24633: LD_INT 35
24635: PUSH
24636: LD_INT 36
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 101
24679: PUSH
24680: LD_INT 102
24682: PUSH
24683: LD_INT 103
24685: PUSH
24686: LD_INT 104
24688: PUSH
24689: LD_INT 105
24691: PUSH
24692: LD_INT 106
24694: PUSH
24695: LD_INT 107
24697: PUSH
24698: LD_INT 108
24700: PUSH
24701: LD_INT 109
24703: PUSH
24704: LD_INT 110
24706: PUSH
24707: LD_INT 111
24709: PUSH
24710: LD_INT 112
24712: PUSH
24713: LD_INT 113
24715: PUSH
24716: LD_INT 114
24718: PUSH
24719: LD_INT 115
24721: PUSH
24722: LD_INT 116
24724: PUSH
24725: LD_INT 117
24727: PUSH
24728: LD_INT 118
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: ST_TO_ADDR
24755: GO 24758
24757: POP
// end else
24758: GO 24989
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24760: LD_ADDR_VAR 0 2
24764: PUSH
24765: LD_INT 1
24767: PUSH
24768: LD_INT 2
24770: PUSH
24771: LD_INT 3
24773: PUSH
24774: LD_INT 4
24776: PUSH
24777: LD_INT 5
24779: PUSH
24780: LD_INT 6
24782: PUSH
24783: LD_INT 7
24785: PUSH
24786: LD_INT 8
24788: PUSH
24789: LD_INT 9
24791: PUSH
24792: LD_INT 10
24794: PUSH
24795: LD_INT 11
24797: PUSH
24798: LD_INT 12
24800: PUSH
24801: LD_INT 13
24803: PUSH
24804: LD_INT 14
24806: PUSH
24807: LD_INT 15
24809: PUSH
24810: LD_INT 16
24812: PUSH
24813: LD_INT 17
24815: PUSH
24816: LD_INT 18
24818: PUSH
24819: LD_INT 19
24821: PUSH
24822: LD_INT 20
24824: PUSH
24825: LD_INT 21
24827: PUSH
24828: LD_INT 22
24830: PUSH
24831: LD_INT 23
24833: PUSH
24834: LD_INT 24
24836: PUSH
24837: LD_INT 25
24839: PUSH
24840: LD_INT 26
24842: PUSH
24843: LD_INT 27
24845: PUSH
24846: LD_INT 28
24848: PUSH
24849: LD_INT 29
24851: PUSH
24852: LD_INT 30
24854: PUSH
24855: LD_INT 31
24857: PUSH
24858: LD_INT 32
24860: PUSH
24861: LD_INT 33
24863: PUSH
24864: LD_INT 34
24866: PUSH
24867: LD_INT 35
24869: PUSH
24870: LD_INT 36
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 101
24913: PUSH
24914: LD_INT 102
24916: PUSH
24917: LD_INT 103
24919: PUSH
24920: LD_INT 104
24922: PUSH
24923: LD_INT 105
24925: PUSH
24926: LD_INT 106
24928: PUSH
24929: LD_INT 107
24931: PUSH
24932: LD_INT 108
24934: PUSH
24935: LD_INT 109
24937: PUSH
24938: LD_INT 110
24940: PUSH
24941: LD_INT 111
24943: PUSH
24944: LD_INT 112
24946: PUSH
24947: LD_INT 113
24949: PUSH
24950: LD_INT 114
24952: PUSH
24953: LD_INT 115
24955: PUSH
24956: LD_INT 116
24958: PUSH
24959: LD_INT 117
24961: PUSH
24962: LD_INT 118
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: ST_TO_ADDR
// if result then
24989: LD_VAR 0 2
24993: IFFALSE 25779
// begin normal :=  ;
24995: LD_ADDR_VAR 0 5
24999: PUSH
25000: LD_STRING 
25002: ST_TO_ADDR
// hardcore :=  ;
25003: LD_ADDR_VAR 0 6
25007: PUSH
25008: LD_STRING 
25010: ST_TO_ADDR
// active :=  ;
25011: LD_ADDR_VAR 0 7
25015: PUSH
25016: LD_STRING 
25018: ST_TO_ADDR
// for i = 1 to normalCounter do
25019: LD_ADDR_VAR 0 8
25023: PUSH
25024: DOUBLE
25025: LD_INT 1
25027: DEC
25028: ST_TO_ADDR
25029: LD_EXP 70
25033: PUSH
25034: FOR_TO
25035: IFFALSE 25136
// begin tmp := 0 ;
25037: LD_ADDR_VAR 0 3
25041: PUSH
25042: LD_STRING 0
25044: ST_TO_ADDR
// if result [ 1 ] then
25045: LD_VAR 0 2
25049: PUSH
25050: LD_INT 1
25052: ARRAY
25053: IFFALSE 25118
// if result [ 1 ] [ 1 ] = i then
25055: LD_VAR 0 2
25059: PUSH
25060: LD_INT 1
25062: ARRAY
25063: PUSH
25064: LD_INT 1
25066: ARRAY
25067: PUSH
25068: LD_VAR 0 8
25072: EQUAL
25073: IFFALSE 25118
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25075: LD_ADDR_VAR 0 2
25079: PUSH
25080: LD_VAR 0 2
25084: PPUSH
25085: LD_INT 1
25087: PPUSH
25088: LD_VAR 0 2
25092: PUSH
25093: LD_INT 1
25095: ARRAY
25096: PPUSH
25097: LD_INT 1
25099: PPUSH
25100: CALL_OW 3
25104: PPUSH
25105: CALL_OW 1
25109: ST_TO_ADDR
// tmp := 1 ;
25110: LD_ADDR_VAR 0 3
25114: PUSH
25115: LD_STRING 1
25117: ST_TO_ADDR
// end ; normal := normal & tmp ;
25118: LD_ADDR_VAR 0 5
25122: PUSH
25123: LD_VAR 0 5
25127: PUSH
25128: LD_VAR 0 3
25132: STR
25133: ST_TO_ADDR
// end ;
25134: GO 25034
25136: POP
25137: POP
// for i = 1 to hardcoreCounter do
25138: LD_ADDR_VAR 0 8
25142: PUSH
25143: DOUBLE
25144: LD_INT 1
25146: DEC
25147: ST_TO_ADDR
25148: LD_EXP 71
25152: PUSH
25153: FOR_TO
25154: IFFALSE 25259
// begin tmp := 0 ;
25156: LD_ADDR_VAR 0 3
25160: PUSH
25161: LD_STRING 0
25163: ST_TO_ADDR
// if result [ 2 ] then
25164: LD_VAR 0 2
25168: PUSH
25169: LD_INT 2
25171: ARRAY
25172: IFFALSE 25241
// if result [ 2 ] [ 1 ] = 100 + i then
25174: LD_VAR 0 2
25178: PUSH
25179: LD_INT 2
25181: ARRAY
25182: PUSH
25183: LD_INT 1
25185: ARRAY
25186: PUSH
25187: LD_INT 100
25189: PUSH
25190: LD_VAR 0 8
25194: PLUS
25195: EQUAL
25196: IFFALSE 25241
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25198: LD_ADDR_VAR 0 2
25202: PUSH
25203: LD_VAR 0 2
25207: PPUSH
25208: LD_INT 2
25210: PPUSH
25211: LD_VAR 0 2
25215: PUSH
25216: LD_INT 2
25218: ARRAY
25219: PPUSH
25220: LD_INT 1
25222: PPUSH
25223: CALL_OW 3
25227: PPUSH
25228: CALL_OW 1
25232: ST_TO_ADDR
// tmp := 1 ;
25233: LD_ADDR_VAR 0 3
25237: PUSH
25238: LD_STRING 1
25240: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25241: LD_ADDR_VAR 0 6
25245: PUSH
25246: LD_VAR 0 6
25250: PUSH
25251: LD_VAR 0 3
25255: STR
25256: ST_TO_ADDR
// end ;
25257: GO 25153
25259: POP
25260: POP
// if isGameLoad then
25261: LD_VAR 0 1
25265: IFFALSE 25740
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25267: LD_ADDR_VAR 0 4
25271: PUSH
25272: LD_EXP 74
25276: PUSH
25277: LD_EXP 73
25281: PUSH
25282: LD_EXP 75
25286: PUSH
25287: LD_EXP 72
25291: PUSH
25292: LD_EXP 76
25296: PUSH
25297: LD_EXP 77
25301: PUSH
25302: LD_EXP 78
25306: PUSH
25307: LD_EXP 79
25311: PUSH
25312: LD_EXP 80
25316: PUSH
25317: LD_EXP 81
25321: PUSH
25322: LD_EXP 82
25326: PUSH
25327: LD_EXP 83
25331: PUSH
25332: LD_EXP 84
25336: PUSH
25337: LD_EXP 85
25341: PUSH
25342: LD_EXP 93
25346: PUSH
25347: LD_EXP 94
25351: PUSH
25352: LD_EXP 95
25356: PUSH
25357: LD_EXP 96
25361: PUSH
25362: LD_EXP 98
25366: PUSH
25367: LD_EXP 99
25371: PUSH
25372: LD_EXP 100
25376: PUSH
25377: LD_EXP 103
25381: PUSH
25382: LD_EXP 105
25386: PUSH
25387: LD_EXP 106
25391: PUSH
25392: LD_EXP 107
25396: PUSH
25397: LD_EXP 109
25401: PUSH
25402: LD_EXP 110
25406: PUSH
25407: LD_EXP 113
25411: PUSH
25412: LD_EXP 114
25416: PUSH
25417: LD_EXP 115
25421: PUSH
25422: LD_EXP 116
25426: PUSH
25427: LD_EXP 117
25431: PUSH
25432: LD_EXP 118
25436: PUSH
25437: LD_EXP 119
25441: PUSH
25442: LD_EXP 120
25446: PUSH
25447: LD_EXP 121
25451: PUSH
25452: LD_EXP 86
25456: PUSH
25457: LD_EXP 87
25461: PUSH
25462: LD_EXP 90
25466: PUSH
25467: LD_EXP 91
25471: PUSH
25472: LD_EXP 92
25476: PUSH
25477: LD_EXP 88
25481: PUSH
25482: LD_EXP 89
25486: PUSH
25487: LD_EXP 97
25491: PUSH
25492: LD_EXP 101
25496: PUSH
25497: LD_EXP 102
25501: PUSH
25502: LD_EXP 104
25506: PUSH
25507: LD_EXP 108
25511: PUSH
25512: LD_EXP 111
25516: PUSH
25517: LD_EXP 112
25521: PUSH
25522: LD_EXP 122
25526: PUSH
25527: LD_EXP 123
25531: PUSH
25532: LD_EXP 124
25536: PUSH
25537: LD_EXP 125
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: ST_TO_ADDR
// tmp :=  ;
25598: LD_ADDR_VAR 0 3
25602: PUSH
25603: LD_STRING 
25605: ST_TO_ADDR
// for i = 1 to normalCounter do
25606: LD_ADDR_VAR 0 8
25610: PUSH
25611: DOUBLE
25612: LD_INT 1
25614: DEC
25615: ST_TO_ADDR
25616: LD_EXP 70
25620: PUSH
25621: FOR_TO
25622: IFFALSE 25658
// begin if flags [ i ] then
25624: LD_VAR 0 4
25628: PUSH
25629: LD_VAR 0 8
25633: ARRAY
25634: IFFALSE 25656
// tmp := tmp & i & ; ;
25636: LD_ADDR_VAR 0 3
25640: PUSH
25641: LD_VAR 0 3
25645: PUSH
25646: LD_VAR 0 8
25650: STR
25651: PUSH
25652: LD_STRING ;
25654: STR
25655: ST_TO_ADDR
// end ;
25656: GO 25621
25658: POP
25659: POP
// for i = 1 to hardcoreCounter do
25660: LD_ADDR_VAR 0 8
25664: PUSH
25665: DOUBLE
25666: LD_INT 1
25668: DEC
25669: ST_TO_ADDR
25670: LD_EXP 71
25674: PUSH
25675: FOR_TO
25676: IFFALSE 25722
// begin if flags [ normalCounter + i ] then
25678: LD_VAR 0 4
25682: PUSH
25683: LD_EXP 70
25687: PUSH
25688: LD_VAR 0 8
25692: PLUS
25693: ARRAY
25694: IFFALSE 25720
// tmp := tmp & ( 100 + i ) & ; ;
25696: LD_ADDR_VAR 0 3
25700: PUSH
25701: LD_VAR 0 3
25705: PUSH
25706: LD_INT 100
25708: PUSH
25709: LD_VAR 0 8
25713: PLUS
25714: STR
25715: PUSH
25716: LD_STRING ;
25718: STR
25719: ST_TO_ADDR
// end ;
25720: GO 25675
25722: POP
25723: POP
// if tmp then
25724: LD_VAR 0 3
25728: IFFALSE 25740
// active := tmp ;
25730: LD_ADDR_VAR 0 7
25734: PUSH
25735: LD_VAR 0 3
25739: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25740: LD_STRING getStreamItemsFromMission("
25742: PUSH
25743: LD_VAR 0 5
25747: STR
25748: PUSH
25749: LD_STRING ","
25751: STR
25752: PUSH
25753: LD_VAR 0 6
25757: STR
25758: PUSH
25759: LD_STRING ","
25761: STR
25762: PUSH
25763: LD_VAR 0 7
25767: STR
25768: PUSH
25769: LD_STRING ")
25771: STR
25772: PPUSH
25773: CALL_OW 559
// end else
25777: GO 25786
// ToLua ( getStreamItemsFromMission("","","") ) ;
25779: LD_STRING getStreamItemsFromMission("","","")
25781: PPUSH
25782: CALL_OW 559
// end ;
25786: LD_VAR 0 2
25790: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25791: LD_EXP 69
25795: PUSH
25796: LD_EXP 74
25800: AND
25801: IFFALSE 25925
25803: GO 25805
25805: DISABLE
25806: LD_INT 0
25808: PPUSH
25809: PPUSH
// begin enable ;
25810: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25811: LD_ADDR_VAR 0 2
25815: PUSH
25816: LD_INT 22
25818: PUSH
25819: LD_OWVAR 2
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 2
25830: PUSH
25831: LD_INT 34
25833: PUSH
25834: LD_INT 7
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 34
25843: PUSH
25844: LD_INT 45
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 34
25853: PUSH
25854: LD_INT 28
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 34
25863: PUSH
25864: LD_INT 47
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PPUSH
25882: CALL_OW 69
25886: ST_TO_ADDR
// if not tmp then
25887: LD_VAR 0 2
25891: NOT
25892: IFFALSE 25896
// exit ;
25894: GO 25925
// for i in tmp do
25896: LD_ADDR_VAR 0 1
25900: PUSH
25901: LD_VAR 0 2
25905: PUSH
25906: FOR_IN
25907: IFFALSE 25923
// begin SetLives ( i , 0 ) ;
25909: LD_VAR 0 1
25913: PPUSH
25914: LD_INT 0
25916: PPUSH
25917: CALL_OW 234
// end ;
25921: GO 25906
25923: POP
25924: POP
// end ;
25925: PPOPN 2
25927: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25928: LD_EXP 69
25932: PUSH
25933: LD_EXP 75
25937: AND
25938: IFFALSE 26022
25940: GO 25942
25942: DISABLE
25943: LD_INT 0
25945: PPUSH
25946: PPUSH
// begin enable ;
25947: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25948: LD_ADDR_VAR 0 2
25952: PUSH
25953: LD_INT 22
25955: PUSH
25956: LD_OWVAR 2
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 32
25967: PUSH
25968: LD_INT 3
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PPUSH
25979: CALL_OW 69
25983: ST_TO_ADDR
// if not tmp then
25984: LD_VAR 0 2
25988: NOT
25989: IFFALSE 25993
// exit ;
25991: GO 26022
// for i in tmp do
25993: LD_ADDR_VAR 0 1
25997: PUSH
25998: LD_VAR 0 2
26002: PUSH
26003: FOR_IN
26004: IFFALSE 26020
// begin SetLives ( i , 0 ) ;
26006: LD_VAR 0 1
26010: PPUSH
26011: LD_INT 0
26013: PPUSH
26014: CALL_OW 234
// end ;
26018: GO 26003
26020: POP
26021: POP
// end ;
26022: PPOPN 2
26024: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26025: LD_EXP 69
26029: PUSH
26030: LD_EXP 72
26034: AND
26035: IFFALSE 26128
26037: GO 26039
26039: DISABLE
26040: LD_INT 0
26042: PPUSH
// begin enable ;
26043: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26044: LD_ADDR_VAR 0 1
26048: PUSH
26049: LD_INT 22
26051: PUSH
26052: LD_OWVAR 2
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 2
26063: PUSH
26064: LD_INT 25
26066: PUSH
26067: LD_INT 5
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 25
26076: PUSH
26077: LD_INT 9
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 25
26086: PUSH
26087: LD_INT 8
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PPUSH
26104: CALL_OW 69
26108: PUSH
26109: FOR_IN
26110: IFFALSE 26126
// begin SetClass ( i , 1 ) ;
26112: LD_VAR 0 1
26116: PPUSH
26117: LD_INT 1
26119: PPUSH
26120: CALL_OW 336
// end ;
26124: GO 26109
26126: POP
26127: POP
// end ;
26128: PPOPN 1
26130: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26131: LD_EXP 69
26135: PUSH
26136: LD_EXP 73
26140: AND
26141: PUSH
26142: LD_OWVAR 65
26146: PUSH
26147: LD_INT 7
26149: LESS
26150: AND
26151: IFFALSE 26165
26153: GO 26155
26155: DISABLE
// begin enable ;
26156: ENABLE
// game_speed := 7 ;
26157: LD_ADDR_OWVAR 65
26161: PUSH
26162: LD_INT 7
26164: ST_TO_ADDR
// end ;
26165: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26166: LD_EXP 69
26170: PUSH
26171: LD_EXP 76
26175: AND
26176: IFFALSE 26378
26178: GO 26180
26180: DISABLE
26181: LD_INT 0
26183: PPUSH
26184: PPUSH
26185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26186: LD_ADDR_VAR 0 3
26190: PUSH
26191: LD_INT 81
26193: PUSH
26194: LD_OWVAR 2
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 21
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PPUSH
26217: CALL_OW 69
26221: ST_TO_ADDR
// if not tmp then
26222: LD_VAR 0 3
26226: NOT
26227: IFFALSE 26231
// exit ;
26229: GO 26378
// if tmp > 5 then
26231: LD_VAR 0 3
26235: PUSH
26236: LD_INT 5
26238: GREATER
26239: IFFALSE 26251
// k := 5 else
26241: LD_ADDR_VAR 0 2
26245: PUSH
26246: LD_INT 5
26248: ST_TO_ADDR
26249: GO 26261
// k := tmp ;
26251: LD_ADDR_VAR 0 2
26255: PUSH
26256: LD_VAR 0 3
26260: ST_TO_ADDR
// for i := 1 to k do
26261: LD_ADDR_VAR 0 1
26265: PUSH
26266: DOUBLE
26267: LD_INT 1
26269: DEC
26270: ST_TO_ADDR
26271: LD_VAR 0 2
26275: PUSH
26276: FOR_TO
26277: IFFALSE 26376
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26279: LD_VAR 0 3
26283: PUSH
26284: LD_VAR 0 1
26288: ARRAY
26289: PPUSH
26290: LD_VAR 0 1
26294: PUSH
26295: LD_INT 4
26297: MOD
26298: PUSH
26299: LD_INT 1
26301: PLUS
26302: PPUSH
26303: CALL_OW 259
26307: PUSH
26308: LD_INT 10
26310: LESS
26311: IFFALSE 26374
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26313: LD_VAR 0 3
26317: PUSH
26318: LD_VAR 0 1
26322: ARRAY
26323: PPUSH
26324: LD_VAR 0 1
26328: PUSH
26329: LD_INT 4
26331: MOD
26332: PUSH
26333: LD_INT 1
26335: PLUS
26336: PPUSH
26337: LD_VAR 0 3
26341: PUSH
26342: LD_VAR 0 1
26346: ARRAY
26347: PPUSH
26348: LD_VAR 0 1
26352: PUSH
26353: LD_INT 4
26355: MOD
26356: PUSH
26357: LD_INT 1
26359: PLUS
26360: PPUSH
26361: CALL_OW 259
26365: PUSH
26366: LD_INT 1
26368: PLUS
26369: PPUSH
26370: CALL_OW 237
26374: GO 26276
26376: POP
26377: POP
// end ;
26378: PPOPN 3
26380: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26381: LD_EXP 69
26385: PUSH
26386: LD_EXP 77
26390: AND
26391: IFFALSE 26411
26393: GO 26395
26395: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26396: LD_INT 4
26398: PPUSH
26399: LD_OWVAR 2
26403: PPUSH
26404: LD_INT 0
26406: PPUSH
26407: CALL_OW 324
26411: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26412: LD_EXP 69
26416: PUSH
26417: LD_EXP 106
26421: AND
26422: IFFALSE 26442
26424: GO 26426
26426: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26427: LD_INT 19
26429: PPUSH
26430: LD_OWVAR 2
26434: PPUSH
26435: LD_INT 0
26437: PPUSH
26438: CALL_OW 324
26442: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26443: LD_EXP 69
26447: PUSH
26448: LD_EXP 78
26452: AND
26453: IFFALSE 26555
26455: GO 26457
26457: DISABLE
26458: LD_INT 0
26460: PPUSH
26461: PPUSH
// begin enable ;
26462: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26463: LD_ADDR_VAR 0 2
26467: PUSH
26468: LD_INT 22
26470: PUSH
26471: LD_OWVAR 2
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 2
26482: PUSH
26483: LD_INT 34
26485: PUSH
26486: LD_INT 11
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 34
26495: PUSH
26496: LD_INT 30
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: LIST
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PPUSH
26512: CALL_OW 69
26516: ST_TO_ADDR
// if not tmp then
26517: LD_VAR 0 2
26521: NOT
26522: IFFALSE 26526
// exit ;
26524: GO 26555
// for i in tmp do
26526: LD_ADDR_VAR 0 1
26530: PUSH
26531: LD_VAR 0 2
26535: PUSH
26536: FOR_IN
26537: IFFALSE 26553
// begin SetLives ( i , 0 ) ;
26539: LD_VAR 0 1
26543: PPUSH
26544: LD_INT 0
26546: PPUSH
26547: CALL_OW 234
// end ;
26551: GO 26536
26553: POP
26554: POP
// end ;
26555: PPOPN 2
26557: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26558: LD_EXP 69
26562: PUSH
26563: LD_EXP 79
26567: AND
26568: IFFALSE 26588
26570: GO 26572
26572: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26573: LD_INT 32
26575: PPUSH
26576: LD_OWVAR 2
26580: PPUSH
26581: LD_INT 0
26583: PPUSH
26584: CALL_OW 324
26588: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26589: LD_EXP 69
26593: PUSH
26594: LD_EXP 80
26598: AND
26599: IFFALSE 26780
26601: GO 26603
26603: DISABLE
26604: LD_INT 0
26606: PPUSH
26607: PPUSH
26608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26609: LD_ADDR_VAR 0 2
26613: PUSH
26614: LD_INT 22
26616: PUSH
26617: LD_OWVAR 2
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 33
26628: PUSH
26629: LD_INT 3
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PPUSH
26640: CALL_OW 69
26644: ST_TO_ADDR
// if not tmp then
26645: LD_VAR 0 2
26649: NOT
26650: IFFALSE 26654
// exit ;
26652: GO 26780
// side := 0 ;
26654: LD_ADDR_VAR 0 3
26658: PUSH
26659: LD_INT 0
26661: ST_TO_ADDR
// for i := 1 to 8 do
26662: LD_ADDR_VAR 0 1
26666: PUSH
26667: DOUBLE
26668: LD_INT 1
26670: DEC
26671: ST_TO_ADDR
26672: LD_INT 8
26674: PUSH
26675: FOR_TO
26676: IFFALSE 26724
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26678: LD_OWVAR 2
26682: PUSH
26683: LD_VAR 0 1
26687: NONEQUAL
26688: PUSH
26689: LD_OWVAR 2
26693: PPUSH
26694: LD_VAR 0 1
26698: PPUSH
26699: CALL_OW 81
26703: PUSH
26704: LD_INT 2
26706: EQUAL
26707: AND
26708: IFFALSE 26722
// begin side := i ;
26710: LD_ADDR_VAR 0 3
26714: PUSH
26715: LD_VAR 0 1
26719: ST_TO_ADDR
// break ;
26720: GO 26724
// end ;
26722: GO 26675
26724: POP
26725: POP
// if not side then
26726: LD_VAR 0 3
26730: NOT
26731: IFFALSE 26735
// exit ;
26733: GO 26780
// for i := 1 to tmp do
26735: LD_ADDR_VAR 0 1
26739: PUSH
26740: DOUBLE
26741: LD_INT 1
26743: DEC
26744: ST_TO_ADDR
26745: LD_VAR 0 2
26749: PUSH
26750: FOR_TO
26751: IFFALSE 26778
// if Prob ( 60 ) then
26753: LD_INT 60
26755: PPUSH
26756: CALL_OW 13
26760: IFFALSE 26776
// SetSide ( i , side ) ;
26762: LD_VAR 0 1
26766: PPUSH
26767: LD_VAR 0 3
26771: PPUSH
26772: CALL_OW 235
26776: GO 26750
26778: POP
26779: POP
// end ;
26780: PPOPN 3
26782: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26783: LD_EXP 69
26787: PUSH
26788: LD_EXP 82
26792: AND
26793: IFFALSE 26912
26795: GO 26797
26797: DISABLE
26798: LD_INT 0
26800: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26801: LD_ADDR_VAR 0 1
26805: PUSH
26806: LD_INT 22
26808: PUSH
26809: LD_OWVAR 2
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 21
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 3
26830: PUSH
26831: LD_INT 23
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: LIST
26849: PPUSH
26850: CALL_OW 69
26854: PUSH
26855: FOR_IN
26856: IFFALSE 26910
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26858: LD_VAR 0 1
26862: PPUSH
26863: CALL_OW 257
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: LD_INT 2
26873: PUSH
26874: LD_INT 3
26876: PUSH
26877: LD_INT 4
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: IN
26886: IFFALSE 26908
// SetClass ( un , rand ( 1 , 4 ) ) ;
26888: LD_VAR 0 1
26892: PPUSH
26893: LD_INT 1
26895: PPUSH
26896: LD_INT 4
26898: PPUSH
26899: CALL_OW 12
26903: PPUSH
26904: CALL_OW 336
26908: GO 26855
26910: POP
26911: POP
// end ;
26912: PPOPN 1
26914: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26915: LD_EXP 69
26919: PUSH
26920: LD_EXP 81
26924: AND
26925: IFFALSE 27004
26927: GO 26929
26929: DISABLE
26930: LD_INT 0
26932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26933: LD_ADDR_VAR 0 1
26937: PUSH
26938: LD_INT 22
26940: PUSH
26941: LD_OWVAR 2
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 21
26952: PUSH
26953: LD_INT 3
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PPUSH
26964: CALL_OW 69
26968: ST_TO_ADDR
// if not tmp then
26969: LD_VAR 0 1
26973: NOT
26974: IFFALSE 26978
// exit ;
26976: GO 27004
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26978: LD_VAR 0 1
26982: PUSH
26983: LD_INT 1
26985: PPUSH
26986: LD_VAR 0 1
26990: PPUSH
26991: CALL_OW 12
26995: ARRAY
26996: PPUSH
26997: LD_INT 100
26999: PPUSH
27000: CALL_OW 234
// end ;
27004: PPOPN 1
27006: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27007: LD_EXP 69
27011: PUSH
27012: LD_EXP 83
27016: AND
27017: IFFALSE 27115
27019: GO 27021
27021: DISABLE
27022: LD_INT 0
27024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27025: LD_ADDR_VAR 0 1
27029: PUSH
27030: LD_INT 22
27032: PUSH
27033: LD_OWVAR 2
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 21
27044: PUSH
27045: LD_INT 1
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PPUSH
27056: CALL_OW 69
27060: ST_TO_ADDR
// if not tmp then
27061: LD_VAR 0 1
27065: NOT
27066: IFFALSE 27070
// exit ;
27068: GO 27115
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27070: LD_VAR 0 1
27074: PUSH
27075: LD_INT 1
27077: PPUSH
27078: LD_VAR 0 1
27082: PPUSH
27083: CALL_OW 12
27087: ARRAY
27088: PPUSH
27089: LD_INT 1
27091: PPUSH
27092: LD_INT 4
27094: PPUSH
27095: CALL_OW 12
27099: PPUSH
27100: LD_INT 3000
27102: PPUSH
27103: LD_INT 9000
27105: PPUSH
27106: CALL_OW 12
27110: PPUSH
27111: CALL_OW 492
// end ;
27115: PPOPN 1
27117: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27118: LD_EXP 69
27122: PUSH
27123: LD_EXP 84
27127: AND
27128: IFFALSE 27148
27130: GO 27132
27132: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27133: LD_INT 1
27135: PPUSH
27136: LD_OWVAR 2
27140: PPUSH
27141: LD_INT 0
27143: PPUSH
27144: CALL_OW 324
27148: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27149: LD_EXP 69
27153: PUSH
27154: LD_EXP 85
27158: AND
27159: IFFALSE 27242
27161: GO 27163
27163: DISABLE
27164: LD_INT 0
27166: PPUSH
27167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27168: LD_ADDR_VAR 0 2
27172: PUSH
27173: LD_INT 22
27175: PUSH
27176: LD_OWVAR 2
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 21
27187: PUSH
27188: LD_INT 3
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PPUSH
27199: CALL_OW 69
27203: ST_TO_ADDR
// if not tmp then
27204: LD_VAR 0 2
27208: NOT
27209: IFFALSE 27213
// exit ;
27211: GO 27242
// for i in tmp do
27213: LD_ADDR_VAR 0 1
27217: PUSH
27218: LD_VAR 0 2
27222: PUSH
27223: FOR_IN
27224: IFFALSE 27240
// SetBLevel ( i , 10 ) ;
27226: LD_VAR 0 1
27230: PPUSH
27231: LD_INT 10
27233: PPUSH
27234: CALL_OW 241
27238: GO 27223
27240: POP
27241: POP
// end ;
27242: PPOPN 2
27244: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27245: LD_EXP 69
27249: PUSH
27250: LD_EXP 86
27254: AND
27255: IFFALSE 27366
27257: GO 27259
27259: DISABLE
27260: LD_INT 0
27262: PPUSH
27263: PPUSH
27264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27265: LD_ADDR_VAR 0 3
27269: PUSH
27270: LD_INT 22
27272: PUSH
27273: LD_OWVAR 2
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 25
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PPUSH
27296: CALL_OW 69
27300: ST_TO_ADDR
// if not tmp then
27301: LD_VAR 0 3
27305: NOT
27306: IFFALSE 27310
// exit ;
27308: GO 27366
// un := tmp [ rand ( 1 , tmp ) ] ;
27310: LD_ADDR_VAR 0 2
27314: PUSH
27315: LD_VAR 0 3
27319: PUSH
27320: LD_INT 1
27322: PPUSH
27323: LD_VAR 0 3
27327: PPUSH
27328: CALL_OW 12
27332: ARRAY
27333: ST_TO_ADDR
// if Crawls ( un ) then
27334: LD_VAR 0 2
27338: PPUSH
27339: CALL_OW 318
27343: IFFALSE 27354
// ComWalk ( un ) ;
27345: LD_VAR 0 2
27349: PPUSH
27350: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27354: LD_VAR 0 2
27358: PPUSH
27359: LD_INT 5
27361: PPUSH
27362: CALL_OW 336
// end ;
27366: PPOPN 3
27368: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27369: LD_EXP 69
27373: PUSH
27374: LD_EXP 87
27378: AND
27379: PUSH
27380: LD_OWVAR 67
27384: PUSH
27385: LD_INT 4
27387: LESS
27388: AND
27389: IFFALSE 27408
27391: GO 27393
27393: DISABLE
// begin Difficulty := Difficulty + 1 ;
27394: LD_ADDR_OWVAR 67
27398: PUSH
27399: LD_OWVAR 67
27403: PUSH
27404: LD_INT 1
27406: PLUS
27407: ST_TO_ADDR
// end ;
27408: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27409: LD_EXP 69
27413: PUSH
27414: LD_EXP 88
27418: AND
27419: IFFALSE 27522
27421: GO 27423
27423: DISABLE
27424: LD_INT 0
27426: PPUSH
// begin for i := 1 to 5 do
27427: LD_ADDR_VAR 0 1
27431: PUSH
27432: DOUBLE
27433: LD_INT 1
27435: DEC
27436: ST_TO_ADDR
27437: LD_INT 5
27439: PUSH
27440: FOR_TO
27441: IFFALSE 27520
// begin uc_nation := nation_nature ;
27443: LD_ADDR_OWVAR 21
27447: PUSH
27448: LD_INT 0
27450: ST_TO_ADDR
// uc_side := 0 ;
27451: LD_ADDR_OWVAR 20
27455: PUSH
27456: LD_INT 0
27458: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27459: LD_ADDR_OWVAR 29
27463: PUSH
27464: LD_INT 12
27466: PUSH
27467: LD_INT 12
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: ST_TO_ADDR
// hc_agressivity := 20 ;
27474: LD_ADDR_OWVAR 35
27478: PUSH
27479: LD_INT 20
27481: ST_TO_ADDR
// hc_class := class_tiger ;
27482: LD_ADDR_OWVAR 28
27486: PUSH
27487: LD_INT 14
27489: ST_TO_ADDR
// hc_gallery :=  ;
27490: LD_ADDR_OWVAR 33
27494: PUSH
27495: LD_STRING 
27497: ST_TO_ADDR
// hc_name :=  ;
27498: LD_ADDR_OWVAR 26
27502: PUSH
27503: LD_STRING 
27505: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27506: CALL_OW 44
27510: PPUSH
27511: LD_INT 0
27513: PPUSH
27514: CALL_OW 51
// end ;
27518: GO 27440
27520: POP
27521: POP
// end ;
27522: PPOPN 1
27524: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27525: LD_EXP 69
27529: PUSH
27530: LD_EXP 89
27534: AND
27535: IFFALSE 27544
27537: GO 27539
27539: DISABLE
// StreamSibBomb ;
27540: CALL 27545 0 0
27544: END
// export function StreamSibBomb ; var i , x , y ; begin
27545: LD_INT 0
27547: PPUSH
27548: PPUSH
27549: PPUSH
27550: PPUSH
// result := false ;
27551: LD_ADDR_VAR 0 1
27555: PUSH
27556: LD_INT 0
27558: ST_TO_ADDR
// for i := 1 to 16 do
27559: LD_ADDR_VAR 0 2
27563: PUSH
27564: DOUBLE
27565: LD_INT 1
27567: DEC
27568: ST_TO_ADDR
27569: LD_INT 16
27571: PUSH
27572: FOR_TO
27573: IFFALSE 27772
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27575: LD_ADDR_VAR 0 3
27579: PUSH
27580: LD_INT 10
27582: PUSH
27583: LD_INT 20
27585: PUSH
27586: LD_INT 30
27588: PUSH
27589: LD_INT 40
27591: PUSH
27592: LD_INT 50
27594: PUSH
27595: LD_INT 60
27597: PUSH
27598: LD_INT 70
27600: PUSH
27601: LD_INT 80
27603: PUSH
27604: LD_INT 90
27606: PUSH
27607: LD_INT 100
27609: PUSH
27610: LD_INT 110
27612: PUSH
27613: LD_INT 120
27615: PUSH
27616: LD_INT 130
27618: PUSH
27619: LD_INT 140
27621: PUSH
27622: LD_INT 150
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 1
27644: PPUSH
27645: LD_INT 15
27647: PPUSH
27648: CALL_OW 12
27652: ARRAY
27653: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27654: LD_ADDR_VAR 0 4
27658: PUSH
27659: LD_INT 10
27661: PUSH
27662: LD_INT 20
27664: PUSH
27665: LD_INT 30
27667: PUSH
27668: LD_INT 40
27670: PUSH
27671: LD_INT 50
27673: PUSH
27674: LD_INT 60
27676: PUSH
27677: LD_INT 70
27679: PUSH
27680: LD_INT 80
27682: PUSH
27683: LD_INT 90
27685: PUSH
27686: LD_INT 100
27688: PUSH
27689: LD_INT 110
27691: PUSH
27692: LD_INT 120
27694: PUSH
27695: LD_INT 130
27697: PUSH
27698: LD_INT 140
27700: PUSH
27701: LD_INT 150
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 1
27723: PPUSH
27724: LD_INT 15
27726: PPUSH
27727: CALL_OW 12
27731: ARRAY
27732: ST_TO_ADDR
// if ValidHex ( x , y ) then
27733: LD_VAR 0 3
27737: PPUSH
27738: LD_VAR 0 4
27742: PPUSH
27743: CALL_OW 488
27747: IFFALSE 27770
// begin result := [ x , y ] ;
27749: LD_ADDR_VAR 0 1
27753: PUSH
27754: LD_VAR 0 3
27758: PUSH
27759: LD_VAR 0 4
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: ST_TO_ADDR
// break ;
27768: GO 27772
// end ; end ;
27770: GO 27572
27772: POP
27773: POP
// if result then
27774: LD_VAR 0 1
27778: IFFALSE 27838
// begin ToLua ( playSibBomb() ) ;
27780: LD_STRING playSibBomb()
27782: PPUSH
27783: CALL_OW 559
// wait ( 0 0$14 ) ;
27787: LD_INT 490
27789: PPUSH
27790: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27794: LD_VAR 0 1
27798: PUSH
27799: LD_INT 1
27801: ARRAY
27802: PPUSH
27803: LD_VAR 0 1
27807: PUSH
27808: LD_INT 2
27810: ARRAY
27811: PPUSH
27812: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27816: LD_VAR 0 1
27820: PUSH
27821: LD_INT 1
27823: ARRAY
27824: PPUSH
27825: LD_VAR 0 1
27829: PUSH
27830: LD_INT 2
27832: ARRAY
27833: PPUSH
27834: CALL_OW 429
// end ; end ;
27838: LD_VAR 0 1
27842: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27843: LD_EXP 69
27847: PUSH
27848: LD_EXP 91
27852: AND
27853: IFFALSE 27865
27855: GO 27857
27857: DISABLE
// YouLost (  ) ;
27858: LD_STRING 
27860: PPUSH
27861: CALL_OW 104
27865: END
// every 0 0$1 trigger StreamModeActive and sFog do
27866: LD_EXP 69
27870: PUSH
27871: LD_EXP 90
27875: AND
27876: IFFALSE 27890
27878: GO 27880
27880: DISABLE
// FogOff ( your_side ) ;
27881: LD_OWVAR 2
27885: PPUSH
27886: CALL_OW 344
27890: END
// every 0 0$1 trigger StreamModeActive and sSun do
27891: LD_EXP 69
27895: PUSH
27896: LD_EXP 92
27900: AND
27901: IFFALSE 27929
27903: GO 27905
27905: DISABLE
// begin solar_recharge_percent := 0 ;
27906: LD_ADDR_OWVAR 79
27910: PUSH
27911: LD_INT 0
27913: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27914: LD_INT 10500
27916: PPUSH
27917: CALL_OW 67
// solar_recharge_percent := 100 ;
27921: LD_ADDR_OWVAR 79
27925: PUSH
27926: LD_INT 100
27928: ST_TO_ADDR
// end ;
27929: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27930: LD_EXP 69
27934: PUSH
27935: LD_EXP 93
27939: AND
27940: IFFALSE 28179
27942: GO 27944
27944: DISABLE
27945: LD_INT 0
27947: PPUSH
27948: PPUSH
27949: PPUSH
// begin tmp := [ ] ;
27950: LD_ADDR_VAR 0 3
27954: PUSH
27955: EMPTY
27956: ST_TO_ADDR
// for i := 1 to 6 do
27957: LD_ADDR_VAR 0 1
27961: PUSH
27962: DOUBLE
27963: LD_INT 1
27965: DEC
27966: ST_TO_ADDR
27967: LD_INT 6
27969: PUSH
27970: FOR_TO
27971: IFFALSE 28076
// begin uc_nation := nation_nature ;
27973: LD_ADDR_OWVAR 21
27977: PUSH
27978: LD_INT 0
27980: ST_TO_ADDR
// uc_side := 0 ;
27981: LD_ADDR_OWVAR 20
27985: PUSH
27986: LD_INT 0
27988: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27989: LD_ADDR_OWVAR 29
27993: PUSH
27994: LD_INT 12
27996: PUSH
27997: LD_INT 12
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: ST_TO_ADDR
// hc_agressivity := 20 ;
28004: LD_ADDR_OWVAR 35
28008: PUSH
28009: LD_INT 20
28011: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28012: LD_ADDR_OWVAR 28
28016: PUSH
28017: LD_INT 17
28019: ST_TO_ADDR
// hc_gallery :=  ;
28020: LD_ADDR_OWVAR 33
28024: PUSH
28025: LD_STRING 
28027: ST_TO_ADDR
// hc_name :=  ;
28028: LD_ADDR_OWVAR 26
28032: PUSH
28033: LD_STRING 
28035: ST_TO_ADDR
// un := CreateHuman ;
28036: LD_ADDR_VAR 0 2
28040: PUSH
28041: CALL_OW 44
28045: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28046: LD_VAR 0 2
28050: PPUSH
28051: LD_INT 1
28053: PPUSH
28054: CALL_OW 51
// tmp := tmp ^ un ;
28058: LD_ADDR_VAR 0 3
28062: PUSH
28063: LD_VAR 0 3
28067: PUSH
28068: LD_VAR 0 2
28072: ADD
28073: ST_TO_ADDR
// end ;
28074: GO 27970
28076: POP
28077: POP
// repeat wait ( 0 0$1 ) ;
28078: LD_INT 35
28080: PPUSH
28081: CALL_OW 67
// for un in tmp do
28085: LD_ADDR_VAR 0 2
28089: PUSH
28090: LD_VAR 0 3
28094: PUSH
28095: FOR_IN
28096: IFFALSE 28170
// begin if IsDead ( un ) then
28098: LD_VAR 0 2
28102: PPUSH
28103: CALL_OW 301
28107: IFFALSE 28127
// begin tmp := tmp diff un ;
28109: LD_ADDR_VAR 0 3
28113: PUSH
28114: LD_VAR 0 3
28118: PUSH
28119: LD_VAR 0 2
28123: DIFF
28124: ST_TO_ADDR
// continue ;
28125: GO 28095
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28127: LD_VAR 0 2
28131: PPUSH
28132: LD_INT 3
28134: PUSH
28135: LD_INT 22
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PPUSH
28149: CALL_OW 69
28153: PPUSH
28154: LD_VAR 0 2
28158: PPUSH
28159: CALL_OW 74
28163: PPUSH
28164: CALL_OW 115
// end ;
28168: GO 28095
28170: POP
28171: POP
// until not tmp ;
28172: LD_VAR 0 3
28176: NOT
28177: IFFALSE 28078
// end ;
28179: PPOPN 3
28181: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28182: LD_EXP 69
28186: PUSH
28187: LD_EXP 94
28191: AND
28192: IFFALSE 28246
28194: GO 28196
28196: DISABLE
// begin ToLua ( displayTroll(); ) ;
28197: LD_STRING displayTroll();
28199: PPUSH
28200: CALL_OW 559
// wait ( 3 3$00 ) ;
28204: LD_INT 6300
28206: PPUSH
28207: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28211: LD_STRING hideTroll();
28213: PPUSH
28214: CALL_OW 559
// wait ( 1 1$00 ) ;
28218: LD_INT 2100
28220: PPUSH
28221: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28225: LD_STRING displayTroll();
28227: PPUSH
28228: CALL_OW 559
// wait ( 1 1$00 ) ;
28232: LD_INT 2100
28234: PPUSH
28235: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28239: LD_STRING hideTroll();
28241: PPUSH
28242: CALL_OW 559
// end ;
28246: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28247: LD_EXP 69
28251: PUSH
28252: LD_EXP 95
28256: AND
28257: IFFALSE 28320
28259: GO 28261
28261: DISABLE
28262: LD_INT 0
28264: PPUSH
// begin p := 0 ;
28265: LD_ADDR_VAR 0 1
28269: PUSH
28270: LD_INT 0
28272: ST_TO_ADDR
// repeat game_speed := 1 ;
28273: LD_ADDR_OWVAR 65
28277: PUSH
28278: LD_INT 1
28280: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28281: LD_INT 35
28283: PPUSH
28284: CALL_OW 67
// p := p + 1 ;
28288: LD_ADDR_VAR 0 1
28292: PUSH
28293: LD_VAR 0 1
28297: PUSH
28298: LD_INT 1
28300: PLUS
28301: ST_TO_ADDR
// until p >= 60 ;
28302: LD_VAR 0 1
28306: PUSH
28307: LD_INT 60
28309: GREATEREQUAL
28310: IFFALSE 28273
// game_speed := 4 ;
28312: LD_ADDR_OWVAR 65
28316: PUSH
28317: LD_INT 4
28319: ST_TO_ADDR
// end ;
28320: PPOPN 1
28322: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28323: LD_EXP 69
28327: PUSH
28328: LD_EXP 96
28332: AND
28333: IFFALSE 28479
28335: GO 28337
28337: DISABLE
28338: LD_INT 0
28340: PPUSH
28341: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28342: LD_ADDR_VAR 0 1
28346: PUSH
28347: LD_INT 22
28349: PUSH
28350: LD_OWVAR 2
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: LD_INT 30
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 30
28374: PUSH
28375: LD_INT 1
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: LIST
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PPUSH
28391: CALL_OW 69
28395: ST_TO_ADDR
// if not depot then
28396: LD_VAR 0 1
28400: NOT
28401: IFFALSE 28405
// exit ;
28403: GO 28479
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28405: LD_ADDR_VAR 0 2
28409: PUSH
28410: LD_VAR 0 1
28414: PUSH
28415: LD_INT 1
28417: PPUSH
28418: LD_VAR 0 1
28422: PPUSH
28423: CALL_OW 12
28427: ARRAY
28428: PPUSH
28429: CALL_OW 274
28433: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28434: LD_VAR 0 2
28438: PPUSH
28439: LD_INT 1
28441: PPUSH
28442: LD_INT 0
28444: PPUSH
28445: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28449: LD_VAR 0 2
28453: PPUSH
28454: LD_INT 2
28456: PPUSH
28457: LD_INT 0
28459: PPUSH
28460: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28464: LD_VAR 0 2
28468: PPUSH
28469: LD_INT 3
28471: PPUSH
28472: LD_INT 0
28474: PPUSH
28475: CALL_OW 277
// end ;
28479: PPOPN 2
28481: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28482: LD_EXP 69
28486: PUSH
28487: LD_EXP 97
28491: AND
28492: IFFALSE 28589
28494: GO 28496
28496: DISABLE
28497: LD_INT 0
28499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28500: LD_ADDR_VAR 0 1
28504: PUSH
28505: LD_INT 22
28507: PUSH
28508: LD_OWVAR 2
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 21
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 3
28529: PUSH
28530: LD_INT 23
28532: PUSH
28533: LD_INT 0
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: LIST
28548: PPUSH
28549: CALL_OW 69
28553: ST_TO_ADDR
// if not tmp then
28554: LD_VAR 0 1
28558: NOT
28559: IFFALSE 28563
// exit ;
28561: GO 28589
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28563: LD_VAR 0 1
28567: PUSH
28568: LD_INT 1
28570: PPUSH
28571: LD_VAR 0 1
28575: PPUSH
28576: CALL_OW 12
28580: ARRAY
28581: PPUSH
28582: LD_INT 200
28584: PPUSH
28585: CALL_OW 234
// end ;
28589: PPOPN 1
28591: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28592: LD_EXP 69
28596: PUSH
28597: LD_EXP 98
28601: AND
28602: IFFALSE 28681
28604: GO 28606
28606: DISABLE
28607: LD_INT 0
28609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28610: LD_ADDR_VAR 0 1
28614: PUSH
28615: LD_INT 22
28617: PUSH
28618: LD_OWVAR 2
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 21
28629: PUSH
28630: LD_INT 2
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PPUSH
28641: CALL_OW 69
28645: ST_TO_ADDR
// if not tmp then
28646: LD_VAR 0 1
28650: NOT
28651: IFFALSE 28655
// exit ;
28653: GO 28681
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28655: LD_VAR 0 1
28659: PUSH
28660: LD_INT 1
28662: PPUSH
28663: LD_VAR 0 1
28667: PPUSH
28668: CALL_OW 12
28672: ARRAY
28673: PPUSH
28674: LD_INT 60
28676: PPUSH
28677: CALL_OW 234
// end ;
28681: PPOPN 1
28683: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28684: LD_EXP 69
28688: PUSH
28689: LD_EXP 99
28693: AND
28694: IFFALSE 28793
28696: GO 28698
28698: DISABLE
28699: LD_INT 0
28701: PPUSH
28702: PPUSH
// begin enable ;
28703: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28704: LD_ADDR_VAR 0 1
28708: PUSH
28709: LD_INT 22
28711: PUSH
28712: LD_OWVAR 2
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 61
28723: PUSH
28724: EMPTY
28725: LIST
28726: PUSH
28727: LD_INT 33
28729: PUSH
28730: LD_INT 2
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: LIST
28741: PPUSH
28742: CALL_OW 69
28746: ST_TO_ADDR
// if not tmp then
28747: LD_VAR 0 1
28751: NOT
28752: IFFALSE 28756
// exit ;
28754: GO 28793
// for i in tmp do
28756: LD_ADDR_VAR 0 2
28760: PUSH
28761: LD_VAR 0 1
28765: PUSH
28766: FOR_IN
28767: IFFALSE 28791
// if IsControledBy ( i ) then
28769: LD_VAR 0 2
28773: PPUSH
28774: CALL_OW 312
28778: IFFALSE 28789
// ComUnlink ( i ) ;
28780: LD_VAR 0 2
28784: PPUSH
28785: CALL_OW 136
28789: GO 28766
28791: POP
28792: POP
// end ;
28793: PPOPN 2
28795: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28796: LD_EXP 69
28800: PUSH
28801: LD_EXP 100
28805: AND
28806: IFFALSE 28946
28808: GO 28810
28810: DISABLE
28811: LD_INT 0
28813: PPUSH
28814: PPUSH
// begin ToLua ( displayPowell(); ) ;
28815: LD_STRING displayPowell();
28817: PPUSH
28818: CALL_OW 559
// uc_side := 0 ;
28822: LD_ADDR_OWVAR 20
28826: PUSH
28827: LD_INT 0
28829: ST_TO_ADDR
// uc_nation := 2 ;
28830: LD_ADDR_OWVAR 21
28834: PUSH
28835: LD_INT 2
28837: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28838: LD_ADDR_OWVAR 37
28842: PUSH
28843: LD_INT 14
28845: ST_TO_ADDR
// vc_engine := engine_siberite ;
28846: LD_ADDR_OWVAR 39
28850: PUSH
28851: LD_INT 3
28853: ST_TO_ADDR
// vc_control := control_apeman ;
28854: LD_ADDR_OWVAR 38
28858: PUSH
28859: LD_INT 5
28861: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28862: LD_ADDR_OWVAR 40
28866: PUSH
28867: LD_INT 29
28869: ST_TO_ADDR
// un := CreateVehicle ;
28870: LD_ADDR_VAR 0 2
28874: PUSH
28875: CALL_OW 45
28879: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28880: LD_VAR 0 2
28884: PPUSH
28885: LD_INT 1
28887: PPUSH
28888: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28892: LD_INT 35
28894: PPUSH
28895: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28899: LD_VAR 0 2
28903: PPUSH
28904: LD_INT 22
28906: PUSH
28907: LD_OWVAR 2
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PPUSH
28916: CALL_OW 69
28920: PPUSH
28921: LD_VAR 0 2
28925: PPUSH
28926: CALL_OW 74
28930: PPUSH
28931: CALL_OW 115
// until IsDead ( un ) ;
28935: LD_VAR 0 2
28939: PPUSH
28940: CALL_OW 301
28944: IFFALSE 28892
// end ;
28946: PPOPN 2
28948: END
// every 0 0$1 trigger StreamModeActive and sStu do
28949: LD_EXP 69
28953: PUSH
28954: LD_EXP 108
28958: AND
28959: IFFALSE 28975
28961: GO 28963
28963: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28964: LD_STRING displayStucuk();
28966: PPUSH
28967: CALL_OW 559
// ResetFog ;
28971: CALL_OW 335
// end ;
28975: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28976: LD_EXP 69
28980: PUSH
28981: LD_EXP 101
28985: AND
28986: IFFALSE 29127
28988: GO 28990
28990: DISABLE
28991: LD_INT 0
28993: PPUSH
28994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28995: LD_ADDR_VAR 0 2
28999: PUSH
29000: LD_INT 22
29002: PUSH
29003: LD_OWVAR 2
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 21
29014: PUSH
29015: LD_INT 1
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PPUSH
29026: CALL_OW 69
29030: ST_TO_ADDR
// if not tmp then
29031: LD_VAR 0 2
29035: NOT
29036: IFFALSE 29040
// exit ;
29038: GO 29127
// un := tmp [ rand ( 1 , tmp ) ] ;
29040: LD_ADDR_VAR 0 1
29044: PUSH
29045: LD_VAR 0 2
29049: PUSH
29050: LD_INT 1
29052: PPUSH
29053: LD_VAR 0 2
29057: PPUSH
29058: CALL_OW 12
29062: ARRAY
29063: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29064: LD_VAR 0 1
29068: PPUSH
29069: LD_INT 0
29071: PPUSH
29072: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29076: LD_VAR 0 1
29080: PPUSH
29081: LD_OWVAR 3
29085: PUSH
29086: LD_VAR 0 1
29090: DIFF
29091: PPUSH
29092: LD_VAR 0 1
29096: PPUSH
29097: CALL_OW 74
29101: PPUSH
29102: CALL_OW 115
// wait ( 0 0$20 ) ;
29106: LD_INT 700
29108: PPUSH
29109: CALL_OW 67
// SetSide ( un , your_side ) ;
29113: LD_VAR 0 1
29117: PPUSH
29118: LD_OWVAR 2
29122: PPUSH
29123: CALL_OW 235
// end ;
29127: PPOPN 2
29129: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29130: LD_EXP 69
29134: PUSH
29135: LD_EXP 102
29139: AND
29140: IFFALSE 29246
29142: GO 29144
29144: DISABLE
29145: LD_INT 0
29147: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29148: LD_ADDR_VAR 0 1
29152: PUSH
29153: LD_INT 22
29155: PUSH
29156: LD_OWVAR 2
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 2
29167: PUSH
29168: LD_INT 30
29170: PUSH
29171: LD_INT 0
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 30
29180: PUSH
29181: LD_INT 1
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: LIST
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PPUSH
29197: CALL_OW 69
29201: ST_TO_ADDR
// if not depot then
29202: LD_VAR 0 1
29206: NOT
29207: IFFALSE 29211
// exit ;
29209: GO 29246
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29211: LD_VAR 0 1
29215: PUSH
29216: LD_INT 1
29218: ARRAY
29219: PPUSH
29220: CALL_OW 250
29224: PPUSH
29225: LD_VAR 0 1
29229: PUSH
29230: LD_INT 1
29232: ARRAY
29233: PPUSH
29234: CALL_OW 251
29238: PPUSH
29239: LD_INT 70
29241: PPUSH
29242: CALL_OW 495
// end ;
29246: PPOPN 1
29248: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29249: LD_EXP 69
29253: PUSH
29254: LD_EXP 103
29258: AND
29259: IFFALSE 29470
29261: GO 29263
29263: DISABLE
29264: LD_INT 0
29266: PPUSH
29267: PPUSH
29268: PPUSH
29269: PPUSH
29270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29271: LD_ADDR_VAR 0 5
29275: PUSH
29276: LD_INT 22
29278: PUSH
29279: LD_OWVAR 2
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 21
29290: PUSH
29291: LD_INT 1
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PPUSH
29302: CALL_OW 69
29306: ST_TO_ADDR
// if not tmp then
29307: LD_VAR 0 5
29311: NOT
29312: IFFALSE 29316
// exit ;
29314: GO 29470
// for i in tmp do
29316: LD_ADDR_VAR 0 1
29320: PUSH
29321: LD_VAR 0 5
29325: PUSH
29326: FOR_IN
29327: IFFALSE 29468
// begin d := rand ( 0 , 5 ) ;
29329: LD_ADDR_VAR 0 4
29333: PUSH
29334: LD_INT 0
29336: PPUSH
29337: LD_INT 5
29339: PPUSH
29340: CALL_OW 12
29344: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29345: LD_ADDR_VAR 0 2
29349: PUSH
29350: LD_VAR 0 1
29354: PPUSH
29355: CALL_OW 250
29359: PPUSH
29360: LD_VAR 0 4
29364: PPUSH
29365: LD_INT 3
29367: PPUSH
29368: LD_INT 12
29370: PPUSH
29371: CALL_OW 12
29375: PPUSH
29376: CALL_OW 272
29380: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29381: LD_ADDR_VAR 0 3
29385: PUSH
29386: LD_VAR 0 1
29390: PPUSH
29391: CALL_OW 251
29395: PPUSH
29396: LD_VAR 0 4
29400: PPUSH
29401: LD_INT 3
29403: PPUSH
29404: LD_INT 12
29406: PPUSH
29407: CALL_OW 12
29411: PPUSH
29412: CALL_OW 273
29416: ST_TO_ADDR
// if ValidHex ( x , y ) then
29417: LD_VAR 0 2
29421: PPUSH
29422: LD_VAR 0 3
29426: PPUSH
29427: CALL_OW 488
29431: IFFALSE 29466
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29433: LD_VAR 0 1
29437: PPUSH
29438: LD_VAR 0 2
29442: PPUSH
29443: LD_VAR 0 3
29447: PPUSH
29448: LD_INT 3
29450: PPUSH
29451: LD_INT 6
29453: PPUSH
29454: CALL_OW 12
29458: PPUSH
29459: LD_INT 1
29461: PPUSH
29462: CALL_OW 483
// end ;
29466: GO 29326
29468: POP
29469: POP
// end ;
29470: PPOPN 5
29472: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29473: LD_EXP 69
29477: PUSH
29478: LD_EXP 104
29482: AND
29483: IFFALSE 29577
29485: GO 29487
29487: DISABLE
29488: LD_INT 0
29490: PPUSH
29491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29492: LD_ADDR_VAR 0 2
29496: PUSH
29497: LD_INT 22
29499: PUSH
29500: LD_OWVAR 2
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 32
29511: PUSH
29512: LD_INT 1
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 21
29521: PUSH
29522: LD_INT 2
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: LIST
29533: PPUSH
29534: CALL_OW 69
29538: ST_TO_ADDR
// if not tmp then
29539: LD_VAR 0 2
29543: NOT
29544: IFFALSE 29548
// exit ;
29546: GO 29577
// for i in tmp do
29548: LD_ADDR_VAR 0 1
29552: PUSH
29553: LD_VAR 0 2
29557: PUSH
29558: FOR_IN
29559: IFFALSE 29575
// SetFuel ( i , 0 ) ;
29561: LD_VAR 0 1
29565: PPUSH
29566: LD_INT 0
29568: PPUSH
29569: CALL_OW 240
29573: GO 29558
29575: POP
29576: POP
// end ;
29577: PPOPN 2
29579: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29580: LD_EXP 69
29584: PUSH
29585: LD_EXP 105
29589: AND
29590: IFFALSE 29656
29592: GO 29594
29594: DISABLE
29595: LD_INT 0
29597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29598: LD_ADDR_VAR 0 1
29602: PUSH
29603: LD_INT 22
29605: PUSH
29606: LD_OWVAR 2
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 30
29617: PUSH
29618: LD_INT 29
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PPUSH
29629: CALL_OW 69
29633: ST_TO_ADDR
// if not tmp then
29634: LD_VAR 0 1
29638: NOT
29639: IFFALSE 29643
// exit ;
29641: GO 29656
// DestroyUnit ( tmp [ 1 ] ) ;
29643: LD_VAR 0 1
29647: PUSH
29648: LD_INT 1
29650: ARRAY
29651: PPUSH
29652: CALL_OW 65
// end ;
29656: PPOPN 1
29658: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29659: LD_EXP 69
29663: PUSH
29664: LD_EXP 107
29668: AND
29669: IFFALSE 29798
29671: GO 29673
29673: DISABLE
29674: LD_INT 0
29676: PPUSH
// begin uc_side := 0 ;
29677: LD_ADDR_OWVAR 20
29681: PUSH
29682: LD_INT 0
29684: ST_TO_ADDR
// uc_nation := nation_arabian ;
29685: LD_ADDR_OWVAR 21
29689: PUSH
29690: LD_INT 2
29692: ST_TO_ADDR
// hc_gallery :=  ;
29693: LD_ADDR_OWVAR 33
29697: PUSH
29698: LD_STRING 
29700: ST_TO_ADDR
// hc_name :=  ;
29701: LD_ADDR_OWVAR 26
29705: PUSH
29706: LD_STRING 
29708: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29709: LD_INT 1
29711: PPUSH
29712: LD_INT 11
29714: PPUSH
29715: LD_INT 10
29717: PPUSH
29718: CALL_OW 380
// un := CreateHuman ;
29722: LD_ADDR_VAR 0 1
29726: PUSH
29727: CALL_OW 44
29731: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29732: LD_VAR 0 1
29736: PPUSH
29737: LD_INT 1
29739: PPUSH
29740: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29744: LD_INT 35
29746: PPUSH
29747: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29751: LD_VAR 0 1
29755: PPUSH
29756: LD_INT 22
29758: PUSH
29759: LD_OWVAR 2
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PPUSH
29768: CALL_OW 69
29772: PPUSH
29773: LD_VAR 0 1
29777: PPUSH
29778: CALL_OW 74
29782: PPUSH
29783: CALL_OW 115
// until IsDead ( un ) ;
29787: LD_VAR 0 1
29791: PPUSH
29792: CALL_OW 301
29796: IFFALSE 29744
// end ;
29798: PPOPN 1
29800: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29801: LD_EXP 69
29805: PUSH
29806: LD_EXP 109
29810: AND
29811: IFFALSE 29823
29813: GO 29815
29815: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29816: LD_STRING earthquake(getX(game), 0, 32)
29818: PPUSH
29819: CALL_OW 559
29823: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29824: LD_EXP 69
29828: PUSH
29829: LD_EXP 110
29833: AND
29834: IFFALSE 29925
29836: GO 29838
29838: DISABLE
29839: LD_INT 0
29841: PPUSH
// begin enable ;
29842: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29843: LD_ADDR_VAR 0 1
29847: PUSH
29848: LD_INT 22
29850: PUSH
29851: LD_OWVAR 2
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 21
29862: PUSH
29863: LD_INT 2
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 33
29872: PUSH
29873: LD_INT 3
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: LIST
29884: PPUSH
29885: CALL_OW 69
29889: ST_TO_ADDR
// if not tmp then
29890: LD_VAR 0 1
29894: NOT
29895: IFFALSE 29899
// exit ;
29897: GO 29925
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29899: LD_VAR 0 1
29903: PUSH
29904: LD_INT 1
29906: PPUSH
29907: LD_VAR 0 1
29911: PPUSH
29912: CALL_OW 12
29916: ARRAY
29917: PPUSH
29918: LD_INT 1
29920: PPUSH
29921: CALL_OW 234
// end ;
29925: PPOPN 1
29927: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29928: LD_EXP 69
29932: PUSH
29933: LD_EXP 111
29937: AND
29938: IFFALSE 30079
29940: GO 29942
29942: DISABLE
29943: LD_INT 0
29945: PPUSH
29946: PPUSH
29947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29948: LD_ADDR_VAR 0 3
29952: PUSH
29953: LD_INT 22
29955: PUSH
29956: LD_OWVAR 2
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 25
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PPUSH
29979: CALL_OW 69
29983: ST_TO_ADDR
// if not tmp then
29984: LD_VAR 0 3
29988: NOT
29989: IFFALSE 29993
// exit ;
29991: GO 30079
// un := tmp [ rand ( 1 , tmp ) ] ;
29993: LD_ADDR_VAR 0 2
29997: PUSH
29998: LD_VAR 0 3
30002: PUSH
30003: LD_INT 1
30005: PPUSH
30006: LD_VAR 0 3
30010: PPUSH
30011: CALL_OW 12
30015: ARRAY
30016: ST_TO_ADDR
// if Crawls ( un ) then
30017: LD_VAR 0 2
30021: PPUSH
30022: CALL_OW 318
30026: IFFALSE 30037
// ComWalk ( un ) ;
30028: LD_VAR 0 2
30032: PPUSH
30033: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30037: LD_VAR 0 2
30041: PPUSH
30042: LD_INT 9
30044: PPUSH
30045: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30049: LD_INT 28
30051: PPUSH
30052: LD_OWVAR 2
30056: PPUSH
30057: LD_INT 2
30059: PPUSH
30060: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30064: LD_INT 29
30066: PPUSH
30067: LD_OWVAR 2
30071: PPUSH
30072: LD_INT 2
30074: PPUSH
30075: CALL_OW 322
// end ;
30079: PPOPN 3
30081: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30082: LD_EXP 69
30086: PUSH
30087: LD_EXP 112
30091: AND
30092: IFFALSE 30203
30094: GO 30096
30096: DISABLE
30097: LD_INT 0
30099: PPUSH
30100: PPUSH
30101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30102: LD_ADDR_VAR 0 3
30106: PUSH
30107: LD_INT 22
30109: PUSH
30110: LD_OWVAR 2
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 25
30121: PUSH
30122: LD_INT 1
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PPUSH
30133: CALL_OW 69
30137: ST_TO_ADDR
// if not tmp then
30138: LD_VAR 0 3
30142: NOT
30143: IFFALSE 30147
// exit ;
30145: GO 30203
// un := tmp [ rand ( 1 , tmp ) ] ;
30147: LD_ADDR_VAR 0 2
30151: PUSH
30152: LD_VAR 0 3
30156: PUSH
30157: LD_INT 1
30159: PPUSH
30160: LD_VAR 0 3
30164: PPUSH
30165: CALL_OW 12
30169: ARRAY
30170: ST_TO_ADDR
// if Crawls ( un ) then
30171: LD_VAR 0 2
30175: PPUSH
30176: CALL_OW 318
30180: IFFALSE 30191
// ComWalk ( un ) ;
30182: LD_VAR 0 2
30186: PPUSH
30187: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30191: LD_VAR 0 2
30195: PPUSH
30196: LD_INT 8
30198: PPUSH
30199: CALL_OW 336
// end ;
30203: PPOPN 3
30205: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30206: LD_EXP 69
30210: PUSH
30211: LD_EXP 113
30215: AND
30216: IFFALSE 30360
30218: GO 30220
30220: DISABLE
30221: LD_INT 0
30223: PPUSH
30224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30225: LD_ADDR_VAR 0 2
30229: PUSH
30230: LD_INT 22
30232: PUSH
30233: LD_OWVAR 2
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 21
30244: PUSH
30245: LD_INT 2
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 2
30254: PUSH
30255: LD_INT 34
30257: PUSH
30258: LD_INT 12
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 34
30267: PUSH
30268: LD_INT 51
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 34
30277: PUSH
30278: LD_INT 32
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: LIST
30295: PPUSH
30296: CALL_OW 69
30300: ST_TO_ADDR
// if not tmp then
30301: LD_VAR 0 2
30305: NOT
30306: IFFALSE 30310
// exit ;
30308: GO 30360
// for i in tmp do
30310: LD_ADDR_VAR 0 1
30314: PUSH
30315: LD_VAR 0 2
30319: PUSH
30320: FOR_IN
30321: IFFALSE 30358
// if GetCargo ( i , mat_artifact ) = 0 then
30323: LD_VAR 0 1
30327: PPUSH
30328: LD_INT 4
30330: PPUSH
30331: CALL_OW 289
30335: PUSH
30336: LD_INT 0
30338: EQUAL
30339: IFFALSE 30356
// SetCargo ( i , mat_siberit , 100 ) ;
30341: LD_VAR 0 1
30345: PPUSH
30346: LD_INT 3
30348: PPUSH
30349: LD_INT 100
30351: PPUSH
30352: CALL_OW 290
30356: GO 30320
30358: POP
30359: POP
// end ;
30360: PPOPN 2
30362: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30363: LD_EXP 69
30367: PUSH
30368: LD_EXP 114
30372: AND
30373: IFFALSE 30556
30375: GO 30377
30377: DISABLE
30378: LD_INT 0
30380: PPUSH
30381: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30382: LD_ADDR_VAR 0 2
30386: PUSH
30387: LD_INT 22
30389: PUSH
30390: LD_OWVAR 2
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PPUSH
30399: CALL_OW 69
30403: ST_TO_ADDR
// if not tmp then
30404: LD_VAR 0 2
30408: NOT
30409: IFFALSE 30413
// exit ;
30411: GO 30556
// for i := 1 to 2 do
30413: LD_ADDR_VAR 0 1
30417: PUSH
30418: DOUBLE
30419: LD_INT 1
30421: DEC
30422: ST_TO_ADDR
30423: LD_INT 2
30425: PUSH
30426: FOR_TO
30427: IFFALSE 30554
// begin uc_side := your_side ;
30429: LD_ADDR_OWVAR 20
30433: PUSH
30434: LD_OWVAR 2
30438: ST_TO_ADDR
// uc_nation := nation_american ;
30439: LD_ADDR_OWVAR 21
30443: PUSH
30444: LD_INT 1
30446: ST_TO_ADDR
// vc_chassis := us_morphling ;
30447: LD_ADDR_OWVAR 37
30451: PUSH
30452: LD_INT 5
30454: ST_TO_ADDR
// vc_engine := engine_siberite ;
30455: LD_ADDR_OWVAR 39
30459: PUSH
30460: LD_INT 3
30462: ST_TO_ADDR
// vc_control := control_computer ;
30463: LD_ADDR_OWVAR 38
30467: PUSH
30468: LD_INT 3
30470: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30471: LD_ADDR_OWVAR 40
30475: PUSH
30476: LD_INT 10
30478: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30479: LD_VAR 0 2
30483: PUSH
30484: LD_INT 1
30486: ARRAY
30487: PPUSH
30488: CALL_OW 310
30492: NOT
30493: IFFALSE 30540
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30495: CALL_OW 45
30499: PPUSH
30500: LD_VAR 0 2
30504: PUSH
30505: LD_INT 1
30507: ARRAY
30508: PPUSH
30509: CALL_OW 250
30513: PPUSH
30514: LD_VAR 0 2
30518: PUSH
30519: LD_INT 1
30521: ARRAY
30522: PPUSH
30523: CALL_OW 251
30527: PPUSH
30528: LD_INT 12
30530: PPUSH
30531: LD_INT 1
30533: PPUSH
30534: CALL_OW 50
30538: GO 30552
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30540: CALL_OW 45
30544: PPUSH
30545: LD_INT 1
30547: PPUSH
30548: CALL_OW 51
// end ;
30552: GO 30426
30554: POP
30555: POP
// end ;
30556: PPOPN 2
30558: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30559: LD_EXP 69
30563: PUSH
30564: LD_EXP 115
30568: AND
30569: IFFALSE 30791
30571: GO 30573
30573: DISABLE
30574: LD_INT 0
30576: PPUSH
30577: PPUSH
30578: PPUSH
30579: PPUSH
30580: PPUSH
30581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30582: LD_ADDR_VAR 0 6
30586: PUSH
30587: LD_INT 22
30589: PUSH
30590: LD_OWVAR 2
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 21
30601: PUSH
30602: LD_INT 1
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 3
30611: PUSH
30612: LD_INT 23
30614: PUSH
30615: LD_INT 0
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: LIST
30630: PPUSH
30631: CALL_OW 69
30635: ST_TO_ADDR
// if not tmp then
30636: LD_VAR 0 6
30640: NOT
30641: IFFALSE 30645
// exit ;
30643: GO 30791
// s1 := rand ( 1 , 4 ) ;
30645: LD_ADDR_VAR 0 2
30649: PUSH
30650: LD_INT 1
30652: PPUSH
30653: LD_INT 4
30655: PPUSH
30656: CALL_OW 12
30660: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30661: LD_ADDR_VAR 0 4
30665: PUSH
30666: LD_VAR 0 6
30670: PUSH
30671: LD_INT 1
30673: ARRAY
30674: PPUSH
30675: LD_VAR 0 2
30679: PPUSH
30680: CALL_OW 259
30684: ST_TO_ADDR
// if s1 = 1 then
30685: LD_VAR 0 2
30689: PUSH
30690: LD_INT 1
30692: EQUAL
30693: IFFALSE 30713
// s2 := rand ( 2 , 4 ) else
30695: LD_ADDR_VAR 0 3
30699: PUSH
30700: LD_INT 2
30702: PPUSH
30703: LD_INT 4
30705: PPUSH
30706: CALL_OW 12
30710: ST_TO_ADDR
30711: GO 30721
// s2 := 1 ;
30713: LD_ADDR_VAR 0 3
30717: PUSH
30718: LD_INT 1
30720: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30721: LD_ADDR_VAR 0 5
30725: PUSH
30726: LD_VAR 0 6
30730: PUSH
30731: LD_INT 1
30733: ARRAY
30734: PPUSH
30735: LD_VAR 0 3
30739: PPUSH
30740: CALL_OW 259
30744: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30745: LD_VAR 0 6
30749: PUSH
30750: LD_INT 1
30752: ARRAY
30753: PPUSH
30754: LD_VAR 0 2
30758: PPUSH
30759: LD_VAR 0 5
30763: PPUSH
30764: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30768: LD_VAR 0 6
30772: PUSH
30773: LD_INT 1
30775: ARRAY
30776: PPUSH
30777: LD_VAR 0 3
30781: PPUSH
30782: LD_VAR 0 4
30786: PPUSH
30787: CALL_OW 237
// end ;
30791: PPOPN 6
30793: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30794: LD_EXP 69
30798: PUSH
30799: LD_EXP 116
30803: AND
30804: IFFALSE 30883
30806: GO 30808
30808: DISABLE
30809: LD_INT 0
30811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30812: LD_ADDR_VAR 0 1
30816: PUSH
30817: LD_INT 22
30819: PUSH
30820: LD_OWVAR 2
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 30
30831: PUSH
30832: LD_INT 3
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PPUSH
30843: CALL_OW 69
30847: ST_TO_ADDR
// if not tmp then
30848: LD_VAR 0 1
30852: NOT
30853: IFFALSE 30857
// exit ;
30855: GO 30883
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30857: LD_VAR 0 1
30861: PUSH
30862: LD_INT 1
30864: PPUSH
30865: LD_VAR 0 1
30869: PPUSH
30870: CALL_OW 12
30874: ARRAY
30875: PPUSH
30876: LD_INT 1
30878: PPUSH
30879: CALL_OW 234
// end ;
30883: PPOPN 1
30885: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30886: LD_EXP 69
30890: PUSH
30891: LD_EXP 117
30895: AND
30896: IFFALSE 31008
30898: GO 30900
30900: DISABLE
30901: LD_INT 0
30903: PPUSH
30904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30905: LD_ADDR_VAR 0 2
30909: PUSH
30910: LD_INT 22
30912: PUSH
30913: LD_OWVAR 2
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 2
30924: PUSH
30925: LD_INT 30
30927: PUSH
30928: LD_INT 27
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 30
30937: PUSH
30938: LD_INT 26
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 30
30947: PUSH
30948: LD_INT 28
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PPUSH
30965: CALL_OW 69
30969: ST_TO_ADDR
// if not tmp then
30970: LD_VAR 0 2
30974: NOT
30975: IFFALSE 30979
// exit ;
30977: GO 31008
// for i in tmp do
30979: LD_ADDR_VAR 0 1
30983: PUSH
30984: LD_VAR 0 2
30988: PUSH
30989: FOR_IN
30990: IFFALSE 31006
// SetLives ( i , 1 ) ;
30992: LD_VAR 0 1
30996: PPUSH
30997: LD_INT 1
30999: PPUSH
31000: CALL_OW 234
31004: GO 30989
31006: POP
31007: POP
// end ;
31008: PPOPN 2
31010: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31011: LD_EXP 69
31015: PUSH
31016: LD_EXP 118
31020: AND
31021: IFFALSE 31308
31023: GO 31025
31025: DISABLE
31026: LD_INT 0
31028: PPUSH
31029: PPUSH
31030: PPUSH
// begin i := rand ( 1 , 7 ) ;
31031: LD_ADDR_VAR 0 1
31035: PUSH
31036: LD_INT 1
31038: PPUSH
31039: LD_INT 7
31041: PPUSH
31042: CALL_OW 12
31046: ST_TO_ADDR
// case i of 1 :
31047: LD_VAR 0 1
31051: PUSH
31052: LD_INT 1
31054: DOUBLE
31055: EQUAL
31056: IFTRUE 31060
31058: GO 31070
31060: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31061: LD_STRING earthquake(getX(game), 0, 32)
31063: PPUSH
31064: CALL_OW 559
31068: GO 31308
31070: LD_INT 2
31072: DOUBLE
31073: EQUAL
31074: IFTRUE 31078
31076: GO 31092
31078: POP
// begin ToLua ( displayStucuk(); ) ;
31079: LD_STRING displayStucuk();
31081: PPUSH
31082: CALL_OW 559
// ResetFog ;
31086: CALL_OW 335
// end ; 3 :
31090: GO 31308
31092: LD_INT 3
31094: DOUBLE
31095: EQUAL
31096: IFTRUE 31100
31098: GO 31204
31100: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31101: LD_ADDR_VAR 0 2
31105: PUSH
31106: LD_INT 22
31108: PUSH
31109: LD_OWVAR 2
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 25
31120: PUSH
31121: LD_INT 1
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PPUSH
31132: CALL_OW 69
31136: ST_TO_ADDR
// if not tmp then
31137: LD_VAR 0 2
31141: NOT
31142: IFFALSE 31146
// exit ;
31144: GO 31308
// un := tmp [ rand ( 1 , tmp ) ] ;
31146: LD_ADDR_VAR 0 3
31150: PUSH
31151: LD_VAR 0 2
31155: PUSH
31156: LD_INT 1
31158: PPUSH
31159: LD_VAR 0 2
31163: PPUSH
31164: CALL_OW 12
31168: ARRAY
31169: ST_TO_ADDR
// if Crawls ( un ) then
31170: LD_VAR 0 3
31174: PPUSH
31175: CALL_OW 318
31179: IFFALSE 31190
// ComWalk ( un ) ;
31181: LD_VAR 0 3
31185: PPUSH
31186: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31190: LD_VAR 0 3
31194: PPUSH
31195: LD_INT 8
31197: PPUSH
31198: CALL_OW 336
// end ; 4 :
31202: GO 31308
31204: LD_INT 4
31206: DOUBLE
31207: EQUAL
31208: IFTRUE 31212
31210: GO 31286
31212: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31213: LD_ADDR_VAR 0 2
31217: PUSH
31218: LD_INT 22
31220: PUSH
31221: LD_OWVAR 2
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 30
31232: PUSH
31233: LD_INT 29
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PPUSH
31244: CALL_OW 69
31248: ST_TO_ADDR
// if not tmp then
31249: LD_VAR 0 2
31253: NOT
31254: IFFALSE 31258
// exit ;
31256: GO 31308
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31258: LD_VAR 0 2
31262: PUSH
31263: LD_INT 1
31265: ARRAY
31266: PPUSH
31267: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31271: LD_VAR 0 2
31275: PUSH
31276: LD_INT 1
31278: ARRAY
31279: PPUSH
31280: CALL_OW 65
// end ; 5 .. 7 :
31284: GO 31308
31286: LD_INT 5
31288: DOUBLE
31289: GREATEREQUAL
31290: IFFALSE 31298
31292: LD_INT 7
31294: DOUBLE
31295: LESSEQUAL
31296: IFTRUE 31300
31298: GO 31307
31300: POP
// StreamSibBomb ; end ;
31301: CALL 27545 0 0
31305: GO 31308
31307: POP
// end ;
31308: PPOPN 3
31310: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31311: LD_EXP 69
31315: PUSH
31316: LD_EXP 119
31320: AND
31321: IFFALSE 31477
31323: GO 31325
31325: DISABLE
31326: LD_INT 0
31328: PPUSH
31329: PPUSH
31330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31331: LD_ADDR_VAR 0 2
31335: PUSH
31336: LD_INT 81
31338: PUSH
31339: LD_OWVAR 2
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 2
31350: PUSH
31351: LD_INT 21
31353: PUSH
31354: LD_INT 1
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 21
31363: PUSH
31364: LD_INT 2
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: LIST
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PPUSH
31380: CALL_OW 69
31384: ST_TO_ADDR
// if not tmp then
31385: LD_VAR 0 2
31389: NOT
31390: IFFALSE 31394
// exit ;
31392: GO 31477
// p := 0 ;
31394: LD_ADDR_VAR 0 3
31398: PUSH
31399: LD_INT 0
31401: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31402: LD_INT 35
31404: PPUSH
31405: CALL_OW 67
// p := p + 1 ;
31409: LD_ADDR_VAR 0 3
31413: PUSH
31414: LD_VAR 0 3
31418: PUSH
31419: LD_INT 1
31421: PLUS
31422: ST_TO_ADDR
// for i in tmp do
31423: LD_ADDR_VAR 0 1
31427: PUSH
31428: LD_VAR 0 2
31432: PUSH
31433: FOR_IN
31434: IFFALSE 31465
// if GetLives ( i ) < 1000 then
31436: LD_VAR 0 1
31440: PPUSH
31441: CALL_OW 256
31445: PUSH
31446: LD_INT 1000
31448: LESS
31449: IFFALSE 31463
// SetLives ( i , 1000 ) ;
31451: LD_VAR 0 1
31455: PPUSH
31456: LD_INT 1000
31458: PPUSH
31459: CALL_OW 234
31463: GO 31433
31465: POP
31466: POP
// until p > 20 ;
31467: LD_VAR 0 3
31471: PUSH
31472: LD_INT 20
31474: GREATER
31475: IFFALSE 31402
// end ;
31477: PPOPN 3
31479: END
// every 0 0$1 trigger StreamModeActive and sTime do
31480: LD_EXP 69
31484: PUSH
31485: LD_EXP 120
31489: AND
31490: IFFALSE 31525
31492: GO 31494
31494: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31495: LD_INT 28
31497: PPUSH
31498: LD_OWVAR 2
31502: PPUSH
31503: LD_INT 2
31505: PPUSH
31506: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31510: LD_INT 30
31512: PPUSH
31513: LD_OWVAR 2
31517: PPUSH
31518: LD_INT 2
31520: PPUSH
31521: CALL_OW 322
// end ;
31525: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31526: LD_EXP 69
31530: PUSH
31531: LD_EXP 121
31535: AND
31536: IFFALSE 31657
31538: GO 31540
31540: DISABLE
31541: LD_INT 0
31543: PPUSH
31544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31545: LD_ADDR_VAR 0 2
31549: PUSH
31550: LD_INT 22
31552: PUSH
31553: LD_OWVAR 2
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 21
31564: PUSH
31565: LD_INT 1
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 3
31574: PUSH
31575: LD_INT 23
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: PPUSH
31594: CALL_OW 69
31598: ST_TO_ADDR
// if not tmp then
31599: LD_VAR 0 2
31603: NOT
31604: IFFALSE 31608
// exit ;
31606: GO 31657
// for i in tmp do
31608: LD_ADDR_VAR 0 1
31612: PUSH
31613: LD_VAR 0 2
31617: PUSH
31618: FOR_IN
31619: IFFALSE 31655
// begin if Crawls ( i ) then
31621: LD_VAR 0 1
31625: PPUSH
31626: CALL_OW 318
31630: IFFALSE 31641
// ComWalk ( i ) ;
31632: LD_VAR 0 1
31636: PPUSH
31637: CALL_OW 138
// SetClass ( i , 2 ) ;
31641: LD_VAR 0 1
31645: PPUSH
31646: LD_INT 2
31648: PPUSH
31649: CALL_OW 336
// end ;
31653: GO 31618
31655: POP
31656: POP
// end ;
31657: PPOPN 2
31659: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31660: LD_EXP 69
31664: PUSH
31665: LD_EXP 122
31669: AND
31670: IFFALSE 31958
31672: GO 31674
31674: DISABLE
31675: LD_INT 0
31677: PPUSH
31678: PPUSH
31679: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31680: LD_OWVAR 2
31684: PPUSH
31685: LD_INT 9
31687: PPUSH
31688: LD_INT 1
31690: PPUSH
31691: LD_INT 1
31693: PPUSH
31694: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31698: LD_INT 9
31700: PPUSH
31701: LD_OWVAR 2
31705: PPUSH
31706: CALL_OW 343
// uc_side := 9 ;
31710: LD_ADDR_OWVAR 20
31714: PUSH
31715: LD_INT 9
31717: ST_TO_ADDR
// uc_nation := 2 ;
31718: LD_ADDR_OWVAR 21
31722: PUSH
31723: LD_INT 2
31725: ST_TO_ADDR
// hc_name := Dark Warrior ;
31726: LD_ADDR_OWVAR 26
31730: PUSH
31731: LD_STRING Dark Warrior
31733: ST_TO_ADDR
// hc_gallery :=  ;
31734: LD_ADDR_OWVAR 33
31738: PUSH
31739: LD_STRING 
31741: ST_TO_ADDR
// hc_noskilllimit := true ;
31742: LD_ADDR_OWVAR 76
31746: PUSH
31747: LD_INT 1
31749: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31750: LD_ADDR_OWVAR 31
31754: PUSH
31755: LD_INT 30
31757: PUSH
31758: LD_INT 30
31760: PUSH
31761: LD_INT 30
31763: PUSH
31764: LD_INT 30
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: ST_TO_ADDR
// un := CreateHuman ;
31773: LD_ADDR_VAR 0 3
31777: PUSH
31778: CALL_OW 44
31782: ST_TO_ADDR
// hc_noskilllimit := false ;
31783: LD_ADDR_OWVAR 76
31787: PUSH
31788: LD_INT 0
31790: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31791: LD_VAR 0 3
31795: PPUSH
31796: LD_INT 1
31798: PPUSH
31799: CALL_OW 51
// ToLua ( playRanger() ) ;
31803: LD_STRING playRanger()
31805: PPUSH
31806: CALL_OW 559
// p := 0 ;
31810: LD_ADDR_VAR 0 2
31814: PUSH
31815: LD_INT 0
31817: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31818: LD_INT 35
31820: PPUSH
31821: CALL_OW 67
// p := p + 1 ;
31825: LD_ADDR_VAR 0 2
31829: PUSH
31830: LD_VAR 0 2
31834: PUSH
31835: LD_INT 1
31837: PLUS
31838: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31839: LD_VAR 0 3
31843: PPUSH
31844: CALL_OW 256
31848: PUSH
31849: LD_INT 1000
31851: LESS
31852: IFFALSE 31866
// SetLives ( un , 1000 ) ;
31854: LD_VAR 0 3
31858: PPUSH
31859: LD_INT 1000
31861: PPUSH
31862: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31866: LD_VAR 0 3
31870: PPUSH
31871: LD_INT 81
31873: PUSH
31874: LD_OWVAR 2
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 91
31885: PUSH
31886: LD_VAR 0 3
31890: PUSH
31891: LD_INT 30
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: LIST
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PPUSH
31903: CALL_OW 69
31907: PPUSH
31908: LD_VAR 0 3
31912: PPUSH
31913: CALL_OW 74
31917: PPUSH
31918: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31922: LD_VAR 0 2
31926: PUSH
31927: LD_INT 80
31929: GREATER
31930: PUSH
31931: LD_VAR 0 3
31935: PPUSH
31936: CALL_OW 301
31940: OR
31941: IFFALSE 31818
// if un then
31943: LD_VAR 0 3
31947: IFFALSE 31958
// RemoveUnit ( un ) ;
31949: LD_VAR 0 3
31953: PPUSH
31954: CALL_OW 64
// end ;
31958: PPOPN 3
31960: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31961: LD_EXP 123
31965: IFFALSE 32081
31967: GO 31969
31969: DISABLE
31970: LD_INT 0
31972: PPUSH
31973: PPUSH
31974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31975: LD_ADDR_VAR 0 2
31979: PUSH
31980: LD_INT 81
31982: PUSH
31983: LD_OWVAR 2
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 21
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PPUSH
32006: CALL_OW 69
32010: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32011: LD_STRING playComputer()
32013: PPUSH
32014: CALL_OW 559
// if not tmp then
32018: LD_VAR 0 2
32022: NOT
32023: IFFALSE 32027
// exit ;
32025: GO 32081
// for i in tmp do
32027: LD_ADDR_VAR 0 1
32031: PUSH
32032: LD_VAR 0 2
32036: PUSH
32037: FOR_IN
32038: IFFALSE 32079
// for j := 1 to 4 do
32040: LD_ADDR_VAR 0 3
32044: PUSH
32045: DOUBLE
32046: LD_INT 1
32048: DEC
32049: ST_TO_ADDR
32050: LD_INT 4
32052: PUSH
32053: FOR_TO
32054: IFFALSE 32075
// SetSkill ( i , j , 10 ) ;
32056: LD_VAR 0 1
32060: PPUSH
32061: LD_VAR 0 3
32065: PPUSH
32066: LD_INT 10
32068: PPUSH
32069: CALL_OW 237
32073: GO 32053
32075: POP
32076: POP
32077: GO 32037
32079: POP
32080: POP
// end ;
32081: PPOPN 3
32083: END
// every 0 0$1 trigger s30 do var i , tmp ;
32084: LD_EXP 124
32088: IFFALSE 32157
32090: GO 32092
32092: DISABLE
32093: LD_INT 0
32095: PPUSH
32096: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32097: LD_ADDR_VAR 0 2
32101: PUSH
32102: LD_INT 22
32104: PUSH
32105: LD_OWVAR 2
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PPUSH
32114: CALL_OW 69
32118: ST_TO_ADDR
// if not tmp then
32119: LD_VAR 0 2
32123: NOT
32124: IFFALSE 32128
// exit ;
32126: GO 32157
// for i in tmp do
32128: LD_ADDR_VAR 0 1
32132: PUSH
32133: LD_VAR 0 2
32137: PUSH
32138: FOR_IN
32139: IFFALSE 32155
// SetLives ( i , 300 ) ;
32141: LD_VAR 0 1
32145: PPUSH
32146: LD_INT 300
32148: PPUSH
32149: CALL_OW 234
32153: GO 32138
32155: POP
32156: POP
// end ;
32157: PPOPN 2
32159: END
// every 0 0$1 trigger s60 do var i , tmp ;
32160: LD_EXP 125
32164: IFFALSE 32233
32166: GO 32168
32168: DISABLE
32169: LD_INT 0
32171: PPUSH
32172: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32173: LD_ADDR_VAR 0 2
32177: PUSH
32178: LD_INT 22
32180: PUSH
32181: LD_OWVAR 2
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PPUSH
32190: CALL_OW 69
32194: ST_TO_ADDR
// if not tmp then
32195: LD_VAR 0 2
32199: NOT
32200: IFFALSE 32204
// exit ;
32202: GO 32233
// for i in tmp do
32204: LD_ADDR_VAR 0 1
32208: PUSH
32209: LD_VAR 0 2
32213: PUSH
32214: FOR_IN
32215: IFFALSE 32231
// SetLives ( i , 600 ) ;
32217: LD_VAR 0 1
32221: PPUSH
32222: LD_INT 600
32224: PPUSH
32225: CALL_OW 234
32229: GO 32214
32231: POP
32232: POP
// end ;
32233: PPOPN 2
32235: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32236: LD_INT 0
32238: PPUSH
// case cmd of 301 :
32239: LD_VAR 0 1
32243: PUSH
32244: LD_INT 301
32246: DOUBLE
32247: EQUAL
32248: IFTRUE 32252
32250: GO 32284
32252: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32253: LD_VAR 0 6
32257: PPUSH
32258: LD_VAR 0 7
32262: PPUSH
32263: LD_VAR 0 8
32267: PPUSH
32268: LD_VAR 0 4
32272: PPUSH
32273: LD_VAR 0 5
32277: PPUSH
32278: CALL 33485 0 5
32282: GO 32405
32284: LD_INT 302
32286: DOUBLE
32287: EQUAL
32288: IFTRUE 32292
32290: GO 32329
32292: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32293: LD_VAR 0 6
32297: PPUSH
32298: LD_VAR 0 7
32302: PPUSH
32303: LD_VAR 0 8
32307: PPUSH
32308: LD_VAR 0 9
32312: PPUSH
32313: LD_VAR 0 4
32317: PPUSH
32318: LD_VAR 0 5
32322: PPUSH
32323: CALL 33576 0 6
32327: GO 32405
32329: LD_INT 303
32331: DOUBLE
32332: EQUAL
32333: IFTRUE 32337
32335: GO 32374
32337: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32338: LD_VAR 0 6
32342: PPUSH
32343: LD_VAR 0 7
32347: PPUSH
32348: LD_VAR 0 8
32352: PPUSH
32353: LD_VAR 0 9
32357: PPUSH
32358: LD_VAR 0 4
32362: PPUSH
32363: LD_VAR 0 5
32367: PPUSH
32368: CALL 32410 0 6
32372: GO 32405
32374: LD_INT 304
32376: DOUBLE
32377: EQUAL
32378: IFTRUE 32382
32380: GO 32404
32382: POP
// hHackTeleport ( unit , x , y ) ; end ;
32383: LD_VAR 0 2
32387: PPUSH
32388: LD_VAR 0 4
32392: PPUSH
32393: LD_VAR 0 5
32397: PPUSH
32398: CALL 34169 0 3
32402: GO 32405
32404: POP
// end ;
32405: LD_VAR 0 12
32409: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32410: LD_INT 0
32412: PPUSH
32413: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32414: LD_VAR 0 1
32418: PUSH
32419: LD_INT 1
32421: LESS
32422: PUSH
32423: LD_VAR 0 1
32427: PUSH
32428: LD_INT 3
32430: GREATER
32431: OR
32432: PUSH
32433: LD_VAR 0 5
32437: PPUSH
32438: LD_VAR 0 6
32442: PPUSH
32443: CALL_OW 428
32447: OR
32448: IFFALSE 32452
// exit ;
32450: GO 33172
// uc_side := your_side ;
32452: LD_ADDR_OWVAR 20
32456: PUSH
32457: LD_OWVAR 2
32461: ST_TO_ADDR
// uc_nation := nation ;
32462: LD_ADDR_OWVAR 21
32466: PUSH
32467: LD_VAR 0 1
32471: ST_TO_ADDR
// bc_level = 1 ;
32472: LD_ADDR_OWVAR 43
32476: PUSH
32477: LD_INT 1
32479: ST_TO_ADDR
// case btype of 1 :
32480: LD_VAR 0 2
32484: PUSH
32485: LD_INT 1
32487: DOUBLE
32488: EQUAL
32489: IFTRUE 32493
32491: GO 32504
32493: POP
// bc_type := b_depot ; 2 :
32494: LD_ADDR_OWVAR 42
32498: PUSH
32499: LD_INT 0
32501: ST_TO_ADDR
32502: GO 33116
32504: LD_INT 2
32506: DOUBLE
32507: EQUAL
32508: IFTRUE 32512
32510: GO 32523
32512: POP
// bc_type := b_warehouse ; 3 :
32513: LD_ADDR_OWVAR 42
32517: PUSH
32518: LD_INT 1
32520: ST_TO_ADDR
32521: GO 33116
32523: LD_INT 3
32525: DOUBLE
32526: EQUAL
32527: IFTRUE 32531
32529: GO 32542
32531: POP
// bc_type := b_lab ; 4 .. 9 :
32532: LD_ADDR_OWVAR 42
32536: PUSH
32537: LD_INT 6
32539: ST_TO_ADDR
32540: GO 33116
32542: LD_INT 4
32544: DOUBLE
32545: GREATEREQUAL
32546: IFFALSE 32554
32548: LD_INT 9
32550: DOUBLE
32551: LESSEQUAL
32552: IFTRUE 32556
32554: GO 32608
32556: POP
// begin bc_type := b_lab_half ;
32557: LD_ADDR_OWVAR 42
32561: PUSH
32562: LD_INT 7
32564: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32565: LD_ADDR_OWVAR 44
32569: PUSH
32570: LD_INT 10
32572: PUSH
32573: LD_INT 11
32575: PUSH
32576: LD_INT 12
32578: PUSH
32579: LD_INT 15
32581: PUSH
32582: LD_INT 14
32584: PUSH
32585: LD_INT 13
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: PUSH
32596: LD_VAR 0 2
32600: PUSH
32601: LD_INT 3
32603: MINUS
32604: ARRAY
32605: ST_TO_ADDR
// end ; 10 .. 13 :
32606: GO 33116
32608: LD_INT 10
32610: DOUBLE
32611: GREATEREQUAL
32612: IFFALSE 32620
32614: LD_INT 13
32616: DOUBLE
32617: LESSEQUAL
32618: IFTRUE 32622
32620: GO 32699
32622: POP
// begin bc_type := b_lab_full ;
32623: LD_ADDR_OWVAR 42
32627: PUSH
32628: LD_INT 8
32630: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32631: LD_ADDR_OWVAR 44
32635: PUSH
32636: LD_INT 10
32638: PUSH
32639: LD_INT 12
32641: PUSH
32642: LD_INT 14
32644: PUSH
32645: LD_INT 13
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: PUSH
32654: LD_VAR 0 2
32658: PUSH
32659: LD_INT 9
32661: MINUS
32662: ARRAY
32663: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32664: LD_ADDR_OWVAR 45
32668: PUSH
32669: LD_INT 11
32671: PUSH
32672: LD_INT 15
32674: PUSH
32675: LD_INT 12
32677: PUSH
32678: LD_INT 15
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: PUSH
32687: LD_VAR 0 2
32691: PUSH
32692: LD_INT 9
32694: MINUS
32695: ARRAY
32696: ST_TO_ADDR
// end ; 14 :
32697: GO 33116
32699: LD_INT 14
32701: DOUBLE
32702: EQUAL
32703: IFTRUE 32707
32705: GO 32718
32707: POP
// bc_type := b_workshop ; 15 :
32708: LD_ADDR_OWVAR 42
32712: PUSH
32713: LD_INT 2
32715: ST_TO_ADDR
32716: GO 33116
32718: LD_INT 15
32720: DOUBLE
32721: EQUAL
32722: IFTRUE 32726
32724: GO 32737
32726: POP
// bc_type := b_factory ; 16 :
32727: LD_ADDR_OWVAR 42
32731: PUSH
32732: LD_INT 3
32734: ST_TO_ADDR
32735: GO 33116
32737: LD_INT 16
32739: DOUBLE
32740: EQUAL
32741: IFTRUE 32745
32743: GO 32756
32745: POP
// bc_type := b_ext_gun ; 17 :
32746: LD_ADDR_OWVAR 42
32750: PUSH
32751: LD_INT 17
32753: ST_TO_ADDR
32754: GO 33116
32756: LD_INT 17
32758: DOUBLE
32759: EQUAL
32760: IFTRUE 32764
32762: GO 32792
32764: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32765: LD_ADDR_OWVAR 42
32769: PUSH
32770: LD_INT 19
32772: PUSH
32773: LD_INT 23
32775: PUSH
32776: LD_INT 19
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: LIST
32783: PUSH
32784: LD_VAR 0 1
32788: ARRAY
32789: ST_TO_ADDR
32790: GO 33116
32792: LD_INT 18
32794: DOUBLE
32795: EQUAL
32796: IFTRUE 32800
32798: GO 32811
32800: POP
// bc_type := b_ext_radar ; 19 :
32801: LD_ADDR_OWVAR 42
32805: PUSH
32806: LD_INT 20
32808: ST_TO_ADDR
32809: GO 33116
32811: LD_INT 19
32813: DOUBLE
32814: EQUAL
32815: IFTRUE 32819
32817: GO 32830
32819: POP
// bc_type := b_ext_radio ; 20 :
32820: LD_ADDR_OWVAR 42
32824: PUSH
32825: LD_INT 22
32827: ST_TO_ADDR
32828: GO 33116
32830: LD_INT 20
32832: DOUBLE
32833: EQUAL
32834: IFTRUE 32838
32836: GO 32849
32838: POP
// bc_type := b_ext_siberium ; 21 :
32839: LD_ADDR_OWVAR 42
32843: PUSH
32844: LD_INT 21
32846: ST_TO_ADDR
32847: GO 33116
32849: LD_INT 21
32851: DOUBLE
32852: EQUAL
32853: IFTRUE 32857
32855: GO 32868
32857: POP
// bc_type := b_ext_computer ; 22 :
32858: LD_ADDR_OWVAR 42
32862: PUSH
32863: LD_INT 24
32865: ST_TO_ADDR
32866: GO 33116
32868: LD_INT 22
32870: DOUBLE
32871: EQUAL
32872: IFTRUE 32876
32874: GO 32887
32876: POP
// bc_type := b_ext_track ; 23 :
32877: LD_ADDR_OWVAR 42
32881: PUSH
32882: LD_INT 16
32884: ST_TO_ADDR
32885: GO 33116
32887: LD_INT 23
32889: DOUBLE
32890: EQUAL
32891: IFTRUE 32895
32893: GO 32906
32895: POP
// bc_type := b_ext_laser ; 24 :
32896: LD_ADDR_OWVAR 42
32900: PUSH
32901: LD_INT 25
32903: ST_TO_ADDR
32904: GO 33116
32906: LD_INT 24
32908: DOUBLE
32909: EQUAL
32910: IFTRUE 32914
32912: GO 32925
32914: POP
// bc_type := b_control_tower ; 25 :
32915: LD_ADDR_OWVAR 42
32919: PUSH
32920: LD_INT 36
32922: ST_TO_ADDR
32923: GO 33116
32925: LD_INT 25
32927: DOUBLE
32928: EQUAL
32929: IFTRUE 32933
32931: GO 32944
32933: POP
// bc_type := b_breastwork ; 26 :
32934: LD_ADDR_OWVAR 42
32938: PUSH
32939: LD_INT 31
32941: ST_TO_ADDR
32942: GO 33116
32944: LD_INT 26
32946: DOUBLE
32947: EQUAL
32948: IFTRUE 32952
32950: GO 32963
32952: POP
// bc_type := b_bunker ; 27 :
32953: LD_ADDR_OWVAR 42
32957: PUSH
32958: LD_INT 32
32960: ST_TO_ADDR
32961: GO 33116
32963: LD_INT 27
32965: DOUBLE
32966: EQUAL
32967: IFTRUE 32971
32969: GO 32982
32971: POP
// bc_type := b_turret ; 28 :
32972: LD_ADDR_OWVAR 42
32976: PUSH
32977: LD_INT 33
32979: ST_TO_ADDR
32980: GO 33116
32982: LD_INT 28
32984: DOUBLE
32985: EQUAL
32986: IFTRUE 32990
32988: GO 33001
32990: POP
// bc_type := b_armoury ; 29 :
32991: LD_ADDR_OWVAR 42
32995: PUSH
32996: LD_INT 4
32998: ST_TO_ADDR
32999: GO 33116
33001: LD_INT 29
33003: DOUBLE
33004: EQUAL
33005: IFTRUE 33009
33007: GO 33020
33009: POP
// bc_type := b_barracks ; 30 :
33010: LD_ADDR_OWVAR 42
33014: PUSH
33015: LD_INT 5
33017: ST_TO_ADDR
33018: GO 33116
33020: LD_INT 30
33022: DOUBLE
33023: EQUAL
33024: IFTRUE 33028
33026: GO 33039
33028: POP
// bc_type := b_solar_power ; 31 :
33029: LD_ADDR_OWVAR 42
33033: PUSH
33034: LD_INT 27
33036: ST_TO_ADDR
33037: GO 33116
33039: LD_INT 31
33041: DOUBLE
33042: EQUAL
33043: IFTRUE 33047
33045: GO 33058
33047: POP
// bc_type := b_oil_power ; 32 :
33048: LD_ADDR_OWVAR 42
33052: PUSH
33053: LD_INT 26
33055: ST_TO_ADDR
33056: GO 33116
33058: LD_INT 32
33060: DOUBLE
33061: EQUAL
33062: IFTRUE 33066
33064: GO 33077
33066: POP
// bc_type := b_siberite_power ; 33 :
33067: LD_ADDR_OWVAR 42
33071: PUSH
33072: LD_INT 28
33074: ST_TO_ADDR
33075: GO 33116
33077: LD_INT 33
33079: DOUBLE
33080: EQUAL
33081: IFTRUE 33085
33083: GO 33096
33085: POP
// bc_type := b_oil_mine ; 34 :
33086: LD_ADDR_OWVAR 42
33090: PUSH
33091: LD_INT 29
33093: ST_TO_ADDR
33094: GO 33116
33096: LD_INT 34
33098: DOUBLE
33099: EQUAL
33100: IFTRUE 33104
33102: GO 33115
33104: POP
// bc_type := b_siberite_mine ; end ;
33105: LD_ADDR_OWVAR 42
33109: PUSH
33110: LD_INT 30
33112: ST_TO_ADDR
33113: GO 33116
33115: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33116: LD_ADDR_VAR 0 8
33120: PUSH
33121: LD_VAR 0 5
33125: PPUSH
33126: LD_VAR 0 6
33130: PPUSH
33131: LD_VAR 0 3
33135: PPUSH
33136: CALL_OW 47
33140: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33141: LD_OWVAR 42
33145: PUSH
33146: LD_INT 32
33148: PUSH
33149: LD_INT 33
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: IN
33156: IFFALSE 33172
// PlaceWeaponTurret ( b , weapon ) ;
33158: LD_VAR 0 8
33162: PPUSH
33163: LD_VAR 0 4
33167: PPUSH
33168: CALL_OW 431
// end ;
33172: LD_VAR 0 7
33176: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33177: LD_INT 0
33179: PPUSH
33180: PPUSH
33181: PPUSH
33182: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33183: LD_ADDR_VAR 0 4
33187: PUSH
33188: LD_INT 22
33190: PUSH
33191: LD_OWVAR 2
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 2
33202: PUSH
33203: LD_INT 30
33205: PUSH
33206: LD_INT 0
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 30
33215: PUSH
33216: LD_INT 1
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: LIST
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PPUSH
33232: CALL_OW 69
33236: ST_TO_ADDR
// if not tmp then
33237: LD_VAR 0 4
33241: NOT
33242: IFFALSE 33246
// exit ;
33244: GO 33305
// for i in tmp do
33246: LD_ADDR_VAR 0 2
33250: PUSH
33251: LD_VAR 0 4
33255: PUSH
33256: FOR_IN
33257: IFFALSE 33303
// for j = 1 to 3 do
33259: LD_ADDR_VAR 0 3
33263: PUSH
33264: DOUBLE
33265: LD_INT 1
33267: DEC
33268: ST_TO_ADDR
33269: LD_INT 3
33271: PUSH
33272: FOR_TO
33273: IFFALSE 33299
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33275: LD_VAR 0 2
33279: PPUSH
33280: CALL_OW 274
33284: PPUSH
33285: LD_VAR 0 3
33289: PPUSH
33290: LD_INT 99999
33292: PPUSH
33293: CALL_OW 277
33297: GO 33272
33299: POP
33300: POP
33301: GO 33256
33303: POP
33304: POP
// end ;
33305: LD_VAR 0 1
33309: RET
// export function hHackSetLevel10 ; var i , j ; begin
33310: LD_INT 0
33312: PPUSH
33313: PPUSH
33314: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33315: LD_ADDR_VAR 0 2
33319: PUSH
33320: LD_INT 21
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PPUSH
33330: CALL_OW 69
33334: PUSH
33335: FOR_IN
33336: IFFALSE 33388
// if IsSelected ( i ) then
33338: LD_VAR 0 2
33342: PPUSH
33343: CALL_OW 306
33347: IFFALSE 33386
// begin for j := 1 to 4 do
33349: LD_ADDR_VAR 0 3
33353: PUSH
33354: DOUBLE
33355: LD_INT 1
33357: DEC
33358: ST_TO_ADDR
33359: LD_INT 4
33361: PUSH
33362: FOR_TO
33363: IFFALSE 33384
// SetSkill ( i , j , 10 ) ;
33365: LD_VAR 0 2
33369: PPUSH
33370: LD_VAR 0 3
33374: PPUSH
33375: LD_INT 10
33377: PPUSH
33378: CALL_OW 237
33382: GO 33362
33384: POP
33385: POP
// end ;
33386: GO 33335
33388: POP
33389: POP
// end ;
33390: LD_VAR 0 1
33394: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33395: LD_INT 0
33397: PPUSH
33398: PPUSH
33399: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33400: LD_ADDR_VAR 0 2
33404: PUSH
33405: LD_INT 22
33407: PUSH
33408: LD_OWVAR 2
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 21
33419: PUSH
33420: LD_INT 1
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PPUSH
33431: CALL_OW 69
33435: PUSH
33436: FOR_IN
33437: IFFALSE 33478
// begin for j := 1 to 4 do
33439: LD_ADDR_VAR 0 3
33443: PUSH
33444: DOUBLE
33445: LD_INT 1
33447: DEC
33448: ST_TO_ADDR
33449: LD_INT 4
33451: PUSH
33452: FOR_TO
33453: IFFALSE 33474
// SetSkill ( i , j , 10 ) ;
33455: LD_VAR 0 2
33459: PPUSH
33460: LD_VAR 0 3
33464: PPUSH
33465: LD_INT 10
33467: PPUSH
33468: CALL_OW 237
33472: GO 33452
33474: POP
33475: POP
// end ;
33476: GO 33436
33478: POP
33479: POP
// end ;
33480: LD_VAR 0 1
33484: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33485: LD_INT 0
33487: PPUSH
// uc_side := your_side ;
33488: LD_ADDR_OWVAR 20
33492: PUSH
33493: LD_OWVAR 2
33497: ST_TO_ADDR
// uc_nation := nation ;
33498: LD_ADDR_OWVAR 21
33502: PUSH
33503: LD_VAR 0 1
33507: ST_TO_ADDR
// InitHc ;
33508: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33512: LD_INT 0
33514: PPUSH
33515: LD_VAR 0 2
33519: PPUSH
33520: LD_VAR 0 3
33524: PPUSH
33525: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33529: LD_VAR 0 4
33533: PPUSH
33534: LD_VAR 0 5
33538: PPUSH
33539: CALL_OW 428
33543: PUSH
33544: LD_INT 0
33546: EQUAL
33547: IFFALSE 33571
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33549: CALL_OW 44
33553: PPUSH
33554: LD_VAR 0 4
33558: PPUSH
33559: LD_VAR 0 5
33563: PPUSH
33564: LD_INT 1
33566: PPUSH
33567: CALL_OW 48
// end ;
33571: LD_VAR 0 6
33575: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33576: LD_INT 0
33578: PPUSH
33579: PPUSH
// uc_side := your_side ;
33580: LD_ADDR_OWVAR 20
33584: PUSH
33585: LD_OWVAR 2
33589: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33590: LD_VAR 0 1
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: LD_INT 2
33600: PUSH
33601: LD_INT 3
33603: PUSH
33604: LD_INT 4
33606: PUSH
33607: LD_INT 5
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: IN
33617: IFFALSE 33629
// uc_nation := nation_american else
33619: LD_ADDR_OWVAR 21
33623: PUSH
33624: LD_INT 1
33626: ST_TO_ADDR
33627: GO 33672
// if chassis in [ 11 , 12 , 13 , 14 ] then
33629: LD_VAR 0 1
33633: PUSH
33634: LD_INT 11
33636: PUSH
33637: LD_INT 12
33639: PUSH
33640: LD_INT 13
33642: PUSH
33643: LD_INT 14
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: IN
33652: IFFALSE 33664
// uc_nation := nation_arabian else
33654: LD_ADDR_OWVAR 21
33658: PUSH
33659: LD_INT 2
33661: ST_TO_ADDR
33662: GO 33672
// uc_nation := nation_russian ;
33664: LD_ADDR_OWVAR 21
33668: PUSH
33669: LD_INT 3
33671: ST_TO_ADDR
// vc_chassis := chassis ;
33672: LD_ADDR_OWVAR 37
33676: PUSH
33677: LD_VAR 0 1
33681: ST_TO_ADDR
// vc_engine := engine ;
33682: LD_ADDR_OWVAR 39
33686: PUSH
33687: LD_VAR 0 2
33691: ST_TO_ADDR
// vc_control := control ;
33692: LD_ADDR_OWVAR 38
33696: PUSH
33697: LD_VAR 0 3
33701: ST_TO_ADDR
// vc_weapon := weapon ;
33702: LD_ADDR_OWVAR 40
33706: PUSH
33707: LD_VAR 0 4
33711: ST_TO_ADDR
// un := CreateVehicle ;
33712: LD_ADDR_VAR 0 8
33716: PUSH
33717: CALL_OW 45
33721: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33722: LD_VAR 0 8
33726: PPUSH
33727: LD_INT 0
33729: PPUSH
33730: LD_INT 5
33732: PPUSH
33733: CALL_OW 12
33737: PPUSH
33738: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33742: LD_VAR 0 8
33746: PPUSH
33747: LD_VAR 0 5
33751: PPUSH
33752: LD_VAR 0 6
33756: PPUSH
33757: LD_INT 1
33759: PPUSH
33760: CALL_OW 48
// end ;
33764: LD_VAR 0 7
33768: RET
// export hInvincible ; every 1 do
33769: GO 33771
33771: DISABLE
// hInvincible := [ ] ;
33772: LD_ADDR_EXP 126
33776: PUSH
33777: EMPTY
33778: ST_TO_ADDR
33779: END
// every 10 do var i ;
33780: GO 33782
33782: DISABLE
33783: LD_INT 0
33785: PPUSH
// begin enable ;
33786: ENABLE
// if not hInvincible then
33787: LD_EXP 126
33791: NOT
33792: IFFALSE 33796
// exit ;
33794: GO 33840
// for i in hInvincible do
33796: LD_ADDR_VAR 0 1
33800: PUSH
33801: LD_EXP 126
33805: PUSH
33806: FOR_IN
33807: IFFALSE 33838
// if GetLives ( i ) < 1000 then
33809: LD_VAR 0 1
33813: PPUSH
33814: CALL_OW 256
33818: PUSH
33819: LD_INT 1000
33821: LESS
33822: IFFALSE 33836
// SetLives ( i , 1000 ) ;
33824: LD_VAR 0 1
33828: PPUSH
33829: LD_INT 1000
33831: PPUSH
33832: CALL_OW 234
33836: GO 33806
33838: POP
33839: POP
// end ;
33840: PPOPN 1
33842: END
// export function hHackInvincible ; var i ; begin
33843: LD_INT 0
33845: PPUSH
33846: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33847: LD_ADDR_VAR 0 2
33851: PUSH
33852: LD_INT 2
33854: PUSH
33855: LD_INT 21
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 21
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: LIST
33879: PPUSH
33880: CALL_OW 69
33884: PUSH
33885: FOR_IN
33886: IFFALSE 33947
// if IsSelected ( i ) then
33888: LD_VAR 0 2
33892: PPUSH
33893: CALL_OW 306
33897: IFFALSE 33945
// begin if i in hInvincible then
33899: LD_VAR 0 2
33903: PUSH
33904: LD_EXP 126
33908: IN
33909: IFFALSE 33929
// hInvincible := hInvincible diff i else
33911: LD_ADDR_EXP 126
33915: PUSH
33916: LD_EXP 126
33920: PUSH
33921: LD_VAR 0 2
33925: DIFF
33926: ST_TO_ADDR
33927: GO 33945
// hInvincible := hInvincible union i ;
33929: LD_ADDR_EXP 126
33933: PUSH
33934: LD_EXP 126
33938: PUSH
33939: LD_VAR 0 2
33943: UNION
33944: ST_TO_ADDR
// end ;
33945: GO 33885
33947: POP
33948: POP
// end ;
33949: LD_VAR 0 1
33953: RET
// export function hHackInvisible ; var i , j ; begin
33954: LD_INT 0
33956: PPUSH
33957: PPUSH
33958: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33959: LD_ADDR_VAR 0 2
33963: PUSH
33964: LD_INT 21
33966: PUSH
33967: LD_INT 1
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PPUSH
33974: CALL_OW 69
33978: PUSH
33979: FOR_IN
33980: IFFALSE 34004
// if IsSelected ( i ) then
33982: LD_VAR 0 2
33986: PPUSH
33987: CALL_OW 306
33991: IFFALSE 34002
// ComForceInvisible ( i ) ;
33993: LD_VAR 0 2
33997: PPUSH
33998: CALL_OW 496
34002: GO 33979
34004: POP
34005: POP
// end ;
34006: LD_VAR 0 1
34010: RET
// export function hHackChangeYourSide ; begin
34011: LD_INT 0
34013: PPUSH
// if your_side = 8 then
34014: LD_OWVAR 2
34018: PUSH
34019: LD_INT 8
34021: EQUAL
34022: IFFALSE 34034
// your_side := 0 else
34024: LD_ADDR_OWVAR 2
34028: PUSH
34029: LD_INT 0
34031: ST_TO_ADDR
34032: GO 34048
// your_side := your_side + 1 ;
34034: LD_ADDR_OWVAR 2
34038: PUSH
34039: LD_OWVAR 2
34043: PUSH
34044: LD_INT 1
34046: PLUS
34047: ST_TO_ADDR
// end ;
34048: LD_VAR 0 1
34052: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34053: LD_INT 0
34055: PPUSH
34056: PPUSH
34057: PPUSH
// for i in all_units do
34058: LD_ADDR_VAR 0 2
34062: PUSH
34063: LD_OWVAR 3
34067: PUSH
34068: FOR_IN
34069: IFFALSE 34147
// if IsSelected ( i ) then
34071: LD_VAR 0 2
34075: PPUSH
34076: CALL_OW 306
34080: IFFALSE 34145
// begin j := GetSide ( i ) ;
34082: LD_ADDR_VAR 0 3
34086: PUSH
34087: LD_VAR 0 2
34091: PPUSH
34092: CALL_OW 255
34096: ST_TO_ADDR
// if j = 8 then
34097: LD_VAR 0 3
34101: PUSH
34102: LD_INT 8
34104: EQUAL
34105: IFFALSE 34117
// j := 0 else
34107: LD_ADDR_VAR 0 3
34111: PUSH
34112: LD_INT 0
34114: ST_TO_ADDR
34115: GO 34131
// j := j + 1 ;
34117: LD_ADDR_VAR 0 3
34121: PUSH
34122: LD_VAR 0 3
34126: PUSH
34127: LD_INT 1
34129: PLUS
34130: ST_TO_ADDR
// SetSide ( i , j ) ;
34131: LD_VAR 0 2
34135: PPUSH
34136: LD_VAR 0 3
34140: PPUSH
34141: CALL_OW 235
// end ;
34145: GO 34068
34147: POP
34148: POP
// end ;
34149: LD_VAR 0 1
34153: RET
// export function hHackFog ; begin
34154: LD_INT 0
34156: PPUSH
// FogOff ( true ) ;
34157: LD_INT 1
34159: PPUSH
34160: CALL_OW 344
// end ;
34164: LD_VAR 0 1
34168: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34169: LD_INT 0
34171: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34172: LD_VAR 0 1
34176: PPUSH
34177: LD_VAR 0 2
34181: PPUSH
34182: LD_VAR 0 3
34186: PPUSH
34187: LD_INT 1
34189: PPUSH
34190: LD_INT 1
34192: PPUSH
34193: CALL_OW 483
// CenterOnXY ( x , y ) ;
34197: LD_VAR 0 2
34201: PPUSH
34202: LD_VAR 0 3
34206: PPUSH
34207: CALL_OW 84
// end ; end_of_file
34211: LD_VAR 0 4
34215: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34216: LD_INT 0
34218: PPUSH
34219: PPUSH
34220: PPUSH
34221: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34222: LD_VAR 0 1
34226: PPUSH
34227: CALL_OW 264
34231: PUSH
34232: LD_EXP 54
34236: EQUAL
34237: IFFALSE 34309
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34239: LD_INT 68
34241: PPUSH
34242: LD_VAR 0 1
34246: PPUSH
34247: CALL_OW 255
34251: PPUSH
34252: CALL_OW 321
34256: PUSH
34257: LD_INT 2
34259: EQUAL
34260: IFFALSE 34272
// eff := 70 else
34262: LD_ADDR_VAR 0 4
34266: PUSH
34267: LD_INT 70
34269: ST_TO_ADDR
34270: GO 34280
// eff := 30 ;
34272: LD_ADDR_VAR 0 4
34276: PUSH
34277: LD_INT 30
34279: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34280: LD_VAR 0 1
34284: PPUSH
34285: CALL_OW 250
34289: PPUSH
34290: LD_VAR 0 1
34294: PPUSH
34295: CALL_OW 251
34299: PPUSH
34300: LD_VAR 0 4
34304: PPUSH
34305: CALL_OW 495
// end ; end ;
34309: LD_VAR 0 2
34313: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34314: LD_INT 0
34316: PPUSH
// end ;
34317: LD_VAR 0 4
34321: RET
// export function SOS_Command ( cmd ) ; begin
34322: LD_INT 0
34324: PPUSH
// end ;
34325: LD_VAR 0 2
34329: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34330: LD_INT 0
34332: PPUSH
// end ;
34333: LD_VAR 0 6
34337: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34338: LD_INT 0
34340: PPUSH
34341: PPUSH
// if not vehicle or not factory then
34342: LD_VAR 0 1
34346: NOT
34347: PUSH
34348: LD_VAR 0 2
34352: NOT
34353: OR
34354: IFFALSE 34358
// exit ;
34356: GO 34589
// if factoryWaypoints >= factory then
34358: LD_EXP 127
34362: PUSH
34363: LD_VAR 0 2
34367: GREATEREQUAL
34368: IFFALSE 34589
// if factoryWaypoints [ factory ] then
34370: LD_EXP 127
34374: PUSH
34375: LD_VAR 0 2
34379: ARRAY
34380: IFFALSE 34589
// begin if GetControl ( vehicle ) = control_manual then
34382: LD_VAR 0 1
34386: PPUSH
34387: CALL_OW 263
34391: PUSH
34392: LD_INT 1
34394: EQUAL
34395: IFFALSE 34476
// begin driver := IsDrivenBy ( vehicle ) ;
34397: LD_ADDR_VAR 0 4
34401: PUSH
34402: LD_VAR 0 1
34406: PPUSH
34407: CALL_OW 311
34411: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
34412: LD_VAR 0 4
34416: PPUSH
34417: LD_EXP 127
34421: PUSH
34422: LD_VAR 0 2
34426: ARRAY
34427: PUSH
34428: LD_INT 1
34430: ARRAY
34431: PPUSH
34432: LD_EXP 127
34436: PUSH
34437: LD_VAR 0 2
34441: ARRAY
34442: PUSH
34443: LD_INT 2
34445: ARRAY
34446: PPUSH
34447: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34451: LD_VAR 0 4
34455: PPUSH
34456: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34460: LD_VAR 0 4
34464: PPUSH
34465: LD_VAR 0 2
34469: PPUSH
34470: CALL_OW 180
// end else
34474: GO 34589
// if GetControl ( vehicle ) = control_remote then
34476: LD_VAR 0 1
34480: PPUSH
34481: CALL_OW 263
34485: PUSH
34486: LD_INT 2
34488: EQUAL
34489: IFFALSE 34550
// begin wait ( 0 0$2 ) ;
34491: LD_INT 70
34493: PPUSH
34494: CALL_OW 67
// if Connect ( vehicle ) then
34498: LD_VAR 0 1
34502: PPUSH
34503: CALL 46813 0 1
34507: IFFALSE 34548
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
34509: LD_VAR 0 1
34513: PPUSH
34514: LD_EXP 127
34518: PUSH
34519: LD_VAR 0 2
34523: ARRAY
34524: PUSH
34525: LD_INT 1
34527: ARRAY
34528: PPUSH
34529: LD_EXP 127
34533: PUSH
34534: LD_VAR 0 2
34538: ARRAY
34539: PUSH
34540: LD_INT 2
34542: ARRAY
34543: PPUSH
34544: CALL_OW 171
// end else
34548: GO 34589
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
34550: LD_VAR 0 1
34554: PPUSH
34555: LD_EXP 127
34559: PUSH
34560: LD_VAR 0 2
34564: ARRAY
34565: PUSH
34566: LD_INT 1
34568: ARRAY
34569: PPUSH
34570: LD_EXP 127
34574: PUSH
34575: LD_VAR 0 2
34579: ARRAY
34580: PUSH
34581: LD_INT 2
34583: ARRAY
34584: PPUSH
34585: CALL_OW 171
// end ; end ;
34589: LD_VAR 0 3
34593: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34594: LD_INT 0
34596: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34597: LD_VAR 0 1
34601: PUSH
34602: LD_INT 250
34604: EQUAL
34605: PUSH
34606: LD_VAR 0 2
34610: PPUSH
34611: CALL_OW 264
34615: PUSH
34616: LD_EXP 57
34620: EQUAL
34621: AND
34622: IFFALSE 34643
// MinerPlaceMine ( unit , x , y ) ;
34624: LD_VAR 0 2
34628: PPUSH
34629: LD_VAR 0 4
34633: PPUSH
34634: LD_VAR 0 5
34638: PPUSH
34639: CALL 37371 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34643: LD_VAR 0 1
34647: PUSH
34648: LD_INT 251
34650: EQUAL
34651: PUSH
34652: LD_VAR 0 2
34656: PPUSH
34657: CALL_OW 264
34661: PUSH
34662: LD_EXP 57
34666: EQUAL
34667: AND
34668: IFFALSE 34689
// MinerDetonateMine ( unit , x , y ) ;
34670: LD_VAR 0 2
34674: PPUSH
34675: LD_VAR 0 4
34679: PPUSH
34680: LD_VAR 0 5
34684: PPUSH
34685: CALL 37648 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34689: LD_VAR 0 1
34693: PUSH
34694: LD_INT 252
34696: EQUAL
34697: PUSH
34698: LD_VAR 0 2
34702: PPUSH
34703: CALL_OW 264
34707: PUSH
34708: LD_EXP 57
34712: EQUAL
34713: AND
34714: IFFALSE 34735
// MinerCreateMinefield ( unit , x , y ) ;
34716: LD_VAR 0 2
34720: PPUSH
34721: LD_VAR 0 4
34725: PPUSH
34726: LD_VAR 0 5
34730: PPUSH
34731: CALL 38065 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34735: LD_VAR 0 1
34739: PUSH
34740: LD_INT 253
34742: EQUAL
34743: PUSH
34744: LD_VAR 0 2
34748: PPUSH
34749: CALL_OW 257
34753: PUSH
34754: LD_INT 5
34756: EQUAL
34757: AND
34758: IFFALSE 34779
// ComBinocular ( unit , x , y ) ;
34760: LD_VAR 0 2
34764: PPUSH
34765: LD_VAR 0 4
34769: PPUSH
34770: LD_VAR 0 5
34774: PPUSH
34775: CALL 38436 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34779: LD_VAR 0 1
34783: PUSH
34784: LD_INT 254
34786: EQUAL
34787: PUSH
34788: LD_VAR 0 2
34792: PPUSH
34793: CALL_OW 264
34797: PUSH
34798: LD_EXP 52
34802: EQUAL
34803: AND
34804: PUSH
34805: LD_VAR 0 3
34809: PPUSH
34810: CALL_OW 263
34814: PUSH
34815: LD_INT 3
34817: EQUAL
34818: AND
34819: IFFALSE 34835
// HackDestroyVehicle ( unit , selectedUnit ) ;
34821: LD_VAR 0 2
34825: PPUSH
34826: LD_VAR 0 3
34830: PPUSH
34831: CALL 36731 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34835: LD_VAR 0 1
34839: PUSH
34840: LD_INT 255
34842: EQUAL
34843: PUSH
34844: LD_VAR 0 2
34848: PPUSH
34849: CALL_OW 264
34853: PUSH
34854: LD_INT 14
34856: PUSH
34857: LD_INT 53
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: IN
34864: AND
34865: PUSH
34866: LD_VAR 0 4
34870: PPUSH
34871: LD_VAR 0 5
34875: PPUSH
34876: CALL_OW 488
34880: AND
34881: IFFALSE 34905
// CutTreeXYR ( unit , x , y , 12 ) ;
34883: LD_VAR 0 2
34887: PPUSH
34888: LD_VAR 0 4
34892: PPUSH
34893: LD_VAR 0 5
34897: PPUSH
34898: LD_INT 12
34900: PPUSH
34901: CALL 35297 0 4
// if cmd = 256 then
34905: LD_VAR 0 1
34909: PUSH
34910: LD_INT 256
34912: EQUAL
34913: IFFALSE 34934
// SetFactoryWaypoint ( unit , x , y ) ;
34915: LD_VAR 0 2
34919: PPUSH
34920: LD_VAR 0 4
34924: PPUSH
34925: LD_VAR 0 5
34929: PPUSH
34930: CALL 34939 0 3
// end ;
34934: LD_VAR 0 6
34938: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34939: LD_INT 0
34941: PPUSH
34942: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34943: LD_VAR 0 1
34947: NOT
34948: PUSH
34949: LD_VAR 0 2
34953: PPUSH
34954: LD_VAR 0 3
34958: PPUSH
34959: CALL_OW 488
34963: NOT
34964: OR
34965: PUSH
34966: LD_VAR 0 1
34970: PPUSH
34971: CALL_OW 266
34975: PUSH
34976: LD_INT 3
34978: NONEQUAL
34979: PUSH
34980: LD_VAR 0 1
34984: PPUSH
34985: CALL_OW 247
34989: PUSH
34990: LD_INT 1
34992: EQUAL
34993: NOT
34994: AND
34995: OR
34996: IFFALSE 35000
// exit ;
34998: GO 35149
// if GetType ( factory ) = unit_human then
35000: LD_VAR 0 1
35004: PPUSH
35005: CALL_OW 247
35009: PUSH
35010: LD_INT 1
35012: EQUAL
35013: IFFALSE 35030
// factory := IsInUnit ( factory ) ;
35015: LD_ADDR_VAR 0 1
35019: PUSH
35020: LD_VAR 0 1
35024: PPUSH
35025: CALL_OW 310
35029: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35030: LD_VAR 0 1
35034: PPUSH
35035: CALL_OW 266
35039: PUSH
35040: LD_INT 3
35042: NONEQUAL
35043: IFFALSE 35047
// exit ;
35045: GO 35149
// if HexInfo ( x , y ) = factory then
35047: LD_VAR 0 2
35051: PPUSH
35052: LD_VAR 0 3
35056: PPUSH
35057: CALL_OW 428
35061: PUSH
35062: LD_VAR 0 1
35066: EQUAL
35067: IFFALSE 35094
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35069: LD_ADDR_EXP 127
35073: PUSH
35074: LD_EXP 127
35078: PPUSH
35079: LD_VAR 0 1
35083: PPUSH
35084: LD_INT 0
35086: PPUSH
35087: CALL_OW 1
35091: ST_TO_ADDR
35092: GO 35145
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35094: LD_ADDR_EXP 127
35098: PUSH
35099: LD_EXP 127
35103: PPUSH
35104: LD_VAR 0 1
35108: PPUSH
35109: LD_VAR 0 1
35113: PPUSH
35114: CALL_OW 255
35118: PUSH
35119: LD_VAR 0 1
35123: PUSH
35124: LD_VAR 0 2
35128: PUSH
35129: LD_VAR 0 3
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: PPUSH
35140: CALL_OW 1
35144: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35145: CALL 35154 0 0
// end ;
35149: LD_VAR 0 4
35153: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
35154: LD_INT 0
35156: PPUSH
35157: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35158: LD_STRING resetFactoryWaypoint();
35160: PPUSH
35161: CALL_OW 559
// if factoryWaypoints then
35165: LD_EXP 127
35169: IFFALSE 35292
// begin for i := 1 to factoryWaypoints do
35171: LD_ADDR_VAR 0 2
35175: PUSH
35176: DOUBLE
35177: LD_INT 1
35179: DEC
35180: ST_TO_ADDR
35181: LD_EXP 127
35185: PUSH
35186: FOR_TO
35187: IFFALSE 35290
// if factoryWaypoints [ i ] then
35189: LD_EXP 127
35193: PUSH
35194: LD_VAR 0 2
35198: ARRAY
35199: IFFALSE 35288
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
35201: LD_STRING setFactoryWaypointXY(
35203: PUSH
35204: LD_EXP 127
35208: PUSH
35209: LD_VAR 0 2
35213: ARRAY
35214: PUSH
35215: LD_INT 1
35217: ARRAY
35218: STR
35219: PUSH
35220: LD_STRING ,
35222: STR
35223: PUSH
35224: LD_EXP 127
35228: PUSH
35229: LD_VAR 0 2
35233: ARRAY
35234: PUSH
35235: LD_INT 2
35237: ARRAY
35238: STR
35239: PUSH
35240: LD_STRING ,
35242: STR
35243: PUSH
35244: LD_EXP 127
35248: PUSH
35249: LD_VAR 0 2
35253: ARRAY
35254: PUSH
35255: LD_INT 3
35257: ARRAY
35258: STR
35259: PUSH
35260: LD_STRING ,
35262: STR
35263: PUSH
35264: LD_EXP 127
35268: PUSH
35269: LD_VAR 0 2
35273: ARRAY
35274: PUSH
35275: LD_INT 4
35277: ARRAY
35278: STR
35279: PUSH
35280: LD_STRING )
35282: STR
35283: PPUSH
35284: CALL_OW 559
35288: GO 35186
35290: POP
35291: POP
// end ; end ;
35292: LD_VAR 0 1
35296: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35297: LD_INT 0
35299: PPUSH
35300: PPUSH
35301: PPUSH
35302: PPUSH
35303: PPUSH
35304: PPUSH
35305: PPUSH
35306: PPUSH
35307: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35308: LD_VAR 0 1
35312: NOT
35313: PUSH
35314: LD_VAR 0 2
35318: PPUSH
35319: LD_VAR 0 3
35323: PPUSH
35324: CALL_OW 488
35328: NOT
35329: OR
35330: PUSH
35331: LD_VAR 0 4
35335: NOT
35336: OR
35337: IFFALSE 35341
// exit ;
35339: GO 35681
// list := [ ] ;
35341: LD_ADDR_VAR 0 13
35345: PUSH
35346: EMPTY
35347: ST_TO_ADDR
// if x - r < 0 then
35348: LD_VAR 0 2
35352: PUSH
35353: LD_VAR 0 4
35357: MINUS
35358: PUSH
35359: LD_INT 0
35361: LESS
35362: IFFALSE 35374
// min_x := 0 else
35364: LD_ADDR_VAR 0 7
35368: PUSH
35369: LD_INT 0
35371: ST_TO_ADDR
35372: GO 35390
// min_x := x - r ;
35374: LD_ADDR_VAR 0 7
35378: PUSH
35379: LD_VAR 0 2
35383: PUSH
35384: LD_VAR 0 4
35388: MINUS
35389: ST_TO_ADDR
// if y - r < 0 then
35390: LD_VAR 0 3
35394: PUSH
35395: LD_VAR 0 4
35399: MINUS
35400: PUSH
35401: LD_INT 0
35403: LESS
35404: IFFALSE 35416
// min_y := 0 else
35406: LD_ADDR_VAR 0 8
35410: PUSH
35411: LD_INT 0
35413: ST_TO_ADDR
35414: GO 35432
// min_y := y - r ;
35416: LD_ADDR_VAR 0 8
35420: PUSH
35421: LD_VAR 0 3
35425: PUSH
35426: LD_VAR 0 4
35430: MINUS
35431: ST_TO_ADDR
// max_x := x + r ;
35432: LD_ADDR_VAR 0 9
35436: PUSH
35437: LD_VAR 0 2
35441: PUSH
35442: LD_VAR 0 4
35446: PLUS
35447: ST_TO_ADDR
// max_y := y + r ;
35448: LD_ADDR_VAR 0 10
35452: PUSH
35453: LD_VAR 0 3
35457: PUSH
35458: LD_VAR 0 4
35462: PLUS
35463: ST_TO_ADDR
// for _x = min_x to max_x do
35464: LD_ADDR_VAR 0 11
35468: PUSH
35469: DOUBLE
35470: LD_VAR 0 7
35474: DEC
35475: ST_TO_ADDR
35476: LD_VAR 0 9
35480: PUSH
35481: FOR_TO
35482: IFFALSE 35599
// for _y = min_y to max_y do
35484: LD_ADDR_VAR 0 12
35488: PUSH
35489: DOUBLE
35490: LD_VAR 0 8
35494: DEC
35495: ST_TO_ADDR
35496: LD_VAR 0 10
35500: PUSH
35501: FOR_TO
35502: IFFALSE 35595
// begin if not ValidHex ( _x , _y ) then
35504: LD_VAR 0 11
35508: PPUSH
35509: LD_VAR 0 12
35513: PPUSH
35514: CALL_OW 488
35518: NOT
35519: IFFALSE 35523
// continue ;
35521: GO 35501
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35523: LD_VAR 0 11
35527: PPUSH
35528: LD_VAR 0 12
35532: PPUSH
35533: CALL_OW 351
35537: PUSH
35538: LD_VAR 0 11
35542: PPUSH
35543: LD_VAR 0 12
35547: PPUSH
35548: CALL_OW 554
35552: AND
35553: IFFALSE 35593
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35555: LD_ADDR_VAR 0 13
35559: PUSH
35560: LD_VAR 0 13
35564: PPUSH
35565: LD_VAR 0 13
35569: PUSH
35570: LD_INT 1
35572: PLUS
35573: PPUSH
35574: LD_VAR 0 11
35578: PUSH
35579: LD_VAR 0 12
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PPUSH
35588: CALL_OW 2
35592: ST_TO_ADDR
// end ;
35593: GO 35501
35595: POP
35596: POP
35597: GO 35481
35599: POP
35600: POP
// if not list then
35601: LD_VAR 0 13
35605: NOT
35606: IFFALSE 35610
// exit ;
35608: GO 35681
// for i in list do
35610: LD_ADDR_VAR 0 6
35614: PUSH
35615: LD_VAR 0 13
35619: PUSH
35620: FOR_IN
35621: IFFALSE 35679
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35623: LD_VAR 0 1
35627: PPUSH
35628: LD_STRING M
35630: PUSH
35631: LD_VAR 0 6
35635: PUSH
35636: LD_INT 1
35638: ARRAY
35639: PUSH
35640: LD_VAR 0 6
35644: PUSH
35645: LD_INT 2
35647: ARRAY
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: LD_INT 0
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: PUSH
35670: EMPTY
35671: LIST
35672: PPUSH
35673: CALL_OW 447
35677: GO 35620
35679: POP
35680: POP
// end ;
35681: LD_VAR 0 5
35685: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35686: LD_EXP 128
35690: NOT
35691: IFFALSE 35741
35693: GO 35695
35695: DISABLE
// begin initHack := true ;
35696: LD_ADDR_EXP 128
35700: PUSH
35701: LD_INT 1
35703: ST_TO_ADDR
// hackTanks := [ ] ;
35704: LD_ADDR_EXP 129
35708: PUSH
35709: EMPTY
35710: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35711: LD_ADDR_EXP 130
35715: PUSH
35716: EMPTY
35717: ST_TO_ADDR
// hackLimit := 3 ;
35718: LD_ADDR_EXP 131
35722: PUSH
35723: LD_INT 3
35725: ST_TO_ADDR
// hackDist := 12 ;
35726: LD_ADDR_EXP 132
35730: PUSH
35731: LD_INT 12
35733: ST_TO_ADDR
// hackCounter := [ ] ;
35734: LD_ADDR_EXP 133
35738: PUSH
35739: EMPTY
35740: ST_TO_ADDR
// end ;
35741: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35742: LD_EXP 128
35746: PUSH
35747: LD_INT 34
35749: PUSH
35750: LD_EXP 52
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PPUSH
35759: CALL_OW 69
35763: AND
35764: IFFALSE 36019
35766: GO 35768
35768: DISABLE
35769: LD_INT 0
35771: PPUSH
35772: PPUSH
// begin enable ;
35773: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35774: LD_ADDR_VAR 0 1
35778: PUSH
35779: LD_INT 34
35781: PUSH
35782: LD_EXP 52
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PPUSH
35791: CALL_OW 69
35795: PUSH
35796: FOR_IN
35797: IFFALSE 36017
// begin if not i in hackTanks then
35799: LD_VAR 0 1
35803: PUSH
35804: LD_EXP 129
35808: IN
35809: NOT
35810: IFFALSE 35893
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35812: LD_ADDR_EXP 129
35816: PUSH
35817: LD_EXP 129
35821: PPUSH
35822: LD_EXP 129
35826: PUSH
35827: LD_INT 1
35829: PLUS
35830: PPUSH
35831: LD_VAR 0 1
35835: PPUSH
35836: CALL_OW 1
35840: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35841: LD_ADDR_EXP 130
35845: PUSH
35846: LD_EXP 130
35850: PPUSH
35851: LD_EXP 130
35855: PUSH
35856: LD_INT 1
35858: PLUS
35859: PPUSH
35860: EMPTY
35861: PPUSH
35862: CALL_OW 1
35866: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35867: LD_ADDR_EXP 133
35871: PUSH
35872: LD_EXP 133
35876: PPUSH
35877: LD_EXP 133
35881: PUSH
35882: LD_INT 1
35884: PLUS
35885: PPUSH
35886: EMPTY
35887: PPUSH
35888: CALL_OW 1
35892: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35893: LD_VAR 0 1
35897: PPUSH
35898: CALL_OW 302
35902: NOT
35903: IFFALSE 35916
// begin HackUnlinkAll ( i ) ;
35905: LD_VAR 0 1
35909: PPUSH
35910: CALL 36022 0 1
// continue ;
35914: GO 35796
// end ; HackCheckCapturedStatus ( i ) ;
35916: LD_VAR 0 1
35920: PPUSH
35921: CALL 36465 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35925: LD_ADDR_VAR 0 2
35929: PUSH
35930: LD_INT 81
35932: PUSH
35933: LD_VAR 0 1
35937: PPUSH
35938: CALL_OW 255
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 33
35949: PUSH
35950: LD_INT 3
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 91
35959: PUSH
35960: LD_VAR 0 1
35964: PUSH
35965: LD_EXP 132
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 50
35977: PUSH
35978: EMPTY
35979: LIST
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: PPUSH
35987: CALL_OW 69
35991: ST_TO_ADDR
// if not tmp then
35992: LD_VAR 0 2
35996: NOT
35997: IFFALSE 36001
// continue ;
35999: GO 35796
// HackLink ( i , tmp ) ;
36001: LD_VAR 0 1
36005: PPUSH
36006: LD_VAR 0 2
36010: PPUSH
36011: CALL 36158 0 2
// end ;
36015: GO 35796
36017: POP
36018: POP
// end ;
36019: PPOPN 2
36021: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36022: LD_INT 0
36024: PPUSH
36025: PPUSH
36026: PPUSH
// if not hack in hackTanks then
36027: LD_VAR 0 1
36031: PUSH
36032: LD_EXP 129
36036: IN
36037: NOT
36038: IFFALSE 36042
// exit ;
36040: GO 36153
// index := GetElementIndex ( hackTanks , hack ) ;
36042: LD_ADDR_VAR 0 4
36046: PUSH
36047: LD_EXP 129
36051: PPUSH
36052: LD_VAR 0 1
36056: PPUSH
36057: CALL 43627 0 2
36061: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36062: LD_EXP 130
36066: PUSH
36067: LD_VAR 0 4
36071: ARRAY
36072: IFFALSE 36153
// begin for i in hackTanksCaptured [ index ] do
36074: LD_ADDR_VAR 0 3
36078: PUSH
36079: LD_EXP 130
36083: PUSH
36084: LD_VAR 0 4
36088: ARRAY
36089: PUSH
36090: FOR_IN
36091: IFFALSE 36117
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36093: LD_VAR 0 3
36097: PUSH
36098: LD_INT 1
36100: ARRAY
36101: PPUSH
36102: LD_VAR 0 3
36106: PUSH
36107: LD_INT 2
36109: ARRAY
36110: PPUSH
36111: CALL_OW 235
36115: GO 36090
36117: POP
36118: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36119: LD_ADDR_EXP 130
36123: PUSH
36124: LD_EXP 130
36128: PPUSH
36129: LD_VAR 0 4
36133: PPUSH
36134: EMPTY
36135: PPUSH
36136: CALL_OW 1
36140: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36141: LD_VAR 0 1
36145: PPUSH
36146: LD_INT 0
36148: PPUSH
36149: CALL_OW 505
// end ; end ;
36153: LD_VAR 0 2
36157: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36158: LD_INT 0
36160: PPUSH
36161: PPUSH
36162: PPUSH
// if not hack in hackTanks or not vehicles then
36163: LD_VAR 0 1
36167: PUSH
36168: LD_EXP 129
36172: IN
36173: NOT
36174: PUSH
36175: LD_VAR 0 2
36179: NOT
36180: OR
36181: IFFALSE 36185
// exit ;
36183: GO 36460
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36185: LD_ADDR_VAR 0 2
36189: PUSH
36190: LD_VAR 0 1
36194: PPUSH
36195: LD_VAR 0 2
36199: PPUSH
36200: LD_INT 1
36202: PPUSH
36203: LD_INT 1
36205: PPUSH
36206: CALL 44277 0 4
36210: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36211: LD_ADDR_VAR 0 5
36215: PUSH
36216: LD_EXP 129
36220: PPUSH
36221: LD_VAR 0 1
36225: PPUSH
36226: CALL 43627 0 2
36230: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36231: LD_EXP 130
36235: PUSH
36236: LD_VAR 0 5
36240: ARRAY
36241: PUSH
36242: LD_EXP 131
36246: LESS
36247: IFFALSE 36436
// begin for i := 1 to vehicles do
36249: LD_ADDR_VAR 0 4
36253: PUSH
36254: DOUBLE
36255: LD_INT 1
36257: DEC
36258: ST_TO_ADDR
36259: LD_VAR 0 2
36263: PUSH
36264: FOR_TO
36265: IFFALSE 36434
// begin if hackTanksCaptured [ index ] = hackLimit then
36267: LD_EXP 130
36271: PUSH
36272: LD_VAR 0 5
36276: ARRAY
36277: PUSH
36278: LD_EXP 131
36282: EQUAL
36283: IFFALSE 36287
// break ;
36285: GO 36434
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36287: LD_ADDR_EXP 133
36291: PUSH
36292: LD_EXP 133
36296: PPUSH
36297: LD_VAR 0 5
36301: PPUSH
36302: LD_EXP 133
36306: PUSH
36307: LD_VAR 0 5
36311: ARRAY
36312: PUSH
36313: LD_INT 1
36315: PLUS
36316: PPUSH
36317: CALL_OW 1
36321: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36322: LD_ADDR_EXP 130
36326: PUSH
36327: LD_EXP 130
36331: PPUSH
36332: LD_VAR 0 5
36336: PUSH
36337: LD_EXP 130
36341: PUSH
36342: LD_VAR 0 5
36346: ARRAY
36347: PUSH
36348: LD_INT 1
36350: PLUS
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PPUSH
36356: LD_VAR 0 2
36360: PUSH
36361: LD_VAR 0 4
36365: ARRAY
36366: PUSH
36367: LD_VAR 0 2
36371: PUSH
36372: LD_VAR 0 4
36376: ARRAY
36377: PPUSH
36378: CALL_OW 255
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PPUSH
36387: CALL 43842 0 3
36391: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36392: LD_VAR 0 2
36396: PUSH
36397: LD_VAR 0 4
36401: ARRAY
36402: PPUSH
36403: LD_VAR 0 1
36407: PPUSH
36408: CALL_OW 255
36412: PPUSH
36413: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36417: LD_VAR 0 2
36421: PUSH
36422: LD_VAR 0 4
36426: ARRAY
36427: PPUSH
36428: CALL_OW 141
// end ;
36432: GO 36264
36434: POP
36435: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36436: LD_VAR 0 1
36440: PPUSH
36441: LD_EXP 130
36445: PUSH
36446: LD_VAR 0 5
36450: ARRAY
36451: PUSH
36452: LD_INT 0
36454: PLUS
36455: PPUSH
36456: CALL_OW 505
// end ;
36460: LD_VAR 0 3
36464: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36465: LD_INT 0
36467: PPUSH
36468: PPUSH
36469: PPUSH
36470: PPUSH
// if not hack in hackTanks then
36471: LD_VAR 0 1
36475: PUSH
36476: LD_EXP 129
36480: IN
36481: NOT
36482: IFFALSE 36486
// exit ;
36484: GO 36726
// index := GetElementIndex ( hackTanks , hack ) ;
36486: LD_ADDR_VAR 0 4
36490: PUSH
36491: LD_EXP 129
36495: PPUSH
36496: LD_VAR 0 1
36500: PPUSH
36501: CALL 43627 0 2
36505: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36506: LD_ADDR_VAR 0 3
36510: PUSH
36511: DOUBLE
36512: LD_EXP 130
36516: PUSH
36517: LD_VAR 0 4
36521: ARRAY
36522: INC
36523: ST_TO_ADDR
36524: LD_INT 1
36526: PUSH
36527: FOR_DOWNTO
36528: IFFALSE 36700
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36530: LD_ADDR_VAR 0 5
36534: PUSH
36535: LD_EXP 130
36539: PUSH
36540: LD_VAR 0 4
36544: ARRAY
36545: PUSH
36546: LD_VAR 0 3
36550: ARRAY
36551: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36552: LD_VAR 0 5
36556: PUSH
36557: LD_INT 1
36559: ARRAY
36560: PPUSH
36561: CALL_OW 302
36565: NOT
36566: PUSH
36567: LD_VAR 0 5
36571: PUSH
36572: LD_INT 1
36574: ARRAY
36575: PPUSH
36576: CALL_OW 255
36580: PUSH
36581: LD_VAR 0 1
36585: PPUSH
36586: CALL_OW 255
36590: NONEQUAL
36591: OR
36592: IFFALSE 36698
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36594: LD_VAR 0 5
36598: PUSH
36599: LD_INT 1
36601: ARRAY
36602: PPUSH
36603: CALL_OW 305
36607: PUSH
36608: LD_VAR 0 5
36612: PUSH
36613: LD_INT 1
36615: ARRAY
36616: PPUSH
36617: CALL_OW 255
36621: PUSH
36622: LD_VAR 0 1
36626: PPUSH
36627: CALL_OW 255
36631: EQUAL
36632: AND
36633: IFFALSE 36657
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36635: LD_VAR 0 5
36639: PUSH
36640: LD_INT 1
36642: ARRAY
36643: PPUSH
36644: LD_VAR 0 5
36648: PUSH
36649: LD_INT 2
36651: ARRAY
36652: PPUSH
36653: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36657: LD_ADDR_EXP 130
36661: PUSH
36662: LD_EXP 130
36666: PPUSH
36667: LD_VAR 0 4
36671: PPUSH
36672: LD_EXP 130
36676: PUSH
36677: LD_VAR 0 4
36681: ARRAY
36682: PPUSH
36683: LD_VAR 0 3
36687: PPUSH
36688: CALL_OW 3
36692: PPUSH
36693: CALL_OW 1
36697: ST_TO_ADDR
// end ; end ;
36698: GO 36527
36700: POP
36701: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36702: LD_VAR 0 1
36706: PPUSH
36707: LD_EXP 130
36711: PUSH
36712: LD_VAR 0 4
36716: ARRAY
36717: PUSH
36718: LD_INT 0
36720: PLUS
36721: PPUSH
36722: CALL_OW 505
// end ;
36726: LD_VAR 0 2
36730: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36731: LD_INT 0
36733: PPUSH
36734: PPUSH
36735: PPUSH
36736: PPUSH
// if not hack in hackTanks then
36737: LD_VAR 0 1
36741: PUSH
36742: LD_EXP 129
36746: IN
36747: NOT
36748: IFFALSE 36752
// exit ;
36750: GO 36837
// index := GetElementIndex ( hackTanks , hack ) ;
36752: LD_ADDR_VAR 0 5
36756: PUSH
36757: LD_EXP 129
36761: PPUSH
36762: LD_VAR 0 1
36766: PPUSH
36767: CALL 43627 0 2
36771: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36772: LD_ADDR_VAR 0 4
36776: PUSH
36777: DOUBLE
36778: LD_INT 1
36780: DEC
36781: ST_TO_ADDR
36782: LD_EXP 130
36786: PUSH
36787: LD_VAR 0 5
36791: ARRAY
36792: PUSH
36793: FOR_TO
36794: IFFALSE 36835
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36796: LD_EXP 130
36800: PUSH
36801: LD_VAR 0 5
36805: ARRAY
36806: PUSH
36807: LD_VAR 0 4
36811: ARRAY
36812: PUSH
36813: LD_INT 1
36815: ARRAY
36816: PUSH
36817: LD_VAR 0 2
36821: EQUAL
36822: IFFALSE 36833
// KillUnit ( vehicle ) ;
36824: LD_VAR 0 2
36828: PPUSH
36829: CALL_OW 66
36833: GO 36793
36835: POP
36836: POP
// end ;
36837: LD_VAR 0 3
36841: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36842: LD_EXP 134
36846: NOT
36847: IFFALSE 36882
36849: GO 36851
36851: DISABLE
// begin initMiner := true ;
36852: LD_ADDR_EXP 134
36856: PUSH
36857: LD_INT 1
36859: ST_TO_ADDR
// minersList := [ ] ;
36860: LD_ADDR_EXP 135
36864: PUSH
36865: EMPTY
36866: ST_TO_ADDR
// minerMinesList := [ ] ;
36867: LD_ADDR_EXP 136
36871: PUSH
36872: EMPTY
36873: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36874: LD_ADDR_EXP 137
36878: PUSH
36879: LD_INT 5
36881: ST_TO_ADDR
// end ;
36882: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36883: LD_EXP 134
36887: PUSH
36888: LD_INT 34
36890: PUSH
36891: LD_EXP 57
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PPUSH
36900: CALL_OW 69
36904: AND
36905: IFFALSE 37368
36907: GO 36909
36909: DISABLE
36910: LD_INT 0
36912: PPUSH
36913: PPUSH
36914: PPUSH
36915: PPUSH
// begin enable ;
36916: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36917: LD_ADDR_VAR 0 1
36921: PUSH
36922: LD_INT 34
36924: PUSH
36925: LD_EXP 57
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PPUSH
36934: CALL_OW 69
36938: PUSH
36939: FOR_IN
36940: IFFALSE 37012
// begin if not i in minersList then
36942: LD_VAR 0 1
36946: PUSH
36947: LD_EXP 135
36951: IN
36952: NOT
36953: IFFALSE 37010
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36955: LD_ADDR_EXP 135
36959: PUSH
36960: LD_EXP 135
36964: PPUSH
36965: LD_EXP 135
36969: PUSH
36970: LD_INT 1
36972: PLUS
36973: PPUSH
36974: LD_VAR 0 1
36978: PPUSH
36979: CALL_OW 1
36983: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36984: LD_ADDR_EXP 136
36988: PUSH
36989: LD_EXP 136
36993: PPUSH
36994: LD_EXP 136
36998: PUSH
36999: LD_INT 1
37001: PLUS
37002: PPUSH
37003: EMPTY
37004: PPUSH
37005: CALL_OW 1
37009: ST_TO_ADDR
// end end ;
37010: GO 36939
37012: POP
37013: POP
// for i := minerMinesList downto 1 do
37014: LD_ADDR_VAR 0 1
37018: PUSH
37019: DOUBLE
37020: LD_EXP 136
37024: INC
37025: ST_TO_ADDR
37026: LD_INT 1
37028: PUSH
37029: FOR_DOWNTO
37030: IFFALSE 37366
// begin if IsLive ( minersList [ i ] ) then
37032: LD_EXP 135
37036: PUSH
37037: LD_VAR 0 1
37041: ARRAY
37042: PPUSH
37043: CALL_OW 300
37047: IFFALSE 37075
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37049: LD_EXP 135
37053: PUSH
37054: LD_VAR 0 1
37058: ARRAY
37059: PPUSH
37060: LD_EXP 136
37064: PUSH
37065: LD_VAR 0 1
37069: ARRAY
37070: PPUSH
37071: CALL_OW 505
// if not minerMinesList [ i ] then
37075: LD_EXP 136
37079: PUSH
37080: LD_VAR 0 1
37084: ARRAY
37085: NOT
37086: IFFALSE 37090
// continue ;
37088: GO 37029
// for j := minerMinesList [ i ] downto 1 do
37090: LD_ADDR_VAR 0 2
37094: PUSH
37095: DOUBLE
37096: LD_EXP 136
37100: PUSH
37101: LD_VAR 0 1
37105: ARRAY
37106: INC
37107: ST_TO_ADDR
37108: LD_INT 1
37110: PUSH
37111: FOR_DOWNTO
37112: IFFALSE 37362
// begin side := GetSide ( minersList [ i ] ) ;
37114: LD_ADDR_VAR 0 3
37118: PUSH
37119: LD_EXP 135
37123: PUSH
37124: LD_VAR 0 1
37128: ARRAY
37129: PPUSH
37130: CALL_OW 255
37134: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37135: LD_ADDR_VAR 0 4
37139: PUSH
37140: LD_EXP 136
37144: PUSH
37145: LD_VAR 0 1
37149: ARRAY
37150: PUSH
37151: LD_VAR 0 2
37155: ARRAY
37156: PUSH
37157: LD_INT 1
37159: ARRAY
37160: PPUSH
37161: LD_EXP 136
37165: PUSH
37166: LD_VAR 0 1
37170: ARRAY
37171: PUSH
37172: LD_VAR 0 2
37176: ARRAY
37177: PUSH
37178: LD_INT 2
37180: ARRAY
37181: PPUSH
37182: CALL_OW 428
37186: ST_TO_ADDR
// if not tmp then
37187: LD_VAR 0 4
37191: NOT
37192: IFFALSE 37196
// continue ;
37194: GO 37111
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37196: LD_VAR 0 4
37200: PUSH
37201: LD_INT 81
37203: PUSH
37204: LD_VAR 0 3
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PPUSH
37213: CALL_OW 69
37217: IN
37218: PUSH
37219: LD_EXP 136
37223: PUSH
37224: LD_VAR 0 1
37228: ARRAY
37229: PUSH
37230: LD_VAR 0 2
37234: ARRAY
37235: PUSH
37236: LD_INT 1
37238: ARRAY
37239: PPUSH
37240: LD_EXP 136
37244: PUSH
37245: LD_VAR 0 1
37249: ARRAY
37250: PUSH
37251: LD_VAR 0 2
37255: ARRAY
37256: PUSH
37257: LD_INT 2
37259: ARRAY
37260: PPUSH
37261: CALL_OW 458
37265: AND
37266: IFFALSE 37360
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37268: LD_EXP 136
37272: PUSH
37273: LD_VAR 0 1
37277: ARRAY
37278: PUSH
37279: LD_VAR 0 2
37283: ARRAY
37284: PUSH
37285: LD_INT 1
37287: ARRAY
37288: PPUSH
37289: LD_EXP 136
37293: PUSH
37294: LD_VAR 0 1
37298: ARRAY
37299: PUSH
37300: LD_VAR 0 2
37304: ARRAY
37305: PUSH
37306: LD_INT 2
37308: ARRAY
37309: PPUSH
37310: LD_VAR 0 3
37314: PPUSH
37315: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37319: LD_ADDR_EXP 136
37323: PUSH
37324: LD_EXP 136
37328: PPUSH
37329: LD_VAR 0 1
37333: PPUSH
37334: LD_EXP 136
37338: PUSH
37339: LD_VAR 0 1
37343: ARRAY
37344: PPUSH
37345: LD_VAR 0 2
37349: PPUSH
37350: CALL_OW 3
37354: PPUSH
37355: CALL_OW 1
37359: ST_TO_ADDR
// end ; end ;
37360: GO 37111
37362: POP
37363: POP
// end ;
37364: GO 37029
37366: POP
37367: POP
// end ;
37368: PPOPN 4
37370: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37371: LD_INT 0
37373: PPUSH
37374: PPUSH
// result := false ;
37375: LD_ADDR_VAR 0 4
37379: PUSH
37380: LD_INT 0
37382: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37383: LD_VAR 0 1
37387: PPUSH
37388: CALL_OW 264
37392: PUSH
37393: LD_EXP 57
37397: EQUAL
37398: NOT
37399: IFFALSE 37403
// exit ;
37401: GO 37643
// index := GetElementIndex ( minersList , unit ) ;
37403: LD_ADDR_VAR 0 5
37407: PUSH
37408: LD_EXP 135
37412: PPUSH
37413: LD_VAR 0 1
37417: PPUSH
37418: CALL 43627 0 2
37422: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37423: LD_EXP 136
37427: PUSH
37428: LD_VAR 0 5
37432: ARRAY
37433: PUSH
37434: LD_EXP 137
37438: GREATEREQUAL
37439: IFFALSE 37443
// exit ;
37441: GO 37643
// ComMoveXY ( unit , x , y ) ;
37443: LD_VAR 0 1
37447: PPUSH
37448: LD_VAR 0 2
37452: PPUSH
37453: LD_VAR 0 3
37457: PPUSH
37458: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37462: LD_INT 35
37464: PPUSH
37465: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37469: LD_VAR 0 1
37473: PPUSH
37474: LD_VAR 0 2
37478: PPUSH
37479: LD_VAR 0 3
37483: PPUSH
37484: CALL 74399 0 3
37488: NOT
37489: PUSH
37490: LD_VAR 0 1
37494: PPUSH
37495: CALL_OW 314
37499: AND
37500: IFFALSE 37504
// exit ;
37502: GO 37643
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37504: LD_VAR 0 2
37508: PPUSH
37509: LD_VAR 0 3
37513: PPUSH
37514: CALL_OW 428
37518: PUSH
37519: LD_VAR 0 1
37523: EQUAL
37524: PUSH
37525: LD_VAR 0 1
37529: PPUSH
37530: CALL_OW 314
37534: NOT
37535: AND
37536: IFFALSE 37462
// PlaySoundXY ( x , y , PlantMine ) ;
37538: LD_VAR 0 2
37542: PPUSH
37543: LD_VAR 0 3
37547: PPUSH
37548: LD_STRING PlantMine
37550: PPUSH
37551: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37555: LD_VAR 0 2
37559: PPUSH
37560: LD_VAR 0 3
37564: PPUSH
37565: LD_VAR 0 1
37569: PPUSH
37570: CALL_OW 255
37574: PPUSH
37575: LD_INT 0
37577: PPUSH
37578: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37582: LD_ADDR_EXP 136
37586: PUSH
37587: LD_EXP 136
37591: PPUSH
37592: LD_VAR 0 5
37596: PUSH
37597: LD_EXP 136
37601: PUSH
37602: LD_VAR 0 5
37606: ARRAY
37607: PUSH
37608: LD_INT 1
37610: PLUS
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PPUSH
37616: LD_VAR 0 2
37620: PUSH
37621: LD_VAR 0 3
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PPUSH
37630: CALL 43842 0 3
37634: ST_TO_ADDR
// result := true ;
37635: LD_ADDR_VAR 0 4
37639: PUSH
37640: LD_INT 1
37642: ST_TO_ADDR
// end ;
37643: LD_VAR 0 4
37647: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37648: LD_INT 0
37650: PPUSH
37651: PPUSH
37652: PPUSH
// if not unit in minersList then
37653: LD_VAR 0 1
37657: PUSH
37658: LD_EXP 135
37662: IN
37663: NOT
37664: IFFALSE 37668
// exit ;
37666: GO 38060
// index := GetElementIndex ( minersList , unit ) ;
37668: LD_ADDR_VAR 0 6
37672: PUSH
37673: LD_EXP 135
37677: PPUSH
37678: LD_VAR 0 1
37682: PPUSH
37683: CALL 43627 0 2
37687: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37688: LD_ADDR_VAR 0 5
37692: PUSH
37693: DOUBLE
37694: LD_EXP 136
37698: PUSH
37699: LD_VAR 0 6
37703: ARRAY
37704: INC
37705: ST_TO_ADDR
37706: LD_INT 1
37708: PUSH
37709: FOR_DOWNTO
37710: IFFALSE 37871
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37712: LD_EXP 136
37716: PUSH
37717: LD_VAR 0 6
37721: ARRAY
37722: PUSH
37723: LD_VAR 0 5
37727: ARRAY
37728: PUSH
37729: LD_INT 1
37731: ARRAY
37732: PUSH
37733: LD_VAR 0 2
37737: EQUAL
37738: PUSH
37739: LD_EXP 136
37743: PUSH
37744: LD_VAR 0 6
37748: ARRAY
37749: PUSH
37750: LD_VAR 0 5
37754: ARRAY
37755: PUSH
37756: LD_INT 2
37758: ARRAY
37759: PUSH
37760: LD_VAR 0 3
37764: EQUAL
37765: AND
37766: IFFALSE 37869
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37768: LD_EXP 136
37772: PUSH
37773: LD_VAR 0 6
37777: ARRAY
37778: PUSH
37779: LD_VAR 0 5
37783: ARRAY
37784: PUSH
37785: LD_INT 1
37787: ARRAY
37788: PPUSH
37789: LD_EXP 136
37793: PUSH
37794: LD_VAR 0 6
37798: ARRAY
37799: PUSH
37800: LD_VAR 0 5
37804: ARRAY
37805: PUSH
37806: LD_INT 2
37808: ARRAY
37809: PPUSH
37810: LD_VAR 0 1
37814: PPUSH
37815: CALL_OW 255
37819: PPUSH
37820: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37824: LD_ADDR_EXP 136
37828: PUSH
37829: LD_EXP 136
37833: PPUSH
37834: LD_VAR 0 6
37838: PPUSH
37839: LD_EXP 136
37843: PUSH
37844: LD_VAR 0 6
37848: ARRAY
37849: PPUSH
37850: LD_VAR 0 5
37854: PPUSH
37855: CALL_OW 3
37859: PPUSH
37860: CALL_OW 1
37864: ST_TO_ADDR
// exit ;
37865: POP
37866: POP
37867: GO 38060
// end ; end ;
37869: GO 37709
37871: POP
37872: POP
// for i := minerMinesList [ index ] downto 1 do
37873: LD_ADDR_VAR 0 5
37877: PUSH
37878: DOUBLE
37879: LD_EXP 136
37883: PUSH
37884: LD_VAR 0 6
37888: ARRAY
37889: INC
37890: ST_TO_ADDR
37891: LD_INT 1
37893: PUSH
37894: FOR_DOWNTO
37895: IFFALSE 38058
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37897: LD_EXP 136
37901: PUSH
37902: LD_VAR 0 6
37906: ARRAY
37907: PUSH
37908: LD_VAR 0 5
37912: ARRAY
37913: PUSH
37914: LD_INT 1
37916: ARRAY
37917: PPUSH
37918: LD_EXP 136
37922: PUSH
37923: LD_VAR 0 6
37927: ARRAY
37928: PUSH
37929: LD_VAR 0 5
37933: ARRAY
37934: PUSH
37935: LD_INT 2
37937: ARRAY
37938: PPUSH
37939: LD_VAR 0 2
37943: PPUSH
37944: LD_VAR 0 3
37948: PPUSH
37949: CALL_OW 298
37953: PUSH
37954: LD_INT 6
37956: LESS
37957: IFFALSE 38056
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37959: LD_EXP 136
37963: PUSH
37964: LD_VAR 0 6
37968: ARRAY
37969: PUSH
37970: LD_VAR 0 5
37974: ARRAY
37975: PUSH
37976: LD_INT 1
37978: ARRAY
37979: PPUSH
37980: LD_EXP 136
37984: PUSH
37985: LD_VAR 0 6
37989: ARRAY
37990: PUSH
37991: LD_VAR 0 5
37995: ARRAY
37996: PUSH
37997: LD_INT 2
37999: ARRAY
38000: PPUSH
38001: LD_VAR 0 1
38005: PPUSH
38006: CALL_OW 255
38010: PPUSH
38011: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38015: LD_ADDR_EXP 136
38019: PUSH
38020: LD_EXP 136
38024: PPUSH
38025: LD_VAR 0 6
38029: PPUSH
38030: LD_EXP 136
38034: PUSH
38035: LD_VAR 0 6
38039: ARRAY
38040: PPUSH
38041: LD_VAR 0 5
38045: PPUSH
38046: CALL_OW 3
38050: PPUSH
38051: CALL_OW 1
38055: ST_TO_ADDR
// end ; end ;
38056: GO 37894
38058: POP
38059: POP
// end ;
38060: LD_VAR 0 4
38064: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38065: LD_INT 0
38067: PPUSH
38068: PPUSH
38069: PPUSH
38070: PPUSH
38071: PPUSH
38072: PPUSH
38073: PPUSH
38074: PPUSH
38075: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38076: LD_VAR 0 1
38080: PPUSH
38081: CALL_OW 264
38085: PUSH
38086: LD_EXP 57
38090: EQUAL
38091: NOT
38092: PUSH
38093: LD_VAR 0 1
38097: PUSH
38098: LD_EXP 135
38102: IN
38103: NOT
38104: OR
38105: IFFALSE 38109
// exit ;
38107: GO 38431
// index := GetElementIndex ( minersList , unit ) ;
38109: LD_ADDR_VAR 0 6
38113: PUSH
38114: LD_EXP 135
38118: PPUSH
38119: LD_VAR 0 1
38123: PPUSH
38124: CALL 43627 0 2
38128: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38129: LD_ADDR_VAR 0 8
38133: PUSH
38134: LD_EXP 137
38138: PUSH
38139: LD_EXP 136
38143: PUSH
38144: LD_VAR 0 6
38148: ARRAY
38149: MINUS
38150: ST_TO_ADDR
// if not minesFreeAmount then
38151: LD_VAR 0 8
38155: NOT
38156: IFFALSE 38160
// exit ;
38158: GO 38431
// tmp := [ ] ;
38160: LD_ADDR_VAR 0 7
38164: PUSH
38165: EMPTY
38166: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38167: LD_ADDR_VAR 0 5
38171: PUSH
38172: DOUBLE
38173: LD_INT 1
38175: DEC
38176: ST_TO_ADDR
38177: LD_VAR 0 8
38181: PUSH
38182: FOR_TO
38183: IFFALSE 38378
// begin _d := rand ( 0 , 5 ) ;
38185: LD_ADDR_VAR 0 11
38189: PUSH
38190: LD_INT 0
38192: PPUSH
38193: LD_INT 5
38195: PPUSH
38196: CALL_OW 12
38200: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38201: LD_ADDR_VAR 0 12
38205: PUSH
38206: LD_INT 2
38208: PPUSH
38209: LD_INT 6
38211: PPUSH
38212: CALL_OW 12
38216: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38217: LD_ADDR_VAR 0 9
38221: PUSH
38222: LD_VAR 0 2
38226: PPUSH
38227: LD_VAR 0 11
38231: PPUSH
38232: LD_VAR 0 12
38236: PPUSH
38237: CALL_OW 272
38241: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38242: LD_ADDR_VAR 0 10
38246: PUSH
38247: LD_VAR 0 3
38251: PPUSH
38252: LD_VAR 0 11
38256: PPUSH
38257: LD_VAR 0 12
38261: PPUSH
38262: CALL_OW 273
38266: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38267: LD_VAR 0 9
38271: PPUSH
38272: LD_VAR 0 10
38276: PPUSH
38277: CALL_OW 488
38281: PUSH
38282: LD_VAR 0 9
38286: PUSH
38287: LD_VAR 0 10
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_VAR 0 7
38300: IN
38301: NOT
38302: AND
38303: PUSH
38304: LD_VAR 0 9
38308: PPUSH
38309: LD_VAR 0 10
38313: PPUSH
38314: CALL_OW 458
38318: NOT
38319: AND
38320: IFFALSE 38362
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38322: LD_ADDR_VAR 0 7
38326: PUSH
38327: LD_VAR 0 7
38331: PPUSH
38332: LD_VAR 0 7
38336: PUSH
38337: LD_INT 1
38339: PLUS
38340: PPUSH
38341: LD_VAR 0 9
38345: PUSH
38346: LD_VAR 0 10
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PPUSH
38355: CALL_OW 1
38359: ST_TO_ADDR
38360: GO 38376
// i := i - 1 ;
38362: LD_ADDR_VAR 0 5
38366: PUSH
38367: LD_VAR 0 5
38371: PUSH
38372: LD_INT 1
38374: MINUS
38375: ST_TO_ADDR
// end ;
38376: GO 38182
38378: POP
38379: POP
// for i in tmp do
38380: LD_ADDR_VAR 0 5
38384: PUSH
38385: LD_VAR 0 7
38389: PUSH
38390: FOR_IN
38391: IFFALSE 38429
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38393: LD_VAR 0 1
38397: PPUSH
38398: LD_VAR 0 5
38402: PUSH
38403: LD_INT 1
38405: ARRAY
38406: PPUSH
38407: LD_VAR 0 5
38411: PUSH
38412: LD_INT 2
38414: ARRAY
38415: PPUSH
38416: CALL 37371 0 3
38420: NOT
38421: IFFALSE 38427
// exit ;
38423: POP
38424: POP
38425: GO 38431
38427: GO 38390
38429: POP
38430: POP
// end ;
38431: LD_VAR 0 4
38435: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38436: LD_INT 0
38438: PPUSH
38439: PPUSH
38440: PPUSH
38441: PPUSH
38442: PPUSH
38443: PPUSH
38444: PPUSH
// if not GetClass ( unit ) = class_sniper then
38445: LD_VAR 0 1
38449: PPUSH
38450: CALL_OW 257
38454: PUSH
38455: LD_INT 5
38457: EQUAL
38458: NOT
38459: IFFALSE 38463
// exit ;
38461: GO 38851
// dist := 8 ;
38463: LD_ADDR_VAR 0 5
38467: PUSH
38468: LD_INT 8
38470: ST_TO_ADDR
// viewRange := 12 ;
38471: LD_ADDR_VAR 0 7
38475: PUSH
38476: LD_INT 12
38478: ST_TO_ADDR
// side := GetSide ( unit ) ;
38479: LD_ADDR_VAR 0 6
38483: PUSH
38484: LD_VAR 0 1
38488: PPUSH
38489: CALL_OW 255
38493: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38494: LD_INT 61
38496: PPUSH
38497: LD_VAR 0 6
38501: PPUSH
38502: CALL_OW 321
38506: PUSH
38507: LD_INT 2
38509: EQUAL
38510: IFFALSE 38520
// viewRange := 16 ;
38512: LD_ADDR_VAR 0 7
38516: PUSH
38517: LD_INT 16
38519: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38520: LD_VAR 0 1
38524: PPUSH
38525: LD_VAR 0 2
38529: PPUSH
38530: LD_VAR 0 3
38534: PPUSH
38535: CALL_OW 297
38539: PUSH
38540: LD_VAR 0 5
38544: GREATER
38545: IFFALSE 38624
// begin ComMoveXY ( unit , x , y ) ;
38547: LD_VAR 0 1
38551: PPUSH
38552: LD_VAR 0 2
38556: PPUSH
38557: LD_VAR 0 3
38561: PPUSH
38562: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38566: LD_INT 35
38568: PPUSH
38569: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38573: LD_VAR 0 1
38577: PPUSH
38578: LD_VAR 0 2
38582: PPUSH
38583: LD_VAR 0 3
38587: PPUSH
38588: CALL 74399 0 3
38592: NOT
38593: IFFALSE 38597
// exit ;
38595: GO 38851
// until GetDistUnitXY ( unit , x , y ) < dist ;
38597: LD_VAR 0 1
38601: PPUSH
38602: LD_VAR 0 2
38606: PPUSH
38607: LD_VAR 0 3
38611: PPUSH
38612: CALL_OW 297
38616: PUSH
38617: LD_VAR 0 5
38621: LESS
38622: IFFALSE 38566
// end ; ComTurnXY ( unit , x , y ) ;
38624: LD_VAR 0 1
38628: PPUSH
38629: LD_VAR 0 2
38633: PPUSH
38634: LD_VAR 0 3
38638: PPUSH
38639: CALL_OW 118
// wait ( 5 ) ;
38643: LD_INT 5
38645: PPUSH
38646: CALL_OW 67
// _d := GetDir ( unit ) ;
38650: LD_ADDR_VAR 0 10
38654: PUSH
38655: LD_VAR 0 1
38659: PPUSH
38660: CALL_OW 254
38664: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38665: LD_ADDR_VAR 0 8
38669: PUSH
38670: LD_VAR 0 1
38674: PPUSH
38675: CALL_OW 250
38679: PPUSH
38680: LD_VAR 0 10
38684: PPUSH
38685: LD_VAR 0 5
38689: PPUSH
38690: CALL_OW 272
38694: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38695: LD_ADDR_VAR 0 9
38699: PUSH
38700: LD_VAR 0 1
38704: PPUSH
38705: CALL_OW 251
38709: PPUSH
38710: LD_VAR 0 10
38714: PPUSH
38715: LD_VAR 0 5
38719: PPUSH
38720: CALL_OW 273
38724: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38725: LD_VAR 0 8
38729: PPUSH
38730: LD_VAR 0 9
38734: PPUSH
38735: CALL_OW 488
38739: NOT
38740: IFFALSE 38744
// exit ;
38742: GO 38851
// ComAnimCustom ( unit , 1 ) ;
38744: LD_VAR 0 1
38748: PPUSH
38749: LD_INT 1
38751: PPUSH
38752: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38756: LD_VAR 0 8
38760: PPUSH
38761: LD_VAR 0 9
38765: PPUSH
38766: LD_VAR 0 6
38770: PPUSH
38771: LD_VAR 0 7
38775: PPUSH
38776: CALL_OW 330
// repeat wait ( 1 ) ;
38780: LD_INT 1
38782: PPUSH
38783: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38787: LD_VAR 0 1
38791: PPUSH
38792: CALL_OW 316
38796: PUSH
38797: LD_VAR 0 1
38801: PPUSH
38802: CALL_OW 314
38806: OR
38807: PUSH
38808: LD_VAR 0 1
38812: PPUSH
38813: CALL_OW 302
38817: NOT
38818: OR
38819: PUSH
38820: LD_VAR 0 1
38824: PPUSH
38825: CALL_OW 301
38829: OR
38830: IFFALSE 38780
// RemoveSeeing ( _x , _y , side ) ;
38832: LD_VAR 0 8
38836: PPUSH
38837: LD_VAR 0 9
38841: PPUSH
38842: LD_VAR 0 6
38846: PPUSH
38847: CALL_OW 331
// end ; end_of_file
38851: LD_VAR 0 4
38855: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38856: LD_INT 0
38858: PPUSH
38859: PPUSH
// if exist_mode then
38860: LD_VAR 0 2
38864: IFFALSE 38889
// unit := CreateCharacter ( prefix & ident ) else
38866: LD_ADDR_VAR 0 5
38870: PUSH
38871: LD_VAR 0 3
38875: PUSH
38876: LD_VAR 0 1
38880: STR
38881: PPUSH
38882: CALL_OW 34
38886: ST_TO_ADDR
38887: GO 38904
// unit := NewCharacter ( ident ) ;
38889: LD_ADDR_VAR 0 5
38893: PUSH
38894: LD_VAR 0 1
38898: PPUSH
38899: CALL_OW 25
38903: ST_TO_ADDR
// result := unit ;
38904: LD_ADDR_VAR 0 4
38908: PUSH
38909: LD_VAR 0 5
38913: ST_TO_ADDR
// end ;
38914: LD_VAR 0 4
38918: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38919: LD_INT 0
38921: PPUSH
38922: PPUSH
// if not side or not nation then
38923: LD_VAR 0 1
38927: NOT
38928: PUSH
38929: LD_VAR 0 2
38933: NOT
38934: OR
38935: IFFALSE 38939
// exit ;
38937: GO 39707
// case nation of nation_american :
38939: LD_VAR 0 2
38943: PUSH
38944: LD_INT 1
38946: DOUBLE
38947: EQUAL
38948: IFTRUE 38952
38950: GO 39166
38952: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38953: LD_ADDR_VAR 0 4
38957: PUSH
38958: LD_INT 35
38960: PUSH
38961: LD_INT 45
38963: PUSH
38964: LD_INT 46
38966: PUSH
38967: LD_INT 47
38969: PUSH
38970: LD_INT 82
38972: PUSH
38973: LD_INT 83
38975: PUSH
38976: LD_INT 84
38978: PUSH
38979: LD_INT 85
38981: PUSH
38982: LD_INT 86
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: LD_INT 6
38993: PUSH
38994: LD_INT 15
38996: PUSH
38997: LD_INT 16
38999: PUSH
39000: LD_INT 7
39002: PUSH
39003: LD_INT 12
39005: PUSH
39006: LD_INT 13
39008: PUSH
39009: LD_INT 10
39011: PUSH
39012: LD_INT 14
39014: PUSH
39015: LD_INT 20
39017: PUSH
39018: LD_INT 21
39020: PUSH
39021: LD_INT 22
39023: PUSH
39024: LD_INT 25
39026: PUSH
39027: LD_INT 32
39029: PUSH
39030: LD_INT 27
39032: PUSH
39033: LD_INT 36
39035: PUSH
39036: LD_INT 69
39038: PUSH
39039: LD_INT 39
39041: PUSH
39042: LD_INT 34
39044: PUSH
39045: LD_INT 40
39047: PUSH
39048: LD_INT 48
39050: PUSH
39051: LD_INT 49
39053: PUSH
39054: LD_INT 50
39056: PUSH
39057: LD_INT 51
39059: PUSH
39060: LD_INT 52
39062: PUSH
39063: LD_INT 53
39065: PUSH
39066: LD_INT 54
39068: PUSH
39069: LD_INT 55
39071: PUSH
39072: LD_INT 56
39074: PUSH
39075: LD_INT 57
39077: PUSH
39078: LD_INT 58
39080: PUSH
39081: LD_INT 59
39083: PUSH
39084: LD_INT 60
39086: PUSH
39087: LD_INT 61
39089: PUSH
39090: LD_INT 62
39092: PUSH
39093: LD_INT 80
39095: PUSH
39096: LD_INT 82
39098: PUSH
39099: LD_INT 83
39101: PUSH
39102: LD_INT 84
39104: PUSH
39105: LD_INT 85
39107: PUSH
39108: LD_INT 86
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: ST_TO_ADDR
39164: GO 39631
39166: LD_INT 2
39168: DOUBLE
39169: EQUAL
39170: IFTRUE 39174
39172: GO 39400
39174: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39175: LD_ADDR_VAR 0 4
39179: PUSH
39180: LD_INT 35
39182: PUSH
39183: LD_INT 45
39185: PUSH
39186: LD_INT 46
39188: PUSH
39189: LD_INT 47
39191: PUSH
39192: LD_INT 82
39194: PUSH
39195: LD_INT 83
39197: PUSH
39198: LD_INT 84
39200: PUSH
39201: LD_INT 85
39203: PUSH
39204: LD_INT 87
39206: PUSH
39207: LD_INT 70
39209: PUSH
39210: LD_INT 1
39212: PUSH
39213: LD_INT 11
39215: PUSH
39216: LD_INT 3
39218: PUSH
39219: LD_INT 4
39221: PUSH
39222: LD_INT 5
39224: PUSH
39225: LD_INT 6
39227: PUSH
39228: LD_INT 15
39230: PUSH
39231: LD_INT 18
39233: PUSH
39234: LD_INT 7
39236: PUSH
39237: LD_INT 17
39239: PUSH
39240: LD_INT 8
39242: PUSH
39243: LD_INT 20
39245: PUSH
39246: LD_INT 21
39248: PUSH
39249: LD_INT 22
39251: PUSH
39252: LD_INT 72
39254: PUSH
39255: LD_INT 26
39257: PUSH
39258: LD_INT 69
39260: PUSH
39261: LD_INT 39
39263: PUSH
39264: LD_INT 40
39266: PUSH
39267: LD_INT 41
39269: PUSH
39270: LD_INT 42
39272: PUSH
39273: LD_INT 43
39275: PUSH
39276: LD_INT 48
39278: PUSH
39279: LD_INT 49
39281: PUSH
39282: LD_INT 50
39284: PUSH
39285: LD_INT 51
39287: PUSH
39288: LD_INT 52
39290: PUSH
39291: LD_INT 53
39293: PUSH
39294: LD_INT 54
39296: PUSH
39297: LD_INT 55
39299: PUSH
39300: LD_INT 56
39302: PUSH
39303: LD_INT 60
39305: PUSH
39306: LD_INT 61
39308: PUSH
39309: LD_INT 62
39311: PUSH
39312: LD_INT 66
39314: PUSH
39315: LD_INT 67
39317: PUSH
39318: LD_INT 68
39320: PUSH
39321: LD_INT 81
39323: PUSH
39324: LD_INT 82
39326: PUSH
39327: LD_INT 83
39329: PUSH
39330: LD_INT 84
39332: PUSH
39333: LD_INT 85
39335: PUSH
39336: LD_INT 87
39338: PUSH
39339: LD_INT 88
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: ST_TO_ADDR
39398: GO 39631
39400: LD_INT 3
39402: DOUBLE
39403: EQUAL
39404: IFTRUE 39408
39406: GO 39630
39408: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39409: LD_ADDR_VAR 0 4
39413: PUSH
39414: LD_INT 46
39416: PUSH
39417: LD_INT 47
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: LD_INT 2
39425: PUSH
39426: LD_INT 82
39428: PUSH
39429: LD_INT 83
39431: PUSH
39432: LD_INT 84
39434: PUSH
39435: LD_INT 85
39437: PUSH
39438: LD_INT 86
39440: PUSH
39441: LD_INT 11
39443: PUSH
39444: LD_INT 9
39446: PUSH
39447: LD_INT 20
39449: PUSH
39450: LD_INT 19
39452: PUSH
39453: LD_INT 21
39455: PUSH
39456: LD_INT 24
39458: PUSH
39459: LD_INT 22
39461: PUSH
39462: LD_INT 25
39464: PUSH
39465: LD_INT 28
39467: PUSH
39468: LD_INT 29
39470: PUSH
39471: LD_INT 30
39473: PUSH
39474: LD_INT 31
39476: PUSH
39477: LD_INT 37
39479: PUSH
39480: LD_INT 38
39482: PUSH
39483: LD_INT 32
39485: PUSH
39486: LD_INT 27
39488: PUSH
39489: LD_INT 33
39491: PUSH
39492: LD_INT 69
39494: PUSH
39495: LD_INT 39
39497: PUSH
39498: LD_INT 34
39500: PUSH
39501: LD_INT 40
39503: PUSH
39504: LD_INT 71
39506: PUSH
39507: LD_INT 23
39509: PUSH
39510: LD_INT 44
39512: PUSH
39513: LD_INT 48
39515: PUSH
39516: LD_INT 49
39518: PUSH
39519: LD_INT 50
39521: PUSH
39522: LD_INT 51
39524: PUSH
39525: LD_INT 52
39527: PUSH
39528: LD_INT 53
39530: PUSH
39531: LD_INT 54
39533: PUSH
39534: LD_INT 55
39536: PUSH
39537: LD_INT 56
39539: PUSH
39540: LD_INT 57
39542: PUSH
39543: LD_INT 58
39545: PUSH
39546: LD_INT 59
39548: PUSH
39549: LD_INT 63
39551: PUSH
39552: LD_INT 64
39554: PUSH
39555: LD_INT 65
39557: PUSH
39558: LD_INT 82
39560: PUSH
39561: LD_INT 83
39563: PUSH
39564: LD_INT 84
39566: PUSH
39567: LD_INT 85
39569: PUSH
39570: LD_INT 86
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: ST_TO_ADDR
39628: GO 39631
39630: POP
// if state > - 1 and state < 3 then
39631: LD_VAR 0 3
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: GREATER
39640: PUSH
39641: LD_VAR 0 3
39645: PUSH
39646: LD_INT 3
39648: LESS
39649: AND
39650: IFFALSE 39707
// for i in result do
39652: LD_ADDR_VAR 0 5
39656: PUSH
39657: LD_VAR 0 4
39661: PUSH
39662: FOR_IN
39663: IFFALSE 39705
// if GetTech ( i , side ) <> state then
39665: LD_VAR 0 5
39669: PPUSH
39670: LD_VAR 0 1
39674: PPUSH
39675: CALL_OW 321
39679: PUSH
39680: LD_VAR 0 3
39684: NONEQUAL
39685: IFFALSE 39703
// result := result diff i ;
39687: LD_ADDR_VAR 0 4
39691: PUSH
39692: LD_VAR 0 4
39696: PUSH
39697: LD_VAR 0 5
39701: DIFF
39702: ST_TO_ADDR
39703: GO 39662
39705: POP
39706: POP
// end ;
39707: LD_VAR 0 4
39711: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39712: LD_INT 0
39714: PPUSH
39715: PPUSH
39716: PPUSH
// result := true ;
39717: LD_ADDR_VAR 0 3
39721: PUSH
39722: LD_INT 1
39724: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39725: LD_ADDR_VAR 0 5
39729: PUSH
39730: LD_VAR 0 2
39734: PPUSH
39735: CALL_OW 480
39739: ST_TO_ADDR
// if not tmp then
39740: LD_VAR 0 5
39744: NOT
39745: IFFALSE 39749
// exit ;
39747: GO 39798
// for i in tmp do
39749: LD_ADDR_VAR 0 4
39753: PUSH
39754: LD_VAR 0 5
39758: PUSH
39759: FOR_IN
39760: IFFALSE 39796
// if GetTech ( i , side ) <> state_researched then
39762: LD_VAR 0 4
39766: PPUSH
39767: LD_VAR 0 1
39771: PPUSH
39772: CALL_OW 321
39776: PUSH
39777: LD_INT 2
39779: NONEQUAL
39780: IFFALSE 39794
// begin result := false ;
39782: LD_ADDR_VAR 0 3
39786: PUSH
39787: LD_INT 0
39789: ST_TO_ADDR
// exit ;
39790: POP
39791: POP
39792: GO 39798
// end ;
39794: GO 39759
39796: POP
39797: POP
// end ;
39798: LD_VAR 0 3
39802: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39803: LD_INT 0
39805: PPUSH
39806: PPUSH
39807: PPUSH
39808: PPUSH
39809: PPUSH
39810: PPUSH
39811: PPUSH
39812: PPUSH
39813: PPUSH
39814: PPUSH
39815: PPUSH
39816: PPUSH
39817: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39818: LD_VAR 0 1
39822: NOT
39823: PUSH
39824: LD_VAR 0 1
39828: PPUSH
39829: CALL_OW 257
39833: PUSH
39834: LD_INT 9
39836: NONEQUAL
39837: OR
39838: IFFALSE 39842
// exit ;
39840: GO 40415
// side := GetSide ( unit ) ;
39842: LD_ADDR_VAR 0 9
39846: PUSH
39847: LD_VAR 0 1
39851: PPUSH
39852: CALL_OW 255
39856: ST_TO_ADDR
// tech_space := tech_spacanom ;
39857: LD_ADDR_VAR 0 12
39861: PUSH
39862: LD_INT 29
39864: ST_TO_ADDR
// tech_time := tech_taurad ;
39865: LD_ADDR_VAR 0 13
39869: PUSH
39870: LD_INT 28
39872: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39873: LD_ADDR_VAR 0 11
39877: PUSH
39878: LD_VAR 0 1
39882: PPUSH
39883: CALL_OW 310
39887: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39888: LD_VAR 0 11
39892: PPUSH
39893: CALL_OW 247
39897: PUSH
39898: LD_INT 2
39900: EQUAL
39901: IFFALSE 39905
// exit ;
39903: GO 40415
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39905: LD_ADDR_VAR 0 8
39909: PUSH
39910: LD_INT 81
39912: PUSH
39913: LD_VAR 0 9
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 3
39924: PUSH
39925: LD_INT 21
39927: PUSH
39928: LD_INT 3
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PPUSH
39943: CALL_OW 69
39947: ST_TO_ADDR
// if not tmp then
39948: LD_VAR 0 8
39952: NOT
39953: IFFALSE 39957
// exit ;
39955: GO 40415
// if in_unit then
39957: LD_VAR 0 11
39961: IFFALSE 39985
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39963: LD_ADDR_VAR 0 10
39967: PUSH
39968: LD_VAR 0 8
39972: PPUSH
39973: LD_VAR 0 11
39977: PPUSH
39978: CALL_OW 74
39982: ST_TO_ADDR
39983: GO 40005
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39985: LD_ADDR_VAR 0 10
39989: PUSH
39990: LD_VAR 0 8
39994: PPUSH
39995: LD_VAR 0 1
39999: PPUSH
40000: CALL_OW 74
40004: ST_TO_ADDR
// if not enemy then
40005: LD_VAR 0 10
40009: NOT
40010: IFFALSE 40014
// exit ;
40012: GO 40415
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40014: LD_VAR 0 11
40018: PUSH
40019: LD_VAR 0 11
40023: PPUSH
40024: LD_VAR 0 10
40028: PPUSH
40029: CALL_OW 296
40033: PUSH
40034: LD_INT 13
40036: GREATER
40037: AND
40038: PUSH
40039: LD_VAR 0 1
40043: PPUSH
40044: LD_VAR 0 10
40048: PPUSH
40049: CALL_OW 296
40053: PUSH
40054: LD_INT 12
40056: GREATER
40057: OR
40058: IFFALSE 40062
// exit ;
40060: GO 40415
// missile := [ 1 ] ;
40062: LD_ADDR_VAR 0 14
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: EMPTY
40071: LIST
40072: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40073: LD_VAR 0 9
40077: PPUSH
40078: LD_VAR 0 12
40082: PPUSH
40083: CALL_OW 325
40087: IFFALSE 40116
// missile := Insert ( missile , missile + 1 , 2 ) ;
40089: LD_ADDR_VAR 0 14
40093: PUSH
40094: LD_VAR 0 14
40098: PPUSH
40099: LD_VAR 0 14
40103: PUSH
40104: LD_INT 1
40106: PLUS
40107: PPUSH
40108: LD_INT 2
40110: PPUSH
40111: CALL_OW 2
40115: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40116: LD_VAR 0 9
40120: PPUSH
40121: LD_VAR 0 13
40125: PPUSH
40126: CALL_OW 325
40130: PUSH
40131: LD_VAR 0 10
40135: PPUSH
40136: CALL_OW 255
40140: PPUSH
40141: LD_VAR 0 13
40145: PPUSH
40146: CALL_OW 325
40150: NOT
40151: AND
40152: IFFALSE 40181
// missile := Insert ( missile , missile + 1 , 3 ) ;
40154: LD_ADDR_VAR 0 14
40158: PUSH
40159: LD_VAR 0 14
40163: PPUSH
40164: LD_VAR 0 14
40168: PUSH
40169: LD_INT 1
40171: PLUS
40172: PPUSH
40173: LD_INT 3
40175: PPUSH
40176: CALL_OW 2
40180: ST_TO_ADDR
// if missile < 2 then
40181: LD_VAR 0 14
40185: PUSH
40186: LD_INT 2
40188: LESS
40189: IFFALSE 40193
// exit ;
40191: GO 40415
// x := GetX ( enemy ) ;
40193: LD_ADDR_VAR 0 4
40197: PUSH
40198: LD_VAR 0 10
40202: PPUSH
40203: CALL_OW 250
40207: ST_TO_ADDR
// y := GetY ( enemy ) ;
40208: LD_ADDR_VAR 0 5
40212: PUSH
40213: LD_VAR 0 10
40217: PPUSH
40218: CALL_OW 251
40222: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40223: LD_ADDR_VAR 0 6
40227: PUSH
40228: LD_VAR 0 4
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PPUSH
40237: LD_INT 1
40239: PPUSH
40240: CALL_OW 12
40244: PLUS
40245: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40246: LD_ADDR_VAR 0 7
40250: PUSH
40251: LD_VAR 0 5
40255: PUSH
40256: LD_INT 1
40258: NEG
40259: PPUSH
40260: LD_INT 1
40262: PPUSH
40263: CALL_OW 12
40267: PLUS
40268: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40269: LD_VAR 0 6
40273: PPUSH
40274: LD_VAR 0 7
40278: PPUSH
40279: CALL_OW 488
40283: NOT
40284: IFFALSE 40306
// begin _x := x ;
40286: LD_ADDR_VAR 0 6
40290: PUSH
40291: LD_VAR 0 4
40295: ST_TO_ADDR
// _y := y ;
40296: LD_ADDR_VAR 0 7
40300: PUSH
40301: LD_VAR 0 5
40305: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40306: LD_ADDR_VAR 0 3
40310: PUSH
40311: LD_INT 1
40313: PPUSH
40314: LD_VAR 0 14
40318: PPUSH
40319: CALL_OW 12
40323: ST_TO_ADDR
// case i of 1 :
40324: LD_VAR 0 3
40328: PUSH
40329: LD_INT 1
40331: DOUBLE
40332: EQUAL
40333: IFTRUE 40337
40335: GO 40354
40337: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40338: LD_VAR 0 1
40342: PPUSH
40343: LD_VAR 0 10
40347: PPUSH
40348: CALL_OW 115
40352: GO 40415
40354: LD_INT 2
40356: DOUBLE
40357: EQUAL
40358: IFTRUE 40362
40360: GO 40384
40362: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40363: LD_VAR 0 1
40367: PPUSH
40368: LD_VAR 0 6
40372: PPUSH
40373: LD_VAR 0 7
40377: PPUSH
40378: CALL_OW 153
40382: GO 40415
40384: LD_INT 3
40386: DOUBLE
40387: EQUAL
40388: IFTRUE 40392
40390: GO 40414
40392: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40393: LD_VAR 0 1
40397: PPUSH
40398: LD_VAR 0 6
40402: PPUSH
40403: LD_VAR 0 7
40407: PPUSH
40408: CALL_OW 154
40412: GO 40415
40414: POP
// end ;
40415: LD_VAR 0 2
40419: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40420: LD_INT 0
40422: PPUSH
40423: PPUSH
40424: PPUSH
40425: PPUSH
40426: PPUSH
40427: PPUSH
// if not unit or not building then
40428: LD_VAR 0 1
40432: NOT
40433: PUSH
40434: LD_VAR 0 2
40438: NOT
40439: OR
40440: IFFALSE 40444
// exit ;
40442: GO 40602
// x := GetX ( building ) ;
40444: LD_ADDR_VAR 0 5
40448: PUSH
40449: LD_VAR 0 2
40453: PPUSH
40454: CALL_OW 250
40458: ST_TO_ADDR
// y := GetY ( building ) ;
40459: LD_ADDR_VAR 0 6
40463: PUSH
40464: LD_VAR 0 2
40468: PPUSH
40469: CALL_OW 251
40473: ST_TO_ADDR
// for i = 0 to 5 do
40474: LD_ADDR_VAR 0 4
40478: PUSH
40479: DOUBLE
40480: LD_INT 0
40482: DEC
40483: ST_TO_ADDR
40484: LD_INT 5
40486: PUSH
40487: FOR_TO
40488: IFFALSE 40600
// begin _x := ShiftX ( x , i , 3 ) ;
40490: LD_ADDR_VAR 0 7
40494: PUSH
40495: LD_VAR 0 5
40499: PPUSH
40500: LD_VAR 0 4
40504: PPUSH
40505: LD_INT 3
40507: PPUSH
40508: CALL_OW 272
40512: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40513: LD_ADDR_VAR 0 8
40517: PUSH
40518: LD_VAR 0 6
40522: PPUSH
40523: LD_VAR 0 4
40527: PPUSH
40528: LD_INT 3
40530: PPUSH
40531: CALL_OW 273
40535: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40536: LD_VAR 0 7
40540: PPUSH
40541: LD_VAR 0 8
40545: PPUSH
40546: CALL_OW 488
40550: NOT
40551: IFFALSE 40555
// continue ;
40553: GO 40487
// if HexInfo ( _x , _y ) = 0 then
40555: LD_VAR 0 7
40559: PPUSH
40560: LD_VAR 0 8
40564: PPUSH
40565: CALL_OW 428
40569: PUSH
40570: LD_INT 0
40572: EQUAL
40573: IFFALSE 40598
// begin ComMoveXY ( unit , _x , _y ) ;
40575: LD_VAR 0 1
40579: PPUSH
40580: LD_VAR 0 7
40584: PPUSH
40585: LD_VAR 0 8
40589: PPUSH
40590: CALL_OW 111
// exit ;
40594: POP
40595: POP
40596: GO 40602
// end ; end ;
40598: GO 40487
40600: POP
40601: POP
// end ;
40602: LD_VAR 0 3
40606: RET
// export function ScanBase ( side , base_area ) ; begin
40607: LD_INT 0
40609: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40610: LD_ADDR_VAR 0 3
40614: PUSH
40615: LD_VAR 0 2
40619: PPUSH
40620: LD_INT 81
40622: PUSH
40623: LD_VAR 0 1
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PPUSH
40632: CALL_OW 70
40636: ST_TO_ADDR
// end ;
40637: LD_VAR 0 3
40641: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40642: LD_INT 0
40644: PPUSH
40645: PPUSH
40646: PPUSH
40647: PPUSH
// result := false ;
40648: LD_ADDR_VAR 0 2
40652: PUSH
40653: LD_INT 0
40655: ST_TO_ADDR
// side := GetSide ( unit ) ;
40656: LD_ADDR_VAR 0 3
40660: PUSH
40661: LD_VAR 0 1
40665: PPUSH
40666: CALL_OW 255
40670: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40671: LD_ADDR_VAR 0 4
40675: PUSH
40676: LD_VAR 0 1
40680: PPUSH
40681: CALL_OW 248
40685: ST_TO_ADDR
// case nat of 1 :
40686: LD_VAR 0 4
40690: PUSH
40691: LD_INT 1
40693: DOUBLE
40694: EQUAL
40695: IFTRUE 40699
40697: GO 40710
40699: POP
// tech := tech_lassight ; 2 :
40700: LD_ADDR_VAR 0 5
40704: PUSH
40705: LD_INT 12
40707: ST_TO_ADDR
40708: GO 40749
40710: LD_INT 2
40712: DOUBLE
40713: EQUAL
40714: IFTRUE 40718
40716: GO 40729
40718: POP
// tech := tech_mortar ; 3 :
40719: LD_ADDR_VAR 0 5
40723: PUSH
40724: LD_INT 41
40726: ST_TO_ADDR
40727: GO 40749
40729: LD_INT 3
40731: DOUBLE
40732: EQUAL
40733: IFTRUE 40737
40735: GO 40748
40737: POP
// tech := tech_bazooka ; end ;
40738: LD_ADDR_VAR 0 5
40742: PUSH
40743: LD_INT 44
40745: ST_TO_ADDR
40746: GO 40749
40748: POP
// if Researched ( side , tech ) then
40749: LD_VAR 0 3
40753: PPUSH
40754: LD_VAR 0 5
40758: PPUSH
40759: CALL_OW 325
40763: IFFALSE 40790
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40765: LD_ADDR_VAR 0 2
40769: PUSH
40770: LD_INT 5
40772: PUSH
40773: LD_INT 8
40775: PUSH
40776: LD_INT 9
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: LIST
40783: PUSH
40784: LD_VAR 0 4
40788: ARRAY
40789: ST_TO_ADDR
// end ;
40790: LD_VAR 0 2
40794: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40795: LD_INT 0
40797: PPUSH
40798: PPUSH
40799: PPUSH
// if not mines then
40800: LD_VAR 0 2
40804: NOT
40805: IFFALSE 40809
// exit ;
40807: GO 40953
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40809: LD_ADDR_VAR 0 5
40813: PUSH
40814: LD_INT 81
40816: PUSH
40817: LD_VAR 0 1
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 3
40828: PUSH
40829: LD_INT 21
40831: PUSH
40832: LD_INT 3
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PPUSH
40847: CALL_OW 69
40851: ST_TO_ADDR
// for i in mines do
40852: LD_ADDR_VAR 0 4
40856: PUSH
40857: LD_VAR 0 2
40861: PUSH
40862: FOR_IN
40863: IFFALSE 40951
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40865: LD_VAR 0 4
40869: PUSH
40870: LD_INT 1
40872: ARRAY
40873: PPUSH
40874: LD_VAR 0 4
40878: PUSH
40879: LD_INT 2
40881: ARRAY
40882: PPUSH
40883: CALL_OW 458
40887: NOT
40888: IFFALSE 40892
// continue ;
40890: GO 40862
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40892: LD_VAR 0 4
40896: PUSH
40897: LD_INT 1
40899: ARRAY
40900: PPUSH
40901: LD_VAR 0 4
40905: PUSH
40906: LD_INT 2
40908: ARRAY
40909: PPUSH
40910: CALL_OW 428
40914: PUSH
40915: LD_VAR 0 5
40919: IN
40920: IFFALSE 40949
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40922: LD_VAR 0 4
40926: PUSH
40927: LD_INT 1
40929: ARRAY
40930: PPUSH
40931: LD_VAR 0 4
40935: PUSH
40936: LD_INT 2
40938: ARRAY
40939: PPUSH
40940: LD_VAR 0 1
40944: PPUSH
40945: CALL_OW 456
// end ;
40949: GO 40862
40951: POP
40952: POP
// end ;
40953: LD_VAR 0 3
40957: RET
// export function Count ( array ) ; var i ; begin
40958: LD_INT 0
40960: PPUSH
40961: PPUSH
// result := 0 ;
40962: LD_ADDR_VAR 0 2
40966: PUSH
40967: LD_INT 0
40969: ST_TO_ADDR
// for i in array do
40970: LD_ADDR_VAR 0 3
40974: PUSH
40975: LD_VAR 0 1
40979: PUSH
40980: FOR_IN
40981: IFFALSE 41005
// if i then
40983: LD_VAR 0 3
40987: IFFALSE 41003
// result := result + 1 ;
40989: LD_ADDR_VAR 0 2
40993: PUSH
40994: LD_VAR 0 2
40998: PUSH
40999: LD_INT 1
41001: PLUS
41002: ST_TO_ADDR
41003: GO 40980
41005: POP
41006: POP
// end ;
41007: LD_VAR 0 2
41011: RET
// export function IsEmpty ( building ) ; begin
41012: LD_INT 0
41014: PPUSH
// if not building then
41015: LD_VAR 0 1
41019: NOT
41020: IFFALSE 41024
// exit ;
41022: GO 41067
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41024: LD_ADDR_VAR 0 2
41028: PUSH
41029: LD_VAR 0 1
41033: PUSH
41034: LD_INT 22
41036: PUSH
41037: LD_VAR 0 1
41041: PPUSH
41042: CALL_OW 255
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 58
41053: PUSH
41054: EMPTY
41055: LIST
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PPUSH
41061: CALL_OW 69
41065: IN
41066: ST_TO_ADDR
// end ;
41067: LD_VAR 0 2
41071: RET
// export function IsNotFull ( building ) ; begin
41072: LD_INT 0
41074: PPUSH
// if not building then
41075: LD_VAR 0 1
41079: NOT
41080: IFFALSE 41084
// exit ;
41082: GO 41103
// result := UnitsInside ( building ) < 6 ;
41084: LD_ADDR_VAR 0 2
41088: PUSH
41089: LD_VAR 0 1
41093: PPUSH
41094: CALL_OW 313
41098: PUSH
41099: LD_INT 6
41101: LESS
41102: ST_TO_ADDR
// end ;
41103: LD_VAR 0 2
41107: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41108: LD_INT 0
41110: PPUSH
41111: PPUSH
41112: PPUSH
41113: PPUSH
// tmp := [ ] ;
41114: LD_ADDR_VAR 0 3
41118: PUSH
41119: EMPTY
41120: ST_TO_ADDR
// list := [ ] ;
41121: LD_ADDR_VAR 0 5
41125: PUSH
41126: EMPTY
41127: ST_TO_ADDR
// for i = 16 to 25 do
41128: LD_ADDR_VAR 0 4
41132: PUSH
41133: DOUBLE
41134: LD_INT 16
41136: DEC
41137: ST_TO_ADDR
41138: LD_INT 25
41140: PUSH
41141: FOR_TO
41142: IFFALSE 41215
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41144: LD_ADDR_VAR 0 3
41148: PUSH
41149: LD_VAR 0 3
41153: PUSH
41154: LD_INT 22
41156: PUSH
41157: LD_VAR 0 1
41161: PPUSH
41162: CALL_OW 255
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 91
41173: PUSH
41174: LD_VAR 0 1
41178: PUSH
41179: LD_INT 6
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 30
41189: PUSH
41190: LD_VAR 0 4
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: LIST
41203: PUSH
41204: EMPTY
41205: LIST
41206: PPUSH
41207: CALL_OW 69
41211: ADD
41212: ST_TO_ADDR
41213: GO 41141
41215: POP
41216: POP
// for i = 1 to tmp do
41217: LD_ADDR_VAR 0 4
41221: PUSH
41222: DOUBLE
41223: LD_INT 1
41225: DEC
41226: ST_TO_ADDR
41227: LD_VAR 0 3
41231: PUSH
41232: FOR_TO
41233: IFFALSE 41321
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41235: LD_ADDR_VAR 0 5
41239: PUSH
41240: LD_VAR 0 5
41244: PUSH
41245: LD_VAR 0 3
41249: PUSH
41250: LD_VAR 0 4
41254: ARRAY
41255: PPUSH
41256: CALL_OW 266
41260: PUSH
41261: LD_VAR 0 3
41265: PUSH
41266: LD_VAR 0 4
41270: ARRAY
41271: PPUSH
41272: CALL_OW 250
41276: PUSH
41277: LD_VAR 0 3
41281: PUSH
41282: LD_VAR 0 4
41286: ARRAY
41287: PPUSH
41288: CALL_OW 251
41292: PUSH
41293: LD_VAR 0 3
41297: PUSH
41298: LD_VAR 0 4
41302: ARRAY
41303: PPUSH
41304: CALL_OW 254
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: PUSH
41315: EMPTY
41316: LIST
41317: ADD
41318: ST_TO_ADDR
41319: GO 41232
41321: POP
41322: POP
// result := list ;
41323: LD_ADDR_VAR 0 2
41327: PUSH
41328: LD_VAR 0 5
41332: ST_TO_ADDR
// end ;
41333: LD_VAR 0 2
41337: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41338: LD_INT 0
41340: PPUSH
41341: PPUSH
41342: PPUSH
41343: PPUSH
41344: PPUSH
41345: PPUSH
41346: PPUSH
// if not factory then
41347: LD_VAR 0 1
41351: NOT
41352: IFFALSE 41356
// exit ;
41354: GO 41949
// if control = control_apeman then
41356: LD_VAR 0 4
41360: PUSH
41361: LD_INT 5
41363: EQUAL
41364: IFFALSE 41473
// begin tmp := UnitsInside ( factory ) ;
41366: LD_ADDR_VAR 0 8
41370: PUSH
41371: LD_VAR 0 1
41375: PPUSH
41376: CALL_OW 313
41380: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41381: LD_VAR 0 8
41385: PPUSH
41386: LD_INT 25
41388: PUSH
41389: LD_INT 12
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PPUSH
41396: CALL_OW 72
41400: NOT
41401: IFFALSE 41411
// control := control_manual ;
41403: LD_ADDR_VAR 0 4
41407: PUSH
41408: LD_INT 1
41410: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41411: LD_ADDR_VAR 0 8
41415: PUSH
41416: LD_VAR 0 1
41420: PPUSH
41421: CALL 41108 0 1
41425: ST_TO_ADDR
// if tmp then
41426: LD_VAR 0 8
41430: IFFALSE 41473
// begin for i in tmp do
41432: LD_ADDR_VAR 0 7
41436: PUSH
41437: LD_VAR 0 8
41441: PUSH
41442: FOR_IN
41443: IFFALSE 41471
// if i [ 1 ] = b_ext_radio then
41445: LD_VAR 0 7
41449: PUSH
41450: LD_INT 1
41452: ARRAY
41453: PUSH
41454: LD_INT 22
41456: EQUAL
41457: IFFALSE 41469
// begin control := control_remote ;
41459: LD_ADDR_VAR 0 4
41463: PUSH
41464: LD_INT 2
41466: ST_TO_ADDR
// break ;
41467: GO 41471
// end ;
41469: GO 41442
41471: POP
41472: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41473: LD_VAR 0 1
41477: PPUSH
41478: LD_VAR 0 2
41482: PPUSH
41483: LD_VAR 0 3
41487: PPUSH
41488: LD_VAR 0 4
41492: PPUSH
41493: LD_VAR 0 5
41497: PPUSH
41498: CALL_OW 448
41502: IFFALSE 41537
// begin result := [ chassis , engine , control , weapon ] ;
41504: LD_ADDR_VAR 0 6
41508: PUSH
41509: LD_VAR 0 2
41513: PUSH
41514: LD_VAR 0 3
41518: PUSH
41519: LD_VAR 0 4
41523: PUSH
41524: LD_VAR 0 5
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: ST_TO_ADDR
// exit ;
41535: GO 41949
// end ; _chassis := AvailableChassisList ( factory ) ;
41537: LD_ADDR_VAR 0 9
41541: PUSH
41542: LD_VAR 0 1
41546: PPUSH
41547: CALL_OW 475
41551: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41552: LD_ADDR_VAR 0 11
41556: PUSH
41557: LD_VAR 0 1
41561: PPUSH
41562: CALL_OW 476
41566: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41567: LD_ADDR_VAR 0 12
41571: PUSH
41572: LD_VAR 0 1
41576: PPUSH
41577: CALL_OW 477
41581: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41582: LD_ADDR_VAR 0 10
41586: PUSH
41587: LD_VAR 0 1
41591: PPUSH
41592: CALL_OW 478
41596: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41597: LD_VAR 0 9
41601: NOT
41602: PUSH
41603: LD_VAR 0 11
41607: NOT
41608: OR
41609: PUSH
41610: LD_VAR 0 12
41614: NOT
41615: OR
41616: PUSH
41617: LD_VAR 0 10
41621: NOT
41622: OR
41623: IFFALSE 41658
// begin result := [ chassis , engine , control , weapon ] ;
41625: LD_ADDR_VAR 0 6
41629: PUSH
41630: LD_VAR 0 2
41634: PUSH
41635: LD_VAR 0 3
41639: PUSH
41640: LD_VAR 0 4
41644: PUSH
41645: LD_VAR 0 5
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: ST_TO_ADDR
// exit ;
41656: GO 41949
// end ; if not chassis in _chassis then
41658: LD_VAR 0 2
41662: PUSH
41663: LD_VAR 0 9
41667: IN
41668: NOT
41669: IFFALSE 41695
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41671: LD_ADDR_VAR 0 2
41675: PUSH
41676: LD_VAR 0 9
41680: PUSH
41681: LD_INT 1
41683: PPUSH
41684: LD_VAR 0 9
41688: PPUSH
41689: CALL_OW 12
41693: ARRAY
41694: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41695: LD_VAR 0 2
41699: PPUSH
41700: LD_VAR 0 3
41704: PPUSH
41705: CALL 41954 0 2
41709: NOT
41710: IFFALSE 41769
// repeat engine := _engine [ 1 ] ;
41712: LD_ADDR_VAR 0 3
41716: PUSH
41717: LD_VAR 0 11
41721: PUSH
41722: LD_INT 1
41724: ARRAY
41725: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41726: LD_ADDR_VAR 0 11
41730: PUSH
41731: LD_VAR 0 11
41735: PPUSH
41736: LD_INT 1
41738: PPUSH
41739: CALL_OW 3
41743: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41744: LD_VAR 0 2
41748: PPUSH
41749: LD_VAR 0 3
41753: PPUSH
41754: CALL 41954 0 2
41758: PUSH
41759: LD_VAR 0 11
41763: PUSH
41764: EMPTY
41765: EQUAL
41766: OR
41767: IFFALSE 41712
// if not control in _control then
41769: LD_VAR 0 4
41773: PUSH
41774: LD_VAR 0 12
41778: IN
41779: NOT
41780: IFFALSE 41806
// control := _control [ rand ( 1 , _control ) ] ;
41782: LD_ADDR_VAR 0 4
41786: PUSH
41787: LD_VAR 0 12
41791: PUSH
41792: LD_INT 1
41794: PPUSH
41795: LD_VAR 0 12
41799: PPUSH
41800: CALL_OW 12
41804: ARRAY
41805: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41806: LD_VAR 0 2
41810: PPUSH
41811: LD_VAR 0 5
41815: PPUSH
41816: CALL 42174 0 2
41820: NOT
41821: IFFALSE 41880
// repeat weapon := _weapon [ 1 ] ;
41823: LD_ADDR_VAR 0 5
41827: PUSH
41828: LD_VAR 0 10
41832: PUSH
41833: LD_INT 1
41835: ARRAY
41836: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41837: LD_ADDR_VAR 0 10
41841: PUSH
41842: LD_VAR 0 10
41846: PPUSH
41847: LD_INT 1
41849: PPUSH
41850: CALL_OW 3
41854: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41855: LD_VAR 0 2
41859: PPUSH
41860: LD_VAR 0 5
41864: PPUSH
41865: CALL 42174 0 2
41869: PUSH
41870: LD_VAR 0 10
41874: PUSH
41875: EMPTY
41876: EQUAL
41877: OR
41878: IFFALSE 41823
// result := [ ] ;
41880: LD_ADDR_VAR 0 6
41884: PUSH
41885: EMPTY
41886: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41887: LD_VAR 0 1
41891: PPUSH
41892: LD_VAR 0 2
41896: PPUSH
41897: LD_VAR 0 3
41901: PPUSH
41902: LD_VAR 0 4
41906: PPUSH
41907: LD_VAR 0 5
41911: PPUSH
41912: CALL_OW 448
41916: IFFALSE 41949
// result := [ chassis , engine , control , weapon ] ;
41918: LD_ADDR_VAR 0 6
41922: PUSH
41923: LD_VAR 0 2
41927: PUSH
41928: LD_VAR 0 3
41932: PUSH
41933: LD_VAR 0 4
41937: PUSH
41938: LD_VAR 0 5
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: ST_TO_ADDR
// end ;
41949: LD_VAR 0 6
41953: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41954: LD_INT 0
41956: PPUSH
// if not chassis or not engine then
41957: LD_VAR 0 1
41961: NOT
41962: PUSH
41963: LD_VAR 0 2
41967: NOT
41968: OR
41969: IFFALSE 41973
// exit ;
41971: GO 42169
// case engine of engine_solar :
41973: LD_VAR 0 2
41977: PUSH
41978: LD_INT 2
41980: DOUBLE
41981: EQUAL
41982: IFTRUE 41986
41984: GO 42024
41986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41987: LD_ADDR_VAR 0 3
41991: PUSH
41992: LD_INT 11
41994: PUSH
41995: LD_INT 12
41997: PUSH
41998: LD_INT 13
42000: PUSH
42001: LD_INT 14
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: LD_INT 3
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: ST_TO_ADDR
42022: GO 42153
42024: LD_INT 1
42026: DOUBLE
42027: EQUAL
42028: IFTRUE 42032
42030: GO 42094
42032: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42033: LD_ADDR_VAR 0 3
42037: PUSH
42038: LD_INT 11
42040: PUSH
42041: LD_INT 12
42043: PUSH
42044: LD_INT 13
42046: PUSH
42047: LD_INT 14
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: LD_INT 2
42055: PUSH
42056: LD_INT 3
42058: PUSH
42059: LD_INT 4
42061: PUSH
42062: LD_INT 5
42064: PUSH
42065: LD_INT 21
42067: PUSH
42068: LD_INT 23
42070: PUSH
42071: LD_INT 22
42073: PUSH
42074: LD_INT 24
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: ST_TO_ADDR
42092: GO 42153
42094: LD_INT 3
42096: DOUBLE
42097: EQUAL
42098: IFTRUE 42102
42100: GO 42152
42102: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42103: LD_ADDR_VAR 0 3
42107: PUSH
42108: LD_INT 13
42110: PUSH
42111: LD_INT 14
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: LD_INT 3
42119: PUSH
42120: LD_INT 4
42122: PUSH
42123: LD_INT 5
42125: PUSH
42126: LD_INT 21
42128: PUSH
42129: LD_INT 22
42131: PUSH
42132: LD_INT 23
42134: PUSH
42135: LD_INT 24
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: ST_TO_ADDR
42150: GO 42153
42152: POP
// result := ( chassis in result ) ;
42153: LD_ADDR_VAR 0 3
42157: PUSH
42158: LD_VAR 0 1
42162: PUSH
42163: LD_VAR 0 3
42167: IN
42168: ST_TO_ADDR
// end ;
42169: LD_VAR 0 3
42173: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42174: LD_INT 0
42176: PPUSH
// if not chassis or not weapon then
42177: LD_VAR 0 1
42181: NOT
42182: PUSH
42183: LD_VAR 0 2
42187: NOT
42188: OR
42189: IFFALSE 42193
// exit ;
42191: GO 43255
// case weapon of us_machine_gun :
42193: LD_VAR 0 2
42197: PUSH
42198: LD_INT 2
42200: DOUBLE
42201: EQUAL
42202: IFTRUE 42206
42204: GO 42236
42206: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42207: LD_ADDR_VAR 0 3
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: LD_INT 3
42220: PUSH
42221: LD_INT 4
42223: PUSH
42224: LD_INT 5
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: ST_TO_ADDR
42234: GO 43239
42236: LD_INT 3
42238: DOUBLE
42239: EQUAL
42240: IFTRUE 42244
42242: GO 42274
42244: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42245: LD_ADDR_VAR 0 3
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 2
42255: PUSH
42256: LD_INT 3
42258: PUSH
42259: LD_INT 4
42261: PUSH
42262: LD_INT 5
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: ST_TO_ADDR
42272: GO 43239
42274: LD_INT 11
42276: DOUBLE
42277: EQUAL
42278: IFTRUE 42282
42280: GO 42312
42282: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42283: LD_ADDR_VAR 0 3
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: LD_INT 2
42293: PUSH
42294: LD_INT 3
42296: PUSH
42297: LD_INT 4
42299: PUSH
42300: LD_INT 5
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: ST_TO_ADDR
42310: GO 43239
42312: LD_INT 4
42314: DOUBLE
42315: EQUAL
42316: IFTRUE 42320
42318: GO 42346
42320: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42321: LD_ADDR_VAR 0 3
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: LD_INT 3
42331: PUSH
42332: LD_INT 4
42334: PUSH
42335: LD_INT 5
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: ST_TO_ADDR
42344: GO 43239
42346: LD_INT 5
42348: DOUBLE
42349: EQUAL
42350: IFTRUE 42354
42352: GO 42380
42354: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42355: LD_ADDR_VAR 0 3
42359: PUSH
42360: LD_INT 2
42362: PUSH
42363: LD_INT 3
42365: PUSH
42366: LD_INT 4
42368: PUSH
42369: LD_INT 5
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: ST_TO_ADDR
42378: GO 43239
42380: LD_INT 9
42382: DOUBLE
42383: EQUAL
42384: IFTRUE 42388
42386: GO 42414
42388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42389: LD_ADDR_VAR 0 3
42393: PUSH
42394: LD_INT 2
42396: PUSH
42397: LD_INT 3
42399: PUSH
42400: LD_INT 4
42402: PUSH
42403: LD_INT 5
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: ST_TO_ADDR
42412: GO 43239
42414: LD_INT 7
42416: DOUBLE
42417: EQUAL
42418: IFTRUE 42422
42420: GO 42448
42422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42423: LD_ADDR_VAR 0 3
42427: PUSH
42428: LD_INT 2
42430: PUSH
42431: LD_INT 3
42433: PUSH
42434: LD_INT 4
42436: PUSH
42437: LD_INT 5
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: ST_TO_ADDR
42446: GO 43239
42448: LD_INT 12
42450: DOUBLE
42451: EQUAL
42452: IFTRUE 42456
42454: GO 42482
42456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42457: LD_ADDR_VAR 0 3
42461: PUSH
42462: LD_INT 2
42464: PUSH
42465: LD_INT 3
42467: PUSH
42468: LD_INT 4
42470: PUSH
42471: LD_INT 5
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: ST_TO_ADDR
42480: GO 43239
42482: LD_INT 13
42484: DOUBLE
42485: EQUAL
42486: IFTRUE 42490
42488: GO 42516
42490: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42491: LD_ADDR_VAR 0 3
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: LD_INT 3
42501: PUSH
42502: LD_INT 4
42504: PUSH
42505: LD_INT 5
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: ST_TO_ADDR
42514: GO 43239
42516: LD_INT 14
42518: DOUBLE
42519: EQUAL
42520: IFTRUE 42524
42522: GO 42542
42524: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42525: LD_ADDR_VAR 0 3
42529: PUSH
42530: LD_INT 4
42532: PUSH
42533: LD_INT 5
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: ST_TO_ADDR
42540: GO 43239
42542: LD_INT 6
42544: DOUBLE
42545: EQUAL
42546: IFTRUE 42550
42548: GO 42568
42550: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42551: LD_ADDR_VAR 0 3
42555: PUSH
42556: LD_INT 4
42558: PUSH
42559: LD_INT 5
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: ST_TO_ADDR
42566: GO 43239
42568: LD_INT 10
42570: DOUBLE
42571: EQUAL
42572: IFTRUE 42576
42574: GO 42594
42576: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42577: LD_ADDR_VAR 0 3
42581: PUSH
42582: LD_INT 4
42584: PUSH
42585: LD_INT 5
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: ST_TO_ADDR
42592: GO 43239
42594: LD_INT 22
42596: DOUBLE
42597: EQUAL
42598: IFTRUE 42602
42600: GO 42628
42602: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42603: LD_ADDR_VAR 0 3
42607: PUSH
42608: LD_INT 11
42610: PUSH
42611: LD_INT 12
42613: PUSH
42614: LD_INT 13
42616: PUSH
42617: LD_INT 14
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: ST_TO_ADDR
42626: GO 43239
42628: LD_INT 23
42630: DOUBLE
42631: EQUAL
42632: IFTRUE 42636
42634: GO 42662
42636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42637: LD_ADDR_VAR 0 3
42641: PUSH
42642: LD_INT 11
42644: PUSH
42645: LD_INT 12
42647: PUSH
42648: LD_INT 13
42650: PUSH
42651: LD_INT 14
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: ST_TO_ADDR
42660: GO 43239
42662: LD_INT 24
42664: DOUBLE
42665: EQUAL
42666: IFTRUE 42670
42668: GO 42696
42670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42671: LD_ADDR_VAR 0 3
42675: PUSH
42676: LD_INT 11
42678: PUSH
42679: LD_INT 12
42681: PUSH
42682: LD_INT 13
42684: PUSH
42685: LD_INT 14
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: ST_TO_ADDR
42694: GO 43239
42696: LD_INT 30
42698: DOUBLE
42699: EQUAL
42700: IFTRUE 42704
42702: GO 42730
42704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42705: LD_ADDR_VAR 0 3
42709: PUSH
42710: LD_INT 11
42712: PUSH
42713: LD_INT 12
42715: PUSH
42716: LD_INT 13
42718: PUSH
42719: LD_INT 14
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: ST_TO_ADDR
42728: GO 43239
42730: LD_INT 25
42732: DOUBLE
42733: EQUAL
42734: IFTRUE 42738
42736: GO 42756
42738: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42739: LD_ADDR_VAR 0 3
42743: PUSH
42744: LD_INT 13
42746: PUSH
42747: LD_INT 14
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: ST_TO_ADDR
42754: GO 43239
42756: LD_INT 27
42758: DOUBLE
42759: EQUAL
42760: IFTRUE 42764
42762: GO 42782
42764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42765: LD_ADDR_VAR 0 3
42769: PUSH
42770: LD_INT 13
42772: PUSH
42773: LD_INT 14
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: ST_TO_ADDR
42780: GO 43239
42782: LD_EXP 55
42786: DOUBLE
42787: EQUAL
42788: IFTRUE 42792
42790: GO 42818
42792: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42793: LD_ADDR_VAR 0 3
42797: PUSH
42798: LD_INT 11
42800: PUSH
42801: LD_INT 12
42803: PUSH
42804: LD_INT 13
42806: PUSH
42807: LD_INT 14
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: ST_TO_ADDR
42816: GO 43239
42818: LD_INT 28
42820: DOUBLE
42821: EQUAL
42822: IFTRUE 42826
42824: GO 42844
42826: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42827: LD_ADDR_VAR 0 3
42831: PUSH
42832: LD_INT 13
42834: PUSH
42835: LD_INT 14
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: ST_TO_ADDR
42842: GO 43239
42844: LD_INT 29
42846: DOUBLE
42847: EQUAL
42848: IFTRUE 42852
42850: GO 42870
42852: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42853: LD_ADDR_VAR 0 3
42857: PUSH
42858: LD_INT 13
42860: PUSH
42861: LD_INT 14
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: ST_TO_ADDR
42868: GO 43239
42870: LD_INT 31
42872: DOUBLE
42873: EQUAL
42874: IFTRUE 42878
42876: GO 42896
42878: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42879: LD_ADDR_VAR 0 3
42883: PUSH
42884: LD_INT 13
42886: PUSH
42887: LD_INT 14
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: ST_TO_ADDR
42894: GO 43239
42896: LD_INT 26
42898: DOUBLE
42899: EQUAL
42900: IFTRUE 42904
42902: GO 42922
42904: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42905: LD_ADDR_VAR 0 3
42909: PUSH
42910: LD_INT 13
42912: PUSH
42913: LD_INT 14
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: ST_TO_ADDR
42920: GO 43239
42922: LD_INT 42
42924: DOUBLE
42925: EQUAL
42926: IFTRUE 42930
42928: GO 42956
42930: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42931: LD_ADDR_VAR 0 3
42935: PUSH
42936: LD_INT 21
42938: PUSH
42939: LD_INT 22
42941: PUSH
42942: LD_INT 23
42944: PUSH
42945: LD_INT 24
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: ST_TO_ADDR
42954: GO 43239
42956: LD_INT 43
42958: DOUBLE
42959: EQUAL
42960: IFTRUE 42964
42962: GO 42990
42964: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42965: LD_ADDR_VAR 0 3
42969: PUSH
42970: LD_INT 21
42972: PUSH
42973: LD_INT 22
42975: PUSH
42976: LD_INT 23
42978: PUSH
42979: LD_INT 24
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: ST_TO_ADDR
42988: GO 43239
42990: LD_INT 44
42992: DOUBLE
42993: EQUAL
42994: IFTRUE 42998
42996: GO 43024
42998: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42999: LD_ADDR_VAR 0 3
43003: PUSH
43004: LD_INT 21
43006: PUSH
43007: LD_INT 22
43009: PUSH
43010: LD_INT 23
43012: PUSH
43013: LD_INT 24
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: ST_TO_ADDR
43022: GO 43239
43024: LD_INT 45
43026: DOUBLE
43027: EQUAL
43028: IFTRUE 43032
43030: GO 43058
43032: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43033: LD_ADDR_VAR 0 3
43037: PUSH
43038: LD_INT 21
43040: PUSH
43041: LD_INT 22
43043: PUSH
43044: LD_INT 23
43046: PUSH
43047: LD_INT 24
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: ST_TO_ADDR
43056: GO 43239
43058: LD_INT 49
43060: DOUBLE
43061: EQUAL
43062: IFTRUE 43066
43064: GO 43092
43066: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43067: LD_ADDR_VAR 0 3
43071: PUSH
43072: LD_INT 21
43074: PUSH
43075: LD_INT 22
43077: PUSH
43078: LD_INT 23
43080: PUSH
43081: LD_INT 24
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: ST_TO_ADDR
43090: GO 43239
43092: LD_INT 51
43094: DOUBLE
43095: EQUAL
43096: IFTRUE 43100
43098: GO 43126
43100: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43101: LD_ADDR_VAR 0 3
43105: PUSH
43106: LD_INT 21
43108: PUSH
43109: LD_INT 22
43111: PUSH
43112: LD_INT 23
43114: PUSH
43115: LD_INT 24
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: ST_TO_ADDR
43124: GO 43239
43126: LD_INT 52
43128: DOUBLE
43129: EQUAL
43130: IFTRUE 43134
43132: GO 43160
43134: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43135: LD_ADDR_VAR 0 3
43139: PUSH
43140: LD_INT 21
43142: PUSH
43143: LD_INT 22
43145: PUSH
43146: LD_INT 23
43148: PUSH
43149: LD_INT 24
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: ST_TO_ADDR
43158: GO 43239
43160: LD_INT 53
43162: DOUBLE
43163: EQUAL
43164: IFTRUE 43168
43166: GO 43186
43168: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43169: LD_ADDR_VAR 0 3
43173: PUSH
43174: LD_INT 23
43176: PUSH
43177: LD_INT 24
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: ST_TO_ADDR
43184: GO 43239
43186: LD_INT 46
43188: DOUBLE
43189: EQUAL
43190: IFTRUE 43194
43192: GO 43212
43194: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43195: LD_ADDR_VAR 0 3
43199: PUSH
43200: LD_INT 23
43202: PUSH
43203: LD_INT 24
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: ST_TO_ADDR
43210: GO 43239
43212: LD_INT 47
43214: DOUBLE
43215: EQUAL
43216: IFTRUE 43220
43218: GO 43238
43220: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43221: LD_ADDR_VAR 0 3
43225: PUSH
43226: LD_INT 23
43228: PUSH
43229: LD_INT 24
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: ST_TO_ADDR
43236: GO 43239
43238: POP
// result := ( chassis in result ) ;
43239: LD_ADDR_VAR 0 3
43243: PUSH
43244: LD_VAR 0 1
43248: PUSH
43249: LD_VAR 0 3
43253: IN
43254: ST_TO_ADDR
// end ;
43255: LD_VAR 0 3
43259: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43260: LD_INT 0
43262: PPUSH
43263: PPUSH
43264: PPUSH
43265: PPUSH
43266: PPUSH
43267: PPUSH
43268: PPUSH
// result := array ;
43269: LD_ADDR_VAR 0 5
43273: PUSH
43274: LD_VAR 0 1
43278: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43279: LD_VAR 0 1
43283: NOT
43284: PUSH
43285: LD_VAR 0 2
43289: NOT
43290: OR
43291: PUSH
43292: LD_VAR 0 3
43296: NOT
43297: OR
43298: PUSH
43299: LD_VAR 0 2
43303: PUSH
43304: LD_VAR 0 1
43308: GREATER
43309: OR
43310: PUSH
43311: LD_VAR 0 3
43315: PUSH
43316: LD_VAR 0 1
43320: GREATER
43321: OR
43322: IFFALSE 43326
// exit ;
43324: GO 43622
// if direction then
43326: LD_VAR 0 4
43330: IFFALSE 43394
// begin d := 1 ;
43332: LD_ADDR_VAR 0 9
43336: PUSH
43337: LD_INT 1
43339: ST_TO_ADDR
// if i_from > i_to then
43340: LD_VAR 0 2
43344: PUSH
43345: LD_VAR 0 3
43349: GREATER
43350: IFFALSE 43376
// length := ( array - i_from ) + i_to else
43352: LD_ADDR_VAR 0 11
43356: PUSH
43357: LD_VAR 0 1
43361: PUSH
43362: LD_VAR 0 2
43366: MINUS
43367: PUSH
43368: LD_VAR 0 3
43372: PLUS
43373: ST_TO_ADDR
43374: GO 43392
// length := i_to - i_from ;
43376: LD_ADDR_VAR 0 11
43380: PUSH
43381: LD_VAR 0 3
43385: PUSH
43386: LD_VAR 0 2
43390: MINUS
43391: ST_TO_ADDR
// end else
43392: GO 43455
// begin d := - 1 ;
43394: LD_ADDR_VAR 0 9
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: ST_TO_ADDR
// if i_from > i_to then
43403: LD_VAR 0 2
43407: PUSH
43408: LD_VAR 0 3
43412: GREATER
43413: IFFALSE 43433
// length := i_from - i_to else
43415: LD_ADDR_VAR 0 11
43419: PUSH
43420: LD_VAR 0 2
43424: PUSH
43425: LD_VAR 0 3
43429: MINUS
43430: ST_TO_ADDR
43431: GO 43455
// length := ( array - i_to ) + i_from ;
43433: LD_ADDR_VAR 0 11
43437: PUSH
43438: LD_VAR 0 1
43442: PUSH
43443: LD_VAR 0 3
43447: MINUS
43448: PUSH
43449: LD_VAR 0 2
43453: PLUS
43454: ST_TO_ADDR
// end ; if not length then
43455: LD_VAR 0 11
43459: NOT
43460: IFFALSE 43464
// exit ;
43462: GO 43622
// tmp := array ;
43464: LD_ADDR_VAR 0 10
43468: PUSH
43469: LD_VAR 0 1
43473: ST_TO_ADDR
// for i = 1 to length do
43474: LD_ADDR_VAR 0 6
43478: PUSH
43479: DOUBLE
43480: LD_INT 1
43482: DEC
43483: ST_TO_ADDR
43484: LD_VAR 0 11
43488: PUSH
43489: FOR_TO
43490: IFFALSE 43610
// begin for j = 1 to array do
43492: LD_ADDR_VAR 0 7
43496: PUSH
43497: DOUBLE
43498: LD_INT 1
43500: DEC
43501: ST_TO_ADDR
43502: LD_VAR 0 1
43506: PUSH
43507: FOR_TO
43508: IFFALSE 43596
// begin k := j + d ;
43510: LD_ADDR_VAR 0 8
43514: PUSH
43515: LD_VAR 0 7
43519: PUSH
43520: LD_VAR 0 9
43524: PLUS
43525: ST_TO_ADDR
// if k > array then
43526: LD_VAR 0 8
43530: PUSH
43531: LD_VAR 0 1
43535: GREATER
43536: IFFALSE 43546
// k := 1 ;
43538: LD_ADDR_VAR 0 8
43542: PUSH
43543: LD_INT 1
43545: ST_TO_ADDR
// if not k then
43546: LD_VAR 0 8
43550: NOT
43551: IFFALSE 43563
// k := array ;
43553: LD_ADDR_VAR 0 8
43557: PUSH
43558: LD_VAR 0 1
43562: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43563: LD_ADDR_VAR 0 10
43567: PUSH
43568: LD_VAR 0 10
43572: PPUSH
43573: LD_VAR 0 8
43577: PPUSH
43578: LD_VAR 0 1
43582: PUSH
43583: LD_VAR 0 7
43587: ARRAY
43588: PPUSH
43589: CALL_OW 1
43593: ST_TO_ADDR
// end ;
43594: GO 43507
43596: POP
43597: POP
// array := tmp ;
43598: LD_ADDR_VAR 0 1
43602: PUSH
43603: LD_VAR 0 10
43607: ST_TO_ADDR
// end ;
43608: GO 43489
43610: POP
43611: POP
// result := array ;
43612: LD_ADDR_VAR 0 5
43616: PUSH
43617: LD_VAR 0 1
43621: ST_TO_ADDR
// end ;
43622: LD_VAR 0 5
43626: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43627: LD_INT 0
43629: PPUSH
43630: PPUSH
// result := 0 ;
43631: LD_ADDR_VAR 0 3
43635: PUSH
43636: LD_INT 0
43638: ST_TO_ADDR
// if not array or not value in array then
43639: LD_VAR 0 1
43643: NOT
43644: PUSH
43645: LD_VAR 0 2
43649: PUSH
43650: LD_VAR 0 1
43654: IN
43655: NOT
43656: OR
43657: IFFALSE 43661
// exit ;
43659: GO 43715
// for i = 1 to array do
43661: LD_ADDR_VAR 0 4
43665: PUSH
43666: DOUBLE
43667: LD_INT 1
43669: DEC
43670: ST_TO_ADDR
43671: LD_VAR 0 1
43675: PUSH
43676: FOR_TO
43677: IFFALSE 43713
// if value = array [ i ] then
43679: LD_VAR 0 2
43683: PUSH
43684: LD_VAR 0 1
43688: PUSH
43689: LD_VAR 0 4
43693: ARRAY
43694: EQUAL
43695: IFFALSE 43711
// begin result := i ;
43697: LD_ADDR_VAR 0 3
43701: PUSH
43702: LD_VAR 0 4
43706: ST_TO_ADDR
// exit ;
43707: POP
43708: POP
43709: GO 43715
// end ;
43711: GO 43676
43713: POP
43714: POP
// end ;
43715: LD_VAR 0 3
43719: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43720: LD_INT 0
43722: PPUSH
// vc_chassis := chassis ;
43723: LD_ADDR_OWVAR 37
43727: PUSH
43728: LD_VAR 0 1
43732: ST_TO_ADDR
// vc_engine := engine ;
43733: LD_ADDR_OWVAR 39
43737: PUSH
43738: LD_VAR 0 2
43742: ST_TO_ADDR
// vc_control := control ;
43743: LD_ADDR_OWVAR 38
43747: PUSH
43748: LD_VAR 0 3
43752: ST_TO_ADDR
// vc_weapon := weapon ;
43753: LD_ADDR_OWVAR 40
43757: PUSH
43758: LD_VAR 0 4
43762: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43763: LD_ADDR_OWVAR 41
43767: PUSH
43768: LD_VAR 0 5
43772: ST_TO_ADDR
// end ;
43773: LD_VAR 0 6
43777: RET
// export function WantPlant ( unit ) ; var task ; begin
43778: LD_INT 0
43780: PPUSH
43781: PPUSH
// result := false ;
43782: LD_ADDR_VAR 0 2
43786: PUSH
43787: LD_INT 0
43789: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43790: LD_ADDR_VAR 0 3
43794: PUSH
43795: LD_VAR 0 1
43799: PPUSH
43800: CALL_OW 437
43804: ST_TO_ADDR
// if task then
43805: LD_VAR 0 3
43809: IFFALSE 43837
// if task [ 1 ] [ 1 ] = p then
43811: LD_VAR 0 3
43815: PUSH
43816: LD_INT 1
43818: ARRAY
43819: PUSH
43820: LD_INT 1
43822: ARRAY
43823: PUSH
43824: LD_STRING p
43826: EQUAL
43827: IFFALSE 43837
// result := true ;
43829: LD_ADDR_VAR 0 2
43833: PUSH
43834: LD_INT 1
43836: ST_TO_ADDR
// end ;
43837: LD_VAR 0 2
43841: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43842: LD_INT 0
43844: PPUSH
43845: PPUSH
43846: PPUSH
43847: PPUSH
// if pos < 1 then
43848: LD_VAR 0 2
43852: PUSH
43853: LD_INT 1
43855: LESS
43856: IFFALSE 43860
// exit ;
43858: GO 44163
// if pos = 1 then
43860: LD_VAR 0 2
43864: PUSH
43865: LD_INT 1
43867: EQUAL
43868: IFFALSE 43901
// result := Replace ( arr , pos [ 1 ] , value ) else
43870: LD_ADDR_VAR 0 4
43874: PUSH
43875: LD_VAR 0 1
43879: PPUSH
43880: LD_VAR 0 2
43884: PUSH
43885: LD_INT 1
43887: ARRAY
43888: PPUSH
43889: LD_VAR 0 3
43893: PPUSH
43894: CALL_OW 1
43898: ST_TO_ADDR
43899: GO 44163
// begin tmp := arr ;
43901: LD_ADDR_VAR 0 6
43905: PUSH
43906: LD_VAR 0 1
43910: ST_TO_ADDR
// s_arr := [ tmp ] ;
43911: LD_ADDR_VAR 0 7
43915: PUSH
43916: LD_VAR 0 6
43920: PUSH
43921: EMPTY
43922: LIST
43923: ST_TO_ADDR
// for i = 1 to pos - 1 do
43924: LD_ADDR_VAR 0 5
43928: PUSH
43929: DOUBLE
43930: LD_INT 1
43932: DEC
43933: ST_TO_ADDR
43934: LD_VAR 0 2
43938: PUSH
43939: LD_INT 1
43941: MINUS
43942: PUSH
43943: FOR_TO
43944: IFFALSE 43989
// begin tmp := tmp [ pos [ i ] ] ;
43946: LD_ADDR_VAR 0 6
43950: PUSH
43951: LD_VAR 0 6
43955: PUSH
43956: LD_VAR 0 2
43960: PUSH
43961: LD_VAR 0 5
43965: ARRAY
43966: ARRAY
43967: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43968: LD_ADDR_VAR 0 7
43972: PUSH
43973: LD_VAR 0 7
43977: PUSH
43978: LD_VAR 0 6
43982: PUSH
43983: EMPTY
43984: LIST
43985: ADD
43986: ST_TO_ADDR
// end ;
43987: GO 43943
43989: POP
43990: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43991: LD_ADDR_VAR 0 6
43995: PUSH
43996: LD_VAR 0 6
44000: PPUSH
44001: LD_VAR 0 2
44005: PUSH
44006: LD_VAR 0 2
44010: ARRAY
44011: PPUSH
44012: LD_VAR 0 3
44016: PPUSH
44017: CALL_OW 1
44021: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44022: LD_ADDR_VAR 0 7
44026: PUSH
44027: LD_VAR 0 7
44031: PPUSH
44032: LD_VAR 0 7
44036: PPUSH
44037: LD_VAR 0 6
44041: PPUSH
44042: CALL_OW 1
44046: ST_TO_ADDR
// for i = s_arr downto 2 do
44047: LD_ADDR_VAR 0 5
44051: PUSH
44052: DOUBLE
44053: LD_VAR 0 7
44057: INC
44058: ST_TO_ADDR
44059: LD_INT 2
44061: PUSH
44062: FOR_DOWNTO
44063: IFFALSE 44147
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44065: LD_ADDR_VAR 0 6
44069: PUSH
44070: LD_VAR 0 7
44074: PUSH
44075: LD_VAR 0 5
44079: PUSH
44080: LD_INT 1
44082: MINUS
44083: ARRAY
44084: PPUSH
44085: LD_VAR 0 2
44089: PUSH
44090: LD_VAR 0 5
44094: PUSH
44095: LD_INT 1
44097: MINUS
44098: ARRAY
44099: PPUSH
44100: LD_VAR 0 7
44104: PUSH
44105: LD_VAR 0 5
44109: ARRAY
44110: PPUSH
44111: CALL_OW 1
44115: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44116: LD_ADDR_VAR 0 7
44120: PUSH
44121: LD_VAR 0 7
44125: PPUSH
44126: LD_VAR 0 5
44130: PUSH
44131: LD_INT 1
44133: MINUS
44134: PPUSH
44135: LD_VAR 0 6
44139: PPUSH
44140: CALL_OW 1
44144: ST_TO_ADDR
// end ;
44145: GO 44062
44147: POP
44148: POP
// result := s_arr [ 1 ] ;
44149: LD_ADDR_VAR 0 4
44153: PUSH
44154: LD_VAR 0 7
44158: PUSH
44159: LD_INT 1
44161: ARRAY
44162: ST_TO_ADDR
// end ; end ;
44163: LD_VAR 0 4
44167: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44168: LD_INT 0
44170: PPUSH
44171: PPUSH
// if not list then
44172: LD_VAR 0 1
44176: NOT
44177: IFFALSE 44181
// exit ;
44179: GO 44272
// i := list [ pos1 ] ;
44181: LD_ADDR_VAR 0 5
44185: PUSH
44186: LD_VAR 0 1
44190: PUSH
44191: LD_VAR 0 2
44195: ARRAY
44196: ST_TO_ADDR
// if not i then
44197: LD_VAR 0 5
44201: NOT
44202: IFFALSE 44206
// exit ;
44204: GO 44272
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44206: LD_ADDR_VAR 0 1
44210: PUSH
44211: LD_VAR 0 1
44215: PPUSH
44216: LD_VAR 0 2
44220: PPUSH
44221: LD_VAR 0 1
44225: PUSH
44226: LD_VAR 0 3
44230: ARRAY
44231: PPUSH
44232: CALL_OW 1
44236: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44237: LD_ADDR_VAR 0 1
44241: PUSH
44242: LD_VAR 0 1
44246: PPUSH
44247: LD_VAR 0 3
44251: PPUSH
44252: LD_VAR 0 5
44256: PPUSH
44257: CALL_OW 1
44261: ST_TO_ADDR
// result := list ;
44262: LD_ADDR_VAR 0 4
44266: PUSH
44267: LD_VAR 0 1
44271: ST_TO_ADDR
// end ;
44272: LD_VAR 0 4
44276: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44277: LD_INT 0
44279: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44280: LD_ADDR_VAR 0 5
44284: PUSH
44285: LD_VAR 0 1
44289: PPUSH
44290: CALL_OW 250
44294: PPUSH
44295: LD_VAR 0 1
44299: PPUSH
44300: CALL_OW 251
44304: PPUSH
44305: LD_VAR 0 2
44309: PPUSH
44310: LD_VAR 0 3
44314: PPUSH
44315: LD_VAR 0 4
44319: PPUSH
44320: CALL 44330 0 5
44324: ST_TO_ADDR
// end ;
44325: LD_VAR 0 5
44329: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44330: LD_INT 0
44332: PPUSH
44333: PPUSH
44334: PPUSH
44335: PPUSH
// if not list then
44336: LD_VAR 0 3
44340: NOT
44341: IFFALSE 44345
// exit ;
44343: GO 44733
// result := [ ] ;
44345: LD_ADDR_VAR 0 6
44349: PUSH
44350: EMPTY
44351: ST_TO_ADDR
// for i in list do
44352: LD_ADDR_VAR 0 7
44356: PUSH
44357: LD_VAR 0 3
44361: PUSH
44362: FOR_IN
44363: IFFALSE 44565
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44365: LD_ADDR_VAR 0 9
44369: PUSH
44370: LD_VAR 0 7
44374: PPUSH
44375: LD_VAR 0 1
44379: PPUSH
44380: LD_VAR 0 2
44384: PPUSH
44385: CALL_OW 297
44389: ST_TO_ADDR
// if not result then
44390: LD_VAR 0 6
44394: NOT
44395: IFFALSE 44421
// result := [ [ i , tmp ] ] else
44397: LD_ADDR_VAR 0 6
44401: PUSH
44402: LD_VAR 0 7
44406: PUSH
44407: LD_VAR 0 9
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: EMPTY
44417: LIST
44418: ST_TO_ADDR
44419: GO 44563
// begin if result [ result ] [ 2 ] < tmp then
44421: LD_VAR 0 6
44425: PUSH
44426: LD_VAR 0 6
44430: ARRAY
44431: PUSH
44432: LD_INT 2
44434: ARRAY
44435: PUSH
44436: LD_VAR 0 9
44440: LESS
44441: IFFALSE 44483
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44443: LD_ADDR_VAR 0 6
44447: PUSH
44448: LD_VAR 0 6
44452: PPUSH
44453: LD_VAR 0 6
44457: PUSH
44458: LD_INT 1
44460: PLUS
44461: PPUSH
44462: LD_VAR 0 7
44466: PUSH
44467: LD_VAR 0 9
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PPUSH
44476: CALL_OW 2
44480: ST_TO_ADDR
44481: GO 44563
// for j = 1 to result do
44483: LD_ADDR_VAR 0 8
44487: PUSH
44488: DOUBLE
44489: LD_INT 1
44491: DEC
44492: ST_TO_ADDR
44493: LD_VAR 0 6
44497: PUSH
44498: FOR_TO
44499: IFFALSE 44561
// begin if tmp < result [ j ] [ 2 ] then
44501: LD_VAR 0 9
44505: PUSH
44506: LD_VAR 0 6
44510: PUSH
44511: LD_VAR 0 8
44515: ARRAY
44516: PUSH
44517: LD_INT 2
44519: ARRAY
44520: LESS
44521: IFFALSE 44559
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44523: LD_ADDR_VAR 0 6
44527: PUSH
44528: LD_VAR 0 6
44532: PPUSH
44533: LD_VAR 0 8
44537: PPUSH
44538: LD_VAR 0 7
44542: PUSH
44543: LD_VAR 0 9
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PPUSH
44552: CALL_OW 2
44556: ST_TO_ADDR
// break ;
44557: GO 44561
// end ; end ;
44559: GO 44498
44561: POP
44562: POP
// end ; end ;
44563: GO 44362
44565: POP
44566: POP
// if result and not asc then
44567: LD_VAR 0 6
44571: PUSH
44572: LD_VAR 0 4
44576: NOT
44577: AND
44578: IFFALSE 44653
// begin tmp := result ;
44580: LD_ADDR_VAR 0 9
44584: PUSH
44585: LD_VAR 0 6
44589: ST_TO_ADDR
// for i = tmp downto 1 do
44590: LD_ADDR_VAR 0 7
44594: PUSH
44595: DOUBLE
44596: LD_VAR 0 9
44600: INC
44601: ST_TO_ADDR
44602: LD_INT 1
44604: PUSH
44605: FOR_DOWNTO
44606: IFFALSE 44651
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44608: LD_ADDR_VAR 0 6
44612: PUSH
44613: LD_VAR 0 6
44617: PPUSH
44618: LD_VAR 0 9
44622: PUSH
44623: LD_VAR 0 7
44627: MINUS
44628: PUSH
44629: LD_INT 1
44631: PLUS
44632: PPUSH
44633: LD_VAR 0 9
44637: PUSH
44638: LD_VAR 0 7
44642: ARRAY
44643: PPUSH
44644: CALL_OW 1
44648: ST_TO_ADDR
44649: GO 44605
44651: POP
44652: POP
// end ; tmp := [ ] ;
44653: LD_ADDR_VAR 0 9
44657: PUSH
44658: EMPTY
44659: ST_TO_ADDR
// if mode then
44660: LD_VAR 0 5
44664: IFFALSE 44733
// begin for i = 1 to result do
44666: LD_ADDR_VAR 0 7
44670: PUSH
44671: DOUBLE
44672: LD_INT 1
44674: DEC
44675: ST_TO_ADDR
44676: LD_VAR 0 6
44680: PUSH
44681: FOR_TO
44682: IFFALSE 44721
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44684: LD_ADDR_VAR 0 9
44688: PUSH
44689: LD_VAR 0 9
44693: PPUSH
44694: LD_VAR 0 7
44698: PPUSH
44699: LD_VAR 0 6
44703: PUSH
44704: LD_VAR 0 7
44708: ARRAY
44709: PUSH
44710: LD_INT 1
44712: ARRAY
44713: PPUSH
44714: CALL_OW 1
44718: ST_TO_ADDR
44719: GO 44681
44721: POP
44722: POP
// result := tmp ;
44723: LD_ADDR_VAR 0 6
44727: PUSH
44728: LD_VAR 0 9
44732: ST_TO_ADDR
// end ; end ;
44733: LD_VAR 0 6
44737: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44738: LD_INT 0
44740: PPUSH
44741: PPUSH
44742: PPUSH
44743: PPUSH
44744: PPUSH
44745: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44746: LD_ADDR_VAR 0 5
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: EMPTY
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: ST_TO_ADDR
// if not x or not y then
44768: LD_VAR 0 2
44772: NOT
44773: PUSH
44774: LD_VAR 0 3
44778: NOT
44779: OR
44780: IFFALSE 44784
// exit ;
44782: GO 46436
// if not range then
44784: LD_VAR 0 4
44788: NOT
44789: IFFALSE 44799
// range := 10 ;
44791: LD_ADDR_VAR 0 4
44795: PUSH
44796: LD_INT 10
44798: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44799: LD_ADDR_VAR 0 8
44803: PUSH
44804: LD_INT 81
44806: PUSH
44807: LD_VAR 0 1
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 92
44818: PUSH
44819: LD_VAR 0 2
44823: PUSH
44824: LD_VAR 0 3
44828: PUSH
44829: LD_VAR 0 4
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 3
44842: PUSH
44843: LD_INT 21
44845: PUSH
44846: LD_INT 3
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: LIST
44861: PPUSH
44862: CALL_OW 69
44866: ST_TO_ADDR
// if not tmp then
44867: LD_VAR 0 8
44871: NOT
44872: IFFALSE 44876
// exit ;
44874: GO 46436
// for i in tmp do
44876: LD_ADDR_VAR 0 6
44880: PUSH
44881: LD_VAR 0 8
44885: PUSH
44886: FOR_IN
44887: IFFALSE 46411
// begin points := [ 0 , 0 , 0 ] ;
44889: LD_ADDR_VAR 0 9
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: LIST
44907: ST_TO_ADDR
// bpoints := 1 ;
44908: LD_ADDR_VAR 0 10
44912: PUSH
44913: LD_INT 1
44915: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44916: LD_VAR 0 6
44920: PPUSH
44921: CALL_OW 247
44925: PUSH
44926: LD_INT 1
44928: DOUBLE
44929: EQUAL
44930: IFTRUE 44934
44932: GO 45512
44934: POP
// begin if GetClass ( i ) = 1 then
44935: LD_VAR 0 6
44939: PPUSH
44940: CALL_OW 257
44944: PUSH
44945: LD_INT 1
44947: EQUAL
44948: IFFALSE 44969
// points := [ 10 , 5 , 3 ] ;
44950: LD_ADDR_VAR 0 9
44954: PUSH
44955: LD_INT 10
44957: PUSH
44958: LD_INT 5
44960: PUSH
44961: LD_INT 3
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: LIST
44968: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44969: LD_VAR 0 6
44973: PPUSH
44974: CALL_OW 257
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: LD_INT 3
44984: PUSH
44985: LD_INT 4
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: LIST
44992: IN
44993: IFFALSE 45014
// points := [ 3 , 2 , 1 ] ;
44995: LD_ADDR_VAR 0 9
44999: PUSH
45000: LD_INT 3
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: LIST
45013: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45014: LD_VAR 0 6
45018: PPUSH
45019: CALL_OW 257
45023: PUSH
45024: LD_INT 5
45026: EQUAL
45027: IFFALSE 45048
// points := [ 130 , 5 , 2 ] ;
45029: LD_ADDR_VAR 0 9
45033: PUSH
45034: LD_INT 130
45036: PUSH
45037: LD_INT 5
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45048: LD_VAR 0 6
45052: PPUSH
45053: CALL_OW 257
45057: PUSH
45058: LD_INT 8
45060: EQUAL
45061: IFFALSE 45082
// points := [ 35 , 35 , 30 ] ;
45063: LD_ADDR_VAR 0 9
45067: PUSH
45068: LD_INT 35
45070: PUSH
45071: LD_INT 35
45073: PUSH
45074: LD_INT 30
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: LIST
45081: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45082: LD_VAR 0 6
45086: PPUSH
45087: CALL_OW 257
45091: PUSH
45092: LD_INT 9
45094: EQUAL
45095: IFFALSE 45116
// points := [ 20 , 55 , 40 ] ;
45097: LD_ADDR_VAR 0 9
45101: PUSH
45102: LD_INT 20
45104: PUSH
45105: LD_INT 55
45107: PUSH
45108: LD_INT 40
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: LIST
45115: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45116: LD_VAR 0 6
45120: PPUSH
45121: CALL_OW 257
45125: PUSH
45126: LD_INT 12
45128: PUSH
45129: LD_INT 16
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: IN
45136: IFFALSE 45157
// points := [ 5 , 3 , 2 ] ;
45138: LD_ADDR_VAR 0 9
45142: PUSH
45143: LD_INT 5
45145: PUSH
45146: LD_INT 3
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45157: LD_VAR 0 6
45161: PPUSH
45162: CALL_OW 257
45166: PUSH
45167: LD_INT 17
45169: EQUAL
45170: IFFALSE 45191
// points := [ 100 , 50 , 75 ] ;
45172: LD_ADDR_VAR 0 9
45176: PUSH
45177: LD_INT 100
45179: PUSH
45180: LD_INT 50
45182: PUSH
45183: LD_INT 75
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: LIST
45190: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45191: LD_VAR 0 6
45195: PPUSH
45196: CALL_OW 257
45200: PUSH
45201: LD_INT 15
45203: EQUAL
45204: IFFALSE 45225
// points := [ 10 , 5 , 3 ] ;
45206: LD_ADDR_VAR 0 9
45210: PUSH
45211: LD_INT 10
45213: PUSH
45214: LD_INT 5
45216: PUSH
45217: LD_INT 3
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: LIST
45224: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45225: LD_VAR 0 6
45229: PPUSH
45230: CALL_OW 257
45234: PUSH
45235: LD_INT 14
45237: EQUAL
45238: IFFALSE 45259
// points := [ 10 , 0 , 0 ] ;
45240: LD_ADDR_VAR 0 9
45244: PUSH
45245: LD_INT 10
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: LIST
45258: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45259: LD_VAR 0 6
45263: PPUSH
45264: CALL_OW 257
45268: PUSH
45269: LD_INT 11
45271: EQUAL
45272: IFFALSE 45293
// points := [ 30 , 10 , 5 ] ;
45274: LD_ADDR_VAR 0 9
45278: PUSH
45279: LD_INT 30
45281: PUSH
45282: LD_INT 10
45284: PUSH
45285: LD_INT 5
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: LIST
45292: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45293: LD_VAR 0 1
45297: PPUSH
45298: LD_INT 5
45300: PPUSH
45301: CALL_OW 321
45305: PUSH
45306: LD_INT 2
45308: EQUAL
45309: IFFALSE 45326
// bpoints := bpoints * 1.8 ;
45311: LD_ADDR_VAR 0 10
45315: PUSH
45316: LD_VAR 0 10
45320: PUSH
45321: LD_REAL  1.80000000000000E+0000
45324: MUL
45325: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45326: LD_VAR 0 6
45330: PPUSH
45331: CALL_OW 257
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 2
45341: PUSH
45342: LD_INT 3
45344: PUSH
45345: LD_INT 4
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: IN
45354: PUSH
45355: LD_VAR 0 1
45359: PPUSH
45360: LD_INT 51
45362: PPUSH
45363: CALL_OW 321
45367: PUSH
45368: LD_INT 2
45370: EQUAL
45371: AND
45372: IFFALSE 45389
// bpoints := bpoints * 1.2 ;
45374: LD_ADDR_VAR 0 10
45378: PUSH
45379: LD_VAR 0 10
45383: PUSH
45384: LD_REAL  1.20000000000000E+0000
45387: MUL
45388: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45389: LD_VAR 0 6
45393: PPUSH
45394: CALL_OW 257
45398: PUSH
45399: LD_INT 5
45401: PUSH
45402: LD_INT 7
45404: PUSH
45405: LD_INT 9
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: LIST
45412: IN
45413: PUSH
45414: LD_VAR 0 1
45418: PPUSH
45419: LD_INT 52
45421: PPUSH
45422: CALL_OW 321
45426: PUSH
45427: LD_INT 2
45429: EQUAL
45430: AND
45431: IFFALSE 45448
// bpoints := bpoints * 1.5 ;
45433: LD_ADDR_VAR 0 10
45437: PUSH
45438: LD_VAR 0 10
45442: PUSH
45443: LD_REAL  1.50000000000000E+0000
45446: MUL
45447: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45448: LD_VAR 0 1
45452: PPUSH
45453: LD_INT 66
45455: PPUSH
45456: CALL_OW 321
45460: PUSH
45461: LD_INT 2
45463: EQUAL
45464: IFFALSE 45481
// bpoints := bpoints * 1.1 ;
45466: LD_ADDR_VAR 0 10
45470: PUSH
45471: LD_VAR 0 10
45475: PUSH
45476: LD_REAL  1.10000000000000E+0000
45479: MUL
45480: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45481: LD_ADDR_VAR 0 10
45485: PUSH
45486: LD_VAR 0 10
45490: PUSH
45491: LD_VAR 0 6
45495: PPUSH
45496: LD_INT 1
45498: PPUSH
45499: CALL_OW 259
45503: PUSH
45504: LD_REAL  1.15000000000000E+0000
45507: MUL
45508: MUL
45509: ST_TO_ADDR
// end ; unit_vehicle :
45510: GO 46340
45512: LD_INT 2
45514: DOUBLE
45515: EQUAL
45516: IFTRUE 45520
45518: GO 46328
45520: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45521: LD_VAR 0 6
45525: PPUSH
45526: CALL_OW 264
45530: PUSH
45531: LD_INT 2
45533: PUSH
45534: LD_INT 42
45536: PUSH
45537: LD_INT 24
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: LIST
45544: IN
45545: IFFALSE 45566
// points := [ 25 , 5 , 3 ] ;
45547: LD_ADDR_VAR 0 9
45551: PUSH
45552: LD_INT 25
45554: PUSH
45555: LD_INT 5
45557: PUSH
45558: LD_INT 3
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: LIST
45565: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45566: LD_VAR 0 6
45570: PPUSH
45571: CALL_OW 264
45575: PUSH
45576: LD_INT 4
45578: PUSH
45579: LD_INT 43
45581: PUSH
45582: LD_INT 25
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: LIST
45589: IN
45590: IFFALSE 45611
// points := [ 40 , 15 , 5 ] ;
45592: LD_ADDR_VAR 0 9
45596: PUSH
45597: LD_INT 40
45599: PUSH
45600: LD_INT 15
45602: PUSH
45603: LD_INT 5
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: LIST
45610: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45611: LD_VAR 0 6
45615: PPUSH
45616: CALL_OW 264
45620: PUSH
45621: LD_INT 3
45623: PUSH
45624: LD_INT 23
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: IN
45631: IFFALSE 45652
// points := [ 7 , 25 , 8 ] ;
45633: LD_ADDR_VAR 0 9
45637: PUSH
45638: LD_INT 7
45640: PUSH
45641: LD_INT 25
45643: PUSH
45644: LD_INT 8
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: LIST
45651: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45652: LD_VAR 0 6
45656: PPUSH
45657: CALL_OW 264
45661: PUSH
45662: LD_INT 5
45664: PUSH
45665: LD_INT 27
45667: PUSH
45668: LD_INT 44
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: LIST
45675: IN
45676: IFFALSE 45697
// points := [ 14 , 50 , 16 ] ;
45678: LD_ADDR_VAR 0 9
45682: PUSH
45683: LD_INT 14
45685: PUSH
45686: LD_INT 50
45688: PUSH
45689: LD_INT 16
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: LIST
45696: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45697: LD_VAR 0 6
45701: PPUSH
45702: CALL_OW 264
45706: PUSH
45707: LD_INT 6
45709: PUSH
45710: LD_INT 46
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: IN
45717: IFFALSE 45738
// points := [ 32 , 120 , 70 ] ;
45719: LD_ADDR_VAR 0 9
45723: PUSH
45724: LD_INT 32
45726: PUSH
45727: LD_INT 120
45729: PUSH
45730: LD_INT 70
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: LIST
45737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45738: LD_VAR 0 6
45742: PPUSH
45743: CALL_OW 264
45747: PUSH
45748: LD_INT 7
45750: PUSH
45751: LD_INT 28
45753: PUSH
45754: LD_INT 45
45756: PUSH
45757: LD_EXP 55
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: IN
45768: IFFALSE 45789
// points := [ 35 , 20 , 45 ] ;
45770: LD_ADDR_VAR 0 9
45774: PUSH
45775: LD_INT 35
45777: PUSH
45778: LD_INT 20
45780: PUSH
45781: LD_INT 45
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: LIST
45788: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45789: LD_VAR 0 6
45793: PPUSH
45794: CALL_OW 264
45798: PUSH
45799: LD_INT 47
45801: PUSH
45802: EMPTY
45803: LIST
45804: IN
45805: IFFALSE 45826
// points := [ 67 , 45 , 75 ] ;
45807: LD_ADDR_VAR 0 9
45811: PUSH
45812: LD_INT 67
45814: PUSH
45815: LD_INT 45
45817: PUSH
45818: LD_INT 75
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: LIST
45825: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45826: LD_VAR 0 6
45830: PPUSH
45831: CALL_OW 264
45835: PUSH
45836: LD_INT 26
45838: PUSH
45839: EMPTY
45840: LIST
45841: IN
45842: IFFALSE 45863
// points := [ 120 , 30 , 80 ] ;
45844: LD_ADDR_VAR 0 9
45848: PUSH
45849: LD_INT 120
45851: PUSH
45852: LD_INT 30
45854: PUSH
45855: LD_INT 80
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: LIST
45862: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45863: LD_VAR 0 6
45867: PPUSH
45868: CALL_OW 264
45872: PUSH
45873: LD_INT 22
45875: PUSH
45876: EMPTY
45877: LIST
45878: IN
45879: IFFALSE 45900
// points := [ 40 , 1 , 1 ] ;
45881: LD_ADDR_VAR 0 9
45885: PUSH
45886: LD_INT 40
45888: PUSH
45889: LD_INT 1
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: LIST
45899: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45900: LD_VAR 0 6
45904: PPUSH
45905: CALL_OW 264
45909: PUSH
45910: LD_INT 29
45912: PUSH
45913: EMPTY
45914: LIST
45915: IN
45916: IFFALSE 45937
// points := [ 70 , 200 , 400 ] ;
45918: LD_ADDR_VAR 0 9
45922: PUSH
45923: LD_INT 70
45925: PUSH
45926: LD_INT 200
45928: PUSH
45929: LD_INT 400
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: LIST
45936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45937: LD_VAR 0 6
45941: PPUSH
45942: CALL_OW 264
45946: PUSH
45947: LD_INT 14
45949: PUSH
45950: LD_INT 53
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: IN
45957: IFFALSE 45978
// points := [ 40 , 10 , 20 ] ;
45959: LD_ADDR_VAR 0 9
45963: PUSH
45964: LD_INT 40
45966: PUSH
45967: LD_INT 10
45969: PUSH
45970: LD_INT 20
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: LIST
45977: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45978: LD_VAR 0 6
45982: PPUSH
45983: CALL_OW 264
45987: PUSH
45988: LD_INT 9
45990: PUSH
45991: EMPTY
45992: LIST
45993: IN
45994: IFFALSE 46015
// points := [ 5 , 70 , 20 ] ;
45996: LD_ADDR_VAR 0 9
46000: PUSH
46001: LD_INT 5
46003: PUSH
46004: LD_INT 70
46006: PUSH
46007: LD_INT 20
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: LIST
46014: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46015: LD_VAR 0 6
46019: PPUSH
46020: CALL_OW 264
46024: PUSH
46025: LD_INT 10
46027: PUSH
46028: EMPTY
46029: LIST
46030: IN
46031: IFFALSE 46052
// points := [ 35 , 110 , 70 ] ;
46033: LD_ADDR_VAR 0 9
46037: PUSH
46038: LD_INT 35
46040: PUSH
46041: LD_INT 110
46043: PUSH
46044: LD_INT 70
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: LIST
46051: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46052: LD_VAR 0 6
46056: PPUSH
46057: CALL_OW 265
46061: PUSH
46062: LD_INT 25
46064: EQUAL
46065: IFFALSE 46086
// points := [ 80 , 65 , 100 ] ;
46067: LD_ADDR_VAR 0 9
46071: PUSH
46072: LD_INT 80
46074: PUSH
46075: LD_INT 65
46077: PUSH
46078: LD_INT 100
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: LIST
46085: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46086: LD_VAR 0 6
46090: PPUSH
46091: CALL_OW 263
46095: PUSH
46096: LD_INT 1
46098: EQUAL
46099: IFFALSE 46134
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46101: LD_ADDR_VAR 0 10
46105: PUSH
46106: LD_VAR 0 10
46110: PUSH
46111: LD_VAR 0 6
46115: PPUSH
46116: CALL_OW 311
46120: PPUSH
46121: LD_INT 3
46123: PPUSH
46124: CALL_OW 259
46128: PUSH
46129: LD_INT 4
46131: MUL
46132: MUL
46133: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46134: LD_VAR 0 6
46138: PPUSH
46139: CALL_OW 263
46143: PUSH
46144: LD_INT 2
46146: EQUAL
46147: IFFALSE 46198
// begin j := IsControledBy ( i ) ;
46149: LD_ADDR_VAR 0 7
46153: PUSH
46154: LD_VAR 0 6
46158: PPUSH
46159: CALL_OW 312
46163: ST_TO_ADDR
// if j then
46164: LD_VAR 0 7
46168: IFFALSE 46198
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46170: LD_ADDR_VAR 0 10
46174: PUSH
46175: LD_VAR 0 10
46179: PUSH
46180: LD_VAR 0 7
46184: PPUSH
46185: LD_INT 3
46187: PPUSH
46188: CALL_OW 259
46192: PUSH
46193: LD_INT 3
46195: MUL
46196: MUL
46197: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46198: LD_VAR 0 6
46202: PPUSH
46203: CALL_OW 264
46207: PUSH
46208: LD_INT 5
46210: PUSH
46211: LD_INT 6
46213: PUSH
46214: LD_INT 46
46216: PUSH
46217: LD_INT 44
46219: PUSH
46220: LD_INT 47
46222: PUSH
46223: LD_INT 45
46225: PUSH
46226: LD_INT 28
46228: PUSH
46229: LD_INT 7
46231: PUSH
46232: LD_INT 27
46234: PUSH
46235: LD_INT 29
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: IN
46250: PUSH
46251: LD_VAR 0 1
46255: PPUSH
46256: LD_INT 52
46258: PPUSH
46259: CALL_OW 321
46263: PUSH
46264: LD_INT 2
46266: EQUAL
46267: AND
46268: IFFALSE 46285
// bpoints := bpoints * 1.2 ;
46270: LD_ADDR_VAR 0 10
46274: PUSH
46275: LD_VAR 0 10
46279: PUSH
46280: LD_REAL  1.20000000000000E+0000
46283: MUL
46284: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46285: LD_VAR 0 6
46289: PPUSH
46290: CALL_OW 264
46294: PUSH
46295: LD_INT 6
46297: PUSH
46298: LD_INT 46
46300: PUSH
46301: LD_INT 47
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: LIST
46308: IN
46309: IFFALSE 46326
// bpoints := bpoints * 1.2 ;
46311: LD_ADDR_VAR 0 10
46315: PUSH
46316: LD_VAR 0 10
46320: PUSH
46321: LD_REAL  1.20000000000000E+0000
46324: MUL
46325: ST_TO_ADDR
// end ; unit_building :
46326: GO 46340
46328: LD_INT 3
46330: DOUBLE
46331: EQUAL
46332: IFTRUE 46336
46334: GO 46339
46336: POP
// ; end ;
46337: GO 46340
46339: POP
// for j = 1 to 3 do
46340: LD_ADDR_VAR 0 7
46344: PUSH
46345: DOUBLE
46346: LD_INT 1
46348: DEC
46349: ST_TO_ADDR
46350: LD_INT 3
46352: PUSH
46353: FOR_TO
46354: IFFALSE 46407
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46356: LD_ADDR_VAR 0 5
46360: PUSH
46361: LD_VAR 0 5
46365: PPUSH
46366: LD_VAR 0 7
46370: PPUSH
46371: LD_VAR 0 5
46375: PUSH
46376: LD_VAR 0 7
46380: ARRAY
46381: PUSH
46382: LD_VAR 0 9
46386: PUSH
46387: LD_VAR 0 7
46391: ARRAY
46392: PUSH
46393: LD_VAR 0 10
46397: MUL
46398: PLUS
46399: PPUSH
46400: CALL_OW 1
46404: ST_TO_ADDR
46405: GO 46353
46407: POP
46408: POP
// end ;
46409: GO 44886
46411: POP
46412: POP
// result := Replace ( result , 4 , tmp ) ;
46413: LD_ADDR_VAR 0 5
46417: PUSH
46418: LD_VAR 0 5
46422: PPUSH
46423: LD_INT 4
46425: PPUSH
46426: LD_VAR 0 8
46430: PPUSH
46431: CALL_OW 1
46435: ST_TO_ADDR
// end ;
46436: LD_VAR 0 5
46440: RET
// export function DangerAtRange ( unit , range ) ; begin
46441: LD_INT 0
46443: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46444: LD_ADDR_VAR 0 3
46448: PUSH
46449: LD_VAR 0 1
46453: PPUSH
46454: CALL_OW 255
46458: PPUSH
46459: LD_VAR 0 1
46463: PPUSH
46464: CALL_OW 250
46468: PPUSH
46469: LD_VAR 0 1
46473: PPUSH
46474: CALL_OW 251
46478: PPUSH
46479: LD_VAR 0 2
46483: PPUSH
46484: CALL 44738 0 4
46488: ST_TO_ADDR
// end ;
46489: LD_VAR 0 3
46493: RET
// export function DangerInArea ( side , area ) ; begin
46494: LD_INT 0
46496: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46497: LD_ADDR_VAR 0 3
46501: PUSH
46502: LD_VAR 0 2
46506: PPUSH
46507: LD_INT 81
46509: PUSH
46510: LD_VAR 0 1
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PPUSH
46519: CALL_OW 70
46523: ST_TO_ADDR
// end ;
46524: LD_VAR 0 3
46528: RET
// export function IsExtension ( b ) ; begin
46529: LD_INT 0
46531: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46532: LD_ADDR_VAR 0 2
46536: PUSH
46537: LD_VAR 0 1
46541: PUSH
46542: LD_INT 23
46544: PUSH
46545: LD_INT 20
46547: PUSH
46548: LD_INT 22
46550: PUSH
46551: LD_INT 17
46553: PUSH
46554: LD_INT 24
46556: PUSH
46557: LD_INT 21
46559: PUSH
46560: LD_INT 19
46562: PUSH
46563: LD_INT 16
46565: PUSH
46566: LD_INT 25
46568: PUSH
46569: LD_INT 18
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: IN
46584: ST_TO_ADDR
// end ;
46585: LD_VAR 0 2
46589: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46590: LD_INT 0
46592: PPUSH
46593: PPUSH
46594: PPUSH
// result := [ ] ;
46595: LD_ADDR_VAR 0 4
46599: PUSH
46600: EMPTY
46601: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46602: LD_ADDR_VAR 0 5
46606: PUSH
46607: LD_VAR 0 2
46611: PPUSH
46612: LD_INT 21
46614: PUSH
46615: LD_INT 3
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PPUSH
46622: CALL_OW 70
46626: ST_TO_ADDR
// if not tmp then
46627: LD_VAR 0 5
46631: NOT
46632: IFFALSE 46636
// exit ;
46634: GO 46700
// if checkLink then
46636: LD_VAR 0 3
46640: IFFALSE 46690
// begin for i in tmp do
46642: LD_ADDR_VAR 0 6
46646: PUSH
46647: LD_VAR 0 5
46651: PUSH
46652: FOR_IN
46653: IFFALSE 46688
// if GetBase ( i ) <> base then
46655: LD_VAR 0 6
46659: PPUSH
46660: CALL_OW 274
46664: PUSH
46665: LD_VAR 0 1
46669: NONEQUAL
46670: IFFALSE 46686
// ComLinkToBase ( base , i ) ;
46672: LD_VAR 0 1
46676: PPUSH
46677: LD_VAR 0 6
46681: PPUSH
46682: CALL_OW 169
46686: GO 46652
46688: POP
46689: POP
// end ; result := tmp ;
46690: LD_ADDR_VAR 0 4
46694: PUSH
46695: LD_VAR 0 5
46699: ST_TO_ADDR
// end ;
46700: LD_VAR 0 4
46704: RET
// export function ComComplete ( units , b ) ; var i ; begin
46705: LD_INT 0
46707: PPUSH
46708: PPUSH
// if not units then
46709: LD_VAR 0 1
46713: NOT
46714: IFFALSE 46718
// exit ;
46716: GO 46808
// for i in units do
46718: LD_ADDR_VAR 0 4
46722: PUSH
46723: LD_VAR 0 1
46727: PUSH
46728: FOR_IN
46729: IFFALSE 46806
// if BuildingStatus ( b ) = bs_build then
46731: LD_VAR 0 2
46735: PPUSH
46736: CALL_OW 461
46740: PUSH
46741: LD_INT 1
46743: EQUAL
46744: IFFALSE 46804
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46746: LD_VAR 0 4
46750: PPUSH
46751: LD_STRING h
46753: PUSH
46754: LD_VAR 0 2
46758: PPUSH
46759: CALL_OW 250
46763: PUSH
46764: LD_VAR 0 2
46768: PPUSH
46769: CALL_OW 251
46773: PUSH
46774: LD_VAR 0 2
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: PUSH
46797: EMPTY
46798: LIST
46799: PPUSH
46800: CALL_OW 446
46804: GO 46728
46806: POP
46807: POP
// end ;
46808: LD_VAR 0 3
46812: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46813: LD_INT 0
46815: PPUSH
46816: PPUSH
46817: PPUSH
46818: PPUSH
46819: PPUSH
46820: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46821: LD_VAR 0 1
46825: NOT
46826: PUSH
46827: LD_VAR 0 1
46831: PPUSH
46832: CALL_OW 263
46836: PUSH
46837: LD_INT 2
46839: NONEQUAL
46840: OR
46841: IFFALSE 46845
// exit ;
46843: GO 47161
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46845: LD_ADDR_VAR 0 6
46849: PUSH
46850: LD_INT 22
46852: PUSH
46853: LD_VAR 0 1
46857: PPUSH
46858: CALL_OW 255
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: LD_INT 30
46872: PUSH
46873: LD_INT 36
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 34
46882: PUSH
46883: LD_INT 31
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: LIST
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PPUSH
46899: CALL_OW 69
46903: ST_TO_ADDR
// if not tmp then
46904: LD_VAR 0 6
46908: NOT
46909: IFFALSE 46913
// exit ;
46911: GO 47161
// result := [ ] ;
46913: LD_ADDR_VAR 0 2
46917: PUSH
46918: EMPTY
46919: ST_TO_ADDR
// for i in tmp do
46920: LD_ADDR_VAR 0 3
46924: PUSH
46925: LD_VAR 0 6
46929: PUSH
46930: FOR_IN
46931: IFFALSE 47002
// begin t := UnitsInside ( i ) ;
46933: LD_ADDR_VAR 0 4
46937: PUSH
46938: LD_VAR 0 3
46942: PPUSH
46943: CALL_OW 313
46947: ST_TO_ADDR
// if t then
46948: LD_VAR 0 4
46952: IFFALSE 47000
// for j in t do
46954: LD_ADDR_VAR 0 7
46958: PUSH
46959: LD_VAR 0 4
46963: PUSH
46964: FOR_IN
46965: IFFALSE 46998
// result := Replace ( result , result + 1 , j ) ;
46967: LD_ADDR_VAR 0 2
46971: PUSH
46972: LD_VAR 0 2
46976: PPUSH
46977: LD_VAR 0 2
46981: PUSH
46982: LD_INT 1
46984: PLUS
46985: PPUSH
46986: LD_VAR 0 7
46990: PPUSH
46991: CALL_OW 1
46995: ST_TO_ADDR
46996: GO 46964
46998: POP
46999: POP
// end ;
47000: GO 46930
47002: POP
47003: POP
// if not result then
47004: LD_VAR 0 2
47008: NOT
47009: IFFALSE 47013
// exit ;
47011: GO 47161
// mech := result [ 1 ] ;
47013: LD_ADDR_VAR 0 5
47017: PUSH
47018: LD_VAR 0 2
47022: PUSH
47023: LD_INT 1
47025: ARRAY
47026: ST_TO_ADDR
// if result > 1 then
47027: LD_VAR 0 2
47031: PUSH
47032: LD_INT 1
47034: GREATER
47035: IFFALSE 47147
// begin for i = 2 to result do
47037: LD_ADDR_VAR 0 3
47041: PUSH
47042: DOUBLE
47043: LD_INT 2
47045: DEC
47046: ST_TO_ADDR
47047: LD_VAR 0 2
47051: PUSH
47052: FOR_TO
47053: IFFALSE 47145
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47055: LD_ADDR_VAR 0 4
47059: PUSH
47060: LD_VAR 0 2
47064: PUSH
47065: LD_VAR 0 3
47069: ARRAY
47070: PPUSH
47071: LD_INT 3
47073: PPUSH
47074: CALL_OW 259
47078: PUSH
47079: LD_VAR 0 2
47083: PUSH
47084: LD_VAR 0 3
47088: ARRAY
47089: PPUSH
47090: CALL_OW 432
47094: MINUS
47095: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47096: LD_VAR 0 4
47100: PUSH
47101: LD_VAR 0 5
47105: PPUSH
47106: LD_INT 3
47108: PPUSH
47109: CALL_OW 259
47113: PUSH
47114: LD_VAR 0 5
47118: PPUSH
47119: CALL_OW 432
47123: MINUS
47124: GREATEREQUAL
47125: IFFALSE 47143
// mech := result [ i ] ;
47127: LD_ADDR_VAR 0 5
47131: PUSH
47132: LD_VAR 0 2
47136: PUSH
47137: LD_VAR 0 3
47141: ARRAY
47142: ST_TO_ADDR
// end ;
47143: GO 47052
47145: POP
47146: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47147: LD_VAR 0 1
47151: PPUSH
47152: LD_VAR 0 5
47156: PPUSH
47157: CALL_OW 135
// end ;
47161: LD_VAR 0 2
47165: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47166: LD_INT 0
47168: PPUSH
47169: PPUSH
47170: PPUSH
47171: PPUSH
47172: PPUSH
47173: PPUSH
47174: PPUSH
47175: PPUSH
47176: PPUSH
47177: PPUSH
47178: PPUSH
47179: PPUSH
47180: PPUSH
// result := [ ] ;
47181: LD_ADDR_VAR 0 7
47185: PUSH
47186: EMPTY
47187: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47188: LD_VAR 0 1
47192: PPUSH
47193: CALL_OW 266
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: IN
47208: NOT
47209: IFFALSE 47213
// exit ;
47211: GO 48847
// if name then
47213: LD_VAR 0 3
47217: IFFALSE 47233
// SetBName ( base_dep , name ) ;
47219: LD_VAR 0 1
47223: PPUSH
47224: LD_VAR 0 3
47228: PPUSH
47229: CALL_OW 500
// base := GetBase ( base_dep ) ;
47233: LD_ADDR_VAR 0 15
47237: PUSH
47238: LD_VAR 0 1
47242: PPUSH
47243: CALL_OW 274
47247: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47248: LD_ADDR_VAR 0 16
47252: PUSH
47253: LD_VAR 0 1
47257: PPUSH
47258: CALL_OW 255
47262: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47263: LD_ADDR_VAR 0 17
47267: PUSH
47268: LD_VAR 0 1
47272: PPUSH
47273: CALL_OW 248
47277: ST_TO_ADDR
// if sources then
47278: LD_VAR 0 5
47282: IFFALSE 47329
// for i = 1 to 3 do
47284: LD_ADDR_VAR 0 8
47288: PUSH
47289: DOUBLE
47290: LD_INT 1
47292: DEC
47293: ST_TO_ADDR
47294: LD_INT 3
47296: PUSH
47297: FOR_TO
47298: IFFALSE 47327
// AddResourceType ( base , i , sources [ i ] ) ;
47300: LD_VAR 0 15
47304: PPUSH
47305: LD_VAR 0 8
47309: PPUSH
47310: LD_VAR 0 5
47314: PUSH
47315: LD_VAR 0 8
47319: ARRAY
47320: PPUSH
47321: CALL_OW 276
47325: GO 47297
47327: POP
47328: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47329: LD_ADDR_VAR 0 18
47333: PUSH
47334: LD_VAR 0 15
47338: PPUSH
47339: LD_VAR 0 2
47343: PPUSH
47344: LD_INT 1
47346: PPUSH
47347: CALL 46590 0 3
47351: ST_TO_ADDR
// InitHc ;
47352: CALL_OW 19
// InitUc ;
47356: CALL_OW 18
// uc_side := side ;
47360: LD_ADDR_OWVAR 20
47364: PUSH
47365: LD_VAR 0 16
47369: ST_TO_ADDR
// uc_nation := nation ;
47370: LD_ADDR_OWVAR 21
47374: PUSH
47375: LD_VAR 0 17
47379: ST_TO_ADDR
// if buildings then
47380: LD_VAR 0 18
47384: IFFALSE 48706
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47386: LD_ADDR_VAR 0 19
47390: PUSH
47391: LD_VAR 0 18
47395: PPUSH
47396: LD_INT 2
47398: PUSH
47399: LD_INT 30
47401: PUSH
47402: LD_INT 29
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 30
47411: PUSH
47412: LD_INT 30
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: LIST
47423: PPUSH
47424: CALL_OW 72
47428: ST_TO_ADDR
// if tmp then
47429: LD_VAR 0 19
47433: IFFALSE 47481
// for i in tmp do
47435: LD_ADDR_VAR 0 8
47439: PUSH
47440: LD_VAR 0 19
47444: PUSH
47445: FOR_IN
47446: IFFALSE 47479
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47448: LD_VAR 0 8
47452: PPUSH
47453: CALL_OW 250
47457: PPUSH
47458: LD_VAR 0 8
47462: PPUSH
47463: CALL_OW 251
47467: PPUSH
47468: LD_VAR 0 16
47472: PPUSH
47473: CALL_OW 441
47477: GO 47445
47479: POP
47480: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47481: LD_VAR 0 18
47485: PPUSH
47486: LD_INT 2
47488: PUSH
47489: LD_INT 30
47491: PUSH
47492: LD_INT 32
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 30
47501: PUSH
47502: LD_INT 33
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: LIST
47513: PPUSH
47514: CALL_OW 72
47518: IFFALSE 47606
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47520: LD_ADDR_VAR 0 8
47524: PUSH
47525: LD_VAR 0 18
47529: PPUSH
47530: LD_INT 2
47532: PUSH
47533: LD_INT 30
47535: PUSH
47536: LD_INT 32
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 30
47545: PUSH
47546: LD_INT 33
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: LIST
47557: PPUSH
47558: CALL_OW 72
47562: PUSH
47563: FOR_IN
47564: IFFALSE 47604
// begin if not GetBWeapon ( i ) then
47566: LD_VAR 0 8
47570: PPUSH
47571: CALL_OW 269
47575: NOT
47576: IFFALSE 47602
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47578: LD_VAR 0 8
47582: PPUSH
47583: LD_VAR 0 8
47587: PPUSH
47588: LD_VAR 0 2
47592: PPUSH
47593: CALL 48852 0 2
47597: PPUSH
47598: CALL_OW 431
// end ;
47602: GO 47563
47604: POP
47605: POP
// end ; for i = 1 to personel do
47606: LD_ADDR_VAR 0 8
47610: PUSH
47611: DOUBLE
47612: LD_INT 1
47614: DEC
47615: ST_TO_ADDR
47616: LD_VAR 0 6
47620: PUSH
47621: FOR_TO
47622: IFFALSE 48686
// begin if i > 4 then
47624: LD_VAR 0 8
47628: PUSH
47629: LD_INT 4
47631: GREATER
47632: IFFALSE 47636
// break ;
47634: GO 48686
// case i of 1 :
47636: LD_VAR 0 8
47640: PUSH
47641: LD_INT 1
47643: DOUBLE
47644: EQUAL
47645: IFTRUE 47649
47647: GO 47729
47649: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47650: LD_ADDR_VAR 0 12
47654: PUSH
47655: LD_VAR 0 18
47659: PPUSH
47660: LD_INT 22
47662: PUSH
47663: LD_VAR 0 16
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 58
47674: PUSH
47675: EMPTY
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: PUSH
47681: LD_INT 30
47683: PUSH
47684: LD_INT 32
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 30
47693: PUSH
47694: LD_INT 4
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 30
47703: PUSH
47704: LD_INT 5
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: PPUSH
47722: CALL_OW 72
47726: ST_TO_ADDR
47727: GO 47951
47729: LD_INT 2
47731: DOUBLE
47732: EQUAL
47733: IFTRUE 47737
47735: GO 47799
47737: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47738: LD_ADDR_VAR 0 12
47742: PUSH
47743: LD_VAR 0 18
47747: PPUSH
47748: LD_INT 22
47750: PUSH
47751: LD_VAR 0 16
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: PUSH
47763: LD_INT 30
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 30
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: LIST
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PPUSH
47792: CALL_OW 72
47796: ST_TO_ADDR
47797: GO 47951
47799: LD_INT 3
47801: DOUBLE
47802: EQUAL
47803: IFTRUE 47807
47805: GO 47869
47807: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47808: LD_ADDR_VAR 0 12
47812: PUSH
47813: LD_VAR 0 18
47817: PPUSH
47818: LD_INT 22
47820: PUSH
47821: LD_VAR 0 16
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: LD_INT 30
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 30
47845: PUSH
47846: LD_INT 3
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: LIST
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PPUSH
47862: CALL_OW 72
47866: ST_TO_ADDR
47867: GO 47951
47869: LD_INT 4
47871: DOUBLE
47872: EQUAL
47873: IFTRUE 47877
47875: GO 47950
47877: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47878: LD_ADDR_VAR 0 12
47882: PUSH
47883: LD_VAR 0 18
47887: PPUSH
47888: LD_INT 22
47890: PUSH
47891: LD_VAR 0 16
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: LD_INT 30
47905: PUSH
47906: LD_INT 6
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 30
47915: PUSH
47916: LD_INT 7
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 30
47925: PUSH
47926: LD_INT 8
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PPUSH
47943: CALL_OW 72
47947: ST_TO_ADDR
47948: GO 47951
47950: POP
// if i = 1 then
47951: LD_VAR 0 8
47955: PUSH
47956: LD_INT 1
47958: EQUAL
47959: IFFALSE 48070
// begin tmp := [ ] ;
47961: LD_ADDR_VAR 0 19
47965: PUSH
47966: EMPTY
47967: ST_TO_ADDR
// for j in f do
47968: LD_ADDR_VAR 0 9
47972: PUSH
47973: LD_VAR 0 12
47977: PUSH
47978: FOR_IN
47979: IFFALSE 48052
// if GetBType ( j ) = b_bunker then
47981: LD_VAR 0 9
47985: PPUSH
47986: CALL_OW 266
47990: PUSH
47991: LD_INT 32
47993: EQUAL
47994: IFFALSE 48021
// tmp := Insert ( tmp , 1 , j ) else
47996: LD_ADDR_VAR 0 19
48000: PUSH
48001: LD_VAR 0 19
48005: PPUSH
48006: LD_INT 1
48008: PPUSH
48009: LD_VAR 0 9
48013: PPUSH
48014: CALL_OW 2
48018: ST_TO_ADDR
48019: GO 48050
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48021: LD_ADDR_VAR 0 19
48025: PUSH
48026: LD_VAR 0 19
48030: PPUSH
48031: LD_VAR 0 19
48035: PUSH
48036: LD_INT 1
48038: PLUS
48039: PPUSH
48040: LD_VAR 0 9
48044: PPUSH
48045: CALL_OW 2
48049: ST_TO_ADDR
48050: GO 47978
48052: POP
48053: POP
// if tmp then
48054: LD_VAR 0 19
48058: IFFALSE 48070
// f := tmp ;
48060: LD_ADDR_VAR 0 12
48064: PUSH
48065: LD_VAR 0 19
48069: ST_TO_ADDR
// end ; x := personel [ i ] ;
48070: LD_ADDR_VAR 0 13
48074: PUSH
48075: LD_VAR 0 6
48079: PUSH
48080: LD_VAR 0 8
48084: ARRAY
48085: ST_TO_ADDR
// if x = - 1 then
48086: LD_VAR 0 13
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: EQUAL
48095: IFFALSE 48304
// begin for j in f do
48097: LD_ADDR_VAR 0 9
48101: PUSH
48102: LD_VAR 0 12
48106: PUSH
48107: FOR_IN
48108: IFFALSE 48300
// repeat InitHc ;
48110: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48114: LD_VAR 0 9
48118: PPUSH
48119: CALL_OW 266
48123: PUSH
48124: LD_INT 5
48126: EQUAL
48127: IFFALSE 48197
// begin if UnitsInside ( j ) < 3 then
48129: LD_VAR 0 9
48133: PPUSH
48134: CALL_OW 313
48138: PUSH
48139: LD_INT 3
48141: LESS
48142: IFFALSE 48178
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48144: LD_INT 0
48146: PPUSH
48147: LD_INT 5
48149: PUSH
48150: LD_INT 8
48152: PUSH
48153: LD_INT 9
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: LIST
48160: PUSH
48161: LD_VAR 0 17
48165: ARRAY
48166: PPUSH
48167: LD_VAR 0 4
48171: PPUSH
48172: CALL_OW 380
48176: GO 48195
// PrepareHuman ( false , i , skill ) ;
48178: LD_INT 0
48180: PPUSH
48181: LD_VAR 0 8
48185: PPUSH
48186: LD_VAR 0 4
48190: PPUSH
48191: CALL_OW 380
// end else
48195: GO 48214
// PrepareHuman ( false , i , skill ) ;
48197: LD_INT 0
48199: PPUSH
48200: LD_VAR 0 8
48204: PPUSH
48205: LD_VAR 0 4
48209: PPUSH
48210: CALL_OW 380
// un := CreateHuman ;
48214: LD_ADDR_VAR 0 14
48218: PUSH
48219: CALL_OW 44
48223: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48224: LD_ADDR_VAR 0 7
48228: PUSH
48229: LD_VAR 0 7
48233: PPUSH
48234: LD_INT 1
48236: PPUSH
48237: LD_VAR 0 14
48241: PPUSH
48242: CALL_OW 2
48246: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48247: LD_VAR 0 14
48251: PPUSH
48252: LD_VAR 0 9
48256: PPUSH
48257: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48261: LD_VAR 0 9
48265: PPUSH
48266: CALL_OW 313
48270: PUSH
48271: LD_INT 6
48273: EQUAL
48274: PUSH
48275: LD_VAR 0 9
48279: PPUSH
48280: CALL_OW 266
48284: PUSH
48285: LD_INT 32
48287: PUSH
48288: LD_INT 31
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: IN
48295: OR
48296: IFFALSE 48110
48298: GO 48107
48300: POP
48301: POP
// end else
48302: GO 48684
// for j = 1 to x do
48304: LD_ADDR_VAR 0 9
48308: PUSH
48309: DOUBLE
48310: LD_INT 1
48312: DEC
48313: ST_TO_ADDR
48314: LD_VAR 0 13
48318: PUSH
48319: FOR_TO
48320: IFFALSE 48682
// begin InitHc ;
48322: CALL_OW 19
// if not f then
48326: LD_VAR 0 12
48330: NOT
48331: IFFALSE 48420
// begin PrepareHuman ( false , i , skill ) ;
48333: LD_INT 0
48335: PPUSH
48336: LD_VAR 0 8
48340: PPUSH
48341: LD_VAR 0 4
48345: PPUSH
48346: CALL_OW 380
// un := CreateHuman ;
48350: LD_ADDR_VAR 0 14
48354: PUSH
48355: CALL_OW 44
48359: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48360: LD_ADDR_VAR 0 7
48364: PUSH
48365: LD_VAR 0 7
48369: PPUSH
48370: LD_INT 1
48372: PPUSH
48373: LD_VAR 0 14
48377: PPUSH
48378: CALL_OW 2
48382: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48383: LD_VAR 0 14
48387: PPUSH
48388: LD_VAR 0 1
48392: PPUSH
48393: CALL_OW 250
48397: PPUSH
48398: LD_VAR 0 1
48402: PPUSH
48403: CALL_OW 251
48407: PPUSH
48408: LD_INT 10
48410: PPUSH
48411: LD_INT 0
48413: PPUSH
48414: CALL_OW 50
// continue ;
48418: GO 48319
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48420: LD_VAR 0 12
48424: PUSH
48425: LD_INT 1
48427: ARRAY
48428: PPUSH
48429: CALL_OW 313
48433: PUSH
48434: LD_VAR 0 12
48438: PUSH
48439: LD_INT 1
48441: ARRAY
48442: PPUSH
48443: CALL_OW 266
48447: PUSH
48448: LD_INT 32
48450: PUSH
48451: LD_INT 31
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: IN
48458: AND
48459: PUSH
48460: LD_VAR 0 12
48464: PUSH
48465: LD_INT 1
48467: ARRAY
48468: PPUSH
48469: CALL_OW 313
48473: PUSH
48474: LD_INT 6
48476: EQUAL
48477: OR
48478: IFFALSE 48498
// f := Delete ( f , 1 ) ;
48480: LD_ADDR_VAR 0 12
48484: PUSH
48485: LD_VAR 0 12
48489: PPUSH
48490: LD_INT 1
48492: PPUSH
48493: CALL_OW 3
48497: ST_TO_ADDR
// if not f then
48498: LD_VAR 0 12
48502: NOT
48503: IFFALSE 48521
// begin x := x + 2 ;
48505: LD_ADDR_VAR 0 13
48509: PUSH
48510: LD_VAR 0 13
48514: PUSH
48515: LD_INT 2
48517: PLUS
48518: ST_TO_ADDR
// continue ;
48519: GO 48319
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48521: LD_VAR 0 12
48525: PUSH
48526: LD_INT 1
48528: ARRAY
48529: PPUSH
48530: CALL_OW 266
48534: PUSH
48535: LD_INT 5
48537: EQUAL
48538: IFFALSE 48612
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48540: LD_VAR 0 12
48544: PUSH
48545: LD_INT 1
48547: ARRAY
48548: PPUSH
48549: CALL_OW 313
48553: PUSH
48554: LD_INT 3
48556: LESS
48557: IFFALSE 48593
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48559: LD_INT 0
48561: PPUSH
48562: LD_INT 5
48564: PUSH
48565: LD_INT 8
48567: PUSH
48568: LD_INT 9
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: LIST
48575: PUSH
48576: LD_VAR 0 17
48580: ARRAY
48581: PPUSH
48582: LD_VAR 0 4
48586: PPUSH
48587: CALL_OW 380
48591: GO 48610
// PrepareHuman ( false , i , skill ) ;
48593: LD_INT 0
48595: PPUSH
48596: LD_VAR 0 8
48600: PPUSH
48601: LD_VAR 0 4
48605: PPUSH
48606: CALL_OW 380
// end else
48610: GO 48629
// PrepareHuman ( false , i , skill ) ;
48612: LD_INT 0
48614: PPUSH
48615: LD_VAR 0 8
48619: PPUSH
48620: LD_VAR 0 4
48624: PPUSH
48625: CALL_OW 380
// un := CreateHuman ;
48629: LD_ADDR_VAR 0 14
48633: PUSH
48634: CALL_OW 44
48638: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48639: LD_ADDR_VAR 0 7
48643: PUSH
48644: LD_VAR 0 7
48648: PPUSH
48649: LD_INT 1
48651: PPUSH
48652: LD_VAR 0 14
48656: PPUSH
48657: CALL_OW 2
48661: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48662: LD_VAR 0 14
48666: PPUSH
48667: LD_VAR 0 12
48671: PUSH
48672: LD_INT 1
48674: ARRAY
48675: PPUSH
48676: CALL_OW 52
// end ;
48680: GO 48319
48682: POP
48683: POP
// end ;
48684: GO 47621
48686: POP
48687: POP
// result := result ^ buildings ;
48688: LD_ADDR_VAR 0 7
48692: PUSH
48693: LD_VAR 0 7
48697: PUSH
48698: LD_VAR 0 18
48702: ADD
48703: ST_TO_ADDR
// end else
48704: GO 48847
// begin for i = 1 to personel do
48706: LD_ADDR_VAR 0 8
48710: PUSH
48711: DOUBLE
48712: LD_INT 1
48714: DEC
48715: ST_TO_ADDR
48716: LD_VAR 0 6
48720: PUSH
48721: FOR_TO
48722: IFFALSE 48845
// begin if i > 4 then
48724: LD_VAR 0 8
48728: PUSH
48729: LD_INT 4
48731: GREATER
48732: IFFALSE 48736
// break ;
48734: GO 48845
// x := personel [ i ] ;
48736: LD_ADDR_VAR 0 13
48740: PUSH
48741: LD_VAR 0 6
48745: PUSH
48746: LD_VAR 0 8
48750: ARRAY
48751: ST_TO_ADDR
// if x = - 1 then
48752: LD_VAR 0 13
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: EQUAL
48761: IFFALSE 48765
// continue ;
48763: GO 48721
// PrepareHuman ( false , i , skill ) ;
48765: LD_INT 0
48767: PPUSH
48768: LD_VAR 0 8
48772: PPUSH
48773: LD_VAR 0 4
48777: PPUSH
48778: CALL_OW 380
// un := CreateHuman ;
48782: LD_ADDR_VAR 0 14
48786: PUSH
48787: CALL_OW 44
48791: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48792: LD_VAR 0 14
48796: PPUSH
48797: LD_VAR 0 1
48801: PPUSH
48802: CALL_OW 250
48806: PPUSH
48807: LD_VAR 0 1
48811: PPUSH
48812: CALL_OW 251
48816: PPUSH
48817: LD_INT 10
48819: PPUSH
48820: LD_INT 0
48822: PPUSH
48823: CALL_OW 50
// result := result ^ un ;
48827: LD_ADDR_VAR 0 7
48831: PUSH
48832: LD_VAR 0 7
48836: PUSH
48837: LD_VAR 0 14
48841: ADD
48842: ST_TO_ADDR
// end ;
48843: GO 48721
48845: POP
48846: POP
// end ; end ;
48847: LD_VAR 0 7
48851: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48852: LD_INT 0
48854: PPUSH
48855: PPUSH
48856: PPUSH
48857: PPUSH
48858: PPUSH
48859: PPUSH
48860: PPUSH
48861: PPUSH
48862: PPUSH
48863: PPUSH
48864: PPUSH
48865: PPUSH
48866: PPUSH
48867: PPUSH
48868: PPUSH
48869: PPUSH
// result := false ;
48870: LD_ADDR_VAR 0 3
48874: PUSH
48875: LD_INT 0
48877: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48878: LD_VAR 0 1
48882: NOT
48883: PUSH
48884: LD_VAR 0 1
48888: PPUSH
48889: CALL_OW 266
48893: PUSH
48894: LD_INT 32
48896: PUSH
48897: LD_INT 33
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: IN
48904: NOT
48905: OR
48906: IFFALSE 48910
// exit ;
48908: GO 50019
// nat := GetNation ( tower ) ;
48910: LD_ADDR_VAR 0 12
48914: PUSH
48915: LD_VAR 0 1
48919: PPUSH
48920: CALL_OW 248
48924: ST_TO_ADDR
// side := GetSide ( tower ) ;
48925: LD_ADDR_VAR 0 16
48929: PUSH
48930: LD_VAR 0 1
48934: PPUSH
48935: CALL_OW 255
48939: ST_TO_ADDR
// x := GetX ( tower ) ;
48940: LD_ADDR_VAR 0 10
48944: PUSH
48945: LD_VAR 0 1
48949: PPUSH
48950: CALL_OW 250
48954: ST_TO_ADDR
// y := GetY ( tower ) ;
48955: LD_ADDR_VAR 0 11
48959: PUSH
48960: LD_VAR 0 1
48964: PPUSH
48965: CALL_OW 251
48969: ST_TO_ADDR
// if not x or not y then
48970: LD_VAR 0 10
48974: NOT
48975: PUSH
48976: LD_VAR 0 11
48980: NOT
48981: OR
48982: IFFALSE 48986
// exit ;
48984: GO 50019
// weapon := 0 ;
48986: LD_ADDR_VAR 0 18
48990: PUSH
48991: LD_INT 0
48993: ST_TO_ADDR
// fac_list := [ ] ;
48994: LD_ADDR_VAR 0 17
48998: PUSH
48999: EMPTY
49000: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49001: LD_ADDR_VAR 0 6
49005: PUSH
49006: LD_VAR 0 1
49010: PPUSH
49011: CALL_OW 274
49015: PPUSH
49016: LD_VAR 0 2
49020: PPUSH
49021: LD_INT 0
49023: PPUSH
49024: CALL 46590 0 3
49028: PPUSH
49029: LD_INT 30
49031: PUSH
49032: LD_INT 3
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PPUSH
49039: CALL_OW 72
49043: ST_TO_ADDR
// if not factories then
49044: LD_VAR 0 6
49048: NOT
49049: IFFALSE 49053
// exit ;
49051: GO 50019
// for i in factories do
49053: LD_ADDR_VAR 0 8
49057: PUSH
49058: LD_VAR 0 6
49062: PUSH
49063: FOR_IN
49064: IFFALSE 49089
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49066: LD_ADDR_VAR 0 17
49070: PUSH
49071: LD_VAR 0 17
49075: PUSH
49076: LD_VAR 0 8
49080: PPUSH
49081: CALL_OW 478
49085: UNION
49086: ST_TO_ADDR
49087: GO 49063
49089: POP
49090: POP
// if not fac_list then
49091: LD_VAR 0 17
49095: NOT
49096: IFFALSE 49100
// exit ;
49098: GO 50019
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49100: LD_ADDR_VAR 0 5
49104: PUSH
49105: LD_INT 4
49107: PUSH
49108: LD_INT 5
49110: PUSH
49111: LD_INT 9
49113: PUSH
49114: LD_INT 10
49116: PUSH
49117: LD_INT 6
49119: PUSH
49120: LD_INT 7
49122: PUSH
49123: LD_INT 11
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 27
49137: PUSH
49138: LD_INT 28
49140: PUSH
49141: LD_INT 26
49143: PUSH
49144: LD_INT 30
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 43
49155: PUSH
49156: LD_INT 44
49158: PUSH
49159: LD_INT 46
49161: PUSH
49162: LD_INT 45
49164: PUSH
49165: LD_INT 47
49167: PUSH
49168: LD_INT 49
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: LIST
49183: PUSH
49184: LD_VAR 0 12
49188: ARRAY
49189: ST_TO_ADDR
// list := list isect fac_list ;
49190: LD_ADDR_VAR 0 5
49194: PUSH
49195: LD_VAR 0 5
49199: PUSH
49200: LD_VAR 0 17
49204: ISECT
49205: ST_TO_ADDR
// if not list then
49206: LD_VAR 0 5
49210: NOT
49211: IFFALSE 49215
// exit ;
49213: GO 50019
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49215: LD_VAR 0 12
49219: PUSH
49220: LD_INT 3
49222: EQUAL
49223: PUSH
49224: LD_INT 49
49226: PUSH
49227: LD_VAR 0 5
49231: IN
49232: AND
49233: PUSH
49234: LD_INT 31
49236: PPUSH
49237: LD_VAR 0 16
49241: PPUSH
49242: CALL_OW 321
49246: PUSH
49247: LD_INT 2
49249: EQUAL
49250: AND
49251: IFFALSE 49311
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49253: LD_INT 22
49255: PUSH
49256: LD_VAR 0 16
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 35
49267: PUSH
49268: LD_INT 49
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 91
49277: PUSH
49278: LD_VAR 0 1
49282: PUSH
49283: LD_INT 10
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: LIST
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: LIST
49295: PPUSH
49296: CALL_OW 69
49300: NOT
49301: IFFALSE 49311
// weapon := ru_time_lapser ;
49303: LD_ADDR_VAR 0 18
49307: PUSH
49308: LD_INT 49
49310: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49311: LD_VAR 0 12
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 2
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: IN
49326: PUSH
49327: LD_INT 11
49329: PUSH
49330: LD_VAR 0 5
49334: IN
49335: PUSH
49336: LD_INT 30
49338: PUSH
49339: LD_VAR 0 5
49343: IN
49344: OR
49345: AND
49346: PUSH
49347: LD_INT 6
49349: PPUSH
49350: LD_VAR 0 16
49354: PPUSH
49355: CALL_OW 321
49359: PUSH
49360: LD_INT 2
49362: EQUAL
49363: AND
49364: IFFALSE 49529
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49366: LD_INT 22
49368: PUSH
49369: LD_VAR 0 16
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: LD_INT 35
49383: PUSH
49384: LD_INT 11
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 35
49393: PUSH
49394: LD_INT 30
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 91
49408: PUSH
49409: LD_VAR 0 1
49413: PUSH
49414: LD_INT 18
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: LIST
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: LIST
49426: PPUSH
49427: CALL_OW 69
49431: NOT
49432: PUSH
49433: LD_INT 22
49435: PUSH
49436: LD_VAR 0 16
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: LD_INT 30
49450: PUSH
49451: LD_INT 32
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 30
49460: PUSH
49461: LD_INT 33
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 91
49475: PUSH
49476: LD_VAR 0 1
49480: PUSH
49481: LD_INT 12
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: LIST
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: LIST
49493: PUSH
49494: EMPTY
49495: LIST
49496: PPUSH
49497: CALL_OW 69
49501: PUSH
49502: LD_INT 2
49504: GREATER
49505: AND
49506: IFFALSE 49529
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49508: LD_ADDR_VAR 0 18
49512: PUSH
49513: LD_INT 11
49515: PUSH
49516: LD_INT 30
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_VAR 0 12
49527: ARRAY
49528: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49529: LD_VAR 0 18
49533: NOT
49534: PUSH
49535: LD_INT 40
49537: PPUSH
49538: LD_VAR 0 16
49542: PPUSH
49543: CALL_OW 321
49547: PUSH
49548: LD_INT 2
49550: EQUAL
49551: AND
49552: PUSH
49553: LD_INT 7
49555: PUSH
49556: LD_VAR 0 5
49560: IN
49561: PUSH
49562: LD_INT 28
49564: PUSH
49565: LD_VAR 0 5
49569: IN
49570: OR
49571: PUSH
49572: LD_INT 45
49574: PUSH
49575: LD_VAR 0 5
49579: IN
49580: OR
49581: AND
49582: IFFALSE 49836
// begin hex := GetHexInfo ( x , y ) ;
49584: LD_ADDR_VAR 0 4
49588: PUSH
49589: LD_VAR 0 10
49593: PPUSH
49594: LD_VAR 0 11
49598: PPUSH
49599: CALL_OW 546
49603: ST_TO_ADDR
// if hex [ 1 ] then
49604: LD_VAR 0 4
49608: PUSH
49609: LD_INT 1
49611: ARRAY
49612: IFFALSE 49616
// exit ;
49614: GO 50019
// height := hex [ 2 ] ;
49616: LD_ADDR_VAR 0 15
49620: PUSH
49621: LD_VAR 0 4
49625: PUSH
49626: LD_INT 2
49628: ARRAY
49629: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49630: LD_ADDR_VAR 0 14
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: LD_INT 3
49643: PUSH
49644: LD_INT 5
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: ST_TO_ADDR
// for i in tmp do
49653: LD_ADDR_VAR 0 8
49657: PUSH
49658: LD_VAR 0 14
49662: PUSH
49663: FOR_IN
49664: IFFALSE 49834
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49666: LD_ADDR_VAR 0 9
49670: PUSH
49671: LD_VAR 0 10
49675: PPUSH
49676: LD_VAR 0 8
49680: PPUSH
49681: LD_INT 5
49683: PPUSH
49684: CALL_OW 272
49688: PUSH
49689: LD_VAR 0 11
49693: PPUSH
49694: LD_VAR 0 8
49698: PPUSH
49699: LD_INT 5
49701: PPUSH
49702: CALL_OW 273
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49711: LD_VAR 0 9
49715: PUSH
49716: LD_INT 1
49718: ARRAY
49719: PPUSH
49720: LD_VAR 0 9
49724: PUSH
49725: LD_INT 2
49727: ARRAY
49728: PPUSH
49729: CALL_OW 488
49733: IFFALSE 49832
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49735: LD_ADDR_VAR 0 4
49739: PUSH
49740: LD_VAR 0 9
49744: PUSH
49745: LD_INT 1
49747: ARRAY
49748: PPUSH
49749: LD_VAR 0 9
49753: PUSH
49754: LD_INT 2
49756: ARRAY
49757: PPUSH
49758: CALL_OW 546
49762: ST_TO_ADDR
// if hex [ 1 ] then
49763: LD_VAR 0 4
49767: PUSH
49768: LD_INT 1
49770: ARRAY
49771: IFFALSE 49775
// continue ;
49773: GO 49663
// h := hex [ 2 ] ;
49775: LD_ADDR_VAR 0 13
49779: PUSH
49780: LD_VAR 0 4
49784: PUSH
49785: LD_INT 2
49787: ARRAY
49788: ST_TO_ADDR
// if h + 7 < height then
49789: LD_VAR 0 13
49793: PUSH
49794: LD_INT 7
49796: PLUS
49797: PUSH
49798: LD_VAR 0 15
49802: LESS
49803: IFFALSE 49832
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49805: LD_ADDR_VAR 0 18
49809: PUSH
49810: LD_INT 7
49812: PUSH
49813: LD_INT 28
49815: PUSH
49816: LD_INT 45
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: LIST
49823: PUSH
49824: LD_VAR 0 12
49828: ARRAY
49829: ST_TO_ADDR
// break ;
49830: GO 49834
// end ; end ; end ;
49832: GO 49663
49834: POP
49835: POP
// end ; if not weapon then
49836: LD_VAR 0 18
49840: NOT
49841: IFFALSE 49901
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49843: LD_ADDR_VAR 0 5
49847: PUSH
49848: LD_VAR 0 5
49852: PUSH
49853: LD_INT 11
49855: PUSH
49856: LD_INT 30
49858: PUSH
49859: LD_INT 49
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: LIST
49866: DIFF
49867: ST_TO_ADDR
// if not list then
49868: LD_VAR 0 5
49872: NOT
49873: IFFALSE 49877
// exit ;
49875: GO 50019
// weapon := list [ rand ( 1 , list ) ] ;
49877: LD_ADDR_VAR 0 18
49881: PUSH
49882: LD_VAR 0 5
49886: PUSH
49887: LD_INT 1
49889: PPUSH
49890: LD_VAR 0 5
49894: PPUSH
49895: CALL_OW 12
49899: ARRAY
49900: ST_TO_ADDR
// end ; if weapon then
49901: LD_VAR 0 18
49905: IFFALSE 50019
// begin tmp := CostOfWeapon ( weapon ) ;
49907: LD_ADDR_VAR 0 14
49911: PUSH
49912: LD_VAR 0 18
49916: PPUSH
49917: CALL_OW 451
49921: ST_TO_ADDR
// j := GetBase ( tower ) ;
49922: LD_ADDR_VAR 0 9
49926: PUSH
49927: LD_VAR 0 1
49931: PPUSH
49932: CALL_OW 274
49936: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49937: LD_VAR 0 9
49941: PPUSH
49942: LD_INT 1
49944: PPUSH
49945: CALL_OW 275
49949: PUSH
49950: LD_VAR 0 14
49954: PUSH
49955: LD_INT 1
49957: ARRAY
49958: GREATEREQUAL
49959: PUSH
49960: LD_VAR 0 9
49964: PPUSH
49965: LD_INT 2
49967: PPUSH
49968: CALL_OW 275
49972: PUSH
49973: LD_VAR 0 14
49977: PUSH
49978: LD_INT 2
49980: ARRAY
49981: GREATEREQUAL
49982: AND
49983: PUSH
49984: LD_VAR 0 9
49988: PPUSH
49989: LD_INT 3
49991: PPUSH
49992: CALL_OW 275
49996: PUSH
49997: LD_VAR 0 14
50001: PUSH
50002: LD_INT 3
50004: ARRAY
50005: GREATEREQUAL
50006: AND
50007: IFFALSE 50019
// result := weapon ;
50009: LD_ADDR_VAR 0 3
50013: PUSH
50014: LD_VAR 0 18
50018: ST_TO_ADDR
// end ; end ;
50019: LD_VAR 0 3
50023: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50024: LD_INT 0
50026: PPUSH
50027: PPUSH
// result := true ;
50028: LD_ADDR_VAR 0 3
50032: PUSH
50033: LD_INT 1
50035: ST_TO_ADDR
// if array1 = array2 then
50036: LD_VAR 0 1
50040: PUSH
50041: LD_VAR 0 2
50045: EQUAL
50046: IFFALSE 50106
// begin for i = 1 to array1 do
50048: LD_ADDR_VAR 0 4
50052: PUSH
50053: DOUBLE
50054: LD_INT 1
50056: DEC
50057: ST_TO_ADDR
50058: LD_VAR 0 1
50062: PUSH
50063: FOR_TO
50064: IFFALSE 50102
// if array1 [ i ] <> array2 [ i ] then
50066: LD_VAR 0 1
50070: PUSH
50071: LD_VAR 0 4
50075: ARRAY
50076: PUSH
50077: LD_VAR 0 2
50081: PUSH
50082: LD_VAR 0 4
50086: ARRAY
50087: NONEQUAL
50088: IFFALSE 50100
// begin result := false ;
50090: LD_ADDR_VAR 0 3
50094: PUSH
50095: LD_INT 0
50097: ST_TO_ADDR
// break ;
50098: GO 50102
// end ;
50100: GO 50063
50102: POP
50103: POP
// end else
50104: GO 50114
// result := false ;
50106: LD_ADDR_VAR 0 3
50110: PUSH
50111: LD_INT 0
50113: ST_TO_ADDR
// end ;
50114: LD_VAR 0 3
50118: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50119: LD_INT 0
50121: PPUSH
50122: PPUSH
// if not array1 or not array2 then
50123: LD_VAR 0 1
50127: NOT
50128: PUSH
50129: LD_VAR 0 2
50133: NOT
50134: OR
50135: IFFALSE 50139
// exit ;
50137: GO 50203
// result := true ;
50139: LD_ADDR_VAR 0 3
50143: PUSH
50144: LD_INT 1
50146: ST_TO_ADDR
// for i = 1 to array1 do
50147: LD_ADDR_VAR 0 4
50151: PUSH
50152: DOUBLE
50153: LD_INT 1
50155: DEC
50156: ST_TO_ADDR
50157: LD_VAR 0 1
50161: PUSH
50162: FOR_TO
50163: IFFALSE 50201
// if array1 [ i ] <> array2 [ i ] then
50165: LD_VAR 0 1
50169: PUSH
50170: LD_VAR 0 4
50174: ARRAY
50175: PUSH
50176: LD_VAR 0 2
50180: PUSH
50181: LD_VAR 0 4
50185: ARRAY
50186: NONEQUAL
50187: IFFALSE 50199
// begin result := false ;
50189: LD_ADDR_VAR 0 3
50193: PUSH
50194: LD_INT 0
50196: ST_TO_ADDR
// break ;
50197: GO 50201
// end ;
50199: GO 50162
50201: POP
50202: POP
// end ;
50203: LD_VAR 0 3
50207: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50208: LD_INT 0
50210: PPUSH
50211: PPUSH
50212: PPUSH
// pom := GetBase ( fac ) ;
50213: LD_ADDR_VAR 0 5
50217: PUSH
50218: LD_VAR 0 1
50222: PPUSH
50223: CALL_OW 274
50227: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50228: LD_ADDR_VAR 0 4
50232: PUSH
50233: LD_VAR 0 2
50237: PUSH
50238: LD_INT 1
50240: ARRAY
50241: PPUSH
50242: LD_VAR 0 2
50246: PUSH
50247: LD_INT 2
50249: ARRAY
50250: PPUSH
50251: LD_VAR 0 2
50255: PUSH
50256: LD_INT 3
50258: ARRAY
50259: PPUSH
50260: LD_VAR 0 2
50264: PUSH
50265: LD_INT 4
50267: ARRAY
50268: PPUSH
50269: CALL_OW 449
50273: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50274: LD_ADDR_VAR 0 3
50278: PUSH
50279: LD_VAR 0 5
50283: PPUSH
50284: LD_INT 1
50286: PPUSH
50287: CALL_OW 275
50291: PUSH
50292: LD_VAR 0 4
50296: PUSH
50297: LD_INT 1
50299: ARRAY
50300: GREATEREQUAL
50301: PUSH
50302: LD_VAR 0 5
50306: PPUSH
50307: LD_INT 2
50309: PPUSH
50310: CALL_OW 275
50314: PUSH
50315: LD_VAR 0 4
50319: PUSH
50320: LD_INT 2
50322: ARRAY
50323: GREATEREQUAL
50324: AND
50325: PUSH
50326: LD_VAR 0 5
50330: PPUSH
50331: LD_INT 3
50333: PPUSH
50334: CALL_OW 275
50338: PUSH
50339: LD_VAR 0 4
50343: PUSH
50344: LD_INT 3
50346: ARRAY
50347: GREATEREQUAL
50348: AND
50349: ST_TO_ADDR
// end ;
50350: LD_VAR 0 3
50354: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50355: LD_INT 0
50357: PPUSH
50358: PPUSH
50359: PPUSH
50360: PPUSH
// pom := GetBase ( building ) ;
50361: LD_ADDR_VAR 0 3
50365: PUSH
50366: LD_VAR 0 1
50370: PPUSH
50371: CALL_OW 274
50375: ST_TO_ADDR
// if not pom then
50376: LD_VAR 0 3
50380: NOT
50381: IFFALSE 50385
// exit ;
50383: GO 50555
// btype := GetBType ( building ) ;
50385: LD_ADDR_VAR 0 5
50389: PUSH
50390: LD_VAR 0 1
50394: PPUSH
50395: CALL_OW 266
50399: ST_TO_ADDR
// if btype = b_armoury then
50400: LD_VAR 0 5
50404: PUSH
50405: LD_INT 4
50407: EQUAL
50408: IFFALSE 50418
// btype := b_barracks ;
50410: LD_ADDR_VAR 0 5
50414: PUSH
50415: LD_INT 5
50417: ST_TO_ADDR
// if btype = b_depot then
50418: LD_VAR 0 5
50422: PUSH
50423: LD_INT 0
50425: EQUAL
50426: IFFALSE 50436
// btype := b_warehouse ;
50428: LD_ADDR_VAR 0 5
50432: PUSH
50433: LD_INT 1
50435: ST_TO_ADDR
// if btype = b_workshop then
50436: LD_VAR 0 5
50440: PUSH
50441: LD_INT 2
50443: EQUAL
50444: IFFALSE 50454
// btype := b_factory ;
50446: LD_ADDR_VAR 0 5
50450: PUSH
50451: LD_INT 3
50453: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50454: LD_ADDR_VAR 0 4
50458: PUSH
50459: LD_VAR 0 5
50463: PPUSH
50464: LD_VAR 0 1
50468: PPUSH
50469: CALL_OW 248
50473: PPUSH
50474: CALL_OW 450
50478: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50479: LD_ADDR_VAR 0 2
50483: PUSH
50484: LD_VAR 0 3
50488: PPUSH
50489: LD_INT 1
50491: PPUSH
50492: CALL_OW 275
50496: PUSH
50497: LD_VAR 0 4
50501: PUSH
50502: LD_INT 1
50504: ARRAY
50505: GREATEREQUAL
50506: PUSH
50507: LD_VAR 0 3
50511: PPUSH
50512: LD_INT 2
50514: PPUSH
50515: CALL_OW 275
50519: PUSH
50520: LD_VAR 0 4
50524: PUSH
50525: LD_INT 2
50527: ARRAY
50528: GREATEREQUAL
50529: AND
50530: PUSH
50531: LD_VAR 0 3
50535: PPUSH
50536: LD_INT 3
50538: PPUSH
50539: CALL_OW 275
50543: PUSH
50544: LD_VAR 0 4
50548: PUSH
50549: LD_INT 3
50551: ARRAY
50552: GREATEREQUAL
50553: AND
50554: ST_TO_ADDR
// end ;
50555: LD_VAR 0 2
50559: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50560: LD_INT 0
50562: PPUSH
50563: PPUSH
50564: PPUSH
// pom := GetBase ( building ) ;
50565: LD_ADDR_VAR 0 4
50569: PUSH
50570: LD_VAR 0 1
50574: PPUSH
50575: CALL_OW 274
50579: ST_TO_ADDR
// if not pom then
50580: LD_VAR 0 4
50584: NOT
50585: IFFALSE 50589
// exit ;
50587: GO 50690
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50589: LD_ADDR_VAR 0 5
50593: PUSH
50594: LD_VAR 0 2
50598: PPUSH
50599: LD_VAR 0 1
50603: PPUSH
50604: CALL_OW 248
50608: PPUSH
50609: CALL_OW 450
50613: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50614: LD_ADDR_VAR 0 3
50618: PUSH
50619: LD_VAR 0 4
50623: PPUSH
50624: LD_INT 1
50626: PPUSH
50627: CALL_OW 275
50631: PUSH
50632: LD_VAR 0 5
50636: PUSH
50637: LD_INT 1
50639: ARRAY
50640: GREATEREQUAL
50641: PUSH
50642: LD_VAR 0 4
50646: PPUSH
50647: LD_INT 2
50649: PPUSH
50650: CALL_OW 275
50654: PUSH
50655: LD_VAR 0 5
50659: PUSH
50660: LD_INT 2
50662: ARRAY
50663: GREATEREQUAL
50664: AND
50665: PUSH
50666: LD_VAR 0 4
50670: PPUSH
50671: LD_INT 3
50673: PPUSH
50674: CALL_OW 275
50678: PUSH
50679: LD_VAR 0 5
50683: PUSH
50684: LD_INT 3
50686: ARRAY
50687: GREATEREQUAL
50688: AND
50689: ST_TO_ADDR
// end ;
50690: LD_VAR 0 3
50694: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50695: LD_INT 0
50697: PPUSH
50698: PPUSH
50699: PPUSH
50700: PPUSH
50701: PPUSH
50702: PPUSH
50703: PPUSH
50704: PPUSH
50705: PPUSH
50706: PPUSH
50707: PPUSH
// result := false ;
50708: LD_ADDR_VAR 0 8
50712: PUSH
50713: LD_INT 0
50715: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50716: LD_VAR 0 5
50720: NOT
50721: PUSH
50722: LD_VAR 0 1
50726: NOT
50727: OR
50728: PUSH
50729: LD_VAR 0 2
50733: NOT
50734: OR
50735: PUSH
50736: LD_VAR 0 3
50740: NOT
50741: OR
50742: IFFALSE 50746
// exit ;
50744: GO 51560
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50746: LD_ADDR_VAR 0 14
50750: PUSH
50751: LD_VAR 0 1
50755: PPUSH
50756: LD_VAR 0 2
50760: PPUSH
50761: LD_VAR 0 3
50765: PPUSH
50766: LD_VAR 0 4
50770: PPUSH
50771: LD_VAR 0 5
50775: PUSH
50776: LD_INT 1
50778: ARRAY
50779: PPUSH
50780: CALL_OW 248
50784: PPUSH
50785: LD_INT 0
50787: PPUSH
50788: CALL 52797 0 6
50792: ST_TO_ADDR
// if not hexes then
50793: LD_VAR 0 14
50797: NOT
50798: IFFALSE 50802
// exit ;
50800: GO 51560
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50802: LD_ADDR_VAR 0 17
50806: PUSH
50807: LD_VAR 0 5
50811: PPUSH
50812: LD_INT 22
50814: PUSH
50815: LD_VAR 0 13
50819: PPUSH
50820: CALL_OW 255
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: LD_INT 30
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 30
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: LIST
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PPUSH
50861: CALL_OW 72
50865: ST_TO_ADDR
// for i = 1 to hexes do
50866: LD_ADDR_VAR 0 9
50870: PUSH
50871: DOUBLE
50872: LD_INT 1
50874: DEC
50875: ST_TO_ADDR
50876: LD_VAR 0 14
50880: PUSH
50881: FOR_TO
50882: IFFALSE 51558
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50884: LD_ADDR_VAR 0 13
50888: PUSH
50889: LD_VAR 0 14
50893: PUSH
50894: LD_VAR 0 9
50898: ARRAY
50899: PUSH
50900: LD_INT 1
50902: ARRAY
50903: PPUSH
50904: LD_VAR 0 14
50908: PUSH
50909: LD_VAR 0 9
50913: ARRAY
50914: PUSH
50915: LD_INT 2
50917: ARRAY
50918: PPUSH
50919: CALL_OW 428
50923: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50924: LD_VAR 0 14
50928: PUSH
50929: LD_VAR 0 9
50933: ARRAY
50934: PUSH
50935: LD_INT 1
50937: ARRAY
50938: PPUSH
50939: LD_VAR 0 14
50943: PUSH
50944: LD_VAR 0 9
50948: ARRAY
50949: PUSH
50950: LD_INT 2
50952: ARRAY
50953: PPUSH
50954: CALL_OW 351
50958: PUSH
50959: LD_VAR 0 14
50963: PUSH
50964: LD_VAR 0 9
50968: ARRAY
50969: PUSH
50970: LD_INT 1
50972: ARRAY
50973: PPUSH
50974: LD_VAR 0 14
50978: PUSH
50979: LD_VAR 0 9
50983: ARRAY
50984: PUSH
50985: LD_INT 2
50987: ARRAY
50988: PPUSH
50989: CALL_OW 488
50993: NOT
50994: OR
50995: PUSH
50996: LD_VAR 0 13
51000: PPUSH
51001: CALL_OW 247
51005: PUSH
51006: LD_INT 3
51008: EQUAL
51009: OR
51010: IFFALSE 51016
// exit ;
51012: POP
51013: POP
51014: GO 51560
// if not tmp then
51016: LD_VAR 0 13
51020: NOT
51021: IFFALSE 51025
// continue ;
51023: GO 50881
// result := true ;
51025: LD_ADDR_VAR 0 8
51029: PUSH
51030: LD_INT 1
51032: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51033: LD_VAR 0 6
51037: PUSH
51038: LD_VAR 0 13
51042: PPUSH
51043: CALL_OW 247
51047: PUSH
51048: LD_INT 2
51050: EQUAL
51051: AND
51052: PUSH
51053: LD_VAR 0 13
51057: PPUSH
51058: CALL_OW 263
51062: PUSH
51063: LD_INT 1
51065: EQUAL
51066: AND
51067: IFFALSE 51231
// begin if IsDrivenBy ( tmp ) then
51069: LD_VAR 0 13
51073: PPUSH
51074: CALL_OW 311
51078: IFFALSE 51082
// continue ;
51080: GO 50881
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51082: LD_VAR 0 6
51086: PPUSH
51087: LD_INT 3
51089: PUSH
51090: LD_INT 60
51092: PUSH
51093: EMPTY
51094: LIST
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 3
51102: PUSH
51103: LD_INT 55
51105: PUSH
51106: EMPTY
51107: LIST
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PPUSH
51117: CALL_OW 72
51121: IFFALSE 51229
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51123: LD_ADDR_VAR 0 18
51127: PUSH
51128: LD_VAR 0 6
51132: PPUSH
51133: LD_INT 3
51135: PUSH
51136: LD_INT 60
51138: PUSH
51139: EMPTY
51140: LIST
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: LD_INT 55
51151: PUSH
51152: EMPTY
51153: LIST
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PPUSH
51163: CALL_OW 72
51167: PUSH
51168: LD_INT 1
51170: ARRAY
51171: ST_TO_ADDR
// if IsInUnit ( driver ) then
51172: LD_VAR 0 18
51176: PPUSH
51177: CALL_OW 310
51181: IFFALSE 51192
// ComExit ( driver ) ;
51183: LD_VAR 0 18
51187: PPUSH
51188: CALL 75981 0 1
// AddComEnterUnit ( driver , tmp ) ;
51192: LD_VAR 0 18
51196: PPUSH
51197: LD_VAR 0 13
51201: PPUSH
51202: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51206: LD_VAR 0 18
51210: PPUSH
51211: LD_VAR 0 7
51215: PPUSH
51216: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51220: LD_VAR 0 18
51224: PPUSH
51225: CALL_OW 181
// end ; continue ;
51229: GO 50881
// end ; if not cleaners or not tmp in cleaners then
51231: LD_VAR 0 6
51235: NOT
51236: PUSH
51237: LD_VAR 0 13
51241: PUSH
51242: LD_VAR 0 6
51246: IN
51247: NOT
51248: OR
51249: IFFALSE 51556
// begin if dep then
51251: LD_VAR 0 17
51255: IFFALSE 51391
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51257: LD_ADDR_VAR 0 16
51261: PUSH
51262: LD_VAR 0 17
51266: PUSH
51267: LD_INT 1
51269: ARRAY
51270: PPUSH
51271: CALL_OW 250
51275: PPUSH
51276: LD_VAR 0 17
51280: PUSH
51281: LD_INT 1
51283: ARRAY
51284: PPUSH
51285: CALL_OW 254
51289: PPUSH
51290: LD_INT 5
51292: PPUSH
51293: CALL_OW 272
51297: PUSH
51298: LD_VAR 0 17
51302: PUSH
51303: LD_INT 1
51305: ARRAY
51306: PPUSH
51307: CALL_OW 251
51311: PPUSH
51312: LD_VAR 0 17
51316: PUSH
51317: LD_INT 1
51319: ARRAY
51320: PPUSH
51321: CALL_OW 254
51325: PPUSH
51326: LD_INT 5
51328: PPUSH
51329: CALL_OW 273
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51338: LD_VAR 0 16
51342: PUSH
51343: LD_INT 1
51345: ARRAY
51346: PPUSH
51347: LD_VAR 0 16
51351: PUSH
51352: LD_INT 2
51354: ARRAY
51355: PPUSH
51356: CALL_OW 488
51360: IFFALSE 51391
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51362: LD_VAR 0 13
51366: PPUSH
51367: LD_VAR 0 16
51371: PUSH
51372: LD_INT 1
51374: ARRAY
51375: PPUSH
51376: LD_VAR 0 16
51380: PUSH
51381: LD_INT 2
51383: ARRAY
51384: PPUSH
51385: CALL_OW 111
// continue ;
51389: GO 50881
// end ; end ; r := GetDir ( tmp ) ;
51391: LD_ADDR_VAR 0 15
51395: PUSH
51396: LD_VAR 0 13
51400: PPUSH
51401: CALL_OW 254
51405: ST_TO_ADDR
// if r = 5 then
51406: LD_VAR 0 15
51410: PUSH
51411: LD_INT 5
51413: EQUAL
51414: IFFALSE 51424
// r := 0 ;
51416: LD_ADDR_VAR 0 15
51420: PUSH
51421: LD_INT 0
51423: ST_TO_ADDR
// for j = r to 5 do
51424: LD_ADDR_VAR 0 10
51428: PUSH
51429: DOUBLE
51430: LD_VAR 0 15
51434: DEC
51435: ST_TO_ADDR
51436: LD_INT 5
51438: PUSH
51439: FOR_TO
51440: IFFALSE 51554
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51442: LD_ADDR_VAR 0 11
51446: PUSH
51447: LD_VAR 0 13
51451: PPUSH
51452: CALL_OW 250
51456: PPUSH
51457: LD_VAR 0 10
51461: PPUSH
51462: LD_INT 2
51464: PPUSH
51465: CALL_OW 272
51469: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51470: LD_ADDR_VAR 0 12
51474: PUSH
51475: LD_VAR 0 13
51479: PPUSH
51480: CALL_OW 251
51484: PPUSH
51485: LD_VAR 0 10
51489: PPUSH
51490: LD_INT 2
51492: PPUSH
51493: CALL_OW 273
51497: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51498: LD_VAR 0 11
51502: PPUSH
51503: LD_VAR 0 12
51507: PPUSH
51508: CALL_OW 488
51512: PUSH
51513: LD_VAR 0 11
51517: PPUSH
51518: LD_VAR 0 12
51522: PPUSH
51523: CALL_OW 428
51527: NOT
51528: AND
51529: IFFALSE 51552
// begin ComMoveXY ( tmp , _x , _y ) ;
51531: LD_VAR 0 13
51535: PPUSH
51536: LD_VAR 0 11
51540: PPUSH
51541: LD_VAR 0 12
51545: PPUSH
51546: CALL_OW 111
// break ;
51550: GO 51554
// end ; end ;
51552: GO 51439
51554: POP
51555: POP
// end ; end ;
51556: GO 50881
51558: POP
51559: POP
// end ;
51560: LD_VAR 0 8
51564: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51565: LD_INT 0
51567: PPUSH
// result := true ;
51568: LD_ADDR_VAR 0 3
51572: PUSH
51573: LD_INT 1
51575: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51576: LD_VAR 0 2
51580: PUSH
51581: LD_INT 24
51583: DOUBLE
51584: EQUAL
51585: IFTRUE 51595
51587: LD_INT 33
51589: DOUBLE
51590: EQUAL
51591: IFTRUE 51595
51593: GO 51620
51595: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51596: LD_ADDR_VAR 0 3
51600: PUSH
51601: LD_INT 32
51603: PPUSH
51604: LD_VAR 0 1
51608: PPUSH
51609: CALL_OW 321
51613: PUSH
51614: LD_INT 2
51616: EQUAL
51617: ST_TO_ADDR
51618: GO 51940
51620: LD_INT 20
51622: DOUBLE
51623: EQUAL
51624: IFTRUE 51628
51626: GO 51653
51628: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51629: LD_ADDR_VAR 0 3
51633: PUSH
51634: LD_INT 6
51636: PPUSH
51637: LD_VAR 0 1
51641: PPUSH
51642: CALL_OW 321
51646: PUSH
51647: LD_INT 2
51649: EQUAL
51650: ST_TO_ADDR
51651: GO 51940
51653: LD_INT 22
51655: DOUBLE
51656: EQUAL
51657: IFTRUE 51667
51659: LD_INT 36
51661: DOUBLE
51662: EQUAL
51663: IFTRUE 51667
51665: GO 51692
51667: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51668: LD_ADDR_VAR 0 3
51672: PUSH
51673: LD_INT 15
51675: PPUSH
51676: LD_VAR 0 1
51680: PPUSH
51681: CALL_OW 321
51685: PUSH
51686: LD_INT 2
51688: EQUAL
51689: ST_TO_ADDR
51690: GO 51940
51692: LD_INT 30
51694: DOUBLE
51695: EQUAL
51696: IFTRUE 51700
51698: GO 51725
51700: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51701: LD_ADDR_VAR 0 3
51705: PUSH
51706: LD_INT 20
51708: PPUSH
51709: LD_VAR 0 1
51713: PPUSH
51714: CALL_OW 321
51718: PUSH
51719: LD_INT 2
51721: EQUAL
51722: ST_TO_ADDR
51723: GO 51940
51725: LD_INT 28
51727: DOUBLE
51728: EQUAL
51729: IFTRUE 51739
51731: LD_INT 21
51733: DOUBLE
51734: EQUAL
51735: IFTRUE 51739
51737: GO 51764
51739: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51740: LD_ADDR_VAR 0 3
51744: PUSH
51745: LD_INT 21
51747: PPUSH
51748: LD_VAR 0 1
51752: PPUSH
51753: CALL_OW 321
51757: PUSH
51758: LD_INT 2
51760: EQUAL
51761: ST_TO_ADDR
51762: GO 51940
51764: LD_INT 16
51766: DOUBLE
51767: EQUAL
51768: IFTRUE 51772
51770: GO 51799
51772: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51773: LD_ADDR_VAR 0 3
51777: PUSH
51778: LD_EXP 62
51782: PPUSH
51783: LD_VAR 0 1
51787: PPUSH
51788: CALL_OW 321
51792: PUSH
51793: LD_INT 2
51795: EQUAL
51796: ST_TO_ADDR
51797: GO 51940
51799: LD_INT 19
51801: DOUBLE
51802: EQUAL
51803: IFTRUE 51813
51805: LD_INT 23
51807: DOUBLE
51808: EQUAL
51809: IFTRUE 51813
51811: GO 51840
51813: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51814: LD_ADDR_VAR 0 3
51818: PUSH
51819: LD_EXP 61
51823: PPUSH
51824: LD_VAR 0 1
51828: PPUSH
51829: CALL_OW 321
51833: PUSH
51834: LD_INT 2
51836: EQUAL
51837: ST_TO_ADDR
51838: GO 51940
51840: LD_INT 17
51842: DOUBLE
51843: EQUAL
51844: IFTRUE 51848
51846: GO 51873
51848: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51849: LD_ADDR_VAR 0 3
51853: PUSH
51854: LD_INT 39
51856: PPUSH
51857: LD_VAR 0 1
51861: PPUSH
51862: CALL_OW 321
51866: PUSH
51867: LD_INT 2
51869: EQUAL
51870: ST_TO_ADDR
51871: GO 51940
51873: LD_INT 18
51875: DOUBLE
51876: EQUAL
51877: IFTRUE 51881
51879: GO 51906
51881: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51882: LD_ADDR_VAR 0 3
51886: PUSH
51887: LD_INT 40
51889: PPUSH
51890: LD_VAR 0 1
51894: PPUSH
51895: CALL_OW 321
51899: PUSH
51900: LD_INT 2
51902: EQUAL
51903: ST_TO_ADDR
51904: GO 51940
51906: LD_INT 27
51908: DOUBLE
51909: EQUAL
51910: IFTRUE 51914
51912: GO 51939
51914: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51915: LD_ADDR_VAR 0 3
51919: PUSH
51920: LD_INT 35
51922: PPUSH
51923: LD_VAR 0 1
51927: PPUSH
51928: CALL_OW 321
51932: PUSH
51933: LD_INT 2
51935: EQUAL
51936: ST_TO_ADDR
51937: GO 51940
51939: POP
// end ;
51940: LD_VAR 0 3
51944: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51945: LD_INT 0
51947: PPUSH
51948: PPUSH
51949: PPUSH
51950: PPUSH
51951: PPUSH
51952: PPUSH
51953: PPUSH
51954: PPUSH
51955: PPUSH
51956: PPUSH
51957: PPUSH
// result := false ;
51958: LD_ADDR_VAR 0 6
51962: PUSH
51963: LD_INT 0
51965: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51966: LD_VAR 0 1
51970: NOT
51971: PUSH
51972: LD_VAR 0 1
51976: PPUSH
51977: CALL_OW 266
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: IN
51992: NOT
51993: OR
51994: PUSH
51995: LD_VAR 0 2
51999: NOT
52000: OR
52001: PUSH
52002: LD_VAR 0 5
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: LD_INT 3
52018: PUSH
52019: LD_INT 4
52021: PUSH
52022: LD_INT 5
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: IN
52033: NOT
52034: OR
52035: PUSH
52036: LD_VAR 0 3
52040: PPUSH
52041: LD_VAR 0 4
52045: PPUSH
52046: CALL_OW 488
52050: NOT
52051: OR
52052: IFFALSE 52056
// exit ;
52054: GO 52792
// side := GetSide ( depot ) ;
52056: LD_ADDR_VAR 0 9
52060: PUSH
52061: LD_VAR 0 1
52065: PPUSH
52066: CALL_OW 255
52070: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52071: LD_VAR 0 9
52075: PPUSH
52076: LD_VAR 0 2
52080: PPUSH
52081: CALL 51565 0 2
52085: NOT
52086: IFFALSE 52090
// exit ;
52088: GO 52792
// pom := GetBase ( depot ) ;
52090: LD_ADDR_VAR 0 10
52094: PUSH
52095: LD_VAR 0 1
52099: PPUSH
52100: CALL_OW 274
52104: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52105: LD_ADDR_VAR 0 11
52109: PUSH
52110: LD_VAR 0 2
52114: PPUSH
52115: LD_VAR 0 1
52119: PPUSH
52120: CALL_OW 248
52124: PPUSH
52125: CALL_OW 450
52129: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52130: LD_VAR 0 10
52134: PPUSH
52135: LD_INT 1
52137: PPUSH
52138: CALL_OW 275
52142: PUSH
52143: LD_VAR 0 11
52147: PUSH
52148: LD_INT 1
52150: ARRAY
52151: GREATEREQUAL
52152: PUSH
52153: LD_VAR 0 10
52157: PPUSH
52158: LD_INT 2
52160: PPUSH
52161: CALL_OW 275
52165: PUSH
52166: LD_VAR 0 11
52170: PUSH
52171: LD_INT 2
52173: ARRAY
52174: GREATEREQUAL
52175: AND
52176: PUSH
52177: LD_VAR 0 10
52181: PPUSH
52182: LD_INT 3
52184: PPUSH
52185: CALL_OW 275
52189: PUSH
52190: LD_VAR 0 11
52194: PUSH
52195: LD_INT 3
52197: ARRAY
52198: GREATEREQUAL
52199: AND
52200: NOT
52201: IFFALSE 52205
// exit ;
52203: GO 52792
// if GetBType ( depot ) = b_depot then
52205: LD_VAR 0 1
52209: PPUSH
52210: CALL_OW 266
52214: PUSH
52215: LD_INT 0
52217: EQUAL
52218: IFFALSE 52230
// dist := 28 else
52220: LD_ADDR_VAR 0 14
52224: PUSH
52225: LD_INT 28
52227: ST_TO_ADDR
52228: GO 52238
// dist := 36 ;
52230: LD_ADDR_VAR 0 14
52234: PUSH
52235: LD_INT 36
52237: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52238: LD_VAR 0 1
52242: PPUSH
52243: LD_VAR 0 3
52247: PPUSH
52248: LD_VAR 0 4
52252: PPUSH
52253: CALL_OW 297
52257: PUSH
52258: LD_VAR 0 14
52262: GREATER
52263: IFFALSE 52267
// exit ;
52265: GO 52792
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52267: LD_ADDR_VAR 0 12
52271: PUSH
52272: LD_VAR 0 2
52276: PPUSH
52277: LD_VAR 0 3
52281: PPUSH
52282: LD_VAR 0 4
52286: PPUSH
52287: LD_VAR 0 5
52291: PPUSH
52292: LD_VAR 0 1
52296: PPUSH
52297: CALL_OW 248
52301: PPUSH
52302: LD_INT 0
52304: PPUSH
52305: CALL 52797 0 6
52309: ST_TO_ADDR
// if not hexes then
52310: LD_VAR 0 12
52314: NOT
52315: IFFALSE 52319
// exit ;
52317: GO 52792
// hex := GetHexInfo ( x , y ) ;
52319: LD_ADDR_VAR 0 15
52323: PUSH
52324: LD_VAR 0 3
52328: PPUSH
52329: LD_VAR 0 4
52333: PPUSH
52334: CALL_OW 546
52338: ST_TO_ADDR
// if hex [ 1 ] then
52339: LD_VAR 0 15
52343: PUSH
52344: LD_INT 1
52346: ARRAY
52347: IFFALSE 52351
// exit ;
52349: GO 52792
// height := hex [ 2 ] ;
52351: LD_ADDR_VAR 0 13
52355: PUSH
52356: LD_VAR 0 15
52360: PUSH
52361: LD_INT 2
52363: ARRAY
52364: ST_TO_ADDR
// for i = 1 to hexes do
52365: LD_ADDR_VAR 0 7
52369: PUSH
52370: DOUBLE
52371: LD_INT 1
52373: DEC
52374: ST_TO_ADDR
52375: LD_VAR 0 12
52379: PUSH
52380: FOR_TO
52381: IFFALSE 52711
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52383: LD_VAR 0 12
52387: PUSH
52388: LD_VAR 0 7
52392: ARRAY
52393: PUSH
52394: LD_INT 1
52396: ARRAY
52397: PPUSH
52398: LD_VAR 0 12
52402: PUSH
52403: LD_VAR 0 7
52407: ARRAY
52408: PUSH
52409: LD_INT 2
52411: ARRAY
52412: PPUSH
52413: CALL_OW 488
52417: NOT
52418: PUSH
52419: LD_VAR 0 12
52423: PUSH
52424: LD_VAR 0 7
52428: ARRAY
52429: PUSH
52430: LD_INT 1
52432: ARRAY
52433: PPUSH
52434: LD_VAR 0 12
52438: PUSH
52439: LD_VAR 0 7
52443: ARRAY
52444: PUSH
52445: LD_INT 2
52447: ARRAY
52448: PPUSH
52449: CALL_OW 428
52453: PUSH
52454: LD_INT 0
52456: GREATER
52457: OR
52458: PUSH
52459: LD_VAR 0 12
52463: PUSH
52464: LD_VAR 0 7
52468: ARRAY
52469: PUSH
52470: LD_INT 1
52472: ARRAY
52473: PPUSH
52474: LD_VAR 0 12
52478: PUSH
52479: LD_VAR 0 7
52483: ARRAY
52484: PUSH
52485: LD_INT 2
52487: ARRAY
52488: PPUSH
52489: CALL_OW 351
52493: OR
52494: IFFALSE 52500
// exit ;
52496: POP
52497: POP
52498: GO 52792
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52500: LD_ADDR_VAR 0 8
52504: PUSH
52505: LD_VAR 0 12
52509: PUSH
52510: LD_VAR 0 7
52514: ARRAY
52515: PUSH
52516: LD_INT 1
52518: ARRAY
52519: PPUSH
52520: LD_VAR 0 12
52524: PUSH
52525: LD_VAR 0 7
52529: ARRAY
52530: PUSH
52531: LD_INT 2
52533: ARRAY
52534: PPUSH
52535: CALL_OW 546
52539: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52540: LD_VAR 0 8
52544: PUSH
52545: LD_INT 1
52547: ARRAY
52548: PUSH
52549: LD_VAR 0 8
52553: PUSH
52554: LD_INT 2
52556: ARRAY
52557: PUSH
52558: LD_VAR 0 13
52562: PUSH
52563: LD_INT 2
52565: PLUS
52566: GREATER
52567: OR
52568: PUSH
52569: LD_VAR 0 8
52573: PUSH
52574: LD_INT 2
52576: ARRAY
52577: PUSH
52578: LD_VAR 0 13
52582: PUSH
52583: LD_INT 2
52585: MINUS
52586: LESS
52587: OR
52588: PUSH
52589: LD_VAR 0 8
52593: PUSH
52594: LD_INT 3
52596: ARRAY
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: LD_INT 8
52603: PUSH
52604: LD_INT 9
52606: PUSH
52607: LD_INT 10
52609: PUSH
52610: LD_INT 11
52612: PUSH
52613: LD_INT 12
52615: PUSH
52616: LD_INT 13
52618: PUSH
52619: LD_INT 16
52621: PUSH
52622: LD_INT 17
52624: PUSH
52625: LD_INT 18
52627: PUSH
52628: LD_INT 19
52630: PUSH
52631: LD_INT 20
52633: PUSH
52634: LD_INT 21
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: IN
52652: NOT
52653: OR
52654: PUSH
52655: LD_VAR 0 8
52659: PUSH
52660: LD_INT 5
52662: ARRAY
52663: NOT
52664: OR
52665: PUSH
52666: LD_VAR 0 8
52670: PUSH
52671: LD_INT 6
52673: ARRAY
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: LD_INT 7
52683: PUSH
52684: LD_INT 9
52686: PUSH
52687: LD_INT 10
52689: PUSH
52690: LD_INT 11
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: IN
52701: NOT
52702: OR
52703: IFFALSE 52709
// exit ;
52705: POP
52706: POP
52707: GO 52792
// end ;
52709: GO 52380
52711: POP
52712: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52713: LD_VAR 0 9
52717: PPUSH
52718: LD_VAR 0 3
52722: PPUSH
52723: LD_VAR 0 4
52727: PPUSH
52728: LD_INT 20
52730: PPUSH
52731: CALL 44738 0 4
52735: PUSH
52736: LD_INT 4
52738: ARRAY
52739: IFFALSE 52743
// exit ;
52741: GO 52792
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52743: LD_VAR 0 2
52747: PUSH
52748: LD_INT 29
52750: PUSH
52751: LD_INT 30
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: IN
52758: PUSH
52759: LD_VAR 0 3
52763: PPUSH
52764: LD_VAR 0 4
52768: PPUSH
52769: LD_VAR 0 9
52773: PPUSH
52774: CALL_OW 440
52778: NOT
52779: AND
52780: IFFALSE 52784
// exit ;
52782: GO 52792
// result := true ;
52784: LD_ADDR_VAR 0 6
52788: PUSH
52789: LD_INT 1
52791: ST_TO_ADDR
// end ;
52792: LD_VAR 0 6
52796: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52797: LD_INT 0
52799: PPUSH
52800: PPUSH
52801: PPUSH
52802: PPUSH
52803: PPUSH
52804: PPUSH
52805: PPUSH
52806: PPUSH
52807: PPUSH
52808: PPUSH
52809: PPUSH
52810: PPUSH
52811: PPUSH
52812: PPUSH
52813: PPUSH
52814: PPUSH
52815: PPUSH
52816: PPUSH
52817: PPUSH
52818: PPUSH
52819: PPUSH
52820: PPUSH
52821: PPUSH
52822: PPUSH
52823: PPUSH
52824: PPUSH
52825: PPUSH
52826: PPUSH
52827: PPUSH
52828: PPUSH
52829: PPUSH
52830: PPUSH
52831: PPUSH
52832: PPUSH
52833: PPUSH
52834: PPUSH
52835: PPUSH
52836: PPUSH
52837: PPUSH
52838: PPUSH
52839: PPUSH
52840: PPUSH
52841: PPUSH
52842: PPUSH
52843: PPUSH
52844: PPUSH
52845: PPUSH
52846: PPUSH
52847: PPUSH
52848: PPUSH
52849: PPUSH
52850: PPUSH
52851: PPUSH
52852: PPUSH
52853: PPUSH
52854: PPUSH
52855: PPUSH
52856: PPUSH
// result = [ ] ;
52857: LD_ADDR_VAR 0 7
52861: PUSH
52862: EMPTY
52863: ST_TO_ADDR
// temp_list = [ ] ;
52864: LD_ADDR_VAR 0 9
52868: PUSH
52869: EMPTY
52870: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52871: LD_VAR 0 4
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: LD_INT 2
52884: PUSH
52885: LD_INT 3
52887: PUSH
52888: LD_INT 4
52890: PUSH
52891: LD_INT 5
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: IN
52902: NOT
52903: PUSH
52904: LD_VAR 0 1
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: IN
52919: PUSH
52920: LD_VAR 0 5
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: LD_INT 2
52930: PUSH
52931: LD_INT 3
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: LIST
52938: IN
52939: NOT
52940: AND
52941: OR
52942: IFFALSE 52946
// exit ;
52944: GO 71337
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52946: LD_VAR 0 1
52950: PUSH
52951: LD_INT 6
52953: PUSH
52954: LD_INT 7
52956: PUSH
52957: LD_INT 8
52959: PUSH
52960: LD_INT 13
52962: PUSH
52963: LD_INT 12
52965: PUSH
52966: LD_INT 15
52968: PUSH
52969: LD_INT 11
52971: PUSH
52972: LD_INT 14
52974: PUSH
52975: LD_INT 10
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: IN
52989: IFFALSE 52999
// btype = b_lab ;
52991: LD_ADDR_VAR 0 1
52995: PUSH
52996: LD_INT 6
52998: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52999: LD_VAR 0 6
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: LIST
53017: IN
53018: NOT
53019: PUSH
53020: LD_VAR 0 1
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: LD_INT 3
53036: PUSH
53037: LD_INT 6
53039: PUSH
53040: LD_INT 36
53042: PUSH
53043: LD_INT 4
53045: PUSH
53046: LD_INT 5
53048: PUSH
53049: LD_INT 31
53051: PUSH
53052: LD_INT 32
53054: PUSH
53055: LD_INT 33
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: IN
53071: NOT
53072: PUSH
53073: LD_VAR 0 6
53077: PUSH
53078: LD_INT 1
53080: EQUAL
53081: AND
53082: OR
53083: PUSH
53084: LD_VAR 0 1
53088: PUSH
53089: LD_INT 2
53091: PUSH
53092: LD_INT 3
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: IN
53099: NOT
53100: PUSH
53101: LD_VAR 0 6
53105: PUSH
53106: LD_INT 2
53108: EQUAL
53109: AND
53110: OR
53111: IFFALSE 53121
// mode = 0 ;
53113: LD_ADDR_VAR 0 6
53117: PUSH
53118: LD_INT 0
53120: ST_TO_ADDR
// case mode of 0 :
53121: LD_VAR 0 6
53125: PUSH
53126: LD_INT 0
53128: DOUBLE
53129: EQUAL
53130: IFTRUE 53134
53132: GO 64587
53134: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53135: LD_ADDR_VAR 0 11
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: LD_INT 2
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: LD_INT 2
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: LD_INT 3
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: LD_INT 3
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: LD_INT 2
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53328: LD_ADDR_VAR 0 12
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 2
53462: NEG
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 3
53485: NEG
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 3
53496: NEG
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53524: LD_ADDR_VAR 0 13
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: LD_INT 2
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 2
53627: PUSH
53628: LD_INT 2
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 2
53671: NEG
53672: PUSH
53673: LD_INT 3
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 3
53683: NEG
53684: PUSH
53685: LD_INT 2
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 3
53695: NEG
53696: PUSH
53697: LD_INT 3
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53723: LD_ADDR_VAR 0 14
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: LD_INT 2
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: LD_INT 2
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: LD_INT 3
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 3
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 2
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53919: LD_ADDR_VAR 0 15
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 2
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 2
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 3
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 3
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54112: LD_ADDR_VAR 0 16
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 2
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: LD_INT 2
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: NEG
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 2
54247: NEG
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 3
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 3
54269: PUSH
54270: LD_INT 3
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 2
54279: PUSH
54280: LD_INT 3
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54305: LD_ADDR_VAR 0 17
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: LD_INT 2
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54535: LD_ADDR_VAR 0 18
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: LD_INT 2
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 2
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 2
54670: PUSH
54671: LD_INT 2
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: LD_INT 2
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: NEG
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: NEG
54735: PUSH
54736: LD_INT 2
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54765: LD_ADDR_VAR 0 19
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: NEG
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 2
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: LD_INT 2
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 2
54941: NEG
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 2
54964: NEG
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54995: LD_ADDR_VAR 0 20
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: LD_INT 2
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: LD_INT 2
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: NEG
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55225: LD_ADDR_VAR 0 21
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: LD_INT 2
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 2
55412: NEG
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: LD_INT 2
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55455: LD_ADDR_VAR 0 22
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 2
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: LD_INT 2
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: LD_INT 2
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: NEG
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: LD_INT 2
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55685: LD_ADDR_VAR 0 23
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 2
55820: PUSH
55821: LD_INT 2
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 2
55872: NEG
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 2
55884: NEG
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 2
55896: NEG
55897: PUSH
55898: LD_INT 3
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 3
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 2
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55965: LD_ADDR_VAR 0 24
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: LD_INT 2
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 2
56152: NEG
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 2
56164: NEG
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: LD_INT 2
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 3
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 3
56208: PUSH
56209: LD_INT 2
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56241: LD_ADDR_VAR 0 25
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 2
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 2
56428: NEG
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: LD_INT 2
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 3
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 3
56462: PUSH
56463: LD_INT 2
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: LD_INT 3
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: LD_INT 3
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56515: LD_ADDR_VAR 0 26
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 1
56584: NEG
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: LD_INT 2
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: LD_INT 2
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 2
56691: NEG
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: LD_INT 2
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: LD_INT 3
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 3
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: LD_INT 2
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 2
56757: NEG
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56791: LD_ADDR_VAR 0 27
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 2
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 2
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 2
56978: NEG
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 3
57024: NEG
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 3
57036: NEG
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57071: LD_ADDR_VAR 0 28
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: LD_INT 2
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: LD_INT 2
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: LD_INT 2
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 2
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 2
57247: NEG
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 2
57258: NEG
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 2
57270: NEG
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: LD_INT 3
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: LD_INT 3
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 3
57306: NEG
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 3
57318: NEG
57319: PUSH
57320: LD_INT 2
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57353: LD_ADDR_VAR 0 29
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 2
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 2
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 2
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: LD_INT 2
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 2
57531: NEG
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: LD_INT 3
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 2
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 3
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 3
57597: NEG
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57632: LD_ADDR_VAR 0 30
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: NEG
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: LD_INT 2
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 2
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 2
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 2
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: LD_INT 2
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 2
57798: NEG
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 2
57809: NEG
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: LD_INT 3
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: LD_INT 2
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 3
57844: PUSH
57845: LD_INT 2
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: PUSH
57855: LD_INT 3
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 2
57864: NEG
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 3
57875: NEG
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57910: LD_ADDR_VAR 0 31
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: NEG
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: LD_INT 2
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: LD_INT 2
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: LD_INT 2
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 2
58075: NEG
58076: PUSH
58077: LD_INT 1
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 2
58087: NEG
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 2
58099: NEG
58100: PUSH
58101: LD_INT 3
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 3
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: LD_INT 3
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 1
58142: NEG
58143: PUSH
58144: LD_INT 2
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 3
58153: NEG
58154: PUSH
58155: LD_INT 2
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58188: LD_ADDR_VAR 0 32
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: LD_INT 1
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: LD_INT 1
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: LD_INT 2
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 2
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: LD_INT 2
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: NEG
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 2
58365: NEG
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: LD_INT 3
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 3
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: LD_INT 3
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 2
58420: NEG
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 3
58431: NEG
58432: PUSH
58433: LD_INT 1
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58466: LD_ADDR_VAR 0 33
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: NEG
58536: PUSH
58537: LD_INT 1
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: LD_INT 2
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 1
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 2
58644: NEG
58645: PUSH
58646: LD_INT 2
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 2
58656: NEG
58657: PUSH
58658: LD_INT 3
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 2
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 3
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: LD_INT 3
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: LD_INT 2
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 3
58710: NEG
58711: PUSH
58712: LD_INT 2
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58745: LD_ADDR_VAR 0 34
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 1
58803: NEG
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 1
58814: NEG
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: LD_INT 1
58852: NEG
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 2
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 2
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: LD_INT 1
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 2
58901: NEG
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: LD_INT 2
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: LD_INT 3
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: LD_INT 2
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 3
58959: PUSH
58960: LD_INT 2
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: LD_INT 3
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 2
58979: NEG
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 3
58990: NEG
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59025: LD_ADDR_VAR 0 35
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: LD_INT 1
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 2
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: LD_INT 1
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59137: LD_ADDR_VAR 0 36
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 0
59154: PUSH
59155: LD_INT 1
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 1
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: LD_INT 1
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: LD_INT 2
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: LD_INT 2
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59249: LD_ADDR_VAR 0 37
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: LD_INT 1
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59361: LD_ADDR_VAR 0 38
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: NEG
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59473: LD_ADDR_VAR 0 39
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: LD_INT 1
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: LD_INT 2
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: LD_INT 2
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59585: LD_ADDR_VAR 0 40
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59697: LD_ADDR_VAR 0 41
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: LD_INT 0
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 1
59755: NEG
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: LD_INT 2
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: LD_INT 1
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 2
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 2
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 2
59821: PUSH
59822: LD_INT 2
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: LD_INT 2
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: NEG
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 2
59852: NEG
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 2
59863: NEG
59864: PUSH
59865: LD_INT 1
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 2
59875: NEG
59876: PUSH
59877: LD_INT 2
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 2
59887: NEG
59888: PUSH
59889: LD_INT 3
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 3
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 3
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 3
59930: PUSH
59931: LD_INT 2
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 3
59940: PUSH
59941: LD_INT 3
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 2
59950: PUSH
59951: LD_INT 3
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 2
59960: NEG
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 3
59971: NEG
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 3
59982: NEG
59983: PUSH
59984: LD_INT 1
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 3
59994: NEG
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 3
60006: NEG
60007: PUSH
60008: LD_INT 3
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60047: LD_ADDR_VAR 0 42
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: PUSH
60076: LD_INT 0
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 1
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: LD_INT 2
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 0
60140: PUSH
60141: LD_INT 2
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 2
60162: PUSH
60163: LD_INT 1
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 2
60172: PUSH
60173: LD_INT 2
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: LD_INT 2
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: LD_INT 2
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 2
60213: NEG
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: LD_INT 2
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PUSH
60239: LD_INT 3
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: LD_INT 3
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: LD_INT 3
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: LD_INT 2
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 3
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 3
60293: PUSH
60294: LD_INT 3
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: LD_INT 3
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: LD_INT 3
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: LD_INT 3
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: LD_INT 2
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 3
60344: NEG
60345: PUSH
60346: LD_INT 2
60348: NEG
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 3
60356: NEG
60357: PUSH
60358: LD_INT 3
60360: NEG
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60397: LD_ADDR_VAR 0 43
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: LD_INT 2
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 2
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: LD_INT 1
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 2
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 2
60522: PUSH
60523: LD_INT 1
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: LD_INT 2
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: LD_INT 2
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 2
60563: NEG
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 2
60574: NEG
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: LD_INT 3
60590: NEG
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: LD_INT 3
60601: NEG
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 1
60609: PUSH
60610: LD_INT 2
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 2
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 3
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 3
60641: PUSH
60642: LD_INT 1
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 1
60651: PUSH
60652: LD_INT 3
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: LD_INT 3
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 1
60671: NEG
60672: PUSH
60673: LD_INT 2
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 2
60682: NEG
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 3
60693: NEG
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 3
60704: NEG
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60745: LD_ADDR_VAR 0 44
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 1
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: LD_INT 1
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 1
60826: NEG
60827: PUSH
60828: LD_INT 2
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: LD_INT 1
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 2
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 2
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 2
60869: PUSH
60870: LD_INT 2
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: LD_INT 2
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 2
60900: NEG
60901: PUSH
60902: LD_INT 0
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 2
60911: NEG
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 2
60923: NEG
60924: PUSH
60925: LD_INT 2
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 2
60935: NEG
60936: PUSH
60937: LD_INT 3
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 2
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 3
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 3
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 3
60978: PUSH
60979: LD_INT 2
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 3
60988: PUSH
60989: LD_INT 3
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 2
60998: PUSH
60999: LD_INT 3
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 2
61008: NEG
61009: PUSH
61010: LD_INT 1
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 3
61019: NEG
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 3
61030: NEG
61031: PUSH
61032: LD_INT 1
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 3
61042: NEG
61043: PUSH
61044: LD_INT 2
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 3
61054: NEG
61055: PUSH
61056: LD_INT 3
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61095: LD_ADDR_VAR 0 45
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: LD_INT 1
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 1
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: LD_INT 1
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: LD_INT 1
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: LD_INT 1
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: LD_INT 2
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: LD_INT 2
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 2
61210: PUSH
61211: LD_INT 1
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 2
61220: PUSH
61221: LD_INT 2
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 1
61230: PUSH
61231: LD_INT 2
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: LD_INT 2
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 2
61273: NEG
61274: PUSH
61275: LD_INT 2
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: LD_INT 3
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 1
61297: NEG
61298: PUSH
61299: LD_INT 3
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: LD_INT 3
61312: NEG
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 1
61320: PUSH
61321: LD_INT 2
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 3
61331: PUSH
61332: LD_INT 2
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 3
61341: PUSH
61342: LD_INT 3
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 2
61351: PUSH
61352: LD_INT 3
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 1
61361: PUSH
61362: LD_INT 3
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: LD_INT 3
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 1
61381: NEG
61382: PUSH
61383: LD_INT 2
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 3
61392: NEG
61393: PUSH
61394: LD_INT 2
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 3
61404: NEG
61405: PUSH
61406: LD_INT 3
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61445: LD_ADDR_VAR 0 46
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 1
61483: PUSH
61484: LD_INT 1
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: LD_INT 1
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 1
61514: NEG
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: LD_INT 2
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 2
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 1
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 2
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 2
61570: PUSH
61571: LD_INT 1
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: LD_INT 2
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: LD_INT 2
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 2
61611: NEG
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 2
61622: NEG
61623: PUSH
61624: LD_INT 1
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: LD_INT 3
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: LD_INT 3
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 1
61657: PUSH
61658: LD_INT 2
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 3
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 3
61689: PUSH
61690: LD_INT 1
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: LD_INT 3
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: LD_INT 3
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 1
61719: NEG
61720: PUSH
61721: LD_INT 2
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 2
61730: NEG
61731: PUSH
61732: LD_INT 1
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 3
61741: NEG
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 3
61752: NEG
61753: PUSH
61754: LD_INT 1
61756: NEG
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61793: LD_ADDR_VAR 0 47
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: LD_INT 1
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 1
61874: NEG
61875: PUSH
61876: LD_INT 2
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: LD_INT 2
61889: NEG
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: LD_INT 1
61900: NEG
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 2
61908: NEG
61909: PUSH
61910: LD_INT 1
61912: NEG
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 2
61920: NEG
61921: PUSH
61922: LD_INT 2
61924: NEG
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61944: LD_ADDR_VAR 0 48
61948: PUSH
61949: LD_INT 0
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: LD_INT 1
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: LD_INT 0
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 1
62013: NEG
62014: PUSH
62015: LD_INT 1
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 1
62025: NEG
62026: PUSH
62027: LD_INT 2
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: LD_INT 2
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 2
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 2
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62091: LD_ADDR_VAR 0 49
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 1
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: NEG
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: NEG
62161: PUSH
62162: LD_INT 1
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 2
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 2
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 2
62203: PUSH
62204: LD_INT 2
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 1
62213: PUSH
62214: LD_INT 2
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62235: LD_ADDR_VAR 0 50
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: LD_INT 1
62255: NEG
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: LD_INT 1
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: LD_INT 1
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: NEG
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 2
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 2
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 1
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: LD_INT 2
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 1
62356: NEG
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62379: LD_ADDR_VAR 0 51
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: LD_INT 0
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: LD_INT 1
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: PUSH
62461: LD_INT 2
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 0
62470: PUSH
62471: LD_INT 2
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: NEG
62481: PUSH
62482: LD_INT 1
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 2
62491: NEG
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 2
62502: NEG
62503: PUSH
62504: LD_INT 1
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62526: LD_ADDR_VAR 0 52
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: LD_INT 1
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 1
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 1
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 1
62584: NEG
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: NEG
62596: PUSH
62597: LD_INT 1
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: LD_INT 2
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: LD_INT 1
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 2
62630: NEG
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 2
62641: NEG
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 2
62653: NEG
62654: PUSH
62655: LD_INT 2
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62677: LD_ADDR_VAR 0 53
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: LD_INT 1
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 1
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: NEG
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 1
62746: NEG
62747: PUSH
62748: LD_INT 1
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: LD_INT 2
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: LD_INT 2
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: LD_INT 1
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 2
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: LD_INT 1
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 2
62812: PUSH
62813: LD_INT 2
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: LD_INT 2
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: LD_INT 2
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 1
62842: NEG
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 2
62853: NEG
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 2
62864: NEG
62865: PUSH
62866: LD_INT 1
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 2
62876: NEG
62877: PUSH
62878: LD_INT 2
62880: NEG
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62907: LD_ADDR_VAR 0 54
62911: PUSH
62912: LD_INT 0
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 0
62924: PUSH
62925: LD_INT 1
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 1
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 1
62945: PUSH
62946: LD_INT 1
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: LD_INT 1
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 1
62976: NEG
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: LD_INT 2
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: LD_INT 2
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 2
63022: PUSH
63023: LD_INT 0
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 2
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 2
63042: PUSH
63043: LD_INT 2
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 1
63052: PUSH
63053: LD_INT 2
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: LD_INT 2
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 1
63072: NEG
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 2
63083: NEG
63084: PUSH
63085: LD_INT 0
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 2
63094: NEG
63095: PUSH
63096: LD_INT 1
63098: NEG
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 2
63106: NEG
63107: PUSH
63108: LD_INT 2
63110: NEG
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63137: LD_ADDR_VAR 0 55
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: LD_INT 1
63157: NEG
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 1
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 1
63175: PUSH
63176: LD_INT 1
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: LD_INT 1
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 1
63195: NEG
63196: PUSH
63197: LD_INT 0
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 1
63206: NEG
63207: PUSH
63208: LD_INT 1
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: LD_INT 2
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: LD_INT 2
63233: NEG
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: LD_INT 1
63244: NEG
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 2
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 2
63262: PUSH
63263: LD_INT 1
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 2
63272: PUSH
63273: LD_INT 2
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 1
63282: PUSH
63283: LD_INT 2
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: LD_INT 2
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 1
63302: NEG
63303: PUSH
63304: LD_INT 1
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 2
63313: NEG
63314: PUSH
63315: LD_INT 0
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 2
63324: NEG
63325: PUSH
63326: LD_INT 1
63328: NEG
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 2
63336: NEG
63337: PUSH
63338: LD_INT 2
63340: NEG
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63367: LD_ADDR_VAR 0 56
63371: PUSH
63372: LD_INT 0
63374: PUSH
63375: LD_INT 0
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: LD_INT 1
63387: NEG
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 1
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 1
63405: PUSH
63406: LD_INT 1
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: LD_INT 1
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 1
63425: NEG
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 1
63436: NEG
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 1
63448: NEG
63449: PUSH
63450: LD_INT 2
63452: NEG
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 0
63460: PUSH
63461: LD_INT 2
63463: NEG
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 2
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 2
63492: PUSH
63493: LD_INT 1
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 2
63502: PUSH
63503: LD_INT 2
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 1
63512: PUSH
63513: LD_INT 2
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 0
63522: PUSH
63523: LD_INT 2
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 1
63532: NEG
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 2
63543: NEG
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 2
63554: NEG
63555: PUSH
63556: LD_INT 1
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 2
63566: NEG
63567: PUSH
63568: LD_INT 2
63570: NEG
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63597: LD_ADDR_VAR 0 57
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: LD_INT 0
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 0
63614: PUSH
63615: LD_INT 1
63617: NEG
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 1
63625: PUSH
63626: LD_INT 0
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 1
63635: PUSH
63636: LD_INT 1
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: LD_INT 1
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 1
63655: NEG
63656: PUSH
63657: LD_INT 0
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 1
63666: NEG
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: LD_INT 2
63682: NEG
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: LD_INT 2
63693: NEG
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 2
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 2
63722: PUSH
63723: LD_INT 1
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 2
63732: PUSH
63733: LD_INT 2
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 1
63742: PUSH
63743: LD_INT 2
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 0
63752: PUSH
63753: LD_INT 2
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 1
63762: NEG
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 2
63773: NEG
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 2
63784: NEG
63785: PUSH
63786: LD_INT 1
63788: NEG
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 2
63796: NEG
63797: PUSH
63798: LD_INT 2
63800: NEG
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63827: LD_ADDR_VAR 0 58
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: LD_INT 0
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 0
63844: PUSH
63845: LD_INT 1
63847: NEG
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 1
63855: PUSH
63856: LD_INT 0
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 1
63865: PUSH
63866: LD_INT 1
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: LD_INT 1
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 1
63885: NEG
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 1
63896: NEG
63897: PUSH
63898: LD_INT 1
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: LD_INT 2
63912: NEG
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: LD_INT 2
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 1
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 2
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 2
63952: PUSH
63953: LD_INT 1
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 2
63962: PUSH
63963: LD_INT 2
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: LD_INT 2
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 0
63982: PUSH
63983: LD_INT 2
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 1
63992: NEG
63993: PUSH
63994: LD_INT 1
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 2
64003: NEG
64004: PUSH
64005: LD_INT 0
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 2
64014: NEG
64015: PUSH
64016: LD_INT 1
64018: NEG
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 2
64026: NEG
64027: PUSH
64028: LD_INT 2
64030: NEG
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64057: LD_ADDR_VAR 0 59
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: LD_INT 1
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: LD_INT 0
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: LD_INT 1
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 0
64105: PUSH
64106: LD_INT 1
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: PUSH
64117: LD_INT 0
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 1
64126: NEG
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64145: LD_ADDR_VAR 0 60
64149: PUSH
64150: LD_INT 0
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 0
64162: PUSH
64163: LD_INT 1
64165: NEG
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 1
64173: PUSH
64174: LD_INT 0
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 1
64183: PUSH
64184: LD_INT 1
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 0
64193: PUSH
64194: LD_INT 1
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 1
64203: NEG
64204: PUSH
64205: LD_INT 0
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 1
64214: NEG
64215: PUSH
64216: LD_INT 1
64218: NEG
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64233: LD_ADDR_VAR 0 61
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 0
64250: PUSH
64251: LD_INT 1
64253: NEG
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: LD_INT 0
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: LD_INT 1
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 0
64281: PUSH
64282: LD_INT 1
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 1
64291: NEG
64292: PUSH
64293: LD_INT 0
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 1
64302: NEG
64303: PUSH
64304: LD_INT 1
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64321: LD_ADDR_VAR 0 62
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: LD_INT 1
64341: NEG
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 1
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 1
64359: PUSH
64360: LD_INT 1
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: LD_INT 1
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 1
64379: NEG
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: PUSH
64392: LD_INT 1
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64409: LD_ADDR_VAR 0 63
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 1
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: LD_INT 1
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: LD_INT 1
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: LD_INT 0
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64497: LD_ADDR_VAR 0 64
64501: PUSH
64502: LD_INT 0
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 0
64514: PUSH
64515: LD_INT 1
64517: NEG
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 1
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 1
64535: PUSH
64536: LD_INT 1
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 0
64545: PUSH
64546: LD_INT 1
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 1
64555: NEG
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 1
64566: NEG
64567: PUSH
64568: LD_INT 1
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: ST_TO_ADDR
// end ; 1 :
64585: GO 70482
64587: LD_INT 1
64589: DOUBLE
64590: EQUAL
64591: IFTRUE 64595
64593: GO 67218
64595: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64596: LD_ADDR_VAR 0 11
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: LD_INT 3
64607: NEG
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: LD_INT 3
64618: NEG
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 1
64626: PUSH
64627: LD_INT 2
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: LIST
64639: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64640: LD_ADDR_VAR 0 12
64644: PUSH
64645: LD_INT 2
64647: PUSH
64648: LD_INT 1
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 3
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 3
64668: PUSH
64669: LD_INT 1
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: LIST
64680: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64681: LD_ADDR_VAR 0 13
64685: PUSH
64686: LD_INT 3
64688: PUSH
64689: LD_INT 2
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 3
64698: PUSH
64699: LD_INT 3
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 2
64708: PUSH
64709: LD_INT 3
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: LIST
64720: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64721: LD_ADDR_VAR 0 14
64725: PUSH
64726: LD_INT 1
64728: PUSH
64729: LD_INT 3
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: LD_INT 3
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 1
64748: NEG
64749: PUSH
64750: LD_INT 2
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: LIST
64761: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64762: LD_ADDR_VAR 0 15
64766: PUSH
64767: LD_INT 2
64769: NEG
64770: PUSH
64771: LD_INT 1
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 3
64780: NEG
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 3
64791: NEG
64792: PUSH
64793: LD_INT 1
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: LIST
64805: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64806: LD_ADDR_VAR 0 16
64810: PUSH
64811: LD_INT 2
64813: NEG
64814: PUSH
64815: LD_INT 3
64817: NEG
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 3
64825: NEG
64826: PUSH
64827: LD_INT 2
64829: NEG
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 3
64837: NEG
64838: PUSH
64839: LD_INT 3
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: LIST
64851: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64852: LD_ADDR_VAR 0 17
64856: PUSH
64857: LD_INT 1
64859: NEG
64860: PUSH
64861: LD_INT 3
64863: NEG
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 0
64871: PUSH
64872: LD_INT 3
64874: NEG
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 1
64882: PUSH
64883: LD_INT 2
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: LIST
64895: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64896: LD_ADDR_VAR 0 18
64900: PUSH
64901: LD_INT 2
64903: PUSH
64904: LD_INT 1
64906: NEG
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 3
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 3
64924: PUSH
64925: LD_INT 1
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: LIST
64936: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64937: LD_ADDR_VAR 0 19
64941: PUSH
64942: LD_INT 3
64944: PUSH
64945: LD_INT 2
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 3
64954: PUSH
64955: LD_INT 3
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: LD_INT 3
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: LIST
64976: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64977: LD_ADDR_VAR 0 20
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: LD_INT 3
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: LD_INT 3
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 1
65004: NEG
65005: PUSH
65006: LD_INT 2
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: LIST
65017: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65018: LD_ADDR_VAR 0 21
65022: PUSH
65023: LD_INT 2
65025: NEG
65026: PUSH
65027: LD_INT 1
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 3
65036: NEG
65037: PUSH
65038: LD_INT 0
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 3
65047: NEG
65048: PUSH
65049: LD_INT 1
65051: NEG
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: LIST
65061: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65062: LD_ADDR_VAR 0 22
65066: PUSH
65067: LD_INT 2
65069: NEG
65070: PUSH
65071: LD_INT 3
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 3
65081: NEG
65082: PUSH
65083: LD_INT 2
65085: NEG
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 3
65093: NEG
65094: PUSH
65095: LD_INT 3
65097: NEG
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: LIST
65107: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65108: LD_ADDR_VAR 0 23
65112: PUSH
65113: LD_INT 0
65115: PUSH
65116: LD_INT 3
65118: NEG
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 1
65126: NEG
65127: PUSH
65128: LD_INT 4
65130: NEG
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 1
65138: PUSH
65139: LD_INT 3
65141: NEG
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: LIST
65151: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65152: LD_ADDR_VAR 0 24
65156: PUSH
65157: LD_INT 3
65159: PUSH
65160: LD_INT 0
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 3
65169: PUSH
65170: LD_INT 1
65172: NEG
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 4
65180: PUSH
65181: LD_INT 1
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: LIST
65192: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65193: LD_ADDR_VAR 0 25
65197: PUSH
65198: LD_INT 3
65200: PUSH
65201: LD_INT 3
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 4
65210: PUSH
65211: LD_INT 3
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 3
65220: PUSH
65221: LD_INT 4
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: LIST
65232: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65233: LD_ADDR_VAR 0 26
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: LD_INT 3
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 1
65250: PUSH
65251: LD_INT 4
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 1
65260: NEG
65261: PUSH
65262: LD_INT 3
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: LIST
65273: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65274: LD_ADDR_VAR 0 27
65278: PUSH
65279: LD_INT 3
65281: NEG
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 3
65292: NEG
65293: PUSH
65294: LD_INT 1
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 4
65303: NEG
65304: PUSH
65305: LD_INT 1
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: LIST
65317: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65318: LD_ADDR_VAR 0 28
65322: PUSH
65323: LD_INT 3
65325: NEG
65326: PUSH
65327: LD_INT 3
65329: NEG
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 3
65337: NEG
65338: PUSH
65339: LD_INT 4
65341: NEG
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 4
65349: NEG
65350: PUSH
65351: LD_INT 3
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: LIST
65363: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65364: LD_ADDR_VAR 0 29
65368: PUSH
65369: LD_INT 1
65371: NEG
65372: PUSH
65373: LD_INT 3
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 0
65383: PUSH
65384: LD_INT 3
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 1
65394: PUSH
65395: LD_INT 2
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 1
65405: NEG
65406: PUSH
65407: LD_INT 4
65409: NEG
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 0
65417: PUSH
65418: LD_INT 4
65420: NEG
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 1
65428: PUSH
65429: LD_INT 3
65431: NEG
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 1
65439: NEG
65440: PUSH
65441: LD_INT 5
65443: NEG
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: LD_INT 5
65454: NEG
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 1
65462: PUSH
65463: LD_INT 4
65465: NEG
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 1
65473: NEG
65474: PUSH
65475: LD_INT 6
65477: NEG
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: LD_INT 6
65488: NEG
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: LD_INT 5
65499: NEG
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65519: LD_ADDR_VAR 0 30
65523: PUSH
65524: LD_INT 2
65526: PUSH
65527: LD_INT 1
65529: NEG
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 3
65537: PUSH
65538: LD_INT 0
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 3
65547: PUSH
65548: LD_INT 1
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 3
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 4
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 4
65578: PUSH
65579: LD_INT 1
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 4
65588: PUSH
65589: LD_INT 1
65591: NEG
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 5
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 5
65609: PUSH
65610: LD_INT 1
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 5
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 6
65630: PUSH
65631: LD_INT 0
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 6
65640: PUSH
65641: LD_INT 1
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65662: LD_ADDR_VAR 0 31
65666: PUSH
65667: LD_INT 3
65669: PUSH
65670: LD_INT 2
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 3
65679: PUSH
65680: LD_INT 3
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 2
65689: PUSH
65690: LD_INT 3
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 4
65699: PUSH
65700: LD_INT 3
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 4
65709: PUSH
65710: LD_INT 4
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 3
65719: PUSH
65720: LD_INT 4
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 5
65729: PUSH
65730: LD_INT 4
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 5
65739: PUSH
65740: LD_INT 5
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 4
65749: PUSH
65750: LD_INT 5
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 6
65759: PUSH
65760: LD_INT 5
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 6
65769: PUSH
65770: LD_INT 6
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 5
65779: PUSH
65780: LD_INT 6
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65801: LD_ADDR_VAR 0 32
65805: PUSH
65806: LD_INT 1
65808: PUSH
65809: LD_INT 3
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 0
65818: PUSH
65819: LD_INT 3
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 1
65828: NEG
65829: PUSH
65830: LD_INT 2
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 1
65839: PUSH
65840: LD_INT 4
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 0
65849: PUSH
65850: LD_INT 4
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 1
65859: NEG
65860: PUSH
65861: LD_INT 3
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 1
65870: PUSH
65871: LD_INT 5
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 0
65880: PUSH
65881: LD_INT 5
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 1
65890: NEG
65891: PUSH
65892: LD_INT 4
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 1
65901: PUSH
65902: LD_INT 6
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 0
65911: PUSH
65912: LD_INT 6
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 1
65921: NEG
65922: PUSH
65923: LD_INT 5
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65944: LD_ADDR_VAR 0 33
65948: PUSH
65949: LD_INT 2
65951: NEG
65952: PUSH
65953: LD_INT 1
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 3
65962: NEG
65963: PUSH
65964: LD_INT 0
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 3
65973: NEG
65974: PUSH
65975: LD_INT 1
65977: NEG
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 3
65985: NEG
65986: PUSH
65987: LD_INT 1
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 4
65996: NEG
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 4
66007: NEG
66008: PUSH
66009: LD_INT 1
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 4
66019: NEG
66020: PUSH
66021: LD_INT 1
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 5
66030: NEG
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 5
66041: NEG
66042: PUSH
66043: LD_INT 1
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 5
66053: NEG
66054: PUSH
66055: LD_INT 1
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 6
66064: NEG
66065: PUSH
66066: LD_INT 0
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 6
66075: NEG
66076: PUSH
66077: LD_INT 1
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66099: LD_ADDR_VAR 0 34
66103: PUSH
66104: LD_INT 2
66106: NEG
66107: PUSH
66108: LD_INT 3
66110: NEG
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 3
66118: NEG
66119: PUSH
66120: LD_INT 2
66122: NEG
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 3
66130: NEG
66131: PUSH
66132: LD_INT 3
66134: NEG
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 3
66142: NEG
66143: PUSH
66144: LD_INT 4
66146: NEG
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 4
66154: NEG
66155: PUSH
66156: LD_INT 3
66158: NEG
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 4
66166: NEG
66167: PUSH
66168: LD_INT 4
66170: NEG
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 4
66178: NEG
66179: PUSH
66180: LD_INT 5
66182: NEG
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 5
66190: NEG
66191: PUSH
66192: LD_INT 4
66194: NEG
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 5
66202: NEG
66203: PUSH
66204: LD_INT 5
66206: NEG
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 5
66214: NEG
66215: PUSH
66216: LD_INT 6
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 6
66226: NEG
66227: PUSH
66228: LD_INT 5
66230: NEG
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 6
66238: NEG
66239: PUSH
66240: LD_INT 6
66242: NEG
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66262: LD_ADDR_VAR 0 41
66266: PUSH
66267: LD_INT 0
66269: PUSH
66270: LD_INT 2
66272: NEG
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 1
66280: NEG
66281: PUSH
66282: LD_INT 3
66284: NEG
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 1
66292: PUSH
66293: LD_INT 2
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: LIST
66305: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66306: LD_ADDR_VAR 0 42
66310: PUSH
66311: LD_INT 2
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 2
66323: PUSH
66324: LD_INT 1
66326: NEG
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 3
66334: PUSH
66335: LD_INT 1
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: LIST
66346: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66347: LD_ADDR_VAR 0 43
66351: PUSH
66352: LD_INT 2
66354: PUSH
66355: LD_INT 2
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 3
66364: PUSH
66365: LD_INT 2
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 2
66374: PUSH
66375: LD_INT 3
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: LIST
66386: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66387: LD_ADDR_VAR 0 44
66391: PUSH
66392: LD_INT 0
66394: PUSH
66395: LD_INT 2
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 1
66404: PUSH
66405: LD_INT 3
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 1
66414: NEG
66415: PUSH
66416: LD_INT 2
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: LIST
66427: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66428: LD_ADDR_VAR 0 45
66432: PUSH
66433: LD_INT 2
66435: NEG
66436: PUSH
66437: LD_INT 0
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 2
66446: NEG
66447: PUSH
66448: LD_INT 1
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 3
66457: NEG
66458: PUSH
66459: LD_INT 1
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: LIST
66471: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66472: LD_ADDR_VAR 0 46
66476: PUSH
66477: LD_INT 2
66479: NEG
66480: PUSH
66481: LD_INT 2
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 2
66491: NEG
66492: PUSH
66493: LD_INT 3
66495: NEG
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 3
66503: NEG
66504: PUSH
66505: LD_INT 2
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: LIST
66517: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66518: LD_ADDR_VAR 0 47
66522: PUSH
66523: LD_INT 2
66525: NEG
66526: PUSH
66527: LD_INT 3
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 1
66537: NEG
66538: PUSH
66539: LD_INT 3
66541: NEG
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66551: LD_ADDR_VAR 0 48
66555: PUSH
66556: LD_INT 1
66558: PUSH
66559: LD_INT 2
66561: NEG
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 2
66569: PUSH
66570: LD_INT 1
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66582: LD_ADDR_VAR 0 49
66586: PUSH
66587: LD_INT 3
66589: PUSH
66590: LD_INT 1
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 3
66599: PUSH
66600: LD_INT 2
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66611: LD_ADDR_VAR 0 50
66615: PUSH
66616: LD_INT 2
66618: PUSH
66619: LD_INT 3
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 1
66628: PUSH
66629: LD_INT 3
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66640: LD_ADDR_VAR 0 51
66644: PUSH
66645: LD_INT 1
66647: NEG
66648: PUSH
66649: LD_INT 2
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 2
66658: NEG
66659: PUSH
66660: LD_INT 1
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66671: LD_ADDR_VAR 0 52
66675: PUSH
66676: LD_INT 3
66678: NEG
66679: PUSH
66680: LD_INT 1
66682: NEG
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 3
66690: NEG
66691: PUSH
66692: LD_INT 2
66694: NEG
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66704: LD_ADDR_VAR 0 53
66708: PUSH
66709: LD_INT 1
66711: NEG
66712: PUSH
66713: LD_INT 3
66715: NEG
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 0
66723: PUSH
66724: LD_INT 3
66726: NEG
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 1
66734: PUSH
66735: LD_INT 2
66737: NEG
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: LIST
66747: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66748: LD_ADDR_VAR 0 54
66752: PUSH
66753: LD_INT 2
66755: PUSH
66756: LD_INT 1
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 3
66766: PUSH
66767: LD_INT 0
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 3
66776: PUSH
66777: LD_INT 1
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: LIST
66788: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66789: LD_ADDR_VAR 0 55
66793: PUSH
66794: LD_INT 3
66796: PUSH
66797: LD_INT 2
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 3
66806: PUSH
66807: LD_INT 3
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 2
66816: PUSH
66817: LD_INT 3
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: LIST
66828: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66829: LD_ADDR_VAR 0 56
66833: PUSH
66834: LD_INT 1
66836: PUSH
66837: LD_INT 3
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: LD_INT 3
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 1
66856: NEG
66857: PUSH
66858: LD_INT 2
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: LIST
66869: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66870: LD_ADDR_VAR 0 57
66874: PUSH
66875: LD_INT 2
66877: NEG
66878: PUSH
66879: LD_INT 1
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 3
66888: NEG
66889: PUSH
66890: LD_INT 0
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 3
66899: NEG
66900: PUSH
66901: LD_INT 1
66903: NEG
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: LIST
66913: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66914: LD_ADDR_VAR 0 58
66918: PUSH
66919: LD_INT 2
66921: NEG
66922: PUSH
66923: LD_INT 3
66925: NEG
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 3
66933: NEG
66934: PUSH
66935: LD_INT 2
66937: NEG
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 3
66945: NEG
66946: PUSH
66947: LD_INT 3
66949: NEG
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: LIST
66959: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66960: LD_ADDR_VAR 0 59
66964: PUSH
66965: LD_INT 1
66967: NEG
66968: PUSH
66969: LD_INT 2
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 0
66979: PUSH
66980: LD_INT 2
66982: NEG
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 1
66990: PUSH
66991: LD_INT 1
66993: NEG
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: LIST
67003: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67004: LD_ADDR_VAR 0 60
67008: PUSH
67009: LD_INT 1
67011: PUSH
67012: LD_INT 1
67014: NEG
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 2
67022: PUSH
67023: LD_INT 0
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 2
67032: PUSH
67033: LD_INT 1
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: LIST
67044: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67045: LD_ADDR_VAR 0 61
67049: PUSH
67050: LD_INT 2
67052: PUSH
67053: LD_INT 1
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 2
67062: PUSH
67063: LD_INT 2
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 1
67072: PUSH
67073: LD_INT 2
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: LIST
67084: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67085: LD_ADDR_VAR 0 62
67089: PUSH
67090: LD_INT 1
67092: PUSH
67093: LD_INT 2
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 0
67102: PUSH
67103: LD_INT 2
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 1
67112: NEG
67113: PUSH
67114: LD_INT 1
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: LIST
67125: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67126: LD_ADDR_VAR 0 63
67130: PUSH
67131: LD_INT 1
67133: NEG
67134: PUSH
67135: LD_INT 1
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 2
67144: NEG
67145: PUSH
67146: LD_INT 0
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 2
67155: NEG
67156: PUSH
67157: LD_INT 1
67159: NEG
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: LIST
67169: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67170: LD_ADDR_VAR 0 64
67174: PUSH
67175: LD_INT 1
67177: NEG
67178: PUSH
67179: LD_INT 2
67181: NEG
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 2
67189: NEG
67190: PUSH
67191: LD_INT 1
67193: NEG
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 2
67201: NEG
67202: PUSH
67203: LD_INT 2
67205: NEG
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: LIST
67215: ST_TO_ADDR
// end ; 2 :
67216: GO 70482
67218: LD_INT 2
67220: DOUBLE
67221: EQUAL
67222: IFTRUE 67226
67224: GO 70481
67226: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67227: LD_ADDR_VAR 0 29
67231: PUSH
67232: LD_INT 4
67234: PUSH
67235: LD_INT 0
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 4
67244: PUSH
67245: LD_INT 1
67247: NEG
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 5
67255: PUSH
67256: LD_INT 0
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 5
67265: PUSH
67266: LD_INT 1
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 4
67275: PUSH
67276: LD_INT 1
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 3
67285: PUSH
67286: LD_INT 0
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 3
67295: PUSH
67296: LD_INT 1
67298: NEG
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 3
67306: PUSH
67307: LD_INT 2
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 5
67317: PUSH
67318: LD_INT 2
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 3
67327: PUSH
67328: LD_INT 3
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 3
67337: PUSH
67338: LD_INT 2
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 4
67347: PUSH
67348: LD_INT 3
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 4
67357: PUSH
67358: LD_INT 4
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 3
67367: PUSH
67368: LD_INT 4
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 2
67377: PUSH
67378: LD_INT 3
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 2
67387: PUSH
67388: LD_INT 2
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 4
67397: PUSH
67398: LD_INT 2
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 2
67407: PUSH
67408: LD_INT 4
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 0
67417: PUSH
67418: LD_INT 4
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 0
67427: PUSH
67428: LD_INT 3
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 1
67437: PUSH
67438: LD_INT 4
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 1
67447: PUSH
67448: LD_INT 5
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: LD_INT 5
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 1
67467: NEG
67468: PUSH
67469: LD_INT 4
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 1
67478: NEG
67479: PUSH
67480: LD_INT 3
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 2
67489: PUSH
67490: LD_INT 5
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 2
67499: NEG
67500: PUSH
67501: LD_INT 3
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 3
67510: NEG
67511: PUSH
67512: LD_INT 0
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 3
67521: NEG
67522: PUSH
67523: LD_INT 1
67525: NEG
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 2
67533: NEG
67534: PUSH
67535: LD_INT 0
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 2
67544: NEG
67545: PUSH
67546: LD_INT 1
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 3
67555: NEG
67556: PUSH
67557: LD_INT 1
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 4
67566: NEG
67567: PUSH
67568: LD_INT 0
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 4
67577: NEG
67578: PUSH
67579: LD_INT 1
67581: NEG
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 4
67589: NEG
67590: PUSH
67591: LD_INT 2
67593: NEG
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 2
67601: NEG
67602: PUSH
67603: LD_INT 2
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 4
67612: NEG
67613: PUSH
67614: LD_INT 4
67616: NEG
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 4
67624: NEG
67625: PUSH
67626: LD_INT 5
67628: NEG
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 3
67636: NEG
67637: PUSH
67638: LD_INT 4
67640: NEG
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 3
67648: NEG
67649: PUSH
67650: LD_INT 3
67652: NEG
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 4
67660: NEG
67661: PUSH
67662: LD_INT 3
67664: NEG
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 5
67672: NEG
67673: PUSH
67674: LD_INT 4
67676: NEG
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 5
67684: NEG
67685: PUSH
67686: LD_INT 5
67688: NEG
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 3
67696: NEG
67697: PUSH
67698: LD_INT 5
67700: NEG
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 5
67708: NEG
67709: PUSH
67710: LD_INT 3
67712: NEG
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67765: LD_ADDR_VAR 0 30
67769: PUSH
67770: LD_INT 4
67772: PUSH
67773: LD_INT 4
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 4
67782: PUSH
67783: LD_INT 3
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 5
67792: PUSH
67793: LD_INT 4
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: LD_INT 5
67802: PUSH
67803: LD_INT 5
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 4
67812: PUSH
67813: LD_INT 5
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 3
67822: PUSH
67823: LD_INT 4
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 3
67832: PUSH
67833: LD_INT 3
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 5
67842: PUSH
67843: LD_INT 3
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 3
67852: PUSH
67853: LD_INT 5
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 0
67862: PUSH
67863: LD_INT 3
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 0
67872: PUSH
67873: LD_INT 2
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 1
67882: PUSH
67883: LD_INT 3
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 1
67892: PUSH
67893: LD_INT 4
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 0
67902: PUSH
67903: LD_INT 4
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 1
67912: NEG
67913: PUSH
67914: LD_INT 3
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 1
67923: NEG
67924: PUSH
67925: LD_INT 2
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 2
67934: PUSH
67935: LD_INT 4
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 2
67944: NEG
67945: PUSH
67946: LD_INT 2
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 4
67955: NEG
67956: PUSH
67957: LD_INT 0
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 4
67966: NEG
67967: PUSH
67968: LD_INT 1
67970: NEG
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 3
67978: NEG
67979: PUSH
67980: LD_INT 0
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 3
67989: NEG
67990: PUSH
67991: LD_INT 1
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 4
68000: NEG
68001: PUSH
68002: LD_INT 1
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 5
68011: NEG
68012: PUSH
68013: LD_INT 0
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 5
68022: NEG
68023: PUSH
68024: LD_INT 1
68026: NEG
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 5
68034: NEG
68035: PUSH
68036: LD_INT 2
68038: NEG
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 3
68046: NEG
68047: PUSH
68048: LD_INT 2
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 3
68057: NEG
68058: PUSH
68059: LD_INT 3
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 3
68069: NEG
68070: PUSH
68071: LD_INT 4
68073: NEG
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 2
68081: NEG
68082: PUSH
68083: LD_INT 3
68085: NEG
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 2
68093: NEG
68094: PUSH
68095: LD_INT 2
68097: NEG
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 3
68105: NEG
68106: PUSH
68107: LD_INT 2
68109: NEG
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 4
68117: NEG
68118: PUSH
68119: LD_INT 3
68121: NEG
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 4
68129: NEG
68130: PUSH
68131: LD_INT 4
68133: NEG
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 2
68141: NEG
68142: PUSH
68143: LD_INT 4
68145: NEG
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 4
68153: NEG
68154: PUSH
68155: LD_INT 2
68157: NEG
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 0
68165: PUSH
68166: LD_INT 4
68168: NEG
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 0
68176: PUSH
68177: LD_INT 5
68179: NEG
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 1
68187: PUSH
68188: LD_INT 4
68190: NEG
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 1
68198: PUSH
68199: LD_INT 3
68201: NEG
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 0
68209: PUSH
68210: LD_INT 3
68212: NEG
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 1
68220: NEG
68221: PUSH
68222: LD_INT 4
68224: NEG
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 1
68232: NEG
68233: PUSH
68234: LD_INT 5
68236: NEG
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 2
68244: PUSH
68245: LD_INT 3
68247: NEG
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 2
68255: NEG
68256: PUSH
68257: LD_INT 5
68259: NEG
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68312: LD_ADDR_VAR 0 31
68316: PUSH
68317: LD_INT 0
68319: PUSH
68320: LD_INT 4
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 0
68329: PUSH
68330: LD_INT 3
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 1
68339: PUSH
68340: LD_INT 4
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 1
68349: PUSH
68350: LD_INT 5
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 0
68359: PUSH
68360: LD_INT 5
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 1
68369: NEG
68370: PUSH
68371: LD_INT 4
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 1
68380: NEG
68381: PUSH
68382: LD_INT 3
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 2
68391: PUSH
68392: LD_INT 5
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 2
68401: NEG
68402: PUSH
68403: LD_INT 3
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 3
68412: NEG
68413: PUSH
68414: LD_INT 0
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 3
68423: NEG
68424: PUSH
68425: LD_INT 1
68427: NEG
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 2
68435: NEG
68436: PUSH
68437: LD_INT 0
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 2
68446: NEG
68447: PUSH
68448: LD_INT 1
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 3
68457: NEG
68458: PUSH
68459: LD_INT 1
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 4
68468: NEG
68469: PUSH
68470: LD_INT 0
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 4
68479: NEG
68480: PUSH
68481: LD_INT 1
68483: NEG
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 4
68491: NEG
68492: PUSH
68493: LD_INT 2
68495: NEG
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 2
68503: NEG
68504: PUSH
68505: LD_INT 2
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 4
68514: NEG
68515: PUSH
68516: LD_INT 4
68518: NEG
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 4
68526: NEG
68527: PUSH
68528: LD_INT 5
68530: NEG
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 3
68538: NEG
68539: PUSH
68540: LD_INT 4
68542: NEG
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 3
68550: NEG
68551: PUSH
68552: LD_INT 3
68554: NEG
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 4
68562: NEG
68563: PUSH
68564: LD_INT 3
68566: NEG
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 5
68574: NEG
68575: PUSH
68576: LD_INT 4
68578: NEG
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 5
68586: NEG
68587: PUSH
68588: LD_INT 5
68590: NEG
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 3
68598: NEG
68599: PUSH
68600: LD_INT 5
68602: NEG
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 5
68610: NEG
68611: PUSH
68612: LD_INT 3
68614: NEG
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 0
68622: PUSH
68623: LD_INT 3
68625: NEG
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 0
68633: PUSH
68634: LD_INT 4
68636: NEG
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 1
68644: PUSH
68645: LD_INT 3
68647: NEG
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 1
68655: PUSH
68656: LD_INT 2
68658: NEG
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 0
68666: PUSH
68667: LD_INT 2
68669: NEG
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 1
68677: NEG
68678: PUSH
68679: LD_INT 3
68681: NEG
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: LD_INT 1
68689: NEG
68690: PUSH
68691: LD_INT 4
68693: NEG
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 2
68701: PUSH
68702: LD_INT 2
68704: NEG
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 2
68712: NEG
68713: PUSH
68714: LD_INT 4
68716: NEG
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 4
68724: PUSH
68725: LD_INT 0
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 4
68734: PUSH
68735: LD_INT 1
68737: NEG
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 5
68745: PUSH
68746: LD_INT 0
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 5
68755: PUSH
68756: LD_INT 1
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 4
68765: PUSH
68766: LD_INT 1
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 3
68775: PUSH
68776: LD_INT 0
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 3
68785: PUSH
68786: LD_INT 1
68788: NEG
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 3
68796: PUSH
68797: LD_INT 2
68799: NEG
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 5
68807: PUSH
68808: LD_INT 2
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68862: LD_ADDR_VAR 0 32
68866: PUSH
68867: LD_INT 4
68869: NEG
68870: PUSH
68871: LD_INT 0
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 4
68880: NEG
68881: PUSH
68882: LD_INT 1
68884: NEG
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 3
68892: NEG
68893: PUSH
68894: LD_INT 0
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 3
68903: NEG
68904: PUSH
68905: LD_INT 1
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 4
68914: NEG
68915: PUSH
68916: LD_INT 1
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 5
68925: NEG
68926: PUSH
68927: LD_INT 0
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 5
68936: NEG
68937: PUSH
68938: LD_INT 1
68940: NEG
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 5
68948: NEG
68949: PUSH
68950: LD_INT 2
68952: NEG
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 3
68960: NEG
68961: PUSH
68962: LD_INT 2
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 3
68971: NEG
68972: PUSH
68973: LD_INT 3
68975: NEG
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 3
68983: NEG
68984: PUSH
68985: LD_INT 4
68987: NEG
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 2
68995: NEG
68996: PUSH
68997: LD_INT 3
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 2
69007: NEG
69008: PUSH
69009: LD_INT 2
69011: NEG
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 3
69019: NEG
69020: PUSH
69021: LD_INT 2
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 4
69031: NEG
69032: PUSH
69033: LD_INT 3
69035: NEG
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 4
69043: NEG
69044: PUSH
69045: LD_INT 4
69047: NEG
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 2
69055: NEG
69056: PUSH
69057: LD_INT 4
69059: NEG
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 4
69067: NEG
69068: PUSH
69069: LD_INT 2
69071: NEG
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 0
69079: PUSH
69080: LD_INT 4
69082: NEG
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 0
69090: PUSH
69091: LD_INT 5
69093: NEG
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 1
69101: PUSH
69102: LD_INT 4
69104: NEG
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 1
69112: PUSH
69113: LD_INT 3
69115: NEG
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 0
69123: PUSH
69124: LD_INT 3
69126: NEG
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 1
69134: NEG
69135: PUSH
69136: LD_INT 4
69138: NEG
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 1
69146: NEG
69147: PUSH
69148: LD_INT 5
69150: NEG
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: LD_INT 2
69158: PUSH
69159: LD_INT 3
69161: NEG
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 2
69169: NEG
69170: PUSH
69171: LD_INT 5
69173: NEG
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 3
69181: PUSH
69182: LD_INT 0
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 3
69191: PUSH
69192: LD_INT 1
69194: NEG
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 4
69202: PUSH
69203: LD_INT 0
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 4
69212: PUSH
69213: LD_INT 1
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 3
69222: PUSH
69223: LD_INT 1
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 2
69232: PUSH
69233: LD_INT 0
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 2
69242: PUSH
69243: LD_INT 1
69245: NEG
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 2
69253: PUSH
69254: LD_INT 2
69256: NEG
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 4
69264: PUSH
69265: LD_INT 2
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 4
69274: PUSH
69275: LD_INT 4
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 4
69284: PUSH
69285: LD_INT 3
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 5
69294: PUSH
69295: LD_INT 4
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 5
69304: PUSH
69305: LD_INT 5
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 4
69314: PUSH
69315: LD_INT 5
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 3
69324: PUSH
69325: LD_INT 4
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 3
69334: PUSH
69335: LD_INT 3
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 5
69344: PUSH
69345: LD_INT 3
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 3
69354: PUSH
69355: LD_INT 5
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69409: LD_ADDR_VAR 0 33
69413: PUSH
69414: LD_INT 4
69416: NEG
69417: PUSH
69418: LD_INT 4
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 4
69428: NEG
69429: PUSH
69430: LD_INT 5
69432: NEG
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 3
69440: NEG
69441: PUSH
69442: LD_INT 4
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 3
69452: NEG
69453: PUSH
69454: LD_INT 3
69456: NEG
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 4
69464: NEG
69465: PUSH
69466: LD_INT 3
69468: NEG
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 5
69476: NEG
69477: PUSH
69478: LD_INT 4
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 5
69488: NEG
69489: PUSH
69490: LD_INT 5
69492: NEG
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 3
69500: NEG
69501: PUSH
69502: LD_INT 5
69504: NEG
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 5
69512: NEG
69513: PUSH
69514: LD_INT 3
69516: NEG
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 0
69524: PUSH
69525: LD_INT 3
69527: NEG
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 0
69535: PUSH
69536: LD_INT 4
69538: NEG
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 1
69546: PUSH
69547: LD_INT 3
69549: NEG
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 1
69557: PUSH
69558: LD_INT 2
69560: NEG
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 0
69568: PUSH
69569: LD_INT 2
69571: NEG
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 1
69579: NEG
69580: PUSH
69581: LD_INT 3
69583: NEG
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 1
69591: NEG
69592: PUSH
69593: LD_INT 4
69595: NEG
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 2
69603: PUSH
69604: LD_INT 2
69606: NEG
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 2
69614: NEG
69615: PUSH
69616: LD_INT 4
69618: NEG
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 4
69626: PUSH
69627: LD_INT 0
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: LD_INT 4
69636: PUSH
69637: LD_INT 1
69639: NEG
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: LD_INT 5
69647: PUSH
69648: LD_INT 0
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: LD_INT 5
69657: PUSH
69658: LD_INT 1
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 4
69667: PUSH
69668: LD_INT 1
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: LD_INT 3
69677: PUSH
69678: LD_INT 0
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 3
69687: PUSH
69688: LD_INT 1
69690: NEG
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 3
69698: PUSH
69699: LD_INT 2
69701: NEG
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 5
69709: PUSH
69710: LD_INT 2
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 3
69719: PUSH
69720: LD_INT 3
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 3
69729: PUSH
69730: LD_INT 2
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 4
69739: PUSH
69740: LD_INT 3
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 4
69749: PUSH
69750: LD_INT 4
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 3
69759: PUSH
69760: LD_INT 4
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 2
69769: PUSH
69770: LD_INT 3
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 2
69779: PUSH
69780: LD_INT 2
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 4
69789: PUSH
69790: LD_INT 2
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 2
69799: PUSH
69800: LD_INT 4
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 0
69809: PUSH
69810: LD_INT 4
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 0
69819: PUSH
69820: LD_INT 3
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 1
69829: PUSH
69830: LD_INT 4
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 1
69839: PUSH
69840: LD_INT 5
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 0
69849: PUSH
69850: LD_INT 5
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 1
69859: NEG
69860: PUSH
69861: LD_INT 4
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 1
69870: NEG
69871: PUSH
69872: LD_INT 3
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 2
69881: PUSH
69882: LD_INT 5
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 2
69891: NEG
69892: PUSH
69893: LD_INT 3
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69947: LD_ADDR_VAR 0 34
69951: PUSH
69952: LD_INT 0
69954: PUSH
69955: LD_INT 4
69957: NEG
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 0
69965: PUSH
69966: LD_INT 5
69968: NEG
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 1
69976: PUSH
69977: LD_INT 4
69979: NEG
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 1
69987: PUSH
69988: LD_INT 3
69990: NEG
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 0
69998: PUSH
69999: LD_INT 3
70001: NEG
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 1
70009: NEG
70010: PUSH
70011: LD_INT 4
70013: NEG
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 1
70021: NEG
70022: PUSH
70023: LD_INT 5
70025: NEG
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 2
70033: PUSH
70034: LD_INT 3
70036: NEG
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 2
70044: NEG
70045: PUSH
70046: LD_INT 5
70048: NEG
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 3
70056: PUSH
70057: LD_INT 0
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 3
70066: PUSH
70067: LD_INT 1
70069: NEG
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: PUSH
70075: LD_INT 4
70077: PUSH
70078: LD_INT 0
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 4
70087: PUSH
70088: LD_INT 1
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 3
70097: PUSH
70098: LD_INT 1
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: LD_INT 2
70107: PUSH
70108: LD_INT 0
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 2
70117: PUSH
70118: LD_INT 1
70120: NEG
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 2
70128: PUSH
70129: LD_INT 2
70131: NEG
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 4
70139: PUSH
70140: LD_INT 2
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 4
70149: PUSH
70150: LD_INT 4
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 4
70159: PUSH
70160: LD_INT 3
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 5
70169: PUSH
70170: LD_INT 4
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 5
70179: PUSH
70180: LD_INT 5
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 4
70189: PUSH
70190: LD_INT 5
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 3
70199: PUSH
70200: LD_INT 4
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 3
70209: PUSH
70210: LD_INT 3
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 5
70219: PUSH
70220: LD_INT 3
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 3
70229: PUSH
70230: LD_INT 5
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 0
70239: PUSH
70240: LD_INT 3
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 0
70249: PUSH
70250: LD_INT 2
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 1
70259: PUSH
70260: LD_INT 3
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 1
70269: PUSH
70270: LD_INT 4
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 0
70279: PUSH
70280: LD_INT 4
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 1
70289: NEG
70290: PUSH
70291: LD_INT 3
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 1
70300: NEG
70301: PUSH
70302: LD_INT 2
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 2
70311: PUSH
70312: LD_INT 4
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 2
70321: NEG
70322: PUSH
70323: LD_INT 2
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 4
70332: NEG
70333: PUSH
70334: LD_INT 0
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 4
70343: NEG
70344: PUSH
70345: LD_INT 1
70347: NEG
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 3
70355: NEG
70356: PUSH
70357: LD_INT 0
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 3
70366: NEG
70367: PUSH
70368: LD_INT 1
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 4
70377: NEG
70378: PUSH
70379: LD_INT 1
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 5
70388: NEG
70389: PUSH
70390: LD_INT 0
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 5
70399: NEG
70400: PUSH
70401: LD_INT 1
70403: NEG
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 5
70411: NEG
70412: PUSH
70413: LD_INT 2
70415: NEG
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 3
70423: NEG
70424: PUSH
70425: LD_INT 2
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: ST_TO_ADDR
// end ; end ;
70479: GO 70482
70481: POP
// case btype of b_depot , b_warehouse :
70482: LD_VAR 0 1
70486: PUSH
70487: LD_INT 0
70489: DOUBLE
70490: EQUAL
70491: IFTRUE 70501
70493: LD_INT 1
70495: DOUBLE
70496: EQUAL
70497: IFTRUE 70501
70499: GO 70702
70501: POP
// case nation of nation_american :
70502: LD_VAR 0 5
70506: PUSH
70507: LD_INT 1
70509: DOUBLE
70510: EQUAL
70511: IFTRUE 70515
70513: GO 70571
70515: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70516: LD_ADDR_VAR 0 9
70520: PUSH
70521: LD_VAR 0 11
70525: PUSH
70526: LD_VAR 0 12
70530: PUSH
70531: LD_VAR 0 13
70535: PUSH
70536: LD_VAR 0 14
70540: PUSH
70541: LD_VAR 0 15
70545: PUSH
70546: LD_VAR 0 16
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: PUSH
70559: LD_VAR 0 4
70563: PUSH
70564: LD_INT 1
70566: PLUS
70567: ARRAY
70568: ST_TO_ADDR
70569: GO 70700
70571: LD_INT 2
70573: DOUBLE
70574: EQUAL
70575: IFTRUE 70579
70577: GO 70635
70579: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70580: LD_ADDR_VAR 0 9
70584: PUSH
70585: LD_VAR 0 17
70589: PUSH
70590: LD_VAR 0 18
70594: PUSH
70595: LD_VAR 0 19
70599: PUSH
70600: LD_VAR 0 20
70604: PUSH
70605: LD_VAR 0 21
70609: PUSH
70610: LD_VAR 0 22
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: PUSH
70623: LD_VAR 0 4
70627: PUSH
70628: LD_INT 1
70630: PLUS
70631: ARRAY
70632: ST_TO_ADDR
70633: GO 70700
70635: LD_INT 3
70637: DOUBLE
70638: EQUAL
70639: IFTRUE 70643
70641: GO 70699
70643: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70644: LD_ADDR_VAR 0 9
70648: PUSH
70649: LD_VAR 0 23
70653: PUSH
70654: LD_VAR 0 24
70658: PUSH
70659: LD_VAR 0 25
70663: PUSH
70664: LD_VAR 0 26
70668: PUSH
70669: LD_VAR 0 27
70673: PUSH
70674: LD_VAR 0 28
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: PUSH
70687: LD_VAR 0 4
70691: PUSH
70692: LD_INT 1
70694: PLUS
70695: ARRAY
70696: ST_TO_ADDR
70697: GO 70700
70699: POP
70700: GO 71255
70702: LD_INT 2
70704: DOUBLE
70705: EQUAL
70706: IFTRUE 70716
70708: LD_INT 3
70710: DOUBLE
70711: EQUAL
70712: IFTRUE 70716
70714: GO 70772
70716: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70717: LD_ADDR_VAR 0 9
70721: PUSH
70722: LD_VAR 0 29
70726: PUSH
70727: LD_VAR 0 30
70731: PUSH
70732: LD_VAR 0 31
70736: PUSH
70737: LD_VAR 0 32
70741: PUSH
70742: LD_VAR 0 33
70746: PUSH
70747: LD_VAR 0 34
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: PUSH
70760: LD_VAR 0 4
70764: PUSH
70765: LD_INT 1
70767: PLUS
70768: ARRAY
70769: ST_TO_ADDR
70770: GO 71255
70772: LD_INT 16
70774: DOUBLE
70775: EQUAL
70776: IFTRUE 70834
70778: LD_INT 17
70780: DOUBLE
70781: EQUAL
70782: IFTRUE 70834
70784: LD_INT 18
70786: DOUBLE
70787: EQUAL
70788: IFTRUE 70834
70790: LD_INT 19
70792: DOUBLE
70793: EQUAL
70794: IFTRUE 70834
70796: LD_INT 22
70798: DOUBLE
70799: EQUAL
70800: IFTRUE 70834
70802: LD_INT 20
70804: DOUBLE
70805: EQUAL
70806: IFTRUE 70834
70808: LD_INT 21
70810: DOUBLE
70811: EQUAL
70812: IFTRUE 70834
70814: LD_INT 23
70816: DOUBLE
70817: EQUAL
70818: IFTRUE 70834
70820: LD_INT 24
70822: DOUBLE
70823: EQUAL
70824: IFTRUE 70834
70826: LD_INT 25
70828: DOUBLE
70829: EQUAL
70830: IFTRUE 70834
70832: GO 70890
70834: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70835: LD_ADDR_VAR 0 9
70839: PUSH
70840: LD_VAR 0 35
70844: PUSH
70845: LD_VAR 0 36
70849: PUSH
70850: LD_VAR 0 37
70854: PUSH
70855: LD_VAR 0 38
70859: PUSH
70860: LD_VAR 0 39
70864: PUSH
70865: LD_VAR 0 40
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: PUSH
70878: LD_VAR 0 4
70882: PUSH
70883: LD_INT 1
70885: PLUS
70886: ARRAY
70887: ST_TO_ADDR
70888: GO 71255
70890: LD_INT 6
70892: DOUBLE
70893: EQUAL
70894: IFTRUE 70946
70896: LD_INT 7
70898: DOUBLE
70899: EQUAL
70900: IFTRUE 70946
70902: LD_INT 8
70904: DOUBLE
70905: EQUAL
70906: IFTRUE 70946
70908: LD_INT 13
70910: DOUBLE
70911: EQUAL
70912: IFTRUE 70946
70914: LD_INT 12
70916: DOUBLE
70917: EQUAL
70918: IFTRUE 70946
70920: LD_INT 15
70922: DOUBLE
70923: EQUAL
70924: IFTRUE 70946
70926: LD_INT 11
70928: DOUBLE
70929: EQUAL
70930: IFTRUE 70946
70932: LD_INT 14
70934: DOUBLE
70935: EQUAL
70936: IFTRUE 70946
70938: LD_INT 10
70940: DOUBLE
70941: EQUAL
70942: IFTRUE 70946
70944: GO 71002
70946: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70947: LD_ADDR_VAR 0 9
70951: PUSH
70952: LD_VAR 0 41
70956: PUSH
70957: LD_VAR 0 42
70961: PUSH
70962: LD_VAR 0 43
70966: PUSH
70967: LD_VAR 0 44
70971: PUSH
70972: LD_VAR 0 45
70976: PUSH
70977: LD_VAR 0 46
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: PUSH
70990: LD_VAR 0 4
70994: PUSH
70995: LD_INT 1
70997: PLUS
70998: ARRAY
70999: ST_TO_ADDR
71000: GO 71255
71002: LD_INT 36
71004: DOUBLE
71005: EQUAL
71006: IFTRUE 71010
71008: GO 71066
71010: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71011: LD_ADDR_VAR 0 9
71015: PUSH
71016: LD_VAR 0 47
71020: PUSH
71021: LD_VAR 0 48
71025: PUSH
71026: LD_VAR 0 49
71030: PUSH
71031: LD_VAR 0 50
71035: PUSH
71036: LD_VAR 0 51
71040: PUSH
71041: LD_VAR 0 52
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: PUSH
71054: LD_VAR 0 4
71058: PUSH
71059: LD_INT 1
71061: PLUS
71062: ARRAY
71063: ST_TO_ADDR
71064: GO 71255
71066: LD_INT 4
71068: DOUBLE
71069: EQUAL
71070: IFTRUE 71092
71072: LD_INT 5
71074: DOUBLE
71075: EQUAL
71076: IFTRUE 71092
71078: LD_INT 34
71080: DOUBLE
71081: EQUAL
71082: IFTRUE 71092
71084: LD_INT 37
71086: DOUBLE
71087: EQUAL
71088: IFTRUE 71092
71090: GO 71148
71092: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71093: LD_ADDR_VAR 0 9
71097: PUSH
71098: LD_VAR 0 53
71102: PUSH
71103: LD_VAR 0 54
71107: PUSH
71108: LD_VAR 0 55
71112: PUSH
71113: LD_VAR 0 56
71117: PUSH
71118: LD_VAR 0 57
71122: PUSH
71123: LD_VAR 0 58
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: PUSH
71136: LD_VAR 0 4
71140: PUSH
71141: LD_INT 1
71143: PLUS
71144: ARRAY
71145: ST_TO_ADDR
71146: GO 71255
71148: LD_INT 31
71150: DOUBLE
71151: EQUAL
71152: IFTRUE 71198
71154: LD_INT 32
71156: DOUBLE
71157: EQUAL
71158: IFTRUE 71198
71160: LD_INT 33
71162: DOUBLE
71163: EQUAL
71164: IFTRUE 71198
71166: LD_INT 27
71168: DOUBLE
71169: EQUAL
71170: IFTRUE 71198
71172: LD_INT 26
71174: DOUBLE
71175: EQUAL
71176: IFTRUE 71198
71178: LD_INT 28
71180: DOUBLE
71181: EQUAL
71182: IFTRUE 71198
71184: LD_INT 29
71186: DOUBLE
71187: EQUAL
71188: IFTRUE 71198
71190: LD_INT 30
71192: DOUBLE
71193: EQUAL
71194: IFTRUE 71198
71196: GO 71254
71198: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71199: LD_ADDR_VAR 0 9
71203: PUSH
71204: LD_VAR 0 59
71208: PUSH
71209: LD_VAR 0 60
71213: PUSH
71214: LD_VAR 0 61
71218: PUSH
71219: LD_VAR 0 62
71223: PUSH
71224: LD_VAR 0 63
71228: PUSH
71229: LD_VAR 0 64
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: PUSH
71242: LD_VAR 0 4
71246: PUSH
71247: LD_INT 1
71249: PLUS
71250: ARRAY
71251: ST_TO_ADDR
71252: GO 71255
71254: POP
// temp_list2 = [ ] ;
71255: LD_ADDR_VAR 0 10
71259: PUSH
71260: EMPTY
71261: ST_TO_ADDR
// for i in temp_list do
71262: LD_ADDR_VAR 0 8
71266: PUSH
71267: LD_VAR 0 9
71271: PUSH
71272: FOR_IN
71273: IFFALSE 71325
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71275: LD_ADDR_VAR 0 10
71279: PUSH
71280: LD_VAR 0 10
71284: PUSH
71285: LD_VAR 0 8
71289: PUSH
71290: LD_INT 1
71292: ARRAY
71293: PUSH
71294: LD_VAR 0 2
71298: PLUS
71299: PUSH
71300: LD_VAR 0 8
71304: PUSH
71305: LD_INT 2
71307: ARRAY
71308: PUSH
71309: LD_VAR 0 3
71313: PLUS
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: PUSH
71319: EMPTY
71320: LIST
71321: ADD
71322: ST_TO_ADDR
71323: GO 71272
71325: POP
71326: POP
// result = temp_list2 ;
71327: LD_ADDR_VAR 0 7
71331: PUSH
71332: LD_VAR 0 10
71336: ST_TO_ADDR
// end ;
71337: LD_VAR 0 7
71341: RET
// export function EnemyInRange ( unit , dist ) ; begin
71342: LD_INT 0
71344: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71345: LD_ADDR_VAR 0 3
71349: PUSH
71350: LD_VAR 0 1
71354: PPUSH
71355: CALL_OW 255
71359: PPUSH
71360: LD_VAR 0 1
71364: PPUSH
71365: CALL_OW 250
71369: PPUSH
71370: LD_VAR 0 1
71374: PPUSH
71375: CALL_OW 251
71379: PPUSH
71380: LD_VAR 0 2
71384: PPUSH
71385: CALL 44738 0 4
71389: PUSH
71390: LD_INT 4
71392: ARRAY
71393: ST_TO_ADDR
// end ;
71394: LD_VAR 0 3
71398: RET
// export function PlayerSeeMe ( unit ) ; begin
71399: LD_INT 0
71401: PPUSH
// result := See ( your_side , unit ) ;
71402: LD_ADDR_VAR 0 2
71406: PUSH
71407: LD_OWVAR 2
71411: PPUSH
71412: LD_VAR 0 1
71416: PPUSH
71417: CALL_OW 292
71421: ST_TO_ADDR
// end ;
71422: LD_VAR 0 2
71426: RET
// export function ReverseDir ( unit ) ; begin
71427: LD_INT 0
71429: PPUSH
// if not unit then
71430: LD_VAR 0 1
71434: NOT
71435: IFFALSE 71439
// exit ;
71437: GO 71462
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71439: LD_ADDR_VAR 0 2
71443: PUSH
71444: LD_VAR 0 1
71448: PPUSH
71449: CALL_OW 254
71453: PUSH
71454: LD_INT 3
71456: PLUS
71457: PUSH
71458: LD_INT 6
71460: MOD
71461: ST_TO_ADDR
// end ;
71462: LD_VAR 0 2
71466: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71467: LD_INT 0
71469: PPUSH
71470: PPUSH
71471: PPUSH
71472: PPUSH
71473: PPUSH
// if not hexes then
71474: LD_VAR 0 2
71478: NOT
71479: IFFALSE 71483
// exit ;
71481: GO 71631
// dist := 9999 ;
71483: LD_ADDR_VAR 0 5
71487: PUSH
71488: LD_INT 9999
71490: ST_TO_ADDR
// for i = 1 to hexes do
71491: LD_ADDR_VAR 0 4
71495: PUSH
71496: DOUBLE
71497: LD_INT 1
71499: DEC
71500: ST_TO_ADDR
71501: LD_VAR 0 2
71505: PUSH
71506: FOR_TO
71507: IFFALSE 71619
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71509: LD_VAR 0 1
71513: PPUSH
71514: LD_VAR 0 2
71518: PUSH
71519: LD_VAR 0 4
71523: ARRAY
71524: PUSH
71525: LD_INT 1
71527: ARRAY
71528: PPUSH
71529: LD_VAR 0 2
71533: PUSH
71534: LD_VAR 0 4
71538: ARRAY
71539: PUSH
71540: LD_INT 2
71542: ARRAY
71543: PPUSH
71544: CALL_OW 297
71548: PUSH
71549: LD_VAR 0 5
71553: LESS
71554: IFFALSE 71617
// begin hex := hexes [ i ] ;
71556: LD_ADDR_VAR 0 7
71560: PUSH
71561: LD_VAR 0 2
71565: PUSH
71566: LD_VAR 0 4
71570: ARRAY
71571: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71572: LD_ADDR_VAR 0 5
71576: PUSH
71577: LD_VAR 0 1
71581: PPUSH
71582: LD_VAR 0 2
71586: PUSH
71587: LD_VAR 0 4
71591: ARRAY
71592: PUSH
71593: LD_INT 1
71595: ARRAY
71596: PPUSH
71597: LD_VAR 0 2
71601: PUSH
71602: LD_VAR 0 4
71606: ARRAY
71607: PUSH
71608: LD_INT 2
71610: ARRAY
71611: PPUSH
71612: CALL_OW 297
71616: ST_TO_ADDR
// end ; end ;
71617: GO 71506
71619: POP
71620: POP
// result := hex ;
71621: LD_ADDR_VAR 0 3
71625: PUSH
71626: LD_VAR 0 7
71630: ST_TO_ADDR
// end ;
71631: LD_VAR 0 3
71635: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71636: LD_INT 0
71638: PPUSH
71639: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71640: LD_VAR 0 1
71644: NOT
71645: PUSH
71646: LD_VAR 0 1
71650: PUSH
71651: LD_INT 21
71653: PUSH
71654: LD_INT 2
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 23
71663: PUSH
71664: LD_INT 2
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PPUSH
71675: CALL_OW 69
71679: IN
71680: NOT
71681: OR
71682: IFFALSE 71686
// exit ;
71684: GO 71733
// for i = 1 to 3 do
71686: LD_ADDR_VAR 0 3
71690: PUSH
71691: DOUBLE
71692: LD_INT 1
71694: DEC
71695: ST_TO_ADDR
71696: LD_INT 3
71698: PUSH
71699: FOR_TO
71700: IFFALSE 71731
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71702: LD_VAR 0 1
71706: PPUSH
71707: CALL_OW 250
71711: PPUSH
71712: LD_VAR 0 1
71716: PPUSH
71717: CALL_OW 251
71721: PPUSH
71722: LD_INT 1
71724: PPUSH
71725: CALL_OW 453
71729: GO 71699
71731: POP
71732: POP
// end ;
71733: LD_VAR 0 2
71737: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71738: LD_INT 0
71740: PPUSH
71741: PPUSH
71742: PPUSH
71743: PPUSH
71744: PPUSH
71745: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71746: LD_VAR 0 1
71750: NOT
71751: PUSH
71752: LD_VAR 0 2
71756: NOT
71757: OR
71758: PUSH
71759: LD_VAR 0 1
71763: PPUSH
71764: CALL_OW 314
71768: OR
71769: IFFALSE 71773
// exit ;
71771: GO 72214
// x := GetX ( enemy_unit ) ;
71773: LD_ADDR_VAR 0 7
71777: PUSH
71778: LD_VAR 0 2
71782: PPUSH
71783: CALL_OW 250
71787: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71788: LD_ADDR_VAR 0 8
71792: PUSH
71793: LD_VAR 0 2
71797: PPUSH
71798: CALL_OW 251
71802: ST_TO_ADDR
// if not x or not y then
71803: LD_VAR 0 7
71807: NOT
71808: PUSH
71809: LD_VAR 0 8
71813: NOT
71814: OR
71815: IFFALSE 71819
// exit ;
71817: GO 72214
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71819: LD_ADDR_VAR 0 6
71823: PUSH
71824: LD_VAR 0 7
71828: PPUSH
71829: LD_INT 0
71831: PPUSH
71832: LD_INT 4
71834: PPUSH
71835: CALL_OW 272
71839: PUSH
71840: LD_VAR 0 8
71844: PPUSH
71845: LD_INT 0
71847: PPUSH
71848: LD_INT 4
71850: PPUSH
71851: CALL_OW 273
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_VAR 0 7
71864: PPUSH
71865: LD_INT 1
71867: PPUSH
71868: LD_INT 4
71870: PPUSH
71871: CALL_OW 272
71875: PUSH
71876: LD_VAR 0 8
71880: PPUSH
71881: LD_INT 1
71883: PPUSH
71884: LD_INT 4
71886: PPUSH
71887: CALL_OW 273
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: PUSH
71896: LD_VAR 0 7
71900: PPUSH
71901: LD_INT 2
71903: PPUSH
71904: LD_INT 4
71906: PPUSH
71907: CALL_OW 272
71911: PUSH
71912: LD_VAR 0 8
71916: PPUSH
71917: LD_INT 2
71919: PPUSH
71920: LD_INT 4
71922: PPUSH
71923: CALL_OW 273
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: LD_VAR 0 7
71936: PPUSH
71937: LD_INT 3
71939: PPUSH
71940: LD_INT 4
71942: PPUSH
71943: CALL_OW 272
71947: PUSH
71948: LD_VAR 0 8
71952: PPUSH
71953: LD_INT 3
71955: PPUSH
71956: LD_INT 4
71958: PPUSH
71959: CALL_OW 273
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_VAR 0 7
71972: PPUSH
71973: LD_INT 4
71975: PPUSH
71976: LD_INT 4
71978: PPUSH
71979: CALL_OW 272
71983: PUSH
71984: LD_VAR 0 8
71988: PPUSH
71989: LD_INT 4
71991: PPUSH
71992: LD_INT 4
71994: PPUSH
71995: CALL_OW 273
71999: PUSH
72000: EMPTY
72001: LIST
72002: LIST
72003: PUSH
72004: LD_VAR 0 7
72008: PPUSH
72009: LD_INT 5
72011: PPUSH
72012: LD_INT 4
72014: PPUSH
72015: CALL_OW 272
72019: PUSH
72020: LD_VAR 0 8
72024: PPUSH
72025: LD_INT 5
72027: PPUSH
72028: LD_INT 4
72030: PPUSH
72031: CALL_OW 273
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: ST_TO_ADDR
// for i = tmp downto 1 do
72048: LD_ADDR_VAR 0 4
72052: PUSH
72053: DOUBLE
72054: LD_VAR 0 6
72058: INC
72059: ST_TO_ADDR
72060: LD_INT 1
72062: PUSH
72063: FOR_DOWNTO
72064: IFFALSE 72165
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72066: LD_VAR 0 6
72070: PUSH
72071: LD_VAR 0 4
72075: ARRAY
72076: PUSH
72077: LD_INT 1
72079: ARRAY
72080: PPUSH
72081: LD_VAR 0 6
72085: PUSH
72086: LD_VAR 0 4
72090: ARRAY
72091: PUSH
72092: LD_INT 2
72094: ARRAY
72095: PPUSH
72096: CALL_OW 488
72100: NOT
72101: PUSH
72102: LD_VAR 0 6
72106: PUSH
72107: LD_VAR 0 4
72111: ARRAY
72112: PUSH
72113: LD_INT 1
72115: ARRAY
72116: PPUSH
72117: LD_VAR 0 6
72121: PUSH
72122: LD_VAR 0 4
72126: ARRAY
72127: PUSH
72128: LD_INT 2
72130: ARRAY
72131: PPUSH
72132: CALL_OW 428
72136: PUSH
72137: LD_INT 0
72139: NONEQUAL
72140: OR
72141: IFFALSE 72163
// tmp := Delete ( tmp , i ) ;
72143: LD_ADDR_VAR 0 6
72147: PUSH
72148: LD_VAR 0 6
72152: PPUSH
72153: LD_VAR 0 4
72157: PPUSH
72158: CALL_OW 3
72162: ST_TO_ADDR
72163: GO 72063
72165: POP
72166: POP
// j := GetClosestHex ( unit , tmp ) ;
72167: LD_ADDR_VAR 0 5
72171: PUSH
72172: LD_VAR 0 1
72176: PPUSH
72177: LD_VAR 0 6
72181: PPUSH
72182: CALL 71467 0 2
72186: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72187: LD_VAR 0 1
72191: PPUSH
72192: LD_VAR 0 5
72196: PUSH
72197: LD_INT 1
72199: ARRAY
72200: PPUSH
72201: LD_VAR 0 5
72205: PUSH
72206: LD_INT 2
72208: ARRAY
72209: PPUSH
72210: CALL_OW 111
// end ;
72214: LD_VAR 0 3
72218: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72219: LD_INT 0
72221: PPUSH
72222: PPUSH
72223: PPUSH
// uc_side = 0 ;
72224: LD_ADDR_OWVAR 20
72228: PUSH
72229: LD_INT 0
72231: ST_TO_ADDR
// uc_nation = 0 ;
72232: LD_ADDR_OWVAR 21
72236: PUSH
72237: LD_INT 0
72239: ST_TO_ADDR
// InitHc_All ( ) ;
72240: CALL_OW 584
// InitVc ;
72244: CALL_OW 20
// if mastodonts then
72248: LD_VAR 0 6
72252: IFFALSE 72319
// for i = 1 to mastodonts do
72254: LD_ADDR_VAR 0 11
72258: PUSH
72259: DOUBLE
72260: LD_INT 1
72262: DEC
72263: ST_TO_ADDR
72264: LD_VAR 0 6
72268: PUSH
72269: FOR_TO
72270: IFFALSE 72317
// begin vc_chassis := 31 ;
72272: LD_ADDR_OWVAR 37
72276: PUSH
72277: LD_INT 31
72279: ST_TO_ADDR
// vc_control := control_rider ;
72280: LD_ADDR_OWVAR 38
72284: PUSH
72285: LD_INT 4
72287: ST_TO_ADDR
// animal := CreateVehicle ;
72288: LD_ADDR_VAR 0 12
72292: PUSH
72293: CALL_OW 45
72297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72298: LD_VAR 0 12
72302: PPUSH
72303: LD_VAR 0 8
72307: PPUSH
72308: LD_INT 0
72310: PPUSH
72311: CALL 74507 0 3
// end ;
72315: GO 72269
72317: POP
72318: POP
// if horses then
72319: LD_VAR 0 5
72323: IFFALSE 72390
// for i = 1 to horses do
72325: LD_ADDR_VAR 0 11
72329: PUSH
72330: DOUBLE
72331: LD_INT 1
72333: DEC
72334: ST_TO_ADDR
72335: LD_VAR 0 5
72339: PUSH
72340: FOR_TO
72341: IFFALSE 72388
// begin hc_class := 21 ;
72343: LD_ADDR_OWVAR 28
72347: PUSH
72348: LD_INT 21
72350: ST_TO_ADDR
// hc_gallery :=  ;
72351: LD_ADDR_OWVAR 33
72355: PUSH
72356: LD_STRING 
72358: ST_TO_ADDR
// animal := CreateHuman ;
72359: LD_ADDR_VAR 0 12
72363: PUSH
72364: CALL_OW 44
72368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72369: LD_VAR 0 12
72373: PPUSH
72374: LD_VAR 0 8
72378: PPUSH
72379: LD_INT 0
72381: PPUSH
72382: CALL 74507 0 3
// end ;
72386: GO 72340
72388: POP
72389: POP
// if birds then
72390: LD_VAR 0 1
72394: IFFALSE 72461
// for i = 1 to birds do
72396: LD_ADDR_VAR 0 11
72400: PUSH
72401: DOUBLE
72402: LD_INT 1
72404: DEC
72405: ST_TO_ADDR
72406: LD_VAR 0 1
72410: PUSH
72411: FOR_TO
72412: IFFALSE 72459
// begin hc_class = 18 ;
72414: LD_ADDR_OWVAR 28
72418: PUSH
72419: LD_INT 18
72421: ST_TO_ADDR
// hc_gallery =  ;
72422: LD_ADDR_OWVAR 33
72426: PUSH
72427: LD_STRING 
72429: ST_TO_ADDR
// animal := CreateHuman ;
72430: LD_ADDR_VAR 0 12
72434: PUSH
72435: CALL_OW 44
72439: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72440: LD_VAR 0 12
72444: PPUSH
72445: LD_VAR 0 8
72449: PPUSH
72450: LD_INT 0
72452: PPUSH
72453: CALL 74507 0 3
// end ;
72457: GO 72411
72459: POP
72460: POP
// if tigers then
72461: LD_VAR 0 2
72465: IFFALSE 72549
// for i = 1 to tigers do
72467: LD_ADDR_VAR 0 11
72471: PUSH
72472: DOUBLE
72473: LD_INT 1
72475: DEC
72476: ST_TO_ADDR
72477: LD_VAR 0 2
72481: PUSH
72482: FOR_TO
72483: IFFALSE 72547
// begin hc_class = class_tiger ;
72485: LD_ADDR_OWVAR 28
72489: PUSH
72490: LD_INT 14
72492: ST_TO_ADDR
// hc_gallery =  ;
72493: LD_ADDR_OWVAR 33
72497: PUSH
72498: LD_STRING 
72500: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72501: LD_ADDR_OWVAR 35
72505: PUSH
72506: LD_INT 7
72508: NEG
72509: PPUSH
72510: LD_INT 7
72512: PPUSH
72513: CALL_OW 12
72517: ST_TO_ADDR
// animal := CreateHuman ;
72518: LD_ADDR_VAR 0 12
72522: PUSH
72523: CALL_OW 44
72527: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72528: LD_VAR 0 12
72532: PPUSH
72533: LD_VAR 0 8
72537: PPUSH
72538: LD_INT 0
72540: PPUSH
72541: CALL 74507 0 3
// end ;
72545: GO 72482
72547: POP
72548: POP
// if apemans then
72549: LD_VAR 0 3
72553: IFFALSE 72676
// for i = 1 to apemans do
72555: LD_ADDR_VAR 0 11
72559: PUSH
72560: DOUBLE
72561: LD_INT 1
72563: DEC
72564: ST_TO_ADDR
72565: LD_VAR 0 3
72569: PUSH
72570: FOR_TO
72571: IFFALSE 72674
// begin hc_class = class_apeman ;
72573: LD_ADDR_OWVAR 28
72577: PUSH
72578: LD_INT 12
72580: ST_TO_ADDR
// hc_gallery =  ;
72581: LD_ADDR_OWVAR 33
72585: PUSH
72586: LD_STRING 
72588: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72589: LD_ADDR_OWVAR 35
72593: PUSH
72594: LD_INT 2
72596: NEG
72597: PPUSH
72598: LD_INT 2
72600: PPUSH
72601: CALL_OW 12
72605: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72606: LD_ADDR_OWVAR 31
72610: PUSH
72611: LD_INT 1
72613: PPUSH
72614: LD_INT 3
72616: PPUSH
72617: CALL_OW 12
72621: PUSH
72622: LD_INT 1
72624: PPUSH
72625: LD_INT 3
72627: PPUSH
72628: CALL_OW 12
72632: PUSH
72633: LD_INT 0
72635: PUSH
72636: LD_INT 0
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: ST_TO_ADDR
// animal := CreateHuman ;
72645: LD_ADDR_VAR 0 12
72649: PUSH
72650: CALL_OW 44
72654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72655: LD_VAR 0 12
72659: PPUSH
72660: LD_VAR 0 8
72664: PPUSH
72665: LD_INT 0
72667: PPUSH
72668: CALL 74507 0 3
// end ;
72672: GO 72570
72674: POP
72675: POP
// if enchidnas then
72676: LD_VAR 0 4
72680: IFFALSE 72747
// for i = 1 to enchidnas do
72682: LD_ADDR_VAR 0 11
72686: PUSH
72687: DOUBLE
72688: LD_INT 1
72690: DEC
72691: ST_TO_ADDR
72692: LD_VAR 0 4
72696: PUSH
72697: FOR_TO
72698: IFFALSE 72745
// begin hc_class = 13 ;
72700: LD_ADDR_OWVAR 28
72704: PUSH
72705: LD_INT 13
72707: ST_TO_ADDR
// hc_gallery =  ;
72708: LD_ADDR_OWVAR 33
72712: PUSH
72713: LD_STRING 
72715: ST_TO_ADDR
// animal := CreateHuman ;
72716: LD_ADDR_VAR 0 12
72720: PUSH
72721: CALL_OW 44
72725: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72726: LD_VAR 0 12
72730: PPUSH
72731: LD_VAR 0 8
72735: PPUSH
72736: LD_INT 0
72738: PPUSH
72739: CALL 74507 0 3
// end ;
72743: GO 72697
72745: POP
72746: POP
// if fishes then
72747: LD_VAR 0 7
72751: IFFALSE 72818
// for i = 1 to fishes do
72753: LD_ADDR_VAR 0 11
72757: PUSH
72758: DOUBLE
72759: LD_INT 1
72761: DEC
72762: ST_TO_ADDR
72763: LD_VAR 0 7
72767: PUSH
72768: FOR_TO
72769: IFFALSE 72816
// begin hc_class = 20 ;
72771: LD_ADDR_OWVAR 28
72775: PUSH
72776: LD_INT 20
72778: ST_TO_ADDR
// hc_gallery =  ;
72779: LD_ADDR_OWVAR 33
72783: PUSH
72784: LD_STRING 
72786: ST_TO_ADDR
// animal := CreateHuman ;
72787: LD_ADDR_VAR 0 12
72791: PUSH
72792: CALL_OW 44
72796: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72797: LD_VAR 0 12
72801: PPUSH
72802: LD_VAR 0 9
72806: PPUSH
72807: LD_INT 0
72809: PPUSH
72810: CALL 74507 0 3
// end ;
72814: GO 72768
72816: POP
72817: POP
// end ;
72818: LD_VAR 0 10
72822: RET
// export function WantHeal ( sci , unit ) ; begin
72823: LD_INT 0
72825: PPUSH
// if GetTaskList ( sci ) > 0 then
72826: LD_VAR 0 1
72830: PPUSH
72831: CALL_OW 437
72835: PUSH
72836: LD_INT 0
72838: GREATER
72839: IFFALSE 72909
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72841: LD_VAR 0 1
72845: PPUSH
72846: CALL_OW 437
72850: PUSH
72851: LD_INT 1
72853: ARRAY
72854: PUSH
72855: LD_INT 1
72857: ARRAY
72858: PUSH
72859: LD_STRING l
72861: EQUAL
72862: PUSH
72863: LD_VAR 0 1
72867: PPUSH
72868: CALL_OW 437
72872: PUSH
72873: LD_INT 1
72875: ARRAY
72876: PUSH
72877: LD_INT 4
72879: ARRAY
72880: PUSH
72881: LD_VAR 0 2
72885: EQUAL
72886: AND
72887: IFFALSE 72899
// result := true else
72889: LD_ADDR_VAR 0 3
72893: PUSH
72894: LD_INT 1
72896: ST_TO_ADDR
72897: GO 72907
// result := false ;
72899: LD_ADDR_VAR 0 3
72903: PUSH
72904: LD_INT 0
72906: ST_TO_ADDR
// end else
72907: GO 72917
// result := false ;
72909: LD_ADDR_VAR 0 3
72913: PUSH
72914: LD_INT 0
72916: ST_TO_ADDR
// end ;
72917: LD_VAR 0 3
72921: RET
// export function HealTarget ( sci ) ; begin
72922: LD_INT 0
72924: PPUSH
// if not sci then
72925: LD_VAR 0 1
72929: NOT
72930: IFFALSE 72934
// exit ;
72932: GO 72999
// result := 0 ;
72934: LD_ADDR_VAR 0 2
72938: PUSH
72939: LD_INT 0
72941: ST_TO_ADDR
// if GetTaskList ( sci ) then
72942: LD_VAR 0 1
72946: PPUSH
72947: CALL_OW 437
72951: IFFALSE 72999
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72953: LD_VAR 0 1
72957: PPUSH
72958: CALL_OW 437
72962: PUSH
72963: LD_INT 1
72965: ARRAY
72966: PUSH
72967: LD_INT 1
72969: ARRAY
72970: PUSH
72971: LD_STRING l
72973: EQUAL
72974: IFFALSE 72999
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72976: LD_ADDR_VAR 0 2
72980: PUSH
72981: LD_VAR 0 1
72985: PPUSH
72986: CALL_OW 437
72990: PUSH
72991: LD_INT 1
72993: ARRAY
72994: PUSH
72995: LD_INT 4
72997: ARRAY
72998: ST_TO_ADDR
// end ;
72999: LD_VAR 0 2
73003: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73004: LD_INT 0
73006: PPUSH
73007: PPUSH
73008: PPUSH
73009: PPUSH
// if not base_units then
73010: LD_VAR 0 1
73014: NOT
73015: IFFALSE 73019
// exit ;
73017: GO 73106
// result := false ;
73019: LD_ADDR_VAR 0 2
73023: PUSH
73024: LD_INT 0
73026: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73027: LD_ADDR_VAR 0 5
73031: PUSH
73032: LD_VAR 0 1
73036: PPUSH
73037: LD_INT 21
73039: PUSH
73040: LD_INT 3
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: PPUSH
73047: CALL_OW 72
73051: ST_TO_ADDR
// if not tmp then
73052: LD_VAR 0 5
73056: NOT
73057: IFFALSE 73061
// exit ;
73059: GO 73106
// for i in tmp do
73061: LD_ADDR_VAR 0 3
73065: PUSH
73066: LD_VAR 0 5
73070: PUSH
73071: FOR_IN
73072: IFFALSE 73104
// begin result := EnemyInRange ( i , 22 ) ;
73074: LD_ADDR_VAR 0 2
73078: PUSH
73079: LD_VAR 0 3
73083: PPUSH
73084: LD_INT 22
73086: PPUSH
73087: CALL 71342 0 2
73091: ST_TO_ADDR
// if result then
73092: LD_VAR 0 2
73096: IFFALSE 73102
// exit ;
73098: POP
73099: POP
73100: GO 73106
// end ;
73102: GO 73071
73104: POP
73105: POP
// end ;
73106: LD_VAR 0 2
73110: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
73111: LD_INT 0
73113: PPUSH
73114: PPUSH
// if not units then
73115: LD_VAR 0 1
73119: NOT
73120: IFFALSE 73124
// exit ;
73122: GO 73194
// result := [ ] ;
73124: LD_ADDR_VAR 0 3
73128: PUSH
73129: EMPTY
73130: ST_TO_ADDR
// for i in units do
73131: LD_ADDR_VAR 0 4
73135: PUSH
73136: LD_VAR 0 1
73140: PUSH
73141: FOR_IN
73142: IFFALSE 73192
// if GetTag ( i ) = tag then
73144: LD_VAR 0 4
73148: PPUSH
73149: CALL_OW 110
73153: PUSH
73154: LD_VAR 0 2
73158: EQUAL
73159: IFFALSE 73190
// result := Replace ( result , result + 1 , i ) ;
73161: LD_ADDR_VAR 0 3
73165: PUSH
73166: LD_VAR 0 3
73170: PPUSH
73171: LD_VAR 0 3
73175: PUSH
73176: LD_INT 1
73178: PLUS
73179: PPUSH
73180: LD_VAR 0 4
73184: PPUSH
73185: CALL_OW 1
73189: ST_TO_ADDR
73190: GO 73141
73192: POP
73193: POP
// end ;
73194: LD_VAR 0 3
73198: RET
// export function IsDriver ( un ) ; begin
73199: LD_INT 0
73201: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73202: LD_ADDR_VAR 0 2
73206: PUSH
73207: LD_VAR 0 1
73211: PUSH
73212: LD_INT 55
73214: PUSH
73215: EMPTY
73216: LIST
73217: PPUSH
73218: CALL_OW 69
73222: IN
73223: ST_TO_ADDR
// end ;
73224: LD_VAR 0 2
73228: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73229: LD_INT 0
73231: PPUSH
73232: PPUSH
// list := [ ] ;
73233: LD_ADDR_VAR 0 5
73237: PUSH
73238: EMPTY
73239: ST_TO_ADDR
// case d of 0 :
73240: LD_VAR 0 3
73244: PUSH
73245: LD_INT 0
73247: DOUBLE
73248: EQUAL
73249: IFTRUE 73253
73251: GO 73386
73253: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73254: LD_ADDR_VAR 0 5
73258: PUSH
73259: LD_VAR 0 1
73263: PUSH
73264: LD_INT 4
73266: MINUS
73267: PUSH
73268: LD_VAR 0 2
73272: PUSH
73273: LD_INT 4
73275: MINUS
73276: PUSH
73277: LD_INT 2
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: LIST
73284: PUSH
73285: LD_VAR 0 1
73289: PUSH
73290: LD_INT 3
73292: MINUS
73293: PUSH
73294: LD_VAR 0 2
73298: PUSH
73299: LD_INT 1
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: LIST
73306: PUSH
73307: LD_VAR 0 1
73311: PUSH
73312: LD_INT 4
73314: PLUS
73315: PUSH
73316: LD_VAR 0 2
73320: PUSH
73321: LD_INT 4
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: LIST
73328: PUSH
73329: LD_VAR 0 1
73333: PUSH
73334: LD_INT 3
73336: PLUS
73337: PUSH
73338: LD_VAR 0 2
73342: PUSH
73343: LD_INT 3
73345: PLUS
73346: PUSH
73347: LD_INT 5
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: LIST
73354: PUSH
73355: LD_VAR 0 1
73359: PUSH
73360: LD_VAR 0 2
73364: PUSH
73365: LD_INT 4
73367: PLUS
73368: PUSH
73369: LD_INT 0
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: LIST
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: LIST
73381: LIST
73382: LIST
73383: ST_TO_ADDR
// end ; 1 :
73384: GO 74084
73386: LD_INT 1
73388: DOUBLE
73389: EQUAL
73390: IFTRUE 73394
73392: GO 73527
73394: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73395: LD_ADDR_VAR 0 5
73399: PUSH
73400: LD_VAR 0 1
73404: PUSH
73405: LD_VAR 0 2
73409: PUSH
73410: LD_INT 4
73412: MINUS
73413: PUSH
73414: LD_INT 3
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: LIST
73421: PUSH
73422: LD_VAR 0 1
73426: PUSH
73427: LD_INT 3
73429: MINUS
73430: PUSH
73431: LD_VAR 0 2
73435: PUSH
73436: LD_INT 3
73438: MINUS
73439: PUSH
73440: LD_INT 2
73442: PUSH
73443: EMPTY
73444: LIST
73445: LIST
73446: LIST
73447: PUSH
73448: LD_VAR 0 1
73452: PUSH
73453: LD_INT 4
73455: MINUS
73456: PUSH
73457: LD_VAR 0 2
73461: PUSH
73462: LD_INT 1
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: LIST
73469: PUSH
73470: LD_VAR 0 1
73474: PUSH
73475: LD_VAR 0 2
73479: PUSH
73480: LD_INT 3
73482: PLUS
73483: PUSH
73484: LD_INT 0
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: LIST
73491: PUSH
73492: LD_VAR 0 1
73496: PUSH
73497: LD_INT 4
73499: PLUS
73500: PUSH
73501: LD_VAR 0 2
73505: PUSH
73506: LD_INT 4
73508: PLUS
73509: PUSH
73510: LD_INT 5
73512: PUSH
73513: EMPTY
73514: LIST
73515: LIST
73516: LIST
73517: PUSH
73518: EMPTY
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: ST_TO_ADDR
// end ; 2 :
73525: GO 74084
73527: LD_INT 2
73529: DOUBLE
73530: EQUAL
73531: IFTRUE 73535
73533: GO 73664
73535: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73536: LD_ADDR_VAR 0 5
73540: PUSH
73541: LD_VAR 0 1
73545: PUSH
73546: LD_VAR 0 2
73550: PUSH
73551: LD_INT 3
73553: MINUS
73554: PUSH
73555: LD_INT 3
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: LIST
73562: PUSH
73563: LD_VAR 0 1
73567: PUSH
73568: LD_INT 4
73570: PLUS
73571: PUSH
73572: LD_VAR 0 2
73576: PUSH
73577: LD_INT 4
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: LIST
73584: PUSH
73585: LD_VAR 0 1
73589: PUSH
73590: LD_VAR 0 2
73594: PUSH
73595: LD_INT 4
73597: PLUS
73598: PUSH
73599: LD_INT 0
73601: PUSH
73602: EMPTY
73603: LIST
73604: LIST
73605: LIST
73606: PUSH
73607: LD_VAR 0 1
73611: PUSH
73612: LD_INT 3
73614: MINUS
73615: PUSH
73616: LD_VAR 0 2
73620: PUSH
73621: LD_INT 1
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: LIST
73628: PUSH
73629: LD_VAR 0 1
73633: PUSH
73634: LD_INT 4
73636: MINUS
73637: PUSH
73638: LD_VAR 0 2
73642: PUSH
73643: LD_INT 4
73645: MINUS
73646: PUSH
73647: LD_INT 2
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: LIST
73654: PUSH
73655: EMPTY
73656: LIST
73657: LIST
73658: LIST
73659: LIST
73660: LIST
73661: ST_TO_ADDR
// end ; 3 :
73662: GO 74084
73664: LD_INT 3
73666: DOUBLE
73667: EQUAL
73668: IFTRUE 73672
73670: GO 73805
73672: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73673: LD_ADDR_VAR 0 5
73677: PUSH
73678: LD_VAR 0 1
73682: PUSH
73683: LD_INT 3
73685: PLUS
73686: PUSH
73687: LD_VAR 0 2
73691: PUSH
73692: LD_INT 4
73694: PUSH
73695: EMPTY
73696: LIST
73697: LIST
73698: LIST
73699: PUSH
73700: LD_VAR 0 1
73704: PUSH
73705: LD_INT 4
73707: PLUS
73708: PUSH
73709: LD_VAR 0 2
73713: PUSH
73714: LD_INT 4
73716: PLUS
73717: PUSH
73718: LD_INT 5
73720: PUSH
73721: EMPTY
73722: LIST
73723: LIST
73724: LIST
73725: PUSH
73726: LD_VAR 0 1
73730: PUSH
73731: LD_INT 4
73733: MINUS
73734: PUSH
73735: LD_VAR 0 2
73739: PUSH
73740: LD_INT 1
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: LIST
73747: PUSH
73748: LD_VAR 0 1
73752: PUSH
73753: LD_VAR 0 2
73757: PUSH
73758: LD_INT 4
73760: MINUS
73761: PUSH
73762: LD_INT 3
73764: PUSH
73765: EMPTY
73766: LIST
73767: LIST
73768: LIST
73769: PUSH
73770: LD_VAR 0 1
73774: PUSH
73775: LD_INT 3
73777: MINUS
73778: PUSH
73779: LD_VAR 0 2
73783: PUSH
73784: LD_INT 3
73786: MINUS
73787: PUSH
73788: LD_INT 2
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: LIST
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: LIST
73800: LIST
73801: LIST
73802: ST_TO_ADDR
// end ; 4 :
73803: GO 74084
73805: LD_INT 4
73807: DOUBLE
73808: EQUAL
73809: IFTRUE 73813
73811: GO 73946
73813: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73814: LD_ADDR_VAR 0 5
73818: PUSH
73819: LD_VAR 0 1
73823: PUSH
73824: LD_VAR 0 2
73828: PUSH
73829: LD_INT 4
73831: PLUS
73832: PUSH
73833: LD_INT 0
73835: PUSH
73836: EMPTY
73837: LIST
73838: LIST
73839: LIST
73840: PUSH
73841: LD_VAR 0 1
73845: PUSH
73846: LD_INT 3
73848: PLUS
73849: PUSH
73850: LD_VAR 0 2
73854: PUSH
73855: LD_INT 3
73857: PLUS
73858: PUSH
73859: LD_INT 5
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: LIST
73866: PUSH
73867: LD_VAR 0 1
73871: PUSH
73872: LD_INT 4
73874: PLUS
73875: PUSH
73876: LD_VAR 0 2
73880: PUSH
73881: LD_INT 4
73883: PUSH
73884: EMPTY
73885: LIST
73886: LIST
73887: LIST
73888: PUSH
73889: LD_VAR 0 1
73893: PUSH
73894: LD_VAR 0 2
73898: PUSH
73899: LD_INT 3
73901: MINUS
73902: PUSH
73903: LD_INT 3
73905: PUSH
73906: EMPTY
73907: LIST
73908: LIST
73909: LIST
73910: PUSH
73911: LD_VAR 0 1
73915: PUSH
73916: LD_INT 4
73918: MINUS
73919: PUSH
73920: LD_VAR 0 2
73924: PUSH
73925: LD_INT 4
73927: MINUS
73928: PUSH
73929: LD_INT 2
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: LIST
73936: PUSH
73937: EMPTY
73938: LIST
73939: LIST
73940: LIST
73941: LIST
73942: LIST
73943: ST_TO_ADDR
// end ; 5 :
73944: GO 74084
73946: LD_INT 5
73948: DOUBLE
73949: EQUAL
73950: IFTRUE 73954
73952: GO 74083
73954: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73955: LD_ADDR_VAR 0 5
73959: PUSH
73960: LD_VAR 0 1
73964: PUSH
73965: LD_INT 4
73967: MINUS
73968: PUSH
73969: LD_VAR 0 2
73973: PUSH
73974: LD_INT 1
73976: PUSH
73977: EMPTY
73978: LIST
73979: LIST
73980: LIST
73981: PUSH
73982: LD_VAR 0 1
73986: PUSH
73987: LD_VAR 0 2
73991: PUSH
73992: LD_INT 4
73994: MINUS
73995: PUSH
73996: LD_INT 3
73998: PUSH
73999: EMPTY
74000: LIST
74001: LIST
74002: LIST
74003: PUSH
74004: LD_VAR 0 1
74008: PUSH
74009: LD_INT 4
74011: PLUS
74012: PUSH
74013: LD_VAR 0 2
74017: PUSH
74018: LD_INT 4
74020: PLUS
74021: PUSH
74022: LD_INT 5
74024: PUSH
74025: EMPTY
74026: LIST
74027: LIST
74028: LIST
74029: PUSH
74030: LD_VAR 0 1
74034: PUSH
74035: LD_INT 3
74037: PLUS
74038: PUSH
74039: LD_VAR 0 2
74043: PUSH
74044: LD_INT 4
74046: PUSH
74047: EMPTY
74048: LIST
74049: LIST
74050: LIST
74051: PUSH
74052: LD_VAR 0 1
74056: PUSH
74057: LD_VAR 0 2
74061: PUSH
74062: LD_INT 3
74064: PLUS
74065: PUSH
74066: LD_INT 0
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: LIST
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: LIST
74078: LIST
74079: LIST
74080: ST_TO_ADDR
// end ; end ;
74081: GO 74084
74083: POP
// result := list ;
74084: LD_ADDR_VAR 0 4
74088: PUSH
74089: LD_VAR 0 5
74093: ST_TO_ADDR
// end ;
74094: LD_VAR 0 4
74098: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74099: LD_INT 0
74101: PPUSH
74102: PPUSH
74103: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74104: LD_VAR 0 1
74108: NOT
74109: PUSH
74110: LD_VAR 0 2
74114: PUSH
74115: LD_INT 1
74117: PUSH
74118: LD_INT 2
74120: PUSH
74121: LD_INT 3
74123: PUSH
74124: LD_INT 4
74126: PUSH
74127: EMPTY
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: IN
74133: NOT
74134: OR
74135: IFFALSE 74139
// exit ;
74137: GO 74231
// tmp := [ ] ;
74139: LD_ADDR_VAR 0 5
74143: PUSH
74144: EMPTY
74145: ST_TO_ADDR
// for i in units do
74146: LD_ADDR_VAR 0 4
74150: PUSH
74151: LD_VAR 0 1
74155: PUSH
74156: FOR_IN
74157: IFFALSE 74200
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74159: LD_ADDR_VAR 0 5
74163: PUSH
74164: LD_VAR 0 5
74168: PPUSH
74169: LD_VAR 0 5
74173: PUSH
74174: LD_INT 1
74176: PLUS
74177: PPUSH
74178: LD_VAR 0 4
74182: PPUSH
74183: LD_VAR 0 2
74187: PPUSH
74188: CALL_OW 259
74192: PPUSH
74193: CALL_OW 2
74197: ST_TO_ADDR
74198: GO 74156
74200: POP
74201: POP
// if not tmp then
74202: LD_VAR 0 5
74206: NOT
74207: IFFALSE 74211
// exit ;
74209: GO 74231
// result := SortListByListDesc ( units , tmp ) ;
74211: LD_ADDR_VAR 0 3
74215: PUSH
74216: LD_VAR 0 1
74220: PPUSH
74221: LD_VAR 0 5
74225: PPUSH
74226: CALL_OW 77
74230: ST_TO_ADDR
// end ;
74231: LD_VAR 0 3
74235: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74236: LD_INT 0
74238: PPUSH
74239: PPUSH
74240: PPUSH
// result := false ;
74241: LD_ADDR_VAR 0 3
74245: PUSH
74246: LD_INT 0
74248: ST_TO_ADDR
// x := GetX ( building ) ;
74249: LD_ADDR_VAR 0 4
74253: PUSH
74254: LD_VAR 0 2
74258: PPUSH
74259: CALL_OW 250
74263: ST_TO_ADDR
// y := GetY ( building ) ;
74264: LD_ADDR_VAR 0 5
74268: PUSH
74269: LD_VAR 0 2
74273: PPUSH
74274: CALL_OW 251
74278: ST_TO_ADDR
// if not building or not x or not y then
74279: LD_VAR 0 2
74283: NOT
74284: PUSH
74285: LD_VAR 0 4
74289: NOT
74290: OR
74291: PUSH
74292: LD_VAR 0 5
74296: NOT
74297: OR
74298: IFFALSE 74302
// exit ;
74300: GO 74394
// if GetTaskList ( unit ) then
74302: LD_VAR 0 1
74306: PPUSH
74307: CALL_OW 437
74311: IFFALSE 74394
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74313: LD_STRING e
74315: PUSH
74316: LD_VAR 0 1
74320: PPUSH
74321: CALL_OW 437
74325: PUSH
74326: LD_INT 1
74328: ARRAY
74329: PUSH
74330: LD_INT 1
74332: ARRAY
74333: EQUAL
74334: PUSH
74335: LD_VAR 0 4
74339: PUSH
74340: LD_VAR 0 1
74344: PPUSH
74345: CALL_OW 437
74349: PUSH
74350: LD_INT 1
74352: ARRAY
74353: PUSH
74354: LD_INT 2
74356: ARRAY
74357: EQUAL
74358: AND
74359: PUSH
74360: LD_VAR 0 5
74364: PUSH
74365: LD_VAR 0 1
74369: PPUSH
74370: CALL_OW 437
74374: PUSH
74375: LD_INT 1
74377: ARRAY
74378: PUSH
74379: LD_INT 3
74381: ARRAY
74382: EQUAL
74383: AND
74384: IFFALSE 74394
// result := true end ;
74386: LD_ADDR_VAR 0 3
74390: PUSH
74391: LD_INT 1
74393: ST_TO_ADDR
// end ;
74394: LD_VAR 0 3
74398: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74399: LD_INT 0
74401: PPUSH
// result := false ;
74402: LD_ADDR_VAR 0 4
74406: PUSH
74407: LD_INT 0
74409: ST_TO_ADDR
// if GetTaskList ( unit ) then
74410: LD_VAR 0 1
74414: PPUSH
74415: CALL_OW 437
74419: IFFALSE 74502
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74421: LD_STRING M
74423: PUSH
74424: LD_VAR 0 1
74428: PPUSH
74429: CALL_OW 437
74433: PUSH
74434: LD_INT 1
74436: ARRAY
74437: PUSH
74438: LD_INT 1
74440: ARRAY
74441: EQUAL
74442: PUSH
74443: LD_VAR 0 2
74447: PUSH
74448: LD_VAR 0 1
74452: PPUSH
74453: CALL_OW 437
74457: PUSH
74458: LD_INT 1
74460: ARRAY
74461: PUSH
74462: LD_INT 2
74464: ARRAY
74465: EQUAL
74466: AND
74467: PUSH
74468: LD_VAR 0 3
74472: PUSH
74473: LD_VAR 0 1
74477: PPUSH
74478: CALL_OW 437
74482: PUSH
74483: LD_INT 1
74485: ARRAY
74486: PUSH
74487: LD_INT 3
74489: ARRAY
74490: EQUAL
74491: AND
74492: IFFALSE 74502
// result := true ;
74494: LD_ADDR_VAR 0 4
74498: PUSH
74499: LD_INT 1
74501: ST_TO_ADDR
// end ; end ;
74502: LD_VAR 0 4
74506: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74507: LD_INT 0
74509: PPUSH
74510: PPUSH
74511: PPUSH
74512: PPUSH
// if not unit or not area then
74513: LD_VAR 0 1
74517: NOT
74518: PUSH
74519: LD_VAR 0 2
74523: NOT
74524: OR
74525: IFFALSE 74529
// exit ;
74527: GO 74693
// tmp := AreaToList ( area , i ) ;
74529: LD_ADDR_VAR 0 6
74533: PUSH
74534: LD_VAR 0 2
74538: PPUSH
74539: LD_VAR 0 5
74543: PPUSH
74544: CALL_OW 517
74548: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74549: LD_ADDR_VAR 0 5
74553: PUSH
74554: DOUBLE
74555: LD_INT 1
74557: DEC
74558: ST_TO_ADDR
74559: LD_VAR 0 6
74563: PUSH
74564: LD_INT 1
74566: ARRAY
74567: PUSH
74568: FOR_TO
74569: IFFALSE 74691
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74571: LD_ADDR_VAR 0 7
74575: PUSH
74576: LD_VAR 0 6
74580: PUSH
74581: LD_INT 1
74583: ARRAY
74584: PUSH
74585: LD_VAR 0 5
74589: ARRAY
74590: PUSH
74591: LD_VAR 0 6
74595: PUSH
74596: LD_INT 2
74598: ARRAY
74599: PUSH
74600: LD_VAR 0 5
74604: ARRAY
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74610: LD_VAR 0 7
74614: PUSH
74615: LD_INT 1
74617: ARRAY
74618: PPUSH
74619: LD_VAR 0 7
74623: PUSH
74624: LD_INT 2
74626: ARRAY
74627: PPUSH
74628: CALL_OW 428
74632: PUSH
74633: LD_INT 0
74635: EQUAL
74636: IFFALSE 74689
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74638: LD_VAR 0 1
74642: PPUSH
74643: LD_VAR 0 7
74647: PUSH
74648: LD_INT 1
74650: ARRAY
74651: PPUSH
74652: LD_VAR 0 7
74656: PUSH
74657: LD_INT 2
74659: ARRAY
74660: PPUSH
74661: LD_VAR 0 3
74665: PPUSH
74666: CALL_OW 48
// result := IsPlaced ( unit ) ;
74670: LD_ADDR_VAR 0 4
74674: PUSH
74675: LD_VAR 0 1
74679: PPUSH
74680: CALL_OW 305
74684: ST_TO_ADDR
// exit ;
74685: POP
74686: POP
74687: GO 74693
// end ; end ;
74689: GO 74568
74691: POP
74692: POP
// end ;
74693: LD_VAR 0 4
74697: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74698: LD_INT 0
74700: PPUSH
74701: PPUSH
74702: PPUSH
// if not side or side > 8 then
74703: LD_VAR 0 1
74707: NOT
74708: PUSH
74709: LD_VAR 0 1
74713: PUSH
74714: LD_INT 8
74716: GREATER
74717: OR
74718: IFFALSE 74722
// exit ;
74720: GO 74909
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74722: LD_ADDR_VAR 0 4
74726: PUSH
74727: LD_INT 22
74729: PUSH
74730: LD_VAR 0 1
74734: PUSH
74735: EMPTY
74736: LIST
74737: LIST
74738: PUSH
74739: LD_INT 21
74741: PUSH
74742: LD_INT 3
74744: PUSH
74745: EMPTY
74746: LIST
74747: LIST
74748: PUSH
74749: EMPTY
74750: LIST
74751: LIST
74752: PPUSH
74753: CALL_OW 69
74757: ST_TO_ADDR
// if not tmp then
74758: LD_VAR 0 4
74762: NOT
74763: IFFALSE 74767
// exit ;
74765: GO 74909
// enable_addtolog := true ;
74767: LD_ADDR_OWVAR 81
74771: PUSH
74772: LD_INT 1
74774: ST_TO_ADDR
// AddToLog ( [ ) ;
74775: LD_STRING [
74777: PPUSH
74778: CALL_OW 561
// for i in tmp do
74782: LD_ADDR_VAR 0 3
74786: PUSH
74787: LD_VAR 0 4
74791: PUSH
74792: FOR_IN
74793: IFFALSE 74900
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74795: LD_STRING [
74797: PUSH
74798: LD_VAR 0 3
74802: PPUSH
74803: CALL_OW 266
74807: STR
74808: PUSH
74809: LD_STRING , 
74811: STR
74812: PUSH
74813: LD_VAR 0 3
74817: PPUSH
74818: CALL_OW 250
74822: STR
74823: PUSH
74824: LD_STRING , 
74826: STR
74827: PUSH
74828: LD_VAR 0 3
74832: PPUSH
74833: CALL_OW 251
74837: STR
74838: PUSH
74839: LD_STRING , 
74841: STR
74842: PUSH
74843: LD_VAR 0 3
74847: PPUSH
74848: CALL_OW 254
74852: STR
74853: PUSH
74854: LD_STRING , 
74856: STR
74857: PUSH
74858: LD_VAR 0 3
74862: PPUSH
74863: LD_INT 1
74865: PPUSH
74866: CALL_OW 268
74870: STR
74871: PUSH
74872: LD_STRING , 
74874: STR
74875: PUSH
74876: LD_VAR 0 3
74880: PPUSH
74881: LD_INT 2
74883: PPUSH
74884: CALL_OW 268
74888: STR
74889: PUSH
74890: LD_STRING ],
74892: STR
74893: PPUSH
74894: CALL_OW 561
// end ;
74898: GO 74792
74900: POP
74901: POP
// AddToLog ( ]; ) ;
74902: LD_STRING ];
74904: PPUSH
74905: CALL_OW 561
// end ;
74909: LD_VAR 0 2
74913: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74914: LD_INT 0
74916: PPUSH
74917: PPUSH
74918: PPUSH
74919: PPUSH
74920: PPUSH
// if not area or not rate or not max then
74921: LD_VAR 0 1
74925: NOT
74926: PUSH
74927: LD_VAR 0 2
74931: NOT
74932: OR
74933: PUSH
74934: LD_VAR 0 4
74938: NOT
74939: OR
74940: IFFALSE 74944
// exit ;
74942: GO 75136
// while 1 do
74944: LD_INT 1
74946: IFFALSE 75136
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74948: LD_ADDR_VAR 0 9
74952: PUSH
74953: LD_VAR 0 1
74957: PPUSH
74958: LD_INT 1
74960: PPUSH
74961: CALL_OW 287
74965: PUSH
74966: LD_INT 10
74968: MUL
74969: ST_TO_ADDR
// r := rate / 10 ;
74970: LD_ADDR_VAR 0 7
74974: PUSH
74975: LD_VAR 0 2
74979: PUSH
74980: LD_INT 10
74982: DIVREAL
74983: ST_TO_ADDR
// time := 1 1$00 ;
74984: LD_ADDR_VAR 0 8
74988: PUSH
74989: LD_INT 2100
74991: ST_TO_ADDR
// if amount < min then
74992: LD_VAR 0 9
74996: PUSH
74997: LD_VAR 0 3
75001: LESS
75002: IFFALSE 75020
// r := r * 2 else
75004: LD_ADDR_VAR 0 7
75008: PUSH
75009: LD_VAR 0 7
75013: PUSH
75014: LD_INT 2
75016: MUL
75017: ST_TO_ADDR
75018: GO 75046
// if amount > max then
75020: LD_VAR 0 9
75024: PUSH
75025: LD_VAR 0 4
75029: GREATER
75030: IFFALSE 75046
// r := r / 2 ;
75032: LD_ADDR_VAR 0 7
75036: PUSH
75037: LD_VAR 0 7
75041: PUSH
75042: LD_INT 2
75044: DIVREAL
75045: ST_TO_ADDR
// time := time / r ;
75046: LD_ADDR_VAR 0 8
75050: PUSH
75051: LD_VAR 0 8
75055: PUSH
75056: LD_VAR 0 7
75060: DIVREAL
75061: ST_TO_ADDR
// if time < 0 then
75062: LD_VAR 0 8
75066: PUSH
75067: LD_INT 0
75069: LESS
75070: IFFALSE 75087
// time := time * - 1 ;
75072: LD_ADDR_VAR 0 8
75076: PUSH
75077: LD_VAR 0 8
75081: PUSH
75082: LD_INT 1
75084: NEG
75085: MUL
75086: ST_TO_ADDR
// wait ( time ) ;
75087: LD_VAR 0 8
75091: PPUSH
75092: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
75096: LD_INT 35
75098: PPUSH
75099: LD_INT 875
75101: PPUSH
75102: CALL_OW 12
75106: PPUSH
75107: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75111: LD_INT 1
75113: PPUSH
75114: LD_INT 5
75116: PPUSH
75117: CALL_OW 12
75121: PPUSH
75122: LD_VAR 0 1
75126: PPUSH
75127: LD_INT 1
75129: PPUSH
75130: CALL_OW 55
// end ;
75134: GO 74944
// end ;
75136: LD_VAR 0 5
75140: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75141: LD_INT 0
75143: PPUSH
75144: PPUSH
75145: PPUSH
75146: PPUSH
75147: PPUSH
75148: PPUSH
75149: PPUSH
75150: PPUSH
// if not turrets or not factories then
75151: LD_VAR 0 1
75155: NOT
75156: PUSH
75157: LD_VAR 0 2
75161: NOT
75162: OR
75163: IFFALSE 75167
// exit ;
75165: GO 75474
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75167: LD_ADDR_VAR 0 10
75171: PUSH
75172: LD_INT 5
75174: PUSH
75175: LD_INT 6
75177: PUSH
75178: EMPTY
75179: LIST
75180: LIST
75181: PUSH
75182: LD_INT 2
75184: PUSH
75185: LD_INT 4
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: PUSH
75192: LD_INT 3
75194: PUSH
75195: LD_INT 5
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: PUSH
75202: EMPTY
75203: LIST
75204: LIST
75205: LIST
75206: PUSH
75207: LD_INT 24
75209: PUSH
75210: LD_INT 25
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: PUSH
75217: LD_INT 23
75219: PUSH
75220: LD_INT 27
75222: PUSH
75223: EMPTY
75224: LIST
75225: LIST
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: PUSH
75231: LD_INT 42
75233: PUSH
75234: LD_INT 43
75236: PUSH
75237: EMPTY
75238: LIST
75239: LIST
75240: PUSH
75241: LD_INT 44
75243: PUSH
75244: LD_INT 46
75246: PUSH
75247: EMPTY
75248: LIST
75249: LIST
75250: PUSH
75251: LD_INT 45
75253: PUSH
75254: LD_INT 47
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: PUSH
75261: EMPTY
75262: LIST
75263: LIST
75264: LIST
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: LIST
75270: ST_TO_ADDR
// result := [ ] ;
75271: LD_ADDR_VAR 0 3
75275: PUSH
75276: EMPTY
75277: ST_TO_ADDR
// for i in turrets do
75278: LD_ADDR_VAR 0 4
75282: PUSH
75283: LD_VAR 0 1
75287: PUSH
75288: FOR_IN
75289: IFFALSE 75472
// begin nat := GetNation ( i ) ;
75291: LD_ADDR_VAR 0 7
75295: PUSH
75296: LD_VAR 0 4
75300: PPUSH
75301: CALL_OW 248
75305: ST_TO_ADDR
// weapon := 0 ;
75306: LD_ADDR_VAR 0 8
75310: PUSH
75311: LD_INT 0
75313: ST_TO_ADDR
// if not nat then
75314: LD_VAR 0 7
75318: NOT
75319: IFFALSE 75323
// continue ;
75321: GO 75288
// for j in list [ nat ] do
75323: LD_ADDR_VAR 0 5
75327: PUSH
75328: LD_VAR 0 10
75332: PUSH
75333: LD_VAR 0 7
75337: ARRAY
75338: PUSH
75339: FOR_IN
75340: IFFALSE 75381
// if GetBWeapon ( i ) = j [ 1 ] then
75342: LD_VAR 0 4
75346: PPUSH
75347: CALL_OW 269
75351: PUSH
75352: LD_VAR 0 5
75356: PUSH
75357: LD_INT 1
75359: ARRAY
75360: EQUAL
75361: IFFALSE 75379
// begin weapon := j [ 2 ] ;
75363: LD_ADDR_VAR 0 8
75367: PUSH
75368: LD_VAR 0 5
75372: PUSH
75373: LD_INT 2
75375: ARRAY
75376: ST_TO_ADDR
// break ;
75377: GO 75381
// end ;
75379: GO 75339
75381: POP
75382: POP
// if not weapon then
75383: LD_VAR 0 8
75387: NOT
75388: IFFALSE 75392
// continue ;
75390: GO 75288
// for k in factories do
75392: LD_ADDR_VAR 0 6
75396: PUSH
75397: LD_VAR 0 2
75401: PUSH
75402: FOR_IN
75403: IFFALSE 75468
// begin weapons := AvailableWeaponList ( k ) ;
75405: LD_ADDR_VAR 0 9
75409: PUSH
75410: LD_VAR 0 6
75414: PPUSH
75415: CALL_OW 478
75419: ST_TO_ADDR
// if not weapons then
75420: LD_VAR 0 9
75424: NOT
75425: IFFALSE 75429
// continue ;
75427: GO 75402
// if weapon in weapons then
75429: LD_VAR 0 8
75433: PUSH
75434: LD_VAR 0 9
75438: IN
75439: IFFALSE 75466
// begin result := [ i , weapon ] ;
75441: LD_ADDR_VAR 0 3
75445: PUSH
75446: LD_VAR 0 4
75450: PUSH
75451: LD_VAR 0 8
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: ST_TO_ADDR
// exit ;
75460: POP
75461: POP
75462: POP
75463: POP
75464: GO 75474
// end ; end ;
75466: GO 75402
75468: POP
75469: POP
// end ;
75470: GO 75288
75472: POP
75473: POP
// end ;
75474: LD_VAR 0 3
75478: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75479: LD_INT 0
75481: PPUSH
// if not side or side > 8 then
75482: LD_VAR 0 3
75486: NOT
75487: PUSH
75488: LD_VAR 0 3
75492: PUSH
75493: LD_INT 8
75495: GREATER
75496: OR
75497: IFFALSE 75501
// exit ;
75499: GO 75560
// if not range then
75501: LD_VAR 0 4
75505: NOT
75506: IFFALSE 75517
// range := - 12 ;
75508: LD_ADDR_VAR 0 4
75512: PUSH
75513: LD_INT 12
75515: NEG
75516: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75517: LD_VAR 0 1
75521: PPUSH
75522: LD_VAR 0 2
75526: PPUSH
75527: LD_VAR 0 3
75531: PPUSH
75532: LD_VAR 0 4
75536: PPUSH
75537: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75541: LD_VAR 0 1
75545: PPUSH
75546: LD_VAR 0 2
75550: PPUSH
75551: LD_VAR 0 3
75555: PPUSH
75556: CALL_OW 331
// end ;
75560: LD_VAR 0 5
75564: RET
// export function Video ( mode ) ; begin
75565: LD_INT 0
75567: PPUSH
// ingame_video = mode ;
75568: LD_ADDR_OWVAR 52
75572: PUSH
75573: LD_VAR 0 1
75577: ST_TO_ADDR
// interface_hidden = mode ;
75578: LD_ADDR_OWVAR 54
75582: PUSH
75583: LD_VAR 0 1
75587: ST_TO_ADDR
// end ;
75588: LD_VAR 0 2
75592: RET
// export function Join ( array , element ) ; begin
75593: LD_INT 0
75595: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75596: LD_ADDR_VAR 0 3
75600: PUSH
75601: LD_VAR 0 1
75605: PPUSH
75606: LD_VAR 0 1
75610: PUSH
75611: LD_INT 1
75613: PLUS
75614: PPUSH
75615: LD_VAR 0 2
75619: PPUSH
75620: CALL_OW 1
75624: ST_TO_ADDR
// end ;
75625: LD_VAR 0 3
75629: RET
// export function JoinUnion ( array , element ) ; begin
75630: LD_INT 0
75632: PPUSH
// result := array union element ;
75633: LD_ADDR_VAR 0 3
75637: PUSH
75638: LD_VAR 0 1
75642: PUSH
75643: LD_VAR 0 2
75647: UNION
75648: ST_TO_ADDR
// end ;
75649: LD_VAR 0 3
75653: RET
// export function GetBehemoths ( side ) ; begin
75654: LD_INT 0
75656: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
75657: LD_ADDR_VAR 0 2
75661: PUSH
75662: LD_INT 22
75664: PUSH
75665: LD_VAR 0 1
75669: PUSH
75670: EMPTY
75671: LIST
75672: LIST
75673: PUSH
75674: LD_INT 31
75676: PUSH
75677: LD_INT 25
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: PPUSH
75688: CALL_OW 69
75692: ST_TO_ADDR
// end ;
75693: LD_VAR 0 2
75697: RET
// export function Shuffle ( array ) ; var i , index ; begin
75698: LD_INT 0
75700: PPUSH
75701: PPUSH
75702: PPUSH
// result := [ ] ;
75703: LD_ADDR_VAR 0 2
75707: PUSH
75708: EMPTY
75709: ST_TO_ADDR
// if not array then
75710: LD_VAR 0 1
75714: NOT
75715: IFFALSE 75719
// exit ;
75717: GO 75818
// Randomize ;
75719: CALL_OW 10
// for i = array downto 1 do
75723: LD_ADDR_VAR 0 3
75727: PUSH
75728: DOUBLE
75729: LD_VAR 0 1
75733: INC
75734: ST_TO_ADDR
75735: LD_INT 1
75737: PUSH
75738: FOR_DOWNTO
75739: IFFALSE 75816
// begin index := rand ( 1 , array ) ;
75741: LD_ADDR_VAR 0 4
75745: PUSH
75746: LD_INT 1
75748: PPUSH
75749: LD_VAR 0 1
75753: PPUSH
75754: CALL_OW 12
75758: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75759: LD_ADDR_VAR 0 2
75763: PUSH
75764: LD_VAR 0 2
75768: PPUSH
75769: LD_VAR 0 2
75773: PUSH
75774: LD_INT 1
75776: PLUS
75777: PPUSH
75778: LD_VAR 0 1
75782: PUSH
75783: LD_VAR 0 4
75787: ARRAY
75788: PPUSH
75789: CALL_OW 2
75793: ST_TO_ADDR
// array := Delete ( array , index ) ;
75794: LD_ADDR_VAR 0 1
75798: PUSH
75799: LD_VAR 0 1
75803: PPUSH
75804: LD_VAR 0 4
75808: PPUSH
75809: CALL_OW 3
75813: ST_TO_ADDR
// end ;
75814: GO 75738
75816: POP
75817: POP
// end ;
75818: LD_VAR 0 2
75822: RET
// export function GetBaseMaterials ( base ) ; begin
75823: LD_INT 0
75825: PPUSH
// result := [ 0 , 0 , 0 ] ;
75826: LD_ADDR_VAR 0 2
75830: PUSH
75831: LD_INT 0
75833: PUSH
75834: LD_INT 0
75836: PUSH
75837: LD_INT 0
75839: PUSH
75840: EMPTY
75841: LIST
75842: LIST
75843: LIST
75844: ST_TO_ADDR
// if not base then
75845: LD_VAR 0 1
75849: NOT
75850: IFFALSE 75854
// exit ;
75852: GO 75903
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75854: LD_ADDR_VAR 0 2
75858: PUSH
75859: LD_VAR 0 1
75863: PPUSH
75864: LD_INT 1
75866: PPUSH
75867: CALL_OW 275
75871: PUSH
75872: LD_VAR 0 1
75876: PPUSH
75877: LD_INT 2
75879: PPUSH
75880: CALL_OW 275
75884: PUSH
75885: LD_VAR 0 1
75889: PPUSH
75890: LD_INT 3
75892: PPUSH
75893: CALL_OW 275
75897: PUSH
75898: EMPTY
75899: LIST
75900: LIST
75901: LIST
75902: ST_TO_ADDR
// end ;
75903: LD_VAR 0 2
75907: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75908: LD_INT 0
75910: PPUSH
75911: PPUSH
// result := array ;
75912: LD_ADDR_VAR 0 3
75916: PUSH
75917: LD_VAR 0 1
75921: ST_TO_ADDR
// if size > 0 then
75922: LD_VAR 0 2
75926: PUSH
75927: LD_INT 0
75929: GREATER
75930: IFFALSE 75976
// for i := array downto size do
75932: LD_ADDR_VAR 0 4
75936: PUSH
75937: DOUBLE
75938: LD_VAR 0 1
75942: INC
75943: ST_TO_ADDR
75944: LD_VAR 0 2
75948: PUSH
75949: FOR_DOWNTO
75950: IFFALSE 75974
// result := Delete ( result , result ) ;
75952: LD_ADDR_VAR 0 3
75956: PUSH
75957: LD_VAR 0 3
75961: PPUSH
75962: LD_VAR 0 3
75966: PPUSH
75967: CALL_OW 3
75971: ST_TO_ADDR
75972: GO 75949
75974: POP
75975: POP
// end ;
75976: LD_VAR 0 3
75980: RET
// export function ComExit ( unit ) ; var tmp ; begin
75981: LD_INT 0
75983: PPUSH
75984: PPUSH
// if not IsInUnit ( unit ) then
75985: LD_VAR 0 1
75989: PPUSH
75990: CALL_OW 310
75994: NOT
75995: IFFALSE 75999
// exit ;
75997: GO 76059
// tmp := IsInUnit ( unit ) ;
75999: LD_ADDR_VAR 0 3
76003: PUSH
76004: LD_VAR 0 1
76008: PPUSH
76009: CALL_OW 310
76013: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76014: LD_VAR 0 3
76018: PPUSH
76019: CALL_OW 247
76023: PUSH
76024: LD_INT 2
76026: EQUAL
76027: IFFALSE 76040
// ComExitVehicle ( unit ) else
76029: LD_VAR 0 1
76033: PPUSH
76034: CALL_OW 121
76038: GO 76049
// ComExitBuilding ( unit ) ;
76040: LD_VAR 0 1
76044: PPUSH
76045: CALL_OW 122
// result := tmp ;
76049: LD_ADDR_VAR 0 2
76053: PUSH
76054: LD_VAR 0 3
76058: ST_TO_ADDR
// end ;
76059: LD_VAR 0 2
76063: RET
// export function ComExitAll ( units ) ; var i ; begin
76064: LD_INT 0
76066: PPUSH
76067: PPUSH
// if not units then
76068: LD_VAR 0 1
76072: NOT
76073: IFFALSE 76077
// exit ;
76075: GO 76103
// for i in units do
76077: LD_ADDR_VAR 0 3
76081: PUSH
76082: LD_VAR 0 1
76086: PUSH
76087: FOR_IN
76088: IFFALSE 76101
// ComExit ( i ) ;
76090: LD_VAR 0 3
76094: PPUSH
76095: CALL 75981 0 1
76099: GO 76087
76101: POP
76102: POP
// end ;
76103: LD_VAR 0 2
76107: RET
// export function ResetHc ; begin
76108: LD_INT 0
76110: PPUSH
// InitHc ;
76111: CALL_OW 19
// hc_importance := 0 ;
76115: LD_ADDR_OWVAR 32
76119: PUSH
76120: LD_INT 0
76122: ST_TO_ADDR
// end ;
76123: LD_VAR 0 1
76127: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76128: LD_INT 0
76130: PPUSH
76131: PPUSH
76132: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76133: LD_ADDR_VAR 0 6
76137: PUSH
76138: LD_VAR 0 1
76142: PUSH
76143: LD_VAR 0 3
76147: PLUS
76148: PUSH
76149: LD_INT 2
76151: DIV
76152: ST_TO_ADDR
// if _x < 0 then
76153: LD_VAR 0 6
76157: PUSH
76158: LD_INT 0
76160: LESS
76161: IFFALSE 76178
// _x := _x * - 1 ;
76163: LD_ADDR_VAR 0 6
76167: PUSH
76168: LD_VAR 0 6
76172: PUSH
76173: LD_INT 1
76175: NEG
76176: MUL
76177: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76178: LD_ADDR_VAR 0 7
76182: PUSH
76183: LD_VAR 0 2
76187: PUSH
76188: LD_VAR 0 4
76192: PLUS
76193: PUSH
76194: LD_INT 2
76196: DIV
76197: ST_TO_ADDR
// if _y < 0 then
76198: LD_VAR 0 7
76202: PUSH
76203: LD_INT 0
76205: LESS
76206: IFFALSE 76223
// _y := _y * - 1 ;
76208: LD_ADDR_VAR 0 7
76212: PUSH
76213: LD_VAR 0 7
76217: PUSH
76218: LD_INT 1
76220: NEG
76221: MUL
76222: ST_TO_ADDR
// result := [ _x , _y ] ;
76223: LD_ADDR_VAR 0 5
76227: PUSH
76228: LD_VAR 0 6
76232: PUSH
76233: LD_VAR 0 7
76237: PUSH
76238: EMPTY
76239: LIST
76240: LIST
76241: ST_TO_ADDR
// end ;
76242: LD_VAR 0 5
76246: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76247: LD_INT 0
76249: PPUSH
76250: PPUSH
76251: PPUSH
76252: PPUSH
// task := GetTaskList ( unit ) ;
76253: LD_ADDR_VAR 0 7
76257: PUSH
76258: LD_VAR 0 1
76262: PPUSH
76263: CALL_OW 437
76267: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76268: LD_VAR 0 7
76272: NOT
76273: PUSH
76274: LD_VAR 0 1
76278: PPUSH
76279: LD_VAR 0 2
76283: PPUSH
76284: CALL_OW 308
76288: NOT
76289: AND
76290: IFFALSE 76294
// exit ;
76292: GO 76412
// if IsInArea ( unit , area ) then
76294: LD_VAR 0 1
76298: PPUSH
76299: LD_VAR 0 2
76303: PPUSH
76304: CALL_OW 308
76308: IFFALSE 76326
// begin ComMoveToArea ( unit , goAway ) ;
76310: LD_VAR 0 1
76314: PPUSH
76315: LD_VAR 0 3
76319: PPUSH
76320: CALL_OW 113
// exit ;
76324: GO 76412
// end ; if task [ 1 ] [ 1 ] <> M then
76326: LD_VAR 0 7
76330: PUSH
76331: LD_INT 1
76333: ARRAY
76334: PUSH
76335: LD_INT 1
76337: ARRAY
76338: PUSH
76339: LD_STRING M
76341: NONEQUAL
76342: IFFALSE 76346
// exit ;
76344: GO 76412
// x := task [ 1 ] [ 2 ] ;
76346: LD_ADDR_VAR 0 5
76350: PUSH
76351: LD_VAR 0 7
76355: PUSH
76356: LD_INT 1
76358: ARRAY
76359: PUSH
76360: LD_INT 2
76362: ARRAY
76363: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76364: LD_ADDR_VAR 0 6
76368: PUSH
76369: LD_VAR 0 7
76373: PUSH
76374: LD_INT 1
76376: ARRAY
76377: PUSH
76378: LD_INT 3
76380: ARRAY
76381: ST_TO_ADDR
// if InArea ( x , y , area ) then
76382: LD_VAR 0 5
76386: PPUSH
76387: LD_VAR 0 6
76391: PPUSH
76392: LD_VAR 0 2
76396: PPUSH
76397: CALL_OW 309
76401: IFFALSE 76412
// ComStop ( unit ) ;
76403: LD_VAR 0 1
76407: PPUSH
76408: CALL_OW 141
// end ;
76412: LD_VAR 0 4
76416: RET
// export function Abs ( value ) ; begin
76417: LD_INT 0
76419: PPUSH
// result := value ;
76420: LD_ADDR_VAR 0 2
76424: PUSH
76425: LD_VAR 0 1
76429: ST_TO_ADDR
// if value < 0 then
76430: LD_VAR 0 1
76434: PUSH
76435: LD_INT 0
76437: LESS
76438: IFFALSE 76455
// result := value * - 1 ;
76440: LD_ADDR_VAR 0 2
76444: PUSH
76445: LD_VAR 0 1
76449: PUSH
76450: LD_INT 1
76452: NEG
76453: MUL
76454: ST_TO_ADDR
// end ;
76455: LD_VAR 0 2
76459: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76460: LD_INT 0
76462: PPUSH
76463: PPUSH
76464: PPUSH
76465: PPUSH
76466: PPUSH
76467: PPUSH
76468: PPUSH
76469: PPUSH
// if not unit or not building then
76470: LD_VAR 0 1
76474: NOT
76475: PUSH
76476: LD_VAR 0 2
76480: NOT
76481: OR
76482: IFFALSE 76486
// exit ;
76484: GO 76712
// x := GetX ( building ) ;
76486: LD_ADDR_VAR 0 4
76490: PUSH
76491: LD_VAR 0 2
76495: PPUSH
76496: CALL_OW 250
76500: ST_TO_ADDR
// y := GetY ( building ) ;
76501: LD_ADDR_VAR 0 6
76505: PUSH
76506: LD_VAR 0 2
76510: PPUSH
76511: CALL_OW 251
76515: ST_TO_ADDR
// d := GetDir ( building ) ;
76516: LD_ADDR_VAR 0 8
76520: PUSH
76521: LD_VAR 0 2
76525: PPUSH
76526: CALL_OW 254
76530: ST_TO_ADDR
// r := 4 ;
76531: LD_ADDR_VAR 0 9
76535: PUSH
76536: LD_INT 4
76538: ST_TO_ADDR
// for i := 1 to 5 do
76539: LD_ADDR_VAR 0 10
76543: PUSH
76544: DOUBLE
76545: LD_INT 1
76547: DEC
76548: ST_TO_ADDR
76549: LD_INT 5
76551: PUSH
76552: FOR_TO
76553: IFFALSE 76710
// begin _x := ShiftX ( x , d , r + i ) ;
76555: LD_ADDR_VAR 0 5
76559: PUSH
76560: LD_VAR 0 4
76564: PPUSH
76565: LD_VAR 0 8
76569: PPUSH
76570: LD_VAR 0 9
76574: PUSH
76575: LD_VAR 0 10
76579: PLUS
76580: PPUSH
76581: CALL_OW 272
76585: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76586: LD_ADDR_VAR 0 7
76590: PUSH
76591: LD_VAR 0 6
76595: PPUSH
76596: LD_VAR 0 8
76600: PPUSH
76601: LD_VAR 0 9
76605: PUSH
76606: LD_VAR 0 10
76610: PLUS
76611: PPUSH
76612: CALL_OW 273
76616: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76617: LD_VAR 0 5
76621: PPUSH
76622: LD_VAR 0 7
76626: PPUSH
76627: CALL_OW 488
76631: PUSH
76632: LD_VAR 0 5
76636: PPUSH
76637: LD_VAR 0 7
76641: PPUSH
76642: CALL_OW 428
76646: PPUSH
76647: CALL_OW 247
76651: PUSH
76652: LD_INT 3
76654: PUSH
76655: LD_INT 2
76657: PUSH
76658: EMPTY
76659: LIST
76660: LIST
76661: IN
76662: NOT
76663: AND
76664: IFFALSE 76708
// begin ComMoveXY ( unit , _x , _y ) ;
76666: LD_VAR 0 1
76670: PPUSH
76671: LD_VAR 0 5
76675: PPUSH
76676: LD_VAR 0 7
76680: PPUSH
76681: CALL_OW 111
// result := [ _x , _y ] ;
76685: LD_ADDR_VAR 0 3
76689: PUSH
76690: LD_VAR 0 5
76694: PUSH
76695: LD_VAR 0 7
76699: PUSH
76700: EMPTY
76701: LIST
76702: LIST
76703: ST_TO_ADDR
// exit ;
76704: POP
76705: POP
76706: GO 76712
// end ; end ;
76708: GO 76552
76710: POP
76711: POP
// end ;
76712: LD_VAR 0 3
76716: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76717: LD_INT 0
76719: PPUSH
76720: PPUSH
76721: PPUSH
// result := 0 ;
76722: LD_ADDR_VAR 0 3
76726: PUSH
76727: LD_INT 0
76729: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76730: LD_VAR 0 1
76734: PUSH
76735: LD_INT 0
76737: LESS
76738: PUSH
76739: LD_VAR 0 1
76743: PUSH
76744: LD_INT 8
76746: GREATER
76747: OR
76748: PUSH
76749: LD_VAR 0 2
76753: PUSH
76754: LD_INT 0
76756: LESS
76757: OR
76758: PUSH
76759: LD_VAR 0 2
76763: PUSH
76764: LD_INT 8
76766: GREATER
76767: OR
76768: IFFALSE 76772
// exit ;
76770: GO 76847
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76772: LD_ADDR_VAR 0 4
76776: PUSH
76777: LD_INT 22
76779: PUSH
76780: LD_VAR 0 2
76784: PUSH
76785: EMPTY
76786: LIST
76787: LIST
76788: PPUSH
76789: CALL_OW 69
76793: PUSH
76794: FOR_IN
76795: IFFALSE 76845
// begin un := UnitShoot ( i ) ;
76797: LD_ADDR_VAR 0 5
76801: PUSH
76802: LD_VAR 0 4
76806: PPUSH
76807: CALL_OW 504
76811: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76812: LD_VAR 0 5
76816: PPUSH
76817: CALL_OW 255
76821: PUSH
76822: LD_VAR 0 1
76826: EQUAL
76827: IFFALSE 76843
// begin result := un ;
76829: LD_ADDR_VAR 0 3
76833: PUSH
76834: LD_VAR 0 5
76838: ST_TO_ADDR
// exit ;
76839: POP
76840: POP
76841: GO 76847
// end ; end ;
76843: GO 76794
76845: POP
76846: POP
// end ;
76847: LD_VAR 0 3
76851: RET
// export function GetCargoBay ( units ) ; begin
76852: LD_INT 0
76854: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76855: LD_ADDR_VAR 0 2
76859: PUSH
76860: LD_VAR 0 1
76864: PPUSH
76865: LD_INT 2
76867: PUSH
76868: LD_INT 34
76870: PUSH
76871: LD_INT 12
76873: PUSH
76874: EMPTY
76875: LIST
76876: LIST
76877: PUSH
76878: LD_INT 34
76880: PUSH
76881: LD_INT 51
76883: PUSH
76884: EMPTY
76885: LIST
76886: LIST
76887: PUSH
76888: LD_INT 34
76890: PUSH
76891: LD_INT 32
76893: PUSH
76894: EMPTY
76895: LIST
76896: LIST
76897: PUSH
76898: LD_INT 34
76900: PUSH
76901: LD_EXP 51
76905: PUSH
76906: EMPTY
76907: LIST
76908: LIST
76909: PUSH
76910: EMPTY
76911: LIST
76912: LIST
76913: LIST
76914: LIST
76915: LIST
76916: PPUSH
76917: CALL_OW 72
76921: ST_TO_ADDR
// end ;
76922: LD_VAR 0 2
76926: RET
// export function Negate ( value ) ; begin
76927: LD_INT 0
76929: PPUSH
// result := not value ;
76930: LD_ADDR_VAR 0 2
76934: PUSH
76935: LD_VAR 0 1
76939: NOT
76940: ST_TO_ADDR
// end ;
76941: LD_VAR 0 2
76945: RET
// export function Inc ( value ) ; begin
76946: LD_INT 0
76948: PPUSH
// result := value + 1 ;
76949: LD_ADDR_VAR 0 2
76953: PUSH
76954: LD_VAR 0 1
76958: PUSH
76959: LD_INT 1
76961: PLUS
76962: ST_TO_ADDR
// end ;
76963: LD_VAR 0 2
76967: RET
// export function Dec ( value ) ; begin
76968: LD_INT 0
76970: PPUSH
// result := value - 1 ;
76971: LD_ADDR_VAR 0 2
76975: PUSH
76976: LD_VAR 0 1
76980: PUSH
76981: LD_INT 1
76983: MINUS
76984: ST_TO_ADDR
// end ;
76985: LD_VAR 0 2
76989: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76990: LD_INT 0
76992: PPUSH
76993: PPUSH
76994: PPUSH
76995: PPUSH
76996: PPUSH
76997: PPUSH
76998: PPUSH
76999: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77000: LD_VAR 0 1
77004: PPUSH
77005: LD_VAR 0 2
77009: PPUSH
77010: CALL_OW 488
77014: NOT
77015: PUSH
77016: LD_VAR 0 3
77020: PPUSH
77021: LD_VAR 0 4
77025: PPUSH
77026: CALL_OW 488
77030: NOT
77031: OR
77032: IFFALSE 77045
// begin result := - 1 ;
77034: LD_ADDR_VAR 0 5
77038: PUSH
77039: LD_INT 1
77041: NEG
77042: ST_TO_ADDR
// exit ;
77043: GO 77280
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77045: LD_ADDR_VAR 0 12
77049: PUSH
77050: LD_VAR 0 1
77054: PPUSH
77055: LD_VAR 0 2
77059: PPUSH
77060: LD_VAR 0 3
77064: PPUSH
77065: LD_VAR 0 4
77069: PPUSH
77070: CALL 76128 0 4
77074: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77075: LD_ADDR_VAR 0 11
77079: PUSH
77080: LD_VAR 0 1
77084: PPUSH
77085: LD_VAR 0 2
77089: PPUSH
77090: LD_VAR 0 12
77094: PUSH
77095: LD_INT 1
77097: ARRAY
77098: PPUSH
77099: LD_VAR 0 12
77103: PUSH
77104: LD_INT 2
77106: ARRAY
77107: PPUSH
77108: CALL_OW 298
77112: ST_TO_ADDR
// distance := 9999 ;
77113: LD_ADDR_VAR 0 10
77117: PUSH
77118: LD_INT 9999
77120: ST_TO_ADDR
// for i := 0 to 5 do
77121: LD_ADDR_VAR 0 6
77125: PUSH
77126: DOUBLE
77127: LD_INT 0
77129: DEC
77130: ST_TO_ADDR
77131: LD_INT 5
77133: PUSH
77134: FOR_TO
77135: IFFALSE 77278
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77137: LD_ADDR_VAR 0 7
77141: PUSH
77142: LD_VAR 0 1
77146: PPUSH
77147: LD_VAR 0 6
77151: PPUSH
77152: LD_VAR 0 11
77156: PPUSH
77157: CALL_OW 272
77161: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77162: LD_ADDR_VAR 0 8
77166: PUSH
77167: LD_VAR 0 2
77171: PPUSH
77172: LD_VAR 0 6
77176: PPUSH
77177: LD_VAR 0 11
77181: PPUSH
77182: CALL_OW 273
77186: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77187: LD_VAR 0 7
77191: PPUSH
77192: LD_VAR 0 8
77196: PPUSH
77197: CALL_OW 488
77201: NOT
77202: IFFALSE 77206
// continue ;
77204: GO 77134
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77206: LD_ADDR_VAR 0 9
77210: PUSH
77211: LD_VAR 0 12
77215: PUSH
77216: LD_INT 1
77218: ARRAY
77219: PPUSH
77220: LD_VAR 0 12
77224: PUSH
77225: LD_INT 2
77227: ARRAY
77228: PPUSH
77229: LD_VAR 0 7
77233: PPUSH
77234: LD_VAR 0 8
77238: PPUSH
77239: CALL_OW 298
77243: ST_TO_ADDR
// if tmp < distance then
77244: LD_VAR 0 9
77248: PUSH
77249: LD_VAR 0 10
77253: LESS
77254: IFFALSE 77276
// begin result := i ;
77256: LD_ADDR_VAR 0 5
77260: PUSH
77261: LD_VAR 0 6
77265: ST_TO_ADDR
// distance := tmp ;
77266: LD_ADDR_VAR 0 10
77270: PUSH
77271: LD_VAR 0 9
77275: ST_TO_ADDR
// end ; end ;
77276: GO 77134
77278: POP
77279: POP
// end ;
77280: LD_VAR 0 5
77284: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77285: LD_INT 0
77287: PPUSH
77288: PPUSH
// if not driver or not IsInUnit ( driver ) then
77289: LD_VAR 0 1
77293: NOT
77294: PUSH
77295: LD_VAR 0 1
77299: PPUSH
77300: CALL_OW 310
77304: NOT
77305: OR
77306: IFFALSE 77310
// exit ;
77308: GO 77400
// vehicle := IsInUnit ( driver ) ;
77310: LD_ADDR_VAR 0 3
77314: PUSH
77315: LD_VAR 0 1
77319: PPUSH
77320: CALL_OW 310
77324: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77325: LD_VAR 0 1
77329: PPUSH
77330: LD_STRING \
77332: PUSH
77333: LD_INT 0
77335: PUSH
77336: LD_INT 0
77338: PUSH
77339: LD_INT 0
77341: PUSH
77342: LD_INT 0
77344: PUSH
77345: LD_INT 0
77347: PUSH
77348: LD_INT 0
77350: PUSH
77351: EMPTY
77352: LIST
77353: LIST
77354: LIST
77355: LIST
77356: LIST
77357: LIST
77358: LIST
77359: PUSH
77360: LD_STRING E
77362: PUSH
77363: LD_INT 0
77365: PUSH
77366: LD_INT 0
77368: PUSH
77369: LD_VAR 0 3
77373: PUSH
77374: LD_INT 0
77376: PUSH
77377: LD_INT 0
77379: PUSH
77380: LD_INT 0
77382: PUSH
77383: EMPTY
77384: LIST
77385: LIST
77386: LIST
77387: LIST
77388: LIST
77389: LIST
77390: LIST
77391: PUSH
77392: EMPTY
77393: LIST
77394: LIST
77395: PPUSH
77396: CALL_OW 446
// end ;
77400: LD_VAR 0 2
77404: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77405: LD_INT 0
77407: PPUSH
77408: PPUSH
// if not driver or not IsInUnit ( driver ) then
77409: LD_VAR 0 1
77413: NOT
77414: PUSH
77415: LD_VAR 0 1
77419: PPUSH
77420: CALL_OW 310
77424: NOT
77425: OR
77426: IFFALSE 77430
// exit ;
77428: GO 77520
// vehicle := IsInUnit ( driver ) ;
77430: LD_ADDR_VAR 0 3
77434: PUSH
77435: LD_VAR 0 1
77439: PPUSH
77440: CALL_OW 310
77444: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77445: LD_VAR 0 1
77449: PPUSH
77450: LD_STRING \
77452: PUSH
77453: LD_INT 0
77455: PUSH
77456: LD_INT 0
77458: PUSH
77459: LD_INT 0
77461: PUSH
77462: LD_INT 0
77464: PUSH
77465: LD_INT 0
77467: PUSH
77468: LD_INT 0
77470: PUSH
77471: EMPTY
77472: LIST
77473: LIST
77474: LIST
77475: LIST
77476: LIST
77477: LIST
77478: LIST
77479: PUSH
77480: LD_STRING E
77482: PUSH
77483: LD_INT 0
77485: PUSH
77486: LD_INT 0
77488: PUSH
77489: LD_VAR 0 3
77493: PUSH
77494: LD_INT 0
77496: PUSH
77497: LD_INT 0
77499: PUSH
77500: LD_INT 0
77502: PUSH
77503: EMPTY
77504: LIST
77505: LIST
77506: LIST
77507: LIST
77508: LIST
77509: LIST
77510: LIST
77511: PUSH
77512: EMPTY
77513: LIST
77514: LIST
77515: PPUSH
77516: CALL_OW 447
// end ;
77520: LD_VAR 0 2
77524: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77525: LD_INT 0
77527: PPUSH
77528: PPUSH
77529: PPUSH
// tmp := [ ] ;
77530: LD_ADDR_VAR 0 5
77534: PUSH
77535: EMPTY
77536: ST_TO_ADDR
// for i in units do
77537: LD_ADDR_VAR 0 4
77541: PUSH
77542: LD_VAR 0 1
77546: PUSH
77547: FOR_IN
77548: IFFALSE 77586
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77550: LD_ADDR_VAR 0 5
77554: PUSH
77555: LD_VAR 0 5
77559: PPUSH
77560: LD_VAR 0 5
77564: PUSH
77565: LD_INT 1
77567: PLUS
77568: PPUSH
77569: LD_VAR 0 4
77573: PPUSH
77574: CALL_OW 256
77578: PPUSH
77579: CALL_OW 2
77583: ST_TO_ADDR
77584: GO 77547
77586: POP
77587: POP
// if not tmp then
77588: LD_VAR 0 5
77592: NOT
77593: IFFALSE 77597
// exit ;
77595: GO 77645
// if asc then
77597: LD_VAR 0 2
77601: IFFALSE 77625
// result := SortListByListAsc ( units , tmp ) else
77603: LD_ADDR_VAR 0 3
77607: PUSH
77608: LD_VAR 0 1
77612: PPUSH
77613: LD_VAR 0 5
77617: PPUSH
77618: CALL_OW 76
77622: ST_TO_ADDR
77623: GO 77645
// result := SortListByListDesc ( units , tmp ) ;
77625: LD_ADDR_VAR 0 3
77629: PUSH
77630: LD_VAR 0 1
77634: PPUSH
77635: LD_VAR 0 5
77639: PPUSH
77640: CALL_OW 77
77644: ST_TO_ADDR
// end ;
77645: LD_VAR 0 3
77649: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77650: LD_INT 0
77652: PPUSH
77653: PPUSH
// task := GetTaskList ( mech ) ;
77654: LD_ADDR_VAR 0 4
77658: PUSH
77659: LD_VAR 0 1
77663: PPUSH
77664: CALL_OW 437
77668: ST_TO_ADDR
// if not task then
77669: LD_VAR 0 4
77673: NOT
77674: IFFALSE 77678
// exit ;
77676: GO 77720
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77678: LD_ADDR_VAR 0 3
77682: PUSH
77683: LD_VAR 0 4
77687: PUSH
77688: LD_INT 1
77690: ARRAY
77691: PUSH
77692: LD_INT 1
77694: ARRAY
77695: PUSH
77696: LD_STRING r
77698: EQUAL
77699: PUSH
77700: LD_VAR 0 4
77704: PUSH
77705: LD_INT 1
77707: ARRAY
77708: PUSH
77709: LD_INT 4
77711: ARRAY
77712: PUSH
77713: LD_VAR 0 2
77717: EQUAL
77718: AND
77719: ST_TO_ADDR
// end ;
77720: LD_VAR 0 3
77724: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77725: LD_INT 0
77727: PPUSH
// SetDir ( unit , d ) ;
77728: LD_VAR 0 1
77732: PPUSH
77733: LD_VAR 0 4
77737: PPUSH
77738: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77742: LD_VAR 0 1
77746: PPUSH
77747: LD_VAR 0 2
77751: PPUSH
77752: LD_VAR 0 3
77756: PPUSH
77757: LD_VAR 0 5
77761: PPUSH
77762: CALL_OW 48
// end ;
77766: LD_VAR 0 6
77770: RET
// export function ToNaturalNumber ( number ) ; begin
77771: LD_INT 0
77773: PPUSH
// result := number div 1 ;
77774: LD_ADDR_VAR 0 2
77778: PUSH
77779: LD_VAR 0 1
77783: PUSH
77784: LD_INT 1
77786: DIV
77787: ST_TO_ADDR
// if number < 0 then
77788: LD_VAR 0 1
77792: PUSH
77793: LD_INT 0
77795: LESS
77796: IFFALSE 77806
// result := 0 ;
77798: LD_ADDR_VAR 0 2
77802: PUSH
77803: LD_INT 0
77805: ST_TO_ADDR
// end ;
77806: LD_VAR 0 2
77810: RET
// export function SortByClass ( units , class ) ; var un ; begin
77811: LD_INT 0
77813: PPUSH
77814: PPUSH
// if not units or not class then
77815: LD_VAR 0 1
77819: NOT
77820: PUSH
77821: LD_VAR 0 2
77825: NOT
77826: OR
77827: IFFALSE 77831
// exit ;
77829: GO 77926
// result := [ ] ;
77831: LD_ADDR_VAR 0 3
77835: PUSH
77836: EMPTY
77837: ST_TO_ADDR
// for un in units do
77838: LD_ADDR_VAR 0 4
77842: PUSH
77843: LD_VAR 0 1
77847: PUSH
77848: FOR_IN
77849: IFFALSE 77924
// if GetClass ( un ) = class then
77851: LD_VAR 0 4
77855: PPUSH
77856: CALL_OW 257
77860: PUSH
77861: LD_VAR 0 2
77865: EQUAL
77866: IFFALSE 77893
// result := Insert ( result , 1 , un ) else
77868: LD_ADDR_VAR 0 3
77872: PUSH
77873: LD_VAR 0 3
77877: PPUSH
77878: LD_INT 1
77880: PPUSH
77881: LD_VAR 0 4
77885: PPUSH
77886: CALL_OW 2
77890: ST_TO_ADDR
77891: GO 77922
// result := Replace ( result , result + 1 , un ) ;
77893: LD_ADDR_VAR 0 3
77897: PUSH
77898: LD_VAR 0 3
77902: PPUSH
77903: LD_VAR 0 3
77907: PUSH
77908: LD_INT 1
77910: PLUS
77911: PPUSH
77912: LD_VAR 0 4
77916: PPUSH
77917: CALL_OW 1
77921: ST_TO_ADDR
77922: GO 77848
77924: POP
77925: POP
// end ;
77926: LD_VAR 0 3
77930: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77931: LD_INT 0
77933: PPUSH
77934: PPUSH
77935: PPUSH
77936: PPUSH
77937: PPUSH
77938: PPUSH
77939: PPUSH
// result := [ ] ;
77940: LD_ADDR_VAR 0 4
77944: PUSH
77945: EMPTY
77946: ST_TO_ADDR
// if x - r < 0 then
77947: LD_VAR 0 1
77951: PUSH
77952: LD_VAR 0 3
77956: MINUS
77957: PUSH
77958: LD_INT 0
77960: LESS
77961: IFFALSE 77973
// min_x := 0 else
77963: LD_ADDR_VAR 0 8
77967: PUSH
77968: LD_INT 0
77970: ST_TO_ADDR
77971: GO 77989
// min_x := x - r ;
77973: LD_ADDR_VAR 0 8
77977: PUSH
77978: LD_VAR 0 1
77982: PUSH
77983: LD_VAR 0 3
77987: MINUS
77988: ST_TO_ADDR
// if y - r < 0 then
77989: LD_VAR 0 2
77993: PUSH
77994: LD_VAR 0 3
77998: MINUS
77999: PUSH
78000: LD_INT 0
78002: LESS
78003: IFFALSE 78015
// min_y := 0 else
78005: LD_ADDR_VAR 0 7
78009: PUSH
78010: LD_INT 0
78012: ST_TO_ADDR
78013: GO 78031
// min_y := y - r ;
78015: LD_ADDR_VAR 0 7
78019: PUSH
78020: LD_VAR 0 2
78024: PUSH
78025: LD_VAR 0 3
78029: MINUS
78030: ST_TO_ADDR
// max_x := x + r ;
78031: LD_ADDR_VAR 0 9
78035: PUSH
78036: LD_VAR 0 1
78040: PUSH
78041: LD_VAR 0 3
78045: PLUS
78046: ST_TO_ADDR
// max_y := y + r ;
78047: LD_ADDR_VAR 0 10
78051: PUSH
78052: LD_VAR 0 2
78056: PUSH
78057: LD_VAR 0 3
78061: PLUS
78062: ST_TO_ADDR
// for _x = min_x to max_x do
78063: LD_ADDR_VAR 0 5
78067: PUSH
78068: DOUBLE
78069: LD_VAR 0 8
78073: DEC
78074: ST_TO_ADDR
78075: LD_VAR 0 9
78079: PUSH
78080: FOR_TO
78081: IFFALSE 78182
// for _y = min_y to max_y do
78083: LD_ADDR_VAR 0 6
78087: PUSH
78088: DOUBLE
78089: LD_VAR 0 7
78093: DEC
78094: ST_TO_ADDR
78095: LD_VAR 0 10
78099: PUSH
78100: FOR_TO
78101: IFFALSE 78178
// begin if not ValidHex ( _x , _y ) then
78103: LD_VAR 0 5
78107: PPUSH
78108: LD_VAR 0 6
78112: PPUSH
78113: CALL_OW 488
78117: NOT
78118: IFFALSE 78122
// continue ;
78120: GO 78100
// if GetResourceTypeXY ( _x , _y ) then
78122: LD_VAR 0 5
78126: PPUSH
78127: LD_VAR 0 6
78131: PPUSH
78132: CALL_OW 283
78136: IFFALSE 78176
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78138: LD_ADDR_VAR 0 4
78142: PUSH
78143: LD_VAR 0 4
78147: PPUSH
78148: LD_VAR 0 4
78152: PUSH
78153: LD_INT 1
78155: PLUS
78156: PPUSH
78157: LD_VAR 0 5
78161: PUSH
78162: LD_VAR 0 6
78166: PUSH
78167: EMPTY
78168: LIST
78169: LIST
78170: PPUSH
78171: CALL_OW 1
78175: ST_TO_ADDR
// end ;
78176: GO 78100
78178: POP
78179: POP
78180: GO 78080
78182: POP
78183: POP
// end ;
78184: LD_VAR 0 4
78188: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78189: LD_INT 0
78191: PPUSH
78192: PPUSH
78193: PPUSH
78194: PPUSH
78195: PPUSH
78196: PPUSH
78197: PPUSH
78198: PPUSH
// if not units then
78199: LD_VAR 0 1
78203: NOT
78204: IFFALSE 78208
// exit ;
78206: GO 78633
// result := UnitFilter ( units , [ f_ok ] ) ;
78208: LD_ADDR_VAR 0 3
78212: PUSH
78213: LD_VAR 0 1
78217: PPUSH
78218: LD_INT 50
78220: PUSH
78221: EMPTY
78222: LIST
78223: PPUSH
78224: CALL_OW 72
78228: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78229: LD_ADDR_VAR 0 8
78233: PUSH
78234: LD_VAR 0 1
78238: PUSH
78239: LD_INT 1
78241: ARRAY
78242: PPUSH
78243: CALL_OW 255
78247: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
78248: LD_ADDR_VAR 0 10
78252: PUSH
78253: LD_INT 29
78255: PUSH
78256: LD_EXP 54
78260: PUSH
78261: EMPTY
78262: LIST
78263: LIST
78264: ST_TO_ADDR
// if not result then
78265: LD_VAR 0 3
78269: NOT
78270: IFFALSE 78274
// exit ;
78272: GO 78633
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78274: LD_ADDR_VAR 0 5
78278: PUSH
78279: LD_INT 81
78281: PUSH
78282: LD_VAR 0 8
78286: PUSH
78287: EMPTY
78288: LIST
78289: LIST
78290: PPUSH
78291: CALL_OW 69
78295: ST_TO_ADDR
// for i in result do
78296: LD_ADDR_VAR 0 4
78300: PUSH
78301: LD_VAR 0 3
78305: PUSH
78306: FOR_IN
78307: IFFALSE 78631
// begin tag := GetTag ( i ) + 1 ;
78309: LD_ADDR_VAR 0 9
78313: PUSH
78314: LD_VAR 0 4
78318: PPUSH
78319: CALL_OW 110
78323: PUSH
78324: LD_INT 1
78326: PLUS
78327: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78328: LD_ADDR_VAR 0 7
78332: PUSH
78333: LD_VAR 0 4
78337: PPUSH
78338: CALL_OW 250
78342: PPUSH
78343: LD_VAR 0 4
78347: PPUSH
78348: CALL_OW 251
78352: PPUSH
78353: LD_INT 6
78355: PPUSH
78356: CALL 77931 0 3
78360: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78361: LD_VAR 0 7
78365: PUSH
78366: LD_VAR 0 4
78370: PPUSH
78371: CALL_OW 264
78375: PUSH
78376: LD_VAR 0 10
78380: IN
78381: NOT
78382: AND
78383: IFFALSE 78422
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78385: LD_VAR 0 4
78389: PPUSH
78390: LD_VAR 0 7
78394: PUSH
78395: LD_INT 1
78397: ARRAY
78398: PUSH
78399: LD_INT 1
78401: ARRAY
78402: PPUSH
78403: LD_VAR 0 7
78407: PUSH
78408: LD_INT 1
78410: ARRAY
78411: PUSH
78412: LD_INT 2
78414: ARRAY
78415: PPUSH
78416: CALL_OW 116
78420: GO 78629
// if path > tag then
78422: LD_VAR 0 2
78426: PUSH
78427: LD_VAR 0 9
78431: GREATER
78432: IFFALSE 78599
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
78434: LD_ADDR_VAR 0 6
78438: PUSH
78439: LD_VAR 0 5
78443: PPUSH
78444: LD_INT 91
78446: PUSH
78447: LD_VAR 0 4
78451: PUSH
78452: LD_INT 12
78454: PUSH
78455: EMPTY
78456: LIST
78457: LIST
78458: LIST
78459: PPUSH
78460: CALL_OW 72
78464: ST_TO_ADDR
// if nearEnemy then
78465: LD_VAR 0 6
78469: IFFALSE 78497
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78471: LD_VAR 0 4
78475: PPUSH
78476: LD_VAR 0 6
78480: PPUSH
78481: LD_VAR 0 4
78485: PPUSH
78486: CALL_OW 74
78490: PPUSH
78491: CALL_OW 115
78495: GO 78597
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78497: LD_VAR 0 4
78501: PPUSH
78502: LD_VAR 0 2
78506: PUSH
78507: LD_VAR 0 9
78511: ARRAY
78512: PUSH
78513: LD_INT 1
78515: ARRAY
78516: PPUSH
78517: LD_VAR 0 2
78521: PUSH
78522: LD_VAR 0 9
78526: ARRAY
78527: PUSH
78528: LD_INT 2
78530: ARRAY
78531: PPUSH
78532: CALL_OW 297
78536: PUSH
78537: LD_INT 6
78539: GREATER
78540: IFFALSE 78583
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78542: LD_VAR 0 4
78546: PPUSH
78547: LD_VAR 0 2
78551: PUSH
78552: LD_VAR 0 9
78556: ARRAY
78557: PUSH
78558: LD_INT 1
78560: ARRAY
78561: PPUSH
78562: LD_VAR 0 2
78566: PUSH
78567: LD_VAR 0 9
78571: ARRAY
78572: PUSH
78573: LD_INT 2
78575: ARRAY
78576: PPUSH
78577: CALL_OW 114
78581: GO 78597
// SetTag ( i , tag ) ;
78583: LD_VAR 0 4
78587: PPUSH
78588: LD_VAR 0 9
78592: PPUSH
78593: CALL_OW 109
// end else
78597: GO 78629
// if enemy then
78599: LD_VAR 0 5
78603: IFFALSE 78629
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78605: LD_VAR 0 4
78609: PPUSH
78610: LD_VAR 0 5
78614: PPUSH
78615: LD_VAR 0 4
78619: PPUSH
78620: CALL_OW 74
78624: PPUSH
78625: CALL_OW 115
// end ;
78629: GO 78306
78631: POP
78632: POP
// end ;
78633: LD_VAR 0 3
78637: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78638: LD_INT 0
78640: PPUSH
78641: PPUSH
78642: PPUSH
// if not unit or IsInUnit ( unit ) then
78643: LD_VAR 0 1
78647: NOT
78648: PUSH
78649: LD_VAR 0 1
78653: PPUSH
78654: CALL_OW 310
78658: OR
78659: IFFALSE 78663
// exit ;
78661: GO 78754
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78663: LD_ADDR_VAR 0 4
78667: PUSH
78668: LD_VAR 0 1
78672: PPUSH
78673: CALL_OW 250
78677: PPUSH
78678: LD_VAR 0 2
78682: PPUSH
78683: LD_INT 1
78685: PPUSH
78686: CALL_OW 272
78690: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78691: LD_ADDR_VAR 0 5
78695: PUSH
78696: LD_VAR 0 1
78700: PPUSH
78701: CALL_OW 251
78705: PPUSH
78706: LD_VAR 0 2
78710: PPUSH
78711: LD_INT 1
78713: PPUSH
78714: CALL_OW 273
78718: ST_TO_ADDR
// if ValidHex ( x , y ) then
78719: LD_VAR 0 4
78723: PPUSH
78724: LD_VAR 0 5
78728: PPUSH
78729: CALL_OW 488
78733: IFFALSE 78754
// ComTurnXY ( unit , x , y ) ;
78735: LD_VAR 0 1
78739: PPUSH
78740: LD_VAR 0 4
78744: PPUSH
78745: LD_VAR 0 5
78749: PPUSH
78750: CALL_OW 118
// end ;
78754: LD_VAR 0 3
78758: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78759: LD_INT 0
78761: PPUSH
78762: PPUSH
// result := false ;
78763: LD_ADDR_VAR 0 3
78767: PUSH
78768: LD_INT 0
78770: ST_TO_ADDR
// if not units then
78771: LD_VAR 0 2
78775: NOT
78776: IFFALSE 78780
// exit ;
78778: GO 78825
// for i in units do
78780: LD_ADDR_VAR 0 4
78784: PUSH
78785: LD_VAR 0 2
78789: PUSH
78790: FOR_IN
78791: IFFALSE 78823
// if See ( side , i ) then
78793: LD_VAR 0 1
78797: PPUSH
78798: LD_VAR 0 4
78802: PPUSH
78803: CALL_OW 292
78807: IFFALSE 78821
// begin result := true ;
78809: LD_ADDR_VAR 0 3
78813: PUSH
78814: LD_INT 1
78816: ST_TO_ADDR
// exit ;
78817: POP
78818: POP
78819: GO 78825
// end ;
78821: GO 78790
78823: POP
78824: POP
// end ;
78825: LD_VAR 0 3
78829: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78830: LD_INT 0
78832: PPUSH
78833: PPUSH
78834: PPUSH
78835: PPUSH
// if not unit or not points then
78836: LD_VAR 0 1
78840: NOT
78841: PUSH
78842: LD_VAR 0 2
78846: NOT
78847: OR
78848: IFFALSE 78852
// exit ;
78850: GO 78942
// dist := 99999 ;
78852: LD_ADDR_VAR 0 5
78856: PUSH
78857: LD_INT 99999
78859: ST_TO_ADDR
// for i in points do
78860: LD_ADDR_VAR 0 4
78864: PUSH
78865: LD_VAR 0 2
78869: PUSH
78870: FOR_IN
78871: IFFALSE 78940
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78873: LD_ADDR_VAR 0 6
78877: PUSH
78878: LD_VAR 0 1
78882: PPUSH
78883: LD_VAR 0 4
78887: PUSH
78888: LD_INT 1
78890: ARRAY
78891: PPUSH
78892: LD_VAR 0 4
78896: PUSH
78897: LD_INT 2
78899: ARRAY
78900: PPUSH
78901: CALL_OW 297
78905: ST_TO_ADDR
// if tmpDist < dist then
78906: LD_VAR 0 6
78910: PUSH
78911: LD_VAR 0 5
78915: LESS
78916: IFFALSE 78938
// begin result := i ;
78918: LD_ADDR_VAR 0 3
78922: PUSH
78923: LD_VAR 0 4
78927: ST_TO_ADDR
// dist := tmpDist ;
78928: LD_ADDR_VAR 0 5
78932: PUSH
78933: LD_VAR 0 6
78937: ST_TO_ADDR
// end ; end ;
78938: GO 78870
78940: POP
78941: POP
// end ; end_of_file
78942: LD_VAR 0 3
78946: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78947: LD_VAR 0 1
78951: PUSH
78952: LD_INT 200
78954: DOUBLE
78955: GREATEREQUAL
78956: IFFALSE 78964
78958: LD_INT 299
78960: DOUBLE
78961: LESSEQUAL
78962: IFTRUE 78966
78964: GO 78998
78966: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78967: LD_VAR 0 1
78971: PPUSH
78972: LD_VAR 0 2
78976: PPUSH
78977: LD_VAR 0 3
78981: PPUSH
78982: LD_VAR 0 4
78986: PPUSH
78987: LD_VAR 0 5
78991: PPUSH
78992: CALL 34594 0 5
78996: GO 79075
78998: LD_INT 300
79000: DOUBLE
79001: GREATEREQUAL
79002: IFFALSE 79010
79004: LD_INT 399
79006: DOUBLE
79007: LESSEQUAL
79008: IFTRUE 79012
79010: GO 79074
79012: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79013: LD_VAR 0 1
79017: PPUSH
79018: LD_VAR 0 2
79022: PPUSH
79023: LD_VAR 0 3
79027: PPUSH
79028: LD_VAR 0 4
79032: PPUSH
79033: LD_VAR 0 5
79037: PPUSH
79038: LD_VAR 0 6
79042: PPUSH
79043: LD_VAR 0 7
79047: PPUSH
79048: LD_VAR 0 8
79052: PPUSH
79053: LD_VAR 0 9
79057: PPUSH
79058: LD_VAR 0 10
79062: PPUSH
79063: LD_VAR 0 11
79067: PPUSH
79068: CALL 32236 0 11
79072: GO 79075
79074: POP
// end ;
79075: PPOPN 11
79077: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79078: LD_VAR 0 1
79082: PPUSH
79083: LD_VAR 0 2
79087: PPUSH
79088: LD_VAR 0 3
79092: PPUSH
79093: LD_VAR 0 4
79097: PPUSH
79098: LD_VAR 0 5
79102: PPUSH
79103: CALL 34330 0 5
// end ; end_of_file
79107: PPOPN 5
79109: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79110: LD_VAR 0 1
79114: PPUSH
79115: LD_VAR 0 2
79119: PPUSH
79120: LD_VAR 0 3
79124: PPUSH
79125: LD_VAR 0 4
79129: PPUSH
79130: LD_VAR 0 5
79134: PPUSH
79135: LD_VAR 0 6
79139: PPUSH
79140: CALL 19929 0 6
// end ;
79144: PPOPN 6
79146: END
