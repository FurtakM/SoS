// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4687 0 0
// PrepareRussianBase ;
  29: CALL 2976 0 0
// PrepareRussianCommander ;
  33: CALL 2927 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8306 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild = 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode = 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible = 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack = 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson = 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase = 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer = 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus = 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer = 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog = 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog = 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog = 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil = 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower = 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable = 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter = 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor = 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 39852 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 39852 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: LD_EXP 49
 585: PPUSH
 586: CALL 39852 0 3
 590: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 591: LD_ADDR_EXP 8
 595: PUSH
 596: LD_STRING Dickens
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: LD_EXP 49
 606: PPUSH
 607: CALL 39852 0 3
 611: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 612: LD_ADDR_EXP 9
 616: PUSH
 617: LD_STRING Woodruff
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_EXP 49
 627: PPUSH
 628: CALL 39852 0 3
 632: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 633: LD_ADDR_EXP 12
 637: PUSH
 638: LD_STRING Campell
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_EXP 49
 648: PPUSH
 649: CALL 39852 0 3
 653: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING Knight
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: LD_EXP 49
 669: PPUSH
 670: CALL 39852 0 3
 674: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 675: LD_ADDR_EXP 11
 679: PUSH
 680: LD_STRING Claptopn
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_EXP 49
 690: PPUSH
 691: CALL 39852 0 3
 695: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING Harisson
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: LD_EXP 49
 711: PPUSH
 712: CALL 39852 0 3
 716: ST_TO_ADDR
// if not Lisa then
 717: LD_EXP 4
 721: NOT
 722: IFFALSE 745
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 724: LD_ADDR_EXP 2
 728: PUSH
 729: LD_STRING Bobby
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_EXP 49
 739: PPUSH
 740: CALL 39852 0 3
 744: ST_TO_ADDR
// if not Lisa and not Bobby then
 745: LD_EXP 4
 749: NOT
 750: PUSH
 751: LD_EXP 2
 755: NOT
 756: AND
 757: IFFALSE 780
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 759: LD_ADDR_EXP 3
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_EXP 49
 774: PPUSH
 775: CALL 39852 0 3
 779: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 780: LD_EXP 4
 784: NOT
 785: PUSH
 786: LD_EXP 2
 790: NOT
 791: AND
 792: PUSH
 793: LD_EXP 3
 797: NOT
 798: AND
 799: IFFALSE 898
// begin tmp = CreateCharacterSet ( 03_others ) ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 31
 813: ST_TO_ADDR
// if tmp then
 814: LD_VAR 0 3
 818: IFFALSE 875
// begin RandomBeforeMission = tmp [ 1 ] ;
 820: LD_ADDR_EXP 6
 824: PUSH
 825: LD_VAR 0 3
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 834: LD_STRING 03_others
 836: PPUSH
 837: CALL_OW 40
// if tmp > 1 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: GREATER
 849: IFFALSE 873
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: DIFF
 865: PPUSH
 866: LD_STRING 03_others
 868: PPUSH
 869: CALL_OW 38
// end else
 873: GO 898
// begin PrepareHuman ( false , 1 , 3 ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: LD_INT 3
 883: PPUSH
 884: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 888: LD_ADDR_EXP 6
 892: PUSH
 893: CALL_OW 44
 897: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 4
 905: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 906: LD_ADDR_EXP 13
 910: PUSH
 911: LD_STRING Donaldson
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: LD_EXP 49
 921: PPUSH
 922: CALL 39852 0 3
 926: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Frank
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 39852 0 3
 947: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 32
 955: PPUSH
 956: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 960: LD_EXP 7
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 975: LD_EXP 7
 979: PPUSH
 980: LD_INT 32
 982: PPUSH
 983: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 987: LD_EXP 8
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1002: LD_EXP 9
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1017: LD_EXP 12
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1032: LD_EXP 10
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1047: LD_EXP 11
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 49
// if Lisa = false then
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1087: LD_EXP 2
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// if Lisa = false and Bobby = false then
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: PUSH
1111: LD_EXP 2
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1137: LD_EXP 4
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: PUSH
1146: LD_EXP 2
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: PUSH
1156: LD_EXP 3
1160: PUSH
1161: LD_INT 0
1163: EQUAL
1164: AND
1165: IFFALSE 1182
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1167: LD_EXP 6
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 49
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1187: LD_INT 0
1189: PPUSH
1190: PPUSH
1191: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1192: LD_EXP 13
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// if Frank then
1207: LD_EXP 5
1211: IFFALSE 1228
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1213: LD_EXP 5
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// uc_nation = 1 ;
1228: LD_ADDR_OWVAR 21
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// uc_side = 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// hc_class := 3 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING SecondCharsGal
1267: ST_TO_ADDR
// hc_face_number := 53 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 53
1275: ST_TO_ADDR
// hc_name := Freddie Warner ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Freddie Warner
1283: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 8
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 2
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 56 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 56
1401: ST_TO_ADDR
// hc_name := Mel Brennan ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Mel Brennan
1409: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 12
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// hc_class := 1 ;
1496: LD_ADDR_OWVAR 28
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_sex := sex_male ;
1504: LD_ADDR_OWVAR 27
1508: PUSH
1509: LD_INT 1
1511: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING AmGalRemake
1519: ST_TO_ADDR
// hc_face_number := 5 ;
1520: LD_ADDR_OWVAR 34
1524: PUSH
1525: LD_INT 5
1527: ST_TO_ADDR
// hc_name := Bob Joplin ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Bob Joplin
1535: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1536: LD_ADDR_OWVAR 29
1540: PUSH
1541: LD_INT 10
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1551: LD_ADDR_OWVAR 30
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1574: LD_ADDR_OWVAR 31
1578: PUSH
1579: LD_INT 3
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// un = CreateHuman ;
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: CALL_OW 44
1606: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1607: LD_VAR 0 3
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// hc_class := 3 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// hc_sex := sex_female ;
1630: LD_ADDR_OWVAR 27
1634: PUSH
1635: LD_INT 2
1637: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING AmGalRemake
1645: ST_TO_ADDR
// hc_face_number := 8 ;
1646: LD_ADDR_OWVAR 34
1650: PUSH
1651: LD_INT 8
1653: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1654: LD_ADDR_OWVAR 26
1658: PUSH
1659: LD_STRING Elizabeth Whitney
1661: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1662: LD_ADDR_OWVAR 29
1666: PUSH
1667: LD_INT 9
1669: PUSH
1670: LD_INT 11
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1677: LD_ADDR_OWVAR 30
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1700: LD_ADDR_OWVAR 31
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: LD_INT 4
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// un = CreateHuman ;
1723: LD_ADDR_VAR 0 3
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// InitHc ;
1748: CALL_OW 19
// end ;
1752: LD_VAR 0 1
1756: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
1761: PPUSH
1762: PPUSH
// uc_nation = 1 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// uc_side = 1 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 2
1786: ST_TO_ADDR
// vc_engine := engine_combustion ;
1787: LD_ADDR_OWVAR 39
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_control := control_manual ;
1795: LD_ADDR_OWVAR 38
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1803: LD_ADDR_OWVAR 41
1807: PUSH
1808: LD_INT 65
1810: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_OWVAR 67
1838: ARRAY
1839: ST_TO_ADDR
// veh := CreateVehicle ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 2
1857: PPUSH
1858: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: CALL_OW 428
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: IFFALSE 1898
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1878: LD_VAR 0 5
1882: PPUSH
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 48
1896: GO 1916
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1898: LD_VAR 0 5
1902: PPUSH
1903: LD_INT 23
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 48
// hc_class := 1 ;
1916: LD_ADDR_OWVAR 28
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_sex := sex_male ;
1924: LD_ADDR_OWVAR 27
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1932: LD_ADDR_OWVAR 33
1936: PUSH
1937: LD_STRING SecondCharsGal
1939: ST_TO_ADDR
// hc_face_number := 59 ;
1940: LD_ADDR_OWVAR 34
1944: PUSH
1945: LD_INT 59
1947: ST_TO_ADDR
// hc_name := Max Gray ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING Max Gray
1955: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 9
1963: PUSH
1964: LD_INT 11
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1971: LD_ADDR_OWVAR 30
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1994: LD_ADDR_OWVAR 31
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 0
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: ST_TO_ADDR
// un = CreateHuman ;
2017: LD_ADDR_VAR 0 4
2021: PUSH
2022: CALL_OW 44
2026: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_INT 11
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// hc_class := 2 ;
2042: LD_ADDR_OWVAR 28
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_sex := sex_male ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2058: LD_ADDR_OWVAR 33
2062: PUSH
2063: LD_STRING SecondCharsGal
2065: ST_TO_ADDR
// hc_face_number := 50 ;
2066: LD_ADDR_OWVAR 34
2070: PUSH
2071: LD_INT 50
2073: ST_TO_ADDR
// hc_name := Frank Hughes ;
2074: LD_ADDR_OWVAR 26
2078: PUSH
2079: LD_STRING Frank Hughes
2081: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2082: LD_ADDR_OWVAR 29
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: LD_INT 10
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2097: LD_ADDR_OWVAR 30
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 11
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// hc_class := 1 ;
2168: LD_ADDR_OWVAR 28
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_sex := sex_male ;
2176: LD_ADDR_OWVAR 27
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2184: LD_ADDR_OWVAR 33
2188: PUSH
2189: LD_STRING SecondCharsGal
2191: ST_TO_ADDR
// hc_face_number := 54 ;
2192: LD_ADDR_OWVAR 34
2196: PUSH
2197: LD_INT 54
2199: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_STRING Luigi Ghbellin
2207: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2208: LD_ADDR_OWVAR 29
2212: PUSH
2213: LD_INT 11
2215: PUSH
2216: LD_INT 11
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2223: LD_ADDR_OWVAR 30
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2246: LD_ADDR_OWVAR 31
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// un = CreateHuman ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: CALL_OW 44
2278: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2279: LD_VAR 0 4
2283: PPUSH
2284: LD_INT 11
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL_OW 49
// hc_class := 3 ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 3
2301: ST_TO_ADDR
// hc_sex := sex_male ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2310: LD_ADDR_OWVAR 33
2314: PUSH
2315: LD_STRING AmGalRemake
2317: ST_TO_ADDR
// hc_face_number := 6 ;
2318: LD_ADDR_OWVAR 34
2322: PUSH
2323: LD_INT 6
2325: ST_TO_ADDR
// hc_name := Leon Carter ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Leon Carter
2333: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2334: LD_ADDR_OWVAR 29
2338: PUSH
2339: LD_INT 10
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2349: LD_ADDR_OWVAR 30
2353: PUSH
2354: LD_INT 0
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2372: LD_ADDR_OWVAR 31
2376: PUSH
2377: LD_INT 0
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: ST_TO_ADDR
// un = CreateHuman ;
2395: LD_ADDR_VAR 0 4
2399: PUSH
2400: CALL_OW 44
2404: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2405: LD_VAR 0 4
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 52
// if count = 4 then
2419: LD_VAR 0 1
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2555
// begin hc_class := 1 ;
2429: LD_ADDR_OWVAR 28
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_sex := sex_male ;
2437: LD_ADDR_OWVAR 27
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING SecondCharsGal
2452: ST_TO_ADDR
// hc_face_number := 34 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 34
2460: ST_TO_ADDR
// hc_name := Ian Hill ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING Ian Hill
2468: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2469: LD_ADDR_OWVAR 29
2473: PUSH
2474: LD_INT 10
2476: PUSH
2477: LD_INT 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2484: LD_ADDR_OWVAR 30
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: LD_INT 0
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2507: LD_ADDR_OWVAR 31
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: ST_TO_ADDR
// un = CreateHuman ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: CALL_OW 44
2539: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2540: LD_VAR 0 4
2544: PPUSH
2545: LD_INT 11
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 49
// end ; if count = 5 then
2555: LD_VAR 0 1
2559: PUSH
2560: LD_INT 5
2562: EQUAL
2563: IFFALSE 2817
// begin hc_class := 1 ;
2565: LD_ADDR_OWVAR 28
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_sex := sex_male ;
2573: LD_ADDR_OWVAR 27
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2581: LD_ADDR_OWVAR 33
2585: PUSH
2586: LD_STRING SecondCharsGal
2588: ST_TO_ADDR
// hc_face_number := 34 ;
2589: LD_ADDR_OWVAR 34
2593: PUSH
2594: LD_INT 34
2596: ST_TO_ADDR
// hc_name := Ian Hill ;
2597: LD_ADDR_OWVAR 26
2601: PUSH
2602: LD_STRING Ian Hill
2604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2605: LD_ADDR_OWVAR 29
2609: PUSH
2610: LD_INT 10
2612: PUSH
2613: LD_INT 12
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2620: LD_ADDR_OWVAR 30
2624: PUSH
2625: LD_INT 1
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 0
2633: PUSH
2634: LD_INT 0
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2643: LD_ADDR_OWVAR 31
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: ST_TO_ADDR
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// hc_class := 1 ;
2691: LD_ADDR_OWVAR 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// hc_sex := sex_female ;
2699: LD_ADDR_OWVAR 27
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2707: LD_ADDR_OWVAR 33
2711: PUSH
2712: LD_STRING SecondCharsGal
2714: ST_TO_ADDR
// hc_face_number := 41 ;
2715: LD_ADDR_OWVAR 34
2719: PUSH
2720: LD_INT 41
2722: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2723: LD_ADDR_OWVAR 26
2727: PUSH
2728: LD_STRING Kate Wadsworth
2730: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2731: LD_ADDR_OWVAR 29
2735: PUSH
2736: LD_INT 9
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2746: LD_ADDR_OWVAR 30
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2769: LD_ADDR_OWVAR 31
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// un = CreateHuman ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 11
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2817: LD_INT 11
2819: PPUSH
2820: LD_INT 22
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 21
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 26
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 70
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2868: LD_INT 11
2870: PPUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 26
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 70
2910: PUSH
2911: LD_INT 1
2913: ARRAY
2914: PPUSH
2915: LD_STRING D6-Sol3-1
2917: PPUSH
2918: CALL_OW 88
// end ; end_of_file
2922: LD_VAR 0 2
2926: RET
// export function PrepareRussianCommander ; begin
2927: LD_INT 0
2929: PPUSH
// uc_side = 3 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// uc_nation = 3 ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Stolypin
2953: PPUSH
2954: CALL_OW 25
2958: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2959: LD_EXP 15
2963: PPUSH
2964: LD_INT 21
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: LD_VAR 0 1
2975: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// if Difficulty > 1 then
2982: LD_OWVAR 67
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3100
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := 3 ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// InitHc_All ( ) ;
3008: CALL_OW 584
// InitBc ;
3012: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3016: LD_INT 0
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL_OW 380
// bc_type := b_breastwork ;
3029: LD_ADDR_OWVAR 42
3033: PUSH
3034: LD_INT 31
3036: ST_TO_ADDR
// bc_level := 4 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 4
3044: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3045: LD_ADDR_VAR 0 3
3049: PUSH
3050: LD_INT 100
3052: PPUSH
3053: LD_INT 58
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 5
3081: PPUSH
3082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3086: LD_VAR 0 4
3090: PPUSH
3091: LD_VAR 0 3
3095: PPUSH
3096: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3100: LD_INT 3
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 22
3108: PPUSH
3109: LD_EXP 16
3113: PPUSH
3114: LD_EXP 17
3118: PPUSH
3119: CALL_OW 12
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 4
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 6
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_OWVAR 67
3149: ARRAY
3150: PPUSH
3151: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 21
3163: PPUSH
3164: LD_EXP 16
3168: PPUSH
3169: LD_EXP 17
3173: PPUSH
3174: CALL_OW 12
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: LD_EXP 16
3202: PPUSH
3203: LD_EXP 17
3207: PPUSH
3208: CALL_OW 12
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 24
3231: PPUSH
3232: LD_EXP 16
3236: PPUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 5
3252: PPUSH
3253: CALL 4353 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3332
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3294: LD_INT 3
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: LD_EXP 17
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL 4353 0 6
3330: GO 3291
3332: POP
3333: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 30
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: FOR_IN
3369: IFFALSE 3397
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL 4462 0 2
3395: GO 3368
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 1
3403: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 6 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 6
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// InitHC_All ( ) ;
3426: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: DOUBLE
3436: LD_INT 1
3438: DEC
3439: ST_TO_ADDR
3440: LD_INT 1
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: LD_INT 2
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_OWVAR 67
3462: ARRAY
3463: PUSH
3464: FOR_TO
3465: IFFALSE 3633
// begin vc_engine = 1 ;
3467: LD_ADDR_OWVAR 39
3471: PUSH
3472: LD_INT 1
3474: ST_TO_ADDR
// vc_control = 1 ;
3475: LD_ADDR_OWVAR 38
3479: PUSH
3480: LD_INT 1
3482: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3483: LD_ADDR_OWVAR 40
3487: PUSH
3488: LD_INT 42
3490: PUSH
3491: LD_INT 42
3493: PUSH
3494: LD_INT 43
3496: PUSH
3497: LD_INT 43
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: LD_OWVAR 67
3510: ARRAY
3511: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3512: LD_ADDR_OWVAR 37
3516: PUSH
3517: LD_INT 21
3519: PUSH
3520: LD_INT 22
3522: PUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 22
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_OWVAR 67
3539: ARRAY
3540: ST_TO_ADDR
// veh = CreateVehicle ;
3541: LD_ADDR_VAR 0 3
3545: PUSH
3546: CALL_OW 45
3550: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_INT 3
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// hc_gallery =  ;
3566: LD_ADDR_OWVAR 33
3570: PUSH
3571: LD_STRING 
3573: ST_TO_ADDR
// hc_name =  ;
3574: LD_ADDR_OWVAR 26
3578: PUSH
3579: LD_STRING 
3581: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3582: LD_INT 0
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: LD_EXP 16
3592: PPUSH
3593: LD_EXP 17
3597: PPUSH
3598: CALL_OW 12
3602: PPUSH
3603: CALL_OW 380
// un = CreateHuman ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: CALL_OW 44
3616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3617: LD_VAR 0 4
3621: PPUSH
3622: LD_VAR 0 3
3626: PPUSH
3627: CALL_OW 52
// end ;
3631: GO 3464
3633: POP
3634: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3635: LD_INT 0
3637: PPUSH
3638: LD_INT 2
3640: PPUSH
3641: LD_EXP 16
3645: PPUSH
3646: LD_EXP 17
3650: PPUSH
3651: CALL_OW 12
3655: PUSH
3656: LD_INT 2
3658: PLUS
3659: PPUSH
3660: CALL_OW 380
// un = CreateHuman ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3689: LD_INT 0
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_EXP 16
3699: PPUSH
3700: LD_EXP 17
3704: PPUSH
3705: CALL_OW 12
3709: PUSH
3710: LD_INT 2
3712: PLUS
3713: PPUSH
3714: CALL_OW 380
// un = CreateHuman ;
3718: LD_ADDR_VAR 0 4
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3728: LD_VAR 0 4
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 2
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_OWVAR 67
3775: ARRAY
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 3
3782: PPUSH
3783: CALL_OW 12
3787: PLUS
3788: PUSH
3789: FOR_TO
3790: IFFALSE 3860
// begin hc_gallery =  ;
3792: LD_ADDR_OWVAR 33
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// hc_name =  ;
3800: LD_ADDR_OWVAR 26
3804: PUSH
3805: LD_STRING 
3807: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_EXP 16
3818: PPUSH
3819: LD_EXP 17
3823: PPUSH
3824: CALL_OW 12
3828: PPUSH
3829: CALL_OW 380
// un = CreateHuman ;
3833: LD_ADDR_VAR 0 4
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3843: LD_VAR 0 4
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 49
// end ;
3858: GO 3789
3860: POP
3861: POP
// vc_engine = 1 ;
3862: LD_ADDR_OWVAR 39
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// vc_control = 1 ;
3870: LD_ADDR_OWVAR 38
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// vc_weapon = 51 ;
3878: LD_ADDR_OWVAR 40
3882: PUSH
3883: LD_INT 51
3885: ST_TO_ADDR
// vc_chassis = 22 ;
3886: LD_ADDR_OWVAR 37
3890: PUSH
3891: LD_INT 22
3893: ST_TO_ADDR
// veh = CreateVehicle ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 100
3929: PPUSH
3930: CALL_OW 290
// hc_gallery =  ;
3934: LD_ADDR_OWVAR 33
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// hc_name =  ;
3942: LD_ADDR_OWVAR 26
3946: PUSH
3947: LD_STRING 
3949: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: LD_EXP 16
3960: PPUSH
3961: LD_EXP 17
3965: PPUSH
3966: CALL_OW 12
3970: PPUSH
3971: CALL_OW 380
// un = CreateHuman ;
3975: LD_ADDR_VAR 0 4
3979: PUSH
3980: CALL_OW 44
3984: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3985: LD_VAR 0 4
3989: PPUSH
3990: LD_VAR 0 3
3994: PPUSH
3995: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3999: LD_ADDR_VAR 0 2
4003: PUSH
4004: LD_INT 22
4006: PUSH
4007: LD_INT 6
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: LD_INT 25
4022: PUSH
4023: LD_INT 2
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 69
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4085
// ComAgressiveMove ( i , 45 , 46 ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_INT 45
4075: PPUSH
4076: LD_INT 46
4078: PPUSH
4079: CALL_OW 114
4083: GO 4065
4085: POP
4086: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_INT 22
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 25
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 69
4120: PUSH
4121: FOR_IN
4122: IFFALSE 4153
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4124: LD_ADDR_EXP 21
4128: PUSH
4129: LD_VAR 0 2
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: LD_INT 48
4139: PPUSH
4140: LD_INT 55
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: CALL_OW 145
4150: ST_TO_ADDR
4151: GO 4121
4153: POP
4154: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4155: LD_ADDR_VAR 0 2
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 6
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 69
4188: PUSH
4189: FOR_IN
4190: IFFALSE 4209
// ComMoveXY ( i , 39 , 55 ) ;
4192: LD_VAR 0 2
4196: PPUSH
4197: LD_INT 39
4199: PPUSH
4200: LD_INT 55
4202: PPUSH
4203: CALL_OW 111
4207: GO 4189
4209: POP
4210: POP
// end ;
4211: LD_VAR 0 1
4215: RET
// export function PrepareFirstAttack ; var i , un ; begin
4216: LD_INT 0
4218: PPUSH
4219: PPUSH
4220: PPUSH
// uc_side = 5 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 5
4228: ST_TO_ADDR
// uc_nation = 3 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 3
4236: ST_TO_ADDR
// for i := 1 to 4 do
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: DOUBLE
4243: LD_INT 1
4245: DEC
4246: ST_TO_ADDR
4247: LD_INT 4
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4338
// begin InitHC_All ( ) ;
4253: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4257: LD_INT 0
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_EXP 16
4267: PPUSH
4268: LD_EXP 17
4272: PPUSH
4273: CALL_OW 12
4277: PPUSH
4278: CALL_OW 380
// un = CreateHuman ;
4282: LD_ADDR_VAR 0 3
4286: PUSH
4287: CALL_OW 44
4291: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4292: LD_VAR 0 3
4296: PPUSH
4297: LD_INT 4
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_EXP 1
4316: PPUSH
4317: CALL_OW 250
4321: PPUSH
4322: LD_EXP 1
4326: PPUSH
4327: CALL_OW 251
4331: PPUSH
4332: CALL_OW 114
// end ;
4336: GO 4250
4338: POP
4339: POP
// firstRussianAttack = 1 ;
4340: LD_ADDR_EXP 23
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// end ; end_of_file
4348: LD_VAR 0 1
4352: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4353: LD_INT 0
4355: PPUSH
4356: PPUSH
4357: PPUSH
// for i = 1 to count do
4358: LD_ADDR_VAR 0 8
4362: PUSH
4363: DOUBLE
4364: LD_INT 1
4366: DEC
4367: ST_TO_ADDR
4368: LD_VAR 0 6
4372: PUSH
4373: FOR_TO
4374: IFFALSE 4455
// begin uc_side = side ;
4376: LD_ADDR_OWVAR 20
4380: PUSH
4381: LD_VAR 0 1
4385: ST_TO_ADDR
// uc_nation = nation ;
4386: LD_ADDR_OWVAR 21
4390: PUSH
4391: LD_VAR 0 2
4395: ST_TO_ADDR
// hc_gallery =  ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING 
4403: ST_TO_ADDR
// hc_name =  ;
4404: LD_ADDR_OWVAR 26
4408: PUSH
4409: LD_STRING 
4411: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4412: LD_INT 0
4414: PPUSH
4415: LD_VAR 0 5
4419: PPUSH
4420: LD_VAR 0 4
4424: PPUSH
4425: CALL_OW 380
// un = CreateHuman ;
4429: LD_ADDR_VAR 0 9
4433: PUSH
4434: CALL_OW 44
4438: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4439: LD_VAR 0 9
4443: PPUSH
4444: LD_VAR 0 3
4448: PPUSH
4449: CALL_OW 52
// end ;
4453: GO 4373
4455: POP
4456: POP
// end ;
4457: LD_VAR 0 7
4461: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4462: LD_INT 0
4464: PPUSH
4465: PPUSH
4466: PPUSH
// uc_side := GetSide ( b ) ;
4467: LD_ADDR_OWVAR 20
4471: PUSH
4472: LD_VAR 0 2
4476: PPUSH
4477: CALL_OW 255
4481: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4482: LD_ADDR_OWVAR 21
4486: PUSH
4487: LD_VAR 0 2
4491: PPUSH
4492: CALL_OW 248
4496: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4497: LD_INT 0
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 380
// un = CreateHuman ;
4512: LD_ADDR_VAR 0 4
4516: PUSH
4517: CALL_OW 44
4521: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4522: LD_ADDR_VAR 0 5
4526: PUSH
4527: LD_VAR 0 2
4531: PPUSH
4532: CALL_OW 254
4536: PUSH
4537: LD_INT 3
4539: MINUS
4540: ST_TO_ADDR
// if dir < 0 then
4541: LD_VAR 0 5
4545: PUSH
4546: LD_INT 0
4548: LESS
4549: IFFALSE 4565
// dir := 6 + dir ;
4551: LD_ADDR_VAR 0 5
4555: PUSH
4556: LD_INT 6
4558: PUSH
4559: LD_VAR 0 5
4563: PLUS
4564: ST_TO_ADDR
// SetDir ( un , dir ) ;
4565: LD_VAR 0 4
4569: PPUSH
4570: LD_VAR 0 5
4574: PPUSH
4575: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: LD_VAR 0 2
4588: PPUSH
4589: CALL_OW 52
// end ;
4593: LD_VAR 0 3
4597: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4598: LD_INT 0
4600: PPUSH
4601: PPUSH
4602: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4603: LD_ADDR_VAR 0 6
4607: PUSH
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: PPUSH
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 12
4625: ARRAY
4626: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4627: LD_VAR 0 6
4631: PPUSH
4632: CALL_OW 258
4636: PUSH
4637: LD_INT 1
4639: EQUAL
4640: IFFALSE 4658
// Say ( speaker , dialogMID ) else
4642: LD_VAR 0 6
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: CALL_OW 88
4656: GO 4672
// Say ( speaker , dialogFID ) ;
4658: LD_VAR 0 6
4662: PPUSH
4663: LD_VAR 0 3
4667: PPUSH
4668: CALL_OW 88
// result := speaker ;
4672: LD_ADDR_VAR 0 4
4676: PUSH
4677: LD_VAR 0 6
4681: ST_TO_ADDR
// end ;
4682: LD_VAR 0 4
4686: RET
// export function PrepareDifficulty ; var tmp ; begin
4687: LD_INT 0
4689: PPUSH
4690: PPUSH
// if Difficulty = 1 then
4691: LD_OWVAR 67
4695: PUSH
4696: LD_INT 1
4698: EQUAL
4699: IFFALSE 4717
// begin RuSoldMinLevel = 1 ;
4701: LD_ADDR_EXP 16
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4709: LD_ADDR_EXP 17
4713: PUSH
4714: LD_INT 2
4716: ST_TO_ADDR
// end ; if Difficulty = 2 then
4717: LD_OWVAR 67
4721: PUSH
4722: LD_INT 2
4724: EQUAL
4725: IFFALSE 4826
// begin RuSoldMinLevel = 2 ;
4727: LD_ADDR_EXP 16
4731: PUSH
4732: LD_INT 2
4734: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4735: LD_ADDR_EXP 17
4739: PUSH
4740: LD_INT 3
4742: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4743: LD_INT 23
4745: PPUSH
4746: CALL_OW 64
// uc_nation = 3 ;
4750: LD_ADDR_OWVAR 21
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// uc_side = 3 ;
4758: LD_ADDR_OWVAR 20
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// bc_level = 5 ;
4766: LD_ADDR_OWVAR 43
4770: PUSH
4771: LD_INT 5
4773: ST_TO_ADDR
// bc_type = 32 ;
4774: LD_ADDR_OWVAR 42
4778: PUSH
4779: LD_INT 32
4781: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: LD_INT 76
4789: PPUSH
4790: LD_INT 91
4792: PPUSH
4793: LD_INT 2
4795: PPUSH
4796: CALL_OW 47
4800: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4801: LD_VAR 0 2
4805: PPUSH
4806: LD_INT 43
4808: PPUSH
4809: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4813: LD_INT 51
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 322
// end ; if Difficulty >= 3 then
4826: LD_OWVAR 67
4830: PUSH
4831: LD_INT 3
4833: GREATEREQUAL
4834: IFFALSE 4998
// begin RuSoldMinLevel = Difficulty ;
4836: LD_ADDR_EXP 16
4840: PUSH
4841: LD_OWVAR 67
4845: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4846: LD_ADDR_EXP 17
4850: PUSH
4851: LD_INT 4
4853: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4854: LD_INT 26
4856: PPUSH
4857: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4861: LD_INT 23
4863: PPUSH
4864: CALL_OW 64
// uc_nation = 3 ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// uc_side = 3 ;
4876: LD_ADDR_OWVAR 20
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// bc_level = 5 ;
4884: LD_ADDR_OWVAR 43
4888: PUSH
4889: LD_INT 5
4891: ST_TO_ADDR
// bc_type = 32 ;
4892: LD_ADDR_OWVAR 42
4896: PUSH
4897: LD_INT 32
4899: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4900: LD_ADDR_VAR 0 2
4904: PUSH
4905: LD_INT 76
4907: PPUSH
4908: LD_INT 91
4910: PPUSH
4911: LD_INT 2
4913: PPUSH
4914: CALL_OW 47
4918: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_INT 44
4926: PPUSH
4927: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4931: LD_ADDR_VAR 0 2
4935: PUSH
4936: LD_INT 83
4938: PPUSH
4939: LD_INT 84
4941: PPUSH
4942: LD_INT 2
4944: PPUSH
4945: CALL_OW 47
4949: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4950: LD_VAR 0 2
4954: PPUSH
4955: LD_INT 43
4957: PPUSH
4958: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4962: LD_INT 51
4964: PPUSH
4965: LD_INT 3
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4975: LD_INT 52
4977: PPUSH
4978: LD_INT 3
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4988: LD_INT 25
4990: PPUSH
4991: LD_INT 44
4993: PPUSH
4994: CALL_OW 431
// end ; end ;
4998: LD_VAR 0 1
5002: RET
// export function EnergyDialog ; begin
5003: LD_INT 0
5005: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5006: LD_INT 46
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: CALL_OW 321
5016: PUSH
5017: LD_INT 1
5019: EQUAL
5020: PUSH
5021: LD_INT 35
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 321
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: AND
5036: IFFALSE 5060
// begin Say ( JMM , D9c-JMM-1 ) ;
5038: LD_EXP 1
5042: PPUSH
5043: LD_STRING D9c-JMM-1
5045: PPUSH
5046: CALL_OW 88
// energyVDialog = 1 ;
5050: LD_ADDR_EXP 33
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// end else
5058: GO 5214
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5060: LD_INT 35
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 321
5070: PUSH
5071: LD_INT 2
5073: EQUAL
5074: PUSH
5075: LD_EXP 33
5079: PUSH
5080: LD_INT 0
5082: EQUAL
5083: AND
5084: IFFALSE 5106
// begin Say ( JMM , D9c-JMM-1a ) ;
5086: LD_EXP 1
5090: PPUSH
5091: LD_STRING D9c-JMM-1a
5093: PPUSH
5094: CALL_OW 88
// energyVDialog = 1 ;
5098: LD_ADDR_EXP 33
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5106: LD_INT 46
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: CALL_OW 321
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: PUSH
5121: LD_EXP 33
5125: PUSH
5126: LD_INT 0
5128: EQUAL
5129: AND
5130: IFFALSE 5152
// begin Say ( JMM , D9c-JMM-1b ) ;
5132: LD_EXP 1
5136: PPUSH
5137: LD_STRING D9c-JMM-1b
5139: PPUSH
5140: CALL_OW 88
// energyVDialog = 1 ;
5144: LD_ADDR_EXP 33
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5152: LD_INT 46
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 321
5162: PUSH
5163: LD_INT 2
5165: EQUAL
5166: PUSH
5167: LD_INT 21
5169: PPUSH
5170: LD_INT 1
5172: PPUSH
5173: CALL_OW 321
5177: PUSH
5178: LD_INT 2
5180: EQUAL
5181: AND
5182: PUSH
5183: LD_EXP 33
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: AND
5192: IFFALSE 5214
// begin Say ( JMM , D9c-JMM-1c ) ;
5194: LD_EXP 1
5198: PPUSH
5199: LD_STRING D9c-JMM-1c
5201: PPUSH
5202: CALL_OW 88
// energyVDialog = 1 ;
5206: LD_ADDR_EXP 33
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ; end ; end ;
5214: LD_VAR 0 1
5218: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5226: LD_VAR 0 1
5230: NOT
5231: PUSH
5232: LD_VAR 0 1
5236: PPUSH
5237: CALL_OW 256
5241: PUSH
5242: LD_INT 250
5244: LESS
5245: OR
5246: PUSH
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 314
5256: PUSH
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 261
5266: PUSH
5267: LD_INT 20
5269: GREATER
5270: AND
5271: OR
5272: IFFALSE 5276
// exit ;
5274: GO 5641
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5276: LD_VAR 0 1
5280: PPUSH
5281: CALL_OW 261
5285: PUSH
5286: LD_INT 20
5288: LESS
5289: PUSH
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 110
5299: PUSH
5300: LD_INT 21
5302: EQUAL
5303: NOT
5304: AND
5305: IFFALSE 5332
// begin ComStop ( bulldozer ) ;
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_INT 21
5323: PPUSH
5324: CALL_OW 109
// exit ;
5328: GO 5641
// end else
5330: GO 5359
// if GetFuel ( bulldozer ) > 20 then
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 261
5341: PUSH
5342: LD_INT 20
5344: GREATER
5345: IFFALSE 5359
// SetTag ( bulldozer , 0 ) ;
5347: LD_VAR 0 1
5351: PPUSH
5352: LD_INT 0
5354: PPUSH
5355: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5359: LD_ADDR_VAR 0 5
5363: PUSH
5364: LD_VAR 0 2
5368: PPUSH
5369: CALL_OW 353
5373: ST_TO_ADDR
// tmp := [ ] ;
5374: LD_ADDR_VAR 0 6
5378: PUSH
5379: EMPTY
5380: ST_TO_ADDR
// for i = 1 to list do
5381: LD_ADDR_VAR 0 4
5385: PUSH
5386: DOUBLE
5387: LD_INT 1
5389: DEC
5390: ST_TO_ADDR
5391: LD_VAR 0 5
5395: PUSH
5396: FOR_TO
5397: IFFALSE 5495
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5399: LD_VAR 0 5
5403: PUSH
5404: LD_VAR 0 4
5408: ARRAY
5409: PUSH
5410: LD_INT 1
5412: ARRAY
5413: PPUSH
5414: LD_VAR 0 5
5418: PUSH
5419: LD_VAR 0 4
5423: ARRAY
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: PPUSH
5429: CALL_OW 554
5433: IFFALSE 5493
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5435: LD_ADDR_VAR 0 6
5439: PUSH
5440: LD_VAR 0 6
5444: PPUSH
5445: LD_VAR 0 6
5449: PUSH
5450: LD_INT 1
5452: PLUS
5453: PPUSH
5454: LD_VAR 0 5
5458: PUSH
5459: LD_VAR 0 4
5463: ARRAY
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PUSH
5469: LD_VAR 0 5
5473: PUSH
5474: LD_VAR 0 4
5478: ARRAY
5479: PUSH
5480: LD_INT 2
5482: ARRAY
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PPUSH
5488: CALL_OW 1
5492: ST_TO_ADDR
// end ;
5493: GO 5396
5495: POP
5496: POP
// ComStop ( bulldozer ) ;
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5506: LD_ADDR_VAR 0 7
5510: PUSH
5511: LD_VAR 0 1
5515: PPUSH
5516: CALL_OW 250
5520: PUSH
5521: LD_VAR 0 1
5525: PPUSH
5526: CALL_OW 251
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: ST_TO_ADDR
// for i = tmp downto 1 do
5535: LD_ADDR_VAR 0 4
5539: PUSH
5540: DOUBLE
5541: LD_VAR 0 6
5545: INC
5546: ST_TO_ADDR
5547: LD_INT 1
5549: PUSH
5550: FOR_DOWNTO
5551: IFFALSE 5639
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5553: LD_ADDR_VAR 0 7
5557: PUSH
5558: LD_VAR 0 7
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: PPUSH
5567: LD_VAR 0 7
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: LD_VAR 0 6
5580: PPUSH
5581: CALL 5742 0 3
5585: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5586: LD_VAR 0 1
5590: PPUSH
5591: LD_VAR 0 7
5595: PUSH
5596: LD_INT 1
5598: ARRAY
5599: PPUSH
5600: LD_VAR 0 7
5604: PUSH
5605: LD_INT 2
5607: ARRAY
5608: PPUSH
5609: CALL 5646 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: LD_VAR 0 6
5622: PPUSH
5623: LD_VAR 0 7
5627: PUSH
5628: LD_INT 3
5630: ARRAY
5631: PPUSH
5632: CALL_OW 3
5636: ST_TO_ADDR
// end ;
5637: GO 5550
5639: POP
5640: POP
// end ;
5641: LD_VAR 0 3
5645: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5646: LD_INT 0
5648: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5649: LD_VAR 0 2
5653: PPUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: CALL_OW 351
5663: PUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: CALL_OW 554
5678: AND
5679: PUSH
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: CALL_OW 488
5694: AND
5695: PUSH
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 428
5710: PUSH
5711: LD_INT 1
5713: NEG
5714: EQUAL
5715: AND
5716: IFFALSE 5737
// AddComMoveXY ( bulldozer , x , y ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_VAR 0 3
5732: PPUSH
5733: CALL_OW 171
// end ;
5737: LD_VAR 0 4
5741: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
5749: PPUSH
5750: PPUSH
// dist := 99999 ;
5751: LD_ADDR_VAR 0 6
5755: PUSH
5756: LD_INT 99999
5758: ST_TO_ADDR
// for i = 1 to list do
5759: LD_ADDR_VAR 0 5
5763: PUSH
5764: DOUBLE
5765: LD_INT 1
5767: DEC
5768: ST_TO_ADDR
5769: LD_VAR 0 3
5773: PUSH
5774: FOR_TO
5775: IFFALSE 5913
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5777: LD_ADDR_VAR 0 7
5781: PUSH
5782: LD_VAR 0 1
5786: PPUSH
5787: LD_VAR 0 2
5791: PPUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_VAR 0 5
5801: ARRAY
5802: PUSH
5803: LD_INT 1
5805: ARRAY
5806: PPUSH
5807: LD_VAR 0 3
5811: PUSH
5812: LD_VAR 0 5
5816: ARRAY
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PPUSH
5822: CALL_OW 298
5826: ST_TO_ADDR
// if d = 0 then
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 0
5834: EQUAL
5835: IFFALSE 5839
// continue ;
5837: GO 5774
// if d < dist then
5839: LD_VAR 0 7
5843: PUSH
5844: LD_VAR 0 6
5848: LESS
5849: IFFALSE 5911
// begin _x := list [ i ] [ 1 ] ;
5851: LD_ADDR_VAR 0 8
5855: PUSH
5856: LD_VAR 0 3
5860: PUSH
5861: LD_VAR 0 5
5865: ARRAY
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5871: LD_ADDR_VAR 0 9
5875: PUSH
5876: LD_VAR 0 3
5880: PUSH
5881: LD_VAR 0 5
5885: ARRAY
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: ST_TO_ADDR
// _i := i ;
5891: LD_ADDR_VAR 0 10
5895: PUSH
5896: LD_VAR 0 5
5900: ST_TO_ADDR
// dist := d ;
5901: LD_ADDR_VAR 0 6
5905: PUSH
5906: LD_VAR 0 7
5910: ST_TO_ADDR
// end ; end ;
5911: GO 5774
5913: POP
5914: POP
// result := [ _x , _y , _i , dist ] ;
5915: LD_ADDR_VAR 0 4
5919: PUSH
5920: LD_VAR 0 8
5924: PUSH
5925: LD_VAR 0 9
5929: PUSH
5930: LD_VAR 0 10
5934: PUSH
5935: LD_VAR 0 6
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: ST_TO_ADDR
// end ;
5946: LD_VAR 0 4
5950: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// for i = 1 to 72 do
5955: LD_ADDR_VAR 0 5
5959: PUSH
5960: DOUBLE
5961: LD_INT 1
5963: DEC
5964: ST_TO_ADDR
5965: LD_INT 72
5967: PUSH
5968: FOR_TO
5969: IFFALSE 6023
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5971: LD_VAR 0 5
5975: PPUSH
5976: LD_VAR 0 1
5980: PPUSH
5981: CALL_OW 321
5985: PUSH
5986: LD_INT 1
5988: EQUAL
5989: PUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: LD_VAR 0 3
5999: PPUSH
6000: CALL_OW 482
6004: AND
6005: IFFALSE 6021
// AddComResearch ( lab , i ) ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 5
6016: PPUSH
6017: CALL_OW 184
6021: GO 5968
6023: POP
6024: POP
// end ;
6025: LD_VAR 0 4
6029: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
6036: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6037: LD_ADDR_VAR 0 7
6041: PUSH
6042: LD_VAR 0 2
6046: PPUSH
6047: CALL_OW 313
6051: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6052: LD_ADDR_VAR 0 8
6056: PUSH
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_INT 22
6064: PUSH
6065: LD_VAR 0 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 2
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 24
6086: PUSH
6087: LD_INT 750
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: LD_INT 54
6099: PUSH
6100: EMPTY
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 70
6117: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6118: LD_ADDR_VAR 0 5
6122: PUSH
6123: LD_VAR 0 3
6127: PPUSH
6128: LD_INT 22
6130: PUSH
6131: LD_VAR 0 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 21
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: LD_INT 24
6155: PUSH
6156: LD_INT 1000
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: EMPTY
6173: LIST
6174: PPUSH
6175: CALL_OW 70
6179: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6180: LD_VAR 0 5
6184: NOT
6185: PUSH
6186: LD_INT 22
6188: PUSH
6189: LD_VAR 0 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 24
6210: PUSH
6211: LD_INT 250
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: PPUSH
6223: CALL_OW 69
6227: NOT
6228: AND
6229: IFFALSE 6233
// exit ;
6231: GO 6329
// if buildingsList and engineerOkInside then
6233: LD_VAR 0 5
6237: PUSH
6238: LD_VAR 0 7
6242: AND
6243: IFFALSE 6269
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6245: LD_VAR 0 7
6249: PPUSH
6250: LD_INT 25
6252: PUSH
6253: LD_INT 2
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 72
6264: PPUSH
6265: CALL_OW 122
// if buildingsList and engineerOkOutside then
6269: LD_VAR 0 5
6273: PUSH
6274: LD_VAR 0 8
6278: AND
6279: IFFALSE 6299
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6299: LD_VAR 0 5
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: PUSH
6308: LD_VAR 0 8
6312: AND
6313: IFFALSE 6329
// ComEnterUnit ( engineerOkOutside , building ) ;
6315: LD_VAR 0 8
6319: PPUSH
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL_OW 120
// end ;
6329: LD_VAR 0 4
6333: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6343: LD_ADDR_VAR 0 6
6347: PUSH
6348: LD_INT 22
6350: PUSH
6351: LD_VAR 0 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 23
6372: PUSH
6373: LD_INT 2
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 251
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6401: LD_ADDR_VAR 0 7
6405: PUSH
6406: LD_VAR 0 3
6410: PPUSH
6411: LD_INT 22
6413: PUSH
6414: LD_VAR 0 1
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 23
6425: PUSH
6426: LD_INT 2
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 25
6435: PUSH
6436: LD_INT 4
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 50
6445: PUSH
6446: EMPTY
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PPUSH
6455: CALL_OW 70
6459: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6460: LD_ADDR_VAR 0 8
6464: PUSH
6465: LD_VAR 0 3
6469: PPUSH
6470: LD_INT 22
6472: PUSH
6473: LD_VAR 0 1
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 21
6484: PUSH
6485: LD_INT 1
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 3
6494: PUSH
6495: LD_INT 25
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 24
6514: PUSH
6515: LD_INT 750
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: PPUSH
6532: CALL_OW 70
6536: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6537: LD_ADDR_VAR 0 9
6541: PUSH
6542: LD_VAR 0 2
6546: PPUSH
6547: LD_INT 22
6549: PUSH
6550: LD_VAR 0 1
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 21
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 25
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 3
6588: PUSH
6589: LD_INT 24
6591: PUSH
6592: LD_INT 1000
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: PPUSH
6609: CALL_OW 70
6613: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6614: LD_VAR 0 8
6618: NOT
6619: PUSH
6620: LD_VAR 0 9
6624: NOT
6625: AND
6626: PUSH
6627: LD_VAR 0 6
6631: NOT
6632: AND
6633: IFFALSE 6637
// exit ;
6635: GO 6843
// if damageUnits and sciList then
6637: LD_VAR 0 8
6641: PUSH
6642: LD_VAR 0 6
6646: AND
6647: IFFALSE 6663
// ComMoveToArea ( damageUnits , healArea ) ;
6649: LD_VAR 0 8
6653: PPUSH
6654: LD_VAR 0 2
6658: PPUSH
6659: CALL_OW 113
// if unitsToHeal and sciList then
6663: LD_VAR 0 9
6667: PUSH
6668: LD_VAR 0 6
6672: AND
6673: IFFALSE 6684
// ComExitBuilding ( sciList ) ;
6675: LD_VAR 0 6
6679: PPUSH
6680: CALL_OW 122
// if unitsToHeal and sciListOutside then
6684: LD_VAR 0 9
6688: PUSH
6689: LD_VAR 0 7
6693: AND
6694: IFFALSE 6714
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6696: LD_VAR 0 7
6700: PPUSH
6701: LD_VAR 0 9
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: PPUSH
6710: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6714: LD_VAR 0 8
6718: PUSH
6719: LD_INT 0
6721: EQUAL
6722: PUSH
6723: LD_VAR 0 9
6727: PUSH
6728: LD_INT 0
6730: EQUAL
6731: AND
6732: PUSH
6733: LD_VAR 0 7
6737: AND
6738: IFFALSE 6843
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6740: LD_ADDR_VAR 0 10
6744: PUSH
6745: LD_INT 22
6747: PUSH
6748: LD_VAR 0 1
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 21
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 8
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 69
6786: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6787: LD_ADDR_VAR 0 11
6791: PUSH
6792: LD_INT 1
6794: PPUSH
6795: LD_VAR 0 10
6799: PPUSH
6800: CALL_OW 12
6804: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6805: LD_VAR 0 7
6809: PPUSH
6810: LD_INT 3
6812: PUSH
6813: LD_INT 60
6815: PUSH
6816: EMPTY
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PPUSH
6823: CALL_OW 72
6827: PPUSH
6828: LD_VAR 0 10
6832: PUSH
6833: LD_VAR 0 11
6837: ARRAY
6838: PPUSH
6839: CALL_OW 120
// end ; end ;
6843: LD_VAR 0 5
6847: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6852: LD_INT 22
6854: PUSH
6855: LD_VAR 0 1
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 21
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 69
6882: PUSH
6883: LD_VAR 0 3
6887: LESSEQUAL
6888: IFFALSE 6955
// for i = 1 to vehCount do
6890: LD_ADDR_VAR 0 9
6894: PUSH
6895: DOUBLE
6896: LD_INT 1
6898: DEC
6899: ST_TO_ADDR
6900: LD_VAR 0 3
6904: PUSH
6905: FOR_TO
6906: IFFALSE 6953
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6908: LD_VAR 0 2
6912: PPUSH
6913: LD_VAR 0 7
6917: PPUSH
6918: LD_VAR 0 5
6922: PPUSH
6923: LD_VAR 0 6
6927: PPUSH
6928: LD_VAR 0 4
6932: PUSH
6933: LD_INT 1
6935: PPUSH
6936: LD_VAR 0 4
6940: PPUSH
6941: CALL_OW 12
6945: ARRAY
6946: PPUSH
6947: CALL_OW 185
6951: GO 6905
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 8
6959: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
// for i = 1 to medicCount do
6973: LD_ADDR_VAR 0 11
6977: PUSH
6978: DOUBLE
6979: LD_INT 1
6981: DEC
6982: ST_TO_ADDR
6983: LD_VAR 0 4
6987: PUSH
6988: FOR_TO
6989: IFFALSE 7059
// begin uc_side = side ;
6991: LD_ADDR_OWVAR 20
6995: PUSH
6996: LD_VAR 0 1
7000: ST_TO_ADDR
// uc_nation = nation ;
7001: LD_ADDR_OWVAR 21
7005: PUSH
7006: LD_VAR 0 2
7010: ST_TO_ADDR
// InitHC_All ( ) ;
7011: CALL_OW 584
// PrepareHuman ( false , 4 , skil ) ;
7015: LD_INT 0
7017: PPUSH
7018: LD_INT 4
7020: PPUSH
7021: LD_VAR 0 5
7025: PPUSH
7026: CALL_OW 380
// un = CreateHuman ;
7030: LD_ADDR_VAR 0 13
7034: PUSH
7035: CALL_OW 44
7039: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7040: LD_VAR 0 13
7044: PPUSH
7045: LD_VAR 0 6
7049: PPUSH
7050: LD_INT 0
7052: PPUSH
7053: CALL_OW 49
// end ;
7057: GO 6988
7059: POP
7060: POP
// for i = 1 to soldierCount do
7061: LD_ADDR_VAR 0 11
7065: PUSH
7066: DOUBLE
7067: LD_INT 1
7069: DEC
7070: ST_TO_ADDR
7071: LD_VAR 0 3
7075: PUSH
7076: FOR_TO
7077: IFFALSE 7147
// begin uc_side = side ;
7079: LD_ADDR_OWVAR 20
7083: PUSH
7084: LD_VAR 0 1
7088: ST_TO_ADDR
// uc_nation = nation ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_VAR 0 2
7098: ST_TO_ADDR
// InitHC_All ( ) ;
7099: CALL_OW 584
// PrepareHuman ( false , 1 , skil ) ;
7103: LD_INT 0
7105: PPUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_VAR 0 5
7113: PPUSH
7114: CALL_OW 380
// un = CreateHuman ;
7118: LD_ADDR_VAR 0 13
7122: PUSH
7123: CALL_OW 44
7127: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7128: LD_VAR 0 13
7132: PPUSH
7133: LD_VAR 0 6
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7076
7147: POP
7148: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7149: LD_ADDR_VAR 0 16
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 1
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 25
7201: PUSH
7202: LD_INT 9
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7225: LD_ADDR_VAR 0 15
7229: PUSH
7230: LD_INT 22
7232: PUSH
7233: LD_VAR 0 1
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 4
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 69
7260: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7261: LD_VAR 0 15
7265: PPUSH
7266: LD_VAR 0 7
7270: PPUSH
7271: CALL_OW 113
// if strategy = 1 then
7275: LD_VAR 0 9
7279: PUSH
7280: LD_INT 1
7282: EQUAL
7283: IFFALSE 7731
// begin for i in soldiersOK_list do
7285: LD_ADDR_VAR 0 11
7289: PUSH
7290: LD_VAR 0 16
7294: PUSH
7295: FOR_IN
7296: IFFALSE 7360
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7298: LD_VAR 0 11
7302: PPUSH
7303: LD_INT 91
7305: PPUSH
7306: LD_INT 63
7308: PPUSH
7309: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7313: LD_VAR 0 11
7317: PPUSH
7318: LD_INT 101
7320: PPUSH
7321: LD_INT 53
7323: PPUSH
7324: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7328: LD_VAR 0 11
7332: PPUSH
7333: LD_INT 75
7335: PPUSH
7336: LD_INT 23
7338: PPUSH
7339: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7343: LD_VAR 0 11
7347: PPUSH
7348: LD_INT 78
7350: PPUSH
7351: LD_INT 8
7353: PPUSH
7354: CALL_OW 174
// end ;
7358: GO 7295
7360: POP
7361: POP
// wait ( 0 0$30 ) ;
7362: LD_INT 1050
7364: PPUSH
7365: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7369: LD_INT 35
7371: PPUSH
7372: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7376: LD_ADDR_VAR 0 14
7380: PUSH
7381: LD_INT 22
7383: PUSH
7384: LD_VAR 0 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: LD_INT 24
7401: PUSH
7402: LD_INT 550
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 24
7415: PUSH
7416: LD_INT 250
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7437: LD_ADDR_VAR 0 16
7441: PUSH
7442: LD_INT 22
7444: PUSH
7445: LD_VAR 0 1
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 25
7456: PUSH
7457: LD_INT 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 24
7466: PUSH
7467: LD_INT 1000
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: PPUSH
7479: CALL_OW 69
7483: ST_TO_ADDR
// if medicCount then
7484: LD_VAR 0 4
7488: IFFALSE 7528
// begin if damageUnit_list then
7490: LD_VAR 0 14
7494: IFFALSE 7528
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7496: LD_VAR 0 14
7500: PPUSH
7501: LD_VAR 0 7
7505: PPUSH
7506: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_VAR 0 14
7519: PUSH
7520: LD_INT 1
7522: ARRAY
7523: PPUSH
7524: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7528: LD_ADDR_VAR 0 11
7532: PUSH
7533: LD_VAR 0 16
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7715
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7541: LD_ADDR_VAR 0 19
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_VAR 0 8
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 69
7562: PPUSH
7563: LD_VAR 0 11
7567: PPUSH
7568: CALL_OW 74
7572: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7573: LD_ADDR_VAR 0 20
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 2
7592: PUSH
7593: LD_INT 59
7595: PUSH
7596: EMPTY
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 1
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 21
7611: PUSH
7612: LD_INT 2
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: PPUSH
7632: CALL_OW 69
7636: PPUSH
7637: LD_VAR 0 11
7641: PPUSH
7642: CALL_OW 74
7646: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7647: LD_VAR 0 11
7651: PPUSH
7652: LD_VAR 0 19
7656: PPUSH
7657: CALL_OW 296
7661: PUSH
7662: LD_INT 8
7664: PLUS
7665: PUSH
7666: LD_VAR 0 11
7670: PPUSH
7671: LD_VAR 0 20
7675: PPUSH
7676: CALL_OW 296
7680: LESS
7681: IFFALSE 7699
// ComAttackUnit ( i , target1 ) else
7683: LD_VAR 0 11
7687: PPUSH
7688: LD_VAR 0 19
7692: PPUSH
7693: CALL_OW 115
7697: GO 7713
// ComAttackUnit ( i , target2 ) ;
7699: LD_VAR 0 11
7703: PPUSH
7704: LD_VAR 0 20
7708: PPUSH
7709: CALL_OW 115
// end ;
7713: GO 7538
7715: POP
7716: POP
// until not soldiersOK_list and not damageUnit_list ;
7717: LD_VAR 0 16
7721: NOT
7722: PUSH
7723: LD_VAR 0 14
7727: NOT
7728: AND
7729: IFFALSE 7369
// end ; if strategy = 2 then
7731: LD_VAR 0 9
7735: PUSH
7736: LD_INT 2
7738: EQUAL
7739: IFFALSE 8157
// begin for i in soldiersOK_list do
7741: LD_ADDR_VAR 0 11
7745: PUSH
7746: LD_VAR 0 16
7750: PUSH
7751: FOR_IN
7752: IFFALSE 7786
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7754: LD_VAR 0 11
7758: PPUSH
7759: LD_INT 91
7761: PPUSH
7762: LD_INT 63
7764: PPUSH
7765: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7769: LD_VAR 0 11
7773: PPUSH
7774: LD_INT 75
7776: PPUSH
7777: LD_INT 33
7779: PPUSH
7780: CALL_OW 174
// end ;
7784: GO 7751
7786: POP
7787: POP
// wait ( 0 0$10 ) ;
7788: LD_INT 350
7790: PPUSH
7791: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7795: LD_INT 105
7797: PPUSH
7798: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7802: LD_ADDR_VAR 0 14
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: LD_INT 24
7827: PUSH
7828: LD_INT 550
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 24
7841: PUSH
7842: LD_INT 250
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 69
7862: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7863: LD_ADDR_VAR 0 16
7867: PUSH
7868: LD_INT 22
7870: PUSH
7871: LD_VAR 0 1
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 25
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 24
7892: PUSH
7893: LD_INT 1000
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: PPUSH
7905: CALL_OW 69
7909: ST_TO_ADDR
// if medicCount then
7910: LD_VAR 0 4
7914: IFFALSE 7954
// begin if damageUnit_list then
7916: LD_VAR 0 14
7920: IFFALSE 7954
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7922: LD_VAR 0 14
7926: PPUSH
7927: LD_VAR 0 7
7931: PPUSH
7932: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7936: LD_VAR 0 4
7940: PPUSH
7941: LD_VAR 0 14
7945: PUSH
7946: LD_INT 1
7948: ARRAY
7949: PPUSH
7950: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7954: LD_ADDR_VAR 0 11
7958: PUSH
7959: LD_VAR 0 16
7963: PUSH
7964: FOR_IN
7965: IFFALSE 8141
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7967: LD_ADDR_VAR 0 19
7971: PUSH
7972: LD_INT 22
7974: PUSH
7975: LD_VAR 0 8
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PPUSH
7984: CALL_OW 69
7988: PPUSH
7989: LD_VAR 0 11
7993: PPUSH
7994: CALL_OW 74
7998: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7999: LD_ADDR_VAR 0 20
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 8
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: LD_INT 59
8021: PUSH
8022: EMPTY
8023: LIST
8024: PUSH
8025: LD_INT 21
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: LD_INT 21
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: PPUSH
8058: CALL_OW 69
8062: PPUSH
8063: LD_VAR 0 11
8067: PPUSH
8068: CALL_OW 74
8072: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8073: LD_VAR 0 11
8077: PPUSH
8078: LD_VAR 0 19
8082: PPUSH
8083: CALL_OW 296
8087: PUSH
8088: LD_INT 8
8090: PLUS
8091: PUSH
8092: LD_VAR 0 11
8096: PPUSH
8097: LD_VAR 0 20
8101: PPUSH
8102: CALL_OW 296
8106: LESS
8107: IFFALSE 8125
// ComAttackUnit ( i , target1 ) else
8109: LD_VAR 0 11
8113: PPUSH
8114: LD_VAR 0 19
8118: PPUSH
8119: CALL_OW 115
8123: GO 8139
// ComAttackUnit ( i , target2 ) ;
8125: LD_VAR 0 11
8129: PPUSH
8130: LD_VAR 0 20
8134: PPUSH
8135: CALL_OW 115
// end ;
8139: GO 7964
8141: POP
8142: POP
// until not soldiersOK_list and not damageUnit_list ;
8143: LD_VAR 0 16
8147: NOT
8148: PUSH
8149: LD_VAR 0 14
8153: NOT
8154: AND
8155: IFFALSE 7795
// end ; if medic_list then
8157: LD_VAR 0 15
8161: IFFALSE 8301
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8163: LD_ADDR_VAR 0 15
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_VAR 0 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 25
8182: PUSH
8183: LD_INT 4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 50
8192: PUSH
8193: EMPTY
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8206: LD_INT 35
8208: PPUSH
8209: CALL_OW 67
// for i in medic_list do
8213: LD_ADDR_VAR 0 11
8217: PUSH
8218: LD_VAR 0 15
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8292
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8226: LD_VAR 0 11
8230: PPUSH
8231: CALL_OW 314
8235: NOT
8236: PUSH
8237: LD_VAR 0 11
8241: PPUSH
8242: LD_INT 4
8244: PPUSH
8245: CALL_OW 308
8249: NOT
8250: AND
8251: IFFALSE 8267
// ComMoveToArea ( i , RussianAttack ) else
8253: LD_VAR 0 11
8257: PPUSH
8258: LD_INT 4
8260: PPUSH
8261: CALL_OW 113
8265: GO 8290
// if IsInArea ( i , RussianAttack ) then
8267: LD_VAR 0 11
8271: PPUSH
8272: LD_INT 4
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8290
// RemoveUnit ( i ) ;
8281: LD_VAR 0 11
8285: PPUSH
8286: CALL_OW 64
8290: GO 8223
8292: POP
8293: POP
// until not medic_list ;
8294: LD_VAR 0 15
8298: NOT
8299: IFFALSE 8163
// end ; end ; end_of_file
8301: LD_VAR 0 10
8305: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8306: LD_INT 0
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
// InGameOn ;
8313: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8317: LD_ADDR_VAR 0 3
8321: PUSH
8322: LD_EXP 8
8326: PUSH
8327: LD_EXP 9
8331: PUSH
8332: LD_EXP 10
8336: PUSH
8337: LD_EXP 11
8341: PUSH
8342: LD_EXP 12
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8354: LD_ADDR_VAR 0 4
8358: PUSH
8359: LD_INT 46
8361: PUSH
8362: LD_INT 45
8364: PUSH
8365: LD_INT 44
8367: PUSH
8368: LD_INT 43
8370: PUSH
8371: LD_INT 42
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8381: LD_ADDR_VAR 0 5
8385: PUSH
8386: LD_INT 14
8388: PUSH
8389: LD_INT 12
8391: PUSH
8392: LD_INT 10
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 6
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8408: LD_EXP 11
8412: PPUSH
8413: LD_INT 31
8415: PPUSH
8416: LD_INT 59
8418: PPUSH
8419: LD_INT 19
8421: PPUSH
8422: LD_INT 5
8424: PPUSH
8425: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8429: LD_INT 32
8431: PPUSH
8432: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8436: LD_INT 32
8438: PPUSH
8439: LD_INT 51
8441: PPUSH
8442: LD_INT 26
8444: PPUSH
8445: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8449: LD_INT 32
8451: PPUSH
8452: LD_INT 53
8454: PPUSH
8455: LD_INT 23
8457: PPUSH
8458: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8462: LD_INT 32
8464: PPUSH
8465: LD_INT 52
8467: PPUSH
8468: LD_INT 19
8470: PPUSH
8471: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8475: LD_INT 35
8477: PPUSH
8478: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8482: LD_INT 32
8484: PPUSH
8485: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8489: LD_INT 32
8491: PPUSH
8492: CALL_OW 250
8496: PUSH
8497: LD_INT 52
8499: EQUAL
8500: PUSH
8501: LD_INT 32
8503: PPUSH
8504: CALL_OW 251
8508: PUSH
8509: LD_INT 19
8511: EQUAL
8512: AND
8513: IFFALSE 8475
// ComExitVehicle ( JMM ) ;
8515: LD_EXP 1
8519: PPUSH
8520: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8524: LD_EXP 7
8528: PPUSH
8529: LD_EXP 1
8533: PPUSH
8534: CALL_OW 119
// wait ( 0 0$01 ) ;
8538: LD_INT 35
8540: PPUSH
8541: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8545: LD_EXP 1
8549: PPUSH
8550: LD_INT 46
8552: PPUSH
8553: LD_INT 10
8555: PPUSH
8556: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8560: LD_EXP 1
8564: PPUSH
8565: LD_EXP 7
8569: PPUSH
8570: CALL_OW 179
// wait ( 0 0$4 ) ;
8574: LD_INT 140
8576: PPUSH
8577: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8581: LD_EXP 1
8585: PPUSH
8586: LD_STRING D1-JMM-1
8588: PPUSH
8589: CALL_OW 88
// if not dialogue_skipped then
8593: LD_OWVAR 59
8597: NOT
8598: IFFALSE 9255
// begin for i := 1 to gammaSquad do
8600: LD_ADDR_VAR 0 2
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 3
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8677
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8618: LD_VAR 0 3
8622: PUSH
8623: LD_VAR 0 2
8627: ARRAY
8628: PPUSH
8629: LD_VAR 0 4
8633: PUSH
8634: LD_VAR 0 2
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 5
8644: PUSH
8645: LD_VAR 0 2
8649: ARRAY
8650: PPUSH
8651: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8655: LD_VAR 0 3
8659: PUSH
8660: LD_VAR 0 2
8664: ARRAY
8665: PPUSH
8666: LD_EXP 1
8670: PPUSH
8671: CALL_OW 179
// end ;
8675: GO 8615
8677: POP
8678: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8679: LD_EXP 4
8683: PPUSH
8684: LD_INT 41
8686: PPUSH
8687: LD_INT 4
8689: PPUSH
8690: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8694: LD_EXP 4
8698: PPUSH
8699: LD_EXP 1
8703: PPUSH
8704: CALL_OW 179
// if Lisa = false and Bobby then
8708: LD_EXP 4
8712: PUSH
8713: LD_INT 0
8715: EQUAL
8716: PUSH
8717: LD_EXP 2
8721: AND
8722: IFFALSE 8753
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8724: LD_EXP 2
8728: PPUSH
8729: LD_INT 41
8731: PPUSH
8732: LD_INT 4
8734: PPUSH
8735: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8739: LD_EXP 2
8743: PPUSH
8744: LD_EXP 1
8748: PPUSH
8749: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8753: LD_EXP 4
8757: PUSH
8758: LD_INT 0
8760: EQUAL
8761: PUSH
8762: LD_EXP 2
8766: PUSH
8767: LD_INT 0
8769: EQUAL
8770: AND
8771: PUSH
8772: LD_EXP 3
8776: AND
8777: IFFALSE 8808
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8779: LD_EXP 3
8783: PPUSH
8784: LD_INT 41
8786: PPUSH
8787: LD_INT 4
8789: PPUSH
8790: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8794: LD_EXP 3
8798: PPUSH
8799: LD_EXP 1
8803: PPUSH
8804: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8808: LD_EXP 4
8812: PUSH
8813: LD_INT 0
8815: EQUAL
8816: PUSH
8817: LD_EXP 2
8821: PUSH
8822: LD_INT 0
8824: EQUAL
8825: AND
8826: PUSH
8827: LD_EXP 3
8831: PUSH
8832: LD_INT 0
8834: EQUAL
8835: AND
8836: IFFALSE 8867
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8838: LD_EXP 6
8842: PPUSH
8843: LD_INT 41
8845: PPUSH
8846: LD_INT 4
8848: PPUSH
8849: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8853: LD_EXP 6
8857: PPUSH
8858: LD_EXP 1
8862: PPUSH
8863: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8867: LD_EXP 7
8871: PPUSH
8872: LD_STRING D1-Brown-1
8874: PPUSH
8875: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8879: LD_EXP 1
8883: PPUSH
8884: LD_STRING D1-JMM-2
8886: PPUSH
8887: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8891: LD_EXP 7
8895: PPUSH
8896: LD_STRING D1-Brown-2
8898: PPUSH
8899: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8903: LD_EXP 1
8907: PPUSH
8908: LD_EXP 9
8912: PPUSH
8913: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8917: LD_EXP 9
8921: PPUSH
8922: LD_STRING D1-FSol1-2
8924: PPUSH
8925: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8929: LD_EXP 1
8933: PPUSH
8934: LD_EXP 8
8938: PPUSH
8939: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8943: LD_EXP 8
8947: PPUSH
8948: LD_STRING D1-Sol2-2
8950: PPUSH
8951: CALL_OW 88
// if Lisa then
8955: LD_EXP 4
8959: IFFALSE 8999
// begin ComTurnUnit ( JMM , Lisa ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_EXP 4
8970: PPUSH
8971: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8975: LD_EXP 4
8979: PPUSH
8980: LD_STRING D1-Lisa-2
8982: PPUSH
8983: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8987: LD_EXP 1
8991: PPUSH
8992: LD_STRING D1-JMM-3
8994: PPUSH
8995: CALL_OW 88
// end ; if Bobby then
8999: LD_EXP 2
9003: IFFALSE 9043
// begin ComTurnUnit ( JMM , Bobby ) ;
9005: LD_EXP 1
9009: PPUSH
9010: LD_EXP 2
9014: PPUSH
9015: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9019: LD_EXP 2
9023: PPUSH
9024: LD_STRING D1-Bobby-2
9026: PPUSH
9027: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9031: LD_EXP 1
9035: PPUSH
9036: LD_STRING D1-JMM-3
9038: PPUSH
9039: CALL_OW 88
// end ; if Cyrus then
9043: LD_EXP 3
9047: IFFALSE 9087
// begin ComTurnUnit ( JMM , Cyrus ) ;
9049: LD_EXP 1
9053: PPUSH
9054: LD_EXP 3
9058: PPUSH
9059: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9063: LD_EXP 3
9067: PPUSH
9068: LD_STRING D1-Cyrus-2
9070: PPUSH
9071: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9075: LD_EXP 1
9079: PPUSH
9080: LD_STRING D1-JMM-3
9082: PPUSH
9083: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9087: LD_EXP 1
9091: PPUSH
9092: LD_EXP 7
9096: PPUSH
9097: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9101: LD_EXP 1
9105: PPUSH
9106: LD_STRING D1-JMM-3a
9108: PPUSH
9109: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9113: LD_EXP 7
9117: PPUSH
9118: LD_INT 38
9120: PPUSH
9121: LD_INT 5
9123: PPUSH
9124: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9128: LD_EXP 7
9132: PPUSH
9133: LD_EXP 1
9137: PPUSH
9138: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9142: LD_EXP 1
9146: PPUSH
9147: LD_INT 40
9149: PPUSH
9150: LD_INT 7
9152: PPUSH
9153: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_EXP 7
9166: PPUSH
9167: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9171: LD_EXP 7
9175: PPUSH
9176: LD_STRING D1-Brown-3
9178: PPUSH
9179: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9183: LD_EXP 14
9187: PPUSH
9188: LD_STRING D1-Har-3
9190: PPUSH
9191: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9195: LD_EXP 1
9199: PPUSH
9200: LD_STRING D1-JMM-4
9202: PPUSH
9203: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9207: LD_EXP 14
9211: PPUSH
9212: LD_STRING D1-Har-4
9214: PPUSH
9215: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9219: LD_EXP 1
9223: PPUSH
9224: LD_STRING D1-JMM-5
9226: PPUSH
9227: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9231: LD_EXP 14
9235: PPUSH
9236: LD_STRING D1-Har-5
9238: PPUSH
9239: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9243: LD_EXP 1
9247: PPUSH
9248: LD_STRING D1-JMM-6
9250: PPUSH
9251: CALL_OW 88
// end ; InGameOff ;
9255: CALL_OW 9
// PrepareRussianConvoy ;
9259: CALL 3404 0 0
// ChangeMissionObjectives ( M1 ) ;
9263: LD_STRING M1
9265: PPUSH
9266: CALL_OW 337
// SaveForQuickRestart ;
9270: CALL_OW 22
// timerStatus = 1 ;
9274: LD_ADDR_EXP 29
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// startTimer = 1 ;
9282: LD_ADDR_EXP 30
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// bonusAvalaible = 1 ;
9290: LD_ADDR_EXP 44
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9298: LD_INT 105
9300: PPUSH
9301: CALL_OW 67
// DialogueOn ;
9305: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9309: LD_EXP 12
9313: PPUSH
9314: LD_STRING D9-Mech1-1
9316: PPUSH
9317: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9321: LD_EXP 1
9325: PPUSH
9326: LD_STRING D9-JMM-1
9328: PPUSH
9329: CALL_OW 88
// DialogueOff ;
9333: CALL_OW 7
// end ;
9337: LD_VAR 0 1
9341: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9342: LD_INT 47
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 321
9352: PUSH
9353: LD_INT 2
9355: EQUAL
9356: PUSH
9357: LD_EXP 31
9361: NOT
9362: AND
9363: PUSH
9364: LD_INT 22
9366: PUSH
9367: LD_INT 1
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 21
9376: PUSH
9377: LD_INT 3
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 30
9386: PUSH
9387: LD_INT 3
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 57
9396: PUSH
9397: EMPTY
9398: LIST
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 69
9410: AND
9411: IFFALSE 9645
9413: GO 9415
9415: DISABLE
// begin factoryDialog := true ;
9416: LD_ADDR_EXP 31
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// if IsOk ( Campell ) then
9424: LD_EXP 12
9428: PPUSH
9429: CALL_OW 302
9433: IFFALSE 9449
// Say ( Campell , D10-Mech1-1 ) else
9435: LD_EXP 12
9439: PPUSH
9440: LD_STRING D10-Mech1-1
9442: PPUSH
9443: CALL_OW 88
9447: GO 9645
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9449: LD_INT 22
9451: PUSH
9452: LD_INT 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 21
9461: PUSH
9462: LD_INT 1
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 25
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 26
9481: PUSH
9482: LD_INT 1
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: PUSH
9500: LD_EXP 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: DIFF
9508: IFFALSE 9582
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9510: LD_INT 22
9512: PUSH
9513: LD_INT 1
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 21
9522: PUSH
9523: LD_INT 1
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 25
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 26
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: PUSH
9561: LD_EXP 1
9565: PUSH
9566: EMPTY
9567: LIST
9568: DIFF
9569: PPUSH
9570: LD_STRING D10-Mech1-1
9572: PPUSH
9573: LD_STRING D10-Mech1-1
9575: PPUSH
9576: CALL 4598 0 3
9580: GO 9645
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9582: LD_INT 22
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 26
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 1
9619: ARRAY
9620: PPUSH
9621: CALL_OW 69
9625: PUSH
9626: LD_EXP 1
9630: PUSH
9631: EMPTY
9632: LIST
9633: DIFF
9634: PPUSH
9635: LD_STRING D10-Mech1-1
9637: PPUSH
9638: LD_STRING D10-Mech1-1
9640: PPUSH
9641: CALL 4598 0 3
// end ; end ;
9645: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9646: LD_INT 22
9648: PUSH
9649: LD_INT 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 30
9658: PUSH
9659: LD_INT 32
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 69
9674: PUSH
9675: LD_EXP 32
9679: PUSH
9680: LD_INT 0
9682: EQUAL
9683: AND
9684: IFFALSE 9920
9686: GO 9688
9688: DISABLE
// begin if IsOk ( Claptopn ) then
9689: LD_EXP 11
9693: PPUSH
9694: CALL_OW 302
9698: IFFALSE 9714
// Say ( Claptopn , D9b-Eng1-1 ) else
9700: LD_EXP 11
9704: PPUSH
9705: LD_STRING D9b-Eng1-1
9707: PPUSH
9708: CALL_OW 88
9712: GO 9906
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9714: LD_INT 22
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 21
9726: PUSH
9727: LD_INT 1
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 25
9736: PUSH
9737: LD_INT 3
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 26
9746: PUSH
9747: LD_INT 1
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PPUSH
9760: CALL_OW 69
9764: PUSH
9765: LD_EXP 1
9769: PUSH
9770: EMPTY
9771: LIST
9772: DIFF
9773: IFFALSE 9847
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9775: LD_INT 22
9777: PUSH
9778: LD_INT 1
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 21
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 25
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 26
9807: PUSH
9808: LD_INT 1
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 69
9825: PUSH
9826: LD_EXP 1
9830: PUSH
9831: EMPTY
9832: LIST
9833: DIFF
9834: PPUSH
9835: LD_STRING D9b-Eng1-1
9837: PPUSH
9838: LD_STRING D9b-Eng1-11
9840: PPUSH
9841: CALL 4598 0 3
9845: GO 9906
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9847: LD_INT 22
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 21
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 26
9869: PUSH
9870: LD_INT 1
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 69
9886: PUSH
9887: LD_EXP 1
9891: PUSH
9892: EMPTY
9893: LIST
9894: DIFF
9895: PPUSH
9896: LD_STRING D9b-Eng1-1
9898: PPUSH
9899: LD_STRING D9b-Eng1-1
9901: PPUSH
9902: CALL 4598 0 3
// end ; if energyVDialog = 0 then
9906: LD_EXP 33
9910: PUSH
9911: LD_INT 0
9913: EQUAL
9914: IFFALSE 9920
// EnergyDialog ;
9916: CALL 5003 0 0
// end ;
9920: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9921: LD_EXP 34
9925: PUSH
9926: LD_INT 1
9928: EQUAL
9929: PUSH
9930: LD_EXP 35
9934: PUSH
9935: LD_INT 1
9937: EQUAL
9938: AND
9939: IFFALSE 9951
9941: GO 9943
9943: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9944: LD_STRING M1a
9946: PPUSH
9947: CALL_OW 337
9951: END
// every 3 3$0 do
9952: GO 9954
9954: DISABLE
// PrepareFirstAttack ;
9955: CALL 4216 0 0
9959: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9960: LD_INT 22
9962: PUSH
9963: LD_INT 5
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 21
9972: PUSH
9973: LD_INT 1
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 3
9982: PUSH
9983: LD_INT 24
9985: PUSH
9986: LD_INT 250
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 69
10006: PUSH
10007: LD_INT 0
10009: GREATER
10010: PUSH
10011: LD_EXP 23
10015: PUSH
10016: LD_INT 1
10018: EQUAL
10019: AND
10020: IFFALSE 10321
10022: GO 10024
10024: DISABLE
10025: LD_INT 0
10027: PPUSH
// begin firstRussianAttack = 2 ;
10028: LD_ADDR_EXP 23
10032: PUSH
10033: LD_INT 2
10035: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10036: LD_INT 22
10038: PUSH
10039: LD_INT 5
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 21
10048: PUSH
10049: LD_INT 1
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 69
10064: PPUSH
10065: LD_INT 125
10067: PPUSH
10068: LD_INT 98
10070: PPUSH
10071: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10075: LD_INT 22
10077: PUSH
10078: LD_INT 1
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 21
10087: PUSH
10088: LD_INT 1
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: LD_EXP 1
10108: PUSH
10109: LD_EXP 7
10113: PUSH
10114: LD_EXP 4
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: DIFF
10124: PPUSH
10125: LD_STRING DAtt1-Sol1-1
10127: PPUSH
10128: LD_STRING DAtt1-FSol1-1
10130: PPUSH
10131: CALL 4598 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10135: LD_EXP 1
10139: PPUSH
10140: LD_STRING DAtt1-JMM-1
10142: PPUSH
10143: CALL_OW 88
// if Lisa then
10147: LD_EXP 4
10151: IFFALSE 10167
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10153: LD_EXP 4
10157: PPUSH
10158: LD_STRING DAtt1a-Lisa-1
10160: PPUSH
10161: CALL_OW 88
10165: GO 10238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10167: LD_INT 22
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 1
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 26
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PUSH
10207: LD_EXP 1
10211: PUSH
10212: LD_EXP 7
10216: PUSH
10217: LD_EXP 4
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: DIFF
10227: PPUSH
10228: LD_STRING DAtt1a-Sol1-1
10230: PPUSH
10231: LD_STRING DAtt1-FSol1-1
10233: PPUSH
10234: CALL 4598 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10238: LD_EXP 1
10242: PPUSH
10243: LD_STRING DAtt1a-JMM-1
10245: PPUSH
10246: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10250: LD_INT 22
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 26
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 69
10289: PUSH
10290: LD_EXP 1
10294: PUSH
10295: LD_EXP 7
10299: PUSH
10300: LD_EXP 4
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: DIFF
10310: PPUSH
10311: LD_STRING DAtt1b-Sol1-1
10313: PPUSH
10314: LD_STRING DAtt1a-Sol1-1
10316: PPUSH
10317: CALL 4598 0 3
// end ;
10321: PPOPN 1
10323: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10324: LD_EXP 23
10328: PUSH
10329: LD_INT 2
10331: EQUAL
10332: PUSH
10333: LD_INT 5
10335: PPUSH
10336: LD_INT 22
10338: PUSH
10339: LD_INT 5
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 21
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PPUSH
10360: CALL_OW 70
10364: AND
10365: IFFALSE 10423
10367: GO 10369
10369: DISABLE
10370: LD_INT 0
10372: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10373: LD_ADDR_VAR 0 1
10377: PUSH
10378: LD_INT 22
10380: PUSH
10381: LD_INT 5
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 21
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PPUSH
10402: CALL_OW 69
10406: PUSH
10407: FOR_IN
10408: IFFALSE 10421
// RemoveUnit ( i ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL_OW 64
10419: GO 10407
10421: POP
10422: POP
// end ;
10423: PPOPN 1
10425: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10426: LD_INT 22
10428: PUSH
10429: LD_INT 5
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: PPUSH
10439: CALL_OW 69
10443: PUSH
10444: LD_INT 0
10446: EQUAL
10447: PUSH
10448: LD_EXP 23
10452: PUSH
10453: LD_INT 2
10455: EQUAL
10456: AND
10457: IFFALSE 10470
10459: GO 10461
10461: DISABLE
// firstRussianAttack = 3 ;
10462: LD_ADDR_EXP 23
10466: PUSH
10467: LD_INT 3
10469: ST_TO_ADDR
10470: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10471: LD_EXP 28
10475: PUSH
10476: LD_INT 0
10478: EQUAL
10479: IFFALSE 10560
10481: GO 10483
10483: DISABLE
// begin timerStatus = 4 ;
10484: LD_ADDR_EXP 29
10488: PUSH
10489: LD_INT 4
10491: ST_TO_ADDR
// DialogueOn ;
10492: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10496: LD_EXP 13
10500: PPUSH
10501: LD_STRING D2-Don-1
10503: PPUSH
10504: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10508: LD_EXP 1
10512: PPUSH
10513: LD_STRING D2-JMM-1
10515: PPUSH
10516: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10520: LD_EXP 13
10524: PPUSH
10525: LD_STRING D2-Don-2
10527: PPUSH
10528: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10532: LD_EXP 1
10536: PPUSH
10537: LD_STRING D2-JMM-2
10539: PPUSH
10540: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10544: LD_EXP 13
10548: PPUSH
10549: LD_STRING D2-Don-3
10551: PPUSH
10552: CALL_OW 94
// DialogueOff ;
10556: CALL_OW 7
// end ;
10560: END
// every 12 12$0 do var tmp ;
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
// begin PrepareDonaldsonArmy ;
10567: CALL 1187 0 0
// CenterNowOnUnits ( Donaldson ) ;
10571: LD_EXP 13
10575: PPUSH
10576: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10580: LD_INT 22
10582: PUSH
10583: LD_INT 6
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: NOT
10595: IFFALSE 10611
// begin wait ( 3 ) ;
10597: LD_INT 3
10599: PPUSH
10600: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10604: LD_STRING ACH_BASE
10606: PPUSH
10607: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
10611: LD_ADDR_VAR 0 1
10615: PUSH
10616: LD_INT 22
10618: PUSH
10619: LD_INT 4
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 26
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 25
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: PPUSH
10662: CALL_OW 69
10666: PUSH
10667: LD_EXP 5
10671: PUSH
10672: EMPTY
10673: LIST
10674: DIFF
10675: ST_TO_ADDR
// DialogueOn ;
10676: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10680: LD_VAR 0 1
10684: PPUSH
10685: LD_STRING D3-Sol1-1
10687: PPUSH
10688: LD_STRING D3-Sol1-1
10690: PPUSH
10691: CALL 4598 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
10695: LD_INT 22
10697: PUSH
10698: LD_INT 4
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 21
10707: PUSH
10708: LD_INT 1
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: LD_INT 26
10717: PUSH
10718: LD_INT 1
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 25
10727: PUSH
10728: LD_INT 3
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: PPUSH
10741: CALL_OW 69
10745: PPUSH
10746: LD_STRING D3-Sol2-1
10748: PPUSH
10749: LD_STRING D3-Sol2-1
10751: PPUSH
10752: CALL 4598 0 3
// if Frank then
10756: LD_EXP 5
10760: IFFALSE 10774
// Say ( Frank , D3-Frank-1 ) ;
10762: LD_EXP 5
10766: PPUSH
10767: LD_STRING D3-Frank-1
10769: PPUSH
10770: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10774: LD_EXP 13
10778: PPUSH
10779: LD_STRING D3-Don-1
10781: PPUSH
10782: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10786: LD_EXP 13
10790: PPUSH
10791: LD_STRING D3-Don-1a
10793: PPUSH
10794: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10798: LD_EXP 1
10802: PPUSH
10803: LD_STRING D3-JMM-1
10805: PPUSH
10806: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10810: LD_EXP 13
10814: PPUSH
10815: LD_STRING D3-Don-2
10817: PPUSH
10818: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10822: LD_INT 22
10824: PUSH
10825: LD_INT 6
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 21
10834: PUSH
10835: LD_INT 1
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PPUSH
10846: CALL_OW 69
10850: IFFALSE 10988
// begin Say ( JMM , D3-JMM-2 ) ;
10852: LD_EXP 1
10856: PPUSH
10857: LD_STRING D3-JMM-2
10859: PPUSH
10860: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10864: LD_EXP 13
10868: PPUSH
10869: LD_STRING D3-Don-3
10871: PPUSH
10872: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10876: LD_EXP 1
10880: PPUSH
10881: LD_STRING D3-JMM-3
10883: PPUSH
10884: CALL_OW 88
// if IsOK ( Frank ) then
10888: LD_EXP 5
10892: PPUSH
10893: CALL_OW 302
10897: IFFALSE 10911
// Say ( Frank , D3-Frank-3 ) ;
10899: LD_EXP 5
10903: PPUSH
10904: LD_STRING D3-Frank-3
10906: PPUSH
10907: CALL_OW 88
// DialogueOff ;
10911: CALL_OW 7
// if IsOk ( Frank ) then
10915: LD_EXP 5
10919: PPUSH
10920: CALL_OW 302
10924: IFFALSE 10986
// begin SetSide ( Frank , 0 ) ;
10926: LD_EXP 5
10930: PPUSH
10931: LD_INT 0
10933: PPUSH
10934: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10938: LD_EXP 5
10942: PPUSH
10943: LD_INT 12
10945: PPUSH
10946: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10950: LD_EXP 5
10954: PPUSH
10955: LD_STRING 04t_Frank
10957: PPUSH
10958: CALL_OW 38
// wait ( 0 0$3 ) ;
10962: LD_INT 105
10964: PPUSH
10965: CALL_OW 67
// frankScoutBase = 1 ;
10969: LD_ADDR_EXP 25
10973: PUSH
10974: LD_INT 1
10976: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10977: LD_EXP 5
10981: PPUSH
10982: CALL_OW 64
// end ; end else
10986: GO 11075
// begin Say ( JMM , D3-JMM-4 ) ;
10988: LD_EXP 1
10992: PPUSH
10993: LD_STRING D3-JMM-4
10995: PPUSH
10996: CALL_OW 88
// DialogueOff ;
11000: CALL_OW 7
// if IsOk ( Frank ) then
11004: LD_EXP 5
11008: PPUSH
11009: CALL_OW 302
11013: IFFALSE 11075
// begin SetSide ( Frank , 0 ) ;
11015: LD_EXP 5
11019: PPUSH
11020: LD_INT 0
11022: PPUSH
11023: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11027: LD_EXP 5
11031: PPUSH
11032: LD_INT 12
11034: PPUSH
11035: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
11039: LD_EXP 5
11043: PPUSH
11044: LD_STRING 04t_Frank
11046: PPUSH
11047: CALL_OW 38
// wait ( 0 0$3 ) ;
11051: LD_INT 105
11053: PPUSH
11054: CALL_OW 67
// frankScoutBase = 1 ;
11058: LD_ADDR_EXP 25
11062: PUSH
11063: LD_INT 1
11065: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11066: LD_EXP 5
11070: PPUSH
11071: CALL_OW 64
// end ; end ; end ;
11075: PPOPN 1
11077: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11078: LD_EXP 13
11082: PPUSH
11083: CALL_OW 255
11087: PUSH
11088: LD_INT 4
11090: EQUAL
11091: PUSH
11092: LD_EXP 13
11096: PPUSH
11097: CALL_OW 302
11101: AND
11102: IFFALSE 11342
11104: GO 11106
11106: DISABLE
11107: LD_INT 0
11109: PPUSH
11110: PPUSH
// begin wait ( 5 5$00 ) ;
11111: LD_INT 10500
11113: PPUSH
11114: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11118: LD_EXP 13
11122: PPUSH
11123: CALL_OW 255
11127: PUSH
11128: LD_INT 1
11130: EQUAL
11131: PUSH
11132: LD_EXP 13
11136: PPUSH
11137: CALL_OW 301
11141: OR
11142: IFFALSE 11146
// exit ;
11144: GO 11342
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11146: LD_EXP 13
11150: PPUSH
11151: LD_STRING D3b-Don-1
11153: PPUSH
11154: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11158: LD_ADDR_EXP 41
11162: PUSH
11163: LD_INT 1
11165: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11166: LD_ADDR_VAR 0 2
11170: PUSH
11171: LD_INT 22
11173: PUSH
11174: LD_INT 4
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PPUSH
11181: CALL_OW 69
11185: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11186: LD_INT 35
11188: PPUSH
11189: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11193: LD_VAR 0 2
11197: NOT
11198: PUSH
11199: LD_INT 22
11201: PUSH
11202: LD_INT 6
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 101
11211: PUSH
11212: LD_INT 1
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PPUSH
11223: CALL_OW 69
11227: OR
11228: IFFALSE 11186
// if not tmp then
11230: LD_VAR 0 2
11234: NOT
11235: IFFALSE 11239
// exit ;
11237: GO 11342
// for i in tmp do
11239: LD_ADDR_VAR 0 1
11243: PUSH
11244: LD_VAR 0 2
11248: PUSH
11249: FOR_IN
11250: IFFALSE 11269
// ComAgressiveMove ( i , 52 , 64 ) ;
11252: LD_VAR 0 1
11256: PPUSH
11257: LD_INT 52
11259: PPUSH
11260: LD_INT 64
11262: PPUSH
11263: CALL_OW 114
11267: GO 11249
11269: POP
11270: POP
// wait ( 0 0$10 ) ;
11271: LD_INT 350
11273: PPUSH
11274: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11278: LD_ADDR_VAR 0 1
11282: PUSH
11283: LD_INT 22
11285: PUSH
11286: LD_INT 4
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 69
11297: PUSH
11298: LD_EXP 5
11302: DIFF
11303: PUSH
11304: FOR_IN
11305: IFFALSE 11321
// SetSide ( i , 1 ) ;
11307: LD_VAR 0 1
11311: PPUSH
11312: LD_INT 1
11314: PPUSH
11315: CALL_OW 235
11319: GO 11304
11321: POP
11322: POP
// if IsLive ( Donaldson ) then
11323: LD_EXP 13
11327: PPUSH
11328: CALL_OW 300
11332: IFFALSE 11342
// saveDonaldson := 1 ;
11334: LD_ADDR_EXP 24
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// end ;
11342: PPOPN 2
11344: END
// every 0 0$1 trigger not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11345: LD_EXP 24
11349: NOT
11350: PUSH
11351: LD_EXP 41
11355: NOT
11356: AND
11357: PUSH
11358: LD_INT 26
11360: PPUSH
11361: LD_INT 22
11363: PUSH
11364: LD_INT 1
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PPUSH
11371: CALL_OW 70
11375: PUSH
11376: LD_EXP 13
11380: PPUSH
11381: LD_EXP 1
11385: PPUSH
11386: CALL_OW 296
11390: PUSH
11391: LD_INT 6
11393: LESS
11394: OR
11395: AND
11396: IFFALSE 11451
11398: GO 11400
11400: DISABLE
11401: LD_INT 0
11403: PPUSH
// begin saveDonaldson := 1 ;
11404: LD_ADDR_EXP 24
11408: PUSH
11409: LD_INT 1
11411: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11412: LD_ADDR_VAR 0 1
11416: PUSH
11417: LD_INT 22
11419: PUSH
11420: LD_INT 4
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PPUSH
11427: CALL_OW 69
11431: PUSH
11432: FOR_IN
11433: IFFALSE 11449
// SetSide ( i , 1 ) ;
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_INT 1
11442: PPUSH
11443: CALL_OW 235
11447: GO 11432
11449: POP
11450: POP
// end ;
11451: PPOPN 1
11453: END
// every 0 0$1 trigger frankScoutBase do
11454: LD_EXP 25
11458: IFFALSE 11823
11460: GO 11462
11462: DISABLE
// begin wait ( 2 2$30 ) ;
11463: LD_INT 5250
11465: PPUSH
11466: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11470: LD_INT 35
11472: PPUSH
11473: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11477: LD_INT 81
11479: PUSH
11480: LD_INT 4
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: LD_INT 92
11489: PUSH
11490: LD_INT 84
11492: PUSH
11493: LD_INT 28
11495: PUSH
11496: LD_INT 22
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PPUSH
11509: CALL_OW 69
11513: NOT
11514: IFFALSE 11470
// uc_side = 4 ;
11516: LD_ADDR_OWVAR 20
11520: PUSH
11521: LD_INT 4
11523: ST_TO_ADDR
// uc_nation = 1 ;
11524: LD_ADDR_OWVAR 21
11528: PUSH
11529: LD_INT 1
11531: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11532: LD_ADDR_EXP 5
11536: PUSH
11537: LD_STRING 04t_Frank
11539: PPUSH
11540: CALL_OW 34
11544: ST_TO_ADDR
// if not Frank then
11545: LD_EXP 5
11549: NOT
11550: IFFALSE 11554
// exit ;
11552: GO 11823
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11554: LD_EXP 5
11558: PPUSH
11559: LD_INT 13
11561: PPUSH
11562: LD_INT 0
11564: PPUSH
11565: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11569: LD_INT 35
11571: PPUSH
11572: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11576: LD_EXP 1
11580: PPUSH
11581: CALL_OW 310
11585: NOT
11586: PUSH
11587: LD_EXP 1
11591: PPUSH
11592: LD_INT 4
11594: PPUSH
11595: CALL_OW 296
11599: PUSH
11600: LD_INT 20
11602: LESS
11603: AND
11604: IFFALSE 11637
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11606: LD_EXP 5
11610: PPUSH
11611: LD_EXP 1
11615: PPUSH
11616: CALL_OW 250
11620: PPUSH
11621: LD_EXP 1
11625: PPUSH
11626: CALL_OW 251
11630: PPUSH
11631: CALL_OW 111
11635: GO 11652
// ComMoveXY ( Frank , 51 , 15 ) ;
11637: LD_EXP 5
11641: PPUSH
11642: LD_INT 51
11644: PPUSH
11645: LD_INT 15
11647: PPUSH
11648: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11652: LD_EXP 5
11656: PPUSH
11657: LD_EXP 1
11661: PPUSH
11662: CALL_OW 296
11666: PUSH
11667: LD_INT 10
11669: LESS
11670: IFFALSE 11569
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11672: LD_EXP 1
11676: PUSH
11677: LD_EXP 5
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PPUSH
11686: CALL_OW 87
// DialogueOn ;
11690: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11694: LD_EXP 5
11698: PPUSH
11699: LD_STRING D3a-Frank-1
11701: PPUSH
11702: CALL_OW 88
// if Lisa then
11706: LD_EXP 4
11710: IFFALSE 11760
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11712: LD_EXP 4
11716: PPUSH
11717: LD_STRING D3a-Lisa-1
11719: PPUSH
11720: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11724: LD_EXP 5
11728: PPUSH
11729: LD_STRING D3a-Frank-2
11731: PPUSH
11732: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11736: LD_EXP 4
11740: PPUSH
11741: LD_STRING D3a-Lisa-2
11743: PPUSH
11744: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11748: LD_EXP 5
11752: PPUSH
11753: LD_STRING D3a-Frank-3
11755: PPUSH
11756: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11760: LD_EXP 1
11764: PPUSH
11765: LD_STRING D3a-JMM-3
11767: PPUSH
11768: CALL_OW 88
// DialogueOff ;
11772: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11776: LD_EXP 5
11780: PPUSH
11781: LD_INT 1
11783: PPUSH
11784: CALL_OW 235
// InGameOn ;
11788: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11792: LD_INT 1
11794: PPUSH
11795: LD_INT 7
11797: PPUSH
11798: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11802: LD_INT 93
11804: PPUSH
11805: LD_INT 91
11807: PPUSH
11808: CALL_OW 84
// wait ( 0 0$5 ) ;
11812: LD_INT 175
11814: PPUSH
11815: CALL_OW 67
// InGameOff ;
11819: CALL_OW 9
// end ;
11823: END
// every 12 12$0 trigger Difficulty > 1 do
11824: LD_OWVAR 67
11828: PUSH
11829: LD_INT 1
11831: GREATER
11832: IFFALSE 11856
11834: GO 11836
11836: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11837: LD_INT 24
11839: PPUSH
11840: LD_INT 24
11842: PPUSH
11843: LD_INT 1
11845: PPUSH
11846: LD_INT 1
11848: PPUSH
11849: LD_INT 53
11851: PPUSH
11852: CALL_OW 185
11856: END
// every 18 18$0 do
11857: GO 11859
11859: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11860: LD_EXP 14
11864: PPUSH
11865: LD_STRING D4-Har-1
11867: PPUSH
11868: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11872: LD_EXP 1
11876: PPUSH
11877: LD_STRING D4-JMM-1
11879: PPUSH
11880: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11884: LD_EXP 14
11888: PPUSH
11889: LD_STRING D4-Har-2
11891: PPUSH
11892: CALL_OW 94
// case Query ( Q1 ) of 1 :
11896: LD_STRING Q1
11898: PPUSH
11899: CALL_OW 97
11903: PUSH
11904: LD_INT 1
11906: DOUBLE
11907: EQUAL
11908: IFTRUE 11912
11910: GO 11971
11912: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11913: LD_EXP 1
11917: PPUSH
11918: LD_STRING D5-JMM-1
11920: PPUSH
11921: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11925: LD_EXP 14
11929: PPUSH
11930: LD_STRING D5-Har-1
11932: PPUSH
11933: CALL_OW 94
// timeToSupport = 10 10$0 ;
11937: LD_ADDR_EXP 28
11941: PUSH
11942: LD_INT 21000
11944: ST_TO_ADDR
// timerStatus = 2 ;
11945: LD_ADDR_EXP 29
11949: PUSH
11950: LD_INT 2
11952: ST_TO_ADDR
// startTimer = 1 ;
11953: LD_ADDR_EXP 30
11957: PUSH
11958: LD_INT 1
11960: ST_TO_ADDR
// harrAnswer = 1 ;
11961: LD_ADDR_EXP 26
11965: PUSH
11966: LD_INT 1
11968: ST_TO_ADDR
// end ; 2 :
11969: GO 12106
11971: LD_INT 2
11973: DOUBLE
11974: EQUAL
11975: IFTRUE 11979
11977: GO 12038
11979: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11980: LD_EXP 1
11984: PPUSH
11985: LD_STRING D5-JMM-2
11987: PPUSH
11988: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11992: LD_EXP 14
11996: PPUSH
11997: LD_STRING D5-Har-2
11999: PPUSH
12000: CALL_OW 94
// timeToSupport = 5 5$0 ;
12004: LD_ADDR_EXP 28
12008: PUSH
12009: LD_INT 10500
12011: ST_TO_ADDR
// timerStatus = 2 ;
12012: LD_ADDR_EXP 29
12016: PUSH
12017: LD_INT 2
12019: ST_TO_ADDR
// startTimer = 1 ;
12020: LD_ADDR_EXP 30
12024: PUSH
12025: LD_INT 1
12027: ST_TO_ADDR
// harrAnswer = 2 ;
12028: LD_ADDR_EXP 26
12032: PUSH
12033: LD_INT 2
12035: ST_TO_ADDR
// end ; 3 :
12036: GO 12106
12038: LD_INT 3
12040: DOUBLE
12041: EQUAL
12042: IFTRUE 12046
12044: GO 12105
12046: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12047: LD_EXP 1
12051: PPUSH
12052: LD_STRING D5-JMM-3
12054: PPUSH
12055: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12059: LD_EXP 14
12063: PPUSH
12064: LD_STRING D5-Har-3
12066: PPUSH
12067: CALL_OW 94
// timeToSupport = 5 5$0 ;
12071: LD_ADDR_EXP 28
12075: PUSH
12076: LD_INT 10500
12078: ST_TO_ADDR
// timerStatus = 2 ;
12079: LD_ADDR_EXP 29
12083: PUSH
12084: LD_INT 2
12086: ST_TO_ADDR
// startTimer = 1 ;
12087: LD_ADDR_EXP 30
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// harrAnswer = 3 ;
12095: LD_ADDR_EXP 26
12099: PUSH
12100: LD_INT 3
12102: ST_TO_ADDR
// end ; end ;
12103: GO 12106
12105: POP
// end ;
12106: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12107: LD_EXP 29
12111: PUSH
12112: LD_INT 2
12114: EQUAL
12115: PUSH
12116: LD_EXP 28
12120: PUSH
12121: LD_INT 0
12123: EQUAL
12124: AND
12125: IFFALSE 12414
12127: GO 12129
12129: DISABLE
// begin timerStatus = 4 ;
12130: LD_ADDR_EXP 29
12134: PUSH
12135: LD_INT 4
12137: ST_TO_ADDR
// if harrAnswer = 1 then
12138: LD_EXP 26
12142: PUSH
12143: LD_INT 1
12145: EQUAL
12146: IFFALSE 12230
// begin PrepareHarrisonSupport ( 3 ) ;
12148: LD_INT 3
12150: PPUSH
12151: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12155: LD_INT 2100
12157: PPUSH
12158: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12162: LD_EXP 14
12166: PPUSH
12167: LD_STRING D7-Har-1
12169: PPUSH
12170: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12174: LD_STRING M2
12176: PPUSH
12177: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12181: LD_ADDR_EXP 27
12185: PUSH
12186: LD_INT 31500
12188: PUSH
12189: LD_INT 10500
12191: PUSH
12192: LD_INT 8400
12194: PUSH
12195: LD_INT 6300
12197: PUSH
12198: LD_INT 6300
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: LD_OWVAR 67
12211: ARRAY
12212: PLUS
12213: ST_TO_ADDR
// startTimer = 1 ;
12214: LD_ADDR_EXP 30
12218: PUSH
12219: LD_INT 1
12221: ST_TO_ADDR
// timerStatus = 3 ;
12222: LD_ADDR_EXP 29
12226: PUSH
12227: LD_INT 3
12229: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12230: LD_EXP 26
12234: PUSH
12235: LD_INT 2
12237: EQUAL
12238: IFFALSE 12322
// begin PrepareHarrisonSupport ( 4 ) ;
12240: LD_INT 4
12242: PPUSH
12243: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12247: LD_INT 2100
12249: PPUSH
12250: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12254: LD_EXP 14
12258: PPUSH
12259: LD_STRING D7-Har-1
12261: PPUSH
12262: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12266: LD_STRING M2
12268: PPUSH
12269: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12273: LD_ADDR_EXP 27
12277: PUSH
12278: LD_INT 33600
12280: PUSH
12281: LD_INT 10500
12283: PUSH
12284: LD_INT 8400
12286: PUSH
12287: LD_INT 6300
12289: PUSH
12290: LD_INT 5250
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: PUSH
12299: LD_OWVAR 67
12303: ARRAY
12304: PLUS
12305: ST_TO_ADDR
// startTimer = 1 ;
12306: LD_ADDR_EXP 30
12310: PUSH
12311: LD_INT 1
12313: ST_TO_ADDR
// timerStatus = 3 ;
12314: LD_ADDR_EXP 29
12318: PUSH
12319: LD_INT 3
12321: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12322: LD_EXP 26
12326: PUSH
12327: LD_INT 3
12329: EQUAL
12330: IFFALSE 12414
// begin PrepareHarrisonSupport ( 5 ) ;
12332: LD_INT 5
12334: PPUSH
12335: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12339: LD_INT 2100
12341: PPUSH
12342: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12346: LD_EXP 14
12350: PPUSH
12351: LD_STRING D7-Har-1
12353: PPUSH
12354: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12358: LD_STRING M2
12360: PPUSH
12361: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12365: LD_ADDR_EXP 27
12369: PUSH
12370: LD_INT 35700
12372: PUSH
12373: LD_INT 10500
12375: PUSH
12376: LD_INT 6300
12378: PUSH
12379: LD_INT 4200
12381: PUSH
12382: LD_INT 3150
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: LD_OWVAR 67
12395: ARRAY
12396: PLUS
12397: ST_TO_ADDR
// startTimer = 1 ;
12398: LD_ADDR_EXP 30
12402: PUSH
12403: LD_INT 1
12405: ST_TO_ADDR
// timerStatus = 3 ;
12406: LD_ADDR_EXP 29
12410: PUSH
12411: LD_INT 3
12413: ST_TO_ADDR
// end ; end ;
12414: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12415: LD_EXP 27
12419: PUSH
12420: LD_INT 8400
12422: LESSEQUAL
12423: PUSH
12424: LD_EXP 29
12428: PUSH
12429: LD_INT 3
12431: EQUAL
12432: AND
12433: IFFALSE 12465
12435: GO 12437
12437: DISABLE
// begin DialogueOn ;
12438: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12442: LD_EXP 14
12446: PPUSH
12447: LD_STRING D7a-Har-1
12449: PPUSH
12450: CALL_OW 94
// DialogueOff ;
12454: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12458: LD_STRING M2a
12460: PPUSH
12461: CALL_OW 337
// end ;
12465: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12466: LD_EXP 27
12470: PUSH
12471: LD_INT 0
12473: LESSEQUAL
12474: PUSH
12475: LD_EXP 29
12479: PUSH
12480: LD_INT 3
12482: EQUAL
12483: AND
12484: PUSH
12485: LD_EXP 40
12489: NOT
12490: AND
12491: IFFALSE 12630
12493: GO 12495
12495: DISABLE
12496: LD_INT 0
12498: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12499: LD_ADDR_VAR 0 1
12503: PUSH
12504: LD_INT 22
12506: PUSH
12507: LD_INT 1
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: PUSH
12519: LD_EXP 1
12523: PUSH
12524: EMPTY
12525: LIST
12526: DIFF
12527: ST_TO_ADDR
// saveDonaldson = 2 ;
12528: LD_ADDR_EXP 24
12532: PUSH
12533: LD_INT 2
12535: ST_TO_ADDR
// DialogueOn ;
12536: CALL_OW 6
// if IsOk ( Donaldson ) then
12540: LD_EXP 13
12544: PPUSH
12545: CALL_OW 302
12549: IFFALSE 12565
// SayRadio ( Harisson , D8-Har-1 ) else
12551: LD_EXP 14
12555: PPUSH
12556: LD_STRING D8-Har-1
12558: PPUSH
12559: CALL_OW 94
12563: GO 12577
// SayRadio ( Harisson , D8-Har-1a ) ;
12565: LD_EXP 14
12569: PPUSH
12570: LD_STRING D8-Har-1a
12572: PPUSH
12573: CALL_OW 94
// DialogueOff ;
12577: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12581: LD_VAR 0 1
12585: PPUSH
12586: LD_INT 4
12588: PPUSH
12589: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12593: LD_VAR 0 1
12597: PPUSH
12598: LD_INT 88
12600: PPUSH
12601: LD_INT 89
12603: PPUSH
12604: CALL_OW 114
// honor = 0 ;
12608: LD_ADDR_EXP 39
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12616: LD_INT 350
12618: PPUSH
12619: CALL_OW 67
// YouLost ( LostCommand ) ;
12623: LD_STRING LostCommand
12625: PPUSH
12626: CALL_OW 104
// end ;
12630: PPOPN 1
12632: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12633: LD_INT 22
12635: PUSH
12636: LD_INT 6
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 21
12645: PUSH
12646: LD_INT 1
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PPUSH
12657: CALL_OW 69
12661: PUSH
12662: LD_INT 0
12664: EQUAL
12665: PUSH
12666: LD_EXP 20
12670: PUSH
12671: LD_INT 0
12673: EQUAL
12674: AND
12675: PUSH
12676: LD_EXP 44
12680: PUSH
12681: LD_INT 1
12683: EQUAL
12684: AND
12685: IFFALSE 12779
12687: GO 12689
12689: DISABLE
12690: LD_INT 0
12692: PPUSH
12693: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12694: LD_ADDR_VAR 0 2
12698: PUSH
12699: LD_INT 22
12701: PUSH
12702: LD_INT 1
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 21
12711: PUSH
12712: LD_INT 1
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 23
12721: PUSH
12722: LD_INT 1
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: PPUSH
12734: CALL_OW 69
12738: ST_TO_ADDR
// for i in tmp do
12739: LD_ADDR_VAR 0 1
12743: PUSH
12744: LD_VAR 0 2
12748: PUSH
12749: FOR_IN
12750: IFFALSE 12777
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12752: LD_VAR 0 1
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: LD_INT 4
12762: PPUSH
12763: CALL_OW 12
12767: PPUSH
12768: LD_INT 500
12770: PPUSH
12771: CALL_OW 492
12775: GO 12749
12777: POP
12778: POP
// end ; end_of_file
12779: PPOPN 2
12781: END
// every 0 0$1 trigger AIEnable do
12782: LD_EXP 37
12786: IFFALSE 12880
12788: GO 12790
12790: DISABLE
// begin enable ;
12791: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12792: LD_INT 3
12794: PPUSH
12795: LD_INT 21
12797: PPUSH
12798: LD_INT 7
12800: PPUSH
12801: CALL 6030 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12805: LD_INT 3
12807: PPUSH
12808: LD_INT 8
12810: PPUSH
12811: LD_INT 7
12813: PPUSH
12814: LD_INT 1
12816: PPUSH
12817: CALL 6334 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12821: LD_EXP 20
12825: PUSH
12826: LD_INT 2
12828: EQUAL
12829: PUSH
12830: LD_INT 22
12832: PUSH
12833: LD_INT 6
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PPUSH
12840: CALL_OW 69
12844: AND
12845: IFFALSE 12880
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12847: LD_INT 6
12849: PPUSH
12850: LD_EXP 21
12854: PPUSH
12855: LD_INT 6
12857: PPUSH
12858: CALL 6030 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12862: LD_INT 6
12864: PPUSH
12865: LD_INT 9
12867: PPUSH
12868: LD_INT 6
12870: PPUSH
12871: LD_EXP 22
12875: PPUSH
12876: CALL 6334 0 4
// end ; end ;
12880: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12881: LD_EXP 15
12885: PPUSH
12886: CALL_OW 310
12890: NOT
12891: PUSH
12892: LD_INT 21
12894: PPUSH
12895: CALL_OW 302
12899: AND
12900: PUSH
12901: LD_INT 21
12903: PPUSH
12904: CALL_OW 255
12908: PUSH
12909: LD_INT 3
12911: EQUAL
12912: AND
12913: IFFALSE 12930
12915: GO 12917
12917: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12918: LD_EXP 15
12922: PPUSH
12923: LD_INT 21
12925: PPUSH
12926: CALL_OW 120
12930: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12931: LD_INT 22
12933: PUSH
12934: LD_INT 3
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 21
12943: PUSH
12944: LD_INT 2
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 55
12953: PUSH
12954: EMPTY
12955: LIST
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: LIST
12961: PPUSH
12962: CALL_OW 69
12966: PUSH
12967: LD_INT 0
12969: EQUAL
12970: PUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 255
12978: PUSH
12979: LD_INT 3
12981: EQUAL
12982: AND
12983: PUSH
12984: LD_INT 21
12986: PPUSH
12987: CALL_OW 302
12991: AND
12992: PUSH
12993: LD_INT 21
12995: PPUSH
12996: CALL_OW 255
13000: PUSH
13001: LD_INT 3
13003: EQUAL
13004: AND
13005: PUSH
13006: LD_INT 21
13008: PPUSH
13009: CALL_OW 302
13013: AND
13014: IFFALSE 13226
13016: GO 13018
13018: DISABLE
// begin enable ;
13019: ENABLE
// if Difficulty = 1 then
13020: LD_OWVAR 67
13024: PUSH
13025: LD_INT 1
13027: EQUAL
13028: IFFALSE 13072
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
13030: LD_INT 3
13032: PPUSH
13033: LD_INT 24
13035: PPUSH
13036: LD_OWVAR 67
13040: PUSH
13041: LD_INT 2
13043: PLUS
13044: PPUSH
13045: LD_INT 42
13047: PUSH
13048: LD_INT 44
13050: PUSH
13051: LD_INT 43
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: PPUSH
13059: LD_INT 1
13061: PPUSH
13062: LD_INT 1
13064: PPUSH
13065: LD_INT 21
13067: PPUSH
13068: CALL 6848 0 7
// if Difficulty = 2 then
13072: LD_OWVAR 67
13076: PUSH
13077: LD_INT 2
13079: EQUAL
13080: IFFALSE 13147
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13082: LD_INT 3
13084: PPUSH
13085: LD_INT 24
13087: PPUSH
13088: LD_OWVAR 67
13092: PUSH
13093: LD_INT 2
13095: PLUS
13096: PPUSH
13097: LD_INT 44
13099: PUSH
13100: LD_INT 44
13102: PUSH
13103: LD_INT 43
13105: PUSH
13106: LD_INT 43
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: PPUSH
13115: LD_INT 1
13117: PPUSH
13118: LD_INT 1
13120: PPUSH
13121: LD_INT 21
13123: PUSH
13124: LD_INT 22
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 1
13133: PPUSH
13134: LD_INT 2
13136: PPUSH
13137: CALL_OW 12
13141: ARRAY
13142: PPUSH
13143: CALL 6848 0 7
// if Difficulty >= 3 then
13147: LD_OWVAR 67
13151: PUSH
13152: LD_INT 3
13154: GREATEREQUAL
13155: IFFALSE 13226
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13157: LD_INT 3
13159: PPUSH
13160: LD_INT 24
13162: PPUSH
13163: LD_OWVAR 67
13167: PUSH
13168: LD_INT 2
13170: PPUSH
13171: LD_INT 3
13173: PPUSH
13174: CALL_OW 12
13178: PLUS
13179: PPUSH
13180: LD_INT 44
13182: PUSH
13183: LD_INT 44
13185: PUSH
13186: LD_INT 43
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: PPUSH
13194: LD_INT 1
13196: PPUSH
13197: LD_INT 1
13199: PPUSH
13200: LD_INT 22
13202: PUSH
13203: LD_INT 23
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 1
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: CALL_OW 12
13220: ARRAY
13221: PPUSH
13222: CALL 6848 0 7
// end ;
13226: END
// every 0 0$1 do
13227: GO 13229
13229: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13230: LD_INT 3
13232: PPUSH
13233: LD_INT 1
13235: PPUSH
13236: LD_INT 3
13238: PPUSH
13239: CALL 5951 0 3
13243: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13244: LD_EXP 20
13248: PUSH
13249: LD_INT 1
13251: EQUAL
13252: IFFALSE 13399
13254: GO 13256
13256: DISABLE
13257: LD_INT 0
13259: PPUSH
13260: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13261: LD_ADDR_VAR 0 2
13265: PUSH
13266: LD_INT 22
13268: PUSH
13269: LD_INT 6
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 21
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 34
13288: PUSH
13289: LD_INT 51
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: LIST
13300: PPUSH
13301: CALL_OW 69
13305: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13306: LD_VAR 0 2
13310: PUSH
13311: LD_INT 1
13313: ARRAY
13314: PPUSH
13315: LD_EXP 21
13319: PPUSH
13320: CALL_OW 250
13324: PUSH
13325: LD_INT 5
13327: MINUS
13328: PPUSH
13329: LD_EXP 21
13333: PPUSH
13334: CALL_OW 251
13338: PUSH
13339: LD_INT 5
13341: MINUS
13342: PPUSH
13343: CALL_OW 111
// wait ( 0 0$5 ) ;
13347: LD_INT 175
13349: PPUSH
13350: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13354: LD_VAR 0 2
13358: PUSH
13359: LD_INT 1
13361: ARRAY
13362: PPUSH
13363: LD_INT 41
13365: PPUSH
13366: LD_INT 52
13368: PPUSH
13369: CALL_OW 177
// wait ( 0 0$40 ) ;
13373: LD_INT 1400
13375: PPUSH
13376: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13380: LD_VAR 0 2
13384: PUSH
13385: LD_INT 1
13387: ARRAY
13388: PPUSH
13389: LD_INT 41
13391: PPUSH
13392: LD_INT 44
13394: PPUSH
13395: CALL_OW 111
// end ;
13399: PPOPN 2
13401: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13402: LD_EXP 21
13406: PPUSH
13407: CALL_OW 274
13411: PPUSH
13412: LD_INT 1
13414: PPUSH
13415: CALL_OW 275
13419: PUSH
13420: LD_INT 100
13422: GREATEREQUAL
13423: IFFALSE 13651
13425: GO 13427
13427: DISABLE
13428: LD_INT 0
13430: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13431: LD_ADDR_VAR 0 1
13435: PUSH
13436: LD_INT 22
13438: PUSH
13439: LD_INT 6
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 21
13448: PUSH
13449: LD_INT 1
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 25
13458: PUSH
13459: LD_INT 2
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: LIST
13470: PPUSH
13471: CALL_OW 69
13475: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13476: LD_VAR 0 1
13480: PUSH
13481: LD_INT 1
13483: ARRAY
13484: PPUSH
13485: LD_INT 4
13487: PPUSH
13488: LD_INT 39
13490: PPUSH
13491: LD_INT 37
13493: PPUSH
13494: LD_INT 3
13496: PPUSH
13497: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13501: LD_VAR 0 1
13505: PUSH
13506: LD_INT 1
13508: ARRAY
13509: PPUSH
13510: LD_INT 29
13512: PPUSH
13513: LD_INT 42
13515: PPUSH
13516: LD_INT 54
13518: PPUSH
13519: LD_INT 3
13521: PPUSH
13522: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13526: LD_VAR 0 1
13530: PUSH
13531: LD_INT 1
13533: ARRAY
13534: PPUSH
13535: LD_INT 6
13537: PPUSH
13538: LD_INT 38
13540: PPUSH
13541: LD_INT 48
13543: PPUSH
13544: LD_INT 0
13546: PPUSH
13547: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13551: LD_VAR 0 1
13555: PUSH
13556: LD_INT 1
13558: ARRAY
13559: PPUSH
13560: LD_INT 2
13562: PPUSH
13563: LD_INT 32
13565: PPUSH
13566: LD_INT 38
13568: PPUSH
13569: LD_INT 2
13571: PPUSH
13572: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13576: LD_VAR 0 1
13580: PUSH
13581: LD_INT 1
13583: ARRAY
13584: PPUSH
13585: LD_INT 26
13587: PPUSH
13588: LD_INT 39
13590: PPUSH
13591: LD_INT 55
13593: PPUSH
13594: LD_INT 3
13596: PPUSH
13597: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13601: LD_VAR 0 1
13605: PUSH
13606: LD_INT 1
13608: ARRAY
13609: PPUSH
13610: LD_INT 32
13612: PPUSH
13613: LD_INT 31
13615: PPUSH
13616: LD_INT 31
13618: PPUSH
13619: LD_INT 3
13621: PPUSH
13622: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13626: LD_VAR 0 1
13630: PUSH
13631: LD_INT 1
13633: ARRAY
13634: PPUSH
13635: LD_INT 31
13637: PPUSH
13638: LD_INT 50
13640: PPUSH
13641: LD_INT 51
13643: PPUSH
13644: LD_INT 4
13646: PPUSH
13647: CALL_OW 205
// end ;
13651: PPOPN 1
13653: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13654: LD_EXP 46
13658: IFFALSE 14223
13660: GO 13662
13662: DISABLE
13663: LD_INT 0
13665: PPUSH
13666: PPUSH
13667: PPUSH
// begin enable ;
13668: ENABLE
// if not ruMobile then
13669: LD_EXP 46
13673: NOT
13674: IFFALSE 13678
// exit ;
13676: GO 14223
// for i in ruMobile do
13678: LD_ADDR_VAR 0 1
13682: PUSH
13683: LD_EXP 46
13687: PUSH
13688: FOR_IN
13689: IFFALSE 14221
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13691: LD_VAR 0 1
13695: PPUSH
13696: CALL_OW 302
13700: NOT
13701: PUSH
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 255
13711: PUSH
13712: LD_INT 3
13714: NONEQUAL
13715: OR
13716: IFFALSE 13736
// begin ruMobile := ruMobile diff i ;
13718: LD_ADDR_EXP 46
13722: PUSH
13723: LD_EXP 46
13727: PUSH
13728: LD_VAR 0 1
13732: DIFF
13733: ST_TO_ADDR
// continue ;
13734: GO 13688
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13736: LD_VAR 0 1
13740: PPUSH
13741: CALL_OW 110
13745: NOT
13746: PUSH
13747: LD_VAR 0 1
13751: PPUSH
13752: CALL_OW 110
13756: PUSH
13757: LD_INT 0
13759: EQUAL
13760: OR
13761: IFFALSE 13876
// begin if GetFuel ( i ) < 50 then
13763: LD_VAR 0 1
13767: PPUSH
13768: CALL_OW 261
13772: PUSH
13773: LD_INT 50
13775: LESS
13776: IFFALSE 13835
// begin ComMoveXY ( i , 106 , 88 ) ;
13778: LD_VAR 0 1
13782: PPUSH
13783: LD_INT 106
13785: PPUSH
13786: LD_INT 88
13788: PPUSH
13789: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13793: LD_INT 35
13795: PPUSH
13796: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13800: LD_VAR 0 1
13804: PPUSH
13805: LD_INT 106
13807: PPUSH
13808: LD_INT 88
13810: PPUSH
13811: CALL_OW 297
13815: PUSH
13816: LD_INT 4
13818: LESS
13819: IFFALSE 13793
// SetFuel ( i , 100 ) ;
13821: LD_VAR 0 1
13825: PPUSH
13826: LD_INT 100
13828: PPUSH
13829: CALL_OW 240
// end else
13833: GO 13876
// if not IsInArea ( i , ruParking ) then
13835: LD_VAR 0 1
13839: PPUSH
13840: LD_INT 25
13842: PPUSH
13843: CALL_OW 308
13847: NOT
13848: IFFALSE 13864
// ComMoveToArea ( i , ruParking ) else
13850: LD_VAR 0 1
13854: PPUSH
13855: LD_INT 25
13857: PPUSH
13858: CALL_OW 113
13862: GO 13876
// SetTag ( i , 1 ) ;
13864: LD_VAR 0 1
13868: PPUSH
13869: LD_INT 1
13871: PPUSH
13872: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13876: LD_VAR 0 1
13880: PPUSH
13881: CALL_OW 110
13885: PUSH
13886: LD_INT 1
13888: EQUAL
13889: IFFALSE 14019
// begin if GetLives ( i ) < 1000 then
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 256
13900: PUSH
13901: LD_INT 1000
13903: LESS
13904: IFFALSE 13996
// begin if not IsDrivenBy ( i ) then
13906: LD_VAR 0 1
13910: PPUSH
13911: CALL_OW 311
13915: NOT
13916: IFFALSE 13920
// continue ;
13918: GO 13688
// mech := IsDrivenBy ( i ) ;
13920: LD_ADDR_VAR 0 2
13924: PUSH
13925: LD_VAR 0 1
13929: PPUSH
13930: CALL_OW 311
13934: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13935: LD_VAR 0 2
13939: PPUSH
13940: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13944: LD_VAR 0 2
13948: PPUSH
13949: LD_VAR 0 1
13953: PPUSH
13954: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13958: LD_INT 35
13960: PPUSH
13961: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13965: LD_VAR 0 1
13969: PPUSH
13970: CALL_OW 256
13974: PUSH
13975: LD_INT 1000
13977: EQUAL
13978: IFFALSE 13958
// ComEnterUnit ( mech , i ) ;
13980: LD_VAR 0 2
13984: PPUSH
13985: LD_VAR 0 1
13989: PPUSH
13990: CALL_OW 120
// end else
13994: GO 14019
// if IsDrivenBy ( i ) then
13996: LD_VAR 0 1
14000: PPUSH
14001: CALL_OW 311
14005: IFFALSE 14019
// SetTag ( i , 2 ) ;
14007: LD_VAR 0 1
14011: PPUSH
14012: LD_INT 2
14014: PPUSH
14015: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
14019: LD_VAR 0 1
14023: PPUSH
14024: CALL_OW 110
14028: PUSH
14029: LD_INT 2
14031: EQUAL
14032: IFFALSE 14219
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14034: LD_ADDR_VAR 0 3
14038: PUSH
14039: LD_INT 24
14041: PPUSH
14042: LD_INT 81
14044: PUSH
14045: LD_INT 3
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PPUSH
14052: CALL_OW 70
14056: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14057: LD_VAR 0 1
14061: PPUSH
14062: CALL_OW 256
14066: PUSH
14067: LD_INT 650
14069: LESS
14070: IFFALSE 14095
// begin ComStop ( i ) ;
14072: LD_VAR 0 1
14076: PPUSH
14077: CALL_OW 141
// SetTag ( i , 0 ) ;
14081: LD_VAR 0 1
14085: PPUSH
14086: LD_INT 0
14088: PPUSH
14089: CALL_OW 109
// continue ;
14093: GO 13688
// end ; if enemy then
14095: LD_VAR 0 3
14099: IFFALSE 14139
// begin if not HasTask ( i ) then
14101: LD_VAR 0 1
14105: PPUSH
14106: CALL_OW 314
14110: NOT
14111: IFFALSE 14137
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14113: LD_VAR 0 1
14117: PPUSH
14118: LD_VAR 0 3
14122: PPUSH
14123: LD_VAR 0 1
14127: PPUSH
14128: CALL_OW 74
14132: PPUSH
14133: CALL_OW 115
// end else
14137: GO 14219
// if ruMobile > 2 then
14139: LD_EXP 46
14143: PUSH
14144: LD_INT 2
14146: GREATER
14147: IFFALSE 14219
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14149: LD_ADDR_VAR 0 3
14153: PUSH
14154: LD_INT 81
14156: PUSH
14157: LD_INT 3
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PPUSH
14164: CALL_OW 69
14168: ST_TO_ADDR
// if enemy then
14169: LD_VAR 0 3
14173: IFFALSE 14219
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
14175: LD_VAR 0 1
14179: PPUSH
14180: LD_INT 95
14182: PUSH
14183: LD_INT 74
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 67
14192: PUSH
14193: LD_INT 59
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PUSH
14200: LD_INT 55
14202: PUSH
14203: LD_INT 41
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: LIST
14214: PPUSH
14215: CALL 79859 0 2
// end ; end ; end ;
14219: GO 13688
14221: POP
14222: POP
// end ; end_of_file
14223: PPOPN 3
14225: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14226: LD_INT 0
14228: PPUSH
14229: PPUSH
14230: PPUSH
14231: PPUSH
14232: PPUSH
14233: PPUSH
14234: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14235: LD_ADDR_VAR 0 3
14239: PUSH
14240: LD_INT 22
14242: PUSH
14243: LD_INT 6
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 21
14252: PUSH
14253: LD_INT 1
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 1
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 54
14275: PUSH
14276: EMPTY
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: PPUSH
14289: CALL_OW 69
14293: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14294: LD_ADDR_VAR 0 7
14298: PUSH
14299: LD_INT 22
14301: PUSH
14302: LD_INT 6
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 21
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 25
14321: PUSH
14322: LD_INT 1
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 54
14331: PUSH
14332: EMPTY
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: PPUSH
14341: CALL_OW 69
14345: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14346: LD_ADDR_VAR 0 4
14350: PUSH
14351: LD_INT 22
14353: PUSH
14354: LD_INT 6
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 21
14363: PUSH
14364: LD_INT 1
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 25
14373: PUSH
14374: LD_INT 2
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: LIST
14385: PPUSH
14386: CALL_OW 69
14390: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14391: LD_ADDR_VAR 0 6
14395: PUSH
14396: LD_INT 22
14398: PUSH
14399: LD_INT 6
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 21
14408: PUSH
14409: LD_INT 1
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 25
14418: PUSH
14419: LD_INT 4
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: PPUSH
14431: CALL_OW 69
14435: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14436: LD_ADDR_VAR 0 8
14440: PUSH
14441: LD_INT 22
14443: PUSH
14444: LD_INT 6
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 21
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 34
14463: PUSH
14464: LD_INT 51
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: LIST
14475: PPUSH
14476: CALL_OW 69
14480: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14481: LD_VAR 0 1
14485: PPUSH
14486: CALL_OW 255
14490: PUSH
14491: LD_INT 6
14493: EQUAL
14494: PUSH
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 266
14504: PUSH
14505: LD_INT 0
14507: EQUAL
14508: AND
14509: IFFALSE 14529
// begin ruPDepot = building ;
14511: LD_ADDR_EXP 21
14515: PUSH
14516: LD_VAR 0 1
14520: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14521: LD_ADDR_EXP 20
14525: PUSH
14526: LD_INT 1
14528: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14529: LD_VAR 0 1
14533: PPUSH
14534: CALL_OW 266
14538: PUSH
14539: LD_INT 4
14541: EQUAL
14542: PUSH
14543: LD_VAR 0 1
14547: PPUSH
14548: CALL_OW 255
14552: PUSH
14553: LD_INT 6
14555: EQUAL
14556: AND
14557: IFFALSE 14590
// for i in tmpSold do
14559: LD_ADDR_VAR 0 2
14563: PUSH
14564: LD_VAR 0 3
14568: PUSH
14569: FOR_IN
14570: IFFALSE 14588
// ComEnterUnit ( i , building ) ;
14572: LD_VAR 0 2
14576: PPUSH
14577: LD_VAR 0 1
14581: PPUSH
14582: CALL_OW 120
14586: GO 14569
14588: POP
14589: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14590: LD_VAR 0 1
14594: PPUSH
14595: CALL_OW 266
14599: PUSH
14600: LD_INT 6
14602: EQUAL
14603: PUSH
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 6
14616: EQUAL
14617: AND
14618: IFFALSE 14676
// begin for i in tmpSci do
14620: LD_ADDR_VAR 0 2
14624: PUSH
14625: LD_VAR 0 6
14629: PUSH
14630: FOR_IN
14631: IFFALSE 14649
// ComEnterUnit ( i , building ) ;
14633: LD_VAR 0 2
14637: PPUSH
14638: LD_VAR 0 1
14642: PPUSH
14643: CALL_OW 120
14647: GO 14630
14649: POP
14650: POP
// ResAllTechs ( 6 , building , 3 ) ;
14651: LD_INT 6
14653: PPUSH
14654: LD_VAR 0 1
14658: PPUSH
14659: LD_INT 3
14661: PPUSH
14662: CALL 5951 0 3
// ruPLab = building ;
14666: LD_ADDR_EXP 22
14670: PUSH
14671: LD_VAR 0 1
14675: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14676: LD_VAR 0 1
14680: PPUSH
14681: CALL_OW 266
14685: PUSH
14686: LD_INT 2
14688: EQUAL
14689: PUSH
14690: LD_VAR 0 1
14694: PPUSH
14695: CALL_OW 255
14699: PUSH
14700: LD_INT 6
14702: EQUAL
14703: AND
14704: IFFALSE 14755
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14706: LD_ADDR_VAR 0 5
14710: PUSH
14711: LD_VAR 0 8
14715: PUSH
14716: LD_INT 1
14718: ARRAY
14719: PPUSH
14720: CALL_OW 313
14724: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14725: LD_VAR 0 5
14729: PPUSH
14730: CALL_OW 121
// wait ( 0 0$1 ) ;
14734: LD_INT 35
14736: PPUSH
14737: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14741: LD_VAR 0 5
14745: PPUSH
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14755: LD_VAR 0 1
14759: PPUSH
14760: CALL_OW 266
14764: PUSH
14765: LD_INT 32
14767: EQUAL
14768: PUSH
14769: LD_VAR 0 1
14773: PPUSH
14774: CALL_OW 255
14778: PUSH
14779: LD_INT 6
14781: EQUAL
14782: AND
14783: IFFALSE 14835
// begin ComPlaceWeapon ( building , 42 ) ;
14785: LD_VAR 0 1
14789: PPUSH
14790: LD_INT 42
14792: PPUSH
14793: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14797: LD_VAR 0 7
14801: PUSH
14802: LD_INT 1
14804: ARRAY
14805: PPUSH
14806: CALL_OW 122
// wait ( 0 0$1 ) ;
14810: LD_INT 35
14812: PPUSH
14813: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14817: LD_VAR 0 7
14821: PUSH
14822: LD_INT 1
14824: ARRAY
14825: PPUSH
14826: LD_VAR 0 1
14830: PPUSH
14831: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 266
14844: PUSH
14845: LD_INT 31
14847: EQUAL
14848: PUSH
14849: LD_VAR 0 1
14853: PPUSH
14854: CALL_OW 255
14858: PUSH
14859: LD_INT 6
14861: EQUAL
14862: AND
14863: IFFALSE 14929
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14865: LD_VAR 0 7
14869: PUSH
14870: LD_INT 2
14872: ARRAY
14873: PPUSH
14874: CALL_OW 122
// wait ( 0 0$1 ) ;
14878: LD_INT 35
14880: PPUSH
14881: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14885: LD_VAR 0 7
14889: PUSH
14890: LD_INT 2
14892: ARRAY
14893: PPUSH
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14903: LD_VAR 0 4
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: PPUSH
14912: LD_EXP 21
14916: PPUSH
14917: CALL_OW 120
// baseReadyToBuild = 2 ;
14921: LD_ADDR_EXP 20
14925: PUSH
14926: LD_INT 2
14928: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14929: LD_VAR 0 1
14933: PPUSH
14934: CALL_OW 266
14938: PUSH
14939: LD_INT 32
14941: EQUAL
14942: PUSH
14943: LD_VAR 0 1
14947: PPUSH
14948: CALL_OW 255
14952: PUSH
14953: LD_INT 1
14955: EQUAL
14956: AND
14957: PUSH
14958: LD_EXP 32
14962: PUSH
14963: LD_INT 0
14965: EQUAL
14966: AND
14967: IFFALSE 15212
// begin bunkerDialog = 1 ;
14969: LD_ADDR_EXP 32
14973: PUSH
14974: LD_INT 1
14976: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14977: LD_EXP 11
14981: PPUSH
14982: CALL_OW 302
14986: IFFALSE 15002
// Say ( Claptopn , D11-Eng1-1 ) else
14988: LD_EXP 11
14992: PPUSH
14993: LD_STRING D11-Eng1-1
14995: PPUSH
14996: CALL_OW 88
15000: GO 15198
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15002: LD_INT 22
15004: PUSH
15005: LD_INT 1
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 21
15014: PUSH
15015: LD_INT 1
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: LD_INT 25
15024: PUSH
15025: LD_INT 3
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 26
15034: PUSH
15035: LD_INT 1
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: PPUSH
15048: CALL_OW 69
15052: PUSH
15053: LD_EXP 1
15057: PUSH
15058: EMPTY
15059: LIST
15060: PUSH
15061: LD_INT 0
15063: GREATER
15064: DIFF
15065: IFFALSE 15139
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15067: LD_INT 22
15069: PUSH
15070: LD_INT 1
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: LD_INT 21
15079: PUSH
15080: LD_INT 1
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 25
15089: PUSH
15090: LD_INT 2
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 26
15099: PUSH
15100: LD_INT 1
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: PPUSH
15113: CALL_OW 69
15117: PUSH
15118: LD_EXP 1
15122: PUSH
15123: EMPTY
15124: LIST
15125: DIFF
15126: PPUSH
15127: LD_STRING D11-Eng1-1
15129: PPUSH
15130: LD_STRING D11-Eng1-1
15132: PPUSH
15133: CALL 4598 0 3
15137: GO 15198
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15139: LD_INT 22
15141: PUSH
15142: LD_INT 1
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 21
15151: PUSH
15152: LD_INT 1
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: LD_INT 26
15161: PUSH
15162: LD_INT 1
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: LIST
15173: PPUSH
15174: CALL_OW 69
15178: PUSH
15179: LD_EXP 1
15183: PUSH
15184: EMPTY
15185: LIST
15186: DIFF
15187: PPUSH
15188: LD_STRING D11-Eng1-1
15190: PPUSH
15191: LD_STRING D11-Eng1-1
15193: PPUSH
15194: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15198: LD_EXP 33
15202: PUSH
15203: LD_INT 0
15205: EQUAL
15206: IFFALSE 15212
// EnergyDialog ;
15208: CALL 5003 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15212: LD_VAR 0 1
15216: PPUSH
15217: CALL_OW 266
15221: PUSH
15222: LD_INT 29
15224: EQUAL
15225: PUSH
15226: LD_VAR 0 1
15230: PPUSH
15231: CALL_OW 255
15235: PUSH
15236: LD_INT 1
15238: EQUAL
15239: AND
15240: IFFALSE 15250
// buildOil = 1 ;
15242: LD_ADDR_EXP 34
15246: PUSH
15247: LD_INT 1
15249: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 266
15259: PUSH
15260: LD_INT 26
15262: EQUAL
15263: PUSH
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 255
15273: PUSH
15274: LD_INT 1
15276: EQUAL
15277: AND
15278: IFFALSE 15288
// buildPower = 1 ;
15280: LD_ADDR_EXP 35
15284: PUSH
15285: LD_INT 1
15287: ST_TO_ADDR
// end ;
15288: PPOPN 8
15290: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15291: LD_VAR 0 1
15295: PPUSH
15296: CALL_OW 266
15300: PUSH
15301: LD_INT 3
15303: EQUAL
15304: PUSH
15305: LD_VAR 0 1
15309: PPUSH
15310: CALL_OW 255
15314: PUSH
15315: LD_INT 1
15317: EQUAL
15318: AND
15319: PUSH
15320: LD_EXP 31
15324: PUSH
15325: LD_INT 0
15327: EQUAL
15328: AND
15329: IFFALSE 15677
// begin factoryDialog = 1 ;
15331: LD_ADDR_EXP 31
15335: PUSH
15336: LD_INT 1
15338: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15339: LD_INT 47
15341: PPUSH
15342: LD_INT 1
15344: PPUSH
15345: CALL_OW 321
15349: PUSH
15350: LD_INT 1
15352: EQUAL
15353: PUSH
15354: LD_INT 45
15356: PPUSH
15357: LD_INT 1
15359: PPUSH
15360: CALL_OW 321
15364: PUSH
15365: LD_INT 1
15367: EQUAL
15368: AND
15369: IFFALSE 15677
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15371: LD_INT 22
15373: PUSH
15374: LD_INT 1
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 21
15383: PUSH
15384: LD_INT 3
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 30
15393: PUSH
15394: LD_INT 3
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 24
15403: PUSH
15404: LD_INT 1000
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: PPUSH
15417: CALL_OW 69
15421: PUSH
15422: LD_INT 1
15424: ARRAY
15425: PPUSH
15426: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15430: LD_EXP 1
15434: PPUSH
15435: LD_STRING D9a-JMM-1
15437: PPUSH
15438: CALL_OW 88
// if IsOK ( Campell ) then
15442: LD_EXP 12
15446: PPUSH
15447: CALL_OW 302
15451: IFFALSE 15467
// Say ( Campell , D9a-Mech1-1 ) else
15453: LD_EXP 12
15457: PPUSH
15458: LD_STRING D9a-Mech1-1
15460: PPUSH
15461: CALL_OW 88
15465: GO 15663
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15467: LD_INT 22
15469: PUSH
15470: LD_INT 1
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 21
15479: PUSH
15480: LD_INT 1
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 25
15489: PUSH
15490: LD_INT 3
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 26
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: PPUSH
15513: CALL_OW 69
15517: PUSH
15518: LD_EXP 1
15522: PUSH
15523: EMPTY
15524: LIST
15525: PUSH
15526: LD_INT 0
15528: GREATER
15529: DIFF
15530: IFFALSE 15604
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15532: LD_INT 22
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 21
15544: PUSH
15545: LD_INT 1
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 25
15554: PUSH
15555: LD_INT 3
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 26
15564: PUSH
15565: LD_INT 1
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 69
15582: PUSH
15583: LD_EXP 1
15587: PUSH
15588: EMPTY
15589: LIST
15590: DIFF
15591: PPUSH
15592: LD_STRING D9a-Mech1-1
15594: PPUSH
15595: LD_STRING D9a-Mech1-1
15597: PPUSH
15598: CALL 4598 0 3
15602: GO 15663
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15604: LD_INT 22
15606: PUSH
15607: LD_INT 1
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 21
15616: PUSH
15617: LD_INT 1
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: LD_INT 26
15626: PUSH
15627: LD_INT 1
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: LIST
15638: PPUSH
15639: CALL_OW 69
15643: PUSH
15644: LD_EXP 1
15648: PUSH
15649: EMPTY
15650: LIST
15651: DIFF
15652: PPUSH
15653: LD_STRING D9a-Mech1-1
15655: PPUSH
15656: LD_STRING D9a-Mech1-1
15658: PPUSH
15659: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15663: LD_EXP 33
15667: PUSH
15668: LD_INT 0
15670: EQUAL
15671: IFFALSE 15677
// EnergyDialog ;
15673: CALL 5003 0 0
// end ; end ; end ;
15677: PPOPN 1
15679: END
// on UnitDestroyed ( unit ) do var mech ;
15680: LD_INT 0
15682: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15683: LD_VAR 0 1
15687: PPUSH
15688: CALL 35541 0 1
// if unit = JMM then
15692: LD_VAR 0 1
15696: PUSH
15697: LD_EXP 1
15701: EQUAL
15702: IFFALSE 15711
// YouLost ( JMM ) ;
15704: LD_STRING JMM
15706: PPUSH
15707: CALL_OW 104
// if unit = ambdept0 then
15711: LD_VAR 0 1
15715: PUSH
15716: LD_INT 4
15718: EQUAL
15719: IFFALSE 15728
// YouLost ( Base ) ;
15721: LD_STRING Base
15723: PPUSH
15724: CALL_OW 104
// if unit in ruMobile then
15728: LD_VAR 0 1
15732: PUSH
15733: LD_EXP 46
15737: IN
15738: IFFALSE 15756
// ruMobile = ruMobile diff ruMobile ;
15740: LD_ADDR_EXP 46
15744: PUSH
15745: LD_EXP 46
15749: PUSH
15750: LD_EXP 46
15754: DIFF
15755: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15756: LD_VAR 0 1
15760: PPUSH
15761: CALL_OW 247
15765: PUSH
15766: LD_INT 1
15768: EQUAL
15769: PUSH
15770: LD_VAR 0 1
15774: PPUSH
15775: CALL_OW 255
15779: PUSH
15780: LD_INT 1
15782: EQUAL
15783: AND
15784: IFFALSE 15800
// lostCounter = lostCounter + 1 ;
15786: LD_ADDR_EXP 38
15790: PUSH
15791: LD_EXP 38
15795: PUSH
15796: LD_INT 1
15798: PLUS
15799: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15800: LD_EXP 43
15804: PUSH
15805: LD_INT 24
15807: PPUSH
15808: CALL_OW 313
15812: PUSH
15813: LD_INT 6
15815: LESS
15816: AND
15817: PUSH
15818: LD_VAR 0 1
15822: PPUSH
15823: CALL_OW 257
15827: PUSH
15828: LD_INT 3
15830: EQUAL
15831: AND
15832: PUSH
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 255
15842: PUSH
15843: LD_INT 3
15845: EQUAL
15846: AND
15847: PUSH
15848: LD_INT 24
15850: PPUSH
15851: CALL_OW 302
15855: AND
15856: PUSH
15857: LD_INT 24
15859: PPUSH
15860: CALL_OW 255
15864: PUSH
15865: LD_INT 3
15867: EQUAL
15868: AND
15869: IFFALSE 15998
// begin ruMech := ruMech - 1 ;
15871: LD_ADDR_EXP 43
15875: PUSH
15876: LD_EXP 43
15880: PUSH
15881: LD_INT 1
15883: MINUS
15884: ST_TO_ADDR
// if ruMech = 0 then
15885: LD_EXP 43
15889: PUSH
15890: LD_INT 0
15892: EQUAL
15893: IFFALSE 15897
// exit ;
15895: GO 15998
// wait ( 0 0$40 ) ;
15897: LD_INT 1400
15899: PPUSH
15900: CALL_OW 67
// uc_side = 3 ;
15904: LD_ADDR_OWVAR 20
15908: PUSH
15909: LD_INT 3
15911: ST_TO_ADDR
// uc_nation = 3 ;
15912: LD_ADDR_OWVAR 21
15916: PUSH
15917: LD_INT 3
15919: ST_TO_ADDR
// hc_gallery :=  ;
15920: LD_ADDR_OWVAR 33
15924: PUSH
15925: LD_STRING 
15927: ST_TO_ADDR
// hc_name :=  ;
15928: LD_ADDR_OWVAR 26
15932: PUSH
15933: LD_STRING 
15935: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15936: LD_INT 0
15938: PPUSH
15939: LD_EXP 16
15943: PPUSH
15944: LD_EXP 17
15948: PPUSH
15949: CALL_OW 12
15953: PPUSH
15954: CALL_OW 383
// mech := CreateHuman ;
15958: LD_ADDR_VAR 0 2
15962: PUSH
15963: CALL_OW 44
15967: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15968: LD_VAR 0 2
15972: PPUSH
15973: LD_INT 124
15975: PPUSH
15976: LD_INT 97
15978: PPUSH
15979: LD_INT 0
15981: PPUSH
15982: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
15986: LD_VAR 0 2
15990: PPUSH
15991: LD_INT 24
15993: PPUSH
15994: CALL_OW 120
// end ; end ;
15998: PPOPN 2
16000: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
16001: LD_INT 0
16003: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
16004: LD_VAR 0 1
16008: PPUSH
16009: LD_VAR 0 2
16013: PPUSH
16014: CALL 35663 0 2
// if GetSide ( vehicle ) = 1 then
16018: LD_VAR 0 1
16022: PPUSH
16023: CALL_OW 255
16027: PUSH
16028: LD_INT 1
16030: EQUAL
16031: IFFALSE 16047
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
16033: LD_ADDR_EXP 42
16037: PUSH
16038: LD_EXP 42
16042: PUSH
16043: LD_INT 1
16045: PLUS
16046: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 255
16056: PUSH
16057: LD_INT 3
16059: EQUAL
16060: PUSH
16061: LD_VAR 0 1
16065: PPUSH
16066: CALL_OW 264
16070: PUSH
16071: LD_INT 42
16073: PUSH
16074: LD_INT 43
16076: PUSH
16077: LD_INT 44
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: LIST
16084: IN
16085: AND
16086: IFFALSE 16104
// ruMobile := ruMobile union vehicle ;
16088: LD_ADDR_EXP 46
16092: PUSH
16093: LD_EXP 46
16097: PUSH
16098: LD_VAR 0 1
16102: UNION
16103: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16104: LD_VAR 0 1
16108: PPUSH
16109: CALL_OW 264
16113: PUSH
16114: LD_INT 53
16116: EQUAL
16117: IFFALSE 16253
// begin uc_side = 3 ;
16119: LD_ADDR_OWVAR 20
16123: PUSH
16124: LD_INT 3
16126: ST_TO_ADDR
// uc_nation = 3 ;
16127: LD_ADDR_OWVAR 21
16131: PUSH
16132: LD_INT 3
16134: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16135: LD_INT 0
16137: PPUSH
16138: LD_EXP 17
16142: PPUSH
16143: CALL_OW 383
// driver := CreateHuman ;
16147: LD_ADDR_VAR 0 3
16151: PUSH
16152: CALL_OW 44
16156: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16157: LD_VAR 0 3
16161: PPUSH
16162: LD_VAR 0 2
16166: PPUSH
16167: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16171: LD_VAR 0 1
16175: PPUSH
16176: LD_INT 21
16178: PPUSH
16179: CALL 5219 0 2
// repeat wait ( 0 0$1 ) ;
16183: LD_INT 35
16185: PPUSH
16186: CALL_OW 67
// until not HasTask ( vehicle ) ;
16190: LD_VAR 0 1
16194: PPUSH
16195: CALL_OW 314
16199: NOT
16200: IFFALSE 16183
// driver := IsDrivenBy ( vehicle ) ;
16202: LD_ADDR_VAR 0 3
16206: PUSH
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL_OW 311
16216: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16217: LD_VAR 0 3
16221: PPUSH
16222: LD_INT 104
16224: PPUSH
16225: LD_INT 73
16227: PPUSH
16228: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16232: LD_VAR 0 3
16236: PPUSH
16237: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16241: LD_VAR 0 3
16245: PPUSH
16246: LD_INT 24
16248: PPUSH
16249: CALL_OW 180
// end ; end ;
16253: PPOPN 3
16255: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 255
16265: PUSH
16266: LD_INT 3
16268: EQUAL
16269: PUSH
16270: LD_VAR 0 1
16274: PPUSH
16275: CALL_OW 247
16279: PUSH
16280: LD_INT 2
16282: EQUAL
16283: AND
16284: PUSH
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 264
16294: PUSH
16295: LD_INT 42
16297: PUSH
16298: LD_INT 43
16300: PUSH
16301: LD_INT 44
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: LIST
16308: IN
16309: AND
16310: IFFALSE 16359
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16312: LD_INT 24
16314: PPUSH
16315: LD_VAR 0 1
16319: PPUSH
16320: CALL_OW 265
16324: PPUSH
16325: LD_VAR 0 1
16329: PPUSH
16330: CALL_OW 262
16334: PPUSH
16335: LD_VAR 0 1
16339: PPUSH
16340: CALL_OW 263
16344: PPUSH
16345: LD_VAR 0 1
16349: PPUSH
16350: CALL_OW 264
16354: PPUSH
16355: CALL_OW 185
// end ;
16359: PPOPN 1
16361: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16362: LD_VAR 0 1
16366: PPUSH
16367: CALL_OW 255
16371: PUSH
16372: LD_INT 3
16374: EQUAL
16375: PUSH
16376: LD_VAR 0 2
16380: PPUSH
16381: CALL_OW 255
16385: PUSH
16386: LD_INT 3
16388: EQUAL
16389: AND
16390: PUSH
16391: LD_INT 24
16393: PPUSH
16394: CALL_OW 302
16398: AND
16399: PUSH
16400: LD_VAR 0 1
16404: PPUSH
16405: CALL_OW 302
16409: NOT
16410: AND
16411: IFFALSE 16425
// ComEnterUnit ( human , rubfact0 ) ;
16413: LD_VAR 0 2
16417: PPUSH
16418: LD_INT 24
16420: PPUSH
16421: CALL_OW 120
// end ;
16425: PPOPN 2
16427: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16428: LD_VAR 0 1
16432: PUSH
16433: LD_INT 24
16435: EQUAL
16436: PUSH
16437: LD_VAR 0 2
16441: PPUSH
16442: CALL_OW 256
16446: PUSH
16447: LD_INT 1000
16449: LESS
16450: AND
16451: IFFALSE 16465
// SetLives ( un , 1000 ) ;
16453: LD_VAR 0 2
16457: PPUSH
16458: LD_INT 1000
16460: PPUSH
16461: CALL_OW 234
// end ;
16465: PPOPN 2
16467: END
// on Command ( comandid ) do var i , j , tmp ;
16468: LD_INT 0
16470: PPUSH
16471: PPUSH
16472: PPUSH
// begin SOS_Command ( comandid ) ;
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL 35647 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16482: LD_INT 22
16484: PUSH
16485: LD_INT 4
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PPUSH
16492: CALL_OW 69
16496: NOT
16497: IFFALSE 16501
// exit ;
16499: GO 16666
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16501: LD_ADDR_VAR 0 2
16505: PUSH
16506: LD_INT 22
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 2
16518: PUSH
16519: LD_INT 21
16521: PUSH
16522: LD_INT 1
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 21
16531: PUSH
16532: LD_INT 2
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PPUSH
16548: CALL_OW 69
16552: PUSH
16553: FOR_IN
16554: IFFALSE 16664
// begin if GetTaskList ( i ) > 0 then
16556: LD_VAR 0 2
16560: PPUSH
16561: CALL_OW 437
16565: PUSH
16566: LD_INT 0
16568: GREATER
16569: IFFALSE 16662
// begin for j = 1 to GetTaskList ( i ) do
16571: LD_ADDR_VAR 0 3
16575: PUSH
16576: DOUBLE
16577: LD_INT 1
16579: DEC
16580: ST_TO_ADDR
16581: LD_VAR 0 2
16585: PPUSH
16586: CALL_OW 437
16590: PUSH
16591: FOR_TO
16592: IFFALSE 16660
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16594: LD_ADDR_VAR 0 4
16598: PUSH
16599: LD_VAR 0 2
16603: PPUSH
16604: CALL_OW 437
16608: PUSH
16609: LD_VAR 0 3
16613: ARRAY
16614: PUSH
16615: LD_INT 4
16617: ARRAY
16618: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16619: LD_VAR 0 4
16623: PPUSH
16624: CALL_OW 255
16628: PUSH
16629: LD_INT 4
16631: EQUAL
16632: PUSH
16633: LD_VAR 0 4
16637: PPUSH
16638: CALL_OW 255
16642: PUSH
16643: LD_INT 0
16645: EQUAL
16646: OR
16647: IFFALSE 16658
// ComStop ( i ) ;
16649: LD_VAR 0 2
16653: PPUSH
16654: CALL_OW 141
// end ;
16658: GO 16591
16660: POP
16661: POP
// end ; end ;
16662: GO 16553
16664: POP
16665: POP
// end ; end_of_file
16666: PPOPN 4
16668: END
// every 10 10$0 do
16669: GO 16671
16671: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16672: LD_INT 5
16674: PPUSH
16675: LD_INT 3
16677: PPUSH
16678: LD_INT 2
16680: PUSH
16681: LD_INT 2
16683: PUSH
16684: LD_INT 3
16686: PUSH
16687: LD_INT 4
16689: PUSH
16690: LD_INT 4
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: PUSH
16699: LD_OWVAR 67
16703: ARRAY
16704: PLUS
16705: PPUSH
16706: LD_INT 0
16708: PPUSH
16709: LD_EXP 16
16713: PPUSH
16714: LD_EXP 17
16718: PPUSH
16719: CALL_OW 12
16723: PPUSH
16724: LD_INT 4
16726: PPUSH
16727: LD_INT 14
16729: PPUSH
16730: LD_INT 1
16732: PPUSH
16733: LD_INT 2
16735: PPUSH
16736: CALL 6960 0 9
16740: END
// every 20 20$0 do
16741: GO 16743
16743: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16744: LD_INT 5
16746: PPUSH
16747: LD_INT 3
16749: PPUSH
16750: LD_INT 4
16752: PUSH
16753: LD_INT 2
16755: PUSH
16756: LD_INT 3
16758: PUSH
16759: LD_INT 4
16761: PUSH
16762: LD_INT 5
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: PUSH
16771: LD_OWVAR 67
16775: ARRAY
16776: PLUS
16777: PPUSH
16778: LD_INT 2
16780: PPUSH
16781: LD_EXP 16
16785: PPUSH
16786: LD_EXP 17
16790: PPUSH
16791: CALL_OW 12
16795: PPUSH
16796: LD_INT 4
16798: PPUSH
16799: LD_INT 14
16801: PPUSH
16802: LD_INT 1
16804: PPUSH
16805: LD_INT 1
16807: PPUSH
16808: CALL 6960 0 9
16812: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16813: GO 16815
16815: DISABLE
16816: LD_INT 0
16818: PPUSH
16819: PPUSH
16820: PPUSH
16821: PPUSH
16822: PPUSH
// begin hex := [ 123 , 95 ] ;
16823: LD_ADDR_VAR 0 4
16827: PUSH
16828: LD_INT 123
16830: PUSH
16831: LD_INT 95
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: ST_TO_ADDR
// tmp := [ ] ;
16838: LD_ADDR_VAR 0 5
16842: PUSH
16843: EMPTY
16844: ST_TO_ADDR
// if Difficulty > 1 then
16845: LD_OWVAR 67
16849: PUSH
16850: LD_INT 1
16852: GREATER
16853: IFFALSE 16863
// specAttack := true ;
16855: LD_ADDR_EXP 47
16859: PUSH
16860: LD_INT 1
16862: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16863: LD_ADDR_VAR 0 1
16867: PUSH
16868: DOUBLE
16869: LD_INT 1
16871: DEC
16872: ST_TO_ADDR
16873: LD_INT 4
16875: PUSH
16876: LD_INT 5
16878: PUSH
16879: LD_INT 6
16881: PUSH
16882: LD_INT 7
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: PUSH
16891: LD_OWVAR 67
16895: ARRAY
16896: PUSH
16897: FOR_TO
16898: IFFALSE 17200
// begin uc_side := 5 ;
16900: LD_ADDR_OWVAR 20
16904: PUSH
16905: LD_INT 5
16907: ST_TO_ADDR
// uc_nation := 3 ;
16908: LD_ADDR_OWVAR 21
16912: PUSH
16913: LD_INT 3
16915: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16916: LD_ADDR_OWVAR 37
16920: PUSH
16921: LD_INT 21
16923: PUSH
16924: LD_INT 22
16926: PUSH
16927: LD_INT 23
16929: PUSH
16930: LD_INT 24
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: PUSH
16939: LD_VAR 0 1
16943: PUSH
16944: LD_OWVAR 67
16948: MOD
16949: PUSH
16950: LD_INT 1
16952: PLUS
16953: ARRAY
16954: ST_TO_ADDR
// vc_engine := engine_combustion ;
16955: LD_ADDR_OWVAR 39
16959: PUSH
16960: LD_INT 1
16962: ST_TO_ADDR
// vc_control := control_manual ;
16963: LD_ADDR_OWVAR 38
16967: PUSH
16968: LD_INT 1
16970: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16971: LD_ADDR_OWVAR 40
16975: PUSH
16976: LD_INT 42
16978: PUSH
16979: LD_INT 43
16981: PUSH
16982: LD_INT 44
16984: PUSH
16985: LD_INT 44
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: PUSH
16994: LD_VAR 0 1
16998: PUSH
16999: LD_OWVAR 67
17003: MOD
17004: PUSH
17005: LD_INT 1
17007: PLUS
17008: ARRAY
17009: ST_TO_ADDR
// veh := CreateVehicle ;
17010: LD_ADDR_VAR 0 3
17014: PUSH
17015: CALL_OW 45
17019: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17020: LD_VAR 0 3
17024: PPUSH
17025: LD_INT 5
17027: PPUSH
17028: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
17032: LD_INT 35
17034: PPUSH
17035: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17039: LD_VAR 0 4
17043: PUSH
17044: LD_INT 1
17046: ARRAY
17047: PPUSH
17048: LD_VAR 0 4
17052: PUSH
17053: LD_INT 2
17055: ARRAY
17056: PPUSH
17057: CALL_OW 428
17061: PUSH
17062: LD_INT 0
17064: EQUAL
17065: IFFALSE 17032
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17067: LD_VAR 0 3
17071: PPUSH
17072: LD_VAR 0 4
17076: PUSH
17077: LD_INT 1
17079: ARRAY
17080: PPUSH
17081: LD_VAR 0 4
17085: PUSH
17086: LD_INT 2
17088: ARRAY
17089: PPUSH
17090: LD_INT 0
17092: PPUSH
17093: CALL_OW 48
// uc_side := 5 ;
17097: LD_ADDR_OWVAR 20
17101: PUSH
17102: LD_INT 5
17104: ST_TO_ADDR
// uc_nation := 3 ;
17105: LD_ADDR_OWVAR 21
17109: PUSH
17110: LD_INT 3
17112: ST_TO_ADDR
// InitHC_All ( ) ;
17113: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
17117: LD_INT 0
17119: PPUSH
17120: LD_INT 2
17122: PUSH
17123: LD_OWVAR 67
17127: PLUS
17128: PPUSH
17129: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17133: CALL_OW 44
17137: PPUSH
17138: LD_VAR 0 3
17142: PPUSH
17143: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17147: LD_VAR 0 3
17151: PPUSH
17152: LD_INT 101
17154: PPUSH
17155: LD_INT 77
17157: PPUSH
17158: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17162: LD_ADDR_VAR 0 5
17166: PUSH
17167: LD_VAR 0 5
17171: PPUSH
17172: LD_VAR 0 5
17176: PUSH
17177: LD_INT 1
17179: PLUS
17180: PPUSH
17181: LD_VAR 0 3
17185: PPUSH
17186: CALL_OW 1
17190: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17191: LD_INT 105
17193: PPUSH
17194: CALL_OW 67
// end ;
17198: GO 16897
17200: POP
17201: POP
// repeat wait ( 0 0$1 ) ;
17202: LD_INT 35
17204: PPUSH
17205: CALL_OW 67
// for i in tmp do
17209: LD_ADDR_VAR 0 1
17213: PUSH
17214: LD_VAR 0 5
17218: PUSH
17219: FOR_IN
17220: IFFALSE 17288
// if not IsOk ( i ) then
17222: LD_VAR 0 1
17226: PPUSH
17227: CALL_OW 302
17231: NOT
17232: IFFALSE 17252
// tmp := tmp diff i else
17234: LD_ADDR_VAR 0 5
17238: PUSH
17239: LD_VAR 0 5
17243: PUSH
17244: LD_VAR 0 1
17248: DIFF
17249: ST_TO_ADDR
17250: GO 17286
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17252: LD_VAR 0 1
17256: PPUSH
17257: LD_INT 22
17259: PUSH
17260: LD_INT 1
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PPUSH
17267: CALL_OW 69
17271: PPUSH
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 74
17281: PPUSH
17282: CALL_OW 115
17286: GO 17219
17288: POP
17289: POP
// until not tmp ;
17290: LD_VAR 0 5
17294: NOT
17295: IFFALSE 17202
// end ;
17297: PPOPN 5
17299: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17300: LD_EXP 47
17304: IFFALSE 17679
17306: GO 17308
17308: DISABLE
17309: LD_INT 0
17311: PPUSH
17312: PPUSH
17313: PPUSH
17314: PPUSH
// begin wait ( 0 0$20 ) ;
17315: LD_INT 700
17317: PPUSH
17318: CALL_OW 67
// uc_side := 5 ;
17322: LD_ADDR_OWVAR 20
17326: PUSH
17327: LD_INT 5
17329: ST_TO_ADDR
// uc_nation := 3 ;
17330: LD_ADDR_OWVAR 21
17334: PUSH
17335: LD_INT 3
17337: ST_TO_ADDR
// InitHc ;
17338: CALL_OW 19
// hc_importance := 0 ;
17342: LD_ADDR_OWVAR 32
17346: PUSH
17347: LD_INT 0
17349: ST_TO_ADDR
// tmp := [ ] ;
17350: LD_ADDR_VAR 0 2
17354: PUSH
17355: EMPTY
17356: ST_TO_ADDR
// InitHC_All ( ) ;
17357: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17361: LD_INT 0
17363: PPUSH
17364: LD_INT 2
17366: PPUSH
17367: LD_INT 6
17369: PPUSH
17370: CALL_OW 380
// eng := CreateHuman ;
17374: LD_ADDR_VAR 0 4
17378: PUSH
17379: CALL_OW 44
17383: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17384: LD_VAR 0 4
17388: PPUSH
17389: LD_INT 78
17391: PPUSH
17392: LD_INT 2
17394: PPUSH
17395: LD_INT 4
17397: PPUSH
17398: LD_INT 0
17400: PPUSH
17401: CALL_OW 50
// for i = 1 to 2 + Difficulty do
17405: LD_ADDR_VAR 0 3
17409: PUSH
17410: DOUBLE
17411: LD_INT 1
17413: DEC
17414: ST_TO_ADDR
17415: LD_INT 2
17417: PUSH
17418: LD_OWVAR 67
17422: PLUS
17423: PUSH
17424: FOR_TO
17425: IFFALSE 17514
// begin InitHC_All ( ) ;
17427: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17431: LD_INT 0
17433: PPUSH
17434: LD_INT 1
17436: PPUSH
17437: LD_INT 4
17439: PUSH
17440: LD_INT 5
17442: PUSH
17443: LD_INT 6
17445: PUSH
17446: LD_INT 6
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: PUSH
17455: LD_OWVAR 67
17459: ARRAY
17460: PPUSH
17461: CALL_OW 380
// un := CreateHuman ;
17465: LD_ADDR_VAR 0 1
17469: PUSH
17470: CALL_OW 44
17474: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17475: LD_VAR 0 1
17479: PPUSH
17480: LD_INT 78
17482: PPUSH
17483: LD_INT 2
17485: PPUSH
17486: LD_INT 4
17488: PPUSH
17489: LD_INT 0
17491: PPUSH
17492: CALL_OW 50
// tmp := tmp ^ un ;
17496: LD_ADDR_VAR 0 2
17500: PUSH
17501: LD_VAR 0 2
17505: PUSH
17506: LD_VAR 0 1
17510: ADD
17511: ST_TO_ADDR
// end ;
17512: GO 17424
17514: POP
17515: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17516: LD_VAR 0 2
17520: PPUSH
17521: LD_INT 49
17523: PPUSH
17524: LD_INT 3
17526: PPUSH
17527: CALL_OW 111
// wait ( 0 0$2 ) ;
17531: LD_INT 70
17533: PPUSH
17534: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17538: LD_VAR 0 4
17542: PPUSH
17543: LD_INT 49
17545: PPUSH
17546: LD_INT 3
17548: PPUSH
17549: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17553: LD_VAR 0 4
17557: PPUSH
17558: LD_INT 4
17560: PPUSH
17561: CALL_OW 227
// wait ( 0 0$10 ) ;
17565: LD_INT 350
17567: PPUSH
17568: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17572: LD_INT 35
17574: PPUSH
17575: CALL_OW 67
// for i in tmp do
17579: LD_ADDR_VAR 0 3
17583: PUSH
17584: LD_VAR 0 2
17588: PUSH
17589: FOR_IN
17590: IFFALSE 17670
// if not IsOk ( i ) then
17592: LD_VAR 0 3
17596: PPUSH
17597: CALL_OW 302
17601: NOT
17602: IFFALSE 17622
// tmp := tmp diff i else
17604: LD_ADDR_VAR 0 2
17608: PUSH
17609: LD_VAR 0 2
17613: PUSH
17614: LD_VAR 0 3
17618: DIFF
17619: ST_TO_ADDR
17620: GO 17668
// if not HasTask ( i ) then
17622: LD_VAR 0 3
17626: PPUSH
17627: CALL_OW 314
17631: NOT
17632: IFFALSE 17668
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17634: LD_VAR 0 3
17638: PPUSH
17639: LD_INT 22
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PPUSH
17649: CALL_OW 69
17653: PPUSH
17654: LD_VAR 0 3
17658: PPUSH
17659: CALL_OW 74
17663: PPUSH
17664: CALL_OW 115
17668: GO 17589
17670: POP
17671: POP
// until not tmp ;
17672: LD_VAR 0 2
17676: NOT
17677: IFFALSE 17572
// end ; end_of_file
17679: PPOPN 4
17681: END
// every 0 0$1 trigger startTimer = 1 do
17682: LD_EXP 30
17686: PUSH
17687: LD_INT 1
17689: EQUAL
17690: IFFALSE 17820
17692: GO 17694
17694: DISABLE
// begin enable ;
17695: ENABLE
// if timerStatus = 1 then
17696: LD_EXP 29
17700: PUSH
17701: LD_INT 1
17703: EQUAL
17704: IFFALSE 17737
// begin timeToSupport = timeToSupport - 0 0$01 ;
17706: LD_ADDR_EXP 28
17710: PUSH
17711: LD_EXP 28
17715: PUSH
17716: LD_INT 35
17718: MINUS
17719: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17720: LD_ADDR_OWVAR 47
17724: PUSH
17725: LD_STRING #Am04-1
17727: PUSH
17728: LD_EXP 28
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: ST_TO_ADDR
// end ; if timerStatus = 2 then
17737: LD_EXP 29
17741: PUSH
17742: LD_INT 2
17744: EQUAL
17745: IFFALSE 17778
// begin timeToSupport = timeToSupport - 0 0$01 ;
17747: LD_ADDR_EXP 28
17751: PUSH
17752: LD_EXP 28
17756: PUSH
17757: LD_INT 35
17759: MINUS
17760: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17761: LD_ADDR_OWVAR 47
17765: PUSH
17766: LD_STRING #Am04-2
17768: PUSH
17769: LD_EXP 28
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: ST_TO_ADDR
// end ; if timerStatus = 3 then
17778: LD_EXP 29
17782: PUSH
17783: LD_INT 3
17785: EQUAL
17786: IFFALSE 17802
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17788: LD_ADDR_EXP 27
17792: PUSH
17793: LD_EXP 27
17797: PUSH
17798: LD_INT 35
17800: MINUS
17801: ST_TO_ADDR
// if timerStatus = 4 then
17802: LD_EXP 29
17806: PUSH
17807: LD_INT 4
17809: EQUAL
17810: IFFALSE 17820
// display_strings =  ;
17812: LD_ADDR_OWVAR 47
17816: PUSH
17817: LD_STRING 
17819: ST_TO_ADDR
// end ; end_of_file
17820: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17821: LD_EXP 15
17825: PPUSH
17826: CALL_OW 301
17830: PUSH
17831: LD_INT 22
17833: PUSH
17834: LD_INT 3
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 21
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PPUSH
17855: CALL_OW 69
17859: PUSH
17860: LD_INT 14
17862: PUSH
17863: LD_INT 13
17865: PUSH
17866: LD_INT 12
17868: PUSH
17869: LD_INT 11
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: PUSH
17878: LD_OWVAR 67
17882: ARRAY
17883: LESS
17884: AND
17885: IFFALSE 18471
17887: GO 17889
17889: DISABLE
17890: LD_INT 0
17892: PPUSH
17893: PPUSH
17894: PPUSH
// begin AIEnable = 0 ;
17895: LD_ADDR_EXP 37
17899: PUSH
17900: LD_INT 0
17902: ST_TO_ADDR
// escapeAvalaible = 1 ;
17903: LD_ADDR_EXP 40
17907: PUSH
17908: LD_INT 1
17910: ST_TO_ADDR
// Video ( true ) ;
17911: LD_INT 1
17913: PPUSH
17914: CALL 77225 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17918: LD_INT 3
17920: PPUSH
17921: LD_INT 1
17923: PPUSH
17924: LD_INT 1
17926: PPUSH
17927: LD_INT 0
17929: PPUSH
17930: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17934: LD_INT 6
17936: PPUSH
17937: LD_INT 1
17939: PPUSH
17940: LD_INT 1
17942: PPUSH
17943: LD_INT 0
17945: PPUSH
17946: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17950: LD_INT 5
17952: PPUSH
17953: LD_INT 1
17955: PPUSH
17956: LD_INT 1
17958: PPUSH
17959: LD_INT 0
17961: PPUSH
17962: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17966: LD_INT 3
17968: PPUSH
17969: LD_INT 1
17971: PPUSH
17972: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17976: LD_INT 97
17978: PPUSH
17979: LD_INT 91
17981: PPUSH
17982: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17986: LD_INT 22
17988: PUSH
17989: LD_INT 3
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 21
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PPUSH
18010: CALL_OW 69
18014: PPUSH
18015: CALL_OW 121
// wait ( 0 0$01 ) ;
18019: LD_INT 35
18021: PPUSH
18022: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18026: LD_INT 22
18028: PUSH
18029: LD_INT 3
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: LD_INT 21
18038: PUSH
18039: LD_INT 1
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PPUSH
18050: CALL_OW 69
18054: PPUSH
18055: LD_INT 124
18057: PPUSH
18058: LD_INT 98
18060: PPUSH
18061: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18065: LD_INT 22
18067: PUSH
18068: LD_INT 5
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 21
18077: PUSH
18078: LD_INT 1
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PPUSH
18089: CALL_OW 69
18093: PPUSH
18094: CALL_OW 121
// wait ( 0 0$01 ) ;
18098: LD_INT 35
18100: PPUSH
18101: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18105: LD_INT 22
18107: PUSH
18108: LD_INT 5
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 21
18117: PUSH
18118: LD_INT 1
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PPUSH
18129: CALL_OW 69
18133: PPUSH
18134: LD_INT 124
18136: PPUSH
18137: LD_INT 98
18139: PPUSH
18140: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18144: LD_INT 22
18146: PUSH
18147: LD_INT 6
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 21
18156: PUSH
18157: LD_INT 1
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PPUSH
18168: CALL_OW 69
18172: PPUSH
18173: CALL_OW 121
// wait ( 0 0$01 ) ;
18177: LD_INT 35
18179: PPUSH
18180: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18184: LD_INT 22
18186: PUSH
18187: LD_INT 6
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 21
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PPUSH
18208: CALL_OW 69
18212: PPUSH
18213: LD_INT 124
18215: PPUSH
18216: LD_INT 98
18218: PPUSH
18219: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18223: LD_INT 22
18225: PUSH
18226: LD_INT 1
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 21
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PPUSH
18247: CALL_OW 69
18251: PPUSH
18252: LD_INT 124
18254: PPUSH
18255: LD_INT 96
18257: PPUSH
18258: CALL_OW 114
// wait ( 0 0$1 ) ;
18262: LD_INT 35
18264: PPUSH
18265: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18269: LD_INT 124
18271: PPUSH
18272: LD_INT 96
18274: PPUSH
18275: CALL_OW 84
// p := 0 0$0 ;
18279: LD_ADDR_VAR 0 3
18283: PUSH
18284: LD_INT 0
18286: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18287: LD_ADDR_VAR 0 2
18291: PUSH
18292: LD_INT 2
18294: PUSH
18295: LD_INT 22
18297: PUSH
18298: LD_INT 3
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 22
18307: PUSH
18308: LD_INT 6
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 21
18322: PUSH
18323: LD_INT 1
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PPUSH
18334: CALL_OW 69
18338: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18339: LD_INT 35
18341: PPUSH
18342: CALL_OW 67
// p := p + 0 0$1 ;
18346: LD_ADDR_VAR 0 3
18350: PUSH
18351: LD_VAR 0 3
18355: PUSH
18356: LD_INT 35
18358: PLUS
18359: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18360: LD_VAR 0 2
18364: PPUSH
18365: LD_INT 5
18367: PPUSH
18368: CALL_OW 113
// for i in tmp do
18372: LD_ADDR_VAR 0 1
18376: PUSH
18377: LD_VAR 0 2
18381: PUSH
18382: FOR_IN
18383: IFFALSE 18410
// if IsInArea ( tmp , RussianEscape ) then
18385: LD_VAR 0 2
18389: PPUSH
18390: LD_INT 5
18392: PPUSH
18393: CALL_OW 308
18397: IFFALSE 18408
// RemoveUnit ( i ) ;
18399: LD_VAR 0 1
18403: PPUSH
18404: CALL_OW 64
18408: GO 18382
18410: POP
18411: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18412: LD_INT 23
18414: PUSH
18415: LD_INT 3
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 21
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 24
18434: PUSH
18435: LD_INT 250
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: LIST
18446: PPUSH
18447: CALL_OW 69
18451: PUSH
18452: LD_INT 0
18454: EQUAL
18455: PUSH
18456: LD_VAR 0 3
18460: PUSH
18461: LD_INT 245
18463: GREATEREQUAL
18464: OR
18465: IFFALSE 18339
// FinishMission ;
18467: CALL 18474 0 0
// end ;
18471: PPOPN 3
18473: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18474: LD_INT 0
18476: PPUSH
18477: PPUSH
18478: PPUSH
18479: PPUSH
18480: PPUSH
// if not vehicleProduceCounter then
18481: LD_EXP 42
18485: NOT
18486: IFFALSE 18495
// SetAchievement ( ACH_INFANTRY ) ;
18488: LD_STRING ACH_INFANTRY
18490: PPUSH
18491: CALL_OW 543
// if tick <= 20 20$00 then
18495: LD_OWVAR 1
18499: PUSH
18500: LD_INT 42000
18502: LESSEQUAL
18503: IFFALSE 18519
// begin wait ( 3 ) ;
18505: LD_INT 3
18507: PPUSH
18508: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18512: LD_STRING ACH_ASPEED_4
18514: PPUSH
18515: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18519: LD_INT 22
18521: PPUSH
18522: CALL 19163 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18526: LD_INT 69
18528: PPUSH
18529: LD_INT 1
18531: PPUSH
18532: CALL_OW 321
18536: PPUSH
18537: LD_STRING GatlingInGamma
18539: PPUSH
18540: CALL_OW 39
// m1 := false ;
18544: LD_ADDR_VAR 0 3
18548: PUSH
18549: LD_INT 0
18551: ST_TO_ADDR
// m2 := false ;
18552: LD_ADDR_VAR 0 4
18556: PUSH
18557: LD_INT 0
18559: ST_TO_ADDR
// m3 := false ;
18560: LD_ADDR_VAR 0 5
18564: PUSH
18565: LD_INT 0
18567: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18568: LD_EXP 34
18572: PUSH
18573: LD_INT 1
18575: EQUAL
18576: PUSH
18577: LD_EXP 35
18581: PUSH
18582: LD_INT 1
18584: EQUAL
18585: AND
18586: IFFALSE 18608
// begin AddMedal ( oil , 1 ) ;
18588: LD_STRING oil
18590: PPUSH
18591: LD_INT 1
18593: PPUSH
18594: CALL_OW 101
// m1 := true ;
18598: LD_ADDR_VAR 0 3
18602: PUSH
18603: LD_INT 1
18605: ST_TO_ADDR
// end else
18606: GO 18701
// begin if buildOil = 1 and buildPower = 0 then
18608: LD_EXP 34
18612: PUSH
18613: LD_INT 1
18615: EQUAL
18616: PUSH
18617: LD_EXP 35
18621: PUSH
18622: LD_INT 0
18624: EQUAL
18625: AND
18626: IFFALSE 18639
// AddMedal ( oil , - 1 ) ;
18628: LD_STRING oil
18630: PPUSH
18631: LD_INT 1
18633: NEG
18634: PPUSH
18635: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18639: LD_EXP 34
18643: PUSH
18644: LD_INT 0
18646: EQUAL
18647: PUSH
18648: LD_EXP 35
18652: PUSH
18653: LD_INT 1
18655: EQUAL
18656: AND
18657: IFFALSE 18670
// AddMedal ( oil , - 2 ) ;
18659: LD_STRING oil
18661: PPUSH
18662: LD_INT 2
18664: NEG
18665: PPUSH
18666: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18670: LD_EXP 34
18674: PUSH
18675: LD_INT 0
18677: EQUAL
18678: PUSH
18679: LD_EXP 35
18683: PUSH
18684: LD_INT 0
18686: EQUAL
18687: AND
18688: IFFALSE 18701
// AddMedal ( oil , - 3 ) ;
18690: LD_STRING oil
18692: PPUSH
18693: LD_INT 3
18695: NEG
18696: PPUSH
18697: CALL_OW 101
// end ; if lostCounter > 3 then
18701: LD_EXP 38
18705: PUSH
18706: LD_INT 3
18708: GREATER
18709: IFFALSE 18724
// AddMedal ( deaths , - 1 ) else
18711: LD_STRING deaths
18713: PPUSH
18714: LD_INT 1
18716: NEG
18717: PPUSH
18718: CALL_OW 101
18722: GO 18742
// begin AddMedal ( deaths , 1 ) ;
18724: LD_STRING deaths
18726: PPUSH
18727: LD_INT 1
18729: PPUSH
18730: CALL_OW 101
// m2 := true ;
18734: LD_ADDR_VAR 0 4
18738: PUSH
18739: LD_INT 1
18741: ST_TO_ADDR
// end ; if honor = 1 then
18742: LD_EXP 39
18746: PUSH
18747: LD_INT 1
18749: EQUAL
18750: IFFALSE 18772
// begin AddMedal ( honour , 1 ) ;
18752: LD_STRING honour
18754: PPUSH
18755: LD_INT 1
18757: PPUSH
18758: CALL_OW 101
// m3 := true ;
18762: LD_ADDR_VAR 0 5
18766: PUSH
18767: LD_INT 1
18769: ST_TO_ADDR
// end else
18770: GO 18783
// AddMedal ( honour , - 1 ) ;
18772: LD_STRING honour
18774: PPUSH
18775: LD_INT 1
18777: NEG
18778: PPUSH
18779: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18783: LD_VAR 0 3
18787: PUSH
18788: LD_VAR 0 4
18792: AND
18793: PUSH
18794: LD_VAR 0 5
18798: AND
18799: PUSH
18800: LD_OWVAR 67
18804: PUSH
18805: LD_INT 3
18807: GREATEREQUAL
18808: AND
18809: IFFALSE 18821
// SetAchievementEX ( ACH_AMER , 4 ) ;
18811: LD_STRING ACH_AMER
18813: PPUSH
18814: LD_INT 4
18816: PPUSH
18817: CALL_OW 564
// GiveMedals ( Main ) ;
18821: LD_STRING Main
18823: PPUSH
18824: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18828: LD_INT 22
18830: PUSH
18831: LD_INT 1
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 23
18840: PUSH
18841: LD_INT 1
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 21
18850: PUSH
18851: LD_INT 1
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: LIST
18862: PPUSH
18863: CALL_OW 69
18867: PPUSH
18868: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18872: LD_EXP 1
18876: PPUSH
18877: LD_EXP 48
18881: PUSH
18882: LD_STRING JMM
18884: STR
18885: PPUSH
18886: CALL_OW 38
// if IsOK ( Bobby ) then
18890: LD_EXP 2
18894: PPUSH
18895: CALL_OW 302
18899: IFFALSE 18919
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18901: LD_EXP 2
18905: PPUSH
18906: LD_EXP 48
18910: PUSH
18911: LD_STRING Bobby
18913: STR
18914: PPUSH
18915: CALL_OW 38
// if IsOK ( Cyrus ) then
18919: LD_EXP 3
18923: PPUSH
18924: CALL_OW 302
18928: IFFALSE 18948
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18930: LD_EXP 3
18934: PPUSH
18935: LD_EXP 48
18939: PUSH
18940: LD_STRING Cyrus
18942: STR
18943: PPUSH
18944: CALL_OW 38
// if IsOK ( Lisa ) then
18948: LD_EXP 4
18952: PPUSH
18953: CALL_OW 302
18957: IFFALSE 18977
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18959: LD_EXP 4
18963: PPUSH
18964: LD_EXP 48
18968: PUSH
18969: LD_STRING Lisa
18971: STR
18972: PPUSH
18973: CALL_OW 38
// if IsOK ( Brown ) then
18977: LD_EXP 7
18981: PPUSH
18982: CALL_OW 302
18986: IFFALSE 19006
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18988: LD_EXP 7
18992: PPUSH
18993: LD_EXP 48
18997: PUSH
18998: LD_STRING Brown
19000: STR
19001: PPUSH
19002: CALL_OW 38
// if not IsDead ( Donaldson ) then
19006: LD_EXP 13
19010: PPUSH
19011: CALL_OW 301
19015: NOT
19016: IFFALSE 19036
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19018: LD_EXP 13
19022: PPUSH
19023: LD_EXP 48
19027: PUSH
19028: LD_STRING Donaldson
19030: STR
19031: PPUSH
19032: CALL_OW 38
// if not IsDead ( Frank ) then
19036: LD_EXP 5
19040: PPUSH
19041: CALL_OW 301
19045: NOT
19046: IFFALSE 19066
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19048: LD_EXP 5
19052: PPUSH
19053: LD_EXP 48
19057: PUSH
19058: LD_STRING Frank
19060: STR
19061: PPUSH
19062: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19066: LD_INT 50
19068: PUSH
19069: EMPTY
19070: LIST
19071: PUSH
19072: LD_INT 22
19074: PUSH
19075: LD_INT 1
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 21
19084: PUSH
19085: LD_INT 1
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: LIST
19096: PPUSH
19097: CALL_OW 69
19101: PUSH
19102: LD_EXP 1
19106: PUSH
19107: LD_EXP 2
19111: PUSH
19112: LD_EXP 3
19116: PUSH
19117: LD_EXP 4
19121: PUSH
19122: LD_EXP 7
19126: PUSH
19127: LD_EXP 13
19131: PUSH
19132: LD_EXP 5
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: DIFF
19146: PPUSH
19147: LD_STRING 04_other_survivors
19149: PPUSH
19150: CALL_OW 38
// YouWin ;
19154: CALL_OW 103
// end ;
19158: LD_VAR 0 1
19162: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19163: LD_INT 0
19165: PPUSH
19166: PPUSH
19167: PPUSH
19168: PPUSH
// gammaBase = [ ] ;
19169: LD_ADDR_VAR 0 4
19173: PUSH
19174: EMPTY
19175: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19176: LD_ADDR_VAR 0 5
19180: PUSH
19181: LD_VAR 0 1
19185: PPUSH
19186: LD_INT 22
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 21
19198: PUSH
19199: LD_INT 3
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PPUSH
19210: CALL_OW 70
19214: ST_TO_ADDR
// for i in buildings do
19215: LD_ADDR_VAR 0 3
19219: PUSH
19220: LD_VAR 0 5
19224: PUSH
19225: FOR_IN
19226: IFFALSE 19563
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19228: LD_VAR 0 3
19232: PPUSH
19233: CALL_OW 266
19237: PUSH
19238: LD_INT 6
19240: PUSH
19241: LD_INT 7
19243: PUSH
19244: LD_INT 8
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: LIST
19251: IN
19252: IFFALSE 19366
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19254: LD_ADDR_VAR 0 4
19258: PUSH
19259: LD_VAR 0 4
19263: PUSH
19264: LD_VAR 0 3
19268: PPUSH
19269: CALL_OW 266
19273: PUSH
19274: LD_VAR 0 3
19278: PPUSH
19279: CALL_OW 250
19283: PUSH
19284: LD_VAR 0 3
19288: PPUSH
19289: CALL_OW 251
19293: PUSH
19294: LD_VAR 0 3
19298: PPUSH
19299: CALL_OW 254
19303: PUSH
19304: LD_VAR 0 3
19308: PPUSH
19309: CALL_OW 267
19313: PUSH
19314: LD_VAR 0 3
19318: PPUSH
19319: CALL_OW 248
19323: PUSH
19324: LD_VAR 0 3
19328: PPUSH
19329: LD_INT 1
19331: PPUSH
19332: CALL_OW 268
19336: PUSH
19337: LD_VAR 0 3
19341: PPUSH
19342: LD_INT 2
19344: PPUSH
19345: CALL_OW 268
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: PUSH
19360: EMPTY
19361: LIST
19362: ADD
19363: ST_TO_ADDR
19364: GO 19561
// if GetBType ( i ) in [ b_bunker ] then
19366: LD_VAR 0 3
19370: PPUSH
19371: CALL_OW 266
19375: PUSH
19376: LD_INT 32
19378: PUSH
19379: EMPTY
19380: LIST
19381: IN
19382: IFFALSE 19479
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19384: LD_ADDR_VAR 0 4
19388: PUSH
19389: LD_VAR 0 4
19393: PUSH
19394: LD_VAR 0 3
19398: PPUSH
19399: CALL_OW 266
19403: PUSH
19404: LD_VAR 0 3
19408: PPUSH
19409: CALL_OW 250
19413: PUSH
19414: LD_VAR 0 3
19418: PPUSH
19419: CALL_OW 251
19423: PUSH
19424: LD_VAR 0 3
19428: PPUSH
19429: CALL_OW 254
19433: PUSH
19434: LD_VAR 0 3
19438: PPUSH
19439: CALL_OW 267
19443: PUSH
19444: LD_VAR 0 3
19448: PPUSH
19449: CALL_OW 248
19453: PUSH
19454: LD_VAR 0 3
19458: PPUSH
19459: CALL_OW 269
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: PUSH
19473: EMPTY
19474: LIST
19475: ADD
19476: ST_TO_ADDR
19477: GO 19561
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19479: LD_ADDR_VAR 0 4
19483: PUSH
19484: LD_VAR 0 4
19488: PUSH
19489: LD_VAR 0 3
19493: PPUSH
19494: CALL_OW 266
19498: PUSH
19499: LD_VAR 0 3
19503: PPUSH
19504: CALL_OW 250
19508: PUSH
19509: LD_VAR 0 3
19513: PPUSH
19514: CALL_OW 251
19518: PUSH
19519: LD_VAR 0 3
19523: PPUSH
19524: CALL_OW 254
19528: PUSH
19529: LD_VAR 0 3
19533: PPUSH
19534: CALL_OW 267
19538: PUSH
19539: LD_VAR 0 3
19543: PPUSH
19544: CALL_OW 248
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: PUSH
19557: EMPTY
19558: LIST
19559: ADD
19560: ST_TO_ADDR
// end ;
19561: GO 19225
19563: POP
19564: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19565: LD_VAR 0 4
19569: PPUSH
19570: LD_STRING GammaBase
19572: PPUSH
19573: CALL_OW 39
// end ; end_of_file
19577: LD_VAR 0 2
19581: RET
// every 1 1$15 do
19582: GO 19584
19584: DISABLE
// begin if supply <= 13 and supply > 7 then
19585: LD_EXP 36
19589: PUSH
19590: LD_INT 13
19592: LESSEQUAL
19593: PUSH
19594: LD_EXP 36
19598: PUSH
19599: LD_INT 7
19601: GREATER
19602: AND
19603: IFFALSE 19626
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19605: LD_INT 3
19607: PPUSH
19608: LD_INT 5
19610: PPUSH
19611: CALL_OW 12
19615: PPUSH
19616: LD_INT 18
19618: PPUSH
19619: LD_INT 1
19621: PPUSH
19622: CALL_OW 55
// if supply <= 7 and supply > 4 then
19626: LD_EXP 36
19630: PUSH
19631: LD_INT 7
19633: LESSEQUAL
19634: PUSH
19635: LD_EXP 36
19639: PUSH
19640: LD_INT 4
19642: GREATER
19643: AND
19644: IFFALSE 19667
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19646: LD_INT 3
19648: PPUSH
19649: LD_INT 5
19651: PPUSH
19652: CALL_OW 12
19656: PPUSH
19657: LD_INT 19
19659: PPUSH
19660: LD_INT 1
19662: PPUSH
19663: CALL_OW 55
// if supply <= 4 and supply > 0 then
19667: LD_EXP 36
19671: PUSH
19672: LD_INT 4
19674: LESSEQUAL
19675: PUSH
19676: LD_EXP 36
19680: PUSH
19681: LD_INT 0
19683: GREATER
19684: AND
19685: IFFALSE 19708
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19687: LD_INT 3
19689: PPUSH
19690: LD_INT 5
19692: PPUSH
19693: CALL_OW 12
19697: PPUSH
19698: LD_INT 20
19700: PPUSH
19701: LD_INT 1
19703: PPUSH
19704: CALL_OW 55
// if supply then
19708: LD_EXP 36
19712: IFFALSE 19729
// begin supply = supply - 1 ;
19714: LD_ADDR_EXP 36
19718: PUSH
19719: LD_EXP 36
19723: PUSH
19724: LD_INT 1
19726: MINUS
19727: ST_TO_ADDR
// enable ;
19728: ENABLE
// end ; end ; end_of_file
19729: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
19730: LD_INT 0
19732: PPUSH
// ar_miner := 81 ;
19733: LD_ADDR_EXP 57
19737: PUSH
19738: LD_INT 81
19740: ST_TO_ADDR
// ar_crane := 88 ;
19741: LD_ADDR_EXP 56
19745: PUSH
19746: LD_INT 88
19748: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19749: LD_ADDR_EXP 51
19753: PUSH
19754: LD_INT 89
19756: ST_TO_ADDR
// us_hack := 99 ;
19757: LD_ADDR_EXP 52
19761: PUSH
19762: LD_INT 99
19764: ST_TO_ADDR
// us_artillery := 97 ;
19765: LD_ADDR_EXP 53
19769: PUSH
19770: LD_INT 97
19772: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19773: LD_ADDR_EXP 54
19777: PUSH
19778: LD_INT 91
19780: ST_TO_ADDR
// ar_mortar := 92 ;
19781: LD_ADDR_EXP 55
19785: PUSH
19786: LD_INT 92
19788: ST_TO_ADDR
// ru_flamethrower := 93 ;
19789: LD_ADDR_EXP 58
19793: PUSH
19794: LD_INT 93
19796: ST_TO_ADDR
// ru_radar := 98 ;
19797: LD_ADDR_EXP 50
19801: PUSH
19802: LD_INT 98
19804: ST_TO_ADDR
// tech_Artillery := 80 ;
19805: LD_ADDR_EXP 59
19809: PUSH
19810: LD_INT 80
19812: ST_TO_ADDR
// tech_RadMat := 81 ;
19813: LD_ADDR_EXP 60
19817: PUSH
19818: LD_INT 81
19820: ST_TO_ADDR
// tech_BasicTools := 82 ;
19821: LD_ADDR_EXP 61
19825: PUSH
19826: LD_INT 82
19828: ST_TO_ADDR
// tech_Cargo := 83 ;
19829: LD_ADDR_EXP 62
19833: PUSH
19834: LD_INT 83
19836: ST_TO_ADDR
// tech_Track := 84 ;
19837: LD_ADDR_EXP 63
19841: PUSH
19842: LD_INT 84
19844: ST_TO_ADDR
// tech_Crane := 85 ;
19845: LD_ADDR_EXP 64
19849: PUSH
19850: LD_INT 85
19852: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19853: LD_ADDR_EXP 65
19857: PUSH
19858: LD_INT 86
19860: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19861: LD_ADDR_EXP 66
19865: PUSH
19866: LD_INT 87
19868: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19869: LD_ADDR_EXP 67
19873: PUSH
19874: LD_INT 88
19876: ST_TO_ADDR
// end ;
19877: LD_VAR 0 1
19881: RET
// every 1 do
19882: GO 19884
19884: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19885: CALL 19730 0 0
19889: END
// every 0 0$1 do
19890: GO 19892
19892: DISABLE
// begin enable ;
19893: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19894: LD_STRING updateTimer(
19896: PUSH
19897: LD_OWVAR 1
19901: STR
19902: PUSH
19903: LD_STRING );
19905: STR
19906: PPUSH
19907: CALL_OW 559
// end ;
19911: END
// export function SOS_MapStart ( ) ; begin
19912: LD_INT 0
19914: PPUSH
// if streamModeActive then
19915: LD_EXP 68
19919: IFFALSE 19928
// DefineStreamItems ( true ) ;
19921: LD_INT 1
19923: PPUSH
19924: CALL 21582 0 1
// UpdateFactoryWaypoints ( ) ;
19928: CALL 34443 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19932: CALL 34700 0 0
// end ;
19936: LD_VAR 0 1
19940: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19941: LD_INT 0
19943: PPUSH
// if p2 = 100 then
19944: LD_VAR 0 2
19948: PUSH
19949: LD_INT 100
19951: EQUAL
19952: IFFALSE 20955
// begin if not StreamModeActive then
19954: LD_EXP 68
19958: NOT
19959: IFFALSE 19969
// StreamModeActive := true ;
19961: LD_ADDR_EXP 68
19965: PUSH
19966: LD_INT 1
19968: ST_TO_ADDR
// if p3 = 0 then
19969: LD_VAR 0 3
19973: PUSH
19974: LD_INT 0
19976: EQUAL
19977: IFFALSE 19983
// InitStreamMode ;
19979: CALL 21118 0 0
// if p3 = 1 then
19983: LD_VAR 0 3
19987: PUSH
19988: LD_INT 1
19990: EQUAL
19991: IFFALSE 20001
// sRocket := true ;
19993: LD_ADDR_EXP 73
19997: PUSH
19998: LD_INT 1
20000: ST_TO_ADDR
// if p3 = 2 then
20001: LD_VAR 0 3
20005: PUSH
20006: LD_INT 2
20008: EQUAL
20009: IFFALSE 20019
// sSpeed := true ;
20011: LD_ADDR_EXP 72
20015: PUSH
20016: LD_INT 1
20018: ST_TO_ADDR
// if p3 = 3 then
20019: LD_VAR 0 3
20023: PUSH
20024: LD_INT 3
20026: EQUAL
20027: IFFALSE 20037
// sEngine := true ;
20029: LD_ADDR_EXP 74
20033: PUSH
20034: LD_INT 1
20036: ST_TO_ADDR
// if p3 = 4 then
20037: LD_VAR 0 3
20041: PUSH
20042: LD_INT 4
20044: EQUAL
20045: IFFALSE 20055
// sSpec := true ;
20047: LD_ADDR_EXP 71
20051: PUSH
20052: LD_INT 1
20054: ST_TO_ADDR
// if p3 = 5 then
20055: LD_VAR 0 3
20059: PUSH
20060: LD_INT 5
20062: EQUAL
20063: IFFALSE 20073
// sLevel := true ;
20065: LD_ADDR_EXP 75
20069: PUSH
20070: LD_INT 1
20072: ST_TO_ADDR
// if p3 = 6 then
20073: LD_VAR 0 3
20077: PUSH
20078: LD_INT 6
20080: EQUAL
20081: IFFALSE 20091
// sArmoury := true ;
20083: LD_ADDR_EXP 76
20087: PUSH
20088: LD_INT 1
20090: ST_TO_ADDR
// if p3 = 7 then
20091: LD_VAR 0 3
20095: PUSH
20096: LD_INT 7
20098: EQUAL
20099: IFFALSE 20109
// sRadar := true ;
20101: LD_ADDR_EXP 77
20105: PUSH
20106: LD_INT 1
20108: ST_TO_ADDR
// if p3 = 8 then
20109: LD_VAR 0 3
20113: PUSH
20114: LD_INT 8
20116: EQUAL
20117: IFFALSE 20127
// sBunker := true ;
20119: LD_ADDR_EXP 78
20123: PUSH
20124: LD_INT 1
20126: ST_TO_ADDR
// if p3 = 9 then
20127: LD_VAR 0 3
20131: PUSH
20132: LD_INT 9
20134: EQUAL
20135: IFFALSE 20145
// sHack := true ;
20137: LD_ADDR_EXP 79
20141: PUSH
20142: LD_INT 1
20144: ST_TO_ADDR
// if p3 = 10 then
20145: LD_VAR 0 3
20149: PUSH
20150: LD_INT 10
20152: EQUAL
20153: IFFALSE 20163
// sFire := true ;
20155: LD_ADDR_EXP 80
20159: PUSH
20160: LD_INT 1
20162: ST_TO_ADDR
// if p3 = 11 then
20163: LD_VAR 0 3
20167: PUSH
20168: LD_INT 11
20170: EQUAL
20171: IFFALSE 20181
// sRefresh := true ;
20173: LD_ADDR_EXP 81
20177: PUSH
20178: LD_INT 1
20180: ST_TO_ADDR
// if p3 = 12 then
20181: LD_VAR 0 3
20185: PUSH
20186: LD_INT 12
20188: EQUAL
20189: IFFALSE 20199
// sExp := true ;
20191: LD_ADDR_EXP 82
20195: PUSH
20196: LD_INT 1
20198: ST_TO_ADDR
// if p3 = 13 then
20199: LD_VAR 0 3
20203: PUSH
20204: LD_INT 13
20206: EQUAL
20207: IFFALSE 20217
// sDepot := true ;
20209: LD_ADDR_EXP 83
20213: PUSH
20214: LD_INT 1
20216: ST_TO_ADDR
// if p3 = 14 then
20217: LD_VAR 0 3
20221: PUSH
20222: LD_INT 14
20224: EQUAL
20225: IFFALSE 20235
// sFlag := true ;
20227: LD_ADDR_EXP 84
20231: PUSH
20232: LD_INT 1
20234: ST_TO_ADDR
// if p3 = 15 then
20235: LD_VAR 0 3
20239: PUSH
20240: LD_INT 15
20242: EQUAL
20243: IFFALSE 20253
// sKamikadze := true ;
20245: LD_ADDR_EXP 92
20249: PUSH
20250: LD_INT 1
20252: ST_TO_ADDR
// if p3 = 16 then
20253: LD_VAR 0 3
20257: PUSH
20258: LD_INT 16
20260: EQUAL
20261: IFFALSE 20271
// sTroll := true ;
20263: LD_ADDR_EXP 93
20267: PUSH
20268: LD_INT 1
20270: ST_TO_ADDR
// if p3 = 17 then
20271: LD_VAR 0 3
20275: PUSH
20276: LD_INT 17
20278: EQUAL
20279: IFFALSE 20289
// sSlow := true ;
20281: LD_ADDR_EXP 94
20285: PUSH
20286: LD_INT 1
20288: ST_TO_ADDR
// if p3 = 18 then
20289: LD_VAR 0 3
20293: PUSH
20294: LD_INT 18
20296: EQUAL
20297: IFFALSE 20307
// sLack := true ;
20299: LD_ADDR_EXP 95
20303: PUSH
20304: LD_INT 1
20306: ST_TO_ADDR
// if p3 = 19 then
20307: LD_VAR 0 3
20311: PUSH
20312: LD_INT 19
20314: EQUAL
20315: IFFALSE 20325
// sTank := true ;
20317: LD_ADDR_EXP 97
20321: PUSH
20322: LD_INT 1
20324: ST_TO_ADDR
// if p3 = 20 then
20325: LD_VAR 0 3
20329: PUSH
20330: LD_INT 20
20332: EQUAL
20333: IFFALSE 20343
// sRemote := true ;
20335: LD_ADDR_EXP 98
20339: PUSH
20340: LD_INT 1
20342: ST_TO_ADDR
// if p3 = 21 then
20343: LD_VAR 0 3
20347: PUSH
20348: LD_INT 21
20350: EQUAL
20351: IFFALSE 20361
// sPowell := true ;
20353: LD_ADDR_EXP 99
20357: PUSH
20358: LD_INT 1
20360: ST_TO_ADDR
// if p3 = 22 then
20361: LD_VAR 0 3
20365: PUSH
20366: LD_INT 22
20368: EQUAL
20369: IFFALSE 20379
// sTeleport := true ;
20371: LD_ADDR_EXP 102
20375: PUSH
20376: LD_INT 1
20378: ST_TO_ADDR
// if p3 = 23 then
20379: LD_VAR 0 3
20383: PUSH
20384: LD_INT 23
20386: EQUAL
20387: IFFALSE 20397
// sOilTower := true ;
20389: LD_ADDR_EXP 104
20393: PUSH
20394: LD_INT 1
20396: ST_TO_ADDR
// if p3 = 24 then
20397: LD_VAR 0 3
20401: PUSH
20402: LD_INT 24
20404: EQUAL
20405: IFFALSE 20415
// sShovel := true ;
20407: LD_ADDR_EXP 105
20411: PUSH
20412: LD_INT 1
20414: ST_TO_ADDR
// if p3 = 25 then
20415: LD_VAR 0 3
20419: PUSH
20420: LD_INT 25
20422: EQUAL
20423: IFFALSE 20433
// sSheik := true ;
20425: LD_ADDR_EXP 106
20429: PUSH
20430: LD_INT 1
20432: ST_TO_ADDR
// if p3 = 26 then
20433: LD_VAR 0 3
20437: PUSH
20438: LD_INT 26
20440: EQUAL
20441: IFFALSE 20451
// sEarthquake := true ;
20443: LD_ADDR_EXP 108
20447: PUSH
20448: LD_INT 1
20450: ST_TO_ADDR
// if p3 = 27 then
20451: LD_VAR 0 3
20455: PUSH
20456: LD_INT 27
20458: EQUAL
20459: IFFALSE 20469
// sAI := true ;
20461: LD_ADDR_EXP 109
20465: PUSH
20466: LD_INT 1
20468: ST_TO_ADDR
// if p3 = 28 then
20469: LD_VAR 0 3
20473: PUSH
20474: LD_INT 28
20476: EQUAL
20477: IFFALSE 20487
// sCargo := true ;
20479: LD_ADDR_EXP 112
20483: PUSH
20484: LD_INT 1
20486: ST_TO_ADDR
// if p3 = 29 then
20487: LD_VAR 0 3
20491: PUSH
20492: LD_INT 29
20494: EQUAL
20495: IFFALSE 20505
// sDLaser := true ;
20497: LD_ADDR_EXP 113
20501: PUSH
20502: LD_INT 1
20504: ST_TO_ADDR
// if p3 = 30 then
20505: LD_VAR 0 3
20509: PUSH
20510: LD_INT 30
20512: EQUAL
20513: IFFALSE 20523
// sExchange := true ;
20515: LD_ADDR_EXP 114
20519: PUSH
20520: LD_INT 1
20522: ST_TO_ADDR
// if p3 = 31 then
20523: LD_VAR 0 3
20527: PUSH
20528: LD_INT 31
20530: EQUAL
20531: IFFALSE 20541
// sFac := true ;
20533: LD_ADDR_EXP 115
20537: PUSH
20538: LD_INT 1
20540: ST_TO_ADDR
// if p3 = 32 then
20541: LD_VAR 0 3
20545: PUSH
20546: LD_INT 32
20548: EQUAL
20549: IFFALSE 20559
// sPower := true ;
20551: LD_ADDR_EXP 116
20555: PUSH
20556: LD_INT 1
20558: ST_TO_ADDR
// if p3 = 33 then
20559: LD_VAR 0 3
20563: PUSH
20564: LD_INT 33
20566: EQUAL
20567: IFFALSE 20577
// sRandom := true ;
20569: LD_ADDR_EXP 117
20573: PUSH
20574: LD_INT 1
20576: ST_TO_ADDR
// if p3 = 34 then
20577: LD_VAR 0 3
20581: PUSH
20582: LD_INT 34
20584: EQUAL
20585: IFFALSE 20595
// sShield := true ;
20587: LD_ADDR_EXP 118
20591: PUSH
20592: LD_INT 1
20594: ST_TO_ADDR
// if p3 = 35 then
20595: LD_VAR 0 3
20599: PUSH
20600: LD_INT 35
20602: EQUAL
20603: IFFALSE 20613
// sTime := true ;
20605: LD_ADDR_EXP 119
20609: PUSH
20610: LD_INT 1
20612: ST_TO_ADDR
// if p3 = 36 then
20613: LD_VAR 0 3
20617: PUSH
20618: LD_INT 36
20620: EQUAL
20621: IFFALSE 20631
// sTools := true ;
20623: LD_ADDR_EXP 120
20627: PUSH
20628: LD_INT 1
20630: ST_TO_ADDR
// if p3 = 101 then
20631: LD_VAR 0 3
20635: PUSH
20636: LD_INT 101
20638: EQUAL
20639: IFFALSE 20649
// sSold := true ;
20641: LD_ADDR_EXP 85
20645: PUSH
20646: LD_INT 1
20648: ST_TO_ADDR
// if p3 = 102 then
20649: LD_VAR 0 3
20653: PUSH
20654: LD_INT 102
20656: EQUAL
20657: IFFALSE 20667
// sDiff := true ;
20659: LD_ADDR_EXP 86
20663: PUSH
20664: LD_INT 1
20666: ST_TO_ADDR
// if p3 = 103 then
20667: LD_VAR 0 3
20671: PUSH
20672: LD_INT 103
20674: EQUAL
20675: IFFALSE 20685
// sFog := true ;
20677: LD_ADDR_EXP 89
20681: PUSH
20682: LD_INT 1
20684: ST_TO_ADDR
// if p3 = 104 then
20685: LD_VAR 0 3
20689: PUSH
20690: LD_INT 104
20692: EQUAL
20693: IFFALSE 20703
// sReset := true ;
20695: LD_ADDR_EXP 90
20699: PUSH
20700: LD_INT 1
20702: ST_TO_ADDR
// if p3 = 105 then
20703: LD_VAR 0 3
20707: PUSH
20708: LD_INT 105
20710: EQUAL
20711: IFFALSE 20721
// sSun := true ;
20713: LD_ADDR_EXP 91
20717: PUSH
20718: LD_INT 1
20720: ST_TO_ADDR
// if p3 = 106 then
20721: LD_VAR 0 3
20725: PUSH
20726: LD_INT 106
20728: EQUAL
20729: IFFALSE 20739
// sTiger := true ;
20731: LD_ADDR_EXP 87
20735: PUSH
20736: LD_INT 1
20738: ST_TO_ADDR
// if p3 = 107 then
20739: LD_VAR 0 3
20743: PUSH
20744: LD_INT 107
20746: EQUAL
20747: IFFALSE 20757
// sBomb := true ;
20749: LD_ADDR_EXP 88
20753: PUSH
20754: LD_INT 1
20756: ST_TO_ADDR
// if p3 = 108 then
20757: LD_VAR 0 3
20761: PUSH
20762: LD_INT 108
20764: EQUAL
20765: IFFALSE 20775
// sWound := true ;
20767: LD_ADDR_EXP 96
20771: PUSH
20772: LD_INT 1
20774: ST_TO_ADDR
// if p3 = 109 then
20775: LD_VAR 0 3
20779: PUSH
20780: LD_INT 109
20782: EQUAL
20783: IFFALSE 20793
// sBetray := true ;
20785: LD_ADDR_EXP 100
20789: PUSH
20790: LD_INT 1
20792: ST_TO_ADDR
// if p3 = 110 then
20793: LD_VAR 0 3
20797: PUSH
20798: LD_INT 110
20800: EQUAL
20801: IFFALSE 20811
// sContamin := true ;
20803: LD_ADDR_EXP 101
20807: PUSH
20808: LD_INT 1
20810: ST_TO_ADDR
// if p3 = 111 then
20811: LD_VAR 0 3
20815: PUSH
20816: LD_INT 111
20818: EQUAL
20819: IFFALSE 20829
// sOil := true ;
20821: LD_ADDR_EXP 103
20825: PUSH
20826: LD_INT 1
20828: ST_TO_ADDR
// if p3 = 112 then
20829: LD_VAR 0 3
20833: PUSH
20834: LD_INT 112
20836: EQUAL
20837: IFFALSE 20847
// sStu := true ;
20839: LD_ADDR_EXP 107
20843: PUSH
20844: LD_INT 1
20846: ST_TO_ADDR
// if p3 = 113 then
20847: LD_VAR 0 3
20851: PUSH
20852: LD_INT 113
20854: EQUAL
20855: IFFALSE 20865
// sBazooka := true ;
20857: LD_ADDR_EXP 110
20861: PUSH
20862: LD_INT 1
20864: ST_TO_ADDR
// if p3 = 114 then
20865: LD_VAR 0 3
20869: PUSH
20870: LD_INT 114
20872: EQUAL
20873: IFFALSE 20883
// sMortar := true ;
20875: LD_ADDR_EXP 111
20879: PUSH
20880: LD_INT 1
20882: ST_TO_ADDR
// if p3 = 115 then
20883: LD_VAR 0 3
20887: PUSH
20888: LD_INT 115
20890: EQUAL
20891: IFFALSE 20901
// sRanger := true ;
20893: LD_ADDR_EXP 121
20897: PUSH
20898: LD_INT 1
20900: ST_TO_ADDR
// if p3 = 116 then
20901: LD_VAR 0 3
20905: PUSH
20906: LD_INT 116
20908: EQUAL
20909: IFFALSE 20919
// sComputer := true ;
20911: LD_ADDR_EXP 122
20915: PUSH
20916: LD_INT 1
20918: ST_TO_ADDR
// if p3 = 117 then
20919: LD_VAR 0 3
20923: PUSH
20924: LD_INT 117
20926: EQUAL
20927: IFFALSE 20937
// s30 := true ;
20929: LD_ADDR_EXP 123
20933: PUSH
20934: LD_INT 1
20936: ST_TO_ADDR
// if p3 = 118 then
20937: LD_VAR 0 3
20941: PUSH
20942: LD_INT 118
20944: EQUAL
20945: IFFALSE 20955
// s60 := true ;
20947: LD_ADDR_EXP 124
20951: PUSH
20952: LD_INT 1
20954: ST_TO_ADDR
// end ; if p2 = 101 then
20955: LD_VAR 0 2
20959: PUSH
20960: LD_INT 101
20962: EQUAL
20963: IFFALSE 21091
// begin case p3 of 1 :
20965: LD_VAR 0 3
20969: PUSH
20970: LD_INT 1
20972: DOUBLE
20973: EQUAL
20974: IFTRUE 20978
20976: GO 20985
20978: POP
// hHackUnlimitedResources ; 2 :
20979: CALL 33189 0 0
20983: GO 21091
20985: LD_INT 2
20987: DOUBLE
20988: EQUAL
20989: IFTRUE 20993
20991: GO 21000
20993: POP
// hHackSetLevel10 ; 3 :
20994: CALL 33322 0 0
20998: GO 21091
21000: LD_INT 3
21002: DOUBLE
21003: EQUAL
21004: IFTRUE 21008
21006: GO 21015
21008: POP
// hHackSetLevel10YourUnits ; 4 :
21009: CALL 33407 0 0
21013: GO 21091
21015: LD_INT 4
21017: DOUBLE
21018: EQUAL
21019: IFTRUE 21023
21021: GO 21030
21023: POP
// hHackInvincible ; 5 :
21024: CALL 33855 0 0
21028: GO 21091
21030: LD_INT 5
21032: DOUBLE
21033: EQUAL
21034: IFTRUE 21038
21036: GO 21045
21038: POP
// hHackInvisible ; 6 :
21039: CALL 33966 0 0
21043: GO 21091
21045: LD_INT 6
21047: DOUBLE
21048: EQUAL
21049: IFTRUE 21053
21051: GO 21060
21053: POP
// hHackChangeYourSide ; 7 :
21054: CALL 34023 0 0
21058: GO 21091
21060: LD_INT 7
21062: DOUBLE
21063: EQUAL
21064: IFTRUE 21068
21066: GO 21075
21068: POP
// hHackChangeUnitSide ; 8 :
21069: CALL 34065 0 0
21073: GO 21091
21075: LD_INT 8
21077: DOUBLE
21078: EQUAL
21079: IFTRUE 21083
21081: GO 21090
21083: POP
// hHackFog ; end ;
21084: CALL 34166 0 0
21088: GO 21091
21090: POP
// end ; end ;
21091: LD_VAR 0 7
21095: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21096: GO 21098
21098: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21099: LD_STRING initStreamRollete();
21101: PPUSH
21102: CALL_OW 559
// InitStreamMode ;
21106: CALL 21118 0 0
// DefineStreamItems ( false ) ;
21110: LD_INT 0
21112: PPUSH
21113: CALL 21582 0 1
// end ;
21117: END
// function InitStreamMode ; begin
21118: LD_INT 0
21120: PPUSH
// streamModeActive := false ;
21121: LD_ADDR_EXP 68
21125: PUSH
21126: LD_INT 0
21128: ST_TO_ADDR
// normalCounter := 36 ;
21129: LD_ADDR_EXP 69
21133: PUSH
21134: LD_INT 36
21136: ST_TO_ADDR
// hardcoreCounter := 18 ;
21137: LD_ADDR_EXP 70
21141: PUSH
21142: LD_INT 18
21144: ST_TO_ADDR
// sRocket := false ;
21145: LD_ADDR_EXP 73
21149: PUSH
21150: LD_INT 0
21152: ST_TO_ADDR
// sSpeed := false ;
21153: LD_ADDR_EXP 72
21157: PUSH
21158: LD_INT 0
21160: ST_TO_ADDR
// sEngine := false ;
21161: LD_ADDR_EXP 74
21165: PUSH
21166: LD_INT 0
21168: ST_TO_ADDR
// sSpec := false ;
21169: LD_ADDR_EXP 71
21173: PUSH
21174: LD_INT 0
21176: ST_TO_ADDR
// sLevel := false ;
21177: LD_ADDR_EXP 75
21181: PUSH
21182: LD_INT 0
21184: ST_TO_ADDR
// sArmoury := false ;
21185: LD_ADDR_EXP 76
21189: PUSH
21190: LD_INT 0
21192: ST_TO_ADDR
// sRadar := false ;
21193: LD_ADDR_EXP 77
21197: PUSH
21198: LD_INT 0
21200: ST_TO_ADDR
// sBunker := false ;
21201: LD_ADDR_EXP 78
21205: PUSH
21206: LD_INT 0
21208: ST_TO_ADDR
// sHack := false ;
21209: LD_ADDR_EXP 79
21213: PUSH
21214: LD_INT 0
21216: ST_TO_ADDR
// sFire := false ;
21217: LD_ADDR_EXP 80
21221: PUSH
21222: LD_INT 0
21224: ST_TO_ADDR
// sRefresh := false ;
21225: LD_ADDR_EXP 81
21229: PUSH
21230: LD_INT 0
21232: ST_TO_ADDR
// sExp := false ;
21233: LD_ADDR_EXP 82
21237: PUSH
21238: LD_INT 0
21240: ST_TO_ADDR
// sDepot := false ;
21241: LD_ADDR_EXP 83
21245: PUSH
21246: LD_INT 0
21248: ST_TO_ADDR
// sFlag := false ;
21249: LD_ADDR_EXP 84
21253: PUSH
21254: LD_INT 0
21256: ST_TO_ADDR
// sKamikadze := false ;
21257: LD_ADDR_EXP 92
21261: PUSH
21262: LD_INT 0
21264: ST_TO_ADDR
// sTroll := false ;
21265: LD_ADDR_EXP 93
21269: PUSH
21270: LD_INT 0
21272: ST_TO_ADDR
// sSlow := false ;
21273: LD_ADDR_EXP 94
21277: PUSH
21278: LD_INT 0
21280: ST_TO_ADDR
// sLack := false ;
21281: LD_ADDR_EXP 95
21285: PUSH
21286: LD_INT 0
21288: ST_TO_ADDR
// sTank := false ;
21289: LD_ADDR_EXP 97
21293: PUSH
21294: LD_INT 0
21296: ST_TO_ADDR
// sRemote := false ;
21297: LD_ADDR_EXP 98
21301: PUSH
21302: LD_INT 0
21304: ST_TO_ADDR
// sPowell := false ;
21305: LD_ADDR_EXP 99
21309: PUSH
21310: LD_INT 0
21312: ST_TO_ADDR
// sTeleport := false ;
21313: LD_ADDR_EXP 102
21317: PUSH
21318: LD_INT 0
21320: ST_TO_ADDR
// sOilTower := false ;
21321: LD_ADDR_EXP 104
21325: PUSH
21326: LD_INT 0
21328: ST_TO_ADDR
// sShovel := false ;
21329: LD_ADDR_EXP 105
21333: PUSH
21334: LD_INT 0
21336: ST_TO_ADDR
// sSheik := false ;
21337: LD_ADDR_EXP 106
21341: PUSH
21342: LD_INT 0
21344: ST_TO_ADDR
// sEarthquake := false ;
21345: LD_ADDR_EXP 108
21349: PUSH
21350: LD_INT 0
21352: ST_TO_ADDR
// sAI := false ;
21353: LD_ADDR_EXP 109
21357: PUSH
21358: LD_INT 0
21360: ST_TO_ADDR
// sCargo := false ;
21361: LD_ADDR_EXP 112
21365: PUSH
21366: LD_INT 0
21368: ST_TO_ADDR
// sDLaser := false ;
21369: LD_ADDR_EXP 113
21373: PUSH
21374: LD_INT 0
21376: ST_TO_ADDR
// sExchange := false ;
21377: LD_ADDR_EXP 114
21381: PUSH
21382: LD_INT 0
21384: ST_TO_ADDR
// sFac := false ;
21385: LD_ADDR_EXP 115
21389: PUSH
21390: LD_INT 0
21392: ST_TO_ADDR
// sPower := false ;
21393: LD_ADDR_EXP 116
21397: PUSH
21398: LD_INT 0
21400: ST_TO_ADDR
// sRandom := false ;
21401: LD_ADDR_EXP 117
21405: PUSH
21406: LD_INT 0
21408: ST_TO_ADDR
// sShield := false ;
21409: LD_ADDR_EXP 118
21413: PUSH
21414: LD_INT 0
21416: ST_TO_ADDR
// sTime := false ;
21417: LD_ADDR_EXP 119
21421: PUSH
21422: LD_INT 0
21424: ST_TO_ADDR
// sTools := false ;
21425: LD_ADDR_EXP 120
21429: PUSH
21430: LD_INT 0
21432: ST_TO_ADDR
// sSold := false ;
21433: LD_ADDR_EXP 85
21437: PUSH
21438: LD_INT 0
21440: ST_TO_ADDR
// sDiff := false ;
21441: LD_ADDR_EXP 86
21445: PUSH
21446: LD_INT 0
21448: ST_TO_ADDR
// sFog := false ;
21449: LD_ADDR_EXP 89
21453: PUSH
21454: LD_INT 0
21456: ST_TO_ADDR
// sReset := false ;
21457: LD_ADDR_EXP 90
21461: PUSH
21462: LD_INT 0
21464: ST_TO_ADDR
// sSun := false ;
21465: LD_ADDR_EXP 91
21469: PUSH
21470: LD_INT 0
21472: ST_TO_ADDR
// sTiger := false ;
21473: LD_ADDR_EXP 87
21477: PUSH
21478: LD_INT 0
21480: ST_TO_ADDR
// sBomb := false ;
21481: LD_ADDR_EXP 88
21485: PUSH
21486: LD_INT 0
21488: ST_TO_ADDR
// sWound := false ;
21489: LD_ADDR_EXP 96
21493: PUSH
21494: LD_INT 0
21496: ST_TO_ADDR
// sBetray := false ;
21497: LD_ADDR_EXP 100
21501: PUSH
21502: LD_INT 0
21504: ST_TO_ADDR
// sContamin := false ;
21505: LD_ADDR_EXP 101
21509: PUSH
21510: LD_INT 0
21512: ST_TO_ADDR
// sOil := false ;
21513: LD_ADDR_EXP 103
21517: PUSH
21518: LD_INT 0
21520: ST_TO_ADDR
// sStu := false ;
21521: LD_ADDR_EXP 107
21525: PUSH
21526: LD_INT 0
21528: ST_TO_ADDR
// sBazooka := false ;
21529: LD_ADDR_EXP 110
21533: PUSH
21534: LD_INT 0
21536: ST_TO_ADDR
// sMortar := false ;
21537: LD_ADDR_EXP 111
21541: PUSH
21542: LD_INT 0
21544: ST_TO_ADDR
// sRanger := false ;
21545: LD_ADDR_EXP 121
21549: PUSH
21550: LD_INT 0
21552: ST_TO_ADDR
// sComputer := false ;
21553: LD_ADDR_EXP 122
21557: PUSH
21558: LD_INT 0
21560: ST_TO_ADDR
// s30 := false ;
21561: LD_ADDR_EXP 123
21565: PUSH
21566: LD_INT 0
21568: ST_TO_ADDR
// s60 := false ;
21569: LD_ADDR_EXP 124
21573: PUSH
21574: LD_INT 0
21576: ST_TO_ADDR
// end ;
21577: LD_VAR 0 1
21581: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21582: LD_INT 0
21584: PPUSH
21585: PPUSH
21586: PPUSH
21587: PPUSH
21588: PPUSH
21589: PPUSH
21590: PPUSH
// result := [ ] ;
21591: LD_ADDR_VAR 0 2
21595: PUSH
21596: EMPTY
21597: ST_TO_ADDR
// if campaign_id = 1 then
21598: LD_OWVAR 69
21602: PUSH
21603: LD_INT 1
21605: EQUAL
21606: IFFALSE 24772
// begin case mission_number of 1 :
21608: LD_OWVAR 70
21612: PUSH
21613: LD_INT 1
21615: DOUBLE
21616: EQUAL
21617: IFTRUE 21621
21619: GO 21697
21621: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21622: LD_ADDR_VAR 0 2
21626: PUSH
21627: LD_INT 2
21629: PUSH
21630: LD_INT 4
21632: PUSH
21633: LD_INT 11
21635: PUSH
21636: LD_INT 12
21638: PUSH
21639: LD_INT 15
21641: PUSH
21642: LD_INT 16
21644: PUSH
21645: LD_INT 22
21647: PUSH
21648: LD_INT 23
21650: PUSH
21651: LD_INT 26
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 101
21667: PUSH
21668: LD_INT 102
21670: PUSH
21671: LD_INT 106
21673: PUSH
21674: LD_INT 116
21676: PUSH
21677: LD_INT 117
21679: PUSH
21680: LD_INT 118
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: ST_TO_ADDR
21695: GO 24770
21697: LD_INT 2
21699: DOUBLE
21700: EQUAL
21701: IFTRUE 21705
21703: GO 21789
21705: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21706: LD_ADDR_VAR 0 2
21710: PUSH
21711: LD_INT 2
21713: PUSH
21714: LD_INT 4
21716: PUSH
21717: LD_INT 11
21719: PUSH
21720: LD_INT 12
21722: PUSH
21723: LD_INT 15
21725: PUSH
21726: LD_INT 16
21728: PUSH
21729: LD_INT 22
21731: PUSH
21732: LD_INT 23
21734: PUSH
21735: LD_INT 26
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 101
21751: PUSH
21752: LD_INT 102
21754: PUSH
21755: LD_INT 105
21757: PUSH
21758: LD_INT 106
21760: PUSH
21761: LD_INT 108
21763: PUSH
21764: LD_INT 116
21766: PUSH
21767: LD_INT 117
21769: PUSH
21770: LD_INT 118
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: ST_TO_ADDR
21787: GO 24770
21789: LD_INT 3
21791: DOUBLE
21792: EQUAL
21793: IFTRUE 21797
21795: GO 21885
21797: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21798: LD_ADDR_VAR 0 2
21802: PUSH
21803: LD_INT 2
21805: PUSH
21806: LD_INT 4
21808: PUSH
21809: LD_INT 5
21811: PUSH
21812: LD_INT 11
21814: PUSH
21815: LD_INT 12
21817: PUSH
21818: LD_INT 15
21820: PUSH
21821: LD_INT 16
21823: PUSH
21824: LD_INT 22
21826: PUSH
21827: LD_INT 26
21829: PUSH
21830: LD_INT 36
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 101
21847: PUSH
21848: LD_INT 102
21850: PUSH
21851: LD_INT 105
21853: PUSH
21854: LD_INT 106
21856: PUSH
21857: LD_INT 108
21859: PUSH
21860: LD_INT 116
21862: PUSH
21863: LD_INT 117
21865: PUSH
21866: LD_INT 118
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: ST_TO_ADDR
21883: GO 24770
21885: LD_INT 4
21887: DOUBLE
21888: EQUAL
21889: IFTRUE 21893
21891: GO 21989
21893: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21894: LD_ADDR_VAR 0 2
21898: PUSH
21899: LD_INT 2
21901: PUSH
21902: LD_INT 4
21904: PUSH
21905: LD_INT 5
21907: PUSH
21908: LD_INT 8
21910: PUSH
21911: LD_INT 11
21913: PUSH
21914: LD_INT 12
21916: PUSH
21917: LD_INT 15
21919: PUSH
21920: LD_INT 16
21922: PUSH
21923: LD_INT 22
21925: PUSH
21926: LD_INT 23
21928: PUSH
21929: LD_INT 26
21931: PUSH
21932: LD_INT 36
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 101
21951: PUSH
21952: LD_INT 102
21954: PUSH
21955: LD_INT 105
21957: PUSH
21958: LD_INT 106
21960: PUSH
21961: LD_INT 108
21963: PUSH
21964: LD_INT 116
21966: PUSH
21967: LD_INT 117
21969: PUSH
21970: LD_INT 118
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: ST_TO_ADDR
21987: GO 24770
21989: LD_INT 5
21991: DOUBLE
21992: EQUAL
21993: IFTRUE 21997
21995: GO 22109
21997: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21998: LD_ADDR_VAR 0 2
22002: PUSH
22003: LD_INT 2
22005: PUSH
22006: LD_INT 4
22008: PUSH
22009: LD_INT 5
22011: PUSH
22012: LD_INT 6
22014: PUSH
22015: LD_INT 8
22017: PUSH
22018: LD_INT 11
22020: PUSH
22021: LD_INT 12
22023: PUSH
22024: LD_INT 15
22026: PUSH
22027: LD_INT 16
22029: PUSH
22030: LD_INT 22
22032: PUSH
22033: LD_INT 23
22035: PUSH
22036: LD_INT 25
22038: PUSH
22039: LD_INT 26
22041: PUSH
22042: LD_INT 36
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 101
22063: PUSH
22064: LD_INT 102
22066: PUSH
22067: LD_INT 105
22069: PUSH
22070: LD_INT 106
22072: PUSH
22073: LD_INT 108
22075: PUSH
22076: LD_INT 109
22078: PUSH
22079: LD_INT 112
22081: PUSH
22082: LD_INT 116
22084: PUSH
22085: LD_INT 117
22087: PUSH
22088: LD_INT 118
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: ST_TO_ADDR
22107: GO 24770
22109: LD_INT 6
22111: DOUBLE
22112: EQUAL
22113: IFTRUE 22117
22115: GO 22249
22117: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22118: LD_ADDR_VAR 0 2
22122: PUSH
22123: LD_INT 2
22125: PUSH
22126: LD_INT 4
22128: PUSH
22129: LD_INT 5
22131: PUSH
22132: LD_INT 6
22134: PUSH
22135: LD_INT 8
22137: PUSH
22138: LD_INT 11
22140: PUSH
22141: LD_INT 12
22143: PUSH
22144: LD_INT 15
22146: PUSH
22147: LD_INT 16
22149: PUSH
22150: LD_INT 20
22152: PUSH
22153: LD_INT 21
22155: PUSH
22156: LD_INT 22
22158: PUSH
22159: LD_INT 23
22161: PUSH
22162: LD_INT 25
22164: PUSH
22165: LD_INT 26
22167: PUSH
22168: LD_INT 30
22170: PUSH
22171: LD_INT 31
22173: PUSH
22174: LD_INT 32
22176: PUSH
22177: LD_INT 36
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 101
22203: PUSH
22204: LD_INT 102
22206: PUSH
22207: LD_INT 105
22209: PUSH
22210: LD_INT 106
22212: PUSH
22213: LD_INT 108
22215: PUSH
22216: LD_INT 109
22218: PUSH
22219: LD_INT 112
22221: PUSH
22222: LD_INT 116
22224: PUSH
22225: LD_INT 117
22227: PUSH
22228: LD_INT 118
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: ST_TO_ADDR
22247: GO 24770
22249: LD_INT 7
22251: DOUBLE
22252: EQUAL
22253: IFTRUE 22257
22255: GO 22369
22257: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22258: LD_ADDR_VAR 0 2
22262: PUSH
22263: LD_INT 2
22265: PUSH
22266: LD_INT 4
22268: PUSH
22269: LD_INT 5
22271: PUSH
22272: LD_INT 7
22274: PUSH
22275: LD_INT 11
22277: PUSH
22278: LD_INT 12
22280: PUSH
22281: LD_INT 15
22283: PUSH
22284: LD_INT 16
22286: PUSH
22287: LD_INT 20
22289: PUSH
22290: LD_INT 21
22292: PUSH
22293: LD_INT 22
22295: PUSH
22296: LD_INT 23
22298: PUSH
22299: LD_INT 25
22301: PUSH
22302: LD_INT 26
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 101
22323: PUSH
22324: LD_INT 102
22326: PUSH
22327: LD_INT 103
22329: PUSH
22330: LD_INT 105
22332: PUSH
22333: LD_INT 106
22335: PUSH
22336: LD_INT 108
22338: PUSH
22339: LD_INT 112
22341: PUSH
22342: LD_INT 116
22344: PUSH
22345: LD_INT 117
22347: PUSH
22348: LD_INT 118
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: ST_TO_ADDR
22367: GO 24770
22369: LD_INT 8
22371: DOUBLE
22372: EQUAL
22373: IFTRUE 22377
22375: GO 22517
22377: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22378: LD_ADDR_VAR 0 2
22382: PUSH
22383: LD_INT 2
22385: PUSH
22386: LD_INT 4
22388: PUSH
22389: LD_INT 5
22391: PUSH
22392: LD_INT 6
22394: PUSH
22395: LD_INT 7
22397: PUSH
22398: LD_INT 8
22400: PUSH
22401: LD_INT 11
22403: PUSH
22404: LD_INT 12
22406: PUSH
22407: LD_INT 15
22409: PUSH
22410: LD_INT 16
22412: PUSH
22413: LD_INT 20
22415: PUSH
22416: LD_INT 21
22418: PUSH
22419: LD_INT 22
22421: PUSH
22422: LD_INT 23
22424: PUSH
22425: LD_INT 25
22427: PUSH
22428: LD_INT 26
22430: PUSH
22431: LD_INT 30
22433: PUSH
22434: LD_INT 31
22436: PUSH
22437: LD_INT 32
22439: PUSH
22440: LD_INT 36
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 101
22467: PUSH
22468: LD_INT 102
22470: PUSH
22471: LD_INT 103
22473: PUSH
22474: LD_INT 105
22476: PUSH
22477: LD_INT 106
22479: PUSH
22480: LD_INT 108
22482: PUSH
22483: LD_INT 109
22485: PUSH
22486: LD_INT 112
22488: PUSH
22489: LD_INT 116
22491: PUSH
22492: LD_INT 117
22494: PUSH
22495: LD_INT 118
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: ST_TO_ADDR
22515: GO 24770
22517: LD_INT 9
22519: DOUBLE
22520: EQUAL
22521: IFTRUE 22525
22523: GO 22673
22525: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22526: LD_ADDR_VAR 0 2
22530: PUSH
22531: LD_INT 2
22533: PUSH
22534: LD_INT 4
22536: PUSH
22537: LD_INT 5
22539: PUSH
22540: LD_INT 6
22542: PUSH
22543: LD_INT 7
22545: PUSH
22546: LD_INT 8
22548: PUSH
22549: LD_INT 11
22551: PUSH
22552: LD_INT 12
22554: PUSH
22555: LD_INT 15
22557: PUSH
22558: LD_INT 16
22560: PUSH
22561: LD_INT 20
22563: PUSH
22564: LD_INT 21
22566: PUSH
22567: LD_INT 22
22569: PUSH
22570: LD_INT 23
22572: PUSH
22573: LD_INT 25
22575: PUSH
22576: LD_INT 26
22578: PUSH
22579: LD_INT 28
22581: PUSH
22582: LD_INT 30
22584: PUSH
22585: LD_INT 31
22587: PUSH
22588: LD_INT 32
22590: PUSH
22591: LD_INT 36
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 101
22619: PUSH
22620: LD_INT 102
22622: PUSH
22623: LD_INT 103
22625: PUSH
22626: LD_INT 105
22628: PUSH
22629: LD_INT 106
22631: PUSH
22632: LD_INT 108
22634: PUSH
22635: LD_INT 109
22637: PUSH
22638: LD_INT 112
22640: PUSH
22641: LD_INT 114
22643: PUSH
22644: LD_INT 116
22646: PUSH
22647: LD_INT 117
22649: PUSH
22650: LD_INT 118
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: ST_TO_ADDR
22671: GO 24770
22673: LD_INT 10
22675: DOUBLE
22676: EQUAL
22677: IFTRUE 22681
22679: GO 22877
22681: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22682: LD_ADDR_VAR 0 2
22686: PUSH
22687: LD_INT 2
22689: PUSH
22690: LD_INT 4
22692: PUSH
22693: LD_INT 5
22695: PUSH
22696: LD_INT 6
22698: PUSH
22699: LD_INT 7
22701: PUSH
22702: LD_INT 8
22704: PUSH
22705: LD_INT 9
22707: PUSH
22708: LD_INT 10
22710: PUSH
22711: LD_INT 11
22713: PUSH
22714: LD_INT 12
22716: PUSH
22717: LD_INT 13
22719: PUSH
22720: LD_INT 14
22722: PUSH
22723: LD_INT 15
22725: PUSH
22726: LD_INT 16
22728: PUSH
22729: LD_INT 17
22731: PUSH
22732: LD_INT 18
22734: PUSH
22735: LD_INT 19
22737: PUSH
22738: LD_INT 20
22740: PUSH
22741: LD_INT 21
22743: PUSH
22744: LD_INT 22
22746: PUSH
22747: LD_INT 23
22749: PUSH
22750: LD_INT 24
22752: PUSH
22753: LD_INT 25
22755: PUSH
22756: LD_INT 26
22758: PUSH
22759: LD_INT 28
22761: PUSH
22762: LD_INT 30
22764: PUSH
22765: LD_INT 31
22767: PUSH
22768: LD_INT 32
22770: PUSH
22771: LD_INT 36
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 101
22807: PUSH
22808: LD_INT 102
22810: PUSH
22811: LD_INT 103
22813: PUSH
22814: LD_INT 104
22816: PUSH
22817: LD_INT 105
22819: PUSH
22820: LD_INT 106
22822: PUSH
22823: LD_INT 107
22825: PUSH
22826: LD_INT 108
22828: PUSH
22829: LD_INT 109
22831: PUSH
22832: LD_INT 110
22834: PUSH
22835: LD_INT 111
22837: PUSH
22838: LD_INT 112
22840: PUSH
22841: LD_INT 114
22843: PUSH
22844: LD_INT 116
22846: PUSH
22847: LD_INT 117
22849: PUSH
22850: LD_INT 118
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: ST_TO_ADDR
22875: GO 24770
22877: LD_INT 11
22879: DOUBLE
22880: EQUAL
22881: IFTRUE 22885
22883: GO 23089
22885: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22886: LD_ADDR_VAR 0 2
22890: PUSH
22891: LD_INT 2
22893: PUSH
22894: LD_INT 3
22896: PUSH
22897: LD_INT 4
22899: PUSH
22900: LD_INT 5
22902: PUSH
22903: LD_INT 6
22905: PUSH
22906: LD_INT 7
22908: PUSH
22909: LD_INT 8
22911: PUSH
22912: LD_INT 9
22914: PUSH
22915: LD_INT 10
22917: PUSH
22918: LD_INT 11
22920: PUSH
22921: LD_INT 12
22923: PUSH
22924: LD_INT 13
22926: PUSH
22927: LD_INT 14
22929: PUSH
22930: LD_INT 15
22932: PUSH
22933: LD_INT 16
22935: PUSH
22936: LD_INT 17
22938: PUSH
22939: LD_INT 18
22941: PUSH
22942: LD_INT 19
22944: PUSH
22945: LD_INT 20
22947: PUSH
22948: LD_INT 21
22950: PUSH
22951: LD_INT 22
22953: PUSH
22954: LD_INT 23
22956: PUSH
22957: LD_INT 24
22959: PUSH
22960: LD_INT 25
22962: PUSH
22963: LD_INT 26
22965: PUSH
22966: LD_INT 28
22968: PUSH
22969: LD_INT 30
22971: PUSH
22972: LD_INT 31
22974: PUSH
22975: LD_INT 32
22977: PUSH
22978: LD_INT 34
22980: PUSH
22981: LD_INT 36
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 101
23019: PUSH
23020: LD_INT 102
23022: PUSH
23023: LD_INT 103
23025: PUSH
23026: LD_INT 104
23028: PUSH
23029: LD_INT 105
23031: PUSH
23032: LD_INT 106
23034: PUSH
23035: LD_INT 107
23037: PUSH
23038: LD_INT 108
23040: PUSH
23041: LD_INT 109
23043: PUSH
23044: LD_INT 110
23046: PUSH
23047: LD_INT 111
23049: PUSH
23050: LD_INT 112
23052: PUSH
23053: LD_INT 114
23055: PUSH
23056: LD_INT 116
23058: PUSH
23059: LD_INT 117
23061: PUSH
23062: LD_INT 118
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: ST_TO_ADDR
23087: GO 24770
23089: LD_INT 12
23091: DOUBLE
23092: EQUAL
23093: IFTRUE 23097
23095: GO 23317
23097: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23098: LD_ADDR_VAR 0 2
23102: PUSH
23103: LD_INT 1
23105: PUSH
23106: LD_INT 2
23108: PUSH
23109: LD_INT 3
23111: PUSH
23112: LD_INT 4
23114: PUSH
23115: LD_INT 5
23117: PUSH
23118: LD_INT 6
23120: PUSH
23121: LD_INT 7
23123: PUSH
23124: LD_INT 8
23126: PUSH
23127: LD_INT 9
23129: PUSH
23130: LD_INT 10
23132: PUSH
23133: LD_INT 11
23135: PUSH
23136: LD_INT 12
23138: PUSH
23139: LD_INT 13
23141: PUSH
23142: LD_INT 14
23144: PUSH
23145: LD_INT 15
23147: PUSH
23148: LD_INT 16
23150: PUSH
23151: LD_INT 17
23153: PUSH
23154: LD_INT 18
23156: PUSH
23157: LD_INT 19
23159: PUSH
23160: LD_INT 20
23162: PUSH
23163: LD_INT 21
23165: PUSH
23166: LD_INT 22
23168: PUSH
23169: LD_INT 23
23171: PUSH
23172: LD_INT 24
23174: PUSH
23175: LD_INT 25
23177: PUSH
23178: LD_INT 26
23180: PUSH
23181: LD_INT 27
23183: PUSH
23184: LD_INT 28
23186: PUSH
23187: LD_INT 30
23189: PUSH
23190: LD_INT 31
23192: PUSH
23193: LD_INT 32
23195: PUSH
23196: LD_INT 33
23198: PUSH
23199: LD_INT 34
23201: PUSH
23202: LD_INT 36
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 101
23243: PUSH
23244: LD_INT 102
23246: PUSH
23247: LD_INT 103
23249: PUSH
23250: LD_INT 104
23252: PUSH
23253: LD_INT 105
23255: PUSH
23256: LD_INT 106
23258: PUSH
23259: LD_INT 107
23261: PUSH
23262: LD_INT 108
23264: PUSH
23265: LD_INT 109
23267: PUSH
23268: LD_INT 110
23270: PUSH
23271: LD_INT 111
23273: PUSH
23274: LD_INT 112
23276: PUSH
23277: LD_INT 113
23279: PUSH
23280: LD_INT 114
23282: PUSH
23283: LD_INT 116
23285: PUSH
23286: LD_INT 117
23288: PUSH
23289: LD_INT 118
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: ST_TO_ADDR
23315: GO 24770
23317: LD_INT 13
23319: DOUBLE
23320: EQUAL
23321: IFTRUE 23325
23323: GO 23533
23325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23326: LD_ADDR_VAR 0 2
23330: PUSH
23331: LD_INT 1
23333: PUSH
23334: LD_INT 2
23336: PUSH
23337: LD_INT 3
23339: PUSH
23340: LD_INT 4
23342: PUSH
23343: LD_INT 5
23345: PUSH
23346: LD_INT 8
23348: PUSH
23349: LD_INT 9
23351: PUSH
23352: LD_INT 10
23354: PUSH
23355: LD_INT 11
23357: PUSH
23358: LD_INT 12
23360: PUSH
23361: LD_INT 14
23363: PUSH
23364: LD_INT 15
23366: PUSH
23367: LD_INT 16
23369: PUSH
23370: LD_INT 17
23372: PUSH
23373: LD_INT 18
23375: PUSH
23376: LD_INT 19
23378: PUSH
23379: LD_INT 20
23381: PUSH
23382: LD_INT 21
23384: PUSH
23385: LD_INT 22
23387: PUSH
23388: LD_INT 23
23390: PUSH
23391: LD_INT 24
23393: PUSH
23394: LD_INT 25
23396: PUSH
23397: LD_INT 26
23399: PUSH
23400: LD_INT 27
23402: PUSH
23403: LD_INT 28
23405: PUSH
23406: LD_INT 30
23408: PUSH
23409: LD_INT 31
23411: PUSH
23412: LD_INT 32
23414: PUSH
23415: LD_INT 33
23417: PUSH
23418: LD_INT 34
23420: PUSH
23421: LD_INT 36
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 101
23459: PUSH
23460: LD_INT 102
23462: PUSH
23463: LD_INT 103
23465: PUSH
23466: LD_INT 104
23468: PUSH
23469: LD_INT 105
23471: PUSH
23472: LD_INT 106
23474: PUSH
23475: LD_INT 107
23477: PUSH
23478: LD_INT 108
23480: PUSH
23481: LD_INT 109
23483: PUSH
23484: LD_INT 110
23486: PUSH
23487: LD_INT 111
23489: PUSH
23490: LD_INT 112
23492: PUSH
23493: LD_INT 113
23495: PUSH
23496: LD_INT 114
23498: PUSH
23499: LD_INT 116
23501: PUSH
23502: LD_INT 117
23504: PUSH
23505: LD_INT 118
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: ST_TO_ADDR
23531: GO 24770
23533: LD_INT 14
23535: DOUBLE
23536: EQUAL
23537: IFTRUE 23541
23539: GO 23765
23541: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23542: LD_ADDR_VAR 0 2
23546: PUSH
23547: LD_INT 1
23549: PUSH
23550: LD_INT 2
23552: PUSH
23553: LD_INT 3
23555: PUSH
23556: LD_INT 4
23558: PUSH
23559: LD_INT 5
23561: PUSH
23562: LD_INT 6
23564: PUSH
23565: LD_INT 7
23567: PUSH
23568: LD_INT 8
23570: PUSH
23571: LD_INT 9
23573: PUSH
23574: LD_INT 10
23576: PUSH
23577: LD_INT 11
23579: PUSH
23580: LD_INT 12
23582: PUSH
23583: LD_INT 13
23585: PUSH
23586: LD_INT 14
23588: PUSH
23589: LD_INT 15
23591: PUSH
23592: LD_INT 16
23594: PUSH
23595: LD_INT 17
23597: PUSH
23598: LD_INT 18
23600: PUSH
23601: LD_INT 19
23603: PUSH
23604: LD_INT 20
23606: PUSH
23607: LD_INT 21
23609: PUSH
23610: LD_INT 22
23612: PUSH
23613: LD_INT 23
23615: PUSH
23616: LD_INT 24
23618: PUSH
23619: LD_INT 25
23621: PUSH
23622: LD_INT 26
23624: PUSH
23625: LD_INT 27
23627: PUSH
23628: LD_INT 28
23630: PUSH
23631: LD_INT 29
23633: PUSH
23634: LD_INT 30
23636: PUSH
23637: LD_INT 31
23639: PUSH
23640: LD_INT 32
23642: PUSH
23643: LD_INT 33
23645: PUSH
23646: LD_INT 34
23648: PUSH
23649: LD_INT 36
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 101
23691: PUSH
23692: LD_INT 102
23694: PUSH
23695: LD_INT 103
23697: PUSH
23698: LD_INT 104
23700: PUSH
23701: LD_INT 105
23703: PUSH
23704: LD_INT 106
23706: PUSH
23707: LD_INT 107
23709: PUSH
23710: LD_INT 108
23712: PUSH
23713: LD_INT 109
23715: PUSH
23716: LD_INT 110
23718: PUSH
23719: LD_INT 111
23721: PUSH
23722: LD_INT 112
23724: PUSH
23725: LD_INT 113
23727: PUSH
23728: LD_INT 114
23730: PUSH
23731: LD_INT 116
23733: PUSH
23734: LD_INT 117
23736: PUSH
23737: LD_INT 118
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: ST_TO_ADDR
23763: GO 24770
23765: LD_INT 15
23767: DOUBLE
23768: EQUAL
23769: IFTRUE 23773
23771: GO 23997
23773: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23774: LD_ADDR_VAR 0 2
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: LD_INT 2
23784: PUSH
23785: LD_INT 3
23787: PUSH
23788: LD_INT 4
23790: PUSH
23791: LD_INT 5
23793: PUSH
23794: LD_INT 6
23796: PUSH
23797: LD_INT 7
23799: PUSH
23800: LD_INT 8
23802: PUSH
23803: LD_INT 9
23805: PUSH
23806: LD_INT 10
23808: PUSH
23809: LD_INT 11
23811: PUSH
23812: LD_INT 12
23814: PUSH
23815: LD_INT 13
23817: PUSH
23818: LD_INT 14
23820: PUSH
23821: LD_INT 15
23823: PUSH
23824: LD_INT 16
23826: PUSH
23827: LD_INT 17
23829: PUSH
23830: LD_INT 18
23832: PUSH
23833: LD_INT 19
23835: PUSH
23836: LD_INT 20
23838: PUSH
23839: LD_INT 21
23841: PUSH
23842: LD_INT 22
23844: PUSH
23845: LD_INT 23
23847: PUSH
23848: LD_INT 24
23850: PUSH
23851: LD_INT 25
23853: PUSH
23854: LD_INT 26
23856: PUSH
23857: LD_INT 27
23859: PUSH
23860: LD_INT 28
23862: PUSH
23863: LD_INT 29
23865: PUSH
23866: LD_INT 30
23868: PUSH
23869: LD_INT 31
23871: PUSH
23872: LD_INT 32
23874: PUSH
23875: LD_INT 33
23877: PUSH
23878: LD_INT 34
23880: PUSH
23881: LD_INT 36
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 101
23923: PUSH
23924: LD_INT 102
23926: PUSH
23927: LD_INT 103
23929: PUSH
23930: LD_INT 104
23932: PUSH
23933: LD_INT 105
23935: PUSH
23936: LD_INT 106
23938: PUSH
23939: LD_INT 107
23941: PUSH
23942: LD_INT 108
23944: PUSH
23945: LD_INT 109
23947: PUSH
23948: LD_INT 110
23950: PUSH
23951: LD_INT 111
23953: PUSH
23954: LD_INT 112
23956: PUSH
23957: LD_INT 113
23959: PUSH
23960: LD_INT 114
23962: PUSH
23963: LD_INT 116
23965: PUSH
23966: LD_INT 117
23968: PUSH
23969: LD_INT 118
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: ST_TO_ADDR
23995: GO 24770
23997: LD_INT 16
23999: DOUBLE
24000: EQUAL
24001: IFTRUE 24005
24003: GO 24141
24005: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24006: LD_ADDR_VAR 0 2
24010: PUSH
24011: LD_INT 2
24013: PUSH
24014: LD_INT 4
24016: PUSH
24017: LD_INT 5
24019: PUSH
24020: LD_INT 7
24022: PUSH
24023: LD_INT 11
24025: PUSH
24026: LD_INT 12
24028: PUSH
24029: LD_INT 15
24031: PUSH
24032: LD_INT 16
24034: PUSH
24035: LD_INT 20
24037: PUSH
24038: LD_INT 21
24040: PUSH
24041: LD_INT 22
24043: PUSH
24044: LD_INT 23
24046: PUSH
24047: LD_INT 25
24049: PUSH
24050: LD_INT 26
24052: PUSH
24053: LD_INT 30
24055: PUSH
24056: LD_INT 31
24058: PUSH
24059: LD_INT 32
24061: PUSH
24062: LD_INT 33
24064: PUSH
24065: LD_INT 34
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 101
24091: PUSH
24092: LD_INT 102
24094: PUSH
24095: LD_INT 103
24097: PUSH
24098: LD_INT 106
24100: PUSH
24101: LD_INT 108
24103: PUSH
24104: LD_INT 112
24106: PUSH
24107: LD_INT 113
24109: PUSH
24110: LD_INT 114
24112: PUSH
24113: LD_INT 116
24115: PUSH
24116: LD_INT 117
24118: PUSH
24119: LD_INT 118
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: ST_TO_ADDR
24139: GO 24770
24141: LD_INT 17
24143: DOUBLE
24144: EQUAL
24145: IFTRUE 24149
24147: GO 24373
24149: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24150: LD_ADDR_VAR 0 2
24154: PUSH
24155: LD_INT 1
24157: PUSH
24158: LD_INT 2
24160: PUSH
24161: LD_INT 3
24163: PUSH
24164: LD_INT 4
24166: PUSH
24167: LD_INT 5
24169: PUSH
24170: LD_INT 6
24172: PUSH
24173: LD_INT 7
24175: PUSH
24176: LD_INT 8
24178: PUSH
24179: LD_INT 9
24181: PUSH
24182: LD_INT 10
24184: PUSH
24185: LD_INT 11
24187: PUSH
24188: LD_INT 12
24190: PUSH
24191: LD_INT 13
24193: PUSH
24194: LD_INT 14
24196: PUSH
24197: LD_INT 15
24199: PUSH
24200: LD_INT 16
24202: PUSH
24203: LD_INT 17
24205: PUSH
24206: LD_INT 18
24208: PUSH
24209: LD_INT 19
24211: PUSH
24212: LD_INT 20
24214: PUSH
24215: LD_INT 21
24217: PUSH
24218: LD_INT 22
24220: PUSH
24221: LD_INT 23
24223: PUSH
24224: LD_INT 24
24226: PUSH
24227: LD_INT 25
24229: PUSH
24230: LD_INT 26
24232: PUSH
24233: LD_INT 27
24235: PUSH
24236: LD_INT 28
24238: PUSH
24239: LD_INT 29
24241: PUSH
24242: LD_INT 30
24244: PUSH
24245: LD_INT 31
24247: PUSH
24248: LD_INT 32
24250: PUSH
24251: LD_INT 33
24253: PUSH
24254: LD_INT 34
24256: PUSH
24257: LD_INT 36
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 101
24299: PUSH
24300: LD_INT 102
24302: PUSH
24303: LD_INT 103
24305: PUSH
24306: LD_INT 104
24308: PUSH
24309: LD_INT 105
24311: PUSH
24312: LD_INT 106
24314: PUSH
24315: LD_INT 107
24317: PUSH
24318: LD_INT 108
24320: PUSH
24321: LD_INT 109
24323: PUSH
24324: LD_INT 110
24326: PUSH
24327: LD_INT 111
24329: PUSH
24330: LD_INT 112
24332: PUSH
24333: LD_INT 113
24335: PUSH
24336: LD_INT 114
24338: PUSH
24339: LD_INT 116
24341: PUSH
24342: LD_INT 117
24344: PUSH
24345: LD_INT 118
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: ST_TO_ADDR
24371: GO 24770
24373: LD_INT 18
24375: DOUBLE
24376: EQUAL
24377: IFTRUE 24381
24379: GO 24529
24381: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24382: LD_ADDR_VAR 0 2
24386: PUSH
24387: LD_INT 2
24389: PUSH
24390: LD_INT 4
24392: PUSH
24393: LD_INT 5
24395: PUSH
24396: LD_INT 7
24398: PUSH
24399: LD_INT 11
24401: PUSH
24402: LD_INT 12
24404: PUSH
24405: LD_INT 15
24407: PUSH
24408: LD_INT 16
24410: PUSH
24411: LD_INT 20
24413: PUSH
24414: LD_INT 21
24416: PUSH
24417: LD_INT 22
24419: PUSH
24420: LD_INT 23
24422: PUSH
24423: LD_INT 25
24425: PUSH
24426: LD_INT 26
24428: PUSH
24429: LD_INT 30
24431: PUSH
24432: LD_INT 31
24434: PUSH
24435: LD_INT 32
24437: PUSH
24438: LD_INT 33
24440: PUSH
24441: LD_INT 34
24443: PUSH
24444: LD_INT 35
24446: PUSH
24447: LD_INT 36
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 101
24475: PUSH
24476: LD_INT 102
24478: PUSH
24479: LD_INT 103
24481: PUSH
24482: LD_INT 106
24484: PUSH
24485: LD_INT 108
24487: PUSH
24488: LD_INT 112
24490: PUSH
24491: LD_INT 113
24493: PUSH
24494: LD_INT 114
24496: PUSH
24497: LD_INT 115
24499: PUSH
24500: LD_INT 116
24502: PUSH
24503: LD_INT 117
24505: PUSH
24506: LD_INT 118
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: ST_TO_ADDR
24527: GO 24770
24529: LD_INT 19
24531: DOUBLE
24532: EQUAL
24533: IFTRUE 24537
24535: GO 24769
24537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24538: LD_ADDR_VAR 0 2
24542: PUSH
24543: LD_INT 1
24545: PUSH
24546: LD_INT 2
24548: PUSH
24549: LD_INT 3
24551: PUSH
24552: LD_INT 4
24554: PUSH
24555: LD_INT 5
24557: PUSH
24558: LD_INT 6
24560: PUSH
24561: LD_INT 7
24563: PUSH
24564: LD_INT 8
24566: PUSH
24567: LD_INT 9
24569: PUSH
24570: LD_INT 10
24572: PUSH
24573: LD_INT 11
24575: PUSH
24576: LD_INT 12
24578: PUSH
24579: LD_INT 13
24581: PUSH
24582: LD_INT 14
24584: PUSH
24585: LD_INT 15
24587: PUSH
24588: LD_INT 16
24590: PUSH
24591: LD_INT 17
24593: PUSH
24594: LD_INT 18
24596: PUSH
24597: LD_INT 19
24599: PUSH
24600: LD_INT 20
24602: PUSH
24603: LD_INT 21
24605: PUSH
24606: LD_INT 22
24608: PUSH
24609: LD_INT 23
24611: PUSH
24612: LD_INT 24
24614: PUSH
24615: LD_INT 25
24617: PUSH
24618: LD_INT 26
24620: PUSH
24621: LD_INT 27
24623: PUSH
24624: LD_INT 28
24626: PUSH
24627: LD_INT 29
24629: PUSH
24630: LD_INT 30
24632: PUSH
24633: LD_INT 31
24635: PUSH
24636: LD_INT 32
24638: PUSH
24639: LD_INT 33
24641: PUSH
24642: LD_INT 34
24644: PUSH
24645: LD_INT 35
24647: PUSH
24648: LD_INT 36
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 101
24691: PUSH
24692: LD_INT 102
24694: PUSH
24695: LD_INT 103
24697: PUSH
24698: LD_INT 104
24700: PUSH
24701: LD_INT 105
24703: PUSH
24704: LD_INT 106
24706: PUSH
24707: LD_INT 107
24709: PUSH
24710: LD_INT 108
24712: PUSH
24713: LD_INT 109
24715: PUSH
24716: LD_INT 110
24718: PUSH
24719: LD_INT 111
24721: PUSH
24722: LD_INT 112
24724: PUSH
24725: LD_INT 113
24727: PUSH
24728: LD_INT 114
24730: PUSH
24731: LD_INT 115
24733: PUSH
24734: LD_INT 116
24736: PUSH
24737: LD_INT 117
24739: PUSH
24740: LD_INT 118
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: ST_TO_ADDR
24767: GO 24770
24769: POP
// end else
24770: GO 25001
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24772: LD_ADDR_VAR 0 2
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: LD_INT 2
24782: PUSH
24783: LD_INT 3
24785: PUSH
24786: LD_INT 4
24788: PUSH
24789: LD_INT 5
24791: PUSH
24792: LD_INT 6
24794: PUSH
24795: LD_INT 7
24797: PUSH
24798: LD_INT 8
24800: PUSH
24801: LD_INT 9
24803: PUSH
24804: LD_INT 10
24806: PUSH
24807: LD_INT 11
24809: PUSH
24810: LD_INT 12
24812: PUSH
24813: LD_INT 13
24815: PUSH
24816: LD_INT 14
24818: PUSH
24819: LD_INT 15
24821: PUSH
24822: LD_INT 16
24824: PUSH
24825: LD_INT 17
24827: PUSH
24828: LD_INT 18
24830: PUSH
24831: LD_INT 19
24833: PUSH
24834: LD_INT 20
24836: PUSH
24837: LD_INT 21
24839: PUSH
24840: LD_INT 22
24842: PUSH
24843: LD_INT 23
24845: PUSH
24846: LD_INT 24
24848: PUSH
24849: LD_INT 25
24851: PUSH
24852: LD_INT 26
24854: PUSH
24855: LD_INT 27
24857: PUSH
24858: LD_INT 28
24860: PUSH
24861: LD_INT 29
24863: PUSH
24864: LD_INT 30
24866: PUSH
24867: LD_INT 31
24869: PUSH
24870: LD_INT 32
24872: PUSH
24873: LD_INT 33
24875: PUSH
24876: LD_INT 34
24878: PUSH
24879: LD_INT 35
24881: PUSH
24882: LD_INT 36
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 101
24925: PUSH
24926: LD_INT 102
24928: PUSH
24929: LD_INT 103
24931: PUSH
24932: LD_INT 104
24934: PUSH
24935: LD_INT 105
24937: PUSH
24938: LD_INT 106
24940: PUSH
24941: LD_INT 107
24943: PUSH
24944: LD_INT 108
24946: PUSH
24947: LD_INT 109
24949: PUSH
24950: LD_INT 110
24952: PUSH
24953: LD_INT 111
24955: PUSH
24956: LD_INT 112
24958: PUSH
24959: LD_INT 113
24961: PUSH
24962: LD_INT 114
24964: PUSH
24965: LD_INT 115
24967: PUSH
24968: LD_INT 116
24970: PUSH
24971: LD_INT 117
24973: PUSH
24974: LD_INT 118
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: ST_TO_ADDR
// if result then
25001: LD_VAR 0 2
25005: IFFALSE 25791
// begin normal :=  ;
25007: LD_ADDR_VAR 0 5
25011: PUSH
25012: LD_STRING 
25014: ST_TO_ADDR
// hardcore :=  ;
25015: LD_ADDR_VAR 0 6
25019: PUSH
25020: LD_STRING 
25022: ST_TO_ADDR
// active :=  ;
25023: LD_ADDR_VAR 0 7
25027: PUSH
25028: LD_STRING 
25030: ST_TO_ADDR
// for i = 1 to normalCounter do
25031: LD_ADDR_VAR 0 8
25035: PUSH
25036: DOUBLE
25037: LD_INT 1
25039: DEC
25040: ST_TO_ADDR
25041: LD_EXP 69
25045: PUSH
25046: FOR_TO
25047: IFFALSE 25148
// begin tmp := 0 ;
25049: LD_ADDR_VAR 0 3
25053: PUSH
25054: LD_STRING 0
25056: ST_TO_ADDR
// if result [ 1 ] then
25057: LD_VAR 0 2
25061: PUSH
25062: LD_INT 1
25064: ARRAY
25065: IFFALSE 25130
// if result [ 1 ] [ 1 ] = i then
25067: LD_VAR 0 2
25071: PUSH
25072: LD_INT 1
25074: ARRAY
25075: PUSH
25076: LD_INT 1
25078: ARRAY
25079: PUSH
25080: LD_VAR 0 8
25084: EQUAL
25085: IFFALSE 25130
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25087: LD_ADDR_VAR 0 2
25091: PUSH
25092: LD_VAR 0 2
25096: PPUSH
25097: LD_INT 1
25099: PPUSH
25100: LD_VAR 0 2
25104: PUSH
25105: LD_INT 1
25107: ARRAY
25108: PPUSH
25109: LD_INT 1
25111: PPUSH
25112: CALL_OW 3
25116: PPUSH
25117: CALL_OW 1
25121: ST_TO_ADDR
// tmp := 1 ;
25122: LD_ADDR_VAR 0 3
25126: PUSH
25127: LD_STRING 1
25129: ST_TO_ADDR
// end ; normal := normal & tmp ;
25130: LD_ADDR_VAR 0 5
25134: PUSH
25135: LD_VAR 0 5
25139: PUSH
25140: LD_VAR 0 3
25144: STR
25145: ST_TO_ADDR
// end ;
25146: GO 25046
25148: POP
25149: POP
// for i = 1 to hardcoreCounter do
25150: LD_ADDR_VAR 0 8
25154: PUSH
25155: DOUBLE
25156: LD_INT 1
25158: DEC
25159: ST_TO_ADDR
25160: LD_EXP 70
25164: PUSH
25165: FOR_TO
25166: IFFALSE 25271
// begin tmp := 0 ;
25168: LD_ADDR_VAR 0 3
25172: PUSH
25173: LD_STRING 0
25175: ST_TO_ADDR
// if result [ 2 ] then
25176: LD_VAR 0 2
25180: PUSH
25181: LD_INT 2
25183: ARRAY
25184: IFFALSE 25253
// if result [ 2 ] [ 1 ] = 100 + i then
25186: LD_VAR 0 2
25190: PUSH
25191: LD_INT 2
25193: ARRAY
25194: PUSH
25195: LD_INT 1
25197: ARRAY
25198: PUSH
25199: LD_INT 100
25201: PUSH
25202: LD_VAR 0 8
25206: PLUS
25207: EQUAL
25208: IFFALSE 25253
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25210: LD_ADDR_VAR 0 2
25214: PUSH
25215: LD_VAR 0 2
25219: PPUSH
25220: LD_INT 2
25222: PPUSH
25223: LD_VAR 0 2
25227: PUSH
25228: LD_INT 2
25230: ARRAY
25231: PPUSH
25232: LD_INT 1
25234: PPUSH
25235: CALL_OW 3
25239: PPUSH
25240: CALL_OW 1
25244: ST_TO_ADDR
// tmp := 1 ;
25245: LD_ADDR_VAR 0 3
25249: PUSH
25250: LD_STRING 1
25252: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25253: LD_ADDR_VAR 0 6
25257: PUSH
25258: LD_VAR 0 6
25262: PUSH
25263: LD_VAR 0 3
25267: STR
25268: ST_TO_ADDR
// end ;
25269: GO 25165
25271: POP
25272: POP
// if isGameLoad then
25273: LD_VAR 0 1
25277: IFFALSE 25752
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25279: LD_ADDR_VAR 0 4
25283: PUSH
25284: LD_EXP 73
25288: PUSH
25289: LD_EXP 72
25293: PUSH
25294: LD_EXP 74
25298: PUSH
25299: LD_EXP 71
25303: PUSH
25304: LD_EXP 75
25308: PUSH
25309: LD_EXP 76
25313: PUSH
25314: LD_EXP 77
25318: PUSH
25319: LD_EXP 78
25323: PUSH
25324: LD_EXP 79
25328: PUSH
25329: LD_EXP 80
25333: PUSH
25334: LD_EXP 81
25338: PUSH
25339: LD_EXP 82
25343: PUSH
25344: LD_EXP 83
25348: PUSH
25349: LD_EXP 84
25353: PUSH
25354: LD_EXP 92
25358: PUSH
25359: LD_EXP 93
25363: PUSH
25364: LD_EXP 94
25368: PUSH
25369: LD_EXP 95
25373: PUSH
25374: LD_EXP 97
25378: PUSH
25379: LD_EXP 98
25383: PUSH
25384: LD_EXP 99
25388: PUSH
25389: LD_EXP 102
25393: PUSH
25394: LD_EXP 104
25398: PUSH
25399: LD_EXP 105
25403: PUSH
25404: LD_EXP 106
25408: PUSH
25409: LD_EXP 108
25413: PUSH
25414: LD_EXP 109
25418: PUSH
25419: LD_EXP 112
25423: PUSH
25424: LD_EXP 113
25428: PUSH
25429: LD_EXP 114
25433: PUSH
25434: LD_EXP 115
25438: PUSH
25439: LD_EXP 116
25443: PUSH
25444: LD_EXP 117
25448: PUSH
25449: LD_EXP 118
25453: PUSH
25454: LD_EXP 119
25458: PUSH
25459: LD_EXP 120
25463: PUSH
25464: LD_EXP 85
25468: PUSH
25469: LD_EXP 86
25473: PUSH
25474: LD_EXP 89
25478: PUSH
25479: LD_EXP 90
25483: PUSH
25484: LD_EXP 91
25488: PUSH
25489: LD_EXP 87
25493: PUSH
25494: LD_EXP 88
25498: PUSH
25499: LD_EXP 96
25503: PUSH
25504: LD_EXP 100
25508: PUSH
25509: LD_EXP 101
25513: PUSH
25514: LD_EXP 103
25518: PUSH
25519: LD_EXP 107
25523: PUSH
25524: LD_EXP 110
25528: PUSH
25529: LD_EXP 111
25533: PUSH
25534: LD_EXP 121
25538: PUSH
25539: LD_EXP 122
25543: PUSH
25544: LD_EXP 123
25548: PUSH
25549: LD_EXP 124
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: ST_TO_ADDR
// tmp :=  ;
25610: LD_ADDR_VAR 0 3
25614: PUSH
25615: LD_STRING 
25617: ST_TO_ADDR
// for i = 1 to normalCounter do
25618: LD_ADDR_VAR 0 8
25622: PUSH
25623: DOUBLE
25624: LD_INT 1
25626: DEC
25627: ST_TO_ADDR
25628: LD_EXP 69
25632: PUSH
25633: FOR_TO
25634: IFFALSE 25670
// begin if flags [ i ] then
25636: LD_VAR 0 4
25640: PUSH
25641: LD_VAR 0 8
25645: ARRAY
25646: IFFALSE 25668
// tmp := tmp & i & ; ;
25648: LD_ADDR_VAR 0 3
25652: PUSH
25653: LD_VAR 0 3
25657: PUSH
25658: LD_VAR 0 8
25662: STR
25663: PUSH
25664: LD_STRING ;
25666: STR
25667: ST_TO_ADDR
// end ;
25668: GO 25633
25670: POP
25671: POP
// for i = 1 to hardcoreCounter do
25672: LD_ADDR_VAR 0 8
25676: PUSH
25677: DOUBLE
25678: LD_INT 1
25680: DEC
25681: ST_TO_ADDR
25682: LD_EXP 70
25686: PUSH
25687: FOR_TO
25688: IFFALSE 25734
// begin if flags [ normalCounter + i ] then
25690: LD_VAR 0 4
25694: PUSH
25695: LD_EXP 69
25699: PUSH
25700: LD_VAR 0 8
25704: PLUS
25705: ARRAY
25706: IFFALSE 25732
// tmp := tmp & ( 100 + i ) & ; ;
25708: LD_ADDR_VAR 0 3
25712: PUSH
25713: LD_VAR 0 3
25717: PUSH
25718: LD_INT 100
25720: PUSH
25721: LD_VAR 0 8
25725: PLUS
25726: STR
25727: PUSH
25728: LD_STRING ;
25730: STR
25731: ST_TO_ADDR
// end ;
25732: GO 25687
25734: POP
25735: POP
// if tmp then
25736: LD_VAR 0 3
25740: IFFALSE 25752
// active := tmp ;
25742: LD_ADDR_VAR 0 7
25746: PUSH
25747: LD_VAR 0 3
25751: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25752: LD_STRING getStreamItemsFromMission("
25754: PUSH
25755: LD_VAR 0 5
25759: STR
25760: PUSH
25761: LD_STRING ","
25763: STR
25764: PUSH
25765: LD_VAR 0 6
25769: STR
25770: PUSH
25771: LD_STRING ","
25773: STR
25774: PUSH
25775: LD_VAR 0 7
25779: STR
25780: PUSH
25781: LD_STRING ")
25783: STR
25784: PPUSH
25785: CALL_OW 559
// end else
25789: GO 25798
// ToLua ( getStreamItemsFromMission("","","") ) ;
25791: LD_STRING getStreamItemsFromMission("","","")
25793: PPUSH
25794: CALL_OW 559
// end ;
25798: LD_VAR 0 2
25802: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25803: LD_EXP 68
25807: PUSH
25808: LD_EXP 73
25812: AND
25813: IFFALSE 25937
25815: GO 25817
25817: DISABLE
25818: LD_INT 0
25820: PPUSH
25821: PPUSH
// begin enable ;
25822: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25823: LD_ADDR_VAR 0 2
25827: PUSH
25828: LD_INT 22
25830: PUSH
25831: LD_OWVAR 2
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 2
25842: PUSH
25843: LD_INT 34
25845: PUSH
25846: LD_INT 7
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 34
25855: PUSH
25856: LD_INT 45
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 34
25865: PUSH
25866: LD_INT 28
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 34
25875: PUSH
25876: LD_INT 47
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PPUSH
25894: CALL_OW 69
25898: ST_TO_ADDR
// if not tmp then
25899: LD_VAR 0 2
25903: NOT
25904: IFFALSE 25908
// exit ;
25906: GO 25937
// for i in tmp do
25908: LD_ADDR_VAR 0 1
25912: PUSH
25913: LD_VAR 0 2
25917: PUSH
25918: FOR_IN
25919: IFFALSE 25935
// begin SetLives ( i , 0 ) ;
25921: LD_VAR 0 1
25925: PPUSH
25926: LD_INT 0
25928: PPUSH
25929: CALL_OW 234
// end ;
25933: GO 25918
25935: POP
25936: POP
// end ;
25937: PPOPN 2
25939: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25940: LD_EXP 68
25944: PUSH
25945: LD_EXP 74
25949: AND
25950: IFFALSE 26034
25952: GO 25954
25954: DISABLE
25955: LD_INT 0
25957: PPUSH
25958: PPUSH
// begin enable ;
25959: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25960: LD_ADDR_VAR 0 2
25964: PUSH
25965: LD_INT 22
25967: PUSH
25968: LD_OWVAR 2
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 32
25979: PUSH
25980: LD_INT 3
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PPUSH
25991: CALL_OW 69
25995: ST_TO_ADDR
// if not tmp then
25996: LD_VAR 0 2
26000: NOT
26001: IFFALSE 26005
// exit ;
26003: GO 26034
// for i in tmp do
26005: LD_ADDR_VAR 0 1
26009: PUSH
26010: LD_VAR 0 2
26014: PUSH
26015: FOR_IN
26016: IFFALSE 26032
// begin SetLives ( i , 0 ) ;
26018: LD_VAR 0 1
26022: PPUSH
26023: LD_INT 0
26025: PPUSH
26026: CALL_OW 234
// end ;
26030: GO 26015
26032: POP
26033: POP
// end ;
26034: PPOPN 2
26036: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26037: LD_EXP 68
26041: PUSH
26042: LD_EXP 71
26046: AND
26047: IFFALSE 26140
26049: GO 26051
26051: DISABLE
26052: LD_INT 0
26054: PPUSH
// begin enable ;
26055: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26056: LD_ADDR_VAR 0 1
26060: PUSH
26061: LD_INT 22
26063: PUSH
26064: LD_OWVAR 2
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 2
26075: PUSH
26076: LD_INT 25
26078: PUSH
26079: LD_INT 5
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 25
26088: PUSH
26089: LD_INT 9
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 25
26098: PUSH
26099: LD_INT 8
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PPUSH
26116: CALL_OW 69
26120: PUSH
26121: FOR_IN
26122: IFFALSE 26138
// begin SetClass ( i , 1 ) ;
26124: LD_VAR 0 1
26128: PPUSH
26129: LD_INT 1
26131: PPUSH
26132: CALL_OW 336
// end ;
26136: GO 26121
26138: POP
26139: POP
// end ;
26140: PPOPN 1
26142: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26143: LD_EXP 68
26147: PUSH
26148: LD_EXP 72
26152: AND
26153: PUSH
26154: LD_OWVAR 65
26158: PUSH
26159: LD_INT 7
26161: LESS
26162: AND
26163: IFFALSE 26177
26165: GO 26167
26167: DISABLE
// begin enable ;
26168: ENABLE
// game_speed := 7 ;
26169: LD_ADDR_OWVAR 65
26173: PUSH
26174: LD_INT 7
26176: ST_TO_ADDR
// end ;
26177: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26178: LD_EXP 68
26182: PUSH
26183: LD_EXP 75
26187: AND
26188: IFFALSE 26390
26190: GO 26192
26192: DISABLE
26193: LD_INT 0
26195: PPUSH
26196: PPUSH
26197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26198: LD_ADDR_VAR 0 3
26202: PUSH
26203: LD_INT 81
26205: PUSH
26206: LD_OWVAR 2
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 21
26217: PUSH
26218: LD_INT 1
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PPUSH
26229: CALL_OW 69
26233: ST_TO_ADDR
// if not tmp then
26234: LD_VAR 0 3
26238: NOT
26239: IFFALSE 26243
// exit ;
26241: GO 26390
// if tmp > 5 then
26243: LD_VAR 0 3
26247: PUSH
26248: LD_INT 5
26250: GREATER
26251: IFFALSE 26263
// k := 5 else
26253: LD_ADDR_VAR 0 2
26257: PUSH
26258: LD_INT 5
26260: ST_TO_ADDR
26261: GO 26273
// k := tmp ;
26263: LD_ADDR_VAR 0 2
26267: PUSH
26268: LD_VAR 0 3
26272: ST_TO_ADDR
// for i := 1 to k do
26273: LD_ADDR_VAR 0 1
26277: PUSH
26278: DOUBLE
26279: LD_INT 1
26281: DEC
26282: ST_TO_ADDR
26283: LD_VAR 0 2
26287: PUSH
26288: FOR_TO
26289: IFFALSE 26388
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26291: LD_VAR 0 3
26295: PUSH
26296: LD_VAR 0 1
26300: ARRAY
26301: PPUSH
26302: LD_VAR 0 1
26306: PUSH
26307: LD_INT 4
26309: MOD
26310: PUSH
26311: LD_INT 1
26313: PLUS
26314: PPUSH
26315: CALL_OW 259
26319: PUSH
26320: LD_INT 10
26322: LESS
26323: IFFALSE 26386
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26325: LD_VAR 0 3
26329: PUSH
26330: LD_VAR 0 1
26334: ARRAY
26335: PPUSH
26336: LD_VAR 0 1
26340: PUSH
26341: LD_INT 4
26343: MOD
26344: PUSH
26345: LD_INT 1
26347: PLUS
26348: PPUSH
26349: LD_VAR 0 3
26353: PUSH
26354: LD_VAR 0 1
26358: ARRAY
26359: PPUSH
26360: LD_VAR 0 1
26364: PUSH
26365: LD_INT 4
26367: MOD
26368: PUSH
26369: LD_INT 1
26371: PLUS
26372: PPUSH
26373: CALL_OW 259
26377: PUSH
26378: LD_INT 1
26380: PLUS
26381: PPUSH
26382: CALL_OW 237
26386: GO 26288
26388: POP
26389: POP
// end ;
26390: PPOPN 3
26392: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26393: LD_EXP 68
26397: PUSH
26398: LD_EXP 76
26402: AND
26403: IFFALSE 26423
26405: GO 26407
26407: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26408: LD_INT 4
26410: PPUSH
26411: LD_OWVAR 2
26415: PPUSH
26416: LD_INT 0
26418: PPUSH
26419: CALL_OW 324
26423: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26424: LD_EXP 68
26428: PUSH
26429: LD_EXP 105
26433: AND
26434: IFFALSE 26454
26436: GO 26438
26438: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26439: LD_INT 19
26441: PPUSH
26442: LD_OWVAR 2
26446: PPUSH
26447: LD_INT 0
26449: PPUSH
26450: CALL_OW 324
26454: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26455: LD_EXP 68
26459: PUSH
26460: LD_EXP 77
26464: AND
26465: IFFALSE 26567
26467: GO 26469
26469: DISABLE
26470: LD_INT 0
26472: PPUSH
26473: PPUSH
// begin enable ;
26474: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26475: LD_ADDR_VAR 0 2
26479: PUSH
26480: LD_INT 22
26482: PUSH
26483: LD_OWVAR 2
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 2
26494: PUSH
26495: LD_INT 34
26497: PUSH
26498: LD_INT 11
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 34
26507: PUSH
26508: LD_INT 30
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: LIST
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PPUSH
26524: CALL_OW 69
26528: ST_TO_ADDR
// if not tmp then
26529: LD_VAR 0 2
26533: NOT
26534: IFFALSE 26538
// exit ;
26536: GO 26567
// for i in tmp do
26538: LD_ADDR_VAR 0 1
26542: PUSH
26543: LD_VAR 0 2
26547: PUSH
26548: FOR_IN
26549: IFFALSE 26565
// begin SetLives ( i , 0 ) ;
26551: LD_VAR 0 1
26555: PPUSH
26556: LD_INT 0
26558: PPUSH
26559: CALL_OW 234
// end ;
26563: GO 26548
26565: POP
26566: POP
// end ;
26567: PPOPN 2
26569: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26570: LD_EXP 68
26574: PUSH
26575: LD_EXP 78
26579: AND
26580: IFFALSE 26600
26582: GO 26584
26584: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26585: LD_INT 32
26587: PPUSH
26588: LD_OWVAR 2
26592: PPUSH
26593: LD_INT 0
26595: PPUSH
26596: CALL_OW 324
26600: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26601: LD_EXP 68
26605: PUSH
26606: LD_EXP 79
26610: AND
26611: IFFALSE 26792
26613: GO 26615
26615: DISABLE
26616: LD_INT 0
26618: PPUSH
26619: PPUSH
26620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26621: LD_ADDR_VAR 0 2
26625: PUSH
26626: LD_INT 22
26628: PUSH
26629: LD_OWVAR 2
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 33
26640: PUSH
26641: LD_INT 3
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PPUSH
26652: CALL_OW 69
26656: ST_TO_ADDR
// if not tmp then
26657: LD_VAR 0 2
26661: NOT
26662: IFFALSE 26666
// exit ;
26664: GO 26792
// side := 0 ;
26666: LD_ADDR_VAR 0 3
26670: PUSH
26671: LD_INT 0
26673: ST_TO_ADDR
// for i := 1 to 8 do
26674: LD_ADDR_VAR 0 1
26678: PUSH
26679: DOUBLE
26680: LD_INT 1
26682: DEC
26683: ST_TO_ADDR
26684: LD_INT 8
26686: PUSH
26687: FOR_TO
26688: IFFALSE 26736
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26690: LD_OWVAR 2
26694: PUSH
26695: LD_VAR 0 1
26699: NONEQUAL
26700: PUSH
26701: LD_OWVAR 2
26705: PPUSH
26706: LD_VAR 0 1
26710: PPUSH
26711: CALL_OW 81
26715: PUSH
26716: LD_INT 2
26718: EQUAL
26719: AND
26720: IFFALSE 26734
// begin side := i ;
26722: LD_ADDR_VAR 0 3
26726: PUSH
26727: LD_VAR 0 1
26731: ST_TO_ADDR
// break ;
26732: GO 26736
// end ;
26734: GO 26687
26736: POP
26737: POP
// if not side then
26738: LD_VAR 0 3
26742: NOT
26743: IFFALSE 26747
// exit ;
26745: GO 26792
// for i := 1 to tmp do
26747: LD_ADDR_VAR 0 1
26751: PUSH
26752: DOUBLE
26753: LD_INT 1
26755: DEC
26756: ST_TO_ADDR
26757: LD_VAR 0 2
26761: PUSH
26762: FOR_TO
26763: IFFALSE 26790
// if Prob ( 60 ) then
26765: LD_INT 60
26767: PPUSH
26768: CALL_OW 13
26772: IFFALSE 26788
// SetSide ( i , side ) ;
26774: LD_VAR 0 1
26778: PPUSH
26779: LD_VAR 0 3
26783: PPUSH
26784: CALL_OW 235
26788: GO 26762
26790: POP
26791: POP
// end ;
26792: PPOPN 3
26794: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26795: LD_EXP 68
26799: PUSH
26800: LD_EXP 81
26804: AND
26805: IFFALSE 26924
26807: GO 26809
26809: DISABLE
26810: LD_INT 0
26812: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26813: LD_ADDR_VAR 0 1
26817: PUSH
26818: LD_INT 22
26820: PUSH
26821: LD_OWVAR 2
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 21
26832: PUSH
26833: LD_INT 1
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 3
26842: PUSH
26843: LD_INT 23
26845: PUSH
26846: LD_INT 0
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: LIST
26861: PPUSH
26862: CALL_OW 69
26866: PUSH
26867: FOR_IN
26868: IFFALSE 26922
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26870: LD_VAR 0 1
26874: PPUSH
26875: CALL_OW 257
26879: PUSH
26880: LD_INT 1
26882: PUSH
26883: LD_INT 2
26885: PUSH
26886: LD_INT 3
26888: PUSH
26889: LD_INT 4
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: IN
26898: IFFALSE 26920
// SetClass ( un , rand ( 1 , 4 ) ) ;
26900: LD_VAR 0 1
26904: PPUSH
26905: LD_INT 1
26907: PPUSH
26908: LD_INT 4
26910: PPUSH
26911: CALL_OW 12
26915: PPUSH
26916: CALL_OW 336
26920: GO 26867
26922: POP
26923: POP
// end ;
26924: PPOPN 1
26926: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26927: LD_EXP 68
26931: PUSH
26932: LD_EXP 80
26936: AND
26937: IFFALSE 27016
26939: GO 26941
26941: DISABLE
26942: LD_INT 0
26944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26945: LD_ADDR_VAR 0 1
26949: PUSH
26950: LD_INT 22
26952: PUSH
26953: LD_OWVAR 2
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 21
26964: PUSH
26965: LD_INT 3
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PPUSH
26976: CALL_OW 69
26980: ST_TO_ADDR
// if not tmp then
26981: LD_VAR 0 1
26985: NOT
26986: IFFALSE 26990
// exit ;
26988: GO 27016
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26990: LD_VAR 0 1
26994: PUSH
26995: LD_INT 1
26997: PPUSH
26998: LD_VAR 0 1
27002: PPUSH
27003: CALL_OW 12
27007: ARRAY
27008: PPUSH
27009: LD_INT 100
27011: PPUSH
27012: CALL_OW 234
// end ;
27016: PPOPN 1
27018: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27019: LD_EXP 68
27023: PUSH
27024: LD_EXP 82
27028: AND
27029: IFFALSE 27127
27031: GO 27033
27033: DISABLE
27034: LD_INT 0
27036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27037: LD_ADDR_VAR 0 1
27041: PUSH
27042: LD_INT 22
27044: PUSH
27045: LD_OWVAR 2
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 21
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PPUSH
27068: CALL_OW 69
27072: ST_TO_ADDR
// if not tmp then
27073: LD_VAR 0 1
27077: NOT
27078: IFFALSE 27082
// exit ;
27080: GO 27127
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27082: LD_VAR 0 1
27086: PUSH
27087: LD_INT 1
27089: PPUSH
27090: LD_VAR 0 1
27094: PPUSH
27095: CALL_OW 12
27099: ARRAY
27100: PPUSH
27101: LD_INT 1
27103: PPUSH
27104: LD_INT 4
27106: PPUSH
27107: CALL_OW 12
27111: PPUSH
27112: LD_INT 3000
27114: PPUSH
27115: LD_INT 9000
27117: PPUSH
27118: CALL_OW 12
27122: PPUSH
27123: CALL_OW 492
// end ;
27127: PPOPN 1
27129: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27130: LD_EXP 68
27134: PUSH
27135: LD_EXP 83
27139: AND
27140: IFFALSE 27160
27142: GO 27144
27144: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27145: LD_INT 1
27147: PPUSH
27148: LD_OWVAR 2
27152: PPUSH
27153: LD_INT 0
27155: PPUSH
27156: CALL_OW 324
27160: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27161: LD_EXP 68
27165: PUSH
27166: LD_EXP 84
27170: AND
27171: IFFALSE 27254
27173: GO 27175
27175: DISABLE
27176: LD_INT 0
27178: PPUSH
27179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27180: LD_ADDR_VAR 0 2
27184: PUSH
27185: LD_INT 22
27187: PUSH
27188: LD_OWVAR 2
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 21
27199: PUSH
27200: LD_INT 3
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PPUSH
27211: CALL_OW 69
27215: ST_TO_ADDR
// if not tmp then
27216: LD_VAR 0 2
27220: NOT
27221: IFFALSE 27225
// exit ;
27223: GO 27254
// for i in tmp do
27225: LD_ADDR_VAR 0 1
27229: PUSH
27230: LD_VAR 0 2
27234: PUSH
27235: FOR_IN
27236: IFFALSE 27252
// SetBLevel ( i , 10 ) ;
27238: LD_VAR 0 1
27242: PPUSH
27243: LD_INT 10
27245: PPUSH
27246: CALL_OW 241
27250: GO 27235
27252: POP
27253: POP
// end ;
27254: PPOPN 2
27256: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27257: LD_EXP 68
27261: PUSH
27262: LD_EXP 85
27266: AND
27267: IFFALSE 27378
27269: GO 27271
27271: DISABLE
27272: LD_INT 0
27274: PPUSH
27275: PPUSH
27276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27277: LD_ADDR_VAR 0 3
27281: PUSH
27282: LD_INT 22
27284: PUSH
27285: LD_OWVAR 2
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 25
27296: PUSH
27297: LD_INT 1
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PPUSH
27308: CALL_OW 69
27312: ST_TO_ADDR
// if not tmp then
27313: LD_VAR 0 3
27317: NOT
27318: IFFALSE 27322
// exit ;
27320: GO 27378
// un := tmp [ rand ( 1 , tmp ) ] ;
27322: LD_ADDR_VAR 0 2
27326: PUSH
27327: LD_VAR 0 3
27331: PUSH
27332: LD_INT 1
27334: PPUSH
27335: LD_VAR 0 3
27339: PPUSH
27340: CALL_OW 12
27344: ARRAY
27345: ST_TO_ADDR
// if Crawls ( un ) then
27346: LD_VAR 0 2
27350: PPUSH
27351: CALL_OW 318
27355: IFFALSE 27366
// ComWalk ( un ) ;
27357: LD_VAR 0 2
27361: PPUSH
27362: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27366: LD_VAR 0 2
27370: PPUSH
27371: LD_INT 5
27373: PPUSH
27374: CALL_OW 336
// end ;
27378: PPOPN 3
27380: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27381: LD_EXP 68
27385: PUSH
27386: LD_EXP 86
27390: AND
27391: PUSH
27392: LD_OWVAR 67
27396: PUSH
27397: LD_INT 4
27399: LESS
27400: AND
27401: IFFALSE 27420
27403: GO 27405
27405: DISABLE
// begin Difficulty := Difficulty + 1 ;
27406: LD_ADDR_OWVAR 67
27410: PUSH
27411: LD_OWVAR 67
27415: PUSH
27416: LD_INT 1
27418: PLUS
27419: ST_TO_ADDR
// end ;
27420: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27421: LD_EXP 68
27425: PUSH
27426: LD_EXP 87
27430: AND
27431: IFFALSE 27534
27433: GO 27435
27435: DISABLE
27436: LD_INT 0
27438: PPUSH
// begin for i := 1 to 5 do
27439: LD_ADDR_VAR 0 1
27443: PUSH
27444: DOUBLE
27445: LD_INT 1
27447: DEC
27448: ST_TO_ADDR
27449: LD_INT 5
27451: PUSH
27452: FOR_TO
27453: IFFALSE 27532
// begin uc_nation := nation_nature ;
27455: LD_ADDR_OWVAR 21
27459: PUSH
27460: LD_INT 0
27462: ST_TO_ADDR
// uc_side := 0 ;
27463: LD_ADDR_OWVAR 20
27467: PUSH
27468: LD_INT 0
27470: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27471: LD_ADDR_OWVAR 29
27475: PUSH
27476: LD_INT 12
27478: PUSH
27479: LD_INT 12
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: ST_TO_ADDR
// hc_agressivity := 20 ;
27486: LD_ADDR_OWVAR 35
27490: PUSH
27491: LD_INT 20
27493: ST_TO_ADDR
// hc_class := class_tiger ;
27494: LD_ADDR_OWVAR 28
27498: PUSH
27499: LD_INT 14
27501: ST_TO_ADDR
// hc_gallery :=  ;
27502: LD_ADDR_OWVAR 33
27506: PUSH
27507: LD_STRING 
27509: ST_TO_ADDR
// hc_name :=  ;
27510: LD_ADDR_OWVAR 26
27514: PUSH
27515: LD_STRING 
27517: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27518: CALL_OW 44
27522: PPUSH
27523: LD_INT 0
27525: PPUSH
27526: CALL_OW 51
// end ;
27530: GO 27452
27532: POP
27533: POP
// end ;
27534: PPOPN 1
27536: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27537: LD_EXP 68
27541: PUSH
27542: LD_EXP 88
27546: AND
27547: IFFALSE 27556
27549: GO 27551
27551: DISABLE
// StreamSibBomb ;
27552: CALL 27557 0 0
27556: END
// export function StreamSibBomb ; var i , x , y ; begin
27557: LD_INT 0
27559: PPUSH
27560: PPUSH
27561: PPUSH
27562: PPUSH
// result := false ;
27563: LD_ADDR_VAR 0 1
27567: PUSH
27568: LD_INT 0
27570: ST_TO_ADDR
// for i := 1 to 16 do
27571: LD_ADDR_VAR 0 2
27575: PUSH
27576: DOUBLE
27577: LD_INT 1
27579: DEC
27580: ST_TO_ADDR
27581: LD_INT 16
27583: PUSH
27584: FOR_TO
27585: IFFALSE 27784
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27587: LD_ADDR_VAR 0 3
27591: PUSH
27592: LD_INT 10
27594: PUSH
27595: LD_INT 20
27597: PUSH
27598: LD_INT 30
27600: PUSH
27601: LD_INT 40
27603: PUSH
27604: LD_INT 50
27606: PUSH
27607: LD_INT 60
27609: PUSH
27610: LD_INT 70
27612: PUSH
27613: LD_INT 80
27615: PUSH
27616: LD_INT 90
27618: PUSH
27619: LD_INT 100
27621: PUSH
27622: LD_INT 110
27624: PUSH
27625: LD_INT 120
27627: PUSH
27628: LD_INT 130
27630: PUSH
27631: LD_INT 140
27633: PUSH
27634: LD_INT 150
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 1
27656: PPUSH
27657: LD_INT 15
27659: PPUSH
27660: CALL_OW 12
27664: ARRAY
27665: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27666: LD_ADDR_VAR 0 4
27670: PUSH
27671: LD_INT 10
27673: PUSH
27674: LD_INT 20
27676: PUSH
27677: LD_INT 30
27679: PUSH
27680: LD_INT 40
27682: PUSH
27683: LD_INT 50
27685: PUSH
27686: LD_INT 60
27688: PUSH
27689: LD_INT 70
27691: PUSH
27692: LD_INT 80
27694: PUSH
27695: LD_INT 90
27697: PUSH
27698: LD_INT 100
27700: PUSH
27701: LD_INT 110
27703: PUSH
27704: LD_INT 120
27706: PUSH
27707: LD_INT 130
27709: PUSH
27710: LD_INT 140
27712: PUSH
27713: LD_INT 150
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 1
27735: PPUSH
27736: LD_INT 15
27738: PPUSH
27739: CALL_OW 12
27743: ARRAY
27744: ST_TO_ADDR
// if ValidHex ( x , y ) then
27745: LD_VAR 0 3
27749: PPUSH
27750: LD_VAR 0 4
27754: PPUSH
27755: CALL_OW 488
27759: IFFALSE 27782
// begin result := [ x , y ] ;
27761: LD_ADDR_VAR 0 1
27765: PUSH
27766: LD_VAR 0 3
27770: PUSH
27771: LD_VAR 0 4
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: ST_TO_ADDR
// break ;
27780: GO 27784
// end ; end ;
27782: GO 27584
27784: POP
27785: POP
// if result then
27786: LD_VAR 0 1
27790: IFFALSE 27850
// begin ToLua ( playSibBomb() ) ;
27792: LD_STRING playSibBomb()
27794: PPUSH
27795: CALL_OW 559
// wait ( 0 0$14 ) ;
27799: LD_INT 490
27801: PPUSH
27802: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27806: LD_VAR 0 1
27810: PUSH
27811: LD_INT 1
27813: ARRAY
27814: PPUSH
27815: LD_VAR 0 1
27819: PUSH
27820: LD_INT 2
27822: ARRAY
27823: PPUSH
27824: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27828: LD_VAR 0 1
27832: PUSH
27833: LD_INT 1
27835: ARRAY
27836: PPUSH
27837: LD_VAR 0 1
27841: PUSH
27842: LD_INT 2
27844: ARRAY
27845: PPUSH
27846: CALL_OW 429
// end ; end ;
27850: LD_VAR 0 1
27854: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27855: LD_EXP 68
27859: PUSH
27860: LD_EXP 90
27864: AND
27865: IFFALSE 27877
27867: GO 27869
27869: DISABLE
// YouLost (  ) ;
27870: LD_STRING 
27872: PPUSH
27873: CALL_OW 104
27877: END
// every 0 0$1 trigger StreamModeActive and sFog do
27878: LD_EXP 68
27882: PUSH
27883: LD_EXP 89
27887: AND
27888: IFFALSE 27902
27890: GO 27892
27892: DISABLE
// FogOff ( your_side ) ;
27893: LD_OWVAR 2
27897: PPUSH
27898: CALL_OW 344
27902: END
// every 0 0$1 trigger StreamModeActive and sSun do
27903: LD_EXP 68
27907: PUSH
27908: LD_EXP 91
27912: AND
27913: IFFALSE 27941
27915: GO 27917
27917: DISABLE
// begin solar_recharge_percent := 0 ;
27918: LD_ADDR_OWVAR 79
27922: PUSH
27923: LD_INT 0
27925: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27926: LD_INT 10500
27928: PPUSH
27929: CALL_OW 67
// solar_recharge_percent := 100 ;
27933: LD_ADDR_OWVAR 79
27937: PUSH
27938: LD_INT 100
27940: ST_TO_ADDR
// end ;
27941: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27942: LD_EXP 68
27946: PUSH
27947: LD_EXP 92
27951: AND
27952: IFFALSE 28191
27954: GO 27956
27956: DISABLE
27957: LD_INT 0
27959: PPUSH
27960: PPUSH
27961: PPUSH
// begin tmp := [ ] ;
27962: LD_ADDR_VAR 0 3
27966: PUSH
27967: EMPTY
27968: ST_TO_ADDR
// for i := 1 to 6 do
27969: LD_ADDR_VAR 0 1
27973: PUSH
27974: DOUBLE
27975: LD_INT 1
27977: DEC
27978: ST_TO_ADDR
27979: LD_INT 6
27981: PUSH
27982: FOR_TO
27983: IFFALSE 28088
// begin uc_nation := nation_nature ;
27985: LD_ADDR_OWVAR 21
27989: PUSH
27990: LD_INT 0
27992: ST_TO_ADDR
// uc_side := 0 ;
27993: LD_ADDR_OWVAR 20
27997: PUSH
27998: LD_INT 0
28000: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28001: LD_ADDR_OWVAR 29
28005: PUSH
28006: LD_INT 12
28008: PUSH
28009: LD_INT 12
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: ST_TO_ADDR
// hc_agressivity := 20 ;
28016: LD_ADDR_OWVAR 35
28020: PUSH
28021: LD_INT 20
28023: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28024: LD_ADDR_OWVAR 28
28028: PUSH
28029: LD_INT 17
28031: ST_TO_ADDR
// hc_gallery :=  ;
28032: LD_ADDR_OWVAR 33
28036: PUSH
28037: LD_STRING 
28039: ST_TO_ADDR
// hc_name :=  ;
28040: LD_ADDR_OWVAR 26
28044: PUSH
28045: LD_STRING 
28047: ST_TO_ADDR
// un := CreateHuman ;
28048: LD_ADDR_VAR 0 2
28052: PUSH
28053: CALL_OW 44
28057: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28058: LD_VAR 0 2
28062: PPUSH
28063: LD_INT 1
28065: PPUSH
28066: CALL_OW 51
// tmp := tmp ^ un ;
28070: LD_ADDR_VAR 0 3
28074: PUSH
28075: LD_VAR 0 3
28079: PUSH
28080: LD_VAR 0 2
28084: ADD
28085: ST_TO_ADDR
// end ;
28086: GO 27982
28088: POP
28089: POP
// repeat wait ( 0 0$1 ) ;
28090: LD_INT 35
28092: PPUSH
28093: CALL_OW 67
// for un in tmp do
28097: LD_ADDR_VAR 0 2
28101: PUSH
28102: LD_VAR 0 3
28106: PUSH
28107: FOR_IN
28108: IFFALSE 28182
// begin if IsDead ( un ) then
28110: LD_VAR 0 2
28114: PPUSH
28115: CALL_OW 301
28119: IFFALSE 28139
// begin tmp := tmp diff un ;
28121: LD_ADDR_VAR 0 3
28125: PUSH
28126: LD_VAR 0 3
28130: PUSH
28131: LD_VAR 0 2
28135: DIFF
28136: ST_TO_ADDR
// continue ;
28137: GO 28107
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28139: LD_VAR 0 2
28143: PPUSH
28144: LD_INT 3
28146: PUSH
28147: LD_INT 22
28149: PUSH
28150: LD_INT 0
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PPUSH
28161: CALL_OW 69
28165: PPUSH
28166: LD_VAR 0 2
28170: PPUSH
28171: CALL_OW 74
28175: PPUSH
28176: CALL_OW 115
// end ;
28180: GO 28107
28182: POP
28183: POP
// until not tmp ;
28184: LD_VAR 0 3
28188: NOT
28189: IFFALSE 28090
// end ;
28191: PPOPN 3
28193: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28194: LD_EXP 68
28198: PUSH
28199: LD_EXP 93
28203: AND
28204: IFFALSE 28258
28206: GO 28208
28208: DISABLE
// begin ToLua ( displayTroll(); ) ;
28209: LD_STRING displayTroll();
28211: PPUSH
28212: CALL_OW 559
// wait ( 3 3$00 ) ;
28216: LD_INT 6300
28218: PPUSH
28219: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28223: LD_STRING hideTroll();
28225: PPUSH
28226: CALL_OW 559
// wait ( 1 1$00 ) ;
28230: LD_INT 2100
28232: PPUSH
28233: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28237: LD_STRING displayTroll();
28239: PPUSH
28240: CALL_OW 559
// wait ( 1 1$00 ) ;
28244: LD_INT 2100
28246: PPUSH
28247: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28251: LD_STRING hideTroll();
28253: PPUSH
28254: CALL_OW 559
// end ;
28258: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28259: LD_EXP 68
28263: PUSH
28264: LD_EXP 94
28268: AND
28269: IFFALSE 28332
28271: GO 28273
28273: DISABLE
28274: LD_INT 0
28276: PPUSH
// begin p := 0 ;
28277: LD_ADDR_VAR 0 1
28281: PUSH
28282: LD_INT 0
28284: ST_TO_ADDR
// repeat game_speed := 1 ;
28285: LD_ADDR_OWVAR 65
28289: PUSH
28290: LD_INT 1
28292: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28293: LD_INT 35
28295: PPUSH
28296: CALL_OW 67
// p := p + 1 ;
28300: LD_ADDR_VAR 0 1
28304: PUSH
28305: LD_VAR 0 1
28309: PUSH
28310: LD_INT 1
28312: PLUS
28313: ST_TO_ADDR
// until p >= 60 ;
28314: LD_VAR 0 1
28318: PUSH
28319: LD_INT 60
28321: GREATEREQUAL
28322: IFFALSE 28285
// game_speed := 4 ;
28324: LD_ADDR_OWVAR 65
28328: PUSH
28329: LD_INT 4
28331: ST_TO_ADDR
// end ;
28332: PPOPN 1
28334: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28335: LD_EXP 68
28339: PUSH
28340: LD_EXP 95
28344: AND
28345: IFFALSE 28491
28347: GO 28349
28349: DISABLE
28350: LD_INT 0
28352: PPUSH
28353: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28354: LD_ADDR_VAR 0 1
28358: PUSH
28359: LD_INT 22
28361: PUSH
28362: LD_OWVAR 2
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 2
28373: PUSH
28374: LD_INT 30
28376: PUSH
28377: LD_INT 0
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 30
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: LIST
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PPUSH
28403: CALL_OW 69
28407: ST_TO_ADDR
// if not depot then
28408: LD_VAR 0 1
28412: NOT
28413: IFFALSE 28417
// exit ;
28415: GO 28491
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28417: LD_ADDR_VAR 0 2
28421: PUSH
28422: LD_VAR 0 1
28426: PUSH
28427: LD_INT 1
28429: PPUSH
28430: LD_VAR 0 1
28434: PPUSH
28435: CALL_OW 12
28439: ARRAY
28440: PPUSH
28441: CALL_OW 274
28445: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28446: LD_VAR 0 2
28450: PPUSH
28451: LD_INT 1
28453: PPUSH
28454: LD_INT 0
28456: PPUSH
28457: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28461: LD_VAR 0 2
28465: PPUSH
28466: LD_INT 2
28468: PPUSH
28469: LD_INT 0
28471: PPUSH
28472: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28476: LD_VAR 0 2
28480: PPUSH
28481: LD_INT 3
28483: PPUSH
28484: LD_INT 0
28486: PPUSH
28487: CALL_OW 277
// end ;
28491: PPOPN 2
28493: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28494: LD_EXP 68
28498: PUSH
28499: LD_EXP 96
28503: AND
28504: IFFALSE 28601
28506: GO 28508
28508: DISABLE
28509: LD_INT 0
28511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28512: LD_ADDR_VAR 0 1
28516: PUSH
28517: LD_INT 22
28519: PUSH
28520: LD_OWVAR 2
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 21
28531: PUSH
28532: LD_INT 1
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 3
28541: PUSH
28542: LD_INT 23
28544: PUSH
28545: LD_INT 0
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: PPUSH
28561: CALL_OW 69
28565: ST_TO_ADDR
// if not tmp then
28566: LD_VAR 0 1
28570: NOT
28571: IFFALSE 28575
// exit ;
28573: GO 28601
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28575: LD_VAR 0 1
28579: PUSH
28580: LD_INT 1
28582: PPUSH
28583: LD_VAR 0 1
28587: PPUSH
28588: CALL_OW 12
28592: ARRAY
28593: PPUSH
28594: LD_INT 200
28596: PPUSH
28597: CALL_OW 234
// end ;
28601: PPOPN 1
28603: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28604: LD_EXP 68
28608: PUSH
28609: LD_EXP 97
28613: AND
28614: IFFALSE 28693
28616: GO 28618
28618: DISABLE
28619: LD_INT 0
28621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28622: LD_ADDR_VAR 0 1
28626: PUSH
28627: LD_INT 22
28629: PUSH
28630: LD_OWVAR 2
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 21
28641: PUSH
28642: LD_INT 2
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PPUSH
28653: CALL_OW 69
28657: ST_TO_ADDR
// if not tmp then
28658: LD_VAR 0 1
28662: NOT
28663: IFFALSE 28667
// exit ;
28665: GO 28693
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28667: LD_VAR 0 1
28671: PUSH
28672: LD_INT 1
28674: PPUSH
28675: LD_VAR 0 1
28679: PPUSH
28680: CALL_OW 12
28684: ARRAY
28685: PPUSH
28686: LD_INT 60
28688: PPUSH
28689: CALL_OW 234
// end ;
28693: PPOPN 1
28695: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28696: LD_EXP 68
28700: PUSH
28701: LD_EXP 98
28705: AND
28706: IFFALSE 28805
28708: GO 28710
28710: DISABLE
28711: LD_INT 0
28713: PPUSH
28714: PPUSH
// begin enable ;
28715: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28716: LD_ADDR_VAR 0 1
28720: PUSH
28721: LD_INT 22
28723: PUSH
28724: LD_OWVAR 2
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 61
28735: PUSH
28736: EMPTY
28737: LIST
28738: PUSH
28739: LD_INT 33
28741: PUSH
28742: LD_INT 2
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: LIST
28753: PPUSH
28754: CALL_OW 69
28758: ST_TO_ADDR
// if not tmp then
28759: LD_VAR 0 1
28763: NOT
28764: IFFALSE 28768
// exit ;
28766: GO 28805
// for i in tmp do
28768: LD_ADDR_VAR 0 2
28772: PUSH
28773: LD_VAR 0 1
28777: PUSH
28778: FOR_IN
28779: IFFALSE 28803
// if IsControledBy ( i ) then
28781: LD_VAR 0 2
28785: PPUSH
28786: CALL_OW 312
28790: IFFALSE 28801
// ComUnlink ( i ) ;
28792: LD_VAR 0 2
28796: PPUSH
28797: CALL_OW 136
28801: GO 28778
28803: POP
28804: POP
// end ;
28805: PPOPN 2
28807: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28808: LD_EXP 68
28812: PUSH
28813: LD_EXP 99
28817: AND
28818: IFFALSE 28958
28820: GO 28822
28822: DISABLE
28823: LD_INT 0
28825: PPUSH
28826: PPUSH
// begin ToLua ( displayPowell(); ) ;
28827: LD_STRING displayPowell();
28829: PPUSH
28830: CALL_OW 559
// uc_side := 0 ;
28834: LD_ADDR_OWVAR 20
28838: PUSH
28839: LD_INT 0
28841: ST_TO_ADDR
// uc_nation := 2 ;
28842: LD_ADDR_OWVAR 21
28846: PUSH
28847: LD_INT 2
28849: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28850: LD_ADDR_OWVAR 37
28854: PUSH
28855: LD_INT 14
28857: ST_TO_ADDR
// vc_engine := engine_siberite ;
28858: LD_ADDR_OWVAR 39
28862: PUSH
28863: LD_INT 3
28865: ST_TO_ADDR
// vc_control := control_apeman ;
28866: LD_ADDR_OWVAR 38
28870: PUSH
28871: LD_INT 5
28873: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28874: LD_ADDR_OWVAR 40
28878: PUSH
28879: LD_INT 29
28881: ST_TO_ADDR
// un := CreateVehicle ;
28882: LD_ADDR_VAR 0 2
28886: PUSH
28887: CALL_OW 45
28891: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28892: LD_VAR 0 2
28896: PPUSH
28897: LD_INT 1
28899: PPUSH
28900: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28904: LD_INT 35
28906: PPUSH
28907: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28911: LD_VAR 0 2
28915: PPUSH
28916: LD_INT 22
28918: PUSH
28919: LD_OWVAR 2
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PPUSH
28928: CALL_OW 69
28932: PPUSH
28933: LD_VAR 0 2
28937: PPUSH
28938: CALL_OW 74
28942: PPUSH
28943: CALL_OW 115
// until IsDead ( un ) ;
28947: LD_VAR 0 2
28951: PPUSH
28952: CALL_OW 301
28956: IFFALSE 28904
// end ;
28958: PPOPN 2
28960: END
// every 0 0$1 trigger StreamModeActive and sStu do
28961: LD_EXP 68
28965: PUSH
28966: LD_EXP 107
28970: AND
28971: IFFALSE 28987
28973: GO 28975
28975: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28976: LD_STRING displayStucuk();
28978: PPUSH
28979: CALL_OW 559
// ResetFog ;
28983: CALL_OW 335
// end ;
28987: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28988: LD_EXP 68
28992: PUSH
28993: LD_EXP 100
28997: AND
28998: IFFALSE 29139
29000: GO 29002
29002: DISABLE
29003: LD_INT 0
29005: PPUSH
29006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29007: LD_ADDR_VAR 0 2
29011: PUSH
29012: LD_INT 22
29014: PUSH
29015: LD_OWVAR 2
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 21
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PPUSH
29038: CALL_OW 69
29042: ST_TO_ADDR
// if not tmp then
29043: LD_VAR 0 2
29047: NOT
29048: IFFALSE 29052
// exit ;
29050: GO 29139
// un := tmp [ rand ( 1 , tmp ) ] ;
29052: LD_ADDR_VAR 0 1
29056: PUSH
29057: LD_VAR 0 2
29061: PUSH
29062: LD_INT 1
29064: PPUSH
29065: LD_VAR 0 2
29069: PPUSH
29070: CALL_OW 12
29074: ARRAY
29075: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29076: LD_VAR 0 1
29080: PPUSH
29081: LD_INT 0
29083: PPUSH
29084: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29088: LD_VAR 0 1
29092: PPUSH
29093: LD_OWVAR 3
29097: PUSH
29098: LD_VAR 0 1
29102: DIFF
29103: PPUSH
29104: LD_VAR 0 1
29108: PPUSH
29109: CALL_OW 74
29113: PPUSH
29114: CALL_OW 115
// wait ( 0 0$20 ) ;
29118: LD_INT 700
29120: PPUSH
29121: CALL_OW 67
// SetSide ( un , your_side ) ;
29125: LD_VAR 0 1
29129: PPUSH
29130: LD_OWVAR 2
29134: PPUSH
29135: CALL_OW 235
// end ;
29139: PPOPN 2
29141: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29142: LD_EXP 68
29146: PUSH
29147: LD_EXP 101
29151: AND
29152: IFFALSE 29258
29154: GO 29156
29156: DISABLE
29157: LD_INT 0
29159: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29160: LD_ADDR_VAR 0 1
29164: PUSH
29165: LD_INT 22
29167: PUSH
29168: LD_OWVAR 2
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 2
29179: PUSH
29180: LD_INT 30
29182: PUSH
29183: LD_INT 0
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 30
29192: PUSH
29193: LD_INT 1
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: LIST
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PPUSH
29209: CALL_OW 69
29213: ST_TO_ADDR
// if not depot then
29214: LD_VAR 0 1
29218: NOT
29219: IFFALSE 29223
// exit ;
29221: GO 29258
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29223: LD_VAR 0 1
29227: PUSH
29228: LD_INT 1
29230: ARRAY
29231: PPUSH
29232: CALL_OW 250
29236: PPUSH
29237: LD_VAR 0 1
29241: PUSH
29242: LD_INT 1
29244: ARRAY
29245: PPUSH
29246: CALL_OW 251
29250: PPUSH
29251: LD_INT 70
29253: PPUSH
29254: CALL_OW 495
// end ;
29258: PPOPN 1
29260: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29261: LD_EXP 68
29265: PUSH
29266: LD_EXP 102
29270: AND
29271: IFFALSE 29482
29273: GO 29275
29275: DISABLE
29276: LD_INT 0
29278: PPUSH
29279: PPUSH
29280: PPUSH
29281: PPUSH
29282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29283: LD_ADDR_VAR 0 5
29287: PUSH
29288: LD_INT 22
29290: PUSH
29291: LD_OWVAR 2
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 21
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PPUSH
29314: CALL_OW 69
29318: ST_TO_ADDR
// if not tmp then
29319: LD_VAR 0 5
29323: NOT
29324: IFFALSE 29328
// exit ;
29326: GO 29482
// for i in tmp do
29328: LD_ADDR_VAR 0 1
29332: PUSH
29333: LD_VAR 0 5
29337: PUSH
29338: FOR_IN
29339: IFFALSE 29480
// begin d := rand ( 0 , 5 ) ;
29341: LD_ADDR_VAR 0 4
29345: PUSH
29346: LD_INT 0
29348: PPUSH
29349: LD_INT 5
29351: PPUSH
29352: CALL_OW 12
29356: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29357: LD_ADDR_VAR 0 2
29361: PUSH
29362: LD_VAR 0 1
29366: PPUSH
29367: CALL_OW 250
29371: PPUSH
29372: LD_VAR 0 4
29376: PPUSH
29377: LD_INT 3
29379: PPUSH
29380: LD_INT 12
29382: PPUSH
29383: CALL_OW 12
29387: PPUSH
29388: CALL_OW 272
29392: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29393: LD_ADDR_VAR 0 3
29397: PUSH
29398: LD_VAR 0 1
29402: PPUSH
29403: CALL_OW 251
29407: PPUSH
29408: LD_VAR 0 4
29412: PPUSH
29413: LD_INT 3
29415: PPUSH
29416: LD_INT 12
29418: PPUSH
29419: CALL_OW 12
29423: PPUSH
29424: CALL_OW 273
29428: ST_TO_ADDR
// if ValidHex ( x , y ) then
29429: LD_VAR 0 2
29433: PPUSH
29434: LD_VAR 0 3
29438: PPUSH
29439: CALL_OW 488
29443: IFFALSE 29478
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29445: LD_VAR 0 1
29449: PPUSH
29450: LD_VAR 0 2
29454: PPUSH
29455: LD_VAR 0 3
29459: PPUSH
29460: LD_INT 3
29462: PPUSH
29463: LD_INT 6
29465: PPUSH
29466: CALL_OW 12
29470: PPUSH
29471: LD_INT 1
29473: PPUSH
29474: CALL_OW 483
// end ;
29478: GO 29338
29480: POP
29481: POP
// end ;
29482: PPOPN 5
29484: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29485: LD_EXP 68
29489: PUSH
29490: LD_EXP 103
29494: AND
29495: IFFALSE 29589
29497: GO 29499
29499: DISABLE
29500: LD_INT 0
29502: PPUSH
29503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29504: LD_ADDR_VAR 0 2
29508: PUSH
29509: LD_INT 22
29511: PUSH
29512: LD_OWVAR 2
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 32
29523: PUSH
29524: LD_INT 1
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 21
29533: PUSH
29534: LD_INT 2
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: LIST
29545: PPUSH
29546: CALL_OW 69
29550: ST_TO_ADDR
// if not tmp then
29551: LD_VAR 0 2
29555: NOT
29556: IFFALSE 29560
// exit ;
29558: GO 29589
// for i in tmp do
29560: LD_ADDR_VAR 0 1
29564: PUSH
29565: LD_VAR 0 2
29569: PUSH
29570: FOR_IN
29571: IFFALSE 29587
// SetFuel ( i , 0 ) ;
29573: LD_VAR 0 1
29577: PPUSH
29578: LD_INT 0
29580: PPUSH
29581: CALL_OW 240
29585: GO 29570
29587: POP
29588: POP
// end ;
29589: PPOPN 2
29591: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29592: LD_EXP 68
29596: PUSH
29597: LD_EXP 104
29601: AND
29602: IFFALSE 29668
29604: GO 29606
29606: DISABLE
29607: LD_INT 0
29609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29610: LD_ADDR_VAR 0 1
29614: PUSH
29615: LD_INT 22
29617: PUSH
29618: LD_OWVAR 2
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 30
29629: PUSH
29630: LD_INT 29
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PPUSH
29641: CALL_OW 69
29645: ST_TO_ADDR
// if not tmp then
29646: LD_VAR 0 1
29650: NOT
29651: IFFALSE 29655
// exit ;
29653: GO 29668
// DestroyUnit ( tmp [ 1 ] ) ;
29655: LD_VAR 0 1
29659: PUSH
29660: LD_INT 1
29662: ARRAY
29663: PPUSH
29664: CALL_OW 65
// end ;
29668: PPOPN 1
29670: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29671: LD_EXP 68
29675: PUSH
29676: LD_EXP 106
29680: AND
29681: IFFALSE 29810
29683: GO 29685
29685: DISABLE
29686: LD_INT 0
29688: PPUSH
// begin uc_side := 0 ;
29689: LD_ADDR_OWVAR 20
29693: PUSH
29694: LD_INT 0
29696: ST_TO_ADDR
// uc_nation := nation_arabian ;
29697: LD_ADDR_OWVAR 21
29701: PUSH
29702: LD_INT 2
29704: ST_TO_ADDR
// hc_gallery :=  ;
29705: LD_ADDR_OWVAR 33
29709: PUSH
29710: LD_STRING 
29712: ST_TO_ADDR
// hc_name :=  ;
29713: LD_ADDR_OWVAR 26
29717: PUSH
29718: LD_STRING 
29720: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29721: LD_INT 1
29723: PPUSH
29724: LD_INT 11
29726: PPUSH
29727: LD_INT 10
29729: PPUSH
29730: CALL_OW 380
// un := CreateHuman ;
29734: LD_ADDR_VAR 0 1
29738: PUSH
29739: CALL_OW 44
29743: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29744: LD_VAR 0 1
29748: PPUSH
29749: LD_INT 1
29751: PPUSH
29752: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29756: LD_INT 35
29758: PPUSH
29759: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29763: LD_VAR 0 1
29767: PPUSH
29768: LD_INT 22
29770: PUSH
29771: LD_OWVAR 2
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PPUSH
29780: CALL_OW 69
29784: PPUSH
29785: LD_VAR 0 1
29789: PPUSH
29790: CALL_OW 74
29794: PPUSH
29795: CALL_OW 115
// until IsDead ( un ) ;
29799: LD_VAR 0 1
29803: PPUSH
29804: CALL_OW 301
29808: IFFALSE 29756
// end ;
29810: PPOPN 1
29812: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29813: LD_EXP 68
29817: PUSH
29818: LD_EXP 108
29822: AND
29823: IFFALSE 29835
29825: GO 29827
29827: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29828: LD_STRING earthquake(getX(game), 0, 32)
29830: PPUSH
29831: CALL_OW 559
29835: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29836: LD_EXP 68
29840: PUSH
29841: LD_EXP 109
29845: AND
29846: IFFALSE 29937
29848: GO 29850
29850: DISABLE
29851: LD_INT 0
29853: PPUSH
// begin enable ;
29854: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29855: LD_ADDR_VAR 0 1
29859: PUSH
29860: LD_INT 22
29862: PUSH
29863: LD_OWVAR 2
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 21
29874: PUSH
29875: LD_INT 2
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 33
29884: PUSH
29885: LD_INT 3
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: LIST
29896: PPUSH
29897: CALL_OW 69
29901: ST_TO_ADDR
// if not tmp then
29902: LD_VAR 0 1
29906: NOT
29907: IFFALSE 29911
// exit ;
29909: GO 29937
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29911: LD_VAR 0 1
29915: PUSH
29916: LD_INT 1
29918: PPUSH
29919: LD_VAR 0 1
29923: PPUSH
29924: CALL_OW 12
29928: ARRAY
29929: PPUSH
29930: LD_INT 1
29932: PPUSH
29933: CALL_OW 234
// end ;
29937: PPOPN 1
29939: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29940: LD_EXP 68
29944: PUSH
29945: LD_EXP 110
29949: AND
29950: IFFALSE 30091
29952: GO 29954
29954: DISABLE
29955: LD_INT 0
29957: PPUSH
29958: PPUSH
29959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29960: LD_ADDR_VAR 0 3
29964: PUSH
29965: LD_INT 22
29967: PUSH
29968: LD_OWVAR 2
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 25
29979: PUSH
29980: LD_INT 1
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PPUSH
29991: CALL_OW 69
29995: ST_TO_ADDR
// if not tmp then
29996: LD_VAR 0 3
30000: NOT
30001: IFFALSE 30005
// exit ;
30003: GO 30091
// un := tmp [ rand ( 1 , tmp ) ] ;
30005: LD_ADDR_VAR 0 2
30009: PUSH
30010: LD_VAR 0 3
30014: PUSH
30015: LD_INT 1
30017: PPUSH
30018: LD_VAR 0 3
30022: PPUSH
30023: CALL_OW 12
30027: ARRAY
30028: ST_TO_ADDR
// if Crawls ( un ) then
30029: LD_VAR 0 2
30033: PPUSH
30034: CALL_OW 318
30038: IFFALSE 30049
// ComWalk ( un ) ;
30040: LD_VAR 0 2
30044: PPUSH
30045: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30049: LD_VAR 0 2
30053: PPUSH
30054: LD_INT 9
30056: PPUSH
30057: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30061: LD_INT 28
30063: PPUSH
30064: LD_OWVAR 2
30068: PPUSH
30069: LD_INT 2
30071: PPUSH
30072: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30076: LD_INT 29
30078: PPUSH
30079: LD_OWVAR 2
30083: PPUSH
30084: LD_INT 2
30086: PPUSH
30087: CALL_OW 322
// end ;
30091: PPOPN 3
30093: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30094: LD_EXP 68
30098: PUSH
30099: LD_EXP 111
30103: AND
30104: IFFALSE 30215
30106: GO 30108
30108: DISABLE
30109: LD_INT 0
30111: PPUSH
30112: PPUSH
30113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30114: LD_ADDR_VAR 0 3
30118: PUSH
30119: LD_INT 22
30121: PUSH
30122: LD_OWVAR 2
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 25
30133: PUSH
30134: LD_INT 1
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PPUSH
30145: CALL_OW 69
30149: ST_TO_ADDR
// if not tmp then
30150: LD_VAR 0 3
30154: NOT
30155: IFFALSE 30159
// exit ;
30157: GO 30215
// un := tmp [ rand ( 1 , tmp ) ] ;
30159: LD_ADDR_VAR 0 2
30163: PUSH
30164: LD_VAR 0 3
30168: PUSH
30169: LD_INT 1
30171: PPUSH
30172: LD_VAR 0 3
30176: PPUSH
30177: CALL_OW 12
30181: ARRAY
30182: ST_TO_ADDR
// if Crawls ( un ) then
30183: LD_VAR 0 2
30187: PPUSH
30188: CALL_OW 318
30192: IFFALSE 30203
// ComWalk ( un ) ;
30194: LD_VAR 0 2
30198: PPUSH
30199: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30203: LD_VAR 0 2
30207: PPUSH
30208: LD_INT 8
30210: PPUSH
30211: CALL_OW 336
// end ;
30215: PPOPN 3
30217: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30218: LD_EXP 68
30222: PUSH
30223: LD_EXP 112
30227: AND
30228: IFFALSE 30372
30230: GO 30232
30232: DISABLE
30233: LD_INT 0
30235: PPUSH
30236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30237: LD_ADDR_VAR 0 2
30241: PUSH
30242: LD_INT 22
30244: PUSH
30245: LD_OWVAR 2
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 21
30256: PUSH
30257: LD_INT 2
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 2
30266: PUSH
30267: LD_INT 34
30269: PUSH
30270: LD_INT 12
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 34
30279: PUSH
30280: LD_INT 51
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 34
30289: PUSH
30290: LD_INT 32
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: LIST
30307: PPUSH
30308: CALL_OW 69
30312: ST_TO_ADDR
// if not tmp then
30313: LD_VAR 0 2
30317: NOT
30318: IFFALSE 30322
// exit ;
30320: GO 30372
// for i in tmp do
30322: LD_ADDR_VAR 0 1
30326: PUSH
30327: LD_VAR 0 2
30331: PUSH
30332: FOR_IN
30333: IFFALSE 30370
// if GetCargo ( i , mat_artifact ) = 0 then
30335: LD_VAR 0 1
30339: PPUSH
30340: LD_INT 4
30342: PPUSH
30343: CALL_OW 289
30347: PUSH
30348: LD_INT 0
30350: EQUAL
30351: IFFALSE 30368
// SetCargo ( i , mat_siberit , 100 ) ;
30353: LD_VAR 0 1
30357: PPUSH
30358: LD_INT 3
30360: PPUSH
30361: LD_INT 100
30363: PPUSH
30364: CALL_OW 290
30368: GO 30332
30370: POP
30371: POP
// end ;
30372: PPOPN 2
30374: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30375: LD_EXP 68
30379: PUSH
30380: LD_EXP 113
30384: AND
30385: IFFALSE 30568
30387: GO 30389
30389: DISABLE
30390: LD_INT 0
30392: PPUSH
30393: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30394: LD_ADDR_VAR 0 2
30398: PUSH
30399: LD_INT 22
30401: PUSH
30402: LD_OWVAR 2
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PPUSH
30411: CALL_OW 69
30415: ST_TO_ADDR
// if not tmp then
30416: LD_VAR 0 2
30420: NOT
30421: IFFALSE 30425
// exit ;
30423: GO 30568
// for i := 1 to 2 do
30425: LD_ADDR_VAR 0 1
30429: PUSH
30430: DOUBLE
30431: LD_INT 1
30433: DEC
30434: ST_TO_ADDR
30435: LD_INT 2
30437: PUSH
30438: FOR_TO
30439: IFFALSE 30566
// begin uc_side := your_side ;
30441: LD_ADDR_OWVAR 20
30445: PUSH
30446: LD_OWVAR 2
30450: ST_TO_ADDR
// uc_nation := nation_american ;
30451: LD_ADDR_OWVAR 21
30455: PUSH
30456: LD_INT 1
30458: ST_TO_ADDR
// vc_chassis := us_morphling ;
30459: LD_ADDR_OWVAR 37
30463: PUSH
30464: LD_INT 5
30466: ST_TO_ADDR
// vc_engine := engine_siberite ;
30467: LD_ADDR_OWVAR 39
30471: PUSH
30472: LD_INT 3
30474: ST_TO_ADDR
// vc_control := control_computer ;
30475: LD_ADDR_OWVAR 38
30479: PUSH
30480: LD_INT 3
30482: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30483: LD_ADDR_OWVAR 40
30487: PUSH
30488: LD_INT 10
30490: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30491: LD_VAR 0 2
30495: PUSH
30496: LD_INT 1
30498: ARRAY
30499: PPUSH
30500: CALL_OW 310
30504: NOT
30505: IFFALSE 30552
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30507: CALL_OW 45
30511: PPUSH
30512: LD_VAR 0 2
30516: PUSH
30517: LD_INT 1
30519: ARRAY
30520: PPUSH
30521: CALL_OW 250
30525: PPUSH
30526: LD_VAR 0 2
30530: PUSH
30531: LD_INT 1
30533: ARRAY
30534: PPUSH
30535: CALL_OW 251
30539: PPUSH
30540: LD_INT 12
30542: PPUSH
30543: LD_INT 1
30545: PPUSH
30546: CALL_OW 50
30550: GO 30564
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30552: CALL_OW 45
30556: PPUSH
30557: LD_INT 1
30559: PPUSH
30560: CALL_OW 51
// end ;
30564: GO 30438
30566: POP
30567: POP
// end ;
30568: PPOPN 2
30570: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30571: LD_EXP 68
30575: PUSH
30576: LD_EXP 114
30580: AND
30581: IFFALSE 30803
30583: GO 30585
30585: DISABLE
30586: LD_INT 0
30588: PPUSH
30589: PPUSH
30590: PPUSH
30591: PPUSH
30592: PPUSH
30593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30594: LD_ADDR_VAR 0 6
30598: PUSH
30599: LD_INT 22
30601: PUSH
30602: LD_OWVAR 2
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 21
30613: PUSH
30614: LD_INT 1
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 3
30623: PUSH
30624: LD_INT 23
30626: PUSH
30627: LD_INT 0
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: LIST
30642: PPUSH
30643: CALL_OW 69
30647: ST_TO_ADDR
// if not tmp then
30648: LD_VAR 0 6
30652: NOT
30653: IFFALSE 30657
// exit ;
30655: GO 30803
// s1 := rand ( 1 , 4 ) ;
30657: LD_ADDR_VAR 0 2
30661: PUSH
30662: LD_INT 1
30664: PPUSH
30665: LD_INT 4
30667: PPUSH
30668: CALL_OW 12
30672: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30673: LD_ADDR_VAR 0 4
30677: PUSH
30678: LD_VAR 0 6
30682: PUSH
30683: LD_INT 1
30685: ARRAY
30686: PPUSH
30687: LD_VAR 0 2
30691: PPUSH
30692: CALL_OW 259
30696: ST_TO_ADDR
// if s1 = 1 then
30697: LD_VAR 0 2
30701: PUSH
30702: LD_INT 1
30704: EQUAL
30705: IFFALSE 30725
// s2 := rand ( 2 , 4 ) else
30707: LD_ADDR_VAR 0 3
30711: PUSH
30712: LD_INT 2
30714: PPUSH
30715: LD_INT 4
30717: PPUSH
30718: CALL_OW 12
30722: ST_TO_ADDR
30723: GO 30733
// s2 := 1 ;
30725: LD_ADDR_VAR 0 3
30729: PUSH
30730: LD_INT 1
30732: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30733: LD_ADDR_VAR 0 5
30737: PUSH
30738: LD_VAR 0 6
30742: PUSH
30743: LD_INT 1
30745: ARRAY
30746: PPUSH
30747: LD_VAR 0 3
30751: PPUSH
30752: CALL_OW 259
30756: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30757: LD_VAR 0 6
30761: PUSH
30762: LD_INT 1
30764: ARRAY
30765: PPUSH
30766: LD_VAR 0 2
30770: PPUSH
30771: LD_VAR 0 5
30775: PPUSH
30776: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30780: LD_VAR 0 6
30784: PUSH
30785: LD_INT 1
30787: ARRAY
30788: PPUSH
30789: LD_VAR 0 3
30793: PPUSH
30794: LD_VAR 0 4
30798: PPUSH
30799: CALL_OW 237
// end ;
30803: PPOPN 6
30805: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30806: LD_EXP 68
30810: PUSH
30811: LD_EXP 115
30815: AND
30816: IFFALSE 30895
30818: GO 30820
30820: DISABLE
30821: LD_INT 0
30823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30824: LD_ADDR_VAR 0 1
30828: PUSH
30829: LD_INT 22
30831: PUSH
30832: LD_OWVAR 2
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 30
30843: PUSH
30844: LD_INT 3
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PPUSH
30855: CALL_OW 69
30859: ST_TO_ADDR
// if not tmp then
30860: LD_VAR 0 1
30864: NOT
30865: IFFALSE 30869
// exit ;
30867: GO 30895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30869: LD_VAR 0 1
30873: PUSH
30874: LD_INT 1
30876: PPUSH
30877: LD_VAR 0 1
30881: PPUSH
30882: CALL_OW 12
30886: ARRAY
30887: PPUSH
30888: LD_INT 1
30890: PPUSH
30891: CALL_OW 234
// end ;
30895: PPOPN 1
30897: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30898: LD_EXP 68
30902: PUSH
30903: LD_EXP 116
30907: AND
30908: IFFALSE 31020
30910: GO 30912
30912: DISABLE
30913: LD_INT 0
30915: PPUSH
30916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30917: LD_ADDR_VAR 0 2
30921: PUSH
30922: LD_INT 22
30924: PUSH
30925: LD_OWVAR 2
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 2
30936: PUSH
30937: LD_INT 30
30939: PUSH
30940: LD_INT 27
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 30
30949: PUSH
30950: LD_INT 26
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 30
30959: PUSH
30960: LD_INT 28
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PPUSH
30977: CALL_OW 69
30981: ST_TO_ADDR
// if not tmp then
30982: LD_VAR 0 2
30986: NOT
30987: IFFALSE 30991
// exit ;
30989: GO 31020
// for i in tmp do
30991: LD_ADDR_VAR 0 1
30995: PUSH
30996: LD_VAR 0 2
31000: PUSH
31001: FOR_IN
31002: IFFALSE 31018
// SetLives ( i , 1 ) ;
31004: LD_VAR 0 1
31008: PPUSH
31009: LD_INT 1
31011: PPUSH
31012: CALL_OW 234
31016: GO 31001
31018: POP
31019: POP
// end ;
31020: PPOPN 2
31022: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31023: LD_EXP 68
31027: PUSH
31028: LD_EXP 117
31032: AND
31033: IFFALSE 31320
31035: GO 31037
31037: DISABLE
31038: LD_INT 0
31040: PPUSH
31041: PPUSH
31042: PPUSH
// begin i := rand ( 1 , 7 ) ;
31043: LD_ADDR_VAR 0 1
31047: PUSH
31048: LD_INT 1
31050: PPUSH
31051: LD_INT 7
31053: PPUSH
31054: CALL_OW 12
31058: ST_TO_ADDR
// case i of 1 :
31059: LD_VAR 0 1
31063: PUSH
31064: LD_INT 1
31066: DOUBLE
31067: EQUAL
31068: IFTRUE 31072
31070: GO 31082
31072: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31073: LD_STRING earthquake(getX(game), 0, 32)
31075: PPUSH
31076: CALL_OW 559
31080: GO 31320
31082: LD_INT 2
31084: DOUBLE
31085: EQUAL
31086: IFTRUE 31090
31088: GO 31104
31090: POP
// begin ToLua ( displayStucuk(); ) ;
31091: LD_STRING displayStucuk();
31093: PPUSH
31094: CALL_OW 559
// ResetFog ;
31098: CALL_OW 335
// end ; 3 :
31102: GO 31320
31104: LD_INT 3
31106: DOUBLE
31107: EQUAL
31108: IFTRUE 31112
31110: GO 31216
31112: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31113: LD_ADDR_VAR 0 2
31117: PUSH
31118: LD_INT 22
31120: PUSH
31121: LD_OWVAR 2
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 25
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PPUSH
31144: CALL_OW 69
31148: ST_TO_ADDR
// if not tmp then
31149: LD_VAR 0 2
31153: NOT
31154: IFFALSE 31158
// exit ;
31156: GO 31320
// un := tmp [ rand ( 1 , tmp ) ] ;
31158: LD_ADDR_VAR 0 3
31162: PUSH
31163: LD_VAR 0 2
31167: PUSH
31168: LD_INT 1
31170: PPUSH
31171: LD_VAR 0 2
31175: PPUSH
31176: CALL_OW 12
31180: ARRAY
31181: ST_TO_ADDR
// if Crawls ( un ) then
31182: LD_VAR 0 3
31186: PPUSH
31187: CALL_OW 318
31191: IFFALSE 31202
// ComWalk ( un ) ;
31193: LD_VAR 0 3
31197: PPUSH
31198: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31202: LD_VAR 0 3
31206: PPUSH
31207: LD_INT 8
31209: PPUSH
31210: CALL_OW 336
// end ; 4 :
31214: GO 31320
31216: LD_INT 4
31218: DOUBLE
31219: EQUAL
31220: IFTRUE 31224
31222: GO 31298
31224: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31225: LD_ADDR_VAR 0 2
31229: PUSH
31230: LD_INT 22
31232: PUSH
31233: LD_OWVAR 2
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 30
31244: PUSH
31245: LD_INT 29
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PPUSH
31256: CALL_OW 69
31260: ST_TO_ADDR
// if not tmp then
31261: LD_VAR 0 2
31265: NOT
31266: IFFALSE 31270
// exit ;
31268: GO 31320
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31270: LD_VAR 0 2
31274: PUSH
31275: LD_INT 1
31277: ARRAY
31278: PPUSH
31279: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31283: LD_VAR 0 2
31287: PUSH
31288: LD_INT 1
31290: ARRAY
31291: PPUSH
31292: CALL_OW 65
// end ; 5 .. 7 :
31296: GO 31320
31298: LD_INT 5
31300: DOUBLE
31301: GREATEREQUAL
31302: IFFALSE 31310
31304: LD_INT 7
31306: DOUBLE
31307: LESSEQUAL
31308: IFTRUE 31312
31310: GO 31319
31312: POP
// StreamSibBomb ; end ;
31313: CALL 27557 0 0
31317: GO 31320
31319: POP
// end ;
31320: PPOPN 3
31322: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31323: LD_EXP 68
31327: PUSH
31328: LD_EXP 118
31332: AND
31333: IFFALSE 31489
31335: GO 31337
31337: DISABLE
31338: LD_INT 0
31340: PPUSH
31341: PPUSH
31342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31343: LD_ADDR_VAR 0 2
31347: PUSH
31348: LD_INT 81
31350: PUSH
31351: LD_OWVAR 2
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 2
31362: PUSH
31363: LD_INT 21
31365: PUSH
31366: LD_INT 1
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 21
31375: PUSH
31376: LD_INT 2
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: LIST
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PPUSH
31392: CALL_OW 69
31396: ST_TO_ADDR
// if not tmp then
31397: LD_VAR 0 2
31401: NOT
31402: IFFALSE 31406
// exit ;
31404: GO 31489
// p := 0 ;
31406: LD_ADDR_VAR 0 3
31410: PUSH
31411: LD_INT 0
31413: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31414: LD_INT 35
31416: PPUSH
31417: CALL_OW 67
// p := p + 1 ;
31421: LD_ADDR_VAR 0 3
31425: PUSH
31426: LD_VAR 0 3
31430: PUSH
31431: LD_INT 1
31433: PLUS
31434: ST_TO_ADDR
// for i in tmp do
31435: LD_ADDR_VAR 0 1
31439: PUSH
31440: LD_VAR 0 2
31444: PUSH
31445: FOR_IN
31446: IFFALSE 31477
// if GetLives ( i ) < 1000 then
31448: LD_VAR 0 1
31452: PPUSH
31453: CALL_OW 256
31457: PUSH
31458: LD_INT 1000
31460: LESS
31461: IFFALSE 31475
// SetLives ( i , 1000 ) ;
31463: LD_VAR 0 1
31467: PPUSH
31468: LD_INT 1000
31470: PPUSH
31471: CALL_OW 234
31475: GO 31445
31477: POP
31478: POP
// until p > 20 ;
31479: LD_VAR 0 3
31483: PUSH
31484: LD_INT 20
31486: GREATER
31487: IFFALSE 31414
// end ;
31489: PPOPN 3
31491: END
// every 0 0$1 trigger StreamModeActive and sTime do
31492: LD_EXP 68
31496: PUSH
31497: LD_EXP 119
31501: AND
31502: IFFALSE 31537
31504: GO 31506
31506: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31507: LD_INT 28
31509: PPUSH
31510: LD_OWVAR 2
31514: PPUSH
31515: LD_INT 2
31517: PPUSH
31518: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31522: LD_INT 30
31524: PPUSH
31525: LD_OWVAR 2
31529: PPUSH
31530: LD_INT 2
31532: PPUSH
31533: CALL_OW 322
// end ;
31537: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31538: LD_EXP 68
31542: PUSH
31543: LD_EXP 120
31547: AND
31548: IFFALSE 31669
31550: GO 31552
31552: DISABLE
31553: LD_INT 0
31555: PPUSH
31556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31557: LD_ADDR_VAR 0 2
31561: PUSH
31562: LD_INT 22
31564: PUSH
31565: LD_OWVAR 2
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 21
31576: PUSH
31577: LD_INT 1
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 3
31586: PUSH
31587: LD_INT 23
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: LIST
31605: PPUSH
31606: CALL_OW 69
31610: ST_TO_ADDR
// if not tmp then
31611: LD_VAR 0 2
31615: NOT
31616: IFFALSE 31620
// exit ;
31618: GO 31669
// for i in tmp do
31620: LD_ADDR_VAR 0 1
31624: PUSH
31625: LD_VAR 0 2
31629: PUSH
31630: FOR_IN
31631: IFFALSE 31667
// begin if Crawls ( i ) then
31633: LD_VAR 0 1
31637: PPUSH
31638: CALL_OW 318
31642: IFFALSE 31653
// ComWalk ( i ) ;
31644: LD_VAR 0 1
31648: PPUSH
31649: CALL_OW 138
// SetClass ( i , 2 ) ;
31653: LD_VAR 0 1
31657: PPUSH
31658: LD_INT 2
31660: PPUSH
31661: CALL_OW 336
// end ;
31665: GO 31630
31667: POP
31668: POP
// end ;
31669: PPOPN 2
31671: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31672: LD_EXP 68
31676: PUSH
31677: LD_EXP 121
31681: AND
31682: IFFALSE 31970
31684: GO 31686
31686: DISABLE
31687: LD_INT 0
31689: PPUSH
31690: PPUSH
31691: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31692: LD_OWVAR 2
31696: PPUSH
31697: LD_INT 9
31699: PPUSH
31700: LD_INT 1
31702: PPUSH
31703: LD_INT 1
31705: PPUSH
31706: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31710: LD_INT 9
31712: PPUSH
31713: LD_OWVAR 2
31717: PPUSH
31718: CALL_OW 343
// uc_side := 9 ;
31722: LD_ADDR_OWVAR 20
31726: PUSH
31727: LD_INT 9
31729: ST_TO_ADDR
// uc_nation := 2 ;
31730: LD_ADDR_OWVAR 21
31734: PUSH
31735: LD_INT 2
31737: ST_TO_ADDR
// hc_name := Dark Warrior ;
31738: LD_ADDR_OWVAR 26
31742: PUSH
31743: LD_STRING Dark Warrior
31745: ST_TO_ADDR
// hc_gallery :=  ;
31746: LD_ADDR_OWVAR 33
31750: PUSH
31751: LD_STRING 
31753: ST_TO_ADDR
// hc_noskilllimit := true ;
31754: LD_ADDR_OWVAR 76
31758: PUSH
31759: LD_INT 1
31761: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31762: LD_ADDR_OWVAR 31
31766: PUSH
31767: LD_INT 30
31769: PUSH
31770: LD_INT 30
31772: PUSH
31773: LD_INT 30
31775: PUSH
31776: LD_INT 30
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: ST_TO_ADDR
// un := CreateHuman ;
31785: LD_ADDR_VAR 0 3
31789: PUSH
31790: CALL_OW 44
31794: ST_TO_ADDR
// hc_noskilllimit := false ;
31795: LD_ADDR_OWVAR 76
31799: PUSH
31800: LD_INT 0
31802: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31803: LD_VAR 0 3
31807: PPUSH
31808: LD_INT 1
31810: PPUSH
31811: CALL_OW 51
// ToLua ( playRanger() ) ;
31815: LD_STRING playRanger()
31817: PPUSH
31818: CALL_OW 559
// p := 0 ;
31822: LD_ADDR_VAR 0 2
31826: PUSH
31827: LD_INT 0
31829: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31830: LD_INT 35
31832: PPUSH
31833: CALL_OW 67
// p := p + 1 ;
31837: LD_ADDR_VAR 0 2
31841: PUSH
31842: LD_VAR 0 2
31846: PUSH
31847: LD_INT 1
31849: PLUS
31850: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31851: LD_VAR 0 3
31855: PPUSH
31856: CALL_OW 256
31860: PUSH
31861: LD_INT 1000
31863: LESS
31864: IFFALSE 31878
// SetLives ( un , 1000 ) ;
31866: LD_VAR 0 3
31870: PPUSH
31871: LD_INT 1000
31873: PPUSH
31874: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31878: LD_VAR 0 3
31882: PPUSH
31883: LD_INT 81
31885: PUSH
31886: LD_OWVAR 2
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 91
31897: PUSH
31898: LD_VAR 0 3
31902: PUSH
31903: LD_INT 30
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: LIST
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PPUSH
31915: CALL_OW 69
31919: PPUSH
31920: LD_VAR 0 3
31924: PPUSH
31925: CALL_OW 74
31929: PPUSH
31930: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31934: LD_VAR 0 2
31938: PUSH
31939: LD_INT 80
31941: GREATER
31942: PUSH
31943: LD_VAR 0 3
31947: PPUSH
31948: CALL_OW 301
31952: OR
31953: IFFALSE 31830
// if un then
31955: LD_VAR 0 3
31959: IFFALSE 31970
// RemoveUnit ( un ) ;
31961: LD_VAR 0 3
31965: PPUSH
31966: CALL_OW 64
// end ;
31970: PPOPN 3
31972: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31973: LD_EXP 122
31977: IFFALSE 32093
31979: GO 31981
31981: DISABLE
31982: LD_INT 0
31984: PPUSH
31985: PPUSH
31986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31987: LD_ADDR_VAR 0 2
31991: PUSH
31992: LD_INT 81
31994: PUSH
31995: LD_OWVAR 2
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 21
32006: PUSH
32007: LD_INT 1
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PPUSH
32018: CALL_OW 69
32022: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32023: LD_STRING playComputer()
32025: PPUSH
32026: CALL_OW 559
// if not tmp then
32030: LD_VAR 0 2
32034: NOT
32035: IFFALSE 32039
// exit ;
32037: GO 32093
// for i in tmp do
32039: LD_ADDR_VAR 0 1
32043: PUSH
32044: LD_VAR 0 2
32048: PUSH
32049: FOR_IN
32050: IFFALSE 32091
// for j := 1 to 4 do
32052: LD_ADDR_VAR 0 3
32056: PUSH
32057: DOUBLE
32058: LD_INT 1
32060: DEC
32061: ST_TO_ADDR
32062: LD_INT 4
32064: PUSH
32065: FOR_TO
32066: IFFALSE 32087
// SetSkill ( i , j , 10 ) ;
32068: LD_VAR 0 1
32072: PPUSH
32073: LD_VAR 0 3
32077: PPUSH
32078: LD_INT 10
32080: PPUSH
32081: CALL_OW 237
32085: GO 32065
32087: POP
32088: POP
32089: GO 32049
32091: POP
32092: POP
// end ;
32093: PPOPN 3
32095: END
// every 0 0$1 trigger s30 do var i , tmp ;
32096: LD_EXP 123
32100: IFFALSE 32169
32102: GO 32104
32104: DISABLE
32105: LD_INT 0
32107: PPUSH
32108: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32109: LD_ADDR_VAR 0 2
32113: PUSH
32114: LD_INT 22
32116: PUSH
32117: LD_OWVAR 2
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PPUSH
32126: CALL_OW 69
32130: ST_TO_ADDR
// if not tmp then
32131: LD_VAR 0 2
32135: NOT
32136: IFFALSE 32140
// exit ;
32138: GO 32169
// for i in tmp do
32140: LD_ADDR_VAR 0 1
32144: PUSH
32145: LD_VAR 0 2
32149: PUSH
32150: FOR_IN
32151: IFFALSE 32167
// SetLives ( i , 300 ) ;
32153: LD_VAR 0 1
32157: PPUSH
32158: LD_INT 300
32160: PPUSH
32161: CALL_OW 234
32165: GO 32150
32167: POP
32168: POP
// end ;
32169: PPOPN 2
32171: END
// every 0 0$1 trigger s60 do var i , tmp ;
32172: LD_EXP 124
32176: IFFALSE 32245
32178: GO 32180
32180: DISABLE
32181: LD_INT 0
32183: PPUSH
32184: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32185: LD_ADDR_VAR 0 2
32189: PUSH
32190: LD_INT 22
32192: PUSH
32193: LD_OWVAR 2
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PPUSH
32202: CALL_OW 69
32206: ST_TO_ADDR
// if not tmp then
32207: LD_VAR 0 2
32211: NOT
32212: IFFALSE 32216
// exit ;
32214: GO 32245
// for i in tmp do
32216: LD_ADDR_VAR 0 1
32220: PUSH
32221: LD_VAR 0 2
32225: PUSH
32226: FOR_IN
32227: IFFALSE 32243
// SetLives ( i , 600 ) ;
32229: LD_VAR 0 1
32233: PPUSH
32234: LD_INT 600
32236: PPUSH
32237: CALL_OW 234
32241: GO 32226
32243: POP
32244: POP
// end ;
32245: PPOPN 2
32247: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32248: LD_INT 0
32250: PPUSH
// case cmd of 301 :
32251: LD_VAR 0 1
32255: PUSH
32256: LD_INT 301
32258: DOUBLE
32259: EQUAL
32260: IFTRUE 32264
32262: GO 32296
32264: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32265: LD_VAR 0 6
32269: PPUSH
32270: LD_VAR 0 7
32274: PPUSH
32275: LD_VAR 0 8
32279: PPUSH
32280: LD_VAR 0 4
32284: PPUSH
32285: LD_VAR 0 5
32289: PPUSH
32290: CALL 33497 0 5
32294: GO 32417
32296: LD_INT 302
32298: DOUBLE
32299: EQUAL
32300: IFTRUE 32304
32302: GO 32341
32304: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32305: LD_VAR 0 6
32309: PPUSH
32310: LD_VAR 0 7
32314: PPUSH
32315: LD_VAR 0 8
32319: PPUSH
32320: LD_VAR 0 9
32324: PPUSH
32325: LD_VAR 0 4
32329: PPUSH
32330: LD_VAR 0 5
32334: PPUSH
32335: CALL 33588 0 6
32339: GO 32417
32341: LD_INT 303
32343: DOUBLE
32344: EQUAL
32345: IFTRUE 32349
32347: GO 32386
32349: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32350: LD_VAR 0 6
32354: PPUSH
32355: LD_VAR 0 7
32359: PPUSH
32360: LD_VAR 0 8
32364: PPUSH
32365: LD_VAR 0 9
32369: PPUSH
32370: LD_VAR 0 4
32374: PPUSH
32375: LD_VAR 0 5
32379: PPUSH
32380: CALL 32422 0 6
32384: GO 32417
32386: LD_INT 304
32388: DOUBLE
32389: EQUAL
32390: IFTRUE 32394
32392: GO 32416
32394: POP
// hHackTeleport ( unit , x , y ) ; end ;
32395: LD_VAR 0 2
32399: PPUSH
32400: LD_VAR 0 4
32404: PPUSH
32405: LD_VAR 0 5
32409: PPUSH
32410: CALL 34181 0 3
32414: GO 32417
32416: POP
// end ;
32417: LD_VAR 0 12
32421: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32422: LD_INT 0
32424: PPUSH
32425: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32426: LD_VAR 0 1
32430: PUSH
32431: LD_INT 1
32433: LESS
32434: PUSH
32435: LD_VAR 0 1
32439: PUSH
32440: LD_INT 3
32442: GREATER
32443: OR
32444: PUSH
32445: LD_VAR 0 5
32449: PPUSH
32450: LD_VAR 0 6
32454: PPUSH
32455: CALL_OW 428
32459: OR
32460: IFFALSE 32464
// exit ;
32462: GO 33184
// uc_side := your_side ;
32464: LD_ADDR_OWVAR 20
32468: PUSH
32469: LD_OWVAR 2
32473: ST_TO_ADDR
// uc_nation := nation ;
32474: LD_ADDR_OWVAR 21
32478: PUSH
32479: LD_VAR 0 1
32483: ST_TO_ADDR
// bc_level = 1 ;
32484: LD_ADDR_OWVAR 43
32488: PUSH
32489: LD_INT 1
32491: ST_TO_ADDR
// case btype of 1 :
32492: LD_VAR 0 2
32496: PUSH
32497: LD_INT 1
32499: DOUBLE
32500: EQUAL
32501: IFTRUE 32505
32503: GO 32516
32505: POP
// bc_type := b_depot ; 2 :
32506: LD_ADDR_OWVAR 42
32510: PUSH
32511: LD_INT 0
32513: ST_TO_ADDR
32514: GO 33128
32516: LD_INT 2
32518: DOUBLE
32519: EQUAL
32520: IFTRUE 32524
32522: GO 32535
32524: POP
// bc_type := b_warehouse ; 3 :
32525: LD_ADDR_OWVAR 42
32529: PUSH
32530: LD_INT 1
32532: ST_TO_ADDR
32533: GO 33128
32535: LD_INT 3
32537: DOUBLE
32538: EQUAL
32539: IFTRUE 32543
32541: GO 32554
32543: POP
// bc_type := b_lab ; 4 .. 9 :
32544: LD_ADDR_OWVAR 42
32548: PUSH
32549: LD_INT 6
32551: ST_TO_ADDR
32552: GO 33128
32554: LD_INT 4
32556: DOUBLE
32557: GREATEREQUAL
32558: IFFALSE 32566
32560: LD_INT 9
32562: DOUBLE
32563: LESSEQUAL
32564: IFTRUE 32568
32566: GO 32620
32568: POP
// begin bc_type := b_lab_half ;
32569: LD_ADDR_OWVAR 42
32573: PUSH
32574: LD_INT 7
32576: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32577: LD_ADDR_OWVAR 44
32581: PUSH
32582: LD_INT 10
32584: PUSH
32585: LD_INT 11
32587: PUSH
32588: LD_INT 12
32590: PUSH
32591: LD_INT 15
32593: PUSH
32594: LD_INT 14
32596: PUSH
32597: LD_INT 13
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: PUSH
32608: LD_VAR 0 2
32612: PUSH
32613: LD_INT 3
32615: MINUS
32616: ARRAY
32617: ST_TO_ADDR
// end ; 10 .. 13 :
32618: GO 33128
32620: LD_INT 10
32622: DOUBLE
32623: GREATEREQUAL
32624: IFFALSE 32632
32626: LD_INT 13
32628: DOUBLE
32629: LESSEQUAL
32630: IFTRUE 32634
32632: GO 32711
32634: POP
// begin bc_type := b_lab_full ;
32635: LD_ADDR_OWVAR 42
32639: PUSH
32640: LD_INT 8
32642: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32643: LD_ADDR_OWVAR 44
32647: PUSH
32648: LD_INT 10
32650: PUSH
32651: LD_INT 12
32653: PUSH
32654: LD_INT 14
32656: PUSH
32657: LD_INT 13
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: PUSH
32666: LD_VAR 0 2
32670: PUSH
32671: LD_INT 9
32673: MINUS
32674: ARRAY
32675: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32676: LD_ADDR_OWVAR 45
32680: PUSH
32681: LD_INT 11
32683: PUSH
32684: LD_INT 15
32686: PUSH
32687: LD_INT 12
32689: PUSH
32690: LD_INT 15
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: PUSH
32699: LD_VAR 0 2
32703: PUSH
32704: LD_INT 9
32706: MINUS
32707: ARRAY
32708: ST_TO_ADDR
// end ; 14 :
32709: GO 33128
32711: LD_INT 14
32713: DOUBLE
32714: EQUAL
32715: IFTRUE 32719
32717: GO 32730
32719: POP
// bc_type := b_workshop ; 15 :
32720: LD_ADDR_OWVAR 42
32724: PUSH
32725: LD_INT 2
32727: ST_TO_ADDR
32728: GO 33128
32730: LD_INT 15
32732: DOUBLE
32733: EQUAL
32734: IFTRUE 32738
32736: GO 32749
32738: POP
// bc_type := b_factory ; 16 :
32739: LD_ADDR_OWVAR 42
32743: PUSH
32744: LD_INT 3
32746: ST_TO_ADDR
32747: GO 33128
32749: LD_INT 16
32751: DOUBLE
32752: EQUAL
32753: IFTRUE 32757
32755: GO 32768
32757: POP
// bc_type := b_ext_gun ; 17 :
32758: LD_ADDR_OWVAR 42
32762: PUSH
32763: LD_INT 17
32765: ST_TO_ADDR
32766: GO 33128
32768: LD_INT 17
32770: DOUBLE
32771: EQUAL
32772: IFTRUE 32776
32774: GO 32804
32776: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32777: LD_ADDR_OWVAR 42
32781: PUSH
32782: LD_INT 19
32784: PUSH
32785: LD_INT 23
32787: PUSH
32788: LD_INT 19
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: LIST
32795: PUSH
32796: LD_VAR 0 1
32800: ARRAY
32801: ST_TO_ADDR
32802: GO 33128
32804: LD_INT 18
32806: DOUBLE
32807: EQUAL
32808: IFTRUE 32812
32810: GO 32823
32812: POP
// bc_type := b_ext_radar ; 19 :
32813: LD_ADDR_OWVAR 42
32817: PUSH
32818: LD_INT 20
32820: ST_TO_ADDR
32821: GO 33128
32823: LD_INT 19
32825: DOUBLE
32826: EQUAL
32827: IFTRUE 32831
32829: GO 32842
32831: POP
// bc_type := b_ext_radio ; 20 :
32832: LD_ADDR_OWVAR 42
32836: PUSH
32837: LD_INT 22
32839: ST_TO_ADDR
32840: GO 33128
32842: LD_INT 20
32844: DOUBLE
32845: EQUAL
32846: IFTRUE 32850
32848: GO 32861
32850: POP
// bc_type := b_ext_siberium ; 21 :
32851: LD_ADDR_OWVAR 42
32855: PUSH
32856: LD_INT 21
32858: ST_TO_ADDR
32859: GO 33128
32861: LD_INT 21
32863: DOUBLE
32864: EQUAL
32865: IFTRUE 32869
32867: GO 32880
32869: POP
// bc_type := b_ext_computer ; 22 :
32870: LD_ADDR_OWVAR 42
32874: PUSH
32875: LD_INT 24
32877: ST_TO_ADDR
32878: GO 33128
32880: LD_INT 22
32882: DOUBLE
32883: EQUAL
32884: IFTRUE 32888
32886: GO 32899
32888: POP
// bc_type := b_ext_track ; 23 :
32889: LD_ADDR_OWVAR 42
32893: PUSH
32894: LD_INT 16
32896: ST_TO_ADDR
32897: GO 33128
32899: LD_INT 23
32901: DOUBLE
32902: EQUAL
32903: IFTRUE 32907
32905: GO 32918
32907: POP
// bc_type := b_ext_laser ; 24 :
32908: LD_ADDR_OWVAR 42
32912: PUSH
32913: LD_INT 25
32915: ST_TO_ADDR
32916: GO 33128
32918: LD_INT 24
32920: DOUBLE
32921: EQUAL
32922: IFTRUE 32926
32924: GO 32937
32926: POP
// bc_type := b_control_tower ; 25 :
32927: LD_ADDR_OWVAR 42
32931: PUSH
32932: LD_INT 36
32934: ST_TO_ADDR
32935: GO 33128
32937: LD_INT 25
32939: DOUBLE
32940: EQUAL
32941: IFTRUE 32945
32943: GO 32956
32945: POP
// bc_type := b_breastwork ; 26 :
32946: LD_ADDR_OWVAR 42
32950: PUSH
32951: LD_INT 31
32953: ST_TO_ADDR
32954: GO 33128
32956: LD_INT 26
32958: DOUBLE
32959: EQUAL
32960: IFTRUE 32964
32962: GO 32975
32964: POP
// bc_type := b_bunker ; 27 :
32965: LD_ADDR_OWVAR 42
32969: PUSH
32970: LD_INT 32
32972: ST_TO_ADDR
32973: GO 33128
32975: LD_INT 27
32977: DOUBLE
32978: EQUAL
32979: IFTRUE 32983
32981: GO 32994
32983: POP
// bc_type := b_turret ; 28 :
32984: LD_ADDR_OWVAR 42
32988: PUSH
32989: LD_INT 33
32991: ST_TO_ADDR
32992: GO 33128
32994: LD_INT 28
32996: DOUBLE
32997: EQUAL
32998: IFTRUE 33002
33000: GO 33013
33002: POP
// bc_type := b_armoury ; 29 :
33003: LD_ADDR_OWVAR 42
33007: PUSH
33008: LD_INT 4
33010: ST_TO_ADDR
33011: GO 33128
33013: LD_INT 29
33015: DOUBLE
33016: EQUAL
33017: IFTRUE 33021
33019: GO 33032
33021: POP
// bc_type := b_barracks ; 30 :
33022: LD_ADDR_OWVAR 42
33026: PUSH
33027: LD_INT 5
33029: ST_TO_ADDR
33030: GO 33128
33032: LD_INT 30
33034: DOUBLE
33035: EQUAL
33036: IFTRUE 33040
33038: GO 33051
33040: POP
// bc_type := b_solar_power ; 31 :
33041: LD_ADDR_OWVAR 42
33045: PUSH
33046: LD_INT 27
33048: ST_TO_ADDR
33049: GO 33128
33051: LD_INT 31
33053: DOUBLE
33054: EQUAL
33055: IFTRUE 33059
33057: GO 33070
33059: POP
// bc_type := b_oil_power ; 32 :
33060: LD_ADDR_OWVAR 42
33064: PUSH
33065: LD_INT 26
33067: ST_TO_ADDR
33068: GO 33128
33070: LD_INT 32
33072: DOUBLE
33073: EQUAL
33074: IFTRUE 33078
33076: GO 33089
33078: POP
// bc_type := b_siberite_power ; 33 :
33079: LD_ADDR_OWVAR 42
33083: PUSH
33084: LD_INT 28
33086: ST_TO_ADDR
33087: GO 33128
33089: LD_INT 33
33091: DOUBLE
33092: EQUAL
33093: IFTRUE 33097
33095: GO 33108
33097: POP
// bc_type := b_oil_mine ; 34 :
33098: LD_ADDR_OWVAR 42
33102: PUSH
33103: LD_INT 29
33105: ST_TO_ADDR
33106: GO 33128
33108: LD_INT 34
33110: DOUBLE
33111: EQUAL
33112: IFTRUE 33116
33114: GO 33127
33116: POP
// bc_type := b_siberite_mine ; end ;
33117: LD_ADDR_OWVAR 42
33121: PUSH
33122: LD_INT 30
33124: ST_TO_ADDR
33125: GO 33128
33127: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33128: LD_ADDR_VAR 0 8
33132: PUSH
33133: LD_VAR 0 5
33137: PPUSH
33138: LD_VAR 0 6
33142: PPUSH
33143: LD_VAR 0 3
33147: PPUSH
33148: CALL_OW 47
33152: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33153: LD_OWVAR 42
33157: PUSH
33158: LD_INT 32
33160: PUSH
33161: LD_INT 33
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: IN
33168: IFFALSE 33184
// PlaceWeaponTurret ( b , weapon ) ;
33170: LD_VAR 0 8
33174: PPUSH
33175: LD_VAR 0 4
33179: PPUSH
33180: CALL_OW 431
// end ;
33184: LD_VAR 0 7
33188: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33189: LD_INT 0
33191: PPUSH
33192: PPUSH
33193: PPUSH
33194: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33195: LD_ADDR_VAR 0 4
33199: PUSH
33200: LD_INT 22
33202: PUSH
33203: LD_OWVAR 2
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 2
33214: PUSH
33215: LD_INT 30
33217: PUSH
33218: LD_INT 0
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 30
33227: PUSH
33228: LD_INT 1
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: LIST
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PPUSH
33244: CALL_OW 69
33248: ST_TO_ADDR
// if not tmp then
33249: LD_VAR 0 4
33253: NOT
33254: IFFALSE 33258
// exit ;
33256: GO 33317
// for i in tmp do
33258: LD_ADDR_VAR 0 2
33262: PUSH
33263: LD_VAR 0 4
33267: PUSH
33268: FOR_IN
33269: IFFALSE 33315
// for j = 1 to 3 do
33271: LD_ADDR_VAR 0 3
33275: PUSH
33276: DOUBLE
33277: LD_INT 1
33279: DEC
33280: ST_TO_ADDR
33281: LD_INT 3
33283: PUSH
33284: FOR_TO
33285: IFFALSE 33311
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33287: LD_VAR 0 2
33291: PPUSH
33292: CALL_OW 274
33296: PPUSH
33297: LD_VAR 0 3
33301: PPUSH
33302: LD_INT 99999
33304: PPUSH
33305: CALL_OW 277
33309: GO 33284
33311: POP
33312: POP
33313: GO 33268
33315: POP
33316: POP
// end ;
33317: LD_VAR 0 1
33321: RET
// export function hHackSetLevel10 ; var i , j ; begin
33322: LD_INT 0
33324: PPUSH
33325: PPUSH
33326: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33327: LD_ADDR_VAR 0 2
33331: PUSH
33332: LD_INT 21
33334: PUSH
33335: LD_INT 1
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PPUSH
33342: CALL_OW 69
33346: PUSH
33347: FOR_IN
33348: IFFALSE 33400
// if IsSelected ( i ) then
33350: LD_VAR 0 2
33354: PPUSH
33355: CALL_OW 306
33359: IFFALSE 33398
// begin for j := 1 to 4 do
33361: LD_ADDR_VAR 0 3
33365: PUSH
33366: DOUBLE
33367: LD_INT 1
33369: DEC
33370: ST_TO_ADDR
33371: LD_INT 4
33373: PUSH
33374: FOR_TO
33375: IFFALSE 33396
// SetSkill ( i , j , 10 ) ;
33377: LD_VAR 0 2
33381: PPUSH
33382: LD_VAR 0 3
33386: PPUSH
33387: LD_INT 10
33389: PPUSH
33390: CALL_OW 237
33394: GO 33374
33396: POP
33397: POP
// end ;
33398: GO 33347
33400: POP
33401: POP
// end ;
33402: LD_VAR 0 1
33406: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33407: LD_INT 0
33409: PPUSH
33410: PPUSH
33411: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33412: LD_ADDR_VAR 0 2
33416: PUSH
33417: LD_INT 22
33419: PUSH
33420: LD_OWVAR 2
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 21
33431: PUSH
33432: LD_INT 1
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PPUSH
33443: CALL_OW 69
33447: PUSH
33448: FOR_IN
33449: IFFALSE 33490
// begin for j := 1 to 4 do
33451: LD_ADDR_VAR 0 3
33455: PUSH
33456: DOUBLE
33457: LD_INT 1
33459: DEC
33460: ST_TO_ADDR
33461: LD_INT 4
33463: PUSH
33464: FOR_TO
33465: IFFALSE 33486
// SetSkill ( i , j , 10 ) ;
33467: LD_VAR 0 2
33471: PPUSH
33472: LD_VAR 0 3
33476: PPUSH
33477: LD_INT 10
33479: PPUSH
33480: CALL_OW 237
33484: GO 33464
33486: POP
33487: POP
// end ;
33488: GO 33448
33490: POP
33491: POP
// end ;
33492: LD_VAR 0 1
33496: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33497: LD_INT 0
33499: PPUSH
// uc_side := your_side ;
33500: LD_ADDR_OWVAR 20
33504: PUSH
33505: LD_OWVAR 2
33509: ST_TO_ADDR
// uc_nation := nation ;
33510: LD_ADDR_OWVAR 21
33514: PUSH
33515: LD_VAR 0 1
33519: ST_TO_ADDR
// InitHc ;
33520: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33524: LD_INT 0
33526: PPUSH
33527: LD_VAR 0 2
33531: PPUSH
33532: LD_VAR 0 3
33536: PPUSH
33537: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33541: LD_VAR 0 4
33545: PPUSH
33546: LD_VAR 0 5
33550: PPUSH
33551: CALL_OW 428
33555: PUSH
33556: LD_INT 0
33558: EQUAL
33559: IFFALSE 33583
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33561: CALL_OW 44
33565: PPUSH
33566: LD_VAR 0 4
33570: PPUSH
33571: LD_VAR 0 5
33575: PPUSH
33576: LD_INT 1
33578: PPUSH
33579: CALL_OW 48
// end ;
33583: LD_VAR 0 6
33587: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33588: LD_INT 0
33590: PPUSH
33591: PPUSH
// uc_side := your_side ;
33592: LD_ADDR_OWVAR 20
33596: PUSH
33597: LD_OWVAR 2
33601: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33602: LD_VAR 0 1
33606: PUSH
33607: LD_INT 1
33609: PUSH
33610: LD_INT 2
33612: PUSH
33613: LD_INT 3
33615: PUSH
33616: LD_INT 4
33618: PUSH
33619: LD_INT 5
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: IN
33629: IFFALSE 33641
// uc_nation := nation_american else
33631: LD_ADDR_OWVAR 21
33635: PUSH
33636: LD_INT 1
33638: ST_TO_ADDR
33639: GO 33684
// if chassis in [ 11 , 12 , 13 , 14 ] then
33641: LD_VAR 0 1
33645: PUSH
33646: LD_INT 11
33648: PUSH
33649: LD_INT 12
33651: PUSH
33652: LD_INT 13
33654: PUSH
33655: LD_INT 14
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: IN
33664: IFFALSE 33676
// uc_nation := nation_arabian else
33666: LD_ADDR_OWVAR 21
33670: PUSH
33671: LD_INT 2
33673: ST_TO_ADDR
33674: GO 33684
// uc_nation := nation_russian ;
33676: LD_ADDR_OWVAR 21
33680: PUSH
33681: LD_INT 3
33683: ST_TO_ADDR
// vc_chassis := chassis ;
33684: LD_ADDR_OWVAR 37
33688: PUSH
33689: LD_VAR 0 1
33693: ST_TO_ADDR
// vc_engine := engine ;
33694: LD_ADDR_OWVAR 39
33698: PUSH
33699: LD_VAR 0 2
33703: ST_TO_ADDR
// vc_control := control ;
33704: LD_ADDR_OWVAR 38
33708: PUSH
33709: LD_VAR 0 3
33713: ST_TO_ADDR
// vc_weapon := weapon ;
33714: LD_ADDR_OWVAR 40
33718: PUSH
33719: LD_VAR 0 4
33723: ST_TO_ADDR
// un := CreateVehicle ;
33724: LD_ADDR_VAR 0 8
33728: PUSH
33729: CALL_OW 45
33733: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33734: LD_VAR 0 8
33738: PPUSH
33739: LD_INT 0
33741: PPUSH
33742: LD_INT 5
33744: PPUSH
33745: CALL_OW 12
33749: PPUSH
33750: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33754: LD_VAR 0 8
33758: PPUSH
33759: LD_VAR 0 5
33763: PPUSH
33764: LD_VAR 0 6
33768: PPUSH
33769: LD_INT 1
33771: PPUSH
33772: CALL_OW 48
// end ;
33776: LD_VAR 0 7
33780: RET
// export hInvincible ; every 1 do
33781: GO 33783
33783: DISABLE
// hInvincible := [ ] ;
33784: LD_ADDR_EXP 125
33788: PUSH
33789: EMPTY
33790: ST_TO_ADDR
33791: END
// every 10 do var i ;
33792: GO 33794
33794: DISABLE
33795: LD_INT 0
33797: PPUSH
// begin enable ;
33798: ENABLE
// if not hInvincible then
33799: LD_EXP 125
33803: NOT
33804: IFFALSE 33808
// exit ;
33806: GO 33852
// for i in hInvincible do
33808: LD_ADDR_VAR 0 1
33812: PUSH
33813: LD_EXP 125
33817: PUSH
33818: FOR_IN
33819: IFFALSE 33850
// if GetLives ( i ) < 1000 then
33821: LD_VAR 0 1
33825: PPUSH
33826: CALL_OW 256
33830: PUSH
33831: LD_INT 1000
33833: LESS
33834: IFFALSE 33848
// SetLives ( i , 1000 ) ;
33836: LD_VAR 0 1
33840: PPUSH
33841: LD_INT 1000
33843: PPUSH
33844: CALL_OW 234
33848: GO 33818
33850: POP
33851: POP
// end ;
33852: PPOPN 1
33854: END
// export function hHackInvincible ; var i ; begin
33855: LD_INT 0
33857: PPUSH
33858: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33859: LD_ADDR_VAR 0 2
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: LD_INT 21
33869: PUSH
33870: LD_INT 1
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 21
33879: PUSH
33880: LD_INT 2
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: LIST
33891: PPUSH
33892: CALL_OW 69
33896: PUSH
33897: FOR_IN
33898: IFFALSE 33959
// if IsSelected ( i ) then
33900: LD_VAR 0 2
33904: PPUSH
33905: CALL_OW 306
33909: IFFALSE 33957
// begin if i in hInvincible then
33911: LD_VAR 0 2
33915: PUSH
33916: LD_EXP 125
33920: IN
33921: IFFALSE 33941
// hInvincible := hInvincible diff i else
33923: LD_ADDR_EXP 125
33927: PUSH
33928: LD_EXP 125
33932: PUSH
33933: LD_VAR 0 2
33937: DIFF
33938: ST_TO_ADDR
33939: GO 33957
// hInvincible := hInvincible union i ;
33941: LD_ADDR_EXP 125
33945: PUSH
33946: LD_EXP 125
33950: PUSH
33951: LD_VAR 0 2
33955: UNION
33956: ST_TO_ADDR
// end ;
33957: GO 33897
33959: POP
33960: POP
// end ;
33961: LD_VAR 0 1
33965: RET
// export function hHackInvisible ; var i , j ; begin
33966: LD_INT 0
33968: PPUSH
33969: PPUSH
33970: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33971: LD_ADDR_VAR 0 2
33975: PUSH
33976: LD_INT 21
33978: PUSH
33979: LD_INT 1
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PPUSH
33986: CALL_OW 69
33990: PUSH
33991: FOR_IN
33992: IFFALSE 34016
// if IsSelected ( i ) then
33994: LD_VAR 0 2
33998: PPUSH
33999: CALL_OW 306
34003: IFFALSE 34014
// ComForceInvisible ( i ) ;
34005: LD_VAR 0 2
34009: PPUSH
34010: CALL_OW 496
34014: GO 33991
34016: POP
34017: POP
// end ;
34018: LD_VAR 0 1
34022: RET
// export function hHackChangeYourSide ; begin
34023: LD_INT 0
34025: PPUSH
// if your_side = 8 then
34026: LD_OWVAR 2
34030: PUSH
34031: LD_INT 8
34033: EQUAL
34034: IFFALSE 34046
// your_side := 0 else
34036: LD_ADDR_OWVAR 2
34040: PUSH
34041: LD_INT 0
34043: ST_TO_ADDR
34044: GO 34060
// your_side := your_side + 1 ;
34046: LD_ADDR_OWVAR 2
34050: PUSH
34051: LD_OWVAR 2
34055: PUSH
34056: LD_INT 1
34058: PLUS
34059: ST_TO_ADDR
// end ;
34060: LD_VAR 0 1
34064: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34065: LD_INT 0
34067: PPUSH
34068: PPUSH
34069: PPUSH
// for i in all_units do
34070: LD_ADDR_VAR 0 2
34074: PUSH
34075: LD_OWVAR 3
34079: PUSH
34080: FOR_IN
34081: IFFALSE 34159
// if IsSelected ( i ) then
34083: LD_VAR 0 2
34087: PPUSH
34088: CALL_OW 306
34092: IFFALSE 34157
// begin j := GetSide ( i ) ;
34094: LD_ADDR_VAR 0 3
34098: PUSH
34099: LD_VAR 0 2
34103: PPUSH
34104: CALL_OW 255
34108: ST_TO_ADDR
// if j = 8 then
34109: LD_VAR 0 3
34113: PUSH
34114: LD_INT 8
34116: EQUAL
34117: IFFALSE 34129
// j := 0 else
34119: LD_ADDR_VAR 0 3
34123: PUSH
34124: LD_INT 0
34126: ST_TO_ADDR
34127: GO 34143
// j := j + 1 ;
34129: LD_ADDR_VAR 0 3
34133: PUSH
34134: LD_VAR 0 3
34138: PUSH
34139: LD_INT 1
34141: PLUS
34142: ST_TO_ADDR
// SetSide ( i , j ) ;
34143: LD_VAR 0 2
34147: PPUSH
34148: LD_VAR 0 3
34152: PPUSH
34153: CALL_OW 235
// end ;
34157: GO 34080
34159: POP
34160: POP
// end ;
34161: LD_VAR 0 1
34165: RET
// export function hHackFog ; begin
34166: LD_INT 0
34168: PPUSH
// FogOff ( true ) ;
34169: LD_INT 1
34171: PPUSH
34172: CALL_OW 344
// end ;
34176: LD_VAR 0 1
34180: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34181: LD_INT 0
34183: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34184: LD_VAR 0 1
34188: PPUSH
34189: LD_VAR 0 2
34193: PPUSH
34194: LD_VAR 0 3
34198: PPUSH
34199: LD_INT 1
34201: PPUSH
34202: LD_INT 1
34204: PPUSH
34205: CALL_OW 483
// CenterOnXY ( x , y ) ;
34209: LD_VAR 0 2
34213: PPUSH
34214: LD_VAR 0 3
34218: PPUSH
34219: CALL_OW 84
// end ;
34223: LD_VAR 0 4
34227: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34228: LD_INT 0
34230: PPUSH
34231: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34232: LD_VAR 0 1
34236: NOT
34237: PUSH
34238: LD_VAR 0 2
34242: PPUSH
34243: LD_VAR 0 3
34247: PPUSH
34248: CALL_OW 488
34252: NOT
34253: OR
34254: PUSH
34255: LD_VAR 0 1
34259: PPUSH
34260: CALL_OW 266
34264: PUSH
34265: LD_INT 3
34267: NONEQUAL
34268: PUSH
34269: LD_VAR 0 1
34273: PPUSH
34274: CALL_OW 247
34278: PUSH
34279: LD_INT 1
34281: EQUAL
34282: NOT
34283: AND
34284: OR
34285: IFFALSE 34289
// exit ;
34287: GO 34438
// if GetType ( factory ) = unit_human then
34289: LD_VAR 0 1
34293: PPUSH
34294: CALL_OW 247
34298: PUSH
34299: LD_INT 1
34301: EQUAL
34302: IFFALSE 34319
// factory := IsInUnit ( factory ) ;
34304: LD_ADDR_VAR 0 1
34308: PUSH
34309: LD_VAR 0 1
34313: PPUSH
34314: CALL_OW 310
34318: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34319: LD_VAR 0 1
34323: PPUSH
34324: CALL_OW 266
34328: PUSH
34329: LD_INT 3
34331: NONEQUAL
34332: IFFALSE 34336
// exit ;
34334: GO 34438
// if HexInfo ( x , y ) = factory then
34336: LD_VAR 0 2
34340: PPUSH
34341: LD_VAR 0 3
34345: PPUSH
34346: CALL_OW 428
34350: PUSH
34351: LD_VAR 0 1
34355: EQUAL
34356: IFFALSE 34383
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34358: LD_ADDR_EXP 126
34362: PUSH
34363: LD_EXP 126
34367: PPUSH
34368: LD_VAR 0 1
34372: PPUSH
34373: LD_INT 0
34375: PPUSH
34376: CALL_OW 1
34380: ST_TO_ADDR
34381: GO 34434
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34383: LD_ADDR_EXP 126
34387: PUSH
34388: LD_EXP 126
34392: PPUSH
34393: LD_VAR 0 1
34397: PPUSH
34398: LD_VAR 0 1
34402: PPUSH
34403: CALL_OW 255
34407: PUSH
34408: LD_VAR 0 1
34412: PUSH
34413: LD_VAR 0 2
34417: PUSH
34418: LD_VAR 0 3
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: PPUSH
34429: CALL_OW 1
34433: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34434: CALL 34443 0 0
// end ;
34438: LD_VAR 0 4
34442: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34443: LD_INT 0
34445: PPUSH
34446: PPUSH
34447: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34448: LD_STRING resetFactoryWaypoint();
34450: PPUSH
34451: CALL_OW 559
// if factoryWaypoints then
34455: LD_EXP 126
34459: IFFALSE 34585
// begin list := PrepareArray ( factoryWaypoints ) ;
34461: LD_ADDR_VAR 0 3
34465: PUSH
34466: LD_EXP 126
34470: PPUSH
34471: CALL 81017 0 1
34475: ST_TO_ADDR
// for i := 1 to list do
34476: LD_ADDR_VAR 0 2
34480: PUSH
34481: DOUBLE
34482: LD_INT 1
34484: DEC
34485: ST_TO_ADDR
34486: LD_VAR 0 3
34490: PUSH
34491: FOR_TO
34492: IFFALSE 34583
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34494: LD_STRING setFactoryWaypointXY(
34496: PUSH
34497: LD_VAR 0 3
34501: PUSH
34502: LD_VAR 0 2
34506: ARRAY
34507: PUSH
34508: LD_INT 1
34510: ARRAY
34511: STR
34512: PUSH
34513: LD_STRING ,
34515: STR
34516: PUSH
34517: LD_VAR 0 3
34521: PUSH
34522: LD_VAR 0 2
34526: ARRAY
34527: PUSH
34528: LD_INT 2
34530: ARRAY
34531: STR
34532: PUSH
34533: LD_STRING ,
34535: STR
34536: PUSH
34537: LD_VAR 0 3
34541: PUSH
34542: LD_VAR 0 2
34546: ARRAY
34547: PUSH
34548: LD_INT 3
34550: ARRAY
34551: STR
34552: PUSH
34553: LD_STRING ,
34555: STR
34556: PUSH
34557: LD_VAR 0 3
34561: PUSH
34562: LD_VAR 0 2
34566: ARRAY
34567: PUSH
34568: LD_INT 4
34570: ARRAY
34571: STR
34572: PUSH
34573: LD_STRING )
34575: STR
34576: PPUSH
34577: CALL_OW 559
34581: GO 34491
34583: POP
34584: POP
// end ; end ;
34585: LD_VAR 0 1
34589: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34590: LD_INT 0
34592: PPUSH
// if HexInfo ( x , y ) = warehouse then
34593: LD_VAR 0 2
34597: PPUSH
34598: LD_VAR 0 3
34602: PPUSH
34603: CALL_OW 428
34607: PUSH
34608: LD_VAR 0 1
34612: EQUAL
34613: IFFALSE 34640
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34615: LD_ADDR_EXP 127
34619: PUSH
34620: LD_EXP 127
34624: PPUSH
34625: LD_VAR 0 1
34629: PPUSH
34630: LD_INT 0
34632: PPUSH
34633: CALL_OW 1
34637: ST_TO_ADDR
34638: GO 34691
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34640: LD_ADDR_EXP 127
34644: PUSH
34645: LD_EXP 127
34649: PPUSH
34650: LD_VAR 0 1
34654: PPUSH
34655: LD_VAR 0 1
34659: PPUSH
34660: CALL_OW 255
34664: PUSH
34665: LD_VAR 0 1
34669: PUSH
34670: LD_VAR 0 2
34674: PUSH
34675: LD_VAR 0 3
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: PPUSH
34686: CALL_OW 1
34690: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34691: CALL 34700 0 0
// end ;
34695: LD_VAR 0 4
34699: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34700: LD_INT 0
34702: PPUSH
34703: PPUSH
34704: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34705: LD_STRING resetWarehouseGatheringPoints();
34707: PPUSH
34708: CALL_OW 559
// if warehouseGatheringPoints then
34712: LD_EXP 127
34716: IFFALSE 34842
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34718: LD_ADDR_VAR 0 3
34722: PUSH
34723: LD_EXP 127
34727: PPUSH
34728: CALL 81017 0 1
34732: ST_TO_ADDR
// for i := 1 to list do
34733: LD_ADDR_VAR 0 2
34737: PUSH
34738: DOUBLE
34739: LD_INT 1
34741: DEC
34742: ST_TO_ADDR
34743: LD_VAR 0 3
34747: PUSH
34748: FOR_TO
34749: IFFALSE 34840
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34751: LD_STRING setWarehouseGatheringPointXY(
34753: PUSH
34754: LD_VAR 0 3
34758: PUSH
34759: LD_VAR 0 2
34763: ARRAY
34764: PUSH
34765: LD_INT 1
34767: ARRAY
34768: STR
34769: PUSH
34770: LD_STRING ,
34772: STR
34773: PUSH
34774: LD_VAR 0 3
34778: PUSH
34779: LD_VAR 0 2
34783: ARRAY
34784: PUSH
34785: LD_INT 2
34787: ARRAY
34788: STR
34789: PUSH
34790: LD_STRING ,
34792: STR
34793: PUSH
34794: LD_VAR 0 3
34798: PUSH
34799: LD_VAR 0 2
34803: ARRAY
34804: PUSH
34805: LD_INT 3
34807: ARRAY
34808: STR
34809: PUSH
34810: LD_STRING ,
34812: STR
34813: PUSH
34814: LD_VAR 0 3
34818: PUSH
34819: LD_VAR 0 2
34823: ARRAY
34824: PUSH
34825: LD_INT 4
34827: ARRAY
34828: STR
34829: PUSH
34830: LD_STRING )
34832: STR
34833: PPUSH
34834: CALL_OW 559
34838: GO 34748
34840: POP
34841: POP
// end ; end ;
34842: LD_VAR 0 1
34846: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34847: LD_EXP 127
34851: IFFALSE 35538
34853: GO 34855
34855: DISABLE
34856: LD_INT 0
34858: PPUSH
34859: PPUSH
34860: PPUSH
34861: PPUSH
34862: PPUSH
34863: PPUSH
34864: PPUSH
34865: PPUSH
34866: PPUSH
// begin enable ;
34867: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34868: LD_ADDR_VAR 0 3
34872: PUSH
34873: LD_EXP 127
34877: PPUSH
34878: CALL 81017 0 1
34882: ST_TO_ADDR
// if not list then
34883: LD_VAR 0 3
34887: NOT
34888: IFFALSE 34892
// exit ;
34890: GO 35538
// for i := 1 to list do
34892: LD_ADDR_VAR 0 1
34896: PUSH
34897: DOUBLE
34898: LD_INT 1
34900: DEC
34901: ST_TO_ADDR
34902: LD_VAR 0 3
34906: PUSH
34907: FOR_TO
34908: IFFALSE 35536
// begin depot := list [ i ] [ 2 ] ;
34910: LD_ADDR_VAR 0 8
34914: PUSH
34915: LD_VAR 0 3
34919: PUSH
34920: LD_VAR 0 1
34924: ARRAY
34925: PUSH
34926: LD_INT 2
34928: ARRAY
34929: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34930: LD_ADDR_VAR 0 5
34934: PUSH
34935: LD_VAR 0 3
34939: PUSH
34940: LD_VAR 0 1
34944: ARRAY
34945: PUSH
34946: LD_INT 1
34948: ARRAY
34949: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34950: LD_VAR 0 8
34954: PPUSH
34955: CALL_OW 301
34959: PUSH
34960: LD_VAR 0 5
34964: PUSH
34965: LD_VAR 0 8
34969: PPUSH
34970: CALL_OW 255
34974: NONEQUAL
34975: OR
34976: IFFALSE 35005
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34978: LD_ADDR_EXP 127
34982: PUSH
34983: LD_EXP 127
34987: PPUSH
34988: LD_VAR 0 8
34992: PPUSH
34993: LD_INT 0
34995: PPUSH
34996: CALL_OW 1
35000: ST_TO_ADDR
// exit ;
35001: POP
35002: POP
35003: GO 35538
// end ; x := list [ i ] [ 3 ] ;
35005: LD_ADDR_VAR 0 6
35009: PUSH
35010: LD_VAR 0 3
35014: PUSH
35015: LD_VAR 0 1
35019: ARRAY
35020: PUSH
35021: LD_INT 3
35023: ARRAY
35024: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35025: LD_ADDR_VAR 0 7
35029: PUSH
35030: LD_VAR 0 3
35034: PUSH
35035: LD_VAR 0 1
35039: ARRAY
35040: PUSH
35041: LD_INT 4
35043: ARRAY
35044: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35045: LD_ADDR_VAR 0 9
35049: PUSH
35050: LD_VAR 0 6
35054: PPUSH
35055: LD_VAR 0 7
35059: PPUSH
35060: LD_INT 16
35062: PPUSH
35063: CALL 79601 0 3
35067: ST_TO_ADDR
// if not cratesNearbyPoint then
35068: LD_VAR 0 9
35072: NOT
35073: IFFALSE 35079
// exit ;
35075: POP
35076: POP
35077: GO 35538
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35079: LD_ADDR_VAR 0 4
35083: PUSH
35084: LD_INT 22
35086: PUSH
35087: LD_VAR 0 5
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 3
35098: PUSH
35099: LD_INT 60
35101: PUSH
35102: EMPTY
35103: LIST
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 91
35111: PUSH
35112: LD_VAR 0 8
35116: PUSH
35117: LD_INT 6
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 2
35127: PUSH
35128: LD_INT 25
35130: PUSH
35131: LD_INT 2
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 25
35140: PUSH
35141: LD_INT 16
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: LIST
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: PPUSH
35159: CALL_OW 69
35163: PUSH
35164: LD_VAR 0 8
35168: PPUSH
35169: CALL_OW 313
35173: PPUSH
35174: LD_INT 3
35176: PUSH
35177: LD_INT 60
35179: PUSH
35180: EMPTY
35181: LIST
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 2
35189: PUSH
35190: LD_INT 25
35192: PUSH
35193: LD_INT 2
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 25
35202: PUSH
35203: LD_INT 16
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: LIST
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PPUSH
35219: CALL_OW 72
35223: UNION
35224: ST_TO_ADDR
// if tmp then
35225: LD_VAR 0 4
35229: IFFALSE 35309
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35231: LD_ADDR_VAR 0 4
35235: PUSH
35236: LD_VAR 0 4
35240: PPUSH
35241: LD_INT 3
35243: PPUSH
35244: CALL 77568 0 2
35248: ST_TO_ADDR
// for j in tmp do
35249: LD_ADDR_VAR 0 2
35253: PUSH
35254: LD_VAR 0 4
35258: PUSH
35259: FOR_IN
35260: IFFALSE 35303
// begin if IsInUnit ( j ) then
35262: LD_VAR 0 2
35266: PPUSH
35267: CALL_OW 310
35271: IFFALSE 35282
// ComExit ( j ) ;
35273: LD_VAR 0 2
35277: PPUSH
35278: CALL 77651 0 1
// AddComCollect ( j , x , y ) ;
35282: LD_VAR 0 2
35286: PPUSH
35287: LD_VAR 0 6
35291: PPUSH
35292: LD_VAR 0 7
35296: PPUSH
35297: CALL_OW 177
// end ;
35301: GO 35259
35303: POP
35304: POP
// exit ;
35305: POP
35306: POP
35307: GO 35538
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35309: LD_ADDR_VAR 0 4
35313: PUSH
35314: LD_INT 22
35316: PUSH
35317: LD_VAR 0 5
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 91
35328: PUSH
35329: LD_VAR 0 8
35333: PUSH
35334: LD_INT 8
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: LD_INT 34
35347: PUSH
35348: LD_INT 12
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 34
35357: PUSH
35358: LD_INT 51
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 34
35367: PUSH
35368: LD_INT 32
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 34
35377: PUSH
35378: LD_EXP 51
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: LIST
35398: PPUSH
35399: CALL_OW 69
35403: ST_TO_ADDR
// if tmp then
35404: LD_VAR 0 4
35408: IFFALSE 35534
// begin for j in tmp do
35410: LD_ADDR_VAR 0 2
35414: PUSH
35415: LD_VAR 0 4
35419: PUSH
35420: FOR_IN
35421: IFFALSE 35532
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35423: LD_VAR 0 2
35427: PPUSH
35428: CALL_OW 262
35432: PUSH
35433: LD_INT 3
35435: EQUAL
35436: PUSH
35437: LD_VAR 0 2
35441: PPUSH
35442: CALL_OW 261
35446: PUSH
35447: LD_INT 20
35449: GREATER
35450: OR
35451: PUSH
35452: LD_VAR 0 2
35456: PPUSH
35457: CALL_OW 314
35461: NOT
35462: AND
35463: PUSH
35464: LD_VAR 0 2
35468: PPUSH
35469: CALL_OW 263
35473: PUSH
35474: LD_INT 1
35476: NONEQUAL
35477: PUSH
35478: LD_VAR 0 2
35482: PPUSH
35483: CALL_OW 311
35487: OR
35488: AND
35489: IFFALSE 35530
// begin ComCollect ( j , x , y ) ;
35491: LD_VAR 0 2
35495: PPUSH
35496: LD_VAR 0 6
35500: PPUSH
35501: LD_VAR 0 7
35505: PPUSH
35506: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35510: LD_VAR 0 2
35514: PPUSH
35515: LD_VAR 0 8
35519: PPUSH
35520: CALL_OW 172
// exit ;
35524: POP
35525: POP
35526: POP
35527: POP
35528: GO 35538
// end ;
35530: GO 35420
35532: POP
35533: POP
// end ; end ;
35534: GO 34907
35536: POP
35537: POP
// end ; end_of_file
35538: PPOPN 9
35540: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35541: LD_INT 0
35543: PPUSH
35544: PPUSH
35545: PPUSH
35546: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35547: LD_VAR 0 1
35551: PPUSH
35552: CALL_OW 264
35556: PUSH
35557: LD_EXP 54
35561: EQUAL
35562: IFFALSE 35634
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35564: LD_INT 68
35566: PPUSH
35567: LD_VAR 0 1
35571: PPUSH
35572: CALL_OW 255
35576: PPUSH
35577: CALL_OW 321
35581: PUSH
35582: LD_INT 2
35584: EQUAL
35585: IFFALSE 35597
// eff := 70 else
35587: LD_ADDR_VAR 0 4
35591: PUSH
35592: LD_INT 70
35594: ST_TO_ADDR
35595: GO 35605
// eff := 30 ;
35597: LD_ADDR_VAR 0 4
35601: PUSH
35602: LD_INT 30
35604: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35605: LD_VAR 0 1
35609: PPUSH
35610: CALL_OW 250
35614: PPUSH
35615: LD_VAR 0 1
35619: PPUSH
35620: CALL_OW 251
35624: PPUSH
35625: LD_VAR 0 4
35629: PPUSH
35630: CALL_OW 495
// end ; end ;
35634: LD_VAR 0 2
35638: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35639: LD_INT 0
35641: PPUSH
// end ;
35642: LD_VAR 0 4
35646: RET
// export function SOS_Command ( cmd ) ; begin
35647: LD_INT 0
35649: PPUSH
// end ;
35650: LD_VAR 0 2
35654: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35655: LD_INT 0
35657: PPUSH
// end ;
35658: LD_VAR 0 6
35662: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35663: LD_INT 0
35665: PPUSH
35666: PPUSH
// if not vehicle or not factory then
35667: LD_VAR 0 1
35671: NOT
35672: PUSH
35673: LD_VAR 0 2
35677: NOT
35678: OR
35679: IFFALSE 35683
// exit ;
35681: GO 35914
// if factoryWaypoints >= factory then
35683: LD_EXP 126
35687: PUSH
35688: LD_VAR 0 2
35692: GREATEREQUAL
35693: IFFALSE 35914
// if factoryWaypoints [ factory ] then
35695: LD_EXP 126
35699: PUSH
35700: LD_VAR 0 2
35704: ARRAY
35705: IFFALSE 35914
// begin if GetControl ( vehicle ) = control_manual then
35707: LD_VAR 0 1
35711: PPUSH
35712: CALL_OW 263
35716: PUSH
35717: LD_INT 1
35719: EQUAL
35720: IFFALSE 35801
// begin driver := IsDrivenBy ( vehicle ) ;
35722: LD_ADDR_VAR 0 4
35726: PUSH
35727: LD_VAR 0 1
35731: PPUSH
35732: CALL_OW 311
35736: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35737: LD_VAR 0 4
35741: PPUSH
35742: LD_EXP 126
35746: PUSH
35747: LD_VAR 0 2
35751: ARRAY
35752: PUSH
35753: LD_INT 3
35755: ARRAY
35756: PPUSH
35757: LD_EXP 126
35761: PUSH
35762: LD_VAR 0 2
35766: ARRAY
35767: PUSH
35768: LD_INT 4
35770: ARRAY
35771: PPUSH
35772: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35776: LD_VAR 0 4
35780: PPUSH
35781: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35785: LD_VAR 0 4
35789: PPUSH
35790: LD_VAR 0 2
35794: PPUSH
35795: CALL_OW 180
// end else
35799: GO 35914
// if GetControl ( vehicle ) = control_remote then
35801: LD_VAR 0 1
35805: PPUSH
35806: CALL_OW 263
35810: PUSH
35811: LD_INT 2
35813: EQUAL
35814: IFFALSE 35875
// begin wait ( 0 0$2 ) ;
35816: LD_INT 70
35818: PPUSH
35819: CALL_OW 67
// if Connect ( vehicle ) then
35823: LD_VAR 0 1
35827: PPUSH
35828: CALL 47962 0 1
35832: IFFALSE 35873
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35834: LD_VAR 0 1
35838: PPUSH
35839: LD_EXP 126
35843: PUSH
35844: LD_VAR 0 2
35848: ARRAY
35849: PUSH
35850: LD_INT 3
35852: ARRAY
35853: PPUSH
35854: LD_EXP 126
35858: PUSH
35859: LD_VAR 0 2
35863: ARRAY
35864: PUSH
35865: LD_INT 4
35867: ARRAY
35868: PPUSH
35869: CALL_OW 171
// end else
35873: GO 35914
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35875: LD_VAR 0 1
35879: PPUSH
35880: LD_EXP 126
35884: PUSH
35885: LD_VAR 0 2
35889: ARRAY
35890: PUSH
35891: LD_INT 3
35893: ARRAY
35894: PPUSH
35895: LD_EXP 126
35899: PUSH
35900: LD_VAR 0 2
35904: ARRAY
35905: PUSH
35906: LD_INT 4
35908: ARRAY
35909: PPUSH
35910: CALL_OW 171
// end ; end ;
35914: LD_VAR 0 3
35918: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35919: LD_INT 0
35921: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35922: LD_VAR 0 1
35926: PUSH
35927: LD_INT 250
35929: EQUAL
35930: PUSH
35931: LD_VAR 0 2
35935: PPUSH
35936: CALL_OW 264
35940: PUSH
35941: LD_EXP 57
35945: EQUAL
35946: AND
35947: IFFALSE 35968
// MinerPlaceMine ( unit , x , y ) ;
35949: LD_VAR 0 2
35953: PPUSH
35954: LD_VAR 0 4
35958: PPUSH
35959: LD_VAR 0 5
35963: PPUSH
35964: CALL 38367 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35968: LD_VAR 0 1
35972: PUSH
35973: LD_INT 251
35975: EQUAL
35976: PUSH
35977: LD_VAR 0 2
35981: PPUSH
35982: CALL_OW 264
35986: PUSH
35987: LD_EXP 57
35991: EQUAL
35992: AND
35993: IFFALSE 36014
// MinerDetonateMine ( unit , x , y ) ;
35995: LD_VAR 0 2
35999: PPUSH
36000: LD_VAR 0 4
36004: PPUSH
36005: LD_VAR 0 5
36009: PPUSH
36010: CALL 38644 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36014: LD_VAR 0 1
36018: PUSH
36019: LD_INT 252
36021: EQUAL
36022: PUSH
36023: LD_VAR 0 2
36027: PPUSH
36028: CALL_OW 264
36032: PUSH
36033: LD_EXP 57
36037: EQUAL
36038: AND
36039: IFFALSE 36060
// MinerCreateMinefield ( unit , x , y ) ;
36041: LD_VAR 0 2
36045: PPUSH
36046: LD_VAR 0 4
36050: PPUSH
36051: LD_VAR 0 5
36055: PPUSH
36056: CALL 39061 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36060: LD_VAR 0 1
36064: PUSH
36065: LD_INT 253
36067: EQUAL
36068: PUSH
36069: LD_VAR 0 2
36073: PPUSH
36074: CALL_OW 257
36078: PUSH
36079: LD_INT 5
36081: EQUAL
36082: AND
36083: IFFALSE 36104
// ComBinocular ( unit , x , y ) ;
36085: LD_VAR 0 2
36089: PPUSH
36090: LD_VAR 0 4
36094: PPUSH
36095: LD_VAR 0 5
36099: PPUSH
36100: CALL 39432 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36104: LD_VAR 0 1
36108: PUSH
36109: LD_INT 254
36111: EQUAL
36112: PUSH
36113: LD_VAR 0 2
36117: PPUSH
36118: CALL_OW 264
36122: PUSH
36123: LD_EXP 52
36127: EQUAL
36128: AND
36129: PUSH
36130: LD_VAR 0 3
36134: PPUSH
36135: CALL_OW 263
36139: PUSH
36140: LD_INT 3
36142: EQUAL
36143: AND
36144: IFFALSE 36160
// HackDestroyVehicle ( unit , selectedUnit ) ;
36146: LD_VAR 0 2
36150: PPUSH
36151: LD_VAR 0 3
36155: PPUSH
36156: CALL 37727 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36160: LD_VAR 0 1
36164: PUSH
36165: LD_INT 255
36167: EQUAL
36168: PUSH
36169: LD_VAR 0 2
36173: PPUSH
36174: CALL_OW 264
36178: PUSH
36179: LD_INT 14
36181: PUSH
36182: LD_INT 53
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: IN
36189: AND
36190: PUSH
36191: LD_VAR 0 4
36195: PPUSH
36196: LD_VAR 0 5
36200: PPUSH
36201: CALL_OW 488
36205: AND
36206: IFFALSE 36230
// CutTreeXYR ( unit , x , y , 12 ) ;
36208: LD_VAR 0 2
36212: PPUSH
36213: LD_VAR 0 4
36217: PPUSH
36218: LD_VAR 0 5
36222: PPUSH
36223: LD_INT 12
36225: PPUSH
36226: CALL 36293 0 4
// if cmd = 256 then
36230: LD_VAR 0 1
36234: PUSH
36235: LD_INT 256
36237: EQUAL
36238: IFFALSE 36259
// SetFactoryWaypoint ( unit , x , y ) ;
36240: LD_VAR 0 2
36244: PPUSH
36245: LD_VAR 0 4
36249: PPUSH
36250: LD_VAR 0 5
36254: PPUSH
36255: CALL 34228 0 3
// if cmd = 257 then
36259: LD_VAR 0 1
36263: PUSH
36264: LD_INT 257
36266: EQUAL
36267: IFFALSE 36288
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36269: LD_VAR 0 2
36273: PPUSH
36274: LD_VAR 0 4
36278: PPUSH
36279: LD_VAR 0 5
36283: PPUSH
36284: CALL 34590 0 3
// end ;
36288: LD_VAR 0 6
36292: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36293: LD_INT 0
36295: PPUSH
36296: PPUSH
36297: PPUSH
36298: PPUSH
36299: PPUSH
36300: PPUSH
36301: PPUSH
36302: PPUSH
36303: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36304: LD_VAR 0 1
36308: NOT
36309: PUSH
36310: LD_VAR 0 2
36314: PPUSH
36315: LD_VAR 0 3
36319: PPUSH
36320: CALL_OW 488
36324: NOT
36325: OR
36326: PUSH
36327: LD_VAR 0 4
36331: NOT
36332: OR
36333: IFFALSE 36337
// exit ;
36335: GO 36677
// list := [ ] ;
36337: LD_ADDR_VAR 0 13
36341: PUSH
36342: EMPTY
36343: ST_TO_ADDR
// if x - r < 0 then
36344: LD_VAR 0 2
36348: PUSH
36349: LD_VAR 0 4
36353: MINUS
36354: PUSH
36355: LD_INT 0
36357: LESS
36358: IFFALSE 36370
// min_x := 0 else
36360: LD_ADDR_VAR 0 7
36364: PUSH
36365: LD_INT 0
36367: ST_TO_ADDR
36368: GO 36386
// min_x := x - r ;
36370: LD_ADDR_VAR 0 7
36374: PUSH
36375: LD_VAR 0 2
36379: PUSH
36380: LD_VAR 0 4
36384: MINUS
36385: ST_TO_ADDR
// if y - r < 0 then
36386: LD_VAR 0 3
36390: PUSH
36391: LD_VAR 0 4
36395: MINUS
36396: PUSH
36397: LD_INT 0
36399: LESS
36400: IFFALSE 36412
// min_y := 0 else
36402: LD_ADDR_VAR 0 8
36406: PUSH
36407: LD_INT 0
36409: ST_TO_ADDR
36410: GO 36428
// min_y := y - r ;
36412: LD_ADDR_VAR 0 8
36416: PUSH
36417: LD_VAR 0 3
36421: PUSH
36422: LD_VAR 0 4
36426: MINUS
36427: ST_TO_ADDR
// max_x := x + r ;
36428: LD_ADDR_VAR 0 9
36432: PUSH
36433: LD_VAR 0 2
36437: PUSH
36438: LD_VAR 0 4
36442: PLUS
36443: ST_TO_ADDR
// max_y := y + r ;
36444: LD_ADDR_VAR 0 10
36448: PUSH
36449: LD_VAR 0 3
36453: PUSH
36454: LD_VAR 0 4
36458: PLUS
36459: ST_TO_ADDR
// for _x = min_x to max_x do
36460: LD_ADDR_VAR 0 11
36464: PUSH
36465: DOUBLE
36466: LD_VAR 0 7
36470: DEC
36471: ST_TO_ADDR
36472: LD_VAR 0 9
36476: PUSH
36477: FOR_TO
36478: IFFALSE 36595
// for _y = min_y to max_y do
36480: LD_ADDR_VAR 0 12
36484: PUSH
36485: DOUBLE
36486: LD_VAR 0 8
36490: DEC
36491: ST_TO_ADDR
36492: LD_VAR 0 10
36496: PUSH
36497: FOR_TO
36498: IFFALSE 36591
// begin if not ValidHex ( _x , _y ) then
36500: LD_VAR 0 11
36504: PPUSH
36505: LD_VAR 0 12
36509: PPUSH
36510: CALL_OW 488
36514: NOT
36515: IFFALSE 36519
// continue ;
36517: GO 36497
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36519: LD_VAR 0 11
36523: PPUSH
36524: LD_VAR 0 12
36528: PPUSH
36529: CALL_OW 351
36533: PUSH
36534: LD_VAR 0 11
36538: PPUSH
36539: LD_VAR 0 12
36543: PPUSH
36544: CALL_OW 554
36548: AND
36549: IFFALSE 36589
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36551: LD_ADDR_VAR 0 13
36555: PUSH
36556: LD_VAR 0 13
36560: PPUSH
36561: LD_VAR 0 13
36565: PUSH
36566: LD_INT 1
36568: PLUS
36569: PPUSH
36570: LD_VAR 0 11
36574: PUSH
36575: LD_VAR 0 12
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PPUSH
36584: CALL_OW 2
36588: ST_TO_ADDR
// end ;
36589: GO 36497
36591: POP
36592: POP
36593: GO 36477
36595: POP
36596: POP
// if not list then
36597: LD_VAR 0 13
36601: NOT
36602: IFFALSE 36606
// exit ;
36604: GO 36677
// for i in list do
36606: LD_ADDR_VAR 0 6
36610: PUSH
36611: LD_VAR 0 13
36615: PUSH
36616: FOR_IN
36617: IFFALSE 36675
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36619: LD_VAR 0 1
36623: PPUSH
36624: LD_STRING M
36626: PUSH
36627: LD_VAR 0 6
36631: PUSH
36632: LD_INT 1
36634: ARRAY
36635: PUSH
36636: LD_VAR 0 6
36640: PUSH
36641: LD_INT 2
36643: ARRAY
36644: PUSH
36645: LD_INT 0
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: LD_INT 0
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: PUSH
36666: EMPTY
36667: LIST
36668: PPUSH
36669: CALL_OW 447
36673: GO 36616
36675: POP
36676: POP
// end ;
36677: LD_VAR 0 5
36681: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36682: LD_EXP 129
36686: NOT
36687: IFFALSE 36737
36689: GO 36691
36691: DISABLE
// begin initHack := true ;
36692: LD_ADDR_EXP 129
36696: PUSH
36697: LD_INT 1
36699: ST_TO_ADDR
// hackTanks := [ ] ;
36700: LD_ADDR_EXP 130
36704: PUSH
36705: EMPTY
36706: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36707: LD_ADDR_EXP 131
36711: PUSH
36712: EMPTY
36713: ST_TO_ADDR
// hackLimit := 3 ;
36714: LD_ADDR_EXP 132
36718: PUSH
36719: LD_INT 3
36721: ST_TO_ADDR
// hackDist := 12 ;
36722: LD_ADDR_EXP 133
36726: PUSH
36727: LD_INT 12
36729: ST_TO_ADDR
// hackCounter := [ ] ;
36730: LD_ADDR_EXP 134
36734: PUSH
36735: EMPTY
36736: ST_TO_ADDR
// end ;
36737: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36738: LD_EXP 129
36742: PUSH
36743: LD_INT 34
36745: PUSH
36746: LD_EXP 52
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PPUSH
36755: CALL_OW 69
36759: AND
36760: IFFALSE 37015
36762: GO 36764
36764: DISABLE
36765: LD_INT 0
36767: PPUSH
36768: PPUSH
// begin enable ;
36769: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36770: LD_ADDR_VAR 0 1
36774: PUSH
36775: LD_INT 34
36777: PUSH
36778: LD_EXP 52
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PPUSH
36787: CALL_OW 69
36791: PUSH
36792: FOR_IN
36793: IFFALSE 37013
// begin if not i in hackTanks then
36795: LD_VAR 0 1
36799: PUSH
36800: LD_EXP 130
36804: IN
36805: NOT
36806: IFFALSE 36889
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36808: LD_ADDR_EXP 130
36812: PUSH
36813: LD_EXP 130
36817: PPUSH
36818: LD_EXP 130
36822: PUSH
36823: LD_INT 1
36825: PLUS
36826: PPUSH
36827: LD_VAR 0 1
36831: PPUSH
36832: CALL_OW 1
36836: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36837: LD_ADDR_EXP 131
36841: PUSH
36842: LD_EXP 131
36846: PPUSH
36847: LD_EXP 131
36851: PUSH
36852: LD_INT 1
36854: PLUS
36855: PPUSH
36856: EMPTY
36857: PPUSH
36858: CALL_OW 1
36862: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36863: LD_ADDR_EXP 134
36867: PUSH
36868: LD_EXP 134
36872: PPUSH
36873: LD_EXP 134
36877: PUSH
36878: LD_INT 1
36880: PLUS
36881: PPUSH
36882: EMPTY
36883: PPUSH
36884: CALL_OW 1
36888: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36889: LD_VAR 0 1
36893: PPUSH
36894: CALL_OW 302
36898: NOT
36899: IFFALSE 36912
// begin HackUnlinkAll ( i ) ;
36901: LD_VAR 0 1
36905: PPUSH
36906: CALL 37018 0 1
// continue ;
36910: GO 36792
// end ; HackCheckCapturedStatus ( i ) ;
36912: LD_VAR 0 1
36916: PPUSH
36917: CALL 37461 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36921: LD_ADDR_VAR 0 2
36925: PUSH
36926: LD_INT 81
36928: PUSH
36929: LD_VAR 0 1
36933: PPUSH
36934: CALL_OW 255
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 33
36945: PUSH
36946: LD_INT 3
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 91
36955: PUSH
36956: LD_VAR 0 1
36960: PUSH
36961: LD_EXP 133
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 50
36973: PUSH
36974: EMPTY
36975: LIST
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: PPUSH
36983: CALL_OW 69
36987: ST_TO_ADDR
// if not tmp then
36988: LD_VAR 0 2
36992: NOT
36993: IFFALSE 36997
// continue ;
36995: GO 36792
// HackLink ( i , tmp ) ;
36997: LD_VAR 0 1
37001: PPUSH
37002: LD_VAR 0 2
37006: PPUSH
37007: CALL 37154 0 2
// end ;
37011: GO 36792
37013: POP
37014: POP
// end ;
37015: PPOPN 2
37017: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37018: LD_INT 0
37020: PPUSH
37021: PPUSH
37022: PPUSH
// if not hack in hackTanks then
37023: LD_VAR 0 1
37027: PUSH
37028: LD_EXP 130
37032: IN
37033: NOT
37034: IFFALSE 37038
// exit ;
37036: GO 37149
// index := GetElementIndex ( hackTanks , hack ) ;
37038: LD_ADDR_VAR 0 4
37042: PUSH
37043: LD_EXP 130
37047: PPUSH
37048: LD_VAR 0 1
37052: PPUSH
37053: CALL 44776 0 2
37057: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37058: LD_EXP 131
37062: PUSH
37063: LD_VAR 0 4
37067: ARRAY
37068: IFFALSE 37149
// begin for i in hackTanksCaptured [ index ] do
37070: LD_ADDR_VAR 0 3
37074: PUSH
37075: LD_EXP 131
37079: PUSH
37080: LD_VAR 0 4
37084: ARRAY
37085: PUSH
37086: FOR_IN
37087: IFFALSE 37113
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37089: LD_VAR 0 3
37093: PUSH
37094: LD_INT 1
37096: ARRAY
37097: PPUSH
37098: LD_VAR 0 3
37102: PUSH
37103: LD_INT 2
37105: ARRAY
37106: PPUSH
37107: CALL_OW 235
37111: GO 37086
37113: POP
37114: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37115: LD_ADDR_EXP 131
37119: PUSH
37120: LD_EXP 131
37124: PPUSH
37125: LD_VAR 0 4
37129: PPUSH
37130: EMPTY
37131: PPUSH
37132: CALL_OW 1
37136: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37137: LD_VAR 0 1
37141: PPUSH
37142: LD_INT 0
37144: PPUSH
37145: CALL_OW 505
// end ; end ;
37149: LD_VAR 0 2
37153: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37154: LD_INT 0
37156: PPUSH
37157: PPUSH
37158: PPUSH
// if not hack in hackTanks or not vehicles then
37159: LD_VAR 0 1
37163: PUSH
37164: LD_EXP 130
37168: IN
37169: NOT
37170: PUSH
37171: LD_VAR 0 2
37175: NOT
37176: OR
37177: IFFALSE 37181
// exit ;
37179: GO 37456
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37181: LD_ADDR_VAR 0 2
37185: PUSH
37186: LD_VAR 0 1
37190: PPUSH
37191: LD_VAR 0 2
37195: PPUSH
37196: LD_INT 1
37198: PPUSH
37199: LD_INT 1
37201: PPUSH
37202: CALL 45426 0 4
37206: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37207: LD_ADDR_VAR 0 5
37211: PUSH
37212: LD_EXP 130
37216: PPUSH
37217: LD_VAR 0 1
37221: PPUSH
37222: CALL 44776 0 2
37226: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37227: LD_EXP 131
37231: PUSH
37232: LD_VAR 0 5
37236: ARRAY
37237: PUSH
37238: LD_EXP 132
37242: LESS
37243: IFFALSE 37432
// begin for i := 1 to vehicles do
37245: LD_ADDR_VAR 0 4
37249: PUSH
37250: DOUBLE
37251: LD_INT 1
37253: DEC
37254: ST_TO_ADDR
37255: LD_VAR 0 2
37259: PUSH
37260: FOR_TO
37261: IFFALSE 37430
// begin if hackTanksCaptured [ index ] = hackLimit then
37263: LD_EXP 131
37267: PUSH
37268: LD_VAR 0 5
37272: ARRAY
37273: PUSH
37274: LD_EXP 132
37278: EQUAL
37279: IFFALSE 37283
// break ;
37281: GO 37430
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37283: LD_ADDR_EXP 134
37287: PUSH
37288: LD_EXP 134
37292: PPUSH
37293: LD_VAR 0 5
37297: PPUSH
37298: LD_EXP 134
37302: PUSH
37303: LD_VAR 0 5
37307: ARRAY
37308: PUSH
37309: LD_INT 1
37311: PLUS
37312: PPUSH
37313: CALL_OW 1
37317: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37318: LD_ADDR_EXP 131
37322: PUSH
37323: LD_EXP 131
37327: PPUSH
37328: LD_VAR 0 5
37332: PUSH
37333: LD_EXP 131
37337: PUSH
37338: LD_VAR 0 5
37342: ARRAY
37343: PUSH
37344: LD_INT 1
37346: PLUS
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PPUSH
37352: LD_VAR 0 2
37356: PUSH
37357: LD_VAR 0 4
37361: ARRAY
37362: PUSH
37363: LD_VAR 0 2
37367: PUSH
37368: LD_VAR 0 4
37372: ARRAY
37373: PPUSH
37374: CALL_OW 255
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PPUSH
37383: CALL 44991 0 3
37387: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37388: LD_VAR 0 2
37392: PUSH
37393: LD_VAR 0 4
37397: ARRAY
37398: PPUSH
37399: LD_VAR 0 1
37403: PPUSH
37404: CALL_OW 255
37408: PPUSH
37409: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37413: LD_VAR 0 2
37417: PUSH
37418: LD_VAR 0 4
37422: ARRAY
37423: PPUSH
37424: CALL_OW 141
// end ;
37428: GO 37260
37430: POP
37431: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37432: LD_VAR 0 1
37436: PPUSH
37437: LD_EXP 131
37441: PUSH
37442: LD_VAR 0 5
37446: ARRAY
37447: PUSH
37448: LD_INT 0
37450: PLUS
37451: PPUSH
37452: CALL_OW 505
// end ;
37456: LD_VAR 0 3
37460: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37461: LD_INT 0
37463: PPUSH
37464: PPUSH
37465: PPUSH
37466: PPUSH
// if not hack in hackTanks then
37467: LD_VAR 0 1
37471: PUSH
37472: LD_EXP 130
37476: IN
37477: NOT
37478: IFFALSE 37482
// exit ;
37480: GO 37722
// index := GetElementIndex ( hackTanks , hack ) ;
37482: LD_ADDR_VAR 0 4
37486: PUSH
37487: LD_EXP 130
37491: PPUSH
37492: LD_VAR 0 1
37496: PPUSH
37497: CALL 44776 0 2
37501: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37502: LD_ADDR_VAR 0 3
37506: PUSH
37507: DOUBLE
37508: LD_EXP 131
37512: PUSH
37513: LD_VAR 0 4
37517: ARRAY
37518: INC
37519: ST_TO_ADDR
37520: LD_INT 1
37522: PUSH
37523: FOR_DOWNTO
37524: IFFALSE 37696
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37526: LD_ADDR_VAR 0 5
37530: PUSH
37531: LD_EXP 131
37535: PUSH
37536: LD_VAR 0 4
37540: ARRAY
37541: PUSH
37542: LD_VAR 0 3
37546: ARRAY
37547: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37548: LD_VAR 0 5
37552: PUSH
37553: LD_INT 1
37555: ARRAY
37556: PPUSH
37557: CALL_OW 302
37561: NOT
37562: PUSH
37563: LD_VAR 0 5
37567: PUSH
37568: LD_INT 1
37570: ARRAY
37571: PPUSH
37572: CALL_OW 255
37576: PUSH
37577: LD_VAR 0 1
37581: PPUSH
37582: CALL_OW 255
37586: NONEQUAL
37587: OR
37588: IFFALSE 37694
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37590: LD_VAR 0 5
37594: PUSH
37595: LD_INT 1
37597: ARRAY
37598: PPUSH
37599: CALL_OW 305
37603: PUSH
37604: LD_VAR 0 5
37608: PUSH
37609: LD_INT 1
37611: ARRAY
37612: PPUSH
37613: CALL_OW 255
37617: PUSH
37618: LD_VAR 0 1
37622: PPUSH
37623: CALL_OW 255
37627: EQUAL
37628: AND
37629: IFFALSE 37653
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37631: LD_VAR 0 5
37635: PUSH
37636: LD_INT 1
37638: ARRAY
37639: PPUSH
37640: LD_VAR 0 5
37644: PUSH
37645: LD_INT 2
37647: ARRAY
37648: PPUSH
37649: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37653: LD_ADDR_EXP 131
37657: PUSH
37658: LD_EXP 131
37662: PPUSH
37663: LD_VAR 0 4
37667: PPUSH
37668: LD_EXP 131
37672: PUSH
37673: LD_VAR 0 4
37677: ARRAY
37678: PPUSH
37679: LD_VAR 0 3
37683: PPUSH
37684: CALL_OW 3
37688: PPUSH
37689: CALL_OW 1
37693: ST_TO_ADDR
// end ; end ;
37694: GO 37523
37696: POP
37697: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37698: LD_VAR 0 1
37702: PPUSH
37703: LD_EXP 131
37707: PUSH
37708: LD_VAR 0 4
37712: ARRAY
37713: PUSH
37714: LD_INT 0
37716: PLUS
37717: PPUSH
37718: CALL_OW 505
// end ;
37722: LD_VAR 0 2
37726: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37727: LD_INT 0
37729: PPUSH
37730: PPUSH
37731: PPUSH
37732: PPUSH
// if not hack in hackTanks then
37733: LD_VAR 0 1
37737: PUSH
37738: LD_EXP 130
37742: IN
37743: NOT
37744: IFFALSE 37748
// exit ;
37746: GO 37833
// index := GetElementIndex ( hackTanks , hack ) ;
37748: LD_ADDR_VAR 0 5
37752: PUSH
37753: LD_EXP 130
37757: PPUSH
37758: LD_VAR 0 1
37762: PPUSH
37763: CALL 44776 0 2
37767: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37768: LD_ADDR_VAR 0 4
37772: PUSH
37773: DOUBLE
37774: LD_INT 1
37776: DEC
37777: ST_TO_ADDR
37778: LD_EXP 131
37782: PUSH
37783: LD_VAR 0 5
37787: ARRAY
37788: PUSH
37789: FOR_TO
37790: IFFALSE 37831
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37792: LD_EXP 131
37796: PUSH
37797: LD_VAR 0 5
37801: ARRAY
37802: PUSH
37803: LD_VAR 0 4
37807: ARRAY
37808: PUSH
37809: LD_INT 1
37811: ARRAY
37812: PUSH
37813: LD_VAR 0 2
37817: EQUAL
37818: IFFALSE 37829
// KillUnit ( vehicle ) ;
37820: LD_VAR 0 2
37824: PPUSH
37825: CALL_OW 66
37829: GO 37789
37831: POP
37832: POP
// end ;
37833: LD_VAR 0 3
37837: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37838: LD_EXP 135
37842: NOT
37843: IFFALSE 37878
37845: GO 37847
37847: DISABLE
// begin initMiner := true ;
37848: LD_ADDR_EXP 135
37852: PUSH
37853: LD_INT 1
37855: ST_TO_ADDR
// minersList := [ ] ;
37856: LD_ADDR_EXP 136
37860: PUSH
37861: EMPTY
37862: ST_TO_ADDR
// minerMinesList := [ ] ;
37863: LD_ADDR_EXP 137
37867: PUSH
37868: EMPTY
37869: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37870: LD_ADDR_EXP 138
37874: PUSH
37875: LD_INT 5
37877: ST_TO_ADDR
// end ;
37878: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37879: LD_EXP 135
37883: PUSH
37884: LD_INT 34
37886: PUSH
37887: LD_EXP 57
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PPUSH
37896: CALL_OW 69
37900: AND
37901: IFFALSE 38364
37903: GO 37905
37905: DISABLE
37906: LD_INT 0
37908: PPUSH
37909: PPUSH
37910: PPUSH
37911: PPUSH
// begin enable ;
37912: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37913: LD_ADDR_VAR 0 1
37917: PUSH
37918: LD_INT 34
37920: PUSH
37921: LD_EXP 57
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PPUSH
37930: CALL_OW 69
37934: PUSH
37935: FOR_IN
37936: IFFALSE 38008
// begin if not i in minersList then
37938: LD_VAR 0 1
37942: PUSH
37943: LD_EXP 136
37947: IN
37948: NOT
37949: IFFALSE 38006
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37951: LD_ADDR_EXP 136
37955: PUSH
37956: LD_EXP 136
37960: PPUSH
37961: LD_EXP 136
37965: PUSH
37966: LD_INT 1
37968: PLUS
37969: PPUSH
37970: LD_VAR 0 1
37974: PPUSH
37975: CALL_OW 1
37979: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37980: LD_ADDR_EXP 137
37984: PUSH
37985: LD_EXP 137
37989: PPUSH
37990: LD_EXP 137
37994: PUSH
37995: LD_INT 1
37997: PLUS
37998: PPUSH
37999: EMPTY
38000: PPUSH
38001: CALL_OW 1
38005: ST_TO_ADDR
// end end ;
38006: GO 37935
38008: POP
38009: POP
// for i := minerMinesList downto 1 do
38010: LD_ADDR_VAR 0 1
38014: PUSH
38015: DOUBLE
38016: LD_EXP 137
38020: INC
38021: ST_TO_ADDR
38022: LD_INT 1
38024: PUSH
38025: FOR_DOWNTO
38026: IFFALSE 38362
// begin if IsLive ( minersList [ i ] ) then
38028: LD_EXP 136
38032: PUSH
38033: LD_VAR 0 1
38037: ARRAY
38038: PPUSH
38039: CALL_OW 300
38043: IFFALSE 38071
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38045: LD_EXP 136
38049: PUSH
38050: LD_VAR 0 1
38054: ARRAY
38055: PPUSH
38056: LD_EXP 137
38060: PUSH
38061: LD_VAR 0 1
38065: ARRAY
38066: PPUSH
38067: CALL_OW 505
// if not minerMinesList [ i ] then
38071: LD_EXP 137
38075: PUSH
38076: LD_VAR 0 1
38080: ARRAY
38081: NOT
38082: IFFALSE 38086
// continue ;
38084: GO 38025
// for j := minerMinesList [ i ] downto 1 do
38086: LD_ADDR_VAR 0 2
38090: PUSH
38091: DOUBLE
38092: LD_EXP 137
38096: PUSH
38097: LD_VAR 0 1
38101: ARRAY
38102: INC
38103: ST_TO_ADDR
38104: LD_INT 1
38106: PUSH
38107: FOR_DOWNTO
38108: IFFALSE 38358
// begin side := GetSide ( minersList [ i ] ) ;
38110: LD_ADDR_VAR 0 3
38114: PUSH
38115: LD_EXP 136
38119: PUSH
38120: LD_VAR 0 1
38124: ARRAY
38125: PPUSH
38126: CALL_OW 255
38130: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38131: LD_ADDR_VAR 0 4
38135: PUSH
38136: LD_EXP 137
38140: PUSH
38141: LD_VAR 0 1
38145: ARRAY
38146: PUSH
38147: LD_VAR 0 2
38151: ARRAY
38152: PUSH
38153: LD_INT 1
38155: ARRAY
38156: PPUSH
38157: LD_EXP 137
38161: PUSH
38162: LD_VAR 0 1
38166: ARRAY
38167: PUSH
38168: LD_VAR 0 2
38172: ARRAY
38173: PUSH
38174: LD_INT 2
38176: ARRAY
38177: PPUSH
38178: CALL_OW 428
38182: ST_TO_ADDR
// if not tmp then
38183: LD_VAR 0 4
38187: NOT
38188: IFFALSE 38192
// continue ;
38190: GO 38107
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38192: LD_VAR 0 4
38196: PUSH
38197: LD_INT 81
38199: PUSH
38200: LD_VAR 0 3
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PPUSH
38209: CALL_OW 69
38213: IN
38214: PUSH
38215: LD_EXP 137
38219: PUSH
38220: LD_VAR 0 1
38224: ARRAY
38225: PUSH
38226: LD_VAR 0 2
38230: ARRAY
38231: PUSH
38232: LD_INT 1
38234: ARRAY
38235: PPUSH
38236: LD_EXP 137
38240: PUSH
38241: LD_VAR 0 1
38245: ARRAY
38246: PUSH
38247: LD_VAR 0 2
38251: ARRAY
38252: PUSH
38253: LD_INT 2
38255: ARRAY
38256: PPUSH
38257: CALL_OW 458
38261: AND
38262: IFFALSE 38356
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38264: LD_EXP 137
38268: PUSH
38269: LD_VAR 0 1
38273: ARRAY
38274: PUSH
38275: LD_VAR 0 2
38279: ARRAY
38280: PUSH
38281: LD_INT 1
38283: ARRAY
38284: PPUSH
38285: LD_EXP 137
38289: PUSH
38290: LD_VAR 0 1
38294: ARRAY
38295: PUSH
38296: LD_VAR 0 2
38300: ARRAY
38301: PUSH
38302: LD_INT 2
38304: ARRAY
38305: PPUSH
38306: LD_VAR 0 3
38310: PPUSH
38311: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38315: LD_ADDR_EXP 137
38319: PUSH
38320: LD_EXP 137
38324: PPUSH
38325: LD_VAR 0 1
38329: PPUSH
38330: LD_EXP 137
38334: PUSH
38335: LD_VAR 0 1
38339: ARRAY
38340: PPUSH
38341: LD_VAR 0 2
38345: PPUSH
38346: CALL_OW 3
38350: PPUSH
38351: CALL_OW 1
38355: ST_TO_ADDR
// end ; end ;
38356: GO 38107
38358: POP
38359: POP
// end ;
38360: GO 38025
38362: POP
38363: POP
// end ;
38364: PPOPN 4
38366: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38367: LD_INT 0
38369: PPUSH
38370: PPUSH
// result := false ;
38371: LD_ADDR_VAR 0 4
38375: PUSH
38376: LD_INT 0
38378: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38379: LD_VAR 0 1
38383: PPUSH
38384: CALL_OW 264
38388: PUSH
38389: LD_EXP 57
38393: EQUAL
38394: NOT
38395: IFFALSE 38399
// exit ;
38397: GO 38639
// index := GetElementIndex ( minersList , unit ) ;
38399: LD_ADDR_VAR 0 5
38403: PUSH
38404: LD_EXP 136
38408: PPUSH
38409: LD_VAR 0 1
38413: PPUSH
38414: CALL 44776 0 2
38418: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38419: LD_EXP 137
38423: PUSH
38424: LD_VAR 0 5
38428: ARRAY
38429: PUSH
38430: LD_EXP 138
38434: GREATEREQUAL
38435: IFFALSE 38439
// exit ;
38437: GO 38639
// ComMoveXY ( unit , x , y ) ;
38439: LD_VAR 0 1
38443: PPUSH
38444: LD_VAR 0 2
38448: PPUSH
38449: LD_VAR 0 3
38453: PPUSH
38454: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38458: LD_INT 35
38460: PPUSH
38461: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38465: LD_VAR 0 1
38469: PPUSH
38470: LD_VAR 0 2
38474: PPUSH
38475: LD_VAR 0 3
38479: PPUSH
38480: CALL 76062 0 3
38484: NOT
38485: PUSH
38486: LD_VAR 0 1
38490: PPUSH
38491: CALL_OW 314
38495: AND
38496: IFFALSE 38500
// exit ;
38498: GO 38639
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38500: LD_VAR 0 2
38504: PPUSH
38505: LD_VAR 0 3
38509: PPUSH
38510: CALL_OW 428
38514: PUSH
38515: LD_VAR 0 1
38519: EQUAL
38520: PUSH
38521: LD_VAR 0 1
38525: PPUSH
38526: CALL_OW 314
38530: NOT
38531: AND
38532: IFFALSE 38458
// PlaySoundXY ( x , y , PlantMine ) ;
38534: LD_VAR 0 2
38538: PPUSH
38539: LD_VAR 0 3
38543: PPUSH
38544: LD_STRING PlantMine
38546: PPUSH
38547: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38551: LD_VAR 0 2
38555: PPUSH
38556: LD_VAR 0 3
38560: PPUSH
38561: LD_VAR 0 1
38565: PPUSH
38566: CALL_OW 255
38570: PPUSH
38571: LD_INT 0
38573: PPUSH
38574: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38578: LD_ADDR_EXP 137
38582: PUSH
38583: LD_EXP 137
38587: PPUSH
38588: LD_VAR 0 5
38592: PUSH
38593: LD_EXP 137
38597: PUSH
38598: LD_VAR 0 5
38602: ARRAY
38603: PUSH
38604: LD_INT 1
38606: PLUS
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PPUSH
38612: LD_VAR 0 2
38616: PUSH
38617: LD_VAR 0 3
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PPUSH
38626: CALL 44991 0 3
38630: ST_TO_ADDR
// result := true ;
38631: LD_ADDR_VAR 0 4
38635: PUSH
38636: LD_INT 1
38638: ST_TO_ADDR
// end ;
38639: LD_VAR 0 4
38643: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38644: LD_INT 0
38646: PPUSH
38647: PPUSH
38648: PPUSH
// if not unit in minersList then
38649: LD_VAR 0 1
38653: PUSH
38654: LD_EXP 136
38658: IN
38659: NOT
38660: IFFALSE 38664
// exit ;
38662: GO 39056
// index := GetElementIndex ( minersList , unit ) ;
38664: LD_ADDR_VAR 0 6
38668: PUSH
38669: LD_EXP 136
38673: PPUSH
38674: LD_VAR 0 1
38678: PPUSH
38679: CALL 44776 0 2
38683: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38684: LD_ADDR_VAR 0 5
38688: PUSH
38689: DOUBLE
38690: LD_EXP 137
38694: PUSH
38695: LD_VAR 0 6
38699: ARRAY
38700: INC
38701: ST_TO_ADDR
38702: LD_INT 1
38704: PUSH
38705: FOR_DOWNTO
38706: IFFALSE 38867
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38708: LD_EXP 137
38712: PUSH
38713: LD_VAR 0 6
38717: ARRAY
38718: PUSH
38719: LD_VAR 0 5
38723: ARRAY
38724: PUSH
38725: LD_INT 1
38727: ARRAY
38728: PUSH
38729: LD_VAR 0 2
38733: EQUAL
38734: PUSH
38735: LD_EXP 137
38739: PUSH
38740: LD_VAR 0 6
38744: ARRAY
38745: PUSH
38746: LD_VAR 0 5
38750: ARRAY
38751: PUSH
38752: LD_INT 2
38754: ARRAY
38755: PUSH
38756: LD_VAR 0 3
38760: EQUAL
38761: AND
38762: IFFALSE 38865
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38764: LD_EXP 137
38768: PUSH
38769: LD_VAR 0 6
38773: ARRAY
38774: PUSH
38775: LD_VAR 0 5
38779: ARRAY
38780: PUSH
38781: LD_INT 1
38783: ARRAY
38784: PPUSH
38785: LD_EXP 137
38789: PUSH
38790: LD_VAR 0 6
38794: ARRAY
38795: PUSH
38796: LD_VAR 0 5
38800: ARRAY
38801: PUSH
38802: LD_INT 2
38804: ARRAY
38805: PPUSH
38806: LD_VAR 0 1
38810: PPUSH
38811: CALL_OW 255
38815: PPUSH
38816: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38820: LD_ADDR_EXP 137
38824: PUSH
38825: LD_EXP 137
38829: PPUSH
38830: LD_VAR 0 6
38834: PPUSH
38835: LD_EXP 137
38839: PUSH
38840: LD_VAR 0 6
38844: ARRAY
38845: PPUSH
38846: LD_VAR 0 5
38850: PPUSH
38851: CALL_OW 3
38855: PPUSH
38856: CALL_OW 1
38860: ST_TO_ADDR
// exit ;
38861: POP
38862: POP
38863: GO 39056
// end ; end ;
38865: GO 38705
38867: POP
38868: POP
// for i := minerMinesList [ index ] downto 1 do
38869: LD_ADDR_VAR 0 5
38873: PUSH
38874: DOUBLE
38875: LD_EXP 137
38879: PUSH
38880: LD_VAR 0 6
38884: ARRAY
38885: INC
38886: ST_TO_ADDR
38887: LD_INT 1
38889: PUSH
38890: FOR_DOWNTO
38891: IFFALSE 39054
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38893: LD_EXP 137
38897: PUSH
38898: LD_VAR 0 6
38902: ARRAY
38903: PUSH
38904: LD_VAR 0 5
38908: ARRAY
38909: PUSH
38910: LD_INT 1
38912: ARRAY
38913: PPUSH
38914: LD_EXP 137
38918: PUSH
38919: LD_VAR 0 6
38923: ARRAY
38924: PUSH
38925: LD_VAR 0 5
38929: ARRAY
38930: PUSH
38931: LD_INT 2
38933: ARRAY
38934: PPUSH
38935: LD_VAR 0 2
38939: PPUSH
38940: LD_VAR 0 3
38944: PPUSH
38945: CALL_OW 298
38949: PUSH
38950: LD_INT 6
38952: LESS
38953: IFFALSE 39052
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38955: LD_EXP 137
38959: PUSH
38960: LD_VAR 0 6
38964: ARRAY
38965: PUSH
38966: LD_VAR 0 5
38970: ARRAY
38971: PUSH
38972: LD_INT 1
38974: ARRAY
38975: PPUSH
38976: LD_EXP 137
38980: PUSH
38981: LD_VAR 0 6
38985: ARRAY
38986: PUSH
38987: LD_VAR 0 5
38991: ARRAY
38992: PUSH
38993: LD_INT 2
38995: ARRAY
38996: PPUSH
38997: LD_VAR 0 1
39001: PPUSH
39002: CALL_OW 255
39006: PPUSH
39007: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39011: LD_ADDR_EXP 137
39015: PUSH
39016: LD_EXP 137
39020: PPUSH
39021: LD_VAR 0 6
39025: PPUSH
39026: LD_EXP 137
39030: PUSH
39031: LD_VAR 0 6
39035: ARRAY
39036: PPUSH
39037: LD_VAR 0 5
39041: PPUSH
39042: CALL_OW 3
39046: PPUSH
39047: CALL_OW 1
39051: ST_TO_ADDR
// end ; end ;
39052: GO 38890
39054: POP
39055: POP
// end ;
39056: LD_VAR 0 4
39060: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39061: LD_INT 0
39063: PPUSH
39064: PPUSH
39065: PPUSH
39066: PPUSH
39067: PPUSH
39068: PPUSH
39069: PPUSH
39070: PPUSH
39071: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39072: LD_VAR 0 1
39076: PPUSH
39077: CALL_OW 264
39081: PUSH
39082: LD_EXP 57
39086: EQUAL
39087: NOT
39088: PUSH
39089: LD_VAR 0 1
39093: PUSH
39094: LD_EXP 136
39098: IN
39099: NOT
39100: OR
39101: IFFALSE 39105
// exit ;
39103: GO 39427
// index := GetElementIndex ( minersList , unit ) ;
39105: LD_ADDR_VAR 0 6
39109: PUSH
39110: LD_EXP 136
39114: PPUSH
39115: LD_VAR 0 1
39119: PPUSH
39120: CALL 44776 0 2
39124: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39125: LD_ADDR_VAR 0 8
39129: PUSH
39130: LD_EXP 138
39134: PUSH
39135: LD_EXP 137
39139: PUSH
39140: LD_VAR 0 6
39144: ARRAY
39145: MINUS
39146: ST_TO_ADDR
// if not minesFreeAmount then
39147: LD_VAR 0 8
39151: NOT
39152: IFFALSE 39156
// exit ;
39154: GO 39427
// tmp := [ ] ;
39156: LD_ADDR_VAR 0 7
39160: PUSH
39161: EMPTY
39162: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39163: LD_ADDR_VAR 0 5
39167: PUSH
39168: DOUBLE
39169: LD_INT 1
39171: DEC
39172: ST_TO_ADDR
39173: LD_VAR 0 8
39177: PUSH
39178: FOR_TO
39179: IFFALSE 39374
// begin _d := rand ( 0 , 5 ) ;
39181: LD_ADDR_VAR 0 11
39185: PUSH
39186: LD_INT 0
39188: PPUSH
39189: LD_INT 5
39191: PPUSH
39192: CALL_OW 12
39196: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39197: LD_ADDR_VAR 0 12
39201: PUSH
39202: LD_INT 2
39204: PPUSH
39205: LD_INT 6
39207: PPUSH
39208: CALL_OW 12
39212: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39213: LD_ADDR_VAR 0 9
39217: PUSH
39218: LD_VAR 0 2
39222: PPUSH
39223: LD_VAR 0 11
39227: PPUSH
39228: LD_VAR 0 12
39232: PPUSH
39233: CALL_OW 272
39237: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39238: LD_ADDR_VAR 0 10
39242: PUSH
39243: LD_VAR 0 3
39247: PPUSH
39248: LD_VAR 0 11
39252: PPUSH
39253: LD_VAR 0 12
39257: PPUSH
39258: CALL_OW 273
39262: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39263: LD_VAR 0 9
39267: PPUSH
39268: LD_VAR 0 10
39272: PPUSH
39273: CALL_OW 488
39277: PUSH
39278: LD_VAR 0 9
39282: PUSH
39283: LD_VAR 0 10
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_VAR 0 7
39296: IN
39297: NOT
39298: AND
39299: PUSH
39300: LD_VAR 0 9
39304: PPUSH
39305: LD_VAR 0 10
39309: PPUSH
39310: CALL_OW 458
39314: NOT
39315: AND
39316: IFFALSE 39358
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39318: LD_ADDR_VAR 0 7
39322: PUSH
39323: LD_VAR 0 7
39327: PPUSH
39328: LD_VAR 0 7
39332: PUSH
39333: LD_INT 1
39335: PLUS
39336: PPUSH
39337: LD_VAR 0 9
39341: PUSH
39342: LD_VAR 0 10
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PPUSH
39351: CALL_OW 1
39355: ST_TO_ADDR
39356: GO 39372
// i := i - 1 ;
39358: LD_ADDR_VAR 0 5
39362: PUSH
39363: LD_VAR 0 5
39367: PUSH
39368: LD_INT 1
39370: MINUS
39371: ST_TO_ADDR
// end ;
39372: GO 39178
39374: POP
39375: POP
// for i in tmp do
39376: LD_ADDR_VAR 0 5
39380: PUSH
39381: LD_VAR 0 7
39385: PUSH
39386: FOR_IN
39387: IFFALSE 39425
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39389: LD_VAR 0 1
39393: PPUSH
39394: LD_VAR 0 5
39398: PUSH
39399: LD_INT 1
39401: ARRAY
39402: PPUSH
39403: LD_VAR 0 5
39407: PUSH
39408: LD_INT 2
39410: ARRAY
39411: PPUSH
39412: CALL 38367 0 3
39416: NOT
39417: IFFALSE 39423
// exit ;
39419: POP
39420: POP
39421: GO 39427
39423: GO 39386
39425: POP
39426: POP
// end ;
39427: LD_VAR 0 4
39431: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39432: LD_INT 0
39434: PPUSH
39435: PPUSH
39436: PPUSH
39437: PPUSH
39438: PPUSH
39439: PPUSH
39440: PPUSH
// if not GetClass ( unit ) = class_sniper then
39441: LD_VAR 0 1
39445: PPUSH
39446: CALL_OW 257
39450: PUSH
39451: LD_INT 5
39453: EQUAL
39454: NOT
39455: IFFALSE 39459
// exit ;
39457: GO 39847
// dist := 8 ;
39459: LD_ADDR_VAR 0 5
39463: PUSH
39464: LD_INT 8
39466: ST_TO_ADDR
// viewRange := 12 ;
39467: LD_ADDR_VAR 0 7
39471: PUSH
39472: LD_INT 12
39474: ST_TO_ADDR
// side := GetSide ( unit ) ;
39475: LD_ADDR_VAR 0 6
39479: PUSH
39480: LD_VAR 0 1
39484: PPUSH
39485: CALL_OW 255
39489: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39490: LD_INT 61
39492: PPUSH
39493: LD_VAR 0 6
39497: PPUSH
39498: CALL_OW 321
39502: PUSH
39503: LD_INT 2
39505: EQUAL
39506: IFFALSE 39516
// viewRange := 16 ;
39508: LD_ADDR_VAR 0 7
39512: PUSH
39513: LD_INT 16
39515: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39516: LD_VAR 0 1
39520: PPUSH
39521: LD_VAR 0 2
39525: PPUSH
39526: LD_VAR 0 3
39530: PPUSH
39531: CALL_OW 297
39535: PUSH
39536: LD_VAR 0 5
39540: GREATER
39541: IFFALSE 39620
// begin ComMoveXY ( unit , x , y ) ;
39543: LD_VAR 0 1
39547: PPUSH
39548: LD_VAR 0 2
39552: PPUSH
39553: LD_VAR 0 3
39557: PPUSH
39558: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39562: LD_INT 35
39564: PPUSH
39565: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39569: LD_VAR 0 1
39573: PPUSH
39574: LD_VAR 0 2
39578: PPUSH
39579: LD_VAR 0 3
39583: PPUSH
39584: CALL 76062 0 3
39588: NOT
39589: IFFALSE 39593
// exit ;
39591: GO 39847
// until GetDistUnitXY ( unit , x , y ) < dist ;
39593: LD_VAR 0 1
39597: PPUSH
39598: LD_VAR 0 2
39602: PPUSH
39603: LD_VAR 0 3
39607: PPUSH
39608: CALL_OW 297
39612: PUSH
39613: LD_VAR 0 5
39617: LESS
39618: IFFALSE 39562
// end ; ComTurnXY ( unit , x , y ) ;
39620: LD_VAR 0 1
39624: PPUSH
39625: LD_VAR 0 2
39629: PPUSH
39630: LD_VAR 0 3
39634: PPUSH
39635: CALL_OW 118
// wait ( 5 ) ;
39639: LD_INT 5
39641: PPUSH
39642: CALL_OW 67
// _d := GetDir ( unit ) ;
39646: LD_ADDR_VAR 0 10
39650: PUSH
39651: LD_VAR 0 1
39655: PPUSH
39656: CALL_OW 254
39660: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39661: LD_ADDR_VAR 0 8
39665: PUSH
39666: LD_VAR 0 1
39670: PPUSH
39671: CALL_OW 250
39675: PPUSH
39676: LD_VAR 0 10
39680: PPUSH
39681: LD_VAR 0 5
39685: PPUSH
39686: CALL_OW 272
39690: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39691: LD_ADDR_VAR 0 9
39695: PUSH
39696: LD_VAR 0 1
39700: PPUSH
39701: CALL_OW 251
39705: PPUSH
39706: LD_VAR 0 10
39710: PPUSH
39711: LD_VAR 0 5
39715: PPUSH
39716: CALL_OW 273
39720: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39721: LD_VAR 0 8
39725: PPUSH
39726: LD_VAR 0 9
39730: PPUSH
39731: CALL_OW 488
39735: NOT
39736: IFFALSE 39740
// exit ;
39738: GO 39847
// ComAnimCustom ( unit , 1 ) ;
39740: LD_VAR 0 1
39744: PPUSH
39745: LD_INT 1
39747: PPUSH
39748: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39752: LD_VAR 0 8
39756: PPUSH
39757: LD_VAR 0 9
39761: PPUSH
39762: LD_VAR 0 6
39766: PPUSH
39767: LD_VAR 0 7
39771: PPUSH
39772: CALL_OW 330
// repeat wait ( 1 ) ;
39776: LD_INT 1
39778: PPUSH
39779: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39783: LD_VAR 0 1
39787: PPUSH
39788: CALL_OW 316
39792: PUSH
39793: LD_VAR 0 1
39797: PPUSH
39798: CALL_OW 314
39802: OR
39803: PUSH
39804: LD_VAR 0 1
39808: PPUSH
39809: CALL_OW 302
39813: NOT
39814: OR
39815: PUSH
39816: LD_VAR 0 1
39820: PPUSH
39821: CALL_OW 301
39825: OR
39826: IFFALSE 39776
// RemoveSeeing ( _x , _y , side ) ;
39828: LD_VAR 0 8
39832: PPUSH
39833: LD_VAR 0 9
39837: PPUSH
39838: LD_VAR 0 6
39842: PPUSH
39843: CALL_OW 331
// end ; end_of_file
39847: LD_VAR 0 4
39851: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39852: LD_INT 0
39854: PPUSH
39855: PPUSH
// if exist_mode then
39856: LD_VAR 0 2
39860: IFFALSE 39885
// unit := CreateCharacter ( prefix & ident ) else
39862: LD_ADDR_VAR 0 5
39866: PUSH
39867: LD_VAR 0 3
39871: PUSH
39872: LD_VAR 0 1
39876: STR
39877: PPUSH
39878: CALL_OW 34
39882: ST_TO_ADDR
39883: GO 39900
// unit := NewCharacter ( ident ) ;
39885: LD_ADDR_VAR 0 5
39889: PUSH
39890: LD_VAR 0 1
39894: PPUSH
39895: CALL_OW 25
39899: ST_TO_ADDR
// result := unit ;
39900: LD_ADDR_VAR 0 4
39904: PUSH
39905: LD_VAR 0 5
39909: ST_TO_ADDR
// end ;
39910: LD_VAR 0 4
39914: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39915: LD_INT 0
39917: PPUSH
39918: PPUSH
// if not side or not nation then
39919: LD_VAR 0 1
39923: NOT
39924: PUSH
39925: LD_VAR 0 2
39929: NOT
39930: OR
39931: IFFALSE 39935
// exit ;
39933: GO 40703
// case nation of nation_american :
39935: LD_VAR 0 2
39939: PUSH
39940: LD_INT 1
39942: DOUBLE
39943: EQUAL
39944: IFTRUE 39948
39946: GO 40162
39948: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39949: LD_ADDR_VAR 0 4
39953: PUSH
39954: LD_INT 35
39956: PUSH
39957: LD_INT 45
39959: PUSH
39960: LD_INT 46
39962: PUSH
39963: LD_INT 47
39965: PUSH
39966: LD_INT 82
39968: PUSH
39969: LD_INT 83
39971: PUSH
39972: LD_INT 84
39974: PUSH
39975: LD_INT 85
39977: PUSH
39978: LD_INT 86
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: LD_INT 2
39986: PUSH
39987: LD_INT 6
39989: PUSH
39990: LD_INT 15
39992: PUSH
39993: LD_INT 16
39995: PUSH
39996: LD_INT 7
39998: PUSH
39999: LD_INT 12
40001: PUSH
40002: LD_INT 13
40004: PUSH
40005: LD_INT 10
40007: PUSH
40008: LD_INT 14
40010: PUSH
40011: LD_INT 20
40013: PUSH
40014: LD_INT 21
40016: PUSH
40017: LD_INT 22
40019: PUSH
40020: LD_INT 25
40022: PUSH
40023: LD_INT 32
40025: PUSH
40026: LD_INT 27
40028: PUSH
40029: LD_INT 36
40031: PUSH
40032: LD_INT 69
40034: PUSH
40035: LD_INT 39
40037: PUSH
40038: LD_INT 34
40040: PUSH
40041: LD_INT 40
40043: PUSH
40044: LD_INT 48
40046: PUSH
40047: LD_INT 49
40049: PUSH
40050: LD_INT 50
40052: PUSH
40053: LD_INT 51
40055: PUSH
40056: LD_INT 52
40058: PUSH
40059: LD_INT 53
40061: PUSH
40062: LD_INT 54
40064: PUSH
40065: LD_INT 55
40067: PUSH
40068: LD_INT 56
40070: PUSH
40071: LD_INT 57
40073: PUSH
40074: LD_INT 58
40076: PUSH
40077: LD_INT 59
40079: PUSH
40080: LD_INT 60
40082: PUSH
40083: LD_INT 61
40085: PUSH
40086: LD_INT 62
40088: PUSH
40089: LD_INT 80
40091: PUSH
40092: LD_INT 82
40094: PUSH
40095: LD_INT 83
40097: PUSH
40098: LD_INT 84
40100: PUSH
40101: LD_INT 85
40103: PUSH
40104: LD_INT 86
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: ST_TO_ADDR
40160: GO 40627
40162: LD_INT 2
40164: DOUBLE
40165: EQUAL
40166: IFTRUE 40170
40168: GO 40396
40170: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40171: LD_ADDR_VAR 0 4
40175: PUSH
40176: LD_INT 35
40178: PUSH
40179: LD_INT 45
40181: PUSH
40182: LD_INT 46
40184: PUSH
40185: LD_INT 47
40187: PUSH
40188: LD_INT 82
40190: PUSH
40191: LD_INT 83
40193: PUSH
40194: LD_INT 84
40196: PUSH
40197: LD_INT 85
40199: PUSH
40200: LD_INT 87
40202: PUSH
40203: LD_INT 70
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: LD_INT 11
40211: PUSH
40212: LD_INT 3
40214: PUSH
40215: LD_INT 4
40217: PUSH
40218: LD_INT 5
40220: PUSH
40221: LD_INT 6
40223: PUSH
40224: LD_INT 15
40226: PUSH
40227: LD_INT 18
40229: PUSH
40230: LD_INT 7
40232: PUSH
40233: LD_INT 17
40235: PUSH
40236: LD_INT 8
40238: PUSH
40239: LD_INT 20
40241: PUSH
40242: LD_INT 21
40244: PUSH
40245: LD_INT 22
40247: PUSH
40248: LD_INT 72
40250: PUSH
40251: LD_INT 26
40253: PUSH
40254: LD_INT 69
40256: PUSH
40257: LD_INT 39
40259: PUSH
40260: LD_INT 40
40262: PUSH
40263: LD_INT 41
40265: PUSH
40266: LD_INT 42
40268: PUSH
40269: LD_INT 43
40271: PUSH
40272: LD_INT 48
40274: PUSH
40275: LD_INT 49
40277: PUSH
40278: LD_INT 50
40280: PUSH
40281: LD_INT 51
40283: PUSH
40284: LD_INT 52
40286: PUSH
40287: LD_INT 53
40289: PUSH
40290: LD_INT 54
40292: PUSH
40293: LD_INT 55
40295: PUSH
40296: LD_INT 56
40298: PUSH
40299: LD_INT 60
40301: PUSH
40302: LD_INT 61
40304: PUSH
40305: LD_INT 62
40307: PUSH
40308: LD_INT 66
40310: PUSH
40311: LD_INT 67
40313: PUSH
40314: LD_INT 68
40316: PUSH
40317: LD_INT 81
40319: PUSH
40320: LD_INT 82
40322: PUSH
40323: LD_INT 83
40325: PUSH
40326: LD_INT 84
40328: PUSH
40329: LD_INT 85
40331: PUSH
40332: LD_INT 87
40334: PUSH
40335: LD_INT 88
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: ST_TO_ADDR
40394: GO 40627
40396: LD_INT 3
40398: DOUBLE
40399: EQUAL
40400: IFTRUE 40404
40402: GO 40626
40404: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40405: LD_ADDR_VAR 0 4
40409: PUSH
40410: LD_INT 46
40412: PUSH
40413: LD_INT 47
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: LD_INT 2
40421: PUSH
40422: LD_INT 82
40424: PUSH
40425: LD_INT 83
40427: PUSH
40428: LD_INT 84
40430: PUSH
40431: LD_INT 85
40433: PUSH
40434: LD_INT 86
40436: PUSH
40437: LD_INT 11
40439: PUSH
40440: LD_INT 9
40442: PUSH
40443: LD_INT 20
40445: PUSH
40446: LD_INT 19
40448: PUSH
40449: LD_INT 21
40451: PUSH
40452: LD_INT 24
40454: PUSH
40455: LD_INT 22
40457: PUSH
40458: LD_INT 25
40460: PUSH
40461: LD_INT 28
40463: PUSH
40464: LD_INT 29
40466: PUSH
40467: LD_INT 30
40469: PUSH
40470: LD_INT 31
40472: PUSH
40473: LD_INT 37
40475: PUSH
40476: LD_INT 38
40478: PUSH
40479: LD_INT 32
40481: PUSH
40482: LD_INT 27
40484: PUSH
40485: LD_INT 33
40487: PUSH
40488: LD_INT 69
40490: PUSH
40491: LD_INT 39
40493: PUSH
40494: LD_INT 34
40496: PUSH
40497: LD_INT 40
40499: PUSH
40500: LD_INT 71
40502: PUSH
40503: LD_INT 23
40505: PUSH
40506: LD_INT 44
40508: PUSH
40509: LD_INT 48
40511: PUSH
40512: LD_INT 49
40514: PUSH
40515: LD_INT 50
40517: PUSH
40518: LD_INT 51
40520: PUSH
40521: LD_INT 52
40523: PUSH
40524: LD_INT 53
40526: PUSH
40527: LD_INT 54
40529: PUSH
40530: LD_INT 55
40532: PUSH
40533: LD_INT 56
40535: PUSH
40536: LD_INT 57
40538: PUSH
40539: LD_INT 58
40541: PUSH
40542: LD_INT 59
40544: PUSH
40545: LD_INT 63
40547: PUSH
40548: LD_INT 64
40550: PUSH
40551: LD_INT 65
40553: PUSH
40554: LD_INT 82
40556: PUSH
40557: LD_INT 83
40559: PUSH
40560: LD_INT 84
40562: PUSH
40563: LD_INT 85
40565: PUSH
40566: LD_INT 86
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: ST_TO_ADDR
40624: GO 40627
40626: POP
// if state > - 1 and state < 3 then
40627: LD_VAR 0 3
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: GREATER
40636: PUSH
40637: LD_VAR 0 3
40641: PUSH
40642: LD_INT 3
40644: LESS
40645: AND
40646: IFFALSE 40703
// for i in result do
40648: LD_ADDR_VAR 0 5
40652: PUSH
40653: LD_VAR 0 4
40657: PUSH
40658: FOR_IN
40659: IFFALSE 40701
// if GetTech ( i , side ) <> state then
40661: LD_VAR 0 5
40665: PPUSH
40666: LD_VAR 0 1
40670: PPUSH
40671: CALL_OW 321
40675: PUSH
40676: LD_VAR 0 3
40680: NONEQUAL
40681: IFFALSE 40699
// result := result diff i ;
40683: LD_ADDR_VAR 0 4
40687: PUSH
40688: LD_VAR 0 4
40692: PUSH
40693: LD_VAR 0 5
40697: DIFF
40698: ST_TO_ADDR
40699: GO 40658
40701: POP
40702: POP
// end ;
40703: LD_VAR 0 4
40707: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40708: LD_INT 0
40710: PPUSH
40711: PPUSH
40712: PPUSH
// result := true ;
40713: LD_ADDR_VAR 0 3
40717: PUSH
40718: LD_INT 1
40720: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40721: LD_ADDR_VAR 0 5
40725: PUSH
40726: LD_VAR 0 2
40730: PPUSH
40731: CALL_OW 480
40735: ST_TO_ADDR
// if not tmp then
40736: LD_VAR 0 5
40740: NOT
40741: IFFALSE 40745
// exit ;
40743: GO 40794
// for i in tmp do
40745: LD_ADDR_VAR 0 4
40749: PUSH
40750: LD_VAR 0 5
40754: PUSH
40755: FOR_IN
40756: IFFALSE 40792
// if GetTech ( i , side ) <> state_researched then
40758: LD_VAR 0 4
40762: PPUSH
40763: LD_VAR 0 1
40767: PPUSH
40768: CALL_OW 321
40772: PUSH
40773: LD_INT 2
40775: NONEQUAL
40776: IFFALSE 40790
// begin result := false ;
40778: LD_ADDR_VAR 0 3
40782: PUSH
40783: LD_INT 0
40785: ST_TO_ADDR
// exit ;
40786: POP
40787: POP
40788: GO 40794
// end ;
40790: GO 40755
40792: POP
40793: POP
// end ;
40794: LD_VAR 0 3
40798: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40799: LD_INT 0
40801: PPUSH
40802: PPUSH
40803: PPUSH
40804: PPUSH
40805: PPUSH
40806: PPUSH
40807: PPUSH
40808: PPUSH
40809: PPUSH
40810: PPUSH
40811: PPUSH
40812: PPUSH
40813: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40814: LD_VAR 0 1
40818: NOT
40819: PUSH
40820: LD_VAR 0 1
40824: PPUSH
40825: CALL_OW 257
40829: PUSH
40830: LD_INT 9
40832: NONEQUAL
40833: OR
40834: IFFALSE 40838
// exit ;
40836: GO 41411
// side := GetSide ( unit ) ;
40838: LD_ADDR_VAR 0 9
40842: PUSH
40843: LD_VAR 0 1
40847: PPUSH
40848: CALL_OW 255
40852: ST_TO_ADDR
// tech_space := tech_spacanom ;
40853: LD_ADDR_VAR 0 12
40857: PUSH
40858: LD_INT 29
40860: ST_TO_ADDR
// tech_time := tech_taurad ;
40861: LD_ADDR_VAR 0 13
40865: PUSH
40866: LD_INT 28
40868: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40869: LD_ADDR_VAR 0 11
40873: PUSH
40874: LD_VAR 0 1
40878: PPUSH
40879: CALL_OW 310
40883: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40884: LD_VAR 0 11
40888: PPUSH
40889: CALL_OW 247
40893: PUSH
40894: LD_INT 2
40896: EQUAL
40897: IFFALSE 40901
// exit ;
40899: GO 41411
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40901: LD_ADDR_VAR 0 8
40905: PUSH
40906: LD_INT 81
40908: PUSH
40909: LD_VAR 0 9
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 3
40920: PUSH
40921: LD_INT 21
40923: PUSH
40924: LD_INT 3
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PPUSH
40939: CALL_OW 69
40943: ST_TO_ADDR
// if not tmp then
40944: LD_VAR 0 8
40948: NOT
40949: IFFALSE 40953
// exit ;
40951: GO 41411
// if in_unit then
40953: LD_VAR 0 11
40957: IFFALSE 40981
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40959: LD_ADDR_VAR 0 10
40963: PUSH
40964: LD_VAR 0 8
40968: PPUSH
40969: LD_VAR 0 11
40973: PPUSH
40974: CALL_OW 74
40978: ST_TO_ADDR
40979: GO 41001
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40981: LD_ADDR_VAR 0 10
40985: PUSH
40986: LD_VAR 0 8
40990: PPUSH
40991: LD_VAR 0 1
40995: PPUSH
40996: CALL_OW 74
41000: ST_TO_ADDR
// if not enemy then
41001: LD_VAR 0 10
41005: NOT
41006: IFFALSE 41010
// exit ;
41008: GO 41411
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41010: LD_VAR 0 11
41014: PUSH
41015: LD_VAR 0 11
41019: PPUSH
41020: LD_VAR 0 10
41024: PPUSH
41025: CALL_OW 296
41029: PUSH
41030: LD_INT 13
41032: GREATER
41033: AND
41034: PUSH
41035: LD_VAR 0 1
41039: PPUSH
41040: LD_VAR 0 10
41044: PPUSH
41045: CALL_OW 296
41049: PUSH
41050: LD_INT 12
41052: GREATER
41053: OR
41054: IFFALSE 41058
// exit ;
41056: GO 41411
// missile := [ 1 ] ;
41058: LD_ADDR_VAR 0 14
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: EMPTY
41067: LIST
41068: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41069: LD_VAR 0 9
41073: PPUSH
41074: LD_VAR 0 12
41078: PPUSH
41079: CALL_OW 325
41083: IFFALSE 41112
// missile := Replace ( missile , missile + 1 , 2 ) ;
41085: LD_ADDR_VAR 0 14
41089: PUSH
41090: LD_VAR 0 14
41094: PPUSH
41095: LD_VAR 0 14
41099: PUSH
41100: LD_INT 1
41102: PLUS
41103: PPUSH
41104: LD_INT 2
41106: PPUSH
41107: CALL_OW 1
41111: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41112: LD_VAR 0 9
41116: PPUSH
41117: LD_VAR 0 13
41121: PPUSH
41122: CALL_OW 325
41126: PUSH
41127: LD_VAR 0 10
41131: PPUSH
41132: CALL_OW 255
41136: PPUSH
41137: LD_VAR 0 13
41141: PPUSH
41142: CALL_OW 325
41146: NOT
41147: AND
41148: IFFALSE 41177
// missile := Replace ( missile , missile + 1 , 3 ) ;
41150: LD_ADDR_VAR 0 14
41154: PUSH
41155: LD_VAR 0 14
41159: PPUSH
41160: LD_VAR 0 14
41164: PUSH
41165: LD_INT 1
41167: PLUS
41168: PPUSH
41169: LD_INT 3
41171: PPUSH
41172: CALL_OW 1
41176: ST_TO_ADDR
// if missile < 2 then
41177: LD_VAR 0 14
41181: PUSH
41182: LD_INT 2
41184: LESS
41185: IFFALSE 41189
// exit ;
41187: GO 41411
// x := GetX ( enemy ) ;
41189: LD_ADDR_VAR 0 4
41193: PUSH
41194: LD_VAR 0 10
41198: PPUSH
41199: CALL_OW 250
41203: ST_TO_ADDR
// y := GetY ( enemy ) ;
41204: LD_ADDR_VAR 0 5
41208: PUSH
41209: LD_VAR 0 10
41213: PPUSH
41214: CALL_OW 251
41218: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41219: LD_ADDR_VAR 0 6
41223: PUSH
41224: LD_VAR 0 4
41228: PUSH
41229: LD_INT 1
41231: NEG
41232: PPUSH
41233: LD_INT 1
41235: PPUSH
41236: CALL_OW 12
41240: PLUS
41241: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41242: LD_ADDR_VAR 0 7
41246: PUSH
41247: LD_VAR 0 5
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PPUSH
41256: LD_INT 1
41258: PPUSH
41259: CALL_OW 12
41263: PLUS
41264: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41265: LD_VAR 0 6
41269: PPUSH
41270: LD_VAR 0 7
41274: PPUSH
41275: CALL_OW 488
41279: NOT
41280: IFFALSE 41302
// begin _x := x ;
41282: LD_ADDR_VAR 0 6
41286: PUSH
41287: LD_VAR 0 4
41291: ST_TO_ADDR
// _y := y ;
41292: LD_ADDR_VAR 0 7
41296: PUSH
41297: LD_VAR 0 5
41301: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41302: LD_ADDR_VAR 0 3
41306: PUSH
41307: LD_INT 1
41309: PPUSH
41310: LD_VAR 0 14
41314: PPUSH
41315: CALL_OW 12
41319: ST_TO_ADDR
// case i of 1 :
41320: LD_VAR 0 3
41324: PUSH
41325: LD_INT 1
41327: DOUBLE
41328: EQUAL
41329: IFTRUE 41333
41331: GO 41350
41333: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41334: LD_VAR 0 1
41338: PPUSH
41339: LD_VAR 0 10
41343: PPUSH
41344: CALL_OW 115
41348: GO 41411
41350: LD_INT 2
41352: DOUBLE
41353: EQUAL
41354: IFTRUE 41358
41356: GO 41380
41358: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41359: LD_VAR 0 1
41363: PPUSH
41364: LD_VAR 0 6
41368: PPUSH
41369: LD_VAR 0 7
41373: PPUSH
41374: CALL_OW 153
41378: GO 41411
41380: LD_INT 3
41382: DOUBLE
41383: EQUAL
41384: IFTRUE 41388
41386: GO 41410
41388: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41389: LD_VAR 0 1
41393: PPUSH
41394: LD_VAR 0 6
41398: PPUSH
41399: LD_VAR 0 7
41403: PPUSH
41404: CALL_OW 154
41408: GO 41411
41410: POP
// end ;
41411: LD_VAR 0 2
41415: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41416: LD_INT 0
41418: PPUSH
41419: PPUSH
41420: PPUSH
41421: PPUSH
41422: PPUSH
41423: PPUSH
// if not unit or not building then
41424: LD_VAR 0 1
41428: NOT
41429: PUSH
41430: LD_VAR 0 2
41434: NOT
41435: OR
41436: IFFALSE 41440
// exit ;
41438: GO 41598
// x := GetX ( building ) ;
41440: LD_ADDR_VAR 0 5
41444: PUSH
41445: LD_VAR 0 2
41449: PPUSH
41450: CALL_OW 250
41454: ST_TO_ADDR
// y := GetY ( building ) ;
41455: LD_ADDR_VAR 0 6
41459: PUSH
41460: LD_VAR 0 2
41464: PPUSH
41465: CALL_OW 251
41469: ST_TO_ADDR
// for i = 0 to 5 do
41470: LD_ADDR_VAR 0 4
41474: PUSH
41475: DOUBLE
41476: LD_INT 0
41478: DEC
41479: ST_TO_ADDR
41480: LD_INT 5
41482: PUSH
41483: FOR_TO
41484: IFFALSE 41596
// begin _x := ShiftX ( x , i , 3 ) ;
41486: LD_ADDR_VAR 0 7
41490: PUSH
41491: LD_VAR 0 5
41495: PPUSH
41496: LD_VAR 0 4
41500: PPUSH
41501: LD_INT 3
41503: PPUSH
41504: CALL_OW 272
41508: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41509: LD_ADDR_VAR 0 8
41513: PUSH
41514: LD_VAR 0 6
41518: PPUSH
41519: LD_VAR 0 4
41523: PPUSH
41524: LD_INT 3
41526: PPUSH
41527: CALL_OW 273
41531: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41532: LD_VAR 0 7
41536: PPUSH
41537: LD_VAR 0 8
41541: PPUSH
41542: CALL_OW 488
41546: NOT
41547: IFFALSE 41551
// continue ;
41549: GO 41483
// if HexInfo ( _x , _y ) = 0 then
41551: LD_VAR 0 7
41555: PPUSH
41556: LD_VAR 0 8
41560: PPUSH
41561: CALL_OW 428
41565: PUSH
41566: LD_INT 0
41568: EQUAL
41569: IFFALSE 41594
// begin ComMoveXY ( unit , _x , _y ) ;
41571: LD_VAR 0 1
41575: PPUSH
41576: LD_VAR 0 7
41580: PPUSH
41581: LD_VAR 0 8
41585: PPUSH
41586: CALL_OW 111
// exit ;
41590: POP
41591: POP
41592: GO 41598
// end ; end ;
41594: GO 41483
41596: POP
41597: POP
// end ;
41598: LD_VAR 0 3
41602: RET
// export function ScanBase ( side , base_area ) ; begin
41603: LD_INT 0
41605: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41606: LD_ADDR_VAR 0 3
41610: PUSH
41611: LD_VAR 0 2
41615: PPUSH
41616: LD_INT 81
41618: PUSH
41619: LD_VAR 0 1
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PPUSH
41628: CALL_OW 70
41632: ST_TO_ADDR
// end ;
41633: LD_VAR 0 3
41637: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41638: LD_INT 0
41640: PPUSH
41641: PPUSH
41642: PPUSH
41643: PPUSH
// result := false ;
41644: LD_ADDR_VAR 0 2
41648: PUSH
41649: LD_INT 0
41651: ST_TO_ADDR
// side := GetSide ( unit ) ;
41652: LD_ADDR_VAR 0 3
41656: PUSH
41657: LD_VAR 0 1
41661: PPUSH
41662: CALL_OW 255
41666: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41667: LD_ADDR_VAR 0 4
41671: PUSH
41672: LD_VAR 0 1
41676: PPUSH
41677: CALL_OW 248
41681: ST_TO_ADDR
// case nat of 1 :
41682: LD_VAR 0 4
41686: PUSH
41687: LD_INT 1
41689: DOUBLE
41690: EQUAL
41691: IFTRUE 41695
41693: GO 41706
41695: POP
// tech := tech_lassight ; 2 :
41696: LD_ADDR_VAR 0 5
41700: PUSH
41701: LD_INT 12
41703: ST_TO_ADDR
41704: GO 41745
41706: LD_INT 2
41708: DOUBLE
41709: EQUAL
41710: IFTRUE 41714
41712: GO 41725
41714: POP
// tech := tech_mortar ; 3 :
41715: LD_ADDR_VAR 0 5
41719: PUSH
41720: LD_INT 41
41722: ST_TO_ADDR
41723: GO 41745
41725: LD_INT 3
41727: DOUBLE
41728: EQUAL
41729: IFTRUE 41733
41731: GO 41744
41733: POP
// tech := tech_bazooka ; end ;
41734: LD_ADDR_VAR 0 5
41738: PUSH
41739: LD_INT 44
41741: ST_TO_ADDR
41742: GO 41745
41744: POP
// if Researched ( side , tech ) then
41745: LD_VAR 0 3
41749: PPUSH
41750: LD_VAR 0 5
41754: PPUSH
41755: CALL_OW 325
41759: IFFALSE 41786
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41761: LD_ADDR_VAR 0 2
41765: PUSH
41766: LD_INT 5
41768: PUSH
41769: LD_INT 8
41771: PUSH
41772: LD_INT 9
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: LIST
41779: PUSH
41780: LD_VAR 0 4
41784: ARRAY
41785: ST_TO_ADDR
// end ;
41786: LD_VAR 0 2
41790: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41791: LD_INT 0
41793: PPUSH
41794: PPUSH
41795: PPUSH
// if not mines then
41796: LD_VAR 0 2
41800: NOT
41801: IFFALSE 41805
// exit ;
41803: GO 41949
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41805: LD_ADDR_VAR 0 5
41809: PUSH
41810: LD_INT 81
41812: PUSH
41813: LD_VAR 0 1
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 3
41824: PUSH
41825: LD_INT 21
41827: PUSH
41828: LD_INT 3
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PPUSH
41843: CALL_OW 69
41847: ST_TO_ADDR
// for i in mines do
41848: LD_ADDR_VAR 0 4
41852: PUSH
41853: LD_VAR 0 2
41857: PUSH
41858: FOR_IN
41859: IFFALSE 41947
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41861: LD_VAR 0 4
41865: PUSH
41866: LD_INT 1
41868: ARRAY
41869: PPUSH
41870: LD_VAR 0 4
41874: PUSH
41875: LD_INT 2
41877: ARRAY
41878: PPUSH
41879: CALL_OW 458
41883: NOT
41884: IFFALSE 41888
// continue ;
41886: GO 41858
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41888: LD_VAR 0 4
41892: PUSH
41893: LD_INT 1
41895: ARRAY
41896: PPUSH
41897: LD_VAR 0 4
41901: PUSH
41902: LD_INT 2
41904: ARRAY
41905: PPUSH
41906: CALL_OW 428
41910: PUSH
41911: LD_VAR 0 5
41915: IN
41916: IFFALSE 41945
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41918: LD_VAR 0 4
41922: PUSH
41923: LD_INT 1
41925: ARRAY
41926: PPUSH
41927: LD_VAR 0 4
41931: PUSH
41932: LD_INT 2
41934: ARRAY
41935: PPUSH
41936: LD_VAR 0 1
41940: PPUSH
41941: CALL_OW 456
// end ;
41945: GO 41858
41947: POP
41948: POP
// end ;
41949: LD_VAR 0 3
41953: RET
// export function Count ( array ) ; var i ; begin
41954: LD_INT 0
41956: PPUSH
41957: PPUSH
// result := 0 ;
41958: LD_ADDR_VAR 0 2
41962: PUSH
41963: LD_INT 0
41965: ST_TO_ADDR
// for i in array do
41966: LD_ADDR_VAR 0 3
41970: PUSH
41971: LD_VAR 0 1
41975: PUSH
41976: FOR_IN
41977: IFFALSE 42001
// if i then
41979: LD_VAR 0 3
41983: IFFALSE 41999
// result := result + 1 ;
41985: LD_ADDR_VAR 0 2
41989: PUSH
41990: LD_VAR 0 2
41994: PUSH
41995: LD_INT 1
41997: PLUS
41998: ST_TO_ADDR
41999: GO 41976
42001: POP
42002: POP
// end ;
42003: LD_VAR 0 2
42007: RET
// export function IsEmpty ( building ) ; begin
42008: LD_INT 0
42010: PPUSH
// if not building then
42011: LD_VAR 0 1
42015: NOT
42016: IFFALSE 42020
// exit ;
42018: GO 42063
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42020: LD_ADDR_VAR 0 2
42024: PUSH
42025: LD_VAR 0 1
42029: PUSH
42030: LD_INT 22
42032: PUSH
42033: LD_VAR 0 1
42037: PPUSH
42038: CALL_OW 255
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 58
42049: PUSH
42050: EMPTY
42051: LIST
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PPUSH
42057: CALL_OW 69
42061: IN
42062: ST_TO_ADDR
// end ;
42063: LD_VAR 0 2
42067: RET
// export function IsNotFull ( building ) ; var places ; begin
42068: LD_INT 0
42070: PPUSH
42071: PPUSH
// if not building then
42072: LD_VAR 0 1
42076: NOT
42077: IFFALSE 42081
// exit ;
42079: GO 42252
// result := false ;
42081: LD_ADDR_VAR 0 2
42085: PUSH
42086: LD_INT 0
42088: ST_TO_ADDR
// places := 0 ;
42089: LD_ADDR_VAR 0 3
42093: PUSH
42094: LD_INT 0
42096: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
42097: LD_VAR 0 1
42101: PPUSH
42102: CALL_OW 266
42106: PUSH
42107: LD_INT 0
42109: DOUBLE
42110: EQUAL
42111: IFTRUE 42169
42113: LD_INT 1
42115: DOUBLE
42116: EQUAL
42117: IFTRUE 42169
42119: LD_INT 6
42121: DOUBLE
42122: EQUAL
42123: IFTRUE 42169
42125: LD_INT 7
42127: DOUBLE
42128: EQUAL
42129: IFTRUE 42169
42131: LD_INT 8
42133: DOUBLE
42134: EQUAL
42135: IFTRUE 42169
42137: LD_INT 4
42139: DOUBLE
42140: EQUAL
42141: IFTRUE 42169
42143: LD_INT 5
42145: DOUBLE
42146: EQUAL
42147: IFTRUE 42169
42149: LD_INT 2
42151: DOUBLE
42152: EQUAL
42153: IFTRUE 42169
42155: LD_INT 3
42157: DOUBLE
42158: EQUAL
42159: IFTRUE 42169
42161: LD_INT 35
42163: DOUBLE
42164: EQUAL
42165: IFTRUE 42169
42167: GO 42180
42169: POP
// places := 6 ; b_bunker , b_breastwork :
42170: LD_ADDR_VAR 0 3
42174: PUSH
42175: LD_INT 6
42177: ST_TO_ADDR
42178: GO 42225
42180: LD_INT 32
42182: DOUBLE
42183: EQUAL
42184: IFTRUE 42194
42186: LD_INT 31
42188: DOUBLE
42189: EQUAL
42190: IFTRUE 42194
42192: GO 42205
42194: POP
// places := 1 ; b_control_tower :
42195: LD_ADDR_VAR 0 3
42199: PUSH
42200: LD_INT 1
42202: ST_TO_ADDR
42203: GO 42225
42205: LD_INT 36
42207: DOUBLE
42208: EQUAL
42209: IFTRUE 42213
42211: GO 42224
42213: POP
// places := 3 ; end ;
42214: LD_ADDR_VAR 0 3
42218: PUSH
42219: LD_INT 3
42221: ST_TO_ADDR
42222: GO 42225
42224: POP
// if places then
42225: LD_VAR 0 3
42229: IFFALSE 42252
// result := UnitsInside ( building ) < places ;
42231: LD_ADDR_VAR 0 2
42235: PUSH
42236: LD_VAR 0 1
42240: PPUSH
42241: CALL_OW 313
42245: PUSH
42246: LD_VAR 0 3
42250: LESS
42251: ST_TO_ADDR
// end ;
42252: LD_VAR 0 2
42256: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42257: LD_INT 0
42259: PPUSH
42260: PPUSH
42261: PPUSH
42262: PPUSH
// tmp := [ ] ;
42263: LD_ADDR_VAR 0 3
42267: PUSH
42268: EMPTY
42269: ST_TO_ADDR
// list := [ ] ;
42270: LD_ADDR_VAR 0 5
42274: PUSH
42275: EMPTY
42276: ST_TO_ADDR
// for i = 16 to 25 do
42277: LD_ADDR_VAR 0 4
42281: PUSH
42282: DOUBLE
42283: LD_INT 16
42285: DEC
42286: ST_TO_ADDR
42287: LD_INT 25
42289: PUSH
42290: FOR_TO
42291: IFFALSE 42364
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42293: LD_ADDR_VAR 0 3
42297: PUSH
42298: LD_VAR 0 3
42302: PUSH
42303: LD_INT 22
42305: PUSH
42306: LD_VAR 0 1
42310: PPUSH
42311: CALL_OW 255
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 91
42322: PUSH
42323: LD_VAR 0 1
42327: PUSH
42328: LD_INT 6
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 30
42338: PUSH
42339: LD_VAR 0 4
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: LIST
42352: PUSH
42353: EMPTY
42354: LIST
42355: PPUSH
42356: CALL_OW 69
42360: ADD
42361: ST_TO_ADDR
42362: GO 42290
42364: POP
42365: POP
// for i = 1 to tmp do
42366: LD_ADDR_VAR 0 4
42370: PUSH
42371: DOUBLE
42372: LD_INT 1
42374: DEC
42375: ST_TO_ADDR
42376: LD_VAR 0 3
42380: PUSH
42381: FOR_TO
42382: IFFALSE 42470
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42384: LD_ADDR_VAR 0 5
42388: PUSH
42389: LD_VAR 0 5
42393: PUSH
42394: LD_VAR 0 3
42398: PUSH
42399: LD_VAR 0 4
42403: ARRAY
42404: PPUSH
42405: CALL_OW 266
42409: PUSH
42410: LD_VAR 0 3
42414: PUSH
42415: LD_VAR 0 4
42419: ARRAY
42420: PPUSH
42421: CALL_OW 250
42425: PUSH
42426: LD_VAR 0 3
42430: PUSH
42431: LD_VAR 0 4
42435: ARRAY
42436: PPUSH
42437: CALL_OW 251
42441: PUSH
42442: LD_VAR 0 3
42446: PUSH
42447: LD_VAR 0 4
42451: ARRAY
42452: PPUSH
42453: CALL_OW 254
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: PUSH
42464: EMPTY
42465: LIST
42466: ADD
42467: ST_TO_ADDR
42468: GO 42381
42470: POP
42471: POP
// result := list ;
42472: LD_ADDR_VAR 0 2
42476: PUSH
42477: LD_VAR 0 5
42481: ST_TO_ADDR
// end ;
42482: LD_VAR 0 2
42486: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42487: LD_INT 0
42489: PPUSH
42490: PPUSH
42491: PPUSH
42492: PPUSH
42493: PPUSH
42494: PPUSH
42495: PPUSH
// if not factory then
42496: LD_VAR 0 1
42500: NOT
42501: IFFALSE 42505
// exit ;
42503: GO 43098
// if control = control_apeman then
42505: LD_VAR 0 4
42509: PUSH
42510: LD_INT 5
42512: EQUAL
42513: IFFALSE 42622
// begin tmp := UnitsInside ( factory ) ;
42515: LD_ADDR_VAR 0 8
42519: PUSH
42520: LD_VAR 0 1
42524: PPUSH
42525: CALL_OW 313
42529: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42530: LD_VAR 0 8
42534: PPUSH
42535: LD_INT 25
42537: PUSH
42538: LD_INT 12
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PPUSH
42545: CALL_OW 72
42549: NOT
42550: IFFALSE 42560
// control := control_manual ;
42552: LD_ADDR_VAR 0 4
42556: PUSH
42557: LD_INT 1
42559: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42560: LD_ADDR_VAR 0 8
42564: PUSH
42565: LD_VAR 0 1
42569: PPUSH
42570: CALL 42257 0 1
42574: ST_TO_ADDR
// if tmp then
42575: LD_VAR 0 8
42579: IFFALSE 42622
// begin for i in tmp do
42581: LD_ADDR_VAR 0 7
42585: PUSH
42586: LD_VAR 0 8
42590: PUSH
42591: FOR_IN
42592: IFFALSE 42620
// if i [ 1 ] = b_ext_radio then
42594: LD_VAR 0 7
42598: PUSH
42599: LD_INT 1
42601: ARRAY
42602: PUSH
42603: LD_INT 22
42605: EQUAL
42606: IFFALSE 42618
// begin control := control_remote ;
42608: LD_ADDR_VAR 0 4
42612: PUSH
42613: LD_INT 2
42615: ST_TO_ADDR
// break ;
42616: GO 42620
// end ;
42618: GO 42591
42620: POP
42621: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42622: LD_VAR 0 1
42626: PPUSH
42627: LD_VAR 0 2
42631: PPUSH
42632: LD_VAR 0 3
42636: PPUSH
42637: LD_VAR 0 4
42641: PPUSH
42642: LD_VAR 0 5
42646: PPUSH
42647: CALL_OW 448
42651: IFFALSE 42686
// begin result := [ chassis , engine , control , weapon ] ;
42653: LD_ADDR_VAR 0 6
42657: PUSH
42658: LD_VAR 0 2
42662: PUSH
42663: LD_VAR 0 3
42667: PUSH
42668: LD_VAR 0 4
42672: PUSH
42673: LD_VAR 0 5
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: ST_TO_ADDR
// exit ;
42684: GO 43098
// end ; _chassis := AvailableChassisList ( factory ) ;
42686: LD_ADDR_VAR 0 9
42690: PUSH
42691: LD_VAR 0 1
42695: PPUSH
42696: CALL_OW 475
42700: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42701: LD_ADDR_VAR 0 11
42705: PUSH
42706: LD_VAR 0 1
42710: PPUSH
42711: CALL_OW 476
42715: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42716: LD_ADDR_VAR 0 12
42720: PUSH
42721: LD_VAR 0 1
42725: PPUSH
42726: CALL_OW 477
42730: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42731: LD_ADDR_VAR 0 10
42735: PUSH
42736: LD_VAR 0 1
42740: PPUSH
42741: CALL_OW 478
42745: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42746: LD_VAR 0 9
42750: NOT
42751: PUSH
42752: LD_VAR 0 11
42756: NOT
42757: OR
42758: PUSH
42759: LD_VAR 0 12
42763: NOT
42764: OR
42765: PUSH
42766: LD_VAR 0 10
42770: NOT
42771: OR
42772: IFFALSE 42807
// begin result := [ chassis , engine , control , weapon ] ;
42774: LD_ADDR_VAR 0 6
42778: PUSH
42779: LD_VAR 0 2
42783: PUSH
42784: LD_VAR 0 3
42788: PUSH
42789: LD_VAR 0 4
42793: PUSH
42794: LD_VAR 0 5
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: ST_TO_ADDR
// exit ;
42805: GO 43098
// end ; if not chassis in _chassis then
42807: LD_VAR 0 2
42811: PUSH
42812: LD_VAR 0 9
42816: IN
42817: NOT
42818: IFFALSE 42844
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42820: LD_ADDR_VAR 0 2
42824: PUSH
42825: LD_VAR 0 9
42829: PUSH
42830: LD_INT 1
42832: PPUSH
42833: LD_VAR 0 9
42837: PPUSH
42838: CALL_OW 12
42842: ARRAY
42843: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42844: LD_VAR 0 2
42848: PPUSH
42849: LD_VAR 0 3
42853: PPUSH
42854: CALL 43103 0 2
42858: NOT
42859: IFFALSE 42918
// repeat engine := _engine [ 1 ] ;
42861: LD_ADDR_VAR 0 3
42865: PUSH
42866: LD_VAR 0 11
42870: PUSH
42871: LD_INT 1
42873: ARRAY
42874: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42875: LD_ADDR_VAR 0 11
42879: PUSH
42880: LD_VAR 0 11
42884: PPUSH
42885: LD_INT 1
42887: PPUSH
42888: CALL_OW 3
42892: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42893: LD_VAR 0 2
42897: PPUSH
42898: LD_VAR 0 3
42902: PPUSH
42903: CALL 43103 0 2
42907: PUSH
42908: LD_VAR 0 11
42912: PUSH
42913: EMPTY
42914: EQUAL
42915: OR
42916: IFFALSE 42861
// if not control in _control then
42918: LD_VAR 0 4
42922: PUSH
42923: LD_VAR 0 12
42927: IN
42928: NOT
42929: IFFALSE 42955
// control := _control [ rand ( 1 , _control ) ] ;
42931: LD_ADDR_VAR 0 4
42935: PUSH
42936: LD_VAR 0 12
42940: PUSH
42941: LD_INT 1
42943: PPUSH
42944: LD_VAR 0 12
42948: PPUSH
42949: CALL_OW 12
42953: ARRAY
42954: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42955: LD_VAR 0 2
42959: PPUSH
42960: LD_VAR 0 5
42964: PPUSH
42965: CALL 43323 0 2
42969: NOT
42970: IFFALSE 43029
// repeat weapon := _weapon [ 1 ] ;
42972: LD_ADDR_VAR 0 5
42976: PUSH
42977: LD_VAR 0 10
42981: PUSH
42982: LD_INT 1
42984: ARRAY
42985: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42986: LD_ADDR_VAR 0 10
42990: PUSH
42991: LD_VAR 0 10
42995: PPUSH
42996: LD_INT 1
42998: PPUSH
42999: CALL_OW 3
43003: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43004: LD_VAR 0 2
43008: PPUSH
43009: LD_VAR 0 5
43013: PPUSH
43014: CALL 43323 0 2
43018: PUSH
43019: LD_VAR 0 10
43023: PUSH
43024: EMPTY
43025: EQUAL
43026: OR
43027: IFFALSE 42972
// result := [ ] ;
43029: LD_ADDR_VAR 0 6
43033: PUSH
43034: EMPTY
43035: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43036: LD_VAR 0 1
43040: PPUSH
43041: LD_VAR 0 2
43045: PPUSH
43046: LD_VAR 0 3
43050: PPUSH
43051: LD_VAR 0 4
43055: PPUSH
43056: LD_VAR 0 5
43060: PPUSH
43061: CALL_OW 448
43065: IFFALSE 43098
// result := [ chassis , engine , control , weapon ] ;
43067: LD_ADDR_VAR 0 6
43071: PUSH
43072: LD_VAR 0 2
43076: PUSH
43077: LD_VAR 0 3
43081: PUSH
43082: LD_VAR 0 4
43086: PUSH
43087: LD_VAR 0 5
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: ST_TO_ADDR
// end ;
43098: LD_VAR 0 6
43102: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43103: LD_INT 0
43105: PPUSH
// if not chassis or not engine then
43106: LD_VAR 0 1
43110: NOT
43111: PUSH
43112: LD_VAR 0 2
43116: NOT
43117: OR
43118: IFFALSE 43122
// exit ;
43120: GO 43318
// case engine of engine_solar :
43122: LD_VAR 0 2
43126: PUSH
43127: LD_INT 2
43129: DOUBLE
43130: EQUAL
43131: IFTRUE 43135
43133: GO 43173
43135: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43136: LD_ADDR_VAR 0 3
43140: PUSH
43141: LD_INT 11
43143: PUSH
43144: LD_INT 12
43146: PUSH
43147: LD_INT 13
43149: PUSH
43150: LD_INT 14
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: LD_INT 3
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: ST_TO_ADDR
43171: GO 43302
43173: LD_INT 1
43175: DOUBLE
43176: EQUAL
43177: IFTRUE 43181
43179: GO 43243
43181: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43182: LD_ADDR_VAR 0 3
43186: PUSH
43187: LD_INT 11
43189: PUSH
43190: LD_INT 12
43192: PUSH
43193: LD_INT 13
43195: PUSH
43196: LD_INT 14
43198: PUSH
43199: LD_INT 1
43201: PUSH
43202: LD_INT 2
43204: PUSH
43205: LD_INT 3
43207: PUSH
43208: LD_INT 4
43210: PUSH
43211: LD_INT 5
43213: PUSH
43214: LD_INT 21
43216: PUSH
43217: LD_INT 23
43219: PUSH
43220: LD_INT 22
43222: PUSH
43223: LD_INT 24
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: ST_TO_ADDR
43241: GO 43302
43243: LD_INT 3
43245: DOUBLE
43246: EQUAL
43247: IFTRUE 43251
43249: GO 43301
43251: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43252: LD_ADDR_VAR 0 3
43256: PUSH
43257: LD_INT 13
43259: PUSH
43260: LD_INT 14
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: LD_INT 3
43268: PUSH
43269: LD_INT 4
43271: PUSH
43272: LD_INT 5
43274: PUSH
43275: LD_INT 21
43277: PUSH
43278: LD_INT 22
43280: PUSH
43281: LD_INT 23
43283: PUSH
43284: LD_INT 24
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: ST_TO_ADDR
43299: GO 43302
43301: POP
// result := ( chassis in result ) ;
43302: LD_ADDR_VAR 0 3
43306: PUSH
43307: LD_VAR 0 1
43311: PUSH
43312: LD_VAR 0 3
43316: IN
43317: ST_TO_ADDR
// end ;
43318: LD_VAR 0 3
43322: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43323: LD_INT 0
43325: PPUSH
// if not chassis or not weapon then
43326: LD_VAR 0 1
43330: NOT
43331: PUSH
43332: LD_VAR 0 2
43336: NOT
43337: OR
43338: IFFALSE 43342
// exit ;
43340: GO 44404
// case weapon of us_machine_gun :
43342: LD_VAR 0 2
43346: PUSH
43347: LD_INT 2
43349: DOUBLE
43350: EQUAL
43351: IFTRUE 43355
43353: GO 43385
43355: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43356: LD_ADDR_VAR 0 3
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: LD_INT 3
43369: PUSH
43370: LD_INT 4
43372: PUSH
43373: LD_INT 5
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: ST_TO_ADDR
43383: GO 44388
43385: LD_INT 3
43387: DOUBLE
43388: EQUAL
43389: IFTRUE 43393
43391: GO 43423
43393: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43394: LD_ADDR_VAR 0 3
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: LD_INT 2
43404: PUSH
43405: LD_INT 3
43407: PUSH
43408: LD_INT 4
43410: PUSH
43411: LD_INT 5
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: ST_TO_ADDR
43421: GO 44388
43423: LD_INT 11
43425: DOUBLE
43426: EQUAL
43427: IFTRUE 43431
43429: GO 43461
43431: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43432: LD_ADDR_VAR 0 3
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: LD_INT 2
43442: PUSH
43443: LD_INT 3
43445: PUSH
43446: LD_INT 4
43448: PUSH
43449: LD_INT 5
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: ST_TO_ADDR
43459: GO 44388
43461: LD_INT 4
43463: DOUBLE
43464: EQUAL
43465: IFTRUE 43469
43467: GO 43495
43469: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43470: LD_ADDR_VAR 0 3
43474: PUSH
43475: LD_INT 2
43477: PUSH
43478: LD_INT 3
43480: PUSH
43481: LD_INT 4
43483: PUSH
43484: LD_INT 5
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: ST_TO_ADDR
43493: GO 44388
43495: LD_INT 5
43497: DOUBLE
43498: EQUAL
43499: IFTRUE 43503
43501: GO 43529
43503: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43504: LD_ADDR_VAR 0 3
43508: PUSH
43509: LD_INT 2
43511: PUSH
43512: LD_INT 3
43514: PUSH
43515: LD_INT 4
43517: PUSH
43518: LD_INT 5
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: ST_TO_ADDR
43527: GO 44388
43529: LD_INT 9
43531: DOUBLE
43532: EQUAL
43533: IFTRUE 43537
43535: GO 43563
43537: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43538: LD_ADDR_VAR 0 3
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: LD_INT 3
43548: PUSH
43549: LD_INT 4
43551: PUSH
43552: LD_INT 5
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: ST_TO_ADDR
43561: GO 44388
43563: LD_INT 7
43565: DOUBLE
43566: EQUAL
43567: IFTRUE 43571
43569: GO 43597
43571: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43572: LD_ADDR_VAR 0 3
43576: PUSH
43577: LD_INT 2
43579: PUSH
43580: LD_INT 3
43582: PUSH
43583: LD_INT 4
43585: PUSH
43586: LD_INT 5
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: ST_TO_ADDR
43595: GO 44388
43597: LD_INT 12
43599: DOUBLE
43600: EQUAL
43601: IFTRUE 43605
43603: GO 43631
43605: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43606: LD_ADDR_VAR 0 3
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: LD_INT 3
43616: PUSH
43617: LD_INT 4
43619: PUSH
43620: LD_INT 5
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: ST_TO_ADDR
43629: GO 44388
43631: LD_INT 13
43633: DOUBLE
43634: EQUAL
43635: IFTRUE 43639
43637: GO 43665
43639: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43640: LD_ADDR_VAR 0 3
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: LD_INT 3
43650: PUSH
43651: LD_INT 4
43653: PUSH
43654: LD_INT 5
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: ST_TO_ADDR
43663: GO 44388
43665: LD_INT 14
43667: DOUBLE
43668: EQUAL
43669: IFTRUE 43673
43671: GO 43691
43673: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43674: LD_ADDR_VAR 0 3
43678: PUSH
43679: LD_INT 4
43681: PUSH
43682: LD_INT 5
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: ST_TO_ADDR
43689: GO 44388
43691: LD_INT 6
43693: DOUBLE
43694: EQUAL
43695: IFTRUE 43699
43697: GO 43717
43699: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43700: LD_ADDR_VAR 0 3
43704: PUSH
43705: LD_INT 4
43707: PUSH
43708: LD_INT 5
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: ST_TO_ADDR
43715: GO 44388
43717: LD_INT 10
43719: DOUBLE
43720: EQUAL
43721: IFTRUE 43725
43723: GO 43743
43725: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43726: LD_ADDR_VAR 0 3
43730: PUSH
43731: LD_INT 4
43733: PUSH
43734: LD_INT 5
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: ST_TO_ADDR
43741: GO 44388
43743: LD_INT 22
43745: DOUBLE
43746: EQUAL
43747: IFTRUE 43751
43749: GO 43777
43751: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43752: LD_ADDR_VAR 0 3
43756: PUSH
43757: LD_INT 11
43759: PUSH
43760: LD_INT 12
43762: PUSH
43763: LD_INT 13
43765: PUSH
43766: LD_INT 14
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: ST_TO_ADDR
43775: GO 44388
43777: LD_INT 23
43779: DOUBLE
43780: EQUAL
43781: IFTRUE 43785
43783: GO 43811
43785: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43786: LD_ADDR_VAR 0 3
43790: PUSH
43791: LD_INT 11
43793: PUSH
43794: LD_INT 12
43796: PUSH
43797: LD_INT 13
43799: PUSH
43800: LD_INT 14
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: ST_TO_ADDR
43809: GO 44388
43811: LD_INT 24
43813: DOUBLE
43814: EQUAL
43815: IFTRUE 43819
43817: GO 43845
43819: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43820: LD_ADDR_VAR 0 3
43824: PUSH
43825: LD_INT 11
43827: PUSH
43828: LD_INT 12
43830: PUSH
43831: LD_INT 13
43833: PUSH
43834: LD_INT 14
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: ST_TO_ADDR
43843: GO 44388
43845: LD_INT 30
43847: DOUBLE
43848: EQUAL
43849: IFTRUE 43853
43851: GO 43879
43853: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43854: LD_ADDR_VAR 0 3
43858: PUSH
43859: LD_INT 11
43861: PUSH
43862: LD_INT 12
43864: PUSH
43865: LD_INT 13
43867: PUSH
43868: LD_INT 14
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: ST_TO_ADDR
43877: GO 44388
43879: LD_INT 25
43881: DOUBLE
43882: EQUAL
43883: IFTRUE 43887
43885: GO 43905
43887: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43888: LD_ADDR_VAR 0 3
43892: PUSH
43893: LD_INT 13
43895: PUSH
43896: LD_INT 14
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: ST_TO_ADDR
43903: GO 44388
43905: LD_INT 27
43907: DOUBLE
43908: EQUAL
43909: IFTRUE 43913
43911: GO 43931
43913: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43914: LD_ADDR_VAR 0 3
43918: PUSH
43919: LD_INT 13
43921: PUSH
43922: LD_INT 14
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: ST_TO_ADDR
43929: GO 44388
43931: LD_EXP 55
43935: DOUBLE
43936: EQUAL
43937: IFTRUE 43941
43939: GO 43967
43941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43942: LD_ADDR_VAR 0 3
43946: PUSH
43947: LD_INT 11
43949: PUSH
43950: LD_INT 12
43952: PUSH
43953: LD_INT 13
43955: PUSH
43956: LD_INT 14
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: ST_TO_ADDR
43965: GO 44388
43967: LD_INT 28
43969: DOUBLE
43970: EQUAL
43971: IFTRUE 43975
43973: GO 43993
43975: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43976: LD_ADDR_VAR 0 3
43980: PUSH
43981: LD_INT 13
43983: PUSH
43984: LD_INT 14
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: ST_TO_ADDR
43991: GO 44388
43993: LD_INT 29
43995: DOUBLE
43996: EQUAL
43997: IFTRUE 44001
43999: GO 44019
44001: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44002: LD_ADDR_VAR 0 3
44006: PUSH
44007: LD_INT 13
44009: PUSH
44010: LD_INT 14
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: ST_TO_ADDR
44017: GO 44388
44019: LD_INT 31
44021: DOUBLE
44022: EQUAL
44023: IFTRUE 44027
44025: GO 44045
44027: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44028: LD_ADDR_VAR 0 3
44032: PUSH
44033: LD_INT 13
44035: PUSH
44036: LD_INT 14
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: ST_TO_ADDR
44043: GO 44388
44045: LD_INT 26
44047: DOUBLE
44048: EQUAL
44049: IFTRUE 44053
44051: GO 44071
44053: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44054: LD_ADDR_VAR 0 3
44058: PUSH
44059: LD_INT 13
44061: PUSH
44062: LD_INT 14
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: ST_TO_ADDR
44069: GO 44388
44071: LD_INT 42
44073: DOUBLE
44074: EQUAL
44075: IFTRUE 44079
44077: GO 44105
44079: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44080: LD_ADDR_VAR 0 3
44084: PUSH
44085: LD_INT 21
44087: PUSH
44088: LD_INT 22
44090: PUSH
44091: LD_INT 23
44093: PUSH
44094: LD_INT 24
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: ST_TO_ADDR
44103: GO 44388
44105: LD_INT 43
44107: DOUBLE
44108: EQUAL
44109: IFTRUE 44113
44111: GO 44139
44113: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44114: LD_ADDR_VAR 0 3
44118: PUSH
44119: LD_INT 21
44121: PUSH
44122: LD_INT 22
44124: PUSH
44125: LD_INT 23
44127: PUSH
44128: LD_INT 24
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: ST_TO_ADDR
44137: GO 44388
44139: LD_INT 44
44141: DOUBLE
44142: EQUAL
44143: IFTRUE 44147
44145: GO 44173
44147: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44148: LD_ADDR_VAR 0 3
44152: PUSH
44153: LD_INT 21
44155: PUSH
44156: LD_INT 22
44158: PUSH
44159: LD_INT 23
44161: PUSH
44162: LD_INT 24
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: ST_TO_ADDR
44171: GO 44388
44173: LD_INT 45
44175: DOUBLE
44176: EQUAL
44177: IFTRUE 44181
44179: GO 44207
44181: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44182: LD_ADDR_VAR 0 3
44186: PUSH
44187: LD_INT 21
44189: PUSH
44190: LD_INT 22
44192: PUSH
44193: LD_INT 23
44195: PUSH
44196: LD_INT 24
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: ST_TO_ADDR
44205: GO 44388
44207: LD_INT 49
44209: DOUBLE
44210: EQUAL
44211: IFTRUE 44215
44213: GO 44241
44215: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44216: LD_ADDR_VAR 0 3
44220: PUSH
44221: LD_INT 21
44223: PUSH
44224: LD_INT 22
44226: PUSH
44227: LD_INT 23
44229: PUSH
44230: LD_INT 24
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: ST_TO_ADDR
44239: GO 44388
44241: LD_INT 51
44243: DOUBLE
44244: EQUAL
44245: IFTRUE 44249
44247: GO 44275
44249: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44250: LD_ADDR_VAR 0 3
44254: PUSH
44255: LD_INT 21
44257: PUSH
44258: LD_INT 22
44260: PUSH
44261: LD_INT 23
44263: PUSH
44264: LD_INT 24
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: ST_TO_ADDR
44273: GO 44388
44275: LD_INT 52
44277: DOUBLE
44278: EQUAL
44279: IFTRUE 44283
44281: GO 44309
44283: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44284: LD_ADDR_VAR 0 3
44288: PUSH
44289: LD_INT 21
44291: PUSH
44292: LD_INT 22
44294: PUSH
44295: LD_INT 23
44297: PUSH
44298: LD_INT 24
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: ST_TO_ADDR
44307: GO 44388
44309: LD_INT 53
44311: DOUBLE
44312: EQUAL
44313: IFTRUE 44317
44315: GO 44335
44317: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44318: LD_ADDR_VAR 0 3
44322: PUSH
44323: LD_INT 23
44325: PUSH
44326: LD_INT 24
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: ST_TO_ADDR
44333: GO 44388
44335: LD_INT 46
44337: DOUBLE
44338: EQUAL
44339: IFTRUE 44343
44341: GO 44361
44343: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44344: LD_ADDR_VAR 0 3
44348: PUSH
44349: LD_INT 23
44351: PUSH
44352: LD_INT 24
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: ST_TO_ADDR
44359: GO 44388
44361: LD_INT 47
44363: DOUBLE
44364: EQUAL
44365: IFTRUE 44369
44367: GO 44387
44369: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44370: LD_ADDR_VAR 0 3
44374: PUSH
44375: LD_INT 23
44377: PUSH
44378: LD_INT 24
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: ST_TO_ADDR
44385: GO 44388
44387: POP
// result := ( chassis in result ) ;
44388: LD_ADDR_VAR 0 3
44392: PUSH
44393: LD_VAR 0 1
44397: PUSH
44398: LD_VAR 0 3
44402: IN
44403: ST_TO_ADDR
// end ;
44404: LD_VAR 0 3
44408: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44409: LD_INT 0
44411: PPUSH
44412: PPUSH
44413: PPUSH
44414: PPUSH
44415: PPUSH
44416: PPUSH
44417: PPUSH
// result := array ;
44418: LD_ADDR_VAR 0 5
44422: PUSH
44423: LD_VAR 0 1
44427: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44428: LD_VAR 0 1
44432: NOT
44433: PUSH
44434: LD_VAR 0 2
44438: NOT
44439: OR
44440: PUSH
44441: LD_VAR 0 3
44445: NOT
44446: OR
44447: PUSH
44448: LD_VAR 0 2
44452: PUSH
44453: LD_VAR 0 1
44457: GREATER
44458: OR
44459: PUSH
44460: LD_VAR 0 3
44464: PUSH
44465: LD_VAR 0 1
44469: GREATER
44470: OR
44471: IFFALSE 44475
// exit ;
44473: GO 44771
// if direction then
44475: LD_VAR 0 4
44479: IFFALSE 44543
// begin d := 1 ;
44481: LD_ADDR_VAR 0 9
44485: PUSH
44486: LD_INT 1
44488: ST_TO_ADDR
// if i_from > i_to then
44489: LD_VAR 0 2
44493: PUSH
44494: LD_VAR 0 3
44498: GREATER
44499: IFFALSE 44525
// length := ( array - i_from ) + i_to else
44501: LD_ADDR_VAR 0 11
44505: PUSH
44506: LD_VAR 0 1
44510: PUSH
44511: LD_VAR 0 2
44515: MINUS
44516: PUSH
44517: LD_VAR 0 3
44521: PLUS
44522: ST_TO_ADDR
44523: GO 44541
// length := i_to - i_from ;
44525: LD_ADDR_VAR 0 11
44529: PUSH
44530: LD_VAR 0 3
44534: PUSH
44535: LD_VAR 0 2
44539: MINUS
44540: ST_TO_ADDR
// end else
44541: GO 44604
// begin d := - 1 ;
44543: LD_ADDR_VAR 0 9
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: ST_TO_ADDR
// if i_from > i_to then
44552: LD_VAR 0 2
44556: PUSH
44557: LD_VAR 0 3
44561: GREATER
44562: IFFALSE 44582
// length := i_from - i_to else
44564: LD_ADDR_VAR 0 11
44568: PUSH
44569: LD_VAR 0 2
44573: PUSH
44574: LD_VAR 0 3
44578: MINUS
44579: ST_TO_ADDR
44580: GO 44604
// length := ( array - i_to ) + i_from ;
44582: LD_ADDR_VAR 0 11
44586: PUSH
44587: LD_VAR 0 1
44591: PUSH
44592: LD_VAR 0 3
44596: MINUS
44597: PUSH
44598: LD_VAR 0 2
44602: PLUS
44603: ST_TO_ADDR
// end ; if not length then
44604: LD_VAR 0 11
44608: NOT
44609: IFFALSE 44613
// exit ;
44611: GO 44771
// tmp := array ;
44613: LD_ADDR_VAR 0 10
44617: PUSH
44618: LD_VAR 0 1
44622: ST_TO_ADDR
// for i = 1 to length do
44623: LD_ADDR_VAR 0 6
44627: PUSH
44628: DOUBLE
44629: LD_INT 1
44631: DEC
44632: ST_TO_ADDR
44633: LD_VAR 0 11
44637: PUSH
44638: FOR_TO
44639: IFFALSE 44759
// begin for j = 1 to array do
44641: LD_ADDR_VAR 0 7
44645: PUSH
44646: DOUBLE
44647: LD_INT 1
44649: DEC
44650: ST_TO_ADDR
44651: LD_VAR 0 1
44655: PUSH
44656: FOR_TO
44657: IFFALSE 44745
// begin k := j + d ;
44659: LD_ADDR_VAR 0 8
44663: PUSH
44664: LD_VAR 0 7
44668: PUSH
44669: LD_VAR 0 9
44673: PLUS
44674: ST_TO_ADDR
// if k > array then
44675: LD_VAR 0 8
44679: PUSH
44680: LD_VAR 0 1
44684: GREATER
44685: IFFALSE 44695
// k := 1 ;
44687: LD_ADDR_VAR 0 8
44691: PUSH
44692: LD_INT 1
44694: ST_TO_ADDR
// if not k then
44695: LD_VAR 0 8
44699: NOT
44700: IFFALSE 44712
// k := array ;
44702: LD_ADDR_VAR 0 8
44706: PUSH
44707: LD_VAR 0 1
44711: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44712: LD_ADDR_VAR 0 10
44716: PUSH
44717: LD_VAR 0 10
44721: PPUSH
44722: LD_VAR 0 8
44726: PPUSH
44727: LD_VAR 0 1
44731: PUSH
44732: LD_VAR 0 7
44736: ARRAY
44737: PPUSH
44738: CALL_OW 1
44742: ST_TO_ADDR
// end ;
44743: GO 44656
44745: POP
44746: POP
// array := tmp ;
44747: LD_ADDR_VAR 0 1
44751: PUSH
44752: LD_VAR 0 10
44756: ST_TO_ADDR
// end ;
44757: GO 44638
44759: POP
44760: POP
// result := array ;
44761: LD_ADDR_VAR 0 5
44765: PUSH
44766: LD_VAR 0 1
44770: ST_TO_ADDR
// end ;
44771: LD_VAR 0 5
44775: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44776: LD_INT 0
44778: PPUSH
44779: PPUSH
// result := 0 ;
44780: LD_ADDR_VAR 0 3
44784: PUSH
44785: LD_INT 0
44787: ST_TO_ADDR
// if not array or not value in array then
44788: LD_VAR 0 1
44792: NOT
44793: PUSH
44794: LD_VAR 0 2
44798: PUSH
44799: LD_VAR 0 1
44803: IN
44804: NOT
44805: OR
44806: IFFALSE 44810
// exit ;
44808: GO 44864
// for i = 1 to array do
44810: LD_ADDR_VAR 0 4
44814: PUSH
44815: DOUBLE
44816: LD_INT 1
44818: DEC
44819: ST_TO_ADDR
44820: LD_VAR 0 1
44824: PUSH
44825: FOR_TO
44826: IFFALSE 44862
// if value = array [ i ] then
44828: LD_VAR 0 2
44832: PUSH
44833: LD_VAR 0 1
44837: PUSH
44838: LD_VAR 0 4
44842: ARRAY
44843: EQUAL
44844: IFFALSE 44860
// begin result := i ;
44846: LD_ADDR_VAR 0 3
44850: PUSH
44851: LD_VAR 0 4
44855: ST_TO_ADDR
// exit ;
44856: POP
44857: POP
44858: GO 44864
// end ;
44860: GO 44825
44862: POP
44863: POP
// end ;
44864: LD_VAR 0 3
44868: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44869: LD_INT 0
44871: PPUSH
// vc_chassis := chassis ;
44872: LD_ADDR_OWVAR 37
44876: PUSH
44877: LD_VAR 0 1
44881: ST_TO_ADDR
// vc_engine := engine ;
44882: LD_ADDR_OWVAR 39
44886: PUSH
44887: LD_VAR 0 2
44891: ST_TO_ADDR
// vc_control := control ;
44892: LD_ADDR_OWVAR 38
44896: PUSH
44897: LD_VAR 0 3
44901: ST_TO_ADDR
// vc_weapon := weapon ;
44902: LD_ADDR_OWVAR 40
44906: PUSH
44907: LD_VAR 0 4
44911: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44912: LD_ADDR_OWVAR 41
44916: PUSH
44917: LD_VAR 0 5
44921: ST_TO_ADDR
// end ;
44922: LD_VAR 0 6
44926: RET
// export function WantPlant ( unit ) ; var task ; begin
44927: LD_INT 0
44929: PPUSH
44930: PPUSH
// result := false ;
44931: LD_ADDR_VAR 0 2
44935: PUSH
44936: LD_INT 0
44938: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44939: LD_ADDR_VAR 0 3
44943: PUSH
44944: LD_VAR 0 1
44948: PPUSH
44949: CALL_OW 437
44953: ST_TO_ADDR
// if task then
44954: LD_VAR 0 3
44958: IFFALSE 44986
// if task [ 1 ] [ 1 ] = p then
44960: LD_VAR 0 3
44964: PUSH
44965: LD_INT 1
44967: ARRAY
44968: PUSH
44969: LD_INT 1
44971: ARRAY
44972: PUSH
44973: LD_STRING p
44975: EQUAL
44976: IFFALSE 44986
// result := true ;
44978: LD_ADDR_VAR 0 2
44982: PUSH
44983: LD_INT 1
44985: ST_TO_ADDR
// end ;
44986: LD_VAR 0 2
44990: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44991: LD_INT 0
44993: PPUSH
44994: PPUSH
44995: PPUSH
44996: PPUSH
// if pos < 1 then
44997: LD_VAR 0 2
45001: PUSH
45002: LD_INT 1
45004: LESS
45005: IFFALSE 45009
// exit ;
45007: GO 45312
// if pos = 1 then
45009: LD_VAR 0 2
45013: PUSH
45014: LD_INT 1
45016: EQUAL
45017: IFFALSE 45050
// result := Replace ( arr , pos [ 1 ] , value ) else
45019: LD_ADDR_VAR 0 4
45023: PUSH
45024: LD_VAR 0 1
45028: PPUSH
45029: LD_VAR 0 2
45033: PUSH
45034: LD_INT 1
45036: ARRAY
45037: PPUSH
45038: LD_VAR 0 3
45042: PPUSH
45043: CALL_OW 1
45047: ST_TO_ADDR
45048: GO 45312
// begin tmp := arr ;
45050: LD_ADDR_VAR 0 6
45054: PUSH
45055: LD_VAR 0 1
45059: ST_TO_ADDR
// s_arr := [ tmp ] ;
45060: LD_ADDR_VAR 0 7
45064: PUSH
45065: LD_VAR 0 6
45069: PUSH
45070: EMPTY
45071: LIST
45072: ST_TO_ADDR
// for i = 1 to pos - 1 do
45073: LD_ADDR_VAR 0 5
45077: PUSH
45078: DOUBLE
45079: LD_INT 1
45081: DEC
45082: ST_TO_ADDR
45083: LD_VAR 0 2
45087: PUSH
45088: LD_INT 1
45090: MINUS
45091: PUSH
45092: FOR_TO
45093: IFFALSE 45138
// begin tmp := tmp [ pos [ i ] ] ;
45095: LD_ADDR_VAR 0 6
45099: PUSH
45100: LD_VAR 0 6
45104: PUSH
45105: LD_VAR 0 2
45109: PUSH
45110: LD_VAR 0 5
45114: ARRAY
45115: ARRAY
45116: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45117: LD_ADDR_VAR 0 7
45121: PUSH
45122: LD_VAR 0 7
45126: PUSH
45127: LD_VAR 0 6
45131: PUSH
45132: EMPTY
45133: LIST
45134: ADD
45135: ST_TO_ADDR
// end ;
45136: GO 45092
45138: POP
45139: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45140: LD_ADDR_VAR 0 6
45144: PUSH
45145: LD_VAR 0 6
45149: PPUSH
45150: LD_VAR 0 2
45154: PUSH
45155: LD_VAR 0 2
45159: ARRAY
45160: PPUSH
45161: LD_VAR 0 3
45165: PPUSH
45166: CALL_OW 1
45170: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45171: LD_ADDR_VAR 0 7
45175: PUSH
45176: LD_VAR 0 7
45180: PPUSH
45181: LD_VAR 0 7
45185: PPUSH
45186: LD_VAR 0 6
45190: PPUSH
45191: CALL_OW 1
45195: ST_TO_ADDR
// for i = s_arr downto 2 do
45196: LD_ADDR_VAR 0 5
45200: PUSH
45201: DOUBLE
45202: LD_VAR 0 7
45206: INC
45207: ST_TO_ADDR
45208: LD_INT 2
45210: PUSH
45211: FOR_DOWNTO
45212: IFFALSE 45296
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45214: LD_ADDR_VAR 0 6
45218: PUSH
45219: LD_VAR 0 7
45223: PUSH
45224: LD_VAR 0 5
45228: PUSH
45229: LD_INT 1
45231: MINUS
45232: ARRAY
45233: PPUSH
45234: LD_VAR 0 2
45238: PUSH
45239: LD_VAR 0 5
45243: PUSH
45244: LD_INT 1
45246: MINUS
45247: ARRAY
45248: PPUSH
45249: LD_VAR 0 7
45253: PUSH
45254: LD_VAR 0 5
45258: ARRAY
45259: PPUSH
45260: CALL_OW 1
45264: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45265: LD_ADDR_VAR 0 7
45269: PUSH
45270: LD_VAR 0 7
45274: PPUSH
45275: LD_VAR 0 5
45279: PUSH
45280: LD_INT 1
45282: MINUS
45283: PPUSH
45284: LD_VAR 0 6
45288: PPUSH
45289: CALL_OW 1
45293: ST_TO_ADDR
// end ;
45294: GO 45211
45296: POP
45297: POP
// result := s_arr [ 1 ] ;
45298: LD_ADDR_VAR 0 4
45302: PUSH
45303: LD_VAR 0 7
45307: PUSH
45308: LD_INT 1
45310: ARRAY
45311: ST_TO_ADDR
// end ; end ;
45312: LD_VAR 0 4
45316: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45317: LD_INT 0
45319: PPUSH
45320: PPUSH
// if not list then
45321: LD_VAR 0 1
45325: NOT
45326: IFFALSE 45330
// exit ;
45328: GO 45421
// i := list [ pos1 ] ;
45330: LD_ADDR_VAR 0 5
45334: PUSH
45335: LD_VAR 0 1
45339: PUSH
45340: LD_VAR 0 2
45344: ARRAY
45345: ST_TO_ADDR
// if not i then
45346: LD_VAR 0 5
45350: NOT
45351: IFFALSE 45355
// exit ;
45353: GO 45421
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45355: LD_ADDR_VAR 0 1
45359: PUSH
45360: LD_VAR 0 1
45364: PPUSH
45365: LD_VAR 0 2
45369: PPUSH
45370: LD_VAR 0 1
45374: PUSH
45375: LD_VAR 0 3
45379: ARRAY
45380: PPUSH
45381: CALL_OW 1
45385: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45386: LD_ADDR_VAR 0 1
45390: PUSH
45391: LD_VAR 0 1
45395: PPUSH
45396: LD_VAR 0 3
45400: PPUSH
45401: LD_VAR 0 5
45405: PPUSH
45406: CALL_OW 1
45410: ST_TO_ADDR
// result := list ;
45411: LD_ADDR_VAR 0 4
45415: PUSH
45416: LD_VAR 0 1
45420: ST_TO_ADDR
// end ;
45421: LD_VAR 0 4
45425: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45426: LD_INT 0
45428: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45429: LD_ADDR_VAR 0 5
45433: PUSH
45434: LD_VAR 0 1
45438: PPUSH
45439: CALL_OW 250
45443: PPUSH
45444: LD_VAR 0 1
45448: PPUSH
45449: CALL_OW 251
45453: PPUSH
45454: LD_VAR 0 2
45458: PPUSH
45459: LD_VAR 0 3
45463: PPUSH
45464: LD_VAR 0 4
45468: PPUSH
45469: CALL 45479 0 5
45473: ST_TO_ADDR
// end ;
45474: LD_VAR 0 5
45478: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45479: LD_INT 0
45481: PPUSH
45482: PPUSH
45483: PPUSH
45484: PPUSH
// if not list then
45485: LD_VAR 0 3
45489: NOT
45490: IFFALSE 45494
// exit ;
45492: GO 45882
// result := [ ] ;
45494: LD_ADDR_VAR 0 6
45498: PUSH
45499: EMPTY
45500: ST_TO_ADDR
// for i in list do
45501: LD_ADDR_VAR 0 7
45505: PUSH
45506: LD_VAR 0 3
45510: PUSH
45511: FOR_IN
45512: IFFALSE 45714
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45514: LD_ADDR_VAR 0 9
45518: PUSH
45519: LD_VAR 0 7
45523: PPUSH
45524: LD_VAR 0 1
45528: PPUSH
45529: LD_VAR 0 2
45533: PPUSH
45534: CALL_OW 297
45538: ST_TO_ADDR
// if not result then
45539: LD_VAR 0 6
45543: NOT
45544: IFFALSE 45570
// result := [ [ i , tmp ] ] else
45546: LD_ADDR_VAR 0 6
45550: PUSH
45551: LD_VAR 0 7
45555: PUSH
45556: LD_VAR 0 9
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: EMPTY
45566: LIST
45567: ST_TO_ADDR
45568: GO 45712
// begin if result [ result ] [ 2 ] < tmp then
45570: LD_VAR 0 6
45574: PUSH
45575: LD_VAR 0 6
45579: ARRAY
45580: PUSH
45581: LD_INT 2
45583: ARRAY
45584: PUSH
45585: LD_VAR 0 9
45589: LESS
45590: IFFALSE 45632
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45592: LD_ADDR_VAR 0 6
45596: PUSH
45597: LD_VAR 0 6
45601: PPUSH
45602: LD_VAR 0 6
45606: PUSH
45607: LD_INT 1
45609: PLUS
45610: PPUSH
45611: LD_VAR 0 7
45615: PUSH
45616: LD_VAR 0 9
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PPUSH
45625: CALL_OW 2
45629: ST_TO_ADDR
45630: GO 45712
// for j = 1 to result do
45632: LD_ADDR_VAR 0 8
45636: PUSH
45637: DOUBLE
45638: LD_INT 1
45640: DEC
45641: ST_TO_ADDR
45642: LD_VAR 0 6
45646: PUSH
45647: FOR_TO
45648: IFFALSE 45710
// begin if tmp < result [ j ] [ 2 ] then
45650: LD_VAR 0 9
45654: PUSH
45655: LD_VAR 0 6
45659: PUSH
45660: LD_VAR 0 8
45664: ARRAY
45665: PUSH
45666: LD_INT 2
45668: ARRAY
45669: LESS
45670: IFFALSE 45708
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45672: LD_ADDR_VAR 0 6
45676: PUSH
45677: LD_VAR 0 6
45681: PPUSH
45682: LD_VAR 0 8
45686: PPUSH
45687: LD_VAR 0 7
45691: PUSH
45692: LD_VAR 0 9
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PPUSH
45701: CALL_OW 2
45705: ST_TO_ADDR
// break ;
45706: GO 45710
// end ; end ;
45708: GO 45647
45710: POP
45711: POP
// end ; end ;
45712: GO 45511
45714: POP
45715: POP
// if result and not asc then
45716: LD_VAR 0 6
45720: PUSH
45721: LD_VAR 0 4
45725: NOT
45726: AND
45727: IFFALSE 45802
// begin tmp := result ;
45729: LD_ADDR_VAR 0 9
45733: PUSH
45734: LD_VAR 0 6
45738: ST_TO_ADDR
// for i = tmp downto 1 do
45739: LD_ADDR_VAR 0 7
45743: PUSH
45744: DOUBLE
45745: LD_VAR 0 9
45749: INC
45750: ST_TO_ADDR
45751: LD_INT 1
45753: PUSH
45754: FOR_DOWNTO
45755: IFFALSE 45800
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45757: LD_ADDR_VAR 0 6
45761: PUSH
45762: LD_VAR 0 6
45766: PPUSH
45767: LD_VAR 0 9
45771: PUSH
45772: LD_VAR 0 7
45776: MINUS
45777: PUSH
45778: LD_INT 1
45780: PLUS
45781: PPUSH
45782: LD_VAR 0 9
45786: PUSH
45787: LD_VAR 0 7
45791: ARRAY
45792: PPUSH
45793: CALL_OW 1
45797: ST_TO_ADDR
45798: GO 45754
45800: POP
45801: POP
// end ; tmp := [ ] ;
45802: LD_ADDR_VAR 0 9
45806: PUSH
45807: EMPTY
45808: ST_TO_ADDR
// if mode then
45809: LD_VAR 0 5
45813: IFFALSE 45882
// begin for i = 1 to result do
45815: LD_ADDR_VAR 0 7
45819: PUSH
45820: DOUBLE
45821: LD_INT 1
45823: DEC
45824: ST_TO_ADDR
45825: LD_VAR 0 6
45829: PUSH
45830: FOR_TO
45831: IFFALSE 45870
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45833: LD_ADDR_VAR 0 9
45837: PUSH
45838: LD_VAR 0 9
45842: PPUSH
45843: LD_VAR 0 7
45847: PPUSH
45848: LD_VAR 0 6
45852: PUSH
45853: LD_VAR 0 7
45857: ARRAY
45858: PUSH
45859: LD_INT 1
45861: ARRAY
45862: PPUSH
45863: CALL_OW 1
45867: ST_TO_ADDR
45868: GO 45830
45870: POP
45871: POP
// result := tmp ;
45872: LD_ADDR_VAR 0 6
45876: PUSH
45877: LD_VAR 0 9
45881: ST_TO_ADDR
// end ; end ;
45882: LD_VAR 0 6
45886: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45887: LD_INT 0
45889: PPUSH
45890: PPUSH
45891: PPUSH
45892: PPUSH
45893: PPUSH
45894: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45895: LD_ADDR_VAR 0 5
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: EMPTY
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: ST_TO_ADDR
// if not x or not y then
45917: LD_VAR 0 2
45921: NOT
45922: PUSH
45923: LD_VAR 0 3
45927: NOT
45928: OR
45929: IFFALSE 45933
// exit ;
45931: GO 47585
// if not range then
45933: LD_VAR 0 4
45937: NOT
45938: IFFALSE 45948
// range := 10 ;
45940: LD_ADDR_VAR 0 4
45944: PUSH
45945: LD_INT 10
45947: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45948: LD_ADDR_VAR 0 8
45952: PUSH
45953: LD_INT 81
45955: PUSH
45956: LD_VAR 0 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 92
45967: PUSH
45968: LD_VAR 0 2
45972: PUSH
45973: LD_VAR 0 3
45977: PUSH
45978: LD_VAR 0 4
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 3
45991: PUSH
45992: LD_INT 21
45994: PUSH
45995: LD_INT 3
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: LIST
46010: PPUSH
46011: CALL_OW 69
46015: ST_TO_ADDR
// if not tmp then
46016: LD_VAR 0 8
46020: NOT
46021: IFFALSE 46025
// exit ;
46023: GO 47585
// for i in tmp do
46025: LD_ADDR_VAR 0 6
46029: PUSH
46030: LD_VAR 0 8
46034: PUSH
46035: FOR_IN
46036: IFFALSE 47560
// begin points := [ 0 , 0 , 0 ] ;
46038: LD_ADDR_VAR 0 9
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: LIST
46056: ST_TO_ADDR
// bpoints := 1 ;
46057: LD_ADDR_VAR 0 10
46061: PUSH
46062: LD_INT 1
46064: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46065: LD_VAR 0 6
46069: PPUSH
46070: CALL_OW 247
46074: PUSH
46075: LD_INT 1
46077: DOUBLE
46078: EQUAL
46079: IFTRUE 46083
46081: GO 46661
46083: POP
// begin if GetClass ( i ) = 1 then
46084: LD_VAR 0 6
46088: PPUSH
46089: CALL_OW 257
46093: PUSH
46094: LD_INT 1
46096: EQUAL
46097: IFFALSE 46118
// points := [ 10 , 5 , 3 ] ;
46099: LD_ADDR_VAR 0 9
46103: PUSH
46104: LD_INT 10
46106: PUSH
46107: LD_INT 5
46109: PUSH
46110: LD_INT 3
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: LIST
46117: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46118: LD_VAR 0 6
46122: PPUSH
46123: CALL_OW 257
46127: PUSH
46128: LD_INT 2
46130: PUSH
46131: LD_INT 3
46133: PUSH
46134: LD_INT 4
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: LIST
46141: IN
46142: IFFALSE 46163
// points := [ 3 , 2 , 1 ] ;
46144: LD_ADDR_VAR 0 9
46148: PUSH
46149: LD_INT 3
46151: PUSH
46152: LD_INT 2
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: LIST
46162: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46163: LD_VAR 0 6
46167: PPUSH
46168: CALL_OW 257
46172: PUSH
46173: LD_INT 5
46175: EQUAL
46176: IFFALSE 46197
// points := [ 130 , 5 , 2 ] ;
46178: LD_ADDR_VAR 0 9
46182: PUSH
46183: LD_INT 130
46185: PUSH
46186: LD_INT 5
46188: PUSH
46189: LD_INT 2
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: LIST
46196: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46197: LD_VAR 0 6
46201: PPUSH
46202: CALL_OW 257
46206: PUSH
46207: LD_INT 8
46209: EQUAL
46210: IFFALSE 46231
// points := [ 35 , 35 , 30 ] ;
46212: LD_ADDR_VAR 0 9
46216: PUSH
46217: LD_INT 35
46219: PUSH
46220: LD_INT 35
46222: PUSH
46223: LD_INT 30
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: LIST
46230: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46231: LD_VAR 0 6
46235: PPUSH
46236: CALL_OW 257
46240: PUSH
46241: LD_INT 9
46243: EQUAL
46244: IFFALSE 46265
// points := [ 20 , 55 , 40 ] ;
46246: LD_ADDR_VAR 0 9
46250: PUSH
46251: LD_INT 20
46253: PUSH
46254: LD_INT 55
46256: PUSH
46257: LD_INT 40
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: LIST
46264: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46265: LD_VAR 0 6
46269: PPUSH
46270: CALL_OW 257
46274: PUSH
46275: LD_INT 12
46277: PUSH
46278: LD_INT 16
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: IN
46285: IFFALSE 46306
// points := [ 5 , 3 , 2 ] ;
46287: LD_ADDR_VAR 0 9
46291: PUSH
46292: LD_INT 5
46294: PUSH
46295: LD_INT 3
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: LIST
46305: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46306: LD_VAR 0 6
46310: PPUSH
46311: CALL_OW 257
46315: PUSH
46316: LD_INT 17
46318: EQUAL
46319: IFFALSE 46340
// points := [ 100 , 50 , 75 ] ;
46321: LD_ADDR_VAR 0 9
46325: PUSH
46326: LD_INT 100
46328: PUSH
46329: LD_INT 50
46331: PUSH
46332: LD_INT 75
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: LIST
46339: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46340: LD_VAR 0 6
46344: PPUSH
46345: CALL_OW 257
46349: PUSH
46350: LD_INT 15
46352: EQUAL
46353: IFFALSE 46374
// points := [ 10 , 5 , 3 ] ;
46355: LD_ADDR_VAR 0 9
46359: PUSH
46360: LD_INT 10
46362: PUSH
46363: LD_INT 5
46365: PUSH
46366: LD_INT 3
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: LIST
46373: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46374: LD_VAR 0 6
46378: PPUSH
46379: CALL_OW 257
46383: PUSH
46384: LD_INT 14
46386: EQUAL
46387: IFFALSE 46408
// points := [ 10 , 0 , 0 ] ;
46389: LD_ADDR_VAR 0 9
46393: PUSH
46394: LD_INT 10
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: LIST
46407: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46408: LD_VAR 0 6
46412: PPUSH
46413: CALL_OW 257
46417: PUSH
46418: LD_INT 11
46420: EQUAL
46421: IFFALSE 46442
// points := [ 30 , 10 , 5 ] ;
46423: LD_ADDR_VAR 0 9
46427: PUSH
46428: LD_INT 30
46430: PUSH
46431: LD_INT 10
46433: PUSH
46434: LD_INT 5
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: LIST
46441: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46442: LD_VAR 0 1
46446: PPUSH
46447: LD_INT 5
46449: PPUSH
46450: CALL_OW 321
46454: PUSH
46455: LD_INT 2
46457: EQUAL
46458: IFFALSE 46475
// bpoints := bpoints * 1.8 ;
46460: LD_ADDR_VAR 0 10
46464: PUSH
46465: LD_VAR 0 10
46469: PUSH
46470: LD_REAL  1.80000000000000E+0000
46473: MUL
46474: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46475: LD_VAR 0 6
46479: PPUSH
46480: CALL_OW 257
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 2
46490: PUSH
46491: LD_INT 3
46493: PUSH
46494: LD_INT 4
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: IN
46503: PUSH
46504: LD_VAR 0 1
46508: PPUSH
46509: LD_INT 51
46511: PPUSH
46512: CALL_OW 321
46516: PUSH
46517: LD_INT 2
46519: EQUAL
46520: AND
46521: IFFALSE 46538
// bpoints := bpoints * 1.2 ;
46523: LD_ADDR_VAR 0 10
46527: PUSH
46528: LD_VAR 0 10
46532: PUSH
46533: LD_REAL  1.20000000000000E+0000
46536: MUL
46537: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46538: LD_VAR 0 6
46542: PPUSH
46543: CALL_OW 257
46547: PUSH
46548: LD_INT 5
46550: PUSH
46551: LD_INT 7
46553: PUSH
46554: LD_INT 9
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: LIST
46561: IN
46562: PUSH
46563: LD_VAR 0 1
46567: PPUSH
46568: LD_INT 52
46570: PPUSH
46571: CALL_OW 321
46575: PUSH
46576: LD_INT 2
46578: EQUAL
46579: AND
46580: IFFALSE 46597
// bpoints := bpoints * 1.5 ;
46582: LD_ADDR_VAR 0 10
46586: PUSH
46587: LD_VAR 0 10
46591: PUSH
46592: LD_REAL  1.50000000000000E+0000
46595: MUL
46596: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46597: LD_VAR 0 1
46601: PPUSH
46602: LD_INT 66
46604: PPUSH
46605: CALL_OW 321
46609: PUSH
46610: LD_INT 2
46612: EQUAL
46613: IFFALSE 46630
// bpoints := bpoints * 1.1 ;
46615: LD_ADDR_VAR 0 10
46619: PUSH
46620: LD_VAR 0 10
46624: PUSH
46625: LD_REAL  1.10000000000000E+0000
46628: MUL
46629: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46630: LD_ADDR_VAR 0 10
46634: PUSH
46635: LD_VAR 0 10
46639: PUSH
46640: LD_VAR 0 6
46644: PPUSH
46645: LD_INT 1
46647: PPUSH
46648: CALL_OW 259
46652: PUSH
46653: LD_REAL  1.15000000000000E+0000
46656: MUL
46657: MUL
46658: ST_TO_ADDR
// end ; unit_vehicle :
46659: GO 47489
46661: LD_INT 2
46663: DOUBLE
46664: EQUAL
46665: IFTRUE 46669
46667: GO 47477
46669: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46670: LD_VAR 0 6
46674: PPUSH
46675: CALL_OW 264
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: LD_INT 42
46685: PUSH
46686: LD_INT 24
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: LIST
46693: IN
46694: IFFALSE 46715
// points := [ 25 , 5 , 3 ] ;
46696: LD_ADDR_VAR 0 9
46700: PUSH
46701: LD_INT 25
46703: PUSH
46704: LD_INT 5
46706: PUSH
46707: LD_INT 3
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: LIST
46714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46715: LD_VAR 0 6
46719: PPUSH
46720: CALL_OW 264
46724: PUSH
46725: LD_INT 4
46727: PUSH
46728: LD_INT 43
46730: PUSH
46731: LD_INT 25
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: LIST
46738: IN
46739: IFFALSE 46760
// points := [ 40 , 15 , 5 ] ;
46741: LD_ADDR_VAR 0 9
46745: PUSH
46746: LD_INT 40
46748: PUSH
46749: LD_INT 15
46751: PUSH
46752: LD_INT 5
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: LIST
46759: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46760: LD_VAR 0 6
46764: PPUSH
46765: CALL_OW 264
46769: PUSH
46770: LD_INT 3
46772: PUSH
46773: LD_INT 23
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: IN
46780: IFFALSE 46801
// points := [ 7 , 25 , 8 ] ;
46782: LD_ADDR_VAR 0 9
46786: PUSH
46787: LD_INT 7
46789: PUSH
46790: LD_INT 25
46792: PUSH
46793: LD_INT 8
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: LIST
46800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46801: LD_VAR 0 6
46805: PPUSH
46806: CALL_OW 264
46810: PUSH
46811: LD_INT 5
46813: PUSH
46814: LD_INT 27
46816: PUSH
46817: LD_INT 44
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: LIST
46824: IN
46825: IFFALSE 46846
// points := [ 14 , 50 , 16 ] ;
46827: LD_ADDR_VAR 0 9
46831: PUSH
46832: LD_INT 14
46834: PUSH
46835: LD_INT 50
46837: PUSH
46838: LD_INT 16
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: LIST
46845: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46846: LD_VAR 0 6
46850: PPUSH
46851: CALL_OW 264
46855: PUSH
46856: LD_INT 6
46858: PUSH
46859: LD_INT 46
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: IN
46866: IFFALSE 46887
// points := [ 32 , 120 , 70 ] ;
46868: LD_ADDR_VAR 0 9
46872: PUSH
46873: LD_INT 32
46875: PUSH
46876: LD_INT 120
46878: PUSH
46879: LD_INT 70
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46887: LD_VAR 0 6
46891: PPUSH
46892: CALL_OW 264
46896: PUSH
46897: LD_INT 7
46899: PUSH
46900: LD_INT 28
46902: PUSH
46903: LD_INT 45
46905: PUSH
46906: LD_EXP 55
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: IN
46917: IFFALSE 46938
// points := [ 35 , 20 , 45 ] ;
46919: LD_ADDR_VAR 0 9
46923: PUSH
46924: LD_INT 35
46926: PUSH
46927: LD_INT 20
46929: PUSH
46930: LD_INT 45
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: LIST
46937: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46938: LD_VAR 0 6
46942: PPUSH
46943: CALL_OW 264
46947: PUSH
46948: LD_INT 47
46950: PUSH
46951: EMPTY
46952: LIST
46953: IN
46954: IFFALSE 46975
// points := [ 67 , 45 , 75 ] ;
46956: LD_ADDR_VAR 0 9
46960: PUSH
46961: LD_INT 67
46963: PUSH
46964: LD_INT 45
46966: PUSH
46967: LD_INT 75
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: LIST
46974: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46975: LD_VAR 0 6
46979: PPUSH
46980: CALL_OW 264
46984: PUSH
46985: LD_INT 26
46987: PUSH
46988: EMPTY
46989: LIST
46990: IN
46991: IFFALSE 47012
// points := [ 120 , 30 , 80 ] ;
46993: LD_ADDR_VAR 0 9
46997: PUSH
46998: LD_INT 120
47000: PUSH
47001: LD_INT 30
47003: PUSH
47004: LD_INT 80
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: LIST
47011: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47012: LD_VAR 0 6
47016: PPUSH
47017: CALL_OW 264
47021: PUSH
47022: LD_INT 22
47024: PUSH
47025: EMPTY
47026: LIST
47027: IN
47028: IFFALSE 47049
// points := [ 40 , 1 , 1 ] ;
47030: LD_ADDR_VAR 0 9
47034: PUSH
47035: LD_INT 40
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: LIST
47048: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47049: LD_VAR 0 6
47053: PPUSH
47054: CALL_OW 264
47058: PUSH
47059: LD_INT 29
47061: PUSH
47062: EMPTY
47063: LIST
47064: IN
47065: IFFALSE 47086
// points := [ 70 , 200 , 400 ] ;
47067: LD_ADDR_VAR 0 9
47071: PUSH
47072: LD_INT 70
47074: PUSH
47075: LD_INT 200
47077: PUSH
47078: LD_INT 400
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: LIST
47085: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47086: LD_VAR 0 6
47090: PPUSH
47091: CALL_OW 264
47095: PUSH
47096: LD_INT 14
47098: PUSH
47099: LD_INT 53
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: IN
47106: IFFALSE 47127
// points := [ 40 , 10 , 20 ] ;
47108: LD_ADDR_VAR 0 9
47112: PUSH
47113: LD_INT 40
47115: PUSH
47116: LD_INT 10
47118: PUSH
47119: LD_INT 20
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: LIST
47126: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47127: LD_VAR 0 6
47131: PPUSH
47132: CALL_OW 264
47136: PUSH
47137: LD_INT 9
47139: PUSH
47140: EMPTY
47141: LIST
47142: IN
47143: IFFALSE 47164
// points := [ 5 , 70 , 20 ] ;
47145: LD_ADDR_VAR 0 9
47149: PUSH
47150: LD_INT 5
47152: PUSH
47153: LD_INT 70
47155: PUSH
47156: LD_INT 20
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: LIST
47163: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47164: LD_VAR 0 6
47168: PPUSH
47169: CALL_OW 264
47173: PUSH
47174: LD_INT 10
47176: PUSH
47177: EMPTY
47178: LIST
47179: IN
47180: IFFALSE 47201
// points := [ 35 , 110 , 70 ] ;
47182: LD_ADDR_VAR 0 9
47186: PUSH
47187: LD_INT 35
47189: PUSH
47190: LD_INT 110
47192: PUSH
47193: LD_INT 70
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: LIST
47200: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47201: LD_VAR 0 6
47205: PPUSH
47206: CALL_OW 265
47210: PUSH
47211: LD_INT 25
47213: EQUAL
47214: IFFALSE 47235
// points := [ 80 , 65 , 100 ] ;
47216: LD_ADDR_VAR 0 9
47220: PUSH
47221: LD_INT 80
47223: PUSH
47224: LD_INT 65
47226: PUSH
47227: LD_INT 100
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: LIST
47234: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47235: LD_VAR 0 6
47239: PPUSH
47240: CALL_OW 263
47244: PUSH
47245: LD_INT 1
47247: EQUAL
47248: IFFALSE 47283
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47250: LD_ADDR_VAR 0 10
47254: PUSH
47255: LD_VAR 0 10
47259: PUSH
47260: LD_VAR 0 6
47264: PPUSH
47265: CALL_OW 311
47269: PPUSH
47270: LD_INT 3
47272: PPUSH
47273: CALL_OW 259
47277: PUSH
47278: LD_INT 4
47280: MUL
47281: MUL
47282: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47283: LD_VAR 0 6
47287: PPUSH
47288: CALL_OW 263
47292: PUSH
47293: LD_INT 2
47295: EQUAL
47296: IFFALSE 47347
// begin j := IsControledBy ( i ) ;
47298: LD_ADDR_VAR 0 7
47302: PUSH
47303: LD_VAR 0 6
47307: PPUSH
47308: CALL_OW 312
47312: ST_TO_ADDR
// if j then
47313: LD_VAR 0 7
47317: IFFALSE 47347
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47319: LD_ADDR_VAR 0 10
47323: PUSH
47324: LD_VAR 0 10
47328: PUSH
47329: LD_VAR 0 7
47333: PPUSH
47334: LD_INT 3
47336: PPUSH
47337: CALL_OW 259
47341: PUSH
47342: LD_INT 3
47344: MUL
47345: MUL
47346: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47347: LD_VAR 0 6
47351: PPUSH
47352: CALL_OW 264
47356: PUSH
47357: LD_INT 5
47359: PUSH
47360: LD_INT 6
47362: PUSH
47363: LD_INT 46
47365: PUSH
47366: LD_INT 44
47368: PUSH
47369: LD_INT 47
47371: PUSH
47372: LD_INT 45
47374: PUSH
47375: LD_INT 28
47377: PUSH
47378: LD_INT 7
47380: PUSH
47381: LD_INT 27
47383: PUSH
47384: LD_INT 29
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: IN
47399: PUSH
47400: LD_VAR 0 1
47404: PPUSH
47405: LD_INT 52
47407: PPUSH
47408: CALL_OW 321
47412: PUSH
47413: LD_INT 2
47415: EQUAL
47416: AND
47417: IFFALSE 47434
// bpoints := bpoints * 1.2 ;
47419: LD_ADDR_VAR 0 10
47423: PUSH
47424: LD_VAR 0 10
47428: PUSH
47429: LD_REAL  1.20000000000000E+0000
47432: MUL
47433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47434: LD_VAR 0 6
47438: PPUSH
47439: CALL_OW 264
47443: PUSH
47444: LD_INT 6
47446: PUSH
47447: LD_INT 46
47449: PUSH
47450: LD_INT 47
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: LIST
47457: IN
47458: IFFALSE 47475
// bpoints := bpoints * 1.2 ;
47460: LD_ADDR_VAR 0 10
47464: PUSH
47465: LD_VAR 0 10
47469: PUSH
47470: LD_REAL  1.20000000000000E+0000
47473: MUL
47474: ST_TO_ADDR
// end ; unit_building :
47475: GO 47489
47477: LD_INT 3
47479: DOUBLE
47480: EQUAL
47481: IFTRUE 47485
47483: GO 47488
47485: POP
// ; end ;
47486: GO 47489
47488: POP
// for j = 1 to 3 do
47489: LD_ADDR_VAR 0 7
47493: PUSH
47494: DOUBLE
47495: LD_INT 1
47497: DEC
47498: ST_TO_ADDR
47499: LD_INT 3
47501: PUSH
47502: FOR_TO
47503: IFFALSE 47556
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47505: LD_ADDR_VAR 0 5
47509: PUSH
47510: LD_VAR 0 5
47514: PPUSH
47515: LD_VAR 0 7
47519: PPUSH
47520: LD_VAR 0 5
47524: PUSH
47525: LD_VAR 0 7
47529: ARRAY
47530: PUSH
47531: LD_VAR 0 9
47535: PUSH
47536: LD_VAR 0 7
47540: ARRAY
47541: PUSH
47542: LD_VAR 0 10
47546: MUL
47547: PLUS
47548: PPUSH
47549: CALL_OW 1
47553: ST_TO_ADDR
47554: GO 47502
47556: POP
47557: POP
// end ;
47558: GO 46035
47560: POP
47561: POP
// result := Replace ( result , 4 , tmp ) ;
47562: LD_ADDR_VAR 0 5
47566: PUSH
47567: LD_VAR 0 5
47571: PPUSH
47572: LD_INT 4
47574: PPUSH
47575: LD_VAR 0 8
47579: PPUSH
47580: CALL_OW 1
47584: ST_TO_ADDR
// end ;
47585: LD_VAR 0 5
47589: RET
// export function DangerAtRange ( unit , range ) ; begin
47590: LD_INT 0
47592: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47593: LD_ADDR_VAR 0 3
47597: PUSH
47598: LD_VAR 0 1
47602: PPUSH
47603: CALL_OW 255
47607: PPUSH
47608: LD_VAR 0 1
47612: PPUSH
47613: CALL_OW 250
47617: PPUSH
47618: LD_VAR 0 1
47622: PPUSH
47623: CALL_OW 251
47627: PPUSH
47628: LD_VAR 0 2
47632: PPUSH
47633: CALL 45887 0 4
47637: ST_TO_ADDR
// end ;
47638: LD_VAR 0 3
47642: RET
// export function DangerInArea ( side , area ) ; begin
47643: LD_INT 0
47645: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47646: LD_ADDR_VAR 0 3
47650: PUSH
47651: LD_VAR 0 2
47655: PPUSH
47656: LD_INT 81
47658: PUSH
47659: LD_VAR 0 1
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PPUSH
47668: CALL_OW 70
47672: ST_TO_ADDR
// end ;
47673: LD_VAR 0 3
47677: RET
// export function IsExtension ( b ) ; begin
47678: LD_INT 0
47680: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47681: LD_ADDR_VAR 0 2
47685: PUSH
47686: LD_VAR 0 1
47690: PUSH
47691: LD_INT 23
47693: PUSH
47694: LD_INT 20
47696: PUSH
47697: LD_INT 22
47699: PUSH
47700: LD_INT 17
47702: PUSH
47703: LD_INT 24
47705: PUSH
47706: LD_INT 21
47708: PUSH
47709: LD_INT 19
47711: PUSH
47712: LD_INT 16
47714: PUSH
47715: LD_INT 25
47717: PUSH
47718: LD_INT 18
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: IN
47733: ST_TO_ADDR
// end ;
47734: LD_VAR 0 2
47738: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47739: LD_INT 0
47741: PPUSH
47742: PPUSH
47743: PPUSH
// result := [ ] ;
47744: LD_ADDR_VAR 0 4
47748: PUSH
47749: EMPTY
47750: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47751: LD_ADDR_VAR 0 5
47755: PUSH
47756: LD_VAR 0 2
47760: PPUSH
47761: LD_INT 21
47763: PUSH
47764: LD_INT 3
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PPUSH
47771: CALL_OW 70
47775: ST_TO_ADDR
// if not tmp then
47776: LD_VAR 0 5
47780: NOT
47781: IFFALSE 47785
// exit ;
47783: GO 47849
// if checkLink then
47785: LD_VAR 0 3
47789: IFFALSE 47839
// begin for i in tmp do
47791: LD_ADDR_VAR 0 6
47795: PUSH
47796: LD_VAR 0 5
47800: PUSH
47801: FOR_IN
47802: IFFALSE 47837
// if GetBase ( i ) <> base then
47804: LD_VAR 0 6
47808: PPUSH
47809: CALL_OW 274
47813: PUSH
47814: LD_VAR 0 1
47818: NONEQUAL
47819: IFFALSE 47835
// ComLinkToBase ( base , i ) ;
47821: LD_VAR 0 1
47825: PPUSH
47826: LD_VAR 0 6
47830: PPUSH
47831: CALL_OW 169
47835: GO 47801
47837: POP
47838: POP
// end ; result := tmp ;
47839: LD_ADDR_VAR 0 4
47843: PUSH
47844: LD_VAR 0 5
47848: ST_TO_ADDR
// end ;
47849: LD_VAR 0 4
47853: RET
// export function ComComplete ( units , b ) ; var i ; begin
47854: LD_INT 0
47856: PPUSH
47857: PPUSH
// if not units then
47858: LD_VAR 0 1
47862: NOT
47863: IFFALSE 47867
// exit ;
47865: GO 47957
// for i in units do
47867: LD_ADDR_VAR 0 4
47871: PUSH
47872: LD_VAR 0 1
47876: PUSH
47877: FOR_IN
47878: IFFALSE 47955
// if BuildingStatus ( b ) = bs_build then
47880: LD_VAR 0 2
47884: PPUSH
47885: CALL_OW 461
47889: PUSH
47890: LD_INT 1
47892: EQUAL
47893: IFFALSE 47953
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47895: LD_VAR 0 4
47899: PPUSH
47900: LD_STRING h
47902: PUSH
47903: LD_VAR 0 2
47907: PPUSH
47908: CALL_OW 250
47912: PUSH
47913: LD_VAR 0 2
47917: PPUSH
47918: CALL_OW 251
47922: PUSH
47923: LD_VAR 0 2
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: PUSH
47946: EMPTY
47947: LIST
47948: PPUSH
47949: CALL_OW 446
47953: GO 47877
47955: POP
47956: POP
// end ;
47957: LD_VAR 0 3
47961: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47962: LD_INT 0
47964: PPUSH
47965: PPUSH
47966: PPUSH
47967: PPUSH
47968: PPUSH
47969: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47970: LD_VAR 0 1
47974: NOT
47975: PUSH
47976: LD_VAR 0 1
47980: PPUSH
47981: CALL_OW 263
47985: PUSH
47986: LD_INT 2
47988: NONEQUAL
47989: OR
47990: IFFALSE 47994
// exit ;
47992: GO 48310
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47994: LD_ADDR_VAR 0 6
47998: PUSH
47999: LD_INT 22
48001: PUSH
48002: LD_VAR 0 1
48006: PPUSH
48007: CALL_OW 255
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: LD_INT 30
48021: PUSH
48022: LD_INT 36
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 34
48031: PUSH
48032: LD_INT 31
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: LIST
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PPUSH
48048: CALL_OW 69
48052: ST_TO_ADDR
// if not tmp then
48053: LD_VAR 0 6
48057: NOT
48058: IFFALSE 48062
// exit ;
48060: GO 48310
// result := [ ] ;
48062: LD_ADDR_VAR 0 2
48066: PUSH
48067: EMPTY
48068: ST_TO_ADDR
// for i in tmp do
48069: LD_ADDR_VAR 0 3
48073: PUSH
48074: LD_VAR 0 6
48078: PUSH
48079: FOR_IN
48080: IFFALSE 48151
// begin t := UnitsInside ( i ) ;
48082: LD_ADDR_VAR 0 4
48086: PUSH
48087: LD_VAR 0 3
48091: PPUSH
48092: CALL_OW 313
48096: ST_TO_ADDR
// if t then
48097: LD_VAR 0 4
48101: IFFALSE 48149
// for j in t do
48103: LD_ADDR_VAR 0 7
48107: PUSH
48108: LD_VAR 0 4
48112: PUSH
48113: FOR_IN
48114: IFFALSE 48147
// result := Replace ( result , result + 1 , j ) ;
48116: LD_ADDR_VAR 0 2
48120: PUSH
48121: LD_VAR 0 2
48125: PPUSH
48126: LD_VAR 0 2
48130: PUSH
48131: LD_INT 1
48133: PLUS
48134: PPUSH
48135: LD_VAR 0 7
48139: PPUSH
48140: CALL_OW 1
48144: ST_TO_ADDR
48145: GO 48113
48147: POP
48148: POP
// end ;
48149: GO 48079
48151: POP
48152: POP
// if not result then
48153: LD_VAR 0 2
48157: NOT
48158: IFFALSE 48162
// exit ;
48160: GO 48310
// mech := result [ 1 ] ;
48162: LD_ADDR_VAR 0 5
48166: PUSH
48167: LD_VAR 0 2
48171: PUSH
48172: LD_INT 1
48174: ARRAY
48175: ST_TO_ADDR
// if result > 1 then
48176: LD_VAR 0 2
48180: PUSH
48181: LD_INT 1
48183: GREATER
48184: IFFALSE 48296
// begin for i = 2 to result do
48186: LD_ADDR_VAR 0 3
48190: PUSH
48191: DOUBLE
48192: LD_INT 2
48194: DEC
48195: ST_TO_ADDR
48196: LD_VAR 0 2
48200: PUSH
48201: FOR_TO
48202: IFFALSE 48294
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48204: LD_ADDR_VAR 0 4
48208: PUSH
48209: LD_VAR 0 2
48213: PUSH
48214: LD_VAR 0 3
48218: ARRAY
48219: PPUSH
48220: LD_INT 3
48222: PPUSH
48223: CALL_OW 259
48227: PUSH
48228: LD_VAR 0 2
48232: PUSH
48233: LD_VAR 0 3
48237: ARRAY
48238: PPUSH
48239: CALL_OW 432
48243: MINUS
48244: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48245: LD_VAR 0 4
48249: PUSH
48250: LD_VAR 0 5
48254: PPUSH
48255: LD_INT 3
48257: PPUSH
48258: CALL_OW 259
48262: PUSH
48263: LD_VAR 0 5
48267: PPUSH
48268: CALL_OW 432
48272: MINUS
48273: GREATEREQUAL
48274: IFFALSE 48292
// mech := result [ i ] ;
48276: LD_ADDR_VAR 0 5
48280: PUSH
48281: LD_VAR 0 2
48285: PUSH
48286: LD_VAR 0 3
48290: ARRAY
48291: ST_TO_ADDR
// end ;
48292: GO 48201
48294: POP
48295: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48296: LD_VAR 0 1
48300: PPUSH
48301: LD_VAR 0 5
48305: PPUSH
48306: CALL_OW 135
// end ;
48310: LD_VAR 0 2
48314: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48315: LD_INT 0
48317: PPUSH
48318: PPUSH
48319: PPUSH
48320: PPUSH
48321: PPUSH
48322: PPUSH
48323: PPUSH
48324: PPUSH
48325: PPUSH
48326: PPUSH
48327: PPUSH
48328: PPUSH
48329: PPUSH
// result := [ ] ;
48330: LD_ADDR_VAR 0 7
48334: PUSH
48335: EMPTY
48336: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48337: LD_VAR 0 1
48341: PPUSH
48342: CALL_OW 266
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: IN
48357: NOT
48358: IFFALSE 48362
// exit ;
48360: GO 49996
// if name then
48362: LD_VAR 0 3
48366: IFFALSE 48382
// SetBName ( base_dep , name ) ;
48368: LD_VAR 0 1
48372: PPUSH
48373: LD_VAR 0 3
48377: PPUSH
48378: CALL_OW 500
// base := GetBase ( base_dep ) ;
48382: LD_ADDR_VAR 0 15
48386: PUSH
48387: LD_VAR 0 1
48391: PPUSH
48392: CALL_OW 274
48396: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48397: LD_ADDR_VAR 0 16
48401: PUSH
48402: LD_VAR 0 1
48406: PPUSH
48407: CALL_OW 255
48411: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48412: LD_ADDR_VAR 0 17
48416: PUSH
48417: LD_VAR 0 1
48421: PPUSH
48422: CALL_OW 248
48426: ST_TO_ADDR
// if sources then
48427: LD_VAR 0 5
48431: IFFALSE 48478
// for i = 1 to 3 do
48433: LD_ADDR_VAR 0 8
48437: PUSH
48438: DOUBLE
48439: LD_INT 1
48441: DEC
48442: ST_TO_ADDR
48443: LD_INT 3
48445: PUSH
48446: FOR_TO
48447: IFFALSE 48476
// AddResourceType ( base , i , sources [ i ] ) ;
48449: LD_VAR 0 15
48453: PPUSH
48454: LD_VAR 0 8
48458: PPUSH
48459: LD_VAR 0 5
48463: PUSH
48464: LD_VAR 0 8
48468: ARRAY
48469: PPUSH
48470: CALL_OW 276
48474: GO 48446
48476: POP
48477: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48478: LD_ADDR_VAR 0 18
48482: PUSH
48483: LD_VAR 0 15
48487: PPUSH
48488: LD_VAR 0 2
48492: PPUSH
48493: LD_INT 1
48495: PPUSH
48496: CALL 47739 0 3
48500: ST_TO_ADDR
// InitHc ;
48501: CALL_OW 19
// InitUc ;
48505: CALL_OW 18
// uc_side := side ;
48509: LD_ADDR_OWVAR 20
48513: PUSH
48514: LD_VAR 0 16
48518: ST_TO_ADDR
// uc_nation := nation ;
48519: LD_ADDR_OWVAR 21
48523: PUSH
48524: LD_VAR 0 17
48528: ST_TO_ADDR
// if buildings then
48529: LD_VAR 0 18
48533: IFFALSE 49855
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48535: LD_ADDR_VAR 0 19
48539: PUSH
48540: LD_VAR 0 18
48544: PPUSH
48545: LD_INT 2
48547: PUSH
48548: LD_INT 30
48550: PUSH
48551: LD_INT 29
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 30
48560: PUSH
48561: LD_INT 30
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: LIST
48572: PPUSH
48573: CALL_OW 72
48577: ST_TO_ADDR
// if tmp then
48578: LD_VAR 0 19
48582: IFFALSE 48630
// for i in tmp do
48584: LD_ADDR_VAR 0 8
48588: PUSH
48589: LD_VAR 0 19
48593: PUSH
48594: FOR_IN
48595: IFFALSE 48628
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48597: LD_VAR 0 8
48601: PPUSH
48602: CALL_OW 250
48606: PPUSH
48607: LD_VAR 0 8
48611: PPUSH
48612: CALL_OW 251
48616: PPUSH
48617: LD_VAR 0 16
48621: PPUSH
48622: CALL_OW 441
48626: GO 48594
48628: POP
48629: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48630: LD_VAR 0 18
48634: PPUSH
48635: LD_INT 2
48637: PUSH
48638: LD_INT 30
48640: PUSH
48641: LD_INT 32
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 30
48650: PUSH
48651: LD_INT 33
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: LIST
48662: PPUSH
48663: CALL_OW 72
48667: IFFALSE 48755
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48669: LD_ADDR_VAR 0 8
48673: PUSH
48674: LD_VAR 0 18
48678: PPUSH
48679: LD_INT 2
48681: PUSH
48682: LD_INT 30
48684: PUSH
48685: LD_INT 32
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 30
48694: PUSH
48695: LD_INT 33
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: LIST
48706: PPUSH
48707: CALL_OW 72
48711: PUSH
48712: FOR_IN
48713: IFFALSE 48753
// begin if not GetBWeapon ( i ) then
48715: LD_VAR 0 8
48719: PPUSH
48720: CALL_OW 269
48724: NOT
48725: IFFALSE 48751
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48727: LD_VAR 0 8
48731: PPUSH
48732: LD_VAR 0 8
48736: PPUSH
48737: LD_VAR 0 2
48741: PPUSH
48742: CALL 50001 0 2
48746: PPUSH
48747: CALL_OW 431
// end ;
48751: GO 48712
48753: POP
48754: POP
// end ; for i = 1 to personel do
48755: LD_ADDR_VAR 0 8
48759: PUSH
48760: DOUBLE
48761: LD_INT 1
48763: DEC
48764: ST_TO_ADDR
48765: LD_VAR 0 6
48769: PUSH
48770: FOR_TO
48771: IFFALSE 49835
// begin if i > 4 then
48773: LD_VAR 0 8
48777: PUSH
48778: LD_INT 4
48780: GREATER
48781: IFFALSE 48785
// break ;
48783: GO 49835
// case i of 1 :
48785: LD_VAR 0 8
48789: PUSH
48790: LD_INT 1
48792: DOUBLE
48793: EQUAL
48794: IFTRUE 48798
48796: GO 48878
48798: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48799: LD_ADDR_VAR 0 12
48803: PUSH
48804: LD_VAR 0 18
48808: PPUSH
48809: LD_INT 22
48811: PUSH
48812: LD_VAR 0 16
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 58
48823: PUSH
48824: EMPTY
48825: LIST
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: LD_INT 30
48832: PUSH
48833: LD_INT 32
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 30
48842: PUSH
48843: LD_INT 4
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 30
48852: PUSH
48853: LD_INT 5
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: LIST
48870: PPUSH
48871: CALL_OW 72
48875: ST_TO_ADDR
48876: GO 49100
48878: LD_INT 2
48880: DOUBLE
48881: EQUAL
48882: IFTRUE 48886
48884: GO 48948
48886: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48887: LD_ADDR_VAR 0 12
48891: PUSH
48892: LD_VAR 0 18
48896: PPUSH
48897: LD_INT 22
48899: PUSH
48900: LD_VAR 0 16
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: LD_INT 30
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 30
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: LIST
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PPUSH
48941: CALL_OW 72
48945: ST_TO_ADDR
48946: GO 49100
48948: LD_INT 3
48950: DOUBLE
48951: EQUAL
48952: IFTRUE 48956
48954: GO 49018
48956: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48957: LD_ADDR_VAR 0 12
48961: PUSH
48962: LD_VAR 0 18
48966: PPUSH
48967: LD_INT 22
48969: PUSH
48970: LD_VAR 0 16
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 2
48981: PUSH
48982: LD_INT 30
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 30
48994: PUSH
48995: LD_INT 3
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: LIST
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PPUSH
49011: CALL_OW 72
49015: ST_TO_ADDR
49016: GO 49100
49018: LD_INT 4
49020: DOUBLE
49021: EQUAL
49022: IFTRUE 49026
49024: GO 49099
49026: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49027: LD_ADDR_VAR 0 12
49031: PUSH
49032: LD_VAR 0 18
49036: PPUSH
49037: LD_INT 22
49039: PUSH
49040: LD_VAR 0 16
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: LD_INT 30
49054: PUSH
49055: LD_INT 6
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 30
49064: PUSH
49065: LD_INT 7
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 30
49074: PUSH
49075: LD_INT 8
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PPUSH
49092: CALL_OW 72
49096: ST_TO_ADDR
49097: GO 49100
49099: POP
// if i = 1 then
49100: LD_VAR 0 8
49104: PUSH
49105: LD_INT 1
49107: EQUAL
49108: IFFALSE 49219
// begin tmp := [ ] ;
49110: LD_ADDR_VAR 0 19
49114: PUSH
49115: EMPTY
49116: ST_TO_ADDR
// for j in f do
49117: LD_ADDR_VAR 0 9
49121: PUSH
49122: LD_VAR 0 12
49126: PUSH
49127: FOR_IN
49128: IFFALSE 49201
// if GetBType ( j ) = b_bunker then
49130: LD_VAR 0 9
49134: PPUSH
49135: CALL_OW 266
49139: PUSH
49140: LD_INT 32
49142: EQUAL
49143: IFFALSE 49170
// tmp := Insert ( tmp , 1 , j ) else
49145: LD_ADDR_VAR 0 19
49149: PUSH
49150: LD_VAR 0 19
49154: PPUSH
49155: LD_INT 1
49157: PPUSH
49158: LD_VAR 0 9
49162: PPUSH
49163: CALL_OW 2
49167: ST_TO_ADDR
49168: GO 49199
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49170: LD_ADDR_VAR 0 19
49174: PUSH
49175: LD_VAR 0 19
49179: PPUSH
49180: LD_VAR 0 19
49184: PUSH
49185: LD_INT 1
49187: PLUS
49188: PPUSH
49189: LD_VAR 0 9
49193: PPUSH
49194: CALL_OW 2
49198: ST_TO_ADDR
49199: GO 49127
49201: POP
49202: POP
// if tmp then
49203: LD_VAR 0 19
49207: IFFALSE 49219
// f := tmp ;
49209: LD_ADDR_VAR 0 12
49213: PUSH
49214: LD_VAR 0 19
49218: ST_TO_ADDR
// end ; x := personel [ i ] ;
49219: LD_ADDR_VAR 0 13
49223: PUSH
49224: LD_VAR 0 6
49228: PUSH
49229: LD_VAR 0 8
49233: ARRAY
49234: ST_TO_ADDR
// if x = - 1 then
49235: LD_VAR 0 13
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: EQUAL
49244: IFFALSE 49453
// begin for j in f do
49246: LD_ADDR_VAR 0 9
49250: PUSH
49251: LD_VAR 0 12
49255: PUSH
49256: FOR_IN
49257: IFFALSE 49449
// repeat InitHc ;
49259: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49263: LD_VAR 0 9
49267: PPUSH
49268: CALL_OW 266
49272: PUSH
49273: LD_INT 5
49275: EQUAL
49276: IFFALSE 49346
// begin if UnitsInside ( j ) < 3 then
49278: LD_VAR 0 9
49282: PPUSH
49283: CALL_OW 313
49287: PUSH
49288: LD_INT 3
49290: LESS
49291: IFFALSE 49327
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49293: LD_INT 0
49295: PPUSH
49296: LD_INT 5
49298: PUSH
49299: LD_INT 8
49301: PUSH
49302: LD_INT 9
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: LIST
49309: PUSH
49310: LD_VAR 0 17
49314: ARRAY
49315: PPUSH
49316: LD_VAR 0 4
49320: PPUSH
49321: CALL_OW 380
49325: GO 49344
// PrepareHuman ( false , i , skill ) ;
49327: LD_INT 0
49329: PPUSH
49330: LD_VAR 0 8
49334: PPUSH
49335: LD_VAR 0 4
49339: PPUSH
49340: CALL_OW 380
// end else
49344: GO 49363
// PrepareHuman ( false , i , skill ) ;
49346: LD_INT 0
49348: PPUSH
49349: LD_VAR 0 8
49353: PPUSH
49354: LD_VAR 0 4
49358: PPUSH
49359: CALL_OW 380
// un := CreateHuman ;
49363: LD_ADDR_VAR 0 14
49367: PUSH
49368: CALL_OW 44
49372: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49373: LD_ADDR_VAR 0 7
49377: PUSH
49378: LD_VAR 0 7
49382: PPUSH
49383: LD_INT 1
49385: PPUSH
49386: LD_VAR 0 14
49390: PPUSH
49391: CALL_OW 2
49395: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49396: LD_VAR 0 14
49400: PPUSH
49401: LD_VAR 0 9
49405: PPUSH
49406: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49410: LD_VAR 0 9
49414: PPUSH
49415: CALL_OW 313
49419: PUSH
49420: LD_INT 6
49422: EQUAL
49423: PUSH
49424: LD_VAR 0 9
49428: PPUSH
49429: CALL_OW 266
49433: PUSH
49434: LD_INT 32
49436: PUSH
49437: LD_INT 31
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: IN
49444: OR
49445: IFFALSE 49259
49447: GO 49256
49449: POP
49450: POP
// end else
49451: GO 49833
// for j = 1 to x do
49453: LD_ADDR_VAR 0 9
49457: PUSH
49458: DOUBLE
49459: LD_INT 1
49461: DEC
49462: ST_TO_ADDR
49463: LD_VAR 0 13
49467: PUSH
49468: FOR_TO
49469: IFFALSE 49831
// begin InitHc ;
49471: CALL_OW 19
// if not f then
49475: LD_VAR 0 12
49479: NOT
49480: IFFALSE 49569
// begin PrepareHuman ( false , i , skill ) ;
49482: LD_INT 0
49484: PPUSH
49485: LD_VAR 0 8
49489: PPUSH
49490: LD_VAR 0 4
49494: PPUSH
49495: CALL_OW 380
// un := CreateHuman ;
49499: LD_ADDR_VAR 0 14
49503: PUSH
49504: CALL_OW 44
49508: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49509: LD_ADDR_VAR 0 7
49513: PUSH
49514: LD_VAR 0 7
49518: PPUSH
49519: LD_INT 1
49521: PPUSH
49522: LD_VAR 0 14
49526: PPUSH
49527: CALL_OW 2
49531: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49532: LD_VAR 0 14
49536: PPUSH
49537: LD_VAR 0 1
49541: PPUSH
49542: CALL_OW 250
49546: PPUSH
49547: LD_VAR 0 1
49551: PPUSH
49552: CALL_OW 251
49556: PPUSH
49557: LD_INT 10
49559: PPUSH
49560: LD_INT 0
49562: PPUSH
49563: CALL_OW 50
// continue ;
49567: GO 49468
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49569: LD_VAR 0 12
49573: PUSH
49574: LD_INT 1
49576: ARRAY
49577: PPUSH
49578: CALL_OW 313
49582: PUSH
49583: LD_VAR 0 12
49587: PUSH
49588: LD_INT 1
49590: ARRAY
49591: PPUSH
49592: CALL_OW 266
49596: PUSH
49597: LD_INT 32
49599: PUSH
49600: LD_INT 31
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: IN
49607: AND
49608: PUSH
49609: LD_VAR 0 12
49613: PUSH
49614: LD_INT 1
49616: ARRAY
49617: PPUSH
49618: CALL_OW 313
49622: PUSH
49623: LD_INT 6
49625: EQUAL
49626: OR
49627: IFFALSE 49647
// f := Delete ( f , 1 ) ;
49629: LD_ADDR_VAR 0 12
49633: PUSH
49634: LD_VAR 0 12
49638: PPUSH
49639: LD_INT 1
49641: PPUSH
49642: CALL_OW 3
49646: ST_TO_ADDR
// if not f then
49647: LD_VAR 0 12
49651: NOT
49652: IFFALSE 49670
// begin x := x + 2 ;
49654: LD_ADDR_VAR 0 13
49658: PUSH
49659: LD_VAR 0 13
49663: PUSH
49664: LD_INT 2
49666: PLUS
49667: ST_TO_ADDR
// continue ;
49668: GO 49468
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49670: LD_VAR 0 12
49674: PUSH
49675: LD_INT 1
49677: ARRAY
49678: PPUSH
49679: CALL_OW 266
49683: PUSH
49684: LD_INT 5
49686: EQUAL
49687: IFFALSE 49761
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49689: LD_VAR 0 12
49693: PUSH
49694: LD_INT 1
49696: ARRAY
49697: PPUSH
49698: CALL_OW 313
49702: PUSH
49703: LD_INT 3
49705: LESS
49706: IFFALSE 49742
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49708: LD_INT 0
49710: PPUSH
49711: LD_INT 5
49713: PUSH
49714: LD_INT 8
49716: PUSH
49717: LD_INT 9
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: LIST
49724: PUSH
49725: LD_VAR 0 17
49729: ARRAY
49730: PPUSH
49731: LD_VAR 0 4
49735: PPUSH
49736: CALL_OW 380
49740: GO 49759
// PrepareHuman ( false , i , skill ) ;
49742: LD_INT 0
49744: PPUSH
49745: LD_VAR 0 8
49749: PPUSH
49750: LD_VAR 0 4
49754: PPUSH
49755: CALL_OW 380
// end else
49759: GO 49778
// PrepareHuman ( false , i , skill ) ;
49761: LD_INT 0
49763: PPUSH
49764: LD_VAR 0 8
49768: PPUSH
49769: LD_VAR 0 4
49773: PPUSH
49774: CALL_OW 380
// un := CreateHuman ;
49778: LD_ADDR_VAR 0 14
49782: PUSH
49783: CALL_OW 44
49787: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49788: LD_ADDR_VAR 0 7
49792: PUSH
49793: LD_VAR 0 7
49797: PPUSH
49798: LD_INT 1
49800: PPUSH
49801: LD_VAR 0 14
49805: PPUSH
49806: CALL_OW 2
49810: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49811: LD_VAR 0 14
49815: PPUSH
49816: LD_VAR 0 12
49820: PUSH
49821: LD_INT 1
49823: ARRAY
49824: PPUSH
49825: CALL_OW 52
// end ;
49829: GO 49468
49831: POP
49832: POP
// end ;
49833: GO 48770
49835: POP
49836: POP
// result := result ^ buildings ;
49837: LD_ADDR_VAR 0 7
49841: PUSH
49842: LD_VAR 0 7
49846: PUSH
49847: LD_VAR 0 18
49851: ADD
49852: ST_TO_ADDR
// end else
49853: GO 49996
// begin for i = 1 to personel do
49855: LD_ADDR_VAR 0 8
49859: PUSH
49860: DOUBLE
49861: LD_INT 1
49863: DEC
49864: ST_TO_ADDR
49865: LD_VAR 0 6
49869: PUSH
49870: FOR_TO
49871: IFFALSE 49994
// begin if i > 4 then
49873: LD_VAR 0 8
49877: PUSH
49878: LD_INT 4
49880: GREATER
49881: IFFALSE 49885
// break ;
49883: GO 49994
// x := personel [ i ] ;
49885: LD_ADDR_VAR 0 13
49889: PUSH
49890: LD_VAR 0 6
49894: PUSH
49895: LD_VAR 0 8
49899: ARRAY
49900: ST_TO_ADDR
// if x = - 1 then
49901: LD_VAR 0 13
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: EQUAL
49910: IFFALSE 49914
// continue ;
49912: GO 49870
// PrepareHuman ( false , i , skill ) ;
49914: LD_INT 0
49916: PPUSH
49917: LD_VAR 0 8
49921: PPUSH
49922: LD_VAR 0 4
49926: PPUSH
49927: CALL_OW 380
// un := CreateHuman ;
49931: LD_ADDR_VAR 0 14
49935: PUSH
49936: CALL_OW 44
49940: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49941: LD_VAR 0 14
49945: PPUSH
49946: LD_VAR 0 1
49950: PPUSH
49951: CALL_OW 250
49955: PPUSH
49956: LD_VAR 0 1
49960: PPUSH
49961: CALL_OW 251
49965: PPUSH
49966: LD_INT 10
49968: PPUSH
49969: LD_INT 0
49971: PPUSH
49972: CALL_OW 50
// result := result ^ un ;
49976: LD_ADDR_VAR 0 7
49980: PUSH
49981: LD_VAR 0 7
49985: PUSH
49986: LD_VAR 0 14
49990: ADD
49991: ST_TO_ADDR
// end ;
49992: GO 49870
49994: POP
49995: POP
// end ; end ;
49996: LD_VAR 0 7
50000: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50001: LD_INT 0
50003: PPUSH
50004: PPUSH
50005: PPUSH
50006: PPUSH
50007: PPUSH
50008: PPUSH
50009: PPUSH
50010: PPUSH
50011: PPUSH
50012: PPUSH
50013: PPUSH
50014: PPUSH
50015: PPUSH
50016: PPUSH
50017: PPUSH
50018: PPUSH
// result := false ;
50019: LD_ADDR_VAR 0 3
50023: PUSH
50024: LD_INT 0
50026: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50027: LD_VAR 0 1
50031: NOT
50032: PUSH
50033: LD_VAR 0 1
50037: PPUSH
50038: CALL_OW 266
50042: PUSH
50043: LD_INT 32
50045: PUSH
50046: LD_INT 33
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: IN
50053: NOT
50054: OR
50055: IFFALSE 50059
// exit ;
50057: GO 51168
// nat := GetNation ( tower ) ;
50059: LD_ADDR_VAR 0 12
50063: PUSH
50064: LD_VAR 0 1
50068: PPUSH
50069: CALL_OW 248
50073: ST_TO_ADDR
// side := GetSide ( tower ) ;
50074: LD_ADDR_VAR 0 16
50078: PUSH
50079: LD_VAR 0 1
50083: PPUSH
50084: CALL_OW 255
50088: ST_TO_ADDR
// x := GetX ( tower ) ;
50089: LD_ADDR_VAR 0 10
50093: PUSH
50094: LD_VAR 0 1
50098: PPUSH
50099: CALL_OW 250
50103: ST_TO_ADDR
// y := GetY ( tower ) ;
50104: LD_ADDR_VAR 0 11
50108: PUSH
50109: LD_VAR 0 1
50113: PPUSH
50114: CALL_OW 251
50118: ST_TO_ADDR
// if not x or not y then
50119: LD_VAR 0 10
50123: NOT
50124: PUSH
50125: LD_VAR 0 11
50129: NOT
50130: OR
50131: IFFALSE 50135
// exit ;
50133: GO 51168
// weapon := 0 ;
50135: LD_ADDR_VAR 0 18
50139: PUSH
50140: LD_INT 0
50142: ST_TO_ADDR
// fac_list := [ ] ;
50143: LD_ADDR_VAR 0 17
50147: PUSH
50148: EMPTY
50149: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50150: LD_ADDR_VAR 0 6
50154: PUSH
50155: LD_VAR 0 1
50159: PPUSH
50160: CALL_OW 274
50164: PPUSH
50165: LD_VAR 0 2
50169: PPUSH
50170: LD_INT 0
50172: PPUSH
50173: CALL 47739 0 3
50177: PPUSH
50178: LD_INT 30
50180: PUSH
50181: LD_INT 3
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PPUSH
50188: CALL_OW 72
50192: ST_TO_ADDR
// if not factories then
50193: LD_VAR 0 6
50197: NOT
50198: IFFALSE 50202
// exit ;
50200: GO 51168
// for i in factories do
50202: LD_ADDR_VAR 0 8
50206: PUSH
50207: LD_VAR 0 6
50211: PUSH
50212: FOR_IN
50213: IFFALSE 50238
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50215: LD_ADDR_VAR 0 17
50219: PUSH
50220: LD_VAR 0 17
50224: PUSH
50225: LD_VAR 0 8
50229: PPUSH
50230: CALL_OW 478
50234: UNION
50235: ST_TO_ADDR
50236: GO 50212
50238: POP
50239: POP
// if not fac_list then
50240: LD_VAR 0 17
50244: NOT
50245: IFFALSE 50249
// exit ;
50247: GO 51168
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50249: LD_ADDR_VAR 0 5
50253: PUSH
50254: LD_INT 4
50256: PUSH
50257: LD_INT 5
50259: PUSH
50260: LD_INT 9
50262: PUSH
50263: LD_INT 10
50265: PUSH
50266: LD_INT 6
50268: PUSH
50269: LD_INT 7
50271: PUSH
50272: LD_INT 11
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 27
50286: PUSH
50287: LD_INT 28
50289: PUSH
50290: LD_INT 26
50292: PUSH
50293: LD_INT 30
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 43
50304: PUSH
50305: LD_INT 44
50307: PUSH
50308: LD_INT 46
50310: PUSH
50311: LD_INT 45
50313: PUSH
50314: LD_INT 47
50316: PUSH
50317: LD_INT 49
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: LIST
50332: PUSH
50333: LD_VAR 0 12
50337: ARRAY
50338: ST_TO_ADDR
// list := list isect fac_list ;
50339: LD_ADDR_VAR 0 5
50343: PUSH
50344: LD_VAR 0 5
50348: PUSH
50349: LD_VAR 0 17
50353: ISECT
50354: ST_TO_ADDR
// if not list then
50355: LD_VAR 0 5
50359: NOT
50360: IFFALSE 50364
// exit ;
50362: GO 51168
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50364: LD_VAR 0 12
50368: PUSH
50369: LD_INT 3
50371: EQUAL
50372: PUSH
50373: LD_INT 49
50375: PUSH
50376: LD_VAR 0 5
50380: IN
50381: AND
50382: PUSH
50383: LD_INT 31
50385: PPUSH
50386: LD_VAR 0 16
50390: PPUSH
50391: CALL_OW 321
50395: PUSH
50396: LD_INT 2
50398: EQUAL
50399: AND
50400: IFFALSE 50460
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50402: LD_INT 22
50404: PUSH
50405: LD_VAR 0 16
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 35
50416: PUSH
50417: LD_INT 49
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 91
50426: PUSH
50427: LD_VAR 0 1
50431: PUSH
50432: LD_INT 10
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: LIST
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: PPUSH
50445: CALL_OW 69
50449: NOT
50450: IFFALSE 50460
// weapon := ru_time_lapser ;
50452: LD_ADDR_VAR 0 18
50456: PUSH
50457: LD_INT 49
50459: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50460: LD_VAR 0 12
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: IN
50475: PUSH
50476: LD_INT 11
50478: PUSH
50479: LD_VAR 0 5
50483: IN
50484: PUSH
50485: LD_INT 30
50487: PUSH
50488: LD_VAR 0 5
50492: IN
50493: OR
50494: AND
50495: PUSH
50496: LD_INT 6
50498: PPUSH
50499: LD_VAR 0 16
50503: PPUSH
50504: CALL_OW 321
50508: PUSH
50509: LD_INT 2
50511: EQUAL
50512: AND
50513: IFFALSE 50678
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50515: LD_INT 22
50517: PUSH
50518: LD_VAR 0 16
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 2
50529: PUSH
50530: LD_INT 35
50532: PUSH
50533: LD_INT 11
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 35
50542: PUSH
50543: LD_INT 30
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 91
50557: PUSH
50558: LD_VAR 0 1
50562: PUSH
50563: LD_INT 18
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: LIST
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: LIST
50575: PPUSH
50576: CALL_OW 69
50580: NOT
50581: PUSH
50582: LD_INT 22
50584: PUSH
50585: LD_VAR 0 16
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: PUSH
50597: LD_INT 30
50599: PUSH
50600: LD_INT 32
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 30
50609: PUSH
50610: LD_INT 33
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 91
50624: PUSH
50625: LD_VAR 0 1
50629: PUSH
50630: LD_INT 12
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: LIST
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: LIST
50642: PUSH
50643: EMPTY
50644: LIST
50645: PPUSH
50646: CALL_OW 69
50650: PUSH
50651: LD_INT 2
50653: GREATER
50654: AND
50655: IFFALSE 50678
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50657: LD_ADDR_VAR 0 18
50661: PUSH
50662: LD_INT 11
50664: PUSH
50665: LD_INT 30
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_VAR 0 12
50676: ARRAY
50677: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50678: LD_VAR 0 18
50682: NOT
50683: PUSH
50684: LD_INT 40
50686: PPUSH
50687: LD_VAR 0 16
50691: PPUSH
50692: CALL_OW 321
50696: PUSH
50697: LD_INT 2
50699: EQUAL
50700: AND
50701: PUSH
50702: LD_INT 7
50704: PUSH
50705: LD_VAR 0 5
50709: IN
50710: PUSH
50711: LD_INT 28
50713: PUSH
50714: LD_VAR 0 5
50718: IN
50719: OR
50720: PUSH
50721: LD_INT 45
50723: PUSH
50724: LD_VAR 0 5
50728: IN
50729: OR
50730: AND
50731: IFFALSE 50985
// begin hex := GetHexInfo ( x , y ) ;
50733: LD_ADDR_VAR 0 4
50737: PUSH
50738: LD_VAR 0 10
50742: PPUSH
50743: LD_VAR 0 11
50747: PPUSH
50748: CALL_OW 546
50752: ST_TO_ADDR
// if hex [ 1 ] then
50753: LD_VAR 0 4
50757: PUSH
50758: LD_INT 1
50760: ARRAY
50761: IFFALSE 50765
// exit ;
50763: GO 51168
// height := hex [ 2 ] ;
50765: LD_ADDR_VAR 0 15
50769: PUSH
50770: LD_VAR 0 4
50774: PUSH
50775: LD_INT 2
50777: ARRAY
50778: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50779: LD_ADDR_VAR 0 14
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 2
50789: PUSH
50790: LD_INT 3
50792: PUSH
50793: LD_INT 5
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: ST_TO_ADDR
// for i in tmp do
50802: LD_ADDR_VAR 0 8
50806: PUSH
50807: LD_VAR 0 14
50811: PUSH
50812: FOR_IN
50813: IFFALSE 50983
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50815: LD_ADDR_VAR 0 9
50819: PUSH
50820: LD_VAR 0 10
50824: PPUSH
50825: LD_VAR 0 8
50829: PPUSH
50830: LD_INT 5
50832: PPUSH
50833: CALL_OW 272
50837: PUSH
50838: LD_VAR 0 11
50842: PPUSH
50843: LD_VAR 0 8
50847: PPUSH
50848: LD_INT 5
50850: PPUSH
50851: CALL_OW 273
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50860: LD_VAR 0 9
50864: PUSH
50865: LD_INT 1
50867: ARRAY
50868: PPUSH
50869: LD_VAR 0 9
50873: PUSH
50874: LD_INT 2
50876: ARRAY
50877: PPUSH
50878: CALL_OW 488
50882: IFFALSE 50981
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50884: LD_ADDR_VAR 0 4
50888: PUSH
50889: LD_VAR 0 9
50893: PUSH
50894: LD_INT 1
50896: ARRAY
50897: PPUSH
50898: LD_VAR 0 9
50902: PUSH
50903: LD_INT 2
50905: ARRAY
50906: PPUSH
50907: CALL_OW 546
50911: ST_TO_ADDR
// if hex [ 1 ] then
50912: LD_VAR 0 4
50916: PUSH
50917: LD_INT 1
50919: ARRAY
50920: IFFALSE 50924
// continue ;
50922: GO 50812
// h := hex [ 2 ] ;
50924: LD_ADDR_VAR 0 13
50928: PUSH
50929: LD_VAR 0 4
50933: PUSH
50934: LD_INT 2
50936: ARRAY
50937: ST_TO_ADDR
// if h + 7 < height then
50938: LD_VAR 0 13
50942: PUSH
50943: LD_INT 7
50945: PLUS
50946: PUSH
50947: LD_VAR 0 15
50951: LESS
50952: IFFALSE 50981
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50954: LD_ADDR_VAR 0 18
50958: PUSH
50959: LD_INT 7
50961: PUSH
50962: LD_INT 28
50964: PUSH
50965: LD_INT 45
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: LIST
50972: PUSH
50973: LD_VAR 0 12
50977: ARRAY
50978: ST_TO_ADDR
// break ;
50979: GO 50983
// end ; end ; end ;
50981: GO 50812
50983: POP
50984: POP
// end ; if not weapon then
50985: LD_VAR 0 18
50989: NOT
50990: IFFALSE 51050
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50992: LD_ADDR_VAR 0 5
50996: PUSH
50997: LD_VAR 0 5
51001: PUSH
51002: LD_INT 11
51004: PUSH
51005: LD_INT 30
51007: PUSH
51008: LD_INT 49
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: LIST
51015: DIFF
51016: ST_TO_ADDR
// if not list then
51017: LD_VAR 0 5
51021: NOT
51022: IFFALSE 51026
// exit ;
51024: GO 51168
// weapon := list [ rand ( 1 , list ) ] ;
51026: LD_ADDR_VAR 0 18
51030: PUSH
51031: LD_VAR 0 5
51035: PUSH
51036: LD_INT 1
51038: PPUSH
51039: LD_VAR 0 5
51043: PPUSH
51044: CALL_OW 12
51048: ARRAY
51049: ST_TO_ADDR
// end ; if weapon then
51050: LD_VAR 0 18
51054: IFFALSE 51168
// begin tmp := CostOfWeapon ( weapon ) ;
51056: LD_ADDR_VAR 0 14
51060: PUSH
51061: LD_VAR 0 18
51065: PPUSH
51066: CALL_OW 451
51070: ST_TO_ADDR
// j := GetBase ( tower ) ;
51071: LD_ADDR_VAR 0 9
51075: PUSH
51076: LD_VAR 0 1
51080: PPUSH
51081: CALL_OW 274
51085: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51086: LD_VAR 0 9
51090: PPUSH
51091: LD_INT 1
51093: PPUSH
51094: CALL_OW 275
51098: PUSH
51099: LD_VAR 0 14
51103: PUSH
51104: LD_INT 1
51106: ARRAY
51107: GREATEREQUAL
51108: PUSH
51109: LD_VAR 0 9
51113: PPUSH
51114: LD_INT 2
51116: PPUSH
51117: CALL_OW 275
51121: PUSH
51122: LD_VAR 0 14
51126: PUSH
51127: LD_INT 2
51129: ARRAY
51130: GREATEREQUAL
51131: AND
51132: PUSH
51133: LD_VAR 0 9
51137: PPUSH
51138: LD_INT 3
51140: PPUSH
51141: CALL_OW 275
51145: PUSH
51146: LD_VAR 0 14
51150: PUSH
51151: LD_INT 3
51153: ARRAY
51154: GREATEREQUAL
51155: AND
51156: IFFALSE 51168
// result := weapon ;
51158: LD_ADDR_VAR 0 3
51162: PUSH
51163: LD_VAR 0 18
51167: ST_TO_ADDR
// end ; end ;
51168: LD_VAR 0 3
51172: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51173: LD_INT 0
51175: PPUSH
51176: PPUSH
// result := true ;
51177: LD_ADDR_VAR 0 3
51181: PUSH
51182: LD_INT 1
51184: ST_TO_ADDR
// if array1 = array2 then
51185: LD_VAR 0 1
51189: PUSH
51190: LD_VAR 0 2
51194: EQUAL
51195: IFFALSE 51255
// begin for i = 1 to array1 do
51197: LD_ADDR_VAR 0 4
51201: PUSH
51202: DOUBLE
51203: LD_INT 1
51205: DEC
51206: ST_TO_ADDR
51207: LD_VAR 0 1
51211: PUSH
51212: FOR_TO
51213: IFFALSE 51251
// if array1 [ i ] <> array2 [ i ] then
51215: LD_VAR 0 1
51219: PUSH
51220: LD_VAR 0 4
51224: ARRAY
51225: PUSH
51226: LD_VAR 0 2
51230: PUSH
51231: LD_VAR 0 4
51235: ARRAY
51236: NONEQUAL
51237: IFFALSE 51249
// begin result := false ;
51239: LD_ADDR_VAR 0 3
51243: PUSH
51244: LD_INT 0
51246: ST_TO_ADDR
// break ;
51247: GO 51251
// end ;
51249: GO 51212
51251: POP
51252: POP
// end else
51253: GO 51263
// result := false ;
51255: LD_ADDR_VAR 0 3
51259: PUSH
51260: LD_INT 0
51262: ST_TO_ADDR
// end ;
51263: LD_VAR 0 3
51267: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51268: LD_INT 0
51270: PPUSH
51271: PPUSH
// if not array1 or not array2 then
51272: LD_VAR 0 1
51276: NOT
51277: PUSH
51278: LD_VAR 0 2
51282: NOT
51283: OR
51284: IFFALSE 51288
// exit ;
51286: GO 51352
// result := true ;
51288: LD_ADDR_VAR 0 3
51292: PUSH
51293: LD_INT 1
51295: ST_TO_ADDR
// for i = 1 to array1 do
51296: LD_ADDR_VAR 0 4
51300: PUSH
51301: DOUBLE
51302: LD_INT 1
51304: DEC
51305: ST_TO_ADDR
51306: LD_VAR 0 1
51310: PUSH
51311: FOR_TO
51312: IFFALSE 51350
// if array1 [ i ] <> array2 [ i ] then
51314: LD_VAR 0 1
51318: PUSH
51319: LD_VAR 0 4
51323: ARRAY
51324: PUSH
51325: LD_VAR 0 2
51329: PUSH
51330: LD_VAR 0 4
51334: ARRAY
51335: NONEQUAL
51336: IFFALSE 51348
// begin result := false ;
51338: LD_ADDR_VAR 0 3
51342: PUSH
51343: LD_INT 0
51345: ST_TO_ADDR
// break ;
51346: GO 51350
// end ;
51348: GO 51311
51350: POP
51351: POP
// end ;
51352: LD_VAR 0 3
51356: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51357: LD_INT 0
51359: PPUSH
51360: PPUSH
51361: PPUSH
// pom := GetBase ( fac ) ;
51362: LD_ADDR_VAR 0 5
51366: PUSH
51367: LD_VAR 0 1
51371: PPUSH
51372: CALL_OW 274
51376: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51377: LD_ADDR_VAR 0 4
51381: PUSH
51382: LD_VAR 0 2
51386: PUSH
51387: LD_INT 1
51389: ARRAY
51390: PPUSH
51391: LD_VAR 0 2
51395: PUSH
51396: LD_INT 2
51398: ARRAY
51399: PPUSH
51400: LD_VAR 0 2
51404: PUSH
51405: LD_INT 3
51407: ARRAY
51408: PPUSH
51409: LD_VAR 0 2
51413: PUSH
51414: LD_INT 4
51416: ARRAY
51417: PPUSH
51418: CALL_OW 449
51422: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51423: LD_ADDR_VAR 0 3
51427: PUSH
51428: LD_VAR 0 5
51432: PPUSH
51433: LD_INT 1
51435: PPUSH
51436: CALL_OW 275
51440: PUSH
51441: LD_VAR 0 4
51445: PUSH
51446: LD_INT 1
51448: ARRAY
51449: GREATEREQUAL
51450: PUSH
51451: LD_VAR 0 5
51455: PPUSH
51456: LD_INT 2
51458: PPUSH
51459: CALL_OW 275
51463: PUSH
51464: LD_VAR 0 4
51468: PUSH
51469: LD_INT 2
51471: ARRAY
51472: GREATEREQUAL
51473: AND
51474: PUSH
51475: LD_VAR 0 5
51479: PPUSH
51480: LD_INT 3
51482: PPUSH
51483: CALL_OW 275
51487: PUSH
51488: LD_VAR 0 4
51492: PUSH
51493: LD_INT 3
51495: ARRAY
51496: GREATEREQUAL
51497: AND
51498: ST_TO_ADDR
// end ;
51499: LD_VAR 0 3
51503: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51504: LD_INT 0
51506: PPUSH
51507: PPUSH
51508: PPUSH
51509: PPUSH
// pom := GetBase ( building ) ;
51510: LD_ADDR_VAR 0 3
51514: PUSH
51515: LD_VAR 0 1
51519: PPUSH
51520: CALL_OW 274
51524: ST_TO_ADDR
// if not pom then
51525: LD_VAR 0 3
51529: NOT
51530: IFFALSE 51534
// exit ;
51532: GO 51704
// btype := GetBType ( building ) ;
51534: LD_ADDR_VAR 0 5
51538: PUSH
51539: LD_VAR 0 1
51543: PPUSH
51544: CALL_OW 266
51548: ST_TO_ADDR
// if btype = b_armoury then
51549: LD_VAR 0 5
51553: PUSH
51554: LD_INT 4
51556: EQUAL
51557: IFFALSE 51567
// btype := b_barracks ;
51559: LD_ADDR_VAR 0 5
51563: PUSH
51564: LD_INT 5
51566: ST_TO_ADDR
// if btype = b_depot then
51567: LD_VAR 0 5
51571: PUSH
51572: LD_INT 0
51574: EQUAL
51575: IFFALSE 51585
// btype := b_warehouse ;
51577: LD_ADDR_VAR 0 5
51581: PUSH
51582: LD_INT 1
51584: ST_TO_ADDR
// if btype = b_workshop then
51585: LD_VAR 0 5
51589: PUSH
51590: LD_INT 2
51592: EQUAL
51593: IFFALSE 51603
// btype := b_factory ;
51595: LD_ADDR_VAR 0 5
51599: PUSH
51600: LD_INT 3
51602: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51603: LD_ADDR_VAR 0 4
51607: PUSH
51608: LD_VAR 0 5
51612: PPUSH
51613: LD_VAR 0 1
51617: PPUSH
51618: CALL_OW 248
51622: PPUSH
51623: CALL_OW 450
51627: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51628: LD_ADDR_VAR 0 2
51632: PUSH
51633: LD_VAR 0 3
51637: PPUSH
51638: LD_INT 1
51640: PPUSH
51641: CALL_OW 275
51645: PUSH
51646: LD_VAR 0 4
51650: PUSH
51651: LD_INT 1
51653: ARRAY
51654: GREATEREQUAL
51655: PUSH
51656: LD_VAR 0 3
51660: PPUSH
51661: LD_INT 2
51663: PPUSH
51664: CALL_OW 275
51668: PUSH
51669: LD_VAR 0 4
51673: PUSH
51674: LD_INT 2
51676: ARRAY
51677: GREATEREQUAL
51678: AND
51679: PUSH
51680: LD_VAR 0 3
51684: PPUSH
51685: LD_INT 3
51687: PPUSH
51688: CALL_OW 275
51692: PUSH
51693: LD_VAR 0 4
51697: PUSH
51698: LD_INT 3
51700: ARRAY
51701: GREATEREQUAL
51702: AND
51703: ST_TO_ADDR
// end ;
51704: LD_VAR 0 2
51708: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51709: LD_INT 0
51711: PPUSH
51712: PPUSH
51713: PPUSH
// pom := GetBase ( building ) ;
51714: LD_ADDR_VAR 0 4
51718: PUSH
51719: LD_VAR 0 1
51723: PPUSH
51724: CALL_OW 274
51728: ST_TO_ADDR
// if not pom then
51729: LD_VAR 0 4
51733: NOT
51734: IFFALSE 51738
// exit ;
51736: GO 51839
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51738: LD_ADDR_VAR 0 5
51742: PUSH
51743: LD_VAR 0 2
51747: PPUSH
51748: LD_VAR 0 1
51752: PPUSH
51753: CALL_OW 248
51757: PPUSH
51758: CALL_OW 450
51762: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51763: LD_ADDR_VAR 0 3
51767: PUSH
51768: LD_VAR 0 4
51772: PPUSH
51773: LD_INT 1
51775: PPUSH
51776: CALL_OW 275
51780: PUSH
51781: LD_VAR 0 5
51785: PUSH
51786: LD_INT 1
51788: ARRAY
51789: GREATEREQUAL
51790: PUSH
51791: LD_VAR 0 4
51795: PPUSH
51796: LD_INT 2
51798: PPUSH
51799: CALL_OW 275
51803: PUSH
51804: LD_VAR 0 5
51808: PUSH
51809: LD_INT 2
51811: ARRAY
51812: GREATEREQUAL
51813: AND
51814: PUSH
51815: LD_VAR 0 4
51819: PPUSH
51820: LD_INT 3
51822: PPUSH
51823: CALL_OW 275
51827: PUSH
51828: LD_VAR 0 5
51832: PUSH
51833: LD_INT 3
51835: ARRAY
51836: GREATEREQUAL
51837: AND
51838: ST_TO_ADDR
// end ;
51839: LD_VAR 0 3
51843: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51844: LD_INT 0
51846: PPUSH
51847: PPUSH
51848: PPUSH
51849: PPUSH
51850: PPUSH
51851: PPUSH
51852: PPUSH
51853: PPUSH
51854: PPUSH
51855: PPUSH
51856: PPUSH
// result := false ;
51857: LD_ADDR_VAR 0 8
51861: PUSH
51862: LD_INT 0
51864: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51865: LD_VAR 0 5
51869: NOT
51870: PUSH
51871: LD_VAR 0 1
51875: NOT
51876: OR
51877: PUSH
51878: LD_VAR 0 2
51882: NOT
51883: OR
51884: PUSH
51885: LD_VAR 0 3
51889: NOT
51890: OR
51891: IFFALSE 51895
// exit ;
51893: GO 52709
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51895: LD_ADDR_VAR 0 14
51899: PUSH
51900: LD_VAR 0 1
51904: PPUSH
51905: LD_VAR 0 2
51909: PPUSH
51910: LD_VAR 0 3
51914: PPUSH
51915: LD_VAR 0 4
51919: PPUSH
51920: LD_VAR 0 5
51924: PUSH
51925: LD_INT 1
51927: ARRAY
51928: PPUSH
51929: CALL_OW 248
51933: PPUSH
51934: LD_INT 0
51936: PPUSH
51937: CALL 53946 0 6
51941: ST_TO_ADDR
// if not hexes then
51942: LD_VAR 0 14
51946: NOT
51947: IFFALSE 51951
// exit ;
51949: GO 52709
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51951: LD_ADDR_VAR 0 17
51955: PUSH
51956: LD_VAR 0 5
51960: PPUSH
51961: LD_INT 22
51963: PUSH
51964: LD_VAR 0 13
51968: PPUSH
51969: CALL_OW 255
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: LD_INT 30
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 30
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: LIST
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PPUSH
52010: CALL_OW 72
52014: ST_TO_ADDR
// for i = 1 to hexes do
52015: LD_ADDR_VAR 0 9
52019: PUSH
52020: DOUBLE
52021: LD_INT 1
52023: DEC
52024: ST_TO_ADDR
52025: LD_VAR 0 14
52029: PUSH
52030: FOR_TO
52031: IFFALSE 52707
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52033: LD_ADDR_VAR 0 13
52037: PUSH
52038: LD_VAR 0 14
52042: PUSH
52043: LD_VAR 0 9
52047: ARRAY
52048: PUSH
52049: LD_INT 1
52051: ARRAY
52052: PPUSH
52053: LD_VAR 0 14
52057: PUSH
52058: LD_VAR 0 9
52062: ARRAY
52063: PUSH
52064: LD_INT 2
52066: ARRAY
52067: PPUSH
52068: CALL_OW 428
52072: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52073: LD_VAR 0 14
52077: PUSH
52078: LD_VAR 0 9
52082: ARRAY
52083: PUSH
52084: LD_INT 1
52086: ARRAY
52087: PPUSH
52088: LD_VAR 0 14
52092: PUSH
52093: LD_VAR 0 9
52097: ARRAY
52098: PUSH
52099: LD_INT 2
52101: ARRAY
52102: PPUSH
52103: CALL_OW 351
52107: PUSH
52108: LD_VAR 0 14
52112: PUSH
52113: LD_VAR 0 9
52117: ARRAY
52118: PUSH
52119: LD_INT 1
52121: ARRAY
52122: PPUSH
52123: LD_VAR 0 14
52127: PUSH
52128: LD_VAR 0 9
52132: ARRAY
52133: PUSH
52134: LD_INT 2
52136: ARRAY
52137: PPUSH
52138: CALL_OW 488
52142: NOT
52143: OR
52144: PUSH
52145: LD_VAR 0 13
52149: PPUSH
52150: CALL_OW 247
52154: PUSH
52155: LD_INT 3
52157: EQUAL
52158: OR
52159: IFFALSE 52165
// exit ;
52161: POP
52162: POP
52163: GO 52709
// if not tmp then
52165: LD_VAR 0 13
52169: NOT
52170: IFFALSE 52174
// continue ;
52172: GO 52030
// result := true ;
52174: LD_ADDR_VAR 0 8
52178: PUSH
52179: LD_INT 1
52181: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52182: LD_VAR 0 6
52186: PUSH
52187: LD_VAR 0 13
52191: PPUSH
52192: CALL_OW 247
52196: PUSH
52197: LD_INT 2
52199: EQUAL
52200: AND
52201: PUSH
52202: LD_VAR 0 13
52206: PPUSH
52207: CALL_OW 263
52211: PUSH
52212: LD_INT 1
52214: EQUAL
52215: AND
52216: IFFALSE 52380
// begin if IsDrivenBy ( tmp ) then
52218: LD_VAR 0 13
52222: PPUSH
52223: CALL_OW 311
52227: IFFALSE 52231
// continue ;
52229: GO 52030
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52231: LD_VAR 0 6
52235: PPUSH
52236: LD_INT 3
52238: PUSH
52239: LD_INT 60
52241: PUSH
52242: EMPTY
52243: LIST
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 3
52251: PUSH
52252: LD_INT 55
52254: PUSH
52255: EMPTY
52256: LIST
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PPUSH
52266: CALL_OW 72
52270: IFFALSE 52378
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52272: LD_ADDR_VAR 0 18
52276: PUSH
52277: LD_VAR 0 6
52281: PPUSH
52282: LD_INT 3
52284: PUSH
52285: LD_INT 60
52287: PUSH
52288: EMPTY
52289: LIST
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 3
52297: PUSH
52298: LD_INT 55
52300: PUSH
52301: EMPTY
52302: LIST
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PPUSH
52312: CALL_OW 72
52316: PUSH
52317: LD_INT 1
52319: ARRAY
52320: ST_TO_ADDR
// if IsInUnit ( driver ) then
52321: LD_VAR 0 18
52325: PPUSH
52326: CALL_OW 310
52330: IFFALSE 52341
// ComExit ( driver ) ;
52332: LD_VAR 0 18
52336: PPUSH
52337: CALL 77651 0 1
// AddComEnterUnit ( driver , tmp ) ;
52341: LD_VAR 0 18
52345: PPUSH
52346: LD_VAR 0 13
52350: PPUSH
52351: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52355: LD_VAR 0 18
52359: PPUSH
52360: LD_VAR 0 7
52364: PPUSH
52365: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52369: LD_VAR 0 18
52373: PPUSH
52374: CALL_OW 181
// end ; continue ;
52378: GO 52030
// end ; if not cleaners or not tmp in cleaners then
52380: LD_VAR 0 6
52384: NOT
52385: PUSH
52386: LD_VAR 0 13
52390: PUSH
52391: LD_VAR 0 6
52395: IN
52396: NOT
52397: OR
52398: IFFALSE 52705
// begin if dep then
52400: LD_VAR 0 17
52404: IFFALSE 52540
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52406: LD_ADDR_VAR 0 16
52410: PUSH
52411: LD_VAR 0 17
52415: PUSH
52416: LD_INT 1
52418: ARRAY
52419: PPUSH
52420: CALL_OW 250
52424: PPUSH
52425: LD_VAR 0 17
52429: PUSH
52430: LD_INT 1
52432: ARRAY
52433: PPUSH
52434: CALL_OW 254
52438: PPUSH
52439: LD_INT 5
52441: PPUSH
52442: CALL_OW 272
52446: PUSH
52447: LD_VAR 0 17
52451: PUSH
52452: LD_INT 1
52454: ARRAY
52455: PPUSH
52456: CALL_OW 251
52460: PPUSH
52461: LD_VAR 0 17
52465: PUSH
52466: LD_INT 1
52468: ARRAY
52469: PPUSH
52470: CALL_OW 254
52474: PPUSH
52475: LD_INT 5
52477: PPUSH
52478: CALL_OW 273
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52487: LD_VAR 0 16
52491: PUSH
52492: LD_INT 1
52494: ARRAY
52495: PPUSH
52496: LD_VAR 0 16
52500: PUSH
52501: LD_INT 2
52503: ARRAY
52504: PPUSH
52505: CALL_OW 488
52509: IFFALSE 52540
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52511: LD_VAR 0 13
52515: PPUSH
52516: LD_VAR 0 16
52520: PUSH
52521: LD_INT 1
52523: ARRAY
52524: PPUSH
52525: LD_VAR 0 16
52529: PUSH
52530: LD_INT 2
52532: ARRAY
52533: PPUSH
52534: CALL_OW 111
// continue ;
52538: GO 52030
// end ; end ; r := GetDir ( tmp ) ;
52540: LD_ADDR_VAR 0 15
52544: PUSH
52545: LD_VAR 0 13
52549: PPUSH
52550: CALL_OW 254
52554: ST_TO_ADDR
// if r = 5 then
52555: LD_VAR 0 15
52559: PUSH
52560: LD_INT 5
52562: EQUAL
52563: IFFALSE 52573
// r := 0 ;
52565: LD_ADDR_VAR 0 15
52569: PUSH
52570: LD_INT 0
52572: ST_TO_ADDR
// for j = r to 5 do
52573: LD_ADDR_VAR 0 10
52577: PUSH
52578: DOUBLE
52579: LD_VAR 0 15
52583: DEC
52584: ST_TO_ADDR
52585: LD_INT 5
52587: PUSH
52588: FOR_TO
52589: IFFALSE 52703
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52591: LD_ADDR_VAR 0 11
52595: PUSH
52596: LD_VAR 0 13
52600: PPUSH
52601: CALL_OW 250
52605: PPUSH
52606: LD_VAR 0 10
52610: PPUSH
52611: LD_INT 2
52613: PPUSH
52614: CALL_OW 272
52618: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52619: LD_ADDR_VAR 0 12
52623: PUSH
52624: LD_VAR 0 13
52628: PPUSH
52629: CALL_OW 251
52633: PPUSH
52634: LD_VAR 0 10
52638: PPUSH
52639: LD_INT 2
52641: PPUSH
52642: CALL_OW 273
52646: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52647: LD_VAR 0 11
52651: PPUSH
52652: LD_VAR 0 12
52656: PPUSH
52657: CALL_OW 488
52661: PUSH
52662: LD_VAR 0 11
52666: PPUSH
52667: LD_VAR 0 12
52671: PPUSH
52672: CALL_OW 428
52676: NOT
52677: AND
52678: IFFALSE 52701
// begin ComMoveXY ( tmp , _x , _y ) ;
52680: LD_VAR 0 13
52684: PPUSH
52685: LD_VAR 0 11
52689: PPUSH
52690: LD_VAR 0 12
52694: PPUSH
52695: CALL_OW 111
// break ;
52699: GO 52703
// end ; end ;
52701: GO 52588
52703: POP
52704: POP
// end ; end ;
52705: GO 52030
52707: POP
52708: POP
// end ;
52709: LD_VAR 0 8
52713: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52714: LD_INT 0
52716: PPUSH
// result := true ;
52717: LD_ADDR_VAR 0 3
52721: PUSH
52722: LD_INT 1
52724: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52725: LD_VAR 0 2
52729: PUSH
52730: LD_INT 24
52732: DOUBLE
52733: EQUAL
52734: IFTRUE 52744
52736: LD_INT 33
52738: DOUBLE
52739: EQUAL
52740: IFTRUE 52744
52742: GO 52769
52744: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52745: LD_ADDR_VAR 0 3
52749: PUSH
52750: LD_INT 32
52752: PPUSH
52753: LD_VAR 0 1
52757: PPUSH
52758: CALL_OW 321
52762: PUSH
52763: LD_INT 2
52765: EQUAL
52766: ST_TO_ADDR
52767: GO 53089
52769: LD_INT 20
52771: DOUBLE
52772: EQUAL
52773: IFTRUE 52777
52775: GO 52802
52777: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52778: LD_ADDR_VAR 0 3
52782: PUSH
52783: LD_INT 6
52785: PPUSH
52786: LD_VAR 0 1
52790: PPUSH
52791: CALL_OW 321
52795: PUSH
52796: LD_INT 2
52798: EQUAL
52799: ST_TO_ADDR
52800: GO 53089
52802: LD_INT 22
52804: DOUBLE
52805: EQUAL
52806: IFTRUE 52816
52808: LD_INT 36
52810: DOUBLE
52811: EQUAL
52812: IFTRUE 52816
52814: GO 52841
52816: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52817: LD_ADDR_VAR 0 3
52821: PUSH
52822: LD_INT 15
52824: PPUSH
52825: LD_VAR 0 1
52829: PPUSH
52830: CALL_OW 321
52834: PUSH
52835: LD_INT 2
52837: EQUAL
52838: ST_TO_ADDR
52839: GO 53089
52841: LD_INT 30
52843: DOUBLE
52844: EQUAL
52845: IFTRUE 52849
52847: GO 52874
52849: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52850: LD_ADDR_VAR 0 3
52854: PUSH
52855: LD_INT 20
52857: PPUSH
52858: LD_VAR 0 1
52862: PPUSH
52863: CALL_OW 321
52867: PUSH
52868: LD_INT 2
52870: EQUAL
52871: ST_TO_ADDR
52872: GO 53089
52874: LD_INT 28
52876: DOUBLE
52877: EQUAL
52878: IFTRUE 52888
52880: LD_INT 21
52882: DOUBLE
52883: EQUAL
52884: IFTRUE 52888
52886: GO 52913
52888: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52889: LD_ADDR_VAR 0 3
52893: PUSH
52894: LD_INT 21
52896: PPUSH
52897: LD_VAR 0 1
52901: PPUSH
52902: CALL_OW 321
52906: PUSH
52907: LD_INT 2
52909: EQUAL
52910: ST_TO_ADDR
52911: GO 53089
52913: LD_INT 16
52915: DOUBLE
52916: EQUAL
52917: IFTRUE 52921
52919: GO 52948
52921: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52922: LD_ADDR_VAR 0 3
52926: PUSH
52927: LD_EXP 63
52931: PPUSH
52932: LD_VAR 0 1
52936: PPUSH
52937: CALL_OW 321
52941: PUSH
52942: LD_INT 2
52944: EQUAL
52945: ST_TO_ADDR
52946: GO 53089
52948: LD_INT 19
52950: DOUBLE
52951: EQUAL
52952: IFTRUE 52962
52954: LD_INT 23
52956: DOUBLE
52957: EQUAL
52958: IFTRUE 52962
52960: GO 52989
52962: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52963: LD_ADDR_VAR 0 3
52967: PUSH
52968: LD_EXP 62
52972: PPUSH
52973: LD_VAR 0 1
52977: PPUSH
52978: CALL_OW 321
52982: PUSH
52983: LD_INT 2
52985: EQUAL
52986: ST_TO_ADDR
52987: GO 53089
52989: LD_INT 17
52991: DOUBLE
52992: EQUAL
52993: IFTRUE 52997
52995: GO 53022
52997: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52998: LD_ADDR_VAR 0 3
53002: PUSH
53003: LD_INT 39
53005: PPUSH
53006: LD_VAR 0 1
53010: PPUSH
53011: CALL_OW 321
53015: PUSH
53016: LD_INT 2
53018: EQUAL
53019: ST_TO_ADDR
53020: GO 53089
53022: LD_INT 18
53024: DOUBLE
53025: EQUAL
53026: IFTRUE 53030
53028: GO 53055
53030: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53031: LD_ADDR_VAR 0 3
53035: PUSH
53036: LD_INT 40
53038: PPUSH
53039: LD_VAR 0 1
53043: PPUSH
53044: CALL_OW 321
53048: PUSH
53049: LD_INT 2
53051: EQUAL
53052: ST_TO_ADDR
53053: GO 53089
53055: LD_INT 27
53057: DOUBLE
53058: EQUAL
53059: IFTRUE 53063
53061: GO 53088
53063: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53064: LD_ADDR_VAR 0 3
53068: PUSH
53069: LD_INT 35
53071: PPUSH
53072: LD_VAR 0 1
53076: PPUSH
53077: CALL_OW 321
53081: PUSH
53082: LD_INT 2
53084: EQUAL
53085: ST_TO_ADDR
53086: GO 53089
53088: POP
// end ;
53089: LD_VAR 0 3
53093: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53094: LD_INT 0
53096: PPUSH
53097: PPUSH
53098: PPUSH
53099: PPUSH
53100: PPUSH
53101: PPUSH
53102: PPUSH
53103: PPUSH
53104: PPUSH
53105: PPUSH
53106: PPUSH
// result := false ;
53107: LD_ADDR_VAR 0 6
53111: PUSH
53112: LD_INT 0
53114: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53115: LD_VAR 0 1
53119: NOT
53120: PUSH
53121: LD_VAR 0 1
53125: PPUSH
53126: CALL_OW 266
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: IN
53141: NOT
53142: OR
53143: PUSH
53144: LD_VAR 0 2
53148: NOT
53149: OR
53150: PUSH
53151: LD_VAR 0 5
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: LD_INT 4
53170: PUSH
53171: LD_INT 5
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: IN
53182: NOT
53183: OR
53184: PUSH
53185: LD_VAR 0 3
53189: PPUSH
53190: LD_VAR 0 4
53194: PPUSH
53195: CALL_OW 488
53199: NOT
53200: OR
53201: IFFALSE 53205
// exit ;
53203: GO 53941
// side := GetSide ( depot ) ;
53205: LD_ADDR_VAR 0 9
53209: PUSH
53210: LD_VAR 0 1
53214: PPUSH
53215: CALL_OW 255
53219: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53220: LD_VAR 0 9
53224: PPUSH
53225: LD_VAR 0 2
53229: PPUSH
53230: CALL 52714 0 2
53234: NOT
53235: IFFALSE 53239
// exit ;
53237: GO 53941
// pom := GetBase ( depot ) ;
53239: LD_ADDR_VAR 0 10
53243: PUSH
53244: LD_VAR 0 1
53248: PPUSH
53249: CALL_OW 274
53253: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53254: LD_ADDR_VAR 0 11
53258: PUSH
53259: LD_VAR 0 2
53263: PPUSH
53264: LD_VAR 0 1
53268: PPUSH
53269: CALL_OW 248
53273: PPUSH
53274: CALL_OW 450
53278: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53279: LD_VAR 0 10
53283: PPUSH
53284: LD_INT 1
53286: PPUSH
53287: CALL_OW 275
53291: PUSH
53292: LD_VAR 0 11
53296: PUSH
53297: LD_INT 1
53299: ARRAY
53300: GREATEREQUAL
53301: PUSH
53302: LD_VAR 0 10
53306: PPUSH
53307: LD_INT 2
53309: PPUSH
53310: CALL_OW 275
53314: PUSH
53315: LD_VAR 0 11
53319: PUSH
53320: LD_INT 2
53322: ARRAY
53323: GREATEREQUAL
53324: AND
53325: PUSH
53326: LD_VAR 0 10
53330: PPUSH
53331: LD_INT 3
53333: PPUSH
53334: CALL_OW 275
53338: PUSH
53339: LD_VAR 0 11
53343: PUSH
53344: LD_INT 3
53346: ARRAY
53347: GREATEREQUAL
53348: AND
53349: NOT
53350: IFFALSE 53354
// exit ;
53352: GO 53941
// if GetBType ( depot ) = b_depot then
53354: LD_VAR 0 1
53358: PPUSH
53359: CALL_OW 266
53363: PUSH
53364: LD_INT 0
53366: EQUAL
53367: IFFALSE 53379
// dist := 28 else
53369: LD_ADDR_VAR 0 14
53373: PUSH
53374: LD_INT 28
53376: ST_TO_ADDR
53377: GO 53387
// dist := 36 ;
53379: LD_ADDR_VAR 0 14
53383: PUSH
53384: LD_INT 36
53386: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53387: LD_VAR 0 1
53391: PPUSH
53392: LD_VAR 0 3
53396: PPUSH
53397: LD_VAR 0 4
53401: PPUSH
53402: CALL_OW 297
53406: PUSH
53407: LD_VAR 0 14
53411: GREATER
53412: IFFALSE 53416
// exit ;
53414: GO 53941
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53416: LD_ADDR_VAR 0 12
53420: PUSH
53421: LD_VAR 0 2
53425: PPUSH
53426: LD_VAR 0 3
53430: PPUSH
53431: LD_VAR 0 4
53435: PPUSH
53436: LD_VAR 0 5
53440: PPUSH
53441: LD_VAR 0 1
53445: PPUSH
53446: CALL_OW 248
53450: PPUSH
53451: LD_INT 0
53453: PPUSH
53454: CALL 53946 0 6
53458: ST_TO_ADDR
// if not hexes then
53459: LD_VAR 0 12
53463: NOT
53464: IFFALSE 53468
// exit ;
53466: GO 53941
// hex := GetHexInfo ( x , y ) ;
53468: LD_ADDR_VAR 0 15
53472: PUSH
53473: LD_VAR 0 3
53477: PPUSH
53478: LD_VAR 0 4
53482: PPUSH
53483: CALL_OW 546
53487: ST_TO_ADDR
// if hex [ 1 ] then
53488: LD_VAR 0 15
53492: PUSH
53493: LD_INT 1
53495: ARRAY
53496: IFFALSE 53500
// exit ;
53498: GO 53941
// height := hex [ 2 ] ;
53500: LD_ADDR_VAR 0 13
53504: PUSH
53505: LD_VAR 0 15
53509: PUSH
53510: LD_INT 2
53512: ARRAY
53513: ST_TO_ADDR
// for i = 1 to hexes do
53514: LD_ADDR_VAR 0 7
53518: PUSH
53519: DOUBLE
53520: LD_INT 1
53522: DEC
53523: ST_TO_ADDR
53524: LD_VAR 0 12
53528: PUSH
53529: FOR_TO
53530: IFFALSE 53860
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53532: LD_VAR 0 12
53536: PUSH
53537: LD_VAR 0 7
53541: ARRAY
53542: PUSH
53543: LD_INT 1
53545: ARRAY
53546: PPUSH
53547: LD_VAR 0 12
53551: PUSH
53552: LD_VAR 0 7
53556: ARRAY
53557: PUSH
53558: LD_INT 2
53560: ARRAY
53561: PPUSH
53562: CALL_OW 488
53566: NOT
53567: PUSH
53568: LD_VAR 0 12
53572: PUSH
53573: LD_VAR 0 7
53577: ARRAY
53578: PUSH
53579: LD_INT 1
53581: ARRAY
53582: PPUSH
53583: LD_VAR 0 12
53587: PUSH
53588: LD_VAR 0 7
53592: ARRAY
53593: PUSH
53594: LD_INT 2
53596: ARRAY
53597: PPUSH
53598: CALL_OW 428
53602: PUSH
53603: LD_INT 0
53605: GREATER
53606: OR
53607: PUSH
53608: LD_VAR 0 12
53612: PUSH
53613: LD_VAR 0 7
53617: ARRAY
53618: PUSH
53619: LD_INT 1
53621: ARRAY
53622: PPUSH
53623: LD_VAR 0 12
53627: PUSH
53628: LD_VAR 0 7
53632: ARRAY
53633: PUSH
53634: LD_INT 2
53636: ARRAY
53637: PPUSH
53638: CALL_OW 351
53642: OR
53643: IFFALSE 53649
// exit ;
53645: POP
53646: POP
53647: GO 53941
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53649: LD_ADDR_VAR 0 8
53653: PUSH
53654: LD_VAR 0 12
53658: PUSH
53659: LD_VAR 0 7
53663: ARRAY
53664: PUSH
53665: LD_INT 1
53667: ARRAY
53668: PPUSH
53669: LD_VAR 0 12
53673: PUSH
53674: LD_VAR 0 7
53678: ARRAY
53679: PUSH
53680: LD_INT 2
53682: ARRAY
53683: PPUSH
53684: CALL_OW 546
53688: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53689: LD_VAR 0 8
53693: PUSH
53694: LD_INT 1
53696: ARRAY
53697: PUSH
53698: LD_VAR 0 8
53702: PUSH
53703: LD_INT 2
53705: ARRAY
53706: PUSH
53707: LD_VAR 0 13
53711: PUSH
53712: LD_INT 2
53714: PLUS
53715: GREATER
53716: OR
53717: PUSH
53718: LD_VAR 0 8
53722: PUSH
53723: LD_INT 2
53725: ARRAY
53726: PUSH
53727: LD_VAR 0 13
53731: PUSH
53732: LD_INT 2
53734: MINUS
53735: LESS
53736: OR
53737: PUSH
53738: LD_VAR 0 8
53742: PUSH
53743: LD_INT 3
53745: ARRAY
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: LD_INT 8
53752: PUSH
53753: LD_INT 9
53755: PUSH
53756: LD_INT 10
53758: PUSH
53759: LD_INT 11
53761: PUSH
53762: LD_INT 12
53764: PUSH
53765: LD_INT 13
53767: PUSH
53768: LD_INT 16
53770: PUSH
53771: LD_INT 17
53773: PUSH
53774: LD_INT 18
53776: PUSH
53777: LD_INT 19
53779: PUSH
53780: LD_INT 20
53782: PUSH
53783: LD_INT 21
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: IN
53801: NOT
53802: OR
53803: PUSH
53804: LD_VAR 0 8
53808: PUSH
53809: LD_INT 5
53811: ARRAY
53812: NOT
53813: OR
53814: PUSH
53815: LD_VAR 0 8
53819: PUSH
53820: LD_INT 6
53822: ARRAY
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: LD_INT 7
53832: PUSH
53833: LD_INT 9
53835: PUSH
53836: LD_INT 10
53838: PUSH
53839: LD_INT 11
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: IN
53850: NOT
53851: OR
53852: IFFALSE 53858
// exit ;
53854: POP
53855: POP
53856: GO 53941
// end ;
53858: GO 53529
53860: POP
53861: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53862: LD_VAR 0 9
53866: PPUSH
53867: LD_VAR 0 3
53871: PPUSH
53872: LD_VAR 0 4
53876: PPUSH
53877: LD_INT 20
53879: PPUSH
53880: CALL 45887 0 4
53884: PUSH
53885: LD_INT 4
53887: ARRAY
53888: IFFALSE 53892
// exit ;
53890: GO 53941
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53892: LD_VAR 0 2
53896: PUSH
53897: LD_INT 29
53899: PUSH
53900: LD_INT 30
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: IN
53907: PUSH
53908: LD_VAR 0 3
53912: PPUSH
53913: LD_VAR 0 4
53917: PPUSH
53918: LD_VAR 0 9
53922: PPUSH
53923: CALL_OW 440
53927: NOT
53928: AND
53929: IFFALSE 53933
// exit ;
53931: GO 53941
// result := true ;
53933: LD_ADDR_VAR 0 6
53937: PUSH
53938: LD_INT 1
53940: ST_TO_ADDR
// end ;
53941: LD_VAR 0 6
53945: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53946: LD_INT 0
53948: PPUSH
53949: PPUSH
53950: PPUSH
53951: PPUSH
53952: PPUSH
53953: PPUSH
53954: PPUSH
53955: PPUSH
53956: PPUSH
53957: PPUSH
53958: PPUSH
53959: PPUSH
53960: PPUSH
53961: PPUSH
53962: PPUSH
53963: PPUSH
53964: PPUSH
53965: PPUSH
53966: PPUSH
53967: PPUSH
53968: PPUSH
53969: PPUSH
53970: PPUSH
53971: PPUSH
53972: PPUSH
53973: PPUSH
53974: PPUSH
53975: PPUSH
53976: PPUSH
53977: PPUSH
53978: PPUSH
53979: PPUSH
53980: PPUSH
53981: PPUSH
53982: PPUSH
53983: PPUSH
53984: PPUSH
53985: PPUSH
53986: PPUSH
53987: PPUSH
53988: PPUSH
53989: PPUSH
53990: PPUSH
53991: PPUSH
53992: PPUSH
53993: PPUSH
53994: PPUSH
53995: PPUSH
53996: PPUSH
53997: PPUSH
53998: PPUSH
53999: PPUSH
54000: PPUSH
54001: PPUSH
54002: PPUSH
54003: PPUSH
54004: PPUSH
54005: PPUSH
// result = [ ] ;
54006: LD_ADDR_VAR 0 7
54010: PUSH
54011: EMPTY
54012: ST_TO_ADDR
// temp_list = [ ] ;
54013: LD_ADDR_VAR 0 9
54017: PUSH
54018: EMPTY
54019: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54020: LD_VAR 0 4
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: LD_INT 3
54036: PUSH
54037: LD_INT 4
54039: PUSH
54040: LD_INT 5
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: IN
54051: NOT
54052: PUSH
54053: LD_VAR 0 1
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: IN
54068: PUSH
54069: LD_VAR 0 5
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: LD_INT 3
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: LIST
54087: IN
54088: NOT
54089: AND
54090: OR
54091: IFFALSE 54095
// exit ;
54093: GO 72486
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54095: LD_VAR 0 1
54099: PUSH
54100: LD_INT 6
54102: PUSH
54103: LD_INT 7
54105: PUSH
54106: LD_INT 8
54108: PUSH
54109: LD_INT 13
54111: PUSH
54112: LD_INT 12
54114: PUSH
54115: LD_INT 15
54117: PUSH
54118: LD_INT 11
54120: PUSH
54121: LD_INT 14
54123: PUSH
54124: LD_INT 10
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: IN
54138: IFFALSE 54148
// btype = b_lab ;
54140: LD_ADDR_VAR 0 1
54144: PUSH
54145: LD_INT 6
54147: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54148: LD_VAR 0 6
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 2
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: LIST
54166: IN
54167: NOT
54168: PUSH
54169: LD_VAR 0 1
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: LD_INT 3
54185: PUSH
54186: LD_INT 6
54188: PUSH
54189: LD_INT 36
54191: PUSH
54192: LD_INT 4
54194: PUSH
54195: LD_INT 5
54197: PUSH
54198: LD_INT 31
54200: PUSH
54201: LD_INT 32
54203: PUSH
54204: LD_INT 33
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: IN
54220: NOT
54221: PUSH
54222: LD_VAR 0 6
54226: PUSH
54227: LD_INT 1
54229: EQUAL
54230: AND
54231: OR
54232: PUSH
54233: LD_VAR 0 1
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: LD_INT 3
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: IN
54248: NOT
54249: PUSH
54250: LD_VAR 0 6
54254: PUSH
54255: LD_INT 2
54257: EQUAL
54258: AND
54259: OR
54260: IFFALSE 54270
// mode = 0 ;
54262: LD_ADDR_VAR 0 6
54266: PUSH
54267: LD_INT 0
54269: ST_TO_ADDR
// case mode of 0 :
54270: LD_VAR 0 6
54274: PUSH
54275: LD_INT 0
54277: DOUBLE
54278: EQUAL
54279: IFTRUE 54283
54281: GO 65736
54283: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54284: LD_ADDR_VAR 0 11
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 2
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: LD_INT 3
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: LD_INT 3
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54477: LD_ADDR_VAR 0 12
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: LD_INT 1
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 2
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 2
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 3
54634: NEG
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 3
54645: NEG
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54673: LD_ADDR_VAR 0 13
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 2
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: LD_INT 3
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 3
54832: NEG
54833: PUSH
54834: LD_INT 2
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 3
54844: NEG
54845: PUSH
54846: LD_INT 3
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54872: LD_ADDR_VAR 0 14
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: LD_INT 2
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 2
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: LD_INT 3
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: LD_INT 3
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55068: LD_ADDR_VAR 0 15
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 2
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 2
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 3
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 3
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55261: LD_ADDR_VAR 0 16
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 2
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: LD_INT 2
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 3
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 3
55418: PUSH
55419: LD_INT 3
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 2
55428: PUSH
55429: LD_INT 3
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55454: LD_ADDR_VAR 0 17
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: NEG
55536: PUSH
55537: LD_INT 2
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: LD_INT 2
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: LD_INT 2
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 2
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 2
55653: NEG
55654: PUSH
55655: LD_INT 2
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55684: LD_ADDR_VAR 0 18
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: LD_INT 1
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 1
55765: NEG
55766: PUSH
55767: LD_INT 2
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: LD_INT 2
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 2
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: LD_INT 2
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: LD_INT 2
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 2
55883: NEG
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55914: LD_ADDR_VAR 0 19
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 2
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 2
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: LD_INT 2
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 2
56090: NEG
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: NEG
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56144: LD_ADDR_VAR 0 20
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: LD_INT 2
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 2
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: LD_INT 1
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: LD_INT 2
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: LD_INT 2
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: NEG
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 2
56320: NEG
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 2
56331: NEG
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 2
56343: NEG
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56374: LD_ADDR_VAR 0 21
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: LD_INT 2
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: NEG
56574: PUSH
56575: LD_INT 2
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56604: LD_ADDR_VAR 0 22
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: NEG
56686: PUSH
56687: LD_INT 2
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 2
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 2
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: LD_INT 2
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 2
56780: NEG
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 2
56803: NEG
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56834: LD_ADDR_VAR 0 23
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: LD_INT 2
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 2
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 2
56969: PUSH
56970: LD_INT 2
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: LD_INT 2
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: LD_INT 2
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 2
57021: NEG
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 2
57033: NEG
57034: PUSH
57035: LD_INT 2
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 2
57045: NEG
57046: PUSH
57047: LD_INT 3
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: LD_INT 3
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: LD_INT 2
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 2
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57114: LD_ADDR_VAR 0 24
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: LD_INT 1
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: LD_INT 1
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: LD_INT 2
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: LD_INT 1
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 2
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 2
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: PUSH
57250: LD_INT 2
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: LD_INT 2
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: LD_INT 2
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 2
57290: NEG
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 2
57301: NEG
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: LD_INT 2
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: LD_INT 2
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 3
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 3
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57390: LD_ADDR_VAR 0 25
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 1
57448: NEG
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 2
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: LD_INT 1
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 2
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: LD_INT 2
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: PUSH
57536: LD_INT 2
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: LD_INT 2
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 2
57577: NEG
57578: PUSH
57579: LD_INT 1
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 2
57589: NEG
57590: PUSH
57591: LD_INT 2
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 3
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: LD_INT 3
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: LD_INT 3
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57664: LD_ADDR_VAR 0 26
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: LD_INT 2
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: LD_INT 2
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 2
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: NEG
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 2
57851: NEG
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: NEG
57864: PUSH
57865: LD_INT 2
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: LD_INT 3
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: LD_INT 3
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: LD_INT 2
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 2
57906: NEG
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57940: LD_ADDR_VAR 0 27
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 2
58075: PUSH
58076: LD_INT 2
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: NEG
58117: PUSH
58118: LD_INT 0
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 2
58139: NEG
58140: PUSH
58141: LD_INT 2
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: LD_INT 2
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 2
58162: NEG
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 3
58173: NEG
58174: PUSH
58175: LD_INT 1
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 3
58185: NEG
58186: PUSH
58187: LD_INT 2
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58220: LD_ADDR_VAR 0 28
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: LD_INT 2
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: LD_INT 2
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: LD_INT 1
58327: NEG
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: LD_INT 2
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: LD_INT 2
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 2
58396: NEG
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 2
58419: NEG
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 2
58431: NEG
58432: PUSH
58433: LD_INT 3
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: LD_INT 3
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 3
58455: NEG
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 3
58467: NEG
58468: PUSH
58469: LD_INT 2
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58502: LD_ADDR_VAR 0 29
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: LD_INT 1
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: NEG
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: NEG
58584: PUSH
58585: LD_INT 2
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 2
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: LD_INT 2
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: LD_INT 2
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: LD_INT 3
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 2
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 3
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: LD_INT 3
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 3
58746: NEG
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58781: LD_ADDR_VAR 0 30
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 0
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: LD_INT 2
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 2
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: PUSH
58917: LD_INT 2
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 2
58947: NEG
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: NEG
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: NEG
58971: PUSH
58972: LD_INT 3
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: LD_INT 2
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 3
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 2
59003: PUSH
59004: LD_INT 3
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 2
59013: NEG
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 3
59024: NEG
59025: PUSH
59026: LD_INT 1
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59059: LD_ADDR_VAR 0 31
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 1
59140: NEG
59141: PUSH
59142: LD_INT 2
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 2
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 2
59173: PUSH
59174: LD_INT 1
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: LD_INT 2
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: LD_INT 2
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 2
59224: NEG
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: NEG
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 2
59248: NEG
59249: PUSH
59250: LD_INT 3
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 3
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: LD_INT 3
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 1
59291: NEG
59292: PUSH
59293: LD_INT 2
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 3
59302: NEG
59303: PUSH
59304: LD_INT 2
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59337: LD_ADDR_VAR 0 32
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: LD_INT 1
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 1
59395: NEG
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: LD_INT 1
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 1
59418: NEG
59419: PUSH
59420: LD_INT 2
59422: NEG
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: LD_INT 2
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: PUSH
59463: LD_INT 2
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: LD_INT 2
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 1
59492: NEG
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 2
59503: NEG
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 2
59514: NEG
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: LD_INT 3
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: LD_INT 2
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 3
59549: PUSH
59550: LD_INT 2
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 2
59559: PUSH
59560: LD_INT 3
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 2
59569: NEG
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 3
59580: NEG
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59615: LD_ADDR_VAR 0 33
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 2
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 2
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: LD_INT 2
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: LD_INT 2
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 1
59759: NEG
59760: PUSH
59761: LD_INT 1
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 2
59770: NEG
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: LD_INT 1
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: LD_INT 2
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: LD_INT 3
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: LD_INT 3
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: NEG
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 3
59859: NEG
59860: PUSH
59861: LD_INT 2
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59894: LD_ADDR_VAR 0 34
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: LD_INT 1
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: LD_INT 2
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: LD_INT 2
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 2
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 2
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: LD_INT 2
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: NEG
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 2
60050: NEG
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: NEG
60062: PUSH
60063: LD_INT 1
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: LD_INT 2
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 1
60085: NEG
60086: PUSH
60087: LD_INT 3
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: LD_INT 2
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 3
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 2
60118: PUSH
60119: LD_INT 3
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 2
60128: NEG
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 3
60139: NEG
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60174: LD_ADDR_VAR 0 35
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 2
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 2
60265: NEG
60266: PUSH
60267: LD_INT 1
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60286: LD_ADDR_VAR 0 36
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: LD_INT 1
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: LD_INT 1
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: LD_INT 2
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: LD_INT 2
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60398: LD_ADDR_VAR 0 37
60402: PUSH
60403: LD_INT 0
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 1
60456: NEG
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: LD_INT 1
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60510: LD_ADDR_VAR 0 38
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 2
60601: NEG
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60622: LD_ADDR_VAR 0 39
60626: PUSH
60627: LD_INT 0
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 1
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: LD_INT 1
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: LD_INT 2
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: LD_INT 2
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60734: LD_ADDR_VAR 0 40
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 1
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: LD_INT 1
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 1
60792: NEG
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 1
60826: NEG
60827: PUSH
60828: LD_INT 1
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60846: LD_ADDR_VAR 0 41
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 1
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 1
60904: NEG
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: LD_INT 1
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: LD_INT 2
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 2
60970: PUSH
60971: LD_INT 2
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 2
61001: NEG
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 2
61012: NEG
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 2
61024: NEG
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 2
61036: NEG
61037: PUSH
61038: LD_INT 3
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 2
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 3
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 3
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 3
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 3
61089: PUSH
61090: LD_INT 3
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: LD_INT 3
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 2
61109: NEG
61110: PUSH
61111: LD_INT 1
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 3
61120: NEG
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 3
61131: NEG
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 3
61143: NEG
61144: PUSH
61145: LD_INT 2
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 3
61155: NEG
61156: PUSH
61157: LD_INT 3
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61196: LD_ADDR_VAR 0 42
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: LD_INT 1
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 0
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: NEG
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: LD_INT 1
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: LD_INT 2
61281: NEG
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: LD_INT 2
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: LD_INT 1
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 2
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 2
61321: PUSH
61322: LD_INT 2
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: LD_INT 2
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: LD_INT 2
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 1
61351: NEG
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 2
61362: NEG
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 2
61374: NEG
61375: PUSH
61376: LD_INT 2
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 2
61386: NEG
61387: PUSH
61388: LD_INT 3
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: LD_INT 3
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: LD_INT 3
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: LD_INT 2
61424: NEG
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 3
61432: PUSH
61433: LD_INT 2
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 3
61442: PUSH
61443: LD_INT 3
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 2
61452: PUSH
61453: LD_INT 3
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: LD_INT 3
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: LD_INT 3
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: LD_INT 2
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 3
61493: NEG
61494: PUSH
61495: LD_INT 2
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 3
61505: NEG
61506: PUSH
61507: LD_INT 3
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61546: LD_ADDR_VAR 0 43
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: LD_INT 1
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: LD_INT 1
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: NEG
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: NEG
61628: PUSH
61629: LD_INT 2
61631: NEG
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: LD_INT 1
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 2
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 2
61671: PUSH
61672: LD_INT 1
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: LD_INT 2
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: LD_INT 2
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 1
61701: NEG
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 2
61712: NEG
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 2
61723: NEG
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: LD_INT 3
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: LD_INT 3
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: LD_INT 2
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 2
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 3
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 3
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 1
61800: PUSH
61801: LD_INT 3
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: LD_INT 3
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: LD_INT 2
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 2
61831: NEG
61832: PUSH
61833: LD_INT 1
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 3
61842: NEG
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 3
61853: NEG
61854: PUSH
61855: LD_INT 1
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61894: LD_ADDR_VAR 0 44
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: LD_INT 1
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: LD_INT 0
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: LD_INT 1
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: LD_INT 1
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: LD_INT 0
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 1
61963: NEG
61964: PUSH
61965: LD_INT 1
61967: NEG
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: NEG
61976: PUSH
61977: LD_INT 2
61979: NEG
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: PUSH
61988: LD_INT 1
61990: NEG
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 2
61998: PUSH
61999: LD_INT 0
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 2
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 2
62018: PUSH
62019: LD_INT 2
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 1
62028: PUSH
62029: LD_INT 2
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 1
62038: NEG
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 2
62049: NEG
62050: PUSH
62051: LD_INT 0
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 2
62060: NEG
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 2
62072: NEG
62073: PUSH
62074: LD_INT 2
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 2
62084: NEG
62085: PUSH
62086: LD_INT 3
62088: NEG
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 2
62096: PUSH
62097: LD_INT 1
62099: NEG
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 3
62107: PUSH
62108: LD_INT 0
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 3
62117: PUSH
62118: LD_INT 1
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 3
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 3
62137: PUSH
62138: LD_INT 3
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 2
62147: PUSH
62148: LD_INT 3
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 2
62157: NEG
62158: PUSH
62159: LD_INT 1
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 3
62168: NEG
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 3
62179: NEG
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 3
62191: NEG
62192: PUSH
62193: LD_INT 2
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 3
62203: NEG
62204: PUSH
62205: LD_INT 3
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62244: LD_ADDR_VAR 0 45
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: LD_INT 1
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 1
62282: PUSH
62283: LD_INT 1
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 0
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 1
62302: NEG
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: LD_INT 2
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: LD_INT 2
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: LD_INT 1
62351: NEG
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 2
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 2
62369: PUSH
62370: LD_INT 2
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 1
62379: PUSH
62380: LD_INT 2
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: LD_INT 2
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 2
62410: NEG
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 2
62422: NEG
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 2
62434: NEG
62435: PUSH
62436: LD_INT 3
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 1
62446: NEG
62447: PUSH
62448: LD_INT 3
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 0
62458: PUSH
62459: LD_INT 3
62461: NEG
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 1
62469: PUSH
62470: LD_INT 2
62472: NEG
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 3
62480: PUSH
62481: LD_INT 2
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 3
62490: PUSH
62491: LD_INT 3
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 2
62500: PUSH
62501: LD_INT 3
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: LD_INT 3
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: LD_INT 3
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: LD_INT 2
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 3
62541: NEG
62542: PUSH
62543: LD_INT 2
62545: NEG
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 3
62553: NEG
62554: PUSH
62555: LD_INT 3
62557: NEG
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62594: LD_ADDR_VAR 0 46
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: LD_INT 1
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: PUSH
62623: LD_INT 0
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 1
62632: PUSH
62633: LD_INT 1
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 1
62663: NEG
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 1
62675: NEG
62676: PUSH
62677: LD_INT 2
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: LD_INT 2
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 2
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 2
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: LD_INT 2
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: LD_INT 2
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: NEG
62750: PUSH
62751: LD_INT 1
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 2
62760: NEG
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 2
62771: NEG
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 1
62783: NEG
62784: PUSH
62785: LD_INT 3
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: LD_INT 3
62798: NEG
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 1
62806: PUSH
62807: LD_INT 2
62809: NEG
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 2
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 3
62828: PUSH
62829: LD_INT 0
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 3
62838: PUSH
62839: LD_INT 1
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 1
62848: PUSH
62849: LD_INT 3
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: LD_INT 3
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 1
62868: NEG
62869: PUSH
62870: LD_INT 2
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 2
62879: NEG
62880: PUSH
62881: LD_INT 1
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 3
62890: NEG
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 3
62901: NEG
62902: PUSH
62903: LD_INT 1
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62942: LD_ADDR_VAR 0 47
62946: PUSH
62947: LD_INT 0
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: LD_INT 1
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: LD_INT 0
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 1
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: LD_INT 1
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 1
63000: NEG
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 1
63011: NEG
63012: PUSH
63013: LD_INT 1
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 1
63023: NEG
63024: PUSH
63025: LD_INT 2
63027: NEG
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 0
63035: PUSH
63036: LD_INT 2
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 1
63046: PUSH
63047: LD_INT 1
63049: NEG
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 2
63057: NEG
63058: PUSH
63059: LD_INT 1
63061: NEG
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 2
63069: NEG
63070: PUSH
63071: LD_INT 2
63073: NEG
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63093: LD_ADDR_VAR 0 48
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: LD_INT 0
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: LD_INT 1
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: LD_INT 0
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: LD_INT 1
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: LD_INT 1
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: LD_INT 0
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 1
63162: NEG
63163: PUSH
63164: LD_INT 1
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 1
63174: NEG
63175: PUSH
63176: LD_INT 2
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 0
63186: PUSH
63187: LD_INT 2
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 1
63197: PUSH
63198: LD_INT 1
63200: NEG
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 2
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 2
63218: PUSH
63219: LD_INT 1
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63240: LD_ADDR_VAR 0 49
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: LD_INT 0
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 0
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 1
63298: NEG
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: LD_INT 1
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 2
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 2
63342: PUSH
63343: LD_INT 1
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 2
63352: PUSH
63353: LD_INT 2
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 1
63362: PUSH
63363: LD_INT 2
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63384: LD_ADDR_VAR 0 50
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 1
63422: PUSH
63423: LD_INT 1
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: LD_INT 1
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 1
63442: NEG
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: LD_INT 1
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 2
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 2
63475: PUSH
63476: LD_INT 2
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 1
63485: PUSH
63486: LD_INT 2
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: LD_INT 2
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63528: LD_ADDR_VAR 0 51
63532: PUSH
63533: LD_INT 0
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: LD_INT 1
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 1
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 1
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 1
63586: NEG
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 1
63597: NEG
63598: PUSH
63599: LD_INT 1
63601: NEG
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 1
63609: PUSH
63610: LD_INT 2
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 0
63619: PUSH
63620: LD_INT 2
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 1
63629: NEG
63630: PUSH
63631: LD_INT 1
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 2
63640: NEG
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 2
63651: NEG
63652: PUSH
63653: LD_INT 1
63655: NEG
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63675: LD_ADDR_VAR 0 52
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: PUSH
63704: LD_INT 0
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: LD_INT 1
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 1
63733: NEG
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 1
63744: NEG
63745: PUSH
63746: LD_INT 1
63748: NEG
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: LD_INT 2
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 2
63779: NEG
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 2
63790: NEG
63791: PUSH
63792: LD_INT 1
63794: NEG
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 2
63802: NEG
63803: PUSH
63804: LD_INT 2
63806: NEG
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63826: LD_ADDR_VAR 0 53
63830: PUSH
63831: LD_INT 0
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: LD_INT 1
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: LD_INT 0
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: PUSH
63865: LD_INT 1
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: LD_INT 1
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 1
63884: NEG
63885: PUSH
63886: LD_INT 0
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 1
63895: NEG
63896: PUSH
63897: LD_INT 1
63899: NEG
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 1
63907: NEG
63908: PUSH
63909: LD_INT 2
63911: NEG
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 0
63919: PUSH
63920: LD_INT 2
63922: NEG
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: LD_INT 1
63933: NEG
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 2
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 2
63951: PUSH
63952: LD_INT 1
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 2
63961: PUSH
63962: LD_INT 2
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 1
63971: PUSH
63972: LD_INT 2
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 0
63981: PUSH
63982: LD_INT 2
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 1
63991: NEG
63992: PUSH
63993: LD_INT 1
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 2
64002: NEG
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 2
64013: NEG
64014: PUSH
64015: LD_INT 1
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 2
64025: NEG
64026: PUSH
64027: LD_INT 2
64029: NEG
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64056: LD_ADDR_VAR 0 54
64060: PUSH
64061: LD_INT 0
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: LD_INT 1
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 1
64084: PUSH
64085: LD_INT 0
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 1
64114: NEG
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 1
64125: NEG
64126: PUSH
64127: LD_INT 1
64129: NEG
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 1
64137: NEG
64138: PUSH
64139: LD_INT 2
64141: NEG
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: LD_INT 2
64152: NEG
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: LD_INT 1
64163: NEG
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 2
64171: PUSH
64172: LD_INT 0
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 2
64181: PUSH
64182: LD_INT 1
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 2
64191: PUSH
64192: LD_INT 2
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 1
64201: PUSH
64202: LD_INT 2
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: LD_INT 2
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 1
64221: NEG
64222: PUSH
64223: LD_INT 1
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 2
64232: NEG
64233: PUSH
64234: LD_INT 0
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 2
64243: NEG
64244: PUSH
64245: LD_INT 1
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 2
64255: NEG
64256: PUSH
64257: LD_INT 2
64259: NEG
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64286: LD_ADDR_VAR 0 55
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: LD_INT 0
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: LD_INT 1
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 1
64314: PUSH
64315: LD_INT 0
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: LD_INT 1
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 1
64355: NEG
64356: PUSH
64357: LD_INT 1
64359: NEG
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 1
64367: NEG
64368: PUSH
64369: LD_INT 2
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 0
64379: PUSH
64380: LD_INT 2
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 1
64390: PUSH
64391: LD_INT 1
64393: NEG
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 2
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 2
64411: PUSH
64412: LD_INT 1
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 2
64421: PUSH
64422: LD_INT 2
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 1
64431: PUSH
64432: LD_INT 2
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: LD_INT 2
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 2
64462: NEG
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 2
64473: NEG
64474: PUSH
64475: LD_INT 1
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 2
64485: NEG
64486: PUSH
64487: LD_INT 2
64489: NEG
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64516: LD_ADDR_VAR 0 56
64520: PUSH
64521: LD_INT 0
64523: PUSH
64524: LD_INT 0
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 0
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 1
64544: PUSH
64545: LD_INT 0
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 1
64554: PUSH
64555: LD_INT 1
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: LD_INT 1
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 1
64585: NEG
64586: PUSH
64587: LD_INT 1
64589: NEG
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 1
64597: NEG
64598: PUSH
64599: LD_INT 2
64601: NEG
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: LD_INT 2
64612: NEG
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 2
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 2
64641: PUSH
64642: LD_INT 1
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 2
64651: PUSH
64652: LD_INT 2
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 1
64661: PUSH
64662: LD_INT 2
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: LD_INT 2
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 1
64681: NEG
64682: PUSH
64683: LD_INT 1
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 2
64692: NEG
64693: PUSH
64694: LD_INT 0
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 2
64703: NEG
64704: PUSH
64705: LD_INT 1
64707: NEG
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 2
64715: NEG
64716: PUSH
64717: LD_INT 2
64719: NEG
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64746: LD_ADDR_VAR 0 57
64750: PUSH
64751: LD_INT 0
64753: PUSH
64754: LD_INT 0
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: LD_INT 1
64766: NEG
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 1
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 1
64784: PUSH
64785: LD_INT 1
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 1
64804: NEG
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 1
64815: NEG
64816: PUSH
64817: LD_INT 1
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: LD_INT 2
64831: NEG
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 0
64839: PUSH
64840: LD_INT 2
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 1
64850: PUSH
64851: LD_INT 1
64853: NEG
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 2
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 2
64871: PUSH
64872: LD_INT 1
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 2
64881: PUSH
64882: LD_INT 2
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 1
64891: PUSH
64892: LD_INT 2
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: LD_INT 2
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 1
64911: NEG
64912: PUSH
64913: LD_INT 1
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 2
64922: NEG
64923: PUSH
64924: LD_INT 0
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 2
64933: NEG
64934: PUSH
64935: LD_INT 1
64937: NEG
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 2
64945: NEG
64946: PUSH
64947: LD_INT 2
64949: NEG
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64976: LD_ADDR_VAR 0 58
64980: PUSH
64981: LD_INT 0
64983: PUSH
64984: LD_INT 0
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 0
64993: PUSH
64994: LD_INT 1
64996: NEG
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 1
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 1
65014: PUSH
65015: LD_INT 1
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: LD_INT 1
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 1
65034: NEG
65035: PUSH
65036: LD_INT 0
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 1
65045: NEG
65046: PUSH
65047: LD_INT 1
65049: NEG
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 1
65057: NEG
65058: PUSH
65059: LD_INT 2
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 0
65069: PUSH
65070: LD_INT 2
65072: NEG
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 1
65080: PUSH
65081: LD_INT 1
65083: NEG
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 2
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 2
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 2
65111: PUSH
65112: LD_INT 2
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 1
65121: PUSH
65122: LD_INT 2
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 0
65131: PUSH
65132: LD_INT 2
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 1
65141: NEG
65142: PUSH
65143: LD_INT 1
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 2
65152: NEG
65153: PUSH
65154: LD_INT 0
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 2
65163: NEG
65164: PUSH
65165: LD_INT 1
65167: NEG
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 2
65175: NEG
65176: PUSH
65177: LD_INT 2
65179: NEG
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65206: LD_ADDR_VAR 0 59
65210: PUSH
65211: LD_INT 0
65213: PUSH
65214: LD_INT 0
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 0
65223: PUSH
65224: LD_INT 1
65226: NEG
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 1
65234: PUSH
65235: LD_INT 0
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 1
65244: PUSH
65245: LD_INT 1
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 0
65254: PUSH
65255: LD_INT 1
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 1
65264: NEG
65265: PUSH
65266: LD_INT 0
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 1
65275: NEG
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65294: LD_ADDR_VAR 0 60
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: LD_INT 0
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 0
65311: PUSH
65312: LD_INT 1
65314: NEG
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 1
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 1
65332: PUSH
65333: LD_INT 1
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 0
65342: PUSH
65343: LD_INT 1
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 1
65352: NEG
65353: PUSH
65354: LD_INT 0
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 1
65363: NEG
65364: PUSH
65365: LD_INT 1
65367: NEG
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65382: LD_ADDR_VAR 0 61
65386: PUSH
65387: LD_INT 0
65389: PUSH
65390: LD_INT 0
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 0
65399: PUSH
65400: LD_INT 1
65402: NEG
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 1
65410: PUSH
65411: LD_INT 0
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 1
65420: PUSH
65421: LD_INT 1
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: LD_INT 1
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 1
65440: NEG
65441: PUSH
65442: LD_INT 0
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: LD_INT 1
65455: NEG
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65470: LD_ADDR_VAR 0 62
65474: PUSH
65475: LD_INT 0
65477: PUSH
65478: LD_INT 0
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 0
65487: PUSH
65488: LD_INT 1
65490: NEG
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 1
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 1
65508: PUSH
65509: LD_INT 1
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 0
65518: PUSH
65519: LD_INT 1
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 1
65528: NEG
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 1
65539: NEG
65540: PUSH
65541: LD_INT 1
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65558: LD_ADDR_VAR 0 63
65562: PUSH
65563: LD_INT 0
65565: PUSH
65566: LD_INT 0
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 0
65575: PUSH
65576: LD_INT 1
65578: NEG
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 1
65586: PUSH
65587: LD_INT 0
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 1
65596: PUSH
65597: LD_INT 1
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: LD_INT 1
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 1
65616: NEG
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 1
65627: NEG
65628: PUSH
65629: LD_INT 1
65631: NEG
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65646: LD_ADDR_VAR 0 64
65650: PUSH
65651: LD_INT 0
65653: PUSH
65654: LD_INT 0
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 0
65663: PUSH
65664: LD_INT 1
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 1
65674: PUSH
65675: LD_INT 0
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 1
65684: PUSH
65685: LD_INT 1
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: LD_INT 1
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 1
65704: NEG
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 1
65715: NEG
65716: PUSH
65717: LD_INT 1
65719: NEG
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: ST_TO_ADDR
// end ; 1 :
65734: GO 71631
65736: LD_INT 1
65738: DOUBLE
65739: EQUAL
65740: IFTRUE 65744
65742: GO 68367
65744: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65745: LD_ADDR_VAR 0 11
65749: PUSH
65750: LD_INT 1
65752: NEG
65753: PUSH
65754: LD_INT 3
65756: NEG
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 0
65764: PUSH
65765: LD_INT 3
65767: NEG
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 1
65775: PUSH
65776: LD_INT 2
65778: NEG
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: LIST
65788: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65789: LD_ADDR_VAR 0 12
65793: PUSH
65794: LD_INT 2
65796: PUSH
65797: LD_INT 1
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 3
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 3
65817: PUSH
65818: LD_INT 1
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: LIST
65829: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65830: LD_ADDR_VAR 0 13
65834: PUSH
65835: LD_INT 3
65837: PUSH
65838: LD_INT 2
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 3
65847: PUSH
65848: LD_INT 3
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 2
65857: PUSH
65858: LD_INT 3
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: LIST
65869: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65870: LD_ADDR_VAR 0 14
65874: PUSH
65875: LD_INT 1
65877: PUSH
65878: LD_INT 3
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: LD_INT 3
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 1
65897: NEG
65898: PUSH
65899: LD_INT 2
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: LIST
65910: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65911: LD_ADDR_VAR 0 15
65915: PUSH
65916: LD_INT 2
65918: NEG
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 3
65929: NEG
65930: PUSH
65931: LD_INT 0
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 3
65940: NEG
65941: PUSH
65942: LD_INT 1
65944: NEG
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: LIST
65954: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65955: LD_ADDR_VAR 0 16
65959: PUSH
65960: LD_INT 2
65962: NEG
65963: PUSH
65964: LD_INT 3
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 3
65974: NEG
65975: PUSH
65976: LD_INT 2
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 3
65986: NEG
65987: PUSH
65988: LD_INT 3
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: LIST
66000: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66001: LD_ADDR_VAR 0 17
66005: PUSH
66006: LD_INT 1
66008: NEG
66009: PUSH
66010: LD_INT 3
66012: NEG
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: LD_INT 3
66023: NEG
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 1
66031: PUSH
66032: LD_INT 2
66034: NEG
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: LIST
66044: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66045: LD_ADDR_VAR 0 18
66049: PUSH
66050: LD_INT 2
66052: PUSH
66053: LD_INT 1
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 3
66063: PUSH
66064: LD_INT 0
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 3
66073: PUSH
66074: LD_INT 1
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: LIST
66085: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66086: LD_ADDR_VAR 0 19
66090: PUSH
66091: LD_INT 3
66093: PUSH
66094: LD_INT 2
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 3
66103: PUSH
66104: LD_INT 3
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 2
66113: PUSH
66114: LD_INT 3
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: LIST
66125: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66126: LD_ADDR_VAR 0 20
66130: PUSH
66131: LD_INT 1
66133: PUSH
66134: LD_INT 3
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: LD_INT 3
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 1
66153: NEG
66154: PUSH
66155: LD_INT 2
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: LIST
66166: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66167: LD_ADDR_VAR 0 21
66171: PUSH
66172: LD_INT 2
66174: NEG
66175: PUSH
66176: LD_INT 1
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 3
66185: NEG
66186: PUSH
66187: LD_INT 0
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 3
66196: NEG
66197: PUSH
66198: LD_INT 1
66200: NEG
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: LIST
66210: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66211: LD_ADDR_VAR 0 22
66215: PUSH
66216: LD_INT 2
66218: NEG
66219: PUSH
66220: LD_INT 3
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 3
66230: NEG
66231: PUSH
66232: LD_INT 2
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 3
66242: NEG
66243: PUSH
66244: LD_INT 3
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: LIST
66256: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66257: LD_ADDR_VAR 0 23
66261: PUSH
66262: LD_INT 0
66264: PUSH
66265: LD_INT 3
66267: NEG
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 1
66275: NEG
66276: PUSH
66277: LD_INT 4
66279: NEG
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 1
66287: PUSH
66288: LD_INT 3
66290: NEG
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: LIST
66300: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66301: LD_ADDR_VAR 0 24
66305: PUSH
66306: LD_INT 3
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 3
66318: PUSH
66319: LD_INT 1
66321: NEG
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 4
66329: PUSH
66330: LD_INT 1
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: LIST
66341: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66342: LD_ADDR_VAR 0 25
66346: PUSH
66347: LD_INT 3
66349: PUSH
66350: LD_INT 3
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 4
66359: PUSH
66360: LD_INT 3
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 3
66369: PUSH
66370: LD_INT 4
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: LIST
66381: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66382: LD_ADDR_VAR 0 26
66386: PUSH
66387: LD_INT 0
66389: PUSH
66390: LD_INT 3
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 1
66399: PUSH
66400: LD_INT 4
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 1
66409: NEG
66410: PUSH
66411: LD_INT 3
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: LIST
66422: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66423: LD_ADDR_VAR 0 27
66427: PUSH
66428: LD_INT 3
66430: NEG
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 3
66441: NEG
66442: PUSH
66443: LD_INT 1
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 4
66452: NEG
66453: PUSH
66454: LD_INT 1
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: LIST
66466: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66467: LD_ADDR_VAR 0 28
66471: PUSH
66472: LD_INT 3
66474: NEG
66475: PUSH
66476: LD_INT 3
66478: NEG
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 3
66486: NEG
66487: PUSH
66488: LD_INT 4
66490: NEG
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 4
66498: NEG
66499: PUSH
66500: LD_INT 3
66502: NEG
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: LIST
66512: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66513: LD_ADDR_VAR 0 29
66517: PUSH
66518: LD_INT 1
66520: NEG
66521: PUSH
66522: LD_INT 3
66524: NEG
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 0
66532: PUSH
66533: LD_INT 3
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 1
66543: PUSH
66544: LD_INT 2
66546: NEG
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 1
66554: NEG
66555: PUSH
66556: LD_INT 4
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 0
66566: PUSH
66567: LD_INT 4
66569: NEG
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 1
66577: PUSH
66578: LD_INT 3
66580: NEG
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 1
66588: NEG
66589: PUSH
66590: LD_INT 5
66592: NEG
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 0
66600: PUSH
66601: LD_INT 5
66603: NEG
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 1
66611: PUSH
66612: LD_INT 4
66614: NEG
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 1
66622: NEG
66623: PUSH
66624: LD_INT 6
66626: NEG
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 0
66634: PUSH
66635: LD_INT 6
66637: NEG
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 1
66645: PUSH
66646: LD_INT 5
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66668: LD_ADDR_VAR 0 30
66672: PUSH
66673: LD_INT 2
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 3
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 3
66696: PUSH
66697: LD_INT 1
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 3
66706: PUSH
66707: LD_INT 1
66709: NEG
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 4
66717: PUSH
66718: LD_INT 0
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 4
66727: PUSH
66728: LD_INT 1
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 4
66737: PUSH
66738: LD_INT 1
66740: NEG
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 5
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 5
66758: PUSH
66759: LD_INT 1
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 5
66768: PUSH
66769: LD_INT 1
66771: NEG
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 6
66779: PUSH
66780: LD_INT 0
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 6
66789: PUSH
66790: LD_INT 1
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66811: LD_ADDR_VAR 0 31
66815: PUSH
66816: LD_INT 3
66818: PUSH
66819: LD_INT 2
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 3
66828: PUSH
66829: LD_INT 3
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 2
66838: PUSH
66839: LD_INT 3
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 4
66848: PUSH
66849: LD_INT 3
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 4
66858: PUSH
66859: LD_INT 4
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 3
66868: PUSH
66869: LD_INT 4
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 5
66878: PUSH
66879: LD_INT 4
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 5
66888: PUSH
66889: LD_INT 5
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 4
66898: PUSH
66899: LD_INT 5
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 6
66908: PUSH
66909: LD_INT 5
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 6
66918: PUSH
66919: LD_INT 6
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 5
66928: PUSH
66929: LD_INT 6
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66950: LD_ADDR_VAR 0 32
66954: PUSH
66955: LD_INT 1
66957: PUSH
66958: LD_INT 3
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 0
66967: PUSH
66968: LD_INT 3
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 1
66977: NEG
66978: PUSH
66979: LD_INT 2
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 1
66988: PUSH
66989: LD_INT 4
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 0
66998: PUSH
66999: LD_INT 4
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 1
67008: NEG
67009: PUSH
67010: LD_INT 3
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 1
67019: PUSH
67020: LD_INT 5
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 0
67029: PUSH
67030: LD_INT 5
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 1
67039: NEG
67040: PUSH
67041: LD_INT 4
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 1
67050: PUSH
67051: LD_INT 6
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 0
67060: PUSH
67061: LD_INT 6
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 1
67070: NEG
67071: PUSH
67072: LD_INT 5
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67093: LD_ADDR_VAR 0 33
67097: PUSH
67098: LD_INT 2
67100: NEG
67101: PUSH
67102: LD_INT 1
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 3
67111: NEG
67112: PUSH
67113: LD_INT 0
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 3
67122: NEG
67123: PUSH
67124: LD_INT 1
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 3
67134: NEG
67135: PUSH
67136: LD_INT 1
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 4
67145: NEG
67146: PUSH
67147: LD_INT 0
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 4
67156: NEG
67157: PUSH
67158: LD_INT 1
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 4
67168: NEG
67169: PUSH
67170: LD_INT 1
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 5
67179: NEG
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 5
67190: NEG
67191: PUSH
67192: LD_INT 1
67194: NEG
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 5
67202: NEG
67203: PUSH
67204: LD_INT 1
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 6
67213: NEG
67214: PUSH
67215: LD_INT 0
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 6
67224: NEG
67225: PUSH
67226: LD_INT 1
67228: NEG
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67248: LD_ADDR_VAR 0 34
67252: PUSH
67253: LD_INT 2
67255: NEG
67256: PUSH
67257: LD_INT 3
67259: NEG
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 3
67267: NEG
67268: PUSH
67269: LD_INT 2
67271: NEG
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 3
67279: NEG
67280: PUSH
67281: LD_INT 3
67283: NEG
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 3
67291: NEG
67292: PUSH
67293: LD_INT 4
67295: NEG
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: LD_INT 4
67303: NEG
67304: PUSH
67305: LD_INT 3
67307: NEG
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 4
67315: NEG
67316: PUSH
67317: LD_INT 4
67319: NEG
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 4
67327: NEG
67328: PUSH
67329: LD_INT 5
67331: NEG
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 5
67339: NEG
67340: PUSH
67341: LD_INT 4
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 5
67351: NEG
67352: PUSH
67353: LD_INT 5
67355: NEG
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 5
67363: NEG
67364: PUSH
67365: LD_INT 6
67367: NEG
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 6
67375: NEG
67376: PUSH
67377: LD_INT 5
67379: NEG
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 6
67387: NEG
67388: PUSH
67389: LD_INT 6
67391: NEG
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67411: LD_ADDR_VAR 0 41
67415: PUSH
67416: LD_INT 0
67418: PUSH
67419: LD_INT 2
67421: NEG
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 1
67429: NEG
67430: PUSH
67431: LD_INT 3
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 1
67441: PUSH
67442: LD_INT 2
67444: NEG
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: LIST
67454: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67455: LD_ADDR_VAR 0 42
67459: PUSH
67460: LD_INT 2
67462: PUSH
67463: LD_INT 0
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 2
67472: PUSH
67473: LD_INT 1
67475: NEG
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 3
67483: PUSH
67484: LD_INT 1
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: LIST
67495: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67496: LD_ADDR_VAR 0 43
67500: PUSH
67501: LD_INT 2
67503: PUSH
67504: LD_INT 2
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 3
67513: PUSH
67514: LD_INT 2
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 2
67523: PUSH
67524: LD_INT 3
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: LIST
67535: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67536: LD_ADDR_VAR 0 44
67540: PUSH
67541: LD_INT 0
67543: PUSH
67544: LD_INT 2
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 1
67553: PUSH
67554: LD_INT 3
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 1
67563: NEG
67564: PUSH
67565: LD_INT 2
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: LIST
67576: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67577: LD_ADDR_VAR 0 45
67581: PUSH
67582: LD_INT 2
67584: NEG
67585: PUSH
67586: LD_INT 0
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 2
67595: NEG
67596: PUSH
67597: LD_INT 1
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 3
67606: NEG
67607: PUSH
67608: LD_INT 1
67610: NEG
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: LIST
67620: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67621: LD_ADDR_VAR 0 46
67625: PUSH
67626: LD_INT 2
67628: NEG
67629: PUSH
67630: LD_INT 2
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 2
67640: NEG
67641: PUSH
67642: LD_INT 3
67644: NEG
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 3
67652: NEG
67653: PUSH
67654: LD_INT 2
67656: NEG
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: LIST
67666: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67667: LD_ADDR_VAR 0 47
67671: PUSH
67672: LD_INT 2
67674: NEG
67675: PUSH
67676: LD_INT 3
67678: NEG
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 1
67686: NEG
67687: PUSH
67688: LD_INT 3
67690: NEG
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67700: LD_ADDR_VAR 0 48
67704: PUSH
67705: LD_INT 1
67707: PUSH
67708: LD_INT 2
67710: NEG
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 2
67718: PUSH
67719: LD_INT 1
67721: NEG
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67731: LD_ADDR_VAR 0 49
67735: PUSH
67736: LD_INT 3
67738: PUSH
67739: LD_INT 1
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 3
67748: PUSH
67749: LD_INT 2
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67760: LD_ADDR_VAR 0 50
67764: PUSH
67765: LD_INT 2
67767: PUSH
67768: LD_INT 3
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 1
67777: PUSH
67778: LD_INT 3
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67789: LD_ADDR_VAR 0 51
67793: PUSH
67794: LD_INT 1
67796: NEG
67797: PUSH
67798: LD_INT 2
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 2
67807: NEG
67808: PUSH
67809: LD_INT 1
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67820: LD_ADDR_VAR 0 52
67824: PUSH
67825: LD_INT 3
67827: NEG
67828: PUSH
67829: LD_INT 1
67831: NEG
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 3
67839: NEG
67840: PUSH
67841: LD_INT 2
67843: NEG
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67853: LD_ADDR_VAR 0 53
67857: PUSH
67858: LD_INT 1
67860: NEG
67861: PUSH
67862: LD_INT 3
67864: NEG
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 0
67872: PUSH
67873: LD_INT 3
67875: NEG
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 1
67883: PUSH
67884: LD_INT 2
67886: NEG
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: LIST
67896: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67897: LD_ADDR_VAR 0 54
67901: PUSH
67902: LD_INT 2
67904: PUSH
67905: LD_INT 1
67907: NEG
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 3
67915: PUSH
67916: LD_INT 0
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 3
67925: PUSH
67926: LD_INT 1
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: LIST
67937: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67938: LD_ADDR_VAR 0 55
67942: PUSH
67943: LD_INT 3
67945: PUSH
67946: LD_INT 2
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 3
67955: PUSH
67956: LD_INT 3
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 2
67965: PUSH
67966: LD_INT 3
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: LIST
67977: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67978: LD_ADDR_VAR 0 56
67982: PUSH
67983: LD_INT 1
67985: PUSH
67986: LD_INT 3
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 0
67995: PUSH
67996: LD_INT 3
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 1
68005: NEG
68006: PUSH
68007: LD_INT 2
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: LIST
68018: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68019: LD_ADDR_VAR 0 57
68023: PUSH
68024: LD_INT 2
68026: NEG
68027: PUSH
68028: LD_INT 1
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 3
68037: NEG
68038: PUSH
68039: LD_INT 0
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 3
68048: NEG
68049: PUSH
68050: LD_INT 1
68052: NEG
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: LIST
68062: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68063: LD_ADDR_VAR 0 58
68067: PUSH
68068: LD_INT 2
68070: NEG
68071: PUSH
68072: LD_INT 3
68074: NEG
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 3
68082: NEG
68083: PUSH
68084: LD_INT 2
68086: NEG
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 3
68094: NEG
68095: PUSH
68096: LD_INT 3
68098: NEG
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: LIST
68108: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68109: LD_ADDR_VAR 0 59
68113: PUSH
68114: LD_INT 1
68116: NEG
68117: PUSH
68118: LD_INT 2
68120: NEG
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: LD_INT 2
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 1
68139: PUSH
68140: LD_INT 1
68142: NEG
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: LIST
68152: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68153: LD_ADDR_VAR 0 60
68157: PUSH
68158: LD_INT 1
68160: PUSH
68161: LD_INT 1
68163: NEG
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 2
68171: PUSH
68172: LD_INT 0
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 2
68181: PUSH
68182: LD_INT 1
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: LIST
68193: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68194: LD_ADDR_VAR 0 61
68198: PUSH
68199: LD_INT 2
68201: PUSH
68202: LD_INT 1
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 2
68211: PUSH
68212: LD_INT 2
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 1
68221: PUSH
68222: LD_INT 2
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: LIST
68233: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68234: LD_ADDR_VAR 0 62
68238: PUSH
68239: LD_INT 1
68241: PUSH
68242: LD_INT 2
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 0
68251: PUSH
68252: LD_INT 2
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 1
68261: NEG
68262: PUSH
68263: LD_INT 1
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: LIST
68274: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68275: LD_ADDR_VAR 0 63
68279: PUSH
68280: LD_INT 1
68282: NEG
68283: PUSH
68284: LD_INT 1
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 2
68293: NEG
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 2
68304: NEG
68305: PUSH
68306: LD_INT 1
68308: NEG
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: LIST
68318: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68319: LD_ADDR_VAR 0 64
68323: PUSH
68324: LD_INT 1
68326: NEG
68327: PUSH
68328: LD_INT 2
68330: NEG
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 2
68338: NEG
68339: PUSH
68340: LD_INT 1
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 2
68350: NEG
68351: PUSH
68352: LD_INT 2
68354: NEG
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: LIST
68364: ST_TO_ADDR
// end ; 2 :
68365: GO 71631
68367: LD_INT 2
68369: DOUBLE
68370: EQUAL
68371: IFTRUE 68375
68373: GO 71630
68375: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68376: LD_ADDR_VAR 0 29
68380: PUSH
68381: LD_INT 4
68383: PUSH
68384: LD_INT 0
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 4
68393: PUSH
68394: LD_INT 1
68396: NEG
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 5
68404: PUSH
68405: LD_INT 0
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 5
68414: PUSH
68415: LD_INT 1
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 4
68424: PUSH
68425: LD_INT 1
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 3
68434: PUSH
68435: LD_INT 0
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 3
68444: PUSH
68445: LD_INT 1
68447: NEG
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 3
68455: PUSH
68456: LD_INT 2
68458: NEG
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 5
68466: PUSH
68467: LD_INT 2
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 3
68476: PUSH
68477: LD_INT 3
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 3
68486: PUSH
68487: LD_INT 2
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 4
68496: PUSH
68497: LD_INT 3
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 4
68506: PUSH
68507: LD_INT 4
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 3
68516: PUSH
68517: LD_INT 4
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 2
68526: PUSH
68527: LD_INT 3
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 2
68536: PUSH
68537: LD_INT 2
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 4
68546: PUSH
68547: LD_INT 2
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 2
68556: PUSH
68557: LD_INT 4
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 0
68566: PUSH
68567: LD_INT 4
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 0
68576: PUSH
68577: LD_INT 3
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 1
68586: PUSH
68587: LD_INT 4
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 1
68596: PUSH
68597: LD_INT 5
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 0
68606: PUSH
68607: LD_INT 5
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 1
68616: NEG
68617: PUSH
68618: LD_INT 4
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 1
68627: NEG
68628: PUSH
68629: LD_INT 3
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 2
68638: PUSH
68639: LD_INT 5
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 2
68648: NEG
68649: PUSH
68650: LD_INT 3
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 3
68659: NEG
68660: PUSH
68661: LD_INT 0
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 3
68670: NEG
68671: PUSH
68672: LD_INT 1
68674: NEG
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 2
68682: NEG
68683: PUSH
68684: LD_INT 0
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 2
68693: NEG
68694: PUSH
68695: LD_INT 1
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 3
68704: NEG
68705: PUSH
68706: LD_INT 1
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 4
68715: NEG
68716: PUSH
68717: LD_INT 0
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 4
68726: NEG
68727: PUSH
68728: LD_INT 1
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 4
68738: NEG
68739: PUSH
68740: LD_INT 2
68742: NEG
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 2
68750: NEG
68751: PUSH
68752: LD_INT 2
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 4
68761: NEG
68762: PUSH
68763: LD_INT 4
68765: NEG
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 4
68773: NEG
68774: PUSH
68775: LD_INT 5
68777: NEG
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 3
68785: NEG
68786: PUSH
68787: LD_INT 4
68789: NEG
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 3
68797: NEG
68798: PUSH
68799: LD_INT 3
68801: NEG
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 4
68809: NEG
68810: PUSH
68811: LD_INT 3
68813: NEG
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 5
68821: NEG
68822: PUSH
68823: LD_INT 4
68825: NEG
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 5
68833: NEG
68834: PUSH
68835: LD_INT 5
68837: NEG
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 3
68845: NEG
68846: PUSH
68847: LD_INT 5
68849: NEG
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 5
68857: NEG
68858: PUSH
68859: LD_INT 3
68861: NEG
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68914: LD_ADDR_VAR 0 30
68918: PUSH
68919: LD_INT 4
68921: PUSH
68922: LD_INT 4
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 4
68931: PUSH
68932: LD_INT 3
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 5
68941: PUSH
68942: LD_INT 4
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 5
68951: PUSH
68952: LD_INT 5
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 4
68961: PUSH
68962: LD_INT 5
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 3
68971: PUSH
68972: LD_INT 4
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 3
68981: PUSH
68982: LD_INT 3
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 5
68991: PUSH
68992: LD_INT 3
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 3
69001: PUSH
69002: LD_INT 5
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 0
69011: PUSH
69012: LD_INT 3
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 0
69021: PUSH
69022: LD_INT 2
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 1
69031: PUSH
69032: LD_INT 3
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 1
69041: PUSH
69042: LD_INT 4
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 0
69051: PUSH
69052: LD_INT 4
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 1
69061: NEG
69062: PUSH
69063: LD_INT 3
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 1
69072: NEG
69073: PUSH
69074: LD_INT 2
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 2
69083: PUSH
69084: LD_INT 4
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 2
69093: NEG
69094: PUSH
69095: LD_INT 2
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 4
69104: NEG
69105: PUSH
69106: LD_INT 0
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 4
69115: NEG
69116: PUSH
69117: LD_INT 1
69119: NEG
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 3
69127: NEG
69128: PUSH
69129: LD_INT 0
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 3
69138: NEG
69139: PUSH
69140: LD_INT 1
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 4
69149: NEG
69150: PUSH
69151: LD_INT 1
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 5
69160: NEG
69161: PUSH
69162: LD_INT 0
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 5
69171: NEG
69172: PUSH
69173: LD_INT 1
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 5
69183: NEG
69184: PUSH
69185: LD_INT 2
69187: NEG
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 3
69195: NEG
69196: PUSH
69197: LD_INT 2
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 3
69206: NEG
69207: PUSH
69208: LD_INT 3
69210: NEG
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 3
69218: NEG
69219: PUSH
69220: LD_INT 4
69222: NEG
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 2
69230: NEG
69231: PUSH
69232: LD_INT 3
69234: NEG
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 2
69242: NEG
69243: PUSH
69244: LD_INT 2
69246: NEG
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 3
69254: NEG
69255: PUSH
69256: LD_INT 2
69258: NEG
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 4
69266: NEG
69267: PUSH
69268: LD_INT 3
69270: NEG
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 4
69278: NEG
69279: PUSH
69280: LD_INT 4
69282: NEG
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 2
69290: NEG
69291: PUSH
69292: LD_INT 4
69294: NEG
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 4
69302: NEG
69303: PUSH
69304: LD_INT 2
69306: NEG
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: LD_INT 4
69317: NEG
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 0
69325: PUSH
69326: LD_INT 5
69328: NEG
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 1
69336: PUSH
69337: LD_INT 4
69339: NEG
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 1
69347: PUSH
69348: LD_INT 3
69350: NEG
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 0
69358: PUSH
69359: LD_INT 3
69361: NEG
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 1
69369: NEG
69370: PUSH
69371: LD_INT 4
69373: NEG
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 1
69381: NEG
69382: PUSH
69383: LD_INT 5
69385: NEG
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 2
69393: PUSH
69394: LD_INT 3
69396: NEG
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 2
69404: NEG
69405: PUSH
69406: LD_INT 5
69408: NEG
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69461: LD_ADDR_VAR 0 31
69465: PUSH
69466: LD_INT 0
69468: PUSH
69469: LD_INT 4
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 0
69478: PUSH
69479: LD_INT 3
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 1
69488: PUSH
69489: LD_INT 4
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 1
69498: PUSH
69499: LD_INT 5
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 0
69508: PUSH
69509: LD_INT 5
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 1
69518: NEG
69519: PUSH
69520: LD_INT 4
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 1
69529: NEG
69530: PUSH
69531: LD_INT 3
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 2
69540: PUSH
69541: LD_INT 5
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 2
69550: NEG
69551: PUSH
69552: LD_INT 3
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 3
69561: NEG
69562: PUSH
69563: LD_INT 0
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 3
69572: NEG
69573: PUSH
69574: LD_INT 1
69576: NEG
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 2
69584: NEG
69585: PUSH
69586: LD_INT 0
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: PUSH
69593: LD_INT 2
69595: NEG
69596: PUSH
69597: LD_INT 1
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 3
69606: NEG
69607: PUSH
69608: LD_INT 1
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 4
69617: NEG
69618: PUSH
69619: LD_INT 0
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 4
69628: NEG
69629: PUSH
69630: LD_INT 1
69632: NEG
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 4
69640: NEG
69641: PUSH
69642: LD_INT 2
69644: NEG
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 2
69652: NEG
69653: PUSH
69654: LD_INT 2
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 4
69663: NEG
69664: PUSH
69665: LD_INT 4
69667: NEG
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 4
69675: NEG
69676: PUSH
69677: LD_INT 5
69679: NEG
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 3
69687: NEG
69688: PUSH
69689: LD_INT 4
69691: NEG
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 3
69699: NEG
69700: PUSH
69701: LD_INT 3
69703: NEG
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 4
69711: NEG
69712: PUSH
69713: LD_INT 3
69715: NEG
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 5
69723: NEG
69724: PUSH
69725: LD_INT 4
69727: NEG
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: LD_INT 5
69735: NEG
69736: PUSH
69737: LD_INT 5
69739: NEG
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 3
69747: NEG
69748: PUSH
69749: LD_INT 5
69751: NEG
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 5
69759: NEG
69760: PUSH
69761: LD_INT 3
69763: NEG
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 0
69771: PUSH
69772: LD_INT 3
69774: NEG
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 0
69782: PUSH
69783: LD_INT 4
69785: NEG
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 1
69793: PUSH
69794: LD_INT 3
69796: NEG
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 1
69804: PUSH
69805: LD_INT 2
69807: NEG
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 0
69815: PUSH
69816: LD_INT 2
69818: NEG
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 1
69826: NEG
69827: PUSH
69828: LD_INT 3
69830: NEG
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 1
69838: NEG
69839: PUSH
69840: LD_INT 4
69842: NEG
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: LD_INT 2
69850: PUSH
69851: LD_INT 2
69853: NEG
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 2
69861: NEG
69862: PUSH
69863: LD_INT 4
69865: NEG
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 4
69873: PUSH
69874: LD_INT 0
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 4
69883: PUSH
69884: LD_INT 1
69886: NEG
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 5
69894: PUSH
69895: LD_INT 0
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 5
69904: PUSH
69905: LD_INT 1
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 4
69914: PUSH
69915: LD_INT 1
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 3
69924: PUSH
69925: LD_INT 0
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: PUSH
69932: LD_INT 3
69934: PUSH
69935: LD_INT 1
69937: NEG
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 3
69945: PUSH
69946: LD_INT 2
69948: NEG
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 5
69956: PUSH
69957: LD_INT 2
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: LIST
70003: LIST
70004: LIST
70005: LIST
70006: LIST
70007: LIST
70008: LIST
70009: LIST
70010: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70011: LD_ADDR_VAR 0 32
70015: PUSH
70016: LD_INT 4
70018: NEG
70019: PUSH
70020: LD_INT 0
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 4
70029: NEG
70030: PUSH
70031: LD_INT 1
70033: NEG
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 3
70041: NEG
70042: PUSH
70043: LD_INT 0
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 3
70052: NEG
70053: PUSH
70054: LD_INT 1
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 4
70063: NEG
70064: PUSH
70065: LD_INT 1
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 5
70074: NEG
70075: PUSH
70076: LD_INT 0
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 5
70085: NEG
70086: PUSH
70087: LD_INT 1
70089: NEG
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 5
70097: NEG
70098: PUSH
70099: LD_INT 2
70101: NEG
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 3
70109: NEG
70110: PUSH
70111: LD_INT 2
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 3
70120: NEG
70121: PUSH
70122: LD_INT 3
70124: NEG
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 3
70132: NEG
70133: PUSH
70134: LD_INT 4
70136: NEG
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 2
70144: NEG
70145: PUSH
70146: LD_INT 3
70148: NEG
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 2
70156: NEG
70157: PUSH
70158: LD_INT 2
70160: NEG
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 3
70168: NEG
70169: PUSH
70170: LD_INT 2
70172: NEG
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 4
70180: NEG
70181: PUSH
70182: LD_INT 3
70184: NEG
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 4
70192: NEG
70193: PUSH
70194: LD_INT 4
70196: NEG
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 2
70204: NEG
70205: PUSH
70206: LD_INT 4
70208: NEG
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 4
70216: NEG
70217: PUSH
70218: LD_INT 2
70220: NEG
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 0
70228: PUSH
70229: LD_INT 4
70231: NEG
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 0
70239: PUSH
70240: LD_INT 5
70242: NEG
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 1
70250: PUSH
70251: LD_INT 4
70253: NEG
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 1
70261: PUSH
70262: LD_INT 3
70264: NEG
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 0
70272: PUSH
70273: LD_INT 3
70275: NEG
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 1
70283: NEG
70284: PUSH
70285: LD_INT 4
70287: NEG
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 1
70295: NEG
70296: PUSH
70297: LD_INT 5
70299: NEG
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: LD_INT 2
70307: PUSH
70308: LD_INT 3
70310: NEG
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 2
70318: NEG
70319: PUSH
70320: LD_INT 5
70322: NEG
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 3
70330: PUSH
70331: LD_INT 0
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 3
70340: PUSH
70341: LD_INT 1
70343: NEG
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 4
70351: PUSH
70352: LD_INT 0
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 4
70361: PUSH
70362: LD_INT 1
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 3
70371: PUSH
70372: LD_INT 1
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 2
70381: PUSH
70382: LD_INT 0
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: PUSH
70389: LD_INT 2
70391: PUSH
70392: LD_INT 1
70394: NEG
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 2
70402: PUSH
70403: LD_INT 2
70405: NEG
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 4
70413: PUSH
70414: LD_INT 2
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 4
70423: PUSH
70424: LD_INT 4
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 4
70433: PUSH
70434: LD_INT 3
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 5
70443: PUSH
70444: LD_INT 4
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 5
70453: PUSH
70454: LD_INT 5
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: LD_INT 4
70463: PUSH
70464: LD_INT 5
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_INT 3
70473: PUSH
70474: LD_INT 4
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 3
70483: PUSH
70484: LD_INT 3
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 5
70493: PUSH
70494: LD_INT 3
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 3
70503: PUSH
70504: LD_INT 5
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70558: LD_ADDR_VAR 0 33
70562: PUSH
70563: LD_INT 4
70565: NEG
70566: PUSH
70567: LD_INT 4
70569: NEG
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 4
70577: NEG
70578: PUSH
70579: LD_INT 5
70581: NEG
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 3
70589: NEG
70590: PUSH
70591: LD_INT 4
70593: NEG
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 3
70601: NEG
70602: PUSH
70603: LD_INT 3
70605: NEG
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PUSH
70611: LD_INT 4
70613: NEG
70614: PUSH
70615: LD_INT 3
70617: NEG
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 5
70625: NEG
70626: PUSH
70627: LD_INT 4
70629: NEG
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 5
70637: NEG
70638: PUSH
70639: LD_INT 5
70641: NEG
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: LD_INT 3
70649: NEG
70650: PUSH
70651: LD_INT 5
70653: NEG
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: LD_INT 5
70661: NEG
70662: PUSH
70663: LD_INT 3
70665: NEG
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 0
70673: PUSH
70674: LD_INT 3
70676: NEG
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 0
70684: PUSH
70685: LD_INT 4
70687: NEG
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 1
70695: PUSH
70696: LD_INT 3
70698: NEG
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: LD_INT 1
70706: PUSH
70707: LD_INT 2
70709: NEG
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 0
70717: PUSH
70718: LD_INT 2
70720: NEG
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: LD_INT 1
70728: NEG
70729: PUSH
70730: LD_INT 3
70732: NEG
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 1
70740: NEG
70741: PUSH
70742: LD_INT 4
70744: NEG
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 2
70752: PUSH
70753: LD_INT 2
70755: NEG
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: PUSH
70761: LD_INT 2
70763: NEG
70764: PUSH
70765: LD_INT 4
70767: NEG
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 4
70775: PUSH
70776: LD_INT 0
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: PUSH
70783: LD_INT 4
70785: PUSH
70786: LD_INT 1
70788: NEG
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 5
70796: PUSH
70797: LD_INT 0
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: LD_INT 5
70806: PUSH
70807: LD_INT 1
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 4
70816: PUSH
70817: LD_INT 1
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 3
70826: PUSH
70827: LD_INT 0
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: LD_INT 3
70836: PUSH
70837: LD_INT 1
70839: NEG
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: LD_INT 3
70847: PUSH
70848: LD_INT 2
70850: NEG
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 5
70858: PUSH
70859: LD_INT 2
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PUSH
70866: LD_INT 3
70868: PUSH
70869: LD_INT 3
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: LD_INT 3
70878: PUSH
70879: LD_INT 2
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 4
70888: PUSH
70889: LD_INT 3
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 4
70898: PUSH
70899: LD_INT 4
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 3
70908: PUSH
70909: LD_INT 4
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 2
70918: PUSH
70919: LD_INT 3
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 2
70928: PUSH
70929: LD_INT 2
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 4
70938: PUSH
70939: LD_INT 2
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 2
70948: PUSH
70949: LD_INT 4
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 0
70958: PUSH
70959: LD_INT 4
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 0
70968: PUSH
70969: LD_INT 3
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 1
70978: PUSH
70979: LD_INT 4
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: LD_INT 1
70988: PUSH
70989: LD_INT 5
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: LD_INT 0
70998: PUSH
70999: LD_INT 5
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 1
71008: NEG
71009: PUSH
71010: LD_INT 4
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: LD_INT 1
71019: NEG
71020: PUSH
71021: LD_INT 3
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PUSH
71028: LD_INT 2
71030: PUSH
71031: LD_INT 5
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: PUSH
71038: LD_INT 2
71040: NEG
71041: PUSH
71042: LD_INT 3
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71096: LD_ADDR_VAR 0 34
71100: PUSH
71101: LD_INT 0
71103: PUSH
71104: LD_INT 4
71106: NEG
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 0
71114: PUSH
71115: LD_INT 5
71117: NEG
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: PUSH
71123: LD_INT 1
71125: PUSH
71126: LD_INT 4
71128: NEG
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 1
71136: PUSH
71137: LD_INT 3
71139: NEG
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 0
71147: PUSH
71148: LD_INT 3
71150: NEG
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: LD_INT 1
71158: NEG
71159: PUSH
71160: LD_INT 4
71162: NEG
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PUSH
71168: LD_INT 1
71170: NEG
71171: PUSH
71172: LD_INT 5
71174: NEG
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: PUSH
71180: LD_INT 2
71182: PUSH
71183: LD_INT 3
71185: NEG
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_INT 2
71193: NEG
71194: PUSH
71195: LD_INT 5
71197: NEG
71198: PUSH
71199: EMPTY
71200: LIST
71201: LIST
71202: PUSH
71203: LD_INT 3
71205: PUSH
71206: LD_INT 0
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_INT 3
71215: PUSH
71216: LD_INT 1
71218: NEG
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 4
71226: PUSH
71227: LD_INT 0
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 4
71236: PUSH
71237: LD_INT 1
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 3
71246: PUSH
71247: LD_INT 1
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 2
71256: PUSH
71257: LD_INT 0
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 2
71266: PUSH
71267: LD_INT 1
71269: NEG
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 2
71277: PUSH
71278: LD_INT 2
71280: NEG
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 4
71288: PUSH
71289: LD_INT 2
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 4
71298: PUSH
71299: LD_INT 4
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 4
71308: PUSH
71309: LD_INT 3
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 5
71318: PUSH
71319: LD_INT 4
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: PUSH
71326: LD_INT 5
71328: PUSH
71329: LD_INT 5
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 4
71338: PUSH
71339: LD_INT 5
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 3
71348: PUSH
71349: LD_INT 4
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 3
71358: PUSH
71359: LD_INT 3
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 5
71368: PUSH
71369: LD_INT 3
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: PUSH
71376: LD_INT 3
71378: PUSH
71379: LD_INT 5
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: PUSH
71386: LD_INT 0
71388: PUSH
71389: LD_INT 3
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 0
71398: PUSH
71399: LD_INT 2
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PUSH
71406: LD_INT 1
71408: PUSH
71409: LD_INT 3
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: PUSH
71416: LD_INT 1
71418: PUSH
71419: LD_INT 4
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: PUSH
71426: LD_INT 0
71428: PUSH
71429: LD_INT 4
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PUSH
71436: LD_INT 1
71438: NEG
71439: PUSH
71440: LD_INT 3
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: PUSH
71447: LD_INT 1
71449: NEG
71450: PUSH
71451: LD_INT 2
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PUSH
71458: LD_INT 2
71460: PUSH
71461: LD_INT 4
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 2
71470: NEG
71471: PUSH
71472: LD_INT 2
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 4
71481: NEG
71482: PUSH
71483: LD_INT 0
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: LD_INT 4
71492: NEG
71493: PUSH
71494: LD_INT 1
71496: NEG
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 3
71504: NEG
71505: PUSH
71506: LD_INT 0
71508: PUSH
71509: EMPTY
71510: LIST
71511: LIST
71512: PUSH
71513: LD_INT 3
71515: NEG
71516: PUSH
71517: LD_INT 1
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: PUSH
71524: LD_INT 4
71526: NEG
71527: PUSH
71528: LD_INT 1
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 5
71537: NEG
71538: PUSH
71539: LD_INT 0
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_INT 5
71548: NEG
71549: PUSH
71550: LD_INT 1
71552: NEG
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: LD_INT 5
71560: NEG
71561: PUSH
71562: LD_INT 2
71564: NEG
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 3
71572: NEG
71573: PUSH
71574: LD_INT 2
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: ST_TO_ADDR
// end ; end ;
71628: GO 71631
71630: POP
// case btype of b_depot , b_warehouse :
71631: LD_VAR 0 1
71635: PUSH
71636: LD_INT 0
71638: DOUBLE
71639: EQUAL
71640: IFTRUE 71650
71642: LD_INT 1
71644: DOUBLE
71645: EQUAL
71646: IFTRUE 71650
71648: GO 71851
71650: POP
// case nation of nation_american :
71651: LD_VAR 0 5
71655: PUSH
71656: LD_INT 1
71658: DOUBLE
71659: EQUAL
71660: IFTRUE 71664
71662: GO 71720
71664: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71665: LD_ADDR_VAR 0 9
71669: PUSH
71670: LD_VAR 0 11
71674: PUSH
71675: LD_VAR 0 12
71679: PUSH
71680: LD_VAR 0 13
71684: PUSH
71685: LD_VAR 0 14
71689: PUSH
71690: LD_VAR 0 15
71694: PUSH
71695: LD_VAR 0 16
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: PUSH
71708: LD_VAR 0 4
71712: PUSH
71713: LD_INT 1
71715: PLUS
71716: ARRAY
71717: ST_TO_ADDR
71718: GO 71849
71720: LD_INT 2
71722: DOUBLE
71723: EQUAL
71724: IFTRUE 71728
71726: GO 71784
71728: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71729: LD_ADDR_VAR 0 9
71733: PUSH
71734: LD_VAR 0 17
71738: PUSH
71739: LD_VAR 0 18
71743: PUSH
71744: LD_VAR 0 19
71748: PUSH
71749: LD_VAR 0 20
71753: PUSH
71754: LD_VAR 0 21
71758: PUSH
71759: LD_VAR 0 22
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: PUSH
71772: LD_VAR 0 4
71776: PUSH
71777: LD_INT 1
71779: PLUS
71780: ARRAY
71781: ST_TO_ADDR
71782: GO 71849
71784: LD_INT 3
71786: DOUBLE
71787: EQUAL
71788: IFTRUE 71792
71790: GO 71848
71792: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71793: LD_ADDR_VAR 0 9
71797: PUSH
71798: LD_VAR 0 23
71802: PUSH
71803: LD_VAR 0 24
71807: PUSH
71808: LD_VAR 0 25
71812: PUSH
71813: LD_VAR 0 26
71817: PUSH
71818: LD_VAR 0 27
71822: PUSH
71823: LD_VAR 0 28
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: PUSH
71836: LD_VAR 0 4
71840: PUSH
71841: LD_INT 1
71843: PLUS
71844: ARRAY
71845: ST_TO_ADDR
71846: GO 71849
71848: POP
71849: GO 72404
71851: LD_INT 2
71853: DOUBLE
71854: EQUAL
71855: IFTRUE 71865
71857: LD_INT 3
71859: DOUBLE
71860: EQUAL
71861: IFTRUE 71865
71863: GO 71921
71865: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71866: LD_ADDR_VAR 0 9
71870: PUSH
71871: LD_VAR 0 29
71875: PUSH
71876: LD_VAR 0 30
71880: PUSH
71881: LD_VAR 0 31
71885: PUSH
71886: LD_VAR 0 32
71890: PUSH
71891: LD_VAR 0 33
71895: PUSH
71896: LD_VAR 0 34
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: LIST
71905: LIST
71906: LIST
71907: LIST
71908: PUSH
71909: LD_VAR 0 4
71913: PUSH
71914: LD_INT 1
71916: PLUS
71917: ARRAY
71918: ST_TO_ADDR
71919: GO 72404
71921: LD_INT 16
71923: DOUBLE
71924: EQUAL
71925: IFTRUE 71983
71927: LD_INT 17
71929: DOUBLE
71930: EQUAL
71931: IFTRUE 71983
71933: LD_INT 18
71935: DOUBLE
71936: EQUAL
71937: IFTRUE 71983
71939: LD_INT 19
71941: DOUBLE
71942: EQUAL
71943: IFTRUE 71983
71945: LD_INT 22
71947: DOUBLE
71948: EQUAL
71949: IFTRUE 71983
71951: LD_INT 20
71953: DOUBLE
71954: EQUAL
71955: IFTRUE 71983
71957: LD_INT 21
71959: DOUBLE
71960: EQUAL
71961: IFTRUE 71983
71963: LD_INT 23
71965: DOUBLE
71966: EQUAL
71967: IFTRUE 71983
71969: LD_INT 24
71971: DOUBLE
71972: EQUAL
71973: IFTRUE 71983
71975: LD_INT 25
71977: DOUBLE
71978: EQUAL
71979: IFTRUE 71983
71981: GO 72039
71983: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71984: LD_ADDR_VAR 0 9
71988: PUSH
71989: LD_VAR 0 35
71993: PUSH
71994: LD_VAR 0 36
71998: PUSH
71999: LD_VAR 0 37
72003: PUSH
72004: LD_VAR 0 38
72008: PUSH
72009: LD_VAR 0 39
72013: PUSH
72014: LD_VAR 0 40
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: LIST
72026: PUSH
72027: LD_VAR 0 4
72031: PUSH
72032: LD_INT 1
72034: PLUS
72035: ARRAY
72036: ST_TO_ADDR
72037: GO 72404
72039: LD_INT 6
72041: DOUBLE
72042: EQUAL
72043: IFTRUE 72095
72045: LD_INT 7
72047: DOUBLE
72048: EQUAL
72049: IFTRUE 72095
72051: LD_INT 8
72053: DOUBLE
72054: EQUAL
72055: IFTRUE 72095
72057: LD_INT 13
72059: DOUBLE
72060: EQUAL
72061: IFTRUE 72095
72063: LD_INT 12
72065: DOUBLE
72066: EQUAL
72067: IFTRUE 72095
72069: LD_INT 15
72071: DOUBLE
72072: EQUAL
72073: IFTRUE 72095
72075: LD_INT 11
72077: DOUBLE
72078: EQUAL
72079: IFTRUE 72095
72081: LD_INT 14
72083: DOUBLE
72084: EQUAL
72085: IFTRUE 72095
72087: LD_INT 10
72089: DOUBLE
72090: EQUAL
72091: IFTRUE 72095
72093: GO 72151
72095: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72096: LD_ADDR_VAR 0 9
72100: PUSH
72101: LD_VAR 0 41
72105: PUSH
72106: LD_VAR 0 42
72110: PUSH
72111: LD_VAR 0 43
72115: PUSH
72116: LD_VAR 0 44
72120: PUSH
72121: LD_VAR 0 45
72125: PUSH
72126: LD_VAR 0 46
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: PUSH
72139: LD_VAR 0 4
72143: PUSH
72144: LD_INT 1
72146: PLUS
72147: ARRAY
72148: ST_TO_ADDR
72149: GO 72404
72151: LD_INT 36
72153: DOUBLE
72154: EQUAL
72155: IFTRUE 72159
72157: GO 72215
72159: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72160: LD_ADDR_VAR 0 9
72164: PUSH
72165: LD_VAR 0 47
72169: PUSH
72170: LD_VAR 0 48
72174: PUSH
72175: LD_VAR 0 49
72179: PUSH
72180: LD_VAR 0 50
72184: PUSH
72185: LD_VAR 0 51
72189: PUSH
72190: LD_VAR 0 52
72194: PUSH
72195: EMPTY
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: PUSH
72203: LD_VAR 0 4
72207: PUSH
72208: LD_INT 1
72210: PLUS
72211: ARRAY
72212: ST_TO_ADDR
72213: GO 72404
72215: LD_INT 4
72217: DOUBLE
72218: EQUAL
72219: IFTRUE 72241
72221: LD_INT 5
72223: DOUBLE
72224: EQUAL
72225: IFTRUE 72241
72227: LD_INT 34
72229: DOUBLE
72230: EQUAL
72231: IFTRUE 72241
72233: LD_INT 37
72235: DOUBLE
72236: EQUAL
72237: IFTRUE 72241
72239: GO 72297
72241: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72242: LD_ADDR_VAR 0 9
72246: PUSH
72247: LD_VAR 0 53
72251: PUSH
72252: LD_VAR 0 54
72256: PUSH
72257: LD_VAR 0 55
72261: PUSH
72262: LD_VAR 0 56
72266: PUSH
72267: LD_VAR 0 57
72271: PUSH
72272: LD_VAR 0 58
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: PUSH
72285: LD_VAR 0 4
72289: PUSH
72290: LD_INT 1
72292: PLUS
72293: ARRAY
72294: ST_TO_ADDR
72295: GO 72404
72297: LD_INT 31
72299: DOUBLE
72300: EQUAL
72301: IFTRUE 72347
72303: LD_INT 32
72305: DOUBLE
72306: EQUAL
72307: IFTRUE 72347
72309: LD_INT 33
72311: DOUBLE
72312: EQUAL
72313: IFTRUE 72347
72315: LD_INT 27
72317: DOUBLE
72318: EQUAL
72319: IFTRUE 72347
72321: LD_INT 26
72323: DOUBLE
72324: EQUAL
72325: IFTRUE 72347
72327: LD_INT 28
72329: DOUBLE
72330: EQUAL
72331: IFTRUE 72347
72333: LD_INT 29
72335: DOUBLE
72336: EQUAL
72337: IFTRUE 72347
72339: LD_INT 30
72341: DOUBLE
72342: EQUAL
72343: IFTRUE 72347
72345: GO 72403
72347: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72348: LD_ADDR_VAR 0 9
72352: PUSH
72353: LD_VAR 0 59
72357: PUSH
72358: LD_VAR 0 60
72362: PUSH
72363: LD_VAR 0 61
72367: PUSH
72368: LD_VAR 0 62
72372: PUSH
72373: LD_VAR 0 63
72377: PUSH
72378: LD_VAR 0 64
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: PUSH
72391: LD_VAR 0 4
72395: PUSH
72396: LD_INT 1
72398: PLUS
72399: ARRAY
72400: ST_TO_ADDR
72401: GO 72404
72403: POP
// temp_list2 = [ ] ;
72404: LD_ADDR_VAR 0 10
72408: PUSH
72409: EMPTY
72410: ST_TO_ADDR
// for i in temp_list do
72411: LD_ADDR_VAR 0 8
72415: PUSH
72416: LD_VAR 0 9
72420: PUSH
72421: FOR_IN
72422: IFFALSE 72474
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72424: LD_ADDR_VAR 0 10
72428: PUSH
72429: LD_VAR 0 10
72433: PUSH
72434: LD_VAR 0 8
72438: PUSH
72439: LD_INT 1
72441: ARRAY
72442: PUSH
72443: LD_VAR 0 2
72447: PLUS
72448: PUSH
72449: LD_VAR 0 8
72453: PUSH
72454: LD_INT 2
72456: ARRAY
72457: PUSH
72458: LD_VAR 0 3
72462: PLUS
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: PUSH
72468: EMPTY
72469: LIST
72470: ADD
72471: ST_TO_ADDR
72472: GO 72421
72474: POP
72475: POP
// result = temp_list2 ;
72476: LD_ADDR_VAR 0 7
72480: PUSH
72481: LD_VAR 0 10
72485: ST_TO_ADDR
// end ;
72486: LD_VAR 0 7
72490: RET
// export function EnemyInRange ( unit , dist ) ; begin
72491: LD_INT 0
72493: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72494: LD_ADDR_VAR 0 3
72498: PUSH
72499: LD_VAR 0 1
72503: PPUSH
72504: CALL_OW 255
72508: PPUSH
72509: LD_VAR 0 1
72513: PPUSH
72514: CALL_OW 250
72518: PPUSH
72519: LD_VAR 0 1
72523: PPUSH
72524: CALL_OW 251
72528: PPUSH
72529: LD_VAR 0 2
72533: PPUSH
72534: CALL 45887 0 4
72538: PUSH
72539: LD_INT 4
72541: ARRAY
72542: ST_TO_ADDR
// end ;
72543: LD_VAR 0 3
72547: RET
// export function PlayerSeeMe ( unit ) ; begin
72548: LD_INT 0
72550: PPUSH
// result := See ( your_side , unit ) ;
72551: LD_ADDR_VAR 0 2
72555: PUSH
72556: LD_OWVAR 2
72560: PPUSH
72561: LD_VAR 0 1
72565: PPUSH
72566: CALL_OW 292
72570: ST_TO_ADDR
// end ;
72571: LD_VAR 0 2
72575: RET
// export function ReverseDir ( unit ) ; begin
72576: LD_INT 0
72578: PPUSH
// if not unit then
72579: LD_VAR 0 1
72583: NOT
72584: IFFALSE 72588
// exit ;
72586: GO 72611
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72588: LD_ADDR_VAR 0 2
72592: PUSH
72593: LD_VAR 0 1
72597: PPUSH
72598: CALL_OW 254
72602: PUSH
72603: LD_INT 3
72605: PLUS
72606: PUSH
72607: LD_INT 6
72609: MOD
72610: ST_TO_ADDR
// end ;
72611: LD_VAR 0 2
72615: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
72616: LD_INT 0
72618: PPUSH
72619: PPUSH
72620: PPUSH
72621: PPUSH
72622: PPUSH
// if not hexes then
72623: LD_VAR 0 2
72627: NOT
72628: IFFALSE 72632
// exit ;
72630: GO 72780
// dist := 9999 ;
72632: LD_ADDR_VAR 0 5
72636: PUSH
72637: LD_INT 9999
72639: ST_TO_ADDR
// for i = 1 to hexes do
72640: LD_ADDR_VAR 0 4
72644: PUSH
72645: DOUBLE
72646: LD_INT 1
72648: DEC
72649: ST_TO_ADDR
72650: LD_VAR 0 2
72654: PUSH
72655: FOR_TO
72656: IFFALSE 72768
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
72658: LD_VAR 0 1
72662: PPUSH
72663: LD_VAR 0 2
72667: PUSH
72668: LD_VAR 0 4
72672: ARRAY
72673: PUSH
72674: LD_INT 1
72676: ARRAY
72677: PPUSH
72678: LD_VAR 0 2
72682: PUSH
72683: LD_VAR 0 4
72687: ARRAY
72688: PUSH
72689: LD_INT 2
72691: ARRAY
72692: PPUSH
72693: CALL_OW 297
72697: PUSH
72698: LD_VAR 0 5
72702: LESS
72703: IFFALSE 72766
// begin hex := hexes [ i ] ;
72705: LD_ADDR_VAR 0 7
72709: PUSH
72710: LD_VAR 0 2
72714: PUSH
72715: LD_VAR 0 4
72719: ARRAY
72720: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72721: LD_ADDR_VAR 0 5
72725: PUSH
72726: LD_VAR 0 1
72730: PPUSH
72731: LD_VAR 0 2
72735: PUSH
72736: LD_VAR 0 4
72740: ARRAY
72741: PUSH
72742: LD_INT 1
72744: ARRAY
72745: PPUSH
72746: LD_VAR 0 2
72750: PUSH
72751: LD_VAR 0 4
72755: ARRAY
72756: PUSH
72757: LD_INT 2
72759: ARRAY
72760: PPUSH
72761: CALL_OW 297
72765: ST_TO_ADDR
// end ; end ;
72766: GO 72655
72768: POP
72769: POP
// result := hex ;
72770: LD_ADDR_VAR 0 3
72774: PUSH
72775: LD_VAR 0 7
72779: ST_TO_ADDR
// end ;
72780: LD_VAR 0 3
72784: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72785: LD_INT 0
72787: PPUSH
72788: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72789: LD_VAR 0 1
72793: NOT
72794: PUSH
72795: LD_VAR 0 1
72799: PUSH
72800: LD_INT 21
72802: PUSH
72803: LD_INT 2
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: PUSH
72810: LD_INT 23
72812: PUSH
72813: LD_INT 2
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PPUSH
72824: CALL_OW 69
72828: IN
72829: NOT
72830: OR
72831: IFFALSE 72835
// exit ;
72833: GO 72882
// for i = 1 to 3 do
72835: LD_ADDR_VAR 0 3
72839: PUSH
72840: DOUBLE
72841: LD_INT 1
72843: DEC
72844: ST_TO_ADDR
72845: LD_INT 3
72847: PUSH
72848: FOR_TO
72849: IFFALSE 72880
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72851: LD_VAR 0 1
72855: PPUSH
72856: CALL_OW 250
72860: PPUSH
72861: LD_VAR 0 1
72865: PPUSH
72866: CALL_OW 251
72870: PPUSH
72871: LD_INT 1
72873: PPUSH
72874: CALL_OW 453
72878: GO 72848
72880: POP
72881: POP
// end ;
72882: LD_VAR 0 2
72886: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72887: LD_INT 0
72889: PPUSH
72890: PPUSH
72891: PPUSH
72892: PPUSH
72893: PPUSH
72894: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72895: LD_VAR 0 1
72899: NOT
72900: PUSH
72901: LD_VAR 0 2
72905: NOT
72906: OR
72907: PUSH
72908: LD_VAR 0 1
72912: PPUSH
72913: CALL_OW 314
72917: OR
72918: IFFALSE 72922
// exit ;
72920: GO 73363
// x := GetX ( enemy_unit ) ;
72922: LD_ADDR_VAR 0 7
72926: PUSH
72927: LD_VAR 0 2
72931: PPUSH
72932: CALL_OW 250
72936: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72937: LD_ADDR_VAR 0 8
72941: PUSH
72942: LD_VAR 0 2
72946: PPUSH
72947: CALL_OW 251
72951: ST_TO_ADDR
// if not x or not y then
72952: LD_VAR 0 7
72956: NOT
72957: PUSH
72958: LD_VAR 0 8
72962: NOT
72963: OR
72964: IFFALSE 72968
// exit ;
72966: GO 73363
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72968: LD_ADDR_VAR 0 6
72972: PUSH
72973: LD_VAR 0 7
72977: PPUSH
72978: LD_INT 0
72980: PPUSH
72981: LD_INT 4
72983: PPUSH
72984: CALL_OW 272
72988: PUSH
72989: LD_VAR 0 8
72993: PPUSH
72994: LD_INT 0
72996: PPUSH
72997: LD_INT 4
72999: PPUSH
73000: CALL_OW 273
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: PUSH
73009: LD_VAR 0 7
73013: PPUSH
73014: LD_INT 1
73016: PPUSH
73017: LD_INT 4
73019: PPUSH
73020: CALL_OW 272
73024: PUSH
73025: LD_VAR 0 8
73029: PPUSH
73030: LD_INT 1
73032: PPUSH
73033: LD_INT 4
73035: PPUSH
73036: CALL_OW 273
73040: PUSH
73041: EMPTY
73042: LIST
73043: LIST
73044: PUSH
73045: LD_VAR 0 7
73049: PPUSH
73050: LD_INT 2
73052: PPUSH
73053: LD_INT 4
73055: PPUSH
73056: CALL_OW 272
73060: PUSH
73061: LD_VAR 0 8
73065: PPUSH
73066: LD_INT 2
73068: PPUSH
73069: LD_INT 4
73071: PPUSH
73072: CALL_OW 273
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: PUSH
73081: LD_VAR 0 7
73085: PPUSH
73086: LD_INT 3
73088: PPUSH
73089: LD_INT 4
73091: PPUSH
73092: CALL_OW 272
73096: PUSH
73097: LD_VAR 0 8
73101: PPUSH
73102: LD_INT 3
73104: PPUSH
73105: LD_INT 4
73107: PPUSH
73108: CALL_OW 273
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: LD_VAR 0 7
73121: PPUSH
73122: LD_INT 4
73124: PPUSH
73125: LD_INT 4
73127: PPUSH
73128: CALL_OW 272
73132: PUSH
73133: LD_VAR 0 8
73137: PPUSH
73138: LD_INT 4
73140: PPUSH
73141: LD_INT 4
73143: PPUSH
73144: CALL_OW 273
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PUSH
73153: LD_VAR 0 7
73157: PPUSH
73158: LD_INT 5
73160: PPUSH
73161: LD_INT 4
73163: PPUSH
73164: CALL_OW 272
73168: PUSH
73169: LD_VAR 0 8
73173: PPUSH
73174: LD_INT 5
73176: PPUSH
73177: LD_INT 4
73179: PPUSH
73180: CALL_OW 273
73184: PUSH
73185: EMPTY
73186: LIST
73187: LIST
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: ST_TO_ADDR
// for i = tmp downto 1 do
73197: LD_ADDR_VAR 0 4
73201: PUSH
73202: DOUBLE
73203: LD_VAR 0 6
73207: INC
73208: ST_TO_ADDR
73209: LD_INT 1
73211: PUSH
73212: FOR_DOWNTO
73213: IFFALSE 73314
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73215: LD_VAR 0 6
73219: PUSH
73220: LD_VAR 0 4
73224: ARRAY
73225: PUSH
73226: LD_INT 1
73228: ARRAY
73229: PPUSH
73230: LD_VAR 0 6
73234: PUSH
73235: LD_VAR 0 4
73239: ARRAY
73240: PUSH
73241: LD_INT 2
73243: ARRAY
73244: PPUSH
73245: CALL_OW 488
73249: NOT
73250: PUSH
73251: LD_VAR 0 6
73255: PUSH
73256: LD_VAR 0 4
73260: ARRAY
73261: PUSH
73262: LD_INT 1
73264: ARRAY
73265: PPUSH
73266: LD_VAR 0 6
73270: PUSH
73271: LD_VAR 0 4
73275: ARRAY
73276: PUSH
73277: LD_INT 2
73279: ARRAY
73280: PPUSH
73281: CALL_OW 428
73285: PUSH
73286: LD_INT 0
73288: NONEQUAL
73289: OR
73290: IFFALSE 73312
// tmp := Delete ( tmp , i ) ;
73292: LD_ADDR_VAR 0 6
73296: PUSH
73297: LD_VAR 0 6
73301: PPUSH
73302: LD_VAR 0 4
73306: PPUSH
73307: CALL_OW 3
73311: ST_TO_ADDR
73312: GO 73212
73314: POP
73315: POP
// j := GetClosestHex ( unit , tmp ) ;
73316: LD_ADDR_VAR 0 5
73320: PUSH
73321: LD_VAR 0 1
73325: PPUSH
73326: LD_VAR 0 6
73330: PPUSH
73331: CALL 72616 0 2
73335: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73336: LD_VAR 0 1
73340: PPUSH
73341: LD_VAR 0 5
73345: PUSH
73346: LD_INT 1
73348: ARRAY
73349: PPUSH
73350: LD_VAR 0 5
73354: PUSH
73355: LD_INT 2
73357: ARRAY
73358: PPUSH
73359: CALL_OW 111
// end ;
73363: LD_VAR 0 3
73367: RET
// export function PrepareApemanSoldier ( ) ; begin
73368: LD_INT 0
73370: PPUSH
// uc_nation := 0 ;
73371: LD_ADDR_OWVAR 21
73375: PUSH
73376: LD_INT 0
73378: ST_TO_ADDR
// hc_sex := sex_male ;
73379: LD_ADDR_OWVAR 27
73383: PUSH
73384: LD_INT 1
73386: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73387: LD_ADDR_OWVAR 28
73391: PUSH
73392: LD_INT 15
73394: ST_TO_ADDR
// hc_gallery :=  ;
73395: LD_ADDR_OWVAR 33
73399: PUSH
73400: LD_STRING 
73402: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73403: LD_ADDR_OWVAR 31
73407: PUSH
73408: LD_INT 0
73410: PPUSH
73411: LD_INT 3
73413: PPUSH
73414: CALL_OW 12
73418: PUSH
73419: LD_INT 0
73421: PPUSH
73422: LD_INT 3
73424: PPUSH
73425: CALL_OW 12
73429: PUSH
73430: LD_INT 0
73432: PUSH
73433: LD_INT 0
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: LIST
73440: LIST
73441: ST_TO_ADDR
// end ;
73442: LD_VAR 0 1
73446: RET
// export function PrepareApemanEngineer ( ) ; begin
73447: LD_INT 0
73449: PPUSH
// uc_nation := 0 ;
73450: LD_ADDR_OWVAR 21
73454: PUSH
73455: LD_INT 0
73457: ST_TO_ADDR
// hc_sex := sex_male ;
73458: LD_ADDR_OWVAR 27
73462: PUSH
73463: LD_INT 1
73465: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73466: LD_ADDR_OWVAR 28
73470: PUSH
73471: LD_INT 16
73473: ST_TO_ADDR
// hc_gallery :=  ;
73474: LD_ADDR_OWVAR 33
73478: PUSH
73479: LD_STRING 
73481: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73482: LD_ADDR_OWVAR 31
73486: PUSH
73487: LD_INT 0
73489: PPUSH
73490: LD_INT 3
73492: PPUSH
73493: CALL_OW 12
73497: PUSH
73498: LD_INT 0
73500: PPUSH
73501: LD_INT 3
73503: PPUSH
73504: CALL_OW 12
73508: PUSH
73509: LD_INT 0
73511: PUSH
73512: LD_INT 0
73514: PUSH
73515: EMPTY
73516: LIST
73517: LIST
73518: LIST
73519: LIST
73520: ST_TO_ADDR
// end ;
73521: LD_VAR 0 1
73525: RET
// export function PrepareApeman ( agressivity ) ; begin
73526: LD_INT 0
73528: PPUSH
// uc_side := 0 ;
73529: LD_ADDR_OWVAR 20
73533: PUSH
73534: LD_INT 0
73536: ST_TO_ADDR
// uc_nation := 0 ;
73537: LD_ADDR_OWVAR 21
73541: PUSH
73542: LD_INT 0
73544: ST_TO_ADDR
// hc_sex := sex_male ;
73545: LD_ADDR_OWVAR 27
73549: PUSH
73550: LD_INT 1
73552: ST_TO_ADDR
// hc_class := class_apeman ;
73553: LD_ADDR_OWVAR 28
73557: PUSH
73558: LD_INT 12
73560: ST_TO_ADDR
// hc_gallery :=  ;
73561: LD_ADDR_OWVAR 33
73565: PUSH
73566: LD_STRING 
73568: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73569: LD_ADDR_OWVAR 35
73573: PUSH
73574: LD_VAR 0 1
73578: NEG
73579: PPUSH
73580: LD_VAR 0 1
73584: PPUSH
73585: CALL_OW 12
73589: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73590: LD_ADDR_OWVAR 31
73594: PUSH
73595: LD_INT 0
73597: PPUSH
73598: LD_INT 3
73600: PPUSH
73601: CALL_OW 12
73605: PUSH
73606: LD_INT 0
73608: PPUSH
73609: LD_INT 3
73611: PPUSH
73612: CALL_OW 12
73616: PUSH
73617: LD_INT 0
73619: PUSH
73620: LD_INT 0
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: LIST
73627: LIST
73628: ST_TO_ADDR
// end ;
73629: LD_VAR 0 2
73633: RET
// export function PrepareTiger ( agressivity ) ; begin
73634: LD_INT 0
73636: PPUSH
// uc_side := 0 ;
73637: LD_ADDR_OWVAR 20
73641: PUSH
73642: LD_INT 0
73644: ST_TO_ADDR
// uc_nation := 0 ;
73645: LD_ADDR_OWVAR 21
73649: PUSH
73650: LD_INT 0
73652: ST_TO_ADDR
// hc_class := class_tiger ;
73653: LD_ADDR_OWVAR 28
73657: PUSH
73658: LD_INT 14
73660: ST_TO_ADDR
// hc_gallery :=  ;
73661: LD_ADDR_OWVAR 33
73665: PUSH
73666: LD_STRING 
73668: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73669: LD_ADDR_OWVAR 35
73673: PUSH
73674: LD_VAR 0 1
73678: NEG
73679: PPUSH
73680: LD_VAR 0 1
73684: PPUSH
73685: CALL_OW 12
73689: ST_TO_ADDR
// end ;
73690: LD_VAR 0 2
73694: RET
// export function PrepareEnchidna ( ) ; begin
73695: LD_INT 0
73697: PPUSH
// uc_side := 0 ;
73698: LD_ADDR_OWVAR 20
73702: PUSH
73703: LD_INT 0
73705: ST_TO_ADDR
// uc_nation := 0 ;
73706: LD_ADDR_OWVAR 21
73710: PUSH
73711: LD_INT 0
73713: ST_TO_ADDR
// hc_class := class_baggie ;
73714: LD_ADDR_OWVAR 28
73718: PUSH
73719: LD_INT 13
73721: ST_TO_ADDR
// hc_gallery :=  ;
73722: LD_ADDR_OWVAR 33
73726: PUSH
73727: LD_STRING 
73729: ST_TO_ADDR
// end ;
73730: LD_VAR 0 1
73734: RET
// export function PrepareFrog ( ) ; begin
73735: LD_INT 0
73737: PPUSH
// uc_side := 0 ;
73738: LD_ADDR_OWVAR 20
73742: PUSH
73743: LD_INT 0
73745: ST_TO_ADDR
// uc_nation := 0 ;
73746: LD_ADDR_OWVAR 21
73750: PUSH
73751: LD_INT 0
73753: ST_TO_ADDR
// hc_class := class_frog ;
73754: LD_ADDR_OWVAR 28
73758: PUSH
73759: LD_INT 19
73761: ST_TO_ADDR
// hc_gallery :=  ;
73762: LD_ADDR_OWVAR 33
73766: PUSH
73767: LD_STRING 
73769: ST_TO_ADDR
// end ;
73770: LD_VAR 0 1
73774: RET
// export function PrepareFish ( ) ; begin
73775: LD_INT 0
73777: PPUSH
// uc_side := 0 ;
73778: LD_ADDR_OWVAR 20
73782: PUSH
73783: LD_INT 0
73785: ST_TO_ADDR
// uc_nation := 0 ;
73786: LD_ADDR_OWVAR 21
73790: PUSH
73791: LD_INT 0
73793: ST_TO_ADDR
// hc_class := class_fish ;
73794: LD_ADDR_OWVAR 28
73798: PUSH
73799: LD_INT 20
73801: ST_TO_ADDR
// hc_gallery :=  ;
73802: LD_ADDR_OWVAR 33
73806: PUSH
73807: LD_STRING 
73809: ST_TO_ADDR
// end ;
73810: LD_VAR 0 1
73814: RET
// export function PrepareBird ( ) ; begin
73815: LD_INT 0
73817: PPUSH
// uc_side := 0 ;
73818: LD_ADDR_OWVAR 20
73822: PUSH
73823: LD_INT 0
73825: ST_TO_ADDR
// uc_nation := 0 ;
73826: LD_ADDR_OWVAR 21
73830: PUSH
73831: LD_INT 0
73833: ST_TO_ADDR
// hc_class := class_phororhacos ;
73834: LD_ADDR_OWVAR 28
73838: PUSH
73839: LD_INT 18
73841: ST_TO_ADDR
// hc_gallery :=  ;
73842: LD_ADDR_OWVAR 33
73846: PUSH
73847: LD_STRING 
73849: ST_TO_ADDR
// end ;
73850: LD_VAR 0 1
73854: RET
// export function PrepareHorse ( ) ; begin
73855: LD_INT 0
73857: PPUSH
// uc_side := 0 ;
73858: LD_ADDR_OWVAR 20
73862: PUSH
73863: LD_INT 0
73865: ST_TO_ADDR
// uc_nation := 0 ;
73866: LD_ADDR_OWVAR 21
73870: PUSH
73871: LD_INT 0
73873: ST_TO_ADDR
// hc_class := class_horse ;
73874: LD_ADDR_OWVAR 28
73878: PUSH
73879: LD_INT 21
73881: ST_TO_ADDR
// hc_gallery :=  ;
73882: LD_ADDR_OWVAR 33
73886: PUSH
73887: LD_STRING 
73889: ST_TO_ADDR
// end ;
73890: LD_VAR 0 1
73894: RET
// export function PrepareMastodont ( ) ; begin
73895: LD_INT 0
73897: PPUSH
// uc_side := 0 ;
73898: LD_ADDR_OWVAR 20
73902: PUSH
73903: LD_INT 0
73905: ST_TO_ADDR
// uc_nation := 0 ;
73906: LD_ADDR_OWVAR 21
73910: PUSH
73911: LD_INT 0
73913: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73914: LD_ADDR_OWVAR 37
73918: PUSH
73919: LD_INT 31
73921: ST_TO_ADDR
// vc_control := control_rider ;
73922: LD_ADDR_OWVAR 38
73926: PUSH
73927: LD_INT 4
73929: ST_TO_ADDR
// end ;
73930: LD_VAR 0 1
73934: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73935: LD_INT 0
73937: PPUSH
73938: PPUSH
73939: PPUSH
// uc_side = 0 ;
73940: LD_ADDR_OWVAR 20
73944: PUSH
73945: LD_INT 0
73947: ST_TO_ADDR
// uc_nation = 0 ;
73948: LD_ADDR_OWVAR 21
73952: PUSH
73953: LD_INT 0
73955: ST_TO_ADDR
// InitHc_All ( ) ;
73956: CALL_OW 584
// InitVc ;
73960: CALL_OW 20
// if mastodonts then
73964: LD_VAR 0 6
73968: IFFALSE 74035
// for i = 1 to mastodonts do
73970: LD_ADDR_VAR 0 11
73974: PUSH
73975: DOUBLE
73976: LD_INT 1
73978: DEC
73979: ST_TO_ADDR
73980: LD_VAR 0 6
73984: PUSH
73985: FOR_TO
73986: IFFALSE 74033
// begin vc_chassis := 31 ;
73988: LD_ADDR_OWVAR 37
73992: PUSH
73993: LD_INT 31
73995: ST_TO_ADDR
// vc_control := control_rider ;
73996: LD_ADDR_OWVAR 38
74000: PUSH
74001: LD_INT 4
74003: ST_TO_ADDR
// animal := CreateVehicle ;
74004: LD_ADDR_VAR 0 12
74008: PUSH
74009: CALL_OW 45
74013: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74014: LD_VAR 0 12
74018: PPUSH
74019: LD_VAR 0 8
74023: PPUSH
74024: LD_INT 0
74026: PPUSH
74027: CALL 76170 0 3
// end ;
74031: GO 73985
74033: POP
74034: POP
// if horses then
74035: LD_VAR 0 5
74039: IFFALSE 74106
// for i = 1 to horses do
74041: LD_ADDR_VAR 0 11
74045: PUSH
74046: DOUBLE
74047: LD_INT 1
74049: DEC
74050: ST_TO_ADDR
74051: LD_VAR 0 5
74055: PUSH
74056: FOR_TO
74057: IFFALSE 74104
// begin hc_class := 21 ;
74059: LD_ADDR_OWVAR 28
74063: PUSH
74064: LD_INT 21
74066: ST_TO_ADDR
// hc_gallery :=  ;
74067: LD_ADDR_OWVAR 33
74071: PUSH
74072: LD_STRING 
74074: ST_TO_ADDR
// animal := CreateHuman ;
74075: LD_ADDR_VAR 0 12
74079: PUSH
74080: CALL_OW 44
74084: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74085: LD_VAR 0 12
74089: PPUSH
74090: LD_VAR 0 8
74094: PPUSH
74095: LD_INT 0
74097: PPUSH
74098: CALL 76170 0 3
// end ;
74102: GO 74056
74104: POP
74105: POP
// if birds then
74106: LD_VAR 0 1
74110: IFFALSE 74177
// for i = 1 to birds do
74112: LD_ADDR_VAR 0 11
74116: PUSH
74117: DOUBLE
74118: LD_INT 1
74120: DEC
74121: ST_TO_ADDR
74122: LD_VAR 0 1
74126: PUSH
74127: FOR_TO
74128: IFFALSE 74175
// begin hc_class = 18 ;
74130: LD_ADDR_OWVAR 28
74134: PUSH
74135: LD_INT 18
74137: ST_TO_ADDR
// hc_gallery =  ;
74138: LD_ADDR_OWVAR 33
74142: PUSH
74143: LD_STRING 
74145: ST_TO_ADDR
// animal := CreateHuman ;
74146: LD_ADDR_VAR 0 12
74150: PUSH
74151: CALL_OW 44
74155: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74156: LD_VAR 0 12
74160: PPUSH
74161: LD_VAR 0 8
74165: PPUSH
74166: LD_INT 0
74168: PPUSH
74169: CALL 76170 0 3
// end ;
74173: GO 74127
74175: POP
74176: POP
// if tigers then
74177: LD_VAR 0 2
74181: IFFALSE 74265
// for i = 1 to tigers do
74183: LD_ADDR_VAR 0 11
74187: PUSH
74188: DOUBLE
74189: LD_INT 1
74191: DEC
74192: ST_TO_ADDR
74193: LD_VAR 0 2
74197: PUSH
74198: FOR_TO
74199: IFFALSE 74263
// begin hc_class = class_tiger ;
74201: LD_ADDR_OWVAR 28
74205: PUSH
74206: LD_INT 14
74208: ST_TO_ADDR
// hc_gallery =  ;
74209: LD_ADDR_OWVAR 33
74213: PUSH
74214: LD_STRING 
74216: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74217: LD_ADDR_OWVAR 35
74221: PUSH
74222: LD_INT 7
74224: NEG
74225: PPUSH
74226: LD_INT 7
74228: PPUSH
74229: CALL_OW 12
74233: ST_TO_ADDR
// animal := CreateHuman ;
74234: LD_ADDR_VAR 0 12
74238: PUSH
74239: CALL_OW 44
74243: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74244: LD_VAR 0 12
74248: PPUSH
74249: LD_VAR 0 8
74253: PPUSH
74254: LD_INT 0
74256: PPUSH
74257: CALL 76170 0 3
// end ;
74261: GO 74198
74263: POP
74264: POP
// if apemans then
74265: LD_VAR 0 3
74269: IFFALSE 74392
// for i = 1 to apemans do
74271: LD_ADDR_VAR 0 11
74275: PUSH
74276: DOUBLE
74277: LD_INT 1
74279: DEC
74280: ST_TO_ADDR
74281: LD_VAR 0 3
74285: PUSH
74286: FOR_TO
74287: IFFALSE 74390
// begin hc_class = class_apeman ;
74289: LD_ADDR_OWVAR 28
74293: PUSH
74294: LD_INT 12
74296: ST_TO_ADDR
// hc_gallery =  ;
74297: LD_ADDR_OWVAR 33
74301: PUSH
74302: LD_STRING 
74304: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74305: LD_ADDR_OWVAR 35
74309: PUSH
74310: LD_INT 2
74312: NEG
74313: PPUSH
74314: LD_INT 2
74316: PPUSH
74317: CALL_OW 12
74321: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74322: LD_ADDR_OWVAR 31
74326: PUSH
74327: LD_INT 1
74329: PPUSH
74330: LD_INT 3
74332: PPUSH
74333: CALL_OW 12
74337: PUSH
74338: LD_INT 1
74340: PPUSH
74341: LD_INT 3
74343: PPUSH
74344: CALL_OW 12
74348: PUSH
74349: LD_INT 0
74351: PUSH
74352: LD_INT 0
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: ST_TO_ADDR
// animal := CreateHuman ;
74361: LD_ADDR_VAR 0 12
74365: PUSH
74366: CALL_OW 44
74370: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74371: LD_VAR 0 12
74375: PPUSH
74376: LD_VAR 0 8
74380: PPUSH
74381: LD_INT 0
74383: PPUSH
74384: CALL 76170 0 3
// end ;
74388: GO 74286
74390: POP
74391: POP
// if enchidnas then
74392: LD_VAR 0 4
74396: IFFALSE 74463
// for i = 1 to enchidnas do
74398: LD_ADDR_VAR 0 11
74402: PUSH
74403: DOUBLE
74404: LD_INT 1
74406: DEC
74407: ST_TO_ADDR
74408: LD_VAR 0 4
74412: PUSH
74413: FOR_TO
74414: IFFALSE 74461
// begin hc_class = 13 ;
74416: LD_ADDR_OWVAR 28
74420: PUSH
74421: LD_INT 13
74423: ST_TO_ADDR
// hc_gallery =  ;
74424: LD_ADDR_OWVAR 33
74428: PUSH
74429: LD_STRING 
74431: ST_TO_ADDR
// animal := CreateHuman ;
74432: LD_ADDR_VAR 0 12
74436: PUSH
74437: CALL_OW 44
74441: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74442: LD_VAR 0 12
74446: PPUSH
74447: LD_VAR 0 8
74451: PPUSH
74452: LD_INT 0
74454: PPUSH
74455: CALL 76170 0 3
// end ;
74459: GO 74413
74461: POP
74462: POP
// if fishes then
74463: LD_VAR 0 7
74467: IFFALSE 74534
// for i = 1 to fishes do
74469: LD_ADDR_VAR 0 11
74473: PUSH
74474: DOUBLE
74475: LD_INT 1
74477: DEC
74478: ST_TO_ADDR
74479: LD_VAR 0 7
74483: PUSH
74484: FOR_TO
74485: IFFALSE 74532
// begin hc_class = 20 ;
74487: LD_ADDR_OWVAR 28
74491: PUSH
74492: LD_INT 20
74494: ST_TO_ADDR
// hc_gallery =  ;
74495: LD_ADDR_OWVAR 33
74499: PUSH
74500: LD_STRING 
74502: ST_TO_ADDR
// animal := CreateHuman ;
74503: LD_ADDR_VAR 0 12
74507: PUSH
74508: CALL_OW 44
74512: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74513: LD_VAR 0 12
74517: PPUSH
74518: LD_VAR 0 9
74522: PPUSH
74523: LD_INT 0
74525: PPUSH
74526: CALL 76170 0 3
// end ;
74530: GO 74484
74532: POP
74533: POP
// end ;
74534: LD_VAR 0 10
74538: RET
// export function WantHeal ( sci , unit ) ; begin
74539: LD_INT 0
74541: PPUSH
// if GetTaskList ( sci ) > 0 then
74542: LD_VAR 0 1
74546: PPUSH
74547: CALL_OW 437
74551: PUSH
74552: LD_INT 0
74554: GREATER
74555: IFFALSE 74625
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74557: LD_VAR 0 1
74561: PPUSH
74562: CALL_OW 437
74566: PUSH
74567: LD_INT 1
74569: ARRAY
74570: PUSH
74571: LD_INT 1
74573: ARRAY
74574: PUSH
74575: LD_STRING l
74577: EQUAL
74578: PUSH
74579: LD_VAR 0 1
74583: PPUSH
74584: CALL_OW 437
74588: PUSH
74589: LD_INT 1
74591: ARRAY
74592: PUSH
74593: LD_INT 4
74595: ARRAY
74596: PUSH
74597: LD_VAR 0 2
74601: EQUAL
74602: AND
74603: IFFALSE 74615
// result := true else
74605: LD_ADDR_VAR 0 3
74609: PUSH
74610: LD_INT 1
74612: ST_TO_ADDR
74613: GO 74623
// result := false ;
74615: LD_ADDR_VAR 0 3
74619: PUSH
74620: LD_INT 0
74622: ST_TO_ADDR
// end else
74623: GO 74633
// result := false ;
74625: LD_ADDR_VAR 0 3
74629: PUSH
74630: LD_INT 0
74632: ST_TO_ADDR
// end ;
74633: LD_VAR 0 3
74637: RET
// export function HealTarget ( sci ) ; begin
74638: LD_INT 0
74640: PPUSH
// if not sci then
74641: LD_VAR 0 1
74645: NOT
74646: IFFALSE 74650
// exit ;
74648: GO 74715
// result := 0 ;
74650: LD_ADDR_VAR 0 2
74654: PUSH
74655: LD_INT 0
74657: ST_TO_ADDR
// if GetTaskList ( sci ) then
74658: LD_VAR 0 1
74662: PPUSH
74663: CALL_OW 437
74667: IFFALSE 74715
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74669: LD_VAR 0 1
74673: PPUSH
74674: CALL_OW 437
74678: PUSH
74679: LD_INT 1
74681: ARRAY
74682: PUSH
74683: LD_INT 1
74685: ARRAY
74686: PUSH
74687: LD_STRING l
74689: EQUAL
74690: IFFALSE 74715
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74692: LD_ADDR_VAR 0 2
74696: PUSH
74697: LD_VAR 0 1
74701: PPUSH
74702: CALL_OW 437
74706: PUSH
74707: LD_INT 1
74709: ARRAY
74710: PUSH
74711: LD_INT 4
74713: ARRAY
74714: ST_TO_ADDR
// end ;
74715: LD_VAR 0 2
74719: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74720: LD_INT 0
74722: PPUSH
74723: PPUSH
74724: PPUSH
74725: PPUSH
// if not base_units then
74726: LD_VAR 0 1
74730: NOT
74731: IFFALSE 74735
// exit ;
74733: GO 74822
// result := false ;
74735: LD_ADDR_VAR 0 2
74739: PUSH
74740: LD_INT 0
74742: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74743: LD_ADDR_VAR 0 5
74747: PUSH
74748: LD_VAR 0 1
74752: PPUSH
74753: LD_INT 21
74755: PUSH
74756: LD_INT 3
74758: PUSH
74759: EMPTY
74760: LIST
74761: LIST
74762: PPUSH
74763: CALL_OW 72
74767: ST_TO_ADDR
// if not tmp then
74768: LD_VAR 0 5
74772: NOT
74773: IFFALSE 74777
// exit ;
74775: GO 74822
// for i in tmp do
74777: LD_ADDR_VAR 0 3
74781: PUSH
74782: LD_VAR 0 5
74786: PUSH
74787: FOR_IN
74788: IFFALSE 74820
// begin result := EnemyInRange ( i , 22 ) ;
74790: LD_ADDR_VAR 0 2
74794: PUSH
74795: LD_VAR 0 3
74799: PPUSH
74800: LD_INT 22
74802: PPUSH
74803: CALL 72491 0 2
74807: ST_TO_ADDR
// if result then
74808: LD_VAR 0 2
74812: IFFALSE 74818
// exit ;
74814: POP
74815: POP
74816: GO 74822
// end ;
74818: GO 74787
74820: POP
74821: POP
// end ;
74822: LD_VAR 0 2
74826: RET
// export function FilterByTag ( units , tag ) ; begin
74827: LD_INT 0
74829: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74830: LD_ADDR_VAR 0 3
74834: PUSH
74835: LD_VAR 0 1
74839: PPUSH
74840: LD_INT 120
74842: PUSH
74843: LD_VAR 0 2
74847: PUSH
74848: EMPTY
74849: LIST
74850: LIST
74851: PPUSH
74852: CALL_OW 72
74856: ST_TO_ADDR
// end ;
74857: LD_VAR 0 3
74861: RET
// export function IsDriver ( un ) ; begin
74862: LD_INT 0
74864: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74865: LD_ADDR_VAR 0 2
74869: PUSH
74870: LD_VAR 0 1
74874: PUSH
74875: LD_INT 55
74877: PUSH
74878: EMPTY
74879: LIST
74880: PPUSH
74881: CALL_OW 69
74885: IN
74886: ST_TO_ADDR
// end ;
74887: LD_VAR 0 2
74891: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74892: LD_INT 0
74894: PPUSH
74895: PPUSH
// list := [ ] ;
74896: LD_ADDR_VAR 0 5
74900: PUSH
74901: EMPTY
74902: ST_TO_ADDR
// case d of 0 :
74903: LD_VAR 0 3
74907: PUSH
74908: LD_INT 0
74910: DOUBLE
74911: EQUAL
74912: IFTRUE 74916
74914: GO 75049
74916: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74917: LD_ADDR_VAR 0 5
74921: PUSH
74922: LD_VAR 0 1
74926: PUSH
74927: LD_INT 4
74929: MINUS
74930: PUSH
74931: LD_VAR 0 2
74935: PUSH
74936: LD_INT 4
74938: MINUS
74939: PUSH
74940: LD_INT 2
74942: PUSH
74943: EMPTY
74944: LIST
74945: LIST
74946: LIST
74947: PUSH
74948: LD_VAR 0 1
74952: PUSH
74953: LD_INT 3
74955: MINUS
74956: PUSH
74957: LD_VAR 0 2
74961: PUSH
74962: LD_INT 1
74964: PUSH
74965: EMPTY
74966: LIST
74967: LIST
74968: LIST
74969: PUSH
74970: LD_VAR 0 1
74974: PUSH
74975: LD_INT 4
74977: PLUS
74978: PUSH
74979: LD_VAR 0 2
74983: PUSH
74984: LD_INT 4
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: LIST
74991: PUSH
74992: LD_VAR 0 1
74996: PUSH
74997: LD_INT 3
74999: PLUS
75000: PUSH
75001: LD_VAR 0 2
75005: PUSH
75006: LD_INT 3
75008: PLUS
75009: PUSH
75010: LD_INT 5
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: LIST
75017: PUSH
75018: LD_VAR 0 1
75022: PUSH
75023: LD_VAR 0 2
75027: PUSH
75028: LD_INT 4
75030: PLUS
75031: PUSH
75032: LD_INT 0
75034: PUSH
75035: EMPTY
75036: LIST
75037: LIST
75038: LIST
75039: PUSH
75040: EMPTY
75041: LIST
75042: LIST
75043: LIST
75044: LIST
75045: LIST
75046: ST_TO_ADDR
// end ; 1 :
75047: GO 75747
75049: LD_INT 1
75051: DOUBLE
75052: EQUAL
75053: IFTRUE 75057
75055: GO 75190
75057: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75058: LD_ADDR_VAR 0 5
75062: PUSH
75063: LD_VAR 0 1
75067: PUSH
75068: LD_VAR 0 2
75072: PUSH
75073: LD_INT 4
75075: MINUS
75076: PUSH
75077: LD_INT 3
75079: PUSH
75080: EMPTY
75081: LIST
75082: LIST
75083: LIST
75084: PUSH
75085: LD_VAR 0 1
75089: PUSH
75090: LD_INT 3
75092: MINUS
75093: PUSH
75094: LD_VAR 0 2
75098: PUSH
75099: LD_INT 3
75101: MINUS
75102: PUSH
75103: LD_INT 2
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: LIST
75110: PUSH
75111: LD_VAR 0 1
75115: PUSH
75116: LD_INT 4
75118: MINUS
75119: PUSH
75120: LD_VAR 0 2
75124: PUSH
75125: LD_INT 1
75127: PUSH
75128: EMPTY
75129: LIST
75130: LIST
75131: LIST
75132: PUSH
75133: LD_VAR 0 1
75137: PUSH
75138: LD_VAR 0 2
75142: PUSH
75143: LD_INT 3
75145: PLUS
75146: PUSH
75147: LD_INT 0
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: LIST
75154: PUSH
75155: LD_VAR 0 1
75159: PUSH
75160: LD_INT 4
75162: PLUS
75163: PUSH
75164: LD_VAR 0 2
75168: PUSH
75169: LD_INT 4
75171: PLUS
75172: PUSH
75173: LD_INT 5
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: LIST
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: LIST
75185: LIST
75186: LIST
75187: ST_TO_ADDR
// end ; 2 :
75188: GO 75747
75190: LD_INT 2
75192: DOUBLE
75193: EQUAL
75194: IFTRUE 75198
75196: GO 75327
75198: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75199: LD_ADDR_VAR 0 5
75203: PUSH
75204: LD_VAR 0 1
75208: PUSH
75209: LD_VAR 0 2
75213: PUSH
75214: LD_INT 3
75216: MINUS
75217: PUSH
75218: LD_INT 3
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: LIST
75225: PUSH
75226: LD_VAR 0 1
75230: PUSH
75231: LD_INT 4
75233: PLUS
75234: PUSH
75235: LD_VAR 0 2
75239: PUSH
75240: LD_INT 4
75242: PUSH
75243: EMPTY
75244: LIST
75245: LIST
75246: LIST
75247: PUSH
75248: LD_VAR 0 1
75252: PUSH
75253: LD_VAR 0 2
75257: PUSH
75258: LD_INT 4
75260: PLUS
75261: PUSH
75262: LD_INT 0
75264: PUSH
75265: EMPTY
75266: LIST
75267: LIST
75268: LIST
75269: PUSH
75270: LD_VAR 0 1
75274: PUSH
75275: LD_INT 3
75277: MINUS
75278: PUSH
75279: LD_VAR 0 2
75283: PUSH
75284: LD_INT 1
75286: PUSH
75287: EMPTY
75288: LIST
75289: LIST
75290: LIST
75291: PUSH
75292: LD_VAR 0 1
75296: PUSH
75297: LD_INT 4
75299: MINUS
75300: PUSH
75301: LD_VAR 0 2
75305: PUSH
75306: LD_INT 4
75308: MINUS
75309: PUSH
75310: LD_INT 2
75312: PUSH
75313: EMPTY
75314: LIST
75315: LIST
75316: LIST
75317: PUSH
75318: EMPTY
75319: LIST
75320: LIST
75321: LIST
75322: LIST
75323: LIST
75324: ST_TO_ADDR
// end ; 3 :
75325: GO 75747
75327: LD_INT 3
75329: DOUBLE
75330: EQUAL
75331: IFTRUE 75335
75333: GO 75468
75335: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75336: LD_ADDR_VAR 0 5
75340: PUSH
75341: LD_VAR 0 1
75345: PUSH
75346: LD_INT 3
75348: PLUS
75349: PUSH
75350: LD_VAR 0 2
75354: PUSH
75355: LD_INT 4
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: LIST
75362: PUSH
75363: LD_VAR 0 1
75367: PUSH
75368: LD_INT 4
75370: PLUS
75371: PUSH
75372: LD_VAR 0 2
75376: PUSH
75377: LD_INT 4
75379: PLUS
75380: PUSH
75381: LD_INT 5
75383: PUSH
75384: EMPTY
75385: LIST
75386: LIST
75387: LIST
75388: PUSH
75389: LD_VAR 0 1
75393: PUSH
75394: LD_INT 4
75396: MINUS
75397: PUSH
75398: LD_VAR 0 2
75402: PUSH
75403: LD_INT 1
75405: PUSH
75406: EMPTY
75407: LIST
75408: LIST
75409: LIST
75410: PUSH
75411: LD_VAR 0 1
75415: PUSH
75416: LD_VAR 0 2
75420: PUSH
75421: LD_INT 4
75423: MINUS
75424: PUSH
75425: LD_INT 3
75427: PUSH
75428: EMPTY
75429: LIST
75430: LIST
75431: LIST
75432: PUSH
75433: LD_VAR 0 1
75437: PUSH
75438: LD_INT 3
75440: MINUS
75441: PUSH
75442: LD_VAR 0 2
75446: PUSH
75447: LD_INT 3
75449: MINUS
75450: PUSH
75451: LD_INT 2
75453: PUSH
75454: EMPTY
75455: LIST
75456: LIST
75457: LIST
75458: PUSH
75459: EMPTY
75460: LIST
75461: LIST
75462: LIST
75463: LIST
75464: LIST
75465: ST_TO_ADDR
// end ; 4 :
75466: GO 75747
75468: LD_INT 4
75470: DOUBLE
75471: EQUAL
75472: IFTRUE 75476
75474: GO 75609
75476: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75477: LD_ADDR_VAR 0 5
75481: PUSH
75482: LD_VAR 0 1
75486: PUSH
75487: LD_VAR 0 2
75491: PUSH
75492: LD_INT 4
75494: PLUS
75495: PUSH
75496: LD_INT 0
75498: PUSH
75499: EMPTY
75500: LIST
75501: LIST
75502: LIST
75503: PUSH
75504: LD_VAR 0 1
75508: PUSH
75509: LD_INT 3
75511: PLUS
75512: PUSH
75513: LD_VAR 0 2
75517: PUSH
75518: LD_INT 3
75520: PLUS
75521: PUSH
75522: LD_INT 5
75524: PUSH
75525: EMPTY
75526: LIST
75527: LIST
75528: LIST
75529: PUSH
75530: LD_VAR 0 1
75534: PUSH
75535: LD_INT 4
75537: PLUS
75538: PUSH
75539: LD_VAR 0 2
75543: PUSH
75544: LD_INT 4
75546: PUSH
75547: EMPTY
75548: LIST
75549: LIST
75550: LIST
75551: PUSH
75552: LD_VAR 0 1
75556: PUSH
75557: LD_VAR 0 2
75561: PUSH
75562: LD_INT 3
75564: MINUS
75565: PUSH
75566: LD_INT 3
75568: PUSH
75569: EMPTY
75570: LIST
75571: LIST
75572: LIST
75573: PUSH
75574: LD_VAR 0 1
75578: PUSH
75579: LD_INT 4
75581: MINUS
75582: PUSH
75583: LD_VAR 0 2
75587: PUSH
75588: LD_INT 4
75590: MINUS
75591: PUSH
75592: LD_INT 2
75594: PUSH
75595: EMPTY
75596: LIST
75597: LIST
75598: LIST
75599: PUSH
75600: EMPTY
75601: LIST
75602: LIST
75603: LIST
75604: LIST
75605: LIST
75606: ST_TO_ADDR
// end ; 5 :
75607: GO 75747
75609: LD_INT 5
75611: DOUBLE
75612: EQUAL
75613: IFTRUE 75617
75615: GO 75746
75617: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75618: LD_ADDR_VAR 0 5
75622: PUSH
75623: LD_VAR 0 1
75627: PUSH
75628: LD_INT 4
75630: MINUS
75631: PUSH
75632: LD_VAR 0 2
75636: PUSH
75637: LD_INT 1
75639: PUSH
75640: EMPTY
75641: LIST
75642: LIST
75643: LIST
75644: PUSH
75645: LD_VAR 0 1
75649: PUSH
75650: LD_VAR 0 2
75654: PUSH
75655: LD_INT 4
75657: MINUS
75658: PUSH
75659: LD_INT 3
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: LIST
75666: PUSH
75667: LD_VAR 0 1
75671: PUSH
75672: LD_INT 4
75674: PLUS
75675: PUSH
75676: LD_VAR 0 2
75680: PUSH
75681: LD_INT 4
75683: PLUS
75684: PUSH
75685: LD_INT 5
75687: PUSH
75688: EMPTY
75689: LIST
75690: LIST
75691: LIST
75692: PUSH
75693: LD_VAR 0 1
75697: PUSH
75698: LD_INT 3
75700: PLUS
75701: PUSH
75702: LD_VAR 0 2
75706: PUSH
75707: LD_INT 4
75709: PUSH
75710: EMPTY
75711: LIST
75712: LIST
75713: LIST
75714: PUSH
75715: LD_VAR 0 1
75719: PUSH
75720: LD_VAR 0 2
75724: PUSH
75725: LD_INT 3
75727: PLUS
75728: PUSH
75729: LD_INT 0
75731: PUSH
75732: EMPTY
75733: LIST
75734: LIST
75735: LIST
75736: PUSH
75737: EMPTY
75738: LIST
75739: LIST
75740: LIST
75741: LIST
75742: LIST
75743: ST_TO_ADDR
// end ; end ;
75744: GO 75747
75746: POP
// result := list ;
75747: LD_ADDR_VAR 0 4
75751: PUSH
75752: LD_VAR 0 5
75756: ST_TO_ADDR
// end ;
75757: LD_VAR 0 4
75761: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75762: LD_INT 0
75764: PPUSH
75765: PPUSH
75766: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75767: LD_VAR 0 1
75771: NOT
75772: PUSH
75773: LD_VAR 0 2
75777: PUSH
75778: LD_INT 1
75780: PUSH
75781: LD_INT 2
75783: PUSH
75784: LD_INT 3
75786: PUSH
75787: LD_INT 4
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: LIST
75794: LIST
75795: IN
75796: NOT
75797: OR
75798: IFFALSE 75802
// exit ;
75800: GO 75894
// tmp := [ ] ;
75802: LD_ADDR_VAR 0 5
75806: PUSH
75807: EMPTY
75808: ST_TO_ADDR
// for i in units do
75809: LD_ADDR_VAR 0 4
75813: PUSH
75814: LD_VAR 0 1
75818: PUSH
75819: FOR_IN
75820: IFFALSE 75863
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75822: LD_ADDR_VAR 0 5
75826: PUSH
75827: LD_VAR 0 5
75831: PPUSH
75832: LD_VAR 0 5
75836: PUSH
75837: LD_INT 1
75839: PLUS
75840: PPUSH
75841: LD_VAR 0 4
75845: PPUSH
75846: LD_VAR 0 2
75850: PPUSH
75851: CALL_OW 259
75855: PPUSH
75856: CALL_OW 2
75860: ST_TO_ADDR
75861: GO 75819
75863: POP
75864: POP
// if not tmp then
75865: LD_VAR 0 5
75869: NOT
75870: IFFALSE 75874
// exit ;
75872: GO 75894
// result := SortListByListDesc ( units , tmp ) ;
75874: LD_ADDR_VAR 0 3
75878: PUSH
75879: LD_VAR 0 1
75883: PPUSH
75884: LD_VAR 0 5
75888: PPUSH
75889: CALL_OW 77
75893: ST_TO_ADDR
// end ;
75894: LD_VAR 0 3
75898: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75899: LD_INT 0
75901: PPUSH
75902: PPUSH
75903: PPUSH
// result := false ;
75904: LD_ADDR_VAR 0 3
75908: PUSH
75909: LD_INT 0
75911: ST_TO_ADDR
// x := GetX ( building ) ;
75912: LD_ADDR_VAR 0 4
75916: PUSH
75917: LD_VAR 0 2
75921: PPUSH
75922: CALL_OW 250
75926: ST_TO_ADDR
// y := GetY ( building ) ;
75927: LD_ADDR_VAR 0 5
75931: PUSH
75932: LD_VAR 0 2
75936: PPUSH
75937: CALL_OW 251
75941: ST_TO_ADDR
// if not building or not x or not y then
75942: LD_VAR 0 2
75946: NOT
75947: PUSH
75948: LD_VAR 0 4
75952: NOT
75953: OR
75954: PUSH
75955: LD_VAR 0 5
75959: NOT
75960: OR
75961: IFFALSE 75965
// exit ;
75963: GO 76057
// if GetTaskList ( unit ) then
75965: LD_VAR 0 1
75969: PPUSH
75970: CALL_OW 437
75974: IFFALSE 76057
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75976: LD_STRING e
75978: PUSH
75979: LD_VAR 0 1
75983: PPUSH
75984: CALL_OW 437
75988: PUSH
75989: LD_INT 1
75991: ARRAY
75992: PUSH
75993: LD_INT 1
75995: ARRAY
75996: EQUAL
75997: PUSH
75998: LD_VAR 0 4
76002: PUSH
76003: LD_VAR 0 1
76007: PPUSH
76008: CALL_OW 437
76012: PUSH
76013: LD_INT 1
76015: ARRAY
76016: PUSH
76017: LD_INT 2
76019: ARRAY
76020: EQUAL
76021: AND
76022: PUSH
76023: LD_VAR 0 5
76027: PUSH
76028: LD_VAR 0 1
76032: PPUSH
76033: CALL_OW 437
76037: PUSH
76038: LD_INT 1
76040: ARRAY
76041: PUSH
76042: LD_INT 3
76044: ARRAY
76045: EQUAL
76046: AND
76047: IFFALSE 76057
// result := true end ;
76049: LD_ADDR_VAR 0 3
76053: PUSH
76054: LD_INT 1
76056: ST_TO_ADDR
// end ;
76057: LD_VAR 0 3
76061: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76062: LD_INT 0
76064: PPUSH
// result := false ;
76065: LD_ADDR_VAR 0 4
76069: PUSH
76070: LD_INT 0
76072: ST_TO_ADDR
// if GetTaskList ( unit ) then
76073: LD_VAR 0 1
76077: PPUSH
76078: CALL_OW 437
76082: IFFALSE 76165
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76084: LD_STRING M
76086: PUSH
76087: LD_VAR 0 1
76091: PPUSH
76092: CALL_OW 437
76096: PUSH
76097: LD_INT 1
76099: ARRAY
76100: PUSH
76101: LD_INT 1
76103: ARRAY
76104: EQUAL
76105: PUSH
76106: LD_VAR 0 2
76110: PUSH
76111: LD_VAR 0 1
76115: PPUSH
76116: CALL_OW 437
76120: PUSH
76121: LD_INT 1
76123: ARRAY
76124: PUSH
76125: LD_INT 2
76127: ARRAY
76128: EQUAL
76129: AND
76130: PUSH
76131: LD_VAR 0 3
76135: PUSH
76136: LD_VAR 0 1
76140: PPUSH
76141: CALL_OW 437
76145: PUSH
76146: LD_INT 1
76148: ARRAY
76149: PUSH
76150: LD_INT 3
76152: ARRAY
76153: EQUAL
76154: AND
76155: IFFALSE 76165
// result := true ;
76157: LD_ADDR_VAR 0 4
76161: PUSH
76162: LD_INT 1
76164: ST_TO_ADDR
// end ; end ;
76165: LD_VAR 0 4
76169: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76170: LD_INT 0
76172: PPUSH
76173: PPUSH
76174: PPUSH
76175: PPUSH
// if not unit or not area then
76176: LD_VAR 0 1
76180: NOT
76181: PUSH
76182: LD_VAR 0 2
76186: NOT
76187: OR
76188: IFFALSE 76192
// exit ;
76190: GO 76356
// tmp := AreaToList ( area , i ) ;
76192: LD_ADDR_VAR 0 6
76196: PUSH
76197: LD_VAR 0 2
76201: PPUSH
76202: LD_VAR 0 5
76206: PPUSH
76207: CALL_OW 517
76211: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76212: LD_ADDR_VAR 0 5
76216: PUSH
76217: DOUBLE
76218: LD_INT 1
76220: DEC
76221: ST_TO_ADDR
76222: LD_VAR 0 6
76226: PUSH
76227: LD_INT 1
76229: ARRAY
76230: PUSH
76231: FOR_TO
76232: IFFALSE 76354
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76234: LD_ADDR_VAR 0 7
76238: PUSH
76239: LD_VAR 0 6
76243: PUSH
76244: LD_INT 1
76246: ARRAY
76247: PUSH
76248: LD_VAR 0 5
76252: ARRAY
76253: PUSH
76254: LD_VAR 0 6
76258: PUSH
76259: LD_INT 2
76261: ARRAY
76262: PUSH
76263: LD_VAR 0 5
76267: ARRAY
76268: PUSH
76269: EMPTY
76270: LIST
76271: LIST
76272: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76273: LD_VAR 0 7
76277: PUSH
76278: LD_INT 1
76280: ARRAY
76281: PPUSH
76282: LD_VAR 0 7
76286: PUSH
76287: LD_INT 2
76289: ARRAY
76290: PPUSH
76291: CALL_OW 428
76295: PUSH
76296: LD_INT 0
76298: EQUAL
76299: IFFALSE 76352
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76301: LD_VAR 0 1
76305: PPUSH
76306: LD_VAR 0 7
76310: PUSH
76311: LD_INT 1
76313: ARRAY
76314: PPUSH
76315: LD_VAR 0 7
76319: PUSH
76320: LD_INT 2
76322: ARRAY
76323: PPUSH
76324: LD_VAR 0 3
76328: PPUSH
76329: CALL_OW 48
// result := IsPlaced ( unit ) ;
76333: LD_ADDR_VAR 0 4
76337: PUSH
76338: LD_VAR 0 1
76342: PPUSH
76343: CALL_OW 305
76347: ST_TO_ADDR
// exit ;
76348: POP
76349: POP
76350: GO 76356
// end ; end ;
76352: GO 76231
76354: POP
76355: POP
// end ;
76356: LD_VAR 0 4
76360: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76361: LD_INT 0
76363: PPUSH
76364: PPUSH
76365: PPUSH
// if not side or side > 8 then
76366: LD_VAR 0 1
76370: NOT
76371: PUSH
76372: LD_VAR 0 1
76376: PUSH
76377: LD_INT 8
76379: GREATER
76380: OR
76381: IFFALSE 76385
// exit ;
76383: GO 76572
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76385: LD_ADDR_VAR 0 4
76389: PUSH
76390: LD_INT 22
76392: PUSH
76393: LD_VAR 0 1
76397: PUSH
76398: EMPTY
76399: LIST
76400: LIST
76401: PUSH
76402: LD_INT 21
76404: PUSH
76405: LD_INT 3
76407: PUSH
76408: EMPTY
76409: LIST
76410: LIST
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: PPUSH
76416: CALL_OW 69
76420: ST_TO_ADDR
// if not tmp then
76421: LD_VAR 0 4
76425: NOT
76426: IFFALSE 76430
// exit ;
76428: GO 76572
// enable_addtolog := true ;
76430: LD_ADDR_OWVAR 81
76434: PUSH
76435: LD_INT 1
76437: ST_TO_ADDR
// AddToLog ( [ ) ;
76438: LD_STRING [
76440: PPUSH
76441: CALL_OW 561
// for i in tmp do
76445: LD_ADDR_VAR 0 3
76449: PUSH
76450: LD_VAR 0 4
76454: PUSH
76455: FOR_IN
76456: IFFALSE 76563
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76458: LD_STRING [
76460: PUSH
76461: LD_VAR 0 3
76465: PPUSH
76466: CALL_OW 266
76470: STR
76471: PUSH
76472: LD_STRING , 
76474: STR
76475: PUSH
76476: LD_VAR 0 3
76480: PPUSH
76481: CALL_OW 250
76485: STR
76486: PUSH
76487: LD_STRING , 
76489: STR
76490: PUSH
76491: LD_VAR 0 3
76495: PPUSH
76496: CALL_OW 251
76500: STR
76501: PUSH
76502: LD_STRING , 
76504: STR
76505: PUSH
76506: LD_VAR 0 3
76510: PPUSH
76511: CALL_OW 254
76515: STR
76516: PUSH
76517: LD_STRING , 
76519: STR
76520: PUSH
76521: LD_VAR 0 3
76525: PPUSH
76526: LD_INT 1
76528: PPUSH
76529: CALL_OW 268
76533: STR
76534: PUSH
76535: LD_STRING , 
76537: STR
76538: PUSH
76539: LD_VAR 0 3
76543: PPUSH
76544: LD_INT 2
76546: PPUSH
76547: CALL_OW 268
76551: STR
76552: PUSH
76553: LD_STRING ],
76555: STR
76556: PPUSH
76557: CALL_OW 561
// end ;
76561: GO 76455
76563: POP
76564: POP
// AddToLog ( ]; ) ;
76565: LD_STRING ];
76567: PPUSH
76568: CALL_OW 561
// end ;
76572: LD_VAR 0 2
76576: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76577: LD_INT 0
76579: PPUSH
76580: PPUSH
76581: PPUSH
76582: PPUSH
76583: PPUSH
// if not area or not rate or not max then
76584: LD_VAR 0 1
76588: NOT
76589: PUSH
76590: LD_VAR 0 2
76594: NOT
76595: OR
76596: PUSH
76597: LD_VAR 0 4
76601: NOT
76602: OR
76603: IFFALSE 76607
// exit ;
76605: GO 76796
// while 1 do
76607: LD_INT 1
76609: IFFALSE 76796
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76611: LD_ADDR_VAR 0 9
76615: PUSH
76616: LD_VAR 0 1
76620: PPUSH
76621: LD_INT 1
76623: PPUSH
76624: CALL_OW 287
76628: PUSH
76629: LD_INT 10
76631: MUL
76632: ST_TO_ADDR
// r := rate / 10 ;
76633: LD_ADDR_VAR 0 7
76637: PUSH
76638: LD_VAR 0 2
76642: PUSH
76643: LD_INT 10
76645: DIVREAL
76646: ST_TO_ADDR
// time := 1 1$00 ;
76647: LD_ADDR_VAR 0 8
76651: PUSH
76652: LD_INT 2100
76654: ST_TO_ADDR
// if amount < min then
76655: LD_VAR 0 9
76659: PUSH
76660: LD_VAR 0 3
76664: LESS
76665: IFFALSE 76683
// r := r * 2 else
76667: LD_ADDR_VAR 0 7
76671: PUSH
76672: LD_VAR 0 7
76676: PUSH
76677: LD_INT 2
76679: MUL
76680: ST_TO_ADDR
76681: GO 76709
// if amount > max then
76683: LD_VAR 0 9
76687: PUSH
76688: LD_VAR 0 4
76692: GREATER
76693: IFFALSE 76709
// r := r / 2 ;
76695: LD_ADDR_VAR 0 7
76699: PUSH
76700: LD_VAR 0 7
76704: PUSH
76705: LD_INT 2
76707: DIVREAL
76708: ST_TO_ADDR
// time := time / r ;
76709: LD_ADDR_VAR 0 8
76713: PUSH
76714: LD_VAR 0 8
76718: PUSH
76719: LD_VAR 0 7
76723: DIVREAL
76724: ST_TO_ADDR
// if time < 0 then
76725: LD_VAR 0 8
76729: PUSH
76730: LD_INT 0
76732: LESS
76733: IFFALSE 76750
// time := time * - 1 ;
76735: LD_ADDR_VAR 0 8
76739: PUSH
76740: LD_VAR 0 8
76744: PUSH
76745: LD_INT 1
76747: NEG
76748: MUL
76749: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76750: LD_VAR 0 8
76754: PUSH
76755: LD_INT 35
76757: PPUSH
76758: LD_INT 875
76760: PPUSH
76761: CALL_OW 12
76765: PLUS
76766: PPUSH
76767: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76771: LD_INT 1
76773: PPUSH
76774: LD_INT 5
76776: PPUSH
76777: CALL_OW 12
76781: PPUSH
76782: LD_VAR 0 1
76786: PPUSH
76787: LD_INT 1
76789: PPUSH
76790: CALL_OW 55
// end ;
76794: GO 76607
// end ;
76796: LD_VAR 0 5
76800: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76801: LD_INT 0
76803: PPUSH
76804: PPUSH
76805: PPUSH
76806: PPUSH
76807: PPUSH
76808: PPUSH
76809: PPUSH
76810: PPUSH
// if not turrets or not factories then
76811: LD_VAR 0 1
76815: NOT
76816: PUSH
76817: LD_VAR 0 2
76821: NOT
76822: OR
76823: IFFALSE 76827
// exit ;
76825: GO 77134
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76827: LD_ADDR_VAR 0 10
76831: PUSH
76832: LD_INT 5
76834: PUSH
76835: LD_INT 6
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: PUSH
76842: LD_INT 2
76844: PUSH
76845: LD_INT 4
76847: PUSH
76848: EMPTY
76849: LIST
76850: LIST
76851: PUSH
76852: LD_INT 3
76854: PUSH
76855: LD_INT 5
76857: PUSH
76858: EMPTY
76859: LIST
76860: LIST
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: LIST
76866: PUSH
76867: LD_INT 24
76869: PUSH
76870: LD_INT 25
76872: PUSH
76873: EMPTY
76874: LIST
76875: LIST
76876: PUSH
76877: LD_INT 23
76879: PUSH
76880: LD_INT 27
76882: PUSH
76883: EMPTY
76884: LIST
76885: LIST
76886: PUSH
76887: EMPTY
76888: LIST
76889: LIST
76890: PUSH
76891: LD_INT 42
76893: PUSH
76894: LD_INT 43
76896: PUSH
76897: EMPTY
76898: LIST
76899: LIST
76900: PUSH
76901: LD_INT 44
76903: PUSH
76904: LD_INT 46
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: PUSH
76911: LD_INT 45
76913: PUSH
76914: LD_INT 47
76916: PUSH
76917: EMPTY
76918: LIST
76919: LIST
76920: PUSH
76921: EMPTY
76922: LIST
76923: LIST
76924: LIST
76925: PUSH
76926: EMPTY
76927: LIST
76928: LIST
76929: LIST
76930: ST_TO_ADDR
// result := [ ] ;
76931: LD_ADDR_VAR 0 3
76935: PUSH
76936: EMPTY
76937: ST_TO_ADDR
// for i in turrets do
76938: LD_ADDR_VAR 0 4
76942: PUSH
76943: LD_VAR 0 1
76947: PUSH
76948: FOR_IN
76949: IFFALSE 77132
// begin nat := GetNation ( i ) ;
76951: LD_ADDR_VAR 0 7
76955: PUSH
76956: LD_VAR 0 4
76960: PPUSH
76961: CALL_OW 248
76965: ST_TO_ADDR
// weapon := 0 ;
76966: LD_ADDR_VAR 0 8
76970: PUSH
76971: LD_INT 0
76973: ST_TO_ADDR
// if not nat then
76974: LD_VAR 0 7
76978: NOT
76979: IFFALSE 76983
// continue ;
76981: GO 76948
// for j in list [ nat ] do
76983: LD_ADDR_VAR 0 5
76987: PUSH
76988: LD_VAR 0 10
76992: PUSH
76993: LD_VAR 0 7
76997: ARRAY
76998: PUSH
76999: FOR_IN
77000: IFFALSE 77041
// if GetBWeapon ( i ) = j [ 1 ] then
77002: LD_VAR 0 4
77006: PPUSH
77007: CALL_OW 269
77011: PUSH
77012: LD_VAR 0 5
77016: PUSH
77017: LD_INT 1
77019: ARRAY
77020: EQUAL
77021: IFFALSE 77039
// begin weapon := j [ 2 ] ;
77023: LD_ADDR_VAR 0 8
77027: PUSH
77028: LD_VAR 0 5
77032: PUSH
77033: LD_INT 2
77035: ARRAY
77036: ST_TO_ADDR
// break ;
77037: GO 77041
// end ;
77039: GO 76999
77041: POP
77042: POP
// if not weapon then
77043: LD_VAR 0 8
77047: NOT
77048: IFFALSE 77052
// continue ;
77050: GO 76948
// for k in factories do
77052: LD_ADDR_VAR 0 6
77056: PUSH
77057: LD_VAR 0 2
77061: PUSH
77062: FOR_IN
77063: IFFALSE 77128
// begin weapons := AvailableWeaponList ( k ) ;
77065: LD_ADDR_VAR 0 9
77069: PUSH
77070: LD_VAR 0 6
77074: PPUSH
77075: CALL_OW 478
77079: ST_TO_ADDR
// if not weapons then
77080: LD_VAR 0 9
77084: NOT
77085: IFFALSE 77089
// continue ;
77087: GO 77062
// if weapon in weapons then
77089: LD_VAR 0 8
77093: PUSH
77094: LD_VAR 0 9
77098: IN
77099: IFFALSE 77126
// begin result := [ i , weapon ] ;
77101: LD_ADDR_VAR 0 3
77105: PUSH
77106: LD_VAR 0 4
77110: PUSH
77111: LD_VAR 0 8
77115: PUSH
77116: EMPTY
77117: LIST
77118: LIST
77119: ST_TO_ADDR
// exit ;
77120: POP
77121: POP
77122: POP
77123: POP
77124: GO 77134
// end ; end ;
77126: GO 77062
77128: POP
77129: POP
// end ;
77130: GO 76948
77132: POP
77133: POP
// end ;
77134: LD_VAR 0 3
77138: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77139: LD_INT 0
77141: PPUSH
// if not side or side > 8 then
77142: LD_VAR 0 3
77146: NOT
77147: PUSH
77148: LD_VAR 0 3
77152: PUSH
77153: LD_INT 8
77155: GREATER
77156: OR
77157: IFFALSE 77161
// exit ;
77159: GO 77220
// if not range then
77161: LD_VAR 0 4
77165: NOT
77166: IFFALSE 77177
// range := - 12 ;
77168: LD_ADDR_VAR 0 4
77172: PUSH
77173: LD_INT 12
77175: NEG
77176: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77177: LD_VAR 0 1
77181: PPUSH
77182: LD_VAR 0 2
77186: PPUSH
77187: LD_VAR 0 3
77191: PPUSH
77192: LD_VAR 0 4
77196: PPUSH
77197: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77201: LD_VAR 0 1
77205: PPUSH
77206: LD_VAR 0 2
77210: PPUSH
77211: LD_VAR 0 3
77215: PPUSH
77216: CALL_OW 331
// end ;
77220: LD_VAR 0 5
77224: RET
// export function Video ( mode ) ; begin
77225: LD_INT 0
77227: PPUSH
// ingame_video = mode ;
77228: LD_ADDR_OWVAR 52
77232: PUSH
77233: LD_VAR 0 1
77237: ST_TO_ADDR
// interface_hidden = mode ;
77238: LD_ADDR_OWVAR 54
77242: PUSH
77243: LD_VAR 0 1
77247: ST_TO_ADDR
// end ;
77248: LD_VAR 0 2
77252: RET
// export function Join ( array , element ) ; begin
77253: LD_INT 0
77255: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77256: LD_ADDR_VAR 0 3
77260: PUSH
77261: LD_VAR 0 1
77265: PPUSH
77266: LD_VAR 0 1
77270: PUSH
77271: LD_INT 1
77273: PLUS
77274: PPUSH
77275: LD_VAR 0 2
77279: PPUSH
77280: CALL_OW 1
77284: ST_TO_ADDR
// end ;
77285: LD_VAR 0 3
77289: RET
// export function JoinUnion ( array , element ) ; begin
77290: LD_INT 0
77292: PPUSH
// result := array union element ;
77293: LD_ADDR_VAR 0 3
77297: PUSH
77298: LD_VAR 0 1
77302: PUSH
77303: LD_VAR 0 2
77307: UNION
77308: ST_TO_ADDR
// end ;
77309: LD_VAR 0 3
77313: RET
// export function GetBehemoths ( side ) ; begin
77314: LD_INT 0
77316: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77317: LD_ADDR_VAR 0 2
77321: PUSH
77322: LD_INT 22
77324: PUSH
77325: LD_VAR 0 1
77329: PUSH
77330: EMPTY
77331: LIST
77332: LIST
77333: PUSH
77334: LD_INT 31
77336: PUSH
77337: LD_INT 25
77339: PUSH
77340: EMPTY
77341: LIST
77342: LIST
77343: PUSH
77344: EMPTY
77345: LIST
77346: LIST
77347: PPUSH
77348: CALL_OW 69
77352: ST_TO_ADDR
// end ;
77353: LD_VAR 0 2
77357: RET
// export function Shuffle ( array ) ; var i , index ; begin
77358: LD_INT 0
77360: PPUSH
77361: PPUSH
77362: PPUSH
// result := [ ] ;
77363: LD_ADDR_VAR 0 2
77367: PUSH
77368: EMPTY
77369: ST_TO_ADDR
// if not array then
77370: LD_VAR 0 1
77374: NOT
77375: IFFALSE 77379
// exit ;
77377: GO 77478
// Randomize ;
77379: CALL_OW 10
// for i = array downto 1 do
77383: LD_ADDR_VAR 0 3
77387: PUSH
77388: DOUBLE
77389: LD_VAR 0 1
77393: INC
77394: ST_TO_ADDR
77395: LD_INT 1
77397: PUSH
77398: FOR_DOWNTO
77399: IFFALSE 77476
// begin index := rand ( 1 , array ) ;
77401: LD_ADDR_VAR 0 4
77405: PUSH
77406: LD_INT 1
77408: PPUSH
77409: LD_VAR 0 1
77413: PPUSH
77414: CALL_OW 12
77418: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77419: LD_ADDR_VAR 0 2
77423: PUSH
77424: LD_VAR 0 2
77428: PPUSH
77429: LD_VAR 0 2
77433: PUSH
77434: LD_INT 1
77436: PLUS
77437: PPUSH
77438: LD_VAR 0 1
77442: PUSH
77443: LD_VAR 0 4
77447: ARRAY
77448: PPUSH
77449: CALL_OW 2
77453: ST_TO_ADDR
// array := Delete ( array , index ) ;
77454: LD_ADDR_VAR 0 1
77458: PUSH
77459: LD_VAR 0 1
77463: PPUSH
77464: LD_VAR 0 4
77468: PPUSH
77469: CALL_OW 3
77473: ST_TO_ADDR
// end ;
77474: GO 77398
77476: POP
77477: POP
// end ;
77478: LD_VAR 0 2
77482: RET
// export function GetBaseMaterials ( base ) ; begin
77483: LD_INT 0
77485: PPUSH
// result := [ 0 , 0 , 0 ] ;
77486: LD_ADDR_VAR 0 2
77490: PUSH
77491: LD_INT 0
77493: PUSH
77494: LD_INT 0
77496: PUSH
77497: LD_INT 0
77499: PUSH
77500: EMPTY
77501: LIST
77502: LIST
77503: LIST
77504: ST_TO_ADDR
// if not base then
77505: LD_VAR 0 1
77509: NOT
77510: IFFALSE 77514
// exit ;
77512: GO 77563
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77514: LD_ADDR_VAR 0 2
77518: PUSH
77519: LD_VAR 0 1
77523: PPUSH
77524: LD_INT 1
77526: PPUSH
77527: CALL_OW 275
77531: PUSH
77532: LD_VAR 0 1
77536: PPUSH
77537: LD_INT 2
77539: PPUSH
77540: CALL_OW 275
77544: PUSH
77545: LD_VAR 0 1
77549: PPUSH
77550: LD_INT 3
77552: PPUSH
77553: CALL_OW 275
77557: PUSH
77558: EMPTY
77559: LIST
77560: LIST
77561: LIST
77562: ST_TO_ADDR
// end ;
77563: LD_VAR 0 2
77567: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77568: LD_INT 0
77570: PPUSH
77571: PPUSH
// result := array ;
77572: LD_ADDR_VAR 0 3
77576: PUSH
77577: LD_VAR 0 1
77581: ST_TO_ADDR
// if size >= result then
77582: LD_VAR 0 2
77586: PUSH
77587: LD_VAR 0 3
77591: GREATEREQUAL
77592: IFFALSE 77596
// exit ;
77594: GO 77646
// if size then
77596: LD_VAR 0 2
77600: IFFALSE 77646
// for i := array downto size do
77602: LD_ADDR_VAR 0 4
77606: PUSH
77607: DOUBLE
77608: LD_VAR 0 1
77612: INC
77613: ST_TO_ADDR
77614: LD_VAR 0 2
77618: PUSH
77619: FOR_DOWNTO
77620: IFFALSE 77644
// result := Delete ( result , result ) ;
77622: LD_ADDR_VAR 0 3
77626: PUSH
77627: LD_VAR 0 3
77631: PPUSH
77632: LD_VAR 0 3
77636: PPUSH
77637: CALL_OW 3
77641: ST_TO_ADDR
77642: GO 77619
77644: POP
77645: POP
// end ;
77646: LD_VAR 0 3
77650: RET
// export function ComExit ( unit ) ; var tmp ; begin
77651: LD_INT 0
77653: PPUSH
77654: PPUSH
// if not IsInUnit ( unit ) then
77655: LD_VAR 0 1
77659: PPUSH
77660: CALL_OW 310
77664: NOT
77665: IFFALSE 77669
// exit ;
77667: GO 77729
// tmp := IsInUnit ( unit ) ;
77669: LD_ADDR_VAR 0 3
77673: PUSH
77674: LD_VAR 0 1
77678: PPUSH
77679: CALL_OW 310
77683: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77684: LD_VAR 0 3
77688: PPUSH
77689: CALL_OW 247
77693: PUSH
77694: LD_INT 2
77696: EQUAL
77697: IFFALSE 77710
// ComExitVehicle ( unit ) else
77699: LD_VAR 0 1
77703: PPUSH
77704: CALL_OW 121
77708: GO 77719
// ComExitBuilding ( unit ) ;
77710: LD_VAR 0 1
77714: PPUSH
77715: CALL_OW 122
// result := tmp ;
77719: LD_ADDR_VAR 0 2
77723: PUSH
77724: LD_VAR 0 3
77728: ST_TO_ADDR
// end ;
77729: LD_VAR 0 2
77733: RET
// export function ComExitAll ( units ) ; var i ; begin
77734: LD_INT 0
77736: PPUSH
77737: PPUSH
// if not units then
77738: LD_VAR 0 1
77742: NOT
77743: IFFALSE 77747
// exit ;
77745: GO 77773
// for i in units do
77747: LD_ADDR_VAR 0 3
77751: PUSH
77752: LD_VAR 0 1
77756: PUSH
77757: FOR_IN
77758: IFFALSE 77771
// ComExit ( i ) ;
77760: LD_VAR 0 3
77764: PPUSH
77765: CALL 77651 0 1
77769: GO 77757
77771: POP
77772: POP
// end ;
77773: LD_VAR 0 2
77777: RET
// export function ResetHc ; begin
77778: LD_INT 0
77780: PPUSH
// InitHc ;
77781: CALL_OW 19
// hc_importance := 0 ;
77785: LD_ADDR_OWVAR 32
77789: PUSH
77790: LD_INT 0
77792: ST_TO_ADDR
// end ;
77793: LD_VAR 0 1
77797: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77798: LD_INT 0
77800: PPUSH
77801: PPUSH
77802: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77803: LD_ADDR_VAR 0 6
77807: PUSH
77808: LD_VAR 0 1
77812: PUSH
77813: LD_VAR 0 3
77817: PLUS
77818: PUSH
77819: LD_INT 2
77821: DIV
77822: ST_TO_ADDR
// if _x < 0 then
77823: LD_VAR 0 6
77827: PUSH
77828: LD_INT 0
77830: LESS
77831: IFFALSE 77848
// _x := _x * - 1 ;
77833: LD_ADDR_VAR 0 6
77837: PUSH
77838: LD_VAR 0 6
77842: PUSH
77843: LD_INT 1
77845: NEG
77846: MUL
77847: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77848: LD_ADDR_VAR 0 7
77852: PUSH
77853: LD_VAR 0 2
77857: PUSH
77858: LD_VAR 0 4
77862: PLUS
77863: PUSH
77864: LD_INT 2
77866: DIV
77867: ST_TO_ADDR
// if _y < 0 then
77868: LD_VAR 0 7
77872: PUSH
77873: LD_INT 0
77875: LESS
77876: IFFALSE 77893
// _y := _y * - 1 ;
77878: LD_ADDR_VAR 0 7
77882: PUSH
77883: LD_VAR 0 7
77887: PUSH
77888: LD_INT 1
77890: NEG
77891: MUL
77892: ST_TO_ADDR
// result := [ _x , _y ] ;
77893: LD_ADDR_VAR 0 5
77897: PUSH
77898: LD_VAR 0 6
77902: PUSH
77903: LD_VAR 0 7
77907: PUSH
77908: EMPTY
77909: LIST
77910: LIST
77911: ST_TO_ADDR
// end ;
77912: LD_VAR 0 5
77916: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77917: LD_INT 0
77919: PPUSH
77920: PPUSH
77921: PPUSH
77922: PPUSH
// task := GetTaskList ( unit ) ;
77923: LD_ADDR_VAR 0 7
77927: PUSH
77928: LD_VAR 0 1
77932: PPUSH
77933: CALL_OW 437
77937: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77938: LD_VAR 0 7
77942: NOT
77943: PUSH
77944: LD_VAR 0 1
77948: PPUSH
77949: LD_VAR 0 2
77953: PPUSH
77954: CALL_OW 308
77958: NOT
77959: AND
77960: IFFALSE 77964
// exit ;
77962: GO 78082
// if IsInArea ( unit , area ) then
77964: LD_VAR 0 1
77968: PPUSH
77969: LD_VAR 0 2
77973: PPUSH
77974: CALL_OW 308
77978: IFFALSE 77996
// begin ComMoveToArea ( unit , goAway ) ;
77980: LD_VAR 0 1
77984: PPUSH
77985: LD_VAR 0 3
77989: PPUSH
77990: CALL_OW 113
// exit ;
77994: GO 78082
// end ; if task [ 1 ] [ 1 ] <> M then
77996: LD_VAR 0 7
78000: PUSH
78001: LD_INT 1
78003: ARRAY
78004: PUSH
78005: LD_INT 1
78007: ARRAY
78008: PUSH
78009: LD_STRING M
78011: NONEQUAL
78012: IFFALSE 78016
// exit ;
78014: GO 78082
// x := task [ 1 ] [ 2 ] ;
78016: LD_ADDR_VAR 0 5
78020: PUSH
78021: LD_VAR 0 7
78025: PUSH
78026: LD_INT 1
78028: ARRAY
78029: PUSH
78030: LD_INT 2
78032: ARRAY
78033: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78034: LD_ADDR_VAR 0 6
78038: PUSH
78039: LD_VAR 0 7
78043: PUSH
78044: LD_INT 1
78046: ARRAY
78047: PUSH
78048: LD_INT 3
78050: ARRAY
78051: ST_TO_ADDR
// if InArea ( x , y , area ) then
78052: LD_VAR 0 5
78056: PPUSH
78057: LD_VAR 0 6
78061: PPUSH
78062: LD_VAR 0 2
78066: PPUSH
78067: CALL_OW 309
78071: IFFALSE 78082
// ComStop ( unit ) ;
78073: LD_VAR 0 1
78077: PPUSH
78078: CALL_OW 141
// end ;
78082: LD_VAR 0 4
78086: RET
// export function Abs ( value ) ; begin
78087: LD_INT 0
78089: PPUSH
// result := value ;
78090: LD_ADDR_VAR 0 2
78094: PUSH
78095: LD_VAR 0 1
78099: ST_TO_ADDR
// if value < 0 then
78100: LD_VAR 0 1
78104: PUSH
78105: LD_INT 0
78107: LESS
78108: IFFALSE 78125
// result := value * - 1 ;
78110: LD_ADDR_VAR 0 2
78114: PUSH
78115: LD_VAR 0 1
78119: PUSH
78120: LD_INT 1
78122: NEG
78123: MUL
78124: ST_TO_ADDR
// end ;
78125: LD_VAR 0 2
78129: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78130: LD_INT 0
78132: PPUSH
78133: PPUSH
78134: PPUSH
78135: PPUSH
78136: PPUSH
78137: PPUSH
78138: PPUSH
78139: PPUSH
// if not unit or not building then
78140: LD_VAR 0 1
78144: NOT
78145: PUSH
78146: LD_VAR 0 2
78150: NOT
78151: OR
78152: IFFALSE 78156
// exit ;
78154: GO 78382
// x := GetX ( building ) ;
78156: LD_ADDR_VAR 0 4
78160: PUSH
78161: LD_VAR 0 2
78165: PPUSH
78166: CALL_OW 250
78170: ST_TO_ADDR
// y := GetY ( building ) ;
78171: LD_ADDR_VAR 0 6
78175: PUSH
78176: LD_VAR 0 2
78180: PPUSH
78181: CALL_OW 251
78185: ST_TO_ADDR
// d := GetDir ( building ) ;
78186: LD_ADDR_VAR 0 8
78190: PUSH
78191: LD_VAR 0 2
78195: PPUSH
78196: CALL_OW 254
78200: ST_TO_ADDR
// r := 4 ;
78201: LD_ADDR_VAR 0 9
78205: PUSH
78206: LD_INT 4
78208: ST_TO_ADDR
// for i := 1 to 5 do
78209: LD_ADDR_VAR 0 10
78213: PUSH
78214: DOUBLE
78215: LD_INT 1
78217: DEC
78218: ST_TO_ADDR
78219: LD_INT 5
78221: PUSH
78222: FOR_TO
78223: IFFALSE 78380
// begin _x := ShiftX ( x , d , r + i ) ;
78225: LD_ADDR_VAR 0 5
78229: PUSH
78230: LD_VAR 0 4
78234: PPUSH
78235: LD_VAR 0 8
78239: PPUSH
78240: LD_VAR 0 9
78244: PUSH
78245: LD_VAR 0 10
78249: PLUS
78250: PPUSH
78251: CALL_OW 272
78255: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78256: LD_ADDR_VAR 0 7
78260: PUSH
78261: LD_VAR 0 6
78265: PPUSH
78266: LD_VAR 0 8
78270: PPUSH
78271: LD_VAR 0 9
78275: PUSH
78276: LD_VAR 0 10
78280: PLUS
78281: PPUSH
78282: CALL_OW 273
78286: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78287: LD_VAR 0 5
78291: PPUSH
78292: LD_VAR 0 7
78296: PPUSH
78297: CALL_OW 488
78301: PUSH
78302: LD_VAR 0 5
78306: PPUSH
78307: LD_VAR 0 7
78311: PPUSH
78312: CALL_OW 428
78316: PPUSH
78317: CALL_OW 247
78321: PUSH
78322: LD_INT 3
78324: PUSH
78325: LD_INT 2
78327: PUSH
78328: EMPTY
78329: LIST
78330: LIST
78331: IN
78332: NOT
78333: AND
78334: IFFALSE 78378
// begin ComMoveXY ( unit , _x , _y ) ;
78336: LD_VAR 0 1
78340: PPUSH
78341: LD_VAR 0 5
78345: PPUSH
78346: LD_VAR 0 7
78350: PPUSH
78351: CALL_OW 111
// result := [ _x , _y ] ;
78355: LD_ADDR_VAR 0 3
78359: PUSH
78360: LD_VAR 0 5
78364: PUSH
78365: LD_VAR 0 7
78369: PUSH
78370: EMPTY
78371: LIST
78372: LIST
78373: ST_TO_ADDR
// exit ;
78374: POP
78375: POP
78376: GO 78382
// end ; end ;
78378: GO 78222
78380: POP
78381: POP
// end ;
78382: LD_VAR 0 3
78386: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78387: LD_INT 0
78389: PPUSH
78390: PPUSH
78391: PPUSH
// result := 0 ;
78392: LD_ADDR_VAR 0 3
78396: PUSH
78397: LD_INT 0
78399: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78400: LD_VAR 0 1
78404: PUSH
78405: LD_INT 0
78407: LESS
78408: PUSH
78409: LD_VAR 0 1
78413: PUSH
78414: LD_INT 8
78416: GREATER
78417: OR
78418: PUSH
78419: LD_VAR 0 2
78423: PUSH
78424: LD_INT 0
78426: LESS
78427: OR
78428: PUSH
78429: LD_VAR 0 2
78433: PUSH
78434: LD_INT 8
78436: GREATER
78437: OR
78438: IFFALSE 78442
// exit ;
78440: GO 78517
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78442: LD_ADDR_VAR 0 4
78446: PUSH
78447: LD_INT 22
78449: PUSH
78450: LD_VAR 0 2
78454: PUSH
78455: EMPTY
78456: LIST
78457: LIST
78458: PPUSH
78459: CALL_OW 69
78463: PUSH
78464: FOR_IN
78465: IFFALSE 78515
// begin un := UnitShoot ( i ) ;
78467: LD_ADDR_VAR 0 5
78471: PUSH
78472: LD_VAR 0 4
78476: PPUSH
78477: CALL_OW 504
78481: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78482: LD_VAR 0 5
78486: PPUSH
78487: CALL_OW 255
78491: PUSH
78492: LD_VAR 0 1
78496: EQUAL
78497: IFFALSE 78513
// begin result := un ;
78499: LD_ADDR_VAR 0 3
78503: PUSH
78504: LD_VAR 0 5
78508: ST_TO_ADDR
// exit ;
78509: POP
78510: POP
78511: GO 78517
// end ; end ;
78513: GO 78464
78515: POP
78516: POP
// end ;
78517: LD_VAR 0 3
78521: RET
// export function GetCargoBay ( units ) ; begin
78522: LD_INT 0
78524: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78525: LD_ADDR_VAR 0 2
78529: PUSH
78530: LD_VAR 0 1
78534: PPUSH
78535: LD_INT 2
78537: PUSH
78538: LD_INT 34
78540: PUSH
78541: LD_INT 12
78543: PUSH
78544: EMPTY
78545: LIST
78546: LIST
78547: PUSH
78548: LD_INT 34
78550: PUSH
78551: LD_INT 51
78553: PUSH
78554: EMPTY
78555: LIST
78556: LIST
78557: PUSH
78558: LD_INT 34
78560: PUSH
78561: LD_INT 32
78563: PUSH
78564: EMPTY
78565: LIST
78566: LIST
78567: PUSH
78568: LD_INT 34
78570: PUSH
78571: LD_EXP 51
78575: PUSH
78576: EMPTY
78577: LIST
78578: LIST
78579: PUSH
78580: EMPTY
78581: LIST
78582: LIST
78583: LIST
78584: LIST
78585: LIST
78586: PPUSH
78587: CALL_OW 72
78591: ST_TO_ADDR
// end ;
78592: LD_VAR 0 2
78596: RET
// export function Negate ( value ) ; begin
78597: LD_INT 0
78599: PPUSH
// result := not value ;
78600: LD_ADDR_VAR 0 2
78604: PUSH
78605: LD_VAR 0 1
78609: NOT
78610: ST_TO_ADDR
// end ;
78611: LD_VAR 0 2
78615: RET
// export function Inc ( value ) ; begin
78616: LD_INT 0
78618: PPUSH
// result := value + 1 ;
78619: LD_ADDR_VAR 0 2
78623: PUSH
78624: LD_VAR 0 1
78628: PUSH
78629: LD_INT 1
78631: PLUS
78632: ST_TO_ADDR
// end ;
78633: LD_VAR 0 2
78637: RET
// export function Dec ( value ) ; begin
78638: LD_INT 0
78640: PPUSH
// result := value - 1 ;
78641: LD_ADDR_VAR 0 2
78645: PUSH
78646: LD_VAR 0 1
78650: PUSH
78651: LD_INT 1
78653: MINUS
78654: ST_TO_ADDR
// end ;
78655: LD_VAR 0 2
78659: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78660: LD_INT 0
78662: PPUSH
78663: PPUSH
78664: PPUSH
78665: PPUSH
78666: PPUSH
78667: PPUSH
78668: PPUSH
78669: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78670: LD_VAR 0 1
78674: PPUSH
78675: LD_VAR 0 2
78679: PPUSH
78680: CALL_OW 488
78684: NOT
78685: PUSH
78686: LD_VAR 0 3
78690: PPUSH
78691: LD_VAR 0 4
78695: PPUSH
78696: CALL_OW 488
78700: NOT
78701: OR
78702: IFFALSE 78715
// begin result := - 1 ;
78704: LD_ADDR_VAR 0 5
78708: PUSH
78709: LD_INT 1
78711: NEG
78712: ST_TO_ADDR
// exit ;
78713: GO 78950
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78715: LD_ADDR_VAR 0 12
78719: PUSH
78720: LD_VAR 0 1
78724: PPUSH
78725: LD_VAR 0 2
78729: PPUSH
78730: LD_VAR 0 3
78734: PPUSH
78735: LD_VAR 0 4
78739: PPUSH
78740: CALL 77798 0 4
78744: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78745: LD_ADDR_VAR 0 11
78749: PUSH
78750: LD_VAR 0 1
78754: PPUSH
78755: LD_VAR 0 2
78759: PPUSH
78760: LD_VAR 0 12
78764: PUSH
78765: LD_INT 1
78767: ARRAY
78768: PPUSH
78769: LD_VAR 0 12
78773: PUSH
78774: LD_INT 2
78776: ARRAY
78777: PPUSH
78778: CALL_OW 298
78782: ST_TO_ADDR
// distance := 9999 ;
78783: LD_ADDR_VAR 0 10
78787: PUSH
78788: LD_INT 9999
78790: ST_TO_ADDR
// for i := 0 to 5 do
78791: LD_ADDR_VAR 0 6
78795: PUSH
78796: DOUBLE
78797: LD_INT 0
78799: DEC
78800: ST_TO_ADDR
78801: LD_INT 5
78803: PUSH
78804: FOR_TO
78805: IFFALSE 78948
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78807: LD_ADDR_VAR 0 7
78811: PUSH
78812: LD_VAR 0 1
78816: PPUSH
78817: LD_VAR 0 6
78821: PPUSH
78822: LD_VAR 0 11
78826: PPUSH
78827: CALL_OW 272
78831: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78832: LD_ADDR_VAR 0 8
78836: PUSH
78837: LD_VAR 0 2
78841: PPUSH
78842: LD_VAR 0 6
78846: PPUSH
78847: LD_VAR 0 11
78851: PPUSH
78852: CALL_OW 273
78856: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78857: LD_VAR 0 7
78861: PPUSH
78862: LD_VAR 0 8
78866: PPUSH
78867: CALL_OW 488
78871: NOT
78872: IFFALSE 78876
// continue ;
78874: GO 78804
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78876: LD_ADDR_VAR 0 9
78880: PUSH
78881: LD_VAR 0 12
78885: PUSH
78886: LD_INT 1
78888: ARRAY
78889: PPUSH
78890: LD_VAR 0 12
78894: PUSH
78895: LD_INT 2
78897: ARRAY
78898: PPUSH
78899: LD_VAR 0 7
78903: PPUSH
78904: LD_VAR 0 8
78908: PPUSH
78909: CALL_OW 298
78913: ST_TO_ADDR
// if tmp < distance then
78914: LD_VAR 0 9
78918: PUSH
78919: LD_VAR 0 10
78923: LESS
78924: IFFALSE 78946
// begin result := i ;
78926: LD_ADDR_VAR 0 5
78930: PUSH
78931: LD_VAR 0 6
78935: ST_TO_ADDR
// distance := tmp ;
78936: LD_ADDR_VAR 0 10
78940: PUSH
78941: LD_VAR 0 9
78945: ST_TO_ADDR
// end ; end ;
78946: GO 78804
78948: POP
78949: POP
// end ;
78950: LD_VAR 0 5
78954: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78955: LD_INT 0
78957: PPUSH
78958: PPUSH
// if not driver or not IsInUnit ( driver ) then
78959: LD_VAR 0 1
78963: NOT
78964: PUSH
78965: LD_VAR 0 1
78969: PPUSH
78970: CALL_OW 310
78974: NOT
78975: OR
78976: IFFALSE 78980
// exit ;
78978: GO 79070
// vehicle := IsInUnit ( driver ) ;
78980: LD_ADDR_VAR 0 3
78984: PUSH
78985: LD_VAR 0 1
78989: PPUSH
78990: CALL_OW 310
78994: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78995: LD_VAR 0 1
78999: PPUSH
79000: LD_STRING \
79002: PUSH
79003: LD_INT 0
79005: PUSH
79006: LD_INT 0
79008: PUSH
79009: LD_INT 0
79011: PUSH
79012: LD_INT 0
79014: PUSH
79015: LD_INT 0
79017: PUSH
79018: LD_INT 0
79020: PUSH
79021: EMPTY
79022: LIST
79023: LIST
79024: LIST
79025: LIST
79026: LIST
79027: LIST
79028: LIST
79029: PUSH
79030: LD_STRING E
79032: PUSH
79033: LD_INT 0
79035: PUSH
79036: LD_INT 0
79038: PUSH
79039: LD_VAR 0 3
79043: PUSH
79044: LD_INT 0
79046: PUSH
79047: LD_INT 0
79049: PUSH
79050: LD_INT 0
79052: PUSH
79053: EMPTY
79054: LIST
79055: LIST
79056: LIST
79057: LIST
79058: LIST
79059: LIST
79060: LIST
79061: PUSH
79062: EMPTY
79063: LIST
79064: LIST
79065: PPUSH
79066: CALL_OW 446
// end ;
79070: LD_VAR 0 2
79074: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79075: LD_INT 0
79077: PPUSH
79078: PPUSH
// if not driver or not IsInUnit ( driver ) then
79079: LD_VAR 0 1
79083: NOT
79084: PUSH
79085: LD_VAR 0 1
79089: PPUSH
79090: CALL_OW 310
79094: NOT
79095: OR
79096: IFFALSE 79100
// exit ;
79098: GO 79190
// vehicle := IsInUnit ( driver ) ;
79100: LD_ADDR_VAR 0 3
79104: PUSH
79105: LD_VAR 0 1
79109: PPUSH
79110: CALL_OW 310
79114: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79115: LD_VAR 0 1
79119: PPUSH
79120: LD_STRING \
79122: PUSH
79123: LD_INT 0
79125: PUSH
79126: LD_INT 0
79128: PUSH
79129: LD_INT 0
79131: PUSH
79132: LD_INT 0
79134: PUSH
79135: LD_INT 0
79137: PUSH
79138: LD_INT 0
79140: PUSH
79141: EMPTY
79142: LIST
79143: LIST
79144: LIST
79145: LIST
79146: LIST
79147: LIST
79148: LIST
79149: PUSH
79150: LD_STRING E
79152: PUSH
79153: LD_INT 0
79155: PUSH
79156: LD_INT 0
79158: PUSH
79159: LD_VAR 0 3
79163: PUSH
79164: LD_INT 0
79166: PUSH
79167: LD_INT 0
79169: PUSH
79170: LD_INT 0
79172: PUSH
79173: EMPTY
79174: LIST
79175: LIST
79176: LIST
79177: LIST
79178: LIST
79179: LIST
79180: LIST
79181: PUSH
79182: EMPTY
79183: LIST
79184: LIST
79185: PPUSH
79186: CALL_OW 447
// end ;
79190: LD_VAR 0 2
79194: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79195: LD_INT 0
79197: PPUSH
79198: PPUSH
79199: PPUSH
// tmp := [ ] ;
79200: LD_ADDR_VAR 0 5
79204: PUSH
79205: EMPTY
79206: ST_TO_ADDR
// for i in units do
79207: LD_ADDR_VAR 0 4
79211: PUSH
79212: LD_VAR 0 1
79216: PUSH
79217: FOR_IN
79218: IFFALSE 79256
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79220: LD_ADDR_VAR 0 5
79224: PUSH
79225: LD_VAR 0 5
79229: PPUSH
79230: LD_VAR 0 5
79234: PUSH
79235: LD_INT 1
79237: PLUS
79238: PPUSH
79239: LD_VAR 0 4
79243: PPUSH
79244: CALL_OW 256
79248: PPUSH
79249: CALL_OW 2
79253: ST_TO_ADDR
79254: GO 79217
79256: POP
79257: POP
// if not tmp then
79258: LD_VAR 0 5
79262: NOT
79263: IFFALSE 79267
// exit ;
79265: GO 79315
// if asc then
79267: LD_VAR 0 2
79271: IFFALSE 79295
// result := SortListByListAsc ( units , tmp ) else
79273: LD_ADDR_VAR 0 3
79277: PUSH
79278: LD_VAR 0 1
79282: PPUSH
79283: LD_VAR 0 5
79287: PPUSH
79288: CALL_OW 76
79292: ST_TO_ADDR
79293: GO 79315
// result := SortListByListDesc ( units , tmp ) ;
79295: LD_ADDR_VAR 0 3
79299: PUSH
79300: LD_VAR 0 1
79304: PPUSH
79305: LD_VAR 0 5
79309: PPUSH
79310: CALL_OW 77
79314: ST_TO_ADDR
// end ;
79315: LD_VAR 0 3
79319: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79320: LD_INT 0
79322: PPUSH
79323: PPUSH
// task := GetTaskList ( mech ) ;
79324: LD_ADDR_VAR 0 4
79328: PUSH
79329: LD_VAR 0 1
79333: PPUSH
79334: CALL_OW 437
79338: ST_TO_ADDR
// if not task then
79339: LD_VAR 0 4
79343: NOT
79344: IFFALSE 79348
// exit ;
79346: GO 79390
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79348: LD_ADDR_VAR 0 3
79352: PUSH
79353: LD_VAR 0 4
79357: PUSH
79358: LD_INT 1
79360: ARRAY
79361: PUSH
79362: LD_INT 1
79364: ARRAY
79365: PUSH
79366: LD_STRING r
79368: EQUAL
79369: PUSH
79370: LD_VAR 0 4
79374: PUSH
79375: LD_INT 1
79377: ARRAY
79378: PUSH
79379: LD_INT 4
79381: ARRAY
79382: PUSH
79383: LD_VAR 0 2
79387: EQUAL
79388: AND
79389: ST_TO_ADDR
// end ;
79390: LD_VAR 0 3
79394: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79395: LD_INT 0
79397: PPUSH
// SetDir ( unit , d ) ;
79398: LD_VAR 0 1
79402: PPUSH
79403: LD_VAR 0 4
79407: PPUSH
79408: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79412: LD_VAR 0 1
79416: PPUSH
79417: LD_VAR 0 2
79421: PPUSH
79422: LD_VAR 0 3
79426: PPUSH
79427: LD_VAR 0 5
79431: PPUSH
79432: CALL_OW 48
// end ;
79436: LD_VAR 0 6
79440: RET
// export function ToNaturalNumber ( number ) ; begin
79441: LD_INT 0
79443: PPUSH
// result := number div 1 ;
79444: LD_ADDR_VAR 0 2
79448: PUSH
79449: LD_VAR 0 1
79453: PUSH
79454: LD_INT 1
79456: DIV
79457: ST_TO_ADDR
// if number < 0 then
79458: LD_VAR 0 1
79462: PUSH
79463: LD_INT 0
79465: LESS
79466: IFFALSE 79476
// result := 0 ;
79468: LD_ADDR_VAR 0 2
79472: PUSH
79473: LD_INT 0
79475: ST_TO_ADDR
// end ;
79476: LD_VAR 0 2
79480: RET
// export function SortByClass ( units , class ) ; var un ; begin
79481: LD_INT 0
79483: PPUSH
79484: PPUSH
// if not units or not class then
79485: LD_VAR 0 1
79489: NOT
79490: PUSH
79491: LD_VAR 0 2
79495: NOT
79496: OR
79497: IFFALSE 79501
// exit ;
79499: GO 79596
// result := [ ] ;
79501: LD_ADDR_VAR 0 3
79505: PUSH
79506: EMPTY
79507: ST_TO_ADDR
// for un in units do
79508: LD_ADDR_VAR 0 4
79512: PUSH
79513: LD_VAR 0 1
79517: PUSH
79518: FOR_IN
79519: IFFALSE 79594
// if GetClass ( un ) = class then
79521: LD_VAR 0 4
79525: PPUSH
79526: CALL_OW 257
79530: PUSH
79531: LD_VAR 0 2
79535: EQUAL
79536: IFFALSE 79563
// result := Insert ( result , 1 , un ) else
79538: LD_ADDR_VAR 0 3
79542: PUSH
79543: LD_VAR 0 3
79547: PPUSH
79548: LD_INT 1
79550: PPUSH
79551: LD_VAR 0 4
79555: PPUSH
79556: CALL_OW 2
79560: ST_TO_ADDR
79561: GO 79592
// result := Replace ( result , result + 1 , un ) ;
79563: LD_ADDR_VAR 0 3
79567: PUSH
79568: LD_VAR 0 3
79572: PPUSH
79573: LD_VAR 0 3
79577: PUSH
79578: LD_INT 1
79580: PLUS
79581: PPUSH
79582: LD_VAR 0 4
79586: PPUSH
79587: CALL_OW 1
79591: ST_TO_ADDR
79592: GO 79518
79594: POP
79595: POP
// end ;
79596: LD_VAR 0 3
79600: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79601: LD_INT 0
79603: PPUSH
79604: PPUSH
79605: PPUSH
79606: PPUSH
79607: PPUSH
79608: PPUSH
79609: PPUSH
// result := [ ] ;
79610: LD_ADDR_VAR 0 4
79614: PUSH
79615: EMPTY
79616: ST_TO_ADDR
// if x - r < 0 then
79617: LD_VAR 0 1
79621: PUSH
79622: LD_VAR 0 3
79626: MINUS
79627: PUSH
79628: LD_INT 0
79630: LESS
79631: IFFALSE 79643
// min_x := 0 else
79633: LD_ADDR_VAR 0 8
79637: PUSH
79638: LD_INT 0
79640: ST_TO_ADDR
79641: GO 79659
// min_x := x - r ;
79643: LD_ADDR_VAR 0 8
79647: PUSH
79648: LD_VAR 0 1
79652: PUSH
79653: LD_VAR 0 3
79657: MINUS
79658: ST_TO_ADDR
// if y - r < 0 then
79659: LD_VAR 0 2
79663: PUSH
79664: LD_VAR 0 3
79668: MINUS
79669: PUSH
79670: LD_INT 0
79672: LESS
79673: IFFALSE 79685
// min_y := 0 else
79675: LD_ADDR_VAR 0 7
79679: PUSH
79680: LD_INT 0
79682: ST_TO_ADDR
79683: GO 79701
// min_y := y - r ;
79685: LD_ADDR_VAR 0 7
79689: PUSH
79690: LD_VAR 0 2
79694: PUSH
79695: LD_VAR 0 3
79699: MINUS
79700: ST_TO_ADDR
// max_x := x + r ;
79701: LD_ADDR_VAR 0 9
79705: PUSH
79706: LD_VAR 0 1
79710: PUSH
79711: LD_VAR 0 3
79715: PLUS
79716: ST_TO_ADDR
// max_y := y + r ;
79717: LD_ADDR_VAR 0 10
79721: PUSH
79722: LD_VAR 0 2
79726: PUSH
79727: LD_VAR 0 3
79731: PLUS
79732: ST_TO_ADDR
// for _x = min_x to max_x do
79733: LD_ADDR_VAR 0 5
79737: PUSH
79738: DOUBLE
79739: LD_VAR 0 8
79743: DEC
79744: ST_TO_ADDR
79745: LD_VAR 0 9
79749: PUSH
79750: FOR_TO
79751: IFFALSE 79852
// for _y = min_y to max_y do
79753: LD_ADDR_VAR 0 6
79757: PUSH
79758: DOUBLE
79759: LD_VAR 0 7
79763: DEC
79764: ST_TO_ADDR
79765: LD_VAR 0 10
79769: PUSH
79770: FOR_TO
79771: IFFALSE 79848
// begin if not ValidHex ( _x , _y ) then
79773: LD_VAR 0 5
79777: PPUSH
79778: LD_VAR 0 6
79782: PPUSH
79783: CALL_OW 488
79787: NOT
79788: IFFALSE 79792
// continue ;
79790: GO 79770
// if GetResourceTypeXY ( _x , _y ) then
79792: LD_VAR 0 5
79796: PPUSH
79797: LD_VAR 0 6
79801: PPUSH
79802: CALL_OW 283
79806: IFFALSE 79846
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79808: LD_ADDR_VAR 0 4
79812: PUSH
79813: LD_VAR 0 4
79817: PPUSH
79818: LD_VAR 0 4
79822: PUSH
79823: LD_INT 1
79825: PLUS
79826: PPUSH
79827: LD_VAR 0 5
79831: PUSH
79832: LD_VAR 0 6
79836: PUSH
79837: EMPTY
79838: LIST
79839: LIST
79840: PPUSH
79841: CALL_OW 1
79845: ST_TO_ADDR
// end ;
79846: GO 79770
79848: POP
79849: POP
79850: GO 79750
79852: POP
79853: POP
// end ;
79854: LD_VAR 0 4
79858: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79859: LD_INT 0
79861: PPUSH
79862: PPUSH
79863: PPUSH
79864: PPUSH
79865: PPUSH
79866: PPUSH
79867: PPUSH
79868: PPUSH
// if not units then
79869: LD_VAR 0 1
79873: NOT
79874: IFFALSE 79878
// exit ;
79876: GO 80404
// result := UnitFilter ( units , [ f_ok ] ) ;
79878: LD_ADDR_VAR 0 3
79882: PUSH
79883: LD_VAR 0 1
79887: PPUSH
79888: LD_INT 50
79890: PUSH
79891: EMPTY
79892: LIST
79893: PPUSH
79894: CALL_OW 72
79898: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79899: LD_ADDR_VAR 0 8
79903: PUSH
79904: LD_VAR 0 1
79908: PUSH
79909: LD_INT 1
79911: ARRAY
79912: PPUSH
79913: CALL_OW 255
79917: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79918: LD_ADDR_VAR 0 10
79922: PUSH
79923: LD_INT 29
79925: PUSH
79926: LD_EXP 54
79930: PUSH
79931: LD_INT 49
79933: PUSH
79934: EMPTY
79935: LIST
79936: LIST
79937: LIST
79938: ST_TO_ADDR
// if not result then
79939: LD_VAR 0 3
79943: NOT
79944: IFFALSE 79948
// exit ;
79946: GO 80404
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79948: LD_ADDR_VAR 0 5
79952: PUSH
79953: LD_INT 81
79955: PUSH
79956: LD_VAR 0 8
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: PPUSH
79965: CALL_OW 69
79969: ST_TO_ADDR
// for i in result do
79970: LD_ADDR_VAR 0 4
79974: PUSH
79975: LD_VAR 0 3
79979: PUSH
79980: FOR_IN
79981: IFFALSE 80402
// begin tag := GetTag ( i ) + 1 ;
79983: LD_ADDR_VAR 0 9
79987: PUSH
79988: LD_VAR 0 4
79992: PPUSH
79993: CALL_OW 110
79997: PUSH
79998: LD_INT 1
80000: PLUS
80001: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80002: LD_ADDR_VAR 0 7
80006: PUSH
80007: LD_VAR 0 4
80011: PPUSH
80012: CALL_OW 250
80016: PPUSH
80017: LD_VAR 0 4
80021: PPUSH
80022: CALL_OW 251
80026: PPUSH
80027: LD_INT 6
80029: PPUSH
80030: CALL 79601 0 3
80034: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80035: LD_VAR 0 4
80039: PPUSH
80040: CALL_OW 247
80044: PUSH
80045: LD_INT 2
80047: EQUAL
80048: PUSH
80049: LD_VAR 0 7
80053: AND
80054: PUSH
80055: LD_VAR 0 4
80059: PPUSH
80060: CALL_OW 264
80064: PUSH
80065: LD_VAR 0 10
80069: IN
80070: NOT
80071: AND
80072: IFFALSE 80111
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80074: LD_VAR 0 4
80078: PPUSH
80079: LD_VAR 0 7
80083: PUSH
80084: LD_INT 1
80086: ARRAY
80087: PUSH
80088: LD_INT 1
80090: ARRAY
80091: PPUSH
80092: LD_VAR 0 7
80096: PUSH
80097: LD_INT 1
80099: ARRAY
80100: PUSH
80101: LD_INT 2
80103: ARRAY
80104: PPUSH
80105: CALL_OW 116
80109: GO 80400
// if path > tag then
80111: LD_VAR 0 2
80115: PUSH
80116: LD_VAR 0 9
80120: GREATER
80121: IFFALSE 80329
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80123: LD_ADDR_VAR 0 6
80127: PUSH
80128: LD_VAR 0 5
80132: PPUSH
80133: LD_INT 91
80135: PUSH
80136: LD_VAR 0 4
80140: PUSH
80141: LD_INT 8
80143: PUSH
80144: EMPTY
80145: LIST
80146: LIST
80147: LIST
80148: PPUSH
80149: CALL_OW 72
80153: ST_TO_ADDR
// if nearEnemy then
80154: LD_VAR 0 6
80158: IFFALSE 80227
// begin if GetWeapon ( i ) = ru_time_lapser then
80160: LD_VAR 0 4
80164: PPUSH
80165: CALL_OW 264
80169: PUSH
80170: LD_INT 49
80172: EQUAL
80173: IFFALSE 80201
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80175: LD_VAR 0 4
80179: PPUSH
80180: LD_VAR 0 6
80184: PPUSH
80185: LD_VAR 0 4
80189: PPUSH
80190: CALL_OW 74
80194: PPUSH
80195: CALL_OW 112
80199: GO 80225
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80201: LD_VAR 0 4
80205: PPUSH
80206: LD_VAR 0 6
80210: PPUSH
80211: LD_VAR 0 4
80215: PPUSH
80216: CALL_OW 74
80220: PPUSH
80221: CALL_OW 115
// end else
80225: GO 80327
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80227: LD_VAR 0 4
80231: PPUSH
80232: LD_VAR 0 2
80236: PUSH
80237: LD_VAR 0 9
80241: ARRAY
80242: PUSH
80243: LD_INT 1
80245: ARRAY
80246: PPUSH
80247: LD_VAR 0 2
80251: PUSH
80252: LD_VAR 0 9
80256: ARRAY
80257: PUSH
80258: LD_INT 2
80260: ARRAY
80261: PPUSH
80262: CALL_OW 297
80266: PUSH
80267: LD_INT 6
80269: GREATER
80270: IFFALSE 80313
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80272: LD_VAR 0 4
80276: PPUSH
80277: LD_VAR 0 2
80281: PUSH
80282: LD_VAR 0 9
80286: ARRAY
80287: PUSH
80288: LD_INT 1
80290: ARRAY
80291: PPUSH
80292: LD_VAR 0 2
80296: PUSH
80297: LD_VAR 0 9
80301: ARRAY
80302: PUSH
80303: LD_INT 2
80305: ARRAY
80306: PPUSH
80307: CALL_OW 114
80311: GO 80327
// SetTag ( i , tag ) ;
80313: LD_VAR 0 4
80317: PPUSH
80318: LD_VAR 0 9
80322: PPUSH
80323: CALL_OW 109
// end else
80327: GO 80400
// if enemy then
80329: LD_VAR 0 5
80333: IFFALSE 80400
// begin if GetWeapon ( i ) = ru_time_lapser then
80335: LD_VAR 0 4
80339: PPUSH
80340: CALL_OW 264
80344: PUSH
80345: LD_INT 49
80347: EQUAL
80348: IFFALSE 80376
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80350: LD_VAR 0 4
80354: PPUSH
80355: LD_VAR 0 5
80359: PPUSH
80360: LD_VAR 0 4
80364: PPUSH
80365: CALL_OW 74
80369: PPUSH
80370: CALL_OW 112
80374: GO 80400
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80376: LD_VAR 0 4
80380: PPUSH
80381: LD_VAR 0 5
80385: PPUSH
80386: LD_VAR 0 4
80390: PPUSH
80391: CALL_OW 74
80395: PPUSH
80396: CALL_OW 115
// end ; end ;
80400: GO 79980
80402: POP
80403: POP
// end ;
80404: LD_VAR 0 3
80408: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80409: LD_INT 0
80411: PPUSH
80412: PPUSH
80413: PPUSH
// if not unit or IsInUnit ( unit ) then
80414: LD_VAR 0 1
80418: NOT
80419: PUSH
80420: LD_VAR 0 1
80424: PPUSH
80425: CALL_OW 310
80429: OR
80430: IFFALSE 80434
// exit ;
80432: GO 80525
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80434: LD_ADDR_VAR 0 4
80438: PUSH
80439: LD_VAR 0 1
80443: PPUSH
80444: CALL_OW 250
80448: PPUSH
80449: LD_VAR 0 2
80453: PPUSH
80454: LD_INT 1
80456: PPUSH
80457: CALL_OW 272
80461: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80462: LD_ADDR_VAR 0 5
80466: PUSH
80467: LD_VAR 0 1
80471: PPUSH
80472: CALL_OW 251
80476: PPUSH
80477: LD_VAR 0 2
80481: PPUSH
80482: LD_INT 1
80484: PPUSH
80485: CALL_OW 273
80489: ST_TO_ADDR
// if ValidHex ( x , y ) then
80490: LD_VAR 0 4
80494: PPUSH
80495: LD_VAR 0 5
80499: PPUSH
80500: CALL_OW 488
80504: IFFALSE 80525
// ComTurnXY ( unit , x , y ) ;
80506: LD_VAR 0 1
80510: PPUSH
80511: LD_VAR 0 4
80515: PPUSH
80516: LD_VAR 0 5
80520: PPUSH
80521: CALL_OW 118
// end ;
80525: LD_VAR 0 3
80529: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80530: LD_INT 0
80532: PPUSH
80533: PPUSH
// result := false ;
80534: LD_ADDR_VAR 0 3
80538: PUSH
80539: LD_INT 0
80541: ST_TO_ADDR
// if not units then
80542: LD_VAR 0 2
80546: NOT
80547: IFFALSE 80551
// exit ;
80549: GO 80596
// for i in units do
80551: LD_ADDR_VAR 0 4
80555: PUSH
80556: LD_VAR 0 2
80560: PUSH
80561: FOR_IN
80562: IFFALSE 80594
// if See ( side , i ) then
80564: LD_VAR 0 1
80568: PPUSH
80569: LD_VAR 0 4
80573: PPUSH
80574: CALL_OW 292
80578: IFFALSE 80592
// begin result := true ;
80580: LD_ADDR_VAR 0 3
80584: PUSH
80585: LD_INT 1
80587: ST_TO_ADDR
// exit ;
80588: POP
80589: POP
80590: GO 80596
// end ;
80592: GO 80561
80594: POP
80595: POP
// end ;
80596: LD_VAR 0 3
80600: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80601: LD_INT 0
80603: PPUSH
80604: PPUSH
80605: PPUSH
80606: PPUSH
// if not unit or not points then
80607: LD_VAR 0 1
80611: NOT
80612: PUSH
80613: LD_VAR 0 2
80617: NOT
80618: OR
80619: IFFALSE 80623
// exit ;
80621: GO 80713
// dist := 99999 ;
80623: LD_ADDR_VAR 0 5
80627: PUSH
80628: LD_INT 99999
80630: ST_TO_ADDR
// for i in points do
80631: LD_ADDR_VAR 0 4
80635: PUSH
80636: LD_VAR 0 2
80640: PUSH
80641: FOR_IN
80642: IFFALSE 80711
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80644: LD_ADDR_VAR 0 6
80648: PUSH
80649: LD_VAR 0 1
80653: PPUSH
80654: LD_VAR 0 4
80658: PUSH
80659: LD_INT 1
80661: ARRAY
80662: PPUSH
80663: LD_VAR 0 4
80667: PUSH
80668: LD_INT 2
80670: ARRAY
80671: PPUSH
80672: CALL_OW 297
80676: ST_TO_ADDR
// if tmpDist < dist then
80677: LD_VAR 0 6
80681: PUSH
80682: LD_VAR 0 5
80686: LESS
80687: IFFALSE 80709
// begin result := i ;
80689: LD_ADDR_VAR 0 3
80693: PUSH
80694: LD_VAR 0 4
80698: ST_TO_ADDR
// dist := tmpDist ;
80699: LD_ADDR_VAR 0 5
80703: PUSH
80704: LD_VAR 0 6
80708: ST_TO_ADDR
// end ; end ;
80709: GO 80641
80711: POP
80712: POP
// end ;
80713: LD_VAR 0 3
80717: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80718: LD_INT 0
80720: PPUSH
// uc_side := side ;
80721: LD_ADDR_OWVAR 20
80725: PUSH
80726: LD_VAR 0 1
80730: ST_TO_ADDR
// uc_nation := 3 ;
80731: LD_ADDR_OWVAR 21
80735: PUSH
80736: LD_INT 3
80738: ST_TO_ADDR
// vc_chassis := 25 ;
80739: LD_ADDR_OWVAR 37
80743: PUSH
80744: LD_INT 25
80746: ST_TO_ADDR
// vc_engine := engine_siberite ;
80747: LD_ADDR_OWVAR 39
80751: PUSH
80752: LD_INT 3
80754: ST_TO_ADDR
// vc_control := control_computer ;
80755: LD_ADDR_OWVAR 38
80759: PUSH
80760: LD_INT 3
80762: ST_TO_ADDR
// vc_weapon := 59 ;
80763: LD_ADDR_OWVAR 40
80767: PUSH
80768: LD_INT 59
80770: ST_TO_ADDR
// result := CreateVehicle ;
80771: LD_ADDR_VAR 0 5
80775: PUSH
80776: CALL_OW 45
80780: ST_TO_ADDR
// SetDir ( result , d ) ;
80781: LD_VAR 0 5
80785: PPUSH
80786: LD_VAR 0 4
80790: PPUSH
80791: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80795: LD_VAR 0 5
80799: PPUSH
80800: LD_VAR 0 2
80804: PPUSH
80805: LD_VAR 0 3
80809: PPUSH
80810: LD_INT 0
80812: PPUSH
80813: CALL_OW 48
// end ;
80817: LD_VAR 0 5
80821: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80822: LD_INT 0
80824: PPUSH
80825: PPUSH
80826: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80827: LD_ADDR_VAR 0 2
80831: PUSH
80832: LD_INT 0
80834: PUSH
80835: LD_INT 0
80837: PUSH
80838: LD_INT 0
80840: PUSH
80841: LD_INT 0
80843: PUSH
80844: EMPTY
80845: LIST
80846: LIST
80847: LIST
80848: LIST
80849: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80850: LD_VAR 0 1
80854: NOT
80855: PUSH
80856: LD_VAR 0 1
80860: PPUSH
80861: CALL_OW 264
80865: PUSH
80866: LD_INT 12
80868: PUSH
80869: LD_INT 51
80871: PUSH
80872: LD_INT 32
80874: PUSH
80875: LD_EXP 51
80879: PUSH
80880: EMPTY
80881: LIST
80882: LIST
80883: LIST
80884: LIST
80885: IN
80886: NOT
80887: OR
80888: IFFALSE 80892
// exit ;
80890: GO 80990
// for i := 1 to 3 do
80892: LD_ADDR_VAR 0 3
80896: PUSH
80897: DOUBLE
80898: LD_INT 1
80900: DEC
80901: ST_TO_ADDR
80902: LD_INT 3
80904: PUSH
80905: FOR_TO
80906: IFFALSE 80988
// begin tmp := GetCargo ( cargo , i ) ;
80908: LD_ADDR_VAR 0 4
80912: PUSH
80913: LD_VAR 0 1
80917: PPUSH
80918: LD_VAR 0 3
80922: PPUSH
80923: CALL_OW 289
80927: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80928: LD_ADDR_VAR 0 2
80932: PUSH
80933: LD_VAR 0 2
80937: PPUSH
80938: LD_VAR 0 3
80942: PPUSH
80943: LD_VAR 0 4
80947: PPUSH
80948: CALL_OW 1
80952: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80953: LD_ADDR_VAR 0 2
80957: PUSH
80958: LD_VAR 0 2
80962: PPUSH
80963: LD_INT 4
80965: PPUSH
80966: LD_VAR 0 2
80970: PUSH
80971: LD_INT 4
80973: ARRAY
80974: PUSH
80975: LD_VAR 0 4
80979: PLUS
80980: PPUSH
80981: CALL_OW 1
80985: ST_TO_ADDR
// end ;
80986: GO 80905
80988: POP
80989: POP
// end ;
80990: LD_VAR 0 2
80994: RET
// export function Length ( array ) ; begin
80995: LD_INT 0
80997: PPUSH
// result := array + 0 ;
80998: LD_ADDR_VAR 0 2
81002: PUSH
81003: LD_VAR 0 1
81007: PUSH
81008: LD_INT 0
81010: PLUS
81011: ST_TO_ADDR
// end ;
81012: LD_VAR 0 2
81016: RET
// export function PrepareArray ( array ) ; begin
81017: LD_INT 0
81019: PPUSH
// result := array diff 0 ;
81020: LD_ADDR_VAR 0 2
81024: PUSH
81025: LD_VAR 0 1
81029: PUSH
81030: LD_INT 0
81032: DIFF
81033: ST_TO_ADDR
// if not result [ 1 ] then
81034: LD_VAR 0 2
81038: PUSH
81039: LD_INT 1
81041: ARRAY
81042: NOT
81043: IFFALSE 81063
// result := Delete ( result , 1 ) ;
81045: LD_ADDR_VAR 0 2
81049: PUSH
81050: LD_VAR 0 2
81054: PPUSH
81055: LD_INT 1
81057: PPUSH
81058: CALL_OW 3
81062: ST_TO_ADDR
// end ; end_of_file
81063: LD_VAR 0 2
81067: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81068: LD_VAR 0 1
81072: PUSH
81073: LD_INT 200
81075: DOUBLE
81076: GREATEREQUAL
81077: IFFALSE 81085
81079: LD_INT 299
81081: DOUBLE
81082: LESSEQUAL
81083: IFTRUE 81087
81085: GO 81119
81087: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81088: LD_VAR 0 1
81092: PPUSH
81093: LD_VAR 0 2
81097: PPUSH
81098: LD_VAR 0 3
81102: PPUSH
81103: LD_VAR 0 4
81107: PPUSH
81108: LD_VAR 0 5
81112: PPUSH
81113: CALL 35919 0 5
81117: GO 81196
81119: LD_INT 300
81121: DOUBLE
81122: GREATEREQUAL
81123: IFFALSE 81131
81125: LD_INT 399
81127: DOUBLE
81128: LESSEQUAL
81129: IFTRUE 81133
81131: GO 81195
81133: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81134: LD_VAR 0 1
81138: PPUSH
81139: LD_VAR 0 2
81143: PPUSH
81144: LD_VAR 0 3
81148: PPUSH
81149: LD_VAR 0 4
81153: PPUSH
81154: LD_VAR 0 5
81158: PPUSH
81159: LD_VAR 0 6
81163: PPUSH
81164: LD_VAR 0 7
81168: PPUSH
81169: LD_VAR 0 8
81173: PPUSH
81174: LD_VAR 0 9
81178: PPUSH
81179: LD_VAR 0 10
81183: PPUSH
81184: LD_VAR 0 11
81188: PPUSH
81189: CALL 32248 0 11
81193: GO 81196
81195: POP
// end ;
81196: PPOPN 11
81198: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81199: LD_VAR 0 1
81203: PPUSH
81204: LD_VAR 0 2
81208: PPUSH
81209: LD_VAR 0 3
81213: PPUSH
81214: LD_VAR 0 4
81218: PPUSH
81219: LD_VAR 0 5
81223: PPUSH
81224: CALL 35655 0 5
// end ; end_of_file
81228: PPOPN 5
81230: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81231: LD_VAR 0 1
81235: PPUSH
81236: LD_VAR 0 2
81240: PPUSH
81241: LD_VAR 0 3
81245: PPUSH
81246: LD_VAR 0 4
81250: PPUSH
81251: LD_VAR 0 5
81255: PPUSH
81256: LD_VAR 0 6
81260: PPUSH
81261: CALL 19941 0 6
// end ;
81265: PPOPN 6
81267: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81268: LD_INT 0
81270: PPUSH
// begin if not units then
81271: LD_VAR 0 1
81275: NOT
81276: IFFALSE 81280
// exit ;
81278: GO 81280
// end ;
81280: PPOPN 7
81282: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81283: CALL 19912 0 0
// end ;
81287: PPOPN 1
81289: END
