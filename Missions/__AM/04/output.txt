// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export reliefOfCommand ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 74 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 33
// begin Difficulty := 4 ;
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 4
  25: ST_TO_ADDR
// FogOff ( 1 ) ;
  26: LD_INT 1
  28: PPUSH
  29: CALL_OW 344
// end ; PrepareDifficulty ;
  33: CALL 4706 0 0
// PrepareRussianBase ;
  37: CALL 2968 0 0
// PrepareRussianCommander ;
  41: CALL 2919 0 0
// PrepareHeroes ;
  45: CALL 481 0 0
// SetBName ( ambdept0 , gamma ) ;
  49: LD_INT 4
  51: PPUSH
  52: LD_STRING gamma
  54: PPUSH
  55: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  59: LD_INT 21
  61: PPUSH
  62: LD_STRING fyodor
  64: PPUSH
  65: CALL_OW 500
// Action ;
  69: CALL 7783 0 0
// end ;
  73: END
// function Init ; begin
  74: LD_INT 0
  76: PPUSH
// mission_prefix := 04_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 04_
  84: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  85: LD_ADDR_EXP 50
  89: PUSH
  90: LD_STRING 03_
  92: ST_TO_ADDR
// ruSoldMinLevel := 0 ;
  93: LD_ADDR_EXP 16
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// ruSoldMaxLevel := 0 ;
 101: LD_ADDR_EXP 17
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// baseReadyToBuild := 0 ;
 109: LD_ADDR_EXP 20
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// debugMode := 0 ;
 117: LD_ADDR_EXP 45
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 125: LD_ADDR_EXP 42
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// bonusAvalaible := 0 ;
 133: LD_ADDR_EXP 44
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// firstRussianAttack := 0 ;
 141: LD_ADDR_EXP 23
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// saveDonaldson := 0 ;
 149: LD_ADDR_EXP 24
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frankScoutBase := 0 ;
 157: LD_ADDR_EXP 25
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// harrAnswer := 0 ;
 165: LD_ADDR_EXP 26
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToDestroyRuBase := 0 ;
 173: LD_ADDR_EXP 27
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// timeToSupport := 9 9$00 ;
 181: LD_ADDR_EXP 28
 185: PUSH
 186: LD_INT 18900
 188: ST_TO_ADDR
// timerStatus := 0 ;
 189: LD_ADDR_EXP 29
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// startTimer := 0 ;
 197: LD_ADDR_EXP 30
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// factoryDialog := 0 ;
 205: LD_ADDR_EXP 31
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// bunkerDialog := 0 ;
 213: LD_ADDR_EXP 32
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// energyVDialog := 0 ;
 221: LD_ADDR_EXP 33
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildOil := 0 ;
 229: LD_ADDR_EXP 34
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// buildPower := 0 ;
 237: LD_ADDR_EXP 35
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// supply := [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 36
 249: PUSH
 250: LD_INT 14
 252: PUSH
 253: LD_INT 12
 255: PUSH
 256: LD_INT 11
 258: PUSH
 259: LD_INT 10
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// AIEnable := 1 ;
 274: LD_ADDR_EXP 37
 278: PUSH
 279: LD_INT 1
 281: ST_TO_ADDR
// donaldsonCoopAttack := 0 ;
 282: LD_ADDR_EXP 41
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// lostCounter := 0 ;
 290: LD_ADDR_EXP 38
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// honor := true ;
 298: LD_ADDR_EXP 39
 302: PUSH
 303: LD_INT 1
 305: ST_TO_ADDR
// reliefOfCommand := false ;
 306: LD_ADDR_EXP 48
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// escapeAvalaible = 0 ;
 314: LD_ADDR_EXP 40
 318: PUSH
 319: LD_INT 0
 321: ST_TO_ADDR
// specAttack := false ;
 322: LD_ADDR_EXP 47
 326: PUSH
 327: LD_INT 0
 329: ST_TO_ADDR
// ruMobile := [ ] ;
 330: LD_ADDR_EXP 46
 334: PUSH
 335: EMPTY
 336: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 337: LD_ADDR_EXP 43
 341: PUSH
 342: LD_INT 3
 344: PUSH
 345: LD_INT 4
 347: PUSH
 348: LD_INT 5
 350: PUSH
 351: LD_INT 6
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: LD_OWVAR 67
 364: ARRAY
 365: ST_TO_ADDR
// end ;
 366: LD_VAR 0 1
 370: RET
// every 0 0$1 trigger debugMode do var i ;
 371: LD_EXP 45
 375: IFFALSE 437
 377: GO 379
 379: DISABLE
 380: LD_INT 0
 382: PPUSH
// begin enable ;
 383: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 384: LD_ADDR_VAR 0 1
 388: PUSH
 389: LD_INT 22
 391: PUSH
 392: LD_INT 1
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 21
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PPUSH
 413: CALL_OW 69
 417: PUSH
 418: FOR_IN
 419: IFFALSE 435
// SetLives ( i , 1000 ) ;
 421: LD_VAR 0 1
 425: PPUSH
 426: LD_INT 1000
 428: PPUSH
 429: CALL_OW 234
 433: GO 418
 435: POP
 436: POP
// end ;
 437: PPOPN 1
 439: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 440: LD_INT 22
 442: PUSH
 443: LD_INT 1
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 34
 452: PUSH
 453: LD_INT 44
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PPUSH
 464: CALL_OW 69
 468: IFFALSE 480
 470: GO 472
 472: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 473: LD_STRING ACH_GUN
 475: PPUSH
 476: CALL_OW 543
 480: END
// export function PrepareHeroes ; var i , tmp ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
 485: PPUSH
// uc_side = 1 ;
 486: LD_ADDR_OWVAR 20
 490: PUSH
 491: LD_INT 1
 493: ST_TO_ADDR
// uc_nation = 1 ;
 494: LD_ADDR_OWVAR 21
 498: PUSH
 499: LD_INT 1
 501: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 502: LD_ADDR_EXP 1
 506: PUSH
 507: LD_STRING JMM
 509: PPUSH
 510: LD_EXP 45
 514: NOT
 515: PPUSH
 516: LD_EXP 50
 520: PPUSH
 521: CALL 41220 0 3
 525: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 526: LD_ADDR_EXP 4
 530: PUSH
 531: LD_STRING Lisa
 533: PPUSH
 534: LD_EXP 45
 538: NOT
 539: PPUSH
 540: LD_EXP 50
 544: PPUSH
 545: CALL 41220 0 3
 549: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 550: LD_ADDR_EXP 7
 554: PUSH
 555: LD_STRING Brown
 557: PPUSH
 558: LD_INT 0
 560: PPUSH
 561: LD_EXP 50
 565: PPUSH
 566: CALL 41220 0 3
 570: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 571: LD_ADDR_EXP 8
 575: PUSH
 576: LD_STRING Dickens
 578: PPUSH
 579: LD_INT 0
 581: PPUSH
 582: LD_EXP 50
 586: PPUSH
 587: CALL 41220 0 3
 591: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 592: LD_ADDR_EXP 9
 596: PUSH
 597: LD_STRING Woodruff
 599: PPUSH
 600: LD_INT 0
 602: PPUSH
 603: LD_EXP 50
 607: PPUSH
 608: CALL 41220 0 3
 612: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 613: LD_ADDR_EXP 12
 617: PUSH
 618: LD_STRING Campell
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: LD_EXP 50
 628: PPUSH
 629: CALL 41220 0 3
 633: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 634: LD_ADDR_EXP 10
 638: PUSH
 639: LD_STRING Knight
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: LD_EXP 50
 649: PPUSH
 650: CALL 41220 0 3
 654: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 655: LD_ADDR_EXP 11
 659: PUSH
 660: LD_STRING Claptopn
 662: PPUSH
 663: LD_INT 0
 665: PPUSH
 666: LD_EXP 50
 670: PPUSH
 671: CALL 41220 0 3
 675: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 676: LD_ADDR_EXP 14
 680: PUSH
 681: LD_STRING Harisson
 683: PPUSH
 684: LD_INT 0
 686: PPUSH
 687: LD_EXP 50
 691: PPUSH
 692: CALL 41220 0 3
 696: ST_TO_ADDR
// if not Lisa then
 697: LD_EXP 4
 701: NOT
 702: IFFALSE 725
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 704: LD_ADDR_EXP 2
 708: PUSH
 709: LD_STRING Bobby
 711: PPUSH
 712: LD_INT 1
 714: PPUSH
 715: LD_EXP 50
 719: PPUSH
 720: CALL 41220 0 3
 724: ST_TO_ADDR
// if not Lisa and not Bobby then
 725: LD_EXP 4
 729: NOT
 730: IFFALSE 739
 732: PUSH
 733: LD_EXP 2
 737: NOT
 738: AND
 739: IFFALSE 762
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 741: LD_ADDR_EXP 3
 745: PUSH
 746: LD_STRING Cyrus
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_EXP 50
 756: PPUSH
 757: CALL 41220 0 3
 761: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 762: LD_EXP 4
 766: NOT
 767: IFFALSE 776
 769: PUSH
 770: LD_EXP 2
 774: NOT
 775: AND
 776: IFFALSE 785
 778: PUSH
 779: LD_EXP 3
 783: NOT
 784: AND
 785: IFFALSE 884
// begin tmp = CreateCharacterSet ( 03_others ) ;
 787: LD_ADDR_VAR 0 3
 791: PUSH
 792: LD_STRING 03_others
 794: PPUSH
 795: CALL_OW 31
 799: ST_TO_ADDR
// if tmp then
 800: LD_VAR 0 3
 804: IFFALSE 861
// begin RandomBeforeMission = tmp [ 1 ] ;
 806: LD_ADDR_EXP 6
 810: PUSH
 811: LD_VAR 0 3
 815: PUSH
 816: LD_INT 1
 818: ARRAY
 819: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 820: LD_STRING 03_others
 822: PPUSH
 823: CALL_OW 40
// if tmp > 1 then
 827: LD_VAR 0 3
 831: PUSH
 832: LD_INT 1
 834: GREATER
 835: IFFALSE 859
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 837: LD_VAR 0 3
 841: PUSH
 842: LD_VAR 0 3
 846: PUSH
 847: LD_INT 1
 849: ARRAY
 850: DIFF
 851: PPUSH
 852: LD_STRING 03_others
 854: PPUSH
 855: CALL_OW 38
// end else
 859: GO 884
// begin PrepareHuman ( false , 1 , 3 ) ;
 861: LD_INT 0
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: LD_INT 3
 869: PPUSH
 870: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 874: LD_ADDR_EXP 6
 878: PUSH
 879: CALL_OW 44
 883: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 884: LD_ADDR_OWVAR 20
 888: PUSH
 889: LD_INT 4
 891: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 892: LD_ADDR_EXP 13
 896: PUSH
 897: LD_STRING Donaldson
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_EXP 50
 907: PPUSH
 908: CALL 41220 0 3
 912: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 913: LD_ADDR_EXP 5
 917: PUSH
 918: LD_STRING Frank
 920: PPUSH
 921: LD_INT 1
 923: PPUSH
 924: LD_EXP 50
 928: PPUSH
 929: CALL 41220 0 3
 933: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 934: LD_EXP 1
 938: PPUSH
 939: LD_INT 32
 941: PPUSH
 942: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 946: LD_EXP 7
 950: PPUSH
 951: LD_INT 1
 953: PPUSH
 954: LD_INT 0
 956: PPUSH
 957: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 961: LD_EXP 7
 965: PPUSH
 966: LD_INT 32
 968: PPUSH
 969: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 973: LD_EXP 8
 977: PPUSH
 978: LD_INT 2
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 988: LD_EXP 9
 992: PPUSH
 993: LD_INT 2
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1003: LD_EXP 12
1007: PPUSH
1008: LD_INT 2
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1018: LD_EXP 10
1022: PPUSH
1023: LD_INT 2
1025: PPUSH
1026: LD_INT 0
1028: PPUSH
1029: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1033: LD_EXP 11
1037: PPUSH
1038: LD_INT 2
1040: PPUSH
1041: LD_INT 0
1043: PPUSH
1044: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1048: LD_EXP 4
1052: PPUSH
1053: LD_INT 2
1055: PPUSH
1056: LD_INT 0
1058: PPUSH
1059: CALL_OW 49
// if Lisa = false then
1063: LD_EXP 4
1067: PUSH
1068: LD_INT 0
1070: EQUAL
1071: IFFALSE 1088
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1073: LD_EXP 2
1077: PPUSH
1078: LD_INT 2
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 49
// if Lisa = false and Bobby = false then
1088: LD_EXP 4
1092: PUSH
1093: LD_INT 0
1095: EQUAL
1096: IFFALSE 1108
1098: PUSH
1099: LD_EXP 2
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1125
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1110: LD_EXP 3
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1125: LD_EXP 4
1129: PUSH
1130: LD_INT 0
1132: EQUAL
1133: IFFALSE 1145
1135: PUSH
1136: LD_EXP 2
1140: PUSH
1141: LD_INT 0
1143: EQUAL
1144: AND
1145: IFFALSE 1157
1147: PUSH
1148: LD_EXP 3
1152: PUSH
1153: LD_INT 0
1155: EQUAL
1156: AND
1157: IFFALSE 1174
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1159: LD_EXP 6
1163: PPUSH
1164: LD_INT 2
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 49
// end ;
1174: LD_VAR 0 1
1178: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1179: LD_INT 0
1181: PPUSH
1182: PPUSH
1183: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1184: LD_EXP 13
1188: PPUSH
1189: LD_INT 10
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: CALL_OW 49
// if Frank then
1199: LD_EXP 5
1203: IFFALSE 1220
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1205: LD_EXP 5
1209: PPUSH
1210: LD_INT 10
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 49
// uc_nation = 1 ;
1220: LD_ADDR_OWVAR 21
1224: PUSH
1225: LD_INT 1
1227: ST_TO_ADDR
// uc_side = 4 ;
1228: LD_ADDR_OWVAR 20
1232: PUSH
1233: LD_INT 4
1235: ST_TO_ADDR
// hc_class := 3 ;
1236: LD_ADDR_OWVAR 28
1240: PUSH
1241: LD_INT 3
1243: ST_TO_ADDR
// hc_sex := sex_male ;
1244: LD_ADDR_OWVAR 27
1248: PUSH
1249: LD_INT 1
1251: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1252: LD_ADDR_OWVAR 33
1256: PUSH
1257: LD_STRING SecondCharsGal
1259: ST_TO_ADDR
// hc_face_number := 53 ;
1260: LD_ADDR_OWVAR 34
1264: PUSH
1265: LD_INT 53
1267: ST_TO_ADDR
// hc_name := Freddie Warner ;
1268: LD_ADDR_OWVAR 26
1272: PUSH
1273: LD_STRING Freddie Warner
1275: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1276: LD_ADDR_OWVAR 29
1280: PUSH
1281: LD_INT 8
1283: PUSH
1284: LD_INT 11
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 1 ] ;
1291: LD_ADDR_OWVAR 30
1295: PUSH
1296: LD_INT 0
1298: PUSH
1299: LD_INT 0
1301: PUSH
1302: LD_INT 2
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1314: LD_ADDR_OWVAR 31
1318: PUSH
1319: LD_INT 1
1321: PUSH
1322: LD_INT 0
1324: PUSH
1325: LD_INT 3
1327: PUSH
1328: LD_INT 2
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: ST_TO_ADDR
// un = CreateHuman ;
1337: LD_ADDR_VAR 0 3
1341: PUSH
1342: CALL_OW 44
1346: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1347: LD_VAR 0 3
1351: PPUSH
1352: LD_INT 10
1354: PPUSH
1355: LD_INT 0
1357: PPUSH
1358: CALL_OW 49
// hc_class := 1 ;
1362: LD_ADDR_OWVAR 28
1366: PUSH
1367: LD_INT 1
1369: ST_TO_ADDR
// hc_sex := sex_male ;
1370: LD_ADDR_OWVAR 27
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1378: LD_ADDR_OWVAR 33
1382: PUSH
1383: LD_STRING SecondCharsGal
1385: ST_TO_ADDR
// hc_face_number := 56 ;
1386: LD_ADDR_OWVAR 34
1390: PUSH
1391: LD_INT 56
1393: ST_TO_ADDR
// hc_name := Mel Brennan ;
1394: LD_ADDR_OWVAR 26
1398: PUSH
1399: LD_STRING Mel Brennan
1401: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1402: LD_ADDR_OWVAR 29
1406: PUSH
1407: LD_INT 12
1409: PUSH
1410: LD_INT 11
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 1 , 0 ] ;
1417: LD_ADDR_OWVAR 30
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: LD_INT 0
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: LD_INT 0
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1440: LD_ADDR_OWVAR 31
1444: PUSH
1445: LD_INT 4
1447: PUSH
1448: LD_INT 1
1450: PUSH
1451: LD_INT 1
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: ST_TO_ADDR
// un = CreateHuman ;
1463: LD_ADDR_VAR 0 3
1467: PUSH
1468: CALL_OW 44
1472: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1473: LD_VAR 0 3
1477: PPUSH
1478: LD_INT 10
1480: PPUSH
1481: LD_INT 0
1483: PPUSH
1484: CALL_OW 49
// hc_class := 1 ;
1488: LD_ADDR_OWVAR 28
1492: PUSH
1493: LD_INT 1
1495: ST_TO_ADDR
// hc_sex := sex_male ;
1496: LD_ADDR_OWVAR 27
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1504: LD_ADDR_OWVAR 33
1508: PUSH
1509: LD_STRING AmGalRemake
1511: ST_TO_ADDR
// hc_face_number := 5 ;
1512: LD_ADDR_OWVAR 34
1516: PUSH
1517: LD_INT 5
1519: ST_TO_ADDR
// hc_name := Bob Joplin ;
1520: LD_ADDR_OWVAR 26
1524: PUSH
1525: LD_STRING Bob Joplin
1527: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1528: LD_ADDR_OWVAR 29
1532: PUSH
1533: LD_INT 10
1535: PUSH
1536: LD_INT 11
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
1543: LD_ADDR_OWVAR 30
1547: PUSH
1548: LD_INT 0
1550: PUSH
1551: LD_INT 1
1553: PUSH
1554: LD_INT 1
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: EMPTY
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1566: LD_ADDR_OWVAR 31
1570: PUSH
1571: LD_INT 3
1573: PUSH
1574: LD_INT 1
1576: PUSH
1577: LD_INT 1
1579: PUSH
1580: LD_INT 1
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: ST_TO_ADDR
// un = CreateHuman ;
1589: LD_ADDR_VAR 0 3
1593: PUSH
1594: CALL_OW 44
1598: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1599: LD_VAR 0 3
1603: PPUSH
1604: LD_INT 10
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: CALL_OW 49
// hc_class := 3 ;
1614: LD_ADDR_OWVAR 28
1618: PUSH
1619: LD_INT 3
1621: ST_TO_ADDR
// hc_sex := sex_female ;
1622: LD_ADDR_OWVAR 27
1626: PUSH
1627: LD_INT 2
1629: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1630: LD_ADDR_OWVAR 33
1634: PUSH
1635: LD_STRING AmGalRemake
1637: ST_TO_ADDR
// hc_face_number := 8 ;
1638: LD_ADDR_OWVAR 34
1642: PUSH
1643: LD_INT 8
1645: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1646: LD_ADDR_OWVAR 26
1650: PUSH
1651: LD_STRING Elizabeth Whitney
1653: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1654: LD_ADDR_OWVAR 29
1658: PUSH
1659: LD_INT 9
1661: PUSH
1662: LD_INT 11
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 3 , 0 ] ;
1669: LD_ADDR_OWVAR 30
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: LD_INT 3
1682: PUSH
1683: LD_INT 0
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 4 , 1 ] ;
1692: LD_ADDR_OWVAR 31
1696: PUSH
1697: LD_INT 0
1699: PUSH
1700: LD_INT 1
1702: PUSH
1703: LD_INT 4
1705: PUSH
1706: LD_INT 1
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: ST_TO_ADDR
// un = CreateHuman ;
1715: LD_ADDR_VAR 0 3
1719: PUSH
1720: CALL_OW 44
1724: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1725: LD_VAR 0 3
1729: PPUSH
1730: LD_INT 10
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 49
// InitHc ;
1740: CALL_OW 19
// end ;
1744: LD_VAR 0 1
1748: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1749: LD_INT 0
1751: PPUSH
1752: PPUSH
1753: PPUSH
1754: PPUSH
// uc_nation = 1 ;
1755: LD_ADDR_OWVAR 21
1759: PUSH
1760: LD_INT 1
1762: ST_TO_ADDR
// uc_side = 1 ;
1763: LD_ADDR_OWVAR 20
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1771: LD_ADDR_OWVAR 37
1775: PUSH
1776: LD_INT 2
1778: ST_TO_ADDR
// vc_engine := engine_combustion ;
1779: LD_ADDR_OWVAR 39
1783: PUSH
1784: LD_INT 1
1786: ST_TO_ADDR
// vc_control := control_manual ;
1787: LD_ADDR_OWVAR 38
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1795: LD_ADDR_OWVAR 41
1799: PUSH
1800: LD_INT 65
1802: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1803: LD_ADDR_OWVAR 40
1807: PUSH
1808: LD_INT 5
1810: PUSH
1811: LD_INT 3
1813: PUSH
1814: LD_INT 4
1816: PUSH
1817: LD_INT 4
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: PUSH
1826: LD_OWVAR 67
1830: ARRAY
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 5
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1842: LD_VAR 0 5
1846: PPUSH
1847: LD_INT 2
1849: PPUSH
1850: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1854: LD_INT 17
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: CALL_OW 428
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: IFFALSE 1890
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1870: LD_VAR 0 5
1874: PPUSH
1875: LD_INT 17
1877: PPUSH
1878: LD_INT 4
1880: PPUSH
1881: LD_INT 0
1883: PPUSH
1884: CALL_OW 48
1888: GO 1908
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1890: LD_VAR 0 5
1894: PPUSH
1895: LD_INT 23
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 0
1903: PPUSH
1904: CALL_OW 48
// hc_class := 1 ;
1908: LD_ADDR_OWVAR 28
1912: PUSH
1913: LD_INT 1
1915: ST_TO_ADDR
// hc_sex := sex_male ;
1916: LD_ADDR_OWVAR 27
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1924: LD_ADDR_OWVAR 33
1928: PUSH
1929: LD_STRING SecondCharsGal
1931: ST_TO_ADDR
// hc_face_number := 59 ;
1932: LD_ADDR_OWVAR 34
1936: PUSH
1937: LD_INT 59
1939: ST_TO_ADDR
// hc_name := Max Gray ;
1940: LD_ADDR_OWVAR 26
1944: PUSH
1945: LD_STRING Max Gray
1947: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1948: LD_ADDR_OWVAR 29
1952: PUSH
1953: LD_INT 9
1955: PUSH
1956: LD_INT 11
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
1963: LD_ADDR_OWVAR 30
1967: PUSH
1968: LD_INT 2
1970: PUSH
1971: LD_INT 1
1973: PUSH
1974: LD_INT 0
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1986: LD_ADDR_OWVAR 31
1990: PUSH
1991: LD_INT 4
1993: PUSH
1994: LD_INT 1
1996: PUSH
1997: LD_INT 1
1999: PUSH
2000: LD_INT 0
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: ST_TO_ADDR
// un = CreateHuman ;
2009: LD_ADDR_VAR 0 4
2013: PUSH
2014: CALL_OW 44
2018: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2019: LD_VAR 0 4
2023: PPUSH
2024: LD_INT 11
2026: PPUSH
2027: LD_INT 0
2029: PPUSH
2030: CALL_OW 49
// hc_class := 2 ;
2034: LD_ADDR_OWVAR 28
2038: PUSH
2039: LD_INT 2
2041: ST_TO_ADDR
// hc_sex := sex_male ;
2042: LD_ADDR_OWVAR 27
2046: PUSH
2047: LD_INT 1
2049: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2050: LD_ADDR_OWVAR 33
2054: PUSH
2055: LD_STRING SecondCharsGal
2057: ST_TO_ADDR
// hc_face_number := 50 ;
2058: LD_ADDR_OWVAR 34
2062: PUSH
2063: LD_INT 50
2065: ST_TO_ADDR
// hc_name := Frank Hughes ;
2066: LD_ADDR_OWVAR 26
2070: PUSH
2071: LD_STRING Frank Hughes
2073: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2074: LD_ADDR_OWVAR 29
2078: PUSH
2079: LD_INT 10
2081: PUSH
2082: LD_INT 10
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2089: LD_ADDR_OWVAR 30
2093: PUSH
2094: LD_INT 1
2096: PUSH
2097: LD_INT 2
2099: PUSH
2100: LD_INT 0
2102: PUSH
2103: LD_INT 0
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: ST_TO_ADDR
// hc_skills := [ 1 , 4 , 0 , 1 ] ;
2112: LD_ADDR_OWVAR 31
2116: PUSH
2117: LD_INT 1
2119: PUSH
2120: LD_INT 4
2122: PUSH
2123: LD_INT 0
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: ST_TO_ADDR
// un = CreateHuman ;
2135: LD_ADDR_VAR 0 4
2139: PUSH
2140: CALL_OW 44
2144: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2145: LD_VAR 0 4
2149: PPUSH
2150: LD_INT 11
2152: PPUSH
2153: LD_INT 0
2155: PPUSH
2156: CALL_OW 49
// hc_class := 1 ;
2160: LD_ADDR_OWVAR 28
2164: PUSH
2165: LD_INT 1
2167: ST_TO_ADDR
// hc_sex := sex_male ;
2168: LD_ADDR_OWVAR 27
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2176: LD_ADDR_OWVAR 33
2180: PUSH
2181: LD_STRING SecondCharsGal
2183: ST_TO_ADDR
// hc_face_number := 54 ;
2184: LD_ADDR_OWVAR 34
2188: PUSH
2189: LD_INT 54
2191: ST_TO_ADDR
// hc_name := Luigi Ghibellini ;
2192: LD_ADDR_OWVAR 26
2196: PUSH
2197: LD_STRING Luigi Ghibellini
2199: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2200: LD_ADDR_OWVAR 29
2204: PUSH
2205: LD_INT 11
2207: PUSH
2208: LD_INT 11
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 1 , 1 ] ;
2215: LD_ADDR_OWVAR 30
2219: PUSH
2220: LD_INT 1
2222: PUSH
2223: LD_INT 0
2225: PUSH
2226: LD_INT 1
2228: PUSH
2229: LD_INT 1
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 2 ] ;
2238: LD_ADDR_OWVAR 31
2242: PUSH
2243: LD_INT 2
2245: PUSH
2246: LD_INT 1
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: LD_INT 2
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: ST_TO_ADDR
// un = CreateHuman ;
2261: LD_ADDR_VAR 0 4
2265: PUSH
2266: CALL_OW 44
2270: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2271: LD_VAR 0 4
2275: PPUSH
2276: LD_INT 11
2278: PPUSH
2279: LD_INT 0
2281: PPUSH
2282: CALL_OW 49
// hc_class := 3 ;
2286: LD_ADDR_OWVAR 28
2290: PUSH
2291: LD_INT 3
2293: ST_TO_ADDR
// hc_sex := sex_male ;
2294: LD_ADDR_OWVAR 27
2298: PUSH
2299: LD_INT 1
2301: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2302: LD_ADDR_OWVAR 33
2306: PUSH
2307: LD_STRING AmGalRemake
2309: ST_TO_ADDR
// hc_face_number := 6 ;
2310: LD_ADDR_OWVAR 34
2314: PUSH
2315: LD_INT 6
2317: ST_TO_ADDR
// hc_name := Leon Carter ;
2318: LD_ADDR_OWVAR 26
2322: PUSH
2323: LD_STRING Leon Carter
2325: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2326: LD_ADDR_OWVAR 29
2330: PUSH
2331: LD_INT 10
2333: PUSH
2334: LD_INT 9
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 1 ] ;
2341: LD_ADDR_OWVAR 30
2345: PUSH
2346: LD_INT 0
2348: PUSH
2349: LD_INT 0
2351: PUSH
2352: LD_INT 2
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2364: LD_ADDR_OWVAR 31
2368: PUSH
2369: LD_INT 0
2371: PUSH
2372: LD_INT 2
2374: PUSH
2375: LD_INT 3
2377: PUSH
2378: LD_INT 1
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: ST_TO_ADDR
// un = CreateHuman ;
2387: LD_ADDR_VAR 0 4
2391: PUSH
2392: CALL_OW 44
2396: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2397: LD_VAR 0 4
2401: PPUSH
2402: LD_VAR 0 5
2406: PPUSH
2407: CALL_OW 52
// if count = 4 then
2411: LD_VAR 0 1
2415: PUSH
2416: LD_INT 4
2418: EQUAL
2419: IFFALSE 2547
// begin hc_class := 1 ;
2421: LD_ADDR_OWVAR 28
2425: PUSH
2426: LD_INT 1
2428: ST_TO_ADDR
// hc_sex := sex_male ;
2429: LD_ADDR_OWVAR 27
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2437: LD_ADDR_OWVAR 33
2441: PUSH
2442: LD_STRING SecondCharsGal
2444: ST_TO_ADDR
// hc_face_number := 34 ;
2445: LD_ADDR_OWVAR 34
2449: PUSH
2450: LD_INT 34
2452: ST_TO_ADDR
// hc_name := Ian Hill ;
2453: LD_ADDR_OWVAR 26
2457: PUSH
2458: LD_STRING Ian Hill
2460: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2461: LD_ADDR_OWVAR 29
2465: PUSH
2466: LD_INT 10
2468: PUSH
2469: LD_INT 12
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
2476: LD_ADDR_OWVAR 30
2480: PUSH
2481: LD_INT 3
2483: PUSH
2484: LD_INT 0
2486: PUSH
2487: LD_INT 0
2489: PUSH
2490: LD_INT 0
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
2499: LD_ADDR_OWVAR 31
2503: PUSH
2504: LD_INT 4
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: LD_INT 1
2512: PUSH
2513: LD_INT 0
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: ST_TO_ADDR
// un = CreateHuman ;
2522: LD_ADDR_VAR 0 4
2526: PUSH
2527: CALL_OW 44
2531: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2532: LD_VAR 0 4
2536: PPUSH
2537: LD_INT 11
2539: PPUSH
2540: LD_INT 0
2542: PPUSH
2543: CALL_OW 49
// end ; if count = 5 then
2547: LD_VAR 0 1
2551: PUSH
2552: LD_INT 5
2554: EQUAL
2555: IFFALSE 2809
// begin hc_class := 1 ;
2557: LD_ADDR_OWVAR 28
2561: PUSH
2562: LD_INT 1
2564: ST_TO_ADDR
// hc_sex := sex_male ;
2565: LD_ADDR_OWVAR 27
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2573: LD_ADDR_OWVAR 33
2577: PUSH
2578: LD_STRING SecondCharsGal
2580: ST_TO_ADDR
// hc_face_number := 34 ;
2581: LD_ADDR_OWVAR 34
2585: PUSH
2586: LD_INT 34
2588: ST_TO_ADDR
// hc_name := Ian Hill ;
2589: LD_ADDR_OWVAR 26
2593: PUSH
2594: LD_STRING Ian Hill
2596: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2597: LD_ADDR_OWVAR 29
2601: PUSH
2602: LD_INT 10
2604: PUSH
2605: LD_INT 12
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
2612: LD_ADDR_OWVAR 30
2616: PUSH
2617: LD_INT 3
2619: PUSH
2620: LD_INT 0
2622: PUSH
2623: LD_INT 0
2625: PUSH
2626: LD_INT 0
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
2635: LD_ADDR_OWVAR 31
2639: PUSH
2640: LD_INT 4
2642: PUSH
2643: LD_INT 1
2645: PUSH
2646: LD_INT 1
2648: PUSH
2649: LD_INT 0
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: ST_TO_ADDR
// un = CreateHuman ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: CALL_OW 44
2667: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2668: LD_VAR 0 4
2672: PPUSH
2673: LD_INT 11
2675: PPUSH
2676: LD_INT 0
2678: PPUSH
2679: CALL_OW 49
// hc_class := 1 ;
2683: LD_ADDR_OWVAR 28
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// hc_sex := sex_female ;
2691: LD_ADDR_OWVAR 27
2695: PUSH
2696: LD_INT 2
2698: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2699: LD_ADDR_OWVAR 33
2703: PUSH
2704: LD_STRING SecondCharsGal
2706: ST_TO_ADDR
// hc_face_number := 41 ;
2707: LD_ADDR_OWVAR 34
2711: PUSH
2712: LD_INT 41
2714: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2715: LD_ADDR_OWVAR 26
2719: PUSH
2720: LD_STRING Kate Wadsworth
2722: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2723: LD_ADDR_OWVAR 29
2727: PUSH
2728: LD_INT 9
2730: PUSH
2731: LD_INT 9
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2738: LD_ADDR_OWVAR 30
2742: PUSH
2743: LD_INT 1
2745: PUSH
2746: LD_INT 2
2748: PUSH
2749: LD_INT 0
2751: PUSH
2752: LD_INT 0
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2761: LD_ADDR_OWVAR 31
2765: PUSH
2766: LD_INT 2
2768: PUSH
2769: LD_INT 3
2771: PUSH
2772: LD_INT 1
2774: PUSH
2775: LD_INT 0
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: LIST
2782: LIST
2783: ST_TO_ADDR
// un = CreateHuman ;
2784: LD_ADDR_VAR 0 4
2788: PUSH
2789: CALL_OW 44
2793: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_INT 11
2801: PPUSH
2802: LD_INT 0
2804: PPUSH
2805: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2809: LD_INT 11
2811: PPUSH
2812: LD_INT 22
2814: PUSH
2815: LD_INT 1
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 21
2824: PUSH
2825: LD_INT 1
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 26
2834: PUSH
2835: LD_INT 1
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: LIST
2846: PPUSH
2847: CALL_OW 70
2851: PUSH
2852: LD_INT 1
2854: ARRAY
2855: PPUSH
2856: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2860: LD_INT 11
2862: PPUSH
2863: LD_INT 22
2865: PUSH
2866: LD_INT 1
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PUSH
2873: LD_INT 21
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 26
2885: PUSH
2886: LD_INT 1
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: LIST
2897: PPUSH
2898: CALL_OW 70
2902: PUSH
2903: LD_INT 1
2905: ARRAY
2906: PPUSH
2907: LD_STRING D6-Sol3-1
2909: PPUSH
2910: CALL_OW 88
// end ; end_of_file
2914: LD_VAR 0 2
2918: RET
// export function PrepareRussianCommander ; begin
2919: LD_INT 0
2921: PPUSH
// uc_side = 3 ;
2922: LD_ADDR_OWVAR 20
2926: PUSH
2927: LD_INT 3
2929: ST_TO_ADDR
// uc_nation = 3 ;
2930: LD_ADDR_OWVAR 21
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2938: LD_ADDR_EXP 15
2942: PUSH
2943: LD_STRING Stolypin
2945: PPUSH
2946: CALL_OW 25
2950: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2951: LD_EXP 15
2955: PPUSH
2956: LD_INT 21
2958: PPUSH
2959: CALL_OW 52
// end ;
2963: LD_VAR 0 1
2967: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2968: LD_INT 0
2970: PPUSH
2971: PPUSH
2972: PPUSH
2973: PPUSH
// if Difficulty > 1 then
2974: LD_OWVAR 67
2978: PUSH
2979: LD_INT 1
2981: GREATER
2982: IFFALSE 3092
// begin uc_side := 3 ;
2984: LD_ADDR_OWVAR 20
2988: PUSH
2989: LD_INT 3
2991: ST_TO_ADDR
// uc_nation := 3 ;
2992: LD_ADDR_OWVAR 21
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// InitHc_All ( ) ;
3000: CALL_OW 584
// InitBc ;
3004: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3008: LD_INT 0
3010: PPUSH
3011: LD_INT 1
3013: PPUSH
3014: LD_INT 4
3016: PPUSH
3017: CALL_OW 380
// bc_type := b_breastwork ;
3021: LD_ADDR_OWVAR 42
3025: PUSH
3026: LD_INT 31
3028: ST_TO_ADDR
// bc_level := 4 ;
3029: LD_ADDR_OWVAR 43
3033: PUSH
3034: LD_INT 4
3036: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3037: LD_ADDR_VAR 0 3
3041: PUSH
3042: LD_INT 100
3044: PPUSH
3045: LD_INT 58
3047: PPUSH
3048: LD_INT 2
3050: PPUSH
3051: CALL_OW 47
3055: ST_TO_ADDR
// un := CreateHuman ;
3056: LD_ADDR_VAR 0 4
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3066: LD_VAR 0 4
3070: PPUSH
3071: LD_INT 5
3073: PPUSH
3074: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3078: LD_VAR 0 4
3082: PPUSH
3083: LD_VAR 0 3
3087: PPUSH
3088: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3092: LD_INT 3
3094: PPUSH
3095: LD_INT 3
3097: PPUSH
3098: LD_INT 22
3100: PPUSH
3101: LD_EXP 16
3105: PPUSH
3106: LD_EXP 17
3110: PPUSH
3111: CALL_OW 12
3115: PPUSH
3116: LD_INT 1
3118: PPUSH
3119: LD_INT 3
3121: PUSH
3122: LD_INT 4
3124: PUSH
3125: LD_INT 5
3127: PUSH
3128: LD_INT 6
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: PUSH
3137: LD_OWVAR 67
3141: ARRAY
3142: PPUSH
3143: CALL 4372 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3147: LD_INT 3
3149: PPUSH
3150: LD_INT 3
3152: PPUSH
3153: LD_INT 21
3155: PPUSH
3156: LD_EXP 16
3160: PPUSH
3161: LD_EXP 17
3165: PPUSH
3166: CALL_OW 12
3170: PPUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_INT 3
3176: PPUSH
3177: CALL 4372 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3181: LD_INT 3
3183: PPUSH
3184: LD_INT 3
3186: PPUSH
3187: LD_INT 1
3189: PPUSH
3190: LD_EXP 16
3194: PPUSH
3195: LD_EXP 17
3199: PPUSH
3200: CALL_OW 12
3204: PPUSH
3205: LD_INT 4
3207: PPUSH
3208: LD_INT 3
3210: PPUSH
3211: CALL 4372 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3215: LD_INT 3
3217: PPUSH
3218: LD_INT 3
3220: PPUSH
3221: LD_INT 24
3223: PPUSH
3224: LD_EXP 16
3228: PPUSH
3229: LD_EXP 17
3233: PPUSH
3234: CALL_OW 12
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: LD_INT 5
3244: PPUSH
3245: CALL 4372 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3249: LD_ADDR_VAR 0 2
3253: PUSH
3254: LD_INT 22
3256: PUSH
3257: LD_INT 3
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: PUSH
3264: LD_INT 30
3266: PUSH
3267: LD_INT 32
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PPUSH
3278: CALL_OW 69
3282: PUSH
3283: FOR_IN
3284: IFFALSE 3324
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3286: LD_INT 3
3288: PPUSH
3289: LD_INT 3
3291: PPUSH
3292: LD_VAR 0 2
3296: PPUSH
3297: LD_EXP 16
3301: PPUSH
3302: LD_EXP 17
3306: PPUSH
3307: CALL_OW 12
3311: PPUSH
3312: LD_INT 1
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: CALL 4372 0 6
3322: GO 3283
3324: POP
3325: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3326: LD_ADDR_VAR 0 2
3330: PUSH
3331: LD_INT 22
3333: PUSH
3334: LD_INT 3
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PUSH
3341: LD_INT 30
3343: PUSH
3344: LD_INT 31
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: PPUSH
3355: CALL_OW 69
3359: PUSH
3360: FOR_IN
3361: IFFALSE 3389
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3363: LD_EXP 16
3367: PPUSH
3368: LD_EXP 17
3372: PPUSH
3373: CALL_OW 12
3377: PPUSH
3378: LD_VAR 0 2
3382: PPUSH
3383: CALL 4481 0 2
3387: GO 3360
3389: POP
3390: POP
// end ;
3391: LD_VAR 0 1
3395: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3396: LD_INT 0
3398: PPUSH
3399: PPUSH
3400: PPUSH
3401: PPUSH
// uc_side = 6 ;
3402: LD_ADDR_OWVAR 20
3406: PUSH
3407: LD_INT 6
3409: ST_TO_ADDR
// uc_nation = 3 ;
3410: LD_ADDR_OWVAR 21
3414: PUSH
3415: LD_INT 3
3417: ST_TO_ADDR
// InitHC_All ( ) ;
3418: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3422: LD_ADDR_VAR 0 2
3426: PUSH
3427: DOUBLE
3428: LD_INT 1
3430: DEC
3431: ST_TO_ADDR
3432: LD_INT 1
3434: PUSH
3435: LD_INT 2
3437: PUSH
3438: LD_INT 2
3440: PUSH
3441: LD_INT 3
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: PUSH
3450: LD_OWVAR 67
3454: ARRAY
3455: PUSH
3456: FOR_TO
3457: IFFALSE 3625
// begin vc_engine = 1 ;
3459: LD_ADDR_OWVAR 39
3463: PUSH
3464: LD_INT 1
3466: ST_TO_ADDR
// vc_control = 1 ;
3467: LD_ADDR_OWVAR 38
3471: PUSH
3472: LD_INT 1
3474: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3475: LD_ADDR_OWVAR 40
3479: PUSH
3480: LD_INT 42
3482: PUSH
3483: LD_INT 42
3485: PUSH
3486: LD_INT 43
3488: PUSH
3489: LD_INT 43
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: PUSH
3498: LD_OWVAR 67
3502: ARRAY
3503: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3504: LD_ADDR_OWVAR 37
3508: PUSH
3509: LD_INT 21
3511: PUSH
3512: LD_INT 22
3514: PUSH
3515: LD_INT 22
3517: PUSH
3518: LD_INT 22
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_OWVAR 67
3531: ARRAY
3532: ST_TO_ADDR
// veh = CreateVehicle ;
3533: LD_ADDR_VAR 0 3
3537: PUSH
3538: CALL_OW 45
3542: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3543: LD_VAR 0 3
3547: PPUSH
3548: LD_INT 3
3550: PPUSH
3551: LD_INT 0
3553: PPUSH
3554: CALL_OW 49
// hc_gallery =  ;
3558: LD_ADDR_OWVAR 33
3562: PUSH
3563: LD_STRING 
3565: ST_TO_ADDR
// hc_name =  ;
3566: LD_ADDR_OWVAR 26
3570: PUSH
3571: LD_STRING 
3573: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3574: LD_INT 0
3576: PPUSH
3577: LD_INT 3
3579: PPUSH
3580: LD_EXP 16
3584: PPUSH
3585: LD_EXP 17
3589: PPUSH
3590: CALL_OW 12
3594: PPUSH
3595: CALL_OW 380
// un = CreateHuman ;
3599: LD_ADDR_VAR 0 4
3603: PUSH
3604: CALL_OW 44
3608: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3609: LD_VAR 0 4
3613: PPUSH
3614: LD_VAR 0 3
3618: PPUSH
3619: CALL_OW 52
// end ;
3623: GO 3456
3625: POP
3626: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3627: LD_INT 0
3629: PPUSH
3630: LD_INT 2
3632: PPUSH
3633: LD_EXP 16
3637: PPUSH
3638: LD_EXP 17
3642: PPUSH
3643: CALL_OW 12
3647: PUSH
3648: LD_INT 2
3650: PLUS
3651: PPUSH
3652: CALL_OW 380
// un = CreateHuman ;
3656: LD_ADDR_VAR 0 4
3660: PUSH
3661: CALL_OW 44
3665: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3666: LD_VAR 0 4
3670: PPUSH
3671: LD_INT 3
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3681: LD_INT 0
3683: PPUSH
3684: LD_INT 4
3686: PPUSH
3687: LD_EXP 16
3691: PPUSH
3692: LD_EXP 17
3696: PPUSH
3697: CALL_OW 12
3701: PUSH
3702: LD_INT 2
3704: PLUS
3705: PPUSH
3706: CALL_OW 380
// un = CreateHuman ;
3710: LD_ADDR_VAR 0 4
3714: PUSH
3715: CALL_OW 44
3719: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3720: LD_VAR 0 4
3724: PPUSH
3725: LD_INT 3
3727: PPUSH
3728: LD_INT 0
3730: PPUSH
3731: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3735: LD_ADDR_VAR 0 2
3739: PUSH
3740: DOUBLE
3741: LD_INT 1
3743: DEC
3744: ST_TO_ADDR
3745: LD_INT 2
3747: PUSH
3748: LD_INT 3
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 4
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: PUSH
3763: LD_OWVAR 67
3767: ARRAY
3768: PUSH
3769: LD_INT 1
3771: PPUSH
3772: LD_INT 3
3774: PPUSH
3775: CALL_OW 12
3779: PLUS
3780: PUSH
3781: FOR_TO
3782: IFFALSE 3852
// begin hc_gallery =  ;
3784: LD_ADDR_OWVAR 33
3788: PUSH
3789: LD_STRING 
3791: ST_TO_ADDR
// hc_name =  ;
3792: LD_ADDR_OWVAR 26
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3800: LD_INT 0
3802: PPUSH
3803: LD_INT 1
3805: PPUSH
3806: LD_EXP 16
3810: PPUSH
3811: LD_EXP 17
3815: PPUSH
3816: CALL_OW 12
3820: PPUSH
3821: CALL_OW 380
// un = CreateHuman ;
3825: LD_ADDR_VAR 0 4
3829: PUSH
3830: CALL_OW 44
3834: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3835: LD_VAR 0 4
3839: PPUSH
3840: LD_INT 3
3842: PPUSH
3843: LD_INT 0
3845: PPUSH
3846: CALL_OW 49
// end ;
3850: GO 3781
3852: POP
3853: POP
// vc_engine = 1 ;
3854: LD_ADDR_OWVAR 39
3858: PUSH
3859: LD_INT 1
3861: ST_TO_ADDR
// vc_control = 1 ;
3862: LD_ADDR_OWVAR 38
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// vc_weapon = 51 ;
3870: LD_ADDR_OWVAR 40
3874: PUSH
3875: LD_INT 51
3877: ST_TO_ADDR
// vc_chassis = 22 ;
3878: LD_ADDR_OWVAR 37
3882: PUSH
3883: LD_INT 22
3885: ST_TO_ADDR
// veh = CreateVehicle ;
3886: LD_ADDR_VAR 0 3
3890: PUSH
3891: CALL_OW 45
3895: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3896: LD_VAR 0 3
3900: PPUSH
3901: LD_INT 3
3903: PPUSH
3904: LD_INT 0
3906: PPUSH
3907: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3911: LD_VAR 0 3
3915: PPUSH
3916: LD_INT 1
3918: PPUSH
3919: LD_INT 100
3921: PPUSH
3922: CALL_OW 290
// hc_gallery =  ;
3926: LD_ADDR_OWVAR 33
3930: PUSH
3931: LD_STRING 
3933: ST_TO_ADDR
// hc_name =  ;
3934: LD_ADDR_OWVAR 26
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3942: LD_INT 0
3944: PPUSH
3945: LD_INT 3
3947: PPUSH
3948: LD_EXP 16
3952: PPUSH
3953: LD_EXP 17
3957: PPUSH
3958: CALL_OW 12
3962: PPUSH
3963: CALL_OW 380
// un = CreateHuman ;
3967: LD_ADDR_VAR 0 4
3971: PUSH
3972: CALL_OW 44
3976: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3977: LD_VAR 0 4
3981: PPUSH
3982: LD_VAR 0 3
3986: PPUSH
3987: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3991: LD_ADDR_VAR 0 2
3995: PUSH
3996: LD_INT 22
3998: PUSH
3999: LD_INT 6
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PUSH
4006: LD_INT 1
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: LD_INT 25
4014: PUSH
4015: LD_INT 2
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 3
4028: PUSH
4029: LD_INT 25
4031: PUSH
4032: LD_INT 4
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: PPUSH
4052: CALL_OW 69
4056: PUSH
4057: FOR_IN
4058: IFFALSE 4077
// ComAgressiveMove ( i , 45 , 46 ) ;
4060: LD_VAR 0 2
4064: PPUSH
4065: LD_INT 45
4067: PPUSH
4068: LD_INT 46
4070: PPUSH
4071: CALL_OW 114
4075: GO 4057
4077: POP
4078: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4079: LD_ADDR_VAR 0 2
4083: PUSH
4084: LD_INT 22
4086: PUSH
4087: LD_INT 6
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: PUSH
4094: LD_INT 25
4096: PUSH
4097: LD_INT 2
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 69
4112: PUSH
4113: FOR_IN
4114: IFFALSE 4145
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4116: LD_ADDR_EXP 21
4120: PUSH
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_INT 0
4128: PPUSH
4129: LD_INT 48
4131: PPUSH
4132: LD_INT 55
4134: PPUSH
4135: LD_INT 5
4137: PPUSH
4138: CALL_OW 145
4142: ST_TO_ADDR
4143: GO 4113
4145: POP
4146: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4147: LD_ADDR_VAR 0 2
4151: PUSH
4152: LD_INT 22
4154: PUSH
4155: LD_INT 6
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 25
4164: PUSH
4165: LD_INT 4
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 69
4180: PUSH
4181: FOR_IN
4182: IFFALSE 4201
// ComMoveXY ( i , 39 , 55 ) ;
4184: LD_VAR 0 2
4188: PPUSH
4189: LD_INT 39
4191: PPUSH
4192: LD_INT 55
4194: PPUSH
4195: CALL_OW 111
4199: GO 4181
4201: POP
4202: POP
// end ;
4203: LD_VAR 0 1
4207: RET
// export firstAttackGroup ; export function PrepareFirstAttack ; var i , un ; begin
4208: LD_INT 0
4210: PPUSH
4211: PPUSH
4212: PPUSH
// uc_side := 3 ;
4213: LD_ADDR_OWVAR 20
4217: PUSH
4218: LD_INT 3
4220: ST_TO_ADDR
// uc_nation := 3 ;
4221: LD_ADDR_OWVAR 21
4225: PUSH
4226: LD_INT 3
4228: ST_TO_ADDR
// firstAttackGroup := [ ] ;
4229: LD_ADDR_EXP 51
4233: PUSH
4234: EMPTY
4235: ST_TO_ADDR
// for i := 1 to 4 do
4236: LD_ADDR_VAR 0 2
4240: PUSH
4241: DOUBLE
4242: LD_INT 1
4244: DEC
4245: ST_TO_ADDR
4246: LD_INT 4
4248: PUSH
4249: FOR_TO
4250: IFFALSE 4357
// begin InitHC_All ( ) ;
4252: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4256: LD_INT 0
4258: PPUSH
4259: LD_INT 1
4261: PPUSH
4262: LD_EXP 16
4266: PPUSH
4267: LD_EXP 17
4271: PPUSH
4272: CALL_OW 12
4276: PPUSH
4277: CALL_OW 380
// un := CreateHuman ;
4281: LD_ADDR_VAR 0 3
4285: PUSH
4286: CALL_OW 44
4290: ST_TO_ADDR
// firstAttackGroup := Join ( firstAttackGroup , un ) ;
4291: LD_ADDR_EXP 51
4295: PUSH
4296: LD_EXP 51
4300: PPUSH
4301: LD_VAR 0 3
4305: PPUSH
4306: CALL 79352 0 2
4310: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4311: LD_VAR 0 3
4315: PPUSH
4316: LD_INT 4
4318: PPUSH
4319: LD_INT 0
4321: PPUSH
4322: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4326: LD_VAR 0 3
4330: PPUSH
4331: LD_EXP 1
4335: PPUSH
4336: CALL_OW 250
4340: PPUSH
4341: LD_EXP 1
4345: PPUSH
4346: CALL_OW 251
4350: PPUSH
4351: CALL_OW 114
// end ;
4355: GO 4249
4357: POP
4358: POP
// firstRussianAttack := 1 ;
4359: LD_ADDR_EXP 23
4363: PUSH
4364: LD_INT 1
4366: ST_TO_ADDR
// end ; end_of_file
4367: LD_VAR 0 1
4371: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4372: LD_INT 0
4374: PPUSH
4375: PPUSH
4376: PPUSH
// for i = 1 to count do
4377: LD_ADDR_VAR 0 8
4381: PUSH
4382: DOUBLE
4383: LD_INT 1
4385: DEC
4386: ST_TO_ADDR
4387: LD_VAR 0 6
4391: PUSH
4392: FOR_TO
4393: IFFALSE 4474
// begin uc_side = side ;
4395: LD_ADDR_OWVAR 20
4399: PUSH
4400: LD_VAR 0 1
4404: ST_TO_ADDR
// uc_nation = nation ;
4405: LD_ADDR_OWVAR 21
4409: PUSH
4410: LD_VAR 0 2
4414: ST_TO_ADDR
// hc_gallery =  ;
4415: LD_ADDR_OWVAR 33
4419: PUSH
4420: LD_STRING 
4422: ST_TO_ADDR
// hc_name =  ;
4423: LD_ADDR_OWVAR 26
4427: PUSH
4428: LD_STRING 
4430: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4431: LD_INT 0
4433: PPUSH
4434: LD_VAR 0 5
4438: PPUSH
4439: LD_VAR 0 4
4443: PPUSH
4444: CALL_OW 380
// un = CreateHuman ;
4448: LD_ADDR_VAR 0 9
4452: PUSH
4453: CALL_OW 44
4457: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4458: LD_VAR 0 9
4462: PPUSH
4463: LD_VAR 0 3
4467: PPUSH
4468: CALL_OW 52
// end ;
4472: GO 4392
4474: POP
4475: POP
// end ;
4476: LD_VAR 0 7
4480: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4481: LD_INT 0
4483: PPUSH
4484: PPUSH
4485: PPUSH
// uc_side := GetSide ( b ) ;
4486: LD_ADDR_OWVAR 20
4490: PUSH
4491: LD_VAR 0 2
4495: PPUSH
4496: CALL_OW 255
4500: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4501: LD_ADDR_OWVAR 21
4505: PUSH
4506: LD_VAR 0 2
4510: PPUSH
4511: CALL_OW 248
4515: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4516: LD_INT 0
4518: PPUSH
4519: LD_INT 1
4521: PPUSH
4522: LD_VAR 0 1
4526: PPUSH
4527: CALL_OW 380
// un = CreateHuman ;
4531: LD_ADDR_VAR 0 4
4535: PUSH
4536: CALL_OW 44
4540: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4541: LD_ADDR_VAR 0 5
4545: PUSH
4546: LD_VAR 0 2
4550: PPUSH
4551: CALL_OW 254
4555: PUSH
4556: LD_INT 3
4558: MINUS
4559: ST_TO_ADDR
// if dir < 0 then
4560: LD_VAR 0 5
4564: PUSH
4565: LD_INT 0
4567: LESS
4568: IFFALSE 4584
// dir := 6 + dir ;
4570: LD_ADDR_VAR 0 5
4574: PUSH
4575: LD_INT 6
4577: PUSH
4578: LD_VAR 0 5
4582: PLUS
4583: ST_TO_ADDR
// SetDir ( un , dir ) ;
4584: LD_VAR 0 4
4588: PPUSH
4589: LD_VAR 0 5
4593: PPUSH
4594: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4598: LD_VAR 0 4
4602: PPUSH
4603: LD_VAR 0 2
4607: PPUSH
4608: CALL_OW 52
// end ;
4612: LD_VAR 0 3
4616: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4617: LD_INT 0
4619: PPUSH
4620: PPUSH
4621: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4622: LD_ADDR_VAR 0 6
4626: PUSH
4627: LD_VAR 0 1
4631: PUSH
4632: LD_INT 1
4634: PPUSH
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 12
4644: ARRAY
4645: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4646: LD_VAR 0 6
4650: PPUSH
4651: CALL_OW 258
4655: PUSH
4656: LD_INT 1
4658: EQUAL
4659: IFFALSE 4677
// Say ( speaker , dialogMID ) else
4661: LD_VAR 0 6
4665: PPUSH
4666: LD_VAR 0 2
4670: PPUSH
4671: CALL_OW 88
4675: GO 4691
// Say ( speaker , dialogFID ) ;
4677: LD_VAR 0 6
4681: PPUSH
4682: LD_VAR 0 3
4686: PPUSH
4687: CALL_OW 88
// result := speaker ;
4691: LD_ADDR_VAR 0 4
4695: PUSH
4696: LD_VAR 0 6
4700: ST_TO_ADDR
// end ;
4701: LD_VAR 0 4
4705: RET
// export function PrepareDifficulty ; var tmp ; begin
4706: LD_INT 0
4708: PPUSH
4709: PPUSH
// if Difficulty = 1 then
4710: LD_OWVAR 67
4714: PUSH
4715: LD_INT 1
4717: EQUAL
4718: IFFALSE 4736
// begin RuSoldMinLevel = 1 ;
4720: LD_ADDR_EXP 16
4724: PUSH
4725: LD_INT 1
4727: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4728: LD_ADDR_EXP 17
4732: PUSH
4733: LD_INT 2
4735: ST_TO_ADDR
// end ; if Difficulty = 2 then
4736: LD_OWVAR 67
4740: PUSH
4741: LD_INT 2
4743: EQUAL
4744: IFFALSE 4845
// begin RuSoldMinLevel = 2 ;
4746: LD_ADDR_EXP 16
4750: PUSH
4751: LD_INT 2
4753: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4754: LD_ADDR_EXP 17
4758: PUSH
4759: LD_INT 3
4761: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4762: LD_INT 23
4764: PPUSH
4765: CALL_OW 64
// uc_nation = 3 ;
4769: LD_ADDR_OWVAR 21
4773: PUSH
4774: LD_INT 3
4776: ST_TO_ADDR
// uc_side = 3 ;
4777: LD_ADDR_OWVAR 20
4781: PUSH
4782: LD_INT 3
4784: ST_TO_ADDR
// bc_level = 5 ;
4785: LD_ADDR_OWVAR 43
4789: PUSH
4790: LD_INT 5
4792: ST_TO_ADDR
// bc_type = 32 ;
4793: LD_ADDR_OWVAR 42
4797: PUSH
4798: LD_INT 32
4800: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4801: LD_ADDR_VAR 0 2
4805: PUSH
4806: LD_INT 76
4808: PPUSH
4809: LD_INT 91
4811: PPUSH
4812: LD_INT 2
4814: PPUSH
4815: CALL_OW 47
4819: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4820: LD_VAR 0 2
4824: PPUSH
4825: LD_INT 43
4827: PPUSH
4828: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4832: LD_INT 51
4834: PPUSH
4835: LD_INT 3
4837: PPUSH
4838: LD_INT 1
4840: PPUSH
4841: CALL_OW 322
// end ; if Difficulty >= 3 then
4845: LD_OWVAR 67
4849: PUSH
4850: LD_INT 3
4852: GREATEREQUAL
4853: IFFALSE 5017
// begin RuSoldMinLevel = Difficulty ;
4855: LD_ADDR_EXP 16
4859: PUSH
4860: LD_OWVAR 67
4864: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4865: LD_ADDR_EXP 17
4869: PUSH
4870: LD_INT 4
4872: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4873: LD_INT 26
4875: PPUSH
4876: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4880: LD_INT 23
4882: PPUSH
4883: CALL_OW 64
// uc_nation = 3 ;
4887: LD_ADDR_OWVAR 21
4891: PUSH
4892: LD_INT 3
4894: ST_TO_ADDR
// uc_side = 3 ;
4895: LD_ADDR_OWVAR 20
4899: PUSH
4900: LD_INT 3
4902: ST_TO_ADDR
// bc_level = 5 ;
4903: LD_ADDR_OWVAR 43
4907: PUSH
4908: LD_INT 5
4910: ST_TO_ADDR
// bc_type = 32 ;
4911: LD_ADDR_OWVAR 42
4915: PUSH
4916: LD_INT 32
4918: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4919: LD_ADDR_VAR 0 2
4923: PUSH
4924: LD_INT 76
4926: PPUSH
4927: LD_INT 91
4929: PPUSH
4930: LD_INT 2
4932: PPUSH
4933: CALL_OW 47
4937: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4938: LD_VAR 0 2
4942: PPUSH
4943: LD_INT 44
4945: PPUSH
4946: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4950: LD_ADDR_VAR 0 2
4954: PUSH
4955: LD_INT 83
4957: PPUSH
4958: LD_INT 84
4960: PPUSH
4961: LD_INT 2
4963: PPUSH
4964: CALL_OW 47
4968: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4969: LD_VAR 0 2
4973: PPUSH
4974: LD_INT 43
4976: PPUSH
4977: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4981: LD_INT 51
4983: PPUSH
4984: LD_INT 3
4986: PPUSH
4987: LD_INT 1
4989: PPUSH
4990: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4994: LD_INT 52
4996: PPUSH
4997: LD_INT 3
4999: PPUSH
5000: LD_INT 1
5002: PPUSH
5003: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
5007: LD_INT 25
5009: PPUSH
5010: LD_INT 44
5012: PPUSH
5013: CALL_OW 431
// end ; end ;
5017: LD_VAR 0 1
5021: RET
// export function EnergyDialog ; begin
5022: LD_INT 0
5024: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5025: LD_INT 46
5027: PPUSH
5028: LD_INT 1
5030: PPUSH
5031: CALL_OW 321
5035: PUSH
5036: LD_INT 1
5038: EQUAL
5039: IFFALSE 5057
5041: PUSH
5042: LD_INT 35
5044: PPUSH
5045: LD_INT 1
5047: PPUSH
5048: CALL_OW 321
5052: PUSH
5053: LD_INT 1
5055: EQUAL
5056: AND
5057: IFFALSE 5081
// begin Say ( JMM , D9c-JMM-1 ) ;
5059: LD_EXP 1
5063: PPUSH
5064: LD_STRING D9c-JMM-1
5066: PPUSH
5067: CALL_OW 88
// energyVDialog = 1 ;
5071: LD_ADDR_EXP 33
5075: PUSH
5076: LD_INT 1
5078: ST_TO_ADDR
// end else
5079: GO 5243
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5081: LD_INT 35
5083: PPUSH
5084: LD_INT 1
5086: PPUSH
5087: CALL_OW 321
5091: PUSH
5092: LD_INT 2
5094: EQUAL
5095: IFFALSE 5107
5097: PUSH
5098: LD_EXP 33
5102: PUSH
5103: LD_INT 0
5105: EQUAL
5106: AND
5107: IFFALSE 5129
// begin Say ( JMM , D9c-JMM-1a ) ;
5109: LD_EXP 1
5113: PPUSH
5114: LD_STRING D9c-JMM-1a
5116: PPUSH
5117: CALL_OW 88
// energyVDialog = 1 ;
5121: LD_ADDR_EXP 33
5125: PUSH
5126: LD_INT 1
5128: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5129: LD_INT 46
5131: PPUSH
5132: LD_INT 1
5134: PPUSH
5135: CALL_OW 321
5139: PUSH
5140: LD_INT 2
5142: EQUAL
5143: IFFALSE 5155
5145: PUSH
5146: LD_EXP 33
5150: PUSH
5151: LD_INT 0
5153: EQUAL
5154: AND
5155: IFFALSE 5177
// begin Say ( JMM , D9c-JMM-1b ) ;
5157: LD_EXP 1
5161: PPUSH
5162: LD_STRING D9c-JMM-1b
5164: PPUSH
5165: CALL_OW 88
// energyVDialog = 1 ;
5169: LD_ADDR_EXP 33
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5177: LD_INT 46
5179: PPUSH
5180: LD_INT 1
5182: PPUSH
5183: CALL_OW 321
5187: PUSH
5188: LD_INT 2
5190: EQUAL
5191: IFFALSE 5209
5193: PUSH
5194: LD_INT 21
5196: PPUSH
5197: LD_INT 1
5199: PPUSH
5200: CALL_OW 321
5204: PUSH
5205: LD_INT 2
5207: EQUAL
5208: AND
5209: IFFALSE 5221
5211: PUSH
5212: LD_EXP 33
5216: PUSH
5217: LD_INT 0
5219: EQUAL
5220: AND
5221: IFFALSE 5243
// begin Say ( JMM , D9c-JMM-1c ) ;
5223: LD_EXP 1
5227: PPUSH
5228: LD_STRING D9c-JMM-1c
5230: PPUSH
5231: CALL_OW 88
// energyVDialog = 1 ;
5235: LD_ADDR_EXP 33
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// end ; end ; end ;
5243: LD_VAR 0 1
5247: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5248: LD_INT 0
5250: PPUSH
5251: PPUSH
5252: PPUSH
5253: PPUSH
5254: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5255: LD_VAR 0 1
5259: NOT
5260: IFTRUE 5277
5262: PUSH
5263: LD_VAR 0 1
5267: PPUSH
5268: CALL_OW 256
5272: PUSH
5273: LD_INT 250
5275: LESS
5276: OR
5277: IFTRUE 5307
5279: PUSH
5280: LD_VAR 0 1
5284: PPUSH
5285: CALL_OW 314
5289: IFFALSE 5306
5291: PUSH
5292: LD_VAR 0 1
5296: PPUSH
5297: CALL_OW 261
5301: PUSH
5302: LD_INT 20
5304: GREATER
5305: AND
5306: OR
5307: IFFALSE 5311
// exit ;
5309: GO 5678
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5311: LD_VAR 0 1
5315: PPUSH
5316: CALL_OW 261
5320: PUSH
5321: LD_INT 20
5323: LESS
5324: IFFALSE 5342
5326: PUSH
5327: LD_VAR 0 1
5331: PPUSH
5332: CALL_OW 110
5336: PUSH
5337: LD_INT 21
5339: EQUAL
5340: NOT
5341: AND
5342: IFFALSE 5369
// begin ComStop ( bulldozer ) ;
5344: LD_VAR 0 1
5348: PPUSH
5349: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5353: LD_VAR 0 1
5357: PPUSH
5358: LD_INT 21
5360: PPUSH
5361: CALL_OW 109
// exit ;
5365: GO 5678
// end else
5367: GO 5396
// if GetFuel ( bulldozer ) > 20 then
5369: LD_VAR 0 1
5373: PPUSH
5374: CALL_OW 261
5378: PUSH
5379: LD_INT 20
5381: GREATER
5382: IFFALSE 5396
// SetTag ( bulldozer , 0 ) ;
5384: LD_VAR 0 1
5388: PPUSH
5389: LD_INT 0
5391: PPUSH
5392: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5396: LD_ADDR_VAR 0 5
5400: PUSH
5401: LD_VAR 0 2
5405: PPUSH
5406: CALL_OW 353
5410: ST_TO_ADDR
// tmp := [ ] ;
5411: LD_ADDR_VAR 0 6
5415: PUSH
5416: EMPTY
5417: ST_TO_ADDR
// for i = 1 to list do
5418: LD_ADDR_VAR 0 4
5422: PUSH
5423: DOUBLE
5424: LD_INT 1
5426: DEC
5427: ST_TO_ADDR
5428: LD_VAR 0 5
5432: PUSH
5433: FOR_TO
5434: IFFALSE 5532
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5436: LD_VAR 0 5
5440: PUSH
5441: LD_VAR 0 4
5445: ARRAY
5446: PUSH
5447: LD_INT 1
5449: ARRAY
5450: PPUSH
5451: LD_VAR 0 5
5455: PUSH
5456: LD_VAR 0 4
5460: ARRAY
5461: PUSH
5462: LD_INT 2
5464: ARRAY
5465: PPUSH
5466: CALL_OW 554
5470: IFFALSE 5530
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5472: LD_ADDR_VAR 0 6
5476: PUSH
5477: LD_VAR 0 6
5481: PPUSH
5482: LD_VAR 0 6
5486: PUSH
5487: LD_INT 1
5489: PLUS
5490: PPUSH
5491: LD_VAR 0 5
5495: PUSH
5496: LD_VAR 0 4
5500: ARRAY
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PUSH
5506: LD_VAR 0 5
5510: PUSH
5511: LD_VAR 0 4
5515: ARRAY
5516: PUSH
5517: LD_INT 2
5519: ARRAY
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PPUSH
5525: CALL_OW 1
5529: ST_TO_ADDR
// end ;
5530: GO 5433
5532: POP
5533: POP
// ComStop ( bulldozer ) ;
5534: LD_VAR 0 1
5538: PPUSH
5539: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5543: LD_ADDR_VAR 0 7
5547: PUSH
5548: LD_VAR 0 1
5552: PPUSH
5553: CALL_OW 250
5557: PUSH
5558: LD_VAR 0 1
5562: PPUSH
5563: CALL_OW 251
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: ST_TO_ADDR
// for i = tmp downto 1 do
5572: LD_ADDR_VAR 0 4
5576: PUSH
5577: DOUBLE
5578: LD_VAR 0 6
5582: INC
5583: ST_TO_ADDR
5584: LD_INT 1
5586: PUSH
5587: FOR_DOWNTO
5588: IFFALSE 5676
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5590: LD_ADDR_VAR 0 7
5594: PUSH
5595: LD_VAR 0 7
5599: PUSH
5600: LD_INT 1
5602: ARRAY
5603: PPUSH
5604: LD_VAR 0 7
5608: PUSH
5609: LD_INT 2
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 6
5617: PPUSH
5618: CALL 5785 0 3
5622: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5623: LD_VAR 0 1
5627: PPUSH
5628: LD_VAR 0 7
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: LD_VAR 0 7
5641: PUSH
5642: LD_INT 2
5644: ARRAY
5645: PPUSH
5646: CALL 5683 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5650: LD_ADDR_VAR 0 6
5654: PUSH
5655: LD_VAR 0 6
5659: PPUSH
5660: LD_VAR 0 7
5664: PUSH
5665: LD_INT 3
5667: ARRAY
5668: PPUSH
5669: CALL_OW 3
5673: ST_TO_ADDR
// end ;
5674: GO 5587
5676: POP
5677: POP
// end ;
5678: LD_VAR 0 3
5682: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5683: LD_INT 0
5685: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5686: LD_VAR 0 2
5690: PPUSH
5691: LD_VAR 0 3
5695: PPUSH
5696: CALL_OW 351
5700: IFFALSE 5718
5702: PUSH
5703: LD_VAR 0 2
5707: PPUSH
5708: LD_VAR 0 3
5712: PPUSH
5713: CALL_OW 554
5717: AND
5718: IFFALSE 5736
5720: PUSH
5721: LD_VAR 0 2
5725: PPUSH
5726: LD_VAR 0 3
5730: PPUSH
5731: CALL_OW 488
5735: AND
5736: IFFALSE 5759
5738: PUSH
5739: LD_VAR 0 2
5743: PPUSH
5744: LD_VAR 0 3
5748: PPUSH
5749: CALL_OW 428
5753: PUSH
5754: LD_INT 1
5756: NEG
5757: EQUAL
5758: AND
5759: IFFALSE 5780
// AddComMoveXY ( bulldozer , x , y ) ;
5761: LD_VAR 0 1
5765: PPUSH
5766: LD_VAR 0 2
5770: PPUSH
5771: LD_VAR 0 3
5775: PPUSH
5776: CALL_OW 171
// end ;
5780: LD_VAR 0 4
5784: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
// dist := 99999 ;
5794: LD_ADDR_VAR 0 6
5798: PUSH
5799: LD_INT 99999
5801: ST_TO_ADDR
// for i = 1 to list do
5802: LD_ADDR_VAR 0 5
5806: PUSH
5807: DOUBLE
5808: LD_INT 1
5810: DEC
5811: ST_TO_ADDR
5812: LD_VAR 0 3
5816: PUSH
5817: FOR_TO
5818: IFFALSE 5956
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5820: LD_ADDR_VAR 0 7
5824: PUSH
5825: LD_VAR 0 1
5829: PPUSH
5830: LD_VAR 0 2
5834: PPUSH
5835: LD_VAR 0 3
5839: PUSH
5840: LD_VAR 0 5
5844: ARRAY
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: LD_VAR 0 3
5854: PUSH
5855: LD_VAR 0 5
5859: ARRAY
5860: PUSH
5861: LD_INT 2
5863: ARRAY
5864: PPUSH
5865: CALL_OW 298
5869: ST_TO_ADDR
// if d = 0 then
5870: LD_VAR 0 7
5874: PUSH
5875: LD_INT 0
5877: EQUAL
5878: IFFALSE 5882
// continue ;
5880: GO 5817
// if d < dist then
5882: LD_VAR 0 7
5886: PUSH
5887: LD_VAR 0 6
5891: LESS
5892: IFFALSE 5954
// begin _x := list [ i ] [ 1 ] ;
5894: LD_ADDR_VAR 0 8
5898: PUSH
5899: LD_VAR 0 3
5903: PUSH
5904: LD_VAR 0 5
5908: ARRAY
5909: PUSH
5910: LD_INT 1
5912: ARRAY
5913: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5914: LD_ADDR_VAR 0 9
5918: PUSH
5919: LD_VAR 0 3
5923: PUSH
5924: LD_VAR 0 5
5928: ARRAY
5929: PUSH
5930: LD_INT 2
5932: ARRAY
5933: ST_TO_ADDR
// _i := i ;
5934: LD_ADDR_VAR 0 10
5938: PUSH
5939: LD_VAR 0 5
5943: ST_TO_ADDR
// dist := d ;
5944: LD_ADDR_VAR 0 6
5948: PUSH
5949: LD_VAR 0 7
5953: ST_TO_ADDR
// end ; end ;
5954: GO 5817
5956: POP
5957: POP
// result := [ _x , _y , _i , dist ] ;
5958: LD_ADDR_VAR 0 4
5962: PUSH
5963: LD_VAR 0 8
5967: PUSH
5968: LD_VAR 0 9
5972: PUSH
5973: LD_VAR 0 10
5977: PUSH
5978: LD_VAR 0 6
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: ST_TO_ADDR
// end ;
5989: LD_VAR 0 4
5993: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5994: LD_INT 0
5996: PPUSH
5997: PPUSH
// for i = 1 to 72 do
5998: LD_ADDR_VAR 0 5
6002: PUSH
6003: DOUBLE
6004: LD_INT 1
6006: DEC
6007: ST_TO_ADDR
6008: LD_INT 72
6010: PUSH
6011: FOR_TO
6012: IFFALSE 6068
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
6014: LD_VAR 0 5
6018: PPUSH
6019: LD_VAR 0 1
6023: PPUSH
6024: CALL_OW 321
6028: PUSH
6029: LD_INT 1
6031: EQUAL
6032: IFFALSE 6050
6034: PUSH
6035: LD_VAR 0 5
6039: PPUSH
6040: LD_VAR 0 3
6044: PPUSH
6045: CALL_OW 482
6049: AND
6050: IFFALSE 6066
// AddComResearch ( lab , i ) ;
6052: LD_VAR 0 2
6056: PPUSH
6057: LD_VAR 0 5
6061: PPUSH
6062: CALL_OW 184
6066: GO 6011
6068: POP
6069: POP
// end ;
6070: LD_VAR 0 4
6074: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6075: LD_INT 0
6077: PPUSH
6078: PPUSH
6079: PPUSH
6080: PPUSH
6081: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6082: LD_ADDR_VAR 0 7
6086: PUSH
6087: LD_VAR 0 2
6091: PPUSH
6092: CALL_OW 313
6096: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6097: LD_ADDR_VAR 0 8
6101: PUSH
6102: LD_VAR 0 3
6106: PPUSH
6107: LD_INT 22
6109: PUSH
6110: LD_VAR 0 1
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 25
6121: PUSH
6122: LD_INT 2
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: LD_INT 24
6131: PUSH
6132: LD_INT 750
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PUSH
6139: LD_INT 3
6141: PUSH
6142: LD_INT 54
6144: PUSH
6145: EMPTY
6146: LIST
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 70
6162: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6163: LD_ADDR_VAR 0 5
6167: PUSH
6168: LD_VAR 0 3
6172: PPUSH
6173: LD_INT 22
6175: PUSH
6176: LD_VAR 0 1
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PUSH
6185: LD_INT 21
6187: PUSH
6188: LD_INT 3
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 3
6197: PUSH
6198: LD_INT 24
6200: PUSH
6201: LD_INT 1000
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: LIST
6216: PUSH
6217: EMPTY
6218: LIST
6219: PPUSH
6220: CALL_OW 70
6224: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6225: LD_VAR 0 5
6229: NOT
6230: IFFALSE 6276
6232: PUSH
6233: LD_INT 22
6235: PUSH
6236: LD_VAR 0 1
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 25
6247: PUSH
6248: LD_INT 2
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 24
6257: PUSH
6258: LD_INT 250
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 69
6274: NOT
6275: AND
6276: IFFALSE 6280
// exit ;
6278: GO 6382
// if buildingsList and engineerOkInside then
6280: LD_VAR 0 5
6284: IFFALSE 6292
6286: PUSH
6287: LD_VAR 0 7
6291: AND
6292: IFFALSE 6318
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6294: LD_VAR 0 7
6298: PPUSH
6299: LD_INT 25
6301: PUSH
6302: LD_INT 2
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PPUSH
6309: CALL_OW 72
6313: PPUSH
6314: CALL_OW 122
// if buildingsList and engineerOkOutside then
6318: LD_VAR 0 5
6322: IFFALSE 6330
6324: PUSH
6325: LD_VAR 0 8
6329: AND
6330: IFFALSE 6350
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6332: LD_VAR 0 8
6336: PPUSH
6337: LD_VAR 0 5
6341: PUSH
6342: LD_INT 1
6344: ARRAY
6345: PPUSH
6346: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6350: LD_VAR 0 5
6354: PUSH
6355: LD_INT 0
6357: EQUAL
6358: IFFALSE 6366
6360: PUSH
6361: LD_VAR 0 8
6365: AND
6366: IFFALSE 6382
// ComEnterUnit ( engineerOkOutside , building ) ;
6368: LD_VAR 0 8
6372: PPUSH
6373: LD_VAR 0 2
6377: PPUSH
6378: CALL_OW 120
// end ;
6382: LD_VAR 0 4
6386: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp ; begin
6387: LD_INT 0
6389: PPUSH
6390: PPUSH
6391: PPUSH
6392: PPUSH
6393: PPUSH
6394: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6395: LD_ADDR_VAR 0 6
6399: PUSH
6400: LD_INT 22
6402: PUSH
6403: LD_VAR 0 1
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 25
6414: PUSH
6415: LD_INT 4
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: PUSH
6422: LD_INT 23
6424: PUSH
6425: LD_INT 2
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: LD_INT 24
6434: PUSH
6435: LD_INT 251
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: PPUSH
6448: CALL_OW 69
6452: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6453: LD_ADDR_VAR 0 7
6457: PUSH
6458: LD_VAR 0 3
6462: PPUSH
6463: LD_INT 22
6465: PUSH
6466: LD_VAR 0 1
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 23
6477: PUSH
6478: LD_INT 2
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: PUSH
6485: LD_INT 25
6487: PUSH
6488: LD_INT 4
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 50
6497: PUSH
6498: EMPTY
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: PPUSH
6507: CALL_OW 70
6511: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6512: LD_ADDR_VAR 0 8
6516: PUSH
6517: LD_VAR 0 3
6521: PPUSH
6522: LD_INT 22
6524: PUSH
6525: LD_VAR 0 1
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: LD_INT 21
6536: PUSH
6537: LD_INT 1
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 3
6546: PUSH
6547: LD_INT 25
6549: PUSH
6550: LD_INT 3
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 3
6563: PUSH
6564: LD_INT 24
6566: PUSH
6567: LD_INT 750
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: PPUSH
6584: CALL_OW 70
6588: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6589: LD_ADDR_VAR 0 9
6593: PUSH
6594: LD_VAR 0 2
6598: PPUSH
6599: LD_INT 22
6601: PUSH
6602: LD_VAR 0 1
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 21
6613: PUSH
6614: LD_INT 1
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: LD_INT 3
6623: PUSH
6624: LD_INT 25
6626: PUSH
6627: LD_INT 3
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: LD_INT 3
6640: PUSH
6641: LD_INT 24
6643: PUSH
6644: LD_INT 1000
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PPUSH
6661: CALL_OW 70
6665: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6666: LD_VAR 0 8
6670: NOT
6671: IFFALSE 6680
6673: PUSH
6674: LD_VAR 0 9
6678: NOT
6679: AND
6680: IFFALSE 6689
6682: PUSH
6683: LD_VAR 0 6
6687: NOT
6688: AND
6689: IFFALSE 6693
// exit ;
6691: GO 6899
// if damageUnits and sciList then
6693: LD_VAR 0 8
6697: IFFALSE 6705
6699: PUSH
6700: LD_VAR 0 6
6704: AND
6705: IFFALSE 6721
// ComMoveToArea ( damageUnits , healArea ) ;
6707: LD_VAR 0 8
6711: PPUSH
6712: LD_VAR 0 2
6716: PPUSH
6717: CALL_OW 113
// if unitsToHeal and sciList then
6721: LD_VAR 0 9
6725: IFFALSE 6733
6727: PUSH
6728: LD_VAR 0 6
6732: AND
6733: IFFALSE 6744
// ComExitBuilding ( sciList ) ;
6735: LD_VAR 0 6
6739: PPUSH
6740: CALL_OW 122
// if unitsToHeal and sciListOutside then
6744: LD_VAR 0 9
6748: IFFALSE 6756
6750: PUSH
6751: LD_VAR 0 7
6755: AND
6756: IFFALSE 6776
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6758: LD_VAR 0 7
6762: PPUSH
6763: LD_VAR 0 9
6767: PUSH
6768: LD_INT 1
6770: ARRAY
6771: PPUSH
6772: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6776: LD_VAR 0 8
6780: PUSH
6781: LD_INT 0
6783: EQUAL
6784: IFFALSE 6796
6786: PUSH
6787: LD_VAR 0 9
6791: PUSH
6792: LD_INT 0
6794: EQUAL
6795: AND
6796: IFFALSE 6804
6798: PUSH
6799: LD_VAR 0 7
6803: AND
6804: IFFALSE 6899
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6806: LD_ADDR_VAR 0 10
6810: PUSH
6811: LD_INT 22
6813: PUSH
6814: LD_VAR 0 1
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: LD_INT 21
6825: PUSH
6826: LD_INT 3
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 30
6835: PUSH
6836: LD_INT 8
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: LIST
6847: PPUSH
6848: CALL_OW 69
6852: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rand ( 1 , tmp ) ] ) ;
6853: LD_VAR 0 7
6857: PPUSH
6858: LD_INT 3
6860: PUSH
6861: LD_INT 60
6863: PUSH
6864: EMPTY
6865: LIST
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PPUSH
6871: CALL_OW 72
6875: PPUSH
6876: LD_VAR 0 10
6880: PUSH
6881: LD_INT 1
6883: PPUSH
6884: LD_VAR 0 10
6888: PPUSH
6889: CALL_OW 12
6893: ARRAY
6894: PPUSH
6895: CALL_OW 120
// end ; end ;
6899: LD_VAR 0 5
6903: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6908: LD_INT 22
6910: PUSH
6911: LD_VAR 0 1
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PUSH
6920: LD_INT 21
6922: PUSH
6923: LD_INT 2
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PPUSH
6934: CALL_OW 69
6938: PUSH
6939: LD_VAR 0 3
6943: LESSEQUAL
6944: IFFALSE 7011
// for i := 1 to vehCount do
6946: LD_ADDR_VAR 0 9
6950: PUSH
6951: DOUBLE
6952: LD_INT 1
6954: DEC
6955: ST_TO_ADDR
6956: LD_VAR 0 3
6960: PUSH
6961: FOR_TO
6962: IFFALSE 7009
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6964: LD_VAR 0 2
6968: PPUSH
6969: LD_VAR 0 7
6973: PPUSH
6974: LD_VAR 0 5
6978: PPUSH
6979: LD_VAR 0 6
6983: PPUSH
6984: LD_VAR 0 4
6988: PUSH
6989: LD_INT 1
6991: PPUSH
6992: LD_VAR 0 4
6996: PPUSH
6997: CALL_OW 12
7001: ARRAY
7002: PPUSH
7003: CALL_OW 185
7007: GO 6961
7009: POP
7010: POP
// end ;
7011: LD_VAR 0 8
7015: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skill , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnits , medics , soldiers , enemyUnits , target ; begin
7016: LD_INT 0
7018: PPUSH
7019: PPUSH
7020: PPUSH
7021: PPUSH
7022: PPUSH
7023: PPUSH
7024: PPUSH
7025: PPUSH
7026: PPUSH
// soldiers := [ ] ;
7027: LD_ADDR_VAR 0 16
7031: PUSH
7032: EMPTY
7033: ST_TO_ADDR
// medics := [ ] ;
7034: LD_ADDR_VAR 0 15
7038: PUSH
7039: EMPTY
7040: ST_TO_ADDR
// for i := 1 to medicCount do
7041: LD_ADDR_VAR 0 11
7045: PUSH
7046: DOUBLE
7047: LD_INT 1
7049: DEC
7050: ST_TO_ADDR
7051: LD_VAR 0 4
7055: PUSH
7056: FOR_TO
7057: IFFALSE 7147
// begin uc_side := side ;
7059: LD_ADDR_OWVAR 20
7063: PUSH
7064: LD_VAR 0 1
7068: ST_TO_ADDR
// uc_nation := nation ;
7069: LD_ADDR_OWVAR 21
7073: PUSH
7074: LD_VAR 0 2
7078: ST_TO_ADDR
// InitHC_All ( ) ;
7079: CALL_OW 584
// PrepareHuman ( false , 4 , skill ) ;
7083: LD_INT 0
7085: PPUSH
7086: LD_INT 4
7088: PPUSH
7089: LD_VAR 0 5
7093: PPUSH
7094: CALL_OW 380
// un := CreateHuman ;
7098: LD_ADDR_VAR 0 13
7102: PUSH
7103: CALL_OW 44
7107: ST_TO_ADDR
// medics := Join ( medics , un ) ;
7108: LD_ADDR_VAR 0 15
7112: PUSH
7113: LD_VAR 0 15
7117: PPUSH
7118: LD_VAR 0 13
7122: PPUSH
7123: CALL 79352 0 2
7127: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7128: LD_VAR 0 13
7132: PPUSH
7133: LD_VAR 0 6
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7056
7147: POP
7148: POP
// for i = 1 to soldierCount do
7149: LD_ADDR_VAR 0 11
7153: PUSH
7154: DOUBLE
7155: LD_INT 1
7157: DEC
7158: ST_TO_ADDR
7159: LD_VAR 0 3
7163: PUSH
7164: FOR_TO
7165: IFFALSE 7255
// begin uc_side := side ;
7167: LD_ADDR_OWVAR 20
7171: PUSH
7172: LD_VAR 0 1
7176: ST_TO_ADDR
// uc_nation := nation ;
7177: LD_ADDR_OWVAR 21
7181: PUSH
7182: LD_VAR 0 2
7186: ST_TO_ADDR
// InitHC_All ( ) ;
7187: CALL_OW 584
// PrepareHuman ( false , 1 , skill ) ;
7191: LD_INT 0
7193: PPUSH
7194: LD_INT 1
7196: PPUSH
7197: LD_VAR 0 5
7201: PPUSH
7202: CALL_OW 380
// un := CreateHuman ;
7206: LD_ADDR_VAR 0 13
7210: PUSH
7211: CALL_OW 44
7215: ST_TO_ADDR
// soldiers := Join ( soldiers , un ) ;
7216: LD_ADDR_VAR 0 16
7220: PUSH
7221: LD_VAR 0 16
7225: PPUSH
7226: LD_VAR 0 13
7230: PPUSH
7231: CALL 79352 0 2
7235: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7236: LD_VAR 0 13
7240: PPUSH
7241: LD_VAR 0 6
7245: PPUSH
7246: LD_INT 0
7248: PPUSH
7249: CALL_OW 49
// end ;
7253: GO 7164
7255: POP
7256: POP
// ComMoveToArea ( medics , healArea ) ;
7257: LD_VAR 0 15
7261: PPUSH
7262: LD_VAR 0 7
7266: PPUSH
7267: CALL_OW 113
// if strategy = 1 then
7271: LD_VAR 0 9
7275: PUSH
7276: LD_INT 1
7278: EQUAL
7279: IFFALSE 7343
// begin AddComAgressiveMove ( soldiers , 91 , 63 ) ;
7281: LD_VAR 0 16
7285: PPUSH
7286: LD_INT 91
7288: PPUSH
7289: LD_INT 63
7291: PPUSH
7292: CALL_OW 174
// AddComAgressiveMove ( soldiers , 101 , 53 ) ;
7296: LD_VAR 0 16
7300: PPUSH
7301: LD_INT 101
7303: PPUSH
7304: LD_INT 53
7306: PPUSH
7307: CALL_OW 174
// AddComAgressiveMove ( soldiers , 75 , 23 ) ;
7311: LD_VAR 0 16
7315: PPUSH
7316: LD_INT 75
7318: PPUSH
7319: LD_INT 23
7321: PPUSH
7322: CALL_OW 174
// AddComAgressiveMove ( soldiers , 78 , 8 ) ;
7326: LD_VAR 0 16
7330: PPUSH
7331: LD_INT 78
7333: PPUSH
7334: LD_INT 8
7336: PPUSH
7337: CALL_OW 174
// end else
7341: GO 7358
// begin AddComAgressiveMove ( soldiers , 75 , 39 ) ;
7343: LD_VAR 0 16
7347: PPUSH
7348: LD_INT 75
7350: PPUSH
7351: LD_INT 39
7353: PPUSH
7354: CALL_OW 174
// end ; wait ( 0 0$10 ) ;
7358: LD_INT 350
7360: PPUSH
7361: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7365: LD_INT 35
7367: PPUSH
7368: CALL_OW 67
// damageUnits := UnitFilter ( soldiers , [ f_tag , 1 ] ) ;
7372: LD_ADDR_VAR 0 14
7376: PUSH
7377: LD_VAR 0 16
7381: PPUSH
7382: LD_INT 120
7384: PUSH
7385: LD_INT 1
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 72
7396: ST_TO_ADDR
// if medics and damageUnits then
7397: LD_VAR 0 15
7401: IFFALSE 7409
7403: PUSH
7404: LD_VAR 0 14
7408: AND
7409: IFFALSE 7429
// ComHeal ( medics , damageUnits [ 1 ] ) ;
7411: LD_VAR 0 15
7415: PPUSH
7416: LD_VAR 0 14
7420: PUSH
7421: LD_INT 1
7423: ARRAY
7424: PPUSH
7425: CALL_OW 128
// for i in soldiers do
7429: LD_ADDR_VAR 0 11
7433: PUSH
7434: LD_VAR 0 16
7438: PUSH
7439: FOR_IN
7440: IFFALSE 7645
// begin if IsDead ( i ) then
7442: LD_VAR 0 11
7446: PPUSH
7447: CALL_OW 301
7451: IFFALSE 7471
// begin soldiers := soldiers diff i ;
7453: LD_ADDR_VAR 0 16
7457: PUSH
7458: LD_VAR 0 16
7462: PUSH
7463: LD_VAR 0 11
7467: DIFF
7468: ST_TO_ADDR
// continue ;
7469: GO 7439
// end ; if GetTag ( i ) = 1 then
7471: LD_VAR 0 11
7475: PPUSH
7476: CALL_OW 110
7480: PUSH
7481: LD_INT 1
7483: EQUAL
7484: IFFALSE 7548
// begin if GetLives ( i ) = 1000 then
7486: LD_VAR 0 11
7490: PPUSH
7491: CALL_OW 256
7495: PUSH
7496: LD_INT 1000
7498: EQUAL
7499: IFFALSE 7515
// begin SetTag ( i , 0 ) ;
7501: LD_VAR 0 11
7505: PPUSH
7506: LD_INT 0
7508: PPUSH
7509: CALL_OW 109
// continue ;
7513: GO 7439
// end ; if not IsInArea ( i , healArea ) then
7515: LD_VAR 0 11
7519: PPUSH
7520: LD_VAR 0 7
7524: PPUSH
7525: CALL_OW 308
7529: NOT
7530: IFFALSE 7546
// ComMoveToArea ( i , healArea ) ;
7532: LD_VAR 0 11
7536: PPUSH
7537: LD_VAR 0 7
7541: PPUSH
7542: CALL_OW 113
// continue ;
7546: GO 7439
// end ; if GetLives ( i ) < 700 then
7548: LD_VAR 0 11
7552: PPUSH
7553: CALL_OW 256
7557: PUSH
7558: LD_INT 700
7560: LESS
7561: IFFALSE 7591
// begin SetTag ( i , 1 ) ;
7563: LD_VAR 0 11
7567: PPUSH
7568: LD_INT 1
7570: PPUSH
7571: CALL_OW 109
// ComMoveToArea ( i , healArea ) ;
7575: LD_VAR 0 11
7579: PPUSH
7580: LD_VAR 0 7
7584: PPUSH
7585: CALL_OW 113
// continue ;
7589: GO 7439
// end ; target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7591: LD_ADDR_VAR 0 18
7595: PUSH
7596: LD_INT 22
7598: PUSH
7599: LD_VAR 0 8
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PPUSH
7608: CALL_OW 69
7612: PPUSH
7613: LD_VAR 0 11
7617: PPUSH
7618: CALL_OW 74
7622: ST_TO_ADDR
// if target then
7623: LD_VAR 0 18
7627: IFFALSE 7643
// ComAttackUnit ( i , target ) ;
7629: LD_VAR 0 11
7633: PPUSH
7634: LD_VAR 0 18
7638: PPUSH
7639: CALL_OW 115
// end ;
7643: GO 7439
7645: POP
7646: POP
// until not soldiers ;
7647: LD_VAR 0 16
7651: NOT
7652: IFFALSE 7365
// if medics then
7654: LD_VAR 0 15
7658: IFFALSE 7778
// begin repeat medics := UnitFilter ( medics , [ f_ok ] ) ;
7660: LD_ADDR_VAR 0 15
7664: PUSH
7665: LD_VAR 0 15
7669: PPUSH
7670: LD_INT 50
7672: PUSH
7673: EMPTY
7674: LIST
7675: PPUSH
7676: CALL_OW 72
7680: ST_TO_ADDR
// wait ( 0 0$1 ) ;
7681: LD_INT 35
7683: PPUSH
7684: CALL_OW 67
// for i in medics do
7688: LD_ADDR_VAR 0 11
7692: PUSH
7693: LD_VAR 0 15
7697: PUSH
7698: FOR_IN
7699: IFFALSE 7769
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
7701: LD_VAR 0 11
7705: PPUSH
7706: CALL_OW 314
7710: NOT
7711: IFFALSE 7728
7713: PUSH
7714: LD_VAR 0 11
7718: PPUSH
7719: LD_INT 4
7721: PPUSH
7722: CALL_OW 308
7726: NOT
7727: AND
7728: IFFALSE 7744
// ComMoveToArea ( i , RussianAttack ) else
7730: LD_VAR 0 11
7734: PPUSH
7735: LD_INT 4
7737: PPUSH
7738: CALL_OW 113
7742: GO 7767
// if IsInArea ( i , RussianAttack ) then
7744: LD_VAR 0 11
7748: PPUSH
7749: LD_INT 4
7751: PPUSH
7752: CALL_OW 308
7756: IFFALSE 7767
// RemoveUnit ( i ) ;
7758: LD_VAR 0 11
7762: PPUSH
7763: CALL_OW 64
7767: GO 7698
7769: POP
7770: POP
// until not medics ;
7771: LD_VAR 0 15
7775: NOT
7776: IFFALSE 7660
// end ; end ; end_of_file
7778: LD_VAR 0 10
7782: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
7783: LD_INT 0
7785: PPUSH
7786: PPUSH
7787: PPUSH
7788: PPUSH
7789: PPUSH
// InGameOn ;
7790: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
7794: LD_ADDR_VAR 0 3
7798: PUSH
7799: LD_EXP 8
7803: PUSH
7804: LD_EXP 9
7808: PUSH
7809: LD_EXP 10
7813: PUSH
7814: LD_EXP 11
7818: PUSH
7819: LD_EXP 12
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
7831: LD_ADDR_VAR 0 4
7835: PUSH
7836: LD_INT 46
7838: PUSH
7839: LD_INT 45
7841: PUSH
7842: LD_INT 44
7844: PUSH
7845: LD_INT 43
7847: PUSH
7848: LD_INT 42
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
7858: LD_ADDR_VAR 0 5
7862: PUSH
7863: LD_INT 14
7865: PUSH
7866: LD_INT 12
7868: PUSH
7869: LD_INT 10
7871: PUSH
7872: LD_INT 8
7874: PUSH
7875: LD_INT 6
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
7885: LD_EXP 11
7889: PPUSH
7890: LD_INT 31
7892: PPUSH
7893: LD_INT 59
7895: PPUSH
7896: LD_INT 19
7898: PPUSH
7899: LD_INT 5
7901: PPUSH
7902: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
7906: LD_INT 32
7908: PPUSH
7909: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
7913: LD_INT 32
7915: PPUSH
7916: LD_INT 51
7918: PPUSH
7919: LD_INT 26
7921: PPUSH
7922: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
7926: LD_INT 32
7928: PPUSH
7929: LD_INT 53
7931: PPUSH
7932: LD_INT 23
7934: PPUSH
7935: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
7939: LD_INT 32
7941: PPUSH
7942: LD_INT 52
7944: PPUSH
7945: LD_INT 19
7947: PPUSH
7948: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7952: LD_INT 35
7954: PPUSH
7955: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
7959: LD_INT 32
7961: PPUSH
7962: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
7966: LD_INT 32
7968: PPUSH
7969: CALL_OW 250
7973: PUSH
7974: LD_INT 52
7976: EQUAL
7977: IFFALSE 7992
7979: PUSH
7980: LD_INT 32
7982: PPUSH
7983: CALL_OW 251
7987: PUSH
7988: LD_INT 19
7990: EQUAL
7991: AND
7992: IFFALSE 7952
// ComExitVehicle ( JMM ) ;
7994: LD_EXP 1
7998: PPUSH
7999: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8003: LD_EXP 7
8007: PPUSH
8008: LD_EXP 1
8012: PPUSH
8013: CALL_OW 119
// wait ( 0 0$01 ) ;
8017: LD_INT 35
8019: PPUSH
8020: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8024: LD_EXP 1
8028: PPUSH
8029: LD_INT 46
8031: PPUSH
8032: LD_INT 10
8034: PPUSH
8035: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8039: LD_EXP 1
8043: PPUSH
8044: LD_EXP 7
8048: PPUSH
8049: CALL_OW 179
// wait ( 0 0$4 ) ;
8053: LD_INT 140
8055: PPUSH
8056: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8060: LD_EXP 1
8064: PPUSH
8065: LD_STRING D1-JMM-1
8067: PPUSH
8068: CALL_OW 88
// if not dialogue_skipped then
8072: LD_OWVAR 59
8076: NOT
8077: IFFALSE 8744
// begin for i := 1 to gammaSquad do
8079: LD_ADDR_VAR 0 2
8083: PUSH
8084: DOUBLE
8085: LD_INT 1
8087: DEC
8088: ST_TO_ADDR
8089: LD_VAR 0 3
8093: PUSH
8094: FOR_TO
8095: IFFALSE 8156
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8097: LD_VAR 0 3
8101: PUSH
8102: LD_VAR 0 2
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 4
8112: PUSH
8113: LD_VAR 0 2
8117: ARRAY
8118: PPUSH
8119: LD_VAR 0 5
8123: PUSH
8124: LD_VAR 0 2
8128: ARRAY
8129: PPUSH
8130: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8134: LD_VAR 0 3
8138: PUSH
8139: LD_VAR 0 2
8143: ARRAY
8144: PPUSH
8145: LD_EXP 1
8149: PPUSH
8150: CALL_OW 179
// end ;
8154: GO 8094
8156: POP
8157: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8158: LD_EXP 4
8162: PPUSH
8163: LD_INT 41
8165: PPUSH
8166: LD_INT 4
8168: PPUSH
8169: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8173: LD_EXP 4
8177: PPUSH
8178: LD_EXP 1
8182: PPUSH
8183: CALL_OW 179
// if Lisa = false and Bobby then
8187: LD_EXP 4
8191: PUSH
8192: LD_INT 0
8194: EQUAL
8195: IFFALSE 8203
8197: PUSH
8198: LD_EXP 2
8202: AND
8203: IFFALSE 8234
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8205: LD_EXP 2
8209: PPUSH
8210: LD_INT 41
8212: PPUSH
8213: LD_INT 4
8215: PPUSH
8216: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8220: LD_EXP 2
8224: PPUSH
8225: LD_EXP 1
8229: PPUSH
8230: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8234: LD_EXP 4
8238: PUSH
8239: LD_INT 0
8241: EQUAL
8242: IFFALSE 8254
8244: PUSH
8245: LD_EXP 2
8249: PUSH
8250: LD_INT 0
8252: EQUAL
8253: AND
8254: IFFALSE 8262
8256: PUSH
8257: LD_EXP 3
8261: AND
8262: IFFALSE 8293
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8264: LD_EXP 3
8268: PPUSH
8269: LD_INT 41
8271: PPUSH
8272: LD_INT 4
8274: PPUSH
8275: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8279: LD_EXP 3
8283: PPUSH
8284: LD_EXP 1
8288: PPUSH
8289: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8293: LD_EXP 4
8297: PUSH
8298: LD_INT 0
8300: EQUAL
8301: IFFALSE 8313
8303: PUSH
8304: LD_EXP 2
8308: PUSH
8309: LD_INT 0
8311: EQUAL
8312: AND
8313: IFFALSE 8325
8315: PUSH
8316: LD_EXP 3
8320: PUSH
8321: LD_INT 0
8323: EQUAL
8324: AND
8325: IFFALSE 8356
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8327: LD_EXP 6
8331: PPUSH
8332: LD_INT 41
8334: PPUSH
8335: LD_INT 4
8337: PPUSH
8338: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8342: LD_EXP 6
8346: PPUSH
8347: LD_EXP 1
8351: PPUSH
8352: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8356: LD_EXP 7
8360: PPUSH
8361: LD_STRING D1-Brown-1
8363: PPUSH
8364: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8368: LD_EXP 1
8372: PPUSH
8373: LD_STRING D1-JMM-2
8375: PPUSH
8376: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8380: LD_EXP 7
8384: PPUSH
8385: LD_STRING D1-Brown-2
8387: PPUSH
8388: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8392: LD_EXP 1
8396: PPUSH
8397: LD_EXP 9
8401: PPUSH
8402: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8406: LD_EXP 9
8410: PPUSH
8411: LD_STRING D1-FSol1-2
8413: PPUSH
8414: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8418: LD_EXP 1
8422: PPUSH
8423: LD_EXP 8
8427: PPUSH
8428: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8432: LD_EXP 8
8436: PPUSH
8437: LD_STRING D1-Sol2-2
8439: PPUSH
8440: CALL_OW 88
// if Lisa then
8444: LD_EXP 4
8448: IFFALSE 8488
// begin ComTurnUnit ( JMM , Lisa ) ;
8450: LD_EXP 1
8454: PPUSH
8455: LD_EXP 4
8459: PPUSH
8460: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8464: LD_EXP 4
8468: PPUSH
8469: LD_STRING D1-Lisa-2
8471: PPUSH
8472: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8476: LD_EXP 1
8480: PPUSH
8481: LD_STRING D1-JMM-3
8483: PPUSH
8484: CALL_OW 88
// end ; if Bobby then
8488: LD_EXP 2
8492: IFFALSE 8532
// begin ComTurnUnit ( JMM , Bobby ) ;
8494: LD_EXP 1
8498: PPUSH
8499: LD_EXP 2
8503: PPUSH
8504: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
8508: LD_EXP 2
8512: PPUSH
8513: LD_STRING D1-Bobby-2
8515: PPUSH
8516: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8520: LD_EXP 1
8524: PPUSH
8525: LD_STRING D1-JMM-3
8527: PPUSH
8528: CALL_OW 88
// end ; if Cyrus then
8532: LD_EXP 3
8536: IFFALSE 8576
// begin ComTurnUnit ( JMM , Cyrus ) ;
8538: LD_EXP 1
8542: PPUSH
8543: LD_EXP 3
8547: PPUSH
8548: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
8552: LD_EXP 3
8556: PPUSH
8557: LD_STRING D1-Cyrus-2
8559: PPUSH
8560: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8564: LD_EXP 1
8568: PPUSH
8569: LD_STRING D1-JMM-3
8571: PPUSH
8572: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
8576: LD_EXP 1
8580: PPUSH
8581: LD_EXP 7
8585: PPUSH
8586: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
8590: LD_EXP 1
8594: PPUSH
8595: LD_STRING D1-JMM-3a
8597: PPUSH
8598: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
8602: LD_EXP 7
8606: PPUSH
8607: LD_INT 38
8609: PPUSH
8610: LD_INT 5
8612: PPUSH
8613: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
8617: LD_EXP 7
8621: PPUSH
8622: LD_EXP 1
8626: PPUSH
8627: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
8631: LD_EXP 1
8635: PPUSH
8636: LD_INT 40
8638: PPUSH
8639: LD_INT 7
8641: PPUSH
8642: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8646: LD_EXP 1
8650: PPUSH
8651: LD_EXP 7
8655: PPUSH
8656: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
8660: LD_EXP 7
8664: PPUSH
8665: LD_STRING D1-Brown-3
8667: PPUSH
8668: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
8672: LD_EXP 14
8676: PPUSH
8677: LD_STRING D1-Har-3
8679: PPUSH
8680: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
8684: LD_EXP 1
8688: PPUSH
8689: LD_STRING D1-JMM-4
8691: PPUSH
8692: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
8696: LD_EXP 14
8700: PPUSH
8701: LD_STRING D1-Har-4
8703: PPUSH
8704: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
8708: LD_EXP 1
8712: PPUSH
8713: LD_STRING D1-JMM-5
8715: PPUSH
8716: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
8720: LD_EXP 14
8724: PPUSH
8725: LD_STRING D1-Har-5
8727: PPUSH
8728: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
8732: LD_EXP 1
8736: PPUSH
8737: LD_STRING D1-JMM-6
8739: PPUSH
8740: CALL_OW 88
// end ; InGameOff ;
8744: CALL_OW 9
// PrepareRussianConvoy ;
8748: CALL 3396 0 0
// ChangeMissionObjectives ( M1 ) ;
8752: LD_STRING M1
8754: PPUSH
8755: CALL_OW 337
// SaveForQuickRestart ;
8759: CALL_OW 22
// timerStatus = 1 ;
8763: LD_ADDR_EXP 29
8767: PUSH
8768: LD_INT 1
8770: ST_TO_ADDR
// startTimer = 1 ;
8771: LD_ADDR_EXP 30
8775: PUSH
8776: LD_INT 1
8778: ST_TO_ADDR
// bonusAvalaible = 1 ;
8779: LD_ADDR_EXP 44
8783: PUSH
8784: LD_INT 1
8786: ST_TO_ADDR
// wait ( 0 0$3 ) ;
8787: LD_INT 105
8789: PPUSH
8790: CALL_OW 67
// DialogueOn ;
8794: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
8798: LD_EXP 12
8802: PPUSH
8803: LD_STRING D9-Mech1-1
8805: PPUSH
8806: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
8810: LD_EXP 1
8814: PPUSH
8815: LD_STRING D9-JMM-1
8817: PPUSH
8818: CALL_OW 88
// DialogueOff ;
8822: CALL_OW 7
// end ;
8826: LD_VAR 0 1
8830: RET
// export function JMMTraitor ; begin
8831: LD_INT 0
8833: PPUSH
// wait ( 0 0$2 ) ;
8834: LD_INT 70
8836: PPUSH
8837: CALL_OW 67
// DialogueOn ;
8841: CALL_OW 6
// InGameOn ;
8845: CALL_OW 8
// SayRadio ( Harisson , D8-Har-1b ) ;
8849: LD_EXP 14
8853: PPUSH
8854: LD_STRING D8-Har-1b
8856: PPUSH
8857: CALL_OW 94
// YouLost ( LostCommand ) ;
8861: LD_STRING LostCommand
8863: PPUSH
8864: CALL_OW 104
// InGameOff ;
8868: CALL_OW 9
// DialogueOff ;
8872: CALL_OW 7
// end ;
8876: LD_VAR 0 1
8880: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
8881: LD_INT 47
8883: PPUSH
8884: LD_INT 1
8886: PPUSH
8887: CALL_OW 321
8891: PUSH
8892: LD_INT 2
8894: EQUAL
8895: IFFALSE 8904
8897: PUSH
8898: LD_EXP 31
8902: NOT
8903: AND
8904: IFFALSE 8954
8906: PUSH
8907: LD_INT 22
8909: PUSH
8910: LD_INT 1
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PUSH
8917: LD_INT 21
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PUSH
8927: LD_INT 30
8929: PUSH
8930: LD_INT 3
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 57
8939: PUSH
8940: EMPTY
8941: LIST
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: PPUSH
8949: CALL_OW 69
8953: AND
8954: IFFALSE 9188
8956: GO 8958
8958: DISABLE
// begin factoryDialog := true ;
8959: LD_ADDR_EXP 31
8963: PUSH
8964: LD_INT 1
8966: ST_TO_ADDR
// if IsOk ( Campell ) then
8967: LD_EXP 12
8971: PPUSH
8972: CALL_OW 302
8976: IFFALSE 8992
// Say ( Campell , D10-Mech1-1 ) else
8978: LD_EXP 12
8982: PPUSH
8983: LD_STRING D10-Mech1-1
8985: PPUSH
8986: CALL_OW 88
8990: GO 9188
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
8992: LD_INT 22
8994: PUSH
8995: LD_INT 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 21
9004: PUSH
9005: LD_INT 1
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PUSH
9012: LD_INT 25
9014: PUSH
9015: LD_INT 3
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 26
9024: PUSH
9025: LD_INT 1
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: PPUSH
9038: CALL_OW 69
9042: PUSH
9043: LD_EXP 1
9047: PUSH
9048: EMPTY
9049: LIST
9050: DIFF
9051: IFFALSE 9125
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9053: LD_INT 22
9055: PUSH
9056: LD_INT 1
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PUSH
9063: LD_INT 21
9065: PUSH
9066: LD_INT 1
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PUSH
9073: LD_INT 25
9075: PUSH
9076: LD_INT 3
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: LD_INT 26
9085: PUSH
9086: LD_INT 1
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: PPUSH
9099: CALL_OW 69
9103: PUSH
9104: LD_EXP 1
9108: PUSH
9109: EMPTY
9110: LIST
9111: DIFF
9112: PPUSH
9113: LD_STRING D10-Mech1-1
9115: PPUSH
9116: LD_STRING D10-Mech1-1
9118: PPUSH
9119: CALL 4617 0 3
9123: GO 9188
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9125: LD_INT 22
9127: PUSH
9128: LD_INT 1
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: PUSH
9135: LD_INT 21
9137: PUSH
9138: LD_INT 1
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: PUSH
9145: LD_INT 26
9147: PUSH
9148: LD_INT 1
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: LIST
9159: PUSH
9160: LD_INT 1
9162: ARRAY
9163: PPUSH
9164: CALL_OW 69
9168: PUSH
9169: LD_EXP 1
9173: PUSH
9174: EMPTY
9175: LIST
9176: DIFF
9177: PPUSH
9178: LD_STRING D10-Mech1-1
9180: PPUSH
9181: LD_STRING D10-Mech1-1
9183: PPUSH
9184: CALL 4617 0 3
// end ; end ;
9188: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9189: LD_INT 22
9191: PUSH
9192: LD_INT 1
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: LD_INT 30
9201: PUSH
9202: LD_INT 32
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: PPUSH
9213: CALL_OW 69
9217: IFFALSE 9229
9219: PUSH
9220: LD_EXP 32
9224: PUSH
9225: LD_INT 0
9227: EQUAL
9228: AND
9229: IFFALSE 9465
9231: GO 9233
9233: DISABLE
// begin if IsOk ( Claptopn ) then
9234: LD_EXP 11
9238: PPUSH
9239: CALL_OW 302
9243: IFFALSE 9259
// Say ( Claptopn , D9b-Eng1-1 ) else
9245: LD_EXP 11
9249: PPUSH
9250: LD_STRING D9b-Eng1-1
9252: PPUSH
9253: CALL_OW 88
9257: GO 9451
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9259: LD_INT 22
9261: PUSH
9262: LD_INT 1
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 21
9271: PUSH
9272: LD_INT 1
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 25
9281: PUSH
9282: LD_INT 3
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 26
9291: PUSH
9292: LD_INT 1
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: PPUSH
9305: CALL_OW 69
9309: PUSH
9310: LD_EXP 1
9314: PUSH
9315: EMPTY
9316: LIST
9317: DIFF
9318: IFFALSE 9392
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9320: LD_INT 22
9322: PUSH
9323: LD_INT 1
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 21
9332: PUSH
9333: LD_INT 1
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 25
9342: PUSH
9343: LD_INT 2
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 26
9352: PUSH
9353: LD_INT 1
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: PPUSH
9366: CALL_OW 69
9370: PUSH
9371: LD_EXP 1
9375: PUSH
9376: EMPTY
9377: LIST
9378: DIFF
9379: PPUSH
9380: LD_STRING D9b-Eng1-1
9382: PPUSH
9383: LD_STRING D9b-Eng1-11
9385: PPUSH
9386: CALL 4617 0 3
9390: GO 9451
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9392: LD_INT 22
9394: PUSH
9395: LD_INT 1
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 21
9404: PUSH
9405: LD_INT 1
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 26
9414: PUSH
9415: LD_INT 1
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: LIST
9426: PPUSH
9427: CALL_OW 69
9431: PUSH
9432: LD_EXP 1
9436: PUSH
9437: EMPTY
9438: LIST
9439: DIFF
9440: PPUSH
9441: LD_STRING D9b-Eng1-1
9443: PPUSH
9444: LD_STRING D9b-Eng1-1
9446: PPUSH
9447: CALL 4617 0 3
// end ; if energyVDialog = 0 then
9451: LD_EXP 33
9455: PUSH
9456: LD_INT 0
9458: EQUAL
9459: IFFALSE 9465
// EnergyDialog ;
9461: CALL 5022 0 0
// end ;
9465: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9466: LD_EXP 34
9470: PUSH
9471: LD_INT 1
9473: EQUAL
9474: IFFALSE 9486
9476: PUSH
9477: LD_EXP 35
9481: PUSH
9482: LD_INT 1
9484: EQUAL
9485: AND
9486: IFFALSE 9498
9488: GO 9490
9490: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9491: LD_STRING M1a
9493: PPUSH
9494: CALL_OW 337
9498: END
// every 3 3$0 do
9499: GO 9501
9501: DISABLE
// PrepareFirstAttack ;
9502: CALL 4208 0 0
9506: END
// every 0 0$2 trigger UnitFilter ( firstAttackGroup , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9507: LD_EXP 51
9511: PPUSH
9512: LD_INT 21
9514: PUSH
9515: LD_INT 1
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 3
9524: PUSH
9525: LD_INT 24
9527: PUSH
9528: LD_INT 250
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PPUSH
9543: CALL_OW 72
9547: PUSH
9548: LD_INT 0
9550: GREATER
9551: IFFALSE 9563
9553: PUSH
9554: LD_EXP 23
9558: PUSH
9559: LD_INT 1
9561: EQUAL
9562: AND
9563: IFFALSE 9840
9565: GO 9567
9567: DISABLE
9568: LD_INT 0
9570: PPUSH
// begin firstRussianAttack := 2 ;
9571: LD_ADDR_EXP 23
9575: PUSH
9576: LD_INT 2
9578: ST_TO_ADDR
// ComMoveXY ( firstAttackGroup , 125 , 98 ) ;
9579: LD_EXP 51
9583: PPUSH
9584: LD_INT 125
9586: PPUSH
9587: LD_INT 98
9589: PPUSH
9590: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
9594: LD_INT 22
9596: PUSH
9597: LD_INT 1
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: LD_INT 21
9606: PUSH
9607: LD_INT 1
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PPUSH
9618: CALL_OW 69
9622: PUSH
9623: LD_EXP 1
9627: PUSH
9628: LD_EXP 7
9632: PUSH
9633: LD_EXP 4
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: DIFF
9643: PPUSH
9644: LD_STRING DAtt1-Sol1-1
9646: PPUSH
9647: LD_STRING DAtt1-FSol1-1
9649: PPUSH
9650: CALL 4617 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
9654: LD_EXP 1
9658: PPUSH
9659: LD_STRING DAtt1-JMM-1
9661: PPUSH
9662: CALL_OW 88
// if Lisa then
9666: LD_EXP 4
9670: IFFALSE 9686
// Say ( Lisa , DAtt1a-Lisa-1 ) else
9672: LD_EXP 4
9676: PPUSH
9677: LD_STRING DAtt1a-Lisa-1
9679: PPUSH
9680: CALL_OW 88
9684: GO 9757
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
9686: LD_INT 22
9688: PUSH
9689: LD_INT 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 21
9698: PUSH
9699: LD_INT 1
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 26
9708: PUSH
9709: LD_INT 1
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: PPUSH
9721: CALL_OW 69
9725: PUSH
9726: LD_EXP 1
9730: PUSH
9731: LD_EXP 7
9735: PUSH
9736: LD_EXP 4
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: LIST
9745: DIFF
9746: PPUSH
9747: LD_STRING DAtt1a-Sol1-1
9749: PPUSH
9750: LD_STRING DAtt1-FSol1-1
9752: PPUSH
9753: CALL 4617 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
9757: LD_EXP 1
9761: PPUSH
9762: LD_STRING DAtt1a-JMM-1
9764: PPUSH
9765: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
9769: LD_INT 22
9771: PUSH
9772: LD_INT 1
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: LD_INT 21
9781: PUSH
9782: LD_INT 1
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 26
9791: PUSH
9792: LD_INT 1
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 69
9808: PUSH
9809: LD_EXP 1
9813: PUSH
9814: LD_EXP 7
9818: PUSH
9819: LD_EXP 4
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: LIST
9828: DIFF
9829: PPUSH
9830: LD_STRING DAtt1b-Sol1-1
9832: PPUSH
9833: LD_STRING DAtt1a-Sol1-1
9835: PPUSH
9836: CALL 4617 0 3
// end ;
9840: PPOPN 1
9842: END
// every 0 0$1 trigger firstRussianAttack > 1 and UnitFilter ( firstAttackGroup , [ [ f_inarea , RussianEscape ] , [ f_type , unit_human ] ] ) do var i ;
9843: LD_EXP 23
9847: PUSH
9848: LD_INT 1
9850: GREATER
9851: IFFALSE 9888
9853: PUSH
9854: LD_EXP 51
9858: PPUSH
9859: LD_INT 95
9861: PUSH
9862: LD_INT 5
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 21
9871: PUSH
9872: LD_INT 1
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PPUSH
9883: CALL_OW 72
9887: AND
9888: IFFALSE 9933
9890: GO 9892
9892: DISABLE
9893: LD_INT 0
9895: PPUSH
// begin for i in UnitFilter ( firstAttackGroup , [ f_ok ] ) do
9896: LD_ADDR_VAR 0 1
9900: PUSH
9901: LD_EXP 51
9905: PPUSH
9906: LD_INT 50
9908: PUSH
9909: EMPTY
9910: LIST
9911: PPUSH
9912: CALL_OW 72
9916: PUSH
9917: FOR_IN
9918: IFFALSE 9931
// RemoveUnit ( i ) ;
9920: LD_VAR 0 1
9924: PPUSH
9925: CALL_OW 64
9929: GO 9917
9931: POP
9932: POP
// end ;
9933: PPOPN 1
9935: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
9936: LD_EXP 28
9940: PUSH
9941: LD_INT 0
9943: EQUAL
9944: IFFALSE 10025
9946: GO 9948
9948: DISABLE
// begin timerStatus = 4 ;
9949: LD_ADDR_EXP 29
9953: PUSH
9954: LD_INT 4
9956: ST_TO_ADDR
// DialogueOn ;
9957: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
9961: LD_EXP 13
9965: PPUSH
9966: LD_STRING D2-Don-1
9968: PPUSH
9969: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
9973: LD_EXP 1
9977: PPUSH
9978: LD_STRING D2-JMM-1
9980: PPUSH
9981: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
9985: LD_EXP 13
9989: PPUSH
9990: LD_STRING D2-Don-2
9992: PPUSH
9993: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9997: LD_EXP 1
10001: PPUSH
10002: LD_STRING D2-JMM-2
10004: PPUSH
10005: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10009: LD_EXP 13
10013: PPUSH
10014: LD_STRING D2-Don-3
10016: PPUSH
10017: CALL_OW 94
// DialogueOff ;
10021: CALL_OW 7
// end ;
10025: END
// every 12 12$0 do var tmp ;
10026: GO 10028
10028: DISABLE
10029: LD_INT 0
10031: PPUSH
// begin PrepareDonaldsonArmy ;
10032: CALL 1179 0 0
// CenterNowOnUnits ( Donaldson ) ;
10036: LD_EXP 13
10040: PPUSH
10041: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10045: LD_INT 22
10047: PUSH
10048: LD_INT 6
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PPUSH
10055: CALL_OW 69
10059: NOT
10060: IFFALSE 10076
// begin wait ( 3 ) ;
10062: LD_INT 3
10064: PPUSH
10065: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10069: LD_STRING ACH_BASE
10071: PPUSH
10072: CALL_OW 543
// end ; tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
10076: LD_ADDR_VAR 0 1
10080: PUSH
10081: LD_INT 22
10083: PUSH
10084: LD_INT 4
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PUSH
10091: LD_INT 21
10093: PUSH
10094: LD_INT 1
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PUSH
10101: LD_INT 26
10103: PUSH
10104: LD_INT 1
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: LIST
10115: PPUSH
10116: CALL_OW 69
10120: PUSH
10121: LD_EXP 5
10125: PUSH
10126: EMPTY
10127: LIST
10128: DIFF
10129: ST_TO_ADDR
// DialogueOn ;
10130: CALL_OW 6
// tmp := tmp diff DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10134: LD_ADDR_VAR 0 1
10138: PUSH
10139: LD_VAR 0 1
10143: PUSH
10144: LD_VAR 0 1
10148: PPUSH
10149: LD_STRING D3-Sol1-1
10151: PPUSH
10152: LD_STRING D3-Sol1-1
10154: PPUSH
10155: CALL 4617 0 3
10159: DIFF
10160: ST_TO_ADDR
// DialogRandom ( tmp , D3-Sol2-1 , D3-Sol2-1 ) ;
10161: LD_VAR 0 1
10165: PPUSH
10166: LD_STRING D3-Sol2-1
10168: PPUSH
10169: LD_STRING D3-Sol2-1
10171: PPUSH
10172: CALL 4617 0 3
// if Frank then
10176: LD_EXP 5
10180: IFFALSE 10194
// Say ( Frank , D3-Frank-1 ) ;
10182: LD_EXP 5
10186: PPUSH
10187: LD_STRING D3-Frank-1
10189: PPUSH
10190: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10194: LD_EXP 13
10198: PPUSH
10199: LD_STRING D3-Don-1
10201: PPUSH
10202: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10206: LD_EXP 13
10210: PPUSH
10211: LD_STRING D3-Don-1a
10213: PPUSH
10214: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10218: LD_EXP 1
10222: PPUSH
10223: LD_STRING D3-JMM-1
10225: PPUSH
10226: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10230: LD_EXP 13
10234: PPUSH
10235: LD_STRING D3-Don-2
10237: PPUSH
10238: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10242: LD_INT 22
10244: PUSH
10245: LD_INT 6
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: PUSH
10252: LD_INT 21
10254: PUSH
10255: LD_INT 1
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PPUSH
10266: CALL_OW 69
10270: IFFALSE 10408
// begin Say ( JMM , D3-JMM-2 ) ;
10272: LD_EXP 1
10276: PPUSH
10277: LD_STRING D3-JMM-2
10279: PPUSH
10280: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10284: LD_EXP 13
10288: PPUSH
10289: LD_STRING D3-Don-3
10291: PPUSH
10292: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10296: LD_EXP 1
10300: PPUSH
10301: LD_STRING D3-JMM-3
10303: PPUSH
10304: CALL_OW 88
// if IsOK ( Frank ) then
10308: LD_EXP 5
10312: PPUSH
10313: CALL_OW 302
10317: IFFALSE 10331
// Say ( Frank , D3-Frank-3 ) ;
10319: LD_EXP 5
10323: PPUSH
10324: LD_STRING D3-Frank-3
10326: PPUSH
10327: CALL_OW 88
// DialogueOff ;
10331: CALL_OW 7
// if IsOk ( Frank ) then
10335: LD_EXP 5
10339: PPUSH
10340: CALL_OW 302
10344: IFFALSE 10406
// begin SetSide ( Frank , 0 ) ;
10346: LD_EXP 5
10350: PPUSH
10351: LD_INT 0
10353: PPUSH
10354: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10358: LD_EXP 5
10362: PPUSH
10363: LD_INT 12
10365: PPUSH
10366: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10370: LD_EXP 5
10374: PPUSH
10375: LD_STRING 04t_Frank
10377: PPUSH
10378: CALL_OW 38
// wait ( 0 0$3 ) ;
10382: LD_INT 105
10384: PPUSH
10385: CALL_OW 67
// frankScoutBase = 1 ;
10389: LD_ADDR_EXP 25
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10397: LD_EXP 5
10401: PPUSH
10402: CALL_OW 64
// end ; end else
10406: GO 10495
// begin Say ( JMM , D3-JMM-4 ) ;
10408: LD_EXP 1
10412: PPUSH
10413: LD_STRING D3-JMM-4
10415: PPUSH
10416: CALL_OW 88
// DialogueOff ;
10420: CALL_OW 7
// if IsOk ( Frank ) then
10424: LD_EXP 5
10428: PPUSH
10429: CALL_OW 302
10433: IFFALSE 10495
// begin SetSide ( Frank , 0 ) ;
10435: LD_EXP 5
10439: PPUSH
10440: LD_INT 0
10442: PPUSH
10443: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10447: LD_EXP 5
10451: PPUSH
10452: LD_INT 12
10454: PPUSH
10455: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10459: LD_EXP 5
10463: PPUSH
10464: LD_STRING 04t_Frank
10466: PPUSH
10467: CALL_OW 38
// wait ( 0 0$3 ) ;
10471: LD_INT 105
10473: PPUSH
10474: CALL_OW 67
// frankScoutBase = 1 ;
10478: LD_ADDR_EXP 25
10482: PUSH
10483: LD_INT 1
10485: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10486: LD_EXP 5
10490: PPUSH
10491: CALL_OW 64
// end ; end ; end ;
10495: PPOPN 1
10497: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
10498: LD_EXP 13
10502: PPUSH
10503: CALL_OW 255
10507: PUSH
10508: LD_INT 4
10510: EQUAL
10511: IFFALSE 10524
10513: PUSH
10514: LD_EXP 13
10518: PPUSH
10519: CALL_OW 302
10523: AND
10524: IFFALSE 10768
10526: GO 10528
10528: DISABLE
10529: LD_INT 0
10531: PPUSH
10532: PPUSH
// begin wait ( 5 5$00 ) ;
10533: LD_INT 10500
10535: PPUSH
10536: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
10540: LD_EXP 13
10544: PPUSH
10545: CALL_OW 255
10549: PUSH
10550: LD_INT 1
10552: EQUAL
10553: IFTRUE 10566
10555: PUSH
10556: LD_EXP 13
10560: PPUSH
10561: CALL_OW 301
10565: OR
10566: IFFALSE 10570
// exit ;
10568: GO 10768
// SayRadio ( Donaldson , D3b-Don-1 ) ;
10570: LD_EXP 13
10574: PPUSH
10575: LD_STRING D3b-Don-1
10577: PPUSH
10578: CALL_OW 94
// donaldsonCoopAttack = 1 ;
10582: LD_ADDR_EXP 41
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
10590: LD_ADDR_VAR 0 2
10594: PUSH
10595: LD_INT 22
10597: PUSH
10598: LD_INT 4
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PPUSH
10605: CALL_OW 69
10609: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10610: LD_INT 35
10612: PPUSH
10613: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
10617: LD_VAR 0 2
10621: NOT
10622: IFTRUE 10654
10624: PUSH
10625: LD_INT 22
10627: PUSH
10628: LD_INT 6
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 101
10637: PUSH
10638: LD_INT 1
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PPUSH
10649: CALL_OW 69
10653: OR
10654: IFFALSE 10610
// if not tmp then
10656: LD_VAR 0 2
10660: NOT
10661: IFFALSE 10665
// exit ;
10663: GO 10768
// for i in tmp do
10665: LD_ADDR_VAR 0 1
10669: PUSH
10670: LD_VAR 0 2
10674: PUSH
10675: FOR_IN
10676: IFFALSE 10695
// ComAgressiveMove ( i , 52 , 64 ) ;
10678: LD_VAR 0 1
10682: PPUSH
10683: LD_INT 52
10685: PPUSH
10686: LD_INT 64
10688: PPUSH
10689: CALL_OW 114
10693: GO 10675
10695: POP
10696: POP
// wait ( 0 0$10 ) ;
10697: LD_INT 350
10699: PPUSH
10700: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
10704: LD_ADDR_VAR 0 1
10708: PUSH
10709: LD_INT 22
10711: PUSH
10712: LD_INT 4
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PPUSH
10719: CALL_OW 69
10723: PUSH
10724: LD_EXP 5
10728: DIFF
10729: PUSH
10730: FOR_IN
10731: IFFALSE 10747
// SetSide ( i , 1 ) ;
10733: LD_VAR 0 1
10737: PPUSH
10738: LD_INT 1
10740: PPUSH
10741: CALL_OW 235
10745: GO 10730
10747: POP
10748: POP
// if IsLive ( Donaldson ) then
10749: LD_EXP 13
10753: PPUSH
10754: CALL_OW 300
10758: IFFALSE 10768
// saveDonaldson := 1 ;
10760: LD_ADDR_EXP 24
10764: PUSH
10765: LD_INT 1
10767: ST_TO_ADDR
// end ;
10768: PPOPN 2
10770: END
// every 0 0$1 trigger IsOk ( Donaldson ) and not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
10771: LD_EXP 13
10775: PPUSH
10776: CALL_OW 302
10780: IFFALSE 10789
10782: PUSH
10783: LD_EXP 24
10787: NOT
10788: AND
10789: IFFALSE 10798
10791: PUSH
10792: LD_EXP 41
10796: NOT
10797: AND
10798: IFFALSE 10841
10800: PUSH
10801: LD_INT 26
10803: PPUSH
10804: LD_INT 22
10806: PUSH
10807: LD_INT 1
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: CALL_OW 70
10818: IFTRUE 10840
10820: PUSH
10821: LD_EXP 13
10825: PPUSH
10826: LD_EXP 1
10830: PPUSH
10831: CALL_OW 296
10835: PUSH
10836: LD_INT 6
10838: LESS
10839: OR
10840: AND
10841: IFFALSE 10896
10843: GO 10845
10845: DISABLE
10846: LD_INT 0
10848: PPUSH
// begin saveDonaldson := 1 ;
10849: LD_ADDR_EXP 24
10853: PUSH
10854: LD_INT 1
10856: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10857: LD_ADDR_VAR 0 1
10861: PUSH
10862: LD_INT 22
10864: PUSH
10865: LD_INT 4
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: PPUSH
10872: CALL_OW 69
10876: PUSH
10877: FOR_IN
10878: IFFALSE 10894
// SetSide ( i , 1 ) ;
10880: LD_VAR 0 1
10884: PPUSH
10885: LD_INT 1
10887: PPUSH
10888: CALL_OW 235
10892: GO 10877
10894: POP
10895: POP
// end ;
10896: PPOPN 1
10898: END
// every 0 0$1 trigger frankScoutBase do
10899: LD_EXP 25
10903: IFFALSE 11270
10905: GO 10907
10907: DISABLE
// begin wait ( 2 2$30 ) ;
10908: LD_INT 5250
10910: PPUSH
10911: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10915: LD_INT 35
10917: PPUSH
10918: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
10922: LD_INT 81
10924: PUSH
10925: LD_INT 4
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 92
10934: PUSH
10935: LD_INT 84
10937: PUSH
10938: LD_INT 28
10940: PUSH
10941: LD_INT 22
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PPUSH
10954: CALL_OW 69
10958: NOT
10959: IFFALSE 10915
// uc_side = 4 ;
10961: LD_ADDR_OWVAR 20
10965: PUSH
10966: LD_INT 4
10968: ST_TO_ADDR
// uc_nation = 1 ;
10969: LD_ADDR_OWVAR 21
10973: PUSH
10974: LD_INT 1
10976: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
10977: LD_ADDR_EXP 5
10981: PUSH
10982: LD_STRING 04t_Frank
10984: PPUSH
10985: CALL_OW 34
10989: ST_TO_ADDR
// if not Frank then
10990: LD_EXP 5
10994: NOT
10995: IFFALSE 10999
// exit ;
10997: GO 11270
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
10999: LD_EXP 5
11003: PPUSH
11004: LD_INT 13
11006: PPUSH
11007: LD_INT 0
11009: PPUSH
11010: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11014: LD_INT 35
11016: PPUSH
11017: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11021: LD_EXP 1
11025: PPUSH
11026: CALL_OW 310
11030: NOT
11031: IFFALSE 11051
11033: PUSH
11034: LD_EXP 1
11038: PPUSH
11039: LD_INT 4
11041: PPUSH
11042: CALL_OW 296
11046: PUSH
11047: LD_INT 20
11049: LESS
11050: AND
11051: IFFALSE 11084
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11053: LD_EXP 5
11057: PPUSH
11058: LD_EXP 1
11062: PPUSH
11063: CALL_OW 250
11067: PPUSH
11068: LD_EXP 1
11072: PPUSH
11073: CALL_OW 251
11077: PPUSH
11078: CALL_OW 111
11082: GO 11099
// ComMoveXY ( Frank , 51 , 15 ) ;
11084: LD_EXP 5
11088: PPUSH
11089: LD_INT 51
11091: PPUSH
11092: LD_INT 15
11094: PPUSH
11095: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11099: LD_EXP 5
11103: PPUSH
11104: LD_EXP 1
11108: PPUSH
11109: CALL_OW 296
11113: PUSH
11114: LD_INT 10
11116: LESS
11117: IFFALSE 11014
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11119: LD_EXP 1
11123: PUSH
11124: LD_EXP 5
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PPUSH
11133: CALL_OW 87
// DialogueOn ;
11137: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11141: LD_EXP 5
11145: PPUSH
11146: LD_STRING D3a-Frank-1
11148: PPUSH
11149: CALL_OW 88
// if Lisa then
11153: LD_EXP 4
11157: IFFALSE 11207
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11159: LD_EXP 4
11163: PPUSH
11164: LD_STRING D3a-Lisa-1
11166: PPUSH
11167: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11171: LD_EXP 5
11175: PPUSH
11176: LD_STRING D3a-Frank-2
11178: PPUSH
11179: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11183: LD_EXP 4
11187: PPUSH
11188: LD_STRING D3a-Lisa-2
11190: PPUSH
11191: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11195: LD_EXP 5
11199: PPUSH
11200: LD_STRING D3a-Frank-3
11202: PPUSH
11203: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11207: LD_EXP 1
11211: PPUSH
11212: LD_STRING D3a-JMM-3
11214: PPUSH
11215: CALL_OW 88
// DialogueOff ;
11219: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11223: LD_EXP 5
11227: PPUSH
11228: LD_INT 1
11230: PPUSH
11231: CALL_OW 235
// InGameOn ;
11235: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11239: LD_INT 1
11241: PPUSH
11242: LD_INT 7
11244: PPUSH
11245: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11249: LD_INT 93
11251: PPUSH
11252: LD_INT 91
11254: PPUSH
11255: CALL_OW 84
// wait ( 0 0$5 ) ;
11259: LD_INT 175
11261: PPUSH
11262: CALL_OW 67
// InGameOff ;
11266: CALL_OW 9
// end ;
11270: END
// every 12 12$0 trigger Difficulty > 1 do
11271: LD_OWVAR 67
11275: PUSH
11276: LD_INT 1
11278: GREATER
11279: IFFALSE 11303
11281: GO 11283
11283: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11284: LD_INT 24
11286: PPUSH
11287: LD_INT 24
11289: PPUSH
11290: LD_INT 1
11292: PPUSH
11293: LD_INT 1
11295: PPUSH
11296: LD_INT 53
11298: PPUSH
11299: CALL_OW 185
11303: END
// every 18 18$0 do
11304: GO 11306
11306: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11307: LD_EXP 14
11311: PPUSH
11312: LD_STRING D4-Har-1
11314: PPUSH
11315: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11319: LD_EXP 1
11323: PPUSH
11324: LD_STRING D4-JMM-1
11326: PPUSH
11327: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11331: LD_EXP 14
11335: PPUSH
11336: LD_STRING D4-Har-2
11338: PPUSH
11339: CALL_OW 94
// case Query ( Q1 ) of 1 :
11343: LD_STRING Q1
11345: PPUSH
11346: CALL_OW 97
11350: PUSH
11351: LD_INT 1
11353: DOUBLE
11354: EQUAL
11355: IFTRUE 11359
11357: GO 11418
11359: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11360: LD_EXP 1
11364: PPUSH
11365: LD_STRING D5-JMM-1
11367: PPUSH
11368: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11372: LD_EXP 14
11376: PPUSH
11377: LD_STRING D5-Har-1
11379: PPUSH
11380: CALL_OW 94
// timeToSupport = 10 10$0 ;
11384: LD_ADDR_EXP 28
11388: PUSH
11389: LD_INT 21000
11391: ST_TO_ADDR
// timerStatus = 2 ;
11392: LD_ADDR_EXP 29
11396: PUSH
11397: LD_INT 2
11399: ST_TO_ADDR
// startTimer = 1 ;
11400: LD_ADDR_EXP 30
11404: PUSH
11405: LD_INT 1
11407: ST_TO_ADDR
// harrAnswer = 1 ;
11408: LD_ADDR_EXP 26
11412: PUSH
11413: LD_INT 1
11415: ST_TO_ADDR
// end ; 2 :
11416: GO 11553
11418: LD_INT 2
11420: DOUBLE
11421: EQUAL
11422: IFTRUE 11426
11424: GO 11485
11426: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11427: LD_EXP 1
11431: PPUSH
11432: LD_STRING D5-JMM-2
11434: PPUSH
11435: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11439: LD_EXP 14
11443: PPUSH
11444: LD_STRING D5-Har-2
11446: PPUSH
11447: CALL_OW 94
// timeToSupport = 5 5$0 ;
11451: LD_ADDR_EXP 28
11455: PUSH
11456: LD_INT 10500
11458: ST_TO_ADDR
// timerStatus = 2 ;
11459: LD_ADDR_EXP 29
11463: PUSH
11464: LD_INT 2
11466: ST_TO_ADDR
// startTimer = 1 ;
11467: LD_ADDR_EXP 30
11471: PUSH
11472: LD_INT 1
11474: ST_TO_ADDR
// harrAnswer = 2 ;
11475: LD_ADDR_EXP 26
11479: PUSH
11480: LD_INT 2
11482: ST_TO_ADDR
// end ; 3 :
11483: GO 11553
11485: LD_INT 3
11487: DOUBLE
11488: EQUAL
11489: IFTRUE 11493
11491: GO 11552
11493: POP
// begin Say ( JMM , D5-JMM-3 ) ;
11494: LD_EXP 1
11498: PPUSH
11499: LD_STRING D5-JMM-3
11501: PPUSH
11502: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
11506: LD_EXP 14
11510: PPUSH
11511: LD_STRING D5-Har-3
11513: PPUSH
11514: CALL_OW 94
// timeToSupport = 5 5$0 ;
11518: LD_ADDR_EXP 28
11522: PUSH
11523: LD_INT 10500
11525: ST_TO_ADDR
// timerStatus = 2 ;
11526: LD_ADDR_EXP 29
11530: PUSH
11531: LD_INT 2
11533: ST_TO_ADDR
// startTimer = 1 ;
11534: LD_ADDR_EXP 30
11538: PUSH
11539: LD_INT 1
11541: ST_TO_ADDR
// harrAnswer = 3 ;
11542: LD_ADDR_EXP 26
11546: PUSH
11547: LD_INT 3
11549: ST_TO_ADDR
// end ; end ;
11550: GO 11553
11552: POP
// end ;
11553: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
11554: LD_EXP 29
11558: PUSH
11559: LD_INT 2
11561: EQUAL
11562: IFFALSE 11574
11564: PUSH
11565: LD_EXP 28
11569: PUSH
11570: LD_INT 0
11572: EQUAL
11573: AND
11574: IFFALSE 11863
11576: GO 11578
11578: DISABLE
// begin timerStatus = 4 ;
11579: LD_ADDR_EXP 29
11583: PUSH
11584: LD_INT 4
11586: ST_TO_ADDR
// if harrAnswer = 1 then
11587: LD_EXP 26
11591: PUSH
11592: LD_INT 1
11594: EQUAL
11595: IFFALSE 11679
// begin PrepareHarrisonSupport ( 3 ) ;
11597: LD_INT 3
11599: PPUSH
11600: CALL 1749 0 1
// wait ( 1 1$0 ) ;
11604: LD_INT 2100
11606: PPUSH
11607: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
11611: LD_EXP 14
11615: PPUSH
11616: LD_STRING D7-Har-1
11618: PPUSH
11619: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
11623: LD_STRING M2
11625: PPUSH
11626: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
11630: LD_ADDR_EXP 27
11634: PUSH
11635: LD_INT 31500
11637: PUSH
11638: LD_INT 10500
11640: PUSH
11641: LD_INT 8400
11643: PUSH
11644: LD_INT 6300
11646: PUSH
11647: LD_INT 6300
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: PUSH
11656: LD_OWVAR 67
11660: ARRAY
11661: PLUS
11662: ST_TO_ADDR
// startTimer = 1 ;
11663: LD_ADDR_EXP 30
11667: PUSH
11668: LD_INT 1
11670: ST_TO_ADDR
// timerStatus = 3 ;
11671: LD_ADDR_EXP 29
11675: PUSH
11676: LD_INT 3
11678: ST_TO_ADDR
// end ; if harrAnswer = 2 then
11679: LD_EXP 26
11683: PUSH
11684: LD_INT 2
11686: EQUAL
11687: IFFALSE 11771
// begin PrepareHarrisonSupport ( 4 ) ;
11689: LD_INT 4
11691: PPUSH
11692: CALL 1749 0 1
// wait ( 1 1$0 ) ;
11696: LD_INT 2100
11698: PPUSH
11699: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
11703: LD_EXP 14
11707: PPUSH
11708: LD_STRING D7-Har-1
11710: PPUSH
11711: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
11715: LD_STRING M2
11717: PPUSH
11718: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
11722: LD_ADDR_EXP 27
11726: PUSH
11727: LD_INT 33600
11729: PUSH
11730: LD_INT 10500
11732: PUSH
11733: LD_INT 8400
11735: PUSH
11736: LD_INT 6300
11738: PUSH
11739: LD_INT 5250
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: PUSH
11748: LD_OWVAR 67
11752: ARRAY
11753: PLUS
11754: ST_TO_ADDR
// startTimer = 1 ;
11755: LD_ADDR_EXP 30
11759: PUSH
11760: LD_INT 1
11762: ST_TO_ADDR
// timerStatus = 3 ;
11763: LD_ADDR_EXP 29
11767: PUSH
11768: LD_INT 3
11770: ST_TO_ADDR
// end ; if harrAnswer = 3 then
11771: LD_EXP 26
11775: PUSH
11776: LD_INT 3
11778: EQUAL
11779: IFFALSE 11863
// begin PrepareHarrisonSupport ( 5 ) ;
11781: LD_INT 5
11783: PPUSH
11784: CALL 1749 0 1
// wait ( 1 1$0 ) ;
11788: LD_INT 2100
11790: PPUSH
11791: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
11795: LD_EXP 14
11799: PPUSH
11800: LD_STRING D7-Har-1
11802: PPUSH
11803: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
11807: LD_STRING M2
11809: PPUSH
11810: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
11814: LD_ADDR_EXP 27
11818: PUSH
11819: LD_INT 35700
11821: PUSH
11822: LD_INT 10500
11824: PUSH
11825: LD_INT 6300
11827: PUSH
11828: LD_INT 4200
11830: PUSH
11831: LD_INT 3150
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: PUSH
11840: LD_OWVAR 67
11844: ARRAY
11845: PLUS
11846: ST_TO_ADDR
// startTimer = 1 ;
11847: LD_ADDR_EXP 30
11851: PUSH
11852: LD_INT 1
11854: ST_TO_ADDR
// timerStatus = 3 ;
11855: LD_ADDR_EXP 29
11859: PUSH
11860: LD_INT 3
11862: ST_TO_ADDR
// end ; end ;
11863: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
11864: LD_EXP 27
11868: PUSH
11869: LD_INT 8400
11871: LESSEQUAL
11872: IFFALSE 11884
11874: PUSH
11875: LD_EXP 29
11879: PUSH
11880: LD_INT 3
11882: EQUAL
11883: AND
11884: IFFALSE 11916
11886: GO 11888
11888: DISABLE
// begin DialogueOn ;
11889: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
11893: LD_EXP 14
11897: PPUSH
11898: LD_STRING D7a-Har-1
11900: PPUSH
11901: CALL_OW 94
// DialogueOff ;
11905: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
11909: LD_STRING M2a
11911: PPUSH
11912: CALL_OW 337
// end ;
11916: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
11917: LD_EXP 27
11921: PUSH
11922: LD_INT 0
11924: LESSEQUAL
11925: IFFALSE 11937
11927: PUSH
11928: LD_EXP 29
11932: PUSH
11933: LD_INT 3
11935: EQUAL
11936: AND
11937: IFFALSE 11946
11939: PUSH
11940: LD_EXP 40
11944: NOT
11945: AND
11946: IFFALSE 12085
11948: GO 11950
11950: DISABLE
11951: LD_INT 0
11953: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
11954: LD_ADDR_VAR 0 1
11958: PUSH
11959: LD_INT 22
11961: PUSH
11962: LD_INT 1
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PPUSH
11969: CALL_OW 69
11973: PUSH
11974: LD_EXP 1
11978: PUSH
11979: EMPTY
11980: LIST
11981: DIFF
11982: ST_TO_ADDR
// saveDonaldson := 2 ;
11983: LD_ADDR_EXP 24
11987: PUSH
11988: LD_INT 2
11990: ST_TO_ADDR
// DialogueOn ;
11991: CALL_OW 6
// if IsOk ( Donaldson ) then
11995: LD_EXP 13
11999: PPUSH
12000: CALL_OW 302
12004: IFFALSE 12020
// SayRadio ( Harisson , D8-Har-1 ) else
12006: LD_EXP 14
12010: PPUSH
12011: LD_STRING D8-Har-1
12013: PPUSH
12014: CALL_OW 94
12018: GO 12032
// SayRadio ( Harisson , D8-Har-1a ) ;
12020: LD_EXP 14
12024: PPUSH
12025: LD_STRING D8-Har-1a
12027: PPUSH
12028: CALL_OW 94
// DialogueOff ;
12032: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12036: LD_VAR 0 1
12040: PPUSH
12041: LD_INT 4
12043: PPUSH
12044: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12048: LD_VAR 0 1
12052: PPUSH
12053: LD_INT 88
12055: PPUSH
12056: LD_INT 89
12058: PPUSH
12059: CALL_OW 114
// reliefOfCommand := true ;
12063: LD_ADDR_EXP 48
12067: PUSH
12068: LD_INT 1
12070: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12071: LD_INT 350
12073: PPUSH
12074: CALL_OW 67
// YouLost ( LostCommand ) ;
12078: LD_STRING LostCommand
12080: PPUSH
12081: CALL_OW 104
// end ;
12085: PPOPN 1
12087: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12088: LD_INT 22
12090: PUSH
12091: LD_INT 6
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 21
12100: PUSH
12101: LD_INT 1
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PPUSH
12112: CALL_OW 69
12116: PUSH
12117: LD_INT 0
12119: EQUAL
12120: IFFALSE 12132
12122: PUSH
12123: LD_EXP 20
12127: PUSH
12128: LD_INT 0
12130: EQUAL
12131: AND
12132: IFFALSE 12144
12134: PUSH
12135: LD_EXP 44
12139: PUSH
12140: LD_INT 1
12142: EQUAL
12143: AND
12144: IFFALSE 12238
12146: GO 12148
12148: DISABLE
12149: LD_INT 0
12151: PPUSH
12152: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12153: LD_ADDR_VAR 0 2
12157: PUSH
12158: LD_INT 22
12160: PUSH
12161: LD_INT 1
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 21
12170: PUSH
12171: LD_INT 1
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 23
12180: PUSH
12181: LD_INT 1
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: PPUSH
12193: CALL_OW 69
12197: ST_TO_ADDR
// for i in tmp do
12198: LD_ADDR_VAR 0 1
12202: PUSH
12203: LD_VAR 0 2
12207: PUSH
12208: FOR_IN
12209: IFFALSE 12236
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12211: LD_VAR 0 1
12215: PPUSH
12216: LD_INT 1
12218: PPUSH
12219: LD_INT 4
12221: PPUSH
12222: CALL_OW 12
12226: PPUSH
12227: LD_INT 500
12229: PPUSH
12230: CALL_OW 492
12234: GO 12208
12236: POP
12237: POP
// end ; end_of_file
12238: PPOPN 2
12240: END
// every 0 0$1 trigger AIEnable do
12241: LD_EXP 37
12245: IFFALSE 12341
12247: GO 12249
12249: DISABLE
// begin enable ;
12250: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12251: LD_INT 3
12253: PPUSH
12254: LD_INT 21
12256: PPUSH
12257: LD_INT 7
12259: PPUSH
12260: CALL 6075 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12264: LD_INT 3
12266: PPUSH
12267: LD_INT 8
12269: PPUSH
12270: LD_INT 7
12272: PPUSH
12273: LD_INT 1
12275: PPUSH
12276: CALL 6387 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12280: LD_EXP 20
12284: PUSH
12285: LD_INT 2
12287: EQUAL
12288: IFFALSE 12306
12290: PUSH
12291: LD_INT 22
12293: PUSH
12294: LD_INT 6
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PPUSH
12301: CALL_OW 69
12305: AND
12306: IFFALSE 12341
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12308: LD_INT 6
12310: PPUSH
12311: LD_EXP 21
12315: PPUSH
12316: LD_INT 6
12318: PPUSH
12319: CALL 6075 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12323: LD_INT 6
12325: PPUSH
12326: LD_INT 9
12328: PPUSH
12329: LD_INT 6
12331: PPUSH
12332: LD_EXP 22
12336: PPUSH
12337: CALL 6387 0 4
// end ; end ;
12341: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12342: LD_EXP 15
12346: PPUSH
12347: CALL_OW 310
12351: NOT
12352: IFFALSE 12363
12354: PUSH
12355: LD_INT 21
12357: PPUSH
12358: CALL_OW 302
12362: AND
12363: IFFALSE 12378
12365: PUSH
12366: LD_INT 21
12368: PPUSH
12369: CALL_OW 255
12373: PUSH
12374: LD_INT 3
12376: EQUAL
12377: AND
12378: IFFALSE 12395
12380: GO 12382
12382: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12383: LD_EXP 15
12387: PPUSH
12388: LD_INT 21
12390: PPUSH
12391: CALL_OW 120
12395: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12396: LD_INT 22
12398: PUSH
12399: LD_INT 3
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PUSH
12406: LD_INT 21
12408: PUSH
12409: LD_INT 2
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 55
12418: PUSH
12419: EMPTY
12420: LIST
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 69
12431: PUSH
12432: LD_INT 0
12434: EQUAL
12435: IFFALSE 12450
12437: PUSH
12438: LD_INT 1
12440: PPUSH
12441: CALL_OW 255
12445: PUSH
12446: LD_INT 3
12448: EQUAL
12449: AND
12450: IFFALSE 12461
12452: PUSH
12453: LD_INT 21
12455: PPUSH
12456: CALL_OW 302
12460: AND
12461: IFFALSE 12476
12463: PUSH
12464: LD_INT 21
12466: PPUSH
12467: CALL_OW 255
12471: PUSH
12472: LD_INT 3
12474: EQUAL
12475: AND
12476: IFFALSE 12487
12478: PUSH
12479: LD_INT 21
12481: PPUSH
12482: CALL_OW 302
12486: AND
12487: IFFALSE 12699
12489: GO 12491
12491: DISABLE
// begin enable ;
12492: ENABLE
// if Difficulty = 1 then
12493: LD_OWVAR 67
12497: PUSH
12498: LD_INT 1
12500: EQUAL
12501: IFFALSE 12545
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
12503: LD_INT 3
12505: PPUSH
12506: LD_INT 24
12508: PPUSH
12509: LD_OWVAR 67
12513: PUSH
12514: LD_INT 2
12516: PLUS
12517: PPUSH
12518: LD_INT 42
12520: PUSH
12521: LD_INT 44
12523: PUSH
12524: LD_INT 43
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: LIST
12531: PPUSH
12532: LD_INT 1
12534: PPUSH
12535: LD_INT 1
12537: PPUSH
12538: LD_INT 21
12540: PPUSH
12541: CALL 6904 0 7
// if Difficulty = 2 then
12545: LD_OWVAR 67
12549: PUSH
12550: LD_INT 2
12552: EQUAL
12553: IFFALSE 12620
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
12555: LD_INT 3
12557: PPUSH
12558: LD_INT 24
12560: PPUSH
12561: LD_OWVAR 67
12565: PUSH
12566: LD_INT 2
12568: PLUS
12569: PPUSH
12570: LD_INT 44
12572: PUSH
12573: LD_INT 44
12575: PUSH
12576: LD_INT 43
12578: PUSH
12579: LD_INT 43
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: LD_INT 1
12593: PPUSH
12594: LD_INT 21
12596: PUSH
12597: LD_INT 22
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PUSH
12604: LD_INT 1
12606: PPUSH
12607: LD_INT 2
12609: PPUSH
12610: CALL_OW 12
12614: ARRAY
12615: PPUSH
12616: CALL 6904 0 7
// if Difficulty >= 3 then
12620: LD_OWVAR 67
12624: PUSH
12625: LD_INT 3
12627: GREATEREQUAL
12628: IFFALSE 12699
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
12630: LD_INT 3
12632: PPUSH
12633: LD_INT 24
12635: PPUSH
12636: LD_OWVAR 67
12640: PUSH
12641: LD_INT 2
12643: PPUSH
12644: LD_INT 3
12646: PPUSH
12647: CALL_OW 12
12651: PLUS
12652: PPUSH
12653: LD_INT 44
12655: PUSH
12656: LD_INT 44
12658: PUSH
12659: LD_INT 43
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: LD_INT 1
12672: PPUSH
12673: LD_INT 22
12675: PUSH
12676: LD_INT 23
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PUSH
12683: LD_INT 1
12685: PPUSH
12686: LD_INT 2
12688: PPUSH
12689: CALL_OW 12
12693: ARRAY
12694: PPUSH
12695: CALL 6904 0 7
// end ;
12699: END
// every 0 0$1 do
12700: GO 12702
12702: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
12703: LD_INT 3
12705: PPUSH
12706: LD_INT 1
12708: PPUSH
12709: LD_INT 3
12711: PPUSH
12712: CALL 5994 0 3
12716: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
12717: LD_EXP 20
12721: PUSH
12722: LD_INT 1
12724: EQUAL
12725: IFFALSE 12872
12727: GO 12729
12729: DISABLE
12730: LD_INT 0
12732: PPUSH
12733: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
12734: LD_ADDR_VAR 0 2
12738: PUSH
12739: LD_INT 22
12741: PUSH
12742: LD_INT 6
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PUSH
12749: LD_INT 21
12751: PUSH
12752: LD_INT 2
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PUSH
12759: LD_INT 34
12761: PUSH
12762: LD_INT 51
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: PPUSH
12774: CALL_OW 69
12778: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
12779: LD_VAR 0 2
12783: PUSH
12784: LD_INT 1
12786: ARRAY
12787: PPUSH
12788: LD_EXP 21
12792: PPUSH
12793: CALL_OW 250
12797: PUSH
12798: LD_INT 5
12800: MINUS
12801: PPUSH
12802: LD_EXP 21
12806: PPUSH
12807: CALL_OW 251
12811: PUSH
12812: LD_INT 5
12814: MINUS
12815: PPUSH
12816: CALL_OW 111
// wait ( 0 0$5 ) ;
12820: LD_INT 175
12822: PPUSH
12823: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
12827: LD_VAR 0 2
12831: PUSH
12832: LD_INT 1
12834: ARRAY
12835: PPUSH
12836: LD_INT 41
12838: PPUSH
12839: LD_INT 52
12841: PPUSH
12842: CALL_OW 177
// wait ( 0 0$40 ) ;
12846: LD_INT 1400
12848: PPUSH
12849: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
12853: LD_VAR 0 2
12857: PUSH
12858: LD_INT 1
12860: ARRAY
12861: PPUSH
12862: LD_INT 41
12864: PPUSH
12865: LD_INT 44
12867: PPUSH
12868: CALL_OW 111
// end ;
12872: PPOPN 2
12874: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
12875: LD_EXP 21
12879: PPUSH
12880: CALL_OW 274
12884: PPUSH
12885: LD_INT 1
12887: PPUSH
12888: CALL_OW 275
12892: PUSH
12893: LD_INT 100
12895: GREATEREQUAL
12896: IFFALSE 13124
12898: GO 12900
12900: DISABLE
12901: LD_INT 0
12903: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
12904: LD_ADDR_VAR 0 1
12908: PUSH
12909: LD_INT 22
12911: PUSH
12912: LD_INT 6
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PUSH
12919: LD_INT 21
12921: PUSH
12922: LD_INT 1
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 25
12931: PUSH
12932: LD_INT 2
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: PPUSH
12944: CALL_OW 69
12948: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
12949: LD_VAR 0 1
12953: PUSH
12954: LD_INT 1
12956: ARRAY
12957: PPUSH
12958: LD_INT 4
12960: PPUSH
12961: LD_INT 39
12963: PPUSH
12964: LD_INT 37
12966: PPUSH
12967: LD_INT 3
12969: PPUSH
12970: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
12974: LD_VAR 0 1
12978: PUSH
12979: LD_INT 1
12981: ARRAY
12982: PPUSH
12983: LD_INT 29
12985: PPUSH
12986: LD_INT 42
12988: PPUSH
12989: LD_INT 54
12991: PPUSH
12992: LD_INT 3
12994: PPUSH
12995: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
12999: LD_VAR 0 1
13003: PUSH
13004: LD_INT 1
13006: ARRAY
13007: PPUSH
13008: LD_INT 6
13010: PPUSH
13011: LD_INT 38
13013: PPUSH
13014: LD_INT 48
13016: PPUSH
13017: LD_INT 0
13019: PPUSH
13020: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13024: LD_VAR 0 1
13028: PUSH
13029: LD_INT 1
13031: ARRAY
13032: PPUSH
13033: LD_INT 2
13035: PPUSH
13036: LD_INT 32
13038: PPUSH
13039: LD_INT 38
13041: PPUSH
13042: LD_INT 2
13044: PPUSH
13045: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13049: LD_VAR 0 1
13053: PUSH
13054: LD_INT 1
13056: ARRAY
13057: PPUSH
13058: LD_INT 26
13060: PPUSH
13061: LD_INT 39
13063: PPUSH
13064: LD_INT 55
13066: PPUSH
13067: LD_INT 3
13069: PPUSH
13070: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13074: LD_VAR 0 1
13078: PUSH
13079: LD_INT 1
13081: ARRAY
13082: PPUSH
13083: LD_INT 32
13085: PPUSH
13086: LD_INT 31
13088: PPUSH
13089: LD_INT 31
13091: PPUSH
13092: LD_INT 3
13094: PPUSH
13095: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13099: LD_VAR 0 1
13103: PUSH
13104: LD_INT 1
13106: ARRAY
13107: PPUSH
13108: LD_INT 31
13110: PPUSH
13111: LD_INT 50
13113: PPUSH
13114: LD_INT 51
13116: PPUSH
13117: LD_INT 4
13119: PPUSH
13120: CALL_OW 205
// end ;
13124: PPOPN 1
13126: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13127: LD_EXP 46
13131: IFFALSE 13777
13133: GO 13135
13135: DISABLE
13136: LD_INT 0
13138: PPUSH
13139: PPUSH
13140: PPUSH
// begin enable ;
13141: ENABLE
// if not ruMobile then
13142: LD_EXP 46
13146: NOT
13147: IFFALSE 13151
// exit ;
13149: GO 13777
// for i in ruMobile do
13151: LD_ADDR_VAR 0 1
13155: PUSH
13156: LD_EXP 46
13160: PUSH
13161: FOR_IN
13162: IFFALSE 13775
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13164: LD_VAR 0 1
13168: PPUSH
13169: CALL_OW 302
13173: NOT
13174: IFTRUE 13191
13176: PUSH
13177: LD_VAR 0 1
13181: PPUSH
13182: CALL_OW 255
13186: PUSH
13187: LD_INT 3
13189: NONEQUAL
13190: OR
13191: IFFALSE 13211
// begin ruMobile := ruMobile diff i ;
13193: LD_ADDR_EXP 46
13197: PUSH
13198: LD_EXP 46
13202: PUSH
13203: LD_VAR 0 1
13207: DIFF
13208: ST_TO_ADDR
// continue ;
13209: GO 13161
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13211: LD_VAR 0 1
13215: PPUSH
13216: CALL_OW 110
13220: NOT
13221: IFTRUE 13238
13223: PUSH
13224: LD_VAR 0 1
13228: PPUSH
13229: CALL_OW 110
13233: PUSH
13234: LD_INT 0
13236: EQUAL
13237: OR
13238: IFFALSE 13434
// begin if GetFuel ( i ) < 50 then
13240: LD_VAR 0 1
13244: PPUSH
13245: CALL_OW 261
13249: PUSH
13250: LD_INT 50
13252: LESS
13253: IFFALSE 13312
// begin ComMoveXY ( i , 106 , 88 ) ;
13255: LD_VAR 0 1
13259: PPUSH
13260: LD_INT 106
13262: PPUSH
13263: LD_INT 88
13265: PPUSH
13266: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13270: LD_INT 35
13272: PPUSH
13273: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13277: LD_VAR 0 1
13281: PPUSH
13282: LD_INT 106
13284: PPUSH
13285: LD_INT 88
13287: PPUSH
13288: CALL_OW 297
13292: PUSH
13293: LD_INT 4
13295: LESS
13296: IFFALSE 13270
// SetFuel ( i , 100 ) ;
13298: LD_VAR 0 1
13302: PPUSH
13303: LD_INT 100
13305: PPUSH
13306: CALL_OW 240
// end else
13310: GO 13434
// if not IsInArea ( i , ruParking ) and not IsInArea ( i , ruParking2 ) then
13312: LD_VAR 0 1
13316: PPUSH
13317: LD_INT 25
13319: PPUSH
13320: CALL_OW 308
13324: NOT
13325: IFFALSE 13342
13327: PUSH
13328: LD_VAR 0 1
13332: PPUSH
13333: LD_INT 27
13335: PPUSH
13336: CALL_OW 308
13340: NOT
13341: AND
13342: IFFALSE 13422
// begin if not FilterUnitsInArea ( ruHillArea , [ f_side , 1 ] ) then
13344: LD_INT 28
13346: PPUSH
13347: LD_INT 22
13349: PUSH
13350: LD_INT 1
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PPUSH
13357: CALL_OW 70
13361: NOT
13362: IFFALSE 13393
// begin if not IsInArea ( i , ruParking ) then
13364: LD_VAR 0 1
13368: PPUSH
13369: LD_INT 25
13371: PPUSH
13372: CALL_OW 308
13376: NOT
13377: IFFALSE 13391
// ComMoveToArea ( i , ruParking ) ;
13379: LD_VAR 0 1
13383: PPUSH
13384: LD_INT 25
13386: PPUSH
13387: CALL_OW 113
// end else
13391: GO 13420
// if not IsInArea ( i , ruParking2 ) then
13393: LD_VAR 0 1
13397: PPUSH
13398: LD_INT 27
13400: PPUSH
13401: CALL_OW 308
13405: NOT
13406: IFFALSE 13420
// ComMoveToArea ( i , ruParking2 ) ;
13408: LD_VAR 0 1
13412: PPUSH
13413: LD_INT 27
13415: PPUSH
13416: CALL_OW 113
// end else
13420: GO 13434
// SetTag ( i , 101 ) ;
13422: LD_VAR 0 1
13426: PPUSH
13427: LD_INT 101
13429: PPUSH
13430: CALL_OW 109
// end ; if GetTag ( i ) = 101 then
13434: LD_VAR 0 1
13438: PPUSH
13439: CALL_OW 110
13443: PUSH
13444: LD_INT 101
13446: EQUAL
13447: IFFALSE 13577
// begin if GetLives ( i ) < 650 then
13449: LD_VAR 0 1
13453: PPUSH
13454: CALL_OW 256
13458: PUSH
13459: LD_INT 650
13461: LESS
13462: IFFALSE 13554
// begin if not IsDrivenBy ( i ) then
13464: LD_VAR 0 1
13468: PPUSH
13469: CALL_OW 311
13473: NOT
13474: IFFALSE 13478
// continue ;
13476: GO 13161
// mech := IsDrivenBy ( i ) ;
13478: LD_ADDR_VAR 0 2
13482: PUSH
13483: LD_VAR 0 1
13487: PPUSH
13488: CALL_OW 311
13492: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13493: LD_VAR 0 2
13497: PPUSH
13498: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13502: LD_VAR 0 2
13506: PPUSH
13507: LD_VAR 0 1
13511: PPUSH
13512: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13516: LD_INT 35
13518: PPUSH
13519: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13523: LD_VAR 0 1
13527: PPUSH
13528: CALL_OW 256
13532: PUSH
13533: LD_INT 1000
13535: EQUAL
13536: IFFALSE 13516
// ComEnterUnit ( mech , i ) ;
13538: LD_VAR 0 2
13542: PPUSH
13543: LD_VAR 0 1
13547: PPUSH
13548: CALL_OW 120
// end else
13552: GO 13577
// if IsDrivenBy ( i ) then
13554: LD_VAR 0 1
13558: PPUSH
13559: CALL_OW 311
13563: IFFALSE 13577
// SetTag ( i , 102 ) ;
13565: LD_VAR 0 1
13569: PPUSH
13570: LD_INT 102
13572: PPUSH
13573: CALL_OW 109
// end ; if GetTag ( i ) = 102 then
13577: LD_VAR 0 1
13581: PPUSH
13582: CALL_OW 110
13586: PUSH
13587: LD_INT 102
13589: EQUAL
13590: IFFALSE 13773
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
13592: LD_ADDR_VAR 0 3
13596: PUSH
13597: LD_INT 24
13599: PPUSH
13600: LD_INT 81
13602: PUSH
13603: LD_INT 3
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PPUSH
13610: CALL_OW 70
13614: ST_TO_ADDR
// if GetLives ( i ) < 650 then
13615: LD_VAR 0 1
13619: PPUSH
13620: CALL_OW 256
13624: PUSH
13625: LD_INT 650
13627: LESS
13628: IFFALSE 13653
// begin ComStop ( i ) ;
13630: LD_VAR 0 1
13634: PPUSH
13635: CALL_OW 141
// SetTag ( i , 0 ) ;
13639: LD_VAR 0 1
13643: PPUSH
13644: LD_INT 0
13646: PPUSH
13647: CALL_OW 109
// continue ;
13651: GO 13161
// end ; if enemy then
13653: LD_VAR 0 3
13657: IFFALSE 13697
// begin if not HasTask ( i ) then
13659: LD_VAR 0 1
13663: PPUSH
13664: CALL_OW 314
13668: NOT
13669: IFFALSE 13695
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13671: LD_VAR 0 1
13675: PPUSH
13676: LD_VAR 0 3
13680: PPUSH
13681: LD_VAR 0 1
13685: PPUSH
13686: CALL_OW 74
13690: PPUSH
13691: CALL_OW 115
// end else
13695: GO 13773
// if ruMobile then
13697: LD_EXP 46
13701: IFFALSE 13773
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
13703: LD_ADDR_VAR 0 3
13707: PUSH
13708: LD_INT 81
13710: PUSH
13711: LD_INT 3
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PPUSH
13718: CALL_OW 69
13722: ST_TO_ADDR
// if enemy then
13723: LD_VAR 0 3
13727: IFFALSE 13773
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
13729: LD_VAR 0 1
13733: PPUSH
13734: LD_INT 95
13736: PUSH
13737: LD_INT 74
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 67
13746: PUSH
13747: LD_INT 59
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: LD_INT 55
13756: PUSH
13757: LD_INT 41
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: LIST
13768: PPUSH
13769: CALL 82118 0 2
// end ; end ; end ;
13773: GO 13161
13775: POP
13776: POP
// end ; end_of_file
13777: PPOPN 3
13779: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
13780: LD_INT 0
13782: PPUSH
13783: PPUSH
13784: PPUSH
13785: PPUSH
13786: PPUSH
13787: PPUSH
13788: PPUSH
// begin tmpSold := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
13789: LD_ADDR_VAR 0 3
13793: PUSH
13794: LD_INT 22
13796: PUSH
13797: LD_INT 6
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: LD_INT 21
13806: PUSH
13807: LD_INT 1
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PUSH
13814: LD_INT 25
13816: PUSH
13817: LD_INT 1
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 3
13826: PUSH
13827: LD_INT 54
13829: PUSH
13830: EMPTY
13831: LIST
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: PPUSH
13843: CALL_OW 69
13847: ST_TO_ADDR
// tmpSoldInside := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
13848: LD_ADDR_VAR 0 7
13852: PUSH
13853: LD_INT 22
13855: PUSH
13856: LD_INT 6
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PUSH
13863: LD_INT 21
13865: PUSH
13866: LD_INT 1
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 25
13875: PUSH
13876: LD_INT 1
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: LD_INT 54
13885: PUSH
13886: EMPTY
13887: LIST
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: PPUSH
13895: CALL_OW 69
13899: ST_TO_ADDR
// tmpEng := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13900: LD_ADDR_VAR 0 4
13904: PUSH
13905: LD_INT 22
13907: PUSH
13908: LD_INT 6
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: LD_INT 21
13917: PUSH
13918: LD_INT 1
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: LD_INT 25
13927: PUSH
13928: LD_INT 2
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: LIST
13939: PPUSH
13940: CALL_OW 69
13944: ST_TO_ADDR
// tmpSci := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
13945: LD_ADDR_VAR 0 6
13949: PUSH
13950: LD_INT 22
13952: PUSH
13953: LD_INT 6
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: LD_INT 21
13962: PUSH
13963: LD_INT 1
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: PUSH
13970: LD_INT 25
13972: PUSH
13973: LD_INT 4
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: LIST
13984: PPUSH
13985: CALL_OW 69
13989: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13990: LD_ADDR_VAR 0 8
13994: PUSH
13995: LD_INT 22
13997: PUSH
13998: LD_INT 6
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: LD_INT 21
14007: PUSH
14008: LD_INT 2
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: LD_INT 34
14017: PUSH
14018: LD_INT 51
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: PPUSH
14030: CALL_OW 69
14034: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14035: LD_VAR 0 1
14039: PPUSH
14040: CALL_OW 255
14044: PUSH
14045: LD_INT 6
14047: EQUAL
14048: IFFALSE 14065
14050: PUSH
14051: LD_VAR 0 1
14055: PPUSH
14056: CALL_OW 266
14060: PUSH
14061: LD_INT 0
14063: EQUAL
14064: AND
14065: IFFALSE 14085
// begin ruPDepot := building ;
14067: LD_ADDR_EXP 21
14071: PUSH
14072: LD_VAR 0 1
14076: ST_TO_ADDR
// baseReadyToBuild := 1 ;
14077: LD_ADDR_EXP 20
14081: PUSH
14082: LD_INT 1
14084: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14085: LD_VAR 0 1
14089: PPUSH
14090: CALL_OW 266
14094: PUSH
14095: LD_INT 4
14097: EQUAL
14098: IFFALSE 14115
14100: PUSH
14101: LD_VAR 0 1
14105: PPUSH
14106: CALL_OW 255
14110: PUSH
14111: LD_INT 6
14113: EQUAL
14114: AND
14115: IFFALSE 14148
// for i in tmpSold do
14117: LD_ADDR_VAR 0 2
14121: PUSH
14122: LD_VAR 0 3
14126: PUSH
14127: FOR_IN
14128: IFFALSE 14146
// ComEnterUnit ( i , building ) ;
14130: LD_VAR 0 2
14134: PPUSH
14135: LD_VAR 0 1
14139: PPUSH
14140: CALL_OW 120
14144: GO 14127
14146: POP
14147: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14148: LD_VAR 0 1
14152: PPUSH
14153: CALL_OW 266
14157: PUSH
14158: LD_INT 6
14160: EQUAL
14161: IFFALSE 14178
14163: PUSH
14164: LD_VAR 0 1
14168: PPUSH
14169: CALL_OW 255
14173: PUSH
14174: LD_INT 6
14176: EQUAL
14177: AND
14178: IFFALSE 14236
// begin for i in tmpSci do
14180: LD_ADDR_VAR 0 2
14184: PUSH
14185: LD_VAR 0 6
14189: PUSH
14190: FOR_IN
14191: IFFALSE 14209
// ComEnterUnit ( i , building ) ;
14193: LD_VAR 0 2
14197: PPUSH
14198: LD_VAR 0 1
14202: PPUSH
14203: CALL_OW 120
14207: GO 14190
14209: POP
14210: POP
// ResAllTechs ( 6 , building , 3 ) ;
14211: LD_INT 6
14213: PPUSH
14214: LD_VAR 0 1
14218: PPUSH
14219: LD_INT 3
14221: PPUSH
14222: CALL 5994 0 3
// ruPLab := building ;
14226: LD_ADDR_EXP 22
14230: PUSH
14231: LD_VAR 0 1
14235: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14236: LD_VAR 0 1
14240: PPUSH
14241: CALL_OW 266
14245: PUSH
14246: LD_INT 2
14248: EQUAL
14249: IFFALSE 14266
14251: PUSH
14252: LD_VAR 0 1
14256: PPUSH
14257: CALL_OW 255
14261: PUSH
14262: LD_INT 6
14264: EQUAL
14265: AND
14266: IFFALSE 14317
// begin tmpMeh := UnitsInside ( cargo [ 1 ] ) ;
14268: LD_ADDR_VAR 0 5
14272: PUSH
14273: LD_VAR 0 8
14277: PUSH
14278: LD_INT 1
14280: ARRAY
14281: PPUSH
14282: CALL_OW 313
14286: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14287: LD_VAR 0 5
14291: PPUSH
14292: CALL_OW 121
// wait ( 0 0$1 ) ;
14296: LD_INT 35
14298: PPUSH
14299: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14303: LD_VAR 0 5
14307: PPUSH
14308: LD_VAR 0 1
14312: PPUSH
14313: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14317: LD_VAR 0 1
14321: PPUSH
14322: CALL_OW 266
14326: PUSH
14327: LD_INT 32
14329: EQUAL
14330: IFFALSE 14347
14332: PUSH
14333: LD_VAR 0 1
14337: PPUSH
14338: CALL_OW 255
14342: PUSH
14343: LD_INT 6
14345: EQUAL
14346: AND
14347: IFFALSE 14399
// begin ComPlaceWeapon ( building , 42 ) ;
14349: LD_VAR 0 1
14353: PPUSH
14354: LD_INT 42
14356: PPUSH
14357: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14361: LD_VAR 0 7
14365: PUSH
14366: LD_INT 1
14368: ARRAY
14369: PPUSH
14370: CALL_OW 122
// wait ( 0 0$1 ) ;
14374: LD_INT 35
14376: PPUSH
14377: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14381: LD_VAR 0 7
14385: PUSH
14386: LD_INT 1
14388: ARRAY
14389: PPUSH
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14399: LD_VAR 0 1
14403: PPUSH
14404: CALL_OW 266
14408: PUSH
14409: LD_INT 31
14411: EQUAL
14412: IFFALSE 14429
14414: PUSH
14415: LD_VAR 0 1
14419: PPUSH
14420: CALL_OW 255
14424: PUSH
14425: LD_INT 6
14427: EQUAL
14428: AND
14429: IFFALSE 14495
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14431: LD_VAR 0 7
14435: PUSH
14436: LD_INT 2
14438: ARRAY
14439: PPUSH
14440: CALL_OW 122
// wait ( 0 0$1 ) ;
14444: LD_INT 35
14446: PPUSH
14447: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14451: LD_VAR 0 7
14455: PUSH
14456: LD_INT 2
14458: ARRAY
14459: PPUSH
14460: LD_VAR 0 1
14464: PPUSH
14465: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14469: LD_VAR 0 4
14473: PUSH
14474: LD_INT 1
14476: ARRAY
14477: PPUSH
14478: LD_EXP 21
14482: PPUSH
14483: CALL_OW 120
// baseReadyToBuild := 2 ;
14487: LD_ADDR_EXP 20
14491: PUSH
14492: LD_INT 2
14494: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 266
14504: PUSH
14505: LD_INT 32
14507: EQUAL
14508: IFFALSE 14525
14510: PUSH
14511: LD_VAR 0 1
14515: PPUSH
14516: CALL_OW 255
14520: PUSH
14521: LD_INT 1
14523: EQUAL
14524: AND
14525: IFFALSE 14537
14527: PUSH
14528: LD_EXP 32
14532: PUSH
14533: LD_INT 0
14535: EQUAL
14536: AND
14537: IFFALSE 14782
// begin bunkerDialog := 1 ;
14539: LD_ADDR_EXP 32
14543: PUSH
14544: LD_INT 1
14546: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14547: LD_EXP 11
14551: PPUSH
14552: CALL_OW 302
14556: IFFALSE 14572
// Say ( Claptopn , D11-Eng1-1 ) else
14558: LD_EXP 11
14562: PPUSH
14563: LD_STRING D11-Eng1-1
14565: PPUSH
14566: CALL_OW 88
14570: GO 14768
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14572: LD_INT 22
14574: PUSH
14575: LD_INT 1
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 21
14584: PUSH
14585: LD_INT 1
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 25
14594: PUSH
14595: LD_INT 3
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: LD_INT 26
14604: PUSH
14605: LD_INT 1
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: PPUSH
14618: CALL_OW 69
14622: PUSH
14623: LD_EXP 1
14627: PUSH
14628: EMPTY
14629: LIST
14630: PUSH
14631: LD_INT 0
14633: GREATER
14634: DIFF
14635: IFFALSE 14709
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
14637: LD_INT 22
14639: PUSH
14640: LD_INT 1
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 21
14649: PUSH
14650: LD_INT 1
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: LD_INT 25
14659: PUSH
14660: LD_INT 2
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 26
14669: PUSH
14670: LD_INT 1
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: PPUSH
14683: CALL_OW 69
14687: PUSH
14688: LD_EXP 1
14692: PUSH
14693: EMPTY
14694: LIST
14695: DIFF
14696: PPUSH
14697: LD_STRING D11-Eng1-1
14699: PPUSH
14700: LD_STRING D11-Eng1-1
14702: PPUSH
14703: CALL 4617 0 3
14707: GO 14768
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
14709: LD_INT 22
14711: PUSH
14712: LD_INT 1
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: LD_INT 21
14721: PUSH
14722: LD_INT 1
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 26
14731: PUSH
14732: LD_INT 1
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: LIST
14743: PPUSH
14744: CALL_OW 69
14748: PUSH
14749: LD_EXP 1
14753: PUSH
14754: EMPTY
14755: LIST
14756: DIFF
14757: PPUSH
14758: LD_STRING D11-Eng1-1
14760: PPUSH
14761: LD_STRING D11-Eng1-1
14763: PPUSH
14764: CALL 4617 0 3
// end ; if energyVDialog = 0 then
14768: LD_EXP 33
14772: PUSH
14773: LD_INT 0
14775: EQUAL
14776: IFFALSE 14782
// EnergyDialog ;
14778: CALL 5022 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
14782: LD_VAR 0 1
14786: PPUSH
14787: CALL_OW 266
14791: PUSH
14792: LD_INT 29
14794: EQUAL
14795: IFFALSE 14812
14797: PUSH
14798: LD_VAR 0 1
14802: PPUSH
14803: CALL_OW 255
14807: PUSH
14808: LD_INT 1
14810: EQUAL
14811: AND
14812: IFFALSE 14822
// buildOil := 1 ;
14814: LD_ADDR_EXP 34
14818: PUSH
14819: LD_INT 1
14821: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
14822: LD_VAR 0 1
14826: PPUSH
14827: CALL_OW 266
14831: PUSH
14832: LD_INT 26
14834: EQUAL
14835: IFFALSE 14852
14837: PUSH
14838: LD_VAR 0 1
14842: PPUSH
14843: CALL_OW 255
14847: PUSH
14848: LD_INT 1
14850: EQUAL
14851: AND
14852: IFFALSE 14862
// buildPower := 1 ;
14854: LD_ADDR_EXP 35
14858: PUSH
14859: LD_INT 1
14861: ST_TO_ADDR
// end ;
14862: PPOPN 8
14864: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
14865: LD_VAR 0 1
14869: PPUSH
14870: CALL_OW 266
14874: PUSH
14875: LD_INT 3
14877: EQUAL
14878: IFFALSE 14895
14880: PUSH
14881: LD_VAR 0 1
14885: PPUSH
14886: CALL_OW 255
14890: PUSH
14891: LD_INT 1
14893: EQUAL
14894: AND
14895: IFFALSE 14907
14897: PUSH
14898: LD_EXP 31
14902: PUSH
14903: LD_INT 0
14905: EQUAL
14906: AND
14907: IFFALSE 15257
// begin factoryDialog = 1 ;
14909: LD_ADDR_EXP 31
14913: PUSH
14914: LD_INT 1
14916: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
14917: LD_INT 47
14919: PPUSH
14920: LD_INT 1
14922: PPUSH
14923: CALL_OW 321
14927: PUSH
14928: LD_INT 1
14930: EQUAL
14931: IFFALSE 14949
14933: PUSH
14934: LD_INT 45
14936: PPUSH
14937: LD_INT 1
14939: PPUSH
14940: CALL_OW 321
14944: PUSH
14945: LD_INT 1
14947: EQUAL
14948: AND
14949: IFFALSE 15257
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
14951: LD_INT 22
14953: PUSH
14954: LD_INT 1
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: LD_INT 21
14963: PUSH
14964: LD_INT 3
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: LD_INT 30
14973: PUSH
14974: LD_INT 3
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 24
14983: PUSH
14984: LD_INT 1000
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: PPUSH
14997: CALL_OW 69
15001: PUSH
15002: LD_INT 1
15004: ARRAY
15005: PPUSH
15006: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15010: LD_EXP 1
15014: PPUSH
15015: LD_STRING D9a-JMM-1
15017: PPUSH
15018: CALL_OW 88
// if IsOK ( Campell ) then
15022: LD_EXP 12
15026: PPUSH
15027: CALL_OW 302
15031: IFFALSE 15047
// Say ( Campell , D9a-Mech1-1 ) else
15033: LD_EXP 12
15037: PPUSH
15038: LD_STRING D9a-Mech1-1
15040: PPUSH
15041: CALL_OW 88
15045: GO 15243
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15047: LD_INT 22
15049: PUSH
15050: LD_INT 1
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: LD_INT 21
15059: PUSH
15060: LD_INT 1
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: LD_INT 25
15069: PUSH
15070: LD_INT 3
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: LD_INT 26
15079: PUSH
15080: LD_INT 1
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: PPUSH
15093: CALL_OW 69
15097: PUSH
15098: LD_EXP 1
15102: PUSH
15103: EMPTY
15104: LIST
15105: PUSH
15106: LD_INT 0
15108: GREATER
15109: DIFF
15110: IFFALSE 15184
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15112: LD_INT 22
15114: PUSH
15115: LD_INT 1
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PUSH
15122: LD_INT 21
15124: PUSH
15125: LD_INT 1
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PUSH
15132: LD_INT 25
15134: PUSH
15135: LD_INT 3
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PUSH
15142: LD_INT 26
15144: PUSH
15145: LD_INT 1
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: PPUSH
15158: CALL_OW 69
15162: PUSH
15163: LD_EXP 1
15167: PUSH
15168: EMPTY
15169: LIST
15170: DIFF
15171: PPUSH
15172: LD_STRING D9a-Mech1-1
15174: PPUSH
15175: LD_STRING D9a-Mech1-1
15177: PPUSH
15178: CALL 4617 0 3
15182: GO 15243
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15184: LD_INT 22
15186: PUSH
15187: LD_INT 1
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 21
15196: PUSH
15197: LD_INT 1
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 26
15206: PUSH
15207: LD_INT 1
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: PPUSH
15219: CALL_OW 69
15223: PUSH
15224: LD_EXP 1
15228: PUSH
15229: EMPTY
15230: LIST
15231: DIFF
15232: PPUSH
15233: LD_STRING D9a-Mech1-1
15235: PPUSH
15236: LD_STRING D9a-Mech1-1
15238: PPUSH
15239: CALL 4617 0 3
// end ; if energyVDialog = 0 then
15243: LD_EXP 33
15247: PUSH
15248: LD_INT 0
15250: EQUAL
15251: IFFALSE 15257
// EnergyDialog ;
15253: CALL 5022 0 0
// end ; end ; end ;
15257: PPOPN 1
15259: END
// on UnitDestroyed ( unit ) do var mech ;
15260: LD_INT 0
15262: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15263: LD_VAR 0 1
15267: PPUSH
15268: CALL 35794 0 1
// if unit = JMM then
15272: LD_VAR 0 1
15276: PUSH
15277: LD_EXP 1
15281: EQUAL
15282: IFFALSE 15291
// YouLost ( JMM ) ;
15284: LD_STRING JMM
15286: PPUSH
15287: CALL_OW 104
// if unit = ambdept0 then
15291: LD_VAR 0 1
15295: PUSH
15296: LD_INT 4
15298: EQUAL
15299: IFFALSE 15308
// YouLost ( Base ) ;
15301: LD_STRING Base
15303: PPUSH
15304: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and IsInArea ( unit , ruDefArea ) then
15308: LD_VAR 0 1
15312: PPUSH
15313: CALL_OW 255
15317: PUSH
15318: LD_INT 1
15320: EQUAL
15321: IFFALSE 15338
15323: PUSH
15324: LD_VAR 0 1
15328: PPUSH
15329: CALL_OW 247
15333: PUSH
15334: LD_INT 1
15336: EQUAL
15337: AND
15338: IFFALSE 15354
15340: PUSH
15341: LD_VAR 0 1
15345: PPUSH
15346: LD_INT 24
15348: PPUSH
15349: CALL_OW 308
15353: AND
15354: IFFALSE 15364
// honor := false ;
15356: LD_ADDR_EXP 39
15360: PUSH
15361: LD_INT 0
15363: ST_TO_ADDR
// if unit in ruMobile then
15364: LD_VAR 0 1
15368: PUSH
15369: LD_EXP 46
15373: IN
15374: IFFALSE 15392
// ruMobile = ruMobile diff ruMobile ;
15376: LD_ADDR_EXP 46
15380: PUSH
15381: LD_EXP 46
15385: PUSH
15386: LD_EXP 46
15390: DIFF
15391: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 247
15401: PUSH
15402: LD_INT 1
15404: EQUAL
15405: IFFALSE 15422
15407: PUSH
15408: LD_VAR 0 1
15412: PPUSH
15413: CALL_OW 255
15417: PUSH
15418: LD_INT 1
15420: EQUAL
15421: AND
15422: IFFALSE 15438
// lostCounter = lostCounter + 1 ;
15424: LD_ADDR_EXP 38
15428: PUSH
15429: LD_EXP 38
15433: PUSH
15434: LD_INT 1
15436: PLUS
15437: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15438: LD_EXP 43
15442: IFFALSE 15457
15444: PUSH
15445: LD_INT 24
15447: PPUSH
15448: CALL_OW 313
15452: PUSH
15453: LD_INT 6
15455: LESS
15456: AND
15457: IFFALSE 15474
15459: PUSH
15460: LD_VAR 0 1
15464: PPUSH
15465: CALL_OW 257
15469: PUSH
15470: LD_INT 3
15472: EQUAL
15473: AND
15474: IFFALSE 15491
15476: PUSH
15477: LD_VAR 0 1
15481: PPUSH
15482: CALL_OW 255
15486: PUSH
15487: LD_INT 3
15489: EQUAL
15490: AND
15491: IFFALSE 15502
15493: PUSH
15494: LD_INT 24
15496: PPUSH
15497: CALL_OW 302
15501: AND
15502: IFFALSE 15517
15504: PUSH
15505: LD_INT 24
15507: PPUSH
15508: CALL_OW 255
15512: PUSH
15513: LD_INT 3
15515: EQUAL
15516: AND
15517: IFFALSE 15646
// begin ruMech := ruMech - 1 ;
15519: LD_ADDR_EXP 43
15523: PUSH
15524: LD_EXP 43
15528: PUSH
15529: LD_INT 1
15531: MINUS
15532: ST_TO_ADDR
// if ruMech = 0 then
15533: LD_EXP 43
15537: PUSH
15538: LD_INT 0
15540: EQUAL
15541: IFFALSE 15545
// exit ;
15543: GO 15646
// wait ( 0 0$40 ) ;
15545: LD_INT 1400
15547: PPUSH
15548: CALL_OW 67
// uc_side = 3 ;
15552: LD_ADDR_OWVAR 20
15556: PUSH
15557: LD_INT 3
15559: ST_TO_ADDR
// uc_nation = 3 ;
15560: LD_ADDR_OWVAR 21
15564: PUSH
15565: LD_INT 3
15567: ST_TO_ADDR
// hc_gallery :=  ;
15568: LD_ADDR_OWVAR 33
15572: PUSH
15573: LD_STRING 
15575: ST_TO_ADDR
// hc_name :=  ;
15576: LD_ADDR_OWVAR 26
15580: PUSH
15581: LD_STRING 
15583: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15584: LD_INT 0
15586: PPUSH
15587: LD_EXP 16
15591: PPUSH
15592: LD_EXP 17
15596: PPUSH
15597: CALL_OW 12
15601: PPUSH
15602: CALL_OW 383
// mech := CreateHuman ;
15606: LD_ADDR_VAR 0 2
15610: PUSH
15611: CALL_OW 44
15615: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15616: LD_VAR 0 2
15620: PPUSH
15621: LD_INT 124
15623: PPUSH
15624: LD_INT 97
15626: PPUSH
15627: LD_INT 0
15629: PPUSH
15630: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
15634: LD_VAR 0 2
15638: PPUSH
15639: LD_INT 24
15641: PPUSH
15642: CALL_OW 120
// end ; end ;
15646: PPOPN 2
15648: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15649: LD_INT 0
15651: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15652: LD_VAR 0 1
15656: PPUSH
15657: LD_VAR 0 2
15661: PPUSH
15662: CALL 35852 0 2
// if GetSide ( vehicle ) = 1 then
15666: LD_VAR 0 1
15670: PPUSH
15671: CALL_OW 255
15675: PUSH
15676: LD_INT 1
15678: EQUAL
15679: IFFALSE 15695
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
15681: LD_ADDR_EXP 42
15685: PUSH
15686: LD_EXP 42
15690: PUSH
15691: LD_INT 1
15693: PLUS
15694: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
15695: LD_VAR 0 1
15699: PPUSH
15700: CALL_OW 255
15704: PUSH
15705: LD_INT 3
15707: EQUAL
15708: IFFALSE 15736
15710: PUSH
15711: LD_VAR 0 1
15715: PPUSH
15716: CALL_OW 264
15720: PUSH
15721: LD_INT 42
15723: PUSH
15724: LD_INT 43
15726: PUSH
15727: LD_INT 44
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: LIST
15734: IN
15735: AND
15736: IFFALSE 15754
// ruMobile := ruMobile union vehicle ;
15738: LD_ADDR_EXP 46
15742: PUSH
15743: LD_EXP 46
15747: PUSH
15748: LD_VAR 0 1
15752: UNION
15753: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15754: LD_VAR 0 1
15758: PPUSH
15759: CALL_OW 264
15763: PUSH
15764: LD_INT 53
15766: EQUAL
15767: IFFALSE 15903
// begin uc_side = 3 ;
15769: LD_ADDR_OWVAR 20
15773: PUSH
15774: LD_INT 3
15776: ST_TO_ADDR
// uc_nation = 3 ;
15777: LD_ADDR_OWVAR 21
15781: PUSH
15782: LD_INT 3
15784: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
15785: LD_INT 0
15787: PPUSH
15788: LD_EXP 17
15792: PPUSH
15793: CALL_OW 383
// driver := CreateHuman ;
15797: LD_ADDR_VAR 0 3
15801: PUSH
15802: CALL_OW 44
15806: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
15807: LD_VAR 0 3
15811: PPUSH
15812: LD_VAR 0 2
15816: PPUSH
15817: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
15821: LD_VAR 0 1
15825: PPUSH
15826: LD_INT 21
15828: PPUSH
15829: CALL 5248 0 2
// repeat wait ( 0 0$1 ) ;
15833: LD_INT 35
15835: PPUSH
15836: CALL_OW 67
// until not HasTask ( vehicle ) ;
15840: LD_VAR 0 1
15844: PPUSH
15845: CALL_OW 314
15849: NOT
15850: IFFALSE 15833
// driver := IsDrivenBy ( vehicle ) ;
15852: LD_ADDR_VAR 0 3
15856: PUSH
15857: LD_VAR 0 1
15861: PPUSH
15862: CALL_OW 311
15866: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
15867: LD_VAR 0 3
15871: PPUSH
15872: LD_INT 104
15874: PPUSH
15875: LD_INT 73
15877: PPUSH
15878: CALL_OW 171
// AddComExitVehicle ( driver ) ;
15882: LD_VAR 0 3
15886: PPUSH
15887: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
15891: LD_VAR 0 3
15895: PPUSH
15896: LD_INT 24
15898: PPUSH
15899: CALL_OW 180
// end ; end ;
15903: PPOPN 3
15905: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
15906: LD_VAR 0 1
15910: PPUSH
15911: CALL_OW 255
15915: PUSH
15916: LD_INT 3
15918: EQUAL
15919: IFFALSE 15936
15921: PUSH
15922: LD_VAR 0 1
15926: PPUSH
15927: CALL_OW 247
15931: PUSH
15932: LD_INT 2
15934: EQUAL
15935: AND
15936: IFFALSE 15964
15938: PUSH
15939: LD_VAR 0 1
15943: PPUSH
15944: CALL_OW 264
15948: PUSH
15949: LD_INT 42
15951: PUSH
15952: LD_INT 43
15954: PUSH
15955: LD_INT 44
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: LIST
15962: IN
15963: AND
15964: IFFALSE 16013
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
15966: LD_INT 24
15968: PPUSH
15969: LD_VAR 0 1
15973: PPUSH
15974: CALL_OW 265
15978: PPUSH
15979: LD_VAR 0 1
15983: PPUSH
15984: CALL_OW 262
15988: PPUSH
15989: LD_VAR 0 1
15993: PPUSH
15994: CALL_OW 263
15998: PPUSH
15999: LD_VAR 0 1
16003: PPUSH
16004: CALL_OW 264
16008: PPUSH
16009: CALL_OW 185
// end ;
16013: PPOPN 1
16015: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16016: LD_VAR 0 1
16020: PPUSH
16021: CALL_OW 255
16025: PUSH
16026: LD_INT 3
16028: EQUAL
16029: IFFALSE 16046
16031: PUSH
16032: LD_VAR 0 2
16036: PPUSH
16037: CALL_OW 255
16041: PUSH
16042: LD_INT 3
16044: EQUAL
16045: AND
16046: IFFALSE 16057
16048: PUSH
16049: LD_INT 24
16051: PPUSH
16052: CALL_OW 302
16056: AND
16057: IFFALSE 16071
16059: PUSH
16060: LD_VAR 0 1
16064: PPUSH
16065: CALL_OW 302
16069: NOT
16070: AND
16071: IFFALSE 16085
// ComEnterUnit ( human , rubfact0 ) ;
16073: LD_VAR 0 2
16077: PPUSH
16078: LD_INT 24
16080: PPUSH
16081: CALL_OW 120
// end ;
16085: PPOPN 2
16087: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 and driver in ruSpecialAttackGroup then
16088: LD_VAR 0 1
16092: PPUSH
16093: CALL_OW 255
16097: PUSH
16098: LD_INT 3
16100: EQUAL
16101: IFFALSE 16115
16103: PUSH
16104: LD_VAR 0 1
16108: PUSH
16109: LD_EXP 52
16113: IN
16114: AND
16115: IFFALSE 16191
// begin repeat ComMoveXY ( driver , 125 , 97 ) ;
16117: LD_VAR 0 1
16121: PPUSH
16122: LD_INT 125
16124: PPUSH
16125: LD_INT 97
16127: PPUSH
16128: CALL_OW 111
// wait ( 0 0$1 ) ;
16132: LD_INT 35
16134: PPUSH
16135: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 125 , 97 ) ;
16139: LD_VAR 0 1
16143: PPUSH
16144: CALL_OW 301
16148: IFTRUE 16167
16150: PUSH
16151: LD_VAR 0 1
16155: PPUSH
16156: LD_INT 125
16158: PPUSH
16159: LD_INT 97
16161: PPUSH
16162: CALL_OW 307
16166: OR
16167: IFFALSE 16117
// if IsDead ( driver ) then
16169: LD_VAR 0 1
16173: PPUSH
16174: CALL_OW 301
16178: IFFALSE 16182
// exit ;
16180: GO 16191
// RemoveUnit ( driver ) ;
16182: LD_VAR 0 1
16186: PPUSH
16187: CALL_OW 64
// end ; end ;
16191: PPOPN 4
16193: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16194: LD_VAR 0 1
16198: PUSH
16199: LD_INT 24
16201: EQUAL
16202: IFFALSE 16219
16204: PUSH
16205: LD_VAR 0 2
16209: PPUSH
16210: CALL_OW 256
16214: PUSH
16215: LD_INT 1000
16217: LESS
16218: AND
16219: IFFALSE 16233
// SetLives ( un , 1000 ) ;
16221: LD_VAR 0 2
16225: PPUSH
16226: LD_INT 1000
16228: PPUSH
16229: CALL_OW 234
// end ;
16233: PPOPN 2
16235: END
// on Command ( comandid ) do var i , j , tmp ;
16236: LD_INT 0
16238: PPUSH
16239: PPUSH
16240: PPUSH
// begin SOS_Command ( comandid ) ;
16241: LD_VAR 0 1
16245: PPUSH
16246: CALL 35836 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16250: LD_INT 22
16252: PUSH
16253: LD_INT 4
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PPUSH
16260: CALL_OW 69
16264: NOT
16265: IFFALSE 16269
// exit ;
16267: GO 16436
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16269: LD_ADDR_VAR 0 2
16273: PUSH
16274: LD_INT 22
16276: PUSH
16277: LD_INT 1
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 2
16286: PUSH
16287: LD_INT 21
16289: PUSH
16290: LD_INT 1
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: LD_INT 21
16299: PUSH
16300: LD_INT 2
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: LIST
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PPUSH
16316: CALL_OW 69
16320: PUSH
16321: FOR_IN
16322: IFFALSE 16434
// begin if GetTaskList ( i ) > 0 then
16324: LD_VAR 0 2
16328: PPUSH
16329: CALL_OW 437
16333: PUSH
16334: LD_INT 0
16336: GREATER
16337: IFFALSE 16432
// begin for j = 1 to GetTaskList ( i ) do
16339: LD_ADDR_VAR 0 3
16343: PUSH
16344: DOUBLE
16345: LD_INT 1
16347: DEC
16348: ST_TO_ADDR
16349: LD_VAR 0 2
16353: PPUSH
16354: CALL_OW 437
16358: PUSH
16359: FOR_TO
16360: IFFALSE 16430
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16362: LD_ADDR_VAR 0 4
16366: PUSH
16367: LD_VAR 0 2
16371: PPUSH
16372: CALL_OW 437
16376: PUSH
16377: LD_VAR 0 3
16381: ARRAY
16382: PUSH
16383: LD_INT 4
16385: ARRAY
16386: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16387: LD_VAR 0 4
16391: PPUSH
16392: CALL_OW 255
16396: PUSH
16397: LD_INT 4
16399: EQUAL
16400: IFTRUE 16417
16402: PUSH
16403: LD_VAR 0 4
16407: PPUSH
16408: CALL_OW 255
16412: PUSH
16413: LD_INT 0
16415: EQUAL
16416: OR
16417: IFFALSE 16428
// ComStop ( i ) ;
16419: LD_VAR 0 2
16423: PPUSH
16424: CALL_OW 141
// end ;
16428: GO 16359
16430: POP
16431: POP
// end ; end ;
16432: GO 16321
16434: POP
16435: POP
// end ;
16436: PPOPN 4
16438: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
16439: LD_VAR 0 1
16443: PUSH
16444: LD_INT 22
16446: PUSH
16447: LD_INT 1
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 23
16456: PUSH
16457: LD_INT 1
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 21
16466: PUSH
16467: LD_INT 1
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: LIST
16478: PPUSH
16479: CALL_OW 69
16483: IN
16484: IFFALSE 16496
16486: PUSH
16487: LD_VAR 0 2
16491: PUSH
16492: LD_INT 1
16494: EQUAL
16495: AND
16496: IFFALSE 16502
// JMMTraitor ;
16498: CALL 8831 0 0
// end ; end_of_file
16502: PPOPN 3
16504: END
// every 10 10$0 do
16505: GO 16507
16507: DISABLE
// RespawnAttackInfantry ( 3 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16508: LD_INT 3
16510: PPUSH
16511: LD_INT 3
16513: PPUSH
16514: LD_INT 2
16516: PUSH
16517: LD_INT 2
16519: PUSH
16520: LD_INT 3
16522: PUSH
16523: LD_INT 4
16525: PUSH
16526: LD_INT 4
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: PUSH
16535: LD_OWVAR 67
16539: ARRAY
16540: PLUS
16541: PPUSH
16542: LD_INT 2
16544: PPUSH
16545: LD_EXP 16
16549: PPUSH
16550: LD_EXP 17
16554: PPUSH
16555: CALL_OW 12
16559: PPUSH
16560: LD_INT 4
16562: PPUSH
16563: LD_INT 14
16565: PPUSH
16566: LD_INT 1
16568: PPUSH
16569: LD_INT 2
16571: PPUSH
16572: CALL 7016 0 9
16576: END
// every 20 20$0 do
16577: GO 16579
16579: DISABLE
// RespawnAttackInfantry ( 3 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16580: LD_INT 3
16582: PPUSH
16583: LD_INT 3
16585: PPUSH
16586: LD_INT 4
16588: PUSH
16589: LD_INT 2
16591: PUSH
16592: LD_INT 3
16594: PUSH
16595: LD_INT 4
16597: PUSH
16598: LD_INT 5
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: PUSH
16607: LD_OWVAR 67
16611: ARRAY
16612: PLUS
16613: PPUSH
16614: LD_INT 2
16616: PPUSH
16617: LD_EXP 16
16621: PPUSH
16622: LD_EXP 17
16626: PPUSH
16627: CALL_OW 12
16631: PPUSH
16632: LD_INT 4
16634: PPUSH
16635: LD_INT 14
16637: PPUSH
16638: LD_INT 1
16640: PPUSH
16641: LD_INT 1
16643: PPUSH
16644: CALL 7016 0 9
16648: END
// export ruSpecialAttackGroup ; every 25 25$0 do var i , un , veh , hex , tmp ;
16649: GO 16651
16651: DISABLE
16652: LD_INT 0
16654: PPUSH
16655: PPUSH
16656: PPUSH
16657: PPUSH
16658: PPUSH
// begin ruSpecialAttackGroup := [ ] ;
16659: LD_ADDR_EXP 52
16663: PUSH
16664: EMPTY
16665: ST_TO_ADDR
// hex := [ 123 , 95 ] ;
16666: LD_ADDR_VAR 0 4
16670: PUSH
16671: LD_INT 123
16673: PUSH
16674: LD_INT 95
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: ST_TO_ADDR
// tmp := [ ] ;
16681: LD_ADDR_VAR 0 5
16685: PUSH
16686: EMPTY
16687: ST_TO_ADDR
// if Difficulty > 1 then
16688: LD_OWVAR 67
16692: PUSH
16693: LD_INT 1
16695: GREATER
16696: IFFALSE 16706
// specAttack := true ;
16698: LD_ADDR_EXP 47
16702: PUSH
16703: LD_INT 1
16705: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16706: LD_ADDR_VAR 0 1
16710: PUSH
16711: DOUBLE
16712: LD_INT 1
16714: DEC
16715: ST_TO_ADDR
16716: LD_INT 4
16718: PUSH
16719: LD_INT 5
16721: PUSH
16722: LD_INT 6
16724: PUSH
16725: LD_INT 7
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: PUSH
16734: LD_OWVAR 67
16738: ARRAY
16739: PUSH
16740: FOR_TO
16741: IFFALSE 17073
// begin uc_side := 3 ;
16743: LD_ADDR_OWVAR 20
16747: PUSH
16748: LD_INT 3
16750: ST_TO_ADDR
// uc_nation := 3 ;
16751: LD_ADDR_OWVAR 21
16755: PUSH
16756: LD_INT 3
16758: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16759: LD_ADDR_OWVAR 37
16763: PUSH
16764: LD_INT 21
16766: PUSH
16767: LD_INT 22
16769: PUSH
16770: LD_INT 23
16772: PUSH
16773: LD_INT 24
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: PUSH
16782: LD_VAR 0 1
16786: PUSH
16787: LD_OWVAR 67
16791: MOD
16792: PUSH
16793: LD_INT 1
16795: PLUS
16796: ARRAY
16797: ST_TO_ADDR
// vc_engine := engine_combustion ;
16798: LD_ADDR_OWVAR 39
16802: PUSH
16803: LD_INT 1
16805: ST_TO_ADDR
// vc_control := control_manual ;
16806: LD_ADDR_OWVAR 38
16810: PUSH
16811: LD_INT 1
16813: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16814: LD_ADDR_OWVAR 40
16818: PUSH
16819: LD_INT 42
16821: PUSH
16822: LD_INT 43
16824: PUSH
16825: LD_INT 44
16827: PUSH
16828: LD_INT 44
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: PUSH
16837: LD_VAR 0 1
16841: PUSH
16842: LD_OWVAR 67
16846: MOD
16847: PUSH
16848: LD_INT 1
16850: PLUS
16851: ARRAY
16852: ST_TO_ADDR
// veh := CreateVehicle ;
16853: LD_ADDR_VAR 0 3
16857: PUSH
16858: CALL_OW 45
16862: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
16863: LD_VAR 0 3
16867: PPUSH
16868: LD_INT 5
16870: PPUSH
16871: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
16875: LD_INT 35
16877: PPUSH
16878: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
16882: LD_VAR 0 4
16886: PUSH
16887: LD_INT 1
16889: ARRAY
16890: PPUSH
16891: LD_VAR 0 4
16895: PUSH
16896: LD_INT 2
16898: ARRAY
16899: PPUSH
16900: CALL_OW 428
16904: PUSH
16905: LD_INT 0
16907: EQUAL
16908: IFFALSE 16875
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
16910: LD_VAR 0 3
16914: PPUSH
16915: LD_VAR 0 4
16919: PUSH
16920: LD_INT 1
16922: ARRAY
16923: PPUSH
16924: LD_VAR 0 4
16928: PUSH
16929: LD_INT 2
16931: ARRAY
16932: PPUSH
16933: LD_INT 0
16935: PPUSH
16936: CALL_OW 48
// uc_side := 3 ;
16940: LD_ADDR_OWVAR 20
16944: PUSH
16945: LD_INT 3
16947: ST_TO_ADDR
// uc_nation := 3 ;
16948: LD_ADDR_OWVAR 21
16952: PUSH
16953: LD_INT 3
16955: ST_TO_ADDR
// InitHC_All ( ) ;
16956: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
16960: LD_INT 0
16962: PPUSH
16963: LD_INT 2
16965: PUSH
16966: LD_OWVAR 67
16970: PLUS
16971: PPUSH
16972: CALL_OW 383
// un := CreateHuman ;
16976: LD_ADDR_VAR 0 2
16980: PUSH
16981: CALL_OW 44
16985: ST_TO_ADDR
// ruSpecialAttackGroup := Join ( ruSpecialAttackGroup , un ) ;
16986: LD_ADDR_EXP 52
16990: PUSH
16991: LD_EXP 52
16995: PPUSH
16996: LD_VAR 0 2
17000: PPUSH
17001: CALL 79352 0 2
17005: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17006: LD_VAR 0 2
17010: PPUSH
17011: LD_VAR 0 3
17015: PPUSH
17016: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17020: LD_VAR 0 3
17024: PPUSH
17025: LD_INT 101
17027: PPUSH
17028: LD_INT 77
17030: PPUSH
17031: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17035: LD_ADDR_VAR 0 5
17039: PUSH
17040: LD_VAR 0 5
17044: PPUSH
17045: LD_VAR 0 5
17049: PUSH
17050: LD_INT 1
17052: PLUS
17053: PPUSH
17054: LD_VAR 0 3
17058: PPUSH
17059: CALL_OW 1
17063: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17064: LD_INT 105
17066: PPUSH
17067: CALL_OW 67
// end ;
17071: GO 16740
17073: POP
17074: POP
// repeat wait ( 0 0$1 ) ;
17075: LD_INT 35
17077: PPUSH
17078: CALL_OW 67
// for i in tmp do
17082: LD_ADDR_VAR 0 1
17086: PUSH
17087: LD_VAR 0 5
17091: PUSH
17092: FOR_IN
17093: IFFALSE 17161
// if not IsOk ( i ) then
17095: LD_VAR 0 1
17099: PPUSH
17100: CALL_OW 302
17104: NOT
17105: IFFALSE 17125
// tmp := tmp diff i else
17107: LD_ADDR_VAR 0 5
17111: PUSH
17112: LD_VAR 0 5
17116: PUSH
17117: LD_VAR 0 1
17121: DIFF
17122: ST_TO_ADDR
17123: GO 17159
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17125: LD_VAR 0 1
17129: PPUSH
17130: LD_INT 22
17132: PUSH
17133: LD_INT 1
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PPUSH
17140: CALL_OW 69
17144: PPUSH
17145: LD_VAR 0 1
17149: PPUSH
17150: CALL_OW 74
17154: PPUSH
17155: CALL_OW 115
17159: GO 17092
17161: POP
17162: POP
// until not tmp ;
17163: LD_VAR 0 5
17167: NOT
17168: IFFALSE 17075
// end ;
17170: PPOPN 5
17172: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17173: LD_EXP 47
17177: IFFALSE 17555
17179: GO 17181
17181: DISABLE
17182: LD_INT 0
17184: PPUSH
17185: PPUSH
17186: PPUSH
17187: PPUSH
// begin wait ( 0 0$20 ) ;
17188: LD_INT 700
17190: PPUSH
17191: CALL_OW 67
// uc_side := 3 ;
17195: LD_ADDR_OWVAR 20
17199: PUSH
17200: LD_INT 3
17202: ST_TO_ADDR
// uc_nation := 3 ;
17203: LD_ADDR_OWVAR 21
17207: PUSH
17208: LD_INT 3
17210: ST_TO_ADDR
// InitHc ;
17211: CALL_OW 19
// hc_importance := 0 ;
17215: LD_ADDR_OWVAR 32
17219: PUSH
17220: LD_INT 0
17222: ST_TO_ADDR
// tmp := [ ] ;
17223: LD_ADDR_VAR 0 2
17227: PUSH
17228: EMPTY
17229: ST_TO_ADDR
// InitHC_All ( ) ;
17230: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17234: LD_INT 0
17236: PPUSH
17237: LD_INT 2
17239: PPUSH
17240: LD_INT 6
17242: PPUSH
17243: CALL_OW 380
// eng := CreateHuman ;
17247: LD_ADDR_VAR 0 4
17251: PUSH
17252: CALL_OW 44
17256: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17257: LD_VAR 0 4
17261: PPUSH
17262: LD_INT 78
17264: PPUSH
17265: LD_INT 2
17267: PPUSH
17268: LD_INT 4
17270: PPUSH
17271: LD_INT 0
17273: PPUSH
17274: CALL_OW 50
// for i = 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
17278: LD_ADDR_VAR 0 3
17282: PUSH
17283: DOUBLE
17284: LD_INT 1
17286: DEC
17287: ST_TO_ADDR
17288: LD_INT 3
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: LD_INT 4
17296: PUSH
17297: LD_INT 5
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: PUSH
17306: LD_OWVAR 67
17310: ARRAY
17311: PUSH
17312: FOR_TO
17313: IFFALSE 17402
// begin InitHC_All ( ) ;
17315: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17319: LD_INT 0
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: LD_INT 4
17327: PUSH
17328: LD_INT 5
17330: PUSH
17331: LD_INT 6
17333: PUSH
17334: LD_INT 6
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: PUSH
17343: LD_OWVAR 67
17347: ARRAY
17348: PPUSH
17349: CALL_OW 380
// un := CreateHuman ;
17353: LD_ADDR_VAR 0 1
17357: PUSH
17358: CALL_OW 44
17362: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17363: LD_VAR 0 1
17367: PPUSH
17368: LD_INT 78
17370: PPUSH
17371: LD_INT 2
17373: PPUSH
17374: LD_INT 4
17376: PPUSH
17377: LD_INT 0
17379: PPUSH
17380: CALL_OW 50
// tmp := tmp ^ un ;
17384: LD_ADDR_VAR 0 2
17388: PUSH
17389: LD_VAR 0 2
17393: PUSH
17394: LD_VAR 0 1
17398: ADD
17399: ST_TO_ADDR
// end ;
17400: GO 17312
17402: POP
17403: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17404: LD_VAR 0 2
17408: PPUSH
17409: LD_INT 49
17411: PPUSH
17412: LD_INT 3
17414: PPUSH
17415: CALL_OW 111
// wait ( 0 0$2 ) ;
17419: LD_INT 70
17421: PPUSH
17422: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17426: LD_VAR 0 4
17430: PPUSH
17431: LD_INT 49
17433: PPUSH
17434: LD_INT 3
17436: PPUSH
17437: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17441: LD_VAR 0 4
17445: PPUSH
17446: LD_INT 4
17448: PPUSH
17449: CALL_OW 227
// wait ( 0 0$10 ) ;
17453: LD_INT 350
17455: PPUSH
17456: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17460: LD_INT 35
17462: PPUSH
17463: CALL_OW 67
// for i in tmp do
17467: LD_ADDR_VAR 0 3
17471: PUSH
17472: LD_VAR 0 2
17476: PUSH
17477: FOR_IN
17478: IFFALSE 17546
// if not IsOk ( i ) then
17480: LD_VAR 0 3
17484: PPUSH
17485: CALL_OW 302
17489: NOT
17490: IFFALSE 17510
// tmp := tmp diff i else
17492: LD_ADDR_VAR 0 2
17496: PUSH
17497: LD_VAR 0 2
17501: PUSH
17502: LD_VAR 0 3
17506: DIFF
17507: ST_TO_ADDR
17508: GO 17544
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17510: LD_VAR 0 3
17514: PPUSH
17515: LD_INT 22
17517: PUSH
17518: LD_INT 1
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PPUSH
17525: CALL_OW 69
17529: PPUSH
17530: LD_VAR 0 3
17534: PPUSH
17535: CALL_OW 74
17539: PPUSH
17540: CALL_OW 115
17544: GO 17477
17546: POP
17547: POP
// until not tmp ;
17548: LD_VAR 0 2
17552: NOT
17553: IFFALSE 17460
// end ; end_of_file
17555: PPOPN 4
17557: END
// every 0 0$1 trigger startTimer = 1 do
17558: LD_EXP 30
17562: PUSH
17563: LD_INT 1
17565: EQUAL
17566: IFFALSE 17696
17568: GO 17570
17570: DISABLE
// begin enable ;
17571: ENABLE
// if timerStatus = 1 then
17572: LD_EXP 29
17576: PUSH
17577: LD_INT 1
17579: EQUAL
17580: IFFALSE 17613
// begin timeToSupport = timeToSupport - 0 0$01 ;
17582: LD_ADDR_EXP 28
17586: PUSH
17587: LD_EXP 28
17591: PUSH
17592: LD_INT 35
17594: MINUS
17595: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17596: LD_ADDR_OWVAR 47
17600: PUSH
17601: LD_STRING #Am04-1
17603: PUSH
17604: LD_EXP 28
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: ST_TO_ADDR
// end ; if timerStatus = 2 then
17613: LD_EXP 29
17617: PUSH
17618: LD_INT 2
17620: EQUAL
17621: IFFALSE 17654
// begin timeToSupport = timeToSupport - 0 0$01 ;
17623: LD_ADDR_EXP 28
17627: PUSH
17628: LD_EXP 28
17632: PUSH
17633: LD_INT 35
17635: MINUS
17636: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17637: LD_ADDR_OWVAR 47
17641: PUSH
17642: LD_STRING #Am04-2
17644: PUSH
17645: LD_EXP 28
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: ST_TO_ADDR
// end ; if timerStatus = 3 then
17654: LD_EXP 29
17658: PUSH
17659: LD_INT 3
17661: EQUAL
17662: IFFALSE 17678
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17664: LD_ADDR_EXP 27
17668: PUSH
17669: LD_EXP 27
17673: PUSH
17674: LD_INT 35
17676: MINUS
17677: ST_TO_ADDR
// if timerStatus = 4 then
17678: LD_EXP 29
17682: PUSH
17683: LD_INT 4
17685: EQUAL
17686: IFFALSE 17696
// display_strings =  ;
17688: LD_ADDR_OWVAR 47
17692: PUSH
17693: LD_STRING 
17695: ST_TO_ADDR
// end ; end_of_file
17696: END
// every 0 0$1 trigger not reliefOfCommand and IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17697: LD_EXP 48
17701: NOT
17702: IFFALSE 17715
17704: PUSH
17705: LD_EXP 15
17709: PPUSH
17710: CALL_OW 301
17714: AND
17715: IFFALSE 17772
17717: PUSH
17718: LD_INT 22
17720: PUSH
17721: LD_INT 3
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 21
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PPUSH
17742: CALL_OW 69
17746: PUSH
17747: LD_INT 14
17749: PUSH
17750: LD_INT 13
17752: PUSH
17753: LD_INT 12
17755: PUSH
17756: LD_INT 11
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: PUSH
17765: LD_OWVAR 67
17769: ARRAY
17770: LESS
17771: AND
17772: IFFALSE 18360
17774: GO 17776
17776: DISABLE
17777: LD_INT 0
17779: PPUSH
17780: PPUSH
17781: PPUSH
// begin AIEnable = 0 ;
17782: LD_ADDR_EXP 37
17786: PUSH
17787: LD_INT 0
17789: ST_TO_ADDR
// escapeAvalaible = 1 ;
17790: LD_ADDR_EXP 40
17794: PUSH
17795: LD_INT 1
17797: ST_TO_ADDR
// Video ( true ) ;
17798: LD_INT 1
17800: PPUSH
17801: CALL 79324 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17805: LD_INT 3
17807: PPUSH
17808: LD_INT 1
17810: PPUSH
17811: LD_INT 1
17813: PPUSH
17814: LD_INT 0
17816: PPUSH
17817: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17821: LD_INT 6
17823: PPUSH
17824: LD_INT 1
17826: PPUSH
17827: LD_INT 1
17829: PPUSH
17830: LD_INT 0
17832: PPUSH
17833: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17837: LD_INT 5
17839: PPUSH
17840: LD_INT 1
17842: PPUSH
17843: LD_INT 1
17845: PPUSH
17846: LD_INT 0
17848: PPUSH
17849: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17853: LD_INT 3
17855: PPUSH
17856: LD_INT 1
17858: PPUSH
17859: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17863: LD_INT 97
17865: PPUSH
17866: LD_INT 91
17868: PPUSH
17869: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17873: LD_INT 22
17875: PUSH
17876: LD_INT 3
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 21
17885: PUSH
17886: LD_INT 1
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PPUSH
17897: CALL_OW 69
17901: PPUSH
17902: CALL_OW 121
// wait ( 0 0$01 ) ;
17906: LD_INT 35
17908: PPUSH
17909: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17913: LD_INT 22
17915: PUSH
17916: LD_INT 3
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 21
17925: PUSH
17926: LD_INT 1
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PPUSH
17937: CALL_OW 69
17941: PPUSH
17942: LD_INT 124
17944: PPUSH
17945: LD_INT 98
17947: PPUSH
17948: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
17952: LD_INT 22
17954: PUSH
17955: LD_INT 5
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 21
17964: PUSH
17965: LD_INT 1
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PPUSH
17976: CALL_OW 69
17980: PPUSH
17981: CALL_OW 121
// wait ( 0 0$01 ) ;
17985: LD_INT 35
17987: PPUSH
17988: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17992: LD_INT 22
17994: PUSH
17995: LD_INT 5
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 21
18004: PUSH
18005: LD_INT 1
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PPUSH
18016: CALL_OW 69
18020: PPUSH
18021: LD_INT 124
18023: PPUSH
18024: LD_INT 98
18026: PPUSH
18027: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18031: LD_INT 22
18033: PUSH
18034: LD_INT 6
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 21
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PPUSH
18055: CALL_OW 69
18059: PPUSH
18060: CALL_OW 121
// wait ( 0 0$01 ) ;
18064: LD_INT 35
18066: PPUSH
18067: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18071: LD_INT 22
18073: PUSH
18074: LD_INT 6
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 21
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PPUSH
18095: CALL_OW 69
18099: PPUSH
18100: LD_INT 124
18102: PPUSH
18103: LD_INT 98
18105: PPUSH
18106: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18110: LD_INT 22
18112: PUSH
18113: LD_INT 1
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 21
18122: PUSH
18123: LD_INT 1
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 69
18138: PPUSH
18139: LD_INT 124
18141: PPUSH
18142: LD_INT 96
18144: PPUSH
18145: CALL_OW 114
// wait ( 0 0$1 ) ;
18149: LD_INT 35
18151: PPUSH
18152: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18156: LD_INT 124
18158: PPUSH
18159: LD_INT 96
18161: PPUSH
18162: CALL_OW 84
// p := 0 0$0 ;
18166: LD_ADDR_VAR 0 3
18170: PUSH
18171: LD_INT 0
18173: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18174: LD_ADDR_VAR 0 2
18178: PUSH
18179: LD_INT 2
18181: PUSH
18182: LD_INT 22
18184: PUSH
18185: LD_INT 3
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 22
18194: PUSH
18195: LD_INT 6
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 21
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PPUSH
18221: CALL_OW 69
18225: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18226: LD_INT 35
18228: PPUSH
18229: CALL_OW 67
// p := p + 0 0$1 ;
18233: LD_ADDR_VAR 0 3
18237: PUSH
18238: LD_VAR 0 3
18242: PUSH
18243: LD_INT 35
18245: PLUS
18246: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18247: LD_VAR 0 2
18251: PPUSH
18252: LD_INT 5
18254: PPUSH
18255: CALL_OW 113
// for i in tmp do
18259: LD_ADDR_VAR 0 1
18263: PUSH
18264: LD_VAR 0 2
18268: PUSH
18269: FOR_IN
18270: IFFALSE 18297
// if IsInArea ( i , RussianEscape ) then
18272: LD_VAR 0 1
18276: PPUSH
18277: LD_INT 5
18279: PPUSH
18280: CALL_OW 308
18284: IFFALSE 18295
// RemoveUnit ( i ) ;
18286: LD_VAR 0 1
18290: PPUSH
18291: CALL_OW 64
18295: GO 18269
18297: POP
18298: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18299: LD_INT 23
18301: PUSH
18302: LD_INT 3
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 21
18311: PUSH
18312: LD_INT 1
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 24
18321: PUSH
18322: LD_INT 250
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: LIST
18333: PPUSH
18334: CALL_OW 69
18338: PUSH
18339: LD_INT 0
18341: EQUAL
18342: IFTRUE 18354
18344: PUSH
18345: LD_VAR 0 3
18349: PUSH
18350: LD_INT 245
18352: GREATEREQUAL
18353: OR
18354: IFFALSE 18226
// FinishMission ;
18356: CALL 18363 0 0
// end ;
18360: PPOPN 3
18362: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18363: LD_INT 0
18365: PPUSH
18366: PPUSH
18367: PPUSH
18368: PPUSH
18369: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
18370: LD_INT 22
18372: PUSH
18373: LD_INT 1
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 21
18382: PUSH
18383: LD_INT 1
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 23
18392: PUSH
18393: LD_INT 1
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 50
18402: PUSH
18403: EMPTY
18404: LIST
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: PPUSH
18412: CALL_OW 69
18416: PPUSH
18417: CALL 43420 0 1
18421: PUSH
18422: LD_INT 5
18424: LESS
18425: IFFALSE 18436
// begin YouLost ( LostVictory ) ;
18427: LD_STRING LostVictory
18429: PPUSH
18430: CALL_OW 104
// exit ;
18434: GO 19137
// end ; if not vehicleProduceCounter then
18436: LD_EXP 42
18440: NOT
18441: IFFALSE 18450
// SetAchievement ( ACH_INFANTRY ) ;
18443: LD_STRING ACH_INFANTRY
18445: PPUSH
18446: CALL_OW 543
// if tick <= 20 20$00 then
18450: LD_OWVAR 1
18454: PUSH
18455: LD_INT 42000
18457: LESSEQUAL
18458: IFFALSE 18474
// begin wait ( 3 ) ;
18460: LD_INT 3
18462: PPUSH
18463: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18467: LD_STRING ACH_ASPEED_4
18469: PPUSH
18470: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18474: LD_INT 22
18476: PPUSH
18477: CALL 19142 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18481: LD_INT 69
18483: PPUSH
18484: LD_INT 1
18486: PPUSH
18487: CALL_OW 321
18491: PPUSH
18492: LD_STRING GatlingInGamma
18494: PPUSH
18495: CALL_OW 39
// m1 := false ;
18499: LD_ADDR_VAR 0 3
18503: PUSH
18504: LD_INT 0
18506: ST_TO_ADDR
// m2 := false ;
18507: LD_ADDR_VAR 0 4
18511: PUSH
18512: LD_INT 0
18514: ST_TO_ADDR
// m3 := false ;
18515: LD_ADDR_VAR 0 5
18519: PUSH
18520: LD_INT 0
18522: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18523: LD_EXP 34
18527: PUSH
18528: LD_INT 1
18530: EQUAL
18531: IFFALSE 18543
18533: PUSH
18534: LD_EXP 35
18538: PUSH
18539: LD_INT 1
18541: EQUAL
18542: AND
18543: IFFALSE 18565
// begin AddMedal ( oil , 1 ) ;
18545: LD_STRING oil
18547: PPUSH
18548: LD_INT 1
18550: PPUSH
18551: CALL_OW 101
// m1 := true ;
18555: LD_ADDR_VAR 0 3
18559: PUSH
18560: LD_INT 1
18562: ST_TO_ADDR
// end else
18563: GO 18664
// begin if buildOil = 1 and buildPower = 0 then
18565: LD_EXP 34
18569: PUSH
18570: LD_INT 1
18572: EQUAL
18573: IFFALSE 18585
18575: PUSH
18576: LD_EXP 35
18580: PUSH
18581: LD_INT 0
18583: EQUAL
18584: AND
18585: IFFALSE 18598
// AddMedal ( oil , - 1 ) ;
18587: LD_STRING oil
18589: PPUSH
18590: LD_INT 1
18592: NEG
18593: PPUSH
18594: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18598: LD_EXP 34
18602: PUSH
18603: LD_INT 0
18605: EQUAL
18606: IFFALSE 18618
18608: PUSH
18609: LD_EXP 35
18613: PUSH
18614: LD_INT 1
18616: EQUAL
18617: AND
18618: IFFALSE 18631
// AddMedal ( oil , - 2 ) ;
18620: LD_STRING oil
18622: PPUSH
18623: LD_INT 2
18625: NEG
18626: PPUSH
18627: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18631: LD_EXP 34
18635: PUSH
18636: LD_INT 0
18638: EQUAL
18639: IFFALSE 18651
18641: PUSH
18642: LD_EXP 35
18646: PUSH
18647: LD_INT 0
18649: EQUAL
18650: AND
18651: IFFALSE 18664
// AddMedal ( oil , - 3 ) ;
18653: LD_STRING oil
18655: PPUSH
18656: LD_INT 3
18658: NEG
18659: PPUSH
18660: CALL_OW 101
// end ; if lostCounter > 3 then
18664: LD_EXP 38
18668: PUSH
18669: LD_INT 3
18671: GREATER
18672: IFFALSE 18687
// AddMedal ( deaths , - 1 ) else
18674: LD_STRING deaths
18676: PPUSH
18677: LD_INT 1
18679: NEG
18680: PPUSH
18681: CALL_OW 101
18685: GO 18705
// begin AddMedal ( deaths , 1 ) ;
18687: LD_STRING deaths
18689: PPUSH
18690: LD_INT 1
18692: PPUSH
18693: CALL_OW 101
// m2 := true ;
18697: LD_ADDR_VAR 0 4
18701: PUSH
18702: LD_INT 1
18704: ST_TO_ADDR
// end ; if honor then
18705: LD_EXP 39
18709: IFFALSE 18731
// begin AddMedal ( honour , 1 ) ;
18711: LD_STRING honour
18713: PPUSH
18714: LD_INT 1
18716: PPUSH
18717: CALL_OW 101
// m3 := true ;
18721: LD_ADDR_VAR 0 5
18725: PUSH
18726: LD_INT 1
18728: ST_TO_ADDR
// end else
18729: GO 18742
// AddMedal ( honour , - 1 ) ;
18731: LD_STRING honour
18733: PPUSH
18734: LD_INT 1
18736: NEG
18737: PPUSH
18738: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18742: LD_VAR 0 3
18746: IFFALSE 18754
18748: PUSH
18749: LD_VAR 0 4
18753: AND
18754: IFFALSE 18762
18756: PUSH
18757: LD_VAR 0 5
18761: AND
18762: IFFALSE 18774
18764: PUSH
18765: LD_OWVAR 67
18769: PUSH
18770: LD_INT 3
18772: GREATEREQUAL
18773: AND
18774: IFFALSE 18786
// SetAchievementEX ( ACH_AMER , 4 ) ;
18776: LD_STRING ACH_AMER
18778: PPUSH
18779: LD_INT 4
18781: PPUSH
18782: CALL_OW 564
// GiveMedals ( Main ) ;
18786: LD_STRING Main
18788: PPUSH
18789: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18793: LD_INT 22
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 23
18805: PUSH
18806: LD_INT 1
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 21
18815: PUSH
18816: LD_INT 1
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: LIST
18827: PPUSH
18828: CALL_OW 69
18832: PPUSH
18833: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18837: LD_EXP 1
18841: PPUSH
18842: LD_EXP 49
18846: PUSH
18847: LD_STRING JMM
18849: STR
18850: PPUSH
18851: CALL_OW 38
// if IsOK ( Bobby ) then
18855: LD_EXP 2
18859: PPUSH
18860: CALL_OW 302
18864: IFFALSE 18884
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18866: LD_EXP 2
18870: PPUSH
18871: LD_EXP 49
18875: PUSH
18876: LD_STRING Bobby
18878: STR
18879: PPUSH
18880: CALL_OW 38
// if IsOK ( Cyrus ) then
18884: LD_EXP 3
18888: PPUSH
18889: CALL_OW 302
18893: IFFALSE 18913
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18895: LD_EXP 3
18899: PPUSH
18900: LD_EXP 49
18904: PUSH
18905: LD_STRING Cyrus
18907: STR
18908: PPUSH
18909: CALL_OW 38
// if IsOK ( Lisa ) then
18913: LD_EXP 4
18917: PPUSH
18918: CALL_OW 302
18922: IFFALSE 18942
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18924: LD_EXP 4
18928: PPUSH
18929: LD_EXP 49
18933: PUSH
18934: LD_STRING Lisa
18936: STR
18937: PPUSH
18938: CALL_OW 38
// if IsOK ( Brown ) then
18942: LD_EXP 7
18946: PPUSH
18947: CALL_OW 302
18951: IFFALSE 18978
// begin ToLua ( enableBioCharacter(BIO_JEFF) ) ;
18953: LD_STRING enableBioCharacter(BIO_JEFF)
18955: PPUSH
18956: CALL_OW 559
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18960: LD_EXP 7
18964: PPUSH
18965: LD_EXP 49
18969: PUSH
18970: LD_STRING Brown
18972: STR
18973: PPUSH
18974: CALL_OW 38
// end ; if not IsDead ( Donaldson ) then
18978: LD_EXP 13
18982: PPUSH
18983: CALL_OW 301
18987: NOT
18988: IFFALSE 19015
// begin ToLua ( enableBioCharacter(BIO_LUCY) ) ;
18990: LD_STRING enableBioCharacter(BIO_LUCY)
18992: PPUSH
18993: CALL_OW 559
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18997: LD_EXP 13
19001: PPUSH
19002: LD_EXP 49
19006: PUSH
19007: LD_STRING Donaldson
19009: STR
19010: PPUSH
19011: CALL_OW 38
// end ; if not IsDead ( Frank ) then
19015: LD_EXP 5
19019: PPUSH
19020: CALL_OW 301
19024: NOT
19025: IFFALSE 19045
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19027: LD_EXP 5
19031: PPUSH
19032: LD_EXP 49
19036: PUSH
19037: LD_STRING Frank
19039: STR
19040: PPUSH
19041: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19045: LD_INT 50
19047: PUSH
19048: EMPTY
19049: LIST
19050: PUSH
19051: LD_INT 22
19053: PUSH
19054: LD_INT 1
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 21
19063: PUSH
19064: LD_INT 1
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: LIST
19075: PPUSH
19076: CALL_OW 69
19080: PUSH
19081: LD_EXP 1
19085: PUSH
19086: LD_EXP 2
19090: PUSH
19091: LD_EXP 3
19095: PUSH
19096: LD_EXP 4
19100: PUSH
19101: LD_EXP 7
19105: PUSH
19106: LD_EXP 13
19110: PUSH
19111: LD_EXP 5
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: DIFF
19125: PPUSH
19126: LD_STRING 04_other_survivors
19128: PPUSH
19129: CALL_OW 38
// YouWin ;
19133: CALL_OW 103
// end ;
19137: LD_VAR 0 1
19141: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19142: LD_INT 0
19144: PPUSH
19145: PPUSH
19146: PPUSH
19147: PPUSH
// gammaBase = [ ] ;
19148: LD_ADDR_VAR 0 4
19152: PUSH
19153: EMPTY
19154: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19155: LD_ADDR_VAR 0 5
19159: PUSH
19160: LD_VAR 0 1
19164: PPUSH
19165: LD_INT 22
19167: PUSH
19168: LD_INT 1
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 21
19177: PUSH
19178: LD_INT 3
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PPUSH
19189: CALL_OW 70
19193: ST_TO_ADDR
// for i in buildings do
19194: LD_ADDR_VAR 0 3
19198: PUSH
19199: LD_VAR 0 5
19203: PUSH
19204: FOR_IN
19205: IFFALSE 19542
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19207: LD_VAR 0 3
19211: PPUSH
19212: CALL_OW 266
19216: PUSH
19217: LD_INT 6
19219: PUSH
19220: LD_INT 7
19222: PUSH
19223: LD_INT 8
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: LIST
19230: IN
19231: IFFALSE 19345
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19233: LD_ADDR_VAR 0 4
19237: PUSH
19238: LD_VAR 0 4
19242: PUSH
19243: LD_VAR 0 3
19247: PPUSH
19248: CALL_OW 266
19252: PUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: CALL_OW 250
19262: PUSH
19263: LD_VAR 0 3
19267: PPUSH
19268: CALL_OW 251
19272: PUSH
19273: LD_VAR 0 3
19277: PPUSH
19278: CALL_OW 254
19282: PUSH
19283: LD_VAR 0 3
19287: PPUSH
19288: CALL_OW 267
19292: PUSH
19293: LD_VAR 0 3
19297: PPUSH
19298: CALL_OW 248
19302: PUSH
19303: LD_VAR 0 3
19307: PPUSH
19308: LD_INT 1
19310: PPUSH
19311: CALL_OW 268
19315: PUSH
19316: LD_VAR 0 3
19320: PPUSH
19321: LD_INT 2
19323: PPUSH
19324: CALL_OW 268
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: PUSH
19339: EMPTY
19340: LIST
19341: ADD
19342: ST_TO_ADDR
19343: GO 19540
// if GetBType ( i ) in [ b_bunker ] then
19345: LD_VAR 0 3
19349: PPUSH
19350: CALL_OW 266
19354: PUSH
19355: LD_INT 32
19357: PUSH
19358: EMPTY
19359: LIST
19360: IN
19361: IFFALSE 19458
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19363: LD_ADDR_VAR 0 4
19367: PUSH
19368: LD_VAR 0 4
19372: PUSH
19373: LD_VAR 0 3
19377: PPUSH
19378: CALL_OW 266
19382: PUSH
19383: LD_VAR 0 3
19387: PPUSH
19388: CALL_OW 250
19392: PUSH
19393: LD_VAR 0 3
19397: PPUSH
19398: CALL_OW 251
19402: PUSH
19403: LD_VAR 0 3
19407: PPUSH
19408: CALL_OW 254
19412: PUSH
19413: LD_VAR 0 3
19417: PPUSH
19418: CALL_OW 267
19422: PUSH
19423: LD_VAR 0 3
19427: PPUSH
19428: CALL_OW 248
19432: PUSH
19433: LD_VAR 0 3
19437: PPUSH
19438: CALL_OW 269
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: PUSH
19452: EMPTY
19453: LIST
19454: ADD
19455: ST_TO_ADDR
19456: GO 19540
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19458: LD_ADDR_VAR 0 4
19462: PUSH
19463: LD_VAR 0 4
19467: PUSH
19468: LD_VAR 0 3
19472: PPUSH
19473: CALL_OW 266
19477: PUSH
19478: LD_VAR 0 3
19482: PPUSH
19483: CALL_OW 250
19487: PUSH
19488: LD_VAR 0 3
19492: PPUSH
19493: CALL_OW 251
19497: PUSH
19498: LD_VAR 0 3
19502: PPUSH
19503: CALL_OW 254
19507: PUSH
19508: LD_VAR 0 3
19512: PPUSH
19513: CALL_OW 267
19517: PUSH
19518: LD_VAR 0 3
19522: PPUSH
19523: CALL_OW 248
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: PUSH
19536: EMPTY
19537: LIST
19538: ADD
19539: ST_TO_ADDR
// end ;
19540: GO 19204
19542: POP
19543: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19544: LD_VAR 0 4
19548: PPUSH
19549: LD_STRING GammaBase
19551: PPUSH
19552: CALL_OW 39
// end ; end_of_file
19556: LD_VAR 0 2
19560: RET
// every 1 1$15 do
19561: GO 19563
19563: DISABLE
// begin if supply <= 13 and supply > 7 then
19564: LD_EXP 36
19568: PUSH
19569: LD_INT 13
19571: LESSEQUAL
19572: IFFALSE 19584
19574: PUSH
19575: LD_EXP 36
19579: PUSH
19580: LD_INT 7
19582: GREATER
19583: AND
19584: IFFALSE 19607
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19586: LD_INT 3
19588: PPUSH
19589: LD_INT 5
19591: PPUSH
19592: CALL_OW 12
19596: PPUSH
19597: LD_INT 18
19599: PPUSH
19600: LD_INT 1
19602: PPUSH
19603: CALL_OW 55
// if supply <= 7 and supply > 4 then
19607: LD_EXP 36
19611: PUSH
19612: LD_INT 7
19614: LESSEQUAL
19615: IFFALSE 19627
19617: PUSH
19618: LD_EXP 36
19622: PUSH
19623: LD_INT 4
19625: GREATER
19626: AND
19627: IFFALSE 19650
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19629: LD_INT 3
19631: PPUSH
19632: LD_INT 5
19634: PPUSH
19635: CALL_OW 12
19639: PPUSH
19640: LD_INT 19
19642: PPUSH
19643: LD_INT 1
19645: PPUSH
19646: CALL_OW 55
// if supply <= 4 and supply > 0 then
19650: LD_EXP 36
19654: PUSH
19655: LD_INT 4
19657: LESSEQUAL
19658: IFFALSE 19670
19660: PUSH
19661: LD_EXP 36
19665: PUSH
19666: LD_INT 0
19668: GREATER
19669: AND
19670: IFFALSE 19693
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19672: LD_INT 3
19674: PPUSH
19675: LD_INT 5
19677: PPUSH
19678: CALL_OW 12
19682: PPUSH
19683: LD_INT 20
19685: PPUSH
19686: LD_INT 1
19688: PPUSH
19689: CALL_OW 55
// if supply then
19693: LD_EXP 36
19697: IFFALSE 19714
// begin supply = supply - 1 ;
19699: LD_ADDR_EXP 36
19703: PUSH
19704: LD_EXP 36
19708: PUSH
19709: LD_INT 1
19711: MINUS
19712: ST_TO_ADDR
// enable ;
19713: ENABLE
// end ; end ; end_of_file end_of_file
19714: END
// export globalGameSaveCounter ; every 0 0$1 do
19715: GO 19717
19717: DISABLE
// begin enable ;
19718: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19719: LD_STRING updateTimer(
19721: PUSH
19722: LD_OWVAR 1
19726: STR
19727: PUSH
19728: LD_STRING );
19730: STR
19731: PPUSH
19732: CALL_OW 559
// end ;
19736: END
// every 0 0$1 do
19737: GO 19739
19739: DISABLE
// begin globalGameSaveCounter := 0 ;
19740: LD_ADDR_EXP 53
19744: PUSH
19745: LD_INT 0
19747: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19748: LD_STRING setGameSaveCounter(0)
19750: PPUSH
19751: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19755: LD_STRING initStreamRollete();
19757: PPUSH
19758: CALL_OW 559
// InitStreamMode ;
19762: CALL 21107 0 0
// DefineStreamItems ( false ) ;
19766: LD_INT 0
19768: PPUSH
19769: CALL 21571 0 1
// end ;
19773: END
// export function SOS_MapStart ( ) ; begin
19774: LD_INT 0
19776: PPUSH
// if streamModeActive then
19777: LD_EXP 54
19781: IFFALSE 19790
// DefineStreamItems ( true ) ;
19783: LD_INT 1
19785: PPUSH
19786: CALL 21571 0 1
// UpdateLuaVariables ( ) ;
19790: CALL 19807 0 0
// UpdateFactoryWaypoints ( ) ;
19794: CALL 34693 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19798: CALL 34945 0 0
// end ;
19802: LD_VAR 0 1
19806: RET
// function UpdateLuaVariables ( ) ; begin
19807: LD_INT 0
19809: PPUSH
// if globalGameSaveCounter then
19810: LD_EXP 53
19814: IFFALSE 19848
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19816: LD_ADDR_EXP 53
19820: PUSH
19821: LD_EXP 53
19825: PPUSH
19826: CALL 80725 0 1
19830: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19831: LD_STRING setGameSaveCounter(
19833: PUSH
19834: LD_EXP 53
19838: STR
19839: PUSH
19840: LD_STRING )
19842: STR
19843: PPUSH
19844: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19848: LD_STRING setGameDifficulty(
19850: PUSH
19851: LD_OWVAR 67
19855: STR
19856: PUSH
19857: LD_STRING )
19859: STR
19860: PPUSH
19861: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19865: LD_STRING displayDifficulty(
19867: PUSH
19868: LD_OWVAR 67
19872: STR
19873: PUSH
19874: LD_STRING )
19876: STR
19877: PPUSH
19878: CALL_OW 559
// end ;
19882: LD_VAR 0 1
19886: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19887: LD_INT 0
19889: PPUSH
// if p2 = stream_mode then
19890: LD_VAR 0 2
19894: PUSH
19895: LD_INT 100
19897: EQUAL
19898: IFFALSE 20901
// begin if not StreamModeActive then
19900: LD_EXP 54
19904: NOT
19905: IFFALSE 19915
// StreamModeActive := true ;
19907: LD_ADDR_EXP 54
19911: PUSH
19912: LD_INT 1
19914: ST_TO_ADDR
// if p3 = 0 then
19915: LD_VAR 0 3
19919: PUSH
19920: LD_INT 0
19922: EQUAL
19923: IFFALSE 19929
// InitStreamMode ;
19925: CALL 21107 0 0
// if p3 = 1 then
19929: LD_VAR 0 3
19933: PUSH
19934: LD_INT 1
19936: EQUAL
19937: IFFALSE 19947
// sRocket := true ;
19939: LD_ADDR_EXP 59
19943: PUSH
19944: LD_INT 1
19946: ST_TO_ADDR
// if p3 = 2 then
19947: LD_VAR 0 3
19951: PUSH
19952: LD_INT 2
19954: EQUAL
19955: IFFALSE 19965
// sSpeed := true ;
19957: LD_ADDR_EXP 58
19961: PUSH
19962: LD_INT 1
19964: ST_TO_ADDR
// if p3 = 3 then
19965: LD_VAR 0 3
19969: PUSH
19970: LD_INT 3
19972: EQUAL
19973: IFFALSE 19983
// sEngine := true ;
19975: LD_ADDR_EXP 60
19979: PUSH
19980: LD_INT 1
19982: ST_TO_ADDR
// if p3 = 4 then
19983: LD_VAR 0 3
19987: PUSH
19988: LD_INT 4
19990: EQUAL
19991: IFFALSE 20001
// sSpec := true ;
19993: LD_ADDR_EXP 57
19997: PUSH
19998: LD_INT 1
20000: ST_TO_ADDR
// if p3 = 5 then
20001: LD_VAR 0 3
20005: PUSH
20006: LD_INT 5
20008: EQUAL
20009: IFFALSE 20019
// sLevel := true ;
20011: LD_ADDR_EXP 61
20015: PUSH
20016: LD_INT 1
20018: ST_TO_ADDR
// if p3 = 6 then
20019: LD_VAR 0 3
20023: PUSH
20024: LD_INT 6
20026: EQUAL
20027: IFFALSE 20037
// sArmoury := true ;
20029: LD_ADDR_EXP 62
20033: PUSH
20034: LD_INT 1
20036: ST_TO_ADDR
// if p3 = 7 then
20037: LD_VAR 0 3
20041: PUSH
20042: LD_INT 7
20044: EQUAL
20045: IFFALSE 20055
// sRadar := true ;
20047: LD_ADDR_EXP 63
20051: PUSH
20052: LD_INT 1
20054: ST_TO_ADDR
// if p3 = 8 then
20055: LD_VAR 0 3
20059: PUSH
20060: LD_INT 8
20062: EQUAL
20063: IFFALSE 20073
// sBunker := true ;
20065: LD_ADDR_EXP 64
20069: PUSH
20070: LD_INT 1
20072: ST_TO_ADDR
// if p3 = 9 then
20073: LD_VAR 0 3
20077: PUSH
20078: LD_INT 9
20080: EQUAL
20081: IFFALSE 20091
// sHack := true ;
20083: LD_ADDR_EXP 65
20087: PUSH
20088: LD_INT 1
20090: ST_TO_ADDR
// if p3 = 10 then
20091: LD_VAR 0 3
20095: PUSH
20096: LD_INT 10
20098: EQUAL
20099: IFFALSE 20109
// sFire := true ;
20101: LD_ADDR_EXP 66
20105: PUSH
20106: LD_INT 1
20108: ST_TO_ADDR
// if p3 = 11 then
20109: LD_VAR 0 3
20113: PUSH
20114: LD_INT 11
20116: EQUAL
20117: IFFALSE 20127
// sRefresh := true ;
20119: LD_ADDR_EXP 67
20123: PUSH
20124: LD_INT 1
20126: ST_TO_ADDR
// if p3 = 12 then
20127: LD_VAR 0 3
20131: PUSH
20132: LD_INT 12
20134: EQUAL
20135: IFFALSE 20145
// sExp := true ;
20137: LD_ADDR_EXP 68
20141: PUSH
20142: LD_INT 1
20144: ST_TO_ADDR
// if p3 = 13 then
20145: LD_VAR 0 3
20149: PUSH
20150: LD_INT 13
20152: EQUAL
20153: IFFALSE 20163
// sDepot := true ;
20155: LD_ADDR_EXP 69
20159: PUSH
20160: LD_INT 1
20162: ST_TO_ADDR
// if p3 = 14 then
20163: LD_VAR 0 3
20167: PUSH
20168: LD_INT 14
20170: EQUAL
20171: IFFALSE 20181
// sFlag := true ;
20173: LD_ADDR_EXP 70
20177: PUSH
20178: LD_INT 1
20180: ST_TO_ADDR
// if p3 = 15 then
20181: LD_VAR 0 3
20185: PUSH
20186: LD_INT 15
20188: EQUAL
20189: IFFALSE 20199
// sKamikadze := true ;
20191: LD_ADDR_EXP 78
20195: PUSH
20196: LD_INT 1
20198: ST_TO_ADDR
// if p3 = 16 then
20199: LD_VAR 0 3
20203: PUSH
20204: LD_INT 16
20206: EQUAL
20207: IFFALSE 20217
// sTroll := true ;
20209: LD_ADDR_EXP 79
20213: PUSH
20214: LD_INT 1
20216: ST_TO_ADDR
// if p3 = 17 then
20217: LD_VAR 0 3
20221: PUSH
20222: LD_INT 17
20224: EQUAL
20225: IFFALSE 20235
// sSlow := true ;
20227: LD_ADDR_EXP 80
20231: PUSH
20232: LD_INT 1
20234: ST_TO_ADDR
// if p3 = 18 then
20235: LD_VAR 0 3
20239: PUSH
20240: LD_INT 18
20242: EQUAL
20243: IFFALSE 20253
// sLack := true ;
20245: LD_ADDR_EXP 81
20249: PUSH
20250: LD_INT 1
20252: ST_TO_ADDR
// if p3 = 19 then
20253: LD_VAR 0 3
20257: PUSH
20258: LD_INT 19
20260: EQUAL
20261: IFFALSE 20271
// sTank := true ;
20263: LD_ADDR_EXP 83
20267: PUSH
20268: LD_INT 1
20270: ST_TO_ADDR
// if p3 = 20 then
20271: LD_VAR 0 3
20275: PUSH
20276: LD_INT 20
20278: EQUAL
20279: IFFALSE 20289
// sRemote := true ;
20281: LD_ADDR_EXP 84
20285: PUSH
20286: LD_INT 1
20288: ST_TO_ADDR
// if p3 = 21 then
20289: LD_VAR 0 3
20293: PUSH
20294: LD_INT 21
20296: EQUAL
20297: IFFALSE 20307
// sPowell := true ;
20299: LD_ADDR_EXP 85
20303: PUSH
20304: LD_INT 1
20306: ST_TO_ADDR
// if p3 = 22 then
20307: LD_VAR 0 3
20311: PUSH
20312: LD_INT 22
20314: EQUAL
20315: IFFALSE 20325
// sTeleport := true ;
20317: LD_ADDR_EXP 88
20321: PUSH
20322: LD_INT 1
20324: ST_TO_ADDR
// if p3 = 23 then
20325: LD_VAR 0 3
20329: PUSH
20330: LD_INT 23
20332: EQUAL
20333: IFFALSE 20343
// sOilTower := true ;
20335: LD_ADDR_EXP 90
20339: PUSH
20340: LD_INT 1
20342: ST_TO_ADDR
// if p3 = 24 then
20343: LD_VAR 0 3
20347: PUSH
20348: LD_INT 24
20350: EQUAL
20351: IFFALSE 20361
// sShovel := true ;
20353: LD_ADDR_EXP 91
20357: PUSH
20358: LD_INT 1
20360: ST_TO_ADDR
// if p3 = 25 then
20361: LD_VAR 0 3
20365: PUSH
20366: LD_INT 25
20368: EQUAL
20369: IFFALSE 20379
// sSheik := true ;
20371: LD_ADDR_EXP 92
20375: PUSH
20376: LD_INT 1
20378: ST_TO_ADDR
// if p3 = 26 then
20379: LD_VAR 0 3
20383: PUSH
20384: LD_INT 26
20386: EQUAL
20387: IFFALSE 20397
// sEarthquake := true ;
20389: LD_ADDR_EXP 94
20393: PUSH
20394: LD_INT 1
20396: ST_TO_ADDR
// if p3 = 27 then
20397: LD_VAR 0 3
20401: PUSH
20402: LD_INT 27
20404: EQUAL
20405: IFFALSE 20415
// sAI := true ;
20407: LD_ADDR_EXP 95
20411: PUSH
20412: LD_INT 1
20414: ST_TO_ADDR
// if p3 = 28 then
20415: LD_VAR 0 3
20419: PUSH
20420: LD_INT 28
20422: EQUAL
20423: IFFALSE 20433
// sCargo := true ;
20425: LD_ADDR_EXP 98
20429: PUSH
20430: LD_INT 1
20432: ST_TO_ADDR
// if p3 = 29 then
20433: LD_VAR 0 3
20437: PUSH
20438: LD_INT 29
20440: EQUAL
20441: IFFALSE 20451
// sDLaser := true ;
20443: LD_ADDR_EXP 99
20447: PUSH
20448: LD_INT 1
20450: ST_TO_ADDR
// if p3 = 30 then
20451: LD_VAR 0 3
20455: PUSH
20456: LD_INT 30
20458: EQUAL
20459: IFFALSE 20469
// sExchange := true ;
20461: LD_ADDR_EXP 100
20465: PUSH
20466: LD_INT 1
20468: ST_TO_ADDR
// if p3 = 31 then
20469: LD_VAR 0 3
20473: PUSH
20474: LD_INT 31
20476: EQUAL
20477: IFFALSE 20487
// sFac := true ;
20479: LD_ADDR_EXP 101
20483: PUSH
20484: LD_INT 1
20486: ST_TO_ADDR
// if p3 = 32 then
20487: LD_VAR 0 3
20491: PUSH
20492: LD_INT 32
20494: EQUAL
20495: IFFALSE 20505
// sPower := true ;
20497: LD_ADDR_EXP 102
20501: PUSH
20502: LD_INT 1
20504: ST_TO_ADDR
// if p3 = 33 then
20505: LD_VAR 0 3
20509: PUSH
20510: LD_INT 33
20512: EQUAL
20513: IFFALSE 20523
// sRandom := true ;
20515: LD_ADDR_EXP 103
20519: PUSH
20520: LD_INT 1
20522: ST_TO_ADDR
// if p3 = 34 then
20523: LD_VAR 0 3
20527: PUSH
20528: LD_INT 34
20530: EQUAL
20531: IFFALSE 20541
// sShield := true ;
20533: LD_ADDR_EXP 104
20537: PUSH
20538: LD_INT 1
20540: ST_TO_ADDR
// if p3 = 35 then
20541: LD_VAR 0 3
20545: PUSH
20546: LD_INT 35
20548: EQUAL
20549: IFFALSE 20559
// sTime := true ;
20551: LD_ADDR_EXP 105
20555: PUSH
20556: LD_INT 1
20558: ST_TO_ADDR
// if p3 = 36 then
20559: LD_VAR 0 3
20563: PUSH
20564: LD_INT 36
20566: EQUAL
20567: IFFALSE 20577
// sTools := true ;
20569: LD_ADDR_EXP 106
20573: PUSH
20574: LD_INT 1
20576: ST_TO_ADDR
// if p3 = 101 then
20577: LD_VAR 0 3
20581: PUSH
20582: LD_INT 101
20584: EQUAL
20585: IFFALSE 20595
// sSold := true ;
20587: LD_ADDR_EXP 71
20591: PUSH
20592: LD_INT 1
20594: ST_TO_ADDR
// if p3 = 102 then
20595: LD_VAR 0 3
20599: PUSH
20600: LD_INT 102
20602: EQUAL
20603: IFFALSE 20613
// sDiff := true ;
20605: LD_ADDR_EXP 72
20609: PUSH
20610: LD_INT 1
20612: ST_TO_ADDR
// if p3 = 103 then
20613: LD_VAR 0 3
20617: PUSH
20618: LD_INT 103
20620: EQUAL
20621: IFFALSE 20631
// sFog := true ;
20623: LD_ADDR_EXP 75
20627: PUSH
20628: LD_INT 1
20630: ST_TO_ADDR
// if p3 = 104 then
20631: LD_VAR 0 3
20635: PUSH
20636: LD_INT 104
20638: EQUAL
20639: IFFALSE 20649
// sReset := true ;
20641: LD_ADDR_EXP 76
20645: PUSH
20646: LD_INT 1
20648: ST_TO_ADDR
// if p3 = 105 then
20649: LD_VAR 0 3
20653: PUSH
20654: LD_INT 105
20656: EQUAL
20657: IFFALSE 20667
// sSun := true ;
20659: LD_ADDR_EXP 77
20663: PUSH
20664: LD_INT 1
20666: ST_TO_ADDR
// if p3 = 106 then
20667: LD_VAR 0 3
20671: PUSH
20672: LD_INT 106
20674: EQUAL
20675: IFFALSE 20685
// sTiger := true ;
20677: LD_ADDR_EXP 73
20681: PUSH
20682: LD_INT 1
20684: ST_TO_ADDR
// if p3 = 107 then
20685: LD_VAR 0 3
20689: PUSH
20690: LD_INT 107
20692: EQUAL
20693: IFFALSE 20703
// sBomb := true ;
20695: LD_ADDR_EXP 74
20699: PUSH
20700: LD_INT 1
20702: ST_TO_ADDR
// if p3 = 108 then
20703: LD_VAR 0 3
20707: PUSH
20708: LD_INT 108
20710: EQUAL
20711: IFFALSE 20721
// sWound := true ;
20713: LD_ADDR_EXP 82
20717: PUSH
20718: LD_INT 1
20720: ST_TO_ADDR
// if p3 = 109 then
20721: LD_VAR 0 3
20725: PUSH
20726: LD_INT 109
20728: EQUAL
20729: IFFALSE 20739
// sBetray := true ;
20731: LD_ADDR_EXP 86
20735: PUSH
20736: LD_INT 1
20738: ST_TO_ADDR
// if p3 = 110 then
20739: LD_VAR 0 3
20743: PUSH
20744: LD_INT 110
20746: EQUAL
20747: IFFALSE 20757
// sContamin := true ;
20749: LD_ADDR_EXP 87
20753: PUSH
20754: LD_INT 1
20756: ST_TO_ADDR
// if p3 = 111 then
20757: LD_VAR 0 3
20761: PUSH
20762: LD_INT 111
20764: EQUAL
20765: IFFALSE 20775
// sOil := true ;
20767: LD_ADDR_EXP 89
20771: PUSH
20772: LD_INT 1
20774: ST_TO_ADDR
// if p3 = 112 then
20775: LD_VAR 0 3
20779: PUSH
20780: LD_INT 112
20782: EQUAL
20783: IFFALSE 20793
// sStu := true ;
20785: LD_ADDR_EXP 93
20789: PUSH
20790: LD_INT 1
20792: ST_TO_ADDR
// if p3 = 113 then
20793: LD_VAR 0 3
20797: PUSH
20798: LD_INT 113
20800: EQUAL
20801: IFFALSE 20811
// sBazooka := true ;
20803: LD_ADDR_EXP 96
20807: PUSH
20808: LD_INT 1
20810: ST_TO_ADDR
// if p3 = 114 then
20811: LD_VAR 0 3
20815: PUSH
20816: LD_INT 114
20818: EQUAL
20819: IFFALSE 20829
// sMortar := true ;
20821: LD_ADDR_EXP 97
20825: PUSH
20826: LD_INT 1
20828: ST_TO_ADDR
// if p3 = 115 then
20829: LD_VAR 0 3
20833: PUSH
20834: LD_INT 115
20836: EQUAL
20837: IFFALSE 20847
// sRanger := true ;
20839: LD_ADDR_EXP 107
20843: PUSH
20844: LD_INT 1
20846: ST_TO_ADDR
// if p3 = 116 then
20847: LD_VAR 0 3
20851: PUSH
20852: LD_INT 116
20854: EQUAL
20855: IFFALSE 20865
// sComputer := true ;
20857: LD_ADDR_EXP 108
20861: PUSH
20862: LD_INT 1
20864: ST_TO_ADDR
// if p3 = 117 then
20865: LD_VAR 0 3
20869: PUSH
20870: LD_INT 117
20872: EQUAL
20873: IFFALSE 20883
// s30 := true ;
20875: LD_ADDR_EXP 109
20879: PUSH
20880: LD_INT 1
20882: ST_TO_ADDR
// if p3 = 118 then
20883: LD_VAR 0 3
20887: PUSH
20888: LD_INT 118
20890: EQUAL
20891: IFFALSE 20901
// s60 := true ;
20893: LD_ADDR_EXP 110
20897: PUSH
20898: LD_INT 1
20900: ST_TO_ADDR
// end ; if p2 = hack_mode then
20901: LD_VAR 0 2
20905: PUSH
20906: LD_INT 101
20908: EQUAL
20909: IFFALSE 21037
// begin case p3 of 1 :
20911: LD_VAR 0 3
20915: PUSH
20916: LD_INT 1
20918: DOUBLE
20919: EQUAL
20920: IFTRUE 20924
20922: GO 20931
20924: POP
// hHackUnlimitedResources ; 2 :
20925: CALL 33300 0 0
20929: GO 21037
20931: LD_INT 2
20933: DOUBLE
20934: EQUAL
20935: IFTRUE 20939
20937: GO 20946
20939: POP
// hHackSetLevel10 ; 3 :
20940: CALL 33433 0 0
20944: GO 21037
20946: LD_INT 3
20948: DOUBLE
20949: EQUAL
20950: IFTRUE 20954
20952: GO 20961
20954: POP
// hHackSetLevel10YourUnits ; 4 :
20955: CALL 33518 0 0
20959: GO 21037
20961: LD_INT 4
20963: DOUBLE
20964: EQUAL
20965: IFTRUE 20969
20967: GO 20976
20969: POP
// hHackInvincible ; 5 :
20970: CALL 33966 0 0
20974: GO 21037
20976: LD_INT 5
20978: DOUBLE
20979: EQUAL
20980: IFTRUE 20984
20982: GO 20991
20984: POP
// hHackInvisible ; 6 :
20985: CALL 34077 0 0
20989: GO 21037
20991: LD_INT 6
20993: DOUBLE
20994: EQUAL
20995: IFTRUE 20999
20997: GO 21006
20999: POP
// hHackChangeYourSide ; 7 :
21000: CALL 34134 0 0
21004: GO 21037
21006: LD_INT 7
21008: DOUBLE
21009: EQUAL
21010: IFTRUE 21014
21012: GO 21021
21014: POP
// hHackChangeUnitSide ; 8 :
21015: CALL 34176 0 0
21019: GO 21037
21021: LD_INT 8
21023: DOUBLE
21024: EQUAL
21025: IFTRUE 21029
21027: GO 21036
21029: POP
// hHackFog ; end ;
21030: CALL 34277 0 0
21034: GO 21037
21036: POP
// end ; if p2 = game_save_mode then
21037: LD_VAR 0 2
21041: PUSH
21042: LD_INT 102
21044: EQUAL
21045: IFFALSE 21102
// begin if p3 = 1 then
21047: LD_VAR 0 3
21051: PUSH
21052: LD_INT 1
21054: EQUAL
21055: IFFALSE 21067
// globalGameSaveCounter := p4 ;
21057: LD_ADDR_EXP 53
21061: PUSH
21062: LD_VAR 0 4
21066: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21067: LD_VAR 0 3
21071: PUSH
21072: LD_INT 2
21074: EQUAL
21075: IFFALSE 21083
21077: PUSH
21078: LD_EXP 53
21082: AND
21083: IFFALSE 21102
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21085: LD_STRING setGameSaveCounter(
21087: PUSH
21088: LD_EXP 53
21092: STR
21093: PUSH
21094: LD_STRING )
21096: STR
21097: PPUSH
21098: CALL_OW 559
// end ; end ;
21102: LD_VAR 0 7
21106: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21107: LD_INT 0
21109: PPUSH
// streamModeActive := false ;
21110: LD_ADDR_EXP 54
21114: PUSH
21115: LD_INT 0
21117: ST_TO_ADDR
// normalCounter := 36 ;
21118: LD_ADDR_EXP 55
21122: PUSH
21123: LD_INT 36
21125: ST_TO_ADDR
// hardcoreCounter := 18 ;
21126: LD_ADDR_EXP 56
21130: PUSH
21131: LD_INT 18
21133: ST_TO_ADDR
// sRocket := false ;
21134: LD_ADDR_EXP 59
21138: PUSH
21139: LD_INT 0
21141: ST_TO_ADDR
// sSpeed := false ;
21142: LD_ADDR_EXP 58
21146: PUSH
21147: LD_INT 0
21149: ST_TO_ADDR
// sEngine := false ;
21150: LD_ADDR_EXP 60
21154: PUSH
21155: LD_INT 0
21157: ST_TO_ADDR
// sSpec := false ;
21158: LD_ADDR_EXP 57
21162: PUSH
21163: LD_INT 0
21165: ST_TO_ADDR
// sLevel := false ;
21166: LD_ADDR_EXP 61
21170: PUSH
21171: LD_INT 0
21173: ST_TO_ADDR
// sArmoury := false ;
21174: LD_ADDR_EXP 62
21178: PUSH
21179: LD_INT 0
21181: ST_TO_ADDR
// sRadar := false ;
21182: LD_ADDR_EXP 63
21186: PUSH
21187: LD_INT 0
21189: ST_TO_ADDR
// sBunker := false ;
21190: LD_ADDR_EXP 64
21194: PUSH
21195: LD_INT 0
21197: ST_TO_ADDR
// sHack := false ;
21198: LD_ADDR_EXP 65
21202: PUSH
21203: LD_INT 0
21205: ST_TO_ADDR
// sFire := false ;
21206: LD_ADDR_EXP 66
21210: PUSH
21211: LD_INT 0
21213: ST_TO_ADDR
// sRefresh := false ;
21214: LD_ADDR_EXP 67
21218: PUSH
21219: LD_INT 0
21221: ST_TO_ADDR
// sExp := false ;
21222: LD_ADDR_EXP 68
21226: PUSH
21227: LD_INT 0
21229: ST_TO_ADDR
// sDepot := false ;
21230: LD_ADDR_EXP 69
21234: PUSH
21235: LD_INT 0
21237: ST_TO_ADDR
// sFlag := false ;
21238: LD_ADDR_EXP 70
21242: PUSH
21243: LD_INT 0
21245: ST_TO_ADDR
// sKamikadze := false ;
21246: LD_ADDR_EXP 78
21250: PUSH
21251: LD_INT 0
21253: ST_TO_ADDR
// sTroll := false ;
21254: LD_ADDR_EXP 79
21258: PUSH
21259: LD_INT 0
21261: ST_TO_ADDR
// sSlow := false ;
21262: LD_ADDR_EXP 80
21266: PUSH
21267: LD_INT 0
21269: ST_TO_ADDR
// sLack := false ;
21270: LD_ADDR_EXP 81
21274: PUSH
21275: LD_INT 0
21277: ST_TO_ADDR
// sTank := false ;
21278: LD_ADDR_EXP 83
21282: PUSH
21283: LD_INT 0
21285: ST_TO_ADDR
// sRemote := false ;
21286: LD_ADDR_EXP 84
21290: PUSH
21291: LD_INT 0
21293: ST_TO_ADDR
// sPowell := false ;
21294: LD_ADDR_EXP 85
21298: PUSH
21299: LD_INT 0
21301: ST_TO_ADDR
// sTeleport := false ;
21302: LD_ADDR_EXP 88
21306: PUSH
21307: LD_INT 0
21309: ST_TO_ADDR
// sOilTower := false ;
21310: LD_ADDR_EXP 90
21314: PUSH
21315: LD_INT 0
21317: ST_TO_ADDR
// sShovel := false ;
21318: LD_ADDR_EXP 91
21322: PUSH
21323: LD_INT 0
21325: ST_TO_ADDR
// sSheik := false ;
21326: LD_ADDR_EXP 92
21330: PUSH
21331: LD_INT 0
21333: ST_TO_ADDR
// sEarthquake := false ;
21334: LD_ADDR_EXP 94
21338: PUSH
21339: LD_INT 0
21341: ST_TO_ADDR
// sAI := false ;
21342: LD_ADDR_EXP 95
21346: PUSH
21347: LD_INT 0
21349: ST_TO_ADDR
// sCargo := false ;
21350: LD_ADDR_EXP 98
21354: PUSH
21355: LD_INT 0
21357: ST_TO_ADDR
// sDLaser := false ;
21358: LD_ADDR_EXP 99
21362: PUSH
21363: LD_INT 0
21365: ST_TO_ADDR
// sExchange := false ;
21366: LD_ADDR_EXP 100
21370: PUSH
21371: LD_INT 0
21373: ST_TO_ADDR
// sFac := false ;
21374: LD_ADDR_EXP 101
21378: PUSH
21379: LD_INT 0
21381: ST_TO_ADDR
// sPower := false ;
21382: LD_ADDR_EXP 102
21386: PUSH
21387: LD_INT 0
21389: ST_TO_ADDR
// sRandom := false ;
21390: LD_ADDR_EXP 103
21394: PUSH
21395: LD_INT 0
21397: ST_TO_ADDR
// sShield := false ;
21398: LD_ADDR_EXP 104
21402: PUSH
21403: LD_INT 0
21405: ST_TO_ADDR
// sTime := false ;
21406: LD_ADDR_EXP 105
21410: PUSH
21411: LD_INT 0
21413: ST_TO_ADDR
// sTools := false ;
21414: LD_ADDR_EXP 106
21418: PUSH
21419: LD_INT 0
21421: ST_TO_ADDR
// sSold := false ;
21422: LD_ADDR_EXP 71
21426: PUSH
21427: LD_INT 0
21429: ST_TO_ADDR
// sDiff := false ;
21430: LD_ADDR_EXP 72
21434: PUSH
21435: LD_INT 0
21437: ST_TO_ADDR
// sFog := false ;
21438: LD_ADDR_EXP 75
21442: PUSH
21443: LD_INT 0
21445: ST_TO_ADDR
// sReset := false ;
21446: LD_ADDR_EXP 76
21450: PUSH
21451: LD_INT 0
21453: ST_TO_ADDR
// sSun := false ;
21454: LD_ADDR_EXP 77
21458: PUSH
21459: LD_INT 0
21461: ST_TO_ADDR
// sTiger := false ;
21462: LD_ADDR_EXP 73
21466: PUSH
21467: LD_INT 0
21469: ST_TO_ADDR
// sBomb := false ;
21470: LD_ADDR_EXP 74
21474: PUSH
21475: LD_INT 0
21477: ST_TO_ADDR
// sWound := false ;
21478: LD_ADDR_EXP 82
21482: PUSH
21483: LD_INT 0
21485: ST_TO_ADDR
// sBetray := false ;
21486: LD_ADDR_EXP 86
21490: PUSH
21491: LD_INT 0
21493: ST_TO_ADDR
// sContamin := false ;
21494: LD_ADDR_EXP 87
21498: PUSH
21499: LD_INT 0
21501: ST_TO_ADDR
// sOil := false ;
21502: LD_ADDR_EXP 89
21506: PUSH
21507: LD_INT 0
21509: ST_TO_ADDR
// sStu := false ;
21510: LD_ADDR_EXP 93
21514: PUSH
21515: LD_INT 0
21517: ST_TO_ADDR
// sBazooka := false ;
21518: LD_ADDR_EXP 96
21522: PUSH
21523: LD_INT 0
21525: ST_TO_ADDR
// sMortar := false ;
21526: LD_ADDR_EXP 97
21530: PUSH
21531: LD_INT 0
21533: ST_TO_ADDR
// sRanger := false ;
21534: LD_ADDR_EXP 107
21538: PUSH
21539: LD_INT 0
21541: ST_TO_ADDR
// sComputer := false ;
21542: LD_ADDR_EXP 108
21546: PUSH
21547: LD_INT 0
21549: ST_TO_ADDR
// s30 := false ;
21550: LD_ADDR_EXP 109
21554: PUSH
21555: LD_INT 0
21557: ST_TO_ADDR
// s60 := false ;
21558: LD_ADDR_EXP 110
21562: PUSH
21563: LD_INT 0
21565: ST_TO_ADDR
// end ;
21566: LD_VAR 0 1
21570: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21571: LD_INT 0
21573: PPUSH
21574: PPUSH
21575: PPUSH
21576: PPUSH
21577: PPUSH
21578: PPUSH
21579: PPUSH
// result := [ ] ;
21580: LD_ADDR_VAR 0 2
21584: PUSH
21585: EMPTY
21586: ST_TO_ADDR
// if campaign_id = 1 then
21587: LD_OWVAR 69
21591: PUSH
21592: LD_INT 1
21594: EQUAL
21595: IFFALSE 24761
// begin case mission_number of 1 :
21597: LD_OWVAR 70
21601: PUSH
21602: LD_INT 1
21604: DOUBLE
21605: EQUAL
21606: IFTRUE 21610
21608: GO 21686
21610: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21611: LD_ADDR_VAR 0 2
21615: PUSH
21616: LD_INT 2
21618: PUSH
21619: LD_INT 4
21621: PUSH
21622: LD_INT 11
21624: PUSH
21625: LD_INT 12
21627: PUSH
21628: LD_INT 15
21630: PUSH
21631: LD_INT 16
21633: PUSH
21634: LD_INT 22
21636: PUSH
21637: LD_INT 23
21639: PUSH
21640: LD_INT 26
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 101
21656: PUSH
21657: LD_INT 102
21659: PUSH
21660: LD_INT 106
21662: PUSH
21663: LD_INT 116
21665: PUSH
21666: LD_INT 117
21668: PUSH
21669: LD_INT 118
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: ST_TO_ADDR
21684: GO 24759
21686: LD_INT 2
21688: DOUBLE
21689: EQUAL
21690: IFTRUE 21694
21692: GO 21778
21694: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21695: LD_ADDR_VAR 0 2
21699: PUSH
21700: LD_INT 2
21702: PUSH
21703: LD_INT 4
21705: PUSH
21706: LD_INT 11
21708: PUSH
21709: LD_INT 12
21711: PUSH
21712: LD_INT 15
21714: PUSH
21715: LD_INT 16
21717: PUSH
21718: LD_INT 22
21720: PUSH
21721: LD_INT 23
21723: PUSH
21724: LD_INT 26
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 101
21740: PUSH
21741: LD_INT 102
21743: PUSH
21744: LD_INT 105
21746: PUSH
21747: LD_INT 106
21749: PUSH
21750: LD_INT 108
21752: PUSH
21753: LD_INT 116
21755: PUSH
21756: LD_INT 117
21758: PUSH
21759: LD_INT 118
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: ST_TO_ADDR
21776: GO 24759
21778: LD_INT 3
21780: DOUBLE
21781: EQUAL
21782: IFTRUE 21786
21784: GO 21874
21786: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21787: LD_ADDR_VAR 0 2
21791: PUSH
21792: LD_INT 2
21794: PUSH
21795: LD_INT 4
21797: PUSH
21798: LD_INT 5
21800: PUSH
21801: LD_INT 11
21803: PUSH
21804: LD_INT 12
21806: PUSH
21807: LD_INT 15
21809: PUSH
21810: LD_INT 16
21812: PUSH
21813: LD_INT 22
21815: PUSH
21816: LD_INT 26
21818: PUSH
21819: LD_INT 36
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 101
21836: PUSH
21837: LD_INT 102
21839: PUSH
21840: LD_INT 105
21842: PUSH
21843: LD_INT 106
21845: PUSH
21846: LD_INT 108
21848: PUSH
21849: LD_INT 116
21851: PUSH
21852: LD_INT 117
21854: PUSH
21855: LD_INT 118
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: ST_TO_ADDR
21872: GO 24759
21874: LD_INT 4
21876: DOUBLE
21877: EQUAL
21878: IFTRUE 21882
21880: GO 21978
21882: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21883: LD_ADDR_VAR 0 2
21887: PUSH
21888: LD_INT 2
21890: PUSH
21891: LD_INT 4
21893: PUSH
21894: LD_INT 5
21896: PUSH
21897: LD_INT 8
21899: PUSH
21900: LD_INT 11
21902: PUSH
21903: LD_INT 12
21905: PUSH
21906: LD_INT 15
21908: PUSH
21909: LD_INT 16
21911: PUSH
21912: LD_INT 22
21914: PUSH
21915: LD_INT 23
21917: PUSH
21918: LD_INT 26
21920: PUSH
21921: LD_INT 36
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 101
21940: PUSH
21941: LD_INT 102
21943: PUSH
21944: LD_INT 105
21946: PUSH
21947: LD_INT 106
21949: PUSH
21950: LD_INT 108
21952: PUSH
21953: LD_INT 116
21955: PUSH
21956: LD_INT 117
21958: PUSH
21959: LD_INT 118
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: ST_TO_ADDR
21976: GO 24759
21978: LD_INT 5
21980: DOUBLE
21981: EQUAL
21982: IFTRUE 21986
21984: GO 22098
21986: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21987: LD_ADDR_VAR 0 2
21991: PUSH
21992: LD_INT 2
21994: PUSH
21995: LD_INT 4
21997: PUSH
21998: LD_INT 5
22000: PUSH
22001: LD_INT 6
22003: PUSH
22004: LD_INT 8
22006: PUSH
22007: LD_INT 11
22009: PUSH
22010: LD_INT 12
22012: PUSH
22013: LD_INT 15
22015: PUSH
22016: LD_INT 16
22018: PUSH
22019: LD_INT 22
22021: PUSH
22022: LD_INT 23
22024: PUSH
22025: LD_INT 25
22027: PUSH
22028: LD_INT 26
22030: PUSH
22031: LD_INT 36
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 101
22052: PUSH
22053: LD_INT 102
22055: PUSH
22056: LD_INT 105
22058: PUSH
22059: LD_INT 106
22061: PUSH
22062: LD_INT 108
22064: PUSH
22065: LD_INT 109
22067: PUSH
22068: LD_INT 112
22070: PUSH
22071: LD_INT 116
22073: PUSH
22074: LD_INT 117
22076: PUSH
22077: LD_INT 118
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: ST_TO_ADDR
22096: GO 24759
22098: LD_INT 6
22100: DOUBLE
22101: EQUAL
22102: IFTRUE 22106
22104: GO 22238
22106: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22107: LD_ADDR_VAR 0 2
22111: PUSH
22112: LD_INT 2
22114: PUSH
22115: LD_INT 4
22117: PUSH
22118: LD_INT 5
22120: PUSH
22121: LD_INT 6
22123: PUSH
22124: LD_INT 8
22126: PUSH
22127: LD_INT 11
22129: PUSH
22130: LD_INT 12
22132: PUSH
22133: LD_INT 15
22135: PUSH
22136: LD_INT 16
22138: PUSH
22139: LD_INT 20
22141: PUSH
22142: LD_INT 21
22144: PUSH
22145: LD_INT 22
22147: PUSH
22148: LD_INT 23
22150: PUSH
22151: LD_INT 25
22153: PUSH
22154: LD_INT 26
22156: PUSH
22157: LD_INT 30
22159: PUSH
22160: LD_INT 31
22162: PUSH
22163: LD_INT 32
22165: PUSH
22166: LD_INT 36
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 101
22192: PUSH
22193: LD_INT 102
22195: PUSH
22196: LD_INT 105
22198: PUSH
22199: LD_INT 106
22201: PUSH
22202: LD_INT 108
22204: PUSH
22205: LD_INT 109
22207: PUSH
22208: LD_INT 112
22210: PUSH
22211: LD_INT 116
22213: PUSH
22214: LD_INT 117
22216: PUSH
22217: LD_INT 118
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: ST_TO_ADDR
22236: GO 24759
22238: LD_INT 7
22240: DOUBLE
22241: EQUAL
22242: IFTRUE 22246
22244: GO 22358
22246: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22247: LD_ADDR_VAR 0 2
22251: PUSH
22252: LD_INT 2
22254: PUSH
22255: LD_INT 4
22257: PUSH
22258: LD_INT 5
22260: PUSH
22261: LD_INT 7
22263: PUSH
22264: LD_INT 11
22266: PUSH
22267: LD_INT 12
22269: PUSH
22270: LD_INT 15
22272: PUSH
22273: LD_INT 16
22275: PUSH
22276: LD_INT 20
22278: PUSH
22279: LD_INT 21
22281: PUSH
22282: LD_INT 22
22284: PUSH
22285: LD_INT 23
22287: PUSH
22288: LD_INT 25
22290: PUSH
22291: LD_INT 26
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 101
22312: PUSH
22313: LD_INT 102
22315: PUSH
22316: LD_INT 103
22318: PUSH
22319: LD_INT 105
22321: PUSH
22322: LD_INT 106
22324: PUSH
22325: LD_INT 108
22327: PUSH
22328: LD_INT 112
22330: PUSH
22331: LD_INT 116
22333: PUSH
22334: LD_INT 117
22336: PUSH
22337: LD_INT 118
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: ST_TO_ADDR
22356: GO 24759
22358: LD_INT 8
22360: DOUBLE
22361: EQUAL
22362: IFTRUE 22366
22364: GO 22506
22366: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22367: LD_ADDR_VAR 0 2
22371: PUSH
22372: LD_INT 2
22374: PUSH
22375: LD_INT 4
22377: PUSH
22378: LD_INT 5
22380: PUSH
22381: LD_INT 6
22383: PUSH
22384: LD_INT 7
22386: PUSH
22387: LD_INT 8
22389: PUSH
22390: LD_INT 11
22392: PUSH
22393: LD_INT 12
22395: PUSH
22396: LD_INT 15
22398: PUSH
22399: LD_INT 16
22401: PUSH
22402: LD_INT 20
22404: PUSH
22405: LD_INT 21
22407: PUSH
22408: LD_INT 22
22410: PUSH
22411: LD_INT 23
22413: PUSH
22414: LD_INT 25
22416: PUSH
22417: LD_INT 26
22419: PUSH
22420: LD_INT 30
22422: PUSH
22423: LD_INT 31
22425: PUSH
22426: LD_INT 32
22428: PUSH
22429: LD_INT 36
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 101
22456: PUSH
22457: LD_INT 102
22459: PUSH
22460: LD_INT 103
22462: PUSH
22463: LD_INT 105
22465: PUSH
22466: LD_INT 106
22468: PUSH
22469: LD_INT 108
22471: PUSH
22472: LD_INT 109
22474: PUSH
22475: LD_INT 112
22477: PUSH
22478: LD_INT 116
22480: PUSH
22481: LD_INT 117
22483: PUSH
22484: LD_INT 118
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: ST_TO_ADDR
22504: GO 24759
22506: LD_INT 9
22508: DOUBLE
22509: EQUAL
22510: IFTRUE 22514
22512: GO 22662
22514: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22515: LD_ADDR_VAR 0 2
22519: PUSH
22520: LD_INT 2
22522: PUSH
22523: LD_INT 4
22525: PUSH
22526: LD_INT 5
22528: PUSH
22529: LD_INT 6
22531: PUSH
22532: LD_INT 7
22534: PUSH
22535: LD_INT 8
22537: PUSH
22538: LD_INT 11
22540: PUSH
22541: LD_INT 12
22543: PUSH
22544: LD_INT 15
22546: PUSH
22547: LD_INT 16
22549: PUSH
22550: LD_INT 20
22552: PUSH
22553: LD_INT 21
22555: PUSH
22556: LD_INT 22
22558: PUSH
22559: LD_INT 23
22561: PUSH
22562: LD_INT 25
22564: PUSH
22565: LD_INT 26
22567: PUSH
22568: LD_INT 28
22570: PUSH
22571: LD_INT 30
22573: PUSH
22574: LD_INT 31
22576: PUSH
22577: LD_INT 32
22579: PUSH
22580: LD_INT 36
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 101
22608: PUSH
22609: LD_INT 102
22611: PUSH
22612: LD_INT 103
22614: PUSH
22615: LD_INT 105
22617: PUSH
22618: LD_INT 106
22620: PUSH
22621: LD_INT 108
22623: PUSH
22624: LD_INT 109
22626: PUSH
22627: LD_INT 112
22629: PUSH
22630: LD_INT 114
22632: PUSH
22633: LD_INT 116
22635: PUSH
22636: LD_INT 117
22638: PUSH
22639: LD_INT 118
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: ST_TO_ADDR
22660: GO 24759
22662: LD_INT 10
22664: DOUBLE
22665: EQUAL
22666: IFTRUE 22670
22668: GO 22866
22670: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22671: LD_ADDR_VAR 0 2
22675: PUSH
22676: LD_INT 2
22678: PUSH
22679: LD_INT 4
22681: PUSH
22682: LD_INT 5
22684: PUSH
22685: LD_INT 6
22687: PUSH
22688: LD_INT 7
22690: PUSH
22691: LD_INT 8
22693: PUSH
22694: LD_INT 9
22696: PUSH
22697: LD_INT 10
22699: PUSH
22700: LD_INT 11
22702: PUSH
22703: LD_INT 12
22705: PUSH
22706: LD_INT 13
22708: PUSH
22709: LD_INT 14
22711: PUSH
22712: LD_INT 15
22714: PUSH
22715: LD_INT 16
22717: PUSH
22718: LD_INT 17
22720: PUSH
22721: LD_INT 18
22723: PUSH
22724: LD_INT 19
22726: PUSH
22727: LD_INT 20
22729: PUSH
22730: LD_INT 21
22732: PUSH
22733: LD_INT 22
22735: PUSH
22736: LD_INT 23
22738: PUSH
22739: LD_INT 24
22741: PUSH
22742: LD_INT 25
22744: PUSH
22745: LD_INT 26
22747: PUSH
22748: LD_INT 28
22750: PUSH
22751: LD_INT 30
22753: PUSH
22754: LD_INT 31
22756: PUSH
22757: LD_INT 32
22759: PUSH
22760: LD_INT 36
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 101
22796: PUSH
22797: LD_INT 102
22799: PUSH
22800: LD_INT 103
22802: PUSH
22803: LD_INT 104
22805: PUSH
22806: LD_INT 105
22808: PUSH
22809: LD_INT 106
22811: PUSH
22812: LD_INT 107
22814: PUSH
22815: LD_INT 108
22817: PUSH
22818: LD_INT 109
22820: PUSH
22821: LD_INT 110
22823: PUSH
22824: LD_INT 111
22826: PUSH
22827: LD_INT 112
22829: PUSH
22830: LD_INT 114
22832: PUSH
22833: LD_INT 116
22835: PUSH
22836: LD_INT 117
22838: PUSH
22839: LD_INT 118
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: ST_TO_ADDR
22864: GO 24759
22866: LD_INT 11
22868: DOUBLE
22869: EQUAL
22870: IFTRUE 22874
22872: GO 23078
22874: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22875: LD_ADDR_VAR 0 2
22879: PUSH
22880: LD_INT 2
22882: PUSH
22883: LD_INT 3
22885: PUSH
22886: LD_INT 4
22888: PUSH
22889: LD_INT 5
22891: PUSH
22892: LD_INT 6
22894: PUSH
22895: LD_INT 7
22897: PUSH
22898: LD_INT 8
22900: PUSH
22901: LD_INT 9
22903: PUSH
22904: LD_INT 10
22906: PUSH
22907: LD_INT 11
22909: PUSH
22910: LD_INT 12
22912: PUSH
22913: LD_INT 13
22915: PUSH
22916: LD_INT 14
22918: PUSH
22919: LD_INT 15
22921: PUSH
22922: LD_INT 16
22924: PUSH
22925: LD_INT 17
22927: PUSH
22928: LD_INT 18
22930: PUSH
22931: LD_INT 19
22933: PUSH
22934: LD_INT 20
22936: PUSH
22937: LD_INT 21
22939: PUSH
22940: LD_INT 22
22942: PUSH
22943: LD_INT 23
22945: PUSH
22946: LD_INT 24
22948: PUSH
22949: LD_INT 25
22951: PUSH
22952: LD_INT 26
22954: PUSH
22955: LD_INT 28
22957: PUSH
22958: LD_INT 30
22960: PUSH
22961: LD_INT 31
22963: PUSH
22964: LD_INT 32
22966: PUSH
22967: LD_INT 34
22969: PUSH
22970: LD_INT 36
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 101
23008: PUSH
23009: LD_INT 102
23011: PUSH
23012: LD_INT 103
23014: PUSH
23015: LD_INT 104
23017: PUSH
23018: LD_INT 105
23020: PUSH
23021: LD_INT 106
23023: PUSH
23024: LD_INT 107
23026: PUSH
23027: LD_INT 108
23029: PUSH
23030: LD_INT 109
23032: PUSH
23033: LD_INT 110
23035: PUSH
23036: LD_INT 111
23038: PUSH
23039: LD_INT 112
23041: PUSH
23042: LD_INT 114
23044: PUSH
23045: LD_INT 116
23047: PUSH
23048: LD_INT 117
23050: PUSH
23051: LD_INT 118
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: ST_TO_ADDR
23076: GO 24759
23078: LD_INT 12
23080: DOUBLE
23081: EQUAL
23082: IFTRUE 23086
23084: GO 23306
23086: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23087: LD_ADDR_VAR 0 2
23091: PUSH
23092: LD_INT 1
23094: PUSH
23095: LD_INT 2
23097: PUSH
23098: LD_INT 3
23100: PUSH
23101: LD_INT 4
23103: PUSH
23104: LD_INT 5
23106: PUSH
23107: LD_INT 6
23109: PUSH
23110: LD_INT 7
23112: PUSH
23113: LD_INT 8
23115: PUSH
23116: LD_INT 9
23118: PUSH
23119: LD_INT 10
23121: PUSH
23122: LD_INT 11
23124: PUSH
23125: LD_INT 12
23127: PUSH
23128: LD_INT 13
23130: PUSH
23131: LD_INT 14
23133: PUSH
23134: LD_INT 15
23136: PUSH
23137: LD_INT 16
23139: PUSH
23140: LD_INT 17
23142: PUSH
23143: LD_INT 18
23145: PUSH
23146: LD_INT 19
23148: PUSH
23149: LD_INT 20
23151: PUSH
23152: LD_INT 21
23154: PUSH
23155: LD_INT 22
23157: PUSH
23158: LD_INT 23
23160: PUSH
23161: LD_INT 24
23163: PUSH
23164: LD_INT 25
23166: PUSH
23167: LD_INT 26
23169: PUSH
23170: LD_INT 27
23172: PUSH
23173: LD_INT 28
23175: PUSH
23176: LD_INT 30
23178: PUSH
23179: LD_INT 31
23181: PUSH
23182: LD_INT 32
23184: PUSH
23185: LD_INT 33
23187: PUSH
23188: LD_INT 34
23190: PUSH
23191: LD_INT 36
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 101
23232: PUSH
23233: LD_INT 102
23235: PUSH
23236: LD_INT 103
23238: PUSH
23239: LD_INT 104
23241: PUSH
23242: LD_INT 105
23244: PUSH
23245: LD_INT 106
23247: PUSH
23248: LD_INT 107
23250: PUSH
23251: LD_INT 108
23253: PUSH
23254: LD_INT 109
23256: PUSH
23257: LD_INT 110
23259: PUSH
23260: LD_INT 111
23262: PUSH
23263: LD_INT 112
23265: PUSH
23266: LD_INT 113
23268: PUSH
23269: LD_INT 114
23271: PUSH
23272: LD_INT 116
23274: PUSH
23275: LD_INT 117
23277: PUSH
23278: LD_INT 118
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: ST_TO_ADDR
23304: GO 24759
23306: LD_INT 13
23308: DOUBLE
23309: EQUAL
23310: IFTRUE 23314
23312: GO 23522
23314: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23315: LD_ADDR_VAR 0 2
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: LD_INT 2
23325: PUSH
23326: LD_INT 3
23328: PUSH
23329: LD_INT 4
23331: PUSH
23332: LD_INT 5
23334: PUSH
23335: LD_INT 8
23337: PUSH
23338: LD_INT 9
23340: PUSH
23341: LD_INT 10
23343: PUSH
23344: LD_INT 11
23346: PUSH
23347: LD_INT 12
23349: PUSH
23350: LD_INT 14
23352: PUSH
23353: LD_INT 15
23355: PUSH
23356: LD_INT 16
23358: PUSH
23359: LD_INT 17
23361: PUSH
23362: LD_INT 18
23364: PUSH
23365: LD_INT 19
23367: PUSH
23368: LD_INT 20
23370: PUSH
23371: LD_INT 21
23373: PUSH
23374: LD_INT 22
23376: PUSH
23377: LD_INT 23
23379: PUSH
23380: LD_INT 24
23382: PUSH
23383: LD_INT 25
23385: PUSH
23386: LD_INT 26
23388: PUSH
23389: LD_INT 27
23391: PUSH
23392: LD_INT 28
23394: PUSH
23395: LD_INT 30
23397: PUSH
23398: LD_INT 31
23400: PUSH
23401: LD_INT 32
23403: PUSH
23404: LD_INT 33
23406: PUSH
23407: LD_INT 34
23409: PUSH
23410: LD_INT 36
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 101
23448: PUSH
23449: LD_INT 102
23451: PUSH
23452: LD_INT 103
23454: PUSH
23455: LD_INT 104
23457: PUSH
23458: LD_INT 105
23460: PUSH
23461: LD_INT 106
23463: PUSH
23464: LD_INT 107
23466: PUSH
23467: LD_INT 108
23469: PUSH
23470: LD_INT 109
23472: PUSH
23473: LD_INT 110
23475: PUSH
23476: LD_INT 111
23478: PUSH
23479: LD_INT 112
23481: PUSH
23482: LD_INT 113
23484: PUSH
23485: LD_INT 114
23487: PUSH
23488: LD_INT 116
23490: PUSH
23491: LD_INT 117
23493: PUSH
23494: LD_INT 118
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: ST_TO_ADDR
23520: GO 24759
23522: LD_INT 14
23524: DOUBLE
23525: EQUAL
23526: IFTRUE 23530
23528: GO 23754
23530: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23531: LD_ADDR_VAR 0 2
23535: PUSH
23536: LD_INT 1
23538: PUSH
23539: LD_INT 2
23541: PUSH
23542: LD_INT 3
23544: PUSH
23545: LD_INT 4
23547: PUSH
23548: LD_INT 5
23550: PUSH
23551: LD_INT 6
23553: PUSH
23554: LD_INT 7
23556: PUSH
23557: LD_INT 8
23559: PUSH
23560: LD_INT 9
23562: PUSH
23563: LD_INT 10
23565: PUSH
23566: LD_INT 11
23568: PUSH
23569: LD_INT 12
23571: PUSH
23572: LD_INT 13
23574: PUSH
23575: LD_INT 14
23577: PUSH
23578: LD_INT 15
23580: PUSH
23581: LD_INT 16
23583: PUSH
23584: LD_INT 17
23586: PUSH
23587: LD_INT 18
23589: PUSH
23590: LD_INT 19
23592: PUSH
23593: LD_INT 20
23595: PUSH
23596: LD_INT 21
23598: PUSH
23599: LD_INT 22
23601: PUSH
23602: LD_INT 23
23604: PUSH
23605: LD_INT 24
23607: PUSH
23608: LD_INT 25
23610: PUSH
23611: LD_INT 26
23613: PUSH
23614: LD_INT 27
23616: PUSH
23617: LD_INT 28
23619: PUSH
23620: LD_INT 29
23622: PUSH
23623: LD_INT 30
23625: PUSH
23626: LD_INT 31
23628: PUSH
23629: LD_INT 32
23631: PUSH
23632: LD_INT 33
23634: PUSH
23635: LD_INT 34
23637: PUSH
23638: LD_INT 36
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 101
23680: PUSH
23681: LD_INT 102
23683: PUSH
23684: LD_INT 103
23686: PUSH
23687: LD_INT 104
23689: PUSH
23690: LD_INT 105
23692: PUSH
23693: LD_INT 106
23695: PUSH
23696: LD_INT 107
23698: PUSH
23699: LD_INT 108
23701: PUSH
23702: LD_INT 109
23704: PUSH
23705: LD_INT 110
23707: PUSH
23708: LD_INT 111
23710: PUSH
23711: LD_INT 112
23713: PUSH
23714: LD_INT 113
23716: PUSH
23717: LD_INT 114
23719: PUSH
23720: LD_INT 116
23722: PUSH
23723: LD_INT 117
23725: PUSH
23726: LD_INT 118
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: ST_TO_ADDR
23752: GO 24759
23754: LD_INT 15
23756: DOUBLE
23757: EQUAL
23758: IFTRUE 23762
23760: GO 23986
23762: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23763: LD_ADDR_VAR 0 2
23767: PUSH
23768: LD_INT 1
23770: PUSH
23771: LD_INT 2
23773: PUSH
23774: LD_INT 3
23776: PUSH
23777: LD_INT 4
23779: PUSH
23780: LD_INT 5
23782: PUSH
23783: LD_INT 6
23785: PUSH
23786: LD_INT 7
23788: PUSH
23789: LD_INT 8
23791: PUSH
23792: LD_INT 9
23794: PUSH
23795: LD_INT 10
23797: PUSH
23798: LD_INT 11
23800: PUSH
23801: LD_INT 12
23803: PUSH
23804: LD_INT 13
23806: PUSH
23807: LD_INT 14
23809: PUSH
23810: LD_INT 15
23812: PUSH
23813: LD_INT 16
23815: PUSH
23816: LD_INT 17
23818: PUSH
23819: LD_INT 18
23821: PUSH
23822: LD_INT 19
23824: PUSH
23825: LD_INT 20
23827: PUSH
23828: LD_INT 21
23830: PUSH
23831: LD_INT 22
23833: PUSH
23834: LD_INT 23
23836: PUSH
23837: LD_INT 24
23839: PUSH
23840: LD_INT 25
23842: PUSH
23843: LD_INT 26
23845: PUSH
23846: LD_INT 27
23848: PUSH
23849: LD_INT 28
23851: PUSH
23852: LD_INT 29
23854: PUSH
23855: LD_INT 30
23857: PUSH
23858: LD_INT 31
23860: PUSH
23861: LD_INT 32
23863: PUSH
23864: LD_INT 33
23866: PUSH
23867: LD_INT 34
23869: PUSH
23870: LD_INT 36
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 101
23912: PUSH
23913: LD_INT 102
23915: PUSH
23916: LD_INT 103
23918: PUSH
23919: LD_INT 104
23921: PUSH
23922: LD_INT 105
23924: PUSH
23925: LD_INT 106
23927: PUSH
23928: LD_INT 107
23930: PUSH
23931: LD_INT 108
23933: PUSH
23934: LD_INT 109
23936: PUSH
23937: LD_INT 110
23939: PUSH
23940: LD_INT 111
23942: PUSH
23943: LD_INT 112
23945: PUSH
23946: LD_INT 113
23948: PUSH
23949: LD_INT 114
23951: PUSH
23952: LD_INT 116
23954: PUSH
23955: LD_INT 117
23957: PUSH
23958: LD_INT 118
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: ST_TO_ADDR
23984: GO 24759
23986: LD_INT 16
23988: DOUBLE
23989: EQUAL
23990: IFTRUE 23994
23992: GO 24130
23994: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23995: LD_ADDR_VAR 0 2
23999: PUSH
24000: LD_INT 2
24002: PUSH
24003: LD_INT 4
24005: PUSH
24006: LD_INT 5
24008: PUSH
24009: LD_INT 7
24011: PUSH
24012: LD_INT 11
24014: PUSH
24015: LD_INT 12
24017: PUSH
24018: LD_INT 15
24020: PUSH
24021: LD_INT 16
24023: PUSH
24024: LD_INT 20
24026: PUSH
24027: LD_INT 21
24029: PUSH
24030: LD_INT 22
24032: PUSH
24033: LD_INT 23
24035: PUSH
24036: LD_INT 25
24038: PUSH
24039: LD_INT 26
24041: PUSH
24042: LD_INT 30
24044: PUSH
24045: LD_INT 31
24047: PUSH
24048: LD_INT 32
24050: PUSH
24051: LD_INT 33
24053: PUSH
24054: LD_INT 34
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 101
24080: PUSH
24081: LD_INT 102
24083: PUSH
24084: LD_INT 103
24086: PUSH
24087: LD_INT 106
24089: PUSH
24090: LD_INT 108
24092: PUSH
24093: LD_INT 112
24095: PUSH
24096: LD_INT 113
24098: PUSH
24099: LD_INT 114
24101: PUSH
24102: LD_INT 116
24104: PUSH
24105: LD_INT 117
24107: PUSH
24108: LD_INT 118
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: ST_TO_ADDR
24128: GO 24759
24130: LD_INT 17
24132: DOUBLE
24133: EQUAL
24134: IFTRUE 24138
24136: GO 24362
24138: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24139: LD_ADDR_VAR 0 2
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: LD_INT 2
24149: PUSH
24150: LD_INT 3
24152: PUSH
24153: LD_INT 4
24155: PUSH
24156: LD_INT 5
24158: PUSH
24159: LD_INT 6
24161: PUSH
24162: LD_INT 7
24164: PUSH
24165: LD_INT 8
24167: PUSH
24168: LD_INT 9
24170: PUSH
24171: LD_INT 10
24173: PUSH
24174: LD_INT 11
24176: PUSH
24177: LD_INT 12
24179: PUSH
24180: LD_INT 13
24182: PUSH
24183: LD_INT 14
24185: PUSH
24186: LD_INT 15
24188: PUSH
24189: LD_INT 16
24191: PUSH
24192: LD_INT 17
24194: PUSH
24195: LD_INT 18
24197: PUSH
24198: LD_INT 19
24200: PUSH
24201: LD_INT 20
24203: PUSH
24204: LD_INT 21
24206: PUSH
24207: LD_INT 22
24209: PUSH
24210: LD_INT 23
24212: PUSH
24213: LD_INT 24
24215: PUSH
24216: LD_INT 25
24218: PUSH
24219: LD_INT 26
24221: PUSH
24222: LD_INT 27
24224: PUSH
24225: LD_INT 28
24227: PUSH
24228: LD_INT 29
24230: PUSH
24231: LD_INT 30
24233: PUSH
24234: LD_INT 31
24236: PUSH
24237: LD_INT 32
24239: PUSH
24240: LD_INT 33
24242: PUSH
24243: LD_INT 34
24245: PUSH
24246: LD_INT 36
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 101
24288: PUSH
24289: LD_INT 102
24291: PUSH
24292: LD_INT 103
24294: PUSH
24295: LD_INT 104
24297: PUSH
24298: LD_INT 105
24300: PUSH
24301: LD_INT 106
24303: PUSH
24304: LD_INT 107
24306: PUSH
24307: LD_INT 108
24309: PUSH
24310: LD_INT 109
24312: PUSH
24313: LD_INT 110
24315: PUSH
24316: LD_INT 111
24318: PUSH
24319: LD_INT 112
24321: PUSH
24322: LD_INT 113
24324: PUSH
24325: LD_INT 114
24327: PUSH
24328: LD_INT 116
24330: PUSH
24331: LD_INT 117
24333: PUSH
24334: LD_INT 118
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: ST_TO_ADDR
24360: GO 24759
24362: LD_INT 18
24364: DOUBLE
24365: EQUAL
24366: IFTRUE 24370
24368: GO 24518
24370: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24371: LD_ADDR_VAR 0 2
24375: PUSH
24376: LD_INT 2
24378: PUSH
24379: LD_INT 4
24381: PUSH
24382: LD_INT 5
24384: PUSH
24385: LD_INT 7
24387: PUSH
24388: LD_INT 11
24390: PUSH
24391: LD_INT 12
24393: PUSH
24394: LD_INT 15
24396: PUSH
24397: LD_INT 16
24399: PUSH
24400: LD_INT 20
24402: PUSH
24403: LD_INT 21
24405: PUSH
24406: LD_INT 22
24408: PUSH
24409: LD_INT 23
24411: PUSH
24412: LD_INT 25
24414: PUSH
24415: LD_INT 26
24417: PUSH
24418: LD_INT 30
24420: PUSH
24421: LD_INT 31
24423: PUSH
24424: LD_INT 32
24426: PUSH
24427: LD_INT 33
24429: PUSH
24430: LD_INT 34
24432: PUSH
24433: LD_INT 35
24435: PUSH
24436: LD_INT 36
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 101
24464: PUSH
24465: LD_INT 102
24467: PUSH
24468: LD_INT 103
24470: PUSH
24471: LD_INT 106
24473: PUSH
24474: LD_INT 108
24476: PUSH
24477: LD_INT 112
24479: PUSH
24480: LD_INT 113
24482: PUSH
24483: LD_INT 114
24485: PUSH
24486: LD_INT 115
24488: PUSH
24489: LD_INT 116
24491: PUSH
24492: LD_INT 117
24494: PUSH
24495: LD_INT 118
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: ST_TO_ADDR
24516: GO 24759
24518: LD_INT 19
24520: DOUBLE
24521: EQUAL
24522: IFTRUE 24526
24524: GO 24758
24526: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24527: LD_ADDR_VAR 0 2
24531: PUSH
24532: LD_INT 1
24534: PUSH
24535: LD_INT 2
24537: PUSH
24538: LD_INT 3
24540: PUSH
24541: LD_INT 4
24543: PUSH
24544: LD_INT 5
24546: PUSH
24547: LD_INT 6
24549: PUSH
24550: LD_INT 7
24552: PUSH
24553: LD_INT 8
24555: PUSH
24556: LD_INT 9
24558: PUSH
24559: LD_INT 10
24561: PUSH
24562: LD_INT 11
24564: PUSH
24565: LD_INT 12
24567: PUSH
24568: LD_INT 13
24570: PUSH
24571: LD_INT 14
24573: PUSH
24574: LD_INT 15
24576: PUSH
24577: LD_INT 16
24579: PUSH
24580: LD_INT 17
24582: PUSH
24583: LD_INT 18
24585: PUSH
24586: LD_INT 19
24588: PUSH
24589: LD_INT 20
24591: PUSH
24592: LD_INT 21
24594: PUSH
24595: LD_INT 22
24597: PUSH
24598: LD_INT 23
24600: PUSH
24601: LD_INT 24
24603: PUSH
24604: LD_INT 25
24606: PUSH
24607: LD_INT 26
24609: PUSH
24610: LD_INT 27
24612: PUSH
24613: LD_INT 28
24615: PUSH
24616: LD_INT 29
24618: PUSH
24619: LD_INT 30
24621: PUSH
24622: LD_INT 31
24624: PUSH
24625: LD_INT 32
24627: PUSH
24628: LD_INT 33
24630: PUSH
24631: LD_INT 34
24633: PUSH
24634: LD_INT 35
24636: PUSH
24637: LD_INT 36
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 101
24680: PUSH
24681: LD_INT 102
24683: PUSH
24684: LD_INT 103
24686: PUSH
24687: LD_INT 104
24689: PUSH
24690: LD_INT 105
24692: PUSH
24693: LD_INT 106
24695: PUSH
24696: LD_INT 107
24698: PUSH
24699: LD_INT 108
24701: PUSH
24702: LD_INT 109
24704: PUSH
24705: LD_INT 110
24707: PUSH
24708: LD_INT 111
24710: PUSH
24711: LD_INT 112
24713: PUSH
24714: LD_INT 113
24716: PUSH
24717: LD_INT 114
24719: PUSH
24720: LD_INT 115
24722: PUSH
24723: LD_INT 116
24725: PUSH
24726: LD_INT 117
24728: PUSH
24729: LD_INT 118
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: ST_TO_ADDR
24756: GO 24759
24758: POP
// end else
24759: GO 24990
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24761: LD_ADDR_VAR 0 2
24765: PUSH
24766: LD_INT 1
24768: PUSH
24769: LD_INT 2
24771: PUSH
24772: LD_INT 3
24774: PUSH
24775: LD_INT 4
24777: PUSH
24778: LD_INT 5
24780: PUSH
24781: LD_INT 6
24783: PUSH
24784: LD_INT 7
24786: PUSH
24787: LD_INT 8
24789: PUSH
24790: LD_INT 9
24792: PUSH
24793: LD_INT 10
24795: PUSH
24796: LD_INT 11
24798: PUSH
24799: LD_INT 12
24801: PUSH
24802: LD_INT 13
24804: PUSH
24805: LD_INT 14
24807: PUSH
24808: LD_INT 15
24810: PUSH
24811: LD_INT 16
24813: PUSH
24814: LD_INT 17
24816: PUSH
24817: LD_INT 18
24819: PUSH
24820: LD_INT 19
24822: PUSH
24823: LD_INT 20
24825: PUSH
24826: LD_INT 21
24828: PUSH
24829: LD_INT 22
24831: PUSH
24832: LD_INT 23
24834: PUSH
24835: LD_INT 24
24837: PUSH
24838: LD_INT 25
24840: PUSH
24841: LD_INT 26
24843: PUSH
24844: LD_INT 27
24846: PUSH
24847: LD_INT 28
24849: PUSH
24850: LD_INT 29
24852: PUSH
24853: LD_INT 30
24855: PUSH
24856: LD_INT 31
24858: PUSH
24859: LD_INT 32
24861: PUSH
24862: LD_INT 33
24864: PUSH
24865: LD_INT 34
24867: PUSH
24868: LD_INT 35
24870: PUSH
24871: LD_INT 36
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 101
24914: PUSH
24915: LD_INT 102
24917: PUSH
24918: LD_INT 103
24920: PUSH
24921: LD_INT 104
24923: PUSH
24924: LD_INT 105
24926: PUSH
24927: LD_INT 106
24929: PUSH
24930: LD_INT 107
24932: PUSH
24933: LD_INT 108
24935: PUSH
24936: LD_INT 109
24938: PUSH
24939: LD_INT 110
24941: PUSH
24942: LD_INT 111
24944: PUSH
24945: LD_INT 112
24947: PUSH
24948: LD_INT 113
24950: PUSH
24951: LD_INT 114
24953: PUSH
24954: LD_INT 115
24956: PUSH
24957: LD_INT 116
24959: PUSH
24960: LD_INT 117
24962: PUSH
24963: LD_INT 118
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: ST_TO_ADDR
// if result then
24990: LD_VAR 0 2
24994: IFFALSE 25780
// begin normal :=  ;
24996: LD_ADDR_VAR 0 5
25000: PUSH
25001: LD_STRING 
25003: ST_TO_ADDR
// hardcore :=  ;
25004: LD_ADDR_VAR 0 6
25008: PUSH
25009: LD_STRING 
25011: ST_TO_ADDR
// active :=  ;
25012: LD_ADDR_VAR 0 7
25016: PUSH
25017: LD_STRING 
25019: ST_TO_ADDR
// for i = 1 to normalCounter do
25020: LD_ADDR_VAR 0 8
25024: PUSH
25025: DOUBLE
25026: LD_INT 1
25028: DEC
25029: ST_TO_ADDR
25030: LD_EXP 55
25034: PUSH
25035: FOR_TO
25036: IFFALSE 25137
// begin tmp := 0 ;
25038: LD_ADDR_VAR 0 3
25042: PUSH
25043: LD_STRING 0
25045: ST_TO_ADDR
// if result [ 1 ] then
25046: LD_VAR 0 2
25050: PUSH
25051: LD_INT 1
25053: ARRAY
25054: IFFALSE 25119
// if result [ 1 ] [ 1 ] = i then
25056: LD_VAR 0 2
25060: PUSH
25061: LD_INT 1
25063: ARRAY
25064: PUSH
25065: LD_INT 1
25067: ARRAY
25068: PUSH
25069: LD_VAR 0 8
25073: EQUAL
25074: IFFALSE 25119
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25076: LD_ADDR_VAR 0 2
25080: PUSH
25081: LD_VAR 0 2
25085: PPUSH
25086: LD_INT 1
25088: PPUSH
25089: LD_VAR 0 2
25093: PUSH
25094: LD_INT 1
25096: ARRAY
25097: PPUSH
25098: LD_INT 1
25100: PPUSH
25101: CALL_OW 3
25105: PPUSH
25106: CALL_OW 1
25110: ST_TO_ADDR
// tmp := 1 ;
25111: LD_ADDR_VAR 0 3
25115: PUSH
25116: LD_STRING 1
25118: ST_TO_ADDR
// end ; normal := normal & tmp ;
25119: LD_ADDR_VAR 0 5
25123: PUSH
25124: LD_VAR 0 5
25128: PUSH
25129: LD_VAR 0 3
25133: STR
25134: ST_TO_ADDR
// end ;
25135: GO 25035
25137: POP
25138: POP
// for i = 1 to hardcoreCounter do
25139: LD_ADDR_VAR 0 8
25143: PUSH
25144: DOUBLE
25145: LD_INT 1
25147: DEC
25148: ST_TO_ADDR
25149: LD_EXP 56
25153: PUSH
25154: FOR_TO
25155: IFFALSE 25260
// begin tmp := 0 ;
25157: LD_ADDR_VAR 0 3
25161: PUSH
25162: LD_STRING 0
25164: ST_TO_ADDR
// if result [ 2 ] then
25165: LD_VAR 0 2
25169: PUSH
25170: LD_INT 2
25172: ARRAY
25173: IFFALSE 25242
// if result [ 2 ] [ 1 ] = 100 + i then
25175: LD_VAR 0 2
25179: PUSH
25180: LD_INT 2
25182: ARRAY
25183: PUSH
25184: LD_INT 1
25186: ARRAY
25187: PUSH
25188: LD_INT 100
25190: PUSH
25191: LD_VAR 0 8
25195: PLUS
25196: EQUAL
25197: IFFALSE 25242
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25199: LD_ADDR_VAR 0 2
25203: PUSH
25204: LD_VAR 0 2
25208: PPUSH
25209: LD_INT 2
25211: PPUSH
25212: LD_VAR 0 2
25216: PUSH
25217: LD_INT 2
25219: ARRAY
25220: PPUSH
25221: LD_INT 1
25223: PPUSH
25224: CALL_OW 3
25228: PPUSH
25229: CALL_OW 1
25233: ST_TO_ADDR
// tmp := 1 ;
25234: LD_ADDR_VAR 0 3
25238: PUSH
25239: LD_STRING 1
25241: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25242: LD_ADDR_VAR 0 6
25246: PUSH
25247: LD_VAR 0 6
25251: PUSH
25252: LD_VAR 0 3
25256: STR
25257: ST_TO_ADDR
// end ;
25258: GO 25154
25260: POP
25261: POP
// if isGameLoad then
25262: LD_VAR 0 1
25266: IFFALSE 25741
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25268: LD_ADDR_VAR 0 4
25272: PUSH
25273: LD_EXP 59
25277: PUSH
25278: LD_EXP 58
25282: PUSH
25283: LD_EXP 60
25287: PUSH
25288: LD_EXP 57
25292: PUSH
25293: LD_EXP 61
25297: PUSH
25298: LD_EXP 62
25302: PUSH
25303: LD_EXP 63
25307: PUSH
25308: LD_EXP 64
25312: PUSH
25313: LD_EXP 65
25317: PUSH
25318: LD_EXP 66
25322: PUSH
25323: LD_EXP 67
25327: PUSH
25328: LD_EXP 68
25332: PUSH
25333: LD_EXP 69
25337: PUSH
25338: LD_EXP 70
25342: PUSH
25343: LD_EXP 78
25347: PUSH
25348: LD_EXP 79
25352: PUSH
25353: LD_EXP 80
25357: PUSH
25358: LD_EXP 81
25362: PUSH
25363: LD_EXP 83
25367: PUSH
25368: LD_EXP 84
25372: PUSH
25373: LD_EXP 85
25377: PUSH
25378: LD_EXP 88
25382: PUSH
25383: LD_EXP 90
25387: PUSH
25388: LD_EXP 91
25392: PUSH
25393: LD_EXP 92
25397: PUSH
25398: LD_EXP 94
25402: PUSH
25403: LD_EXP 95
25407: PUSH
25408: LD_EXP 98
25412: PUSH
25413: LD_EXP 99
25417: PUSH
25418: LD_EXP 100
25422: PUSH
25423: LD_EXP 101
25427: PUSH
25428: LD_EXP 102
25432: PUSH
25433: LD_EXP 103
25437: PUSH
25438: LD_EXP 104
25442: PUSH
25443: LD_EXP 105
25447: PUSH
25448: LD_EXP 106
25452: PUSH
25453: LD_EXP 71
25457: PUSH
25458: LD_EXP 72
25462: PUSH
25463: LD_EXP 75
25467: PUSH
25468: LD_EXP 76
25472: PUSH
25473: LD_EXP 77
25477: PUSH
25478: LD_EXP 73
25482: PUSH
25483: LD_EXP 74
25487: PUSH
25488: LD_EXP 82
25492: PUSH
25493: LD_EXP 86
25497: PUSH
25498: LD_EXP 87
25502: PUSH
25503: LD_EXP 89
25507: PUSH
25508: LD_EXP 93
25512: PUSH
25513: LD_EXP 96
25517: PUSH
25518: LD_EXP 97
25522: PUSH
25523: LD_EXP 107
25527: PUSH
25528: LD_EXP 108
25532: PUSH
25533: LD_EXP 109
25537: PUSH
25538: LD_EXP 110
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: ST_TO_ADDR
// tmp :=  ;
25599: LD_ADDR_VAR 0 3
25603: PUSH
25604: LD_STRING 
25606: ST_TO_ADDR
// for i = 1 to normalCounter do
25607: LD_ADDR_VAR 0 8
25611: PUSH
25612: DOUBLE
25613: LD_INT 1
25615: DEC
25616: ST_TO_ADDR
25617: LD_EXP 55
25621: PUSH
25622: FOR_TO
25623: IFFALSE 25659
// begin if flags [ i ] then
25625: LD_VAR 0 4
25629: PUSH
25630: LD_VAR 0 8
25634: ARRAY
25635: IFFALSE 25657
// tmp := tmp & i & ; ;
25637: LD_ADDR_VAR 0 3
25641: PUSH
25642: LD_VAR 0 3
25646: PUSH
25647: LD_VAR 0 8
25651: STR
25652: PUSH
25653: LD_STRING ;
25655: STR
25656: ST_TO_ADDR
// end ;
25657: GO 25622
25659: POP
25660: POP
// for i = 1 to hardcoreCounter do
25661: LD_ADDR_VAR 0 8
25665: PUSH
25666: DOUBLE
25667: LD_INT 1
25669: DEC
25670: ST_TO_ADDR
25671: LD_EXP 56
25675: PUSH
25676: FOR_TO
25677: IFFALSE 25723
// begin if flags [ normalCounter + i ] then
25679: LD_VAR 0 4
25683: PUSH
25684: LD_EXP 55
25688: PUSH
25689: LD_VAR 0 8
25693: PLUS
25694: ARRAY
25695: IFFALSE 25721
// tmp := tmp & ( 100 + i ) & ; ;
25697: LD_ADDR_VAR 0 3
25701: PUSH
25702: LD_VAR 0 3
25706: PUSH
25707: LD_INT 100
25709: PUSH
25710: LD_VAR 0 8
25714: PLUS
25715: STR
25716: PUSH
25717: LD_STRING ;
25719: STR
25720: ST_TO_ADDR
// end ;
25721: GO 25676
25723: POP
25724: POP
// if tmp then
25725: LD_VAR 0 3
25729: IFFALSE 25741
// active := tmp ;
25731: LD_ADDR_VAR 0 7
25735: PUSH
25736: LD_VAR 0 3
25740: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25741: LD_STRING getStreamItemsFromMission("
25743: PUSH
25744: LD_VAR 0 5
25748: STR
25749: PUSH
25750: LD_STRING ","
25752: STR
25753: PUSH
25754: LD_VAR 0 6
25758: STR
25759: PUSH
25760: LD_STRING ","
25762: STR
25763: PUSH
25764: LD_VAR 0 7
25768: STR
25769: PUSH
25770: LD_STRING ")
25772: STR
25773: PPUSH
25774: CALL_OW 559
// end else
25778: GO 25787
// ToLua ( getStreamItemsFromMission("","","") ) ;
25780: LD_STRING getStreamItemsFromMission("","","")
25782: PPUSH
25783: CALL_OW 559
// end ;
25787: LD_VAR 0 2
25791: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25792: LD_EXP 54
25796: IFFALSE 25804
25798: PUSH
25799: LD_EXP 59
25803: AND
25804: IFFALSE 25928
25806: GO 25808
25808: DISABLE
25809: LD_INT 0
25811: PPUSH
25812: PPUSH
// begin enable ;
25813: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25814: LD_ADDR_VAR 0 2
25818: PUSH
25819: LD_INT 22
25821: PUSH
25822: LD_OWVAR 2
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 2
25833: PUSH
25834: LD_INT 34
25836: PUSH
25837: LD_INT 7
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 34
25846: PUSH
25847: LD_INT 45
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 34
25856: PUSH
25857: LD_INT 28
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 34
25866: PUSH
25867: LD_INT 47
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PPUSH
25885: CALL_OW 69
25889: ST_TO_ADDR
// if not tmp then
25890: LD_VAR 0 2
25894: NOT
25895: IFFALSE 25899
// exit ;
25897: GO 25928
// for i in tmp do
25899: LD_ADDR_VAR 0 1
25903: PUSH
25904: LD_VAR 0 2
25908: PUSH
25909: FOR_IN
25910: IFFALSE 25926
// begin SetLives ( i , 0 ) ;
25912: LD_VAR 0 1
25916: PPUSH
25917: LD_INT 0
25919: PPUSH
25920: CALL_OW 234
// end ;
25924: GO 25909
25926: POP
25927: POP
// end ;
25928: PPOPN 2
25930: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25931: LD_EXP 54
25935: IFFALSE 25943
25937: PUSH
25938: LD_EXP 60
25942: AND
25943: IFFALSE 26027
25945: GO 25947
25947: DISABLE
25948: LD_INT 0
25950: PPUSH
25951: PPUSH
// begin enable ;
25952: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25953: LD_ADDR_VAR 0 2
25957: PUSH
25958: LD_INT 22
25960: PUSH
25961: LD_OWVAR 2
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 32
25972: PUSH
25973: LD_INT 3
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PPUSH
25984: CALL_OW 69
25988: ST_TO_ADDR
// if not tmp then
25989: LD_VAR 0 2
25993: NOT
25994: IFFALSE 25998
// exit ;
25996: GO 26027
// for i in tmp do
25998: LD_ADDR_VAR 0 1
26002: PUSH
26003: LD_VAR 0 2
26007: PUSH
26008: FOR_IN
26009: IFFALSE 26025
// begin SetLives ( i , 0 ) ;
26011: LD_VAR 0 1
26015: PPUSH
26016: LD_INT 0
26018: PPUSH
26019: CALL_OW 234
// end ;
26023: GO 26008
26025: POP
26026: POP
// end ;
26027: PPOPN 2
26029: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26030: LD_EXP 54
26034: IFFALSE 26042
26036: PUSH
26037: LD_EXP 57
26041: AND
26042: IFFALSE 26135
26044: GO 26046
26046: DISABLE
26047: LD_INT 0
26049: PPUSH
// begin enable ;
26050: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26051: LD_ADDR_VAR 0 1
26055: PUSH
26056: LD_INT 22
26058: PUSH
26059: LD_OWVAR 2
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 2
26070: PUSH
26071: LD_INT 25
26073: PUSH
26074: LD_INT 5
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 25
26083: PUSH
26084: LD_INT 9
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 25
26093: PUSH
26094: LD_INT 8
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PPUSH
26111: CALL_OW 69
26115: PUSH
26116: FOR_IN
26117: IFFALSE 26133
// begin SetClass ( i , 1 ) ;
26119: LD_VAR 0 1
26123: PPUSH
26124: LD_INT 1
26126: PPUSH
26127: CALL_OW 336
// end ;
26131: GO 26116
26133: POP
26134: POP
// end ;
26135: PPOPN 1
26137: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26138: LD_EXP 54
26142: IFFALSE 26150
26144: PUSH
26145: LD_EXP 58
26149: AND
26150: IFFALSE 26162
26152: PUSH
26153: LD_OWVAR 65
26157: PUSH
26158: LD_INT 7
26160: LESS
26161: AND
26162: IFFALSE 26176
26164: GO 26166
26166: DISABLE
// begin enable ;
26167: ENABLE
// game_speed := 7 ;
26168: LD_ADDR_OWVAR 65
26172: PUSH
26173: LD_INT 7
26175: ST_TO_ADDR
// end ;
26176: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26177: LD_EXP 54
26181: IFFALSE 26189
26183: PUSH
26184: LD_EXP 61
26188: AND
26189: IFFALSE 26391
26191: GO 26193
26193: DISABLE
26194: LD_INT 0
26196: PPUSH
26197: PPUSH
26198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26199: LD_ADDR_VAR 0 3
26203: PUSH
26204: LD_INT 81
26206: PUSH
26207: LD_OWVAR 2
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 21
26218: PUSH
26219: LD_INT 1
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PPUSH
26230: CALL_OW 69
26234: ST_TO_ADDR
// if not tmp then
26235: LD_VAR 0 3
26239: NOT
26240: IFFALSE 26244
// exit ;
26242: GO 26391
// if tmp > 5 then
26244: LD_VAR 0 3
26248: PUSH
26249: LD_INT 5
26251: GREATER
26252: IFFALSE 26264
// k := 5 else
26254: LD_ADDR_VAR 0 2
26258: PUSH
26259: LD_INT 5
26261: ST_TO_ADDR
26262: GO 26274
// k := tmp ;
26264: LD_ADDR_VAR 0 2
26268: PUSH
26269: LD_VAR 0 3
26273: ST_TO_ADDR
// for i := 1 to k do
26274: LD_ADDR_VAR 0 1
26278: PUSH
26279: DOUBLE
26280: LD_INT 1
26282: DEC
26283: ST_TO_ADDR
26284: LD_VAR 0 2
26288: PUSH
26289: FOR_TO
26290: IFFALSE 26389
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26292: LD_VAR 0 3
26296: PUSH
26297: LD_VAR 0 1
26301: ARRAY
26302: PPUSH
26303: LD_VAR 0 1
26307: PUSH
26308: LD_INT 4
26310: MOD
26311: PUSH
26312: LD_INT 1
26314: PLUS
26315: PPUSH
26316: CALL_OW 259
26320: PUSH
26321: LD_INT 10
26323: LESS
26324: IFFALSE 26387
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26326: LD_VAR 0 3
26330: PUSH
26331: LD_VAR 0 1
26335: ARRAY
26336: PPUSH
26337: LD_VAR 0 1
26341: PUSH
26342: LD_INT 4
26344: MOD
26345: PUSH
26346: LD_INT 1
26348: PLUS
26349: PPUSH
26350: LD_VAR 0 3
26354: PUSH
26355: LD_VAR 0 1
26359: ARRAY
26360: PPUSH
26361: LD_VAR 0 1
26365: PUSH
26366: LD_INT 4
26368: MOD
26369: PUSH
26370: LD_INT 1
26372: PLUS
26373: PPUSH
26374: CALL_OW 259
26378: PUSH
26379: LD_INT 1
26381: PLUS
26382: PPUSH
26383: CALL_OW 237
26387: GO 26289
26389: POP
26390: POP
// end ;
26391: PPOPN 3
26393: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26394: LD_EXP 54
26398: IFFALSE 26406
26400: PUSH
26401: LD_EXP 62
26405: AND
26406: IFFALSE 26426
26408: GO 26410
26410: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26411: LD_INT 4
26413: PPUSH
26414: LD_OWVAR 2
26418: PPUSH
26419: LD_INT 0
26421: PPUSH
26422: CALL_OW 324
26426: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26427: LD_EXP 54
26431: IFFALSE 26439
26433: PUSH
26434: LD_EXP 91
26438: AND
26439: IFFALSE 26459
26441: GO 26443
26443: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26444: LD_INT 19
26446: PPUSH
26447: LD_OWVAR 2
26451: PPUSH
26452: LD_INT 0
26454: PPUSH
26455: CALL_OW 324
26459: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26460: LD_EXP 54
26464: IFFALSE 26472
26466: PUSH
26467: LD_EXP 63
26471: AND
26472: IFFALSE 26574
26474: GO 26476
26476: DISABLE
26477: LD_INT 0
26479: PPUSH
26480: PPUSH
// begin enable ;
26481: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26482: LD_ADDR_VAR 0 2
26486: PUSH
26487: LD_INT 22
26489: PUSH
26490: LD_OWVAR 2
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 2
26501: PUSH
26502: LD_INT 34
26504: PUSH
26505: LD_INT 11
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 34
26514: PUSH
26515: LD_INT 30
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: LIST
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PPUSH
26531: CALL_OW 69
26535: ST_TO_ADDR
// if not tmp then
26536: LD_VAR 0 2
26540: NOT
26541: IFFALSE 26545
// exit ;
26543: GO 26574
// for i in tmp do
26545: LD_ADDR_VAR 0 1
26549: PUSH
26550: LD_VAR 0 2
26554: PUSH
26555: FOR_IN
26556: IFFALSE 26572
// begin SetLives ( i , 0 ) ;
26558: LD_VAR 0 1
26562: PPUSH
26563: LD_INT 0
26565: PPUSH
26566: CALL_OW 234
// end ;
26570: GO 26555
26572: POP
26573: POP
// end ;
26574: PPOPN 2
26576: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26577: LD_EXP 54
26581: IFFALSE 26589
26583: PUSH
26584: LD_EXP 64
26588: AND
26589: IFFALSE 26609
26591: GO 26593
26593: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26594: LD_INT 32
26596: PPUSH
26597: LD_OWVAR 2
26601: PPUSH
26602: LD_INT 0
26604: PPUSH
26605: CALL_OW 324
26609: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26610: LD_EXP 54
26614: IFFALSE 26622
26616: PUSH
26617: LD_EXP 65
26621: AND
26622: IFFALSE 26805
26624: GO 26626
26626: DISABLE
26627: LD_INT 0
26629: PPUSH
26630: PPUSH
26631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26632: LD_ADDR_VAR 0 2
26636: PUSH
26637: LD_INT 22
26639: PUSH
26640: LD_OWVAR 2
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 33
26651: PUSH
26652: LD_INT 3
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PPUSH
26663: CALL_OW 69
26667: ST_TO_ADDR
// if not tmp then
26668: LD_VAR 0 2
26672: NOT
26673: IFFALSE 26677
// exit ;
26675: GO 26805
// side := 0 ;
26677: LD_ADDR_VAR 0 3
26681: PUSH
26682: LD_INT 0
26684: ST_TO_ADDR
// for i := 1 to 8 do
26685: LD_ADDR_VAR 0 1
26689: PUSH
26690: DOUBLE
26691: LD_INT 1
26693: DEC
26694: ST_TO_ADDR
26695: LD_INT 8
26697: PUSH
26698: FOR_TO
26699: IFFALSE 26749
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26701: LD_OWVAR 2
26705: PUSH
26706: LD_VAR 0 1
26710: NONEQUAL
26711: IFFALSE 26733
26713: PUSH
26714: LD_OWVAR 2
26718: PPUSH
26719: LD_VAR 0 1
26723: PPUSH
26724: CALL_OW 81
26728: PUSH
26729: LD_INT 2
26731: EQUAL
26732: AND
26733: IFFALSE 26747
// begin side := i ;
26735: LD_ADDR_VAR 0 3
26739: PUSH
26740: LD_VAR 0 1
26744: ST_TO_ADDR
// break ;
26745: GO 26749
// end ;
26747: GO 26698
26749: POP
26750: POP
// if not side then
26751: LD_VAR 0 3
26755: NOT
26756: IFFALSE 26760
// exit ;
26758: GO 26805
// for i := 1 to tmp do
26760: LD_ADDR_VAR 0 1
26764: PUSH
26765: DOUBLE
26766: LD_INT 1
26768: DEC
26769: ST_TO_ADDR
26770: LD_VAR 0 2
26774: PUSH
26775: FOR_TO
26776: IFFALSE 26803
// if Prob ( 60 ) then
26778: LD_INT 60
26780: PPUSH
26781: CALL_OW 13
26785: IFFALSE 26801
// SetSide ( i , side ) ;
26787: LD_VAR 0 1
26791: PPUSH
26792: LD_VAR 0 3
26796: PPUSH
26797: CALL_OW 235
26801: GO 26775
26803: POP
26804: POP
// end ;
26805: PPOPN 3
26807: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26808: LD_EXP 54
26812: IFFALSE 26820
26814: PUSH
26815: LD_EXP 67
26819: AND
26820: IFFALSE 26939
26822: GO 26824
26824: DISABLE
26825: LD_INT 0
26827: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26828: LD_ADDR_VAR 0 1
26832: PUSH
26833: LD_INT 22
26835: PUSH
26836: LD_OWVAR 2
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 21
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 3
26857: PUSH
26858: LD_INT 23
26860: PUSH
26861: LD_INT 0
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: LIST
26876: PPUSH
26877: CALL_OW 69
26881: PUSH
26882: FOR_IN
26883: IFFALSE 26937
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26885: LD_VAR 0 1
26889: PPUSH
26890: CALL_OW 257
26894: PUSH
26895: LD_INT 1
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: LD_INT 3
26903: PUSH
26904: LD_INT 4
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: IN
26913: IFFALSE 26935
// SetClass ( un , rand ( 1 , 4 ) ) ;
26915: LD_VAR 0 1
26919: PPUSH
26920: LD_INT 1
26922: PPUSH
26923: LD_INT 4
26925: PPUSH
26926: CALL_OW 12
26930: PPUSH
26931: CALL_OW 336
26935: GO 26882
26937: POP
26938: POP
// end ;
26939: PPOPN 1
26941: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26942: LD_EXP 54
26946: IFFALSE 26954
26948: PUSH
26949: LD_EXP 66
26953: AND
26954: IFFALSE 27033
26956: GO 26958
26958: DISABLE
26959: LD_INT 0
26961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26962: LD_ADDR_VAR 0 1
26966: PUSH
26967: LD_INT 22
26969: PUSH
26970: LD_OWVAR 2
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 21
26981: PUSH
26982: LD_INT 3
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PPUSH
26993: CALL_OW 69
26997: ST_TO_ADDR
// if not tmp then
26998: LD_VAR 0 1
27002: NOT
27003: IFFALSE 27007
// exit ;
27005: GO 27033
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27007: LD_VAR 0 1
27011: PUSH
27012: LD_INT 1
27014: PPUSH
27015: LD_VAR 0 1
27019: PPUSH
27020: CALL_OW 12
27024: ARRAY
27025: PPUSH
27026: LD_INT 100
27028: PPUSH
27029: CALL_OW 234
// end ;
27033: PPOPN 1
27035: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27036: LD_EXP 54
27040: IFFALSE 27048
27042: PUSH
27043: LD_EXP 68
27047: AND
27048: IFFALSE 27146
27050: GO 27052
27052: DISABLE
27053: LD_INT 0
27055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27056: LD_ADDR_VAR 0 1
27060: PUSH
27061: LD_INT 22
27063: PUSH
27064: LD_OWVAR 2
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 21
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PPUSH
27087: CALL_OW 69
27091: ST_TO_ADDR
// if not tmp then
27092: LD_VAR 0 1
27096: NOT
27097: IFFALSE 27101
// exit ;
27099: GO 27146
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27101: LD_VAR 0 1
27105: PUSH
27106: LD_INT 1
27108: PPUSH
27109: LD_VAR 0 1
27113: PPUSH
27114: CALL_OW 12
27118: ARRAY
27119: PPUSH
27120: LD_INT 1
27122: PPUSH
27123: LD_INT 4
27125: PPUSH
27126: CALL_OW 12
27130: PPUSH
27131: LD_INT 3000
27133: PPUSH
27134: LD_INT 9000
27136: PPUSH
27137: CALL_OW 12
27141: PPUSH
27142: CALL_OW 492
// end ;
27146: PPOPN 1
27148: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27149: LD_EXP 54
27153: IFFALSE 27161
27155: PUSH
27156: LD_EXP 69
27160: AND
27161: IFFALSE 27181
27163: GO 27165
27165: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27166: LD_INT 1
27168: PPUSH
27169: LD_OWVAR 2
27173: PPUSH
27174: LD_INT 0
27176: PPUSH
27177: CALL_OW 324
27181: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27182: LD_EXP 54
27186: IFFALSE 27194
27188: PUSH
27189: LD_EXP 70
27193: AND
27194: IFFALSE 27277
27196: GO 27198
27198: DISABLE
27199: LD_INT 0
27201: PPUSH
27202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27203: LD_ADDR_VAR 0 2
27207: PUSH
27208: LD_INT 22
27210: PUSH
27211: LD_OWVAR 2
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 21
27222: PUSH
27223: LD_INT 3
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PPUSH
27234: CALL_OW 69
27238: ST_TO_ADDR
// if not tmp then
27239: LD_VAR 0 2
27243: NOT
27244: IFFALSE 27248
// exit ;
27246: GO 27277
// for i in tmp do
27248: LD_ADDR_VAR 0 1
27252: PUSH
27253: LD_VAR 0 2
27257: PUSH
27258: FOR_IN
27259: IFFALSE 27275
// SetBLevel ( i , 10 ) ;
27261: LD_VAR 0 1
27265: PPUSH
27266: LD_INT 10
27268: PPUSH
27269: CALL_OW 241
27273: GO 27258
27275: POP
27276: POP
// end ;
27277: PPOPN 2
27279: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27280: LD_EXP 54
27284: IFFALSE 27292
27286: PUSH
27287: LD_EXP 71
27291: AND
27292: IFFALSE 27403
27294: GO 27296
27296: DISABLE
27297: LD_INT 0
27299: PPUSH
27300: PPUSH
27301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27302: LD_ADDR_VAR 0 3
27306: PUSH
27307: LD_INT 22
27309: PUSH
27310: LD_OWVAR 2
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 25
27321: PUSH
27322: LD_INT 1
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PPUSH
27333: CALL_OW 69
27337: ST_TO_ADDR
// if not tmp then
27338: LD_VAR 0 3
27342: NOT
27343: IFFALSE 27347
// exit ;
27345: GO 27403
// un := tmp [ rand ( 1 , tmp ) ] ;
27347: LD_ADDR_VAR 0 2
27351: PUSH
27352: LD_VAR 0 3
27356: PUSH
27357: LD_INT 1
27359: PPUSH
27360: LD_VAR 0 3
27364: PPUSH
27365: CALL_OW 12
27369: ARRAY
27370: ST_TO_ADDR
// if Crawls ( un ) then
27371: LD_VAR 0 2
27375: PPUSH
27376: CALL_OW 318
27380: IFFALSE 27391
// ComWalk ( un ) ;
27382: LD_VAR 0 2
27386: PPUSH
27387: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27391: LD_VAR 0 2
27395: PPUSH
27396: LD_INT 5
27398: PPUSH
27399: CALL_OW 336
// end ;
27403: PPOPN 3
27405: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27406: LD_EXP 54
27410: IFFALSE 27418
27412: PUSH
27413: LD_EXP 72
27417: AND
27418: IFFALSE 27430
27420: PUSH
27421: LD_OWVAR 67
27425: PUSH
27426: LD_INT 4
27428: LESS
27429: AND
27430: IFFALSE 27449
27432: GO 27434
27434: DISABLE
// begin Difficulty := Difficulty + 1 ;
27435: LD_ADDR_OWVAR 67
27439: PUSH
27440: LD_OWVAR 67
27444: PUSH
27445: LD_INT 1
27447: PLUS
27448: ST_TO_ADDR
// end ;
27449: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27450: LD_EXP 54
27454: IFFALSE 27462
27456: PUSH
27457: LD_EXP 73
27461: AND
27462: IFFALSE 27565
27464: GO 27466
27466: DISABLE
27467: LD_INT 0
27469: PPUSH
// begin for i := 1 to 5 do
27470: LD_ADDR_VAR 0 1
27474: PUSH
27475: DOUBLE
27476: LD_INT 1
27478: DEC
27479: ST_TO_ADDR
27480: LD_INT 5
27482: PUSH
27483: FOR_TO
27484: IFFALSE 27563
// begin uc_nation := nation_nature ;
27486: LD_ADDR_OWVAR 21
27490: PUSH
27491: LD_INT 0
27493: ST_TO_ADDR
// uc_side := 0 ;
27494: LD_ADDR_OWVAR 20
27498: PUSH
27499: LD_INT 0
27501: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27502: LD_ADDR_OWVAR 29
27506: PUSH
27507: LD_INT 12
27509: PUSH
27510: LD_INT 12
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: ST_TO_ADDR
// hc_agressivity := 20 ;
27517: LD_ADDR_OWVAR 35
27521: PUSH
27522: LD_INT 20
27524: ST_TO_ADDR
// hc_class := class_tiger ;
27525: LD_ADDR_OWVAR 28
27529: PUSH
27530: LD_INT 14
27532: ST_TO_ADDR
// hc_gallery :=  ;
27533: LD_ADDR_OWVAR 33
27537: PUSH
27538: LD_STRING 
27540: ST_TO_ADDR
// hc_name :=  ;
27541: LD_ADDR_OWVAR 26
27545: PUSH
27546: LD_STRING 
27548: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27549: CALL_OW 44
27553: PPUSH
27554: LD_INT 0
27556: PPUSH
27557: CALL_OW 51
// end ;
27561: GO 27483
27563: POP
27564: POP
// end ;
27565: PPOPN 1
27567: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27568: LD_EXP 54
27572: IFFALSE 27580
27574: PUSH
27575: LD_EXP 74
27579: AND
27580: IFFALSE 27589
27582: GO 27584
27584: DISABLE
// StreamSibBomb ;
27585: CALL 27590 0 0
27589: END
// export function StreamSibBomb ; var i , x , y ; begin
27590: LD_INT 0
27592: PPUSH
27593: PPUSH
27594: PPUSH
27595: PPUSH
// result := false ;
27596: LD_ADDR_VAR 0 1
27600: PUSH
27601: LD_INT 0
27603: ST_TO_ADDR
// for i := 1 to 16 do
27604: LD_ADDR_VAR 0 2
27608: PUSH
27609: DOUBLE
27610: LD_INT 1
27612: DEC
27613: ST_TO_ADDR
27614: LD_INT 16
27616: PUSH
27617: FOR_TO
27618: IFFALSE 27817
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27620: LD_ADDR_VAR 0 3
27624: PUSH
27625: LD_INT 10
27627: PUSH
27628: LD_INT 20
27630: PUSH
27631: LD_INT 30
27633: PUSH
27634: LD_INT 40
27636: PUSH
27637: LD_INT 50
27639: PUSH
27640: LD_INT 60
27642: PUSH
27643: LD_INT 70
27645: PUSH
27646: LD_INT 80
27648: PUSH
27649: LD_INT 90
27651: PUSH
27652: LD_INT 100
27654: PUSH
27655: LD_INT 110
27657: PUSH
27658: LD_INT 120
27660: PUSH
27661: LD_INT 130
27663: PUSH
27664: LD_INT 140
27666: PUSH
27667: LD_INT 150
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 1
27689: PPUSH
27690: LD_INT 15
27692: PPUSH
27693: CALL_OW 12
27697: ARRAY
27698: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27699: LD_ADDR_VAR 0 4
27703: PUSH
27704: LD_INT 10
27706: PUSH
27707: LD_INT 20
27709: PUSH
27710: LD_INT 30
27712: PUSH
27713: LD_INT 40
27715: PUSH
27716: LD_INT 50
27718: PUSH
27719: LD_INT 60
27721: PUSH
27722: LD_INT 70
27724: PUSH
27725: LD_INT 80
27727: PUSH
27728: LD_INT 90
27730: PUSH
27731: LD_INT 100
27733: PUSH
27734: LD_INT 110
27736: PUSH
27737: LD_INT 120
27739: PUSH
27740: LD_INT 130
27742: PUSH
27743: LD_INT 140
27745: PUSH
27746: LD_INT 150
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: PPUSH
27769: LD_INT 15
27771: PPUSH
27772: CALL_OW 12
27776: ARRAY
27777: ST_TO_ADDR
// if ValidHex ( x , y ) then
27778: LD_VAR 0 3
27782: PPUSH
27783: LD_VAR 0 4
27787: PPUSH
27788: CALL_OW 488
27792: IFFALSE 27815
// begin result := [ x , y ] ;
27794: LD_ADDR_VAR 0 1
27798: PUSH
27799: LD_VAR 0 3
27803: PUSH
27804: LD_VAR 0 4
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: ST_TO_ADDR
// break ;
27813: GO 27817
// end ; end ;
27815: GO 27617
27817: POP
27818: POP
// if result then
27819: LD_VAR 0 1
27823: IFFALSE 27883
// begin ToLua ( playSibBomb() ) ;
27825: LD_STRING playSibBomb()
27827: PPUSH
27828: CALL_OW 559
// wait ( 0 0$14 ) ;
27832: LD_INT 490
27834: PPUSH
27835: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27839: LD_VAR 0 1
27843: PUSH
27844: LD_INT 1
27846: ARRAY
27847: PPUSH
27848: LD_VAR 0 1
27852: PUSH
27853: LD_INT 2
27855: ARRAY
27856: PPUSH
27857: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27861: LD_VAR 0 1
27865: PUSH
27866: LD_INT 1
27868: ARRAY
27869: PPUSH
27870: LD_VAR 0 1
27874: PUSH
27875: LD_INT 2
27877: ARRAY
27878: PPUSH
27879: CALL_OW 429
// end ; end ;
27883: LD_VAR 0 1
27887: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27888: LD_EXP 54
27892: IFFALSE 27900
27894: PUSH
27895: LD_EXP 76
27899: AND
27900: IFFALSE 27912
27902: GO 27904
27904: DISABLE
// YouLost (  ) ;
27905: LD_STRING 
27907: PPUSH
27908: CALL_OW 104
27912: END
// every 0 0$1 trigger StreamModeActive and sFog do
27913: LD_EXP 54
27917: IFFALSE 27925
27919: PUSH
27920: LD_EXP 75
27924: AND
27925: IFFALSE 27939
27927: GO 27929
27929: DISABLE
// FogOff ( your_side ) ;
27930: LD_OWVAR 2
27934: PPUSH
27935: CALL_OW 344
27939: END
// every 0 0$1 trigger StreamModeActive and sSun do
27940: LD_EXP 54
27944: IFFALSE 27952
27946: PUSH
27947: LD_EXP 77
27951: AND
27952: IFFALSE 27980
27954: GO 27956
27956: DISABLE
// begin solar_recharge_percent := 0 ;
27957: LD_ADDR_OWVAR 79
27961: PUSH
27962: LD_INT 0
27964: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27965: LD_INT 10500
27967: PPUSH
27968: CALL_OW 67
// solar_recharge_percent := 100 ;
27972: LD_ADDR_OWVAR 79
27976: PUSH
27977: LD_INT 100
27979: ST_TO_ADDR
// end ;
27980: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27981: LD_EXP 54
27985: IFFALSE 27993
27987: PUSH
27988: LD_EXP 78
27992: AND
27993: IFFALSE 28232
27995: GO 27997
27997: DISABLE
27998: LD_INT 0
28000: PPUSH
28001: PPUSH
28002: PPUSH
// begin tmp := [ ] ;
28003: LD_ADDR_VAR 0 3
28007: PUSH
28008: EMPTY
28009: ST_TO_ADDR
// for i := 1 to 6 do
28010: LD_ADDR_VAR 0 1
28014: PUSH
28015: DOUBLE
28016: LD_INT 1
28018: DEC
28019: ST_TO_ADDR
28020: LD_INT 6
28022: PUSH
28023: FOR_TO
28024: IFFALSE 28129
// begin uc_nation := nation_nature ;
28026: LD_ADDR_OWVAR 21
28030: PUSH
28031: LD_INT 0
28033: ST_TO_ADDR
// uc_side := 0 ;
28034: LD_ADDR_OWVAR 20
28038: PUSH
28039: LD_INT 0
28041: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28042: LD_ADDR_OWVAR 29
28046: PUSH
28047: LD_INT 12
28049: PUSH
28050: LD_INT 12
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: ST_TO_ADDR
// hc_agressivity := 20 ;
28057: LD_ADDR_OWVAR 35
28061: PUSH
28062: LD_INT 20
28064: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28065: LD_ADDR_OWVAR 28
28069: PUSH
28070: LD_INT 17
28072: ST_TO_ADDR
// hc_gallery :=  ;
28073: LD_ADDR_OWVAR 33
28077: PUSH
28078: LD_STRING 
28080: ST_TO_ADDR
// hc_name :=  ;
28081: LD_ADDR_OWVAR 26
28085: PUSH
28086: LD_STRING 
28088: ST_TO_ADDR
// un := CreateHuman ;
28089: LD_ADDR_VAR 0 2
28093: PUSH
28094: CALL_OW 44
28098: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28099: LD_VAR 0 2
28103: PPUSH
28104: LD_INT 1
28106: PPUSH
28107: CALL_OW 51
// tmp := tmp ^ un ;
28111: LD_ADDR_VAR 0 3
28115: PUSH
28116: LD_VAR 0 3
28120: PUSH
28121: LD_VAR 0 2
28125: ADD
28126: ST_TO_ADDR
// end ;
28127: GO 28023
28129: POP
28130: POP
// repeat wait ( 0 0$1 ) ;
28131: LD_INT 35
28133: PPUSH
28134: CALL_OW 67
// for un in tmp do
28138: LD_ADDR_VAR 0 2
28142: PUSH
28143: LD_VAR 0 3
28147: PUSH
28148: FOR_IN
28149: IFFALSE 28223
// begin if IsDead ( un ) then
28151: LD_VAR 0 2
28155: PPUSH
28156: CALL_OW 301
28160: IFFALSE 28180
// begin tmp := tmp diff un ;
28162: LD_ADDR_VAR 0 3
28166: PUSH
28167: LD_VAR 0 3
28171: PUSH
28172: LD_VAR 0 2
28176: DIFF
28177: ST_TO_ADDR
// continue ;
28178: GO 28148
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28180: LD_VAR 0 2
28184: PPUSH
28185: LD_INT 3
28187: PUSH
28188: LD_INT 22
28190: PUSH
28191: LD_INT 0
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PPUSH
28202: CALL_OW 69
28206: PPUSH
28207: LD_VAR 0 2
28211: PPUSH
28212: CALL_OW 74
28216: PPUSH
28217: CALL_OW 115
// end ;
28221: GO 28148
28223: POP
28224: POP
// until not tmp ;
28225: LD_VAR 0 3
28229: NOT
28230: IFFALSE 28131
// end ;
28232: PPOPN 3
28234: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28235: LD_EXP 54
28239: IFFALSE 28247
28241: PUSH
28242: LD_EXP 79
28246: AND
28247: IFFALSE 28301
28249: GO 28251
28251: DISABLE
// begin ToLua ( displayTroll(); ) ;
28252: LD_STRING displayTroll();
28254: PPUSH
28255: CALL_OW 559
// wait ( 3 3$00 ) ;
28259: LD_INT 6300
28261: PPUSH
28262: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28266: LD_STRING hideTroll();
28268: PPUSH
28269: CALL_OW 559
// wait ( 1 1$00 ) ;
28273: LD_INT 2100
28275: PPUSH
28276: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28280: LD_STRING displayTroll();
28282: PPUSH
28283: CALL_OW 559
// wait ( 1 1$00 ) ;
28287: LD_INT 2100
28289: PPUSH
28290: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28294: LD_STRING hideTroll();
28296: PPUSH
28297: CALL_OW 559
// end ;
28301: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28302: LD_EXP 54
28306: IFFALSE 28314
28308: PUSH
28309: LD_EXP 80
28313: AND
28314: IFFALSE 28377
28316: GO 28318
28318: DISABLE
28319: LD_INT 0
28321: PPUSH
// begin p := 0 ;
28322: LD_ADDR_VAR 0 1
28326: PUSH
28327: LD_INT 0
28329: ST_TO_ADDR
// repeat game_speed := 1 ;
28330: LD_ADDR_OWVAR 65
28334: PUSH
28335: LD_INT 1
28337: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28338: LD_INT 35
28340: PPUSH
28341: CALL_OW 67
// p := p + 1 ;
28345: LD_ADDR_VAR 0 1
28349: PUSH
28350: LD_VAR 0 1
28354: PUSH
28355: LD_INT 1
28357: PLUS
28358: ST_TO_ADDR
// until p >= 60 ;
28359: LD_VAR 0 1
28363: PUSH
28364: LD_INT 60
28366: GREATEREQUAL
28367: IFFALSE 28330
// game_speed := 4 ;
28369: LD_ADDR_OWVAR 65
28373: PUSH
28374: LD_INT 4
28376: ST_TO_ADDR
// end ;
28377: PPOPN 1
28379: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28380: LD_EXP 54
28384: IFFALSE 28392
28386: PUSH
28387: LD_EXP 81
28391: AND
28392: IFFALSE 28538
28394: GO 28396
28396: DISABLE
28397: LD_INT 0
28399: PPUSH
28400: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28401: LD_ADDR_VAR 0 1
28405: PUSH
28406: LD_INT 22
28408: PUSH
28409: LD_OWVAR 2
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 2
28420: PUSH
28421: LD_INT 30
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 30
28433: PUSH
28434: LD_INT 1
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: LIST
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PPUSH
28450: CALL_OW 69
28454: ST_TO_ADDR
// if not depot then
28455: LD_VAR 0 1
28459: NOT
28460: IFFALSE 28464
// exit ;
28462: GO 28538
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28464: LD_ADDR_VAR 0 2
28468: PUSH
28469: LD_VAR 0 1
28473: PUSH
28474: LD_INT 1
28476: PPUSH
28477: LD_VAR 0 1
28481: PPUSH
28482: CALL_OW 12
28486: ARRAY
28487: PPUSH
28488: CALL_OW 274
28492: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28493: LD_VAR 0 2
28497: PPUSH
28498: LD_INT 1
28500: PPUSH
28501: LD_INT 0
28503: PPUSH
28504: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28508: LD_VAR 0 2
28512: PPUSH
28513: LD_INT 2
28515: PPUSH
28516: LD_INT 0
28518: PPUSH
28519: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28523: LD_VAR 0 2
28527: PPUSH
28528: LD_INT 3
28530: PPUSH
28531: LD_INT 0
28533: PPUSH
28534: CALL_OW 277
// end ;
28538: PPOPN 2
28540: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28541: LD_EXP 54
28545: IFFALSE 28553
28547: PUSH
28548: LD_EXP 82
28552: AND
28553: IFFALSE 28650
28555: GO 28557
28557: DISABLE
28558: LD_INT 0
28560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28561: LD_ADDR_VAR 0 1
28565: PUSH
28566: LD_INT 22
28568: PUSH
28569: LD_OWVAR 2
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 21
28580: PUSH
28581: LD_INT 1
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 3
28590: PUSH
28591: LD_INT 23
28593: PUSH
28594: LD_INT 0
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: PPUSH
28610: CALL_OW 69
28614: ST_TO_ADDR
// if not tmp then
28615: LD_VAR 0 1
28619: NOT
28620: IFFALSE 28624
// exit ;
28622: GO 28650
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28624: LD_VAR 0 1
28628: PUSH
28629: LD_INT 1
28631: PPUSH
28632: LD_VAR 0 1
28636: PPUSH
28637: CALL_OW 12
28641: ARRAY
28642: PPUSH
28643: LD_INT 200
28645: PPUSH
28646: CALL_OW 234
// end ;
28650: PPOPN 1
28652: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28653: LD_EXP 54
28657: IFFALSE 28665
28659: PUSH
28660: LD_EXP 83
28664: AND
28665: IFFALSE 28744
28667: GO 28669
28669: DISABLE
28670: LD_INT 0
28672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28673: LD_ADDR_VAR 0 1
28677: PUSH
28678: LD_INT 22
28680: PUSH
28681: LD_OWVAR 2
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 21
28692: PUSH
28693: LD_INT 2
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PPUSH
28704: CALL_OW 69
28708: ST_TO_ADDR
// if not tmp then
28709: LD_VAR 0 1
28713: NOT
28714: IFFALSE 28718
// exit ;
28716: GO 28744
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28718: LD_VAR 0 1
28722: PUSH
28723: LD_INT 1
28725: PPUSH
28726: LD_VAR 0 1
28730: PPUSH
28731: CALL_OW 12
28735: ARRAY
28736: PPUSH
28737: LD_INT 60
28739: PPUSH
28740: CALL_OW 234
// end ;
28744: PPOPN 1
28746: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28747: LD_EXP 54
28751: IFFALSE 28759
28753: PUSH
28754: LD_EXP 84
28758: AND
28759: IFFALSE 28858
28761: GO 28763
28763: DISABLE
28764: LD_INT 0
28766: PPUSH
28767: PPUSH
// begin enable ;
28768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28769: LD_ADDR_VAR 0 1
28773: PUSH
28774: LD_INT 22
28776: PUSH
28777: LD_OWVAR 2
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 61
28788: PUSH
28789: EMPTY
28790: LIST
28791: PUSH
28792: LD_INT 33
28794: PUSH
28795: LD_INT 2
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: LIST
28806: PPUSH
28807: CALL_OW 69
28811: ST_TO_ADDR
// if not tmp then
28812: LD_VAR 0 1
28816: NOT
28817: IFFALSE 28821
// exit ;
28819: GO 28858
// for i in tmp do
28821: LD_ADDR_VAR 0 2
28825: PUSH
28826: LD_VAR 0 1
28830: PUSH
28831: FOR_IN
28832: IFFALSE 28856
// if IsControledBy ( i ) then
28834: LD_VAR 0 2
28838: PPUSH
28839: CALL_OW 312
28843: IFFALSE 28854
// ComUnlink ( i ) ;
28845: LD_VAR 0 2
28849: PPUSH
28850: CALL_OW 136
28854: GO 28831
28856: POP
28857: POP
// end ;
28858: PPOPN 2
28860: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28861: LD_EXP 54
28865: IFFALSE 28873
28867: PUSH
28868: LD_EXP 85
28872: AND
28873: IFFALSE 29013
28875: GO 28877
28877: DISABLE
28878: LD_INT 0
28880: PPUSH
28881: PPUSH
// begin ToLua ( displayPowell(); ) ;
28882: LD_STRING displayPowell();
28884: PPUSH
28885: CALL_OW 559
// uc_side := 0 ;
28889: LD_ADDR_OWVAR 20
28893: PUSH
28894: LD_INT 0
28896: ST_TO_ADDR
// uc_nation := 2 ;
28897: LD_ADDR_OWVAR 21
28901: PUSH
28902: LD_INT 2
28904: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28905: LD_ADDR_OWVAR 37
28909: PUSH
28910: LD_INT 14
28912: ST_TO_ADDR
// vc_engine := engine_siberite ;
28913: LD_ADDR_OWVAR 39
28917: PUSH
28918: LD_INT 3
28920: ST_TO_ADDR
// vc_control := control_apeman ;
28921: LD_ADDR_OWVAR 38
28925: PUSH
28926: LD_INT 5
28928: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28929: LD_ADDR_OWVAR 40
28933: PUSH
28934: LD_INT 29
28936: ST_TO_ADDR
// un := CreateVehicle ;
28937: LD_ADDR_VAR 0 2
28941: PUSH
28942: CALL_OW 45
28946: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28947: LD_VAR 0 2
28951: PPUSH
28952: LD_INT 1
28954: PPUSH
28955: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28959: LD_INT 35
28961: PPUSH
28962: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28966: LD_VAR 0 2
28970: PPUSH
28971: LD_INT 22
28973: PUSH
28974: LD_OWVAR 2
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PPUSH
28983: CALL_OW 69
28987: PPUSH
28988: LD_VAR 0 2
28992: PPUSH
28993: CALL_OW 74
28997: PPUSH
28998: CALL_OW 115
// until IsDead ( un ) ;
29002: LD_VAR 0 2
29006: PPUSH
29007: CALL_OW 301
29011: IFFALSE 28959
// end ;
29013: PPOPN 2
29015: END
// every 0 0$1 trigger StreamModeActive and sStu do
29016: LD_EXP 54
29020: IFFALSE 29028
29022: PUSH
29023: LD_EXP 93
29027: AND
29028: IFFALSE 29044
29030: GO 29032
29032: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29033: LD_STRING displayStucuk();
29035: PPUSH
29036: CALL_OW 559
// ResetFog ;
29040: CALL_OW 335
// end ;
29044: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29045: LD_EXP 54
29049: IFFALSE 29057
29051: PUSH
29052: LD_EXP 86
29056: AND
29057: IFFALSE 29198
29059: GO 29061
29061: DISABLE
29062: LD_INT 0
29064: PPUSH
29065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29066: LD_ADDR_VAR 0 2
29070: PUSH
29071: LD_INT 22
29073: PUSH
29074: LD_OWVAR 2
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 21
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PPUSH
29097: CALL_OW 69
29101: ST_TO_ADDR
// if not tmp then
29102: LD_VAR 0 2
29106: NOT
29107: IFFALSE 29111
// exit ;
29109: GO 29198
// un := tmp [ rand ( 1 , tmp ) ] ;
29111: LD_ADDR_VAR 0 1
29115: PUSH
29116: LD_VAR 0 2
29120: PUSH
29121: LD_INT 1
29123: PPUSH
29124: LD_VAR 0 2
29128: PPUSH
29129: CALL_OW 12
29133: ARRAY
29134: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29135: LD_VAR 0 1
29139: PPUSH
29140: LD_INT 0
29142: PPUSH
29143: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29147: LD_VAR 0 1
29151: PPUSH
29152: LD_OWVAR 3
29156: PUSH
29157: LD_VAR 0 1
29161: DIFF
29162: PPUSH
29163: LD_VAR 0 1
29167: PPUSH
29168: CALL_OW 74
29172: PPUSH
29173: CALL_OW 115
// wait ( 0 0$20 ) ;
29177: LD_INT 700
29179: PPUSH
29180: CALL_OW 67
// SetSide ( un , your_side ) ;
29184: LD_VAR 0 1
29188: PPUSH
29189: LD_OWVAR 2
29193: PPUSH
29194: CALL_OW 235
// end ;
29198: PPOPN 2
29200: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29201: LD_EXP 54
29205: IFFALSE 29213
29207: PUSH
29208: LD_EXP 87
29212: AND
29213: IFFALSE 29319
29215: GO 29217
29217: DISABLE
29218: LD_INT 0
29220: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29221: LD_ADDR_VAR 0 1
29225: PUSH
29226: LD_INT 22
29228: PUSH
29229: LD_OWVAR 2
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 2
29240: PUSH
29241: LD_INT 30
29243: PUSH
29244: LD_INT 0
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 30
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: LIST
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PPUSH
29270: CALL_OW 69
29274: ST_TO_ADDR
// if not depot then
29275: LD_VAR 0 1
29279: NOT
29280: IFFALSE 29284
// exit ;
29282: GO 29319
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29284: LD_VAR 0 1
29288: PUSH
29289: LD_INT 1
29291: ARRAY
29292: PPUSH
29293: CALL_OW 250
29297: PPUSH
29298: LD_VAR 0 1
29302: PUSH
29303: LD_INT 1
29305: ARRAY
29306: PPUSH
29307: CALL_OW 251
29311: PPUSH
29312: LD_INT 70
29314: PPUSH
29315: CALL_OW 495
// end ;
29319: PPOPN 1
29321: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29322: LD_EXP 54
29326: IFFALSE 29334
29328: PUSH
29329: LD_EXP 88
29333: AND
29334: IFFALSE 29545
29336: GO 29338
29338: DISABLE
29339: LD_INT 0
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29346: LD_ADDR_VAR 0 5
29350: PUSH
29351: LD_INT 22
29353: PUSH
29354: LD_OWVAR 2
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 21
29365: PUSH
29366: LD_INT 1
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PPUSH
29377: CALL_OW 69
29381: ST_TO_ADDR
// if not tmp then
29382: LD_VAR 0 5
29386: NOT
29387: IFFALSE 29391
// exit ;
29389: GO 29545
// for i in tmp do
29391: LD_ADDR_VAR 0 1
29395: PUSH
29396: LD_VAR 0 5
29400: PUSH
29401: FOR_IN
29402: IFFALSE 29543
// begin d := rand ( 0 , 5 ) ;
29404: LD_ADDR_VAR 0 4
29408: PUSH
29409: LD_INT 0
29411: PPUSH
29412: LD_INT 5
29414: PPUSH
29415: CALL_OW 12
29419: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29420: LD_ADDR_VAR 0 2
29424: PUSH
29425: LD_VAR 0 1
29429: PPUSH
29430: CALL_OW 250
29434: PPUSH
29435: LD_VAR 0 4
29439: PPUSH
29440: LD_INT 3
29442: PPUSH
29443: LD_INT 12
29445: PPUSH
29446: CALL_OW 12
29450: PPUSH
29451: CALL_OW 272
29455: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29456: LD_ADDR_VAR 0 3
29460: PUSH
29461: LD_VAR 0 1
29465: PPUSH
29466: CALL_OW 251
29470: PPUSH
29471: LD_VAR 0 4
29475: PPUSH
29476: LD_INT 3
29478: PPUSH
29479: LD_INT 12
29481: PPUSH
29482: CALL_OW 12
29486: PPUSH
29487: CALL_OW 273
29491: ST_TO_ADDR
// if ValidHex ( x , y ) then
29492: LD_VAR 0 2
29496: PPUSH
29497: LD_VAR 0 3
29501: PPUSH
29502: CALL_OW 488
29506: IFFALSE 29541
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29508: LD_VAR 0 1
29512: PPUSH
29513: LD_VAR 0 2
29517: PPUSH
29518: LD_VAR 0 3
29522: PPUSH
29523: LD_INT 3
29525: PPUSH
29526: LD_INT 6
29528: PPUSH
29529: CALL_OW 12
29533: PPUSH
29534: LD_INT 1
29536: PPUSH
29537: CALL_OW 483
// end ;
29541: GO 29401
29543: POP
29544: POP
// end ;
29545: PPOPN 5
29547: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29548: LD_EXP 54
29552: IFFALSE 29560
29554: PUSH
29555: LD_EXP 89
29559: AND
29560: IFFALSE 29654
29562: GO 29564
29564: DISABLE
29565: LD_INT 0
29567: PPUSH
29568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29569: LD_ADDR_VAR 0 2
29573: PUSH
29574: LD_INT 22
29576: PUSH
29577: LD_OWVAR 2
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 32
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 21
29598: PUSH
29599: LD_INT 2
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: LIST
29610: PPUSH
29611: CALL_OW 69
29615: ST_TO_ADDR
// if not tmp then
29616: LD_VAR 0 2
29620: NOT
29621: IFFALSE 29625
// exit ;
29623: GO 29654
// for i in tmp do
29625: LD_ADDR_VAR 0 1
29629: PUSH
29630: LD_VAR 0 2
29634: PUSH
29635: FOR_IN
29636: IFFALSE 29652
// SetFuel ( i , 0 ) ;
29638: LD_VAR 0 1
29642: PPUSH
29643: LD_INT 0
29645: PPUSH
29646: CALL_OW 240
29650: GO 29635
29652: POP
29653: POP
// end ;
29654: PPOPN 2
29656: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29657: LD_EXP 54
29661: IFFALSE 29669
29663: PUSH
29664: LD_EXP 90
29668: AND
29669: IFFALSE 29735
29671: GO 29673
29673: DISABLE
29674: LD_INT 0
29676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29677: LD_ADDR_VAR 0 1
29681: PUSH
29682: LD_INT 22
29684: PUSH
29685: LD_OWVAR 2
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 30
29696: PUSH
29697: LD_INT 29
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PPUSH
29708: CALL_OW 69
29712: ST_TO_ADDR
// if not tmp then
29713: LD_VAR 0 1
29717: NOT
29718: IFFALSE 29722
// exit ;
29720: GO 29735
// DestroyUnit ( tmp [ 1 ] ) ;
29722: LD_VAR 0 1
29726: PUSH
29727: LD_INT 1
29729: ARRAY
29730: PPUSH
29731: CALL_OW 65
// end ;
29735: PPOPN 1
29737: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29738: LD_EXP 54
29742: IFFALSE 29750
29744: PUSH
29745: LD_EXP 92
29749: AND
29750: IFFALSE 29879
29752: GO 29754
29754: DISABLE
29755: LD_INT 0
29757: PPUSH
// begin uc_side := 0 ;
29758: LD_ADDR_OWVAR 20
29762: PUSH
29763: LD_INT 0
29765: ST_TO_ADDR
// uc_nation := nation_arabian ;
29766: LD_ADDR_OWVAR 21
29770: PUSH
29771: LD_INT 2
29773: ST_TO_ADDR
// hc_gallery :=  ;
29774: LD_ADDR_OWVAR 33
29778: PUSH
29779: LD_STRING 
29781: ST_TO_ADDR
// hc_name :=  ;
29782: LD_ADDR_OWVAR 26
29786: PUSH
29787: LD_STRING 
29789: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29790: LD_INT 1
29792: PPUSH
29793: LD_INT 11
29795: PPUSH
29796: LD_INT 10
29798: PPUSH
29799: CALL_OW 380
// un := CreateHuman ;
29803: LD_ADDR_VAR 0 1
29807: PUSH
29808: CALL_OW 44
29812: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29813: LD_VAR 0 1
29817: PPUSH
29818: LD_INT 1
29820: PPUSH
29821: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29825: LD_INT 35
29827: PPUSH
29828: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29832: LD_VAR 0 1
29836: PPUSH
29837: LD_INT 22
29839: PUSH
29840: LD_OWVAR 2
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PPUSH
29849: CALL_OW 69
29853: PPUSH
29854: LD_VAR 0 1
29858: PPUSH
29859: CALL_OW 74
29863: PPUSH
29864: CALL_OW 115
// until IsDead ( un ) ;
29868: LD_VAR 0 1
29872: PPUSH
29873: CALL_OW 301
29877: IFFALSE 29825
// end ;
29879: PPOPN 1
29881: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29882: LD_EXP 54
29886: IFFALSE 29894
29888: PUSH
29889: LD_EXP 94
29893: AND
29894: IFFALSE 29906
29896: GO 29898
29898: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29899: LD_STRING earthquake(getX(game), 0, 32)
29901: PPUSH
29902: CALL_OW 559
29906: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29907: LD_EXP 54
29911: IFFALSE 29919
29913: PUSH
29914: LD_EXP 95
29918: AND
29919: IFFALSE 30010
29921: GO 29923
29923: DISABLE
29924: LD_INT 0
29926: PPUSH
// begin enable ;
29927: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29928: LD_ADDR_VAR 0 1
29932: PUSH
29933: LD_INT 22
29935: PUSH
29936: LD_OWVAR 2
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 21
29947: PUSH
29948: LD_INT 2
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 33
29957: PUSH
29958: LD_INT 3
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: LIST
29969: PPUSH
29970: CALL_OW 69
29974: ST_TO_ADDR
// if not tmp then
29975: LD_VAR 0 1
29979: NOT
29980: IFFALSE 29984
// exit ;
29982: GO 30010
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29984: LD_VAR 0 1
29988: PUSH
29989: LD_INT 1
29991: PPUSH
29992: LD_VAR 0 1
29996: PPUSH
29997: CALL_OW 12
30001: ARRAY
30002: PPUSH
30003: LD_INT 1
30005: PPUSH
30006: CALL_OW 234
// end ;
30010: PPOPN 1
30012: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30013: LD_EXP 54
30017: IFFALSE 30025
30019: PUSH
30020: LD_EXP 96
30024: AND
30025: IFFALSE 30166
30027: GO 30029
30029: DISABLE
30030: LD_INT 0
30032: PPUSH
30033: PPUSH
30034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30035: LD_ADDR_VAR 0 3
30039: PUSH
30040: LD_INT 22
30042: PUSH
30043: LD_OWVAR 2
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 25
30054: PUSH
30055: LD_INT 1
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PPUSH
30066: CALL_OW 69
30070: ST_TO_ADDR
// if not tmp then
30071: LD_VAR 0 3
30075: NOT
30076: IFFALSE 30080
// exit ;
30078: GO 30166
// un := tmp [ rand ( 1 , tmp ) ] ;
30080: LD_ADDR_VAR 0 2
30084: PUSH
30085: LD_VAR 0 3
30089: PUSH
30090: LD_INT 1
30092: PPUSH
30093: LD_VAR 0 3
30097: PPUSH
30098: CALL_OW 12
30102: ARRAY
30103: ST_TO_ADDR
// if Crawls ( un ) then
30104: LD_VAR 0 2
30108: PPUSH
30109: CALL_OW 318
30113: IFFALSE 30124
// ComWalk ( un ) ;
30115: LD_VAR 0 2
30119: PPUSH
30120: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30124: LD_VAR 0 2
30128: PPUSH
30129: LD_INT 9
30131: PPUSH
30132: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30136: LD_INT 28
30138: PPUSH
30139: LD_OWVAR 2
30143: PPUSH
30144: LD_INT 2
30146: PPUSH
30147: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30151: LD_INT 29
30153: PPUSH
30154: LD_OWVAR 2
30158: PPUSH
30159: LD_INT 2
30161: PPUSH
30162: CALL_OW 322
// end ;
30166: PPOPN 3
30168: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30169: LD_EXP 54
30173: IFFALSE 30181
30175: PUSH
30176: LD_EXP 97
30180: AND
30181: IFFALSE 30292
30183: GO 30185
30185: DISABLE
30186: LD_INT 0
30188: PPUSH
30189: PPUSH
30190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30191: LD_ADDR_VAR 0 3
30195: PUSH
30196: LD_INT 22
30198: PUSH
30199: LD_OWVAR 2
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 25
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PPUSH
30222: CALL_OW 69
30226: ST_TO_ADDR
// if not tmp then
30227: LD_VAR 0 3
30231: NOT
30232: IFFALSE 30236
// exit ;
30234: GO 30292
// un := tmp [ rand ( 1 , tmp ) ] ;
30236: LD_ADDR_VAR 0 2
30240: PUSH
30241: LD_VAR 0 3
30245: PUSH
30246: LD_INT 1
30248: PPUSH
30249: LD_VAR 0 3
30253: PPUSH
30254: CALL_OW 12
30258: ARRAY
30259: ST_TO_ADDR
// if Crawls ( un ) then
30260: LD_VAR 0 2
30264: PPUSH
30265: CALL_OW 318
30269: IFFALSE 30280
// ComWalk ( un ) ;
30271: LD_VAR 0 2
30275: PPUSH
30276: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30280: LD_VAR 0 2
30284: PPUSH
30285: LD_INT 8
30287: PPUSH
30288: CALL_OW 336
// end ;
30292: PPOPN 3
30294: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30295: LD_EXP 54
30299: IFFALSE 30307
30301: PUSH
30302: LD_EXP 98
30306: AND
30307: IFFALSE 30451
30309: GO 30311
30311: DISABLE
30312: LD_INT 0
30314: PPUSH
30315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30316: LD_ADDR_VAR 0 2
30320: PUSH
30321: LD_INT 22
30323: PUSH
30324: LD_OWVAR 2
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 21
30335: PUSH
30336: LD_INT 2
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 2
30345: PUSH
30346: LD_INT 34
30348: PUSH
30349: LD_INT 12
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 34
30358: PUSH
30359: LD_INT 51
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 34
30368: PUSH
30369: LD_INT 32
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: LIST
30386: PPUSH
30387: CALL_OW 69
30391: ST_TO_ADDR
// if not tmp then
30392: LD_VAR 0 2
30396: NOT
30397: IFFALSE 30401
// exit ;
30399: GO 30451
// for i in tmp do
30401: LD_ADDR_VAR 0 1
30405: PUSH
30406: LD_VAR 0 2
30410: PUSH
30411: FOR_IN
30412: IFFALSE 30449
// if GetCargo ( i , mat_artifact ) = 0 then
30414: LD_VAR 0 1
30418: PPUSH
30419: LD_INT 4
30421: PPUSH
30422: CALL_OW 289
30426: PUSH
30427: LD_INT 0
30429: EQUAL
30430: IFFALSE 30447
// SetCargo ( i , mat_siberit , 100 ) ;
30432: LD_VAR 0 1
30436: PPUSH
30437: LD_INT 3
30439: PPUSH
30440: LD_INT 100
30442: PPUSH
30443: CALL_OW 290
30447: GO 30411
30449: POP
30450: POP
// end ;
30451: PPOPN 2
30453: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30454: LD_EXP 54
30458: IFFALSE 30466
30460: PUSH
30461: LD_EXP 99
30465: AND
30466: IFFALSE 30649
30468: GO 30470
30470: DISABLE
30471: LD_INT 0
30473: PPUSH
30474: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30475: LD_ADDR_VAR 0 2
30479: PUSH
30480: LD_INT 22
30482: PUSH
30483: LD_OWVAR 2
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PPUSH
30492: CALL_OW 69
30496: ST_TO_ADDR
// if not tmp then
30497: LD_VAR 0 2
30501: NOT
30502: IFFALSE 30506
// exit ;
30504: GO 30649
// for i := 1 to 2 do
30506: LD_ADDR_VAR 0 1
30510: PUSH
30511: DOUBLE
30512: LD_INT 1
30514: DEC
30515: ST_TO_ADDR
30516: LD_INT 2
30518: PUSH
30519: FOR_TO
30520: IFFALSE 30647
// begin uc_side := your_side ;
30522: LD_ADDR_OWVAR 20
30526: PUSH
30527: LD_OWVAR 2
30531: ST_TO_ADDR
// uc_nation := nation_american ;
30532: LD_ADDR_OWVAR 21
30536: PUSH
30537: LD_INT 1
30539: ST_TO_ADDR
// vc_chassis := us_morphling ;
30540: LD_ADDR_OWVAR 37
30544: PUSH
30545: LD_INT 5
30547: ST_TO_ADDR
// vc_engine := engine_siberite ;
30548: LD_ADDR_OWVAR 39
30552: PUSH
30553: LD_INT 3
30555: ST_TO_ADDR
// vc_control := control_computer ;
30556: LD_ADDR_OWVAR 38
30560: PUSH
30561: LD_INT 3
30563: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30564: LD_ADDR_OWVAR 40
30568: PUSH
30569: LD_INT 10
30571: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30572: LD_VAR 0 2
30576: PUSH
30577: LD_INT 1
30579: ARRAY
30580: PPUSH
30581: CALL_OW 310
30585: NOT
30586: IFFALSE 30633
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30588: CALL_OW 45
30592: PPUSH
30593: LD_VAR 0 2
30597: PUSH
30598: LD_INT 1
30600: ARRAY
30601: PPUSH
30602: CALL_OW 250
30606: PPUSH
30607: LD_VAR 0 2
30611: PUSH
30612: LD_INT 1
30614: ARRAY
30615: PPUSH
30616: CALL_OW 251
30620: PPUSH
30621: LD_INT 12
30623: PPUSH
30624: LD_INT 1
30626: PPUSH
30627: CALL_OW 50
30631: GO 30645
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30633: CALL_OW 45
30637: PPUSH
30638: LD_INT 1
30640: PPUSH
30641: CALL_OW 51
// end ;
30645: GO 30519
30647: POP
30648: POP
// end ;
30649: PPOPN 2
30651: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30652: LD_EXP 54
30656: IFFALSE 30664
30658: PUSH
30659: LD_EXP 100
30663: AND
30664: IFFALSE 30886
30666: GO 30668
30668: DISABLE
30669: LD_INT 0
30671: PPUSH
30672: PPUSH
30673: PPUSH
30674: PPUSH
30675: PPUSH
30676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30677: LD_ADDR_VAR 0 6
30681: PUSH
30682: LD_INT 22
30684: PUSH
30685: LD_OWVAR 2
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 21
30696: PUSH
30697: LD_INT 1
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 3
30706: PUSH
30707: LD_INT 23
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: LIST
30725: PPUSH
30726: CALL_OW 69
30730: ST_TO_ADDR
// if not tmp then
30731: LD_VAR 0 6
30735: NOT
30736: IFFALSE 30740
// exit ;
30738: GO 30886
// s1 := rand ( 1 , 4 ) ;
30740: LD_ADDR_VAR 0 2
30744: PUSH
30745: LD_INT 1
30747: PPUSH
30748: LD_INT 4
30750: PPUSH
30751: CALL_OW 12
30755: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30756: LD_ADDR_VAR 0 4
30760: PUSH
30761: LD_VAR 0 6
30765: PUSH
30766: LD_INT 1
30768: ARRAY
30769: PPUSH
30770: LD_VAR 0 2
30774: PPUSH
30775: CALL_OW 259
30779: ST_TO_ADDR
// if s1 = 1 then
30780: LD_VAR 0 2
30784: PUSH
30785: LD_INT 1
30787: EQUAL
30788: IFFALSE 30808
// s2 := rand ( 2 , 4 ) else
30790: LD_ADDR_VAR 0 3
30794: PUSH
30795: LD_INT 2
30797: PPUSH
30798: LD_INT 4
30800: PPUSH
30801: CALL_OW 12
30805: ST_TO_ADDR
30806: GO 30816
// s2 := 1 ;
30808: LD_ADDR_VAR 0 3
30812: PUSH
30813: LD_INT 1
30815: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30816: LD_ADDR_VAR 0 5
30820: PUSH
30821: LD_VAR 0 6
30825: PUSH
30826: LD_INT 1
30828: ARRAY
30829: PPUSH
30830: LD_VAR 0 3
30834: PPUSH
30835: CALL_OW 259
30839: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30840: LD_VAR 0 6
30844: PUSH
30845: LD_INT 1
30847: ARRAY
30848: PPUSH
30849: LD_VAR 0 2
30853: PPUSH
30854: LD_VAR 0 5
30858: PPUSH
30859: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30863: LD_VAR 0 6
30867: PUSH
30868: LD_INT 1
30870: ARRAY
30871: PPUSH
30872: LD_VAR 0 3
30876: PPUSH
30877: LD_VAR 0 4
30881: PPUSH
30882: CALL_OW 237
// end ;
30886: PPOPN 6
30888: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30889: LD_EXP 54
30893: IFFALSE 30901
30895: PUSH
30896: LD_EXP 101
30900: AND
30901: IFFALSE 30980
30903: GO 30905
30905: DISABLE
30906: LD_INT 0
30908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30909: LD_ADDR_VAR 0 1
30913: PUSH
30914: LD_INT 22
30916: PUSH
30917: LD_OWVAR 2
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 30
30928: PUSH
30929: LD_INT 3
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PPUSH
30940: CALL_OW 69
30944: ST_TO_ADDR
// if not tmp then
30945: LD_VAR 0 1
30949: NOT
30950: IFFALSE 30954
// exit ;
30952: GO 30980
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30954: LD_VAR 0 1
30958: PUSH
30959: LD_INT 1
30961: PPUSH
30962: LD_VAR 0 1
30966: PPUSH
30967: CALL_OW 12
30971: ARRAY
30972: PPUSH
30973: LD_INT 1
30975: PPUSH
30976: CALL_OW 234
// end ;
30980: PPOPN 1
30982: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30983: LD_EXP 54
30987: IFFALSE 30995
30989: PUSH
30990: LD_EXP 102
30994: AND
30995: IFFALSE 31107
30997: GO 30999
30999: DISABLE
31000: LD_INT 0
31002: PPUSH
31003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31004: LD_ADDR_VAR 0 2
31008: PUSH
31009: LD_INT 22
31011: PUSH
31012: LD_OWVAR 2
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 2
31023: PUSH
31024: LD_INT 30
31026: PUSH
31027: LD_INT 27
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 30
31036: PUSH
31037: LD_INT 26
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 30
31046: PUSH
31047: LD_INT 28
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PPUSH
31064: CALL_OW 69
31068: ST_TO_ADDR
// if not tmp then
31069: LD_VAR 0 2
31073: NOT
31074: IFFALSE 31078
// exit ;
31076: GO 31107
// for i in tmp do
31078: LD_ADDR_VAR 0 1
31082: PUSH
31083: LD_VAR 0 2
31087: PUSH
31088: FOR_IN
31089: IFFALSE 31105
// SetLives ( i , 1 ) ;
31091: LD_VAR 0 1
31095: PPUSH
31096: LD_INT 1
31098: PPUSH
31099: CALL_OW 234
31103: GO 31088
31105: POP
31106: POP
// end ;
31107: PPOPN 2
31109: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31110: LD_EXP 54
31114: IFFALSE 31122
31116: PUSH
31117: LD_EXP 103
31121: AND
31122: IFFALSE 31409
31124: GO 31126
31126: DISABLE
31127: LD_INT 0
31129: PPUSH
31130: PPUSH
31131: PPUSH
// begin i := rand ( 1 , 7 ) ;
31132: LD_ADDR_VAR 0 1
31136: PUSH
31137: LD_INT 1
31139: PPUSH
31140: LD_INT 7
31142: PPUSH
31143: CALL_OW 12
31147: ST_TO_ADDR
// case i of 1 :
31148: LD_VAR 0 1
31152: PUSH
31153: LD_INT 1
31155: DOUBLE
31156: EQUAL
31157: IFTRUE 31161
31159: GO 31171
31161: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31162: LD_STRING earthquake(getX(game), 0, 32)
31164: PPUSH
31165: CALL_OW 559
31169: GO 31409
31171: LD_INT 2
31173: DOUBLE
31174: EQUAL
31175: IFTRUE 31179
31177: GO 31193
31179: POP
// begin ToLua ( displayStucuk(); ) ;
31180: LD_STRING displayStucuk();
31182: PPUSH
31183: CALL_OW 559
// ResetFog ;
31187: CALL_OW 335
// end ; 3 :
31191: GO 31409
31193: LD_INT 3
31195: DOUBLE
31196: EQUAL
31197: IFTRUE 31201
31199: GO 31305
31201: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31202: LD_ADDR_VAR 0 2
31206: PUSH
31207: LD_INT 22
31209: PUSH
31210: LD_OWVAR 2
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 25
31221: PUSH
31222: LD_INT 1
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PPUSH
31233: CALL_OW 69
31237: ST_TO_ADDR
// if not tmp then
31238: LD_VAR 0 2
31242: NOT
31243: IFFALSE 31247
// exit ;
31245: GO 31409
// un := tmp [ rand ( 1 , tmp ) ] ;
31247: LD_ADDR_VAR 0 3
31251: PUSH
31252: LD_VAR 0 2
31256: PUSH
31257: LD_INT 1
31259: PPUSH
31260: LD_VAR 0 2
31264: PPUSH
31265: CALL_OW 12
31269: ARRAY
31270: ST_TO_ADDR
// if Crawls ( un ) then
31271: LD_VAR 0 3
31275: PPUSH
31276: CALL_OW 318
31280: IFFALSE 31291
// ComWalk ( un ) ;
31282: LD_VAR 0 3
31286: PPUSH
31287: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31291: LD_VAR 0 3
31295: PPUSH
31296: LD_INT 8
31298: PPUSH
31299: CALL_OW 336
// end ; 4 :
31303: GO 31409
31305: LD_INT 4
31307: DOUBLE
31308: EQUAL
31309: IFTRUE 31313
31311: GO 31387
31313: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31314: LD_ADDR_VAR 0 2
31318: PUSH
31319: LD_INT 22
31321: PUSH
31322: LD_OWVAR 2
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 30
31333: PUSH
31334: LD_INT 29
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PPUSH
31345: CALL_OW 69
31349: ST_TO_ADDR
// if not tmp then
31350: LD_VAR 0 2
31354: NOT
31355: IFFALSE 31359
// exit ;
31357: GO 31409
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31359: LD_VAR 0 2
31363: PUSH
31364: LD_INT 1
31366: ARRAY
31367: PPUSH
31368: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31372: LD_VAR 0 2
31376: PUSH
31377: LD_INT 1
31379: ARRAY
31380: PPUSH
31381: CALL_OW 65
// end ; 5 .. 7 :
31385: GO 31409
31387: LD_INT 5
31389: DOUBLE
31390: GREATEREQUAL
31391: IFFALSE 31399
31393: LD_INT 7
31395: DOUBLE
31396: LESSEQUAL
31397: IFTRUE 31401
31399: GO 31408
31401: POP
// StreamSibBomb ; end ;
31402: CALL 27590 0 0
31406: GO 31409
31408: POP
// end ;
31409: PPOPN 3
31411: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31412: LD_EXP 54
31416: IFFALSE 31424
31418: PUSH
31419: LD_EXP 104
31423: AND
31424: IFFALSE 31580
31426: GO 31428
31428: DISABLE
31429: LD_INT 0
31431: PPUSH
31432: PPUSH
31433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31434: LD_ADDR_VAR 0 2
31438: PUSH
31439: LD_INT 81
31441: PUSH
31442: LD_OWVAR 2
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 2
31453: PUSH
31454: LD_INT 21
31456: PUSH
31457: LD_INT 1
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 21
31466: PUSH
31467: LD_INT 2
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: LIST
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PPUSH
31483: CALL_OW 69
31487: ST_TO_ADDR
// if not tmp then
31488: LD_VAR 0 2
31492: NOT
31493: IFFALSE 31497
// exit ;
31495: GO 31580
// p := 0 ;
31497: LD_ADDR_VAR 0 3
31501: PUSH
31502: LD_INT 0
31504: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31505: LD_INT 35
31507: PPUSH
31508: CALL_OW 67
// p := p + 1 ;
31512: LD_ADDR_VAR 0 3
31516: PUSH
31517: LD_VAR 0 3
31521: PUSH
31522: LD_INT 1
31524: PLUS
31525: ST_TO_ADDR
// for i in tmp do
31526: LD_ADDR_VAR 0 1
31530: PUSH
31531: LD_VAR 0 2
31535: PUSH
31536: FOR_IN
31537: IFFALSE 31568
// if GetLives ( i ) < 1000 then
31539: LD_VAR 0 1
31543: PPUSH
31544: CALL_OW 256
31548: PUSH
31549: LD_INT 1000
31551: LESS
31552: IFFALSE 31566
// SetLives ( i , 1000 ) ;
31554: LD_VAR 0 1
31558: PPUSH
31559: LD_INT 1000
31561: PPUSH
31562: CALL_OW 234
31566: GO 31536
31568: POP
31569: POP
// until p > 20 ;
31570: LD_VAR 0 3
31574: PUSH
31575: LD_INT 20
31577: GREATER
31578: IFFALSE 31505
// end ;
31580: PPOPN 3
31582: END
// every 0 0$1 trigger StreamModeActive and sTime do
31583: LD_EXP 54
31587: IFFALSE 31595
31589: PUSH
31590: LD_EXP 105
31594: AND
31595: IFFALSE 31630
31597: GO 31599
31599: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31600: LD_INT 28
31602: PPUSH
31603: LD_OWVAR 2
31607: PPUSH
31608: LD_INT 2
31610: PPUSH
31611: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31615: LD_INT 30
31617: PPUSH
31618: LD_OWVAR 2
31622: PPUSH
31623: LD_INT 2
31625: PPUSH
31626: CALL_OW 322
// end ;
31630: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31631: LD_EXP 54
31635: IFFALSE 31643
31637: PUSH
31638: LD_EXP 106
31642: AND
31643: IFFALSE 31764
31645: GO 31647
31647: DISABLE
31648: LD_INT 0
31650: PPUSH
31651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31652: LD_ADDR_VAR 0 2
31656: PUSH
31657: LD_INT 22
31659: PUSH
31660: LD_OWVAR 2
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 21
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 3
31681: PUSH
31682: LD_INT 23
31684: PUSH
31685: LD_INT 0
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: LIST
31700: PPUSH
31701: CALL_OW 69
31705: ST_TO_ADDR
// if not tmp then
31706: LD_VAR 0 2
31710: NOT
31711: IFFALSE 31715
// exit ;
31713: GO 31764
// for i in tmp do
31715: LD_ADDR_VAR 0 1
31719: PUSH
31720: LD_VAR 0 2
31724: PUSH
31725: FOR_IN
31726: IFFALSE 31762
// begin if Crawls ( i ) then
31728: LD_VAR 0 1
31732: PPUSH
31733: CALL_OW 318
31737: IFFALSE 31748
// ComWalk ( i ) ;
31739: LD_VAR 0 1
31743: PPUSH
31744: CALL_OW 138
// SetClass ( i , 2 ) ;
31748: LD_VAR 0 1
31752: PPUSH
31753: LD_INT 2
31755: PPUSH
31756: CALL_OW 336
// end ;
31760: GO 31725
31762: POP
31763: POP
// end ;
31764: PPOPN 2
31766: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31767: LD_EXP 54
31771: IFFALSE 31779
31773: PUSH
31774: LD_EXP 107
31778: AND
31779: IFFALSE 32069
31781: GO 31783
31783: DISABLE
31784: LD_INT 0
31786: PPUSH
31787: PPUSH
31788: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31789: LD_OWVAR 2
31793: PPUSH
31794: LD_INT 9
31796: PPUSH
31797: LD_INT 1
31799: PPUSH
31800: LD_INT 1
31802: PPUSH
31803: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31807: LD_INT 9
31809: PPUSH
31810: LD_OWVAR 2
31814: PPUSH
31815: CALL_OW 343
// uc_side := 9 ;
31819: LD_ADDR_OWVAR 20
31823: PUSH
31824: LD_INT 9
31826: ST_TO_ADDR
// uc_nation := 2 ;
31827: LD_ADDR_OWVAR 21
31831: PUSH
31832: LD_INT 2
31834: ST_TO_ADDR
// hc_name := Dark Warrior ;
31835: LD_ADDR_OWVAR 26
31839: PUSH
31840: LD_STRING Dark Warrior
31842: ST_TO_ADDR
// hc_gallery :=  ;
31843: LD_ADDR_OWVAR 33
31847: PUSH
31848: LD_STRING 
31850: ST_TO_ADDR
// hc_noskilllimit := true ;
31851: LD_ADDR_OWVAR 76
31855: PUSH
31856: LD_INT 1
31858: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31859: LD_ADDR_OWVAR 31
31863: PUSH
31864: LD_INT 30
31866: PUSH
31867: LD_INT 30
31869: PUSH
31870: LD_INT 30
31872: PUSH
31873: LD_INT 30
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: ST_TO_ADDR
// un := CreateHuman ;
31882: LD_ADDR_VAR 0 3
31886: PUSH
31887: CALL_OW 44
31891: ST_TO_ADDR
// hc_noskilllimit := false ;
31892: LD_ADDR_OWVAR 76
31896: PUSH
31897: LD_INT 0
31899: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31900: LD_VAR 0 3
31904: PPUSH
31905: LD_INT 1
31907: PPUSH
31908: CALL_OW 51
// ToLua ( playRanger() ) ;
31912: LD_STRING playRanger()
31914: PPUSH
31915: CALL_OW 559
// p := 0 ;
31919: LD_ADDR_VAR 0 2
31923: PUSH
31924: LD_INT 0
31926: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31927: LD_INT 35
31929: PPUSH
31930: CALL_OW 67
// p := p + 1 ;
31934: LD_ADDR_VAR 0 2
31938: PUSH
31939: LD_VAR 0 2
31943: PUSH
31944: LD_INT 1
31946: PLUS
31947: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31948: LD_VAR 0 3
31952: PPUSH
31953: CALL_OW 256
31957: PUSH
31958: LD_INT 1000
31960: LESS
31961: IFFALSE 31975
// SetLives ( un , 1000 ) ;
31963: LD_VAR 0 3
31967: PPUSH
31968: LD_INT 1000
31970: PPUSH
31971: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31975: LD_VAR 0 3
31979: PPUSH
31980: LD_INT 81
31982: PUSH
31983: LD_OWVAR 2
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 91
31994: PUSH
31995: LD_VAR 0 3
31999: PUSH
32000: LD_INT 30
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: LIST
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PPUSH
32012: CALL_OW 69
32016: PPUSH
32017: LD_VAR 0 3
32021: PPUSH
32022: CALL_OW 74
32026: PPUSH
32027: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32031: LD_VAR 0 2
32035: PUSH
32036: LD_INT 80
32038: GREATER
32039: IFTRUE 32052
32041: PUSH
32042: LD_VAR 0 3
32046: PPUSH
32047: CALL_OW 301
32051: OR
32052: IFFALSE 31927
// if un then
32054: LD_VAR 0 3
32058: IFFALSE 32069
// RemoveUnit ( un ) ;
32060: LD_VAR 0 3
32064: PPUSH
32065: CALL_OW 64
// end ;
32069: PPOPN 3
32071: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32072: LD_EXP 108
32076: IFFALSE 32192
32078: GO 32080
32080: DISABLE
32081: LD_INT 0
32083: PPUSH
32084: PPUSH
32085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32086: LD_ADDR_VAR 0 2
32090: PUSH
32091: LD_INT 81
32093: PUSH
32094: LD_OWVAR 2
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 21
32105: PUSH
32106: LD_INT 1
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PPUSH
32117: CALL_OW 69
32121: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32122: LD_STRING playComputer()
32124: PPUSH
32125: CALL_OW 559
// if not tmp then
32129: LD_VAR 0 2
32133: NOT
32134: IFFALSE 32138
// exit ;
32136: GO 32192
// for i in tmp do
32138: LD_ADDR_VAR 0 1
32142: PUSH
32143: LD_VAR 0 2
32147: PUSH
32148: FOR_IN
32149: IFFALSE 32190
// for j := 1 to 4 do
32151: LD_ADDR_VAR 0 3
32155: PUSH
32156: DOUBLE
32157: LD_INT 1
32159: DEC
32160: ST_TO_ADDR
32161: LD_INT 4
32163: PUSH
32164: FOR_TO
32165: IFFALSE 32186
// SetSkill ( i , j , 10 ) ;
32167: LD_VAR 0 1
32171: PPUSH
32172: LD_VAR 0 3
32176: PPUSH
32177: LD_INT 10
32179: PPUSH
32180: CALL_OW 237
32184: GO 32164
32186: POP
32187: POP
32188: GO 32148
32190: POP
32191: POP
// end ;
32192: PPOPN 3
32194: END
// every 0 0$1 trigger s30 do var i , tmp ;
32195: LD_EXP 109
32199: IFFALSE 32268
32201: GO 32203
32203: DISABLE
32204: LD_INT 0
32206: PPUSH
32207: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32208: LD_ADDR_VAR 0 2
32212: PUSH
32213: LD_INT 22
32215: PUSH
32216: LD_OWVAR 2
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PPUSH
32225: CALL_OW 69
32229: ST_TO_ADDR
// if not tmp then
32230: LD_VAR 0 2
32234: NOT
32235: IFFALSE 32239
// exit ;
32237: GO 32268
// for i in tmp do
32239: LD_ADDR_VAR 0 1
32243: PUSH
32244: LD_VAR 0 2
32248: PUSH
32249: FOR_IN
32250: IFFALSE 32266
// SetLives ( i , 300 ) ;
32252: LD_VAR 0 1
32256: PPUSH
32257: LD_INT 300
32259: PPUSH
32260: CALL_OW 234
32264: GO 32249
32266: POP
32267: POP
// end ;
32268: PPOPN 2
32270: END
// every 0 0$1 trigger s60 do var i , tmp ;
32271: LD_EXP 110
32275: IFFALSE 32344
32277: GO 32279
32279: DISABLE
32280: LD_INT 0
32282: PPUSH
32283: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32284: LD_ADDR_VAR 0 2
32288: PUSH
32289: LD_INT 22
32291: PUSH
32292: LD_OWVAR 2
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PPUSH
32301: CALL_OW 69
32305: ST_TO_ADDR
// if not tmp then
32306: LD_VAR 0 2
32310: NOT
32311: IFFALSE 32315
// exit ;
32313: GO 32344
// for i in tmp do
32315: LD_ADDR_VAR 0 1
32319: PUSH
32320: LD_VAR 0 2
32324: PUSH
32325: FOR_IN
32326: IFFALSE 32342
// SetLives ( i , 600 ) ;
32328: LD_VAR 0 1
32332: PPUSH
32333: LD_INT 600
32335: PPUSH
32336: CALL_OW 234
32340: GO 32325
32342: POP
32343: POP
// end ;
32344: PPOPN 2
32346: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32347: LD_INT 0
32349: PPUSH
// case cmd of 301 :
32350: LD_VAR 0 1
32354: PUSH
32355: LD_INT 301
32357: DOUBLE
32358: EQUAL
32359: IFTRUE 32363
32361: GO 32395
32363: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32364: LD_VAR 0 6
32368: PPUSH
32369: LD_VAR 0 7
32373: PPUSH
32374: LD_VAR 0 8
32378: PPUSH
32379: LD_VAR 0 4
32383: PPUSH
32384: LD_VAR 0 5
32388: PPUSH
32389: CALL 33608 0 5
32393: GO 32516
32395: LD_INT 302
32397: DOUBLE
32398: EQUAL
32399: IFTRUE 32403
32401: GO 32440
32403: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32404: LD_VAR 0 6
32408: PPUSH
32409: LD_VAR 0 7
32413: PPUSH
32414: LD_VAR 0 8
32418: PPUSH
32419: LD_VAR 0 9
32423: PPUSH
32424: LD_VAR 0 4
32428: PPUSH
32429: LD_VAR 0 5
32433: PPUSH
32434: CALL 33699 0 6
32438: GO 32516
32440: LD_INT 303
32442: DOUBLE
32443: EQUAL
32444: IFTRUE 32448
32446: GO 32485
32448: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32449: LD_VAR 0 6
32453: PPUSH
32454: LD_VAR 0 7
32458: PPUSH
32459: LD_VAR 0 8
32463: PPUSH
32464: LD_VAR 0 9
32468: PPUSH
32469: LD_VAR 0 4
32473: PPUSH
32474: LD_VAR 0 5
32478: PPUSH
32479: CALL 32521 0 6
32483: GO 32516
32485: LD_INT 304
32487: DOUBLE
32488: EQUAL
32489: IFTRUE 32493
32491: GO 32515
32493: POP
// hHackTeleport ( unit , x , y ) ; end ;
32494: LD_VAR 0 2
32498: PPUSH
32499: LD_VAR 0 4
32503: PPUSH
32504: LD_VAR 0 5
32508: PPUSH
32509: CALL 34292 0 3
32513: GO 32516
32515: POP
// end ;
32516: LD_VAR 0 12
32520: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32521: LD_INT 0
32523: PPUSH
32524: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32525: LD_VAR 0 1
32529: PUSH
32530: LD_INT 1
32532: LESS
32533: IFTRUE 32545
32535: PUSH
32536: LD_VAR 0 1
32540: PUSH
32541: LD_INT 3
32543: GREATER
32544: OR
32545: IFTRUE 32563
32547: PUSH
32548: LD_VAR 0 5
32552: PPUSH
32553: LD_VAR 0 6
32557: PPUSH
32558: CALL_OW 428
32562: OR
32563: IFFALSE 32567
// exit ;
32565: GO 33295
// uc_side := your_side ;
32567: LD_ADDR_OWVAR 20
32571: PUSH
32572: LD_OWVAR 2
32576: ST_TO_ADDR
// uc_nation := nation ;
32577: LD_ADDR_OWVAR 21
32581: PUSH
32582: LD_VAR 0 1
32586: ST_TO_ADDR
// bc_level = 1 ;
32587: LD_ADDR_OWVAR 43
32591: PUSH
32592: LD_INT 1
32594: ST_TO_ADDR
// case btype of 1 :
32595: LD_VAR 0 2
32599: PUSH
32600: LD_INT 1
32602: DOUBLE
32603: EQUAL
32604: IFTRUE 32608
32606: GO 32619
32608: POP
// bc_type := b_depot ; 2 :
32609: LD_ADDR_OWVAR 42
32613: PUSH
32614: LD_INT 0
32616: ST_TO_ADDR
32617: GO 33239
32619: LD_INT 2
32621: DOUBLE
32622: EQUAL
32623: IFTRUE 32627
32625: GO 32638
32627: POP
// bc_type := b_warehouse ; 3 :
32628: LD_ADDR_OWVAR 42
32632: PUSH
32633: LD_INT 1
32635: ST_TO_ADDR
32636: GO 33239
32638: LD_INT 3
32640: DOUBLE
32641: EQUAL
32642: IFTRUE 32646
32644: GO 32657
32646: POP
// bc_type := b_lab ; 4 .. 9 :
32647: LD_ADDR_OWVAR 42
32651: PUSH
32652: LD_INT 6
32654: ST_TO_ADDR
32655: GO 33239
32657: LD_INT 4
32659: DOUBLE
32660: GREATEREQUAL
32661: IFFALSE 32669
32663: LD_INT 9
32665: DOUBLE
32666: LESSEQUAL
32667: IFTRUE 32671
32669: GO 32731
32671: POP
// begin bc_type := b_lab_half ;
32672: LD_ADDR_OWVAR 42
32676: PUSH
32677: LD_INT 7
32679: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32680: LD_ADDR_OWVAR 44
32684: PUSH
32685: LD_INT 10
32687: PUSH
32688: LD_INT 11
32690: PUSH
32691: LD_INT 12
32693: PUSH
32694: LD_INT 15
32696: PUSH
32697: LD_INT 14
32699: PUSH
32700: LD_INT 13
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: PUSH
32711: LD_VAR 0 2
32715: PUSH
32716: LD_INT 3
32718: MINUS
32719: ARRAY
32720: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32721: LD_ADDR_OWVAR 45
32725: PUSH
32726: LD_INT 9
32728: ST_TO_ADDR
// end ; 10 .. 13 :
32729: GO 33239
32731: LD_INT 10
32733: DOUBLE
32734: GREATEREQUAL
32735: IFFALSE 32743
32737: LD_INT 13
32739: DOUBLE
32740: LESSEQUAL
32741: IFTRUE 32745
32743: GO 32822
32745: POP
// begin bc_type := b_lab_full ;
32746: LD_ADDR_OWVAR 42
32750: PUSH
32751: LD_INT 8
32753: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32754: LD_ADDR_OWVAR 44
32758: PUSH
32759: LD_INT 10
32761: PUSH
32762: LD_INT 12
32764: PUSH
32765: LD_INT 14
32767: PUSH
32768: LD_INT 13
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: PUSH
32777: LD_VAR 0 2
32781: PUSH
32782: LD_INT 9
32784: MINUS
32785: ARRAY
32786: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32787: LD_ADDR_OWVAR 45
32791: PUSH
32792: LD_INT 11
32794: PUSH
32795: LD_INT 15
32797: PUSH
32798: LD_INT 12
32800: PUSH
32801: LD_INT 15
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: PUSH
32810: LD_VAR 0 2
32814: PUSH
32815: LD_INT 9
32817: MINUS
32818: ARRAY
32819: ST_TO_ADDR
// end ; 14 :
32820: GO 33239
32822: LD_INT 14
32824: DOUBLE
32825: EQUAL
32826: IFTRUE 32830
32828: GO 32841
32830: POP
// bc_type := b_workshop ; 15 :
32831: LD_ADDR_OWVAR 42
32835: PUSH
32836: LD_INT 2
32838: ST_TO_ADDR
32839: GO 33239
32841: LD_INT 15
32843: DOUBLE
32844: EQUAL
32845: IFTRUE 32849
32847: GO 32860
32849: POP
// bc_type := b_factory ; 16 :
32850: LD_ADDR_OWVAR 42
32854: PUSH
32855: LD_INT 3
32857: ST_TO_ADDR
32858: GO 33239
32860: LD_INT 16
32862: DOUBLE
32863: EQUAL
32864: IFTRUE 32868
32866: GO 32879
32868: POP
// bc_type := b_ext_gun ; 17 :
32869: LD_ADDR_OWVAR 42
32873: PUSH
32874: LD_INT 17
32876: ST_TO_ADDR
32877: GO 33239
32879: LD_INT 17
32881: DOUBLE
32882: EQUAL
32883: IFTRUE 32887
32885: GO 32915
32887: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32888: LD_ADDR_OWVAR 42
32892: PUSH
32893: LD_INT 19
32895: PUSH
32896: LD_INT 23
32898: PUSH
32899: LD_INT 19
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: LIST
32906: PUSH
32907: LD_VAR 0 1
32911: ARRAY
32912: ST_TO_ADDR
32913: GO 33239
32915: LD_INT 18
32917: DOUBLE
32918: EQUAL
32919: IFTRUE 32923
32921: GO 32934
32923: POP
// bc_type := b_ext_radar ; 19 :
32924: LD_ADDR_OWVAR 42
32928: PUSH
32929: LD_INT 20
32931: ST_TO_ADDR
32932: GO 33239
32934: LD_INT 19
32936: DOUBLE
32937: EQUAL
32938: IFTRUE 32942
32940: GO 32953
32942: POP
// bc_type := b_ext_radio ; 20 :
32943: LD_ADDR_OWVAR 42
32947: PUSH
32948: LD_INT 22
32950: ST_TO_ADDR
32951: GO 33239
32953: LD_INT 20
32955: DOUBLE
32956: EQUAL
32957: IFTRUE 32961
32959: GO 32972
32961: POP
// bc_type := b_ext_siberium ; 21 :
32962: LD_ADDR_OWVAR 42
32966: PUSH
32967: LD_INT 21
32969: ST_TO_ADDR
32970: GO 33239
32972: LD_INT 21
32974: DOUBLE
32975: EQUAL
32976: IFTRUE 32980
32978: GO 32991
32980: POP
// bc_type := b_ext_computer ; 22 :
32981: LD_ADDR_OWVAR 42
32985: PUSH
32986: LD_INT 24
32988: ST_TO_ADDR
32989: GO 33239
32991: LD_INT 22
32993: DOUBLE
32994: EQUAL
32995: IFTRUE 32999
32997: GO 33010
32999: POP
// bc_type := b_ext_track ; 23 :
33000: LD_ADDR_OWVAR 42
33004: PUSH
33005: LD_INT 16
33007: ST_TO_ADDR
33008: GO 33239
33010: LD_INT 23
33012: DOUBLE
33013: EQUAL
33014: IFTRUE 33018
33016: GO 33029
33018: POP
// bc_type := b_ext_laser ; 24 :
33019: LD_ADDR_OWVAR 42
33023: PUSH
33024: LD_INT 25
33026: ST_TO_ADDR
33027: GO 33239
33029: LD_INT 24
33031: DOUBLE
33032: EQUAL
33033: IFTRUE 33037
33035: GO 33048
33037: POP
// bc_type := b_control_tower ; 25 :
33038: LD_ADDR_OWVAR 42
33042: PUSH
33043: LD_INT 36
33045: ST_TO_ADDR
33046: GO 33239
33048: LD_INT 25
33050: DOUBLE
33051: EQUAL
33052: IFTRUE 33056
33054: GO 33067
33056: POP
// bc_type := b_breastwork ; 26 :
33057: LD_ADDR_OWVAR 42
33061: PUSH
33062: LD_INT 31
33064: ST_TO_ADDR
33065: GO 33239
33067: LD_INT 26
33069: DOUBLE
33070: EQUAL
33071: IFTRUE 33075
33073: GO 33086
33075: POP
// bc_type := b_bunker ; 27 :
33076: LD_ADDR_OWVAR 42
33080: PUSH
33081: LD_INT 32
33083: ST_TO_ADDR
33084: GO 33239
33086: LD_INT 27
33088: DOUBLE
33089: EQUAL
33090: IFTRUE 33094
33092: GO 33105
33094: POP
// bc_type := b_turret ; 28 :
33095: LD_ADDR_OWVAR 42
33099: PUSH
33100: LD_INT 33
33102: ST_TO_ADDR
33103: GO 33239
33105: LD_INT 28
33107: DOUBLE
33108: EQUAL
33109: IFTRUE 33113
33111: GO 33124
33113: POP
// bc_type := b_armoury ; 29 :
33114: LD_ADDR_OWVAR 42
33118: PUSH
33119: LD_INT 4
33121: ST_TO_ADDR
33122: GO 33239
33124: LD_INT 29
33126: DOUBLE
33127: EQUAL
33128: IFTRUE 33132
33130: GO 33143
33132: POP
// bc_type := b_barracks ; 30 :
33133: LD_ADDR_OWVAR 42
33137: PUSH
33138: LD_INT 5
33140: ST_TO_ADDR
33141: GO 33239
33143: LD_INT 30
33145: DOUBLE
33146: EQUAL
33147: IFTRUE 33151
33149: GO 33162
33151: POP
// bc_type := b_solar_power ; 31 :
33152: LD_ADDR_OWVAR 42
33156: PUSH
33157: LD_INT 27
33159: ST_TO_ADDR
33160: GO 33239
33162: LD_INT 31
33164: DOUBLE
33165: EQUAL
33166: IFTRUE 33170
33168: GO 33181
33170: POP
// bc_type := b_oil_power ; 32 :
33171: LD_ADDR_OWVAR 42
33175: PUSH
33176: LD_INT 26
33178: ST_TO_ADDR
33179: GO 33239
33181: LD_INT 32
33183: DOUBLE
33184: EQUAL
33185: IFTRUE 33189
33187: GO 33200
33189: POP
// bc_type := b_siberite_power ; 33 :
33190: LD_ADDR_OWVAR 42
33194: PUSH
33195: LD_INT 28
33197: ST_TO_ADDR
33198: GO 33239
33200: LD_INT 33
33202: DOUBLE
33203: EQUAL
33204: IFTRUE 33208
33206: GO 33219
33208: POP
// bc_type := b_oil_mine ; 34 :
33209: LD_ADDR_OWVAR 42
33213: PUSH
33214: LD_INT 29
33216: ST_TO_ADDR
33217: GO 33239
33219: LD_INT 34
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33227
33225: GO 33238
33227: POP
// bc_type := b_siberite_mine ; end ;
33228: LD_ADDR_OWVAR 42
33232: PUSH
33233: LD_INT 30
33235: ST_TO_ADDR
33236: GO 33239
33238: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33239: LD_ADDR_VAR 0 8
33243: PUSH
33244: LD_VAR 0 5
33248: PPUSH
33249: LD_VAR 0 6
33253: PPUSH
33254: LD_VAR 0 3
33258: PPUSH
33259: CALL_OW 47
33263: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33264: LD_OWVAR 42
33268: PUSH
33269: LD_INT 32
33271: PUSH
33272: LD_INT 33
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: IN
33279: IFFALSE 33295
// PlaceWeaponTurret ( b , weapon ) ;
33281: LD_VAR 0 8
33285: PPUSH
33286: LD_VAR 0 4
33290: PPUSH
33291: CALL_OW 431
// end ;
33295: LD_VAR 0 7
33299: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33300: LD_INT 0
33302: PPUSH
33303: PPUSH
33304: PPUSH
33305: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33306: LD_ADDR_VAR 0 4
33310: PUSH
33311: LD_INT 22
33313: PUSH
33314: LD_OWVAR 2
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 2
33325: PUSH
33326: LD_INT 30
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 30
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: LIST
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PPUSH
33355: CALL_OW 69
33359: ST_TO_ADDR
// if not tmp then
33360: LD_VAR 0 4
33364: NOT
33365: IFFALSE 33369
// exit ;
33367: GO 33428
// for i in tmp do
33369: LD_ADDR_VAR 0 2
33373: PUSH
33374: LD_VAR 0 4
33378: PUSH
33379: FOR_IN
33380: IFFALSE 33426
// for j = 1 to 3 do
33382: LD_ADDR_VAR 0 3
33386: PUSH
33387: DOUBLE
33388: LD_INT 1
33390: DEC
33391: ST_TO_ADDR
33392: LD_INT 3
33394: PUSH
33395: FOR_TO
33396: IFFALSE 33422
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33398: LD_VAR 0 2
33402: PPUSH
33403: CALL_OW 274
33407: PPUSH
33408: LD_VAR 0 3
33412: PPUSH
33413: LD_INT 99999
33415: PPUSH
33416: CALL_OW 277
33420: GO 33395
33422: POP
33423: POP
33424: GO 33379
33426: POP
33427: POP
// end ;
33428: LD_VAR 0 1
33432: RET
// export function hHackSetLevel10 ; var i , j ; begin
33433: LD_INT 0
33435: PPUSH
33436: PPUSH
33437: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33438: LD_ADDR_VAR 0 2
33442: PUSH
33443: LD_INT 21
33445: PUSH
33446: LD_INT 1
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PPUSH
33453: CALL_OW 69
33457: PUSH
33458: FOR_IN
33459: IFFALSE 33511
// if IsSelected ( i ) then
33461: LD_VAR 0 2
33465: PPUSH
33466: CALL_OW 306
33470: IFFALSE 33509
// begin for j := 1 to 4 do
33472: LD_ADDR_VAR 0 3
33476: PUSH
33477: DOUBLE
33478: LD_INT 1
33480: DEC
33481: ST_TO_ADDR
33482: LD_INT 4
33484: PUSH
33485: FOR_TO
33486: IFFALSE 33507
// SetSkill ( i , j , 10 ) ;
33488: LD_VAR 0 2
33492: PPUSH
33493: LD_VAR 0 3
33497: PPUSH
33498: LD_INT 10
33500: PPUSH
33501: CALL_OW 237
33505: GO 33485
33507: POP
33508: POP
// end ;
33509: GO 33458
33511: POP
33512: POP
// end ;
33513: LD_VAR 0 1
33517: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33518: LD_INT 0
33520: PPUSH
33521: PPUSH
33522: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33523: LD_ADDR_VAR 0 2
33527: PUSH
33528: LD_INT 22
33530: PUSH
33531: LD_OWVAR 2
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 21
33542: PUSH
33543: LD_INT 1
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PPUSH
33554: CALL_OW 69
33558: PUSH
33559: FOR_IN
33560: IFFALSE 33601
// begin for j := 1 to 4 do
33562: LD_ADDR_VAR 0 3
33566: PUSH
33567: DOUBLE
33568: LD_INT 1
33570: DEC
33571: ST_TO_ADDR
33572: LD_INT 4
33574: PUSH
33575: FOR_TO
33576: IFFALSE 33597
// SetSkill ( i , j , 10 ) ;
33578: LD_VAR 0 2
33582: PPUSH
33583: LD_VAR 0 3
33587: PPUSH
33588: LD_INT 10
33590: PPUSH
33591: CALL_OW 237
33595: GO 33575
33597: POP
33598: POP
// end ;
33599: GO 33559
33601: POP
33602: POP
// end ;
33603: LD_VAR 0 1
33607: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33608: LD_INT 0
33610: PPUSH
// uc_side := your_side ;
33611: LD_ADDR_OWVAR 20
33615: PUSH
33616: LD_OWVAR 2
33620: ST_TO_ADDR
// uc_nation := nation ;
33621: LD_ADDR_OWVAR 21
33625: PUSH
33626: LD_VAR 0 1
33630: ST_TO_ADDR
// InitHc ;
33631: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33635: LD_INT 0
33637: PPUSH
33638: LD_VAR 0 2
33642: PPUSH
33643: LD_VAR 0 3
33647: PPUSH
33648: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33652: LD_VAR 0 4
33656: PPUSH
33657: LD_VAR 0 5
33661: PPUSH
33662: CALL_OW 428
33666: PUSH
33667: LD_INT 0
33669: EQUAL
33670: IFFALSE 33694
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33672: CALL_OW 44
33676: PPUSH
33677: LD_VAR 0 4
33681: PPUSH
33682: LD_VAR 0 5
33686: PPUSH
33687: LD_INT 1
33689: PPUSH
33690: CALL_OW 48
// end ;
33694: LD_VAR 0 6
33698: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33699: LD_INT 0
33701: PPUSH
33702: PPUSH
// uc_side := your_side ;
33703: LD_ADDR_OWVAR 20
33707: PUSH
33708: LD_OWVAR 2
33712: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33713: LD_VAR 0 1
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: LD_INT 2
33723: PUSH
33724: LD_INT 3
33726: PUSH
33727: LD_INT 4
33729: PUSH
33730: LD_INT 5
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: IN
33740: IFFALSE 33752
// uc_nation := nation_american else
33742: LD_ADDR_OWVAR 21
33746: PUSH
33747: LD_INT 1
33749: ST_TO_ADDR
33750: GO 33795
// if chassis in [ 11 , 12 , 13 , 14 ] then
33752: LD_VAR 0 1
33756: PUSH
33757: LD_INT 11
33759: PUSH
33760: LD_INT 12
33762: PUSH
33763: LD_INT 13
33765: PUSH
33766: LD_INT 14
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: IN
33775: IFFALSE 33787
// uc_nation := nation_arabian else
33777: LD_ADDR_OWVAR 21
33781: PUSH
33782: LD_INT 2
33784: ST_TO_ADDR
33785: GO 33795
// uc_nation := nation_russian ;
33787: LD_ADDR_OWVAR 21
33791: PUSH
33792: LD_INT 3
33794: ST_TO_ADDR
// vc_chassis := chassis ;
33795: LD_ADDR_OWVAR 37
33799: PUSH
33800: LD_VAR 0 1
33804: ST_TO_ADDR
// vc_engine := engine ;
33805: LD_ADDR_OWVAR 39
33809: PUSH
33810: LD_VAR 0 2
33814: ST_TO_ADDR
// vc_control := control ;
33815: LD_ADDR_OWVAR 38
33819: PUSH
33820: LD_VAR 0 3
33824: ST_TO_ADDR
// vc_weapon := weapon ;
33825: LD_ADDR_OWVAR 40
33829: PUSH
33830: LD_VAR 0 4
33834: ST_TO_ADDR
// un := CreateVehicle ;
33835: LD_ADDR_VAR 0 8
33839: PUSH
33840: CALL_OW 45
33844: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33845: LD_VAR 0 8
33849: PPUSH
33850: LD_INT 0
33852: PPUSH
33853: LD_INT 5
33855: PPUSH
33856: CALL_OW 12
33860: PPUSH
33861: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33865: LD_VAR 0 8
33869: PPUSH
33870: LD_VAR 0 5
33874: PPUSH
33875: LD_VAR 0 6
33879: PPUSH
33880: LD_INT 1
33882: PPUSH
33883: CALL_OW 48
// end ;
33887: LD_VAR 0 7
33891: RET
// export hInvincible ; every 1 do
33892: GO 33894
33894: DISABLE
// hInvincible := [ ] ;
33895: LD_ADDR_EXP 111
33899: PUSH
33900: EMPTY
33901: ST_TO_ADDR
33902: END
// every 10 do var i ;
33903: GO 33905
33905: DISABLE
33906: LD_INT 0
33908: PPUSH
// begin enable ;
33909: ENABLE
// if not hInvincible then
33910: LD_EXP 111
33914: NOT
33915: IFFALSE 33919
// exit ;
33917: GO 33963
// for i in hInvincible do
33919: LD_ADDR_VAR 0 1
33923: PUSH
33924: LD_EXP 111
33928: PUSH
33929: FOR_IN
33930: IFFALSE 33961
// if GetLives ( i ) < 1000 then
33932: LD_VAR 0 1
33936: PPUSH
33937: CALL_OW 256
33941: PUSH
33942: LD_INT 1000
33944: LESS
33945: IFFALSE 33959
// SetLives ( i , 1000 ) ;
33947: LD_VAR 0 1
33951: PPUSH
33952: LD_INT 1000
33954: PPUSH
33955: CALL_OW 234
33959: GO 33929
33961: POP
33962: POP
// end ;
33963: PPOPN 1
33965: END
// export function hHackInvincible ; var i ; begin
33966: LD_INT 0
33968: PPUSH
33969: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33970: LD_ADDR_VAR 0 2
33974: PUSH
33975: LD_INT 2
33977: PUSH
33978: LD_INT 21
33980: PUSH
33981: LD_INT 1
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 21
33990: PUSH
33991: LD_INT 2
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: LIST
34002: PPUSH
34003: CALL_OW 69
34007: PUSH
34008: FOR_IN
34009: IFFALSE 34070
// if IsSelected ( i ) then
34011: LD_VAR 0 2
34015: PPUSH
34016: CALL_OW 306
34020: IFFALSE 34068
// begin if i in hInvincible then
34022: LD_VAR 0 2
34026: PUSH
34027: LD_EXP 111
34031: IN
34032: IFFALSE 34052
// hInvincible := hInvincible diff i else
34034: LD_ADDR_EXP 111
34038: PUSH
34039: LD_EXP 111
34043: PUSH
34044: LD_VAR 0 2
34048: DIFF
34049: ST_TO_ADDR
34050: GO 34068
// hInvincible := hInvincible union i ;
34052: LD_ADDR_EXP 111
34056: PUSH
34057: LD_EXP 111
34061: PUSH
34062: LD_VAR 0 2
34066: UNION
34067: ST_TO_ADDR
// end ;
34068: GO 34008
34070: POP
34071: POP
// end ;
34072: LD_VAR 0 1
34076: RET
// export function hHackInvisible ; var i , j ; begin
34077: LD_INT 0
34079: PPUSH
34080: PPUSH
34081: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34082: LD_ADDR_VAR 0 2
34086: PUSH
34087: LD_INT 21
34089: PUSH
34090: LD_INT 1
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PPUSH
34097: CALL_OW 69
34101: PUSH
34102: FOR_IN
34103: IFFALSE 34127
// if IsSelected ( i ) then
34105: LD_VAR 0 2
34109: PPUSH
34110: CALL_OW 306
34114: IFFALSE 34125
// ComForceInvisible ( i ) ;
34116: LD_VAR 0 2
34120: PPUSH
34121: CALL_OW 496
34125: GO 34102
34127: POP
34128: POP
// end ;
34129: LD_VAR 0 1
34133: RET
// export function hHackChangeYourSide ; begin
34134: LD_INT 0
34136: PPUSH
// if your_side = 8 then
34137: LD_OWVAR 2
34141: PUSH
34142: LD_INT 8
34144: EQUAL
34145: IFFALSE 34157
// your_side := 0 else
34147: LD_ADDR_OWVAR 2
34151: PUSH
34152: LD_INT 0
34154: ST_TO_ADDR
34155: GO 34171
// your_side := your_side + 1 ;
34157: LD_ADDR_OWVAR 2
34161: PUSH
34162: LD_OWVAR 2
34166: PUSH
34167: LD_INT 1
34169: PLUS
34170: ST_TO_ADDR
// end ;
34171: LD_VAR 0 1
34175: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34176: LD_INT 0
34178: PPUSH
34179: PPUSH
34180: PPUSH
// for i in all_units do
34181: LD_ADDR_VAR 0 2
34185: PUSH
34186: LD_OWVAR 3
34190: PUSH
34191: FOR_IN
34192: IFFALSE 34270
// if IsSelected ( i ) then
34194: LD_VAR 0 2
34198: PPUSH
34199: CALL_OW 306
34203: IFFALSE 34268
// begin j := GetSide ( i ) ;
34205: LD_ADDR_VAR 0 3
34209: PUSH
34210: LD_VAR 0 2
34214: PPUSH
34215: CALL_OW 255
34219: ST_TO_ADDR
// if j = 8 then
34220: LD_VAR 0 3
34224: PUSH
34225: LD_INT 8
34227: EQUAL
34228: IFFALSE 34240
// j := 0 else
34230: LD_ADDR_VAR 0 3
34234: PUSH
34235: LD_INT 0
34237: ST_TO_ADDR
34238: GO 34254
// j := j + 1 ;
34240: LD_ADDR_VAR 0 3
34244: PUSH
34245: LD_VAR 0 3
34249: PUSH
34250: LD_INT 1
34252: PLUS
34253: ST_TO_ADDR
// SetSide ( i , j ) ;
34254: LD_VAR 0 2
34258: PPUSH
34259: LD_VAR 0 3
34263: PPUSH
34264: CALL_OW 235
// end ;
34268: GO 34191
34270: POP
34271: POP
// end ;
34272: LD_VAR 0 1
34276: RET
// export function hHackFog ; begin
34277: LD_INT 0
34279: PPUSH
// FogOff ( true ) ;
34280: LD_INT 1
34282: PPUSH
34283: CALL_OW 344
// end ;
34287: LD_VAR 0 1
34291: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34292: LD_INT 0
34294: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34295: LD_VAR 0 1
34299: PPUSH
34300: LD_VAR 0 2
34304: PPUSH
34305: LD_VAR 0 3
34309: PPUSH
34310: LD_INT 1
34312: PPUSH
34313: LD_INT 1
34315: PPUSH
34316: CALL_OW 483
// CenterOnXY ( x , y ) ;
34320: LD_VAR 0 2
34324: PPUSH
34325: LD_VAR 0 3
34329: PPUSH
34330: CALL_OW 84
// end ;
34334: LD_VAR 0 4
34338: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34339: LD_INT 0
34341: PPUSH
34342: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34343: LD_VAR 0 1
34347: NOT
34348: IFTRUE 34367
34350: PUSH
34351: LD_VAR 0 2
34355: PPUSH
34356: LD_VAR 0 3
34360: PPUSH
34361: CALL_OW 488
34365: NOT
34366: OR
34367: IFTRUE 34402
34369: PUSH
34370: LD_VAR 0 1
34374: PPUSH
34375: CALL_OW 266
34379: PUSH
34380: LD_INT 3
34382: NONEQUAL
34383: IFFALSE 34401
34385: PUSH
34386: LD_VAR 0 1
34390: PPUSH
34391: CALL_OW 247
34395: PUSH
34396: LD_INT 1
34398: EQUAL
34399: NOT
34400: AND
34401: OR
34402: IFFALSE 34406
// exit ;
34404: GO 34688
// if GetType ( factory ) = unit_human then
34406: LD_VAR 0 1
34410: PPUSH
34411: CALL_OW 247
34415: PUSH
34416: LD_INT 1
34418: EQUAL
34419: IFFALSE 34436
// factory := IsInUnit ( factory ) ;
34421: LD_ADDR_VAR 0 1
34425: PUSH
34426: LD_VAR 0 1
34430: PPUSH
34431: CALL_OW 310
34435: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34436: LD_VAR 0 1
34440: PPUSH
34441: CALL_OW 266
34445: PUSH
34446: LD_INT 3
34448: NONEQUAL
34449: IFFALSE 34453
// exit ;
34451: GO 34688
// for i := 1 to Count ( factoryWaypoints ) do
34453: LD_ADDR_VAR 0 5
34457: PUSH
34458: DOUBLE
34459: LD_INT 1
34461: DEC
34462: ST_TO_ADDR
34463: LD_EXP 112
34467: PPUSH
34468: CALL 43420 0 1
34472: PUSH
34473: FOR_TO
34474: IFFALSE 34636
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34476: LD_VAR 0 2
34480: PPUSH
34481: LD_VAR 0 3
34485: PPUSH
34486: CALL_OW 428
34490: PUSH
34491: LD_EXP 112
34495: PUSH
34496: LD_VAR 0 5
34500: ARRAY
34501: PUSH
34502: LD_INT 2
34504: ARRAY
34505: EQUAL
34506: IFFALSE 34538
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34508: LD_ADDR_EXP 112
34512: PUSH
34513: LD_EXP 112
34517: PPUSH
34518: LD_VAR 0 5
34522: PPUSH
34523: CALL_OW 3
34527: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34528: CALL 34693 0 0
// exit ;
34532: POP
34533: POP
34534: GO 34688
// end else
34536: GO 34634
// if factory = factoryWaypoints [ i ] [ 2 ] then
34538: LD_VAR 0 1
34542: PUSH
34543: LD_EXP 112
34547: PUSH
34548: LD_VAR 0 5
34552: ARRAY
34553: PUSH
34554: LD_INT 2
34556: ARRAY
34557: EQUAL
34558: IFFALSE 34634
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34560: LD_ADDR_EXP 112
34564: PUSH
34565: LD_EXP 112
34569: PPUSH
34570: LD_VAR 0 5
34574: PPUSH
34575: CALL_OW 3
34579: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34580: LD_ADDR_EXP 112
34584: PUSH
34585: LD_EXP 112
34589: PPUSH
34590: LD_VAR 0 1
34594: PPUSH
34595: CALL_OW 255
34599: PUSH
34600: LD_VAR 0 1
34604: PUSH
34605: LD_VAR 0 2
34609: PUSH
34610: LD_VAR 0 3
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: PPUSH
34621: CALL 79352 0 2
34625: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34626: CALL 34693 0 0
// exit ;
34630: POP
34631: POP
34632: GO 34688
// end ; end ;
34634: GO 34473
34636: POP
34637: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34638: LD_ADDR_EXP 112
34642: PUSH
34643: LD_EXP 112
34647: PPUSH
34648: LD_VAR 0 1
34652: PPUSH
34653: CALL_OW 255
34657: PUSH
34658: LD_VAR 0 1
34662: PUSH
34663: LD_VAR 0 2
34667: PUSH
34668: LD_VAR 0 3
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: PPUSH
34679: CALL 79352 0 2
34683: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34684: CALL 34693 0 0
// end ;
34688: LD_VAR 0 4
34692: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34693: LD_INT 0
34695: PPUSH
34696: PPUSH
34697: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34698: LD_STRING resetFactoryWaypoint();
34700: PPUSH
34701: CALL_OW 559
// if factoryWaypoints then
34705: LD_EXP 112
34709: IFFALSE 34830
// begin list := factoryWaypoints ;
34711: LD_ADDR_VAR 0 3
34715: PUSH
34716: LD_EXP 112
34720: ST_TO_ADDR
// for i := 1 to list do
34721: LD_ADDR_VAR 0 2
34725: PUSH
34726: DOUBLE
34727: LD_INT 1
34729: DEC
34730: ST_TO_ADDR
34731: LD_VAR 0 3
34735: PUSH
34736: FOR_TO
34737: IFFALSE 34828
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34739: LD_STRING setFactoryWaypointXY(
34741: PUSH
34742: LD_VAR 0 3
34746: PUSH
34747: LD_VAR 0 2
34751: ARRAY
34752: PUSH
34753: LD_INT 1
34755: ARRAY
34756: STR
34757: PUSH
34758: LD_STRING ,
34760: STR
34761: PUSH
34762: LD_VAR 0 3
34766: PUSH
34767: LD_VAR 0 2
34771: ARRAY
34772: PUSH
34773: LD_INT 2
34775: ARRAY
34776: STR
34777: PUSH
34778: LD_STRING ,
34780: STR
34781: PUSH
34782: LD_VAR 0 3
34786: PUSH
34787: LD_VAR 0 2
34791: ARRAY
34792: PUSH
34793: LD_INT 3
34795: ARRAY
34796: STR
34797: PUSH
34798: LD_STRING ,
34800: STR
34801: PUSH
34802: LD_VAR 0 3
34806: PUSH
34807: LD_VAR 0 2
34811: ARRAY
34812: PUSH
34813: LD_INT 4
34815: ARRAY
34816: STR
34817: PUSH
34818: LD_STRING )
34820: STR
34821: PPUSH
34822: CALL_OW 559
34826: GO 34736
34828: POP
34829: POP
// end ; end ;
34830: LD_VAR 0 1
34834: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34835: LD_INT 0
34837: PPUSH
// if HexInfo ( x , y ) = warehouse then
34838: LD_VAR 0 2
34842: PPUSH
34843: LD_VAR 0 3
34847: PPUSH
34848: CALL_OW 428
34852: PUSH
34853: LD_VAR 0 1
34857: EQUAL
34858: IFFALSE 34885
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34860: LD_ADDR_EXP 114
34864: PUSH
34865: LD_EXP 114
34869: PPUSH
34870: LD_VAR 0 1
34874: PPUSH
34875: LD_INT 0
34877: PPUSH
34878: CALL_OW 1
34882: ST_TO_ADDR
34883: GO 34936
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34885: LD_ADDR_EXP 114
34889: PUSH
34890: LD_EXP 114
34894: PPUSH
34895: LD_VAR 0 1
34899: PPUSH
34900: LD_VAR 0 1
34904: PPUSH
34905: CALL_OW 255
34909: PUSH
34910: LD_VAR 0 1
34914: PUSH
34915: LD_VAR 0 2
34919: PUSH
34920: LD_VAR 0 3
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: PPUSH
34931: CALL_OW 1
34935: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34936: CALL 34945 0 0
// end ;
34940: LD_VAR 0 4
34944: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34945: LD_INT 0
34947: PPUSH
34948: PPUSH
34949: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34950: LD_STRING resetWarehouseGatheringPoints();
34952: PPUSH
34953: CALL_OW 559
// if warehouseGatheringPoints then
34957: LD_EXP 114
34961: IFFALSE 35087
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34963: LD_ADDR_VAR 0 3
34967: PUSH
34968: LD_EXP 114
34972: PPUSH
34973: CALL 83286 0 1
34977: ST_TO_ADDR
// for i := 1 to list do
34978: LD_ADDR_VAR 0 2
34982: PUSH
34983: DOUBLE
34984: LD_INT 1
34986: DEC
34987: ST_TO_ADDR
34988: LD_VAR 0 3
34992: PUSH
34993: FOR_TO
34994: IFFALSE 35085
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34996: LD_STRING setWarehouseGatheringPointXY(
34998: PUSH
34999: LD_VAR 0 3
35003: PUSH
35004: LD_VAR 0 2
35008: ARRAY
35009: PUSH
35010: LD_INT 1
35012: ARRAY
35013: STR
35014: PUSH
35015: LD_STRING ,
35017: STR
35018: PUSH
35019: LD_VAR 0 3
35023: PUSH
35024: LD_VAR 0 2
35028: ARRAY
35029: PUSH
35030: LD_INT 2
35032: ARRAY
35033: STR
35034: PUSH
35035: LD_STRING ,
35037: STR
35038: PUSH
35039: LD_VAR 0 3
35043: PUSH
35044: LD_VAR 0 2
35048: ARRAY
35049: PUSH
35050: LD_INT 3
35052: ARRAY
35053: STR
35054: PUSH
35055: LD_STRING ,
35057: STR
35058: PUSH
35059: LD_VAR 0 3
35063: PUSH
35064: LD_VAR 0 2
35068: ARRAY
35069: PUSH
35070: LD_INT 4
35072: ARRAY
35073: STR
35074: PUSH
35075: LD_STRING )
35077: STR
35078: PPUSH
35079: CALL_OW 559
35083: GO 34993
35085: POP
35086: POP
// end ; end ;
35087: LD_VAR 0 1
35091: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35092: LD_EXP 114
35096: IFFALSE 35791
35098: GO 35100
35100: DISABLE
35101: LD_INT 0
35103: PPUSH
35104: PPUSH
35105: PPUSH
35106: PPUSH
35107: PPUSH
35108: PPUSH
35109: PPUSH
35110: PPUSH
35111: PPUSH
// begin enable ;
35112: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35113: LD_ADDR_VAR 0 3
35117: PUSH
35118: LD_EXP 114
35122: PPUSH
35123: CALL 83286 0 1
35127: ST_TO_ADDR
// if not list then
35128: LD_VAR 0 3
35132: NOT
35133: IFFALSE 35137
// exit ;
35135: GO 35791
// for i := 1 to list do
35137: LD_ADDR_VAR 0 1
35141: PUSH
35142: DOUBLE
35143: LD_INT 1
35145: DEC
35146: ST_TO_ADDR
35147: LD_VAR 0 3
35151: PUSH
35152: FOR_TO
35153: IFFALSE 35789
// begin depot := list [ i ] [ 2 ] ;
35155: LD_ADDR_VAR 0 8
35159: PUSH
35160: LD_VAR 0 3
35164: PUSH
35165: LD_VAR 0 1
35169: ARRAY
35170: PUSH
35171: LD_INT 2
35173: ARRAY
35174: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35175: LD_ADDR_VAR 0 5
35179: PUSH
35180: LD_VAR 0 3
35184: PUSH
35185: LD_VAR 0 1
35189: ARRAY
35190: PUSH
35191: LD_INT 1
35193: ARRAY
35194: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35195: LD_VAR 0 8
35199: PPUSH
35200: CALL_OW 301
35204: IFTRUE 35223
35206: PUSH
35207: LD_VAR 0 5
35211: PUSH
35212: LD_VAR 0 8
35216: PPUSH
35217: CALL_OW 255
35221: NONEQUAL
35222: OR
35223: IFFALSE 35252
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35225: LD_ADDR_EXP 114
35229: PUSH
35230: LD_EXP 114
35234: PPUSH
35235: LD_VAR 0 8
35239: PPUSH
35240: LD_INT 0
35242: PPUSH
35243: CALL_OW 1
35247: ST_TO_ADDR
// exit ;
35248: POP
35249: POP
35250: GO 35791
// end ; x := list [ i ] [ 3 ] ;
35252: LD_ADDR_VAR 0 6
35256: PUSH
35257: LD_VAR 0 3
35261: PUSH
35262: LD_VAR 0 1
35266: ARRAY
35267: PUSH
35268: LD_INT 3
35270: ARRAY
35271: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35272: LD_ADDR_VAR 0 7
35276: PUSH
35277: LD_VAR 0 3
35281: PUSH
35282: LD_VAR 0 1
35286: ARRAY
35287: PUSH
35288: LD_INT 4
35290: ARRAY
35291: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35292: LD_ADDR_VAR 0 9
35296: PUSH
35297: LD_VAR 0 6
35301: PPUSH
35302: LD_VAR 0 7
35306: PPUSH
35307: LD_INT 16
35309: PPUSH
35310: CALL 81860 0 3
35314: ST_TO_ADDR
// if not cratesNearbyPoint then
35315: LD_VAR 0 9
35319: NOT
35320: IFFALSE 35326
// exit ;
35322: POP
35323: POP
35324: GO 35791
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35326: LD_ADDR_VAR 0 4
35330: PUSH
35331: LD_INT 22
35333: PUSH
35334: LD_VAR 0 5
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 3
35345: PUSH
35346: LD_INT 60
35348: PUSH
35349: EMPTY
35350: LIST
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 91
35358: PUSH
35359: LD_VAR 0 8
35363: PUSH
35364: LD_INT 6
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 2
35374: PUSH
35375: LD_INT 25
35377: PUSH
35378: LD_INT 2
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 25
35387: PUSH
35388: LD_INT 16
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: LIST
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: PPUSH
35406: CALL_OW 69
35410: PUSH
35411: LD_VAR 0 8
35415: PPUSH
35416: CALL_OW 313
35420: PPUSH
35421: LD_INT 3
35423: PUSH
35424: LD_INT 60
35426: PUSH
35427: EMPTY
35428: LIST
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: LD_INT 25
35439: PUSH
35440: LD_INT 2
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 25
35449: PUSH
35450: LD_INT 16
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PPUSH
35466: CALL_OW 72
35470: UNION
35471: ST_TO_ADDR
// if tmp then
35472: LD_VAR 0 4
35476: IFFALSE 35556
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35478: LD_ADDR_VAR 0 4
35482: PUSH
35483: LD_VAR 0 4
35487: PPUSH
35488: LD_INT 3
35490: PPUSH
35491: CALL 79667 0 2
35495: ST_TO_ADDR
// for j in tmp do
35496: LD_ADDR_VAR 0 2
35500: PUSH
35501: LD_VAR 0 4
35505: PUSH
35506: FOR_IN
35507: IFFALSE 35550
// begin if IsInUnit ( j ) then
35509: LD_VAR 0 2
35513: PPUSH
35514: CALL_OW 310
35518: IFFALSE 35529
// ComExit ( j ) ;
35520: LD_VAR 0 2
35524: PPUSH
35525: CALL 79750 0 1
// AddComCollect ( j , x , y ) ;
35529: LD_VAR 0 2
35533: PPUSH
35534: LD_VAR 0 6
35538: PPUSH
35539: LD_VAR 0 7
35543: PPUSH
35544: CALL_OW 177
// end ;
35548: GO 35506
35550: POP
35551: POP
// exit ;
35552: POP
35553: POP
35554: GO 35791
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35556: LD_ADDR_VAR 0 4
35560: PUSH
35561: LD_INT 22
35563: PUSH
35564: LD_VAR 0 5
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 91
35575: PUSH
35576: LD_VAR 0 8
35580: PUSH
35581: LD_INT 8
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 2
35591: PUSH
35592: LD_INT 34
35594: PUSH
35595: LD_INT 12
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 34
35604: PUSH
35605: LD_INT 51
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 34
35614: PUSH
35615: LD_INT 32
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 34
35624: PUSH
35625: LD_INT 89
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: LIST
35643: PPUSH
35644: CALL_OW 69
35648: ST_TO_ADDR
// if tmp then
35649: LD_VAR 0 4
35653: IFFALSE 35787
// begin for j in tmp do
35655: LD_ADDR_VAR 0 2
35659: PUSH
35660: LD_VAR 0 4
35664: PUSH
35665: FOR_IN
35666: IFFALSE 35785
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35668: LD_VAR 0 2
35672: PPUSH
35673: CALL_OW 262
35677: PUSH
35678: LD_INT 3
35680: EQUAL
35681: IFTRUE 35698
35683: PUSH
35684: LD_VAR 0 2
35688: PPUSH
35689: CALL_OW 261
35693: PUSH
35694: LD_INT 20
35696: GREATER
35697: OR
35698: IFFALSE 35712
35700: PUSH
35701: LD_VAR 0 2
35705: PPUSH
35706: CALL_OW 314
35710: NOT
35711: AND
35712: IFFALSE 35742
35714: PUSH
35715: LD_VAR 0 2
35719: PPUSH
35720: CALL_OW 263
35724: PUSH
35725: LD_INT 1
35727: NONEQUAL
35728: IFTRUE 35741
35730: PUSH
35731: LD_VAR 0 2
35735: PPUSH
35736: CALL_OW 311
35740: OR
35741: AND
35742: IFFALSE 35783
// begin ComCollect ( j , x , y ) ;
35744: LD_VAR 0 2
35748: PPUSH
35749: LD_VAR 0 6
35753: PPUSH
35754: LD_VAR 0 7
35758: PPUSH
35759: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35763: LD_VAR 0 2
35767: PPUSH
35768: LD_VAR 0 8
35772: PPUSH
35773: CALL_OW 172
// exit ;
35777: POP
35778: POP
35779: POP
35780: POP
35781: GO 35791
// end ;
35783: GO 35665
35785: POP
35786: POP
// end ; end ;
35787: GO 35152
35789: POP
35790: POP
// end ; end_of_file
35791: PPOPN 9
35793: END
// export function SOS_UnitDestroyed ( un ) ; begin
35794: LD_INT 0
35796: PPUSH
// ComRadiation ( un ) ;
35797: LD_VAR 0 1
35801: PPUSH
35802: CALL 36883 0 1
// end ;
35806: LD_VAR 0 2
35810: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35811: LD_INT 0
35813: PPUSH
// ComRadiation ( un ) ;
35814: LD_VAR 0 1
35818: PPUSH
35819: CALL 36883 0 1
// end ;
35823: LD_VAR 0 2
35827: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35828: LD_INT 0
35830: PPUSH
// end ;
35831: LD_VAR 0 4
35835: RET
// export function SOS_Command ( cmd ) ; begin
35836: LD_INT 0
35838: PPUSH
// end ;
35839: LD_VAR 0 2
35843: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35844: LD_INT 0
35846: PPUSH
// end ;
35847: LD_VAR 0 6
35851: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
35852: LD_INT 0
35854: PPUSH
35855: PPUSH
35856: PPUSH
35857: PPUSH
// if not vehicle or not factory then
35858: LD_VAR 0 1
35862: NOT
35863: IFTRUE 35872
35865: PUSH
35866: LD_VAR 0 2
35870: NOT
35871: OR
35872: IFFALSE 35876
// exit ;
35874: GO 36458
// if not factoryWaypoints then
35876: LD_EXP 112
35880: NOT
35881: IFFALSE 35885
// exit ;
35883: GO 36458
// for i := 1 to Count ( factoryWaypoints ) do
35885: LD_ADDR_VAR 0 4
35889: PUSH
35890: DOUBLE
35891: LD_INT 1
35893: DEC
35894: ST_TO_ADDR
35895: LD_EXP 112
35899: PPUSH
35900: CALL 43420 0 1
35904: PUSH
35905: FOR_TO
35906: IFFALSE 36456
// if factoryWaypoints [ i ] [ 2 ] = factory then
35908: LD_EXP 112
35912: PUSH
35913: LD_VAR 0 4
35917: ARRAY
35918: PUSH
35919: LD_INT 2
35921: ARRAY
35922: PUSH
35923: LD_VAR 0 2
35927: EQUAL
35928: IFFALSE 36454
// begin if GetControl ( vehicle ) = control_manual then
35930: LD_VAR 0 1
35934: PPUSH
35935: CALL_OW 263
35939: PUSH
35940: LD_INT 1
35942: EQUAL
35943: IFFALSE 36307
// begin driver := IsDrivenBy ( vehicle ) ;
35945: LD_ADDR_VAR 0 5
35949: PUSH
35950: LD_VAR 0 1
35954: PPUSH
35955: CALL_OW 311
35959: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
35960: LD_VAR 0 5
35964: PUSH
35965: LD_EXP 113
35969: IN
35970: IFTRUE 35984
35972: PUSH
35973: LD_VAR 0 1
35977: PUSH
35978: LD_EXP 113
35982: IN
35983: OR
35984: IFFALSE 35990
// exit ;
35986: POP
35987: POP
35988: GO 36458
// if not HasTask ( driver ) then
35990: LD_VAR 0 5
35994: PPUSH
35995: CALL_OW 314
35999: NOT
36000: IFFALSE 36305
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
36002: LD_ADDR_EXP 113
36006: PUSH
36007: LD_EXP 113
36011: PPUSH
36012: LD_VAR 0 5
36016: PPUSH
36017: CALL 79352 0 2
36021: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
36022: LD_ADDR_EXP 113
36026: PUSH
36027: LD_EXP 113
36031: PPUSH
36032: LD_VAR 0 1
36036: PPUSH
36037: CALL 79352 0 2
36041: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36042: LD_ADDR_VAR 0 6
36046: PUSH
36047: LD_EXP 112
36051: PUSH
36052: LD_VAR 0 4
36056: ARRAY
36057: PUSH
36058: LD_INT 3
36060: ARRAY
36061: PPUSH
36062: LD_EXP 112
36066: PUSH
36067: LD_VAR 0 4
36071: ARRAY
36072: PUSH
36073: LD_INT 4
36075: ARRAY
36076: PPUSH
36077: CALL_OW 428
36081: ST_TO_ADDR
// if hex then
36082: LD_VAR 0 6
36086: IFFALSE 36104
// ComMoveUnit ( driver , hex ) else
36088: LD_VAR 0 5
36092: PPUSH
36093: LD_VAR 0 6
36097: PPUSH
36098: CALL_OW 112
36102: GO 36188
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
36104: LD_VAR 0 1
36108: PPUSH
36109: LD_EXP 112
36113: PUSH
36114: LD_VAR 0 4
36118: ARRAY
36119: PUSH
36120: LD_INT 3
36122: ARRAY
36123: PPUSH
36124: LD_EXP 112
36128: PUSH
36129: LD_VAR 0 4
36133: ARRAY
36134: PUSH
36135: LD_INT 4
36137: ARRAY
36138: PPUSH
36139: CALL_OW 297
36143: PUSH
36144: LD_INT 0
36146: GREATER
36147: IFFALSE 36188
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36149: LD_VAR 0 5
36153: PPUSH
36154: LD_EXP 112
36158: PUSH
36159: LD_VAR 0 4
36163: ARRAY
36164: PUSH
36165: LD_INT 3
36167: ARRAY
36168: PPUSH
36169: LD_EXP 112
36173: PUSH
36174: LD_VAR 0 4
36178: ARRAY
36179: PUSH
36180: LD_INT 4
36182: ARRAY
36183: PPUSH
36184: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36188: LD_VAR 0 5
36192: PPUSH
36193: CALL_OW 181
// if Multiplayer then
36197: LD_OWVAR 4
36201: IFFALSE 36250
// begin repeat wait ( 10 ) ;
36203: LD_INT 10
36205: PPUSH
36206: CALL_OW 67
// until not IsInUnit ( driver ) ;
36210: LD_VAR 0 5
36214: PPUSH
36215: CALL_OW 310
36219: NOT
36220: IFFALSE 36203
// if not HasTask ( driver ) then
36222: LD_VAR 0 5
36226: PPUSH
36227: CALL_OW 314
36231: NOT
36232: IFFALSE 36248
// ComEnterUnit ( driver , factory ) ;
36234: LD_VAR 0 5
36238: PPUSH
36239: LD_VAR 0 2
36243: PPUSH
36244: CALL_OW 120
// end else
36248: GO 36264
// AddComEnterUnit ( driver , factory ) ;
36250: LD_VAR 0 5
36254: PPUSH
36255: LD_VAR 0 2
36259: PPUSH
36260: CALL_OW 180
// wait ( 0 0$1 ) ;
36264: LD_INT 35
36266: PPUSH
36267: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36271: LD_ADDR_EXP 113
36275: PUSH
36276: LD_EXP 113
36280: PUSH
36281: LD_VAR 0 5
36285: DIFF
36286: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36287: LD_ADDR_EXP 113
36291: PUSH
36292: LD_EXP 113
36296: PUSH
36297: LD_VAR 0 1
36301: DIFF
36302: ST_TO_ADDR
// break ;
36303: GO 36456
// end ; end else
36305: GO 36454
// if GetControl ( vehicle ) = control_remote then
36307: LD_VAR 0 1
36311: PPUSH
36312: CALL_OW 263
36316: PUSH
36317: LD_INT 2
36319: EQUAL
36320: IFFALSE 36406
// begin wait ( 0 0$2 ) ;
36322: LD_INT 70
36324: PPUSH
36325: CALL_OW 67
// repeat wait ( 10 ) ;
36329: LD_INT 10
36331: PPUSH
36332: CALL_OW 67
// Connect ( vehicle ) ;
36336: LD_VAR 0 1
36340: PPUSH
36341: CALL 49664 0 1
// until IsControledBy ( vehicle ) ;
36345: LD_VAR 0 1
36349: PPUSH
36350: CALL_OW 312
36354: IFFALSE 36329
// wait ( 10 ) ;
36356: LD_INT 10
36358: PPUSH
36359: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36363: LD_VAR 0 1
36367: PPUSH
36368: LD_EXP 112
36372: PUSH
36373: LD_VAR 0 4
36377: ARRAY
36378: PUSH
36379: LD_INT 3
36381: ARRAY
36382: PPUSH
36383: LD_EXP 112
36387: PUSH
36388: LD_VAR 0 4
36392: ARRAY
36393: PUSH
36394: LD_INT 4
36396: ARRAY
36397: PPUSH
36398: CALL_OW 111
// break ;
36402: GO 36456
// end else
36404: GO 36454
// begin wait ( 0 0$3 ) ;
36406: LD_INT 105
36408: PPUSH
36409: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36413: LD_VAR 0 1
36417: PPUSH
36418: LD_EXP 112
36422: PUSH
36423: LD_VAR 0 4
36427: ARRAY
36428: PUSH
36429: LD_INT 3
36431: ARRAY
36432: PPUSH
36433: LD_EXP 112
36437: PUSH
36438: LD_VAR 0 4
36442: ARRAY
36443: PUSH
36444: LD_INT 4
36446: ARRAY
36447: PPUSH
36448: CALL_OW 111
// break ;
36452: GO 36456
// end ; end ;
36454: GO 35905
36456: POP
36457: POP
// end ;
36458: LD_VAR 0 3
36462: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36463: LD_INT 0
36465: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36466: LD_VAR 0 1
36470: PUSH
36471: LD_INT 250
36473: EQUAL
36474: IFFALSE 36491
36476: PUSH
36477: LD_VAR 0 2
36481: PPUSH
36482: CALL_OW 264
36486: PUSH
36487: LD_INT 81
36489: EQUAL
36490: AND
36491: IFFALSE 36512
// MinerPlaceMine ( unit , x , y ) ;
36493: LD_VAR 0 2
36497: PPUSH
36498: LD_VAR 0 4
36502: PPUSH
36503: LD_VAR 0 5
36507: PPUSH
36508: CALL 39644 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36512: LD_VAR 0 1
36516: PUSH
36517: LD_INT 251
36519: EQUAL
36520: IFFALSE 36537
36522: PUSH
36523: LD_VAR 0 2
36527: PPUSH
36528: CALL_OW 264
36532: PUSH
36533: LD_INT 81
36535: EQUAL
36536: AND
36537: IFFALSE 36558
// MinerDetonateMine ( unit , x , y ) ;
36539: LD_VAR 0 2
36543: PPUSH
36544: LD_VAR 0 4
36548: PPUSH
36549: LD_VAR 0 5
36553: PPUSH
36554: CALL 39923 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36558: LD_VAR 0 1
36562: PUSH
36563: LD_INT 252
36565: EQUAL
36566: IFFALSE 36583
36568: PUSH
36569: LD_VAR 0 2
36573: PPUSH
36574: CALL_OW 264
36578: PUSH
36579: LD_INT 81
36581: EQUAL
36582: AND
36583: IFFALSE 36604
// MinerCreateMinefield ( unit , x , y ) ;
36585: LD_VAR 0 2
36589: PPUSH
36590: LD_VAR 0 4
36594: PPUSH
36595: LD_VAR 0 5
36599: PPUSH
36600: CALL 40342 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36604: LD_VAR 0 1
36608: PUSH
36609: LD_INT 253
36611: EQUAL
36612: IFFALSE 36629
36614: PUSH
36615: LD_VAR 0 2
36619: PPUSH
36620: CALL_OW 257
36624: PUSH
36625: LD_INT 5
36627: EQUAL
36628: AND
36629: IFFALSE 36650
// ComBinocular ( unit , x , y ) ;
36631: LD_VAR 0 2
36635: PPUSH
36636: LD_VAR 0 4
36640: PPUSH
36641: LD_VAR 0 5
36645: PPUSH
36646: CALL 40717 0 3
// if selectedUnit then
36650: LD_VAR 0 3
36654: IFFALSE 36714
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36656: LD_VAR 0 1
36660: PUSH
36661: LD_INT 254
36663: EQUAL
36664: IFFALSE 36681
36666: PUSH
36667: LD_VAR 0 2
36671: PPUSH
36672: CALL_OW 264
36676: PUSH
36677: LD_INT 99
36679: EQUAL
36680: AND
36681: IFFALSE 36698
36683: PUSH
36684: LD_VAR 0 3
36688: PPUSH
36689: CALL_OW 263
36693: PUSH
36694: LD_INT 3
36696: EQUAL
36697: AND
36698: IFFALSE 36714
// HackDestroyVehicle ( unit , selectedUnit ) ;
36700: LD_VAR 0 2
36704: PPUSH
36705: LD_VAR 0 3
36709: PPUSH
36710: CALL 39004 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36714: LD_VAR 0 1
36718: PUSH
36719: LD_INT 255
36721: EQUAL
36722: IFFALSE 36746
36724: PUSH
36725: LD_VAR 0 2
36729: PPUSH
36730: CALL_OW 264
36734: PUSH
36735: LD_INT 14
36737: PUSH
36738: LD_INT 53
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: IN
36745: AND
36746: IFFALSE 36764
36748: PUSH
36749: LD_VAR 0 4
36753: PPUSH
36754: LD_VAR 0 5
36758: PPUSH
36759: CALL_OW 488
36763: AND
36764: IFFALSE 36788
// CutTreeXYR ( unit , x , y , 12 ) ;
36766: LD_VAR 0 2
36770: PPUSH
36771: LD_VAR 0 4
36775: PPUSH
36776: LD_VAR 0 5
36780: PPUSH
36781: LD_INT 12
36783: PPUSH
36784: CALL 36979 0 4
// if cmd = 256 then
36788: LD_VAR 0 1
36792: PUSH
36793: LD_INT 256
36795: EQUAL
36796: IFFALSE 36817
// SetFactoryWaypoint ( unit , x , y ) ;
36798: LD_VAR 0 2
36802: PPUSH
36803: LD_VAR 0 4
36807: PPUSH
36808: LD_VAR 0 5
36812: PPUSH
36813: CALL 34339 0 3
// if cmd = 257 then
36817: LD_VAR 0 1
36821: PUSH
36822: LD_INT 257
36824: EQUAL
36825: IFFALSE 36846
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36827: LD_VAR 0 2
36831: PPUSH
36832: LD_VAR 0 4
36836: PPUSH
36837: LD_VAR 0 5
36841: PPUSH
36842: CALL 34835 0 3
// if cmd = 258 then
36846: LD_VAR 0 1
36850: PUSH
36851: LD_INT 258
36853: EQUAL
36854: IFFALSE 36878
// BurnTreeXYR ( unit , x , y , 8 ) ;
36856: LD_VAR 0 2
36860: PPUSH
36861: LD_VAR 0 4
36865: PPUSH
36866: LD_VAR 0 5
36870: PPUSH
36871: LD_INT 8
36873: PPUSH
36874: CALL 37379 0 4
// end ;
36878: LD_VAR 0 6
36882: RET
// export function ComRadiation ( un ) ; var eff ; begin
36883: LD_INT 0
36885: PPUSH
36886: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
36887: LD_VAR 0 1
36891: PPUSH
36892: CALL_OW 264
36896: PUSH
36897: LD_INT 91
36899: NONEQUAL
36900: IFFALSE 36904
// exit ;
36902: GO 36974
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36904: LD_INT 68
36906: PPUSH
36907: LD_VAR 0 1
36911: PPUSH
36912: CALL_OW 255
36916: PPUSH
36917: CALL_OW 321
36921: PUSH
36922: LD_INT 2
36924: EQUAL
36925: IFFALSE 36937
// eff := 50 else
36927: LD_ADDR_VAR 0 3
36931: PUSH
36932: LD_INT 50
36934: ST_TO_ADDR
36935: GO 36945
// eff := 25 ;
36937: LD_ADDR_VAR 0 3
36941: PUSH
36942: LD_INT 25
36944: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36945: LD_VAR 0 1
36949: PPUSH
36950: CALL_OW 250
36954: PPUSH
36955: LD_VAR 0 1
36959: PPUSH
36960: CALL_OW 251
36964: PPUSH
36965: LD_VAR 0 3
36969: PPUSH
36970: CALL_OW 495
// end ;
36974: LD_VAR 0 2
36978: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36979: LD_INT 0
36981: PPUSH
36982: PPUSH
36983: PPUSH
36984: PPUSH
36985: PPUSH
36986: PPUSH
36987: PPUSH
36988: PPUSH
36989: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36990: LD_VAR 0 1
36994: PPUSH
36995: CALL_OW 302
36999: NOT
37000: IFTRUE 37019
37002: PUSH
37003: LD_VAR 0 2
37007: PPUSH
37008: LD_VAR 0 3
37012: PPUSH
37013: CALL_OW 488
37017: NOT
37018: OR
37019: IFTRUE 37028
37021: PUSH
37022: LD_VAR 0 4
37026: NOT
37027: OR
37028: IFFALSE 37032
// exit ;
37030: GO 37374
// list := [ ] ;
37032: LD_ADDR_VAR 0 13
37036: PUSH
37037: EMPTY
37038: ST_TO_ADDR
// if x - r < 0 then
37039: LD_VAR 0 2
37043: PUSH
37044: LD_VAR 0 4
37048: MINUS
37049: PUSH
37050: LD_INT 0
37052: LESS
37053: IFFALSE 37065
// min_x := 0 else
37055: LD_ADDR_VAR 0 7
37059: PUSH
37060: LD_INT 0
37062: ST_TO_ADDR
37063: GO 37081
// min_x := x - r ;
37065: LD_ADDR_VAR 0 7
37069: PUSH
37070: LD_VAR 0 2
37074: PUSH
37075: LD_VAR 0 4
37079: MINUS
37080: ST_TO_ADDR
// if y - r < 0 then
37081: LD_VAR 0 3
37085: PUSH
37086: LD_VAR 0 4
37090: MINUS
37091: PUSH
37092: LD_INT 0
37094: LESS
37095: IFFALSE 37107
// min_y := 0 else
37097: LD_ADDR_VAR 0 8
37101: PUSH
37102: LD_INT 0
37104: ST_TO_ADDR
37105: GO 37123
// min_y := y - r ;
37107: LD_ADDR_VAR 0 8
37111: PUSH
37112: LD_VAR 0 3
37116: PUSH
37117: LD_VAR 0 4
37121: MINUS
37122: ST_TO_ADDR
// max_x := x + r ;
37123: LD_ADDR_VAR 0 9
37127: PUSH
37128: LD_VAR 0 2
37132: PUSH
37133: LD_VAR 0 4
37137: PLUS
37138: ST_TO_ADDR
// max_y := y + r ;
37139: LD_ADDR_VAR 0 10
37143: PUSH
37144: LD_VAR 0 3
37148: PUSH
37149: LD_VAR 0 4
37153: PLUS
37154: ST_TO_ADDR
// for _x = min_x to max_x do
37155: LD_ADDR_VAR 0 11
37159: PUSH
37160: DOUBLE
37161: LD_VAR 0 7
37165: DEC
37166: ST_TO_ADDR
37167: LD_VAR 0 9
37171: PUSH
37172: FOR_TO
37173: IFFALSE 37292
// for _y = min_y to max_y do
37175: LD_ADDR_VAR 0 12
37179: PUSH
37180: DOUBLE
37181: LD_VAR 0 8
37185: DEC
37186: ST_TO_ADDR
37187: LD_VAR 0 10
37191: PUSH
37192: FOR_TO
37193: IFFALSE 37288
// begin if not ValidHex ( _x , _y ) then
37195: LD_VAR 0 11
37199: PPUSH
37200: LD_VAR 0 12
37204: PPUSH
37205: CALL_OW 488
37209: NOT
37210: IFFALSE 37214
// continue ;
37212: GO 37192
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37214: LD_VAR 0 11
37218: PPUSH
37219: LD_VAR 0 12
37223: PPUSH
37224: CALL_OW 351
37228: IFFALSE 37246
37230: PUSH
37231: LD_VAR 0 11
37235: PPUSH
37236: LD_VAR 0 12
37240: PPUSH
37241: CALL_OW 554
37245: AND
37246: IFFALSE 37286
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37248: LD_ADDR_VAR 0 13
37252: PUSH
37253: LD_VAR 0 13
37257: PPUSH
37258: LD_VAR 0 13
37262: PUSH
37263: LD_INT 1
37265: PLUS
37266: PPUSH
37267: LD_VAR 0 11
37271: PUSH
37272: LD_VAR 0 12
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PPUSH
37281: CALL_OW 2
37285: ST_TO_ADDR
// end ;
37286: GO 37192
37288: POP
37289: POP
37290: GO 37172
37292: POP
37293: POP
// if not list then
37294: LD_VAR 0 13
37298: NOT
37299: IFFALSE 37303
// exit ;
37301: GO 37374
// for i in list do
37303: LD_ADDR_VAR 0 6
37307: PUSH
37308: LD_VAR 0 13
37312: PUSH
37313: FOR_IN
37314: IFFALSE 37372
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37316: LD_VAR 0 1
37320: PPUSH
37321: LD_STRING M
37323: PUSH
37324: LD_VAR 0 6
37328: PUSH
37329: LD_INT 1
37331: ARRAY
37332: PUSH
37333: LD_VAR 0 6
37337: PUSH
37338: LD_INT 2
37340: ARRAY
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: LD_INT 0
37350: PUSH
37351: LD_INT 0
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: PUSH
37363: EMPTY
37364: LIST
37365: PPUSH
37366: CALL_OW 447
37370: GO 37313
37372: POP
37373: POP
// end ;
37374: LD_VAR 0 5
37378: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37379: LD_INT 0
37381: PPUSH
37382: PPUSH
37383: PPUSH
37384: PPUSH
37385: PPUSH
37386: PPUSH
37387: PPUSH
37388: PPUSH
37389: PPUSH
37390: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37391: LD_VAR 0 1
37395: PPUSH
37396: CALL_OW 302
37400: NOT
37401: IFTRUE 37420
37403: PUSH
37404: LD_VAR 0 2
37408: PPUSH
37409: LD_VAR 0 3
37413: PPUSH
37414: CALL_OW 488
37418: NOT
37419: OR
37420: IFTRUE 37429
37422: PUSH
37423: LD_VAR 0 4
37427: NOT
37428: OR
37429: IFFALSE 37433
// exit ;
37431: GO 37950
// list := [ ] ;
37433: LD_ADDR_VAR 0 13
37437: PUSH
37438: EMPTY
37439: ST_TO_ADDR
// if x - r < 0 then
37440: LD_VAR 0 2
37444: PUSH
37445: LD_VAR 0 4
37449: MINUS
37450: PUSH
37451: LD_INT 0
37453: LESS
37454: IFFALSE 37466
// min_x := 0 else
37456: LD_ADDR_VAR 0 7
37460: PUSH
37461: LD_INT 0
37463: ST_TO_ADDR
37464: GO 37482
// min_x := x - r ;
37466: LD_ADDR_VAR 0 7
37470: PUSH
37471: LD_VAR 0 2
37475: PUSH
37476: LD_VAR 0 4
37480: MINUS
37481: ST_TO_ADDR
// if y - r < 0 then
37482: LD_VAR 0 3
37486: PUSH
37487: LD_VAR 0 4
37491: MINUS
37492: PUSH
37493: LD_INT 0
37495: LESS
37496: IFFALSE 37508
// min_y := 0 else
37498: LD_ADDR_VAR 0 8
37502: PUSH
37503: LD_INT 0
37505: ST_TO_ADDR
37506: GO 37524
// min_y := y - r ;
37508: LD_ADDR_VAR 0 8
37512: PUSH
37513: LD_VAR 0 3
37517: PUSH
37518: LD_VAR 0 4
37522: MINUS
37523: ST_TO_ADDR
// max_x := x + r ;
37524: LD_ADDR_VAR 0 9
37528: PUSH
37529: LD_VAR 0 2
37533: PUSH
37534: LD_VAR 0 4
37538: PLUS
37539: ST_TO_ADDR
// max_y := y + r ;
37540: LD_ADDR_VAR 0 10
37544: PUSH
37545: LD_VAR 0 3
37549: PUSH
37550: LD_VAR 0 4
37554: PLUS
37555: ST_TO_ADDR
// for _x = min_x to max_x do
37556: LD_ADDR_VAR 0 11
37560: PUSH
37561: DOUBLE
37562: LD_VAR 0 7
37566: DEC
37567: ST_TO_ADDR
37568: LD_VAR 0 9
37572: PUSH
37573: FOR_TO
37574: IFFALSE 37693
// for _y = min_y to max_y do
37576: LD_ADDR_VAR 0 12
37580: PUSH
37581: DOUBLE
37582: LD_VAR 0 8
37586: DEC
37587: ST_TO_ADDR
37588: LD_VAR 0 10
37592: PUSH
37593: FOR_TO
37594: IFFALSE 37689
// begin if not ValidHex ( _x , _y ) then
37596: LD_VAR 0 11
37600: PPUSH
37601: LD_VAR 0 12
37605: PPUSH
37606: CALL_OW 488
37610: NOT
37611: IFFALSE 37615
// continue ;
37613: GO 37593
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37615: LD_VAR 0 11
37619: PPUSH
37620: LD_VAR 0 12
37624: PPUSH
37625: CALL_OW 351
37629: IFFALSE 37647
37631: PUSH
37632: LD_VAR 0 11
37636: PPUSH
37637: LD_VAR 0 12
37641: PPUSH
37642: CALL_OW 554
37646: AND
37647: IFFALSE 37687
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37649: LD_ADDR_VAR 0 13
37653: PUSH
37654: LD_VAR 0 13
37658: PPUSH
37659: LD_VAR 0 13
37663: PUSH
37664: LD_INT 1
37666: PLUS
37667: PPUSH
37668: LD_VAR 0 11
37672: PUSH
37673: LD_VAR 0 12
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PPUSH
37682: CALL_OW 2
37686: ST_TO_ADDR
// end ;
37687: GO 37593
37689: POP
37690: POP
37691: GO 37573
37693: POP
37694: POP
// if not list then
37695: LD_VAR 0 13
37699: NOT
37700: IFFALSE 37704
// exit ;
37702: GO 37950
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37704: LD_ADDR_VAR 0 13
37708: PUSH
37709: LD_VAR 0 1
37713: PPUSH
37714: LD_VAR 0 13
37718: PPUSH
37719: LD_INT 1
37721: PPUSH
37722: LD_INT 1
37724: PPUSH
37725: CALL 46792 0 4
37729: ST_TO_ADDR
// ComStop ( flame ) ;
37730: LD_VAR 0 1
37734: PPUSH
37735: CALL_OW 141
// for i in list do
37739: LD_ADDR_VAR 0 6
37743: PUSH
37744: LD_VAR 0 13
37748: PUSH
37749: FOR_IN
37750: IFFALSE 37781
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37752: LD_VAR 0 1
37756: PPUSH
37757: LD_VAR 0 6
37761: PUSH
37762: LD_INT 1
37764: ARRAY
37765: PPUSH
37766: LD_VAR 0 6
37770: PUSH
37771: LD_INT 2
37773: ARRAY
37774: PPUSH
37775: CALL_OW 176
37779: GO 37749
37781: POP
37782: POP
// repeat wait ( 0 0$1 ) ;
37783: LD_INT 35
37785: PPUSH
37786: CALL_OW 67
// task := GetTaskList ( flame ) ;
37790: LD_ADDR_VAR 0 14
37794: PUSH
37795: LD_VAR 0 1
37799: PPUSH
37800: CALL_OW 437
37804: ST_TO_ADDR
// if not task then
37805: LD_VAR 0 14
37809: NOT
37810: IFFALSE 37814
// exit ;
37812: GO 37950
// if task [ 1 ] [ 1 ] <> | then
37814: LD_VAR 0 14
37818: PUSH
37819: LD_INT 1
37821: ARRAY
37822: PUSH
37823: LD_INT 1
37825: ARRAY
37826: PUSH
37827: LD_STRING |
37829: NONEQUAL
37830: IFFALSE 37834
// exit ;
37832: GO 37950
// _x := task [ 1 ] [ 2 ] ;
37834: LD_ADDR_VAR 0 11
37838: PUSH
37839: LD_VAR 0 14
37843: PUSH
37844: LD_INT 1
37846: ARRAY
37847: PUSH
37848: LD_INT 2
37850: ARRAY
37851: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37852: LD_ADDR_VAR 0 12
37856: PUSH
37857: LD_VAR 0 14
37861: PUSH
37862: LD_INT 1
37864: ARRAY
37865: PUSH
37866: LD_INT 3
37868: ARRAY
37869: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37870: LD_VAR 0 11
37874: PPUSH
37875: LD_VAR 0 12
37879: PPUSH
37880: CALL_OW 351
37884: NOT
37885: IFTRUE 37904
37887: PUSH
37888: LD_VAR 0 11
37892: PPUSH
37893: LD_VAR 0 12
37897: PPUSH
37898: CALL_OW 554
37902: NOT
37903: OR
37904: IFFALSE 37938
// begin task := Delete ( task , 1 ) ;
37906: LD_ADDR_VAR 0 14
37910: PUSH
37911: LD_VAR 0 14
37915: PPUSH
37916: LD_INT 1
37918: PPUSH
37919: CALL_OW 3
37923: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37924: LD_VAR 0 1
37928: PPUSH
37929: LD_VAR 0 14
37933: PPUSH
37934: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37938: LD_VAR 0 1
37942: PPUSH
37943: CALL_OW 314
37947: NOT
37948: IFFALSE 37783
// end ;
37950: LD_VAR 0 5
37954: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37955: LD_EXP 116
37959: NOT
37960: IFFALSE 38010
37962: GO 37964
37964: DISABLE
// begin initHack := true ;
37965: LD_ADDR_EXP 116
37969: PUSH
37970: LD_INT 1
37972: ST_TO_ADDR
// hackTanks := [ ] ;
37973: LD_ADDR_EXP 117
37977: PUSH
37978: EMPTY
37979: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37980: LD_ADDR_EXP 118
37984: PUSH
37985: EMPTY
37986: ST_TO_ADDR
// hackLimit := 3 ;
37987: LD_ADDR_EXP 119
37991: PUSH
37992: LD_INT 3
37994: ST_TO_ADDR
// hackDist := 12 ;
37995: LD_ADDR_EXP 120
37999: PUSH
38000: LD_INT 12
38002: ST_TO_ADDR
// hackCounter := [ ] ;
38003: LD_ADDR_EXP 121
38007: PUSH
38008: EMPTY
38009: ST_TO_ADDR
// end ;
38010: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38011: LD_EXP 116
38015: IFFALSE 38033
38017: PUSH
38018: LD_INT 34
38020: PUSH
38021: LD_INT 99
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PPUSH
38028: CALL_OW 69
38032: AND
38033: IFFALSE 38286
38035: GO 38037
38037: DISABLE
38038: LD_INT 0
38040: PPUSH
38041: PPUSH
// begin enable ;
38042: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38043: LD_ADDR_VAR 0 1
38047: PUSH
38048: LD_INT 34
38050: PUSH
38051: LD_INT 99
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PPUSH
38058: CALL_OW 69
38062: PUSH
38063: FOR_IN
38064: IFFALSE 38284
// begin if not i in hackTanks then
38066: LD_VAR 0 1
38070: PUSH
38071: LD_EXP 117
38075: IN
38076: NOT
38077: IFFALSE 38160
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38079: LD_ADDR_EXP 117
38083: PUSH
38084: LD_EXP 117
38088: PPUSH
38089: LD_EXP 117
38093: PUSH
38094: LD_INT 1
38096: PLUS
38097: PPUSH
38098: LD_VAR 0 1
38102: PPUSH
38103: CALL_OW 1
38107: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38108: LD_ADDR_EXP 118
38112: PUSH
38113: LD_EXP 118
38117: PPUSH
38118: LD_EXP 118
38122: PUSH
38123: LD_INT 1
38125: PLUS
38126: PPUSH
38127: EMPTY
38128: PPUSH
38129: CALL_OW 1
38133: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38134: LD_ADDR_EXP 121
38138: PUSH
38139: LD_EXP 121
38143: PPUSH
38144: LD_EXP 121
38148: PUSH
38149: LD_INT 1
38151: PLUS
38152: PPUSH
38153: EMPTY
38154: PPUSH
38155: CALL_OW 1
38159: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38160: LD_VAR 0 1
38164: PPUSH
38165: CALL_OW 302
38169: NOT
38170: IFFALSE 38183
// begin HackUnlinkAll ( i ) ;
38172: LD_VAR 0 1
38176: PPUSH
38177: CALL 38289 0 1
// continue ;
38181: GO 38063
// end ; HackCheckCapturedStatus ( i ) ;
38183: LD_VAR 0 1
38187: PPUSH
38188: CALL 38734 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38192: LD_ADDR_VAR 0 2
38196: PUSH
38197: LD_INT 81
38199: PUSH
38200: LD_VAR 0 1
38204: PPUSH
38205: CALL_OW 255
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 33
38216: PUSH
38217: LD_INT 3
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 91
38226: PUSH
38227: LD_VAR 0 1
38231: PUSH
38232: LD_EXP 120
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 50
38244: PUSH
38245: EMPTY
38246: LIST
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: PPUSH
38254: CALL_OW 69
38258: ST_TO_ADDR
// if not tmp then
38259: LD_VAR 0 2
38263: NOT
38264: IFFALSE 38268
// continue ;
38266: GO 38063
// HackLink ( i , tmp ) ;
38268: LD_VAR 0 1
38272: PPUSH
38273: LD_VAR 0 2
38277: PPUSH
38278: CALL 38425 0 2
// end ;
38282: GO 38063
38284: POP
38285: POP
// end ;
38286: PPOPN 2
38288: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38289: LD_INT 0
38291: PPUSH
38292: PPUSH
38293: PPUSH
// if not hack in hackTanks then
38294: LD_VAR 0 1
38298: PUSH
38299: LD_EXP 117
38303: IN
38304: NOT
38305: IFFALSE 38309
// exit ;
38307: GO 38420
// index := GetElementIndex ( hackTanks , hack ) ;
38309: LD_ADDR_VAR 0 4
38313: PUSH
38314: LD_EXP 117
38318: PPUSH
38319: LD_VAR 0 1
38323: PPUSH
38324: CALL 46087 0 2
38328: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38329: LD_EXP 118
38333: PUSH
38334: LD_VAR 0 4
38338: ARRAY
38339: IFFALSE 38420
// begin for i in hackTanksCaptured [ index ] do
38341: LD_ADDR_VAR 0 3
38345: PUSH
38346: LD_EXP 118
38350: PUSH
38351: LD_VAR 0 4
38355: ARRAY
38356: PUSH
38357: FOR_IN
38358: IFFALSE 38384
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38360: LD_VAR 0 3
38364: PUSH
38365: LD_INT 1
38367: ARRAY
38368: PPUSH
38369: LD_VAR 0 3
38373: PUSH
38374: LD_INT 2
38376: ARRAY
38377: PPUSH
38378: CALL_OW 235
38382: GO 38357
38384: POP
38385: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38386: LD_ADDR_EXP 118
38390: PUSH
38391: LD_EXP 118
38395: PPUSH
38396: LD_VAR 0 4
38400: PPUSH
38401: EMPTY
38402: PPUSH
38403: CALL_OW 1
38407: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38408: LD_VAR 0 1
38412: PPUSH
38413: LD_INT 0
38415: PPUSH
38416: CALL_OW 505
// end ; end ;
38420: LD_VAR 0 2
38424: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38425: LD_INT 0
38427: PPUSH
38428: PPUSH
38429: PPUSH
// if not hack in hackTanks or not vehicles then
38430: LD_VAR 0 1
38434: PUSH
38435: LD_EXP 117
38439: IN
38440: NOT
38441: IFTRUE 38450
38443: PUSH
38444: LD_VAR 0 2
38448: NOT
38449: OR
38450: IFFALSE 38454
// exit ;
38452: GO 38729
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38454: LD_ADDR_VAR 0 2
38458: PUSH
38459: LD_VAR 0 1
38463: PPUSH
38464: LD_VAR 0 2
38468: PPUSH
38469: LD_INT 1
38471: PPUSH
38472: LD_INT 1
38474: PPUSH
38475: CALL 46739 0 4
38479: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38480: LD_ADDR_VAR 0 5
38484: PUSH
38485: LD_EXP 117
38489: PPUSH
38490: LD_VAR 0 1
38494: PPUSH
38495: CALL 46087 0 2
38499: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38500: LD_EXP 118
38504: PUSH
38505: LD_VAR 0 5
38509: ARRAY
38510: PUSH
38511: LD_EXP 119
38515: LESS
38516: IFFALSE 38705
// begin for i := 1 to vehicles do
38518: LD_ADDR_VAR 0 4
38522: PUSH
38523: DOUBLE
38524: LD_INT 1
38526: DEC
38527: ST_TO_ADDR
38528: LD_VAR 0 2
38532: PUSH
38533: FOR_TO
38534: IFFALSE 38703
// begin if hackTanksCaptured [ index ] = hackLimit then
38536: LD_EXP 118
38540: PUSH
38541: LD_VAR 0 5
38545: ARRAY
38546: PUSH
38547: LD_EXP 119
38551: EQUAL
38552: IFFALSE 38556
// break ;
38554: GO 38703
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38556: LD_ADDR_EXP 121
38560: PUSH
38561: LD_EXP 121
38565: PPUSH
38566: LD_VAR 0 5
38570: PPUSH
38571: LD_EXP 121
38575: PUSH
38576: LD_VAR 0 5
38580: ARRAY
38581: PUSH
38582: LD_INT 1
38584: PLUS
38585: PPUSH
38586: CALL_OW 1
38590: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38591: LD_ADDR_EXP 118
38595: PUSH
38596: LD_EXP 118
38600: PPUSH
38601: LD_VAR 0 5
38605: PUSH
38606: LD_EXP 118
38610: PUSH
38611: LD_VAR 0 5
38615: ARRAY
38616: PUSH
38617: LD_INT 1
38619: PLUS
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PPUSH
38625: LD_VAR 0 2
38629: PUSH
38630: LD_VAR 0 4
38634: ARRAY
38635: PUSH
38636: LD_VAR 0 2
38640: PUSH
38641: LD_VAR 0 4
38645: ARRAY
38646: PPUSH
38647: CALL_OW 255
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PPUSH
38656: CALL 46304 0 3
38660: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38661: LD_VAR 0 2
38665: PUSH
38666: LD_VAR 0 4
38670: ARRAY
38671: PPUSH
38672: LD_VAR 0 1
38676: PPUSH
38677: CALL_OW 255
38681: PPUSH
38682: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38686: LD_VAR 0 2
38690: PUSH
38691: LD_VAR 0 4
38695: ARRAY
38696: PPUSH
38697: CALL_OW 141
// end ;
38701: GO 38533
38703: POP
38704: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38705: LD_VAR 0 1
38709: PPUSH
38710: LD_EXP 118
38714: PUSH
38715: LD_VAR 0 5
38719: ARRAY
38720: PUSH
38721: LD_INT 0
38723: PLUS
38724: PPUSH
38725: CALL_OW 505
// end ;
38729: LD_VAR 0 3
38733: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38734: LD_INT 0
38736: PPUSH
38737: PPUSH
38738: PPUSH
38739: PPUSH
// if not hack in hackTanks then
38740: LD_VAR 0 1
38744: PUSH
38745: LD_EXP 117
38749: IN
38750: NOT
38751: IFFALSE 38755
// exit ;
38753: GO 38999
// index := GetElementIndex ( hackTanks , hack ) ;
38755: LD_ADDR_VAR 0 4
38759: PUSH
38760: LD_EXP 117
38764: PPUSH
38765: LD_VAR 0 1
38769: PPUSH
38770: CALL 46087 0 2
38774: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38775: LD_ADDR_VAR 0 3
38779: PUSH
38780: DOUBLE
38781: LD_EXP 118
38785: PUSH
38786: LD_VAR 0 4
38790: ARRAY
38791: INC
38792: ST_TO_ADDR
38793: LD_INT 1
38795: PUSH
38796: FOR_DOWNTO
38797: IFFALSE 38973
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38799: LD_ADDR_VAR 0 5
38803: PUSH
38804: LD_EXP 118
38808: PUSH
38809: LD_VAR 0 4
38813: ARRAY
38814: PUSH
38815: LD_VAR 0 3
38819: ARRAY
38820: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38821: LD_VAR 0 5
38825: PUSH
38826: LD_INT 1
38828: ARRAY
38829: PPUSH
38830: CALL_OW 302
38834: NOT
38835: IFTRUE 38863
38837: PUSH
38838: LD_VAR 0 5
38842: PUSH
38843: LD_INT 1
38845: ARRAY
38846: PPUSH
38847: CALL_OW 255
38851: PUSH
38852: LD_VAR 0 1
38856: PPUSH
38857: CALL_OW 255
38861: NONEQUAL
38862: OR
38863: IFFALSE 38971
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38865: LD_VAR 0 5
38869: PUSH
38870: LD_INT 1
38872: ARRAY
38873: PPUSH
38874: CALL_OW 305
38878: IFFALSE 38906
38880: PUSH
38881: LD_VAR 0 5
38885: PUSH
38886: LD_INT 1
38888: ARRAY
38889: PPUSH
38890: CALL_OW 255
38894: PUSH
38895: LD_VAR 0 1
38899: PPUSH
38900: CALL_OW 255
38904: EQUAL
38905: AND
38906: IFFALSE 38930
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38908: LD_VAR 0 5
38912: PUSH
38913: LD_INT 1
38915: ARRAY
38916: PPUSH
38917: LD_VAR 0 5
38921: PUSH
38922: LD_INT 2
38924: ARRAY
38925: PPUSH
38926: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38930: LD_ADDR_EXP 118
38934: PUSH
38935: LD_EXP 118
38939: PPUSH
38940: LD_VAR 0 4
38944: PPUSH
38945: LD_EXP 118
38949: PUSH
38950: LD_VAR 0 4
38954: ARRAY
38955: PPUSH
38956: LD_VAR 0 3
38960: PPUSH
38961: CALL_OW 3
38965: PPUSH
38966: CALL_OW 1
38970: ST_TO_ADDR
// end ; end ;
38971: GO 38796
38973: POP
38974: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38975: LD_VAR 0 1
38979: PPUSH
38980: LD_EXP 118
38984: PUSH
38985: LD_VAR 0 4
38989: ARRAY
38990: PUSH
38991: LD_INT 0
38993: PLUS
38994: PPUSH
38995: CALL_OW 505
// end ;
38999: LD_VAR 0 2
39003: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39004: LD_INT 0
39006: PPUSH
39007: PPUSH
39008: PPUSH
39009: PPUSH
// if not hack in hackTanks then
39010: LD_VAR 0 1
39014: PUSH
39015: LD_EXP 117
39019: IN
39020: NOT
39021: IFFALSE 39025
// exit ;
39023: GO 39110
// index := GetElementIndex ( hackTanks , hack ) ;
39025: LD_ADDR_VAR 0 5
39029: PUSH
39030: LD_EXP 117
39034: PPUSH
39035: LD_VAR 0 1
39039: PPUSH
39040: CALL 46087 0 2
39044: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39045: LD_ADDR_VAR 0 4
39049: PUSH
39050: DOUBLE
39051: LD_INT 1
39053: DEC
39054: ST_TO_ADDR
39055: LD_EXP 118
39059: PUSH
39060: LD_VAR 0 5
39064: ARRAY
39065: PUSH
39066: FOR_TO
39067: IFFALSE 39108
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39069: LD_EXP 118
39073: PUSH
39074: LD_VAR 0 5
39078: ARRAY
39079: PUSH
39080: LD_VAR 0 4
39084: ARRAY
39085: PUSH
39086: LD_INT 1
39088: ARRAY
39089: PUSH
39090: LD_VAR 0 2
39094: EQUAL
39095: IFFALSE 39106
// KillUnit ( vehicle ) ;
39097: LD_VAR 0 2
39101: PPUSH
39102: CALL_OW 66
39106: GO 39066
39108: POP
39109: POP
// end ;
39110: LD_VAR 0 3
39114: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39115: LD_EXP 122
39119: NOT
39120: IFFALSE 39155
39122: GO 39124
39124: DISABLE
// begin initMiner := true ;
39125: LD_ADDR_EXP 122
39129: PUSH
39130: LD_INT 1
39132: ST_TO_ADDR
// minersList := [ ] ;
39133: LD_ADDR_EXP 123
39137: PUSH
39138: EMPTY
39139: ST_TO_ADDR
// minerMinesList := [ ] ;
39140: LD_ADDR_EXP 124
39144: PUSH
39145: EMPTY
39146: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39147: LD_ADDR_EXP 125
39151: PUSH
39152: LD_INT 5
39154: ST_TO_ADDR
// end ;
39155: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39156: LD_EXP 122
39160: IFFALSE 39178
39162: PUSH
39163: LD_INT 34
39165: PUSH
39166: LD_INT 81
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PPUSH
39173: CALL_OW 69
39177: AND
39178: IFFALSE 39641
39180: GO 39182
39182: DISABLE
39183: LD_INT 0
39185: PPUSH
39186: PPUSH
39187: PPUSH
39188: PPUSH
// begin enable ;
39189: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39190: LD_ADDR_VAR 0 1
39194: PUSH
39195: LD_INT 34
39197: PUSH
39198: LD_INT 81
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PPUSH
39205: CALL_OW 69
39209: PUSH
39210: FOR_IN
39211: IFFALSE 39283
// begin if not i in minersList then
39213: LD_VAR 0 1
39217: PUSH
39218: LD_EXP 123
39222: IN
39223: NOT
39224: IFFALSE 39281
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39226: LD_ADDR_EXP 123
39230: PUSH
39231: LD_EXP 123
39235: PPUSH
39236: LD_EXP 123
39240: PUSH
39241: LD_INT 1
39243: PLUS
39244: PPUSH
39245: LD_VAR 0 1
39249: PPUSH
39250: CALL_OW 1
39254: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39255: LD_ADDR_EXP 124
39259: PUSH
39260: LD_EXP 124
39264: PPUSH
39265: LD_EXP 124
39269: PUSH
39270: LD_INT 1
39272: PLUS
39273: PPUSH
39274: EMPTY
39275: PPUSH
39276: CALL_OW 1
39280: ST_TO_ADDR
// end end ;
39281: GO 39210
39283: POP
39284: POP
// for i := minerMinesList downto 1 do
39285: LD_ADDR_VAR 0 1
39289: PUSH
39290: DOUBLE
39291: LD_EXP 124
39295: INC
39296: ST_TO_ADDR
39297: LD_INT 1
39299: PUSH
39300: FOR_DOWNTO
39301: IFFALSE 39639
// begin if IsLive ( minersList [ i ] ) then
39303: LD_EXP 123
39307: PUSH
39308: LD_VAR 0 1
39312: ARRAY
39313: PPUSH
39314: CALL_OW 300
39318: IFFALSE 39346
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39320: LD_EXP 123
39324: PUSH
39325: LD_VAR 0 1
39329: ARRAY
39330: PPUSH
39331: LD_EXP 124
39335: PUSH
39336: LD_VAR 0 1
39340: ARRAY
39341: PPUSH
39342: CALL_OW 505
// if not minerMinesList [ i ] then
39346: LD_EXP 124
39350: PUSH
39351: LD_VAR 0 1
39355: ARRAY
39356: NOT
39357: IFFALSE 39361
// continue ;
39359: GO 39300
// for j := minerMinesList [ i ] downto 1 do
39361: LD_ADDR_VAR 0 2
39365: PUSH
39366: DOUBLE
39367: LD_EXP 124
39371: PUSH
39372: LD_VAR 0 1
39376: ARRAY
39377: INC
39378: ST_TO_ADDR
39379: LD_INT 1
39381: PUSH
39382: FOR_DOWNTO
39383: IFFALSE 39635
// begin side := GetSide ( minersList [ i ] ) ;
39385: LD_ADDR_VAR 0 3
39389: PUSH
39390: LD_EXP 123
39394: PUSH
39395: LD_VAR 0 1
39399: ARRAY
39400: PPUSH
39401: CALL_OW 255
39405: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39406: LD_ADDR_VAR 0 4
39410: PUSH
39411: LD_EXP 124
39415: PUSH
39416: LD_VAR 0 1
39420: ARRAY
39421: PUSH
39422: LD_VAR 0 2
39426: ARRAY
39427: PUSH
39428: LD_INT 1
39430: ARRAY
39431: PPUSH
39432: LD_EXP 124
39436: PUSH
39437: LD_VAR 0 1
39441: ARRAY
39442: PUSH
39443: LD_VAR 0 2
39447: ARRAY
39448: PUSH
39449: LD_INT 2
39451: ARRAY
39452: PPUSH
39453: CALL_OW 428
39457: ST_TO_ADDR
// if not tmp then
39458: LD_VAR 0 4
39462: NOT
39463: IFFALSE 39467
// continue ;
39465: GO 39382
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39467: LD_VAR 0 4
39471: PUSH
39472: LD_INT 81
39474: PUSH
39475: LD_VAR 0 3
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PPUSH
39484: CALL_OW 69
39488: IN
39489: IFFALSE 39539
39491: PUSH
39492: LD_EXP 124
39496: PUSH
39497: LD_VAR 0 1
39501: ARRAY
39502: PUSH
39503: LD_VAR 0 2
39507: ARRAY
39508: PUSH
39509: LD_INT 1
39511: ARRAY
39512: PPUSH
39513: LD_EXP 124
39517: PUSH
39518: LD_VAR 0 1
39522: ARRAY
39523: PUSH
39524: LD_VAR 0 2
39528: ARRAY
39529: PUSH
39530: LD_INT 2
39532: ARRAY
39533: PPUSH
39534: CALL_OW 458
39538: AND
39539: IFFALSE 39633
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39541: LD_EXP 124
39545: PUSH
39546: LD_VAR 0 1
39550: ARRAY
39551: PUSH
39552: LD_VAR 0 2
39556: ARRAY
39557: PUSH
39558: LD_INT 1
39560: ARRAY
39561: PPUSH
39562: LD_EXP 124
39566: PUSH
39567: LD_VAR 0 1
39571: ARRAY
39572: PUSH
39573: LD_VAR 0 2
39577: ARRAY
39578: PUSH
39579: LD_INT 2
39581: ARRAY
39582: PPUSH
39583: LD_VAR 0 3
39587: PPUSH
39588: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39592: LD_ADDR_EXP 124
39596: PUSH
39597: LD_EXP 124
39601: PPUSH
39602: LD_VAR 0 1
39606: PPUSH
39607: LD_EXP 124
39611: PUSH
39612: LD_VAR 0 1
39616: ARRAY
39617: PPUSH
39618: LD_VAR 0 2
39622: PPUSH
39623: CALL_OW 3
39627: PPUSH
39628: CALL_OW 1
39632: ST_TO_ADDR
// end ; end ;
39633: GO 39382
39635: POP
39636: POP
// end ;
39637: GO 39300
39639: POP
39640: POP
// end ;
39641: PPOPN 4
39643: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39644: LD_INT 0
39646: PPUSH
39647: PPUSH
// result := false ;
39648: LD_ADDR_VAR 0 4
39652: PUSH
39653: LD_INT 0
39655: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39656: LD_VAR 0 1
39660: PPUSH
39661: CALL_OW 264
39665: PUSH
39666: LD_INT 81
39668: EQUAL
39669: NOT
39670: IFFALSE 39674
// exit ;
39672: GO 39918
// index := GetElementIndex ( minersList , unit ) ;
39674: LD_ADDR_VAR 0 5
39678: PUSH
39679: LD_EXP 123
39683: PPUSH
39684: LD_VAR 0 1
39688: PPUSH
39689: CALL 46087 0 2
39693: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39694: LD_EXP 124
39698: PUSH
39699: LD_VAR 0 5
39703: ARRAY
39704: PUSH
39705: LD_EXP 125
39709: GREATEREQUAL
39710: IFFALSE 39714
// exit ;
39712: GO 39918
// ComMoveXY ( unit , x , y ) ;
39714: LD_VAR 0 1
39718: PPUSH
39719: LD_VAR 0 2
39723: PPUSH
39724: LD_VAR 0 3
39728: PPUSH
39729: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39733: LD_INT 35
39735: PPUSH
39736: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39740: LD_VAR 0 1
39744: PPUSH
39745: LD_VAR 0 2
39749: PPUSH
39750: LD_VAR 0 3
39754: PPUSH
39755: CALL 78133 0 3
39759: NOT
39760: IFFALSE 39773
39762: PUSH
39763: LD_VAR 0 1
39767: PPUSH
39768: CALL_OW 314
39772: AND
39773: IFFALSE 39777
// exit ;
39775: GO 39918
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39777: LD_VAR 0 2
39781: PPUSH
39782: LD_VAR 0 3
39786: PPUSH
39787: CALL_OW 428
39791: PUSH
39792: LD_VAR 0 1
39796: EQUAL
39797: IFFALSE 39811
39799: PUSH
39800: LD_VAR 0 1
39804: PPUSH
39805: CALL_OW 314
39809: NOT
39810: AND
39811: IFFALSE 39733
// PlaySoundXY ( x , y , PlantMine ) ;
39813: LD_VAR 0 2
39817: PPUSH
39818: LD_VAR 0 3
39822: PPUSH
39823: LD_STRING PlantMine
39825: PPUSH
39826: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39830: LD_VAR 0 2
39834: PPUSH
39835: LD_VAR 0 3
39839: PPUSH
39840: LD_VAR 0 1
39844: PPUSH
39845: CALL_OW 255
39849: PPUSH
39850: LD_INT 0
39852: PPUSH
39853: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39857: LD_ADDR_EXP 124
39861: PUSH
39862: LD_EXP 124
39866: PPUSH
39867: LD_VAR 0 5
39871: PUSH
39872: LD_EXP 124
39876: PUSH
39877: LD_VAR 0 5
39881: ARRAY
39882: PUSH
39883: LD_INT 1
39885: PLUS
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PPUSH
39891: LD_VAR 0 2
39895: PUSH
39896: LD_VAR 0 3
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PPUSH
39905: CALL 46304 0 3
39909: ST_TO_ADDR
// result := true ;
39910: LD_ADDR_VAR 0 4
39914: PUSH
39915: LD_INT 1
39917: ST_TO_ADDR
// end ;
39918: LD_VAR 0 4
39922: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39923: LD_INT 0
39925: PPUSH
39926: PPUSH
39927: PPUSH
// if not unit in minersList then
39928: LD_VAR 0 1
39932: PUSH
39933: LD_EXP 123
39937: IN
39938: NOT
39939: IFFALSE 39943
// exit ;
39941: GO 40337
// index := GetElementIndex ( minersList , unit ) ;
39943: LD_ADDR_VAR 0 6
39947: PUSH
39948: LD_EXP 123
39952: PPUSH
39953: LD_VAR 0 1
39957: PPUSH
39958: CALL 46087 0 2
39962: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39963: LD_ADDR_VAR 0 5
39967: PUSH
39968: DOUBLE
39969: LD_EXP 124
39973: PUSH
39974: LD_VAR 0 6
39978: ARRAY
39979: INC
39980: ST_TO_ADDR
39981: LD_INT 1
39983: PUSH
39984: FOR_DOWNTO
39985: IFFALSE 40148
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39987: LD_EXP 124
39991: PUSH
39992: LD_VAR 0 6
39996: ARRAY
39997: PUSH
39998: LD_VAR 0 5
40002: ARRAY
40003: PUSH
40004: LD_INT 1
40006: ARRAY
40007: PUSH
40008: LD_VAR 0 2
40012: EQUAL
40013: IFFALSE 40043
40015: PUSH
40016: LD_EXP 124
40020: PUSH
40021: LD_VAR 0 6
40025: ARRAY
40026: PUSH
40027: LD_VAR 0 5
40031: ARRAY
40032: PUSH
40033: LD_INT 2
40035: ARRAY
40036: PUSH
40037: LD_VAR 0 3
40041: EQUAL
40042: AND
40043: IFFALSE 40146
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40045: LD_EXP 124
40049: PUSH
40050: LD_VAR 0 6
40054: ARRAY
40055: PUSH
40056: LD_VAR 0 5
40060: ARRAY
40061: PUSH
40062: LD_INT 1
40064: ARRAY
40065: PPUSH
40066: LD_EXP 124
40070: PUSH
40071: LD_VAR 0 6
40075: ARRAY
40076: PUSH
40077: LD_VAR 0 5
40081: ARRAY
40082: PUSH
40083: LD_INT 2
40085: ARRAY
40086: PPUSH
40087: LD_VAR 0 1
40091: PPUSH
40092: CALL_OW 255
40096: PPUSH
40097: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40101: LD_ADDR_EXP 124
40105: PUSH
40106: LD_EXP 124
40110: PPUSH
40111: LD_VAR 0 6
40115: PPUSH
40116: LD_EXP 124
40120: PUSH
40121: LD_VAR 0 6
40125: ARRAY
40126: PPUSH
40127: LD_VAR 0 5
40131: PPUSH
40132: CALL_OW 3
40136: PPUSH
40137: CALL_OW 1
40141: ST_TO_ADDR
// exit ;
40142: POP
40143: POP
40144: GO 40337
// end ; end ;
40146: GO 39984
40148: POP
40149: POP
// for i := minerMinesList [ index ] downto 1 do
40150: LD_ADDR_VAR 0 5
40154: PUSH
40155: DOUBLE
40156: LD_EXP 124
40160: PUSH
40161: LD_VAR 0 6
40165: ARRAY
40166: INC
40167: ST_TO_ADDR
40168: LD_INT 1
40170: PUSH
40171: FOR_DOWNTO
40172: IFFALSE 40335
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40174: LD_EXP 124
40178: PUSH
40179: LD_VAR 0 6
40183: ARRAY
40184: PUSH
40185: LD_VAR 0 5
40189: ARRAY
40190: PUSH
40191: LD_INT 1
40193: ARRAY
40194: PPUSH
40195: LD_EXP 124
40199: PUSH
40200: LD_VAR 0 6
40204: ARRAY
40205: PUSH
40206: LD_VAR 0 5
40210: ARRAY
40211: PUSH
40212: LD_INT 2
40214: ARRAY
40215: PPUSH
40216: LD_VAR 0 2
40220: PPUSH
40221: LD_VAR 0 3
40225: PPUSH
40226: CALL_OW 298
40230: PUSH
40231: LD_INT 6
40233: LESS
40234: IFFALSE 40333
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40236: LD_EXP 124
40240: PUSH
40241: LD_VAR 0 6
40245: ARRAY
40246: PUSH
40247: LD_VAR 0 5
40251: ARRAY
40252: PUSH
40253: LD_INT 1
40255: ARRAY
40256: PPUSH
40257: LD_EXP 124
40261: PUSH
40262: LD_VAR 0 6
40266: ARRAY
40267: PUSH
40268: LD_VAR 0 5
40272: ARRAY
40273: PUSH
40274: LD_INT 2
40276: ARRAY
40277: PPUSH
40278: LD_VAR 0 1
40282: PPUSH
40283: CALL_OW 255
40287: PPUSH
40288: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40292: LD_ADDR_EXP 124
40296: PUSH
40297: LD_EXP 124
40301: PPUSH
40302: LD_VAR 0 6
40306: PPUSH
40307: LD_EXP 124
40311: PUSH
40312: LD_VAR 0 6
40316: ARRAY
40317: PPUSH
40318: LD_VAR 0 5
40322: PPUSH
40323: CALL_OW 3
40327: PPUSH
40328: CALL_OW 1
40332: ST_TO_ADDR
// end ; end ;
40333: GO 40171
40335: POP
40336: POP
// end ;
40337: LD_VAR 0 4
40341: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40342: LD_INT 0
40344: PPUSH
40345: PPUSH
40346: PPUSH
40347: PPUSH
40348: PPUSH
40349: PPUSH
40350: PPUSH
40351: PPUSH
40352: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40353: LD_VAR 0 1
40357: PPUSH
40358: CALL_OW 264
40362: PUSH
40363: LD_INT 81
40365: EQUAL
40366: NOT
40367: IFTRUE 40382
40369: PUSH
40370: LD_VAR 0 1
40374: PUSH
40375: LD_EXP 123
40379: IN
40380: NOT
40381: OR
40382: IFFALSE 40386
// exit ;
40384: GO 40712
// index := GetElementIndex ( minersList , unit ) ;
40386: LD_ADDR_VAR 0 6
40390: PUSH
40391: LD_EXP 123
40395: PPUSH
40396: LD_VAR 0 1
40400: PPUSH
40401: CALL 46087 0 2
40405: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40406: LD_ADDR_VAR 0 8
40410: PUSH
40411: LD_EXP 125
40415: PUSH
40416: LD_EXP 124
40420: PUSH
40421: LD_VAR 0 6
40425: ARRAY
40426: MINUS
40427: ST_TO_ADDR
// if not minesFreeAmount then
40428: LD_VAR 0 8
40432: NOT
40433: IFFALSE 40437
// exit ;
40435: GO 40712
// tmp := [ ] ;
40437: LD_ADDR_VAR 0 7
40441: PUSH
40442: EMPTY
40443: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40444: LD_ADDR_VAR 0 5
40448: PUSH
40449: DOUBLE
40450: LD_INT 1
40452: DEC
40453: ST_TO_ADDR
40454: LD_VAR 0 8
40458: PUSH
40459: FOR_TO
40460: IFFALSE 40659
// begin _d := rand ( 0 , 5 ) ;
40462: LD_ADDR_VAR 0 11
40466: PUSH
40467: LD_INT 0
40469: PPUSH
40470: LD_INT 5
40472: PPUSH
40473: CALL_OW 12
40477: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40478: LD_ADDR_VAR 0 12
40482: PUSH
40483: LD_INT 2
40485: PPUSH
40486: LD_INT 6
40488: PPUSH
40489: CALL_OW 12
40493: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40494: LD_ADDR_VAR 0 9
40498: PUSH
40499: LD_VAR 0 2
40503: PPUSH
40504: LD_VAR 0 11
40508: PPUSH
40509: LD_VAR 0 12
40513: PPUSH
40514: CALL_OW 272
40518: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40519: LD_ADDR_VAR 0 10
40523: PUSH
40524: LD_VAR 0 3
40528: PPUSH
40529: LD_VAR 0 11
40533: PPUSH
40534: LD_VAR 0 12
40538: PPUSH
40539: CALL_OW 273
40543: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40544: LD_VAR 0 9
40548: PPUSH
40549: LD_VAR 0 10
40553: PPUSH
40554: CALL_OW 488
40558: IFFALSE 40582
40560: PUSH
40561: LD_VAR 0 9
40565: PUSH
40566: LD_VAR 0 10
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_VAR 0 7
40579: IN
40580: NOT
40581: AND
40582: IFFALSE 40601
40584: PUSH
40585: LD_VAR 0 9
40589: PPUSH
40590: LD_VAR 0 10
40594: PPUSH
40595: CALL_OW 458
40599: NOT
40600: AND
40601: IFFALSE 40643
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40603: LD_ADDR_VAR 0 7
40607: PUSH
40608: LD_VAR 0 7
40612: PPUSH
40613: LD_VAR 0 7
40617: PUSH
40618: LD_INT 1
40620: PLUS
40621: PPUSH
40622: LD_VAR 0 9
40626: PUSH
40627: LD_VAR 0 10
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PPUSH
40636: CALL_OW 1
40640: ST_TO_ADDR
40641: GO 40657
// i := i - 1 ;
40643: LD_ADDR_VAR 0 5
40647: PUSH
40648: LD_VAR 0 5
40652: PUSH
40653: LD_INT 1
40655: MINUS
40656: ST_TO_ADDR
// end ;
40657: GO 40459
40659: POP
40660: POP
// for i in tmp do
40661: LD_ADDR_VAR 0 5
40665: PUSH
40666: LD_VAR 0 7
40670: PUSH
40671: FOR_IN
40672: IFFALSE 40710
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40674: LD_VAR 0 1
40678: PPUSH
40679: LD_VAR 0 5
40683: PUSH
40684: LD_INT 1
40686: ARRAY
40687: PPUSH
40688: LD_VAR 0 5
40692: PUSH
40693: LD_INT 2
40695: ARRAY
40696: PPUSH
40697: CALL 39644 0 3
40701: NOT
40702: IFFALSE 40708
// exit ;
40704: POP
40705: POP
40706: GO 40712
40708: GO 40671
40710: POP
40711: POP
// end ;
40712: LD_VAR 0 4
40716: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40717: LD_INT 0
40719: PPUSH
40720: PPUSH
40721: PPUSH
40722: PPUSH
40723: PPUSH
40724: PPUSH
40725: PPUSH
40726: PPUSH
40727: PPUSH
// if GetClass ( unit ) <> class_sniper then
40728: LD_VAR 0 1
40732: PPUSH
40733: CALL_OW 257
40737: PUSH
40738: LD_INT 5
40740: NONEQUAL
40741: IFFALSE 40745
// exit ;
40743: GO 41215
// dist := 8 ;
40745: LD_ADDR_VAR 0 5
40749: PUSH
40750: LD_INT 8
40752: ST_TO_ADDR
// viewRange := 12 ;
40753: LD_ADDR_VAR 0 8
40757: PUSH
40758: LD_INT 12
40760: ST_TO_ADDR
// side := GetSide ( unit ) ;
40761: LD_ADDR_VAR 0 6
40765: PUSH
40766: LD_VAR 0 1
40770: PPUSH
40771: CALL_OW 255
40775: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40776: LD_INT 61
40778: PPUSH
40779: LD_VAR 0 6
40783: PPUSH
40784: CALL_OW 321
40788: PUSH
40789: LD_INT 2
40791: EQUAL
40792: IFFALSE 40802
// viewRange := 16 ;
40794: LD_ADDR_VAR 0 8
40798: PUSH
40799: LD_INT 16
40801: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40802: LD_VAR 0 1
40806: PPUSH
40807: LD_VAR 0 2
40811: PPUSH
40812: LD_VAR 0 3
40816: PPUSH
40817: CALL_OW 297
40821: PUSH
40822: LD_VAR 0 5
40826: GREATER
40827: IFFALSE 40906
// begin ComMoveXY ( unit , x , y ) ;
40829: LD_VAR 0 1
40833: PPUSH
40834: LD_VAR 0 2
40838: PPUSH
40839: LD_VAR 0 3
40843: PPUSH
40844: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40848: LD_INT 35
40850: PPUSH
40851: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40855: LD_VAR 0 1
40859: PPUSH
40860: LD_VAR 0 2
40864: PPUSH
40865: LD_VAR 0 3
40869: PPUSH
40870: CALL 78133 0 3
40874: NOT
40875: IFFALSE 40879
// exit ;
40877: GO 41215
// until GetDistUnitXY ( unit , x , y ) < dist ;
40879: LD_VAR 0 1
40883: PPUSH
40884: LD_VAR 0 2
40888: PPUSH
40889: LD_VAR 0 3
40893: PPUSH
40894: CALL_OW 297
40898: PUSH
40899: LD_VAR 0 5
40903: LESS
40904: IFFALSE 40848
// end ; ComTurnXY ( unit , x , y ) ;
40906: LD_VAR 0 1
40910: PPUSH
40911: LD_VAR 0 2
40915: PPUSH
40916: LD_VAR 0 3
40920: PPUSH
40921: CALL_OW 118
// repeat if Multiplayer then
40925: LD_OWVAR 4
40929: IFFALSE 40940
// wait ( 35 ) else
40931: LD_INT 35
40933: PPUSH
40934: CALL_OW 67
40938: GO 40947
// wait ( 5 ) ;
40940: LD_INT 5
40942: PPUSH
40943: CALL_OW 67
// _d := GetDir ( unit ) ;
40947: LD_ADDR_VAR 0 11
40951: PUSH
40952: LD_VAR 0 1
40956: PPUSH
40957: CALL_OW 254
40961: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
40962: LD_ADDR_VAR 0 7
40966: PUSH
40967: LD_VAR 0 1
40971: PPUSH
40972: CALL_OW 250
40976: PPUSH
40977: LD_VAR 0 1
40981: PPUSH
40982: CALL_OW 251
40986: PPUSH
40987: LD_VAR 0 2
40991: PPUSH
40992: LD_VAR 0 3
40996: PPUSH
40997: CALL 80769 0 4
41001: ST_TO_ADDR
// until dir = _d ;
41002: LD_VAR 0 7
41006: PUSH
41007: LD_VAR 0 11
41011: EQUAL
41012: IFFALSE 40925
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41014: LD_ADDR_VAR 0 9
41018: PUSH
41019: LD_VAR 0 1
41023: PPUSH
41024: CALL_OW 250
41028: PPUSH
41029: LD_VAR 0 7
41033: PPUSH
41034: LD_VAR 0 5
41038: PPUSH
41039: CALL_OW 272
41043: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41044: LD_ADDR_VAR 0 10
41048: PUSH
41049: LD_VAR 0 1
41053: PPUSH
41054: CALL_OW 251
41058: PPUSH
41059: LD_VAR 0 7
41063: PPUSH
41064: LD_VAR 0 5
41068: PPUSH
41069: CALL_OW 273
41073: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41074: LD_VAR 0 9
41078: PPUSH
41079: LD_VAR 0 10
41083: PPUSH
41084: CALL_OW 488
41088: NOT
41089: IFFALSE 41093
// exit ;
41091: GO 41215
// ComAnimCustom ( unit , 1 ) ;
41093: LD_VAR 0 1
41097: PPUSH
41098: LD_INT 1
41100: PPUSH
41101: CALL_OW 592
// p := 0 ;
41105: LD_ADDR_VAR 0 12
41109: PUSH
41110: LD_INT 0
41112: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41113: LD_VAR 0 9
41117: PPUSH
41118: LD_VAR 0 10
41122: PPUSH
41123: LD_VAR 0 6
41127: PPUSH
41128: LD_VAR 0 8
41132: PPUSH
41133: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41137: LD_INT 35
41139: PPUSH
41140: CALL_OW 67
// p := Inc ( p ) ;
41144: LD_ADDR_VAR 0 12
41148: PUSH
41149: LD_VAR 0 12
41153: PPUSH
41154: CALL 80725 0 1
41158: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41159: LD_VAR 0 12
41163: PUSH
41164: LD_INT 3
41166: EQUAL
41167: IFTRUE 41181
41169: PUSH
41170: LD_VAR 0 1
41174: PPUSH
41175: CALL_OW 302
41179: NOT
41180: OR
41181: IFTRUE 41194
41183: PUSH
41184: LD_VAR 0 1
41188: PPUSH
41189: CALL_OW 301
41193: OR
41194: IFFALSE 41137
// RemoveSeeing ( _x , _y , side ) ;
41196: LD_VAR 0 9
41200: PPUSH
41201: LD_VAR 0 10
41205: PPUSH
41206: LD_VAR 0 6
41210: PPUSH
41211: CALL_OW 331
// end ; end_of_file
41215: LD_VAR 0 4
41219: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41220: LD_INT 0
41222: PPUSH
41223: PPUSH
// if exist_mode then
41224: LD_VAR 0 2
41228: IFFALSE 41274
// begin unit := CreateCharacter ( prefix & ident ) ;
41230: LD_ADDR_VAR 0 5
41234: PUSH
41235: LD_VAR 0 3
41239: PUSH
41240: LD_VAR 0 1
41244: STR
41245: PPUSH
41246: CALL_OW 34
41250: ST_TO_ADDR
// if unit then
41251: LD_VAR 0 5
41255: IFFALSE 41272
// DeleteCharacters ( prefix & ident ) ;
41257: LD_VAR 0 3
41261: PUSH
41262: LD_VAR 0 1
41266: STR
41267: PPUSH
41268: CALL_OW 40
// end else
41272: GO 41289
// unit := NewCharacter ( ident ) ;
41274: LD_ADDR_VAR 0 5
41278: PUSH
41279: LD_VAR 0 1
41283: PPUSH
41284: CALL_OW 25
41288: ST_TO_ADDR
// result := unit ;
41289: LD_ADDR_VAR 0 4
41293: PUSH
41294: LD_VAR 0 5
41298: ST_TO_ADDR
// end ;
41299: LD_VAR 0 4
41303: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
41304: LD_INT 0
41306: PPUSH
41307: PPUSH
// if exist_mode then
41308: LD_VAR 0 2
41312: IFFALSE 41337
// unit := CreateCharacter ( prefix & ident ) else
41314: LD_ADDR_VAR 0 5
41318: PUSH
41319: LD_VAR 0 3
41323: PUSH
41324: LD_VAR 0 1
41328: STR
41329: PPUSH
41330: CALL_OW 34
41334: ST_TO_ADDR
41335: GO 41352
// unit := NewCharacter ( ident ) ;
41337: LD_ADDR_VAR 0 5
41341: PUSH
41342: LD_VAR 0 1
41346: PPUSH
41347: CALL_OW 25
41351: ST_TO_ADDR
// result := unit ;
41352: LD_ADDR_VAR 0 4
41356: PUSH
41357: LD_VAR 0 5
41361: ST_TO_ADDR
// end ;
41362: LD_VAR 0 4
41366: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41367: LD_INT 0
41369: PPUSH
41370: PPUSH
// if not side or not nation then
41371: LD_VAR 0 1
41375: NOT
41376: IFTRUE 41385
41378: PUSH
41379: LD_VAR 0 2
41383: NOT
41384: OR
41385: IFFALSE 41389
// exit ;
41387: GO 42159
// case nation of nation_american :
41389: LD_VAR 0 2
41393: PUSH
41394: LD_INT 1
41396: DOUBLE
41397: EQUAL
41398: IFTRUE 41402
41400: GO 41616
41402: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41403: LD_ADDR_VAR 0 4
41407: PUSH
41408: LD_INT 35
41410: PUSH
41411: LD_INT 45
41413: PUSH
41414: LD_INT 46
41416: PUSH
41417: LD_INT 47
41419: PUSH
41420: LD_INT 82
41422: PUSH
41423: LD_INT 83
41425: PUSH
41426: LD_INT 84
41428: PUSH
41429: LD_INT 85
41431: PUSH
41432: LD_INT 86
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: LD_INT 2
41440: PUSH
41441: LD_INT 6
41443: PUSH
41444: LD_INT 15
41446: PUSH
41447: LD_INT 16
41449: PUSH
41450: LD_INT 7
41452: PUSH
41453: LD_INT 12
41455: PUSH
41456: LD_INT 13
41458: PUSH
41459: LD_INT 10
41461: PUSH
41462: LD_INT 14
41464: PUSH
41465: LD_INT 20
41467: PUSH
41468: LD_INT 21
41470: PUSH
41471: LD_INT 22
41473: PUSH
41474: LD_INT 25
41476: PUSH
41477: LD_INT 32
41479: PUSH
41480: LD_INT 27
41482: PUSH
41483: LD_INT 36
41485: PUSH
41486: LD_INT 69
41488: PUSH
41489: LD_INT 39
41491: PUSH
41492: LD_INT 34
41494: PUSH
41495: LD_INT 40
41497: PUSH
41498: LD_INT 48
41500: PUSH
41501: LD_INT 49
41503: PUSH
41504: LD_INT 50
41506: PUSH
41507: LD_INT 51
41509: PUSH
41510: LD_INT 52
41512: PUSH
41513: LD_INT 53
41515: PUSH
41516: LD_INT 54
41518: PUSH
41519: LD_INT 55
41521: PUSH
41522: LD_INT 56
41524: PUSH
41525: LD_INT 57
41527: PUSH
41528: LD_INT 58
41530: PUSH
41531: LD_INT 59
41533: PUSH
41534: LD_INT 60
41536: PUSH
41537: LD_INT 61
41539: PUSH
41540: LD_INT 62
41542: PUSH
41543: LD_INT 80
41545: PUSH
41546: LD_INT 82
41548: PUSH
41549: LD_INT 83
41551: PUSH
41552: LD_INT 84
41554: PUSH
41555: LD_INT 85
41557: PUSH
41558: LD_INT 86
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: ST_TO_ADDR
41614: GO 42081
41616: LD_INT 2
41618: DOUBLE
41619: EQUAL
41620: IFTRUE 41624
41622: GO 41850
41624: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41625: LD_ADDR_VAR 0 4
41629: PUSH
41630: LD_INT 35
41632: PUSH
41633: LD_INT 45
41635: PUSH
41636: LD_INT 46
41638: PUSH
41639: LD_INT 47
41641: PUSH
41642: LD_INT 82
41644: PUSH
41645: LD_INT 83
41647: PUSH
41648: LD_INT 84
41650: PUSH
41651: LD_INT 85
41653: PUSH
41654: LD_INT 87
41656: PUSH
41657: LD_INT 70
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: LD_INT 11
41665: PUSH
41666: LD_INT 3
41668: PUSH
41669: LD_INT 4
41671: PUSH
41672: LD_INT 5
41674: PUSH
41675: LD_INT 6
41677: PUSH
41678: LD_INT 15
41680: PUSH
41681: LD_INT 18
41683: PUSH
41684: LD_INT 7
41686: PUSH
41687: LD_INT 17
41689: PUSH
41690: LD_INT 8
41692: PUSH
41693: LD_INT 20
41695: PUSH
41696: LD_INT 21
41698: PUSH
41699: LD_INT 22
41701: PUSH
41702: LD_INT 72
41704: PUSH
41705: LD_INT 26
41707: PUSH
41708: LD_INT 69
41710: PUSH
41711: LD_INT 39
41713: PUSH
41714: LD_INT 40
41716: PUSH
41717: LD_INT 41
41719: PUSH
41720: LD_INT 42
41722: PUSH
41723: LD_INT 43
41725: PUSH
41726: LD_INT 48
41728: PUSH
41729: LD_INT 49
41731: PUSH
41732: LD_INT 50
41734: PUSH
41735: LD_INT 51
41737: PUSH
41738: LD_INT 52
41740: PUSH
41741: LD_INT 53
41743: PUSH
41744: LD_INT 54
41746: PUSH
41747: LD_INT 55
41749: PUSH
41750: LD_INT 56
41752: PUSH
41753: LD_INT 60
41755: PUSH
41756: LD_INT 61
41758: PUSH
41759: LD_INT 62
41761: PUSH
41762: LD_INT 66
41764: PUSH
41765: LD_INT 67
41767: PUSH
41768: LD_INT 68
41770: PUSH
41771: LD_INT 81
41773: PUSH
41774: LD_INT 82
41776: PUSH
41777: LD_INT 83
41779: PUSH
41780: LD_INT 84
41782: PUSH
41783: LD_INT 85
41785: PUSH
41786: LD_INT 87
41788: PUSH
41789: LD_INT 88
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: ST_TO_ADDR
41848: GO 42081
41850: LD_INT 3
41852: DOUBLE
41853: EQUAL
41854: IFTRUE 41858
41856: GO 42080
41858: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41859: LD_ADDR_VAR 0 4
41863: PUSH
41864: LD_INT 46
41866: PUSH
41867: LD_INT 47
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: LD_INT 2
41875: PUSH
41876: LD_INT 82
41878: PUSH
41879: LD_INT 83
41881: PUSH
41882: LD_INT 84
41884: PUSH
41885: LD_INT 85
41887: PUSH
41888: LD_INT 86
41890: PUSH
41891: LD_INT 11
41893: PUSH
41894: LD_INT 9
41896: PUSH
41897: LD_INT 20
41899: PUSH
41900: LD_INT 19
41902: PUSH
41903: LD_INT 21
41905: PUSH
41906: LD_INT 24
41908: PUSH
41909: LD_INT 22
41911: PUSH
41912: LD_INT 25
41914: PUSH
41915: LD_INT 28
41917: PUSH
41918: LD_INT 29
41920: PUSH
41921: LD_INT 30
41923: PUSH
41924: LD_INT 31
41926: PUSH
41927: LD_INT 37
41929: PUSH
41930: LD_INT 38
41932: PUSH
41933: LD_INT 32
41935: PUSH
41936: LD_INT 27
41938: PUSH
41939: LD_INT 33
41941: PUSH
41942: LD_INT 69
41944: PUSH
41945: LD_INT 39
41947: PUSH
41948: LD_INT 34
41950: PUSH
41951: LD_INT 40
41953: PUSH
41954: LD_INT 71
41956: PUSH
41957: LD_INT 23
41959: PUSH
41960: LD_INT 44
41962: PUSH
41963: LD_INT 48
41965: PUSH
41966: LD_INT 49
41968: PUSH
41969: LD_INT 50
41971: PUSH
41972: LD_INT 51
41974: PUSH
41975: LD_INT 52
41977: PUSH
41978: LD_INT 53
41980: PUSH
41981: LD_INT 54
41983: PUSH
41984: LD_INT 55
41986: PUSH
41987: LD_INT 56
41989: PUSH
41990: LD_INT 57
41992: PUSH
41993: LD_INT 58
41995: PUSH
41996: LD_INT 59
41998: PUSH
41999: LD_INT 63
42001: PUSH
42002: LD_INT 64
42004: PUSH
42005: LD_INT 65
42007: PUSH
42008: LD_INT 82
42010: PUSH
42011: LD_INT 83
42013: PUSH
42014: LD_INT 84
42016: PUSH
42017: LD_INT 85
42019: PUSH
42020: LD_INT 86
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: ST_TO_ADDR
42078: GO 42081
42080: POP
// if state > - 1 and state < 3 then
42081: LD_VAR 0 3
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: GREATER
42090: IFFALSE 42102
42092: PUSH
42093: LD_VAR 0 3
42097: PUSH
42098: LD_INT 3
42100: LESS
42101: AND
42102: IFFALSE 42159
// for i in result do
42104: LD_ADDR_VAR 0 5
42108: PUSH
42109: LD_VAR 0 4
42113: PUSH
42114: FOR_IN
42115: IFFALSE 42157
// if GetTech ( i , side ) <> state then
42117: LD_VAR 0 5
42121: PPUSH
42122: LD_VAR 0 1
42126: PPUSH
42127: CALL_OW 321
42131: PUSH
42132: LD_VAR 0 3
42136: NONEQUAL
42137: IFFALSE 42155
// result := result diff i ;
42139: LD_ADDR_VAR 0 4
42143: PUSH
42144: LD_VAR 0 4
42148: PUSH
42149: LD_VAR 0 5
42153: DIFF
42154: ST_TO_ADDR
42155: GO 42114
42157: POP
42158: POP
// end ;
42159: LD_VAR 0 4
42163: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42164: LD_INT 0
42166: PPUSH
42167: PPUSH
42168: PPUSH
// result := true ;
42169: LD_ADDR_VAR 0 3
42173: PUSH
42174: LD_INT 1
42176: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42177: LD_ADDR_VAR 0 5
42181: PUSH
42182: LD_VAR 0 2
42186: PPUSH
42187: CALL_OW 480
42191: ST_TO_ADDR
// if not tmp then
42192: LD_VAR 0 5
42196: NOT
42197: IFFALSE 42201
// exit ;
42199: GO 42250
// for i in tmp do
42201: LD_ADDR_VAR 0 4
42205: PUSH
42206: LD_VAR 0 5
42210: PUSH
42211: FOR_IN
42212: IFFALSE 42248
// if GetTech ( i , side ) <> state_researched then
42214: LD_VAR 0 4
42218: PPUSH
42219: LD_VAR 0 1
42223: PPUSH
42224: CALL_OW 321
42228: PUSH
42229: LD_INT 2
42231: NONEQUAL
42232: IFFALSE 42246
// begin result := false ;
42234: LD_ADDR_VAR 0 3
42238: PUSH
42239: LD_INT 0
42241: ST_TO_ADDR
// exit ;
42242: POP
42243: POP
42244: GO 42250
// end ;
42246: GO 42211
42248: POP
42249: POP
// end ;
42250: LD_VAR 0 3
42254: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42255: LD_INT 0
42257: PPUSH
42258: PPUSH
42259: PPUSH
42260: PPUSH
42261: PPUSH
42262: PPUSH
42263: PPUSH
42264: PPUSH
42265: PPUSH
42266: PPUSH
42267: PPUSH
42268: PPUSH
42269: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42270: LD_VAR 0 1
42274: NOT
42275: IFTRUE 42292
42277: PUSH
42278: LD_VAR 0 1
42282: PPUSH
42283: CALL_OW 257
42287: PUSH
42288: LD_INT 9
42290: NONEQUAL
42291: OR
42292: IFFALSE 42296
// exit ;
42294: GO 42875
// side := GetSide ( unit ) ;
42296: LD_ADDR_VAR 0 9
42300: PUSH
42301: LD_VAR 0 1
42305: PPUSH
42306: CALL_OW 255
42310: ST_TO_ADDR
// tech_space := tech_spacanom ;
42311: LD_ADDR_VAR 0 12
42315: PUSH
42316: LD_INT 29
42318: ST_TO_ADDR
// tech_time := tech_taurad ;
42319: LD_ADDR_VAR 0 13
42323: PUSH
42324: LD_INT 28
42326: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42327: LD_ADDR_VAR 0 11
42331: PUSH
42332: LD_VAR 0 1
42336: PPUSH
42337: CALL_OW 310
42341: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42342: LD_VAR 0 11
42346: PPUSH
42347: CALL_OW 247
42351: PUSH
42352: LD_INT 2
42354: EQUAL
42355: IFFALSE 42359
// exit ;
42357: GO 42875
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42359: LD_ADDR_VAR 0 8
42363: PUSH
42364: LD_INT 81
42366: PUSH
42367: LD_VAR 0 9
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 3
42378: PUSH
42379: LD_INT 21
42381: PUSH
42382: LD_INT 3
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PPUSH
42397: CALL_OW 69
42401: ST_TO_ADDR
// if not tmp then
42402: LD_VAR 0 8
42406: NOT
42407: IFFALSE 42411
// exit ;
42409: GO 42875
// if in_unit then
42411: LD_VAR 0 11
42415: IFFALSE 42439
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42417: LD_ADDR_VAR 0 10
42421: PUSH
42422: LD_VAR 0 8
42426: PPUSH
42427: LD_VAR 0 11
42431: PPUSH
42432: CALL_OW 74
42436: ST_TO_ADDR
42437: GO 42459
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42439: LD_ADDR_VAR 0 10
42443: PUSH
42444: LD_VAR 0 8
42448: PPUSH
42449: LD_VAR 0 1
42453: PPUSH
42454: CALL_OW 74
42458: ST_TO_ADDR
// if not enemy then
42459: LD_VAR 0 10
42463: NOT
42464: IFFALSE 42468
// exit ;
42466: GO 42875
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42468: LD_VAR 0 11
42472: IFFALSE 42494
42474: PUSH
42475: LD_VAR 0 11
42479: PPUSH
42480: LD_VAR 0 10
42484: PPUSH
42485: CALL_OW 296
42489: PUSH
42490: LD_INT 13
42492: GREATER
42493: AND
42494: IFTRUE 42516
42496: PUSH
42497: LD_VAR 0 1
42501: PPUSH
42502: LD_VAR 0 10
42506: PPUSH
42507: CALL_OW 296
42511: PUSH
42512: LD_INT 12
42514: GREATER
42515: OR
42516: IFFALSE 42520
// exit ;
42518: GO 42875
// missile := [ 1 ] ;
42520: LD_ADDR_VAR 0 14
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: EMPTY
42529: LIST
42530: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42531: LD_VAR 0 9
42535: PPUSH
42536: LD_VAR 0 12
42540: PPUSH
42541: CALL_OW 325
42545: IFFALSE 42574
// missile := Replace ( missile , missile + 1 , 2 ) ;
42547: LD_ADDR_VAR 0 14
42551: PUSH
42552: LD_VAR 0 14
42556: PPUSH
42557: LD_VAR 0 14
42561: PUSH
42562: LD_INT 1
42564: PLUS
42565: PPUSH
42566: LD_INT 2
42568: PPUSH
42569: CALL_OW 1
42573: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42574: LD_VAR 0 9
42578: PPUSH
42579: LD_VAR 0 13
42583: PPUSH
42584: CALL_OW 325
42588: IFFALSE 42612
42590: PUSH
42591: LD_VAR 0 10
42595: PPUSH
42596: CALL_OW 255
42600: PPUSH
42601: LD_VAR 0 13
42605: PPUSH
42606: CALL_OW 325
42610: NOT
42611: AND
42612: IFFALSE 42641
// missile := Replace ( missile , missile + 1 , 3 ) ;
42614: LD_ADDR_VAR 0 14
42618: PUSH
42619: LD_VAR 0 14
42623: PPUSH
42624: LD_VAR 0 14
42628: PUSH
42629: LD_INT 1
42631: PLUS
42632: PPUSH
42633: LD_INT 3
42635: PPUSH
42636: CALL_OW 1
42640: ST_TO_ADDR
// if missile < 2 then
42641: LD_VAR 0 14
42645: PUSH
42646: LD_INT 2
42648: LESS
42649: IFFALSE 42653
// exit ;
42651: GO 42875
// x := GetX ( enemy ) ;
42653: LD_ADDR_VAR 0 4
42657: PUSH
42658: LD_VAR 0 10
42662: PPUSH
42663: CALL_OW 250
42667: ST_TO_ADDR
// y := GetY ( enemy ) ;
42668: LD_ADDR_VAR 0 5
42672: PUSH
42673: LD_VAR 0 10
42677: PPUSH
42678: CALL_OW 251
42682: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42683: LD_ADDR_VAR 0 6
42687: PUSH
42688: LD_VAR 0 4
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PPUSH
42697: LD_INT 1
42699: PPUSH
42700: CALL_OW 12
42704: PLUS
42705: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42706: LD_ADDR_VAR 0 7
42710: PUSH
42711: LD_VAR 0 5
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PPUSH
42720: LD_INT 1
42722: PPUSH
42723: CALL_OW 12
42727: PLUS
42728: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42729: LD_VAR 0 6
42733: PPUSH
42734: LD_VAR 0 7
42738: PPUSH
42739: CALL_OW 488
42743: NOT
42744: IFFALSE 42766
// begin _x := x ;
42746: LD_ADDR_VAR 0 6
42750: PUSH
42751: LD_VAR 0 4
42755: ST_TO_ADDR
// _y := y ;
42756: LD_ADDR_VAR 0 7
42760: PUSH
42761: LD_VAR 0 5
42765: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42766: LD_ADDR_VAR 0 3
42770: PUSH
42771: LD_INT 1
42773: PPUSH
42774: LD_VAR 0 14
42778: PPUSH
42779: CALL_OW 12
42783: ST_TO_ADDR
// case i of 1 :
42784: LD_VAR 0 3
42788: PUSH
42789: LD_INT 1
42791: DOUBLE
42792: EQUAL
42793: IFTRUE 42797
42795: GO 42814
42797: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42798: LD_VAR 0 1
42802: PPUSH
42803: LD_VAR 0 10
42807: PPUSH
42808: CALL_OW 115
42812: GO 42875
42814: LD_INT 2
42816: DOUBLE
42817: EQUAL
42818: IFTRUE 42822
42820: GO 42844
42822: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42823: LD_VAR 0 1
42827: PPUSH
42828: LD_VAR 0 6
42832: PPUSH
42833: LD_VAR 0 7
42837: PPUSH
42838: CALL_OW 153
42842: GO 42875
42844: LD_INT 3
42846: DOUBLE
42847: EQUAL
42848: IFTRUE 42852
42850: GO 42874
42852: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42853: LD_VAR 0 1
42857: PPUSH
42858: LD_VAR 0 6
42862: PPUSH
42863: LD_VAR 0 7
42867: PPUSH
42868: CALL_OW 154
42872: GO 42875
42874: POP
// end ;
42875: LD_VAR 0 2
42879: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42880: LD_INT 0
42882: PPUSH
42883: PPUSH
42884: PPUSH
42885: PPUSH
42886: PPUSH
42887: PPUSH
// if not unit or not building then
42888: LD_VAR 0 1
42892: NOT
42893: IFTRUE 42902
42895: PUSH
42896: LD_VAR 0 2
42900: NOT
42901: OR
42902: IFFALSE 42906
// exit ;
42904: GO 43064
// x := GetX ( building ) ;
42906: LD_ADDR_VAR 0 5
42910: PUSH
42911: LD_VAR 0 2
42915: PPUSH
42916: CALL_OW 250
42920: ST_TO_ADDR
// y := GetY ( building ) ;
42921: LD_ADDR_VAR 0 6
42925: PUSH
42926: LD_VAR 0 2
42930: PPUSH
42931: CALL_OW 251
42935: ST_TO_ADDR
// for i := 0 to 5 do
42936: LD_ADDR_VAR 0 4
42940: PUSH
42941: DOUBLE
42942: LD_INT 0
42944: DEC
42945: ST_TO_ADDR
42946: LD_INT 5
42948: PUSH
42949: FOR_TO
42950: IFFALSE 43062
// begin _x := ShiftX ( x , i , 3 ) ;
42952: LD_ADDR_VAR 0 7
42956: PUSH
42957: LD_VAR 0 5
42961: PPUSH
42962: LD_VAR 0 4
42966: PPUSH
42967: LD_INT 3
42969: PPUSH
42970: CALL_OW 272
42974: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42975: LD_ADDR_VAR 0 8
42979: PUSH
42980: LD_VAR 0 6
42984: PPUSH
42985: LD_VAR 0 4
42989: PPUSH
42990: LD_INT 3
42992: PPUSH
42993: CALL_OW 273
42997: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42998: LD_VAR 0 7
43002: PPUSH
43003: LD_VAR 0 8
43007: PPUSH
43008: CALL_OW 488
43012: NOT
43013: IFFALSE 43017
// continue ;
43015: GO 42949
// if HexInfo ( _x , _y ) = 0 then
43017: LD_VAR 0 7
43021: PPUSH
43022: LD_VAR 0 8
43026: PPUSH
43027: CALL_OW 428
43031: PUSH
43032: LD_INT 0
43034: EQUAL
43035: IFFALSE 43060
// begin ComMoveXY ( unit , _x , _y ) ;
43037: LD_VAR 0 1
43041: PPUSH
43042: LD_VAR 0 7
43046: PPUSH
43047: LD_VAR 0 8
43051: PPUSH
43052: CALL_OW 111
// exit ;
43056: POP
43057: POP
43058: GO 43064
// end ; end ;
43060: GO 42949
43062: POP
43063: POP
// end ;
43064: LD_VAR 0 3
43068: RET
// export function ScanBase ( side , base_area ) ; begin
43069: LD_INT 0
43071: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43072: LD_ADDR_VAR 0 3
43076: PUSH
43077: LD_VAR 0 2
43081: PPUSH
43082: LD_INT 81
43084: PUSH
43085: LD_VAR 0 1
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PPUSH
43094: CALL_OW 70
43098: ST_TO_ADDR
// end ;
43099: LD_VAR 0 3
43103: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43104: LD_INT 0
43106: PPUSH
43107: PPUSH
43108: PPUSH
43109: PPUSH
// result := false ;
43110: LD_ADDR_VAR 0 2
43114: PUSH
43115: LD_INT 0
43117: ST_TO_ADDR
// side := GetSide ( unit ) ;
43118: LD_ADDR_VAR 0 3
43122: PUSH
43123: LD_VAR 0 1
43127: PPUSH
43128: CALL_OW 255
43132: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43133: LD_ADDR_VAR 0 4
43137: PUSH
43138: LD_VAR 0 1
43142: PPUSH
43143: CALL_OW 248
43147: ST_TO_ADDR
// case nat of 1 :
43148: LD_VAR 0 4
43152: PUSH
43153: LD_INT 1
43155: DOUBLE
43156: EQUAL
43157: IFTRUE 43161
43159: GO 43172
43161: POP
// tech := tech_lassight ; 2 :
43162: LD_ADDR_VAR 0 5
43166: PUSH
43167: LD_INT 12
43169: ST_TO_ADDR
43170: GO 43211
43172: LD_INT 2
43174: DOUBLE
43175: EQUAL
43176: IFTRUE 43180
43178: GO 43191
43180: POP
// tech := tech_mortar ; 3 :
43181: LD_ADDR_VAR 0 5
43185: PUSH
43186: LD_INT 41
43188: ST_TO_ADDR
43189: GO 43211
43191: LD_INT 3
43193: DOUBLE
43194: EQUAL
43195: IFTRUE 43199
43197: GO 43210
43199: POP
// tech := tech_bazooka ; end ;
43200: LD_ADDR_VAR 0 5
43204: PUSH
43205: LD_INT 44
43207: ST_TO_ADDR
43208: GO 43211
43210: POP
// if Researched ( side , tech ) then
43211: LD_VAR 0 3
43215: PPUSH
43216: LD_VAR 0 5
43220: PPUSH
43221: CALL_OW 325
43225: IFFALSE 43252
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43227: LD_ADDR_VAR 0 2
43231: PUSH
43232: LD_INT 5
43234: PUSH
43235: LD_INT 8
43237: PUSH
43238: LD_INT 9
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: LIST
43245: PUSH
43246: LD_VAR 0 4
43250: ARRAY
43251: ST_TO_ADDR
// end ;
43252: LD_VAR 0 2
43256: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43257: LD_INT 0
43259: PPUSH
43260: PPUSH
43261: PPUSH
// if not mines then
43262: LD_VAR 0 2
43266: NOT
43267: IFFALSE 43271
// exit ;
43269: GO 43415
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43271: LD_ADDR_VAR 0 5
43275: PUSH
43276: LD_INT 81
43278: PUSH
43279: LD_VAR 0 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 3
43290: PUSH
43291: LD_INT 21
43293: PUSH
43294: LD_INT 3
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PPUSH
43309: CALL_OW 69
43313: ST_TO_ADDR
// for i in mines do
43314: LD_ADDR_VAR 0 4
43318: PUSH
43319: LD_VAR 0 2
43323: PUSH
43324: FOR_IN
43325: IFFALSE 43413
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43327: LD_VAR 0 4
43331: PUSH
43332: LD_INT 1
43334: ARRAY
43335: PPUSH
43336: LD_VAR 0 4
43340: PUSH
43341: LD_INT 2
43343: ARRAY
43344: PPUSH
43345: CALL_OW 458
43349: NOT
43350: IFFALSE 43354
// continue ;
43352: GO 43324
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43354: LD_VAR 0 4
43358: PUSH
43359: LD_INT 1
43361: ARRAY
43362: PPUSH
43363: LD_VAR 0 4
43367: PUSH
43368: LD_INT 2
43370: ARRAY
43371: PPUSH
43372: CALL_OW 428
43376: PUSH
43377: LD_VAR 0 5
43381: IN
43382: IFFALSE 43411
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43384: LD_VAR 0 4
43388: PUSH
43389: LD_INT 1
43391: ARRAY
43392: PPUSH
43393: LD_VAR 0 4
43397: PUSH
43398: LD_INT 2
43400: ARRAY
43401: PPUSH
43402: LD_VAR 0 1
43406: PPUSH
43407: CALL_OW 456
// end ;
43411: GO 43324
43413: POP
43414: POP
// end ;
43415: LD_VAR 0 3
43419: RET
// export function Count ( array ) ; begin
43420: LD_INT 0
43422: PPUSH
// result := array + 0 ;
43423: LD_ADDR_VAR 0 2
43427: PUSH
43428: LD_VAR 0 1
43432: PUSH
43433: LD_INT 0
43435: PLUS
43436: ST_TO_ADDR
// end ;
43437: LD_VAR 0 2
43441: RET
// export function IsEmpty ( building ) ; begin
43442: LD_INT 0
43444: PPUSH
// if not building then
43445: LD_VAR 0 1
43449: NOT
43450: IFFALSE 43454
// exit ;
43452: GO 43497
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43454: LD_ADDR_VAR 0 2
43458: PUSH
43459: LD_VAR 0 1
43463: PUSH
43464: LD_INT 22
43466: PUSH
43467: LD_VAR 0 1
43471: PPUSH
43472: CALL_OW 255
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 58
43483: PUSH
43484: EMPTY
43485: LIST
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PPUSH
43491: CALL_OW 69
43495: IN
43496: ST_TO_ADDR
// end ;
43497: LD_VAR 0 2
43501: RET
// export function IsNotFull ( building ) ; var places ; begin
43502: LD_INT 0
43504: PPUSH
43505: PPUSH
// if not building then
43506: LD_VAR 0 1
43510: NOT
43511: IFFALSE 43515
// exit ;
43513: GO 43543
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43515: LD_ADDR_VAR 0 2
43519: PUSH
43520: LD_VAR 0 1
43524: PPUSH
43525: LD_INT 3
43527: PUSH
43528: LD_INT 62
43530: PUSH
43531: EMPTY
43532: LIST
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PPUSH
43538: CALL_OW 72
43542: ST_TO_ADDR
// end ;
43543: LD_VAR 0 2
43547: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43548: LD_INT 0
43550: PPUSH
43551: PPUSH
43552: PPUSH
43553: PPUSH
// tmp := [ ] ;
43554: LD_ADDR_VAR 0 3
43558: PUSH
43559: EMPTY
43560: ST_TO_ADDR
// list := [ ] ;
43561: LD_ADDR_VAR 0 5
43565: PUSH
43566: EMPTY
43567: ST_TO_ADDR
// for i = 16 to 25 do
43568: LD_ADDR_VAR 0 4
43572: PUSH
43573: DOUBLE
43574: LD_INT 16
43576: DEC
43577: ST_TO_ADDR
43578: LD_INT 25
43580: PUSH
43581: FOR_TO
43582: IFFALSE 43655
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43584: LD_ADDR_VAR 0 3
43588: PUSH
43589: LD_VAR 0 3
43593: PUSH
43594: LD_INT 22
43596: PUSH
43597: LD_VAR 0 1
43601: PPUSH
43602: CALL_OW 255
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 91
43613: PUSH
43614: LD_VAR 0 1
43618: PUSH
43619: LD_INT 6
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 30
43629: PUSH
43630: LD_VAR 0 4
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: LIST
43643: PUSH
43644: EMPTY
43645: LIST
43646: PPUSH
43647: CALL_OW 69
43651: ADD
43652: ST_TO_ADDR
43653: GO 43581
43655: POP
43656: POP
// for i = 1 to tmp do
43657: LD_ADDR_VAR 0 4
43661: PUSH
43662: DOUBLE
43663: LD_INT 1
43665: DEC
43666: ST_TO_ADDR
43667: LD_VAR 0 3
43671: PUSH
43672: FOR_TO
43673: IFFALSE 43761
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43675: LD_ADDR_VAR 0 5
43679: PUSH
43680: LD_VAR 0 5
43684: PUSH
43685: LD_VAR 0 3
43689: PUSH
43690: LD_VAR 0 4
43694: ARRAY
43695: PPUSH
43696: CALL_OW 266
43700: PUSH
43701: LD_VAR 0 3
43705: PUSH
43706: LD_VAR 0 4
43710: ARRAY
43711: PPUSH
43712: CALL_OW 250
43716: PUSH
43717: LD_VAR 0 3
43721: PUSH
43722: LD_VAR 0 4
43726: ARRAY
43727: PPUSH
43728: CALL_OW 251
43732: PUSH
43733: LD_VAR 0 3
43737: PUSH
43738: LD_VAR 0 4
43742: ARRAY
43743: PPUSH
43744: CALL_OW 254
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: PUSH
43755: EMPTY
43756: LIST
43757: ADD
43758: ST_TO_ADDR
43759: GO 43672
43761: POP
43762: POP
// result := list ;
43763: LD_ADDR_VAR 0 2
43767: PUSH
43768: LD_VAR 0 5
43772: ST_TO_ADDR
// end ;
43773: LD_VAR 0 2
43777: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43778: LD_INT 0
43780: PPUSH
43781: PPUSH
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
43786: PPUSH
// if not factory then
43787: LD_VAR 0 1
43791: NOT
43792: IFFALSE 43796
// exit ;
43794: GO 44399
// if control = control_apeman then
43796: LD_VAR 0 4
43800: PUSH
43801: LD_INT 5
43803: EQUAL
43804: IFFALSE 43913
// begin tmp := UnitsInside ( factory ) ;
43806: LD_ADDR_VAR 0 8
43810: PUSH
43811: LD_VAR 0 1
43815: PPUSH
43816: CALL_OW 313
43820: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43821: LD_VAR 0 8
43825: PPUSH
43826: LD_INT 25
43828: PUSH
43829: LD_INT 12
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PPUSH
43836: CALL_OW 72
43840: NOT
43841: IFFALSE 43851
// control := control_manual ;
43843: LD_ADDR_VAR 0 4
43847: PUSH
43848: LD_INT 1
43850: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43851: LD_ADDR_VAR 0 8
43855: PUSH
43856: LD_VAR 0 1
43860: PPUSH
43861: CALL 43548 0 1
43865: ST_TO_ADDR
// if tmp then
43866: LD_VAR 0 8
43870: IFFALSE 43913
// begin for i in tmp do
43872: LD_ADDR_VAR 0 7
43876: PUSH
43877: LD_VAR 0 8
43881: PUSH
43882: FOR_IN
43883: IFFALSE 43911
// if i [ 1 ] = b_ext_radio then
43885: LD_VAR 0 7
43889: PUSH
43890: LD_INT 1
43892: ARRAY
43893: PUSH
43894: LD_INT 22
43896: EQUAL
43897: IFFALSE 43909
// begin control := control_remote ;
43899: LD_ADDR_VAR 0 4
43903: PUSH
43904: LD_INT 2
43906: ST_TO_ADDR
// break ;
43907: GO 43911
// end ;
43909: GO 43882
43911: POP
43912: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43913: LD_VAR 0 1
43917: PPUSH
43918: LD_VAR 0 2
43922: PPUSH
43923: LD_VAR 0 3
43927: PPUSH
43928: LD_VAR 0 4
43932: PPUSH
43933: LD_VAR 0 5
43937: PPUSH
43938: CALL_OW 448
43942: IFFALSE 43977
// begin result := [ chassis , engine , control , weapon ] ;
43944: LD_ADDR_VAR 0 6
43948: PUSH
43949: LD_VAR 0 2
43953: PUSH
43954: LD_VAR 0 3
43958: PUSH
43959: LD_VAR 0 4
43963: PUSH
43964: LD_VAR 0 5
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: ST_TO_ADDR
// exit ;
43975: GO 44399
// end ; _chassis := AvailableChassisList ( factory ) ;
43977: LD_ADDR_VAR 0 9
43981: PUSH
43982: LD_VAR 0 1
43986: PPUSH
43987: CALL_OW 475
43991: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43992: LD_ADDR_VAR 0 11
43996: PUSH
43997: LD_VAR 0 1
44001: PPUSH
44002: CALL_OW 476
44006: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44007: LD_ADDR_VAR 0 12
44011: PUSH
44012: LD_VAR 0 1
44016: PPUSH
44017: CALL_OW 477
44021: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44022: LD_ADDR_VAR 0 10
44026: PUSH
44027: LD_VAR 0 1
44031: PPUSH
44032: CALL_OW 478
44036: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44037: LD_VAR 0 9
44041: NOT
44042: IFTRUE 44051
44044: PUSH
44045: LD_VAR 0 11
44049: NOT
44050: OR
44051: IFTRUE 44060
44053: PUSH
44054: LD_VAR 0 12
44058: NOT
44059: OR
44060: IFTRUE 44069
44062: PUSH
44063: LD_VAR 0 10
44067: NOT
44068: OR
44069: IFFALSE 44104
// begin result := [ chassis , engine , control , weapon ] ;
44071: LD_ADDR_VAR 0 6
44075: PUSH
44076: LD_VAR 0 2
44080: PUSH
44081: LD_VAR 0 3
44085: PUSH
44086: LD_VAR 0 4
44090: PUSH
44091: LD_VAR 0 5
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: ST_TO_ADDR
// exit ;
44102: GO 44399
// end ; if not chassis in _chassis then
44104: LD_VAR 0 2
44108: PUSH
44109: LD_VAR 0 9
44113: IN
44114: NOT
44115: IFFALSE 44141
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44117: LD_ADDR_VAR 0 2
44121: PUSH
44122: LD_VAR 0 9
44126: PUSH
44127: LD_INT 1
44129: PPUSH
44130: LD_VAR 0 9
44134: PPUSH
44135: CALL_OW 12
44139: ARRAY
44140: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44141: LD_VAR 0 2
44145: PPUSH
44146: LD_VAR 0 3
44150: PPUSH
44151: CALL 44404 0 2
44155: NOT
44156: IFFALSE 44217
// repeat engine := _engine [ 1 ] ;
44158: LD_ADDR_VAR 0 3
44162: PUSH
44163: LD_VAR 0 11
44167: PUSH
44168: LD_INT 1
44170: ARRAY
44171: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44172: LD_ADDR_VAR 0 11
44176: PUSH
44177: LD_VAR 0 11
44181: PPUSH
44182: LD_INT 1
44184: PPUSH
44185: CALL_OW 3
44189: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44190: LD_VAR 0 2
44194: PPUSH
44195: LD_VAR 0 3
44199: PPUSH
44200: CALL 44404 0 2
44204: IFTRUE 44215
44206: PUSH
44207: LD_VAR 0 11
44211: PUSH
44212: EMPTY
44213: EQUAL
44214: OR
44215: IFFALSE 44158
// if not control in _control then
44217: LD_VAR 0 4
44221: PUSH
44222: LD_VAR 0 12
44226: IN
44227: NOT
44228: IFFALSE 44254
// control := _control [ rand ( 1 , _control ) ] ;
44230: LD_ADDR_VAR 0 4
44234: PUSH
44235: LD_VAR 0 12
44239: PUSH
44240: LD_INT 1
44242: PPUSH
44243: LD_VAR 0 12
44247: PPUSH
44248: CALL_OW 12
44252: ARRAY
44253: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44254: LD_VAR 0 2
44258: PPUSH
44259: LD_VAR 0 5
44263: PPUSH
44264: CALL 44626 0 2
44268: NOT
44269: IFFALSE 44330
// repeat weapon := _weapon [ 1 ] ;
44271: LD_ADDR_VAR 0 5
44275: PUSH
44276: LD_VAR 0 10
44280: PUSH
44281: LD_INT 1
44283: ARRAY
44284: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44285: LD_ADDR_VAR 0 10
44289: PUSH
44290: LD_VAR 0 10
44294: PPUSH
44295: LD_INT 1
44297: PPUSH
44298: CALL_OW 3
44302: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44303: LD_VAR 0 2
44307: PPUSH
44308: LD_VAR 0 5
44312: PPUSH
44313: CALL 44626 0 2
44317: IFTRUE 44328
44319: PUSH
44320: LD_VAR 0 10
44324: PUSH
44325: EMPTY
44326: EQUAL
44327: OR
44328: IFFALSE 44271
// result := [ ] ;
44330: LD_ADDR_VAR 0 6
44334: PUSH
44335: EMPTY
44336: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44337: LD_VAR 0 1
44341: PPUSH
44342: LD_VAR 0 2
44346: PPUSH
44347: LD_VAR 0 3
44351: PPUSH
44352: LD_VAR 0 4
44356: PPUSH
44357: LD_VAR 0 5
44361: PPUSH
44362: CALL_OW 448
44366: IFFALSE 44399
// result := [ chassis , engine , control , weapon ] ;
44368: LD_ADDR_VAR 0 6
44372: PUSH
44373: LD_VAR 0 2
44377: PUSH
44378: LD_VAR 0 3
44382: PUSH
44383: LD_VAR 0 4
44387: PUSH
44388: LD_VAR 0 5
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: ST_TO_ADDR
// end ;
44399: LD_VAR 0 6
44403: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44404: LD_INT 0
44406: PPUSH
// if not chassis or not engine then
44407: LD_VAR 0 1
44411: NOT
44412: IFTRUE 44421
44414: PUSH
44415: LD_VAR 0 2
44419: NOT
44420: OR
44421: IFFALSE 44425
// exit ;
44423: GO 44621
// case engine of engine_solar :
44425: LD_VAR 0 2
44429: PUSH
44430: LD_INT 2
44432: DOUBLE
44433: EQUAL
44434: IFTRUE 44438
44436: GO 44476
44438: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44439: LD_ADDR_VAR 0 3
44443: PUSH
44444: LD_INT 11
44446: PUSH
44447: LD_INT 12
44449: PUSH
44450: LD_INT 13
44452: PUSH
44453: LD_INT 14
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: LD_INT 3
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: ST_TO_ADDR
44474: GO 44605
44476: LD_INT 1
44478: DOUBLE
44479: EQUAL
44480: IFTRUE 44484
44482: GO 44546
44484: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44485: LD_ADDR_VAR 0 3
44489: PUSH
44490: LD_INT 11
44492: PUSH
44493: LD_INT 12
44495: PUSH
44496: LD_INT 13
44498: PUSH
44499: LD_INT 14
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: LD_INT 2
44507: PUSH
44508: LD_INT 3
44510: PUSH
44511: LD_INT 4
44513: PUSH
44514: LD_INT 5
44516: PUSH
44517: LD_INT 21
44519: PUSH
44520: LD_INT 23
44522: PUSH
44523: LD_INT 22
44525: PUSH
44526: LD_INT 24
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: ST_TO_ADDR
44544: GO 44605
44546: LD_INT 3
44548: DOUBLE
44549: EQUAL
44550: IFTRUE 44554
44552: GO 44604
44554: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44555: LD_ADDR_VAR 0 3
44559: PUSH
44560: LD_INT 13
44562: PUSH
44563: LD_INT 14
44565: PUSH
44566: LD_INT 2
44568: PUSH
44569: LD_INT 3
44571: PUSH
44572: LD_INT 4
44574: PUSH
44575: LD_INT 5
44577: PUSH
44578: LD_INT 21
44580: PUSH
44581: LD_INT 22
44583: PUSH
44584: LD_INT 23
44586: PUSH
44587: LD_INT 24
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: ST_TO_ADDR
44602: GO 44605
44604: POP
// result := ( chassis in result ) ;
44605: LD_ADDR_VAR 0 3
44609: PUSH
44610: LD_VAR 0 1
44614: PUSH
44615: LD_VAR 0 3
44619: IN
44620: ST_TO_ADDR
// end ;
44621: LD_VAR 0 3
44625: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44626: LD_INT 0
44628: PPUSH
// if not chassis or not weapon then
44629: LD_VAR 0 1
44633: NOT
44634: IFTRUE 44643
44636: PUSH
44637: LD_VAR 0 2
44641: NOT
44642: OR
44643: IFFALSE 44647
// exit ;
44645: GO 45707
// case weapon of us_machine_gun :
44647: LD_VAR 0 2
44651: PUSH
44652: LD_INT 2
44654: DOUBLE
44655: EQUAL
44656: IFTRUE 44660
44658: GO 44690
44660: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44661: LD_ADDR_VAR 0 3
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: LD_INT 3
44674: PUSH
44675: LD_INT 4
44677: PUSH
44678: LD_INT 5
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: ST_TO_ADDR
44688: GO 45691
44690: LD_INT 3
44692: DOUBLE
44693: EQUAL
44694: IFTRUE 44698
44696: GO 44728
44698: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44699: LD_ADDR_VAR 0 3
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 2
44709: PUSH
44710: LD_INT 3
44712: PUSH
44713: LD_INT 4
44715: PUSH
44716: LD_INT 5
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: ST_TO_ADDR
44726: GO 45691
44728: LD_INT 11
44730: DOUBLE
44731: EQUAL
44732: IFTRUE 44736
44734: GO 44766
44736: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44737: LD_ADDR_VAR 0 3
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: LD_INT 3
44750: PUSH
44751: LD_INT 4
44753: PUSH
44754: LD_INT 5
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: ST_TO_ADDR
44764: GO 45691
44766: LD_INT 4
44768: DOUBLE
44769: EQUAL
44770: IFTRUE 44774
44772: GO 44800
44774: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44775: LD_ADDR_VAR 0 3
44779: PUSH
44780: LD_INT 2
44782: PUSH
44783: LD_INT 3
44785: PUSH
44786: LD_INT 4
44788: PUSH
44789: LD_INT 5
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: ST_TO_ADDR
44798: GO 45691
44800: LD_INT 5
44802: DOUBLE
44803: EQUAL
44804: IFTRUE 44808
44806: GO 44834
44808: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44809: LD_ADDR_VAR 0 3
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: LD_INT 3
44819: PUSH
44820: LD_INT 4
44822: PUSH
44823: LD_INT 5
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: ST_TO_ADDR
44832: GO 45691
44834: LD_INT 9
44836: DOUBLE
44837: EQUAL
44838: IFTRUE 44842
44840: GO 44868
44842: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44843: LD_ADDR_VAR 0 3
44847: PUSH
44848: LD_INT 2
44850: PUSH
44851: LD_INT 3
44853: PUSH
44854: LD_INT 4
44856: PUSH
44857: LD_INT 5
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: ST_TO_ADDR
44866: GO 45691
44868: LD_INT 7
44870: DOUBLE
44871: EQUAL
44872: IFTRUE 44876
44874: GO 44902
44876: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44877: LD_ADDR_VAR 0 3
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: LD_INT 3
44887: PUSH
44888: LD_INT 4
44890: PUSH
44891: LD_INT 5
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: ST_TO_ADDR
44900: GO 45691
44902: LD_INT 12
44904: DOUBLE
44905: EQUAL
44906: IFTRUE 44910
44908: GO 44936
44910: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44911: LD_ADDR_VAR 0 3
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: LD_INT 3
44921: PUSH
44922: LD_INT 4
44924: PUSH
44925: LD_INT 5
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: ST_TO_ADDR
44934: GO 45691
44936: LD_INT 13
44938: DOUBLE
44939: EQUAL
44940: IFTRUE 44944
44942: GO 44970
44944: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44945: LD_ADDR_VAR 0 3
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: LD_INT 3
44955: PUSH
44956: LD_INT 4
44958: PUSH
44959: LD_INT 5
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: ST_TO_ADDR
44968: GO 45691
44970: LD_INT 14
44972: DOUBLE
44973: EQUAL
44974: IFTRUE 44978
44976: GO 44996
44978: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44979: LD_ADDR_VAR 0 3
44983: PUSH
44984: LD_INT 4
44986: PUSH
44987: LD_INT 5
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: ST_TO_ADDR
44994: GO 45691
44996: LD_INT 6
44998: DOUBLE
44999: EQUAL
45000: IFTRUE 45004
45002: GO 45022
45004: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45005: LD_ADDR_VAR 0 3
45009: PUSH
45010: LD_INT 4
45012: PUSH
45013: LD_INT 5
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: ST_TO_ADDR
45020: GO 45691
45022: LD_INT 10
45024: DOUBLE
45025: EQUAL
45026: IFTRUE 45030
45028: GO 45048
45030: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45031: LD_ADDR_VAR 0 3
45035: PUSH
45036: LD_INT 4
45038: PUSH
45039: LD_INT 5
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: ST_TO_ADDR
45046: GO 45691
45048: LD_INT 22
45050: DOUBLE
45051: EQUAL
45052: IFTRUE 45056
45054: GO 45082
45056: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45057: LD_ADDR_VAR 0 3
45061: PUSH
45062: LD_INT 11
45064: PUSH
45065: LD_INT 12
45067: PUSH
45068: LD_INT 13
45070: PUSH
45071: LD_INT 14
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: ST_TO_ADDR
45080: GO 45691
45082: LD_INT 23
45084: DOUBLE
45085: EQUAL
45086: IFTRUE 45090
45088: GO 45116
45090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45091: LD_ADDR_VAR 0 3
45095: PUSH
45096: LD_INT 11
45098: PUSH
45099: LD_INT 12
45101: PUSH
45102: LD_INT 13
45104: PUSH
45105: LD_INT 14
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: ST_TO_ADDR
45114: GO 45691
45116: LD_INT 24
45118: DOUBLE
45119: EQUAL
45120: IFTRUE 45124
45122: GO 45150
45124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45125: LD_ADDR_VAR 0 3
45129: PUSH
45130: LD_INT 11
45132: PUSH
45133: LD_INT 12
45135: PUSH
45136: LD_INT 13
45138: PUSH
45139: LD_INT 14
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: ST_TO_ADDR
45148: GO 45691
45150: LD_INT 30
45152: DOUBLE
45153: EQUAL
45154: IFTRUE 45158
45156: GO 45184
45158: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45159: LD_ADDR_VAR 0 3
45163: PUSH
45164: LD_INT 11
45166: PUSH
45167: LD_INT 12
45169: PUSH
45170: LD_INT 13
45172: PUSH
45173: LD_INT 14
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: ST_TO_ADDR
45182: GO 45691
45184: LD_INT 25
45186: DOUBLE
45187: EQUAL
45188: IFTRUE 45192
45190: GO 45210
45192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45193: LD_ADDR_VAR 0 3
45197: PUSH
45198: LD_INT 13
45200: PUSH
45201: LD_INT 14
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: ST_TO_ADDR
45208: GO 45691
45210: LD_INT 27
45212: DOUBLE
45213: EQUAL
45214: IFTRUE 45218
45216: GO 45236
45218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45219: LD_ADDR_VAR 0 3
45223: PUSH
45224: LD_INT 13
45226: PUSH
45227: LD_INT 14
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: ST_TO_ADDR
45234: GO 45691
45236: LD_INT 92
45238: DOUBLE
45239: EQUAL
45240: IFTRUE 45244
45242: GO 45270
45244: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45245: LD_ADDR_VAR 0 3
45249: PUSH
45250: LD_INT 11
45252: PUSH
45253: LD_INT 12
45255: PUSH
45256: LD_INT 13
45258: PUSH
45259: LD_INT 14
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: ST_TO_ADDR
45268: GO 45691
45270: LD_INT 28
45272: DOUBLE
45273: EQUAL
45274: IFTRUE 45278
45276: GO 45296
45278: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45279: LD_ADDR_VAR 0 3
45283: PUSH
45284: LD_INT 13
45286: PUSH
45287: LD_INT 14
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: ST_TO_ADDR
45294: GO 45691
45296: LD_INT 29
45298: DOUBLE
45299: EQUAL
45300: IFTRUE 45304
45302: GO 45322
45304: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45305: LD_ADDR_VAR 0 3
45309: PUSH
45310: LD_INT 13
45312: PUSH
45313: LD_INT 14
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: ST_TO_ADDR
45320: GO 45691
45322: LD_INT 31
45324: DOUBLE
45325: EQUAL
45326: IFTRUE 45330
45328: GO 45348
45330: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45331: LD_ADDR_VAR 0 3
45335: PUSH
45336: LD_INT 13
45338: PUSH
45339: LD_INT 14
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: ST_TO_ADDR
45346: GO 45691
45348: LD_INT 26
45350: DOUBLE
45351: EQUAL
45352: IFTRUE 45356
45354: GO 45374
45356: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45357: LD_ADDR_VAR 0 3
45361: PUSH
45362: LD_INT 13
45364: PUSH
45365: LD_INT 14
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: ST_TO_ADDR
45372: GO 45691
45374: LD_INT 42
45376: DOUBLE
45377: EQUAL
45378: IFTRUE 45382
45380: GO 45408
45382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45383: LD_ADDR_VAR 0 3
45387: PUSH
45388: LD_INT 21
45390: PUSH
45391: LD_INT 22
45393: PUSH
45394: LD_INT 23
45396: PUSH
45397: LD_INT 24
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: ST_TO_ADDR
45406: GO 45691
45408: LD_INT 43
45410: DOUBLE
45411: EQUAL
45412: IFTRUE 45416
45414: GO 45442
45416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45417: LD_ADDR_VAR 0 3
45421: PUSH
45422: LD_INT 21
45424: PUSH
45425: LD_INT 22
45427: PUSH
45428: LD_INT 23
45430: PUSH
45431: LD_INT 24
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: ST_TO_ADDR
45440: GO 45691
45442: LD_INT 44
45444: DOUBLE
45445: EQUAL
45446: IFTRUE 45450
45448: GO 45476
45450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45451: LD_ADDR_VAR 0 3
45455: PUSH
45456: LD_INT 21
45458: PUSH
45459: LD_INT 22
45461: PUSH
45462: LD_INT 23
45464: PUSH
45465: LD_INT 24
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: ST_TO_ADDR
45474: GO 45691
45476: LD_INT 45
45478: DOUBLE
45479: EQUAL
45480: IFTRUE 45484
45482: GO 45510
45484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45485: LD_ADDR_VAR 0 3
45489: PUSH
45490: LD_INT 21
45492: PUSH
45493: LD_INT 22
45495: PUSH
45496: LD_INT 23
45498: PUSH
45499: LD_INT 24
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: ST_TO_ADDR
45508: GO 45691
45510: LD_INT 49
45512: DOUBLE
45513: EQUAL
45514: IFTRUE 45518
45516: GO 45544
45518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45519: LD_ADDR_VAR 0 3
45523: PUSH
45524: LD_INT 21
45526: PUSH
45527: LD_INT 22
45529: PUSH
45530: LD_INT 23
45532: PUSH
45533: LD_INT 24
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: ST_TO_ADDR
45542: GO 45691
45544: LD_INT 51
45546: DOUBLE
45547: EQUAL
45548: IFTRUE 45552
45550: GO 45578
45552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45553: LD_ADDR_VAR 0 3
45557: PUSH
45558: LD_INT 21
45560: PUSH
45561: LD_INT 22
45563: PUSH
45564: LD_INT 23
45566: PUSH
45567: LD_INT 24
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: ST_TO_ADDR
45576: GO 45691
45578: LD_INT 52
45580: DOUBLE
45581: EQUAL
45582: IFTRUE 45586
45584: GO 45612
45586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45587: LD_ADDR_VAR 0 3
45591: PUSH
45592: LD_INT 21
45594: PUSH
45595: LD_INT 22
45597: PUSH
45598: LD_INT 23
45600: PUSH
45601: LD_INT 24
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: ST_TO_ADDR
45610: GO 45691
45612: LD_INT 53
45614: DOUBLE
45615: EQUAL
45616: IFTRUE 45620
45618: GO 45638
45620: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45621: LD_ADDR_VAR 0 3
45625: PUSH
45626: LD_INT 23
45628: PUSH
45629: LD_INT 24
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: ST_TO_ADDR
45636: GO 45691
45638: LD_INT 46
45640: DOUBLE
45641: EQUAL
45642: IFTRUE 45646
45644: GO 45664
45646: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45647: LD_ADDR_VAR 0 3
45651: PUSH
45652: LD_INT 23
45654: PUSH
45655: LD_INT 24
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: ST_TO_ADDR
45662: GO 45691
45664: LD_INT 47
45666: DOUBLE
45667: EQUAL
45668: IFTRUE 45672
45670: GO 45690
45672: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45673: LD_ADDR_VAR 0 3
45677: PUSH
45678: LD_INT 23
45680: PUSH
45681: LD_INT 24
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: ST_TO_ADDR
45688: GO 45691
45690: POP
// result := ( chassis in result ) ;
45691: LD_ADDR_VAR 0 3
45695: PUSH
45696: LD_VAR 0 1
45700: PUSH
45701: LD_VAR 0 3
45705: IN
45706: ST_TO_ADDR
// end ;
45707: LD_VAR 0 3
45711: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45712: LD_INT 0
45714: PPUSH
45715: PPUSH
45716: PPUSH
45717: PPUSH
45718: PPUSH
45719: PPUSH
45720: PPUSH
// result := array ;
45721: LD_ADDR_VAR 0 5
45725: PUSH
45726: LD_VAR 0 1
45730: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45731: LD_VAR 0 1
45735: NOT
45736: IFTRUE 45745
45738: PUSH
45739: LD_VAR 0 2
45743: NOT
45744: OR
45745: IFTRUE 45754
45747: PUSH
45748: LD_VAR 0 3
45752: NOT
45753: OR
45754: IFTRUE 45768
45756: PUSH
45757: LD_VAR 0 2
45761: PUSH
45762: LD_VAR 0 1
45766: GREATER
45767: OR
45768: IFTRUE 45782
45770: PUSH
45771: LD_VAR 0 3
45775: PUSH
45776: LD_VAR 0 1
45780: GREATER
45781: OR
45782: IFFALSE 45786
// exit ;
45784: GO 46082
// if direction then
45786: LD_VAR 0 4
45790: IFFALSE 45854
// begin d := 1 ;
45792: LD_ADDR_VAR 0 9
45796: PUSH
45797: LD_INT 1
45799: ST_TO_ADDR
// if i_from > i_to then
45800: LD_VAR 0 2
45804: PUSH
45805: LD_VAR 0 3
45809: GREATER
45810: IFFALSE 45836
// length := ( array - i_from ) + i_to else
45812: LD_ADDR_VAR 0 11
45816: PUSH
45817: LD_VAR 0 1
45821: PUSH
45822: LD_VAR 0 2
45826: MINUS
45827: PUSH
45828: LD_VAR 0 3
45832: PLUS
45833: ST_TO_ADDR
45834: GO 45852
// length := i_to - i_from ;
45836: LD_ADDR_VAR 0 11
45840: PUSH
45841: LD_VAR 0 3
45845: PUSH
45846: LD_VAR 0 2
45850: MINUS
45851: ST_TO_ADDR
// end else
45852: GO 45915
// begin d := - 1 ;
45854: LD_ADDR_VAR 0 9
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: ST_TO_ADDR
// if i_from > i_to then
45863: LD_VAR 0 2
45867: PUSH
45868: LD_VAR 0 3
45872: GREATER
45873: IFFALSE 45893
// length := i_from - i_to else
45875: LD_ADDR_VAR 0 11
45879: PUSH
45880: LD_VAR 0 2
45884: PUSH
45885: LD_VAR 0 3
45889: MINUS
45890: ST_TO_ADDR
45891: GO 45915
// length := ( array - i_to ) + i_from ;
45893: LD_ADDR_VAR 0 11
45897: PUSH
45898: LD_VAR 0 1
45902: PUSH
45903: LD_VAR 0 3
45907: MINUS
45908: PUSH
45909: LD_VAR 0 2
45913: PLUS
45914: ST_TO_ADDR
// end ; if not length then
45915: LD_VAR 0 11
45919: NOT
45920: IFFALSE 45924
// exit ;
45922: GO 46082
// tmp := array ;
45924: LD_ADDR_VAR 0 10
45928: PUSH
45929: LD_VAR 0 1
45933: ST_TO_ADDR
// for i = 1 to length do
45934: LD_ADDR_VAR 0 6
45938: PUSH
45939: DOUBLE
45940: LD_INT 1
45942: DEC
45943: ST_TO_ADDR
45944: LD_VAR 0 11
45948: PUSH
45949: FOR_TO
45950: IFFALSE 46070
// begin for j = 1 to array do
45952: LD_ADDR_VAR 0 7
45956: PUSH
45957: DOUBLE
45958: LD_INT 1
45960: DEC
45961: ST_TO_ADDR
45962: LD_VAR 0 1
45966: PUSH
45967: FOR_TO
45968: IFFALSE 46056
// begin k := j + d ;
45970: LD_ADDR_VAR 0 8
45974: PUSH
45975: LD_VAR 0 7
45979: PUSH
45980: LD_VAR 0 9
45984: PLUS
45985: ST_TO_ADDR
// if k > array then
45986: LD_VAR 0 8
45990: PUSH
45991: LD_VAR 0 1
45995: GREATER
45996: IFFALSE 46006
// k := 1 ;
45998: LD_ADDR_VAR 0 8
46002: PUSH
46003: LD_INT 1
46005: ST_TO_ADDR
// if not k then
46006: LD_VAR 0 8
46010: NOT
46011: IFFALSE 46023
// k := array ;
46013: LD_ADDR_VAR 0 8
46017: PUSH
46018: LD_VAR 0 1
46022: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46023: LD_ADDR_VAR 0 10
46027: PUSH
46028: LD_VAR 0 10
46032: PPUSH
46033: LD_VAR 0 8
46037: PPUSH
46038: LD_VAR 0 1
46042: PUSH
46043: LD_VAR 0 7
46047: ARRAY
46048: PPUSH
46049: CALL_OW 1
46053: ST_TO_ADDR
// end ;
46054: GO 45967
46056: POP
46057: POP
// array := tmp ;
46058: LD_ADDR_VAR 0 1
46062: PUSH
46063: LD_VAR 0 10
46067: ST_TO_ADDR
// end ;
46068: GO 45949
46070: POP
46071: POP
// result := array ;
46072: LD_ADDR_VAR 0 5
46076: PUSH
46077: LD_VAR 0 1
46081: ST_TO_ADDR
// end ;
46082: LD_VAR 0 5
46086: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46087: LD_INT 0
46089: PPUSH
46090: PPUSH
// result := 0 ;
46091: LD_ADDR_VAR 0 3
46095: PUSH
46096: LD_INT 0
46098: ST_TO_ADDR
// if not array or not value in array then
46099: LD_VAR 0 1
46103: NOT
46104: IFTRUE 46119
46106: PUSH
46107: LD_VAR 0 2
46111: PUSH
46112: LD_VAR 0 1
46116: IN
46117: NOT
46118: OR
46119: IFFALSE 46123
// exit ;
46121: GO 46177
// for i = 1 to array do
46123: LD_ADDR_VAR 0 4
46127: PUSH
46128: DOUBLE
46129: LD_INT 1
46131: DEC
46132: ST_TO_ADDR
46133: LD_VAR 0 1
46137: PUSH
46138: FOR_TO
46139: IFFALSE 46175
// if value = array [ i ] then
46141: LD_VAR 0 2
46145: PUSH
46146: LD_VAR 0 1
46150: PUSH
46151: LD_VAR 0 4
46155: ARRAY
46156: EQUAL
46157: IFFALSE 46173
// begin result := i ;
46159: LD_ADDR_VAR 0 3
46163: PUSH
46164: LD_VAR 0 4
46168: ST_TO_ADDR
// exit ;
46169: POP
46170: POP
46171: GO 46177
// end ;
46173: GO 46138
46175: POP
46176: POP
// end ;
46177: LD_VAR 0 3
46181: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46182: LD_INT 0
46184: PPUSH
// vc_chassis := chassis ;
46185: LD_ADDR_OWVAR 37
46189: PUSH
46190: LD_VAR 0 1
46194: ST_TO_ADDR
// vc_engine := engine ;
46195: LD_ADDR_OWVAR 39
46199: PUSH
46200: LD_VAR 0 2
46204: ST_TO_ADDR
// vc_control := control ;
46205: LD_ADDR_OWVAR 38
46209: PUSH
46210: LD_VAR 0 3
46214: ST_TO_ADDR
// vc_weapon := weapon ;
46215: LD_ADDR_OWVAR 40
46219: PUSH
46220: LD_VAR 0 4
46224: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46225: LD_ADDR_OWVAR 41
46229: PUSH
46230: LD_VAR 0 5
46234: ST_TO_ADDR
// end ;
46235: LD_VAR 0 6
46239: RET
// export function WantPlant ( unit ) ; var task ; begin
46240: LD_INT 0
46242: PPUSH
46243: PPUSH
// result := false ;
46244: LD_ADDR_VAR 0 2
46248: PUSH
46249: LD_INT 0
46251: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46252: LD_ADDR_VAR 0 3
46256: PUSH
46257: LD_VAR 0 1
46261: PPUSH
46262: CALL_OW 437
46266: ST_TO_ADDR
// if task then
46267: LD_VAR 0 3
46271: IFFALSE 46299
// if task [ 1 ] [ 1 ] = p then
46273: LD_VAR 0 3
46277: PUSH
46278: LD_INT 1
46280: ARRAY
46281: PUSH
46282: LD_INT 1
46284: ARRAY
46285: PUSH
46286: LD_STRING p
46288: EQUAL
46289: IFFALSE 46299
// result := true ;
46291: LD_ADDR_VAR 0 2
46295: PUSH
46296: LD_INT 1
46298: ST_TO_ADDR
// end ;
46299: LD_VAR 0 2
46303: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46304: LD_INT 0
46306: PPUSH
46307: PPUSH
46308: PPUSH
46309: PPUSH
// if pos < 1 then
46310: LD_VAR 0 2
46314: PUSH
46315: LD_INT 1
46317: LESS
46318: IFFALSE 46322
// exit ;
46320: GO 46625
// if pos = 1 then
46322: LD_VAR 0 2
46326: PUSH
46327: LD_INT 1
46329: EQUAL
46330: IFFALSE 46363
// result := Replace ( arr , pos [ 1 ] , value ) else
46332: LD_ADDR_VAR 0 4
46336: PUSH
46337: LD_VAR 0 1
46341: PPUSH
46342: LD_VAR 0 2
46346: PUSH
46347: LD_INT 1
46349: ARRAY
46350: PPUSH
46351: LD_VAR 0 3
46355: PPUSH
46356: CALL_OW 1
46360: ST_TO_ADDR
46361: GO 46625
// begin tmp := arr ;
46363: LD_ADDR_VAR 0 6
46367: PUSH
46368: LD_VAR 0 1
46372: ST_TO_ADDR
// s_arr := [ tmp ] ;
46373: LD_ADDR_VAR 0 7
46377: PUSH
46378: LD_VAR 0 6
46382: PUSH
46383: EMPTY
46384: LIST
46385: ST_TO_ADDR
// for i = 1 to pos - 1 do
46386: LD_ADDR_VAR 0 5
46390: PUSH
46391: DOUBLE
46392: LD_INT 1
46394: DEC
46395: ST_TO_ADDR
46396: LD_VAR 0 2
46400: PUSH
46401: LD_INT 1
46403: MINUS
46404: PUSH
46405: FOR_TO
46406: IFFALSE 46451
// begin tmp := tmp [ pos [ i ] ] ;
46408: LD_ADDR_VAR 0 6
46412: PUSH
46413: LD_VAR 0 6
46417: PUSH
46418: LD_VAR 0 2
46422: PUSH
46423: LD_VAR 0 5
46427: ARRAY
46428: ARRAY
46429: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46430: LD_ADDR_VAR 0 7
46434: PUSH
46435: LD_VAR 0 7
46439: PUSH
46440: LD_VAR 0 6
46444: PUSH
46445: EMPTY
46446: LIST
46447: ADD
46448: ST_TO_ADDR
// end ;
46449: GO 46405
46451: POP
46452: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46453: LD_ADDR_VAR 0 6
46457: PUSH
46458: LD_VAR 0 6
46462: PPUSH
46463: LD_VAR 0 2
46467: PUSH
46468: LD_VAR 0 2
46472: ARRAY
46473: PPUSH
46474: LD_VAR 0 3
46478: PPUSH
46479: CALL_OW 1
46483: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46484: LD_ADDR_VAR 0 7
46488: PUSH
46489: LD_VAR 0 7
46493: PPUSH
46494: LD_VAR 0 7
46498: PPUSH
46499: LD_VAR 0 6
46503: PPUSH
46504: CALL_OW 1
46508: ST_TO_ADDR
// for i = s_arr downto 2 do
46509: LD_ADDR_VAR 0 5
46513: PUSH
46514: DOUBLE
46515: LD_VAR 0 7
46519: INC
46520: ST_TO_ADDR
46521: LD_INT 2
46523: PUSH
46524: FOR_DOWNTO
46525: IFFALSE 46609
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46527: LD_ADDR_VAR 0 6
46531: PUSH
46532: LD_VAR 0 7
46536: PUSH
46537: LD_VAR 0 5
46541: PUSH
46542: LD_INT 1
46544: MINUS
46545: ARRAY
46546: PPUSH
46547: LD_VAR 0 2
46551: PUSH
46552: LD_VAR 0 5
46556: PUSH
46557: LD_INT 1
46559: MINUS
46560: ARRAY
46561: PPUSH
46562: LD_VAR 0 7
46566: PUSH
46567: LD_VAR 0 5
46571: ARRAY
46572: PPUSH
46573: CALL_OW 1
46577: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46578: LD_ADDR_VAR 0 7
46582: PUSH
46583: LD_VAR 0 7
46587: PPUSH
46588: LD_VAR 0 5
46592: PUSH
46593: LD_INT 1
46595: MINUS
46596: PPUSH
46597: LD_VAR 0 6
46601: PPUSH
46602: CALL_OW 1
46606: ST_TO_ADDR
// end ;
46607: GO 46524
46609: POP
46610: POP
// result := s_arr [ 1 ] ;
46611: LD_ADDR_VAR 0 4
46615: PUSH
46616: LD_VAR 0 7
46620: PUSH
46621: LD_INT 1
46623: ARRAY
46624: ST_TO_ADDR
// end ; end ;
46625: LD_VAR 0 4
46629: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46630: LD_INT 0
46632: PPUSH
46633: PPUSH
// if not list then
46634: LD_VAR 0 1
46638: NOT
46639: IFFALSE 46643
// exit ;
46641: GO 46734
// i := list [ pos1 ] ;
46643: LD_ADDR_VAR 0 5
46647: PUSH
46648: LD_VAR 0 1
46652: PUSH
46653: LD_VAR 0 2
46657: ARRAY
46658: ST_TO_ADDR
// if not i then
46659: LD_VAR 0 5
46663: NOT
46664: IFFALSE 46668
// exit ;
46666: GO 46734
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46668: LD_ADDR_VAR 0 1
46672: PUSH
46673: LD_VAR 0 1
46677: PPUSH
46678: LD_VAR 0 2
46682: PPUSH
46683: LD_VAR 0 1
46687: PUSH
46688: LD_VAR 0 3
46692: ARRAY
46693: PPUSH
46694: CALL_OW 1
46698: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46699: LD_ADDR_VAR 0 1
46703: PUSH
46704: LD_VAR 0 1
46708: PPUSH
46709: LD_VAR 0 3
46713: PPUSH
46714: LD_VAR 0 5
46718: PPUSH
46719: CALL_OW 1
46723: ST_TO_ADDR
// result := list ;
46724: LD_ADDR_VAR 0 4
46728: PUSH
46729: LD_VAR 0 1
46733: ST_TO_ADDR
// end ;
46734: LD_VAR 0 4
46738: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46739: LD_INT 0
46741: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46742: LD_ADDR_VAR 0 5
46746: PUSH
46747: LD_VAR 0 1
46751: PPUSH
46752: CALL_OW 250
46756: PPUSH
46757: LD_VAR 0 1
46761: PPUSH
46762: CALL_OW 251
46766: PPUSH
46767: LD_VAR 0 2
46771: PPUSH
46772: LD_VAR 0 3
46776: PPUSH
46777: LD_VAR 0 4
46781: PPUSH
46782: CALL 47164 0 5
46786: ST_TO_ADDR
// end ;
46787: LD_VAR 0 5
46791: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46792: LD_INT 0
46794: PPUSH
46795: PPUSH
46796: PPUSH
46797: PPUSH
// if not list or not unit then
46798: LD_VAR 0 2
46802: NOT
46803: IFTRUE 46812
46805: PUSH
46806: LD_VAR 0 1
46810: NOT
46811: OR
46812: IFFALSE 46816
// exit ;
46814: GO 47159
// result := [ ] ;
46816: LD_ADDR_VAR 0 5
46820: PUSH
46821: EMPTY
46822: ST_TO_ADDR
// for i in list do
46823: LD_ADDR_VAR 0 6
46827: PUSH
46828: LD_VAR 0 2
46832: PUSH
46833: FOR_IN
46834: IFFALSE 47052
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46836: LD_ADDR_VAR 0 8
46840: PUSH
46841: LD_VAR 0 1
46845: PPUSH
46846: LD_VAR 0 6
46850: PUSH
46851: LD_INT 1
46853: ARRAY
46854: PPUSH
46855: LD_VAR 0 6
46859: PUSH
46860: LD_INT 2
46862: ARRAY
46863: PPUSH
46864: CALL_OW 297
46868: ST_TO_ADDR
// if not Count ( result ) then
46869: LD_VAR 0 5
46873: PPUSH
46874: CALL 43420 0 1
46878: NOT
46879: IFFALSE 46912
// begin result := Join ( result , [ i , tmp ] ) ;
46881: LD_ADDR_VAR 0 5
46885: PUSH
46886: LD_VAR 0 5
46890: PPUSH
46891: LD_VAR 0 6
46895: PUSH
46896: LD_VAR 0 8
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PPUSH
46905: CALL 79352 0 2
46909: ST_TO_ADDR
// continue ;
46910: GO 46833
// end ; if result [ result ] [ 2 ] <= tmp then
46912: LD_VAR 0 5
46916: PUSH
46917: LD_VAR 0 5
46921: ARRAY
46922: PUSH
46923: LD_INT 2
46925: ARRAY
46926: PUSH
46927: LD_VAR 0 8
46931: LESSEQUAL
46932: IFFALSE 46965
// result := Join ( result , [ i , tmp ] ) else
46934: LD_ADDR_VAR 0 5
46938: PUSH
46939: LD_VAR 0 5
46943: PPUSH
46944: LD_VAR 0 6
46948: PUSH
46949: LD_VAR 0 8
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PPUSH
46958: CALL 79352 0 2
46962: ST_TO_ADDR
46963: GO 47050
// begin for j := 1 to Count ( result ) do
46965: LD_ADDR_VAR 0 7
46969: PUSH
46970: DOUBLE
46971: LD_INT 1
46973: DEC
46974: ST_TO_ADDR
46975: LD_VAR 0 5
46979: PPUSH
46980: CALL 43420 0 1
46984: PUSH
46985: FOR_TO
46986: IFFALSE 47048
// begin if tmp < result [ j ] [ 2 ] then
46988: LD_VAR 0 8
46992: PUSH
46993: LD_VAR 0 5
46997: PUSH
46998: LD_VAR 0 7
47002: ARRAY
47003: PUSH
47004: LD_INT 2
47006: ARRAY
47007: LESS
47008: IFFALSE 47046
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47010: LD_ADDR_VAR 0 5
47014: PUSH
47015: LD_VAR 0 5
47019: PPUSH
47020: LD_VAR 0 7
47024: PPUSH
47025: LD_VAR 0 6
47029: PUSH
47030: LD_VAR 0 8
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PPUSH
47039: CALL_OW 2
47043: ST_TO_ADDR
// break ;
47044: GO 47048
// end ; end ;
47046: GO 46985
47048: POP
47049: POP
// end ; end ;
47050: GO 46833
47052: POP
47053: POP
// if result and not asc then
47054: LD_VAR 0 5
47058: IFFALSE 47067
47060: PUSH
47061: LD_VAR 0 3
47065: NOT
47066: AND
47067: IFFALSE 47084
// result := ReverseArray ( result ) ;
47069: LD_ADDR_VAR 0 5
47073: PUSH
47074: LD_VAR 0 5
47078: PPUSH
47079: CALL 74442 0 1
47083: ST_TO_ADDR
// tmp := [ ] ;
47084: LD_ADDR_VAR 0 8
47088: PUSH
47089: EMPTY
47090: ST_TO_ADDR
// if mode then
47091: LD_VAR 0 4
47095: IFFALSE 47159
// begin for i := 1 to result do
47097: LD_ADDR_VAR 0 6
47101: PUSH
47102: DOUBLE
47103: LD_INT 1
47105: DEC
47106: ST_TO_ADDR
47107: LD_VAR 0 5
47111: PUSH
47112: FOR_TO
47113: IFFALSE 47147
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47115: LD_ADDR_VAR 0 8
47119: PUSH
47120: LD_VAR 0 8
47124: PPUSH
47125: LD_VAR 0 5
47129: PUSH
47130: LD_VAR 0 6
47134: ARRAY
47135: PUSH
47136: LD_INT 1
47138: ARRAY
47139: PPUSH
47140: CALL 79352 0 2
47144: ST_TO_ADDR
47145: GO 47112
47147: POP
47148: POP
// result := tmp ;
47149: LD_ADDR_VAR 0 5
47153: PUSH
47154: LD_VAR 0 8
47158: ST_TO_ADDR
// end ; end ;
47159: LD_VAR 0 5
47163: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47164: LD_INT 0
47166: PPUSH
47167: PPUSH
47168: PPUSH
47169: PPUSH
// if not list then
47170: LD_VAR 0 3
47174: NOT
47175: IFFALSE 47179
// exit ;
47177: GO 47569
// result := [ ] ;
47179: LD_ADDR_VAR 0 6
47183: PUSH
47184: EMPTY
47185: ST_TO_ADDR
// for i in list do
47186: LD_ADDR_VAR 0 7
47190: PUSH
47191: LD_VAR 0 3
47195: PUSH
47196: FOR_IN
47197: IFFALSE 47399
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47199: LD_ADDR_VAR 0 9
47203: PUSH
47204: LD_VAR 0 7
47208: PPUSH
47209: LD_VAR 0 1
47213: PPUSH
47214: LD_VAR 0 2
47218: PPUSH
47219: CALL_OW 297
47223: ST_TO_ADDR
// if not result then
47224: LD_VAR 0 6
47228: NOT
47229: IFFALSE 47255
// result := [ [ i , tmp ] ] else
47231: LD_ADDR_VAR 0 6
47235: PUSH
47236: LD_VAR 0 7
47240: PUSH
47241: LD_VAR 0 9
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: EMPTY
47251: LIST
47252: ST_TO_ADDR
47253: GO 47397
// begin if result [ result ] [ 2 ] <= tmp then
47255: LD_VAR 0 6
47259: PUSH
47260: LD_VAR 0 6
47264: ARRAY
47265: PUSH
47266: LD_INT 2
47268: ARRAY
47269: PUSH
47270: LD_VAR 0 9
47274: LESSEQUAL
47275: IFFALSE 47317
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47277: LD_ADDR_VAR 0 6
47281: PUSH
47282: LD_VAR 0 6
47286: PPUSH
47287: LD_VAR 0 6
47291: PUSH
47292: LD_INT 1
47294: PLUS
47295: PPUSH
47296: LD_VAR 0 7
47300: PUSH
47301: LD_VAR 0 9
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PPUSH
47310: CALL_OW 2
47314: ST_TO_ADDR
47315: GO 47397
// for j := 1 to result do
47317: LD_ADDR_VAR 0 8
47321: PUSH
47322: DOUBLE
47323: LD_INT 1
47325: DEC
47326: ST_TO_ADDR
47327: LD_VAR 0 6
47331: PUSH
47332: FOR_TO
47333: IFFALSE 47395
// begin if tmp < result [ j ] [ 2 ] then
47335: LD_VAR 0 9
47339: PUSH
47340: LD_VAR 0 6
47344: PUSH
47345: LD_VAR 0 8
47349: ARRAY
47350: PUSH
47351: LD_INT 2
47353: ARRAY
47354: LESS
47355: IFFALSE 47393
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47357: LD_ADDR_VAR 0 6
47361: PUSH
47362: LD_VAR 0 6
47366: PPUSH
47367: LD_VAR 0 8
47371: PPUSH
47372: LD_VAR 0 7
47376: PUSH
47377: LD_VAR 0 9
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PPUSH
47386: CALL_OW 2
47390: ST_TO_ADDR
// break ;
47391: GO 47395
// end ; end ;
47393: GO 47332
47395: POP
47396: POP
// end ; end ;
47397: GO 47196
47399: POP
47400: POP
// if result and not asc then
47401: LD_VAR 0 6
47405: IFFALSE 47414
47407: PUSH
47408: LD_VAR 0 4
47412: NOT
47413: AND
47414: IFFALSE 47489
// begin tmp := result ;
47416: LD_ADDR_VAR 0 9
47420: PUSH
47421: LD_VAR 0 6
47425: ST_TO_ADDR
// for i = tmp downto 1 do
47426: LD_ADDR_VAR 0 7
47430: PUSH
47431: DOUBLE
47432: LD_VAR 0 9
47436: INC
47437: ST_TO_ADDR
47438: LD_INT 1
47440: PUSH
47441: FOR_DOWNTO
47442: IFFALSE 47487
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47444: LD_ADDR_VAR 0 6
47448: PUSH
47449: LD_VAR 0 6
47453: PPUSH
47454: LD_VAR 0 9
47458: PUSH
47459: LD_VAR 0 7
47463: MINUS
47464: PUSH
47465: LD_INT 1
47467: PLUS
47468: PPUSH
47469: LD_VAR 0 9
47473: PUSH
47474: LD_VAR 0 7
47478: ARRAY
47479: PPUSH
47480: CALL_OW 1
47484: ST_TO_ADDR
47485: GO 47441
47487: POP
47488: POP
// end ; tmp := [ ] ;
47489: LD_ADDR_VAR 0 9
47493: PUSH
47494: EMPTY
47495: ST_TO_ADDR
// if mode then
47496: LD_VAR 0 5
47500: IFFALSE 47569
// begin for i = 1 to result do
47502: LD_ADDR_VAR 0 7
47506: PUSH
47507: DOUBLE
47508: LD_INT 1
47510: DEC
47511: ST_TO_ADDR
47512: LD_VAR 0 6
47516: PUSH
47517: FOR_TO
47518: IFFALSE 47557
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47520: LD_ADDR_VAR 0 9
47524: PUSH
47525: LD_VAR 0 9
47529: PPUSH
47530: LD_VAR 0 7
47534: PPUSH
47535: LD_VAR 0 6
47539: PUSH
47540: LD_VAR 0 7
47544: ARRAY
47545: PUSH
47546: LD_INT 1
47548: ARRAY
47549: PPUSH
47550: CALL_OW 1
47554: ST_TO_ADDR
47555: GO 47517
47557: POP
47558: POP
// result := tmp ;
47559: LD_ADDR_VAR 0 6
47563: PUSH
47564: LD_VAR 0 9
47568: ST_TO_ADDR
// end ; end ;
47569: LD_VAR 0 6
47573: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47574: LD_INT 0
47576: PPUSH
47577: PPUSH
47578: PPUSH
47579: PPUSH
47580: PPUSH
47581: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47582: LD_ADDR_VAR 0 5
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: EMPTY
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: ST_TO_ADDR
// if not x or not y then
47604: LD_VAR 0 2
47608: NOT
47609: IFTRUE 47618
47611: PUSH
47612: LD_VAR 0 3
47616: NOT
47617: OR
47618: IFFALSE 47622
// exit ;
47620: GO 49278
// if not range then
47622: LD_VAR 0 4
47626: NOT
47627: IFFALSE 47637
// range := 10 ;
47629: LD_ADDR_VAR 0 4
47633: PUSH
47634: LD_INT 10
47636: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47637: LD_ADDR_VAR 0 8
47641: PUSH
47642: LD_INT 81
47644: PUSH
47645: LD_VAR 0 1
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 92
47656: PUSH
47657: LD_VAR 0 2
47661: PUSH
47662: LD_VAR 0 3
47666: PUSH
47667: LD_VAR 0 4
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 3
47680: PUSH
47681: LD_INT 21
47683: PUSH
47684: LD_INT 3
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: LIST
47699: PPUSH
47700: CALL_OW 69
47704: ST_TO_ADDR
// if not tmp then
47705: LD_VAR 0 8
47709: NOT
47710: IFFALSE 47714
// exit ;
47712: GO 49278
// for i in tmp do
47714: LD_ADDR_VAR 0 6
47718: PUSH
47719: LD_VAR 0 8
47723: PUSH
47724: FOR_IN
47725: IFFALSE 49253
// begin points := [ 0 , 0 , 0 ] ;
47727: LD_ADDR_VAR 0 9
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: ST_TO_ADDR
// bpoints := 1 ;
47746: LD_ADDR_VAR 0 10
47750: PUSH
47751: LD_INT 1
47753: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47754: LD_VAR 0 6
47758: PPUSH
47759: CALL_OW 247
47763: PUSH
47764: LD_INT 1
47766: DOUBLE
47767: EQUAL
47768: IFTRUE 47772
47770: GO 48354
47772: POP
// begin if GetClass ( i ) = 1 then
47773: LD_VAR 0 6
47777: PPUSH
47778: CALL_OW 257
47782: PUSH
47783: LD_INT 1
47785: EQUAL
47786: IFFALSE 47807
// points := [ 10 , 5 , 3 ] ;
47788: LD_ADDR_VAR 0 9
47792: PUSH
47793: LD_INT 10
47795: PUSH
47796: LD_INT 5
47798: PUSH
47799: LD_INT 3
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: LIST
47806: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47807: LD_VAR 0 6
47811: PPUSH
47812: CALL_OW 257
47816: PUSH
47817: LD_INT 2
47819: PUSH
47820: LD_INT 3
47822: PUSH
47823: LD_INT 4
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: LIST
47830: IN
47831: IFFALSE 47852
// points := [ 3 , 2 , 1 ] ;
47833: LD_ADDR_VAR 0 9
47837: PUSH
47838: LD_INT 3
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: LIST
47851: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47852: LD_VAR 0 6
47856: PPUSH
47857: CALL_OW 257
47861: PUSH
47862: LD_INT 5
47864: EQUAL
47865: IFFALSE 47886
// points := [ 130 , 5 , 2 ] ;
47867: LD_ADDR_VAR 0 9
47871: PUSH
47872: LD_INT 130
47874: PUSH
47875: LD_INT 5
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: LIST
47885: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47886: LD_VAR 0 6
47890: PPUSH
47891: CALL_OW 257
47895: PUSH
47896: LD_INT 8
47898: EQUAL
47899: IFFALSE 47920
// points := [ 35 , 35 , 30 ] ;
47901: LD_ADDR_VAR 0 9
47905: PUSH
47906: LD_INT 35
47908: PUSH
47909: LD_INT 35
47911: PUSH
47912: LD_INT 30
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: LIST
47919: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47920: LD_VAR 0 6
47924: PPUSH
47925: CALL_OW 257
47929: PUSH
47930: LD_INT 9
47932: EQUAL
47933: IFFALSE 47954
// points := [ 20 , 55 , 40 ] ;
47935: LD_ADDR_VAR 0 9
47939: PUSH
47940: LD_INT 20
47942: PUSH
47943: LD_INT 55
47945: PUSH
47946: LD_INT 40
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: LIST
47953: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47954: LD_VAR 0 6
47958: PPUSH
47959: CALL_OW 257
47963: PUSH
47964: LD_INT 12
47966: PUSH
47967: LD_INT 16
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: IN
47974: IFFALSE 47995
// points := [ 5 , 3 , 2 ] ;
47976: LD_ADDR_VAR 0 9
47980: PUSH
47981: LD_INT 5
47983: PUSH
47984: LD_INT 3
47986: PUSH
47987: LD_INT 2
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: LIST
47994: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47995: LD_VAR 0 6
47999: PPUSH
48000: CALL_OW 257
48004: PUSH
48005: LD_INT 17
48007: EQUAL
48008: IFFALSE 48029
// points := [ 100 , 50 , 75 ] ;
48010: LD_ADDR_VAR 0 9
48014: PUSH
48015: LD_INT 100
48017: PUSH
48018: LD_INT 50
48020: PUSH
48021: LD_INT 75
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: LIST
48028: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48029: LD_VAR 0 6
48033: PPUSH
48034: CALL_OW 257
48038: PUSH
48039: LD_INT 15
48041: EQUAL
48042: IFFALSE 48063
// points := [ 10 , 5 , 3 ] ;
48044: LD_ADDR_VAR 0 9
48048: PUSH
48049: LD_INT 10
48051: PUSH
48052: LD_INT 5
48054: PUSH
48055: LD_INT 3
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: LIST
48062: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48063: LD_VAR 0 6
48067: PPUSH
48068: CALL_OW 257
48072: PUSH
48073: LD_INT 14
48075: EQUAL
48076: IFFALSE 48097
// points := [ 10 , 0 , 0 ] ;
48078: LD_ADDR_VAR 0 9
48082: PUSH
48083: LD_INT 10
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: LIST
48096: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48097: LD_VAR 0 6
48101: PPUSH
48102: CALL_OW 257
48106: PUSH
48107: LD_INT 11
48109: EQUAL
48110: IFFALSE 48131
// points := [ 30 , 10 , 5 ] ;
48112: LD_ADDR_VAR 0 9
48116: PUSH
48117: LD_INT 30
48119: PUSH
48120: LD_INT 10
48122: PUSH
48123: LD_INT 5
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: LIST
48130: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48131: LD_VAR 0 1
48135: PPUSH
48136: LD_INT 5
48138: PPUSH
48139: CALL_OW 321
48143: PUSH
48144: LD_INT 2
48146: EQUAL
48147: IFFALSE 48164
// bpoints := bpoints * 1.8 ;
48149: LD_ADDR_VAR 0 10
48153: PUSH
48154: LD_VAR 0 10
48158: PUSH
48159: LD_REAL  1.80000000000000E+0000
48162: MUL
48163: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48164: LD_VAR 0 6
48168: PPUSH
48169: CALL_OW 257
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: LD_INT 3
48182: PUSH
48183: LD_INT 4
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: IN
48192: IFFALSE 48212
48194: PUSH
48195: LD_VAR 0 1
48199: PPUSH
48200: LD_INT 51
48202: PPUSH
48203: CALL_OW 321
48207: PUSH
48208: LD_INT 2
48210: EQUAL
48211: AND
48212: IFFALSE 48229
// bpoints := bpoints * 1.2 ;
48214: LD_ADDR_VAR 0 10
48218: PUSH
48219: LD_VAR 0 10
48223: PUSH
48224: LD_REAL  1.20000000000000E+0000
48227: MUL
48228: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48229: LD_VAR 0 6
48233: PPUSH
48234: CALL_OW 257
48238: PUSH
48239: LD_INT 5
48241: PUSH
48242: LD_INT 7
48244: PUSH
48245: LD_INT 9
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: LIST
48252: IN
48253: IFFALSE 48273
48255: PUSH
48256: LD_VAR 0 1
48260: PPUSH
48261: LD_INT 52
48263: PPUSH
48264: CALL_OW 321
48268: PUSH
48269: LD_INT 2
48271: EQUAL
48272: AND
48273: IFFALSE 48290
// bpoints := bpoints * 1.5 ;
48275: LD_ADDR_VAR 0 10
48279: PUSH
48280: LD_VAR 0 10
48284: PUSH
48285: LD_REAL  1.50000000000000E+0000
48288: MUL
48289: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48290: LD_VAR 0 1
48294: PPUSH
48295: LD_INT 66
48297: PPUSH
48298: CALL_OW 321
48302: PUSH
48303: LD_INT 2
48305: EQUAL
48306: IFFALSE 48323
// bpoints := bpoints * 1.1 ;
48308: LD_ADDR_VAR 0 10
48312: PUSH
48313: LD_VAR 0 10
48317: PUSH
48318: LD_REAL  1.10000000000000E+0000
48321: MUL
48322: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48323: LD_ADDR_VAR 0 10
48327: PUSH
48328: LD_VAR 0 10
48332: PUSH
48333: LD_VAR 0 6
48337: PPUSH
48338: LD_INT 1
48340: PPUSH
48341: CALL_OW 259
48345: PUSH
48346: LD_REAL  1.15000000000000E+0000
48349: MUL
48350: MUL
48351: ST_TO_ADDR
// end ; unit_vehicle :
48352: GO 49182
48354: LD_INT 2
48356: DOUBLE
48357: EQUAL
48358: IFTRUE 48362
48360: GO 49170
48362: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48363: LD_VAR 0 6
48367: PPUSH
48368: CALL_OW 264
48372: PUSH
48373: LD_INT 2
48375: PUSH
48376: LD_INT 42
48378: PUSH
48379: LD_INT 24
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: LIST
48386: IN
48387: IFFALSE 48408
// points := [ 25 , 5 , 3 ] ;
48389: LD_ADDR_VAR 0 9
48393: PUSH
48394: LD_INT 25
48396: PUSH
48397: LD_INT 5
48399: PUSH
48400: LD_INT 3
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: LIST
48407: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48408: LD_VAR 0 6
48412: PPUSH
48413: CALL_OW 264
48417: PUSH
48418: LD_INT 4
48420: PUSH
48421: LD_INT 43
48423: PUSH
48424: LD_INT 25
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: LIST
48431: IN
48432: IFFALSE 48453
// points := [ 40 , 15 , 5 ] ;
48434: LD_ADDR_VAR 0 9
48438: PUSH
48439: LD_INT 40
48441: PUSH
48442: LD_INT 15
48444: PUSH
48445: LD_INT 5
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48453: LD_VAR 0 6
48457: PPUSH
48458: CALL_OW 264
48462: PUSH
48463: LD_INT 3
48465: PUSH
48466: LD_INT 23
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: IN
48473: IFFALSE 48494
// points := [ 7 , 25 , 8 ] ;
48475: LD_ADDR_VAR 0 9
48479: PUSH
48480: LD_INT 7
48482: PUSH
48483: LD_INT 25
48485: PUSH
48486: LD_INT 8
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: LIST
48493: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48494: LD_VAR 0 6
48498: PPUSH
48499: CALL_OW 264
48503: PUSH
48504: LD_INT 5
48506: PUSH
48507: LD_INT 27
48509: PUSH
48510: LD_INT 44
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: LIST
48517: IN
48518: IFFALSE 48539
// points := [ 14 , 50 , 16 ] ;
48520: LD_ADDR_VAR 0 9
48524: PUSH
48525: LD_INT 14
48527: PUSH
48528: LD_INT 50
48530: PUSH
48531: LD_INT 16
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: LIST
48538: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48539: LD_VAR 0 6
48543: PPUSH
48544: CALL_OW 264
48548: PUSH
48549: LD_INT 6
48551: PUSH
48552: LD_INT 46
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: IN
48559: IFFALSE 48580
// points := [ 32 , 120 , 70 ] ;
48561: LD_ADDR_VAR 0 9
48565: PUSH
48566: LD_INT 32
48568: PUSH
48569: LD_INT 120
48571: PUSH
48572: LD_INT 70
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: LIST
48579: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48580: LD_VAR 0 6
48584: PPUSH
48585: CALL_OW 264
48589: PUSH
48590: LD_INT 7
48592: PUSH
48593: LD_INT 28
48595: PUSH
48596: LD_INT 45
48598: PUSH
48599: LD_INT 92
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: IN
48608: IFFALSE 48629
// points := [ 35 , 20 , 45 ] ;
48610: LD_ADDR_VAR 0 9
48614: PUSH
48615: LD_INT 35
48617: PUSH
48618: LD_INT 20
48620: PUSH
48621: LD_INT 45
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: LIST
48628: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48629: LD_VAR 0 6
48633: PPUSH
48634: CALL_OW 264
48638: PUSH
48639: LD_INT 47
48641: PUSH
48642: EMPTY
48643: LIST
48644: IN
48645: IFFALSE 48666
// points := [ 67 , 45 , 75 ] ;
48647: LD_ADDR_VAR 0 9
48651: PUSH
48652: LD_INT 67
48654: PUSH
48655: LD_INT 45
48657: PUSH
48658: LD_INT 75
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: LIST
48665: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48666: LD_VAR 0 6
48670: PPUSH
48671: CALL_OW 264
48675: PUSH
48676: LD_INT 26
48678: PUSH
48679: EMPTY
48680: LIST
48681: IN
48682: IFFALSE 48703
// points := [ 120 , 30 , 80 ] ;
48684: LD_ADDR_VAR 0 9
48688: PUSH
48689: LD_INT 120
48691: PUSH
48692: LD_INT 30
48694: PUSH
48695: LD_INT 80
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: LIST
48702: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48703: LD_VAR 0 6
48707: PPUSH
48708: CALL_OW 264
48712: PUSH
48713: LD_INT 22
48715: PUSH
48716: EMPTY
48717: LIST
48718: IN
48719: IFFALSE 48740
// points := [ 40 , 1 , 1 ] ;
48721: LD_ADDR_VAR 0 9
48725: PUSH
48726: LD_INT 40
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: LIST
48739: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48740: LD_VAR 0 6
48744: PPUSH
48745: CALL_OW 264
48749: PUSH
48750: LD_INT 29
48752: PUSH
48753: EMPTY
48754: LIST
48755: IN
48756: IFFALSE 48777
// points := [ 70 , 200 , 400 ] ;
48758: LD_ADDR_VAR 0 9
48762: PUSH
48763: LD_INT 70
48765: PUSH
48766: LD_INT 200
48768: PUSH
48769: LD_INT 400
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: LIST
48776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48777: LD_VAR 0 6
48781: PPUSH
48782: CALL_OW 264
48786: PUSH
48787: LD_INT 14
48789: PUSH
48790: LD_INT 53
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: IN
48797: IFFALSE 48818
// points := [ 40 , 10 , 20 ] ;
48799: LD_ADDR_VAR 0 9
48803: PUSH
48804: LD_INT 40
48806: PUSH
48807: LD_INT 10
48809: PUSH
48810: LD_INT 20
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: LIST
48817: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48818: LD_VAR 0 6
48822: PPUSH
48823: CALL_OW 264
48827: PUSH
48828: LD_INT 9
48830: PUSH
48831: EMPTY
48832: LIST
48833: IN
48834: IFFALSE 48855
// points := [ 5 , 70 , 20 ] ;
48836: LD_ADDR_VAR 0 9
48840: PUSH
48841: LD_INT 5
48843: PUSH
48844: LD_INT 70
48846: PUSH
48847: LD_INT 20
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: LIST
48854: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48855: LD_VAR 0 6
48859: PPUSH
48860: CALL_OW 264
48864: PUSH
48865: LD_INT 10
48867: PUSH
48868: EMPTY
48869: LIST
48870: IN
48871: IFFALSE 48892
// points := [ 35 , 110 , 70 ] ;
48873: LD_ADDR_VAR 0 9
48877: PUSH
48878: LD_INT 35
48880: PUSH
48881: LD_INT 110
48883: PUSH
48884: LD_INT 70
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: LIST
48891: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48892: LD_VAR 0 6
48896: PPUSH
48897: CALL_OW 265
48901: PUSH
48902: LD_INT 25
48904: EQUAL
48905: IFFALSE 48926
// points := [ 80 , 65 , 100 ] ;
48907: LD_ADDR_VAR 0 9
48911: PUSH
48912: LD_INT 80
48914: PUSH
48915: LD_INT 65
48917: PUSH
48918: LD_INT 100
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: LIST
48925: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48926: LD_VAR 0 6
48930: PPUSH
48931: CALL_OW 263
48935: PUSH
48936: LD_INT 1
48938: EQUAL
48939: IFFALSE 48974
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48941: LD_ADDR_VAR 0 10
48945: PUSH
48946: LD_VAR 0 10
48950: PUSH
48951: LD_VAR 0 6
48955: PPUSH
48956: CALL_OW 311
48960: PPUSH
48961: LD_INT 3
48963: PPUSH
48964: CALL_OW 259
48968: PUSH
48969: LD_INT 4
48971: MUL
48972: MUL
48973: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48974: LD_VAR 0 6
48978: PPUSH
48979: CALL_OW 263
48983: PUSH
48984: LD_INT 2
48986: EQUAL
48987: IFFALSE 49038
// begin j := IsControledBy ( i ) ;
48989: LD_ADDR_VAR 0 7
48993: PUSH
48994: LD_VAR 0 6
48998: PPUSH
48999: CALL_OW 312
49003: ST_TO_ADDR
// if j then
49004: LD_VAR 0 7
49008: IFFALSE 49038
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49010: LD_ADDR_VAR 0 10
49014: PUSH
49015: LD_VAR 0 10
49019: PUSH
49020: LD_VAR 0 7
49024: PPUSH
49025: LD_INT 3
49027: PPUSH
49028: CALL_OW 259
49032: PUSH
49033: LD_INT 3
49035: MUL
49036: MUL
49037: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49038: LD_VAR 0 6
49042: PPUSH
49043: CALL_OW 264
49047: PUSH
49048: LD_INT 5
49050: PUSH
49051: LD_INT 6
49053: PUSH
49054: LD_INT 46
49056: PUSH
49057: LD_INT 44
49059: PUSH
49060: LD_INT 47
49062: PUSH
49063: LD_INT 45
49065: PUSH
49066: LD_INT 28
49068: PUSH
49069: LD_INT 7
49071: PUSH
49072: LD_INT 27
49074: PUSH
49075: LD_INT 29
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: IN
49090: IFFALSE 49110
49092: PUSH
49093: LD_VAR 0 1
49097: PPUSH
49098: LD_INT 52
49100: PPUSH
49101: CALL_OW 321
49105: PUSH
49106: LD_INT 2
49108: EQUAL
49109: AND
49110: IFFALSE 49127
// bpoints := bpoints * 1.2 ;
49112: LD_ADDR_VAR 0 10
49116: PUSH
49117: LD_VAR 0 10
49121: PUSH
49122: LD_REAL  1.20000000000000E+0000
49125: MUL
49126: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49127: LD_VAR 0 6
49131: PPUSH
49132: CALL_OW 264
49136: PUSH
49137: LD_INT 6
49139: PUSH
49140: LD_INT 46
49142: PUSH
49143: LD_INT 47
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: LIST
49150: IN
49151: IFFALSE 49168
// bpoints := bpoints * 1.2 ;
49153: LD_ADDR_VAR 0 10
49157: PUSH
49158: LD_VAR 0 10
49162: PUSH
49163: LD_REAL  1.20000000000000E+0000
49166: MUL
49167: ST_TO_ADDR
// end ; unit_building :
49168: GO 49182
49170: LD_INT 3
49172: DOUBLE
49173: EQUAL
49174: IFTRUE 49178
49176: GO 49181
49178: POP
// ; end ;
49179: GO 49182
49181: POP
// for j = 1 to 3 do
49182: LD_ADDR_VAR 0 7
49186: PUSH
49187: DOUBLE
49188: LD_INT 1
49190: DEC
49191: ST_TO_ADDR
49192: LD_INT 3
49194: PUSH
49195: FOR_TO
49196: IFFALSE 49249
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49198: LD_ADDR_VAR 0 5
49202: PUSH
49203: LD_VAR 0 5
49207: PPUSH
49208: LD_VAR 0 7
49212: PPUSH
49213: LD_VAR 0 5
49217: PUSH
49218: LD_VAR 0 7
49222: ARRAY
49223: PUSH
49224: LD_VAR 0 9
49228: PUSH
49229: LD_VAR 0 7
49233: ARRAY
49234: PUSH
49235: LD_VAR 0 10
49239: MUL
49240: PLUS
49241: PPUSH
49242: CALL_OW 1
49246: ST_TO_ADDR
49247: GO 49195
49249: POP
49250: POP
// end ;
49251: GO 47724
49253: POP
49254: POP
// result := Replace ( result , 4 , tmp ) ;
49255: LD_ADDR_VAR 0 5
49259: PUSH
49260: LD_VAR 0 5
49264: PPUSH
49265: LD_INT 4
49267: PPUSH
49268: LD_VAR 0 8
49272: PPUSH
49273: CALL_OW 1
49277: ST_TO_ADDR
// end ;
49278: LD_VAR 0 5
49282: RET
// export function DangerAtRange ( unit , range ) ; begin
49283: LD_INT 0
49285: PPUSH
// if not unit then
49286: LD_VAR 0 1
49290: NOT
49291: IFFALSE 49295
// exit ;
49293: GO 49340
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49295: LD_ADDR_VAR 0 3
49299: PUSH
49300: LD_VAR 0 1
49304: PPUSH
49305: CALL_OW 255
49309: PPUSH
49310: LD_VAR 0 1
49314: PPUSH
49315: CALL_OW 250
49319: PPUSH
49320: LD_VAR 0 1
49324: PPUSH
49325: CALL_OW 251
49329: PPUSH
49330: LD_VAR 0 2
49334: PPUSH
49335: CALL 47574 0 4
49339: ST_TO_ADDR
// end ;
49340: LD_VAR 0 3
49344: RET
// export function DangerInArea ( side , area ) ; begin
49345: LD_INT 0
49347: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49348: LD_ADDR_VAR 0 3
49352: PUSH
49353: LD_VAR 0 2
49357: PPUSH
49358: LD_INT 81
49360: PUSH
49361: LD_VAR 0 1
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PPUSH
49370: CALL_OW 70
49374: ST_TO_ADDR
// end ;
49375: LD_VAR 0 3
49379: RET
// export function IsExtension ( b ) ; begin
49380: LD_INT 0
49382: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49383: LD_ADDR_VAR 0 2
49387: PUSH
49388: LD_VAR 0 1
49392: PUSH
49393: LD_INT 23
49395: PUSH
49396: LD_INT 20
49398: PUSH
49399: LD_INT 22
49401: PUSH
49402: LD_INT 17
49404: PUSH
49405: LD_INT 24
49407: PUSH
49408: LD_INT 21
49410: PUSH
49411: LD_INT 19
49413: PUSH
49414: LD_INT 16
49416: PUSH
49417: LD_INT 25
49419: PUSH
49420: LD_INT 18
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: IN
49435: ST_TO_ADDR
// end ;
49436: LD_VAR 0 2
49440: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49441: LD_INT 0
49443: PPUSH
49444: PPUSH
49445: PPUSH
// result := [ ] ;
49446: LD_ADDR_VAR 0 4
49450: PUSH
49451: EMPTY
49452: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49453: LD_ADDR_VAR 0 5
49457: PUSH
49458: LD_VAR 0 2
49462: PPUSH
49463: LD_INT 21
49465: PUSH
49466: LD_INT 3
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PPUSH
49473: CALL_OW 70
49477: ST_TO_ADDR
// if not tmp then
49478: LD_VAR 0 5
49482: NOT
49483: IFFALSE 49487
// exit ;
49485: GO 49551
// if checkLink then
49487: LD_VAR 0 3
49491: IFFALSE 49541
// begin for i in tmp do
49493: LD_ADDR_VAR 0 6
49497: PUSH
49498: LD_VAR 0 5
49502: PUSH
49503: FOR_IN
49504: IFFALSE 49539
// if GetBase ( i ) <> base then
49506: LD_VAR 0 6
49510: PPUSH
49511: CALL_OW 274
49515: PUSH
49516: LD_VAR 0 1
49520: NONEQUAL
49521: IFFALSE 49537
// ComLinkToBase ( base , i ) ;
49523: LD_VAR 0 1
49527: PPUSH
49528: LD_VAR 0 6
49532: PPUSH
49533: CALL_OW 169
49537: GO 49503
49539: POP
49540: POP
// end ; result := tmp ;
49541: LD_ADDR_VAR 0 4
49545: PUSH
49546: LD_VAR 0 5
49550: ST_TO_ADDR
// end ;
49551: LD_VAR 0 4
49555: RET
// export function ComComplete ( units , b ) ; var i ; begin
49556: LD_INT 0
49558: PPUSH
49559: PPUSH
// if not units then
49560: LD_VAR 0 1
49564: NOT
49565: IFFALSE 49569
// exit ;
49567: GO 49659
// for i in units do
49569: LD_ADDR_VAR 0 4
49573: PUSH
49574: LD_VAR 0 1
49578: PUSH
49579: FOR_IN
49580: IFFALSE 49657
// if BuildingStatus ( b ) = bs_build then
49582: LD_VAR 0 2
49586: PPUSH
49587: CALL_OW 461
49591: PUSH
49592: LD_INT 1
49594: EQUAL
49595: IFFALSE 49655
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49597: LD_VAR 0 4
49601: PPUSH
49602: LD_STRING h
49604: PUSH
49605: LD_VAR 0 2
49609: PPUSH
49610: CALL_OW 250
49614: PUSH
49615: LD_VAR 0 2
49619: PPUSH
49620: CALL_OW 251
49624: PUSH
49625: LD_VAR 0 2
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: PUSH
49648: EMPTY
49649: LIST
49650: PPUSH
49651: CALL_OW 446
49655: GO 49579
49657: POP
49658: POP
// end ;
49659: LD_VAR 0 3
49663: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49664: LD_INT 0
49666: PPUSH
49667: PPUSH
49668: PPUSH
49669: PPUSH
49670: PPUSH
49671: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49672: LD_VAR 0 1
49676: NOT
49677: IFTRUE 49694
49679: PUSH
49680: LD_VAR 0 1
49684: PPUSH
49685: CALL_OW 263
49689: PUSH
49690: LD_INT 2
49692: NONEQUAL
49693: OR
49694: IFFALSE 49698
// exit ;
49696: GO 50014
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49698: LD_ADDR_VAR 0 6
49702: PUSH
49703: LD_INT 22
49705: PUSH
49706: LD_VAR 0 1
49710: PPUSH
49711: CALL_OW 255
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 2
49722: PUSH
49723: LD_INT 30
49725: PUSH
49726: LD_INT 36
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 34
49735: PUSH
49736: LD_INT 31
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: LIST
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PPUSH
49752: CALL_OW 69
49756: ST_TO_ADDR
// if not tmp then
49757: LD_VAR 0 6
49761: NOT
49762: IFFALSE 49766
// exit ;
49764: GO 50014
// result := [ ] ;
49766: LD_ADDR_VAR 0 2
49770: PUSH
49771: EMPTY
49772: ST_TO_ADDR
// for i in tmp do
49773: LD_ADDR_VAR 0 3
49777: PUSH
49778: LD_VAR 0 6
49782: PUSH
49783: FOR_IN
49784: IFFALSE 49855
// begin t := UnitsInside ( i ) ;
49786: LD_ADDR_VAR 0 4
49790: PUSH
49791: LD_VAR 0 3
49795: PPUSH
49796: CALL_OW 313
49800: ST_TO_ADDR
// if t then
49801: LD_VAR 0 4
49805: IFFALSE 49853
// for j in t do
49807: LD_ADDR_VAR 0 7
49811: PUSH
49812: LD_VAR 0 4
49816: PUSH
49817: FOR_IN
49818: IFFALSE 49851
// result := Replace ( result , result + 1 , j ) ;
49820: LD_ADDR_VAR 0 2
49824: PUSH
49825: LD_VAR 0 2
49829: PPUSH
49830: LD_VAR 0 2
49834: PUSH
49835: LD_INT 1
49837: PLUS
49838: PPUSH
49839: LD_VAR 0 7
49843: PPUSH
49844: CALL_OW 1
49848: ST_TO_ADDR
49849: GO 49817
49851: POP
49852: POP
// end ;
49853: GO 49783
49855: POP
49856: POP
// if not result then
49857: LD_VAR 0 2
49861: NOT
49862: IFFALSE 49866
// exit ;
49864: GO 50014
// mech := result [ 1 ] ;
49866: LD_ADDR_VAR 0 5
49870: PUSH
49871: LD_VAR 0 2
49875: PUSH
49876: LD_INT 1
49878: ARRAY
49879: ST_TO_ADDR
// if result > 1 then
49880: LD_VAR 0 2
49884: PUSH
49885: LD_INT 1
49887: GREATER
49888: IFFALSE 50000
// begin for i = 2 to result do
49890: LD_ADDR_VAR 0 3
49894: PUSH
49895: DOUBLE
49896: LD_INT 2
49898: DEC
49899: ST_TO_ADDR
49900: LD_VAR 0 2
49904: PUSH
49905: FOR_TO
49906: IFFALSE 49998
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49908: LD_ADDR_VAR 0 4
49912: PUSH
49913: LD_VAR 0 2
49917: PUSH
49918: LD_VAR 0 3
49922: ARRAY
49923: PPUSH
49924: LD_INT 3
49926: PPUSH
49927: CALL_OW 259
49931: PUSH
49932: LD_VAR 0 2
49936: PUSH
49937: LD_VAR 0 3
49941: ARRAY
49942: PPUSH
49943: CALL_OW 432
49947: MINUS
49948: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49949: LD_VAR 0 4
49953: PUSH
49954: LD_VAR 0 5
49958: PPUSH
49959: LD_INT 3
49961: PPUSH
49962: CALL_OW 259
49966: PUSH
49967: LD_VAR 0 5
49971: PPUSH
49972: CALL_OW 432
49976: MINUS
49977: GREATEREQUAL
49978: IFFALSE 49996
// mech := result [ i ] ;
49980: LD_ADDR_VAR 0 5
49984: PUSH
49985: LD_VAR 0 2
49989: PUSH
49990: LD_VAR 0 3
49994: ARRAY
49995: ST_TO_ADDR
// end ;
49996: GO 49905
49998: POP
49999: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50000: LD_VAR 0 1
50004: PPUSH
50005: LD_VAR 0 5
50009: PPUSH
50010: CALL_OW 135
// end ;
50014: LD_VAR 0 2
50018: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50019: LD_INT 0
50021: PPUSH
50022: PPUSH
50023: PPUSH
50024: PPUSH
50025: PPUSH
50026: PPUSH
50027: PPUSH
50028: PPUSH
50029: PPUSH
50030: PPUSH
50031: PPUSH
50032: PPUSH
50033: PPUSH
// result := [ ] ;
50034: LD_ADDR_VAR 0 7
50038: PUSH
50039: EMPTY
50040: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50041: LD_VAR 0 1
50045: PPUSH
50046: CALL_OW 266
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: IN
50061: NOT
50062: IFFALSE 50066
// exit ;
50064: GO 51706
// if name then
50066: LD_VAR 0 3
50070: IFFALSE 50086
// SetBName ( base_dep , name ) ;
50072: LD_VAR 0 1
50076: PPUSH
50077: LD_VAR 0 3
50081: PPUSH
50082: CALL_OW 500
// base := GetBase ( base_dep ) ;
50086: LD_ADDR_VAR 0 15
50090: PUSH
50091: LD_VAR 0 1
50095: PPUSH
50096: CALL_OW 274
50100: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50101: LD_ADDR_VAR 0 16
50105: PUSH
50106: LD_VAR 0 1
50110: PPUSH
50111: CALL_OW 255
50115: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50116: LD_ADDR_VAR 0 17
50120: PUSH
50121: LD_VAR 0 1
50125: PPUSH
50126: CALL_OW 248
50130: ST_TO_ADDR
// if sources then
50131: LD_VAR 0 5
50135: IFFALSE 50182
// for i = 1 to 3 do
50137: LD_ADDR_VAR 0 8
50141: PUSH
50142: DOUBLE
50143: LD_INT 1
50145: DEC
50146: ST_TO_ADDR
50147: LD_INT 3
50149: PUSH
50150: FOR_TO
50151: IFFALSE 50180
// AddResourceType ( base , i , sources [ i ] ) ;
50153: LD_VAR 0 15
50157: PPUSH
50158: LD_VAR 0 8
50162: PPUSH
50163: LD_VAR 0 5
50167: PUSH
50168: LD_VAR 0 8
50172: ARRAY
50173: PPUSH
50174: CALL_OW 276
50178: GO 50150
50180: POP
50181: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50182: LD_ADDR_VAR 0 18
50186: PUSH
50187: LD_VAR 0 15
50191: PPUSH
50192: LD_VAR 0 2
50196: PPUSH
50197: LD_INT 1
50199: PPUSH
50200: CALL 49441 0 3
50204: ST_TO_ADDR
// InitHc ;
50205: CALL_OW 19
// InitUc ;
50209: CALL_OW 18
// uc_side := side ;
50213: LD_ADDR_OWVAR 20
50217: PUSH
50218: LD_VAR 0 16
50222: ST_TO_ADDR
// uc_nation := nation ;
50223: LD_ADDR_OWVAR 21
50227: PUSH
50228: LD_VAR 0 17
50232: ST_TO_ADDR
// if buildings then
50233: LD_VAR 0 18
50237: IFFALSE 51565
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50239: LD_ADDR_VAR 0 19
50243: PUSH
50244: LD_VAR 0 18
50248: PPUSH
50249: LD_INT 2
50251: PUSH
50252: LD_INT 30
50254: PUSH
50255: LD_INT 29
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 30
50264: PUSH
50265: LD_INT 30
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: LIST
50276: PPUSH
50277: CALL_OW 72
50281: ST_TO_ADDR
// if tmp then
50282: LD_VAR 0 19
50286: IFFALSE 50334
// for i in tmp do
50288: LD_ADDR_VAR 0 8
50292: PUSH
50293: LD_VAR 0 19
50297: PUSH
50298: FOR_IN
50299: IFFALSE 50332
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50301: LD_VAR 0 8
50305: PPUSH
50306: CALL_OW 250
50310: PPUSH
50311: LD_VAR 0 8
50315: PPUSH
50316: CALL_OW 251
50320: PPUSH
50321: LD_VAR 0 16
50325: PPUSH
50326: CALL_OW 441
50330: GO 50298
50332: POP
50333: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50334: LD_VAR 0 18
50338: PPUSH
50339: LD_INT 2
50341: PUSH
50342: LD_INT 30
50344: PUSH
50345: LD_INT 32
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 30
50354: PUSH
50355: LD_INT 33
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: LIST
50366: PPUSH
50367: CALL_OW 72
50371: IFFALSE 50459
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50373: LD_ADDR_VAR 0 8
50377: PUSH
50378: LD_VAR 0 18
50382: PPUSH
50383: LD_INT 2
50385: PUSH
50386: LD_INT 30
50388: PUSH
50389: LD_INT 32
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 30
50398: PUSH
50399: LD_INT 33
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: LIST
50410: PPUSH
50411: CALL_OW 72
50415: PUSH
50416: FOR_IN
50417: IFFALSE 50457
// begin if not GetBWeapon ( i ) then
50419: LD_VAR 0 8
50423: PPUSH
50424: CALL_OW 269
50428: NOT
50429: IFFALSE 50455
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50431: LD_VAR 0 8
50435: PPUSH
50436: LD_VAR 0 8
50440: PPUSH
50441: LD_VAR 0 2
50445: PPUSH
50446: CALL 51711 0 2
50450: PPUSH
50451: CALL_OW 431
// end ;
50455: GO 50416
50457: POP
50458: POP
// end ; for i = 1 to personel do
50459: LD_ADDR_VAR 0 8
50463: PUSH
50464: DOUBLE
50465: LD_INT 1
50467: DEC
50468: ST_TO_ADDR
50469: LD_VAR 0 6
50473: PUSH
50474: FOR_TO
50475: IFFALSE 51545
// begin if i > 4 then
50477: LD_VAR 0 8
50481: PUSH
50482: LD_INT 4
50484: GREATER
50485: IFFALSE 50489
// break ;
50487: GO 51545
// case i of 1 :
50489: LD_VAR 0 8
50493: PUSH
50494: LD_INT 1
50496: DOUBLE
50497: EQUAL
50498: IFTRUE 50502
50500: GO 50582
50502: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50503: LD_ADDR_VAR 0 12
50507: PUSH
50508: LD_VAR 0 18
50512: PPUSH
50513: LD_INT 22
50515: PUSH
50516: LD_VAR 0 16
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 58
50527: PUSH
50528: EMPTY
50529: LIST
50530: PUSH
50531: LD_INT 2
50533: PUSH
50534: LD_INT 30
50536: PUSH
50537: LD_INT 32
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 30
50546: PUSH
50547: LD_INT 4
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 30
50556: PUSH
50557: LD_INT 5
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: LIST
50574: PPUSH
50575: CALL_OW 72
50579: ST_TO_ADDR
50580: GO 50804
50582: LD_INT 2
50584: DOUBLE
50585: EQUAL
50586: IFTRUE 50590
50588: GO 50652
50590: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50591: LD_ADDR_VAR 0 12
50595: PUSH
50596: LD_VAR 0 18
50600: PPUSH
50601: LD_INT 22
50603: PUSH
50604: LD_VAR 0 16
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: LD_INT 30
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 30
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: LIST
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PPUSH
50645: CALL_OW 72
50649: ST_TO_ADDR
50650: GO 50804
50652: LD_INT 3
50654: DOUBLE
50655: EQUAL
50656: IFTRUE 50660
50658: GO 50722
50660: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50661: LD_ADDR_VAR 0 12
50665: PUSH
50666: LD_VAR 0 18
50670: PPUSH
50671: LD_INT 22
50673: PUSH
50674: LD_VAR 0 16
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: LD_INT 30
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 30
50698: PUSH
50699: LD_INT 3
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: LIST
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PPUSH
50715: CALL_OW 72
50719: ST_TO_ADDR
50720: GO 50804
50722: LD_INT 4
50724: DOUBLE
50725: EQUAL
50726: IFTRUE 50730
50728: GO 50803
50730: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50731: LD_ADDR_VAR 0 12
50735: PUSH
50736: LD_VAR 0 18
50740: PPUSH
50741: LD_INT 22
50743: PUSH
50744: LD_VAR 0 16
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: LD_INT 30
50758: PUSH
50759: LD_INT 6
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 30
50768: PUSH
50769: LD_INT 7
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 30
50778: PUSH
50779: LD_INT 8
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PPUSH
50796: CALL_OW 72
50800: ST_TO_ADDR
50801: GO 50804
50803: POP
// if i = 1 then
50804: LD_VAR 0 8
50808: PUSH
50809: LD_INT 1
50811: EQUAL
50812: IFFALSE 50923
// begin tmp := [ ] ;
50814: LD_ADDR_VAR 0 19
50818: PUSH
50819: EMPTY
50820: ST_TO_ADDR
// for j in f do
50821: LD_ADDR_VAR 0 9
50825: PUSH
50826: LD_VAR 0 12
50830: PUSH
50831: FOR_IN
50832: IFFALSE 50905
// if GetBType ( j ) = b_bunker then
50834: LD_VAR 0 9
50838: PPUSH
50839: CALL_OW 266
50843: PUSH
50844: LD_INT 32
50846: EQUAL
50847: IFFALSE 50874
// tmp := Insert ( tmp , 1 , j ) else
50849: LD_ADDR_VAR 0 19
50853: PUSH
50854: LD_VAR 0 19
50858: PPUSH
50859: LD_INT 1
50861: PPUSH
50862: LD_VAR 0 9
50866: PPUSH
50867: CALL_OW 2
50871: ST_TO_ADDR
50872: GO 50903
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50874: LD_ADDR_VAR 0 19
50878: PUSH
50879: LD_VAR 0 19
50883: PPUSH
50884: LD_VAR 0 19
50888: PUSH
50889: LD_INT 1
50891: PLUS
50892: PPUSH
50893: LD_VAR 0 9
50897: PPUSH
50898: CALL_OW 2
50902: ST_TO_ADDR
50903: GO 50831
50905: POP
50906: POP
// if tmp then
50907: LD_VAR 0 19
50911: IFFALSE 50923
// f := tmp ;
50913: LD_ADDR_VAR 0 12
50917: PUSH
50918: LD_VAR 0 19
50922: ST_TO_ADDR
// end ; x := personel [ i ] ;
50923: LD_ADDR_VAR 0 13
50927: PUSH
50928: LD_VAR 0 6
50932: PUSH
50933: LD_VAR 0 8
50937: ARRAY
50938: ST_TO_ADDR
// if x = - 1 then
50939: LD_VAR 0 13
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: EQUAL
50948: IFFALSE 51159
// begin for j in f do
50950: LD_ADDR_VAR 0 9
50954: PUSH
50955: LD_VAR 0 12
50959: PUSH
50960: FOR_IN
50961: IFFALSE 51155
// repeat InitHc ;
50963: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50967: LD_VAR 0 9
50971: PPUSH
50972: CALL_OW 266
50976: PUSH
50977: LD_INT 5
50979: EQUAL
50980: IFFALSE 51050
// begin if UnitsInside ( j ) < 3 then
50982: LD_VAR 0 9
50986: PPUSH
50987: CALL_OW 313
50991: PUSH
50992: LD_INT 3
50994: LESS
50995: IFFALSE 51031
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50997: LD_INT 0
50999: PPUSH
51000: LD_INT 5
51002: PUSH
51003: LD_INT 8
51005: PUSH
51006: LD_INT 9
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: LIST
51013: PUSH
51014: LD_VAR 0 17
51018: ARRAY
51019: PPUSH
51020: LD_VAR 0 4
51024: PPUSH
51025: CALL_OW 380
51029: GO 51048
// PrepareHuman ( false , i , skill ) ;
51031: LD_INT 0
51033: PPUSH
51034: LD_VAR 0 8
51038: PPUSH
51039: LD_VAR 0 4
51043: PPUSH
51044: CALL_OW 380
// end else
51048: GO 51067
// PrepareHuman ( false , i , skill ) ;
51050: LD_INT 0
51052: PPUSH
51053: LD_VAR 0 8
51057: PPUSH
51058: LD_VAR 0 4
51062: PPUSH
51063: CALL_OW 380
// un := CreateHuman ;
51067: LD_ADDR_VAR 0 14
51071: PUSH
51072: CALL_OW 44
51076: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51077: LD_ADDR_VAR 0 7
51081: PUSH
51082: LD_VAR 0 7
51086: PPUSH
51087: LD_INT 1
51089: PPUSH
51090: LD_VAR 0 14
51094: PPUSH
51095: CALL_OW 2
51099: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51100: LD_VAR 0 14
51104: PPUSH
51105: LD_VAR 0 9
51109: PPUSH
51110: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51114: LD_VAR 0 9
51118: PPUSH
51119: CALL_OW 313
51123: PUSH
51124: LD_INT 6
51126: EQUAL
51127: IFTRUE 51151
51129: PUSH
51130: LD_VAR 0 9
51134: PPUSH
51135: CALL_OW 266
51139: PUSH
51140: LD_INT 32
51142: PUSH
51143: LD_INT 31
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: IN
51150: OR
51151: IFFALSE 50963
51153: GO 50960
51155: POP
51156: POP
// end else
51157: GO 51543
// for j = 1 to x do
51159: LD_ADDR_VAR 0 9
51163: PUSH
51164: DOUBLE
51165: LD_INT 1
51167: DEC
51168: ST_TO_ADDR
51169: LD_VAR 0 13
51173: PUSH
51174: FOR_TO
51175: IFFALSE 51541
// begin InitHc ;
51177: CALL_OW 19
// if not f then
51181: LD_VAR 0 12
51185: NOT
51186: IFFALSE 51275
// begin PrepareHuman ( false , i , skill ) ;
51188: LD_INT 0
51190: PPUSH
51191: LD_VAR 0 8
51195: PPUSH
51196: LD_VAR 0 4
51200: PPUSH
51201: CALL_OW 380
// un := CreateHuman ;
51205: LD_ADDR_VAR 0 14
51209: PUSH
51210: CALL_OW 44
51214: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51215: LD_ADDR_VAR 0 7
51219: PUSH
51220: LD_VAR 0 7
51224: PPUSH
51225: LD_INT 1
51227: PPUSH
51228: LD_VAR 0 14
51232: PPUSH
51233: CALL_OW 2
51237: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51238: LD_VAR 0 14
51242: PPUSH
51243: LD_VAR 0 1
51247: PPUSH
51248: CALL_OW 250
51252: PPUSH
51253: LD_VAR 0 1
51257: PPUSH
51258: CALL_OW 251
51262: PPUSH
51263: LD_INT 10
51265: PPUSH
51266: LD_INT 0
51268: PPUSH
51269: CALL_OW 50
// continue ;
51273: GO 51174
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51275: LD_VAR 0 12
51279: PUSH
51280: LD_INT 1
51282: ARRAY
51283: PPUSH
51284: CALL_OW 313
51288: IFFALSE 51316
51290: PUSH
51291: LD_VAR 0 12
51295: PUSH
51296: LD_INT 1
51298: ARRAY
51299: PPUSH
51300: CALL_OW 266
51304: PUSH
51305: LD_INT 32
51307: PUSH
51308: LD_INT 31
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: IN
51315: AND
51316: IFTRUE 51337
51318: PUSH
51319: LD_VAR 0 12
51323: PUSH
51324: LD_INT 1
51326: ARRAY
51327: PPUSH
51328: CALL_OW 313
51332: PUSH
51333: LD_INT 6
51335: EQUAL
51336: OR
51337: IFFALSE 51357
// f := Delete ( f , 1 ) ;
51339: LD_ADDR_VAR 0 12
51343: PUSH
51344: LD_VAR 0 12
51348: PPUSH
51349: LD_INT 1
51351: PPUSH
51352: CALL_OW 3
51356: ST_TO_ADDR
// if not f then
51357: LD_VAR 0 12
51361: NOT
51362: IFFALSE 51380
// begin x := x + 2 ;
51364: LD_ADDR_VAR 0 13
51368: PUSH
51369: LD_VAR 0 13
51373: PUSH
51374: LD_INT 2
51376: PLUS
51377: ST_TO_ADDR
// continue ;
51378: GO 51174
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51380: LD_VAR 0 12
51384: PUSH
51385: LD_INT 1
51387: ARRAY
51388: PPUSH
51389: CALL_OW 266
51393: PUSH
51394: LD_INT 5
51396: EQUAL
51397: IFFALSE 51471
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51399: LD_VAR 0 12
51403: PUSH
51404: LD_INT 1
51406: ARRAY
51407: PPUSH
51408: CALL_OW 313
51412: PUSH
51413: LD_INT 3
51415: LESS
51416: IFFALSE 51452
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51418: LD_INT 0
51420: PPUSH
51421: LD_INT 5
51423: PUSH
51424: LD_INT 8
51426: PUSH
51427: LD_INT 9
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: LIST
51434: PUSH
51435: LD_VAR 0 17
51439: ARRAY
51440: PPUSH
51441: LD_VAR 0 4
51445: PPUSH
51446: CALL_OW 380
51450: GO 51469
// PrepareHuman ( false , i , skill ) ;
51452: LD_INT 0
51454: PPUSH
51455: LD_VAR 0 8
51459: PPUSH
51460: LD_VAR 0 4
51464: PPUSH
51465: CALL_OW 380
// end else
51469: GO 51488
// PrepareHuman ( false , i , skill ) ;
51471: LD_INT 0
51473: PPUSH
51474: LD_VAR 0 8
51478: PPUSH
51479: LD_VAR 0 4
51483: PPUSH
51484: CALL_OW 380
// un := CreateHuman ;
51488: LD_ADDR_VAR 0 14
51492: PUSH
51493: CALL_OW 44
51497: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51498: LD_ADDR_VAR 0 7
51502: PUSH
51503: LD_VAR 0 7
51507: PPUSH
51508: LD_INT 1
51510: PPUSH
51511: LD_VAR 0 14
51515: PPUSH
51516: CALL_OW 2
51520: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51521: LD_VAR 0 14
51525: PPUSH
51526: LD_VAR 0 12
51530: PUSH
51531: LD_INT 1
51533: ARRAY
51534: PPUSH
51535: CALL_OW 52
// end ;
51539: GO 51174
51541: POP
51542: POP
// end ;
51543: GO 50474
51545: POP
51546: POP
// result := result ^ buildings ;
51547: LD_ADDR_VAR 0 7
51551: PUSH
51552: LD_VAR 0 7
51556: PUSH
51557: LD_VAR 0 18
51561: ADD
51562: ST_TO_ADDR
// end else
51563: GO 51706
// begin for i = 1 to personel do
51565: LD_ADDR_VAR 0 8
51569: PUSH
51570: DOUBLE
51571: LD_INT 1
51573: DEC
51574: ST_TO_ADDR
51575: LD_VAR 0 6
51579: PUSH
51580: FOR_TO
51581: IFFALSE 51704
// begin if i > 4 then
51583: LD_VAR 0 8
51587: PUSH
51588: LD_INT 4
51590: GREATER
51591: IFFALSE 51595
// break ;
51593: GO 51704
// x := personel [ i ] ;
51595: LD_ADDR_VAR 0 13
51599: PUSH
51600: LD_VAR 0 6
51604: PUSH
51605: LD_VAR 0 8
51609: ARRAY
51610: ST_TO_ADDR
// if x = - 1 then
51611: LD_VAR 0 13
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: EQUAL
51620: IFFALSE 51624
// continue ;
51622: GO 51580
// PrepareHuman ( false , i , skill ) ;
51624: LD_INT 0
51626: PPUSH
51627: LD_VAR 0 8
51631: PPUSH
51632: LD_VAR 0 4
51636: PPUSH
51637: CALL_OW 380
// un := CreateHuman ;
51641: LD_ADDR_VAR 0 14
51645: PUSH
51646: CALL_OW 44
51650: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51651: LD_VAR 0 14
51655: PPUSH
51656: LD_VAR 0 1
51660: PPUSH
51661: CALL_OW 250
51665: PPUSH
51666: LD_VAR 0 1
51670: PPUSH
51671: CALL_OW 251
51675: PPUSH
51676: LD_INT 10
51678: PPUSH
51679: LD_INT 0
51681: PPUSH
51682: CALL_OW 50
// result := result ^ un ;
51686: LD_ADDR_VAR 0 7
51690: PUSH
51691: LD_VAR 0 7
51695: PUSH
51696: LD_VAR 0 14
51700: ADD
51701: ST_TO_ADDR
// end ;
51702: GO 51580
51704: POP
51705: POP
// end ; end ;
51706: LD_VAR 0 7
51710: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51711: LD_INT 0
51713: PPUSH
51714: PPUSH
51715: PPUSH
51716: PPUSH
51717: PPUSH
51718: PPUSH
51719: PPUSH
51720: PPUSH
51721: PPUSH
51722: PPUSH
51723: PPUSH
51724: PPUSH
51725: PPUSH
51726: PPUSH
51727: PPUSH
51728: PPUSH
// result := false ;
51729: LD_ADDR_VAR 0 3
51733: PUSH
51734: LD_INT 0
51736: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51737: LD_VAR 0 1
51741: NOT
51742: IFTRUE 51767
51744: PUSH
51745: LD_VAR 0 1
51749: PPUSH
51750: CALL_OW 266
51754: PUSH
51755: LD_INT 32
51757: PUSH
51758: LD_INT 33
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: IN
51765: NOT
51766: OR
51767: IFFALSE 51771
// exit ;
51769: GO 52906
// nat := GetNation ( tower ) ;
51771: LD_ADDR_VAR 0 12
51775: PUSH
51776: LD_VAR 0 1
51780: PPUSH
51781: CALL_OW 248
51785: ST_TO_ADDR
// side := GetSide ( tower ) ;
51786: LD_ADDR_VAR 0 16
51790: PUSH
51791: LD_VAR 0 1
51795: PPUSH
51796: CALL_OW 255
51800: ST_TO_ADDR
// x := GetX ( tower ) ;
51801: LD_ADDR_VAR 0 10
51805: PUSH
51806: LD_VAR 0 1
51810: PPUSH
51811: CALL_OW 250
51815: ST_TO_ADDR
// y := GetY ( tower ) ;
51816: LD_ADDR_VAR 0 11
51820: PUSH
51821: LD_VAR 0 1
51825: PPUSH
51826: CALL_OW 251
51830: ST_TO_ADDR
// if not x or not y then
51831: LD_VAR 0 10
51835: NOT
51836: IFTRUE 51845
51838: PUSH
51839: LD_VAR 0 11
51843: NOT
51844: OR
51845: IFFALSE 51849
// exit ;
51847: GO 52906
// weapon := 0 ;
51849: LD_ADDR_VAR 0 18
51853: PUSH
51854: LD_INT 0
51856: ST_TO_ADDR
// fac_list := [ ] ;
51857: LD_ADDR_VAR 0 17
51861: PUSH
51862: EMPTY
51863: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51864: LD_ADDR_VAR 0 6
51868: PUSH
51869: LD_VAR 0 1
51873: PPUSH
51874: CALL_OW 274
51878: PPUSH
51879: LD_VAR 0 2
51883: PPUSH
51884: LD_INT 0
51886: PPUSH
51887: CALL 49441 0 3
51891: PPUSH
51892: LD_INT 30
51894: PUSH
51895: LD_INT 3
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PPUSH
51902: CALL_OW 72
51906: ST_TO_ADDR
// if not factories then
51907: LD_VAR 0 6
51911: NOT
51912: IFFALSE 51916
// exit ;
51914: GO 52906
// for i in factories do
51916: LD_ADDR_VAR 0 8
51920: PUSH
51921: LD_VAR 0 6
51925: PUSH
51926: FOR_IN
51927: IFFALSE 51952
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51929: LD_ADDR_VAR 0 17
51933: PUSH
51934: LD_VAR 0 17
51938: PUSH
51939: LD_VAR 0 8
51943: PPUSH
51944: CALL_OW 478
51948: UNION
51949: ST_TO_ADDR
51950: GO 51926
51952: POP
51953: POP
// if not fac_list then
51954: LD_VAR 0 17
51958: NOT
51959: IFFALSE 51963
// exit ;
51961: GO 52906
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51963: LD_ADDR_VAR 0 5
51967: PUSH
51968: LD_INT 4
51970: PUSH
51971: LD_INT 5
51973: PUSH
51974: LD_INT 9
51976: PUSH
51977: LD_INT 10
51979: PUSH
51980: LD_INT 6
51982: PUSH
51983: LD_INT 7
51985: PUSH
51986: LD_INT 11
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 27
52000: PUSH
52001: LD_INT 28
52003: PUSH
52004: LD_INT 26
52006: PUSH
52007: LD_INT 30
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 43
52018: PUSH
52019: LD_INT 44
52021: PUSH
52022: LD_INT 46
52024: PUSH
52025: LD_INT 45
52027: PUSH
52028: LD_INT 47
52030: PUSH
52031: LD_INT 49
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: PUSH
52047: LD_VAR 0 12
52051: ARRAY
52052: ST_TO_ADDR
// list := list isect fac_list ;
52053: LD_ADDR_VAR 0 5
52057: PUSH
52058: LD_VAR 0 5
52062: PUSH
52063: LD_VAR 0 17
52067: ISECT
52068: ST_TO_ADDR
// if not list then
52069: LD_VAR 0 5
52073: NOT
52074: IFFALSE 52078
// exit ;
52076: GO 52906
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52078: LD_VAR 0 12
52082: PUSH
52083: LD_INT 3
52085: EQUAL
52086: IFFALSE 52098
52088: PUSH
52089: LD_INT 49
52091: PUSH
52092: LD_VAR 0 5
52096: IN
52097: AND
52098: IFFALSE 52118
52100: PUSH
52101: LD_INT 31
52103: PPUSH
52104: LD_VAR 0 16
52108: PPUSH
52109: CALL_OW 321
52113: PUSH
52114: LD_INT 2
52116: EQUAL
52117: AND
52118: IFFALSE 52178
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52120: LD_INT 22
52122: PUSH
52123: LD_VAR 0 16
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 35
52134: PUSH
52135: LD_INT 49
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 91
52144: PUSH
52145: LD_VAR 0 1
52149: PUSH
52150: LD_INT 10
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: LIST
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: LIST
52162: PPUSH
52163: CALL_OW 69
52167: NOT
52168: IFFALSE 52178
// weapon := ru_time_lapser ;
52170: LD_ADDR_VAR 0 18
52174: PUSH
52175: LD_INT 49
52177: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52178: LD_VAR 0 12
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 2
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: IN
52193: IFFALSE 52217
52195: PUSH
52196: LD_INT 11
52198: PUSH
52199: LD_VAR 0 5
52203: IN
52204: IFTRUE 52216
52206: PUSH
52207: LD_INT 30
52209: PUSH
52210: LD_VAR 0 5
52214: IN
52215: OR
52216: AND
52217: IFFALSE 52237
52219: PUSH
52220: LD_INT 6
52222: PPUSH
52223: LD_VAR 0 16
52227: PPUSH
52228: CALL_OW 321
52232: PUSH
52233: LD_INT 2
52235: EQUAL
52236: AND
52237: IFFALSE 52404
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52239: LD_INT 22
52241: PUSH
52242: LD_VAR 0 16
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: LD_INT 35
52256: PUSH
52257: LD_INT 11
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 35
52266: PUSH
52267: LD_INT 30
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 91
52281: PUSH
52282: LD_VAR 0 1
52286: PUSH
52287: LD_INT 18
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: LIST
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: LIST
52299: PPUSH
52300: CALL_OW 69
52304: NOT
52305: IFFALSE 52381
52307: PUSH
52308: LD_INT 22
52310: PUSH
52311: LD_VAR 0 16
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 2
52322: PUSH
52323: LD_INT 30
52325: PUSH
52326: LD_INT 32
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 30
52335: PUSH
52336: LD_INT 33
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 91
52350: PUSH
52351: LD_VAR 0 1
52355: PUSH
52356: LD_INT 12
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: LIST
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: LIST
52368: PUSH
52369: EMPTY
52370: LIST
52371: PPUSH
52372: CALL_OW 69
52376: PUSH
52377: LD_INT 2
52379: GREATER
52380: AND
52381: IFFALSE 52404
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52383: LD_ADDR_VAR 0 18
52387: PUSH
52388: LD_INT 11
52390: PUSH
52391: LD_INT 30
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_VAR 0 12
52402: ARRAY
52403: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52404: LD_VAR 0 18
52408: NOT
52409: IFFALSE 52429
52411: PUSH
52412: LD_INT 40
52414: PPUSH
52415: LD_VAR 0 16
52419: PPUSH
52420: CALL_OW 321
52424: PUSH
52425: LD_INT 2
52427: EQUAL
52428: AND
52429: IFFALSE 52465
52431: PUSH
52432: LD_INT 7
52434: PUSH
52435: LD_VAR 0 5
52439: IN
52440: IFTRUE 52452
52442: PUSH
52443: LD_INT 28
52445: PUSH
52446: LD_VAR 0 5
52450: IN
52451: OR
52452: IFTRUE 52464
52454: PUSH
52455: LD_INT 45
52457: PUSH
52458: LD_VAR 0 5
52462: IN
52463: OR
52464: AND
52465: IFFALSE 52719
// begin hex := GetHexInfo ( x , y ) ;
52467: LD_ADDR_VAR 0 4
52471: PUSH
52472: LD_VAR 0 10
52476: PPUSH
52477: LD_VAR 0 11
52481: PPUSH
52482: CALL_OW 546
52486: ST_TO_ADDR
// if hex [ 1 ] then
52487: LD_VAR 0 4
52491: PUSH
52492: LD_INT 1
52494: ARRAY
52495: IFFALSE 52499
// exit ;
52497: GO 52906
// height := hex [ 2 ] ;
52499: LD_ADDR_VAR 0 15
52503: PUSH
52504: LD_VAR 0 4
52508: PUSH
52509: LD_INT 2
52511: ARRAY
52512: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52513: LD_ADDR_VAR 0 14
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: LD_INT 3
52526: PUSH
52527: LD_INT 5
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: ST_TO_ADDR
// for i in tmp do
52536: LD_ADDR_VAR 0 8
52540: PUSH
52541: LD_VAR 0 14
52545: PUSH
52546: FOR_IN
52547: IFFALSE 52717
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52549: LD_ADDR_VAR 0 9
52553: PUSH
52554: LD_VAR 0 10
52558: PPUSH
52559: LD_VAR 0 8
52563: PPUSH
52564: LD_INT 5
52566: PPUSH
52567: CALL_OW 272
52571: PUSH
52572: LD_VAR 0 11
52576: PPUSH
52577: LD_VAR 0 8
52581: PPUSH
52582: LD_INT 5
52584: PPUSH
52585: CALL_OW 273
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52594: LD_VAR 0 9
52598: PUSH
52599: LD_INT 1
52601: ARRAY
52602: PPUSH
52603: LD_VAR 0 9
52607: PUSH
52608: LD_INT 2
52610: ARRAY
52611: PPUSH
52612: CALL_OW 488
52616: IFFALSE 52715
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52618: LD_ADDR_VAR 0 4
52622: PUSH
52623: LD_VAR 0 9
52627: PUSH
52628: LD_INT 1
52630: ARRAY
52631: PPUSH
52632: LD_VAR 0 9
52636: PUSH
52637: LD_INT 2
52639: ARRAY
52640: PPUSH
52641: CALL_OW 546
52645: ST_TO_ADDR
// if hex [ 1 ] then
52646: LD_VAR 0 4
52650: PUSH
52651: LD_INT 1
52653: ARRAY
52654: IFFALSE 52658
// continue ;
52656: GO 52546
// h := hex [ 2 ] ;
52658: LD_ADDR_VAR 0 13
52662: PUSH
52663: LD_VAR 0 4
52667: PUSH
52668: LD_INT 2
52670: ARRAY
52671: ST_TO_ADDR
// if h + 7 < height then
52672: LD_VAR 0 13
52676: PUSH
52677: LD_INT 7
52679: PLUS
52680: PUSH
52681: LD_VAR 0 15
52685: LESS
52686: IFFALSE 52715
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52688: LD_ADDR_VAR 0 18
52692: PUSH
52693: LD_INT 7
52695: PUSH
52696: LD_INT 28
52698: PUSH
52699: LD_INT 45
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: LIST
52706: PUSH
52707: LD_VAR 0 12
52711: ARRAY
52712: ST_TO_ADDR
// break ;
52713: GO 52717
// end ; end ; end ;
52715: GO 52546
52717: POP
52718: POP
// end ; if not weapon then
52719: LD_VAR 0 18
52723: NOT
52724: IFFALSE 52784
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52726: LD_ADDR_VAR 0 5
52730: PUSH
52731: LD_VAR 0 5
52735: PUSH
52736: LD_INT 11
52738: PUSH
52739: LD_INT 30
52741: PUSH
52742: LD_INT 49
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: LIST
52749: DIFF
52750: ST_TO_ADDR
// if not list then
52751: LD_VAR 0 5
52755: NOT
52756: IFFALSE 52760
// exit ;
52758: GO 52906
// weapon := list [ rand ( 1 , list ) ] ;
52760: LD_ADDR_VAR 0 18
52764: PUSH
52765: LD_VAR 0 5
52769: PUSH
52770: LD_INT 1
52772: PPUSH
52773: LD_VAR 0 5
52777: PPUSH
52778: CALL_OW 12
52782: ARRAY
52783: ST_TO_ADDR
// end ; if weapon then
52784: LD_VAR 0 18
52788: IFFALSE 52906
// begin tmp := CostOfWeapon ( weapon ) ;
52790: LD_ADDR_VAR 0 14
52794: PUSH
52795: LD_VAR 0 18
52799: PPUSH
52800: CALL_OW 451
52804: ST_TO_ADDR
// j := GetBase ( tower ) ;
52805: LD_ADDR_VAR 0 9
52809: PUSH
52810: LD_VAR 0 1
52814: PPUSH
52815: CALL_OW 274
52819: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52820: LD_VAR 0 9
52824: PPUSH
52825: LD_INT 1
52827: PPUSH
52828: CALL_OW 275
52832: PUSH
52833: LD_VAR 0 14
52837: PUSH
52838: LD_INT 1
52840: ARRAY
52841: GREATEREQUAL
52842: IFFALSE 52868
52844: PUSH
52845: LD_VAR 0 9
52849: PPUSH
52850: LD_INT 2
52852: PPUSH
52853: CALL_OW 275
52857: PUSH
52858: LD_VAR 0 14
52862: PUSH
52863: LD_INT 2
52865: ARRAY
52866: GREATEREQUAL
52867: AND
52868: IFFALSE 52894
52870: PUSH
52871: LD_VAR 0 9
52875: PPUSH
52876: LD_INT 3
52878: PPUSH
52879: CALL_OW 275
52883: PUSH
52884: LD_VAR 0 14
52888: PUSH
52889: LD_INT 3
52891: ARRAY
52892: GREATEREQUAL
52893: AND
52894: IFFALSE 52906
// result := weapon ;
52896: LD_ADDR_VAR 0 3
52900: PUSH
52901: LD_VAR 0 18
52905: ST_TO_ADDR
// end ; end ;
52906: LD_VAR 0 3
52910: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52911: LD_INT 0
52913: PPUSH
52914: PPUSH
// result := true ;
52915: LD_ADDR_VAR 0 3
52919: PUSH
52920: LD_INT 1
52922: ST_TO_ADDR
// if array1 = array2 then
52923: LD_VAR 0 1
52927: PUSH
52928: LD_VAR 0 2
52932: EQUAL
52933: IFFALSE 52993
// begin for i = 1 to array1 do
52935: LD_ADDR_VAR 0 4
52939: PUSH
52940: DOUBLE
52941: LD_INT 1
52943: DEC
52944: ST_TO_ADDR
52945: LD_VAR 0 1
52949: PUSH
52950: FOR_TO
52951: IFFALSE 52989
// if array1 [ i ] <> array2 [ i ] then
52953: LD_VAR 0 1
52957: PUSH
52958: LD_VAR 0 4
52962: ARRAY
52963: PUSH
52964: LD_VAR 0 2
52968: PUSH
52969: LD_VAR 0 4
52973: ARRAY
52974: NONEQUAL
52975: IFFALSE 52987
// begin result := false ;
52977: LD_ADDR_VAR 0 3
52981: PUSH
52982: LD_INT 0
52984: ST_TO_ADDR
// break ;
52985: GO 52989
// end ;
52987: GO 52950
52989: POP
52990: POP
// end else
52991: GO 53001
// result := false ;
52993: LD_ADDR_VAR 0 3
52997: PUSH
52998: LD_INT 0
53000: ST_TO_ADDR
// end ;
53001: LD_VAR 0 3
53005: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53006: LD_INT 0
53008: PPUSH
53009: PPUSH
// if not array1 or not array2 then
53010: LD_VAR 0 1
53014: NOT
53015: IFTRUE 53024
53017: PUSH
53018: LD_VAR 0 2
53022: NOT
53023: OR
53024: IFFALSE 53028
// exit ;
53026: GO 53092
// result := true ;
53028: LD_ADDR_VAR 0 3
53032: PUSH
53033: LD_INT 1
53035: ST_TO_ADDR
// for i = 1 to array1 do
53036: LD_ADDR_VAR 0 4
53040: PUSH
53041: DOUBLE
53042: LD_INT 1
53044: DEC
53045: ST_TO_ADDR
53046: LD_VAR 0 1
53050: PUSH
53051: FOR_TO
53052: IFFALSE 53090
// if array1 [ i ] <> array2 [ i ] then
53054: LD_VAR 0 1
53058: PUSH
53059: LD_VAR 0 4
53063: ARRAY
53064: PUSH
53065: LD_VAR 0 2
53069: PUSH
53070: LD_VAR 0 4
53074: ARRAY
53075: NONEQUAL
53076: IFFALSE 53088
// begin result := false ;
53078: LD_ADDR_VAR 0 3
53082: PUSH
53083: LD_INT 0
53085: ST_TO_ADDR
// break ;
53086: GO 53090
// end ;
53088: GO 53051
53090: POP
53091: POP
// end ;
53092: LD_VAR 0 3
53096: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53097: LD_INT 0
53099: PPUSH
53100: PPUSH
53101: PPUSH
// pom := GetBase ( fac ) ;
53102: LD_ADDR_VAR 0 5
53106: PUSH
53107: LD_VAR 0 1
53111: PPUSH
53112: CALL_OW 274
53116: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53117: LD_ADDR_VAR 0 4
53121: PUSH
53122: LD_VAR 0 2
53126: PUSH
53127: LD_INT 1
53129: ARRAY
53130: PPUSH
53131: LD_VAR 0 2
53135: PUSH
53136: LD_INT 2
53138: ARRAY
53139: PPUSH
53140: LD_VAR 0 2
53144: PUSH
53145: LD_INT 3
53147: ARRAY
53148: PPUSH
53149: LD_VAR 0 2
53153: PUSH
53154: LD_INT 4
53156: ARRAY
53157: PPUSH
53158: CALL_OW 449
53162: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53163: LD_ADDR_VAR 0 3
53167: PUSH
53168: LD_VAR 0 5
53172: PPUSH
53173: LD_INT 1
53175: PPUSH
53176: CALL_OW 275
53180: PUSH
53181: LD_VAR 0 4
53185: PUSH
53186: LD_INT 1
53188: ARRAY
53189: GREATEREQUAL
53190: IFFALSE 53216
53192: PUSH
53193: LD_VAR 0 5
53197: PPUSH
53198: LD_INT 2
53200: PPUSH
53201: CALL_OW 275
53205: PUSH
53206: LD_VAR 0 4
53210: PUSH
53211: LD_INT 2
53213: ARRAY
53214: GREATEREQUAL
53215: AND
53216: IFFALSE 53242
53218: PUSH
53219: LD_VAR 0 5
53223: PPUSH
53224: LD_INT 3
53226: PPUSH
53227: CALL_OW 275
53231: PUSH
53232: LD_VAR 0 4
53236: PUSH
53237: LD_INT 3
53239: ARRAY
53240: GREATEREQUAL
53241: AND
53242: ST_TO_ADDR
// end ;
53243: LD_VAR 0 3
53247: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53248: LD_INT 0
53250: PPUSH
53251: PPUSH
53252: PPUSH
53253: PPUSH
// pom := GetBase ( building ) ;
53254: LD_ADDR_VAR 0 3
53258: PUSH
53259: LD_VAR 0 1
53263: PPUSH
53264: CALL_OW 274
53268: ST_TO_ADDR
// if not pom then
53269: LD_VAR 0 3
53273: NOT
53274: IFFALSE 53278
// exit ;
53276: GO 53452
// btype := GetBType ( building ) ;
53278: LD_ADDR_VAR 0 5
53282: PUSH
53283: LD_VAR 0 1
53287: PPUSH
53288: CALL_OW 266
53292: ST_TO_ADDR
// if btype = b_armoury then
53293: LD_VAR 0 5
53297: PUSH
53298: LD_INT 4
53300: EQUAL
53301: IFFALSE 53311
// btype := b_barracks ;
53303: LD_ADDR_VAR 0 5
53307: PUSH
53308: LD_INT 5
53310: ST_TO_ADDR
// if btype = b_depot then
53311: LD_VAR 0 5
53315: PUSH
53316: LD_INT 0
53318: EQUAL
53319: IFFALSE 53329
// btype := b_warehouse ;
53321: LD_ADDR_VAR 0 5
53325: PUSH
53326: LD_INT 1
53328: ST_TO_ADDR
// if btype = b_workshop then
53329: LD_VAR 0 5
53333: PUSH
53334: LD_INT 2
53336: EQUAL
53337: IFFALSE 53347
// btype := b_factory ;
53339: LD_ADDR_VAR 0 5
53343: PUSH
53344: LD_INT 3
53346: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53347: LD_ADDR_VAR 0 4
53351: PUSH
53352: LD_VAR 0 5
53356: PPUSH
53357: LD_VAR 0 1
53361: PPUSH
53362: CALL_OW 248
53366: PPUSH
53367: CALL_OW 450
53371: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53372: LD_ADDR_VAR 0 2
53376: PUSH
53377: LD_VAR 0 3
53381: PPUSH
53382: LD_INT 1
53384: PPUSH
53385: CALL_OW 275
53389: PUSH
53390: LD_VAR 0 4
53394: PUSH
53395: LD_INT 1
53397: ARRAY
53398: GREATEREQUAL
53399: IFFALSE 53425
53401: PUSH
53402: LD_VAR 0 3
53406: PPUSH
53407: LD_INT 2
53409: PPUSH
53410: CALL_OW 275
53414: PUSH
53415: LD_VAR 0 4
53419: PUSH
53420: LD_INT 2
53422: ARRAY
53423: GREATEREQUAL
53424: AND
53425: IFFALSE 53451
53427: PUSH
53428: LD_VAR 0 3
53432: PPUSH
53433: LD_INT 3
53435: PPUSH
53436: CALL_OW 275
53440: PUSH
53441: LD_VAR 0 4
53445: PUSH
53446: LD_INT 3
53448: ARRAY
53449: GREATEREQUAL
53450: AND
53451: ST_TO_ADDR
// end ;
53452: LD_VAR 0 2
53456: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53457: LD_INT 0
53459: PPUSH
53460: PPUSH
53461: PPUSH
// pom := GetBase ( building ) ;
53462: LD_ADDR_VAR 0 4
53466: PUSH
53467: LD_VAR 0 1
53471: PPUSH
53472: CALL_OW 274
53476: ST_TO_ADDR
// if not pom then
53477: LD_VAR 0 4
53481: NOT
53482: IFFALSE 53486
// exit ;
53484: GO 53591
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53486: LD_ADDR_VAR 0 5
53490: PUSH
53491: LD_VAR 0 2
53495: PPUSH
53496: LD_VAR 0 1
53500: PPUSH
53501: CALL_OW 248
53505: PPUSH
53506: CALL_OW 450
53510: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53511: LD_ADDR_VAR 0 3
53515: PUSH
53516: LD_VAR 0 4
53520: PPUSH
53521: LD_INT 1
53523: PPUSH
53524: CALL_OW 275
53528: PUSH
53529: LD_VAR 0 5
53533: PUSH
53534: LD_INT 1
53536: ARRAY
53537: GREATEREQUAL
53538: IFFALSE 53564
53540: PUSH
53541: LD_VAR 0 4
53545: PPUSH
53546: LD_INT 2
53548: PPUSH
53549: CALL_OW 275
53553: PUSH
53554: LD_VAR 0 5
53558: PUSH
53559: LD_INT 2
53561: ARRAY
53562: GREATEREQUAL
53563: AND
53564: IFFALSE 53590
53566: PUSH
53567: LD_VAR 0 4
53571: PPUSH
53572: LD_INT 3
53574: PPUSH
53575: CALL_OW 275
53579: PUSH
53580: LD_VAR 0 5
53584: PUSH
53585: LD_INT 3
53587: ARRAY
53588: GREATEREQUAL
53589: AND
53590: ST_TO_ADDR
// end ;
53591: LD_VAR 0 3
53595: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53596: LD_INT 0
53598: PPUSH
53599: PPUSH
53600: PPUSH
53601: PPUSH
53602: PPUSH
53603: PPUSH
53604: PPUSH
53605: PPUSH
53606: PPUSH
53607: PPUSH
53608: PPUSH
// result := false ;
53609: LD_ADDR_VAR 0 8
53613: PUSH
53614: LD_INT 0
53616: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53617: LD_VAR 0 5
53621: NOT
53622: IFTRUE 53631
53624: PUSH
53625: LD_VAR 0 1
53629: NOT
53630: OR
53631: IFTRUE 53640
53633: PUSH
53634: LD_VAR 0 2
53638: NOT
53639: OR
53640: IFTRUE 53649
53642: PUSH
53643: LD_VAR 0 3
53647: NOT
53648: OR
53649: IFFALSE 53653
// exit ;
53651: GO 54479
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53653: LD_ADDR_VAR 0 14
53657: PUSH
53658: LD_VAR 0 1
53662: PPUSH
53663: LD_VAR 0 2
53667: PPUSH
53668: LD_VAR 0 3
53672: PPUSH
53673: LD_VAR 0 4
53677: PPUSH
53678: LD_VAR 0 5
53682: PUSH
53683: LD_INT 1
53685: ARRAY
53686: PPUSH
53687: CALL_OW 248
53691: PPUSH
53692: LD_INT 0
53694: PPUSH
53695: CALL 55760 0 6
53699: ST_TO_ADDR
// if not hexes then
53700: LD_VAR 0 14
53704: NOT
53705: IFFALSE 53709
// exit ;
53707: GO 54479
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53709: LD_ADDR_VAR 0 17
53713: PUSH
53714: LD_VAR 0 5
53718: PPUSH
53719: LD_INT 22
53721: PUSH
53722: LD_VAR 0 13
53726: PPUSH
53727: CALL_OW 255
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 2
53738: PUSH
53739: LD_INT 30
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 30
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: LIST
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PPUSH
53768: CALL_OW 72
53772: ST_TO_ADDR
// for i = 1 to hexes do
53773: LD_ADDR_VAR 0 9
53777: PUSH
53778: DOUBLE
53779: LD_INT 1
53781: DEC
53782: ST_TO_ADDR
53783: LD_VAR 0 14
53787: PUSH
53788: FOR_TO
53789: IFFALSE 54477
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53791: LD_ADDR_VAR 0 13
53795: PUSH
53796: LD_VAR 0 14
53800: PUSH
53801: LD_VAR 0 9
53805: ARRAY
53806: PUSH
53807: LD_INT 1
53809: ARRAY
53810: PPUSH
53811: LD_VAR 0 14
53815: PUSH
53816: LD_VAR 0 9
53820: ARRAY
53821: PUSH
53822: LD_INT 2
53824: ARRAY
53825: PPUSH
53826: CALL_OW 428
53830: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53831: LD_VAR 0 14
53835: PUSH
53836: LD_VAR 0 9
53840: ARRAY
53841: PUSH
53842: LD_INT 1
53844: ARRAY
53845: PPUSH
53846: LD_VAR 0 14
53850: PUSH
53851: LD_VAR 0 9
53855: ARRAY
53856: PUSH
53857: LD_INT 2
53859: ARRAY
53860: PPUSH
53861: CALL_OW 351
53865: IFTRUE 53904
53867: PUSH
53868: LD_VAR 0 14
53872: PUSH
53873: LD_VAR 0 9
53877: ARRAY
53878: PUSH
53879: LD_INT 1
53881: ARRAY
53882: PPUSH
53883: LD_VAR 0 14
53887: PUSH
53888: LD_VAR 0 9
53892: ARRAY
53893: PUSH
53894: LD_INT 2
53896: ARRAY
53897: PPUSH
53898: CALL_OW 488
53902: NOT
53903: OR
53904: IFTRUE 53921
53906: PUSH
53907: LD_VAR 0 13
53911: PPUSH
53912: CALL_OW 247
53916: PUSH
53917: LD_INT 3
53919: EQUAL
53920: OR
53921: IFFALSE 53927
// exit ;
53923: POP
53924: POP
53925: GO 54479
// if not tmp then
53927: LD_VAR 0 13
53931: NOT
53932: IFFALSE 53936
// continue ;
53934: GO 53788
// result := true ;
53936: LD_ADDR_VAR 0 8
53940: PUSH
53941: LD_INT 1
53943: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53944: LD_VAR 0 6
53948: IFFALSE 53965
53950: PUSH
53951: LD_VAR 0 13
53955: PPUSH
53956: CALL_OW 247
53960: PUSH
53961: LD_INT 2
53963: EQUAL
53964: AND
53965: IFFALSE 53982
53967: PUSH
53968: LD_VAR 0 13
53972: PPUSH
53973: CALL_OW 263
53977: PUSH
53978: LD_INT 1
53980: EQUAL
53981: AND
53982: IFFALSE 54146
// begin if IsDrivenBy ( tmp ) then
53984: LD_VAR 0 13
53988: PPUSH
53989: CALL_OW 311
53993: IFFALSE 53997
// continue ;
53995: GO 53788
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53997: LD_VAR 0 6
54001: PPUSH
54002: LD_INT 3
54004: PUSH
54005: LD_INT 60
54007: PUSH
54008: EMPTY
54009: LIST
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 3
54017: PUSH
54018: LD_INT 55
54020: PUSH
54021: EMPTY
54022: LIST
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PPUSH
54032: CALL_OW 72
54036: IFFALSE 54144
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54038: LD_ADDR_VAR 0 18
54042: PUSH
54043: LD_VAR 0 6
54047: PPUSH
54048: LD_INT 3
54050: PUSH
54051: LD_INT 60
54053: PUSH
54054: EMPTY
54055: LIST
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 3
54063: PUSH
54064: LD_INT 55
54066: PUSH
54067: EMPTY
54068: LIST
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PPUSH
54078: CALL_OW 72
54082: PUSH
54083: LD_INT 1
54085: ARRAY
54086: ST_TO_ADDR
// if IsInUnit ( driver ) then
54087: LD_VAR 0 18
54091: PPUSH
54092: CALL_OW 310
54096: IFFALSE 54107
// ComExit ( driver ) ;
54098: LD_VAR 0 18
54102: PPUSH
54103: CALL 79750 0 1
// AddComEnterUnit ( driver , tmp ) ;
54107: LD_VAR 0 18
54111: PPUSH
54112: LD_VAR 0 13
54116: PPUSH
54117: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54121: LD_VAR 0 18
54125: PPUSH
54126: LD_VAR 0 7
54130: PPUSH
54131: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54135: LD_VAR 0 18
54139: PPUSH
54140: CALL_OW 181
// end ; continue ;
54144: GO 53788
// end ; if not cleaners or not tmp in cleaners then
54146: LD_VAR 0 6
54150: NOT
54151: IFTRUE 54166
54153: PUSH
54154: LD_VAR 0 13
54158: PUSH
54159: LD_VAR 0 6
54163: IN
54164: NOT
54165: OR
54166: IFFALSE 54475
// begin if dep then
54168: LD_VAR 0 17
54172: IFFALSE 54308
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54174: LD_ADDR_VAR 0 16
54178: PUSH
54179: LD_VAR 0 17
54183: PUSH
54184: LD_INT 1
54186: ARRAY
54187: PPUSH
54188: CALL_OW 250
54192: PPUSH
54193: LD_VAR 0 17
54197: PUSH
54198: LD_INT 1
54200: ARRAY
54201: PPUSH
54202: CALL_OW 254
54206: PPUSH
54207: LD_INT 5
54209: PPUSH
54210: CALL_OW 272
54214: PUSH
54215: LD_VAR 0 17
54219: PUSH
54220: LD_INT 1
54222: ARRAY
54223: PPUSH
54224: CALL_OW 251
54228: PPUSH
54229: LD_VAR 0 17
54233: PUSH
54234: LD_INT 1
54236: ARRAY
54237: PPUSH
54238: CALL_OW 254
54242: PPUSH
54243: LD_INT 5
54245: PPUSH
54246: CALL_OW 273
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54255: LD_VAR 0 16
54259: PUSH
54260: LD_INT 1
54262: ARRAY
54263: PPUSH
54264: LD_VAR 0 16
54268: PUSH
54269: LD_INT 2
54271: ARRAY
54272: PPUSH
54273: CALL_OW 488
54277: IFFALSE 54308
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54279: LD_VAR 0 13
54283: PPUSH
54284: LD_VAR 0 16
54288: PUSH
54289: LD_INT 1
54291: ARRAY
54292: PPUSH
54293: LD_VAR 0 16
54297: PUSH
54298: LD_INT 2
54300: ARRAY
54301: PPUSH
54302: CALL_OW 111
// continue ;
54306: GO 53788
// end ; end ; r := GetDir ( tmp ) ;
54308: LD_ADDR_VAR 0 15
54312: PUSH
54313: LD_VAR 0 13
54317: PPUSH
54318: CALL_OW 254
54322: ST_TO_ADDR
// if r = 5 then
54323: LD_VAR 0 15
54327: PUSH
54328: LD_INT 5
54330: EQUAL
54331: IFFALSE 54341
// r := 0 ;
54333: LD_ADDR_VAR 0 15
54337: PUSH
54338: LD_INT 0
54340: ST_TO_ADDR
// for j = r to 5 do
54341: LD_ADDR_VAR 0 10
54345: PUSH
54346: DOUBLE
54347: LD_VAR 0 15
54351: DEC
54352: ST_TO_ADDR
54353: LD_INT 5
54355: PUSH
54356: FOR_TO
54357: IFFALSE 54473
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54359: LD_ADDR_VAR 0 11
54363: PUSH
54364: LD_VAR 0 13
54368: PPUSH
54369: CALL_OW 250
54373: PPUSH
54374: LD_VAR 0 10
54378: PPUSH
54379: LD_INT 2
54381: PPUSH
54382: CALL_OW 272
54386: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54387: LD_ADDR_VAR 0 12
54391: PUSH
54392: LD_VAR 0 13
54396: PPUSH
54397: CALL_OW 251
54401: PPUSH
54402: LD_VAR 0 10
54406: PPUSH
54407: LD_INT 2
54409: PPUSH
54410: CALL_OW 273
54414: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54415: LD_VAR 0 11
54419: PPUSH
54420: LD_VAR 0 12
54424: PPUSH
54425: CALL_OW 488
54429: IFFALSE 54448
54431: PUSH
54432: LD_VAR 0 11
54436: PPUSH
54437: LD_VAR 0 12
54441: PPUSH
54442: CALL_OW 428
54446: NOT
54447: AND
54448: IFFALSE 54471
// begin ComMoveXY ( tmp , _x , _y ) ;
54450: LD_VAR 0 13
54454: PPUSH
54455: LD_VAR 0 11
54459: PPUSH
54460: LD_VAR 0 12
54464: PPUSH
54465: CALL_OW 111
// break ;
54469: GO 54473
// end ; end ;
54471: GO 54356
54473: POP
54474: POP
// end ; end ;
54475: GO 53788
54477: POP
54478: POP
// end ;
54479: LD_VAR 0 8
54483: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54484: LD_INT 0
54486: PPUSH
// result := true ;
54487: LD_ADDR_VAR 0 3
54491: PUSH
54492: LD_INT 1
54494: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54495: LD_VAR 0 2
54499: PUSH
54500: LD_INT 24
54502: DOUBLE
54503: EQUAL
54504: IFTRUE 54514
54506: LD_INT 33
54508: DOUBLE
54509: EQUAL
54510: IFTRUE 54514
54512: GO 54539
54514: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54515: LD_ADDR_VAR 0 3
54519: PUSH
54520: LD_INT 32
54522: PPUSH
54523: LD_VAR 0 1
54527: PPUSH
54528: CALL_OW 321
54532: PUSH
54533: LD_INT 2
54535: EQUAL
54536: ST_TO_ADDR
54537: GO 54855
54539: LD_INT 20
54541: DOUBLE
54542: EQUAL
54543: IFTRUE 54547
54545: GO 54572
54547: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54548: LD_ADDR_VAR 0 3
54552: PUSH
54553: LD_INT 6
54555: PPUSH
54556: LD_VAR 0 1
54560: PPUSH
54561: CALL_OW 321
54565: PUSH
54566: LD_INT 2
54568: EQUAL
54569: ST_TO_ADDR
54570: GO 54855
54572: LD_INT 22
54574: DOUBLE
54575: EQUAL
54576: IFTRUE 54586
54578: LD_INT 36
54580: DOUBLE
54581: EQUAL
54582: IFTRUE 54586
54584: GO 54611
54586: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54587: LD_ADDR_VAR 0 3
54591: PUSH
54592: LD_INT 15
54594: PPUSH
54595: LD_VAR 0 1
54599: PPUSH
54600: CALL_OW 321
54604: PUSH
54605: LD_INT 2
54607: EQUAL
54608: ST_TO_ADDR
54609: GO 54855
54611: LD_INT 30
54613: DOUBLE
54614: EQUAL
54615: IFTRUE 54619
54617: GO 54644
54619: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54620: LD_ADDR_VAR 0 3
54624: PUSH
54625: LD_INT 20
54627: PPUSH
54628: LD_VAR 0 1
54632: PPUSH
54633: CALL_OW 321
54637: PUSH
54638: LD_INT 2
54640: EQUAL
54641: ST_TO_ADDR
54642: GO 54855
54644: LD_INT 28
54646: DOUBLE
54647: EQUAL
54648: IFTRUE 54658
54650: LD_INT 21
54652: DOUBLE
54653: EQUAL
54654: IFTRUE 54658
54656: GO 54683
54658: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54659: LD_ADDR_VAR 0 3
54663: PUSH
54664: LD_INT 21
54666: PPUSH
54667: LD_VAR 0 1
54671: PPUSH
54672: CALL_OW 321
54676: PUSH
54677: LD_INT 2
54679: EQUAL
54680: ST_TO_ADDR
54681: GO 54855
54683: LD_INT 16
54685: DOUBLE
54686: EQUAL
54687: IFTRUE 54691
54689: GO 54716
54691: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54692: LD_ADDR_VAR 0 3
54696: PUSH
54697: LD_INT 84
54699: PPUSH
54700: LD_VAR 0 1
54704: PPUSH
54705: CALL_OW 321
54709: PUSH
54710: LD_INT 2
54712: EQUAL
54713: ST_TO_ADDR
54714: GO 54855
54716: LD_INT 19
54718: DOUBLE
54719: EQUAL
54720: IFTRUE 54730
54722: LD_INT 23
54724: DOUBLE
54725: EQUAL
54726: IFTRUE 54730
54728: GO 54755
54730: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54731: LD_ADDR_VAR 0 3
54735: PUSH
54736: LD_INT 83
54738: PPUSH
54739: LD_VAR 0 1
54743: PPUSH
54744: CALL_OW 321
54748: PUSH
54749: LD_INT 2
54751: EQUAL
54752: ST_TO_ADDR
54753: GO 54855
54755: LD_INT 17
54757: DOUBLE
54758: EQUAL
54759: IFTRUE 54763
54761: GO 54788
54763: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54764: LD_ADDR_VAR 0 3
54768: PUSH
54769: LD_INT 39
54771: PPUSH
54772: LD_VAR 0 1
54776: PPUSH
54777: CALL_OW 321
54781: PUSH
54782: LD_INT 2
54784: EQUAL
54785: ST_TO_ADDR
54786: GO 54855
54788: LD_INT 18
54790: DOUBLE
54791: EQUAL
54792: IFTRUE 54796
54794: GO 54821
54796: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54797: LD_ADDR_VAR 0 3
54801: PUSH
54802: LD_INT 40
54804: PPUSH
54805: LD_VAR 0 1
54809: PPUSH
54810: CALL_OW 321
54814: PUSH
54815: LD_INT 2
54817: EQUAL
54818: ST_TO_ADDR
54819: GO 54855
54821: LD_INT 27
54823: DOUBLE
54824: EQUAL
54825: IFTRUE 54829
54827: GO 54854
54829: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54830: LD_ADDR_VAR 0 3
54834: PUSH
54835: LD_INT 35
54837: PPUSH
54838: LD_VAR 0 1
54842: PPUSH
54843: CALL_OW 321
54847: PUSH
54848: LD_INT 2
54850: EQUAL
54851: ST_TO_ADDR
54852: GO 54855
54854: POP
// end ;
54855: LD_VAR 0 3
54859: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54860: LD_INT 0
54862: PPUSH
54863: PPUSH
54864: PPUSH
54865: PPUSH
54866: PPUSH
54867: PPUSH
54868: PPUSH
54869: PPUSH
54870: PPUSH
54871: PPUSH
54872: PPUSH
// result := false ;
54873: LD_ADDR_VAR 0 6
54877: PUSH
54878: LD_INT 0
54880: ST_TO_ADDR
// if btype = b_depot then
54881: LD_VAR 0 2
54885: PUSH
54886: LD_INT 0
54888: EQUAL
54889: IFFALSE 54901
// begin result := true ;
54891: LD_ADDR_VAR 0 6
54895: PUSH
54896: LD_INT 1
54898: ST_TO_ADDR
// exit ;
54899: GO 55755
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54901: LD_VAR 0 1
54905: NOT
54906: IFTRUE 54931
54908: PUSH
54909: LD_VAR 0 1
54913: PPUSH
54914: CALL_OW 266
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: IN
54929: NOT
54930: OR
54931: IFTRUE 54940
54933: PUSH
54934: LD_VAR 0 2
54938: NOT
54939: OR
54940: IFTRUE 54976
54942: PUSH
54943: LD_VAR 0 5
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: LD_INT 3
54959: PUSH
54960: LD_INT 4
54962: PUSH
54963: LD_INT 5
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: IN
54974: NOT
54975: OR
54976: IFTRUE 54995
54978: PUSH
54979: LD_VAR 0 3
54983: PPUSH
54984: LD_VAR 0 4
54988: PPUSH
54989: CALL_OW 488
54993: NOT
54994: OR
54995: IFFALSE 54999
// exit ;
54997: GO 55755
// side := GetSide ( depot ) ;
54999: LD_ADDR_VAR 0 9
55003: PUSH
55004: LD_VAR 0 1
55008: PPUSH
55009: CALL_OW 255
55013: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55014: LD_VAR 0 9
55018: PPUSH
55019: LD_VAR 0 2
55023: PPUSH
55024: CALL 54484 0 2
55028: NOT
55029: IFFALSE 55033
// exit ;
55031: GO 55755
// pom := GetBase ( depot ) ;
55033: LD_ADDR_VAR 0 10
55037: PUSH
55038: LD_VAR 0 1
55042: PPUSH
55043: CALL_OW 274
55047: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55048: LD_ADDR_VAR 0 11
55052: PUSH
55053: LD_VAR 0 2
55057: PPUSH
55058: LD_VAR 0 1
55062: PPUSH
55063: CALL_OW 248
55067: PPUSH
55068: CALL_OW 450
55072: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55073: LD_VAR 0 10
55077: PPUSH
55078: LD_INT 1
55080: PPUSH
55081: CALL_OW 275
55085: PUSH
55086: LD_VAR 0 11
55090: PUSH
55091: LD_INT 1
55093: ARRAY
55094: GREATEREQUAL
55095: IFFALSE 55121
55097: PUSH
55098: LD_VAR 0 10
55102: PPUSH
55103: LD_INT 2
55105: PPUSH
55106: CALL_OW 275
55110: PUSH
55111: LD_VAR 0 11
55115: PUSH
55116: LD_INT 2
55118: ARRAY
55119: GREATEREQUAL
55120: AND
55121: IFFALSE 55147
55123: PUSH
55124: LD_VAR 0 10
55128: PPUSH
55129: LD_INT 3
55131: PPUSH
55132: CALL_OW 275
55136: PUSH
55137: LD_VAR 0 11
55141: PUSH
55142: LD_INT 3
55144: ARRAY
55145: GREATEREQUAL
55146: AND
55147: NOT
55148: IFFALSE 55152
// exit ;
55150: GO 55755
// if GetBType ( depot ) = b_depot then
55152: LD_VAR 0 1
55156: PPUSH
55157: CALL_OW 266
55161: PUSH
55162: LD_INT 0
55164: EQUAL
55165: IFFALSE 55177
// dist := 28 else
55167: LD_ADDR_VAR 0 14
55171: PUSH
55172: LD_INT 28
55174: ST_TO_ADDR
55175: GO 55185
// dist := 36 ;
55177: LD_ADDR_VAR 0 14
55181: PUSH
55182: LD_INT 36
55184: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55185: LD_VAR 0 1
55189: PPUSH
55190: LD_VAR 0 3
55194: PPUSH
55195: LD_VAR 0 4
55199: PPUSH
55200: CALL_OW 297
55204: PUSH
55205: LD_VAR 0 14
55209: GREATER
55210: IFFALSE 55214
// exit ;
55212: GO 55755
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55214: LD_ADDR_VAR 0 12
55218: PUSH
55219: LD_VAR 0 2
55223: PPUSH
55224: LD_VAR 0 3
55228: PPUSH
55229: LD_VAR 0 4
55233: PPUSH
55234: LD_VAR 0 5
55238: PPUSH
55239: LD_VAR 0 1
55243: PPUSH
55244: CALL_OW 248
55248: PPUSH
55249: LD_INT 0
55251: PPUSH
55252: CALL 55760 0 6
55256: ST_TO_ADDR
// if not hexes then
55257: LD_VAR 0 12
55261: NOT
55262: IFFALSE 55266
// exit ;
55264: GO 55755
// hex := GetHexInfo ( x , y ) ;
55266: LD_ADDR_VAR 0 15
55270: PUSH
55271: LD_VAR 0 3
55275: PPUSH
55276: LD_VAR 0 4
55280: PPUSH
55281: CALL_OW 546
55285: ST_TO_ADDR
// if hex [ 1 ] then
55286: LD_VAR 0 15
55290: PUSH
55291: LD_INT 1
55293: ARRAY
55294: IFFALSE 55298
// exit ;
55296: GO 55755
// height := hex [ 2 ] ;
55298: LD_ADDR_VAR 0 13
55302: PUSH
55303: LD_VAR 0 15
55307: PUSH
55308: LD_INT 2
55310: ARRAY
55311: ST_TO_ADDR
// for i = 1 to hexes do
55312: LD_ADDR_VAR 0 7
55316: PUSH
55317: DOUBLE
55318: LD_INT 1
55320: DEC
55321: ST_TO_ADDR
55322: LD_VAR 0 12
55326: PUSH
55327: FOR_TO
55328: IFFALSE 55672
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55330: LD_VAR 0 12
55334: PUSH
55335: LD_VAR 0 7
55339: ARRAY
55340: PUSH
55341: LD_INT 1
55343: ARRAY
55344: PPUSH
55345: LD_VAR 0 12
55349: PUSH
55350: LD_VAR 0 7
55354: ARRAY
55355: PUSH
55356: LD_INT 2
55358: ARRAY
55359: PPUSH
55360: CALL_OW 488
55364: NOT
55365: IFTRUE 55407
55367: PUSH
55368: LD_VAR 0 12
55372: PUSH
55373: LD_VAR 0 7
55377: ARRAY
55378: PUSH
55379: LD_INT 1
55381: ARRAY
55382: PPUSH
55383: LD_VAR 0 12
55387: PUSH
55388: LD_VAR 0 7
55392: ARRAY
55393: PUSH
55394: LD_INT 2
55396: ARRAY
55397: PPUSH
55398: CALL_OW 428
55402: PUSH
55403: LD_INT 0
55405: GREATER
55406: OR
55407: IFTRUE 55445
55409: PUSH
55410: LD_VAR 0 12
55414: PUSH
55415: LD_VAR 0 7
55419: ARRAY
55420: PUSH
55421: LD_INT 1
55423: ARRAY
55424: PPUSH
55425: LD_VAR 0 12
55429: PUSH
55430: LD_VAR 0 7
55434: ARRAY
55435: PUSH
55436: LD_INT 2
55438: ARRAY
55439: PPUSH
55440: CALL_OW 351
55444: OR
55445: IFFALSE 55451
// exit ;
55447: POP
55448: POP
55449: GO 55755
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55451: LD_ADDR_VAR 0 8
55455: PUSH
55456: LD_VAR 0 12
55460: PUSH
55461: LD_VAR 0 7
55465: ARRAY
55466: PUSH
55467: LD_INT 1
55469: ARRAY
55470: PPUSH
55471: LD_VAR 0 12
55475: PUSH
55476: LD_VAR 0 7
55480: ARRAY
55481: PUSH
55482: LD_INT 2
55484: ARRAY
55485: PPUSH
55486: CALL_OW 546
55490: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55491: LD_VAR 0 8
55495: PUSH
55496: LD_INT 1
55498: ARRAY
55499: IFTRUE 55521
55501: PUSH
55502: LD_VAR 0 8
55506: PUSH
55507: LD_INT 2
55509: ARRAY
55510: PUSH
55511: LD_VAR 0 13
55515: PUSH
55516: LD_INT 2
55518: PLUS
55519: GREATER
55520: OR
55521: IFTRUE 55543
55523: PUSH
55524: LD_VAR 0 8
55528: PUSH
55529: LD_INT 2
55531: ARRAY
55532: PUSH
55533: LD_VAR 0 13
55537: PUSH
55538: LD_INT 2
55540: MINUS
55541: LESS
55542: OR
55543: IFTRUE 55611
55545: PUSH
55546: LD_VAR 0 8
55550: PUSH
55551: LD_INT 3
55553: ARRAY
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: LD_INT 8
55560: PUSH
55561: LD_INT 9
55563: PUSH
55564: LD_INT 10
55566: PUSH
55567: LD_INT 11
55569: PUSH
55570: LD_INT 12
55572: PUSH
55573: LD_INT 13
55575: PUSH
55576: LD_INT 16
55578: PUSH
55579: LD_INT 17
55581: PUSH
55582: LD_INT 18
55584: PUSH
55585: LD_INT 19
55587: PUSH
55588: LD_INT 20
55590: PUSH
55591: LD_INT 21
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: IN
55609: NOT
55610: OR
55611: IFTRUE 55624
55613: PUSH
55614: LD_VAR 0 8
55618: PUSH
55619: LD_INT 5
55621: ARRAY
55622: NOT
55623: OR
55624: IFTRUE 55664
55626: PUSH
55627: LD_VAR 0 8
55631: PUSH
55632: LD_INT 6
55634: ARRAY
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: LD_INT 7
55644: PUSH
55645: LD_INT 9
55647: PUSH
55648: LD_INT 10
55650: PUSH
55651: LD_INT 11
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: IN
55662: NOT
55663: OR
55664: IFFALSE 55670
// exit ;
55666: POP
55667: POP
55668: GO 55755
// end ;
55670: GO 55327
55672: POP
55673: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55674: LD_VAR 0 9
55678: PPUSH
55679: LD_VAR 0 3
55683: PPUSH
55684: LD_VAR 0 4
55688: PPUSH
55689: LD_INT 20
55691: PPUSH
55692: CALL 47574 0 4
55696: PUSH
55697: LD_INT 4
55699: ARRAY
55700: IFFALSE 55704
// exit ;
55702: GO 55755
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55704: LD_VAR 0 2
55708: PUSH
55709: LD_INT 29
55711: PUSH
55712: LD_INT 30
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: IN
55719: IFFALSE 55743
55721: PUSH
55722: LD_VAR 0 3
55726: PPUSH
55727: LD_VAR 0 4
55731: PPUSH
55732: LD_VAR 0 9
55736: PPUSH
55737: CALL_OW 440
55741: NOT
55742: AND
55743: IFFALSE 55747
// exit ;
55745: GO 55755
// result := true ;
55747: LD_ADDR_VAR 0 6
55751: PUSH
55752: LD_INT 1
55754: ST_TO_ADDR
// end ;
55755: LD_VAR 0 6
55759: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55760: LD_INT 0
55762: PPUSH
55763: PPUSH
55764: PPUSH
55765: PPUSH
55766: PPUSH
55767: PPUSH
55768: PPUSH
55769: PPUSH
55770: PPUSH
55771: PPUSH
55772: PPUSH
55773: PPUSH
55774: PPUSH
55775: PPUSH
55776: PPUSH
55777: PPUSH
55778: PPUSH
55779: PPUSH
55780: PPUSH
55781: PPUSH
55782: PPUSH
55783: PPUSH
55784: PPUSH
55785: PPUSH
55786: PPUSH
55787: PPUSH
55788: PPUSH
55789: PPUSH
55790: PPUSH
55791: PPUSH
55792: PPUSH
55793: PPUSH
55794: PPUSH
55795: PPUSH
55796: PPUSH
55797: PPUSH
55798: PPUSH
55799: PPUSH
55800: PPUSH
55801: PPUSH
55802: PPUSH
55803: PPUSH
55804: PPUSH
55805: PPUSH
55806: PPUSH
55807: PPUSH
55808: PPUSH
55809: PPUSH
55810: PPUSH
55811: PPUSH
55812: PPUSH
55813: PPUSH
55814: PPUSH
55815: PPUSH
55816: PPUSH
55817: PPUSH
55818: PPUSH
55819: PPUSH
// result = [ ] ;
55820: LD_ADDR_VAR 0 7
55824: PUSH
55825: EMPTY
55826: ST_TO_ADDR
// temp_list = [ ] ;
55827: LD_ADDR_VAR 0 9
55831: PUSH
55832: EMPTY
55833: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55834: LD_VAR 0 4
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 3
55850: PUSH
55851: LD_INT 4
55853: PUSH
55854: LD_INT 5
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: IN
55865: NOT
55866: IFTRUE 55909
55868: PUSH
55869: LD_VAR 0 1
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: IN
55884: IFFALSE 55908
55886: PUSH
55887: LD_VAR 0 5
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 2
55897: PUSH
55898: LD_INT 3
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: LIST
55905: IN
55906: NOT
55907: AND
55908: OR
55909: IFFALSE 55913
// exit ;
55911: GO 74312
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55913: LD_VAR 0 1
55917: PUSH
55918: LD_INT 6
55920: PUSH
55921: LD_INT 7
55923: PUSH
55924: LD_INT 8
55926: PUSH
55927: LD_INT 13
55929: PUSH
55930: LD_INT 12
55932: PUSH
55933: LD_INT 15
55935: PUSH
55936: LD_INT 11
55938: PUSH
55939: LD_INT 14
55941: PUSH
55942: LD_INT 10
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: IN
55956: IFFALSE 55966
// btype = b_lab ;
55958: LD_ADDR_VAR 0 1
55962: PUSH
55963: LD_INT 6
55965: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55966: LD_VAR 0 6
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: LIST
55984: IN
55985: NOT
55986: IFTRUE 56054
55988: PUSH
55989: LD_VAR 0 1
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: LD_INT 2
56002: PUSH
56003: LD_INT 3
56005: PUSH
56006: LD_INT 6
56008: PUSH
56009: LD_INT 36
56011: PUSH
56012: LD_INT 4
56014: PUSH
56015: LD_INT 5
56017: PUSH
56018: LD_INT 31
56020: PUSH
56021: LD_INT 32
56023: PUSH
56024: LD_INT 33
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: IN
56040: NOT
56041: IFFALSE 56053
56043: PUSH
56044: LD_VAR 0 6
56048: PUSH
56049: LD_INT 1
56051: EQUAL
56052: AND
56053: OR
56054: IFTRUE 56086
56056: PUSH
56057: LD_VAR 0 1
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: LD_INT 3
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: IN
56072: NOT
56073: IFFALSE 56085
56075: PUSH
56076: LD_VAR 0 6
56080: PUSH
56081: LD_INT 2
56083: EQUAL
56084: AND
56085: OR
56086: IFFALSE 56096
// mode = 0 ;
56088: LD_ADDR_VAR 0 6
56092: PUSH
56093: LD_INT 0
56095: ST_TO_ADDR
// case mode of 0 :
56096: LD_VAR 0 6
56100: PUSH
56101: LD_INT 0
56103: DOUBLE
56104: EQUAL
56105: IFTRUE 56109
56107: GO 67562
56109: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56110: LD_ADDR_VAR 0 11
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: LD_INT 2
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: LD_INT 2
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 3
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 3
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56303: LD_ADDR_VAR 0 12
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 2
56437: NEG
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 2
56449: NEG
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 3
56460: NEG
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 3
56471: NEG
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56499: LD_ADDR_VAR 0 13
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: NEG
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: LD_INT 2
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 2
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 2
56622: NEG
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 2
56646: NEG
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 3
56658: NEG
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 3
56670: NEG
56671: PUSH
56672: LD_INT 3
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56698: LD_ADDR_VAR 0 14
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: LD_INT 2
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: LD_INT 3
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: LD_INT 3
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: LD_INT 2
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56894: LD_ADDR_VAR 0 15
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 2
57017: NEG
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 2
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 3
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57087: LD_ADDR_VAR 0 16
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: LD_INT 2
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 2
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 2
57210: NEG
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 2
57222: NEG
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 3
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 3
57244: PUSH
57245: LD_INT 3
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 2
57254: PUSH
57255: LD_INT 3
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57280: LD_ADDR_VAR 0 17
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: LD_INT 1
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 2
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 2
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: PUSH
57416: LD_INT 2
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: LD_INT 2
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: LD_INT 2
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 2
57456: NEG
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: NEG
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57510: LD_ADDR_VAR 0 18
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 0
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: LD_INT 2
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 2
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 2
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 2
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: LD_INT 2
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 2
57709: NEG
57710: PUSH
57711: LD_INT 2
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57740: LD_ADDR_VAR 0 19
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: LD_INT 2
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 2
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 2
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: LD_INT 2
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 2
57916: NEG
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 2
57927: NEG
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: LD_INT 2
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57970: LD_ADDR_VAR 0 20
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: LD_INT 2
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: LD_INT 2
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 2
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 2
58105: PUSH
58106: LD_INT 2
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: LD_INT 2
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 2
58146: NEG
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 2
58157: NEG
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 2
58169: NEG
58170: PUSH
58171: LD_INT 2
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58200: LD_ADDR_VAR 0 21
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: LD_INT 1
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: LD_INT 2
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: LD_INT 2
58296: NEG
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 1
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: LD_INT 2
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: LD_INT 2
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: LD_INT 2
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58430: LD_ADDR_VAR 0 22
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: LD_INT 1
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: LD_INT 2
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 2
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 2
58565: PUSH
58566: LD_INT 2
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 0
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 2
58606: NEG
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 2
58629: NEG
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58660: LD_ADDR_VAR 0 23
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: LD_INT 2
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 2
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 2
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 2
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 1
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: LD_INT 1
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 2
58836: NEG
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 2
58847: NEG
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: LD_INT 2
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 2
58871: NEG
58872: PUSH
58873: LD_INT 3
58875: NEG
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: LD_INT 3
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: LD_INT 2
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58940: LD_ADDR_VAR 0 24
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 1
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: LD_INT 1
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: LD_INT 2
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: LD_INT 2
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 2
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 2
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: LD_INT 2
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: LD_INT 2
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 2
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: LD_INT 2
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: LD_INT 2
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 2
59162: PUSH
59163: LD_INT 1
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 3
59173: PUSH
59174: LD_INT 1
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 3
59183: PUSH
59184: LD_INT 2
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59216: LD_ADDR_VAR 0 25
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: NEG
59298: PUSH
59299: LD_INT 2
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: LD_INT 2
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 2
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 2
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 2
59351: PUSH
59352: LD_INT 2
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 1
59361: PUSH
59362: LD_INT 2
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: LD_INT 2
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 2
59392: NEG
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 2
59403: NEG
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 2
59415: NEG
59416: PUSH
59417: LD_INT 2
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 3
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 3
59437: PUSH
59438: LD_INT 2
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 2
59447: PUSH
59448: LD_INT 3
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: PUSH
59458: LD_INT 3
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59490: LD_ADDR_VAR 0 26
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: NEG
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: LD_INT 1
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: LD_INT 2
59575: NEG
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: LD_INT 2
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 2
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 2
59615: PUSH
59616: LD_INT 1
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: LD_INT 2
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: LD_INT 2
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: LD_INT 2
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 2
59666: NEG
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 2
59677: NEG
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 2
59689: NEG
59690: PUSH
59691: LD_INT 2
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 2
59701: PUSH
59702: LD_INT 3
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: LD_INT 3
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: LD_INT 2
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59766: LD_ADDR_VAR 0 27
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: NEG
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: LD_INT 2
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: LD_INT 1
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 2
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 2
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 2
59901: PUSH
59902: LD_INT 2
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: LD_INT 2
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: LD_INT 2
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 2
59953: NEG
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: LD_INT 2
59969: NEG
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 1
59977: NEG
59978: PUSH
59979: LD_INT 2
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 2
59988: NEG
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 3
59999: NEG
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 3
60011: NEG
60012: PUSH
60013: LD_INT 2
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60046: LD_ADDR_VAR 0 28
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 1
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 1
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: NEG
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: LD_INT 2
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: LD_INT 2
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 2
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 2
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 2
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: LD_INT 2
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 0
60201: PUSH
60202: LD_INT 2
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 2
60222: NEG
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 2
60233: NEG
60234: PUSH
60235: LD_INT 1
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 2
60245: NEG
60246: PUSH
60247: LD_INT 2
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 2
60257: NEG
60258: PUSH
60259: LD_INT 3
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 1
60269: NEG
60270: PUSH
60271: LD_INT 3
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 3
60281: NEG
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 3
60293: NEG
60294: PUSH
60295: LD_INT 2
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60328: LD_ADDR_VAR 0 29
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 1
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: NEG
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: NEG
60410: PUSH
60411: LD_INT 2
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: LD_INT 2
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: LD_INT 1
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 2
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: LD_INT 2
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: LD_INT 2
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 2
60494: NEG
60495: PUSH
60496: LD_INT 1
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 2
60506: NEG
60507: PUSH
60508: LD_INT 2
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 2
60518: NEG
60519: PUSH
60520: LD_INT 3
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 2
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 3
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: LD_INT 3
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: NEG
60562: PUSH
60563: LD_INT 2
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 3
60572: NEG
60573: PUSH
60574: LD_INT 2
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60607: LD_ADDR_VAR 0 30
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: LD_INT 2
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: LD_INT 2
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: LD_INT 1
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 2
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 2
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: LD_INT 2
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 1
60752: PUSH
60753: LD_INT 2
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 1
60762: NEG
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 2
60773: NEG
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: NEG
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: LD_INT 3
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: LD_INT 2
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 3
60819: PUSH
60820: LD_INT 2
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 2
60829: PUSH
60830: LD_INT 3
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 2
60839: NEG
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 3
60850: NEG
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60885: LD_ADDR_VAR 0 31
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 1
60966: NEG
60967: PUSH
60968: LD_INT 2
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: LD_INT 1
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 2
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 2
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 2
61009: PUSH
61010: LD_INT 2
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 1
61019: PUSH
61020: LD_INT 2
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: LD_INT 2
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: NEG
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 2
61050: NEG
61051: PUSH
61052: LD_INT 1
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 2
61062: NEG
61063: PUSH
61064: LD_INT 2
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 2
61074: NEG
61075: PUSH
61076: LD_INT 3
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 2
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 3
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 1
61107: PUSH
61108: LD_INT 3
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 1
61117: NEG
61118: PUSH
61119: LD_INT 2
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 3
61128: NEG
61129: PUSH
61130: LD_INT 2
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61163: LD_ADDR_VAR 0 32
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: NEG
61233: PUSH
61234: LD_INT 1
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: LD_INT 2
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: LD_INT 2
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 1
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 2
61278: PUSH
61279: LD_INT 1
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 2
61288: PUSH
61289: LD_INT 2
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: LD_INT 2
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: LD_INT 2
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 1
61318: NEG
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 2
61329: NEG
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 2
61340: NEG
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: LD_INT 3
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 1
61364: PUSH
61365: LD_INT 2
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 3
61375: PUSH
61376: LD_INT 2
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 2
61385: PUSH
61386: LD_INT 3
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 2
61395: NEG
61396: PUSH
61397: LD_INT 1
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 3
61406: NEG
61407: PUSH
61408: LD_INT 1
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61441: LD_ADDR_VAR 0 33
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 1
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 1
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: LD_INT 1
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: PUSH
61512: LD_INT 1
61514: NEG
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 2
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 2
61555: PUSH
61556: LD_INT 1
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 1
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: LD_INT 2
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 2
61596: NEG
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 2
61607: NEG
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 2
61619: NEG
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 2
61631: NEG
61632: PUSH
61633: LD_INT 3
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 2
61643: PUSH
61644: LD_INT 1
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 3
61654: PUSH
61655: LD_INT 1
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: LD_INT 3
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: LD_INT 2
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 3
61685: NEG
61686: PUSH
61687: LD_INT 2
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61720: LD_ADDR_VAR 0 34
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: LD_INT 1
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: LD_INT 1
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: NEG
61790: PUSH
61791: LD_INT 1
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: LD_INT 2
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 2
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: LD_INT 1
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 2
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 2
61845: PUSH
61846: LD_INT 2
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 1
61855: PUSH
61856: LD_INT 2
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: NEG
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 2
61887: NEG
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 2
61899: NEG
61900: PUSH
61901: LD_INT 2
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: LD_INT 3
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 1
61923: PUSH
61924: LD_INT 2
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 3
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: PUSH
61945: LD_INT 3
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: NEG
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 3
61965: NEG
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62000: LD_ADDR_VAR 0 35
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 1
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 1
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 2
62081: PUSH
62082: LD_INT 1
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 2
62091: NEG
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62112: LD_ADDR_VAR 0 36
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: NEG
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: LD_INT 1
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 1
62193: NEG
62194: PUSH
62195: LD_INT 2
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: LD_INT 2
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62224: LD_ADDR_VAR 0 37
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: LD_INT 0
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: LD_INT 1
62244: NEG
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 1
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: NEG
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 1
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: LD_INT 1
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62336: LD_ADDR_VAR 0 38
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: LD_INT 1
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 1
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: NEG
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 1
62405: NEG
62406: PUSH
62407: LD_INT 1
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 2
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 2
62427: NEG
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62448: LD_ADDR_VAR 0 39
62452: PUSH
62453: LD_INT 0
62455: PUSH
62456: LD_INT 0
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 0
62465: PUSH
62466: LD_INT 1
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 1
62476: PUSH
62477: LD_INT 0
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 1
62486: PUSH
62487: LD_INT 1
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: LD_INT 1
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: NEG
62507: PUSH
62508: LD_INT 0
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 1
62517: NEG
62518: PUSH
62519: LD_INT 1
62521: NEG
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 1
62529: NEG
62530: PUSH
62531: LD_INT 2
62533: NEG
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: LD_INT 2
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62560: LD_ADDR_VAR 0 40
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: LD_INT 1
62580: NEG
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 0
62608: PUSH
62609: LD_INT 1
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 1
62618: NEG
62619: PUSH
62620: LD_INT 0
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 1
62641: PUSH
62642: LD_INT 1
62644: NEG
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: LD_INT 1
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62672: LD_ADDR_VAR 0 41
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: LD_INT 1
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: LD_INT 1
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: LD_INT 2
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: LD_INT 0
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 2
62786: PUSH
62787: LD_INT 1
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 2
62796: PUSH
62797: LD_INT 2
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 1
62806: PUSH
62807: LD_INT 2
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: LD_INT 1
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 2
62827: NEG
62828: PUSH
62829: LD_INT 0
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 2
62838: NEG
62839: PUSH
62840: LD_INT 1
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 2
62850: NEG
62851: PUSH
62852: LD_INT 2
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 2
62862: NEG
62863: PUSH
62864: LD_INT 3
62866: NEG
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 2
62874: PUSH
62875: LD_INT 1
62877: NEG
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 3
62885: PUSH
62886: LD_INT 0
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 3
62895: PUSH
62896: LD_INT 1
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 3
62905: PUSH
62906: LD_INT 2
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 3
62915: PUSH
62916: LD_INT 3
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 2
62925: PUSH
62926: LD_INT 3
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 2
62935: NEG
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 3
62946: NEG
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 3
62957: NEG
62958: PUSH
62959: LD_INT 1
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 3
62969: NEG
62970: PUSH
62971: LD_INT 2
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 3
62981: NEG
62982: PUSH
62983: LD_INT 3
62985: NEG
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63022: LD_ADDR_VAR 0 42
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: LD_INT 1
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: NEG
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 1
63091: NEG
63092: PUSH
63093: LD_INT 1
63095: NEG
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: LD_INT 2
63107: NEG
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: LD_INT 2
63118: NEG
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 2
63137: PUSH
63138: LD_INT 1
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 2
63147: PUSH
63148: LD_INT 2
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 1
63157: PUSH
63158: LD_INT 2
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 0
63167: PUSH
63168: LD_INT 2
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 1
63177: NEG
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 2
63188: NEG
63189: PUSH
63190: LD_INT 1
63192: NEG
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 2
63200: NEG
63201: PUSH
63202: LD_INT 2
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 2
63212: NEG
63213: PUSH
63214: LD_INT 3
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 1
63224: NEG
63225: PUSH
63226: LD_INT 3
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: LD_INT 3
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 1
63247: PUSH
63248: LD_INT 2
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 3
63258: PUSH
63259: LD_INT 2
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 3
63268: PUSH
63269: LD_INT 3
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 2
63278: PUSH
63279: LD_INT 3
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: LD_INT 3
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: LD_INT 3
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 1
63308: NEG
63309: PUSH
63310: LD_INT 2
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 3
63319: NEG
63320: PUSH
63321: LD_INT 2
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 3
63331: NEG
63332: PUSH
63333: LD_INT 3
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63372: LD_ADDR_VAR 0 43
63376: PUSH
63377: LD_INT 0
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 0
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 1
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 1
63410: PUSH
63411: LD_INT 1
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: LD_INT 1
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: NEG
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 1
63441: NEG
63442: PUSH
63443: LD_INT 1
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: LD_INT 2
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: LD_INT 2
63468: NEG
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 1
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 2
63497: PUSH
63498: LD_INT 1
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 1
63507: PUSH
63508: LD_INT 2
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 0
63517: PUSH
63518: LD_INT 2
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: LD_INT 1
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 2
63538: NEG
63539: PUSH
63540: LD_INT 0
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 2
63549: NEG
63550: PUSH
63551: LD_INT 1
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 1
63561: NEG
63562: PUSH
63563: LD_INT 3
63565: NEG
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: LD_INT 3
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: LD_INT 2
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 2
63595: PUSH
63596: LD_INT 1
63598: NEG
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 3
63606: PUSH
63607: LD_INT 0
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 3
63616: PUSH
63617: LD_INT 1
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: LD_INT 3
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: LD_INT 3
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: LD_INT 2
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 2
63657: NEG
63658: PUSH
63659: LD_INT 1
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 3
63668: NEG
63669: PUSH
63670: LD_INT 0
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 3
63679: NEG
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63720: LD_ADDR_VAR 0 44
63724: PUSH
63725: LD_INT 0
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 1
63758: PUSH
63759: LD_INT 1
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 0
63768: PUSH
63769: LD_INT 1
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 1
63778: NEG
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 1
63801: NEG
63802: PUSH
63803: LD_INT 2
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: LD_INT 1
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 2
63824: PUSH
63825: LD_INT 0
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 2
63834: PUSH
63835: LD_INT 1
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 2
63844: PUSH
63845: LD_INT 2
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: LD_INT 2
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: LD_INT 1
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 2
63875: NEG
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 2
63886: NEG
63887: PUSH
63888: LD_INT 1
63890: NEG
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 2
63898: NEG
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 2
63910: NEG
63911: PUSH
63912: LD_INT 3
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 2
63922: PUSH
63923: LD_INT 1
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 3
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 3
63943: PUSH
63944: LD_INT 1
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 3
63953: PUSH
63954: LD_INT 2
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 3
63963: PUSH
63964: LD_INT 3
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 2
63973: PUSH
63974: LD_INT 3
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 2
63983: NEG
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 3
63994: NEG
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 3
64005: NEG
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 3
64017: NEG
64018: PUSH
64019: LD_INT 2
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 3
64029: NEG
64030: PUSH
64031: LD_INT 3
64033: NEG
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64070: LD_ADDR_VAR 0 45
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: LD_INT 0
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 0
64087: PUSH
64088: LD_INT 1
64090: NEG
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: PUSH
64099: LD_INT 0
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 1
64108: PUSH
64109: LD_INT 1
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: LD_INT 1
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: NEG
64129: PUSH
64130: LD_INT 0
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 1
64139: NEG
64140: PUSH
64141: LD_INT 1
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 1
64151: NEG
64152: PUSH
64153: LD_INT 2
64155: NEG
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 0
64163: PUSH
64164: LD_INT 2
64166: NEG
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: LD_INT 1
64177: NEG
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 2
64185: PUSH
64186: LD_INT 1
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 2
64195: PUSH
64196: LD_INT 2
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 1
64205: PUSH
64206: LD_INT 2
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: LD_INT 2
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 1
64225: NEG
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 2
64236: NEG
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 2
64248: NEG
64249: PUSH
64250: LD_INT 2
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 2
64260: NEG
64261: PUSH
64262: LD_INT 3
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: LD_INT 3
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 0
64284: PUSH
64285: LD_INT 3
64287: NEG
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 1
64295: PUSH
64296: LD_INT 2
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 3
64306: PUSH
64307: LD_INT 2
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 3
64316: PUSH
64317: LD_INT 3
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 2
64326: PUSH
64327: LD_INT 3
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 1
64336: PUSH
64337: LD_INT 3
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: LD_INT 3
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 1
64356: NEG
64357: PUSH
64358: LD_INT 2
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 3
64367: NEG
64368: PUSH
64369: LD_INT 2
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 3
64379: NEG
64380: PUSH
64381: LD_INT 3
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64420: LD_ADDR_VAR 0 46
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: LD_INT 0
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 0
64437: PUSH
64438: LD_INT 1
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 1
64448: PUSH
64449: LD_INT 0
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 1
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 0
64468: PUSH
64469: LD_INT 1
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: LD_INT 1
64493: NEG
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: LD_INT 2
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: LD_INT 2
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: PUSH
64525: LD_INT 1
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 2
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 2
64545: PUSH
64546: LD_INT 1
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 1
64555: PUSH
64556: LD_INT 2
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: LD_INT 2
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 1
64575: NEG
64576: PUSH
64577: LD_INT 1
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 2
64586: NEG
64587: PUSH
64588: LD_INT 0
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 2
64597: NEG
64598: PUSH
64599: LD_INT 1
64601: NEG
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 1
64609: NEG
64610: PUSH
64611: LD_INT 3
64613: NEG
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: LD_INT 3
64624: NEG
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: LD_INT 2
64635: NEG
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 2
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 3
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 3
64664: PUSH
64665: LD_INT 1
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 1
64674: PUSH
64675: LD_INT 3
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: LD_INT 3
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 1
64694: NEG
64695: PUSH
64696: LD_INT 2
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 2
64705: NEG
64706: PUSH
64707: LD_INT 1
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 3
64716: NEG
64717: PUSH
64718: LD_INT 0
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 3
64727: NEG
64728: PUSH
64729: LD_INT 1
64731: NEG
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64768: LD_ADDR_VAR 0 47
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: LD_INT 0
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 1
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 1
64806: PUSH
64807: LD_INT 1
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: LD_INT 1
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: NEG
64838: PUSH
64839: LD_INT 1
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 1
64849: NEG
64850: PUSH
64851: LD_INT 2
64853: NEG
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 0
64861: PUSH
64862: LD_INT 2
64864: NEG
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 1
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 2
64883: NEG
64884: PUSH
64885: LD_INT 1
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 2
64895: NEG
64896: PUSH
64897: LD_INT 2
64899: NEG
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64919: LD_ADDR_VAR 0 48
64923: PUSH
64924: LD_INT 0
64926: PUSH
64927: LD_INT 0
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 0
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 1
64947: PUSH
64948: LD_INT 0
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 1
64957: PUSH
64958: LD_INT 1
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: LD_INT 1
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 1
64977: NEG
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 1
64988: NEG
64989: PUSH
64990: LD_INT 1
64992: NEG
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 1
65000: NEG
65001: PUSH
65002: LD_INT 2
65004: NEG
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 0
65012: PUSH
65013: LD_INT 2
65015: NEG
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 1
65023: PUSH
65024: LD_INT 1
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 2
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 2
65044: PUSH
65045: LD_INT 1
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65066: LD_ADDR_VAR 0 49
65070: PUSH
65071: LD_INT 0
65073: PUSH
65074: LD_INT 0
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: LD_INT 1
65086: NEG
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 1
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: LD_INT 1
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: LD_INT 1
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 1
65124: NEG
65125: PUSH
65126: LD_INT 0
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 1
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 2
65158: PUSH
65159: LD_INT 0
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 2
65168: PUSH
65169: LD_INT 1
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 2
65178: PUSH
65179: LD_INT 2
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 1
65188: PUSH
65189: LD_INT 2
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65210: LD_ADDR_VAR 0 50
65214: PUSH
65215: LD_INT 0
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: LD_INT 1
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 1
65238: PUSH
65239: LD_INT 0
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 1
65248: PUSH
65249: LD_INT 1
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 1
65268: NEG
65269: PUSH
65270: LD_INT 0
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: LD_INT 1
65283: NEG
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 2
65291: PUSH
65292: LD_INT 1
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 2
65301: PUSH
65302: LD_INT 2
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 1
65311: PUSH
65312: LD_INT 2
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: LD_INT 2
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 1
65331: NEG
65332: PUSH
65333: LD_INT 1
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65354: LD_ADDR_VAR 0 51
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: LD_INT 0
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 0
65371: PUSH
65372: LD_INT 1
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 1
65392: PUSH
65393: LD_INT 1
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 0
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 1
65412: NEG
65413: PUSH
65414: LD_INT 0
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 1
65423: NEG
65424: PUSH
65425: LD_INT 1
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: PUSH
65436: LD_INT 2
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 0
65445: PUSH
65446: LD_INT 2
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 1
65455: NEG
65456: PUSH
65457: LD_INT 1
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 2
65466: NEG
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 2
65477: NEG
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65501: LD_ADDR_VAR 0 52
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 0
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 1
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 1
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 0
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 1
65559: NEG
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 1
65570: NEG
65571: PUSH
65572: LD_INT 1
65574: NEG
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 1
65582: NEG
65583: PUSH
65584: LD_INT 2
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 1
65594: NEG
65595: PUSH
65596: LD_INT 1
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 2
65605: NEG
65606: PUSH
65607: LD_INT 0
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 2
65616: NEG
65617: PUSH
65618: LD_INT 1
65620: NEG
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 2
65628: NEG
65629: PUSH
65630: LD_INT 2
65632: NEG
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65652: LD_ADDR_VAR 0 53
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: LD_INT 0
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 0
65669: PUSH
65670: LD_INT 1
65672: NEG
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 1
65680: PUSH
65681: LD_INT 0
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 1
65690: PUSH
65691: LD_INT 1
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: LD_INT 1
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 1
65710: NEG
65711: PUSH
65712: LD_INT 0
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 1
65721: NEG
65722: PUSH
65723: LD_INT 1
65725: NEG
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 1
65733: NEG
65734: PUSH
65735: LD_INT 2
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: LD_INT 2
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 1
65756: PUSH
65757: LD_INT 1
65759: NEG
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 2
65767: PUSH
65768: LD_INT 0
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 2
65777: PUSH
65778: LD_INT 1
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 2
65787: PUSH
65788: LD_INT 2
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 1
65797: PUSH
65798: LD_INT 2
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 0
65807: PUSH
65808: LD_INT 2
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 1
65817: NEG
65818: PUSH
65819: LD_INT 1
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 2
65828: NEG
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 2
65839: NEG
65840: PUSH
65841: LD_INT 1
65843: NEG
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 2
65851: NEG
65852: PUSH
65853: LD_INT 2
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65882: LD_ADDR_VAR 0 54
65886: PUSH
65887: LD_INT 0
65889: PUSH
65890: LD_INT 0
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 0
65899: PUSH
65900: LD_INT 1
65902: NEG
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 1
65910: PUSH
65911: LD_INT 0
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 1
65920: PUSH
65921: LD_INT 1
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 0
65930: PUSH
65931: LD_INT 1
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 1
65940: NEG
65941: PUSH
65942: LD_INT 0
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 1
65951: NEG
65952: PUSH
65953: LD_INT 1
65955: NEG
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 1
65963: NEG
65964: PUSH
65965: LD_INT 2
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 0
65975: PUSH
65976: LD_INT 2
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 1
65986: PUSH
65987: LD_INT 1
65989: NEG
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 2
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 2
66007: PUSH
66008: LD_INT 1
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 2
66017: PUSH
66018: LD_INT 2
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 1
66027: PUSH
66028: LD_INT 2
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: LD_INT 2
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 1
66047: NEG
66048: PUSH
66049: LD_INT 1
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 2
66058: NEG
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 2
66069: NEG
66070: PUSH
66071: LD_INT 1
66073: NEG
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 2
66081: NEG
66082: PUSH
66083: LD_INT 2
66085: NEG
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66112: LD_ADDR_VAR 0 55
66116: PUSH
66117: LD_INT 0
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: LD_INT 1
66132: NEG
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 1
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 1
66150: PUSH
66151: LD_INT 1
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: LD_INT 1
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 1
66170: NEG
66171: PUSH
66172: LD_INT 0
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 1
66181: NEG
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 1
66193: NEG
66194: PUSH
66195: LD_INT 2
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: LD_INT 2
66208: NEG
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 1
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 2
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 2
66237: PUSH
66238: LD_INT 1
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 2
66247: PUSH
66248: LD_INT 2
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 1
66257: PUSH
66258: LD_INT 2
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 0
66267: PUSH
66268: LD_INT 2
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 1
66277: NEG
66278: PUSH
66279: LD_INT 1
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 2
66288: NEG
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 2
66299: NEG
66300: PUSH
66301: LD_INT 1
66303: NEG
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 2
66311: NEG
66312: PUSH
66313: LD_INT 2
66315: NEG
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66342: LD_ADDR_VAR 0 56
66346: PUSH
66347: LD_INT 0
66349: PUSH
66350: LD_INT 0
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: LD_INT 1
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 1
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 1
66380: PUSH
66381: LD_INT 1
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 0
66390: PUSH
66391: LD_INT 1
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 1
66400: NEG
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 1
66411: NEG
66412: PUSH
66413: LD_INT 1
66415: NEG
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 1
66423: NEG
66424: PUSH
66425: LD_INT 2
66427: NEG
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: LD_INT 2
66438: NEG
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 1
66446: PUSH
66447: LD_INT 1
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 2
66457: PUSH
66458: LD_INT 0
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 2
66467: PUSH
66468: LD_INT 1
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 2
66477: PUSH
66478: LD_INT 2
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 1
66487: PUSH
66488: LD_INT 2
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 0
66497: PUSH
66498: LD_INT 2
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 1
66507: NEG
66508: PUSH
66509: LD_INT 1
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 2
66518: NEG
66519: PUSH
66520: LD_INT 0
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 2
66529: NEG
66530: PUSH
66531: LD_INT 1
66533: NEG
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 2
66541: NEG
66542: PUSH
66543: LD_INT 2
66545: NEG
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66572: LD_ADDR_VAR 0 57
66576: PUSH
66577: LD_INT 0
66579: PUSH
66580: LD_INT 0
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 0
66589: PUSH
66590: LD_INT 1
66592: NEG
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 1
66600: PUSH
66601: LD_INT 0
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 1
66610: PUSH
66611: LD_INT 1
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 0
66620: PUSH
66621: LD_INT 1
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 1
66630: NEG
66631: PUSH
66632: LD_INT 0
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 1
66641: NEG
66642: PUSH
66643: LD_INT 1
66645: NEG
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 1
66653: NEG
66654: PUSH
66655: LD_INT 2
66657: NEG
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 0
66665: PUSH
66666: LD_INT 2
66668: NEG
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 1
66676: PUSH
66677: LD_INT 1
66679: NEG
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 2
66687: PUSH
66688: LD_INT 0
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 2
66697: PUSH
66698: LD_INT 1
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 2
66707: PUSH
66708: LD_INT 2
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 1
66717: PUSH
66718: LD_INT 2
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 0
66727: PUSH
66728: LD_INT 2
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 1
66737: NEG
66738: PUSH
66739: LD_INT 1
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 2
66748: NEG
66749: PUSH
66750: LD_INT 0
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 2
66759: NEG
66760: PUSH
66761: LD_INT 1
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 2
66771: NEG
66772: PUSH
66773: LD_INT 2
66775: NEG
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66802: LD_ADDR_VAR 0 58
66806: PUSH
66807: LD_INT 0
66809: PUSH
66810: LD_INT 0
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 0
66819: PUSH
66820: LD_INT 1
66822: NEG
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 1
66830: PUSH
66831: LD_INT 0
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 1
66840: PUSH
66841: LD_INT 1
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 0
66850: PUSH
66851: LD_INT 1
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 1
66860: NEG
66861: PUSH
66862: LD_INT 0
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 1
66871: NEG
66872: PUSH
66873: LD_INT 1
66875: NEG
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 1
66883: NEG
66884: PUSH
66885: LD_INT 2
66887: NEG
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 0
66895: PUSH
66896: LD_INT 2
66898: NEG
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 1
66906: PUSH
66907: LD_INT 1
66909: NEG
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 2
66917: PUSH
66918: LD_INT 0
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 2
66927: PUSH
66928: LD_INT 1
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 2
66937: PUSH
66938: LD_INT 2
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 1
66947: PUSH
66948: LD_INT 2
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 0
66957: PUSH
66958: LD_INT 2
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 1
66967: NEG
66968: PUSH
66969: LD_INT 1
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 2
66978: NEG
66979: PUSH
66980: LD_INT 0
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 2
66989: NEG
66990: PUSH
66991: LD_INT 1
66993: NEG
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 2
67001: NEG
67002: PUSH
67003: LD_INT 2
67005: NEG
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67032: LD_ADDR_VAR 0 59
67036: PUSH
67037: LD_INT 0
67039: PUSH
67040: LD_INT 0
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 0
67049: PUSH
67050: LD_INT 1
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 1
67060: PUSH
67061: LD_INT 0
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 1
67070: PUSH
67071: LD_INT 1
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 0
67080: PUSH
67081: LD_INT 1
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 1
67090: NEG
67091: PUSH
67092: LD_INT 0
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 1
67101: NEG
67102: PUSH
67103: LD_INT 1
67105: NEG
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67120: LD_ADDR_VAR 0 60
67124: PUSH
67125: LD_INT 0
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 0
67137: PUSH
67138: LD_INT 1
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 1
67148: PUSH
67149: LD_INT 0
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 1
67158: PUSH
67159: LD_INT 1
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 0
67168: PUSH
67169: LD_INT 1
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 1
67178: NEG
67179: PUSH
67180: LD_INT 0
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 1
67189: NEG
67190: PUSH
67191: LD_INT 1
67193: NEG
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67208: LD_ADDR_VAR 0 61
67212: PUSH
67213: LD_INT 0
67215: PUSH
67216: LD_INT 0
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 0
67225: PUSH
67226: LD_INT 1
67228: NEG
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 1
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 1
67246: PUSH
67247: LD_INT 1
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 0
67256: PUSH
67257: LD_INT 1
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 1
67266: NEG
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 1
67277: NEG
67278: PUSH
67279: LD_INT 1
67281: NEG
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67296: LD_ADDR_VAR 0 62
67300: PUSH
67301: LD_INT 0
67303: PUSH
67304: LD_INT 0
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 0
67313: PUSH
67314: LD_INT 1
67316: NEG
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 1
67324: PUSH
67325: LD_INT 0
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 1
67334: PUSH
67335: LD_INT 1
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 0
67344: PUSH
67345: LD_INT 1
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 1
67354: NEG
67355: PUSH
67356: LD_INT 0
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 1
67365: NEG
67366: PUSH
67367: LD_INT 1
67369: NEG
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67384: LD_ADDR_VAR 0 63
67388: PUSH
67389: LD_INT 0
67391: PUSH
67392: LD_INT 0
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 0
67401: PUSH
67402: LD_INT 1
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 1
67412: PUSH
67413: LD_INT 0
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 1
67422: PUSH
67423: LD_INT 1
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 0
67432: PUSH
67433: LD_INT 1
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 1
67442: NEG
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 1
67453: NEG
67454: PUSH
67455: LD_INT 1
67457: NEG
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67472: LD_ADDR_VAR 0 64
67476: PUSH
67477: LD_INT 0
67479: PUSH
67480: LD_INT 0
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 0
67489: PUSH
67490: LD_INT 1
67492: NEG
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 1
67500: PUSH
67501: LD_INT 0
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 1
67510: PUSH
67511: LD_INT 1
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 0
67520: PUSH
67521: LD_INT 1
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 1
67530: NEG
67531: PUSH
67532: LD_INT 0
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 1
67541: NEG
67542: PUSH
67543: LD_INT 1
67545: NEG
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: ST_TO_ADDR
// end ; 1 :
67560: GO 73457
67562: LD_INT 1
67564: DOUBLE
67565: EQUAL
67566: IFTRUE 67570
67568: GO 70193
67570: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67571: LD_ADDR_VAR 0 11
67575: PUSH
67576: LD_INT 1
67578: NEG
67579: PUSH
67580: LD_INT 3
67582: NEG
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 0
67590: PUSH
67591: LD_INT 3
67593: NEG
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 1
67601: PUSH
67602: LD_INT 2
67604: NEG
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: LIST
67614: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67615: LD_ADDR_VAR 0 12
67619: PUSH
67620: LD_INT 2
67622: PUSH
67623: LD_INT 1
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 3
67633: PUSH
67634: LD_INT 0
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 3
67643: PUSH
67644: LD_INT 1
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: LIST
67655: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67656: LD_ADDR_VAR 0 13
67660: PUSH
67661: LD_INT 3
67663: PUSH
67664: LD_INT 2
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 3
67673: PUSH
67674: LD_INT 3
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 2
67683: PUSH
67684: LD_INT 3
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: LIST
67695: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67696: LD_ADDR_VAR 0 14
67700: PUSH
67701: LD_INT 1
67703: PUSH
67704: LD_INT 3
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 0
67713: PUSH
67714: LD_INT 3
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 1
67723: NEG
67724: PUSH
67725: LD_INT 2
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: LIST
67736: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67737: LD_ADDR_VAR 0 15
67741: PUSH
67742: LD_INT 2
67744: NEG
67745: PUSH
67746: LD_INT 1
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 3
67755: NEG
67756: PUSH
67757: LD_INT 0
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 3
67766: NEG
67767: PUSH
67768: LD_INT 1
67770: NEG
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: LIST
67780: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67781: LD_ADDR_VAR 0 16
67785: PUSH
67786: LD_INT 2
67788: NEG
67789: PUSH
67790: LD_INT 3
67792: NEG
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 3
67800: NEG
67801: PUSH
67802: LD_INT 2
67804: NEG
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 3
67812: NEG
67813: PUSH
67814: LD_INT 3
67816: NEG
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: LIST
67826: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67827: LD_ADDR_VAR 0 17
67831: PUSH
67832: LD_INT 1
67834: NEG
67835: PUSH
67836: LD_INT 3
67838: NEG
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 0
67846: PUSH
67847: LD_INT 3
67849: NEG
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 1
67857: PUSH
67858: LD_INT 2
67860: NEG
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: LIST
67870: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67871: LD_ADDR_VAR 0 18
67875: PUSH
67876: LD_INT 2
67878: PUSH
67879: LD_INT 1
67881: NEG
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 3
67889: PUSH
67890: LD_INT 0
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 3
67899: PUSH
67900: LD_INT 1
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: LIST
67911: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67912: LD_ADDR_VAR 0 19
67916: PUSH
67917: LD_INT 3
67919: PUSH
67920: LD_INT 2
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 3
67929: PUSH
67930: LD_INT 3
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 2
67939: PUSH
67940: LD_INT 3
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: LIST
67951: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67952: LD_ADDR_VAR 0 20
67956: PUSH
67957: LD_INT 1
67959: PUSH
67960: LD_INT 3
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 0
67969: PUSH
67970: LD_INT 3
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 1
67979: NEG
67980: PUSH
67981: LD_INT 2
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: LIST
67992: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67993: LD_ADDR_VAR 0 21
67997: PUSH
67998: LD_INT 2
68000: NEG
68001: PUSH
68002: LD_INT 1
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 3
68011: NEG
68012: PUSH
68013: LD_INT 0
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 3
68022: NEG
68023: PUSH
68024: LD_INT 1
68026: NEG
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: LIST
68036: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68037: LD_ADDR_VAR 0 22
68041: PUSH
68042: LD_INT 2
68044: NEG
68045: PUSH
68046: LD_INT 3
68048: NEG
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 3
68056: NEG
68057: PUSH
68058: LD_INT 2
68060: NEG
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 3
68068: NEG
68069: PUSH
68070: LD_INT 3
68072: NEG
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: LIST
68082: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68083: LD_ADDR_VAR 0 23
68087: PUSH
68088: LD_INT 0
68090: PUSH
68091: LD_INT 3
68093: NEG
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 1
68101: NEG
68102: PUSH
68103: LD_INT 4
68105: NEG
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 1
68113: PUSH
68114: LD_INT 3
68116: NEG
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: LIST
68126: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68127: LD_ADDR_VAR 0 24
68131: PUSH
68132: LD_INT 3
68134: PUSH
68135: LD_INT 0
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 3
68144: PUSH
68145: LD_INT 1
68147: NEG
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 4
68155: PUSH
68156: LD_INT 1
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: LIST
68167: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68168: LD_ADDR_VAR 0 25
68172: PUSH
68173: LD_INT 3
68175: PUSH
68176: LD_INT 3
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 4
68185: PUSH
68186: LD_INT 3
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 3
68195: PUSH
68196: LD_INT 4
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: LIST
68207: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68208: LD_ADDR_VAR 0 26
68212: PUSH
68213: LD_INT 0
68215: PUSH
68216: LD_INT 3
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 1
68225: PUSH
68226: LD_INT 4
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 1
68235: NEG
68236: PUSH
68237: LD_INT 3
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: LIST
68248: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68249: LD_ADDR_VAR 0 27
68253: PUSH
68254: LD_INT 3
68256: NEG
68257: PUSH
68258: LD_INT 0
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 3
68267: NEG
68268: PUSH
68269: LD_INT 1
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 4
68278: NEG
68279: PUSH
68280: LD_INT 1
68282: NEG
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: LIST
68292: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68293: LD_ADDR_VAR 0 28
68297: PUSH
68298: LD_INT 3
68300: NEG
68301: PUSH
68302: LD_INT 3
68304: NEG
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 3
68312: NEG
68313: PUSH
68314: LD_INT 4
68316: NEG
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 4
68324: NEG
68325: PUSH
68326: LD_INT 3
68328: NEG
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: LIST
68338: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68339: LD_ADDR_VAR 0 29
68343: PUSH
68344: LD_INT 1
68346: NEG
68347: PUSH
68348: LD_INT 3
68350: NEG
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: LD_INT 3
68361: NEG
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 1
68369: PUSH
68370: LD_INT 2
68372: NEG
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 1
68380: NEG
68381: PUSH
68382: LD_INT 4
68384: NEG
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 0
68392: PUSH
68393: LD_INT 4
68395: NEG
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 1
68403: PUSH
68404: LD_INT 3
68406: NEG
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 1
68414: NEG
68415: PUSH
68416: LD_INT 5
68418: NEG
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 0
68426: PUSH
68427: LD_INT 5
68429: NEG
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 1
68437: PUSH
68438: LD_INT 4
68440: NEG
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 1
68448: NEG
68449: PUSH
68450: LD_INT 6
68452: NEG
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 0
68460: PUSH
68461: LD_INT 6
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 1
68471: PUSH
68472: LD_INT 5
68474: NEG
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68494: LD_ADDR_VAR 0 30
68498: PUSH
68499: LD_INT 2
68501: PUSH
68502: LD_INT 1
68504: NEG
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 3
68512: PUSH
68513: LD_INT 0
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 3
68522: PUSH
68523: LD_INT 1
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 3
68532: PUSH
68533: LD_INT 1
68535: NEG
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 4
68543: PUSH
68544: LD_INT 0
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 4
68553: PUSH
68554: LD_INT 1
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 4
68563: PUSH
68564: LD_INT 1
68566: NEG
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 5
68574: PUSH
68575: LD_INT 0
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 5
68584: PUSH
68585: LD_INT 1
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 5
68594: PUSH
68595: LD_INT 1
68597: NEG
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 6
68605: PUSH
68606: LD_INT 0
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 6
68615: PUSH
68616: LD_INT 1
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68637: LD_ADDR_VAR 0 31
68641: PUSH
68642: LD_INT 3
68644: PUSH
68645: LD_INT 2
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 3
68654: PUSH
68655: LD_INT 3
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 2
68664: PUSH
68665: LD_INT 3
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 4
68674: PUSH
68675: LD_INT 3
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 4
68684: PUSH
68685: LD_INT 4
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 3
68694: PUSH
68695: LD_INT 4
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 5
68704: PUSH
68705: LD_INT 4
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 5
68714: PUSH
68715: LD_INT 5
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 4
68724: PUSH
68725: LD_INT 5
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 6
68734: PUSH
68735: LD_INT 5
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 6
68744: PUSH
68745: LD_INT 6
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 5
68754: PUSH
68755: LD_INT 6
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68776: LD_ADDR_VAR 0 32
68780: PUSH
68781: LD_INT 1
68783: PUSH
68784: LD_INT 3
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: LD_INT 3
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 1
68803: NEG
68804: PUSH
68805: LD_INT 2
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 1
68814: PUSH
68815: LD_INT 4
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 0
68824: PUSH
68825: LD_INT 4
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 1
68834: NEG
68835: PUSH
68836: LD_INT 3
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 1
68845: PUSH
68846: LD_INT 5
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 0
68855: PUSH
68856: LD_INT 5
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 1
68865: NEG
68866: PUSH
68867: LD_INT 4
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 1
68876: PUSH
68877: LD_INT 6
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 0
68886: PUSH
68887: LD_INT 6
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 1
68896: NEG
68897: PUSH
68898: LD_INT 5
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68919: LD_ADDR_VAR 0 33
68923: PUSH
68924: LD_INT 2
68926: NEG
68927: PUSH
68928: LD_INT 1
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 3
68937: NEG
68938: PUSH
68939: LD_INT 0
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 3
68948: NEG
68949: PUSH
68950: LD_INT 1
68952: NEG
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 3
68960: NEG
68961: PUSH
68962: LD_INT 1
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 4
68971: NEG
68972: PUSH
68973: LD_INT 0
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 4
68982: NEG
68983: PUSH
68984: LD_INT 1
68986: NEG
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 4
68994: NEG
68995: PUSH
68996: LD_INT 1
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 5
69005: NEG
69006: PUSH
69007: LD_INT 0
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 5
69016: NEG
69017: PUSH
69018: LD_INT 1
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 5
69028: NEG
69029: PUSH
69030: LD_INT 1
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 6
69039: NEG
69040: PUSH
69041: LD_INT 0
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 6
69050: NEG
69051: PUSH
69052: LD_INT 1
69054: NEG
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69074: LD_ADDR_VAR 0 34
69078: PUSH
69079: LD_INT 2
69081: NEG
69082: PUSH
69083: LD_INT 3
69085: NEG
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 3
69093: NEG
69094: PUSH
69095: LD_INT 2
69097: NEG
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 3
69105: NEG
69106: PUSH
69107: LD_INT 3
69109: NEG
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 3
69117: NEG
69118: PUSH
69119: LD_INT 4
69121: NEG
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 4
69129: NEG
69130: PUSH
69131: LD_INT 3
69133: NEG
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 4
69141: NEG
69142: PUSH
69143: LD_INT 4
69145: NEG
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 4
69153: NEG
69154: PUSH
69155: LD_INT 5
69157: NEG
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 5
69165: NEG
69166: PUSH
69167: LD_INT 4
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 5
69177: NEG
69178: PUSH
69179: LD_INT 5
69181: NEG
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 5
69189: NEG
69190: PUSH
69191: LD_INT 6
69193: NEG
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 6
69201: NEG
69202: PUSH
69203: LD_INT 5
69205: NEG
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 6
69213: NEG
69214: PUSH
69215: LD_INT 6
69217: NEG
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69237: LD_ADDR_VAR 0 41
69241: PUSH
69242: LD_INT 0
69244: PUSH
69245: LD_INT 2
69247: NEG
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 1
69255: NEG
69256: PUSH
69257: LD_INT 3
69259: NEG
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 1
69267: PUSH
69268: LD_INT 2
69270: NEG
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: LIST
69280: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69281: LD_ADDR_VAR 0 42
69285: PUSH
69286: LD_INT 2
69288: PUSH
69289: LD_INT 0
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 2
69298: PUSH
69299: LD_INT 1
69301: NEG
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 3
69309: PUSH
69310: LD_INT 1
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: LIST
69321: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69322: LD_ADDR_VAR 0 43
69326: PUSH
69327: LD_INT 2
69329: PUSH
69330: LD_INT 2
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 3
69339: PUSH
69340: LD_INT 2
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 2
69349: PUSH
69350: LD_INT 3
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: LIST
69361: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69362: LD_ADDR_VAR 0 44
69366: PUSH
69367: LD_INT 0
69369: PUSH
69370: LD_INT 2
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 1
69379: PUSH
69380: LD_INT 3
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 1
69389: NEG
69390: PUSH
69391: LD_INT 2
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: LIST
69402: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69403: LD_ADDR_VAR 0 45
69407: PUSH
69408: LD_INT 2
69410: NEG
69411: PUSH
69412: LD_INT 0
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 2
69421: NEG
69422: PUSH
69423: LD_INT 1
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 3
69432: NEG
69433: PUSH
69434: LD_INT 1
69436: NEG
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: LIST
69446: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69447: LD_ADDR_VAR 0 46
69451: PUSH
69452: LD_INT 2
69454: NEG
69455: PUSH
69456: LD_INT 2
69458: NEG
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 2
69466: NEG
69467: PUSH
69468: LD_INT 3
69470: NEG
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 3
69478: NEG
69479: PUSH
69480: LD_INT 2
69482: NEG
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: LIST
69492: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69493: LD_ADDR_VAR 0 47
69497: PUSH
69498: LD_INT 2
69500: NEG
69501: PUSH
69502: LD_INT 3
69504: NEG
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 1
69512: NEG
69513: PUSH
69514: LD_INT 3
69516: NEG
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69526: LD_ADDR_VAR 0 48
69530: PUSH
69531: LD_INT 1
69533: PUSH
69534: LD_INT 2
69536: NEG
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: LD_INT 2
69544: PUSH
69545: LD_INT 1
69547: NEG
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69557: LD_ADDR_VAR 0 49
69561: PUSH
69562: LD_INT 3
69564: PUSH
69565: LD_INT 1
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 3
69574: PUSH
69575: LD_INT 2
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69586: LD_ADDR_VAR 0 50
69590: PUSH
69591: LD_INT 2
69593: PUSH
69594: LD_INT 3
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 1
69603: PUSH
69604: LD_INT 3
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69615: LD_ADDR_VAR 0 51
69619: PUSH
69620: LD_INT 1
69622: NEG
69623: PUSH
69624: LD_INT 2
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 2
69633: NEG
69634: PUSH
69635: LD_INT 1
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69646: LD_ADDR_VAR 0 52
69650: PUSH
69651: LD_INT 3
69653: NEG
69654: PUSH
69655: LD_INT 1
69657: NEG
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 3
69665: NEG
69666: PUSH
69667: LD_INT 2
69669: NEG
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69679: LD_ADDR_VAR 0 53
69683: PUSH
69684: LD_INT 1
69686: NEG
69687: PUSH
69688: LD_INT 3
69690: NEG
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 0
69698: PUSH
69699: LD_INT 3
69701: NEG
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 1
69709: PUSH
69710: LD_INT 2
69712: NEG
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: LIST
69722: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69723: LD_ADDR_VAR 0 54
69727: PUSH
69728: LD_INT 2
69730: PUSH
69731: LD_INT 1
69733: NEG
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 3
69741: PUSH
69742: LD_INT 0
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 3
69751: PUSH
69752: LD_INT 1
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: LIST
69763: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69764: LD_ADDR_VAR 0 55
69768: PUSH
69769: LD_INT 3
69771: PUSH
69772: LD_INT 2
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 3
69781: PUSH
69782: LD_INT 3
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 2
69791: PUSH
69792: LD_INT 3
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: LIST
69803: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69804: LD_ADDR_VAR 0 56
69808: PUSH
69809: LD_INT 1
69811: PUSH
69812: LD_INT 3
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 0
69821: PUSH
69822: LD_INT 3
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 1
69831: NEG
69832: PUSH
69833: LD_INT 2
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: LIST
69844: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69845: LD_ADDR_VAR 0 57
69849: PUSH
69850: LD_INT 2
69852: NEG
69853: PUSH
69854: LD_INT 1
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 3
69863: NEG
69864: PUSH
69865: LD_INT 0
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 3
69874: NEG
69875: PUSH
69876: LD_INT 1
69878: NEG
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: LIST
69888: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69889: LD_ADDR_VAR 0 58
69893: PUSH
69894: LD_INT 2
69896: NEG
69897: PUSH
69898: LD_INT 3
69900: NEG
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 3
69908: NEG
69909: PUSH
69910: LD_INT 2
69912: NEG
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 3
69920: NEG
69921: PUSH
69922: LD_INT 3
69924: NEG
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: LIST
69934: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69935: LD_ADDR_VAR 0 59
69939: PUSH
69940: LD_INT 1
69942: NEG
69943: PUSH
69944: LD_INT 2
69946: NEG
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 0
69954: PUSH
69955: LD_INT 2
69957: NEG
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 1
69965: PUSH
69966: LD_INT 1
69968: NEG
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: LIST
69978: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69979: LD_ADDR_VAR 0 60
69983: PUSH
69984: LD_INT 1
69986: PUSH
69987: LD_INT 1
69989: NEG
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 2
69997: PUSH
69998: LD_INT 0
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 2
70007: PUSH
70008: LD_INT 1
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: LIST
70019: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70020: LD_ADDR_VAR 0 61
70024: PUSH
70025: LD_INT 2
70027: PUSH
70028: LD_INT 1
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 2
70037: PUSH
70038: LD_INT 2
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 1
70047: PUSH
70048: LD_INT 2
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: LIST
70059: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70060: LD_ADDR_VAR 0 62
70064: PUSH
70065: LD_INT 1
70067: PUSH
70068: LD_INT 2
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: PUSH
70075: LD_INT 0
70077: PUSH
70078: LD_INT 2
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 1
70087: NEG
70088: PUSH
70089: LD_INT 1
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: LIST
70100: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70101: LD_ADDR_VAR 0 63
70105: PUSH
70106: LD_INT 1
70108: NEG
70109: PUSH
70110: LD_INT 1
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 2
70119: NEG
70120: PUSH
70121: LD_INT 0
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 2
70130: NEG
70131: PUSH
70132: LD_INT 1
70134: NEG
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: LIST
70144: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70145: LD_ADDR_VAR 0 64
70149: PUSH
70150: LD_INT 1
70152: NEG
70153: PUSH
70154: LD_INT 2
70156: NEG
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 2
70164: NEG
70165: PUSH
70166: LD_INT 1
70168: NEG
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 2
70176: NEG
70177: PUSH
70178: LD_INT 2
70180: NEG
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: LIST
70190: ST_TO_ADDR
// end ; 2 :
70191: GO 73457
70193: LD_INT 2
70195: DOUBLE
70196: EQUAL
70197: IFTRUE 70201
70199: GO 73456
70201: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70202: LD_ADDR_VAR 0 29
70206: PUSH
70207: LD_INT 4
70209: PUSH
70210: LD_INT 0
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 4
70219: PUSH
70220: LD_INT 1
70222: NEG
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 5
70230: PUSH
70231: LD_INT 0
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 5
70240: PUSH
70241: LD_INT 1
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 4
70250: PUSH
70251: LD_INT 1
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 3
70260: PUSH
70261: LD_INT 0
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 3
70270: PUSH
70271: LD_INT 1
70273: NEG
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 3
70281: PUSH
70282: LD_INT 2
70284: NEG
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 5
70292: PUSH
70293: LD_INT 2
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 3
70302: PUSH
70303: LD_INT 3
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: LD_INT 3
70312: PUSH
70313: LD_INT 2
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 4
70322: PUSH
70323: LD_INT 3
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 4
70332: PUSH
70333: LD_INT 4
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 3
70342: PUSH
70343: LD_INT 4
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 2
70352: PUSH
70353: LD_INT 3
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 2
70362: PUSH
70363: LD_INT 2
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 4
70372: PUSH
70373: LD_INT 2
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 2
70382: PUSH
70383: LD_INT 4
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 0
70392: PUSH
70393: LD_INT 4
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 0
70402: PUSH
70403: LD_INT 3
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 1
70412: PUSH
70413: LD_INT 4
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 1
70422: PUSH
70423: LD_INT 5
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 0
70432: PUSH
70433: LD_INT 5
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 1
70442: NEG
70443: PUSH
70444: LD_INT 4
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 1
70453: NEG
70454: PUSH
70455: LD_INT 3
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 2
70464: PUSH
70465: LD_INT 5
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: LD_INT 2
70474: NEG
70475: PUSH
70476: LD_INT 3
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 3
70485: NEG
70486: PUSH
70487: LD_INT 0
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 3
70496: NEG
70497: PUSH
70498: LD_INT 1
70500: NEG
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: PUSH
70506: LD_INT 2
70508: NEG
70509: PUSH
70510: LD_INT 0
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 2
70519: NEG
70520: PUSH
70521: LD_INT 1
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 3
70530: NEG
70531: PUSH
70532: LD_INT 1
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 4
70541: NEG
70542: PUSH
70543: LD_INT 0
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 4
70552: NEG
70553: PUSH
70554: LD_INT 1
70556: NEG
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 4
70564: NEG
70565: PUSH
70566: LD_INT 2
70568: NEG
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 2
70576: NEG
70577: PUSH
70578: LD_INT 2
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 4
70587: NEG
70588: PUSH
70589: LD_INT 4
70591: NEG
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 4
70599: NEG
70600: PUSH
70601: LD_INT 5
70603: NEG
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 3
70611: NEG
70612: PUSH
70613: LD_INT 4
70615: NEG
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 3
70623: NEG
70624: PUSH
70625: LD_INT 3
70627: NEG
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 4
70635: NEG
70636: PUSH
70637: LD_INT 3
70639: NEG
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 5
70647: NEG
70648: PUSH
70649: LD_INT 4
70651: NEG
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 5
70659: NEG
70660: PUSH
70661: LD_INT 5
70663: NEG
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 3
70671: NEG
70672: PUSH
70673: LD_INT 5
70675: NEG
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 5
70683: NEG
70684: PUSH
70685: LD_INT 3
70687: NEG
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70740: LD_ADDR_VAR 0 30
70744: PUSH
70745: LD_INT 4
70747: PUSH
70748: LD_INT 4
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 4
70757: PUSH
70758: LD_INT 3
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 5
70767: PUSH
70768: LD_INT 4
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 5
70777: PUSH
70778: LD_INT 5
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 4
70787: PUSH
70788: LD_INT 5
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 3
70797: PUSH
70798: LD_INT 4
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: LD_INT 3
70807: PUSH
70808: LD_INT 3
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 5
70817: PUSH
70818: LD_INT 3
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: LD_INT 3
70827: PUSH
70828: LD_INT 5
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 0
70837: PUSH
70838: LD_INT 3
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: LD_INT 0
70847: PUSH
70848: LD_INT 2
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 1
70857: PUSH
70858: LD_INT 3
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 1
70867: PUSH
70868: LD_INT 4
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 0
70877: PUSH
70878: LD_INT 4
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 1
70887: NEG
70888: PUSH
70889: LD_INT 3
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 1
70898: NEG
70899: PUSH
70900: LD_INT 2
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: LD_INT 2
70909: PUSH
70910: LD_INT 4
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: LD_INT 2
70919: NEG
70920: PUSH
70921: LD_INT 2
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 4
70930: NEG
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 4
70941: NEG
70942: PUSH
70943: LD_INT 1
70945: NEG
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: LD_INT 3
70953: NEG
70954: PUSH
70955: LD_INT 0
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: PUSH
70962: LD_INT 3
70964: NEG
70965: PUSH
70966: LD_INT 1
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 4
70975: NEG
70976: PUSH
70977: LD_INT 1
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 5
70986: NEG
70987: PUSH
70988: LD_INT 0
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 5
70997: NEG
70998: PUSH
70999: LD_INT 1
71001: NEG
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: LD_INT 5
71009: NEG
71010: PUSH
71011: LD_INT 2
71013: NEG
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 3
71021: NEG
71022: PUSH
71023: LD_INT 2
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 3
71032: NEG
71033: PUSH
71034: LD_INT 3
71036: NEG
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 3
71044: NEG
71045: PUSH
71046: LD_INT 4
71048: NEG
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 2
71056: NEG
71057: PUSH
71058: LD_INT 3
71060: NEG
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 2
71068: NEG
71069: PUSH
71070: LD_INT 2
71072: NEG
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: LD_INT 3
71080: NEG
71081: PUSH
71082: LD_INT 2
71084: NEG
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 4
71092: NEG
71093: PUSH
71094: LD_INT 3
71096: NEG
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 4
71104: NEG
71105: PUSH
71106: LD_INT 4
71108: NEG
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 2
71116: NEG
71117: PUSH
71118: LD_INT 4
71120: NEG
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 4
71128: NEG
71129: PUSH
71130: LD_INT 2
71132: NEG
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 0
71140: PUSH
71141: LD_INT 4
71143: NEG
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 0
71151: PUSH
71152: LD_INT 5
71154: NEG
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 1
71162: PUSH
71163: LD_INT 4
71165: NEG
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PUSH
71171: LD_INT 1
71173: PUSH
71174: LD_INT 3
71176: NEG
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: LD_INT 0
71184: PUSH
71185: LD_INT 3
71187: NEG
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 1
71195: NEG
71196: PUSH
71197: LD_INT 4
71199: NEG
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: LD_INT 1
71207: NEG
71208: PUSH
71209: LD_INT 5
71211: NEG
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 2
71219: PUSH
71220: LD_INT 3
71222: NEG
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: LD_INT 2
71230: NEG
71231: PUSH
71232: LD_INT 5
71234: NEG
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: LIST
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71287: LD_ADDR_VAR 0 31
71291: PUSH
71292: LD_INT 0
71294: PUSH
71295: LD_INT 4
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 0
71304: PUSH
71305: LD_INT 3
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 1
71314: PUSH
71315: LD_INT 4
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 1
71324: PUSH
71325: LD_INT 5
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 0
71334: PUSH
71335: LD_INT 5
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 1
71344: NEG
71345: PUSH
71346: LD_INT 4
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 1
71355: NEG
71356: PUSH
71357: LD_INT 3
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PUSH
71364: LD_INT 2
71366: PUSH
71367: LD_INT 5
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: LD_INT 2
71376: NEG
71377: PUSH
71378: LD_INT 3
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 3
71387: NEG
71388: PUSH
71389: LD_INT 0
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 3
71398: NEG
71399: PUSH
71400: LD_INT 1
71402: NEG
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 2
71410: NEG
71411: PUSH
71412: LD_INT 0
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 2
71421: NEG
71422: PUSH
71423: LD_INT 1
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 3
71432: NEG
71433: PUSH
71434: LD_INT 1
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 4
71443: NEG
71444: PUSH
71445: LD_INT 0
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 4
71454: NEG
71455: PUSH
71456: LD_INT 1
71458: NEG
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 4
71466: NEG
71467: PUSH
71468: LD_INT 2
71470: NEG
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 2
71478: NEG
71479: PUSH
71480: LD_INT 2
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 4
71489: NEG
71490: PUSH
71491: LD_INT 4
71493: NEG
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 4
71501: NEG
71502: PUSH
71503: LD_INT 5
71505: NEG
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: LD_INT 3
71513: NEG
71514: PUSH
71515: LD_INT 4
71517: NEG
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: LD_INT 3
71525: NEG
71526: PUSH
71527: LD_INT 3
71529: NEG
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 4
71537: NEG
71538: PUSH
71539: LD_INT 3
71541: NEG
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 5
71549: NEG
71550: PUSH
71551: LD_INT 4
71553: NEG
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 5
71561: NEG
71562: PUSH
71563: LD_INT 5
71565: NEG
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: LD_INT 3
71573: NEG
71574: PUSH
71575: LD_INT 5
71577: NEG
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: LD_INT 5
71585: NEG
71586: PUSH
71587: LD_INT 3
71589: NEG
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: LD_INT 0
71597: PUSH
71598: LD_INT 3
71600: NEG
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 0
71608: PUSH
71609: LD_INT 4
71611: NEG
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 1
71619: PUSH
71620: LD_INT 3
71622: NEG
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 1
71630: PUSH
71631: LD_INT 2
71633: NEG
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 0
71641: PUSH
71642: LD_INT 2
71644: NEG
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 1
71652: NEG
71653: PUSH
71654: LD_INT 3
71656: NEG
71657: PUSH
71658: EMPTY
71659: LIST
71660: LIST
71661: PUSH
71662: LD_INT 1
71664: NEG
71665: PUSH
71666: LD_INT 4
71668: NEG
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: LD_INT 2
71676: PUSH
71677: LD_INT 2
71679: NEG
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 2
71687: NEG
71688: PUSH
71689: LD_INT 4
71691: NEG
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: PUSH
71697: LD_INT 4
71699: PUSH
71700: LD_INT 0
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: LD_INT 4
71709: PUSH
71710: LD_INT 1
71712: NEG
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PUSH
71718: LD_INT 5
71720: PUSH
71721: LD_INT 0
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: LD_INT 5
71730: PUSH
71731: LD_INT 1
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: PUSH
71738: LD_INT 4
71740: PUSH
71741: LD_INT 1
71743: PUSH
71744: EMPTY
71745: LIST
71746: LIST
71747: PUSH
71748: LD_INT 3
71750: PUSH
71751: LD_INT 0
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 3
71760: PUSH
71761: LD_INT 1
71763: NEG
71764: PUSH
71765: EMPTY
71766: LIST
71767: LIST
71768: PUSH
71769: LD_INT 3
71771: PUSH
71772: LD_INT 2
71774: NEG
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: LD_INT 5
71782: PUSH
71783: LD_INT 2
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: LIST
71802: LIST
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: LIST
71836: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71837: LD_ADDR_VAR 0 32
71841: PUSH
71842: LD_INT 4
71844: NEG
71845: PUSH
71846: LD_INT 0
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 4
71855: NEG
71856: PUSH
71857: LD_INT 1
71859: NEG
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: LD_INT 3
71867: NEG
71868: PUSH
71869: LD_INT 0
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: LD_INT 3
71878: NEG
71879: PUSH
71880: LD_INT 1
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: LD_INT 4
71889: NEG
71890: PUSH
71891: LD_INT 1
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: PUSH
71898: LD_INT 5
71900: NEG
71901: PUSH
71902: LD_INT 0
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 5
71911: NEG
71912: PUSH
71913: LD_INT 1
71915: NEG
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 5
71923: NEG
71924: PUSH
71925: LD_INT 2
71927: NEG
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: PUSH
71933: LD_INT 3
71935: NEG
71936: PUSH
71937: LD_INT 2
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 3
71946: NEG
71947: PUSH
71948: LD_INT 3
71950: NEG
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: LD_INT 3
71958: NEG
71959: PUSH
71960: LD_INT 4
71962: NEG
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 2
71970: NEG
71971: PUSH
71972: LD_INT 3
71974: NEG
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 2
71982: NEG
71983: PUSH
71984: LD_INT 2
71986: NEG
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_INT 3
71994: NEG
71995: PUSH
71996: LD_INT 2
71998: NEG
71999: PUSH
72000: EMPTY
72001: LIST
72002: LIST
72003: PUSH
72004: LD_INT 4
72006: NEG
72007: PUSH
72008: LD_INT 3
72010: NEG
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: LD_INT 4
72018: NEG
72019: PUSH
72020: LD_INT 4
72022: NEG
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PUSH
72028: LD_INT 2
72030: NEG
72031: PUSH
72032: LD_INT 4
72034: NEG
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 4
72042: NEG
72043: PUSH
72044: LD_INT 2
72046: NEG
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: LD_INT 0
72054: PUSH
72055: LD_INT 4
72057: NEG
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: PUSH
72063: LD_INT 0
72065: PUSH
72066: LD_INT 5
72068: NEG
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 1
72076: PUSH
72077: LD_INT 4
72079: NEG
72080: PUSH
72081: EMPTY
72082: LIST
72083: LIST
72084: PUSH
72085: LD_INT 1
72087: PUSH
72088: LD_INT 3
72090: NEG
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PUSH
72096: LD_INT 0
72098: PUSH
72099: LD_INT 3
72101: NEG
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: PUSH
72107: LD_INT 1
72109: NEG
72110: PUSH
72111: LD_INT 4
72113: NEG
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PUSH
72119: LD_INT 1
72121: NEG
72122: PUSH
72123: LD_INT 5
72125: NEG
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 2
72133: PUSH
72134: LD_INT 3
72136: NEG
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: PUSH
72142: LD_INT 2
72144: NEG
72145: PUSH
72146: LD_INT 5
72148: NEG
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: PUSH
72154: LD_INT 3
72156: PUSH
72157: LD_INT 0
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: LD_INT 3
72166: PUSH
72167: LD_INT 1
72169: NEG
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PUSH
72175: LD_INT 4
72177: PUSH
72178: LD_INT 0
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: LD_INT 4
72187: PUSH
72188: LD_INT 1
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: PUSH
72195: LD_INT 3
72197: PUSH
72198: LD_INT 1
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: PUSH
72205: LD_INT 2
72207: PUSH
72208: LD_INT 0
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 2
72217: PUSH
72218: LD_INT 1
72220: NEG
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PUSH
72226: LD_INT 2
72228: PUSH
72229: LD_INT 2
72231: NEG
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: PUSH
72237: LD_INT 4
72239: PUSH
72240: LD_INT 2
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: LD_INT 4
72249: PUSH
72250: LD_INT 4
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 4
72259: PUSH
72260: LD_INT 3
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 5
72269: PUSH
72270: LD_INT 4
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: LD_INT 5
72279: PUSH
72280: LD_INT 5
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: PUSH
72287: LD_INT 4
72289: PUSH
72290: LD_INT 5
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PUSH
72297: LD_INT 3
72299: PUSH
72300: LD_INT 4
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: PUSH
72307: LD_INT 3
72309: PUSH
72310: LD_INT 3
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 5
72319: PUSH
72320: LD_INT 3
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: LD_INT 3
72329: PUSH
72330: LD_INT 5
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: LIST
72359: LIST
72360: LIST
72361: LIST
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: LIST
72367: LIST
72368: LIST
72369: LIST
72370: LIST
72371: LIST
72372: LIST
72373: LIST
72374: LIST
72375: LIST
72376: LIST
72377: LIST
72378: LIST
72379: LIST
72380: LIST
72381: LIST
72382: LIST
72383: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72384: LD_ADDR_VAR 0 33
72388: PUSH
72389: LD_INT 4
72391: NEG
72392: PUSH
72393: LD_INT 4
72395: NEG
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 4
72403: NEG
72404: PUSH
72405: LD_INT 5
72407: NEG
72408: PUSH
72409: EMPTY
72410: LIST
72411: LIST
72412: PUSH
72413: LD_INT 3
72415: NEG
72416: PUSH
72417: LD_INT 4
72419: NEG
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: PUSH
72425: LD_INT 3
72427: NEG
72428: PUSH
72429: LD_INT 3
72431: NEG
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 4
72439: NEG
72440: PUSH
72441: LD_INT 3
72443: NEG
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PUSH
72449: LD_INT 5
72451: NEG
72452: PUSH
72453: LD_INT 4
72455: NEG
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 5
72463: NEG
72464: PUSH
72465: LD_INT 5
72467: NEG
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 3
72475: NEG
72476: PUSH
72477: LD_INT 5
72479: NEG
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: LD_INT 5
72487: NEG
72488: PUSH
72489: LD_INT 3
72491: NEG
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: PUSH
72497: LD_INT 0
72499: PUSH
72500: LD_INT 3
72502: NEG
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 0
72510: PUSH
72511: LD_INT 4
72513: NEG
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: PUSH
72519: LD_INT 1
72521: PUSH
72522: LD_INT 3
72524: NEG
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: PUSH
72530: LD_INT 1
72532: PUSH
72533: LD_INT 2
72535: NEG
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: PUSH
72541: LD_INT 0
72543: PUSH
72544: LD_INT 2
72546: NEG
72547: PUSH
72548: EMPTY
72549: LIST
72550: LIST
72551: PUSH
72552: LD_INT 1
72554: NEG
72555: PUSH
72556: LD_INT 3
72558: NEG
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 1
72566: NEG
72567: PUSH
72568: LD_INT 4
72570: NEG
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 2
72578: PUSH
72579: LD_INT 2
72581: NEG
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: PUSH
72587: LD_INT 2
72589: NEG
72590: PUSH
72591: LD_INT 4
72593: NEG
72594: PUSH
72595: EMPTY
72596: LIST
72597: LIST
72598: PUSH
72599: LD_INT 4
72601: PUSH
72602: LD_INT 0
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: PUSH
72609: LD_INT 4
72611: PUSH
72612: LD_INT 1
72614: NEG
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PUSH
72620: LD_INT 5
72622: PUSH
72623: LD_INT 0
72625: PUSH
72626: EMPTY
72627: LIST
72628: LIST
72629: PUSH
72630: LD_INT 5
72632: PUSH
72633: LD_INT 1
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: LD_INT 4
72642: PUSH
72643: LD_INT 1
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: PUSH
72650: LD_INT 3
72652: PUSH
72653: LD_INT 0
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 3
72662: PUSH
72663: LD_INT 1
72665: NEG
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: PUSH
72671: LD_INT 3
72673: PUSH
72674: LD_INT 2
72676: NEG
72677: PUSH
72678: EMPTY
72679: LIST
72680: LIST
72681: PUSH
72682: LD_INT 5
72684: PUSH
72685: LD_INT 2
72687: PUSH
72688: EMPTY
72689: LIST
72690: LIST
72691: PUSH
72692: LD_INT 3
72694: PUSH
72695: LD_INT 3
72697: PUSH
72698: EMPTY
72699: LIST
72700: LIST
72701: PUSH
72702: LD_INT 3
72704: PUSH
72705: LD_INT 2
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: PUSH
72712: LD_INT 4
72714: PUSH
72715: LD_INT 3
72717: PUSH
72718: EMPTY
72719: LIST
72720: LIST
72721: PUSH
72722: LD_INT 4
72724: PUSH
72725: LD_INT 4
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 3
72734: PUSH
72735: LD_INT 4
72737: PUSH
72738: EMPTY
72739: LIST
72740: LIST
72741: PUSH
72742: LD_INT 2
72744: PUSH
72745: LD_INT 3
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: PUSH
72752: LD_INT 2
72754: PUSH
72755: LD_INT 2
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: PUSH
72762: LD_INT 4
72764: PUSH
72765: LD_INT 2
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: PUSH
72772: LD_INT 2
72774: PUSH
72775: LD_INT 4
72777: PUSH
72778: EMPTY
72779: LIST
72780: LIST
72781: PUSH
72782: LD_INT 0
72784: PUSH
72785: LD_INT 4
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: PUSH
72792: LD_INT 0
72794: PUSH
72795: LD_INT 3
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: LD_INT 1
72804: PUSH
72805: LD_INT 4
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: PUSH
72812: LD_INT 1
72814: PUSH
72815: LD_INT 5
72817: PUSH
72818: EMPTY
72819: LIST
72820: LIST
72821: PUSH
72822: LD_INT 0
72824: PUSH
72825: LD_INT 5
72827: PUSH
72828: EMPTY
72829: LIST
72830: LIST
72831: PUSH
72832: LD_INT 1
72834: NEG
72835: PUSH
72836: LD_INT 4
72838: PUSH
72839: EMPTY
72840: LIST
72841: LIST
72842: PUSH
72843: LD_INT 1
72845: NEG
72846: PUSH
72847: LD_INT 3
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: PUSH
72854: LD_INT 2
72856: PUSH
72857: LD_INT 5
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: PUSH
72864: LD_INT 2
72866: NEG
72867: PUSH
72868: LD_INT 3
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: LIST
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: LIST
72915: LIST
72916: LIST
72917: LIST
72918: LIST
72919: LIST
72920: LIST
72921: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72922: LD_ADDR_VAR 0 34
72926: PUSH
72927: LD_INT 0
72929: PUSH
72930: LD_INT 4
72932: NEG
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: PUSH
72938: LD_INT 0
72940: PUSH
72941: LD_INT 5
72943: NEG
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: PUSH
72949: LD_INT 1
72951: PUSH
72952: LD_INT 4
72954: NEG
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: PUSH
72960: LD_INT 1
72962: PUSH
72963: LD_INT 3
72965: NEG
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 0
72973: PUSH
72974: LD_INT 3
72976: NEG
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_INT 1
72984: NEG
72985: PUSH
72986: LD_INT 4
72988: NEG
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: LD_INT 1
72996: NEG
72997: PUSH
72998: LD_INT 5
73000: NEG
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 2
73008: PUSH
73009: LD_INT 3
73011: NEG
73012: PUSH
73013: EMPTY
73014: LIST
73015: LIST
73016: PUSH
73017: LD_INT 2
73019: NEG
73020: PUSH
73021: LD_INT 5
73023: NEG
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: PUSH
73029: LD_INT 3
73031: PUSH
73032: LD_INT 0
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: PUSH
73039: LD_INT 3
73041: PUSH
73042: LD_INT 1
73044: NEG
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: PUSH
73050: LD_INT 4
73052: PUSH
73053: LD_INT 0
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: PUSH
73060: LD_INT 4
73062: PUSH
73063: LD_INT 1
73065: PUSH
73066: EMPTY
73067: LIST
73068: LIST
73069: PUSH
73070: LD_INT 3
73072: PUSH
73073: LD_INT 1
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 2
73082: PUSH
73083: LD_INT 0
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: LD_INT 2
73092: PUSH
73093: LD_INT 1
73095: NEG
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: PUSH
73101: LD_INT 2
73103: PUSH
73104: LD_INT 2
73106: NEG
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: PUSH
73112: LD_INT 4
73114: PUSH
73115: LD_INT 2
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 4
73124: PUSH
73125: LD_INT 4
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: PUSH
73132: LD_INT 4
73134: PUSH
73135: LD_INT 3
73137: PUSH
73138: EMPTY
73139: LIST
73140: LIST
73141: PUSH
73142: LD_INT 5
73144: PUSH
73145: LD_INT 4
73147: PUSH
73148: EMPTY
73149: LIST
73150: LIST
73151: PUSH
73152: LD_INT 5
73154: PUSH
73155: LD_INT 5
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: PUSH
73162: LD_INT 4
73164: PUSH
73165: LD_INT 5
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: PUSH
73172: LD_INT 3
73174: PUSH
73175: LD_INT 4
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: PUSH
73182: LD_INT 3
73184: PUSH
73185: LD_INT 3
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: LD_INT 5
73194: PUSH
73195: LD_INT 3
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 3
73204: PUSH
73205: LD_INT 5
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 0
73214: PUSH
73215: LD_INT 3
73217: PUSH
73218: EMPTY
73219: LIST
73220: LIST
73221: PUSH
73222: LD_INT 0
73224: PUSH
73225: LD_INT 2
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: PUSH
73232: LD_INT 1
73234: PUSH
73235: LD_INT 3
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: PUSH
73242: LD_INT 1
73244: PUSH
73245: LD_INT 4
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: PUSH
73252: LD_INT 0
73254: PUSH
73255: LD_INT 4
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: PUSH
73262: LD_INT 1
73264: NEG
73265: PUSH
73266: LD_INT 3
73268: PUSH
73269: EMPTY
73270: LIST
73271: LIST
73272: PUSH
73273: LD_INT 1
73275: NEG
73276: PUSH
73277: LD_INT 2
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PUSH
73284: LD_INT 2
73286: PUSH
73287: LD_INT 4
73289: PUSH
73290: EMPTY
73291: LIST
73292: LIST
73293: PUSH
73294: LD_INT 2
73296: NEG
73297: PUSH
73298: LD_INT 2
73300: PUSH
73301: EMPTY
73302: LIST
73303: LIST
73304: PUSH
73305: LD_INT 4
73307: NEG
73308: PUSH
73309: LD_INT 0
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: PUSH
73316: LD_INT 4
73318: NEG
73319: PUSH
73320: LD_INT 1
73322: NEG
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: LD_INT 3
73330: NEG
73331: PUSH
73332: LD_INT 0
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PUSH
73339: LD_INT 3
73341: NEG
73342: PUSH
73343: LD_INT 1
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: PUSH
73350: LD_INT 4
73352: NEG
73353: PUSH
73354: LD_INT 1
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: PUSH
73361: LD_INT 5
73363: NEG
73364: PUSH
73365: LD_INT 0
73367: PUSH
73368: EMPTY
73369: LIST
73370: LIST
73371: PUSH
73372: LD_INT 5
73374: NEG
73375: PUSH
73376: LD_INT 1
73378: NEG
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: PUSH
73384: LD_INT 5
73386: NEG
73387: PUSH
73388: LD_INT 2
73390: NEG
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 3
73398: NEG
73399: PUSH
73400: LD_INT 2
73402: PUSH
73403: EMPTY
73404: LIST
73405: LIST
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: LIST
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: LIST
73428: LIST
73429: LIST
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: LIST
73435: LIST
73436: LIST
73437: LIST
73438: LIST
73439: LIST
73440: LIST
73441: LIST
73442: LIST
73443: LIST
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: LIST
73450: LIST
73451: LIST
73452: LIST
73453: ST_TO_ADDR
// end ; end ;
73454: GO 73457
73456: POP
// case btype of b_depot , b_warehouse :
73457: LD_VAR 0 1
73461: PUSH
73462: LD_INT 0
73464: DOUBLE
73465: EQUAL
73466: IFTRUE 73476
73468: LD_INT 1
73470: DOUBLE
73471: EQUAL
73472: IFTRUE 73476
73474: GO 73677
73476: POP
// case nation of nation_american :
73477: LD_VAR 0 5
73481: PUSH
73482: LD_INT 1
73484: DOUBLE
73485: EQUAL
73486: IFTRUE 73490
73488: GO 73546
73490: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73491: LD_ADDR_VAR 0 9
73495: PUSH
73496: LD_VAR 0 11
73500: PUSH
73501: LD_VAR 0 12
73505: PUSH
73506: LD_VAR 0 13
73510: PUSH
73511: LD_VAR 0 14
73515: PUSH
73516: LD_VAR 0 15
73520: PUSH
73521: LD_VAR 0 16
73525: PUSH
73526: EMPTY
73527: LIST
73528: LIST
73529: LIST
73530: LIST
73531: LIST
73532: LIST
73533: PUSH
73534: LD_VAR 0 4
73538: PUSH
73539: LD_INT 1
73541: PLUS
73542: ARRAY
73543: ST_TO_ADDR
73544: GO 73675
73546: LD_INT 2
73548: DOUBLE
73549: EQUAL
73550: IFTRUE 73554
73552: GO 73610
73554: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73555: LD_ADDR_VAR 0 9
73559: PUSH
73560: LD_VAR 0 17
73564: PUSH
73565: LD_VAR 0 18
73569: PUSH
73570: LD_VAR 0 19
73574: PUSH
73575: LD_VAR 0 20
73579: PUSH
73580: LD_VAR 0 21
73584: PUSH
73585: LD_VAR 0 22
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: PUSH
73598: LD_VAR 0 4
73602: PUSH
73603: LD_INT 1
73605: PLUS
73606: ARRAY
73607: ST_TO_ADDR
73608: GO 73675
73610: LD_INT 3
73612: DOUBLE
73613: EQUAL
73614: IFTRUE 73618
73616: GO 73674
73618: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73619: LD_ADDR_VAR 0 9
73623: PUSH
73624: LD_VAR 0 23
73628: PUSH
73629: LD_VAR 0 24
73633: PUSH
73634: LD_VAR 0 25
73638: PUSH
73639: LD_VAR 0 26
73643: PUSH
73644: LD_VAR 0 27
73648: PUSH
73649: LD_VAR 0 28
73653: PUSH
73654: EMPTY
73655: LIST
73656: LIST
73657: LIST
73658: LIST
73659: LIST
73660: LIST
73661: PUSH
73662: LD_VAR 0 4
73666: PUSH
73667: LD_INT 1
73669: PLUS
73670: ARRAY
73671: ST_TO_ADDR
73672: GO 73675
73674: POP
73675: GO 74230
73677: LD_INT 2
73679: DOUBLE
73680: EQUAL
73681: IFTRUE 73691
73683: LD_INT 3
73685: DOUBLE
73686: EQUAL
73687: IFTRUE 73691
73689: GO 73747
73691: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73692: LD_ADDR_VAR 0 9
73696: PUSH
73697: LD_VAR 0 29
73701: PUSH
73702: LD_VAR 0 30
73706: PUSH
73707: LD_VAR 0 31
73711: PUSH
73712: LD_VAR 0 32
73716: PUSH
73717: LD_VAR 0 33
73721: PUSH
73722: LD_VAR 0 34
73726: PUSH
73727: EMPTY
73728: LIST
73729: LIST
73730: LIST
73731: LIST
73732: LIST
73733: LIST
73734: PUSH
73735: LD_VAR 0 4
73739: PUSH
73740: LD_INT 1
73742: PLUS
73743: ARRAY
73744: ST_TO_ADDR
73745: GO 74230
73747: LD_INT 16
73749: DOUBLE
73750: EQUAL
73751: IFTRUE 73809
73753: LD_INT 17
73755: DOUBLE
73756: EQUAL
73757: IFTRUE 73809
73759: LD_INT 18
73761: DOUBLE
73762: EQUAL
73763: IFTRUE 73809
73765: LD_INT 19
73767: DOUBLE
73768: EQUAL
73769: IFTRUE 73809
73771: LD_INT 22
73773: DOUBLE
73774: EQUAL
73775: IFTRUE 73809
73777: LD_INT 20
73779: DOUBLE
73780: EQUAL
73781: IFTRUE 73809
73783: LD_INT 21
73785: DOUBLE
73786: EQUAL
73787: IFTRUE 73809
73789: LD_INT 23
73791: DOUBLE
73792: EQUAL
73793: IFTRUE 73809
73795: LD_INT 24
73797: DOUBLE
73798: EQUAL
73799: IFTRUE 73809
73801: LD_INT 25
73803: DOUBLE
73804: EQUAL
73805: IFTRUE 73809
73807: GO 73865
73809: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73810: LD_ADDR_VAR 0 9
73814: PUSH
73815: LD_VAR 0 35
73819: PUSH
73820: LD_VAR 0 36
73824: PUSH
73825: LD_VAR 0 37
73829: PUSH
73830: LD_VAR 0 38
73834: PUSH
73835: LD_VAR 0 39
73839: PUSH
73840: LD_VAR 0 40
73844: PUSH
73845: EMPTY
73846: LIST
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: PUSH
73853: LD_VAR 0 4
73857: PUSH
73858: LD_INT 1
73860: PLUS
73861: ARRAY
73862: ST_TO_ADDR
73863: GO 74230
73865: LD_INT 6
73867: DOUBLE
73868: EQUAL
73869: IFTRUE 73921
73871: LD_INT 7
73873: DOUBLE
73874: EQUAL
73875: IFTRUE 73921
73877: LD_INT 8
73879: DOUBLE
73880: EQUAL
73881: IFTRUE 73921
73883: LD_INT 13
73885: DOUBLE
73886: EQUAL
73887: IFTRUE 73921
73889: LD_INT 12
73891: DOUBLE
73892: EQUAL
73893: IFTRUE 73921
73895: LD_INT 15
73897: DOUBLE
73898: EQUAL
73899: IFTRUE 73921
73901: LD_INT 11
73903: DOUBLE
73904: EQUAL
73905: IFTRUE 73921
73907: LD_INT 14
73909: DOUBLE
73910: EQUAL
73911: IFTRUE 73921
73913: LD_INT 10
73915: DOUBLE
73916: EQUAL
73917: IFTRUE 73921
73919: GO 73977
73921: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73922: LD_ADDR_VAR 0 9
73926: PUSH
73927: LD_VAR 0 41
73931: PUSH
73932: LD_VAR 0 42
73936: PUSH
73937: LD_VAR 0 43
73941: PUSH
73942: LD_VAR 0 44
73946: PUSH
73947: LD_VAR 0 45
73951: PUSH
73952: LD_VAR 0 46
73956: PUSH
73957: EMPTY
73958: LIST
73959: LIST
73960: LIST
73961: LIST
73962: LIST
73963: LIST
73964: PUSH
73965: LD_VAR 0 4
73969: PUSH
73970: LD_INT 1
73972: PLUS
73973: ARRAY
73974: ST_TO_ADDR
73975: GO 74230
73977: LD_INT 36
73979: DOUBLE
73980: EQUAL
73981: IFTRUE 73985
73983: GO 74041
73985: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73986: LD_ADDR_VAR 0 9
73990: PUSH
73991: LD_VAR 0 47
73995: PUSH
73996: LD_VAR 0 48
74000: PUSH
74001: LD_VAR 0 49
74005: PUSH
74006: LD_VAR 0 50
74010: PUSH
74011: LD_VAR 0 51
74015: PUSH
74016: LD_VAR 0 52
74020: PUSH
74021: EMPTY
74022: LIST
74023: LIST
74024: LIST
74025: LIST
74026: LIST
74027: LIST
74028: PUSH
74029: LD_VAR 0 4
74033: PUSH
74034: LD_INT 1
74036: PLUS
74037: ARRAY
74038: ST_TO_ADDR
74039: GO 74230
74041: LD_INT 4
74043: DOUBLE
74044: EQUAL
74045: IFTRUE 74067
74047: LD_INT 5
74049: DOUBLE
74050: EQUAL
74051: IFTRUE 74067
74053: LD_INT 34
74055: DOUBLE
74056: EQUAL
74057: IFTRUE 74067
74059: LD_INT 37
74061: DOUBLE
74062: EQUAL
74063: IFTRUE 74067
74065: GO 74123
74067: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74068: LD_ADDR_VAR 0 9
74072: PUSH
74073: LD_VAR 0 53
74077: PUSH
74078: LD_VAR 0 54
74082: PUSH
74083: LD_VAR 0 55
74087: PUSH
74088: LD_VAR 0 56
74092: PUSH
74093: LD_VAR 0 57
74097: PUSH
74098: LD_VAR 0 58
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: LIST
74107: LIST
74108: LIST
74109: LIST
74110: PUSH
74111: LD_VAR 0 4
74115: PUSH
74116: LD_INT 1
74118: PLUS
74119: ARRAY
74120: ST_TO_ADDR
74121: GO 74230
74123: LD_INT 31
74125: DOUBLE
74126: EQUAL
74127: IFTRUE 74173
74129: LD_INT 32
74131: DOUBLE
74132: EQUAL
74133: IFTRUE 74173
74135: LD_INT 33
74137: DOUBLE
74138: EQUAL
74139: IFTRUE 74173
74141: LD_INT 27
74143: DOUBLE
74144: EQUAL
74145: IFTRUE 74173
74147: LD_INT 26
74149: DOUBLE
74150: EQUAL
74151: IFTRUE 74173
74153: LD_INT 28
74155: DOUBLE
74156: EQUAL
74157: IFTRUE 74173
74159: LD_INT 29
74161: DOUBLE
74162: EQUAL
74163: IFTRUE 74173
74165: LD_INT 30
74167: DOUBLE
74168: EQUAL
74169: IFTRUE 74173
74171: GO 74229
74173: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74174: LD_ADDR_VAR 0 9
74178: PUSH
74179: LD_VAR 0 59
74183: PUSH
74184: LD_VAR 0 60
74188: PUSH
74189: LD_VAR 0 61
74193: PUSH
74194: LD_VAR 0 62
74198: PUSH
74199: LD_VAR 0 63
74203: PUSH
74204: LD_VAR 0 64
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: LIST
74215: LIST
74216: PUSH
74217: LD_VAR 0 4
74221: PUSH
74222: LD_INT 1
74224: PLUS
74225: ARRAY
74226: ST_TO_ADDR
74227: GO 74230
74229: POP
// temp_list2 = [ ] ;
74230: LD_ADDR_VAR 0 10
74234: PUSH
74235: EMPTY
74236: ST_TO_ADDR
// for i in temp_list do
74237: LD_ADDR_VAR 0 8
74241: PUSH
74242: LD_VAR 0 9
74246: PUSH
74247: FOR_IN
74248: IFFALSE 74300
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74250: LD_ADDR_VAR 0 10
74254: PUSH
74255: LD_VAR 0 10
74259: PUSH
74260: LD_VAR 0 8
74264: PUSH
74265: LD_INT 1
74267: ARRAY
74268: PUSH
74269: LD_VAR 0 2
74273: PLUS
74274: PUSH
74275: LD_VAR 0 8
74279: PUSH
74280: LD_INT 2
74282: ARRAY
74283: PUSH
74284: LD_VAR 0 3
74288: PLUS
74289: PUSH
74290: EMPTY
74291: LIST
74292: LIST
74293: PUSH
74294: EMPTY
74295: LIST
74296: ADD
74297: ST_TO_ADDR
74298: GO 74247
74300: POP
74301: POP
// result = temp_list2 ;
74302: LD_ADDR_VAR 0 7
74306: PUSH
74307: LD_VAR 0 10
74311: ST_TO_ADDR
// end ;
74312: LD_VAR 0 7
74316: RET
// export function EnemyInRange ( unit , dist ) ; begin
74317: LD_INT 0
74319: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74320: LD_ADDR_VAR 0 3
74324: PUSH
74325: LD_VAR 0 1
74329: PPUSH
74330: CALL_OW 255
74334: PPUSH
74335: LD_VAR 0 1
74339: PPUSH
74340: CALL_OW 250
74344: PPUSH
74345: LD_VAR 0 1
74349: PPUSH
74350: CALL_OW 251
74354: PPUSH
74355: LD_VAR 0 2
74359: PPUSH
74360: CALL 47574 0 4
74364: PUSH
74365: LD_INT 4
74367: ARRAY
74368: ST_TO_ADDR
// end ;
74369: LD_VAR 0 3
74373: RET
// export function PlayerSeeMe ( unit ) ; begin
74374: LD_INT 0
74376: PPUSH
// result := See ( your_side , unit ) ;
74377: LD_ADDR_VAR 0 2
74381: PUSH
74382: LD_OWVAR 2
74386: PPUSH
74387: LD_VAR 0 1
74391: PPUSH
74392: CALL_OW 292
74396: ST_TO_ADDR
// end ;
74397: LD_VAR 0 2
74401: RET
// export function ReverseDir ( unit ) ; begin
74402: LD_INT 0
74404: PPUSH
// if not unit then
74405: LD_VAR 0 1
74409: NOT
74410: IFFALSE 74414
// exit ;
74412: GO 74437
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74414: LD_ADDR_VAR 0 2
74418: PUSH
74419: LD_VAR 0 1
74423: PPUSH
74424: CALL_OW 254
74428: PUSH
74429: LD_INT 3
74431: PLUS
74432: PUSH
74433: LD_INT 6
74435: MOD
74436: ST_TO_ADDR
// end ;
74437: LD_VAR 0 2
74441: RET
// export function ReverseArray ( array ) ; var i ; begin
74442: LD_INT 0
74444: PPUSH
74445: PPUSH
// if not array then
74446: LD_VAR 0 1
74450: NOT
74451: IFFALSE 74455
// exit ;
74453: GO 74510
// result := [ ] ;
74455: LD_ADDR_VAR 0 2
74459: PUSH
74460: EMPTY
74461: ST_TO_ADDR
// for i := array downto 1 do
74462: LD_ADDR_VAR 0 3
74466: PUSH
74467: DOUBLE
74468: LD_VAR 0 1
74472: INC
74473: ST_TO_ADDR
74474: LD_INT 1
74476: PUSH
74477: FOR_DOWNTO
74478: IFFALSE 74508
// result := Join ( result , array [ i ] ) ;
74480: LD_ADDR_VAR 0 2
74484: PUSH
74485: LD_VAR 0 2
74489: PPUSH
74490: LD_VAR 0 1
74494: PUSH
74495: LD_VAR 0 3
74499: ARRAY
74500: PPUSH
74501: CALL 79352 0 2
74505: ST_TO_ADDR
74506: GO 74477
74508: POP
74509: POP
// end ;
74510: LD_VAR 0 2
74514: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74515: LD_INT 0
74517: PPUSH
74518: PPUSH
74519: PPUSH
74520: PPUSH
74521: PPUSH
74522: PPUSH
// if not unit or not hexes then
74523: LD_VAR 0 1
74527: NOT
74528: IFTRUE 74537
74530: PUSH
74531: LD_VAR 0 2
74535: NOT
74536: OR
74537: IFFALSE 74541
// exit ;
74539: GO 74664
// dist := 9999 ;
74541: LD_ADDR_VAR 0 5
74545: PUSH
74546: LD_INT 9999
74548: ST_TO_ADDR
// for i = 1 to hexes do
74549: LD_ADDR_VAR 0 4
74553: PUSH
74554: DOUBLE
74555: LD_INT 1
74557: DEC
74558: ST_TO_ADDR
74559: LD_VAR 0 2
74563: PUSH
74564: FOR_TO
74565: IFFALSE 74652
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74567: LD_ADDR_VAR 0 6
74571: PUSH
74572: LD_VAR 0 1
74576: PPUSH
74577: LD_VAR 0 2
74581: PUSH
74582: LD_VAR 0 4
74586: ARRAY
74587: PUSH
74588: LD_INT 1
74590: ARRAY
74591: PPUSH
74592: LD_VAR 0 2
74596: PUSH
74597: LD_VAR 0 4
74601: ARRAY
74602: PUSH
74603: LD_INT 2
74605: ARRAY
74606: PPUSH
74607: CALL_OW 297
74611: ST_TO_ADDR
// if tdist < dist then
74612: LD_VAR 0 6
74616: PUSH
74617: LD_VAR 0 5
74621: LESS
74622: IFFALSE 74650
// begin hex := hexes [ i ] ;
74624: LD_ADDR_VAR 0 8
74628: PUSH
74629: LD_VAR 0 2
74633: PUSH
74634: LD_VAR 0 4
74638: ARRAY
74639: ST_TO_ADDR
// dist := tdist ;
74640: LD_ADDR_VAR 0 5
74644: PUSH
74645: LD_VAR 0 6
74649: ST_TO_ADDR
// end ; end ;
74650: GO 74564
74652: POP
74653: POP
// result := hex ;
74654: LD_ADDR_VAR 0 3
74658: PUSH
74659: LD_VAR 0 8
74663: ST_TO_ADDR
// end ;
74664: LD_VAR 0 3
74668: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74669: LD_INT 0
74671: PPUSH
74672: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74673: LD_VAR 0 1
74677: NOT
74678: IFTRUE 74717
74680: PUSH
74681: LD_VAR 0 1
74685: PUSH
74686: LD_INT 21
74688: PUSH
74689: LD_INT 2
74691: PUSH
74692: EMPTY
74693: LIST
74694: LIST
74695: PUSH
74696: LD_INT 23
74698: PUSH
74699: LD_INT 2
74701: PUSH
74702: EMPTY
74703: LIST
74704: LIST
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: PPUSH
74710: CALL_OW 69
74714: IN
74715: NOT
74716: OR
74717: IFFALSE 74721
// exit ;
74719: GO 74768
// for i = 1 to 3 do
74721: LD_ADDR_VAR 0 3
74725: PUSH
74726: DOUBLE
74727: LD_INT 1
74729: DEC
74730: ST_TO_ADDR
74731: LD_INT 3
74733: PUSH
74734: FOR_TO
74735: IFFALSE 74766
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74737: LD_VAR 0 1
74741: PPUSH
74742: CALL_OW 250
74746: PPUSH
74747: LD_VAR 0 1
74751: PPUSH
74752: CALL_OW 251
74756: PPUSH
74757: LD_INT 1
74759: PPUSH
74760: CALL_OW 453
74764: GO 74734
74766: POP
74767: POP
// end ;
74768: LD_VAR 0 2
74772: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74773: LD_INT 0
74775: PPUSH
74776: PPUSH
74777: PPUSH
74778: PPUSH
74779: PPUSH
74780: PPUSH
// if not unit or not enemy_unit then
74781: LD_VAR 0 1
74785: NOT
74786: IFTRUE 74795
74788: PUSH
74789: LD_VAR 0 2
74793: NOT
74794: OR
74795: IFFALSE 74799
// exit ;
74797: GO 75270
// if GetLives ( i ) < 250 then
74799: LD_VAR 0 4
74803: PPUSH
74804: CALL_OW 256
74808: PUSH
74809: LD_INT 250
74811: LESS
74812: IFFALSE 74825
// begin ComAutodestruct ( i ) ;
74814: LD_VAR 0 4
74818: PPUSH
74819: CALL 74669 0 1
// exit ;
74823: GO 75270
// end ; x := GetX ( enemy_unit ) ;
74825: LD_ADDR_VAR 0 7
74829: PUSH
74830: LD_VAR 0 2
74834: PPUSH
74835: CALL_OW 250
74839: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74840: LD_ADDR_VAR 0 8
74844: PUSH
74845: LD_VAR 0 2
74849: PPUSH
74850: CALL_OW 251
74854: ST_TO_ADDR
// if not x or not y then
74855: LD_VAR 0 7
74859: NOT
74860: IFTRUE 74869
74862: PUSH
74863: LD_VAR 0 8
74867: NOT
74868: OR
74869: IFFALSE 74873
// exit ;
74871: GO 75270
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74873: LD_ADDR_VAR 0 6
74877: PUSH
74878: LD_VAR 0 7
74882: PPUSH
74883: LD_INT 0
74885: PPUSH
74886: LD_INT 4
74888: PPUSH
74889: CALL_OW 272
74893: PUSH
74894: LD_VAR 0 8
74898: PPUSH
74899: LD_INT 0
74901: PPUSH
74902: LD_INT 4
74904: PPUSH
74905: CALL_OW 273
74909: PUSH
74910: EMPTY
74911: LIST
74912: LIST
74913: PUSH
74914: LD_VAR 0 7
74918: PPUSH
74919: LD_INT 1
74921: PPUSH
74922: LD_INT 4
74924: PPUSH
74925: CALL_OW 272
74929: PUSH
74930: LD_VAR 0 8
74934: PPUSH
74935: LD_INT 1
74937: PPUSH
74938: LD_INT 4
74940: PPUSH
74941: CALL_OW 273
74945: PUSH
74946: EMPTY
74947: LIST
74948: LIST
74949: PUSH
74950: LD_VAR 0 7
74954: PPUSH
74955: LD_INT 2
74957: PPUSH
74958: LD_INT 4
74960: PPUSH
74961: CALL_OW 272
74965: PUSH
74966: LD_VAR 0 8
74970: PPUSH
74971: LD_INT 2
74973: PPUSH
74974: LD_INT 4
74976: PPUSH
74977: CALL_OW 273
74981: PUSH
74982: EMPTY
74983: LIST
74984: LIST
74985: PUSH
74986: LD_VAR 0 7
74990: PPUSH
74991: LD_INT 3
74993: PPUSH
74994: LD_INT 4
74996: PPUSH
74997: CALL_OW 272
75001: PUSH
75002: LD_VAR 0 8
75006: PPUSH
75007: LD_INT 3
75009: PPUSH
75010: LD_INT 4
75012: PPUSH
75013: CALL_OW 273
75017: PUSH
75018: EMPTY
75019: LIST
75020: LIST
75021: PUSH
75022: LD_VAR 0 7
75026: PPUSH
75027: LD_INT 4
75029: PPUSH
75030: LD_INT 4
75032: PPUSH
75033: CALL_OW 272
75037: PUSH
75038: LD_VAR 0 8
75042: PPUSH
75043: LD_INT 4
75045: PPUSH
75046: LD_INT 4
75048: PPUSH
75049: CALL_OW 273
75053: PUSH
75054: EMPTY
75055: LIST
75056: LIST
75057: PUSH
75058: LD_VAR 0 7
75062: PPUSH
75063: LD_INT 5
75065: PPUSH
75066: LD_INT 4
75068: PPUSH
75069: CALL_OW 272
75073: PUSH
75074: LD_VAR 0 8
75078: PPUSH
75079: LD_INT 5
75081: PPUSH
75082: LD_INT 4
75084: PPUSH
75085: CALL_OW 273
75089: PUSH
75090: EMPTY
75091: LIST
75092: LIST
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: LIST
75098: LIST
75099: LIST
75100: LIST
75101: ST_TO_ADDR
// for i = tmp downto 1 do
75102: LD_ADDR_VAR 0 4
75106: PUSH
75107: DOUBLE
75108: LD_VAR 0 6
75112: INC
75113: ST_TO_ADDR
75114: LD_INT 1
75116: PUSH
75117: FOR_DOWNTO
75118: IFFALSE 75221
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75120: LD_VAR 0 6
75124: PUSH
75125: LD_VAR 0 4
75129: ARRAY
75130: PUSH
75131: LD_INT 1
75133: ARRAY
75134: PPUSH
75135: LD_VAR 0 6
75139: PUSH
75140: LD_VAR 0 4
75144: ARRAY
75145: PUSH
75146: LD_INT 2
75148: ARRAY
75149: PPUSH
75150: CALL_OW 488
75154: NOT
75155: IFTRUE 75197
75157: PUSH
75158: LD_VAR 0 6
75162: PUSH
75163: LD_VAR 0 4
75167: ARRAY
75168: PUSH
75169: LD_INT 1
75171: ARRAY
75172: PPUSH
75173: LD_VAR 0 6
75177: PUSH
75178: LD_VAR 0 4
75182: ARRAY
75183: PUSH
75184: LD_INT 2
75186: ARRAY
75187: PPUSH
75188: CALL_OW 428
75192: PUSH
75193: LD_INT 0
75195: NONEQUAL
75196: OR
75197: IFFALSE 75219
// tmp := Delete ( tmp , i ) ;
75199: LD_ADDR_VAR 0 6
75203: PUSH
75204: LD_VAR 0 6
75208: PPUSH
75209: LD_VAR 0 4
75213: PPUSH
75214: CALL_OW 3
75218: ST_TO_ADDR
75219: GO 75117
75221: POP
75222: POP
// j := GetClosestHex ( unit , tmp ) ;
75223: LD_ADDR_VAR 0 5
75227: PUSH
75228: LD_VAR 0 1
75232: PPUSH
75233: LD_VAR 0 6
75237: PPUSH
75238: CALL 74515 0 2
75242: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75243: LD_VAR 0 1
75247: PPUSH
75248: LD_VAR 0 5
75252: PUSH
75253: LD_INT 1
75255: ARRAY
75256: PPUSH
75257: LD_VAR 0 5
75261: PUSH
75262: LD_INT 2
75264: ARRAY
75265: PPUSH
75266: CALL_OW 111
// end ;
75270: LD_VAR 0 3
75274: RET
// export function PrepareApemanSoldier ( ) ; begin
75275: LD_INT 0
75277: PPUSH
// uc_nation := 0 ;
75278: LD_ADDR_OWVAR 21
75282: PUSH
75283: LD_INT 0
75285: ST_TO_ADDR
// hc_sex := sex_male ;
75286: LD_ADDR_OWVAR 27
75290: PUSH
75291: LD_INT 1
75293: ST_TO_ADDR
// hc_name :=  ;
75294: LD_ADDR_OWVAR 26
75298: PUSH
75299: LD_STRING 
75301: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75302: LD_ADDR_OWVAR 28
75306: PUSH
75307: LD_INT 15
75309: ST_TO_ADDR
// hc_gallery :=  ;
75310: LD_ADDR_OWVAR 33
75314: PUSH
75315: LD_STRING 
75317: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75318: LD_ADDR_OWVAR 31
75322: PUSH
75323: LD_INT 0
75325: PPUSH
75326: LD_INT 3
75328: PPUSH
75329: CALL_OW 12
75333: PUSH
75334: LD_INT 0
75336: PPUSH
75337: LD_INT 3
75339: PPUSH
75340: CALL_OW 12
75344: PUSH
75345: LD_INT 0
75347: PUSH
75348: LD_INT 0
75350: PUSH
75351: EMPTY
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75357: LD_ADDR_OWVAR 29
75361: PUSH
75362: LD_INT 12
75364: PUSH
75365: LD_INT 12
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: ST_TO_ADDR
// end ;
75372: LD_VAR 0 1
75376: RET
// export function PrepareApemanEngineer ( ) ; begin
75377: LD_INT 0
75379: PPUSH
// uc_nation := 0 ;
75380: LD_ADDR_OWVAR 21
75384: PUSH
75385: LD_INT 0
75387: ST_TO_ADDR
// hc_sex := sex_male ;
75388: LD_ADDR_OWVAR 27
75392: PUSH
75393: LD_INT 1
75395: ST_TO_ADDR
// hc_name :=  ;
75396: LD_ADDR_OWVAR 26
75400: PUSH
75401: LD_STRING 
75403: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75404: LD_ADDR_OWVAR 28
75408: PUSH
75409: LD_INT 16
75411: ST_TO_ADDR
// hc_gallery :=  ;
75412: LD_ADDR_OWVAR 33
75416: PUSH
75417: LD_STRING 
75419: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75420: LD_ADDR_OWVAR 31
75424: PUSH
75425: LD_INT 0
75427: PPUSH
75428: LD_INT 3
75430: PPUSH
75431: CALL_OW 12
75435: PUSH
75436: LD_INT 0
75438: PPUSH
75439: LD_INT 3
75441: PPUSH
75442: CALL_OW 12
75446: PUSH
75447: LD_INT 0
75449: PUSH
75450: LD_INT 0
75452: PUSH
75453: EMPTY
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75459: LD_ADDR_OWVAR 29
75463: PUSH
75464: LD_INT 12
75466: PUSH
75467: LD_INT 12
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: ST_TO_ADDR
// end ;
75474: LD_VAR 0 1
75478: RET
// export function PrepareApeman ( agressivity ) ; begin
75479: LD_INT 0
75481: PPUSH
// uc_side := 0 ;
75482: LD_ADDR_OWVAR 20
75486: PUSH
75487: LD_INT 0
75489: ST_TO_ADDR
// uc_nation := 0 ;
75490: LD_ADDR_OWVAR 21
75494: PUSH
75495: LD_INT 0
75497: ST_TO_ADDR
// hc_sex := sex_male ;
75498: LD_ADDR_OWVAR 27
75502: PUSH
75503: LD_INT 1
75505: ST_TO_ADDR
// hc_class := class_apeman ;
75506: LD_ADDR_OWVAR 28
75510: PUSH
75511: LD_INT 12
75513: ST_TO_ADDR
// hc_gallery :=  ;
75514: LD_ADDR_OWVAR 33
75518: PUSH
75519: LD_STRING 
75521: ST_TO_ADDR
// hc_name :=  ;
75522: LD_ADDR_OWVAR 26
75526: PUSH
75527: LD_STRING 
75529: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75530: LD_ADDR_OWVAR 29
75534: PUSH
75535: LD_INT 12
75537: PUSH
75538: LD_INT 12
75540: PUSH
75541: EMPTY
75542: LIST
75543: LIST
75544: ST_TO_ADDR
// if agressivity = 0 then
75545: LD_VAR 0 1
75549: PUSH
75550: LD_INT 0
75552: EQUAL
75553: IFFALSE 75565
// hc_agressivity := 0 else
75555: LD_ADDR_OWVAR 35
75559: PUSH
75560: LD_INT 0
75562: ST_TO_ADDR
75563: GO 75586
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75565: LD_ADDR_OWVAR 35
75569: PUSH
75570: LD_VAR 0 1
75574: NEG
75575: PPUSH
75576: LD_VAR 0 1
75580: PPUSH
75581: CALL_OW 12
75585: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75586: LD_ADDR_OWVAR 31
75590: PUSH
75591: LD_INT 0
75593: PPUSH
75594: LD_INT 3
75596: PPUSH
75597: CALL_OW 12
75601: PUSH
75602: LD_INT 0
75604: PPUSH
75605: LD_INT 3
75607: PPUSH
75608: CALL_OW 12
75612: PUSH
75613: LD_INT 0
75615: PUSH
75616: LD_INT 0
75618: PUSH
75619: EMPTY
75620: LIST
75621: LIST
75622: LIST
75623: LIST
75624: ST_TO_ADDR
// end ;
75625: LD_VAR 0 2
75629: RET
// export function PrepareTiger ( agressivity ) ; begin
75630: LD_INT 0
75632: PPUSH
// uc_side := 0 ;
75633: LD_ADDR_OWVAR 20
75637: PUSH
75638: LD_INT 0
75640: ST_TO_ADDR
// uc_nation := 0 ;
75641: LD_ADDR_OWVAR 21
75645: PUSH
75646: LD_INT 0
75648: ST_TO_ADDR
// InitHc ;
75649: CALL_OW 19
// hc_class := class_tiger ;
75653: LD_ADDR_OWVAR 28
75657: PUSH
75658: LD_INT 14
75660: ST_TO_ADDR
// hc_gallery :=  ;
75661: LD_ADDR_OWVAR 33
75665: PUSH
75666: LD_STRING 
75668: ST_TO_ADDR
// hc_name :=  ;
75669: LD_ADDR_OWVAR 26
75673: PUSH
75674: LD_STRING 
75676: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75677: LD_ADDR_OWVAR 35
75681: PUSH
75682: LD_VAR 0 1
75686: NEG
75687: PPUSH
75688: LD_VAR 0 1
75692: PPUSH
75693: CALL_OW 12
75697: ST_TO_ADDR
// end ;
75698: LD_VAR 0 2
75702: RET
// export function PrepareEnchidna ( ) ; begin
75703: LD_INT 0
75705: PPUSH
// uc_side := 0 ;
75706: LD_ADDR_OWVAR 20
75710: PUSH
75711: LD_INT 0
75713: ST_TO_ADDR
// uc_nation := 0 ;
75714: LD_ADDR_OWVAR 21
75718: PUSH
75719: LD_INT 0
75721: ST_TO_ADDR
// InitHc ;
75722: CALL_OW 19
// hc_class := class_baggie ;
75726: LD_ADDR_OWVAR 28
75730: PUSH
75731: LD_INT 13
75733: ST_TO_ADDR
// hc_gallery :=  ;
75734: LD_ADDR_OWVAR 33
75738: PUSH
75739: LD_STRING 
75741: ST_TO_ADDR
// hc_name :=  ;
75742: LD_ADDR_OWVAR 26
75746: PUSH
75747: LD_STRING 
75749: ST_TO_ADDR
// end ;
75750: LD_VAR 0 1
75754: RET
// export function PrepareFrog ( ) ; begin
75755: LD_INT 0
75757: PPUSH
// uc_side := 0 ;
75758: LD_ADDR_OWVAR 20
75762: PUSH
75763: LD_INT 0
75765: ST_TO_ADDR
// uc_nation := 0 ;
75766: LD_ADDR_OWVAR 21
75770: PUSH
75771: LD_INT 0
75773: ST_TO_ADDR
// InitHc ;
75774: CALL_OW 19
// hc_class := class_frog ;
75778: LD_ADDR_OWVAR 28
75782: PUSH
75783: LD_INT 19
75785: ST_TO_ADDR
// hc_gallery :=  ;
75786: LD_ADDR_OWVAR 33
75790: PUSH
75791: LD_STRING 
75793: ST_TO_ADDR
// hc_name :=  ;
75794: LD_ADDR_OWVAR 26
75798: PUSH
75799: LD_STRING 
75801: ST_TO_ADDR
// end ;
75802: LD_VAR 0 1
75806: RET
// export function PrepareFish ( ) ; begin
75807: LD_INT 0
75809: PPUSH
// uc_side := 0 ;
75810: LD_ADDR_OWVAR 20
75814: PUSH
75815: LD_INT 0
75817: ST_TO_ADDR
// uc_nation := 0 ;
75818: LD_ADDR_OWVAR 21
75822: PUSH
75823: LD_INT 0
75825: ST_TO_ADDR
// InitHc ;
75826: CALL_OW 19
// hc_class := class_fish ;
75830: LD_ADDR_OWVAR 28
75834: PUSH
75835: LD_INT 20
75837: ST_TO_ADDR
// hc_gallery :=  ;
75838: LD_ADDR_OWVAR 33
75842: PUSH
75843: LD_STRING 
75845: ST_TO_ADDR
// hc_name :=  ;
75846: LD_ADDR_OWVAR 26
75850: PUSH
75851: LD_STRING 
75853: ST_TO_ADDR
// end ;
75854: LD_VAR 0 1
75858: RET
// export function PrepareBird ( ) ; begin
75859: LD_INT 0
75861: PPUSH
// uc_side := 0 ;
75862: LD_ADDR_OWVAR 20
75866: PUSH
75867: LD_INT 0
75869: ST_TO_ADDR
// uc_nation := 0 ;
75870: LD_ADDR_OWVAR 21
75874: PUSH
75875: LD_INT 0
75877: ST_TO_ADDR
// InitHc ;
75878: CALL_OW 19
// hc_class := class_phororhacos ;
75882: LD_ADDR_OWVAR 28
75886: PUSH
75887: LD_INT 18
75889: ST_TO_ADDR
// hc_gallery :=  ;
75890: LD_ADDR_OWVAR 33
75894: PUSH
75895: LD_STRING 
75897: ST_TO_ADDR
// hc_name :=  ;
75898: LD_ADDR_OWVAR 26
75902: PUSH
75903: LD_STRING 
75905: ST_TO_ADDR
// end ;
75906: LD_VAR 0 1
75910: RET
// export function PrepareHorse ( ) ; begin
75911: LD_INT 0
75913: PPUSH
// uc_side := 0 ;
75914: LD_ADDR_OWVAR 20
75918: PUSH
75919: LD_INT 0
75921: ST_TO_ADDR
// uc_nation := 0 ;
75922: LD_ADDR_OWVAR 21
75926: PUSH
75927: LD_INT 0
75929: ST_TO_ADDR
// InitHc ;
75930: CALL_OW 19
// hc_class := class_horse ;
75934: LD_ADDR_OWVAR 28
75938: PUSH
75939: LD_INT 21
75941: ST_TO_ADDR
// hc_gallery :=  ;
75942: LD_ADDR_OWVAR 33
75946: PUSH
75947: LD_STRING 
75949: ST_TO_ADDR
// hc_name :=  ;
75950: LD_ADDR_OWVAR 26
75954: PUSH
75955: LD_STRING 
75957: ST_TO_ADDR
// end ;
75958: LD_VAR 0 1
75962: RET
// export function PrepareMastodont ( ) ; begin
75963: LD_INT 0
75965: PPUSH
// uc_side := 0 ;
75966: LD_ADDR_OWVAR 20
75970: PUSH
75971: LD_INT 0
75973: ST_TO_ADDR
// uc_nation := 0 ;
75974: LD_ADDR_OWVAR 21
75978: PUSH
75979: LD_INT 0
75981: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75982: LD_ADDR_OWVAR 37
75986: PUSH
75987: LD_INT 31
75989: ST_TO_ADDR
// vc_control := control_rider ;
75990: LD_ADDR_OWVAR 38
75994: PUSH
75995: LD_INT 4
75997: ST_TO_ADDR
// end ;
75998: LD_VAR 0 1
76002: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76003: LD_INT 0
76005: PPUSH
76006: PPUSH
76007: PPUSH
// uc_side = 0 ;
76008: LD_ADDR_OWVAR 20
76012: PUSH
76013: LD_INT 0
76015: ST_TO_ADDR
// uc_nation = 0 ;
76016: LD_ADDR_OWVAR 21
76020: PUSH
76021: LD_INT 0
76023: ST_TO_ADDR
// InitHc_All ( ) ;
76024: CALL_OW 584
// InitVc ;
76028: CALL_OW 20
// if mastodonts then
76032: LD_VAR 0 6
76036: IFFALSE 76103
// for i = 1 to mastodonts do
76038: LD_ADDR_VAR 0 11
76042: PUSH
76043: DOUBLE
76044: LD_INT 1
76046: DEC
76047: ST_TO_ADDR
76048: LD_VAR 0 6
76052: PUSH
76053: FOR_TO
76054: IFFALSE 76101
// begin vc_chassis := 31 ;
76056: LD_ADDR_OWVAR 37
76060: PUSH
76061: LD_INT 31
76063: ST_TO_ADDR
// vc_control := control_rider ;
76064: LD_ADDR_OWVAR 38
76068: PUSH
76069: LD_INT 4
76071: ST_TO_ADDR
// animal := CreateVehicle ;
76072: LD_ADDR_VAR 0 12
76076: PUSH
76077: CALL_OW 45
76081: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76082: LD_VAR 0 12
76086: PPUSH
76087: LD_VAR 0 8
76091: PPUSH
76092: LD_INT 0
76094: PPUSH
76095: CALL 78245 0 3
// end ;
76099: GO 76053
76101: POP
76102: POP
// if horses then
76103: LD_VAR 0 5
76107: IFFALSE 76174
// for i = 1 to horses do
76109: LD_ADDR_VAR 0 11
76113: PUSH
76114: DOUBLE
76115: LD_INT 1
76117: DEC
76118: ST_TO_ADDR
76119: LD_VAR 0 5
76123: PUSH
76124: FOR_TO
76125: IFFALSE 76172
// begin hc_class := 21 ;
76127: LD_ADDR_OWVAR 28
76131: PUSH
76132: LD_INT 21
76134: ST_TO_ADDR
// hc_gallery :=  ;
76135: LD_ADDR_OWVAR 33
76139: PUSH
76140: LD_STRING 
76142: ST_TO_ADDR
// animal := CreateHuman ;
76143: LD_ADDR_VAR 0 12
76147: PUSH
76148: CALL_OW 44
76152: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76153: LD_VAR 0 12
76157: PPUSH
76158: LD_VAR 0 8
76162: PPUSH
76163: LD_INT 0
76165: PPUSH
76166: CALL 78245 0 3
// end ;
76170: GO 76124
76172: POP
76173: POP
// if birds then
76174: LD_VAR 0 1
76178: IFFALSE 76245
// for i = 1 to birds do
76180: LD_ADDR_VAR 0 11
76184: PUSH
76185: DOUBLE
76186: LD_INT 1
76188: DEC
76189: ST_TO_ADDR
76190: LD_VAR 0 1
76194: PUSH
76195: FOR_TO
76196: IFFALSE 76243
// begin hc_class := 18 ;
76198: LD_ADDR_OWVAR 28
76202: PUSH
76203: LD_INT 18
76205: ST_TO_ADDR
// hc_gallery =  ;
76206: LD_ADDR_OWVAR 33
76210: PUSH
76211: LD_STRING 
76213: ST_TO_ADDR
// animal := CreateHuman ;
76214: LD_ADDR_VAR 0 12
76218: PUSH
76219: CALL_OW 44
76223: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76224: LD_VAR 0 12
76228: PPUSH
76229: LD_VAR 0 8
76233: PPUSH
76234: LD_INT 0
76236: PPUSH
76237: CALL 78245 0 3
// end ;
76241: GO 76195
76243: POP
76244: POP
// if tigers then
76245: LD_VAR 0 2
76249: IFFALSE 76333
// for i = 1 to tigers do
76251: LD_ADDR_VAR 0 11
76255: PUSH
76256: DOUBLE
76257: LD_INT 1
76259: DEC
76260: ST_TO_ADDR
76261: LD_VAR 0 2
76265: PUSH
76266: FOR_TO
76267: IFFALSE 76331
// begin hc_class = class_tiger ;
76269: LD_ADDR_OWVAR 28
76273: PUSH
76274: LD_INT 14
76276: ST_TO_ADDR
// hc_gallery =  ;
76277: LD_ADDR_OWVAR 33
76281: PUSH
76282: LD_STRING 
76284: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76285: LD_ADDR_OWVAR 35
76289: PUSH
76290: LD_INT 7
76292: NEG
76293: PPUSH
76294: LD_INT 7
76296: PPUSH
76297: CALL_OW 12
76301: ST_TO_ADDR
// animal := CreateHuman ;
76302: LD_ADDR_VAR 0 12
76306: PUSH
76307: CALL_OW 44
76311: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76312: LD_VAR 0 12
76316: PPUSH
76317: LD_VAR 0 8
76321: PPUSH
76322: LD_INT 0
76324: PPUSH
76325: CALL 78245 0 3
// end ;
76329: GO 76266
76331: POP
76332: POP
// if apemans then
76333: LD_VAR 0 3
76337: IFFALSE 76460
// for i = 1 to apemans do
76339: LD_ADDR_VAR 0 11
76343: PUSH
76344: DOUBLE
76345: LD_INT 1
76347: DEC
76348: ST_TO_ADDR
76349: LD_VAR 0 3
76353: PUSH
76354: FOR_TO
76355: IFFALSE 76458
// begin hc_class = class_apeman ;
76357: LD_ADDR_OWVAR 28
76361: PUSH
76362: LD_INT 12
76364: ST_TO_ADDR
// hc_gallery =  ;
76365: LD_ADDR_OWVAR 33
76369: PUSH
76370: LD_STRING 
76372: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76373: LD_ADDR_OWVAR 35
76377: PUSH
76378: LD_INT 2
76380: NEG
76381: PPUSH
76382: LD_INT 2
76384: PPUSH
76385: CALL_OW 12
76389: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76390: LD_ADDR_OWVAR 31
76394: PUSH
76395: LD_INT 1
76397: PPUSH
76398: LD_INT 3
76400: PPUSH
76401: CALL_OW 12
76405: PUSH
76406: LD_INT 1
76408: PPUSH
76409: LD_INT 3
76411: PPUSH
76412: CALL_OW 12
76416: PUSH
76417: LD_INT 0
76419: PUSH
76420: LD_INT 0
76422: PUSH
76423: EMPTY
76424: LIST
76425: LIST
76426: LIST
76427: LIST
76428: ST_TO_ADDR
// animal := CreateHuman ;
76429: LD_ADDR_VAR 0 12
76433: PUSH
76434: CALL_OW 44
76438: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76439: LD_VAR 0 12
76443: PPUSH
76444: LD_VAR 0 8
76448: PPUSH
76449: LD_INT 0
76451: PPUSH
76452: CALL 78245 0 3
// end ;
76456: GO 76354
76458: POP
76459: POP
// if enchidnas then
76460: LD_VAR 0 4
76464: IFFALSE 76531
// for i = 1 to enchidnas do
76466: LD_ADDR_VAR 0 11
76470: PUSH
76471: DOUBLE
76472: LD_INT 1
76474: DEC
76475: ST_TO_ADDR
76476: LD_VAR 0 4
76480: PUSH
76481: FOR_TO
76482: IFFALSE 76529
// begin hc_class = 13 ;
76484: LD_ADDR_OWVAR 28
76488: PUSH
76489: LD_INT 13
76491: ST_TO_ADDR
// hc_gallery =  ;
76492: LD_ADDR_OWVAR 33
76496: PUSH
76497: LD_STRING 
76499: ST_TO_ADDR
// animal := CreateHuman ;
76500: LD_ADDR_VAR 0 12
76504: PUSH
76505: CALL_OW 44
76509: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76510: LD_VAR 0 12
76514: PPUSH
76515: LD_VAR 0 8
76519: PPUSH
76520: LD_INT 0
76522: PPUSH
76523: CALL 78245 0 3
// end ;
76527: GO 76481
76529: POP
76530: POP
// if fishes then
76531: LD_VAR 0 7
76535: IFFALSE 76602
// for i = 1 to fishes do
76537: LD_ADDR_VAR 0 11
76541: PUSH
76542: DOUBLE
76543: LD_INT 1
76545: DEC
76546: ST_TO_ADDR
76547: LD_VAR 0 7
76551: PUSH
76552: FOR_TO
76553: IFFALSE 76600
// begin hc_class = 20 ;
76555: LD_ADDR_OWVAR 28
76559: PUSH
76560: LD_INT 20
76562: ST_TO_ADDR
// hc_gallery =  ;
76563: LD_ADDR_OWVAR 33
76567: PUSH
76568: LD_STRING 
76570: ST_TO_ADDR
// animal := CreateHuman ;
76571: LD_ADDR_VAR 0 12
76575: PUSH
76576: CALL_OW 44
76580: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76581: LD_VAR 0 12
76585: PPUSH
76586: LD_VAR 0 9
76590: PPUSH
76591: LD_INT 0
76593: PPUSH
76594: CALL 78245 0 3
// end ;
76598: GO 76552
76600: POP
76601: POP
// end ;
76602: LD_VAR 0 10
76606: RET
// export function WantHeal ( sci , unit ) ; begin
76607: LD_INT 0
76609: PPUSH
// if GetTaskList ( sci ) > 0 then
76610: LD_VAR 0 1
76614: PPUSH
76615: CALL_OW 437
76619: PUSH
76620: LD_INT 0
76622: GREATER
76623: IFFALSE 76695
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76625: LD_VAR 0 1
76629: PPUSH
76630: CALL_OW 437
76634: PUSH
76635: LD_INT 1
76637: ARRAY
76638: PUSH
76639: LD_INT 1
76641: ARRAY
76642: PUSH
76643: LD_STRING l
76645: EQUAL
76646: IFFALSE 76673
76648: PUSH
76649: LD_VAR 0 1
76653: PPUSH
76654: CALL_OW 437
76658: PUSH
76659: LD_INT 1
76661: ARRAY
76662: PUSH
76663: LD_INT 4
76665: ARRAY
76666: PUSH
76667: LD_VAR 0 2
76671: EQUAL
76672: AND
76673: IFFALSE 76685
// result := true else
76675: LD_ADDR_VAR 0 3
76679: PUSH
76680: LD_INT 1
76682: ST_TO_ADDR
76683: GO 76693
// result := false ;
76685: LD_ADDR_VAR 0 3
76689: PUSH
76690: LD_INT 0
76692: ST_TO_ADDR
// end else
76693: GO 76703
// result := false ;
76695: LD_ADDR_VAR 0 3
76699: PUSH
76700: LD_INT 0
76702: ST_TO_ADDR
// end ;
76703: LD_VAR 0 3
76707: RET
// export function HealTarget ( sci ) ; begin
76708: LD_INT 0
76710: PPUSH
// if not sci then
76711: LD_VAR 0 1
76715: NOT
76716: IFFALSE 76720
// exit ;
76718: GO 76785
// result := 0 ;
76720: LD_ADDR_VAR 0 2
76724: PUSH
76725: LD_INT 0
76727: ST_TO_ADDR
// if GetTaskList ( sci ) then
76728: LD_VAR 0 1
76732: PPUSH
76733: CALL_OW 437
76737: IFFALSE 76785
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76739: LD_VAR 0 1
76743: PPUSH
76744: CALL_OW 437
76748: PUSH
76749: LD_INT 1
76751: ARRAY
76752: PUSH
76753: LD_INT 1
76755: ARRAY
76756: PUSH
76757: LD_STRING l
76759: EQUAL
76760: IFFALSE 76785
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76762: LD_ADDR_VAR 0 2
76766: PUSH
76767: LD_VAR 0 1
76771: PPUSH
76772: CALL_OW 437
76776: PUSH
76777: LD_INT 1
76779: ARRAY
76780: PUSH
76781: LD_INT 4
76783: ARRAY
76784: ST_TO_ADDR
// end ;
76785: LD_VAR 0 2
76789: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76790: LD_INT 0
76792: PPUSH
76793: PPUSH
76794: PPUSH
76795: PPUSH
// if not base_units then
76796: LD_VAR 0 1
76800: NOT
76801: IFFALSE 76805
// exit ;
76803: GO 76892
// result := false ;
76805: LD_ADDR_VAR 0 2
76809: PUSH
76810: LD_INT 0
76812: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76813: LD_ADDR_VAR 0 5
76817: PUSH
76818: LD_VAR 0 1
76822: PPUSH
76823: LD_INT 21
76825: PUSH
76826: LD_INT 3
76828: PUSH
76829: EMPTY
76830: LIST
76831: LIST
76832: PPUSH
76833: CALL_OW 72
76837: ST_TO_ADDR
// if not tmp then
76838: LD_VAR 0 5
76842: NOT
76843: IFFALSE 76847
// exit ;
76845: GO 76892
// for i in tmp do
76847: LD_ADDR_VAR 0 3
76851: PUSH
76852: LD_VAR 0 5
76856: PUSH
76857: FOR_IN
76858: IFFALSE 76890
// begin result := EnemyInRange ( i , 22 ) ;
76860: LD_ADDR_VAR 0 2
76864: PUSH
76865: LD_VAR 0 3
76869: PPUSH
76870: LD_INT 22
76872: PPUSH
76873: CALL 74317 0 2
76877: ST_TO_ADDR
// if result then
76878: LD_VAR 0 2
76882: IFFALSE 76888
// exit ;
76884: POP
76885: POP
76886: GO 76892
// end ;
76888: GO 76857
76890: POP
76891: POP
// end ;
76892: LD_VAR 0 2
76896: RET
// export function FilterByTag ( units , tag ) ; begin
76897: LD_INT 0
76899: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76900: LD_ADDR_VAR 0 3
76904: PUSH
76905: LD_VAR 0 1
76909: PPUSH
76910: LD_INT 120
76912: PUSH
76913: LD_VAR 0 2
76917: PUSH
76918: EMPTY
76919: LIST
76920: LIST
76921: PPUSH
76922: CALL_OW 72
76926: ST_TO_ADDR
// end ;
76927: LD_VAR 0 3
76931: RET
// export function IsDriver ( un ) ; begin
76932: LD_INT 0
76934: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76935: LD_ADDR_VAR 0 2
76939: PUSH
76940: LD_VAR 0 1
76944: PUSH
76945: LD_INT 55
76947: PUSH
76948: EMPTY
76949: LIST
76950: PPUSH
76951: CALL_OW 69
76955: IN
76956: ST_TO_ADDR
// end ;
76957: LD_VAR 0 2
76961: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76962: LD_INT 0
76964: PPUSH
76965: PPUSH
// list := [ ] ;
76966: LD_ADDR_VAR 0 5
76970: PUSH
76971: EMPTY
76972: ST_TO_ADDR
// case d of 0 :
76973: LD_VAR 0 3
76977: PUSH
76978: LD_INT 0
76980: DOUBLE
76981: EQUAL
76982: IFTRUE 76986
76984: GO 77119
76986: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76987: LD_ADDR_VAR 0 5
76991: PUSH
76992: LD_VAR 0 1
76996: PUSH
76997: LD_INT 4
76999: MINUS
77000: PUSH
77001: LD_VAR 0 2
77005: PUSH
77006: LD_INT 4
77008: MINUS
77009: PUSH
77010: LD_INT 2
77012: PUSH
77013: EMPTY
77014: LIST
77015: LIST
77016: LIST
77017: PUSH
77018: LD_VAR 0 1
77022: PUSH
77023: LD_INT 3
77025: MINUS
77026: PUSH
77027: LD_VAR 0 2
77031: PUSH
77032: LD_INT 1
77034: PUSH
77035: EMPTY
77036: LIST
77037: LIST
77038: LIST
77039: PUSH
77040: LD_VAR 0 1
77044: PUSH
77045: LD_INT 4
77047: PLUS
77048: PUSH
77049: LD_VAR 0 2
77053: PUSH
77054: LD_INT 4
77056: PUSH
77057: EMPTY
77058: LIST
77059: LIST
77060: LIST
77061: PUSH
77062: LD_VAR 0 1
77066: PUSH
77067: LD_INT 3
77069: PLUS
77070: PUSH
77071: LD_VAR 0 2
77075: PUSH
77076: LD_INT 3
77078: PLUS
77079: PUSH
77080: LD_INT 5
77082: PUSH
77083: EMPTY
77084: LIST
77085: LIST
77086: LIST
77087: PUSH
77088: LD_VAR 0 1
77092: PUSH
77093: LD_VAR 0 2
77097: PUSH
77098: LD_INT 4
77100: PLUS
77101: PUSH
77102: LD_INT 0
77104: PUSH
77105: EMPTY
77106: LIST
77107: LIST
77108: LIST
77109: PUSH
77110: EMPTY
77111: LIST
77112: LIST
77113: LIST
77114: LIST
77115: LIST
77116: ST_TO_ADDR
// end ; 1 :
77117: GO 77817
77119: LD_INT 1
77121: DOUBLE
77122: EQUAL
77123: IFTRUE 77127
77125: GO 77260
77127: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77128: LD_ADDR_VAR 0 5
77132: PUSH
77133: LD_VAR 0 1
77137: PUSH
77138: LD_VAR 0 2
77142: PUSH
77143: LD_INT 4
77145: MINUS
77146: PUSH
77147: LD_INT 3
77149: PUSH
77150: EMPTY
77151: LIST
77152: LIST
77153: LIST
77154: PUSH
77155: LD_VAR 0 1
77159: PUSH
77160: LD_INT 3
77162: MINUS
77163: PUSH
77164: LD_VAR 0 2
77168: PUSH
77169: LD_INT 3
77171: MINUS
77172: PUSH
77173: LD_INT 2
77175: PUSH
77176: EMPTY
77177: LIST
77178: LIST
77179: LIST
77180: PUSH
77181: LD_VAR 0 1
77185: PUSH
77186: LD_INT 4
77188: MINUS
77189: PUSH
77190: LD_VAR 0 2
77194: PUSH
77195: LD_INT 1
77197: PUSH
77198: EMPTY
77199: LIST
77200: LIST
77201: LIST
77202: PUSH
77203: LD_VAR 0 1
77207: PUSH
77208: LD_VAR 0 2
77212: PUSH
77213: LD_INT 3
77215: PLUS
77216: PUSH
77217: LD_INT 0
77219: PUSH
77220: EMPTY
77221: LIST
77222: LIST
77223: LIST
77224: PUSH
77225: LD_VAR 0 1
77229: PUSH
77230: LD_INT 4
77232: PLUS
77233: PUSH
77234: LD_VAR 0 2
77238: PUSH
77239: LD_INT 4
77241: PLUS
77242: PUSH
77243: LD_INT 5
77245: PUSH
77246: EMPTY
77247: LIST
77248: LIST
77249: LIST
77250: PUSH
77251: EMPTY
77252: LIST
77253: LIST
77254: LIST
77255: LIST
77256: LIST
77257: ST_TO_ADDR
// end ; 2 :
77258: GO 77817
77260: LD_INT 2
77262: DOUBLE
77263: EQUAL
77264: IFTRUE 77268
77266: GO 77397
77268: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77269: LD_ADDR_VAR 0 5
77273: PUSH
77274: LD_VAR 0 1
77278: PUSH
77279: LD_VAR 0 2
77283: PUSH
77284: LD_INT 3
77286: MINUS
77287: PUSH
77288: LD_INT 3
77290: PUSH
77291: EMPTY
77292: LIST
77293: LIST
77294: LIST
77295: PUSH
77296: LD_VAR 0 1
77300: PUSH
77301: LD_INT 4
77303: PLUS
77304: PUSH
77305: LD_VAR 0 2
77309: PUSH
77310: LD_INT 4
77312: PUSH
77313: EMPTY
77314: LIST
77315: LIST
77316: LIST
77317: PUSH
77318: LD_VAR 0 1
77322: PUSH
77323: LD_VAR 0 2
77327: PUSH
77328: LD_INT 4
77330: PLUS
77331: PUSH
77332: LD_INT 0
77334: PUSH
77335: EMPTY
77336: LIST
77337: LIST
77338: LIST
77339: PUSH
77340: LD_VAR 0 1
77344: PUSH
77345: LD_INT 3
77347: MINUS
77348: PUSH
77349: LD_VAR 0 2
77353: PUSH
77354: LD_INT 1
77356: PUSH
77357: EMPTY
77358: LIST
77359: LIST
77360: LIST
77361: PUSH
77362: LD_VAR 0 1
77366: PUSH
77367: LD_INT 4
77369: MINUS
77370: PUSH
77371: LD_VAR 0 2
77375: PUSH
77376: LD_INT 4
77378: MINUS
77379: PUSH
77380: LD_INT 2
77382: PUSH
77383: EMPTY
77384: LIST
77385: LIST
77386: LIST
77387: PUSH
77388: EMPTY
77389: LIST
77390: LIST
77391: LIST
77392: LIST
77393: LIST
77394: ST_TO_ADDR
// end ; 3 :
77395: GO 77817
77397: LD_INT 3
77399: DOUBLE
77400: EQUAL
77401: IFTRUE 77405
77403: GO 77538
77405: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77406: LD_ADDR_VAR 0 5
77410: PUSH
77411: LD_VAR 0 1
77415: PUSH
77416: LD_INT 3
77418: PLUS
77419: PUSH
77420: LD_VAR 0 2
77424: PUSH
77425: LD_INT 4
77427: PUSH
77428: EMPTY
77429: LIST
77430: LIST
77431: LIST
77432: PUSH
77433: LD_VAR 0 1
77437: PUSH
77438: LD_INT 4
77440: PLUS
77441: PUSH
77442: LD_VAR 0 2
77446: PUSH
77447: LD_INT 4
77449: PLUS
77450: PUSH
77451: LD_INT 5
77453: PUSH
77454: EMPTY
77455: LIST
77456: LIST
77457: LIST
77458: PUSH
77459: LD_VAR 0 1
77463: PUSH
77464: LD_INT 4
77466: MINUS
77467: PUSH
77468: LD_VAR 0 2
77472: PUSH
77473: LD_INT 1
77475: PUSH
77476: EMPTY
77477: LIST
77478: LIST
77479: LIST
77480: PUSH
77481: LD_VAR 0 1
77485: PUSH
77486: LD_VAR 0 2
77490: PUSH
77491: LD_INT 4
77493: MINUS
77494: PUSH
77495: LD_INT 3
77497: PUSH
77498: EMPTY
77499: LIST
77500: LIST
77501: LIST
77502: PUSH
77503: LD_VAR 0 1
77507: PUSH
77508: LD_INT 3
77510: MINUS
77511: PUSH
77512: LD_VAR 0 2
77516: PUSH
77517: LD_INT 3
77519: MINUS
77520: PUSH
77521: LD_INT 2
77523: PUSH
77524: EMPTY
77525: LIST
77526: LIST
77527: LIST
77528: PUSH
77529: EMPTY
77530: LIST
77531: LIST
77532: LIST
77533: LIST
77534: LIST
77535: ST_TO_ADDR
// end ; 4 :
77536: GO 77817
77538: LD_INT 4
77540: DOUBLE
77541: EQUAL
77542: IFTRUE 77546
77544: GO 77679
77546: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77547: LD_ADDR_VAR 0 5
77551: PUSH
77552: LD_VAR 0 1
77556: PUSH
77557: LD_VAR 0 2
77561: PUSH
77562: LD_INT 4
77564: PLUS
77565: PUSH
77566: LD_INT 0
77568: PUSH
77569: EMPTY
77570: LIST
77571: LIST
77572: LIST
77573: PUSH
77574: LD_VAR 0 1
77578: PUSH
77579: LD_INT 3
77581: PLUS
77582: PUSH
77583: LD_VAR 0 2
77587: PUSH
77588: LD_INT 3
77590: PLUS
77591: PUSH
77592: LD_INT 5
77594: PUSH
77595: EMPTY
77596: LIST
77597: LIST
77598: LIST
77599: PUSH
77600: LD_VAR 0 1
77604: PUSH
77605: LD_INT 4
77607: PLUS
77608: PUSH
77609: LD_VAR 0 2
77613: PUSH
77614: LD_INT 4
77616: PUSH
77617: EMPTY
77618: LIST
77619: LIST
77620: LIST
77621: PUSH
77622: LD_VAR 0 1
77626: PUSH
77627: LD_VAR 0 2
77631: PUSH
77632: LD_INT 3
77634: MINUS
77635: PUSH
77636: LD_INT 3
77638: PUSH
77639: EMPTY
77640: LIST
77641: LIST
77642: LIST
77643: PUSH
77644: LD_VAR 0 1
77648: PUSH
77649: LD_INT 4
77651: MINUS
77652: PUSH
77653: LD_VAR 0 2
77657: PUSH
77658: LD_INT 4
77660: MINUS
77661: PUSH
77662: LD_INT 2
77664: PUSH
77665: EMPTY
77666: LIST
77667: LIST
77668: LIST
77669: PUSH
77670: EMPTY
77671: LIST
77672: LIST
77673: LIST
77674: LIST
77675: LIST
77676: ST_TO_ADDR
// end ; 5 :
77677: GO 77817
77679: LD_INT 5
77681: DOUBLE
77682: EQUAL
77683: IFTRUE 77687
77685: GO 77816
77687: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77688: LD_ADDR_VAR 0 5
77692: PUSH
77693: LD_VAR 0 1
77697: PUSH
77698: LD_INT 4
77700: MINUS
77701: PUSH
77702: LD_VAR 0 2
77706: PUSH
77707: LD_INT 1
77709: PUSH
77710: EMPTY
77711: LIST
77712: LIST
77713: LIST
77714: PUSH
77715: LD_VAR 0 1
77719: PUSH
77720: LD_VAR 0 2
77724: PUSH
77725: LD_INT 4
77727: MINUS
77728: PUSH
77729: LD_INT 3
77731: PUSH
77732: EMPTY
77733: LIST
77734: LIST
77735: LIST
77736: PUSH
77737: LD_VAR 0 1
77741: PUSH
77742: LD_INT 4
77744: PLUS
77745: PUSH
77746: LD_VAR 0 2
77750: PUSH
77751: LD_INT 4
77753: PLUS
77754: PUSH
77755: LD_INT 5
77757: PUSH
77758: EMPTY
77759: LIST
77760: LIST
77761: LIST
77762: PUSH
77763: LD_VAR 0 1
77767: PUSH
77768: LD_INT 3
77770: PLUS
77771: PUSH
77772: LD_VAR 0 2
77776: PUSH
77777: LD_INT 4
77779: PUSH
77780: EMPTY
77781: LIST
77782: LIST
77783: LIST
77784: PUSH
77785: LD_VAR 0 1
77789: PUSH
77790: LD_VAR 0 2
77794: PUSH
77795: LD_INT 3
77797: PLUS
77798: PUSH
77799: LD_INT 0
77801: PUSH
77802: EMPTY
77803: LIST
77804: LIST
77805: LIST
77806: PUSH
77807: EMPTY
77808: LIST
77809: LIST
77810: LIST
77811: LIST
77812: LIST
77813: ST_TO_ADDR
// end ; end ;
77814: GO 77817
77816: POP
// result := list ;
77817: LD_ADDR_VAR 0 4
77821: PUSH
77822: LD_VAR 0 5
77826: ST_TO_ADDR
// end ;
77827: LD_VAR 0 4
77831: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77832: LD_INT 0
77834: PPUSH
77835: PPUSH
77836: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77837: LD_VAR 0 1
77841: NOT
77842: IFTRUE 77870
77844: PUSH
77845: LD_VAR 0 2
77849: PUSH
77850: LD_INT 1
77852: PUSH
77853: LD_INT 2
77855: PUSH
77856: LD_INT 3
77858: PUSH
77859: LD_INT 4
77861: PUSH
77862: EMPTY
77863: LIST
77864: LIST
77865: LIST
77866: LIST
77867: IN
77868: NOT
77869: OR
77870: IFFALSE 77874
// exit ;
77872: GO 77957
// tmp := [ ] ;
77874: LD_ADDR_VAR 0 5
77878: PUSH
77879: EMPTY
77880: ST_TO_ADDR
// for i in units do
77881: LD_ADDR_VAR 0 4
77885: PUSH
77886: LD_VAR 0 1
77890: PUSH
77891: FOR_IN
77892: IFFALSE 77926
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77894: LD_ADDR_VAR 0 5
77898: PUSH
77899: LD_VAR 0 5
77903: PPUSH
77904: LD_VAR 0 4
77908: PPUSH
77909: LD_VAR 0 2
77913: PPUSH
77914: CALL_OW 259
77918: PPUSH
77919: CALL 79352 0 2
77923: ST_TO_ADDR
77924: GO 77891
77926: POP
77927: POP
// if not tmp then
77928: LD_VAR 0 5
77932: NOT
77933: IFFALSE 77937
// exit ;
77935: GO 77957
// result := SortListByListDesc ( units , tmp ) ;
77937: LD_ADDR_VAR 0 3
77941: PUSH
77942: LD_VAR 0 1
77946: PPUSH
77947: LD_VAR 0 5
77951: PPUSH
77952: CALL_OW 77
77956: ST_TO_ADDR
// end ;
77957: LD_VAR 0 3
77961: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77962: LD_INT 0
77964: PPUSH
77965: PPUSH
77966: PPUSH
// result := false ;
77967: LD_ADDR_VAR 0 3
77971: PUSH
77972: LD_INT 0
77974: ST_TO_ADDR
// if not building then
77975: LD_VAR 0 2
77979: NOT
77980: IFFALSE 77984
// exit ;
77982: GO 78128
// x := GetX ( building ) ;
77984: LD_ADDR_VAR 0 4
77988: PUSH
77989: LD_VAR 0 2
77993: PPUSH
77994: CALL_OW 250
77998: ST_TO_ADDR
// y := GetY ( building ) ;
77999: LD_ADDR_VAR 0 5
78003: PUSH
78004: LD_VAR 0 2
78008: PPUSH
78009: CALL_OW 251
78013: ST_TO_ADDR
// if not x or not y then
78014: LD_VAR 0 4
78018: NOT
78019: IFTRUE 78028
78021: PUSH
78022: LD_VAR 0 5
78026: NOT
78027: OR
78028: IFFALSE 78032
// exit ;
78030: GO 78128
// if GetTaskList ( unit ) then
78032: LD_VAR 0 1
78036: PPUSH
78037: CALL_OW 437
78041: IFFALSE 78128
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78043: LD_STRING e
78045: PUSH
78046: LD_VAR 0 1
78050: PPUSH
78051: CALL_OW 437
78055: PUSH
78056: LD_INT 1
78058: ARRAY
78059: PUSH
78060: LD_INT 1
78062: ARRAY
78063: EQUAL
78064: IFFALSE 78091
78066: PUSH
78067: LD_VAR 0 4
78071: PUSH
78072: LD_VAR 0 1
78076: PPUSH
78077: CALL_OW 437
78081: PUSH
78082: LD_INT 1
78084: ARRAY
78085: PUSH
78086: LD_INT 2
78088: ARRAY
78089: EQUAL
78090: AND
78091: IFFALSE 78118
78093: PUSH
78094: LD_VAR 0 5
78098: PUSH
78099: LD_VAR 0 1
78103: PPUSH
78104: CALL_OW 437
78108: PUSH
78109: LD_INT 1
78111: ARRAY
78112: PUSH
78113: LD_INT 3
78115: ARRAY
78116: EQUAL
78117: AND
78118: IFFALSE 78128
// result := true end ;
78120: LD_ADDR_VAR 0 3
78124: PUSH
78125: LD_INT 1
78127: ST_TO_ADDR
// end ;
78128: LD_VAR 0 3
78132: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78133: LD_INT 0
78135: PPUSH
// result := false ;
78136: LD_ADDR_VAR 0 4
78140: PUSH
78141: LD_INT 0
78143: ST_TO_ADDR
// if GetTaskList ( unit ) then
78144: LD_VAR 0 1
78148: PPUSH
78149: CALL_OW 437
78153: IFFALSE 78240
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78155: LD_STRING M
78157: PUSH
78158: LD_VAR 0 1
78162: PPUSH
78163: CALL_OW 437
78167: PUSH
78168: LD_INT 1
78170: ARRAY
78171: PUSH
78172: LD_INT 1
78174: ARRAY
78175: EQUAL
78176: IFFALSE 78203
78178: PUSH
78179: LD_VAR 0 2
78183: PUSH
78184: LD_VAR 0 1
78188: PPUSH
78189: CALL_OW 437
78193: PUSH
78194: LD_INT 1
78196: ARRAY
78197: PUSH
78198: LD_INT 2
78200: ARRAY
78201: EQUAL
78202: AND
78203: IFFALSE 78230
78205: PUSH
78206: LD_VAR 0 3
78210: PUSH
78211: LD_VAR 0 1
78215: PPUSH
78216: CALL_OW 437
78220: PUSH
78221: LD_INT 1
78223: ARRAY
78224: PUSH
78225: LD_INT 3
78227: ARRAY
78228: EQUAL
78229: AND
78230: IFFALSE 78240
// result := true ;
78232: LD_ADDR_VAR 0 4
78236: PUSH
78237: LD_INT 1
78239: ST_TO_ADDR
// end ; end ;
78240: LD_VAR 0 4
78244: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78245: LD_INT 0
78247: PPUSH
78248: PPUSH
78249: PPUSH
78250: PPUSH
// if not unit or not area then
78251: LD_VAR 0 1
78255: NOT
78256: IFTRUE 78265
78258: PUSH
78259: LD_VAR 0 2
78263: NOT
78264: OR
78265: IFFALSE 78269
// exit ;
78267: GO 78445
// tmp := AreaToList ( area , i ) ;
78269: LD_ADDR_VAR 0 6
78273: PUSH
78274: LD_VAR 0 2
78278: PPUSH
78279: LD_VAR 0 5
78283: PPUSH
78284: CALL_OW 517
78288: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78289: LD_ADDR_VAR 0 5
78293: PUSH
78294: DOUBLE
78295: LD_INT 1
78297: DEC
78298: ST_TO_ADDR
78299: LD_VAR 0 6
78303: PUSH
78304: LD_INT 1
78306: ARRAY
78307: PUSH
78308: FOR_TO
78309: IFFALSE 78443
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78311: LD_ADDR_VAR 0 7
78315: PUSH
78316: LD_VAR 0 6
78320: PUSH
78321: LD_INT 1
78323: ARRAY
78324: PUSH
78325: LD_VAR 0 5
78329: ARRAY
78330: PUSH
78331: LD_VAR 0 6
78335: PUSH
78336: LD_INT 2
78338: ARRAY
78339: PUSH
78340: LD_VAR 0 5
78344: ARRAY
78345: PUSH
78346: EMPTY
78347: LIST
78348: LIST
78349: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78350: LD_INT 92
78352: PUSH
78353: LD_VAR 0 7
78357: PUSH
78358: LD_INT 1
78360: ARRAY
78361: PUSH
78362: LD_VAR 0 7
78366: PUSH
78367: LD_INT 2
78369: ARRAY
78370: PUSH
78371: LD_INT 2
78373: PUSH
78374: EMPTY
78375: LIST
78376: LIST
78377: LIST
78378: LIST
78379: PPUSH
78380: CALL_OW 69
78384: PUSH
78385: LD_INT 0
78387: EQUAL
78388: IFFALSE 78441
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78390: LD_VAR 0 1
78394: PPUSH
78395: LD_VAR 0 7
78399: PUSH
78400: LD_INT 1
78402: ARRAY
78403: PPUSH
78404: LD_VAR 0 7
78408: PUSH
78409: LD_INT 2
78411: ARRAY
78412: PPUSH
78413: LD_VAR 0 3
78417: PPUSH
78418: CALL_OW 48
// result := IsPlaced ( unit ) ;
78422: LD_ADDR_VAR 0 4
78426: PUSH
78427: LD_VAR 0 1
78431: PPUSH
78432: CALL_OW 305
78436: ST_TO_ADDR
// exit ;
78437: POP
78438: POP
78439: GO 78445
// end ; end ;
78441: GO 78308
78443: POP
78444: POP
// end ;
78445: LD_VAR 0 4
78449: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78450: LD_INT 0
78452: PPUSH
78453: PPUSH
78454: PPUSH
// if not side or side > 8 then
78455: LD_VAR 0 1
78459: NOT
78460: IFTRUE 78472
78462: PUSH
78463: LD_VAR 0 1
78467: PUSH
78468: LD_INT 8
78470: GREATER
78471: OR
78472: IFFALSE 78476
// exit ;
78474: GO 78663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78476: LD_ADDR_VAR 0 4
78480: PUSH
78481: LD_INT 22
78483: PUSH
78484: LD_VAR 0 1
78488: PUSH
78489: EMPTY
78490: LIST
78491: LIST
78492: PUSH
78493: LD_INT 21
78495: PUSH
78496: LD_INT 3
78498: PUSH
78499: EMPTY
78500: LIST
78501: LIST
78502: PUSH
78503: EMPTY
78504: LIST
78505: LIST
78506: PPUSH
78507: CALL_OW 69
78511: ST_TO_ADDR
// if not tmp then
78512: LD_VAR 0 4
78516: NOT
78517: IFFALSE 78521
// exit ;
78519: GO 78663
// enable_addtolog := true ;
78521: LD_ADDR_OWVAR 81
78525: PUSH
78526: LD_INT 1
78528: ST_TO_ADDR
// AddToLog ( [ ) ;
78529: LD_STRING [
78531: PPUSH
78532: CALL_OW 561
// for i in tmp do
78536: LD_ADDR_VAR 0 3
78540: PUSH
78541: LD_VAR 0 4
78545: PUSH
78546: FOR_IN
78547: IFFALSE 78654
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78549: LD_STRING [
78551: PUSH
78552: LD_VAR 0 3
78556: PPUSH
78557: CALL_OW 266
78561: STR
78562: PUSH
78563: LD_STRING , 
78565: STR
78566: PUSH
78567: LD_VAR 0 3
78571: PPUSH
78572: CALL_OW 250
78576: STR
78577: PUSH
78578: LD_STRING , 
78580: STR
78581: PUSH
78582: LD_VAR 0 3
78586: PPUSH
78587: CALL_OW 251
78591: STR
78592: PUSH
78593: LD_STRING , 
78595: STR
78596: PUSH
78597: LD_VAR 0 3
78601: PPUSH
78602: CALL_OW 254
78606: STR
78607: PUSH
78608: LD_STRING , 
78610: STR
78611: PUSH
78612: LD_VAR 0 3
78616: PPUSH
78617: LD_INT 1
78619: PPUSH
78620: CALL_OW 268
78624: STR
78625: PUSH
78626: LD_STRING , 
78628: STR
78629: PUSH
78630: LD_VAR 0 3
78634: PPUSH
78635: LD_INT 2
78637: PPUSH
78638: CALL_OW 268
78642: STR
78643: PUSH
78644: LD_STRING ],
78646: STR
78647: PPUSH
78648: CALL_OW 561
// end ;
78652: GO 78546
78654: POP
78655: POP
// AddToLog ( ]; ) ;
78656: LD_STRING ];
78658: PPUSH
78659: CALL_OW 561
// end ;
78663: LD_VAR 0 2
78667: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78668: LD_INT 0
78670: PPUSH
78671: PPUSH
78672: PPUSH
78673: PPUSH
78674: PPUSH
// if not area or not rate or not max then
78675: LD_VAR 0 1
78679: NOT
78680: IFTRUE 78689
78682: PUSH
78683: LD_VAR 0 2
78687: NOT
78688: OR
78689: IFTRUE 78698
78691: PUSH
78692: LD_VAR 0 4
78696: NOT
78697: OR
78698: IFFALSE 78702
// exit ;
78700: GO 78891
// while 1 do
78702: LD_INT 1
78704: IFFALSE 78891
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78706: LD_ADDR_VAR 0 9
78710: PUSH
78711: LD_VAR 0 1
78715: PPUSH
78716: LD_INT 1
78718: PPUSH
78719: CALL_OW 287
78723: PUSH
78724: LD_INT 10
78726: MUL
78727: ST_TO_ADDR
// r := rate / 10 ;
78728: LD_ADDR_VAR 0 7
78732: PUSH
78733: LD_VAR 0 2
78737: PUSH
78738: LD_INT 10
78740: DIVREAL
78741: ST_TO_ADDR
// time := 1 1$00 ;
78742: LD_ADDR_VAR 0 8
78746: PUSH
78747: LD_INT 2100
78749: ST_TO_ADDR
// if amount < min then
78750: LD_VAR 0 9
78754: PUSH
78755: LD_VAR 0 3
78759: LESS
78760: IFFALSE 78778
// r := r * 2 else
78762: LD_ADDR_VAR 0 7
78766: PUSH
78767: LD_VAR 0 7
78771: PUSH
78772: LD_INT 2
78774: MUL
78775: ST_TO_ADDR
78776: GO 78804
// if amount > max then
78778: LD_VAR 0 9
78782: PUSH
78783: LD_VAR 0 4
78787: GREATER
78788: IFFALSE 78804
// r := r / 2 ;
78790: LD_ADDR_VAR 0 7
78794: PUSH
78795: LD_VAR 0 7
78799: PUSH
78800: LD_INT 2
78802: DIVREAL
78803: ST_TO_ADDR
// time := time / r ;
78804: LD_ADDR_VAR 0 8
78808: PUSH
78809: LD_VAR 0 8
78813: PUSH
78814: LD_VAR 0 7
78818: DIVREAL
78819: ST_TO_ADDR
// if time < 0 then
78820: LD_VAR 0 8
78824: PUSH
78825: LD_INT 0
78827: LESS
78828: IFFALSE 78845
// time := time * - 1 ;
78830: LD_ADDR_VAR 0 8
78834: PUSH
78835: LD_VAR 0 8
78839: PUSH
78840: LD_INT 1
78842: NEG
78843: MUL
78844: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78845: LD_VAR 0 8
78849: PUSH
78850: LD_INT 35
78852: PPUSH
78853: LD_INT 875
78855: PPUSH
78856: CALL_OW 12
78860: PLUS
78861: PPUSH
78862: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78866: LD_INT 1
78868: PPUSH
78869: LD_INT 5
78871: PPUSH
78872: CALL_OW 12
78876: PPUSH
78877: LD_VAR 0 1
78881: PPUSH
78882: LD_INT 1
78884: PPUSH
78885: CALL_OW 55
// end ;
78889: GO 78702
// end ;
78891: LD_VAR 0 5
78895: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78896: LD_INT 0
78898: PPUSH
78899: PPUSH
78900: PPUSH
78901: PPUSH
78902: PPUSH
78903: PPUSH
78904: PPUSH
78905: PPUSH
// if not turrets or not factories then
78906: LD_VAR 0 1
78910: NOT
78911: IFTRUE 78920
78913: PUSH
78914: LD_VAR 0 2
78918: NOT
78919: OR
78920: IFFALSE 78924
// exit ;
78922: GO 79231
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78924: LD_ADDR_VAR 0 10
78928: PUSH
78929: LD_INT 5
78931: PUSH
78932: LD_INT 6
78934: PUSH
78935: EMPTY
78936: LIST
78937: LIST
78938: PUSH
78939: LD_INT 2
78941: PUSH
78942: LD_INT 4
78944: PUSH
78945: EMPTY
78946: LIST
78947: LIST
78948: PUSH
78949: LD_INT 3
78951: PUSH
78952: LD_INT 5
78954: PUSH
78955: EMPTY
78956: LIST
78957: LIST
78958: PUSH
78959: EMPTY
78960: LIST
78961: LIST
78962: LIST
78963: PUSH
78964: LD_INT 24
78966: PUSH
78967: LD_INT 25
78969: PUSH
78970: EMPTY
78971: LIST
78972: LIST
78973: PUSH
78974: LD_INT 23
78976: PUSH
78977: LD_INT 27
78979: PUSH
78980: EMPTY
78981: LIST
78982: LIST
78983: PUSH
78984: EMPTY
78985: LIST
78986: LIST
78987: PUSH
78988: LD_INT 42
78990: PUSH
78991: LD_INT 43
78993: PUSH
78994: EMPTY
78995: LIST
78996: LIST
78997: PUSH
78998: LD_INT 44
79000: PUSH
79001: LD_INT 46
79003: PUSH
79004: EMPTY
79005: LIST
79006: LIST
79007: PUSH
79008: LD_INT 45
79010: PUSH
79011: LD_INT 47
79013: PUSH
79014: EMPTY
79015: LIST
79016: LIST
79017: PUSH
79018: EMPTY
79019: LIST
79020: LIST
79021: LIST
79022: PUSH
79023: EMPTY
79024: LIST
79025: LIST
79026: LIST
79027: ST_TO_ADDR
// result := [ ] ;
79028: LD_ADDR_VAR 0 3
79032: PUSH
79033: EMPTY
79034: ST_TO_ADDR
// for i in turrets do
79035: LD_ADDR_VAR 0 4
79039: PUSH
79040: LD_VAR 0 1
79044: PUSH
79045: FOR_IN
79046: IFFALSE 79229
// begin nat := GetNation ( i ) ;
79048: LD_ADDR_VAR 0 7
79052: PUSH
79053: LD_VAR 0 4
79057: PPUSH
79058: CALL_OW 248
79062: ST_TO_ADDR
// weapon := 0 ;
79063: LD_ADDR_VAR 0 8
79067: PUSH
79068: LD_INT 0
79070: ST_TO_ADDR
// if not nat then
79071: LD_VAR 0 7
79075: NOT
79076: IFFALSE 79080
// continue ;
79078: GO 79045
// for j in list [ nat ] do
79080: LD_ADDR_VAR 0 5
79084: PUSH
79085: LD_VAR 0 10
79089: PUSH
79090: LD_VAR 0 7
79094: ARRAY
79095: PUSH
79096: FOR_IN
79097: IFFALSE 79138
// if GetBWeapon ( i ) = j [ 1 ] then
79099: LD_VAR 0 4
79103: PPUSH
79104: CALL_OW 269
79108: PUSH
79109: LD_VAR 0 5
79113: PUSH
79114: LD_INT 1
79116: ARRAY
79117: EQUAL
79118: IFFALSE 79136
// begin weapon := j [ 2 ] ;
79120: LD_ADDR_VAR 0 8
79124: PUSH
79125: LD_VAR 0 5
79129: PUSH
79130: LD_INT 2
79132: ARRAY
79133: ST_TO_ADDR
// break ;
79134: GO 79138
// end ;
79136: GO 79096
79138: POP
79139: POP
// if not weapon then
79140: LD_VAR 0 8
79144: NOT
79145: IFFALSE 79149
// continue ;
79147: GO 79045
// for k in factories do
79149: LD_ADDR_VAR 0 6
79153: PUSH
79154: LD_VAR 0 2
79158: PUSH
79159: FOR_IN
79160: IFFALSE 79225
// begin weapons := AvailableWeaponList ( k ) ;
79162: LD_ADDR_VAR 0 9
79166: PUSH
79167: LD_VAR 0 6
79171: PPUSH
79172: CALL_OW 478
79176: ST_TO_ADDR
// if not weapons then
79177: LD_VAR 0 9
79181: NOT
79182: IFFALSE 79186
// continue ;
79184: GO 79159
// if weapon in weapons then
79186: LD_VAR 0 8
79190: PUSH
79191: LD_VAR 0 9
79195: IN
79196: IFFALSE 79223
// begin result := [ i , weapon ] ;
79198: LD_ADDR_VAR 0 3
79202: PUSH
79203: LD_VAR 0 4
79207: PUSH
79208: LD_VAR 0 8
79212: PUSH
79213: EMPTY
79214: LIST
79215: LIST
79216: ST_TO_ADDR
// exit ;
79217: POP
79218: POP
79219: POP
79220: POP
79221: GO 79231
// end ; end ;
79223: GO 79159
79225: POP
79226: POP
// end ;
79227: GO 79045
79229: POP
79230: POP
// end ;
79231: LD_VAR 0 3
79235: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79236: LD_INT 0
79238: PPUSH
// if not side or side > 8 then
79239: LD_VAR 0 3
79243: NOT
79244: IFTRUE 79256
79246: PUSH
79247: LD_VAR 0 3
79251: PUSH
79252: LD_INT 8
79254: GREATER
79255: OR
79256: IFFALSE 79260
// exit ;
79258: GO 79319
// if not range then
79260: LD_VAR 0 4
79264: NOT
79265: IFFALSE 79276
// range := - 12 ;
79267: LD_ADDR_VAR 0 4
79271: PUSH
79272: LD_INT 12
79274: NEG
79275: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79276: LD_VAR 0 1
79280: PPUSH
79281: LD_VAR 0 2
79285: PPUSH
79286: LD_VAR 0 3
79290: PPUSH
79291: LD_VAR 0 4
79295: PPUSH
79296: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79300: LD_VAR 0 1
79304: PPUSH
79305: LD_VAR 0 2
79309: PPUSH
79310: LD_VAR 0 3
79314: PPUSH
79315: CALL_OW 331
// end ;
79319: LD_VAR 0 5
79323: RET
// export function Video ( mode ) ; begin
79324: LD_INT 0
79326: PPUSH
// ingame_video = mode ;
79327: LD_ADDR_OWVAR 52
79331: PUSH
79332: LD_VAR 0 1
79336: ST_TO_ADDR
// interface_hidden = mode ;
79337: LD_ADDR_OWVAR 54
79341: PUSH
79342: LD_VAR 0 1
79346: ST_TO_ADDR
// end ;
79347: LD_VAR 0 2
79351: RET
// export function Join ( array , element ) ; begin
79352: LD_INT 0
79354: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79355: LD_ADDR_VAR 0 3
79359: PUSH
79360: LD_VAR 0 1
79364: PPUSH
79365: LD_VAR 0 1
79369: PUSH
79370: LD_INT 1
79372: PLUS
79373: PPUSH
79374: LD_VAR 0 2
79378: PPUSH
79379: CALL_OW 1
79383: ST_TO_ADDR
// end ;
79384: LD_VAR 0 3
79388: RET
// export function JoinUnion ( array , element ) ; begin
79389: LD_INT 0
79391: PPUSH
// result := array union element ;
79392: LD_ADDR_VAR 0 3
79396: PUSH
79397: LD_VAR 0 1
79401: PUSH
79402: LD_VAR 0 2
79406: UNION
79407: ST_TO_ADDR
// end ;
79408: LD_VAR 0 3
79412: RET
// export function GetBehemoths ( side ) ; begin
79413: LD_INT 0
79415: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79416: LD_ADDR_VAR 0 2
79420: PUSH
79421: LD_INT 22
79423: PUSH
79424: LD_VAR 0 1
79428: PUSH
79429: EMPTY
79430: LIST
79431: LIST
79432: PUSH
79433: LD_INT 31
79435: PUSH
79436: LD_INT 25
79438: PUSH
79439: EMPTY
79440: LIST
79441: LIST
79442: PUSH
79443: EMPTY
79444: LIST
79445: LIST
79446: PPUSH
79447: CALL_OW 69
79451: ST_TO_ADDR
// end ;
79452: LD_VAR 0 2
79456: RET
// export function Shuffle ( array ) ; var i , index ; begin
79457: LD_INT 0
79459: PPUSH
79460: PPUSH
79461: PPUSH
// result := [ ] ;
79462: LD_ADDR_VAR 0 2
79466: PUSH
79467: EMPTY
79468: ST_TO_ADDR
// if not array then
79469: LD_VAR 0 1
79473: NOT
79474: IFFALSE 79478
// exit ;
79476: GO 79577
// Randomize ;
79478: CALL_OW 10
// for i = array downto 1 do
79482: LD_ADDR_VAR 0 3
79486: PUSH
79487: DOUBLE
79488: LD_VAR 0 1
79492: INC
79493: ST_TO_ADDR
79494: LD_INT 1
79496: PUSH
79497: FOR_DOWNTO
79498: IFFALSE 79575
// begin index := rand ( 1 , array ) ;
79500: LD_ADDR_VAR 0 4
79504: PUSH
79505: LD_INT 1
79507: PPUSH
79508: LD_VAR 0 1
79512: PPUSH
79513: CALL_OW 12
79517: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79518: LD_ADDR_VAR 0 2
79522: PUSH
79523: LD_VAR 0 2
79527: PPUSH
79528: LD_VAR 0 2
79532: PUSH
79533: LD_INT 1
79535: PLUS
79536: PPUSH
79537: LD_VAR 0 1
79541: PUSH
79542: LD_VAR 0 4
79546: ARRAY
79547: PPUSH
79548: CALL_OW 2
79552: ST_TO_ADDR
// array := Delete ( array , index ) ;
79553: LD_ADDR_VAR 0 1
79557: PUSH
79558: LD_VAR 0 1
79562: PPUSH
79563: LD_VAR 0 4
79567: PPUSH
79568: CALL_OW 3
79572: ST_TO_ADDR
// end ;
79573: GO 79497
79575: POP
79576: POP
// end ;
79577: LD_VAR 0 2
79581: RET
// export function GetBaseMaterials ( base ) ; begin
79582: LD_INT 0
79584: PPUSH
// result := [ 0 , 0 , 0 ] ;
79585: LD_ADDR_VAR 0 2
79589: PUSH
79590: LD_INT 0
79592: PUSH
79593: LD_INT 0
79595: PUSH
79596: LD_INT 0
79598: PUSH
79599: EMPTY
79600: LIST
79601: LIST
79602: LIST
79603: ST_TO_ADDR
// if not base then
79604: LD_VAR 0 1
79608: NOT
79609: IFFALSE 79613
// exit ;
79611: GO 79662
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79613: LD_ADDR_VAR 0 2
79617: PUSH
79618: LD_VAR 0 1
79622: PPUSH
79623: LD_INT 1
79625: PPUSH
79626: CALL_OW 275
79630: PUSH
79631: LD_VAR 0 1
79635: PPUSH
79636: LD_INT 2
79638: PPUSH
79639: CALL_OW 275
79643: PUSH
79644: LD_VAR 0 1
79648: PPUSH
79649: LD_INT 3
79651: PPUSH
79652: CALL_OW 275
79656: PUSH
79657: EMPTY
79658: LIST
79659: LIST
79660: LIST
79661: ST_TO_ADDR
// end ;
79662: LD_VAR 0 2
79666: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79667: LD_INT 0
79669: PPUSH
79670: PPUSH
// result := array ;
79671: LD_ADDR_VAR 0 3
79675: PUSH
79676: LD_VAR 0 1
79680: ST_TO_ADDR
// if size >= result then
79681: LD_VAR 0 2
79685: PUSH
79686: LD_VAR 0 3
79690: GREATEREQUAL
79691: IFFALSE 79695
// exit ;
79693: GO 79745
// if size then
79695: LD_VAR 0 2
79699: IFFALSE 79745
// for i := array downto size do
79701: LD_ADDR_VAR 0 4
79705: PUSH
79706: DOUBLE
79707: LD_VAR 0 1
79711: INC
79712: ST_TO_ADDR
79713: LD_VAR 0 2
79717: PUSH
79718: FOR_DOWNTO
79719: IFFALSE 79743
// result := Delete ( result , result ) ;
79721: LD_ADDR_VAR 0 3
79725: PUSH
79726: LD_VAR 0 3
79730: PPUSH
79731: LD_VAR 0 3
79735: PPUSH
79736: CALL_OW 3
79740: ST_TO_ADDR
79741: GO 79718
79743: POP
79744: POP
// end ;
79745: LD_VAR 0 3
79749: RET
// export function ComExit ( unit ) ; var tmp ; begin
79750: LD_INT 0
79752: PPUSH
79753: PPUSH
// if not IsInUnit ( unit ) then
79754: LD_VAR 0 1
79758: PPUSH
79759: CALL_OW 310
79763: NOT
79764: IFFALSE 79768
// exit ;
79766: GO 79828
// tmp := IsInUnit ( unit ) ;
79768: LD_ADDR_VAR 0 3
79772: PUSH
79773: LD_VAR 0 1
79777: PPUSH
79778: CALL_OW 310
79782: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79783: LD_VAR 0 3
79787: PPUSH
79788: CALL_OW 247
79792: PUSH
79793: LD_INT 2
79795: EQUAL
79796: IFFALSE 79809
// ComExitVehicle ( unit ) else
79798: LD_VAR 0 1
79802: PPUSH
79803: CALL_OW 121
79807: GO 79818
// ComExitBuilding ( unit ) ;
79809: LD_VAR 0 1
79813: PPUSH
79814: CALL_OW 122
// result := tmp ;
79818: LD_ADDR_VAR 0 2
79822: PUSH
79823: LD_VAR 0 3
79827: ST_TO_ADDR
// end ;
79828: LD_VAR 0 2
79832: RET
// export function ComExitAll ( units ) ; var i ; begin
79833: LD_INT 0
79835: PPUSH
79836: PPUSH
// if not units then
79837: LD_VAR 0 1
79841: NOT
79842: IFFALSE 79846
// exit ;
79844: GO 79872
// for i in units do
79846: LD_ADDR_VAR 0 3
79850: PUSH
79851: LD_VAR 0 1
79855: PUSH
79856: FOR_IN
79857: IFFALSE 79870
// ComExit ( i ) ;
79859: LD_VAR 0 3
79863: PPUSH
79864: CALL 79750 0 1
79868: GO 79856
79870: POP
79871: POP
// end ;
79872: LD_VAR 0 2
79876: RET
// export function ResetHc ; begin
79877: LD_INT 0
79879: PPUSH
// InitHc ;
79880: CALL_OW 19
// hc_importance := 0 ;
79884: LD_ADDR_OWVAR 32
79888: PUSH
79889: LD_INT 0
79891: ST_TO_ADDR
// end ;
79892: LD_VAR 0 1
79896: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79897: LD_INT 0
79899: PPUSH
79900: PPUSH
79901: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79902: LD_ADDR_VAR 0 6
79906: PUSH
79907: LD_VAR 0 1
79911: PUSH
79912: LD_VAR 0 3
79916: PLUS
79917: PUSH
79918: LD_INT 2
79920: DIV
79921: ST_TO_ADDR
// if _x < 0 then
79922: LD_VAR 0 6
79926: PUSH
79927: LD_INT 0
79929: LESS
79930: IFFALSE 79947
// _x := _x * - 1 ;
79932: LD_ADDR_VAR 0 6
79936: PUSH
79937: LD_VAR 0 6
79941: PUSH
79942: LD_INT 1
79944: NEG
79945: MUL
79946: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79947: LD_ADDR_VAR 0 7
79951: PUSH
79952: LD_VAR 0 2
79956: PUSH
79957: LD_VAR 0 4
79961: PLUS
79962: PUSH
79963: LD_INT 2
79965: DIV
79966: ST_TO_ADDR
// if _y < 0 then
79967: LD_VAR 0 7
79971: PUSH
79972: LD_INT 0
79974: LESS
79975: IFFALSE 79992
// _y := _y * - 1 ;
79977: LD_ADDR_VAR 0 7
79981: PUSH
79982: LD_VAR 0 7
79986: PUSH
79987: LD_INT 1
79989: NEG
79990: MUL
79991: ST_TO_ADDR
// result := [ _x , _y ] ;
79992: LD_ADDR_VAR 0 5
79996: PUSH
79997: LD_VAR 0 6
80001: PUSH
80002: LD_VAR 0 7
80006: PUSH
80007: EMPTY
80008: LIST
80009: LIST
80010: ST_TO_ADDR
// end ;
80011: LD_VAR 0 5
80015: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80016: LD_INT 0
80018: PPUSH
80019: PPUSH
80020: PPUSH
80021: PPUSH
// task := GetTaskList ( unit ) ;
80022: LD_ADDR_VAR 0 7
80026: PUSH
80027: LD_VAR 0 1
80031: PPUSH
80032: CALL_OW 437
80036: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80037: LD_VAR 0 7
80041: NOT
80042: IFFALSE 80061
80044: PUSH
80045: LD_VAR 0 1
80049: PPUSH
80050: LD_VAR 0 2
80054: PPUSH
80055: CALL_OW 308
80059: NOT
80060: AND
80061: IFFALSE 80065
// exit ;
80063: GO 80183
// if IsInArea ( unit , area ) then
80065: LD_VAR 0 1
80069: PPUSH
80070: LD_VAR 0 2
80074: PPUSH
80075: CALL_OW 308
80079: IFFALSE 80097
// begin ComMoveToArea ( unit , goAway ) ;
80081: LD_VAR 0 1
80085: PPUSH
80086: LD_VAR 0 3
80090: PPUSH
80091: CALL_OW 113
// exit ;
80095: GO 80183
// end ; if task [ 1 ] [ 1 ] <> M then
80097: LD_VAR 0 7
80101: PUSH
80102: LD_INT 1
80104: ARRAY
80105: PUSH
80106: LD_INT 1
80108: ARRAY
80109: PUSH
80110: LD_STRING M
80112: NONEQUAL
80113: IFFALSE 80117
// exit ;
80115: GO 80183
// x := task [ 1 ] [ 2 ] ;
80117: LD_ADDR_VAR 0 5
80121: PUSH
80122: LD_VAR 0 7
80126: PUSH
80127: LD_INT 1
80129: ARRAY
80130: PUSH
80131: LD_INT 2
80133: ARRAY
80134: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80135: LD_ADDR_VAR 0 6
80139: PUSH
80140: LD_VAR 0 7
80144: PUSH
80145: LD_INT 1
80147: ARRAY
80148: PUSH
80149: LD_INT 3
80151: ARRAY
80152: ST_TO_ADDR
// if InArea ( x , y , area ) then
80153: LD_VAR 0 5
80157: PPUSH
80158: LD_VAR 0 6
80162: PPUSH
80163: LD_VAR 0 2
80167: PPUSH
80168: CALL_OW 309
80172: IFFALSE 80183
// ComStop ( unit ) ;
80174: LD_VAR 0 1
80178: PPUSH
80179: CALL_OW 141
// end ;
80183: LD_VAR 0 4
80187: RET
// export function Abs ( value ) ; begin
80188: LD_INT 0
80190: PPUSH
// result := value ;
80191: LD_ADDR_VAR 0 2
80195: PUSH
80196: LD_VAR 0 1
80200: ST_TO_ADDR
// if value < 0 then
80201: LD_VAR 0 1
80205: PUSH
80206: LD_INT 0
80208: LESS
80209: IFFALSE 80226
// result := value * - 1 ;
80211: LD_ADDR_VAR 0 2
80215: PUSH
80216: LD_VAR 0 1
80220: PUSH
80221: LD_INT 1
80223: NEG
80224: MUL
80225: ST_TO_ADDR
// end ;
80226: LD_VAR 0 2
80230: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80231: LD_INT 0
80233: PPUSH
80234: PPUSH
80235: PPUSH
80236: PPUSH
80237: PPUSH
80238: PPUSH
80239: PPUSH
80240: PPUSH
// if not unit or not building then
80241: LD_VAR 0 1
80245: NOT
80246: IFTRUE 80255
80248: PUSH
80249: LD_VAR 0 2
80253: NOT
80254: OR
80255: IFFALSE 80259
// exit ;
80257: GO 80487
// x := GetX ( building ) ;
80259: LD_ADDR_VAR 0 4
80263: PUSH
80264: LD_VAR 0 2
80268: PPUSH
80269: CALL_OW 250
80273: ST_TO_ADDR
// y := GetY ( building ) ;
80274: LD_ADDR_VAR 0 6
80278: PUSH
80279: LD_VAR 0 2
80283: PPUSH
80284: CALL_OW 251
80288: ST_TO_ADDR
// d := GetDir ( building ) ;
80289: LD_ADDR_VAR 0 8
80293: PUSH
80294: LD_VAR 0 2
80298: PPUSH
80299: CALL_OW 254
80303: ST_TO_ADDR
// r := 4 ;
80304: LD_ADDR_VAR 0 9
80308: PUSH
80309: LD_INT 4
80311: ST_TO_ADDR
// for i := 1 to 5 do
80312: LD_ADDR_VAR 0 10
80316: PUSH
80317: DOUBLE
80318: LD_INT 1
80320: DEC
80321: ST_TO_ADDR
80322: LD_INT 5
80324: PUSH
80325: FOR_TO
80326: IFFALSE 80485
// begin _x := ShiftX ( x , d , r + i ) ;
80328: LD_ADDR_VAR 0 5
80332: PUSH
80333: LD_VAR 0 4
80337: PPUSH
80338: LD_VAR 0 8
80342: PPUSH
80343: LD_VAR 0 9
80347: PUSH
80348: LD_VAR 0 10
80352: PLUS
80353: PPUSH
80354: CALL_OW 272
80358: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80359: LD_ADDR_VAR 0 7
80363: PUSH
80364: LD_VAR 0 6
80368: PPUSH
80369: LD_VAR 0 8
80373: PPUSH
80374: LD_VAR 0 9
80378: PUSH
80379: LD_VAR 0 10
80383: PLUS
80384: PPUSH
80385: CALL_OW 273
80389: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80390: LD_VAR 0 5
80394: PPUSH
80395: LD_VAR 0 7
80399: PPUSH
80400: CALL_OW 488
80404: IFFALSE 80439
80406: PUSH
80407: LD_VAR 0 5
80411: PPUSH
80412: LD_VAR 0 7
80416: PPUSH
80417: CALL_OW 428
80421: PPUSH
80422: CALL_OW 247
80426: PUSH
80427: LD_INT 3
80429: PUSH
80430: LD_INT 2
80432: PUSH
80433: EMPTY
80434: LIST
80435: LIST
80436: IN
80437: NOT
80438: AND
80439: IFFALSE 80483
// begin ComMoveXY ( unit , _x , _y ) ;
80441: LD_VAR 0 1
80445: PPUSH
80446: LD_VAR 0 5
80450: PPUSH
80451: LD_VAR 0 7
80455: PPUSH
80456: CALL_OW 111
// result := [ _x , _y ] ;
80460: LD_ADDR_VAR 0 3
80464: PUSH
80465: LD_VAR 0 5
80469: PUSH
80470: LD_VAR 0 7
80474: PUSH
80475: EMPTY
80476: LIST
80477: LIST
80478: ST_TO_ADDR
// exit ;
80479: POP
80480: POP
80481: GO 80487
// end ; end ;
80483: GO 80325
80485: POP
80486: POP
// end ;
80487: LD_VAR 0 3
80491: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80492: LD_INT 0
80494: PPUSH
80495: PPUSH
80496: PPUSH
// result := 0 ;
80497: LD_ADDR_VAR 0 3
80501: PUSH
80502: LD_INT 0
80504: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80505: LD_VAR 0 1
80509: PUSH
80510: LD_INT 0
80512: LESS
80513: IFTRUE 80525
80515: PUSH
80516: LD_VAR 0 1
80520: PUSH
80521: LD_INT 8
80523: GREATER
80524: OR
80525: IFTRUE 80537
80527: PUSH
80528: LD_VAR 0 2
80532: PUSH
80533: LD_INT 0
80535: LESS
80536: OR
80537: IFTRUE 80549
80539: PUSH
80540: LD_VAR 0 2
80544: PUSH
80545: LD_INT 8
80547: GREATER
80548: OR
80549: IFFALSE 80553
// exit ;
80551: GO 80628
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80553: LD_ADDR_VAR 0 4
80557: PUSH
80558: LD_INT 22
80560: PUSH
80561: LD_VAR 0 2
80565: PUSH
80566: EMPTY
80567: LIST
80568: LIST
80569: PPUSH
80570: CALL_OW 69
80574: PUSH
80575: FOR_IN
80576: IFFALSE 80626
// begin un := UnitShoot ( i ) ;
80578: LD_ADDR_VAR 0 5
80582: PUSH
80583: LD_VAR 0 4
80587: PPUSH
80588: CALL_OW 504
80592: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80593: LD_VAR 0 5
80597: PPUSH
80598: CALL_OW 255
80602: PUSH
80603: LD_VAR 0 1
80607: EQUAL
80608: IFFALSE 80624
// begin result := un ;
80610: LD_ADDR_VAR 0 3
80614: PUSH
80615: LD_VAR 0 5
80619: ST_TO_ADDR
// exit ;
80620: POP
80621: POP
80622: GO 80628
// end ; end ;
80624: GO 80575
80626: POP
80627: POP
// end ;
80628: LD_VAR 0 3
80632: RET
// export function GetCargoBay ( units ) ; begin
80633: LD_INT 0
80635: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80636: LD_ADDR_VAR 0 2
80640: PUSH
80641: LD_VAR 0 1
80645: PPUSH
80646: LD_INT 2
80648: PUSH
80649: LD_INT 34
80651: PUSH
80652: LD_INT 12
80654: PUSH
80655: EMPTY
80656: LIST
80657: LIST
80658: PUSH
80659: LD_INT 34
80661: PUSH
80662: LD_INT 51
80664: PUSH
80665: EMPTY
80666: LIST
80667: LIST
80668: PUSH
80669: LD_INT 34
80671: PUSH
80672: LD_INT 32
80674: PUSH
80675: EMPTY
80676: LIST
80677: LIST
80678: PUSH
80679: LD_INT 34
80681: PUSH
80682: LD_INT 89
80684: PUSH
80685: EMPTY
80686: LIST
80687: LIST
80688: PUSH
80689: EMPTY
80690: LIST
80691: LIST
80692: LIST
80693: LIST
80694: LIST
80695: PPUSH
80696: CALL_OW 72
80700: ST_TO_ADDR
// end ;
80701: LD_VAR 0 2
80705: RET
// export function Negate ( value ) ; begin
80706: LD_INT 0
80708: PPUSH
// result := not value ;
80709: LD_ADDR_VAR 0 2
80713: PUSH
80714: LD_VAR 0 1
80718: NOT
80719: ST_TO_ADDR
// end ;
80720: LD_VAR 0 2
80724: RET
// export function Inc ( value ) ; begin
80725: LD_INT 0
80727: PPUSH
// result := value + 1 ;
80728: LD_ADDR_VAR 0 2
80732: PUSH
80733: LD_VAR 0 1
80737: PUSH
80738: LD_INT 1
80740: PLUS
80741: ST_TO_ADDR
// end ;
80742: LD_VAR 0 2
80746: RET
// export function Dec ( value ) ; begin
80747: LD_INT 0
80749: PPUSH
// result := value - 1 ;
80750: LD_ADDR_VAR 0 2
80754: PUSH
80755: LD_VAR 0 1
80759: PUSH
80760: LD_INT 1
80762: MINUS
80763: ST_TO_ADDR
// end ;
80764: LD_VAR 0 2
80768: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80769: LD_INT 0
80771: PPUSH
80772: PPUSH
80773: PPUSH
80774: PPUSH
80775: PPUSH
80776: PPUSH
80777: PPUSH
80778: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80779: LD_VAR 0 1
80783: PPUSH
80784: LD_VAR 0 2
80788: PPUSH
80789: CALL_OW 488
80793: NOT
80794: IFTRUE 80813
80796: PUSH
80797: LD_VAR 0 3
80801: PPUSH
80802: LD_VAR 0 4
80806: PPUSH
80807: CALL_OW 488
80811: NOT
80812: OR
80813: IFFALSE 80826
// begin result := - 1 ;
80815: LD_ADDR_VAR 0 5
80819: PUSH
80820: LD_INT 1
80822: NEG
80823: ST_TO_ADDR
// exit ;
80824: GO 81061
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80826: LD_ADDR_VAR 0 12
80830: PUSH
80831: LD_VAR 0 1
80835: PPUSH
80836: LD_VAR 0 2
80840: PPUSH
80841: LD_VAR 0 3
80845: PPUSH
80846: LD_VAR 0 4
80850: PPUSH
80851: CALL 79897 0 4
80855: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80856: LD_ADDR_VAR 0 11
80860: PUSH
80861: LD_VAR 0 1
80865: PPUSH
80866: LD_VAR 0 2
80870: PPUSH
80871: LD_VAR 0 12
80875: PUSH
80876: LD_INT 1
80878: ARRAY
80879: PPUSH
80880: LD_VAR 0 12
80884: PUSH
80885: LD_INT 2
80887: ARRAY
80888: PPUSH
80889: CALL_OW 298
80893: ST_TO_ADDR
// distance := 9999 ;
80894: LD_ADDR_VAR 0 10
80898: PUSH
80899: LD_INT 9999
80901: ST_TO_ADDR
// for i := 0 to 5 do
80902: LD_ADDR_VAR 0 6
80906: PUSH
80907: DOUBLE
80908: LD_INT 0
80910: DEC
80911: ST_TO_ADDR
80912: LD_INT 5
80914: PUSH
80915: FOR_TO
80916: IFFALSE 81059
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80918: LD_ADDR_VAR 0 7
80922: PUSH
80923: LD_VAR 0 1
80927: PPUSH
80928: LD_VAR 0 6
80932: PPUSH
80933: LD_VAR 0 11
80937: PPUSH
80938: CALL_OW 272
80942: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80943: LD_ADDR_VAR 0 8
80947: PUSH
80948: LD_VAR 0 2
80952: PPUSH
80953: LD_VAR 0 6
80957: PPUSH
80958: LD_VAR 0 11
80962: PPUSH
80963: CALL_OW 273
80967: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80968: LD_VAR 0 7
80972: PPUSH
80973: LD_VAR 0 8
80977: PPUSH
80978: CALL_OW 488
80982: NOT
80983: IFFALSE 80987
// continue ;
80985: GO 80915
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80987: LD_ADDR_VAR 0 9
80991: PUSH
80992: LD_VAR 0 12
80996: PUSH
80997: LD_INT 1
80999: ARRAY
81000: PPUSH
81001: LD_VAR 0 12
81005: PUSH
81006: LD_INT 2
81008: ARRAY
81009: PPUSH
81010: LD_VAR 0 7
81014: PPUSH
81015: LD_VAR 0 8
81019: PPUSH
81020: CALL_OW 298
81024: ST_TO_ADDR
// if tmp < distance then
81025: LD_VAR 0 9
81029: PUSH
81030: LD_VAR 0 10
81034: LESS
81035: IFFALSE 81057
// begin result := i ;
81037: LD_ADDR_VAR 0 5
81041: PUSH
81042: LD_VAR 0 6
81046: ST_TO_ADDR
// distance := tmp ;
81047: LD_ADDR_VAR 0 10
81051: PUSH
81052: LD_VAR 0 9
81056: ST_TO_ADDR
// end ; end ;
81057: GO 80915
81059: POP
81060: POP
// end ;
81061: LD_VAR 0 5
81065: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81066: LD_INT 0
81068: PPUSH
81069: PPUSH
// if not driver or not IsInUnit ( driver ) then
81070: LD_VAR 0 1
81074: NOT
81075: IFTRUE 81089
81077: PUSH
81078: LD_VAR 0 1
81082: PPUSH
81083: CALL_OW 310
81087: NOT
81088: OR
81089: IFFALSE 81093
// exit ;
81091: GO 81183
// vehicle := IsInUnit ( driver ) ;
81093: LD_ADDR_VAR 0 3
81097: PUSH
81098: LD_VAR 0 1
81102: PPUSH
81103: CALL_OW 310
81107: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81108: LD_VAR 0 1
81112: PPUSH
81113: LD_STRING \
81115: PUSH
81116: LD_INT 0
81118: PUSH
81119: LD_INT 0
81121: PUSH
81122: LD_INT 0
81124: PUSH
81125: LD_INT 0
81127: PUSH
81128: LD_INT 0
81130: PUSH
81131: LD_INT 0
81133: PUSH
81134: EMPTY
81135: LIST
81136: LIST
81137: LIST
81138: LIST
81139: LIST
81140: LIST
81141: LIST
81142: PUSH
81143: LD_STRING E
81145: PUSH
81146: LD_INT 0
81148: PUSH
81149: LD_INT 0
81151: PUSH
81152: LD_VAR 0 3
81156: PUSH
81157: LD_INT 0
81159: PUSH
81160: LD_INT 0
81162: PUSH
81163: LD_INT 0
81165: PUSH
81166: EMPTY
81167: LIST
81168: LIST
81169: LIST
81170: LIST
81171: LIST
81172: LIST
81173: LIST
81174: PUSH
81175: EMPTY
81176: LIST
81177: LIST
81178: PPUSH
81179: CALL_OW 446
// end ;
81183: LD_VAR 0 2
81187: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81188: LD_INT 0
81190: PPUSH
81191: PPUSH
// if not driver or not IsInUnit ( driver ) then
81192: LD_VAR 0 1
81196: NOT
81197: IFTRUE 81211
81199: PUSH
81200: LD_VAR 0 1
81204: PPUSH
81205: CALL_OW 310
81209: NOT
81210: OR
81211: IFFALSE 81215
// exit ;
81213: GO 81305
// vehicle := IsInUnit ( driver ) ;
81215: LD_ADDR_VAR 0 3
81219: PUSH
81220: LD_VAR 0 1
81224: PPUSH
81225: CALL_OW 310
81229: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81230: LD_VAR 0 1
81234: PPUSH
81235: LD_STRING \
81237: PUSH
81238: LD_INT 0
81240: PUSH
81241: LD_INT 0
81243: PUSH
81244: LD_INT 0
81246: PUSH
81247: LD_INT 0
81249: PUSH
81250: LD_INT 0
81252: PUSH
81253: LD_INT 0
81255: PUSH
81256: EMPTY
81257: LIST
81258: LIST
81259: LIST
81260: LIST
81261: LIST
81262: LIST
81263: LIST
81264: PUSH
81265: LD_STRING E
81267: PUSH
81268: LD_INT 0
81270: PUSH
81271: LD_INT 0
81273: PUSH
81274: LD_VAR 0 3
81278: PUSH
81279: LD_INT 0
81281: PUSH
81282: LD_INT 0
81284: PUSH
81285: LD_INT 0
81287: PUSH
81288: EMPTY
81289: LIST
81290: LIST
81291: LIST
81292: LIST
81293: LIST
81294: LIST
81295: LIST
81296: PUSH
81297: EMPTY
81298: LIST
81299: LIST
81300: PPUSH
81301: CALL_OW 447
// end ;
81305: LD_VAR 0 2
81309: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81310: LD_INT 0
81312: PPUSH
81313: PPUSH
81314: PPUSH
// tmp := [ ] ;
81315: LD_ADDR_VAR 0 5
81319: PUSH
81320: EMPTY
81321: ST_TO_ADDR
// for i in units do
81322: LD_ADDR_VAR 0 4
81326: PUSH
81327: LD_VAR 0 1
81331: PUSH
81332: FOR_IN
81333: IFFALSE 81371
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81335: LD_ADDR_VAR 0 5
81339: PUSH
81340: LD_VAR 0 5
81344: PPUSH
81345: LD_VAR 0 5
81349: PUSH
81350: LD_INT 1
81352: PLUS
81353: PPUSH
81354: LD_VAR 0 4
81358: PPUSH
81359: CALL_OW 256
81363: PPUSH
81364: CALL_OW 2
81368: ST_TO_ADDR
81369: GO 81332
81371: POP
81372: POP
// if not tmp then
81373: LD_VAR 0 5
81377: NOT
81378: IFFALSE 81382
// exit ;
81380: GO 81430
// if asc then
81382: LD_VAR 0 2
81386: IFFALSE 81410
// result := SortListByListAsc ( units , tmp ) else
81388: LD_ADDR_VAR 0 3
81392: PUSH
81393: LD_VAR 0 1
81397: PPUSH
81398: LD_VAR 0 5
81402: PPUSH
81403: CALL_OW 76
81407: ST_TO_ADDR
81408: GO 81430
// result := SortListByListDesc ( units , tmp ) ;
81410: LD_ADDR_VAR 0 3
81414: PUSH
81415: LD_VAR 0 1
81419: PPUSH
81420: LD_VAR 0 5
81424: PPUSH
81425: CALL_OW 77
81429: ST_TO_ADDR
// end ;
81430: LD_VAR 0 3
81434: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81435: LD_INT 0
81437: PPUSH
81438: PPUSH
// task := GetTaskList ( mech ) ;
81439: LD_ADDR_VAR 0 4
81443: PUSH
81444: LD_VAR 0 1
81448: PPUSH
81449: CALL_OW 437
81453: ST_TO_ADDR
// if not task then
81454: LD_VAR 0 4
81458: NOT
81459: IFFALSE 81463
// exit ;
81461: GO 81507
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81463: LD_ADDR_VAR 0 3
81467: PUSH
81468: LD_VAR 0 4
81472: PUSH
81473: LD_INT 1
81475: ARRAY
81476: PUSH
81477: LD_INT 1
81479: ARRAY
81480: PUSH
81481: LD_STRING r
81483: EQUAL
81484: IFFALSE 81506
81486: PUSH
81487: LD_VAR 0 4
81491: PUSH
81492: LD_INT 1
81494: ARRAY
81495: PUSH
81496: LD_INT 4
81498: ARRAY
81499: PUSH
81500: LD_VAR 0 2
81504: EQUAL
81505: AND
81506: ST_TO_ADDR
// end ;
81507: LD_VAR 0 3
81511: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81512: LD_INT 0
81514: PPUSH
// SetDir ( unit , d ) ;
81515: LD_VAR 0 1
81519: PPUSH
81520: LD_VAR 0 4
81524: PPUSH
81525: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
81529: LD_ADDR_VAR 0 6
81533: PUSH
81534: LD_VAR 0 1
81538: PPUSH
81539: LD_VAR 0 2
81543: PPUSH
81544: LD_VAR 0 3
81548: PPUSH
81549: LD_VAR 0 5
81553: PPUSH
81554: CALL_OW 48
81558: ST_TO_ADDR
// end ;
81559: LD_VAR 0 6
81563: RET
// export function ToNaturalNumber ( number ) ; begin
81564: LD_INT 0
81566: PPUSH
// result := number div 1 ;
81567: LD_ADDR_VAR 0 2
81571: PUSH
81572: LD_VAR 0 1
81576: PUSH
81577: LD_INT 1
81579: DIV
81580: ST_TO_ADDR
// if number < 0 then
81581: LD_VAR 0 1
81585: PUSH
81586: LD_INT 0
81588: LESS
81589: IFFALSE 81599
// result := 0 ;
81591: LD_ADDR_VAR 0 2
81595: PUSH
81596: LD_INT 0
81598: ST_TO_ADDR
// end ;
81599: LD_VAR 0 2
81603: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
81604: LD_INT 0
81606: PPUSH
81607: PPUSH
81608: PPUSH
// if not buildings then
81609: LD_VAR 0 1
81613: NOT
81614: IFFALSE 81618
// exit ;
81616: GO 81733
// tmp := [ ] ;
81618: LD_ADDR_VAR 0 5
81622: PUSH
81623: EMPTY
81624: ST_TO_ADDR
// for b in buildings do
81625: LD_ADDR_VAR 0 4
81629: PUSH
81630: LD_VAR 0 1
81634: PUSH
81635: FOR_IN
81636: IFFALSE 81674
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
81638: LD_ADDR_VAR 0 5
81642: PUSH
81643: LD_VAR 0 5
81647: PPUSH
81648: LD_VAR 0 5
81652: PUSH
81653: LD_INT 1
81655: PLUS
81656: PPUSH
81657: LD_VAR 0 4
81661: PPUSH
81662: CALL_OW 266
81666: PPUSH
81667: CALL_OW 1
81671: ST_TO_ADDR
81672: GO 81635
81674: POP
81675: POP
// if not tmp then
81676: LD_VAR 0 5
81680: NOT
81681: IFFALSE 81685
// exit ;
81683: GO 81733
// if asc then
81685: LD_VAR 0 2
81689: IFFALSE 81713
// result := SortListByListAsc ( buildings , tmp ) else
81691: LD_ADDR_VAR 0 3
81695: PUSH
81696: LD_VAR 0 1
81700: PPUSH
81701: LD_VAR 0 5
81705: PPUSH
81706: CALL_OW 76
81710: ST_TO_ADDR
81711: GO 81733
// result := SortListByListDesc ( buildings , tmp ) ;
81713: LD_ADDR_VAR 0 3
81717: PUSH
81718: LD_VAR 0 1
81722: PPUSH
81723: LD_VAR 0 5
81727: PPUSH
81728: CALL_OW 77
81732: ST_TO_ADDR
// end ;
81733: LD_VAR 0 3
81737: RET
// export function SortByClass ( units , class ) ; var un ; begin
81738: LD_INT 0
81740: PPUSH
81741: PPUSH
// if not units or not class then
81742: LD_VAR 0 1
81746: NOT
81747: IFTRUE 81756
81749: PUSH
81750: LD_VAR 0 2
81754: NOT
81755: OR
81756: IFFALSE 81760
// exit ;
81758: GO 81855
// result := [ ] ;
81760: LD_ADDR_VAR 0 3
81764: PUSH
81765: EMPTY
81766: ST_TO_ADDR
// for un in units do
81767: LD_ADDR_VAR 0 4
81771: PUSH
81772: LD_VAR 0 1
81776: PUSH
81777: FOR_IN
81778: IFFALSE 81853
// if GetClass ( un ) = class then
81780: LD_VAR 0 4
81784: PPUSH
81785: CALL_OW 257
81789: PUSH
81790: LD_VAR 0 2
81794: EQUAL
81795: IFFALSE 81822
// result := Insert ( result , 1 , un ) else
81797: LD_ADDR_VAR 0 3
81801: PUSH
81802: LD_VAR 0 3
81806: PPUSH
81807: LD_INT 1
81809: PPUSH
81810: LD_VAR 0 4
81814: PPUSH
81815: CALL_OW 2
81819: ST_TO_ADDR
81820: GO 81851
// result := Replace ( result , result + 1 , un ) ;
81822: LD_ADDR_VAR 0 3
81826: PUSH
81827: LD_VAR 0 3
81831: PPUSH
81832: LD_VAR 0 3
81836: PUSH
81837: LD_INT 1
81839: PLUS
81840: PPUSH
81841: LD_VAR 0 4
81845: PPUSH
81846: CALL_OW 1
81850: ST_TO_ADDR
81851: GO 81777
81853: POP
81854: POP
// end ;
81855: LD_VAR 0 3
81859: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81860: LD_INT 0
81862: PPUSH
81863: PPUSH
81864: PPUSH
81865: PPUSH
81866: PPUSH
81867: PPUSH
81868: PPUSH
// result := [ ] ;
81869: LD_ADDR_VAR 0 4
81873: PUSH
81874: EMPTY
81875: ST_TO_ADDR
// if x - r < 0 then
81876: LD_VAR 0 1
81880: PUSH
81881: LD_VAR 0 3
81885: MINUS
81886: PUSH
81887: LD_INT 0
81889: LESS
81890: IFFALSE 81902
// min_x := 0 else
81892: LD_ADDR_VAR 0 8
81896: PUSH
81897: LD_INT 0
81899: ST_TO_ADDR
81900: GO 81918
// min_x := x - r ;
81902: LD_ADDR_VAR 0 8
81906: PUSH
81907: LD_VAR 0 1
81911: PUSH
81912: LD_VAR 0 3
81916: MINUS
81917: ST_TO_ADDR
// if y - r < 0 then
81918: LD_VAR 0 2
81922: PUSH
81923: LD_VAR 0 3
81927: MINUS
81928: PUSH
81929: LD_INT 0
81931: LESS
81932: IFFALSE 81944
// min_y := 0 else
81934: LD_ADDR_VAR 0 7
81938: PUSH
81939: LD_INT 0
81941: ST_TO_ADDR
81942: GO 81960
// min_y := y - r ;
81944: LD_ADDR_VAR 0 7
81948: PUSH
81949: LD_VAR 0 2
81953: PUSH
81954: LD_VAR 0 3
81958: MINUS
81959: ST_TO_ADDR
// max_x := x + r ;
81960: LD_ADDR_VAR 0 9
81964: PUSH
81965: LD_VAR 0 1
81969: PUSH
81970: LD_VAR 0 3
81974: PLUS
81975: ST_TO_ADDR
// max_y := y + r ;
81976: LD_ADDR_VAR 0 10
81980: PUSH
81981: LD_VAR 0 2
81985: PUSH
81986: LD_VAR 0 3
81990: PLUS
81991: ST_TO_ADDR
// for _x = min_x to max_x do
81992: LD_ADDR_VAR 0 5
81996: PUSH
81997: DOUBLE
81998: LD_VAR 0 8
82002: DEC
82003: ST_TO_ADDR
82004: LD_VAR 0 9
82008: PUSH
82009: FOR_TO
82010: IFFALSE 82111
// for _y = min_y to max_y do
82012: LD_ADDR_VAR 0 6
82016: PUSH
82017: DOUBLE
82018: LD_VAR 0 7
82022: DEC
82023: ST_TO_ADDR
82024: LD_VAR 0 10
82028: PUSH
82029: FOR_TO
82030: IFFALSE 82107
// begin if not ValidHex ( _x , _y ) then
82032: LD_VAR 0 5
82036: PPUSH
82037: LD_VAR 0 6
82041: PPUSH
82042: CALL_OW 488
82046: NOT
82047: IFFALSE 82051
// continue ;
82049: GO 82029
// if GetResourceTypeXY ( _x , _y ) then
82051: LD_VAR 0 5
82055: PPUSH
82056: LD_VAR 0 6
82060: PPUSH
82061: CALL_OW 283
82065: IFFALSE 82105
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82067: LD_ADDR_VAR 0 4
82071: PUSH
82072: LD_VAR 0 4
82076: PPUSH
82077: LD_VAR 0 4
82081: PUSH
82082: LD_INT 1
82084: PLUS
82085: PPUSH
82086: LD_VAR 0 5
82090: PUSH
82091: LD_VAR 0 6
82095: PUSH
82096: EMPTY
82097: LIST
82098: LIST
82099: PPUSH
82100: CALL_OW 1
82104: ST_TO_ADDR
// end ;
82105: GO 82029
82107: POP
82108: POP
82109: GO 82009
82111: POP
82112: POP
// end ;
82113: LD_VAR 0 4
82117: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82118: LD_INT 0
82120: PPUSH
82121: PPUSH
82122: PPUSH
82123: PPUSH
82124: PPUSH
82125: PPUSH
82126: PPUSH
82127: PPUSH
// if not units then
82128: LD_VAR 0 1
82132: NOT
82133: IFFALSE 82137
// exit ;
82135: GO 82669
// result := UnitFilter ( units , [ f_ok ] ) ;
82137: LD_ADDR_VAR 0 3
82141: PUSH
82142: LD_VAR 0 1
82146: PPUSH
82147: LD_INT 50
82149: PUSH
82150: EMPTY
82151: LIST
82152: PPUSH
82153: CALL_OW 72
82157: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82158: LD_ADDR_VAR 0 8
82162: PUSH
82163: LD_VAR 0 1
82167: PUSH
82168: LD_INT 1
82170: ARRAY
82171: PPUSH
82172: CALL_OW 255
82176: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82177: LD_ADDR_VAR 0 10
82181: PUSH
82182: LD_INT 29
82184: PUSH
82185: LD_INT 91
82187: PUSH
82188: LD_INT 49
82190: PUSH
82191: EMPTY
82192: LIST
82193: LIST
82194: LIST
82195: ST_TO_ADDR
// if not result then
82196: LD_VAR 0 3
82200: NOT
82201: IFFALSE 82205
// exit ;
82203: GO 82669
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82205: LD_ADDR_VAR 0 5
82209: PUSH
82210: LD_INT 81
82212: PUSH
82213: LD_VAR 0 8
82217: PUSH
82218: EMPTY
82219: LIST
82220: LIST
82221: PPUSH
82222: CALL_OW 69
82226: ST_TO_ADDR
// for i in result do
82227: LD_ADDR_VAR 0 4
82231: PUSH
82232: LD_VAR 0 3
82236: PUSH
82237: FOR_IN
82238: IFFALSE 82667
// begin tag := GetTag ( i ) + 1 ;
82240: LD_ADDR_VAR 0 9
82244: PUSH
82245: LD_VAR 0 4
82249: PPUSH
82250: CALL_OW 110
82254: PUSH
82255: LD_INT 1
82257: PLUS
82258: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
82259: LD_ADDR_VAR 0 7
82263: PUSH
82264: LD_VAR 0 4
82268: PPUSH
82269: CALL_OW 250
82273: PPUSH
82274: LD_VAR 0 4
82278: PPUSH
82279: CALL_OW 251
82283: PPUSH
82284: LD_INT 4
82286: PPUSH
82287: CALL 81860 0 3
82291: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
82292: LD_VAR 0 4
82296: PPUSH
82297: CALL_OW 247
82301: PUSH
82302: LD_INT 2
82304: EQUAL
82305: IFFALSE 82317
82307: PUSH
82308: LD_VAR 0 7
82312: PUSH
82313: LD_INT 2
82315: GREATER
82316: AND
82317: IFFALSE 82337
82319: PUSH
82320: LD_VAR 0 4
82324: PPUSH
82325: CALL_OW 264
82329: PUSH
82330: LD_VAR 0 10
82334: IN
82335: NOT
82336: AND
82337: IFFALSE 82376
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82339: LD_VAR 0 4
82343: PPUSH
82344: LD_VAR 0 7
82348: PUSH
82349: LD_INT 1
82351: ARRAY
82352: PUSH
82353: LD_INT 1
82355: ARRAY
82356: PPUSH
82357: LD_VAR 0 7
82361: PUSH
82362: LD_INT 1
82364: ARRAY
82365: PUSH
82366: LD_INT 2
82368: ARRAY
82369: PPUSH
82370: CALL_OW 116
82374: GO 82665
// if path > tag then
82376: LD_VAR 0 2
82380: PUSH
82381: LD_VAR 0 9
82385: GREATER
82386: IFFALSE 82594
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82388: LD_ADDR_VAR 0 6
82392: PUSH
82393: LD_VAR 0 5
82397: PPUSH
82398: LD_INT 91
82400: PUSH
82401: LD_VAR 0 4
82405: PUSH
82406: LD_INT 8
82408: PUSH
82409: EMPTY
82410: LIST
82411: LIST
82412: LIST
82413: PPUSH
82414: CALL_OW 72
82418: ST_TO_ADDR
// if nearEnemy then
82419: LD_VAR 0 6
82423: IFFALSE 82492
// begin if GetWeapon ( i ) = ru_time_lapser then
82425: LD_VAR 0 4
82429: PPUSH
82430: CALL_OW 264
82434: PUSH
82435: LD_INT 49
82437: EQUAL
82438: IFFALSE 82466
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82440: LD_VAR 0 4
82444: PPUSH
82445: LD_VAR 0 6
82449: PPUSH
82450: LD_VAR 0 4
82454: PPUSH
82455: CALL_OW 74
82459: PPUSH
82460: CALL_OW 112
82464: GO 82490
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82466: LD_VAR 0 4
82470: PPUSH
82471: LD_VAR 0 6
82475: PPUSH
82476: LD_VAR 0 4
82480: PPUSH
82481: CALL_OW 74
82485: PPUSH
82486: CALL 83750 0 2
// end else
82490: GO 82592
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82492: LD_VAR 0 4
82496: PPUSH
82497: LD_VAR 0 2
82501: PUSH
82502: LD_VAR 0 9
82506: ARRAY
82507: PUSH
82508: LD_INT 1
82510: ARRAY
82511: PPUSH
82512: LD_VAR 0 2
82516: PUSH
82517: LD_VAR 0 9
82521: ARRAY
82522: PUSH
82523: LD_INT 2
82525: ARRAY
82526: PPUSH
82527: CALL_OW 297
82531: PUSH
82532: LD_INT 6
82534: GREATER
82535: IFFALSE 82578
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82537: LD_VAR 0 4
82541: PPUSH
82542: LD_VAR 0 2
82546: PUSH
82547: LD_VAR 0 9
82551: ARRAY
82552: PUSH
82553: LD_INT 1
82555: ARRAY
82556: PPUSH
82557: LD_VAR 0 2
82561: PUSH
82562: LD_VAR 0 9
82566: ARRAY
82567: PUSH
82568: LD_INT 2
82570: ARRAY
82571: PPUSH
82572: CALL_OW 114
82576: GO 82592
// SetTag ( i , tag ) ;
82578: LD_VAR 0 4
82582: PPUSH
82583: LD_VAR 0 9
82587: PPUSH
82588: CALL_OW 109
// end else
82592: GO 82665
// if enemy then
82594: LD_VAR 0 5
82598: IFFALSE 82665
// begin if GetWeapon ( i ) = ru_time_lapser then
82600: LD_VAR 0 4
82604: PPUSH
82605: CALL_OW 264
82609: PUSH
82610: LD_INT 49
82612: EQUAL
82613: IFFALSE 82641
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82615: LD_VAR 0 4
82619: PPUSH
82620: LD_VAR 0 5
82624: PPUSH
82625: LD_VAR 0 4
82629: PPUSH
82630: CALL_OW 74
82634: PPUSH
82635: CALL_OW 112
82639: GO 82665
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82641: LD_VAR 0 4
82645: PPUSH
82646: LD_VAR 0 5
82650: PPUSH
82651: LD_VAR 0 4
82655: PPUSH
82656: CALL_OW 74
82660: PPUSH
82661: CALL 83750 0 2
// end ; end ;
82665: GO 82237
82667: POP
82668: POP
// end ;
82669: LD_VAR 0 3
82673: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82674: LD_INT 0
82676: PPUSH
82677: PPUSH
82678: PPUSH
// if not unit or IsInUnit ( unit ) then
82679: LD_VAR 0 1
82683: NOT
82684: IFTRUE 82697
82686: PUSH
82687: LD_VAR 0 1
82691: PPUSH
82692: CALL_OW 310
82696: OR
82697: IFFALSE 82701
// exit ;
82699: GO 82792
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82701: LD_ADDR_VAR 0 4
82705: PUSH
82706: LD_VAR 0 1
82710: PPUSH
82711: CALL_OW 250
82715: PPUSH
82716: LD_VAR 0 2
82720: PPUSH
82721: LD_INT 1
82723: PPUSH
82724: CALL_OW 272
82728: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82729: LD_ADDR_VAR 0 5
82733: PUSH
82734: LD_VAR 0 1
82738: PPUSH
82739: CALL_OW 251
82743: PPUSH
82744: LD_VAR 0 2
82748: PPUSH
82749: LD_INT 1
82751: PPUSH
82752: CALL_OW 273
82756: ST_TO_ADDR
// if ValidHex ( x , y ) then
82757: LD_VAR 0 4
82761: PPUSH
82762: LD_VAR 0 5
82766: PPUSH
82767: CALL_OW 488
82771: IFFALSE 82792
// ComTurnXY ( unit , x , y ) ;
82773: LD_VAR 0 1
82777: PPUSH
82778: LD_VAR 0 4
82782: PPUSH
82783: LD_VAR 0 5
82787: PPUSH
82788: CALL_OW 118
// end ;
82792: LD_VAR 0 3
82796: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82797: LD_INT 0
82799: PPUSH
82800: PPUSH
// result := false ;
82801: LD_ADDR_VAR 0 3
82805: PUSH
82806: LD_INT 0
82808: ST_TO_ADDR
// if not units then
82809: LD_VAR 0 2
82813: NOT
82814: IFFALSE 82818
// exit ;
82816: GO 82863
// for i in units do
82818: LD_ADDR_VAR 0 4
82822: PUSH
82823: LD_VAR 0 2
82827: PUSH
82828: FOR_IN
82829: IFFALSE 82861
// if See ( side , i ) then
82831: LD_VAR 0 1
82835: PPUSH
82836: LD_VAR 0 4
82840: PPUSH
82841: CALL_OW 292
82845: IFFALSE 82859
// begin result := true ;
82847: LD_ADDR_VAR 0 3
82851: PUSH
82852: LD_INT 1
82854: ST_TO_ADDR
// exit ;
82855: POP
82856: POP
82857: GO 82863
// end ;
82859: GO 82828
82861: POP
82862: POP
// end ;
82863: LD_VAR 0 3
82867: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82868: LD_INT 0
82870: PPUSH
82871: PPUSH
82872: PPUSH
82873: PPUSH
// if not unit or not points then
82874: LD_VAR 0 1
82878: NOT
82879: IFTRUE 82888
82881: PUSH
82882: LD_VAR 0 2
82886: NOT
82887: OR
82888: IFFALSE 82892
// exit ;
82890: GO 82982
// dist := 99999 ;
82892: LD_ADDR_VAR 0 5
82896: PUSH
82897: LD_INT 99999
82899: ST_TO_ADDR
// for i in points do
82900: LD_ADDR_VAR 0 4
82904: PUSH
82905: LD_VAR 0 2
82909: PUSH
82910: FOR_IN
82911: IFFALSE 82980
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82913: LD_ADDR_VAR 0 6
82917: PUSH
82918: LD_VAR 0 1
82922: PPUSH
82923: LD_VAR 0 4
82927: PUSH
82928: LD_INT 1
82930: ARRAY
82931: PPUSH
82932: LD_VAR 0 4
82936: PUSH
82937: LD_INT 2
82939: ARRAY
82940: PPUSH
82941: CALL_OW 297
82945: ST_TO_ADDR
// if tmpDist < dist then
82946: LD_VAR 0 6
82950: PUSH
82951: LD_VAR 0 5
82955: LESS
82956: IFFALSE 82978
// begin result := i ;
82958: LD_ADDR_VAR 0 3
82962: PUSH
82963: LD_VAR 0 4
82967: ST_TO_ADDR
// dist := tmpDist ;
82968: LD_ADDR_VAR 0 5
82972: PUSH
82973: LD_VAR 0 6
82977: ST_TO_ADDR
// end ; end ;
82978: GO 82910
82980: POP
82981: POP
// end ;
82982: LD_VAR 0 3
82986: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82987: LD_INT 0
82989: PPUSH
// uc_side := side ;
82990: LD_ADDR_OWVAR 20
82994: PUSH
82995: LD_VAR 0 1
82999: ST_TO_ADDR
// uc_nation := 3 ;
83000: LD_ADDR_OWVAR 21
83004: PUSH
83005: LD_INT 3
83007: ST_TO_ADDR
// vc_chassis := 25 ;
83008: LD_ADDR_OWVAR 37
83012: PUSH
83013: LD_INT 25
83015: ST_TO_ADDR
// vc_engine := engine_siberite ;
83016: LD_ADDR_OWVAR 39
83020: PUSH
83021: LD_INT 3
83023: ST_TO_ADDR
// vc_control := control_computer ;
83024: LD_ADDR_OWVAR 38
83028: PUSH
83029: LD_INT 3
83031: ST_TO_ADDR
// vc_weapon := 59 ;
83032: LD_ADDR_OWVAR 40
83036: PUSH
83037: LD_INT 59
83039: ST_TO_ADDR
// result := CreateVehicle ;
83040: LD_ADDR_VAR 0 5
83044: PUSH
83045: CALL_OW 45
83049: ST_TO_ADDR
// SetDir ( result , d ) ;
83050: LD_VAR 0 5
83054: PPUSH
83055: LD_VAR 0 4
83059: PPUSH
83060: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83064: LD_VAR 0 5
83068: PPUSH
83069: LD_VAR 0 2
83073: PPUSH
83074: LD_VAR 0 3
83078: PPUSH
83079: LD_INT 0
83081: PPUSH
83082: CALL_OW 48
// end ;
83086: LD_VAR 0 5
83090: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83091: LD_INT 0
83093: PPUSH
83094: PPUSH
83095: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83096: LD_ADDR_VAR 0 2
83100: PUSH
83101: LD_INT 0
83103: PUSH
83104: LD_INT 0
83106: PUSH
83107: LD_INT 0
83109: PUSH
83110: LD_INT 0
83112: PUSH
83113: EMPTY
83114: LIST
83115: LIST
83116: LIST
83117: LIST
83118: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83119: LD_VAR 0 1
83123: NOT
83124: IFTRUE 83157
83126: PUSH
83127: LD_VAR 0 1
83131: PPUSH
83132: CALL_OW 264
83136: PUSH
83137: LD_INT 12
83139: PUSH
83140: LD_INT 51
83142: PUSH
83143: LD_INT 32
83145: PUSH
83146: LD_INT 89
83148: PUSH
83149: EMPTY
83150: LIST
83151: LIST
83152: LIST
83153: LIST
83154: IN
83155: NOT
83156: OR
83157: IFFALSE 83161
// exit ;
83159: GO 83259
// for i := 1 to 3 do
83161: LD_ADDR_VAR 0 3
83165: PUSH
83166: DOUBLE
83167: LD_INT 1
83169: DEC
83170: ST_TO_ADDR
83171: LD_INT 3
83173: PUSH
83174: FOR_TO
83175: IFFALSE 83257
// begin tmp := GetCargo ( cargo , i ) ;
83177: LD_ADDR_VAR 0 4
83181: PUSH
83182: LD_VAR 0 1
83186: PPUSH
83187: LD_VAR 0 3
83191: PPUSH
83192: CALL_OW 289
83196: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83197: LD_ADDR_VAR 0 2
83201: PUSH
83202: LD_VAR 0 2
83206: PPUSH
83207: LD_VAR 0 3
83211: PPUSH
83212: LD_VAR 0 4
83216: PPUSH
83217: CALL_OW 1
83221: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83222: LD_ADDR_VAR 0 2
83226: PUSH
83227: LD_VAR 0 2
83231: PPUSH
83232: LD_INT 4
83234: PPUSH
83235: LD_VAR 0 2
83239: PUSH
83240: LD_INT 4
83242: ARRAY
83243: PUSH
83244: LD_VAR 0 4
83248: PLUS
83249: PPUSH
83250: CALL_OW 1
83254: ST_TO_ADDR
// end ;
83255: GO 83174
83257: POP
83258: POP
// end ;
83259: LD_VAR 0 2
83263: RET
// export function Length ( array ) ; begin
83264: LD_INT 0
83266: PPUSH
// result := array + 0 ;
83267: LD_ADDR_VAR 0 2
83271: PUSH
83272: LD_VAR 0 1
83276: PUSH
83277: LD_INT 0
83279: PLUS
83280: ST_TO_ADDR
// end ;
83281: LD_VAR 0 2
83285: RET
// export function PrepareArray ( array ) ; begin
83286: LD_INT 0
83288: PPUSH
// result := array diff 0 ;
83289: LD_ADDR_VAR 0 2
83293: PUSH
83294: LD_VAR 0 1
83298: PUSH
83299: LD_INT 0
83301: DIFF
83302: ST_TO_ADDR
// if not result [ 1 ] then
83303: LD_VAR 0 2
83307: PUSH
83308: LD_INT 1
83310: ARRAY
83311: NOT
83312: IFFALSE 83332
// result := Delete ( result , 1 ) ;
83314: LD_ADDR_VAR 0 2
83318: PUSH
83319: LD_VAR 0 2
83323: PPUSH
83324: LD_INT 1
83326: PPUSH
83327: CALL_OW 3
83331: ST_TO_ADDR
// end ;
83332: LD_VAR 0 2
83336: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83337: LD_INT 0
83339: PPUSH
83340: PPUSH
83341: PPUSH
83342: PPUSH
// sibRocketRange := 25 ;
83343: LD_ADDR_VAR 0 6
83347: PUSH
83348: LD_INT 25
83350: ST_TO_ADDR
// result := false ;
83351: LD_ADDR_VAR 0 4
83355: PUSH
83356: LD_INT 0
83358: ST_TO_ADDR
// for i := 0 to 5 do
83359: LD_ADDR_VAR 0 5
83363: PUSH
83364: DOUBLE
83365: LD_INT 0
83367: DEC
83368: ST_TO_ADDR
83369: LD_INT 5
83371: PUSH
83372: FOR_TO
83373: IFFALSE 83440
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83375: LD_VAR 0 1
83379: PPUSH
83380: LD_VAR 0 5
83384: PPUSH
83385: LD_VAR 0 6
83389: PPUSH
83390: CALL_OW 272
83394: PPUSH
83395: LD_VAR 0 2
83399: PPUSH
83400: LD_VAR 0 5
83404: PPUSH
83405: LD_VAR 0 6
83409: PPUSH
83410: CALL_OW 273
83414: PPUSH
83415: LD_VAR 0 3
83419: PPUSH
83420: CALL_OW 309
83424: IFFALSE 83438
// begin result := true ;
83426: LD_ADDR_VAR 0 4
83430: PUSH
83431: LD_INT 1
83433: ST_TO_ADDR
// exit ;
83434: POP
83435: POP
83436: GO 83442
// end ;
83438: GO 83372
83440: POP
83441: POP
// end ;
83442: LD_VAR 0 4
83446: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83447: LD_INT 0
83449: PPUSH
83450: PPUSH
83451: PPUSH
// if btype = b_depot then
83452: LD_VAR 0 2
83456: PUSH
83457: LD_INT 0
83459: EQUAL
83460: IFFALSE 83472
// begin result := true ;
83462: LD_ADDR_VAR 0 3
83466: PUSH
83467: LD_INT 1
83469: ST_TO_ADDR
// exit ;
83470: GO 83592
// end ; pom := GetBase ( depot ) ;
83472: LD_ADDR_VAR 0 4
83476: PUSH
83477: LD_VAR 0 1
83481: PPUSH
83482: CALL_OW 274
83486: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83487: LD_ADDR_VAR 0 5
83491: PUSH
83492: LD_VAR 0 2
83496: PPUSH
83497: LD_VAR 0 1
83501: PPUSH
83502: CALL_OW 248
83506: PPUSH
83507: CALL_OW 450
83511: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83512: LD_ADDR_VAR 0 3
83516: PUSH
83517: LD_VAR 0 4
83521: PPUSH
83522: LD_INT 1
83524: PPUSH
83525: CALL_OW 275
83529: PUSH
83530: LD_VAR 0 5
83534: PUSH
83535: LD_INT 1
83537: ARRAY
83538: GREATEREQUAL
83539: IFFALSE 83565
83541: PUSH
83542: LD_VAR 0 4
83546: PPUSH
83547: LD_INT 2
83549: PPUSH
83550: CALL_OW 275
83554: PUSH
83555: LD_VAR 0 5
83559: PUSH
83560: LD_INT 2
83562: ARRAY
83563: GREATEREQUAL
83564: AND
83565: IFFALSE 83591
83567: PUSH
83568: LD_VAR 0 4
83572: PPUSH
83573: LD_INT 3
83575: PPUSH
83576: CALL_OW 275
83580: PUSH
83581: LD_VAR 0 5
83585: PUSH
83586: LD_INT 3
83588: ARRAY
83589: GREATEREQUAL
83590: AND
83591: ST_TO_ADDR
// end ;
83592: LD_VAR 0 3
83596: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83597: LD_INT 0
83599: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83600: LD_VAR 0 1
83604: PPUSH
83605: LD_VAR 0 2
83609: PPUSH
83610: LD_INT 0
83612: PPUSH
83613: LD_INT 0
83615: PPUSH
83616: LD_INT 1
83618: PPUSH
83619: LD_INT 0
83621: PPUSH
83622: CALL_OW 587
// end ;
83626: LD_VAR 0 3
83630: RET
// export function CenterOnNow ( unit ) ; begin
83631: LD_INT 0
83633: PPUSH
// result := IsInUnit ( unit ) ;
83634: LD_ADDR_VAR 0 2
83638: PUSH
83639: LD_VAR 0 1
83643: PPUSH
83644: CALL_OW 310
83648: ST_TO_ADDR
// if not result then
83649: LD_VAR 0 2
83653: NOT
83654: IFFALSE 83666
// result := unit ;
83656: LD_ADDR_VAR 0 2
83660: PUSH
83661: LD_VAR 0 1
83665: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83666: LD_VAR 0 1
83670: PPUSH
83671: CALL_OW 87
// end ;
83675: LD_VAR 0 2
83679: RET
// export function ComMoveHex ( unit , hex ) ; begin
83680: LD_INT 0
83682: PPUSH
// if not hex then
83683: LD_VAR 0 2
83687: NOT
83688: IFFALSE 83692
// exit ;
83690: GO 83745
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83692: LD_VAR 0 2
83696: PUSH
83697: LD_INT 1
83699: ARRAY
83700: PPUSH
83701: LD_VAR 0 2
83705: PUSH
83706: LD_INT 2
83708: ARRAY
83709: PPUSH
83710: CALL_OW 428
83714: IFFALSE 83718
// exit ;
83716: GO 83745
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83718: LD_VAR 0 1
83722: PPUSH
83723: LD_VAR 0 2
83727: PUSH
83728: LD_INT 1
83730: ARRAY
83731: PPUSH
83732: LD_VAR 0 2
83736: PUSH
83737: LD_INT 2
83739: ARRAY
83740: PPUSH
83741: CALL_OW 111
// end ;
83745: LD_VAR 0 3
83749: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83750: LD_INT 0
83752: PPUSH
83753: PPUSH
83754: PPUSH
// if not unit or not enemy then
83755: LD_VAR 0 1
83759: NOT
83760: IFTRUE 83769
83762: PUSH
83763: LD_VAR 0 2
83767: NOT
83768: OR
83769: IFFALSE 83773
// exit ;
83771: GO 83899
// x := GetX ( enemy ) ;
83773: LD_ADDR_VAR 0 4
83777: PUSH
83778: LD_VAR 0 2
83782: PPUSH
83783: CALL_OW 250
83787: ST_TO_ADDR
// y := GetY ( enemy ) ;
83788: LD_ADDR_VAR 0 5
83792: PUSH
83793: LD_VAR 0 2
83797: PPUSH
83798: CALL_OW 251
83802: ST_TO_ADDR
// if ValidHex ( x , y ) then
83803: LD_VAR 0 4
83807: PPUSH
83808: LD_VAR 0 5
83812: PPUSH
83813: CALL_OW 488
83817: IFFALSE 83899
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83819: LD_VAR 0 2
83823: PPUSH
83824: CALL_OW 247
83828: PUSH
83829: LD_INT 3
83831: PUSH
83832: LD_INT 2
83834: PUSH
83835: EMPTY
83836: LIST
83837: LIST
83838: IN
83839: IFTRUE 83862
83841: PUSH
83842: LD_VAR 0 1
83846: PPUSH
83847: CALL_OW 255
83851: PPUSH
83852: LD_VAR 0 2
83856: PPUSH
83857: CALL_OW 292
83861: OR
83862: IFFALSE 83880
// ComAttackUnit ( unit , enemy ) else
83864: LD_VAR 0 1
83868: PPUSH
83869: LD_VAR 0 2
83873: PPUSH
83874: CALL_OW 115
83878: GO 83899
// ComAgressiveMove ( unit , x , y ) ;
83880: LD_VAR 0 1
83884: PPUSH
83885: LD_VAR 0 4
83889: PPUSH
83890: LD_VAR 0 5
83894: PPUSH
83895: CALL_OW 114
// end ;
83899: LD_VAR 0 3
83903: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83904: LD_INT 0
83906: PPUSH
83907: PPUSH
83908: PPUSH
// list := AreaToList ( area , 0 ) ;
83909: LD_ADDR_VAR 0 5
83913: PUSH
83914: LD_VAR 0 1
83918: PPUSH
83919: LD_INT 0
83921: PPUSH
83922: CALL_OW 517
83926: ST_TO_ADDR
// if not list then
83927: LD_VAR 0 5
83931: NOT
83932: IFFALSE 83936
// exit ;
83934: GO 84066
// if all then
83936: LD_VAR 0 2
83940: IFFALSE 84028
// begin for i := 1 to list [ 1 ] do
83942: LD_ADDR_VAR 0 4
83946: PUSH
83947: DOUBLE
83948: LD_INT 1
83950: DEC
83951: ST_TO_ADDR
83952: LD_VAR 0 5
83956: PUSH
83957: LD_INT 1
83959: ARRAY
83960: PUSH
83961: FOR_TO
83962: IFFALSE 84024
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83964: LD_ADDR_VAR 0 3
83968: PUSH
83969: LD_VAR 0 3
83973: PPUSH
83974: LD_VAR 0 3
83978: PUSH
83979: LD_INT 1
83981: PLUS
83982: PPUSH
83983: LD_VAR 0 5
83987: PUSH
83988: LD_INT 1
83990: ARRAY
83991: PUSH
83992: LD_VAR 0 4
83996: ARRAY
83997: PUSH
83998: LD_VAR 0 5
84002: PUSH
84003: LD_INT 2
84005: ARRAY
84006: PUSH
84007: LD_VAR 0 4
84011: ARRAY
84012: PUSH
84013: EMPTY
84014: LIST
84015: LIST
84016: PPUSH
84017: CALL_OW 1
84021: ST_TO_ADDR
84022: GO 83961
84024: POP
84025: POP
// exit ;
84026: GO 84066
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
84028: LD_ADDR_VAR 0 3
84032: PUSH
84033: LD_VAR 0 5
84037: PUSH
84038: LD_INT 1
84040: ARRAY
84041: PUSH
84042: LD_INT 1
84044: ARRAY
84045: PUSH
84046: LD_VAR 0 5
84050: PUSH
84051: LD_INT 2
84053: ARRAY
84054: PUSH
84055: LD_INT 1
84057: ARRAY
84058: PUSH
84059: EMPTY
84060: LIST
84061: LIST
84062: PUSH
84063: EMPTY
84064: LIST
84065: ST_TO_ADDR
// end ;
84066: LD_VAR 0 3
84070: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84071: LD_INT 0
84073: PPUSH
84074: PPUSH
// list := AreaToList ( area , 0 ) ;
84075: LD_ADDR_VAR 0 4
84079: PUSH
84080: LD_VAR 0 1
84084: PPUSH
84085: LD_INT 0
84087: PPUSH
84088: CALL_OW 517
84092: ST_TO_ADDR
// if not list then
84093: LD_VAR 0 4
84097: NOT
84098: IFFALSE 84102
// exit ;
84100: GO 84143
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
84102: LD_ADDR_VAR 0 3
84106: PUSH
84107: LD_VAR 0 4
84111: PUSH
84112: LD_INT 1
84114: ARRAY
84115: PUSH
84116: LD_INT 1
84118: ARRAY
84119: PUSH
84120: LD_VAR 0 4
84124: PUSH
84125: LD_INT 2
84127: ARRAY
84128: PUSH
84129: LD_INT 1
84131: ARRAY
84132: PUSH
84133: LD_VAR 0 2
84137: PUSH
84138: EMPTY
84139: LIST
84140: LIST
84141: LIST
84142: ST_TO_ADDR
// end ;
84143: LD_VAR 0 3
84147: RET
// export function First ( array ) ; begin
84148: LD_INT 0
84150: PPUSH
// if not array then
84151: LD_VAR 0 1
84155: NOT
84156: IFFALSE 84160
// exit ;
84158: GO 84174
// result := array [ 1 ] ;
84160: LD_ADDR_VAR 0 2
84164: PUSH
84165: LD_VAR 0 1
84169: PUSH
84170: LD_INT 1
84172: ARRAY
84173: ST_TO_ADDR
// end ;
84174: LD_VAR 0 2
84178: RET
// export function Last ( array ) ; begin
84179: LD_INT 0
84181: PPUSH
// if not array then
84182: LD_VAR 0 1
84186: NOT
84187: IFFALSE 84191
// exit ;
84189: GO 84207
// result := array [ array ] ;
84191: LD_ADDR_VAR 0 2
84195: PUSH
84196: LD_VAR 0 1
84200: PUSH
84201: LD_VAR 0 1
84205: ARRAY
84206: ST_TO_ADDR
// end ;
84207: LD_VAR 0 2
84211: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84212: LD_INT 0
84214: PPUSH
84215: PPUSH
// result := [ ] ;
84216: LD_ADDR_VAR 0 5
84220: PUSH
84221: EMPTY
84222: ST_TO_ADDR
// if not array then
84223: LD_VAR 0 1
84227: NOT
84228: IFFALSE 84232
// exit ;
84230: GO 84344
// for i := 1 to array do
84232: LD_ADDR_VAR 0 6
84236: PUSH
84237: DOUBLE
84238: LD_INT 1
84240: DEC
84241: ST_TO_ADDR
84242: LD_VAR 0 1
84246: PUSH
84247: FOR_TO
84248: IFFALSE 84342
// if array [ i ] [ index ] = value then
84250: LD_VAR 0 1
84254: PUSH
84255: LD_VAR 0 6
84259: ARRAY
84260: PUSH
84261: LD_VAR 0 2
84265: ARRAY
84266: PUSH
84267: LD_VAR 0 3
84271: EQUAL
84272: IFFALSE 84340
// begin if indexColumn then
84274: LD_VAR 0 4
84278: IFFALSE 84314
// result := Join ( result , array [ i ] [ indexColumn ] ) else
84280: LD_ADDR_VAR 0 5
84284: PUSH
84285: LD_VAR 0 5
84289: PPUSH
84290: LD_VAR 0 1
84294: PUSH
84295: LD_VAR 0 6
84299: ARRAY
84300: PUSH
84301: LD_VAR 0 4
84305: ARRAY
84306: PPUSH
84307: CALL 79352 0 2
84311: ST_TO_ADDR
84312: GO 84340
// result := Join ( result , array [ i ] ) ;
84314: LD_ADDR_VAR 0 5
84318: PUSH
84319: LD_VAR 0 5
84323: PPUSH
84324: LD_VAR 0 1
84328: PUSH
84329: LD_VAR 0 6
84333: ARRAY
84334: PPUSH
84335: CALL 79352 0 2
84339: ST_TO_ADDR
// end ;
84340: GO 84247
84342: POP
84343: POP
// end ;
84344: LD_VAR 0 5
84348: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84349: LD_INT 0
84351: PPUSH
// if not vehicles or not parkingPoint then
84352: LD_VAR 0 1
84356: NOT
84357: IFTRUE 84366
84359: PUSH
84360: LD_VAR 0 2
84364: NOT
84365: OR
84366: IFFALSE 84370
// exit ;
84368: GO 84468
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84370: LD_ADDR_VAR 0 1
84374: PUSH
84375: LD_VAR 0 1
84379: PPUSH
84380: LD_INT 50
84382: PUSH
84383: EMPTY
84384: LIST
84385: PUSH
84386: LD_INT 3
84388: PUSH
84389: LD_INT 92
84391: PUSH
84392: LD_VAR 0 2
84396: PUSH
84397: LD_INT 1
84399: ARRAY
84400: PUSH
84401: LD_VAR 0 2
84405: PUSH
84406: LD_INT 2
84408: ARRAY
84409: PUSH
84410: LD_INT 8
84412: PUSH
84413: EMPTY
84414: LIST
84415: LIST
84416: LIST
84417: LIST
84418: PUSH
84419: EMPTY
84420: LIST
84421: LIST
84422: PUSH
84423: EMPTY
84424: LIST
84425: LIST
84426: PPUSH
84427: CALL_OW 72
84431: ST_TO_ADDR
// if not vehicles then
84432: LD_VAR 0 1
84436: NOT
84437: IFFALSE 84441
// exit ;
84439: GO 84468
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84441: LD_VAR 0 1
84445: PPUSH
84446: LD_VAR 0 2
84450: PUSH
84451: LD_INT 1
84453: ARRAY
84454: PPUSH
84455: LD_VAR 0 2
84459: PUSH
84460: LD_INT 2
84462: ARRAY
84463: PPUSH
84464: CALL_OW 111
// end ;
84468: LD_VAR 0 3
84472: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84473: LD_INT 0
84475: PPUSH
84476: PPUSH
84477: PPUSH
// if not side or not area then
84478: LD_VAR 0 1
84482: NOT
84483: IFTRUE 84492
84485: PUSH
84486: LD_VAR 0 2
84490: NOT
84491: OR
84492: IFFALSE 84496
// exit ;
84494: GO 84615
// tmp := AreaToList ( area , 0 ) ;
84496: LD_ADDR_VAR 0 5
84500: PUSH
84501: LD_VAR 0 2
84505: PPUSH
84506: LD_INT 0
84508: PPUSH
84509: CALL_OW 517
84513: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84514: LD_ADDR_VAR 0 4
84518: PUSH
84519: DOUBLE
84520: LD_INT 1
84522: DEC
84523: ST_TO_ADDR
84524: LD_VAR 0 5
84528: PUSH
84529: LD_INT 1
84531: ARRAY
84532: PUSH
84533: FOR_TO
84534: IFFALSE 84613
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84536: LD_VAR 0 5
84540: PUSH
84541: LD_INT 1
84543: ARRAY
84544: PUSH
84545: LD_VAR 0 4
84549: ARRAY
84550: PPUSH
84551: LD_VAR 0 5
84555: PUSH
84556: LD_INT 2
84558: ARRAY
84559: PUSH
84560: LD_VAR 0 4
84564: ARRAY
84565: PPUSH
84566: CALL_OW 351
84570: IFFALSE 84611
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84572: LD_VAR 0 5
84576: PUSH
84577: LD_INT 1
84579: ARRAY
84580: PUSH
84581: LD_VAR 0 4
84585: ARRAY
84586: PPUSH
84587: LD_VAR 0 5
84591: PUSH
84592: LD_INT 2
84594: ARRAY
84595: PUSH
84596: LD_VAR 0 4
84600: ARRAY
84601: PPUSH
84602: LD_VAR 0 1
84606: PPUSH
84607: CALL_OW 244
// end ;
84611: GO 84533
84613: POP
84614: POP
// end ;
84615: LD_VAR 0 3
84619: RET
// export function UniqueArray ( array ) ; var i ; begin
84620: LD_INT 0
84622: PPUSH
84623: PPUSH
// result := [ ] ;
84624: LD_ADDR_VAR 0 2
84628: PUSH
84629: EMPTY
84630: ST_TO_ADDR
// if not array then
84631: LD_VAR 0 1
84635: NOT
84636: IFFALSE 84640
// exit ;
84638: GO 84701
// for i := 1 to array do
84640: LD_ADDR_VAR 0 3
84644: PUSH
84645: DOUBLE
84646: LD_INT 1
84648: DEC
84649: ST_TO_ADDR
84650: LD_VAR 0 1
84654: PUSH
84655: FOR_TO
84656: IFFALSE 84699
// if not array [ i ] in result then
84658: LD_VAR 0 1
84662: PUSH
84663: LD_VAR 0 3
84667: ARRAY
84668: PUSH
84669: LD_VAR 0 2
84673: IN
84674: NOT
84675: IFFALSE 84697
// result := Join ( result , i ) ;
84677: LD_ADDR_VAR 0 2
84681: PUSH
84682: LD_VAR 0 2
84686: PPUSH
84687: LD_VAR 0 3
84691: PPUSH
84692: CALL 79352 0 2
84696: ST_TO_ADDR
84697: GO 84655
84699: POP
84700: POP
// end ; end_of_file
84701: LD_VAR 0 2
84705: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84706: LD_VAR 0 1
84710: PUSH
84711: LD_INT 200
84713: DOUBLE
84714: GREATEREQUAL
84715: IFFALSE 84723
84717: LD_INT 299
84719: DOUBLE
84720: LESSEQUAL
84721: IFTRUE 84725
84723: GO 84757
84725: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84726: LD_VAR 0 1
84730: PPUSH
84731: LD_VAR 0 2
84735: PPUSH
84736: LD_VAR 0 3
84740: PPUSH
84741: LD_VAR 0 4
84745: PPUSH
84746: LD_VAR 0 5
84750: PPUSH
84751: CALL 36463 0 5
84755: GO 84834
84757: LD_INT 300
84759: DOUBLE
84760: GREATEREQUAL
84761: IFFALSE 84769
84763: LD_INT 399
84765: DOUBLE
84766: LESSEQUAL
84767: IFTRUE 84771
84769: GO 84833
84771: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84772: LD_VAR 0 1
84776: PPUSH
84777: LD_VAR 0 2
84781: PPUSH
84782: LD_VAR 0 3
84786: PPUSH
84787: LD_VAR 0 4
84791: PPUSH
84792: LD_VAR 0 5
84796: PPUSH
84797: LD_VAR 0 6
84801: PPUSH
84802: LD_VAR 0 7
84806: PPUSH
84807: LD_VAR 0 8
84811: PPUSH
84812: LD_VAR 0 9
84816: PPUSH
84817: LD_VAR 0 10
84821: PPUSH
84822: LD_VAR 0 11
84826: PPUSH
84827: CALL 32347 0 11
84831: GO 84834
84833: POP
// end ;
84834: PPOPN 11
84836: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84837: LD_VAR 0 1
84841: PPUSH
84842: LD_VAR 0 2
84846: PPUSH
84847: LD_VAR 0 3
84851: PPUSH
84852: LD_VAR 0 4
84856: PPUSH
84857: LD_VAR 0 5
84861: PPUSH
84862: CALL 35844 0 5
// end ; end_of_file
84866: PPOPN 5
84868: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84869: LD_VAR 0 1
84873: PPUSH
84874: LD_VAR 0 2
84878: PPUSH
84879: LD_VAR 0 3
84883: PPUSH
84884: LD_VAR 0 4
84888: PPUSH
84889: LD_VAR 0 5
84893: PPUSH
84894: LD_VAR 0 6
84898: PPUSH
84899: CALL 19887 0 6
// end ;
84903: PPOPN 6
84905: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84906: LD_INT 0
84908: PPUSH
// begin if not units then
84909: LD_VAR 0 1
84913: NOT
84914: IFFALSE 84918
// exit ;
84916: GO 84918
// end ;
84918: PPOPN 7
84920: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84921: CALL 19774 0 0
// end ;
84925: PPOPN 1
84927: END
