// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4687 0 0
// PrepareRussianBase ;
  29: CALL 2976 0 0
// PrepareRussianCommander ;
  33: CALL 2927 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8306 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild = 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode = 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible = 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack = 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson = 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase = 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer = 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus = 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer = 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog = 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog = 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog = 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil = 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower = 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable = 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter = 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor = 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 38864 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 38864 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: LD_EXP 49
 585: PPUSH
 586: CALL 38864 0 3
 590: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 591: LD_ADDR_EXP 8
 595: PUSH
 596: LD_STRING Dickens
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: LD_EXP 49
 606: PPUSH
 607: CALL 38864 0 3
 611: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 612: LD_ADDR_EXP 9
 616: PUSH
 617: LD_STRING Woodruff
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_EXP 49
 627: PPUSH
 628: CALL 38864 0 3
 632: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 633: LD_ADDR_EXP 12
 637: PUSH
 638: LD_STRING Campell
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_EXP 49
 648: PPUSH
 649: CALL 38864 0 3
 653: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING Knight
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: LD_EXP 49
 669: PPUSH
 670: CALL 38864 0 3
 674: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 675: LD_ADDR_EXP 11
 679: PUSH
 680: LD_STRING Claptopn
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_EXP 49
 690: PPUSH
 691: CALL 38864 0 3
 695: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING Harisson
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: LD_EXP 49
 711: PPUSH
 712: CALL 38864 0 3
 716: ST_TO_ADDR
// if not Lisa then
 717: LD_EXP 4
 721: NOT
 722: IFFALSE 745
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 724: LD_ADDR_EXP 2
 728: PUSH
 729: LD_STRING Bobby
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_EXP 49
 739: PPUSH
 740: CALL 38864 0 3
 744: ST_TO_ADDR
// if not Lisa and not Bobby then
 745: LD_EXP 4
 749: NOT
 750: PUSH
 751: LD_EXP 2
 755: NOT
 756: AND
 757: IFFALSE 780
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 759: LD_ADDR_EXP 3
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_EXP 49
 774: PPUSH
 775: CALL 38864 0 3
 779: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 780: LD_EXP 4
 784: NOT
 785: PUSH
 786: LD_EXP 2
 790: NOT
 791: AND
 792: PUSH
 793: LD_EXP 3
 797: NOT
 798: AND
 799: IFFALSE 898
// begin tmp = CreateCharacterSet ( 03_others ) ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 31
 813: ST_TO_ADDR
// if tmp then
 814: LD_VAR 0 3
 818: IFFALSE 875
// begin RandomBeforeMission = tmp [ 1 ] ;
 820: LD_ADDR_EXP 6
 824: PUSH
 825: LD_VAR 0 3
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 834: LD_STRING 03_others
 836: PPUSH
 837: CALL_OW 40
// if tmp > 1 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: GREATER
 849: IFFALSE 873
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: DIFF
 865: PPUSH
 866: LD_STRING 03_others
 868: PPUSH
 869: CALL_OW 38
// end else
 873: GO 898
// begin PrepareHuman ( false , 1 , 3 ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: LD_INT 3
 883: PPUSH
 884: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 888: LD_ADDR_EXP 6
 892: PUSH
 893: CALL_OW 44
 897: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 4
 905: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 906: LD_ADDR_EXP 13
 910: PUSH
 911: LD_STRING Donaldson
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: LD_EXP 49
 921: PPUSH
 922: CALL 38864 0 3
 926: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Frank
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 38864 0 3
 947: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 32
 955: PPUSH
 956: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 960: LD_EXP 7
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 975: LD_EXP 7
 979: PPUSH
 980: LD_INT 32
 982: PPUSH
 983: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 987: LD_EXP 8
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1002: LD_EXP 9
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1017: LD_EXP 12
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1032: LD_EXP 10
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1047: LD_EXP 11
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 49
// if Lisa = false then
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1087: LD_EXP 2
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// if Lisa = false and Bobby = false then
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: PUSH
1111: LD_EXP 2
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1137: LD_EXP 4
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: PUSH
1146: LD_EXP 2
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: PUSH
1156: LD_EXP 3
1160: PUSH
1161: LD_INT 0
1163: EQUAL
1164: AND
1165: IFFALSE 1182
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1167: LD_EXP 6
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 49
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1187: LD_INT 0
1189: PPUSH
1190: PPUSH
1191: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1192: LD_EXP 13
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// if Frank then
1207: LD_EXP 5
1211: IFFALSE 1228
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1213: LD_EXP 5
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// uc_nation = 1 ;
1228: LD_ADDR_OWVAR 21
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// uc_side = 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// hc_class := 3 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING SecondCharsGal
1267: ST_TO_ADDR
// hc_face_number := 53 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 53
1275: ST_TO_ADDR
// hc_name := Freddie Warner ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Freddie Warner
1283: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 8
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 2
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 56 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 56
1401: ST_TO_ADDR
// hc_name := Mel Brennan ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Mel Brennan
1409: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 12
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// hc_class := 1 ;
1496: LD_ADDR_OWVAR 28
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_sex := sex_male ;
1504: LD_ADDR_OWVAR 27
1508: PUSH
1509: LD_INT 1
1511: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING AmGalRemake
1519: ST_TO_ADDR
// hc_face_number := 5 ;
1520: LD_ADDR_OWVAR 34
1524: PUSH
1525: LD_INT 5
1527: ST_TO_ADDR
// hc_name := Bob Joplin ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Bob Joplin
1535: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1536: LD_ADDR_OWVAR 29
1540: PUSH
1541: LD_INT 10
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1551: LD_ADDR_OWVAR 30
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1574: LD_ADDR_OWVAR 31
1578: PUSH
1579: LD_INT 3
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// un = CreateHuman ;
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: CALL_OW 44
1606: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1607: LD_VAR 0 3
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// hc_class := 3 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// hc_sex := sex_female ;
1630: LD_ADDR_OWVAR 27
1634: PUSH
1635: LD_INT 2
1637: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING AmGalRemake
1645: ST_TO_ADDR
// hc_face_number := 8 ;
1646: LD_ADDR_OWVAR 34
1650: PUSH
1651: LD_INT 8
1653: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1654: LD_ADDR_OWVAR 26
1658: PUSH
1659: LD_STRING Elizabeth Whitney
1661: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1662: LD_ADDR_OWVAR 29
1666: PUSH
1667: LD_INT 9
1669: PUSH
1670: LD_INT 11
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1677: LD_ADDR_OWVAR 30
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1700: LD_ADDR_OWVAR 31
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: LD_INT 4
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// un = CreateHuman ;
1723: LD_ADDR_VAR 0 3
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// InitHc ;
1748: CALL_OW 19
// end ;
1752: LD_VAR 0 1
1756: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
1761: PPUSH
1762: PPUSH
// uc_nation = 1 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// uc_side = 1 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 2
1786: ST_TO_ADDR
// vc_engine := engine_combustion ;
1787: LD_ADDR_OWVAR 39
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_control := control_manual ;
1795: LD_ADDR_OWVAR 38
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1803: LD_ADDR_OWVAR 41
1807: PUSH
1808: LD_INT 65
1810: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_OWVAR 67
1838: ARRAY
1839: ST_TO_ADDR
// veh := CreateVehicle ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 2
1857: PPUSH
1858: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: CALL_OW 428
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: IFFALSE 1898
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1878: LD_VAR 0 5
1882: PPUSH
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 48
1896: GO 1916
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1898: LD_VAR 0 5
1902: PPUSH
1903: LD_INT 23
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 48
// hc_class := 1 ;
1916: LD_ADDR_OWVAR 28
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_sex := sex_male ;
1924: LD_ADDR_OWVAR 27
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1932: LD_ADDR_OWVAR 33
1936: PUSH
1937: LD_STRING SecondCharsGal
1939: ST_TO_ADDR
// hc_face_number := 59 ;
1940: LD_ADDR_OWVAR 34
1944: PUSH
1945: LD_INT 59
1947: ST_TO_ADDR
// hc_name := Max Gray ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING Max Gray
1955: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 9
1963: PUSH
1964: LD_INT 11
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1971: LD_ADDR_OWVAR 30
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1994: LD_ADDR_OWVAR 31
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 0
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: ST_TO_ADDR
// un = CreateHuman ;
2017: LD_ADDR_VAR 0 4
2021: PUSH
2022: CALL_OW 44
2026: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_INT 11
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// hc_class := 2 ;
2042: LD_ADDR_OWVAR 28
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_sex := sex_male ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2058: LD_ADDR_OWVAR 33
2062: PUSH
2063: LD_STRING SecondCharsGal
2065: ST_TO_ADDR
// hc_face_number := 50 ;
2066: LD_ADDR_OWVAR 34
2070: PUSH
2071: LD_INT 50
2073: ST_TO_ADDR
// hc_name := Frank Hughes ;
2074: LD_ADDR_OWVAR 26
2078: PUSH
2079: LD_STRING Frank Hughes
2081: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2082: LD_ADDR_OWVAR 29
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: LD_INT 10
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2097: LD_ADDR_OWVAR 30
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 11
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// hc_class := 1 ;
2168: LD_ADDR_OWVAR 28
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_sex := sex_male ;
2176: LD_ADDR_OWVAR 27
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2184: LD_ADDR_OWVAR 33
2188: PUSH
2189: LD_STRING SecondCharsGal
2191: ST_TO_ADDR
// hc_face_number := 54 ;
2192: LD_ADDR_OWVAR 34
2196: PUSH
2197: LD_INT 54
2199: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_STRING Luigi Ghbellin
2207: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2208: LD_ADDR_OWVAR 29
2212: PUSH
2213: LD_INT 11
2215: PUSH
2216: LD_INT 11
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2223: LD_ADDR_OWVAR 30
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2246: LD_ADDR_OWVAR 31
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// un = CreateHuman ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: CALL_OW 44
2278: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2279: LD_VAR 0 4
2283: PPUSH
2284: LD_INT 11
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL_OW 49
// hc_class := 3 ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 3
2301: ST_TO_ADDR
// hc_sex := sex_male ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2310: LD_ADDR_OWVAR 33
2314: PUSH
2315: LD_STRING AmGalRemake
2317: ST_TO_ADDR
// hc_face_number := 6 ;
2318: LD_ADDR_OWVAR 34
2322: PUSH
2323: LD_INT 6
2325: ST_TO_ADDR
// hc_name := Leon Carter ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Leon Carter
2333: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2334: LD_ADDR_OWVAR 29
2338: PUSH
2339: LD_INT 10
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2349: LD_ADDR_OWVAR 30
2353: PUSH
2354: LD_INT 0
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2372: LD_ADDR_OWVAR 31
2376: PUSH
2377: LD_INT 0
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: ST_TO_ADDR
// un = CreateHuman ;
2395: LD_ADDR_VAR 0 4
2399: PUSH
2400: CALL_OW 44
2404: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2405: LD_VAR 0 4
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 52
// if count = 4 then
2419: LD_VAR 0 1
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2555
// begin hc_class := 1 ;
2429: LD_ADDR_OWVAR 28
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_sex := sex_male ;
2437: LD_ADDR_OWVAR 27
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING SecondCharsGal
2452: ST_TO_ADDR
// hc_face_number := 34 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 34
2460: ST_TO_ADDR
// hc_name := Ian Hill ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING Ian Hill
2468: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2469: LD_ADDR_OWVAR 29
2473: PUSH
2474: LD_INT 10
2476: PUSH
2477: LD_INT 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2484: LD_ADDR_OWVAR 30
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: LD_INT 0
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2507: LD_ADDR_OWVAR 31
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: ST_TO_ADDR
// un = CreateHuman ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: CALL_OW 44
2539: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2540: LD_VAR 0 4
2544: PPUSH
2545: LD_INT 11
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 49
// end ; if count = 5 then
2555: LD_VAR 0 1
2559: PUSH
2560: LD_INT 5
2562: EQUAL
2563: IFFALSE 2817
// begin hc_class := 1 ;
2565: LD_ADDR_OWVAR 28
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_sex := sex_male ;
2573: LD_ADDR_OWVAR 27
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2581: LD_ADDR_OWVAR 33
2585: PUSH
2586: LD_STRING SecondCharsGal
2588: ST_TO_ADDR
// hc_face_number := 34 ;
2589: LD_ADDR_OWVAR 34
2593: PUSH
2594: LD_INT 34
2596: ST_TO_ADDR
// hc_name := Ian Hill ;
2597: LD_ADDR_OWVAR 26
2601: PUSH
2602: LD_STRING Ian Hill
2604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2605: LD_ADDR_OWVAR 29
2609: PUSH
2610: LD_INT 10
2612: PUSH
2613: LD_INT 12
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2620: LD_ADDR_OWVAR 30
2624: PUSH
2625: LD_INT 1
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 0
2633: PUSH
2634: LD_INT 0
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2643: LD_ADDR_OWVAR 31
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: ST_TO_ADDR
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// hc_class := 1 ;
2691: LD_ADDR_OWVAR 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// hc_sex := sex_female ;
2699: LD_ADDR_OWVAR 27
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2707: LD_ADDR_OWVAR 33
2711: PUSH
2712: LD_STRING SecondCharsGal
2714: ST_TO_ADDR
// hc_face_number := 41 ;
2715: LD_ADDR_OWVAR 34
2719: PUSH
2720: LD_INT 41
2722: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2723: LD_ADDR_OWVAR 26
2727: PUSH
2728: LD_STRING Kate Wadsworth
2730: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2731: LD_ADDR_OWVAR 29
2735: PUSH
2736: LD_INT 9
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2746: LD_ADDR_OWVAR 30
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2769: LD_ADDR_OWVAR 31
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// un = CreateHuman ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 11
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2817: LD_INT 11
2819: PPUSH
2820: LD_INT 22
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 21
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 26
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 70
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2868: LD_INT 11
2870: PPUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 26
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 70
2910: PUSH
2911: LD_INT 1
2913: ARRAY
2914: PPUSH
2915: LD_STRING D6-Sol3-1
2917: PPUSH
2918: CALL_OW 88
// end ; end_of_file
2922: LD_VAR 0 2
2926: RET
// export function PrepareRussianCommander ; begin
2927: LD_INT 0
2929: PPUSH
// uc_side = 3 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// uc_nation = 3 ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Stolypin
2953: PPUSH
2954: CALL_OW 25
2958: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2959: LD_EXP 15
2963: PPUSH
2964: LD_INT 21
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: LD_VAR 0 1
2975: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// if Difficulty > 1 then
2982: LD_OWVAR 67
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3100
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := 3 ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// InitHc_All ( ) ;
3008: CALL_OW 584
// InitBc ;
3012: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3016: LD_INT 0
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL_OW 380
// bc_type := b_breastwork ;
3029: LD_ADDR_OWVAR 42
3033: PUSH
3034: LD_INT 31
3036: ST_TO_ADDR
// bc_level := 4 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 4
3044: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3045: LD_ADDR_VAR 0 3
3049: PUSH
3050: LD_INT 100
3052: PPUSH
3053: LD_INT 58
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 5
3081: PPUSH
3082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3086: LD_VAR 0 4
3090: PPUSH
3091: LD_VAR 0 3
3095: PPUSH
3096: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3100: LD_INT 3
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 22
3108: PPUSH
3109: LD_EXP 16
3113: PPUSH
3114: LD_EXP 17
3118: PPUSH
3119: CALL_OW 12
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 4
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 6
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_OWVAR 67
3149: ARRAY
3150: PPUSH
3151: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 21
3163: PPUSH
3164: LD_EXP 16
3168: PPUSH
3169: LD_EXP 17
3173: PPUSH
3174: CALL_OW 12
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: LD_EXP 16
3202: PPUSH
3203: LD_EXP 17
3207: PPUSH
3208: CALL_OW 12
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 24
3231: PPUSH
3232: LD_EXP 16
3236: PPUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 5
3252: PPUSH
3253: CALL 4353 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3332
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3294: LD_INT 3
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: LD_EXP 17
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL 4353 0 6
3330: GO 3291
3332: POP
3333: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 30
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: FOR_IN
3369: IFFALSE 3397
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL 4462 0 2
3395: GO 3368
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 1
3403: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 6 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 6
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// InitHC_All ( ) ;
3426: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: DOUBLE
3436: LD_INT 1
3438: DEC
3439: ST_TO_ADDR
3440: LD_INT 1
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: LD_INT 2
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_OWVAR 67
3462: ARRAY
3463: PUSH
3464: FOR_TO
3465: IFFALSE 3633
// begin vc_engine = 1 ;
3467: LD_ADDR_OWVAR 39
3471: PUSH
3472: LD_INT 1
3474: ST_TO_ADDR
// vc_control = 1 ;
3475: LD_ADDR_OWVAR 38
3479: PUSH
3480: LD_INT 1
3482: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3483: LD_ADDR_OWVAR 40
3487: PUSH
3488: LD_INT 42
3490: PUSH
3491: LD_INT 42
3493: PUSH
3494: LD_INT 43
3496: PUSH
3497: LD_INT 43
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: LD_OWVAR 67
3510: ARRAY
3511: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3512: LD_ADDR_OWVAR 37
3516: PUSH
3517: LD_INT 21
3519: PUSH
3520: LD_INT 22
3522: PUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 22
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_OWVAR 67
3539: ARRAY
3540: ST_TO_ADDR
// veh = CreateVehicle ;
3541: LD_ADDR_VAR 0 3
3545: PUSH
3546: CALL_OW 45
3550: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_INT 3
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// hc_gallery =  ;
3566: LD_ADDR_OWVAR 33
3570: PUSH
3571: LD_STRING 
3573: ST_TO_ADDR
// hc_name =  ;
3574: LD_ADDR_OWVAR 26
3578: PUSH
3579: LD_STRING 
3581: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3582: LD_INT 0
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: LD_EXP 16
3592: PPUSH
3593: LD_EXP 17
3597: PPUSH
3598: CALL_OW 12
3602: PPUSH
3603: CALL_OW 380
// un = CreateHuman ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: CALL_OW 44
3616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3617: LD_VAR 0 4
3621: PPUSH
3622: LD_VAR 0 3
3626: PPUSH
3627: CALL_OW 52
// end ;
3631: GO 3464
3633: POP
3634: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3635: LD_INT 0
3637: PPUSH
3638: LD_INT 2
3640: PPUSH
3641: LD_EXP 16
3645: PPUSH
3646: LD_EXP 17
3650: PPUSH
3651: CALL_OW 12
3655: PUSH
3656: LD_INT 2
3658: PLUS
3659: PPUSH
3660: CALL_OW 380
// un = CreateHuman ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3689: LD_INT 0
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_EXP 16
3699: PPUSH
3700: LD_EXP 17
3704: PPUSH
3705: CALL_OW 12
3709: PUSH
3710: LD_INT 2
3712: PLUS
3713: PPUSH
3714: CALL_OW 380
// un = CreateHuman ;
3718: LD_ADDR_VAR 0 4
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3728: LD_VAR 0 4
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 2
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_OWVAR 67
3775: ARRAY
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 3
3782: PPUSH
3783: CALL_OW 12
3787: PLUS
3788: PUSH
3789: FOR_TO
3790: IFFALSE 3860
// begin hc_gallery =  ;
3792: LD_ADDR_OWVAR 33
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// hc_name =  ;
3800: LD_ADDR_OWVAR 26
3804: PUSH
3805: LD_STRING 
3807: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_EXP 16
3818: PPUSH
3819: LD_EXP 17
3823: PPUSH
3824: CALL_OW 12
3828: PPUSH
3829: CALL_OW 380
// un = CreateHuman ;
3833: LD_ADDR_VAR 0 4
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3843: LD_VAR 0 4
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 49
// end ;
3858: GO 3789
3860: POP
3861: POP
// vc_engine = 1 ;
3862: LD_ADDR_OWVAR 39
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// vc_control = 1 ;
3870: LD_ADDR_OWVAR 38
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// vc_weapon = 51 ;
3878: LD_ADDR_OWVAR 40
3882: PUSH
3883: LD_INT 51
3885: ST_TO_ADDR
// vc_chassis = 22 ;
3886: LD_ADDR_OWVAR 37
3890: PUSH
3891: LD_INT 22
3893: ST_TO_ADDR
// veh = CreateVehicle ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 100
3929: PPUSH
3930: CALL_OW 290
// hc_gallery =  ;
3934: LD_ADDR_OWVAR 33
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// hc_name =  ;
3942: LD_ADDR_OWVAR 26
3946: PUSH
3947: LD_STRING 
3949: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: LD_EXP 16
3960: PPUSH
3961: LD_EXP 17
3965: PPUSH
3966: CALL_OW 12
3970: PPUSH
3971: CALL_OW 380
// un = CreateHuman ;
3975: LD_ADDR_VAR 0 4
3979: PUSH
3980: CALL_OW 44
3984: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3985: LD_VAR 0 4
3989: PPUSH
3990: LD_VAR 0 3
3994: PPUSH
3995: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3999: LD_ADDR_VAR 0 2
4003: PUSH
4004: LD_INT 22
4006: PUSH
4007: LD_INT 6
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: LD_INT 25
4022: PUSH
4023: LD_INT 2
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 69
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4085
// ComAgressiveMove ( i , 45 , 46 ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_INT 45
4075: PPUSH
4076: LD_INT 46
4078: PPUSH
4079: CALL_OW 114
4083: GO 4065
4085: POP
4086: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_INT 22
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 25
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 69
4120: PUSH
4121: FOR_IN
4122: IFFALSE 4153
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4124: LD_ADDR_EXP 21
4128: PUSH
4129: LD_VAR 0 2
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: LD_INT 48
4139: PPUSH
4140: LD_INT 55
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: CALL_OW 145
4150: ST_TO_ADDR
4151: GO 4121
4153: POP
4154: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4155: LD_ADDR_VAR 0 2
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 6
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 69
4188: PUSH
4189: FOR_IN
4190: IFFALSE 4209
// ComMoveXY ( i , 39 , 55 ) ;
4192: LD_VAR 0 2
4196: PPUSH
4197: LD_INT 39
4199: PPUSH
4200: LD_INT 55
4202: PPUSH
4203: CALL_OW 111
4207: GO 4189
4209: POP
4210: POP
// end ;
4211: LD_VAR 0 1
4215: RET
// export function PrepareFirstAttack ; var i , un ; begin
4216: LD_INT 0
4218: PPUSH
4219: PPUSH
4220: PPUSH
// uc_side = 5 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 5
4228: ST_TO_ADDR
// uc_nation = 3 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 3
4236: ST_TO_ADDR
// for i := 1 to 4 do
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: DOUBLE
4243: LD_INT 1
4245: DEC
4246: ST_TO_ADDR
4247: LD_INT 4
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4338
// begin InitHC_All ( ) ;
4253: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4257: LD_INT 0
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_EXP 16
4267: PPUSH
4268: LD_EXP 17
4272: PPUSH
4273: CALL_OW 12
4277: PPUSH
4278: CALL_OW 380
// un = CreateHuman ;
4282: LD_ADDR_VAR 0 3
4286: PUSH
4287: CALL_OW 44
4291: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4292: LD_VAR 0 3
4296: PPUSH
4297: LD_INT 4
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_EXP 1
4316: PPUSH
4317: CALL_OW 250
4321: PPUSH
4322: LD_EXP 1
4326: PPUSH
4327: CALL_OW 251
4331: PPUSH
4332: CALL_OW 114
// end ;
4336: GO 4250
4338: POP
4339: POP
// firstRussianAttack = 1 ;
4340: LD_ADDR_EXP 23
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// end ; end_of_file
4348: LD_VAR 0 1
4352: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4353: LD_INT 0
4355: PPUSH
4356: PPUSH
4357: PPUSH
// for i = 1 to count do
4358: LD_ADDR_VAR 0 8
4362: PUSH
4363: DOUBLE
4364: LD_INT 1
4366: DEC
4367: ST_TO_ADDR
4368: LD_VAR 0 6
4372: PUSH
4373: FOR_TO
4374: IFFALSE 4455
// begin uc_side = side ;
4376: LD_ADDR_OWVAR 20
4380: PUSH
4381: LD_VAR 0 1
4385: ST_TO_ADDR
// uc_nation = nation ;
4386: LD_ADDR_OWVAR 21
4390: PUSH
4391: LD_VAR 0 2
4395: ST_TO_ADDR
// hc_gallery =  ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING 
4403: ST_TO_ADDR
// hc_name =  ;
4404: LD_ADDR_OWVAR 26
4408: PUSH
4409: LD_STRING 
4411: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4412: LD_INT 0
4414: PPUSH
4415: LD_VAR 0 5
4419: PPUSH
4420: LD_VAR 0 4
4424: PPUSH
4425: CALL_OW 380
// un = CreateHuman ;
4429: LD_ADDR_VAR 0 9
4433: PUSH
4434: CALL_OW 44
4438: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4439: LD_VAR 0 9
4443: PPUSH
4444: LD_VAR 0 3
4448: PPUSH
4449: CALL_OW 52
// end ;
4453: GO 4373
4455: POP
4456: POP
// end ;
4457: LD_VAR 0 7
4461: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4462: LD_INT 0
4464: PPUSH
4465: PPUSH
4466: PPUSH
// uc_side := GetSide ( b ) ;
4467: LD_ADDR_OWVAR 20
4471: PUSH
4472: LD_VAR 0 2
4476: PPUSH
4477: CALL_OW 255
4481: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4482: LD_ADDR_OWVAR 21
4486: PUSH
4487: LD_VAR 0 2
4491: PPUSH
4492: CALL_OW 248
4496: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4497: LD_INT 0
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 380
// un = CreateHuman ;
4512: LD_ADDR_VAR 0 4
4516: PUSH
4517: CALL_OW 44
4521: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4522: LD_ADDR_VAR 0 5
4526: PUSH
4527: LD_VAR 0 2
4531: PPUSH
4532: CALL_OW 254
4536: PUSH
4537: LD_INT 3
4539: MINUS
4540: ST_TO_ADDR
// if dir < 0 then
4541: LD_VAR 0 5
4545: PUSH
4546: LD_INT 0
4548: LESS
4549: IFFALSE 4565
// dir := 6 + dir ;
4551: LD_ADDR_VAR 0 5
4555: PUSH
4556: LD_INT 6
4558: PUSH
4559: LD_VAR 0 5
4563: PLUS
4564: ST_TO_ADDR
// SetDir ( un , dir ) ;
4565: LD_VAR 0 4
4569: PPUSH
4570: LD_VAR 0 5
4574: PPUSH
4575: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: LD_VAR 0 2
4588: PPUSH
4589: CALL_OW 52
// end ;
4593: LD_VAR 0 3
4597: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4598: LD_INT 0
4600: PPUSH
4601: PPUSH
4602: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4603: LD_ADDR_VAR 0 6
4607: PUSH
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: PPUSH
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 12
4625: ARRAY
4626: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4627: LD_VAR 0 6
4631: PPUSH
4632: CALL_OW 258
4636: PUSH
4637: LD_INT 1
4639: EQUAL
4640: IFFALSE 4658
// Say ( speaker , dialogMID ) else
4642: LD_VAR 0 6
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: CALL_OW 88
4656: GO 4672
// Say ( speaker , dialogFID ) ;
4658: LD_VAR 0 6
4662: PPUSH
4663: LD_VAR 0 3
4667: PPUSH
4668: CALL_OW 88
// result := speaker ;
4672: LD_ADDR_VAR 0 4
4676: PUSH
4677: LD_VAR 0 6
4681: ST_TO_ADDR
// end ;
4682: LD_VAR 0 4
4686: RET
// export function PrepareDifficulty ; var tmp ; begin
4687: LD_INT 0
4689: PPUSH
4690: PPUSH
// if Difficulty = 1 then
4691: LD_OWVAR 67
4695: PUSH
4696: LD_INT 1
4698: EQUAL
4699: IFFALSE 4717
// begin RuSoldMinLevel = 1 ;
4701: LD_ADDR_EXP 16
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4709: LD_ADDR_EXP 17
4713: PUSH
4714: LD_INT 2
4716: ST_TO_ADDR
// end ; if Difficulty = 2 then
4717: LD_OWVAR 67
4721: PUSH
4722: LD_INT 2
4724: EQUAL
4725: IFFALSE 4826
// begin RuSoldMinLevel = 2 ;
4727: LD_ADDR_EXP 16
4731: PUSH
4732: LD_INT 2
4734: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4735: LD_ADDR_EXP 17
4739: PUSH
4740: LD_INT 3
4742: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4743: LD_INT 23
4745: PPUSH
4746: CALL_OW 64
// uc_nation = 3 ;
4750: LD_ADDR_OWVAR 21
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// uc_side = 3 ;
4758: LD_ADDR_OWVAR 20
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// bc_level = 5 ;
4766: LD_ADDR_OWVAR 43
4770: PUSH
4771: LD_INT 5
4773: ST_TO_ADDR
// bc_type = 32 ;
4774: LD_ADDR_OWVAR 42
4778: PUSH
4779: LD_INT 32
4781: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: LD_INT 76
4789: PPUSH
4790: LD_INT 91
4792: PPUSH
4793: LD_INT 2
4795: PPUSH
4796: CALL_OW 47
4800: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4801: LD_VAR 0 2
4805: PPUSH
4806: LD_INT 43
4808: PPUSH
4809: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4813: LD_INT 51
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 322
// end ; if Difficulty >= 3 then
4826: LD_OWVAR 67
4830: PUSH
4831: LD_INT 3
4833: GREATEREQUAL
4834: IFFALSE 4998
// begin RuSoldMinLevel = Difficulty ;
4836: LD_ADDR_EXP 16
4840: PUSH
4841: LD_OWVAR 67
4845: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4846: LD_ADDR_EXP 17
4850: PUSH
4851: LD_INT 4
4853: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4854: LD_INT 26
4856: PPUSH
4857: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4861: LD_INT 23
4863: PPUSH
4864: CALL_OW 64
// uc_nation = 3 ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// uc_side = 3 ;
4876: LD_ADDR_OWVAR 20
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// bc_level = 5 ;
4884: LD_ADDR_OWVAR 43
4888: PUSH
4889: LD_INT 5
4891: ST_TO_ADDR
// bc_type = 32 ;
4892: LD_ADDR_OWVAR 42
4896: PUSH
4897: LD_INT 32
4899: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4900: LD_ADDR_VAR 0 2
4904: PUSH
4905: LD_INT 76
4907: PPUSH
4908: LD_INT 91
4910: PPUSH
4911: LD_INT 2
4913: PPUSH
4914: CALL_OW 47
4918: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_INT 44
4926: PPUSH
4927: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4931: LD_ADDR_VAR 0 2
4935: PUSH
4936: LD_INT 83
4938: PPUSH
4939: LD_INT 84
4941: PPUSH
4942: LD_INT 2
4944: PPUSH
4945: CALL_OW 47
4949: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4950: LD_VAR 0 2
4954: PPUSH
4955: LD_INT 43
4957: PPUSH
4958: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4962: LD_INT 51
4964: PPUSH
4965: LD_INT 3
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4975: LD_INT 52
4977: PPUSH
4978: LD_INT 3
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4988: LD_INT 25
4990: PPUSH
4991: LD_INT 44
4993: PPUSH
4994: CALL_OW 431
// end ; end ;
4998: LD_VAR 0 1
5002: RET
// export function EnergyDialog ; begin
5003: LD_INT 0
5005: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5006: LD_INT 46
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: CALL_OW 321
5016: PUSH
5017: LD_INT 1
5019: EQUAL
5020: PUSH
5021: LD_INT 35
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 321
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: AND
5036: IFFALSE 5060
// begin Say ( JMM , D9c-JMM-1 ) ;
5038: LD_EXP 1
5042: PPUSH
5043: LD_STRING D9c-JMM-1
5045: PPUSH
5046: CALL_OW 88
// energyVDialog = 1 ;
5050: LD_ADDR_EXP 33
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// end else
5058: GO 5214
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5060: LD_INT 35
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 321
5070: PUSH
5071: LD_INT 2
5073: EQUAL
5074: PUSH
5075: LD_EXP 33
5079: PUSH
5080: LD_INT 0
5082: EQUAL
5083: AND
5084: IFFALSE 5106
// begin Say ( JMM , D9c-JMM-1a ) ;
5086: LD_EXP 1
5090: PPUSH
5091: LD_STRING D9c-JMM-1a
5093: PPUSH
5094: CALL_OW 88
// energyVDialog = 1 ;
5098: LD_ADDR_EXP 33
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5106: LD_INT 46
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: CALL_OW 321
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: PUSH
5121: LD_EXP 33
5125: PUSH
5126: LD_INT 0
5128: EQUAL
5129: AND
5130: IFFALSE 5152
// begin Say ( JMM , D9c-JMM-1b ) ;
5132: LD_EXP 1
5136: PPUSH
5137: LD_STRING D9c-JMM-1b
5139: PPUSH
5140: CALL_OW 88
// energyVDialog = 1 ;
5144: LD_ADDR_EXP 33
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5152: LD_INT 46
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 321
5162: PUSH
5163: LD_INT 2
5165: EQUAL
5166: PUSH
5167: LD_INT 21
5169: PPUSH
5170: LD_INT 1
5172: PPUSH
5173: CALL_OW 321
5177: PUSH
5178: LD_INT 2
5180: EQUAL
5181: AND
5182: PUSH
5183: LD_EXP 33
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: AND
5192: IFFALSE 5214
// begin Say ( JMM , D9c-JMM-1c ) ;
5194: LD_EXP 1
5198: PPUSH
5199: LD_STRING D9c-JMM-1c
5201: PPUSH
5202: CALL_OW 88
// energyVDialog = 1 ;
5206: LD_ADDR_EXP 33
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ; end ; end ;
5214: LD_VAR 0 1
5218: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5226: LD_VAR 0 1
5230: NOT
5231: PUSH
5232: LD_VAR 0 1
5236: PPUSH
5237: CALL_OW 256
5241: PUSH
5242: LD_INT 250
5244: LESS
5245: OR
5246: PUSH
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 314
5256: PUSH
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 261
5266: PUSH
5267: LD_INT 20
5269: GREATER
5270: AND
5271: OR
5272: IFFALSE 5276
// exit ;
5274: GO 5641
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5276: LD_VAR 0 1
5280: PPUSH
5281: CALL_OW 261
5285: PUSH
5286: LD_INT 20
5288: LESS
5289: PUSH
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 110
5299: PUSH
5300: LD_INT 21
5302: EQUAL
5303: NOT
5304: AND
5305: IFFALSE 5332
// begin ComStop ( bulldozer ) ;
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_INT 21
5323: PPUSH
5324: CALL_OW 109
// exit ;
5328: GO 5641
// end else
5330: GO 5359
// if GetFuel ( bulldozer ) > 20 then
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 261
5341: PUSH
5342: LD_INT 20
5344: GREATER
5345: IFFALSE 5359
// SetTag ( bulldozer , 0 ) ;
5347: LD_VAR 0 1
5351: PPUSH
5352: LD_INT 0
5354: PPUSH
5355: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5359: LD_ADDR_VAR 0 5
5363: PUSH
5364: LD_VAR 0 2
5368: PPUSH
5369: CALL_OW 353
5373: ST_TO_ADDR
// tmp := [ ] ;
5374: LD_ADDR_VAR 0 6
5378: PUSH
5379: EMPTY
5380: ST_TO_ADDR
// for i = 1 to list do
5381: LD_ADDR_VAR 0 4
5385: PUSH
5386: DOUBLE
5387: LD_INT 1
5389: DEC
5390: ST_TO_ADDR
5391: LD_VAR 0 5
5395: PUSH
5396: FOR_TO
5397: IFFALSE 5495
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5399: LD_VAR 0 5
5403: PUSH
5404: LD_VAR 0 4
5408: ARRAY
5409: PUSH
5410: LD_INT 1
5412: ARRAY
5413: PPUSH
5414: LD_VAR 0 5
5418: PUSH
5419: LD_VAR 0 4
5423: ARRAY
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: PPUSH
5429: CALL_OW 554
5433: IFFALSE 5493
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5435: LD_ADDR_VAR 0 6
5439: PUSH
5440: LD_VAR 0 6
5444: PPUSH
5445: LD_VAR 0 6
5449: PUSH
5450: LD_INT 1
5452: PLUS
5453: PPUSH
5454: LD_VAR 0 5
5458: PUSH
5459: LD_VAR 0 4
5463: ARRAY
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PUSH
5469: LD_VAR 0 5
5473: PUSH
5474: LD_VAR 0 4
5478: ARRAY
5479: PUSH
5480: LD_INT 2
5482: ARRAY
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PPUSH
5488: CALL_OW 1
5492: ST_TO_ADDR
// end ;
5493: GO 5396
5495: POP
5496: POP
// ComStop ( bulldozer ) ;
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5506: LD_ADDR_VAR 0 7
5510: PUSH
5511: LD_VAR 0 1
5515: PPUSH
5516: CALL_OW 250
5520: PUSH
5521: LD_VAR 0 1
5525: PPUSH
5526: CALL_OW 251
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: ST_TO_ADDR
// for i = tmp downto 1 do
5535: LD_ADDR_VAR 0 4
5539: PUSH
5540: DOUBLE
5541: LD_VAR 0 6
5545: INC
5546: ST_TO_ADDR
5547: LD_INT 1
5549: PUSH
5550: FOR_DOWNTO
5551: IFFALSE 5639
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5553: LD_ADDR_VAR 0 7
5557: PUSH
5558: LD_VAR 0 7
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: PPUSH
5567: LD_VAR 0 7
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: LD_VAR 0 6
5580: PPUSH
5581: CALL 5742 0 3
5585: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5586: LD_VAR 0 1
5590: PPUSH
5591: LD_VAR 0 7
5595: PUSH
5596: LD_INT 1
5598: ARRAY
5599: PPUSH
5600: LD_VAR 0 7
5604: PUSH
5605: LD_INT 2
5607: ARRAY
5608: PPUSH
5609: CALL 5646 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: LD_VAR 0 6
5622: PPUSH
5623: LD_VAR 0 7
5627: PUSH
5628: LD_INT 3
5630: ARRAY
5631: PPUSH
5632: CALL_OW 3
5636: ST_TO_ADDR
// end ;
5637: GO 5550
5639: POP
5640: POP
// end ;
5641: LD_VAR 0 3
5645: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5646: LD_INT 0
5648: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5649: LD_VAR 0 2
5653: PPUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: CALL_OW 351
5663: PUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: CALL_OW 554
5678: AND
5679: PUSH
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: CALL_OW 488
5694: AND
5695: PUSH
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 428
5710: PUSH
5711: LD_INT 1
5713: NEG
5714: EQUAL
5715: AND
5716: IFFALSE 5737
// AddComMoveXY ( bulldozer , x , y ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_VAR 0 3
5732: PPUSH
5733: CALL_OW 171
// end ;
5737: LD_VAR 0 4
5741: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
5749: PPUSH
5750: PPUSH
// dist := 99999 ;
5751: LD_ADDR_VAR 0 6
5755: PUSH
5756: LD_INT 99999
5758: ST_TO_ADDR
// for i = 1 to list do
5759: LD_ADDR_VAR 0 5
5763: PUSH
5764: DOUBLE
5765: LD_INT 1
5767: DEC
5768: ST_TO_ADDR
5769: LD_VAR 0 3
5773: PUSH
5774: FOR_TO
5775: IFFALSE 5913
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5777: LD_ADDR_VAR 0 7
5781: PUSH
5782: LD_VAR 0 1
5786: PPUSH
5787: LD_VAR 0 2
5791: PPUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_VAR 0 5
5801: ARRAY
5802: PUSH
5803: LD_INT 1
5805: ARRAY
5806: PPUSH
5807: LD_VAR 0 3
5811: PUSH
5812: LD_VAR 0 5
5816: ARRAY
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PPUSH
5822: CALL_OW 298
5826: ST_TO_ADDR
// if d = 0 then
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 0
5834: EQUAL
5835: IFFALSE 5839
// continue ;
5837: GO 5774
// if d < dist then
5839: LD_VAR 0 7
5843: PUSH
5844: LD_VAR 0 6
5848: LESS
5849: IFFALSE 5911
// begin _x := list [ i ] [ 1 ] ;
5851: LD_ADDR_VAR 0 8
5855: PUSH
5856: LD_VAR 0 3
5860: PUSH
5861: LD_VAR 0 5
5865: ARRAY
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5871: LD_ADDR_VAR 0 9
5875: PUSH
5876: LD_VAR 0 3
5880: PUSH
5881: LD_VAR 0 5
5885: ARRAY
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: ST_TO_ADDR
// _i := i ;
5891: LD_ADDR_VAR 0 10
5895: PUSH
5896: LD_VAR 0 5
5900: ST_TO_ADDR
// dist := d ;
5901: LD_ADDR_VAR 0 6
5905: PUSH
5906: LD_VAR 0 7
5910: ST_TO_ADDR
// end ; end ;
5911: GO 5774
5913: POP
5914: POP
// result := [ _x , _y , _i , dist ] ;
5915: LD_ADDR_VAR 0 4
5919: PUSH
5920: LD_VAR 0 8
5924: PUSH
5925: LD_VAR 0 9
5929: PUSH
5930: LD_VAR 0 10
5934: PUSH
5935: LD_VAR 0 6
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: ST_TO_ADDR
// end ;
5946: LD_VAR 0 4
5950: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// for i = 1 to 72 do
5955: LD_ADDR_VAR 0 5
5959: PUSH
5960: DOUBLE
5961: LD_INT 1
5963: DEC
5964: ST_TO_ADDR
5965: LD_INT 72
5967: PUSH
5968: FOR_TO
5969: IFFALSE 6023
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5971: LD_VAR 0 5
5975: PPUSH
5976: LD_VAR 0 1
5980: PPUSH
5981: CALL_OW 321
5985: PUSH
5986: LD_INT 1
5988: EQUAL
5989: PUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: LD_VAR 0 3
5999: PPUSH
6000: CALL_OW 482
6004: AND
6005: IFFALSE 6021
// AddComResearch ( lab , i ) ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 5
6016: PPUSH
6017: CALL_OW 184
6021: GO 5968
6023: POP
6024: POP
// end ;
6025: LD_VAR 0 4
6029: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
6036: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6037: LD_ADDR_VAR 0 7
6041: PUSH
6042: LD_VAR 0 2
6046: PPUSH
6047: CALL_OW 313
6051: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6052: LD_ADDR_VAR 0 8
6056: PUSH
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_INT 22
6064: PUSH
6065: LD_VAR 0 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 2
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 24
6086: PUSH
6087: LD_INT 750
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: LD_INT 54
6099: PUSH
6100: EMPTY
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 70
6117: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6118: LD_ADDR_VAR 0 5
6122: PUSH
6123: LD_VAR 0 3
6127: PPUSH
6128: LD_INT 22
6130: PUSH
6131: LD_VAR 0 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 21
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: LD_INT 24
6155: PUSH
6156: LD_INT 1000
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: EMPTY
6173: LIST
6174: PPUSH
6175: CALL_OW 70
6179: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6180: LD_VAR 0 5
6184: NOT
6185: PUSH
6186: LD_INT 22
6188: PUSH
6189: LD_VAR 0 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 24
6210: PUSH
6211: LD_INT 250
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: PPUSH
6223: CALL_OW 69
6227: NOT
6228: AND
6229: IFFALSE 6233
// exit ;
6231: GO 6329
// if buildingsList and engineerOkInside then
6233: LD_VAR 0 5
6237: PUSH
6238: LD_VAR 0 7
6242: AND
6243: IFFALSE 6269
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6245: LD_VAR 0 7
6249: PPUSH
6250: LD_INT 25
6252: PUSH
6253: LD_INT 2
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 72
6264: PPUSH
6265: CALL_OW 122
// if buildingsList and engineerOkOutside then
6269: LD_VAR 0 5
6273: PUSH
6274: LD_VAR 0 8
6278: AND
6279: IFFALSE 6299
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6299: LD_VAR 0 5
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: PUSH
6308: LD_VAR 0 8
6312: AND
6313: IFFALSE 6329
// ComEnterUnit ( engineerOkOutside , building ) ;
6315: LD_VAR 0 8
6319: PPUSH
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL_OW 120
// end ;
6329: LD_VAR 0 4
6333: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6343: LD_ADDR_VAR 0 6
6347: PUSH
6348: LD_INT 22
6350: PUSH
6351: LD_VAR 0 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 23
6372: PUSH
6373: LD_INT 2
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 251
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6401: LD_ADDR_VAR 0 7
6405: PUSH
6406: LD_VAR 0 3
6410: PPUSH
6411: LD_INT 22
6413: PUSH
6414: LD_VAR 0 1
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 23
6425: PUSH
6426: LD_INT 2
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 25
6435: PUSH
6436: LD_INT 4
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 50
6445: PUSH
6446: EMPTY
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PPUSH
6455: CALL_OW 70
6459: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6460: LD_ADDR_VAR 0 8
6464: PUSH
6465: LD_VAR 0 3
6469: PPUSH
6470: LD_INT 22
6472: PUSH
6473: LD_VAR 0 1
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 21
6484: PUSH
6485: LD_INT 1
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 3
6494: PUSH
6495: LD_INT 25
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 24
6514: PUSH
6515: LD_INT 750
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: PPUSH
6532: CALL_OW 70
6536: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6537: LD_ADDR_VAR 0 9
6541: PUSH
6542: LD_VAR 0 2
6546: PPUSH
6547: LD_INT 22
6549: PUSH
6550: LD_VAR 0 1
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 21
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 25
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 3
6588: PUSH
6589: LD_INT 24
6591: PUSH
6592: LD_INT 1000
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: PPUSH
6609: CALL_OW 70
6613: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6614: LD_VAR 0 8
6618: NOT
6619: PUSH
6620: LD_VAR 0 9
6624: NOT
6625: AND
6626: PUSH
6627: LD_VAR 0 6
6631: NOT
6632: AND
6633: IFFALSE 6637
// exit ;
6635: GO 6843
// if damageUnits and sciList then
6637: LD_VAR 0 8
6641: PUSH
6642: LD_VAR 0 6
6646: AND
6647: IFFALSE 6663
// ComMoveToArea ( damageUnits , healArea ) ;
6649: LD_VAR 0 8
6653: PPUSH
6654: LD_VAR 0 2
6658: PPUSH
6659: CALL_OW 113
// if unitsToHeal and sciList then
6663: LD_VAR 0 9
6667: PUSH
6668: LD_VAR 0 6
6672: AND
6673: IFFALSE 6684
// ComExitBuilding ( sciList ) ;
6675: LD_VAR 0 6
6679: PPUSH
6680: CALL_OW 122
// if unitsToHeal and sciListOutside then
6684: LD_VAR 0 9
6688: PUSH
6689: LD_VAR 0 7
6693: AND
6694: IFFALSE 6714
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6696: LD_VAR 0 7
6700: PPUSH
6701: LD_VAR 0 9
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: PPUSH
6710: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6714: LD_VAR 0 8
6718: PUSH
6719: LD_INT 0
6721: EQUAL
6722: PUSH
6723: LD_VAR 0 9
6727: PUSH
6728: LD_INT 0
6730: EQUAL
6731: AND
6732: PUSH
6733: LD_VAR 0 7
6737: AND
6738: IFFALSE 6843
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6740: LD_ADDR_VAR 0 10
6744: PUSH
6745: LD_INT 22
6747: PUSH
6748: LD_VAR 0 1
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 21
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 8
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 69
6786: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6787: LD_ADDR_VAR 0 11
6791: PUSH
6792: LD_INT 1
6794: PPUSH
6795: LD_VAR 0 10
6799: PPUSH
6800: CALL_OW 12
6804: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6805: LD_VAR 0 7
6809: PPUSH
6810: LD_INT 3
6812: PUSH
6813: LD_INT 60
6815: PUSH
6816: EMPTY
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PPUSH
6823: CALL_OW 72
6827: PPUSH
6828: LD_VAR 0 10
6832: PUSH
6833: LD_VAR 0 11
6837: ARRAY
6838: PPUSH
6839: CALL_OW 120
// end ; end ;
6843: LD_VAR 0 5
6847: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6852: LD_INT 22
6854: PUSH
6855: LD_VAR 0 1
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 21
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 69
6882: PUSH
6883: LD_VAR 0 3
6887: LESSEQUAL
6888: IFFALSE 6955
// for i = 1 to vehCount do
6890: LD_ADDR_VAR 0 9
6894: PUSH
6895: DOUBLE
6896: LD_INT 1
6898: DEC
6899: ST_TO_ADDR
6900: LD_VAR 0 3
6904: PUSH
6905: FOR_TO
6906: IFFALSE 6953
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6908: LD_VAR 0 2
6912: PPUSH
6913: LD_VAR 0 7
6917: PPUSH
6918: LD_VAR 0 5
6922: PPUSH
6923: LD_VAR 0 6
6927: PPUSH
6928: LD_VAR 0 4
6932: PUSH
6933: LD_INT 1
6935: PPUSH
6936: LD_VAR 0 4
6940: PPUSH
6941: CALL_OW 12
6945: ARRAY
6946: PPUSH
6947: CALL_OW 185
6951: GO 6905
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 8
6959: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
// for i = 1 to medicCount do
6973: LD_ADDR_VAR 0 11
6977: PUSH
6978: DOUBLE
6979: LD_INT 1
6981: DEC
6982: ST_TO_ADDR
6983: LD_VAR 0 4
6987: PUSH
6988: FOR_TO
6989: IFFALSE 7059
// begin uc_side = side ;
6991: LD_ADDR_OWVAR 20
6995: PUSH
6996: LD_VAR 0 1
7000: ST_TO_ADDR
// uc_nation = nation ;
7001: LD_ADDR_OWVAR 21
7005: PUSH
7006: LD_VAR 0 2
7010: ST_TO_ADDR
// InitHC_All ( ) ;
7011: CALL_OW 584
// PrepareHuman ( false , 4 , skil ) ;
7015: LD_INT 0
7017: PPUSH
7018: LD_INT 4
7020: PPUSH
7021: LD_VAR 0 5
7025: PPUSH
7026: CALL_OW 380
// un = CreateHuman ;
7030: LD_ADDR_VAR 0 13
7034: PUSH
7035: CALL_OW 44
7039: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7040: LD_VAR 0 13
7044: PPUSH
7045: LD_VAR 0 6
7049: PPUSH
7050: LD_INT 0
7052: PPUSH
7053: CALL_OW 49
// end ;
7057: GO 6988
7059: POP
7060: POP
// for i = 1 to soldierCount do
7061: LD_ADDR_VAR 0 11
7065: PUSH
7066: DOUBLE
7067: LD_INT 1
7069: DEC
7070: ST_TO_ADDR
7071: LD_VAR 0 3
7075: PUSH
7076: FOR_TO
7077: IFFALSE 7147
// begin uc_side = side ;
7079: LD_ADDR_OWVAR 20
7083: PUSH
7084: LD_VAR 0 1
7088: ST_TO_ADDR
// uc_nation = nation ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_VAR 0 2
7098: ST_TO_ADDR
// InitHC_All ( ) ;
7099: CALL_OW 584
// PrepareHuman ( false , 1 , skil ) ;
7103: LD_INT 0
7105: PPUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_VAR 0 5
7113: PPUSH
7114: CALL_OW 380
// un = CreateHuman ;
7118: LD_ADDR_VAR 0 13
7122: PUSH
7123: CALL_OW 44
7127: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7128: LD_VAR 0 13
7132: PPUSH
7133: LD_VAR 0 6
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7076
7147: POP
7148: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7149: LD_ADDR_VAR 0 16
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 1
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 25
7201: PUSH
7202: LD_INT 9
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7225: LD_ADDR_VAR 0 15
7229: PUSH
7230: LD_INT 22
7232: PUSH
7233: LD_VAR 0 1
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 4
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 69
7260: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7261: LD_VAR 0 15
7265: PPUSH
7266: LD_VAR 0 7
7270: PPUSH
7271: CALL_OW 113
// if strategy = 1 then
7275: LD_VAR 0 9
7279: PUSH
7280: LD_INT 1
7282: EQUAL
7283: IFFALSE 7731
// begin for i in soldiersOK_list do
7285: LD_ADDR_VAR 0 11
7289: PUSH
7290: LD_VAR 0 16
7294: PUSH
7295: FOR_IN
7296: IFFALSE 7360
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7298: LD_VAR 0 11
7302: PPUSH
7303: LD_INT 91
7305: PPUSH
7306: LD_INT 63
7308: PPUSH
7309: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7313: LD_VAR 0 11
7317: PPUSH
7318: LD_INT 101
7320: PPUSH
7321: LD_INT 53
7323: PPUSH
7324: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7328: LD_VAR 0 11
7332: PPUSH
7333: LD_INT 75
7335: PPUSH
7336: LD_INT 23
7338: PPUSH
7339: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7343: LD_VAR 0 11
7347: PPUSH
7348: LD_INT 78
7350: PPUSH
7351: LD_INT 8
7353: PPUSH
7354: CALL_OW 174
// end ;
7358: GO 7295
7360: POP
7361: POP
// wait ( 0 0$30 ) ;
7362: LD_INT 1050
7364: PPUSH
7365: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7369: LD_INT 35
7371: PPUSH
7372: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7376: LD_ADDR_VAR 0 14
7380: PUSH
7381: LD_INT 22
7383: PUSH
7384: LD_VAR 0 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: LD_INT 24
7401: PUSH
7402: LD_INT 550
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 24
7415: PUSH
7416: LD_INT 250
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7437: LD_ADDR_VAR 0 16
7441: PUSH
7442: LD_INT 22
7444: PUSH
7445: LD_VAR 0 1
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 25
7456: PUSH
7457: LD_INT 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 24
7466: PUSH
7467: LD_INT 1000
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: PPUSH
7479: CALL_OW 69
7483: ST_TO_ADDR
// if medicCount then
7484: LD_VAR 0 4
7488: IFFALSE 7528
// begin if damageUnit_list then
7490: LD_VAR 0 14
7494: IFFALSE 7528
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7496: LD_VAR 0 14
7500: PPUSH
7501: LD_VAR 0 7
7505: PPUSH
7506: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_VAR 0 14
7519: PUSH
7520: LD_INT 1
7522: ARRAY
7523: PPUSH
7524: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7528: LD_ADDR_VAR 0 11
7532: PUSH
7533: LD_VAR 0 16
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7715
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7541: LD_ADDR_VAR 0 19
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_VAR 0 8
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 69
7562: PPUSH
7563: LD_VAR 0 11
7567: PPUSH
7568: CALL_OW 74
7572: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7573: LD_ADDR_VAR 0 20
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 2
7592: PUSH
7593: LD_INT 59
7595: PUSH
7596: EMPTY
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 1
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 21
7611: PUSH
7612: LD_INT 2
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: PPUSH
7632: CALL_OW 69
7636: PPUSH
7637: LD_VAR 0 11
7641: PPUSH
7642: CALL_OW 74
7646: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7647: LD_VAR 0 11
7651: PPUSH
7652: LD_VAR 0 19
7656: PPUSH
7657: CALL_OW 296
7661: PUSH
7662: LD_INT 8
7664: PLUS
7665: PUSH
7666: LD_VAR 0 11
7670: PPUSH
7671: LD_VAR 0 20
7675: PPUSH
7676: CALL_OW 296
7680: LESS
7681: IFFALSE 7699
// ComAttackUnit ( i , target1 ) else
7683: LD_VAR 0 11
7687: PPUSH
7688: LD_VAR 0 19
7692: PPUSH
7693: CALL_OW 115
7697: GO 7713
// ComAttackUnit ( i , target2 ) ;
7699: LD_VAR 0 11
7703: PPUSH
7704: LD_VAR 0 20
7708: PPUSH
7709: CALL_OW 115
// end ;
7713: GO 7538
7715: POP
7716: POP
// until not soldiersOK_list and not damageUnit_list ;
7717: LD_VAR 0 16
7721: NOT
7722: PUSH
7723: LD_VAR 0 14
7727: NOT
7728: AND
7729: IFFALSE 7369
// end ; if strategy = 2 then
7731: LD_VAR 0 9
7735: PUSH
7736: LD_INT 2
7738: EQUAL
7739: IFFALSE 8157
// begin for i in soldiersOK_list do
7741: LD_ADDR_VAR 0 11
7745: PUSH
7746: LD_VAR 0 16
7750: PUSH
7751: FOR_IN
7752: IFFALSE 7786
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7754: LD_VAR 0 11
7758: PPUSH
7759: LD_INT 91
7761: PPUSH
7762: LD_INT 63
7764: PPUSH
7765: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7769: LD_VAR 0 11
7773: PPUSH
7774: LD_INT 75
7776: PPUSH
7777: LD_INT 33
7779: PPUSH
7780: CALL_OW 174
// end ;
7784: GO 7751
7786: POP
7787: POP
// wait ( 0 0$10 ) ;
7788: LD_INT 350
7790: PPUSH
7791: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7795: LD_INT 105
7797: PPUSH
7798: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7802: LD_ADDR_VAR 0 14
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: LD_INT 24
7827: PUSH
7828: LD_INT 550
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 24
7841: PUSH
7842: LD_INT 250
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 69
7862: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7863: LD_ADDR_VAR 0 16
7867: PUSH
7868: LD_INT 22
7870: PUSH
7871: LD_VAR 0 1
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 25
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 24
7892: PUSH
7893: LD_INT 1000
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: PPUSH
7905: CALL_OW 69
7909: ST_TO_ADDR
// if medicCount then
7910: LD_VAR 0 4
7914: IFFALSE 7954
// begin if damageUnit_list then
7916: LD_VAR 0 14
7920: IFFALSE 7954
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7922: LD_VAR 0 14
7926: PPUSH
7927: LD_VAR 0 7
7931: PPUSH
7932: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7936: LD_VAR 0 4
7940: PPUSH
7941: LD_VAR 0 14
7945: PUSH
7946: LD_INT 1
7948: ARRAY
7949: PPUSH
7950: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7954: LD_ADDR_VAR 0 11
7958: PUSH
7959: LD_VAR 0 16
7963: PUSH
7964: FOR_IN
7965: IFFALSE 8141
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7967: LD_ADDR_VAR 0 19
7971: PUSH
7972: LD_INT 22
7974: PUSH
7975: LD_VAR 0 8
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PPUSH
7984: CALL_OW 69
7988: PPUSH
7989: LD_VAR 0 11
7993: PPUSH
7994: CALL_OW 74
7998: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7999: LD_ADDR_VAR 0 20
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 8
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: LD_INT 59
8021: PUSH
8022: EMPTY
8023: LIST
8024: PUSH
8025: LD_INT 21
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: LD_INT 21
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: PPUSH
8058: CALL_OW 69
8062: PPUSH
8063: LD_VAR 0 11
8067: PPUSH
8068: CALL_OW 74
8072: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8073: LD_VAR 0 11
8077: PPUSH
8078: LD_VAR 0 19
8082: PPUSH
8083: CALL_OW 296
8087: PUSH
8088: LD_INT 8
8090: PLUS
8091: PUSH
8092: LD_VAR 0 11
8096: PPUSH
8097: LD_VAR 0 20
8101: PPUSH
8102: CALL_OW 296
8106: LESS
8107: IFFALSE 8125
// ComAttackUnit ( i , target1 ) else
8109: LD_VAR 0 11
8113: PPUSH
8114: LD_VAR 0 19
8118: PPUSH
8119: CALL_OW 115
8123: GO 8139
// ComAttackUnit ( i , target2 ) ;
8125: LD_VAR 0 11
8129: PPUSH
8130: LD_VAR 0 20
8134: PPUSH
8135: CALL_OW 115
// end ;
8139: GO 7964
8141: POP
8142: POP
// until not soldiersOK_list and not damageUnit_list ;
8143: LD_VAR 0 16
8147: NOT
8148: PUSH
8149: LD_VAR 0 14
8153: NOT
8154: AND
8155: IFFALSE 7795
// end ; if medic_list then
8157: LD_VAR 0 15
8161: IFFALSE 8301
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8163: LD_ADDR_VAR 0 15
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_VAR 0 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 25
8182: PUSH
8183: LD_INT 4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 50
8192: PUSH
8193: EMPTY
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8206: LD_INT 35
8208: PPUSH
8209: CALL_OW 67
// for i in medic_list do
8213: LD_ADDR_VAR 0 11
8217: PUSH
8218: LD_VAR 0 15
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8292
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8226: LD_VAR 0 11
8230: PPUSH
8231: CALL_OW 314
8235: NOT
8236: PUSH
8237: LD_VAR 0 11
8241: PPUSH
8242: LD_INT 4
8244: PPUSH
8245: CALL_OW 308
8249: NOT
8250: AND
8251: IFFALSE 8267
// ComMoveToArea ( i , RussianAttack ) else
8253: LD_VAR 0 11
8257: PPUSH
8258: LD_INT 4
8260: PPUSH
8261: CALL_OW 113
8265: GO 8290
// if IsInArea ( i , RussianAttack ) then
8267: LD_VAR 0 11
8271: PPUSH
8272: LD_INT 4
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8290
// RemoveUnit ( i ) ;
8281: LD_VAR 0 11
8285: PPUSH
8286: CALL_OW 64
8290: GO 8223
8292: POP
8293: POP
// until not medic_list ;
8294: LD_VAR 0 15
8298: NOT
8299: IFFALSE 8163
// end ; end ; end_of_file
8301: LD_VAR 0 10
8305: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8306: LD_INT 0
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
// InGameOn ;
8313: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8317: LD_ADDR_VAR 0 3
8321: PUSH
8322: LD_EXP 8
8326: PUSH
8327: LD_EXP 9
8331: PUSH
8332: LD_EXP 10
8336: PUSH
8337: LD_EXP 11
8341: PUSH
8342: LD_EXP 12
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8354: LD_ADDR_VAR 0 4
8358: PUSH
8359: LD_INT 46
8361: PUSH
8362: LD_INT 45
8364: PUSH
8365: LD_INT 44
8367: PUSH
8368: LD_INT 43
8370: PUSH
8371: LD_INT 42
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8381: LD_ADDR_VAR 0 5
8385: PUSH
8386: LD_INT 14
8388: PUSH
8389: LD_INT 12
8391: PUSH
8392: LD_INT 10
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 6
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8408: LD_EXP 11
8412: PPUSH
8413: LD_INT 31
8415: PPUSH
8416: LD_INT 59
8418: PPUSH
8419: LD_INT 19
8421: PPUSH
8422: LD_INT 5
8424: PPUSH
8425: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8429: LD_INT 32
8431: PPUSH
8432: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8436: LD_INT 32
8438: PPUSH
8439: LD_INT 51
8441: PPUSH
8442: LD_INT 26
8444: PPUSH
8445: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8449: LD_INT 32
8451: PPUSH
8452: LD_INT 53
8454: PPUSH
8455: LD_INT 23
8457: PPUSH
8458: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8462: LD_INT 32
8464: PPUSH
8465: LD_INT 52
8467: PPUSH
8468: LD_INT 19
8470: PPUSH
8471: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8475: LD_INT 35
8477: PPUSH
8478: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8482: LD_INT 32
8484: PPUSH
8485: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8489: LD_INT 32
8491: PPUSH
8492: CALL_OW 250
8496: PUSH
8497: LD_INT 52
8499: EQUAL
8500: PUSH
8501: LD_INT 32
8503: PPUSH
8504: CALL_OW 251
8508: PUSH
8509: LD_INT 19
8511: EQUAL
8512: AND
8513: IFFALSE 8475
// ComExitVehicle ( JMM ) ;
8515: LD_EXP 1
8519: PPUSH
8520: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8524: LD_EXP 7
8528: PPUSH
8529: LD_EXP 1
8533: PPUSH
8534: CALL_OW 119
// wait ( 0 0$01 ) ;
8538: LD_INT 35
8540: PPUSH
8541: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8545: LD_EXP 1
8549: PPUSH
8550: LD_INT 46
8552: PPUSH
8553: LD_INT 10
8555: PPUSH
8556: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8560: LD_EXP 1
8564: PPUSH
8565: LD_EXP 7
8569: PPUSH
8570: CALL_OW 179
// wait ( 0 0$4 ) ;
8574: LD_INT 140
8576: PPUSH
8577: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8581: LD_EXP 1
8585: PPUSH
8586: LD_STRING D1-JMM-1
8588: PPUSH
8589: CALL_OW 88
// if not dialogue_skipped then
8593: LD_OWVAR 59
8597: NOT
8598: IFFALSE 9255
// begin for i := 1 to gammaSquad do
8600: LD_ADDR_VAR 0 2
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 3
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8677
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8618: LD_VAR 0 3
8622: PUSH
8623: LD_VAR 0 2
8627: ARRAY
8628: PPUSH
8629: LD_VAR 0 4
8633: PUSH
8634: LD_VAR 0 2
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 5
8644: PUSH
8645: LD_VAR 0 2
8649: ARRAY
8650: PPUSH
8651: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8655: LD_VAR 0 3
8659: PUSH
8660: LD_VAR 0 2
8664: ARRAY
8665: PPUSH
8666: LD_EXP 1
8670: PPUSH
8671: CALL_OW 179
// end ;
8675: GO 8615
8677: POP
8678: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8679: LD_EXP 4
8683: PPUSH
8684: LD_INT 41
8686: PPUSH
8687: LD_INT 4
8689: PPUSH
8690: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8694: LD_EXP 4
8698: PPUSH
8699: LD_EXP 1
8703: PPUSH
8704: CALL_OW 179
// if Lisa = false and Bobby then
8708: LD_EXP 4
8712: PUSH
8713: LD_INT 0
8715: EQUAL
8716: PUSH
8717: LD_EXP 2
8721: AND
8722: IFFALSE 8753
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8724: LD_EXP 2
8728: PPUSH
8729: LD_INT 41
8731: PPUSH
8732: LD_INT 4
8734: PPUSH
8735: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8739: LD_EXP 2
8743: PPUSH
8744: LD_EXP 1
8748: PPUSH
8749: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8753: LD_EXP 4
8757: PUSH
8758: LD_INT 0
8760: EQUAL
8761: PUSH
8762: LD_EXP 2
8766: PUSH
8767: LD_INT 0
8769: EQUAL
8770: AND
8771: PUSH
8772: LD_EXP 3
8776: AND
8777: IFFALSE 8808
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8779: LD_EXP 3
8783: PPUSH
8784: LD_INT 41
8786: PPUSH
8787: LD_INT 4
8789: PPUSH
8790: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8794: LD_EXP 3
8798: PPUSH
8799: LD_EXP 1
8803: PPUSH
8804: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8808: LD_EXP 4
8812: PUSH
8813: LD_INT 0
8815: EQUAL
8816: PUSH
8817: LD_EXP 2
8821: PUSH
8822: LD_INT 0
8824: EQUAL
8825: AND
8826: PUSH
8827: LD_EXP 3
8831: PUSH
8832: LD_INT 0
8834: EQUAL
8835: AND
8836: IFFALSE 8867
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8838: LD_EXP 6
8842: PPUSH
8843: LD_INT 41
8845: PPUSH
8846: LD_INT 4
8848: PPUSH
8849: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8853: LD_EXP 6
8857: PPUSH
8858: LD_EXP 1
8862: PPUSH
8863: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8867: LD_EXP 7
8871: PPUSH
8872: LD_STRING D1-Brown-1
8874: PPUSH
8875: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8879: LD_EXP 1
8883: PPUSH
8884: LD_STRING D1-JMM-2
8886: PPUSH
8887: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8891: LD_EXP 7
8895: PPUSH
8896: LD_STRING D1-Brown-2
8898: PPUSH
8899: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8903: LD_EXP 1
8907: PPUSH
8908: LD_EXP 9
8912: PPUSH
8913: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8917: LD_EXP 9
8921: PPUSH
8922: LD_STRING D1-FSol1-2
8924: PPUSH
8925: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8929: LD_EXP 1
8933: PPUSH
8934: LD_EXP 8
8938: PPUSH
8939: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8943: LD_EXP 8
8947: PPUSH
8948: LD_STRING D1-Sol2-2
8950: PPUSH
8951: CALL_OW 88
// if Lisa then
8955: LD_EXP 4
8959: IFFALSE 8999
// begin ComTurnUnit ( JMM , Lisa ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_EXP 4
8970: PPUSH
8971: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8975: LD_EXP 4
8979: PPUSH
8980: LD_STRING D1-Lisa-2
8982: PPUSH
8983: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8987: LD_EXP 1
8991: PPUSH
8992: LD_STRING D1-JMM-3
8994: PPUSH
8995: CALL_OW 88
// end ; if Bobby then
8999: LD_EXP 2
9003: IFFALSE 9043
// begin ComTurnUnit ( JMM , Bobby ) ;
9005: LD_EXP 1
9009: PPUSH
9010: LD_EXP 2
9014: PPUSH
9015: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9019: LD_EXP 2
9023: PPUSH
9024: LD_STRING D1-Bobby-2
9026: PPUSH
9027: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9031: LD_EXP 1
9035: PPUSH
9036: LD_STRING D1-JMM-3
9038: PPUSH
9039: CALL_OW 88
// end ; if Cyrus then
9043: LD_EXP 3
9047: IFFALSE 9087
// begin ComTurnUnit ( JMM , Cyrus ) ;
9049: LD_EXP 1
9053: PPUSH
9054: LD_EXP 3
9058: PPUSH
9059: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9063: LD_EXP 3
9067: PPUSH
9068: LD_STRING D1-Cyrus-2
9070: PPUSH
9071: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9075: LD_EXP 1
9079: PPUSH
9080: LD_STRING D1-JMM-3
9082: PPUSH
9083: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9087: LD_EXP 1
9091: PPUSH
9092: LD_EXP 7
9096: PPUSH
9097: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9101: LD_EXP 1
9105: PPUSH
9106: LD_STRING D1-JMM-3a
9108: PPUSH
9109: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9113: LD_EXP 7
9117: PPUSH
9118: LD_INT 38
9120: PPUSH
9121: LD_INT 5
9123: PPUSH
9124: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9128: LD_EXP 7
9132: PPUSH
9133: LD_EXP 1
9137: PPUSH
9138: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9142: LD_EXP 1
9146: PPUSH
9147: LD_INT 40
9149: PPUSH
9150: LD_INT 7
9152: PPUSH
9153: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_EXP 7
9166: PPUSH
9167: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9171: LD_EXP 7
9175: PPUSH
9176: LD_STRING D1-Brown-3
9178: PPUSH
9179: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9183: LD_EXP 14
9187: PPUSH
9188: LD_STRING D1-Har-3
9190: PPUSH
9191: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9195: LD_EXP 1
9199: PPUSH
9200: LD_STRING D1-JMM-4
9202: PPUSH
9203: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9207: LD_EXP 14
9211: PPUSH
9212: LD_STRING D1-Har-4
9214: PPUSH
9215: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9219: LD_EXP 1
9223: PPUSH
9224: LD_STRING D1-JMM-5
9226: PPUSH
9227: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9231: LD_EXP 14
9235: PPUSH
9236: LD_STRING D1-Har-5
9238: PPUSH
9239: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9243: LD_EXP 1
9247: PPUSH
9248: LD_STRING D1-JMM-6
9250: PPUSH
9251: CALL_OW 88
// end ; InGameOff ;
9255: CALL_OW 9
// PrepareRussianConvoy ;
9259: CALL 3404 0 0
// ChangeMissionObjectives ( M1 ) ;
9263: LD_STRING M1
9265: PPUSH
9266: CALL_OW 337
// SaveForQuickRestart ;
9270: CALL_OW 22
// timerStatus = 1 ;
9274: LD_ADDR_EXP 29
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// startTimer = 1 ;
9282: LD_ADDR_EXP 30
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// bonusAvalaible = 1 ;
9290: LD_ADDR_EXP 44
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9298: LD_INT 105
9300: PPUSH
9301: CALL_OW 67
// DialogueOn ;
9305: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9309: LD_EXP 12
9313: PPUSH
9314: LD_STRING D9-Mech1-1
9316: PPUSH
9317: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9321: LD_EXP 1
9325: PPUSH
9326: LD_STRING D9-JMM-1
9328: PPUSH
9329: CALL_OW 88
// DialogueOff ;
9333: CALL_OW 7
// end ;
9337: LD_VAR 0 1
9341: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9342: LD_INT 47
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 321
9352: PUSH
9353: LD_INT 2
9355: EQUAL
9356: PUSH
9357: LD_EXP 31
9361: NOT
9362: AND
9363: PUSH
9364: LD_INT 22
9366: PUSH
9367: LD_INT 1
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 21
9376: PUSH
9377: LD_INT 3
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 30
9386: PUSH
9387: LD_INT 3
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 57
9396: PUSH
9397: EMPTY
9398: LIST
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 69
9410: AND
9411: IFFALSE 9645
9413: GO 9415
9415: DISABLE
// begin factoryDialog := true ;
9416: LD_ADDR_EXP 31
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// if IsOk ( Campell ) then
9424: LD_EXP 12
9428: PPUSH
9429: CALL_OW 302
9433: IFFALSE 9449
// Say ( Campell , D10-Mech1-1 ) else
9435: LD_EXP 12
9439: PPUSH
9440: LD_STRING D10-Mech1-1
9442: PPUSH
9443: CALL_OW 88
9447: GO 9645
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9449: LD_INT 22
9451: PUSH
9452: LD_INT 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 21
9461: PUSH
9462: LD_INT 1
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 25
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 26
9481: PUSH
9482: LD_INT 1
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: PUSH
9500: LD_EXP 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: DIFF
9508: IFFALSE 9582
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9510: LD_INT 22
9512: PUSH
9513: LD_INT 1
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 21
9522: PUSH
9523: LD_INT 1
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 25
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 26
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: PUSH
9561: LD_EXP 1
9565: PUSH
9566: EMPTY
9567: LIST
9568: DIFF
9569: PPUSH
9570: LD_STRING D10-Mech1-1
9572: PPUSH
9573: LD_STRING D10-Mech1-1
9575: PPUSH
9576: CALL 4598 0 3
9580: GO 9645
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9582: LD_INT 22
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 26
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 1
9619: ARRAY
9620: PPUSH
9621: CALL_OW 69
9625: PUSH
9626: LD_EXP 1
9630: PUSH
9631: EMPTY
9632: LIST
9633: DIFF
9634: PPUSH
9635: LD_STRING D10-Mech1-1
9637: PPUSH
9638: LD_STRING D10-Mech1-1
9640: PPUSH
9641: CALL 4598 0 3
// end ; end ;
9645: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9646: LD_INT 22
9648: PUSH
9649: LD_INT 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 30
9658: PUSH
9659: LD_INT 32
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 69
9674: PUSH
9675: LD_EXP 32
9679: PUSH
9680: LD_INT 0
9682: EQUAL
9683: AND
9684: IFFALSE 9920
9686: GO 9688
9688: DISABLE
// begin if IsOk ( Claptopn ) then
9689: LD_EXP 11
9693: PPUSH
9694: CALL_OW 302
9698: IFFALSE 9714
// Say ( Claptopn , D9b-Eng1-1 ) else
9700: LD_EXP 11
9704: PPUSH
9705: LD_STRING D9b-Eng1-1
9707: PPUSH
9708: CALL_OW 88
9712: GO 9906
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9714: LD_INT 22
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 21
9726: PUSH
9727: LD_INT 1
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 25
9736: PUSH
9737: LD_INT 3
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 26
9746: PUSH
9747: LD_INT 1
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PPUSH
9760: CALL_OW 69
9764: PUSH
9765: LD_EXP 1
9769: PUSH
9770: EMPTY
9771: LIST
9772: DIFF
9773: IFFALSE 9847
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9775: LD_INT 22
9777: PUSH
9778: LD_INT 1
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 21
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 25
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 26
9807: PUSH
9808: LD_INT 1
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 69
9825: PUSH
9826: LD_EXP 1
9830: PUSH
9831: EMPTY
9832: LIST
9833: DIFF
9834: PPUSH
9835: LD_STRING D9b-Eng1-1
9837: PPUSH
9838: LD_STRING D9b-Eng1-11
9840: PPUSH
9841: CALL 4598 0 3
9845: GO 9906
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9847: LD_INT 22
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 21
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 26
9869: PUSH
9870: LD_INT 1
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 69
9886: PUSH
9887: LD_EXP 1
9891: PUSH
9892: EMPTY
9893: LIST
9894: DIFF
9895: PPUSH
9896: LD_STRING D9b-Eng1-1
9898: PPUSH
9899: LD_STRING D9b-Eng1-1
9901: PPUSH
9902: CALL 4598 0 3
// end ; if energyVDialog = 0 then
9906: LD_EXP 33
9910: PUSH
9911: LD_INT 0
9913: EQUAL
9914: IFFALSE 9920
// EnergyDialog ;
9916: CALL 5003 0 0
// end ;
9920: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9921: LD_EXP 34
9925: PUSH
9926: LD_INT 1
9928: EQUAL
9929: PUSH
9930: LD_EXP 35
9934: PUSH
9935: LD_INT 1
9937: EQUAL
9938: AND
9939: IFFALSE 9951
9941: GO 9943
9943: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9944: LD_STRING M1a
9946: PPUSH
9947: CALL_OW 337
9951: END
// every 3 3$0 do
9952: GO 9954
9954: DISABLE
// PrepareFirstAttack ;
9955: CALL 4216 0 0
9959: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9960: LD_INT 22
9962: PUSH
9963: LD_INT 5
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 21
9972: PUSH
9973: LD_INT 1
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 3
9982: PUSH
9983: LD_INT 24
9985: PUSH
9986: LD_INT 250
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 69
10006: PUSH
10007: LD_INT 0
10009: GREATER
10010: PUSH
10011: LD_EXP 23
10015: PUSH
10016: LD_INT 1
10018: EQUAL
10019: AND
10020: IFFALSE 10321
10022: GO 10024
10024: DISABLE
10025: LD_INT 0
10027: PPUSH
// begin firstRussianAttack = 2 ;
10028: LD_ADDR_EXP 23
10032: PUSH
10033: LD_INT 2
10035: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10036: LD_INT 22
10038: PUSH
10039: LD_INT 5
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 21
10048: PUSH
10049: LD_INT 1
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 69
10064: PPUSH
10065: LD_INT 125
10067: PPUSH
10068: LD_INT 98
10070: PPUSH
10071: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10075: LD_INT 22
10077: PUSH
10078: LD_INT 1
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 21
10087: PUSH
10088: LD_INT 1
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: LD_EXP 1
10108: PUSH
10109: LD_EXP 7
10113: PUSH
10114: LD_EXP 4
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: DIFF
10124: PPUSH
10125: LD_STRING DAtt1-Sol1-1
10127: PPUSH
10128: LD_STRING DAtt1-FSol1-1
10130: PPUSH
10131: CALL 4598 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10135: LD_EXP 1
10139: PPUSH
10140: LD_STRING DAtt1-JMM-1
10142: PPUSH
10143: CALL_OW 88
// if Lisa then
10147: LD_EXP 4
10151: IFFALSE 10167
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10153: LD_EXP 4
10157: PPUSH
10158: LD_STRING DAtt1a-Lisa-1
10160: PPUSH
10161: CALL_OW 88
10165: GO 10238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10167: LD_INT 22
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 1
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 26
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PUSH
10207: LD_EXP 1
10211: PUSH
10212: LD_EXP 7
10216: PUSH
10217: LD_EXP 4
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: DIFF
10227: PPUSH
10228: LD_STRING DAtt1a-Sol1-1
10230: PPUSH
10231: LD_STRING DAtt1-FSol1-1
10233: PPUSH
10234: CALL 4598 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10238: LD_EXP 1
10242: PPUSH
10243: LD_STRING DAtt1a-JMM-1
10245: PPUSH
10246: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10250: LD_INT 22
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 26
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 69
10289: PUSH
10290: LD_EXP 1
10294: PUSH
10295: LD_EXP 7
10299: PUSH
10300: LD_EXP 4
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: DIFF
10310: PPUSH
10311: LD_STRING DAtt1b-Sol1-1
10313: PPUSH
10314: LD_STRING DAtt1a-Sol1-1
10316: PPUSH
10317: CALL 4598 0 3
// end ;
10321: PPOPN 1
10323: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10324: LD_EXP 23
10328: PUSH
10329: LD_INT 2
10331: EQUAL
10332: PUSH
10333: LD_INT 5
10335: PPUSH
10336: LD_INT 22
10338: PUSH
10339: LD_INT 5
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 21
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PPUSH
10360: CALL_OW 70
10364: AND
10365: IFFALSE 10423
10367: GO 10369
10369: DISABLE
10370: LD_INT 0
10372: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10373: LD_ADDR_VAR 0 1
10377: PUSH
10378: LD_INT 22
10380: PUSH
10381: LD_INT 5
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 21
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PPUSH
10402: CALL_OW 69
10406: PUSH
10407: FOR_IN
10408: IFFALSE 10421
// RemoveUnit ( i ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL_OW 64
10419: GO 10407
10421: POP
10422: POP
// end ;
10423: PPOPN 1
10425: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10426: LD_INT 22
10428: PUSH
10429: LD_INT 5
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: PPUSH
10439: CALL_OW 69
10443: PUSH
10444: LD_INT 0
10446: EQUAL
10447: PUSH
10448: LD_EXP 23
10452: PUSH
10453: LD_INT 2
10455: EQUAL
10456: AND
10457: IFFALSE 10470
10459: GO 10461
10461: DISABLE
// firstRussianAttack = 3 ;
10462: LD_ADDR_EXP 23
10466: PUSH
10467: LD_INT 3
10469: ST_TO_ADDR
10470: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10471: LD_EXP 28
10475: PUSH
10476: LD_INT 0
10478: EQUAL
10479: IFFALSE 10560
10481: GO 10483
10483: DISABLE
// begin timerStatus = 4 ;
10484: LD_ADDR_EXP 29
10488: PUSH
10489: LD_INT 4
10491: ST_TO_ADDR
// DialogueOn ;
10492: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10496: LD_EXP 13
10500: PPUSH
10501: LD_STRING D2-Don-1
10503: PPUSH
10504: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10508: LD_EXP 1
10512: PPUSH
10513: LD_STRING D2-JMM-1
10515: PPUSH
10516: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10520: LD_EXP 13
10524: PPUSH
10525: LD_STRING D2-Don-2
10527: PPUSH
10528: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10532: LD_EXP 1
10536: PPUSH
10537: LD_STRING D2-JMM-2
10539: PPUSH
10540: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10544: LD_EXP 13
10548: PPUSH
10549: LD_STRING D2-Don-3
10551: PPUSH
10552: CALL_OW 94
// DialogueOff ;
10556: CALL_OW 7
// end ;
10560: END
// every 12 12$0 do var tmp ;
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
// begin PrepareDonaldsonArmy ;
10567: CALL 1187 0 0
// CenterNowOnUnits ( Donaldson ) ;
10571: LD_EXP 13
10575: PPUSH
10576: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10580: LD_INT 22
10582: PUSH
10583: LD_INT 6
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: NOT
10595: IFFALSE 10611
// begin wait ( 3 ) ;
10597: LD_INT 3
10599: PPUSH
10600: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10604: LD_STRING ACH_BASE
10606: PPUSH
10607: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
10611: LD_ADDR_VAR 0 1
10615: PUSH
10616: LD_INT 22
10618: PUSH
10619: LD_INT 4
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 26
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 25
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: PPUSH
10662: CALL_OW 69
10666: PUSH
10667: LD_EXP 5
10671: PUSH
10672: EMPTY
10673: LIST
10674: DIFF
10675: ST_TO_ADDR
// DialogueOn ;
10676: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10680: LD_VAR 0 1
10684: PPUSH
10685: LD_STRING D3-Sol1-1
10687: PPUSH
10688: LD_STRING D3-Sol1-1
10690: PPUSH
10691: CALL 4598 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
10695: LD_INT 22
10697: PUSH
10698: LD_INT 4
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 21
10707: PUSH
10708: LD_INT 1
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: LD_INT 26
10717: PUSH
10718: LD_INT 1
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 25
10727: PUSH
10728: LD_INT 3
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: PPUSH
10741: CALL_OW 69
10745: PPUSH
10746: LD_STRING D3-Sol2-1
10748: PPUSH
10749: LD_STRING D3-Sol2-1
10751: PPUSH
10752: CALL 4598 0 3
// if Frank then
10756: LD_EXP 5
10760: IFFALSE 10774
// Say ( Frank , D3-Frank-1 ) ;
10762: LD_EXP 5
10766: PPUSH
10767: LD_STRING D3-Frank-1
10769: PPUSH
10770: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10774: LD_EXP 13
10778: PPUSH
10779: LD_STRING D3-Don-1
10781: PPUSH
10782: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10786: LD_EXP 13
10790: PPUSH
10791: LD_STRING D3-Don-1a
10793: PPUSH
10794: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10798: LD_EXP 1
10802: PPUSH
10803: LD_STRING D3-JMM-1
10805: PPUSH
10806: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10810: LD_EXP 13
10814: PPUSH
10815: LD_STRING D3-Don-2
10817: PPUSH
10818: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10822: LD_INT 22
10824: PUSH
10825: LD_INT 6
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 21
10834: PUSH
10835: LD_INT 1
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PPUSH
10846: CALL_OW 69
10850: IFFALSE 10988
// begin Say ( JMM , D3-JMM-2 ) ;
10852: LD_EXP 1
10856: PPUSH
10857: LD_STRING D3-JMM-2
10859: PPUSH
10860: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10864: LD_EXP 13
10868: PPUSH
10869: LD_STRING D3-Don-3
10871: PPUSH
10872: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10876: LD_EXP 1
10880: PPUSH
10881: LD_STRING D3-JMM-3
10883: PPUSH
10884: CALL_OW 88
// if IsOK ( Frank ) then
10888: LD_EXP 5
10892: PPUSH
10893: CALL_OW 302
10897: IFFALSE 10911
// Say ( Frank , D3-Frank-3 ) ;
10899: LD_EXP 5
10903: PPUSH
10904: LD_STRING D3-Frank-3
10906: PPUSH
10907: CALL_OW 88
// DialogueOff ;
10911: CALL_OW 7
// if IsOk ( Frank ) then
10915: LD_EXP 5
10919: PPUSH
10920: CALL_OW 302
10924: IFFALSE 10986
// begin SetSide ( Frank , 0 ) ;
10926: LD_EXP 5
10930: PPUSH
10931: LD_INT 0
10933: PPUSH
10934: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10938: LD_EXP 5
10942: PPUSH
10943: LD_INT 12
10945: PPUSH
10946: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10950: LD_EXP 5
10954: PPUSH
10955: LD_STRING 04t_Frank
10957: PPUSH
10958: CALL_OW 38
// wait ( 0 0$3 ) ;
10962: LD_INT 105
10964: PPUSH
10965: CALL_OW 67
// frankScoutBase = 1 ;
10969: LD_ADDR_EXP 25
10973: PUSH
10974: LD_INT 1
10976: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10977: LD_EXP 5
10981: PPUSH
10982: CALL_OW 64
// end ; end else
10986: GO 11075
// begin Say ( JMM , D3-JMM-4 ) ;
10988: LD_EXP 1
10992: PPUSH
10993: LD_STRING D3-JMM-4
10995: PPUSH
10996: CALL_OW 88
// DialogueOff ;
11000: CALL_OW 7
// if IsOk ( Frank ) then
11004: LD_EXP 5
11008: PPUSH
11009: CALL_OW 302
11013: IFFALSE 11075
// begin SetSide ( Frank , 0 ) ;
11015: LD_EXP 5
11019: PPUSH
11020: LD_INT 0
11022: PPUSH
11023: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11027: LD_EXP 5
11031: PPUSH
11032: LD_INT 12
11034: PPUSH
11035: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
11039: LD_EXP 5
11043: PPUSH
11044: LD_STRING 04t_Frank
11046: PPUSH
11047: CALL_OW 38
// wait ( 0 0$3 ) ;
11051: LD_INT 105
11053: PPUSH
11054: CALL_OW 67
// frankScoutBase = 1 ;
11058: LD_ADDR_EXP 25
11062: PUSH
11063: LD_INT 1
11065: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11066: LD_EXP 5
11070: PPUSH
11071: CALL_OW 64
// end ; end ; end ;
11075: PPOPN 1
11077: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11078: LD_EXP 13
11082: PPUSH
11083: CALL_OW 255
11087: PUSH
11088: LD_INT 4
11090: EQUAL
11091: PUSH
11092: LD_EXP 13
11096: PPUSH
11097: CALL_OW 302
11101: AND
11102: IFFALSE 11342
11104: GO 11106
11106: DISABLE
11107: LD_INT 0
11109: PPUSH
11110: PPUSH
// begin wait ( 5 5$00 ) ;
11111: LD_INT 10500
11113: PPUSH
11114: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11118: LD_EXP 13
11122: PPUSH
11123: CALL_OW 255
11127: PUSH
11128: LD_INT 1
11130: EQUAL
11131: PUSH
11132: LD_EXP 13
11136: PPUSH
11137: CALL_OW 301
11141: OR
11142: IFFALSE 11146
// exit ;
11144: GO 11342
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11146: LD_EXP 13
11150: PPUSH
11151: LD_STRING D3b-Don-1
11153: PPUSH
11154: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11158: LD_ADDR_EXP 41
11162: PUSH
11163: LD_INT 1
11165: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11166: LD_ADDR_VAR 0 2
11170: PUSH
11171: LD_INT 22
11173: PUSH
11174: LD_INT 4
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PPUSH
11181: CALL_OW 69
11185: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11186: LD_INT 35
11188: PPUSH
11189: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11193: LD_VAR 0 2
11197: NOT
11198: PUSH
11199: LD_INT 22
11201: PUSH
11202: LD_INT 6
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 101
11211: PUSH
11212: LD_INT 1
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PPUSH
11223: CALL_OW 69
11227: OR
11228: IFFALSE 11186
// if not tmp then
11230: LD_VAR 0 2
11234: NOT
11235: IFFALSE 11239
// exit ;
11237: GO 11342
// for i in tmp do
11239: LD_ADDR_VAR 0 1
11243: PUSH
11244: LD_VAR 0 2
11248: PUSH
11249: FOR_IN
11250: IFFALSE 11269
// ComAgressiveMove ( i , 52 , 64 ) ;
11252: LD_VAR 0 1
11256: PPUSH
11257: LD_INT 52
11259: PPUSH
11260: LD_INT 64
11262: PPUSH
11263: CALL_OW 114
11267: GO 11249
11269: POP
11270: POP
// wait ( 0 0$10 ) ;
11271: LD_INT 350
11273: PPUSH
11274: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11278: LD_ADDR_VAR 0 1
11282: PUSH
11283: LD_INT 22
11285: PUSH
11286: LD_INT 4
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 69
11297: PUSH
11298: LD_EXP 5
11302: DIFF
11303: PUSH
11304: FOR_IN
11305: IFFALSE 11321
// SetSide ( i , 1 ) ;
11307: LD_VAR 0 1
11311: PPUSH
11312: LD_INT 1
11314: PPUSH
11315: CALL_OW 235
11319: GO 11304
11321: POP
11322: POP
// if IsLive ( Donaldson ) then
11323: LD_EXP 13
11327: PPUSH
11328: CALL_OW 300
11332: IFFALSE 11342
// saveDonaldson := 1 ;
11334: LD_ADDR_EXP 24
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// end ;
11342: PPOPN 2
11344: END
// every 0 0$1 trigger not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11345: LD_EXP 24
11349: NOT
11350: PUSH
11351: LD_EXP 41
11355: NOT
11356: AND
11357: PUSH
11358: LD_INT 26
11360: PPUSH
11361: LD_INT 22
11363: PUSH
11364: LD_INT 1
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PPUSH
11371: CALL_OW 70
11375: PUSH
11376: LD_EXP 13
11380: PPUSH
11381: LD_EXP 1
11385: PPUSH
11386: CALL_OW 296
11390: PUSH
11391: LD_INT 6
11393: LESS
11394: OR
11395: AND
11396: IFFALSE 11451
11398: GO 11400
11400: DISABLE
11401: LD_INT 0
11403: PPUSH
// begin saveDonaldson := 1 ;
11404: LD_ADDR_EXP 24
11408: PUSH
11409: LD_INT 1
11411: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11412: LD_ADDR_VAR 0 1
11416: PUSH
11417: LD_INT 22
11419: PUSH
11420: LD_INT 4
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PPUSH
11427: CALL_OW 69
11431: PUSH
11432: FOR_IN
11433: IFFALSE 11449
// SetSide ( i , 1 ) ;
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_INT 1
11442: PPUSH
11443: CALL_OW 235
11447: GO 11432
11449: POP
11450: POP
// end ;
11451: PPOPN 1
11453: END
// every 0 0$1 trigger frankScoutBase do
11454: LD_EXP 25
11458: IFFALSE 11823
11460: GO 11462
11462: DISABLE
// begin wait ( 2 2$30 ) ;
11463: LD_INT 5250
11465: PPUSH
11466: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11470: LD_INT 35
11472: PPUSH
11473: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11477: LD_INT 81
11479: PUSH
11480: LD_INT 4
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: LD_INT 92
11489: PUSH
11490: LD_INT 84
11492: PUSH
11493: LD_INT 28
11495: PUSH
11496: LD_INT 22
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PPUSH
11509: CALL_OW 69
11513: NOT
11514: IFFALSE 11470
// uc_side = 4 ;
11516: LD_ADDR_OWVAR 20
11520: PUSH
11521: LD_INT 4
11523: ST_TO_ADDR
// uc_nation = 1 ;
11524: LD_ADDR_OWVAR 21
11528: PUSH
11529: LD_INT 1
11531: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11532: LD_ADDR_EXP 5
11536: PUSH
11537: LD_STRING 04t_Frank
11539: PPUSH
11540: CALL_OW 34
11544: ST_TO_ADDR
// if not Frank then
11545: LD_EXP 5
11549: NOT
11550: IFFALSE 11554
// exit ;
11552: GO 11823
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11554: LD_EXP 5
11558: PPUSH
11559: LD_INT 13
11561: PPUSH
11562: LD_INT 0
11564: PPUSH
11565: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11569: LD_INT 35
11571: PPUSH
11572: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11576: LD_EXP 1
11580: PPUSH
11581: CALL_OW 310
11585: NOT
11586: PUSH
11587: LD_EXP 1
11591: PPUSH
11592: LD_INT 4
11594: PPUSH
11595: CALL_OW 296
11599: PUSH
11600: LD_INT 20
11602: LESS
11603: AND
11604: IFFALSE 11637
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11606: LD_EXP 5
11610: PPUSH
11611: LD_EXP 1
11615: PPUSH
11616: CALL_OW 250
11620: PPUSH
11621: LD_EXP 1
11625: PPUSH
11626: CALL_OW 251
11630: PPUSH
11631: CALL_OW 111
11635: GO 11652
// ComMoveXY ( Frank , 51 , 15 ) ;
11637: LD_EXP 5
11641: PPUSH
11642: LD_INT 51
11644: PPUSH
11645: LD_INT 15
11647: PPUSH
11648: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11652: LD_EXP 5
11656: PPUSH
11657: LD_EXP 1
11661: PPUSH
11662: CALL_OW 296
11666: PUSH
11667: LD_INT 10
11669: LESS
11670: IFFALSE 11569
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11672: LD_EXP 1
11676: PUSH
11677: LD_EXP 5
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PPUSH
11686: CALL_OW 87
// DialogueOn ;
11690: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11694: LD_EXP 5
11698: PPUSH
11699: LD_STRING D3a-Frank-1
11701: PPUSH
11702: CALL_OW 88
// if Lisa then
11706: LD_EXP 4
11710: IFFALSE 11760
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11712: LD_EXP 4
11716: PPUSH
11717: LD_STRING D3a-Lisa-1
11719: PPUSH
11720: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11724: LD_EXP 5
11728: PPUSH
11729: LD_STRING D3a-Frank-2
11731: PPUSH
11732: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11736: LD_EXP 4
11740: PPUSH
11741: LD_STRING D3a-Lisa-2
11743: PPUSH
11744: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11748: LD_EXP 5
11752: PPUSH
11753: LD_STRING D3a-Frank-3
11755: PPUSH
11756: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11760: LD_EXP 1
11764: PPUSH
11765: LD_STRING D3a-JMM-3
11767: PPUSH
11768: CALL_OW 88
// DialogueOff ;
11772: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11776: LD_EXP 5
11780: PPUSH
11781: LD_INT 1
11783: PPUSH
11784: CALL_OW 235
// InGameOn ;
11788: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11792: LD_INT 1
11794: PPUSH
11795: LD_INT 7
11797: PPUSH
11798: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11802: LD_INT 93
11804: PPUSH
11805: LD_INT 91
11807: PPUSH
11808: CALL_OW 84
// wait ( 0 0$5 ) ;
11812: LD_INT 175
11814: PPUSH
11815: CALL_OW 67
// InGameOff ;
11819: CALL_OW 9
// end ;
11823: END
// every 12 12$0 trigger Difficulty > 1 do
11824: LD_OWVAR 67
11828: PUSH
11829: LD_INT 1
11831: GREATER
11832: IFFALSE 11856
11834: GO 11836
11836: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11837: LD_INT 24
11839: PPUSH
11840: LD_INT 24
11842: PPUSH
11843: LD_INT 1
11845: PPUSH
11846: LD_INT 1
11848: PPUSH
11849: LD_INT 53
11851: PPUSH
11852: CALL_OW 185
11856: END
// every 18 18$0 do
11857: GO 11859
11859: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11860: LD_EXP 14
11864: PPUSH
11865: LD_STRING D4-Har-1
11867: PPUSH
11868: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11872: LD_EXP 1
11876: PPUSH
11877: LD_STRING D4-JMM-1
11879: PPUSH
11880: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11884: LD_EXP 14
11888: PPUSH
11889: LD_STRING D4-Har-2
11891: PPUSH
11892: CALL_OW 94
// case Query ( Q1 ) of 1 :
11896: LD_STRING Q1
11898: PPUSH
11899: CALL_OW 97
11903: PUSH
11904: LD_INT 1
11906: DOUBLE
11907: EQUAL
11908: IFTRUE 11912
11910: GO 11971
11912: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11913: LD_EXP 1
11917: PPUSH
11918: LD_STRING D5-JMM-1
11920: PPUSH
11921: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11925: LD_EXP 14
11929: PPUSH
11930: LD_STRING D5-Har-1
11932: PPUSH
11933: CALL_OW 94
// timeToSupport = 10 10$0 ;
11937: LD_ADDR_EXP 28
11941: PUSH
11942: LD_INT 21000
11944: ST_TO_ADDR
// timerStatus = 2 ;
11945: LD_ADDR_EXP 29
11949: PUSH
11950: LD_INT 2
11952: ST_TO_ADDR
// startTimer = 1 ;
11953: LD_ADDR_EXP 30
11957: PUSH
11958: LD_INT 1
11960: ST_TO_ADDR
// harrAnswer = 1 ;
11961: LD_ADDR_EXP 26
11965: PUSH
11966: LD_INT 1
11968: ST_TO_ADDR
// end ; 2 :
11969: GO 12106
11971: LD_INT 2
11973: DOUBLE
11974: EQUAL
11975: IFTRUE 11979
11977: GO 12038
11979: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11980: LD_EXP 1
11984: PPUSH
11985: LD_STRING D5-JMM-2
11987: PPUSH
11988: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11992: LD_EXP 14
11996: PPUSH
11997: LD_STRING D5-Har-2
11999: PPUSH
12000: CALL_OW 94
// timeToSupport = 5 5$0 ;
12004: LD_ADDR_EXP 28
12008: PUSH
12009: LD_INT 10500
12011: ST_TO_ADDR
// timerStatus = 2 ;
12012: LD_ADDR_EXP 29
12016: PUSH
12017: LD_INT 2
12019: ST_TO_ADDR
// startTimer = 1 ;
12020: LD_ADDR_EXP 30
12024: PUSH
12025: LD_INT 1
12027: ST_TO_ADDR
// harrAnswer = 2 ;
12028: LD_ADDR_EXP 26
12032: PUSH
12033: LD_INT 2
12035: ST_TO_ADDR
// end ; 3 :
12036: GO 12106
12038: LD_INT 3
12040: DOUBLE
12041: EQUAL
12042: IFTRUE 12046
12044: GO 12105
12046: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12047: LD_EXP 1
12051: PPUSH
12052: LD_STRING D5-JMM-3
12054: PPUSH
12055: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12059: LD_EXP 14
12063: PPUSH
12064: LD_STRING D5-Har-3
12066: PPUSH
12067: CALL_OW 94
// timeToSupport = 5 5$0 ;
12071: LD_ADDR_EXP 28
12075: PUSH
12076: LD_INT 10500
12078: ST_TO_ADDR
// timerStatus = 2 ;
12079: LD_ADDR_EXP 29
12083: PUSH
12084: LD_INT 2
12086: ST_TO_ADDR
// startTimer = 1 ;
12087: LD_ADDR_EXP 30
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// harrAnswer = 3 ;
12095: LD_ADDR_EXP 26
12099: PUSH
12100: LD_INT 3
12102: ST_TO_ADDR
// end ; end ;
12103: GO 12106
12105: POP
// end ;
12106: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12107: LD_EXP 29
12111: PUSH
12112: LD_INT 2
12114: EQUAL
12115: PUSH
12116: LD_EXP 28
12120: PUSH
12121: LD_INT 0
12123: EQUAL
12124: AND
12125: IFFALSE 12414
12127: GO 12129
12129: DISABLE
// begin timerStatus = 4 ;
12130: LD_ADDR_EXP 29
12134: PUSH
12135: LD_INT 4
12137: ST_TO_ADDR
// if harrAnswer = 1 then
12138: LD_EXP 26
12142: PUSH
12143: LD_INT 1
12145: EQUAL
12146: IFFALSE 12230
// begin PrepareHarrisonSupport ( 3 ) ;
12148: LD_INT 3
12150: PPUSH
12151: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12155: LD_INT 2100
12157: PPUSH
12158: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12162: LD_EXP 14
12166: PPUSH
12167: LD_STRING D7-Har-1
12169: PPUSH
12170: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12174: LD_STRING M2
12176: PPUSH
12177: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12181: LD_ADDR_EXP 27
12185: PUSH
12186: LD_INT 31500
12188: PUSH
12189: LD_INT 10500
12191: PUSH
12192: LD_INT 8400
12194: PUSH
12195: LD_INT 6300
12197: PUSH
12198: LD_INT 6300
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: LD_OWVAR 67
12211: ARRAY
12212: PLUS
12213: ST_TO_ADDR
// startTimer = 1 ;
12214: LD_ADDR_EXP 30
12218: PUSH
12219: LD_INT 1
12221: ST_TO_ADDR
// timerStatus = 3 ;
12222: LD_ADDR_EXP 29
12226: PUSH
12227: LD_INT 3
12229: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12230: LD_EXP 26
12234: PUSH
12235: LD_INT 2
12237: EQUAL
12238: IFFALSE 12322
// begin PrepareHarrisonSupport ( 4 ) ;
12240: LD_INT 4
12242: PPUSH
12243: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12247: LD_INT 2100
12249: PPUSH
12250: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12254: LD_EXP 14
12258: PPUSH
12259: LD_STRING D7-Har-1
12261: PPUSH
12262: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12266: LD_STRING M2
12268: PPUSH
12269: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12273: LD_ADDR_EXP 27
12277: PUSH
12278: LD_INT 33600
12280: PUSH
12281: LD_INT 10500
12283: PUSH
12284: LD_INT 8400
12286: PUSH
12287: LD_INT 6300
12289: PUSH
12290: LD_INT 5250
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: PUSH
12299: LD_OWVAR 67
12303: ARRAY
12304: PLUS
12305: ST_TO_ADDR
// startTimer = 1 ;
12306: LD_ADDR_EXP 30
12310: PUSH
12311: LD_INT 1
12313: ST_TO_ADDR
// timerStatus = 3 ;
12314: LD_ADDR_EXP 29
12318: PUSH
12319: LD_INT 3
12321: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12322: LD_EXP 26
12326: PUSH
12327: LD_INT 3
12329: EQUAL
12330: IFFALSE 12414
// begin PrepareHarrisonSupport ( 5 ) ;
12332: LD_INT 5
12334: PPUSH
12335: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12339: LD_INT 2100
12341: PPUSH
12342: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12346: LD_EXP 14
12350: PPUSH
12351: LD_STRING D7-Har-1
12353: PPUSH
12354: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12358: LD_STRING M2
12360: PPUSH
12361: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12365: LD_ADDR_EXP 27
12369: PUSH
12370: LD_INT 35700
12372: PUSH
12373: LD_INT 10500
12375: PUSH
12376: LD_INT 6300
12378: PUSH
12379: LD_INT 4200
12381: PUSH
12382: LD_INT 3150
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: LD_OWVAR 67
12395: ARRAY
12396: PLUS
12397: ST_TO_ADDR
// startTimer = 1 ;
12398: LD_ADDR_EXP 30
12402: PUSH
12403: LD_INT 1
12405: ST_TO_ADDR
// timerStatus = 3 ;
12406: LD_ADDR_EXP 29
12410: PUSH
12411: LD_INT 3
12413: ST_TO_ADDR
// end ; end ;
12414: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12415: LD_EXP 27
12419: PUSH
12420: LD_INT 8400
12422: LESSEQUAL
12423: PUSH
12424: LD_EXP 29
12428: PUSH
12429: LD_INT 3
12431: EQUAL
12432: AND
12433: IFFALSE 12465
12435: GO 12437
12437: DISABLE
// begin DialogueOn ;
12438: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12442: LD_EXP 14
12446: PPUSH
12447: LD_STRING D7a-Har-1
12449: PPUSH
12450: CALL_OW 94
// DialogueOff ;
12454: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12458: LD_STRING M2a
12460: PPUSH
12461: CALL_OW 337
// end ;
12465: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12466: LD_EXP 27
12470: PUSH
12471: LD_INT 0
12473: LESSEQUAL
12474: PUSH
12475: LD_EXP 29
12479: PUSH
12480: LD_INT 3
12482: EQUAL
12483: AND
12484: PUSH
12485: LD_EXP 40
12489: NOT
12490: AND
12491: IFFALSE 12630
12493: GO 12495
12495: DISABLE
12496: LD_INT 0
12498: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12499: LD_ADDR_VAR 0 1
12503: PUSH
12504: LD_INT 22
12506: PUSH
12507: LD_INT 1
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: PUSH
12519: LD_EXP 1
12523: PUSH
12524: EMPTY
12525: LIST
12526: DIFF
12527: ST_TO_ADDR
// saveDonaldson = 2 ;
12528: LD_ADDR_EXP 24
12532: PUSH
12533: LD_INT 2
12535: ST_TO_ADDR
// DialogueOn ;
12536: CALL_OW 6
// if IsOk ( Donaldson ) then
12540: LD_EXP 13
12544: PPUSH
12545: CALL_OW 302
12549: IFFALSE 12565
// SayRadio ( Harisson , D8-Har-1 ) else
12551: LD_EXP 14
12555: PPUSH
12556: LD_STRING D8-Har-1
12558: PPUSH
12559: CALL_OW 94
12563: GO 12577
// SayRadio ( Harisson , D8-Har-1a ) ;
12565: LD_EXP 14
12569: PPUSH
12570: LD_STRING D8-Har-1a
12572: PPUSH
12573: CALL_OW 94
// DialogueOff ;
12577: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12581: LD_VAR 0 1
12585: PPUSH
12586: LD_INT 4
12588: PPUSH
12589: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12593: LD_VAR 0 1
12597: PPUSH
12598: LD_INT 88
12600: PPUSH
12601: LD_INT 89
12603: PPUSH
12604: CALL_OW 114
// honor = 0 ;
12608: LD_ADDR_EXP 39
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12616: LD_INT 350
12618: PPUSH
12619: CALL_OW 67
// YouLost ( LostCommand ) ;
12623: LD_STRING LostCommand
12625: PPUSH
12626: CALL_OW 104
// end ;
12630: PPOPN 1
12632: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12633: LD_INT 22
12635: PUSH
12636: LD_INT 6
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 21
12645: PUSH
12646: LD_INT 1
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PPUSH
12657: CALL_OW 69
12661: PUSH
12662: LD_INT 0
12664: EQUAL
12665: PUSH
12666: LD_EXP 20
12670: PUSH
12671: LD_INT 0
12673: EQUAL
12674: AND
12675: PUSH
12676: LD_EXP 44
12680: PUSH
12681: LD_INT 1
12683: EQUAL
12684: AND
12685: IFFALSE 12779
12687: GO 12689
12689: DISABLE
12690: LD_INT 0
12692: PPUSH
12693: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12694: LD_ADDR_VAR 0 2
12698: PUSH
12699: LD_INT 22
12701: PUSH
12702: LD_INT 1
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 21
12711: PUSH
12712: LD_INT 1
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 23
12721: PUSH
12722: LD_INT 1
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: PPUSH
12734: CALL_OW 69
12738: ST_TO_ADDR
// for i in tmp do
12739: LD_ADDR_VAR 0 1
12743: PUSH
12744: LD_VAR 0 2
12748: PUSH
12749: FOR_IN
12750: IFFALSE 12777
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12752: LD_VAR 0 1
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: LD_INT 4
12762: PPUSH
12763: CALL_OW 12
12767: PPUSH
12768: LD_INT 500
12770: PPUSH
12771: CALL_OW 492
12775: GO 12749
12777: POP
12778: POP
// end ; end_of_file
12779: PPOPN 2
12781: END
// every 0 0$1 trigger AIEnable do
12782: LD_EXP 37
12786: IFFALSE 12880
12788: GO 12790
12790: DISABLE
// begin enable ;
12791: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12792: LD_INT 3
12794: PPUSH
12795: LD_INT 21
12797: PPUSH
12798: LD_INT 7
12800: PPUSH
12801: CALL 6030 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12805: LD_INT 3
12807: PPUSH
12808: LD_INT 8
12810: PPUSH
12811: LD_INT 7
12813: PPUSH
12814: LD_INT 1
12816: PPUSH
12817: CALL 6334 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12821: LD_EXP 20
12825: PUSH
12826: LD_INT 2
12828: EQUAL
12829: PUSH
12830: LD_INT 22
12832: PUSH
12833: LD_INT 6
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PPUSH
12840: CALL_OW 69
12844: AND
12845: IFFALSE 12880
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12847: LD_INT 6
12849: PPUSH
12850: LD_EXP 21
12854: PPUSH
12855: LD_INT 6
12857: PPUSH
12858: CALL 6030 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12862: LD_INT 6
12864: PPUSH
12865: LD_INT 9
12867: PPUSH
12868: LD_INT 6
12870: PPUSH
12871: LD_EXP 22
12875: PPUSH
12876: CALL 6334 0 4
// end ; end ;
12880: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12881: LD_EXP 15
12885: PPUSH
12886: CALL_OW 310
12890: NOT
12891: PUSH
12892: LD_INT 21
12894: PPUSH
12895: CALL_OW 302
12899: AND
12900: PUSH
12901: LD_INT 21
12903: PPUSH
12904: CALL_OW 255
12908: PUSH
12909: LD_INT 3
12911: EQUAL
12912: AND
12913: IFFALSE 12930
12915: GO 12917
12917: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12918: LD_EXP 15
12922: PPUSH
12923: LD_INT 21
12925: PPUSH
12926: CALL_OW 120
12930: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12931: LD_INT 22
12933: PUSH
12934: LD_INT 3
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 21
12943: PUSH
12944: LD_INT 2
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 55
12953: PUSH
12954: EMPTY
12955: LIST
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: LIST
12961: PPUSH
12962: CALL_OW 69
12966: PUSH
12967: LD_INT 0
12969: EQUAL
12970: PUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 255
12978: PUSH
12979: LD_INT 3
12981: EQUAL
12982: AND
12983: PUSH
12984: LD_INT 21
12986: PPUSH
12987: CALL_OW 302
12991: AND
12992: PUSH
12993: LD_INT 21
12995: PPUSH
12996: CALL_OW 255
13000: PUSH
13001: LD_INT 3
13003: EQUAL
13004: AND
13005: PUSH
13006: LD_INT 21
13008: PPUSH
13009: CALL_OW 302
13013: AND
13014: IFFALSE 13226
13016: GO 13018
13018: DISABLE
// begin enable ;
13019: ENABLE
// if Difficulty = 1 then
13020: LD_OWVAR 67
13024: PUSH
13025: LD_INT 1
13027: EQUAL
13028: IFFALSE 13072
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
13030: LD_INT 3
13032: PPUSH
13033: LD_INT 24
13035: PPUSH
13036: LD_OWVAR 67
13040: PUSH
13041: LD_INT 2
13043: PLUS
13044: PPUSH
13045: LD_INT 42
13047: PUSH
13048: LD_INT 44
13050: PUSH
13051: LD_INT 43
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: PPUSH
13059: LD_INT 1
13061: PPUSH
13062: LD_INT 1
13064: PPUSH
13065: LD_INT 21
13067: PPUSH
13068: CALL 6848 0 7
// if Difficulty = 2 then
13072: LD_OWVAR 67
13076: PUSH
13077: LD_INT 2
13079: EQUAL
13080: IFFALSE 13147
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13082: LD_INT 3
13084: PPUSH
13085: LD_INT 24
13087: PPUSH
13088: LD_OWVAR 67
13092: PUSH
13093: LD_INT 2
13095: PLUS
13096: PPUSH
13097: LD_INT 44
13099: PUSH
13100: LD_INT 44
13102: PUSH
13103: LD_INT 43
13105: PUSH
13106: LD_INT 43
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: PPUSH
13115: LD_INT 1
13117: PPUSH
13118: LD_INT 1
13120: PPUSH
13121: LD_INT 21
13123: PUSH
13124: LD_INT 22
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 1
13133: PPUSH
13134: LD_INT 2
13136: PPUSH
13137: CALL_OW 12
13141: ARRAY
13142: PPUSH
13143: CALL 6848 0 7
// if Difficulty >= 3 then
13147: LD_OWVAR 67
13151: PUSH
13152: LD_INT 3
13154: GREATEREQUAL
13155: IFFALSE 13226
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13157: LD_INT 3
13159: PPUSH
13160: LD_INT 24
13162: PPUSH
13163: LD_OWVAR 67
13167: PUSH
13168: LD_INT 2
13170: PPUSH
13171: LD_INT 3
13173: PPUSH
13174: CALL_OW 12
13178: PLUS
13179: PPUSH
13180: LD_INT 44
13182: PUSH
13183: LD_INT 44
13185: PUSH
13186: LD_INT 43
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: PPUSH
13194: LD_INT 1
13196: PPUSH
13197: LD_INT 1
13199: PPUSH
13200: LD_INT 22
13202: PUSH
13203: LD_INT 23
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 1
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: CALL_OW 12
13220: ARRAY
13221: PPUSH
13222: CALL 6848 0 7
// end ;
13226: END
// every 0 0$1 do
13227: GO 13229
13229: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13230: LD_INT 3
13232: PPUSH
13233: LD_INT 1
13235: PPUSH
13236: LD_INT 3
13238: PPUSH
13239: CALL 5951 0 3
13243: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13244: LD_EXP 20
13248: PUSH
13249: LD_INT 1
13251: EQUAL
13252: IFFALSE 13399
13254: GO 13256
13256: DISABLE
13257: LD_INT 0
13259: PPUSH
13260: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13261: LD_ADDR_VAR 0 2
13265: PUSH
13266: LD_INT 22
13268: PUSH
13269: LD_INT 6
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 21
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 34
13288: PUSH
13289: LD_INT 51
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: LIST
13300: PPUSH
13301: CALL_OW 69
13305: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13306: LD_VAR 0 2
13310: PUSH
13311: LD_INT 1
13313: ARRAY
13314: PPUSH
13315: LD_EXP 21
13319: PPUSH
13320: CALL_OW 250
13324: PUSH
13325: LD_INT 5
13327: MINUS
13328: PPUSH
13329: LD_EXP 21
13333: PPUSH
13334: CALL_OW 251
13338: PUSH
13339: LD_INT 5
13341: MINUS
13342: PPUSH
13343: CALL_OW 111
// wait ( 0 0$5 ) ;
13347: LD_INT 175
13349: PPUSH
13350: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13354: LD_VAR 0 2
13358: PUSH
13359: LD_INT 1
13361: ARRAY
13362: PPUSH
13363: LD_INT 41
13365: PPUSH
13366: LD_INT 52
13368: PPUSH
13369: CALL_OW 177
// wait ( 0 0$40 ) ;
13373: LD_INT 1400
13375: PPUSH
13376: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13380: LD_VAR 0 2
13384: PUSH
13385: LD_INT 1
13387: ARRAY
13388: PPUSH
13389: LD_INT 41
13391: PPUSH
13392: LD_INT 44
13394: PPUSH
13395: CALL_OW 111
// end ;
13399: PPOPN 2
13401: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13402: LD_EXP 21
13406: PPUSH
13407: CALL_OW 274
13411: PPUSH
13412: LD_INT 1
13414: PPUSH
13415: CALL_OW 275
13419: PUSH
13420: LD_INT 100
13422: GREATEREQUAL
13423: IFFALSE 13651
13425: GO 13427
13427: DISABLE
13428: LD_INT 0
13430: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13431: LD_ADDR_VAR 0 1
13435: PUSH
13436: LD_INT 22
13438: PUSH
13439: LD_INT 6
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 21
13448: PUSH
13449: LD_INT 1
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 25
13458: PUSH
13459: LD_INT 2
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: LIST
13470: PPUSH
13471: CALL_OW 69
13475: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13476: LD_VAR 0 1
13480: PUSH
13481: LD_INT 1
13483: ARRAY
13484: PPUSH
13485: LD_INT 4
13487: PPUSH
13488: LD_INT 39
13490: PPUSH
13491: LD_INT 37
13493: PPUSH
13494: LD_INT 3
13496: PPUSH
13497: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13501: LD_VAR 0 1
13505: PUSH
13506: LD_INT 1
13508: ARRAY
13509: PPUSH
13510: LD_INT 29
13512: PPUSH
13513: LD_INT 42
13515: PPUSH
13516: LD_INT 54
13518: PPUSH
13519: LD_INT 3
13521: PPUSH
13522: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13526: LD_VAR 0 1
13530: PUSH
13531: LD_INT 1
13533: ARRAY
13534: PPUSH
13535: LD_INT 6
13537: PPUSH
13538: LD_INT 38
13540: PPUSH
13541: LD_INT 48
13543: PPUSH
13544: LD_INT 0
13546: PPUSH
13547: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13551: LD_VAR 0 1
13555: PUSH
13556: LD_INT 1
13558: ARRAY
13559: PPUSH
13560: LD_INT 2
13562: PPUSH
13563: LD_INT 32
13565: PPUSH
13566: LD_INT 38
13568: PPUSH
13569: LD_INT 2
13571: PPUSH
13572: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13576: LD_VAR 0 1
13580: PUSH
13581: LD_INT 1
13583: ARRAY
13584: PPUSH
13585: LD_INT 26
13587: PPUSH
13588: LD_INT 39
13590: PPUSH
13591: LD_INT 55
13593: PPUSH
13594: LD_INT 3
13596: PPUSH
13597: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13601: LD_VAR 0 1
13605: PUSH
13606: LD_INT 1
13608: ARRAY
13609: PPUSH
13610: LD_INT 32
13612: PPUSH
13613: LD_INT 31
13615: PPUSH
13616: LD_INT 31
13618: PPUSH
13619: LD_INT 3
13621: PPUSH
13622: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13626: LD_VAR 0 1
13630: PUSH
13631: LD_INT 1
13633: ARRAY
13634: PPUSH
13635: LD_INT 31
13637: PPUSH
13638: LD_INT 50
13640: PPUSH
13641: LD_INT 51
13643: PPUSH
13644: LD_INT 4
13646: PPUSH
13647: CALL_OW 205
// end ;
13651: PPOPN 1
13653: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13654: LD_EXP 46
13658: IFFALSE 14215
13660: GO 13662
13662: DISABLE
13663: LD_INT 0
13665: PPUSH
13666: PPUSH
13667: PPUSH
// begin enable ;
13668: ENABLE
// if not ruMobile then
13669: LD_EXP 46
13673: NOT
13674: IFFALSE 13678
// exit ;
13676: GO 14215
// for i in ruMobile do
13678: LD_ADDR_VAR 0 1
13682: PUSH
13683: LD_EXP 46
13687: PUSH
13688: FOR_IN
13689: IFFALSE 14213
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13691: LD_VAR 0 1
13695: PPUSH
13696: CALL_OW 302
13700: NOT
13701: PUSH
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 255
13711: PUSH
13712: LD_INT 3
13714: NONEQUAL
13715: OR
13716: IFFALSE 13736
// begin ruMobile := ruMobile diff i ;
13718: LD_ADDR_EXP 46
13722: PUSH
13723: LD_EXP 46
13727: PUSH
13728: LD_VAR 0 1
13732: DIFF
13733: ST_TO_ADDR
// continue ;
13734: GO 13688
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13736: LD_VAR 0 1
13740: PPUSH
13741: CALL_OW 110
13745: NOT
13746: PUSH
13747: LD_VAR 0 1
13751: PPUSH
13752: CALL_OW 110
13756: PUSH
13757: LD_INT 0
13759: EQUAL
13760: OR
13761: IFFALSE 13876
// begin if GetFuel ( i ) < 50 then
13763: LD_VAR 0 1
13767: PPUSH
13768: CALL_OW 261
13772: PUSH
13773: LD_INT 50
13775: LESS
13776: IFFALSE 13835
// begin ComMoveXY ( i , 106 , 88 ) ;
13778: LD_VAR 0 1
13782: PPUSH
13783: LD_INT 106
13785: PPUSH
13786: LD_INT 88
13788: PPUSH
13789: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13793: LD_INT 35
13795: PPUSH
13796: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13800: LD_VAR 0 1
13804: PPUSH
13805: LD_INT 106
13807: PPUSH
13808: LD_INT 88
13810: PPUSH
13811: CALL_OW 297
13815: PUSH
13816: LD_INT 4
13818: LESS
13819: IFFALSE 13793
// SetFuel ( i , 100 ) ;
13821: LD_VAR 0 1
13825: PPUSH
13826: LD_INT 100
13828: PPUSH
13829: CALL_OW 240
// end else
13833: GO 13876
// if not IsInArea ( i , ruParking ) then
13835: LD_VAR 0 1
13839: PPUSH
13840: LD_INT 25
13842: PPUSH
13843: CALL_OW 308
13847: NOT
13848: IFFALSE 13864
// ComMoveToArea ( i , ruParking ) else
13850: LD_VAR 0 1
13854: PPUSH
13855: LD_INT 25
13857: PPUSH
13858: CALL_OW 113
13862: GO 13876
// SetTag ( i , 1 ) ;
13864: LD_VAR 0 1
13868: PPUSH
13869: LD_INT 1
13871: PPUSH
13872: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13876: LD_VAR 0 1
13880: PPUSH
13881: CALL_OW 110
13885: PUSH
13886: LD_INT 1
13888: EQUAL
13889: IFFALSE 14019
// begin if GetLives ( i ) < 1000 then
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 256
13900: PUSH
13901: LD_INT 1000
13903: LESS
13904: IFFALSE 13996
// begin if not IsDrivenBy ( i ) then
13906: LD_VAR 0 1
13910: PPUSH
13911: CALL_OW 311
13915: NOT
13916: IFFALSE 13920
// continue ;
13918: GO 13688
// mech := IsDrivenBy ( i ) ;
13920: LD_ADDR_VAR 0 2
13924: PUSH
13925: LD_VAR 0 1
13929: PPUSH
13930: CALL_OW 311
13934: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13935: LD_VAR 0 2
13939: PPUSH
13940: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13944: LD_VAR 0 2
13948: PPUSH
13949: LD_VAR 0 1
13953: PPUSH
13954: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13958: LD_INT 35
13960: PPUSH
13961: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13965: LD_VAR 0 1
13969: PPUSH
13970: CALL_OW 256
13974: PUSH
13975: LD_INT 1000
13977: EQUAL
13978: IFFALSE 13958
// ComEnterUnit ( mech , i ) ;
13980: LD_VAR 0 2
13984: PPUSH
13985: LD_VAR 0 1
13989: PPUSH
13990: CALL_OW 120
// end else
13994: GO 14019
// if IsDrivenBy ( i ) then
13996: LD_VAR 0 1
14000: PPUSH
14001: CALL_OW 311
14005: IFFALSE 14019
// SetTag ( i , 2 ) ;
14007: LD_VAR 0 1
14011: PPUSH
14012: LD_INT 2
14014: PPUSH
14015: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
14019: LD_VAR 0 1
14023: PPUSH
14024: CALL_OW 110
14028: PUSH
14029: LD_INT 2
14031: EQUAL
14032: IFFALSE 14211
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14034: LD_ADDR_VAR 0 3
14038: PUSH
14039: LD_INT 24
14041: PPUSH
14042: LD_INT 81
14044: PUSH
14045: LD_INT 3
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PPUSH
14052: CALL_OW 70
14056: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14057: LD_VAR 0 1
14061: PPUSH
14062: CALL_OW 256
14066: PUSH
14067: LD_INT 650
14069: LESS
14070: IFFALSE 14095
// begin ComStop ( i ) ;
14072: LD_VAR 0 1
14076: PPUSH
14077: CALL_OW 141
// SetTag ( i , 0 ) ;
14081: LD_VAR 0 1
14085: PPUSH
14086: LD_INT 0
14088: PPUSH
14089: CALL_OW 109
// continue ;
14093: GO 13688
// end ; if enemy then
14095: LD_VAR 0 3
14099: IFFALSE 14139
// begin if not HasTask ( i ) then
14101: LD_VAR 0 1
14105: PPUSH
14106: CALL_OW 314
14110: NOT
14111: IFFALSE 14137
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14113: LD_VAR 0 1
14117: PPUSH
14118: LD_VAR 0 3
14122: PPUSH
14123: LD_VAR 0 1
14127: PPUSH
14128: CALL_OW 74
14132: PPUSH
14133: CALL_OW 115
// end else
14137: GO 14211
// if ruMobile > 2 then
14139: LD_EXP 46
14143: PUSH
14144: LD_INT 2
14146: GREATER
14147: IFFALSE 14211
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14149: LD_ADDR_VAR 0 3
14153: PUSH
14154: LD_INT 81
14156: PUSH
14157: LD_INT 3
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PPUSH
14164: CALL_OW 69
14168: ST_TO_ADDR
// if enemy then
14169: LD_VAR 0 3
14173: IFFALSE 14211
// if not HasTask ( i ) then
14175: LD_VAR 0 1
14179: PPUSH
14180: CALL_OW 314
14184: NOT
14185: IFFALSE 14211
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14187: LD_VAR 0 1
14191: PPUSH
14192: LD_VAR 0 3
14196: PPUSH
14197: LD_VAR 0 1
14201: PPUSH
14202: CALL_OW 74
14206: PPUSH
14207: CALL_OW 115
// end ; end ; end ;
14211: GO 13688
14213: POP
14214: POP
// end ; end_of_file
14215: PPOPN 3
14217: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14218: LD_INT 0
14220: PPUSH
14221: PPUSH
14222: PPUSH
14223: PPUSH
14224: PPUSH
14225: PPUSH
14226: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14227: LD_ADDR_VAR 0 3
14231: PUSH
14232: LD_INT 22
14234: PUSH
14235: LD_INT 6
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 21
14244: PUSH
14245: LD_INT 1
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: LD_INT 25
14254: PUSH
14255: LD_INT 1
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 3
14264: PUSH
14265: LD_INT 54
14267: PUSH
14268: EMPTY
14269: LIST
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: PPUSH
14281: CALL_OW 69
14285: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14286: LD_ADDR_VAR 0 7
14290: PUSH
14291: LD_INT 22
14293: PUSH
14294: LD_INT 6
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PUSH
14301: LD_INT 21
14303: PUSH
14304: LD_INT 1
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: LD_INT 25
14313: PUSH
14314: LD_INT 1
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: LD_INT 54
14323: PUSH
14324: EMPTY
14325: LIST
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: PPUSH
14333: CALL_OW 69
14337: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14338: LD_ADDR_VAR 0 4
14342: PUSH
14343: LD_INT 22
14345: PUSH
14346: LD_INT 6
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 21
14355: PUSH
14356: LD_INT 1
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 25
14365: PUSH
14366: LD_INT 2
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: LIST
14377: PPUSH
14378: CALL_OW 69
14382: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14383: LD_ADDR_VAR 0 6
14387: PUSH
14388: LD_INT 22
14390: PUSH
14391: LD_INT 6
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 21
14400: PUSH
14401: LD_INT 1
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: LD_INT 25
14410: PUSH
14411: LD_INT 4
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: LIST
14422: PPUSH
14423: CALL_OW 69
14427: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14428: LD_ADDR_VAR 0 8
14432: PUSH
14433: LD_INT 22
14435: PUSH
14436: LD_INT 6
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PUSH
14443: LD_INT 21
14445: PUSH
14446: LD_INT 2
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: PUSH
14453: LD_INT 34
14455: PUSH
14456: LD_INT 51
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: LIST
14467: PPUSH
14468: CALL_OW 69
14472: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14473: LD_VAR 0 1
14477: PPUSH
14478: CALL_OW 255
14482: PUSH
14483: LD_INT 6
14485: EQUAL
14486: PUSH
14487: LD_VAR 0 1
14491: PPUSH
14492: CALL_OW 266
14496: PUSH
14497: LD_INT 0
14499: EQUAL
14500: AND
14501: IFFALSE 14521
// begin ruPDepot = building ;
14503: LD_ADDR_EXP 21
14507: PUSH
14508: LD_VAR 0 1
14512: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14513: LD_ADDR_EXP 20
14517: PUSH
14518: LD_INT 1
14520: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 266
14530: PUSH
14531: LD_INT 4
14533: EQUAL
14534: PUSH
14535: LD_VAR 0 1
14539: PPUSH
14540: CALL_OW 255
14544: PUSH
14545: LD_INT 6
14547: EQUAL
14548: AND
14549: IFFALSE 14582
// for i in tmpSold do
14551: LD_ADDR_VAR 0 2
14555: PUSH
14556: LD_VAR 0 3
14560: PUSH
14561: FOR_IN
14562: IFFALSE 14580
// ComEnterUnit ( i , building ) ;
14564: LD_VAR 0 2
14568: PPUSH
14569: LD_VAR 0 1
14573: PPUSH
14574: CALL_OW 120
14578: GO 14561
14580: POP
14581: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14582: LD_VAR 0 1
14586: PPUSH
14587: CALL_OW 266
14591: PUSH
14592: LD_INT 6
14594: EQUAL
14595: PUSH
14596: LD_VAR 0 1
14600: PPUSH
14601: CALL_OW 255
14605: PUSH
14606: LD_INT 6
14608: EQUAL
14609: AND
14610: IFFALSE 14668
// begin for i in tmpSci do
14612: LD_ADDR_VAR 0 2
14616: PUSH
14617: LD_VAR 0 6
14621: PUSH
14622: FOR_IN
14623: IFFALSE 14641
// ComEnterUnit ( i , building ) ;
14625: LD_VAR 0 2
14629: PPUSH
14630: LD_VAR 0 1
14634: PPUSH
14635: CALL_OW 120
14639: GO 14622
14641: POP
14642: POP
// ResAllTechs ( 6 , building , 3 ) ;
14643: LD_INT 6
14645: PPUSH
14646: LD_VAR 0 1
14650: PPUSH
14651: LD_INT 3
14653: PPUSH
14654: CALL 5951 0 3
// ruPLab = building ;
14658: LD_ADDR_EXP 22
14662: PUSH
14663: LD_VAR 0 1
14667: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14668: LD_VAR 0 1
14672: PPUSH
14673: CALL_OW 266
14677: PUSH
14678: LD_INT 2
14680: EQUAL
14681: PUSH
14682: LD_VAR 0 1
14686: PPUSH
14687: CALL_OW 255
14691: PUSH
14692: LD_INT 6
14694: EQUAL
14695: AND
14696: IFFALSE 14747
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14698: LD_ADDR_VAR 0 5
14702: PUSH
14703: LD_VAR 0 8
14707: PUSH
14708: LD_INT 1
14710: ARRAY
14711: PPUSH
14712: CALL_OW 313
14716: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14717: LD_VAR 0 5
14721: PPUSH
14722: CALL_OW 121
// wait ( 0 0$1 ) ;
14726: LD_INT 35
14728: PPUSH
14729: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14733: LD_VAR 0 5
14737: PPUSH
14738: LD_VAR 0 1
14742: PPUSH
14743: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14747: LD_VAR 0 1
14751: PPUSH
14752: CALL_OW 266
14756: PUSH
14757: LD_INT 32
14759: EQUAL
14760: PUSH
14761: LD_VAR 0 1
14765: PPUSH
14766: CALL_OW 255
14770: PUSH
14771: LD_INT 6
14773: EQUAL
14774: AND
14775: IFFALSE 14827
// begin ComPlaceWeapon ( building , 42 ) ;
14777: LD_VAR 0 1
14781: PPUSH
14782: LD_INT 42
14784: PPUSH
14785: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14789: LD_VAR 0 7
14793: PUSH
14794: LD_INT 1
14796: ARRAY
14797: PPUSH
14798: CALL_OW 122
// wait ( 0 0$1 ) ;
14802: LD_INT 35
14804: PPUSH
14805: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14809: LD_VAR 0 7
14813: PUSH
14814: LD_INT 1
14816: ARRAY
14817: PPUSH
14818: LD_VAR 0 1
14822: PPUSH
14823: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14827: LD_VAR 0 1
14831: PPUSH
14832: CALL_OW 266
14836: PUSH
14837: LD_INT 31
14839: EQUAL
14840: PUSH
14841: LD_VAR 0 1
14845: PPUSH
14846: CALL_OW 255
14850: PUSH
14851: LD_INT 6
14853: EQUAL
14854: AND
14855: IFFALSE 14921
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14857: LD_VAR 0 7
14861: PUSH
14862: LD_INT 2
14864: ARRAY
14865: PPUSH
14866: CALL_OW 122
// wait ( 0 0$1 ) ;
14870: LD_INT 35
14872: PPUSH
14873: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14877: LD_VAR 0 7
14881: PUSH
14882: LD_INT 2
14884: ARRAY
14885: PPUSH
14886: LD_VAR 0 1
14890: PPUSH
14891: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14895: LD_VAR 0 4
14899: PUSH
14900: LD_INT 1
14902: ARRAY
14903: PPUSH
14904: LD_EXP 21
14908: PPUSH
14909: CALL_OW 120
// baseReadyToBuild = 2 ;
14913: LD_ADDR_EXP 20
14917: PUSH
14918: LD_INT 2
14920: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14921: LD_VAR 0 1
14925: PPUSH
14926: CALL_OW 266
14930: PUSH
14931: LD_INT 32
14933: EQUAL
14934: PUSH
14935: LD_VAR 0 1
14939: PPUSH
14940: CALL_OW 255
14944: PUSH
14945: LD_INT 1
14947: EQUAL
14948: AND
14949: PUSH
14950: LD_EXP 32
14954: PUSH
14955: LD_INT 0
14957: EQUAL
14958: AND
14959: IFFALSE 15204
// begin bunkerDialog = 1 ;
14961: LD_ADDR_EXP 32
14965: PUSH
14966: LD_INT 1
14968: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14969: LD_EXP 11
14973: PPUSH
14974: CALL_OW 302
14978: IFFALSE 14994
// Say ( Claptopn , D11-Eng1-1 ) else
14980: LD_EXP 11
14984: PPUSH
14985: LD_STRING D11-Eng1-1
14987: PPUSH
14988: CALL_OW 88
14992: GO 15190
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14994: LD_INT 22
14996: PUSH
14997: LD_INT 1
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 21
15006: PUSH
15007: LD_INT 1
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 25
15016: PUSH
15017: LD_INT 3
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 26
15026: PUSH
15027: LD_INT 1
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: PPUSH
15040: CALL_OW 69
15044: PUSH
15045: LD_EXP 1
15049: PUSH
15050: EMPTY
15051: LIST
15052: PUSH
15053: LD_INT 0
15055: GREATER
15056: DIFF
15057: IFFALSE 15131
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15059: LD_INT 22
15061: PUSH
15062: LD_INT 1
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 21
15071: PUSH
15072: LD_INT 1
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: LD_INT 25
15081: PUSH
15082: LD_INT 2
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 26
15091: PUSH
15092: LD_INT 1
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: PPUSH
15105: CALL_OW 69
15109: PUSH
15110: LD_EXP 1
15114: PUSH
15115: EMPTY
15116: LIST
15117: DIFF
15118: PPUSH
15119: LD_STRING D11-Eng1-1
15121: PPUSH
15122: LD_STRING D11-Eng1-1
15124: PPUSH
15125: CALL 4598 0 3
15129: GO 15190
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15131: LD_INT 22
15133: PUSH
15134: LD_INT 1
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 21
15143: PUSH
15144: LD_INT 1
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: LD_INT 26
15153: PUSH
15154: LD_INT 1
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: LIST
15165: PPUSH
15166: CALL_OW 69
15170: PUSH
15171: LD_EXP 1
15175: PUSH
15176: EMPTY
15177: LIST
15178: DIFF
15179: PPUSH
15180: LD_STRING D11-Eng1-1
15182: PPUSH
15183: LD_STRING D11-Eng1-1
15185: PPUSH
15186: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15190: LD_EXP 33
15194: PUSH
15195: LD_INT 0
15197: EQUAL
15198: IFFALSE 15204
// EnergyDialog ;
15200: CALL 5003 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15204: LD_VAR 0 1
15208: PPUSH
15209: CALL_OW 266
15213: PUSH
15214: LD_INT 29
15216: EQUAL
15217: PUSH
15218: LD_VAR 0 1
15222: PPUSH
15223: CALL_OW 255
15227: PUSH
15228: LD_INT 1
15230: EQUAL
15231: AND
15232: IFFALSE 15242
// buildOil = 1 ;
15234: LD_ADDR_EXP 34
15238: PUSH
15239: LD_INT 1
15241: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15242: LD_VAR 0 1
15246: PPUSH
15247: CALL_OW 266
15251: PUSH
15252: LD_INT 26
15254: EQUAL
15255: PUSH
15256: LD_VAR 0 1
15260: PPUSH
15261: CALL_OW 255
15265: PUSH
15266: LD_INT 1
15268: EQUAL
15269: AND
15270: IFFALSE 15280
// buildPower = 1 ;
15272: LD_ADDR_EXP 35
15276: PUSH
15277: LD_INT 1
15279: ST_TO_ADDR
// end ;
15280: PPOPN 8
15282: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15283: LD_VAR 0 1
15287: PPUSH
15288: CALL_OW 266
15292: PUSH
15293: LD_INT 3
15295: EQUAL
15296: PUSH
15297: LD_VAR 0 1
15301: PPUSH
15302: CALL_OW 255
15306: PUSH
15307: LD_INT 1
15309: EQUAL
15310: AND
15311: PUSH
15312: LD_EXP 31
15316: PUSH
15317: LD_INT 0
15319: EQUAL
15320: AND
15321: IFFALSE 15669
// begin factoryDialog = 1 ;
15323: LD_ADDR_EXP 31
15327: PUSH
15328: LD_INT 1
15330: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15331: LD_INT 47
15333: PPUSH
15334: LD_INT 1
15336: PPUSH
15337: CALL_OW 321
15341: PUSH
15342: LD_INT 1
15344: EQUAL
15345: PUSH
15346: LD_INT 45
15348: PPUSH
15349: LD_INT 1
15351: PPUSH
15352: CALL_OW 321
15356: PUSH
15357: LD_INT 1
15359: EQUAL
15360: AND
15361: IFFALSE 15669
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15363: LD_INT 22
15365: PUSH
15366: LD_INT 1
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PUSH
15373: LD_INT 21
15375: PUSH
15376: LD_INT 3
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: PUSH
15383: LD_INT 30
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 24
15395: PUSH
15396: LD_INT 1000
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: PPUSH
15409: CALL_OW 69
15413: PUSH
15414: LD_INT 1
15416: ARRAY
15417: PPUSH
15418: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15422: LD_EXP 1
15426: PPUSH
15427: LD_STRING D9a-JMM-1
15429: PPUSH
15430: CALL_OW 88
// if IsOK ( Campell ) then
15434: LD_EXP 12
15438: PPUSH
15439: CALL_OW 302
15443: IFFALSE 15459
// Say ( Campell , D9a-Mech1-1 ) else
15445: LD_EXP 12
15449: PPUSH
15450: LD_STRING D9a-Mech1-1
15452: PPUSH
15453: CALL_OW 88
15457: GO 15655
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15459: LD_INT 22
15461: PUSH
15462: LD_INT 1
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: LD_INT 21
15471: PUSH
15472: LD_INT 1
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: LD_INT 25
15481: PUSH
15482: LD_INT 3
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 26
15491: PUSH
15492: LD_INT 1
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: PPUSH
15505: CALL_OW 69
15509: PUSH
15510: LD_EXP 1
15514: PUSH
15515: EMPTY
15516: LIST
15517: PUSH
15518: LD_INT 0
15520: GREATER
15521: DIFF
15522: IFFALSE 15596
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15524: LD_INT 22
15526: PUSH
15527: LD_INT 1
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 21
15536: PUSH
15537: LD_INT 1
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 25
15546: PUSH
15547: LD_INT 3
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 26
15556: PUSH
15557: LD_INT 1
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: PPUSH
15570: CALL_OW 69
15574: PUSH
15575: LD_EXP 1
15579: PUSH
15580: EMPTY
15581: LIST
15582: DIFF
15583: PPUSH
15584: LD_STRING D9a-Mech1-1
15586: PPUSH
15587: LD_STRING D9a-Mech1-1
15589: PPUSH
15590: CALL 4598 0 3
15594: GO 15655
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15596: LD_INT 22
15598: PUSH
15599: LD_INT 1
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 21
15608: PUSH
15609: LD_INT 1
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 26
15618: PUSH
15619: LD_INT 1
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: LIST
15630: PPUSH
15631: CALL_OW 69
15635: PUSH
15636: LD_EXP 1
15640: PUSH
15641: EMPTY
15642: LIST
15643: DIFF
15644: PPUSH
15645: LD_STRING D9a-Mech1-1
15647: PPUSH
15648: LD_STRING D9a-Mech1-1
15650: PPUSH
15651: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15655: LD_EXP 33
15659: PUSH
15660: LD_INT 0
15662: EQUAL
15663: IFFALSE 15669
// EnergyDialog ;
15665: CALL 5003 0 0
// end ; end ; end ;
15669: PPOPN 1
15671: END
// on UnitDestroyed ( unit ) do var mech ;
15672: LD_INT 0
15674: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15675: LD_VAR 0 1
15679: PPUSH
15680: CALL 34224 0 1
// if unit = JMM then
15684: LD_VAR 0 1
15688: PUSH
15689: LD_EXP 1
15693: EQUAL
15694: IFFALSE 15703
// YouLost ( JMM ) ;
15696: LD_STRING JMM
15698: PPUSH
15699: CALL_OW 104
// if unit = ambdept0 then
15703: LD_VAR 0 1
15707: PUSH
15708: LD_INT 4
15710: EQUAL
15711: IFFALSE 15720
// YouLost ( Base ) ;
15713: LD_STRING Base
15715: PPUSH
15716: CALL_OW 104
// if unit in ruMobile then
15720: LD_VAR 0 1
15724: PUSH
15725: LD_EXP 46
15729: IN
15730: IFFALSE 15748
// ruMobile = ruMobile diff ruMobile ;
15732: LD_ADDR_EXP 46
15736: PUSH
15737: LD_EXP 46
15741: PUSH
15742: LD_EXP 46
15746: DIFF
15747: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15748: LD_VAR 0 1
15752: PPUSH
15753: CALL_OW 247
15757: PUSH
15758: LD_INT 1
15760: EQUAL
15761: PUSH
15762: LD_VAR 0 1
15766: PPUSH
15767: CALL_OW 255
15771: PUSH
15772: LD_INT 1
15774: EQUAL
15775: AND
15776: IFFALSE 15792
// lostCounter = lostCounter + 1 ;
15778: LD_ADDR_EXP 38
15782: PUSH
15783: LD_EXP 38
15787: PUSH
15788: LD_INT 1
15790: PLUS
15791: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15792: LD_EXP 43
15796: PUSH
15797: LD_INT 24
15799: PPUSH
15800: CALL_OW 313
15804: PUSH
15805: LD_INT 6
15807: LESS
15808: AND
15809: PUSH
15810: LD_VAR 0 1
15814: PPUSH
15815: CALL_OW 257
15819: PUSH
15820: LD_INT 3
15822: EQUAL
15823: AND
15824: PUSH
15825: LD_VAR 0 1
15829: PPUSH
15830: CALL_OW 255
15834: PUSH
15835: LD_INT 3
15837: EQUAL
15838: AND
15839: PUSH
15840: LD_INT 24
15842: PPUSH
15843: CALL_OW 302
15847: AND
15848: PUSH
15849: LD_INT 24
15851: PPUSH
15852: CALL_OW 255
15856: PUSH
15857: LD_INT 3
15859: EQUAL
15860: AND
15861: IFFALSE 15990
// begin ruMech := ruMech - 1 ;
15863: LD_ADDR_EXP 43
15867: PUSH
15868: LD_EXP 43
15872: PUSH
15873: LD_INT 1
15875: MINUS
15876: ST_TO_ADDR
// if ruMech = 0 then
15877: LD_EXP 43
15881: PUSH
15882: LD_INT 0
15884: EQUAL
15885: IFFALSE 15889
// exit ;
15887: GO 15990
// wait ( 0 0$40 ) ;
15889: LD_INT 1400
15891: PPUSH
15892: CALL_OW 67
// uc_side = 3 ;
15896: LD_ADDR_OWVAR 20
15900: PUSH
15901: LD_INT 3
15903: ST_TO_ADDR
// uc_nation = 3 ;
15904: LD_ADDR_OWVAR 21
15908: PUSH
15909: LD_INT 3
15911: ST_TO_ADDR
// hc_gallery :=  ;
15912: LD_ADDR_OWVAR 33
15916: PUSH
15917: LD_STRING 
15919: ST_TO_ADDR
// hc_name :=  ;
15920: LD_ADDR_OWVAR 26
15924: PUSH
15925: LD_STRING 
15927: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15928: LD_INT 0
15930: PPUSH
15931: LD_EXP 16
15935: PPUSH
15936: LD_EXP 17
15940: PPUSH
15941: CALL_OW 12
15945: PPUSH
15946: CALL_OW 383
// mech := CreateHuman ;
15950: LD_ADDR_VAR 0 2
15954: PUSH
15955: CALL_OW 44
15959: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15960: LD_VAR 0 2
15964: PPUSH
15965: LD_INT 124
15967: PPUSH
15968: LD_INT 97
15970: PPUSH
15971: LD_INT 0
15973: PPUSH
15974: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
15978: LD_VAR 0 2
15982: PPUSH
15983: LD_INT 24
15985: PPUSH
15986: CALL_OW 120
// end ; end ;
15990: PPOPN 2
15992: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15993: LD_INT 0
15995: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15996: LD_VAR 0 1
16000: PPUSH
16001: LD_VAR 0 2
16005: PPUSH
16006: CALL 34346 0 2
// if GetSide ( vehicle ) = 1 then
16010: LD_VAR 0 1
16014: PPUSH
16015: CALL_OW 255
16019: PUSH
16020: LD_INT 1
16022: EQUAL
16023: IFFALSE 16039
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
16025: LD_ADDR_EXP 42
16029: PUSH
16030: LD_EXP 42
16034: PUSH
16035: LD_INT 1
16037: PLUS
16038: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16039: LD_VAR 0 1
16043: PPUSH
16044: CALL_OW 255
16048: PUSH
16049: LD_INT 3
16051: EQUAL
16052: PUSH
16053: LD_VAR 0 1
16057: PPUSH
16058: CALL_OW 264
16062: PUSH
16063: LD_INT 42
16065: PUSH
16066: LD_INT 43
16068: PUSH
16069: LD_INT 44
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: LIST
16076: IN
16077: AND
16078: IFFALSE 16096
// ruMobile := ruMobile union vehicle ;
16080: LD_ADDR_EXP 46
16084: PUSH
16085: LD_EXP 46
16089: PUSH
16090: LD_VAR 0 1
16094: UNION
16095: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16096: LD_VAR 0 1
16100: PPUSH
16101: CALL_OW 264
16105: PUSH
16106: LD_INT 53
16108: EQUAL
16109: IFFALSE 16245
// begin uc_side = 3 ;
16111: LD_ADDR_OWVAR 20
16115: PUSH
16116: LD_INT 3
16118: ST_TO_ADDR
// uc_nation = 3 ;
16119: LD_ADDR_OWVAR 21
16123: PUSH
16124: LD_INT 3
16126: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16127: LD_INT 0
16129: PPUSH
16130: LD_EXP 17
16134: PPUSH
16135: CALL_OW 383
// driver := CreateHuman ;
16139: LD_ADDR_VAR 0 3
16143: PUSH
16144: CALL_OW 44
16148: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16149: LD_VAR 0 3
16153: PPUSH
16154: LD_VAR 0 2
16158: PPUSH
16159: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16163: LD_VAR 0 1
16167: PPUSH
16168: LD_INT 21
16170: PPUSH
16171: CALL 5219 0 2
// repeat wait ( 0 0$1 ) ;
16175: LD_INT 35
16177: PPUSH
16178: CALL_OW 67
// until not HasTask ( vehicle ) ;
16182: LD_VAR 0 1
16186: PPUSH
16187: CALL_OW 314
16191: NOT
16192: IFFALSE 16175
// driver := IsDrivenBy ( vehicle ) ;
16194: LD_ADDR_VAR 0 3
16198: PUSH
16199: LD_VAR 0 1
16203: PPUSH
16204: CALL_OW 311
16208: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16209: LD_VAR 0 3
16213: PPUSH
16214: LD_INT 104
16216: PPUSH
16217: LD_INT 73
16219: PPUSH
16220: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16224: LD_VAR 0 3
16228: PPUSH
16229: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16233: LD_VAR 0 3
16237: PPUSH
16238: LD_INT 24
16240: PPUSH
16241: CALL_OW 180
// end ; end ;
16245: PPOPN 3
16247: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16248: LD_VAR 0 1
16252: PPUSH
16253: CALL_OW 255
16257: PUSH
16258: LD_INT 3
16260: EQUAL
16261: PUSH
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL_OW 247
16271: PUSH
16272: LD_INT 2
16274: EQUAL
16275: AND
16276: PUSH
16277: LD_VAR 0 1
16281: PPUSH
16282: CALL_OW 264
16286: PUSH
16287: LD_INT 42
16289: PUSH
16290: LD_INT 43
16292: PUSH
16293: LD_INT 44
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: LIST
16300: IN
16301: AND
16302: IFFALSE 16351
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16304: LD_INT 24
16306: PPUSH
16307: LD_VAR 0 1
16311: PPUSH
16312: CALL_OW 265
16316: PPUSH
16317: LD_VAR 0 1
16321: PPUSH
16322: CALL_OW 262
16326: PPUSH
16327: LD_VAR 0 1
16331: PPUSH
16332: CALL_OW 263
16336: PPUSH
16337: LD_VAR 0 1
16341: PPUSH
16342: CALL_OW 264
16346: PPUSH
16347: CALL_OW 185
// end ;
16351: PPOPN 1
16353: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16354: LD_VAR 0 1
16358: PPUSH
16359: CALL_OW 255
16363: PUSH
16364: LD_INT 3
16366: EQUAL
16367: PUSH
16368: LD_VAR 0 2
16372: PPUSH
16373: CALL_OW 255
16377: PUSH
16378: LD_INT 3
16380: EQUAL
16381: AND
16382: PUSH
16383: LD_INT 24
16385: PPUSH
16386: CALL_OW 302
16390: AND
16391: PUSH
16392: LD_VAR 0 1
16396: PPUSH
16397: CALL_OW 302
16401: NOT
16402: AND
16403: IFFALSE 16417
// ComEnterUnit ( human , rubfact0 ) ;
16405: LD_VAR 0 2
16409: PPUSH
16410: LD_INT 24
16412: PPUSH
16413: CALL_OW 120
// end ;
16417: PPOPN 2
16419: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16420: LD_VAR 0 1
16424: PUSH
16425: LD_INT 24
16427: EQUAL
16428: PUSH
16429: LD_VAR 0 2
16433: PPUSH
16434: CALL_OW 256
16438: PUSH
16439: LD_INT 1000
16441: LESS
16442: AND
16443: IFFALSE 16457
// SetLives ( un , 1000 ) ;
16445: LD_VAR 0 2
16449: PPUSH
16450: LD_INT 1000
16452: PPUSH
16453: CALL_OW 234
// end ;
16457: PPOPN 2
16459: END
// on Command ( comandid ) do var i , j , tmp ;
16460: LD_INT 0
16462: PPUSH
16463: PPUSH
16464: PPUSH
// begin SOS_Command ( comandid ) ;
16465: LD_VAR 0 1
16469: PPUSH
16470: CALL 34330 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16474: LD_INT 22
16476: PUSH
16477: LD_INT 4
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PPUSH
16484: CALL_OW 69
16488: NOT
16489: IFFALSE 16493
// exit ;
16491: GO 16658
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16493: LD_ADDR_VAR 0 2
16497: PUSH
16498: LD_INT 22
16500: PUSH
16501: LD_INT 1
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 2
16510: PUSH
16511: LD_INT 21
16513: PUSH
16514: LD_INT 1
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 21
16523: PUSH
16524: LD_INT 2
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: LIST
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PPUSH
16540: CALL_OW 69
16544: PUSH
16545: FOR_IN
16546: IFFALSE 16656
// begin if GetTaskList ( i ) > 0 then
16548: LD_VAR 0 2
16552: PPUSH
16553: CALL_OW 437
16557: PUSH
16558: LD_INT 0
16560: GREATER
16561: IFFALSE 16654
// begin for j = 1 to GetTaskList ( i ) do
16563: LD_ADDR_VAR 0 3
16567: PUSH
16568: DOUBLE
16569: LD_INT 1
16571: DEC
16572: ST_TO_ADDR
16573: LD_VAR 0 2
16577: PPUSH
16578: CALL_OW 437
16582: PUSH
16583: FOR_TO
16584: IFFALSE 16652
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16586: LD_ADDR_VAR 0 4
16590: PUSH
16591: LD_VAR 0 2
16595: PPUSH
16596: CALL_OW 437
16600: PUSH
16601: LD_VAR 0 3
16605: ARRAY
16606: PUSH
16607: LD_INT 4
16609: ARRAY
16610: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16611: LD_VAR 0 4
16615: PPUSH
16616: CALL_OW 255
16620: PUSH
16621: LD_INT 4
16623: EQUAL
16624: PUSH
16625: LD_VAR 0 4
16629: PPUSH
16630: CALL_OW 255
16634: PUSH
16635: LD_INT 0
16637: EQUAL
16638: OR
16639: IFFALSE 16650
// ComStop ( i ) ;
16641: LD_VAR 0 2
16645: PPUSH
16646: CALL_OW 141
// end ;
16650: GO 16583
16652: POP
16653: POP
// end ; end ;
16654: GO 16545
16656: POP
16657: POP
// end ; end_of_file
16658: PPOPN 4
16660: END
// every 10 10$0 do
16661: GO 16663
16663: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16664: LD_INT 5
16666: PPUSH
16667: LD_INT 3
16669: PPUSH
16670: LD_INT 2
16672: PUSH
16673: LD_INT 2
16675: PUSH
16676: LD_INT 3
16678: PUSH
16679: LD_INT 4
16681: PUSH
16682: LD_INT 4
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: PUSH
16691: LD_OWVAR 67
16695: ARRAY
16696: PLUS
16697: PPUSH
16698: LD_INT 0
16700: PPUSH
16701: LD_EXP 16
16705: PPUSH
16706: LD_EXP 17
16710: PPUSH
16711: CALL_OW 12
16715: PPUSH
16716: LD_INT 4
16718: PPUSH
16719: LD_INT 14
16721: PPUSH
16722: LD_INT 1
16724: PPUSH
16725: LD_INT 2
16727: PPUSH
16728: CALL 6960 0 9
16732: END
// every 20 20$0 do
16733: GO 16735
16735: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16736: LD_INT 5
16738: PPUSH
16739: LD_INT 3
16741: PPUSH
16742: LD_INT 4
16744: PUSH
16745: LD_INT 2
16747: PUSH
16748: LD_INT 3
16750: PUSH
16751: LD_INT 4
16753: PUSH
16754: LD_INT 5
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: PUSH
16763: LD_OWVAR 67
16767: ARRAY
16768: PLUS
16769: PPUSH
16770: LD_INT 2
16772: PPUSH
16773: LD_EXP 16
16777: PPUSH
16778: LD_EXP 17
16782: PPUSH
16783: CALL_OW 12
16787: PPUSH
16788: LD_INT 4
16790: PPUSH
16791: LD_INT 14
16793: PPUSH
16794: LD_INT 1
16796: PPUSH
16797: LD_INT 1
16799: PPUSH
16800: CALL 6960 0 9
16804: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16805: GO 16807
16807: DISABLE
16808: LD_INT 0
16810: PPUSH
16811: PPUSH
16812: PPUSH
16813: PPUSH
16814: PPUSH
// begin hex := [ 123 , 95 ] ;
16815: LD_ADDR_VAR 0 4
16819: PUSH
16820: LD_INT 123
16822: PUSH
16823: LD_INT 95
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: ST_TO_ADDR
// tmp := [ ] ;
16830: LD_ADDR_VAR 0 5
16834: PUSH
16835: EMPTY
16836: ST_TO_ADDR
// if Difficulty > 1 then
16837: LD_OWVAR 67
16841: PUSH
16842: LD_INT 1
16844: GREATER
16845: IFFALSE 16855
// specAttack := true ;
16847: LD_ADDR_EXP 47
16851: PUSH
16852: LD_INT 1
16854: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16855: LD_ADDR_VAR 0 1
16859: PUSH
16860: DOUBLE
16861: LD_INT 1
16863: DEC
16864: ST_TO_ADDR
16865: LD_INT 4
16867: PUSH
16868: LD_INT 5
16870: PUSH
16871: LD_INT 6
16873: PUSH
16874: LD_INT 7
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: PUSH
16883: LD_OWVAR 67
16887: ARRAY
16888: PUSH
16889: FOR_TO
16890: IFFALSE 17192
// begin uc_side := 5 ;
16892: LD_ADDR_OWVAR 20
16896: PUSH
16897: LD_INT 5
16899: ST_TO_ADDR
// uc_nation := 3 ;
16900: LD_ADDR_OWVAR 21
16904: PUSH
16905: LD_INT 3
16907: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16908: LD_ADDR_OWVAR 37
16912: PUSH
16913: LD_INT 21
16915: PUSH
16916: LD_INT 22
16918: PUSH
16919: LD_INT 23
16921: PUSH
16922: LD_INT 24
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: PUSH
16931: LD_VAR 0 1
16935: PUSH
16936: LD_OWVAR 67
16940: MOD
16941: PUSH
16942: LD_INT 1
16944: PLUS
16945: ARRAY
16946: ST_TO_ADDR
// vc_engine := engine_combustion ;
16947: LD_ADDR_OWVAR 39
16951: PUSH
16952: LD_INT 1
16954: ST_TO_ADDR
// vc_control := control_manual ;
16955: LD_ADDR_OWVAR 38
16959: PUSH
16960: LD_INT 1
16962: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16963: LD_ADDR_OWVAR 40
16967: PUSH
16968: LD_INT 42
16970: PUSH
16971: LD_INT 43
16973: PUSH
16974: LD_INT 44
16976: PUSH
16977: LD_INT 44
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: PUSH
16986: LD_VAR 0 1
16990: PUSH
16991: LD_OWVAR 67
16995: MOD
16996: PUSH
16997: LD_INT 1
16999: PLUS
17000: ARRAY
17001: ST_TO_ADDR
// veh := CreateVehicle ;
17002: LD_ADDR_VAR 0 3
17006: PUSH
17007: CALL_OW 45
17011: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17012: LD_VAR 0 3
17016: PPUSH
17017: LD_INT 5
17019: PPUSH
17020: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
17024: LD_INT 35
17026: PPUSH
17027: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17031: LD_VAR 0 4
17035: PUSH
17036: LD_INT 1
17038: ARRAY
17039: PPUSH
17040: LD_VAR 0 4
17044: PUSH
17045: LD_INT 2
17047: ARRAY
17048: PPUSH
17049: CALL_OW 428
17053: PUSH
17054: LD_INT 0
17056: EQUAL
17057: IFFALSE 17024
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17059: LD_VAR 0 3
17063: PPUSH
17064: LD_VAR 0 4
17068: PUSH
17069: LD_INT 1
17071: ARRAY
17072: PPUSH
17073: LD_VAR 0 4
17077: PUSH
17078: LD_INT 2
17080: ARRAY
17081: PPUSH
17082: LD_INT 0
17084: PPUSH
17085: CALL_OW 48
// uc_side := 5 ;
17089: LD_ADDR_OWVAR 20
17093: PUSH
17094: LD_INT 5
17096: ST_TO_ADDR
// uc_nation := 3 ;
17097: LD_ADDR_OWVAR 21
17101: PUSH
17102: LD_INT 3
17104: ST_TO_ADDR
// InitHC_All ( ) ;
17105: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
17109: LD_INT 0
17111: PPUSH
17112: LD_INT 2
17114: PUSH
17115: LD_OWVAR 67
17119: PLUS
17120: PPUSH
17121: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17125: CALL_OW 44
17129: PPUSH
17130: LD_VAR 0 3
17134: PPUSH
17135: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17139: LD_VAR 0 3
17143: PPUSH
17144: LD_INT 101
17146: PPUSH
17147: LD_INT 77
17149: PPUSH
17150: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17154: LD_ADDR_VAR 0 5
17158: PUSH
17159: LD_VAR 0 5
17163: PPUSH
17164: LD_VAR 0 5
17168: PUSH
17169: LD_INT 1
17171: PLUS
17172: PPUSH
17173: LD_VAR 0 3
17177: PPUSH
17178: CALL_OW 1
17182: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17183: LD_INT 105
17185: PPUSH
17186: CALL_OW 67
// end ;
17190: GO 16889
17192: POP
17193: POP
// repeat wait ( 0 0$1 ) ;
17194: LD_INT 35
17196: PPUSH
17197: CALL_OW 67
// for i in tmp do
17201: LD_ADDR_VAR 0 1
17205: PUSH
17206: LD_VAR 0 5
17210: PUSH
17211: FOR_IN
17212: IFFALSE 17280
// if not IsOk ( i ) then
17214: LD_VAR 0 1
17218: PPUSH
17219: CALL_OW 302
17223: NOT
17224: IFFALSE 17244
// tmp := tmp diff i else
17226: LD_ADDR_VAR 0 5
17230: PUSH
17231: LD_VAR 0 5
17235: PUSH
17236: LD_VAR 0 1
17240: DIFF
17241: ST_TO_ADDR
17242: GO 17278
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17244: LD_VAR 0 1
17248: PPUSH
17249: LD_INT 22
17251: PUSH
17252: LD_INT 1
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PPUSH
17259: CALL_OW 69
17263: PPUSH
17264: LD_VAR 0 1
17268: PPUSH
17269: CALL_OW 74
17273: PPUSH
17274: CALL_OW 115
17278: GO 17211
17280: POP
17281: POP
// until not tmp ;
17282: LD_VAR 0 5
17286: NOT
17287: IFFALSE 17194
// end ;
17289: PPOPN 5
17291: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17292: LD_EXP 47
17296: IFFALSE 17671
17298: GO 17300
17300: DISABLE
17301: LD_INT 0
17303: PPUSH
17304: PPUSH
17305: PPUSH
17306: PPUSH
// begin wait ( 0 0$20 ) ;
17307: LD_INT 700
17309: PPUSH
17310: CALL_OW 67
// uc_side := 5 ;
17314: LD_ADDR_OWVAR 20
17318: PUSH
17319: LD_INT 5
17321: ST_TO_ADDR
// uc_nation := 3 ;
17322: LD_ADDR_OWVAR 21
17326: PUSH
17327: LD_INT 3
17329: ST_TO_ADDR
// InitHc ;
17330: CALL_OW 19
// hc_importance := 0 ;
17334: LD_ADDR_OWVAR 32
17338: PUSH
17339: LD_INT 0
17341: ST_TO_ADDR
// tmp := [ ] ;
17342: LD_ADDR_VAR 0 2
17346: PUSH
17347: EMPTY
17348: ST_TO_ADDR
// InitHC_All ( ) ;
17349: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17353: LD_INT 0
17355: PPUSH
17356: LD_INT 2
17358: PPUSH
17359: LD_INT 6
17361: PPUSH
17362: CALL_OW 380
// eng := CreateHuman ;
17366: LD_ADDR_VAR 0 4
17370: PUSH
17371: CALL_OW 44
17375: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17376: LD_VAR 0 4
17380: PPUSH
17381: LD_INT 78
17383: PPUSH
17384: LD_INT 2
17386: PPUSH
17387: LD_INT 4
17389: PPUSH
17390: LD_INT 0
17392: PPUSH
17393: CALL_OW 50
// for i = 1 to 2 + Difficulty do
17397: LD_ADDR_VAR 0 3
17401: PUSH
17402: DOUBLE
17403: LD_INT 1
17405: DEC
17406: ST_TO_ADDR
17407: LD_INT 2
17409: PUSH
17410: LD_OWVAR 67
17414: PLUS
17415: PUSH
17416: FOR_TO
17417: IFFALSE 17506
// begin InitHC_All ( ) ;
17419: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17423: LD_INT 0
17425: PPUSH
17426: LD_INT 1
17428: PPUSH
17429: LD_INT 4
17431: PUSH
17432: LD_INT 5
17434: PUSH
17435: LD_INT 6
17437: PUSH
17438: LD_INT 6
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: PUSH
17447: LD_OWVAR 67
17451: ARRAY
17452: PPUSH
17453: CALL_OW 380
// un := CreateHuman ;
17457: LD_ADDR_VAR 0 1
17461: PUSH
17462: CALL_OW 44
17466: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17467: LD_VAR 0 1
17471: PPUSH
17472: LD_INT 78
17474: PPUSH
17475: LD_INT 2
17477: PPUSH
17478: LD_INT 4
17480: PPUSH
17481: LD_INT 0
17483: PPUSH
17484: CALL_OW 50
// tmp := tmp ^ un ;
17488: LD_ADDR_VAR 0 2
17492: PUSH
17493: LD_VAR 0 2
17497: PUSH
17498: LD_VAR 0 1
17502: ADD
17503: ST_TO_ADDR
// end ;
17504: GO 17416
17506: POP
17507: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17508: LD_VAR 0 2
17512: PPUSH
17513: LD_INT 49
17515: PPUSH
17516: LD_INT 3
17518: PPUSH
17519: CALL_OW 111
// wait ( 0 0$2 ) ;
17523: LD_INT 70
17525: PPUSH
17526: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17530: LD_VAR 0 4
17534: PPUSH
17535: LD_INT 49
17537: PPUSH
17538: LD_INT 3
17540: PPUSH
17541: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17545: LD_VAR 0 4
17549: PPUSH
17550: LD_INT 4
17552: PPUSH
17553: CALL_OW 227
// wait ( 0 0$10 ) ;
17557: LD_INT 350
17559: PPUSH
17560: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17564: LD_INT 35
17566: PPUSH
17567: CALL_OW 67
// for i in tmp do
17571: LD_ADDR_VAR 0 3
17575: PUSH
17576: LD_VAR 0 2
17580: PUSH
17581: FOR_IN
17582: IFFALSE 17662
// if not IsOk ( i ) then
17584: LD_VAR 0 3
17588: PPUSH
17589: CALL_OW 302
17593: NOT
17594: IFFALSE 17614
// tmp := tmp diff i else
17596: LD_ADDR_VAR 0 2
17600: PUSH
17601: LD_VAR 0 2
17605: PUSH
17606: LD_VAR 0 3
17610: DIFF
17611: ST_TO_ADDR
17612: GO 17660
// if not HasTask ( i ) then
17614: LD_VAR 0 3
17618: PPUSH
17619: CALL_OW 314
17623: NOT
17624: IFFALSE 17660
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17626: LD_VAR 0 3
17630: PPUSH
17631: LD_INT 22
17633: PUSH
17634: LD_INT 1
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PPUSH
17641: CALL_OW 69
17645: PPUSH
17646: LD_VAR 0 3
17650: PPUSH
17651: CALL_OW 74
17655: PPUSH
17656: CALL_OW 115
17660: GO 17581
17662: POP
17663: POP
// until not tmp ;
17664: LD_VAR 0 2
17668: NOT
17669: IFFALSE 17564
// end ; end_of_file
17671: PPOPN 4
17673: END
// every 0 0$1 trigger startTimer = 1 do
17674: LD_EXP 30
17678: PUSH
17679: LD_INT 1
17681: EQUAL
17682: IFFALSE 17812
17684: GO 17686
17686: DISABLE
// begin enable ;
17687: ENABLE
// if timerStatus = 1 then
17688: LD_EXP 29
17692: PUSH
17693: LD_INT 1
17695: EQUAL
17696: IFFALSE 17729
// begin timeToSupport = timeToSupport - 0 0$01 ;
17698: LD_ADDR_EXP 28
17702: PUSH
17703: LD_EXP 28
17707: PUSH
17708: LD_INT 35
17710: MINUS
17711: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17712: LD_ADDR_OWVAR 47
17716: PUSH
17717: LD_STRING #Am04-1
17719: PUSH
17720: LD_EXP 28
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: ST_TO_ADDR
// end ; if timerStatus = 2 then
17729: LD_EXP 29
17733: PUSH
17734: LD_INT 2
17736: EQUAL
17737: IFFALSE 17770
// begin timeToSupport = timeToSupport - 0 0$01 ;
17739: LD_ADDR_EXP 28
17743: PUSH
17744: LD_EXP 28
17748: PUSH
17749: LD_INT 35
17751: MINUS
17752: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17753: LD_ADDR_OWVAR 47
17757: PUSH
17758: LD_STRING #Am04-2
17760: PUSH
17761: LD_EXP 28
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: ST_TO_ADDR
// end ; if timerStatus = 3 then
17770: LD_EXP 29
17774: PUSH
17775: LD_INT 3
17777: EQUAL
17778: IFFALSE 17794
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17780: LD_ADDR_EXP 27
17784: PUSH
17785: LD_EXP 27
17789: PUSH
17790: LD_INT 35
17792: MINUS
17793: ST_TO_ADDR
// if timerStatus = 4 then
17794: LD_EXP 29
17798: PUSH
17799: LD_INT 4
17801: EQUAL
17802: IFFALSE 17812
// display_strings =  ;
17804: LD_ADDR_OWVAR 47
17808: PUSH
17809: LD_STRING 
17811: ST_TO_ADDR
// end ; end_of_file
17812: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17813: LD_EXP 15
17817: PPUSH
17818: CALL_OW 301
17822: PUSH
17823: LD_INT 22
17825: PUSH
17826: LD_INT 3
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 21
17835: PUSH
17836: LD_INT 1
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PPUSH
17847: CALL_OW 69
17851: PUSH
17852: LD_INT 14
17854: PUSH
17855: LD_INT 13
17857: PUSH
17858: LD_INT 12
17860: PUSH
17861: LD_INT 11
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: PUSH
17870: LD_OWVAR 67
17874: ARRAY
17875: LESS
17876: AND
17877: IFFALSE 18463
17879: GO 17881
17881: DISABLE
17882: LD_INT 0
17884: PPUSH
17885: PPUSH
17886: PPUSH
// begin AIEnable = 0 ;
17887: LD_ADDR_EXP 37
17891: PUSH
17892: LD_INT 0
17894: ST_TO_ADDR
// escapeAvalaible = 1 ;
17895: LD_ADDR_EXP 40
17899: PUSH
17900: LD_INT 1
17902: ST_TO_ADDR
// Video ( true ) ;
17903: LD_INT 1
17905: PPUSH
17906: CALL 75517 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17910: LD_INT 3
17912: PPUSH
17913: LD_INT 1
17915: PPUSH
17916: LD_INT 1
17918: PPUSH
17919: LD_INT 0
17921: PPUSH
17922: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17926: LD_INT 6
17928: PPUSH
17929: LD_INT 1
17931: PPUSH
17932: LD_INT 1
17934: PPUSH
17935: LD_INT 0
17937: PPUSH
17938: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17942: LD_INT 5
17944: PPUSH
17945: LD_INT 1
17947: PPUSH
17948: LD_INT 1
17950: PPUSH
17951: LD_INT 0
17953: PPUSH
17954: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17958: LD_INT 3
17960: PPUSH
17961: LD_INT 1
17963: PPUSH
17964: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17968: LD_INT 97
17970: PPUSH
17971: LD_INT 91
17973: PPUSH
17974: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17978: LD_INT 22
17980: PUSH
17981: LD_INT 3
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 21
17990: PUSH
17991: LD_INT 1
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PPUSH
18002: CALL_OW 69
18006: PPUSH
18007: CALL_OW 121
// wait ( 0 0$01 ) ;
18011: LD_INT 35
18013: PPUSH
18014: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18018: LD_INT 22
18020: PUSH
18021: LD_INT 3
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 21
18030: PUSH
18031: LD_INT 1
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PPUSH
18042: CALL_OW 69
18046: PPUSH
18047: LD_INT 124
18049: PPUSH
18050: LD_INT 98
18052: PPUSH
18053: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18057: LD_INT 22
18059: PUSH
18060: LD_INT 5
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: LD_INT 21
18069: PUSH
18070: LD_INT 1
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PPUSH
18081: CALL_OW 69
18085: PPUSH
18086: CALL_OW 121
// wait ( 0 0$01 ) ;
18090: LD_INT 35
18092: PPUSH
18093: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18097: LD_INT 22
18099: PUSH
18100: LD_INT 5
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 21
18109: PUSH
18110: LD_INT 1
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PPUSH
18121: CALL_OW 69
18125: PPUSH
18126: LD_INT 124
18128: PPUSH
18129: LD_INT 98
18131: PPUSH
18132: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18136: LD_INT 22
18138: PUSH
18139: LD_INT 6
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 21
18148: PUSH
18149: LD_INT 1
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PPUSH
18160: CALL_OW 69
18164: PPUSH
18165: CALL_OW 121
// wait ( 0 0$01 ) ;
18169: LD_INT 35
18171: PPUSH
18172: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18176: LD_INT 22
18178: PUSH
18179: LD_INT 6
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 21
18188: PUSH
18189: LD_INT 1
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PPUSH
18200: CALL_OW 69
18204: PPUSH
18205: LD_INT 124
18207: PPUSH
18208: LD_INT 98
18210: PPUSH
18211: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18215: LD_INT 22
18217: PUSH
18218: LD_INT 1
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PUSH
18225: LD_INT 21
18227: PUSH
18228: LD_INT 1
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PPUSH
18239: CALL_OW 69
18243: PPUSH
18244: LD_INT 124
18246: PPUSH
18247: LD_INT 96
18249: PPUSH
18250: CALL_OW 114
// wait ( 0 0$1 ) ;
18254: LD_INT 35
18256: PPUSH
18257: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18261: LD_INT 124
18263: PPUSH
18264: LD_INT 96
18266: PPUSH
18267: CALL_OW 84
// p := 0 0$0 ;
18271: LD_ADDR_VAR 0 3
18275: PUSH
18276: LD_INT 0
18278: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18279: LD_ADDR_VAR 0 2
18283: PUSH
18284: LD_INT 2
18286: PUSH
18287: LD_INT 22
18289: PUSH
18290: LD_INT 3
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: LD_INT 22
18299: PUSH
18300: LD_INT 6
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 21
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PPUSH
18326: CALL_OW 69
18330: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18331: LD_INT 35
18333: PPUSH
18334: CALL_OW 67
// p := p + 0 0$1 ;
18338: LD_ADDR_VAR 0 3
18342: PUSH
18343: LD_VAR 0 3
18347: PUSH
18348: LD_INT 35
18350: PLUS
18351: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18352: LD_VAR 0 2
18356: PPUSH
18357: LD_INT 5
18359: PPUSH
18360: CALL_OW 113
// for i in tmp do
18364: LD_ADDR_VAR 0 1
18368: PUSH
18369: LD_VAR 0 2
18373: PUSH
18374: FOR_IN
18375: IFFALSE 18402
// if IsInArea ( tmp , RussianEscape ) then
18377: LD_VAR 0 2
18381: PPUSH
18382: LD_INT 5
18384: PPUSH
18385: CALL_OW 308
18389: IFFALSE 18400
// RemoveUnit ( i ) ;
18391: LD_VAR 0 1
18395: PPUSH
18396: CALL_OW 64
18400: GO 18374
18402: POP
18403: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18404: LD_INT 23
18406: PUSH
18407: LD_INT 3
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 21
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 24
18426: PUSH
18427: LD_INT 250
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: LIST
18438: PPUSH
18439: CALL_OW 69
18443: PUSH
18444: LD_INT 0
18446: EQUAL
18447: PUSH
18448: LD_VAR 0 3
18452: PUSH
18453: LD_INT 245
18455: GREATEREQUAL
18456: OR
18457: IFFALSE 18331
// FinishMission ;
18459: CALL 18466 0 0
// end ;
18463: PPOPN 3
18465: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18466: LD_INT 0
18468: PPUSH
18469: PPUSH
18470: PPUSH
18471: PPUSH
18472: PPUSH
// if not vehicleProduceCounter then
18473: LD_EXP 42
18477: NOT
18478: IFFALSE 18487
// SetAchievement ( ACH_INFANTRY ) ;
18480: LD_STRING ACH_INFANTRY
18482: PPUSH
18483: CALL_OW 543
// if tick <= 20 20$00 then
18487: LD_OWVAR 1
18491: PUSH
18492: LD_INT 42000
18494: LESSEQUAL
18495: IFFALSE 18511
// begin wait ( 3 ) ;
18497: LD_INT 3
18499: PPUSH
18500: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18504: LD_STRING ACH_ASPEED_4
18506: PPUSH
18507: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18511: LD_INT 22
18513: PPUSH
18514: CALL 19155 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18518: LD_INT 69
18520: PPUSH
18521: LD_INT 1
18523: PPUSH
18524: CALL_OW 321
18528: PPUSH
18529: LD_STRING GatlingInGamma
18531: PPUSH
18532: CALL_OW 39
// m1 := false ;
18536: LD_ADDR_VAR 0 3
18540: PUSH
18541: LD_INT 0
18543: ST_TO_ADDR
// m2 := false ;
18544: LD_ADDR_VAR 0 4
18548: PUSH
18549: LD_INT 0
18551: ST_TO_ADDR
// m3 := false ;
18552: LD_ADDR_VAR 0 5
18556: PUSH
18557: LD_INT 0
18559: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18560: LD_EXP 34
18564: PUSH
18565: LD_INT 1
18567: EQUAL
18568: PUSH
18569: LD_EXP 35
18573: PUSH
18574: LD_INT 1
18576: EQUAL
18577: AND
18578: IFFALSE 18600
// begin AddMedal ( oil , 1 ) ;
18580: LD_STRING oil
18582: PPUSH
18583: LD_INT 1
18585: PPUSH
18586: CALL_OW 101
// m1 := true ;
18590: LD_ADDR_VAR 0 3
18594: PUSH
18595: LD_INT 1
18597: ST_TO_ADDR
// end else
18598: GO 18693
// begin if buildOil = 1 and buildPower = 0 then
18600: LD_EXP 34
18604: PUSH
18605: LD_INT 1
18607: EQUAL
18608: PUSH
18609: LD_EXP 35
18613: PUSH
18614: LD_INT 0
18616: EQUAL
18617: AND
18618: IFFALSE 18631
// AddMedal ( oil , - 1 ) ;
18620: LD_STRING oil
18622: PPUSH
18623: LD_INT 1
18625: NEG
18626: PPUSH
18627: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18631: LD_EXP 34
18635: PUSH
18636: LD_INT 0
18638: EQUAL
18639: PUSH
18640: LD_EXP 35
18644: PUSH
18645: LD_INT 1
18647: EQUAL
18648: AND
18649: IFFALSE 18662
// AddMedal ( oil , - 2 ) ;
18651: LD_STRING oil
18653: PPUSH
18654: LD_INT 2
18656: NEG
18657: PPUSH
18658: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18662: LD_EXP 34
18666: PUSH
18667: LD_INT 0
18669: EQUAL
18670: PUSH
18671: LD_EXP 35
18675: PUSH
18676: LD_INT 0
18678: EQUAL
18679: AND
18680: IFFALSE 18693
// AddMedal ( oil , - 3 ) ;
18682: LD_STRING oil
18684: PPUSH
18685: LD_INT 3
18687: NEG
18688: PPUSH
18689: CALL_OW 101
// end ; if lostCounter > 3 then
18693: LD_EXP 38
18697: PUSH
18698: LD_INT 3
18700: GREATER
18701: IFFALSE 18716
// AddMedal ( deaths , - 1 ) else
18703: LD_STRING deaths
18705: PPUSH
18706: LD_INT 1
18708: NEG
18709: PPUSH
18710: CALL_OW 101
18714: GO 18734
// begin AddMedal ( deaths , 1 ) ;
18716: LD_STRING deaths
18718: PPUSH
18719: LD_INT 1
18721: PPUSH
18722: CALL_OW 101
// m2 := true ;
18726: LD_ADDR_VAR 0 4
18730: PUSH
18731: LD_INT 1
18733: ST_TO_ADDR
// end ; if honor = 1 then
18734: LD_EXP 39
18738: PUSH
18739: LD_INT 1
18741: EQUAL
18742: IFFALSE 18764
// begin AddMedal ( honour , 1 ) ;
18744: LD_STRING honour
18746: PPUSH
18747: LD_INT 1
18749: PPUSH
18750: CALL_OW 101
// m3 := true ;
18754: LD_ADDR_VAR 0 5
18758: PUSH
18759: LD_INT 1
18761: ST_TO_ADDR
// end else
18762: GO 18775
// AddMedal ( honour , - 1 ) ;
18764: LD_STRING honour
18766: PPUSH
18767: LD_INT 1
18769: NEG
18770: PPUSH
18771: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18775: LD_VAR 0 3
18779: PUSH
18780: LD_VAR 0 4
18784: AND
18785: PUSH
18786: LD_VAR 0 5
18790: AND
18791: PUSH
18792: LD_OWVAR 67
18796: PUSH
18797: LD_INT 3
18799: GREATEREQUAL
18800: AND
18801: IFFALSE 18813
// SetAchievementEX ( ACH_AMER , 4 ) ;
18803: LD_STRING ACH_AMER
18805: PPUSH
18806: LD_INT 4
18808: PPUSH
18809: CALL_OW 564
// GiveMedals ( Main ) ;
18813: LD_STRING Main
18815: PPUSH
18816: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18820: LD_INT 22
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 23
18832: PUSH
18833: LD_INT 1
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 21
18842: PUSH
18843: LD_INT 1
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: LIST
18854: PPUSH
18855: CALL_OW 69
18859: PPUSH
18860: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18864: LD_EXP 1
18868: PPUSH
18869: LD_EXP 48
18873: PUSH
18874: LD_STRING JMM
18876: STR
18877: PPUSH
18878: CALL_OW 38
// if IsOK ( Bobby ) then
18882: LD_EXP 2
18886: PPUSH
18887: CALL_OW 302
18891: IFFALSE 18911
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18893: LD_EXP 2
18897: PPUSH
18898: LD_EXP 48
18902: PUSH
18903: LD_STRING Bobby
18905: STR
18906: PPUSH
18907: CALL_OW 38
// if IsOK ( Cyrus ) then
18911: LD_EXP 3
18915: PPUSH
18916: CALL_OW 302
18920: IFFALSE 18940
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18922: LD_EXP 3
18926: PPUSH
18927: LD_EXP 48
18931: PUSH
18932: LD_STRING Cyrus
18934: STR
18935: PPUSH
18936: CALL_OW 38
// if IsOK ( Lisa ) then
18940: LD_EXP 4
18944: PPUSH
18945: CALL_OW 302
18949: IFFALSE 18969
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18951: LD_EXP 4
18955: PPUSH
18956: LD_EXP 48
18960: PUSH
18961: LD_STRING Lisa
18963: STR
18964: PPUSH
18965: CALL_OW 38
// if IsOK ( Brown ) then
18969: LD_EXP 7
18973: PPUSH
18974: CALL_OW 302
18978: IFFALSE 18998
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18980: LD_EXP 7
18984: PPUSH
18985: LD_EXP 48
18989: PUSH
18990: LD_STRING Brown
18992: STR
18993: PPUSH
18994: CALL_OW 38
// if not IsDead ( Donaldson ) then
18998: LD_EXP 13
19002: PPUSH
19003: CALL_OW 301
19007: NOT
19008: IFFALSE 19028
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19010: LD_EXP 13
19014: PPUSH
19015: LD_EXP 48
19019: PUSH
19020: LD_STRING Donaldson
19022: STR
19023: PPUSH
19024: CALL_OW 38
// if not IsDead ( Frank ) then
19028: LD_EXP 5
19032: PPUSH
19033: CALL_OW 301
19037: NOT
19038: IFFALSE 19058
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19040: LD_EXP 5
19044: PPUSH
19045: LD_EXP 48
19049: PUSH
19050: LD_STRING Frank
19052: STR
19053: PPUSH
19054: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19058: LD_INT 50
19060: PUSH
19061: EMPTY
19062: LIST
19063: PUSH
19064: LD_INT 22
19066: PUSH
19067: LD_INT 1
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 21
19076: PUSH
19077: LD_INT 1
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: LIST
19088: PPUSH
19089: CALL_OW 69
19093: PUSH
19094: LD_EXP 1
19098: PUSH
19099: LD_EXP 2
19103: PUSH
19104: LD_EXP 3
19108: PUSH
19109: LD_EXP 4
19113: PUSH
19114: LD_EXP 7
19118: PUSH
19119: LD_EXP 13
19123: PUSH
19124: LD_EXP 5
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: DIFF
19138: PPUSH
19139: LD_STRING 04_other_survivors
19141: PPUSH
19142: CALL_OW 38
// YouWin ;
19146: CALL_OW 103
// end ;
19150: LD_VAR 0 1
19154: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19155: LD_INT 0
19157: PPUSH
19158: PPUSH
19159: PPUSH
19160: PPUSH
// gammaBase = [ ] ;
19161: LD_ADDR_VAR 0 4
19165: PUSH
19166: EMPTY
19167: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19168: LD_ADDR_VAR 0 5
19172: PUSH
19173: LD_VAR 0 1
19177: PPUSH
19178: LD_INT 22
19180: PUSH
19181: LD_INT 1
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 21
19190: PUSH
19191: LD_INT 3
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PPUSH
19202: CALL_OW 70
19206: ST_TO_ADDR
// for i in buildings do
19207: LD_ADDR_VAR 0 3
19211: PUSH
19212: LD_VAR 0 5
19216: PUSH
19217: FOR_IN
19218: IFFALSE 19555
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19220: LD_VAR 0 3
19224: PPUSH
19225: CALL_OW 266
19229: PUSH
19230: LD_INT 6
19232: PUSH
19233: LD_INT 7
19235: PUSH
19236: LD_INT 8
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: LIST
19243: IN
19244: IFFALSE 19358
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19246: LD_ADDR_VAR 0 4
19250: PUSH
19251: LD_VAR 0 4
19255: PUSH
19256: LD_VAR 0 3
19260: PPUSH
19261: CALL_OW 266
19265: PUSH
19266: LD_VAR 0 3
19270: PPUSH
19271: CALL_OW 250
19275: PUSH
19276: LD_VAR 0 3
19280: PPUSH
19281: CALL_OW 251
19285: PUSH
19286: LD_VAR 0 3
19290: PPUSH
19291: CALL_OW 254
19295: PUSH
19296: LD_VAR 0 3
19300: PPUSH
19301: CALL_OW 267
19305: PUSH
19306: LD_VAR 0 3
19310: PPUSH
19311: CALL_OW 248
19315: PUSH
19316: LD_VAR 0 3
19320: PPUSH
19321: LD_INT 1
19323: PPUSH
19324: CALL_OW 268
19328: PUSH
19329: LD_VAR 0 3
19333: PPUSH
19334: LD_INT 2
19336: PPUSH
19337: CALL_OW 268
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: PUSH
19352: EMPTY
19353: LIST
19354: ADD
19355: ST_TO_ADDR
19356: GO 19553
// if GetBType ( i ) in [ b_bunker ] then
19358: LD_VAR 0 3
19362: PPUSH
19363: CALL_OW 266
19367: PUSH
19368: LD_INT 32
19370: PUSH
19371: EMPTY
19372: LIST
19373: IN
19374: IFFALSE 19471
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19376: LD_ADDR_VAR 0 4
19380: PUSH
19381: LD_VAR 0 4
19385: PUSH
19386: LD_VAR 0 3
19390: PPUSH
19391: CALL_OW 266
19395: PUSH
19396: LD_VAR 0 3
19400: PPUSH
19401: CALL_OW 250
19405: PUSH
19406: LD_VAR 0 3
19410: PPUSH
19411: CALL_OW 251
19415: PUSH
19416: LD_VAR 0 3
19420: PPUSH
19421: CALL_OW 254
19425: PUSH
19426: LD_VAR 0 3
19430: PPUSH
19431: CALL_OW 267
19435: PUSH
19436: LD_VAR 0 3
19440: PPUSH
19441: CALL_OW 248
19445: PUSH
19446: LD_VAR 0 3
19450: PPUSH
19451: CALL_OW 269
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: PUSH
19465: EMPTY
19466: LIST
19467: ADD
19468: ST_TO_ADDR
19469: GO 19553
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19471: LD_ADDR_VAR 0 4
19475: PUSH
19476: LD_VAR 0 4
19480: PUSH
19481: LD_VAR 0 3
19485: PPUSH
19486: CALL_OW 266
19490: PUSH
19491: LD_VAR 0 3
19495: PPUSH
19496: CALL_OW 250
19500: PUSH
19501: LD_VAR 0 3
19505: PPUSH
19506: CALL_OW 251
19510: PUSH
19511: LD_VAR 0 3
19515: PPUSH
19516: CALL_OW 254
19520: PUSH
19521: LD_VAR 0 3
19525: PPUSH
19526: CALL_OW 267
19530: PUSH
19531: LD_VAR 0 3
19535: PPUSH
19536: CALL_OW 248
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: PUSH
19549: EMPTY
19550: LIST
19551: ADD
19552: ST_TO_ADDR
// end ;
19553: GO 19217
19555: POP
19556: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19557: LD_VAR 0 4
19561: PPUSH
19562: LD_STRING GammaBase
19564: PPUSH
19565: CALL_OW 39
// end ; end_of_file
19569: LD_VAR 0 2
19573: RET
// every 1 1$15 do
19574: GO 19576
19576: DISABLE
// begin if supply <= 13 and supply > 7 then
19577: LD_EXP 36
19581: PUSH
19582: LD_INT 13
19584: LESSEQUAL
19585: PUSH
19586: LD_EXP 36
19590: PUSH
19591: LD_INT 7
19593: GREATER
19594: AND
19595: IFFALSE 19618
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19597: LD_INT 3
19599: PPUSH
19600: LD_INT 5
19602: PPUSH
19603: CALL_OW 12
19607: PPUSH
19608: LD_INT 18
19610: PPUSH
19611: LD_INT 1
19613: PPUSH
19614: CALL_OW 55
// if supply <= 7 and supply > 4 then
19618: LD_EXP 36
19622: PUSH
19623: LD_INT 7
19625: LESSEQUAL
19626: PUSH
19627: LD_EXP 36
19631: PUSH
19632: LD_INT 4
19634: GREATER
19635: AND
19636: IFFALSE 19659
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19638: LD_INT 3
19640: PPUSH
19641: LD_INT 5
19643: PPUSH
19644: CALL_OW 12
19648: PPUSH
19649: LD_INT 19
19651: PPUSH
19652: LD_INT 1
19654: PPUSH
19655: CALL_OW 55
// if supply <= 4 and supply > 0 then
19659: LD_EXP 36
19663: PUSH
19664: LD_INT 4
19666: LESSEQUAL
19667: PUSH
19668: LD_EXP 36
19672: PUSH
19673: LD_INT 0
19675: GREATER
19676: AND
19677: IFFALSE 19700
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19679: LD_INT 3
19681: PPUSH
19682: LD_INT 5
19684: PPUSH
19685: CALL_OW 12
19689: PPUSH
19690: LD_INT 20
19692: PPUSH
19693: LD_INT 1
19695: PPUSH
19696: CALL_OW 55
// if supply then
19700: LD_EXP 36
19704: IFFALSE 19721
// begin supply = supply - 1 ;
19706: LD_ADDR_EXP 36
19710: PUSH
19711: LD_EXP 36
19715: PUSH
19716: LD_INT 1
19718: MINUS
19719: ST_TO_ADDR
// enable ;
19720: ENABLE
// end ; end ; end_of_file
19721: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19722: LD_INT 0
19724: PPUSH
// ar_miner := 81 ;
19725: LD_ADDR_EXP 57
19729: PUSH
19730: LD_INT 81
19732: ST_TO_ADDR
// ar_crane := 88 ;
19733: LD_ADDR_EXP 56
19737: PUSH
19738: LD_INT 88
19740: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19741: LD_ADDR_EXP 51
19745: PUSH
19746: LD_INT 89
19748: ST_TO_ADDR
// us_hack := 99 ;
19749: LD_ADDR_EXP 52
19753: PUSH
19754: LD_INT 99
19756: ST_TO_ADDR
// us_artillery := 97 ;
19757: LD_ADDR_EXP 53
19761: PUSH
19762: LD_INT 97
19764: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19765: LD_ADDR_EXP 54
19769: PUSH
19770: LD_INT 91
19772: ST_TO_ADDR
// ar_mortar := 92 ;
19773: LD_ADDR_EXP 55
19777: PUSH
19778: LD_INT 92
19780: ST_TO_ADDR
// ru_radar := 98 ;
19781: LD_ADDR_EXP 50
19785: PUSH
19786: LD_INT 98
19788: ST_TO_ADDR
// tech_Artillery := 80 ;
19789: LD_ADDR_EXP 58
19793: PUSH
19794: LD_INT 80
19796: ST_TO_ADDR
// tech_RadMat := 81 ;
19797: LD_ADDR_EXP 59
19801: PUSH
19802: LD_INT 81
19804: ST_TO_ADDR
// tech_BasicTools := 82 ;
19805: LD_ADDR_EXP 60
19809: PUSH
19810: LD_INT 82
19812: ST_TO_ADDR
// tech_Cargo := 83 ;
19813: LD_ADDR_EXP 61
19817: PUSH
19818: LD_INT 83
19820: ST_TO_ADDR
// tech_Track := 84 ;
19821: LD_ADDR_EXP 62
19825: PUSH
19826: LD_INT 84
19828: ST_TO_ADDR
// tech_Crane := 85 ;
19829: LD_ADDR_EXP 63
19833: PUSH
19834: LD_INT 85
19836: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19837: LD_ADDR_EXP 64
19841: PUSH
19842: LD_INT 86
19844: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19845: LD_ADDR_EXP 65
19849: PUSH
19850: LD_INT 87
19852: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19853: LD_ADDR_EXP 66
19857: PUSH
19858: LD_INT 88
19860: ST_TO_ADDR
// class_mastodont := 31 ;
19861: LD_ADDR_EXP 67
19865: PUSH
19866: LD_INT 31
19868: ST_TO_ADDR
// class_horse := 21 ;
19869: LD_ADDR_EXP 68
19873: PUSH
19874: LD_INT 21
19876: ST_TO_ADDR
// end ;
19877: LD_VAR 0 1
19881: RET
// every 1 do
19882: GO 19884
19884: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19885: CALL 19722 0 0
19889: END
// every 0 0$1 do
19890: GO 19892
19892: DISABLE
// begin enable ;
19893: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19894: LD_STRING updateTimer(
19896: PUSH
19897: LD_OWVAR 1
19901: STR
19902: PUSH
19903: LD_STRING );
19905: STR
19906: PPUSH
19907: CALL_OW 559
// end ;
19911: END
// export function SOS_MapStart ( ) ; begin
19912: LD_INT 0
19914: PPUSH
// if streamModeActive then
19915: LD_EXP 69
19919: IFFALSE 19928
// DefineStreamItems ( true ) ;
19921: LD_INT 1
19923: PPUSH
19924: CALL 21578 0 1
// UpdateFactoryWaypoints ( ) ;
19928: CALL 35162 0 0
// end ;
19932: LD_VAR 0 1
19936: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19937: LD_INT 0
19939: PPUSH
// if p2 = 100 then
19940: LD_VAR 0 2
19944: PUSH
19945: LD_INT 100
19947: EQUAL
19948: IFFALSE 20951
// begin if not StreamModeActive then
19950: LD_EXP 69
19954: NOT
19955: IFFALSE 19965
// StreamModeActive := true ;
19957: LD_ADDR_EXP 69
19961: PUSH
19962: LD_INT 1
19964: ST_TO_ADDR
// if p3 = 0 then
19965: LD_VAR 0 3
19969: PUSH
19970: LD_INT 0
19972: EQUAL
19973: IFFALSE 19979
// InitStreamMode ;
19975: CALL 21114 0 0
// if p3 = 1 then
19979: LD_VAR 0 3
19983: PUSH
19984: LD_INT 1
19986: EQUAL
19987: IFFALSE 19997
// sRocket := true ;
19989: LD_ADDR_EXP 74
19993: PUSH
19994: LD_INT 1
19996: ST_TO_ADDR
// if p3 = 2 then
19997: LD_VAR 0 3
20001: PUSH
20002: LD_INT 2
20004: EQUAL
20005: IFFALSE 20015
// sSpeed := true ;
20007: LD_ADDR_EXP 73
20011: PUSH
20012: LD_INT 1
20014: ST_TO_ADDR
// if p3 = 3 then
20015: LD_VAR 0 3
20019: PUSH
20020: LD_INT 3
20022: EQUAL
20023: IFFALSE 20033
// sEngine := true ;
20025: LD_ADDR_EXP 75
20029: PUSH
20030: LD_INT 1
20032: ST_TO_ADDR
// if p3 = 4 then
20033: LD_VAR 0 3
20037: PUSH
20038: LD_INT 4
20040: EQUAL
20041: IFFALSE 20051
// sSpec := true ;
20043: LD_ADDR_EXP 72
20047: PUSH
20048: LD_INT 1
20050: ST_TO_ADDR
// if p3 = 5 then
20051: LD_VAR 0 3
20055: PUSH
20056: LD_INT 5
20058: EQUAL
20059: IFFALSE 20069
// sLevel := true ;
20061: LD_ADDR_EXP 76
20065: PUSH
20066: LD_INT 1
20068: ST_TO_ADDR
// if p3 = 6 then
20069: LD_VAR 0 3
20073: PUSH
20074: LD_INT 6
20076: EQUAL
20077: IFFALSE 20087
// sArmoury := true ;
20079: LD_ADDR_EXP 77
20083: PUSH
20084: LD_INT 1
20086: ST_TO_ADDR
// if p3 = 7 then
20087: LD_VAR 0 3
20091: PUSH
20092: LD_INT 7
20094: EQUAL
20095: IFFALSE 20105
// sRadar := true ;
20097: LD_ADDR_EXP 78
20101: PUSH
20102: LD_INT 1
20104: ST_TO_ADDR
// if p3 = 8 then
20105: LD_VAR 0 3
20109: PUSH
20110: LD_INT 8
20112: EQUAL
20113: IFFALSE 20123
// sBunker := true ;
20115: LD_ADDR_EXP 79
20119: PUSH
20120: LD_INT 1
20122: ST_TO_ADDR
// if p3 = 9 then
20123: LD_VAR 0 3
20127: PUSH
20128: LD_INT 9
20130: EQUAL
20131: IFFALSE 20141
// sHack := true ;
20133: LD_ADDR_EXP 80
20137: PUSH
20138: LD_INT 1
20140: ST_TO_ADDR
// if p3 = 10 then
20141: LD_VAR 0 3
20145: PUSH
20146: LD_INT 10
20148: EQUAL
20149: IFFALSE 20159
// sFire := true ;
20151: LD_ADDR_EXP 81
20155: PUSH
20156: LD_INT 1
20158: ST_TO_ADDR
// if p3 = 11 then
20159: LD_VAR 0 3
20163: PUSH
20164: LD_INT 11
20166: EQUAL
20167: IFFALSE 20177
// sRefresh := true ;
20169: LD_ADDR_EXP 82
20173: PUSH
20174: LD_INT 1
20176: ST_TO_ADDR
// if p3 = 12 then
20177: LD_VAR 0 3
20181: PUSH
20182: LD_INT 12
20184: EQUAL
20185: IFFALSE 20195
// sExp := true ;
20187: LD_ADDR_EXP 83
20191: PUSH
20192: LD_INT 1
20194: ST_TO_ADDR
// if p3 = 13 then
20195: LD_VAR 0 3
20199: PUSH
20200: LD_INT 13
20202: EQUAL
20203: IFFALSE 20213
// sDepot := true ;
20205: LD_ADDR_EXP 84
20209: PUSH
20210: LD_INT 1
20212: ST_TO_ADDR
// if p3 = 14 then
20213: LD_VAR 0 3
20217: PUSH
20218: LD_INT 14
20220: EQUAL
20221: IFFALSE 20231
// sFlag := true ;
20223: LD_ADDR_EXP 85
20227: PUSH
20228: LD_INT 1
20230: ST_TO_ADDR
// if p3 = 15 then
20231: LD_VAR 0 3
20235: PUSH
20236: LD_INT 15
20238: EQUAL
20239: IFFALSE 20249
// sKamikadze := true ;
20241: LD_ADDR_EXP 93
20245: PUSH
20246: LD_INT 1
20248: ST_TO_ADDR
// if p3 = 16 then
20249: LD_VAR 0 3
20253: PUSH
20254: LD_INT 16
20256: EQUAL
20257: IFFALSE 20267
// sTroll := true ;
20259: LD_ADDR_EXP 94
20263: PUSH
20264: LD_INT 1
20266: ST_TO_ADDR
// if p3 = 17 then
20267: LD_VAR 0 3
20271: PUSH
20272: LD_INT 17
20274: EQUAL
20275: IFFALSE 20285
// sSlow := true ;
20277: LD_ADDR_EXP 95
20281: PUSH
20282: LD_INT 1
20284: ST_TO_ADDR
// if p3 = 18 then
20285: LD_VAR 0 3
20289: PUSH
20290: LD_INT 18
20292: EQUAL
20293: IFFALSE 20303
// sLack := true ;
20295: LD_ADDR_EXP 96
20299: PUSH
20300: LD_INT 1
20302: ST_TO_ADDR
// if p3 = 19 then
20303: LD_VAR 0 3
20307: PUSH
20308: LD_INT 19
20310: EQUAL
20311: IFFALSE 20321
// sTank := true ;
20313: LD_ADDR_EXP 98
20317: PUSH
20318: LD_INT 1
20320: ST_TO_ADDR
// if p3 = 20 then
20321: LD_VAR 0 3
20325: PUSH
20326: LD_INT 20
20328: EQUAL
20329: IFFALSE 20339
// sRemote := true ;
20331: LD_ADDR_EXP 99
20335: PUSH
20336: LD_INT 1
20338: ST_TO_ADDR
// if p3 = 21 then
20339: LD_VAR 0 3
20343: PUSH
20344: LD_INT 21
20346: EQUAL
20347: IFFALSE 20357
// sPowell := true ;
20349: LD_ADDR_EXP 100
20353: PUSH
20354: LD_INT 1
20356: ST_TO_ADDR
// if p3 = 22 then
20357: LD_VAR 0 3
20361: PUSH
20362: LD_INT 22
20364: EQUAL
20365: IFFALSE 20375
// sTeleport := true ;
20367: LD_ADDR_EXP 103
20371: PUSH
20372: LD_INT 1
20374: ST_TO_ADDR
// if p3 = 23 then
20375: LD_VAR 0 3
20379: PUSH
20380: LD_INT 23
20382: EQUAL
20383: IFFALSE 20393
// sOilTower := true ;
20385: LD_ADDR_EXP 105
20389: PUSH
20390: LD_INT 1
20392: ST_TO_ADDR
// if p3 = 24 then
20393: LD_VAR 0 3
20397: PUSH
20398: LD_INT 24
20400: EQUAL
20401: IFFALSE 20411
// sShovel := true ;
20403: LD_ADDR_EXP 106
20407: PUSH
20408: LD_INT 1
20410: ST_TO_ADDR
// if p3 = 25 then
20411: LD_VAR 0 3
20415: PUSH
20416: LD_INT 25
20418: EQUAL
20419: IFFALSE 20429
// sSheik := true ;
20421: LD_ADDR_EXP 107
20425: PUSH
20426: LD_INT 1
20428: ST_TO_ADDR
// if p3 = 26 then
20429: LD_VAR 0 3
20433: PUSH
20434: LD_INT 26
20436: EQUAL
20437: IFFALSE 20447
// sEarthquake := true ;
20439: LD_ADDR_EXP 109
20443: PUSH
20444: LD_INT 1
20446: ST_TO_ADDR
// if p3 = 27 then
20447: LD_VAR 0 3
20451: PUSH
20452: LD_INT 27
20454: EQUAL
20455: IFFALSE 20465
// sAI := true ;
20457: LD_ADDR_EXP 110
20461: PUSH
20462: LD_INT 1
20464: ST_TO_ADDR
// if p3 = 28 then
20465: LD_VAR 0 3
20469: PUSH
20470: LD_INT 28
20472: EQUAL
20473: IFFALSE 20483
// sCargo := true ;
20475: LD_ADDR_EXP 113
20479: PUSH
20480: LD_INT 1
20482: ST_TO_ADDR
// if p3 = 29 then
20483: LD_VAR 0 3
20487: PUSH
20488: LD_INT 29
20490: EQUAL
20491: IFFALSE 20501
// sDLaser := true ;
20493: LD_ADDR_EXP 114
20497: PUSH
20498: LD_INT 1
20500: ST_TO_ADDR
// if p3 = 30 then
20501: LD_VAR 0 3
20505: PUSH
20506: LD_INT 30
20508: EQUAL
20509: IFFALSE 20519
// sExchange := true ;
20511: LD_ADDR_EXP 115
20515: PUSH
20516: LD_INT 1
20518: ST_TO_ADDR
// if p3 = 31 then
20519: LD_VAR 0 3
20523: PUSH
20524: LD_INT 31
20526: EQUAL
20527: IFFALSE 20537
// sFac := true ;
20529: LD_ADDR_EXP 116
20533: PUSH
20534: LD_INT 1
20536: ST_TO_ADDR
// if p3 = 32 then
20537: LD_VAR 0 3
20541: PUSH
20542: LD_INT 32
20544: EQUAL
20545: IFFALSE 20555
// sPower := true ;
20547: LD_ADDR_EXP 117
20551: PUSH
20552: LD_INT 1
20554: ST_TO_ADDR
// if p3 = 33 then
20555: LD_VAR 0 3
20559: PUSH
20560: LD_INT 33
20562: EQUAL
20563: IFFALSE 20573
// sRandom := true ;
20565: LD_ADDR_EXP 118
20569: PUSH
20570: LD_INT 1
20572: ST_TO_ADDR
// if p3 = 34 then
20573: LD_VAR 0 3
20577: PUSH
20578: LD_INT 34
20580: EQUAL
20581: IFFALSE 20591
// sShield := true ;
20583: LD_ADDR_EXP 119
20587: PUSH
20588: LD_INT 1
20590: ST_TO_ADDR
// if p3 = 35 then
20591: LD_VAR 0 3
20595: PUSH
20596: LD_INT 35
20598: EQUAL
20599: IFFALSE 20609
// sTime := true ;
20601: LD_ADDR_EXP 120
20605: PUSH
20606: LD_INT 1
20608: ST_TO_ADDR
// if p3 = 36 then
20609: LD_VAR 0 3
20613: PUSH
20614: LD_INT 36
20616: EQUAL
20617: IFFALSE 20627
// sTools := true ;
20619: LD_ADDR_EXP 121
20623: PUSH
20624: LD_INT 1
20626: ST_TO_ADDR
// if p3 = 101 then
20627: LD_VAR 0 3
20631: PUSH
20632: LD_INT 101
20634: EQUAL
20635: IFFALSE 20645
// sSold := true ;
20637: LD_ADDR_EXP 86
20641: PUSH
20642: LD_INT 1
20644: ST_TO_ADDR
// if p3 = 102 then
20645: LD_VAR 0 3
20649: PUSH
20650: LD_INT 102
20652: EQUAL
20653: IFFALSE 20663
// sDiff := true ;
20655: LD_ADDR_EXP 87
20659: PUSH
20660: LD_INT 1
20662: ST_TO_ADDR
// if p3 = 103 then
20663: LD_VAR 0 3
20667: PUSH
20668: LD_INT 103
20670: EQUAL
20671: IFFALSE 20681
// sFog := true ;
20673: LD_ADDR_EXP 90
20677: PUSH
20678: LD_INT 1
20680: ST_TO_ADDR
// if p3 = 104 then
20681: LD_VAR 0 3
20685: PUSH
20686: LD_INT 104
20688: EQUAL
20689: IFFALSE 20699
// sReset := true ;
20691: LD_ADDR_EXP 91
20695: PUSH
20696: LD_INT 1
20698: ST_TO_ADDR
// if p3 = 105 then
20699: LD_VAR 0 3
20703: PUSH
20704: LD_INT 105
20706: EQUAL
20707: IFFALSE 20717
// sSun := true ;
20709: LD_ADDR_EXP 92
20713: PUSH
20714: LD_INT 1
20716: ST_TO_ADDR
// if p3 = 106 then
20717: LD_VAR 0 3
20721: PUSH
20722: LD_INT 106
20724: EQUAL
20725: IFFALSE 20735
// sTiger := true ;
20727: LD_ADDR_EXP 88
20731: PUSH
20732: LD_INT 1
20734: ST_TO_ADDR
// if p3 = 107 then
20735: LD_VAR 0 3
20739: PUSH
20740: LD_INT 107
20742: EQUAL
20743: IFFALSE 20753
// sBomb := true ;
20745: LD_ADDR_EXP 89
20749: PUSH
20750: LD_INT 1
20752: ST_TO_ADDR
// if p3 = 108 then
20753: LD_VAR 0 3
20757: PUSH
20758: LD_INT 108
20760: EQUAL
20761: IFFALSE 20771
// sWound := true ;
20763: LD_ADDR_EXP 97
20767: PUSH
20768: LD_INT 1
20770: ST_TO_ADDR
// if p3 = 109 then
20771: LD_VAR 0 3
20775: PUSH
20776: LD_INT 109
20778: EQUAL
20779: IFFALSE 20789
// sBetray := true ;
20781: LD_ADDR_EXP 101
20785: PUSH
20786: LD_INT 1
20788: ST_TO_ADDR
// if p3 = 110 then
20789: LD_VAR 0 3
20793: PUSH
20794: LD_INT 110
20796: EQUAL
20797: IFFALSE 20807
// sContamin := true ;
20799: LD_ADDR_EXP 102
20803: PUSH
20804: LD_INT 1
20806: ST_TO_ADDR
// if p3 = 111 then
20807: LD_VAR 0 3
20811: PUSH
20812: LD_INT 111
20814: EQUAL
20815: IFFALSE 20825
// sOil := true ;
20817: LD_ADDR_EXP 104
20821: PUSH
20822: LD_INT 1
20824: ST_TO_ADDR
// if p3 = 112 then
20825: LD_VAR 0 3
20829: PUSH
20830: LD_INT 112
20832: EQUAL
20833: IFFALSE 20843
// sStu := true ;
20835: LD_ADDR_EXP 108
20839: PUSH
20840: LD_INT 1
20842: ST_TO_ADDR
// if p3 = 113 then
20843: LD_VAR 0 3
20847: PUSH
20848: LD_INT 113
20850: EQUAL
20851: IFFALSE 20861
// sBazooka := true ;
20853: LD_ADDR_EXP 111
20857: PUSH
20858: LD_INT 1
20860: ST_TO_ADDR
// if p3 = 114 then
20861: LD_VAR 0 3
20865: PUSH
20866: LD_INT 114
20868: EQUAL
20869: IFFALSE 20879
// sMortar := true ;
20871: LD_ADDR_EXP 112
20875: PUSH
20876: LD_INT 1
20878: ST_TO_ADDR
// if p3 = 115 then
20879: LD_VAR 0 3
20883: PUSH
20884: LD_INT 115
20886: EQUAL
20887: IFFALSE 20897
// sRanger := true ;
20889: LD_ADDR_EXP 122
20893: PUSH
20894: LD_INT 1
20896: ST_TO_ADDR
// if p3 = 116 then
20897: LD_VAR 0 3
20901: PUSH
20902: LD_INT 116
20904: EQUAL
20905: IFFALSE 20915
// sComputer := true ;
20907: LD_ADDR_EXP 123
20911: PUSH
20912: LD_INT 1
20914: ST_TO_ADDR
// if p3 = 117 then
20915: LD_VAR 0 3
20919: PUSH
20920: LD_INT 117
20922: EQUAL
20923: IFFALSE 20933
// s30 := true ;
20925: LD_ADDR_EXP 124
20929: PUSH
20930: LD_INT 1
20932: ST_TO_ADDR
// if p3 = 118 then
20933: LD_VAR 0 3
20937: PUSH
20938: LD_INT 118
20940: EQUAL
20941: IFFALSE 20951
// s60 := true ;
20943: LD_ADDR_EXP 125
20947: PUSH
20948: LD_INT 1
20950: ST_TO_ADDR
// end ; if p2 = 101 then
20951: LD_VAR 0 2
20955: PUSH
20956: LD_INT 101
20958: EQUAL
20959: IFFALSE 21087
// begin case p3 of 1 :
20961: LD_VAR 0 3
20965: PUSH
20966: LD_INT 1
20968: DOUBLE
20969: EQUAL
20970: IFTRUE 20974
20972: GO 20981
20974: POP
// hHackUnlimitedResources ; 2 :
20975: CALL 33185 0 0
20979: GO 21087
20981: LD_INT 2
20983: DOUBLE
20984: EQUAL
20985: IFTRUE 20989
20987: GO 20996
20989: POP
// hHackSetLevel10 ; 3 :
20990: CALL 33318 0 0
20994: GO 21087
20996: LD_INT 3
20998: DOUBLE
20999: EQUAL
21000: IFTRUE 21004
21002: GO 21011
21004: POP
// hHackSetLevel10YourUnits ; 4 :
21005: CALL 33403 0 0
21009: GO 21087
21011: LD_INT 4
21013: DOUBLE
21014: EQUAL
21015: IFTRUE 21019
21017: GO 21026
21019: POP
// hHackInvincible ; 5 :
21020: CALL 33851 0 0
21024: GO 21087
21026: LD_INT 5
21028: DOUBLE
21029: EQUAL
21030: IFTRUE 21034
21032: GO 21041
21034: POP
// hHackInvisible ; 6 :
21035: CALL 33962 0 0
21039: GO 21087
21041: LD_INT 6
21043: DOUBLE
21044: EQUAL
21045: IFTRUE 21049
21047: GO 21056
21049: POP
// hHackChangeYourSide ; 7 :
21050: CALL 34019 0 0
21054: GO 21087
21056: LD_INT 7
21058: DOUBLE
21059: EQUAL
21060: IFTRUE 21064
21062: GO 21071
21064: POP
// hHackChangeUnitSide ; 8 :
21065: CALL 34061 0 0
21069: GO 21087
21071: LD_INT 8
21073: DOUBLE
21074: EQUAL
21075: IFTRUE 21079
21077: GO 21086
21079: POP
// hHackFog ; end ;
21080: CALL 34162 0 0
21084: GO 21087
21086: POP
// end ; end ;
21087: LD_VAR 0 7
21091: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21092: GO 21094
21094: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21095: LD_STRING initStreamRollete();
21097: PPUSH
21098: CALL_OW 559
// InitStreamMode ;
21102: CALL 21114 0 0
// DefineStreamItems ( false ) ;
21106: LD_INT 0
21108: PPUSH
21109: CALL 21578 0 1
// end ;
21113: END
// function InitStreamMode ; begin
21114: LD_INT 0
21116: PPUSH
// streamModeActive := false ;
21117: LD_ADDR_EXP 69
21121: PUSH
21122: LD_INT 0
21124: ST_TO_ADDR
// normalCounter := 36 ;
21125: LD_ADDR_EXP 70
21129: PUSH
21130: LD_INT 36
21132: ST_TO_ADDR
// hardcoreCounter := 18 ;
21133: LD_ADDR_EXP 71
21137: PUSH
21138: LD_INT 18
21140: ST_TO_ADDR
// sRocket := false ;
21141: LD_ADDR_EXP 74
21145: PUSH
21146: LD_INT 0
21148: ST_TO_ADDR
// sSpeed := false ;
21149: LD_ADDR_EXP 73
21153: PUSH
21154: LD_INT 0
21156: ST_TO_ADDR
// sEngine := false ;
21157: LD_ADDR_EXP 75
21161: PUSH
21162: LD_INT 0
21164: ST_TO_ADDR
// sSpec := false ;
21165: LD_ADDR_EXP 72
21169: PUSH
21170: LD_INT 0
21172: ST_TO_ADDR
// sLevel := false ;
21173: LD_ADDR_EXP 76
21177: PUSH
21178: LD_INT 0
21180: ST_TO_ADDR
// sArmoury := false ;
21181: LD_ADDR_EXP 77
21185: PUSH
21186: LD_INT 0
21188: ST_TO_ADDR
// sRadar := false ;
21189: LD_ADDR_EXP 78
21193: PUSH
21194: LD_INT 0
21196: ST_TO_ADDR
// sBunker := false ;
21197: LD_ADDR_EXP 79
21201: PUSH
21202: LD_INT 0
21204: ST_TO_ADDR
// sHack := false ;
21205: LD_ADDR_EXP 80
21209: PUSH
21210: LD_INT 0
21212: ST_TO_ADDR
// sFire := false ;
21213: LD_ADDR_EXP 81
21217: PUSH
21218: LD_INT 0
21220: ST_TO_ADDR
// sRefresh := false ;
21221: LD_ADDR_EXP 82
21225: PUSH
21226: LD_INT 0
21228: ST_TO_ADDR
// sExp := false ;
21229: LD_ADDR_EXP 83
21233: PUSH
21234: LD_INT 0
21236: ST_TO_ADDR
// sDepot := false ;
21237: LD_ADDR_EXP 84
21241: PUSH
21242: LD_INT 0
21244: ST_TO_ADDR
// sFlag := false ;
21245: LD_ADDR_EXP 85
21249: PUSH
21250: LD_INT 0
21252: ST_TO_ADDR
// sKamikadze := false ;
21253: LD_ADDR_EXP 93
21257: PUSH
21258: LD_INT 0
21260: ST_TO_ADDR
// sTroll := false ;
21261: LD_ADDR_EXP 94
21265: PUSH
21266: LD_INT 0
21268: ST_TO_ADDR
// sSlow := false ;
21269: LD_ADDR_EXP 95
21273: PUSH
21274: LD_INT 0
21276: ST_TO_ADDR
// sLack := false ;
21277: LD_ADDR_EXP 96
21281: PUSH
21282: LD_INT 0
21284: ST_TO_ADDR
// sTank := false ;
21285: LD_ADDR_EXP 98
21289: PUSH
21290: LD_INT 0
21292: ST_TO_ADDR
// sRemote := false ;
21293: LD_ADDR_EXP 99
21297: PUSH
21298: LD_INT 0
21300: ST_TO_ADDR
// sPowell := false ;
21301: LD_ADDR_EXP 100
21305: PUSH
21306: LD_INT 0
21308: ST_TO_ADDR
// sTeleport := false ;
21309: LD_ADDR_EXP 103
21313: PUSH
21314: LD_INT 0
21316: ST_TO_ADDR
// sOilTower := false ;
21317: LD_ADDR_EXP 105
21321: PUSH
21322: LD_INT 0
21324: ST_TO_ADDR
// sShovel := false ;
21325: LD_ADDR_EXP 106
21329: PUSH
21330: LD_INT 0
21332: ST_TO_ADDR
// sSheik := false ;
21333: LD_ADDR_EXP 107
21337: PUSH
21338: LD_INT 0
21340: ST_TO_ADDR
// sEarthquake := false ;
21341: LD_ADDR_EXP 109
21345: PUSH
21346: LD_INT 0
21348: ST_TO_ADDR
// sAI := false ;
21349: LD_ADDR_EXP 110
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
// sCargo := false ;
21357: LD_ADDR_EXP 113
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// sDLaser := false ;
21365: LD_ADDR_EXP 114
21369: PUSH
21370: LD_INT 0
21372: ST_TO_ADDR
// sExchange := false ;
21373: LD_ADDR_EXP 115
21377: PUSH
21378: LD_INT 0
21380: ST_TO_ADDR
// sFac := false ;
21381: LD_ADDR_EXP 116
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// sPower := false ;
21389: LD_ADDR_EXP 117
21393: PUSH
21394: LD_INT 0
21396: ST_TO_ADDR
// sRandom := false ;
21397: LD_ADDR_EXP 118
21401: PUSH
21402: LD_INT 0
21404: ST_TO_ADDR
// sShield := false ;
21405: LD_ADDR_EXP 119
21409: PUSH
21410: LD_INT 0
21412: ST_TO_ADDR
// sTime := false ;
21413: LD_ADDR_EXP 120
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// sTools := false ;
21421: LD_ADDR_EXP 121
21425: PUSH
21426: LD_INT 0
21428: ST_TO_ADDR
// sSold := false ;
21429: LD_ADDR_EXP 86
21433: PUSH
21434: LD_INT 0
21436: ST_TO_ADDR
// sDiff := false ;
21437: LD_ADDR_EXP 87
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
// sFog := false ;
21445: LD_ADDR_EXP 90
21449: PUSH
21450: LD_INT 0
21452: ST_TO_ADDR
// sReset := false ;
21453: LD_ADDR_EXP 91
21457: PUSH
21458: LD_INT 0
21460: ST_TO_ADDR
// sSun := false ;
21461: LD_ADDR_EXP 92
21465: PUSH
21466: LD_INT 0
21468: ST_TO_ADDR
// sTiger := false ;
21469: LD_ADDR_EXP 88
21473: PUSH
21474: LD_INT 0
21476: ST_TO_ADDR
// sBomb := false ;
21477: LD_ADDR_EXP 89
21481: PUSH
21482: LD_INT 0
21484: ST_TO_ADDR
// sWound := false ;
21485: LD_ADDR_EXP 97
21489: PUSH
21490: LD_INT 0
21492: ST_TO_ADDR
// sBetray := false ;
21493: LD_ADDR_EXP 101
21497: PUSH
21498: LD_INT 0
21500: ST_TO_ADDR
// sContamin := false ;
21501: LD_ADDR_EXP 102
21505: PUSH
21506: LD_INT 0
21508: ST_TO_ADDR
// sOil := false ;
21509: LD_ADDR_EXP 104
21513: PUSH
21514: LD_INT 0
21516: ST_TO_ADDR
// sStu := false ;
21517: LD_ADDR_EXP 108
21521: PUSH
21522: LD_INT 0
21524: ST_TO_ADDR
// sBazooka := false ;
21525: LD_ADDR_EXP 111
21529: PUSH
21530: LD_INT 0
21532: ST_TO_ADDR
// sMortar := false ;
21533: LD_ADDR_EXP 112
21537: PUSH
21538: LD_INT 0
21540: ST_TO_ADDR
// sRanger := false ;
21541: LD_ADDR_EXP 122
21545: PUSH
21546: LD_INT 0
21548: ST_TO_ADDR
// sComputer := false ;
21549: LD_ADDR_EXP 123
21553: PUSH
21554: LD_INT 0
21556: ST_TO_ADDR
// s30 := false ;
21557: LD_ADDR_EXP 124
21561: PUSH
21562: LD_INT 0
21564: ST_TO_ADDR
// s60 := false ;
21565: LD_ADDR_EXP 125
21569: PUSH
21570: LD_INT 0
21572: ST_TO_ADDR
// end ;
21573: LD_VAR 0 1
21577: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21578: LD_INT 0
21580: PPUSH
21581: PPUSH
21582: PPUSH
21583: PPUSH
21584: PPUSH
21585: PPUSH
21586: PPUSH
// result := [ ] ;
21587: LD_ADDR_VAR 0 2
21591: PUSH
21592: EMPTY
21593: ST_TO_ADDR
// if campaign_id = 1 then
21594: LD_OWVAR 69
21598: PUSH
21599: LD_INT 1
21601: EQUAL
21602: IFFALSE 24768
// begin case mission_number of 1 :
21604: LD_OWVAR 70
21608: PUSH
21609: LD_INT 1
21611: DOUBLE
21612: EQUAL
21613: IFTRUE 21617
21615: GO 21693
21617: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21618: LD_ADDR_VAR 0 2
21622: PUSH
21623: LD_INT 2
21625: PUSH
21626: LD_INT 4
21628: PUSH
21629: LD_INT 11
21631: PUSH
21632: LD_INT 12
21634: PUSH
21635: LD_INT 15
21637: PUSH
21638: LD_INT 16
21640: PUSH
21641: LD_INT 22
21643: PUSH
21644: LD_INT 23
21646: PUSH
21647: LD_INT 26
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 101
21663: PUSH
21664: LD_INT 102
21666: PUSH
21667: LD_INT 106
21669: PUSH
21670: LD_INT 116
21672: PUSH
21673: LD_INT 117
21675: PUSH
21676: LD_INT 118
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: ST_TO_ADDR
21691: GO 24766
21693: LD_INT 2
21695: DOUBLE
21696: EQUAL
21697: IFTRUE 21701
21699: GO 21785
21701: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21702: LD_ADDR_VAR 0 2
21706: PUSH
21707: LD_INT 2
21709: PUSH
21710: LD_INT 4
21712: PUSH
21713: LD_INT 11
21715: PUSH
21716: LD_INT 12
21718: PUSH
21719: LD_INT 15
21721: PUSH
21722: LD_INT 16
21724: PUSH
21725: LD_INT 22
21727: PUSH
21728: LD_INT 23
21730: PUSH
21731: LD_INT 26
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 101
21747: PUSH
21748: LD_INT 102
21750: PUSH
21751: LD_INT 105
21753: PUSH
21754: LD_INT 106
21756: PUSH
21757: LD_INT 108
21759: PUSH
21760: LD_INT 116
21762: PUSH
21763: LD_INT 117
21765: PUSH
21766: LD_INT 118
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: ST_TO_ADDR
21783: GO 24766
21785: LD_INT 3
21787: DOUBLE
21788: EQUAL
21789: IFTRUE 21793
21791: GO 21881
21793: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21794: LD_ADDR_VAR 0 2
21798: PUSH
21799: LD_INT 2
21801: PUSH
21802: LD_INT 4
21804: PUSH
21805: LD_INT 5
21807: PUSH
21808: LD_INT 11
21810: PUSH
21811: LD_INT 12
21813: PUSH
21814: LD_INT 15
21816: PUSH
21817: LD_INT 16
21819: PUSH
21820: LD_INT 22
21822: PUSH
21823: LD_INT 26
21825: PUSH
21826: LD_INT 36
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 101
21843: PUSH
21844: LD_INT 102
21846: PUSH
21847: LD_INT 105
21849: PUSH
21850: LD_INT 106
21852: PUSH
21853: LD_INT 108
21855: PUSH
21856: LD_INT 116
21858: PUSH
21859: LD_INT 117
21861: PUSH
21862: LD_INT 118
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: ST_TO_ADDR
21879: GO 24766
21881: LD_INT 4
21883: DOUBLE
21884: EQUAL
21885: IFTRUE 21889
21887: GO 21985
21889: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21890: LD_ADDR_VAR 0 2
21894: PUSH
21895: LD_INT 2
21897: PUSH
21898: LD_INT 4
21900: PUSH
21901: LD_INT 5
21903: PUSH
21904: LD_INT 8
21906: PUSH
21907: LD_INT 11
21909: PUSH
21910: LD_INT 12
21912: PUSH
21913: LD_INT 15
21915: PUSH
21916: LD_INT 16
21918: PUSH
21919: LD_INT 22
21921: PUSH
21922: LD_INT 23
21924: PUSH
21925: LD_INT 26
21927: PUSH
21928: LD_INT 36
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 101
21947: PUSH
21948: LD_INT 102
21950: PUSH
21951: LD_INT 105
21953: PUSH
21954: LD_INT 106
21956: PUSH
21957: LD_INT 108
21959: PUSH
21960: LD_INT 116
21962: PUSH
21963: LD_INT 117
21965: PUSH
21966: LD_INT 118
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: ST_TO_ADDR
21983: GO 24766
21985: LD_INT 5
21987: DOUBLE
21988: EQUAL
21989: IFTRUE 21993
21991: GO 22105
21993: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21994: LD_ADDR_VAR 0 2
21998: PUSH
21999: LD_INT 2
22001: PUSH
22002: LD_INT 4
22004: PUSH
22005: LD_INT 5
22007: PUSH
22008: LD_INT 6
22010: PUSH
22011: LD_INT 8
22013: PUSH
22014: LD_INT 11
22016: PUSH
22017: LD_INT 12
22019: PUSH
22020: LD_INT 15
22022: PUSH
22023: LD_INT 16
22025: PUSH
22026: LD_INT 22
22028: PUSH
22029: LD_INT 23
22031: PUSH
22032: LD_INT 25
22034: PUSH
22035: LD_INT 26
22037: PUSH
22038: LD_INT 36
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 101
22059: PUSH
22060: LD_INT 102
22062: PUSH
22063: LD_INT 105
22065: PUSH
22066: LD_INT 106
22068: PUSH
22069: LD_INT 108
22071: PUSH
22072: LD_INT 109
22074: PUSH
22075: LD_INT 112
22077: PUSH
22078: LD_INT 116
22080: PUSH
22081: LD_INT 117
22083: PUSH
22084: LD_INT 118
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: ST_TO_ADDR
22103: GO 24766
22105: LD_INT 6
22107: DOUBLE
22108: EQUAL
22109: IFTRUE 22113
22111: GO 22245
22113: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22114: LD_ADDR_VAR 0 2
22118: PUSH
22119: LD_INT 2
22121: PUSH
22122: LD_INT 4
22124: PUSH
22125: LD_INT 5
22127: PUSH
22128: LD_INT 6
22130: PUSH
22131: LD_INT 8
22133: PUSH
22134: LD_INT 11
22136: PUSH
22137: LD_INT 12
22139: PUSH
22140: LD_INT 15
22142: PUSH
22143: LD_INT 16
22145: PUSH
22146: LD_INT 20
22148: PUSH
22149: LD_INT 21
22151: PUSH
22152: LD_INT 22
22154: PUSH
22155: LD_INT 23
22157: PUSH
22158: LD_INT 25
22160: PUSH
22161: LD_INT 26
22163: PUSH
22164: LD_INT 30
22166: PUSH
22167: LD_INT 31
22169: PUSH
22170: LD_INT 32
22172: PUSH
22173: LD_INT 36
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 101
22199: PUSH
22200: LD_INT 102
22202: PUSH
22203: LD_INT 105
22205: PUSH
22206: LD_INT 106
22208: PUSH
22209: LD_INT 108
22211: PUSH
22212: LD_INT 109
22214: PUSH
22215: LD_INT 112
22217: PUSH
22218: LD_INT 116
22220: PUSH
22221: LD_INT 117
22223: PUSH
22224: LD_INT 118
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: ST_TO_ADDR
22243: GO 24766
22245: LD_INT 7
22247: DOUBLE
22248: EQUAL
22249: IFTRUE 22253
22251: GO 22365
22253: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22254: LD_ADDR_VAR 0 2
22258: PUSH
22259: LD_INT 2
22261: PUSH
22262: LD_INT 4
22264: PUSH
22265: LD_INT 5
22267: PUSH
22268: LD_INT 7
22270: PUSH
22271: LD_INT 11
22273: PUSH
22274: LD_INT 12
22276: PUSH
22277: LD_INT 15
22279: PUSH
22280: LD_INT 16
22282: PUSH
22283: LD_INT 20
22285: PUSH
22286: LD_INT 21
22288: PUSH
22289: LD_INT 22
22291: PUSH
22292: LD_INT 23
22294: PUSH
22295: LD_INT 25
22297: PUSH
22298: LD_INT 26
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 101
22319: PUSH
22320: LD_INT 102
22322: PUSH
22323: LD_INT 103
22325: PUSH
22326: LD_INT 105
22328: PUSH
22329: LD_INT 106
22331: PUSH
22332: LD_INT 108
22334: PUSH
22335: LD_INT 112
22337: PUSH
22338: LD_INT 116
22340: PUSH
22341: LD_INT 117
22343: PUSH
22344: LD_INT 118
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: ST_TO_ADDR
22363: GO 24766
22365: LD_INT 8
22367: DOUBLE
22368: EQUAL
22369: IFTRUE 22373
22371: GO 22513
22373: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22374: LD_ADDR_VAR 0 2
22378: PUSH
22379: LD_INT 2
22381: PUSH
22382: LD_INT 4
22384: PUSH
22385: LD_INT 5
22387: PUSH
22388: LD_INT 6
22390: PUSH
22391: LD_INT 7
22393: PUSH
22394: LD_INT 8
22396: PUSH
22397: LD_INT 11
22399: PUSH
22400: LD_INT 12
22402: PUSH
22403: LD_INT 15
22405: PUSH
22406: LD_INT 16
22408: PUSH
22409: LD_INT 20
22411: PUSH
22412: LD_INT 21
22414: PUSH
22415: LD_INT 22
22417: PUSH
22418: LD_INT 23
22420: PUSH
22421: LD_INT 25
22423: PUSH
22424: LD_INT 26
22426: PUSH
22427: LD_INT 30
22429: PUSH
22430: LD_INT 31
22432: PUSH
22433: LD_INT 32
22435: PUSH
22436: LD_INT 36
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 101
22463: PUSH
22464: LD_INT 102
22466: PUSH
22467: LD_INT 103
22469: PUSH
22470: LD_INT 105
22472: PUSH
22473: LD_INT 106
22475: PUSH
22476: LD_INT 108
22478: PUSH
22479: LD_INT 109
22481: PUSH
22482: LD_INT 112
22484: PUSH
22485: LD_INT 116
22487: PUSH
22488: LD_INT 117
22490: PUSH
22491: LD_INT 118
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: ST_TO_ADDR
22511: GO 24766
22513: LD_INT 9
22515: DOUBLE
22516: EQUAL
22517: IFTRUE 22521
22519: GO 22669
22521: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22522: LD_ADDR_VAR 0 2
22526: PUSH
22527: LD_INT 2
22529: PUSH
22530: LD_INT 4
22532: PUSH
22533: LD_INT 5
22535: PUSH
22536: LD_INT 6
22538: PUSH
22539: LD_INT 7
22541: PUSH
22542: LD_INT 8
22544: PUSH
22545: LD_INT 11
22547: PUSH
22548: LD_INT 12
22550: PUSH
22551: LD_INT 15
22553: PUSH
22554: LD_INT 16
22556: PUSH
22557: LD_INT 20
22559: PUSH
22560: LD_INT 21
22562: PUSH
22563: LD_INT 22
22565: PUSH
22566: LD_INT 23
22568: PUSH
22569: LD_INT 25
22571: PUSH
22572: LD_INT 26
22574: PUSH
22575: LD_INT 28
22577: PUSH
22578: LD_INT 30
22580: PUSH
22581: LD_INT 31
22583: PUSH
22584: LD_INT 32
22586: PUSH
22587: LD_INT 36
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 101
22615: PUSH
22616: LD_INT 102
22618: PUSH
22619: LD_INT 103
22621: PUSH
22622: LD_INT 105
22624: PUSH
22625: LD_INT 106
22627: PUSH
22628: LD_INT 108
22630: PUSH
22631: LD_INT 109
22633: PUSH
22634: LD_INT 112
22636: PUSH
22637: LD_INT 114
22639: PUSH
22640: LD_INT 116
22642: PUSH
22643: LD_INT 117
22645: PUSH
22646: LD_INT 118
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: ST_TO_ADDR
22667: GO 24766
22669: LD_INT 10
22671: DOUBLE
22672: EQUAL
22673: IFTRUE 22677
22675: GO 22873
22677: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22678: LD_ADDR_VAR 0 2
22682: PUSH
22683: LD_INT 2
22685: PUSH
22686: LD_INT 4
22688: PUSH
22689: LD_INT 5
22691: PUSH
22692: LD_INT 6
22694: PUSH
22695: LD_INT 7
22697: PUSH
22698: LD_INT 8
22700: PUSH
22701: LD_INT 9
22703: PUSH
22704: LD_INT 10
22706: PUSH
22707: LD_INT 11
22709: PUSH
22710: LD_INT 12
22712: PUSH
22713: LD_INT 13
22715: PUSH
22716: LD_INT 14
22718: PUSH
22719: LD_INT 15
22721: PUSH
22722: LD_INT 16
22724: PUSH
22725: LD_INT 17
22727: PUSH
22728: LD_INT 18
22730: PUSH
22731: LD_INT 19
22733: PUSH
22734: LD_INT 20
22736: PUSH
22737: LD_INT 21
22739: PUSH
22740: LD_INT 22
22742: PUSH
22743: LD_INT 23
22745: PUSH
22746: LD_INT 24
22748: PUSH
22749: LD_INT 25
22751: PUSH
22752: LD_INT 26
22754: PUSH
22755: LD_INT 28
22757: PUSH
22758: LD_INT 30
22760: PUSH
22761: LD_INT 31
22763: PUSH
22764: LD_INT 32
22766: PUSH
22767: LD_INT 36
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 101
22803: PUSH
22804: LD_INT 102
22806: PUSH
22807: LD_INT 103
22809: PUSH
22810: LD_INT 104
22812: PUSH
22813: LD_INT 105
22815: PUSH
22816: LD_INT 106
22818: PUSH
22819: LD_INT 107
22821: PUSH
22822: LD_INT 108
22824: PUSH
22825: LD_INT 109
22827: PUSH
22828: LD_INT 110
22830: PUSH
22831: LD_INT 111
22833: PUSH
22834: LD_INT 112
22836: PUSH
22837: LD_INT 114
22839: PUSH
22840: LD_INT 116
22842: PUSH
22843: LD_INT 117
22845: PUSH
22846: LD_INT 118
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: ST_TO_ADDR
22871: GO 24766
22873: LD_INT 11
22875: DOUBLE
22876: EQUAL
22877: IFTRUE 22881
22879: GO 23085
22881: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22882: LD_ADDR_VAR 0 2
22886: PUSH
22887: LD_INT 2
22889: PUSH
22890: LD_INT 3
22892: PUSH
22893: LD_INT 4
22895: PUSH
22896: LD_INT 5
22898: PUSH
22899: LD_INT 6
22901: PUSH
22902: LD_INT 7
22904: PUSH
22905: LD_INT 8
22907: PUSH
22908: LD_INT 9
22910: PUSH
22911: LD_INT 10
22913: PUSH
22914: LD_INT 11
22916: PUSH
22917: LD_INT 12
22919: PUSH
22920: LD_INT 13
22922: PUSH
22923: LD_INT 14
22925: PUSH
22926: LD_INT 15
22928: PUSH
22929: LD_INT 16
22931: PUSH
22932: LD_INT 17
22934: PUSH
22935: LD_INT 18
22937: PUSH
22938: LD_INT 19
22940: PUSH
22941: LD_INT 20
22943: PUSH
22944: LD_INT 21
22946: PUSH
22947: LD_INT 22
22949: PUSH
22950: LD_INT 23
22952: PUSH
22953: LD_INT 24
22955: PUSH
22956: LD_INT 25
22958: PUSH
22959: LD_INT 26
22961: PUSH
22962: LD_INT 28
22964: PUSH
22965: LD_INT 30
22967: PUSH
22968: LD_INT 31
22970: PUSH
22971: LD_INT 32
22973: PUSH
22974: LD_INT 34
22976: PUSH
22977: LD_INT 36
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 101
23015: PUSH
23016: LD_INT 102
23018: PUSH
23019: LD_INT 103
23021: PUSH
23022: LD_INT 104
23024: PUSH
23025: LD_INT 105
23027: PUSH
23028: LD_INT 106
23030: PUSH
23031: LD_INT 107
23033: PUSH
23034: LD_INT 108
23036: PUSH
23037: LD_INT 109
23039: PUSH
23040: LD_INT 110
23042: PUSH
23043: LD_INT 111
23045: PUSH
23046: LD_INT 112
23048: PUSH
23049: LD_INT 114
23051: PUSH
23052: LD_INT 116
23054: PUSH
23055: LD_INT 117
23057: PUSH
23058: LD_INT 118
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: ST_TO_ADDR
23083: GO 24766
23085: LD_INT 12
23087: DOUBLE
23088: EQUAL
23089: IFTRUE 23093
23091: GO 23313
23093: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23094: LD_ADDR_VAR 0 2
23098: PUSH
23099: LD_INT 1
23101: PUSH
23102: LD_INT 2
23104: PUSH
23105: LD_INT 3
23107: PUSH
23108: LD_INT 4
23110: PUSH
23111: LD_INT 5
23113: PUSH
23114: LD_INT 6
23116: PUSH
23117: LD_INT 7
23119: PUSH
23120: LD_INT 8
23122: PUSH
23123: LD_INT 9
23125: PUSH
23126: LD_INT 10
23128: PUSH
23129: LD_INT 11
23131: PUSH
23132: LD_INT 12
23134: PUSH
23135: LD_INT 13
23137: PUSH
23138: LD_INT 14
23140: PUSH
23141: LD_INT 15
23143: PUSH
23144: LD_INT 16
23146: PUSH
23147: LD_INT 17
23149: PUSH
23150: LD_INT 18
23152: PUSH
23153: LD_INT 19
23155: PUSH
23156: LD_INT 20
23158: PUSH
23159: LD_INT 21
23161: PUSH
23162: LD_INT 22
23164: PUSH
23165: LD_INT 23
23167: PUSH
23168: LD_INT 24
23170: PUSH
23171: LD_INT 25
23173: PUSH
23174: LD_INT 26
23176: PUSH
23177: LD_INT 27
23179: PUSH
23180: LD_INT 28
23182: PUSH
23183: LD_INT 30
23185: PUSH
23186: LD_INT 31
23188: PUSH
23189: LD_INT 32
23191: PUSH
23192: LD_INT 33
23194: PUSH
23195: LD_INT 34
23197: PUSH
23198: LD_INT 36
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 101
23239: PUSH
23240: LD_INT 102
23242: PUSH
23243: LD_INT 103
23245: PUSH
23246: LD_INT 104
23248: PUSH
23249: LD_INT 105
23251: PUSH
23252: LD_INT 106
23254: PUSH
23255: LD_INT 107
23257: PUSH
23258: LD_INT 108
23260: PUSH
23261: LD_INT 109
23263: PUSH
23264: LD_INT 110
23266: PUSH
23267: LD_INT 111
23269: PUSH
23270: LD_INT 112
23272: PUSH
23273: LD_INT 113
23275: PUSH
23276: LD_INT 114
23278: PUSH
23279: LD_INT 116
23281: PUSH
23282: LD_INT 117
23284: PUSH
23285: LD_INT 118
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: ST_TO_ADDR
23311: GO 24766
23313: LD_INT 13
23315: DOUBLE
23316: EQUAL
23317: IFTRUE 23321
23319: GO 23529
23321: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23322: LD_ADDR_VAR 0 2
23326: PUSH
23327: LD_INT 1
23329: PUSH
23330: LD_INT 2
23332: PUSH
23333: LD_INT 3
23335: PUSH
23336: LD_INT 4
23338: PUSH
23339: LD_INT 5
23341: PUSH
23342: LD_INT 8
23344: PUSH
23345: LD_INT 9
23347: PUSH
23348: LD_INT 10
23350: PUSH
23351: LD_INT 11
23353: PUSH
23354: LD_INT 12
23356: PUSH
23357: LD_INT 14
23359: PUSH
23360: LD_INT 15
23362: PUSH
23363: LD_INT 16
23365: PUSH
23366: LD_INT 17
23368: PUSH
23369: LD_INT 18
23371: PUSH
23372: LD_INT 19
23374: PUSH
23375: LD_INT 20
23377: PUSH
23378: LD_INT 21
23380: PUSH
23381: LD_INT 22
23383: PUSH
23384: LD_INT 23
23386: PUSH
23387: LD_INT 24
23389: PUSH
23390: LD_INT 25
23392: PUSH
23393: LD_INT 26
23395: PUSH
23396: LD_INT 27
23398: PUSH
23399: LD_INT 28
23401: PUSH
23402: LD_INT 30
23404: PUSH
23405: LD_INT 31
23407: PUSH
23408: LD_INT 32
23410: PUSH
23411: LD_INT 33
23413: PUSH
23414: LD_INT 34
23416: PUSH
23417: LD_INT 36
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 101
23455: PUSH
23456: LD_INT 102
23458: PUSH
23459: LD_INT 103
23461: PUSH
23462: LD_INT 104
23464: PUSH
23465: LD_INT 105
23467: PUSH
23468: LD_INT 106
23470: PUSH
23471: LD_INT 107
23473: PUSH
23474: LD_INT 108
23476: PUSH
23477: LD_INT 109
23479: PUSH
23480: LD_INT 110
23482: PUSH
23483: LD_INT 111
23485: PUSH
23486: LD_INT 112
23488: PUSH
23489: LD_INT 113
23491: PUSH
23492: LD_INT 114
23494: PUSH
23495: LD_INT 116
23497: PUSH
23498: LD_INT 117
23500: PUSH
23501: LD_INT 118
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: ST_TO_ADDR
23527: GO 24766
23529: LD_INT 14
23531: DOUBLE
23532: EQUAL
23533: IFTRUE 23537
23535: GO 23761
23537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23538: LD_ADDR_VAR 0 2
23542: PUSH
23543: LD_INT 1
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: LD_INT 3
23551: PUSH
23552: LD_INT 4
23554: PUSH
23555: LD_INT 5
23557: PUSH
23558: LD_INT 6
23560: PUSH
23561: LD_INT 7
23563: PUSH
23564: LD_INT 8
23566: PUSH
23567: LD_INT 9
23569: PUSH
23570: LD_INT 10
23572: PUSH
23573: LD_INT 11
23575: PUSH
23576: LD_INT 12
23578: PUSH
23579: LD_INT 13
23581: PUSH
23582: LD_INT 14
23584: PUSH
23585: LD_INT 15
23587: PUSH
23588: LD_INT 16
23590: PUSH
23591: LD_INT 17
23593: PUSH
23594: LD_INT 18
23596: PUSH
23597: LD_INT 19
23599: PUSH
23600: LD_INT 20
23602: PUSH
23603: LD_INT 21
23605: PUSH
23606: LD_INT 22
23608: PUSH
23609: LD_INT 23
23611: PUSH
23612: LD_INT 24
23614: PUSH
23615: LD_INT 25
23617: PUSH
23618: LD_INT 26
23620: PUSH
23621: LD_INT 27
23623: PUSH
23624: LD_INT 28
23626: PUSH
23627: LD_INT 29
23629: PUSH
23630: LD_INT 30
23632: PUSH
23633: LD_INT 31
23635: PUSH
23636: LD_INT 32
23638: PUSH
23639: LD_INT 33
23641: PUSH
23642: LD_INT 34
23644: PUSH
23645: LD_INT 36
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 101
23687: PUSH
23688: LD_INT 102
23690: PUSH
23691: LD_INT 103
23693: PUSH
23694: LD_INT 104
23696: PUSH
23697: LD_INT 105
23699: PUSH
23700: LD_INT 106
23702: PUSH
23703: LD_INT 107
23705: PUSH
23706: LD_INT 108
23708: PUSH
23709: LD_INT 109
23711: PUSH
23712: LD_INT 110
23714: PUSH
23715: LD_INT 111
23717: PUSH
23718: LD_INT 112
23720: PUSH
23721: LD_INT 113
23723: PUSH
23724: LD_INT 114
23726: PUSH
23727: LD_INT 116
23729: PUSH
23730: LD_INT 117
23732: PUSH
23733: LD_INT 118
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: ST_TO_ADDR
23759: GO 24766
23761: LD_INT 15
23763: DOUBLE
23764: EQUAL
23765: IFTRUE 23769
23767: GO 23993
23769: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23770: LD_ADDR_VAR 0 2
23774: PUSH
23775: LD_INT 1
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: LD_INT 3
23783: PUSH
23784: LD_INT 4
23786: PUSH
23787: LD_INT 5
23789: PUSH
23790: LD_INT 6
23792: PUSH
23793: LD_INT 7
23795: PUSH
23796: LD_INT 8
23798: PUSH
23799: LD_INT 9
23801: PUSH
23802: LD_INT 10
23804: PUSH
23805: LD_INT 11
23807: PUSH
23808: LD_INT 12
23810: PUSH
23811: LD_INT 13
23813: PUSH
23814: LD_INT 14
23816: PUSH
23817: LD_INT 15
23819: PUSH
23820: LD_INT 16
23822: PUSH
23823: LD_INT 17
23825: PUSH
23826: LD_INT 18
23828: PUSH
23829: LD_INT 19
23831: PUSH
23832: LD_INT 20
23834: PUSH
23835: LD_INT 21
23837: PUSH
23838: LD_INT 22
23840: PUSH
23841: LD_INT 23
23843: PUSH
23844: LD_INT 24
23846: PUSH
23847: LD_INT 25
23849: PUSH
23850: LD_INT 26
23852: PUSH
23853: LD_INT 27
23855: PUSH
23856: LD_INT 28
23858: PUSH
23859: LD_INT 29
23861: PUSH
23862: LD_INT 30
23864: PUSH
23865: LD_INT 31
23867: PUSH
23868: LD_INT 32
23870: PUSH
23871: LD_INT 33
23873: PUSH
23874: LD_INT 34
23876: PUSH
23877: LD_INT 36
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 101
23919: PUSH
23920: LD_INT 102
23922: PUSH
23923: LD_INT 103
23925: PUSH
23926: LD_INT 104
23928: PUSH
23929: LD_INT 105
23931: PUSH
23932: LD_INT 106
23934: PUSH
23935: LD_INT 107
23937: PUSH
23938: LD_INT 108
23940: PUSH
23941: LD_INT 109
23943: PUSH
23944: LD_INT 110
23946: PUSH
23947: LD_INT 111
23949: PUSH
23950: LD_INT 112
23952: PUSH
23953: LD_INT 113
23955: PUSH
23956: LD_INT 114
23958: PUSH
23959: LD_INT 116
23961: PUSH
23962: LD_INT 117
23964: PUSH
23965: LD_INT 118
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: ST_TO_ADDR
23991: GO 24766
23993: LD_INT 16
23995: DOUBLE
23996: EQUAL
23997: IFTRUE 24001
23999: GO 24137
24001: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24002: LD_ADDR_VAR 0 2
24006: PUSH
24007: LD_INT 2
24009: PUSH
24010: LD_INT 4
24012: PUSH
24013: LD_INT 5
24015: PUSH
24016: LD_INT 7
24018: PUSH
24019: LD_INT 11
24021: PUSH
24022: LD_INT 12
24024: PUSH
24025: LD_INT 15
24027: PUSH
24028: LD_INT 16
24030: PUSH
24031: LD_INT 20
24033: PUSH
24034: LD_INT 21
24036: PUSH
24037: LD_INT 22
24039: PUSH
24040: LD_INT 23
24042: PUSH
24043: LD_INT 25
24045: PUSH
24046: LD_INT 26
24048: PUSH
24049: LD_INT 30
24051: PUSH
24052: LD_INT 31
24054: PUSH
24055: LD_INT 32
24057: PUSH
24058: LD_INT 33
24060: PUSH
24061: LD_INT 34
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 101
24087: PUSH
24088: LD_INT 102
24090: PUSH
24091: LD_INT 103
24093: PUSH
24094: LD_INT 106
24096: PUSH
24097: LD_INT 108
24099: PUSH
24100: LD_INT 112
24102: PUSH
24103: LD_INT 113
24105: PUSH
24106: LD_INT 114
24108: PUSH
24109: LD_INT 116
24111: PUSH
24112: LD_INT 117
24114: PUSH
24115: LD_INT 118
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: ST_TO_ADDR
24135: GO 24766
24137: LD_INT 17
24139: DOUBLE
24140: EQUAL
24141: IFTRUE 24145
24143: GO 24369
24145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24146: LD_ADDR_VAR 0 2
24150: PUSH
24151: LD_INT 1
24153: PUSH
24154: LD_INT 2
24156: PUSH
24157: LD_INT 3
24159: PUSH
24160: LD_INT 4
24162: PUSH
24163: LD_INT 5
24165: PUSH
24166: LD_INT 6
24168: PUSH
24169: LD_INT 7
24171: PUSH
24172: LD_INT 8
24174: PUSH
24175: LD_INT 9
24177: PUSH
24178: LD_INT 10
24180: PUSH
24181: LD_INT 11
24183: PUSH
24184: LD_INT 12
24186: PUSH
24187: LD_INT 13
24189: PUSH
24190: LD_INT 14
24192: PUSH
24193: LD_INT 15
24195: PUSH
24196: LD_INT 16
24198: PUSH
24199: LD_INT 17
24201: PUSH
24202: LD_INT 18
24204: PUSH
24205: LD_INT 19
24207: PUSH
24208: LD_INT 20
24210: PUSH
24211: LD_INT 21
24213: PUSH
24214: LD_INT 22
24216: PUSH
24217: LD_INT 23
24219: PUSH
24220: LD_INT 24
24222: PUSH
24223: LD_INT 25
24225: PUSH
24226: LD_INT 26
24228: PUSH
24229: LD_INT 27
24231: PUSH
24232: LD_INT 28
24234: PUSH
24235: LD_INT 29
24237: PUSH
24238: LD_INT 30
24240: PUSH
24241: LD_INT 31
24243: PUSH
24244: LD_INT 32
24246: PUSH
24247: LD_INT 33
24249: PUSH
24250: LD_INT 34
24252: PUSH
24253: LD_INT 36
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 101
24295: PUSH
24296: LD_INT 102
24298: PUSH
24299: LD_INT 103
24301: PUSH
24302: LD_INT 104
24304: PUSH
24305: LD_INT 105
24307: PUSH
24308: LD_INT 106
24310: PUSH
24311: LD_INT 107
24313: PUSH
24314: LD_INT 108
24316: PUSH
24317: LD_INT 109
24319: PUSH
24320: LD_INT 110
24322: PUSH
24323: LD_INT 111
24325: PUSH
24326: LD_INT 112
24328: PUSH
24329: LD_INT 113
24331: PUSH
24332: LD_INT 114
24334: PUSH
24335: LD_INT 116
24337: PUSH
24338: LD_INT 117
24340: PUSH
24341: LD_INT 118
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: ST_TO_ADDR
24367: GO 24766
24369: LD_INT 18
24371: DOUBLE
24372: EQUAL
24373: IFTRUE 24377
24375: GO 24525
24377: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24378: LD_ADDR_VAR 0 2
24382: PUSH
24383: LD_INT 2
24385: PUSH
24386: LD_INT 4
24388: PUSH
24389: LD_INT 5
24391: PUSH
24392: LD_INT 7
24394: PUSH
24395: LD_INT 11
24397: PUSH
24398: LD_INT 12
24400: PUSH
24401: LD_INT 15
24403: PUSH
24404: LD_INT 16
24406: PUSH
24407: LD_INT 20
24409: PUSH
24410: LD_INT 21
24412: PUSH
24413: LD_INT 22
24415: PUSH
24416: LD_INT 23
24418: PUSH
24419: LD_INT 25
24421: PUSH
24422: LD_INT 26
24424: PUSH
24425: LD_INT 30
24427: PUSH
24428: LD_INT 31
24430: PUSH
24431: LD_INT 32
24433: PUSH
24434: LD_INT 33
24436: PUSH
24437: LD_INT 34
24439: PUSH
24440: LD_INT 35
24442: PUSH
24443: LD_INT 36
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 101
24471: PUSH
24472: LD_INT 102
24474: PUSH
24475: LD_INT 103
24477: PUSH
24478: LD_INT 106
24480: PUSH
24481: LD_INT 108
24483: PUSH
24484: LD_INT 112
24486: PUSH
24487: LD_INT 113
24489: PUSH
24490: LD_INT 114
24492: PUSH
24493: LD_INT 115
24495: PUSH
24496: LD_INT 116
24498: PUSH
24499: LD_INT 117
24501: PUSH
24502: LD_INT 118
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: ST_TO_ADDR
24523: GO 24766
24525: LD_INT 19
24527: DOUBLE
24528: EQUAL
24529: IFTRUE 24533
24531: GO 24765
24533: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24534: LD_ADDR_VAR 0 2
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: LD_INT 2
24544: PUSH
24545: LD_INT 3
24547: PUSH
24548: LD_INT 4
24550: PUSH
24551: LD_INT 5
24553: PUSH
24554: LD_INT 6
24556: PUSH
24557: LD_INT 7
24559: PUSH
24560: LD_INT 8
24562: PUSH
24563: LD_INT 9
24565: PUSH
24566: LD_INT 10
24568: PUSH
24569: LD_INT 11
24571: PUSH
24572: LD_INT 12
24574: PUSH
24575: LD_INT 13
24577: PUSH
24578: LD_INT 14
24580: PUSH
24581: LD_INT 15
24583: PUSH
24584: LD_INT 16
24586: PUSH
24587: LD_INT 17
24589: PUSH
24590: LD_INT 18
24592: PUSH
24593: LD_INT 19
24595: PUSH
24596: LD_INT 20
24598: PUSH
24599: LD_INT 21
24601: PUSH
24602: LD_INT 22
24604: PUSH
24605: LD_INT 23
24607: PUSH
24608: LD_INT 24
24610: PUSH
24611: LD_INT 25
24613: PUSH
24614: LD_INT 26
24616: PUSH
24617: LD_INT 27
24619: PUSH
24620: LD_INT 28
24622: PUSH
24623: LD_INT 29
24625: PUSH
24626: LD_INT 30
24628: PUSH
24629: LD_INT 31
24631: PUSH
24632: LD_INT 32
24634: PUSH
24635: LD_INT 33
24637: PUSH
24638: LD_INT 34
24640: PUSH
24641: LD_INT 35
24643: PUSH
24644: LD_INT 36
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 101
24687: PUSH
24688: LD_INT 102
24690: PUSH
24691: LD_INT 103
24693: PUSH
24694: LD_INT 104
24696: PUSH
24697: LD_INT 105
24699: PUSH
24700: LD_INT 106
24702: PUSH
24703: LD_INT 107
24705: PUSH
24706: LD_INT 108
24708: PUSH
24709: LD_INT 109
24711: PUSH
24712: LD_INT 110
24714: PUSH
24715: LD_INT 111
24717: PUSH
24718: LD_INT 112
24720: PUSH
24721: LD_INT 113
24723: PUSH
24724: LD_INT 114
24726: PUSH
24727: LD_INT 115
24729: PUSH
24730: LD_INT 116
24732: PUSH
24733: LD_INT 117
24735: PUSH
24736: LD_INT 118
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: ST_TO_ADDR
24763: GO 24766
24765: POP
// end else
24766: GO 24997
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24768: LD_ADDR_VAR 0 2
24772: PUSH
24773: LD_INT 1
24775: PUSH
24776: LD_INT 2
24778: PUSH
24779: LD_INT 3
24781: PUSH
24782: LD_INT 4
24784: PUSH
24785: LD_INT 5
24787: PUSH
24788: LD_INT 6
24790: PUSH
24791: LD_INT 7
24793: PUSH
24794: LD_INT 8
24796: PUSH
24797: LD_INT 9
24799: PUSH
24800: LD_INT 10
24802: PUSH
24803: LD_INT 11
24805: PUSH
24806: LD_INT 12
24808: PUSH
24809: LD_INT 13
24811: PUSH
24812: LD_INT 14
24814: PUSH
24815: LD_INT 15
24817: PUSH
24818: LD_INT 16
24820: PUSH
24821: LD_INT 17
24823: PUSH
24824: LD_INT 18
24826: PUSH
24827: LD_INT 19
24829: PUSH
24830: LD_INT 20
24832: PUSH
24833: LD_INT 21
24835: PUSH
24836: LD_INT 22
24838: PUSH
24839: LD_INT 23
24841: PUSH
24842: LD_INT 24
24844: PUSH
24845: LD_INT 25
24847: PUSH
24848: LD_INT 26
24850: PUSH
24851: LD_INT 27
24853: PUSH
24854: LD_INT 28
24856: PUSH
24857: LD_INT 29
24859: PUSH
24860: LD_INT 30
24862: PUSH
24863: LD_INT 31
24865: PUSH
24866: LD_INT 32
24868: PUSH
24869: LD_INT 33
24871: PUSH
24872: LD_INT 34
24874: PUSH
24875: LD_INT 35
24877: PUSH
24878: LD_INT 36
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 101
24921: PUSH
24922: LD_INT 102
24924: PUSH
24925: LD_INT 103
24927: PUSH
24928: LD_INT 104
24930: PUSH
24931: LD_INT 105
24933: PUSH
24934: LD_INT 106
24936: PUSH
24937: LD_INT 107
24939: PUSH
24940: LD_INT 108
24942: PUSH
24943: LD_INT 109
24945: PUSH
24946: LD_INT 110
24948: PUSH
24949: LD_INT 111
24951: PUSH
24952: LD_INT 112
24954: PUSH
24955: LD_INT 113
24957: PUSH
24958: LD_INT 114
24960: PUSH
24961: LD_INT 115
24963: PUSH
24964: LD_INT 116
24966: PUSH
24967: LD_INT 117
24969: PUSH
24970: LD_INT 118
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: ST_TO_ADDR
// if result then
24997: LD_VAR 0 2
25001: IFFALSE 25787
// begin normal :=  ;
25003: LD_ADDR_VAR 0 5
25007: PUSH
25008: LD_STRING 
25010: ST_TO_ADDR
// hardcore :=  ;
25011: LD_ADDR_VAR 0 6
25015: PUSH
25016: LD_STRING 
25018: ST_TO_ADDR
// active :=  ;
25019: LD_ADDR_VAR 0 7
25023: PUSH
25024: LD_STRING 
25026: ST_TO_ADDR
// for i = 1 to normalCounter do
25027: LD_ADDR_VAR 0 8
25031: PUSH
25032: DOUBLE
25033: LD_INT 1
25035: DEC
25036: ST_TO_ADDR
25037: LD_EXP 70
25041: PUSH
25042: FOR_TO
25043: IFFALSE 25144
// begin tmp := 0 ;
25045: LD_ADDR_VAR 0 3
25049: PUSH
25050: LD_STRING 0
25052: ST_TO_ADDR
// if result [ 1 ] then
25053: LD_VAR 0 2
25057: PUSH
25058: LD_INT 1
25060: ARRAY
25061: IFFALSE 25126
// if result [ 1 ] [ 1 ] = i then
25063: LD_VAR 0 2
25067: PUSH
25068: LD_INT 1
25070: ARRAY
25071: PUSH
25072: LD_INT 1
25074: ARRAY
25075: PUSH
25076: LD_VAR 0 8
25080: EQUAL
25081: IFFALSE 25126
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25083: LD_ADDR_VAR 0 2
25087: PUSH
25088: LD_VAR 0 2
25092: PPUSH
25093: LD_INT 1
25095: PPUSH
25096: LD_VAR 0 2
25100: PUSH
25101: LD_INT 1
25103: ARRAY
25104: PPUSH
25105: LD_INT 1
25107: PPUSH
25108: CALL_OW 3
25112: PPUSH
25113: CALL_OW 1
25117: ST_TO_ADDR
// tmp := 1 ;
25118: LD_ADDR_VAR 0 3
25122: PUSH
25123: LD_STRING 1
25125: ST_TO_ADDR
// end ; normal := normal & tmp ;
25126: LD_ADDR_VAR 0 5
25130: PUSH
25131: LD_VAR 0 5
25135: PUSH
25136: LD_VAR 0 3
25140: STR
25141: ST_TO_ADDR
// end ;
25142: GO 25042
25144: POP
25145: POP
// for i = 1 to hardcoreCounter do
25146: LD_ADDR_VAR 0 8
25150: PUSH
25151: DOUBLE
25152: LD_INT 1
25154: DEC
25155: ST_TO_ADDR
25156: LD_EXP 71
25160: PUSH
25161: FOR_TO
25162: IFFALSE 25267
// begin tmp := 0 ;
25164: LD_ADDR_VAR 0 3
25168: PUSH
25169: LD_STRING 0
25171: ST_TO_ADDR
// if result [ 2 ] then
25172: LD_VAR 0 2
25176: PUSH
25177: LD_INT 2
25179: ARRAY
25180: IFFALSE 25249
// if result [ 2 ] [ 1 ] = 100 + i then
25182: LD_VAR 0 2
25186: PUSH
25187: LD_INT 2
25189: ARRAY
25190: PUSH
25191: LD_INT 1
25193: ARRAY
25194: PUSH
25195: LD_INT 100
25197: PUSH
25198: LD_VAR 0 8
25202: PLUS
25203: EQUAL
25204: IFFALSE 25249
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25206: LD_ADDR_VAR 0 2
25210: PUSH
25211: LD_VAR 0 2
25215: PPUSH
25216: LD_INT 2
25218: PPUSH
25219: LD_VAR 0 2
25223: PUSH
25224: LD_INT 2
25226: ARRAY
25227: PPUSH
25228: LD_INT 1
25230: PPUSH
25231: CALL_OW 3
25235: PPUSH
25236: CALL_OW 1
25240: ST_TO_ADDR
// tmp := 1 ;
25241: LD_ADDR_VAR 0 3
25245: PUSH
25246: LD_STRING 1
25248: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25249: LD_ADDR_VAR 0 6
25253: PUSH
25254: LD_VAR 0 6
25258: PUSH
25259: LD_VAR 0 3
25263: STR
25264: ST_TO_ADDR
// end ;
25265: GO 25161
25267: POP
25268: POP
// if isGameLoad then
25269: LD_VAR 0 1
25273: IFFALSE 25748
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25275: LD_ADDR_VAR 0 4
25279: PUSH
25280: LD_EXP 74
25284: PUSH
25285: LD_EXP 73
25289: PUSH
25290: LD_EXP 75
25294: PUSH
25295: LD_EXP 72
25299: PUSH
25300: LD_EXP 76
25304: PUSH
25305: LD_EXP 77
25309: PUSH
25310: LD_EXP 78
25314: PUSH
25315: LD_EXP 79
25319: PUSH
25320: LD_EXP 80
25324: PUSH
25325: LD_EXP 81
25329: PUSH
25330: LD_EXP 82
25334: PUSH
25335: LD_EXP 83
25339: PUSH
25340: LD_EXP 84
25344: PUSH
25345: LD_EXP 85
25349: PUSH
25350: LD_EXP 93
25354: PUSH
25355: LD_EXP 94
25359: PUSH
25360: LD_EXP 95
25364: PUSH
25365: LD_EXP 96
25369: PUSH
25370: LD_EXP 98
25374: PUSH
25375: LD_EXP 99
25379: PUSH
25380: LD_EXP 100
25384: PUSH
25385: LD_EXP 103
25389: PUSH
25390: LD_EXP 105
25394: PUSH
25395: LD_EXP 106
25399: PUSH
25400: LD_EXP 107
25404: PUSH
25405: LD_EXP 109
25409: PUSH
25410: LD_EXP 110
25414: PUSH
25415: LD_EXP 113
25419: PUSH
25420: LD_EXP 114
25424: PUSH
25425: LD_EXP 115
25429: PUSH
25430: LD_EXP 116
25434: PUSH
25435: LD_EXP 117
25439: PUSH
25440: LD_EXP 118
25444: PUSH
25445: LD_EXP 119
25449: PUSH
25450: LD_EXP 120
25454: PUSH
25455: LD_EXP 121
25459: PUSH
25460: LD_EXP 86
25464: PUSH
25465: LD_EXP 87
25469: PUSH
25470: LD_EXP 90
25474: PUSH
25475: LD_EXP 91
25479: PUSH
25480: LD_EXP 92
25484: PUSH
25485: LD_EXP 88
25489: PUSH
25490: LD_EXP 89
25494: PUSH
25495: LD_EXP 97
25499: PUSH
25500: LD_EXP 101
25504: PUSH
25505: LD_EXP 102
25509: PUSH
25510: LD_EXP 104
25514: PUSH
25515: LD_EXP 108
25519: PUSH
25520: LD_EXP 111
25524: PUSH
25525: LD_EXP 112
25529: PUSH
25530: LD_EXP 122
25534: PUSH
25535: LD_EXP 123
25539: PUSH
25540: LD_EXP 124
25544: PUSH
25545: LD_EXP 125
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: ST_TO_ADDR
// tmp :=  ;
25606: LD_ADDR_VAR 0 3
25610: PUSH
25611: LD_STRING 
25613: ST_TO_ADDR
// for i = 1 to normalCounter do
25614: LD_ADDR_VAR 0 8
25618: PUSH
25619: DOUBLE
25620: LD_INT 1
25622: DEC
25623: ST_TO_ADDR
25624: LD_EXP 70
25628: PUSH
25629: FOR_TO
25630: IFFALSE 25666
// begin if flags [ i ] then
25632: LD_VAR 0 4
25636: PUSH
25637: LD_VAR 0 8
25641: ARRAY
25642: IFFALSE 25664
// tmp := tmp & i & ; ;
25644: LD_ADDR_VAR 0 3
25648: PUSH
25649: LD_VAR 0 3
25653: PUSH
25654: LD_VAR 0 8
25658: STR
25659: PUSH
25660: LD_STRING ;
25662: STR
25663: ST_TO_ADDR
// end ;
25664: GO 25629
25666: POP
25667: POP
// for i = 1 to hardcoreCounter do
25668: LD_ADDR_VAR 0 8
25672: PUSH
25673: DOUBLE
25674: LD_INT 1
25676: DEC
25677: ST_TO_ADDR
25678: LD_EXP 71
25682: PUSH
25683: FOR_TO
25684: IFFALSE 25730
// begin if flags [ normalCounter + i ] then
25686: LD_VAR 0 4
25690: PUSH
25691: LD_EXP 70
25695: PUSH
25696: LD_VAR 0 8
25700: PLUS
25701: ARRAY
25702: IFFALSE 25728
// tmp := tmp & ( 100 + i ) & ; ;
25704: LD_ADDR_VAR 0 3
25708: PUSH
25709: LD_VAR 0 3
25713: PUSH
25714: LD_INT 100
25716: PUSH
25717: LD_VAR 0 8
25721: PLUS
25722: STR
25723: PUSH
25724: LD_STRING ;
25726: STR
25727: ST_TO_ADDR
// end ;
25728: GO 25683
25730: POP
25731: POP
// if tmp then
25732: LD_VAR 0 3
25736: IFFALSE 25748
// active := tmp ;
25738: LD_ADDR_VAR 0 7
25742: PUSH
25743: LD_VAR 0 3
25747: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25748: LD_STRING getStreamItemsFromMission("
25750: PUSH
25751: LD_VAR 0 5
25755: STR
25756: PUSH
25757: LD_STRING ","
25759: STR
25760: PUSH
25761: LD_VAR 0 6
25765: STR
25766: PUSH
25767: LD_STRING ","
25769: STR
25770: PUSH
25771: LD_VAR 0 7
25775: STR
25776: PUSH
25777: LD_STRING ")
25779: STR
25780: PPUSH
25781: CALL_OW 559
// end else
25785: GO 25794
// ToLua ( getStreamItemsFromMission("","","") ) ;
25787: LD_STRING getStreamItemsFromMission("","","")
25789: PPUSH
25790: CALL_OW 559
// end ;
25794: LD_VAR 0 2
25798: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25799: LD_EXP 69
25803: PUSH
25804: LD_EXP 74
25808: AND
25809: IFFALSE 25933
25811: GO 25813
25813: DISABLE
25814: LD_INT 0
25816: PPUSH
25817: PPUSH
// begin enable ;
25818: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25819: LD_ADDR_VAR 0 2
25823: PUSH
25824: LD_INT 22
25826: PUSH
25827: LD_OWVAR 2
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 2
25838: PUSH
25839: LD_INT 34
25841: PUSH
25842: LD_INT 7
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 34
25851: PUSH
25852: LD_INT 45
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 34
25861: PUSH
25862: LD_INT 28
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 34
25871: PUSH
25872: LD_INT 47
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PPUSH
25890: CALL_OW 69
25894: ST_TO_ADDR
// if not tmp then
25895: LD_VAR 0 2
25899: NOT
25900: IFFALSE 25904
// exit ;
25902: GO 25933
// for i in tmp do
25904: LD_ADDR_VAR 0 1
25908: PUSH
25909: LD_VAR 0 2
25913: PUSH
25914: FOR_IN
25915: IFFALSE 25931
// begin SetLives ( i , 0 ) ;
25917: LD_VAR 0 1
25921: PPUSH
25922: LD_INT 0
25924: PPUSH
25925: CALL_OW 234
// end ;
25929: GO 25914
25931: POP
25932: POP
// end ;
25933: PPOPN 2
25935: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25936: LD_EXP 69
25940: PUSH
25941: LD_EXP 75
25945: AND
25946: IFFALSE 26030
25948: GO 25950
25950: DISABLE
25951: LD_INT 0
25953: PPUSH
25954: PPUSH
// begin enable ;
25955: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25956: LD_ADDR_VAR 0 2
25960: PUSH
25961: LD_INT 22
25963: PUSH
25964: LD_OWVAR 2
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 32
25975: PUSH
25976: LD_INT 3
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PPUSH
25987: CALL_OW 69
25991: ST_TO_ADDR
// if not tmp then
25992: LD_VAR 0 2
25996: NOT
25997: IFFALSE 26001
// exit ;
25999: GO 26030
// for i in tmp do
26001: LD_ADDR_VAR 0 1
26005: PUSH
26006: LD_VAR 0 2
26010: PUSH
26011: FOR_IN
26012: IFFALSE 26028
// begin SetLives ( i , 0 ) ;
26014: LD_VAR 0 1
26018: PPUSH
26019: LD_INT 0
26021: PPUSH
26022: CALL_OW 234
// end ;
26026: GO 26011
26028: POP
26029: POP
// end ;
26030: PPOPN 2
26032: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26033: LD_EXP 69
26037: PUSH
26038: LD_EXP 72
26042: AND
26043: IFFALSE 26136
26045: GO 26047
26047: DISABLE
26048: LD_INT 0
26050: PPUSH
// begin enable ;
26051: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26052: LD_ADDR_VAR 0 1
26056: PUSH
26057: LD_INT 22
26059: PUSH
26060: LD_OWVAR 2
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 2
26071: PUSH
26072: LD_INT 25
26074: PUSH
26075: LD_INT 5
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 25
26084: PUSH
26085: LD_INT 9
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 25
26094: PUSH
26095: LD_INT 8
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PPUSH
26112: CALL_OW 69
26116: PUSH
26117: FOR_IN
26118: IFFALSE 26134
// begin SetClass ( i , 1 ) ;
26120: LD_VAR 0 1
26124: PPUSH
26125: LD_INT 1
26127: PPUSH
26128: CALL_OW 336
// end ;
26132: GO 26117
26134: POP
26135: POP
// end ;
26136: PPOPN 1
26138: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26139: LD_EXP 69
26143: PUSH
26144: LD_EXP 73
26148: AND
26149: PUSH
26150: LD_OWVAR 65
26154: PUSH
26155: LD_INT 7
26157: LESS
26158: AND
26159: IFFALSE 26173
26161: GO 26163
26163: DISABLE
// begin enable ;
26164: ENABLE
// game_speed := 7 ;
26165: LD_ADDR_OWVAR 65
26169: PUSH
26170: LD_INT 7
26172: ST_TO_ADDR
// end ;
26173: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26174: LD_EXP 69
26178: PUSH
26179: LD_EXP 76
26183: AND
26184: IFFALSE 26386
26186: GO 26188
26188: DISABLE
26189: LD_INT 0
26191: PPUSH
26192: PPUSH
26193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26194: LD_ADDR_VAR 0 3
26198: PUSH
26199: LD_INT 81
26201: PUSH
26202: LD_OWVAR 2
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 21
26213: PUSH
26214: LD_INT 1
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PPUSH
26225: CALL_OW 69
26229: ST_TO_ADDR
// if not tmp then
26230: LD_VAR 0 3
26234: NOT
26235: IFFALSE 26239
// exit ;
26237: GO 26386
// if tmp > 5 then
26239: LD_VAR 0 3
26243: PUSH
26244: LD_INT 5
26246: GREATER
26247: IFFALSE 26259
// k := 5 else
26249: LD_ADDR_VAR 0 2
26253: PUSH
26254: LD_INT 5
26256: ST_TO_ADDR
26257: GO 26269
// k := tmp ;
26259: LD_ADDR_VAR 0 2
26263: PUSH
26264: LD_VAR 0 3
26268: ST_TO_ADDR
// for i := 1 to k do
26269: LD_ADDR_VAR 0 1
26273: PUSH
26274: DOUBLE
26275: LD_INT 1
26277: DEC
26278: ST_TO_ADDR
26279: LD_VAR 0 2
26283: PUSH
26284: FOR_TO
26285: IFFALSE 26384
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26287: LD_VAR 0 3
26291: PUSH
26292: LD_VAR 0 1
26296: ARRAY
26297: PPUSH
26298: LD_VAR 0 1
26302: PUSH
26303: LD_INT 4
26305: MOD
26306: PUSH
26307: LD_INT 1
26309: PLUS
26310: PPUSH
26311: CALL_OW 259
26315: PUSH
26316: LD_INT 10
26318: LESS
26319: IFFALSE 26382
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26321: LD_VAR 0 3
26325: PUSH
26326: LD_VAR 0 1
26330: ARRAY
26331: PPUSH
26332: LD_VAR 0 1
26336: PUSH
26337: LD_INT 4
26339: MOD
26340: PUSH
26341: LD_INT 1
26343: PLUS
26344: PPUSH
26345: LD_VAR 0 3
26349: PUSH
26350: LD_VAR 0 1
26354: ARRAY
26355: PPUSH
26356: LD_VAR 0 1
26360: PUSH
26361: LD_INT 4
26363: MOD
26364: PUSH
26365: LD_INT 1
26367: PLUS
26368: PPUSH
26369: CALL_OW 259
26373: PUSH
26374: LD_INT 1
26376: PLUS
26377: PPUSH
26378: CALL_OW 237
26382: GO 26284
26384: POP
26385: POP
// end ;
26386: PPOPN 3
26388: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26389: LD_EXP 69
26393: PUSH
26394: LD_EXP 77
26398: AND
26399: IFFALSE 26419
26401: GO 26403
26403: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26404: LD_INT 4
26406: PPUSH
26407: LD_OWVAR 2
26411: PPUSH
26412: LD_INT 0
26414: PPUSH
26415: CALL_OW 324
26419: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26420: LD_EXP 69
26424: PUSH
26425: LD_EXP 106
26429: AND
26430: IFFALSE 26450
26432: GO 26434
26434: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26435: LD_INT 19
26437: PPUSH
26438: LD_OWVAR 2
26442: PPUSH
26443: LD_INT 0
26445: PPUSH
26446: CALL_OW 324
26450: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26451: LD_EXP 69
26455: PUSH
26456: LD_EXP 78
26460: AND
26461: IFFALSE 26563
26463: GO 26465
26465: DISABLE
26466: LD_INT 0
26468: PPUSH
26469: PPUSH
// begin enable ;
26470: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26471: LD_ADDR_VAR 0 2
26475: PUSH
26476: LD_INT 22
26478: PUSH
26479: LD_OWVAR 2
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 2
26490: PUSH
26491: LD_INT 34
26493: PUSH
26494: LD_INT 11
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 34
26503: PUSH
26504: LD_INT 30
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: LIST
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PPUSH
26520: CALL_OW 69
26524: ST_TO_ADDR
// if not tmp then
26525: LD_VAR 0 2
26529: NOT
26530: IFFALSE 26534
// exit ;
26532: GO 26563
// for i in tmp do
26534: LD_ADDR_VAR 0 1
26538: PUSH
26539: LD_VAR 0 2
26543: PUSH
26544: FOR_IN
26545: IFFALSE 26561
// begin SetLives ( i , 0 ) ;
26547: LD_VAR 0 1
26551: PPUSH
26552: LD_INT 0
26554: PPUSH
26555: CALL_OW 234
// end ;
26559: GO 26544
26561: POP
26562: POP
// end ;
26563: PPOPN 2
26565: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26566: LD_EXP 69
26570: PUSH
26571: LD_EXP 79
26575: AND
26576: IFFALSE 26596
26578: GO 26580
26580: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26581: LD_INT 32
26583: PPUSH
26584: LD_OWVAR 2
26588: PPUSH
26589: LD_INT 0
26591: PPUSH
26592: CALL_OW 324
26596: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26597: LD_EXP 69
26601: PUSH
26602: LD_EXP 80
26606: AND
26607: IFFALSE 26788
26609: GO 26611
26611: DISABLE
26612: LD_INT 0
26614: PPUSH
26615: PPUSH
26616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26617: LD_ADDR_VAR 0 2
26621: PUSH
26622: LD_INT 22
26624: PUSH
26625: LD_OWVAR 2
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 33
26636: PUSH
26637: LD_INT 3
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PPUSH
26648: CALL_OW 69
26652: ST_TO_ADDR
// if not tmp then
26653: LD_VAR 0 2
26657: NOT
26658: IFFALSE 26662
// exit ;
26660: GO 26788
// side := 0 ;
26662: LD_ADDR_VAR 0 3
26666: PUSH
26667: LD_INT 0
26669: ST_TO_ADDR
// for i := 1 to 8 do
26670: LD_ADDR_VAR 0 1
26674: PUSH
26675: DOUBLE
26676: LD_INT 1
26678: DEC
26679: ST_TO_ADDR
26680: LD_INT 8
26682: PUSH
26683: FOR_TO
26684: IFFALSE 26732
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26686: LD_OWVAR 2
26690: PUSH
26691: LD_VAR 0 1
26695: NONEQUAL
26696: PUSH
26697: LD_OWVAR 2
26701: PPUSH
26702: LD_VAR 0 1
26706: PPUSH
26707: CALL_OW 81
26711: PUSH
26712: LD_INT 2
26714: EQUAL
26715: AND
26716: IFFALSE 26730
// begin side := i ;
26718: LD_ADDR_VAR 0 3
26722: PUSH
26723: LD_VAR 0 1
26727: ST_TO_ADDR
// break ;
26728: GO 26732
// end ;
26730: GO 26683
26732: POP
26733: POP
// if not side then
26734: LD_VAR 0 3
26738: NOT
26739: IFFALSE 26743
// exit ;
26741: GO 26788
// for i := 1 to tmp do
26743: LD_ADDR_VAR 0 1
26747: PUSH
26748: DOUBLE
26749: LD_INT 1
26751: DEC
26752: ST_TO_ADDR
26753: LD_VAR 0 2
26757: PUSH
26758: FOR_TO
26759: IFFALSE 26786
// if Prob ( 60 ) then
26761: LD_INT 60
26763: PPUSH
26764: CALL_OW 13
26768: IFFALSE 26784
// SetSide ( i , side ) ;
26770: LD_VAR 0 1
26774: PPUSH
26775: LD_VAR 0 3
26779: PPUSH
26780: CALL_OW 235
26784: GO 26758
26786: POP
26787: POP
// end ;
26788: PPOPN 3
26790: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26791: LD_EXP 69
26795: PUSH
26796: LD_EXP 82
26800: AND
26801: IFFALSE 26920
26803: GO 26805
26805: DISABLE
26806: LD_INT 0
26808: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26809: LD_ADDR_VAR 0 1
26813: PUSH
26814: LD_INT 22
26816: PUSH
26817: LD_OWVAR 2
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 21
26828: PUSH
26829: LD_INT 1
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 3
26838: PUSH
26839: LD_INT 23
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: LIST
26857: PPUSH
26858: CALL_OW 69
26862: PUSH
26863: FOR_IN
26864: IFFALSE 26918
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26866: LD_VAR 0 1
26870: PPUSH
26871: CALL_OW 257
26875: PUSH
26876: LD_INT 1
26878: PUSH
26879: LD_INT 2
26881: PUSH
26882: LD_INT 3
26884: PUSH
26885: LD_INT 4
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: IN
26894: IFFALSE 26916
// SetClass ( un , rand ( 1 , 4 ) ) ;
26896: LD_VAR 0 1
26900: PPUSH
26901: LD_INT 1
26903: PPUSH
26904: LD_INT 4
26906: PPUSH
26907: CALL_OW 12
26911: PPUSH
26912: CALL_OW 336
26916: GO 26863
26918: POP
26919: POP
// end ;
26920: PPOPN 1
26922: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26923: LD_EXP 69
26927: PUSH
26928: LD_EXP 81
26932: AND
26933: IFFALSE 27012
26935: GO 26937
26937: DISABLE
26938: LD_INT 0
26940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26941: LD_ADDR_VAR 0 1
26945: PUSH
26946: LD_INT 22
26948: PUSH
26949: LD_OWVAR 2
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 21
26960: PUSH
26961: LD_INT 3
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PPUSH
26972: CALL_OW 69
26976: ST_TO_ADDR
// if not tmp then
26977: LD_VAR 0 1
26981: NOT
26982: IFFALSE 26986
// exit ;
26984: GO 27012
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26986: LD_VAR 0 1
26990: PUSH
26991: LD_INT 1
26993: PPUSH
26994: LD_VAR 0 1
26998: PPUSH
26999: CALL_OW 12
27003: ARRAY
27004: PPUSH
27005: LD_INT 100
27007: PPUSH
27008: CALL_OW 234
// end ;
27012: PPOPN 1
27014: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27015: LD_EXP 69
27019: PUSH
27020: LD_EXP 83
27024: AND
27025: IFFALSE 27123
27027: GO 27029
27029: DISABLE
27030: LD_INT 0
27032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27033: LD_ADDR_VAR 0 1
27037: PUSH
27038: LD_INT 22
27040: PUSH
27041: LD_OWVAR 2
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 21
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PPUSH
27064: CALL_OW 69
27068: ST_TO_ADDR
// if not tmp then
27069: LD_VAR 0 1
27073: NOT
27074: IFFALSE 27078
// exit ;
27076: GO 27123
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27078: LD_VAR 0 1
27082: PUSH
27083: LD_INT 1
27085: PPUSH
27086: LD_VAR 0 1
27090: PPUSH
27091: CALL_OW 12
27095: ARRAY
27096: PPUSH
27097: LD_INT 1
27099: PPUSH
27100: LD_INT 4
27102: PPUSH
27103: CALL_OW 12
27107: PPUSH
27108: LD_INT 3000
27110: PPUSH
27111: LD_INT 9000
27113: PPUSH
27114: CALL_OW 12
27118: PPUSH
27119: CALL_OW 492
// end ;
27123: PPOPN 1
27125: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27126: LD_EXP 69
27130: PUSH
27131: LD_EXP 84
27135: AND
27136: IFFALSE 27156
27138: GO 27140
27140: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27141: LD_INT 1
27143: PPUSH
27144: LD_OWVAR 2
27148: PPUSH
27149: LD_INT 0
27151: PPUSH
27152: CALL_OW 324
27156: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27157: LD_EXP 69
27161: PUSH
27162: LD_EXP 85
27166: AND
27167: IFFALSE 27250
27169: GO 27171
27171: DISABLE
27172: LD_INT 0
27174: PPUSH
27175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27176: LD_ADDR_VAR 0 2
27180: PUSH
27181: LD_INT 22
27183: PUSH
27184: LD_OWVAR 2
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 21
27195: PUSH
27196: LD_INT 3
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PPUSH
27207: CALL_OW 69
27211: ST_TO_ADDR
// if not tmp then
27212: LD_VAR 0 2
27216: NOT
27217: IFFALSE 27221
// exit ;
27219: GO 27250
// for i in tmp do
27221: LD_ADDR_VAR 0 1
27225: PUSH
27226: LD_VAR 0 2
27230: PUSH
27231: FOR_IN
27232: IFFALSE 27248
// SetBLevel ( i , 10 ) ;
27234: LD_VAR 0 1
27238: PPUSH
27239: LD_INT 10
27241: PPUSH
27242: CALL_OW 241
27246: GO 27231
27248: POP
27249: POP
// end ;
27250: PPOPN 2
27252: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27253: LD_EXP 69
27257: PUSH
27258: LD_EXP 86
27262: AND
27263: IFFALSE 27374
27265: GO 27267
27267: DISABLE
27268: LD_INT 0
27270: PPUSH
27271: PPUSH
27272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27273: LD_ADDR_VAR 0 3
27277: PUSH
27278: LD_INT 22
27280: PUSH
27281: LD_OWVAR 2
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 25
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PPUSH
27304: CALL_OW 69
27308: ST_TO_ADDR
// if not tmp then
27309: LD_VAR 0 3
27313: NOT
27314: IFFALSE 27318
// exit ;
27316: GO 27374
// un := tmp [ rand ( 1 , tmp ) ] ;
27318: LD_ADDR_VAR 0 2
27322: PUSH
27323: LD_VAR 0 3
27327: PUSH
27328: LD_INT 1
27330: PPUSH
27331: LD_VAR 0 3
27335: PPUSH
27336: CALL_OW 12
27340: ARRAY
27341: ST_TO_ADDR
// if Crawls ( un ) then
27342: LD_VAR 0 2
27346: PPUSH
27347: CALL_OW 318
27351: IFFALSE 27362
// ComWalk ( un ) ;
27353: LD_VAR 0 2
27357: PPUSH
27358: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27362: LD_VAR 0 2
27366: PPUSH
27367: LD_INT 5
27369: PPUSH
27370: CALL_OW 336
// end ;
27374: PPOPN 3
27376: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27377: LD_EXP 69
27381: PUSH
27382: LD_EXP 87
27386: AND
27387: PUSH
27388: LD_OWVAR 67
27392: PUSH
27393: LD_INT 4
27395: LESS
27396: AND
27397: IFFALSE 27416
27399: GO 27401
27401: DISABLE
// begin Difficulty := Difficulty + 1 ;
27402: LD_ADDR_OWVAR 67
27406: PUSH
27407: LD_OWVAR 67
27411: PUSH
27412: LD_INT 1
27414: PLUS
27415: ST_TO_ADDR
// end ;
27416: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27417: LD_EXP 69
27421: PUSH
27422: LD_EXP 88
27426: AND
27427: IFFALSE 27530
27429: GO 27431
27431: DISABLE
27432: LD_INT 0
27434: PPUSH
// begin for i := 1 to 5 do
27435: LD_ADDR_VAR 0 1
27439: PUSH
27440: DOUBLE
27441: LD_INT 1
27443: DEC
27444: ST_TO_ADDR
27445: LD_INT 5
27447: PUSH
27448: FOR_TO
27449: IFFALSE 27528
// begin uc_nation := nation_nature ;
27451: LD_ADDR_OWVAR 21
27455: PUSH
27456: LD_INT 0
27458: ST_TO_ADDR
// uc_side := 0 ;
27459: LD_ADDR_OWVAR 20
27463: PUSH
27464: LD_INT 0
27466: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27467: LD_ADDR_OWVAR 29
27471: PUSH
27472: LD_INT 12
27474: PUSH
27475: LD_INT 12
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: ST_TO_ADDR
// hc_agressivity := 20 ;
27482: LD_ADDR_OWVAR 35
27486: PUSH
27487: LD_INT 20
27489: ST_TO_ADDR
// hc_class := class_tiger ;
27490: LD_ADDR_OWVAR 28
27494: PUSH
27495: LD_INT 14
27497: ST_TO_ADDR
// hc_gallery :=  ;
27498: LD_ADDR_OWVAR 33
27502: PUSH
27503: LD_STRING 
27505: ST_TO_ADDR
// hc_name :=  ;
27506: LD_ADDR_OWVAR 26
27510: PUSH
27511: LD_STRING 
27513: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27514: CALL_OW 44
27518: PPUSH
27519: LD_INT 0
27521: PPUSH
27522: CALL_OW 51
// end ;
27526: GO 27448
27528: POP
27529: POP
// end ;
27530: PPOPN 1
27532: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27533: LD_EXP 69
27537: PUSH
27538: LD_EXP 89
27542: AND
27543: IFFALSE 27552
27545: GO 27547
27547: DISABLE
// StreamSibBomb ;
27548: CALL 27553 0 0
27552: END
// export function StreamSibBomb ; var i , x , y ; begin
27553: LD_INT 0
27555: PPUSH
27556: PPUSH
27557: PPUSH
27558: PPUSH
// result := false ;
27559: LD_ADDR_VAR 0 1
27563: PUSH
27564: LD_INT 0
27566: ST_TO_ADDR
// for i := 1 to 16 do
27567: LD_ADDR_VAR 0 2
27571: PUSH
27572: DOUBLE
27573: LD_INT 1
27575: DEC
27576: ST_TO_ADDR
27577: LD_INT 16
27579: PUSH
27580: FOR_TO
27581: IFFALSE 27780
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27583: LD_ADDR_VAR 0 3
27587: PUSH
27588: LD_INT 10
27590: PUSH
27591: LD_INT 20
27593: PUSH
27594: LD_INT 30
27596: PUSH
27597: LD_INT 40
27599: PUSH
27600: LD_INT 50
27602: PUSH
27603: LD_INT 60
27605: PUSH
27606: LD_INT 70
27608: PUSH
27609: LD_INT 80
27611: PUSH
27612: LD_INT 90
27614: PUSH
27615: LD_INT 100
27617: PUSH
27618: LD_INT 110
27620: PUSH
27621: LD_INT 120
27623: PUSH
27624: LD_INT 130
27626: PUSH
27627: LD_INT 140
27629: PUSH
27630: LD_INT 150
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: PPUSH
27653: LD_INT 15
27655: PPUSH
27656: CALL_OW 12
27660: ARRAY
27661: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27662: LD_ADDR_VAR 0 4
27666: PUSH
27667: LD_INT 10
27669: PUSH
27670: LD_INT 20
27672: PUSH
27673: LD_INT 30
27675: PUSH
27676: LD_INT 40
27678: PUSH
27679: LD_INT 50
27681: PUSH
27682: LD_INT 60
27684: PUSH
27685: LD_INT 70
27687: PUSH
27688: LD_INT 80
27690: PUSH
27691: LD_INT 90
27693: PUSH
27694: LD_INT 100
27696: PUSH
27697: LD_INT 110
27699: PUSH
27700: LD_INT 120
27702: PUSH
27703: LD_INT 130
27705: PUSH
27706: LD_INT 140
27708: PUSH
27709: LD_INT 150
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 1
27731: PPUSH
27732: LD_INT 15
27734: PPUSH
27735: CALL_OW 12
27739: ARRAY
27740: ST_TO_ADDR
// if ValidHex ( x , y ) then
27741: LD_VAR 0 3
27745: PPUSH
27746: LD_VAR 0 4
27750: PPUSH
27751: CALL_OW 488
27755: IFFALSE 27778
// begin result := [ x , y ] ;
27757: LD_ADDR_VAR 0 1
27761: PUSH
27762: LD_VAR 0 3
27766: PUSH
27767: LD_VAR 0 4
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: ST_TO_ADDR
// break ;
27776: GO 27780
// end ; end ;
27778: GO 27580
27780: POP
27781: POP
// if result then
27782: LD_VAR 0 1
27786: IFFALSE 27846
// begin ToLua ( playSibBomb() ) ;
27788: LD_STRING playSibBomb()
27790: PPUSH
27791: CALL_OW 559
// wait ( 0 0$14 ) ;
27795: LD_INT 490
27797: PPUSH
27798: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27802: LD_VAR 0 1
27806: PUSH
27807: LD_INT 1
27809: ARRAY
27810: PPUSH
27811: LD_VAR 0 1
27815: PUSH
27816: LD_INT 2
27818: ARRAY
27819: PPUSH
27820: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27824: LD_VAR 0 1
27828: PUSH
27829: LD_INT 1
27831: ARRAY
27832: PPUSH
27833: LD_VAR 0 1
27837: PUSH
27838: LD_INT 2
27840: ARRAY
27841: PPUSH
27842: CALL_OW 429
// end ; end ;
27846: LD_VAR 0 1
27850: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27851: LD_EXP 69
27855: PUSH
27856: LD_EXP 91
27860: AND
27861: IFFALSE 27873
27863: GO 27865
27865: DISABLE
// YouLost (  ) ;
27866: LD_STRING 
27868: PPUSH
27869: CALL_OW 104
27873: END
// every 0 0$1 trigger StreamModeActive and sFog do
27874: LD_EXP 69
27878: PUSH
27879: LD_EXP 90
27883: AND
27884: IFFALSE 27898
27886: GO 27888
27888: DISABLE
// FogOff ( your_side ) ;
27889: LD_OWVAR 2
27893: PPUSH
27894: CALL_OW 344
27898: END
// every 0 0$1 trigger StreamModeActive and sSun do
27899: LD_EXP 69
27903: PUSH
27904: LD_EXP 92
27908: AND
27909: IFFALSE 27937
27911: GO 27913
27913: DISABLE
// begin solar_recharge_percent := 0 ;
27914: LD_ADDR_OWVAR 79
27918: PUSH
27919: LD_INT 0
27921: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27922: LD_INT 10500
27924: PPUSH
27925: CALL_OW 67
// solar_recharge_percent := 100 ;
27929: LD_ADDR_OWVAR 79
27933: PUSH
27934: LD_INT 100
27936: ST_TO_ADDR
// end ;
27937: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27938: LD_EXP 69
27942: PUSH
27943: LD_EXP 93
27947: AND
27948: IFFALSE 28187
27950: GO 27952
27952: DISABLE
27953: LD_INT 0
27955: PPUSH
27956: PPUSH
27957: PPUSH
// begin tmp := [ ] ;
27958: LD_ADDR_VAR 0 3
27962: PUSH
27963: EMPTY
27964: ST_TO_ADDR
// for i := 1 to 6 do
27965: LD_ADDR_VAR 0 1
27969: PUSH
27970: DOUBLE
27971: LD_INT 1
27973: DEC
27974: ST_TO_ADDR
27975: LD_INT 6
27977: PUSH
27978: FOR_TO
27979: IFFALSE 28084
// begin uc_nation := nation_nature ;
27981: LD_ADDR_OWVAR 21
27985: PUSH
27986: LD_INT 0
27988: ST_TO_ADDR
// uc_side := 0 ;
27989: LD_ADDR_OWVAR 20
27993: PUSH
27994: LD_INT 0
27996: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27997: LD_ADDR_OWVAR 29
28001: PUSH
28002: LD_INT 12
28004: PUSH
28005: LD_INT 12
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: ST_TO_ADDR
// hc_agressivity := 20 ;
28012: LD_ADDR_OWVAR 35
28016: PUSH
28017: LD_INT 20
28019: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28020: LD_ADDR_OWVAR 28
28024: PUSH
28025: LD_INT 17
28027: ST_TO_ADDR
// hc_gallery :=  ;
28028: LD_ADDR_OWVAR 33
28032: PUSH
28033: LD_STRING 
28035: ST_TO_ADDR
// hc_name :=  ;
28036: LD_ADDR_OWVAR 26
28040: PUSH
28041: LD_STRING 
28043: ST_TO_ADDR
// un := CreateHuman ;
28044: LD_ADDR_VAR 0 2
28048: PUSH
28049: CALL_OW 44
28053: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28054: LD_VAR 0 2
28058: PPUSH
28059: LD_INT 1
28061: PPUSH
28062: CALL_OW 51
// tmp := tmp ^ un ;
28066: LD_ADDR_VAR 0 3
28070: PUSH
28071: LD_VAR 0 3
28075: PUSH
28076: LD_VAR 0 2
28080: ADD
28081: ST_TO_ADDR
// end ;
28082: GO 27978
28084: POP
28085: POP
// repeat wait ( 0 0$1 ) ;
28086: LD_INT 35
28088: PPUSH
28089: CALL_OW 67
// for un in tmp do
28093: LD_ADDR_VAR 0 2
28097: PUSH
28098: LD_VAR 0 3
28102: PUSH
28103: FOR_IN
28104: IFFALSE 28178
// begin if IsDead ( un ) then
28106: LD_VAR 0 2
28110: PPUSH
28111: CALL_OW 301
28115: IFFALSE 28135
// begin tmp := tmp diff un ;
28117: LD_ADDR_VAR 0 3
28121: PUSH
28122: LD_VAR 0 3
28126: PUSH
28127: LD_VAR 0 2
28131: DIFF
28132: ST_TO_ADDR
// continue ;
28133: GO 28103
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28135: LD_VAR 0 2
28139: PPUSH
28140: LD_INT 3
28142: PUSH
28143: LD_INT 22
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PPUSH
28157: CALL_OW 69
28161: PPUSH
28162: LD_VAR 0 2
28166: PPUSH
28167: CALL_OW 74
28171: PPUSH
28172: CALL_OW 115
// end ;
28176: GO 28103
28178: POP
28179: POP
// until not tmp ;
28180: LD_VAR 0 3
28184: NOT
28185: IFFALSE 28086
// end ;
28187: PPOPN 3
28189: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28190: LD_EXP 69
28194: PUSH
28195: LD_EXP 94
28199: AND
28200: IFFALSE 28254
28202: GO 28204
28204: DISABLE
// begin ToLua ( displayTroll(); ) ;
28205: LD_STRING displayTroll();
28207: PPUSH
28208: CALL_OW 559
// wait ( 3 3$00 ) ;
28212: LD_INT 6300
28214: PPUSH
28215: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28219: LD_STRING hideTroll();
28221: PPUSH
28222: CALL_OW 559
// wait ( 1 1$00 ) ;
28226: LD_INT 2100
28228: PPUSH
28229: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28233: LD_STRING displayTroll();
28235: PPUSH
28236: CALL_OW 559
// wait ( 1 1$00 ) ;
28240: LD_INT 2100
28242: PPUSH
28243: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28247: LD_STRING hideTroll();
28249: PPUSH
28250: CALL_OW 559
// end ;
28254: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28255: LD_EXP 69
28259: PUSH
28260: LD_EXP 95
28264: AND
28265: IFFALSE 28328
28267: GO 28269
28269: DISABLE
28270: LD_INT 0
28272: PPUSH
// begin p := 0 ;
28273: LD_ADDR_VAR 0 1
28277: PUSH
28278: LD_INT 0
28280: ST_TO_ADDR
// repeat game_speed := 1 ;
28281: LD_ADDR_OWVAR 65
28285: PUSH
28286: LD_INT 1
28288: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28289: LD_INT 35
28291: PPUSH
28292: CALL_OW 67
// p := p + 1 ;
28296: LD_ADDR_VAR 0 1
28300: PUSH
28301: LD_VAR 0 1
28305: PUSH
28306: LD_INT 1
28308: PLUS
28309: ST_TO_ADDR
// until p >= 60 ;
28310: LD_VAR 0 1
28314: PUSH
28315: LD_INT 60
28317: GREATEREQUAL
28318: IFFALSE 28281
// game_speed := 4 ;
28320: LD_ADDR_OWVAR 65
28324: PUSH
28325: LD_INT 4
28327: ST_TO_ADDR
// end ;
28328: PPOPN 1
28330: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28331: LD_EXP 69
28335: PUSH
28336: LD_EXP 96
28340: AND
28341: IFFALSE 28487
28343: GO 28345
28345: DISABLE
28346: LD_INT 0
28348: PPUSH
28349: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28350: LD_ADDR_VAR 0 1
28354: PUSH
28355: LD_INT 22
28357: PUSH
28358: LD_OWVAR 2
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 2
28369: PUSH
28370: LD_INT 30
28372: PUSH
28373: LD_INT 0
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 30
28382: PUSH
28383: LD_INT 1
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: LIST
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PPUSH
28399: CALL_OW 69
28403: ST_TO_ADDR
// if not depot then
28404: LD_VAR 0 1
28408: NOT
28409: IFFALSE 28413
// exit ;
28411: GO 28487
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28413: LD_ADDR_VAR 0 2
28417: PUSH
28418: LD_VAR 0 1
28422: PUSH
28423: LD_INT 1
28425: PPUSH
28426: LD_VAR 0 1
28430: PPUSH
28431: CALL_OW 12
28435: ARRAY
28436: PPUSH
28437: CALL_OW 274
28441: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28442: LD_VAR 0 2
28446: PPUSH
28447: LD_INT 1
28449: PPUSH
28450: LD_INT 0
28452: PPUSH
28453: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28457: LD_VAR 0 2
28461: PPUSH
28462: LD_INT 2
28464: PPUSH
28465: LD_INT 0
28467: PPUSH
28468: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28472: LD_VAR 0 2
28476: PPUSH
28477: LD_INT 3
28479: PPUSH
28480: LD_INT 0
28482: PPUSH
28483: CALL_OW 277
// end ;
28487: PPOPN 2
28489: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28490: LD_EXP 69
28494: PUSH
28495: LD_EXP 97
28499: AND
28500: IFFALSE 28597
28502: GO 28504
28504: DISABLE
28505: LD_INT 0
28507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28508: LD_ADDR_VAR 0 1
28512: PUSH
28513: LD_INT 22
28515: PUSH
28516: LD_OWVAR 2
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 21
28527: PUSH
28528: LD_INT 1
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 3
28537: PUSH
28538: LD_INT 23
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: LIST
28556: PPUSH
28557: CALL_OW 69
28561: ST_TO_ADDR
// if not tmp then
28562: LD_VAR 0 1
28566: NOT
28567: IFFALSE 28571
// exit ;
28569: GO 28597
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28571: LD_VAR 0 1
28575: PUSH
28576: LD_INT 1
28578: PPUSH
28579: LD_VAR 0 1
28583: PPUSH
28584: CALL_OW 12
28588: ARRAY
28589: PPUSH
28590: LD_INT 200
28592: PPUSH
28593: CALL_OW 234
// end ;
28597: PPOPN 1
28599: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28600: LD_EXP 69
28604: PUSH
28605: LD_EXP 98
28609: AND
28610: IFFALSE 28689
28612: GO 28614
28614: DISABLE
28615: LD_INT 0
28617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28618: LD_ADDR_VAR 0 1
28622: PUSH
28623: LD_INT 22
28625: PUSH
28626: LD_OWVAR 2
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 21
28637: PUSH
28638: LD_INT 2
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PPUSH
28649: CALL_OW 69
28653: ST_TO_ADDR
// if not tmp then
28654: LD_VAR 0 1
28658: NOT
28659: IFFALSE 28663
// exit ;
28661: GO 28689
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28663: LD_VAR 0 1
28667: PUSH
28668: LD_INT 1
28670: PPUSH
28671: LD_VAR 0 1
28675: PPUSH
28676: CALL_OW 12
28680: ARRAY
28681: PPUSH
28682: LD_INT 60
28684: PPUSH
28685: CALL_OW 234
// end ;
28689: PPOPN 1
28691: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28692: LD_EXP 69
28696: PUSH
28697: LD_EXP 99
28701: AND
28702: IFFALSE 28801
28704: GO 28706
28706: DISABLE
28707: LD_INT 0
28709: PPUSH
28710: PPUSH
// begin enable ;
28711: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28712: LD_ADDR_VAR 0 1
28716: PUSH
28717: LD_INT 22
28719: PUSH
28720: LD_OWVAR 2
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 61
28731: PUSH
28732: EMPTY
28733: LIST
28734: PUSH
28735: LD_INT 33
28737: PUSH
28738: LD_INT 2
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: LIST
28749: PPUSH
28750: CALL_OW 69
28754: ST_TO_ADDR
// if not tmp then
28755: LD_VAR 0 1
28759: NOT
28760: IFFALSE 28764
// exit ;
28762: GO 28801
// for i in tmp do
28764: LD_ADDR_VAR 0 2
28768: PUSH
28769: LD_VAR 0 1
28773: PUSH
28774: FOR_IN
28775: IFFALSE 28799
// if IsControledBy ( i ) then
28777: LD_VAR 0 2
28781: PPUSH
28782: CALL_OW 312
28786: IFFALSE 28797
// ComUnlink ( i ) ;
28788: LD_VAR 0 2
28792: PPUSH
28793: CALL_OW 136
28797: GO 28774
28799: POP
28800: POP
// end ;
28801: PPOPN 2
28803: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28804: LD_EXP 69
28808: PUSH
28809: LD_EXP 100
28813: AND
28814: IFFALSE 28954
28816: GO 28818
28818: DISABLE
28819: LD_INT 0
28821: PPUSH
28822: PPUSH
// begin ToLua ( displayPowell(); ) ;
28823: LD_STRING displayPowell();
28825: PPUSH
28826: CALL_OW 559
// uc_side := 0 ;
28830: LD_ADDR_OWVAR 20
28834: PUSH
28835: LD_INT 0
28837: ST_TO_ADDR
// uc_nation := 2 ;
28838: LD_ADDR_OWVAR 21
28842: PUSH
28843: LD_INT 2
28845: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28846: LD_ADDR_OWVAR 37
28850: PUSH
28851: LD_INT 14
28853: ST_TO_ADDR
// vc_engine := engine_siberite ;
28854: LD_ADDR_OWVAR 39
28858: PUSH
28859: LD_INT 3
28861: ST_TO_ADDR
// vc_control := control_apeman ;
28862: LD_ADDR_OWVAR 38
28866: PUSH
28867: LD_INT 5
28869: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28870: LD_ADDR_OWVAR 40
28874: PUSH
28875: LD_INT 29
28877: ST_TO_ADDR
// un := CreateVehicle ;
28878: LD_ADDR_VAR 0 2
28882: PUSH
28883: CALL_OW 45
28887: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28888: LD_VAR 0 2
28892: PPUSH
28893: LD_INT 1
28895: PPUSH
28896: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28900: LD_INT 35
28902: PPUSH
28903: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28907: LD_VAR 0 2
28911: PPUSH
28912: LD_INT 22
28914: PUSH
28915: LD_OWVAR 2
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PPUSH
28924: CALL_OW 69
28928: PPUSH
28929: LD_VAR 0 2
28933: PPUSH
28934: CALL_OW 74
28938: PPUSH
28939: CALL_OW 115
// until IsDead ( un ) ;
28943: LD_VAR 0 2
28947: PPUSH
28948: CALL_OW 301
28952: IFFALSE 28900
// end ;
28954: PPOPN 2
28956: END
// every 0 0$1 trigger StreamModeActive and sStu do
28957: LD_EXP 69
28961: PUSH
28962: LD_EXP 108
28966: AND
28967: IFFALSE 28983
28969: GO 28971
28971: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28972: LD_STRING displayStucuk();
28974: PPUSH
28975: CALL_OW 559
// ResetFog ;
28979: CALL_OW 335
// end ;
28983: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28984: LD_EXP 69
28988: PUSH
28989: LD_EXP 101
28993: AND
28994: IFFALSE 29135
28996: GO 28998
28998: DISABLE
28999: LD_INT 0
29001: PPUSH
29002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29003: LD_ADDR_VAR 0 2
29007: PUSH
29008: LD_INT 22
29010: PUSH
29011: LD_OWVAR 2
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 21
29022: PUSH
29023: LD_INT 1
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PPUSH
29034: CALL_OW 69
29038: ST_TO_ADDR
// if not tmp then
29039: LD_VAR 0 2
29043: NOT
29044: IFFALSE 29048
// exit ;
29046: GO 29135
// un := tmp [ rand ( 1 , tmp ) ] ;
29048: LD_ADDR_VAR 0 1
29052: PUSH
29053: LD_VAR 0 2
29057: PUSH
29058: LD_INT 1
29060: PPUSH
29061: LD_VAR 0 2
29065: PPUSH
29066: CALL_OW 12
29070: ARRAY
29071: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29072: LD_VAR 0 1
29076: PPUSH
29077: LD_INT 0
29079: PPUSH
29080: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29084: LD_VAR 0 1
29088: PPUSH
29089: LD_OWVAR 3
29093: PUSH
29094: LD_VAR 0 1
29098: DIFF
29099: PPUSH
29100: LD_VAR 0 1
29104: PPUSH
29105: CALL_OW 74
29109: PPUSH
29110: CALL_OW 115
// wait ( 0 0$20 ) ;
29114: LD_INT 700
29116: PPUSH
29117: CALL_OW 67
// SetSide ( un , your_side ) ;
29121: LD_VAR 0 1
29125: PPUSH
29126: LD_OWVAR 2
29130: PPUSH
29131: CALL_OW 235
// end ;
29135: PPOPN 2
29137: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29138: LD_EXP 69
29142: PUSH
29143: LD_EXP 102
29147: AND
29148: IFFALSE 29254
29150: GO 29152
29152: DISABLE
29153: LD_INT 0
29155: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29156: LD_ADDR_VAR 0 1
29160: PUSH
29161: LD_INT 22
29163: PUSH
29164: LD_OWVAR 2
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 2
29175: PUSH
29176: LD_INT 30
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 30
29188: PUSH
29189: LD_INT 1
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: LIST
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PPUSH
29205: CALL_OW 69
29209: ST_TO_ADDR
// if not depot then
29210: LD_VAR 0 1
29214: NOT
29215: IFFALSE 29219
// exit ;
29217: GO 29254
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29219: LD_VAR 0 1
29223: PUSH
29224: LD_INT 1
29226: ARRAY
29227: PPUSH
29228: CALL_OW 250
29232: PPUSH
29233: LD_VAR 0 1
29237: PUSH
29238: LD_INT 1
29240: ARRAY
29241: PPUSH
29242: CALL_OW 251
29246: PPUSH
29247: LD_INT 70
29249: PPUSH
29250: CALL_OW 495
// end ;
29254: PPOPN 1
29256: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29257: LD_EXP 69
29261: PUSH
29262: LD_EXP 103
29266: AND
29267: IFFALSE 29478
29269: GO 29271
29271: DISABLE
29272: LD_INT 0
29274: PPUSH
29275: PPUSH
29276: PPUSH
29277: PPUSH
29278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29279: LD_ADDR_VAR 0 5
29283: PUSH
29284: LD_INT 22
29286: PUSH
29287: LD_OWVAR 2
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 21
29298: PUSH
29299: LD_INT 1
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PPUSH
29310: CALL_OW 69
29314: ST_TO_ADDR
// if not tmp then
29315: LD_VAR 0 5
29319: NOT
29320: IFFALSE 29324
// exit ;
29322: GO 29478
// for i in tmp do
29324: LD_ADDR_VAR 0 1
29328: PUSH
29329: LD_VAR 0 5
29333: PUSH
29334: FOR_IN
29335: IFFALSE 29476
// begin d := rand ( 0 , 5 ) ;
29337: LD_ADDR_VAR 0 4
29341: PUSH
29342: LD_INT 0
29344: PPUSH
29345: LD_INT 5
29347: PPUSH
29348: CALL_OW 12
29352: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29353: LD_ADDR_VAR 0 2
29357: PUSH
29358: LD_VAR 0 1
29362: PPUSH
29363: CALL_OW 250
29367: PPUSH
29368: LD_VAR 0 4
29372: PPUSH
29373: LD_INT 3
29375: PPUSH
29376: LD_INT 12
29378: PPUSH
29379: CALL_OW 12
29383: PPUSH
29384: CALL_OW 272
29388: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29389: LD_ADDR_VAR 0 3
29393: PUSH
29394: LD_VAR 0 1
29398: PPUSH
29399: CALL_OW 251
29403: PPUSH
29404: LD_VAR 0 4
29408: PPUSH
29409: LD_INT 3
29411: PPUSH
29412: LD_INT 12
29414: PPUSH
29415: CALL_OW 12
29419: PPUSH
29420: CALL_OW 273
29424: ST_TO_ADDR
// if ValidHex ( x , y ) then
29425: LD_VAR 0 2
29429: PPUSH
29430: LD_VAR 0 3
29434: PPUSH
29435: CALL_OW 488
29439: IFFALSE 29474
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29441: LD_VAR 0 1
29445: PPUSH
29446: LD_VAR 0 2
29450: PPUSH
29451: LD_VAR 0 3
29455: PPUSH
29456: LD_INT 3
29458: PPUSH
29459: LD_INT 6
29461: PPUSH
29462: CALL_OW 12
29466: PPUSH
29467: LD_INT 1
29469: PPUSH
29470: CALL_OW 483
// end ;
29474: GO 29334
29476: POP
29477: POP
// end ;
29478: PPOPN 5
29480: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29481: LD_EXP 69
29485: PUSH
29486: LD_EXP 104
29490: AND
29491: IFFALSE 29585
29493: GO 29495
29495: DISABLE
29496: LD_INT 0
29498: PPUSH
29499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29500: LD_ADDR_VAR 0 2
29504: PUSH
29505: LD_INT 22
29507: PUSH
29508: LD_OWVAR 2
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 32
29519: PUSH
29520: LD_INT 1
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 21
29529: PUSH
29530: LD_INT 2
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: LIST
29541: PPUSH
29542: CALL_OW 69
29546: ST_TO_ADDR
// if not tmp then
29547: LD_VAR 0 2
29551: NOT
29552: IFFALSE 29556
// exit ;
29554: GO 29585
// for i in tmp do
29556: LD_ADDR_VAR 0 1
29560: PUSH
29561: LD_VAR 0 2
29565: PUSH
29566: FOR_IN
29567: IFFALSE 29583
// SetFuel ( i , 0 ) ;
29569: LD_VAR 0 1
29573: PPUSH
29574: LD_INT 0
29576: PPUSH
29577: CALL_OW 240
29581: GO 29566
29583: POP
29584: POP
// end ;
29585: PPOPN 2
29587: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29588: LD_EXP 69
29592: PUSH
29593: LD_EXP 105
29597: AND
29598: IFFALSE 29664
29600: GO 29602
29602: DISABLE
29603: LD_INT 0
29605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29606: LD_ADDR_VAR 0 1
29610: PUSH
29611: LD_INT 22
29613: PUSH
29614: LD_OWVAR 2
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 30
29625: PUSH
29626: LD_INT 29
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PPUSH
29637: CALL_OW 69
29641: ST_TO_ADDR
// if not tmp then
29642: LD_VAR 0 1
29646: NOT
29647: IFFALSE 29651
// exit ;
29649: GO 29664
// DestroyUnit ( tmp [ 1 ] ) ;
29651: LD_VAR 0 1
29655: PUSH
29656: LD_INT 1
29658: ARRAY
29659: PPUSH
29660: CALL_OW 65
// end ;
29664: PPOPN 1
29666: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29667: LD_EXP 69
29671: PUSH
29672: LD_EXP 107
29676: AND
29677: IFFALSE 29806
29679: GO 29681
29681: DISABLE
29682: LD_INT 0
29684: PPUSH
// begin uc_side := 0 ;
29685: LD_ADDR_OWVAR 20
29689: PUSH
29690: LD_INT 0
29692: ST_TO_ADDR
// uc_nation := nation_arabian ;
29693: LD_ADDR_OWVAR 21
29697: PUSH
29698: LD_INT 2
29700: ST_TO_ADDR
// hc_gallery :=  ;
29701: LD_ADDR_OWVAR 33
29705: PUSH
29706: LD_STRING 
29708: ST_TO_ADDR
// hc_name :=  ;
29709: LD_ADDR_OWVAR 26
29713: PUSH
29714: LD_STRING 
29716: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29717: LD_INT 1
29719: PPUSH
29720: LD_INT 11
29722: PPUSH
29723: LD_INT 10
29725: PPUSH
29726: CALL_OW 380
// un := CreateHuman ;
29730: LD_ADDR_VAR 0 1
29734: PUSH
29735: CALL_OW 44
29739: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29740: LD_VAR 0 1
29744: PPUSH
29745: LD_INT 1
29747: PPUSH
29748: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29752: LD_INT 35
29754: PPUSH
29755: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29759: LD_VAR 0 1
29763: PPUSH
29764: LD_INT 22
29766: PUSH
29767: LD_OWVAR 2
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PPUSH
29776: CALL_OW 69
29780: PPUSH
29781: LD_VAR 0 1
29785: PPUSH
29786: CALL_OW 74
29790: PPUSH
29791: CALL_OW 115
// until IsDead ( un ) ;
29795: LD_VAR 0 1
29799: PPUSH
29800: CALL_OW 301
29804: IFFALSE 29752
// end ;
29806: PPOPN 1
29808: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29809: LD_EXP 69
29813: PUSH
29814: LD_EXP 109
29818: AND
29819: IFFALSE 29831
29821: GO 29823
29823: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29824: LD_STRING earthquake(getX(game), 0, 32)
29826: PPUSH
29827: CALL_OW 559
29831: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29832: LD_EXP 69
29836: PUSH
29837: LD_EXP 110
29841: AND
29842: IFFALSE 29933
29844: GO 29846
29846: DISABLE
29847: LD_INT 0
29849: PPUSH
// begin enable ;
29850: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29851: LD_ADDR_VAR 0 1
29855: PUSH
29856: LD_INT 22
29858: PUSH
29859: LD_OWVAR 2
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 21
29870: PUSH
29871: LD_INT 2
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 33
29880: PUSH
29881: LD_INT 3
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: LIST
29892: PPUSH
29893: CALL_OW 69
29897: ST_TO_ADDR
// if not tmp then
29898: LD_VAR 0 1
29902: NOT
29903: IFFALSE 29907
// exit ;
29905: GO 29933
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29907: LD_VAR 0 1
29911: PUSH
29912: LD_INT 1
29914: PPUSH
29915: LD_VAR 0 1
29919: PPUSH
29920: CALL_OW 12
29924: ARRAY
29925: PPUSH
29926: LD_INT 1
29928: PPUSH
29929: CALL_OW 234
// end ;
29933: PPOPN 1
29935: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29936: LD_EXP 69
29940: PUSH
29941: LD_EXP 111
29945: AND
29946: IFFALSE 30087
29948: GO 29950
29950: DISABLE
29951: LD_INT 0
29953: PPUSH
29954: PPUSH
29955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29956: LD_ADDR_VAR 0 3
29960: PUSH
29961: LD_INT 22
29963: PUSH
29964: LD_OWVAR 2
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 25
29975: PUSH
29976: LD_INT 1
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PPUSH
29987: CALL_OW 69
29991: ST_TO_ADDR
// if not tmp then
29992: LD_VAR 0 3
29996: NOT
29997: IFFALSE 30001
// exit ;
29999: GO 30087
// un := tmp [ rand ( 1 , tmp ) ] ;
30001: LD_ADDR_VAR 0 2
30005: PUSH
30006: LD_VAR 0 3
30010: PUSH
30011: LD_INT 1
30013: PPUSH
30014: LD_VAR 0 3
30018: PPUSH
30019: CALL_OW 12
30023: ARRAY
30024: ST_TO_ADDR
// if Crawls ( un ) then
30025: LD_VAR 0 2
30029: PPUSH
30030: CALL_OW 318
30034: IFFALSE 30045
// ComWalk ( un ) ;
30036: LD_VAR 0 2
30040: PPUSH
30041: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30045: LD_VAR 0 2
30049: PPUSH
30050: LD_INT 9
30052: PPUSH
30053: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30057: LD_INT 28
30059: PPUSH
30060: LD_OWVAR 2
30064: PPUSH
30065: LD_INT 2
30067: PPUSH
30068: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30072: LD_INT 29
30074: PPUSH
30075: LD_OWVAR 2
30079: PPUSH
30080: LD_INT 2
30082: PPUSH
30083: CALL_OW 322
// end ;
30087: PPOPN 3
30089: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30090: LD_EXP 69
30094: PUSH
30095: LD_EXP 112
30099: AND
30100: IFFALSE 30211
30102: GO 30104
30104: DISABLE
30105: LD_INT 0
30107: PPUSH
30108: PPUSH
30109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30110: LD_ADDR_VAR 0 3
30114: PUSH
30115: LD_INT 22
30117: PUSH
30118: LD_OWVAR 2
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 25
30129: PUSH
30130: LD_INT 1
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PPUSH
30141: CALL_OW 69
30145: ST_TO_ADDR
// if not tmp then
30146: LD_VAR 0 3
30150: NOT
30151: IFFALSE 30155
// exit ;
30153: GO 30211
// un := tmp [ rand ( 1 , tmp ) ] ;
30155: LD_ADDR_VAR 0 2
30159: PUSH
30160: LD_VAR 0 3
30164: PUSH
30165: LD_INT 1
30167: PPUSH
30168: LD_VAR 0 3
30172: PPUSH
30173: CALL_OW 12
30177: ARRAY
30178: ST_TO_ADDR
// if Crawls ( un ) then
30179: LD_VAR 0 2
30183: PPUSH
30184: CALL_OW 318
30188: IFFALSE 30199
// ComWalk ( un ) ;
30190: LD_VAR 0 2
30194: PPUSH
30195: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30199: LD_VAR 0 2
30203: PPUSH
30204: LD_INT 8
30206: PPUSH
30207: CALL_OW 336
// end ;
30211: PPOPN 3
30213: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30214: LD_EXP 69
30218: PUSH
30219: LD_EXP 113
30223: AND
30224: IFFALSE 30368
30226: GO 30228
30228: DISABLE
30229: LD_INT 0
30231: PPUSH
30232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30233: LD_ADDR_VAR 0 2
30237: PUSH
30238: LD_INT 22
30240: PUSH
30241: LD_OWVAR 2
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 21
30252: PUSH
30253: LD_INT 2
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 2
30262: PUSH
30263: LD_INT 34
30265: PUSH
30266: LD_INT 12
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 34
30275: PUSH
30276: LD_INT 51
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 34
30285: PUSH
30286: LD_INT 32
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: LIST
30303: PPUSH
30304: CALL_OW 69
30308: ST_TO_ADDR
// if not tmp then
30309: LD_VAR 0 2
30313: NOT
30314: IFFALSE 30318
// exit ;
30316: GO 30368
// for i in tmp do
30318: LD_ADDR_VAR 0 1
30322: PUSH
30323: LD_VAR 0 2
30327: PUSH
30328: FOR_IN
30329: IFFALSE 30366
// if GetCargo ( i , mat_artifact ) = 0 then
30331: LD_VAR 0 1
30335: PPUSH
30336: LD_INT 4
30338: PPUSH
30339: CALL_OW 289
30343: PUSH
30344: LD_INT 0
30346: EQUAL
30347: IFFALSE 30364
// SetCargo ( i , mat_siberit , 100 ) ;
30349: LD_VAR 0 1
30353: PPUSH
30354: LD_INT 3
30356: PPUSH
30357: LD_INT 100
30359: PPUSH
30360: CALL_OW 290
30364: GO 30328
30366: POP
30367: POP
// end ;
30368: PPOPN 2
30370: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30371: LD_EXP 69
30375: PUSH
30376: LD_EXP 114
30380: AND
30381: IFFALSE 30564
30383: GO 30385
30385: DISABLE
30386: LD_INT 0
30388: PPUSH
30389: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30390: LD_ADDR_VAR 0 2
30394: PUSH
30395: LD_INT 22
30397: PUSH
30398: LD_OWVAR 2
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PPUSH
30407: CALL_OW 69
30411: ST_TO_ADDR
// if not tmp then
30412: LD_VAR 0 2
30416: NOT
30417: IFFALSE 30421
// exit ;
30419: GO 30564
// for i := 1 to 2 do
30421: LD_ADDR_VAR 0 1
30425: PUSH
30426: DOUBLE
30427: LD_INT 1
30429: DEC
30430: ST_TO_ADDR
30431: LD_INT 2
30433: PUSH
30434: FOR_TO
30435: IFFALSE 30562
// begin uc_side := your_side ;
30437: LD_ADDR_OWVAR 20
30441: PUSH
30442: LD_OWVAR 2
30446: ST_TO_ADDR
// uc_nation := nation_american ;
30447: LD_ADDR_OWVAR 21
30451: PUSH
30452: LD_INT 1
30454: ST_TO_ADDR
// vc_chassis := us_morphling ;
30455: LD_ADDR_OWVAR 37
30459: PUSH
30460: LD_INT 5
30462: ST_TO_ADDR
// vc_engine := engine_siberite ;
30463: LD_ADDR_OWVAR 39
30467: PUSH
30468: LD_INT 3
30470: ST_TO_ADDR
// vc_control := control_computer ;
30471: LD_ADDR_OWVAR 38
30475: PUSH
30476: LD_INT 3
30478: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30479: LD_ADDR_OWVAR 40
30483: PUSH
30484: LD_INT 10
30486: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30487: LD_VAR 0 2
30491: PUSH
30492: LD_INT 1
30494: ARRAY
30495: PPUSH
30496: CALL_OW 310
30500: NOT
30501: IFFALSE 30548
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30503: CALL_OW 45
30507: PPUSH
30508: LD_VAR 0 2
30512: PUSH
30513: LD_INT 1
30515: ARRAY
30516: PPUSH
30517: CALL_OW 250
30521: PPUSH
30522: LD_VAR 0 2
30526: PUSH
30527: LD_INT 1
30529: ARRAY
30530: PPUSH
30531: CALL_OW 251
30535: PPUSH
30536: LD_INT 12
30538: PPUSH
30539: LD_INT 1
30541: PPUSH
30542: CALL_OW 50
30546: GO 30560
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30548: CALL_OW 45
30552: PPUSH
30553: LD_INT 1
30555: PPUSH
30556: CALL_OW 51
// end ;
30560: GO 30434
30562: POP
30563: POP
// end ;
30564: PPOPN 2
30566: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30567: LD_EXP 69
30571: PUSH
30572: LD_EXP 115
30576: AND
30577: IFFALSE 30799
30579: GO 30581
30581: DISABLE
30582: LD_INT 0
30584: PPUSH
30585: PPUSH
30586: PPUSH
30587: PPUSH
30588: PPUSH
30589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30590: LD_ADDR_VAR 0 6
30594: PUSH
30595: LD_INT 22
30597: PUSH
30598: LD_OWVAR 2
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 21
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 3
30619: PUSH
30620: LD_INT 23
30622: PUSH
30623: LD_INT 0
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: LIST
30638: PPUSH
30639: CALL_OW 69
30643: ST_TO_ADDR
// if not tmp then
30644: LD_VAR 0 6
30648: NOT
30649: IFFALSE 30653
// exit ;
30651: GO 30799
// s1 := rand ( 1 , 4 ) ;
30653: LD_ADDR_VAR 0 2
30657: PUSH
30658: LD_INT 1
30660: PPUSH
30661: LD_INT 4
30663: PPUSH
30664: CALL_OW 12
30668: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30669: LD_ADDR_VAR 0 4
30673: PUSH
30674: LD_VAR 0 6
30678: PUSH
30679: LD_INT 1
30681: ARRAY
30682: PPUSH
30683: LD_VAR 0 2
30687: PPUSH
30688: CALL_OW 259
30692: ST_TO_ADDR
// if s1 = 1 then
30693: LD_VAR 0 2
30697: PUSH
30698: LD_INT 1
30700: EQUAL
30701: IFFALSE 30721
// s2 := rand ( 2 , 4 ) else
30703: LD_ADDR_VAR 0 3
30707: PUSH
30708: LD_INT 2
30710: PPUSH
30711: LD_INT 4
30713: PPUSH
30714: CALL_OW 12
30718: ST_TO_ADDR
30719: GO 30729
// s2 := 1 ;
30721: LD_ADDR_VAR 0 3
30725: PUSH
30726: LD_INT 1
30728: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30729: LD_ADDR_VAR 0 5
30733: PUSH
30734: LD_VAR 0 6
30738: PUSH
30739: LD_INT 1
30741: ARRAY
30742: PPUSH
30743: LD_VAR 0 3
30747: PPUSH
30748: CALL_OW 259
30752: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30753: LD_VAR 0 6
30757: PUSH
30758: LD_INT 1
30760: ARRAY
30761: PPUSH
30762: LD_VAR 0 2
30766: PPUSH
30767: LD_VAR 0 5
30771: PPUSH
30772: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30776: LD_VAR 0 6
30780: PUSH
30781: LD_INT 1
30783: ARRAY
30784: PPUSH
30785: LD_VAR 0 3
30789: PPUSH
30790: LD_VAR 0 4
30794: PPUSH
30795: CALL_OW 237
// end ;
30799: PPOPN 6
30801: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30802: LD_EXP 69
30806: PUSH
30807: LD_EXP 116
30811: AND
30812: IFFALSE 30891
30814: GO 30816
30816: DISABLE
30817: LD_INT 0
30819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30820: LD_ADDR_VAR 0 1
30824: PUSH
30825: LD_INT 22
30827: PUSH
30828: LD_OWVAR 2
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 30
30839: PUSH
30840: LD_INT 3
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PPUSH
30851: CALL_OW 69
30855: ST_TO_ADDR
// if not tmp then
30856: LD_VAR 0 1
30860: NOT
30861: IFFALSE 30865
// exit ;
30863: GO 30891
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30865: LD_VAR 0 1
30869: PUSH
30870: LD_INT 1
30872: PPUSH
30873: LD_VAR 0 1
30877: PPUSH
30878: CALL_OW 12
30882: ARRAY
30883: PPUSH
30884: LD_INT 1
30886: PPUSH
30887: CALL_OW 234
// end ;
30891: PPOPN 1
30893: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30894: LD_EXP 69
30898: PUSH
30899: LD_EXP 117
30903: AND
30904: IFFALSE 31016
30906: GO 30908
30908: DISABLE
30909: LD_INT 0
30911: PPUSH
30912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30913: LD_ADDR_VAR 0 2
30917: PUSH
30918: LD_INT 22
30920: PUSH
30921: LD_OWVAR 2
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 2
30932: PUSH
30933: LD_INT 30
30935: PUSH
30936: LD_INT 27
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 30
30945: PUSH
30946: LD_INT 26
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 30
30955: PUSH
30956: LD_INT 28
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PPUSH
30973: CALL_OW 69
30977: ST_TO_ADDR
// if not tmp then
30978: LD_VAR 0 2
30982: NOT
30983: IFFALSE 30987
// exit ;
30985: GO 31016
// for i in tmp do
30987: LD_ADDR_VAR 0 1
30991: PUSH
30992: LD_VAR 0 2
30996: PUSH
30997: FOR_IN
30998: IFFALSE 31014
// SetLives ( i , 1 ) ;
31000: LD_VAR 0 1
31004: PPUSH
31005: LD_INT 1
31007: PPUSH
31008: CALL_OW 234
31012: GO 30997
31014: POP
31015: POP
// end ;
31016: PPOPN 2
31018: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31019: LD_EXP 69
31023: PUSH
31024: LD_EXP 118
31028: AND
31029: IFFALSE 31316
31031: GO 31033
31033: DISABLE
31034: LD_INT 0
31036: PPUSH
31037: PPUSH
31038: PPUSH
// begin i := rand ( 1 , 7 ) ;
31039: LD_ADDR_VAR 0 1
31043: PUSH
31044: LD_INT 1
31046: PPUSH
31047: LD_INT 7
31049: PPUSH
31050: CALL_OW 12
31054: ST_TO_ADDR
// case i of 1 :
31055: LD_VAR 0 1
31059: PUSH
31060: LD_INT 1
31062: DOUBLE
31063: EQUAL
31064: IFTRUE 31068
31066: GO 31078
31068: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31069: LD_STRING earthquake(getX(game), 0, 32)
31071: PPUSH
31072: CALL_OW 559
31076: GO 31316
31078: LD_INT 2
31080: DOUBLE
31081: EQUAL
31082: IFTRUE 31086
31084: GO 31100
31086: POP
// begin ToLua ( displayStucuk(); ) ;
31087: LD_STRING displayStucuk();
31089: PPUSH
31090: CALL_OW 559
// ResetFog ;
31094: CALL_OW 335
// end ; 3 :
31098: GO 31316
31100: LD_INT 3
31102: DOUBLE
31103: EQUAL
31104: IFTRUE 31108
31106: GO 31212
31108: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31109: LD_ADDR_VAR 0 2
31113: PUSH
31114: LD_INT 22
31116: PUSH
31117: LD_OWVAR 2
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 25
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PPUSH
31140: CALL_OW 69
31144: ST_TO_ADDR
// if not tmp then
31145: LD_VAR 0 2
31149: NOT
31150: IFFALSE 31154
// exit ;
31152: GO 31316
// un := tmp [ rand ( 1 , tmp ) ] ;
31154: LD_ADDR_VAR 0 3
31158: PUSH
31159: LD_VAR 0 2
31163: PUSH
31164: LD_INT 1
31166: PPUSH
31167: LD_VAR 0 2
31171: PPUSH
31172: CALL_OW 12
31176: ARRAY
31177: ST_TO_ADDR
// if Crawls ( un ) then
31178: LD_VAR 0 3
31182: PPUSH
31183: CALL_OW 318
31187: IFFALSE 31198
// ComWalk ( un ) ;
31189: LD_VAR 0 3
31193: PPUSH
31194: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31198: LD_VAR 0 3
31202: PPUSH
31203: LD_INT 8
31205: PPUSH
31206: CALL_OW 336
// end ; 4 :
31210: GO 31316
31212: LD_INT 4
31214: DOUBLE
31215: EQUAL
31216: IFTRUE 31220
31218: GO 31294
31220: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31221: LD_ADDR_VAR 0 2
31225: PUSH
31226: LD_INT 22
31228: PUSH
31229: LD_OWVAR 2
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 30
31240: PUSH
31241: LD_INT 29
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PPUSH
31252: CALL_OW 69
31256: ST_TO_ADDR
// if not tmp then
31257: LD_VAR 0 2
31261: NOT
31262: IFFALSE 31266
// exit ;
31264: GO 31316
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31266: LD_VAR 0 2
31270: PUSH
31271: LD_INT 1
31273: ARRAY
31274: PPUSH
31275: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31279: LD_VAR 0 2
31283: PUSH
31284: LD_INT 1
31286: ARRAY
31287: PPUSH
31288: CALL_OW 65
// end ; 5 .. 7 :
31292: GO 31316
31294: LD_INT 5
31296: DOUBLE
31297: GREATEREQUAL
31298: IFFALSE 31306
31300: LD_INT 7
31302: DOUBLE
31303: LESSEQUAL
31304: IFTRUE 31308
31306: GO 31315
31308: POP
// StreamSibBomb ; end ;
31309: CALL 27553 0 0
31313: GO 31316
31315: POP
// end ;
31316: PPOPN 3
31318: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31319: LD_EXP 69
31323: PUSH
31324: LD_EXP 119
31328: AND
31329: IFFALSE 31485
31331: GO 31333
31333: DISABLE
31334: LD_INT 0
31336: PPUSH
31337: PPUSH
31338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31339: LD_ADDR_VAR 0 2
31343: PUSH
31344: LD_INT 81
31346: PUSH
31347: LD_OWVAR 2
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 2
31358: PUSH
31359: LD_INT 21
31361: PUSH
31362: LD_INT 1
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 21
31371: PUSH
31372: LD_INT 2
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: LIST
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PPUSH
31388: CALL_OW 69
31392: ST_TO_ADDR
// if not tmp then
31393: LD_VAR 0 2
31397: NOT
31398: IFFALSE 31402
// exit ;
31400: GO 31485
// p := 0 ;
31402: LD_ADDR_VAR 0 3
31406: PUSH
31407: LD_INT 0
31409: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31410: LD_INT 35
31412: PPUSH
31413: CALL_OW 67
// p := p + 1 ;
31417: LD_ADDR_VAR 0 3
31421: PUSH
31422: LD_VAR 0 3
31426: PUSH
31427: LD_INT 1
31429: PLUS
31430: ST_TO_ADDR
// for i in tmp do
31431: LD_ADDR_VAR 0 1
31435: PUSH
31436: LD_VAR 0 2
31440: PUSH
31441: FOR_IN
31442: IFFALSE 31473
// if GetLives ( i ) < 1000 then
31444: LD_VAR 0 1
31448: PPUSH
31449: CALL_OW 256
31453: PUSH
31454: LD_INT 1000
31456: LESS
31457: IFFALSE 31471
// SetLives ( i , 1000 ) ;
31459: LD_VAR 0 1
31463: PPUSH
31464: LD_INT 1000
31466: PPUSH
31467: CALL_OW 234
31471: GO 31441
31473: POP
31474: POP
// until p > 20 ;
31475: LD_VAR 0 3
31479: PUSH
31480: LD_INT 20
31482: GREATER
31483: IFFALSE 31410
// end ;
31485: PPOPN 3
31487: END
// every 0 0$1 trigger StreamModeActive and sTime do
31488: LD_EXP 69
31492: PUSH
31493: LD_EXP 120
31497: AND
31498: IFFALSE 31533
31500: GO 31502
31502: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31503: LD_INT 28
31505: PPUSH
31506: LD_OWVAR 2
31510: PPUSH
31511: LD_INT 2
31513: PPUSH
31514: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31518: LD_INT 30
31520: PPUSH
31521: LD_OWVAR 2
31525: PPUSH
31526: LD_INT 2
31528: PPUSH
31529: CALL_OW 322
// end ;
31533: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31534: LD_EXP 69
31538: PUSH
31539: LD_EXP 121
31543: AND
31544: IFFALSE 31665
31546: GO 31548
31548: DISABLE
31549: LD_INT 0
31551: PPUSH
31552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31553: LD_ADDR_VAR 0 2
31557: PUSH
31558: LD_INT 22
31560: PUSH
31561: LD_OWVAR 2
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 21
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 3
31582: PUSH
31583: LD_INT 23
31585: PUSH
31586: LD_INT 0
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: LIST
31601: PPUSH
31602: CALL_OW 69
31606: ST_TO_ADDR
// if not tmp then
31607: LD_VAR 0 2
31611: NOT
31612: IFFALSE 31616
// exit ;
31614: GO 31665
// for i in tmp do
31616: LD_ADDR_VAR 0 1
31620: PUSH
31621: LD_VAR 0 2
31625: PUSH
31626: FOR_IN
31627: IFFALSE 31663
// begin if Crawls ( i ) then
31629: LD_VAR 0 1
31633: PPUSH
31634: CALL_OW 318
31638: IFFALSE 31649
// ComWalk ( i ) ;
31640: LD_VAR 0 1
31644: PPUSH
31645: CALL_OW 138
// SetClass ( i , 2 ) ;
31649: LD_VAR 0 1
31653: PPUSH
31654: LD_INT 2
31656: PPUSH
31657: CALL_OW 336
// end ;
31661: GO 31626
31663: POP
31664: POP
// end ;
31665: PPOPN 2
31667: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31668: LD_EXP 69
31672: PUSH
31673: LD_EXP 122
31677: AND
31678: IFFALSE 31966
31680: GO 31682
31682: DISABLE
31683: LD_INT 0
31685: PPUSH
31686: PPUSH
31687: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31688: LD_OWVAR 2
31692: PPUSH
31693: LD_INT 9
31695: PPUSH
31696: LD_INT 1
31698: PPUSH
31699: LD_INT 1
31701: PPUSH
31702: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31706: LD_INT 9
31708: PPUSH
31709: LD_OWVAR 2
31713: PPUSH
31714: CALL_OW 343
// uc_side := 9 ;
31718: LD_ADDR_OWVAR 20
31722: PUSH
31723: LD_INT 9
31725: ST_TO_ADDR
// uc_nation := 2 ;
31726: LD_ADDR_OWVAR 21
31730: PUSH
31731: LD_INT 2
31733: ST_TO_ADDR
// hc_name := Dark Warrior ;
31734: LD_ADDR_OWVAR 26
31738: PUSH
31739: LD_STRING Dark Warrior
31741: ST_TO_ADDR
// hc_gallery :=  ;
31742: LD_ADDR_OWVAR 33
31746: PUSH
31747: LD_STRING 
31749: ST_TO_ADDR
// hc_noskilllimit := true ;
31750: LD_ADDR_OWVAR 76
31754: PUSH
31755: LD_INT 1
31757: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31758: LD_ADDR_OWVAR 31
31762: PUSH
31763: LD_INT 30
31765: PUSH
31766: LD_INT 30
31768: PUSH
31769: LD_INT 30
31771: PUSH
31772: LD_INT 30
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: ST_TO_ADDR
// un := CreateHuman ;
31781: LD_ADDR_VAR 0 3
31785: PUSH
31786: CALL_OW 44
31790: ST_TO_ADDR
// hc_noskilllimit := false ;
31791: LD_ADDR_OWVAR 76
31795: PUSH
31796: LD_INT 0
31798: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31799: LD_VAR 0 3
31803: PPUSH
31804: LD_INT 1
31806: PPUSH
31807: CALL_OW 51
// ToLua ( playRanger() ) ;
31811: LD_STRING playRanger()
31813: PPUSH
31814: CALL_OW 559
// p := 0 ;
31818: LD_ADDR_VAR 0 2
31822: PUSH
31823: LD_INT 0
31825: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31826: LD_INT 35
31828: PPUSH
31829: CALL_OW 67
// p := p + 1 ;
31833: LD_ADDR_VAR 0 2
31837: PUSH
31838: LD_VAR 0 2
31842: PUSH
31843: LD_INT 1
31845: PLUS
31846: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31847: LD_VAR 0 3
31851: PPUSH
31852: CALL_OW 256
31856: PUSH
31857: LD_INT 1000
31859: LESS
31860: IFFALSE 31874
// SetLives ( un , 1000 ) ;
31862: LD_VAR 0 3
31866: PPUSH
31867: LD_INT 1000
31869: PPUSH
31870: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31874: LD_VAR 0 3
31878: PPUSH
31879: LD_INT 81
31881: PUSH
31882: LD_OWVAR 2
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 91
31893: PUSH
31894: LD_VAR 0 3
31898: PUSH
31899: LD_INT 30
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: LIST
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PPUSH
31911: CALL_OW 69
31915: PPUSH
31916: LD_VAR 0 3
31920: PPUSH
31921: CALL_OW 74
31925: PPUSH
31926: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31930: LD_VAR 0 2
31934: PUSH
31935: LD_INT 80
31937: GREATER
31938: PUSH
31939: LD_VAR 0 3
31943: PPUSH
31944: CALL_OW 301
31948: OR
31949: IFFALSE 31826
// if un then
31951: LD_VAR 0 3
31955: IFFALSE 31966
// RemoveUnit ( un ) ;
31957: LD_VAR 0 3
31961: PPUSH
31962: CALL_OW 64
// end ;
31966: PPOPN 3
31968: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31969: LD_EXP 123
31973: IFFALSE 32089
31975: GO 31977
31977: DISABLE
31978: LD_INT 0
31980: PPUSH
31981: PPUSH
31982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31983: LD_ADDR_VAR 0 2
31987: PUSH
31988: LD_INT 81
31990: PUSH
31991: LD_OWVAR 2
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 21
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PPUSH
32014: CALL_OW 69
32018: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32019: LD_STRING playComputer()
32021: PPUSH
32022: CALL_OW 559
// if not tmp then
32026: LD_VAR 0 2
32030: NOT
32031: IFFALSE 32035
// exit ;
32033: GO 32089
// for i in tmp do
32035: LD_ADDR_VAR 0 1
32039: PUSH
32040: LD_VAR 0 2
32044: PUSH
32045: FOR_IN
32046: IFFALSE 32087
// for j := 1 to 4 do
32048: LD_ADDR_VAR 0 3
32052: PUSH
32053: DOUBLE
32054: LD_INT 1
32056: DEC
32057: ST_TO_ADDR
32058: LD_INT 4
32060: PUSH
32061: FOR_TO
32062: IFFALSE 32083
// SetSkill ( i , j , 10 ) ;
32064: LD_VAR 0 1
32068: PPUSH
32069: LD_VAR 0 3
32073: PPUSH
32074: LD_INT 10
32076: PPUSH
32077: CALL_OW 237
32081: GO 32061
32083: POP
32084: POP
32085: GO 32045
32087: POP
32088: POP
// end ;
32089: PPOPN 3
32091: END
// every 0 0$1 trigger s30 do var i , tmp ;
32092: LD_EXP 124
32096: IFFALSE 32165
32098: GO 32100
32100: DISABLE
32101: LD_INT 0
32103: PPUSH
32104: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32105: LD_ADDR_VAR 0 2
32109: PUSH
32110: LD_INT 22
32112: PUSH
32113: LD_OWVAR 2
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PPUSH
32122: CALL_OW 69
32126: ST_TO_ADDR
// if not tmp then
32127: LD_VAR 0 2
32131: NOT
32132: IFFALSE 32136
// exit ;
32134: GO 32165
// for i in tmp do
32136: LD_ADDR_VAR 0 1
32140: PUSH
32141: LD_VAR 0 2
32145: PUSH
32146: FOR_IN
32147: IFFALSE 32163
// SetLives ( i , 300 ) ;
32149: LD_VAR 0 1
32153: PPUSH
32154: LD_INT 300
32156: PPUSH
32157: CALL_OW 234
32161: GO 32146
32163: POP
32164: POP
// end ;
32165: PPOPN 2
32167: END
// every 0 0$1 trigger s60 do var i , tmp ;
32168: LD_EXP 125
32172: IFFALSE 32241
32174: GO 32176
32176: DISABLE
32177: LD_INT 0
32179: PPUSH
32180: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32181: LD_ADDR_VAR 0 2
32185: PUSH
32186: LD_INT 22
32188: PUSH
32189: LD_OWVAR 2
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PPUSH
32198: CALL_OW 69
32202: ST_TO_ADDR
// if not tmp then
32203: LD_VAR 0 2
32207: NOT
32208: IFFALSE 32212
// exit ;
32210: GO 32241
// for i in tmp do
32212: LD_ADDR_VAR 0 1
32216: PUSH
32217: LD_VAR 0 2
32221: PUSH
32222: FOR_IN
32223: IFFALSE 32239
// SetLives ( i , 600 ) ;
32225: LD_VAR 0 1
32229: PPUSH
32230: LD_INT 600
32232: PPUSH
32233: CALL_OW 234
32237: GO 32222
32239: POP
32240: POP
// end ;
32241: PPOPN 2
32243: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32244: LD_INT 0
32246: PPUSH
// case cmd of 301 :
32247: LD_VAR 0 1
32251: PUSH
32252: LD_INT 301
32254: DOUBLE
32255: EQUAL
32256: IFTRUE 32260
32258: GO 32292
32260: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32261: LD_VAR 0 6
32265: PPUSH
32266: LD_VAR 0 7
32270: PPUSH
32271: LD_VAR 0 8
32275: PPUSH
32276: LD_VAR 0 4
32280: PPUSH
32281: LD_VAR 0 5
32285: PPUSH
32286: CALL 33493 0 5
32290: GO 32413
32292: LD_INT 302
32294: DOUBLE
32295: EQUAL
32296: IFTRUE 32300
32298: GO 32337
32300: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32301: LD_VAR 0 6
32305: PPUSH
32306: LD_VAR 0 7
32310: PPUSH
32311: LD_VAR 0 8
32315: PPUSH
32316: LD_VAR 0 9
32320: PPUSH
32321: LD_VAR 0 4
32325: PPUSH
32326: LD_VAR 0 5
32330: PPUSH
32331: CALL 33584 0 6
32335: GO 32413
32337: LD_INT 303
32339: DOUBLE
32340: EQUAL
32341: IFTRUE 32345
32343: GO 32382
32345: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32346: LD_VAR 0 6
32350: PPUSH
32351: LD_VAR 0 7
32355: PPUSH
32356: LD_VAR 0 8
32360: PPUSH
32361: LD_VAR 0 9
32365: PPUSH
32366: LD_VAR 0 4
32370: PPUSH
32371: LD_VAR 0 5
32375: PPUSH
32376: CALL 32418 0 6
32380: GO 32413
32382: LD_INT 304
32384: DOUBLE
32385: EQUAL
32386: IFTRUE 32390
32388: GO 32412
32390: POP
// hHackTeleport ( unit , x , y ) ; end ;
32391: LD_VAR 0 2
32395: PPUSH
32396: LD_VAR 0 4
32400: PPUSH
32401: LD_VAR 0 5
32405: PPUSH
32406: CALL 34177 0 3
32410: GO 32413
32412: POP
// end ;
32413: LD_VAR 0 12
32417: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32418: LD_INT 0
32420: PPUSH
32421: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32422: LD_VAR 0 1
32426: PUSH
32427: LD_INT 1
32429: LESS
32430: PUSH
32431: LD_VAR 0 1
32435: PUSH
32436: LD_INT 3
32438: GREATER
32439: OR
32440: PUSH
32441: LD_VAR 0 5
32445: PPUSH
32446: LD_VAR 0 6
32450: PPUSH
32451: CALL_OW 428
32455: OR
32456: IFFALSE 32460
// exit ;
32458: GO 33180
// uc_side := your_side ;
32460: LD_ADDR_OWVAR 20
32464: PUSH
32465: LD_OWVAR 2
32469: ST_TO_ADDR
// uc_nation := nation ;
32470: LD_ADDR_OWVAR 21
32474: PUSH
32475: LD_VAR 0 1
32479: ST_TO_ADDR
// bc_level = 1 ;
32480: LD_ADDR_OWVAR 43
32484: PUSH
32485: LD_INT 1
32487: ST_TO_ADDR
// case btype of 1 :
32488: LD_VAR 0 2
32492: PUSH
32493: LD_INT 1
32495: DOUBLE
32496: EQUAL
32497: IFTRUE 32501
32499: GO 32512
32501: POP
// bc_type := b_depot ; 2 :
32502: LD_ADDR_OWVAR 42
32506: PUSH
32507: LD_INT 0
32509: ST_TO_ADDR
32510: GO 33124
32512: LD_INT 2
32514: DOUBLE
32515: EQUAL
32516: IFTRUE 32520
32518: GO 32531
32520: POP
// bc_type := b_warehouse ; 3 :
32521: LD_ADDR_OWVAR 42
32525: PUSH
32526: LD_INT 1
32528: ST_TO_ADDR
32529: GO 33124
32531: LD_INT 3
32533: DOUBLE
32534: EQUAL
32535: IFTRUE 32539
32537: GO 32550
32539: POP
// bc_type := b_lab ; 4 .. 9 :
32540: LD_ADDR_OWVAR 42
32544: PUSH
32545: LD_INT 6
32547: ST_TO_ADDR
32548: GO 33124
32550: LD_INT 4
32552: DOUBLE
32553: GREATEREQUAL
32554: IFFALSE 32562
32556: LD_INT 9
32558: DOUBLE
32559: LESSEQUAL
32560: IFTRUE 32564
32562: GO 32616
32564: POP
// begin bc_type := b_lab_half ;
32565: LD_ADDR_OWVAR 42
32569: PUSH
32570: LD_INT 7
32572: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32573: LD_ADDR_OWVAR 44
32577: PUSH
32578: LD_INT 10
32580: PUSH
32581: LD_INT 11
32583: PUSH
32584: LD_INT 12
32586: PUSH
32587: LD_INT 15
32589: PUSH
32590: LD_INT 14
32592: PUSH
32593: LD_INT 13
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: PUSH
32604: LD_VAR 0 2
32608: PUSH
32609: LD_INT 3
32611: MINUS
32612: ARRAY
32613: ST_TO_ADDR
// end ; 10 .. 13 :
32614: GO 33124
32616: LD_INT 10
32618: DOUBLE
32619: GREATEREQUAL
32620: IFFALSE 32628
32622: LD_INT 13
32624: DOUBLE
32625: LESSEQUAL
32626: IFTRUE 32630
32628: GO 32707
32630: POP
// begin bc_type := b_lab_full ;
32631: LD_ADDR_OWVAR 42
32635: PUSH
32636: LD_INT 8
32638: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32639: LD_ADDR_OWVAR 44
32643: PUSH
32644: LD_INT 10
32646: PUSH
32647: LD_INT 12
32649: PUSH
32650: LD_INT 14
32652: PUSH
32653: LD_INT 13
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: PUSH
32662: LD_VAR 0 2
32666: PUSH
32667: LD_INT 9
32669: MINUS
32670: ARRAY
32671: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32672: LD_ADDR_OWVAR 45
32676: PUSH
32677: LD_INT 11
32679: PUSH
32680: LD_INT 15
32682: PUSH
32683: LD_INT 12
32685: PUSH
32686: LD_INT 15
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: PUSH
32695: LD_VAR 0 2
32699: PUSH
32700: LD_INT 9
32702: MINUS
32703: ARRAY
32704: ST_TO_ADDR
// end ; 14 :
32705: GO 33124
32707: LD_INT 14
32709: DOUBLE
32710: EQUAL
32711: IFTRUE 32715
32713: GO 32726
32715: POP
// bc_type := b_workshop ; 15 :
32716: LD_ADDR_OWVAR 42
32720: PUSH
32721: LD_INT 2
32723: ST_TO_ADDR
32724: GO 33124
32726: LD_INT 15
32728: DOUBLE
32729: EQUAL
32730: IFTRUE 32734
32732: GO 32745
32734: POP
// bc_type := b_factory ; 16 :
32735: LD_ADDR_OWVAR 42
32739: PUSH
32740: LD_INT 3
32742: ST_TO_ADDR
32743: GO 33124
32745: LD_INT 16
32747: DOUBLE
32748: EQUAL
32749: IFTRUE 32753
32751: GO 32764
32753: POP
// bc_type := b_ext_gun ; 17 :
32754: LD_ADDR_OWVAR 42
32758: PUSH
32759: LD_INT 17
32761: ST_TO_ADDR
32762: GO 33124
32764: LD_INT 17
32766: DOUBLE
32767: EQUAL
32768: IFTRUE 32772
32770: GO 32800
32772: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32773: LD_ADDR_OWVAR 42
32777: PUSH
32778: LD_INT 19
32780: PUSH
32781: LD_INT 23
32783: PUSH
32784: LD_INT 19
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: LIST
32791: PUSH
32792: LD_VAR 0 1
32796: ARRAY
32797: ST_TO_ADDR
32798: GO 33124
32800: LD_INT 18
32802: DOUBLE
32803: EQUAL
32804: IFTRUE 32808
32806: GO 32819
32808: POP
// bc_type := b_ext_radar ; 19 :
32809: LD_ADDR_OWVAR 42
32813: PUSH
32814: LD_INT 20
32816: ST_TO_ADDR
32817: GO 33124
32819: LD_INT 19
32821: DOUBLE
32822: EQUAL
32823: IFTRUE 32827
32825: GO 32838
32827: POP
// bc_type := b_ext_radio ; 20 :
32828: LD_ADDR_OWVAR 42
32832: PUSH
32833: LD_INT 22
32835: ST_TO_ADDR
32836: GO 33124
32838: LD_INT 20
32840: DOUBLE
32841: EQUAL
32842: IFTRUE 32846
32844: GO 32857
32846: POP
// bc_type := b_ext_siberium ; 21 :
32847: LD_ADDR_OWVAR 42
32851: PUSH
32852: LD_INT 21
32854: ST_TO_ADDR
32855: GO 33124
32857: LD_INT 21
32859: DOUBLE
32860: EQUAL
32861: IFTRUE 32865
32863: GO 32876
32865: POP
// bc_type := b_ext_computer ; 22 :
32866: LD_ADDR_OWVAR 42
32870: PUSH
32871: LD_INT 24
32873: ST_TO_ADDR
32874: GO 33124
32876: LD_INT 22
32878: DOUBLE
32879: EQUAL
32880: IFTRUE 32884
32882: GO 32895
32884: POP
// bc_type := b_ext_track ; 23 :
32885: LD_ADDR_OWVAR 42
32889: PUSH
32890: LD_INT 16
32892: ST_TO_ADDR
32893: GO 33124
32895: LD_INT 23
32897: DOUBLE
32898: EQUAL
32899: IFTRUE 32903
32901: GO 32914
32903: POP
// bc_type := b_ext_laser ; 24 :
32904: LD_ADDR_OWVAR 42
32908: PUSH
32909: LD_INT 25
32911: ST_TO_ADDR
32912: GO 33124
32914: LD_INT 24
32916: DOUBLE
32917: EQUAL
32918: IFTRUE 32922
32920: GO 32933
32922: POP
// bc_type := b_control_tower ; 25 :
32923: LD_ADDR_OWVAR 42
32927: PUSH
32928: LD_INT 36
32930: ST_TO_ADDR
32931: GO 33124
32933: LD_INT 25
32935: DOUBLE
32936: EQUAL
32937: IFTRUE 32941
32939: GO 32952
32941: POP
// bc_type := b_breastwork ; 26 :
32942: LD_ADDR_OWVAR 42
32946: PUSH
32947: LD_INT 31
32949: ST_TO_ADDR
32950: GO 33124
32952: LD_INT 26
32954: DOUBLE
32955: EQUAL
32956: IFTRUE 32960
32958: GO 32971
32960: POP
// bc_type := b_bunker ; 27 :
32961: LD_ADDR_OWVAR 42
32965: PUSH
32966: LD_INT 32
32968: ST_TO_ADDR
32969: GO 33124
32971: LD_INT 27
32973: DOUBLE
32974: EQUAL
32975: IFTRUE 32979
32977: GO 32990
32979: POP
// bc_type := b_turret ; 28 :
32980: LD_ADDR_OWVAR 42
32984: PUSH
32985: LD_INT 33
32987: ST_TO_ADDR
32988: GO 33124
32990: LD_INT 28
32992: DOUBLE
32993: EQUAL
32994: IFTRUE 32998
32996: GO 33009
32998: POP
// bc_type := b_armoury ; 29 :
32999: LD_ADDR_OWVAR 42
33003: PUSH
33004: LD_INT 4
33006: ST_TO_ADDR
33007: GO 33124
33009: LD_INT 29
33011: DOUBLE
33012: EQUAL
33013: IFTRUE 33017
33015: GO 33028
33017: POP
// bc_type := b_barracks ; 30 :
33018: LD_ADDR_OWVAR 42
33022: PUSH
33023: LD_INT 5
33025: ST_TO_ADDR
33026: GO 33124
33028: LD_INT 30
33030: DOUBLE
33031: EQUAL
33032: IFTRUE 33036
33034: GO 33047
33036: POP
// bc_type := b_solar_power ; 31 :
33037: LD_ADDR_OWVAR 42
33041: PUSH
33042: LD_INT 27
33044: ST_TO_ADDR
33045: GO 33124
33047: LD_INT 31
33049: DOUBLE
33050: EQUAL
33051: IFTRUE 33055
33053: GO 33066
33055: POP
// bc_type := b_oil_power ; 32 :
33056: LD_ADDR_OWVAR 42
33060: PUSH
33061: LD_INT 26
33063: ST_TO_ADDR
33064: GO 33124
33066: LD_INT 32
33068: DOUBLE
33069: EQUAL
33070: IFTRUE 33074
33072: GO 33085
33074: POP
// bc_type := b_siberite_power ; 33 :
33075: LD_ADDR_OWVAR 42
33079: PUSH
33080: LD_INT 28
33082: ST_TO_ADDR
33083: GO 33124
33085: LD_INT 33
33087: DOUBLE
33088: EQUAL
33089: IFTRUE 33093
33091: GO 33104
33093: POP
// bc_type := b_oil_mine ; 34 :
33094: LD_ADDR_OWVAR 42
33098: PUSH
33099: LD_INT 29
33101: ST_TO_ADDR
33102: GO 33124
33104: LD_INT 34
33106: DOUBLE
33107: EQUAL
33108: IFTRUE 33112
33110: GO 33123
33112: POP
// bc_type := b_siberite_mine ; end ;
33113: LD_ADDR_OWVAR 42
33117: PUSH
33118: LD_INT 30
33120: ST_TO_ADDR
33121: GO 33124
33123: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33124: LD_ADDR_VAR 0 8
33128: PUSH
33129: LD_VAR 0 5
33133: PPUSH
33134: LD_VAR 0 6
33138: PPUSH
33139: LD_VAR 0 3
33143: PPUSH
33144: CALL_OW 47
33148: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33149: LD_OWVAR 42
33153: PUSH
33154: LD_INT 32
33156: PUSH
33157: LD_INT 33
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: IN
33164: IFFALSE 33180
// PlaceWeaponTurret ( b , weapon ) ;
33166: LD_VAR 0 8
33170: PPUSH
33171: LD_VAR 0 4
33175: PPUSH
33176: CALL_OW 431
// end ;
33180: LD_VAR 0 7
33184: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33185: LD_INT 0
33187: PPUSH
33188: PPUSH
33189: PPUSH
33190: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33191: LD_ADDR_VAR 0 4
33195: PUSH
33196: LD_INT 22
33198: PUSH
33199: LD_OWVAR 2
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 2
33210: PUSH
33211: LD_INT 30
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 30
33223: PUSH
33224: LD_INT 1
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: LIST
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PPUSH
33240: CALL_OW 69
33244: ST_TO_ADDR
// if not tmp then
33245: LD_VAR 0 4
33249: NOT
33250: IFFALSE 33254
// exit ;
33252: GO 33313
// for i in tmp do
33254: LD_ADDR_VAR 0 2
33258: PUSH
33259: LD_VAR 0 4
33263: PUSH
33264: FOR_IN
33265: IFFALSE 33311
// for j = 1 to 3 do
33267: LD_ADDR_VAR 0 3
33271: PUSH
33272: DOUBLE
33273: LD_INT 1
33275: DEC
33276: ST_TO_ADDR
33277: LD_INT 3
33279: PUSH
33280: FOR_TO
33281: IFFALSE 33307
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33283: LD_VAR 0 2
33287: PPUSH
33288: CALL_OW 274
33292: PPUSH
33293: LD_VAR 0 3
33297: PPUSH
33298: LD_INT 99999
33300: PPUSH
33301: CALL_OW 277
33305: GO 33280
33307: POP
33308: POP
33309: GO 33264
33311: POP
33312: POP
// end ;
33313: LD_VAR 0 1
33317: RET
// export function hHackSetLevel10 ; var i , j ; begin
33318: LD_INT 0
33320: PPUSH
33321: PPUSH
33322: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33323: LD_ADDR_VAR 0 2
33327: PUSH
33328: LD_INT 21
33330: PUSH
33331: LD_INT 1
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PPUSH
33338: CALL_OW 69
33342: PUSH
33343: FOR_IN
33344: IFFALSE 33396
// if IsSelected ( i ) then
33346: LD_VAR 0 2
33350: PPUSH
33351: CALL_OW 306
33355: IFFALSE 33394
// begin for j := 1 to 4 do
33357: LD_ADDR_VAR 0 3
33361: PUSH
33362: DOUBLE
33363: LD_INT 1
33365: DEC
33366: ST_TO_ADDR
33367: LD_INT 4
33369: PUSH
33370: FOR_TO
33371: IFFALSE 33392
// SetSkill ( i , j , 10 ) ;
33373: LD_VAR 0 2
33377: PPUSH
33378: LD_VAR 0 3
33382: PPUSH
33383: LD_INT 10
33385: PPUSH
33386: CALL_OW 237
33390: GO 33370
33392: POP
33393: POP
// end ;
33394: GO 33343
33396: POP
33397: POP
// end ;
33398: LD_VAR 0 1
33402: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33403: LD_INT 0
33405: PPUSH
33406: PPUSH
33407: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33408: LD_ADDR_VAR 0 2
33412: PUSH
33413: LD_INT 22
33415: PUSH
33416: LD_OWVAR 2
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 21
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PPUSH
33439: CALL_OW 69
33443: PUSH
33444: FOR_IN
33445: IFFALSE 33486
// begin for j := 1 to 4 do
33447: LD_ADDR_VAR 0 3
33451: PUSH
33452: DOUBLE
33453: LD_INT 1
33455: DEC
33456: ST_TO_ADDR
33457: LD_INT 4
33459: PUSH
33460: FOR_TO
33461: IFFALSE 33482
// SetSkill ( i , j , 10 ) ;
33463: LD_VAR 0 2
33467: PPUSH
33468: LD_VAR 0 3
33472: PPUSH
33473: LD_INT 10
33475: PPUSH
33476: CALL_OW 237
33480: GO 33460
33482: POP
33483: POP
// end ;
33484: GO 33444
33486: POP
33487: POP
// end ;
33488: LD_VAR 0 1
33492: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33493: LD_INT 0
33495: PPUSH
// uc_side := your_side ;
33496: LD_ADDR_OWVAR 20
33500: PUSH
33501: LD_OWVAR 2
33505: ST_TO_ADDR
// uc_nation := nation ;
33506: LD_ADDR_OWVAR 21
33510: PUSH
33511: LD_VAR 0 1
33515: ST_TO_ADDR
// InitHc ;
33516: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33520: LD_INT 0
33522: PPUSH
33523: LD_VAR 0 2
33527: PPUSH
33528: LD_VAR 0 3
33532: PPUSH
33533: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33537: LD_VAR 0 4
33541: PPUSH
33542: LD_VAR 0 5
33546: PPUSH
33547: CALL_OW 428
33551: PUSH
33552: LD_INT 0
33554: EQUAL
33555: IFFALSE 33579
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33557: CALL_OW 44
33561: PPUSH
33562: LD_VAR 0 4
33566: PPUSH
33567: LD_VAR 0 5
33571: PPUSH
33572: LD_INT 1
33574: PPUSH
33575: CALL_OW 48
// end ;
33579: LD_VAR 0 6
33583: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33584: LD_INT 0
33586: PPUSH
33587: PPUSH
// uc_side := your_side ;
33588: LD_ADDR_OWVAR 20
33592: PUSH
33593: LD_OWVAR 2
33597: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33598: LD_VAR 0 1
33602: PUSH
33603: LD_INT 1
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: LD_INT 3
33611: PUSH
33612: LD_INT 4
33614: PUSH
33615: LD_INT 5
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: IN
33625: IFFALSE 33637
// uc_nation := nation_american else
33627: LD_ADDR_OWVAR 21
33631: PUSH
33632: LD_INT 1
33634: ST_TO_ADDR
33635: GO 33680
// if chassis in [ 11 , 12 , 13 , 14 ] then
33637: LD_VAR 0 1
33641: PUSH
33642: LD_INT 11
33644: PUSH
33645: LD_INT 12
33647: PUSH
33648: LD_INT 13
33650: PUSH
33651: LD_INT 14
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: IN
33660: IFFALSE 33672
// uc_nation := nation_arabian else
33662: LD_ADDR_OWVAR 21
33666: PUSH
33667: LD_INT 2
33669: ST_TO_ADDR
33670: GO 33680
// uc_nation := nation_russian ;
33672: LD_ADDR_OWVAR 21
33676: PUSH
33677: LD_INT 3
33679: ST_TO_ADDR
// vc_chassis := chassis ;
33680: LD_ADDR_OWVAR 37
33684: PUSH
33685: LD_VAR 0 1
33689: ST_TO_ADDR
// vc_engine := engine ;
33690: LD_ADDR_OWVAR 39
33694: PUSH
33695: LD_VAR 0 2
33699: ST_TO_ADDR
// vc_control := control ;
33700: LD_ADDR_OWVAR 38
33704: PUSH
33705: LD_VAR 0 3
33709: ST_TO_ADDR
// vc_weapon := weapon ;
33710: LD_ADDR_OWVAR 40
33714: PUSH
33715: LD_VAR 0 4
33719: ST_TO_ADDR
// un := CreateVehicle ;
33720: LD_ADDR_VAR 0 8
33724: PUSH
33725: CALL_OW 45
33729: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33730: LD_VAR 0 8
33734: PPUSH
33735: LD_INT 0
33737: PPUSH
33738: LD_INT 5
33740: PPUSH
33741: CALL_OW 12
33745: PPUSH
33746: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33750: LD_VAR 0 8
33754: PPUSH
33755: LD_VAR 0 5
33759: PPUSH
33760: LD_VAR 0 6
33764: PPUSH
33765: LD_INT 1
33767: PPUSH
33768: CALL_OW 48
// end ;
33772: LD_VAR 0 7
33776: RET
// export hInvincible ; every 1 do
33777: GO 33779
33779: DISABLE
// hInvincible := [ ] ;
33780: LD_ADDR_EXP 126
33784: PUSH
33785: EMPTY
33786: ST_TO_ADDR
33787: END
// every 10 do var i ;
33788: GO 33790
33790: DISABLE
33791: LD_INT 0
33793: PPUSH
// begin enable ;
33794: ENABLE
// if not hInvincible then
33795: LD_EXP 126
33799: NOT
33800: IFFALSE 33804
// exit ;
33802: GO 33848
// for i in hInvincible do
33804: LD_ADDR_VAR 0 1
33808: PUSH
33809: LD_EXP 126
33813: PUSH
33814: FOR_IN
33815: IFFALSE 33846
// if GetLives ( i ) < 1000 then
33817: LD_VAR 0 1
33821: PPUSH
33822: CALL_OW 256
33826: PUSH
33827: LD_INT 1000
33829: LESS
33830: IFFALSE 33844
// SetLives ( i , 1000 ) ;
33832: LD_VAR 0 1
33836: PPUSH
33837: LD_INT 1000
33839: PPUSH
33840: CALL_OW 234
33844: GO 33814
33846: POP
33847: POP
// end ;
33848: PPOPN 1
33850: END
// export function hHackInvincible ; var i ; begin
33851: LD_INT 0
33853: PPUSH
33854: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33855: LD_ADDR_VAR 0 2
33859: PUSH
33860: LD_INT 2
33862: PUSH
33863: LD_INT 21
33865: PUSH
33866: LD_INT 1
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 21
33875: PUSH
33876: LD_INT 2
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: LIST
33887: PPUSH
33888: CALL_OW 69
33892: PUSH
33893: FOR_IN
33894: IFFALSE 33955
// if IsSelected ( i ) then
33896: LD_VAR 0 2
33900: PPUSH
33901: CALL_OW 306
33905: IFFALSE 33953
// begin if i in hInvincible then
33907: LD_VAR 0 2
33911: PUSH
33912: LD_EXP 126
33916: IN
33917: IFFALSE 33937
// hInvincible := hInvincible diff i else
33919: LD_ADDR_EXP 126
33923: PUSH
33924: LD_EXP 126
33928: PUSH
33929: LD_VAR 0 2
33933: DIFF
33934: ST_TO_ADDR
33935: GO 33953
// hInvincible := hInvincible union i ;
33937: LD_ADDR_EXP 126
33941: PUSH
33942: LD_EXP 126
33946: PUSH
33947: LD_VAR 0 2
33951: UNION
33952: ST_TO_ADDR
// end ;
33953: GO 33893
33955: POP
33956: POP
// end ;
33957: LD_VAR 0 1
33961: RET
// export function hHackInvisible ; var i , j ; begin
33962: LD_INT 0
33964: PPUSH
33965: PPUSH
33966: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33967: LD_ADDR_VAR 0 2
33971: PUSH
33972: LD_INT 21
33974: PUSH
33975: LD_INT 1
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PPUSH
33982: CALL_OW 69
33986: PUSH
33987: FOR_IN
33988: IFFALSE 34012
// if IsSelected ( i ) then
33990: LD_VAR 0 2
33994: PPUSH
33995: CALL_OW 306
33999: IFFALSE 34010
// ComForceInvisible ( i ) ;
34001: LD_VAR 0 2
34005: PPUSH
34006: CALL_OW 496
34010: GO 33987
34012: POP
34013: POP
// end ;
34014: LD_VAR 0 1
34018: RET
// export function hHackChangeYourSide ; begin
34019: LD_INT 0
34021: PPUSH
// if your_side = 8 then
34022: LD_OWVAR 2
34026: PUSH
34027: LD_INT 8
34029: EQUAL
34030: IFFALSE 34042
// your_side := 0 else
34032: LD_ADDR_OWVAR 2
34036: PUSH
34037: LD_INT 0
34039: ST_TO_ADDR
34040: GO 34056
// your_side := your_side + 1 ;
34042: LD_ADDR_OWVAR 2
34046: PUSH
34047: LD_OWVAR 2
34051: PUSH
34052: LD_INT 1
34054: PLUS
34055: ST_TO_ADDR
// end ;
34056: LD_VAR 0 1
34060: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34061: LD_INT 0
34063: PPUSH
34064: PPUSH
34065: PPUSH
// for i in all_units do
34066: LD_ADDR_VAR 0 2
34070: PUSH
34071: LD_OWVAR 3
34075: PUSH
34076: FOR_IN
34077: IFFALSE 34155
// if IsSelected ( i ) then
34079: LD_VAR 0 2
34083: PPUSH
34084: CALL_OW 306
34088: IFFALSE 34153
// begin j := GetSide ( i ) ;
34090: LD_ADDR_VAR 0 3
34094: PUSH
34095: LD_VAR 0 2
34099: PPUSH
34100: CALL_OW 255
34104: ST_TO_ADDR
// if j = 8 then
34105: LD_VAR 0 3
34109: PUSH
34110: LD_INT 8
34112: EQUAL
34113: IFFALSE 34125
// j := 0 else
34115: LD_ADDR_VAR 0 3
34119: PUSH
34120: LD_INT 0
34122: ST_TO_ADDR
34123: GO 34139
// j := j + 1 ;
34125: LD_ADDR_VAR 0 3
34129: PUSH
34130: LD_VAR 0 3
34134: PUSH
34135: LD_INT 1
34137: PLUS
34138: ST_TO_ADDR
// SetSide ( i , j ) ;
34139: LD_VAR 0 2
34143: PPUSH
34144: LD_VAR 0 3
34148: PPUSH
34149: CALL_OW 235
// end ;
34153: GO 34076
34155: POP
34156: POP
// end ;
34157: LD_VAR 0 1
34161: RET
// export function hHackFog ; begin
34162: LD_INT 0
34164: PPUSH
// FogOff ( true ) ;
34165: LD_INT 1
34167: PPUSH
34168: CALL_OW 344
// end ;
34172: LD_VAR 0 1
34176: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34177: LD_INT 0
34179: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34180: LD_VAR 0 1
34184: PPUSH
34185: LD_VAR 0 2
34189: PPUSH
34190: LD_VAR 0 3
34194: PPUSH
34195: LD_INT 1
34197: PPUSH
34198: LD_INT 1
34200: PPUSH
34201: CALL_OW 483
// CenterOnXY ( x , y ) ;
34205: LD_VAR 0 2
34209: PPUSH
34210: LD_VAR 0 3
34214: PPUSH
34215: CALL_OW 84
// end ; end_of_file
34219: LD_VAR 0 4
34223: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34224: LD_INT 0
34226: PPUSH
34227: PPUSH
34228: PPUSH
34229: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34230: LD_VAR 0 1
34234: PPUSH
34235: CALL_OW 264
34239: PUSH
34240: LD_EXP 54
34244: EQUAL
34245: IFFALSE 34317
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34247: LD_INT 68
34249: PPUSH
34250: LD_VAR 0 1
34254: PPUSH
34255: CALL_OW 255
34259: PPUSH
34260: CALL_OW 321
34264: PUSH
34265: LD_INT 2
34267: EQUAL
34268: IFFALSE 34280
// eff := 70 else
34270: LD_ADDR_VAR 0 4
34274: PUSH
34275: LD_INT 70
34277: ST_TO_ADDR
34278: GO 34288
// eff := 30 ;
34280: LD_ADDR_VAR 0 4
34284: PUSH
34285: LD_INT 30
34287: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34288: LD_VAR 0 1
34292: PPUSH
34293: CALL_OW 250
34297: PPUSH
34298: LD_VAR 0 1
34302: PPUSH
34303: CALL_OW 251
34307: PPUSH
34308: LD_VAR 0 4
34312: PPUSH
34313: CALL_OW 495
// end ; end ;
34317: LD_VAR 0 2
34321: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34322: LD_INT 0
34324: PPUSH
// end ;
34325: LD_VAR 0 4
34329: RET
// export function SOS_Command ( cmd ) ; begin
34330: LD_INT 0
34332: PPUSH
// end ;
34333: LD_VAR 0 2
34337: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34338: LD_INT 0
34340: PPUSH
// end ;
34341: LD_VAR 0 6
34345: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34346: LD_INT 0
34348: PPUSH
34349: PPUSH
// if not vehicle or not factory then
34350: LD_VAR 0 1
34354: NOT
34355: PUSH
34356: LD_VAR 0 2
34360: NOT
34361: OR
34362: IFFALSE 34366
// exit ;
34364: GO 34597
// if factoryWaypoints >= factory then
34366: LD_EXP 127
34370: PUSH
34371: LD_VAR 0 2
34375: GREATEREQUAL
34376: IFFALSE 34597
// if factoryWaypoints [ factory ] then
34378: LD_EXP 127
34382: PUSH
34383: LD_VAR 0 2
34387: ARRAY
34388: IFFALSE 34597
// begin if GetControl ( vehicle ) = control_manual then
34390: LD_VAR 0 1
34394: PPUSH
34395: CALL_OW 263
34399: PUSH
34400: LD_INT 1
34402: EQUAL
34403: IFFALSE 34484
// begin driver := IsDrivenBy ( vehicle ) ;
34405: LD_ADDR_VAR 0 4
34409: PUSH
34410: LD_VAR 0 1
34414: PPUSH
34415: CALL_OW 311
34419: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34420: LD_VAR 0 4
34424: PPUSH
34425: LD_EXP 127
34429: PUSH
34430: LD_VAR 0 2
34434: ARRAY
34435: PUSH
34436: LD_INT 3
34438: ARRAY
34439: PPUSH
34440: LD_EXP 127
34444: PUSH
34445: LD_VAR 0 2
34449: ARRAY
34450: PUSH
34451: LD_INT 4
34453: ARRAY
34454: PPUSH
34455: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34459: LD_VAR 0 4
34463: PPUSH
34464: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34468: LD_VAR 0 4
34472: PPUSH
34473: LD_VAR 0 2
34477: PPUSH
34478: CALL_OW 180
// end else
34482: GO 34597
// if GetControl ( vehicle ) = control_remote then
34484: LD_VAR 0 1
34488: PPUSH
34489: CALL_OW 263
34493: PUSH
34494: LD_INT 2
34496: EQUAL
34497: IFFALSE 34558
// begin wait ( 0 0$2 ) ;
34499: LD_INT 70
34501: PPUSH
34502: CALL_OW 67
// if Connect ( vehicle ) then
34506: LD_VAR 0 1
34510: PPUSH
34511: CALL 46821 0 1
34515: IFFALSE 34556
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34517: LD_VAR 0 1
34521: PPUSH
34522: LD_EXP 127
34526: PUSH
34527: LD_VAR 0 2
34531: ARRAY
34532: PUSH
34533: LD_INT 3
34535: ARRAY
34536: PPUSH
34537: LD_EXP 127
34541: PUSH
34542: LD_VAR 0 2
34546: ARRAY
34547: PUSH
34548: LD_INT 4
34550: ARRAY
34551: PPUSH
34552: CALL_OW 171
// end else
34556: GO 34597
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34558: LD_VAR 0 1
34562: PPUSH
34563: LD_EXP 127
34567: PUSH
34568: LD_VAR 0 2
34572: ARRAY
34573: PUSH
34574: LD_INT 3
34576: ARRAY
34577: PPUSH
34578: LD_EXP 127
34582: PUSH
34583: LD_VAR 0 2
34587: ARRAY
34588: PUSH
34589: LD_INT 4
34591: ARRAY
34592: PPUSH
34593: CALL_OW 171
// end ; end ;
34597: LD_VAR 0 3
34601: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34602: LD_INT 0
34604: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34605: LD_VAR 0 1
34609: PUSH
34610: LD_INT 250
34612: EQUAL
34613: PUSH
34614: LD_VAR 0 2
34618: PPUSH
34619: CALL_OW 264
34623: PUSH
34624: LD_EXP 57
34628: EQUAL
34629: AND
34630: IFFALSE 34651
// MinerPlaceMine ( unit , x , y ) ;
34632: LD_VAR 0 2
34636: PPUSH
34637: LD_VAR 0 4
34641: PPUSH
34642: LD_VAR 0 5
34646: PPUSH
34647: CALL 37379 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34651: LD_VAR 0 1
34655: PUSH
34656: LD_INT 251
34658: EQUAL
34659: PUSH
34660: LD_VAR 0 2
34664: PPUSH
34665: CALL_OW 264
34669: PUSH
34670: LD_EXP 57
34674: EQUAL
34675: AND
34676: IFFALSE 34697
// MinerDetonateMine ( unit , x , y ) ;
34678: LD_VAR 0 2
34682: PPUSH
34683: LD_VAR 0 4
34687: PPUSH
34688: LD_VAR 0 5
34692: PPUSH
34693: CALL 37656 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34697: LD_VAR 0 1
34701: PUSH
34702: LD_INT 252
34704: EQUAL
34705: PUSH
34706: LD_VAR 0 2
34710: PPUSH
34711: CALL_OW 264
34715: PUSH
34716: LD_EXP 57
34720: EQUAL
34721: AND
34722: IFFALSE 34743
// MinerCreateMinefield ( unit , x , y ) ;
34724: LD_VAR 0 2
34728: PPUSH
34729: LD_VAR 0 4
34733: PPUSH
34734: LD_VAR 0 5
34738: PPUSH
34739: CALL 38073 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34743: LD_VAR 0 1
34747: PUSH
34748: LD_INT 253
34750: EQUAL
34751: PUSH
34752: LD_VAR 0 2
34756: PPUSH
34757: CALL_OW 257
34761: PUSH
34762: LD_INT 5
34764: EQUAL
34765: AND
34766: IFFALSE 34787
// ComBinocular ( unit , x , y ) ;
34768: LD_VAR 0 2
34772: PPUSH
34773: LD_VAR 0 4
34777: PPUSH
34778: LD_VAR 0 5
34782: PPUSH
34783: CALL 38444 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34787: LD_VAR 0 1
34791: PUSH
34792: LD_INT 254
34794: EQUAL
34795: PUSH
34796: LD_VAR 0 2
34800: PPUSH
34801: CALL_OW 264
34805: PUSH
34806: LD_EXP 52
34810: EQUAL
34811: AND
34812: PUSH
34813: LD_VAR 0 3
34817: PPUSH
34818: CALL_OW 263
34822: PUSH
34823: LD_INT 3
34825: EQUAL
34826: AND
34827: IFFALSE 34843
// HackDestroyVehicle ( unit , selectedUnit ) ;
34829: LD_VAR 0 2
34833: PPUSH
34834: LD_VAR 0 3
34838: PPUSH
34839: CALL 36739 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34843: LD_VAR 0 1
34847: PUSH
34848: LD_INT 255
34850: EQUAL
34851: PUSH
34852: LD_VAR 0 2
34856: PPUSH
34857: CALL_OW 264
34861: PUSH
34862: LD_INT 14
34864: PUSH
34865: LD_INT 53
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: IN
34872: AND
34873: PUSH
34874: LD_VAR 0 4
34878: PPUSH
34879: LD_VAR 0 5
34883: PPUSH
34884: CALL_OW 488
34888: AND
34889: IFFALSE 34913
// CutTreeXYR ( unit , x , y , 12 ) ;
34891: LD_VAR 0 2
34895: PPUSH
34896: LD_VAR 0 4
34900: PPUSH
34901: LD_VAR 0 5
34905: PPUSH
34906: LD_INT 12
34908: PPUSH
34909: CALL 35305 0 4
// if cmd = 256 then
34913: LD_VAR 0 1
34917: PUSH
34918: LD_INT 256
34920: EQUAL
34921: IFFALSE 34942
// SetFactoryWaypoint ( unit , x , y ) ;
34923: LD_VAR 0 2
34927: PPUSH
34928: LD_VAR 0 4
34932: PPUSH
34933: LD_VAR 0 5
34937: PPUSH
34938: CALL 34947 0 3
// end ;
34942: LD_VAR 0 6
34946: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34947: LD_INT 0
34949: PPUSH
34950: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34951: LD_VAR 0 1
34955: NOT
34956: PUSH
34957: LD_VAR 0 2
34961: PPUSH
34962: LD_VAR 0 3
34966: PPUSH
34967: CALL_OW 488
34971: NOT
34972: OR
34973: PUSH
34974: LD_VAR 0 1
34978: PPUSH
34979: CALL_OW 266
34983: PUSH
34984: LD_INT 3
34986: NONEQUAL
34987: PUSH
34988: LD_VAR 0 1
34992: PPUSH
34993: CALL_OW 247
34997: PUSH
34998: LD_INT 1
35000: EQUAL
35001: NOT
35002: AND
35003: OR
35004: IFFALSE 35008
// exit ;
35006: GO 35157
// if GetType ( factory ) = unit_human then
35008: LD_VAR 0 1
35012: PPUSH
35013: CALL_OW 247
35017: PUSH
35018: LD_INT 1
35020: EQUAL
35021: IFFALSE 35038
// factory := IsInUnit ( factory ) ;
35023: LD_ADDR_VAR 0 1
35027: PUSH
35028: LD_VAR 0 1
35032: PPUSH
35033: CALL_OW 310
35037: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35038: LD_VAR 0 1
35042: PPUSH
35043: CALL_OW 266
35047: PUSH
35048: LD_INT 3
35050: NONEQUAL
35051: IFFALSE 35055
// exit ;
35053: GO 35157
// if HexInfo ( x , y ) = factory then
35055: LD_VAR 0 2
35059: PPUSH
35060: LD_VAR 0 3
35064: PPUSH
35065: CALL_OW 428
35069: PUSH
35070: LD_VAR 0 1
35074: EQUAL
35075: IFFALSE 35102
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35077: LD_ADDR_EXP 127
35081: PUSH
35082: LD_EXP 127
35086: PPUSH
35087: LD_VAR 0 1
35091: PPUSH
35092: LD_INT 0
35094: PPUSH
35095: CALL_OW 1
35099: ST_TO_ADDR
35100: GO 35153
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35102: LD_ADDR_EXP 127
35106: PUSH
35107: LD_EXP 127
35111: PPUSH
35112: LD_VAR 0 1
35116: PPUSH
35117: LD_VAR 0 1
35121: PPUSH
35122: CALL_OW 255
35126: PUSH
35127: LD_VAR 0 1
35131: PUSH
35132: LD_VAR 0 2
35136: PUSH
35137: LD_VAR 0 3
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: PPUSH
35148: CALL_OW 1
35152: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35153: CALL 35162 0 0
// end ;
35157: LD_VAR 0 4
35161: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
35162: LD_INT 0
35164: PPUSH
35165: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35166: LD_STRING resetFactoryWaypoint();
35168: PPUSH
35169: CALL_OW 559
// if factoryWaypoints then
35173: LD_EXP 127
35177: IFFALSE 35300
// begin for i := 1 to factoryWaypoints do
35179: LD_ADDR_VAR 0 2
35183: PUSH
35184: DOUBLE
35185: LD_INT 1
35187: DEC
35188: ST_TO_ADDR
35189: LD_EXP 127
35193: PUSH
35194: FOR_TO
35195: IFFALSE 35298
// if factoryWaypoints [ i ] then
35197: LD_EXP 127
35201: PUSH
35202: LD_VAR 0 2
35206: ARRAY
35207: IFFALSE 35296
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
35209: LD_STRING setFactoryWaypointXY(
35211: PUSH
35212: LD_EXP 127
35216: PUSH
35217: LD_VAR 0 2
35221: ARRAY
35222: PUSH
35223: LD_INT 1
35225: ARRAY
35226: STR
35227: PUSH
35228: LD_STRING ,
35230: STR
35231: PUSH
35232: LD_EXP 127
35236: PUSH
35237: LD_VAR 0 2
35241: ARRAY
35242: PUSH
35243: LD_INT 2
35245: ARRAY
35246: STR
35247: PUSH
35248: LD_STRING ,
35250: STR
35251: PUSH
35252: LD_EXP 127
35256: PUSH
35257: LD_VAR 0 2
35261: ARRAY
35262: PUSH
35263: LD_INT 3
35265: ARRAY
35266: STR
35267: PUSH
35268: LD_STRING ,
35270: STR
35271: PUSH
35272: LD_EXP 127
35276: PUSH
35277: LD_VAR 0 2
35281: ARRAY
35282: PUSH
35283: LD_INT 4
35285: ARRAY
35286: STR
35287: PUSH
35288: LD_STRING )
35290: STR
35291: PPUSH
35292: CALL_OW 559
35296: GO 35194
35298: POP
35299: POP
// end ; end ;
35300: LD_VAR 0 1
35304: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35305: LD_INT 0
35307: PPUSH
35308: PPUSH
35309: PPUSH
35310: PPUSH
35311: PPUSH
35312: PPUSH
35313: PPUSH
35314: PPUSH
35315: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35316: LD_VAR 0 1
35320: NOT
35321: PUSH
35322: LD_VAR 0 2
35326: PPUSH
35327: LD_VAR 0 3
35331: PPUSH
35332: CALL_OW 488
35336: NOT
35337: OR
35338: PUSH
35339: LD_VAR 0 4
35343: NOT
35344: OR
35345: IFFALSE 35349
// exit ;
35347: GO 35689
// list := [ ] ;
35349: LD_ADDR_VAR 0 13
35353: PUSH
35354: EMPTY
35355: ST_TO_ADDR
// if x - r < 0 then
35356: LD_VAR 0 2
35360: PUSH
35361: LD_VAR 0 4
35365: MINUS
35366: PUSH
35367: LD_INT 0
35369: LESS
35370: IFFALSE 35382
// min_x := 0 else
35372: LD_ADDR_VAR 0 7
35376: PUSH
35377: LD_INT 0
35379: ST_TO_ADDR
35380: GO 35398
// min_x := x - r ;
35382: LD_ADDR_VAR 0 7
35386: PUSH
35387: LD_VAR 0 2
35391: PUSH
35392: LD_VAR 0 4
35396: MINUS
35397: ST_TO_ADDR
// if y - r < 0 then
35398: LD_VAR 0 3
35402: PUSH
35403: LD_VAR 0 4
35407: MINUS
35408: PUSH
35409: LD_INT 0
35411: LESS
35412: IFFALSE 35424
// min_y := 0 else
35414: LD_ADDR_VAR 0 8
35418: PUSH
35419: LD_INT 0
35421: ST_TO_ADDR
35422: GO 35440
// min_y := y - r ;
35424: LD_ADDR_VAR 0 8
35428: PUSH
35429: LD_VAR 0 3
35433: PUSH
35434: LD_VAR 0 4
35438: MINUS
35439: ST_TO_ADDR
// max_x := x + r ;
35440: LD_ADDR_VAR 0 9
35444: PUSH
35445: LD_VAR 0 2
35449: PUSH
35450: LD_VAR 0 4
35454: PLUS
35455: ST_TO_ADDR
// max_y := y + r ;
35456: LD_ADDR_VAR 0 10
35460: PUSH
35461: LD_VAR 0 3
35465: PUSH
35466: LD_VAR 0 4
35470: PLUS
35471: ST_TO_ADDR
// for _x = min_x to max_x do
35472: LD_ADDR_VAR 0 11
35476: PUSH
35477: DOUBLE
35478: LD_VAR 0 7
35482: DEC
35483: ST_TO_ADDR
35484: LD_VAR 0 9
35488: PUSH
35489: FOR_TO
35490: IFFALSE 35607
// for _y = min_y to max_y do
35492: LD_ADDR_VAR 0 12
35496: PUSH
35497: DOUBLE
35498: LD_VAR 0 8
35502: DEC
35503: ST_TO_ADDR
35504: LD_VAR 0 10
35508: PUSH
35509: FOR_TO
35510: IFFALSE 35603
// begin if not ValidHex ( _x , _y ) then
35512: LD_VAR 0 11
35516: PPUSH
35517: LD_VAR 0 12
35521: PPUSH
35522: CALL_OW 488
35526: NOT
35527: IFFALSE 35531
// continue ;
35529: GO 35509
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35531: LD_VAR 0 11
35535: PPUSH
35536: LD_VAR 0 12
35540: PPUSH
35541: CALL_OW 351
35545: PUSH
35546: LD_VAR 0 11
35550: PPUSH
35551: LD_VAR 0 12
35555: PPUSH
35556: CALL_OW 554
35560: AND
35561: IFFALSE 35601
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35563: LD_ADDR_VAR 0 13
35567: PUSH
35568: LD_VAR 0 13
35572: PPUSH
35573: LD_VAR 0 13
35577: PUSH
35578: LD_INT 1
35580: PLUS
35581: PPUSH
35582: LD_VAR 0 11
35586: PUSH
35587: LD_VAR 0 12
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PPUSH
35596: CALL_OW 2
35600: ST_TO_ADDR
// end ;
35601: GO 35509
35603: POP
35604: POP
35605: GO 35489
35607: POP
35608: POP
// if not list then
35609: LD_VAR 0 13
35613: NOT
35614: IFFALSE 35618
// exit ;
35616: GO 35689
// for i in list do
35618: LD_ADDR_VAR 0 6
35622: PUSH
35623: LD_VAR 0 13
35627: PUSH
35628: FOR_IN
35629: IFFALSE 35687
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35631: LD_VAR 0 1
35635: PPUSH
35636: LD_STRING M
35638: PUSH
35639: LD_VAR 0 6
35643: PUSH
35644: LD_INT 1
35646: ARRAY
35647: PUSH
35648: LD_VAR 0 6
35652: PUSH
35653: LD_INT 2
35655: ARRAY
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: LD_INT 0
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: PUSH
35678: EMPTY
35679: LIST
35680: PPUSH
35681: CALL_OW 447
35685: GO 35628
35687: POP
35688: POP
// end ;
35689: LD_VAR 0 5
35693: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35694: LD_EXP 128
35698: NOT
35699: IFFALSE 35749
35701: GO 35703
35703: DISABLE
// begin initHack := true ;
35704: LD_ADDR_EXP 128
35708: PUSH
35709: LD_INT 1
35711: ST_TO_ADDR
// hackTanks := [ ] ;
35712: LD_ADDR_EXP 129
35716: PUSH
35717: EMPTY
35718: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35719: LD_ADDR_EXP 130
35723: PUSH
35724: EMPTY
35725: ST_TO_ADDR
// hackLimit := 3 ;
35726: LD_ADDR_EXP 131
35730: PUSH
35731: LD_INT 3
35733: ST_TO_ADDR
// hackDist := 12 ;
35734: LD_ADDR_EXP 132
35738: PUSH
35739: LD_INT 12
35741: ST_TO_ADDR
// hackCounter := [ ] ;
35742: LD_ADDR_EXP 133
35746: PUSH
35747: EMPTY
35748: ST_TO_ADDR
// end ;
35749: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35750: LD_EXP 128
35754: PUSH
35755: LD_INT 34
35757: PUSH
35758: LD_EXP 52
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PPUSH
35767: CALL_OW 69
35771: AND
35772: IFFALSE 36027
35774: GO 35776
35776: DISABLE
35777: LD_INT 0
35779: PPUSH
35780: PPUSH
// begin enable ;
35781: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35782: LD_ADDR_VAR 0 1
35786: PUSH
35787: LD_INT 34
35789: PUSH
35790: LD_EXP 52
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PPUSH
35799: CALL_OW 69
35803: PUSH
35804: FOR_IN
35805: IFFALSE 36025
// begin if not i in hackTanks then
35807: LD_VAR 0 1
35811: PUSH
35812: LD_EXP 129
35816: IN
35817: NOT
35818: IFFALSE 35901
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35820: LD_ADDR_EXP 129
35824: PUSH
35825: LD_EXP 129
35829: PPUSH
35830: LD_EXP 129
35834: PUSH
35835: LD_INT 1
35837: PLUS
35838: PPUSH
35839: LD_VAR 0 1
35843: PPUSH
35844: CALL_OW 1
35848: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35849: LD_ADDR_EXP 130
35853: PUSH
35854: LD_EXP 130
35858: PPUSH
35859: LD_EXP 130
35863: PUSH
35864: LD_INT 1
35866: PLUS
35867: PPUSH
35868: EMPTY
35869: PPUSH
35870: CALL_OW 1
35874: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35875: LD_ADDR_EXP 133
35879: PUSH
35880: LD_EXP 133
35884: PPUSH
35885: LD_EXP 133
35889: PUSH
35890: LD_INT 1
35892: PLUS
35893: PPUSH
35894: EMPTY
35895: PPUSH
35896: CALL_OW 1
35900: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35901: LD_VAR 0 1
35905: PPUSH
35906: CALL_OW 302
35910: NOT
35911: IFFALSE 35924
// begin HackUnlinkAll ( i ) ;
35913: LD_VAR 0 1
35917: PPUSH
35918: CALL 36030 0 1
// continue ;
35922: GO 35804
// end ; HackCheckCapturedStatus ( i ) ;
35924: LD_VAR 0 1
35928: PPUSH
35929: CALL 36473 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35933: LD_ADDR_VAR 0 2
35937: PUSH
35938: LD_INT 81
35940: PUSH
35941: LD_VAR 0 1
35945: PPUSH
35946: CALL_OW 255
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 33
35957: PUSH
35958: LD_INT 3
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 91
35967: PUSH
35968: LD_VAR 0 1
35972: PUSH
35973: LD_EXP 132
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 50
35985: PUSH
35986: EMPTY
35987: LIST
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: PPUSH
35995: CALL_OW 69
35999: ST_TO_ADDR
// if not tmp then
36000: LD_VAR 0 2
36004: NOT
36005: IFFALSE 36009
// continue ;
36007: GO 35804
// HackLink ( i , tmp ) ;
36009: LD_VAR 0 1
36013: PPUSH
36014: LD_VAR 0 2
36018: PPUSH
36019: CALL 36166 0 2
// end ;
36023: GO 35804
36025: POP
36026: POP
// end ;
36027: PPOPN 2
36029: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36030: LD_INT 0
36032: PPUSH
36033: PPUSH
36034: PPUSH
// if not hack in hackTanks then
36035: LD_VAR 0 1
36039: PUSH
36040: LD_EXP 129
36044: IN
36045: NOT
36046: IFFALSE 36050
// exit ;
36048: GO 36161
// index := GetElementIndex ( hackTanks , hack ) ;
36050: LD_ADDR_VAR 0 4
36054: PUSH
36055: LD_EXP 129
36059: PPUSH
36060: LD_VAR 0 1
36064: PPUSH
36065: CALL 43635 0 2
36069: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36070: LD_EXP 130
36074: PUSH
36075: LD_VAR 0 4
36079: ARRAY
36080: IFFALSE 36161
// begin for i in hackTanksCaptured [ index ] do
36082: LD_ADDR_VAR 0 3
36086: PUSH
36087: LD_EXP 130
36091: PUSH
36092: LD_VAR 0 4
36096: ARRAY
36097: PUSH
36098: FOR_IN
36099: IFFALSE 36125
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36101: LD_VAR 0 3
36105: PUSH
36106: LD_INT 1
36108: ARRAY
36109: PPUSH
36110: LD_VAR 0 3
36114: PUSH
36115: LD_INT 2
36117: ARRAY
36118: PPUSH
36119: CALL_OW 235
36123: GO 36098
36125: POP
36126: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36127: LD_ADDR_EXP 130
36131: PUSH
36132: LD_EXP 130
36136: PPUSH
36137: LD_VAR 0 4
36141: PPUSH
36142: EMPTY
36143: PPUSH
36144: CALL_OW 1
36148: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36149: LD_VAR 0 1
36153: PPUSH
36154: LD_INT 0
36156: PPUSH
36157: CALL_OW 505
// end ; end ;
36161: LD_VAR 0 2
36165: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36166: LD_INT 0
36168: PPUSH
36169: PPUSH
36170: PPUSH
// if not hack in hackTanks or not vehicles then
36171: LD_VAR 0 1
36175: PUSH
36176: LD_EXP 129
36180: IN
36181: NOT
36182: PUSH
36183: LD_VAR 0 2
36187: NOT
36188: OR
36189: IFFALSE 36193
// exit ;
36191: GO 36468
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36193: LD_ADDR_VAR 0 2
36197: PUSH
36198: LD_VAR 0 1
36202: PPUSH
36203: LD_VAR 0 2
36207: PPUSH
36208: LD_INT 1
36210: PPUSH
36211: LD_INT 1
36213: PPUSH
36214: CALL 44285 0 4
36218: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36219: LD_ADDR_VAR 0 5
36223: PUSH
36224: LD_EXP 129
36228: PPUSH
36229: LD_VAR 0 1
36233: PPUSH
36234: CALL 43635 0 2
36238: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36239: LD_EXP 130
36243: PUSH
36244: LD_VAR 0 5
36248: ARRAY
36249: PUSH
36250: LD_EXP 131
36254: LESS
36255: IFFALSE 36444
// begin for i := 1 to vehicles do
36257: LD_ADDR_VAR 0 4
36261: PUSH
36262: DOUBLE
36263: LD_INT 1
36265: DEC
36266: ST_TO_ADDR
36267: LD_VAR 0 2
36271: PUSH
36272: FOR_TO
36273: IFFALSE 36442
// begin if hackTanksCaptured [ index ] = hackLimit then
36275: LD_EXP 130
36279: PUSH
36280: LD_VAR 0 5
36284: ARRAY
36285: PUSH
36286: LD_EXP 131
36290: EQUAL
36291: IFFALSE 36295
// break ;
36293: GO 36442
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36295: LD_ADDR_EXP 133
36299: PUSH
36300: LD_EXP 133
36304: PPUSH
36305: LD_VAR 0 5
36309: PPUSH
36310: LD_EXP 133
36314: PUSH
36315: LD_VAR 0 5
36319: ARRAY
36320: PUSH
36321: LD_INT 1
36323: PLUS
36324: PPUSH
36325: CALL_OW 1
36329: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36330: LD_ADDR_EXP 130
36334: PUSH
36335: LD_EXP 130
36339: PPUSH
36340: LD_VAR 0 5
36344: PUSH
36345: LD_EXP 130
36349: PUSH
36350: LD_VAR 0 5
36354: ARRAY
36355: PUSH
36356: LD_INT 1
36358: PLUS
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PPUSH
36364: LD_VAR 0 2
36368: PUSH
36369: LD_VAR 0 4
36373: ARRAY
36374: PUSH
36375: LD_VAR 0 2
36379: PUSH
36380: LD_VAR 0 4
36384: ARRAY
36385: PPUSH
36386: CALL_OW 255
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PPUSH
36395: CALL 43850 0 3
36399: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36400: LD_VAR 0 2
36404: PUSH
36405: LD_VAR 0 4
36409: ARRAY
36410: PPUSH
36411: LD_VAR 0 1
36415: PPUSH
36416: CALL_OW 255
36420: PPUSH
36421: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36425: LD_VAR 0 2
36429: PUSH
36430: LD_VAR 0 4
36434: ARRAY
36435: PPUSH
36436: CALL_OW 141
// end ;
36440: GO 36272
36442: POP
36443: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36444: LD_VAR 0 1
36448: PPUSH
36449: LD_EXP 130
36453: PUSH
36454: LD_VAR 0 5
36458: ARRAY
36459: PUSH
36460: LD_INT 0
36462: PLUS
36463: PPUSH
36464: CALL_OW 505
// end ;
36468: LD_VAR 0 3
36472: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36473: LD_INT 0
36475: PPUSH
36476: PPUSH
36477: PPUSH
36478: PPUSH
// if not hack in hackTanks then
36479: LD_VAR 0 1
36483: PUSH
36484: LD_EXP 129
36488: IN
36489: NOT
36490: IFFALSE 36494
// exit ;
36492: GO 36734
// index := GetElementIndex ( hackTanks , hack ) ;
36494: LD_ADDR_VAR 0 4
36498: PUSH
36499: LD_EXP 129
36503: PPUSH
36504: LD_VAR 0 1
36508: PPUSH
36509: CALL 43635 0 2
36513: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36514: LD_ADDR_VAR 0 3
36518: PUSH
36519: DOUBLE
36520: LD_EXP 130
36524: PUSH
36525: LD_VAR 0 4
36529: ARRAY
36530: INC
36531: ST_TO_ADDR
36532: LD_INT 1
36534: PUSH
36535: FOR_DOWNTO
36536: IFFALSE 36708
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36538: LD_ADDR_VAR 0 5
36542: PUSH
36543: LD_EXP 130
36547: PUSH
36548: LD_VAR 0 4
36552: ARRAY
36553: PUSH
36554: LD_VAR 0 3
36558: ARRAY
36559: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36560: LD_VAR 0 5
36564: PUSH
36565: LD_INT 1
36567: ARRAY
36568: PPUSH
36569: CALL_OW 302
36573: NOT
36574: PUSH
36575: LD_VAR 0 5
36579: PUSH
36580: LD_INT 1
36582: ARRAY
36583: PPUSH
36584: CALL_OW 255
36588: PUSH
36589: LD_VAR 0 1
36593: PPUSH
36594: CALL_OW 255
36598: NONEQUAL
36599: OR
36600: IFFALSE 36706
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36602: LD_VAR 0 5
36606: PUSH
36607: LD_INT 1
36609: ARRAY
36610: PPUSH
36611: CALL_OW 305
36615: PUSH
36616: LD_VAR 0 5
36620: PUSH
36621: LD_INT 1
36623: ARRAY
36624: PPUSH
36625: CALL_OW 255
36629: PUSH
36630: LD_VAR 0 1
36634: PPUSH
36635: CALL_OW 255
36639: EQUAL
36640: AND
36641: IFFALSE 36665
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36643: LD_VAR 0 5
36647: PUSH
36648: LD_INT 1
36650: ARRAY
36651: PPUSH
36652: LD_VAR 0 5
36656: PUSH
36657: LD_INT 2
36659: ARRAY
36660: PPUSH
36661: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36665: LD_ADDR_EXP 130
36669: PUSH
36670: LD_EXP 130
36674: PPUSH
36675: LD_VAR 0 4
36679: PPUSH
36680: LD_EXP 130
36684: PUSH
36685: LD_VAR 0 4
36689: ARRAY
36690: PPUSH
36691: LD_VAR 0 3
36695: PPUSH
36696: CALL_OW 3
36700: PPUSH
36701: CALL_OW 1
36705: ST_TO_ADDR
// end ; end ;
36706: GO 36535
36708: POP
36709: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36710: LD_VAR 0 1
36714: PPUSH
36715: LD_EXP 130
36719: PUSH
36720: LD_VAR 0 4
36724: ARRAY
36725: PUSH
36726: LD_INT 0
36728: PLUS
36729: PPUSH
36730: CALL_OW 505
// end ;
36734: LD_VAR 0 2
36738: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36739: LD_INT 0
36741: PPUSH
36742: PPUSH
36743: PPUSH
36744: PPUSH
// if not hack in hackTanks then
36745: LD_VAR 0 1
36749: PUSH
36750: LD_EXP 129
36754: IN
36755: NOT
36756: IFFALSE 36760
// exit ;
36758: GO 36845
// index := GetElementIndex ( hackTanks , hack ) ;
36760: LD_ADDR_VAR 0 5
36764: PUSH
36765: LD_EXP 129
36769: PPUSH
36770: LD_VAR 0 1
36774: PPUSH
36775: CALL 43635 0 2
36779: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36780: LD_ADDR_VAR 0 4
36784: PUSH
36785: DOUBLE
36786: LD_INT 1
36788: DEC
36789: ST_TO_ADDR
36790: LD_EXP 130
36794: PUSH
36795: LD_VAR 0 5
36799: ARRAY
36800: PUSH
36801: FOR_TO
36802: IFFALSE 36843
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36804: LD_EXP 130
36808: PUSH
36809: LD_VAR 0 5
36813: ARRAY
36814: PUSH
36815: LD_VAR 0 4
36819: ARRAY
36820: PUSH
36821: LD_INT 1
36823: ARRAY
36824: PUSH
36825: LD_VAR 0 2
36829: EQUAL
36830: IFFALSE 36841
// KillUnit ( vehicle ) ;
36832: LD_VAR 0 2
36836: PPUSH
36837: CALL_OW 66
36841: GO 36801
36843: POP
36844: POP
// end ;
36845: LD_VAR 0 3
36849: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36850: LD_EXP 134
36854: NOT
36855: IFFALSE 36890
36857: GO 36859
36859: DISABLE
// begin initMiner := true ;
36860: LD_ADDR_EXP 134
36864: PUSH
36865: LD_INT 1
36867: ST_TO_ADDR
// minersList := [ ] ;
36868: LD_ADDR_EXP 135
36872: PUSH
36873: EMPTY
36874: ST_TO_ADDR
// minerMinesList := [ ] ;
36875: LD_ADDR_EXP 136
36879: PUSH
36880: EMPTY
36881: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36882: LD_ADDR_EXP 137
36886: PUSH
36887: LD_INT 5
36889: ST_TO_ADDR
// end ;
36890: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36891: LD_EXP 134
36895: PUSH
36896: LD_INT 34
36898: PUSH
36899: LD_EXP 57
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PPUSH
36908: CALL_OW 69
36912: AND
36913: IFFALSE 37376
36915: GO 36917
36917: DISABLE
36918: LD_INT 0
36920: PPUSH
36921: PPUSH
36922: PPUSH
36923: PPUSH
// begin enable ;
36924: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36925: LD_ADDR_VAR 0 1
36929: PUSH
36930: LD_INT 34
36932: PUSH
36933: LD_EXP 57
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PPUSH
36942: CALL_OW 69
36946: PUSH
36947: FOR_IN
36948: IFFALSE 37020
// begin if not i in minersList then
36950: LD_VAR 0 1
36954: PUSH
36955: LD_EXP 135
36959: IN
36960: NOT
36961: IFFALSE 37018
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36963: LD_ADDR_EXP 135
36967: PUSH
36968: LD_EXP 135
36972: PPUSH
36973: LD_EXP 135
36977: PUSH
36978: LD_INT 1
36980: PLUS
36981: PPUSH
36982: LD_VAR 0 1
36986: PPUSH
36987: CALL_OW 1
36991: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36992: LD_ADDR_EXP 136
36996: PUSH
36997: LD_EXP 136
37001: PPUSH
37002: LD_EXP 136
37006: PUSH
37007: LD_INT 1
37009: PLUS
37010: PPUSH
37011: EMPTY
37012: PPUSH
37013: CALL_OW 1
37017: ST_TO_ADDR
// end end ;
37018: GO 36947
37020: POP
37021: POP
// for i := minerMinesList downto 1 do
37022: LD_ADDR_VAR 0 1
37026: PUSH
37027: DOUBLE
37028: LD_EXP 136
37032: INC
37033: ST_TO_ADDR
37034: LD_INT 1
37036: PUSH
37037: FOR_DOWNTO
37038: IFFALSE 37374
// begin if IsLive ( minersList [ i ] ) then
37040: LD_EXP 135
37044: PUSH
37045: LD_VAR 0 1
37049: ARRAY
37050: PPUSH
37051: CALL_OW 300
37055: IFFALSE 37083
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37057: LD_EXP 135
37061: PUSH
37062: LD_VAR 0 1
37066: ARRAY
37067: PPUSH
37068: LD_EXP 136
37072: PUSH
37073: LD_VAR 0 1
37077: ARRAY
37078: PPUSH
37079: CALL_OW 505
// if not minerMinesList [ i ] then
37083: LD_EXP 136
37087: PUSH
37088: LD_VAR 0 1
37092: ARRAY
37093: NOT
37094: IFFALSE 37098
// continue ;
37096: GO 37037
// for j := minerMinesList [ i ] downto 1 do
37098: LD_ADDR_VAR 0 2
37102: PUSH
37103: DOUBLE
37104: LD_EXP 136
37108: PUSH
37109: LD_VAR 0 1
37113: ARRAY
37114: INC
37115: ST_TO_ADDR
37116: LD_INT 1
37118: PUSH
37119: FOR_DOWNTO
37120: IFFALSE 37370
// begin side := GetSide ( minersList [ i ] ) ;
37122: LD_ADDR_VAR 0 3
37126: PUSH
37127: LD_EXP 135
37131: PUSH
37132: LD_VAR 0 1
37136: ARRAY
37137: PPUSH
37138: CALL_OW 255
37142: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37143: LD_ADDR_VAR 0 4
37147: PUSH
37148: LD_EXP 136
37152: PUSH
37153: LD_VAR 0 1
37157: ARRAY
37158: PUSH
37159: LD_VAR 0 2
37163: ARRAY
37164: PUSH
37165: LD_INT 1
37167: ARRAY
37168: PPUSH
37169: LD_EXP 136
37173: PUSH
37174: LD_VAR 0 1
37178: ARRAY
37179: PUSH
37180: LD_VAR 0 2
37184: ARRAY
37185: PUSH
37186: LD_INT 2
37188: ARRAY
37189: PPUSH
37190: CALL_OW 428
37194: ST_TO_ADDR
// if not tmp then
37195: LD_VAR 0 4
37199: NOT
37200: IFFALSE 37204
// continue ;
37202: GO 37119
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37204: LD_VAR 0 4
37208: PUSH
37209: LD_INT 81
37211: PUSH
37212: LD_VAR 0 3
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PPUSH
37221: CALL_OW 69
37225: IN
37226: PUSH
37227: LD_EXP 136
37231: PUSH
37232: LD_VAR 0 1
37236: ARRAY
37237: PUSH
37238: LD_VAR 0 2
37242: ARRAY
37243: PUSH
37244: LD_INT 1
37246: ARRAY
37247: PPUSH
37248: LD_EXP 136
37252: PUSH
37253: LD_VAR 0 1
37257: ARRAY
37258: PUSH
37259: LD_VAR 0 2
37263: ARRAY
37264: PUSH
37265: LD_INT 2
37267: ARRAY
37268: PPUSH
37269: CALL_OW 458
37273: AND
37274: IFFALSE 37368
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37276: LD_EXP 136
37280: PUSH
37281: LD_VAR 0 1
37285: ARRAY
37286: PUSH
37287: LD_VAR 0 2
37291: ARRAY
37292: PUSH
37293: LD_INT 1
37295: ARRAY
37296: PPUSH
37297: LD_EXP 136
37301: PUSH
37302: LD_VAR 0 1
37306: ARRAY
37307: PUSH
37308: LD_VAR 0 2
37312: ARRAY
37313: PUSH
37314: LD_INT 2
37316: ARRAY
37317: PPUSH
37318: LD_VAR 0 3
37322: PPUSH
37323: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37327: LD_ADDR_EXP 136
37331: PUSH
37332: LD_EXP 136
37336: PPUSH
37337: LD_VAR 0 1
37341: PPUSH
37342: LD_EXP 136
37346: PUSH
37347: LD_VAR 0 1
37351: ARRAY
37352: PPUSH
37353: LD_VAR 0 2
37357: PPUSH
37358: CALL_OW 3
37362: PPUSH
37363: CALL_OW 1
37367: ST_TO_ADDR
// end ; end ;
37368: GO 37119
37370: POP
37371: POP
// end ;
37372: GO 37037
37374: POP
37375: POP
// end ;
37376: PPOPN 4
37378: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37379: LD_INT 0
37381: PPUSH
37382: PPUSH
// result := false ;
37383: LD_ADDR_VAR 0 4
37387: PUSH
37388: LD_INT 0
37390: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37391: LD_VAR 0 1
37395: PPUSH
37396: CALL_OW 264
37400: PUSH
37401: LD_EXP 57
37405: EQUAL
37406: NOT
37407: IFFALSE 37411
// exit ;
37409: GO 37651
// index := GetElementIndex ( minersList , unit ) ;
37411: LD_ADDR_VAR 0 5
37415: PUSH
37416: LD_EXP 135
37420: PPUSH
37421: LD_VAR 0 1
37425: PPUSH
37426: CALL 43635 0 2
37430: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37431: LD_EXP 136
37435: PUSH
37436: LD_VAR 0 5
37440: ARRAY
37441: PUSH
37442: LD_EXP 137
37446: GREATEREQUAL
37447: IFFALSE 37451
// exit ;
37449: GO 37651
// ComMoveXY ( unit , x , y ) ;
37451: LD_VAR 0 1
37455: PPUSH
37456: LD_VAR 0 2
37460: PPUSH
37461: LD_VAR 0 3
37465: PPUSH
37466: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37470: LD_INT 35
37472: PPUSH
37473: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37477: LD_VAR 0 1
37481: PPUSH
37482: LD_VAR 0 2
37486: PPUSH
37487: LD_VAR 0 3
37491: PPUSH
37492: CALL 74354 0 3
37496: NOT
37497: PUSH
37498: LD_VAR 0 1
37502: PPUSH
37503: CALL_OW 314
37507: AND
37508: IFFALSE 37512
// exit ;
37510: GO 37651
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37512: LD_VAR 0 2
37516: PPUSH
37517: LD_VAR 0 3
37521: PPUSH
37522: CALL_OW 428
37526: PUSH
37527: LD_VAR 0 1
37531: EQUAL
37532: PUSH
37533: LD_VAR 0 1
37537: PPUSH
37538: CALL_OW 314
37542: NOT
37543: AND
37544: IFFALSE 37470
// PlaySoundXY ( x , y , PlantMine ) ;
37546: LD_VAR 0 2
37550: PPUSH
37551: LD_VAR 0 3
37555: PPUSH
37556: LD_STRING PlantMine
37558: PPUSH
37559: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37563: LD_VAR 0 2
37567: PPUSH
37568: LD_VAR 0 3
37572: PPUSH
37573: LD_VAR 0 1
37577: PPUSH
37578: CALL_OW 255
37582: PPUSH
37583: LD_INT 0
37585: PPUSH
37586: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37590: LD_ADDR_EXP 136
37594: PUSH
37595: LD_EXP 136
37599: PPUSH
37600: LD_VAR 0 5
37604: PUSH
37605: LD_EXP 136
37609: PUSH
37610: LD_VAR 0 5
37614: ARRAY
37615: PUSH
37616: LD_INT 1
37618: PLUS
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PPUSH
37624: LD_VAR 0 2
37628: PUSH
37629: LD_VAR 0 3
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PPUSH
37638: CALL 43850 0 3
37642: ST_TO_ADDR
// result := true ;
37643: LD_ADDR_VAR 0 4
37647: PUSH
37648: LD_INT 1
37650: ST_TO_ADDR
// end ;
37651: LD_VAR 0 4
37655: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37656: LD_INT 0
37658: PPUSH
37659: PPUSH
37660: PPUSH
// if not unit in minersList then
37661: LD_VAR 0 1
37665: PUSH
37666: LD_EXP 135
37670: IN
37671: NOT
37672: IFFALSE 37676
// exit ;
37674: GO 38068
// index := GetElementIndex ( minersList , unit ) ;
37676: LD_ADDR_VAR 0 6
37680: PUSH
37681: LD_EXP 135
37685: PPUSH
37686: LD_VAR 0 1
37690: PPUSH
37691: CALL 43635 0 2
37695: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37696: LD_ADDR_VAR 0 5
37700: PUSH
37701: DOUBLE
37702: LD_EXP 136
37706: PUSH
37707: LD_VAR 0 6
37711: ARRAY
37712: INC
37713: ST_TO_ADDR
37714: LD_INT 1
37716: PUSH
37717: FOR_DOWNTO
37718: IFFALSE 37879
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37720: LD_EXP 136
37724: PUSH
37725: LD_VAR 0 6
37729: ARRAY
37730: PUSH
37731: LD_VAR 0 5
37735: ARRAY
37736: PUSH
37737: LD_INT 1
37739: ARRAY
37740: PUSH
37741: LD_VAR 0 2
37745: EQUAL
37746: PUSH
37747: LD_EXP 136
37751: PUSH
37752: LD_VAR 0 6
37756: ARRAY
37757: PUSH
37758: LD_VAR 0 5
37762: ARRAY
37763: PUSH
37764: LD_INT 2
37766: ARRAY
37767: PUSH
37768: LD_VAR 0 3
37772: EQUAL
37773: AND
37774: IFFALSE 37877
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37776: LD_EXP 136
37780: PUSH
37781: LD_VAR 0 6
37785: ARRAY
37786: PUSH
37787: LD_VAR 0 5
37791: ARRAY
37792: PUSH
37793: LD_INT 1
37795: ARRAY
37796: PPUSH
37797: LD_EXP 136
37801: PUSH
37802: LD_VAR 0 6
37806: ARRAY
37807: PUSH
37808: LD_VAR 0 5
37812: ARRAY
37813: PUSH
37814: LD_INT 2
37816: ARRAY
37817: PPUSH
37818: LD_VAR 0 1
37822: PPUSH
37823: CALL_OW 255
37827: PPUSH
37828: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37832: LD_ADDR_EXP 136
37836: PUSH
37837: LD_EXP 136
37841: PPUSH
37842: LD_VAR 0 6
37846: PPUSH
37847: LD_EXP 136
37851: PUSH
37852: LD_VAR 0 6
37856: ARRAY
37857: PPUSH
37858: LD_VAR 0 5
37862: PPUSH
37863: CALL_OW 3
37867: PPUSH
37868: CALL_OW 1
37872: ST_TO_ADDR
// exit ;
37873: POP
37874: POP
37875: GO 38068
// end ; end ;
37877: GO 37717
37879: POP
37880: POP
// for i := minerMinesList [ index ] downto 1 do
37881: LD_ADDR_VAR 0 5
37885: PUSH
37886: DOUBLE
37887: LD_EXP 136
37891: PUSH
37892: LD_VAR 0 6
37896: ARRAY
37897: INC
37898: ST_TO_ADDR
37899: LD_INT 1
37901: PUSH
37902: FOR_DOWNTO
37903: IFFALSE 38066
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37905: LD_EXP 136
37909: PUSH
37910: LD_VAR 0 6
37914: ARRAY
37915: PUSH
37916: LD_VAR 0 5
37920: ARRAY
37921: PUSH
37922: LD_INT 1
37924: ARRAY
37925: PPUSH
37926: LD_EXP 136
37930: PUSH
37931: LD_VAR 0 6
37935: ARRAY
37936: PUSH
37937: LD_VAR 0 5
37941: ARRAY
37942: PUSH
37943: LD_INT 2
37945: ARRAY
37946: PPUSH
37947: LD_VAR 0 2
37951: PPUSH
37952: LD_VAR 0 3
37956: PPUSH
37957: CALL_OW 298
37961: PUSH
37962: LD_INT 6
37964: LESS
37965: IFFALSE 38064
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37967: LD_EXP 136
37971: PUSH
37972: LD_VAR 0 6
37976: ARRAY
37977: PUSH
37978: LD_VAR 0 5
37982: ARRAY
37983: PUSH
37984: LD_INT 1
37986: ARRAY
37987: PPUSH
37988: LD_EXP 136
37992: PUSH
37993: LD_VAR 0 6
37997: ARRAY
37998: PUSH
37999: LD_VAR 0 5
38003: ARRAY
38004: PUSH
38005: LD_INT 2
38007: ARRAY
38008: PPUSH
38009: LD_VAR 0 1
38013: PPUSH
38014: CALL_OW 255
38018: PPUSH
38019: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38023: LD_ADDR_EXP 136
38027: PUSH
38028: LD_EXP 136
38032: PPUSH
38033: LD_VAR 0 6
38037: PPUSH
38038: LD_EXP 136
38042: PUSH
38043: LD_VAR 0 6
38047: ARRAY
38048: PPUSH
38049: LD_VAR 0 5
38053: PPUSH
38054: CALL_OW 3
38058: PPUSH
38059: CALL_OW 1
38063: ST_TO_ADDR
// end ; end ;
38064: GO 37902
38066: POP
38067: POP
// end ;
38068: LD_VAR 0 4
38072: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38073: LD_INT 0
38075: PPUSH
38076: PPUSH
38077: PPUSH
38078: PPUSH
38079: PPUSH
38080: PPUSH
38081: PPUSH
38082: PPUSH
38083: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38084: LD_VAR 0 1
38088: PPUSH
38089: CALL_OW 264
38093: PUSH
38094: LD_EXP 57
38098: EQUAL
38099: NOT
38100: PUSH
38101: LD_VAR 0 1
38105: PUSH
38106: LD_EXP 135
38110: IN
38111: NOT
38112: OR
38113: IFFALSE 38117
// exit ;
38115: GO 38439
// index := GetElementIndex ( minersList , unit ) ;
38117: LD_ADDR_VAR 0 6
38121: PUSH
38122: LD_EXP 135
38126: PPUSH
38127: LD_VAR 0 1
38131: PPUSH
38132: CALL 43635 0 2
38136: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38137: LD_ADDR_VAR 0 8
38141: PUSH
38142: LD_EXP 137
38146: PUSH
38147: LD_EXP 136
38151: PUSH
38152: LD_VAR 0 6
38156: ARRAY
38157: MINUS
38158: ST_TO_ADDR
// if not minesFreeAmount then
38159: LD_VAR 0 8
38163: NOT
38164: IFFALSE 38168
// exit ;
38166: GO 38439
// tmp := [ ] ;
38168: LD_ADDR_VAR 0 7
38172: PUSH
38173: EMPTY
38174: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38175: LD_ADDR_VAR 0 5
38179: PUSH
38180: DOUBLE
38181: LD_INT 1
38183: DEC
38184: ST_TO_ADDR
38185: LD_VAR 0 8
38189: PUSH
38190: FOR_TO
38191: IFFALSE 38386
// begin _d := rand ( 0 , 5 ) ;
38193: LD_ADDR_VAR 0 11
38197: PUSH
38198: LD_INT 0
38200: PPUSH
38201: LD_INT 5
38203: PPUSH
38204: CALL_OW 12
38208: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38209: LD_ADDR_VAR 0 12
38213: PUSH
38214: LD_INT 2
38216: PPUSH
38217: LD_INT 6
38219: PPUSH
38220: CALL_OW 12
38224: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38225: LD_ADDR_VAR 0 9
38229: PUSH
38230: LD_VAR 0 2
38234: PPUSH
38235: LD_VAR 0 11
38239: PPUSH
38240: LD_VAR 0 12
38244: PPUSH
38245: CALL_OW 272
38249: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38250: LD_ADDR_VAR 0 10
38254: PUSH
38255: LD_VAR 0 3
38259: PPUSH
38260: LD_VAR 0 11
38264: PPUSH
38265: LD_VAR 0 12
38269: PPUSH
38270: CALL_OW 273
38274: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38275: LD_VAR 0 9
38279: PPUSH
38280: LD_VAR 0 10
38284: PPUSH
38285: CALL_OW 488
38289: PUSH
38290: LD_VAR 0 9
38294: PUSH
38295: LD_VAR 0 10
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_VAR 0 7
38308: IN
38309: NOT
38310: AND
38311: PUSH
38312: LD_VAR 0 9
38316: PPUSH
38317: LD_VAR 0 10
38321: PPUSH
38322: CALL_OW 458
38326: NOT
38327: AND
38328: IFFALSE 38370
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38330: LD_ADDR_VAR 0 7
38334: PUSH
38335: LD_VAR 0 7
38339: PPUSH
38340: LD_VAR 0 7
38344: PUSH
38345: LD_INT 1
38347: PLUS
38348: PPUSH
38349: LD_VAR 0 9
38353: PUSH
38354: LD_VAR 0 10
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PPUSH
38363: CALL_OW 1
38367: ST_TO_ADDR
38368: GO 38384
// i := i - 1 ;
38370: LD_ADDR_VAR 0 5
38374: PUSH
38375: LD_VAR 0 5
38379: PUSH
38380: LD_INT 1
38382: MINUS
38383: ST_TO_ADDR
// end ;
38384: GO 38190
38386: POP
38387: POP
// for i in tmp do
38388: LD_ADDR_VAR 0 5
38392: PUSH
38393: LD_VAR 0 7
38397: PUSH
38398: FOR_IN
38399: IFFALSE 38437
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38401: LD_VAR 0 1
38405: PPUSH
38406: LD_VAR 0 5
38410: PUSH
38411: LD_INT 1
38413: ARRAY
38414: PPUSH
38415: LD_VAR 0 5
38419: PUSH
38420: LD_INT 2
38422: ARRAY
38423: PPUSH
38424: CALL 37379 0 3
38428: NOT
38429: IFFALSE 38435
// exit ;
38431: POP
38432: POP
38433: GO 38439
38435: GO 38398
38437: POP
38438: POP
// end ;
38439: LD_VAR 0 4
38443: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38444: LD_INT 0
38446: PPUSH
38447: PPUSH
38448: PPUSH
38449: PPUSH
38450: PPUSH
38451: PPUSH
38452: PPUSH
// if not GetClass ( unit ) = class_sniper then
38453: LD_VAR 0 1
38457: PPUSH
38458: CALL_OW 257
38462: PUSH
38463: LD_INT 5
38465: EQUAL
38466: NOT
38467: IFFALSE 38471
// exit ;
38469: GO 38859
// dist := 8 ;
38471: LD_ADDR_VAR 0 5
38475: PUSH
38476: LD_INT 8
38478: ST_TO_ADDR
// viewRange := 12 ;
38479: LD_ADDR_VAR 0 7
38483: PUSH
38484: LD_INT 12
38486: ST_TO_ADDR
// side := GetSide ( unit ) ;
38487: LD_ADDR_VAR 0 6
38491: PUSH
38492: LD_VAR 0 1
38496: PPUSH
38497: CALL_OW 255
38501: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38502: LD_INT 61
38504: PPUSH
38505: LD_VAR 0 6
38509: PPUSH
38510: CALL_OW 321
38514: PUSH
38515: LD_INT 2
38517: EQUAL
38518: IFFALSE 38528
// viewRange := 16 ;
38520: LD_ADDR_VAR 0 7
38524: PUSH
38525: LD_INT 16
38527: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38528: LD_VAR 0 1
38532: PPUSH
38533: LD_VAR 0 2
38537: PPUSH
38538: LD_VAR 0 3
38542: PPUSH
38543: CALL_OW 297
38547: PUSH
38548: LD_VAR 0 5
38552: GREATER
38553: IFFALSE 38632
// begin ComMoveXY ( unit , x , y ) ;
38555: LD_VAR 0 1
38559: PPUSH
38560: LD_VAR 0 2
38564: PPUSH
38565: LD_VAR 0 3
38569: PPUSH
38570: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38574: LD_INT 35
38576: PPUSH
38577: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38581: LD_VAR 0 1
38585: PPUSH
38586: LD_VAR 0 2
38590: PPUSH
38591: LD_VAR 0 3
38595: PPUSH
38596: CALL 74354 0 3
38600: NOT
38601: IFFALSE 38605
// exit ;
38603: GO 38859
// until GetDistUnitXY ( unit , x , y ) < dist ;
38605: LD_VAR 0 1
38609: PPUSH
38610: LD_VAR 0 2
38614: PPUSH
38615: LD_VAR 0 3
38619: PPUSH
38620: CALL_OW 297
38624: PUSH
38625: LD_VAR 0 5
38629: LESS
38630: IFFALSE 38574
// end ; ComTurnXY ( unit , x , y ) ;
38632: LD_VAR 0 1
38636: PPUSH
38637: LD_VAR 0 2
38641: PPUSH
38642: LD_VAR 0 3
38646: PPUSH
38647: CALL_OW 118
// wait ( 5 ) ;
38651: LD_INT 5
38653: PPUSH
38654: CALL_OW 67
// _d := GetDir ( unit ) ;
38658: LD_ADDR_VAR 0 10
38662: PUSH
38663: LD_VAR 0 1
38667: PPUSH
38668: CALL_OW 254
38672: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38673: LD_ADDR_VAR 0 8
38677: PUSH
38678: LD_VAR 0 1
38682: PPUSH
38683: CALL_OW 250
38687: PPUSH
38688: LD_VAR 0 10
38692: PPUSH
38693: LD_VAR 0 5
38697: PPUSH
38698: CALL_OW 272
38702: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38703: LD_ADDR_VAR 0 9
38707: PUSH
38708: LD_VAR 0 1
38712: PPUSH
38713: CALL_OW 251
38717: PPUSH
38718: LD_VAR 0 10
38722: PPUSH
38723: LD_VAR 0 5
38727: PPUSH
38728: CALL_OW 273
38732: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38733: LD_VAR 0 8
38737: PPUSH
38738: LD_VAR 0 9
38742: PPUSH
38743: CALL_OW 488
38747: NOT
38748: IFFALSE 38752
// exit ;
38750: GO 38859
// ComAnimCustom ( unit , 1 ) ;
38752: LD_VAR 0 1
38756: PPUSH
38757: LD_INT 1
38759: PPUSH
38760: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38764: LD_VAR 0 8
38768: PPUSH
38769: LD_VAR 0 9
38773: PPUSH
38774: LD_VAR 0 6
38778: PPUSH
38779: LD_VAR 0 7
38783: PPUSH
38784: CALL_OW 330
// repeat wait ( 1 ) ;
38788: LD_INT 1
38790: PPUSH
38791: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38795: LD_VAR 0 1
38799: PPUSH
38800: CALL_OW 316
38804: PUSH
38805: LD_VAR 0 1
38809: PPUSH
38810: CALL_OW 314
38814: OR
38815: PUSH
38816: LD_VAR 0 1
38820: PPUSH
38821: CALL_OW 302
38825: NOT
38826: OR
38827: PUSH
38828: LD_VAR 0 1
38832: PPUSH
38833: CALL_OW 301
38837: OR
38838: IFFALSE 38788
// RemoveSeeing ( _x , _y , side ) ;
38840: LD_VAR 0 8
38844: PPUSH
38845: LD_VAR 0 9
38849: PPUSH
38850: LD_VAR 0 6
38854: PPUSH
38855: CALL_OW 331
// end ; end_of_file
38859: LD_VAR 0 4
38863: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38864: LD_INT 0
38866: PPUSH
38867: PPUSH
// if exist_mode then
38868: LD_VAR 0 2
38872: IFFALSE 38897
// unit := CreateCharacter ( prefix & ident ) else
38874: LD_ADDR_VAR 0 5
38878: PUSH
38879: LD_VAR 0 3
38883: PUSH
38884: LD_VAR 0 1
38888: STR
38889: PPUSH
38890: CALL_OW 34
38894: ST_TO_ADDR
38895: GO 38912
// unit := NewCharacter ( ident ) ;
38897: LD_ADDR_VAR 0 5
38901: PUSH
38902: LD_VAR 0 1
38906: PPUSH
38907: CALL_OW 25
38911: ST_TO_ADDR
// result := unit ;
38912: LD_ADDR_VAR 0 4
38916: PUSH
38917: LD_VAR 0 5
38921: ST_TO_ADDR
// end ;
38922: LD_VAR 0 4
38926: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38927: LD_INT 0
38929: PPUSH
38930: PPUSH
// if not side or not nation then
38931: LD_VAR 0 1
38935: NOT
38936: PUSH
38937: LD_VAR 0 2
38941: NOT
38942: OR
38943: IFFALSE 38947
// exit ;
38945: GO 39715
// case nation of nation_american :
38947: LD_VAR 0 2
38951: PUSH
38952: LD_INT 1
38954: DOUBLE
38955: EQUAL
38956: IFTRUE 38960
38958: GO 39174
38960: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38961: LD_ADDR_VAR 0 4
38965: PUSH
38966: LD_INT 35
38968: PUSH
38969: LD_INT 45
38971: PUSH
38972: LD_INT 46
38974: PUSH
38975: LD_INT 47
38977: PUSH
38978: LD_INT 82
38980: PUSH
38981: LD_INT 83
38983: PUSH
38984: LD_INT 84
38986: PUSH
38987: LD_INT 85
38989: PUSH
38990: LD_INT 86
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: LD_INT 6
39001: PUSH
39002: LD_INT 15
39004: PUSH
39005: LD_INT 16
39007: PUSH
39008: LD_INT 7
39010: PUSH
39011: LD_INT 12
39013: PUSH
39014: LD_INT 13
39016: PUSH
39017: LD_INT 10
39019: PUSH
39020: LD_INT 14
39022: PUSH
39023: LD_INT 20
39025: PUSH
39026: LD_INT 21
39028: PUSH
39029: LD_INT 22
39031: PUSH
39032: LD_INT 25
39034: PUSH
39035: LD_INT 32
39037: PUSH
39038: LD_INT 27
39040: PUSH
39041: LD_INT 36
39043: PUSH
39044: LD_INT 69
39046: PUSH
39047: LD_INT 39
39049: PUSH
39050: LD_INT 34
39052: PUSH
39053: LD_INT 40
39055: PUSH
39056: LD_INT 48
39058: PUSH
39059: LD_INT 49
39061: PUSH
39062: LD_INT 50
39064: PUSH
39065: LD_INT 51
39067: PUSH
39068: LD_INT 52
39070: PUSH
39071: LD_INT 53
39073: PUSH
39074: LD_INT 54
39076: PUSH
39077: LD_INT 55
39079: PUSH
39080: LD_INT 56
39082: PUSH
39083: LD_INT 57
39085: PUSH
39086: LD_INT 58
39088: PUSH
39089: LD_INT 59
39091: PUSH
39092: LD_INT 60
39094: PUSH
39095: LD_INT 61
39097: PUSH
39098: LD_INT 62
39100: PUSH
39101: LD_INT 80
39103: PUSH
39104: LD_INT 82
39106: PUSH
39107: LD_INT 83
39109: PUSH
39110: LD_INT 84
39112: PUSH
39113: LD_INT 85
39115: PUSH
39116: LD_INT 86
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: ST_TO_ADDR
39172: GO 39639
39174: LD_INT 2
39176: DOUBLE
39177: EQUAL
39178: IFTRUE 39182
39180: GO 39408
39182: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39183: LD_ADDR_VAR 0 4
39187: PUSH
39188: LD_INT 35
39190: PUSH
39191: LD_INT 45
39193: PUSH
39194: LD_INT 46
39196: PUSH
39197: LD_INT 47
39199: PUSH
39200: LD_INT 82
39202: PUSH
39203: LD_INT 83
39205: PUSH
39206: LD_INT 84
39208: PUSH
39209: LD_INT 85
39211: PUSH
39212: LD_INT 87
39214: PUSH
39215: LD_INT 70
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: LD_INT 11
39223: PUSH
39224: LD_INT 3
39226: PUSH
39227: LD_INT 4
39229: PUSH
39230: LD_INT 5
39232: PUSH
39233: LD_INT 6
39235: PUSH
39236: LD_INT 15
39238: PUSH
39239: LD_INT 18
39241: PUSH
39242: LD_INT 7
39244: PUSH
39245: LD_INT 17
39247: PUSH
39248: LD_INT 8
39250: PUSH
39251: LD_INT 20
39253: PUSH
39254: LD_INT 21
39256: PUSH
39257: LD_INT 22
39259: PUSH
39260: LD_INT 72
39262: PUSH
39263: LD_INT 26
39265: PUSH
39266: LD_INT 69
39268: PUSH
39269: LD_INT 39
39271: PUSH
39272: LD_INT 40
39274: PUSH
39275: LD_INT 41
39277: PUSH
39278: LD_INT 42
39280: PUSH
39281: LD_INT 43
39283: PUSH
39284: LD_INT 48
39286: PUSH
39287: LD_INT 49
39289: PUSH
39290: LD_INT 50
39292: PUSH
39293: LD_INT 51
39295: PUSH
39296: LD_INT 52
39298: PUSH
39299: LD_INT 53
39301: PUSH
39302: LD_INT 54
39304: PUSH
39305: LD_INT 55
39307: PUSH
39308: LD_INT 56
39310: PUSH
39311: LD_INT 60
39313: PUSH
39314: LD_INT 61
39316: PUSH
39317: LD_INT 62
39319: PUSH
39320: LD_INT 66
39322: PUSH
39323: LD_INT 67
39325: PUSH
39326: LD_INT 68
39328: PUSH
39329: LD_INT 81
39331: PUSH
39332: LD_INT 82
39334: PUSH
39335: LD_INT 83
39337: PUSH
39338: LD_INT 84
39340: PUSH
39341: LD_INT 85
39343: PUSH
39344: LD_INT 87
39346: PUSH
39347: LD_INT 88
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: ST_TO_ADDR
39406: GO 39639
39408: LD_INT 3
39410: DOUBLE
39411: EQUAL
39412: IFTRUE 39416
39414: GO 39638
39416: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39417: LD_ADDR_VAR 0 4
39421: PUSH
39422: LD_INT 46
39424: PUSH
39425: LD_INT 47
39427: PUSH
39428: LD_INT 1
39430: PUSH
39431: LD_INT 2
39433: PUSH
39434: LD_INT 82
39436: PUSH
39437: LD_INT 83
39439: PUSH
39440: LD_INT 84
39442: PUSH
39443: LD_INT 85
39445: PUSH
39446: LD_INT 86
39448: PUSH
39449: LD_INT 11
39451: PUSH
39452: LD_INT 9
39454: PUSH
39455: LD_INT 20
39457: PUSH
39458: LD_INT 19
39460: PUSH
39461: LD_INT 21
39463: PUSH
39464: LD_INT 24
39466: PUSH
39467: LD_INT 22
39469: PUSH
39470: LD_INT 25
39472: PUSH
39473: LD_INT 28
39475: PUSH
39476: LD_INT 29
39478: PUSH
39479: LD_INT 30
39481: PUSH
39482: LD_INT 31
39484: PUSH
39485: LD_INT 37
39487: PUSH
39488: LD_INT 38
39490: PUSH
39491: LD_INT 32
39493: PUSH
39494: LD_INT 27
39496: PUSH
39497: LD_INT 33
39499: PUSH
39500: LD_INT 69
39502: PUSH
39503: LD_INT 39
39505: PUSH
39506: LD_INT 34
39508: PUSH
39509: LD_INT 40
39511: PUSH
39512: LD_INT 71
39514: PUSH
39515: LD_INT 23
39517: PUSH
39518: LD_INT 44
39520: PUSH
39521: LD_INT 48
39523: PUSH
39524: LD_INT 49
39526: PUSH
39527: LD_INT 50
39529: PUSH
39530: LD_INT 51
39532: PUSH
39533: LD_INT 52
39535: PUSH
39536: LD_INT 53
39538: PUSH
39539: LD_INT 54
39541: PUSH
39542: LD_INT 55
39544: PUSH
39545: LD_INT 56
39547: PUSH
39548: LD_INT 57
39550: PUSH
39551: LD_INT 58
39553: PUSH
39554: LD_INT 59
39556: PUSH
39557: LD_INT 63
39559: PUSH
39560: LD_INT 64
39562: PUSH
39563: LD_INT 65
39565: PUSH
39566: LD_INT 82
39568: PUSH
39569: LD_INT 83
39571: PUSH
39572: LD_INT 84
39574: PUSH
39575: LD_INT 85
39577: PUSH
39578: LD_INT 86
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: ST_TO_ADDR
39636: GO 39639
39638: POP
// if state > - 1 and state < 3 then
39639: LD_VAR 0 3
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: GREATER
39648: PUSH
39649: LD_VAR 0 3
39653: PUSH
39654: LD_INT 3
39656: LESS
39657: AND
39658: IFFALSE 39715
// for i in result do
39660: LD_ADDR_VAR 0 5
39664: PUSH
39665: LD_VAR 0 4
39669: PUSH
39670: FOR_IN
39671: IFFALSE 39713
// if GetTech ( i , side ) <> state then
39673: LD_VAR 0 5
39677: PPUSH
39678: LD_VAR 0 1
39682: PPUSH
39683: CALL_OW 321
39687: PUSH
39688: LD_VAR 0 3
39692: NONEQUAL
39693: IFFALSE 39711
// result := result diff i ;
39695: LD_ADDR_VAR 0 4
39699: PUSH
39700: LD_VAR 0 4
39704: PUSH
39705: LD_VAR 0 5
39709: DIFF
39710: ST_TO_ADDR
39711: GO 39670
39713: POP
39714: POP
// end ;
39715: LD_VAR 0 4
39719: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39720: LD_INT 0
39722: PPUSH
39723: PPUSH
39724: PPUSH
// result := true ;
39725: LD_ADDR_VAR 0 3
39729: PUSH
39730: LD_INT 1
39732: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39733: LD_ADDR_VAR 0 5
39737: PUSH
39738: LD_VAR 0 2
39742: PPUSH
39743: CALL_OW 480
39747: ST_TO_ADDR
// if not tmp then
39748: LD_VAR 0 5
39752: NOT
39753: IFFALSE 39757
// exit ;
39755: GO 39806
// for i in tmp do
39757: LD_ADDR_VAR 0 4
39761: PUSH
39762: LD_VAR 0 5
39766: PUSH
39767: FOR_IN
39768: IFFALSE 39804
// if GetTech ( i , side ) <> state_researched then
39770: LD_VAR 0 4
39774: PPUSH
39775: LD_VAR 0 1
39779: PPUSH
39780: CALL_OW 321
39784: PUSH
39785: LD_INT 2
39787: NONEQUAL
39788: IFFALSE 39802
// begin result := false ;
39790: LD_ADDR_VAR 0 3
39794: PUSH
39795: LD_INT 0
39797: ST_TO_ADDR
// exit ;
39798: POP
39799: POP
39800: GO 39806
// end ;
39802: GO 39767
39804: POP
39805: POP
// end ;
39806: LD_VAR 0 3
39810: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39811: LD_INT 0
39813: PPUSH
39814: PPUSH
39815: PPUSH
39816: PPUSH
39817: PPUSH
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
39822: PPUSH
39823: PPUSH
39824: PPUSH
39825: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39826: LD_VAR 0 1
39830: NOT
39831: PUSH
39832: LD_VAR 0 1
39836: PPUSH
39837: CALL_OW 257
39841: PUSH
39842: LD_INT 9
39844: NONEQUAL
39845: OR
39846: IFFALSE 39850
// exit ;
39848: GO 40423
// side := GetSide ( unit ) ;
39850: LD_ADDR_VAR 0 9
39854: PUSH
39855: LD_VAR 0 1
39859: PPUSH
39860: CALL_OW 255
39864: ST_TO_ADDR
// tech_space := tech_spacanom ;
39865: LD_ADDR_VAR 0 12
39869: PUSH
39870: LD_INT 29
39872: ST_TO_ADDR
// tech_time := tech_taurad ;
39873: LD_ADDR_VAR 0 13
39877: PUSH
39878: LD_INT 28
39880: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39881: LD_ADDR_VAR 0 11
39885: PUSH
39886: LD_VAR 0 1
39890: PPUSH
39891: CALL_OW 310
39895: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39896: LD_VAR 0 11
39900: PPUSH
39901: CALL_OW 247
39905: PUSH
39906: LD_INT 2
39908: EQUAL
39909: IFFALSE 39913
// exit ;
39911: GO 40423
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39913: LD_ADDR_VAR 0 8
39917: PUSH
39918: LD_INT 81
39920: PUSH
39921: LD_VAR 0 9
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 3
39932: PUSH
39933: LD_INT 21
39935: PUSH
39936: LD_INT 3
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PPUSH
39951: CALL_OW 69
39955: ST_TO_ADDR
// if not tmp then
39956: LD_VAR 0 8
39960: NOT
39961: IFFALSE 39965
// exit ;
39963: GO 40423
// if in_unit then
39965: LD_VAR 0 11
39969: IFFALSE 39993
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39971: LD_ADDR_VAR 0 10
39975: PUSH
39976: LD_VAR 0 8
39980: PPUSH
39981: LD_VAR 0 11
39985: PPUSH
39986: CALL_OW 74
39990: ST_TO_ADDR
39991: GO 40013
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39993: LD_ADDR_VAR 0 10
39997: PUSH
39998: LD_VAR 0 8
40002: PPUSH
40003: LD_VAR 0 1
40007: PPUSH
40008: CALL_OW 74
40012: ST_TO_ADDR
// if not enemy then
40013: LD_VAR 0 10
40017: NOT
40018: IFFALSE 40022
// exit ;
40020: GO 40423
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40022: LD_VAR 0 11
40026: PUSH
40027: LD_VAR 0 11
40031: PPUSH
40032: LD_VAR 0 10
40036: PPUSH
40037: CALL_OW 296
40041: PUSH
40042: LD_INT 13
40044: GREATER
40045: AND
40046: PUSH
40047: LD_VAR 0 1
40051: PPUSH
40052: LD_VAR 0 10
40056: PPUSH
40057: CALL_OW 296
40061: PUSH
40062: LD_INT 12
40064: GREATER
40065: OR
40066: IFFALSE 40070
// exit ;
40068: GO 40423
// missile := [ 1 ] ;
40070: LD_ADDR_VAR 0 14
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: EMPTY
40079: LIST
40080: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40081: LD_VAR 0 9
40085: PPUSH
40086: LD_VAR 0 12
40090: PPUSH
40091: CALL_OW 325
40095: IFFALSE 40124
// missile := Replace ( missile , missile + 1 , 2 ) ;
40097: LD_ADDR_VAR 0 14
40101: PUSH
40102: LD_VAR 0 14
40106: PPUSH
40107: LD_VAR 0 14
40111: PUSH
40112: LD_INT 1
40114: PLUS
40115: PPUSH
40116: LD_INT 2
40118: PPUSH
40119: CALL_OW 1
40123: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40124: LD_VAR 0 9
40128: PPUSH
40129: LD_VAR 0 13
40133: PPUSH
40134: CALL_OW 325
40138: PUSH
40139: LD_VAR 0 10
40143: PPUSH
40144: CALL_OW 255
40148: PPUSH
40149: LD_VAR 0 13
40153: PPUSH
40154: CALL_OW 325
40158: NOT
40159: AND
40160: IFFALSE 40189
// missile := Replace ( missile , missile + 1 , 3 ) ;
40162: LD_ADDR_VAR 0 14
40166: PUSH
40167: LD_VAR 0 14
40171: PPUSH
40172: LD_VAR 0 14
40176: PUSH
40177: LD_INT 1
40179: PLUS
40180: PPUSH
40181: LD_INT 3
40183: PPUSH
40184: CALL_OW 1
40188: ST_TO_ADDR
// if missile < 2 then
40189: LD_VAR 0 14
40193: PUSH
40194: LD_INT 2
40196: LESS
40197: IFFALSE 40201
// exit ;
40199: GO 40423
// x := GetX ( enemy ) ;
40201: LD_ADDR_VAR 0 4
40205: PUSH
40206: LD_VAR 0 10
40210: PPUSH
40211: CALL_OW 250
40215: ST_TO_ADDR
// y := GetY ( enemy ) ;
40216: LD_ADDR_VAR 0 5
40220: PUSH
40221: LD_VAR 0 10
40225: PPUSH
40226: CALL_OW 251
40230: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40231: LD_ADDR_VAR 0 6
40235: PUSH
40236: LD_VAR 0 4
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PPUSH
40245: LD_INT 1
40247: PPUSH
40248: CALL_OW 12
40252: PLUS
40253: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40254: LD_ADDR_VAR 0 7
40258: PUSH
40259: LD_VAR 0 5
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PPUSH
40268: LD_INT 1
40270: PPUSH
40271: CALL_OW 12
40275: PLUS
40276: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40277: LD_VAR 0 6
40281: PPUSH
40282: LD_VAR 0 7
40286: PPUSH
40287: CALL_OW 488
40291: NOT
40292: IFFALSE 40314
// begin _x := x ;
40294: LD_ADDR_VAR 0 6
40298: PUSH
40299: LD_VAR 0 4
40303: ST_TO_ADDR
// _y := y ;
40304: LD_ADDR_VAR 0 7
40308: PUSH
40309: LD_VAR 0 5
40313: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40314: LD_ADDR_VAR 0 3
40318: PUSH
40319: LD_INT 1
40321: PPUSH
40322: LD_VAR 0 14
40326: PPUSH
40327: CALL_OW 12
40331: ST_TO_ADDR
// case i of 1 :
40332: LD_VAR 0 3
40336: PUSH
40337: LD_INT 1
40339: DOUBLE
40340: EQUAL
40341: IFTRUE 40345
40343: GO 40362
40345: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40346: LD_VAR 0 1
40350: PPUSH
40351: LD_VAR 0 10
40355: PPUSH
40356: CALL_OW 115
40360: GO 40423
40362: LD_INT 2
40364: DOUBLE
40365: EQUAL
40366: IFTRUE 40370
40368: GO 40392
40370: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40371: LD_VAR 0 1
40375: PPUSH
40376: LD_VAR 0 6
40380: PPUSH
40381: LD_VAR 0 7
40385: PPUSH
40386: CALL_OW 153
40390: GO 40423
40392: LD_INT 3
40394: DOUBLE
40395: EQUAL
40396: IFTRUE 40400
40398: GO 40422
40400: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40401: LD_VAR 0 1
40405: PPUSH
40406: LD_VAR 0 6
40410: PPUSH
40411: LD_VAR 0 7
40415: PPUSH
40416: CALL_OW 154
40420: GO 40423
40422: POP
// end ;
40423: LD_VAR 0 2
40427: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40428: LD_INT 0
40430: PPUSH
40431: PPUSH
40432: PPUSH
40433: PPUSH
40434: PPUSH
40435: PPUSH
// if not unit or not building then
40436: LD_VAR 0 1
40440: NOT
40441: PUSH
40442: LD_VAR 0 2
40446: NOT
40447: OR
40448: IFFALSE 40452
// exit ;
40450: GO 40610
// x := GetX ( building ) ;
40452: LD_ADDR_VAR 0 5
40456: PUSH
40457: LD_VAR 0 2
40461: PPUSH
40462: CALL_OW 250
40466: ST_TO_ADDR
// y := GetY ( building ) ;
40467: LD_ADDR_VAR 0 6
40471: PUSH
40472: LD_VAR 0 2
40476: PPUSH
40477: CALL_OW 251
40481: ST_TO_ADDR
// for i = 0 to 5 do
40482: LD_ADDR_VAR 0 4
40486: PUSH
40487: DOUBLE
40488: LD_INT 0
40490: DEC
40491: ST_TO_ADDR
40492: LD_INT 5
40494: PUSH
40495: FOR_TO
40496: IFFALSE 40608
// begin _x := ShiftX ( x , i , 3 ) ;
40498: LD_ADDR_VAR 0 7
40502: PUSH
40503: LD_VAR 0 5
40507: PPUSH
40508: LD_VAR 0 4
40512: PPUSH
40513: LD_INT 3
40515: PPUSH
40516: CALL_OW 272
40520: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40521: LD_ADDR_VAR 0 8
40525: PUSH
40526: LD_VAR 0 6
40530: PPUSH
40531: LD_VAR 0 4
40535: PPUSH
40536: LD_INT 3
40538: PPUSH
40539: CALL_OW 273
40543: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40544: LD_VAR 0 7
40548: PPUSH
40549: LD_VAR 0 8
40553: PPUSH
40554: CALL_OW 488
40558: NOT
40559: IFFALSE 40563
// continue ;
40561: GO 40495
// if HexInfo ( _x , _y ) = 0 then
40563: LD_VAR 0 7
40567: PPUSH
40568: LD_VAR 0 8
40572: PPUSH
40573: CALL_OW 428
40577: PUSH
40578: LD_INT 0
40580: EQUAL
40581: IFFALSE 40606
// begin ComMoveXY ( unit , _x , _y ) ;
40583: LD_VAR 0 1
40587: PPUSH
40588: LD_VAR 0 7
40592: PPUSH
40593: LD_VAR 0 8
40597: PPUSH
40598: CALL_OW 111
// exit ;
40602: POP
40603: POP
40604: GO 40610
// end ; end ;
40606: GO 40495
40608: POP
40609: POP
// end ;
40610: LD_VAR 0 3
40614: RET
// export function ScanBase ( side , base_area ) ; begin
40615: LD_INT 0
40617: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40618: LD_ADDR_VAR 0 3
40622: PUSH
40623: LD_VAR 0 2
40627: PPUSH
40628: LD_INT 81
40630: PUSH
40631: LD_VAR 0 1
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PPUSH
40640: CALL_OW 70
40644: ST_TO_ADDR
// end ;
40645: LD_VAR 0 3
40649: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40650: LD_INT 0
40652: PPUSH
40653: PPUSH
40654: PPUSH
40655: PPUSH
// result := false ;
40656: LD_ADDR_VAR 0 2
40660: PUSH
40661: LD_INT 0
40663: ST_TO_ADDR
// side := GetSide ( unit ) ;
40664: LD_ADDR_VAR 0 3
40668: PUSH
40669: LD_VAR 0 1
40673: PPUSH
40674: CALL_OW 255
40678: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40679: LD_ADDR_VAR 0 4
40683: PUSH
40684: LD_VAR 0 1
40688: PPUSH
40689: CALL_OW 248
40693: ST_TO_ADDR
// case nat of 1 :
40694: LD_VAR 0 4
40698: PUSH
40699: LD_INT 1
40701: DOUBLE
40702: EQUAL
40703: IFTRUE 40707
40705: GO 40718
40707: POP
// tech := tech_lassight ; 2 :
40708: LD_ADDR_VAR 0 5
40712: PUSH
40713: LD_INT 12
40715: ST_TO_ADDR
40716: GO 40757
40718: LD_INT 2
40720: DOUBLE
40721: EQUAL
40722: IFTRUE 40726
40724: GO 40737
40726: POP
// tech := tech_mortar ; 3 :
40727: LD_ADDR_VAR 0 5
40731: PUSH
40732: LD_INT 41
40734: ST_TO_ADDR
40735: GO 40757
40737: LD_INT 3
40739: DOUBLE
40740: EQUAL
40741: IFTRUE 40745
40743: GO 40756
40745: POP
// tech := tech_bazooka ; end ;
40746: LD_ADDR_VAR 0 5
40750: PUSH
40751: LD_INT 44
40753: ST_TO_ADDR
40754: GO 40757
40756: POP
// if Researched ( side , tech ) then
40757: LD_VAR 0 3
40761: PPUSH
40762: LD_VAR 0 5
40766: PPUSH
40767: CALL_OW 325
40771: IFFALSE 40798
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40773: LD_ADDR_VAR 0 2
40777: PUSH
40778: LD_INT 5
40780: PUSH
40781: LD_INT 8
40783: PUSH
40784: LD_INT 9
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: LIST
40791: PUSH
40792: LD_VAR 0 4
40796: ARRAY
40797: ST_TO_ADDR
// end ;
40798: LD_VAR 0 2
40802: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40803: LD_INT 0
40805: PPUSH
40806: PPUSH
40807: PPUSH
// if not mines then
40808: LD_VAR 0 2
40812: NOT
40813: IFFALSE 40817
// exit ;
40815: GO 40961
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40817: LD_ADDR_VAR 0 5
40821: PUSH
40822: LD_INT 81
40824: PUSH
40825: LD_VAR 0 1
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 3
40836: PUSH
40837: LD_INT 21
40839: PUSH
40840: LD_INT 3
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PPUSH
40855: CALL_OW 69
40859: ST_TO_ADDR
// for i in mines do
40860: LD_ADDR_VAR 0 4
40864: PUSH
40865: LD_VAR 0 2
40869: PUSH
40870: FOR_IN
40871: IFFALSE 40959
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40873: LD_VAR 0 4
40877: PUSH
40878: LD_INT 1
40880: ARRAY
40881: PPUSH
40882: LD_VAR 0 4
40886: PUSH
40887: LD_INT 2
40889: ARRAY
40890: PPUSH
40891: CALL_OW 458
40895: NOT
40896: IFFALSE 40900
// continue ;
40898: GO 40870
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40900: LD_VAR 0 4
40904: PUSH
40905: LD_INT 1
40907: ARRAY
40908: PPUSH
40909: LD_VAR 0 4
40913: PUSH
40914: LD_INT 2
40916: ARRAY
40917: PPUSH
40918: CALL_OW 428
40922: PUSH
40923: LD_VAR 0 5
40927: IN
40928: IFFALSE 40957
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40930: LD_VAR 0 4
40934: PUSH
40935: LD_INT 1
40937: ARRAY
40938: PPUSH
40939: LD_VAR 0 4
40943: PUSH
40944: LD_INT 2
40946: ARRAY
40947: PPUSH
40948: LD_VAR 0 1
40952: PPUSH
40953: CALL_OW 456
// end ;
40957: GO 40870
40959: POP
40960: POP
// end ;
40961: LD_VAR 0 3
40965: RET
// export function Count ( array ) ; var i ; begin
40966: LD_INT 0
40968: PPUSH
40969: PPUSH
// result := 0 ;
40970: LD_ADDR_VAR 0 2
40974: PUSH
40975: LD_INT 0
40977: ST_TO_ADDR
// for i in array do
40978: LD_ADDR_VAR 0 3
40982: PUSH
40983: LD_VAR 0 1
40987: PUSH
40988: FOR_IN
40989: IFFALSE 41013
// if i then
40991: LD_VAR 0 3
40995: IFFALSE 41011
// result := result + 1 ;
40997: LD_ADDR_VAR 0 2
41001: PUSH
41002: LD_VAR 0 2
41006: PUSH
41007: LD_INT 1
41009: PLUS
41010: ST_TO_ADDR
41011: GO 40988
41013: POP
41014: POP
// end ;
41015: LD_VAR 0 2
41019: RET
// export function IsEmpty ( building ) ; begin
41020: LD_INT 0
41022: PPUSH
// if not building then
41023: LD_VAR 0 1
41027: NOT
41028: IFFALSE 41032
// exit ;
41030: GO 41075
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41032: LD_ADDR_VAR 0 2
41036: PUSH
41037: LD_VAR 0 1
41041: PUSH
41042: LD_INT 22
41044: PUSH
41045: LD_VAR 0 1
41049: PPUSH
41050: CALL_OW 255
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 58
41061: PUSH
41062: EMPTY
41063: LIST
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PPUSH
41069: CALL_OW 69
41073: IN
41074: ST_TO_ADDR
// end ;
41075: LD_VAR 0 2
41079: RET
// export function IsNotFull ( building ) ; begin
41080: LD_INT 0
41082: PPUSH
// if not building then
41083: LD_VAR 0 1
41087: NOT
41088: IFFALSE 41092
// exit ;
41090: GO 41111
// result := UnitsInside ( building ) < 6 ;
41092: LD_ADDR_VAR 0 2
41096: PUSH
41097: LD_VAR 0 1
41101: PPUSH
41102: CALL_OW 313
41106: PUSH
41107: LD_INT 6
41109: LESS
41110: ST_TO_ADDR
// end ;
41111: LD_VAR 0 2
41115: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41116: LD_INT 0
41118: PPUSH
41119: PPUSH
41120: PPUSH
41121: PPUSH
// tmp := [ ] ;
41122: LD_ADDR_VAR 0 3
41126: PUSH
41127: EMPTY
41128: ST_TO_ADDR
// list := [ ] ;
41129: LD_ADDR_VAR 0 5
41133: PUSH
41134: EMPTY
41135: ST_TO_ADDR
// for i = 16 to 25 do
41136: LD_ADDR_VAR 0 4
41140: PUSH
41141: DOUBLE
41142: LD_INT 16
41144: DEC
41145: ST_TO_ADDR
41146: LD_INT 25
41148: PUSH
41149: FOR_TO
41150: IFFALSE 41223
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41152: LD_ADDR_VAR 0 3
41156: PUSH
41157: LD_VAR 0 3
41161: PUSH
41162: LD_INT 22
41164: PUSH
41165: LD_VAR 0 1
41169: PPUSH
41170: CALL_OW 255
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 91
41181: PUSH
41182: LD_VAR 0 1
41186: PUSH
41187: LD_INT 6
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 30
41197: PUSH
41198: LD_VAR 0 4
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: LIST
41211: PUSH
41212: EMPTY
41213: LIST
41214: PPUSH
41215: CALL_OW 69
41219: ADD
41220: ST_TO_ADDR
41221: GO 41149
41223: POP
41224: POP
// for i = 1 to tmp do
41225: LD_ADDR_VAR 0 4
41229: PUSH
41230: DOUBLE
41231: LD_INT 1
41233: DEC
41234: ST_TO_ADDR
41235: LD_VAR 0 3
41239: PUSH
41240: FOR_TO
41241: IFFALSE 41329
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41243: LD_ADDR_VAR 0 5
41247: PUSH
41248: LD_VAR 0 5
41252: PUSH
41253: LD_VAR 0 3
41257: PUSH
41258: LD_VAR 0 4
41262: ARRAY
41263: PPUSH
41264: CALL_OW 266
41268: PUSH
41269: LD_VAR 0 3
41273: PUSH
41274: LD_VAR 0 4
41278: ARRAY
41279: PPUSH
41280: CALL_OW 250
41284: PUSH
41285: LD_VAR 0 3
41289: PUSH
41290: LD_VAR 0 4
41294: ARRAY
41295: PPUSH
41296: CALL_OW 251
41300: PUSH
41301: LD_VAR 0 3
41305: PUSH
41306: LD_VAR 0 4
41310: ARRAY
41311: PPUSH
41312: CALL_OW 254
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: PUSH
41323: EMPTY
41324: LIST
41325: ADD
41326: ST_TO_ADDR
41327: GO 41240
41329: POP
41330: POP
// result := list ;
41331: LD_ADDR_VAR 0 2
41335: PUSH
41336: LD_VAR 0 5
41340: ST_TO_ADDR
// end ;
41341: LD_VAR 0 2
41345: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41346: LD_INT 0
41348: PPUSH
41349: PPUSH
41350: PPUSH
41351: PPUSH
41352: PPUSH
41353: PPUSH
41354: PPUSH
// if not factory then
41355: LD_VAR 0 1
41359: NOT
41360: IFFALSE 41364
// exit ;
41362: GO 41957
// if control = control_apeman then
41364: LD_VAR 0 4
41368: PUSH
41369: LD_INT 5
41371: EQUAL
41372: IFFALSE 41481
// begin tmp := UnitsInside ( factory ) ;
41374: LD_ADDR_VAR 0 8
41378: PUSH
41379: LD_VAR 0 1
41383: PPUSH
41384: CALL_OW 313
41388: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41389: LD_VAR 0 8
41393: PPUSH
41394: LD_INT 25
41396: PUSH
41397: LD_INT 12
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PPUSH
41404: CALL_OW 72
41408: NOT
41409: IFFALSE 41419
// control := control_manual ;
41411: LD_ADDR_VAR 0 4
41415: PUSH
41416: LD_INT 1
41418: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41419: LD_ADDR_VAR 0 8
41423: PUSH
41424: LD_VAR 0 1
41428: PPUSH
41429: CALL 41116 0 1
41433: ST_TO_ADDR
// if tmp then
41434: LD_VAR 0 8
41438: IFFALSE 41481
// begin for i in tmp do
41440: LD_ADDR_VAR 0 7
41444: PUSH
41445: LD_VAR 0 8
41449: PUSH
41450: FOR_IN
41451: IFFALSE 41479
// if i [ 1 ] = b_ext_radio then
41453: LD_VAR 0 7
41457: PUSH
41458: LD_INT 1
41460: ARRAY
41461: PUSH
41462: LD_INT 22
41464: EQUAL
41465: IFFALSE 41477
// begin control := control_remote ;
41467: LD_ADDR_VAR 0 4
41471: PUSH
41472: LD_INT 2
41474: ST_TO_ADDR
// break ;
41475: GO 41479
// end ;
41477: GO 41450
41479: POP
41480: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41481: LD_VAR 0 1
41485: PPUSH
41486: LD_VAR 0 2
41490: PPUSH
41491: LD_VAR 0 3
41495: PPUSH
41496: LD_VAR 0 4
41500: PPUSH
41501: LD_VAR 0 5
41505: PPUSH
41506: CALL_OW 448
41510: IFFALSE 41545
// begin result := [ chassis , engine , control , weapon ] ;
41512: LD_ADDR_VAR 0 6
41516: PUSH
41517: LD_VAR 0 2
41521: PUSH
41522: LD_VAR 0 3
41526: PUSH
41527: LD_VAR 0 4
41531: PUSH
41532: LD_VAR 0 5
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: ST_TO_ADDR
// exit ;
41543: GO 41957
// end ; _chassis := AvailableChassisList ( factory ) ;
41545: LD_ADDR_VAR 0 9
41549: PUSH
41550: LD_VAR 0 1
41554: PPUSH
41555: CALL_OW 475
41559: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41560: LD_ADDR_VAR 0 11
41564: PUSH
41565: LD_VAR 0 1
41569: PPUSH
41570: CALL_OW 476
41574: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41575: LD_ADDR_VAR 0 12
41579: PUSH
41580: LD_VAR 0 1
41584: PPUSH
41585: CALL_OW 477
41589: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41590: LD_ADDR_VAR 0 10
41594: PUSH
41595: LD_VAR 0 1
41599: PPUSH
41600: CALL_OW 478
41604: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41605: LD_VAR 0 9
41609: NOT
41610: PUSH
41611: LD_VAR 0 11
41615: NOT
41616: OR
41617: PUSH
41618: LD_VAR 0 12
41622: NOT
41623: OR
41624: PUSH
41625: LD_VAR 0 10
41629: NOT
41630: OR
41631: IFFALSE 41666
// begin result := [ chassis , engine , control , weapon ] ;
41633: LD_ADDR_VAR 0 6
41637: PUSH
41638: LD_VAR 0 2
41642: PUSH
41643: LD_VAR 0 3
41647: PUSH
41648: LD_VAR 0 4
41652: PUSH
41653: LD_VAR 0 5
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: ST_TO_ADDR
// exit ;
41664: GO 41957
// end ; if not chassis in _chassis then
41666: LD_VAR 0 2
41670: PUSH
41671: LD_VAR 0 9
41675: IN
41676: NOT
41677: IFFALSE 41703
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41679: LD_ADDR_VAR 0 2
41683: PUSH
41684: LD_VAR 0 9
41688: PUSH
41689: LD_INT 1
41691: PPUSH
41692: LD_VAR 0 9
41696: PPUSH
41697: CALL_OW 12
41701: ARRAY
41702: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41703: LD_VAR 0 2
41707: PPUSH
41708: LD_VAR 0 3
41712: PPUSH
41713: CALL 41962 0 2
41717: NOT
41718: IFFALSE 41777
// repeat engine := _engine [ 1 ] ;
41720: LD_ADDR_VAR 0 3
41724: PUSH
41725: LD_VAR 0 11
41729: PUSH
41730: LD_INT 1
41732: ARRAY
41733: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41734: LD_ADDR_VAR 0 11
41738: PUSH
41739: LD_VAR 0 11
41743: PPUSH
41744: LD_INT 1
41746: PPUSH
41747: CALL_OW 3
41751: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41752: LD_VAR 0 2
41756: PPUSH
41757: LD_VAR 0 3
41761: PPUSH
41762: CALL 41962 0 2
41766: PUSH
41767: LD_VAR 0 11
41771: PUSH
41772: EMPTY
41773: EQUAL
41774: OR
41775: IFFALSE 41720
// if not control in _control then
41777: LD_VAR 0 4
41781: PUSH
41782: LD_VAR 0 12
41786: IN
41787: NOT
41788: IFFALSE 41814
// control := _control [ rand ( 1 , _control ) ] ;
41790: LD_ADDR_VAR 0 4
41794: PUSH
41795: LD_VAR 0 12
41799: PUSH
41800: LD_INT 1
41802: PPUSH
41803: LD_VAR 0 12
41807: PPUSH
41808: CALL_OW 12
41812: ARRAY
41813: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41814: LD_VAR 0 2
41818: PPUSH
41819: LD_VAR 0 5
41823: PPUSH
41824: CALL 42182 0 2
41828: NOT
41829: IFFALSE 41888
// repeat weapon := _weapon [ 1 ] ;
41831: LD_ADDR_VAR 0 5
41835: PUSH
41836: LD_VAR 0 10
41840: PUSH
41841: LD_INT 1
41843: ARRAY
41844: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41845: LD_ADDR_VAR 0 10
41849: PUSH
41850: LD_VAR 0 10
41854: PPUSH
41855: LD_INT 1
41857: PPUSH
41858: CALL_OW 3
41862: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41863: LD_VAR 0 2
41867: PPUSH
41868: LD_VAR 0 5
41872: PPUSH
41873: CALL 42182 0 2
41877: PUSH
41878: LD_VAR 0 10
41882: PUSH
41883: EMPTY
41884: EQUAL
41885: OR
41886: IFFALSE 41831
// result := [ ] ;
41888: LD_ADDR_VAR 0 6
41892: PUSH
41893: EMPTY
41894: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41895: LD_VAR 0 1
41899: PPUSH
41900: LD_VAR 0 2
41904: PPUSH
41905: LD_VAR 0 3
41909: PPUSH
41910: LD_VAR 0 4
41914: PPUSH
41915: LD_VAR 0 5
41919: PPUSH
41920: CALL_OW 448
41924: IFFALSE 41957
// result := [ chassis , engine , control , weapon ] ;
41926: LD_ADDR_VAR 0 6
41930: PUSH
41931: LD_VAR 0 2
41935: PUSH
41936: LD_VAR 0 3
41940: PUSH
41941: LD_VAR 0 4
41945: PUSH
41946: LD_VAR 0 5
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: ST_TO_ADDR
// end ;
41957: LD_VAR 0 6
41961: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41962: LD_INT 0
41964: PPUSH
// if not chassis or not engine then
41965: LD_VAR 0 1
41969: NOT
41970: PUSH
41971: LD_VAR 0 2
41975: NOT
41976: OR
41977: IFFALSE 41981
// exit ;
41979: GO 42177
// case engine of engine_solar :
41981: LD_VAR 0 2
41985: PUSH
41986: LD_INT 2
41988: DOUBLE
41989: EQUAL
41990: IFTRUE 41994
41992: GO 42032
41994: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41995: LD_ADDR_VAR 0 3
41999: PUSH
42000: LD_INT 11
42002: PUSH
42003: LD_INT 12
42005: PUSH
42006: LD_INT 13
42008: PUSH
42009: LD_INT 14
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: LD_INT 2
42017: PUSH
42018: LD_INT 3
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: ST_TO_ADDR
42030: GO 42161
42032: LD_INT 1
42034: DOUBLE
42035: EQUAL
42036: IFTRUE 42040
42038: GO 42102
42040: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42041: LD_ADDR_VAR 0 3
42045: PUSH
42046: LD_INT 11
42048: PUSH
42049: LD_INT 12
42051: PUSH
42052: LD_INT 13
42054: PUSH
42055: LD_INT 14
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: LD_INT 2
42063: PUSH
42064: LD_INT 3
42066: PUSH
42067: LD_INT 4
42069: PUSH
42070: LD_INT 5
42072: PUSH
42073: LD_INT 21
42075: PUSH
42076: LD_INT 23
42078: PUSH
42079: LD_INT 22
42081: PUSH
42082: LD_INT 24
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: ST_TO_ADDR
42100: GO 42161
42102: LD_INT 3
42104: DOUBLE
42105: EQUAL
42106: IFTRUE 42110
42108: GO 42160
42110: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42111: LD_ADDR_VAR 0 3
42115: PUSH
42116: LD_INT 13
42118: PUSH
42119: LD_INT 14
42121: PUSH
42122: LD_INT 2
42124: PUSH
42125: LD_INT 3
42127: PUSH
42128: LD_INT 4
42130: PUSH
42131: LD_INT 5
42133: PUSH
42134: LD_INT 21
42136: PUSH
42137: LD_INT 22
42139: PUSH
42140: LD_INT 23
42142: PUSH
42143: LD_INT 24
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: ST_TO_ADDR
42158: GO 42161
42160: POP
// result := ( chassis in result ) ;
42161: LD_ADDR_VAR 0 3
42165: PUSH
42166: LD_VAR 0 1
42170: PUSH
42171: LD_VAR 0 3
42175: IN
42176: ST_TO_ADDR
// end ;
42177: LD_VAR 0 3
42181: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42182: LD_INT 0
42184: PPUSH
// if not chassis or not weapon then
42185: LD_VAR 0 1
42189: NOT
42190: PUSH
42191: LD_VAR 0 2
42195: NOT
42196: OR
42197: IFFALSE 42201
// exit ;
42199: GO 43263
// case weapon of us_machine_gun :
42201: LD_VAR 0 2
42205: PUSH
42206: LD_INT 2
42208: DOUBLE
42209: EQUAL
42210: IFTRUE 42214
42212: GO 42244
42214: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42215: LD_ADDR_VAR 0 3
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: LD_INT 2
42225: PUSH
42226: LD_INT 3
42228: PUSH
42229: LD_INT 4
42231: PUSH
42232: LD_INT 5
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: ST_TO_ADDR
42242: GO 43247
42244: LD_INT 3
42246: DOUBLE
42247: EQUAL
42248: IFTRUE 42252
42250: GO 42282
42252: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42253: LD_ADDR_VAR 0 3
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: LD_INT 3
42266: PUSH
42267: LD_INT 4
42269: PUSH
42270: LD_INT 5
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: ST_TO_ADDR
42280: GO 43247
42282: LD_INT 11
42284: DOUBLE
42285: EQUAL
42286: IFTRUE 42290
42288: GO 42320
42290: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42291: LD_ADDR_VAR 0 3
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: LD_INT 2
42301: PUSH
42302: LD_INT 3
42304: PUSH
42305: LD_INT 4
42307: PUSH
42308: LD_INT 5
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: ST_TO_ADDR
42318: GO 43247
42320: LD_INT 4
42322: DOUBLE
42323: EQUAL
42324: IFTRUE 42328
42326: GO 42354
42328: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42329: LD_ADDR_VAR 0 3
42333: PUSH
42334: LD_INT 2
42336: PUSH
42337: LD_INT 3
42339: PUSH
42340: LD_INT 4
42342: PUSH
42343: LD_INT 5
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: ST_TO_ADDR
42352: GO 43247
42354: LD_INT 5
42356: DOUBLE
42357: EQUAL
42358: IFTRUE 42362
42360: GO 42388
42362: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42363: LD_ADDR_VAR 0 3
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 3
42373: PUSH
42374: LD_INT 4
42376: PUSH
42377: LD_INT 5
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: ST_TO_ADDR
42386: GO 43247
42388: LD_INT 9
42390: DOUBLE
42391: EQUAL
42392: IFTRUE 42396
42394: GO 42422
42396: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42397: LD_ADDR_VAR 0 3
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: LD_INT 3
42407: PUSH
42408: LD_INT 4
42410: PUSH
42411: LD_INT 5
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: ST_TO_ADDR
42420: GO 43247
42422: LD_INT 7
42424: DOUBLE
42425: EQUAL
42426: IFTRUE 42430
42428: GO 42456
42430: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42431: LD_ADDR_VAR 0 3
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: LD_INT 3
42441: PUSH
42442: LD_INT 4
42444: PUSH
42445: LD_INT 5
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: ST_TO_ADDR
42454: GO 43247
42456: LD_INT 12
42458: DOUBLE
42459: EQUAL
42460: IFTRUE 42464
42462: GO 42490
42464: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42465: LD_ADDR_VAR 0 3
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: LD_INT 3
42475: PUSH
42476: LD_INT 4
42478: PUSH
42479: LD_INT 5
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: ST_TO_ADDR
42488: GO 43247
42490: LD_INT 13
42492: DOUBLE
42493: EQUAL
42494: IFTRUE 42498
42496: GO 42524
42498: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42499: LD_ADDR_VAR 0 3
42503: PUSH
42504: LD_INT 2
42506: PUSH
42507: LD_INT 3
42509: PUSH
42510: LD_INT 4
42512: PUSH
42513: LD_INT 5
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: ST_TO_ADDR
42522: GO 43247
42524: LD_INT 14
42526: DOUBLE
42527: EQUAL
42528: IFTRUE 42532
42530: GO 42550
42532: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42533: LD_ADDR_VAR 0 3
42537: PUSH
42538: LD_INT 4
42540: PUSH
42541: LD_INT 5
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: ST_TO_ADDR
42548: GO 43247
42550: LD_INT 6
42552: DOUBLE
42553: EQUAL
42554: IFTRUE 42558
42556: GO 42576
42558: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42559: LD_ADDR_VAR 0 3
42563: PUSH
42564: LD_INT 4
42566: PUSH
42567: LD_INT 5
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: ST_TO_ADDR
42574: GO 43247
42576: LD_INT 10
42578: DOUBLE
42579: EQUAL
42580: IFTRUE 42584
42582: GO 42602
42584: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42585: LD_ADDR_VAR 0 3
42589: PUSH
42590: LD_INT 4
42592: PUSH
42593: LD_INT 5
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: ST_TO_ADDR
42600: GO 43247
42602: LD_INT 22
42604: DOUBLE
42605: EQUAL
42606: IFTRUE 42610
42608: GO 42636
42610: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: LD_INT 11
42618: PUSH
42619: LD_INT 12
42621: PUSH
42622: LD_INT 13
42624: PUSH
42625: LD_INT 14
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: ST_TO_ADDR
42634: GO 43247
42636: LD_INT 23
42638: DOUBLE
42639: EQUAL
42640: IFTRUE 42644
42642: GO 42670
42644: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42645: LD_ADDR_VAR 0 3
42649: PUSH
42650: LD_INT 11
42652: PUSH
42653: LD_INT 12
42655: PUSH
42656: LD_INT 13
42658: PUSH
42659: LD_INT 14
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: ST_TO_ADDR
42668: GO 43247
42670: LD_INT 24
42672: DOUBLE
42673: EQUAL
42674: IFTRUE 42678
42676: GO 42704
42678: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42679: LD_ADDR_VAR 0 3
42683: PUSH
42684: LD_INT 11
42686: PUSH
42687: LD_INT 12
42689: PUSH
42690: LD_INT 13
42692: PUSH
42693: LD_INT 14
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: ST_TO_ADDR
42702: GO 43247
42704: LD_INT 30
42706: DOUBLE
42707: EQUAL
42708: IFTRUE 42712
42710: GO 42738
42712: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42713: LD_ADDR_VAR 0 3
42717: PUSH
42718: LD_INT 11
42720: PUSH
42721: LD_INT 12
42723: PUSH
42724: LD_INT 13
42726: PUSH
42727: LD_INT 14
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: ST_TO_ADDR
42736: GO 43247
42738: LD_INT 25
42740: DOUBLE
42741: EQUAL
42742: IFTRUE 42746
42744: GO 42764
42746: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42747: LD_ADDR_VAR 0 3
42751: PUSH
42752: LD_INT 13
42754: PUSH
42755: LD_INT 14
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: ST_TO_ADDR
42762: GO 43247
42764: LD_INT 27
42766: DOUBLE
42767: EQUAL
42768: IFTRUE 42772
42770: GO 42790
42772: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42773: LD_ADDR_VAR 0 3
42777: PUSH
42778: LD_INT 13
42780: PUSH
42781: LD_INT 14
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: ST_TO_ADDR
42788: GO 43247
42790: LD_EXP 55
42794: DOUBLE
42795: EQUAL
42796: IFTRUE 42800
42798: GO 42826
42800: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42801: LD_ADDR_VAR 0 3
42805: PUSH
42806: LD_INT 11
42808: PUSH
42809: LD_INT 12
42811: PUSH
42812: LD_INT 13
42814: PUSH
42815: LD_INT 14
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: ST_TO_ADDR
42824: GO 43247
42826: LD_INT 28
42828: DOUBLE
42829: EQUAL
42830: IFTRUE 42834
42832: GO 42852
42834: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42835: LD_ADDR_VAR 0 3
42839: PUSH
42840: LD_INT 13
42842: PUSH
42843: LD_INT 14
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: ST_TO_ADDR
42850: GO 43247
42852: LD_INT 29
42854: DOUBLE
42855: EQUAL
42856: IFTRUE 42860
42858: GO 42878
42860: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42861: LD_ADDR_VAR 0 3
42865: PUSH
42866: LD_INT 13
42868: PUSH
42869: LD_INT 14
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: ST_TO_ADDR
42876: GO 43247
42878: LD_INT 31
42880: DOUBLE
42881: EQUAL
42882: IFTRUE 42886
42884: GO 42904
42886: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42887: LD_ADDR_VAR 0 3
42891: PUSH
42892: LD_INT 13
42894: PUSH
42895: LD_INT 14
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: ST_TO_ADDR
42902: GO 43247
42904: LD_INT 26
42906: DOUBLE
42907: EQUAL
42908: IFTRUE 42912
42910: GO 42930
42912: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42913: LD_ADDR_VAR 0 3
42917: PUSH
42918: LD_INT 13
42920: PUSH
42921: LD_INT 14
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: ST_TO_ADDR
42928: GO 43247
42930: LD_INT 42
42932: DOUBLE
42933: EQUAL
42934: IFTRUE 42938
42936: GO 42964
42938: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42939: LD_ADDR_VAR 0 3
42943: PUSH
42944: LD_INT 21
42946: PUSH
42947: LD_INT 22
42949: PUSH
42950: LD_INT 23
42952: PUSH
42953: LD_INT 24
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: ST_TO_ADDR
42962: GO 43247
42964: LD_INT 43
42966: DOUBLE
42967: EQUAL
42968: IFTRUE 42972
42970: GO 42998
42972: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42973: LD_ADDR_VAR 0 3
42977: PUSH
42978: LD_INT 21
42980: PUSH
42981: LD_INT 22
42983: PUSH
42984: LD_INT 23
42986: PUSH
42987: LD_INT 24
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: ST_TO_ADDR
42996: GO 43247
42998: LD_INT 44
43000: DOUBLE
43001: EQUAL
43002: IFTRUE 43006
43004: GO 43032
43006: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43007: LD_ADDR_VAR 0 3
43011: PUSH
43012: LD_INT 21
43014: PUSH
43015: LD_INT 22
43017: PUSH
43018: LD_INT 23
43020: PUSH
43021: LD_INT 24
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: ST_TO_ADDR
43030: GO 43247
43032: LD_INT 45
43034: DOUBLE
43035: EQUAL
43036: IFTRUE 43040
43038: GO 43066
43040: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43041: LD_ADDR_VAR 0 3
43045: PUSH
43046: LD_INT 21
43048: PUSH
43049: LD_INT 22
43051: PUSH
43052: LD_INT 23
43054: PUSH
43055: LD_INT 24
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: ST_TO_ADDR
43064: GO 43247
43066: LD_INT 49
43068: DOUBLE
43069: EQUAL
43070: IFTRUE 43074
43072: GO 43100
43074: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43075: LD_ADDR_VAR 0 3
43079: PUSH
43080: LD_INT 21
43082: PUSH
43083: LD_INT 22
43085: PUSH
43086: LD_INT 23
43088: PUSH
43089: LD_INT 24
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: ST_TO_ADDR
43098: GO 43247
43100: LD_INT 51
43102: DOUBLE
43103: EQUAL
43104: IFTRUE 43108
43106: GO 43134
43108: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43109: LD_ADDR_VAR 0 3
43113: PUSH
43114: LD_INT 21
43116: PUSH
43117: LD_INT 22
43119: PUSH
43120: LD_INT 23
43122: PUSH
43123: LD_INT 24
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: ST_TO_ADDR
43132: GO 43247
43134: LD_INT 52
43136: DOUBLE
43137: EQUAL
43138: IFTRUE 43142
43140: GO 43168
43142: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43143: LD_ADDR_VAR 0 3
43147: PUSH
43148: LD_INT 21
43150: PUSH
43151: LD_INT 22
43153: PUSH
43154: LD_INT 23
43156: PUSH
43157: LD_INT 24
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: ST_TO_ADDR
43166: GO 43247
43168: LD_INT 53
43170: DOUBLE
43171: EQUAL
43172: IFTRUE 43176
43174: GO 43194
43176: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43177: LD_ADDR_VAR 0 3
43181: PUSH
43182: LD_INT 23
43184: PUSH
43185: LD_INT 24
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: ST_TO_ADDR
43192: GO 43247
43194: LD_INT 46
43196: DOUBLE
43197: EQUAL
43198: IFTRUE 43202
43200: GO 43220
43202: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43203: LD_ADDR_VAR 0 3
43207: PUSH
43208: LD_INT 23
43210: PUSH
43211: LD_INT 24
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: ST_TO_ADDR
43218: GO 43247
43220: LD_INT 47
43222: DOUBLE
43223: EQUAL
43224: IFTRUE 43228
43226: GO 43246
43228: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43229: LD_ADDR_VAR 0 3
43233: PUSH
43234: LD_INT 23
43236: PUSH
43237: LD_INT 24
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: ST_TO_ADDR
43244: GO 43247
43246: POP
// result := ( chassis in result ) ;
43247: LD_ADDR_VAR 0 3
43251: PUSH
43252: LD_VAR 0 1
43256: PUSH
43257: LD_VAR 0 3
43261: IN
43262: ST_TO_ADDR
// end ;
43263: LD_VAR 0 3
43267: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43268: LD_INT 0
43270: PPUSH
43271: PPUSH
43272: PPUSH
43273: PPUSH
43274: PPUSH
43275: PPUSH
43276: PPUSH
// result := array ;
43277: LD_ADDR_VAR 0 5
43281: PUSH
43282: LD_VAR 0 1
43286: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43287: LD_VAR 0 1
43291: NOT
43292: PUSH
43293: LD_VAR 0 2
43297: NOT
43298: OR
43299: PUSH
43300: LD_VAR 0 3
43304: NOT
43305: OR
43306: PUSH
43307: LD_VAR 0 2
43311: PUSH
43312: LD_VAR 0 1
43316: GREATER
43317: OR
43318: PUSH
43319: LD_VAR 0 3
43323: PUSH
43324: LD_VAR 0 1
43328: GREATER
43329: OR
43330: IFFALSE 43334
// exit ;
43332: GO 43630
// if direction then
43334: LD_VAR 0 4
43338: IFFALSE 43402
// begin d := 1 ;
43340: LD_ADDR_VAR 0 9
43344: PUSH
43345: LD_INT 1
43347: ST_TO_ADDR
// if i_from > i_to then
43348: LD_VAR 0 2
43352: PUSH
43353: LD_VAR 0 3
43357: GREATER
43358: IFFALSE 43384
// length := ( array - i_from ) + i_to else
43360: LD_ADDR_VAR 0 11
43364: PUSH
43365: LD_VAR 0 1
43369: PUSH
43370: LD_VAR 0 2
43374: MINUS
43375: PUSH
43376: LD_VAR 0 3
43380: PLUS
43381: ST_TO_ADDR
43382: GO 43400
// length := i_to - i_from ;
43384: LD_ADDR_VAR 0 11
43388: PUSH
43389: LD_VAR 0 3
43393: PUSH
43394: LD_VAR 0 2
43398: MINUS
43399: ST_TO_ADDR
// end else
43400: GO 43463
// begin d := - 1 ;
43402: LD_ADDR_VAR 0 9
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: ST_TO_ADDR
// if i_from > i_to then
43411: LD_VAR 0 2
43415: PUSH
43416: LD_VAR 0 3
43420: GREATER
43421: IFFALSE 43441
// length := i_from - i_to else
43423: LD_ADDR_VAR 0 11
43427: PUSH
43428: LD_VAR 0 2
43432: PUSH
43433: LD_VAR 0 3
43437: MINUS
43438: ST_TO_ADDR
43439: GO 43463
// length := ( array - i_to ) + i_from ;
43441: LD_ADDR_VAR 0 11
43445: PUSH
43446: LD_VAR 0 1
43450: PUSH
43451: LD_VAR 0 3
43455: MINUS
43456: PUSH
43457: LD_VAR 0 2
43461: PLUS
43462: ST_TO_ADDR
// end ; if not length then
43463: LD_VAR 0 11
43467: NOT
43468: IFFALSE 43472
// exit ;
43470: GO 43630
// tmp := array ;
43472: LD_ADDR_VAR 0 10
43476: PUSH
43477: LD_VAR 0 1
43481: ST_TO_ADDR
// for i = 1 to length do
43482: LD_ADDR_VAR 0 6
43486: PUSH
43487: DOUBLE
43488: LD_INT 1
43490: DEC
43491: ST_TO_ADDR
43492: LD_VAR 0 11
43496: PUSH
43497: FOR_TO
43498: IFFALSE 43618
// begin for j = 1 to array do
43500: LD_ADDR_VAR 0 7
43504: PUSH
43505: DOUBLE
43506: LD_INT 1
43508: DEC
43509: ST_TO_ADDR
43510: LD_VAR 0 1
43514: PUSH
43515: FOR_TO
43516: IFFALSE 43604
// begin k := j + d ;
43518: LD_ADDR_VAR 0 8
43522: PUSH
43523: LD_VAR 0 7
43527: PUSH
43528: LD_VAR 0 9
43532: PLUS
43533: ST_TO_ADDR
// if k > array then
43534: LD_VAR 0 8
43538: PUSH
43539: LD_VAR 0 1
43543: GREATER
43544: IFFALSE 43554
// k := 1 ;
43546: LD_ADDR_VAR 0 8
43550: PUSH
43551: LD_INT 1
43553: ST_TO_ADDR
// if not k then
43554: LD_VAR 0 8
43558: NOT
43559: IFFALSE 43571
// k := array ;
43561: LD_ADDR_VAR 0 8
43565: PUSH
43566: LD_VAR 0 1
43570: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43571: LD_ADDR_VAR 0 10
43575: PUSH
43576: LD_VAR 0 10
43580: PPUSH
43581: LD_VAR 0 8
43585: PPUSH
43586: LD_VAR 0 1
43590: PUSH
43591: LD_VAR 0 7
43595: ARRAY
43596: PPUSH
43597: CALL_OW 1
43601: ST_TO_ADDR
// end ;
43602: GO 43515
43604: POP
43605: POP
// array := tmp ;
43606: LD_ADDR_VAR 0 1
43610: PUSH
43611: LD_VAR 0 10
43615: ST_TO_ADDR
// end ;
43616: GO 43497
43618: POP
43619: POP
// result := array ;
43620: LD_ADDR_VAR 0 5
43624: PUSH
43625: LD_VAR 0 1
43629: ST_TO_ADDR
// end ;
43630: LD_VAR 0 5
43634: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43635: LD_INT 0
43637: PPUSH
43638: PPUSH
// result := 0 ;
43639: LD_ADDR_VAR 0 3
43643: PUSH
43644: LD_INT 0
43646: ST_TO_ADDR
// if not array or not value in array then
43647: LD_VAR 0 1
43651: NOT
43652: PUSH
43653: LD_VAR 0 2
43657: PUSH
43658: LD_VAR 0 1
43662: IN
43663: NOT
43664: OR
43665: IFFALSE 43669
// exit ;
43667: GO 43723
// for i = 1 to array do
43669: LD_ADDR_VAR 0 4
43673: PUSH
43674: DOUBLE
43675: LD_INT 1
43677: DEC
43678: ST_TO_ADDR
43679: LD_VAR 0 1
43683: PUSH
43684: FOR_TO
43685: IFFALSE 43721
// if value = array [ i ] then
43687: LD_VAR 0 2
43691: PUSH
43692: LD_VAR 0 1
43696: PUSH
43697: LD_VAR 0 4
43701: ARRAY
43702: EQUAL
43703: IFFALSE 43719
// begin result := i ;
43705: LD_ADDR_VAR 0 3
43709: PUSH
43710: LD_VAR 0 4
43714: ST_TO_ADDR
// exit ;
43715: POP
43716: POP
43717: GO 43723
// end ;
43719: GO 43684
43721: POP
43722: POP
// end ;
43723: LD_VAR 0 3
43727: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43728: LD_INT 0
43730: PPUSH
// vc_chassis := chassis ;
43731: LD_ADDR_OWVAR 37
43735: PUSH
43736: LD_VAR 0 1
43740: ST_TO_ADDR
// vc_engine := engine ;
43741: LD_ADDR_OWVAR 39
43745: PUSH
43746: LD_VAR 0 2
43750: ST_TO_ADDR
// vc_control := control ;
43751: LD_ADDR_OWVAR 38
43755: PUSH
43756: LD_VAR 0 3
43760: ST_TO_ADDR
// vc_weapon := weapon ;
43761: LD_ADDR_OWVAR 40
43765: PUSH
43766: LD_VAR 0 4
43770: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43771: LD_ADDR_OWVAR 41
43775: PUSH
43776: LD_VAR 0 5
43780: ST_TO_ADDR
// end ;
43781: LD_VAR 0 6
43785: RET
// export function WantPlant ( unit ) ; var task ; begin
43786: LD_INT 0
43788: PPUSH
43789: PPUSH
// result := false ;
43790: LD_ADDR_VAR 0 2
43794: PUSH
43795: LD_INT 0
43797: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43798: LD_ADDR_VAR 0 3
43802: PUSH
43803: LD_VAR 0 1
43807: PPUSH
43808: CALL_OW 437
43812: ST_TO_ADDR
// if task then
43813: LD_VAR 0 3
43817: IFFALSE 43845
// if task [ 1 ] [ 1 ] = p then
43819: LD_VAR 0 3
43823: PUSH
43824: LD_INT 1
43826: ARRAY
43827: PUSH
43828: LD_INT 1
43830: ARRAY
43831: PUSH
43832: LD_STRING p
43834: EQUAL
43835: IFFALSE 43845
// result := true ;
43837: LD_ADDR_VAR 0 2
43841: PUSH
43842: LD_INT 1
43844: ST_TO_ADDR
// end ;
43845: LD_VAR 0 2
43849: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43850: LD_INT 0
43852: PPUSH
43853: PPUSH
43854: PPUSH
43855: PPUSH
// if pos < 1 then
43856: LD_VAR 0 2
43860: PUSH
43861: LD_INT 1
43863: LESS
43864: IFFALSE 43868
// exit ;
43866: GO 44171
// if pos = 1 then
43868: LD_VAR 0 2
43872: PUSH
43873: LD_INT 1
43875: EQUAL
43876: IFFALSE 43909
// result := Replace ( arr , pos [ 1 ] , value ) else
43878: LD_ADDR_VAR 0 4
43882: PUSH
43883: LD_VAR 0 1
43887: PPUSH
43888: LD_VAR 0 2
43892: PUSH
43893: LD_INT 1
43895: ARRAY
43896: PPUSH
43897: LD_VAR 0 3
43901: PPUSH
43902: CALL_OW 1
43906: ST_TO_ADDR
43907: GO 44171
// begin tmp := arr ;
43909: LD_ADDR_VAR 0 6
43913: PUSH
43914: LD_VAR 0 1
43918: ST_TO_ADDR
// s_arr := [ tmp ] ;
43919: LD_ADDR_VAR 0 7
43923: PUSH
43924: LD_VAR 0 6
43928: PUSH
43929: EMPTY
43930: LIST
43931: ST_TO_ADDR
// for i = 1 to pos - 1 do
43932: LD_ADDR_VAR 0 5
43936: PUSH
43937: DOUBLE
43938: LD_INT 1
43940: DEC
43941: ST_TO_ADDR
43942: LD_VAR 0 2
43946: PUSH
43947: LD_INT 1
43949: MINUS
43950: PUSH
43951: FOR_TO
43952: IFFALSE 43997
// begin tmp := tmp [ pos [ i ] ] ;
43954: LD_ADDR_VAR 0 6
43958: PUSH
43959: LD_VAR 0 6
43963: PUSH
43964: LD_VAR 0 2
43968: PUSH
43969: LD_VAR 0 5
43973: ARRAY
43974: ARRAY
43975: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43976: LD_ADDR_VAR 0 7
43980: PUSH
43981: LD_VAR 0 7
43985: PUSH
43986: LD_VAR 0 6
43990: PUSH
43991: EMPTY
43992: LIST
43993: ADD
43994: ST_TO_ADDR
// end ;
43995: GO 43951
43997: POP
43998: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43999: LD_ADDR_VAR 0 6
44003: PUSH
44004: LD_VAR 0 6
44008: PPUSH
44009: LD_VAR 0 2
44013: PUSH
44014: LD_VAR 0 2
44018: ARRAY
44019: PPUSH
44020: LD_VAR 0 3
44024: PPUSH
44025: CALL_OW 1
44029: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44030: LD_ADDR_VAR 0 7
44034: PUSH
44035: LD_VAR 0 7
44039: PPUSH
44040: LD_VAR 0 7
44044: PPUSH
44045: LD_VAR 0 6
44049: PPUSH
44050: CALL_OW 1
44054: ST_TO_ADDR
// for i = s_arr downto 2 do
44055: LD_ADDR_VAR 0 5
44059: PUSH
44060: DOUBLE
44061: LD_VAR 0 7
44065: INC
44066: ST_TO_ADDR
44067: LD_INT 2
44069: PUSH
44070: FOR_DOWNTO
44071: IFFALSE 44155
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44073: LD_ADDR_VAR 0 6
44077: PUSH
44078: LD_VAR 0 7
44082: PUSH
44083: LD_VAR 0 5
44087: PUSH
44088: LD_INT 1
44090: MINUS
44091: ARRAY
44092: PPUSH
44093: LD_VAR 0 2
44097: PUSH
44098: LD_VAR 0 5
44102: PUSH
44103: LD_INT 1
44105: MINUS
44106: ARRAY
44107: PPUSH
44108: LD_VAR 0 7
44112: PUSH
44113: LD_VAR 0 5
44117: ARRAY
44118: PPUSH
44119: CALL_OW 1
44123: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44124: LD_ADDR_VAR 0 7
44128: PUSH
44129: LD_VAR 0 7
44133: PPUSH
44134: LD_VAR 0 5
44138: PUSH
44139: LD_INT 1
44141: MINUS
44142: PPUSH
44143: LD_VAR 0 6
44147: PPUSH
44148: CALL_OW 1
44152: ST_TO_ADDR
// end ;
44153: GO 44070
44155: POP
44156: POP
// result := s_arr [ 1 ] ;
44157: LD_ADDR_VAR 0 4
44161: PUSH
44162: LD_VAR 0 7
44166: PUSH
44167: LD_INT 1
44169: ARRAY
44170: ST_TO_ADDR
// end ; end ;
44171: LD_VAR 0 4
44175: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44176: LD_INT 0
44178: PPUSH
44179: PPUSH
// if not list then
44180: LD_VAR 0 1
44184: NOT
44185: IFFALSE 44189
// exit ;
44187: GO 44280
// i := list [ pos1 ] ;
44189: LD_ADDR_VAR 0 5
44193: PUSH
44194: LD_VAR 0 1
44198: PUSH
44199: LD_VAR 0 2
44203: ARRAY
44204: ST_TO_ADDR
// if not i then
44205: LD_VAR 0 5
44209: NOT
44210: IFFALSE 44214
// exit ;
44212: GO 44280
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44214: LD_ADDR_VAR 0 1
44218: PUSH
44219: LD_VAR 0 1
44223: PPUSH
44224: LD_VAR 0 2
44228: PPUSH
44229: LD_VAR 0 1
44233: PUSH
44234: LD_VAR 0 3
44238: ARRAY
44239: PPUSH
44240: CALL_OW 1
44244: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44245: LD_ADDR_VAR 0 1
44249: PUSH
44250: LD_VAR 0 1
44254: PPUSH
44255: LD_VAR 0 3
44259: PPUSH
44260: LD_VAR 0 5
44264: PPUSH
44265: CALL_OW 1
44269: ST_TO_ADDR
// result := list ;
44270: LD_ADDR_VAR 0 4
44274: PUSH
44275: LD_VAR 0 1
44279: ST_TO_ADDR
// end ;
44280: LD_VAR 0 4
44284: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44285: LD_INT 0
44287: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44288: LD_ADDR_VAR 0 5
44292: PUSH
44293: LD_VAR 0 1
44297: PPUSH
44298: CALL_OW 250
44302: PPUSH
44303: LD_VAR 0 1
44307: PPUSH
44308: CALL_OW 251
44312: PPUSH
44313: LD_VAR 0 2
44317: PPUSH
44318: LD_VAR 0 3
44322: PPUSH
44323: LD_VAR 0 4
44327: PPUSH
44328: CALL 44338 0 5
44332: ST_TO_ADDR
// end ;
44333: LD_VAR 0 5
44337: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44338: LD_INT 0
44340: PPUSH
44341: PPUSH
44342: PPUSH
44343: PPUSH
// if not list then
44344: LD_VAR 0 3
44348: NOT
44349: IFFALSE 44353
// exit ;
44351: GO 44741
// result := [ ] ;
44353: LD_ADDR_VAR 0 6
44357: PUSH
44358: EMPTY
44359: ST_TO_ADDR
// for i in list do
44360: LD_ADDR_VAR 0 7
44364: PUSH
44365: LD_VAR 0 3
44369: PUSH
44370: FOR_IN
44371: IFFALSE 44573
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44373: LD_ADDR_VAR 0 9
44377: PUSH
44378: LD_VAR 0 7
44382: PPUSH
44383: LD_VAR 0 1
44387: PPUSH
44388: LD_VAR 0 2
44392: PPUSH
44393: CALL_OW 297
44397: ST_TO_ADDR
// if not result then
44398: LD_VAR 0 6
44402: NOT
44403: IFFALSE 44429
// result := [ [ i , tmp ] ] else
44405: LD_ADDR_VAR 0 6
44409: PUSH
44410: LD_VAR 0 7
44414: PUSH
44415: LD_VAR 0 9
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: EMPTY
44425: LIST
44426: ST_TO_ADDR
44427: GO 44571
// begin if result [ result ] [ 2 ] < tmp then
44429: LD_VAR 0 6
44433: PUSH
44434: LD_VAR 0 6
44438: ARRAY
44439: PUSH
44440: LD_INT 2
44442: ARRAY
44443: PUSH
44444: LD_VAR 0 9
44448: LESS
44449: IFFALSE 44491
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44451: LD_ADDR_VAR 0 6
44455: PUSH
44456: LD_VAR 0 6
44460: PPUSH
44461: LD_VAR 0 6
44465: PUSH
44466: LD_INT 1
44468: PLUS
44469: PPUSH
44470: LD_VAR 0 7
44474: PUSH
44475: LD_VAR 0 9
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PPUSH
44484: CALL_OW 2
44488: ST_TO_ADDR
44489: GO 44571
// for j = 1 to result do
44491: LD_ADDR_VAR 0 8
44495: PUSH
44496: DOUBLE
44497: LD_INT 1
44499: DEC
44500: ST_TO_ADDR
44501: LD_VAR 0 6
44505: PUSH
44506: FOR_TO
44507: IFFALSE 44569
// begin if tmp < result [ j ] [ 2 ] then
44509: LD_VAR 0 9
44513: PUSH
44514: LD_VAR 0 6
44518: PUSH
44519: LD_VAR 0 8
44523: ARRAY
44524: PUSH
44525: LD_INT 2
44527: ARRAY
44528: LESS
44529: IFFALSE 44567
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44531: LD_ADDR_VAR 0 6
44535: PUSH
44536: LD_VAR 0 6
44540: PPUSH
44541: LD_VAR 0 8
44545: PPUSH
44546: LD_VAR 0 7
44550: PUSH
44551: LD_VAR 0 9
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PPUSH
44560: CALL_OW 2
44564: ST_TO_ADDR
// break ;
44565: GO 44569
// end ; end ;
44567: GO 44506
44569: POP
44570: POP
// end ; end ;
44571: GO 44370
44573: POP
44574: POP
// if result and not asc then
44575: LD_VAR 0 6
44579: PUSH
44580: LD_VAR 0 4
44584: NOT
44585: AND
44586: IFFALSE 44661
// begin tmp := result ;
44588: LD_ADDR_VAR 0 9
44592: PUSH
44593: LD_VAR 0 6
44597: ST_TO_ADDR
// for i = tmp downto 1 do
44598: LD_ADDR_VAR 0 7
44602: PUSH
44603: DOUBLE
44604: LD_VAR 0 9
44608: INC
44609: ST_TO_ADDR
44610: LD_INT 1
44612: PUSH
44613: FOR_DOWNTO
44614: IFFALSE 44659
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44616: LD_ADDR_VAR 0 6
44620: PUSH
44621: LD_VAR 0 6
44625: PPUSH
44626: LD_VAR 0 9
44630: PUSH
44631: LD_VAR 0 7
44635: MINUS
44636: PUSH
44637: LD_INT 1
44639: PLUS
44640: PPUSH
44641: LD_VAR 0 9
44645: PUSH
44646: LD_VAR 0 7
44650: ARRAY
44651: PPUSH
44652: CALL_OW 1
44656: ST_TO_ADDR
44657: GO 44613
44659: POP
44660: POP
// end ; tmp := [ ] ;
44661: LD_ADDR_VAR 0 9
44665: PUSH
44666: EMPTY
44667: ST_TO_ADDR
// if mode then
44668: LD_VAR 0 5
44672: IFFALSE 44741
// begin for i = 1 to result do
44674: LD_ADDR_VAR 0 7
44678: PUSH
44679: DOUBLE
44680: LD_INT 1
44682: DEC
44683: ST_TO_ADDR
44684: LD_VAR 0 6
44688: PUSH
44689: FOR_TO
44690: IFFALSE 44729
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44692: LD_ADDR_VAR 0 9
44696: PUSH
44697: LD_VAR 0 9
44701: PPUSH
44702: LD_VAR 0 7
44706: PPUSH
44707: LD_VAR 0 6
44711: PUSH
44712: LD_VAR 0 7
44716: ARRAY
44717: PUSH
44718: LD_INT 1
44720: ARRAY
44721: PPUSH
44722: CALL_OW 1
44726: ST_TO_ADDR
44727: GO 44689
44729: POP
44730: POP
// result := tmp ;
44731: LD_ADDR_VAR 0 6
44735: PUSH
44736: LD_VAR 0 9
44740: ST_TO_ADDR
// end ; end ;
44741: LD_VAR 0 6
44745: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44746: LD_INT 0
44748: PPUSH
44749: PPUSH
44750: PPUSH
44751: PPUSH
44752: PPUSH
44753: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44754: LD_ADDR_VAR 0 5
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: EMPTY
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: ST_TO_ADDR
// if not x or not y then
44776: LD_VAR 0 2
44780: NOT
44781: PUSH
44782: LD_VAR 0 3
44786: NOT
44787: OR
44788: IFFALSE 44792
// exit ;
44790: GO 46444
// if not range then
44792: LD_VAR 0 4
44796: NOT
44797: IFFALSE 44807
// range := 10 ;
44799: LD_ADDR_VAR 0 4
44803: PUSH
44804: LD_INT 10
44806: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44807: LD_ADDR_VAR 0 8
44811: PUSH
44812: LD_INT 81
44814: PUSH
44815: LD_VAR 0 1
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 92
44826: PUSH
44827: LD_VAR 0 2
44831: PUSH
44832: LD_VAR 0 3
44836: PUSH
44837: LD_VAR 0 4
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 3
44850: PUSH
44851: LD_INT 21
44853: PUSH
44854: LD_INT 3
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: LIST
44869: PPUSH
44870: CALL_OW 69
44874: ST_TO_ADDR
// if not tmp then
44875: LD_VAR 0 8
44879: NOT
44880: IFFALSE 44884
// exit ;
44882: GO 46444
// for i in tmp do
44884: LD_ADDR_VAR 0 6
44888: PUSH
44889: LD_VAR 0 8
44893: PUSH
44894: FOR_IN
44895: IFFALSE 46419
// begin points := [ 0 , 0 , 0 ] ;
44897: LD_ADDR_VAR 0 9
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: LIST
44915: ST_TO_ADDR
// bpoints := 1 ;
44916: LD_ADDR_VAR 0 10
44920: PUSH
44921: LD_INT 1
44923: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44924: LD_VAR 0 6
44928: PPUSH
44929: CALL_OW 247
44933: PUSH
44934: LD_INT 1
44936: DOUBLE
44937: EQUAL
44938: IFTRUE 44942
44940: GO 45520
44942: POP
// begin if GetClass ( i ) = 1 then
44943: LD_VAR 0 6
44947: PPUSH
44948: CALL_OW 257
44952: PUSH
44953: LD_INT 1
44955: EQUAL
44956: IFFALSE 44977
// points := [ 10 , 5 , 3 ] ;
44958: LD_ADDR_VAR 0 9
44962: PUSH
44963: LD_INT 10
44965: PUSH
44966: LD_INT 5
44968: PUSH
44969: LD_INT 3
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44977: LD_VAR 0 6
44981: PPUSH
44982: CALL_OW 257
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: LD_INT 3
44992: PUSH
44993: LD_INT 4
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: LIST
45000: IN
45001: IFFALSE 45022
// points := [ 3 , 2 , 1 ] ;
45003: LD_ADDR_VAR 0 9
45007: PUSH
45008: LD_INT 3
45010: PUSH
45011: LD_INT 2
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: LIST
45021: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45022: LD_VAR 0 6
45026: PPUSH
45027: CALL_OW 257
45031: PUSH
45032: LD_INT 5
45034: EQUAL
45035: IFFALSE 45056
// points := [ 130 , 5 , 2 ] ;
45037: LD_ADDR_VAR 0 9
45041: PUSH
45042: LD_INT 130
45044: PUSH
45045: LD_INT 5
45047: PUSH
45048: LD_INT 2
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: LIST
45055: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45056: LD_VAR 0 6
45060: PPUSH
45061: CALL_OW 257
45065: PUSH
45066: LD_INT 8
45068: EQUAL
45069: IFFALSE 45090
// points := [ 35 , 35 , 30 ] ;
45071: LD_ADDR_VAR 0 9
45075: PUSH
45076: LD_INT 35
45078: PUSH
45079: LD_INT 35
45081: PUSH
45082: LD_INT 30
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: LIST
45089: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45090: LD_VAR 0 6
45094: PPUSH
45095: CALL_OW 257
45099: PUSH
45100: LD_INT 9
45102: EQUAL
45103: IFFALSE 45124
// points := [ 20 , 55 , 40 ] ;
45105: LD_ADDR_VAR 0 9
45109: PUSH
45110: LD_INT 20
45112: PUSH
45113: LD_INT 55
45115: PUSH
45116: LD_INT 40
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: LIST
45123: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45124: LD_VAR 0 6
45128: PPUSH
45129: CALL_OW 257
45133: PUSH
45134: LD_INT 12
45136: PUSH
45137: LD_INT 16
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: IN
45144: IFFALSE 45165
// points := [ 5 , 3 , 2 ] ;
45146: LD_ADDR_VAR 0 9
45150: PUSH
45151: LD_INT 5
45153: PUSH
45154: LD_INT 3
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: LIST
45164: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45165: LD_VAR 0 6
45169: PPUSH
45170: CALL_OW 257
45174: PUSH
45175: LD_INT 17
45177: EQUAL
45178: IFFALSE 45199
// points := [ 100 , 50 , 75 ] ;
45180: LD_ADDR_VAR 0 9
45184: PUSH
45185: LD_INT 100
45187: PUSH
45188: LD_INT 50
45190: PUSH
45191: LD_INT 75
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: LIST
45198: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45199: LD_VAR 0 6
45203: PPUSH
45204: CALL_OW 257
45208: PUSH
45209: LD_INT 15
45211: EQUAL
45212: IFFALSE 45233
// points := [ 10 , 5 , 3 ] ;
45214: LD_ADDR_VAR 0 9
45218: PUSH
45219: LD_INT 10
45221: PUSH
45222: LD_INT 5
45224: PUSH
45225: LD_INT 3
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: LIST
45232: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45233: LD_VAR 0 6
45237: PPUSH
45238: CALL_OW 257
45242: PUSH
45243: LD_INT 14
45245: EQUAL
45246: IFFALSE 45267
// points := [ 10 , 0 , 0 ] ;
45248: LD_ADDR_VAR 0 9
45252: PUSH
45253: LD_INT 10
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: LIST
45266: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45267: LD_VAR 0 6
45271: PPUSH
45272: CALL_OW 257
45276: PUSH
45277: LD_INT 11
45279: EQUAL
45280: IFFALSE 45301
// points := [ 30 , 10 , 5 ] ;
45282: LD_ADDR_VAR 0 9
45286: PUSH
45287: LD_INT 30
45289: PUSH
45290: LD_INT 10
45292: PUSH
45293: LD_INT 5
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: LIST
45300: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45301: LD_VAR 0 1
45305: PPUSH
45306: LD_INT 5
45308: PPUSH
45309: CALL_OW 321
45313: PUSH
45314: LD_INT 2
45316: EQUAL
45317: IFFALSE 45334
// bpoints := bpoints * 1.8 ;
45319: LD_ADDR_VAR 0 10
45323: PUSH
45324: LD_VAR 0 10
45328: PUSH
45329: LD_REAL  1.80000000000000E+0000
45332: MUL
45333: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45334: LD_VAR 0 6
45338: PPUSH
45339: CALL_OW 257
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: LD_INT 3
45352: PUSH
45353: LD_INT 4
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: IN
45362: PUSH
45363: LD_VAR 0 1
45367: PPUSH
45368: LD_INT 51
45370: PPUSH
45371: CALL_OW 321
45375: PUSH
45376: LD_INT 2
45378: EQUAL
45379: AND
45380: IFFALSE 45397
// bpoints := bpoints * 1.2 ;
45382: LD_ADDR_VAR 0 10
45386: PUSH
45387: LD_VAR 0 10
45391: PUSH
45392: LD_REAL  1.20000000000000E+0000
45395: MUL
45396: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45397: LD_VAR 0 6
45401: PPUSH
45402: CALL_OW 257
45406: PUSH
45407: LD_INT 5
45409: PUSH
45410: LD_INT 7
45412: PUSH
45413: LD_INT 9
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: IN
45421: PUSH
45422: LD_VAR 0 1
45426: PPUSH
45427: LD_INT 52
45429: PPUSH
45430: CALL_OW 321
45434: PUSH
45435: LD_INT 2
45437: EQUAL
45438: AND
45439: IFFALSE 45456
// bpoints := bpoints * 1.5 ;
45441: LD_ADDR_VAR 0 10
45445: PUSH
45446: LD_VAR 0 10
45450: PUSH
45451: LD_REAL  1.50000000000000E+0000
45454: MUL
45455: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45456: LD_VAR 0 1
45460: PPUSH
45461: LD_INT 66
45463: PPUSH
45464: CALL_OW 321
45468: PUSH
45469: LD_INT 2
45471: EQUAL
45472: IFFALSE 45489
// bpoints := bpoints * 1.1 ;
45474: LD_ADDR_VAR 0 10
45478: PUSH
45479: LD_VAR 0 10
45483: PUSH
45484: LD_REAL  1.10000000000000E+0000
45487: MUL
45488: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45489: LD_ADDR_VAR 0 10
45493: PUSH
45494: LD_VAR 0 10
45498: PUSH
45499: LD_VAR 0 6
45503: PPUSH
45504: LD_INT 1
45506: PPUSH
45507: CALL_OW 259
45511: PUSH
45512: LD_REAL  1.15000000000000E+0000
45515: MUL
45516: MUL
45517: ST_TO_ADDR
// end ; unit_vehicle :
45518: GO 46348
45520: LD_INT 2
45522: DOUBLE
45523: EQUAL
45524: IFTRUE 45528
45526: GO 46336
45528: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45529: LD_VAR 0 6
45533: PPUSH
45534: CALL_OW 264
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: LD_INT 42
45544: PUSH
45545: LD_INT 24
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: LIST
45552: IN
45553: IFFALSE 45574
// points := [ 25 , 5 , 3 ] ;
45555: LD_ADDR_VAR 0 9
45559: PUSH
45560: LD_INT 25
45562: PUSH
45563: LD_INT 5
45565: PUSH
45566: LD_INT 3
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: LIST
45573: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45574: LD_VAR 0 6
45578: PPUSH
45579: CALL_OW 264
45583: PUSH
45584: LD_INT 4
45586: PUSH
45587: LD_INT 43
45589: PUSH
45590: LD_INT 25
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: LIST
45597: IN
45598: IFFALSE 45619
// points := [ 40 , 15 , 5 ] ;
45600: LD_ADDR_VAR 0 9
45604: PUSH
45605: LD_INT 40
45607: PUSH
45608: LD_INT 15
45610: PUSH
45611: LD_INT 5
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: LIST
45618: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45619: LD_VAR 0 6
45623: PPUSH
45624: CALL_OW 264
45628: PUSH
45629: LD_INT 3
45631: PUSH
45632: LD_INT 23
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: IN
45639: IFFALSE 45660
// points := [ 7 , 25 , 8 ] ;
45641: LD_ADDR_VAR 0 9
45645: PUSH
45646: LD_INT 7
45648: PUSH
45649: LD_INT 25
45651: PUSH
45652: LD_INT 8
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: LIST
45659: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45660: LD_VAR 0 6
45664: PPUSH
45665: CALL_OW 264
45669: PUSH
45670: LD_INT 5
45672: PUSH
45673: LD_INT 27
45675: PUSH
45676: LD_INT 44
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: LIST
45683: IN
45684: IFFALSE 45705
// points := [ 14 , 50 , 16 ] ;
45686: LD_ADDR_VAR 0 9
45690: PUSH
45691: LD_INT 14
45693: PUSH
45694: LD_INT 50
45696: PUSH
45697: LD_INT 16
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: LIST
45704: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45705: LD_VAR 0 6
45709: PPUSH
45710: CALL_OW 264
45714: PUSH
45715: LD_INT 6
45717: PUSH
45718: LD_INT 46
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: IN
45725: IFFALSE 45746
// points := [ 32 , 120 , 70 ] ;
45727: LD_ADDR_VAR 0 9
45731: PUSH
45732: LD_INT 32
45734: PUSH
45735: LD_INT 120
45737: PUSH
45738: LD_INT 70
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: LIST
45745: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45746: LD_VAR 0 6
45750: PPUSH
45751: CALL_OW 264
45755: PUSH
45756: LD_INT 7
45758: PUSH
45759: LD_INT 28
45761: PUSH
45762: LD_INT 45
45764: PUSH
45765: LD_EXP 55
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: IN
45776: IFFALSE 45797
// points := [ 35 , 20 , 45 ] ;
45778: LD_ADDR_VAR 0 9
45782: PUSH
45783: LD_INT 35
45785: PUSH
45786: LD_INT 20
45788: PUSH
45789: LD_INT 45
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: LIST
45796: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45797: LD_VAR 0 6
45801: PPUSH
45802: CALL_OW 264
45806: PUSH
45807: LD_INT 47
45809: PUSH
45810: EMPTY
45811: LIST
45812: IN
45813: IFFALSE 45834
// points := [ 67 , 45 , 75 ] ;
45815: LD_ADDR_VAR 0 9
45819: PUSH
45820: LD_INT 67
45822: PUSH
45823: LD_INT 45
45825: PUSH
45826: LD_INT 75
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45834: LD_VAR 0 6
45838: PPUSH
45839: CALL_OW 264
45843: PUSH
45844: LD_INT 26
45846: PUSH
45847: EMPTY
45848: LIST
45849: IN
45850: IFFALSE 45871
// points := [ 120 , 30 , 80 ] ;
45852: LD_ADDR_VAR 0 9
45856: PUSH
45857: LD_INT 120
45859: PUSH
45860: LD_INT 30
45862: PUSH
45863: LD_INT 80
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: LIST
45870: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45871: LD_VAR 0 6
45875: PPUSH
45876: CALL_OW 264
45880: PUSH
45881: LD_INT 22
45883: PUSH
45884: EMPTY
45885: LIST
45886: IN
45887: IFFALSE 45908
// points := [ 40 , 1 , 1 ] ;
45889: LD_ADDR_VAR 0 9
45893: PUSH
45894: LD_INT 40
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: LIST
45907: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45908: LD_VAR 0 6
45912: PPUSH
45913: CALL_OW 264
45917: PUSH
45918: LD_INT 29
45920: PUSH
45921: EMPTY
45922: LIST
45923: IN
45924: IFFALSE 45945
// points := [ 70 , 200 , 400 ] ;
45926: LD_ADDR_VAR 0 9
45930: PUSH
45931: LD_INT 70
45933: PUSH
45934: LD_INT 200
45936: PUSH
45937: LD_INT 400
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: LIST
45944: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45945: LD_VAR 0 6
45949: PPUSH
45950: CALL_OW 264
45954: PUSH
45955: LD_INT 14
45957: PUSH
45958: LD_INT 53
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: IN
45965: IFFALSE 45986
// points := [ 40 , 10 , 20 ] ;
45967: LD_ADDR_VAR 0 9
45971: PUSH
45972: LD_INT 40
45974: PUSH
45975: LD_INT 10
45977: PUSH
45978: LD_INT 20
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: LIST
45985: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45986: LD_VAR 0 6
45990: PPUSH
45991: CALL_OW 264
45995: PUSH
45996: LD_INT 9
45998: PUSH
45999: EMPTY
46000: LIST
46001: IN
46002: IFFALSE 46023
// points := [ 5 , 70 , 20 ] ;
46004: LD_ADDR_VAR 0 9
46008: PUSH
46009: LD_INT 5
46011: PUSH
46012: LD_INT 70
46014: PUSH
46015: LD_INT 20
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: LIST
46022: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46023: LD_VAR 0 6
46027: PPUSH
46028: CALL_OW 264
46032: PUSH
46033: LD_INT 10
46035: PUSH
46036: EMPTY
46037: LIST
46038: IN
46039: IFFALSE 46060
// points := [ 35 , 110 , 70 ] ;
46041: LD_ADDR_VAR 0 9
46045: PUSH
46046: LD_INT 35
46048: PUSH
46049: LD_INT 110
46051: PUSH
46052: LD_INT 70
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: LIST
46059: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46060: LD_VAR 0 6
46064: PPUSH
46065: CALL_OW 265
46069: PUSH
46070: LD_INT 25
46072: EQUAL
46073: IFFALSE 46094
// points := [ 80 , 65 , 100 ] ;
46075: LD_ADDR_VAR 0 9
46079: PUSH
46080: LD_INT 80
46082: PUSH
46083: LD_INT 65
46085: PUSH
46086: LD_INT 100
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: LIST
46093: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46094: LD_VAR 0 6
46098: PPUSH
46099: CALL_OW 263
46103: PUSH
46104: LD_INT 1
46106: EQUAL
46107: IFFALSE 46142
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46109: LD_ADDR_VAR 0 10
46113: PUSH
46114: LD_VAR 0 10
46118: PUSH
46119: LD_VAR 0 6
46123: PPUSH
46124: CALL_OW 311
46128: PPUSH
46129: LD_INT 3
46131: PPUSH
46132: CALL_OW 259
46136: PUSH
46137: LD_INT 4
46139: MUL
46140: MUL
46141: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46142: LD_VAR 0 6
46146: PPUSH
46147: CALL_OW 263
46151: PUSH
46152: LD_INT 2
46154: EQUAL
46155: IFFALSE 46206
// begin j := IsControledBy ( i ) ;
46157: LD_ADDR_VAR 0 7
46161: PUSH
46162: LD_VAR 0 6
46166: PPUSH
46167: CALL_OW 312
46171: ST_TO_ADDR
// if j then
46172: LD_VAR 0 7
46176: IFFALSE 46206
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46178: LD_ADDR_VAR 0 10
46182: PUSH
46183: LD_VAR 0 10
46187: PUSH
46188: LD_VAR 0 7
46192: PPUSH
46193: LD_INT 3
46195: PPUSH
46196: CALL_OW 259
46200: PUSH
46201: LD_INT 3
46203: MUL
46204: MUL
46205: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46206: LD_VAR 0 6
46210: PPUSH
46211: CALL_OW 264
46215: PUSH
46216: LD_INT 5
46218: PUSH
46219: LD_INT 6
46221: PUSH
46222: LD_INT 46
46224: PUSH
46225: LD_INT 44
46227: PUSH
46228: LD_INT 47
46230: PUSH
46231: LD_INT 45
46233: PUSH
46234: LD_INT 28
46236: PUSH
46237: LD_INT 7
46239: PUSH
46240: LD_INT 27
46242: PUSH
46243: LD_INT 29
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: IN
46258: PUSH
46259: LD_VAR 0 1
46263: PPUSH
46264: LD_INT 52
46266: PPUSH
46267: CALL_OW 321
46271: PUSH
46272: LD_INT 2
46274: EQUAL
46275: AND
46276: IFFALSE 46293
// bpoints := bpoints * 1.2 ;
46278: LD_ADDR_VAR 0 10
46282: PUSH
46283: LD_VAR 0 10
46287: PUSH
46288: LD_REAL  1.20000000000000E+0000
46291: MUL
46292: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46293: LD_VAR 0 6
46297: PPUSH
46298: CALL_OW 264
46302: PUSH
46303: LD_INT 6
46305: PUSH
46306: LD_INT 46
46308: PUSH
46309: LD_INT 47
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: IN
46317: IFFALSE 46334
// bpoints := bpoints * 1.2 ;
46319: LD_ADDR_VAR 0 10
46323: PUSH
46324: LD_VAR 0 10
46328: PUSH
46329: LD_REAL  1.20000000000000E+0000
46332: MUL
46333: ST_TO_ADDR
// end ; unit_building :
46334: GO 46348
46336: LD_INT 3
46338: DOUBLE
46339: EQUAL
46340: IFTRUE 46344
46342: GO 46347
46344: POP
// ; end ;
46345: GO 46348
46347: POP
// for j = 1 to 3 do
46348: LD_ADDR_VAR 0 7
46352: PUSH
46353: DOUBLE
46354: LD_INT 1
46356: DEC
46357: ST_TO_ADDR
46358: LD_INT 3
46360: PUSH
46361: FOR_TO
46362: IFFALSE 46415
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46364: LD_ADDR_VAR 0 5
46368: PUSH
46369: LD_VAR 0 5
46373: PPUSH
46374: LD_VAR 0 7
46378: PPUSH
46379: LD_VAR 0 5
46383: PUSH
46384: LD_VAR 0 7
46388: ARRAY
46389: PUSH
46390: LD_VAR 0 9
46394: PUSH
46395: LD_VAR 0 7
46399: ARRAY
46400: PUSH
46401: LD_VAR 0 10
46405: MUL
46406: PLUS
46407: PPUSH
46408: CALL_OW 1
46412: ST_TO_ADDR
46413: GO 46361
46415: POP
46416: POP
// end ;
46417: GO 44894
46419: POP
46420: POP
// result := Replace ( result , 4 , tmp ) ;
46421: LD_ADDR_VAR 0 5
46425: PUSH
46426: LD_VAR 0 5
46430: PPUSH
46431: LD_INT 4
46433: PPUSH
46434: LD_VAR 0 8
46438: PPUSH
46439: CALL_OW 1
46443: ST_TO_ADDR
// end ;
46444: LD_VAR 0 5
46448: RET
// export function DangerAtRange ( unit , range ) ; begin
46449: LD_INT 0
46451: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46452: LD_ADDR_VAR 0 3
46456: PUSH
46457: LD_VAR 0 1
46461: PPUSH
46462: CALL_OW 255
46466: PPUSH
46467: LD_VAR 0 1
46471: PPUSH
46472: CALL_OW 250
46476: PPUSH
46477: LD_VAR 0 1
46481: PPUSH
46482: CALL_OW 251
46486: PPUSH
46487: LD_VAR 0 2
46491: PPUSH
46492: CALL 44746 0 4
46496: ST_TO_ADDR
// end ;
46497: LD_VAR 0 3
46501: RET
// export function DangerInArea ( side , area ) ; begin
46502: LD_INT 0
46504: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46505: LD_ADDR_VAR 0 3
46509: PUSH
46510: LD_VAR 0 2
46514: PPUSH
46515: LD_INT 81
46517: PUSH
46518: LD_VAR 0 1
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PPUSH
46527: CALL_OW 70
46531: ST_TO_ADDR
// end ;
46532: LD_VAR 0 3
46536: RET
// export function IsExtension ( b ) ; begin
46537: LD_INT 0
46539: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46540: LD_ADDR_VAR 0 2
46544: PUSH
46545: LD_VAR 0 1
46549: PUSH
46550: LD_INT 23
46552: PUSH
46553: LD_INT 20
46555: PUSH
46556: LD_INT 22
46558: PUSH
46559: LD_INT 17
46561: PUSH
46562: LD_INT 24
46564: PUSH
46565: LD_INT 21
46567: PUSH
46568: LD_INT 19
46570: PUSH
46571: LD_INT 16
46573: PUSH
46574: LD_INT 25
46576: PUSH
46577: LD_INT 18
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: IN
46592: ST_TO_ADDR
// end ;
46593: LD_VAR 0 2
46597: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46598: LD_INT 0
46600: PPUSH
46601: PPUSH
46602: PPUSH
// result := [ ] ;
46603: LD_ADDR_VAR 0 4
46607: PUSH
46608: EMPTY
46609: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46610: LD_ADDR_VAR 0 5
46614: PUSH
46615: LD_VAR 0 2
46619: PPUSH
46620: LD_INT 21
46622: PUSH
46623: LD_INT 3
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PPUSH
46630: CALL_OW 70
46634: ST_TO_ADDR
// if not tmp then
46635: LD_VAR 0 5
46639: NOT
46640: IFFALSE 46644
// exit ;
46642: GO 46708
// if checkLink then
46644: LD_VAR 0 3
46648: IFFALSE 46698
// begin for i in tmp do
46650: LD_ADDR_VAR 0 6
46654: PUSH
46655: LD_VAR 0 5
46659: PUSH
46660: FOR_IN
46661: IFFALSE 46696
// if GetBase ( i ) <> base then
46663: LD_VAR 0 6
46667: PPUSH
46668: CALL_OW 274
46672: PUSH
46673: LD_VAR 0 1
46677: NONEQUAL
46678: IFFALSE 46694
// ComLinkToBase ( base , i ) ;
46680: LD_VAR 0 1
46684: PPUSH
46685: LD_VAR 0 6
46689: PPUSH
46690: CALL_OW 169
46694: GO 46660
46696: POP
46697: POP
// end ; result := tmp ;
46698: LD_ADDR_VAR 0 4
46702: PUSH
46703: LD_VAR 0 5
46707: ST_TO_ADDR
// end ;
46708: LD_VAR 0 4
46712: RET
// export function ComComplete ( units , b ) ; var i ; begin
46713: LD_INT 0
46715: PPUSH
46716: PPUSH
// if not units then
46717: LD_VAR 0 1
46721: NOT
46722: IFFALSE 46726
// exit ;
46724: GO 46816
// for i in units do
46726: LD_ADDR_VAR 0 4
46730: PUSH
46731: LD_VAR 0 1
46735: PUSH
46736: FOR_IN
46737: IFFALSE 46814
// if BuildingStatus ( b ) = bs_build then
46739: LD_VAR 0 2
46743: PPUSH
46744: CALL_OW 461
46748: PUSH
46749: LD_INT 1
46751: EQUAL
46752: IFFALSE 46812
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46754: LD_VAR 0 4
46758: PPUSH
46759: LD_STRING h
46761: PUSH
46762: LD_VAR 0 2
46766: PPUSH
46767: CALL_OW 250
46771: PUSH
46772: LD_VAR 0 2
46776: PPUSH
46777: CALL_OW 251
46781: PUSH
46782: LD_VAR 0 2
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: PUSH
46805: EMPTY
46806: LIST
46807: PPUSH
46808: CALL_OW 446
46812: GO 46736
46814: POP
46815: POP
// end ;
46816: LD_VAR 0 3
46820: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46821: LD_INT 0
46823: PPUSH
46824: PPUSH
46825: PPUSH
46826: PPUSH
46827: PPUSH
46828: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46829: LD_VAR 0 1
46833: NOT
46834: PUSH
46835: LD_VAR 0 1
46839: PPUSH
46840: CALL_OW 263
46844: PUSH
46845: LD_INT 2
46847: NONEQUAL
46848: OR
46849: IFFALSE 46853
// exit ;
46851: GO 47169
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46853: LD_ADDR_VAR 0 6
46857: PUSH
46858: LD_INT 22
46860: PUSH
46861: LD_VAR 0 1
46865: PPUSH
46866: CALL_OW 255
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: LD_INT 30
46880: PUSH
46881: LD_INT 36
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 34
46890: PUSH
46891: LD_INT 31
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: LIST
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PPUSH
46907: CALL_OW 69
46911: ST_TO_ADDR
// if not tmp then
46912: LD_VAR 0 6
46916: NOT
46917: IFFALSE 46921
// exit ;
46919: GO 47169
// result := [ ] ;
46921: LD_ADDR_VAR 0 2
46925: PUSH
46926: EMPTY
46927: ST_TO_ADDR
// for i in tmp do
46928: LD_ADDR_VAR 0 3
46932: PUSH
46933: LD_VAR 0 6
46937: PUSH
46938: FOR_IN
46939: IFFALSE 47010
// begin t := UnitsInside ( i ) ;
46941: LD_ADDR_VAR 0 4
46945: PUSH
46946: LD_VAR 0 3
46950: PPUSH
46951: CALL_OW 313
46955: ST_TO_ADDR
// if t then
46956: LD_VAR 0 4
46960: IFFALSE 47008
// for j in t do
46962: LD_ADDR_VAR 0 7
46966: PUSH
46967: LD_VAR 0 4
46971: PUSH
46972: FOR_IN
46973: IFFALSE 47006
// result := Replace ( result , result + 1 , j ) ;
46975: LD_ADDR_VAR 0 2
46979: PUSH
46980: LD_VAR 0 2
46984: PPUSH
46985: LD_VAR 0 2
46989: PUSH
46990: LD_INT 1
46992: PLUS
46993: PPUSH
46994: LD_VAR 0 7
46998: PPUSH
46999: CALL_OW 1
47003: ST_TO_ADDR
47004: GO 46972
47006: POP
47007: POP
// end ;
47008: GO 46938
47010: POP
47011: POP
// if not result then
47012: LD_VAR 0 2
47016: NOT
47017: IFFALSE 47021
// exit ;
47019: GO 47169
// mech := result [ 1 ] ;
47021: LD_ADDR_VAR 0 5
47025: PUSH
47026: LD_VAR 0 2
47030: PUSH
47031: LD_INT 1
47033: ARRAY
47034: ST_TO_ADDR
// if result > 1 then
47035: LD_VAR 0 2
47039: PUSH
47040: LD_INT 1
47042: GREATER
47043: IFFALSE 47155
// begin for i = 2 to result do
47045: LD_ADDR_VAR 0 3
47049: PUSH
47050: DOUBLE
47051: LD_INT 2
47053: DEC
47054: ST_TO_ADDR
47055: LD_VAR 0 2
47059: PUSH
47060: FOR_TO
47061: IFFALSE 47153
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47063: LD_ADDR_VAR 0 4
47067: PUSH
47068: LD_VAR 0 2
47072: PUSH
47073: LD_VAR 0 3
47077: ARRAY
47078: PPUSH
47079: LD_INT 3
47081: PPUSH
47082: CALL_OW 259
47086: PUSH
47087: LD_VAR 0 2
47091: PUSH
47092: LD_VAR 0 3
47096: ARRAY
47097: PPUSH
47098: CALL_OW 432
47102: MINUS
47103: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47104: LD_VAR 0 4
47108: PUSH
47109: LD_VAR 0 5
47113: PPUSH
47114: LD_INT 3
47116: PPUSH
47117: CALL_OW 259
47121: PUSH
47122: LD_VAR 0 5
47126: PPUSH
47127: CALL_OW 432
47131: MINUS
47132: GREATEREQUAL
47133: IFFALSE 47151
// mech := result [ i ] ;
47135: LD_ADDR_VAR 0 5
47139: PUSH
47140: LD_VAR 0 2
47144: PUSH
47145: LD_VAR 0 3
47149: ARRAY
47150: ST_TO_ADDR
// end ;
47151: GO 47060
47153: POP
47154: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47155: LD_VAR 0 1
47159: PPUSH
47160: LD_VAR 0 5
47164: PPUSH
47165: CALL_OW 135
// end ;
47169: LD_VAR 0 2
47173: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47174: LD_INT 0
47176: PPUSH
47177: PPUSH
47178: PPUSH
47179: PPUSH
47180: PPUSH
47181: PPUSH
47182: PPUSH
47183: PPUSH
47184: PPUSH
47185: PPUSH
47186: PPUSH
47187: PPUSH
47188: PPUSH
// result := [ ] ;
47189: LD_ADDR_VAR 0 7
47193: PUSH
47194: EMPTY
47195: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47196: LD_VAR 0 1
47200: PPUSH
47201: CALL_OW 266
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: IN
47216: NOT
47217: IFFALSE 47221
// exit ;
47219: GO 48855
// if name then
47221: LD_VAR 0 3
47225: IFFALSE 47241
// SetBName ( base_dep , name ) ;
47227: LD_VAR 0 1
47231: PPUSH
47232: LD_VAR 0 3
47236: PPUSH
47237: CALL_OW 500
// base := GetBase ( base_dep ) ;
47241: LD_ADDR_VAR 0 15
47245: PUSH
47246: LD_VAR 0 1
47250: PPUSH
47251: CALL_OW 274
47255: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47256: LD_ADDR_VAR 0 16
47260: PUSH
47261: LD_VAR 0 1
47265: PPUSH
47266: CALL_OW 255
47270: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47271: LD_ADDR_VAR 0 17
47275: PUSH
47276: LD_VAR 0 1
47280: PPUSH
47281: CALL_OW 248
47285: ST_TO_ADDR
// if sources then
47286: LD_VAR 0 5
47290: IFFALSE 47337
// for i = 1 to 3 do
47292: LD_ADDR_VAR 0 8
47296: PUSH
47297: DOUBLE
47298: LD_INT 1
47300: DEC
47301: ST_TO_ADDR
47302: LD_INT 3
47304: PUSH
47305: FOR_TO
47306: IFFALSE 47335
// AddResourceType ( base , i , sources [ i ] ) ;
47308: LD_VAR 0 15
47312: PPUSH
47313: LD_VAR 0 8
47317: PPUSH
47318: LD_VAR 0 5
47322: PUSH
47323: LD_VAR 0 8
47327: ARRAY
47328: PPUSH
47329: CALL_OW 276
47333: GO 47305
47335: POP
47336: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47337: LD_ADDR_VAR 0 18
47341: PUSH
47342: LD_VAR 0 15
47346: PPUSH
47347: LD_VAR 0 2
47351: PPUSH
47352: LD_INT 1
47354: PPUSH
47355: CALL 46598 0 3
47359: ST_TO_ADDR
// InitHc ;
47360: CALL_OW 19
// InitUc ;
47364: CALL_OW 18
// uc_side := side ;
47368: LD_ADDR_OWVAR 20
47372: PUSH
47373: LD_VAR 0 16
47377: ST_TO_ADDR
// uc_nation := nation ;
47378: LD_ADDR_OWVAR 21
47382: PUSH
47383: LD_VAR 0 17
47387: ST_TO_ADDR
// if buildings then
47388: LD_VAR 0 18
47392: IFFALSE 48714
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47394: LD_ADDR_VAR 0 19
47398: PUSH
47399: LD_VAR 0 18
47403: PPUSH
47404: LD_INT 2
47406: PUSH
47407: LD_INT 30
47409: PUSH
47410: LD_INT 29
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 30
47419: PUSH
47420: LD_INT 30
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: LIST
47431: PPUSH
47432: CALL_OW 72
47436: ST_TO_ADDR
// if tmp then
47437: LD_VAR 0 19
47441: IFFALSE 47489
// for i in tmp do
47443: LD_ADDR_VAR 0 8
47447: PUSH
47448: LD_VAR 0 19
47452: PUSH
47453: FOR_IN
47454: IFFALSE 47487
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47456: LD_VAR 0 8
47460: PPUSH
47461: CALL_OW 250
47465: PPUSH
47466: LD_VAR 0 8
47470: PPUSH
47471: CALL_OW 251
47475: PPUSH
47476: LD_VAR 0 16
47480: PPUSH
47481: CALL_OW 441
47485: GO 47453
47487: POP
47488: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47489: LD_VAR 0 18
47493: PPUSH
47494: LD_INT 2
47496: PUSH
47497: LD_INT 30
47499: PUSH
47500: LD_INT 32
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 30
47509: PUSH
47510: LD_INT 33
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: LIST
47521: PPUSH
47522: CALL_OW 72
47526: IFFALSE 47614
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47528: LD_ADDR_VAR 0 8
47532: PUSH
47533: LD_VAR 0 18
47537: PPUSH
47538: LD_INT 2
47540: PUSH
47541: LD_INT 30
47543: PUSH
47544: LD_INT 32
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 30
47553: PUSH
47554: LD_INT 33
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: LIST
47565: PPUSH
47566: CALL_OW 72
47570: PUSH
47571: FOR_IN
47572: IFFALSE 47612
// begin if not GetBWeapon ( i ) then
47574: LD_VAR 0 8
47578: PPUSH
47579: CALL_OW 269
47583: NOT
47584: IFFALSE 47610
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47586: LD_VAR 0 8
47590: PPUSH
47591: LD_VAR 0 8
47595: PPUSH
47596: LD_VAR 0 2
47600: PPUSH
47601: CALL 48860 0 2
47605: PPUSH
47606: CALL_OW 431
// end ;
47610: GO 47571
47612: POP
47613: POP
// end ; for i = 1 to personel do
47614: LD_ADDR_VAR 0 8
47618: PUSH
47619: DOUBLE
47620: LD_INT 1
47622: DEC
47623: ST_TO_ADDR
47624: LD_VAR 0 6
47628: PUSH
47629: FOR_TO
47630: IFFALSE 48694
// begin if i > 4 then
47632: LD_VAR 0 8
47636: PUSH
47637: LD_INT 4
47639: GREATER
47640: IFFALSE 47644
// break ;
47642: GO 48694
// case i of 1 :
47644: LD_VAR 0 8
47648: PUSH
47649: LD_INT 1
47651: DOUBLE
47652: EQUAL
47653: IFTRUE 47657
47655: GO 47737
47657: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47658: LD_ADDR_VAR 0 12
47662: PUSH
47663: LD_VAR 0 18
47667: PPUSH
47668: LD_INT 22
47670: PUSH
47671: LD_VAR 0 16
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 58
47682: PUSH
47683: EMPTY
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: LD_INT 30
47691: PUSH
47692: LD_INT 32
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 30
47701: PUSH
47702: LD_INT 4
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 30
47711: PUSH
47712: LD_INT 5
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: LIST
47729: PPUSH
47730: CALL_OW 72
47734: ST_TO_ADDR
47735: GO 47959
47737: LD_INT 2
47739: DOUBLE
47740: EQUAL
47741: IFTRUE 47745
47743: GO 47807
47745: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47746: LD_ADDR_VAR 0 12
47750: PUSH
47751: LD_VAR 0 18
47755: PPUSH
47756: LD_INT 22
47758: PUSH
47759: LD_VAR 0 16
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: LD_INT 30
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 30
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: LIST
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PPUSH
47800: CALL_OW 72
47804: ST_TO_ADDR
47805: GO 47959
47807: LD_INT 3
47809: DOUBLE
47810: EQUAL
47811: IFTRUE 47815
47813: GO 47877
47815: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47816: LD_ADDR_VAR 0 12
47820: PUSH
47821: LD_VAR 0 18
47825: PPUSH
47826: LD_INT 22
47828: PUSH
47829: LD_VAR 0 16
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: PUSH
47841: LD_INT 30
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 30
47853: PUSH
47854: LD_INT 3
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: LIST
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PPUSH
47870: CALL_OW 72
47874: ST_TO_ADDR
47875: GO 47959
47877: LD_INT 4
47879: DOUBLE
47880: EQUAL
47881: IFTRUE 47885
47883: GO 47958
47885: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47886: LD_ADDR_VAR 0 12
47890: PUSH
47891: LD_VAR 0 18
47895: PPUSH
47896: LD_INT 22
47898: PUSH
47899: LD_VAR 0 16
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: LD_INT 30
47913: PUSH
47914: LD_INT 6
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 30
47923: PUSH
47924: LD_INT 7
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 30
47933: PUSH
47934: LD_INT 8
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PPUSH
47951: CALL_OW 72
47955: ST_TO_ADDR
47956: GO 47959
47958: POP
// if i = 1 then
47959: LD_VAR 0 8
47963: PUSH
47964: LD_INT 1
47966: EQUAL
47967: IFFALSE 48078
// begin tmp := [ ] ;
47969: LD_ADDR_VAR 0 19
47973: PUSH
47974: EMPTY
47975: ST_TO_ADDR
// for j in f do
47976: LD_ADDR_VAR 0 9
47980: PUSH
47981: LD_VAR 0 12
47985: PUSH
47986: FOR_IN
47987: IFFALSE 48060
// if GetBType ( j ) = b_bunker then
47989: LD_VAR 0 9
47993: PPUSH
47994: CALL_OW 266
47998: PUSH
47999: LD_INT 32
48001: EQUAL
48002: IFFALSE 48029
// tmp := Insert ( tmp , 1 , j ) else
48004: LD_ADDR_VAR 0 19
48008: PUSH
48009: LD_VAR 0 19
48013: PPUSH
48014: LD_INT 1
48016: PPUSH
48017: LD_VAR 0 9
48021: PPUSH
48022: CALL_OW 2
48026: ST_TO_ADDR
48027: GO 48058
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48029: LD_ADDR_VAR 0 19
48033: PUSH
48034: LD_VAR 0 19
48038: PPUSH
48039: LD_VAR 0 19
48043: PUSH
48044: LD_INT 1
48046: PLUS
48047: PPUSH
48048: LD_VAR 0 9
48052: PPUSH
48053: CALL_OW 2
48057: ST_TO_ADDR
48058: GO 47986
48060: POP
48061: POP
// if tmp then
48062: LD_VAR 0 19
48066: IFFALSE 48078
// f := tmp ;
48068: LD_ADDR_VAR 0 12
48072: PUSH
48073: LD_VAR 0 19
48077: ST_TO_ADDR
// end ; x := personel [ i ] ;
48078: LD_ADDR_VAR 0 13
48082: PUSH
48083: LD_VAR 0 6
48087: PUSH
48088: LD_VAR 0 8
48092: ARRAY
48093: ST_TO_ADDR
// if x = - 1 then
48094: LD_VAR 0 13
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: EQUAL
48103: IFFALSE 48312
// begin for j in f do
48105: LD_ADDR_VAR 0 9
48109: PUSH
48110: LD_VAR 0 12
48114: PUSH
48115: FOR_IN
48116: IFFALSE 48308
// repeat InitHc ;
48118: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48122: LD_VAR 0 9
48126: PPUSH
48127: CALL_OW 266
48131: PUSH
48132: LD_INT 5
48134: EQUAL
48135: IFFALSE 48205
// begin if UnitsInside ( j ) < 3 then
48137: LD_VAR 0 9
48141: PPUSH
48142: CALL_OW 313
48146: PUSH
48147: LD_INT 3
48149: LESS
48150: IFFALSE 48186
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48152: LD_INT 0
48154: PPUSH
48155: LD_INT 5
48157: PUSH
48158: LD_INT 8
48160: PUSH
48161: LD_INT 9
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: LIST
48168: PUSH
48169: LD_VAR 0 17
48173: ARRAY
48174: PPUSH
48175: LD_VAR 0 4
48179: PPUSH
48180: CALL_OW 380
48184: GO 48203
// PrepareHuman ( false , i , skill ) ;
48186: LD_INT 0
48188: PPUSH
48189: LD_VAR 0 8
48193: PPUSH
48194: LD_VAR 0 4
48198: PPUSH
48199: CALL_OW 380
// end else
48203: GO 48222
// PrepareHuman ( false , i , skill ) ;
48205: LD_INT 0
48207: PPUSH
48208: LD_VAR 0 8
48212: PPUSH
48213: LD_VAR 0 4
48217: PPUSH
48218: CALL_OW 380
// un := CreateHuman ;
48222: LD_ADDR_VAR 0 14
48226: PUSH
48227: CALL_OW 44
48231: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48232: LD_ADDR_VAR 0 7
48236: PUSH
48237: LD_VAR 0 7
48241: PPUSH
48242: LD_INT 1
48244: PPUSH
48245: LD_VAR 0 14
48249: PPUSH
48250: CALL_OW 2
48254: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48255: LD_VAR 0 14
48259: PPUSH
48260: LD_VAR 0 9
48264: PPUSH
48265: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48269: LD_VAR 0 9
48273: PPUSH
48274: CALL_OW 313
48278: PUSH
48279: LD_INT 6
48281: EQUAL
48282: PUSH
48283: LD_VAR 0 9
48287: PPUSH
48288: CALL_OW 266
48292: PUSH
48293: LD_INT 32
48295: PUSH
48296: LD_INT 31
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: IN
48303: OR
48304: IFFALSE 48118
48306: GO 48115
48308: POP
48309: POP
// end else
48310: GO 48692
// for j = 1 to x do
48312: LD_ADDR_VAR 0 9
48316: PUSH
48317: DOUBLE
48318: LD_INT 1
48320: DEC
48321: ST_TO_ADDR
48322: LD_VAR 0 13
48326: PUSH
48327: FOR_TO
48328: IFFALSE 48690
// begin InitHc ;
48330: CALL_OW 19
// if not f then
48334: LD_VAR 0 12
48338: NOT
48339: IFFALSE 48428
// begin PrepareHuman ( false , i , skill ) ;
48341: LD_INT 0
48343: PPUSH
48344: LD_VAR 0 8
48348: PPUSH
48349: LD_VAR 0 4
48353: PPUSH
48354: CALL_OW 380
// un := CreateHuman ;
48358: LD_ADDR_VAR 0 14
48362: PUSH
48363: CALL_OW 44
48367: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48368: LD_ADDR_VAR 0 7
48372: PUSH
48373: LD_VAR 0 7
48377: PPUSH
48378: LD_INT 1
48380: PPUSH
48381: LD_VAR 0 14
48385: PPUSH
48386: CALL_OW 2
48390: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48391: LD_VAR 0 14
48395: PPUSH
48396: LD_VAR 0 1
48400: PPUSH
48401: CALL_OW 250
48405: PPUSH
48406: LD_VAR 0 1
48410: PPUSH
48411: CALL_OW 251
48415: PPUSH
48416: LD_INT 10
48418: PPUSH
48419: LD_INT 0
48421: PPUSH
48422: CALL_OW 50
// continue ;
48426: GO 48327
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48428: LD_VAR 0 12
48432: PUSH
48433: LD_INT 1
48435: ARRAY
48436: PPUSH
48437: CALL_OW 313
48441: PUSH
48442: LD_VAR 0 12
48446: PUSH
48447: LD_INT 1
48449: ARRAY
48450: PPUSH
48451: CALL_OW 266
48455: PUSH
48456: LD_INT 32
48458: PUSH
48459: LD_INT 31
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: IN
48466: AND
48467: PUSH
48468: LD_VAR 0 12
48472: PUSH
48473: LD_INT 1
48475: ARRAY
48476: PPUSH
48477: CALL_OW 313
48481: PUSH
48482: LD_INT 6
48484: EQUAL
48485: OR
48486: IFFALSE 48506
// f := Delete ( f , 1 ) ;
48488: LD_ADDR_VAR 0 12
48492: PUSH
48493: LD_VAR 0 12
48497: PPUSH
48498: LD_INT 1
48500: PPUSH
48501: CALL_OW 3
48505: ST_TO_ADDR
// if not f then
48506: LD_VAR 0 12
48510: NOT
48511: IFFALSE 48529
// begin x := x + 2 ;
48513: LD_ADDR_VAR 0 13
48517: PUSH
48518: LD_VAR 0 13
48522: PUSH
48523: LD_INT 2
48525: PLUS
48526: ST_TO_ADDR
// continue ;
48527: GO 48327
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48529: LD_VAR 0 12
48533: PUSH
48534: LD_INT 1
48536: ARRAY
48537: PPUSH
48538: CALL_OW 266
48542: PUSH
48543: LD_INT 5
48545: EQUAL
48546: IFFALSE 48620
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48548: LD_VAR 0 12
48552: PUSH
48553: LD_INT 1
48555: ARRAY
48556: PPUSH
48557: CALL_OW 313
48561: PUSH
48562: LD_INT 3
48564: LESS
48565: IFFALSE 48601
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48567: LD_INT 0
48569: PPUSH
48570: LD_INT 5
48572: PUSH
48573: LD_INT 8
48575: PUSH
48576: LD_INT 9
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: LIST
48583: PUSH
48584: LD_VAR 0 17
48588: ARRAY
48589: PPUSH
48590: LD_VAR 0 4
48594: PPUSH
48595: CALL_OW 380
48599: GO 48618
// PrepareHuman ( false , i , skill ) ;
48601: LD_INT 0
48603: PPUSH
48604: LD_VAR 0 8
48608: PPUSH
48609: LD_VAR 0 4
48613: PPUSH
48614: CALL_OW 380
// end else
48618: GO 48637
// PrepareHuman ( false , i , skill ) ;
48620: LD_INT 0
48622: PPUSH
48623: LD_VAR 0 8
48627: PPUSH
48628: LD_VAR 0 4
48632: PPUSH
48633: CALL_OW 380
// un := CreateHuman ;
48637: LD_ADDR_VAR 0 14
48641: PUSH
48642: CALL_OW 44
48646: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48647: LD_ADDR_VAR 0 7
48651: PUSH
48652: LD_VAR 0 7
48656: PPUSH
48657: LD_INT 1
48659: PPUSH
48660: LD_VAR 0 14
48664: PPUSH
48665: CALL_OW 2
48669: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48670: LD_VAR 0 14
48674: PPUSH
48675: LD_VAR 0 12
48679: PUSH
48680: LD_INT 1
48682: ARRAY
48683: PPUSH
48684: CALL_OW 52
// end ;
48688: GO 48327
48690: POP
48691: POP
// end ;
48692: GO 47629
48694: POP
48695: POP
// result := result ^ buildings ;
48696: LD_ADDR_VAR 0 7
48700: PUSH
48701: LD_VAR 0 7
48705: PUSH
48706: LD_VAR 0 18
48710: ADD
48711: ST_TO_ADDR
// end else
48712: GO 48855
// begin for i = 1 to personel do
48714: LD_ADDR_VAR 0 8
48718: PUSH
48719: DOUBLE
48720: LD_INT 1
48722: DEC
48723: ST_TO_ADDR
48724: LD_VAR 0 6
48728: PUSH
48729: FOR_TO
48730: IFFALSE 48853
// begin if i > 4 then
48732: LD_VAR 0 8
48736: PUSH
48737: LD_INT 4
48739: GREATER
48740: IFFALSE 48744
// break ;
48742: GO 48853
// x := personel [ i ] ;
48744: LD_ADDR_VAR 0 13
48748: PUSH
48749: LD_VAR 0 6
48753: PUSH
48754: LD_VAR 0 8
48758: ARRAY
48759: ST_TO_ADDR
// if x = - 1 then
48760: LD_VAR 0 13
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: EQUAL
48769: IFFALSE 48773
// continue ;
48771: GO 48729
// PrepareHuman ( false , i , skill ) ;
48773: LD_INT 0
48775: PPUSH
48776: LD_VAR 0 8
48780: PPUSH
48781: LD_VAR 0 4
48785: PPUSH
48786: CALL_OW 380
// un := CreateHuman ;
48790: LD_ADDR_VAR 0 14
48794: PUSH
48795: CALL_OW 44
48799: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48800: LD_VAR 0 14
48804: PPUSH
48805: LD_VAR 0 1
48809: PPUSH
48810: CALL_OW 250
48814: PPUSH
48815: LD_VAR 0 1
48819: PPUSH
48820: CALL_OW 251
48824: PPUSH
48825: LD_INT 10
48827: PPUSH
48828: LD_INT 0
48830: PPUSH
48831: CALL_OW 50
// result := result ^ un ;
48835: LD_ADDR_VAR 0 7
48839: PUSH
48840: LD_VAR 0 7
48844: PUSH
48845: LD_VAR 0 14
48849: ADD
48850: ST_TO_ADDR
// end ;
48851: GO 48729
48853: POP
48854: POP
// end ; end ;
48855: LD_VAR 0 7
48859: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48860: LD_INT 0
48862: PPUSH
48863: PPUSH
48864: PPUSH
48865: PPUSH
48866: PPUSH
48867: PPUSH
48868: PPUSH
48869: PPUSH
48870: PPUSH
48871: PPUSH
48872: PPUSH
48873: PPUSH
48874: PPUSH
48875: PPUSH
48876: PPUSH
48877: PPUSH
// result := false ;
48878: LD_ADDR_VAR 0 3
48882: PUSH
48883: LD_INT 0
48885: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48886: LD_VAR 0 1
48890: NOT
48891: PUSH
48892: LD_VAR 0 1
48896: PPUSH
48897: CALL_OW 266
48901: PUSH
48902: LD_INT 32
48904: PUSH
48905: LD_INT 33
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: IN
48912: NOT
48913: OR
48914: IFFALSE 48918
// exit ;
48916: GO 50027
// nat := GetNation ( tower ) ;
48918: LD_ADDR_VAR 0 12
48922: PUSH
48923: LD_VAR 0 1
48927: PPUSH
48928: CALL_OW 248
48932: ST_TO_ADDR
// side := GetSide ( tower ) ;
48933: LD_ADDR_VAR 0 16
48937: PUSH
48938: LD_VAR 0 1
48942: PPUSH
48943: CALL_OW 255
48947: ST_TO_ADDR
// x := GetX ( tower ) ;
48948: LD_ADDR_VAR 0 10
48952: PUSH
48953: LD_VAR 0 1
48957: PPUSH
48958: CALL_OW 250
48962: ST_TO_ADDR
// y := GetY ( tower ) ;
48963: LD_ADDR_VAR 0 11
48967: PUSH
48968: LD_VAR 0 1
48972: PPUSH
48973: CALL_OW 251
48977: ST_TO_ADDR
// if not x or not y then
48978: LD_VAR 0 10
48982: NOT
48983: PUSH
48984: LD_VAR 0 11
48988: NOT
48989: OR
48990: IFFALSE 48994
// exit ;
48992: GO 50027
// weapon := 0 ;
48994: LD_ADDR_VAR 0 18
48998: PUSH
48999: LD_INT 0
49001: ST_TO_ADDR
// fac_list := [ ] ;
49002: LD_ADDR_VAR 0 17
49006: PUSH
49007: EMPTY
49008: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49009: LD_ADDR_VAR 0 6
49013: PUSH
49014: LD_VAR 0 1
49018: PPUSH
49019: CALL_OW 274
49023: PPUSH
49024: LD_VAR 0 2
49028: PPUSH
49029: LD_INT 0
49031: PPUSH
49032: CALL 46598 0 3
49036: PPUSH
49037: LD_INT 30
49039: PUSH
49040: LD_INT 3
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PPUSH
49047: CALL_OW 72
49051: ST_TO_ADDR
// if not factories then
49052: LD_VAR 0 6
49056: NOT
49057: IFFALSE 49061
// exit ;
49059: GO 50027
// for i in factories do
49061: LD_ADDR_VAR 0 8
49065: PUSH
49066: LD_VAR 0 6
49070: PUSH
49071: FOR_IN
49072: IFFALSE 49097
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49074: LD_ADDR_VAR 0 17
49078: PUSH
49079: LD_VAR 0 17
49083: PUSH
49084: LD_VAR 0 8
49088: PPUSH
49089: CALL_OW 478
49093: UNION
49094: ST_TO_ADDR
49095: GO 49071
49097: POP
49098: POP
// if not fac_list then
49099: LD_VAR 0 17
49103: NOT
49104: IFFALSE 49108
// exit ;
49106: GO 50027
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49108: LD_ADDR_VAR 0 5
49112: PUSH
49113: LD_INT 4
49115: PUSH
49116: LD_INT 5
49118: PUSH
49119: LD_INT 9
49121: PUSH
49122: LD_INT 10
49124: PUSH
49125: LD_INT 6
49127: PUSH
49128: LD_INT 7
49130: PUSH
49131: LD_INT 11
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 27
49145: PUSH
49146: LD_INT 28
49148: PUSH
49149: LD_INT 26
49151: PUSH
49152: LD_INT 30
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 43
49163: PUSH
49164: LD_INT 44
49166: PUSH
49167: LD_INT 46
49169: PUSH
49170: LD_INT 45
49172: PUSH
49173: LD_INT 47
49175: PUSH
49176: LD_INT 49
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: LIST
49191: PUSH
49192: LD_VAR 0 12
49196: ARRAY
49197: ST_TO_ADDR
// list := list isect fac_list ;
49198: LD_ADDR_VAR 0 5
49202: PUSH
49203: LD_VAR 0 5
49207: PUSH
49208: LD_VAR 0 17
49212: ISECT
49213: ST_TO_ADDR
// if not list then
49214: LD_VAR 0 5
49218: NOT
49219: IFFALSE 49223
// exit ;
49221: GO 50027
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49223: LD_VAR 0 12
49227: PUSH
49228: LD_INT 3
49230: EQUAL
49231: PUSH
49232: LD_INT 49
49234: PUSH
49235: LD_VAR 0 5
49239: IN
49240: AND
49241: PUSH
49242: LD_INT 31
49244: PPUSH
49245: LD_VAR 0 16
49249: PPUSH
49250: CALL_OW 321
49254: PUSH
49255: LD_INT 2
49257: EQUAL
49258: AND
49259: IFFALSE 49319
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49261: LD_INT 22
49263: PUSH
49264: LD_VAR 0 16
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 35
49275: PUSH
49276: LD_INT 49
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 91
49285: PUSH
49286: LD_VAR 0 1
49290: PUSH
49291: LD_INT 10
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: LIST
49303: PPUSH
49304: CALL_OW 69
49308: NOT
49309: IFFALSE 49319
// weapon := ru_time_lapser ;
49311: LD_ADDR_VAR 0 18
49315: PUSH
49316: LD_INT 49
49318: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49319: LD_VAR 0 12
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: IN
49334: PUSH
49335: LD_INT 11
49337: PUSH
49338: LD_VAR 0 5
49342: IN
49343: PUSH
49344: LD_INT 30
49346: PUSH
49347: LD_VAR 0 5
49351: IN
49352: OR
49353: AND
49354: PUSH
49355: LD_INT 6
49357: PPUSH
49358: LD_VAR 0 16
49362: PPUSH
49363: CALL_OW 321
49367: PUSH
49368: LD_INT 2
49370: EQUAL
49371: AND
49372: IFFALSE 49537
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49374: LD_INT 22
49376: PUSH
49377: LD_VAR 0 16
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: LD_INT 35
49391: PUSH
49392: LD_INT 11
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 35
49401: PUSH
49402: LD_INT 30
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 91
49416: PUSH
49417: LD_VAR 0 1
49421: PUSH
49422: LD_INT 18
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: LIST
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: LIST
49434: PPUSH
49435: CALL_OW 69
49439: NOT
49440: PUSH
49441: LD_INT 22
49443: PUSH
49444: LD_VAR 0 16
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: PUSH
49456: LD_INT 30
49458: PUSH
49459: LD_INT 32
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 30
49468: PUSH
49469: LD_INT 33
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 91
49483: PUSH
49484: LD_VAR 0 1
49488: PUSH
49489: LD_INT 12
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: LIST
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: LIST
49501: PUSH
49502: EMPTY
49503: LIST
49504: PPUSH
49505: CALL_OW 69
49509: PUSH
49510: LD_INT 2
49512: GREATER
49513: AND
49514: IFFALSE 49537
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49516: LD_ADDR_VAR 0 18
49520: PUSH
49521: LD_INT 11
49523: PUSH
49524: LD_INT 30
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_VAR 0 12
49535: ARRAY
49536: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49537: LD_VAR 0 18
49541: NOT
49542: PUSH
49543: LD_INT 40
49545: PPUSH
49546: LD_VAR 0 16
49550: PPUSH
49551: CALL_OW 321
49555: PUSH
49556: LD_INT 2
49558: EQUAL
49559: AND
49560: PUSH
49561: LD_INT 7
49563: PUSH
49564: LD_VAR 0 5
49568: IN
49569: PUSH
49570: LD_INT 28
49572: PUSH
49573: LD_VAR 0 5
49577: IN
49578: OR
49579: PUSH
49580: LD_INT 45
49582: PUSH
49583: LD_VAR 0 5
49587: IN
49588: OR
49589: AND
49590: IFFALSE 49844
// begin hex := GetHexInfo ( x , y ) ;
49592: LD_ADDR_VAR 0 4
49596: PUSH
49597: LD_VAR 0 10
49601: PPUSH
49602: LD_VAR 0 11
49606: PPUSH
49607: CALL_OW 546
49611: ST_TO_ADDR
// if hex [ 1 ] then
49612: LD_VAR 0 4
49616: PUSH
49617: LD_INT 1
49619: ARRAY
49620: IFFALSE 49624
// exit ;
49622: GO 50027
// height := hex [ 2 ] ;
49624: LD_ADDR_VAR 0 15
49628: PUSH
49629: LD_VAR 0 4
49633: PUSH
49634: LD_INT 2
49636: ARRAY
49637: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49638: LD_ADDR_VAR 0 14
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 2
49648: PUSH
49649: LD_INT 3
49651: PUSH
49652: LD_INT 5
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: ST_TO_ADDR
// for i in tmp do
49661: LD_ADDR_VAR 0 8
49665: PUSH
49666: LD_VAR 0 14
49670: PUSH
49671: FOR_IN
49672: IFFALSE 49842
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49674: LD_ADDR_VAR 0 9
49678: PUSH
49679: LD_VAR 0 10
49683: PPUSH
49684: LD_VAR 0 8
49688: PPUSH
49689: LD_INT 5
49691: PPUSH
49692: CALL_OW 272
49696: PUSH
49697: LD_VAR 0 11
49701: PPUSH
49702: LD_VAR 0 8
49706: PPUSH
49707: LD_INT 5
49709: PPUSH
49710: CALL_OW 273
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49719: LD_VAR 0 9
49723: PUSH
49724: LD_INT 1
49726: ARRAY
49727: PPUSH
49728: LD_VAR 0 9
49732: PUSH
49733: LD_INT 2
49735: ARRAY
49736: PPUSH
49737: CALL_OW 488
49741: IFFALSE 49840
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49743: LD_ADDR_VAR 0 4
49747: PUSH
49748: LD_VAR 0 9
49752: PUSH
49753: LD_INT 1
49755: ARRAY
49756: PPUSH
49757: LD_VAR 0 9
49761: PUSH
49762: LD_INT 2
49764: ARRAY
49765: PPUSH
49766: CALL_OW 546
49770: ST_TO_ADDR
// if hex [ 1 ] then
49771: LD_VAR 0 4
49775: PUSH
49776: LD_INT 1
49778: ARRAY
49779: IFFALSE 49783
// continue ;
49781: GO 49671
// h := hex [ 2 ] ;
49783: LD_ADDR_VAR 0 13
49787: PUSH
49788: LD_VAR 0 4
49792: PUSH
49793: LD_INT 2
49795: ARRAY
49796: ST_TO_ADDR
// if h + 7 < height then
49797: LD_VAR 0 13
49801: PUSH
49802: LD_INT 7
49804: PLUS
49805: PUSH
49806: LD_VAR 0 15
49810: LESS
49811: IFFALSE 49840
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49813: LD_ADDR_VAR 0 18
49817: PUSH
49818: LD_INT 7
49820: PUSH
49821: LD_INT 28
49823: PUSH
49824: LD_INT 45
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: LIST
49831: PUSH
49832: LD_VAR 0 12
49836: ARRAY
49837: ST_TO_ADDR
// break ;
49838: GO 49842
// end ; end ; end ;
49840: GO 49671
49842: POP
49843: POP
// end ; if not weapon then
49844: LD_VAR 0 18
49848: NOT
49849: IFFALSE 49909
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49851: LD_ADDR_VAR 0 5
49855: PUSH
49856: LD_VAR 0 5
49860: PUSH
49861: LD_INT 11
49863: PUSH
49864: LD_INT 30
49866: PUSH
49867: LD_INT 49
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: LIST
49874: DIFF
49875: ST_TO_ADDR
// if not list then
49876: LD_VAR 0 5
49880: NOT
49881: IFFALSE 49885
// exit ;
49883: GO 50027
// weapon := list [ rand ( 1 , list ) ] ;
49885: LD_ADDR_VAR 0 18
49889: PUSH
49890: LD_VAR 0 5
49894: PUSH
49895: LD_INT 1
49897: PPUSH
49898: LD_VAR 0 5
49902: PPUSH
49903: CALL_OW 12
49907: ARRAY
49908: ST_TO_ADDR
// end ; if weapon then
49909: LD_VAR 0 18
49913: IFFALSE 50027
// begin tmp := CostOfWeapon ( weapon ) ;
49915: LD_ADDR_VAR 0 14
49919: PUSH
49920: LD_VAR 0 18
49924: PPUSH
49925: CALL_OW 451
49929: ST_TO_ADDR
// j := GetBase ( tower ) ;
49930: LD_ADDR_VAR 0 9
49934: PUSH
49935: LD_VAR 0 1
49939: PPUSH
49940: CALL_OW 274
49944: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49945: LD_VAR 0 9
49949: PPUSH
49950: LD_INT 1
49952: PPUSH
49953: CALL_OW 275
49957: PUSH
49958: LD_VAR 0 14
49962: PUSH
49963: LD_INT 1
49965: ARRAY
49966: GREATEREQUAL
49967: PUSH
49968: LD_VAR 0 9
49972: PPUSH
49973: LD_INT 2
49975: PPUSH
49976: CALL_OW 275
49980: PUSH
49981: LD_VAR 0 14
49985: PUSH
49986: LD_INT 2
49988: ARRAY
49989: GREATEREQUAL
49990: AND
49991: PUSH
49992: LD_VAR 0 9
49996: PPUSH
49997: LD_INT 3
49999: PPUSH
50000: CALL_OW 275
50004: PUSH
50005: LD_VAR 0 14
50009: PUSH
50010: LD_INT 3
50012: ARRAY
50013: GREATEREQUAL
50014: AND
50015: IFFALSE 50027
// result := weapon ;
50017: LD_ADDR_VAR 0 3
50021: PUSH
50022: LD_VAR 0 18
50026: ST_TO_ADDR
// end ; end ;
50027: LD_VAR 0 3
50031: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50032: LD_INT 0
50034: PPUSH
50035: PPUSH
// result := true ;
50036: LD_ADDR_VAR 0 3
50040: PUSH
50041: LD_INT 1
50043: ST_TO_ADDR
// if array1 = array2 then
50044: LD_VAR 0 1
50048: PUSH
50049: LD_VAR 0 2
50053: EQUAL
50054: IFFALSE 50114
// begin for i = 1 to array1 do
50056: LD_ADDR_VAR 0 4
50060: PUSH
50061: DOUBLE
50062: LD_INT 1
50064: DEC
50065: ST_TO_ADDR
50066: LD_VAR 0 1
50070: PUSH
50071: FOR_TO
50072: IFFALSE 50110
// if array1 [ i ] <> array2 [ i ] then
50074: LD_VAR 0 1
50078: PUSH
50079: LD_VAR 0 4
50083: ARRAY
50084: PUSH
50085: LD_VAR 0 2
50089: PUSH
50090: LD_VAR 0 4
50094: ARRAY
50095: NONEQUAL
50096: IFFALSE 50108
// begin result := false ;
50098: LD_ADDR_VAR 0 3
50102: PUSH
50103: LD_INT 0
50105: ST_TO_ADDR
// break ;
50106: GO 50110
// end ;
50108: GO 50071
50110: POP
50111: POP
// end else
50112: GO 50122
// result := false ;
50114: LD_ADDR_VAR 0 3
50118: PUSH
50119: LD_INT 0
50121: ST_TO_ADDR
// end ;
50122: LD_VAR 0 3
50126: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50127: LD_INT 0
50129: PPUSH
50130: PPUSH
// if not array1 or not array2 then
50131: LD_VAR 0 1
50135: NOT
50136: PUSH
50137: LD_VAR 0 2
50141: NOT
50142: OR
50143: IFFALSE 50147
// exit ;
50145: GO 50211
// result := true ;
50147: LD_ADDR_VAR 0 3
50151: PUSH
50152: LD_INT 1
50154: ST_TO_ADDR
// for i = 1 to array1 do
50155: LD_ADDR_VAR 0 4
50159: PUSH
50160: DOUBLE
50161: LD_INT 1
50163: DEC
50164: ST_TO_ADDR
50165: LD_VAR 0 1
50169: PUSH
50170: FOR_TO
50171: IFFALSE 50209
// if array1 [ i ] <> array2 [ i ] then
50173: LD_VAR 0 1
50177: PUSH
50178: LD_VAR 0 4
50182: ARRAY
50183: PUSH
50184: LD_VAR 0 2
50188: PUSH
50189: LD_VAR 0 4
50193: ARRAY
50194: NONEQUAL
50195: IFFALSE 50207
// begin result := false ;
50197: LD_ADDR_VAR 0 3
50201: PUSH
50202: LD_INT 0
50204: ST_TO_ADDR
// break ;
50205: GO 50209
// end ;
50207: GO 50170
50209: POP
50210: POP
// end ;
50211: LD_VAR 0 3
50215: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50216: LD_INT 0
50218: PPUSH
50219: PPUSH
50220: PPUSH
// pom := GetBase ( fac ) ;
50221: LD_ADDR_VAR 0 5
50225: PUSH
50226: LD_VAR 0 1
50230: PPUSH
50231: CALL_OW 274
50235: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50236: LD_ADDR_VAR 0 4
50240: PUSH
50241: LD_VAR 0 2
50245: PUSH
50246: LD_INT 1
50248: ARRAY
50249: PPUSH
50250: LD_VAR 0 2
50254: PUSH
50255: LD_INT 2
50257: ARRAY
50258: PPUSH
50259: LD_VAR 0 2
50263: PUSH
50264: LD_INT 3
50266: ARRAY
50267: PPUSH
50268: LD_VAR 0 2
50272: PUSH
50273: LD_INT 4
50275: ARRAY
50276: PPUSH
50277: CALL_OW 449
50281: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50282: LD_ADDR_VAR 0 3
50286: PUSH
50287: LD_VAR 0 5
50291: PPUSH
50292: LD_INT 1
50294: PPUSH
50295: CALL_OW 275
50299: PUSH
50300: LD_VAR 0 4
50304: PUSH
50305: LD_INT 1
50307: ARRAY
50308: GREATEREQUAL
50309: PUSH
50310: LD_VAR 0 5
50314: PPUSH
50315: LD_INT 2
50317: PPUSH
50318: CALL_OW 275
50322: PUSH
50323: LD_VAR 0 4
50327: PUSH
50328: LD_INT 2
50330: ARRAY
50331: GREATEREQUAL
50332: AND
50333: PUSH
50334: LD_VAR 0 5
50338: PPUSH
50339: LD_INT 3
50341: PPUSH
50342: CALL_OW 275
50346: PUSH
50347: LD_VAR 0 4
50351: PUSH
50352: LD_INT 3
50354: ARRAY
50355: GREATEREQUAL
50356: AND
50357: ST_TO_ADDR
// end ;
50358: LD_VAR 0 3
50362: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50363: LD_INT 0
50365: PPUSH
50366: PPUSH
50367: PPUSH
50368: PPUSH
// pom := GetBase ( building ) ;
50369: LD_ADDR_VAR 0 3
50373: PUSH
50374: LD_VAR 0 1
50378: PPUSH
50379: CALL_OW 274
50383: ST_TO_ADDR
// if not pom then
50384: LD_VAR 0 3
50388: NOT
50389: IFFALSE 50393
// exit ;
50391: GO 50563
// btype := GetBType ( building ) ;
50393: LD_ADDR_VAR 0 5
50397: PUSH
50398: LD_VAR 0 1
50402: PPUSH
50403: CALL_OW 266
50407: ST_TO_ADDR
// if btype = b_armoury then
50408: LD_VAR 0 5
50412: PUSH
50413: LD_INT 4
50415: EQUAL
50416: IFFALSE 50426
// btype := b_barracks ;
50418: LD_ADDR_VAR 0 5
50422: PUSH
50423: LD_INT 5
50425: ST_TO_ADDR
// if btype = b_depot then
50426: LD_VAR 0 5
50430: PUSH
50431: LD_INT 0
50433: EQUAL
50434: IFFALSE 50444
// btype := b_warehouse ;
50436: LD_ADDR_VAR 0 5
50440: PUSH
50441: LD_INT 1
50443: ST_TO_ADDR
// if btype = b_workshop then
50444: LD_VAR 0 5
50448: PUSH
50449: LD_INT 2
50451: EQUAL
50452: IFFALSE 50462
// btype := b_factory ;
50454: LD_ADDR_VAR 0 5
50458: PUSH
50459: LD_INT 3
50461: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50462: LD_ADDR_VAR 0 4
50466: PUSH
50467: LD_VAR 0 5
50471: PPUSH
50472: LD_VAR 0 1
50476: PPUSH
50477: CALL_OW 248
50481: PPUSH
50482: CALL_OW 450
50486: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50487: LD_ADDR_VAR 0 2
50491: PUSH
50492: LD_VAR 0 3
50496: PPUSH
50497: LD_INT 1
50499: PPUSH
50500: CALL_OW 275
50504: PUSH
50505: LD_VAR 0 4
50509: PUSH
50510: LD_INT 1
50512: ARRAY
50513: GREATEREQUAL
50514: PUSH
50515: LD_VAR 0 3
50519: PPUSH
50520: LD_INT 2
50522: PPUSH
50523: CALL_OW 275
50527: PUSH
50528: LD_VAR 0 4
50532: PUSH
50533: LD_INT 2
50535: ARRAY
50536: GREATEREQUAL
50537: AND
50538: PUSH
50539: LD_VAR 0 3
50543: PPUSH
50544: LD_INT 3
50546: PPUSH
50547: CALL_OW 275
50551: PUSH
50552: LD_VAR 0 4
50556: PUSH
50557: LD_INT 3
50559: ARRAY
50560: GREATEREQUAL
50561: AND
50562: ST_TO_ADDR
// end ;
50563: LD_VAR 0 2
50567: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50568: LD_INT 0
50570: PPUSH
50571: PPUSH
50572: PPUSH
// pom := GetBase ( building ) ;
50573: LD_ADDR_VAR 0 4
50577: PUSH
50578: LD_VAR 0 1
50582: PPUSH
50583: CALL_OW 274
50587: ST_TO_ADDR
// if not pom then
50588: LD_VAR 0 4
50592: NOT
50593: IFFALSE 50597
// exit ;
50595: GO 50698
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50597: LD_ADDR_VAR 0 5
50601: PUSH
50602: LD_VAR 0 2
50606: PPUSH
50607: LD_VAR 0 1
50611: PPUSH
50612: CALL_OW 248
50616: PPUSH
50617: CALL_OW 450
50621: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50622: LD_ADDR_VAR 0 3
50626: PUSH
50627: LD_VAR 0 4
50631: PPUSH
50632: LD_INT 1
50634: PPUSH
50635: CALL_OW 275
50639: PUSH
50640: LD_VAR 0 5
50644: PUSH
50645: LD_INT 1
50647: ARRAY
50648: GREATEREQUAL
50649: PUSH
50650: LD_VAR 0 4
50654: PPUSH
50655: LD_INT 2
50657: PPUSH
50658: CALL_OW 275
50662: PUSH
50663: LD_VAR 0 5
50667: PUSH
50668: LD_INT 2
50670: ARRAY
50671: GREATEREQUAL
50672: AND
50673: PUSH
50674: LD_VAR 0 4
50678: PPUSH
50679: LD_INT 3
50681: PPUSH
50682: CALL_OW 275
50686: PUSH
50687: LD_VAR 0 5
50691: PUSH
50692: LD_INT 3
50694: ARRAY
50695: GREATEREQUAL
50696: AND
50697: ST_TO_ADDR
// end ;
50698: LD_VAR 0 3
50702: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50703: LD_INT 0
50705: PPUSH
50706: PPUSH
50707: PPUSH
50708: PPUSH
50709: PPUSH
50710: PPUSH
50711: PPUSH
50712: PPUSH
50713: PPUSH
50714: PPUSH
50715: PPUSH
// result := false ;
50716: LD_ADDR_VAR 0 8
50720: PUSH
50721: LD_INT 0
50723: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50724: LD_VAR 0 5
50728: NOT
50729: PUSH
50730: LD_VAR 0 1
50734: NOT
50735: OR
50736: PUSH
50737: LD_VAR 0 2
50741: NOT
50742: OR
50743: PUSH
50744: LD_VAR 0 3
50748: NOT
50749: OR
50750: IFFALSE 50754
// exit ;
50752: GO 51568
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50754: LD_ADDR_VAR 0 14
50758: PUSH
50759: LD_VAR 0 1
50763: PPUSH
50764: LD_VAR 0 2
50768: PPUSH
50769: LD_VAR 0 3
50773: PPUSH
50774: LD_VAR 0 4
50778: PPUSH
50779: LD_VAR 0 5
50783: PUSH
50784: LD_INT 1
50786: ARRAY
50787: PPUSH
50788: CALL_OW 248
50792: PPUSH
50793: LD_INT 0
50795: PPUSH
50796: CALL 52805 0 6
50800: ST_TO_ADDR
// if not hexes then
50801: LD_VAR 0 14
50805: NOT
50806: IFFALSE 50810
// exit ;
50808: GO 51568
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50810: LD_ADDR_VAR 0 17
50814: PUSH
50815: LD_VAR 0 5
50819: PPUSH
50820: LD_INT 22
50822: PUSH
50823: LD_VAR 0 13
50827: PPUSH
50828: CALL_OW 255
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: LD_INT 30
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 30
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: LIST
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PPUSH
50869: CALL_OW 72
50873: ST_TO_ADDR
// for i = 1 to hexes do
50874: LD_ADDR_VAR 0 9
50878: PUSH
50879: DOUBLE
50880: LD_INT 1
50882: DEC
50883: ST_TO_ADDR
50884: LD_VAR 0 14
50888: PUSH
50889: FOR_TO
50890: IFFALSE 51566
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50892: LD_ADDR_VAR 0 13
50896: PUSH
50897: LD_VAR 0 14
50901: PUSH
50902: LD_VAR 0 9
50906: ARRAY
50907: PUSH
50908: LD_INT 1
50910: ARRAY
50911: PPUSH
50912: LD_VAR 0 14
50916: PUSH
50917: LD_VAR 0 9
50921: ARRAY
50922: PUSH
50923: LD_INT 2
50925: ARRAY
50926: PPUSH
50927: CALL_OW 428
50931: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50932: LD_VAR 0 14
50936: PUSH
50937: LD_VAR 0 9
50941: ARRAY
50942: PUSH
50943: LD_INT 1
50945: ARRAY
50946: PPUSH
50947: LD_VAR 0 14
50951: PUSH
50952: LD_VAR 0 9
50956: ARRAY
50957: PUSH
50958: LD_INT 2
50960: ARRAY
50961: PPUSH
50962: CALL_OW 351
50966: PUSH
50967: LD_VAR 0 14
50971: PUSH
50972: LD_VAR 0 9
50976: ARRAY
50977: PUSH
50978: LD_INT 1
50980: ARRAY
50981: PPUSH
50982: LD_VAR 0 14
50986: PUSH
50987: LD_VAR 0 9
50991: ARRAY
50992: PUSH
50993: LD_INT 2
50995: ARRAY
50996: PPUSH
50997: CALL_OW 488
51001: NOT
51002: OR
51003: PUSH
51004: LD_VAR 0 13
51008: PPUSH
51009: CALL_OW 247
51013: PUSH
51014: LD_INT 3
51016: EQUAL
51017: OR
51018: IFFALSE 51024
// exit ;
51020: POP
51021: POP
51022: GO 51568
// if not tmp then
51024: LD_VAR 0 13
51028: NOT
51029: IFFALSE 51033
// continue ;
51031: GO 50889
// result := true ;
51033: LD_ADDR_VAR 0 8
51037: PUSH
51038: LD_INT 1
51040: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51041: LD_VAR 0 6
51045: PUSH
51046: LD_VAR 0 13
51050: PPUSH
51051: CALL_OW 247
51055: PUSH
51056: LD_INT 2
51058: EQUAL
51059: AND
51060: PUSH
51061: LD_VAR 0 13
51065: PPUSH
51066: CALL_OW 263
51070: PUSH
51071: LD_INT 1
51073: EQUAL
51074: AND
51075: IFFALSE 51239
// begin if IsDrivenBy ( tmp ) then
51077: LD_VAR 0 13
51081: PPUSH
51082: CALL_OW 311
51086: IFFALSE 51090
// continue ;
51088: GO 50889
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51090: LD_VAR 0 6
51094: PPUSH
51095: LD_INT 3
51097: PUSH
51098: LD_INT 60
51100: PUSH
51101: EMPTY
51102: LIST
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 3
51110: PUSH
51111: LD_INT 55
51113: PUSH
51114: EMPTY
51115: LIST
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PPUSH
51125: CALL_OW 72
51129: IFFALSE 51237
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51131: LD_ADDR_VAR 0 18
51135: PUSH
51136: LD_VAR 0 6
51140: PPUSH
51141: LD_INT 3
51143: PUSH
51144: LD_INT 60
51146: PUSH
51147: EMPTY
51148: LIST
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 3
51156: PUSH
51157: LD_INT 55
51159: PUSH
51160: EMPTY
51161: LIST
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PPUSH
51171: CALL_OW 72
51175: PUSH
51176: LD_INT 1
51178: ARRAY
51179: ST_TO_ADDR
// if IsInUnit ( driver ) then
51180: LD_VAR 0 18
51184: PPUSH
51185: CALL_OW 310
51189: IFFALSE 51200
// ComExit ( driver ) ;
51191: LD_VAR 0 18
51195: PPUSH
51196: CALL 75933 0 1
// AddComEnterUnit ( driver , tmp ) ;
51200: LD_VAR 0 18
51204: PPUSH
51205: LD_VAR 0 13
51209: PPUSH
51210: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51214: LD_VAR 0 18
51218: PPUSH
51219: LD_VAR 0 7
51223: PPUSH
51224: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51228: LD_VAR 0 18
51232: PPUSH
51233: CALL_OW 181
// end ; continue ;
51237: GO 50889
// end ; if not cleaners or not tmp in cleaners then
51239: LD_VAR 0 6
51243: NOT
51244: PUSH
51245: LD_VAR 0 13
51249: PUSH
51250: LD_VAR 0 6
51254: IN
51255: NOT
51256: OR
51257: IFFALSE 51564
// begin if dep then
51259: LD_VAR 0 17
51263: IFFALSE 51399
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51265: LD_ADDR_VAR 0 16
51269: PUSH
51270: LD_VAR 0 17
51274: PUSH
51275: LD_INT 1
51277: ARRAY
51278: PPUSH
51279: CALL_OW 250
51283: PPUSH
51284: LD_VAR 0 17
51288: PUSH
51289: LD_INT 1
51291: ARRAY
51292: PPUSH
51293: CALL_OW 254
51297: PPUSH
51298: LD_INT 5
51300: PPUSH
51301: CALL_OW 272
51305: PUSH
51306: LD_VAR 0 17
51310: PUSH
51311: LD_INT 1
51313: ARRAY
51314: PPUSH
51315: CALL_OW 251
51319: PPUSH
51320: LD_VAR 0 17
51324: PUSH
51325: LD_INT 1
51327: ARRAY
51328: PPUSH
51329: CALL_OW 254
51333: PPUSH
51334: LD_INT 5
51336: PPUSH
51337: CALL_OW 273
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51346: LD_VAR 0 16
51350: PUSH
51351: LD_INT 1
51353: ARRAY
51354: PPUSH
51355: LD_VAR 0 16
51359: PUSH
51360: LD_INT 2
51362: ARRAY
51363: PPUSH
51364: CALL_OW 488
51368: IFFALSE 51399
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51370: LD_VAR 0 13
51374: PPUSH
51375: LD_VAR 0 16
51379: PUSH
51380: LD_INT 1
51382: ARRAY
51383: PPUSH
51384: LD_VAR 0 16
51388: PUSH
51389: LD_INT 2
51391: ARRAY
51392: PPUSH
51393: CALL_OW 111
// continue ;
51397: GO 50889
// end ; end ; r := GetDir ( tmp ) ;
51399: LD_ADDR_VAR 0 15
51403: PUSH
51404: LD_VAR 0 13
51408: PPUSH
51409: CALL_OW 254
51413: ST_TO_ADDR
// if r = 5 then
51414: LD_VAR 0 15
51418: PUSH
51419: LD_INT 5
51421: EQUAL
51422: IFFALSE 51432
// r := 0 ;
51424: LD_ADDR_VAR 0 15
51428: PUSH
51429: LD_INT 0
51431: ST_TO_ADDR
// for j = r to 5 do
51432: LD_ADDR_VAR 0 10
51436: PUSH
51437: DOUBLE
51438: LD_VAR 0 15
51442: DEC
51443: ST_TO_ADDR
51444: LD_INT 5
51446: PUSH
51447: FOR_TO
51448: IFFALSE 51562
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51450: LD_ADDR_VAR 0 11
51454: PUSH
51455: LD_VAR 0 13
51459: PPUSH
51460: CALL_OW 250
51464: PPUSH
51465: LD_VAR 0 10
51469: PPUSH
51470: LD_INT 2
51472: PPUSH
51473: CALL_OW 272
51477: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51478: LD_ADDR_VAR 0 12
51482: PUSH
51483: LD_VAR 0 13
51487: PPUSH
51488: CALL_OW 251
51492: PPUSH
51493: LD_VAR 0 10
51497: PPUSH
51498: LD_INT 2
51500: PPUSH
51501: CALL_OW 273
51505: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51506: LD_VAR 0 11
51510: PPUSH
51511: LD_VAR 0 12
51515: PPUSH
51516: CALL_OW 488
51520: PUSH
51521: LD_VAR 0 11
51525: PPUSH
51526: LD_VAR 0 12
51530: PPUSH
51531: CALL_OW 428
51535: NOT
51536: AND
51537: IFFALSE 51560
// begin ComMoveXY ( tmp , _x , _y ) ;
51539: LD_VAR 0 13
51543: PPUSH
51544: LD_VAR 0 11
51548: PPUSH
51549: LD_VAR 0 12
51553: PPUSH
51554: CALL_OW 111
// break ;
51558: GO 51562
// end ; end ;
51560: GO 51447
51562: POP
51563: POP
// end ; end ;
51564: GO 50889
51566: POP
51567: POP
// end ;
51568: LD_VAR 0 8
51572: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51573: LD_INT 0
51575: PPUSH
// result := true ;
51576: LD_ADDR_VAR 0 3
51580: PUSH
51581: LD_INT 1
51583: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51584: LD_VAR 0 2
51588: PUSH
51589: LD_INT 24
51591: DOUBLE
51592: EQUAL
51593: IFTRUE 51603
51595: LD_INT 33
51597: DOUBLE
51598: EQUAL
51599: IFTRUE 51603
51601: GO 51628
51603: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51604: LD_ADDR_VAR 0 3
51608: PUSH
51609: LD_INT 32
51611: PPUSH
51612: LD_VAR 0 1
51616: PPUSH
51617: CALL_OW 321
51621: PUSH
51622: LD_INT 2
51624: EQUAL
51625: ST_TO_ADDR
51626: GO 51948
51628: LD_INT 20
51630: DOUBLE
51631: EQUAL
51632: IFTRUE 51636
51634: GO 51661
51636: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51637: LD_ADDR_VAR 0 3
51641: PUSH
51642: LD_INT 6
51644: PPUSH
51645: LD_VAR 0 1
51649: PPUSH
51650: CALL_OW 321
51654: PUSH
51655: LD_INT 2
51657: EQUAL
51658: ST_TO_ADDR
51659: GO 51948
51661: LD_INT 22
51663: DOUBLE
51664: EQUAL
51665: IFTRUE 51675
51667: LD_INT 36
51669: DOUBLE
51670: EQUAL
51671: IFTRUE 51675
51673: GO 51700
51675: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51676: LD_ADDR_VAR 0 3
51680: PUSH
51681: LD_INT 15
51683: PPUSH
51684: LD_VAR 0 1
51688: PPUSH
51689: CALL_OW 321
51693: PUSH
51694: LD_INT 2
51696: EQUAL
51697: ST_TO_ADDR
51698: GO 51948
51700: LD_INT 30
51702: DOUBLE
51703: EQUAL
51704: IFTRUE 51708
51706: GO 51733
51708: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51709: LD_ADDR_VAR 0 3
51713: PUSH
51714: LD_INT 20
51716: PPUSH
51717: LD_VAR 0 1
51721: PPUSH
51722: CALL_OW 321
51726: PUSH
51727: LD_INT 2
51729: EQUAL
51730: ST_TO_ADDR
51731: GO 51948
51733: LD_INT 28
51735: DOUBLE
51736: EQUAL
51737: IFTRUE 51747
51739: LD_INT 21
51741: DOUBLE
51742: EQUAL
51743: IFTRUE 51747
51745: GO 51772
51747: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51748: LD_ADDR_VAR 0 3
51752: PUSH
51753: LD_INT 21
51755: PPUSH
51756: LD_VAR 0 1
51760: PPUSH
51761: CALL_OW 321
51765: PUSH
51766: LD_INT 2
51768: EQUAL
51769: ST_TO_ADDR
51770: GO 51948
51772: LD_INT 16
51774: DOUBLE
51775: EQUAL
51776: IFTRUE 51780
51778: GO 51807
51780: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51781: LD_ADDR_VAR 0 3
51785: PUSH
51786: LD_EXP 62
51790: PPUSH
51791: LD_VAR 0 1
51795: PPUSH
51796: CALL_OW 321
51800: PUSH
51801: LD_INT 2
51803: EQUAL
51804: ST_TO_ADDR
51805: GO 51948
51807: LD_INT 19
51809: DOUBLE
51810: EQUAL
51811: IFTRUE 51821
51813: LD_INT 23
51815: DOUBLE
51816: EQUAL
51817: IFTRUE 51821
51819: GO 51848
51821: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51822: LD_ADDR_VAR 0 3
51826: PUSH
51827: LD_EXP 61
51831: PPUSH
51832: LD_VAR 0 1
51836: PPUSH
51837: CALL_OW 321
51841: PUSH
51842: LD_INT 2
51844: EQUAL
51845: ST_TO_ADDR
51846: GO 51948
51848: LD_INT 17
51850: DOUBLE
51851: EQUAL
51852: IFTRUE 51856
51854: GO 51881
51856: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51857: LD_ADDR_VAR 0 3
51861: PUSH
51862: LD_INT 39
51864: PPUSH
51865: LD_VAR 0 1
51869: PPUSH
51870: CALL_OW 321
51874: PUSH
51875: LD_INT 2
51877: EQUAL
51878: ST_TO_ADDR
51879: GO 51948
51881: LD_INT 18
51883: DOUBLE
51884: EQUAL
51885: IFTRUE 51889
51887: GO 51914
51889: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51890: LD_ADDR_VAR 0 3
51894: PUSH
51895: LD_INT 40
51897: PPUSH
51898: LD_VAR 0 1
51902: PPUSH
51903: CALL_OW 321
51907: PUSH
51908: LD_INT 2
51910: EQUAL
51911: ST_TO_ADDR
51912: GO 51948
51914: LD_INT 27
51916: DOUBLE
51917: EQUAL
51918: IFTRUE 51922
51920: GO 51947
51922: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51923: LD_ADDR_VAR 0 3
51927: PUSH
51928: LD_INT 35
51930: PPUSH
51931: LD_VAR 0 1
51935: PPUSH
51936: CALL_OW 321
51940: PUSH
51941: LD_INT 2
51943: EQUAL
51944: ST_TO_ADDR
51945: GO 51948
51947: POP
// end ;
51948: LD_VAR 0 3
51952: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51953: LD_INT 0
51955: PPUSH
51956: PPUSH
51957: PPUSH
51958: PPUSH
51959: PPUSH
51960: PPUSH
51961: PPUSH
51962: PPUSH
51963: PPUSH
51964: PPUSH
51965: PPUSH
// result := false ;
51966: LD_ADDR_VAR 0 6
51970: PUSH
51971: LD_INT 0
51973: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51974: LD_VAR 0 1
51978: NOT
51979: PUSH
51980: LD_VAR 0 1
51984: PPUSH
51985: CALL_OW 266
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: IN
52000: NOT
52001: OR
52002: PUSH
52003: LD_VAR 0 2
52007: NOT
52008: OR
52009: PUSH
52010: LD_VAR 0 5
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: LD_INT 2
52023: PUSH
52024: LD_INT 3
52026: PUSH
52027: LD_INT 4
52029: PUSH
52030: LD_INT 5
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: IN
52041: NOT
52042: OR
52043: PUSH
52044: LD_VAR 0 3
52048: PPUSH
52049: LD_VAR 0 4
52053: PPUSH
52054: CALL_OW 488
52058: NOT
52059: OR
52060: IFFALSE 52064
// exit ;
52062: GO 52800
// side := GetSide ( depot ) ;
52064: LD_ADDR_VAR 0 9
52068: PUSH
52069: LD_VAR 0 1
52073: PPUSH
52074: CALL_OW 255
52078: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52079: LD_VAR 0 9
52083: PPUSH
52084: LD_VAR 0 2
52088: PPUSH
52089: CALL 51573 0 2
52093: NOT
52094: IFFALSE 52098
// exit ;
52096: GO 52800
// pom := GetBase ( depot ) ;
52098: LD_ADDR_VAR 0 10
52102: PUSH
52103: LD_VAR 0 1
52107: PPUSH
52108: CALL_OW 274
52112: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52113: LD_ADDR_VAR 0 11
52117: PUSH
52118: LD_VAR 0 2
52122: PPUSH
52123: LD_VAR 0 1
52127: PPUSH
52128: CALL_OW 248
52132: PPUSH
52133: CALL_OW 450
52137: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52138: LD_VAR 0 10
52142: PPUSH
52143: LD_INT 1
52145: PPUSH
52146: CALL_OW 275
52150: PUSH
52151: LD_VAR 0 11
52155: PUSH
52156: LD_INT 1
52158: ARRAY
52159: GREATEREQUAL
52160: PUSH
52161: LD_VAR 0 10
52165: PPUSH
52166: LD_INT 2
52168: PPUSH
52169: CALL_OW 275
52173: PUSH
52174: LD_VAR 0 11
52178: PUSH
52179: LD_INT 2
52181: ARRAY
52182: GREATEREQUAL
52183: AND
52184: PUSH
52185: LD_VAR 0 10
52189: PPUSH
52190: LD_INT 3
52192: PPUSH
52193: CALL_OW 275
52197: PUSH
52198: LD_VAR 0 11
52202: PUSH
52203: LD_INT 3
52205: ARRAY
52206: GREATEREQUAL
52207: AND
52208: NOT
52209: IFFALSE 52213
// exit ;
52211: GO 52800
// if GetBType ( depot ) = b_depot then
52213: LD_VAR 0 1
52217: PPUSH
52218: CALL_OW 266
52222: PUSH
52223: LD_INT 0
52225: EQUAL
52226: IFFALSE 52238
// dist := 28 else
52228: LD_ADDR_VAR 0 14
52232: PUSH
52233: LD_INT 28
52235: ST_TO_ADDR
52236: GO 52246
// dist := 36 ;
52238: LD_ADDR_VAR 0 14
52242: PUSH
52243: LD_INT 36
52245: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52246: LD_VAR 0 1
52250: PPUSH
52251: LD_VAR 0 3
52255: PPUSH
52256: LD_VAR 0 4
52260: PPUSH
52261: CALL_OW 297
52265: PUSH
52266: LD_VAR 0 14
52270: GREATER
52271: IFFALSE 52275
// exit ;
52273: GO 52800
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52275: LD_ADDR_VAR 0 12
52279: PUSH
52280: LD_VAR 0 2
52284: PPUSH
52285: LD_VAR 0 3
52289: PPUSH
52290: LD_VAR 0 4
52294: PPUSH
52295: LD_VAR 0 5
52299: PPUSH
52300: LD_VAR 0 1
52304: PPUSH
52305: CALL_OW 248
52309: PPUSH
52310: LD_INT 0
52312: PPUSH
52313: CALL 52805 0 6
52317: ST_TO_ADDR
// if not hexes then
52318: LD_VAR 0 12
52322: NOT
52323: IFFALSE 52327
// exit ;
52325: GO 52800
// hex := GetHexInfo ( x , y ) ;
52327: LD_ADDR_VAR 0 15
52331: PUSH
52332: LD_VAR 0 3
52336: PPUSH
52337: LD_VAR 0 4
52341: PPUSH
52342: CALL_OW 546
52346: ST_TO_ADDR
// if hex [ 1 ] then
52347: LD_VAR 0 15
52351: PUSH
52352: LD_INT 1
52354: ARRAY
52355: IFFALSE 52359
// exit ;
52357: GO 52800
// height := hex [ 2 ] ;
52359: LD_ADDR_VAR 0 13
52363: PUSH
52364: LD_VAR 0 15
52368: PUSH
52369: LD_INT 2
52371: ARRAY
52372: ST_TO_ADDR
// for i = 1 to hexes do
52373: LD_ADDR_VAR 0 7
52377: PUSH
52378: DOUBLE
52379: LD_INT 1
52381: DEC
52382: ST_TO_ADDR
52383: LD_VAR 0 12
52387: PUSH
52388: FOR_TO
52389: IFFALSE 52719
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52391: LD_VAR 0 12
52395: PUSH
52396: LD_VAR 0 7
52400: ARRAY
52401: PUSH
52402: LD_INT 1
52404: ARRAY
52405: PPUSH
52406: LD_VAR 0 12
52410: PUSH
52411: LD_VAR 0 7
52415: ARRAY
52416: PUSH
52417: LD_INT 2
52419: ARRAY
52420: PPUSH
52421: CALL_OW 488
52425: NOT
52426: PUSH
52427: LD_VAR 0 12
52431: PUSH
52432: LD_VAR 0 7
52436: ARRAY
52437: PUSH
52438: LD_INT 1
52440: ARRAY
52441: PPUSH
52442: LD_VAR 0 12
52446: PUSH
52447: LD_VAR 0 7
52451: ARRAY
52452: PUSH
52453: LD_INT 2
52455: ARRAY
52456: PPUSH
52457: CALL_OW 428
52461: PUSH
52462: LD_INT 0
52464: GREATER
52465: OR
52466: PUSH
52467: LD_VAR 0 12
52471: PUSH
52472: LD_VAR 0 7
52476: ARRAY
52477: PUSH
52478: LD_INT 1
52480: ARRAY
52481: PPUSH
52482: LD_VAR 0 12
52486: PUSH
52487: LD_VAR 0 7
52491: ARRAY
52492: PUSH
52493: LD_INT 2
52495: ARRAY
52496: PPUSH
52497: CALL_OW 351
52501: OR
52502: IFFALSE 52508
// exit ;
52504: POP
52505: POP
52506: GO 52800
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52508: LD_ADDR_VAR 0 8
52512: PUSH
52513: LD_VAR 0 12
52517: PUSH
52518: LD_VAR 0 7
52522: ARRAY
52523: PUSH
52524: LD_INT 1
52526: ARRAY
52527: PPUSH
52528: LD_VAR 0 12
52532: PUSH
52533: LD_VAR 0 7
52537: ARRAY
52538: PUSH
52539: LD_INT 2
52541: ARRAY
52542: PPUSH
52543: CALL_OW 546
52547: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52548: LD_VAR 0 8
52552: PUSH
52553: LD_INT 1
52555: ARRAY
52556: PUSH
52557: LD_VAR 0 8
52561: PUSH
52562: LD_INT 2
52564: ARRAY
52565: PUSH
52566: LD_VAR 0 13
52570: PUSH
52571: LD_INT 2
52573: PLUS
52574: GREATER
52575: OR
52576: PUSH
52577: LD_VAR 0 8
52581: PUSH
52582: LD_INT 2
52584: ARRAY
52585: PUSH
52586: LD_VAR 0 13
52590: PUSH
52591: LD_INT 2
52593: MINUS
52594: LESS
52595: OR
52596: PUSH
52597: LD_VAR 0 8
52601: PUSH
52602: LD_INT 3
52604: ARRAY
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 8
52611: PUSH
52612: LD_INT 9
52614: PUSH
52615: LD_INT 10
52617: PUSH
52618: LD_INT 11
52620: PUSH
52621: LD_INT 12
52623: PUSH
52624: LD_INT 13
52626: PUSH
52627: LD_INT 16
52629: PUSH
52630: LD_INT 17
52632: PUSH
52633: LD_INT 18
52635: PUSH
52636: LD_INT 19
52638: PUSH
52639: LD_INT 20
52641: PUSH
52642: LD_INT 21
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: IN
52660: NOT
52661: OR
52662: PUSH
52663: LD_VAR 0 8
52667: PUSH
52668: LD_INT 5
52670: ARRAY
52671: NOT
52672: OR
52673: PUSH
52674: LD_VAR 0 8
52678: PUSH
52679: LD_INT 6
52681: ARRAY
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: LD_INT 7
52691: PUSH
52692: LD_INT 9
52694: PUSH
52695: LD_INT 10
52697: PUSH
52698: LD_INT 11
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: IN
52709: NOT
52710: OR
52711: IFFALSE 52717
// exit ;
52713: POP
52714: POP
52715: GO 52800
// end ;
52717: GO 52388
52719: POP
52720: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52721: LD_VAR 0 9
52725: PPUSH
52726: LD_VAR 0 3
52730: PPUSH
52731: LD_VAR 0 4
52735: PPUSH
52736: LD_INT 20
52738: PPUSH
52739: CALL 44746 0 4
52743: PUSH
52744: LD_INT 4
52746: ARRAY
52747: IFFALSE 52751
// exit ;
52749: GO 52800
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52751: LD_VAR 0 2
52755: PUSH
52756: LD_INT 29
52758: PUSH
52759: LD_INT 30
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: IN
52766: PUSH
52767: LD_VAR 0 3
52771: PPUSH
52772: LD_VAR 0 4
52776: PPUSH
52777: LD_VAR 0 9
52781: PPUSH
52782: CALL_OW 440
52786: NOT
52787: AND
52788: IFFALSE 52792
// exit ;
52790: GO 52800
// result := true ;
52792: LD_ADDR_VAR 0 6
52796: PUSH
52797: LD_INT 1
52799: ST_TO_ADDR
// end ;
52800: LD_VAR 0 6
52804: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52805: LD_INT 0
52807: PPUSH
52808: PPUSH
52809: PPUSH
52810: PPUSH
52811: PPUSH
52812: PPUSH
52813: PPUSH
52814: PPUSH
52815: PPUSH
52816: PPUSH
52817: PPUSH
52818: PPUSH
52819: PPUSH
52820: PPUSH
52821: PPUSH
52822: PPUSH
52823: PPUSH
52824: PPUSH
52825: PPUSH
52826: PPUSH
52827: PPUSH
52828: PPUSH
52829: PPUSH
52830: PPUSH
52831: PPUSH
52832: PPUSH
52833: PPUSH
52834: PPUSH
52835: PPUSH
52836: PPUSH
52837: PPUSH
52838: PPUSH
52839: PPUSH
52840: PPUSH
52841: PPUSH
52842: PPUSH
52843: PPUSH
52844: PPUSH
52845: PPUSH
52846: PPUSH
52847: PPUSH
52848: PPUSH
52849: PPUSH
52850: PPUSH
52851: PPUSH
52852: PPUSH
52853: PPUSH
52854: PPUSH
52855: PPUSH
52856: PPUSH
52857: PPUSH
52858: PPUSH
52859: PPUSH
52860: PPUSH
52861: PPUSH
52862: PPUSH
52863: PPUSH
52864: PPUSH
// result = [ ] ;
52865: LD_ADDR_VAR 0 7
52869: PUSH
52870: EMPTY
52871: ST_TO_ADDR
// temp_list = [ ] ;
52872: LD_ADDR_VAR 0 9
52876: PUSH
52877: EMPTY
52878: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52879: LD_VAR 0 4
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: LD_INT 3
52895: PUSH
52896: LD_INT 4
52898: PUSH
52899: LD_INT 5
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: IN
52910: NOT
52911: PUSH
52912: LD_VAR 0 1
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: IN
52927: PUSH
52928: LD_VAR 0 5
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: LD_INT 2
52938: PUSH
52939: LD_INT 3
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: LIST
52946: IN
52947: NOT
52948: AND
52949: OR
52950: IFFALSE 52954
// exit ;
52952: GO 71345
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52954: LD_VAR 0 1
52958: PUSH
52959: LD_INT 6
52961: PUSH
52962: LD_INT 7
52964: PUSH
52965: LD_INT 8
52967: PUSH
52968: LD_INT 13
52970: PUSH
52971: LD_INT 12
52973: PUSH
52974: LD_INT 15
52976: PUSH
52977: LD_INT 11
52979: PUSH
52980: LD_INT 14
52982: PUSH
52983: LD_INT 10
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: IN
52997: IFFALSE 53007
// btype = b_lab ;
52999: LD_ADDR_VAR 0 1
53003: PUSH
53004: LD_INT 6
53006: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53007: LD_VAR 0 6
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: LIST
53025: IN
53026: NOT
53027: PUSH
53028: LD_VAR 0 1
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: LD_INT 2
53041: PUSH
53042: LD_INT 3
53044: PUSH
53045: LD_INT 6
53047: PUSH
53048: LD_INT 36
53050: PUSH
53051: LD_INT 4
53053: PUSH
53054: LD_INT 5
53056: PUSH
53057: LD_INT 31
53059: PUSH
53060: LD_INT 32
53062: PUSH
53063: LD_INT 33
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: IN
53079: NOT
53080: PUSH
53081: LD_VAR 0 6
53085: PUSH
53086: LD_INT 1
53088: EQUAL
53089: AND
53090: OR
53091: PUSH
53092: LD_VAR 0 1
53096: PUSH
53097: LD_INT 2
53099: PUSH
53100: LD_INT 3
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: IN
53107: NOT
53108: PUSH
53109: LD_VAR 0 6
53113: PUSH
53114: LD_INT 2
53116: EQUAL
53117: AND
53118: OR
53119: IFFALSE 53129
// mode = 0 ;
53121: LD_ADDR_VAR 0 6
53125: PUSH
53126: LD_INT 0
53128: ST_TO_ADDR
// case mode of 0 :
53129: LD_VAR 0 6
53133: PUSH
53134: LD_INT 0
53136: DOUBLE
53137: EQUAL
53138: IFTRUE 53142
53140: GO 64595
53142: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53143: LD_ADDR_VAR 0 11
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: LD_INT 2
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: LD_INT 2
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: LD_INT 3
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53336: LD_ADDR_VAR 0 12
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 2
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 2
53470: NEG
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 3
53493: NEG
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 3
53504: NEG
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53532: LD_ADDR_VAR 0 13
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 2
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 2
53655: NEG
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: LD_INT 2
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: LD_INT 3
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 3
53691: NEG
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 3
53703: NEG
53704: PUSH
53705: LD_INT 3
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53731: LD_ADDR_VAR 0 14
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: NEG
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: LD_INT 2
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 2
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: LD_INT 3
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 3
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53927: LD_ADDR_VAR 0 15
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 2
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 3
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 3
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54120: LD_ADDR_VAR 0 16
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 2
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 2
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: LD_INT 2
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 2
54243: NEG
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: LD_INT 2
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 3
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 3
54277: PUSH
54278: LD_INT 3
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: LD_INT 3
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54313: LD_ADDR_VAR 0 17
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: LD_INT 2
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 2
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 2
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 2
54500: NEG
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: LD_INT 2
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54543: LD_ADDR_VAR 0 18
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: LD_INT 2
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: LD_INT 2
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 2
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: LD_INT 2
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: LD_INT 2
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 2
54719: NEG
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 2
54730: NEG
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: LD_INT 2
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54773: LD_ADDR_VAR 0 19
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: LD_INT 2
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: LD_INT 2
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 2
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: NEG
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 2
54960: NEG
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: NEG
54973: PUSH
54974: LD_INT 2
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55003: LD_ADDR_VAR 0 20
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 0
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 1
55072: NEG
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 2
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 2
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 2
55138: PUSH
55139: LD_INT 2
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: LD_INT 2
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: LD_INT 2
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 2
55179: NEG
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55233: LD_ADDR_VAR 0 21
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 2
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 2
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: LD_INT 2
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: LD_INT 2
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 2
55409: NEG
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 2
55420: NEG
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: NEG
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55463: LD_ADDR_VAR 0 22
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 1
55521: NEG
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: LD_INT 2
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 2
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 2
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: LD_INT 2
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 2
55639: NEG
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: LD_INT 2
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55693: LD_ADDR_VAR 0 23
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: LD_INT 2
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: LD_INT 2
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 2
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: LD_INT 2
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 2
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 2
55869: NEG
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 2
55892: NEG
55893: PUSH
55894: LD_INT 2
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 2
55904: NEG
55905: PUSH
55906: LD_INT 3
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: LD_INT 3
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 2
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55973: LD_ADDR_VAR 0 24
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 2
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: LD_INT 2
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 2
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: NEG
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 2
56172: NEG
56173: PUSH
56174: LD_INT 2
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 2
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 3
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 3
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56249: LD_ADDR_VAR 0 25
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: LD_INT 2
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 2
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 2
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 2
56425: NEG
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 2
56448: NEG
56449: PUSH
56450: LD_INT 2
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 3
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 3
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: LD_INT 3
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: LD_INT 3
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56523: LD_ADDR_VAR 0 26
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 1
56604: NEG
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: LD_INT 2
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 2
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 2
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 2
56658: PUSH
56659: LD_INT 2
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: LD_INT 2
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 2
56699: NEG
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 2
56710: NEG
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 2
56722: NEG
56723: PUSH
56724: LD_INT 2
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 2
56734: PUSH
56735: LD_INT 3
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 3
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 2
56765: NEG
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56799: LD_ADDR_VAR 0 27
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: LD_INT 2
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 2
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: NEG
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 2
56986: NEG
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 2
56998: NEG
56999: PUSH
57000: LD_INT 2
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: LD_INT 2
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 2
57021: NEG
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 3
57032: NEG
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 3
57044: NEG
57045: PUSH
57046: LD_INT 2
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57079: LD_ADDR_VAR 0 28
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: LD_INT 2
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 2
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: PUSH
57215: LD_INT 2
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 1
57244: NEG
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 2
57266: NEG
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 2
57290: NEG
57291: PUSH
57292: LD_INT 3
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: LD_INT 3
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 3
57314: NEG
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 3
57326: NEG
57327: PUSH
57328: LD_INT 2
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57361: LD_ADDR_VAR 0 29
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: LD_INT 2
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: LD_INT 2
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: LD_INT 2
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: LD_INT 2
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: LD_INT 1
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 2
57527: NEG
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: LD_INT 3
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 3
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 3
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 3
57605: NEG
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57640: LD_ADDR_VAR 0 30
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: LD_INT 2
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 2
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 2
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: LD_INT 3
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 3
57852: PUSH
57853: LD_INT 2
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 2
57862: PUSH
57863: LD_INT 3
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 3
57883: NEG
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57918: LD_ADDR_VAR 0 31
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: LD_INT 2
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: LD_INT 2
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: LD_INT 3
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 3
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: LD_INT 3
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 3
58161: NEG
58162: PUSH
58163: LD_INT 2
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58196: LD_ADDR_VAR 0 32
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: LD_INT 1
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 2
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 2
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 2
58321: PUSH
58322: LD_INT 2
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: LD_INT 2
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 2
58362: NEG
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: LD_INT 3
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 3
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 2
58418: PUSH
58419: LD_INT 3
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 3
58439: NEG
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58474: LD_ADDR_VAR 0 33
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: NEG
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: LD_INT 2
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 2
58629: NEG
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 2
58652: NEG
58653: PUSH
58654: LD_INT 2
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 2
58664: NEG
58665: PUSH
58666: LD_INT 3
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 3
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 3
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: LD_INT 2
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 3
58718: NEG
58719: PUSH
58720: LD_INT 2
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58753: LD_ADDR_VAR 0 34
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 1
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 1
58822: NEG
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: LD_INT 2
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 0
58846: PUSH
58847: LD_INT 2
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: LD_INT 1
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 2
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 2
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: LD_INT 2
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: LD_INT 1
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 2
58909: NEG
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 2
58920: NEG
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 2
58932: NEG
58933: PUSH
58934: LD_INT 2
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: LD_INT 3
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: LD_INT 2
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 3
58967: PUSH
58968: LD_INT 2
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: PUSH
58978: LD_INT 3
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 3
58998: NEG
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59033: LD_ADDR_VAR 0 35
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 2
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 2
59124: NEG
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59145: LD_ADDR_VAR 0 36
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 0
59162: PUSH
59163: LD_INT 1
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: LD_INT 2
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: LD_INT 2
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59257: LD_ADDR_VAR 0 37
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 1
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: LD_INT 1
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 1
59349: NEG
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59369: LD_ADDR_VAR 0 38
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 2
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 2
59460: NEG
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59481: LD_ADDR_VAR 0 39
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: LD_INT 1
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: LD_INT 2
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: PUSH
59575: LD_INT 2
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59593: LD_ADDR_VAR 0 40
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 1
59685: NEG
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59705: LD_ADDR_VAR 0 41
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: LD_INT 1
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 1
59763: NEG
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: NEG
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: LD_INT 2
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: LD_INT 1
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 2
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: PUSH
59830: LD_INT 2
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 2
59860: NEG
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 2
59883: NEG
59884: PUSH
59885: LD_INT 2
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 2
59895: NEG
59896: PUSH
59897: LD_INT 3
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 3
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 3
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 3
59938: PUSH
59939: LD_INT 2
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 3
59948: PUSH
59949: LD_INT 3
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 2
59958: PUSH
59959: LD_INT 3
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 2
59968: NEG
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 3
59979: NEG
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 3
59990: NEG
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 3
60002: NEG
60003: PUSH
60004: LD_INT 2
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 3
60014: NEG
60015: PUSH
60016: LD_INT 3
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60055: LD_ADDR_VAR 0 42
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: NEG
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: LD_INT 2
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: LD_INT 2
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 1
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 2
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 2
60180: PUSH
60181: LD_INT 2
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: LD_INT 2
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: LD_INT 2
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: LD_INT 1
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 2
60221: NEG
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 2
60233: NEG
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 2
60245: NEG
60246: PUSH
60247: LD_INT 3
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: NEG
60258: PUSH
60259: LD_INT 3
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: LD_INT 3
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: LD_INT 2
60283: NEG
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 3
60291: PUSH
60292: LD_INT 2
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 3
60301: PUSH
60302: LD_INT 3
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 2
60311: PUSH
60312: LD_INT 3
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: LD_INT 3
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: LD_INT 3
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: LD_INT 2
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 3
60352: NEG
60353: PUSH
60354: LD_INT 2
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 3
60364: NEG
60365: PUSH
60366: LD_INT 3
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60405: LD_ADDR_VAR 0 43
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: LD_INT 2
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: LD_INT 2
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 2
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: LD_INT 2
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: LD_INT 2
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 2
60571: NEG
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 2
60582: NEG
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: NEG
60595: PUSH
60596: LD_INT 3
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: LD_INT 3
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: LD_INT 2
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 2
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 3
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 3
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: LD_INT 3
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: LD_INT 3
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: LD_INT 2
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: NEG
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 3
60701: NEG
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 3
60712: NEG
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60753: LD_ADDR_VAR 0 44
60757: PUSH
60758: LD_INT 0
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 0
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 1
60781: PUSH
60782: LD_INT 0
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 1
60791: PUSH
60792: LD_INT 1
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: NEG
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: LD_INT 1
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: LD_INT 2
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 2
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 2
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 2
60877: PUSH
60878: LD_INT 2
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: LD_INT 2
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: LD_INT 0
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 2
60919: NEG
60920: PUSH
60921: LD_INT 1
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 2
60931: NEG
60932: PUSH
60933: LD_INT 2
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: NEG
60944: PUSH
60945: LD_INT 3
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 2
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 3
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 3
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 3
60986: PUSH
60987: LD_INT 2
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 3
60996: PUSH
60997: LD_INT 3
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 2
61006: PUSH
61007: LD_INT 3
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 2
61016: NEG
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 3
61027: NEG
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 3
61038: NEG
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 3
61050: NEG
61051: PUSH
61052: LD_INT 2
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 3
61062: NEG
61063: PUSH
61064: LD_INT 3
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61103: LD_ADDR_VAR 0 45
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 0
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: LD_INT 2
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 2
61218: PUSH
61219: LD_INT 1
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 2
61228: PUSH
61229: LD_INT 2
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: LD_INT 2
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: LD_INT 2
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 1
61258: NEG
61259: PUSH
61260: LD_INT 1
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 2
61269: NEG
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 2
61281: NEG
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 2
61293: NEG
61294: PUSH
61295: LD_INT 3
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: LD_INT 3
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: LD_INT 3
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: LD_INT 2
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 3
61339: PUSH
61340: LD_INT 2
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 3
61349: PUSH
61350: LD_INT 3
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 2
61359: PUSH
61360: LD_INT 3
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: LD_INT 3
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 3
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: LD_INT 2
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 3
61400: NEG
61401: PUSH
61402: LD_INT 2
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 3
61412: NEG
61413: PUSH
61414: LD_INT 3
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61453: LD_ADDR_VAR 0 46
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: LD_INT 2
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: LD_INT 2
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: LD_INT 0
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 2
61578: PUSH
61579: LD_INT 1
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: LD_INT 2
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: LD_INT 2
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: LD_INT 1
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 2
61619: NEG
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 2
61630: NEG
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 1
61642: NEG
61643: PUSH
61644: LD_INT 3
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: LD_INT 3
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 1
61665: PUSH
61666: LD_INT 2
61668: NEG
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 3
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 3
61697: PUSH
61698: LD_INT 1
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: LD_INT 3
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: LD_INT 3
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: LD_INT 2
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 2
61738: NEG
61739: PUSH
61740: LD_INT 1
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 3
61749: NEG
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 3
61760: NEG
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61801: LD_ADDR_VAR 0 47
61805: PUSH
61806: LD_INT 0
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 1
61829: PUSH
61830: LD_INT 0
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 1
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: PUSH
61872: LD_INT 1
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 1
61882: NEG
61883: PUSH
61884: LD_INT 2
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 0
61894: PUSH
61895: LD_INT 2
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: LD_INT 1
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 2
61916: NEG
61917: PUSH
61918: LD_INT 1
61920: NEG
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 2
61928: NEG
61929: PUSH
61930: LD_INT 2
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61952: LD_ADDR_VAR 0 48
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: LD_INT 0
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: LD_INT 1
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 1
62021: NEG
62022: PUSH
62023: LD_INT 1
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: LD_INT 2
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: LD_INT 2
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: LD_INT 1
62059: NEG
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 2
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 2
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62099: LD_ADDR_VAR 0 49
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: LD_INT 1
62119: NEG
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 1
62127: PUSH
62128: LD_INT 0
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 1
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 1
62168: NEG
62169: PUSH
62170: LD_INT 1
62172: NEG
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 1
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 2
62191: PUSH
62192: LD_INT 0
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 2
62201: PUSH
62202: LD_INT 1
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 2
62211: PUSH
62212: LD_INT 2
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 1
62221: PUSH
62222: LD_INT 2
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62243: LD_ADDR_VAR 0 50
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 0
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 1
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: NEG
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 2
62324: PUSH
62325: LD_INT 1
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 2
62334: PUSH
62335: LD_INT 2
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 1
62344: PUSH
62345: LD_INT 2
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 0
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 1
62364: NEG
62365: PUSH
62366: LD_INT 1
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62387: LD_ADDR_VAR 0 51
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: PUSH
62426: LD_INT 1
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: LD_INT 1
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 1
62445: NEG
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 1
62456: NEG
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 1
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: LD_INT 2
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 1
62488: NEG
62489: PUSH
62490: LD_INT 1
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 2
62499: NEG
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 2
62510: NEG
62511: PUSH
62512: LD_INT 1
62514: NEG
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62534: LD_ADDR_VAR 0 52
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: LD_INT 0
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: LD_INT 1
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 1
62562: PUSH
62563: LD_INT 0
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 1
62572: PUSH
62573: LD_INT 1
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: LD_INT 1
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 1
62592: NEG
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 1
62603: NEG
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 1
62615: NEG
62616: PUSH
62617: LD_INT 2
62619: NEG
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 1
62627: NEG
62628: PUSH
62629: LD_INT 1
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 2
62638: NEG
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 2
62649: NEG
62650: PUSH
62651: LD_INT 1
62653: NEG
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 2
62661: NEG
62662: PUSH
62663: LD_INT 2
62665: NEG
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62685: LD_ADDR_VAR 0 53
62689: PUSH
62690: LD_INT 0
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: LD_INT 1
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 0
62733: PUSH
62734: LD_INT 1
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 1
62743: NEG
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 1
62766: NEG
62767: PUSH
62768: LD_INT 2
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: LD_INT 2
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: PUSH
62790: LD_INT 1
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 2
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 2
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 2
62820: PUSH
62821: LD_INT 2
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 1
62830: PUSH
62831: LD_INT 2
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: LD_INT 2
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 1
62850: NEG
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 2
62861: NEG
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 2
62872: NEG
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 2
62884: NEG
62885: PUSH
62886: LD_INT 2
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62915: LD_ADDR_VAR 0 54
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: NEG
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 1
62996: NEG
62997: PUSH
62998: LD_INT 2
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: LD_INT 2
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 1
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 2
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 2
63040: PUSH
63041: LD_INT 1
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: LD_INT 2
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: PUSH
63061: LD_INT 2
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: LD_INT 2
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: NEG
63081: PUSH
63082: LD_INT 1
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 2
63091: NEG
63092: PUSH
63093: LD_INT 0
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 2
63102: NEG
63103: PUSH
63104: LD_INT 1
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 2
63114: NEG
63115: PUSH
63116: LD_INT 2
63118: NEG
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63145: LD_ADDR_VAR 0 55
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: LD_INT 0
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 1
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 1
63183: PUSH
63184: LD_INT 1
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: NEG
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 1
63214: NEG
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: NEG
63227: PUSH
63228: LD_INT 2
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: LD_INT 2
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 1
63249: PUSH
63250: LD_INT 1
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 2
63260: PUSH
63261: LD_INT 0
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 2
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 2
63280: PUSH
63281: LD_INT 2
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: LD_INT 2
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: LD_INT 2
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 2
63321: NEG
63322: PUSH
63323: LD_INT 0
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 2
63332: NEG
63333: PUSH
63334: LD_INT 1
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 2
63344: NEG
63345: PUSH
63346: LD_INT 2
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63375: LD_ADDR_VAR 0 56
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 1
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: PUSH
63414: LD_INT 1
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: LD_INT 1
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 1
63433: NEG
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 1
63444: NEG
63445: PUSH
63446: LD_INT 1
63448: NEG
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 1
63456: NEG
63457: PUSH
63458: LD_INT 2
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: LD_INT 2
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: PUSH
63480: LD_INT 1
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 2
63490: PUSH
63491: LD_INT 0
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 2
63500: PUSH
63501: LD_INT 1
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 2
63510: PUSH
63511: LD_INT 2
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 1
63520: PUSH
63521: LD_INT 2
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: LD_INT 2
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 2
63551: NEG
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 2
63562: NEG
63563: PUSH
63564: LD_INT 1
63566: NEG
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 2
63574: NEG
63575: PUSH
63576: LD_INT 2
63578: NEG
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63605: LD_ADDR_VAR 0 57
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 1
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 0
63653: PUSH
63654: LD_INT 1
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: NEG
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 1
63674: NEG
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 1
63686: NEG
63687: PUSH
63688: LD_INT 2
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: LD_INT 2
63701: NEG
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 1
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 2
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 2
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 2
63740: PUSH
63741: LD_INT 2
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 1
63750: PUSH
63751: LD_INT 2
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 1
63770: NEG
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 2
63781: NEG
63782: PUSH
63783: LD_INT 0
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 2
63792: NEG
63793: PUSH
63794: LD_INT 1
63796: NEG
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 2
63804: NEG
63805: PUSH
63806: LD_INT 2
63808: NEG
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63835: LD_ADDR_VAR 0 58
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: LD_INT 0
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: LD_INT 1
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 1
63863: PUSH
63864: LD_INT 0
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 1
63873: PUSH
63874: LD_INT 1
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 1
63893: NEG
63894: PUSH
63895: LD_INT 0
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 1
63904: NEG
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: LD_INT 2
63920: NEG
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: LD_INT 2
63931: NEG
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 1
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 2
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 2
63960: PUSH
63961: LD_INT 1
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 2
63970: PUSH
63971: LD_INT 2
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 1
63980: PUSH
63981: LD_INT 2
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: LD_INT 2
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 1
64000: NEG
64001: PUSH
64002: LD_INT 1
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 2
64011: NEG
64012: PUSH
64013: LD_INT 0
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 2
64022: NEG
64023: PUSH
64024: LD_INT 1
64026: NEG
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 2
64034: NEG
64035: PUSH
64036: LD_INT 2
64038: NEG
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64065: LD_ADDR_VAR 0 59
64069: PUSH
64070: LD_INT 0
64072: PUSH
64073: LD_INT 0
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 0
64082: PUSH
64083: LD_INT 1
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: PUSH
64094: LD_INT 0
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 1
64103: PUSH
64104: LD_INT 1
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: LD_INT 1
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 1
64134: NEG
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64153: LD_ADDR_VAR 0 60
64157: PUSH
64158: LD_INT 0
64160: PUSH
64161: LD_INT 0
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 0
64170: PUSH
64171: LD_INT 1
64173: NEG
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 1
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: PUSH
64192: LD_INT 1
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: NEG
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 1
64222: NEG
64223: PUSH
64224: LD_INT 1
64226: NEG
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64241: LD_ADDR_VAR 0 61
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 0
64258: PUSH
64259: LD_INT 1
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: LD_INT 1
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 1
64299: NEG
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 1
64310: NEG
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64329: LD_ADDR_VAR 0 62
64333: PUSH
64334: LD_INT 0
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 1
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 1
64367: PUSH
64368: LD_INT 1
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 1
64387: NEG
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64417: LD_ADDR_VAR 0 63
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: LD_INT 1
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: LD_INT 1
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 0
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 1
64486: NEG
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64505: LD_ADDR_VAR 0 64
64509: PUSH
64510: LD_INT 0
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 0
64522: PUSH
64523: LD_INT 1
64525: NEG
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 1
64543: PUSH
64544: LD_INT 1
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 0
64553: PUSH
64554: LD_INT 1
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 1
64563: NEG
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: LD_INT 1
64578: NEG
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: ST_TO_ADDR
// end ; 1 :
64593: GO 70490
64595: LD_INT 1
64597: DOUBLE
64598: EQUAL
64599: IFTRUE 64603
64601: GO 67226
64603: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64604: LD_ADDR_VAR 0 11
64608: PUSH
64609: LD_INT 1
64611: NEG
64612: PUSH
64613: LD_INT 3
64615: NEG
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 0
64623: PUSH
64624: LD_INT 3
64626: NEG
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 1
64634: PUSH
64635: LD_INT 2
64637: NEG
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: LIST
64647: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64648: LD_ADDR_VAR 0 12
64652: PUSH
64653: LD_INT 2
64655: PUSH
64656: LD_INT 1
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 3
64666: PUSH
64667: LD_INT 0
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 3
64676: PUSH
64677: LD_INT 1
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: LIST
64688: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64689: LD_ADDR_VAR 0 13
64693: PUSH
64694: LD_INT 3
64696: PUSH
64697: LD_INT 2
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 3
64706: PUSH
64707: LD_INT 3
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 2
64716: PUSH
64717: LD_INT 3
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: LIST
64728: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64729: LD_ADDR_VAR 0 14
64733: PUSH
64734: LD_INT 1
64736: PUSH
64737: LD_INT 3
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: LD_INT 3
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 1
64756: NEG
64757: PUSH
64758: LD_INT 2
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: LIST
64769: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64770: LD_ADDR_VAR 0 15
64774: PUSH
64775: LD_INT 2
64777: NEG
64778: PUSH
64779: LD_INT 1
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 3
64788: NEG
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 3
64799: NEG
64800: PUSH
64801: LD_INT 1
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: LIST
64813: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64814: LD_ADDR_VAR 0 16
64818: PUSH
64819: LD_INT 2
64821: NEG
64822: PUSH
64823: LD_INT 3
64825: NEG
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 3
64833: NEG
64834: PUSH
64835: LD_INT 2
64837: NEG
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 3
64845: NEG
64846: PUSH
64847: LD_INT 3
64849: NEG
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: LIST
64859: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64860: LD_ADDR_VAR 0 17
64864: PUSH
64865: LD_INT 1
64867: NEG
64868: PUSH
64869: LD_INT 3
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: LD_INT 3
64882: NEG
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 1
64890: PUSH
64891: LD_INT 2
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: LIST
64903: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64904: LD_ADDR_VAR 0 18
64908: PUSH
64909: LD_INT 2
64911: PUSH
64912: LD_INT 1
64914: NEG
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 3
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 3
64932: PUSH
64933: LD_INT 1
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: LIST
64944: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64945: LD_ADDR_VAR 0 19
64949: PUSH
64950: LD_INT 3
64952: PUSH
64953: LD_INT 2
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 3
64962: PUSH
64963: LD_INT 3
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 2
64972: PUSH
64973: LD_INT 3
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: LIST
64984: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64985: LD_ADDR_VAR 0 20
64989: PUSH
64990: LD_INT 1
64992: PUSH
64993: LD_INT 3
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 0
65002: PUSH
65003: LD_INT 3
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 1
65012: NEG
65013: PUSH
65014: LD_INT 2
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: LIST
65025: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65026: LD_ADDR_VAR 0 21
65030: PUSH
65031: LD_INT 2
65033: NEG
65034: PUSH
65035: LD_INT 1
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 3
65044: NEG
65045: PUSH
65046: LD_INT 0
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 3
65055: NEG
65056: PUSH
65057: LD_INT 1
65059: NEG
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: LIST
65069: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65070: LD_ADDR_VAR 0 22
65074: PUSH
65075: LD_INT 2
65077: NEG
65078: PUSH
65079: LD_INT 3
65081: NEG
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 3
65089: NEG
65090: PUSH
65091: LD_INT 2
65093: NEG
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 3
65101: NEG
65102: PUSH
65103: LD_INT 3
65105: NEG
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: LIST
65115: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65116: LD_ADDR_VAR 0 23
65120: PUSH
65121: LD_INT 0
65123: PUSH
65124: LD_INT 3
65126: NEG
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 1
65134: NEG
65135: PUSH
65136: LD_INT 4
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 1
65146: PUSH
65147: LD_INT 3
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: LIST
65159: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65160: LD_ADDR_VAR 0 24
65164: PUSH
65165: LD_INT 3
65167: PUSH
65168: LD_INT 0
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 3
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 4
65188: PUSH
65189: LD_INT 1
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: LIST
65200: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65201: LD_ADDR_VAR 0 25
65205: PUSH
65206: LD_INT 3
65208: PUSH
65209: LD_INT 3
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 4
65218: PUSH
65219: LD_INT 3
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 3
65228: PUSH
65229: LD_INT 4
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: LIST
65240: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65241: LD_ADDR_VAR 0 26
65245: PUSH
65246: LD_INT 0
65248: PUSH
65249: LD_INT 3
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 1
65258: PUSH
65259: LD_INT 4
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 1
65268: NEG
65269: PUSH
65270: LD_INT 3
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: LIST
65281: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65282: LD_ADDR_VAR 0 27
65286: PUSH
65287: LD_INT 3
65289: NEG
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 3
65300: NEG
65301: PUSH
65302: LD_INT 1
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 4
65311: NEG
65312: PUSH
65313: LD_INT 1
65315: NEG
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: LIST
65325: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65326: LD_ADDR_VAR 0 28
65330: PUSH
65331: LD_INT 3
65333: NEG
65334: PUSH
65335: LD_INT 3
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 3
65345: NEG
65346: PUSH
65347: LD_INT 4
65349: NEG
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 4
65357: NEG
65358: PUSH
65359: LD_INT 3
65361: NEG
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: LIST
65371: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65372: LD_ADDR_VAR 0 29
65376: PUSH
65377: LD_INT 1
65379: NEG
65380: PUSH
65381: LD_INT 3
65383: NEG
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 0
65391: PUSH
65392: LD_INT 3
65394: NEG
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: PUSH
65403: LD_INT 2
65405: NEG
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 1
65413: NEG
65414: PUSH
65415: LD_INT 4
65417: NEG
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 0
65425: PUSH
65426: LD_INT 4
65428: NEG
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 1
65436: PUSH
65437: LD_INT 3
65439: NEG
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 1
65447: NEG
65448: PUSH
65449: LD_INT 5
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: LD_INT 5
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 1
65470: PUSH
65471: LD_INT 4
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: LD_INT 6
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 0
65493: PUSH
65494: LD_INT 6
65496: NEG
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: LD_INT 5
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65527: LD_ADDR_VAR 0 30
65531: PUSH
65532: LD_INT 2
65534: PUSH
65535: LD_INT 1
65537: NEG
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 3
65545: PUSH
65546: LD_INT 0
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 3
65555: PUSH
65556: LD_INT 1
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 3
65565: PUSH
65566: LD_INT 1
65568: NEG
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 4
65576: PUSH
65577: LD_INT 0
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 4
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 4
65596: PUSH
65597: LD_INT 1
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 5
65607: PUSH
65608: LD_INT 0
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 5
65617: PUSH
65618: LD_INT 1
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 5
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 6
65638: PUSH
65639: LD_INT 0
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 6
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65670: LD_ADDR_VAR 0 31
65674: PUSH
65675: LD_INT 3
65677: PUSH
65678: LD_INT 2
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 3
65687: PUSH
65688: LD_INT 3
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 2
65697: PUSH
65698: LD_INT 3
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 4
65707: PUSH
65708: LD_INT 3
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 4
65717: PUSH
65718: LD_INT 4
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 3
65727: PUSH
65728: LD_INT 4
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 5
65737: PUSH
65738: LD_INT 4
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 5
65747: PUSH
65748: LD_INT 5
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 4
65757: PUSH
65758: LD_INT 5
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 6
65767: PUSH
65768: LD_INT 5
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 6
65777: PUSH
65778: LD_INT 6
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 5
65787: PUSH
65788: LD_INT 6
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65809: LD_ADDR_VAR 0 32
65813: PUSH
65814: LD_INT 1
65816: PUSH
65817: LD_INT 3
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: LD_INT 3
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 1
65836: NEG
65837: PUSH
65838: LD_INT 2
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 1
65847: PUSH
65848: LD_INT 4
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: LD_INT 4
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 1
65867: NEG
65868: PUSH
65869: LD_INT 3
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 1
65878: PUSH
65879: LD_INT 5
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 0
65888: PUSH
65889: LD_INT 5
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 1
65898: NEG
65899: PUSH
65900: LD_INT 4
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 1
65909: PUSH
65910: LD_INT 6
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 0
65919: PUSH
65920: LD_INT 6
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 1
65929: NEG
65930: PUSH
65931: LD_INT 5
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65952: LD_ADDR_VAR 0 33
65956: PUSH
65957: LD_INT 2
65959: NEG
65960: PUSH
65961: LD_INT 1
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 3
65970: NEG
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 3
65981: NEG
65982: PUSH
65983: LD_INT 1
65985: NEG
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 3
65993: NEG
65994: PUSH
65995: LD_INT 1
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 4
66004: NEG
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 4
66015: NEG
66016: PUSH
66017: LD_INT 1
66019: NEG
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 4
66027: NEG
66028: PUSH
66029: LD_INT 1
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 5
66038: NEG
66039: PUSH
66040: LD_INT 0
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 5
66049: NEG
66050: PUSH
66051: LD_INT 1
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 5
66061: NEG
66062: PUSH
66063: LD_INT 1
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 6
66072: NEG
66073: PUSH
66074: LD_INT 0
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 6
66083: NEG
66084: PUSH
66085: LD_INT 1
66087: NEG
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66107: LD_ADDR_VAR 0 34
66111: PUSH
66112: LD_INT 2
66114: NEG
66115: PUSH
66116: LD_INT 3
66118: NEG
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 3
66126: NEG
66127: PUSH
66128: LD_INT 2
66130: NEG
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 3
66138: NEG
66139: PUSH
66140: LD_INT 3
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 3
66150: NEG
66151: PUSH
66152: LD_INT 4
66154: NEG
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 4
66162: NEG
66163: PUSH
66164: LD_INT 3
66166: NEG
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 4
66174: NEG
66175: PUSH
66176: LD_INT 4
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 4
66186: NEG
66187: PUSH
66188: LD_INT 5
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 5
66198: NEG
66199: PUSH
66200: LD_INT 4
66202: NEG
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 5
66210: NEG
66211: PUSH
66212: LD_INT 5
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 5
66222: NEG
66223: PUSH
66224: LD_INT 6
66226: NEG
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 6
66234: NEG
66235: PUSH
66236: LD_INT 5
66238: NEG
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 6
66246: NEG
66247: PUSH
66248: LD_INT 6
66250: NEG
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66270: LD_ADDR_VAR 0 41
66274: PUSH
66275: LD_INT 0
66277: PUSH
66278: LD_INT 2
66280: NEG
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 1
66288: NEG
66289: PUSH
66290: LD_INT 3
66292: NEG
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 1
66300: PUSH
66301: LD_INT 2
66303: NEG
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: LIST
66313: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66314: LD_ADDR_VAR 0 42
66318: PUSH
66319: LD_INT 2
66321: PUSH
66322: LD_INT 0
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 2
66331: PUSH
66332: LD_INT 1
66334: NEG
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 3
66342: PUSH
66343: LD_INT 1
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: LIST
66354: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66355: LD_ADDR_VAR 0 43
66359: PUSH
66360: LD_INT 2
66362: PUSH
66363: LD_INT 2
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 3
66372: PUSH
66373: LD_INT 2
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 2
66382: PUSH
66383: LD_INT 3
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: LIST
66394: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66395: LD_ADDR_VAR 0 44
66399: PUSH
66400: LD_INT 0
66402: PUSH
66403: LD_INT 2
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 1
66412: PUSH
66413: LD_INT 3
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 1
66422: NEG
66423: PUSH
66424: LD_INT 2
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: LIST
66435: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66436: LD_ADDR_VAR 0 45
66440: PUSH
66441: LD_INT 2
66443: NEG
66444: PUSH
66445: LD_INT 0
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 2
66454: NEG
66455: PUSH
66456: LD_INT 1
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 3
66465: NEG
66466: PUSH
66467: LD_INT 1
66469: NEG
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: LIST
66479: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66480: LD_ADDR_VAR 0 46
66484: PUSH
66485: LD_INT 2
66487: NEG
66488: PUSH
66489: LD_INT 2
66491: NEG
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 2
66499: NEG
66500: PUSH
66501: LD_INT 3
66503: NEG
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 3
66511: NEG
66512: PUSH
66513: LD_INT 2
66515: NEG
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: LIST
66525: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66526: LD_ADDR_VAR 0 47
66530: PUSH
66531: LD_INT 2
66533: NEG
66534: PUSH
66535: LD_INT 3
66537: NEG
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 1
66545: NEG
66546: PUSH
66547: LD_INT 3
66549: NEG
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66559: LD_ADDR_VAR 0 48
66563: PUSH
66564: LD_INT 1
66566: PUSH
66567: LD_INT 2
66569: NEG
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 2
66577: PUSH
66578: LD_INT 1
66580: NEG
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66590: LD_ADDR_VAR 0 49
66594: PUSH
66595: LD_INT 3
66597: PUSH
66598: LD_INT 1
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 3
66607: PUSH
66608: LD_INT 2
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66619: LD_ADDR_VAR 0 50
66623: PUSH
66624: LD_INT 2
66626: PUSH
66627: LD_INT 3
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 1
66636: PUSH
66637: LD_INT 3
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66648: LD_ADDR_VAR 0 51
66652: PUSH
66653: LD_INT 1
66655: NEG
66656: PUSH
66657: LD_INT 2
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 2
66666: NEG
66667: PUSH
66668: LD_INT 1
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66679: LD_ADDR_VAR 0 52
66683: PUSH
66684: LD_INT 3
66686: NEG
66687: PUSH
66688: LD_INT 1
66690: NEG
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 3
66698: NEG
66699: PUSH
66700: LD_INT 2
66702: NEG
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66712: LD_ADDR_VAR 0 53
66716: PUSH
66717: LD_INT 1
66719: NEG
66720: PUSH
66721: LD_INT 3
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 0
66731: PUSH
66732: LD_INT 3
66734: NEG
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 1
66742: PUSH
66743: LD_INT 2
66745: NEG
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: LIST
66755: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66756: LD_ADDR_VAR 0 54
66760: PUSH
66761: LD_INT 2
66763: PUSH
66764: LD_INT 1
66766: NEG
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 3
66774: PUSH
66775: LD_INT 0
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 3
66784: PUSH
66785: LD_INT 1
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: LIST
66796: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66797: LD_ADDR_VAR 0 55
66801: PUSH
66802: LD_INT 3
66804: PUSH
66805: LD_INT 2
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 3
66814: PUSH
66815: LD_INT 3
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 2
66824: PUSH
66825: LD_INT 3
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: LIST
66836: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66837: LD_ADDR_VAR 0 56
66841: PUSH
66842: LD_INT 1
66844: PUSH
66845: LD_INT 3
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: LD_INT 3
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 1
66864: NEG
66865: PUSH
66866: LD_INT 2
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: LIST
66877: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66878: LD_ADDR_VAR 0 57
66882: PUSH
66883: LD_INT 2
66885: NEG
66886: PUSH
66887: LD_INT 1
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 3
66896: NEG
66897: PUSH
66898: LD_INT 0
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 3
66907: NEG
66908: PUSH
66909: LD_INT 1
66911: NEG
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: LIST
66921: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66922: LD_ADDR_VAR 0 58
66926: PUSH
66927: LD_INT 2
66929: NEG
66930: PUSH
66931: LD_INT 3
66933: NEG
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 3
66941: NEG
66942: PUSH
66943: LD_INT 2
66945: NEG
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 3
66953: NEG
66954: PUSH
66955: LD_INT 3
66957: NEG
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: LIST
66967: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66968: LD_ADDR_VAR 0 59
66972: PUSH
66973: LD_INT 1
66975: NEG
66976: PUSH
66977: LD_INT 2
66979: NEG
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 0
66987: PUSH
66988: LD_INT 2
66990: NEG
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 1
66998: PUSH
66999: LD_INT 1
67001: NEG
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: LIST
67011: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67012: LD_ADDR_VAR 0 60
67016: PUSH
67017: LD_INT 1
67019: PUSH
67020: LD_INT 1
67022: NEG
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 2
67030: PUSH
67031: LD_INT 0
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 2
67040: PUSH
67041: LD_INT 1
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: LIST
67052: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67053: LD_ADDR_VAR 0 61
67057: PUSH
67058: LD_INT 2
67060: PUSH
67061: LD_INT 1
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 2
67070: PUSH
67071: LD_INT 2
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 1
67080: PUSH
67081: LD_INT 2
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: LIST
67092: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67093: LD_ADDR_VAR 0 62
67097: PUSH
67098: LD_INT 1
67100: PUSH
67101: LD_INT 2
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 0
67110: PUSH
67111: LD_INT 2
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 1
67120: NEG
67121: PUSH
67122: LD_INT 1
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: LIST
67133: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67134: LD_ADDR_VAR 0 63
67138: PUSH
67139: LD_INT 1
67141: NEG
67142: PUSH
67143: LD_INT 1
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 2
67152: NEG
67153: PUSH
67154: LD_INT 0
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 2
67163: NEG
67164: PUSH
67165: LD_INT 1
67167: NEG
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: LIST
67177: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67178: LD_ADDR_VAR 0 64
67182: PUSH
67183: LD_INT 1
67185: NEG
67186: PUSH
67187: LD_INT 2
67189: NEG
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 2
67197: NEG
67198: PUSH
67199: LD_INT 1
67201: NEG
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: PUSH
67207: LD_INT 2
67209: NEG
67210: PUSH
67211: LD_INT 2
67213: NEG
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: LIST
67223: ST_TO_ADDR
// end ; 2 :
67224: GO 70490
67226: LD_INT 2
67228: DOUBLE
67229: EQUAL
67230: IFTRUE 67234
67232: GO 70489
67234: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67235: LD_ADDR_VAR 0 29
67239: PUSH
67240: LD_INT 4
67242: PUSH
67243: LD_INT 0
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 4
67252: PUSH
67253: LD_INT 1
67255: NEG
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 5
67263: PUSH
67264: LD_INT 0
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 5
67273: PUSH
67274: LD_INT 1
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 4
67283: PUSH
67284: LD_INT 1
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: LD_INT 3
67293: PUSH
67294: LD_INT 0
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: LD_INT 3
67303: PUSH
67304: LD_INT 1
67306: NEG
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 3
67314: PUSH
67315: LD_INT 2
67317: NEG
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 5
67325: PUSH
67326: LD_INT 2
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 3
67335: PUSH
67336: LD_INT 3
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 3
67345: PUSH
67346: LD_INT 2
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 4
67355: PUSH
67356: LD_INT 3
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 4
67365: PUSH
67366: LD_INT 4
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 3
67375: PUSH
67376: LD_INT 4
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 2
67385: PUSH
67386: LD_INT 3
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 2
67395: PUSH
67396: LD_INT 2
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 4
67405: PUSH
67406: LD_INT 2
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 2
67415: PUSH
67416: LD_INT 4
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 0
67425: PUSH
67426: LD_INT 4
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 0
67435: PUSH
67436: LD_INT 3
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 1
67445: PUSH
67446: LD_INT 4
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 1
67455: PUSH
67456: LD_INT 5
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 0
67465: PUSH
67466: LD_INT 5
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 1
67475: NEG
67476: PUSH
67477: LD_INT 4
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 1
67486: NEG
67487: PUSH
67488: LD_INT 3
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 2
67497: PUSH
67498: LD_INT 5
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 2
67507: NEG
67508: PUSH
67509: LD_INT 3
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 3
67518: NEG
67519: PUSH
67520: LD_INT 0
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 3
67529: NEG
67530: PUSH
67531: LD_INT 1
67533: NEG
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 2
67541: NEG
67542: PUSH
67543: LD_INT 0
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 2
67552: NEG
67553: PUSH
67554: LD_INT 1
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 3
67563: NEG
67564: PUSH
67565: LD_INT 1
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 4
67574: NEG
67575: PUSH
67576: LD_INT 0
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 4
67585: NEG
67586: PUSH
67587: LD_INT 1
67589: NEG
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 4
67597: NEG
67598: PUSH
67599: LD_INT 2
67601: NEG
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 2
67609: NEG
67610: PUSH
67611: LD_INT 2
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 4
67620: NEG
67621: PUSH
67622: LD_INT 4
67624: NEG
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 4
67632: NEG
67633: PUSH
67634: LD_INT 5
67636: NEG
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 3
67644: NEG
67645: PUSH
67646: LD_INT 4
67648: NEG
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 3
67656: NEG
67657: PUSH
67658: LD_INT 3
67660: NEG
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 4
67668: NEG
67669: PUSH
67670: LD_INT 3
67672: NEG
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 5
67680: NEG
67681: PUSH
67682: LD_INT 4
67684: NEG
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 5
67692: NEG
67693: PUSH
67694: LD_INT 5
67696: NEG
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 3
67704: NEG
67705: PUSH
67706: LD_INT 5
67708: NEG
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 5
67716: NEG
67717: PUSH
67718: LD_INT 3
67720: NEG
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67773: LD_ADDR_VAR 0 30
67777: PUSH
67778: LD_INT 4
67780: PUSH
67781: LD_INT 4
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 4
67790: PUSH
67791: LD_INT 3
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 5
67800: PUSH
67801: LD_INT 4
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 5
67810: PUSH
67811: LD_INT 5
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 4
67820: PUSH
67821: LD_INT 5
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 3
67830: PUSH
67831: LD_INT 4
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 3
67840: PUSH
67841: LD_INT 3
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 5
67850: PUSH
67851: LD_INT 3
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 3
67860: PUSH
67861: LD_INT 5
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 0
67870: PUSH
67871: LD_INT 3
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 0
67880: PUSH
67881: LD_INT 2
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 1
67890: PUSH
67891: LD_INT 3
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 1
67900: PUSH
67901: LD_INT 4
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 0
67910: PUSH
67911: LD_INT 4
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 1
67920: NEG
67921: PUSH
67922: LD_INT 3
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 1
67931: NEG
67932: PUSH
67933: LD_INT 2
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 2
67942: PUSH
67943: LD_INT 4
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 2
67952: NEG
67953: PUSH
67954: LD_INT 2
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 4
67963: NEG
67964: PUSH
67965: LD_INT 0
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 4
67974: NEG
67975: PUSH
67976: LD_INT 1
67978: NEG
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 3
67986: NEG
67987: PUSH
67988: LD_INT 0
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 3
67997: NEG
67998: PUSH
67999: LD_INT 1
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 4
68008: NEG
68009: PUSH
68010: LD_INT 1
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 5
68019: NEG
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 5
68030: NEG
68031: PUSH
68032: LD_INT 1
68034: NEG
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 5
68042: NEG
68043: PUSH
68044: LD_INT 2
68046: NEG
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 3
68054: NEG
68055: PUSH
68056: LD_INT 2
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 3
68065: NEG
68066: PUSH
68067: LD_INT 3
68069: NEG
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 3
68077: NEG
68078: PUSH
68079: LD_INT 4
68081: NEG
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 2
68089: NEG
68090: PUSH
68091: LD_INT 3
68093: NEG
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 2
68101: NEG
68102: PUSH
68103: LD_INT 2
68105: NEG
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 3
68113: NEG
68114: PUSH
68115: LD_INT 2
68117: NEG
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 4
68125: NEG
68126: PUSH
68127: LD_INT 3
68129: NEG
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 4
68137: NEG
68138: PUSH
68139: LD_INT 4
68141: NEG
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 2
68149: NEG
68150: PUSH
68151: LD_INT 4
68153: NEG
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 4
68161: NEG
68162: PUSH
68163: LD_INT 2
68165: NEG
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: LD_INT 4
68176: NEG
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 0
68184: PUSH
68185: LD_INT 5
68187: NEG
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 1
68195: PUSH
68196: LD_INT 4
68198: NEG
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 1
68206: PUSH
68207: LD_INT 3
68209: NEG
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 0
68217: PUSH
68218: LD_INT 3
68220: NEG
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 1
68228: NEG
68229: PUSH
68230: LD_INT 4
68232: NEG
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 1
68240: NEG
68241: PUSH
68242: LD_INT 5
68244: NEG
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 2
68252: PUSH
68253: LD_INT 3
68255: NEG
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 2
68263: NEG
68264: PUSH
68265: LD_INT 5
68267: NEG
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68320: LD_ADDR_VAR 0 31
68324: PUSH
68325: LD_INT 0
68327: PUSH
68328: LD_INT 4
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: LD_INT 3
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 1
68347: PUSH
68348: LD_INT 4
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 1
68357: PUSH
68358: LD_INT 5
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 0
68367: PUSH
68368: LD_INT 5
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 1
68377: NEG
68378: PUSH
68379: LD_INT 4
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 1
68388: NEG
68389: PUSH
68390: LD_INT 3
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 2
68399: PUSH
68400: LD_INT 5
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 2
68409: NEG
68410: PUSH
68411: LD_INT 3
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 3
68420: NEG
68421: PUSH
68422: LD_INT 0
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: LD_INT 3
68431: NEG
68432: PUSH
68433: LD_INT 1
68435: NEG
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 2
68443: NEG
68444: PUSH
68445: LD_INT 0
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 2
68454: NEG
68455: PUSH
68456: LD_INT 1
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 3
68465: NEG
68466: PUSH
68467: LD_INT 1
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 4
68476: NEG
68477: PUSH
68478: LD_INT 0
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 4
68487: NEG
68488: PUSH
68489: LD_INT 1
68491: NEG
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 4
68499: NEG
68500: PUSH
68501: LD_INT 2
68503: NEG
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 2
68511: NEG
68512: PUSH
68513: LD_INT 2
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 4
68522: NEG
68523: PUSH
68524: LD_INT 4
68526: NEG
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 4
68534: NEG
68535: PUSH
68536: LD_INT 5
68538: NEG
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 3
68546: NEG
68547: PUSH
68548: LD_INT 4
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 3
68558: NEG
68559: PUSH
68560: LD_INT 3
68562: NEG
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 4
68570: NEG
68571: PUSH
68572: LD_INT 3
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 5
68582: NEG
68583: PUSH
68584: LD_INT 4
68586: NEG
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 5
68594: NEG
68595: PUSH
68596: LD_INT 5
68598: NEG
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 3
68606: NEG
68607: PUSH
68608: LD_INT 5
68610: NEG
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 5
68618: NEG
68619: PUSH
68620: LD_INT 3
68622: NEG
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 0
68630: PUSH
68631: LD_INT 3
68633: NEG
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 0
68641: PUSH
68642: LD_INT 4
68644: NEG
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 1
68652: PUSH
68653: LD_INT 3
68655: NEG
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 1
68663: PUSH
68664: LD_INT 2
68666: NEG
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 0
68674: PUSH
68675: LD_INT 2
68677: NEG
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 1
68685: NEG
68686: PUSH
68687: LD_INT 3
68689: NEG
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 1
68697: NEG
68698: PUSH
68699: LD_INT 4
68701: NEG
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 2
68709: PUSH
68710: LD_INT 2
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 2
68720: NEG
68721: PUSH
68722: LD_INT 4
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 4
68732: PUSH
68733: LD_INT 0
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 4
68742: PUSH
68743: LD_INT 1
68745: NEG
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 5
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 5
68763: PUSH
68764: LD_INT 1
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 4
68773: PUSH
68774: LD_INT 1
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 3
68783: PUSH
68784: LD_INT 0
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 3
68793: PUSH
68794: LD_INT 1
68796: NEG
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 3
68804: PUSH
68805: LD_INT 2
68807: NEG
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 5
68815: PUSH
68816: LD_INT 2
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68870: LD_ADDR_VAR 0 32
68874: PUSH
68875: LD_INT 4
68877: NEG
68878: PUSH
68879: LD_INT 0
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 4
68888: NEG
68889: PUSH
68890: LD_INT 1
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 3
68900: NEG
68901: PUSH
68902: LD_INT 0
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 3
68911: NEG
68912: PUSH
68913: LD_INT 1
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 4
68922: NEG
68923: PUSH
68924: LD_INT 1
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 5
68933: NEG
68934: PUSH
68935: LD_INT 0
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 5
68944: NEG
68945: PUSH
68946: LD_INT 1
68948: NEG
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 5
68956: NEG
68957: PUSH
68958: LD_INT 2
68960: NEG
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 3
68968: NEG
68969: PUSH
68970: LD_INT 2
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 3
68979: NEG
68980: PUSH
68981: LD_INT 3
68983: NEG
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 3
68991: NEG
68992: PUSH
68993: LD_INT 4
68995: NEG
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 2
69003: NEG
69004: PUSH
69005: LD_INT 3
69007: NEG
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_INT 2
69015: NEG
69016: PUSH
69017: LD_INT 2
69019: NEG
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 3
69027: NEG
69028: PUSH
69029: LD_INT 2
69031: NEG
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 4
69039: NEG
69040: PUSH
69041: LD_INT 3
69043: NEG
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 4
69051: NEG
69052: PUSH
69053: LD_INT 4
69055: NEG
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 2
69063: NEG
69064: PUSH
69065: LD_INT 4
69067: NEG
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 4
69075: NEG
69076: PUSH
69077: LD_INT 2
69079: NEG
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 0
69087: PUSH
69088: LD_INT 4
69090: NEG
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 0
69098: PUSH
69099: LD_INT 5
69101: NEG
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 1
69109: PUSH
69110: LD_INT 4
69112: NEG
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: LD_INT 1
69120: PUSH
69121: LD_INT 3
69123: NEG
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 0
69131: PUSH
69132: LD_INT 3
69134: NEG
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 1
69142: NEG
69143: PUSH
69144: LD_INT 4
69146: NEG
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 1
69154: NEG
69155: PUSH
69156: LD_INT 5
69158: NEG
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 2
69166: PUSH
69167: LD_INT 3
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 2
69177: NEG
69178: PUSH
69179: LD_INT 5
69181: NEG
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 3
69189: PUSH
69190: LD_INT 0
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 3
69199: PUSH
69200: LD_INT 1
69202: NEG
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 4
69210: PUSH
69211: LD_INT 0
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 4
69220: PUSH
69221: LD_INT 1
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 3
69230: PUSH
69231: LD_INT 1
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 2
69240: PUSH
69241: LD_INT 0
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 2
69250: PUSH
69251: LD_INT 1
69253: NEG
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 2
69261: PUSH
69262: LD_INT 2
69264: NEG
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 4
69272: PUSH
69273: LD_INT 2
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 4
69282: PUSH
69283: LD_INT 4
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 4
69292: PUSH
69293: LD_INT 3
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 5
69302: PUSH
69303: LD_INT 4
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 5
69312: PUSH
69313: LD_INT 5
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 4
69322: PUSH
69323: LD_INT 5
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 3
69332: PUSH
69333: LD_INT 4
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 3
69342: PUSH
69343: LD_INT 3
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 5
69352: PUSH
69353: LD_INT 3
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 3
69362: PUSH
69363: LD_INT 5
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69417: LD_ADDR_VAR 0 33
69421: PUSH
69422: LD_INT 4
69424: NEG
69425: PUSH
69426: LD_INT 4
69428: NEG
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 4
69436: NEG
69437: PUSH
69438: LD_INT 5
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 3
69448: NEG
69449: PUSH
69450: LD_INT 4
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 3
69460: NEG
69461: PUSH
69462: LD_INT 3
69464: NEG
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 4
69472: NEG
69473: PUSH
69474: LD_INT 3
69476: NEG
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 5
69484: NEG
69485: PUSH
69486: LD_INT 4
69488: NEG
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 5
69496: NEG
69497: PUSH
69498: LD_INT 5
69500: NEG
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 3
69508: NEG
69509: PUSH
69510: LD_INT 5
69512: NEG
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 5
69520: NEG
69521: PUSH
69522: LD_INT 3
69524: NEG
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 0
69532: PUSH
69533: LD_INT 3
69535: NEG
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 0
69543: PUSH
69544: LD_INT 4
69546: NEG
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: PUSH
69552: LD_INT 1
69554: PUSH
69555: LD_INT 3
69557: NEG
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 1
69565: PUSH
69566: LD_INT 2
69568: NEG
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 0
69576: PUSH
69577: LD_INT 2
69579: NEG
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 1
69587: NEG
69588: PUSH
69589: LD_INT 3
69591: NEG
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 1
69599: NEG
69600: PUSH
69601: LD_INT 4
69603: NEG
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 2
69611: PUSH
69612: LD_INT 2
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 2
69622: NEG
69623: PUSH
69624: LD_INT 4
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 4
69634: PUSH
69635: LD_INT 0
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 4
69644: PUSH
69645: LD_INT 1
69647: NEG
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 5
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 5
69665: PUSH
69666: LD_INT 1
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 4
69675: PUSH
69676: LD_INT 1
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 3
69685: PUSH
69686: LD_INT 0
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 3
69695: PUSH
69696: LD_INT 1
69698: NEG
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 3
69706: PUSH
69707: LD_INT 2
69709: NEG
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 5
69717: PUSH
69718: LD_INT 2
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: LD_INT 3
69727: PUSH
69728: LD_INT 3
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 3
69737: PUSH
69738: LD_INT 2
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 4
69747: PUSH
69748: LD_INT 3
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 4
69757: PUSH
69758: LD_INT 4
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 3
69767: PUSH
69768: LD_INT 4
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: LD_INT 2
69777: PUSH
69778: LD_INT 3
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: LD_INT 2
69787: PUSH
69788: LD_INT 2
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: LD_INT 4
69797: PUSH
69798: LD_INT 2
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 2
69807: PUSH
69808: LD_INT 4
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 0
69817: PUSH
69818: LD_INT 4
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 0
69827: PUSH
69828: LD_INT 3
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 1
69837: PUSH
69838: LD_INT 4
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 1
69847: PUSH
69848: LD_INT 5
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 0
69857: PUSH
69858: LD_INT 5
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 1
69867: NEG
69868: PUSH
69869: LD_INT 4
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 1
69878: NEG
69879: PUSH
69880: LD_INT 3
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 2
69889: PUSH
69890: LD_INT 5
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 2
69899: NEG
69900: PUSH
69901: LD_INT 3
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69955: LD_ADDR_VAR 0 34
69959: PUSH
69960: LD_INT 0
69962: PUSH
69963: LD_INT 4
69965: NEG
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 0
69973: PUSH
69974: LD_INT 5
69976: NEG
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 1
69984: PUSH
69985: LD_INT 4
69987: NEG
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 1
69995: PUSH
69996: LD_INT 3
69998: NEG
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 0
70006: PUSH
70007: LD_INT 3
70009: NEG
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: LD_INT 1
70017: NEG
70018: PUSH
70019: LD_INT 4
70021: NEG
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 1
70029: NEG
70030: PUSH
70031: LD_INT 5
70033: NEG
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 2
70041: PUSH
70042: LD_INT 3
70044: NEG
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 2
70052: NEG
70053: PUSH
70054: LD_INT 5
70056: NEG
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 3
70064: PUSH
70065: LD_INT 0
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 3
70074: PUSH
70075: LD_INT 1
70077: NEG
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 4
70085: PUSH
70086: LD_INT 0
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: LD_INT 4
70095: PUSH
70096: LD_INT 1
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 3
70105: PUSH
70106: LD_INT 1
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 2
70115: PUSH
70116: LD_INT 0
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 2
70125: PUSH
70126: LD_INT 1
70128: NEG
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 2
70136: PUSH
70137: LD_INT 2
70139: NEG
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 4
70147: PUSH
70148: LD_INT 2
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 4
70157: PUSH
70158: LD_INT 4
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 4
70167: PUSH
70168: LD_INT 3
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 5
70177: PUSH
70178: LD_INT 4
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 5
70187: PUSH
70188: LD_INT 5
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 4
70197: PUSH
70198: LD_INT 5
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 3
70207: PUSH
70208: LD_INT 4
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 3
70217: PUSH
70218: LD_INT 3
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 5
70227: PUSH
70228: LD_INT 3
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 3
70237: PUSH
70238: LD_INT 5
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 0
70247: PUSH
70248: LD_INT 3
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 0
70257: PUSH
70258: LD_INT 2
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 1
70267: PUSH
70268: LD_INT 3
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 1
70277: PUSH
70278: LD_INT 4
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 0
70287: PUSH
70288: LD_INT 4
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 1
70297: NEG
70298: PUSH
70299: LD_INT 3
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 1
70308: NEG
70309: PUSH
70310: LD_INT 2
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 2
70319: PUSH
70320: LD_INT 4
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 2
70329: NEG
70330: PUSH
70331: LD_INT 2
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 4
70340: NEG
70341: PUSH
70342: LD_INT 0
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 4
70351: NEG
70352: PUSH
70353: LD_INT 1
70355: NEG
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 3
70363: NEG
70364: PUSH
70365: LD_INT 0
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 3
70374: NEG
70375: PUSH
70376: LD_INT 1
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 4
70385: NEG
70386: PUSH
70387: LD_INT 1
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: LD_INT 5
70396: NEG
70397: PUSH
70398: LD_INT 0
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: LD_INT 5
70407: NEG
70408: PUSH
70409: LD_INT 1
70411: NEG
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: PUSH
70417: LD_INT 5
70419: NEG
70420: PUSH
70421: LD_INT 2
70423: NEG
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 3
70431: NEG
70432: PUSH
70433: LD_INT 2
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: ST_TO_ADDR
// end ; end ;
70487: GO 70490
70489: POP
// case btype of b_depot , b_warehouse :
70490: LD_VAR 0 1
70494: PUSH
70495: LD_INT 0
70497: DOUBLE
70498: EQUAL
70499: IFTRUE 70509
70501: LD_INT 1
70503: DOUBLE
70504: EQUAL
70505: IFTRUE 70509
70507: GO 70710
70509: POP
// case nation of nation_american :
70510: LD_VAR 0 5
70514: PUSH
70515: LD_INT 1
70517: DOUBLE
70518: EQUAL
70519: IFTRUE 70523
70521: GO 70579
70523: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70524: LD_ADDR_VAR 0 9
70528: PUSH
70529: LD_VAR 0 11
70533: PUSH
70534: LD_VAR 0 12
70538: PUSH
70539: LD_VAR 0 13
70543: PUSH
70544: LD_VAR 0 14
70548: PUSH
70549: LD_VAR 0 15
70553: PUSH
70554: LD_VAR 0 16
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: PUSH
70567: LD_VAR 0 4
70571: PUSH
70572: LD_INT 1
70574: PLUS
70575: ARRAY
70576: ST_TO_ADDR
70577: GO 70708
70579: LD_INT 2
70581: DOUBLE
70582: EQUAL
70583: IFTRUE 70587
70585: GO 70643
70587: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70588: LD_ADDR_VAR 0 9
70592: PUSH
70593: LD_VAR 0 17
70597: PUSH
70598: LD_VAR 0 18
70602: PUSH
70603: LD_VAR 0 19
70607: PUSH
70608: LD_VAR 0 20
70612: PUSH
70613: LD_VAR 0 21
70617: PUSH
70618: LD_VAR 0 22
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: PUSH
70631: LD_VAR 0 4
70635: PUSH
70636: LD_INT 1
70638: PLUS
70639: ARRAY
70640: ST_TO_ADDR
70641: GO 70708
70643: LD_INT 3
70645: DOUBLE
70646: EQUAL
70647: IFTRUE 70651
70649: GO 70707
70651: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70652: LD_ADDR_VAR 0 9
70656: PUSH
70657: LD_VAR 0 23
70661: PUSH
70662: LD_VAR 0 24
70666: PUSH
70667: LD_VAR 0 25
70671: PUSH
70672: LD_VAR 0 26
70676: PUSH
70677: LD_VAR 0 27
70681: PUSH
70682: LD_VAR 0 28
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: PUSH
70695: LD_VAR 0 4
70699: PUSH
70700: LD_INT 1
70702: PLUS
70703: ARRAY
70704: ST_TO_ADDR
70705: GO 70708
70707: POP
70708: GO 71263
70710: LD_INT 2
70712: DOUBLE
70713: EQUAL
70714: IFTRUE 70724
70716: LD_INT 3
70718: DOUBLE
70719: EQUAL
70720: IFTRUE 70724
70722: GO 70780
70724: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70725: LD_ADDR_VAR 0 9
70729: PUSH
70730: LD_VAR 0 29
70734: PUSH
70735: LD_VAR 0 30
70739: PUSH
70740: LD_VAR 0 31
70744: PUSH
70745: LD_VAR 0 32
70749: PUSH
70750: LD_VAR 0 33
70754: PUSH
70755: LD_VAR 0 34
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: PUSH
70768: LD_VAR 0 4
70772: PUSH
70773: LD_INT 1
70775: PLUS
70776: ARRAY
70777: ST_TO_ADDR
70778: GO 71263
70780: LD_INT 16
70782: DOUBLE
70783: EQUAL
70784: IFTRUE 70842
70786: LD_INT 17
70788: DOUBLE
70789: EQUAL
70790: IFTRUE 70842
70792: LD_INT 18
70794: DOUBLE
70795: EQUAL
70796: IFTRUE 70842
70798: LD_INT 19
70800: DOUBLE
70801: EQUAL
70802: IFTRUE 70842
70804: LD_INT 22
70806: DOUBLE
70807: EQUAL
70808: IFTRUE 70842
70810: LD_INT 20
70812: DOUBLE
70813: EQUAL
70814: IFTRUE 70842
70816: LD_INT 21
70818: DOUBLE
70819: EQUAL
70820: IFTRUE 70842
70822: LD_INT 23
70824: DOUBLE
70825: EQUAL
70826: IFTRUE 70842
70828: LD_INT 24
70830: DOUBLE
70831: EQUAL
70832: IFTRUE 70842
70834: LD_INT 25
70836: DOUBLE
70837: EQUAL
70838: IFTRUE 70842
70840: GO 70898
70842: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70843: LD_ADDR_VAR 0 9
70847: PUSH
70848: LD_VAR 0 35
70852: PUSH
70853: LD_VAR 0 36
70857: PUSH
70858: LD_VAR 0 37
70862: PUSH
70863: LD_VAR 0 38
70867: PUSH
70868: LD_VAR 0 39
70872: PUSH
70873: LD_VAR 0 40
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: PUSH
70886: LD_VAR 0 4
70890: PUSH
70891: LD_INT 1
70893: PLUS
70894: ARRAY
70895: ST_TO_ADDR
70896: GO 71263
70898: LD_INT 6
70900: DOUBLE
70901: EQUAL
70902: IFTRUE 70954
70904: LD_INT 7
70906: DOUBLE
70907: EQUAL
70908: IFTRUE 70954
70910: LD_INT 8
70912: DOUBLE
70913: EQUAL
70914: IFTRUE 70954
70916: LD_INT 13
70918: DOUBLE
70919: EQUAL
70920: IFTRUE 70954
70922: LD_INT 12
70924: DOUBLE
70925: EQUAL
70926: IFTRUE 70954
70928: LD_INT 15
70930: DOUBLE
70931: EQUAL
70932: IFTRUE 70954
70934: LD_INT 11
70936: DOUBLE
70937: EQUAL
70938: IFTRUE 70954
70940: LD_INT 14
70942: DOUBLE
70943: EQUAL
70944: IFTRUE 70954
70946: LD_INT 10
70948: DOUBLE
70949: EQUAL
70950: IFTRUE 70954
70952: GO 71010
70954: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70955: LD_ADDR_VAR 0 9
70959: PUSH
70960: LD_VAR 0 41
70964: PUSH
70965: LD_VAR 0 42
70969: PUSH
70970: LD_VAR 0 43
70974: PUSH
70975: LD_VAR 0 44
70979: PUSH
70980: LD_VAR 0 45
70984: PUSH
70985: LD_VAR 0 46
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: PUSH
70998: LD_VAR 0 4
71002: PUSH
71003: LD_INT 1
71005: PLUS
71006: ARRAY
71007: ST_TO_ADDR
71008: GO 71263
71010: LD_INT 36
71012: DOUBLE
71013: EQUAL
71014: IFTRUE 71018
71016: GO 71074
71018: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71019: LD_ADDR_VAR 0 9
71023: PUSH
71024: LD_VAR 0 47
71028: PUSH
71029: LD_VAR 0 48
71033: PUSH
71034: LD_VAR 0 49
71038: PUSH
71039: LD_VAR 0 50
71043: PUSH
71044: LD_VAR 0 51
71048: PUSH
71049: LD_VAR 0 52
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: PUSH
71062: LD_VAR 0 4
71066: PUSH
71067: LD_INT 1
71069: PLUS
71070: ARRAY
71071: ST_TO_ADDR
71072: GO 71263
71074: LD_INT 4
71076: DOUBLE
71077: EQUAL
71078: IFTRUE 71100
71080: LD_INT 5
71082: DOUBLE
71083: EQUAL
71084: IFTRUE 71100
71086: LD_INT 34
71088: DOUBLE
71089: EQUAL
71090: IFTRUE 71100
71092: LD_INT 37
71094: DOUBLE
71095: EQUAL
71096: IFTRUE 71100
71098: GO 71156
71100: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71101: LD_ADDR_VAR 0 9
71105: PUSH
71106: LD_VAR 0 53
71110: PUSH
71111: LD_VAR 0 54
71115: PUSH
71116: LD_VAR 0 55
71120: PUSH
71121: LD_VAR 0 56
71125: PUSH
71126: LD_VAR 0 57
71130: PUSH
71131: LD_VAR 0 58
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: LIST
71140: LIST
71141: LIST
71142: LIST
71143: PUSH
71144: LD_VAR 0 4
71148: PUSH
71149: LD_INT 1
71151: PLUS
71152: ARRAY
71153: ST_TO_ADDR
71154: GO 71263
71156: LD_INT 31
71158: DOUBLE
71159: EQUAL
71160: IFTRUE 71206
71162: LD_INT 32
71164: DOUBLE
71165: EQUAL
71166: IFTRUE 71206
71168: LD_INT 33
71170: DOUBLE
71171: EQUAL
71172: IFTRUE 71206
71174: LD_INT 27
71176: DOUBLE
71177: EQUAL
71178: IFTRUE 71206
71180: LD_INT 26
71182: DOUBLE
71183: EQUAL
71184: IFTRUE 71206
71186: LD_INT 28
71188: DOUBLE
71189: EQUAL
71190: IFTRUE 71206
71192: LD_INT 29
71194: DOUBLE
71195: EQUAL
71196: IFTRUE 71206
71198: LD_INT 30
71200: DOUBLE
71201: EQUAL
71202: IFTRUE 71206
71204: GO 71262
71206: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71207: LD_ADDR_VAR 0 9
71211: PUSH
71212: LD_VAR 0 59
71216: PUSH
71217: LD_VAR 0 60
71221: PUSH
71222: LD_VAR 0 61
71226: PUSH
71227: LD_VAR 0 62
71231: PUSH
71232: LD_VAR 0 63
71236: PUSH
71237: LD_VAR 0 64
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: PUSH
71250: LD_VAR 0 4
71254: PUSH
71255: LD_INT 1
71257: PLUS
71258: ARRAY
71259: ST_TO_ADDR
71260: GO 71263
71262: POP
// temp_list2 = [ ] ;
71263: LD_ADDR_VAR 0 10
71267: PUSH
71268: EMPTY
71269: ST_TO_ADDR
// for i in temp_list do
71270: LD_ADDR_VAR 0 8
71274: PUSH
71275: LD_VAR 0 9
71279: PUSH
71280: FOR_IN
71281: IFFALSE 71333
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71283: LD_ADDR_VAR 0 10
71287: PUSH
71288: LD_VAR 0 10
71292: PUSH
71293: LD_VAR 0 8
71297: PUSH
71298: LD_INT 1
71300: ARRAY
71301: PUSH
71302: LD_VAR 0 2
71306: PLUS
71307: PUSH
71308: LD_VAR 0 8
71312: PUSH
71313: LD_INT 2
71315: ARRAY
71316: PUSH
71317: LD_VAR 0 3
71321: PLUS
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: PUSH
71327: EMPTY
71328: LIST
71329: ADD
71330: ST_TO_ADDR
71331: GO 71280
71333: POP
71334: POP
// result = temp_list2 ;
71335: LD_ADDR_VAR 0 7
71339: PUSH
71340: LD_VAR 0 10
71344: ST_TO_ADDR
// end ;
71345: LD_VAR 0 7
71349: RET
// export function EnemyInRange ( unit , dist ) ; begin
71350: LD_INT 0
71352: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71353: LD_ADDR_VAR 0 3
71357: PUSH
71358: LD_VAR 0 1
71362: PPUSH
71363: CALL_OW 255
71367: PPUSH
71368: LD_VAR 0 1
71372: PPUSH
71373: CALL_OW 250
71377: PPUSH
71378: LD_VAR 0 1
71382: PPUSH
71383: CALL_OW 251
71387: PPUSH
71388: LD_VAR 0 2
71392: PPUSH
71393: CALL 44746 0 4
71397: PUSH
71398: LD_INT 4
71400: ARRAY
71401: ST_TO_ADDR
// end ;
71402: LD_VAR 0 3
71406: RET
// export function PlayerSeeMe ( unit ) ; begin
71407: LD_INT 0
71409: PPUSH
// result := See ( your_side , unit ) ;
71410: LD_ADDR_VAR 0 2
71414: PUSH
71415: LD_OWVAR 2
71419: PPUSH
71420: LD_VAR 0 1
71424: PPUSH
71425: CALL_OW 292
71429: ST_TO_ADDR
// end ;
71430: LD_VAR 0 2
71434: RET
// export function ReverseDir ( unit ) ; begin
71435: LD_INT 0
71437: PPUSH
// if not unit then
71438: LD_VAR 0 1
71442: NOT
71443: IFFALSE 71447
// exit ;
71445: GO 71470
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71447: LD_ADDR_VAR 0 2
71451: PUSH
71452: LD_VAR 0 1
71456: PPUSH
71457: CALL_OW 254
71461: PUSH
71462: LD_INT 3
71464: PLUS
71465: PUSH
71466: LD_INT 6
71468: MOD
71469: ST_TO_ADDR
// end ;
71470: LD_VAR 0 2
71474: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71475: LD_INT 0
71477: PPUSH
71478: PPUSH
71479: PPUSH
71480: PPUSH
71481: PPUSH
// if not hexes then
71482: LD_VAR 0 2
71486: NOT
71487: IFFALSE 71491
// exit ;
71489: GO 71639
// dist := 9999 ;
71491: LD_ADDR_VAR 0 5
71495: PUSH
71496: LD_INT 9999
71498: ST_TO_ADDR
// for i = 1 to hexes do
71499: LD_ADDR_VAR 0 4
71503: PUSH
71504: DOUBLE
71505: LD_INT 1
71507: DEC
71508: ST_TO_ADDR
71509: LD_VAR 0 2
71513: PUSH
71514: FOR_TO
71515: IFFALSE 71627
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71517: LD_VAR 0 1
71521: PPUSH
71522: LD_VAR 0 2
71526: PUSH
71527: LD_VAR 0 4
71531: ARRAY
71532: PUSH
71533: LD_INT 1
71535: ARRAY
71536: PPUSH
71537: LD_VAR 0 2
71541: PUSH
71542: LD_VAR 0 4
71546: ARRAY
71547: PUSH
71548: LD_INT 2
71550: ARRAY
71551: PPUSH
71552: CALL_OW 297
71556: PUSH
71557: LD_VAR 0 5
71561: LESS
71562: IFFALSE 71625
// begin hex := hexes [ i ] ;
71564: LD_ADDR_VAR 0 7
71568: PUSH
71569: LD_VAR 0 2
71573: PUSH
71574: LD_VAR 0 4
71578: ARRAY
71579: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71580: LD_ADDR_VAR 0 5
71584: PUSH
71585: LD_VAR 0 1
71589: PPUSH
71590: LD_VAR 0 2
71594: PUSH
71595: LD_VAR 0 4
71599: ARRAY
71600: PUSH
71601: LD_INT 1
71603: ARRAY
71604: PPUSH
71605: LD_VAR 0 2
71609: PUSH
71610: LD_VAR 0 4
71614: ARRAY
71615: PUSH
71616: LD_INT 2
71618: ARRAY
71619: PPUSH
71620: CALL_OW 297
71624: ST_TO_ADDR
// end ; end ;
71625: GO 71514
71627: POP
71628: POP
// result := hex ;
71629: LD_ADDR_VAR 0 3
71633: PUSH
71634: LD_VAR 0 7
71638: ST_TO_ADDR
// end ;
71639: LD_VAR 0 3
71643: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71644: LD_INT 0
71646: PPUSH
71647: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71648: LD_VAR 0 1
71652: NOT
71653: PUSH
71654: LD_VAR 0 1
71658: PUSH
71659: LD_INT 21
71661: PUSH
71662: LD_INT 2
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 23
71671: PUSH
71672: LD_INT 2
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PPUSH
71683: CALL_OW 69
71687: IN
71688: NOT
71689: OR
71690: IFFALSE 71694
// exit ;
71692: GO 71741
// for i = 1 to 3 do
71694: LD_ADDR_VAR 0 3
71698: PUSH
71699: DOUBLE
71700: LD_INT 1
71702: DEC
71703: ST_TO_ADDR
71704: LD_INT 3
71706: PUSH
71707: FOR_TO
71708: IFFALSE 71739
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71710: LD_VAR 0 1
71714: PPUSH
71715: CALL_OW 250
71719: PPUSH
71720: LD_VAR 0 1
71724: PPUSH
71725: CALL_OW 251
71729: PPUSH
71730: LD_INT 1
71732: PPUSH
71733: CALL_OW 453
71737: GO 71707
71739: POP
71740: POP
// end ;
71741: LD_VAR 0 2
71745: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71746: LD_INT 0
71748: PPUSH
71749: PPUSH
71750: PPUSH
71751: PPUSH
71752: PPUSH
71753: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71754: LD_VAR 0 1
71758: NOT
71759: PUSH
71760: LD_VAR 0 2
71764: NOT
71765: OR
71766: PUSH
71767: LD_VAR 0 1
71771: PPUSH
71772: CALL_OW 314
71776: OR
71777: IFFALSE 71781
// exit ;
71779: GO 72222
// x := GetX ( enemy_unit ) ;
71781: LD_ADDR_VAR 0 7
71785: PUSH
71786: LD_VAR 0 2
71790: PPUSH
71791: CALL_OW 250
71795: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71796: LD_ADDR_VAR 0 8
71800: PUSH
71801: LD_VAR 0 2
71805: PPUSH
71806: CALL_OW 251
71810: ST_TO_ADDR
// if not x or not y then
71811: LD_VAR 0 7
71815: NOT
71816: PUSH
71817: LD_VAR 0 8
71821: NOT
71822: OR
71823: IFFALSE 71827
// exit ;
71825: GO 72222
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71827: LD_ADDR_VAR 0 6
71831: PUSH
71832: LD_VAR 0 7
71836: PPUSH
71837: LD_INT 0
71839: PPUSH
71840: LD_INT 4
71842: PPUSH
71843: CALL_OW 272
71847: PUSH
71848: LD_VAR 0 8
71852: PPUSH
71853: LD_INT 0
71855: PPUSH
71856: LD_INT 4
71858: PPUSH
71859: CALL_OW 273
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PUSH
71868: LD_VAR 0 7
71872: PPUSH
71873: LD_INT 1
71875: PPUSH
71876: LD_INT 4
71878: PPUSH
71879: CALL_OW 272
71883: PUSH
71884: LD_VAR 0 8
71888: PPUSH
71889: LD_INT 1
71891: PPUSH
71892: LD_INT 4
71894: PPUSH
71895: CALL_OW 273
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: LD_VAR 0 7
71908: PPUSH
71909: LD_INT 2
71911: PPUSH
71912: LD_INT 4
71914: PPUSH
71915: CALL_OW 272
71919: PUSH
71920: LD_VAR 0 8
71924: PPUSH
71925: LD_INT 2
71927: PPUSH
71928: LD_INT 4
71930: PPUSH
71931: CALL_OW 273
71935: PUSH
71936: EMPTY
71937: LIST
71938: LIST
71939: PUSH
71940: LD_VAR 0 7
71944: PPUSH
71945: LD_INT 3
71947: PPUSH
71948: LD_INT 4
71950: PPUSH
71951: CALL_OW 272
71955: PUSH
71956: LD_VAR 0 8
71960: PPUSH
71961: LD_INT 3
71963: PPUSH
71964: LD_INT 4
71966: PPUSH
71967: CALL_OW 273
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: PUSH
71976: LD_VAR 0 7
71980: PPUSH
71981: LD_INT 4
71983: PPUSH
71984: LD_INT 4
71986: PPUSH
71987: CALL_OW 272
71991: PUSH
71992: LD_VAR 0 8
71996: PPUSH
71997: LD_INT 4
71999: PPUSH
72000: LD_INT 4
72002: PPUSH
72003: CALL_OW 273
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: LD_VAR 0 7
72016: PPUSH
72017: LD_INT 5
72019: PPUSH
72020: LD_INT 4
72022: PPUSH
72023: CALL_OW 272
72027: PUSH
72028: LD_VAR 0 8
72032: PPUSH
72033: LD_INT 5
72035: PPUSH
72036: LD_INT 4
72038: PPUSH
72039: CALL_OW 273
72043: PUSH
72044: EMPTY
72045: LIST
72046: LIST
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: ST_TO_ADDR
// for i = tmp downto 1 do
72056: LD_ADDR_VAR 0 4
72060: PUSH
72061: DOUBLE
72062: LD_VAR 0 6
72066: INC
72067: ST_TO_ADDR
72068: LD_INT 1
72070: PUSH
72071: FOR_DOWNTO
72072: IFFALSE 72173
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72074: LD_VAR 0 6
72078: PUSH
72079: LD_VAR 0 4
72083: ARRAY
72084: PUSH
72085: LD_INT 1
72087: ARRAY
72088: PPUSH
72089: LD_VAR 0 6
72093: PUSH
72094: LD_VAR 0 4
72098: ARRAY
72099: PUSH
72100: LD_INT 2
72102: ARRAY
72103: PPUSH
72104: CALL_OW 488
72108: NOT
72109: PUSH
72110: LD_VAR 0 6
72114: PUSH
72115: LD_VAR 0 4
72119: ARRAY
72120: PUSH
72121: LD_INT 1
72123: ARRAY
72124: PPUSH
72125: LD_VAR 0 6
72129: PUSH
72130: LD_VAR 0 4
72134: ARRAY
72135: PUSH
72136: LD_INT 2
72138: ARRAY
72139: PPUSH
72140: CALL_OW 428
72144: PUSH
72145: LD_INT 0
72147: NONEQUAL
72148: OR
72149: IFFALSE 72171
// tmp := Delete ( tmp , i ) ;
72151: LD_ADDR_VAR 0 6
72155: PUSH
72156: LD_VAR 0 6
72160: PPUSH
72161: LD_VAR 0 4
72165: PPUSH
72166: CALL_OW 3
72170: ST_TO_ADDR
72171: GO 72071
72173: POP
72174: POP
// j := GetClosestHex ( unit , tmp ) ;
72175: LD_ADDR_VAR 0 5
72179: PUSH
72180: LD_VAR 0 1
72184: PPUSH
72185: LD_VAR 0 6
72189: PPUSH
72190: CALL 71475 0 2
72194: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72195: LD_VAR 0 1
72199: PPUSH
72200: LD_VAR 0 5
72204: PUSH
72205: LD_INT 1
72207: ARRAY
72208: PPUSH
72209: LD_VAR 0 5
72213: PUSH
72214: LD_INT 2
72216: ARRAY
72217: PPUSH
72218: CALL_OW 111
// end ;
72222: LD_VAR 0 3
72226: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72227: LD_INT 0
72229: PPUSH
72230: PPUSH
72231: PPUSH
// uc_side = 0 ;
72232: LD_ADDR_OWVAR 20
72236: PUSH
72237: LD_INT 0
72239: ST_TO_ADDR
// uc_nation = 0 ;
72240: LD_ADDR_OWVAR 21
72244: PUSH
72245: LD_INT 0
72247: ST_TO_ADDR
// InitHc_All ( ) ;
72248: CALL_OW 584
// InitVc ;
72252: CALL_OW 20
// if mastodonts then
72256: LD_VAR 0 6
72260: IFFALSE 72327
// for i = 1 to mastodonts do
72262: LD_ADDR_VAR 0 11
72266: PUSH
72267: DOUBLE
72268: LD_INT 1
72270: DEC
72271: ST_TO_ADDR
72272: LD_VAR 0 6
72276: PUSH
72277: FOR_TO
72278: IFFALSE 72325
// begin vc_chassis := 31 ;
72280: LD_ADDR_OWVAR 37
72284: PUSH
72285: LD_INT 31
72287: ST_TO_ADDR
// vc_control := control_rider ;
72288: LD_ADDR_OWVAR 38
72292: PUSH
72293: LD_INT 4
72295: ST_TO_ADDR
// animal := CreateVehicle ;
72296: LD_ADDR_VAR 0 12
72300: PUSH
72301: CALL_OW 45
72305: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72306: LD_VAR 0 12
72310: PPUSH
72311: LD_VAR 0 8
72315: PPUSH
72316: LD_INT 0
72318: PPUSH
72319: CALL 74462 0 3
// end ;
72323: GO 72277
72325: POP
72326: POP
// if horses then
72327: LD_VAR 0 5
72331: IFFALSE 72398
// for i = 1 to horses do
72333: LD_ADDR_VAR 0 11
72337: PUSH
72338: DOUBLE
72339: LD_INT 1
72341: DEC
72342: ST_TO_ADDR
72343: LD_VAR 0 5
72347: PUSH
72348: FOR_TO
72349: IFFALSE 72396
// begin hc_class := 21 ;
72351: LD_ADDR_OWVAR 28
72355: PUSH
72356: LD_INT 21
72358: ST_TO_ADDR
// hc_gallery :=  ;
72359: LD_ADDR_OWVAR 33
72363: PUSH
72364: LD_STRING 
72366: ST_TO_ADDR
// animal := CreateHuman ;
72367: LD_ADDR_VAR 0 12
72371: PUSH
72372: CALL_OW 44
72376: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72377: LD_VAR 0 12
72381: PPUSH
72382: LD_VAR 0 8
72386: PPUSH
72387: LD_INT 0
72389: PPUSH
72390: CALL 74462 0 3
// end ;
72394: GO 72348
72396: POP
72397: POP
// if birds then
72398: LD_VAR 0 1
72402: IFFALSE 72469
// for i = 1 to birds do
72404: LD_ADDR_VAR 0 11
72408: PUSH
72409: DOUBLE
72410: LD_INT 1
72412: DEC
72413: ST_TO_ADDR
72414: LD_VAR 0 1
72418: PUSH
72419: FOR_TO
72420: IFFALSE 72467
// begin hc_class = 18 ;
72422: LD_ADDR_OWVAR 28
72426: PUSH
72427: LD_INT 18
72429: ST_TO_ADDR
// hc_gallery =  ;
72430: LD_ADDR_OWVAR 33
72434: PUSH
72435: LD_STRING 
72437: ST_TO_ADDR
// animal := CreateHuman ;
72438: LD_ADDR_VAR 0 12
72442: PUSH
72443: CALL_OW 44
72447: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72448: LD_VAR 0 12
72452: PPUSH
72453: LD_VAR 0 8
72457: PPUSH
72458: LD_INT 0
72460: PPUSH
72461: CALL 74462 0 3
// end ;
72465: GO 72419
72467: POP
72468: POP
// if tigers then
72469: LD_VAR 0 2
72473: IFFALSE 72557
// for i = 1 to tigers do
72475: LD_ADDR_VAR 0 11
72479: PUSH
72480: DOUBLE
72481: LD_INT 1
72483: DEC
72484: ST_TO_ADDR
72485: LD_VAR 0 2
72489: PUSH
72490: FOR_TO
72491: IFFALSE 72555
// begin hc_class = class_tiger ;
72493: LD_ADDR_OWVAR 28
72497: PUSH
72498: LD_INT 14
72500: ST_TO_ADDR
// hc_gallery =  ;
72501: LD_ADDR_OWVAR 33
72505: PUSH
72506: LD_STRING 
72508: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72509: LD_ADDR_OWVAR 35
72513: PUSH
72514: LD_INT 7
72516: NEG
72517: PPUSH
72518: LD_INT 7
72520: PPUSH
72521: CALL_OW 12
72525: ST_TO_ADDR
// animal := CreateHuman ;
72526: LD_ADDR_VAR 0 12
72530: PUSH
72531: CALL_OW 44
72535: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72536: LD_VAR 0 12
72540: PPUSH
72541: LD_VAR 0 8
72545: PPUSH
72546: LD_INT 0
72548: PPUSH
72549: CALL 74462 0 3
// end ;
72553: GO 72490
72555: POP
72556: POP
// if apemans then
72557: LD_VAR 0 3
72561: IFFALSE 72684
// for i = 1 to apemans do
72563: LD_ADDR_VAR 0 11
72567: PUSH
72568: DOUBLE
72569: LD_INT 1
72571: DEC
72572: ST_TO_ADDR
72573: LD_VAR 0 3
72577: PUSH
72578: FOR_TO
72579: IFFALSE 72682
// begin hc_class = class_apeman ;
72581: LD_ADDR_OWVAR 28
72585: PUSH
72586: LD_INT 12
72588: ST_TO_ADDR
// hc_gallery =  ;
72589: LD_ADDR_OWVAR 33
72593: PUSH
72594: LD_STRING 
72596: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72597: LD_ADDR_OWVAR 35
72601: PUSH
72602: LD_INT 2
72604: NEG
72605: PPUSH
72606: LD_INT 2
72608: PPUSH
72609: CALL_OW 12
72613: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72614: LD_ADDR_OWVAR 31
72618: PUSH
72619: LD_INT 1
72621: PPUSH
72622: LD_INT 3
72624: PPUSH
72625: CALL_OW 12
72629: PUSH
72630: LD_INT 1
72632: PPUSH
72633: LD_INT 3
72635: PPUSH
72636: CALL_OW 12
72640: PUSH
72641: LD_INT 0
72643: PUSH
72644: LD_INT 0
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: ST_TO_ADDR
// animal := CreateHuman ;
72653: LD_ADDR_VAR 0 12
72657: PUSH
72658: CALL_OW 44
72662: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72663: LD_VAR 0 12
72667: PPUSH
72668: LD_VAR 0 8
72672: PPUSH
72673: LD_INT 0
72675: PPUSH
72676: CALL 74462 0 3
// end ;
72680: GO 72578
72682: POP
72683: POP
// if enchidnas then
72684: LD_VAR 0 4
72688: IFFALSE 72755
// for i = 1 to enchidnas do
72690: LD_ADDR_VAR 0 11
72694: PUSH
72695: DOUBLE
72696: LD_INT 1
72698: DEC
72699: ST_TO_ADDR
72700: LD_VAR 0 4
72704: PUSH
72705: FOR_TO
72706: IFFALSE 72753
// begin hc_class = 13 ;
72708: LD_ADDR_OWVAR 28
72712: PUSH
72713: LD_INT 13
72715: ST_TO_ADDR
// hc_gallery =  ;
72716: LD_ADDR_OWVAR 33
72720: PUSH
72721: LD_STRING 
72723: ST_TO_ADDR
// animal := CreateHuman ;
72724: LD_ADDR_VAR 0 12
72728: PUSH
72729: CALL_OW 44
72733: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72734: LD_VAR 0 12
72738: PPUSH
72739: LD_VAR 0 8
72743: PPUSH
72744: LD_INT 0
72746: PPUSH
72747: CALL 74462 0 3
// end ;
72751: GO 72705
72753: POP
72754: POP
// if fishes then
72755: LD_VAR 0 7
72759: IFFALSE 72826
// for i = 1 to fishes do
72761: LD_ADDR_VAR 0 11
72765: PUSH
72766: DOUBLE
72767: LD_INT 1
72769: DEC
72770: ST_TO_ADDR
72771: LD_VAR 0 7
72775: PUSH
72776: FOR_TO
72777: IFFALSE 72824
// begin hc_class = 20 ;
72779: LD_ADDR_OWVAR 28
72783: PUSH
72784: LD_INT 20
72786: ST_TO_ADDR
// hc_gallery =  ;
72787: LD_ADDR_OWVAR 33
72791: PUSH
72792: LD_STRING 
72794: ST_TO_ADDR
// animal := CreateHuman ;
72795: LD_ADDR_VAR 0 12
72799: PUSH
72800: CALL_OW 44
72804: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72805: LD_VAR 0 12
72809: PPUSH
72810: LD_VAR 0 9
72814: PPUSH
72815: LD_INT 0
72817: PPUSH
72818: CALL 74462 0 3
// end ;
72822: GO 72776
72824: POP
72825: POP
// end ;
72826: LD_VAR 0 10
72830: RET
// export function WantHeal ( sci , unit ) ; begin
72831: LD_INT 0
72833: PPUSH
// if GetTaskList ( sci ) > 0 then
72834: LD_VAR 0 1
72838: PPUSH
72839: CALL_OW 437
72843: PUSH
72844: LD_INT 0
72846: GREATER
72847: IFFALSE 72917
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72849: LD_VAR 0 1
72853: PPUSH
72854: CALL_OW 437
72858: PUSH
72859: LD_INT 1
72861: ARRAY
72862: PUSH
72863: LD_INT 1
72865: ARRAY
72866: PUSH
72867: LD_STRING l
72869: EQUAL
72870: PUSH
72871: LD_VAR 0 1
72875: PPUSH
72876: CALL_OW 437
72880: PUSH
72881: LD_INT 1
72883: ARRAY
72884: PUSH
72885: LD_INT 4
72887: ARRAY
72888: PUSH
72889: LD_VAR 0 2
72893: EQUAL
72894: AND
72895: IFFALSE 72907
// result := true else
72897: LD_ADDR_VAR 0 3
72901: PUSH
72902: LD_INT 1
72904: ST_TO_ADDR
72905: GO 72915
// result := false ;
72907: LD_ADDR_VAR 0 3
72911: PUSH
72912: LD_INT 0
72914: ST_TO_ADDR
// end else
72915: GO 72925
// result := false ;
72917: LD_ADDR_VAR 0 3
72921: PUSH
72922: LD_INT 0
72924: ST_TO_ADDR
// end ;
72925: LD_VAR 0 3
72929: RET
// export function HealTarget ( sci ) ; begin
72930: LD_INT 0
72932: PPUSH
// if not sci then
72933: LD_VAR 0 1
72937: NOT
72938: IFFALSE 72942
// exit ;
72940: GO 73007
// result := 0 ;
72942: LD_ADDR_VAR 0 2
72946: PUSH
72947: LD_INT 0
72949: ST_TO_ADDR
// if GetTaskList ( sci ) then
72950: LD_VAR 0 1
72954: PPUSH
72955: CALL_OW 437
72959: IFFALSE 73007
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72961: LD_VAR 0 1
72965: PPUSH
72966: CALL_OW 437
72970: PUSH
72971: LD_INT 1
72973: ARRAY
72974: PUSH
72975: LD_INT 1
72977: ARRAY
72978: PUSH
72979: LD_STRING l
72981: EQUAL
72982: IFFALSE 73007
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72984: LD_ADDR_VAR 0 2
72988: PUSH
72989: LD_VAR 0 1
72993: PPUSH
72994: CALL_OW 437
72998: PUSH
72999: LD_INT 1
73001: ARRAY
73002: PUSH
73003: LD_INT 4
73005: ARRAY
73006: ST_TO_ADDR
// end ;
73007: LD_VAR 0 2
73011: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73012: LD_INT 0
73014: PPUSH
73015: PPUSH
73016: PPUSH
73017: PPUSH
// if not base_units then
73018: LD_VAR 0 1
73022: NOT
73023: IFFALSE 73027
// exit ;
73025: GO 73114
// result := false ;
73027: LD_ADDR_VAR 0 2
73031: PUSH
73032: LD_INT 0
73034: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73035: LD_ADDR_VAR 0 5
73039: PUSH
73040: LD_VAR 0 1
73044: PPUSH
73045: LD_INT 21
73047: PUSH
73048: LD_INT 3
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: PPUSH
73055: CALL_OW 72
73059: ST_TO_ADDR
// if not tmp then
73060: LD_VAR 0 5
73064: NOT
73065: IFFALSE 73069
// exit ;
73067: GO 73114
// for i in tmp do
73069: LD_ADDR_VAR 0 3
73073: PUSH
73074: LD_VAR 0 5
73078: PUSH
73079: FOR_IN
73080: IFFALSE 73112
// begin result := EnemyInRange ( i , 22 ) ;
73082: LD_ADDR_VAR 0 2
73086: PUSH
73087: LD_VAR 0 3
73091: PPUSH
73092: LD_INT 22
73094: PPUSH
73095: CALL 71350 0 2
73099: ST_TO_ADDR
// if result then
73100: LD_VAR 0 2
73104: IFFALSE 73110
// exit ;
73106: POP
73107: POP
73108: GO 73114
// end ;
73110: GO 73079
73112: POP
73113: POP
// end ;
73114: LD_VAR 0 2
73118: RET
// export function FilterByTag ( units , tag ) ; begin
73119: LD_INT 0
73121: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73122: LD_ADDR_VAR 0 3
73126: PUSH
73127: LD_VAR 0 1
73131: PPUSH
73132: LD_INT 120
73134: PUSH
73135: LD_VAR 0 2
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: PPUSH
73144: CALL_OW 72
73148: ST_TO_ADDR
// end ;
73149: LD_VAR 0 3
73153: RET
// export function IsDriver ( un ) ; begin
73154: LD_INT 0
73156: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73157: LD_ADDR_VAR 0 2
73161: PUSH
73162: LD_VAR 0 1
73166: PUSH
73167: LD_INT 55
73169: PUSH
73170: EMPTY
73171: LIST
73172: PPUSH
73173: CALL_OW 69
73177: IN
73178: ST_TO_ADDR
// end ;
73179: LD_VAR 0 2
73183: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73184: LD_INT 0
73186: PPUSH
73187: PPUSH
// list := [ ] ;
73188: LD_ADDR_VAR 0 5
73192: PUSH
73193: EMPTY
73194: ST_TO_ADDR
// case d of 0 :
73195: LD_VAR 0 3
73199: PUSH
73200: LD_INT 0
73202: DOUBLE
73203: EQUAL
73204: IFTRUE 73208
73206: GO 73341
73208: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73209: LD_ADDR_VAR 0 5
73213: PUSH
73214: LD_VAR 0 1
73218: PUSH
73219: LD_INT 4
73221: MINUS
73222: PUSH
73223: LD_VAR 0 2
73227: PUSH
73228: LD_INT 4
73230: MINUS
73231: PUSH
73232: LD_INT 2
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: LIST
73239: PUSH
73240: LD_VAR 0 1
73244: PUSH
73245: LD_INT 3
73247: MINUS
73248: PUSH
73249: LD_VAR 0 2
73253: PUSH
73254: LD_INT 1
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: LIST
73261: PUSH
73262: LD_VAR 0 1
73266: PUSH
73267: LD_INT 4
73269: PLUS
73270: PUSH
73271: LD_VAR 0 2
73275: PUSH
73276: LD_INT 4
73278: PUSH
73279: EMPTY
73280: LIST
73281: LIST
73282: LIST
73283: PUSH
73284: LD_VAR 0 1
73288: PUSH
73289: LD_INT 3
73291: PLUS
73292: PUSH
73293: LD_VAR 0 2
73297: PUSH
73298: LD_INT 3
73300: PLUS
73301: PUSH
73302: LD_INT 5
73304: PUSH
73305: EMPTY
73306: LIST
73307: LIST
73308: LIST
73309: PUSH
73310: LD_VAR 0 1
73314: PUSH
73315: LD_VAR 0 2
73319: PUSH
73320: LD_INT 4
73322: PLUS
73323: PUSH
73324: LD_INT 0
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: LIST
73331: PUSH
73332: EMPTY
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: ST_TO_ADDR
// end ; 1 :
73339: GO 74039
73341: LD_INT 1
73343: DOUBLE
73344: EQUAL
73345: IFTRUE 73349
73347: GO 73482
73349: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73350: LD_ADDR_VAR 0 5
73354: PUSH
73355: LD_VAR 0 1
73359: PUSH
73360: LD_VAR 0 2
73364: PUSH
73365: LD_INT 4
73367: MINUS
73368: PUSH
73369: LD_INT 3
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: LIST
73376: PUSH
73377: LD_VAR 0 1
73381: PUSH
73382: LD_INT 3
73384: MINUS
73385: PUSH
73386: LD_VAR 0 2
73390: PUSH
73391: LD_INT 3
73393: MINUS
73394: PUSH
73395: LD_INT 2
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: LIST
73402: PUSH
73403: LD_VAR 0 1
73407: PUSH
73408: LD_INT 4
73410: MINUS
73411: PUSH
73412: LD_VAR 0 2
73416: PUSH
73417: LD_INT 1
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: LIST
73424: PUSH
73425: LD_VAR 0 1
73429: PUSH
73430: LD_VAR 0 2
73434: PUSH
73435: LD_INT 3
73437: PLUS
73438: PUSH
73439: LD_INT 0
73441: PUSH
73442: EMPTY
73443: LIST
73444: LIST
73445: LIST
73446: PUSH
73447: LD_VAR 0 1
73451: PUSH
73452: LD_INT 4
73454: PLUS
73455: PUSH
73456: LD_VAR 0 2
73460: PUSH
73461: LD_INT 4
73463: PLUS
73464: PUSH
73465: LD_INT 5
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: LIST
73472: PUSH
73473: EMPTY
73474: LIST
73475: LIST
73476: LIST
73477: LIST
73478: LIST
73479: ST_TO_ADDR
// end ; 2 :
73480: GO 74039
73482: LD_INT 2
73484: DOUBLE
73485: EQUAL
73486: IFTRUE 73490
73488: GO 73619
73490: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73491: LD_ADDR_VAR 0 5
73495: PUSH
73496: LD_VAR 0 1
73500: PUSH
73501: LD_VAR 0 2
73505: PUSH
73506: LD_INT 3
73508: MINUS
73509: PUSH
73510: LD_INT 3
73512: PUSH
73513: EMPTY
73514: LIST
73515: LIST
73516: LIST
73517: PUSH
73518: LD_VAR 0 1
73522: PUSH
73523: LD_INT 4
73525: PLUS
73526: PUSH
73527: LD_VAR 0 2
73531: PUSH
73532: LD_INT 4
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: LIST
73539: PUSH
73540: LD_VAR 0 1
73544: PUSH
73545: LD_VAR 0 2
73549: PUSH
73550: LD_INT 4
73552: PLUS
73553: PUSH
73554: LD_INT 0
73556: PUSH
73557: EMPTY
73558: LIST
73559: LIST
73560: LIST
73561: PUSH
73562: LD_VAR 0 1
73566: PUSH
73567: LD_INT 3
73569: MINUS
73570: PUSH
73571: LD_VAR 0 2
73575: PUSH
73576: LD_INT 1
73578: PUSH
73579: EMPTY
73580: LIST
73581: LIST
73582: LIST
73583: PUSH
73584: LD_VAR 0 1
73588: PUSH
73589: LD_INT 4
73591: MINUS
73592: PUSH
73593: LD_VAR 0 2
73597: PUSH
73598: LD_INT 4
73600: MINUS
73601: PUSH
73602: LD_INT 2
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: LIST
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: LIST
73614: LIST
73615: LIST
73616: ST_TO_ADDR
// end ; 3 :
73617: GO 74039
73619: LD_INT 3
73621: DOUBLE
73622: EQUAL
73623: IFTRUE 73627
73625: GO 73760
73627: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73628: LD_ADDR_VAR 0 5
73632: PUSH
73633: LD_VAR 0 1
73637: PUSH
73638: LD_INT 3
73640: PLUS
73641: PUSH
73642: LD_VAR 0 2
73646: PUSH
73647: LD_INT 4
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: LIST
73654: PUSH
73655: LD_VAR 0 1
73659: PUSH
73660: LD_INT 4
73662: PLUS
73663: PUSH
73664: LD_VAR 0 2
73668: PUSH
73669: LD_INT 4
73671: PLUS
73672: PUSH
73673: LD_INT 5
73675: PUSH
73676: EMPTY
73677: LIST
73678: LIST
73679: LIST
73680: PUSH
73681: LD_VAR 0 1
73685: PUSH
73686: LD_INT 4
73688: MINUS
73689: PUSH
73690: LD_VAR 0 2
73694: PUSH
73695: LD_INT 1
73697: PUSH
73698: EMPTY
73699: LIST
73700: LIST
73701: LIST
73702: PUSH
73703: LD_VAR 0 1
73707: PUSH
73708: LD_VAR 0 2
73712: PUSH
73713: LD_INT 4
73715: MINUS
73716: PUSH
73717: LD_INT 3
73719: PUSH
73720: EMPTY
73721: LIST
73722: LIST
73723: LIST
73724: PUSH
73725: LD_VAR 0 1
73729: PUSH
73730: LD_INT 3
73732: MINUS
73733: PUSH
73734: LD_VAR 0 2
73738: PUSH
73739: LD_INT 3
73741: MINUS
73742: PUSH
73743: LD_INT 2
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: LIST
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: ST_TO_ADDR
// end ; 4 :
73758: GO 74039
73760: LD_INT 4
73762: DOUBLE
73763: EQUAL
73764: IFTRUE 73768
73766: GO 73901
73768: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73769: LD_ADDR_VAR 0 5
73773: PUSH
73774: LD_VAR 0 1
73778: PUSH
73779: LD_VAR 0 2
73783: PUSH
73784: LD_INT 4
73786: PLUS
73787: PUSH
73788: LD_INT 0
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: LIST
73795: PUSH
73796: LD_VAR 0 1
73800: PUSH
73801: LD_INT 3
73803: PLUS
73804: PUSH
73805: LD_VAR 0 2
73809: PUSH
73810: LD_INT 3
73812: PLUS
73813: PUSH
73814: LD_INT 5
73816: PUSH
73817: EMPTY
73818: LIST
73819: LIST
73820: LIST
73821: PUSH
73822: LD_VAR 0 1
73826: PUSH
73827: LD_INT 4
73829: PLUS
73830: PUSH
73831: LD_VAR 0 2
73835: PUSH
73836: LD_INT 4
73838: PUSH
73839: EMPTY
73840: LIST
73841: LIST
73842: LIST
73843: PUSH
73844: LD_VAR 0 1
73848: PUSH
73849: LD_VAR 0 2
73853: PUSH
73854: LD_INT 3
73856: MINUS
73857: PUSH
73858: LD_INT 3
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: LIST
73865: PUSH
73866: LD_VAR 0 1
73870: PUSH
73871: LD_INT 4
73873: MINUS
73874: PUSH
73875: LD_VAR 0 2
73879: PUSH
73880: LD_INT 4
73882: MINUS
73883: PUSH
73884: LD_INT 2
73886: PUSH
73887: EMPTY
73888: LIST
73889: LIST
73890: LIST
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: ST_TO_ADDR
// end ; 5 :
73899: GO 74039
73901: LD_INT 5
73903: DOUBLE
73904: EQUAL
73905: IFTRUE 73909
73907: GO 74038
73909: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73910: LD_ADDR_VAR 0 5
73914: PUSH
73915: LD_VAR 0 1
73919: PUSH
73920: LD_INT 4
73922: MINUS
73923: PUSH
73924: LD_VAR 0 2
73928: PUSH
73929: LD_INT 1
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: LIST
73936: PUSH
73937: LD_VAR 0 1
73941: PUSH
73942: LD_VAR 0 2
73946: PUSH
73947: LD_INT 4
73949: MINUS
73950: PUSH
73951: LD_INT 3
73953: PUSH
73954: EMPTY
73955: LIST
73956: LIST
73957: LIST
73958: PUSH
73959: LD_VAR 0 1
73963: PUSH
73964: LD_INT 4
73966: PLUS
73967: PUSH
73968: LD_VAR 0 2
73972: PUSH
73973: LD_INT 4
73975: PLUS
73976: PUSH
73977: LD_INT 5
73979: PUSH
73980: EMPTY
73981: LIST
73982: LIST
73983: LIST
73984: PUSH
73985: LD_VAR 0 1
73989: PUSH
73990: LD_INT 3
73992: PLUS
73993: PUSH
73994: LD_VAR 0 2
73998: PUSH
73999: LD_INT 4
74001: PUSH
74002: EMPTY
74003: LIST
74004: LIST
74005: LIST
74006: PUSH
74007: LD_VAR 0 1
74011: PUSH
74012: LD_VAR 0 2
74016: PUSH
74017: LD_INT 3
74019: PLUS
74020: PUSH
74021: LD_INT 0
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: LIST
74028: PUSH
74029: EMPTY
74030: LIST
74031: LIST
74032: LIST
74033: LIST
74034: LIST
74035: ST_TO_ADDR
// end ; end ;
74036: GO 74039
74038: POP
// result := list ;
74039: LD_ADDR_VAR 0 4
74043: PUSH
74044: LD_VAR 0 5
74048: ST_TO_ADDR
// end ;
74049: LD_VAR 0 4
74053: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74054: LD_INT 0
74056: PPUSH
74057: PPUSH
74058: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74059: LD_VAR 0 1
74063: NOT
74064: PUSH
74065: LD_VAR 0 2
74069: PUSH
74070: LD_INT 1
74072: PUSH
74073: LD_INT 2
74075: PUSH
74076: LD_INT 3
74078: PUSH
74079: LD_INT 4
74081: PUSH
74082: EMPTY
74083: LIST
74084: LIST
74085: LIST
74086: LIST
74087: IN
74088: NOT
74089: OR
74090: IFFALSE 74094
// exit ;
74092: GO 74186
// tmp := [ ] ;
74094: LD_ADDR_VAR 0 5
74098: PUSH
74099: EMPTY
74100: ST_TO_ADDR
// for i in units do
74101: LD_ADDR_VAR 0 4
74105: PUSH
74106: LD_VAR 0 1
74110: PUSH
74111: FOR_IN
74112: IFFALSE 74155
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74114: LD_ADDR_VAR 0 5
74118: PUSH
74119: LD_VAR 0 5
74123: PPUSH
74124: LD_VAR 0 5
74128: PUSH
74129: LD_INT 1
74131: PLUS
74132: PPUSH
74133: LD_VAR 0 4
74137: PPUSH
74138: LD_VAR 0 2
74142: PPUSH
74143: CALL_OW 259
74147: PPUSH
74148: CALL_OW 2
74152: ST_TO_ADDR
74153: GO 74111
74155: POP
74156: POP
// if not tmp then
74157: LD_VAR 0 5
74161: NOT
74162: IFFALSE 74166
// exit ;
74164: GO 74186
// result := SortListByListDesc ( units , tmp ) ;
74166: LD_ADDR_VAR 0 3
74170: PUSH
74171: LD_VAR 0 1
74175: PPUSH
74176: LD_VAR 0 5
74180: PPUSH
74181: CALL_OW 77
74185: ST_TO_ADDR
// end ;
74186: LD_VAR 0 3
74190: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74191: LD_INT 0
74193: PPUSH
74194: PPUSH
74195: PPUSH
// result := false ;
74196: LD_ADDR_VAR 0 3
74200: PUSH
74201: LD_INT 0
74203: ST_TO_ADDR
// x := GetX ( building ) ;
74204: LD_ADDR_VAR 0 4
74208: PUSH
74209: LD_VAR 0 2
74213: PPUSH
74214: CALL_OW 250
74218: ST_TO_ADDR
// y := GetY ( building ) ;
74219: LD_ADDR_VAR 0 5
74223: PUSH
74224: LD_VAR 0 2
74228: PPUSH
74229: CALL_OW 251
74233: ST_TO_ADDR
// if not building or not x or not y then
74234: LD_VAR 0 2
74238: NOT
74239: PUSH
74240: LD_VAR 0 4
74244: NOT
74245: OR
74246: PUSH
74247: LD_VAR 0 5
74251: NOT
74252: OR
74253: IFFALSE 74257
// exit ;
74255: GO 74349
// if GetTaskList ( unit ) then
74257: LD_VAR 0 1
74261: PPUSH
74262: CALL_OW 437
74266: IFFALSE 74349
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74268: LD_STRING e
74270: PUSH
74271: LD_VAR 0 1
74275: PPUSH
74276: CALL_OW 437
74280: PUSH
74281: LD_INT 1
74283: ARRAY
74284: PUSH
74285: LD_INT 1
74287: ARRAY
74288: EQUAL
74289: PUSH
74290: LD_VAR 0 4
74294: PUSH
74295: LD_VAR 0 1
74299: PPUSH
74300: CALL_OW 437
74304: PUSH
74305: LD_INT 1
74307: ARRAY
74308: PUSH
74309: LD_INT 2
74311: ARRAY
74312: EQUAL
74313: AND
74314: PUSH
74315: LD_VAR 0 5
74319: PUSH
74320: LD_VAR 0 1
74324: PPUSH
74325: CALL_OW 437
74329: PUSH
74330: LD_INT 1
74332: ARRAY
74333: PUSH
74334: LD_INT 3
74336: ARRAY
74337: EQUAL
74338: AND
74339: IFFALSE 74349
// result := true end ;
74341: LD_ADDR_VAR 0 3
74345: PUSH
74346: LD_INT 1
74348: ST_TO_ADDR
// end ;
74349: LD_VAR 0 3
74353: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74354: LD_INT 0
74356: PPUSH
// result := false ;
74357: LD_ADDR_VAR 0 4
74361: PUSH
74362: LD_INT 0
74364: ST_TO_ADDR
// if GetTaskList ( unit ) then
74365: LD_VAR 0 1
74369: PPUSH
74370: CALL_OW 437
74374: IFFALSE 74457
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74376: LD_STRING M
74378: PUSH
74379: LD_VAR 0 1
74383: PPUSH
74384: CALL_OW 437
74388: PUSH
74389: LD_INT 1
74391: ARRAY
74392: PUSH
74393: LD_INT 1
74395: ARRAY
74396: EQUAL
74397: PUSH
74398: LD_VAR 0 2
74402: PUSH
74403: LD_VAR 0 1
74407: PPUSH
74408: CALL_OW 437
74412: PUSH
74413: LD_INT 1
74415: ARRAY
74416: PUSH
74417: LD_INT 2
74419: ARRAY
74420: EQUAL
74421: AND
74422: PUSH
74423: LD_VAR 0 3
74427: PUSH
74428: LD_VAR 0 1
74432: PPUSH
74433: CALL_OW 437
74437: PUSH
74438: LD_INT 1
74440: ARRAY
74441: PUSH
74442: LD_INT 3
74444: ARRAY
74445: EQUAL
74446: AND
74447: IFFALSE 74457
// result := true ;
74449: LD_ADDR_VAR 0 4
74453: PUSH
74454: LD_INT 1
74456: ST_TO_ADDR
// end ; end ;
74457: LD_VAR 0 4
74461: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74462: LD_INT 0
74464: PPUSH
74465: PPUSH
74466: PPUSH
74467: PPUSH
// if not unit or not area then
74468: LD_VAR 0 1
74472: NOT
74473: PUSH
74474: LD_VAR 0 2
74478: NOT
74479: OR
74480: IFFALSE 74484
// exit ;
74482: GO 74648
// tmp := AreaToList ( area , i ) ;
74484: LD_ADDR_VAR 0 6
74488: PUSH
74489: LD_VAR 0 2
74493: PPUSH
74494: LD_VAR 0 5
74498: PPUSH
74499: CALL_OW 517
74503: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74504: LD_ADDR_VAR 0 5
74508: PUSH
74509: DOUBLE
74510: LD_INT 1
74512: DEC
74513: ST_TO_ADDR
74514: LD_VAR 0 6
74518: PUSH
74519: LD_INT 1
74521: ARRAY
74522: PUSH
74523: FOR_TO
74524: IFFALSE 74646
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74526: LD_ADDR_VAR 0 7
74530: PUSH
74531: LD_VAR 0 6
74535: PUSH
74536: LD_INT 1
74538: ARRAY
74539: PUSH
74540: LD_VAR 0 5
74544: ARRAY
74545: PUSH
74546: LD_VAR 0 6
74550: PUSH
74551: LD_INT 2
74553: ARRAY
74554: PUSH
74555: LD_VAR 0 5
74559: ARRAY
74560: PUSH
74561: EMPTY
74562: LIST
74563: LIST
74564: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74565: LD_VAR 0 7
74569: PUSH
74570: LD_INT 1
74572: ARRAY
74573: PPUSH
74574: LD_VAR 0 7
74578: PUSH
74579: LD_INT 2
74581: ARRAY
74582: PPUSH
74583: CALL_OW 428
74587: PUSH
74588: LD_INT 0
74590: EQUAL
74591: IFFALSE 74644
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74593: LD_VAR 0 1
74597: PPUSH
74598: LD_VAR 0 7
74602: PUSH
74603: LD_INT 1
74605: ARRAY
74606: PPUSH
74607: LD_VAR 0 7
74611: PUSH
74612: LD_INT 2
74614: ARRAY
74615: PPUSH
74616: LD_VAR 0 3
74620: PPUSH
74621: CALL_OW 48
// result := IsPlaced ( unit ) ;
74625: LD_ADDR_VAR 0 4
74629: PUSH
74630: LD_VAR 0 1
74634: PPUSH
74635: CALL_OW 305
74639: ST_TO_ADDR
// exit ;
74640: POP
74641: POP
74642: GO 74648
// end ; end ;
74644: GO 74523
74646: POP
74647: POP
// end ;
74648: LD_VAR 0 4
74652: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74653: LD_INT 0
74655: PPUSH
74656: PPUSH
74657: PPUSH
// if not side or side > 8 then
74658: LD_VAR 0 1
74662: NOT
74663: PUSH
74664: LD_VAR 0 1
74668: PUSH
74669: LD_INT 8
74671: GREATER
74672: OR
74673: IFFALSE 74677
// exit ;
74675: GO 74864
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74677: LD_ADDR_VAR 0 4
74681: PUSH
74682: LD_INT 22
74684: PUSH
74685: LD_VAR 0 1
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: PUSH
74694: LD_INT 21
74696: PUSH
74697: LD_INT 3
74699: PUSH
74700: EMPTY
74701: LIST
74702: LIST
74703: PUSH
74704: EMPTY
74705: LIST
74706: LIST
74707: PPUSH
74708: CALL_OW 69
74712: ST_TO_ADDR
// if not tmp then
74713: LD_VAR 0 4
74717: NOT
74718: IFFALSE 74722
// exit ;
74720: GO 74864
// enable_addtolog := true ;
74722: LD_ADDR_OWVAR 81
74726: PUSH
74727: LD_INT 1
74729: ST_TO_ADDR
// AddToLog ( [ ) ;
74730: LD_STRING [
74732: PPUSH
74733: CALL_OW 561
// for i in tmp do
74737: LD_ADDR_VAR 0 3
74741: PUSH
74742: LD_VAR 0 4
74746: PUSH
74747: FOR_IN
74748: IFFALSE 74855
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74750: LD_STRING [
74752: PUSH
74753: LD_VAR 0 3
74757: PPUSH
74758: CALL_OW 266
74762: STR
74763: PUSH
74764: LD_STRING , 
74766: STR
74767: PUSH
74768: LD_VAR 0 3
74772: PPUSH
74773: CALL_OW 250
74777: STR
74778: PUSH
74779: LD_STRING , 
74781: STR
74782: PUSH
74783: LD_VAR 0 3
74787: PPUSH
74788: CALL_OW 251
74792: STR
74793: PUSH
74794: LD_STRING , 
74796: STR
74797: PUSH
74798: LD_VAR 0 3
74802: PPUSH
74803: CALL_OW 254
74807: STR
74808: PUSH
74809: LD_STRING , 
74811: STR
74812: PUSH
74813: LD_VAR 0 3
74817: PPUSH
74818: LD_INT 1
74820: PPUSH
74821: CALL_OW 268
74825: STR
74826: PUSH
74827: LD_STRING , 
74829: STR
74830: PUSH
74831: LD_VAR 0 3
74835: PPUSH
74836: LD_INT 2
74838: PPUSH
74839: CALL_OW 268
74843: STR
74844: PUSH
74845: LD_STRING ],
74847: STR
74848: PPUSH
74849: CALL_OW 561
// end ;
74853: GO 74747
74855: POP
74856: POP
// AddToLog ( ]; ) ;
74857: LD_STRING ];
74859: PPUSH
74860: CALL_OW 561
// end ;
74864: LD_VAR 0 2
74868: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74869: LD_INT 0
74871: PPUSH
74872: PPUSH
74873: PPUSH
74874: PPUSH
74875: PPUSH
// if not area or not rate or not max then
74876: LD_VAR 0 1
74880: NOT
74881: PUSH
74882: LD_VAR 0 2
74886: NOT
74887: OR
74888: PUSH
74889: LD_VAR 0 4
74893: NOT
74894: OR
74895: IFFALSE 74899
// exit ;
74897: GO 75088
// while 1 do
74899: LD_INT 1
74901: IFFALSE 75088
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74903: LD_ADDR_VAR 0 9
74907: PUSH
74908: LD_VAR 0 1
74912: PPUSH
74913: LD_INT 1
74915: PPUSH
74916: CALL_OW 287
74920: PUSH
74921: LD_INT 10
74923: MUL
74924: ST_TO_ADDR
// r := rate / 10 ;
74925: LD_ADDR_VAR 0 7
74929: PUSH
74930: LD_VAR 0 2
74934: PUSH
74935: LD_INT 10
74937: DIVREAL
74938: ST_TO_ADDR
// time := 1 1$00 ;
74939: LD_ADDR_VAR 0 8
74943: PUSH
74944: LD_INT 2100
74946: ST_TO_ADDR
// if amount < min then
74947: LD_VAR 0 9
74951: PUSH
74952: LD_VAR 0 3
74956: LESS
74957: IFFALSE 74975
// r := r * 2 else
74959: LD_ADDR_VAR 0 7
74963: PUSH
74964: LD_VAR 0 7
74968: PUSH
74969: LD_INT 2
74971: MUL
74972: ST_TO_ADDR
74973: GO 75001
// if amount > max then
74975: LD_VAR 0 9
74979: PUSH
74980: LD_VAR 0 4
74984: GREATER
74985: IFFALSE 75001
// r := r / 2 ;
74987: LD_ADDR_VAR 0 7
74991: PUSH
74992: LD_VAR 0 7
74996: PUSH
74997: LD_INT 2
74999: DIVREAL
75000: ST_TO_ADDR
// time := time / r ;
75001: LD_ADDR_VAR 0 8
75005: PUSH
75006: LD_VAR 0 8
75010: PUSH
75011: LD_VAR 0 7
75015: DIVREAL
75016: ST_TO_ADDR
// if time < 0 then
75017: LD_VAR 0 8
75021: PUSH
75022: LD_INT 0
75024: LESS
75025: IFFALSE 75042
// time := time * - 1 ;
75027: LD_ADDR_VAR 0 8
75031: PUSH
75032: LD_VAR 0 8
75036: PUSH
75037: LD_INT 1
75039: NEG
75040: MUL
75041: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75042: LD_VAR 0 8
75046: PUSH
75047: LD_INT 35
75049: PPUSH
75050: LD_INT 875
75052: PPUSH
75053: CALL_OW 12
75057: PLUS
75058: PPUSH
75059: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75063: LD_INT 1
75065: PPUSH
75066: LD_INT 5
75068: PPUSH
75069: CALL_OW 12
75073: PPUSH
75074: LD_VAR 0 1
75078: PPUSH
75079: LD_INT 1
75081: PPUSH
75082: CALL_OW 55
// end ;
75086: GO 74899
// end ;
75088: LD_VAR 0 5
75092: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75093: LD_INT 0
75095: PPUSH
75096: PPUSH
75097: PPUSH
75098: PPUSH
75099: PPUSH
75100: PPUSH
75101: PPUSH
75102: PPUSH
// if not turrets or not factories then
75103: LD_VAR 0 1
75107: NOT
75108: PUSH
75109: LD_VAR 0 2
75113: NOT
75114: OR
75115: IFFALSE 75119
// exit ;
75117: GO 75426
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75119: LD_ADDR_VAR 0 10
75123: PUSH
75124: LD_INT 5
75126: PUSH
75127: LD_INT 6
75129: PUSH
75130: EMPTY
75131: LIST
75132: LIST
75133: PUSH
75134: LD_INT 2
75136: PUSH
75137: LD_INT 4
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: PUSH
75144: LD_INT 3
75146: PUSH
75147: LD_INT 5
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: PUSH
75154: EMPTY
75155: LIST
75156: LIST
75157: LIST
75158: PUSH
75159: LD_INT 24
75161: PUSH
75162: LD_INT 25
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: PUSH
75169: LD_INT 23
75171: PUSH
75172: LD_INT 27
75174: PUSH
75175: EMPTY
75176: LIST
75177: LIST
75178: PUSH
75179: EMPTY
75180: LIST
75181: LIST
75182: PUSH
75183: LD_INT 42
75185: PUSH
75186: LD_INT 43
75188: PUSH
75189: EMPTY
75190: LIST
75191: LIST
75192: PUSH
75193: LD_INT 44
75195: PUSH
75196: LD_INT 46
75198: PUSH
75199: EMPTY
75200: LIST
75201: LIST
75202: PUSH
75203: LD_INT 45
75205: PUSH
75206: LD_INT 47
75208: PUSH
75209: EMPTY
75210: LIST
75211: LIST
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: LIST
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: LIST
75222: ST_TO_ADDR
// result := [ ] ;
75223: LD_ADDR_VAR 0 3
75227: PUSH
75228: EMPTY
75229: ST_TO_ADDR
// for i in turrets do
75230: LD_ADDR_VAR 0 4
75234: PUSH
75235: LD_VAR 0 1
75239: PUSH
75240: FOR_IN
75241: IFFALSE 75424
// begin nat := GetNation ( i ) ;
75243: LD_ADDR_VAR 0 7
75247: PUSH
75248: LD_VAR 0 4
75252: PPUSH
75253: CALL_OW 248
75257: ST_TO_ADDR
// weapon := 0 ;
75258: LD_ADDR_VAR 0 8
75262: PUSH
75263: LD_INT 0
75265: ST_TO_ADDR
// if not nat then
75266: LD_VAR 0 7
75270: NOT
75271: IFFALSE 75275
// continue ;
75273: GO 75240
// for j in list [ nat ] do
75275: LD_ADDR_VAR 0 5
75279: PUSH
75280: LD_VAR 0 10
75284: PUSH
75285: LD_VAR 0 7
75289: ARRAY
75290: PUSH
75291: FOR_IN
75292: IFFALSE 75333
// if GetBWeapon ( i ) = j [ 1 ] then
75294: LD_VAR 0 4
75298: PPUSH
75299: CALL_OW 269
75303: PUSH
75304: LD_VAR 0 5
75308: PUSH
75309: LD_INT 1
75311: ARRAY
75312: EQUAL
75313: IFFALSE 75331
// begin weapon := j [ 2 ] ;
75315: LD_ADDR_VAR 0 8
75319: PUSH
75320: LD_VAR 0 5
75324: PUSH
75325: LD_INT 2
75327: ARRAY
75328: ST_TO_ADDR
// break ;
75329: GO 75333
// end ;
75331: GO 75291
75333: POP
75334: POP
// if not weapon then
75335: LD_VAR 0 8
75339: NOT
75340: IFFALSE 75344
// continue ;
75342: GO 75240
// for k in factories do
75344: LD_ADDR_VAR 0 6
75348: PUSH
75349: LD_VAR 0 2
75353: PUSH
75354: FOR_IN
75355: IFFALSE 75420
// begin weapons := AvailableWeaponList ( k ) ;
75357: LD_ADDR_VAR 0 9
75361: PUSH
75362: LD_VAR 0 6
75366: PPUSH
75367: CALL_OW 478
75371: ST_TO_ADDR
// if not weapons then
75372: LD_VAR 0 9
75376: NOT
75377: IFFALSE 75381
// continue ;
75379: GO 75354
// if weapon in weapons then
75381: LD_VAR 0 8
75385: PUSH
75386: LD_VAR 0 9
75390: IN
75391: IFFALSE 75418
// begin result := [ i , weapon ] ;
75393: LD_ADDR_VAR 0 3
75397: PUSH
75398: LD_VAR 0 4
75402: PUSH
75403: LD_VAR 0 8
75407: PUSH
75408: EMPTY
75409: LIST
75410: LIST
75411: ST_TO_ADDR
// exit ;
75412: POP
75413: POP
75414: POP
75415: POP
75416: GO 75426
// end ; end ;
75418: GO 75354
75420: POP
75421: POP
// end ;
75422: GO 75240
75424: POP
75425: POP
// end ;
75426: LD_VAR 0 3
75430: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75431: LD_INT 0
75433: PPUSH
// if not side or side > 8 then
75434: LD_VAR 0 3
75438: NOT
75439: PUSH
75440: LD_VAR 0 3
75444: PUSH
75445: LD_INT 8
75447: GREATER
75448: OR
75449: IFFALSE 75453
// exit ;
75451: GO 75512
// if not range then
75453: LD_VAR 0 4
75457: NOT
75458: IFFALSE 75469
// range := - 12 ;
75460: LD_ADDR_VAR 0 4
75464: PUSH
75465: LD_INT 12
75467: NEG
75468: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75469: LD_VAR 0 1
75473: PPUSH
75474: LD_VAR 0 2
75478: PPUSH
75479: LD_VAR 0 3
75483: PPUSH
75484: LD_VAR 0 4
75488: PPUSH
75489: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75493: LD_VAR 0 1
75497: PPUSH
75498: LD_VAR 0 2
75502: PPUSH
75503: LD_VAR 0 3
75507: PPUSH
75508: CALL_OW 331
// end ;
75512: LD_VAR 0 5
75516: RET
// export function Video ( mode ) ; begin
75517: LD_INT 0
75519: PPUSH
// ingame_video = mode ;
75520: LD_ADDR_OWVAR 52
75524: PUSH
75525: LD_VAR 0 1
75529: ST_TO_ADDR
// interface_hidden = mode ;
75530: LD_ADDR_OWVAR 54
75534: PUSH
75535: LD_VAR 0 1
75539: ST_TO_ADDR
// end ;
75540: LD_VAR 0 2
75544: RET
// export function Join ( array , element ) ; begin
75545: LD_INT 0
75547: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75548: LD_ADDR_VAR 0 3
75552: PUSH
75553: LD_VAR 0 1
75557: PPUSH
75558: LD_VAR 0 1
75562: PUSH
75563: LD_INT 1
75565: PLUS
75566: PPUSH
75567: LD_VAR 0 2
75571: PPUSH
75572: CALL_OW 1
75576: ST_TO_ADDR
// end ;
75577: LD_VAR 0 3
75581: RET
// export function JoinUnion ( array , element ) ; begin
75582: LD_INT 0
75584: PPUSH
// result := array union element ;
75585: LD_ADDR_VAR 0 3
75589: PUSH
75590: LD_VAR 0 1
75594: PUSH
75595: LD_VAR 0 2
75599: UNION
75600: ST_TO_ADDR
// end ;
75601: LD_VAR 0 3
75605: RET
// export function GetBehemoths ( side ) ; begin
75606: LD_INT 0
75608: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
75609: LD_ADDR_VAR 0 2
75613: PUSH
75614: LD_INT 22
75616: PUSH
75617: LD_VAR 0 1
75621: PUSH
75622: EMPTY
75623: LIST
75624: LIST
75625: PUSH
75626: LD_INT 31
75628: PUSH
75629: LD_INT 25
75631: PUSH
75632: EMPTY
75633: LIST
75634: LIST
75635: PUSH
75636: EMPTY
75637: LIST
75638: LIST
75639: PPUSH
75640: CALL_OW 69
75644: ST_TO_ADDR
// end ;
75645: LD_VAR 0 2
75649: RET
// export function Shuffle ( array ) ; var i , index ; begin
75650: LD_INT 0
75652: PPUSH
75653: PPUSH
75654: PPUSH
// result := [ ] ;
75655: LD_ADDR_VAR 0 2
75659: PUSH
75660: EMPTY
75661: ST_TO_ADDR
// if not array then
75662: LD_VAR 0 1
75666: NOT
75667: IFFALSE 75671
// exit ;
75669: GO 75770
// Randomize ;
75671: CALL_OW 10
// for i = array downto 1 do
75675: LD_ADDR_VAR 0 3
75679: PUSH
75680: DOUBLE
75681: LD_VAR 0 1
75685: INC
75686: ST_TO_ADDR
75687: LD_INT 1
75689: PUSH
75690: FOR_DOWNTO
75691: IFFALSE 75768
// begin index := rand ( 1 , array ) ;
75693: LD_ADDR_VAR 0 4
75697: PUSH
75698: LD_INT 1
75700: PPUSH
75701: LD_VAR 0 1
75705: PPUSH
75706: CALL_OW 12
75710: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75711: LD_ADDR_VAR 0 2
75715: PUSH
75716: LD_VAR 0 2
75720: PPUSH
75721: LD_VAR 0 2
75725: PUSH
75726: LD_INT 1
75728: PLUS
75729: PPUSH
75730: LD_VAR 0 1
75734: PUSH
75735: LD_VAR 0 4
75739: ARRAY
75740: PPUSH
75741: CALL_OW 2
75745: ST_TO_ADDR
// array := Delete ( array , index ) ;
75746: LD_ADDR_VAR 0 1
75750: PUSH
75751: LD_VAR 0 1
75755: PPUSH
75756: LD_VAR 0 4
75760: PPUSH
75761: CALL_OW 3
75765: ST_TO_ADDR
// end ;
75766: GO 75690
75768: POP
75769: POP
// end ;
75770: LD_VAR 0 2
75774: RET
// export function GetBaseMaterials ( base ) ; begin
75775: LD_INT 0
75777: PPUSH
// result := [ 0 , 0 , 0 ] ;
75778: LD_ADDR_VAR 0 2
75782: PUSH
75783: LD_INT 0
75785: PUSH
75786: LD_INT 0
75788: PUSH
75789: LD_INT 0
75791: PUSH
75792: EMPTY
75793: LIST
75794: LIST
75795: LIST
75796: ST_TO_ADDR
// if not base then
75797: LD_VAR 0 1
75801: NOT
75802: IFFALSE 75806
// exit ;
75804: GO 75855
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75806: LD_ADDR_VAR 0 2
75810: PUSH
75811: LD_VAR 0 1
75815: PPUSH
75816: LD_INT 1
75818: PPUSH
75819: CALL_OW 275
75823: PUSH
75824: LD_VAR 0 1
75828: PPUSH
75829: LD_INT 2
75831: PPUSH
75832: CALL_OW 275
75836: PUSH
75837: LD_VAR 0 1
75841: PPUSH
75842: LD_INT 3
75844: PPUSH
75845: CALL_OW 275
75849: PUSH
75850: EMPTY
75851: LIST
75852: LIST
75853: LIST
75854: ST_TO_ADDR
// end ;
75855: LD_VAR 0 2
75859: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75860: LD_INT 0
75862: PPUSH
75863: PPUSH
// result := array ;
75864: LD_ADDR_VAR 0 3
75868: PUSH
75869: LD_VAR 0 1
75873: ST_TO_ADDR
// if size > 0 then
75874: LD_VAR 0 2
75878: PUSH
75879: LD_INT 0
75881: GREATER
75882: IFFALSE 75928
// for i := array downto size do
75884: LD_ADDR_VAR 0 4
75888: PUSH
75889: DOUBLE
75890: LD_VAR 0 1
75894: INC
75895: ST_TO_ADDR
75896: LD_VAR 0 2
75900: PUSH
75901: FOR_DOWNTO
75902: IFFALSE 75926
// result := Delete ( result , result ) ;
75904: LD_ADDR_VAR 0 3
75908: PUSH
75909: LD_VAR 0 3
75913: PPUSH
75914: LD_VAR 0 3
75918: PPUSH
75919: CALL_OW 3
75923: ST_TO_ADDR
75924: GO 75901
75926: POP
75927: POP
// end ;
75928: LD_VAR 0 3
75932: RET
// export function ComExit ( unit ) ; var tmp ; begin
75933: LD_INT 0
75935: PPUSH
75936: PPUSH
// if not IsInUnit ( unit ) then
75937: LD_VAR 0 1
75941: PPUSH
75942: CALL_OW 310
75946: NOT
75947: IFFALSE 75951
// exit ;
75949: GO 76011
// tmp := IsInUnit ( unit ) ;
75951: LD_ADDR_VAR 0 3
75955: PUSH
75956: LD_VAR 0 1
75960: PPUSH
75961: CALL_OW 310
75965: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75966: LD_VAR 0 3
75970: PPUSH
75971: CALL_OW 247
75975: PUSH
75976: LD_INT 2
75978: EQUAL
75979: IFFALSE 75992
// ComExitVehicle ( unit ) else
75981: LD_VAR 0 1
75985: PPUSH
75986: CALL_OW 121
75990: GO 76001
// ComExitBuilding ( unit ) ;
75992: LD_VAR 0 1
75996: PPUSH
75997: CALL_OW 122
// result := tmp ;
76001: LD_ADDR_VAR 0 2
76005: PUSH
76006: LD_VAR 0 3
76010: ST_TO_ADDR
// end ;
76011: LD_VAR 0 2
76015: RET
// export function ComExitAll ( units ) ; var i ; begin
76016: LD_INT 0
76018: PPUSH
76019: PPUSH
// if not units then
76020: LD_VAR 0 1
76024: NOT
76025: IFFALSE 76029
// exit ;
76027: GO 76055
// for i in units do
76029: LD_ADDR_VAR 0 3
76033: PUSH
76034: LD_VAR 0 1
76038: PUSH
76039: FOR_IN
76040: IFFALSE 76053
// ComExit ( i ) ;
76042: LD_VAR 0 3
76046: PPUSH
76047: CALL 75933 0 1
76051: GO 76039
76053: POP
76054: POP
// end ;
76055: LD_VAR 0 2
76059: RET
// export function ResetHc ; begin
76060: LD_INT 0
76062: PPUSH
// InitHc ;
76063: CALL_OW 19
// hc_importance := 0 ;
76067: LD_ADDR_OWVAR 32
76071: PUSH
76072: LD_INT 0
76074: ST_TO_ADDR
// end ;
76075: LD_VAR 0 1
76079: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76080: LD_INT 0
76082: PPUSH
76083: PPUSH
76084: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76085: LD_ADDR_VAR 0 6
76089: PUSH
76090: LD_VAR 0 1
76094: PUSH
76095: LD_VAR 0 3
76099: PLUS
76100: PUSH
76101: LD_INT 2
76103: DIV
76104: ST_TO_ADDR
// if _x < 0 then
76105: LD_VAR 0 6
76109: PUSH
76110: LD_INT 0
76112: LESS
76113: IFFALSE 76130
// _x := _x * - 1 ;
76115: LD_ADDR_VAR 0 6
76119: PUSH
76120: LD_VAR 0 6
76124: PUSH
76125: LD_INT 1
76127: NEG
76128: MUL
76129: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76130: LD_ADDR_VAR 0 7
76134: PUSH
76135: LD_VAR 0 2
76139: PUSH
76140: LD_VAR 0 4
76144: PLUS
76145: PUSH
76146: LD_INT 2
76148: DIV
76149: ST_TO_ADDR
// if _y < 0 then
76150: LD_VAR 0 7
76154: PUSH
76155: LD_INT 0
76157: LESS
76158: IFFALSE 76175
// _y := _y * - 1 ;
76160: LD_ADDR_VAR 0 7
76164: PUSH
76165: LD_VAR 0 7
76169: PUSH
76170: LD_INT 1
76172: NEG
76173: MUL
76174: ST_TO_ADDR
// result := [ _x , _y ] ;
76175: LD_ADDR_VAR 0 5
76179: PUSH
76180: LD_VAR 0 6
76184: PUSH
76185: LD_VAR 0 7
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: ST_TO_ADDR
// end ;
76194: LD_VAR 0 5
76198: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76199: LD_INT 0
76201: PPUSH
76202: PPUSH
76203: PPUSH
76204: PPUSH
// task := GetTaskList ( unit ) ;
76205: LD_ADDR_VAR 0 7
76209: PUSH
76210: LD_VAR 0 1
76214: PPUSH
76215: CALL_OW 437
76219: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76220: LD_VAR 0 7
76224: NOT
76225: PUSH
76226: LD_VAR 0 1
76230: PPUSH
76231: LD_VAR 0 2
76235: PPUSH
76236: CALL_OW 308
76240: NOT
76241: AND
76242: IFFALSE 76246
// exit ;
76244: GO 76364
// if IsInArea ( unit , area ) then
76246: LD_VAR 0 1
76250: PPUSH
76251: LD_VAR 0 2
76255: PPUSH
76256: CALL_OW 308
76260: IFFALSE 76278
// begin ComMoveToArea ( unit , goAway ) ;
76262: LD_VAR 0 1
76266: PPUSH
76267: LD_VAR 0 3
76271: PPUSH
76272: CALL_OW 113
// exit ;
76276: GO 76364
// end ; if task [ 1 ] [ 1 ] <> M then
76278: LD_VAR 0 7
76282: PUSH
76283: LD_INT 1
76285: ARRAY
76286: PUSH
76287: LD_INT 1
76289: ARRAY
76290: PUSH
76291: LD_STRING M
76293: NONEQUAL
76294: IFFALSE 76298
// exit ;
76296: GO 76364
// x := task [ 1 ] [ 2 ] ;
76298: LD_ADDR_VAR 0 5
76302: PUSH
76303: LD_VAR 0 7
76307: PUSH
76308: LD_INT 1
76310: ARRAY
76311: PUSH
76312: LD_INT 2
76314: ARRAY
76315: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76316: LD_ADDR_VAR 0 6
76320: PUSH
76321: LD_VAR 0 7
76325: PUSH
76326: LD_INT 1
76328: ARRAY
76329: PUSH
76330: LD_INT 3
76332: ARRAY
76333: ST_TO_ADDR
// if InArea ( x , y , area ) then
76334: LD_VAR 0 5
76338: PPUSH
76339: LD_VAR 0 6
76343: PPUSH
76344: LD_VAR 0 2
76348: PPUSH
76349: CALL_OW 309
76353: IFFALSE 76364
// ComStop ( unit ) ;
76355: LD_VAR 0 1
76359: PPUSH
76360: CALL_OW 141
// end ;
76364: LD_VAR 0 4
76368: RET
// export function Abs ( value ) ; begin
76369: LD_INT 0
76371: PPUSH
// result := value ;
76372: LD_ADDR_VAR 0 2
76376: PUSH
76377: LD_VAR 0 1
76381: ST_TO_ADDR
// if value < 0 then
76382: LD_VAR 0 1
76386: PUSH
76387: LD_INT 0
76389: LESS
76390: IFFALSE 76407
// result := value * - 1 ;
76392: LD_ADDR_VAR 0 2
76396: PUSH
76397: LD_VAR 0 1
76401: PUSH
76402: LD_INT 1
76404: NEG
76405: MUL
76406: ST_TO_ADDR
// end ;
76407: LD_VAR 0 2
76411: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76412: LD_INT 0
76414: PPUSH
76415: PPUSH
76416: PPUSH
76417: PPUSH
76418: PPUSH
76419: PPUSH
76420: PPUSH
76421: PPUSH
// if not unit or not building then
76422: LD_VAR 0 1
76426: NOT
76427: PUSH
76428: LD_VAR 0 2
76432: NOT
76433: OR
76434: IFFALSE 76438
// exit ;
76436: GO 76664
// x := GetX ( building ) ;
76438: LD_ADDR_VAR 0 4
76442: PUSH
76443: LD_VAR 0 2
76447: PPUSH
76448: CALL_OW 250
76452: ST_TO_ADDR
// y := GetY ( building ) ;
76453: LD_ADDR_VAR 0 6
76457: PUSH
76458: LD_VAR 0 2
76462: PPUSH
76463: CALL_OW 251
76467: ST_TO_ADDR
// d := GetDir ( building ) ;
76468: LD_ADDR_VAR 0 8
76472: PUSH
76473: LD_VAR 0 2
76477: PPUSH
76478: CALL_OW 254
76482: ST_TO_ADDR
// r := 4 ;
76483: LD_ADDR_VAR 0 9
76487: PUSH
76488: LD_INT 4
76490: ST_TO_ADDR
// for i := 1 to 5 do
76491: LD_ADDR_VAR 0 10
76495: PUSH
76496: DOUBLE
76497: LD_INT 1
76499: DEC
76500: ST_TO_ADDR
76501: LD_INT 5
76503: PUSH
76504: FOR_TO
76505: IFFALSE 76662
// begin _x := ShiftX ( x , d , r + i ) ;
76507: LD_ADDR_VAR 0 5
76511: PUSH
76512: LD_VAR 0 4
76516: PPUSH
76517: LD_VAR 0 8
76521: PPUSH
76522: LD_VAR 0 9
76526: PUSH
76527: LD_VAR 0 10
76531: PLUS
76532: PPUSH
76533: CALL_OW 272
76537: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76538: LD_ADDR_VAR 0 7
76542: PUSH
76543: LD_VAR 0 6
76547: PPUSH
76548: LD_VAR 0 8
76552: PPUSH
76553: LD_VAR 0 9
76557: PUSH
76558: LD_VAR 0 10
76562: PLUS
76563: PPUSH
76564: CALL_OW 273
76568: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76569: LD_VAR 0 5
76573: PPUSH
76574: LD_VAR 0 7
76578: PPUSH
76579: CALL_OW 488
76583: PUSH
76584: LD_VAR 0 5
76588: PPUSH
76589: LD_VAR 0 7
76593: PPUSH
76594: CALL_OW 428
76598: PPUSH
76599: CALL_OW 247
76603: PUSH
76604: LD_INT 3
76606: PUSH
76607: LD_INT 2
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: IN
76614: NOT
76615: AND
76616: IFFALSE 76660
// begin ComMoveXY ( unit , _x , _y ) ;
76618: LD_VAR 0 1
76622: PPUSH
76623: LD_VAR 0 5
76627: PPUSH
76628: LD_VAR 0 7
76632: PPUSH
76633: CALL_OW 111
// result := [ _x , _y ] ;
76637: LD_ADDR_VAR 0 3
76641: PUSH
76642: LD_VAR 0 5
76646: PUSH
76647: LD_VAR 0 7
76651: PUSH
76652: EMPTY
76653: LIST
76654: LIST
76655: ST_TO_ADDR
// exit ;
76656: POP
76657: POP
76658: GO 76664
// end ; end ;
76660: GO 76504
76662: POP
76663: POP
// end ;
76664: LD_VAR 0 3
76668: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76669: LD_INT 0
76671: PPUSH
76672: PPUSH
76673: PPUSH
// result := 0 ;
76674: LD_ADDR_VAR 0 3
76678: PUSH
76679: LD_INT 0
76681: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76682: LD_VAR 0 1
76686: PUSH
76687: LD_INT 0
76689: LESS
76690: PUSH
76691: LD_VAR 0 1
76695: PUSH
76696: LD_INT 8
76698: GREATER
76699: OR
76700: PUSH
76701: LD_VAR 0 2
76705: PUSH
76706: LD_INT 0
76708: LESS
76709: OR
76710: PUSH
76711: LD_VAR 0 2
76715: PUSH
76716: LD_INT 8
76718: GREATER
76719: OR
76720: IFFALSE 76724
// exit ;
76722: GO 76799
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76724: LD_ADDR_VAR 0 4
76728: PUSH
76729: LD_INT 22
76731: PUSH
76732: LD_VAR 0 2
76736: PUSH
76737: EMPTY
76738: LIST
76739: LIST
76740: PPUSH
76741: CALL_OW 69
76745: PUSH
76746: FOR_IN
76747: IFFALSE 76797
// begin un := UnitShoot ( i ) ;
76749: LD_ADDR_VAR 0 5
76753: PUSH
76754: LD_VAR 0 4
76758: PPUSH
76759: CALL_OW 504
76763: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76764: LD_VAR 0 5
76768: PPUSH
76769: CALL_OW 255
76773: PUSH
76774: LD_VAR 0 1
76778: EQUAL
76779: IFFALSE 76795
// begin result := un ;
76781: LD_ADDR_VAR 0 3
76785: PUSH
76786: LD_VAR 0 5
76790: ST_TO_ADDR
// exit ;
76791: POP
76792: POP
76793: GO 76799
// end ; end ;
76795: GO 76746
76797: POP
76798: POP
// end ;
76799: LD_VAR 0 3
76803: RET
// export function GetCargoBay ( units ) ; begin
76804: LD_INT 0
76806: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76807: LD_ADDR_VAR 0 2
76811: PUSH
76812: LD_VAR 0 1
76816: PPUSH
76817: LD_INT 2
76819: PUSH
76820: LD_INT 34
76822: PUSH
76823: LD_INT 12
76825: PUSH
76826: EMPTY
76827: LIST
76828: LIST
76829: PUSH
76830: LD_INT 34
76832: PUSH
76833: LD_INT 51
76835: PUSH
76836: EMPTY
76837: LIST
76838: LIST
76839: PUSH
76840: LD_INT 34
76842: PUSH
76843: LD_INT 32
76845: PUSH
76846: EMPTY
76847: LIST
76848: LIST
76849: PUSH
76850: LD_INT 34
76852: PUSH
76853: LD_EXP 51
76857: PUSH
76858: EMPTY
76859: LIST
76860: LIST
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: LIST
76866: LIST
76867: LIST
76868: PPUSH
76869: CALL_OW 72
76873: ST_TO_ADDR
// end ;
76874: LD_VAR 0 2
76878: RET
// export function Negate ( value ) ; begin
76879: LD_INT 0
76881: PPUSH
// result := not value ;
76882: LD_ADDR_VAR 0 2
76886: PUSH
76887: LD_VAR 0 1
76891: NOT
76892: ST_TO_ADDR
// end ;
76893: LD_VAR 0 2
76897: RET
// export function Inc ( value ) ; begin
76898: LD_INT 0
76900: PPUSH
// result := value + 1 ;
76901: LD_ADDR_VAR 0 2
76905: PUSH
76906: LD_VAR 0 1
76910: PUSH
76911: LD_INT 1
76913: PLUS
76914: ST_TO_ADDR
// end ;
76915: LD_VAR 0 2
76919: RET
// export function Dec ( value ) ; begin
76920: LD_INT 0
76922: PPUSH
// result := value - 1 ;
76923: LD_ADDR_VAR 0 2
76927: PUSH
76928: LD_VAR 0 1
76932: PUSH
76933: LD_INT 1
76935: MINUS
76936: ST_TO_ADDR
// end ;
76937: LD_VAR 0 2
76941: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76942: LD_INT 0
76944: PPUSH
76945: PPUSH
76946: PPUSH
76947: PPUSH
76948: PPUSH
76949: PPUSH
76950: PPUSH
76951: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76952: LD_VAR 0 1
76956: PPUSH
76957: LD_VAR 0 2
76961: PPUSH
76962: CALL_OW 488
76966: NOT
76967: PUSH
76968: LD_VAR 0 3
76972: PPUSH
76973: LD_VAR 0 4
76977: PPUSH
76978: CALL_OW 488
76982: NOT
76983: OR
76984: IFFALSE 76997
// begin result := - 1 ;
76986: LD_ADDR_VAR 0 5
76990: PUSH
76991: LD_INT 1
76993: NEG
76994: ST_TO_ADDR
// exit ;
76995: GO 77232
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76997: LD_ADDR_VAR 0 12
77001: PUSH
77002: LD_VAR 0 1
77006: PPUSH
77007: LD_VAR 0 2
77011: PPUSH
77012: LD_VAR 0 3
77016: PPUSH
77017: LD_VAR 0 4
77021: PPUSH
77022: CALL 76080 0 4
77026: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77027: LD_ADDR_VAR 0 11
77031: PUSH
77032: LD_VAR 0 1
77036: PPUSH
77037: LD_VAR 0 2
77041: PPUSH
77042: LD_VAR 0 12
77046: PUSH
77047: LD_INT 1
77049: ARRAY
77050: PPUSH
77051: LD_VAR 0 12
77055: PUSH
77056: LD_INT 2
77058: ARRAY
77059: PPUSH
77060: CALL_OW 298
77064: ST_TO_ADDR
// distance := 9999 ;
77065: LD_ADDR_VAR 0 10
77069: PUSH
77070: LD_INT 9999
77072: ST_TO_ADDR
// for i := 0 to 5 do
77073: LD_ADDR_VAR 0 6
77077: PUSH
77078: DOUBLE
77079: LD_INT 0
77081: DEC
77082: ST_TO_ADDR
77083: LD_INT 5
77085: PUSH
77086: FOR_TO
77087: IFFALSE 77230
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77089: LD_ADDR_VAR 0 7
77093: PUSH
77094: LD_VAR 0 1
77098: PPUSH
77099: LD_VAR 0 6
77103: PPUSH
77104: LD_VAR 0 11
77108: PPUSH
77109: CALL_OW 272
77113: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77114: LD_ADDR_VAR 0 8
77118: PUSH
77119: LD_VAR 0 2
77123: PPUSH
77124: LD_VAR 0 6
77128: PPUSH
77129: LD_VAR 0 11
77133: PPUSH
77134: CALL_OW 273
77138: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77139: LD_VAR 0 7
77143: PPUSH
77144: LD_VAR 0 8
77148: PPUSH
77149: CALL_OW 488
77153: NOT
77154: IFFALSE 77158
// continue ;
77156: GO 77086
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77158: LD_ADDR_VAR 0 9
77162: PUSH
77163: LD_VAR 0 12
77167: PUSH
77168: LD_INT 1
77170: ARRAY
77171: PPUSH
77172: LD_VAR 0 12
77176: PUSH
77177: LD_INT 2
77179: ARRAY
77180: PPUSH
77181: LD_VAR 0 7
77185: PPUSH
77186: LD_VAR 0 8
77190: PPUSH
77191: CALL_OW 298
77195: ST_TO_ADDR
// if tmp < distance then
77196: LD_VAR 0 9
77200: PUSH
77201: LD_VAR 0 10
77205: LESS
77206: IFFALSE 77228
// begin result := i ;
77208: LD_ADDR_VAR 0 5
77212: PUSH
77213: LD_VAR 0 6
77217: ST_TO_ADDR
// distance := tmp ;
77218: LD_ADDR_VAR 0 10
77222: PUSH
77223: LD_VAR 0 9
77227: ST_TO_ADDR
// end ; end ;
77228: GO 77086
77230: POP
77231: POP
// end ;
77232: LD_VAR 0 5
77236: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77237: LD_INT 0
77239: PPUSH
77240: PPUSH
// if not driver or not IsInUnit ( driver ) then
77241: LD_VAR 0 1
77245: NOT
77246: PUSH
77247: LD_VAR 0 1
77251: PPUSH
77252: CALL_OW 310
77256: NOT
77257: OR
77258: IFFALSE 77262
// exit ;
77260: GO 77352
// vehicle := IsInUnit ( driver ) ;
77262: LD_ADDR_VAR 0 3
77266: PUSH
77267: LD_VAR 0 1
77271: PPUSH
77272: CALL_OW 310
77276: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77277: LD_VAR 0 1
77281: PPUSH
77282: LD_STRING \
77284: PUSH
77285: LD_INT 0
77287: PUSH
77288: LD_INT 0
77290: PUSH
77291: LD_INT 0
77293: PUSH
77294: LD_INT 0
77296: PUSH
77297: LD_INT 0
77299: PUSH
77300: LD_INT 0
77302: PUSH
77303: EMPTY
77304: LIST
77305: LIST
77306: LIST
77307: LIST
77308: LIST
77309: LIST
77310: LIST
77311: PUSH
77312: LD_STRING E
77314: PUSH
77315: LD_INT 0
77317: PUSH
77318: LD_INT 0
77320: PUSH
77321: LD_VAR 0 3
77325: PUSH
77326: LD_INT 0
77328: PUSH
77329: LD_INT 0
77331: PUSH
77332: LD_INT 0
77334: PUSH
77335: EMPTY
77336: LIST
77337: LIST
77338: LIST
77339: LIST
77340: LIST
77341: LIST
77342: LIST
77343: PUSH
77344: EMPTY
77345: LIST
77346: LIST
77347: PPUSH
77348: CALL_OW 446
// end ;
77352: LD_VAR 0 2
77356: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77357: LD_INT 0
77359: PPUSH
77360: PPUSH
// if not driver or not IsInUnit ( driver ) then
77361: LD_VAR 0 1
77365: NOT
77366: PUSH
77367: LD_VAR 0 1
77371: PPUSH
77372: CALL_OW 310
77376: NOT
77377: OR
77378: IFFALSE 77382
// exit ;
77380: GO 77472
// vehicle := IsInUnit ( driver ) ;
77382: LD_ADDR_VAR 0 3
77386: PUSH
77387: LD_VAR 0 1
77391: PPUSH
77392: CALL_OW 310
77396: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77397: LD_VAR 0 1
77401: PPUSH
77402: LD_STRING \
77404: PUSH
77405: LD_INT 0
77407: PUSH
77408: LD_INT 0
77410: PUSH
77411: LD_INT 0
77413: PUSH
77414: LD_INT 0
77416: PUSH
77417: LD_INT 0
77419: PUSH
77420: LD_INT 0
77422: PUSH
77423: EMPTY
77424: LIST
77425: LIST
77426: LIST
77427: LIST
77428: LIST
77429: LIST
77430: LIST
77431: PUSH
77432: LD_STRING E
77434: PUSH
77435: LD_INT 0
77437: PUSH
77438: LD_INT 0
77440: PUSH
77441: LD_VAR 0 3
77445: PUSH
77446: LD_INT 0
77448: PUSH
77449: LD_INT 0
77451: PUSH
77452: LD_INT 0
77454: PUSH
77455: EMPTY
77456: LIST
77457: LIST
77458: LIST
77459: LIST
77460: LIST
77461: LIST
77462: LIST
77463: PUSH
77464: EMPTY
77465: LIST
77466: LIST
77467: PPUSH
77468: CALL_OW 447
// end ;
77472: LD_VAR 0 2
77476: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77477: LD_INT 0
77479: PPUSH
77480: PPUSH
77481: PPUSH
// tmp := [ ] ;
77482: LD_ADDR_VAR 0 5
77486: PUSH
77487: EMPTY
77488: ST_TO_ADDR
// for i in units do
77489: LD_ADDR_VAR 0 4
77493: PUSH
77494: LD_VAR 0 1
77498: PUSH
77499: FOR_IN
77500: IFFALSE 77538
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77502: LD_ADDR_VAR 0 5
77506: PUSH
77507: LD_VAR 0 5
77511: PPUSH
77512: LD_VAR 0 5
77516: PUSH
77517: LD_INT 1
77519: PLUS
77520: PPUSH
77521: LD_VAR 0 4
77525: PPUSH
77526: CALL_OW 256
77530: PPUSH
77531: CALL_OW 2
77535: ST_TO_ADDR
77536: GO 77499
77538: POP
77539: POP
// if not tmp then
77540: LD_VAR 0 5
77544: NOT
77545: IFFALSE 77549
// exit ;
77547: GO 77597
// if asc then
77549: LD_VAR 0 2
77553: IFFALSE 77577
// result := SortListByListAsc ( units , tmp ) else
77555: LD_ADDR_VAR 0 3
77559: PUSH
77560: LD_VAR 0 1
77564: PPUSH
77565: LD_VAR 0 5
77569: PPUSH
77570: CALL_OW 76
77574: ST_TO_ADDR
77575: GO 77597
// result := SortListByListDesc ( units , tmp ) ;
77577: LD_ADDR_VAR 0 3
77581: PUSH
77582: LD_VAR 0 1
77586: PPUSH
77587: LD_VAR 0 5
77591: PPUSH
77592: CALL_OW 77
77596: ST_TO_ADDR
// end ;
77597: LD_VAR 0 3
77601: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77602: LD_INT 0
77604: PPUSH
77605: PPUSH
// task := GetTaskList ( mech ) ;
77606: LD_ADDR_VAR 0 4
77610: PUSH
77611: LD_VAR 0 1
77615: PPUSH
77616: CALL_OW 437
77620: ST_TO_ADDR
// if not task then
77621: LD_VAR 0 4
77625: NOT
77626: IFFALSE 77630
// exit ;
77628: GO 77672
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77630: LD_ADDR_VAR 0 3
77634: PUSH
77635: LD_VAR 0 4
77639: PUSH
77640: LD_INT 1
77642: ARRAY
77643: PUSH
77644: LD_INT 1
77646: ARRAY
77647: PUSH
77648: LD_STRING r
77650: EQUAL
77651: PUSH
77652: LD_VAR 0 4
77656: PUSH
77657: LD_INT 1
77659: ARRAY
77660: PUSH
77661: LD_INT 4
77663: ARRAY
77664: PUSH
77665: LD_VAR 0 2
77669: EQUAL
77670: AND
77671: ST_TO_ADDR
// end ;
77672: LD_VAR 0 3
77676: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77677: LD_INT 0
77679: PPUSH
// SetDir ( unit , d ) ;
77680: LD_VAR 0 1
77684: PPUSH
77685: LD_VAR 0 4
77689: PPUSH
77690: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77694: LD_VAR 0 1
77698: PPUSH
77699: LD_VAR 0 2
77703: PPUSH
77704: LD_VAR 0 3
77708: PPUSH
77709: LD_VAR 0 5
77713: PPUSH
77714: CALL_OW 48
// end ;
77718: LD_VAR 0 6
77722: RET
// export function ToNaturalNumber ( number ) ; begin
77723: LD_INT 0
77725: PPUSH
// result := number div 1 ;
77726: LD_ADDR_VAR 0 2
77730: PUSH
77731: LD_VAR 0 1
77735: PUSH
77736: LD_INT 1
77738: DIV
77739: ST_TO_ADDR
// if number < 0 then
77740: LD_VAR 0 1
77744: PUSH
77745: LD_INT 0
77747: LESS
77748: IFFALSE 77758
// result := 0 ;
77750: LD_ADDR_VAR 0 2
77754: PUSH
77755: LD_INT 0
77757: ST_TO_ADDR
// end ;
77758: LD_VAR 0 2
77762: RET
// export function SortByClass ( units , class ) ; var un ; begin
77763: LD_INT 0
77765: PPUSH
77766: PPUSH
// if not units or not class then
77767: LD_VAR 0 1
77771: NOT
77772: PUSH
77773: LD_VAR 0 2
77777: NOT
77778: OR
77779: IFFALSE 77783
// exit ;
77781: GO 77878
// result := [ ] ;
77783: LD_ADDR_VAR 0 3
77787: PUSH
77788: EMPTY
77789: ST_TO_ADDR
// for un in units do
77790: LD_ADDR_VAR 0 4
77794: PUSH
77795: LD_VAR 0 1
77799: PUSH
77800: FOR_IN
77801: IFFALSE 77876
// if GetClass ( un ) = class then
77803: LD_VAR 0 4
77807: PPUSH
77808: CALL_OW 257
77812: PUSH
77813: LD_VAR 0 2
77817: EQUAL
77818: IFFALSE 77845
// result := Insert ( result , 1 , un ) else
77820: LD_ADDR_VAR 0 3
77824: PUSH
77825: LD_VAR 0 3
77829: PPUSH
77830: LD_INT 1
77832: PPUSH
77833: LD_VAR 0 4
77837: PPUSH
77838: CALL_OW 2
77842: ST_TO_ADDR
77843: GO 77874
// result := Replace ( result , result + 1 , un ) ;
77845: LD_ADDR_VAR 0 3
77849: PUSH
77850: LD_VAR 0 3
77854: PPUSH
77855: LD_VAR 0 3
77859: PUSH
77860: LD_INT 1
77862: PLUS
77863: PPUSH
77864: LD_VAR 0 4
77868: PPUSH
77869: CALL_OW 1
77873: ST_TO_ADDR
77874: GO 77800
77876: POP
77877: POP
// end ;
77878: LD_VAR 0 3
77882: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77883: LD_INT 0
77885: PPUSH
77886: PPUSH
77887: PPUSH
77888: PPUSH
77889: PPUSH
77890: PPUSH
77891: PPUSH
// result := [ ] ;
77892: LD_ADDR_VAR 0 4
77896: PUSH
77897: EMPTY
77898: ST_TO_ADDR
// if x - r < 0 then
77899: LD_VAR 0 1
77903: PUSH
77904: LD_VAR 0 3
77908: MINUS
77909: PUSH
77910: LD_INT 0
77912: LESS
77913: IFFALSE 77925
// min_x := 0 else
77915: LD_ADDR_VAR 0 8
77919: PUSH
77920: LD_INT 0
77922: ST_TO_ADDR
77923: GO 77941
// min_x := x - r ;
77925: LD_ADDR_VAR 0 8
77929: PUSH
77930: LD_VAR 0 1
77934: PUSH
77935: LD_VAR 0 3
77939: MINUS
77940: ST_TO_ADDR
// if y - r < 0 then
77941: LD_VAR 0 2
77945: PUSH
77946: LD_VAR 0 3
77950: MINUS
77951: PUSH
77952: LD_INT 0
77954: LESS
77955: IFFALSE 77967
// min_y := 0 else
77957: LD_ADDR_VAR 0 7
77961: PUSH
77962: LD_INT 0
77964: ST_TO_ADDR
77965: GO 77983
// min_y := y - r ;
77967: LD_ADDR_VAR 0 7
77971: PUSH
77972: LD_VAR 0 2
77976: PUSH
77977: LD_VAR 0 3
77981: MINUS
77982: ST_TO_ADDR
// max_x := x + r ;
77983: LD_ADDR_VAR 0 9
77987: PUSH
77988: LD_VAR 0 1
77992: PUSH
77993: LD_VAR 0 3
77997: PLUS
77998: ST_TO_ADDR
// max_y := y + r ;
77999: LD_ADDR_VAR 0 10
78003: PUSH
78004: LD_VAR 0 2
78008: PUSH
78009: LD_VAR 0 3
78013: PLUS
78014: ST_TO_ADDR
// for _x = min_x to max_x do
78015: LD_ADDR_VAR 0 5
78019: PUSH
78020: DOUBLE
78021: LD_VAR 0 8
78025: DEC
78026: ST_TO_ADDR
78027: LD_VAR 0 9
78031: PUSH
78032: FOR_TO
78033: IFFALSE 78134
// for _y = min_y to max_y do
78035: LD_ADDR_VAR 0 6
78039: PUSH
78040: DOUBLE
78041: LD_VAR 0 7
78045: DEC
78046: ST_TO_ADDR
78047: LD_VAR 0 10
78051: PUSH
78052: FOR_TO
78053: IFFALSE 78130
// begin if not ValidHex ( _x , _y ) then
78055: LD_VAR 0 5
78059: PPUSH
78060: LD_VAR 0 6
78064: PPUSH
78065: CALL_OW 488
78069: NOT
78070: IFFALSE 78074
// continue ;
78072: GO 78052
// if GetResourceTypeXY ( _x , _y ) then
78074: LD_VAR 0 5
78078: PPUSH
78079: LD_VAR 0 6
78083: PPUSH
78084: CALL_OW 283
78088: IFFALSE 78128
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78090: LD_ADDR_VAR 0 4
78094: PUSH
78095: LD_VAR 0 4
78099: PPUSH
78100: LD_VAR 0 4
78104: PUSH
78105: LD_INT 1
78107: PLUS
78108: PPUSH
78109: LD_VAR 0 5
78113: PUSH
78114: LD_VAR 0 6
78118: PUSH
78119: EMPTY
78120: LIST
78121: LIST
78122: PPUSH
78123: CALL_OW 1
78127: ST_TO_ADDR
// end ;
78128: GO 78052
78130: POP
78131: POP
78132: GO 78032
78134: POP
78135: POP
// end ;
78136: LD_VAR 0 4
78140: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78141: LD_INT 0
78143: PPUSH
78144: PPUSH
78145: PPUSH
78146: PPUSH
78147: PPUSH
78148: PPUSH
78149: PPUSH
78150: PPUSH
// if not units then
78151: LD_VAR 0 1
78155: NOT
78156: IFFALSE 78160
// exit ;
78158: GO 78585
// result := UnitFilter ( units , [ f_ok ] ) ;
78160: LD_ADDR_VAR 0 3
78164: PUSH
78165: LD_VAR 0 1
78169: PPUSH
78170: LD_INT 50
78172: PUSH
78173: EMPTY
78174: LIST
78175: PPUSH
78176: CALL_OW 72
78180: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78181: LD_ADDR_VAR 0 8
78185: PUSH
78186: LD_VAR 0 1
78190: PUSH
78191: LD_INT 1
78193: ARRAY
78194: PPUSH
78195: CALL_OW 255
78199: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
78200: LD_ADDR_VAR 0 10
78204: PUSH
78205: LD_INT 29
78207: PUSH
78208: LD_EXP 54
78212: PUSH
78213: EMPTY
78214: LIST
78215: LIST
78216: ST_TO_ADDR
// if not result then
78217: LD_VAR 0 3
78221: NOT
78222: IFFALSE 78226
// exit ;
78224: GO 78585
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78226: LD_ADDR_VAR 0 5
78230: PUSH
78231: LD_INT 81
78233: PUSH
78234: LD_VAR 0 8
78238: PUSH
78239: EMPTY
78240: LIST
78241: LIST
78242: PPUSH
78243: CALL_OW 69
78247: ST_TO_ADDR
// for i in result do
78248: LD_ADDR_VAR 0 4
78252: PUSH
78253: LD_VAR 0 3
78257: PUSH
78258: FOR_IN
78259: IFFALSE 78583
// begin tag := GetTag ( i ) + 1 ;
78261: LD_ADDR_VAR 0 9
78265: PUSH
78266: LD_VAR 0 4
78270: PPUSH
78271: CALL_OW 110
78275: PUSH
78276: LD_INT 1
78278: PLUS
78279: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78280: LD_ADDR_VAR 0 7
78284: PUSH
78285: LD_VAR 0 4
78289: PPUSH
78290: CALL_OW 250
78294: PPUSH
78295: LD_VAR 0 4
78299: PPUSH
78300: CALL_OW 251
78304: PPUSH
78305: LD_INT 6
78307: PPUSH
78308: CALL 77883 0 3
78312: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78313: LD_VAR 0 7
78317: PUSH
78318: LD_VAR 0 4
78322: PPUSH
78323: CALL_OW 264
78327: PUSH
78328: LD_VAR 0 10
78332: IN
78333: NOT
78334: AND
78335: IFFALSE 78374
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78337: LD_VAR 0 4
78341: PPUSH
78342: LD_VAR 0 7
78346: PUSH
78347: LD_INT 1
78349: ARRAY
78350: PUSH
78351: LD_INT 1
78353: ARRAY
78354: PPUSH
78355: LD_VAR 0 7
78359: PUSH
78360: LD_INT 1
78362: ARRAY
78363: PUSH
78364: LD_INT 2
78366: ARRAY
78367: PPUSH
78368: CALL_OW 116
78372: GO 78581
// if path > tag then
78374: LD_VAR 0 2
78378: PUSH
78379: LD_VAR 0 9
78383: GREATER
78384: IFFALSE 78551
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
78386: LD_ADDR_VAR 0 6
78390: PUSH
78391: LD_VAR 0 5
78395: PPUSH
78396: LD_INT 91
78398: PUSH
78399: LD_VAR 0 4
78403: PUSH
78404: LD_INT 12
78406: PUSH
78407: EMPTY
78408: LIST
78409: LIST
78410: LIST
78411: PPUSH
78412: CALL_OW 72
78416: ST_TO_ADDR
// if nearEnemy then
78417: LD_VAR 0 6
78421: IFFALSE 78449
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78423: LD_VAR 0 4
78427: PPUSH
78428: LD_VAR 0 6
78432: PPUSH
78433: LD_VAR 0 4
78437: PPUSH
78438: CALL_OW 74
78442: PPUSH
78443: CALL_OW 115
78447: GO 78549
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78449: LD_VAR 0 4
78453: PPUSH
78454: LD_VAR 0 2
78458: PUSH
78459: LD_VAR 0 9
78463: ARRAY
78464: PUSH
78465: LD_INT 1
78467: ARRAY
78468: PPUSH
78469: LD_VAR 0 2
78473: PUSH
78474: LD_VAR 0 9
78478: ARRAY
78479: PUSH
78480: LD_INT 2
78482: ARRAY
78483: PPUSH
78484: CALL_OW 297
78488: PUSH
78489: LD_INT 6
78491: GREATER
78492: IFFALSE 78535
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78494: LD_VAR 0 4
78498: PPUSH
78499: LD_VAR 0 2
78503: PUSH
78504: LD_VAR 0 9
78508: ARRAY
78509: PUSH
78510: LD_INT 1
78512: ARRAY
78513: PPUSH
78514: LD_VAR 0 2
78518: PUSH
78519: LD_VAR 0 9
78523: ARRAY
78524: PUSH
78525: LD_INT 2
78527: ARRAY
78528: PPUSH
78529: CALL_OW 114
78533: GO 78549
// SetTag ( i , tag ) ;
78535: LD_VAR 0 4
78539: PPUSH
78540: LD_VAR 0 9
78544: PPUSH
78545: CALL_OW 109
// end else
78549: GO 78581
// if enemy then
78551: LD_VAR 0 5
78555: IFFALSE 78581
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78557: LD_VAR 0 4
78561: PPUSH
78562: LD_VAR 0 5
78566: PPUSH
78567: LD_VAR 0 4
78571: PPUSH
78572: CALL_OW 74
78576: PPUSH
78577: CALL_OW 115
// end ;
78581: GO 78258
78583: POP
78584: POP
// end ;
78585: LD_VAR 0 3
78589: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78590: LD_INT 0
78592: PPUSH
78593: PPUSH
78594: PPUSH
// if not unit or IsInUnit ( unit ) then
78595: LD_VAR 0 1
78599: NOT
78600: PUSH
78601: LD_VAR 0 1
78605: PPUSH
78606: CALL_OW 310
78610: OR
78611: IFFALSE 78615
// exit ;
78613: GO 78706
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78615: LD_ADDR_VAR 0 4
78619: PUSH
78620: LD_VAR 0 1
78624: PPUSH
78625: CALL_OW 250
78629: PPUSH
78630: LD_VAR 0 2
78634: PPUSH
78635: LD_INT 1
78637: PPUSH
78638: CALL_OW 272
78642: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78643: LD_ADDR_VAR 0 5
78647: PUSH
78648: LD_VAR 0 1
78652: PPUSH
78653: CALL_OW 251
78657: PPUSH
78658: LD_VAR 0 2
78662: PPUSH
78663: LD_INT 1
78665: PPUSH
78666: CALL_OW 273
78670: ST_TO_ADDR
// if ValidHex ( x , y ) then
78671: LD_VAR 0 4
78675: PPUSH
78676: LD_VAR 0 5
78680: PPUSH
78681: CALL_OW 488
78685: IFFALSE 78706
// ComTurnXY ( unit , x , y ) ;
78687: LD_VAR 0 1
78691: PPUSH
78692: LD_VAR 0 4
78696: PPUSH
78697: LD_VAR 0 5
78701: PPUSH
78702: CALL_OW 118
// end ;
78706: LD_VAR 0 3
78710: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78711: LD_INT 0
78713: PPUSH
78714: PPUSH
// result := false ;
78715: LD_ADDR_VAR 0 3
78719: PUSH
78720: LD_INT 0
78722: ST_TO_ADDR
// if not units then
78723: LD_VAR 0 2
78727: NOT
78728: IFFALSE 78732
// exit ;
78730: GO 78777
// for i in units do
78732: LD_ADDR_VAR 0 4
78736: PUSH
78737: LD_VAR 0 2
78741: PUSH
78742: FOR_IN
78743: IFFALSE 78775
// if See ( side , i ) then
78745: LD_VAR 0 1
78749: PPUSH
78750: LD_VAR 0 4
78754: PPUSH
78755: CALL_OW 292
78759: IFFALSE 78773
// begin result := true ;
78761: LD_ADDR_VAR 0 3
78765: PUSH
78766: LD_INT 1
78768: ST_TO_ADDR
// exit ;
78769: POP
78770: POP
78771: GO 78777
// end ;
78773: GO 78742
78775: POP
78776: POP
// end ;
78777: LD_VAR 0 3
78781: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78782: LD_INT 0
78784: PPUSH
78785: PPUSH
78786: PPUSH
78787: PPUSH
// if not unit or not points then
78788: LD_VAR 0 1
78792: NOT
78793: PUSH
78794: LD_VAR 0 2
78798: NOT
78799: OR
78800: IFFALSE 78804
// exit ;
78802: GO 78894
// dist := 99999 ;
78804: LD_ADDR_VAR 0 5
78808: PUSH
78809: LD_INT 99999
78811: ST_TO_ADDR
// for i in points do
78812: LD_ADDR_VAR 0 4
78816: PUSH
78817: LD_VAR 0 2
78821: PUSH
78822: FOR_IN
78823: IFFALSE 78892
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78825: LD_ADDR_VAR 0 6
78829: PUSH
78830: LD_VAR 0 1
78834: PPUSH
78835: LD_VAR 0 4
78839: PUSH
78840: LD_INT 1
78842: ARRAY
78843: PPUSH
78844: LD_VAR 0 4
78848: PUSH
78849: LD_INT 2
78851: ARRAY
78852: PPUSH
78853: CALL_OW 297
78857: ST_TO_ADDR
// if tmpDist < dist then
78858: LD_VAR 0 6
78862: PUSH
78863: LD_VAR 0 5
78867: LESS
78868: IFFALSE 78890
// begin result := i ;
78870: LD_ADDR_VAR 0 3
78874: PUSH
78875: LD_VAR 0 4
78879: ST_TO_ADDR
// dist := tmpDist ;
78880: LD_ADDR_VAR 0 5
78884: PUSH
78885: LD_VAR 0 6
78889: ST_TO_ADDR
// end ; end ;
78890: GO 78822
78892: POP
78893: POP
// end ; end_of_file
78894: LD_VAR 0 3
78898: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78899: LD_VAR 0 1
78903: PUSH
78904: LD_INT 200
78906: DOUBLE
78907: GREATEREQUAL
78908: IFFALSE 78916
78910: LD_INT 299
78912: DOUBLE
78913: LESSEQUAL
78914: IFTRUE 78918
78916: GO 78950
78918: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78919: LD_VAR 0 1
78923: PPUSH
78924: LD_VAR 0 2
78928: PPUSH
78929: LD_VAR 0 3
78933: PPUSH
78934: LD_VAR 0 4
78938: PPUSH
78939: LD_VAR 0 5
78943: PPUSH
78944: CALL 34602 0 5
78948: GO 79027
78950: LD_INT 300
78952: DOUBLE
78953: GREATEREQUAL
78954: IFFALSE 78962
78956: LD_INT 399
78958: DOUBLE
78959: LESSEQUAL
78960: IFTRUE 78964
78962: GO 79026
78964: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78965: LD_VAR 0 1
78969: PPUSH
78970: LD_VAR 0 2
78974: PPUSH
78975: LD_VAR 0 3
78979: PPUSH
78980: LD_VAR 0 4
78984: PPUSH
78985: LD_VAR 0 5
78989: PPUSH
78990: LD_VAR 0 6
78994: PPUSH
78995: LD_VAR 0 7
78999: PPUSH
79000: LD_VAR 0 8
79004: PPUSH
79005: LD_VAR 0 9
79009: PPUSH
79010: LD_VAR 0 10
79014: PPUSH
79015: LD_VAR 0 11
79019: PPUSH
79020: CALL 32244 0 11
79024: GO 79027
79026: POP
// end ;
79027: PPOPN 11
79029: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79030: LD_VAR 0 1
79034: PPUSH
79035: LD_VAR 0 2
79039: PPUSH
79040: LD_VAR 0 3
79044: PPUSH
79045: LD_VAR 0 4
79049: PPUSH
79050: LD_VAR 0 5
79054: PPUSH
79055: CALL 34338 0 5
// end ; end_of_file
79059: PPOPN 5
79061: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79062: LD_VAR 0 1
79066: PPUSH
79067: LD_VAR 0 2
79071: PPUSH
79072: LD_VAR 0 3
79076: PPUSH
79077: LD_VAR 0 4
79081: PPUSH
79082: LD_VAR 0 5
79086: PPUSH
79087: LD_VAR 0 6
79091: PPUSH
79092: CALL 19937 0 6
// end ;
79096: PPOPN 6
79098: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79099: CALL 19912 0 0
// end ;
79103: PPOPN 1
79105: END
