// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 44
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 45
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 43
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// bonusAvalaible = 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// firstRussianAttack = 0 ;
  68: LD_ADDR_EXP 23
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// saveDonaldson = 0 ;
  76: LD_ADDR_EXP 24
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// frankScoutBase = 0 ;
  84: LD_ADDR_EXP 25
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// harrAnswer = 0 ;
  92: LD_ADDR_EXP 26
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 100: LD_ADDR_EXP 27
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 108: LD_ADDR_EXP 28
 112: PUSH
 113: LD_INT 18900
 115: ST_TO_ADDR
// timerStatus = 0 ;
 116: LD_ADDR_EXP 29
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// startTimer = 0 ;
 124: LD_ADDR_EXP 30
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// factoryDialog = 0 ;
 132: LD_ADDR_EXP 31
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// bunkerDialog = 0 ;
 140: LD_ADDR_EXP 32
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// energyVDialog = 0 ;
 148: LD_ADDR_EXP 33
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// buildOil = 0 ;
 156: LD_ADDR_EXP 34
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildPower = 0 ;
 164: LD_ADDR_EXP 35
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 36
 176: PUSH
 177: LD_INT 14
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 11
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// AIEnable = 1 ;
 197: LD_ADDR_EXP 37
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 205: LD_ADDR_EXP 41
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// lostCounter = 0 ;
 213: LD_ADDR_EXP 38
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// honor = 1 ;
 221: LD_ADDR_EXP 39
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// escapeAvalaible = 0 ;
 229: LD_ADDR_EXP 40
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// PrepareDifficulty ;
 237: CALL 4192 0 0
// PrepareRussianBase ;
 241: CALL 2505 0 0
// PrepareRussianCommander ;
 245: CALL 2456 0 0
// PrepareHeroes ;
 249: CALL 390 0 0
// SetBName ( ambdept0 , gamma ) ;
 253: LD_INT 4
 255: PPUSH
 256: LD_STRING gamma
 258: PPUSH
 259: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 263: LD_INT 21
 265: PPUSH
 266: LD_STRING fyodor
 268: PPUSH
 269: CALL_OW 500
// end ;
 273: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 274: LD_EXP 43
 278: PUSH
 279: LD_INT 1
 281: EQUAL
 282: IFFALSE 387
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
// begin enable ;
 290: ENABLE
// fogoff ( true ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 298: LD_ADDR_VAR 0 1
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 349
// SetLives ( i , 1000 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: LD_INT 1000
 342: PPUSH
 343: CALL_OW 234
 347: GO 332
 349: POP
 350: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 351: LD_INT 4
 353: PPUSH
 354: CALL_OW 274
 358: PPUSH
 359: LD_INT 1
 361: PPUSH
 362: LD_INT 9999
 364: PPUSH
 365: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 274
 376: PPUSH
 377: LD_INT 2
 379: PPUSH
 380: LD_INT 9999
 382: PPUSH
 383: CALL_OW 277
// end ; end_of_file
 387: PPOPN 1
 389: END
// export function PrepareHeroes ; var i , tmp ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_side = 1 ;
 395: LD_ADDR_OWVAR 20
 399: PUSH
 400: LD_INT 1
 402: ST_TO_ADDR
// uc_nation = 1 ;
 403: LD_ADDR_OWVAR 21
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 411: LD_ADDR_EXP 1
 415: PUSH
 416: LD_STRING JMM
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: CALL 3727 0 2
 426: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 427: LD_ADDR_EXP 4
 431: PUSH
 432: LD_STRING Lisa
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: CALL 3727 0 2
 442: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 443: LD_ADDR_EXP 7
 447: PUSH
 448: LD_STRING Brown
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: CALL 3727 0 2
 458: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 459: LD_ADDR_EXP 8
 463: PUSH
 464: LD_STRING Dickens
 466: PPUSH
 467: LD_INT 0
 469: PPUSH
 470: CALL 3727 0 2
 474: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 475: LD_ADDR_EXP 9
 479: PUSH
 480: LD_STRING Woodruff
 482: PPUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL 3727 0 2
 490: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 491: LD_ADDR_EXP 12
 495: PUSH
 496: LD_STRING Campell
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL 3727 0 2
 506: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 507: LD_ADDR_EXP 10
 511: PUSH
 512: LD_STRING Knight
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL 3727 0 2
 522: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 523: LD_ADDR_EXP 11
 527: PUSH
 528: LD_STRING Claptopn
 530: PPUSH
 531: LD_INT 0
 533: PPUSH
 534: CALL 3727 0 2
 538: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 539: LD_ADDR_EXP 14
 543: PUSH
 544: LD_STRING Harisson
 546: PPUSH
 547: LD_INT 0
 549: PPUSH
 550: CALL 3727 0 2
 554: ST_TO_ADDR
// if Lisa = false then
 555: LD_EXP 4
 559: PUSH
 560: LD_INT 0
 562: EQUAL
 563: IFFALSE 581
// Bobby = PrepareUnit ( Bobby , true ) ;
 565: LD_ADDR_EXP 2
 569: PUSH
 570: LD_STRING Bobby
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL 3727 0 2
 580: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 581: LD_EXP 4
 585: PUSH
 586: LD_INT 0
 588: EQUAL
 589: PUSH
 590: LD_EXP 2
 594: PUSH
 595: LD_INT 0
 597: EQUAL
 598: AND
 599: IFFALSE 617
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 601: LD_ADDR_EXP 3
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 3727 0 2
 616: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 617: LD_EXP 4
 621: PUSH
 622: LD_INT 0
 624: EQUAL
 625: PUSH
 626: LD_EXP 2
 630: PUSH
 631: LD_INT 0
 633: EQUAL
 634: AND
 635: PUSH
 636: LD_EXP 3
 640: PUSH
 641: LD_INT 0
 643: EQUAL
 644: AND
 645: IFFALSE 706
// begin tmp = CreateCharacterSet ( 03_others ) ;
 647: LD_ADDR_VAR 0 3
 651: PUSH
 652: LD_STRING 03_others
 654: PPUSH
 655: CALL_OW 31
 659: ST_TO_ADDR
// for i = 1 to tmp do
 660: LD_ADDR_VAR 0 2
 664: PUSH
 665: DOUBLE
 666: LD_INT 1
 668: DEC
 669: ST_TO_ADDR
 670: LD_VAR 0 3
 674: PUSH
 675: FOR_TO
 676: IFFALSE 704
// RandomBeforeMission = tmp [ Rand ( 1 , tmp ) ] ;
 678: LD_ADDR_EXP 6
 682: PUSH
 683: LD_VAR 0 3
 687: PUSH
 688: LD_INT 1
 690: PPUSH
 691: LD_VAR 0 3
 695: PPUSH
 696: CALL_OW 12
 700: ARRAY
 701: ST_TO_ADDR
 702: GO 675
 704: POP
 705: POP
// end ; uc_side = 4 ;
 706: LD_ADDR_OWVAR 20
 710: PUSH
 711: LD_INT 4
 713: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 714: LD_ADDR_EXP 13
 718: PUSH
 719: LD_STRING Donaldson
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL 3727 0 2
 729: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 730: LD_ADDR_EXP 5
 734: PUSH
 735: LD_STRING Frank
 737: PPUSH
 738: LD_INT 1
 740: PPUSH
 741: CALL 3727 0 2
 745: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 746: LD_EXP 1
 750: PPUSH
 751: LD_INT 32
 753: PPUSH
 754: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 758: LD_EXP 7
 762: PPUSH
 763: LD_INT 1
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 773: LD_EXP 7
 777: PPUSH
 778: LD_INT 32
 780: PPUSH
 781: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 785: LD_EXP 8
 789: PPUSH
 790: LD_INT 2
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 800: LD_EXP 9
 804: PPUSH
 805: LD_INT 2
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 815: LD_EXP 12
 819: PPUSH
 820: LD_INT 2
 822: PPUSH
 823: LD_INT 0
 825: PPUSH
 826: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 830: LD_EXP 10
 834: PPUSH
 835: LD_INT 2
 837: PPUSH
 838: LD_INT 0
 840: PPUSH
 841: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 845: LD_EXP 11
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 860: LD_EXP 4
 864: PPUSH
 865: LD_INT 2
 867: PPUSH
 868: LD_INT 0
 870: PPUSH
 871: CALL_OW 49
// if Lisa = false then
 875: LD_EXP 4
 879: PUSH
 880: LD_INT 0
 882: EQUAL
 883: IFFALSE 900
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 885: LD_EXP 2
 889: PPUSH
 890: LD_INT 2
 892: PPUSH
 893: LD_INT 0
 895: PPUSH
 896: CALL_OW 49
// if Lisa = false and Bobby = false then
 900: LD_EXP 4
 904: PUSH
 905: LD_INT 0
 907: EQUAL
 908: PUSH
 909: LD_EXP 2
 913: PUSH
 914: LD_INT 0
 916: EQUAL
 917: AND
 918: IFFALSE 935
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 920: LD_EXP 3
 924: PPUSH
 925: LD_INT 2
 927: PPUSH
 928: LD_INT 0
 930: PPUSH
 931: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
 935: LD_EXP 4
 939: PUSH
 940: LD_INT 0
 942: EQUAL
 943: PUSH
 944: LD_EXP 2
 948: PUSH
 949: LD_INT 0
 951: EQUAL
 952: AND
 953: PUSH
 954: LD_EXP 3
 958: PUSH
 959: LD_INT 0
 961: EQUAL
 962: AND
 963: IFFALSE 980
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
 965: LD_EXP 6
 969: PPUSH
 970: LD_INT 2
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: CALL_OW 49
// end ;
 980: LD_VAR 0 1
 984: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
 985: LD_INT 0
 987: PPUSH
 988: PPUSH
 989: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
 990: LD_EXP 13
 994: PPUSH
 995: LD_INT 10
 997: PPUSH
 998: LD_INT 0
1000: PPUSH
1001: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1005: LD_EXP 5
1009: PPUSH
1010: LD_INT 10
1012: PPUSH
1013: LD_INT 0
1015: PPUSH
1016: CALL_OW 49
// uc_nation = 1 ;
1020: LD_ADDR_OWVAR 21
1024: PUSH
1025: LD_INT 1
1027: ST_TO_ADDR
// uc_side = 4 ;
1028: LD_ADDR_OWVAR 20
1032: PUSH
1033: LD_INT 4
1035: ST_TO_ADDR
// hc_class := 3 ;
1036: LD_ADDR_OWVAR 28
1040: PUSH
1041: LD_INT 3
1043: ST_TO_ADDR
// hc_sex := sex_male ;
1044: LD_ADDR_OWVAR 27
1048: PUSH
1049: LD_INT 1
1051: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1052: LD_ADDR_OWVAR 33
1056: PUSH
1057: LD_STRING SecondCharsGal
1059: ST_TO_ADDR
// hc_face_number := 53 ;
1060: LD_ADDR_OWVAR 34
1064: PUSH
1065: LD_INT 53
1067: ST_TO_ADDR
// hc_name := Freddie Warner ;
1068: LD_ADDR_OWVAR 26
1072: PUSH
1073: LD_STRING Freddie Warner
1075: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1076: LD_ADDR_OWVAR 29
1080: PUSH
1081: LD_INT 8
1083: PUSH
1084: LD_INT 11
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1091: LD_ADDR_OWVAR 30
1095: PUSH
1096: LD_INT 0
1098: PUSH
1099: LD_INT 0
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 0
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1114: LD_ADDR_OWVAR 31
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 0
1124: PUSH
1125: LD_INT 3
1127: PUSH
1128: LD_INT 0
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: ST_TO_ADDR
// un = CreateHuman ;
1137: LD_ADDR_VAR 0 3
1141: PUSH
1142: CALL_OW 44
1146: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1147: LD_VAR 0 3
1151: PPUSH
1152: LD_INT 10
1154: PPUSH
1155: LD_INT 0
1157: PPUSH
1158: CALL_OW 49
// hc_class := 1 ;
1162: LD_ADDR_OWVAR 28
1166: PUSH
1167: LD_INT 1
1169: ST_TO_ADDR
// hc_sex := sex_male ;
1170: LD_ADDR_OWVAR 27
1174: PUSH
1175: LD_INT 1
1177: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1178: LD_ADDR_OWVAR 33
1182: PUSH
1183: LD_STRING SecondCharsGal
1185: ST_TO_ADDR
// hc_face_number := 56 ;
1186: LD_ADDR_OWVAR 34
1190: PUSH
1191: LD_INT 56
1193: ST_TO_ADDR
// hc_name := Mel Brennan ;
1194: LD_ADDR_OWVAR 26
1198: PUSH
1199: LD_STRING Mel Brennan
1201: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1202: LD_ADDR_OWVAR 29
1206: PUSH
1207: LD_INT 12
1209: PUSH
1210: LD_INT 11
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1217: LD_ADDR_OWVAR 30
1221: PUSH
1222: LD_INT 1
1224: PUSH
1225: LD_INT 1
1227: PUSH
1228: LD_INT 0
1230: PUSH
1231: LD_INT 0
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1240: LD_ADDR_OWVAR 31
1244: PUSH
1245: LD_INT 2
1247: PUSH
1248: LD_INT 1
1250: PUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 0
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: ST_TO_ADDR
// un = CreateHuman ;
1263: LD_ADDR_VAR 0 3
1267: PUSH
1268: CALL_OW 44
1272: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1273: LD_VAR 0 3
1277: PPUSH
1278: LD_INT 10
1280: PPUSH
1281: LD_INT 0
1283: PPUSH
1284: CALL_OW 49
// hc_class := 1 ;
1288: LD_ADDR_OWVAR 28
1292: PUSH
1293: LD_INT 1
1295: ST_TO_ADDR
// hc_sex := sex_male ;
1296: LD_ADDR_OWVAR 27
1300: PUSH
1301: LD_INT 1
1303: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1304: LD_ADDR_OWVAR 33
1308: PUSH
1309: LD_STRING AmGalRemake
1311: ST_TO_ADDR
// hc_face_number := 5 ;
1312: LD_ADDR_OWVAR 34
1316: PUSH
1317: LD_INT 5
1319: ST_TO_ADDR
// hc_name := Bob Joplin ;
1320: LD_ADDR_OWVAR 26
1324: PUSH
1325: LD_STRING Bob Joplin
1327: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1328: LD_ADDR_OWVAR 29
1332: PUSH
1333: LD_INT 10
1335: PUSH
1336: LD_INT 11
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1343: LD_ADDR_OWVAR 30
1347: PUSH
1348: LD_INT 0
1350: PUSH
1351: LD_INT 1
1353: PUSH
1354: LD_INT 1
1356: PUSH
1357: LD_INT 0
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1366: LD_ADDR_OWVAR 31
1370: PUSH
1371: LD_INT 3
1373: PUSH
1374: LD_INT 1
1376: PUSH
1377: LD_INT 1
1379: PUSH
1380: LD_INT 1
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un = CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1399: LD_VAR 0 3
1403: PPUSH
1404: LD_INT 10
1406: PPUSH
1407: LD_INT 0
1409: PPUSH
1410: CALL_OW 49
// hc_class := 3 ;
1414: LD_ADDR_OWVAR 28
1418: PUSH
1419: LD_INT 3
1421: ST_TO_ADDR
// hc_sex := sex_female ;
1422: LD_ADDR_OWVAR 27
1426: PUSH
1427: LD_INT 2
1429: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1430: LD_ADDR_OWVAR 33
1434: PUSH
1435: LD_STRING AmGalRemake
1437: ST_TO_ADDR
// hc_face_number := 4 ;
1438: LD_ADDR_OWVAR 34
1442: PUSH
1443: LD_INT 4
1445: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1446: LD_ADDR_OWVAR 26
1450: PUSH
1451: LD_STRING Elizabeth Whitney
1453: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1454: LD_ADDR_OWVAR 29
1458: PUSH
1459: LD_INT 9
1461: PUSH
1462: LD_INT 11
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1469: LD_ADDR_OWVAR 30
1473: PUSH
1474: LD_INT 0
1476: PUSH
1477: LD_INT 0
1479: PUSH
1480: LD_INT 2
1482: PUSH
1483: LD_INT 0
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1492: LD_ADDR_OWVAR 31
1496: PUSH
1497: LD_INT 2
1499: PUSH
1500: LD_INT 2
1502: PUSH
1503: LD_INT 4
1505: PUSH
1506: LD_INT 2
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// un = CreateHuman ;
1515: LD_ADDR_VAR 0 3
1519: PUSH
1520: CALL_OW 44
1524: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1525: LD_VAR 0 3
1529: PPUSH
1530: LD_INT 10
1532: PPUSH
1533: LD_INT 0
1535: PPUSH
1536: CALL_OW 49
// InitHc ;
1540: CALL_OW 19
// end ;
1544: LD_VAR 0 1
1548: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1549: LD_INT 0
1551: PPUSH
1552: PPUSH
1553: PPUSH
// uc_nation = 1 ;
1554: LD_ADDR_OWVAR 21
1558: PUSH
1559: LD_INT 1
1561: ST_TO_ADDR
// uc_side = 1 ;
1562: LD_ADDR_OWVAR 20
1566: PUSH
1567: LD_INT 1
1569: ST_TO_ADDR
// hc_class := 1 ;
1570: LD_ADDR_OWVAR 28
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// hc_sex := sex_male ;
1578: LD_ADDR_OWVAR 27
1582: PUSH
1583: LD_INT 1
1585: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1586: LD_ADDR_OWVAR 33
1590: PUSH
1591: LD_STRING SecondCharsGal
1593: ST_TO_ADDR
// hc_face_number := 59 ;
1594: LD_ADDR_OWVAR 34
1598: PUSH
1599: LD_INT 59
1601: ST_TO_ADDR
// hc_name := Max Gray ;
1602: LD_ADDR_OWVAR 26
1606: PUSH
1607: LD_STRING Max Gray
1609: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1610: LD_ADDR_OWVAR 29
1614: PUSH
1615: LD_INT 9
1617: PUSH
1618: LD_INT 11
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1625: LD_ADDR_OWVAR 30
1629: PUSH
1630: LD_INT 1
1632: PUSH
1633: LD_INT 0
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: LD_INT 0
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1648: LD_ADDR_OWVAR 31
1652: PUSH
1653: LD_INT 2
1655: PUSH
1656: LD_INT 1
1658: PUSH
1659: LD_INT 1
1661: PUSH
1662: LD_INT 0
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// un = CreateHuman ;
1671: LD_ADDR_VAR 0 4
1675: PUSH
1676: CALL_OW 44
1680: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1681: LD_VAR 0 4
1685: PPUSH
1686: LD_INT 11
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// hc_class := 1 ;
1696: LD_ADDR_OWVAR 28
1700: PUSH
1701: LD_INT 1
1703: ST_TO_ADDR
// hc_sex := sex_male ;
1704: LD_ADDR_OWVAR 27
1708: PUSH
1709: LD_INT 1
1711: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1712: LD_ADDR_OWVAR 33
1716: PUSH
1717: LD_STRING SecondCharsGal
1719: ST_TO_ADDR
// hc_face_number := 54 ;
1720: LD_ADDR_OWVAR 34
1724: PUSH
1725: LD_INT 54
1727: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1728: LD_ADDR_OWVAR 26
1732: PUSH
1733: LD_STRING Luigi Ghbellin
1735: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1736: LD_ADDR_OWVAR 29
1740: PUSH
1741: LD_INT 11
1743: PUSH
1744: LD_INT 11
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1751: LD_ADDR_OWVAR 30
1755: PUSH
1756: LD_INT 1
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: LD_INT 0
1764: PUSH
1765: LD_INT 0
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1774: LD_ADDR_OWVAR 31
1778: PUSH
1779: LD_INT 1
1781: PUSH
1782: LD_INT 0
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: LD_INT 1
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: ST_TO_ADDR
// un = CreateHuman ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: CALL_OW 44
1806: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1807: LD_VAR 0 4
1811: PPUSH
1812: LD_INT 11
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 49
// hc_class := 3 ;
1822: LD_ADDR_OWVAR 28
1826: PUSH
1827: LD_INT 3
1829: ST_TO_ADDR
// hc_sex := sex_male ;
1830: LD_ADDR_OWVAR 27
1834: PUSH
1835: LD_INT 1
1837: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1838: LD_ADDR_OWVAR 33
1842: PUSH
1843: LD_STRING AmGalRemake
1845: ST_TO_ADDR
// hc_face_number := 6 ;
1846: LD_ADDR_OWVAR 34
1850: PUSH
1851: LD_INT 6
1853: ST_TO_ADDR
// hc_name := Leon Carter ;
1854: LD_ADDR_OWVAR 26
1858: PUSH
1859: LD_STRING Leon Carter
1861: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
1862: LD_ADDR_OWVAR 29
1866: PUSH
1867: LD_INT 10
1869: PUSH
1870: LD_INT 9
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1877: LD_ADDR_OWVAR 30
1881: PUSH
1882: LD_INT 0
1884: PUSH
1885: LD_INT 1
1887: PUSH
1888: LD_INT 1
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1900: LD_ADDR_OWVAR 31
1904: PUSH
1905: LD_INT 0
1907: PUSH
1908: LD_INT 1
1910: PUSH
1911: LD_INT 3
1913: PUSH
1914: LD_INT 0
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: ST_TO_ADDR
// un = CreateHuman ;
1923: LD_ADDR_VAR 0 4
1927: PUSH
1928: CALL_OW 44
1932: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1933: LD_VAR 0 4
1937: PPUSH
1938: LD_INT 11
1940: PPUSH
1941: LD_INT 0
1943: PPUSH
1944: CALL_OW 49
// if count = 4 then
1948: LD_VAR 0 1
1952: PUSH
1953: LD_INT 4
1955: EQUAL
1956: IFFALSE 2084
// begin hc_class := 1 ;
1958: LD_ADDR_OWVAR 28
1962: PUSH
1963: LD_INT 1
1965: ST_TO_ADDR
// hc_sex := sex_male ;
1966: LD_ADDR_OWVAR 27
1970: PUSH
1971: LD_INT 1
1973: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1974: LD_ADDR_OWVAR 33
1978: PUSH
1979: LD_STRING SecondCharsGal
1981: ST_TO_ADDR
// hc_face_number := 34 ;
1982: LD_ADDR_OWVAR 34
1986: PUSH
1987: LD_INT 34
1989: ST_TO_ADDR
// hc_name := Ian Hill ;
1990: LD_ADDR_OWVAR 26
1994: PUSH
1995: LD_STRING Ian Hill
1997: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
1998: LD_ADDR_OWVAR 29
2002: PUSH
2003: LD_INT 10
2005: PUSH
2006: LD_INT 12
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2013: LD_ADDR_OWVAR 30
2017: PUSH
2018: LD_INT 0
2020: PUSH
2021: LD_INT 0
2023: PUSH
2024: LD_INT 1
2026: PUSH
2027: LD_INT 0
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2036: LD_ADDR_OWVAR 31
2040: PUSH
2041: LD_INT 2
2043: PUSH
2044: LD_INT 0
2046: PUSH
2047: LD_INT 1
2049: PUSH
2050: LD_INT 0
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: ST_TO_ADDR
// un = CreateHuman ;
2059: LD_ADDR_VAR 0 4
2063: PUSH
2064: CALL_OW 44
2068: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2069: LD_VAR 0 4
2073: PPUSH
2074: LD_INT 11
2076: PPUSH
2077: LD_INT 0
2079: PPUSH
2080: CALL_OW 49
// end ; if count = 5 then
2084: LD_VAR 0 1
2088: PUSH
2089: LD_INT 5
2091: EQUAL
2092: IFFALSE 2346
// begin hc_class := 1 ;
2094: LD_ADDR_OWVAR 28
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// hc_sex := sex_male ;
2102: LD_ADDR_OWVAR 27
2106: PUSH
2107: LD_INT 1
2109: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2110: LD_ADDR_OWVAR 33
2114: PUSH
2115: LD_STRING SecondCharsGal
2117: ST_TO_ADDR
// hc_face_number := 34 ;
2118: LD_ADDR_OWVAR 34
2122: PUSH
2123: LD_INT 34
2125: ST_TO_ADDR
// hc_name := Ian Hill ;
2126: LD_ADDR_OWVAR 26
2130: PUSH
2131: LD_STRING Ian Hill
2133: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2134: LD_ADDR_OWVAR 29
2138: PUSH
2139: LD_INT 10
2141: PUSH
2142: LD_INT 12
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2149: LD_ADDR_OWVAR 30
2153: PUSH
2154: LD_INT 0
2156: PUSH
2157: LD_INT 0
2159: PUSH
2160: LD_INT 1
2162: PUSH
2163: LD_INT 0
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2172: LD_ADDR_OWVAR 31
2176: PUSH
2177: LD_INT 2
2179: PUSH
2180: LD_INT 0
2182: PUSH
2183: LD_INT 1
2185: PUSH
2186: LD_INT 0
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: ST_TO_ADDR
// un = CreateHuman ;
2195: LD_ADDR_VAR 0 4
2199: PUSH
2200: CALL_OW 44
2204: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2205: LD_VAR 0 4
2209: PPUSH
2210: LD_INT 11
2212: PPUSH
2213: LD_INT 0
2215: PPUSH
2216: CALL_OW 49
// hc_class := 1 ;
2220: LD_ADDR_OWVAR 28
2224: PUSH
2225: LD_INT 1
2227: ST_TO_ADDR
// hc_sex := sex_female ;
2228: LD_ADDR_OWVAR 27
2232: PUSH
2233: LD_INT 2
2235: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2236: LD_ADDR_OWVAR 33
2240: PUSH
2241: LD_STRING SecondCharsGal
2243: ST_TO_ADDR
// hc_face_number := 41 ;
2244: LD_ADDR_OWVAR 34
2248: PUSH
2249: LD_INT 41
2251: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2252: LD_ADDR_OWVAR 26
2256: PUSH
2257: LD_STRING Kate Wadsworth
2259: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2260: LD_ADDR_OWVAR 29
2264: PUSH
2265: LD_INT 9
2267: PUSH
2268: LD_INT 9
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2275: LD_ADDR_OWVAR 30
2279: PUSH
2280: LD_INT 0
2282: PUSH
2283: LD_INT 2
2285: PUSH
2286: LD_INT 0
2288: PUSH
2289: LD_INT 0
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2298: LD_ADDR_OWVAR 31
2302: PUSH
2303: LD_INT 2
2305: PUSH
2306: LD_INT 3
2308: PUSH
2309: LD_INT 1
2311: PUSH
2312: LD_INT 0
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: ST_TO_ADDR
// un = CreateHuman ;
2321: LD_ADDR_VAR 0 4
2325: PUSH
2326: CALL_OW 44
2330: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2331: LD_VAR 0 4
2335: PPUSH
2336: LD_INT 11
2338: PPUSH
2339: LD_INT 0
2341: PPUSH
2342: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2346: LD_INT 11
2348: PPUSH
2349: LD_INT 22
2351: PUSH
2352: LD_INT 1
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: LD_INT 21
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PUSH
2369: LD_INT 26
2371: PUSH
2372: LD_INT 1
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: LIST
2383: PPUSH
2384: CALL_OW 70
2388: PUSH
2389: LD_INT 1
2391: ARRAY
2392: PPUSH
2393: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2397: LD_INT 11
2399: PPUSH
2400: LD_INT 22
2402: PUSH
2403: LD_INT 1
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: PUSH
2410: LD_INT 21
2412: PUSH
2413: LD_INT 1
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 26
2422: PUSH
2423: LD_INT 1
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: PPUSH
2435: CALL_OW 70
2439: PUSH
2440: LD_INT 1
2442: ARRAY
2443: PPUSH
2444: LD_STRING D6-Sol3-1
2446: PPUSH
2447: CALL_OW 88
// end ; end_of_file
2451: LD_VAR 0 2
2455: RET
// export function PrepareRussianCommander ; begin
2456: LD_INT 0
2458: PPUSH
// uc_side = 3 ;
2459: LD_ADDR_OWVAR 20
2463: PUSH
2464: LD_INT 3
2466: ST_TO_ADDR
// uc_nation = 3 ;
2467: LD_ADDR_OWVAR 21
2471: PUSH
2472: LD_INT 3
2474: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2475: LD_ADDR_EXP 15
2479: PUSH
2480: LD_STRING Stolypin
2482: PPUSH
2483: CALL_OW 25
2487: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2488: LD_EXP 15
2492: PPUSH
2493: LD_INT 21
2495: PPUSH
2496: CALL_OW 52
// end ;
2500: LD_VAR 0 1
2504: RET
// export function PrepareRussianBase ; var i ; begin
2505: LD_INT 0
2507: PPUSH
2508: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2509: LD_INT 3
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: LD_INT 22
2517: PPUSH
2518: LD_EXP 16
2522: PPUSH
2523: LD_EXP 17
2527: PPUSH
2528: CALL_OW 12
2532: PPUSH
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: CALL 3790 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2543: LD_INT 3
2545: PPUSH
2546: LD_INT 3
2548: PPUSH
2549: LD_INT 21
2551: PPUSH
2552: LD_EXP 16
2556: PPUSH
2557: LD_EXP 17
2561: PPUSH
2562: CALL_OW 12
2566: PPUSH
2567: LD_INT 2
2569: PPUSH
2570: LD_INT 3
2572: PPUSH
2573: CALL 3790 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2577: LD_INT 3
2579: PPUSH
2580: LD_INT 3
2582: PPUSH
2583: LD_INT 1
2585: PPUSH
2586: LD_EXP 16
2590: PPUSH
2591: LD_EXP 17
2595: PPUSH
2596: CALL_OW 12
2600: PPUSH
2601: LD_INT 4
2603: PPUSH
2604: LD_INT 2
2606: PPUSH
2607: CALL 3790 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2611: LD_INT 3
2613: PPUSH
2614: LD_INT 3
2616: PPUSH
2617: LD_INT 24
2619: PPUSH
2620: LD_EXP 16
2624: PPUSH
2625: LD_EXP 17
2629: PPUSH
2630: CALL_OW 12
2634: PPUSH
2635: LD_INT 3
2637: PPUSH
2638: LD_INT 6
2640: PPUSH
2641: CALL 3790 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2645: LD_ADDR_VAR 0 2
2649: PUSH
2650: LD_INT 22
2652: PUSH
2653: LD_INT 3
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: PUSH
2660: LD_INT 30
2662: PUSH
2663: LD_INT 32
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PPUSH
2674: CALL_OW 69
2678: PUSH
2679: FOR_IN
2680: IFFALSE 2720
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2682: LD_INT 3
2684: PPUSH
2685: LD_INT 3
2687: PPUSH
2688: LD_VAR 0 2
2692: PPUSH
2693: LD_EXP 16
2697: PPUSH
2698: LD_EXP 17
2702: PPUSH
2703: CALL_OW 12
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_INT 1
2713: PPUSH
2714: CALL 3790 0 6
2718: GO 2679
2720: POP
2721: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2722: LD_ADDR_VAR 0 2
2726: PUSH
2727: LD_INT 22
2729: PUSH
2730: LD_INT 3
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 30
2739: PUSH
2740: LD_INT 31
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PPUSH
2751: CALL_OW 69
2755: PUSH
2756: FOR_IN
2757: IFFALSE 2785
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2759: LD_EXP 16
2763: PPUSH
2764: LD_EXP 17
2768: PPUSH
2769: CALL_OW 12
2773: PPUSH
2774: LD_VAR 0 2
2778: PPUSH
2779: CALL 3900 0 2
2783: GO 2756
2785: POP
2786: POP
// end ;
2787: LD_VAR 0 1
2791: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2792: LD_INT 0
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
// uc_side = 6 ;
2798: LD_ADDR_OWVAR 20
2802: PUSH
2803: LD_INT 6
2805: ST_TO_ADDR
// uc_nation = 3 ;
2806: LD_ADDR_OWVAR 21
2810: PUSH
2811: LD_INT 3
2813: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_INT 1
2826: PUSH
2827: LD_INT 2
2829: PUSH
2830: LD_INT 1
2832: PPUSH
2833: LD_INT 2
2835: PPUSH
2836: CALL_OW 12
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: LIST
2845: PUSH
2846: LD_OWVAR 67
2850: ARRAY
2851: PUSH
2852: FOR_TO
2853: IFFALSE 3013
// begin vc_engine = 1 ;
2855: LD_ADDR_OWVAR 39
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// vc_control = 1 ;
2863: LD_ADDR_OWVAR 38
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2871: LD_ADDR_OWVAR 40
2875: PUSH
2876: LD_INT 42
2878: PUSH
2879: LD_INT 42
2881: PUSH
2882: LD_INT 43
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: LIST
2889: PUSH
2890: LD_OWVAR 67
2894: ARRAY
2895: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2896: LD_ADDR_OWVAR 37
2900: PUSH
2901: LD_INT 21
2903: PUSH
2904: LD_INT 22
2906: PUSH
2907: LD_INT 22
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: LD_OWVAR 67
2919: ARRAY
2920: ST_TO_ADDR
// veh = CreateVehicle ;
2921: LD_ADDR_VAR 0 3
2925: PUSH
2926: CALL_OW 45
2930: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2931: LD_VAR 0 3
2935: PPUSH
2936: LD_INT 3
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 49
// hc_gallery =  ;
2946: LD_ADDR_OWVAR 33
2950: PUSH
2951: LD_STRING 
2953: ST_TO_ADDR
// hc_name =  ;
2954: LD_ADDR_OWVAR 26
2958: PUSH
2959: LD_STRING 
2961: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2962: LD_INT 0
2964: PPUSH
2965: LD_INT 3
2967: PPUSH
2968: LD_EXP 16
2972: PPUSH
2973: LD_EXP 17
2977: PPUSH
2978: CALL_OW 12
2982: PPUSH
2983: CALL_OW 380
// un = CreateHuman ;
2987: LD_ADDR_VAR 0 4
2991: PUSH
2992: CALL_OW 44
2996: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2997: LD_VAR 0 4
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: CALL_OW 52
// end ;
3011: GO 2852
3013: POP
3014: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3015: LD_INT 0
3017: PPUSH
3018: LD_INT 2
3020: PPUSH
3021: LD_EXP 16
3025: PPUSH
3026: LD_EXP 17
3030: PPUSH
3031: CALL_OW 12
3035: PUSH
3036: LD_INT 2
3038: PLUS
3039: PPUSH
3040: CALL_OW 380
// un = CreateHuman ;
3044: LD_ADDR_VAR 0 4
3048: PUSH
3049: CALL_OW 44
3053: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3054: LD_VAR 0 4
3058: PPUSH
3059: LD_INT 3
3061: PPUSH
3062: LD_INT 0
3064: PPUSH
3065: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3069: LD_INT 0
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_EXP 16
3079: PPUSH
3080: LD_EXP 17
3084: PPUSH
3085: CALL_OW 12
3089: PUSH
3090: LD_INT 2
3092: PLUS
3093: PPUSH
3094: CALL_OW 380
// un = CreateHuman ;
3098: LD_ADDR_VAR 0 4
3102: PUSH
3103: CALL_OW 44
3107: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3108: LD_VAR 0 4
3112: PPUSH
3113: LD_INT 3
3115: PPUSH
3116: LD_INT 0
3118: PPUSH
3119: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3123: LD_ADDR_VAR 0 2
3127: PUSH
3128: DOUBLE
3129: LD_INT 1
3131: DEC
3132: ST_TO_ADDR
3133: LD_INT 2
3135: PUSH
3136: LD_INT 3
3138: PUSH
3139: LD_INT 3
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: LIST
3146: PUSH
3147: LD_OWVAR 67
3151: ARRAY
3152: PUSH
3153: LD_INT 1
3155: PPUSH
3156: LD_INT 3
3158: PPUSH
3159: CALL_OW 12
3163: PLUS
3164: PUSH
3165: FOR_TO
3166: IFFALSE 3236
// begin hc_gallery =  ;
3168: LD_ADDR_OWVAR 33
3172: PUSH
3173: LD_STRING 
3175: ST_TO_ADDR
// hc_name =  ;
3176: LD_ADDR_OWVAR 26
3180: PUSH
3181: LD_STRING 
3183: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3184: LD_INT 0
3186: PPUSH
3187: LD_INT 1
3189: PPUSH
3190: LD_EXP 16
3194: PPUSH
3195: LD_EXP 17
3199: PPUSH
3200: CALL_OW 12
3204: PPUSH
3205: CALL_OW 380
// un = CreateHuman ;
3209: LD_ADDR_VAR 0 4
3213: PUSH
3214: CALL_OW 44
3218: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3219: LD_VAR 0 4
3223: PPUSH
3224: LD_INT 3
3226: PPUSH
3227: LD_INT 0
3229: PPUSH
3230: CALL_OW 49
// end ;
3234: GO 3165
3236: POP
3237: POP
// vc_engine = 1 ;
3238: LD_ADDR_OWVAR 39
3242: PUSH
3243: LD_INT 1
3245: ST_TO_ADDR
// vc_control = 1 ;
3246: LD_ADDR_OWVAR 38
3250: PUSH
3251: LD_INT 1
3253: ST_TO_ADDR
// vc_weapon = 51 ;
3254: LD_ADDR_OWVAR 40
3258: PUSH
3259: LD_INT 51
3261: ST_TO_ADDR
// vc_chassis = 22 ;
3262: LD_ADDR_OWVAR 37
3266: PUSH
3267: LD_INT 22
3269: ST_TO_ADDR
// veh = CreateVehicle ;
3270: LD_ADDR_VAR 0 3
3274: PUSH
3275: CALL_OW 45
3279: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3280: LD_VAR 0 3
3284: PPUSH
3285: LD_INT 3
3287: PPUSH
3288: LD_INT 0
3290: PPUSH
3291: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3295: LD_VAR 0 3
3299: PPUSH
3300: LD_INT 1
3302: PPUSH
3303: LD_INT 100
3305: PPUSH
3306: CALL_OW 290
// hc_gallery =  ;
3310: LD_ADDR_OWVAR 33
3314: PUSH
3315: LD_STRING 
3317: ST_TO_ADDR
// hc_name =  ;
3318: LD_ADDR_OWVAR 26
3322: PUSH
3323: LD_STRING 
3325: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3326: LD_INT 0
3328: PPUSH
3329: LD_INT 3
3331: PPUSH
3332: LD_EXP 16
3336: PPUSH
3337: LD_EXP 17
3341: PPUSH
3342: CALL_OW 12
3346: PPUSH
3347: CALL_OW 380
// un = CreateHuman ;
3351: LD_ADDR_VAR 0 4
3355: PUSH
3356: CALL_OW 44
3360: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3361: LD_VAR 0 4
3365: PPUSH
3366: LD_VAR 0 3
3370: PPUSH
3371: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3375: LD_ADDR_VAR 0 2
3379: PUSH
3380: LD_INT 22
3382: PUSH
3383: LD_INT 6
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 1
3392: PUSH
3393: LD_INT 3
3395: PUSH
3396: LD_INT 25
3398: PUSH
3399: LD_INT 2
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: PUSH
3406: EMPTY
3407: LIST
3408: LIST
3409: PUSH
3410: LD_INT 3
3412: PUSH
3413: LD_INT 25
3415: PUSH
3416: LD_INT 4
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: PPUSH
3436: CALL_OW 69
3440: PUSH
3441: FOR_IN
3442: IFFALSE 3461
// ComAgressiveMove ( i , 45 , 46 ) ;
3444: LD_VAR 0 2
3448: PPUSH
3449: LD_INT 45
3451: PPUSH
3452: LD_INT 46
3454: PPUSH
3455: CALL_OW 114
3459: GO 3441
3461: POP
3462: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3463: LD_ADDR_VAR 0 2
3467: PUSH
3468: LD_INT 22
3470: PUSH
3471: LD_INT 6
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: PUSH
3478: LD_INT 25
3480: PUSH
3481: LD_INT 2
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 69
3496: PUSH
3497: FOR_IN
3498: IFFALSE 3529
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3500: LD_ADDR_EXP 21
3504: PUSH
3505: LD_VAR 0 2
3509: PPUSH
3510: LD_INT 0
3512: PPUSH
3513: LD_INT 48
3515: PPUSH
3516: LD_INT 55
3518: PPUSH
3519: LD_INT 5
3521: PPUSH
3522: CALL_OW 145
3526: ST_TO_ADDR
3527: GO 3497
3529: POP
3530: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: LD_INT 22
3538: PUSH
3539: LD_INT 6
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: PUSH
3546: LD_INT 25
3548: PUSH
3549: LD_INT 4
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PPUSH
3560: CALL_OW 69
3564: PUSH
3565: FOR_IN
3566: IFFALSE 3585
// ComMoveXY ( i , 39 , 55 ) ;
3568: LD_VAR 0 2
3572: PPUSH
3573: LD_INT 39
3575: PPUSH
3576: LD_INT 55
3578: PPUSH
3579: CALL_OW 111
3583: GO 3565
3585: POP
3586: POP
// end ;
3587: LD_VAR 0 1
3591: RET
// export function PrepareFirstAttack ; var i , un ; begin
3592: LD_INT 0
3594: PPUSH
3595: PPUSH
3596: PPUSH
// uc_side = 5 ;
3597: LD_ADDR_OWVAR 20
3601: PUSH
3602: LD_INT 5
3604: ST_TO_ADDR
// uc_nation = 3 ;
3605: LD_ADDR_OWVAR 21
3609: PUSH
3610: LD_INT 3
3612: ST_TO_ADDR
// for i := 1 to 4 do
3613: LD_ADDR_VAR 0 2
3617: PUSH
3618: DOUBLE
3619: LD_INT 1
3621: DEC
3622: ST_TO_ADDR
3623: LD_INT 4
3625: PUSH
3626: FOR_TO
3627: IFFALSE 3712
// begin hc_gallery =  ;
3629: LD_ADDR_OWVAR 33
3633: PUSH
3634: LD_STRING 
3636: ST_TO_ADDR
// hc_name =  ;
3637: LD_ADDR_OWVAR 26
3641: PUSH
3642: LD_STRING 
3644: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3645: LD_INT 0
3647: PPUSH
3648: LD_INT 1
3650: PPUSH
3651: LD_EXP 16
3655: PPUSH
3656: LD_EXP 17
3660: PPUSH
3661: CALL_OW 12
3665: PPUSH
3666: CALL_OW 380
// un = CreateHuman ;
3670: LD_ADDR_VAR 0 3
3674: PUSH
3675: CALL_OW 44
3679: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3680: LD_VAR 0 3
3684: PPUSH
3685: LD_INT 4
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
3695: LD_VAR 0 3
3699: PPUSH
3700: LD_INT 48
3702: PPUSH
3703: LD_INT 14
3705: PPUSH
3706: CALL_OW 114
// end ;
3710: GO 3626
3712: POP
3713: POP
// firstRussianAttack = 1 ;
3714: LD_ADDR_EXP 23
3718: PUSH
3719: LD_INT 1
3721: ST_TO_ADDR
// end ; end_of_file
3722: LD_VAR 0 1
3726: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3727: LD_INT 0
3729: PPUSH
3730: PPUSH
// if exist_mode then
3731: LD_VAR 0 2
3735: IFFALSE 3760
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3737: LD_ADDR_VAR 0 4
3741: PUSH
3742: LD_EXP 45
3746: PUSH
3747: LD_VAR 0 1
3751: STR
3752: PPUSH
3753: CALL_OW 34
3757: ST_TO_ADDR
// end else
3758: GO 3775
// begin unit := NewCharacter ( ident ) ;
3760: LD_ADDR_VAR 0 4
3764: PUSH
3765: LD_VAR 0 1
3769: PPUSH
3770: CALL_OW 25
3774: ST_TO_ADDR
// end ; result := unit ;
3775: LD_ADDR_VAR 0 3
3779: PUSH
3780: LD_VAR 0 4
3784: ST_TO_ADDR
// end ;
3785: LD_VAR 0 3
3789: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3790: LD_INT 0
3792: PPUSH
3793: PPUSH
3794: PPUSH
3795: PPUSH
// for i = 1 to count do
3796: LD_ADDR_VAR 0 8
3800: PUSH
3801: DOUBLE
3802: LD_INT 1
3804: DEC
3805: ST_TO_ADDR
3806: LD_VAR 0 6
3810: PUSH
3811: FOR_TO
3812: IFFALSE 3893
// begin uc_side = side ;
3814: LD_ADDR_OWVAR 20
3818: PUSH
3819: LD_VAR 0 1
3823: ST_TO_ADDR
// uc_nation = nation ;
3824: LD_ADDR_OWVAR 21
3828: PUSH
3829: LD_VAR 0 2
3833: ST_TO_ADDR
// hc_gallery =  ;
3834: LD_ADDR_OWVAR 33
3838: PUSH
3839: LD_STRING 
3841: ST_TO_ADDR
// hc_name =  ;
3842: LD_ADDR_OWVAR 26
3846: PUSH
3847: LD_STRING 
3849: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3850: LD_INT 0
3852: PPUSH
3853: LD_VAR 0 5
3857: PPUSH
3858: LD_VAR 0 4
3862: PPUSH
3863: CALL_OW 380
// un = CreateHuman ;
3867: LD_ADDR_VAR 0 10
3871: PUSH
3872: CALL_OW 44
3876: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3877: LD_VAR 0 10
3881: PPUSH
3882: LD_VAR 0 3
3886: PPUSH
3887: CALL_OW 52
// end ;
3891: GO 3811
3893: POP
3894: POP
// end ;
3895: LD_VAR 0 7
3899: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3900: LD_INT 0
3902: PPUSH
3903: PPUSH
3904: PPUSH
// uc_side := GetSide ( b ) ;
3905: LD_ADDR_OWVAR 20
3909: PUSH
3910: LD_VAR 0 2
3914: PPUSH
3915: CALL_OW 255
3919: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3920: LD_ADDR_OWVAR 21
3924: PUSH
3925: LD_VAR 0 2
3929: PPUSH
3930: CALL_OW 248
3934: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3935: LD_INT 0
3937: PPUSH
3938: LD_INT 1
3940: PPUSH
3941: LD_VAR 0 1
3945: PPUSH
3946: CALL_OW 380
// un = CreateHuman ;
3950: LD_ADDR_VAR 0 4
3954: PUSH
3955: CALL_OW 44
3959: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3960: LD_ADDR_VAR 0 5
3964: PUSH
3965: LD_VAR 0 2
3969: PPUSH
3970: CALL_OW 254
3974: PUSH
3975: LD_INT 3
3977: MINUS
3978: ST_TO_ADDR
// if dir < 0 then
3979: LD_VAR 0 5
3983: PUSH
3984: LD_INT 0
3986: LESS
3987: IFFALSE 4003
// dir := 6 + dir ;
3989: LD_ADDR_VAR 0 5
3993: PUSH
3994: LD_INT 6
3996: PUSH
3997: LD_VAR 0 5
4001: PLUS
4002: ST_TO_ADDR
// SetDir ( un , dir ) ;
4003: LD_VAR 0 4
4007: PPUSH
4008: LD_VAR 0 5
4012: PPUSH
4013: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4017: LD_VAR 0 4
4021: PPUSH
4022: LD_VAR 0 2
4026: PPUSH
4027: CALL_OW 52
// end ;
4031: LD_VAR 0 3
4035: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4036: LD_INT 0
4038: PPUSH
4039: PPUSH
4040: PPUSH
// rnd = rand ( 1 , characters ) ;
4041: LD_ADDR_VAR 0 6
4045: PUSH
4046: LD_INT 1
4048: PPUSH
4049: LD_VAR 0 1
4053: PPUSH
4054: CALL_OW 12
4058: ST_TO_ADDR
// for i = 1 to characters do
4059: LD_ADDR_VAR 0 5
4063: PUSH
4064: DOUBLE
4065: LD_INT 1
4067: DEC
4068: ST_TO_ADDR
4069: LD_VAR 0 1
4073: PUSH
4074: FOR_TO
4075: IFFALSE 4185
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4077: LD_VAR 0 5
4081: PUSH
4082: LD_VAR 0 6
4086: EQUAL
4087: PUSH
4088: LD_VAR 0 1
4092: PUSH
4093: LD_VAR 0 5
4097: ARRAY
4098: PPUSH
4099: CALL_OW 258
4103: PUSH
4104: LD_INT 1
4106: EQUAL
4107: AND
4108: IFFALSE 4130
// Say ( characters [ i ] , dialogMID ) ;
4110: LD_VAR 0 1
4114: PUSH
4115: LD_VAR 0 5
4119: ARRAY
4120: PPUSH
4121: LD_VAR 0 2
4125: PPUSH
4126: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4130: LD_VAR 0 5
4134: PUSH
4135: LD_VAR 0 6
4139: EQUAL
4140: PUSH
4141: LD_VAR 0 1
4145: PUSH
4146: LD_VAR 0 5
4150: ARRAY
4151: PPUSH
4152: CALL_OW 258
4156: PUSH
4157: LD_INT 2
4159: EQUAL
4160: AND
4161: IFFALSE 4183
// Say ( characters [ i ] , dialogFID ) ;
4163: LD_VAR 0 1
4167: PUSH
4168: LD_VAR 0 5
4172: ARRAY
4173: PPUSH
4174: LD_VAR 0 3
4178: PPUSH
4179: CALL_OW 88
// end ;
4183: GO 4074
4185: POP
4186: POP
// end ;
4187: LD_VAR 0 4
4191: RET
// export function PrepareDifficulty ; var tmp ; begin
4192: LD_INT 0
4194: PPUSH
4195: PPUSH
// if Difficulty = 1 then
4196: LD_OWVAR 67
4200: PUSH
4201: LD_INT 1
4203: EQUAL
4204: IFFALSE 4222
// begin RuSoldMinLevel = 0 ;
4206: LD_ADDR_EXP 16
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4214: LD_ADDR_EXP 17
4218: PUSH
4219: LD_INT 2
4221: ST_TO_ADDR
// end ; if Difficulty = 2 then
4222: LD_OWVAR 67
4226: PUSH
4227: LD_INT 2
4229: EQUAL
4230: IFFALSE 4338
// begin RuSoldMinLevel = 1 ;
4232: LD_ADDR_EXP 16
4236: PUSH
4237: LD_INT 1
4239: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4240: LD_ADDR_EXP 17
4244: PUSH
4245: LD_INT 2
4247: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4248: LD_INT 14
4250: PPUSH
4251: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4255: LD_INT 23
4257: PPUSH
4258: CALL_OW 64
// uc_nation = 3 ;
4262: LD_ADDR_OWVAR 21
4266: PUSH
4267: LD_INT 3
4269: ST_TO_ADDR
// uc_side = 3 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 3
4277: ST_TO_ADDR
// bc_level = 5 ;
4278: LD_ADDR_OWVAR 43
4282: PUSH
4283: LD_INT 5
4285: ST_TO_ADDR
// bc_type = 32 ;
4286: LD_ADDR_OWVAR 42
4290: PUSH
4291: LD_INT 32
4293: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4294: LD_ADDR_VAR 0 2
4298: PUSH
4299: LD_INT 76
4301: PPUSH
4302: LD_INT 91
4304: PPUSH
4305: LD_INT 2
4307: PPUSH
4308: CALL_OW 47
4312: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4313: LD_VAR 0 2
4317: PPUSH
4318: LD_INT 43
4320: PPUSH
4321: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4325: LD_INT 51
4327: PPUSH
4328: LD_INT 3
4330: PPUSH
4331: LD_INT 1
4333: PPUSH
4334: CALL_OW 322
// end ; if Difficulty = 3 then
4338: LD_OWVAR 67
4342: PUSH
4343: LD_INT 3
4345: EQUAL
4346: IFFALSE 4522
// begin RuSoldMinLevel = 1 ;
4348: LD_ADDR_EXP 16
4352: PUSH
4353: LD_INT 1
4355: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4356: LD_ADDR_EXP 17
4360: PUSH
4361: LD_INT 3
4363: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4364: LD_INT 13
4366: PPUSH
4367: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4371: LD_INT 14
4373: PPUSH
4374: CALL_OW 64
// RemoveUnit ( rubbrwr0 ) ;
4378: LD_INT 26
4380: PPUSH
4381: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4385: LD_INT 23
4387: PPUSH
4388: CALL_OW 64
// uc_nation = 3 ;
4392: LD_ADDR_OWVAR 21
4396: PUSH
4397: LD_INT 3
4399: ST_TO_ADDR
// uc_side = 3 ;
4400: LD_ADDR_OWVAR 20
4404: PUSH
4405: LD_INT 3
4407: ST_TO_ADDR
// bc_level = 5 ;
4408: LD_ADDR_OWVAR 43
4412: PUSH
4413: LD_INT 5
4415: ST_TO_ADDR
// bc_type = 32 ;
4416: LD_ADDR_OWVAR 42
4420: PUSH
4421: LD_INT 32
4423: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4424: LD_ADDR_VAR 0 2
4428: PUSH
4429: LD_INT 76
4431: PPUSH
4432: LD_INT 91
4434: PPUSH
4435: LD_INT 2
4437: PPUSH
4438: CALL_OW 47
4442: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4443: LD_VAR 0 2
4447: PPUSH
4448: LD_INT 44
4450: PPUSH
4451: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: LD_INT 83
4462: PPUSH
4463: LD_INT 84
4465: PPUSH
4466: LD_INT 2
4468: PPUSH
4469: CALL_OW 47
4473: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4474: LD_VAR 0 2
4478: PPUSH
4479: LD_INT 43
4481: PPUSH
4482: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4486: LD_INT 51
4488: PPUSH
4489: LD_INT 3
4491: PPUSH
4492: LD_INT 1
4494: PPUSH
4495: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4499: LD_INT 52
4501: PPUSH
4502: LD_INT 3
4504: PPUSH
4505: LD_INT 1
4507: PPUSH
4508: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4512: LD_INT 25
4514: PPUSH
4515: LD_INT 44
4517: PPUSH
4518: CALL_OW 431
// end ; end ;
4522: LD_VAR 0 1
4526: RET
// export function EnergyDialog ; begin
4527: LD_INT 0
4529: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4530: LD_INT 46
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: CALL_OW 321
4540: PUSH
4541: LD_INT 1
4543: EQUAL
4544: PUSH
4545: LD_INT 35
4547: PPUSH
4548: LD_INT 1
4550: PPUSH
4551: CALL_OW 321
4555: PUSH
4556: LD_INT 1
4558: EQUAL
4559: AND
4560: IFFALSE 4584
// begin Say ( JMM , D9c-JMM-1 ) ;
4562: LD_EXP 1
4566: PPUSH
4567: LD_STRING D9c-JMM-1
4569: PPUSH
4570: CALL_OW 88
// energyVDialog = 1 ;
4574: LD_ADDR_EXP 33
4578: PUSH
4579: LD_INT 1
4581: ST_TO_ADDR
// end else
4582: GO 4738
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4584: LD_INT 35
4586: PPUSH
4587: LD_INT 1
4589: PPUSH
4590: CALL_OW 321
4594: PUSH
4595: LD_INT 2
4597: EQUAL
4598: PUSH
4599: LD_EXP 33
4603: PUSH
4604: LD_INT 0
4606: EQUAL
4607: AND
4608: IFFALSE 4630
// begin Say ( JMM , D9c-JMM-1a ) ;
4610: LD_EXP 1
4614: PPUSH
4615: LD_STRING D9c-JMM-1a
4617: PPUSH
4618: CALL_OW 88
// energyVDialog = 1 ;
4622: LD_ADDR_EXP 33
4626: PUSH
4627: LD_INT 1
4629: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4630: LD_INT 46
4632: PPUSH
4633: LD_INT 1
4635: PPUSH
4636: CALL_OW 321
4640: PUSH
4641: LD_INT 2
4643: EQUAL
4644: PUSH
4645: LD_EXP 33
4649: PUSH
4650: LD_INT 0
4652: EQUAL
4653: AND
4654: IFFALSE 4676
// begin Say ( JMM , D9c-JMM-1b ) ;
4656: LD_EXP 1
4660: PPUSH
4661: LD_STRING D9c-JMM-1b
4663: PPUSH
4664: CALL_OW 88
// energyVDialog = 1 ;
4668: LD_ADDR_EXP 33
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4676: LD_INT 46
4678: PPUSH
4679: LD_INT 1
4681: PPUSH
4682: CALL_OW 321
4686: PUSH
4687: LD_INT 2
4689: EQUAL
4690: PUSH
4691: LD_INT 21
4693: PPUSH
4694: LD_INT 1
4696: PPUSH
4697: CALL_OW 321
4701: PUSH
4702: LD_INT 2
4704: EQUAL
4705: AND
4706: PUSH
4707: LD_EXP 33
4711: PUSH
4712: LD_INT 0
4714: EQUAL
4715: AND
4716: IFFALSE 4738
// begin Say ( JMM , D9c-JMM-1c ) ;
4718: LD_EXP 1
4722: PPUSH
4723: LD_STRING D9c-JMM-1c
4725: PPUSH
4726: CALL_OW 88
// energyVDialog = 1 ;
4730: LD_ADDR_EXP 33
4734: PUSH
4735: LD_INT 1
4737: ST_TO_ADDR
// end ; end ; end ;
4738: LD_VAR 0 1
4742: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4743: LD_INT 0
4745: PPUSH
4746: PPUSH
4747: PPUSH
4748: PPUSH
4749: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4750: LD_VAR 0 1
4754: NOT
4755: PUSH
4756: LD_VAR 0 1
4760: PPUSH
4761: CALL_OW 256
4765: PUSH
4766: LD_INT 250
4768: LESS
4769: OR
4770: PUSH
4771: LD_VAR 0 1
4775: PPUSH
4776: CALL_OW 314
4780: PUSH
4781: LD_VAR 0 1
4785: PPUSH
4786: CALL_OW 261
4790: PUSH
4791: LD_INT 20
4793: GREATER
4794: AND
4795: OR
4796: IFFALSE 4800
// exit ;
4798: GO 5165
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4800: LD_VAR 0 1
4804: PPUSH
4805: CALL_OW 261
4809: PUSH
4810: LD_INT 20
4812: LESS
4813: PUSH
4814: LD_VAR 0 1
4818: PPUSH
4819: CALL_OW 110
4823: PUSH
4824: LD_INT 21
4826: EQUAL
4827: NOT
4828: AND
4829: IFFALSE 4856
// begin ComStop ( bulldozer ) ;
4831: LD_VAR 0 1
4835: PPUSH
4836: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4840: LD_VAR 0 1
4844: PPUSH
4845: LD_INT 21
4847: PPUSH
4848: CALL_OW 109
// exit ;
4852: GO 5165
// end else
4854: GO 4883
// if GetFuel ( bulldozer ) > 20 then
4856: LD_VAR 0 1
4860: PPUSH
4861: CALL_OW 261
4865: PUSH
4866: LD_INT 20
4868: GREATER
4869: IFFALSE 4883
// SetTag ( bulldozer , 0 ) ;
4871: LD_VAR 0 1
4875: PPUSH
4876: LD_INT 0
4878: PPUSH
4879: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4883: LD_ADDR_VAR 0 5
4887: PUSH
4888: LD_VAR 0 2
4892: PPUSH
4893: CALL_OW 353
4897: ST_TO_ADDR
// tmp := [ ] ;
4898: LD_ADDR_VAR 0 6
4902: PUSH
4903: EMPTY
4904: ST_TO_ADDR
// for i = 1 to list do
4905: LD_ADDR_VAR 0 4
4909: PUSH
4910: DOUBLE
4911: LD_INT 1
4913: DEC
4914: ST_TO_ADDR
4915: LD_VAR 0 5
4919: PUSH
4920: FOR_TO
4921: IFFALSE 5019
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
4923: LD_VAR 0 5
4927: PUSH
4928: LD_VAR 0 4
4932: ARRAY
4933: PUSH
4934: LD_INT 1
4936: ARRAY
4937: PPUSH
4938: LD_VAR 0 5
4942: PUSH
4943: LD_VAR 0 4
4947: ARRAY
4948: PUSH
4949: LD_INT 2
4951: ARRAY
4952: PPUSH
4953: CALL_OW 554
4957: IFFALSE 5017
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
4959: LD_ADDR_VAR 0 6
4963: PUSH
4964: LD_VAR 0 6
4968: PPUSH
4969: LD_VAR 0 6
4973: PUSH
4974: LD_INT 1
4976: PLUS
4977: PPUSH
4978: LD_VAR 0 5
4982: PUSH
4983: LD_VAR 0 4
4987: ARRAY
4988: PUSH
4989: LD_INT 1
4991: ARRAY
4992: PUSH
4993: LD_VAR 0 5
4997: PUSH
4998: LD_VAR 0 4
5002: ARRAY
5003: PUSH
5004: LD_INT 2
5006: ARRAY
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PPUSH
5012: CALL_OW 1
5016: ST_TO_ADDR
// end ;
5017: GO 4920
5019: POP
5020: POP
// ComStop ( bulldozer ) ;
5021: LD_VAR 0 1
5025: PPUSH
5026: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5030: LD_ADDR_VAR 0 7
5034: PUSH
5035: LD_VAR 0 1
5039: PPUSH
5040: CALL_OW 250
5044: PUSH
5045: LD_VAR 0 1
5049: PPUSH
5050: CALL_OW 251
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: ST_TO_ADDR
// for i = tmp downto 1 do
5059: LD_ADDR_VAR 0 4
5063: PUSH
5064: DOUBLE
5065: LD_VAR 0 6
5069: INC
5070: ST_TO_ADDR
5071: LD_INT 1
5073: PUSH
5074: FOR_DOWNTO
5075: IFFALSE 5163
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5077: LD_ADDR_VAR 0 7
5081: PUSH
5082: LD_VAR 0 7
5086: PUSH
5087: LD_INT 1
5089: ARRAY
5090: PPUSH
5091: LD_VAR 0 7
5095: PUSH
5096: LD_INT 2
5098: ARRAY
5099: PPUSH
5100: LD_VAR 0 6
5104: PPUSH
5105: CALL 5266 0 3
5109: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5110: LD_VAR 0 1
5114: PPUSH
5115: LD_VAR 0 7
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PPUSH
5124: LD_VAR 0 7
5128: PUSH
5129: LD_INT 2
5131: ARRAY
5132: PPUSH
5133: CALL 5170 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5137: LD_ADDR_VAR 0 6
5141: PUSH
5142: LD_VAR 0 6
5146: PPUSH
5147: LD_VAR 0 7
5151: PUSH
5152: LD_INT 3
5154: ARRAY
5155: PPUSH
5156: CALL_OW 3
5160: ST_TO_ADDR
// end ;
5161: GO 5074
5163: POP
5164: POP
// end ;
5165: LD_VAR 0 3
5169: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5170: LD_INT 0
5172: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5173: LD_VAR 0 2
5177: PPUSH
5178: LD_VAR 0 3
5182: PPUSH
5183: CALL_OW 351
5187: PUSH
5188: LD_VAR 0 2
5192: PPUSH
5193: LD_VAR 0 3
5197: PPUSH
5198: CALL_OW 554
5202: AND
5203: PUSH
5204: LD_VAR 0 2
5208: PPUSH
5209: LD_VAR 0 3
5213: PPUSH
5214: CALL_OW 488
5218: AND
5219: PUSH
5220: LD_VAR 0 2
5224: PPUSH
5225: LD_VAR 0 3
5229: PPUSH
5230: CALL_OW 428
5234: PUSH
5235: LD_INT 1
5237: NEG
5238: EQUAL
5239: AND
5240: IFFALSE 5261
// AddComMoveXY ( bulldozer , x , y ) ;
5242: LD_VAR 0 1
5246: PPUSH
5247: LD_VAR 0 2
5251: PPUSH
5252: LD_VAR 0 3
5256: PPUSH
5257: CALL_OW 171
// end ;
5261: LD_VAR 0 4
5265: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5266: LD_INT 0
5268: PPUSH
5269: PPUSH
5270: PPUSH
5271: PPUSH
5272: PPUSH
5273: PPUSH
5274: PPUSH
// dist := 99999 ;
5275: LD_ADDR_VAR 0 6
5279: PUSH
5280: LD_INT 99999
5282: ST_TO_ADDR
// for i = 1 to list do
5283: LD_ADDR_VAR 0 5
5287: PUSH
5288: DOUBLE
5289: LD_INT 1
5291: DEC
5292: ST_TO_ADDR
5293: LD_VAR 0 3
5297: PUSH
5298: FOR_TO
5299: IFFALSE 5437
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5301: LD_ADDR_VAR 0 7
5305: PUSH
5306: LD_VAR 0 1
5310: PPUSH
5311: LD_VAR 0 2
5315: PPUSH
5316: LD_VAR 0 3
5320: PUSH
5321: LD_VAR 0 5
5325: ARRAY
5326: PUSH
5327: LD_INT 1
5329: ARRAY
5330: PPUSH
5331: LD_VAR 0 3
5335: PUSH
5336: LD_VAR 0 5
5340: ARRAY
5341: PUSH
5342: LD_INT 2
5344: ARRAY
5345: PPUSH
5346: CALL_OW 298
5350: ST_TO_ADDR
// if d = 0 then
5351: LD_VAR 0 7
5355: PUSH
5356: LD_INT 0
5358: EQUAL
5359: IFFALSE 5363
// continue ;
5361: GO 5298
// if d < dist then
5363: LD_VAR 0 7
5367: PUSH
5368: LD_VAR 0 6
5372: LESS
5373: IFFALSE 5435
// begin _x := list [ i ] [ 1 ] ;
5375: LD_ADDR_VAR 0 8
5379: PUSH
5380: LD_VAR 0 3
5384: PUSH
5385: LD_VAR 0 5
5389: ARRAY
5390: PUSH
5391: LD_INT 1
5393: ARRAY
5394: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5395: LD_ADDR_VAR 0 9
5399: PUSH
5400: LD_VAR 0 3
5404: PUSH
5405: LD_VAR 0 5
5409: ARRAY
5410: PUSH
5411: LD_INT 2
5413: ARRAY
5414: ST_TO_ADDR
// _i := i ;
5415: LD_ADDR_VAR 0 10
5419: PUSH
5420: LD_VAR 0 5
5424: ST_TO_ADDR
// dist := d ;
5425: LD_ADDR_VAR 0 6
5429: PUSH
5430: LD_VAR 0 7
5434: ST_TO_ADDR
// end ; end ;
5435: GO 5298
5437: POP
5438: POP
// result := [ _x , _y , _i , dist ] ;
5439: LD_ADDR_VAR 0 4
5443: PUSH
5444: LD_VAR 0 8
5448: PUSH
5449: LD_VAR 0 9
5453: PUSH
5454: LD_VAR 0 10
5458: PUSH
5459: LD_VAR 0 6
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: ST_TO_ADDR
// end ;
5470: LD_VAR 0 4
5474: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5475: LD_INT 0
5477: PPUSH
5478: PPUSH
5479: PPUSH
5480: PPUSH
// for i = 1 to 72 do
5481: LD_ADDR_VAR 0 5
5485: PUSH
5486: DOUBLE
5487: LD_INT 1
5489: DEC
5490: ST_TO_ADDR
5491: LD_INT 72
5493: PUSH
5494: FOR_TO
5495: IFFALSE 5553
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5497: LD_VAR 0 5
5501: PPUSH
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 321
5511: PUSH
5512: LD_INT 1
5514: EQUAL
5515: PUSH
5516: LD_VAR 0 5
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: CALL_OW 482
5530: PUSH
5531: LD_INT 1
5533: EQUAL
5534: AND
5535: IFFALSE 5551
// AddComResearch ( lab , i ) ;
5537: LD_VAR 0 2
5541: PPUSH
5542: LD_VAR 0 5
5546: PPUSH
5547: CALL_OW 184
5551: GO 5494
5553: POP
5554: POP
// end ;
5555: LD_VAR 0 4
5559: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5560: LD_INT 0
5562: PPUSH
5563: PPUSH
5564: PPUSH
5565: PPUSH
5566: PPUSH
5567: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
5568: LD_ADDR_VAR 0 7
5572: PUSH
5573: LD_VAR 0 2
5577: PPUSH
5578: CALL_OW 313
5582: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
5583: LD_ADDR_VAR 0 8
5587: PUSH
5588: LD_VAR 0 3
5592: PPUSH
5593: LD_INT 22
5595: PUSH
5596: LD_VAR 0 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 25
5607: PUSH
5608: LD_INT 2
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: LD_INT 24
5617: PUSH
5618: LD_INT 750
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PUSH
5625: LD_INT 3
5627: PUSH
5628: LD_INT 54
5630: PUSH
5631: EMPTY
5632: LIST
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: PPUSH
5644: CALL_OW 70
5648: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5649: LD_ADDR_VAR 0 5
5653: PUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: LD_INT 22
5661: PUSH
5662: LD_VAR 0 1
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 21
5673: PUSH
5674: LD_INT 3
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: LD_INT 3
5683: PUSH
5684: LD_INT 24
5686: PUSH
5687: LD_INT 1000
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: PUSH
5703: EMPTY
5704: LIST
5705: PPUSH
5706: CALL_OW 70
5710: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
5711: LD_VAR 0 5
5715: NOT
5716: PUSH
5717: LD_INT 22
5719: PUSH
5720: LD_VAR 0 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: LD_INT 25
5731: PUSH
5732: LD_INT 2
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: LD_INT 24
5741: PUSH
5742: LD_INT 250
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: LIST
5753: PPUSH
5754: CALL_OW 69
5758: NOT
5759: AND
5760: IFFALSE 5764
// exit ;
5762: GO 5861
// if buildings_list > 0 and engineerOkInside then
5764: LD_VAR 0 5
5768: PUSH
5769: LD_INT 0
5771: GREATER
5772: PUSH
5773: LD_VAR 0 7
5777: AND
5778: IFFALSE 5789
// ComExitBuilding ( engineerOkInside ) ;
5780: LD_VAR 0 7
5784: PPUSH
5785: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
5789: LD_VAR 0 5
5793: PUSH
5794: LD_INT 0
5796: GREATER
5797: PUSH
5798: LD_VAR 0 8
5802: PUSH
5803: LD_INT 0
5805: GREATER
5806: AND
5807: IFFALSE 5827
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
5809: LD_VAR 0 8
5813: PPUSH
5814: LD_VAR 0 5
5818: PUSH
5819: LD_INT 1
5821: ARRAY
5822: PPUSH
5823: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
5827: LD_VAR 0 5
5831: PUSH
5832: LD_INT 0
5834: EQUAL
5835: PUSH
5836: LD_VAR 0 8
5840: PUSH
5841: LD_INT 0
5843: GREATER
5844: AND
5845: IFFALSE 5861
// ComEnterUnit ( engineerOkOutside , building ) ;
5847: LD_VAR 0 8
5851: PPUSH
5852: LD_VAR 0 2
5856: PPUSH
5857: CALL_OW 120
// end ;
5861: LD_VAR 0 4
5865: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
5866: LD_INT 0
5868: PPUSH
5869: PPUSH
5870: PPUSH
5871: PPUSH
5872: PPUSH
5873: PPUSH
5874: PPUSH
5875: PPUSH
5876: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
5877: LD_ADDR_VAR 0 6
5881: PUSH
5882: LD_INT 22
5884: PUSH
5885: LD_VAR 0 1
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: PUSH
5894: LD_INT 25
5896: PUSH
5897: LD_INT 4
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PUSH
5904: LD_INT 23
5906: PUSH
5907: LD_INT 2
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: LD_INT 24
5916: PUSH
5917: LD_INT 251
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: PPUSH
5930: CALL_OW 69
5934: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
5935: LD_ADDR_VAR 0 7
5939: PUSH
5940: LD_VAR 0 3
5944: PPUSH
5945: LD_INT 22
5947: PUSH
5948: LD_VAR 0 1
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 23
5959: PUSH
5960: LD_INT 2
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 25
5969: PUSH
5970: LD_INT 4
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 50
5979: PUSH
5980: EMPTY
5981: LIST
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: PPUSH
5989: CALL_OW 70
5993: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5994: LD_ADDR_VAR 0 10
5998: PUSH
5999: LD_VAR 0 3
6003: PPUSH
6004: LD_INT 22
6006: PUSH
6007: LD_VAR 0 1
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PUSH
6016: LD_INT 21
6018: PUSH
6019: LD_INT 1
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 3
6028: PUSH
6029: LD_INT 25
6031: PUSH
6032: LD_INT 3
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: LD_INT 24
6048: PUSH
6049: LD_INT 750
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: PPUSH
6066: CALL_OW 70
6070: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6071: LD_ADDR_VAR 0 11
6075: PUSH
6076: LD_VAR 0 2
6080: PPUSH
6081: LD_INT 22
6083: PUSH
6084: LD_VAR 0 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: LD_INT 21
6095: PUSH
6096: LD_INT 1
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: LD_INT 3
6105: PUSH
6106: LD_INT 25
6108: PUSH
6109: LD_INT 3
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 3
6122: PUSH
6123: LD_INT 24
6125: PUSH
6126: LD_INT 1000
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: PPUSH
6143: CALL_OW 70
6147: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6148: LD_VAR 0 10
6152: NOT
6153: PUSH
6154: LD_VAR 0 11
6158: NOT
6159: AND
6160: PUSH
6161: LD_VAR 0 6
6165: NOT
6166: AND
6167: IFFALSE 6171
// exit ;
6169: GO 6405
// if damageUnits > 0 and sci_list > 0 then
6171: LD_VAR 0 10
6175: PUSH
6176: LD_INT 0
6178: GREATER
6179: PUSH
6180: LD_VAR 0 6
6184: PUSH
6185: LD_INT 0
6187: GREATER
6188: AND
6189: IFFALSE 6205
// ComMoveToArea ( damageUnits , healArea ) ;
6191: LD_VAR 0 10
6195: PPUSH
6196: LD_VAR 0 2
6200: PPUSH
6201: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6205: LD_VAR 0 11
6209: PUSH
6210: LD_INT 0
6212: GREATER
6213: PUSH
6214: LD_VAR 0 6
6218: PUSH
6219: LD_INT 0
6221: GREATER
6222: AND
6223: IFFALSE 6234
// ComExitBuilding ( sci_list ) ;
6225: LD_VAR 0 6
6229: PPUSH
6230: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6234: LD_VAR 0 11
6238: PUSH
6239: LD_INT 0
6241: GREATER
6242: PUSH
6243: LD_VAR 0 7
6247: PUSH
6248: LD_INT 0
6250: GREATER
6251: AND
6252: IFFALSE 6272
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6254: LD_VAR 0 7
6258: PPUSH
6259: LD_VAR 0 11
6263: PUSH
6264: LD_INT 1
6266: ARRAY
6267: PPUSH
6268: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6272: LD_VAR 0 10
6276: PUSH
6277: LD_INT 0
6279: EQUAL
6280: PUSH
6281: LD_VAR 0 11
6285: PUSH
6286: LD_INT 0
6288: EQUAL
6289: AND
6290: PUSH
6291: LD_VAR 0 7
6295: PUSH
6296: LD_INT 0
6298: GREATER
6299: AND
6300: IFFALSE 6405
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6302: LD_ADDR_VAR 0 12
6306: PUSH
6307: LD_INT 22
6309: PUSH
6310: LD_VAR 0 1
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 21
6321: PUSH
6322: LD_INT 3
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 30
6331: PUSH
6332: LD_INT 8
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: PPUSH
6344: CALL_OW 69
6348: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6349: LD_ADDR_VAR 0 13
6353: PUSH
6354: LD_INT 1
6356: PPUSH
6357: LD_VAR 0 12
6361: PPUSH
6362: CALL_OW 12
6366: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6367: LD_VAR 0 7
6371: PPUSH
6372: LD_INT 3
6374: PUSH
6375: LD_INT 60
6377: PUSH
6378: EMPTY
6379: LIST
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PPUSH
6385: CALL_OW 72
6389: PPUSH
6390: LD_VAR 0 12
6394: PUSH
6395: LD_VAR 0 13
6399: ARRAY
6400: PPUSH
6401: CALL_OW 120
// end ; end ;
6405: LD_VAR 0 5
6409: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6410: LD_INT 0
6412: PPUSH
6413: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6414: LD_INT 22
6416: PUSH
6417: LD_VAR 0 1
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PUSH
6426: LD_INT 21
6428: PUSH
6429: LD_INT 2
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: PPUSH
6440: CALL_OW 69
6444: PUSH
6445: LD_VAR 0 3
6449: LESSEQUAL
6450: IFFALSE 6517
// for i = 1 to vehCount do
6452: LD_ADDR_VAR 0 9
6456: PUSH
6457: DOUBLE
6458: LD_INT 1
6460: DEC
6461: ST_TO_ADDR
6462: LD_VAR 0 3
6466: PUSH
6467: FOR_TO
6468: IFFALSE 6515
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6470: LD_VAR 0 2
6474: PPUSH
6475: LD_VAR 0 7
6479: PPUSH
6480: LD_VAR 0 5
6484: PPUSH
6485: LD_VAR 0 6
6489: PPUSH
6490: LD_VAR 0 4
6494: PUSH
6495: LD_INT 1
6497: PPUSH
6498: LD_VAR 0 4
6502: PPUSH
6503: CALL_OW 12
6507: ARRAY
6508: PPUSH
6509: CALL_OW 185
6513: GO 6467
6515: POP
6516: POP
// end ;
6517: LD_VAR 0 8
6521: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6522: LD_INT 0
6524: PPUSH
6525: PPUSH
6526: PPUSH
6527: PPUSH
6528: PPUSH
6529: PPUSH
6530: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6531: LD_ADDR_VAR 0 8
6535: PUSH
6536: LD_INT 22
6538: PUSH
6539: LD_VAR 0 1
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 21
6550: PUSH
6551: LD_INT 2
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 24
6560: PUSH
6561: LD_INT 650
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: LIST
6572: PPUSH
6573: CALL_OW 69
6577: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
6578: LD_INT 22
6580: PUSH
6581: LD_VAR 0 1
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: LD_INT 21
6592: PUSH
6593: LD_INT 2
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 24
6602: PUSH
6603: LD_INT 1000
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: LIST
6614: PPUSH
6615: CALL_OW 69
6619: PUSH
6620: LD_INT 3
6622: PUSH
6623: LD_INT 4
6625: PUSH
6626: LD_INT 5
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: LIST
6633: PUSH
6634: LD_OWVAR 67
6638: ARRAY
6639: GREATEREQUAL
6640: IFFALSE 7097
// repeat wait ( 0 0$1 ) ;
6642: LD_INT 35
6644: PPUSH
6645: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6649: LD_ADDR_VAR 0 8
6653: PUSH
6654: LD_INT 22
6656: PUSH
6657: LD_VAR 0 1
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: LD_INT 21
6668: PUSH
6669: LD_INT 2
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: LD_INT 24
6678: PUSH
6679: LD_INT 650
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: PPUSH
6691: CALL_OW 69
6695: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
6696: LD_INT 22
6698: PUSH
6699: LD_VAR 0 1
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 95
6710: PUSH
6711: LD_VAR 0 2
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PPUSH
6724: CALL_OW 69
6728: NOT
6729: PUSH
6730: LD_VAR 0 11
6734: PUSH
6735: LD_INT 0
6737: EQUAL
6738: AND
6739: IFFALSE 6794
// for i := 1 to wayX do
6741: LD_ADDR_VAR 0 6
6745: PUSH
6746: DOUBLE
6747: LD_INT 1
6749: DEC
6750: ST_TO_ADDR
6751: LD_VAR 0 3
6755: PUSH
6756: FOR_TO
6757: IFFALSE 6792
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
6759: LD_VAR 0 8
6763: PPUSH
6764: LD_VAR 0 3
6768: PUSH
6769: LD_VAR 0 6
6773: ARRAY
6774: PPUSH
6775: LD_VAR 0 4
6779: PUSH
6780: LD_VAR 0 6
6784: ARRAY
6785: PPUSH
6786: CALL_OW 174
6790: GO 6756
6792: POP
6793: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
6794: LD_INT 22
6796: PUSH
6797: LD_VAR 0 1
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 95
6808: PUSH
6809: LD_VAR 0 2
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PPUSH
6822: CALL_OW 69
6826: IFFALSE 7050
// begin seeEnemy = 1 ;
6828: LD_ADDR_VAR 0 11
6832: PUSH
6833: LD_INT 1
6835: ST_TO_ADDR
// for j in vehiclesOK do
6836: LD_ADDR_VAR 0 7
6840: PUSH
6841: LD_VAR 0 8
6845: PUSH
6846: FOR_IN
6847: IFFALSE 7048
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
6849: LD_ADDR_VAR 0 9
6853: PUSH
6854: LD_INT 81
6856: PUSH
6857: LD_VAR 0 1
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 101
6868: PUSH
6869: LD_INT 1
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PPUSH
6880: CALL_OW 69
6884: PPUSH
6885: LD_VAR 0 7
6889: PPUSH
6890: CALL_OW 74
6894: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
6895: LD_ADDR_VAR 0 10
6899: PUSH
6900: LD_INT 81
6902: PUSH
6903: LD_VAR 0 1
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 101
6914: PUSH
6915: LD_INT 1
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 2
6924: PUSH
6925: LD_INT 59
6927: PUSH
6928: EMPTY
6929: LIST
6930: PUSH
6931: LD_INT 21
6933: PUSH
6934: LD_INT 1
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PUSH
6941: LD_INT 21
6943: PUSH
6944: LD_INT 2
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: PUSH
6962: EMPTY
6963: LIST
6964: PPUSH
6965: CALL_OW 69
6969: PPUSH
6970: LD_VAR 0 7
6974: PPUSH
6975: CALL_OW 74
6979: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
6980: LD_VAR 0 7
6984: PPUSH
6985: LD_VAR 0 9
6989: PPUSH
6990: CALL_OW 296
6994: PUSH
6995: LD_INT 8
6997: PLUS
6998: PUSH
6999: LD_VAR 0 7
7003: PPUSH
7004: LD_VAR 0 10
7008: PPUSH
7009: CALL_OW 296
7013: LESS
7014: IFFALSE 7032
// ComAttackUnit ( j , target1 ) else
7016: LD_VAR 0 7
7020: PPUSH
7021: LD_VAR 0 9
7025: PPUSH
7026: CALL_OW 115
7030: GO 7046
// ComAttackUnit ( j , target2 ) ;
7032: LD_VAR 0 7
7036: PPUSH
7037: LD_VAR 0 10
7041: PPUSH
7042: CALL_OW 115
// end ;
7046: GO 6846
7048: POP
7049: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7050: LD_INT 22
7052: PUSH
7053: LD_VAR 0 1
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 21
7064: PUSH
7065: LD_INT 2
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: LD_INT 24
7074: PUSH
7075: LD_INT 1000
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: PUSH
7092: LD_INT 0
7094: EQUAL
7095: IFFALSE 6642
// seeEnemy = 0 ;
7097: LD_ADDR_VAR 0 11
7101: PUSH
7102: LD_INT 0
7104: ST_TO_ADDR
// end ;
7105: LD_VAR 0 5
7109: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7110: LD_INT 0
7112: PPUSH
7113: PPUSH
7114: PPUSH
7115: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7116: LD_ADDR_VAR 0 8
7120: PUSH
7121: LD_INT 22
7123: PUSH
7124: LD_VAR 0 1
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 21
7135: PUSH
7136: LD_INT 2
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PUSH
7143: LD_INT 3
7145: PUSH
7146: LD_INT 24
7148: PUSH
7149: LD_INT 650
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: LIST
7164: PPUSH
7165: CALL_OW 69
7169: ST_TO_ADDR
// if damageVehicles > 0 then
7170: LD_VAR 0 8
7174: PUSH
7175: LD_INT 0
7177: GREATER
7178: IFFALSE 7199
// ComMoveXY ( damageVehicles , repX , repY ) ;
7180: LD_VAR 0 8
7184: PPUSH
7185: LD_VAR 0 3
7189: PPUSH
7190: LD_VAR 0 4
7194: PPUSH
7195: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7199: LD_VAR 0 8
7203: PPUSH
7204: LD_INT 95
7206: PUSH
7207: LD_VAR 0 2
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 3
7218: PUSH
7219: LD_INT 58
7221: PUSH
7222: EMPTY
7223: LIST
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PPUSH
7233: CALL_OW 72
7237: PUSH
7238: LD_INT 0
7240: GREATER
7241: IFFALSE 7308
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7243: LD_ADDR_VAR 0 6
7247: PUSH
7248: LD_VAR 0 8
7252: PPUSH
7253: LD_INT 95
7255: PUSH
7256: LD_VAR 0 2
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 58
7270: PUSH
7271: EMPTY
7272: LIST
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 72
7286: PUSH
7287: FOR_IN
7288: IFFALSE 7306
// ComExitVehicle ( UnitsInside ( i ) ) ;
7290: LD_VAR 0 6
7294: PPUSH
7295: CALL_OW 313
7299: PPUSH
7300: CALL_OW 121
7304: GO 7287
7306: POP
7307: POP
// end ;
7308: LD_VAR 0 5
7312: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7313: LD_INT 0
7315: PPUSH
7316: PPUSH
7317: PPUSH
7318: PPUSH
7319: PPUSH
7320: PPUSH
7321: PPUSH
7322: PPUSH
7323: PPUSH
7324: PPUSH
7325: PPUSH
// for i = 1 to medicCount do
7326: LD_ADDR_VAR 0 14
7330: PUSH
7331: DOUBLE
7332: LD_INT 1
7334: DEC
7335: ST_TO_ADDR
7336: LD_VAR 0 7
7340: PUSH
7341: FOR_TO
7342: IFFALSE 7424
// begin uc_side = side ;
7344: LD_ADDR_OWVAR 20
7348: PUSH
7349: LD_VAR 0 1
7353: ST_TO_ADDR
// uc_nation = nation ;
7354: LD_ADDR_OWVAR 21
7358: PUSH
7359: LD_VAR 0 2
7363: ST_TO_ADDR
// hc_name =  ;
7364: LD_ADDR_OWVAR 26
7368: PUSH
7369: LD_STRING 
7371: ST_TO_ADDR
// hc_gallery =  ;
7372: LD_ADDR_OWVAR 33
7376: PUSH
7377: LD_STRING 
7379: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7380: LD_INT 0
7382: PPUSH
7383: LD_INT 4
7385: PPUSH
7386: LD_VAR 0 8
7390: PPUSH
7391: CALL_OW 380
// un = CreateHuman ;
7395: LD_ADDR_VAR 0 16
7399: PUSH
7400: CALL_OW 44
7404: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7405: LD_VAR 0 16
7409: PPUSH
7410: LD_VAR 0 9
7414: PPUSH
7415: LD_INT 0
7417: PPUSH
7418: CALL_OW 49
// end ;
7422: GO 7341
7424: POP
7425: POP
// for i = 1 to soldierCount do
7426: LD_ADDR_VAR 0 14
7430: PUSH
7431: DOUBLE
7432: LD_INT 1
7434: DEC
7435: ST_TO_ADDR
7436: LD_VAR 0 3
7440: PUSH
7441: FOR_TO
7442: IFFALSE 7524
// begin uc_side = side ;
7444: LD_ADDR_OWVAR 20
7448: PUSH
7449: LD_VAR 0 1
7453: ST_TO_ADDR
// uc_nation = nation ;
7454: LD_ADDR_OWVAR 21
7458: PUSH
7459: LD_VAR 0 2
7463: ST_TO_ADDR
// hc_name =  ;
7464: LD_ADDR_OWVAR 26
7468: PUSH
7469: LD_STRING 
7471: ST_TO_ADDR
// hc_gallery =  ;
7472: LD_ADDR_OWVAR 33
7476: PUSH
7477: LD_STRING 
7479: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7480: LD_INT 0
7482: PPUSH
7483: LD_INT 1
7485: PPUSH
7486: LD_VAR 0 8
7490: PPUSH
7491: CALL_OW 380
// un = CreateHuman ;
7495: LD_ADDR_VAR 0 16
7499: PUSH
7500: CALL_OW 44
7504: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7505: LD_VAR 0 16
7509: PPUSH
7510: LD_VAR 0 9
7514: PPUSH
7515: LD_INT 0
7517: PPUSH
7518: CALL_OW 49
// end ;
7522: GO 7441
7524: POP
7525: POP
// for i = 1 to sniperCount do
7526: LD_ADDR_VAR 0 14
7530: PUSH
7531: DOUBLE
7532: LD_INT 1
7534: DEC
7535: ST_TO_ADDR
7536: LD_VAR 0 4
7540: PUSH
7541: FOR_TO
7542: IFFALSE 7624
// begin uc_side = side ;
7544: LD_ADDR_OWVAR 20
7548: PUSH
7549: LD_VAR 0 1
7553: ST_TO_ADDR
// uc_nation = nation ;
7554: LD_ADDR_OWVAR 21
7558: PUSH
7559: LD_VAR 0 2
7563: ST_TO_ADDR
// hc_name =  ;
7564: LD_ADDR_OWVAR 26
7568: PUSH
7569: LD_STRING 
7571: ST_TO_ADDR
// hc_gallery =  ;
7572: LD_ADDR_OWVAR 33
7576: PUSH
7577: LD_STRING 
7579: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7580: LD_INT 0
7582: PPUSH
7583: LD_INT 5
7585: PPUSH
7586: LD_VAR 0 8
7590: PPUSH
7591: CALL_OW 380
// un = CreateHuman ;
7595: LD_ADDR_VAR 0 16
7599: PUSH
7600: CALL_OW 44
7604: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7605: LD_VAR 0 16
7609: PPUSH
7610: LD_VAR 0 9
7614: PPUSH
7615: LD_INT 0
7617: PPUSH
7618: CALL_OW 49
// end ;
7622: GO 7541
7624: POP
7625: POP
// for i = 1 to bazookCount do
7626: LD_ADDR_VAR 0 14
7630: PUSH
7631: DOUBLE
7632: LD_INT 1
7634: DEC
7635: ST_TO_ADDR
7636: LD_VAR 0 5
7640: PUSH
7641: FOR_TO
7642: IFFALSE 7724
// begin uc_side = side ;
7644: LD_ADDR_OWVAR 20
7648: PUSH
7649: LD_VAR 0 1
7653: ST_TO_ADDR
// uc_nation = nation ;
7654: LD_ADDR_OWVAR 21
7658: PUSH
7659: LD_VAR 0 2
7663: ST_TO_ADDR
// hc_name =  ;
7664: LD_ADDR_OWVAR 26
7668: PUSH
7669: LD_STRING 
7671: ST_TO_ADDR
// hc_gallery =  ;
7672: LD_ADDR_OWVAR 33
7676: PUSH
7677: LD_STRING 
7679: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7680: LD_INT 0
7682: PPUSH
7683: LD_INT 9
7685: PPUSH
7686: LD_VAR 0 8
7690: PPUSH
7691: CALL_OW 380
// un = CreateHuman ;
7695: LD_ADDR_VAR 0 16
7699: PUSH
7700: CALL_OW 44
7704: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7705: LD_VAR 0 16
7709: PPUSH
7710: LD_VAR 0 9
7714: PPUSH
7715: LD_INT 0
7717: PPUSH
7718: CALL_OW 49
// end ;
7722: GO 7641
7724: POP
7725: POP
// for i = 1 to mortalCount do
7726: LD_ADDR_VAR 0 14
7730: PUSH
7731: DOUBLE
7732: LD_INT 1
7734: DEC
7735: ST_TO_ADDR
7736: LD_VAR 0 6
7740: PUSH
7741: FOR_TO
7742: IFFALSE 7824
// begin uc_side = side ;
7744: LD_ADDR_OWVAR 20
7748: PUSH
7749: LD_VAR 0 1
7753: ST_TO_ADDR
// uc_nation = nation ;
7754: LD_ADDR_OWVAR 21
7758: PUSH
7759: LD_VAR 0 2
7763: ST_TO_ADDR
// hc_name =  ;
7764: LD_ADDR_OWVAR 26
7768: PUSH
7769: LD_STRING 
7771: ST_TO_ADDR
// hc_gallery =  ;
7772: LD_ADDR_OWVAR 33
7776: PUSH
7777: LD_STRING 
7779: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7780: LD_INT 0
7782: PPUSH
7783: LD_INT 8
7785: PPUSH
7786: LD_VAR 0 8
7790: PPUSH
7791: CALL_OW 380
// un = CreateHuman ;
7795: LD_ADDR_VAR 0 16
7799: PUSH
7800: CALL_OW 44
7804: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7805: LD_VAR 0 16
7809: PPUSH
7810: LD_VAR 0 9
7814: PPUSH
7815: LD_INT 0
7817: PPUSH
7818: CALL_OW 49
// end ;
7822: GO 7741
7824: POP
7825: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7826: LD_ADDR_VAR 0 19
7830: PUSH
7831: LD_INT 22
7833: PUSH
7834: LD_VAR 0 1
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PUSH
7843: LD_INT 2
7845: PUSH
7846: LD_INT 25
7848: PUSH
7849: LD_INT 1
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PUSH
7856: LD_INT 25
7858: PUSH
7859: LD_INT 5
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 25
7868: PUSH
7869: LD_INT 8
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: PUSH
7876: LD_INT 25
7878: PUSH
7879: LD_INT 9
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PPUSH
7897: CALL_OW 69
7901: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7902: LD_ADDR_VAR 0 18
7906: PUSH
7907: LD_INT 22
7909: PUSH
7910: LD_VAR 0 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 25
7921: PUSH
7922: LD_INT 4
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PPUSH
7933: CALL_OW 69
7937: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7938: LD_VAR 0 18
7942: PPUSH
7943: LD_VAR 0 10
7947: PPUSH
7948: CALL_OW 113
// if strategy = 1 then
7952: LD_VAR 0 12
7956: PUSH
7957: LD_INT 1
7959: EQUAL
7960: IFFALSE 8476
// begin repeat wait ( 0 0$3 ) ;
7962: LD_INT 105
7964: PPUSH
7965: CALL_OW 67
// for i in soldiersOK_list do
7969: LD_ADDR_VAR 0 14
7973: PUSH
7974: LD_VAR 0 19
7978: PUSH
7979: FOR_IN
7980: IFFALSE 8044
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7982: LD_VAR 0 14
7986: PPUSH
7987: LD_INT 91
7989: PPUSH
7990: LD_INT 63
7992: PPUSH
7993: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7997: LD_VAR 0 14
8001: PPUSH
8002: LD_INT 101
8004: PPUSH
8005: LD_INT 53
8007: PPUSH
8008: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8012: LD_VAR 0 14
8016: PPUSH
8017: LD_INT 75
8019: PPUSH
8020: LD_INT 23
8022: PPUSH
8023: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8027: LD_VAR 0 14
8031: PPUSH
8032: LD_INT 78
8034: PPUSH
8035: LD_INT 8
8037: PPUSH
8038: CALL_OW 174
// end ;
8042: GO 7979
8044: POP
8045: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
8046: LD_INT 15
8048: PPUSH
8049: LD_INT 22
8051: PUSH
8052: LD_VAR 0 1
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PPUSH
8061: CALL_OW 70
8065: PUSH
8066: LD_INT 2
8068: GREATER
8069: IFFALSE 7962
// repeat wait ( 0 0$1 ) ;
8071: LD_INT 35
8073: PPUSH
8074: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8078: LD_ADDR_VAR 0 17
8082: PUSH
8083: LD_INT 22
8085: PUSH
8086: LD_VAR 0 1
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: LD_INT 1
8097: PUSH
8098: LD_INT 3
8100: PUSH
8101: LD_INT 24
8103: PUSH
8104: LD_INT 550
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: PUSH
8115: LD_INT 24
8117: PUSH
8118: LD_INT 250
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: LIST
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PPUSH
8134: CALL_OW 69
8138: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8139: LD_ADDR_VAR 0 19
8143: PUSH
8144: LD_INT 22
8146: PUSH
8147: LD_VAR 0 1
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 2
8158: PUSH
8159: LD_INT 25
8161: PUSH
8162: LD_INT 1
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: PUSH
8169: LD_INT 25
8171: PUSH
8172: LD_INT 5
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: PUSH
8179: LD_INT 25
8181: PUSH
8182: LD_INT 8
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PUSH
8189: LD_INT 25
8191: PUSH
8192: LD_INT 9
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 24
8208: PUSH
8209: LD_INT 1000
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: LIST
8220: PPUSH
8221: CALL_OW 69
8225: ST_TO_ADDR
// if medicCount > 0 then
8226: LD_VAR 0 7
8230: PUSH
8231: LD_INT 0
8233: GREATER
8234: IFFALSE 8278
// begin if damageUnit_list > 0 then
8236: LD_VAR 0 17
8240: PUSH
8241: LD_INT 0
8243: GREATER
8244: IFFALSE 8278
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8246: LD_VAR 0 17
8250: PPUSH
8251: LD_VAR 0 10
8255: PPUSH
8256: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8260: LD_VAR 0 7
8264: PPUSH
8265: LD_VAR 0 17
8269: PUSH
8270: LD_INT 1
8272: ARRAY
8273: PPUSH
8274: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8278: LD_ADDR_VAR 0 14
8282: PUSH
8283: LD_VAR 0 19
8287: PUSH
8288: FOR_IN
8289: IFFALSE 8465
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8291: LD_ADDR_VAR 0 22
8295: PUSH
8296: LD_INT 22
8298: PUSH
8299: LD_VAR 0 11
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PPUSH
8308: CALL_OW 69
8312: PPUSH
8313: LD_VAR 0 14
8317: PPUSH
8318: CALL_OW 74
8322: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8323: LD_ADDR_VAR 0 23
8327: PUSH
8328: LD_INT 22
8330: PUSH
8331: LD_VAR 0 11
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: LD_INT 2
8342: PUSH
8343: LD_INT 59
8345: PUSH
8346: EMPTY
8347: LIST
8348: PUSH
8349: LD_INT 21
8351: PUSH
8352: LD_INT 1
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_INT 21
8361: PUSH
8362: LD_INT 2
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: EMPTY
8380: LIST
8381: PPUSH
8382: CALL_OW 69
8386: PPUSH
8387: LD_VAR 0 14
8391: PPUSH
8392: CALL_OW 74
8396: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8397: LD_VAR 0 14
8401: PPUSH
8402: LD_VAR 0 22
8406: PPUSH
8407: CALL_OW 296
8411: PUSH
8412: LD_INT 8
8414: PLUS
8415: PUSH
8416: LD_VAR 0 14
8420: PPUSH
8421: LD_VAR 0 23
8425: PPUSH
8426: CALL_OW 296
8430: LESS
8431: IFFALSE 8449
// begin ComAttackUnit ( i , target1 ) ;
8433: LD_VAR 0 14
8437: PPUSH
8438: LD_VAR 0 22
8442: PPUSH
8443: CALL_OW 115
// end else
8447: GO 8463
// begin ComAttackUnit ( i , target2 ) ;
8449: LD_VAR 0 14
8453: PPUSH
8454: LD_VAR 0 23
8458: PPUSH
8459: CALL_OW 115
// end ; end ;
8463: GO 8288
8465: POP
8466: POP
// until soldiersOK_list = [ ] ;
8467: LD_VAR 0 19
8471: PUSH
8472: EMPTY
8473: EQUAL
8474: IFFALSE 8071
// end ; if strategy = 2 then
8476: LD_VAR 0 12
8480: PUSH
8481: LD_INT 2
8483: EQUAL
8484: IFFALSE 8970
// begin repeat wait ( 0 0$1 ) ;
8486: LD_INT 35
8488: PPUSH
8489: CALL_OW 67
// for i in soldiersOK_list do
8493: LD_ADDR_VAR 0 14
8497: PUSH
8498: LD_VAR 0 19
8502: PUSH
8503: FOR_IN
8504: IFFALSE 8538
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8506: LD_VAR 0 14
8510: PPUSH
8511: LD_INT 91
8513: PPUSH
8514: LD_INT 63
8516: PPUSH
8517: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8521: LD_VAR 0 14
8525: PPUSH
8526: LD_INT 75
8528: PPUSH
8529: LD_INT 33
8531: PPUSH
8532: CALL_OW 174
// end ;
8536: GO 8503
8538: POP
8539: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
8540: LD_INT 16
8542: PPUSH
8543: LD_INT 22
8545: PUSH
8546: LD_VAR 0 1
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PPUSH
8555: CALL_OW 70
8559: PUSH
8560: LD_INT 2
8562: GREATER
8563: IFFALSE 8486
// repeat wait ( 0 0$3 ) ;
8565: LD_INT 105
8567: PPUSH
8568: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8572: LD_ADDR_VAR 0 17
8576: PUSH
8577: LD_INT 22
8579: PUSH
8580: LD_VAR 0 1
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: LD_INT 1
8591: PUSH
8592: LD_INT 3
8594: PUSH
8595: LD_INT 24
8597: PUSH
8598: LD_INT 550
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: LD_INT 24
8611: PUSH
8612: LD_INT 250
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PPUSH
8628: CALL_OW 69
8632: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8633: LD_ADDR_VAR 0 19
8637: PUSH
8638: LD_INT 22
8640: PUSH
8641: LD_VAR 0 1
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 2
8652: PUSH
8653: LD_INT 25
8655: PUSH
8656: LD_INT 1
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: LD_INT 25
8665: PUSH
8666: LD_INT 5
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 25
8675: PUSH
8676: LD_INT 8
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 25
8685: PUSH
8686: LD_INT 9
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: PUSH
8700: LD_INT 24
8702: PUSH
8703: LD_INT 1000
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: LIST
8714: PPUSH
8715: CALL_OW 69
8719: ST_TO_ADDR
// if medicCount > 0 then
8720: LD_VAR 0 7
8724: PUSH
8725: LD_INT 0
8727: GREATER
8728: IFFALSE 8772
// begin if damageUnit_list > 0 then
8730: LD_VAR 0 17
8734: PUSH
8735: LD_INT 0
8737: GREATER
8738: IFFALSE 8772
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8740: LD_VAR 0 17
8744: PPUSH
8745: LD_VAR 0 10
8749: PPUSH
8750: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8754: LD_VAR 0 7
8758: PPUSH
8759: LD_VAR 0 17
8763: PUSH
8764: LD_INT 1
8766: ARRAY
8767: PPUSH
8768: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8772: LD_ADDR_VAR 0 14
8776: PUSH
8777: LD_VAR 0 19
8781: PUSH
8782: FOR_IN
8783: IFFALSE 8959
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8785: LD_ADDR_VAR 0 22
8789: PUSH
8790: LD_INT 22
8792: PUSH
8793: LD_VAR 0 11
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PPUSH
8802: CALL_OW 69
8806: PPUSH
8807: LD_VAR 0 14
8811: PPUSH
8812: CALL_OW 74
8816: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8817: LD_ADDR_VAR 0 23
8821: PUSH
8822: LD_INT 22
8824: PUSH
8825: LD_VAR 0 11
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 2
8836: PUSH
8837: LD_INT 59
8839: PUSH
8840: EMPTY
8841: LIST
8842: PUSH
8843: LD_INT 21
8845: PUSH
8846: LD_INT 1
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 21
8855: PUSH
8856: LD_INT 2
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: PPUSH
8876: CALL_OW 69
8880: PPUSH
8881: LD_VAR 0 14
8885: PPUSH
8886: CALL_OW 74
8890: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8891: LD_VAR 0 14
8895: PPUSH
8896: LD_VAR 0 22
8900: PPUSH
8901: CALL_OW 296
8905: PUSH
8906: LD_INT 8
8908: PLUS
8909: PUSH
8910: LD_VAR 0 14
8914: PPUSH
8915: LD_VAR 0 23
8919: PPUSH
8920: CALL_OW 296
8924: LESS
8925: IFFALSE 8943
// begin ComAttackUnit ( i , target1 ) ;
8927: LD_VAR 0 14
8931: PPUSH
8932: LD_VAR 0 22
8936: PPUSH
8937: CALL_OW 115
// end else
8941: GO 8957
// begin ComAttackUnit ( i , target2 ) ;
8943: LD_VAR 0 14
8947: PPUSH
8948: LD_VAR 0 23
8952: PPUSH
8953: CALL_OW 115
// end ; end ;
8957: GO 8782
8959: POP
8960: POP
// until soldiersOK_list = [ ] ;
8961: LD_VAR 0 19
8965: PUSH
8966: EMPTY
8967: EQUAL
8968: IFFALSE 8565
// end ; end ;
8970: LD_VAR 0 13
8974: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8975: LD_INT 0
8977: PPUSH
8978: PPUSH
8979: PPUSH
8980: PPUSH
8981: PPUSH
8982: PPUSH
8983: PPUSH
8984: PPUSH
8985: PPUSH
8986: PPUSH
8987: PPUSH
// amChassisTab = [ ] ;
8988: LD_ADDR_VAR 0 19
8992: PUSH
8993: EMPTY
8994: ST_TO_ADDR
// arChassisTab = [ ] ;
8995: LD_ADDR_VAR 0 18
8999: PUSH
9000: EMPTY
9001: ST_TO_ADDR
// ruChassisTab = [ ] ;
9002: LD_ADDR_VAR 0 17
9006: PUSH
9007: EMPTY
9008: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9009: LD_INT 35
9011: PPUSH
9012: CALL_OW 67
// if nation = 1 then
9016: LD_VAR 0 5
9020: PUSH
9021: LD_INT 1
9023: EQUAL
9024: IFFALSE 9515
// begin uc_side = side ;
9026: LD_ADDR_OWVAR 20
9030: PUSH
9031: LD_VAR 0 2
9035: ST_TO_ADDR
// uc_nation = nation ;
9036: LD_ADDR_OWVAR 21
9040: PUSH
9041: LD_VAR 0 5
9045: ST_TO_ADDR
// vc_engine = vehengine ;
9046: LD_ADDR_OWVAR 39
9050: PUSH
9051: LD_VAR 0 6
9055: ST_TO_ADDR
// vc_control = vehcontrol ;
9056: LD_ADDR_OWVAR 38
9060: PUSH
9061: LD_VAR 0 7
9065: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9066: LD_ADDR_OWVAR 40
9070: PUSH
9071: LD_VAR 0 10
9075: PUSH
9076: LD_INT 1
9078: PPUSH
9079: LD_VAR 0 10
9083: PPUSH
9084: CALL_OW 12
9088: ARRAY
9089: ST_TO_ADDR
// for j = 1 to AMWeapon do
9090: LD_ADDR_VAR 0 14
9094: PUSH
9095: DOUBLE
9096: LD_INT 1
9098: DEC
9099: ST_TO_ADDR
9100: LD_VAR 0 10
9104: PUSH
9105: FOR_TO
9106: IFFALSE 9407
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9108: LD_VAR 0 10
9112: PUSH
9113: LD_VAR 0 14
9117: ARRAY
9118: PUSH
9119: LD_INT 2
9121: EQUAL
9122: PUSH
9123: LD_VAR 0 10
9127: PUSH
9128: LD_VAR 0 14
9132: ARRAY
9133: PUSH
9134: LD_INT 3
9136: EQUAL
9137: OR
9138: IFFALSE 9191
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9140: LD_ADDR_VAR 0 19
9144: PUSH
9145: LD_INT 1
9147: PUSH
9148: LD_INT 2
9150: PUSH
9151: LD_INT 3
9153: PUSH
9154: LD_INT 4
9156: PUSH
9157: LD_INT 5
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9167: LD_ADDR_OWVAR 37
9171: PUSH
9172: LD_VAR 0 19
9176: PUSH
9177: LD_INT 1
9179: PPUSH
9180: LD_VAR 0 19
9184: PPUSH
9185: CALL_OW 12
9189: ARRAY
9190: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9191: LD_VAR 0 10
9195: PUSH
9196: LD_VAR 0 14
9200: ARRAY
9201: PUSH
9202: LD_INT 4
9204: EQUAL
9205: PUSH
9206: LD_VAR 0 10
9210: PUSH
9211: LD_VAR 0 14
9215: ARRAY
9216: PUSH
9217: LD_INT 5
9219: EQUAL
9220: OR
9221: PUSH
9222: LD_VAR 0 10
9226: PUSH
9227: LD_VAR 0 14
9231: ARRAY
9232: PUSH
9233: LD_INT 9
9235: EQUAL
9236: OR
9237: PUSH
9238: LD_VAR 0 10
9242: PUSH
9243: LD_VAR 0 14
9247: ARRAY
9248: PUSH
9249: LD_INT 11
9251: EQUAL
9252: OR
9253: PUSH
9254: LD_VAR 0 10
9258: PUSH
9259: LD_VAR 0 14
9263: ARRAY
9264: PUSH
9265: LD_INT 7
9267: EQUAL
9268: OR
9269: IFFALSE 9318
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9271: LD_ADDR_VAR 0 19
9275: PUSH
9276: LD_INT 2
9278: PUSH
9279: LD_INT 3
9281: PUSH
9282: LD_INT 4
9284: PUSH
9285: LD_INT 5
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9294: LD_ADDR_OWVAR 37
9298: PUSH
9299: LD_VAR 0 19
9303: PUSH
9304: LD_INT 1
9306: PPUSH
9307: LD_VAR 0 19
9311: PPUSH
9312: CALL_OW 12
9316: ARRAY
9317: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9318: LD_VAR 0 10
9322: PUSH
9323: LD_VAR 0 14
9327: ARRAY
9328: PUSH
9329: LD_INT 8
9331: EQUAL
9332: PUSH
9333: LD_VAR 0 10
9337: PUSH
9338: LD_VAR 0 14
9342: ARRAY
9343: PUSH
9344: LD_INT 6
9346: EQUAL
9347: OR
9348: PUSH
9349: LD_VAR 0 10
9353: PUSH
9354: LD_VAR 0 14
9358: ARRAY
9359: PUSH
9360: LD_INT 10
9362: EQUAL
9363: OR
9364: IFFALSE 9405
// begin amChassisTab = [ 4 , 5 ] ;
9366: LD_ADDR_VAR 0 19
9370: PUSH
9371: LD_INT 4
9373: PUSH
9374: LD_INT 5
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9381: LD_ADDR_OWVAR 37
9385: PUSH
9386: LD_VAR 0 19
9390: PUSH
9391: LD_INT 1
9393: PPUSH
9394: LD_VAR 0 19
9398: PPUSH
9399: CALL_OW 12
9403: ARRAY
9404: ST_TO_ADDR
// end ; end ;
9405: GO 9105
9407: POP
9408: POP
// veh = CreateVehicle ;
9409: LD_ADDR_VAR 0 16
9413: PUSH
9414: CALL_OW 45
9418: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9419: LD_VAR 0 16
9423: PPUSH
9424: LD_VAR 0 1
9428: PPUSH
9429: LD_INT 0
9431: PPUSH
9432: CALL_OW 49
// if vehControl = 1 then
9436: LD_VAR 0 7
9440: PUSH
9441: LD_INT 1
9443: EQUAL
9444: IFFALSE 9501
// begin hc_gallery =  ;
9446: LD_ADDR_OWVAR 33
9450: PUSH
9451: LD_STRING 
9453: ST_TO_ADDR
// hc_name =  ;
9454: LD_ADDR_OWVAR 26
9458: PUSH
9459: LD_STRING 
9461: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9462: LD_INT 0
9464: PPUSH
9465: LD_INT 3
9467: PPUSH
9468: LD_VAR 0 4
9472: PPUSH
9473: CALL_OW 380
// un = CreateHuman ;
9477: LD_ADDR_VAR 0 15
9481: PUSH
9482: CALL_OW 44
9486: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9487: LD_VAR 0 15
9491: PPUSH
9492: LD_VAR 0 16
9496: PPUSH
9497: CALL_OW 52
// end ; i = i + 1 ;
9501: LD_ADDR_VAR 0 13
9505: PUSH
9506: LD_VAR 0 13
9510: PUSH
9511: LD_INT 1
9513: PLUS
9514: ST_TO_ADDR
// end ; if nation = 2 then
9515: LD_VAR 0 5
9519: PUSH
9520: LD_INT 2
9522: EQUAL
9523: IFFALSE 9947
// begin uc_side = side ;
9525: LD_ADDR_OWVAR 20
9529: PUSH
9530: LD_VAR 0 2
9534: ST_TO_ADDR
// uc_nation = nation ;
9535: LD_ADDR_OWVAR 21
9539: PUSH
9540: LD_VAR 0 5
9544: ST_TO_ADDR
// vc_engine = vehengine ;
9545: LD_ADDR_OWVAR 39
9549: PUSH
9550: LD_VAR 0 6
9554: ST_TO_ADDR
// vc_control = vehcontrol ;
9555: LD_ADDR_OWVAR 38
9559: PUSH
9560: LD_VAR 0 7
9564: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9565: LD_ADDR_OWVAR 40
9569: PUSH
9570: LD_VAR 0 9
9574: PUSH
9575: LD_INT 1
9577: PPUSH
9578: LD_VAR 0 9
9582: PPUSH
9583: CALL_OW 12
9587: ARRAY
9588: ST_TO_ADDR
// for j = 1 to ARWeapons do
9589: LD_ADDR_VAR 0 14
9593: PUSH
9594: DOUBLE
9595: LD_INT 1
9597: DEC
9598: ST_TO_ADDR
9599: LD_VAR 0 9
9603: PUSH
9604: FOR_TO
9605: IFFALSE 9839
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9607: LD_VAR 0 9
9611: PUSH
9612: LD_VAR 0 14
9616: ARRAY
9617: PUSH
9618: LD_INT 24
9620: EQUAL
9621: PUSH
9622: LD_VAR 0 9
9626: PUSH
9627: LD_VAR 0 14
9631: ARRAY
9632: PUSH
9633: LD_INT 22
9635: EQUAL
9636: OR
9637: PUSH
9638: LD_VAR 0 9
9642: PUSH
9643: LD_VAR 0 14
9647: ARRAY
9648: PUSH
9649: LD_INT 23
9651: EQUAL
9652: OR
9653: PUSH
9654: LD_VAR 0 9
9658: PUSH
9659: LD_VAR 0 14
9663: ARRAY
9664: PUSH
9665: LD_INT 30
9667: EQUAL
9668: OR
9669: IFFALSE 9718
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9671: LD_ADDR_VAR 0 18
9675: PUSH
9676: LD_INT 11
9678: PUSH
9679: LD_INT 12
9681: PUSH
9682: LD_INT 13
9684: PUSH
9685: LD_INT 14
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9694: LD_ADDR_OWVAR 37
9698: PUSH
9699: LD_VAR 0 18
9703: PUSH
9704: LD_INT 1
9706: PPUSH
9707: LD_VAR 0 18
9711: PPUSH
9712: CALL_OW 12
9716: ARRAY
9717: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9718: LD_VAR 0 9
9722: PUSH
9723: LD_VAR 0 14
9727: ARRAY
9728: PUSH
9729: LD_INT 29
9731: EQUAL
9732: PUSH
9733: LD_VAR 0 9
9737: PUSH
9738: LD_VAR 0 14
9742: ARRAY
9743: PUSH
9744: LD_INT 28
9746: EQUAL
9747: OR
9748: PUSH
9749: LD_VAR 0 9
9753: PUSH
9754: LD_VAR 0 14
9758: ARRAY
9759: PUSH
9760: LD_INT 27
9762: EQUAL
9763: OR
9764: PUSH
9765: LD_VAR 0 9
9769: PUSH
9770: LD_VAR 0 14
9774: ARRAY
9775: PUSH
9776: LD_INT 26
9778: EQUAL
9779: OR
9780: PUSH
9781: LD_VAR 0 9
9785: PUSH
9786: LD_VAR 0 14
9790: ARRAY
9791: PUSH
9792: LD_INT 25
9794: EQUAL
9795: OR
9796: IFFALSE 9837
// begin arChassisTab = [ 13 , 14 ] ;
9798: LD_ADDR_VAR 0 18
9802: PUSH
9803: LD_INT 13
9805: PUSH
9806: LD_INT 14
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9813: LD_ADDR_OWVAR 37
9817: PUSH
9818: LD_VAR 0 18
9822: PUSH
9823: LD_INT 1
9825: PPUSH
9826: LD_VAR 0 18
9830: PPUSH
9831: CALL_OW 12
9835: ARRAY
9836: ST_TO_ADDR
// end ; end ;
9837: GO 9604
9839: POP
9840: POP
// veh = CreateVehicle ;
9841: LD_ADDR_VAR 0 16
9845: PUSH
9846: CALL_OW 45
9850: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9851: LD_VAR 0 16
9855: PPUSH
9856: LD_VAR 0 1
9860: PPUSH
9861: LD_INT 0
9863: PPUSH
9864: CALL_OW 49
// if vehcontrol = 1 then
9868: LD_VAR 0 7
9872: PUSH
9873: LD_INT 1
9875: EQUAL
9876: IFFALSE 9933
// begin hc_gallery =  ;
9878: LD_ADDR_OWVAR 33
9882: PUSH
9883: LD_STRING 
9885: ST_TO_ADDR
// hc_name =  ;
9886: LD_ADDR_OWVAR 26
9890: PUSH
9891: LD_STRING 
9893: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9894: LD_INT 0
9896: PPUSH
9897: LD_INT 3
9899: PPUSH
9900: LD_VAR 0 4
9904: PPUSH
9905: CALL_OW 380
// un = CreateHuman ;
9909: LD_ADDR_VAR 0 15
9913: PUSH
9914: CALL_OW 44
9918: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9919: LD_VAR 0 15
9923: PPUSH
9924: LD_VAR 0 16
9928: PPUSH
9929: CALL_OW 52
// end ; i = i + 1 ;
9933: LD_ADDR_VAR 0 13
9937: PUSH
9938: LD_VAR 0 13
9942: PUSH
9943: LD_INT 1
9945: PLUS
9946: ST_TO_ADDR
// end ; if nation = 3 then
9947: LD_VAR 0 5
9951: PUSH
9952: LD_INT 3
9954: EQUAL
9955: IFFALSE 10347
// begin uc_side = side ;
9957: LD_ADDR_OWVAR 20
9961: PUSH
9962: LD_VAR 0 2
9966: ST_TO_ADDR
// uc_nation = nation ;
9967: LD_ADDR_OWVAR 21
9971: PUSH
9972: LD_VAR 0 5
9976: ST_TO_ADDR
// vc_engine = vehengine ;
9977: LD_ADDR_OWVAR 39
9981: PUSH
9982: LD_VAR 0 6
9986: ST_TO_ADDR
// vc_control = vehcontrol ;
9987: LD_ADDR_OWVAR 38
9991: PUSH
9992: LD_VAR 0 7
9996: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9997: LD_ADDR_OWVAR 40
10001: PUSH
10002: LD_VAR 0 8
10006: PUSH
10007: LD_INT 1
10009: PPUSH
10010: LD_VAR 0 8
10014: PPUSH
10015: CALL_OW 12
10019: ARRAY
10020: ST_TO_ADDR
// for j = 1 to RuWeapons do
10021: LD_ADDR_VAR 0 14
10025: PUSH
10026: DOUBLE
10027: LD_INT 1
10029: DEC
10030: ST_TO_ADDR
10031: LD_VAR 0 8
10035: PUSH
10036: FOR_TO
10037: IFFALSE 10239
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10039: LD_VAR 0 8
10043: PUSH
10044: LD_VAR 0 14
10048: ARRAY
10049: PUSH
10050: LD_INT 42
10052: EQUAL
10053: PUSH
10054: LD_VAR 0 8
10058: PUSH
10059: LD_VAR 0 14
10063: ARRAY
10064: PUSH
10065: LD_INT 43
10067: EQUAL
10068: OR
10069: PUSH
10070: LD_VAR 0 8
10074: PUSH
10075: LD_VAR 0 14
10079: ARRAY
10080: PUSH
10081: LD_INT 44
10083: EQUAL
10084: OR
10085: PUSH
10086: LD_VAR 0 8
10090: PUSH
10091: LD_VAR 0 14
10095: ARRAY
10096: PUSH
10097: LD_INT 45
10099: EQUAL
10100: OR
10101: PUSH
10102: LD_VAR 0 8
10106: PUSH
10107: LD_VAR 0 14
10111: ARRAY
10112: PUSH
10113: LD_INT 49
10115: EQUAL
10116: OR
10117: IFFALSE 10166
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10119: LD_ADDR_VAR 0 17
10123: PUSH
10124: LD_INT 21
10126: PUSH
10127: LD_INT 22
10129: PUSH
10130: LD_INT 23
10132: PUSH
10133: LD_INT 24
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10142: LD_ADDR_OWVAR 37
10146: PUSH
10147: LD_VAR 0 17
10151: PUSH
10152: LD_INT 1
10154: PPUSH
10155: LD_VAR 0 17
10159: PPUSH
10160: CALL_OW 12
10164: ARRAY
10165: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10166: LD_VAR 0 8
10170: PUSH
10171: LD_VAR 0 14
10175: ARRAY
10176: PUSH
10177: LD_INT 46
10179: EQUAL
10180: PUSH
10181: LD_VAR 0 8
10185: PUSH
10186: LD_VAR 0 14
10190: ARRAY
10191: PUSH
10192: LD_INT 47
10194: EQUAL
10195: OR
10196: IFFALSE 10237
// begin ruChassisTab = [ 23 , 24 ] ;
10198: LD_ADDR_VAR 0 17
10202: PUSH
10203: LD_INT 23
10205: PUSH
10206: LD_INT 24
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10213: LD_ADDR_OWVAR 37
10217: PUSH
10218: LD_VAR 0 17
10222: PUSH
10223: LD_INT 1
10225: PPUSH
10226: LD_VAR 0 17
10230: PPUSH
10231: CALL_OW 12
10235: ARRAY
10236: ST_TO_ADDR
// end ; end ;
10237: GO 10036
10239: POP
10240: POP
// veh = CreateVehicle ;
10241: LD_ADDR_VAR 0 16
10245: PUSH
10246: CALL_OW 45
10250: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10251: LD_VAR 0 16
10255: PPUSH
10256: LD_VAR 0 1
10260: PPUSH
10261: LD_INT 0
10263: PPUSH
10264: CALL_OW 49
// if vehcontrol = 1 then
10268: LD_VAR 0 7
10272: PUSH
10273: LD_INT 1
10275: EQUAL
10276: IFFALSE 10333
// begin hc_gallery =  ;
10278: LD_ADDR_OWVAR 33
10282: PUSH
10283: LD_STRING 
10285: ST_TO_ADDR
// hc_name =  ;
10286: LD_ADDR_OWVAR 26
10290: PUSH
10291: LD_STRING 
10293: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10294: LD_INT 0
10296: PPUSH
10297: LD_INT 3
10299: PPUSH
10300: LD_VAR 0 4
10304: PPUSH
10305: CALL_OW 380
// un = CreateHuman ;
10309: LD_ADDR_VAR 0 15
10313: PUSH
10314: CALL_OW 44
10318: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10319: LD_VAR 0 15
10323: PPUSH
10324: LD_VAR 0 16
10328: PPUSH
10329: CALL_OW 52
// end ; i = i + 1 ;
10333: LD_ADDR_VAR 0 13
10337: PUSH
10338: LD_VAR 0 13
10342: PUSH
10343: LD_INT 1
10345: PLUS
10346: ST_TO_ADDR
// end ; until i = vehCount ;
10347: LD_VAR 0 13
10351: PUSH
10352: LD_VAR 0 3
10356: EQUAL
10357: IFFALSE 9009
// repeat wait ( 0 0$1 ) ;
10359: LD_INT 35
10361: PPUSH
10362: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10366: LD_INT 22
10368: PUSH
10369: LD_VAR 0 2
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 21
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 24
10390: PUSH
10391: LD_INT 250
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 3
10400: PUSH
10401: LD_INT 58
10403: PUSH
10404: EMPTY
10405: LIST
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: PPUSH
10417: CALL_OW 69
10421: PUSH
10422: LD_INT 0
10424: GREATER
10425: IFFALSE 10667
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
10427: LD_ADDR_VAR 0 13
10431: PUSH
10432: LD_INT 22
10434: PUSH
10435: LD_VAR 0 2
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: LD_INT 21
10446: PUSH
10447: LD_INT 2
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PUSH
10454: LD_INT 24
10456: PUSH
10457: LD_INT 250
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 3
10466: PUSH
10467: LD_INT 58
10469: PUSH
10470: EMPTY
10471: LIST
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: PPUSH
10483: CALL_OW 69
10487: PUSH
10488: FOR_IN
10489: IFFALSE 10665
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10491: LD_ADDR_VAR 0 21
10495: PUSH
10496: LD_INT 22
10498: PUSH
10499: LD_VAR 0 11
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PPUSH
10508: CALL_OW 69
10512: PPUSH
10513: LD_VAR 0 13
10517: PPUSH
10518: CALL_OW 74
10522: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10523: LD_ADDR_VAR 0 22
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_VAR 0 11
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: LD_INT 59
10545: PUSH
10546: EMPTY
10547: LIST
10548: PUSH
10549: LD_INT 21
10551: PUSH
10552: LD_INT 1
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: LD_INT 21
10561: PUSH
10562: LD_INT 2
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: EMPTY
10580: LIST
10581: PPUSH
10582: CALL_OW 69
10586: PPUSH
10587: LD_VAR 0 13
10591: PPUSH
10592: CALL_OW 74
10596: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10597: LD_VAR 0 13
10601: PPUSH
10602: LD_VAR 0 21
10606: PPUSH
10607: CALL_OW 296
10611: PUSH
10612: LD_INT 8
10614: PLUS
10615: PUSH
10616: LD_VAR 0 13
10620: PPUSH
10621: LD_VAR 0 22
10625: PPUSH
10626: CALL_OW 296
10630: LESS
10631: IFFALSE 10649
// begin ComAttackUnit ( i , target1 ) ;
10633: LD_VAR 0 13
10637: PPUSH
10638: LD_VAR 0 21
10642: PPUSH
10643: CALL_OW 115
// end else
10647: GO 10663
// begin ComAttackUnit ( i , target2 ) ;
10649: LD_VAR 0 13
10653: PPUSH
10654: LD_VAR 0 22
10658: PPUSH
10659: CALL_OW 115
// end ; end ;
10663: GO 10488
10665: POP
10666: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10667: LD_INT 22
10669: PUSH
10670: LD_VAR 0 2
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PUSH
10679: LD_INT 21
10681: PUSH
10682: LD_INT 2
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 24
10691: PUSH
10692: LD_INT 250
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 3
10701: PUSH
10702: LD_INT 58
10704: PUSH
10705: EMPTY
10706: LIST
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: PPUSH
10718: CALL_OW 69
10722: PUSH
10723: LD_INT 0
10725: EQUAL
10726: IFFALSE 10359
// end ; end_of_file
10728: LD_VAR 0 12
10732: RET
// every 1 do var i , gammaSquad , startX , startY ;
10733: GO 10735
10735: DISABLE
10736: LD_INT 0
10738: PPUSH
10739: PPUSH
10740: PPUSH
10741: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
10742: LD_ADDR_VAR 0 2
10746: PUSH
10747: LD_EXP 8
10751: PUSH
10752: LD_EXP 9
10756: PUSH
10757: LD_EXP 10
10761: PUSH
10762: LD_EXP 11
10766: PUSH
10767: LD_EXP 12
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
10779: LD_ADDR_VAR 0 3
10783: PUSH
10784: LD_INT 46
10786: PUSH
10787: LD_INT 45
10789: PUSH
10790: LD_INT 44
10792: PUSH
10793: LD_INT 43
10795: PUSH
10796: LD_INT 42
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
10806: LD_ADDR_VAR 0 4
10810: PUSH
10811: LD_INT 14
10813: PUSH
10814: LD_INT 12
10816: PUSH
10817: LD_INT 10
10819: PUSH
10820: LD_INT 8
10822: PUSH
10823: LD_INT 6
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
10833: LD_INT 32
10835: PPUSH
10836: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
10840: LD_INT 32
10842: PPUSH
10843: LD_INT 51
10845: PPUSH
10846: LD_INT 26
10848: PPUSH
10849: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
10853: LD_INT 32
10855: PPUSH
10856: LD_INT 53
10858: PPUSH
10859: LD_INT 23
10861: PPUSH
10862: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
10866: LD_INT 32
10868: PPUSH
10869: LD_INT 52
10871: PPUSH
10872: LD_INT 19
10874: PPUSH
10875: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10879: LD_INT 35
10881: PPUSH
10882: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
10886: LD_INT 32
10888: PPUSH
10889: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
10893: LD_INT 32
10895: PPUSH
10896: CALL_OW 250
10900: PUSH
10901: LD_INT 52
10903: EQUAL
10904: PUSH
10905: LD_INT 32
10907: PPUSH
10908: CALL_OW 251
10912: PUSH
10913: LD_INT 19
10915: EQUAL
10916: AND
10917: IFFALSE 10879
// ComExitVehicle ( JMM ) ;
10919: LD_EXP 1
10923: PPUSH
10924: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
10928: LD_EXP 7
10932: PPUSH
10933: LD_EXP 1
10937: PPUSH
10938: CALL_OW 119
// wait ( 0 0$01 ) ;
10942: LD_INT 35
10944: PPUSH
10945: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
10949: LD_EXP 1
10953: PPUSH
10954: LD_INT 46
10956: PPUSH
10957: LD_INT 10
10959: PPUSH
10960: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
10964: LD_EXP 1
10968: PPUSH
10969: LD_EXP 7
10973: PPUSH
10974: CALL_OW 179
// wait ( 0 0$4 ) ;
10978: LD_INT 140
10980: PPUSH
10981: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
10985: LD_EXP 1
10989: PPUSH
10990: LD_STRING D1-JMM-1
10992: PPUSH
10993: CALL_OW 88
// if not dialogue_skipped then
10997: LD_OWVAR 59
11001: NOT
11002: IFFALSE 11659
// begin for i := 1 to gammaSquad do
11004: LD_ADDR_VAR 0 1
11008: PUSH
11009: DOUBLE
11010: LD_INT 1
11012: DEC
11013: ST_TO_ADDR
11014: LD_VAR 0 2
11018: PUSH
11019: FOR_TO
11020: IFFALSE 11081
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11022: LD_VAR 0 2
11026: PUSH
11027: LD_VAR 0 1
11031: ARRAY
11032: PPUSH
11033: LD_VAR 0 3
11037: PUSH
11038: LD_VAR 0 1
11042: ARRAY
11043: PPUSH
11044: LD_VAR 0 4
11048: PUSH
11049: LD_VAR 0 1
11053: ARRAY
11054: PPUSH
11055: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11059: LD_VAR 0 2
11063: PUSH
11064: LD_VAR 0 1
11068: ARRAY
11069: PPUSH
11070: LD_EXP 1
11074: PPUSH
11075: CALL_OW 179
// end ;
11079: GO 11019
11081: POP
11082: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11083: LD_EXP 4
11087: PPUSH
11088: LD_INT 41
11090: PPUSH
11091: LD_INT 4
11093: PPUSH
11094: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11098: LD_EXP 4
11102: PPUSH
11103: LD_EXP 1
11107: PPUSH
11108: CALL_OW 179
// if Lisa = false and Bobby then
11112: LD_EXP 4
11116: PUSH
11117: LD_INT 0
11119: EQUAL
11120: PUSH
11121: LD_EXP 2
11125: AND
11126: IFFALSE 11157
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11128: LD_EXP 2
11132: PPUSH
11133: LD_INT 41
11135: PPUSH
11136: LD_INT 4
11138: PPUSH
11139: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11143: LD_EXP 2
11147: PPUSH
11148: LD_EXP 1
11152: PPUSH
11153: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11157: LD_EXP 4
11161: PUSH
11162: LD_INT 0
11164: EQUAL
11165: PUSH
11166: LD_EXP 2
11170: PUSH
11171: LD_INT 0
11173: EQUAL
11174: AND
11175: PUSH
11176: LD_EXP 3
11180: AND
11181: IFFALSE 11212
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11183: LD_EXP 3
11187: PPUSH
11188: LD_INT 41
11190: PPUSH
11191: LD_INT 4
11193: PPUSH
11194: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11198: LD_EXP 3
11202: PPUSH
11203: LD_EXP 1
11207: PPUSH
11208: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11212: LD_EXP 4
11216: PUSH
11217: LD_INT 0
11219: EQUAL
11220: PUSH
11221: LD_EXP 2
11225: PUSH
11226: LD_INT 0
11228: EQUAL
11229: AND
11230: PUSH
11231: LD_EXP 3
11235: PUSH
11236: LD_INT 0
11238: EQUAL
11239: AND
11240: IFFALSE 11271
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11242: LD_EXP 6
11246: PPUSH
11247: LD_INT 41
11249: PPUSH
11250: LD_INT 4
11252: PPUSH
11253: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11257: LD_EXP 6
11261: PPUSH
11262: LD_EXP 1
11266: PPUSH
11267: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11271: LD_EXP 7
11275: PPUSH
11276: LD_STRING D1-Brown-1
11278: PPUSH
11279: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11283: LD_EXP 1
11287: PPUSH
11288: LD_STRING D1-JMM-2
11290: PPUSH
11291: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11295: LD_EXP 7
11299: PPUSH
11300: LD_STRING D1-Brown-2
11302: PPUSH
11303: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11307: LD_EXP 1
11311: PPUSH
11312: LD_EXP 9
11316: PPUSH
11317: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11321: LD_EXP 9
11325: PPUSH
11326: LD_STRING D1-FSol1-2
11328: PPUSH
11329: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11333: LD_EXP 1
11337: PPUSH
11338: LD_EXP 8
11342: PPUSH
11343: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11347: LD_EXP 8
11351: PPUSH
11352: LD_STRING D1-Sol2-2
11354: PPUSH
11355: CALL_OW 88
// if Lisa then
11359: LD_EXP 4
11363: IFFALSE 11403
// begin ComTurnUnit ( JMM , Lisa ) ;
11365: LD_EXP 1
11369: PPUSH
11370: LD_EXP 4
11374: PPUSH
11375: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11379: LD_EXP 4
11383: PPUSH
11384: LD_STRING D1-Lisa-2
11386: PPUSH
11387: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11391: LD_EXP 1
11395: PPUSH
11396: LD_STRING D1-JMM-3
11398: PPUSH
11399: CALL_OW 88
// end ; if Bobby then
11403: LD_EXP 2
11407: IFFALSE 11447
// begin ComTurnUnit ( JMM , Bobby ) ;
11409: LD_EXP 1
11413: PPUSH
11414: LD_EXP 2
11418: PPUSH
11419: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11423: LD_EXP 2
11427: PPUSH
11428: LD_STRING D1-Bobby-2
11430: PPUSH
11431: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11435: LD_EXP 1
11439: PPUSH
11440: LD_STRING D1-JMM-3
11442: PPUSH
11443: CALL_OW 88
// end ; if Cyrus then
11447: LD_EXP 3
11451: IFFALSE 11491
// begin ComTurnUnit ( JMM , Cyrus ) ;
11453: LD_EXP 1
11457: PPUSH
11458: LD_EXP 3
11462: PPUSH
11463: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11467: LD_EXP 3
11471: PPUSH
11472: LD_STRING D1-Cyrus-2
11474: PPUSH
11475: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11479: LD_EXP 1
11483: PPUSH
11484: LD_STRING D1-JMM-3
11486: PPUSH
11487: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
11491: LD_EXP 1
11495: PPUSH
11496: LD_EXP 7
11500: PPUSH
11501: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11505: LD_EXP 1
11509: PPUSH
11510: LD_STRING D1-JMM-3a
11512: PPUSH
11513: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11517: LD_EXP 7
11521: PPUSH
11522: LD_INT 38
11524: PPUSH
11525: LD_INT 5
11527: PPUSH
11528: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11532: LD_EXP 7
11536: PPUSH
11537: LD_EXP 1
11541: PPUSH
11542: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11546: LD_EXP 1
11550: PPUSH
11551: LD_INT 40
11553: PPUSH
11554: LD_INT 7
11556: PPUSH
11557: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11561: LD_EXP 1
11565: PPUSH
11566: LD_EXP 7
11570: PPUSH
11571: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
11575: LD_EXP 7
11579: PPUSH
11580: LD_STRING D1-Brown-3
11582: PPUSH
11583: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
11587: LD_EXP 14
11591: PPUSH
11592: LD_STRING D1-Har-3
11594: PPUSH
11595: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
11599: LD_EXP 1
11603: PPUSH
11604: LD_STRING D1-JMM-4
11606: PPUSH
11607: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
11611: LD_EXP 14
11615: PPUSH
11616: LD_STRING D1-Har-4
11618: PPUSH
11619: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
11623: LD_EXP 1
11627: PPUSH
11628: LD_STRING D1-JMM-5
11630: PPUSH
11631: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
11635: LD_EXP 14
11639: PPUSH
11640: LD_STRING D1-Har-5
11642: PPUSH
11643: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
11647: LD_EXP 1
11651: PPUSH
11652: LD_STRING D1-JMM-6
11654: PPUSH
11655: CALL_OW 88
// end ; InGameOff ;
11659: CALL_OW 9
// PrepareRussianConvoy ;
11663: CALL 2792 0 0
// ChangeMissionObjectives ( M1 ) ;
11667: LD_STRING M1
11669: PPUSH
11670: CALL_OW 337
// SaveForQuickRestart ;
11674: CALL_OW 22
// timerStatus = 1 ;
11678: LD_ADDR_EXP 29
11682: PUSH
11683: LD_INT 1
11685: ST_TO_ADDR
// startTimer = 1 ;
11686: LD_ADDR_EXP 30
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// bonusAvalaible = 1 ;
11694: LD_ADDR_EXP 42
11698: PUSH
11699: LD_INT 1
11701: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11702: LD_INT 105
11704: PPUSH
11705: CALL_OW 67
// DialogueOn ;
11709: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
11713: LD_EXP 12
11717: PPUSH
11718: LD_STRING D9-Mech1-1
11720: PPUSH
11721: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
11725: LD_EXP 1
11729: PPUSH
11730: LD_STRING D9-JMM-1
11732: PPUSH
11733: CALL_OW 88
// DialogueOff ;
11737: CALL_OW 7
// end ;
11741: PPOPN 4
11743: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
11744: LD_INT 47
11746: PPUSH
11747: LD_INT 1
11749: PPUSH
11750: CALL_OW 321
11754: PUSH
11755: LD_INT 2
11757: EQUAL
11758: PUSH
11759: LD_INT 22
11761: PUSH
11762: LD_INT 1
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 21
11771: PUSH
11772: LD_INT 3
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 30
11781: PUSH
11782: LD_INT 3
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: LIST
11793: PPUSH
11794: CALL_OW 69
11798: PUSH
11799: LD_INT 0
11801: GREATER
11802: AND
11803: IFFALSE 12033
11805: GO 11807
11807: DISABLE
// begin if IsOk ( Campell ) then
11808: LD_EXP 12
11812: PPUSH
11813: CALL_OW 302
11817: IFFALSE 11833
// begin Say ( Campell , D10-Mech1-1 ) ;
11819: LD_EXP 12
11823: PPUSH
11824: LD_STRING D10-Mech1-1
11826: PPUSH
11827: CALL_OW 88
// end else
11831: GO 12033
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11833: LD_INT 22
11835: PUSH
11836: LD_INT 1
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PUSH
11843: LD_INT 21
11845: PUSH
11846: LD_INT 1
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: LD_INT 25
11855: PUSH
11856: LD_INT 3
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: LD_INT 26
11865: PUSH
11866: LD_INT 1
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: PPUSH
11879: CALL_OW 69
11883: PUSH
11884: LD_EXP 1
11888: PUSH
11889: EMPTY
11890: LIST
11891: PUSH
11892: LD_INT 0
11894: GREATER
11895: DIFF
11896: IFFALSE 11970
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11898: LD_INT 22
11900: PUSH
11901: LD_INT 1
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: LD_INT 21
11910: PUSH
11911: LD_INT 1
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 25
11920: PUSH
11921: LD_INT 3
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 26
11930: PUSH
11931: LD_INT 1
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: PPUSH
11944: CALL_OW 69
11948: PUSH
11949: LD_EXP 1
11953: PUSH
11954: EMPTY
11955: LIST
11956: DIFF
11957: PPUSH
11958: LD_STRING D10-Mech1-1
11960: PPUSH
11961: LD_STRING D10-Mech1-1
11963: PPUSH
11964: CALL 4036 0 3
// end else
11968: GO 12033
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11970: LD_INT 22
11972: PUSH
11973: LD_INT 1
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 21
11982: PUSH
11983: LD_INT 1
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: LD_INT 26
11992: PUSH
11993: LD_INT 1
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: LIST
12004: PUSH
12005: LD_INT 1
12007: ARRAY
12008: PPUSH
12009: CALL_OW 69
12013: PUSH
12014: LD_EXP 1
12018: PUSH
12019: EMPTY
12020: LIST
12021: DIFF
12022: PPUSH
12023: LD_STRING D10-Mech1-1
12025: PPUSH
12026: LD_STRING D10-Mech1-1
12028: PPUSH
12029: CALL 4036 0 3
// end ; end ; end ;
12033: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12034: LD_INT 22
12036: PUSH
12037: LD_INT 1
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 30
12046: PUSH
12047: LD_INT 32
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PPUSH
12058: CALL_OW 69
12062: PUSH
12063: LD_INT 0
12065: GREATER
12066: PUSH
12067: LD_EXP 32
12071: PUSH
12072: LD_INT 0
12074: EQUAL
12075: AND
12076: IFFALSE 12316
12078: GO 12080
12080: DISABLE
// begin if IsOK ( Claptopn ) then
12081: LD_EXP 11
12085: PPUSH
12086: CALL_OW 302
12090: IFFALSE 12106
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12092: LD_EXP 11
12096: PPUSH
12097: LD_STRING D9b-Eng1-1
12099: PPUSH
12100: CALL_OW 88
// end else
12104: GO 12302
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12106: LD_INT 22
12108: PUSH
12109: LD_INT 1
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 21
12118: PUSH
12119: LD_INT 1
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 25
12128: PUSH
12129: LD_INT 3
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 26
12138: PUSH
12139: LD_INT 1
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: PPUSH
12152: CALL_OW 69
12156: PUSH
12157: LD_EXP 1
12161: PUSH
12162: EMPTY
12163: LIST
12164: PUSH
12165: LD_INT 0
12167: GREATER
12168: DIFF
12169: IFFALSE 12243
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12171: LD_INT 22
12173: PUSH
12174: LD_INT 1
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 21
12183: PUSH
12184: LD_INT 1
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 25
12193: PUSH
12194: LD_INT 2
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: LD_INT 26
12203: PUSH
12204: LD_INT 1
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: PPUSH
12217: CALL_OW 69
12221: PUSH
12222: LD_EXP 1
12226: PUSH
12227: EMPTY
12228: LIST
12229: DIFF
12230: PPUSH
12231: LD_STRING D9b-Eng1-1
12233: PPUSH
12234: LD_STRING D9b-Eng1-11
12236: PPUSH
12237: CALL 4036 0 3
// end else
12241: GO 12302
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12243: LD_INT 22
12245: PUSH
12246: LD_INT 1
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: LD_INT 21
12255: PUSH
12256: LD_INT 1
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 26
12265: PUSH
12266: LD_INT 1
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: PPUSH
12278: CALL_OW 69
12282: PUSH
12283: LD_EXP 1
12287: PUSH
12288: EMPTY
12289: LIST
12290: DIFF
12291: PPUSH
12292: LD_STRING D9b-Eng1-1
12294: PPUSH
12295: LD_STRING D9b-Eng1-1
12297: PPUSH
12298: CALL 4036 0 3
// end ; end ; if energyVDialog = 0 then
12302: LD_EXP 33
12306: PUSH
12307: LD_INT 0
12309: EQUAL
12310: IFFALSE 12316
// EnergyDialog ;
12312: CALL 4527 0 0
// end ;
12316: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12317: LD_EXP 34
12321: PUSH
12322: LD_INT 1
12324: EQUAL
12325: PUSH
12326: LD_EXP 35
12330: PUSH
12331: LD_INT 1
12333: EQUAL
12334: AND
12335: IFFALSE 12347
12337: GO 12339
12339: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12340: LD_STRING M1a
12342: PPUSH
12343: CALL_OW 337
12347: END
// every 3 3$0 do
12348: GO 12350
12350: DISABLE
// begin PrepareFirstAttack ;
12351: CALL 3592 0 0
// end ;
12355: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
12356: LD_INT 22
12358: PUSH
12359: LD_INT 5
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 21
12368: PUSH
12369: LD_INT 1
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 3
12378: PUSH
12379: LD_INT 24
12381: PUSH
12382: LD_INT 250
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: LIST
12397: PPUSH
12398: CALL_OW 69
12402: PUSH
12403: LD_INT 0
12405: GREATER
12406: PUSH
12407: LD_EXP 23
12411: PUSH
12412: LD_INT 1
12414: EQUAL
12415: AND
12416: IFFALSE 12717
12418: GO 12420
12420: DISABLE
12421: LD_INT 0
12423: PPUSH
// begin firstRussianAttack = 2 ;
12424: LD_ADDR_EXP 23
12428: PUSH
12429: LD_INT 2
12431: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
12432: LD_INT 22
12434: PUSH
12435: LD_INT 5
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PUSH
12442: LD_INT 21
12444: PUSH
12445: LD_INT 1
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PPUSH
12456: CALL_OW 69
12460: PPUSH
12461: LD_INT 125
12463: PPUSH
12464: LD_INT 98
12466: PPUSH
12467: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12471: LD_INT 22
12473: PUSH
12474: LD_INT 1
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 21
12483: PUSH
12484: LD_INT 1
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PPUSH
12495: CALL_OW 69
12499: PUSH
12500: LD_EXP 1
12504: PUSH
12505: LD_EXP 7
12509: PUSH
12510: LD_EXP 4
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: LIST
12519: DIFF
12520: PPUSH
12521: LD_STRING DAtt1-Sol1-1
12523: PPUSH
12524: LD_STRING DAtt1-FSol1-1
12526: PPUSH
12527: CALL 4036 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12531: LD_EXP 1
12535: PPUSH
12536: LD_STRING DAtt1-JMM-1
12538: PPUSH
12539: CALL_OW 88
// if Lisa then
12543: LD_EXP 4
12547: IFFALSE 12563
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12549: LD_EXP 4
12553: PPUSH
12554: LD_STRING DAtt1a-Lisa-1
12556: PPUSH
12557: CALL_OW 88
// end else
12561: GO 12634
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
12563: LD_INT 22
12565: PUSH
12566: LD_INT 1
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 21
12575: PUSH
12576: LD_INT 1
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PUSH
12583: LD_INT 26
12585: PUSH
12586: LD_INT 1
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: LIST
12597: PPUSH
12598: CALL_OW 69
12602: PUSH
12603: LD_EXP 1
12607: PUSH
12608: LD_EXP 7
12612: PUSH
12613: LD_EXP 4
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: LIST
12622: DIFF
12623: PPUSH
12624: LD_STRING DAtt1a-Sol1-1
12626: PPUSH
12627: LD_STRING DAtt1-FSol1-1
12629: PPUSH
12630: CALL 4036 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
12634: LD_EXP 1
12638: PPUSH
12639: LD_STRING DAtt1a-JMM-1
12641: PPUSH
12642: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
12646: LD_INT 22
12648: PUSH
12649: LD_INT 1
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: PUSH
12656: LD_INT 21
12658: PUSH
12659: LD_INT 1
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 26
12668: PUSH
12669: LD_INT 1
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: LIST
12680: PPUSH
12681: CALL_OW 69
12685: PUSH
12686: LD_EXP 1
12690: PUSH
12691: LD_EXP 7
12695: PUSH
12696: LD_EXP 4
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: LIST
12705: DIFF
12706: PPUSH
12707: LD_STRING DAtt1b-Sol1-1
12709: PPUSH
12710: LD_STRING DAtt1a-Sol1-1
12712: PPUSH
12713: CALL 4036 0 3
// end ;
12717: PPOPN 1
12719: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
12720: LD_EXP 23
12724: PUSH
12725: LD_INT 2
12727: EQUAL
12728: IFFALSE 12790
12730: GO 12732
12732: DISABLE
12733: LD_INT 0
12735: PPUSH
// begin enable ;
12736: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12737: LD_ADDR_VAR 0 1
12741: PUSH
12742: LD_INT 5
12744: PPUSH
12745: LD_INT 22
12747: PUSH
12748: LD_INT 5
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 21
12757: PUSH
12758: LD_INT 1
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PPUSH
12769: CALL_OW 70
12773: PUSH
12774: FOR_IN
12775: IFFALSE 12788
// RemoveUnit ( i ) ;
12777: LD_VAR 0 1
12781: PPUSH
12782: CALL_OW 64
12786: GO 12774
12788: POP
12789: POP
// end ;
12790: PPOPN 1
12792: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
12793: LD_INT 22
12795: PUSH
12796: LD_INT 5
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: EMPTY
12804: LIST
12805: PPUSH
12806: CALL_OW 69
12810: PUSH
12811: LD_INT 0
12813: EQUAL
12814: PUSH
12815: LD_EXP 23
12819: PUSH
12820: LD_INT 2
12822: EQUAL
12823: AND
12824: IFFALSE 12837
12826: GO 12828
12828: DISABLE
// firstRussianAttack = 3 ;
12829: LD_ADDR_EXP 23
12833: PUSH
12834: LD_INT 3
12836: ST_TO_ADDR
12837: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
12838: LD_EXP 28
12842: PUSH
12843: LD_INT 0
12845: EQUAL
12846: IFFALSE 12927
12848: GO 12850
12850: DISABLE
// begin timerStatus = 4 ;
12851: LD_ADDR_EXP 29
12855: PUSH
12856: LD_INT 4
12858: ST_TO_ADDR
// DialogueOn ;
12859: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
12863: LD_EXP 13
12867: PPUSH
12868: LD_STRING D2-Don-1
12870: PPUSH
12871: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
12875: LD_EXP 1
12879: PPUSH
12880: LD_STRING D2-JMM-1
12882: PPUSH
12883: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
12887: LD_EXP 13
12891: PPUSH
12892: LD_STRING D2-Don-2
12894: PPUSH
12895: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
12899: LD_EXP 1
12903: PPUSH
12904: LD_STRING D2-JMM-2
12906: PPUSH
12907: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
12911: LD_EXP 13
12915: PPUSH
12916: LD_STRING D2-Don-3
12918: PPUSH
12919: CALL_OW 94
// DialogueOff ;
12923: CALL_OW 7
// end ;
12927: END
// every 12 12$0 do var tmp ;
12928: GO 12930
12930: DISABLE
12931: LD_INT 0
12933: PPUSH
// begin PrepareDonaldsonArmy ;
12934: CALL 985 0 0
// CenterNowOnUnits ( Donaldson ) ;
12938: LD_EXP 13
12942: PPUSH
12943: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
12947: LD_ADDR_VAR 0 1
12951: PUSH
12952: LD_INT 22
12954: PUSH
12955: LD_INT 4
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 21
12964: PUSH
12965: LD_INT 1
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: LD_INT 26
12974: PUSH
12975: LD_INT 1
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 25
12984: PUSH
12985: LD_INT 1
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PPUSH
12998: CALL_OW 69
13002: PUSH
13003: LD_EXP 5
13007: PUSH
13008: EMPTY
13009: LIST
13010: DIFF
13011: ST_TO_ADDR
// DialogueOn ;
13012: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13016: LD_VAR 0 1
13020: PPUSH
13021: LD_STRING D3-Sol1-1
13023: PPUSH
13024: LD_STRING D3-Sol1-1
13026: PPUSH
13027: CALL 4036 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13031: LD_INT 22
13033: PUSH
13034: LD_INT 4
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PUSH
13041: LD_INT 21
13043: PUSH
13044: LD_INT 1
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 26
13053: PUSH
13054: LD_INT 1
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: LD_INT 25
13063: PUSH
13064: LD_INT 3
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: PPUSH
13077: CALL_OW 69
13081: PPUSH
13082: LD_STRING D3-Sol2-1
13084: PPUSH
13085: LD_STRING D3-Sol2-1
13087: PPUSH
13088: CALL 4036 0 3
// if Frank then
13092: LD_EXP 5
13096: IFFALSE 13110
// Say ( Frank , D3-Frank-1 ) ;
13098: LD_EXP 5
13102: PPUSH
13103: LD_STRING D3-Frank-1
13105: PPUSH
13106: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13110: LD_EXP 13
13114: PPUSH
13115: LD_STRING D3-Don-1
13117: PPUSH
13118: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13122: LD_EXP 13
13126: PPUSH
13127: LD_STRING D3-Don-1a
13129: PPUSH
13130: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13134: LD_EXP 1
13138: PPUSH
13139: LD_STRING D3-JMM-1
13141: PPUSH
13142: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13146: LD_EXP 13
13150: PPUSH
13151: LD_STRING D3-Don-2
13153: PPUSH
13154: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13158: LD_INT 22
13160: PUSH
13161: LD_INT 6
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 21
13170: PUSH
13171: LD_INT 1
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PPUSH
13182: CALL_OW 69
13186: PUSH
13187: LD_INT 0
13189: GREATER
13190: IFFALSE 13328
// begin Say ( JMM , D3-JMM-2 ) ;
13192: LD_EXP 1
13196: PPUSH
13197: LD_STRING D3-JMM-2
13199: PPUSH
13200: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13204: LD_EXP 13
13208: PPUSH
13209: LD_STRING D3-Don-3
13211: PPUSH
13212: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13216: LD_EXP 1
13220: PPUSH
13221: LD_STRING D3-JMM-3
13223: PPUSH
13224: CALL_OW 88
// if IsOK ( Frank ) then
13228: LD_EXP 5
13232: PPUSH
13233: CALL_OW 302
13237: IFFALSE 13251
// Say ( Frank , D3-Frank-3 ) ;
13239: LD_EXP 5
13243: PPUSH
13244: LD_STRING D3-Frank-3
13246: PPUSH
13247: CALL_OW 88
// DialogueOff ;
13251: CALL_OW 7
// if IsOK ( Frank ) then
13255: LD_EXP 5
13259: PPUSH
13260: CALL_OW 302
13264: IFFALSE 13326
// begin SetSide ( Frank , 0 ) ;
13266: LD_EXP 5
13270: PPUSH
13271: LD_INT 0
13273: PPUSH
13274: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13278: LD_EXP 5
13282: PPUSH
13283: LD_INT 12
13285: PPUSH
13286: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13290: LD_EXP 5
13294: PPUSH
13295: LD_STRING Frank
13297: PPUSH
13298: CALL_OW 38
// Wait ( 0 0$3 ) ;
13302: LD_INT 105
13304: PPUSH
13305: CALL_OW 67
// frankScoutBase = 1 ;
13309: LD_ADDR_EXP 25
13313: PUSH
13314: LD_INT 1
13316: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13317: LD_EXP 5
13321: PPUSH
13322: CALL_OW 64
// end ; end else
13326: GO 13415
// begin Say ( JMM , D3-JMM-4 ) ;
13328: LD_EXP 1
13332: PPUSH
13333: LD_STRING D3-JMM-4
13335: PPUSH
13336: CALL_OW 88
// DialogueOff ;
13340: CALL_OW 7
// if IsOK ( Frank ) then
13344: LD_EXP 5
13348: PPUSH
13349: CALL_OW 302
13353: IFFALSE 13415
// begin SetSide ( Frank , 0 ) ;
13355: LD_EXP 5
13359: PPUSH
13360: LD_INT 0
13362: PPUSH
13363: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13367: LD_EXP 5
13371: PPUSH
13372: LD_INT 12
13374: PPUSH
13375: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13379: LD_EXP 5
13383: PPUSH
13384: LD_STRING Frank
13386: PPUSH
13387: CALL_OW 38
// Wait ( 0 0$3 ) ;
13391: LD_INT 105
13393: PPUSH
13394: CALL_OW 67
// frankScoutBase = 1 ;
13398: LD_ADDR_EXP 25
13402: PUSH
13403: LD_INT 1
13405: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13406: LD_EXP 5
13410: PPUSH
13411: CALL_OW 64
// end ; end ; end ;
13415: PPOPN 1
13417: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13418: LD_EXP 13
13422: PPUSH
13423: CALL_OW 255
13427: PUSH
13428: LD_INT 4
13430: EQUAL
13431: PUSH
13432: LD_EXP 13
13436: PPUSH
13437: CALL_OW 302
13441: AND
13442: IFFALSE 13467
13444: GO 13446
13446: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13447: LD_EXP 13
13451: PPUSH
13452: LD_STRING D3b-Don-1
13454: PPUSH
13455: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13459: LD_ADDR_EXP 41
13463: PUSH
13464: LD_INT 1
13466: ST_TO_ADDR
// end ;
13467: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13468: LD_EXP 24
13472: PUSH
13473: LD_INT 0
13475: EQUAL
13476: IFFALSE 13632
13478: GO 13480
13480: DISABLE
13481: LD_INT 0
13483: PPUSH
13484: PPUSH
// begin enable ;
13485: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13486: LD_ADDR_VAR 0 1
13490: PUSH
13491: LD_INT 22
13493: PUSH
13494: LD_INT 4
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: LD_INT 21
13503: PUSH
13504: LD_INT 1
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PPUSH
13515: CALL_OW 69
13519: PUSH
13520: FOR_IN
13521: IFFALSE 13630
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13523: LD_ADDR_VAR 0 2
13527: PUSH
13528: LD_INT 22
13530: PUSH
13531: LD_INT 1
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 21
13540: PUSH
13541: LD_INT 1
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PPUSH
13552: CALL_OW 69
13556: PUSH
13557: FOR_IN
13558: IFFALSE 13626
// begin if GetDistUnits ( i , j ) < 7 then
13560: LD_VAR 0 1
13564: PPUSH
13565: LD_VAR 0 2
13569: PPUSH
13570: CALL_OW 296
13574: PUSH
13575: LD_INT 7
13577: LESS
13578: IFFALSE 13624
// begin saveDonaldson = 1 ;
13580: LD_ADDR_EXP 24
13584: PUSH
13585: LD_INT 1
13587: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
13588: LD_INT 22
13590: PUSH
13591: LD_INT 4
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 21
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PPUSH
13612: CALL_OW 69
13616: PPUSH
13617: LD_INT 1
13619: PPUSH
13620: CALL_OW 235
// end ; end ;
13624: GO 13557
13626: POP
13627: POP
// end ;
13628: GO 13520
13630: POP
13631: POP
// end ;
13632: PPOPN 2
13634: END
// every 2 2$0 trigger saveDonaldson = 1 do
13635: LD_EXP 24
13639: PUSH
13640: LD_INT 1
13642: EQUAL
13643: IFFALSE 13946
13645: GO 13647
13647: DISABLE
// begin uc_side = 4 ;
13648: LD_ADDR_OWVAR 20
13652: PUSH
13653: LD_INT 4
13655: ST_TO_ADDR
// uc_nation = 1 ;
13656: LD_ADDR_OWVAR 21
13660: PUSH
13661: LD_INT 1
13663: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
13664: LD_ADDR_EXP 5
13668: PUSH
13669: LD_STRING Frank
13671: PPUSH
13672: CALL_OW 34
13676: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
13677: LD_EXP 5
13681: PPUSH
13682: LD_INT 13
13684: PPUSH
13685: LD_INT 0
13687: PPUSH
13688: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
13692: LD_INT 35
13694: PPUSH
13695: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
13699: LD_EXP 1
13703: PPUSH
13704: CALL_OW 310
13708: NOT
13709: PUSH
13710: LD_EXP 1
13714: PPUSH
13715: LD_INT 4
13717: PPUSH
13718: CALL_OW 296
13722: PUSH
13723: LD_INT 20
13725: LESS
13726: AND
13727: IFFALSE 13760
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
13729: LD_EXP 5
13733: PPUSH
13734: LD_EXP 1
13738: PPUSH
13739: CALL_OW 250
13743: PPUSH
13744: LD_EXP 1
13748: PPUSH
13749: CALL_OW 251
13753: PPUSH
13754: CALL_OW 111
13758: GO 13775
// ComMoveXY ( Frank , 51 , 15 ) ;
13760: LD_EXP 5
13764: PPUSH
13765: LD_INT 51
13767: PPUSH
13768: LD_INT 15
13770: PPUSH
13771: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
13775: LD_EXP 5
13779: PPUSH
13780: LD_EXP 1
13784: PPUSH
13785: CALL_OW 296
13789: PUSH
13790: LD_INT 10
13792: LESS
13793: IFFALSE 13692
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
13795: LD_EXP 1
13799: PUSH
13800: LD_EXP 5
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PPUSH
13809: CALL_OW 87
// DialogueOn ;
13813: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
13817: LD_EXP 5
13821: PPUSH
13822: LD_STRING D3a-Frank-1
13824: PPUSH
13825: CALL_OW 88
// if Lisa then
13829: LD_EXP 4
13833: IFFALSE 13883
// begin Say ( Lisa , D3a-Lisa-1 ) ;
13835: LD_EXP 4
13839: PPUSH
13840: LD_STRING D3a-Lisa-1
13842: PPUSH
13843: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
13847: LD_EXP 5
13851: PPUSH
13852: LD_STRING D3a-Frank-2
13854: PPUSH
13855: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
13859: LD_EXP 4
13863: PPUSH
13864: LD_STRING D3a-Lisa-2
13866: PPUSH
13867: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
13871: LD_EXP 5
13875: PPUSH
13876: LD_STRING D3a-Frank-3
13878: PPUSH
13879: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
13883: LD_EXP 1
13887: PPUSH
13888: LD_STRING D3a-JMM-3
13890: PPUSH
13891: CALL_OW 88
// DialogueOff ;
13895: CALL_OW 7
// SetSide ( Frank , 1 ) ;
13899: LD_EXP 5
13903: PPUSH
13904: LD_INT 1
13906: PPUSH
13907: CALL_OW 235
// InGameOn ;
13911: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
13915: LD_INT 1
13917: PPUSH
13918: LD_INT 7
13920: PPUSH
13921: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
13925: LD_INT 93
13927: PPUSH
13928: LD_INT 91
13930: PPUSH
13931: CALL_OW 84
// wait ( 0 0$5 ) ;
13935: LD_INT 175
13937: PPUSH
13938: CALL_OW 67
// InGameOff ;
13942: CALL_OW 9
// end ;
13946: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
13947: LD_OWVAR 67
13951: PUSH
13952: LD_INT 2
13954: EQUAL
13955: PUSH
13956: LD_OWVAR 67
13960: PUSH
13961: LD_INT 3
13963: EQUAL
13964: OR
13965: IFFALSE 13989
13967: GO 13969
13969: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
13970: LD_INT 24
13972: PPUSH
13973: LD_INT 24
13975: PPUSH
13976: LD_INT 1
13978: PPUSH
13979: LD_INT 1
13981: PPUSH
13982: LD_INT 53
13984: PPUSH
13985: CALL_OW 125
13989: END
// every 18 18$0 do
13990: GO 13992
13992: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
13993: LD_EXP 14
13997: PPUSH
13998: LD_STRING D4-Har-1
14000: PPUSH
14001: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14005: LD_EXP 1
14009: PPUSH
14010: LD_STRING D4-JMM-1
14012: PPUSH
14013: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14017: LD_EXP 14
14021: PPUSH
14022: LD_STRING D4-Har-2
14024: PPUSH
14025: CALL_OW 94
// case query ( Q1 ) of 1 :
14029: LD_STRING Q1
14031: PPUSH
14032: CALL_OW 97
14036: PUSH
14037: LD_INT 1
14039: DOUBLE
14040: EQUAL
14041: IFTRUE 14045
14043: GO 14104
14045: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14046: LD_EXP 1
14050: PPUSH
14051: LD_STRING D5-JMM-1
14053: PPUSH
14054: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14058: LD_EXP 14
14062: PPUSH
14063: LD_STRING D5-Har-1
14065: PPUSH
14066: CALL_OW 94
// timeToSupport = 10 10$0 ;
14070: LD_ADDR_EXP 28
14074: PUSH
14075: LD_INT 21000
14077: ST_TO_ADDR
// timerStatus = 2 ;
14078: LD_ADDR_EXP 29
14082: PUSH
14083: LD_INT 2
14085: ST_TO_ADDR
// startTimer = 1 ;
14086: LD_ADDR_EXP 30
14090: PUSH
14091: LD_INT 1
14093: ST_TO_ADDR
// harrAnswer = 1 ;
14094: LD_ADDR_EXP 26
14098: PUSH
14099: LD_INT 1
14101: ST_TO_ADDR
// end ; 2 :
14102: GO 14239
14104: LD_INT 2
14106: DOUBLE
14107: EQUAL
14108: IFTRUE 14112
14110: GO 14171
14112: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14113: LD_EXP 1
14117: PPUSH
14118: LD_STRING D5-JMM-2
14120: PPUSH
14121: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14125: LD_EXP 14
14129: PPUSH
14130: LD_STRING D5-Har-2
14132: PPUSH
14133: CALL_OW 94
// timeToSupport = 5 5$0 ;
14137: LD_ADDR_EXP 28
14141: PUSH
14142: LD_INT 10500
14144: ST_TO_ADDR
// timerStatus = 2 ;
14145: LD_ADDR_EXP 29
14149: PUSH
14150: LD_INT 2
14152: ST_TO_ADDR
// startTimer = 1 ;
14153: LD_ADDR_EXP 30
14157: PUSH
14158: LD_INT 1
14160: ST_TO_ADDR
// harrAnswer = 2 ;
14161: LD_ADDR_EXP 26
14165: PUSH
14166: LD_INT 2
14168: ST_TO_ADDR
// end ; 3 :
14169: GO 14239
14171: LD_INT 3
14173: DOUBLE
14174: EQUAL
14175: IFTRUE 14179
14177: GO 14238
14179: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14180: LD_EXP 1
14184: PPUSH
14185: LD_STRING D5-JMM-3
14187: PPUSH
14188: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14192: LD_EXP 14
14196: PPUSH
14197: LD_STRING D5-Har-3
14199: PPUSH
14200: CALL_OW 94
// timeToSupport = 5 5$0 ;
14204: LD_ADDR_EXP 28
14208: PUSH
14209: LD_INT 10500
14211: ST_TO_ADDR
// timerStatus = 2 ;
14212: LD_ADDR_EXP 29
14216: PUSH
14217: LD_INT 2
14219: ST_TO_ADDR
// startTimer = 1 ;
14220: LD_ADDR_EXP 30
14224: PUSH
14225: LD_INT 1
14227: ST_TO_ADDR
// harrAnswer = 3 ;
14228: LD_ADDR_EXP 26
14232: PUSH
14233: LD_INT 3
14235: ST_TO_ADDR
// end ; end ;
14236: GO 14239
14238: POP
// end ;
14239: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14240: LD_EXP 29
14244: PUSH
14245: LD_INT 2
14247: EQUAL
14248: PUSH
14249: LD_EXP 28
14253: PUSH
14254: LD_INT 0
14256: EQUAL
14257: AND
14258: IFFALSE 14535
14260: GO 14262
14262: DISABLE
// begin timerStatus = 4 ;
14263: LD_ADDR_EXP 29
14267: PUSH
14268: LD_INT 4
14270: ST_TO_ADDR
// if harrAnswer = 1 then
14271: LD_EXP 26
14275: PUSH
14276: LD_INT 1
14278: EQUAL
14279: IFFALSE 14359
// begin PrepareHarrisonSupport ( 3 ) ;
14281: LD_INT 3
14283: PPUSH
14284: CALL 1549 0 1
// wait ( 1 1$0 ) ;
14288: LD_INT 2100
14290: PPUSH
14291: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14295: LD_EXP 14
14299: PPUSH
14300: LD_STRING D7-Har-1
14302: PPUSH
14303: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14307: LD_STRING M2
14309: PPUSH
14310: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14314: LD_ADDR_EXP 27
14318: PUSH
14319: LD_INT 31500
14321: PUSH
14322: LD_INT 10500
14324: PUSH
14325: LD_INT 8400
14327: PUSH
14328: LD_INT 6300
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: LIST
14335: PUSH
14336: LD_OWVAR 67
14340: ARRAY
14341: PLUS
14342: ST_TO_ADDR
// startTimer = 1 ;
14343: LD_ADDR_EXP 30
14347: PUSH
14348: LD_INT 1
14350: ST_TO_ADDR
// timerStatus = 3 ;
14351: LD_ADDR_EXP 29
14355: PUSH
14356: LD_INT 3
14358: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14359: LD_EXP 26
14363: PUSH
14364: LD_INT 2
14366: EQUAL
14367: IFFALSE 14447
// begin PrepareHarrisonSupport ( 4 ) ;
14369: LD_INT 4
14371: PPUSH
14372: CALL 1549 0 1
// wait ( 1 1$0 ) ;
14376: LD_INT 2100
14378: PPUSH
14379: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14383: LD_EXP 14
14387: PPUSH
14388: LD_STRING D7-Har-1
14390: PPUSH
14391: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14395: LD_STRING M2
14397: PPUSH
14398: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14402: LD_ADDR_EXP 27
14406: PUSH
14407: LD_INT 27300
14409: PUSH
14410: LD_INT 8400
14412: PUSH
14413: LD_INT 8400
14415: PUSH
14416: LD_INT 6300
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: LIST
14423: PUSH
14424: LD_OWVAR 67
14428: ARRAY
14429: PLUS
14430: ST_TO_ADDR
// startTimer = 1 ;
14431: LD_ADDR_EXP 30
14435: PUSH
14436: LD_INT 1
14438: ST_TO_ADDR
// timerStatus = 3 ;
14439: LD_ADDR_EXP 29
14443: PUSH
14444: LD_INT 3
14446: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14447: LD_EXP 26
14451: PUSH
14452: LD_INT 3
14454: EQUAL
14455: IFFALSE 14535
// begin PrepareHarrisonSupport ( 5 ) ;
14457: LD_INT 5
14459: PPUSH
14460: CALL 1549 0 1
// wait ( 1 1$0 ) ;
14464: LD_INT 2100
14466: PPUSH
14467: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14471: LD_EXP 14
14475: PPUSH
14476: LD_STRING D7-Har-1
14478: PPUSH
14479: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14483: LD_STRING M2
14485: PPUSH
14486: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14490: LD_ADDR_EXP 27
14494: PUSH
14495: LD_INT 21000
14497: PUSH
14498: LD_INT 8400
14500: PUSH
14501: LD_INT 6300
14503: PUSH
14504: LD_INT 4200
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: LIST
14511: PUSH
14512: LD_OWVAR 67
14516: ARRAY
14517: PLUS
14518: ST_TO_ADDR
// startTimer = 1 ;
14519: LD_ADDR_EXP 30
14523: PUSH
14524: LD_INT 1
14526: ST_TO_ADDR
// timerStatus = 3 ;
14527: LD_ADDR_EXP 29
14531: PUSH
14532: LD_INT 3
14534: ST_TO_ADDR
// end ; end ;
14535: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14536: LD_EXP 27
14540: PUSH
14541: LD_INT 8400
14543: LESSEQUAL
14544: PUSH
14545: LD_EXP 29
14549: PUSH
14550: LD_INT 3
14552: EQUAL
14553: AND
14554: IFFALSE 14586
14556: GO 14558
14558: DISABLE
// begin DialogueOn ;
14559: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
14563: LD_EXP 14
14567: PPUSH
14568: LD_STRING D7a-Har-1
14570: PPUSH
14571: CALL_OW 94
// DialogueOff ;
14575: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
14579: LD_STRING M2a
14581: PPUSH
14582: CALL_OW 337
// end ;
14586: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 do var tmp ;
14587: LD_EXP 27
14591: PUSH
14592: LD_INT 0
14594: LESSEQUAL
14595: PUSH
14596: LD_EXP 29
14600: PUSH
14601: LD_INT 3
14603: EQUAL
14604: AND
14605: IFFALSE 14744
14607: GO 14609
14609: DISABLE
14610: LD_INT 0
14612: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
14613: LD_ADDR_VAR 0 1
14617: PUSH
14618: LD_INT 22
14620: PUSH
14621: LD_INT 1
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PPUSH
14628: CALL_OW 69
14632: PUSH
14633: LD_EXP 1
14637: PUSH
14638: EMPTY
14639: LIST
14640: DIFF
14641: ST_TO_ADDR
// saveDonaldson = 2 ;
14642: LD_ADDR_EXP 24
14646: PUSH
14647: LD_INT 2
14649: ST_TO_ADDR
// DialogueOn ;
14650: CALL_OW 6
// if IsOK ( Donaldson ) then
14654: LD_EXP 13
14658: PPUSH
14659: CALL_OW 302
14663: IFFALSE 14679
// begin SayRadio ( Harisson , D8-Har-1 ) ;
14665: LD_EXP 14
14669: PPUSH
14670: LD_STRING D8-Har-1
14672: PPUSH
14673: CALL_OW 94
// end else
14677: GO 14691
// begin SayRadio ( Harisson , D8-Har-1a ) ;
14679: LD_EXP 14
14683: PPUSH
14684: LD_STRING D8-Har-1a
14686: PPUSH
14687: CALL_OW 94
// end ; DialogueOff ;
14691: CALL_OW 7
// SetSide ( tmp , 4 ) ;
14695: LD_VAR 0 1
14699: PPUSH
14700: LD_INT 4
14702: PPUSH
14703: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
14707: LD_VAR 0 1
14711: PPUSH
14712: LD_INT 88
14714: PPUSH
14715: LD_INT 89
14717: PPUSH
14718: CALL_OW 114
// honor = 0 ;
14722: LD_ADDR_EXP 39
14726: PUSH
14727: LD_INT 0
14729: ST_TO_ADDR
// wait ( 0 0$10 ) ;
14730: LD_INT 350
14732: PPUSH
14733: CALL_OW 67
// YouLost ( LostCommand ) ;
14737: LD_STRING LostCommand
14739: PPUSH
14740: CALL_OW 104
// end ;
14744: PPOPN 1
14746: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
14747: LD_INT 22
14749: PUSH
14750: LD_INT 6
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: LD_INT 21
14759: PUSH
14760: LD_INT 1
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PPUSH
14771: CALL_OW 69
14775: PUSH
14776: LD_INT 0
14778: EQUAL
14779: PUSH
14780: LD_EXP 20
14784: PUSH
14785: LD_INT 0
14787: EQUAL
14788: AND
14789: PUSH
14790: LD_EXP 42
14794: PUSH
14795: LD_INT 1
14797: EQUAL
14798: AND
14799: IFFALSE 14893
14801: GO 14803
14803: DISABLE
14804: LD_INT 0
14806: PPUSH
14807: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
14808: LD_ADDR_VAR 0 2
14812: PUSH
14813: LD_INT 22
14815: PUSH
14816: LD_INT 1
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 21
14825: PUSH
14826: LD_INT 1
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 23
14835: PUSH
14836: LD_INT 1
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: LIST
14847: PPUSH
14848: CALL_OW 69
14852: ST_TO_ADDR
// for i in tmp do
14853: LD_ADDR_VAR 0 1
14857: PUSH
14858: LD_VAR 0 2
14862: PUSH
14863: FOR_IN
14864: IFFALSE 14891
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
14866: LD_VAR 0 1
14870: PPUSH
14871: LD_INT 1
14873: PPUSH
14874: LD_INT 4
14876: PPUSH
14877: CALL_OW 12
14881: PPUSH
14882: LD_INT 500
14884: PPUSH
14885: CALL_OW 492
// end ;
14889: GO 14863
14891: POP
14892: POP
// end ; end_of_file
14893: PPOPN 2
14895: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
14896: GO 14898
14898: DISABLE
14899: LD_INT 0
14901: PPUSH
// begin enemyWayX = [ ] ;
14902: LD_ADDR_EXP 46
14906: PUSH
14907: EMPTY
14908: ST_TO_ADDR
// enemyWayY = [ ] ;
14909: LD_ADDR_EXP 47
14913: PUSH
14914: EMPTY
14915: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
14916: LD_ADDR_VAR 0 1
14920: PUSH
14921: LD_INT 1
14923: PPUSH
14924: LD_INT 3
14926: PPUSH
14927: CALL_OW 12
14931: ST_TO_ADDR
// if rnd = 1 then
14932: LD_VAR 0 1
14936: PUSH
14937: LD_INT 1
14939: EQUAL
14940: IFFALSE 14980
// begin enemyWayX = [ 73 , 46 , 29 ] ;
14942: LD_ADDR_EXP 46
14946: PUSH
14947: LD_INT 73
14949: PUSH
14950: LD_INT 46
14952: PUSH
14953: LD_INT 29
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: LIST
14960: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
14961: LD_ADDR_EXP 47
14965: PUSH
14966: LD_INT 71
14968: PUSH
14969: LD_INT 43
14971: PUSH
14972: LD_INT 29
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: LIST
14979: ST_TO_ADDR
// end ; if rnd = 2 then
14980: LD_VAR 0 1
14984: PUSH
14985: LD_INT 2
14987: EQUAL
14988: IFFALSE 15012
// begin enemyWayX = [ 64 ] ;
14990: LD_ADDR_EXP 46
14994: PUSH
14995: LD_INT 64
14997: PUSH
14998: EMPTY
14999: LIST
15000: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15001: LD_ADDR_EXP 47
15005: PUSH
15006: LD_INT 43
15008: PUSH
15009: EMPTY
15010: LIST
15011: ST_TO_ADDR
// end ; if rnd = 3 then
15012: LD_VAR 0 1
15016: PUSH
15017: LD_INT 3
15019: EQUAL
15020: IFFALSE 15044
// begin enemyWayX = [ 80 ] ;
15022: LD_ADDR_EXP 46
15026: PUSH
15027: LD_INT 80
15029: PUSH
15030: EMPTY
15031: LIST
15032: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15033: LD_ADDR_EXP 47
15037: PUSH
15038: LD_INT 28
15040: PUSH
15041: EMPTY
15042: LIST
15043: ST_TO_ADDR
// end ; enable ;
15044: ENABLE
// end ;
15045: PPOPN 1
15047: END
// every 0 0$1 trigger AIEnable = 1 do
15048: LD_EXP 37
15052: PUSH
15053: LD_INT 1
15055: EQUAL
15056: IFFALSE 15170
15058: GO 15060
15060: DISABLE
// begin enable ;
15061: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15062: LD_INT 3
15064: PPUSH
15065: LD_INT 21
15067: PPUSH
15068: LD_INT 7
15070: PPUSH
15071: CALL 5560 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15075: LD_INT 3
15077: PPUSH
15078: LD_INT 8
15080: PPUSH
15081: LD_INT 7
15083: PPUSH
15084: LD_INT 1
15086: PPUSH
15087: CALL 5866 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15091: LD_INT 3
15093: PPUSH
15094: LD_INT 17
15096: PPUSH
15097: LD_INT 108
15099: PPUSH
15100: LD_INT 95
15102: PPUSH
15103: CALL 7110 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15107: LD_INT 3
15109: PPUSH
15110: LD_INT 23
15112: PPUSH
15113: LD_EXP 46
15117: PPUSH
15118: LD_EXP 47
15122: PPUSH
15123: CALL 6522 0 4
// if baseReadyToBuild = 2 then
15127: LD_EXP 20
15131: PUSH
15132: LD_INT 2
15134: EQUAL
15135: IFFALSE 15170
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
15137: LD_INT 6
15139: PPUSH
15140: LD_EXP 21
15144: PPUSH
15145: LD_INT 6
15147: PPUSH
15148: CALL 5560 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15152: LD_INT 6
15154: PPUSH
15155: LD_INT 9
15157: PPUSH
15158: LD_INT 6
15160: PPUSH
15161: LD_EXP 22
15165: PPUSH
15166: CALL 5866 0 4
// end ; end ;
15170: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15171: LD_INT 22
15173: PUSH
15174: LD_INT 3
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 21
15183: PUSH
15184: LD_INT 2
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 55
15193: PUSH
15194: EMPTY
15195: LIST
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: LIST
15201: PPUSH
15202: CALL_OW 69
15206: PUSH
15207: LD_INT 0
15209: EQUAL
15210: PUSH
15211: LD_INT 1
15213: PPUSH
15214: CALL_OW 255
15218: PUSH
15219: LD_INT 3
15221: EQUAL
15222: AND
15223: PUSH
15224: LD_INT 21
15226: PPUSH
15227: CALL_OW 302
15231: AND
15232: PUSH
15233: LD_INT 21
15235: PPUSH
15236: CALL_OW 255
15240: PUSH
15241: LD_INT 3
15243: EQUAL
15244: AND
15245: PUSH
15246: LD_INT 21
15248: PPUSH
15249: CALL_OW 302
15253: AND
15254: IFFALSE 15459
15256: GO 15258
15258: DISABLE
// begin enable ;
15259: ENABLE
// if Difficulty = 1 then
15260: LD_OWVAR 67
15264: PUSH
15265: LD_INT 1
15267: EQUAL
15268: IFFALSE 15312
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15270: LD_INT 3
15272: PPUSH
15273: LD_INT 24
15275: PPUSH
15276: LD_OWVAR 67
15280: PUSH
15281: LD_INT 2
15283: PLUS
15284: PPUSH
15285: LD_INT 42
15287: PUSH
15288: LD_INT 42
15290: PUSH
15291: LD_INT 43
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: LIST
15298: PPUSH
15299: LD_INT 1
15301: PPUSH
15302: LD_INT 1
15304: PPUSH
15305: LD_INT 21
15307: PPUSH
15308: CALL 6410 0 7
// if Difficulty = 2 then
15312: LD_OWVAR 67
15316: PUSH
15317: LD_INT 2
15319: EQUAL
15320: IFFALSE 15387
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15322: LD_INT 3
15324: PPUSH
15325: LD_INT 24
15327: PPUSH
15328: LD_OWVAR 67
15332: PUSH
15333: LD_INT 2
15335: PLUS
15336: PPUSH
15337: LD_INT 42
15339: PUSH
15340: LD_INT 42
15342: PUSH
15343: LD_INT 43
15345: PUSH
15346: LD_INT 43
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: PPUSH
15355: LD_INT 1
15357: PPUSH
15358: LD_INT 1
15360: PPUSH
15361: LD_INT 21
15363: PUSH
15364: LD_INT 22
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 1
15373: PPUSH
15374: LD_INT 2
15376: PPUSH
15377: CALL_OW 12
15381: ARRAY
15382: PPUSH
15383: CALL 6410 0 7
// if Difficulty = 3 then
15387: LD_OWVAR 67
15391: PUSH
15392: LD_INT 3
15394: EQUAL
15395: IFFALSE 15459
// BuildingVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 43 , 43 , 43 , 43 , 44 , 44 ] , 1 , 1 , 22 ) ;
15397: LD_INT 3
15399: PPUSH
15400: LD_INT 24
15402: PPUSH
15403: LD_OWVAR 67
15407: PUSH
15408: LD_INT 2
15410: PPUSH
15411: LD_INT 3
15413: PPUSH
15414: CALL_OW 12
15418: PLUS
15419: PPUSH
15420: LD_INT 43
15422: PUSH
15423: LD_INT 43
15425: PUSH
15426: LD_INT 43
15428: PUSH
15429: LD_INT 43
15431: PUSH
15432: LD_INT 44
15434: PUSH
15435: LD_INT 44
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: PPUSH
15446: LD_INT 1
15448: PPUSH
15449: LD_INT 1
15451: PPUSH
15452: LD_INT 22
15454: PPUSH
15455: CALL 6410 0 7
// end ;
15459: END
// every 0 0$1 do
15460: GO 15462
15462: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
15463: LD_INT 3
15465: PPUSH
15466: LD_INT 1
15468: PPUSH
15469: LD_INT 3
15471: PPUSH
15472: CALL 5475 0 3
15476: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
15477: LD_EXP 20
15481: PUSH
15482: LD_INT 1
15484: EQUAL
15485: IFFALSE 15632
15487: GO 15489
15489: DISABLE
15490: LD_INT 0
15492: PPUSH
15493: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15494: LD_ADDR_VAR 0 2
15498: PUSH
15499: LD_INT 22
15501: PUSH
15502: LD_INT 6
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 21
15511: PUSH
15512: LD_INT 2
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: LD_INT 34
15521: PUSH
15522: LD_INT 51
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: LIST
15533: PPUSH
15534: CALL_OW 69
15538: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
15539: LD_VAR 0 2
15543: PUSH
15544: LD_INT 1
15546: ARRAY
15547: PPUSH
15548: LD_EXP 21
15552: PPUSH
15553: CALL_OW 250
15557: PUSH
15558: LD_INT 5
15560: MINUS
15561: PPUSH
15562: LD_EXP 21
15566: PPUSH
15567: CALL_OW 251
15571: PUSH
15572: LD_INT 5
15574: MINUS
15575: PPUSH
15576: CALL_OW 111
// wait ( 0 0$5 ) ;
15580: LD_INT 175
15582: PPUSH
15583: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
15587: LD_VAR 0 2
15591: PUSH
15592: LD_INT 1
15594: ARRAY
15595: PPUSH
15596: LD_INT 41
15598: PPUSH
15599: LD_INT 52
15601: PPUSH
15602: CALL_OW 177
// wait ( 0 0$40 ) ;
15606: LD_INT 1400
15608: PPUSH
15609: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
15613: LD_VAR 0 2
15617: PUSH
15618: LD_INT 1
15620: ARRAY
15621: PPUSH
15622: LD_INT 41
15624: PPUSH
15625: LD_INT 44
15627: PPUSH
15628: CALL_OW 111
// end ;
15632: PPOPN 2
15634: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
15635: LD_EXP 21
15639: PPUSH
15640: CALL_OW 274
15644: PPUSH
15645: LD_INT 1
15647: PPUSH
15648: CALL_OW 275
15652: PUSH
15653: LD_INT 100
15655: GREATEREQUAL
15656: IFFALSE 15884
15658: GO 15660
15660: DISABLE
15661: LD_INT 0
15663: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15664: LD_ADDR_VAR 0 1
15668: PUSH
15669: LD_INT 22
15671: PUSH
15672: LD_INT 6
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: LD_INT 21
15681: PUSH
15682: LD_INT 1
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: LD_INT 25
15691: PUSH
15692: LD_INT 2
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: LIST
15703: PPUSH
15704: CALL_OW 69
15708: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
15709: LD_VAR 0 1
15713: PUSH
15714: LD_INT 1
15716: ARRAY
15717: PPUSH
15718: LD_INT 4
15720: PPUSH
15721: LD_INT 39
15723: PPUSH
15724: LD_INT 37
15726: PPUSH
15727: LD_INT 3
15729: PPUSH
15730: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
15734: LD_VAR 0 1
15738: PUSH
15739: LD_INT 1
15741: ARRAY
15742: PPUSH
15743: LD_INT 29
15745: PPUSH
15746: LD_INT 42
15748: PPUSH
15749: LD_INT 54
15751: PPUSH
15752: LD_INT 3
15754: PPUSH
15755: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
15759: LD_VAR 0 1
15763: PUSH
15764: LD_INT 1
15766: ARRAY
15767: PPUSH
15768: LD_INT 6
15770: PPUSH
15771: LD_INT 38
15773: PPUSH
15774: LD_INT 48
15776: PPUSH
15777: LD_INT 0
15779: PPUSH
15780: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
15784: LD_VAR 0 1
15788: PUSH
15789: LD_INT 1
15791: ARRAY
15792: PPUSH
15793: LD_INT 2
15795: PPUSH
15796: LD_INT 32
15798: PPUSH
15799: LD_INT 38
15801: PPUSH
15802: LD_INT 2
15804: PPUSH
15805: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
15809: LD_VAR 0 1
15813: PUSH
15814: LD_INT 1
15816: ARRAY
15817: PPUSH
15818: LD_INT 26
15820: PPUSH
15821: LD_INT 39
15823: PPUSH
15824: LD_INT 55
15826: PPUSH
15827: LD_INT 3
15829: PPUSH
15830: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
15834: LD_VAR 0 1
15838: PUSH
15839: LD_INT 1
15841: ARRAY
15842: PPUSH
15843: LD_INT 32
15845: PPUSH
15846: LD_INT 31
15848: PPUSH
15849: LD_INT 31
15851: PPUSH
15852: LD_INT 3
15854: PPUSH
15855: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
15859: LD_VAR 0 1
15863: PUSH
15864: LD_INT 1
15866: ARRAY
15867: PPUSH
15868: LD_INT 31
15870: PPUSH
15871: LD_INT 50
15873: PPUSH
15874: LD_INT 51
15876: PPUSH
15877: LD_INT 4
15879: PPUSH
15880: CALL_OW 205
// end ; end_of_file
15884: PPOPN 1
15886: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
15887: LD_INT 0
15889: PPUSH
15890: PPUSH
15891: PPUSH
15892: PPUSH
15893: PPUSH
15894: PPUSH
15895: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
15896: LD_ADDR_VAR 0 3
15900: PUSH
15901: LD_INT 22
15903: PUSH
15904: LD_INT 6
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PUSH
15911: LD_INT 21
15913: PUSH
15914: LD_INT 1
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PUSH
15921: LD_INT 25
15923: PUSH
15924: LD_INT 1
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: LD_INT 3
15933: PUSH
15934: LD_INT 54
15936: PUSH
15937: EMPTY
15938: LIST
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: PPUSH
15950: CALL_OW 69
15954: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
15955: LD_ADDR_VAR 0 7
15959: PUSH
15960: LD_INT 22
15962: PUSH
15963: LD_INT 6
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 21
15972: PUSH
15973: LD_INT 1
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 25
15982: PUSH
15983: LD_INT 1
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: LD_INT 54
15992: PUSH
15993: EMPTY
15994: LIST
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: PPUSH
16002: CALL_OW 69
16006: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16007: LD_ADDR_VAR 0 4
16011: PUSH
16012: LD_INT 22
16014: PUSH
16015: LD_INT 6
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: LD_INT 21
16024: PUSH
16025: LD_INT 1
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 25
16034: PUSH
16035: LD_INT 2
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: LIST
16046: PPUSH
16047: CALL_OW 69
16051: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
16052: LD_ADDR_VAR 0 6
16056: PUSH
16057: LD_INT 22
16059: PUSH
16060: LD_INT 6
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 21
16069: PUSH
16070: LD_INT 1
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 25
16079: PUSH
16080: LD_INT 4
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: LIST
16091: PPUSH
16092: CALL_OW 69
16096: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16097: LD_ADDR_VAR 0 8
16101: PUSH
16102: LD_INT 22
16104: PUSH
16105: LD_INT 6
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 21
16114: PUSH
16115: LD_INT 2
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 34
16124: PUSH
16125: LD_INT 51
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: LIST
16136: PPUSH
16137: CALL_OW 69
16141: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16142: LD_VAR 0 1
16146: PPUSH
16147: CALL_OW 255
16151: PUSH
16152: LD_INT 6
16154: EQUAL
16155: PUSH
16156: LD_VAR 0 1
16160: PPUSH
16161: CALL_OW 266
16165: PUSH
16166: LD_INT 0
16168: EQUAL
16169: AND
16170: IFFALSE 16190
// begin ruPDepot = building ;
16172: LD_ADDR_EXP 21
16176: PUSH
16177: LD_VAR 0 1
16181: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16182: LD_ADDR_EXP 20
16186: PUSH
16187: LD_INT 1
16189: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16190: LD_VAR 0 1
16194: PPUSH
16195: CALL_OW 266
16199: PUSH
16200: LD_INT 4
16202: EQUAL
16203: PUSH
16204: LD_VAR 0 1
16208: PPUSH
16209: CALL_OW 255
16213: PUSH
16214: LD_INT 6
16216: EQUAL
16217: AND
16218: IFFALSE 16251
// for i in tmpSold do
16220: LD_ADDR_VAR 0 2
16224: PUSH
16225: LD_VAR 0 3
16229: PUSH
16230: FOR_IN
16231: IFFALSE 16249
// ComEnterUnit ( i , building ) ;
16233: LD_VAR 0 2
16237: PPUSH
16238: LD_VAR 0 1
16242: PPUSH
16243: CALL_OW 120
16247: GO 16230
16249: POP
16250: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 266
16260: PUSH
16261: LD_INT 6
16263: EQUAL
16264: PUSH
16265: LD_VAR 0 1
16269: PPUSH
16270: CALL_OW 255
16274: PUSH
16275: LD_INT 6
16277: EQUAL
16278: AND
16279: IFFALSE 16337
// begin for i in tmpSci do
16281: LD_ADDR_VAR 0 2
16285: PUSH
16286: LD_VAR 0 6
16290: PUSH
16291: FOR_IN
16292: IFFALSE 16310
// ComEnterUnit ( i , building ) ;
16294: LD_VAR 0 2
16298: PPUSH
16299: LD_VAR 0 1
16303: PPUSH
16304: CALL_OW 120
16308: GO 16291
16310: POP
16311: POP
// ResAllTechs ( 6 , building , 3 ) ;
16312: LD_INT 6
16314: PPUSH
16315: LD_VAR 0 1
16319: PPUSH
16320: LD_INT 3
16322: PPUSH
16323: CALL 5475 0 3
// ruPLab = building ;
16327: LD_ADDR_EXP 22
16331: PUSH
16332: LD_VAR 0 1
16336: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16337: LD_VAR 0 1
16341: PPUSH
16342: CALL_OW 266
16346: PUSH
16347: LD_INT 2
16349: EQUAL
16350: PUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL_OW 255
16360: PUSH
16361: LD_INT 6
16363: EQUAL
16364: AND
16365: IFFALSE 16416
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16367: LD_ADDR_VAR 0 5
16371: PUSH
16372: LD_VAR 0 8
16376: PUSH
16377: LD_INT 1
16379: ARRAY
16380: PPUSH
16381: CALL_OW 313
16385: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16386: LD_VAR 0 5
16390: PPUSH
16391: CALL_OW 121
// wait ( 0 0$1 ) ;
16395: LD_INT 35
16397: PPUSH
16398: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16402: LD_VAR 0 5
16406: PPUSH
16407: LD_VAR 0 1
16411: PPUSH
16412: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
16416: LD_VAR 0 1
16420: PPUSH
16421: CALL_OW 266
16425: PUSH
16426: LD_INT 32
16428: EQUAL
16429: PUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 255
16439: PUSH
16440: LD_INT 6
16442: EQUAL
16443: AND
16444: IFFALSE 16496
// begin ComPlaceWeapon ( building , 42 ) ;
16446: LD_VAR 0 1
16450: PPUSH
16451: LD_INT 42
16453: PPUSH
16454: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
16458: LD_VAR 0 7
16462: PUSH
16463: LD_INT 1
16465: ARRAY
16466: PPUSH
16467: CALL_OW 122
// wait ( 0 0$1 ) ;
16471: LD_INT 35
16473: PPUSH
16474: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
16478: LD_VAR 0 7
16482: PUSH
16483: LD_INT 1
16485: ARRAY
16486: PPUSH
16487: LD_VAR 0 1
16491: PPUSH
16492: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
16496: LD_VAR 0 1
16500: PPUSH
16501: CALL_OW 266
16505: PUSH
16506: LD_INT 31
16508: EQUAL
16509: PUSH
16510: LD_VAR 0 1
16514: PPUSH
16515: CALL_OW 255
16519: PUSH
16520: LD_INT 6
16522: EQUAL
16523: AND
16524: IFFALSE 16590
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
16526: LD_VAR 0 7
16530: PUSH
16531: LD_INT 2
16533: ARRAY
16534: PPUSH
16535: CALL_OW 122
// wait ( 0 0$1 ) ;
16539: LD_INT 35
16541: PPUSH
16542: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
16546: LD_VAR 0 7
16550: PUSH
16551: LD_INT 2
16553: ARRAY
16554: PPUSH
16555: LD_VAR 0 1
16559: PPUSH
16560: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
16564: LD_VAR 0 4
16568: PUSH
16569: LD_INT 1
16571: ARRAY
16572: PPUSH
16573: LD_EXP 21
16577: PPUSH
16578: CALL_OW 120
// baseReadyToBuild = 2 ;
16582: LD_ADDR_EXP 20
16586: PUSH
16587: LD_INT 2
16589: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
16590: LD_VAR 0 1
16594: PPUSH
16595: CALL_OW 266
16599: PUSH
16600: LD_INT 32
16602: EQUAL
16603: PUSH
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 255
16613: PUSH
16614: LD_INT 1
16616: EQUAL
16617: AND
16618: PUSH
16619: LD_EXP 32
16623: PUSH
16624: LD_INT 0
16626: EQUAL
16627: AND
16628: IFFALSE 16873
// begin bunkerDialog = 1 ;
16630: LD_ADDR_EXP 32
16634: PUSH
16635: LD_INT 1
16637: ST_TO_ADDR
// if IsOK ( Claptopn ) then
16638: LD_EXP 11
16642: PPUSH
16643: CALL_OW 302
16647: IFFALSE 16663
// begin Say ( Claptopn , D11-Eng1-1 ) ;
16649: LD_EXP 11
16653: PPUSH
16654: LD_STRING D11-Eng1-1
16656: PPUSH
16657: CALL_OW 88
// end else
16661: GO 16859
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16663: LD_INT 22
16665: PUSH
16666: LD_INT 1
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 21
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 25
16685: PUSH
16686: LD_INT 3
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 26
16695: PUSH
16696: LD_INT 1
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: PPUSH
16709: CALL_OW 69
16713: PUSH
16714: LD_EXP 1
16718: PUSH
16719: EMPTY
16720: LIST
16721: PUSH
16722: LD_INT 0
16724: GREATER
16725: DIFF
16726: IFFALSE 16800
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16728: LD_INT 22
16730: PUSH
16731: LD_INT 1
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 21
16740: PUSH
16741: LD_INT 1
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 25
16750: PUSH
16751: LD_INT 2
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 26
16760: PUSH
16761: LD_INT 1
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: PPUSH
16774: CALL_OW 69
16778: PUSH
16779: LD_EXP 1
16783: PUSH
16784: EMPTY
16785: LIST
16786: DIFF
16787: PPUSH
16788: LD_STRING D11-Eng1-1
16790: PPUSH
16791: LD_STRING D11-Eng1-1
16793: PPUSH
16794: CALL 4036 0 3
// end else
16798: GO 16859
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16800: LD_INT 22
16802: PUSH
16803: LD_INT 1
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 21
16812: PUSH
16813: LD_INT 1
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 26
16822: PUSH
16823: LD_INT 1
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: LIST
16834: PPUSH
16835: CALL_OW 69
16839: PUSH
16840: LD_EXP 1
16844: PUSH
16845: EMPTY
16846: LIST
16847: DIFF
16848: PPUSH
16849: LD_STRING D11-Eng1-1
16851: PPUSH
16852: LD_STRING D11-Eng1-1
16854: PPUSH
16855: CALL 4036 0 3
// end ; end ; if energyVDialog = 0 then
16859: LD_EXP 33
16863: PUSH
16864: LD_INT 0
16866: EQUAL
16867: IFFALSE 16873
// EnergyDialog ;
16869: CALL 4527 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
16873: LD_VAR 0 1
16877: PPUSH
16878: CALL_OW 266
16882: PUSH
16883: LD_INT 29
16885: EQUAL
16886: PUSH
16887: LD_VAR 0 1
16891: PPUSH
16892: CALL_OW 255
16896: PUSH
16897: LD_INT 1
16899: EQUAL
16900: AND
16901: IFFALSE 16911
// buildOil = 1 ;
16903: LD_ADDR_EXP 34
16907: PUSH
16908: LD_INT 1
16910: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
16911: LD_VAR 0 1
16915: PPUSH
16916: CALL_OW 266
16920: PUSH
16921: LD_INT 26
16923: EQUAL
16924: PUSH
16925: LD_VAR 0 1
16929: PPUSH
16930: CALL_OW 255
16934: PUSH
16935: LD_INT 1
16937: EQUAL
16938: AND
16939: IFFALSE 16949
// buildPower = 1 ;
16941: LD_ADDR_EXP 35
16945: PUSH
16946: LD_INT 1
16948: ST_TO_ADDR
// end ;
16949: PPOPN 8
16951: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
16952: LD_VAR 0 1
16956: PPUSH
16957: CALL_OW 266
16961: PUSH
16962: LD_INT 3
16964: EQUAL
16965: PUSH
16966: LD_VAR 0 1
16970: PPUSH
16971: CALL_OW 255
16975: PUSH
16976: LD_INT 1
16978: EQUAL
16979: AND
16980: PUSH
16981: LD_EXP 31
16985: PUSH
16986: LD_INT 0
16988: EQUAL
16989: AND
16990: IFFALSE 17306
// begin factoryDialog = 1 ;
16992: LD_ADDR_EXP 31
16996: PUSH
16997: LD_INT 1
16999: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17000: LD_INT 22
17002: PUSH
17003: LD_INT 1
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 21
17012: PUSH
17013: LD_INT 3
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 30
17022: PUSH
17023: LD_INT 3
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 24
17032: PUSH
17033: LD_INT 1000
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: PPUSH
17046: CALL_OW 69
17050: PUSH
17051: LD_INT 1
17053: ARRAY
17054: PPUSH
17055: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
17059: LD_EXP 1
17063: PPUSH
17064: LD_STRING D9a-JMM-1
17066: PPUSH
17067: CALL_OW 88
// if IsOK ( Campell ) then
17071: LD_EXP 12
17075: PPUSH
17076: CALL_OW 302
17080: IFFALSE 17096
// begin Say ( Campell , D9a-Mech1-1 ) ;
17082: LD_EXP 12
17086: PPUSH
17087: LD_STRING D9a-Mech1-1
17089: PPUSH
17090: CALL_OW 88
// end else
17094: GO 17292
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17096: LD_INT 22
17098: PUSH
17099: LD_INT 1
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: LD_INT 21
17108: PUSH
17109: LD_INT 1
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: LD_INT 25
17118: PUSH
17119: LD_INT 3
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: LD_INT 26
17128: PUSH
17129: LD_INT 1
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: PPUSH
17142: CALL_OW 69
17146: PUSH
17147: LD_EXP 1
17151: PUSH
17152: EMPTY
17153: LIST
17154: PUSH
17155: LD_INT 0
17157: GREATER
17158: DIFF
17159: IFFALSE 17233
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17161: LD_INT 22
17163: PUSH
17164: LD_INT 1
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 21
17173: PUSH
17174: LD_INT 1
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 25
17183: PUSH
17184: LD_INT 3
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 26
17193: PUSH
17194: LD_INT 1
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: PPUSH
17207: CALL_OW 69
17211: PUSH
17212: LD_EXP 1
17216: PUSH
17217: EMPTY
17218: LIST
17219: DIFF
17220: PPUSH
17221: LD_STRING D9a-Mech1-1
17223: PPUSH
17224: LD_STRING D9a-Mech1-1
17226: PPUSH
17227: CALL 4036 0 3
// end else
17231: GO 17292
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17233: LD_INT 22
17235: PUSH
17236: LD_INT 1
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 21
17245: PUSH
17246: LD_INT 1
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 26
17255: PUSH
17256: LD_INT 1
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: LIST
17267: PPUSH
17268: CALL_OW 69
17272: PUSH
17273: LD_EXP 1
17277: PUSH
17278: EMPTY
17279: LIST
17280: DIFF
17281: PPUSH
17282: LD_STRING D9a-Mech1-1
17284: PPUSH
17285: LD_STRING D9a-Mech1-1
17287: PPUSH
17288: CALL 4036 0 3
// end ; end ; if energyVDialog = 0 then
17292: LD_EXP 33
17296: PUSH
17297: LD_INT 0
17299: EQUAL
17300: IFFALSE 17306
// EnergyDialog ;
17302: CALL 4527 0 0
// end ; end ;
17306: PPOPN 1
17308: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17309: LD_VAR 0 1
17313: PPUSH
17314: CALL_OW 247
17318: PUSH
17319: LD_INT 1
17321: EQUAL
17322: PUSH
17323: LD_VAR 0 1
17327: PPUSH
17328: CALL_OW 255
17332: PUSH
17333: LD_INT 1
17335: EQUAL
17336: AND
17337: IFFALSE 17353
// lostCounter = lostCounter + 1 ;
17339: LD_ADDR_EXP 38
17343: PUSH
17344: LD_EXP 38
17348: PUSH
17349: LD_INT 1
17351: PLUS
17352: ST_TO_ADDR
// if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
17353: LD_VAR 0 1
17357: PPUSH
17358: CALL_OW 257
17362: PUSH
17363: LD_INT 3
17365: EQUAL
17366: PUSH
17367: LD_VAR 0 1
17371: PPUSH
17372: CALL_OW 255
17376: PUSH
17377: LD_INT 3
17379: EQUAL
17380: AND
17381: PUSH
17382: LD_INT 24
17384: PPUSH
17385: CALL_OW 302
17389: AND
17390: PUSH
17391: LD_INT 24
17393: PPUSH
17394: CALL_OW 255
17398: PUSH
17399: LD_INT 3
17401: EQUAL
17402: AND
17403: IFFALSE 17471
// begin uc_side = 3 ;
17405: LD_ADDR_OWVAR 20
17409: PUSH
17410: LD_INT 3
17412: ST_TO_ADDR
// uc_nation = 3 ;
17413: LD_ADDR_OWVAR 21
17417: PUSH
17418: LD_INT 3
17420: ST_TO_ADDR
// hc_gallery :=  ;
17421: LD_ADDR_OWVAR 33
17425: PUSH
17426: LD_STRING 
17428: ST_TO_ADDR
// hc_name :=  ;
17429: LD_ADDR_OWVAR 26
17433: PUSH
17434: LD_STRING 
17436: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
17437: LD_INT 0
17439: PPUSH
17440: LD_EXP 16
17444: PPUSH
17445: LD_EXP 17
17449: PPUSH
17450: CALL_OW 12
17454: PPUSH
17455: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rubfact0 ) ;
17459: CALL_OW 44
17463: PPUSH
17464: LD_INT 24
17466: PPUSH
17467: CALL_OW 52
// end ; end ;
17471: PPOPN 1
17473: END
// on Contact ( side1 , side2 ) do var i , tmp ;
17474: LD_INT 0
17476: PPUSH
17477: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
17478: LD_ADDR_VAR 0 4
17482: PUSH
17483: LD_INT 22
17485: PUSH
17486: LD_INT 1
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PPUSH
17493: CALL_OW 69
17497: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
17498: LD_VAR 0 1
17502: PUSH
17503: LD_INT 1
17505: EQUAL
17506: PUSH
17507: LD_VAR 0 2
17511: PUSH
17512: LD_INT 6
17514: EQUAL
17515: AND
17516: PUSH
17517: LD_EXP 41
17521: PUSH
17522: LD_INT 1
17524: EQUAL
17525: AND
17526: IFFALSE 17581
// begin donaldsonCoopAttack = 0 ;
17528: LD_ADDR_EXP 41
17532: PUSH
17533: LD_INT 0
17535: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
17536: LD_ADDR_VAR 0 3
17540: PUSH
17541: LD_INT 22
17543: PUSH
17544: LD_INT 4
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: EMPTY
17552: LIST
17553: PPUSH
17554: CALL_OW 69
17558: PUSH
17559: FOR_IN
17560: IFFALSE 17579
// ComAgressiveMove ( i , 52 , 64 ) ;
17562: LD_VAR 0 3
17566: PPUSH
17567: LD_INT 52
17569: PPUSH
17570: LD_INT 64
17572: PPUSH
17573: CALL_OW 114
17577: GO 17559
17579: POP
17580: POP
// end ; end ;
17581: PPOPN 4
17583: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
17584: LD_VAR 0 1
17588: PPUSH
17589: CALL_OW 264
17593: PUSH
17594: LD_INT 53
17596: EQUAL
17597: IFFALSE 17682
// begin CutTreeInArea ( vehicle , TreesArea ) ;
17599: LD_VAR 0 1
17603: PPUSH
17604: LD_INT 21
17606: PPUSH
17607: CALL 4743 0 2
// uc_side = 3 ;
17611: LD_ADDR_OWVAR 20
17615: PUSH
17616: LD_INT 3
17618: ST_TO_ADDR
// uc_nation = 3 ;
17619: LD_ADDR_OWVAR 21
17623: PUSH
17624: LD_INT 3
17626: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
17627: LD_INT 0
17629: PPUSH
17630: LD_EXP 17
17634: PPUSH
17635: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
17639: CALL_OW 44
17643: PPUSH
17644: LD_VAR 0 2
17648: PPUSH
17649: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
17653: LD_VAR 0 1
17657: PPUSH
17658: LD_INT 6
17660: PPUSH
17661: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
17665: LD_VAR 0 1
17669: PPUSH
17670: CALL_OW 313
17674: PPUSH
17675: LD_INT 6
17677: PPUSH
17678: CALL_OW 235
// end ; end ;
17682: PPOPN 2
17684: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
17685: LD_INT 0
17687: PPUSH
17688: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17689: LD_VAR 0 1
17693: PPUSH
17694: CALL_OW 255
17698: PUSH
17699: LD_INT 3
17701: EQUAL
17702: PUSH
17703: LD_VAR 0 1
17707: PPUSH
17708: CALL_OW 247
17712: PUSH
17713: LD_INT 2
17715: EQUAL
17716: AND
17717: IFFALSE 17811
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
17719: LD_VAR 0 1
17723: PPUSH
17724: CALL_OW 264
17728: PUSH
17729: LD_INT 42
17731: EQUAL
17732: PUSH
17733: LD_VAR 0 1
17737: PPUSH
17738: CALL_OW 264
17742: PUSH
17743: LD_INT 43
17745: EQUAL
17746: OR
17747: PUSH
17748: LD_VAR 0 1
17752: PPUSH
17753: CALL_OW 264
17757: PUSH
17758: LD_INT 44
17760: EQUAL
17761: OR
17762: IFFALSE 17811
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
17764: LD_INT 24
17766: PPUSH
17767: LD_VAR 0 1
17771: PPUSH
17772: CALL_OW 265
17776: PPUSH
17777: LD_VAR 0 1
17781: PPUSH
17782: CALL_OW 262
17786: PPUSH
17787: LD_VAR 0 1
17791: PPUSH
17792: CALL_OW 263
17796: PPUSH
17797: LD_VAR 0 1
17801: PPUSH
17802: CALL_OW 264
17806: PPUSH
17807: CALL_OW 185
// end ;
17811: PPOPN 3
17813: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
17814: LD_VAR 0 1
17818: PPUSH
17819: CALL_OW 255
17823: PUSH
17824: LD_INT 3
17826: EQUAL
17827: PUSH
17828: LD_VAR 0 2
17832: PPUSH
17833: CALL_OW 255
17837: PUSH
17838: LD_INT 3
17840: EQUAL
17841: AND
17842: PUSH
17843: LD_VAR 0 1
17847: PPUSH
17848: CALL_OW 302
17852: AND
17853: IFFALSE 17895
// begin ComRepairVehicle ( human , vehicle ) ;
17855: LD_VAR 0 2
17859: PPUSH
17860: LD_VAR 0 1
17864: PPUSH
17865: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
17869: LD_VAR 0 2
17873: PPUSH
17874: LD_VAR 0 1
17878: PPUSH
17879: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
17883: LD_VAR 0 1
17887: PPUSH
17888: LD_INT 100
17890: PPUSH
17891: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
17895: LD_VAR 0 1
17899: PPUSH
17900: CALL_OW 255
17904: PUSH
17905: LD_INT 3
17907: EQUAL
17908: PUSH
17909: LD_VAR 0 2
17913: PPUSH
17914: CALL_OW 255
17918: PUSH
17919: LD_INT 3
17921: EQUAL
17922: AND
17923: PUSH
17924: LD_INT 24
17926: PPUSH
17927: CALL_OW 302
17931: AND
17932: PUSH
17933: LD_VAR 0 1
17937: PPUSH
17938: CALL_OW 302
17942: NOT
17943: AND
17944: IFFALSE 17958
// ComEnterUnit ( human , rubfact0 ) ;
17946: LD_VAR 0 2
17950: PPUSH
17951: LD_INT 24
17953: PPUSH
17954: CALL_OW 120
// end ;
17958: PPOPN 2
17960: END
// on Command ( comandid ) do var i , j , tmp ;
17961: LD_INT 0
17963: PPUSH
17964: PPUSH
17965: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
17966: LD_ADDR_VAR 0 2
17970: PUSH
17971: LD_INT 22
17973: PUSH
17974: LD_INT 1
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 2
17983: PUSH
17984: LD_INT 21
17986: PUSH
17987: LD_INT 1
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 21
17996: PUSH
17997: LD_INT 2
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: LIST
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PPUSH
18013: CALL_OW 69
18017: PUSH
18018: FOR_IN
18019: IFFALSE 18129
// begin if GetTaskList ( i ) > 0 then
18021: LD_VAR 0 2
18025: PPUSH
18026: CALL_OW 437
18030: PUSH
18031: LD_INT 0
18033: GREATER
18034: IFFALSE 18127
// begin for j = 1 to GetTaskList ( i ) do
18036: LD_ADDR_VAR 0 3
18040: PUSH
18041: DOUBLE
18042: LD_INT 1
18044: DEC
18045: ST_TO_ADDR
18046: LD_VAR 0 2
18050: PPUSH
18051: CALL_OW 437
18055: PUSH
18056: FOR_TO
18057: IFFALSE 18125
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
18059: LD_ADDR_VAR 0 4
18063: PUSH
18064: LD_VAR 0 2
18068: PPUSH
18069: CALL_OW 437
18073: PUSH
18074: LD_VAR 0 3
18078: ARRAY
18079: PUSH
18080: LD_INT 4
18082: ARRAY
18083: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
18084: LD_VAR 0 4
18088: PPUSH
18089: CALL_OW 255
18093: PUSH
18094: LD_INT 4
18096: EQUAL
18097: PUSH
18098: LD_VAR 0 4
18102: PPUSH
18103: CALL_OW 255
18107: PUSH
18108: LD_INT 0
18110: EQUAL
18111: OR
18112: IFFALSE 18123
// ComStop ( i ) ;
18114: LD_VAR 0 2
18118: PPUSH
18119: CALL_OW 141
// end ;
18123: GO 18056
18125: POP
18126: POP
// end ; end ;
18127: GO 18018
18129: POP
18130: POP
// end ; end_of_file
18131: PPOPN 4
18133: END
// every 10 10$0 do
18134: GO 18136
18136: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18137: LD_INT 5
18139: PPUSH
18140: LD_INT 3
18142: PPUSH
18143: LD_INT 2
18145: PPUSH
18146: LD_INT 5
18148: PPUSH
18149: CALL_OW 12
18153: PUSH
18154: LD_INT 2
18156: PUSH
18157: LD_INT 3
18159: PUSH
18160: LD_INT 3
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: LIST
18167: PUSH
18168: LD_OWVAR 67
18172: ARRAY
18173: PLUS
18174: PPUSH
18175: LD_INT 0
18177: PPUSH
18178: LD_INT 0
18180: PPUSH
18181: LD_INT 0
18183: PPUSH
18184: LD_INT 0
18186: PPUSH
18187: LD_EXP 16
18191: PPUSH
18192: LD_EXP 17
18196: PPUSH
18197: CALL_OW 12
18201: PPUSH
18202: LD_INT 4
18204: PPUSH
18205: LD_INT 14
18207: PPUSH
18208: LD_INT 1
18210: PPUSH
18211: LD_INT 2
18213: PPUSH
18214: CALL 7313 0 12
// end ;
18218: END
// every 15 15$0 do
18219: GO 18221
18221: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 1 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18222: LD_INT 5
18224: PPUSH
18225: LD_INT 3
18227: PPUSH
18228: LD_INT 3
18230: PPUSH
18231: LD_INT 5
18233: PPUSH
18234: CALL_OW 12
18238: PUSH
18239: LD_INT 2
18241: PUSH
18242: LD_INT 3
18244: PUSH
18245: LD_INT 3
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: LIST
18252: PUSH
18253: LD_OWVAR 67
18257: ARRAY
18258: PLUS
18259: PPUSH
18260: LD_INT 0
18262: PPUSH
18263: LD_INT 0
18265: PPUSH
18266: LD_INT 0
18268: PPUSH
18269: LD_INT 1
18271: PPUSH
18272: LD_EXP 16
18276: PPUSH
18277: LD_EXP 17
18281: PPUSH
18282: CALL_OW 12
18286: PPUSH
18287: LD_INT 4
18289: PPUSH
18290: LD_INT 14
18292: PPUSH
18293: LD_INT 1
18295: PPUSH
18296: LD_INT 1
18298: PPUSH
18299: CALL 7313 0 12
// end ;
18303: END
// every 25 25$0 do
18304: GO 18306
18306: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18307: LD_INT 5
18309: PPUSH
18310: LD_INT 3
18312: PPUSH
18313: LD_INT 2
18315: PPUSH
18316: LD_INT 3
18318: PPUSH
18319: CALL_OW 12
18323: PUSH
18324: LD_INT 2
18326: PUSH
18327: LD_INT 3
18329: PUSH
18330: LD_INT 3
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: PUSH
18338: LD_OWVAR 67
18342: ARRAY
18343: PLUS
18344: PPUSH
18345: LD_INT 0
18347: PPUSH
18348: LD_INT 0
18350: PPUSH
18351: LD_INT 0
18353: PPUSH
18354: LD_INT 2
18356: PPUSH
18357: LD_EXP 16
18361: PPUSH
18362: LD_EXP 17
18366: PPUSH
18367: CALL_OW 12
18371: PPUSH
18372: LD_INT 4
18374: PPUSH
18375: LD_INT 14
18377: PPUSH
18378: LD_INT 1
18380: PPUSH
18381: LD_INT 1
18383: PPUSH
18384: CALL 7313 0 12
// end ;
18388: END
// every 26 26$0 do
18389: GO 18391
18391: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18392: LD_INT 5
18394: PPUSH
18395: LD_INT 3
18397: PPUSH
18398: LD_INT 1
18400: PPUSH
18401: LD_INT 3
18403: PPUSH
18404: CALL_OW 12
18408: PUSH
18409: LD_INT 1
18411: PUSH
18412: LD_INT 2
18414: PUSH
18415: LD_INT 2
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: LIST
18422: PUSH
18423: LD_OWVAR 67
18427: ARRAY
18428: PLUS
18429: PPUSH
18430: LD_INT 0
18432: PPUSH
18433: LD_INT 0
18435: PPUSH
18436: LD_INT 0
18438: PPUSH
18439: LD_INT 2
18441: PPUSH
18442: LD_EXP 16
18446: PPUSH
18447: LD_EXP 17
18451: PPUSH
18452: CALL_OW 12
18456: PPUSH
18457: LD_INT 4
18459: PPUSH
18460: LD_INT 14
18462: PPUSH
18463: LD_INT 1
18465: PPUSH
18466: LD_INT 2
18468: PPUSH
18469: CALL 7313 0 12
// end ;
18473: END
// every 25 25$0 do
18474: GO 18476
18476: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
18477: LD_INT 4
18479: PPUSH
18480: LD_INT 5
18482: PPUSH
18483: LD_INT 3
18485: PUSH
18486: LD_INT 4
18488: PUSH
18489: LD_INT 5
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: LIST
18496: PUSH
18497: LD_OWVAR 67
18501: ARRAY
18502: PPUSH
18503: LD_EXP 16
18507: PPUSH
18508: LD_EXP 17
18512: PPUSH
18513: CALL_OW 12
18517: PPUSH
18518: LD_INT 3
18520: PPUSH
18521: LD_INT 1
18523: PPUSH
18524: LD_INT 1
18526: PPUSH
18527: LD_INT 42
18529: PUSH
18530: LD_INT 42
18532: PUSH
18533: LD_INT 43
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 42
18543: PUSH
18544: LD_INT 43
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 43
18553: PUSH
18554: LD_INT 43
18556: PUSH
18557: LD_INT 43
18559: PUSH
18560: LD_INT 44
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: LIST
18573: PUSH
18574: LD_OWVAR 67
18578: ARRAY
18579: PPUSH
18580: EMPTY
18581: PPUSH
18582: EMPTY
18583: PPUSH
18584: LD_INT 1
18586: PPUSH
18587: CALL 8975 0 11
// end ; end_of_file
18591: END
// every 0 0$1 trigger startTimer = 1 do
18592: LD_EXP 30
18596: PUSH
18597: LD_INT 1
18599: EQUAL
18600: IFFALSE 18730
18602: GO 18604
18604: DISABLE
// begin enable ;
18605: ENABLE
// if timerStatus = 1 then
18606: LD_EXP 29
18610: PUSH
18611: LD_INT 1
18613: EQUAL
18614: IFFALSE 18647
// begin timeToSupport = timeToSupport - 0 0$01 ;
18616: LD_ADDR_EXP 28
18620: PUSH
18621: LD_EXP 28
18625: PUSH
18626: LD_INT 35
18628: MINUS
18629: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
18630: LD_ADDR_OWVAR 47
18634: PUSH
18635: LD_STRING #Am04-1
18637: PUSH
18638: LD_EXP 28
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: ST_TO_ADDR
// end ; if timerStatus = 2 then
18647: LD_EXP 29
18651: PUSH
18652: LD_INT 2
18654: EQUAL
18655: IFFALSE 18688
// begin timeToSupport = timeToSupport - 0 0$01 ;
18657: LD_ADDR_EXP 28
18661: PUSH
18662: LD_EXP 28
18666: PUSH
18667: LD_INT 35
18669: MINUS
18670: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
18671: LD_ADDR_OWVAR 47
18675: PUSH
18676: LD_STRING #Am04-2
18678: PUSH
18679: LD_EXP 28
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: ST_TO_ADDR
// end ; if timerStatus = 3 then
18688: LD_EXP 29
18692: PUSH
18693: LD_INT 3
18695: EQUAL
18696: IFFALSE 18712
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
18698: LD_ADDR_EXP 27
18702: PUSH
18703: LD_EXP 27
18707: PUSH
18708: LD_INT 35
18710: MINUS
18711: ST_TO_ADDR
// end ; if timerStatus = 4 then
18712: LD_EXP 29
18716: PUSH
18717: LD_INT 4
18719: EQUAL
18720: IFFALSE 18730
// begin display_strings =  ;
18722: LD_ADDR_OWVAR 47
18726: PUSH
18727: LD_STRING 
18729: ST_TO_ADDR
// end ; end ; end_of_file
18730: END
// every 0 0$1 trigger IsDead ( JMM ) do
18731: LD_EXP 1
18735: PPUSH
18736: CALL_OW 301
18740: IFFALSE 18752
18742: GO 18744
18744: DISABLE
// YouLost ( JMM ) ;
18745: LD_STRING JMM
18747: PPUSH
18748: CALL_OW 104
18752: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
18753: LD_INT 4
18755: PPUSH
18756: CALL_OW 301
18760: IFFALSE 18772
18762: GO 18764
18764: DISABLE
// YouLost ( Base ) ; end_of_file
18765: LD_STRING Base
18767: PPUSH
18768: CALL_OW 104
18772: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i ;
18773: LD_EXP 15
18777: PPUSH
18778: CALL_OW 301
18782: IFFALSE 19164
18784: GO 18786
18786: DISABLE
18787: LD_INT 0
18789: PPUSH
// begin AIEnable = 0 ;
18790: LD_ADDR_EXP 37
18794: PUSH
18795: LD_INT 0
18797: ST_TO_ADDR
// escapeAvalaible = 1 ;
18798: LD_ADDR_EXP 40
18802: PUSH
18803: LD_INT 1
18805: ST_TO_ADDR
// InGameOn ;
18806: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
18810: LD_INT 3
18812: PPUSH
18813: LD_INT 1
18815: PPUSH
18816: LD_INT 1
18818: PPUSH
18819: LD_INT 0
18821: PPUSH
18822: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
18826: LD_INT 6
18828: PPUSH
18829: LD_INT 1
18831: PPUSH
18832: LD_INT 1
18834: PPUSH
18835: LD_INT 0
18837: PPUSH
18838: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
18842: LD_INT 5
18844: PPUSH
18845: LD_INT 1
18847: PPUSH
18848: LD_INT 1
18850: PPUSH
18851: LD_INT 0
18853: PPUSH
18854: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
18858: LD_INT 3
18860: PPUSH
18861: LD_INT 1
18863: PPUSH
18864: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
18868: LD_INT 97
18870: PPUSH
18871: LD_INT 91
18873: PPUSH
18874: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
18878: LD_INT 22
18880: PUSH
18881: LD_INT 3
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 21
18890: PUSH
18891: LD_INT 1
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PPUSH
18902: CALL_OW 69
18906: PPUSH
18907: CALL_OW 121
// wait ( 0 0$01 ) ;
18911: LD_INT 35
18913: PPUSH
18914: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18918: LD_INT 22
18920: PUSH
18921: LD_INT 3
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 21
18930: PUSH
18931: LD_INT 1
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PPUSH
18942: CALL_OW 69
18946: PPUSH
18947: LD_INT 124
18949: PPUSH
18950: LD_INT 98
18952: PPUSH
18953: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18957: LD_INT 22
18959: PUSH
18960: LD_INT 5
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 21
18969: PUSH
18970: LD_INT 1
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PPUSH
18981: CALL_OW 69
18985: PPUSH
18986: CALL_OW 121
// wait ( 0 0$01 ) ;
18990: LD_INT 35
18992: PPUSH
18993: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18997: LD_INT 22
18999: PUSH
19000: LD_INT 5
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 21
19009: PUSH
19010: LD_INT 1
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PPUSH
19021: CALL_OW 69
19025: PPUSH
19026: LD_INT 124
19028: PPUSH
19029: LD_INT 98
19031: PPUSH
19032: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19036: LD_INT 22
19038: PUSH
19039: LD_INT 6
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 21
19048: PUSH
19049: LD_INT 1
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PPUSH
19060: CALL_OW 69
19064: PPUSH
19065: CALL_OW 121
// wait ( 0 0$01 ) ;
19069: LD_INT 35
19071: PPUSH
19072: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19076: LD_INT 22
19078: PUSH
19079: LD_INT 6
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 21
19088: PUSH
19089: LD_INT 1
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PPUSH
19100: CALL_OW 69
19104: PPUSH
19105: LD_INT 124
19107: PPUSH
19108: LD_INT 98
19110: PPUSH
19111: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19115: LD_INT 22
19117: PUSH
19118: LD_INT 1
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 21
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PPUSH
19139: CALL_OW 69
19143: PPUSH
19144: LD_INT 124
19146: PPUSH
19147: LD_INT 98
19149: PPUSH
19150: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
19154: LD_INT 124
19156: PPUSH
19157: LD_INT 98
19159: PPUSH
19160: CALL_OW 84
// end ;
19164: PPOPN 1
19166: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
19167: LD_INT 23
19169: PUSH
19170: LD_INT 3
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 21
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 24
19189: PUSH
19190: LD_INT 250
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: LIST
19201: PPUSH
19202: CALL_OW 69
19206: PUSH
19207: LD_INT 0
19209: EQUAL
19210: IFFALSE 19219
19212: GO 19214
19214: DISABLE
// FinishMission ;
19215: CALL 19390 0 0
19219: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19220: LD_EXP 40
19224: PUSH
19225: LD_INT 1
19227: EQUAL
19228: IFFALSE 19387
19230: GO 19232
19232: DISABLE
19233: LD_INT 0
19235: PPUSH
// begin enable ;
19236: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19237: LD_ADDR_VAR 0 1
19241: PUSH
19242: LD_INT 22
19244: PUSH
19245: LD_INT 3
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PPUSH
19252: CALL_OW 69
19256: PUSH
19257: FOR_IN
19258: IFFALSE 19285
// if IsInArea ( i , RussianEscape ) then
19260: LD_VAR 0 1
19264: PPUSH
19265: LD_INT 5
19267: PPUSH
19268: CALL_OW 308
19272: IFFALSE 19283
// RemoveUnit ( i ) ;
19274: LD_VAR 0 1
19278: PPUSH
19279: CALL_OW 64
19283: GO 19257
19285: POP
19286: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
19287: LD_ADDR_VAR 0 1
19291: PUSH
19292: LD_INT 22
19294: PUSH
19295: LD_INT 5
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PPUSH
19302: CALL_OW 69
19306: PUSH
19307: FOR_IN
19308: IFFALSE 19335
// if IsInArea ( i , RussianEscape ) then
19310: LD_VAR 0 1
19314: PPUSH
19315: LD_INT 5
19317: PPUSH
19318: CALL_OW 308
19322: IFFALSE 19333
// RemoveUnit ( i ) ;
19324: LD_VAR 0 1
19328: PPUSH
19329: CALL_OW 64
19333: GO 19307
19335: POP
19336: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19337: LD_ADDR_VAR 0 1
19341: PUSH
19342: LD_INT 22
19344: PUSH
19345: LD_INT 6
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PPUSH
19352: CALL_OW 69
19356: PUSH
19357: FOR_IN
19358: IFFALSE 19385
// if IsInArea ( i , RussianEscape ) then
19360: LD_VAR 0 1
19364: PPUSH
19365: LD_INT 5
19367: PPUSH
19368: CALL_OW 308
19372: IFFALSE 19383
// RemoveUnit ( i ) ;
19374: LD_VAR 0 1
19378: PPUSH
19379: CALL_OW 64
19383: GO 19357
19385: POP
19386: POP
// end ;
19387: PPOPN 1
19389: END
// export function FinishMission ; var tmp ; begin
19390: LD_INT 0
19392: PPUSH
19393: PPUSH
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
19394: LD_INT 69
19396: PPUSH
19397: LD_INT 1
19399: PPUSH
19400: CALL_OW 321
19404: PPUSH
19405: LD_STRING GatlingInGamma
19407: PPUSH
19408: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
19412: LD_EXP 34
19416: PUSH
19417: LD_INT 1
19419: EQUAL
19420: PUSH
19421: LD_EXP 35
19425: PUSH
19426: LD_INT 1
19428: EQUAL
19429: AND
19430: IFFALSE 19444
// begin AddMedal ( oil , 1 ) ;
19432: LD_STRING oil
19434: PPUSH
19435: LD_INT 1
19437: PPUSH
19438: CALL_OW 101
// end else
19442: GO 19537
// begin if buildOil = 1 and buildPower = 0 then
19444: LD_EXP 34
19448: PUSH
19449: LD_INT 1
19451: EQUAL
19452: PUSH
19453: LD_EXP 35
19457: PUSH
19458: LD_INT 0
19460: EQUAL
19461: AND
19462: IFFALSE 19475
// AddMedal ( oil , - 1 ) ;
19464: LD_STRING oil
19466: PPUSH
19467: LD_INT 1
19469: NEG
19470: PPUSH
19471: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
19475: LD_EXP 34
19479: PUSH
19480: LD_INT 0
19482: EQUAL
19483: PUSH
19484: LD_EXP 35
19488: PUSH
19489: LD_INT 1
19491: EQUAL
19492: AND
19493: IFFALSE 19506
// AddMedal ( oil , - 2 ) ;
19495: LD_STRING oil
19497: PPUSH
19498: LD_INT 2
19500: NEG
19501: PPUSH
19502: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
19506: LD_EXP 34
19510: PUSH
19511: LD_INT 0
19513: EQUAL
19514: PUSH
19515: LD_EXP 35
19519: PUSH
19520: LD_INT 0
19522: EQUAL
19523: AND
19524: IFFALSE 19537
// AddMedal ( oil , - 3 ) ;
19526: LD_STRING oil
19528: PPUSH
19529: LD_INT 3
19531: NEG
19532: PPUSH
19533: CALL_OW 101
// end ; if lostCounter > 3 then
19537: LD_EXP 38
19541: PUSH
19542: LD_INT 3
19544: GREATER
19545: IFFALSE 19560
// begin AddMedal ( deaths , - 1 ) ;
19547: LD_STRING deaths
19549: PPUSH
19550: LD_INT 1
19552: NEG
19553: PPUSH
19554: CALL_OW 101
// end else
19558: GO 19570
// begin AddMedal ( deaths , 1 ) ;
19560: LD_STRING deaths
19562: PPUSH
19563: LD_INT 1
19565: PPUSH
19566: CALL_OW 101
// end ; if honor = 1 then
19570: LD_EXP 39
19574: PUSH
19575: LD_INT 1
19577: EQUAL
19578: IFFALSE 19592
// begin AddMedal ( honour , 1 ) ;
19580: LD_STRING honour
19582: PPUSH
19583: LD_INT 1
19585: PPUSH
19586: CALL_OW 101
// end else
19590: GO 19603
// begin AddMedal ( honour , - 1 ) ;
19592: LD_STRING honour
19594: PPUSH
19595: LD_INT 1
19597: NEG
19598: PPUSH
19599: CALL_OW 101
// end ; GiveMedals ( Main ) ;
19603: LD_STRING Main
19605: PPUSH
19606: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19610: LD_INT 22
19612: PUSH
19613: LD_INT 1
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 23
19622: PUSH
19623: LD_INT 1
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 21
19632: PUSH
19633: LD_INT 1
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: LIST
19644: PPUSH
19645: CALL_OW 69
19649: PPUSH
19650: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19654: LD_EXP 1
19658: PPUSH
19659: LD_EXP 44
19663: PUSH
19664: LD_STRING JMM
19666: STR
19667: PPUSH
19668: CALL_OW 38
// if IsOK ( Bobby ) then
19672: LD_EXP 2
19676: PPUSH
19677: CALL_OW 302
19681: IFFALSE 19701
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19683: LD_EXP 2
19687: PPUSH
19688: LD_EXP 44
19692: PUSH
19693: LD_STRING Bobby
19695: STR
19696: PPUSH
19697: CALL_OW 38
// if IsOK ( Cyrus ) then
19701: LD_EXP 3
19705: PPUSH
19706: CALL_OW 302
19710: IFFALSE 19730
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19712: LD_EXP 3
19716: PPUSH
19717: LD_EXP 44
19721: PUSH
19722: LD_STRING Cyrus
19724: STR
19725: PPUSH
19726: CALL_OW 38
// if IsOK ( Lisa ) then
19730: LD_EXP 4
19734: PPUSH
19735: CALL_OW 302
19739: IFFALSE 19759
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19741: LD_EXP 4
19745: PPUSH
19746: LD_EXP 44
19750: PUSH
19751: LD_STRING Lisa
19753: STR
19754: PPUSH
19755: CALL_OW 38
// if IsOK ( Brown ) then
19759: LD_EXP 7
19763: PPUSH
19764: CALL_OW 302
19768: IFFALSE 19788
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
19770: LD_EXP 7
19774: PPUSH
19775: LD_EXP 44
19779: PUSH
19780: LD_STRING Brown
19782: STR
19783: PPUSH
19784: CALL_OW 38
// if IsOK ( Donaldson ) then
19788: LD_EXP 13
19792: PPUSH
19793: CALL_OW 302
19797: IFFALSE 19817
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19799: LD_EXP 13
19803: PPUSH
19804: LD_EXP 44
19808: PUSH
19809: LD_STRING Donaldson
19811: STR
19812: PPUSH
19813: CALL_OW 38
// if IsOK ( Frank ) then
19817: LD_EXP 5
19821: PPUSH
19822: CALL_OW 302
19826: IFFALSE 19846
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19828: LD_EXP 5
19832: PPUSH
19833: LD_EXP 44
19837: PUSH
19838: LD_STRING Frank
19840: STR
19841: PPUSH
19842: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19846: LD_INT 50
19848: PUSH
19849: EMPTY
19850: LIST
19851: PUSH
19852: LD_INT 22
19854: PUSH
19855: LD_INT 1
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 21
19864: PUSH
19865: LD_INT 1
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: LIST
19876: PPUSH
19877: CALL_OW 69
19881: PUSH
19882: LD_EXP 1
19886: PUSH
19887: LD_EXP 2
19891: PUSH
19892: LD_EXP 3
19896: PUSH
19897: LD_EXP 4
19901: PUSH
19902: LD_EXP 7
19906: PUSH
19907: LD_EXP 13
19911: PUSH
19912: LD_EXP 5
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: DIFF
19926: PPUSH
19927: LD_STRING 04_other_survivors
19929: PPUSH
19930: CALL_OW 38
// SaveBase ( GammBaseArea ) ;
19934: LD_INT 22
19936: PPUSH
19937: CALL 19950 0 1
// YouWin ;
19941: CALL_OW 103
// end ;
19945: LD_VAR 0 1
19949: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19950: LD_INT 0
19952: PPUSH
19953: PPUSH
19954: PPUSH
19955: PPUSH
// gammaBase = [ ] ;
19956: LD_ADDR_VAR 0 4
19960: PUSH
19961: EMPTY
19962: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
19963: LD_ADDR_VAR 0 5
19967: PUSH
19968: LD_VAR 0 1
19972: PPUSH
19973: LD_INT 22
19975: PUSH
19976: LD_INT 1
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 21
19985: PUSH
19986: LD_INT 3
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 50
19995: PUSH
19996: EMPTY
19997: LIST
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: LIST
20003: PPUSH
20004: CALL_OW 70
20008: ST_TO_ADDR
// for i in buildings do
20009: LD_ADDR_VAR 0 3
20013: PUSH
20014: LD_VAR 0 5
20018: PUSH
20019: FOR_IN
20020: IFFALSE 20357
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20022: LD_VAR 0 3
20026: PPUSH
20027: CALL_OW 266
20031: PUSH
20032: LD_INT 6
20034: PUSH
20035: LD_INT 7
20037: PUSH
20038: LD_INT 8
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: LIST
20045: IN
20046: IFFALSE 20160
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20048: LD_ADDR_VAR 0 4
20052: PUSH
20053: LD_VAR 0 4
20057: PUSH
20058: LD_VAR 0 3
20062: PPUSH
20063: CALL_OW 266
20067: PUSH
20068: LD_VAR 0 3
20072: PPUSH
20073: CALL_OW 250
20077: PUSH
20078: LD_VAR 0 3
20082: PPUSH
20083: CALL_OW 251
20087: PUSH
20088: LD_VAR 0 3
20092: PPUSH
20093: CALL_OW 254
20097: PUSH
20098: LD_VAR 0 3
20102: PPUSH
20103: CALL_OW 267
20107: PUSH
20108: LD_VAR 0 3
20112: PPUSH
20113: CALL_OW 248
20117: PUSH
20118: LD_VAR 0 3
20122: PPUSH
20123: LD_INT 1
20125: PPUSH
20126: CALL_OW 268
20130: PUSH
20131: LD_VAR 0 3
20135: PPUSH
20136: LD_INT 2
20138: PPUSH
20139: CALL_OW 268
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: PUSH
20154: EMPTY
20155: LIST
20156: ADD
20157: ST_TO_ADDR
20158: GO 20355
// if GetBType ( i ) in [ b_bunker ] then
20160: LD_VAR 0 3
20164: PPUSH
20165: CALL_OW 266
20169: PUSH
20170: LD_INT 32
20172: PUSH
20173: EMPTY
20174: LIST
20175: IN
20176: IFFALSE 20273
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20178: LD_ADDR_VAR 0 4
20182: PUSH
20183: LD_VAR 0 4
20187: PUSH
20188: LD_VAR 0 3
20192: PPUSH
20193: CALL_OW 266
20197: PUSH
20198: LD_VAR 0 3
20202: PPUSH
20203: CALL_OW 250
20207: PUSH
20208: LD_VAR 0 3
20212: PPUSH
20213: CALL_OW 251
20217: PUSH
20218: LD_VAR 0 3
20222: PPUSH
20223: CALL_OW 254
20227: PUSH
20228: LD_VAR 0 3
20232: PPUSH
20233: CALL_OW 267
20237: PUSH
20238: LD_VAR 0 3
20242: PPUSH
20243: CALL_OW 248
20247: PUSH
20248: LD_VAR 0 3
20252: PPUSH
20253: CALL_OW 269
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: PUSH
20267: EMPTY
20268: LIST
20269: ADD
20270: ST_TO_ADDR
20271: GO 20355
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20273: LD_ADDR_VAR 0 4
20277: PUSH
20278: LD_VAR 0 4
20282: PUSH
20283: LD_VAR 0 3
20287: PPUSH
20288: CALL_OW 266
20292: PUSH
20293: LD_VAR 0 3
20297: PPUSH
20298: CALL_OW 250
20302: PUSH
20303: LD_VAR 0 3
20307: PPUSH
20308: CALL_OW 251
20312: PUSH
20313: LD_VAR 0 3
20317: PPUSH
20318: CALL_OW 254
20322: PUSH
20323: LD_VAR 0 3
20327: PPUSH
20328: CALL_OW 267
20332: PUSH
20333: LD_VAR 0 3
20337: PPUSH
20338: CALL_OW 248
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: PUSH
20351: EMPTY
20352: LIST
20353: ADD
20354: ST_TO_ADDR
// end ;
20355: GO 20019
20357: POP
20358: POP
// SaveVariable ( gammaBase , GammaBase ) ;
20359: LD_VAR 0 4
20363: PPUSH
20364: LD_STRING GammaBase
20366: PPUSH
20367: CALL_OW 39
// end ; end_of_file
20371: LD_VAR 0 2
20375: RET
// every 1 1$15 do
20376: GO 20378
20378: DISABLE
// begin if supply <= 13 and supply > 7 then
20379: LD_EXP 36
20383: PUSH
20384: LD_INT 13
20386: LESSEQUAL
20387: PUSH
20388: LD_EXP 36
20392: PUSH
20393: LD_INT 7
20395: GREATER
20396: AND
20397: IFFALSE 20420
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
20399: LD_INT 3
20401: PPUSH
20402: LD_INT 5
20404: PPUSH
20405: CALL_OW 12
20409: PPUSH
20410: LD_INT 18
20412: PPUSH
20413: LD_INT 1
20415: PPUSH
20416: CALL_OW 55
// if supply <= 7 and supply > 4 then
20420: LD_EXP 36
20424: PUSH
20425: LD_INT 7
20427: LESSEQUAL
20428: PUSH
20429: LD_EXP 36
20433: PUSH
20434: LD_INT 4
20436: GREATER
20437: AND
20438: IFFALSE 20461
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20440: LD_INT 3
20442: PPUSH
20443: LD_INT 5
20445: PPUSH
20446: CALL_OW 12
20450: PPUSH
20451: LD_INT 19
20453: PPUSH
20454: LD_INT 1
20456: PPUSH
20457: CALL_OW 55
// if supply <= 4 and supply > 0 then
20461: LD_EXP 36
20465: PUSH
20466: LD_INT 4
20468: LESSEQUAL
20469: PUSH
20470: LD_EXP 36
20474: PUSH
20475: LD_INT 0
20477: GREATER
20478: AND
20479: IFFALSE 20502
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
20481: LD_INT 3
20483: PPUSH
20484: LD_INT 5
20486: PPUSH
20487: CALL_OW 12
20491: PPUSH
20492: LD_INT 20
20494: PPUSH
20495: LD_INT 1
20497: PPUSH
20498: CALL_OW 55
// if supply > 0 then
20502: LD_EXP 36
20506: PUSH
20507: LD_INT 0
20509: GREATER
20510: IFFALSE 20527
// begin supply = supply - 1 ;
20512: LD_ADDR_EXP 36
20516: PUSH
20517: LD_EXP 36
20521: PUSH
20522: LD_INT 1
20524: MINUS
20525: ST_TO_ADDR
// enable ;
20526: ENABLE
// end ; end ;
20527: END
