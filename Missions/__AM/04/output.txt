// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 48
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 49
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 45
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// bonusAvalaible = 0 ;
  68: LD_ADDR_EXP 44
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// firstRussianAttack = 0 ;
  76: LD_ADDR_EXP 23
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// saveDonaldson = 0 ;
  84: LD_ADDR_EXP 24
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// frankScoutBase = 0 ;
  92: LD_ADDR_EXP 25
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// harrAnswer = 0 ;
 100: LD_ADDR_EXP 26
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 108: LD_ADDR_EXP 27
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 116: LD_ADDR_EXP 28
 120: PUSH
 121: LD_INT 18900
 123: ST_TO_ADDR
// timerStatus = 0 ;
 124: LD_ADDR_EXP 29
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// startTimer = 0 ;
 132: LD_ADDR_EXP 30
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// factoryDialog = 0 ;
 140: LD_ADDR_EXP 31
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// bunkerDialog = 0 ;
 148: LD_ADDR_EXP 32
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// energyVDialog = 0 ;
 156: LD_ADDR_EXP 33
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildOil = 0 ;
 164: LD_ADDR_EXP 34
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// buildPower = 0 ;
 172: LD_ADDR_EXP 35
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 180: LD_ADDR_EXP 36
 184: PUSH
 185: LD_INT 14
 187: PUSH
 188: LD_INT 12
 190: PUSH
 191: LD_INT 11
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_OWVAR 67
 203: ARRAY
 204: ST_TO_ADDR
// AIEnable = 1 ;
 205: LD_ADDR_EXP 37
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 213: LD_ADDR_EXP 41
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// lostCounter = 0 ;
 221: LD_ADDR_EXP 38
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// honor = 1 ;
 229: LD_ADDR_EXP 39
 233: PUSH
 234: LD_INT 1
 236: ST_TO_ADDR
// escapeAvalaible = 0 ;
 237: LD_ADDR_EXP 40
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// specAttack := false ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// ruMobile := [ ] ;
 253: LD_ADDR_EXP 46
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// ruMech := [ 3 , 4 , 6 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 43
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: LD_INT 6
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: PUSH
 279: LD_OWVAR 67
 283: ARRAY
 284: ST_TO_ADDR
// PrepareDifficulty ;
 285: CALL 4735 0 0
// PrepareRussianBase ;
 289: CALL 2936 0 0
// PrepareRussianCommander ;
 293: CALL 2887 0 0
// PrepareHeroes ;
 297: CALL 479 0 0
// SetBName ( ambdept0 , gamma ) ;
 301: LD_INT 4
 303: PPUSH
 304: LD_STRING gamma
 306: PPUSH
 307: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 311: LD_INT 21
 313: PPUSH
 314: LD_STRING fyodor
 316: PPUSH
 317: CALL_OW 500
// end ;
 321: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 322: LD_EXP 45
 326: PUSH
 327: LD_INT 1
 329: EQUAL
 330: IFFALSE 435
 332: GO 334
 334: DISABLE
 335: LD_INT 0
 337: PPUSH
// begin enable ;
 338: ENABLE
// fogoff ( true ) ;
 339: LD_INT 1
 341: PPUSH
 342: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 346: LD_ADDR_VAR 0 1
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 1
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: FOR_IN
 381: IFFALSE 397
// SetLives ( i , 1000 ) ;
 383: LD_VAR 0 1
 387: PPUSH
 388: LD_INT 1000
 390: PPUSH
 391: CALL_OW 234
 395: GO 380
 397: POP
 398: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 399: LD_INT 4
 401: PPUSH
 402: CALL_OW 274
 406: PPUSH
 407: LD_INT 1
 409: PPUSH
 410: LD_INT 9999
 412: PPUSH
 413: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 417: LD_INT 4
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 2
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
// end ;
 435: PPOPN 1
 437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 438: LD_INT 22
 440: PUSH
 441: LD_INT 1
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 34
 450: PUSH
 451: LD_INT 44
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PPUSH
 462: CALL_OW 69
 466: IFFALSE 478
 468: GO 470
 470: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 471: LD_STRING ACH_GUN
 473: PPUSH
 474: CALL_OW 543
 478: END
// export function PrepareHeroes ; var i , tmp ; begin
 479: LD_INT 0
 481: PPUSH
 482: PPUSH
 483: PPUSH
// uc_side = 1 ;
 484: LD_ADDR_OWVAR 20
 488: PUSH
 489: LD_INT 1
 491: ST_TO_ADDR
// uc_nation = 1 ;
 492: LD_ADDR_OWVAR 21
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 500: LD_ADDR_EXP 1
 504: PUSH
 505: LD_STRING JMM
 507: PPUSH
 508: LD_INT 1
 510: PPUSH
 511: CALL 4309 0 2
 515: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 516: LD_ADDR_EXP 4
 520: PUSH
 521: LD_STRING Lisa
 523: PPUSH
 524: LD_INT 1
 526: PPUSH
 527: CALL 4309 0 2
 531: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 532: LD_ADDR_EXP 7
 536: PUSH
 537: LD_STRING Brown
 539: PPUSH
 540: LD_INT 0
 542: PPUSH
 543: CALL 4309 0 2
 547: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 548: LD_ADDR_EXP 8
 552: PUSH
 553: LD_STRING Dickens
 555: PPUSH
 556: LD_INT 0
 558: PPUSH
 559: CALL 4309 0 2
 563: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 564: LD_ADDR_EXP 9
 568: PUSH
 569: LD_STRING Woodruff
 571: PPUSH
 572: LD_INT 0
 574: PPUSH
 575: CALL 4309 0 2
 579: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 580: LD_ADDR_EXP 12
 584: PUSH
 585: LD_STRING Campell
 587: PPUSH
 588: LD_INT 0
 590: PPUSH
 591: CALL 4309 0 2
 595: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 596: LD_ADDR_EXP 10
 600: PUSH
 601: LD_STRING Knight
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL 4309 0 2
 611: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 612: LD_ADDR_EXP 11
 616: PUSH
 617: LD_STRING Claptopn
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 4309 0 2
 627: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 628: LD_ADDR_EXP 14
 632: PUSH
 633: LD_STRING Harisson
 635: PPUSH
 636: LD_INT 0
 638: PPUSH
 639: CALL 4309 0 2
 643: ST_TO_ADDR
// if Lisa = false then
 644: LD_EXP 4
 648: PUSH
 649: LD_INT 0
 651: EQUAL
 652: IFFALSE 670
// Bobby = PrepareUnit ( Bobby , true ) ;
 654: LD_ADDR_EXP 2
 658: PUSH
 659: LD_STRING Bobby
 661: PPUSH
 662: LD_INT 1
 664: PPUSH
 665: CALL 4309 0 2
 669: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 670: LD_EXP 4
 674: PUSH
 675: LD_INT 0
 677: EQUAL
 678: PUSH
 679: LD_EXP 2
 683: PUSH
 684: LD_INT 0
 686: EQUAL
 687: AND
 688: IFFALSE 706
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 690: LD_ADDR_EXP 3
 694: PUSH
 695: LD_STRING Cyrus
 697: PPUSH
 698: LD_INT 1
 700: PPUSH
 701: CALL 4309 0 2
 705: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 706: LD_EXP 4
 710: PUSH
 711: LD_INT 0
 713: EQUAL
 714: PUSH
 715: LD_EXP 2
 719: PUSH
 720: LD_INT 0
 722: EQUAL
 723: AND
 724: PUSH
 725: LD_EXP 3
 729: PUSH
 730: LD_INT 0
 732: EQUAL
 733: AND
 734: IFFALSE 833
// begin tmp = CreateCharacterSet ( 03_others ) ;
 736: LD_ADDR_VAR 0 3
 740: PUSH
 741: LD_STRING 03_others
 743: PPUSH
 744: CALL_OW 31
 748: ST_TO_ADDR
// if tmp then
 749: LD_VAR 0 3
 753: IFFALSE 810
// begin RandomBeforeMission = tmp [ 1 ] ;
 755: LD_ADDR_EXP 6
 759: PUSH
 760: LD_VAR 0 3
 764: PUSH
 765: LD_INT 1
 767: ARRAY
 768: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 769: LD_STRING 03_others
 771: PPUSH
 772: CALL_OW 40
// if tmp > 1 then
 776: LD_VAR 0 3
 780: PUSH
 781: LD_INT 1
 783: GREATER
 784: IFFALSE 808
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 786: LD_VAR 0 3
 790: PUSH
 791: LD_VAR 0 3
 795: PUSH
 796: LD_INT 1
 798: ARRAY
 799: DIFF
 800: PPUSH
 801: LD_STRING 03_others
 803: PPUSH
 804: CALL_OW 38
// end else
 808: GO 833
// begin PrepareHuman ( false , 1 , 3 ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_INT 3
 818: PPUSH
 819: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 823: LD_ADDR_EXP 6
 827: PUSH
 828: CALL_OW 44
 832: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 833: LD_ADDR_OWVAR 20
 837: PUSH
 838: LD_INT 4
 840: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 841: LD_ADDR_EXP 13
 845: PUSH
 846: LD_STRING Donaldson
 848: PPUSH
 849: LD_INT 0
 851: PPUSH
 852: CALL 4309 0 2
 856: ST_TO_ADDR
// if TestCharacters ( 03_Frank ) = true then
 857: LD_STRING 03_Frank
 859: PPUSH
 860: CALL_OW 28
 864: PUSH
 865: LD_INT 1
 867: EQUAL
 868: IFFALSE 912
// begin Frank = PrepareUnit ( 03_Frank , true ) ;
 870: LD_ADDR_EXP 5
 874: PUSH
 875: LD_STRING 03_Frank
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: CALL 4309 0 2
 885: ST_TO_ADDR
// if Frank = 0 then
 886: LD_EXP 5
 890: PUSH
 891: LD_INT 0
 893: EQUAL
 894: IFFALSE 912
// Frank = PrepareUnit ( Frank , false ) ;
 896: LD_ADDR_EXP 5
 900: PUSH
 901: LD_STRING Frank
 903: PPUSH
 904: LD_INT 0
 906: PPUSH
 907: CALL 4309 0 2
 911: ST_TO_ADDR
// end ; PlaceHumanInUnit ( JMM , amvj ) ;
 912: LD_EXP 1
 916: PPUSH
 917: LD_INT 32
 919: PPUSH
 920: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 924: LD_EXP 7
 928: PPUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 0
 934: PPUSH
 935: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 939: LD_EXP 7
 943: PPUSH
 944: LD_INT 32
 946: PPUSH
 947: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 951: LD_EXP 8
 955: PPUSH
 956: LD_INT 2
 958: PPUSH
 959: LD_INT 0
 961: PPUSH
 962: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 966: LD_EXP 9
 970: PPUSH
 971: LD_INT 2
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 981: LD_EXP 12
 985: PPUSH
 986: LD_INT 2
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 996: LD_EXP 10
1000: PPUSH
1001: LD_INT 2
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1011: LD_EXP 11
1015: PPUSH
1016: LD_INT 2
1018: PPUSH
1019: LD_INT 0
1021: PPUSH
1022: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1026: LD_EXP 4
1030: PPUSH
1031: LD_INT 2
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// if Lisa = false then
1041: LD_EXP 4
1045: PUSH
1046: LD_INT 0
1048: EQUAL
1049: IFFALSE 1066
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1051: LD_EXP 2
1055: PPUSH
1056: LD_INT 2
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 49
// if Lisa = false and Bobby = false then
1066: LD_EXP 4
1070: PUSH
1071: LD_INT 0
1073: EQUAL
1074: PUSH
1075: LD_EXP 2
1079: PUSH
1080: LD_INT 0
1082: EQUAL
1083: AND
1084: IFFALSE 1101
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1086: LD_EXP 3
1090: PPUSH
1091: LD_INT 2
1093: PPUSH
1094: LD_INT 0
1096: PPUSH
1097: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1101: LD_EXP 4
1105: PUSH
1106: LD_INT 0
1108: EQUAL
1109: PUSH
1110: LD_EXP 2
1114: PUSH
1115: LD_INT 0
1117: EQUAL
1118: AND
1119: PUSH
1120: LD_EXP 3
1124: PUSH
1125: LD_INT 0
1127: EQUAL
1128: AND
1129: IFFALSE 1146
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1131: LD_EXP 6
1135: PPUSH
1136: LD_INT 2
1138: PPUSH
1139: LD_INT 0
1141: PPUSH
1142: CALL_OW 49
// end ;
1146: LD_VAR 0 1
1150: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1151: LD_INT 0
1153: PPUSH
1154: PPUSH
1155: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1156: LD_EXP 13
1160: PPUSH
1161: LD_INT 10
1163: PPUSH
1164: LD_INT 0
1166: PPUSH
1167: CALL_OW 49
// if Frank then
1171: LD_EXP 5
1175: IFFALSE 1192
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1177: LD_EXP 5
1181: PPUSH
1182: LD_INT 10
1184: PPUSH
1185: LD_INT 0
1187: PPUSH
1188: CALL_OW 49
// uc_nation = 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// uc_side = 4 ;
1200: LD_ADDR_OWVAR 20
1204: PUSH
1205: LD_INT 4
1207: ST_TO_ADDR
// hc_class := 3 ;
1208: LD_ADDR_OWVAR 28
1212: PUSH
1213: LD_INT 3
1215: ST_TO_ADDR
// hc_sex := sex_male ;
1216: LD_ADDR_OWVAR 27
1220: PUSH
1221: LD_INT 1
1223: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1224: LD_ADDR_OWVAR 33
1228: PUSH
1229: LD_STRING SecondCharsGal
1231: ST_TO_ADDR
// hc_face_number := 53 ;
1232: LD_ADDR_OWVAR 34
1236: PUSH
1237: LD_INT 53
1239: ST_TO_ADDR
// hc_name := Freddie Warner ;
1240: LD_ADDR_OWVAR 26
1244: PUSH
1245: LD_STRING Freddie Warner
1247: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1248: LD_ADDR_OWVAR 29
1252: PUSH
1253: LD_INT 8
1255: PUSH
1256: LD_INT 11
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1263: LD_ADDR_OWVAR 30
1267: PUSH
1268: LD_INT 0
1270: PUSH
1271: LD_INT 0
1273: PUSH
1274: LD_INT 1
1276: PUSH
1277: LD_INT 0
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1286: LD_ADDR_OWVAR 31
1290: PUSH
1291: LD_INT 1
1293: PUSH
1294: LD_INT 0
1296: PUSH
1297: LD_INT 3
1299: PUSH
1300: LD_INT 2
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: ST_TO_ADDR
// un = CreateHuman ;
1309: LD_ADDR_VAR 0 3
1313: PUSH
1314: CALL_OW 44
1318: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1319: LD_VAR 0 3
1323: PPUSH
1324: LD_INT 10
1326: PPUSH
1327: LD_INT 0
1329: PPUSH
1330: CALL_OW 49
// hc_class := 1 ;
1334: LD_ADDR_OWVAR 28
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// hc_sex := sex_male ;
1342: LD_ADDR_OWVAR 27
1346: PUSH
1347: LD_INT 1
1349: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1350: LD_ADDR_OWVAR 33
1354: PUSH
1355: LD_STRING SecondCharsGal
1357: ST_TO_ADDR
// hc_face_number := 56 ;
1358: LD_ADDR_OWVAR 34
1362: PUSH
1363: LD_INT 56
1365: ST_TO_ADDR
// hc_name := Mel Brennan ;
1366: LD_ADDR_OWVAR 26
1370: PUSH
1371: LD_STRING Mel Brennan
1373: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1374: LD_ADDR_OWVAR 29
1378: PUSH
1379: LD_INT 12
1381: PUSH
1382: LD_INT 11
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1389: LD_ADDR_OWVAR 30
1393: PUSH
1394: LD_INT 1
1396: PUSH
1397: LD_INT 1
1399: PUSH
1400: LD_INT 0
1402: PUSH
1403: LD_INT 0
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1412: LD_ADDR_OWVAR 31
1416: PUSH
1417: LD_INT 3
1419: PUSH
1420: LD_INT 1
1422: PUSH
1423: LD_INT 1
1425: PUSH
1426: LD_INT 0
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: ST_TO_ADDR
// un = CreateHuman ;
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: CALL_OW 44
1444: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1445: LD_VAR 0 3
1449: PPUSH
1450: LD_INT 10
1452: PPUSH
1453: LD_INT 0
1455: PPUSH
1456: CALL_OW 49
// hc_class := 1 ;
1460: LD_ADDR_OWVAR 28
1464: PUSH
1465: LD_INT 1
1467: ST_TO_ADDR
// hc_sex := sex_male ;
1468: LD_ADDR_OWVAR 27
1472: PUSH
1473: LD_INT 1
1475: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1476: LD_ADDR_OWVAR 33
1480: PUSH
1481: LD_STRING AmGalRemake
1483: ST_TO_ADDR
// hc_face_number := 5 ;
1484: LD_ADDR_OWVAR 34
1488: PUSH
1489: LD_INT 5
1491: ST_TO_ADDR
// hc_name := Bob Joplin ;
1492: LD_ADDR_OWVAR 26
1496: PUSH
1497: LD_STRING Bob Joplin
1499: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1500: LD_ADDR_OWVAR 29
1504: PUSH
1505: LD_INT 10
1507: PUSH
1508: LD_INT 11
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1515: LD_ADDR_OWVAR 30
1519: PUSH
1520: LD_INT 0
1522: PUSH
1523: LD_INT 1
1525: PUSH
1526: LD_INT 1
1528: PUSH
1529: LD_INT 0
1531: PUSH
1532: EMPTY
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1538: LD_ADDR_OWVAR 31
1542: PUSH
1543: LD_INT 3
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: ST_TO_ADDR
// un = CreateHuman ;
1561: LD_ADDR_VAR 0 3
1565: PUSH
1566: CALL_OW 44
1570: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1571: LD_VAR 0 3
1575: PPUSH
1576: LD_INT 10
1578: PPUSH
1579: LD_INT 0
1581: PPUSH
1582: CALL_OW 49
// hc_class := 3 ;
1586: LD_ADDR_OWVAR 28
1590: PUSH
1591: LD_INT 3
1593: ST_TO_ADDR
// hc_sex := sex_female ;
1594: LD_ADDR_OWVAR 27
1598: PUSH
1599: LD_INT 2
1601: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1602: LD_ADDR_OWVAR 33
1606: PUSH
1607: LD_STRING AmGalRemake
1609: ST_TO_ADDR
// hc_face_number := 8 ;
1610: LD_ADDR_OWVAR 34
1614: PUSH
1615: LD_INT 8
1617: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1618: LD_ADDR_OWVAR 26
1622: PUSH
1623: LD_STRING Elizabeth Whitney
1625: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1626: LD_ADDR_OWVAR 29
1630: PUSH
1631: LD_INT 9
1633: PUSH
1634: LD_INT 11
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1641: LD_ADDR_OWVAR 30
1645: PUSH
1646: LD_INT 0
1648: PUSH
1649: LD_INT 0
1651: PUSH
1652: LD_INT 2
1654: PUSH
1655: LD_INT 0
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1664: LD_ADDR_OWVAR 31
1668: PUSH
1669: LD_INT 2
1671: PUSH
1672: LD_INT 2
1674: PUSH
1675: LD_INT 4
1677: PUSH
1678: LD_INT 2
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: ST_TO_ADDR
// un = CreateHuman ;
1687: LD_ADDR_VAR 0 3
1691: PUSH
1692: CALL_OW 44
1696: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1697: LD_VAR 0 3
1701: PPUSH
1702: LD_INT 10
1704: PPUSH
1705: LD_INT 0
1707: PPUSH
1708: CALL_OW 49
// InitHc ;
1712: CALL_OW 19
// end ;
1716: LD_VAR 0 1
1720: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1721: LD_INT 0
1723: PPUSH
1724: PPUSH
1725: PPUSH
1726: PPUSH
// uc_nation = 1 ;
1727: LD_ADDR_OWVAR 21
1731: PUSH
1732: LD_INT 1
1734: ST_TO_ADDR
// uc_side = 1 ;
1735: LD_ADDR_OWVAR 20
1739: PUSH
1740: LD_INT 1
1742: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1743: LD_ADDR_OWVAR 37
1747: PUSH
1748: LD_INT 2
1750: ST_TO_ADDR
// vc_engine := engine_combustion ;
1751: LD_ADDR_OWVAR 39
1755: PUSH
1756: LD_INT 1
1758: ST_TO_ADDR
// vc_control := control_manual ;
1759: LD_ADDR_OWVAR 38
1763: PUSH
1764: LD_INT 1
1766: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1767: LD_ADDR_OWVAR 41
1771: PUSH
1772: LD_INT 65
1774: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun ] [ Difficulty ] ;
1775: LD_ADDR_OWVAR 40
1779: PUSH
1780: LD_INT 5
1782: PUSH
1783: LD_INT 3
1785: PUSH
1786: LD_INT 4
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: PUSH
1794: LD_OWVAR 67
1798: ARRAY
1799: ST_TO_ADDR
// veh := CreateVehicle ;
1800: LD_ADDR_VAR 0 5
1804: PUSH
1805: CALL_OW 45
1809: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1810: LD_VAR 0 5
1814: PPUSH
1815: LD_INT 2
1817: PPUSH
1818: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1822: LD_INT 17
1824: PPUSH
1825: LD_INT 4
1827: PPUSH
1828: CALL_OW 428
1832: PUSH
1833: LD_INT 0
1835: EQUAL
1836: IFFALSE 1858
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1838: LD_VAR 0 5
1842: PPUSH
1843: LD_INT 17
1845: PPUSH
1846: LD_INT 4
1848: PPUSH
1849: LD_INT 0
1851: PPUSH
1852: CALL_OW 48
1856: GO 1876
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1858: LD_VAR 0 5
1862: PPUSH
1863: LD_INT 23
1865: PPUSH
1866: LD_INT 10
1868: PPUSH
1869: LD_INT 0
1871: PPUSH
1872: CALL_OW 48
// hc_class := 1 ;
1876: LD_ADDR_OWVAR 28
1880: PUSH
1881: LD_INT 1
1883: ST_TO_ADDR
// hc_sex := sex_male ;
1884: LD_ADDR_OWVAR 27
1888: PUSH
1889: LD_INT 1
1891: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1892: LD_ADDR_OWVAR 33
1896: PUSH
1897: LD_STRING SecondCharsGal
1899: ST_TO_ADDR
// hc_face_number := 59 ;
1900: LD_ADDR_OWVAR 34
1904: PUSH
1905: LD_INT 59
1907: ST_TO_ADDR
// hc_name := Max Gray ;
1908: LD_ADDR_OWVAR 26
1912: PUSH
1913: LD_STRING Max Gray
1915: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1916: LD_ADDR_OWVAR 29
1920: PUSH
1921: LD_INT 9
1923: PUSH
1924: LD_INT 11
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1931: LD_ADDR_OWVAR 30
1935: PUSH
1936: LD_INT 1
1938: PUSH
1939: LD_INT 0
1941: PUSH
1942: LD_INT 0
1944: PUSH
1945: LD_INT 0
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1954: LD_ADDR_OWVAR 31
1958: PUSH
1959: LD_INT 4
1961: PUSH
1962: LD_INT 1
1964: PUSH
1965: LD_INT 1
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: ST_TO_ADDR
// un = CreateHuman ;
1977: LD_ADDR_VAR 0 4
1981: PUSH
1982: CALL_OW 44
1986: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1987: LD_VAR 0 4
1991: PPUSH
1992: LD_INT 11
1994: PPUSH
1995: LD_INT 0
1997: PPUSH
1998: CALL_OW 49
// hc_class := 2 ;
2002: LD_ADDR_OWVAR 28
2006: PUSH
2007: LD_INT 2
2009: ST_TO_ADDR
// hc_sex := sex_male ;
2010: LD_ADDR_OWVAR 27
2014: PUSH
2015: LD_INT 1
2017: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2018: LD_ADDR_OWVAR 33
2022: PUSH
2023: LD_STRING SecondCharsGal
2025: ST_TO_ADDR
// hc_face_number := 50 ;
2026: LD_ADDR_OWVAR 34
2030: PUSH
2031: LD_INT 50
2033: ST_TO_ADDR
// hc_name := Frank Hughes ;
2034: LD_ADDR_OWVAR 26
2038: PUSH
2039: LD_STRING Frank Hughes
2041: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2042: LD_ADDR_OWVAR 29
2046: PUSH
2047: LD_INT 10
2049: PUSH
2050: LD_INT 10
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2057: LD_ADDR_OWVAR 30
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: LD_INT 2
2067: PUSH
2068: LD_INT 0
2070: PUSH
2071: LD_INT 0
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2080: LD_ADDR_OWVAR 31
2084: PUSH
2085: LD_INT 1
2087: PUSH
2088: LD_INT 3
2090: PUSH
2091: LD_INT 0
2093: PUSH
2094: LD_INT 1
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: ST_TO_ADDR
// un = CreateHuman ;
2103: LD_ADDR_VAR 0 4
2107: PUSH
2108: CALL_OW 44
2112: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2113: LD_VAR 0 4
2117: PPUSH
2118: LD_INT 11
2120: PPUSH
2121: LD_INT 0
2123: PPUSH
2124: CALL_OW 49
// hc_class := 1 ;
2128: LD_ADDR_OWVAR 28
2132: PUSH
2133: LD_INT 1
2135: ST_TO_ADDR
// hc_sex := sex_male ;
2136: LD_ADDR_OWVAR 27
2140: PUSH
2141: LD_INT 1
2143: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2144: LD_ADDR_OWVAR 33
2148: PUSH
2149: LD_STRING SecondCharsGal
2151: ST_TO_ADDR
// hc_face_number := 54 ;
2152: LD_ADDR_OWVAR 34
2156: PUSH
2157: LD_INT 54
2159: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2160: LD_ADDR_OWVAR 26
2164: PUSH
2165: LD_STRING Luigi Ghbellin
2167: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2168: LD_ADDR_OWVAR 29
2172: PUSH
2173: LD_INT 11
2175: PUSH
2176: LD_INT 11
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2183: LD_ADDR_OWVAR 30
2187: PUSH
2188: LD_INT 1
2190: PUSH
2191: LD_INT 0
2193: PUSH
2194: LD_INT 0
2196: PUSH
2197: LD_INT 0
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2206: LD_ADDR_OWVAR 31
2210: PUSH
2211: LD_INT 2
2213: PUSH
2214: LD_INT 1
2216: PUSH
2217: LD_INT 1
2219: PUSH
2220: LD_INT 1
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: ST_TO_ADDR
// un = CreateHuman ;
2229: LD_ADDR_VAR 0 4
2233: PUSH
2234: CALL_OW 44
2238: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2239: LD_VAR 0 4
2243: PPUSH
2244: LD_INT 11
2246: PPUSH
2247: LD_INT 0
2249: PPUSH
2250: CALL_OW 49
// hc_class := 3 ;
2254: LD_ADDR_OWVAR 28
2258: PUSH
2259: LD_INT 3
2261: ST_TO_ADDR
// hc_sex := sex_male ;
2262: LD_ADDR_OWVAR 27
2266: PUSH
2267: LD_INT 1
2269: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2270: LD_ADDR_OWVAR 33
2274: PUSH
2275: LD_STRING AmGalRemake
2277: ST_TO_ADDR
// hc_face_number := 6 ;
2278: LD_ADDR_OWVAR 34
2282: PUSH
2283: LD_INT 6
2285: ST_TO_ADDR
// hc_name := Leon Carter ;
2286: LD_ADDR_OWVAR 26
2290: PUSH
2291: LD_STRING Leon Carter
2293: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2294: LD_ADDR_OWVAR 29
2298: PUSH
2299: LD_INT 10
2301: PUSH
2302: LD_INT 9
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2309: LD_ADDR_OWVAR 30
2313: PUSH
2314: LD_INT 0
2316: PUSH
2317: LD_INT 1
2319: PUSH
2320: LD_INT 2
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2332: LD_ADDR_OWVAR 31
2336: PUSH
2337: LD_INT 0
2339: PUSH
2340: LD_INT 2
2342: PUSH
2343: LD_INT 3
2345: PUSH
2346: LD_INT 1
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: ST_TO_ADDR
// un = CreateHuman ;
2355: LD_ADDR_VAR 0 4
2359: PUSH
2360: CALL_OW 44
2364: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_VAR 0 5
2374: PPUSH
2375: CALL_OW 52
// if count = 4 then
2379: LD_VAR 0 1
2383: PUSH
2384: LD_INT 4
2386: EQUAL
2387: IFFALSE 2515
// begin hc_class := 1 ;
2389: LD_ADDR_OWVAR 28
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// hc_sex := sex_male ;
2397: LD_ADDR_OWVAR 27
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2405: LD_ADDR_OWVAR 33
2409: PUSH
2410: LD_STRING SecondCharsGal
2412: ST_TO_ADDR
// hc_face_number := 34 ;
2413: LD_ADDR_OWVAR 34
2417: PUSH
2418: LD_INT 34
2420: ST_TO_ADDR
// hc_name := Ian Hill ;
2421: LD_ADDR_OWVAR 26
2425: PUSH
2426: LD_STRING Ian Hill
2428: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2429: LD_ADDR_OWVAR 29
2433: PUSH
2434: LD_INT 10
2436: PUSH
2437: LD_INT 12
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2444: LD_ADDR_OWVAR 30
2448: PUSH
2449: LD_INT 1
2451: PUSH
2452: LD_INT 0
2454: PUSH
2455: LD_INT 0
2457: PUSH
2458: LD_INT 0
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2467: LD_ADDR_OWVAR 31
2471: PUSH
2472: LD_INT 3
2474: PUSH
2475: LD_INT 1
2477: PUSH
2478: LD_INT 1
2480: PUSH
2481: LD_INT 0
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: ST_TO_ADDR
// un = CreateHuman ;
2490: LD_ADDR_VAR 0 4
2494: PUSH
2495: CALL_OW 44
2499: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2500: LD_VAR 0 4
2504: PPUSH
2505: LD_INT 11
2507: PPUSH
2508: LD_INT 0
2510: PPUSH
2511: CALL_OW 49
// end ; if count = 5 then
2515: LD_VAR 0 1
2519: PUSH
2520: LD_INT 5
2522: EQUAL
2523: IFFALSE 2777
// begin hc_class := 1 ;
2525: LD_ADDR_OWVAR 28
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// hc_sex := sex_male ;
2533: LD_ADDR_OWVAR 27
2537: PUSH
2538: LD_INT 1
2540: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2541: LD_ADDR_OWVAR 33
2545: PUSH
2546: LD_STRING SecondCharsGal
2548: ST_TO_ADDR
// hc_face_number := 34 ;
2549: LD_ADDR_OWVAR 34
2553: PUSH
2554: LD_INT 34
2556: ST_TO_ADDR
// hc_name := Ian Hill ;
2557: LD_ADDR_OWVAR 26
2561: PUSH
2562: LD_STRING Ian Hill
2564: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2565: LD_ADDR_OWVAR 29
2569: PUSH
2570: LD_INT 10
2572: PUSH
2573: LD_INT 12
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2580: LD_ADDR_OWVAR 30
2584: PUSH
2585: LD_INT 1
2587: PUSH
2588: LD_INT 0
2590: PUSH
2591: LD_INT 0
2593: PUSH
2594: LD_INT 0
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2603: LD_ADDR_OWVAR 31
2607: PUSH
2608: LD_INT 3
2610: PUSH
2611: LD_INT 1
2613: PUSH
2614: LD_INT 1
2616: PUSH
2617: LD_INT 0
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: ST_TO_ADDR
// un = CreateHuman ;
2626: LD_ADDR_VAR 0 4
2630: PUSH
2631: CALL_OW 44
2635: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2636: LD_VAR 0 4
2640: PPUSH
2641: LD_INT 11
2643: PPUSH
2644: LD_INT 0
2646: PPUSH
2647: CALL_OW 49
// hc_class := 1 ;
2651: LD_ADDR_OWVAR 28
2655: PUSH
2656: LD_INT 1
2658: ST_TO_ADDR
// hc_sex := sex_female ;
2659: LD_ADDR_OWVAR 27
2663: PUSH
2664: LD_INT 2
2666: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2667: LD_ADDR_OWVAR 33
2671: PUSH
2672: LD_STRING SecondCharsGal
2674: ST_TO_ADDR
// hc_face_number := 41 ;
2675: LD_ADDR_OWVAR 34
2679: PUSH
2680: LD_INT 41
2682: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2683: LD_ADDR_OWVAR 26
2687: PUSH
2688: LD_STRING Kate Wadsworth
2690: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2691: LD_ADDR_OWVAR 29
2695: PUSH
2696: LD_INT 9
2698: PUSH
2699: LD_INT 9
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2706: LD_ADDR_OWVAR 30
2710: PUSH
2711: LD_INT 0
2713: PUSH
2714: LD_INT 2
2716: PUSH
2717: LD_INT 0
2719: PUSH
2720: LD_INT 0
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2729: LD_ADDR_OWVAR 31
2733: PUSH
2734: LD_INT 2
2736: PUSH
2737: LD_INT 3
2739: PUSH
2740: LD_INT 1
2742: PUSH
2743: LD_INT 0
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: LIST
2751: ST_TO_ADDR
// un = CreateHuman ;
2752: LD_ADDR_VAR 0 4
2756: PUSH
2757: CALL_OW 44
2761: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2762: LD_VAR 0 4
2766: PPUSH
2767: LD_INT 11
2769: PPUSH
2770: LD_INT 0
2772: PPUSH
2773: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2777: LD_INT 11
2779: PPUSH
2780: LD_INT 22
2782: PUSH
2783: LD_INT 1
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PUSH
2790: LD_INT 21
2792: PUSH
2793: LD_INT 1
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PUSH
2800: LD_INT 26
2802: PUSH
2803: LD_INT 1
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: LIST
2814: PPUSH
2815: CALL_OW 70
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2828: LD_INT 11
2830: PPUSH
2831: LD_INT 22
2833: PUSH
2834: LD_INT 1
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 21
2843: PUSH
2844: LD_INT 1
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: PUSH
2851: LD_INT 26
2853: PUSH
2854: LD_INT 1
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: LIST
2865: PPUSH
2866: CALL_OW 70
2870: PUSH
2871: LD_INT 1
2873: ARRAY
2874: PPUSH
2875: LD_STRING D6-Sol3-1
2877: PPUSH
2878: CALL_OW 88
// end ; end_of_file
2882: LD_VAR 0 2
2886: RET
// export function PrepareRussianCommander ; begin
2887: LD_INT 0
2889: PPUSH
// uc_side = 3 ;
2890: LD_ADDR_OWVAR 20
2894: PUSH
2895: LD_INT 3
2897: ST_TO_ADDR
// uc_nation = 3 ;
2898: LD_ADDR_OWVAR 21
2902: PUSH
2903: LD_INT 3
2905: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2906: LD_ADDR_EXP 15
2910: PUSH
2911: LD_STRING Stolypin
2913: PPUSH
2914: CALL_OW 25
2918: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2919: LD_EXP 15
2923: PPUSH
2924: LD_INT 21
2926: PPUSH
2927: CALL_OW 52
// end ;
2931: LD_VAR 0 1
2935: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2936: LD_INT 0
2938: PPUSH
2939: PPUSH
2940: PPUSH
2941: PPUSH
// if Difficulty > 1 then
2942: LD_OWVAR 67
2946: PUSH
2947: LD_INT 1
2949: GREATER
2950: IFFALSE 3060
// begin uc_side := 3 ;
2952: LD_ADDR_OWVAR 20
2956: PUSH
2957: LD_INT 3
2959: ST_TO_ADDR
// uc_nation := 3 ;
2960: LD_ADDR_OWVAR 21
2964: PUSH
2965: LD_INT 3
2967: ST_TO_ADDR
// InitHc ;
2968: CALL_OW 19
// InitBc ;
2972: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
2976: LD_INT 0
2978: PPUSH
2979: LD_INT 1
2981: PPUSH
2982: LD_INT 4
2984: PPUSH
2985: CALL_OW 380
// bc_type := b_breastwork ;
2989: LD_ADDR_OWVAR 42
2993: PUSH
2994: LD_INT 31
2996: ST_TO_ADDR
// bc_level := 4 ;
2997: LD_ADDR_OWVAR 43
3001: PUSH
3002: LD_INT 4
3004: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3005: LD_ADDR_VAR 0 3
3009: PUSH
3010: LD_INT 100
3012: PPUSH
3013: LD_INT 58
3015: PPUSH
3016: LD_INT 2
3018: PPUSH
3019: CALL_OW 47
3023: ST_TO_ADDR
// un := CreateHuman ;
3024: LD_ADDR_VAR 0 4
3028: PUSH
3029: CALL_OW 44
3033: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3034: LD_VAR 0 4
3038: PPUSH
3039: LD_INT 5
3041: PPUSH
3042: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3046: LD_VAR 0 4
3050: PPUSH
3051: LD_VAR 0 3
3055: PPUSH
3056: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3060: LD_INT 3
3062: PPUSH
3063: LD_INT 3
3065: PPUSH
3066: LD_INT 22
3068: PPUSH
3069: LD_EXP 16
3073: PPUSH
3074: LD_EXP 17
3078: PPUSH
3079: CALL_OW 12
3083: PPUSH
3084: LD_INT 1
3086: PPUSH
3087: LD_INT 3
3089: PUSH
3090: LD_INT 4
3092: PUSH
3093: LD_INT 5
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: PUSH
3101: LD_OWVAR 67
3105: ARRAY
3106: PPUSH
3107: CALL 4400 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3111: LD_INT 3
3113: PPUSH
3114: LD_INT 3
3116: PPUSH
3117: LD_INT 21
3119: PPUSH
3120: LD_EXP 16
3124: PPUSH
3125: LD_EXP 17
3129: PPUSH
3130: CALL_OW 12
3134: PPUSH
3135: LD_INT 2
3137: PPUSH
3138: LD_INT 3
3140: PPUSH
3141: CALL 4400 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3145: LD_INT 3
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: LD_INT 1
3153: PPUSH
3154: LD_EXP 16
3158: PPUSH
3159: LD_EXP 17
3163: PPUSH
3164: CALL_OW 12
3168: PPUSH
3169: LD_INT 4
3171: PPUSH
3172: LD_INT 3
3174: PPUSH
3175: CALL 4400 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3179: LD_INT 3
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: LD_INT 24
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: LD_EXP 17
3197: PPUSH
3198: CALL_OW 12
3202: PPUSH
3203: LD_INT 3
3205: PPUSH
3206: LD_INT 5
3208: PPUSH
3209: CALL 4400 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3213: LD_ADDR_VAR 0 2
3217: PUSH
3218: LD_INT 22
3220: PUSH
3221: LD_INT 3
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: LD_INT 30
3230: PUSH
3231: LD_INT 32
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: PUSH
3247: FOR_IN
3248: IFFALSE 3288
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3250: LD_INT 3
3252: PPUSH
3253: LD_INT 3
3255: PPUSH
3256: LD_VAR 0 2
3260: PPUSH
3261: LD_EXP 16
3265: PPUSH
3266: LD_EXP 17
3270: PPUSH
3271: CALL_OW 12
3275: PPUSH
3276: LD_INT 1
3278: PPUSH
3279: LD_INT 1
3281: PPUSH
3282: CALL 4400 0 6
3286: GO 3247
3288: POP
3289: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3290: LD_ADDR_VAR 0 2
3294: PUSH
3295: LD_INT 22
3297: PUSH
3298: LD_INT 3
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: PUSH
3305: LD_INT 30
3307: PUSH
3308: LD_INT 31
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: PPUSH
3319: CALL_OW 69
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3353
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3327: LD_EXP 16
3331: PPUSH
3332: LD_EXP 17
3336: PPUSH
3337: CALL_OW 12
3341: PPUSH
3342: LD_VAR 0 2
3346: PPUSH
3347: CALL 4510 0 2
3351: GO 3324
3353: POP
3354: POP
// end ;
3355: LD_VAR 0 1
3359: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3360: LD_INT 0
3362: PPUSH
3363: PPUSH
3364: PPUSH
3365: PPUSH
// uc_side = 6 ;
3366: LD_ADDR_OWVAR 20
3370: PUSH
3371: LD_INT 6
3373: ST_TO_ADDR
// uc_nation = 3 ;
3374: LD_ADDR_OWVAR 21
3378: PUSH
3379: LD_INT 3
3381: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
3382: LD_ADDR_VAR 0 2
3386: PUSH
3387: DOUBLE
3388: LD_INT 1
3390: DEC
3391: ST_TO_ADDR
3392: LD_INT 1
3394: PUSH
3395: LD_INT 2
3397: PUSH
3398: LD_INT 1
3400: PPUSH
3401: LD_INT 2
3403: PPUSH
3404: CALL_OW 12
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: LIST
3413: PUSH
3414: LD_OWVAR 67
3418: ARRAY
3419: PUSH
3420: FOR_TO
3421: IFFALSE 3581
// begin vc_engine = 1 ;
3423: LD_ADDR_OWVAR 39
3427: PUSH
3428: LD_INT 1
3430: ST_TO_ADDR
// vc_control = 1 ;
3431: LD_ADDR_OWVAR 38
3435: PUSH
3436: LD_INT 1
3438: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
3439: LD_ADDR_OWVAR 40
3443: PUSH
3444: LD_INT 42
3446: PUSH
3447: LD_INT 42
3449: PUSH
3450: LD_INT 43
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_OWVAR 67
3462: ARRAY
3463: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
3464: LD_ADDR_OWVAR 37
3468: PUSH
3469: LD_INT 21
3471: PUSH
3472: LD_INT 22
3474: PUSH
3475: LD_INT 22
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: LIST
3482: PUSH
3483: LD_OWVAR 67
3487: ARRAY
3488: ST_TO_ADDR
// veh = CreateVehicle ;
3489: LD_ADDR_VAR 0 3
3493: PUSH
3494: CALL_OW 45
3498: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3499: LD_VAR 0 3
3503: PPUSH
3504: LD_INT 3
3506: PPUSH
3507: LD_INT 0
3509: PPUSH
3510: CALL_OW 49
// hc_gallery =  ;
3514: LD_ADDR_OWVAR 33
3518: PUSH
3519: LD_STRING 
3521: ST_TO_ADDR
// hc_name =  ;
3522: LD_ADDR_OWVAR 26
3526: PUSH
3527: LD_STRING 
3529: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3530: LD_INT 0
3532: PPUSH
3533: LD_INT 3
3535: PPUSH
3536: LD_EXP 16
3540: PPUSH
3541: LD_EXP 17
3545: PPUSH
3546: CALL_OW 12
3550: PPUSH
3551: CALL_OW 380
// un = CreateHuman ;
3555: LD_ADDR_VAR 0 4
3559: PUSH
3560: CALL_OW 44
3564: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3565: LD_VAR 0 4
3569: PPUSH
3570: LD_VAR 0 3
3574: PPUSH
3575: CALL_OW 52
// end ;
3579: GO 3420
3581: POP
3582: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3583: LD_INT 0
3585: PPUSH
3586: LD_INT 2
3588: PPUSH
3589: LD_EXP 16
3593: PPUSH
3594: LD_EXP 17
3598: PPUSH
3599: CALL_OW 12
3603: PUSH
3604: LD_INT 2
3606: PLUS
3607: PPUSH
3608: CALL_OW 380
// un = CreateHuman ;
3612: LD_ADDR_VAR 0 4
3616: PUSH
3617: CALL_OW 44
3621: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3622: LD_VAR 0 4
3626: PPUSH
3627: LD_INT 3
3629: PPUSH
3630: LD_INT 0
3632: PPUSH
3633: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3637: LD_INT 0
3639: PPUSH
3640: LD_INT 4
3642: PPUSH
3643: LD_EXP 16
3647: PPUSH
3648: LD_EXP 17
3652: PPUSH
3653: CALL_OW 12
3657: PUSH
3658: LD_INT 2
3660: PLUS
3661: PPUSH
3662: CALL_OW 380
// un = CreateHuman ;
3666: LD_ADDR_VAR 0 4
3670: PUSH
3671: CALL_OW 44
3675: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3676: LD_VAR 0 4
3680: PPUSH
3681: LD_INT 3
3683: PPUSH
3684: LD_INT 0
3686: PPUSH
3687: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3691: LD_ADDR_VAR 0 2
3695: PUSH
3696: DOUBLE
3697: LD_INT 1
3699: DEC
3700: ST_TO_ADDR
3701: LD_INT 2
3703: PUSH
3704: LD_INT 3
3706: PUSH
3707: LD_INT 3
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: PUSH
3715: LD_OWVAR 67
3719: ARRAY
3720: PUSH
3721: LD_INT 1
3723: PPUSH
3724: LD_INT 3
3726: PPUSH
3727: CALL_OW 12
3731: PLUS
3732: PUSH
3733: FOR_TO
3734: IFFALSE 3804
// begin hc_gallery =  ;
3736: LD_ADDR_OWVAR 33
3740: PUSH
3741: LD_STRING 
3743: ST_TO_ADDR
// hc_name =  ;
3744: LD_ADDR_OWVAR 26
3748: PUSH
3749: LD_STRING 
3751: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3752: LD_INT 0
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_EXP 16
3762: PPUSH
3763: LD_EXP 17
3767: PPUSH
3768: CALL_OW 12
3772: PPUSH
3773: CALL_OW 380
// un = CreateHuman ;
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: CALL_OW 44
3786: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3787: LD_VAR 0 4
3791: PPUSH
3792: LD_INT 3
3794: PPUSH
3795: LD_INT 0
3797: PPUSH
3798: CALL_OW 49
// end ;
3802: GO 3733
3804: POP
3805: POP
// vc_engine = 1 ;
3806: LD_ADDR_OWVAR 39
3810: PUSH
3811: LD_INT 1
3813: ST_TO_ADDR
// vc_control = 1 ;
3814: LD_ADDR_OWVAR 38
3818: PUSH
3819: LD_INT 1
3821: ST_TO_ADDR
// vc_weapon = 51 ;
3822: LD_ADDR_OWVAR 40
3826: PUSH
3827: LD_INT 51
3829: ST_TO_ADDR
// vc_chassis = 22 ;
3830: LD_ADDR_OWVAR 37
3834: PUSH
3835: LD_INT 22
3837: ST_TO_ADDR
// veh = CreateVehicle ;
3838: LD_ADDR_VAR 0 3
3842: PUSH
3843: CALL_OW 45
3847: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3848: LD_VAR 0 3
3852: PPUSH
3853: LD_INT 3
3855: PPUSH
3856: LD_INT 0
3858: PPUSH
3859: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3863: LD_VAR 0 3
3867: PPUSH
3868: LD_INT 1
3870: PPUSH
3871: LD_INT 100
3873: PPUSH
3874: CALL_OW 290
// hc_gallery =  ;
3878: LD_ADDR_OWVAR 33
3882: PUSH
3883: LD_STRING 
3885: ST_TO_ADDR
// hc_name =  ;
3886: LD_ADDR_OWVAR 26
3890: PUSH
3891: LD_STRING 
3893: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3894: LD_INT 0
3896: PPUSH
3897: LD_INT 3
3899: PPUSH
3900: LD_EXP 16
3904: PPUSH
3905: LD_EXP 17
3909: PPUSH
3910: CALL_OW 12
3914: PPUSH
3915: CALL_OW 380
// un = CreateHuman ;
3919: LD_ADDR_VAR 0 4
3923: PUSH
3924: CALL_OW 44
3928: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_VAR 0 3
3938: PPUSH
3939: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3943: LD_ADDR_VAR 0 2
3947: PUSH
3948: LD_INT 22
3950: PUSH
3951: LD_INT 6
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 1
3960: PUSH
3961: LD_INT 3
3963: PUSH
3964: LD_INT 25
3966: PUSH
3967: LD_INT 2
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 3
3980: PUSH
3981: LD_INT 25
3983: PUSH
3984: LD_INT 4
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: LIST
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PPUSH
4004: CALL_OW 69
4008: PUSH
4009: FOR_IN
4010: IFFALSE 4029
// ComAgressiveMove ( i , 45 , 46 ) ;
4012: LD_VAR 0 2
4016: PPUSH
4017: LD_INT 45
4019: PPUSH
4020: LD_INT 46
4022: PPUSH
4023: CALL_OW 114
4027: GO 4009
4029: POP
4030: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4031: LD_ADDR_VAR 0 2
4035: PUSH
4036: LD_INT 22
4038: PUSH
4039: LD_INT 6
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PUSH
4046: LD_INT 25
4048: PUSH
4049: LD_INT 2
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 69
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4097
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4068: LD_ADDR_EXP 21
4072: PUSH
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_INT 0
4080: PPUSH
4081: LD_INT 48
4083: PPUSH
4084: LD_INT 55
4086: PPUSH
4087: LD_INT 5
4089: PPUSH
4090: CALL_OW 145
4094: ST_TO_ADDR
4095: GO 4065
4097: POP
4098: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4099: LD_ADDR_VAR 0 2
4103: PUSH
4104: LD_INT 22
4106: PUSH
4107: LD_INT 6
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 25
4116: PUSH
4117: LD_INT 4
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: PPUSH
4128: CALL_OW 69
4132: PUSH
4133: FOR_IN
4134: IFFALSE 4153
// ComMoveXY ( i , 39 , 55 ) ;
4136: LD_VAR 0 2
4140: PPUSH
4141: LD_INT 39
4143: PPUSH
4144: LD_INT 55
4146: PPUSH
4147: CALL_OW 111
4151: GO 4133
4153: POP
4154: POP
// end ;
4155: LD_VAR 0 1
4159: RET
// export function PrepareFirstAttack ; var i , un ; begin
4160: LD_INT 0
4162: PPUSH
4163: PPUSH
4164: PPUSH
// uc_side = 5 ;
4165: LD_ADDR_OWVAR 20
4169: PUSH
4170: LD_INT 5
4172: ST_TO_ADDR
// uc_nation = 3 ;
4173: LD_ADDR_OWVAR 21
4177: PUSH
4178: LD_INT 3
4180: ST_TO_ADDR
// for i := 1 to 4 do
4181: LD_ADDR_VAR 0 2
4185: PUSH
4186: DOUBLE
4187: LD_INT 1
4189: DEC
4190: ST_TO_ADDR
4191: LD_INT 4
4193: PUSH
4194: FOR_TO
4195: IFFALSE 4294
// begin hc_gallery =  ;
4197: LD_ADDR_OWVAR 33
4201: PUSH
4202: LD_STRING 
4204: ST_TO_ADDR
// hc_name =  ;
4205: LD_ADDR_OWVAR 26
4209: PUSH
4210: LD_STRING 
4212: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4213: LD_INT 0
4215: PPUSH
4216: LD_INT 1
4218: PPUSH
4219: LD_EXP 16
4223: PPUSH
4224: LD_EXP 17
4228: PPUSH
4229: CALL_OW 12
4233: PPUSH
4234: CALL_OW 380
// un = CreateHuman ;
4238: LD_ADDR_VAR 0 3
4242: PUSH
4243: CALL_OW 44
4247: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4248: LD_VAR 0 3
4252: PPUSH
4253: LD_INT 4
4255: PPUSH
4256: LD_INT 0
4258: PPUSH
4259: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4263: LD_VAR 0 3
4267: PPUSH
4268: LD_EXP 1
4272: PPUSH
4273: CALL_OW 250
4277: PPUSH
4278: LD_EXP 1
4282: PPUSH
4283: CALL_OW 251
4287: PPUSH
4288: CALL_OW 114
// end ;
4292: GO 4194
4294: POP
4295: POP
// firstRussianAttack = 1 ;
4296: LD_ADDR_EXP 23
4300: PUSH
4301: LD_INT 1
4303: ST_TO_ADDR
// end ; end_of_file
4304: LD_VAR 0 1
4308: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4309: LD_INT 0
4311: PPUSH
4312: PPUSH
// if exist_mode then
4313: LD_VAR 0 2
4317: IFFALSE 4342
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
4319: LD_ADDR_VAR 0 4
4323: PUSH
4324: LD_EXP 49
4328: PUSH
4329: LD_VAR 0 1
4333: STR
4334: PPUSH
4335: CALL_OW 34
4339: ST_TO_ADDR
// end else
4340: GO 4357
// begin unit := NewCharacter ( ident ) ;
4342: LD_ADDR_VAR 0 4
4346: PUSH
4347: LD_VAR 0 1
4351: PPUSH
4352: CALL_OW 25
4356: ST_TO_ADDR
// end ; result := unit ;
4357: LD_ADDR_VAR 0 3
4361: PUSH
4362: LD_VAR 0 4
4366: ST_TO_ADDR
// end ;
4367: LD_VAR 0 3
4371: RET
// export function Video ( mode ) ; begin
4372: LD_INT 0
4374: PPUSH
// ingame_video = mode ;
4375: LD_ADDR_OWVAR 52
4379: PUSH
4380: LD_VAR 0 1
4384: ST_TO_ADDR
// interface_hidden = mode ;
4385: LD_ADDR_OWVAR 54
4389: PUSH
4390: LD_VAR 0 1
4394: ST_TO_ADDR
// end ;
4395: LD_VAR 0 2
4399: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4400: LD_INT 0
4402: PPUSH
4403: PPUSH
4404: PPUSH
4405: PPUSH
// for i = 1 to count do
4406: LD_ADDR_VAR 0 8
4410: PUSH
4411: DOUBLE
4412: LD_INT 1
4414: DEC
4415: ST_TO_ADDR
4416: LD_VAR 0 6
4420: PUSH
4421: FOR_TO
4422: IFFALSE 4503
// begin uc_side = side ;
4424: LD_ADDR_OWVAR 20
4428: PUSH
4429: LD_VAR 0 1
4433: ST_TO_ADDR
// uc_nation = nation ;
4434: LD_ADDR_OWVAR 21
4438: PUSH
4439: LD_VAR 0 2
4443: ST_TO_ADDR
// hc_gallery =  ;
4444: LD_ADDR_OWVAR 33
4448: PUSH
4449: LD_STRING 
4451: ST_TO_ADDR
// hc_name =  ;
4452: LD_ADDR_OWVAR 26
4456: PUSH
4457: LD_STRING 
4459: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4460: LD_INT 0
4462: PPUSH
4463: LD_VAR 0 5
4467: PPUSH
4468: LD_VAR 0 4
4472: PPUSH
4473: CALL_OW 380
// un = CreateHuman ;
4477: LD_ADDR_VAR 0 10
4481: PUSH
4482: CALL_OW 44
4486: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4487: LD_VAR 0 10
4491: PPUSH
4492: LD_VAR 0 3
4496: PPUSH
4497: CALL_OW 52
// end ;
4501: GO 4421
4503: POP
4504: POP
// end ;
4505: LD_VAR 0 7
4509: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4510: LD_INT 0
4512: PPUSH
4513: PPUSH
4514: PPUSH
// uc_side := GetSide ( b ) ;
4515: LD_ADDR_OWVAR 20
4519: PUSH
4520: LD_VAR 0 2
4524: PPUSH
4525: CALL_OW 255
4529: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4530: LD_ADDR_OWVAR 21
4534: PUSH
4535: LD_VAR 0 2
4539: PPUSH
4540: CALL_OW 248
4544: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4545: LD_INT 0
4547: PPUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_VAR 0 1
4555: PPUSH
4556: CALL_OW 380
// un = CreateHuman ;
4560: LD_ADDR_VAR 0 4
4564: PUSH
4565: CALL_OW 44
4569: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4570: LD_ADDR_VAR 0 5
4574: PUSH
4575: LD_VAR 0 2
4579: PPUSH
4580: CALL_OW 254
4584: PUSH
4585: LD_INT 3
4587: MINUS
4588: ST_TO_ADDR
// if dir < 0 then
4589: LD_VAR 0 5
4593: PUSH
4594: LD_INT 0
4596: LESS
4597: IFFALSE 4613
// dir := 6 + dir ;
4599: LD_ADDR_VAR 0 5
4603: PUSH
4604: LD_INT 6
4606: PUSH
4607: LD_VAR 0 5
4611: PLUS
4612: ST_TO_ADDR
// SetDir ( un , dir ) ;
4613: LD_VAR 0 4
4617: PPUSH
4618: LD_VAR 0 5
4622: PPUSH
4623: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4627: LD_VAR 0 4
4631: PPUSH
4632: LD_VAR 0 2
4636: PPUSH
4637: CALL_OW 52
// end ;
4641: LD_VAR 0 3
4645: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4646: LD_INT 0
4648: PPUSH
4649: PPUSH
4650: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4651: LD_ADDR_VAR 0 6
4655: PUSH
4656: LD_VAR 0 1
4660: PUSH
4661: LD_INT 1
4663: PPUSH
4664: LD_VAR 0 1
4668: PPUSH
4669: CALL_OW 12
4673: ARRAY
4674: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4675: LD_VAR 0 6
4679: PPUSH
4680: CALL_OW 258
4684: PUSH
4685: LD_INT 1
4687: EQUAL
4688: IFFALSE 4706
// Say ( speaker , dialogMID ) else
4690: LD_VAR 0 6
4694: PPUSH
4695: LD_VAR 0 2
4699: PPUSH
4700: CALL_OW 88
4704: GO 4720
// Say ( speaker , dialogFID ) ;
4706: LD_VAR 0 6
4710: PPUSH
4711: LD_VAR 0 3
4715: PPUSH
4716: CALL_OW 88
// result := speaker ;
4720: LD_ADDR_VAR 0 4
4724: PUSH
4725: LD_VAR 0 6
4729: ST_TO_ADDR
// end ;
4730: LD_VAR 0 4
4734: RET
// export function PrepareDifficulty ; var tmp ; begin
4735: LD_INT 0
4737: PPUSH
4738: PPUSH
// if Difficulty = 1 then
4739: LD_OWVAR 67
4743: PUSH
4744: LD_INT 1
4746: EQUAL
4747: IFFALSE 4765
// begin RuSoldMinLevel = 1 ;
4749: LD_ADDR_EXP 16
4753: PUSH
4754: LD_INT 1
4756: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4757: LD_ADDR_EXP 17
4761: PUSH
4762: LD_INT 2
4764: ST_TO_ADDR
// end ; if Difficulty = 2 then
4765: LD_OWVAR 67
4769: PUSH
4770: LD_INT 2
4772: EQUAL
4773: IFFALSE 4874
// begin RuSoldMinLevel = 2 ;
4775: LD_ADDR_EXP 16
4779: PUSH
4780: LD_INT 2
4782: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4783: LD_ADDR_EXP 17
4787: PUSH
4788: LD_INT 3
4790: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4791: LD_INT 23
4793: PPUSH
4794: CALL_OW 64
// uc_nation = 3 ;
4798: LD_ADDR_OWVAR 21
4802: PUSH
4803: LD_INT 3
4805: ST_TO_ADDR
// uc_side = 3 ;
4806: LD_ADDR_OWVAR 20
4810: PUSH
4811: LD_INT 3
4813: ST_TO_ADDR
// bc_level = 5 ;
4814: LD_ADDR_OWVAR 43
4818: PUSH
4819: LD_INT 5
4821: ST_TO_ADDR
// bc_type = 32 ;
4822: LD_ADDR_OWVAR 42
4826: PUSH
4827: LD_INT 32
4829: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4830: LD_ADDR_VAR 0 2
4834: PUSH
4835: LD_INT 76
4837: PPUSH
4838: LD_INT 91
4840: PPUSH
4841: LD_INT 2
4843: PPUSH
4844: CALL_OW 47
4848: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4849: LD_VAR 0 2
4853: PPUSH
4854: LD_INT 43
4856: PPUSH
4857: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4861: LD_INT 51
4863: PPUSH
4864: LD_INT 3
4866: PPUSH
4867: LD_INT 1
4869: PPUSH
4870: CALL_OW 322
// end ; if Difficulty = 3 then
4874: LD_OWVAR 67
4878: PUSH
4879: LD_INT 3
4881: EQUAL
4882: IFFALSE 5044
// begin RuSoldMinLevel = 2 ;
4884: LD_ADDR_EXP 16
4888: PUSH
4889: LD_INT 2
4891: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4892: LD_ADDR_EXP 17
4896: PUSH
4897: LD_INT 4
4899: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4900: LD_INT 26
4902: PPUSH
4903: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4907: LD_INT 23
4909: PPUSH
4910: CALL_OW 64
// uc_nation = 3 ;
4914: LD_ADDR_OWVAR 21
4918: PUSH
4919: LD_INT 3
4921: ST_TO_ADDR
// uc_side = 3 ;
4922: LD_ADDR_OWVAR 20
4926: PUSH
4927: LD_INT 3
4929: ST_TO_ADDR
// bc_level = 5 ;
4930: LD_ADDR_OWVAR 43
4934: PUSH
4935: LD_INT 5
4937: ST_TO_ADDR
// bc_type = 32 ;
4938: LD_ADDR_OWVAR 42
4942: PUSH
4943: LD_INT 32
4945: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4946: LD_ADDR_VAR 0 2
4950: PUSH
4951: LD_INT 76
4953: PPUSH
4954: LD_INT 91
4956: PPUSH
4957: LD_INT 2
4959: PPUSH
4960: CALL_OW 47
4964: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4965: LD_VAR 0 2
4969: PPUSH
4970: LD_INT 44
4972: PPUSH
4973: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4977: LD_ADDR_VAR 0 2
4981: PUSH
4982: LD_INT 83
4984: PPUSH
4985: LD_INT 84
4987: PPUSH
4988: LD_INT 2
4990: PPUSH
4991: CALL_OW 47
4995: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4996: LD_VAR 0 2
5000: PPUSH
5001: LD_INT 43
5003: PPUSH
5004: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
5008: LD_INT 51
5010: PPUSH
5011: LD_INT 3
5013: PPUSH
5014: LD_INT 1
5016: PPUSH
5017: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
5021: LD_INT 52
5023: PPUSH
5024: LD_INT 3
5026: PPUSH
5027: LD_INT 1
5029: PPUSH
5030: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
5034: LD_INT 25
5036: PPUSH
5037: LD_INT 44
5039: PPUSH
5040: CALL_OW 431
// end ; end ;
5044: LD_VAR 0 1
5048: RET
// export function EnergyDialog ; begin
5049: LD_INT 0
5051: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5052: LD_INT 46
5054: PPUSH
5055: LD_INT 1
5057: PPUSH
5058: CALL_OW 321
5062: PUSH
5063: LD_INT 1
5065: EQUAL
5066: PUSH
5067: LD_INT 35
5069: PPUSH
5070: LD_INT 1
5072: PPUSH
5073: CALL_OW 321
5077: PUSH
5078: LD_INT 1
5080: EQUAL
5081: AND
5082: IFFALSE 5106
// begin Say ( JMM , D9c-JMM-1 ) ;
5084: LD_EXP 1
5088: PPUSH
5089: LD_STRING D9c-JMM-1
5091: PPUSH
5092: CALL_OW 88
// energyVDialog = 1 ;
5096: LD_ADDR_EXP 33
5100: PUSH
5101: LD_INT 1
5103: ST_TO_ADDR
// end else
5104: GO 5260
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5106: LD_INT 35
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: CALL_OW 321
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: PUSH
5121: LD_EXP 33
5125: PUSH
5126: LD_INT 0
5128: EQUAL
5129: AND
5130: IFFALSE 5152
// begin Say ( JMM , D9c-JMM-1a ) ;
5132: LD_EXP 1
5136: PPUSH
5137: LD_STRING D9c-JMM-1a
5139: PPUSH
5140: CALL_OW 88
// energyVDialog = 1 ;
5144: LD_ADDR_EXP 33
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5152: LD_INT 46
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 321
5162: PUSH
5163: LD_INT 2
5165: EQUAL
5166: PUSH
5167: LD_EXP 33
5171: PUSH
5172: LD_INT 0
5174: EQUAL
5175: AND
5176: IFFALSE 5198
// begin Say ( JMM , D9c-JMM-1b ) ;
5178: LD_EXP 1
5182: PPUSH
5183: LD_STRING D9c-JMM-1b
5185: PPUSH
5186: CALL_OW 88
// energyVDialog = 1 ;
5190: LD_ADDR_EXP 33
5194: PUSH
5195: LD_INT 1
5197: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5198: LD_INT 46
5200: PPUSH
5201: LD_INT 1
5203: PPUSH
5204: CALL_OW 321
5208: PUSH
5209: LD_INT 2
5211: EQUAL
5212: PUSH
5213: LD_INT 21
5215: PPUSH
5216: LD_INT 1
5218: PPUSH
5219: CALL_OW 321
5223: PUSH
5224: LD_INT 2
5226: EQUAL
5227: AND
5228: PUSH
5229: LD_EXP 33
5233: PUSH
5234: LD_INT 0
5236: EQUAL
5237: AND
5238: IFFALSE 5260
// begin Say ( JMM , D9c-JMM-1c ) ;
5240: LD_EXP 1
5244: PPUSH
5245: LD_STRING D9c-JMM-1c
5247: PPUSH
5248: CALL_OW 88
// energyVDialog = 1 ;
5252: LD_ADDR_EXP 33
5256: PUSH
5257: LD_INT 1
5259: ST_TO_ADDR
// end ; end ; end ;
5260: LD_VAR 0 1
5264: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5265: LD_INT 0
5267: PPUSH
5268: PPUSH
5269: PPUSH
5270: PPUSH
5271: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5272: LD_VAR 0 1
5276: NOT
5277: PUSH
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 256
5287: PUSH
5288: LD_INT 250
5290: LESS
5291: OR
5292: PUSH
5293: LD_VAR 0 1
5297: PPUSH
5298: CALL_OW 314
5302: PUSH
5303: LD_VAR 0 1
5307: PPUSH
5308: CALL_OW 261
5312: PUSH
5313: LD_INT 20
5315: GREATER
5316: AND
5317: OR
5318: IFFALSE 5322
// exit ;
5320: GO 5687
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5322: LD_VAR 0 1
5326: PPUSH
5327: CALL_OW 261
5331: PUSH
5332: LD_INT 20
5334: LESS
5335: PUSH
5336: LD_VAR 0 1
5340: PPUSH
5341: CALL_OW 110
5345: PUSH
5346: LD_INT 21
5348: EQUAL
5349: NOT
5350: AND
5351: IFFALSE 5378
// begin ComStop ( bulldozer ) ;
5353: LD_VAR 0 1
5357: PPUSH
5358: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5362: LD_VAR 0 1
5366: PPUSH
5367: LD_INT 21
5369: PPUSH
5370: CALL_OW 109
// exit ;
5374: GO 5687
// end else
5376: GO 5405
// if GetFuel ( bulldozer ) > 20 then
5378: LD_VAR 0 1
5382: PPUSH
5383: CALL_OW 261
5387: PUSH
5388: LD_INT 20
5390: GREATER
5391: IFFALSE 5405
// SetTag ( bulldozer , 0 ) ;
5393: LD_VAR 0 1
5397: PPUSH
5398: LD_INT 0
5400: PPUSH
5401: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5405: LD_ADDR_VAR 0 5
5409: PUSH
5410: LD_VAR 0 2
5414: PPUSH
5415: CALL_OW 353
5419: ST_TO_ADDR
// tmp := [ ] ;
5420: LD_ADDR_VAR 0 6
5424: PUSH
5425: EMPTY
5426: ST_TO_ADDR
// for i = 1 to list do
5427: LD_ADDR_VAR 0 4
5431: PUSH
5432: DOUBLE
5433: LD_INT 1
5435: DEC
5436: ST_TO_ADDR
5437: LD_VAR 0 5
5441: PUSH
5442: FOR_TO
5443: IFFALSE 5541
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5445: LD_VAR 0 5
5449: PUSH
5450: LD_VAR 0 4
5454: ARRAY
5455: PUSH
5456: LD_INT 1
5458: ARRAY
5459: PPUSH
5460: LD_VAR 0 5
5464: PUSH
5465: LD_VAR 0 4
5469: ARRAY
5470: PUSH
5471: LD_INT 2
5473: ARRAY
5474: PPUSH
5475: CALL_OW 554
5479: IFFALSE 5539
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5481: LD_ADDR_VAR 0 6
5485: PUSH
5486: LD_VAR 0 6
5490: PPUSH
5491: LD_VAR 0 6
5495: PUSH
5496: LD_INT 1
5498: PLUS
5499: PPUSH
5500: LD_VAR 0 5
5504: PUSH
5505: LD_VAR 0 4
5509: ARRAY
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PUSH
5515: LD_VAR 0 5
5519: PUSH
5520: LD_VAR 0 4
5524: ARRAY
5525: PUSH
5526: LD_INT 2
5528: ARRAY
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PPUSH
5534: CALL_OW 1
5538: ST_TO_ADDR
// end ;
5539: GO 5442
5541: POP
5542: POP
// ComStop ( bulldozer ) ;
5543: LD_VAR 0 1
5547: PPUSH
5548: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5552: LD_ADDR_VAR 0 7
5556: PUSH
5557: LD_VAR 0 1
5561: PPUSH
5562: CALL_OW 250
5566: PUSH
5567: LD_VAR 0 1
5571: PPUSH
5572: CALL_OW 251
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: ST_TO_ADDR
// for i = tmp downto 1 do
5581: LD_ADDR_VAR 0 4
5585: PUSH
5586: DOUBLE
5587: LD_VAR 0 6
5591: INC
5592: ST_TO_ADDR
5593: LD_INT 1
5595: PUSH
5596: FOR_DOWNTO
5597: IFFALSE 5685
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5599: LD_ADDR_VAR 0 7
5603: PUSH
5604: LD_VAR 0 7
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 7
5617: PUSH
5618: LD_INT 2
5620: ARRAY
5621: PPUSH
5622: LD_VAR 0 6
5626: PPUSH
5627: CALL 5788 0 3
5631: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5632: LD_VAR 0 1
5636: PPUSH
5637: LD_VAR 0 7
5641: PUSH
5642: LD_INT 1
5644: ARRAY
5645: PPUSH
5646: LD_VAR 0 7
5650: PUSH
5651: LD_INT 2
5653: ARRAY
5654: PPUSH
5655: CALL 5692 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5659: LD_ADDR_VAR 0 6
5663: PUSH
5664: LD_VAR 0 6
5668: PPUSH
5669: LD_VAR 0 7
5673: PUSH
5674: LD_INT 3
5676: ARRAY
5677: PPUSH
5678: CALL_OW 3
5682: ST_TO_ADDR
// end ;
5683: GO 5596
5685: POP
5686: POP
// end ;
5687: LD_VAR 0 3
5691: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5692: LD_INT 0
5694: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5695: LD_VAR 0 2
5699: PPUSH
5700: LD_VAR 0 3
5704: PPUSH
5705: CALL_OW 351
5709: PUSH
5710: LD_VAR 0 2
5714: PPUSH
5715: LD_VAR 0 3
5719: PPUSH
5720: CALL_OW 554
5724: AND
5725: PUSH
5726: LD_VAR 0 2
5730: PPUSH
5731: LD_VAR 0 3
5735: PPUSH
5736: CALL_OW 488
5740: AND
5741: PUSH
5742: LD_VAR 0 2
5746: PPUSH
5747: LD_VAR 0 3
5751: PPUSH
5752: CALL_OW 428
5756: PUSH
5757: LD_INT 1
5759: NEG
5760: EQUAL
5761: AND
5762: IFFALSE 5783
// AddComMoveXY ( bulldozer , x , y ) ;
5764: LD_VAR 0 1
5768: PPUSH
5769: LD_VAR 0 2
5773: PPUSH
5774: LD_VAR 0 3
5778: PPUSH
5779: CALL_OW 171
// end ;
5783: LD_VAR 0 4
5787: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5788: LD_INT 0
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
5796: PPUSH
// dist := 99999 ;
5797: LD_ADDR_VAR 0 6
5801: PUSH
5802: LD_INT 99999
5804: ST_TO_ADDR
// for i = 1 to list do
5805: LD_ADDR_VAR 0 5
5809: PUSH
5810: DOUBLE
5811: LD_INT 1
5813: DEC
5814: ST_TO_ADDR
5815: LD_VAR 0 3
5819: PUSH
5820: FOR_TO
5821: IFFALSE 5959
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5823: LD_ADDR_VAR 0 7
5827: PUSH
5828: LD_VAR 0 1
5832: PPUSH
5833: LD_VAR 0 2
5837: PPUSH
5838: LD_VAR 0 3
5842: PUSH
5843: LD_VAR 0 5
5847: ARRAY
5848: PUSH
5849: LD_INT 1
5851: ARRAY
5852: PPUSH
5853: LD_VAR 0 3
5857: PUSH
5858: LD_VAR 0 5
5862: ARRAY
5863: PUSH
5864: LD_INT 2
5866: ARRAY
5867: PPUSH
5868: CALL_OW 298
5872: ST_TO_ADDR
// if d = 0 then
5873: LD_VAR 0 7
5877: PUSH
5878: LD_INT 0
5880: EQUAL
5881: IFFALSE 5885
// continue ;
5883: GO 5820
// if d < dist then
5885: LD_VAR 0 7
5889: PUSH
5890: LD_VAR 0 6
5894: LESS
5895: IFFALSE 5957
// begin _x := list [ i ] [ 1 ] ;
5897: LD_ADDR_VAR 0 8
5901: PUSH
5902: LD_VAR 0 3
5906: PUSH
5907: LD_VAR 0 5
5911: ARRAY
5912: PUSH
5913: LD_INT 1
5915: ARRAY
5916: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5917: LD_ADDR_VAR 0 9
5921: PUSH
5922: LD_VAR 0 3
5926: PUSH
5927: LD_VAR 0 5
5931: ARRAY
5932: PUSH
5933: LD_INT 2
5935: ARRAY
5936: ST_TO_ADDR
// _i := i ;
5937: LD_ADDR_VAR 0 10
5941: PUSH
5942: LD_VAR 0 5
5946: ST_TO_ADDR
// dist := d ;
5947: LD_ADDR_VAR 0 6
5951: PUSH
5952: LD_VAR 0 7
5956: ST_TO_ADDR
// end ; end ;
5957: GO 5820
5959: POP
5960: POP
// result := [ _x , _y , _i , dist ] ;
5961: LD_ADDR_VAR 0 4
5965: PUSH
5966: LD_VAR 0 8
5970: PUSH
5971: LD_VAR 0 9
5975: PUSH
5976: LD_VAR 0 10
5980: PUSH
5981: LD_VAR 0 6
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: ST_TO_ADDR
// end ;
5992: LD_VAR 0 4
5996: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5997: LD_INT 0
5999: PPUSH
6000: PPUSH
6001: PPUSH
6002: PPUSH
// for i = 1 to 72 do
6003: LD_ADDR_VAR 0 5
6007: PUSH
6008: DOUBLE
6009: LD_INT 1
6011: DEC
6012: ST_TO_ADDR
6013: LD_INT 72
6015: PUSH
6016: FOR_TO
6017: IFFALSE 6075
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
6019: LD_VAR 0 5
6023: PPUSH
6024: LD_VAR 0 1
6028: PPUSH
6029: CALL_OW 321
6033: PUSH
6034: LD_INT 1
6036: EQUAL
6037: PUSH
6038: LD_VAR 0 5
6042: PPUSH
6043: LD_VAR 0 3
6047: PPUSH
6048: CALL_OW 482
6052: PUSH
6053: LD_INT 1
6055: EQUAL
6056: AND
6057: IFFALSE 6073
// AddComResearch ( lab , i ) ;
6059: LD_VAR 0 2
6063: PPUSH
6064: LD_VAR 0 5
6068: PPUSH
6069: CALL_OW 184
6073: GO 6016
6075: POP
6076: POP
// end ;
6077: LD_VAR 0 4
6081: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
6082: LD_INT 0
6084: PPUSH
6085: PPUSH
6086: PPUSH
6087: PPUSH
6088: PPUSH
6089: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6090: LD_ADDR_VAR 0 7
6094: PUSH
6095: LD_VAR 0 2
6099: PPUSH
6100: CALL_OW 313
6104: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6105: LD_ADDR_VAR 0 8
6109: PUSH
6110: LD_VAR 0 3
6114: PPUSH
6115: LD_INT 22
6117: PUSH
6118: LD_VAR 0 1
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PUSH
6127: LD_INT 25
6129: PUSH
6130: LD_INT 2
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 24
6139: PUSH
6140: LD_INT 750
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: LD_INT 3
6149: PUSH
6150: LD_INT 54
6152: PUSH
6153: EMPTY
6154: LIST
6155: PUSH
6156: EMPTY
6157: LIST
6158: LIST
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: PPUSH
6166: CALL_OW 70
6170: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6171: LD_ADDR_VAR 0 5
6175: PUSH
6176: LD_VAR 0 3
6180: PPUSH
6181: LD_INT 22
6183: PUSH
6184: LD_VAR 0 1
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PUSH
6193: LD_INT 21
6195: PUSH
6196: LD_INT 3
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: LD_INT 3
6205: PUSH
6206: LD_INT 24
6208: PUSH
6209: LD_INT 1000
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: LIST
6224: PUSH
6225: EMPTY
6226: LIST
6227: PPUSH
6228: CALL_OW 70
6232: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6233: LD_VAR 0 5
6237: NOT
6238: PUSH
6239: LD_INT 22
6241: PUSH
6242: LD_VAR 0 1
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 25
6253: PUSH
6254: LD_INT 2
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 24
6263: PUSH
6264: LD_INT 250
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: LIST
6275: PPUSH
6276: CALL_OW 69
6280: NOT
6281: AND
6282: IFFALSE 6286
// exit ;
6284: GO 6398
// if buildings_list > 0 and engineerOkInside then
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 0
6293: GREATER
6294: PUSH
6295: LD_VAR 0 7
6299: AND
6300: IFFALSE 6326
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6302: LD_VAR 0 7
6306: PPUSH
6307: LD_INT 25
6309: PUSH
6310: LD_INT 2
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: PPUSH
6317: CALL_OW 72
6321: PPUSH
6322: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
6326: LD_VAR 0 5
6330: PUSH
6331: LD_INT 0
6333: GREATER
6334: PUSH
6335: LD_VAR 0 8
6339: PUSH
6340: LD_INT 0
6342: GREATER
6343: AND
6344: IFFALSE 6364
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
6346: LD_VAR 0 8
6350: PPUSH
6351: LD_VAR 0 5
6355: PUSH
6356: LD_INT 1
6358: ARRAY
6359: PPUSH
6360: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
6364: LD_VAR 0 5
6368: PUSH
6369: LD_INT 0
6371: EQUAL
6372: PUSH
6373: LD_VAR 0 8
6377: PUSH
6378: LD_INT 0
6380: GREATER
6381: AND
6382: IFFALSE 6398
// ComEnterUnit ( engineerOkOutside , building ) ;
6384: LD_VAR 0 8
6388: PPUSH
6389: LD_VAR 0 2
6393: PPUSH
6394: CALL_OW 120
// end ;
6398: LD_VAR 0 4
6402: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
6403: LD_INT 0
6405: PPUSH
6406: PPUSH
6407: PPUSH
6408: PPUSH
6409: PPUSH
6410: PPUSH
6411: PPUSH
6412: PPUSH
6413: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6414: LD_ADDR_VAR 0 6
6418: PUSH
6419: LD_INT 22
6421: PUSH
6422: LD_VAR 0 1
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 25
6433: PUSH
6434: LD_INT 4
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 23
6443: PUSH
6444: LD_INT 2
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 24
6453: PUSH
6454: LD_INT 251
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: PPUSH
6467: CALL_OW 69
6471: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6472: LD_ADDR_VAR 0 7
6476: PUSH
6477: LD_VAR 0 3
6481: PPUSH
6482: LD_INT 22
6484: PUSH
6485: LD_VAR 0 1
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PUSH
6494: LD_INT 23
6496: PUSH
6497: LD_INT 2
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: PUSH
6504: LD_INT 25
6506: PUSH
6507: LD_INT 4
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 50
6516: PUSH
6517: EMPTY
6518: LIST
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: PPUSH
6526: CALL_OW 70
6530: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6531: LD_ADDR_VAR 0 10
6535: PUSH
6536: LD_VAR 0 3
6540: PPUSH
6541: LD_INT 22
6543: PUSH
6544: LD_VAR 0 1
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PUSH
6553: LD_INT 21
6555: PUSH
6556: LD_INT 1
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: PUSH
6563: LD_INT 3
6565: PUSH
6566: LD_INT 25
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 3
6582: PUSH
6583: LD_INT 24
6585: PUSH
6586: LD_INT 750
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: PPUSH
6603: CALL_OW 70
6607: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6608: LD_ADDR_VAR 0 11
6612: PUSH
6613: LD_VAR 0 2
6617: PPUSH
6618: LD_INT 22
6620: PUSH
6621: LD_VAR 0 1
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PUSH
6630: LD_INT 21
6632: PUSH
6633: LD_INT 1
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: PUSH
6640: LD_INT 3
6642: PUSH
6643: LD_INT 25
6645: PUSH
6646: LD_INT 3
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 24
6662: PUSH
6663: LD_INT 1000
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: PPUSH
6680: CALL_OW 70
6684: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6685: LD_VAR 0 10
6689: NOT
6690: PUSH
6691: LD_VAR 0 11
6695: NOT
6696: AND
6697: PUSH
6698: LD_VAR 0 6
6702: NOT
6703: AND
6704: IFFALSE 6708
// exit ;
6706: GO 6942
// if damageUnits > 0 and sci_list > 0 then
6708: LD_VAR 0 10
6712: PUSH
6713: LD_INT 0
6715: GREATER
6716: PUSH
6717: LD_VAR 0 6
6721: PUSH
6722: LD_INT 0
6724: GREATER
6725: AND
6726: IFFALSE 6742
// ComMoveToArea ( damageUnits , healArea ) ;
6728: LD_VAR 0 10
6732: PPUSH
6733: LD_VAR 0 2
6737: PPUSH
6738: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6742: LD_VAR 0 11
6746: PUSH
6747: LD_INT 0
6749: GREATER
6750: PUSH
6751: LD_VAR 0 6
6755: PUSH
6756: LD_INT 0
6758: GREATER
6759: AND
6760: IFFALSE 6771
// ComExitBuilding ( sci_list ) ;
6762: LD_VAR 0 6
6766: PPUSH
6767: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6771: LD_VAR 0 11
6775: PUSH
6776: LD_INT 0
6778: GREATER
6779: PUSH
6780: LD_VAR 0 7
6784: PUSH
6785: LD_INT 0
6787: GREATER
6788: AND
6789: IFFALSE 6809
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6791: LD_VAR 0 7
6795: PPUSH
6796: LD_VAR 0 11
6800: PUSH
6801: LD_INT 1
6803: ARRAY
6804: PPUSH
6805: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6809: LD_VAR 0 10
6813: PUSH
6814: LD_INT 0
6816: EQUAL
6817: PUSH
6818: LD_VAR 0 11
6822: PUSH
6823: LD_INT 0
6825: EQUAL
6826: AND
6827: PUSH
6828: LD_VAR 0 7
6832: PUSH
6833: LD_INT 0
6835: GREATER
6836: AND
6837: IFFALSE 6942
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6839: LD_ADDR_VAR 0 12
6843: PUSH
6844: LD_INT 22
6846: PUSH
6847: LD_VAR 0 1
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 21
6858: PUSH
6859: LD_INT 3
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 30
6868: PUSH
6869: LD_INT 8
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 69
6885: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6886: LD_ADDR_VAR 0 13
6890: PUSH
6891: LD_INT 1
6893: PPUSH
6894: LD_VAR 0 12
6898: PPUSH
6899: CALL_OW 12
6903: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6904: LD_VAR 0 7
6908: PPUSH
6909: LD_INT 3
6911: PUSH
6912: LD_INT 60
6914: PUSH
6915: EMPTY
6916: LIST
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PPUSH
6922: CALL_OW 72
6926: PPUSH
6927: LD_VAR 0 12
6931: PUSH
6932: LD_VAR 0 13
6936: ARRAY
6937: PPUSH
6938: CALL_OW 120
// end ; end ;
6942: LD_VAR 0 5
6946: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6947: LD_INT 0
6949: PPUSH
6950: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6951: LD_INT 22
6953: PUSH
6954: LD_VAR 0 1
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 21
6965: PUSH
6966: LD_INT 2
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PPUSH
6977: CALL_OW 69
6981: PUSH
6982: LD_VAR 0 3
6986: LESSEQUAL
6987: IFFALSE 7054
// for i = 1 to vehCount do
6989: LD_ADDR_VAR 0 9
6993: PUSH
6994: DOUBLE
6995: LD_INT 1
6997: DEC
6998: ST_TO_ADDR
6999: LD_VAR 0 3
7003: PUSH
7004: FOR_TO
7005: IFFALSE 7052
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
7007: LD_VAR 0 2
7011: PPUSH
7012: LD_VAR 0 7
7016: PPUSH
7017: LD_VAR 0 5
7021: PPUSH
7022: LD_VAR 0 6
7026: PPUSH
7027: LD_VAR 0 4
7031: PUSH
7032: LD_INT 1
7034: PPUSH
7035: LD_VAR 0 4
7039: PPUSH
7040: CALL_OW 12
7044: ARRAY
7045: PPUSH
7046: CALL_OW 185
7050: GO 7004
7052: POP
7053: POP
// end ;
7054: LD_VAR 0 8
7058: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7059: LD_INT 0
7061: PPUSH
7062: PPUSH
7063: PPUSH
7064: PPUSH
7065: PPUSH
7066: PPUSH
7067: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7068: LD_ADDR_VAR 0 8
7072: PUSH
7073: LD_INT 22
7075: PUSH
7076: LD_VAR 0 1
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: LD_INT 21
7087: PUSH
7088: LD_INT 2
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: LD_INT 3
7097: PUSH
7098: LD_INT 34
7100: PUSH
7101: LD_INT 51
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: LD_INT 34
7110: PUSH
7111: LD_INT 53
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: LD_INT 34
7120: PUSH
7121: LD_INT 52
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 24
7136: PUSH
7137: LD_INT 650
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: PPUSH
7150: CALL_OW 69
7154: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
7155: LD_INT 22
7157: PUSH
7158: LD_VAR 0 1
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 21
7169: PUSH
7170: LD_INT 2
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 24
7179: PUSH
7180: LD_INT 1000
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: LIST
7191: PPUSH
7192: CALL_OW 69
7196: PUSH
7197: LD_INT 3
7199: PUSH
7200: LD_INT 4
7202: PUSH
7203: LD_INT 5
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: LIST
7210: PUSH
7211: LD_OWVAR 67
7215: ARRAY
7216: GREATEREQUAL
7217: IFFALSE 7714
// repeat wait ( 0 0$1 ) ;
7219: LD_INT 35
7221: PPUSH
7222: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7226: LD_ADDR_VAR 0 8
7230: PUSH
7231: LD_INT 22
7233: PUSH
7234: LD_VAR 0 1
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 21
7245: PUSH
7246: LD_INT 2
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 3
7255: PUSH
7256: LD_INT 34
7258: PUSH
7259: LD_INT 51
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 34
7268: PUSH
7269: LD_INT 53
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: LD_INT 34
7278: PUSH
7279: LD_INT 52
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: PUSH
7292: LD_INT 24
7294: PUSH
7295: LD_INT 650
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: PPUSH
7308: CALL_OW 69
7312: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7313: LD_INT 22
7315: PUSH
7316: LD_VAR 0 1
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PUSH
7325: LD_INT 95
7327: PUSH
7328: LD_VAR 0 2
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PPUSH
7341: CALL_OW 69
7345: NOT
7346: PUSH
7347: LD_VAR 0 11
7351: PUSH
7352: LD_INT 0
7354: EQUAL
7355: AND
7356: IFFALSE 7411
// for i := 1 to wayX do
7358: LD_ADDR_VAR 0 6
7362: PUSH
7363: DOUBLE
7364: LD_INT 1
7366: DEC
7367: ST_TO_ADDR
7368: LD_VAR 0 3
7372: PUSH
7373: FOR_TO
7374: IFFALSE 7409
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7376: LD_VAR 0 8
7380: PPUSH
7381: LD_VAR 0 3
7385: PUSH
7386: LD_VAR 0 6
7390: ARRAY
7391: PPUSH
7392: LD_VAR 0 4
7396: PUSH
7397: LD_VAR 0 6
7401: ARRAY
7402: PPUSH
7403: CALL_OW 174
7407: GO 7373
7409: POP
7410: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
7411: LD_INT 22
7413: PUSH
7414: LD_VAR 0 1
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: LD_INT 95
7425: PUSH
7426: LD_VAR 0 2
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PPUSH
7439: CALL_OW 69
7443: IFFALSE 7667
// begin seeEnemy = 1 ;
7445: LD_ADDR_VAR 0 11
7449: PUSH
7450: LD_INT 1
7452: ST_TO_ADDR
// for j in vehiclesOK do
7453: LD_ADDR_VAR 0 7
7457: PUSH
7458: LD_VAR 0 8
7462: PUSH
7463: FOR_IN
7464: IFFALSE 7665
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7466: LD_ADDR_VAR 0 9
7470: PUSH
7471: LD_INT 81
7473: PUSH
7474: LD_VAR 0 1
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 101
7485: PUSH
7486: LD_INT 1
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PPUSH
7497: CALL_OW 69
7501: PPUSH
7502: LD_VAR 0 7
7506: PPUSH
7507: CALL_OW 74
7511: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7512: LD_ADDR_VAR 0 10
7516: PUSH
7517: LD_INT 81
7519: PUSH
7520: LD_VAR 0 1
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 101
7531: PUSH
7532: LD_INT 1
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_INT 59
7544: PUSH
7545: EMPTY
7546: LIST
7547: PUSH
7548: LD_INT 21
7550: PUSH
7551: LD_INT 1
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 21
7560: PUSH
7561: LD_INT 2
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: LIST
7578: PUSH
7579: EMPTY
7580: LIST
7581: PPUSH
7582: CALL_OW 69
7586: PPUSH
7587: LD_VAR 0 7
7591: PPUSH
7592: CALL_OW 74
7596: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7597: LD_VAR 0 7
7601: PPUSH
7602: LD_VAR 0 9
7606: PPUSH
7607: CALL_OW 296
7611: PUSH
7612: LD_INT 8
7614: PLUS
7615: PUSH
7616: LD_VAR 0 7
7620: PPUSH
7621: LD_VAR 0 10
7625: PPUSH
7626: CALL_OW 296
7630: LESS
7631: IFFALSE 7649
// ComAttackUnit ( j , target1 ) else
7633: LD_VAR 0 7
7637: PPUSH
7638: LD_VAR 0 9
7642: PPUSH
7643: CALL_OW 115
7647: GO 7663
// ComAttackUnit ( j , target2 ) ;
7649: LD_VAR 0 7
7653: PPUSH
7654: LD_VAR 0 10
7658: PPUSH
7659: CALL_OW 115
// end ;
7663: GO 7463
7665: POP
7666: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7667: LD_INT 22
7669: PUSH
7670: LD_VAR 0 1
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 21
7681: PUSH
7682: LD_INT 2
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PUSH
7689: LD_INT 24
7691: PUSH
7692: LD_INT 1000
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: LIST
7703: PPUSH
7704: CALL_OW 69
7708: PUSH
7709: LD_INT 0
7711: EQUAL
7712: IFFALSE 7219
// seeEnemy = 0 ;
7714: LD_ADDR_VAR 0 11
7718: PUSH
7719: LD_INT 0
7721: ST_TO_ADDR
// end ;
7722: LD_VAR 0 5
7726: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7727: LD_INT 0
7729: PPUSH
7730: PPUSH
7731: PPUSH
7732: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7733: LD_ADDR_VAR 0 8
7737: PUSH
7738: LD_INT 22
7740: PUSH
7741: LD_VAR 0 1
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PUSH
7750: LD_INT 21
7752: PUSH
7753: LD_INT 2
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 3
7762: PUSH
7763: LD_INT 34
7765: PUSH
7766: LD_INT 51
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 34
7775: PUSH
7776: LD_INT 53
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 34
7785: PUSH
7786: LD_INT 52
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: PUSH
7799: LD_INT 3
7801: PUSH
7802: LD_INT 24
7804: PUSH
7805: LD_INT 650
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: PPUSH
7822: CALL_OW 69
7826: ST_TO_ADDR
// if damageVehicles > 0 then
7827: LD_VAR 0 8
7831: PUSH
7832: LD_INT 0
7834: GREATER
7835: IFFALSE 7856
// ComMoveXY ( damageVehicles , repX , repY ) ;
7837: LD_VAR 0 8
7841: PPUSH
7842: LD_VAR 0 3
7846: PPUSH
7847: LD_VAR 0 4
7851: PPUSH
7852: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7856: LD_VAR 0 8
7860: PPUSH
7861: LD_INT 95
7863: PUSH
7864: LD_VAR 0 2
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PUSH
7873: LD_INT 3
7875: PUSH
7876: LD_INT 58
7878: PUSH
7879: EMPTY
7880: LIST
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PPUSH
7890: CALL_OW 72
7894: PUSH
7895: LD_INT 0
7897: GREATER
7898: IFFALSE 7965
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7900: LD_ADDR_VAR 0 6
7904: PUSH
7905: LD_VAR 0 8
7909: PPUSH
7910: LD_INT 95
7912: PUSH
7913: LD_VAR 0 2
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 3
7924: PUSH
7925: LD_INT 58
7927: PUSH
7928: EMPTY
7929: LIST
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PPUSH
7939: CALL_OW 72
7943: PUSH
7944: FOR_IN
7945: IFFALSE 7963
// ComExitVehicle ( UnitsInside ( i ) ) ;
7947: LD_VAR 0 6
7951: PPUSH
7952: CALL_OW 313
7956: PPUSH
7957: CALL_OW 121
7961: GO 7944
7963: POP
7964: POP
// end ;
7965: LD_VAR 0 5
7969: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7970: LD_INT 0
7972: PPUSH
7973: PPUSH
7974: PPUSH
7975: PPUSH
7976: PPUSH
7977: PPUSH
7978: PPUSH
7979: PPUSH
7980: PPUSH
7981: PPUSH
7982: PPUSH
// for i = 1 to medicCount do
7983: LD_ADDR_VAR 0 14
7987: PUSH
7988: DOUBLE
7989: LD_INT 1
7991: DEC
7992: ST_TO_ADDR
7993: LD_VAR 0 7
7997: PUSH
7998: FOR_TO
7999: IFFALSE 8081
// begin uc_side = side ;
8001: LD_ADDR_OWVAR 20
8005: PUSH
8006: LD_VAR 0 1
8010: ST_TO_ADDR
// uc_nation = nation ;
8011: LD_ADDR_OWVAR 21
8015: PUSH
8016: LD_VAR 0 2
8020: ST_TO_ADDR
// hc_name =  ;
8021: LD_ADDR_OWVAR 26
8025: PUSH
8026: LD_STRING 
8028: ST_TO_ADDR
// hc_gallery =  ;
8029: LD_ADDR_OWVAR 33
8033: PUSH
8034: LD_STRING 
8036: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8037: LD_INT 0
8039: PPUSH
8040: LD_INT 4
8042: PPUSH
8043: LD_VAR 0 8
8047: PPUSH
8048: CALL_OW 380
// un = CreateHuman ;
8052: LD_ADDR_VAR 0 16
8056: PUSH
8057: CALL_OW 44
8061: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8062: LD_VAR 0 16
8066: PPUSH
8067: LD_VAR 0 9
8071: PPUSH
8072: LD_INT 0
8074: PPUSH
8075: CALL_OW 49
// end ;
8079: GO 7998
8081: POP
8082: POP
// for i = 1 to soldierCount do
8083: LD_ADDR_VAR 0 14
8087: PUSH
8088: DOUBLE
8089: LD_INT 1
8091: DEC
8092: ST_TO_ADDR
8093: LD_VAR 0 3
8097: PUSH
8098: FOR_TO
8099: IFFALSE 8181
// begin uc_side = side ;
8101: LD_ADDR_OWVAR 20
8105: PUSH
8106: LD_VAR 0 1
8110: ST_TO_ADDR
// uc_nation = nation ;
8111: LD_ADDR_OWVAR 21
8115: PUSH
8116: LD_VAR 0 2
8120: ST_TO_ADDR
// hc_name =  ;
8121: LD_ADDR_OWVAR 26
8125: PUSH
8126: LD_STRING 
8128: ST_TO_ADDR
// hc_gallery =  ;
8129: LD_ADDR_OWVAR 33
8133: PUSH
8134: LD_STRING 
8136: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8137: LD_INT 0
8139: PPUSH
8140: LD_INT 1
8142: PPUSH
8143: LD_VAR 0 8
8147: PPUSH
8148: CALL_OW 380
// un = CreateHuman ;
8152: LD_ADDR_VAR 0 16
8156: PUSH
8157: CALL_OW 44
8161: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8162: LD_VAR 0 16
8166: PPUSH
8167: LD_VAR 0 9
8171: PPUSH
8172: LD_INT 0
8174: PPUSH
8175: CALL_OW 49
// end ;
8179: GO 8098
8181: POP
8182: POP
// for i = 1 to sniperCount do
8183: LD_ADDR_VAR 0 14
8187: PUSH
8188: DOUBLE
8189: LD_INT 1
8191: DEC
8192: ST_TO_ADDR
8193: LD_VAR 0 4
8197: PUSH
8198: FOR_TO
8199: IFFALSE 8281
// begin uc_side = side ;
8201: LD_ADDR_OWVAR 20
8205: PUSH
8206: LD_VAR 0 1
8210: ST_TO_ADDR
// uc_nation = nation ;
8211: LD_ADDR_OWVAR 21
8215: PUSH
8216: LD_VAR 0 2
8220: ST_TO_ADDR
// hc_name =  ;
8221: LD_ADDR_OWVAR 26
8225: PUSH
8226: LD_STRING 
8228: ST_TO_ADDR
// hc_gallery =  ;
8229: LD_ADDR_OWVAR 33
8233: PUSH
8234: LD_STRING 
8236: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8237: LD_INT 0
8239: PPUSH
8240: LD_INT 5
8242: PPUSH
8243: LD_VAR 0 8
8247: PPUSH
8248: CALL_OW 380
// un = CreateHuman ;
8252: LD_ADDR_VAR 0 16
8256: PUSH
8257: CALL_OW 44
8261: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8262: LD_VAR 0 16
8266: PPUSH
8267: LD_VAR 0 9
8271: PPUSH
8272: LD_INT 0
8274: PPUSH
8275: CALL_OW 49
// end ;
8279: GO 8198
8281: POP
8282: POP
// for i = 1 to bazookCount do
8283: LD_ADDR_VAR 0 14
8287: PUSH
8288: DOUBLE
8289: LD_INT 1
8291: DEC
8292: ST_TO_ADDR
8293: LD_VAR 0 5
8297: PUSH
8298: FOR_TO
8299: IFFALSE 8381
// begin uc_side = side ;
8301: LD_ADDR_OWVAR 20
8305: PUSH
8306: LD_VAR 0 1
8310: ST_TO_ADDR
// uc_nation = nation ;
8311: LD_ADDR_OWVAR 21
8315: PUSH
8316: LD_VAR 0 2
8320: ST_TO_ADDR
// hc_name =  ;
8321: LD_ADDR_OWVAR 26
8325: PUSH
8326: LD_STRING 
8328: ST_TO_ADDR
// hc_gallery =  ;
8329: LD_ADDR_OWVAR 33
8333: PUSH
8334: LD_STRING 
8336: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8337: LD_INT 0
8339: PPUSH
8340: LD_INT 9
8342: PPUSH
8343: LD_VAR 0 8
8347: PPUSH
8348: CALL_OW 380
// un = CreateHuman ;
8352: LD_ADDR_VAR 0 16
8356: PUSH
8357: CALL_OW 44
8361: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8362: LD_VAR 0 16
8366: PPUSH
8367: LD_VAR 0 9
8371: PPUSH
8372: LD_INT 0
8374: PPUSH
8375: CALL_OW 49
// end ;
8379: GO 8298
8381: POP
8382: POP
// for i = 1 to mortalCount do
8383: LD_ADDR_VAR 0 14
8387: PUSH
8388: DOUBLE
8389: LD_INT 1
8391: DEC
8392: ST_TO_ADDR
8393: LD_VAR 0 6
8397: PUSH
8398: FOR_TO
8399: IFFALSE 8481
// begin uc_side = side ;
8401: LD_ADDR_OWVAR 20
8405: PUSH
8406: LD_VAR 0 1
8410: ST_TO_ADDR
// uc_nation = nation ;
8411: LD_ADDR_OWVAR 21
8415: PUSH
8416: LD_VAR 0 2
8420: ST_TO_ADDR
// hc_name =  ;
8421: LD_ADDR_OWVAR 26
8425: PUSH
8426: LD_STRING 
8428: ST_TO_ADDR
// hc_gallery =  ;
8429: LD_ADDR_OWVAR 33
8433: PUSH
8434: LD_STRING 
8436: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8437: LD_INT 0
8439: PPUSH
8440: LD_INT 8
8442: PPUSH
8443: LD_VAR 0 8
8447: PPUSH
8448: CALL_OW 380
// un = CreateHuman ;
8452: LD_ADDR_VAR 0 16
8456: PUSH
8457: CALL_OW 44
8461: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8462: LD_VAR 0 16
8466: PPUSH
8467: LD_VAR 0 9
8471: PPUSH
8472: LD_INT 0
8474: PPUSH
8475: CALL_OW 49
// end ;
8479: GO 8398
8481: POP
8482: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8483: LD_ADDR_VAR 0 19
8487: PUSH
8488: LD_INT 22
8490: PUSH
8491: LD_VAR 0 1
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PUSH
8500: LD_INT 2
8502: PUSH
8503: LD_INT 25
8505: PUSH
8506: LD_INT 1
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PUSH
8513: LD_INT 25
8515: PUSH
8516: LD_INT 5
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: LD_INT 25
8525: PUSH
8526: LD_INT 8
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 25
8535: PUSH
8536: LD_INT 9
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: PPUSH
8554: CALL_OW 69
8558: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8559: LD_ADDR_VAR 0 18
8563: PUSH
8564: LD_INT 22
8566: PUSH
8567: LD_VAR 0 1
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 25
8578: PUSH
8579: LD_INT 4
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PPUSH
8590: CALL_OW 69
8594: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8595: LD_VAR 0 18
8599: PPUSH
8600: LD_VAR 0 10
8604: PPUSH
8605: CALL_OW 113
// if strategy = 1 then
8609: LD_VAR 0 12
8613: PUSH
8614: LD_INT 1
8616: EQUAL
8617: IFFALSE 9108
// begin for i in soldiersOK_list do
8619: LD_ADDR_VAR 0 14
8623: PUSH
8624: LD_VAR 0 19
8628: PUSH
8629: FOR_IN
8630: IFFALSE 8694
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8632: LD_VAR 0 14
8636: PPUSH
8637: LD_INT 91
8639: PPUSH
8640: LD_INT 63
8642: PPUSH
8643: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8647: LD_VAR 0 14
8651: PPUSH
8652: LD_INT 101
8654: PPUSH
8655: LD_INT 53
8657: PPUSH
8658: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8662: LD_VAR 0 14
8666: PPUSH
8667: LD_INT 75
8669: PPUSH
8670: LD_INT 23
8672: PPUSH
8673: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8677: LD_VAR 0 14
8681: PPUSH
8682: LD_INT 78
8684: PPUSH
8685: LD_INT 8
8687: PPUSH
8688: CALL_OW 174
// end ;
8692: GO 8629
8694: POP
8695: POP
// wait ( 0 0$30 ) ;
8696: LD_INT 1050
8698: PPUSH
8699: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8703: LD_INT 35
8705: PPUSH
8706: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8710: LD_ADDR_VAR 0 17
8714: PUSH
8715: LD_INT 22
8717: PUSH
8718: LD_VAR 0 1
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: LD_INT 1
8729: PUSH
8730: LD_INT 3
8732: PUSH
8733: LD_INT 24
8735: PUSH
8736: LD_INT 550
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PUSH
8747: LD_INT 24
8749: PUSH
8750: LD_INT 250
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: LIST
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PPUSH
8766: CALL_OW 69
8770: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8771: LD_ADDR_VAR 0 19
8775: PUSH
8776: LD_INT 22
8778: PUSH
8779: LD_VAR 0 1
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PUSH
8788: LD_INT 2
8790: PUSH
8791: LD_INT 25
8793: PUSH
8794: LD_INT 1
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: LD_INT 25
8803: PUSH
8804: LD_INT 5
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PUSH
8811: LD_INT 25
8813: PUSH
8814: LD_INT 8
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: PUSH
8821: LD_INT 25
8823: PUSH
8824: LD_INT 9
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: PUSH
8838: LD_INT 24
8840: PUSH
8841: LD_INT 1000
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 69
8857: ST_TO_ADDR
// if medicCount > 0 then
8858: LD_VAR 0 7
8862: PUSH
8863: LD_INT 0
8865: GREATER
8866: IFFALSE 8910
// begin if damageUnit_list > 0 then
8868: LD_VAR 0 17
8872: PUSH
8873: LD_INT 0
8875: GREATER
8876: IFFALSE 8910
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8878: LD_VAR 0 17
8882: PPUSH
8883: LD_VAR 0 10
8887: PPUSH
8888: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8892: LD_VAR 0 7
8896: PPUSH
8897: LD_VAR 0 17
8901: PUSH
8902: LD_INT 1
8904: ARRAY
8905: PPUSH
8906: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8910: LD_ADDR_VAR 0 14
8914: PUSH
8915: LD_VAR 0 19
8919: PUSH
8920: FOR_IN
8921: IFFALSE 9097
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8923: LD_ADDR_VAR 0 22
8927: PUSH
8928: LD_INT 22
8930: PUSH
8931: LD_VAR 0 11
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PPUSH
8940: CALL_OW 69
8944: PPUSH
8945: LD_VAR 0 14
8949: PPUSH
8950: CALL_OW 74
8954: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8955: LD_ADDR_VAR 0 23
8959: PUSH
8960: LD_INT 22
8962: PUSH
8963: LD_VAR 0 11
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: PUSH
8972: LD_INT 2
8974: PUSH
8975: LD_INT 59
8977: PUSH
8978: EMPTY
8979: LIST
8980: PUSH
8981: LD_INT 21
8983: PUSH
8984: LD_INT 1
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PUSH
8991: LD_INT 21
8993: PUSH
8994: LD_INT 2
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: PUSH
9011: EMPTY
9012: LIST
9013: PPUSH
9014: CALL_OW 69
9018: PPUSH
9019: LD_VAR 0 14
9023: PPUSH
9024: CALL_OW 74
9028: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9029: LD_VAR 0 14
9033: PPUSH
9034: LD_VAR 0 22
9038: PPUSH
9039: CALL_OW 296
9043: PUSH
9044: LD_INT 8
9046: PLUS
9047: PUSH
9048: LD_VAR 0 14
9052: PPUSH
9053: LD_VAR 0 23
9057: PPUSH
9058: CALL_OW 296
9062: LESS
9063: IFFALSE 9081
// begin ComAttackUnit ( i , target1 ) ;
9065: LD_VAR 0 14
9069: PPUSH
9070: LD_VAR 0 22
9074: PPUSH
9075: CALL_OW 115
// end else
9079: GO 9095
// begin ComAttackUnit ( i , target2 ) ;
9081: LD_VAR 0 14
9085: PPUSH
9086: LD_VAR 0 23
9090: PPUSH
9091: CALL_OW 115
// end ; end ;
9095: GO 8920
9097: POP
9098: POP
// until soldiersOK_list = [ ] ;
9099: LD_VAR 0 19
9103: PUSH
9104: EMPTY
9105: EQUAL
9106: IFFALSE 8703
// end ; if strategy = 2 then
9108: LD_VAR 0 12
9112: PUSH
9113: LD_INT 2
9115: EQUAL
9116: IFFALSE 9570
// begin for i in soldiersOK_list do
9118: LD_ADDR_VAR 0 14
9122: PUSH
9123: LD_VAR 0 19
9127: PUSH
9128: FOR_IN
9129: IFFALSE 9163
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
9131: LD_VAR 0 14
9135: PPUSH
9136: LD_INT 91
9138: PPUSH
9139: LD_INT 63
9141: PPUSH
9142: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
9146: LD_VAR 0 14
9150: PPUSH
9151: LD_INT 75
9153: PPUSH
9154: LD_INT 33
9156: PPUSH
9157: CALL_OW 174
// end ;
9161: GO 9128
9163: POP
9164: POP
// repeat wait ( 0 0$3 ) ;
9165: LD_INT 105
9167: PPUSH
9168: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9172: LD_ADDR_VAR 0 17
9176: PUSH
9177: LD_INT 22
9179: PUSH
9180: LD_VAR 0 1
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: LD_INT 1
9191: PUSH
9192: LD_INT 3
9194: PUSH
9195: LD_INT 24
9197: PUSH
9198: LD_INT 550
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PUSH
9209: LD_INT 24
9211: PUSH
9212: LD_INT 250
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: LIST
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: PPUSH
9228: CALL_OW 69
9232: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9233: LD_ADDR_VAR 0 19
9237: PUSH
9238: LD_INT 22
9240: PUSH
9241: LD_VAR 0 1
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: LD_INT 2
9252: PUSH
9253: LD_INT 25
9255: PUSH
9256: LD_INT 1
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PUSH
9263: LD_INT 25
9265: PUSH
9266: LD_INT 5
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PUSH
9273: LD_INT 25
9275: PUSH
9276: LD_INT 8
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: LD_INT 25
9285: PUSH
9286: LD_INT 9
9288: PUSH
9289: EMPTY
9290: LIST
9291: LIST
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 24
9302: PUSH
9303: LD_INT 1000
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: LIST
9314: PPUSH
9315: CALL_OW 69
9319: ST_TO_ADDR
// if medicCount > 0 then
9320: LD_VAR 0 7
9324: PUSH
9325: LD_INT 0
9327: GREATER
9328: IFFALSE 9372
// begin if damageUnit_list > 0 then
9330: LD_VAR 0 17
9334: PUSH
9335: LD_INT 0
9337: GREATER
9338: IFFALSE 9372
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
9340: LD_VAR 0 17
9344: PPUSH
9345: LD_VAR 0 10
9349: PPUSH
9350: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
9354: LD_VAR 0 7
9358: PPUSH
9359: LD_VAR 0 17
9363: PUSH
9364: LD_INT 1
9366: ARRAY
9367: PPUSH
9368: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
9372: LD_ADDR_VAR 0 14
9376: PUSH
9377: LD_VAR 0 19
9381: PUSH
9382: FOR_IN
9383: IFFALSE 9559
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9385: LD_ADDR_VAR 0 22
9389: PUSH
9390: LD_INT 22
9392: PUSH
9393: LD_VAR 0 11
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PPUSH
9402: CALL_OW 69
9406: PPUSH
9407: LD_VAR 0 14
9411: PPUSH
9412: CALL_OW 74
9416: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9417: LD_ADDR_VAR 0 23
9421: PUSH
9422: LD_INT 22
9424: PUSH
9425: LD_VAR 0 11
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: LD_INT 2
9436: PUSH
9437: LD_INT 59
9439: PUSH
9440: EMPTY
9441: LIST
9442: PUSH
9443: LD_INT 21
9445: PUSH
9446: LD_INT 1
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: LD_INT 21
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: EMPTY
9474: LIST
9475: PPUSH
9476: CALL_OW 69
9480: PPUSH
9481: LD_VAR 0 14
9485: PPUSH
9486: CALL_OW 74
9490: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9491: LD_VAR 0 14
9495: PPUSH
9496: LD_VAR 0 22
9500: PPUSH
9501: CALL_OW 296
9505: PUSH
9506: LD_INT 8
9508: PLUS
9509: PUSH
9510: LD_VAR 0 14
9514: PPUSH
9515: LD_VAR 0 23
9519: PPUSH
9520: CALL_OW 296
9524: LESS
9525: IFFALSE 9543
// begin ComAttackUnit ( i , target1 ) ;
9527: LD_VAR 0 14
9531: PPUSH
9532: LD_VAR 0 22
9536: PPUSH
9537: CALL_OW 115
// end else
9541: GO 9557
// begin ComAttackUnit ( i , target2 ) ;
9543: LD_VAR 0 14
9547: PPUSH
9548: LD_VAR 0 23
9552: PPUSH
9553: CALL_OW 115
// end ; end ;
9557: GO 9382
9559: POP
9560: POP
// until soldiersOK_list = [ ] ;
9561: LD_VAR 0 19
9565: PUSH
9566: EMPTY
9567: EQUAL
9568: IFFALSE 9165
// end ; if not soldiersOK_list and medic_list then
9570: LD_VAR 0 19
9574: NOT
9575: PUSH
9576: LD_VAR 0 18
9580: AND
9581: IFFALSE 9721
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
9583: LD_ADDR_VAR 0 18
9587: PUSH
9588: LD_INT 22
9590: PUSH
9591: LD_VAR 0 1
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 25
9602: PUSH
9603: LD_INT 4
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 50
9612: PUSH
9613: EMPTY
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: PPUSH
9621: CALL_OW 69
9625: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9626: LD_INT 35
9628: PPUSH
9629: CALL_OW 67
// for i in medic_list do
9633: LD_ADDR_VAR 0 14
9637: PUSH
9638: LD_VAR 0 18
9642: PUSH
9643: FOR_IN
9644: IFFALSE 9712
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
9646: LD_VAR 0 14
9650: PPUSH
9651: CALL_OW 314
9655: NOT
9656: PUSH
9657: LD_VAR 0 14
9661: PPUSH
9662: LD_INT 4
9664: PPUSH
9665: CALL_OW 308
9669: NOT
9670: AND
9671: IFFALSE 9687
// ComMoveToArea ( i , RussianAttack ) else
9673: LD_VAR 0 14
9677: PPUSH
9678: LD_INT 4
9680: PPUSH
9681: CALL_OW 113
9685: GO 9710
// if IsInArea ( i , RussianAttack ) then
9687: LD_VAR 0 14
9691: PPUSH
9692: LD_INT 4
9694: PPUSH
9695: CALL_OW 308
9699: IFFALSE 9710
// RemoveUnit ( i ) ;
9701: LD_VAR 0 14
9705: PPUSH
9706: CALL_OW 64
9710: GO 9643
9712: POP
9713: POP
// until not medic_list ;
9714: LD_VAR 0 18
9718: NOT
9719: IFFALSE 9583
// end ; end ;
9721: LD_VAR 0 13
9725: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9726: LD_INT 0
9728: PPUSH
9729: PPUSH
9730: PPUSH
9731: PPUSH
9732: PPUSH
9733: PPUSH
9734: PPUSH
9735: PPUSH
9736: PPUSH
9737: PPUSH
9738: PPUSH
// amChassisTab = [ ] ;
9739: LD_ADDR_VAR 0 19
9743: PUSH
9744: EMPTY
9745: ST_TO_ADDR
// arChassisTab = [ ] ;
9746: LD_ADDR_VAR 0 18
9750: PUSH
9751: EMPTY
9752: ST_TO_ADDR
// ruChassisTab = [ ] ;
9753: LD_ADDR_VAR 0 17
9757: PUSH
9758: EMPTY
9759: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9760: LD_INT 35
9762: PPUSH
9763: CALL_OW 67
// if nation = 1 then
9767: LD_VAR 0 5
9771: PUSH
9772: LD_INT 1
9774: EQUAL
9775: IFFALSE 10266
// begin uc_side = side ;
9777: LD_ADDR_OWVAR 20
9781: PUSH
9782: LD_VAR 0 2
9786: ST_TO_ADDR
// uc_nation = nation ;
9787: LD_ADDR_OWVAR 21
9791: PUSH
9792: LD_VAR 0 5
9796: ST_TO_ADDR
// vc_engine = vehengine ;
9797: LD_ADDR_OWVAR 39
9801: PUSH
9802: LD_VAR 0 6
9806: ST_TO_ADDR
// vc_control = vehcontrol ;
9807: LD_ADDR_OWVAR 38
9811: PUSH
9812: LD_VAR 0 7
9816: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9817: LD_ADDR_OWVAR 40
9821: PUSH
9822: LD_VAR 0 10
9826: PUSH
9827: LD_INT 1
9829: PPUSH
9830: LD_VAR 0 10
9834: PPUSH
9835: CALL_OW 12
9839: ARRAY
9840: ST_TO_ADDR
// for j = 1 to AMWeapon do
9841: LD_ADDR_VAR 0 14
9845: PUSH
9846: DOUBLE
9847: LD_INT 1
9849: DEC
9850: ST_TO_ADDR
9851: LD_VAR 0 10
9855: PUSH
9856: FOR_TO
9857: IFFALSE 10158
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9859: LD_VAR 0 10
9863: PUSH
9864: LD_VAR 0 14
9868: ARRAY
9869: PUSH
9870: LD_INT 2
9872: EQUAL
9873: PUSH
9874: LD_VAR 0 10
9878: PUSH
9879: LD_VAR 0 14
9883: ARRAY
9884: PUSH
9885: LD_INT 3
9887: EQUAL
9888: OR
9889: IFFALSE 9942
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9891: LD_ADDR_VAR 0 19
9895: PUSH
9896: LD_INT 1
9898: PUSH
9899: LD_INT 2
9901: PUSH
9902: LD_INT 3
9904: PUSH
9905: LD_INT 4
9907: PUSH
9908: LD_INT 5
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9918: LD_ADDR_OWVAR 37
9922: PUSH
9923: LD_VAR 0 19
9927: PUSH
9928: LD_INT 1
9930: PPUSH
9931: LD_VAR 0 19
9935: PPUSH
9936: CALL_OW 12
9940: ARRAY
9941: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9942: LD_VAR 0 10
9946: PUSH
9947: LD_VAR 0 14
9951: ARRAY
9952: PUSH
9953: LD_INT 4
9955: EQUAL
9956: PUSH
9957: LD_VAR 0 10
9961: PUSH
9962: LD_VAR 0 14
9966: ARRAY
9967: PUSH
9968: LD_INT 5
9970: EQUAL
9971: OR
9972: PUSH
9973: LD_VAR 0 10
9977: PUSH
9978: LD_VAR 0 14
9982: ARRAY
9983: PUSH
9984: LD_INT 9
9986: EQUAL
9987: OR
9988: PUSH
9989: LD_VAR 0 10
9993: PUSH
9994: LD_VAR 0 14
9998: ARRAY
9999: PUSH
10000: LD_INT 11
10002: EQUAL
10003: OR
10004: PUSH
10005: LD_VAR 0 10
10009: PUSH
10010: LD_VAR 0 14
10014: ARRAY
10015: PUSH
10016: LD_INT 7
10018: EQUAL
10019: OR
10020: IFFALSE 10069
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
10022: LD_ADDR_VAR 0 19
10026: PUSH
10027: LD_INT 2
10029: PUSH
10030: LD_INT 3
10032: PUSH
10033: LD_INT 4
10035: PUSH
10036: LD_INT 5
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10045: LD_ADDR_OWVAR 37
10049: PUSH
10050: LD_VAR 0 19
10054: PUSH
10055: LD_INT 1
10057: PPUSH
10058: LD_VAR 0 19
10062: PPUSH
10063: CALL_OW 12
10067: ARRAY
10068: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
10069: LD_VAR 0 10
10073: PUSH
10074: LD_VAR 0 14
10078: ARRAY
10079: PUSH
10080: LD_INT 8
10082: EQUAL
10083: PUSH
10084: LD_VAR 0 10
10088: PUSH
10089: LD_VAR 0 14
10093: ARRAY
10094: PUSH
10095: LD_INT 6
10097: EQUAL
10098: OR
10099: PUSH
10100: LD_VAR 0 10
10104: PUSH
10105: LD_VAR 0 14
10109: ARRAY
10110: PUSH
10111: LD_INT 10
10113: EQUAL
10114: OR
10115: IFFALSE 10156
// begin amChassisTab = [ 4 , 5 ] ;
10117: LD_ADDR_VAR 0 19
10121: PUSH
10122: LD_INT 4
10124: PUSH
10125: LD_INT 5
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10132: LD_ADDR_OWVAR 37
10136: PUSH
10137: LD_VAR 0 19
10141: PUSH
10142: LD_INT 1
10144: PPUSH
10145: LD_VAR 0 19
10149: PPUSH
10150: CALL_OW 12
10154: ARRAY
10155: ST_TO_ADDR
// end ; end ;
10156: GO 9856
10158: POP
10159: POP
// veh = CreateVehicle ;
10160: LD_ADDR_VAR 0 16
10164: PUSH
10165: CALL_OW 45
10169: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10170: LD_VAR 0 16
10174: PPUSH
10175: LD_VAR 0 1
10179: PPUSH
10180: LD_INT 0
10182: PPUSH
10183: CALL_OW 49
// if vehControl = 1 then
10187: LD_VAR 0 7
10191: PUSH
10192: LD_INT 1
10194: EQUAL
10195: IFFALSE 10252
// begin hc_gallery =  ;
10197: LD_ADDR_OWVAR 33
10201: PUSH
10202: LD_STRING 
10204: ST_TO_ADDR
// hc_name =  ;
10205: LD_ADDR_OWVAR 26
10209: PUSH
10210: LD_STRING 
10212: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10213: LD_INT 0
10215: PPUSH
10216: LD_INT 3
10218: PPUSH
10219: LD_VAR 0 4
10223: PPUSH
10224: CALL_OW 380
// un = CreateHuman ;
10228: LD_ADDR_VAR 0 15
10232: PUSH
10233: CALL_OW 44
10237: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10238: LD_VAR 0 15
10242: PPUSH
10243: LD_VAR 0 16
10247: PPUSH
10248: CALL_OW 52
// end ; i = i + 1 ;
10252: LD_ADDR_VAR 0 13
10256: PUSH
10257: LD_VAR 0 13
10261: PUSH
10262: LD_INT 1
10264: PLUS
10265: ST_TO_ADDR
// end ; if nation = 2 then
10266: LD_VAR 0 5
10270: PUSH
10271: LD_INT 2
10273: EQUAL
10274: IFFALSE 10698
// begin uc_side = side ;
10276: LD_ADDR_OWVAR 20
10280: PUSH
10281: LD_VAR 0 2
10285: ST_TO_ADDR
// uc_nation = nation ;
10286: LD_ADDR_OWVAR 21
10290: PUSH
10291: LD_VAR 0 5
10295: ST_TO_ADDR
// vc_engine = vehengine ;
10296: LD_ADDR_OWVAR 39
10300: PUSH
10301: LD_VAR 0 6
10305: ST_TO_ADDR
// vc_control = vehcontrol ;
10306: LD_ADDR_OWVAR 38
10310: PUSH
10311: LD_VAR 0 7
10315: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10316: LD_ADDR_OWVAR 40
10320: PUSH
10321: LD_VAR 0 9
10325: PUSH
10326: LD_INT 1
10328: PPUSH
10329: LD_VAR 0 9
10333: PPUSH
10334: CALL_OW 12
10338: ARRAY
10339: ST_TO_ADDR
// for j = 1 to ARWeapons do
10340: LD_ADDR_VAR 0 14
10344: PUSH
10345: DOUBLE
10346: LD_INT 1
10348: DEC
10349: ST_TO_ADDR
10350: LD_VAR 0 9
10354: PUSH
10355: FOR_TO
10356: IFFALSE 10590
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10358: LD_VAR 0 9
10362: PUSH
10363: LD_VAR 0 14
10367: ARRAY
10368: PUSH
10369: LD_INT 24
10371: EQUAL
10372: PUSH
10373: LD_VAR 0 9
10377: PUSH
10378: LD_VAR 0 14
10382: ARRAY
10383: PUSH
10384: LD_INT 22
10386: EQUAL
10387: OR
10388: PUSH
10389: LD_VAR 0 9
10393: PUSH
10394: LD_VAR 0 14
10398: ARRAY
10399: PUSH
10400: LD_INT 23
10402: EQUAL
10403: OR
10404: PUSH
10405: LD_VAR 0 9
10409: PUSH
10410: LD_VAR 0 14
10414: ARRAY
10415: PUSH
10416: LD_INT 30
10418: EQUAL
10419: OR
10420: IFFALSE 10469
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10422: LD_ADDR_VAR 0 18
10426: PUSH
10427: LD_INT 11
10429: PUSH
10430: LD_INT 12
10432: PUSH
10433: LD_INT 13
10435: PUSH
10436: LD_INT 14
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10445: LD_ADDR_OWVAR 37
10449: PUSH
10450: LD_VAR 0 18
10454: PUSH
10455: LD_INT 1
10457: PPUSH
10458: LD_VAR 0 18
10462: PPUSH
10463: CALL_OW 12
10467: ARRAY
10468: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10469: LD_VAR 0 9
10473: PUSH
10474: LD_VAR 0 14
10478: ARRAY
10479: PUSH
10480: LD_INT 29
10482: EQUAL
10483: PUSH
10484: LD_VAR 0 9
10488: PUSH
10489: LD_VAR 0 14
10493: ARRAY
10494: PUSH
10495: LD_INT 28
10497: EQUAL
10498: OR
10499: PUSH
10500: LD_VAR 0 9
10504: PUSH
10505: LD_VAR 0 14
10509: ARRAY
10510: PUSH
10511: LD_INT 27
10513: EQUAL
10514: OR
10515: PUSH
10516: LD_VAR 0 9
10520: PUSH
10521: LD_VAR 0 14
10525: ARRAY
10526: PUSH
10527: LD_INT 26
10529: EQUAL
10530: OR
10531: PUSH
10532: LD_VAR 0 9
10536: PUSH
10537: LD_VAR 0 14
10541: ARRAY
10542: PUSH
10543: LD_INT 25
10545: EQUAL
10546: OR
10547: IFFALSE 10588
// begin arChassisTab = [ 13 , 14 ] ;
10549: LD_ADDR_VAR 0 18
10553: PUSH
10554: LD_INT 13
10556: PUSH
10557: LD_INT 14
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10564: LD_ADDR_OWVAR 37
10568: PUSH
10569: LD_VAR 0 18
10573: PUSH
10574: LD_INT 1
10576: PPUSH
10577: LD_VAR 0 18
10581: PPUSH
10582: CALL_OW 12
10586: ARRAY
10587: ST_TO_ADDR
// end ; end ;
10588: GO 10355
10590: POP
10591: POP
// veh = CreateVehicle ;
10592: LD_ADDR_VAR 0 16
10596: PUSH
10597: CALL_OW 45
10601: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10602: LD_VAR 0 16
10606: PPUSH
10607: LD_VAR 0 1
10611: PPUSH
10612: LD_INT 0
10614: PPUSH
10615: CALL_OW 49
// if vehcontrol = 1 then
10619: LD_VAR 0 7
10623: PUSH
10624: LD_INT 1
10626: EQUAL
10627: IFFALSE 10684
// begin hc_gallery =  ;
10629: LD_ADDR_OWVAR 33
10633: PUSH
10634: LD_STRING 
10636: ST_TO_ADDR
// hc_name =  ;
10637: LD_ADDR_OWVAR 26
10641: PUSH
10642: LD_STRING 
10644: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10645: LD_INT 0
10647: PPUSH
10648: LD_INT 3
10650: PPUSH
10651: LD_VAR 0 4
10655: PPUSH
10656: CALL_OW 380
// un = CreateHuman ;
10660: LD_ADDR_VAR 0 15
10664: PUSH
10665: CALL_OW 44
10669: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10670: LD_VAR 0 15
10674: PPUSH
10675: LD_VAR 0 16
10679: PPUSH
10680: CALL_OW 52
// end ; i = i + 1 ;
10684: LD_ADDR_VAR 0 13
10688: PUSH
10689: LD_VAR 0 13
10693: PUSH
10694: LD_INT 1
10696: PLUS
10697: ST_TO_ADDR
// end ; if nation = 3 then
10698: LD_VAR 0 5
10702: PUSH
10703: LD_INT 3
10705: EQUAL
10706: IFFALSE 11098
// begin uc_side = side ;
10708: LD_ADDR_OWVAR 20
10712: PUSH
10713: LD_VAR 0 2
10717: ST_TO_ADDR
// uc_nation = nation ;
10718: LD_ADDR_OWVAR 21
10722: PUSH
10723: LD_VAR 0 5
10727: ST_TO_ADDR
// vc_engine = vehengine ;
10728: LD_ADDR_OWVAR 39
10732: PUSH
10733: LD_VAR 0 6
10737: ST_TO_ADDR
// vc_control = vehcontrol ;
10738: LD_ADDR_OWVAR 38
10742: PUSH
10743: LD_VAR 0 7
10747: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10748: LD_ADDR_OWVAR 40
10752: PUSH
10753: LD_VAR 0 8
10757: PUSH
10758: LD_INT 1
10760: PPUSH
10761: LD_VAR 0 8
10765: PPUSH
10766: CALL_OW 12
10770: ARRAY
10771: ST_TO_ADDR
// for j = 1 to RuWeapons do
10772: LD_ADDR_VAR 0 14
10776: PUSH
10777: DOUBLE
10778: LD_INT 1
10780: DEC
10781: ST_TO_ADDR
10782: LD_VAR 0 8
10786: PUSH
10787: FOR_TO
10788: IFFALSE 10990
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10790: LD_VAR 0 8
10794: PUSH
10795: LD_VAR 0 14
10799: ARRAY
10800: PUSH
10801: LD_INT 42
10803: EQUAL
10804: PUSH
10805: LD_VAR 0 8
10809: PUSH
10810: LD_VAR 0 14
10814: ARRAY
10815: PUSH
10816: LD_INT 43
10818: EQUAL
10819: OR
10820: PUSH
10821: LD_VAR 0 8
10825: PUSH
10826: LD_VAR 0 14
10830: ARRAY
10831: PUSH
10832: LD_INT 44
10834: EQUAL
10835: OR
10836: PUSH
10837: LD_VAR 0 8
10841: PUSH
10842: LD_VAR 0 14
10846: ARRAY
10847: PUSH
10848: LD_INT 45
10850: EQUAL
10851: OR
10852: PUSH
10853: LD_VAR 0 8
10857: PUSH
10858: LD_VAR 0 14
10862: ARRAY
10863: PUSH
10864: LD_INT 49
10866: EQUAL
10867: OR
10868: IFFALSE 10917
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10870: LD_ADDR_VAR 0 17
10874: PUSH
10875: LD_INT 21
10877: PUSH
10878: LD_INT 22
10880: PUSH
10881: LD_INT 23
10883: PUSH
10884: LD_INT 24
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10893: LD_ADDR_OWVAR 37
10897: PUSH
10898: LD_VAR 0 17
10902: PUSH
10903: LD_INT 1
10905: PPUSH
10906: LD_VAR 0 17
10910: PPUSH
10911: CALL_OW 12
10915: ARRAY
10916: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10917: LD_VAR 0 8
10921: PUSH
10922: LD_VAR 0 14
10926: ARRAY
10927: PUSH
10928: LD_INT 46
10930: EQUAL
10931: PUSH
10932: LD_VAR 0 8
10936: PUSH
10937: LD_VAR 0 14
10941: ARRAY
10942: PUSH
10943: LD_INT 47
10945: EQUAL
10946: OR
10947: IFFALSE 10988
// begin ruChassisTab = [ 23 , 24 ] ;
10949: LD_ADDR_VAR 0 17
10953: PUSH
10954: LD_INT 23
10956: PUSH
10957: LD_INT 24
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10964: LD_ADDR_OWVAR 37
10968: PUSH
10969: LD_VAR 0 17
10973: PUSH
10974: LD_INT 1
10976: PPUSH
10977: LD_VAR 0 17
10981: PPUSH
10982: CALL_OW 12
10986: ARRAY
10987: ST_TO_ADDR
// end ; end ;
10988: GO 10787
10990: POP
10991: POP
// veh = CreateVehicle ;
10992: LD_ADDR_VAR 0 16
10996: PUSH
10997: CALL_OW 45
11001: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
11002: LD_VAR 0 16
11006: PPUSH
11007: LD_VAR 0 1
11011: PPUSH
11012: LD_INT 0
11014: PPUSH
11015: CALL_OW 49
// if vehcontrol = 1 then
11019: LD_VAR 0 7
11023: PUSH
11024: LD_INT 1
11026: EQUAL
11027: IFFALSE 11084
// begin hc_gallery =  ;
11029: LD_ADDR_OWVAR 33
11033: PUSH
11034: LD_STRING 
11036: ST_TO_ADDR
// hc_name =  ;
11037: LD_ADDR_OWVAR 26
11041: PUSH
11042: LD_STRING 
11044: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
11045: LD_INT 0
11047: PPUSH
11048: LD_INT 3
11050: PPUSH
11051: LD_VAR 0 4
11055: PPUSH
11056: CALL_OW 380
// un = CreateHuman ;
11060: LD_ADDR_VAR 0 15
11064: PUSH
11065: CALL_OW 44
11069: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11070: LD_VAR 0 15
11074: PPUSH
11075: LD_VAR 0 16
11079: PPUSH
11080: CALL_OW 52
// end ; i = i + 1 ;
11084: LD_ADDR_VAR 0 13
11088: PUSH
11089: LD_VAR 0 13
11093: PUSH
11094: LD_INT 1
11096: PLUS
11097: ST_TO_ADDR
// end ; until i = vehCount ;
11098: LD_VAR 0 13
11102: PUSH
11103: LD_VAR 0 3
11107: EQUAL
11108: IFFALSE 9760
// repeat wait ( 0 0$1 ) ;
11110: LD_INT 35
11112: PPUSH
11113: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
11117: LD_INT 22
11119: PUSH
11120: LD_VAR 0 2
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 21
11131: PUSH
11132: LD_INT 2
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 24
11141: PUSH
11142: LD_INT 250
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 3
11151: PUSH
11152: LD_INT 58
11154: PUSH
11155: EMPTY
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: PPUSH
11168: CALL_OW 69
11172: PUSH
11173: LD_INT 0
11175: GREATER
11176: IFFALSE 11418
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
11178: LD_ADDR_VAR 0 13
11182: PUSH
11183: LD_INT 22
11185: PUSH
11186: LD_VAR 0 2
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: LD_INT 21
11197: PUSH
11198: LD_INT 2
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PUSH
11205: LD_INT 24
11207: PUSH
11208: LD_INT 250
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: PUSH
11215: LD_INT 3
11217: PUSH
11218: LD_INT 58
11220: PUSH
11221: EMPTY
11222: LIST
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: PPUSH
11234: CALL_OW 69
11238: PUSH
11239: FOR_IN
11240: IFFALSE 11416
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11242: LD_ADDR_VAR 0 21
11246: PUSH
11247: LD_INT 22
11249: PUSH
11250: LD_VAR 0 11
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PPUSH
11259: CALL_OW 69
11263: PPUSH
11264: LD_VAR 0 13
11268: PPUSH
11269: CALL_OW 74
11273: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11274: LD_ADDR_VAR 0 22
11278: PUSH
11279: LD_INT 22
11281: PUSH
11282: LD_VAR 0 11
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 59
11296: PUSH
11297: EMPTY
11298: LIST
11299: PUSH
11300: LD_INT 21
11302: PUSH
11303: LD_INT 1
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: LD_INT 21
11312: PUSH
11313: LD_INT 2
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: EMPTY
11331: LIST
11332: PPUSH
11333: CALL_OW 69
11337: PPUSH
11338: LD_VAR 0 13
11342: PPUSH
11343: CALL_OW 74
11347: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11348: LD_VAR 0 13
11352: PPUSH
11353: LD_VAR 0 21
11357: PPUSH
11358: CALL_OW 296
11362: PUSH
11363: LD_INT 8
11365: PLUS
11366: PUSH
11367: LD_VAR 0 13
11371: PPUSH
11372: LD_VAR 0 22
11376: PPUSH
11377: CALL_OW 296
11381: LESS
11382: IFFALSE 11400
// begin ComAttackUnit ( i , target1 ) ;
11384: LD_VAR 0 13
11388: PPUSH
11389: LD_VAR 0 21
11393: PPUSH
11394: CALL_OW 115
// end else
11398: GO 11414
// begin ComAttackUnit ( i , target2 ) ;
11400: LD_VAR 0 13
11404: PPUSH
11405: LD_VAR 0 22
11409: PPUSH
11410: CALL_OW 115
// end ; end ;
11414: GO 11239
11416: POP
11417: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11418: LD_INT 22
11420: PUSH
11421: LD_VAR 0 2
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: LD_INT 21
11432: PUSH
11433: LD_INT 2
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 24
11442: PUSH
11443: LD_INT 250
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: LD_INT 3
11452: PUSH
11453: LD_INT 58
11455: PUSH
11456: EMPTY
11457: LIST
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: PPUSH
11469: CALL_OW 69
11473: PUSH
11474: LD_INT 0
11476: EQUAL
11477: IFFALSE 11110
// end ; end_of_file
11479: LD_VAR 0 12
11483: RET
// every 1 do var i , gammaSquad , startX , startY ;
11484: GO 11486
11486: DISABLE
11487: LD_INT 0
11489: PPUSH
11490: PPUSH
11491: PPUSH
11492: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11493: LD_ADDR_VAR 0 2
11497: PUSH
11498: LD_EXP 8
11502: PUSH
11503: LD_EXP 9
11507: PUSH
11508: LD_EXP 10
11512: PUSH
11513: LD_EXP 11
11517: PUSH
11518: LD_EXP 12
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11530: LD_ADDR_VAR 0 3
11534: PUSH
11535: LD_INT 46
11537: PUSH
11538: LD_INT 45
11540: PUSH
11541: LD_INT 44
11543: PUSH
11544: LD_INT 43
11546: PUSH
11547: LD_INT 42
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11557: LD_ADDR_VAR 0 4
11561: PUSH
11562: LD_INT 14
11564: PUSH
11565: LD_INT 12
11567: PUSH
11568: LD_INT 10
11570: PUSH
11571: LD_INT 8
11573: PUSH
11574: LD_INT 6
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
11584: LD_EXP 11
11588: PPUSH
11589: LD_INT 31
11591: PPUSH
11592: LD_INT 59
11594: PPUSH
11595: LD_INT 19
11597: PPUSH
11598: LD_INT 5
11600: PPUSH
11601: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
11605: LD_INT 32
11607: PPUSH
11608: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11612: LD_INT 32
11614: PPUSH
11615: LD_INT 51
11617: PPUSH
11618: LD_INT 26
11620: PPUSH
11621: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11625: LD_INT 32
11627: PPUSH
11628: LD_INT 53
11630: PPUSH
11631: LD_INT 23
11633: PPUSH
11634: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11638: LD_INT 32
11640: PPUSH
11641: LD_INT 52
11643: PPUSH
11644: LD_INT 19
11646: PPUSH
11647: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11651: LD_INT 35
11653: PPUSH
11654: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11658: LD_INT 32
11660: PPUSH
11661: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11665: LD_INT 32
11667: PPUSH
11668: CALL_OW 250
11672: PUSH
11673: LD_INT 52
11675: EQUAL
11676: PUSH
11677: LD_INT 32
11679: PPUSH
11680: CALL_OW 251
11684: PUSH
11685: LD_INT 19
11687: EQUAL
11688: AND
11689: IFFALSE 11651
// ComExitVehicle ( JMM ) ;
11691: LD_EXP 1
11695: PPUSH
11696: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11700: LD_EXP 7
11704: PPUSH
11705: LD_EXP 1
11709: PPUSH
11710: CALL_OW 119
// wait ( 0 0$01 ) ;
11714: LD_INT 35
11716: PPUSH
11717: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11721: LD_EXP 1
11725: PPUSH
11726: LD_INT 46
11728: PPUSH
11729: LD_INT 10
11731: PPUSH
11732: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11736: LD_EXP 1
11740: PPUSH
11741: LD_EXP 7
11745: PPUSH
11746: CALL_OW 179
// wait ( 0 0$4 ) ;
11750: LD_INT 140
11752: PPUSH
11753: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11757: LD_EXP 1
11761: PPUSH
11762: LD_STRING D1-JMM-1
11764: PPUSH
11765: CALL_OW 88
// if not dialogue_skipped then
11769: LD_OWVAR 59
11773: NOT
11774: IFFALSE 12431
// begin for i := 1 to gammaSquad do
11776: LD_ADDR_VAR 0 1
11780: PUSH
11781: DOUBLE
11782: LD_INT 1
11784: DEC
11785: ST_TO_ADDR
11786: LD_VAR 0 2
11790: PUSH
11791: FOR_TO
11792: IFFALSE 11853
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11794: LD_VAR 0 2
11798: PUSH
11799: LD_VAR 0 1
11803: ARRAY
11804: PPUSH
11805: LD_VAR 0 3
11809: PUSH
11810: LD_VAR 0 1
11814: ARRAY
11815: PPUSH
11816: LD_VAR 0 4
11820: PUSH
11821: LD_VAR 0 1
11825: ARRAY
11826: PPUSH
11827: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11831: LD_VAR 0 2
11835: PUSH
11836: LD_VAR 0 1
11840: ARRAY
11841: PPUSH
11842: LD_EXP 1
11846: PPUSH
11847: CALL_OW 179
// end ;
11851: GO 11791
11853: POP
11854: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11855: LD_EXP 4
11859: PPUSH
11860: LD_INT 41
11862: PPUSH
11863: LD_INT 4
11865: PPUSH
11866: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11870: LD_EXP 4
11874: PPUSH
11875: LD_EXP 1
11879: PPUSH
11880: CALL_OW 179
// if Lisa = false and Bobby then
11884: LD_EXP 4
11888: PUSH
11889: LD_INT 0
11891: EQUAL
11892: PUSH
11893: LD_EXP 2
11897: AND
11898: IFFALSE 11929
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11900: LD_EXP 2
11904: PPUSH
11905: LD_INT 41
11907: PPUSH
11908: LD_INT 4
11910: PPUSH
11911: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11915: LD_EXP 2
11919: PPUSH
11920: LD_EXP 1
11924: PPUSH
11925: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11929: LD_EXP 4
11933: PUSH
11934: LD_INT 0
11936: EQUAL
11937: PUSH
11938: LD_EXP 2
11942: PUSH
11943: LD_INT 0
11945: EQUAL
11946: AND
11947: PUSH
11948: LD_EXP 3
11952: AND
11953: IFFALSE 11984
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11955: LD_EXP 3
11959: PPUSH
11960: LD_INT 41
11962: PPUSH
11963: LD_INT 4
11965: PPUSH
11966: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11970: LD_EXP 3
11974: PPUSH
11975: LD_EXP 1
11979: PPUSH
11980: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11984: LD_EXP 4
11988: PUSH
11989: LD_INT 0
11991: EQUAL
11992: PUSH
11993: LD_EXP 2
11997: PUSH
11998: LD_INT 0
12000: EQUAL
12001: AND
12002: PUSH
12003: LD_EXP 3
12007: PUSH
12008: LD_INT 0
12010: EQUAL
12011: AND
12012: IFFALSE 12043
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
12014: LD_EXP 6
12018: PPUSH
12019: LD_INT 41
12021: PPUSH
12022: LD_INT 4
12024: PPUSH
12025: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
12029: LD_EXP 6
12033: PPUSH
12034: LD_EXP 1
12038: PPUSH
12039: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
12043: LD_EXP 7
12047: PPUSH
12048: LD_STRING D1-Brown-1
12050: PPUSH
12051: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
12055: LD_EXP 1
12059: PPUSH
12060: LD_STRING D1-JMM-2
12062: PPUSH
12063: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
12067: LD_EXP 7
12071: PPUSH
12072: LD_STRING D1-Brown-2
12074: PPUSH
12075: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
12079: LD_EXP 1
12083: PPUSH
12084: LD_EXP 9
12088: PPUSH
12089: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
12093: LD_EXP 9
12097: PPUSH
12098: LD_STRING D1-FSol1-2
12100: PPUSH
12101: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
12105: LD_EXP 1
12109: PPUSH
12110: LD_EXP 8
12114: PPUSH
12115: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
12119: LD_EXP 8
12123: PPUSH
12124: LD_STRING D1-Sol2-2
12126: PPUSH
12127: CALL_OW 88
// if Lisa then
12131: LD_EXP 4
12135: IFFALSE 12175
// begin ComTurnUnit ( JMM , Lisa ) ;
12137: LD_EXP 1
12141: PPUSH
12142: LD_EXP 4
12146: PPUSH
12147: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
12151: LD_EXP 4
12155: PPUSH
12156: LD_STRING D1-Lisa-2
12158: PPUSH
12159: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12163: LD_EXP 1
12167: PPUSH
12168: LD_STRING D1-JMM-3
12170: PPUSH
12171: CALL_OW 88
// end ; if Bobby then
12175: LD_EXP 2
12179: IFFALSE 12219
// begin ComTurnUnit ( JMM , Bobby ) ;
12181: LD_EXP 1
12185: PPUSH
12186: LD_EXP 2
12190: PPUSH
12191: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
12195: LD_EXP 2
12199: PPUSH
12200: LD_STRING D1-Bobby-2
12202: PPUSH
12203: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12207: LD_EXP 1
12211: PPUSH
12212: LD_STRING D1-JMM-3
12214: PPUSH
12215: CALL_OW 88
// end ; if Cyrus then
12219: LD_EXP 3
12223: IFFALSE 12263
// begin ComTurnUnit ( JMM , Cyrus ) ;
12225: LD_EXP 1
12229: PPUSH
12230: LD_EXP 3
12234: PPUSH
12235: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
12239: LD_EXP 3
12243: PPUSH
12244: LD_STRING D1-Cyrus-2
12246: PPUSH
12247: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12251: LD_EXP 1
12255: PPUSH
12256: LD_STRING D1-JMM-3
12258: PPUSH
12259: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
12263: LD_EXP 1
12267: PPUSH
12268: LD_EXP 7
12272: PPUSH
12273: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
12277: LD_EXP 1
12281: PPUSH
12282: LD_STRING D1-JMM-3a
12284: PPUSH
12285: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
12289: LD_EXP 7
12293: PPUSH
12294: LD_INT 38
12296: PPUSH
12297: LD_INT 5
12299: PPUSH
12300: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
12304: LD_EXP 7
12308: PPUSH
12309: LD_EXP 1
12313: PPUSH
12314: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
12318: LD_EXP 1
12322: PPUSH
12323: LD_INT 40
12325: PPUSH
12326: LD_INT 7
12328: PPUSH
12329: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12333: LD_EXP 1
12337: PPUSH
12338: LD_EXP 7
12342: PPUSH
12343: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12347: LD_EXP 7
12351: PPUSH
12352: LD_STRING D1-Brown-3
12354: PPUSH
12355: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12359: LD_EXP 14
12363: PPUSH
12364: LD_STRING D1-Har-3
12366: PPUSH
12367: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12371: LD_EXP 1
12375: PPUSH
12376: LD_STRING D1-JMM-4
12378: PPUSH
12379: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12383: LD_EXP 14
12387: PPUSH
12388: LD_STRING D1-Har-4
12390: PPUSH
12391: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12395: LD_EXP 1
12399: PPUSH
12400: LD_STRING D1-JMM-5
12402: PPUSH
12403: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12407: LD_EXP 14
12411: PPUSH
12412: LD_STRING D1-Har-5
12414: PPUSH
12415: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12419: LD_EXP 1
12423: PPUSH
12424: LD_STRING D1-JMM-6
12426: PPUSH
12427: CALL_OW 88
// end ; InGameOff ;
12431: CALL_OW 9
// PrepareRussianConvoy ;
12435: CALL 3360 0 0
// ChangeMissionObjectives ( M1 ) ;
12439: LD_STRING M1
12441: PPUSH
12442: CALL_OW 337
// SaveForQuickRestart ;
12446: CALL_OW 22
// timerStatus = 1 ;
12450: LD_ADDR_EXP 29
12454: PUSH
12455: LD_INT 1
12457: ST_TO_ADDR
// startTimer = 1 ;
12458: LD_ADDR_EXP 30
12462: PUSH
12463: LD_INT 1
12465: ST_TO_ADDR
// bonusAvalaible = 1 ;
12466: LD_ADDR_EXP 44
12470: PUSH
12471: LD_INT 1
12473: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12474: LD_INT 105
12476: PPUSH
12477: CALL_OW 67
// DialogueOn ;
12481: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12485: LD_EXP 12
12489: PPUSH
12490: LD_STRING D9-Mech1-1
12492: PPUSH
12493: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12497: LD_EXP 1
12501: PPUSH
12502: LD_STRING D9-JMM-1
12504: PPUSH
12505: CALL_OW 88
// DialogueOff ;
12509: CALL_OW 7
// end ;
12513: PPOPN 4
12515: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) > 0 do
12516: LD_INT 47
12518: PPUSH
12519: LD_INT 1
12521: PPUSH
12522: CALL_OW 321
12526: PUSH
12527: LD_INT 2
12529: EQUAL
12530: PUSH
12531: LD_EXP 31
12535: NOT
12536: AND
12537: PUSH
12538: LD_INT 22
12540: PUSH
12541: LD_INT 1
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 21
12550: PUSH
12551: LD_INT 3
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PUSH
12558: LD_INT 30
12560: PUSH
12561: LD_INT 3
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 57
12570: PUSH
12571: EMPTY
12572: LIST
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: PPUSH
12580: CALL_OW 69
12584: PUSH
12585: LD_INT 0
12587: GREATER
12588: AND
12589: IFFALSE 12827
12591: GO 12593
12593: DISABLE
// begin factoryDialog := true ;
12594: LD_ADDR_EXP 31
12598: PUSH
12599: LD_INT 1
12601: ST_TO_ADDR
// if IsOk ( Campell ) then
12602: LD_EXP 12
12606: PPUSH
12607: CALL_OW 302
12611: IFFALSE 12627
// begin Say ( Campell , D10-Mech1-1 ) ;
12613: LD_EXP 12
12617: PPUSH
12618: LD_STRING D10-Mech1-1
12620: PPUSH
12621: CALL_OW 88
// end else
12625: GO 12827
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12627: LD_INT 22
12629: PUSH
12630: LD_INT 1
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PUSH
12637: LD_INT 21
12639: PUSH
12640: LD_INT 1
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: LD_INT 25
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 26
12659: PUSH
12660: LD_INT 1
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: PPUSH
12673: CALL_OW 69
12677: PUSH
12678: LD_EXP 1
12682: PUSH
12683: EMPTY
12684: LIST
12685: PUSH
12686: LD_INT 0
12688: GREATER
12689: DIFF
12690: IFFALSE 12764
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12692: LD_INT 22
12694: PUSH
12695: LD_INT 1
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 21
12704: PUSH
12705: LD_INT 1
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 25
12714: PUSH
12715: LD_INT 3
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: LD_INT 26
12724: PUSH
12725: LD_INT 1
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: PPUSH
12738: CALL_OW 69
12742: PUSH
12743: LD_EXP 1
12747: PUSH
12748: EMPTY
12749: LIST
12750: DIFF
12751: PPUSH
12752: LD_STRING D10-Mech1-1
12754: PPUSH
12755: LD_STRING D10-Mech1-1
12757: PPUSH
12758: CALL 4646 0 3
// end else
12762: GO 12827
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12764: LD_INT 22
12766: PUSH
12767: LD_INT 1
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: LD_INT 21
12776: PUSH
12777: LD_INT 1
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: LD_INT 26
12786: PUSH
12787: LD_INT 1
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: LIST
12798: PUSH
12799: LD_INT 1
12801: ARRAY
12802: PPUSH
12803: CALL_OW 69
12807: PUSH
12808: LD_EXP 1
12812: PUSH
12813: EMPTY
12814: LIST
12815: DIFF
12816: PPUSH
12817: LD_STRING D10-Mech1-1
12819: PPUSH
12820: LD_STRING D10-Mech1-1
12822: PPUSH
12823: CALL 4646 0 3
// end ; end ; end ;
12827: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12828: LD_INT 22
12830: PUSH
12831: LD_INT 1
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 30
12840: PUSH
12841: LD_INT 32
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PPUSH
12852: CALL_OW 69
12856: PUSH
12857: LD_INT 0
12859: GREATER
12860: PUSH
12861: LD_EXP 32
12865: PUSH
12866: LD_INT 0
12868: EQUAL
12869: AND
12870: IFFALSE 13110
12872: GO 12874
12874: DISABLE
// begin if IsOK ( Claptopn ) then
12875: LD_EXP 11
12879: PPUSH
12880: CALL_OW 302
12884: IFFALSE 12900
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12886: LD_EXP 11
12890: PPUSH
12891: LD_STRING D9b-Eng1-1
12893: PPUSH
12894: CALL_OW 88
// end else
12898: GO 13096
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12900: LD_INT 22
12902: PUSH
12903: LD_INT 1
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 21
12912: PUSH
12913: LD_INT 1
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 25
12922: PUSH
12923: LD_INT 3
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 26
12932: PUSH
12933: LD_INT 1
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: PPUSH
12946: CALL_OW 69
12950: PUSH
12951: LD_EXP 1
12955: PUSH
12956: EMPTY
12957: LIST
12958: PUSH
12959: LD_INT 0
12961: GREATER
12962: DIFF
12963: IFFALSE 13037
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12965: LD_INT 22
12967: PUSH
12968: LD_INT 1
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PUSH
12975: LD_INT 21
12977: PUSH
12978: LD_INT 1
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PUSH
12985: LD_INT 25
12987: PUSH
12988: LD_INT 2
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: LD_INT 26
12997: PUSH
12998: LD_INT 1
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: PPUSH
13011: CALL_OW 69
13015: PUSH
13016: LD_EXP 1
13020: PUSH
13021: EMPTY
13022: LIST
13023: DIFF
13024: PPUSH
13025: LD_STRING D9b-Eng1-1
13027: PPUSH
13028: LD_STRING D9b-Eng1-11
13030: PPUSH
13031: CALL 4646 0 3
// end else
13035: GO 13096
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
13037: LD_INT 22
13039: PUSH
13040: LD_INT 1
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 21
13049: PUSH
13050: LD_INT 1
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 26
13059: PUSH
13060: LD_INT 1
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: LIST
13071: PPUSH
13072: CALL_OW 69
13076: PUSH
13077: LD_EXP 1
13081: PUSH
13082: EMPTY
13083: LIST
13084: DIFF
13085: PPUSH
13086: LD_STRING D9b-Eng1-1
13088: PPUSH
13089: LD_STRING D9b-Eng1-1
13091: PPUSH
13092: CALL 4646 0 3
// end ; end ; if energyVDialog = 0 then
13096: LD_EXP 33
13100: PUSH
13101: LD_INT 0
13103: EQUAL
13104: IFFALSE 13110
// EnergyDialog ;
13106: CALL 5049 0 0
// end ;
13110: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
13111: LD_EXP 34
13115: PUSH
13116: LD_INT 1
13118: EQUAL
13119: PUSH
13120: LD_EXP 35
13124: PUSH
13125: LD_INT 1
13127: EQUAL
13128: AND
13129: IFFALSE 13141
13131: GO 13133
13133: DISABLE
// ChangeMissionObjectives ( M1a ) ;
13134: LD_STRING M1a
13136: PPUSH
13137: CALL_OW 337
13141: END
// every 3 3$0 do
13142: GO 13144
13144: DISABLE
// begin PrepareFirstAttack ;
13145: CALL 4160 0 0
// end ;
13149: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
13150: LD_INT 22
13152: PUSH
13153: LD_INT 5
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 21
13162: PUSH
13163: LD_INT 1
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: LD_INT 3
13172: PUSH
13173: LD_INT 24
13175: PUSH
13176: LD_INT 250
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: LIST
13191: PPUSH
13192: CALL_OW 69
13196: PUSH
13197: LD_INT 0
13199: GREATER
13200: PUSH
13201: LD_EXP 23
13205: PUSH
13206: LD_INT 1
13208: EQUAL
13209: AND
13210: IFFALSE 13511
13212: GO 13214
13214: DISABLE
13215: LD_INT 0
13217: PPUSH
// begin firstRussianAttack = 2 ;
13218: LD_ADDR_EXP 23
13222: PUSH
13223: LD_INT 2
13225: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
13226: LD_INT 22
13228: PUSH
13229: LD_INT 5
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: LD_INT 21
13238: PUSH
13239: LD_INT 1
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PPUSH
13250: CALL_OW 69
13254: PPUSH
13255: LD_INT 125
13257: PPUSH
13258: LD_INT 98
13260: PPUSH
13261: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
13265: LD_INT 22
13267: PUSH
13268: LD_INT 1
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: LD_INT 21
13277: PUSH
13278: LD_INT 1
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PPUSH
13289: CALL_OW 69
13293: PUSH
13294: LD_EXP 1
13298: PUSH
13299: LD_EXP 7
13303: PUSH
13304: LD_EXP 4
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: LIST
13313: DIFF
13314: PPUSH
13315: LD_STRING DAtt1-Sol1-1
13317: PPUSH
13318: LD_STRING DAtt1-FSol1-1
13320: PPUSH
13321: CALL 4646 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
13325: LD_EXP 1
13329: PPUSH
13330: LD_STRING DAtt1-JMM-1
13332: PPUSH
13333: CALL_OW 88
// if Lisa then
13337: LD_EXP 4
13341: IFFALSE 13357
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
13343: LD_EXP 4
13347: PPUSH
13348: LD_STRING DAtt1a-Lisa-1
13350: PPUSH
13351: CALL_OW 88
// end else
13355: GO 13428
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13357: LD_INT 22
13359: PUSH
13360: LD_INT 1
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 21
13369: PUSH
13370: LD_INT 1
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PUSH
13377: LD_INT 26
13379: PUSH
13380: LD_INT 1
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: PPUSH
13392: CALL_OW 69
13396: PUSH
13397: LD_EXP 1
13401: PUSH
13402: LD_EXP 7
13406: PUSH
13407: LD_EXP 4
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: LIST
13416: DIFF
13417: PPUSH
13418: LD_STRING DAtt1a-Sol1-1
13420: PPUSH
13421: LD_STRING DAtt1-FSol1-1
13423: PPUSH
13424: CALL 4646 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13428: LD_EXP 1
13432: PPUSH
13433: LD_STRING DAtt1a-JMM-1
13435: PPUSH
13436: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13440: LD_INT 22
13442: PUSH
13443: LD_INT 1
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 21
13452: PUSH
13453: LD_INT 1
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: LD_INT 26
13462: PUSH
13463: LD_INT 1
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: LIST
13474: PPUSH
13475: CALL_OW 69
13479: PUSH
13480: LD_EXP 1
13484: PUSH
13485: LD_EXP 7
13489: PUSH
13490: LD_EXP 4
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: DIFF
13500: PPUSH
13501: LD_STRING DAtt1b-Sol1-1
13503: PPUSH
13504: LD_STRING DAtt1a-Sol1-1
13506: PPUSH
13507: CALL 4646 0 3
// end ;
13511: PPOPN 1
13513: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13514: LD_EXP 23
13518: PUSH
13519: LD_INT 2
13521: EQUAL
13522: IFFALSE 13584
13524: GO 13526
13526: DISABLE
13527: LD_INT 0
13529: PPUSH
// begin enable ;
13530: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13531: LD_ADDR_VAR 0 1
13535: PUSH
13536: LD_INT 5
13538: PPUSH
13539: LD_INT 22
13541: PUSH
13542: LD_INT 5
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PUSH
13549: LD_INT 21
13551: PUSH
13552: LD_INT 1
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: PPUSH
13563: CALL_OW 70
13567: PUSH
13568: FOR_IN
13569: IFFALSE 13582
// RemoveUnit ( i ) ;
13571: LD_VAR 0 1
13575: PPUSH
13576: CALL_OW 64
13580: GO 13568
13582: POP
13583: POP
// end ;
13584: PPOPN 1
13586: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13587: LD_INT 22
13589: PUSH
13590: LD_INT 5
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: EMPTY
13598: LIST
13599: PPUSH
13600: CALL_OW 69
13604: PUSH
13605: LD_INT 0
13607: EQUAL
13608: PUSH
13609: LD_EXP 23
13613: PUSH
13614: LD_INT 2
13616: EQUAL
13617: AND
13618: IFFALSE 13631
13620: GO 13622
13622: DISABLE
// firstRussianAttack = 3 ;
13623: LD_ADDR_EXP 23
13627: PUSH
13628: LD_INT 3
13630: ST_TO_ADDR
13631: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13632: LD_EXP 28
13636: PUSH
13637: LD_INT 0
13639: EQUAL
13640: IFFALSE 13721
13642: GO 13644
13644: DISABLE
// begin timerStatus = 4 ;
13645: LD_ADDR_EXP 29
13649: PUSH
13650: LD_INT 4
13652: ST_TO_ADDR
// DialogueOn ;
13653: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13657: LD_EXP 13
13661: PPUSH
13662: LD_STRING D2-Don-1
13664: PPUSH
13665: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13669: LD_EXP 1
13673: PPUSH
13674: LD_STRING D2-JMM-1
13676: PPUSH
13677: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13681: LD_EXP 13
13685: PPUSH
13686: LD_STRING D2-Don-2
13688: PPUSH
13689: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13693: LD_EXP 1
13697: PPUSH
13698: LD_STRING D2-JMM-2
13700: PPUSH
13701: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13705: LD_EXP 13
13709: PPUSH
13710: LD_STRING D2-Don-3
13712: PPUSH
13713: CALL_OW 94
// DialogueOff ;
13717: CALL_OW 7
// end ;
13721: END
// every 12 12$0 do var tmp ;
13722: GO 13724
13724: DISABLE
13725: LD_INT 0
13727: PPUSH
// begin PrepareDonaldsonArmy ;
13728: CALL 1151 0 0
// CenterNowOnUnits ( Donaldson ) ;
13732: LD_EXP 13
13736: PPUSH
13737: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
13741: LD_INT 22
13743: PUSH
13744: LD_INT 6
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: PPUSH
13751: CALL_OW 69
13755: NOT
13756: IFFALSE 13772
// begin wait ( 3 ) ;
13758: LD_INT 3
13760: PPUSH
13761: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
13765: LD_STRING ACH_BASE
13767: PPUSH
13768: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13772: LD_ADDR_VAR 0 1
13776: PUSH
13777: LD_INT 22
13779: PUSH
13780: LD_INT 4
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 21
13789: PUSH
13790: LD_INT 1
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 26
13799: PUSH
13800: LD_INT 1
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: LD_INT 25
13809: PUSH
13810: LD_INT 1
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: PPUSH
13823: CALL_OW 69
13827: PUSH
13828: LD_EXP 5
13832: PUSH
13833: EMPTY
13834: LIST
13835: DIFF
13836: ST_TO_ADDR
// DialogueOn ;
13837: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13841: LD_VAR 0 1
13845: PPUSH
13846: LD_STRING D3-Sol1-1
13848: PPUSH
13849: LD_STRING D3-Sol1-1
13851: PPUSH
13852: CALL 4646 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13856: LD_INT 22
13858: PUSH
13859: LD_INT 4
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: LD_INT 21
13868: PUSH
13869: LD_INT 1
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: LD_INT 26
13878: PUSH
13879: LD_INT 1
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 25
13888: PUSH
13889: LD_INT 3
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: PPUSH
13902: CALL_OW 69
13906: PPUSH
13907: LD_STRING D3-Sol2-1
13909: PPUSH
13910: LD_STRING D3-Sol2-1
13912: PPUSH
13913: CALL 4646 0 3
// if Frank then
13917: LD_EXP 5
13921: IFFALSE 13935
// Say ( Frank , D3-Frank-1 ) ;
13923: LD_EXP 5
13927: PPUSH
13928: LD_STRING D3-Frank-1
13930: PPUSH
13931: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13935: LD_EXP 13
13939: PPUSH
13940: LD_STRING D3-Don-1
13942: PPUSH
13943: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13947: LD_EXP 13
13951: PPUSH
13952: LD_STRING D3-Don-1a
13954: PPUSH
13955: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13959: LD_EXP 1
13963: PPUSH
13964: LD_STRING D3-JMM-1
13966: PPUSH
13967: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13971: LD_EXP 13
13975: PPUSH
13976: LD_STRING D3-Don-2
13978: PPUSH
13979: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13983: LD_INT 22
13985: PUSH
13986: LD_INT 6
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 21
13995: PUSH
13996: LD_INT 1
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PPUSH
14007: CALL_OW 69
14011: PUSH
14012: LD_INT 0
14014: GREATER
14015: IFFALSE 14153
// begin Say ( JMM , D3-JMM-2 ) ;
14017: LD_EXP 1
14021: PPUSH
14022: LD_STRING D3-JMM-2
14024: PPUSH
14025: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
14029: LD_EXP 13
14033: PPUSH
14034: LD_STRING D3-Don-3
14036: PPUSH
14037: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
14041: LD_EXP 1
14045: PPUSH
14046: LD_STRING D3-JMM-3
14048: PPUSH
14049: CALL_OW 88
// if IsOK ( Frank ) then
14053: LD_EXP 5
14057: PPUSH
14058: CALL_OW 302
14062: IFFALSE 14076
// Say ( Frank , D3-Frank-3 ) ;
14064: LD_EXP 5
14068: PPUSH
14069: LD_STRING D3-Frank-3
14071: PPUSH
14072: CALL_OW 88
// DialogueOff ;
14076: CALL_OW 7
// if IsOK ( Frank ) then
14080: LD_EXP 5
14084: PPUSH
14085: CALL_OW 302
14089: IFFALSE 14151
// begin SetSide ( Frank , 0 ) ;
14091: LD_EXP 5
14095: PPUSH
14096: LD_INT 0
14098: PPUSH
14099: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14103: LD_EXP 5
14107: PPUSH
14108: LD_INT 12
14110: PPUSH
14111: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14115: LD_EXP 5
14119: PPUSH
14120: LD_STRING 04t_Frank
14122: PPUSH
14123: CALL_OW 38
// Wait ( 0 0$3 ) ;
14127: LD_INT 105
14129: PPUSH
14130: CALL_OW 67
// frankScoutBase = 1 ;
14134: LD_ADDR_EXP 25
14138: PUSH
14139: LD_INT 1
14141: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14142: LD_EXP 5
14146: PPUSH
14147: CALL_OW 64
// end ; end else
14151: GO 14240
// begin Say ( JMM , D3-JMM-4 ) ;
14153: LD_EXP 1
14157: PPUSH
14158: LD_STRING D3-JMM-4
14160: PPUSH
14161: CALL_OW 88
// DialogueOff ;
14165: CALL_OW 7
// if IsOK ( Frank ) then
14169: LD_EXP 5
14173: PPUSH
14174: CALL_OW 302
14178: IFFALSE 14240
// begin SetSide ( Frank , 0 ) ;
14180: LD_EXP 5
14184: PPUSH
14185: LD_INT 0
14187: PPUSH
14188: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14192: LD_EXP 5
14196: PPUSH
14197: LD_INT 12
14199: PPUSH
14200: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14204: LD_EXP 5
14208: PPUSH
14209: LD_STRING 04t_Frank
14211: PPUSH
14212: CALL_OW 38
// Wait ( 0 0$3 ) ;
14216: LD_INT 105
14218: PPUSH
14219: CALL_OW 67
// frankScoutBase = 1 ;
14223: LD_ADDR_EXP 25
14227: PUSH
14228: LD_INT 1
14230: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14231: LD_EXP 5
14235: PPUSH
14236: CALL_OW 64
// end ; end ; end ;
14240: PPOPN 1
14242: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
14243: LD_EXP 13
14247: PPUSH
14248: CALL_OW 255
14252: PUSH
14253: LD_INT 4
14255: EQUAL
14256: PUSH
14257: LD_EXP 13
14261: PPUSH
14262: CALL_OW 302
14266: AND
14267: IFFALSE 14401
14269: GO 14271
14271: DISABLE
14272: LD_INT 0
14274: PPUSH
14275: PPUSH
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
14276: LD_EXP 13
14280: PPUSH
14281: LD_STRING D3b-Don-1
14283: PPUSH
14284: CALL_OW 94
// donaldsonCoopAttack = 1 ;
14288: LD_ADDR_EXP 41
14292: PUSH
14293: LD_INT 1
14295: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
14296: LD_ADDR_VAR 0 2
14300: PUSH
14301: LD_INT 22
14303: PUSH
14304: LD_INT 4
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PPUSH
14311: CALL_OW 69
14315: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14316: LD_INT 35
14318: PPUSH
14319: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
14323: LD_VAR 0 2
14327: NOT
14328: PUSH
14329: LD_INT 22
14331: PUSH
14332: LD_INT 6
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 101
14341: PUSH
14342: LD_INT 1
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PPUSH
14353: CALL_OW 69
14357: OR
14358: IFFALSE 14316
// if not tmp then
14360: LD_VAR 0 2
14364: NOT
14365: IFFALSE 14369
// exit ;
14367: GO 14401
// for i in tmp do
14369: LD_ADDR_VAR 0 1
14373: PUSH
14374: LD_VAR 0 2
14378: PUSH
14379: FOR_IN
14380: IFFALSE 14399
// ComAgressiveMove ( i , 52 , 64 ) ;
14382: LD_VAR 0 1
14386: PPUSH
14387: LD_INT 52
14389: PPUSH
14390: LD_INT 64
14392: PPUSH
14393: CALL_OW 114
14397: GO 14379
14399: POP
14400: POP
// end ;
14401: PPOPN 2
14403: END
// every 0 0$1 trigger not saveDonaldson and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_dist , JMM , 9 ] ] ) diff Frank do var i ;
14404: LD_EXP 24
14408: NOT
14409: PUSH
14410: LD_INT 22
14412: PUSH
14413: LD_INT 4
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: LD_INT 21
14422: PUSH
14423: LD_INT 1
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 91
14432: PUSH
14433: LD_EXP 1
14437: PUSH
14438: LD_INT 9
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: LIST
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: LIST
14450: PPUSH
14451: CALL_OW 69
14455: PUSH
14456: LD_EXP 5
14460: DIFF
14461: AND
14462: IFFALSE 14517
14464: GO 14466
14466: DISABLE
14467: LD_INT 0
14469: PPUSH
// begin saveDonaldson := 1 ;
14470: LD_ADDR_EXP 24
14474: PUSH
14475: LD_INT 1
14477: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
14478: LD_ADDR_VAR 0 1
14482: PUSH
14483: LD_INT 22
14485: PUSH
14486: LD_INT 4
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PPUSH
14493: CALL_OW 69
14497: PUSH
14498: FOR_IN
14499: IFFALSE 14515
// SetSide ( i , 1 ) ;
14501: LD_VAR 0 1
14505: PPUSH
14506: LD_INT 1
14508: PPUSH
14509: CALL_OW 235
14513: GO 14498
14515: POP
14516: POP
// end ;
14517: PPOPN 1
14519: END
// every 0 0$1 trigger frankScoutBase do
14520: LD_EXP 25
14524: IFFALSE 14889
14526: GO 14528
14528: DISABLE
// begin wait ( 2 2$30 ) ;
14529: LD_INT 5250
14531: PPUSH
14532: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14536: LD_INT 35
14538: PPUSH
14539: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
14543: LD_INT 81
14545: PUSH
14546: LD_INT 4
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PUSH
14553: LD_INT 92
14555: PUSH
14556: LD_INT 84
14558: PUSH
14559: LD_INT 28
14561: PUSH
14562: LD_INT 22
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PPUSH
14575: CALL_OW 69
14579: NOT
14580: IFFALSE 14536
// uc_side = 4 ;
14582: LD_ADDR_OWVAR 20
14586: PUSH
14587: LD_INT 4
14589: ST_TO_ADDR
// uc_nation = 1 ;
14590: LD_ADDR_OWVAR 21
14594: PUSH
14595: LD_INT 1
14597: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
14598: LD_ADDR_EXP 5
14602: PUSH
14603: LD_STRING 04t_Frank
14605: PPUSH
14606: CALL_OW 34
14610: ST_TO_ADDR
// if not Frank then
14611: LD_EXP 5
14615: NOT
14616: IFFALSE 14620
// exit ;
14618: GO 14889
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14620: LD_EXP 5
14624: PPUSH
14625: LD_INT 13
14627: PPUSH
14628: LD_INT 0
14630: PPUSH
14631: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14635: LD_INT 35
14637: PPUSH
14638: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
14642: LD_EXP 1
14646: PPUSH
14647: CALL_OW 310
14651: NOT
14652: PUSH
14653: LD_EXP 1
14657: PPUSH
14658: LD_INT 4
14660: PPUSH
14661: CALL_OW 296
14665: PUSH
14666: LD_INT 20
14668: LESS
14669: AND
14670: IFFALSE 14703
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14672: LD_EXP 5
14676: PPUSH
14677: LD_EXP 1
14681: PPUSH
14682: CALL_OW 250
14686: PPUSH
14687: LD_EXP 1
14691: PPUSH
14692: CALL_OW 251
14696: PPUSH
14697: CALL_OW 111
14701: GO 14718
// ComMoveXY ( Frank , 51 , 15 ) ;
14703: LD_EXP 5
14707: PPUSH
14708: LD_INT 51
14710: PPUSH
14711: LD_INT 15
14713: PPUSH
14714: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14718: LD_EXP 5
14722: PPUSH
14723: LD_EXP 1
14727: PPUSH
14728: CALL_OW 296
14732: PUSH
14733: LD_INT 10
14735: LESS
14736: IFFALSE 14635
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14738: LD_EXP 1
14742: PUSH
14743: LD_EXP 5
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PPUSH
14752: CALL_OW 87
// DialogueOn ;
14756: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14760: LD_EXP 5
14764: PPUSH
14765: LD_STRING D3a-Frank-1
14767: PPUSH
14768: CALL_OW 88
// if Lisa then
14772: LD_EXP 4
14776: IFFALSE 14826
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14778: LD_EXP 4
14782: PPUSH
14783: LD_STRING D3a-Lisa-1
14785: PPUSH
14786: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14790: LD_EXP 5
14794: PPUSH
14795: LD_STRING D3a-Frank-2
14797: PPUSH
14798: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14802: LD_EXP 4
14806: PPUSH
14807: LD_STRING D3a-Lisa-2
14809: PPUSH
14810: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14814: LD_EXP 5
14818: PPUSH
14819: LD_STRING D3a-Frank-3
14821: PPUSH
14822: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14826: LD_EXP 1
14830: PPUSH
14831: LD_STRING D3a-JMM-3
14833: PPUSH
14834: CALL_OW 88
// DialogueOff ;
14838: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14842: LD_EXP 5
14846: PPUSH
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 235
// InGameOn ;
14854: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14858: LD_INT 1
14860: PPUSH
14861: LD_INT 7
14863: PPUSH
14864: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14868: LD_INT 93
14870: PPUSH
14871: LD_INT 91
14873: PPUSH
14874: CALL_OW 84
// wait ( 0 0$5 ) ;
14878: LD_INT 175
14880: PPUSH
14881: CALL_OW 67
// InGameOff ;
14885: CALL_OW 9
// end ;
14889: END
// every 12 12$0 trigger Difficulty > 1 do
14890: LD_OWVAR 67
14894: PUSH
14895: LD_INT 1
14897: GREATER
14898: IFFALSE 14922
14900: GO 14902
14902: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14903: LD_INT 24
14905: PPUSH
14906: LD_INT 24
14908: PPUSH
14909: LD_INT 1
14911: PPUSH
14912: LD_INT 1
14914: PPUSH
14915: LD_INT 53
14917: PPUSH
14918: CALL_OW 185
14922: END
// every 18 18$0 do
14923: GO 14925
14925: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14926: LD_EXP 14
14930: PPUSH
14931: LD_STRING D4-Har-1
14933: PPUSH
14934: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14938: LD_EXP 1
14942: PPUSH
14943: LD_STRING D4-JMM-1
14945: PPUSH
14946: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14950: LD_EXP 14
14954: PPUSH
14955: LD_STRING D4-Har-2
14957: PPUSH
14958: CALL_OW 94
// case query ( Q1 ) of 1 :
14962: LD_STRING Q1
14964: PPUSH
14965: CALL_OW 97
14969: PUSH
14970: LD_INT 1
14972: DOUBLE
14973: EQUAL
14974: IFTRUE 14978
14976: GO 15037
14978: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14979: LD_EXP 1
14983: PPUSH
14984: LD_STRING D5-JMM-1
14986: PPUSH
14987: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14991: LD_EXP 14
14995: PPUSH
14996: LD_STRING D5-Har-1
14998: PPUSH
14999: CALL_OW 94
// timeToSupport = 10 10$0 ;
15003: LD_ADDR_EXP 28
15007: PUSH
15008: LD_INT 21000
15010: ST_TO_ADDR
// timerStatus = 2 ;
15011: LD_ADDR_EXP 29
15015: PUSH
15016: LD_INT 2
15018: ST_TO_ADDR
// startTimer = 1 ;
15019: LD_ADDR_EXP 30
15023: PUSH
15024: LD_INT 1
15026: ST_TO_ADDR
// harrAnswer = 1 ;
15027: LD_ADDR_EXP 26
15031: PUSH
15032: LD_INT 1
15034: ST_TO_ADDR
// end ; 2 :
15035: GO 15172
15037: LD_INT 2
15039: DOUBLE
15040: EQUAL
15041: IFTRUE 15045
15043: GO 15104
15045: POP
// begin Say ( JMM , D5-JMM-2 ) ;
15046: LD_EXP 1
15050: PPUSH
15051: LD_STRING D5-JMM-2
15053: PPUSH
15054: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
15058: LD_EXP 14
15062: PPUSH
15063: LD_STRING D5-Har-2
15065: PPUSH
15066: CALL_OW 94
// timeToSupport = 5 5$0 ;
15070: LD_ADDR_EXP 28
15074: PUSH
15075: LD_INT 10500
15077: ST_TO_ADDR
// timerStatus = 2 ;
15078: LD_ADDR_EXP 29
15082: PUSH
15083: LD_INT 2
15085: ST_TO_ADDR
// startTimer = 1 ;
15086: LD_ADDR_EXP 30
15090: PUSH
15091: LD_INT 1
15093: ST_TO_ADDR
// harrAnswer = 2 ;
15094: LD_ADDR_EXP 26
15098: PUSH
15099: LD_INT 2
15101: ST_TO_ADDR
// end ; 3 :
15102: GO 15172
15104: LD_INT 3
15106: DOUBLE
15107: EQUAL
15108: IFTRUE 15112
15110: GO 15171
15112: POP
// begin Say ( JMM , D5-JMM-3 ) ;
15113: LD_EXP 1
15117: PPUSH
15118: LD_STRING D5-JMM-3
15120: PPUSH
15121: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
15125: LD_EXP 14
15129: PPUSH
15130: LD_STRING D5-Har-3
15132: PPUSH
15133: CALL_OW 94
// timeToSupport = 5 5$0 ;
15137: LD_ADDR_EXP 28
15141: PUSH
15142: LD_INT 10500
15144: ST_TO_ADDR
// timerStatus = 2 ;
15145: LD_ADDR_EXP 29
15149: PUSH
15150: LD_INT 2
15152: ST_TO_ADDR
// startTimer = 1 ;
15153: LD_ADDR_EXP 30
15157: PUSH
15158: LD_INT 1
15160: ST_TO_ADDR
// harrAnswer = 3 ;
15161: LD_ADDR_EXP 26
15165: PUSH
15166: LD_INT 3
15168: ST_TO_ADDR
// end ; end ;
15169: GO 15172
15171: POP
// end ;
15172: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
15173: LD_EXP 29
15177: PUSH
15178: LD_INT 2
15180: EQUAL
15181: PUSH
15182: LD_EXP 28
15186: PUSH
15187: LD_INT 0
15189: EQUAL
15190: AND
15191: IFFALSE 15468
15193: GO 15195
15195: DISABLE
// begin timerStatus = 4 ;
15196: LD_ADDR_EXP 29
15200: PUSH
15201: LD_INT 4
15203: ST_TO_ADDR
// if harrAnswer = 1 then
15204: LD_EXP 26
15208: PUSH
15209: LD_INT 1
15211: EQUAL
15212: IFFALSE 15292
// begin PrepareHarrisonSupport ( 3 ) ;
15214: LD_INT 3
15216: PPUSH
15217: CALL 1721 0 1
// wait ( 1 1$0 ) ;
15221: LD_INT 2100
15223: PPUSH
15224: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15228: LD_EXP 14
15232: PPUSH
15233: LD_STRING D7-Har-1
15235: PPUSH
15236: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15240: LD_STRING M2
15242: PPUSH
15243: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15247: LD_ADDR_EXP 27
15251: PUSH
15252: LD_INT 31500
15254: PUSH
15255: LD_INT 10500
15257: PUSH
15258: LD_INT 8400
15260: PUSH
15261: LD_INT 6300
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: LIST
15268: PUSH
15269: LD_OWVAR 67
15273: ARRAY
15274: PLUS
15275: ST_TO_ADDR
// startTimer = 1 ;
15276: LD_ADDR_EXP 30
15280: PUSH
15281: LD_INT 1
15283: ST_TO_ADDR
// timerStatus = 3 ;
15284: LD_ADDR_EXP 29
15288: PUSH
15289: LD_INT 3
15291: ST_TO_ADDR
// end ; if harrAnswer = 2 then
15292: LD_EXP 26
15296: PUSH
15297: LD_INT 2
15299: EQUAL
15300: IFFALSE 15380
// begin PrepareHarrisonSupport ( 4 ) ;
15302: LD_INT 4
15304: PPUSH
15305: CALL 1721 0 1
// wait ( 1 1$0 ) ;
15309: LD_INT 2100
15311: PPUSH
15312: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15316: LD_EXP 14
15320: PPUSH
15321: LD_STRING D7-Har-1
15323: PPUSH
15324: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15328: LD_STRING M2
15330: PPUSH
15331: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15335: LD_ADDR_EXP 27
15339: PUSH
15340: LD_INT 33600
15342: PUSH
15343: LD_INT 10500
15345: PUSH
15346: LD_INT 8400
15348: PUSH
15349: LD_INT 6300
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: LIST
15356: PUSH
15357: LD_OWVAR 67
15361: ARRAY
15362: PLUS
15363: ST_TO_ADDR
// startTimer = 1 ;
15364: LD_ADDR_EXP 30
15368: PUSH
15369: LD_INT 1
15371: ST_TO_ADDR
// timerStatus = 3 ;
15372: LD_ADDR_EXP 29
15376: PUSH
15377: LD_INT 3
15379: ST_TO_ADDR
// end ; if harrAnswer = 3 then
15380: LD_EXP 26
15384: PUSH
15385: LD_INT 3
15387: EQUAL
15388: IFFALSE 15468
// begin PrepareHarrisonSupport ( 5 ) ;
15390: LD_INT 5
15392: PPUSH
15393: CALL 1721 0 1
// wait ( 1 1$0 ) ;
15397: LD_INT 2100
15399: PPUSH
15400: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15404: LD_EXP 14
15408: PPUSH
15409: LD_STRING D7-Har-1
15411: PPUSH
15412: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15416: LD_STRING M2
15418: PPUSH
15419: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
15423: LD_ADDR_EXP 27
15427: PUSH
15428: LD_INT 35700
15430: PUSH
15431: LD_INT 10500
15433: PUSH
15434: LD_INT 6300
15436: PUSH
15437: LD_INT 4200
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: LIST
15444: PUSH
15445: LD_OWVAR 67
15449: ARRAY
15450: PLUS
15451: ST_TO_ADDR
// startTimer = 1 ;
15452: LD_ADDR_EXP 30
15456: PUSH
15457: LD_INT 1
15459: ST_TO_ADDR
// timerStatus = 3 ;
15460: LD_ADDR_EXP 29
15464: PUSH
15465: LD_INT 3
15467: ST_TO_ADDR
// end ; end ;
15468: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
15469: LD_EXP 27
15473: PUSH
15474: LD_INT 8400
15476: LESSEQUAL
15477: PUSH
15478: LD_EXP 29
15482: PUSH
15483: LD_INT 3
15485: EQUAL
15486: AND
15487: IFFALSE 15519
15489: GO 15491
15491: DISABLE
// begin DialogueOn ;
15492: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15496: LD_EXP 14
15500: PPUSH
15501: LD_STRING D7a-Har-1
15503: PPUSH
15504: CALL_OW 94
// DialogueOff ;
15508: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15512: LD_STRING M2a
15514: PPUSH
15515: CALL_OW 337
// end ;
15519: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
15520: LD_EXP 27
15524: PUSH
15525: LD_INT 0
15527: LESSEQUAL
15528: PUSH
15529: LD_EXP 29
15533: PUSH
15534: LD_INT 3
15536: EQUAL
15537: AND
15538: PUSH
15539: LD_EXP 40
15543: NOT
15544: AND
15545: IFFALSE 15684
15547: GO 15549
15549: DISABLE
15550: LD_INT 0
15552: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15553: LD_ADDR_VAR 0 1
15557: PUSH
15558: LD_INT 22
15560: PUSH
15561: LD_INT 1
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PPUSH
15568: CALL_OW 69
15572: PUSH
15573: LD_EXP 1
15577: PUSH
15578: EMPTY
15579: LIST
15580: DIFF
15581: ST_TO_ADDR
// saveDonaldson = 2 ;
15582: LD_ADDR_EXP 24
15586: PUSH
15587: LD_INT 2
15589: ST_TO_ADDR
// DialogueOn ;
15590: CALL_OW 6
// if IsOK ( Donaldson ) then
15594: LD_EXP 13
15598: PPUSH
15599: CALL_OW 302
15603: IFFALSE 15619
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15605: LD_EXP 14
15609: PPUSH
15610: LD_STRING D8-Har-1
15612: PPUSH
15613: CALL_OW 94
// end else
15617: GO 15631
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15619: LD_EXP 14
15623: PPUSH
15624: LD_STRING D8-Har-1a
15626: PPUSH
15627: CALL_OW 94
// end ; DialogueOff ;
15631: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15635: LD_VAR 0 1
15639: PPUSH
15640: LD_INT 4
15642: PPUSH
15643: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15647: LD_VAR 0 1
15651: PPUSH
15652: LD_INT 88
15654: PPUSH
15655: LD_INT 89
15657: PPUSH
15658: CALL_OW 114
// honor = 0 ;
15662: LD_ADDR_EXP 39
15666: PUSH
15667: LD_INT 0
15669: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15670: LD_INT 350
15672: PPUSH
15673: CALL_OW 67
// YouLost ( LostCommand ) ;
15677: LD_STRING LostCommand
15679: PPUSH
15680: CALL_OW 104
// end ;
15684: PPOPN 1
15686: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15687: LD_INT 22
15689: PUSH
15690: LD_INT 6
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: LD_INT 21
15699: PUSH
15700: LD_INT 1
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PPUSH
15711: CALL_OW 69
15715: PUSH
15716: LD_INT 0
15718: EQUAL
15719: PUSH
15720: LD_EXP 20
15724: PUSH
15725: LD_INT 0
15727: EQUAL
15728: AND
15729: PUSH
15730: LD_EXP 44
15734: PUSH
15735: LD_INT 1
15737: EQUAL
15738: AND
15739: IFFALSE 15833
15741: GO 15743
15743: DISABLE
15744: LD_INT 0
15746: PPUSH
15747: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15748: LD_ADDR_VAR 0 2
15752: PUSH
15753: LD_INT 22
15755: PUSH
15756: LD_INT 1
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 21
15765: PUSH
15766: LD_INT 1
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: LD_INT 23
15775: PUSH
15776: LD_INT 1
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: LIST
15787: PPUSH
15788: CALL_OW 69
15792: ST_TO_ADDR
// for i in tmp do
15793: LD_ADDR_VAR 0 1
15797: PUSH
15798: LD_VAR 0 2
15802: PUSH
15803: FOR_IN
15804: IFFALSE 15831
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15806: LD_VAR 0 1
15810: PPUSH
15811: LD_INT 1
15813: PPUSH
15814: LD_INT 4
15816: PPUSH
15817: CALL_OW 12
15821: PPUSH
15822: LD_INT 500
15824: PPUSH
15825: CALL_OW 492
// end ;
15829: GO 15803
15831: POP
15832: POP
// end ; end_of_file
15833: PPOPN 2
15835: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15836: GO 15838
15838: DISABLE
15839: LD_INT 0
15841: PPUSH
// begin enemyWayX = [ ] ;
15842: LD_ADDR_EXP 50
15846: PUSH
15847: EMPTY
15848: ST_TO_ADDR
// enemyWayY = [ ] ;
15849: LD_ADDR_EXP 51
15853: PUSH
15854: EMPTY
15855: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15856: LD_ADDR_VAR 0 1
15860: PUSH
15861: LD_INT 1
15863: PPUSH
15864: LD_INT 3
15866: PPUSH
15867: CALL_OW 12
15871: ST_TO_ADDR
// if rnd = 1 then
15872: LD_VAR 0 1
15876: PUSH
15877: LD_INT 1
15879: EQUAL
15880: IFFALSE 15920
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15882: LD_ADDR_EXP 50
15886: PUSH
15887: LD_INT 73
15889: PUSH
15890: LD_INT 46
15892: PUSH
15893: LD_INT 29
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: LIST
15900: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15901: LD_ADDR_EXP 51
15905: PUSH
15906: LD_INT 71
15908: PUSH
15909: LD_INT 43
15911: PUSH
15912: LD_INT 29
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: LIST
15919: ST_TO_ADDR
// end ; if rnd = 2 then
15920: LD_VAR 0 1
15924: PUSH
15925: LD_INT 2
15927: EQUAL
15928: IFFALSE 15952
// begin enemyWayX = [ 64 ] ;
15930: LD_ADDR_EXP 50
15934: PUSH
15935: LD_INT 64
15937: PUSH
15938: EMPTY
15939: LIST
15940: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15941: LD_ADDR_EXP 51
15945: PUSH
15946: LD_INT 43
15948: PUSH
15949: EMPTY
15950: LIST
15951: ST_TO_ADDR
// end ; if rnd = 3 then
15952: LD_VAR 0 1
15956: PUSH
15957: LD_INT 3
15959: EQUAL
15960: IFFALSE 15984
// begin enemyWayX = [ 80 ] ;
15962: LD_ADDR_EXP 50
15966: PUSH
15967: LD_INT 80
15969: PUSH
15970: EMPTY
15971: LIST
15972: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15973: LD_ADDR_EXP 51
15977: PUSH
15978: LD_INT 28
15980: PUSH
15981: EMPTY
15982: LIST
15983: ST_TO_ADDR
// end ; enable ;
15984: ENABLE
// end ;
15985: PPOPN 1
15987: END
// every 0 0$1 trigger AIEnable = 1 do
15988: LD_EXP 37
15992: PUSH
15993: LD_INT 1
15995: EQUAL
15996: IFFALSE 16110
15998: GO 16000
16000: DISABLE
// begin enable ;
16001: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
16002: LD_INT 3
16004: PPUSH
16005: LD_INT 21
16007: PPUSH
16008: LD_INT 7
16010: PPUSH
16011: CALL 6082 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
16015: LD_INT 3
16017: PPUSH
16018: LD_INT 8
16020: PPUSH
16021: LD_INT 7
16023: PPUSH
16024: LD_INT 1
16026: PPUSH
16027: CALL 6403 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
16031: LD_INT 3
16033: PPUSH
16034: LD_INT 17
16036: PPUSH
16037: LD_INT 108
16039: PPUSH
16040: LD_INT 95
16042: PPUSH
16043: CALL 7727 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
16047: LD_INT 3
16049: PPUSH
16050: LD_INT 23
16052: PPUSH
16053: LD_EXP 50
16057: PPUSH
16058: LD_EXP 51
16062: PPUSH
16063: CALL 7059 0 4
// if baseReadyToBuild = 2 then
16067: LD_EXP 20
16071: PUSH
16072: LD_INT 2
16074: EQUAL
16075: IFFALSE 16110
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
16077: LD_INT 6
16079: PPUSH
16080: LD_EXP 21
16084: PPUSH
16085: LD_INT 6
16087: PPUSH
16088: CALL 6082 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
16092: LD_INT 6
16094: PPUSH
16095: LD_INT 9
16097: PPUSH
16098: LD_INT 6
16100: PPUSH
16101: LD_EXP 22
16105: PPUSH
16106: CALL 6403 0 4
// end ; end ;
16110: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
16111: LD_EXP 15
16115: PPUSH
16116: CALL_OW 310
16120: NOT
16121: PUSH
16122: LD_INT 21
16124: PPUSH
16125: CALL_OW 302
16129: AND
16130: PUSH
16131: LD_INT 21
16133: PPUSH
16134: CALL_OW 255
16138: PUSH
16139: LD_INT 3
16141: EQUAL
16142: AND
16143: IFFALSE 16161
16145: GO 16147
16147: DISABLE
// begin enable ;
16148: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
16149: LD_EXP 15
16153: PPUSH
16154: LD_INT 21
16156: PPUSH
16157: CALL_OW 120
// end ;
16161: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
16162: LD_INT 22
16164: PUSH
16165: LD_INT 3
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: LD_INT 21
16174: PUSH
16175: LD_INT 2
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 55
16184: PUSH
16185: EMPTY
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: LIST
16192: PPUSH
16193: CALL_OW 69
16197: PUSH
16198: LD_INT 0
16200: EQUAL
16201: PUSH
16202: LD_INT 1
16204: PPUSH
16205: CALL_OW 255
16209: PUSH
16210: LD_INT 3
16212: EQUAL
16213: AND
16214: PUSH
16215: LD_INT 21
16217: PPUSH
16218: CALL_OW 302
16222: AND
16223: PUSH
16224: LD_INT 21
16226: PPUSH
16227: CALL_OW 255
16231: PUSH
16232: LD_INT 3
16234: EQUAL
16235: AND
16236: PUSH
16237: LD_INT 21
16239: PPUSH
16240: CALL_OW 302
16244: AND
16245: IFFALSE 16457
16247: GO 16249
16249: DISABLE
// begin enable ;
16250: ENABLE
// if Difficulty = 1 then
16251: LD_OWVAR 67
16255: PUSH
16256: LD_INT 1
16258: EQUAL
16259: IFFALSE 16303
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
16261: LD_INT 3
16263: PPUSH
16264: LD_INT 24
16266: PPUSH
16267: LD_OWVAR 67
16271: PUSH
16272: LD_INT 2
16274: PLUS
16275: PPUSH
16276: LD_INT 42
16278: PUSH
16279: LD_INT 44
16281: PUSH
16282: LD_INT 43
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: LIST
16289: PPUSH
16290: LD_INT 1
16292: PPUSH
16293: LD_INT 1
16295: PPUSH
16296: LD_INT 21
16298: PPUSH
16299: CALL 6947 0 7
// if Difficulty = 2 then
16303: LD_OWVAR 67
16307: PUSH
16308: LD_INT 2
16310: EQUAL
16311: IFFALSE 16378
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
16313: LD_INT 3
16315: PPUSH
16316: LD_INT 24
16318: PPUSH
16319: LD_OWVAR 67
16323: PUSH
16324: LD_INT 2
16326: PLUS
16327: PPUSH
16328: LD_INT 44
16330: PUSH
16331: LD_INT 44
16333: PUSH
16334: LD_INT 43
16336: PUSH
16337: LD_INT 43
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: PPUSH
16346: LD_INT 1
16348: PPUSH
16349: LD_INT 1
16351: PPUSH
16352: LD_INT 21
16354: PUSH
16355: LD_INT 22
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 1
16364: PPUSH
16365: LD_INT 2
16367: PPUSH
16368: CALL_OW 12
16372: ARRAY
16373: PPUSH
16374: CALL 6947 0 7
// if Difficulty = 3 then
16378: LD_OWVAR 67
16382: PUSH
16383: LD_INT 3
16385: EQUAL
16386: IFFALSE 16457
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
16388: LD_INT 3
16390: PPUSH
16391: LD_INT 24
16393: PPUSH
16394: LD_OWVAR 67
16398: PUSH
16399: LD_INT 2
16401: PPUSH
16402: LD_INT 3
16404: PPUSH
16405: CALL_OW 12
16409: PLUS
16410: PPUSH
16411: LD_INT 44
16413: PUSH
16414: LD_INT 44
16416: PUSH
16417: LD_INT 43
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: LIST
16424: PPUSH
16425: LD_INT 1
16427: PPUSH
16428: LD_INT 1
16430: PPUSH
16431: LD_INT 22
16433: PUSH
16434: LD_INT 23
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 1
16443: PPUSH
16444: LD_INT 2
16446: PPUSH
16447: CALL_OW 12
16451: ARRAY
16452: PPUSH
16453: CALL 6947 0 7
// end ;
16457: END
// every 0 0$1 do
16458: GO 16460
16460: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
16461: LD_INT 3
16463: PPUSH
16464: LD_INT 1
16466: PPUSH
16467: LD_INT 3
16469: PPUSH
16470: CALL 5997 0 3
16474: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
16475: LD_EXP 20
16479: PUSH
16480: LD_INT 1
16482: EQUAL
16483: IFFALSE 16630
16485: GO 16487
16487: DISABLE
16488: LD_INT 0
16490: PPUSH
16491: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16492: LD_ADDR_VAR 0 2
16496: PUSH
16497: LD_INT 22
16499: PUSH
16500: LD_INT 6
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 21
16509: PUSH
16510: LD_INT 2
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 34
16519: PUSH
16520: LD_INT 51
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: PPUSH
16532: CALL_OW 69
16536: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16537: LD_VAR 0 2
16541: PUSH
16542: LD_INT 1
16544: ARRAY
16545: PPUSH
16546: LD_EXP 21
16550: PPUSH
16551: CALL_OW 250
16555: PUSH
16556: LD_INT 5
16558: MINUS
16559: PPUSH
16560: LD_EXP 21
16564: PPUSH
16565: CALL_OW 251
16569: PUSH
16570: LD_INT 5
16572: MINUS
16573: PPUSH
16574: CALL_OW 111
// wait ( 0 0$5 ) ;
16578: LD_INT 175
16580: PPUSH
16581: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16585: LD_VAR 0 2
16589: PUSH
16590: LD_INT 1
16592: ARRAY
16593: PPUSH
16594: LD_INT 41
16596: PPUSH
16597: LD_INT 52
16599: PPUSH
16600: CALL_OW 177
// wait ( 0 0$40 ) ;
16604: LD_INT 1400
16606: PPUSH
16607: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16611: LD_VAR 0 2
16615: PUSH
16616: LD_INT 1
16618: ARRAY
16619: PPUSH
16620: LD_INT 41
16622: PPUSH
16623: LD_INT 44
16625: PPUSH
16626: CALL_OW 111
// end ;
16630: PPOPN 2
16632: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16633: LD_EXP 21
16637: PPUSH
16638: CALL_OW 274
16642: PPUSH
16643: LD_INT 1
16645: PPUSH
16646: CALL_OW 275
16650: PUSH
16651: LD_INT 100
16653: GREATEREQUAL
16654: IFFALSE 16882
16656: GO 16658
16658: DISABLE
16659: LD_INT 0
16661: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16662: LD_ADDR_VAR 0 1
16666: PUSH
16667: LD_INT 22
16669: PUSH
16670: LD_INT 6
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 21
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 25
16689: PUSH
16690: LD_INT 2
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: PPUSH
16702: CALL_OW 69
16706: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16707: LD_VAR 0 1
16711: PUSH
16712: LD_INT 1
16714: ARRAY
16715: PPUSH
16716: LD_INT 4
16718: PPUSH
16719: LD_INT 39
16721: PPUSH
16722: LD_INT 37
16724: PPUSH
16725: LD_INT 3
16727: PPUSH
16728: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16732: LD_VAR 0 1
16736: PUSH
16737: LD_INT 1
16739: ARRAY
16740: PPUSH
16741: LD_INT 29
16743: PPUSH
16744: LD_INT 42
16746: PPUSH
16747: LD_INT 54
16749: PPUSH
16750: LD_INT 3
16752: PPUSH
16753: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16757: LD_VAR 0 1
16761: PUSH
16762: LD_INT 1
16764: ARRAY
16765: PPUSH
16766: LD_INT 6
16768: PPUSH
16769: LD_INT 38
16771: PPUSH
16772: LD_INT 48
16774: PPUSH
16775: LD_INT 0
16777: PPUSH
16778: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16782: LD_VAR 0 1
16786: PUSH
16787: LD_INT 1
16789: ARRAY
16790: PPUSH
16791: LD_INT 2
16793: PPUSH
16794: LD_INT 32
16796: PPUSH
16797: LD_INT 38
16799: PPUSH
16800: LD_INT 2
16802: PPUSH
16803: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16807: LD_VAR 0 1
16811: PUSH
16812: LD_INT 1
16814: ARRAY
16815: PPUSH
16816: LD_INT 26
16818: PPUSH
16819: LD_INT 39
16821: PPUSH
16822: LD_INT 55
16824: PPUSH
16825: LD_INT 3
16827: PPUSH
16828: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16832: LD_VAR 0 1
16836: PUSH
16837: LD_INT 1
16839: ARRAY
16840: PPUSH
16841: LD_INT 32
16843: PPUSH
16844: LD_INT 31
16846: PPUSH
16847: LD_INT 31
16849: PPUSH
16850: LD_INT 3
16852: PPUSH
16853: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16857: LD_VAR 0 1
16861: PUSH
16862: LD_INT 1
16864: ARRAY
16865: PPUSH
16866: LD_INT 31
16868: PPUSH
16869: LD_INT 50
16871: PPUSH
16872: LD_INT 51
16874: PPUSH
16875: LD_INT 4
16877: PPUSH
16878: CALL_OW 205
// end ;
16882: PPOPN 1
16884: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
16885: LD_EXP 46
16889: IFFALSE 17446
16891: GO 16893
16893: DISABLE
16894: LD_INT 0
16896: PPUSH
16897: PPUSH
16898: PPUSH
// begin enable ;
16899: ENABLE
// if not ruMobile then
16900: LD_EXP 46
16904: NOT
16905: IFFALSE 16909
// exit ;
16907: GO 17446
// for i in ruMobile do
16909: LD_ADDR_VAR 0 1
16913: PUSH
16914: LD_EXP 46
16918: PUSH
16919: FOR_IN
16920: IFFALSE 17444
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
16922: LD_VAR 0 1
16926: PPUSH
16927: CALL_OW 302
16931: NOT
16932: PUSH
16933: LD_VAR 0 1
16937: PPUSH
16938: CALL_OW 255
16942: PUSH
16943: LD_INT 3
16945: NONEQUAL
16946: OR
16947: IFFALSE 16967
// begin ruMobile := ruMobile diff i ;
16949: LD_ADDR_EXP 46
16953: PUSH
16954: LD_EXP 46
16958: PUSH
16959: LD_VAR 0 1
16963: DIFF
16964: ST_TO_ADDR
// continue ;
16965: GO 16919
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
16967: LD_VAR 0 1
16971: PPUSH
16972: CALL_OW 110
16976: NOT
16977: PUSH
16978: LD_VAR 0 1
16982: PPUSH
16983: CALL_OW 110
16987: PUSH
16988: LD_INT 0
16990: EQUAL
16991: OR
16992: IFFALSE 17107
// begin if GetFuel ( i ) < 50 then
16994: LD_VAR 0 1
16998: PPUSH
16999: CALL_OW 261
17003: PUSH
17004: LD_INT 50
17006: LESS
17007: IFFALSE 17066
// begin ComMoveXY ( i , 106 , 88 ) ;
17009: LD_VAR 0 1
17013: PPUSH
17014: LD_INT 106
17016: PPUSH
17017: LD_INT 88
17019: PPUSH
17020: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17024: LD_INT 35
17026: PPUSH
17027: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
17031: LD_VAR 0 1
17035: PPUSH
17036: LD_INT 106
17038: PPUSH
17039: LD_INT 88
17041: PPUSH
17042: CALL_OW 297
17046: PUSH
17047: LD_INT 4
17049: LESS
17050: IFFALSE 17024
// SetFuel ( i , 100 ) ;
17052: LD_VAR 0 1
17056: PPUSH
17057: LD_INT 100
17059: PPUSH
17060: CALL_OW 240
// end else
17064: GO 17107
// if not IsInArea ( i , ruParking ) then
17066: LD_VAR 0 1
17070: PPUSH
17071: LD_INT 25
17073: PPUSH
17074: CALL_OW 308
17078: NOT
17079: IFFALSE 17095
// ComMoveToArea ( i , ruParking ) else
17081: LD_VAR 0 1
17085: PPUSH
17086: LD_INT 25
17088: PPUSH
17089: CALL_OW 113
17093: GO 17107
// SetTag ( i , 1 ) ;
17095: LD_VAR 0 1
17099: PPUSH
17100: LD_INT 1
17102: PPUSH
17103: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
17107: LD_VAR 0 1
17111: PPUSH
17112: CALL_OW 110
17116: PUSH
17117: LD_INT 1
17119: EQUAL
17120: IFFALSE 17250
// begin if GetLives ( i ) < 1000 then
17122: LD_VAR 0 1
17126: PPUSH
17127: CALL_OW 256
17131: PUSH
17132: LD_INT 1000
17134: LESS
17135: IFFALSE 17227
// begin if not IsDrivenBy ( i ) then
17137: LD_VAR 0 1
17141: PPUSH
17142: CALL_OW 311
17146: NOT
17147: IFFALSE 17151
// continue ;
17149: GO 16919
// mech := IsDrivenBy ( i ) ;
17151: LD_ADDR_VAR 0 2
17155: PUSH
17156: LD_VAR 0 1
17160: PPUSH
17161: CALL_OW 311
17165: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
17166: LD_VAR 0 2
17170: PPUSH
17171: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
17175: LD_VAR 0 2
17179: PPUSH
17180: LD_VAR 0 1
17184: PPUSH
17185: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
17189: LD_INT 35
17191: PPUSH
17192: CALL_OW 67
// until GetLives ( i ) = 1000 ;
17196: LD_VAR 0 1
17200: PPUSH
17201: CALL_OW 256
17205: PUSH
17206: LD_INT 1000
17208: EQUAL
17209: IFFALSE 17189
// ComEnterUnit ( mech , i ) ;
17211: LD_VAR 0 2
17215: PPUSH
17216: LD_VAR 0 1
17220: PPUSH
17221: CALL_OW 120
// end else
17225: GO 17250
// if IsDrivenBy ( i ) then
17227: LD_VAR 0 1
17231: PPUSH
17232: CALL_OW 311
17236: IFFALSE 17250
// SetTag ( i , 2 ) ;
17238: LD_VAR 0 1
17242: PPUSH
17243: LD_INT 2
17245: PPUSH
17246: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
17250: LD_VAR 0 1
17254: PPUSH
17255: CALL_OW 110
17259: PUSH
17260: LD_INT 2
17262: EQUAL
17263: IFFALSE 17442
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
17265: LD_ADDR_VAR 0 3
17269: PUSH
17270: LD_INT 24
17272: PPUSH
17273: LD_INT 81
17275: PUSH
17276: LD_INT 3
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PPUSH
17283: CALL_OW 70
17287: ST_TO_ADDR
// if GetLives ( i ) < 650 then
17288: LD_VAR 0 1
17292: PPUSH
17293: CALL_OW 256
17297: PUSH
17298: LD_INT 650
17300: LESS
17301: IFFALSE 17326
// begin ComStop ( i ) ;
17303: LD_VAR 0 1
17307: PPUSH
17308: CALL_OW 141
// SetTag ( i , 0 ) ;
17312: LD_VAR 0 1
17316: PPUSH
17317: LD_INT 0
17319: PPUSH
17320: CALL_OW 109
// continue ;
17324: GO 16919
// end ; if enemy then
17326: LD_VAR 0 3
17330: IFFALSE 17370
// begin if not HasTask ( i ) then
17332: LD_VAR 0 1
17336: PPUSH
17337: CALL_OW 314
17341: NOT
17342: IFFALSE 17368
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17344: LD_VAR 0 1
17348: PPUSH
17349: LD_VAR 0 3
17353: PPUSH
17354: LD_VAR 0 1
17358: PPUSH
17359: CALL_OW 74
17363: PPUSH
17364: CALL_OW 115
// end else
17368: GO 17442
// if ruMobile > 2 then
17370: LD_EXP 46
17374: PUSH
17375: LD_INT 2
17377: GREATER
17378: IFFALSE 17442
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17380: LD_ADDR_VAR 0 3
17384: PUSH
17385: LD_INT 81
17387: PUSH
17388: LD_INT 3
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PPUSH
17395: CALL_OW 69
17399: ST_TO_ADDR
// if enemy then
17400: LD_VAR 0 3
17404: IFFALSE 17442
// if not HasTask ( i ) then
17406: LD_VAR 0 1
17410: PPUSH
17411: CALL_OW 314
17415: NOT
17416: IFFALSE 17442
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17418: LD_VAR 0 1
17422: PPUSH
17423: LD_VAR 0 3
17427: PPUSH
17428: LD_VAR 0 1
17432: PPUSH
17433: CALL_OW 74
17437: PPUSH
17438: CALL_OW 115
// end ; end ; end ;
17442: GO 16919
17444: POP
17445: POP
// end ; end_of_file
17446: PPOPN 3
17448: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
17449: LD_INT 0
17451: PPUSH
17452: PPUSH
17453: PPUSH
17454: PPUSH
17455: PPUSH
17456: PPUSH
17457: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
17458: LD_ADDR_VAR 0 3
17462: PUSH
17463: LD_INT 22
17465: PUSH
17466: LD_INT 6
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 21
17475: PUSH
17476: LD_INT 1
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 25
17485: PUSH
17486: LD_INT 1
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 3
17495: PUSH
17496: LD_INT 54
17498: PUSH
17499: EMPTY
17500: LIST
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: PPUSH
17512: CALL_OW 69
17516: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
17517: LD_ADDR_VAR 0 7
17521: PUSH
17522: LD_INT 22
17524: PUSH
17525: LD_INT 6
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 21
17534: PUSH
17535: LD_INT 1
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 25
17544: PUSH
17545: LD_INT 1
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 54
17554: PUSH
17555: EMPTY
17556: LIST
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: PPUSH
17564: CALL_OW 69
17568: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
17569: LD_ADDR_VAR 0 4
17573: PUSH
17574: LD_INT 22
17576: PUSH
17577: LD_INT 6
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 21
17586: PUSH
17587: LD_INT 1
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 25
17596: PUSH
17597: LD_INT 2
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: LIST
17608: PPUSH
17609: CALL_OW 69
17613: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
17614: LD_ADDR_VAR 0 6
17618: PUSH
17619: LD_INT 22
17621: PUSH
17622: LD_INT 6
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 21
17631: PUSH
17632: LD_INT 1
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 25
17641: PUSH
17642: LD_INT 4
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: LIST
17653: PPUSH
17654: CALL_OW 69
17658: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
17659: LD_ADDR_VAR 0 8
17663: PUSH
17664: LD_INT 22
17666: PUSH
17667: LD_INT 6
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 21
17676: PUSH
17677: LD_INT 2
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 34
17686: PUSH
17687: LD_INT 51
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: LIST
17698: PPUSH
17699: CALL_OW 69
17703: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
17704: LD_VAR 0 1
17708: PPUSH
17709: CALL_OW 255
17713: PUSH
17714: LD_INT 6
17716: EQUAL
17717: PUSH
17718: LD_VAR 0 1
17722: PPUSH
17723: CALL_OW 266
17727: PUSH
17728: LD_INT 0
17730: EQUAL
17731: AND
17732: IFFALSE 17752
// begin ruPDepot = building ;
17734: LD_ADDR_EXP 21
17738: PUSH
17739: LD_VAR 0 1
17743: ST_TO_ADDR
// baseReadyToBuild = 1 ;
17744: LD_ADDR_EXP 20
17748: PUSH
17749: LD_INT 1
17751: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
17752: LD_VAR 0 1
17756: PPUSH
17757: CALL_OW 266
17761: PUSH
17762: LD_INT 4
17764: EQUAL
17765: PUSH
17766: LD_VAR 0 1
17770: PPUSH
17771: CALL_OW 255
17775: PUSH
17776: LD_INT 6
17778: EQUAL
17779: AND
17780: IFFALSE 17813
// for i in tmpSold do
17782: LD_ADDR_VAR 0 2
17786: PUSH
17787: LD_VAR 0 3
17791: PUSH
17792: FOR_IN
17793: IFFALSE 17811
// ComEnterUnit ( i , building ) ;
17795: LD_VAR 0 2
17799: PPUSH
17800: LD_VAR 0 1
17804: PPUSH
17805: CALL_OW 120
17809: GO 17792
17811: POP
17812: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
17813: LD_VAR 0 1
17817: PPUSH
17818: CALL_OW 266
17822: PUSH
17823: LD_INT 6
17825: EQUAL
17826: PUSH
17827: LD_VAR 0 1
17831: PPUSH
17832: CALL_OW 255
17836: PUSH
17837: LD_INT 6
17839: EQUAL
17840: AND
17841: IFFALSE 17899
// begin for i in tmpSci do
17843: LD_ADDR_VAR 0 2
17847: PUSH
17848: LD_VAR 0 6
17852: PUSH
17853: FOR_IN
17854: IFFALSE 17872
// ComEnterUnit ( i , building ) ;
17856: LD_VAR 0 2
17860: PPUSH
17861: LD_VAR 0 1
17865: PPUSH
17866: CALL_OW 120
17870: GO 17853
17872: POP
17873: POP
// ResAllTechs ( 6 , building , 3 ) ;
17874: LD_INT 6
17876: PPUSH
17877: LD_VAR 0 1
17881: PPUSH
17882: LD_INT 3
17884: PPUSH
17885: CALL 5997 0 3
// ruPLab = building ;
17889: LD_ADDR_EXP 22
17893: PUSH
17894: LD_VAR 0 1
17898: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
17899: LD_VAR 0 1
17903: PPUSH
17904: CALL_OW 266
17908: PUSH
17909: LD_INT 2
17911: EQUAL
17912: PUSH
17913: LD_VAR 0 1
17917: PPUSH
17918: CALL_OW 255
17922: PUSH
17923: LD_INT 6
17925: EQUAL
17926: AND
17927: IFFALSE 17978
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
17929: LD_ADDR_VAR 0 5
17933: PUSH
17934: LD_VAR 0 8
17938: PUSH
17939: LD_INT 1
17941: ARRAY
17942: PPUSH
17943: CALL_OW 313
17947: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
17948: LD_VAR 0 5
17952: PPUSH
17953: CALL_OW 121
// wait ( 0 0$1 ) ;
17957: LD_INT 35
17959: PPUSH
17960: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
17964: LD_VAR 0 5
17968: PPUSH
17969: LD_VAR 0 1
17973: PPUSH
17974: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
17978: LD_VAR 0 1
17982: PPUSH
17983: CALL_OW 266
17987: PUSH
17988: LD_INT 32
17990: EQUAL
17991: PUSH
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL_OW 255
18001: PUSH
18002: LD_INT 6
18004: EQUAL
18005: AND
18006: IFFALSE 18058
// begin ComPlaceWeapon ( building , 42 ) ;
18008: LD_VAR 0 1
18012: PPUSH
18013: LD_INT 42
18015: PPUSH
18016: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
18020: LD_VAR 0 7
18024: PUSH
18025: LD_INT 1
18027: ARRAY
18028: PPUSH
18029: CALL_OW 122
// wait ( 0 0$1 ) ;
18033: LD_INT 35
18035: PPUSH
18036: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
18040: LD_VAR 0 7
18044: PUSH
18045: LD_INT 1
18047: ARRAY
18048: PPUSH
18049: LD_VAR 0 1
18053: PPUSH
18054: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
18058: LD_VAR 0 1
18062: PPUSH
18063: CALL_OW 266
18067: PUSH
18068: LD_INT 31
18070: EQUAL
18071: PUSH
18072: LD_VAR 0 1
18076: PPUSH
18077: CALL_OW 255
18081: PUSH
18082: LD_INT 6
18084: EQUAL
18085: AND
18086: IFFALSE 18152
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
18088: LD_VAR 0 7
18092: PUSH
18093: LD_INT 2
18095: ARRAY
18096: PPUSH
18097: CALL_OW 122
// wait ( 0 0$1 ) ;
18101: LD_INT 35
18103: PPUSH
18104: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
18108: LD_VAR 0 7
18112: PUSH
18113: LD_INT 2
18115: ARRAY
18116: PPUSH
18117: LD_VAR 0 1
18121: PPUSH
18122: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
18126: LD_VAR 0 4
18130: PUSH
18131: LD_INT 1
18133: ARRAY
18134: PPUSH
18135: LD_EXP 21
18139: PPUSH
18140: CALL_OW 120
// baseReadyToBuild = 2 ;
18144: LD_ADDR_EXP 20
18148: PUSH
18149: LD_INT 2
18151: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
18152: LD_VAR 0 1
18156: PPUSH
18157: CALL_OW 266
18161: PUSH
18162: LD_INT 32
18164: EQUAL
18165: PUSH
18166: LD_VAR 0 1
18170: PPUSH
18171: CALL_OW 255
18175: PUSH
18176: LD_INT 1
18178: EQUAL
18179: AND
18180: PUSH
18181: LD_EXP 32
18185: PUSH
18186: LD_INT 0
18188: EQUAL
18189: AND
18190: IFFALSE 18435
// begin bunkerDialog = 1 ;
18192: LD_ADDR_EXP 32
18196: PUSH
18197: LD_INT 1
18199: ST_TO_ADDR
// if IsOK ( Claptopn ) then
18200: LD_EXP 11
18204: PPUSH
18205: CALL_OW 302
18209: IFFALSE 18225
// begin Say ( Claptopn , D11-Eng1-1 ) ;
18211: LD_EXP 11
18215: PPUSH
18216: LD_STRING D11-Eng1-1
18218: PPUSH
18219: CALL_OW 88
// end else
18223: GO 18421
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18225: LD_INT 22
18227: PUSH
18228: LD_INT 1
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 21
18237: PUSH
18238: LD_INT 1
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 25
18247: PUSH
18248: LD_INT 3
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 26
18257: PUSH
18258: LD_INT 1
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: PPUSH
18271: CALL_OW 69
18275: PUSH
18276: LD_EXP 1
18280: PUSH
18281: EMPTY
18282: LIST
18283: PUSH
18284: LD_INT 0
18286: GREATER
18287: DIFF
18288: IFFALSE 18362
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18290: LD_INT 22
18292: PUSH
18293: LD_INT 1
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 21
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 25
18312: PUSH
18313: LD_INT 2
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 26
18322: PUSH
18323: LD_INT 1
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: PPUSH
18336: CALL_OW 69
18340: PUSH
18341: LD_EXP 1
18345: PUSH
18346: EMPTY
18347: LIST
18348: DIFF
18349: PPUSH
18350: LD_STRING D11-Eng1-1
18352: PPUSH
18353: LD_STRING D11-Eng1-1
18355: PPUSH
18356: CALL 4646 0 3
// end else
18360: GO 18421
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18362: LD_INT 22
18364: PUSH
18365: LD_INT 1
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 21
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 26
18384: PUSH
18385: LD_INT 1
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: LIST
18396: PPUSH
18397: CALL_OW 69
18401: PUSH
18402: LD_EXP 1
18406: PUSH
18407: EMPTY
18408: LIST
18409: DIFF
18410: PPUSH
18411: LD_STRING D11-Eng1-1
18413: PPUSH
18414: LD_STRING D11-Eng1-1
18416: PPUSH
18417: CALL 4646 0 3
// end ; end ; if energyVDialog = 0 then
18421: LD_EXP 33
18425: PUSH
18426: LD_INT 0
18428: EQUAL
18429: IFFALSE 18435
// EnergyDialog ;
18431: CALL 5049 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
18435: LD_VAR 0 1
18439: PPUSH
18440: CALL_OW 266
18444: PUSH
18445: LD_INT 29
18447: EQUAL
18448: PUSH
18449: LD_VAR 0 1
18453: PPUSH
18454: CALL_OW 255
18458: PUSH
18459: LD_INT 1
18461: EQUAL
18462: AND
18463: IFFALSE 18473
// buildOil = 1 ;
18465: LD_ADDR_EXP 34
18469: PUSH
18470: LD_INT 1
18472: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
18473: LD_VAR 0 1
18477: PPUSH
18478: CALL_OW 266
18482: PUSH
18483: LD_INT 26
18485: EQUAL
18486: PUSH
18487: LD_VAR 0 1
18491: PPUSH
18492: CALL_OW 255
18496: PUSH
18497: LD_INT 1
18499: EQUAL
18500: AND
18501: IFFALSE 18511
// buildPower = 1 ;
18503: LD_ADDR_EXP 35
18507: PUSH
18508: LD_INT 1
18510: ST_TO_ADDR
// end ;
18511: PPOPN 8
18513: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
18514: LD_VAR 0 1
18518: PPUSH
18519: CALL_OW 266
18523: PUSH
18524: LD_INT 3
18526: EQUAL
18527: PUSH
18528: LD_VAR 0 1
18532: PPUSH
18533: CALL_OW 255
18537: PUSH
18538: LD_INT 1
18540: EQUAL
18541: AND
18542: PUSH
18543: LD_EXP 31
18547: PUSH
18548: LD_INT 0
18550: EQUAL
18551: AND
18552: IFFALSE 18900
// begin factoryDialog = 1 ;
18554: LD_ADDR_EXP 31
18558: PUSH
18559: LD_INT 1
18561: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
18562: LD_INT 47
18564: PPUSH
18565: LD_INT 1
18567: PPUSH
18568: CALL_OW 321
18572: PUSH
18573: LD_INT 1
18575: EQUAL
18576: PUSH
18577: LD_INT 45
18579: PPUSH
18580: LD_INT 1
18582: PPUSH
18583: CALL_OW 321
18587: PUSH
18588: LD_INT 1
18590: EQUAL
18591: AND
18592: IFFALSE 18900
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18594: LD_INT 22
18596: PUSH
18597: LD_INT 1
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 21
18606: PUSH
18607: LD_INT 3
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 30
18616: PUSH
18617: LD_INT 3
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 24
18626: PUSH
18627: LD_INT 1000
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: PPUSH
18640: CALL_OW 69
18644: PUSH
18645: LD_INT 1
18647: ARRAY
18648: PPUSH
18649: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
18653: LD_EXP 1
18657: PPUSH
18658: LD_STRING D9a-JMM-1
18660: PPUSH
18661: CALL_OW 88
// if IsOK ( Campell ) then
18665: LD_EXP 12
18669: PPUSH
18670: CALL_OW 302
18674: IFFALSE 18690
// begin Say ( Campell , D9a-Mech1-1 ) ;
18676: LD_EXP 12
18680: PPUSH
18681: LD_STRING D9a-Mech1-1
18683: PPUSH
18684: CALL_OW 88
// end else
18688: GO 18886
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18690: LD_INT 22
18692: PUSH
18693: LD_INT 1
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 21
18702: PUSH
18703: LD_INT 1
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 25
18712: PUSH
18713: LD_INT 3
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 26
18722: PUSH
18723: LD_INT 1
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: PPUSH
18736: CALL_OW 69
18740: PUSH
18741: LD_EXP 1
18745: PUSH
18746: EMPTY
18747: LIST
18748: PUSH
18749: LD_INT 0
18751: GREATER
18752: DIFF
18753: IFFALSE 18827
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18755: LD_INT 22
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 21
18767: PUSH
18768: LD_INT 1
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 25
18777: PUSH
18778: LD_INT 3
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 26
18787: PUSH
18788: LD_INT 1
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: PPUSH
18801: CALL_OW 69
18805: PUSH
18806: LD_EXP 1
18810: PUSH
18811: EMPTY
18812: LIST
18813: DIFF
18814: PPUSH
18815: LD_STRING D9a-Mech1-1
18817: PPUSH
18818: LD_STRING D9a-Mech1-1
18820: PPUSH
18821: CALL 4646 0 3
// end else
18825: GO 18886
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18827: LD_INT 22
18829: PUSH
18830: LD_INT 1
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 21
18839: PUSH
18840: LD_INT 1
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 26
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: LIST
18861: PPUSH
18862: CALL_OW 69
18866: PUSH
18867: LD_EXP 1
18871: PUSH
18872: EMPTY
18873: LIST
18874: DIFF
18875: PPUSH
18876: LD_STRING D9a-Mech1-1
18878: PPUSH
18879: LD_STRING D9a-Mech1-1
18881: PPUSH
18882: CALL 4646 0 3
// end ; end ; if energyVDialog = 0 then
18886: LD_EXP 33
18890: PUSH
18891: LD_INT 0
18893: EQUAL
18894: IFFALSE 18900
// EnergyDialog ;
18896: CALL 5049 0 0
// end ; end ; end ;
18900: PPOPN 1
18902: END
// on UnitDestroyed ( unit ) do var mech ;
18903: LD_INT 0
18905: PPUSH
// begin if unit = JMM then
18906: LD_VAR 0 1
18910: PUSH
18911: LD_EXP 1
18915: EQUAL
18916: IFFALSE 18925
// YouLost ( JMM ) ;
18918: LD_STRING JMM
18920: PPUSH
18921: CALL_OW 104
// if unit in ruMobile then
18925: LD_VAR 0 1
18929: PUSH
18930: LD_EXP 46
18934: IN
18935: IFFALSE 18953
// ruMobile = ruMobile diff ruMobile ;
18937: LD_ADDR_EXP 46
18941: PUSH
18942: LD_EXP 46
18946: PUSH
18947: LD_EXP 46
18951: DIFF
18952: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
18953: LD_VAR 0 1
18957: PPUSH
18958: CALL_OW 247
18962: PUSH
18963: LD_INT 1
18965: EQUAL
18966: PUSH
18967: LD_VAR 0 1
18971: PPUSH
18972: CALL_OW 255
18976: PUSH
18977: LD_INT 1
18979: EQUAL
18980: AND
18981: IFFALSE 18997
// lostCounter = lostCounter + 1 ;
18983: LD_ADDR_EXP 38
18987: PUSH
18988: LD_EXP 38
18992: PUSH
18993: LD_INT 1
18995: PLUS
18996: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
18997: LD_EXP 43
19001: PUSH
19002: LD_INT 24
19004: PPUSH
19005: CALL_OW 313
19009: PUSH
19010: LD_INT 6
19012: LESS
19013: AND
19014: PUSH
19015: LD_VAR 0 1
19019: PPUSH
19020: CALL_OW 257
19024: PUSH
19025: LD_INT 3
19027: EQUAL
19028: AND
19029: PUSH
19030: LD_VAR 0 1
19034: PPUSH
19035: CALL_OW 255
19039: PUSH
19040: LD_INT 3
19042: EQUAL
19043: AND
19044: PUSH
19045: LD_INT 24
19047: PPUSH
19048: CALL_OW 302
19052: AND
19053: PUSH
19054: LD_INT 24
19056: PPUSH
19057: CALL_OW 255
19061: PUSH
19062: LD_INT 3
19064: EQUAL
19065: AND
19066: IFFALSE 19195
// begin ruMech := ruMech - 1 ;
19068: LD_ADDR_EXP 43
19072: PUSH
19073: LD_EXP 43
19077: PUSH
19078: LD_INT 1
19080: MINUS
19081: ST_TO_ADDR
// if ruMech = 0 then
19082: LD_EXP 43
19086: PUSH
19087: LD_INT 0
19089: EQUAL
19090: IFFALSE 19094
// exit ;
19092: GO 19195
// wait ( 0 0$40 ) ;
19094: LD_INT 1400
19096: PPUSH
19097: CALL_OW 67
// uc_side = 3 ;
19101: LD_ADDR_OWVAR 20
19105: PUSH
19106: LD_INT 3
19108: ST_TO_ADDR
// uc_nation = 3 ;
19109: LD_ADDR_OWVAR 21
19113: PUSH
19114: LD_INT 3
19116: ST_TO_ADDR
// hc_gallery :=  ;
19117: LD_ADDR_OWVAR 33
19121: PUSH
19122: LD_STRING 
19124: ST_TO_ADDR
// hc_name :=  ;
19125: LD_ADDR_OWVAR 26
19129: PUSH
19130: LD_STRING 
19132: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
19133: LD_INT 0
19135: PPUSH
19136: LD_EXP 16
19140: PPUSH
19141: LD_EXP 17
19145: PPUSH
19146: CALL_OW 12
19150: PPUSH
19151: CALL_OW 383
// mech := CreateHuman ;
19155: LD_ADDR_VAR 0 2
19159: PUSH
19160: CALL_OW 44
19164: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
19165: LD_VAR 0 2
19169: PPUSH
19170: LD_INT 124
19172: PPUSH
19173: LD_INT 97
19175: PPUSH
19176: LD_INT 0
19178: PPUSH
19179: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
19183: LD_VAR 0 2
19187: PPUSH
19188: LD_INT 24
19190: PPUSH
19191: CALL_OW 120
// end ; end ;
19195: PPOPN 2
19197: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
19198: LD_INT 0
19200: PPUSH
// begin if GetSide ( vehicle ) = 1 then
19201: LD_VAR 0 1
19205: PPUSH
19206: CALL_OW 255
19210: PUSH
19211: LD_INT 1
19213: EQUAL
19214: IFFALSE 19230
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
19216: LD_ADDR_EXP 42
19220: PUSH
19221: LD_EXP 42
19225: PUSH
19226: LD_INT 1
19228: PLUS
19229: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
19230: LD_VAR 0 1
19234: PPUSH
19235: CALL_OW 255
19239: PUSH
19240: LD_INT 3
19242: EQUAL
19243: PUSH
19244: LD_VAR 0 1
19248: PPUSH
19249: CALL_OW 264
19253: PUSH
19254: LD_INT 42
19256: PUSH
19257: LD_INT 43
19259: PUSH
19260: LD_INT 44
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: LIST
19267: IN
19268: AND
19269: IFFALSE 19287
// ruMobile := ruMobile union vehicle ;
19271: LD_ADDR_EXP 46
19275: PUSH
19276: LD_EXP 46
19280: PUSH
19281: LD_VAR 0 1
19285: UNION
19286: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 53 then
19287: LD_VAR 0 1
19291: PPUSH
19292: CALL_OW 264
19296: PUSH
19297: LD_INT 53
19299: EQUAL
19300: IFFALSE 19436
// begin uc_side = 3 ;
19302: LD_ADDR_OWVAR 20
19306: PUSH
19307: LD_INT 3
19309: ST_TO_ADDR
// uc_nation = 3 ;
19310: LD_ADDR_OWVAR 21
19314: PUSH
19315: LD_INT 3
19317: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
19318: LD_INT 0
19320: PPUSH
19321: LD_EXP 17
19325: PPUSH
19326: CALL_OW 383
// driver := CreateHuman ;
19330: LD_ADDR_VAR 0 3
19334: PUSH
19335: CALL_OW 44
19339: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
19340: LD_VAR 0 3
19344: PPUSH
19345: LD_VAR 0 2
19349: PPUSH
19350: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
19354: LD_VAR 0 1
19358: PPUSH
19359: LD_INT 21
19361: PPUSH
19362: CALL 5265 0 2
// repeat wait ( 0 0$1 ) ;
19366: LD_INT 35
19368: PPUSH
19369: CALL_OW 67
// until not HasTask ( vehicle ) ;
19373: LD_VAR 0 1
19377: PPUSH
19378: CALL_OW 314
19382: NOT
19383: IFFALSE 19366
// driver := IsDrivenBy ( vehicle ) ;
19385: LD_ADDR_VAR 0 3
19389: PUSH
19390: LD_VAR 0 1
19394: PPUSH
19395: CALL_OW 311
19399: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
19400: LD_VAR 0 3
19404: PPUSH
19405: LD_INT 104
19407: PPUSH
19408: LD_INT 73
19410: PPUSH
19411: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19415: LD_VAR 0 3
19419: PPUSH
19420: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
19424: LD_VAR 0 3
19428: PPUSH
19429: LD_INT 24
19431: PPUSH
19432: CALL_OW 180
// end ; end ;
19436: PPOPN 3
19438: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
19439: LD_INT 0
19441: PPUSH
19442: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
19443: LD_VAR 0 1
19447: PPUSH
19448: CALL_OW 255
19452: PUSH
19453: LD_INT 3
19455: EQUAL
19456: PUSH
19457: LD_VAR 0 1
19461: PPUSH
19462: CALL_OW 247
19466: PUSH
19467: LD_INT 2
19469: EQUAL
19470: AND
19471: IFFALSE 19565
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
19473: LD_VAR 0 1
19477: PPUSH
19478: CALL_OW 264
19482: PUSH
19483: LD_INT 42
19485: EQUAL
19486: PUSH
19487: LD_VAR 0 1
19491: PPUSH
19492: CALL_OW 264
19496: PUSH
19497: LD_INT 43
19499: EQUAL
19500: OR
19501: PUSH
19502: LD_VAR 0 1
19506: PPUSH
19507: CALL_OW 264
19511: PUSH
19512: LD_INT 44
19514: EQUAL
19515: OR
19516: IFFALSE 19565
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
19518: LD_INT 24
19520: PPUSH
19521: LD_VAR 0 1
19525: PPUSH
19526: CALL_OW 265
19530: PPUSH
19531: LD_VAR 0 1
19535: PPUSH
19536: CALL_OW 262
19540: PPUSH
19541: LD_VAR 0 1
19545: PPUSH
19546: CALL_OW 263
19550: PPUSH
19551: LD_VAR 0 1
19555: PPUSH
19556: CALL_OW 264
19560: PPUSH
19561: CALL_OW 185
// end ;
19565: PPOPN 3
19567: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
19568: LD_VAR 0 1
19572: PPUSH
19573: CALL_OW 255
19577: PUSH
19578: LD_INT 3
19580: EQUAL
19581: PUSH
19582: LD_VAR 0 2
19586: PPUSH
19587: CALL_OW 255
19591: PUSH
19592: LD_INT 3
19594: EQUAL
19595: AND
19596: PUSH
19597: LD_INT 24
19599: PPUSH
19600: CALL_OW 302
19604: AND
19605: PUSH
19606: LD_VAR 0 1
19610: PPUSH
19611: CALL_OW 302
19615: NOT
19616: AND
19617: IFFALSE 19631
// ComEnterUnit ( human , rubfact0 ) ;
19619: LD_VAR 0 2
19623: PPUSH
19624: LD_INT 24
19626: PPUSH
19627: CALL_OW 120
// end ;
19631: PPOPN 2
19633: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
19634: LD_VAR 0 1
19638: PUSH
19639: LD_INT 24
19641: EQUAL
19642: PUSH
19643: LD_VAR 0 2
19647: PPUSH
19648: CALL_OW 256
19652: PUSH
19653: LD_INT 1000
19655: LESS
19656: AND
19657: IFFALSE 19671
// SetLives ( un , 1000 ) ;
19659: LD_VAR 0 2
19663: PPUSH
19664: LD_INT 1000
19666: PPUSH
19667: CALL_OW 234
// end ;
19671: PPOPN 2
19673: END
// on Command ( comandid ) do var i , j , tmp ;
19674: LD_INT 0
19676: PPUSH
19677: PPUSH
19678: PPUSH
// begin SOS_Command ( comandid ) ;
19679: LD_VAR 0 1
19683: PPUSH
19684: CALL 33838 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
19688: LD_INT 22
19690: PUSH
19691: LD_INT 4
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PPUSH
19698: CALL_OW 69
19702: NOT
19703: IFFALSE 19707
// exit ;
19705: GO 19872
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
19707: LD_ADDR_VAR 0 2
19711: PUSH
19712: LD_INT 22
19714: PUSH
19715: LD_INT 1
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: LD_INT 2
19724: PUSH
19725: LD_INT 21
19727: PUSH
19728: LD_INT 1
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 21
19737: PUSH
19738: LD_INT 2
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: LIST
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PPUSH
19754: CALL_OW 69
19758: PUSH
19759: FOR_IN
19760: IFFALSE 19870
// begin if GetTaskList ( i ) > 0 then
19762: LD_VAR 0 2
19766: PPUSH
19767: CALL_OW 437
19771: PUSH
19772: LD_INT 0
19774: GREATER
19775: IFFALSE 19868
// begin for j = 1 to GetTaskList ( i ) do
19777: LD_ADDR_VAR 0 3
19781: PUSH
19782: DOUBLE
19783: LD_INT 1
19785: DEC
19786: ST_TO_ADDR
19787: LD_VAR 0 2
19791: PPUSH
19792: CALL_OW 437
19796: PUSH
19797: FOR_TO
19798: IFFALSE 19866
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
19800: LD_ADDR_VAR 0 4
19804: PUSH
19805: LD_VAR 0 2
19809: PPUSH
19810: CALL_OW 437
19814: PUSH
19815: LD_VAR 0 3
19819: ARRAY
19820: PUSH
19821: LD_INT 4
19823: ARRAY
19824: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
19825: LD_VAR 0 4
19829: PPUSH
19830: CALL_OW 255
19834: PUSH
19835: LD_INT 4
19837: EQUAL
19838: PUSH
19839: LD_VAR 0 4
19843: PPUSH
19844: CALL_OW 255
19848: PUSH
19849: LD_INT 0
19851: EQUAL
19852: OR
19853: IFFALSE 19864
// ComStop ( i ) ;
19855: LD_VAR 0 2
19859: PPUSH
19860: CALL_OW 141
// end ;
19864: GO 19797
19866: POP
19867: POP
// end ; end ;
19868: GO 19759
19870: POP
19871: POP
// end ; end_of_file
19872: PPOPN 4
19874: END
// every 10 10$0 do
19875: GO 19877
19877: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
19878: LD_INT 5
19880: PPUSH
19881: LD_INT 3
19883: PPUSH
19884: LD_INT 2
19886: PUSH
19887: LD_INT 2
19889: PUSH
19890: LD_INT 3
19892: PUSH
19893: LD_INT 4
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: LIST
19900: PUSH
19901: LD_OWVAR 67
19905: ARRAY
19906: PLUS
19907: PPUSH
19908: LD_INT 0
19910: PPUSH
19911: LD_INT 0
19913: PPUSH
19914: LD_INT 0
19916: PPUSH
19917: LD_INT 0
19919: PPUSH
19920: LD_EXP 16
19924: PPUSH
19925: LD_EXP 17
19929: PPUSH
19930: CALL_OW 12
19934: PPUSH
19935: LD_INT 4
19937: PPUSH
19938: LD_INT 14
19940: PPUSH
19941: LD_INT 1
19943: PPUSH
19944: LD_INT 2
19946: PPUSH
19947: CALL 7970 0 12
// end ;
19951: END
// every 20 20$0 do
19952: GO 19954
19954: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
19955: LD_INT 5
19957: PPUSH
19958: LD_INT 3
19960: PPUSH
19961: LD_INT 4
19963: PUSH
19964: LD_INT 2
19966: PUSH
19967: LD_INT 3
19969: PUSH
19970: LD_INT 4
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: LIST
19977: PUSH
19978: LD_OWVAR 67
19982: ARRAY
19983: PLUS
19984: PPUSH
19985: LD_INT 0
19987: PPUSH
19988: LD_INT 0
19990: PPUSH
19991: LD_INT 0
19993: PPUSH
19994: LD_INT 2
19996: PPUSH
19997: LD_EXP 16
20001: PPUSH
20002: LD_EXP 17
20006: PPUSH
20007: CALL_OW 12
20011: PPUSH
20012: LD_INT 4
20014: PPUSH
20015: LD_INT 14
20017: PPUSH
20018: LD_INT 1
20020: PPUSH
20021: LD_INT 1
20023: PPUSH
20024: CALL 7970 0 12
// end ;
20028: END
// every 25 25$0 do
20029: GO 20031
20031: DISABLE
// begin if Difficulty > 1 then
20032: LD_OWVAR 67
20036: PUSH
20037: LD_INT 1
20039: GREATER
20040: IFFALSE 20050
// specAttack := true ;
20042: LD_ADDR_EXP 47
20046: PUSH
20047: LD_INT 1
20049: ST_TO_ADDR
// RespawnAttackVehicle ( RussianAttack , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
20050: LD_INT 4
20052: PPUSH
20053: LD_INT 5
20055: PPUSH
20056: LD_INT 4
20058: PUSH
20059: LD_INT 5
20061: PUSH
20062: LD_INT 6
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: LIST
20069: PUSH
20070: LD_OWVAR 67
20074: ARRAY
20075: PPUSH
20076: LD_EXP 16
20080: PPUSH
20081: LD_EXP 17
20085: PPUSH
20086: CALL_OW 12
20090: PPUSH
20091: LD_INT 3
20093: PPUSH
20094: LD_INT 1
20096: PPUSH
20097: LD_INT 1
20099: PPUSH
20100: LD_INT 42
20102: PUSH
20103: LD_INT 42
20105: PUSH
20106: LD_INT 43
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 42
20116: PUSH
20117: LD_INT 43
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 43
20126: PUSH
20127: LD_INT 43
20129: PUSH
20130: LD_INT 43
20132: PUSH
20133: LD_INT 44
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: LIST
20146: PUSH
20147: LD_OWVAR 67
20151: ARRAY
20152: PPUSH
20153: EMPTY
20154: PPUSH
20155: EMPTY
20156: PPUSH
20157: LD_INT 1
20159: PPUSH
20160: CALL 9726 0 11
// end ;
20164: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
20165: LD_EXP 47
20169: IFFALSE 20532
20171: GO 20173
20173: DISABLE
20174: LD_INT 0
20176: PPUSH
20177: PPUSH
20178: PPUSH
20179: PPUSH
// begin wait ( 0 0$20 ) ;
20180: LD_INT 700
20182: PPUSH
20183: CALL_OW 67
// uc_side := 5 ;
20187: LD_ADDR_OWVAR 20
20191: PUSH
20192: LD_INT 5
20194: ST_TO_ADDR
// uc_nation := 3 ;
20195: LD_ADDR_OWVAR 21
20199: PUSH
20200: LD_INT 3
20202: ST_TO_ADDR
// InitHc ;
20203: CALL_OW 19
// hc_importance := 0 ;
20207: LD_ADDR_OWVAR 32
20211: PUSH
20212: LD_INT 0
20214: ST_TO_ADDR
// tmp := [ ] ;
20215: LD_ADDR_VAR 0 2
20219: PUSH
20220: EMPTY
20221: ST_TO_ADDR
// PrepareHuman ( false , 2 , 6 ) ;
20222: LD_INT 0
20224: PPUSH
20225: LD_INT 2
20227: PPUSH
20228: LD_INT 6
20230: PPUSH
20231: CALL_OW 380
// eng := CreateHuman ;
20235: LD_ADDR_VAR 0 4
20239: PUSH
20240: CALL_OW 44
20244: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
20245: LD_VAR 0 4
20249: PPUSH
20250: LD_INT 78
20252: PPUSH
20253: LD_INT 2
20255: PPUSH
20256: LD_INT 4
20258: PPUSH
20259: LD_INT 0
20261: PPUSH
20262: CALL_OW 50
// for i = 1 to 2 + Difficulty do
20266: LD_ADDR_VAR 0 3
20270: PUSH
20271: DOUBLE
20272: LD_INT 1
20274: DEC
20275: ST_TO_ADDR
20276: LD_INT 2
20278: PUSH
20279: LD_OWVAR 67
20283: PLUS
20284: PUSH
20285: FOR_TO
20286: IFFALSE 20367
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
20288: LD_INT 0
20290: PPUSH
20291: LD_INT 1
20293: PPUSH
20294: LD_INT 4
20296: PUSH
20297: LD_INT 5
20299: PUSH
20300: LD_INT 6
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: LIST
20307: PUSH
20308: LD_OWVAR 67
20312: ARRAY
20313: PPUSH
20314: CALL_OW 380
// un := CreateHuman ;
20318: LD_ADDR_VAR 0 1
20322: PUSH
20323: CALL_OW 44
20327: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
20328: LD_VAR 0 1
20332: PPUSH
20333: LD_INT 78
20335: PPUSH
20336: LD_INT 2
20338: PPUSH
20339: LD_INT 4
20341: PPUSH
20342: LD_INT 0
20344: PPUSH
20345: CALL_OW 50
// tmp := tmp ^ un ;
20349: LD_ADDR_VAR 0 2
20353: PUSH
20354: LD_VAR 0 2
20358: PUSH
20359: LD_VAR 0 1
20363: ADD
20364: ST_TO_ADDR
// end ;
20365: GO 20285
20367: POP
20368: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
20369: LD_VAR 0 2
20373: PPUSH
20374: LD_INT 49
20376: PPUSH
20377: LD_INT 3
20379: PPUSH
20380: CALL_OW 111
// wait ( 0 0$2 ) ;
20384: LD_INT 70
20386: PPUSH
20387: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
20391: LD_VAR 0 4
20395: PPUSH
20396: LD_INT 49
20398: PPUSH
20399: LD_INT 3
20401: PPUSH
20402: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
20406: LD_VAR 0 4
20410: PPUSH
20411: LD_INT 4
20413: PPUSH
20414: CALL_OW 227
// wait ( 0 0$10 ) ;
20418: LD_INT 350
20420: PPUSH
20421: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20425: LD_INT 35
20427: PPUSH
20428: CALL_OW 67
// for i in tmp do
20432: LD_ADDR_VAR 0 3
20436: PUSH
20437: LD_VAR 0 2
20441: PUSH
20442: FOR_IN
20443: IFFALSE 20523
// if not IsOk ( i ) then
20445: LD_VAR 0 3
20449: PPUSH
20450: CALL_OW 302
20454: NOT
20455: IFFALSE 20475
// tmp := tmp diff i else
20457: LD_ADDR_VAR 0 2
20461: PUSH
20462: LD_VAR 0 2
20466: PUSH
20467: LD_VAR 0 3
20471: DIFF
20472: ST_TO_ADDR
20473: GO 20521
// if not HasTask ( i ) then
20475: LD_VAR 0 3
20479: PPUSH
20480: CALL_OW 314
20484: NOT
20485: IFFALSE 20521
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
20487: LD_VAR 0 3
20491: PPUSH
20492: LD_INT 22
20494: PUSH
20495: LD_INT 1
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PPUSH
20502: CALL_OW 69
20506: PPUSH
20507: LD_VAR 0 3
20511: PPUSH
20512: CALL_OW 74
20516: PPUSH
20517: CALL_OW 115
20521: GO 20442
20523: POP
20524: POP
// until not tmp ;
20525: LD_VAR 0 2
20529: NOT
20530: IFFALSE 20425
// end ; end_of_file
20532: PPOPN 4
20534: END
// every 0 0$1 trigger startTimer = 1 do
20535: LD_EXP 30
20539: PUSH
20540: LD_INT 1
20542: EQUAL
20543: IFFALSE 20673
20545: GO 20547
20547: DISABLE
// begin enable ;
20548: ENABLE
// if timerStatus = 1 then
20549: LD_EXP 29
20553: PUSH
20554: LD_INT 1
20556: EQUAL
20557: IFFALSE 20590
// begin timeToSupport = timeToSupport - 0 0$01 ;
20559: LD_ADDR_EXP 28
20563: PUSH
20564: LD_EXP 28
20568: PUSH
20569: LD_INT 35
20571: MINUS
20572: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
20573: LD_ADDR_OWVAR 47
20577: PUSH
20578: LD_STRING #Am04-1
20580: PUSH
20581: LD_EXP 28
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: ST_TO_ADDR
// end ; if timerStatus = 2 then
20590: LD_EXP 29
20594: PUSH
20595: LD_INT 2
20597: EQUAL
20598: IFFALSE 20631
// begin timeToSupport = timeToSupport - 0 0$01 ;
20600: LD_ADDR_EXP 28
20604: PUSH
20605: LD_EXP 28
20609: PUSH
20610: LD_INT 35
20612: MINUS
20613: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
20614: LD_ADDR_OWVAR 47
20618: PUSH
20619: LD_STRING #Am04-2
20621: PUSH
20622: LD_EXP 28
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: ST_TO_ADDR
// end ; if timerStatus = 3 then
20631: LD_EXP 29
20635: PUSH
20636: LD_INT 3
20638: EQUAL
20639: IFFALSE 20655
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
20641: LD_ADDR_EXP 27
20645: PUSH
20646: LD_EXP 27
20650: PUSH
20651: LD_INT 35
20653: MINUS
20654: ST_TO_ADDR
// end ; if timerStatus = 4 then
20655: LD_EXP 29
20659: PUSH
20660: LD_INT 4
20662: EQUAL
20663: IFFALSE 20673
// begin display_strings =  ;
20665: LD_ADDR_OWVAR 47
20669: PUSH
20670: LD_STRING 
20672: ST_TO_ADDR
// end ; end ; end_of_file
20673: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
20674: LD_INT 4
20676: PPUSH
20677: CALL_OW 301
20681: IFFALSE 20693
20683: GO 20685
20685: DISABLE
// YouLost ( Base ) ; end_of_file
20686: LD_STRING Base
20688: PPUSH
20689: CALL_OW 104
20693: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , tmp , p ;
20694: LD_EXP 15
20698: PPUSH
20699: CALL_OW 301
20703: PUSH
20704: LD_INT 22
20706: PUSH
20707: LD_INT 3
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 21
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PPUSH
20728: CALL_OW 69
20732: PUSH
20733: LD_INT 14
20735: PUSH
20736: LD_INT 13
20738: PUSH
20739: LD_INT 12
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: LIST
20746: PUSH
20747: LD_OWVAR 67
20751: ARRAY
20752: LESS
20753: AND
20754: IFFALSE 21340
20756: GO 20758
20758: DISABLE
20759: LD_INT 0
20761: PPUSH
20762: PPUSH
20763: PPUSH
// begin AIEnable = 0 ;
20764: LD_ADDR_EXP 37
20768: PUSH
20769: LD_INT 0
20771: ST_TO_ADDR
// escapeAvalaible = 1 ;
20772: LD_ADDR_EXP 40
20776: PUSH
20777: LD_INT 1
20779: ST_TO_ADDR
// Video ( true ) ;
20780: LD_INT 1
20782: PPUSH
20783: CALL 4372 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
20787: LD_INT 3
20789: PPUSH
20790: LD_INT 1
20792: PPUSH
20793: LD_INT 1
20795: PPUSH
20796: LD_INT 0
20798: PPUSH
20799: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
20803: LD_INT 6
20805: PPUSH
20806: LD_INT 1
20808: PPUSH
20809: LD_INT 1
20811: PPUSH
20812: LD_INT 0
20814: PPUSH
20815: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
20819: LD_INT 5
20821: PPUSH
20822: LD_INT 1
20824: PPUSH
20825: LD_INT 1
20827: PPUSH
20828: LD_INT 0
20830: PPUSH
20831: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
20835: LD_INT 3
20837: PPUSH
20838: LD_INT 1
20840: PPUSH
20841: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
20845: LD_INT 97
20847: PPUSH
20848: LD_INT 91
20850: PPUSH
20851: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
20855: LD_INT 22
20857: PUSH
20858: LD_INT 3
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 21
20867: PUSH
20868: LD_INT 1
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PPUSH
20879: CALL_OW 69
20883: PPUSH
20884: CALL_OW 121
// wait ( 0 0$01 ) ;
20888: LD_INT 35
20890: PPUSH
20891: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20895: LD_INT 22
20897: PUSH
20898: LD_INT 3
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 21
20907: PUSH
20908: LD_INT 1
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PPUSH
20919: CALL_OW 69
20923: PPUSH
20924: LD_INT 124
20926: PPUSH
20927: LD_INT 98
20929: PPUSH
20930: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
20934: LD_INT 22
20936: PUSH
20937: LD_INT 5
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 21
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PPUSH
20958: CALL_OW 69
20962: PPUSH
20963: CALL_OW 121
// wait ( 0 0$01 ) ;
20967: LD_INT 35
20969: PPUSH
20970: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20974: LD_INT 22
20976: PUSH
20977: LD_INT 5
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 21
20986: PUSH
20987: LD_INT 1
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PPUSH
20998: CALL_OW 69
21002: PPUSH
21003: LD_INT 124
21005: PPUSH
21006: LD_INT 98
21008: PPUSH
21009: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
21013: LD_INT 22
21015: PUSH
21016: LD_INT 6
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 21
21025: PUSH
21026: LD_INT 1
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PPUSH
21037: CALL_OW 69
21041: PPUSH
21042: CALL_OW 121
// wait ( 0 0$01 ) ;
21046: LD_INT 35
21048: PPUSH
21049: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21053: LD_INT 22
21055: PUSH
21056: LD_INT 6
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 21
21065: PUSH
21066: LD_INT 1
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PPUSH
21077: CALL_OW 69
21081: PPUSH
21082: LD_INT 124
21084: PPUSH
21085: LD_INT 98
21087: PPUSH
21088: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
21092: LD_INT 22
21094: PUSH
21095: LD_INT 1
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 21
21104: PUSH
21105: LD_INT 1
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PPUSH
21116: CALL_OW 69
21120: PPUSH
21121: LD_INT 124
21123: PPUSH
21124: LD_INT 96
21126: PPUSH
21127: CALL_OW 114
// wait ( 0 0$1 ) ;
21131: LD_INT 35
21133: PPUSH
21134: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
21138: LD_INT 124
21140: PPUSH
21141: LD_INT 96
21143: PPUSH
21144: CALL_OW 84
// p := 0 0$0 ;
21148: LD_ADDR_VAR 0 3
21152: PUSH
21153: LD_INT 0
21155: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
21156: LD_ADDR_VAR 0 2
21160: PUSH
21161: LD_INT 2
21163: PUSH
21164: LD_INT 22
21166: PUSH
21167: LD_INT 3
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 22
21176: PUSH
21177: LD_INT 6
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 21
21191: PUSH
21192: LD_INT 1
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PPUSH
21203: CALL_OW 69
21207: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21208: LD_INT 35
21210: PPUSH
21211: CALL_OW 67
// p := p + 0 0$1 ;
21215: LD_ADDR_VAR 0 3
21219: PUSH
21220: LD_VAR 0 3
21224: PUSH
21225: LD_INT 35
21227: PLUS
21228: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
21229: LD_VAR 0 2
21233: PPUSH
21234: LD_INT 5
21236: PPUSH
21237: CALL_OW 113
// for i in tmp do
21241: LD_ADDR_VAR 0 1
21245: PUSH
21246: LD_VAR 0 2
21250: PUSH
21251: FOR_IN
21252: IFFALSE 21279
// if IsInArea ( tmp , RussianEscape ) then
21254: LD_VAR 0 2
21258: PPUSH
21259: LD_INT 5
21261: PPUSH
21262: CALL_OW 308
21266: IFFALSE 21277
// RemoveUnit ( i ) ;
21268: LD_VAR 0 1
21272: PPUSH
21273: CALL_OW 64
21277: GO 21251
21279: POP
21280: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
21281: LD_INT 23
21283: PUSH
21284: LD_INT 3
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 21
21293: PUSH
21294: LD_INT 1
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 24
21303: PUSH
21304: LD_INT 250
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: LIST
21315: PPUSH
21316: CALL_OW 69
21320: PUSH
21321: LD_INT 0
21323: EQUAL
21324: PUSH
21325: LD_VAR 0 3
21329: PUSH
21330: LD_INT 245
21332: GREATEREQUAL
21333: OR
21334: IFFALSE 21208
// FinishMission ;
21336: CALL 21343 0 0
// end ;
21340: PPOPN 3
21342: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
21343: LD_INT 0
21345: PPUSH
21346: PPUSH
21347: PPUSH
21348: PPUSH
21349: PPUSH
// if not vehicleProduceCounter then
21350: LD_EXP 42
21354: NOT
21355: IFFALSE 21364
// SetAchievement ( ACH_INFANTRY ) ;
21357: LD_STRING ACH_INFANTRY
21359: PPUSH
21360: CALL_OW 543
// if tick <= 20 20$00 then
21364: LD_OWVAR 1
21368: PUSH
21369: LD_INT 42000
21371: LESSEQUAL
21372: IFFALSE 21388
// begin wait ( 3 ) ;
21374: LD_INT 3
21376: PPUSH
21377: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
21381: LD_STRING ACH_ASPEED_4
21383: PPUSH
21384: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
21388: LD_INT 22
21390: PPUSH
21391: CALL 22032 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
21395: LD_INT 69
21397: PPUSH
21398: LD_INT 1
21400: PPUSH
21401: CALL_OW 321
21405: PPUSH
21406: LD_STRING GatlingInGamma
21408: PPUSH
21409: CALL_OW 39
// m1 := false ;
21413: LD_ADDR_VAR 0 3
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// m2 := false ;
21421: LD_ADDR_VAR 0 4
21425: PUSH
21426: LD_INT 0
21428: ST_TO_ADDR
// m3 := false ;
21429: LD_ADDR_VAR 0 5
21433: PUSH
21434: LD_INT 0
21436: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
21437: LD_EXP 34
21441: PUSH
21442: LD_INT 1
21444: EQUAL
21445: PUSH
21446: LD_EXP 35
21450: PUSH
21451: LD_INT 1
21453: EQUAL
21454: AND
21455: IFFALSE 21477
// begin AddMedal ( oil , 1 ) ;
21457: LD_STRING oil
21459: PPUSH
21460: LD_INT 1
21462: PPUSH
21463: CALL_OW 101
// m1 := true ;
21467: LD_ADDR_VAR 0 3
21471: PUSH
21472: LD_INT 1
21474: ST_TO_ADDR
// end else
21475: GO 21570
// begin if buildOil = 1 and buildPower = 0 then
21477: LD_EXP 34
21481: PUSH
21482: LD_INT 1
21484: EQUAL
21485: PUSH
21486: LD_EXP 35
21490: PUSH
21491: LD_INT 0
21493: EQUAL
21494: AND
21495: IFFALSE 21508
// AddMedal ( oil , - 1 ) ;
21497: LD_STRING oil
21499: PPUSH
21500: LD_INT 1
21502: NEG
21503: PPUSH
21504: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
21508: LD_EXP 34
21512: PUSH
21513: LD_INT 0
21515: EQUAL
21516: PUSH
21517: LD_EXP 35
21521: PUSH
21522: LD_INT 1
21524: EQUAL
21525: AND
21526: IFFALSE 21539
// AddMedal ( oil , - 2 ) ;
21528: LD_STRING oil
21530: PPUSH
21531: LD_INT 2
21533: NEG
21534: PPUSH
21535: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
21539: LD_EXP 34
21543: PUSH
21544: LD_INT 0
21546: EQUAL
21547: PUSH
21548: LD_EXP 35
21552: PUSH
21553: LD_INT 0
21555: EQUAL
21556: AND
21557: IFFALSE 21570
// AddMedal ( oil , - 3 ) ;
21559: LD_STRING oil
21561: PPUSH
21562: LD_INT 3
21564: NEG
21565: PPUSH
21566: CALL_OW 101
// end ; if lostCounter > 3 then
21570: LD_EXP 38
21574: PUSH
21575: LD_INT 3
21577: GREATER
21578: IFFALSE 21593
// AddMedal ( deaths , - 1 ) else
21580: LD_STRING deaths
21582: PPUSH
21583: LD_INT 1
21585: NEG
21586: PPUSH
21587: CALL_OW 101
21591: GO 21611
// begin AddMedal ( deaths , 1 ) ;
21593: LD_STRING deaths
21595: PPUSH
21596: LD_INT 1
21598: PPUSH
21599: CALL_OW 101
// m2 := true ;
21603: LD_ADDR_VAR 0 4
21607: PUSH
21608: LD_INT 1
21610: ST_TO_ADDR
// end ; if honor = 1 then
21611: LD_EXP 39
21615: PUSH
21616: LD_INT 1
21618: EQUAL
21619: IFFALSE 21641
// begin AddMedal ( honour , 1 ) ;
21621: LD_STRING honour
21623: PPUSH
21624: LD_INT 1
21626: PPUSH
21627: CALL_OW 101
// m3 := true ;
21631: LD_ADDR_VAR 0 5
21635: PUSH
21636: LD_INT 1
21638: ST_TO_ADDR
// end else
21639: GO 21652
// begin AddMedal ( honour , - 1 ) ;
21641: LD_STRING honour
21643: PPUSH
21644: LD_INT 1
21646: NEG
21647: PPUSH
21648: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
21652: LD_VAR 0 3
21656: PUSH
21657: LD_VAR 0 4
21661: AND
21662: PUSH
21663: LD_VAR 0 5
21667: AND
21668: PUSH
21669: LD_OWVAR 67
21673: PUSH
21674: LD_INT 3
21676: EQUAL
21677: AND
21678: IFFALSE 21690
// SetAchievementEX ( ACH_AMER , 4 ) ;
21680: LD_STRING ACH_AMER
21682: PPUSH
21683: LD_INT 4
21685: PPUSH
21686: CALL_OW 564
// GiveMedals ( Main ) ;
21690: LD_STRING Main
21692: PPUSH
21693: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
21697: LD_INT 22
21699: PUSH
21700: LD_INT 1
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 23
21709: PUSH
21710: LD_INT 1
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 21
21719: PUSH
21720: LD_INT 1
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: LIST
21731: PPUSH
21732: CALL_OW 69
21736: PPUSH
21737: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21741: LD_EXP 1
21745: PPUSH
21746: LD_EXP 48
21750: PUSH
21751: LD_STRING JMM
21753: STR
21754: PPUSH
21755: CALL_OW 38
// if IsOK ( Bobby ) then
21759: LD_EXP 2
21763: PPUSH
21764: CALL_OW 302
21768: IFFALSE 21788
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21770: LD_EXP 2
21774: PPUSH
21775: LD_EXP 48
21779: PUSH
21780: LD_STRING Bobby
21782: STR
21783: PPUSH
21784: CALL_OW 38
// if IsOK ( Cyrus ) then
21788: LD_EXP 3
21792: PPUSH
21793: CALL_OW 302
21797: IFFALSE 21817
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21799: LD_EXP 3
21803: PPUSH
21804: LD_EXP 48
21808: PUSH
21809: LD_STRING Cyrus
21811: STR
21812: PPUSH
21813: CALL_OW 38
// if IsOK ( Lisa ) then
21817: LD_EXP 4
21821: PPUSH
21822: CALL_OW 302
21826: IFFALSE 21846
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21828: LD_EXP 4
21832: PPUSH
21833: LD_EXP 48
21837: PUSH
21838: LD_STRING Lisa
21840: STR
21841: PPUSH
21842: CALL_OW 38
// if IsOK ( Brown ) then
21846: LD_EXP 7
21850: PPUSH
21851: CALL_OW 302
21855: IFFALSE 21875
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
21857: LD_EXP 7
21861: PPUSH
21862: LD_EXP 48
21866: PUSH
21867: LD_STRING Brown
21869: STR
21870: PPUSH
21871: CALL_OW 38
// if not IsDead ( Donaldson ) then
21875: LD_EXP 13
21879: PPUSH
21880: CALL_OW 301
21884: NOT
21885: IFFALSE 21905
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21887: LD_EXP 13
21891: PPUSH
21892: LD_EXP 48
21896: PUSH
21897: LD_STRING Donaldson
21899: STR
21900: PPUSH
21901: CALL_OW 38
// if not IsDead ( Frank ) then
21905: LD_EXP 5
21909: PPUSH
21910: CALL_OW 301
21914: NOT
21915: IFFALSE 21935
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
21917: LD_EXP 5
21921: PPUSH
21922: LD_EXP 48
21926: PUSH
21927: LD_STRING Frank
21929: STR
21930: PPUSH
21931: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
21935: LD_INT 50
21937: PUSH
21938: EMPTY
21939: LIST
21940: PUSH
21941: LD_INT 22
21943: PUSH
21944: LD_INT 1
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 21
21953: PUSH
21954: LD_INT 1
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: PPUSH
21966: CALL_OW 69
21970: PUSH
21971: LD_EXP 1
21975: PUSH
21976: LD_EXP 2
21980: PUSH
21981: LD_EXP 3
21985: PUSH
21986: LD_EXP 4
21990: PUSH
21991: LD_EXP 7
21995: PUSH
21996: LD_EXP 13
22000: PUSH
22001: LD_EXP 5
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: DIFF
22015: PPUSH
22016: LD_STRING 04_other_survivors
22018: PPUSH
22019: CALL_OW 38
// YouWin ;
22023: CALL_OW 103
// end ;
22027: LD_VAR 0 1
22031: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
22032: LD_INT 0
22034: PPUSH
22035: PPUSH
22036: PPUSH
22037: PPUSH
// gammaBase = [ ] ;
22038: LD_ADDR_VAR 0 4
22042: PUSH
22043: EMPTY
22044: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
22045: LD_ADDR_VAR 0 5
22049: PUSH
22050: LD_VAR 0 1
22054: PPUSH
22055: LD_INT 22
22057: PUSH
22058: LD_INT 1
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 21
22067: PUSH
22068: LD_INT 3
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PPUSH
22079: CALL_OW 70
22083: ST_TO_ADDR
// for i in buildings do
22084: LD_ADDR_VAR 0 3
22088: PUSH
22089: LD_VAR 0 5
22093: PUSH
22094: FOR_IN
22095: IFFALSE 22432
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
22097: LD_VAR 0 3
22101: PPUSH
22102: CALL_OW 266
22106: PUSH
22107: LD_INT 6
22109: PUSH
22110: LD_INT 7
22112: PUSH
22113: LD_INT 8
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: LIST
22120: IN
22121: IFFALSE 22235
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
22123: LD_ADDR_VAR 0 4
22127: PUSH
22128: LD_VAR 0 4
22132: PUSH
22133: LD_VAR 0 3
22137: PPUSH
22138: CALL_OW 266
22142: PUSH
22143: LD_VAR 0 3
22147: PPUSH
22148: CALL_OW 250
22152: PUSH
22153: LD_VAR 0 3
22157: PPUSH
22158: CALL_OW 251
22162: PUSH
22163: LD_VAR 0 3
22167: PPUSH
22168: CALL_OW 254
22172: PUSH
22173: LD_VAR 0 3
22177: PPUSH
22178: CALL_OW 267
22182: PUSH
22183: LD_VAR 0 3
22187: PPUSH
22188: CALL_OW 248
22192: PUSH
22193: LD_VAR 0 3
22197: PPUSH
22198: LD_INT 1
22200: PPUSH
22201: CALL_OW 268
22205: PUSH
22206: LD_VAR 0 3
22210: PPUSH
22211: LD_INT 2
22213: PPUSH
22214: CALL_OW 268
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: PUSH
22229: EMPTY
22230: LIST
22231: ADD
22232: ST_TO_ADDR
22233: GO 22430
// if GetBType ( i ) in [ b_bunker ] then
22235: LD_VAR 0 3
22239: PPUSH
22240: CALL_OW 266
22244: PUSH
22245: LD_INT 32
22247: PUSH
22248: EMPTY
22249: LIST
22250: IN
22251: IFFALSE 22348
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22253: LD_ADDR_VAR 0 4
22257: PUSH
22258: LD_VAR 0 4
22262: PUSH
22263: LD_VAR 0 3
22267: PPUSH
22268: CALL_OW 266
22272: PUSH
22273: LD_VAR 0 3
22277: PPUSH
22278: CALL_OW 250
22282: PUSH
22283: LD_VAR 0 3
22287: PPUSH
22288: CALL_OW 251
22292: PUSH
22293: LD_VAR 0 3
22297: PPUSH
22298: CALL_OW 254
22302: PUSH
22303: LD_VAR 0 3
22307: PPUSH
22308: CALL_OW 267
22312: PUSH
22313: LD_VAR 0 3
22317: PPUSH
22318: CALL_OW 248
22322: PUSH
22323: LD_VAR 0 3
22327: PPUSH
22328: CALL_OW 269
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: PUSH
22342: EMPTY
22343: LIST
22344: ADD
22345: ST_TO_ADDR
22346: GO 22430
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
22348: LD_ADDR_VAR 0 4
22352: PUSH
22353: LD_VAR 0 4
22357: PUSH
22358: LD_VAR 0 3
22362: PPUSH
22363: CALL_OW 266
22367: PUSH
22368: LD_VAR 0 3
22372: PPUSH
22373: CALL_OW 250
22377: PUSH
22378: LD_VAR 0 3
22382: PPUSH
22383: CALL_OW 251
22387: PUSH
22388: LD_VAR 0 3
22392: PPUSH
22393: CALL_OW 254
22397: PUSH
22398: LD_VAR 0 3
22402: PPUSH
22403: CALL_OW 267
22407: PUSH
22408: LD_VAR 0 3
22412: PPUSH
22413: CALL_OW 248
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: PUSH
22426: EMPTY
22427: LIST
22428: ADD
22429: ST_TO_ADDR
// end ;
22430: GO 22094
22432: POP
22433: POP
// SaveVariable ( gammaBase , GammaBase ) ;
22434: LD_VAR 0 4
22438: PPUSH
22439: LD_STRING GammaBase
22441: PPUSH
22442: CALL_OW 39
// end ; end_of_file
22446: LD_VAR 0 2
22450: RET
// every 1 1$15 do
22451: GO 22453
22453: DISABLE
// begin if supply <= 13 and supply > 7 then
22454: LD_EXP 36
22458: PUSH
22459: LD_INT 13
22461: LESSEQUAL
22462: PUSH
22463: LD_EXP 36
22467: PUSH
22468: LD_INT 7
22470: GREATER
22471: AND
22472: IFFALSE 22495
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
22474: LD_INT 3
22476: PPUSH
22477: LD_INT 5
22479: PPUSH
22480: CALL_OW 12
22484: PPUSH
22485: LD_INT 18
22487: PPUSH
22488: LD_INT 1
22490: PPUSH
22491: CALL_OW 55
// if supply <= 7 and supply > 4 then
22495: LD_EXP 36
22499: PUSH
22500: LD_INT 7
22502: LESSEQUAL
22503: PUSH
22504: LD_EXP 36
22508: PUSH
22509: LD_INT 4
22511: GREATER
22512: AND
22513: IFFALSE 22536
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
22515: LD_INT 3
22517: PPUSH
22518: LD_INT 5
22520: PPUSH
22521: CALL_OW 12
22525: PPUSH
22526: LD_INT 19
22528: PPUSH
22529: LD_INT 1
22531: PPUSH
22532: CALL_OW 55
// if supply <= 4 and supply > 0 then
22536: LD_EXP 36
22540: PUSH
22541: LD_INT 4
22543: LESSEQUAL
22544: PUSH
22545: LD_EXP 36
22549: PUSH
22550: LD_INT 0
22552: GREATER
22553: AND
22554: IFFALSE 22577
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
22556: LD_INT 3
22558: PPUSH
22559: LD_INT 5
22561: PPUSH
22562: CALL_OW 12
22566: PPUSH
22567: LD_INT 20
22569: PPUSH
22570: LD_INT 1
22572: PPUSH
22573: CALL_OW 55
// if supply > 0 then
22577: LD_EXP 36
22581: PUSH
22582: LD_INT 0
22584: GREATER
22585: IFFALSE 22602
// begin supply = supply - 1 ;
22587: LD_ADDR_EXP 36
22591: PUSH
22592: LD_EXP 36
22596: PUSH
22597: LD_INT 1
22599: MINUS
22600: ST_TO_ADDR
// enable ;
22601: ENABLE
// end ; end ; end_of_file
22602: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
22603: GO 22605
22605: DISABLE
// begin ru_radar := 98 ;
22606: LD_ADDR_EXP 52
22610: PUSH
22611: LD_INT 98
22613: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22614: LD_ADDR_EXP 53
22618: PUSH
22619: LD_INT 89
22621: ST_TO_ADDR
// us_hack := 99 ;
22622: LD_ADDR_EXP 54
22626: PUSH
22627: LD_INT 99
22629: ST_TO_ADDR
// us_artillery := 97 ;
22630: LD_ADDR_EXP 55
22634: PUSH
22635: LD_INT 97
22637: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22638: LD_ADDR_EXP 56
22642: PUSH
22643: LD_INT 91
22645: ST_TO_ADDR
// tech_Artillery := 80 ;
22646: LD_ADDR_EXP 57
22650: PUSH
22651: LD_INT 80
22653: ST_TO_ADDR
// tech_RadMat := 81 ;
22654: LD_ADDR_EXP 58
22658: PUSH
22659: LD_INT 81
22661: ST_TO_ADDR
// tech_BasicTools := 82 ;
22662: LD_ADDR_EXP 59
22666: PUSH
22667: LD_INT 82
22669: ST_TO_ADDR
// tech_Cargo := 83 ;
22670: LD_ADDR_EXP 60
22674: PUSH
22675: LD_INT 83
22677: ST_TO_ADDR
// tech_Track := 84 ;
22678: LD_ADDR_EXP 61
22682: PUSH
22683: LD_INT 84
22685: ST_TO_ADDR
// tech_Crane := 85 ;
22686: LD_ADDR_EXP 62
22690: PUSH
22691: LD_INT 85
22693: ST_TO_ADDR
// tech_Bulldozer := 86 ;
22694: LD_ADDR_EXP 63
22698: PUSH
22699: LD_INT 86
22701: ST_TO_ADDR
// tech_Hovercraft := 87 ;
22702: LD_ADDR_EXP 64
22706: PUSH
22707: LD_INT 87
22709: ST_TO_ADDR
// end ; end_of_file end_of_file
22710: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
22711: GO 22713
22713: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
22714: LD_STRING initStreamRollete();
22716: PPUSH
22717: CALL_OW 559
// InitStreamMode ;
22721: CALL 22730 0 0
// DefineStreamItems ( ) ;
22725: CALL 23170 0 0
// end ;
22729: END
// function InitStreamMode ; begin
22730: LD_INT 0
22732: PPUSH
// streamModeActive := false ;
22733: LD_ADDR_EXP 65
22737: PUSH
22738: LD_INT 0
22740: ST_TO_ADDR
// normalCounter := 36 ;
22741: LD_ADDR_EXP 66
22745: PUSH
22746: LD_INT 36
22748: ST_TO_ADDR
// hardcoreCounter := 16 ;
22749: LD_ADDR_EXP 67
22753: PUSH
22754: LD_INT 16
22756: ST_TO_ADDR
// sRocket := false ;
22757: LD_ADDR_EXP 70
22761: PUSH
22762: LD_INT 0
22764: ST_TO_ADDR
// sSpeed := false ;
22765: LD_ADDR_EXP 69
22769: PUSH
22770: LD_INT 0
22772: ST_TO_ADDR
// sEngine := false ;
22773: LD_ADDR_EXP 71
22777: PUSH
22778: LD_INT 0
22780: ST_TO_ADDR
// sSpec := false ;
22781: LD_ADDR_EXP 68
22785: PUSH
22786: LD_INT 0
22788: ST_TO_ADDR
// sLevel := false ;
22789: LD_ADDR_EXP 72
22793: PUSH
22794: LD_INT 0
22796: ST_TO_ADDR
// sArmoury := false ;
22797: LD_ADDR_EXP 73
22801: PUSH
22802: LD_INT 0
22804: ST_TO_ADDR
// sRadar := false ;
22805: LD_ADDR_EXP 74
22809: PUSH
22810: LD_INT 0
22812: ST_TO_ADDR
// sBunker := false ;
22813: LD_ADDR_EXP 75
22817: PUSH
22818: LD_INT 0
22820: ST_TO_ADDR
// sHack := false ;
22821: LD_ADDR_EXP 76
22825: PUSH
22826: LD_INT 0
22828: ST_TO_ADDR
// sFire := false ;
22829: LD_ADDR_EXP 77
22833: PUSH
22834: LD_INT 0
22836: ST_TO_ADDR
// sRefresh := false ;
22837: LD_ADDR_EXP 78
22841: PUSH
22842: LD_INT 0
22844: ST_TO_ADDR
// sExp := false ;
22845: LD_ADDR_EXP 79
22849: PUSH
22850: LD_INT 0
22852: ST_TO_ADDR
// sDepot := false ;
22853: LD_ADDR_EXP 80
22857: PUSH
22858: LD_INT 0
22860: ST_TO_ADDR
// sFlag := false ;
22861: LD_ADDR_EXP 81
22865: PUSH
22866: LD_INT 0
22868: ST_TO_ADDR
// sKamikadze := false ;
22869: LD_ADDR_EXP 89
22873: PUSH
22874: LD_INT 0
22876: ST_TO_ADDR
// sTroll := false ;
22877: LD_ADDR_EXP 90
22881: PUSH
22882: LD_INT 0
22884: ST_TO_ADDR
// sSlow := false ;
22885: LD_ADDR_EXP 91
22889: PUSH
22890: LD_INT 0
22892: ST_TO_ADDR
// sLack := false ;
22893: LD_ADDR_EXP 92
22897: PUSH
22898: LD_INT 0
22900: ST_TO_ADDR
// sTank := false ;
22901: LD_ADDR_EXP 94
22905: PUSH
22906: LD_INT 0
22908: ST_TO_ADDR
// sRemote := false ;
22909: LD_ADDR_EXP 95
22913: PUSH
22914: LD_INT 0
22916: ST_TO_ADDR
// sPowell := false ;
22917: LD_ADDR_EXP 96
22921: PUSH
22922: LD_INT 0
22924: ST_TO_ADDR
// sTeleport := false ;
22925: LD_ADDR_EXP 99
22929: PUSH
22930: LD_INT 0
22932: ST_TO_ADDR
// sOilTower := false ;
22933: LD_ADDR_EXP 101
22937: PUSH
22938: LD_INT 0
22940: ST_TO_ADDR
// sShovel := false ;
22941: LD_ADDR_EXP 102
22945: PUSH
22946: LD_INT 0
22948: ST_TO_ADDR
// sSheik := false ;
22949: LD_ADDR_EXP 103
22953: PUSH
22954: LD_INT 0
22956: ST_TO_ADDR
// sEarthquake := false ;
22957: LD_ADDR_EXP 105
22961: PUSH
22962: LD_INT 0
22964: ST_TO_ADDR
// sAI := false ;
22965: LD_ADDR_EXP 106
22969: PUSH
22970: LD_INT 0
22972: ST_TO_ADDR
// sCargo := false ;
22973: LD_ADDR_EXP 109
22977: PUSH
22978: LD_INT 0
22980: ST_TO_ADDR
// sDLaser := false ;
22981: LD_ADDR_EXP 110
22985: PUSH
22986: LD_INT 0
22988: ST_TO_ADDR
// sExchange := false ;
22989: LD_ADDR_EXP 111
22993: PUSH
22994: LD_INT 0
22996: ST_TO_ADDR
// sFac := false ;
22997: LD_ADDR_EXP 112
23001: PUSH
23002: LD_INT 0
23004: ST_TO_ADDR
// sPower := false ;
23005: LD_ADDR_EXP 113
23009: PUSH
23010: LD_INT 0
23012: ST_TO_ADDR
// sRandom := false ;
23013: LD_ADDR_EXP 114
23017: PUSH
23018: LD_INT 0
23020: ST_TO_ADDR
// sShield := false ;
23021: LD_ADDR_EXP 115
23025: PUSH
23026: LD_INT 0
23028: ST_TO_ADDR
// sTime := false ;
23029: LD_ADDR_EXP 116
23033: PUSH
23034: LD_INT 0
23036: ST_TO_ADDR
// sTools := false ;
23037: LD_ADDR_EXP 117
23041: PUSH
23042: LD_INT 0
23044: ST_TO_ADDR
// sSold := false ;
23045: LD_ADDR_EXP 82
23049: PUSH
23050: LD_INT 0
23052: ST_TO_ADDR
// sDiff := false ;
23053: LD_ADDR_EXP 83
23057: PUSH
23058: LD_INT 0
23060: ST_TO_ADDR
// sFog := false ;
23061: LD_ADDR_EXP 86
23065: PUSH
23066: LD_INT 0
23068: ST_TO_ADDR
// sReset := false ;
23069: LD_ADDR_EXP 87
23073: PUSH
23074: LD_INT 0
23076: ST_TO_ADDR
// sSun := false ;
23077: LD_ADDR_EXP 88
23081: PUSH
23082: LD_INT 0
23084: ST_TO_ADDR
// sTiger := false ;
23085: LD_ADDR_EXP 84
23089: PUSH
23090: LD_INT 0
23092: ST_TO_ADDR
// sBomb := false ;
23093: LD_ADDR_EXP 85
23097: PUSH
23098: LD_INT 0
23100: ST_TO_ADDR
// sWound := false ;
23101: LD_ADDR_EXP 93
23105: PUSH
23106: LD_INT 0
23108: ST_TO_ADDR
// sBetray := false ;
23109: LD_ADDR_EXP 97
23113: PUSH
23114: LD_INT 0
23116: ST_TO_ADDR
// sContamin := false ;
23117: LD_ADDR_EXP 98
23121: PUSH
23122: LD_INT 0
23124: ST_TO_ADDR
// sOil := false ;
23125: LD_ADDR_EXP 100
23129: PUSH
23130: LD_INT 0
23132: ST_TO_ADDR
// sStu := false ;
23133: LD_ADDR_EXP 104
23137: PUSH
23138: LD_INT 0
23140: ST_TO_ADDR
// sBazooka := false ;
23141: LD_ADDR_EXP 107
23145: PUSH
23146: LD_INT 0
23148: ST_TO_ADDR
// sMortar := false ;
23149: LD_ADDR_EXP 108
23153: PUSH
23154: LD_INT 0
23156: ST_TO_ADDR
// sRanger := false ;
23157: LD_ADDR_EXP 118
23161: PUSH
23162: LD_INT 0
23164: ST_TO_ADDR
// end ;
23165: LD_VAR 0 1
23169: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
23170: LD_INT 0
23172: PPUSH
23173: PPUSH
23174: PPUSH
23175: PPUSH
23176: PPUSH
// result := [ ] ;
23177: LD_ADDR_VAR 0 1
23181: PUSH
23182: EMPTY
23183: ST_TO_ADDR
// if campaign_id = 1 then
23184: LD_OWVAR 69
23188: PUSH
23189: LD_INT 1
23191: EQUAL
23192: IFFALSE 26130
// begin case mission_number of 1 :
23194: LD_OWVAR 70
23198: PUSH
23199: LD_INT 1
23201: DOUBLE
23202: EQUAL
23203: IFTRUE 23207
23205: GO 23271
23207: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
23208: LD_ADDR_VAR 0 1
23212: PUSH
23213: LD_INT 2
23215: PUSH
23216: LD_INT 4
23218: PUSH
23219: LD_INT 11
23221: PUSH
23222: LD_INT 12
23224: PUSH
23225: LD_INT 15
23227: PUSH
23228: LD_INT 16
23230: PUSH
23231: LD_INT 22
23233: PUSH
23234: LD_INT 23
23236: PUSH
23237: LD_INT 26
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 101
23253: PUSH
23254: LD_INT 102
23256: PUSH
23257: LD_INT 106
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: LIST
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: ST_TO_ADDR
23269: GO 26128
23271: LD_INT 2
23273: DOUBLE
23274: EQUAL
23275: IFTRUE 23279
23277: GO 23351
23279: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
23280: LD_ADDR_VAR 0 1
23284: PUSH
23285: LD_INT 2
23287: PUSH
23288: LD_INT 4
23290: PUSH
23291: LD_INT 11
23293: PUSH
23294: LD_INT 12
23296: PUSH
23297: LD_INT 15
23299: PUSH
23300: LD_INT 16
23302: PUSH
23303: LD_INT 22
23305: PUSH
23306: LD_INT 23
23308: PUSH
23309: LD_INT 26
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 101
23325: PUSH
23326: LD_INT 102
23328: PUSH
23329: LD_INT 105
23331: PUSH
23332: LD_INT 106
23334: PUSH
23335: LD_INT 108
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: ST_TO_ADDR
23349: GO 26128
23351: LD_INT 3
23353: DOUBLE
23354: EQUAL
23355: IFTRUE 23359
23357: GO 23435
23359: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
23360: LD_ADDR_VAR 0 1
23364: PUSH
23365: LD_INT 2
23367: PUSH
23368: LD_INT 4
23370: PUSH
23371: LD_INT 5
23373: PUSH
23374: LD_INT 11
23376: PUSH
23377: LD_INT 12
23379: PUSH
23380: LD_INT 15
23382: PUSH
23383: LD_INT 16
23385: PUSH
23386: LD_INT 22
23388: PUSH
23389: LD_INT 26
23391: PUSH
23392: LD_INT 36
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 101
23409: PUSH
23410: LD_INT 102
23412: PUSH
23413: LD_INT 105
23415: PUSH
23416: LD_INT 106
23418: PUSH
23419: LD_INT 108
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: ST_TO_ADDR
23433: GO 26128
23435: LD_INT 4
23437: DOUBLE
23438: EQUAL
23439: IFTRUE 23443
23441: GO 23527
23443: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
23444: LD_ADDR_VAR 0 1
23448: PUSH
23449: LD_INT 2
23451: PUSH
23452: LD_INT 4
23454: PUSH
23455: LD_INT 5
23457: PUSH
23458: LD_INT 8
23460: PUSH
23461: LD_INT 11
23463: PUSH
23464: LD_INT 12
23466: PUSH
23467: LD_INT 15
23469: PUSH
23470: LD_INT 16
23472: PUSH
23473: LD_INT 22
23475: PUSH
23476: LD_INT 23
23478: PUSH
23479: LD_INT 26
23481: PUSH
23482: LD_INT 36
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 101
23501: PUSH
23502: LD_INT 102
23504: PUSH
23505: LD_INT 105
23507: PUSH
23508: LD_INT 106
23510: PUSH
23511: LD_INT 108
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: ST_TO_ADDR
23525: GO 26128
23527: LD_INT 5
23529: DOUBLE
23530: EQUAL
23531: IFTRUE 23535
23533: GO 23635
23535: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
23536: LD_ADDR_VAR 0 1
23540: PUSH
23541: LD_INT 2
23543: PUSH
23544: LD_INT 4
23546: PUSH
23547: LD_INT 5
23549: PUSH
23550: LD_INT 6
23552: PUSH
23553: LD_INT 8
23555: PUSH
23556: LD_INT 11
23558: PUSH
23559: LD_INT 12
23561: PUSH
23562: LD_INT 15
23564: PUSH
23565: LD_INT 16
23567: PUSH
23568: LD_INT 22
23570: PUSH
23571: LD_INT 23
23573: PUSH
23574: LD_INT 25
23576: PUSH
23577: LD_INT 26
23579: PUSH
23580: LD_INT 36
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 101
23601: PUSH
23602: LD_INT 102
23604: PUSH
23605: LD_INT 105
23607: PUSH
23608: LD_INT 106
23610: PUSH
23611: LD_INT 108
23613: PUSH
23614: LD_INT 109
23616: PUSH
23617: LD_INT 112
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: ST_TO_ADDR
23633: GO 26128
23635: LD_INT 6
23637: DOUBLE
23638: EQUAL
23639: IFTRUE 23643
23641: GO 23763
23643: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
23644: LD_ADDR_VAR 0 1
23648: PUSH
23649: LD_INT 2
23651: PUSH
23652: LD_INT 4
23654: PUSH
23655: LD_INT 5
23657: PUSH
23658: LD_INT 6
23660: PUSH
23661: LD_INT 8
23663: PUSH
23664: LD_INT 11
23666: PUSH
23667: LD_INT 12
23669: PUSH
23670: LD_INT 15
23672: PUSH
23673: LD_INT 16
23675: PUSH
23676: LD_INT 20
23678: PUSH
23679: LD_INT 21
23681: PUSH
23682: LD_INT 22
23684: PUSH
23685: LD_INT 23
23687: PUSH
23688: LD_INT 25
23690: PUSH
23691: LD_INT 26
23693: PUSH
23694: LD_INT 30
23696: PUSH
23697: LD_INT 31
23699: PUSH
23700: LD_INT 32
23702: PUSH
23703: LD_INT 36
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 101
23729: PUSH
23730: LD_INT 102
23732: PUSH
23733: LD_INT 105
23735: PUSH
23736: LD_INT 106
23738: PUSH
23739: LD_INT 108
23741: PUSH
23742: LD_INT 109
23744: PUSH
23745: LD_INT 112
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: ST_TO_ADDR
23761: GO 26128
23763: LD_INT 7
23765: DOUBLE
23766: EQUAL
23767: IFTRUE 23771
23769: GO 23871
23771: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
23772: LD_ADDR_VAR 0 1
23776: PUSH
23777: LD_INT 2
23779: PUSH
23780: LD_INT 4
23782: PUSH
23783: LD_INT 5
23785: PUSH
23786: LD_INT 7
23788: PUSH
23789: LD_INT 11
23791: PUSH
23792: LD_INT 12
23794: PUSH
23795: LD_INT 15
23797: PUSH
23798: LD_INT 16
23800: PUSH
23801: LD_INT 20
23803: PUSH
23804: LD_INT 21
23806: PUSH
23807: LD_INT 22
23809: PUSH
23810: LD_INT 23
23812: PUSH
23813: LD_INT 25
23815: PUSH
23816: LD_INT 26
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 101
23837: PUSH
23838: LD_INT 102
23840: PUSH
23841: LD_INT 103
23843: PUSH
23844: LD_INT 105
23846: PUSH
23847: LD_INT 106
23849: PUSH
23850: LD_INT 108
23852: PUSH
23853: LD_INT 112
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: ST_TO_ADDR
23869: GO 26128
23871: LD_INT 8
23873: DOUBLE
23874: EQUAL
23875: IFTRUE 23879
23877: GO 24007
23879: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
23880: LD_ADDR_VAR 0 1
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: LD_INT 4
23890: PUSH
23891: LD_INT 5
23893: PUSH
23894: LD_INT 6
23896: PUSH
23897: LD_INT 7
23899: PUSH
23900: LD_INT 8
23902: PUSH
23903: LD_INT 11
23905: PUSH
23906: LD_INT 12
23908: PUSH
23909: LD_INT 15
23911: PUSH
23912: LD_INT 16
23914: PUSH
23915: LD_INT 20
23917: PUSH
23918: LD_INT 21
23920: PUSH
23921: LD_INT 22
23923: PUSH
23924: LD_INT 23
23926: PUSH
23927: LD_INT 25
23929: PUSH
23930: LD_INT 26
23932: PUSH
23933: LD_INT 30
23935: PUSH
23936: LD_INT 31
23938: PUSH
23939: LD_INT 32
23941: PUSH
23942: LD_INT 36
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 101
23969: PUSH
23970: LD_INT 102
23972: PUSH
23973: LD_INT 103
23975: PUSH
23976: LD_INT 105
23978: PUSH
23979: LD_INT 106
23981: PUSH
23982: LD_INT 108
23984: PUSH
23985: LD_INT 109
23987: PUSH
23988: LD_INT 112
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: ST_TO_ADDR
24005: GO 26128
24007: LD_INT 9
24009: DOUBLE
24010: EQUAL
24011: IFTRUE 24015
24013: GO 24151
24015: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
24016: LD_ADDR_VAR 0 1
24020: PUSH
24021: LD_INT 2
24023: PUSH
24024: LD_INT 4
24026: PUSH
24027: LD_INT 5
24029: PUSH
24030: LD_INT 6
24032: PUSH
24033: LD_INT 7
24035: PUSH
24036: LD_INT 8
24038: PUSH
24039: LD_INT 11
24041: PUSH
24042: LD_INT 12
24044: PUSH
24045: LD_INT 15
24047: PUSH
24048: LD_INT 16
24050: PUSH
24051: LD_INT 20
24053: PUSH
24054: LD_INT 21
24056: PUSH
24057: LD_INT 22
24059: PUSH
24060: LD_INT 23
24062: PUSH
24063: LD_INT 25
24065: PUSH
24066: LD_INT 26
24068: PUSH
24069: LD_INT 28
24071: PUSH
24072: LD_INT 30
24074: PUSH
24075: LD_INT 31
24077: PUSH
24078: LD_INT 32
24080: PUSH
24081: LD_INT 36
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 101
24109: PUSH
24110: LD_INT 102
24112: PUSH
24113: LD_INT 103
24115: PUSH
24116: LD_INT 105
24118: PUSH
24119: LD_INT 106
24121: PUSH
24122: LD_INT 108
24124: PUSH
24125: LD_INT 109
24127: PUSH
24128: LD_INT 112
24130: PUSH
24131: LD_INT 114
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: ST_TO_ADDR
24149: GO 26128
24151: LD_INT 10
24153: DOUBLE
24154: EQUAL
24155: IFTRUE 24159
24157: GO 24343
24159: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
24160: LD_ADDR_VAR 0 1
24164: PUSH
24165: LD_INT 2
24167: PUSH
24168: LD_INT 4
24170: PUSH
24171: LD_INT 5
24173: PUSH
24174: LD_INT 6
24176: PUSH
24177: LD_INT 7
24179: PUSH
24180: LD_INT 8
24182: PUSH
24183: LD_INT 9
24185: PUSH
24186: LD_INT 10
24188: PUSH
24189: LD_INT 11
24191: PUSH
24192: LD_INT 12
24194: PUSH
24195: LD_INT 13
24197: PUSH
24198: LD_INT 14
24200: PUSH
24201: LD_INT 15
24203: PUSH
24204: LD_INT 16
24206: PUSH
24207: LD_INT 17
24209: PUSH
24210: LD_INT 18
24212: PUSH
24213: LD_INT 19
24215: PUSH
24216: LD_INT 20
24218: PUSH
24219: LD_INT 21
24221: PUSH
24222: LD_INT 22
24224: PUSH
24225: LD_INT 23
24227: PUSH
24228: LD_INT 24
24230: PUSH
24231: LD_INT 25
24233: PUSH
24234: LD_INT 26
24236: PUSH
24237: LD_INT 28
24239: PUSH
24240: LD_INT 30
24242: PUSH
24243: LD_INT 31
24245: PUSH
24246: LD_INT 32
24248: PUSH
24249: LD_INT 36
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 101
24285: PUSH
24286: LD_INT 102
24288: PUSH
24289: LD_INT 103
24291: PUSH
24292: LD_INT 104
24294: PUSH
24295: LD_INT 105
24297: PUSH
24298: LD_INT 106
24300: PUSH
24301: LD_INT 107
24303: PUSH
24304: LD_INT 108
24306: PUSH
24307: LD_INT 109
24309: PUSH
24310: LD_INT 110
24312: PUSH
24313: LD_INT 111
24315: PUSH
24316: LD_INT 112
24318: PUSH
24319: LD_INT 114
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: ST_TO_ADDR
24341: GO 26128
24343: LD_INT 11
24345: DOUBLE
24346: EQUAL
24347: IFTRUE 24351
24349: GO 24543
24351: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
24352: LD_ADDR_VAR 0 1
24356: PUSH
24357: LD_INT 2
24359: PUSH
24360: LD_INT 3
24362: PUSH
24363: LD_INT 4
24365: PUSH
24366: LD_INT 5
24368: PUSH
24369: LD_INT 6
24371: PUSH
24372: LD_INT 7
24374: PUSH
24375: LD_INT 8
24377: PUSH
24378: LD_INT 9
24380: PUSH
24381: LD_INT 10
24383: PUSH
24384: LD_INT 11
24386: PUSH
24387: LD_INT 12
24389: PUSH
24390: LD_INT 13
24392: PUSH
24393: LD_INT 14
24395: PUSH
24396: LD_INT 15
24398: PUSH
24399: LD_INT 16
24401: PUSH
24402: LD_INT 17
24404: PUSH
24405: LD_INT 18
24407: PUSH
24408: LD_INT 19
24410: PUSH
24411: LD_INT 20
24413: PUSH
24414: LD_INT 21
24416: PUSH
24417: LD_INT 22
24419: PUSH
24420: LD_INT 23
24422: PUSH
24423: LD_INT 24
24425: PUSH
24426: LD_INT 25
24428: PUSH
24429: LD_INT 26
24431: PUSH
24432: LD_INT 28
24434: PUSH
24435: LD_INT 30
24437: PUSH
24438: LD_INT 31
24440: PUSH
24441: LD_INT 32
24443: PUSH
24444: LD_INT 34
24446: PUSH
24447: LD_INT 36
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 101
24485: PUSH
24486: LD_INT 102
24488: PUSH
24489: LD_INT 103
24491: PUSH
24492: LD_INT 104
24494: PUSH
24495: LD_INT 105
24497: PUSH
24498: LD_INT 106
24500: PUSH
24501: LD_INT 107
24503: PUSH
24504: LD_INT 108
24506: PUSH
24507: LD_INT 109
24509: PUSH
24510: LD_INT 110
24512: PUSH
24513: LD_INT 111
24515: PUSH
24516: LD_INT 112
24518: PUSH
24519: LD_INT 114
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: ST_TO_ADDR
24541: GO 26128
24543: LD_INT 12
24545: DOUBLE
24546: EQUAL
24547: IFTRUE 24551
24549: GO 24759
24551: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
24552: LD_ADDR_VAR 0 1
24556: PUSH
24557: LD_INT 1
24559: PUSH
24560: LD_INT 2
24562: PUSH
24563: LD_INT 3
24565: PUSH
24566: LD_INT 4
24568: PUSH
24569: LD_INT 5
24571: PUSH
24572: LD_INT 6
24574: PUSH
24575: LD_INT 7
24577: PUSH
24578: LD_INT 8
24580: PUSH
24581: LD_INT 9
24583: PUSH
24584: LD_INT 10
24586: PUSH
24587: LD_INT 11
24589: PUSH
24590: LD_INT 12
24592: PUSH
24593: LD_INT 13
24595: PUSH
24596: LD_INT 14
24598: PUSH
24599: LD_INT 15
24601: PUSH
24602: LD_INT 16
24604: PUSH
24605: LD_INT 17
24607: PUSH
24608: LD_INT 18
24610: PUSH
24611: LD_INT 19
24613: PUSH
24614: LD_INT 20
24616: PUSH
24617: LD_INT 21
24619: PUSH
24620: LD_INT 22
24622: PUSH
24623: LD_INT 23
24625: PUSH
24626: LD_INT 24
24628: PUSH
24629: LD_INT 25
24631: PUSH
24632: LD_INT 26
24634: PUSH
24635: LD_INT 27
24637: PUSH
24638: LD_INT 28
24640: PUSH
24641: LD_INT 30
24643: PUSH
24644: LD_INT 31
24646: PUSH
24647: LD_INT 32
24649: PUSH
24650: LD_INT 33
24652: PUSH
24653: LD_INT 34
24655: PUSH
24656: LD_INT 36
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 101
24697: PUSH
24698: LD_INT 102
24700: PUSH
24701: LD_INT 103
24703: PUSH
24704: LD_INT 104
24706: PUSH
24707: LD_INT 105
24709: PUSH
24710: LD_INT 106
24712: PUSH
24713: LD_INT 107
24715: PUSH
24716: LD_INT 108
24718: PUSH
24719: LD_INT 109
24721: PUSH
24722: LD_INT 110
24724: PUSH
24725: LD_INT 111
24727: PUSH
24728: LD_INT 112
24730: PUSH
24731: LD_INT 113
24733: PUSH
24734: LD_INT 114
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: ST_TO_ADDR
24757: GO 26128
24759: LD_INT 13
24761: DOUBLE
24762: EQUAL
24763: IFTRUE 24767
24765: GO 24963
24767: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
24768: LD_ADDR_VAR 0 1
24772: PUSH
24773: LD_INT 1
24775: PUSH
24776: LD_INT 2
24778: PUSH
24779: LD_INT 3
24781: PUSH
24782: LD_INT 4
24784: PUSH
24785: LD_INT 5
24787: PUSH
24788: LD_INT 8
24790: PUSH
24791: LD_INT 9
24793: PUSH
24794: LD_INT 10
24796: PUSH
24797: LD_INT 11
24799: PUSH
24800: LD_INT 12
24802: PUSH
24803: LD_INT 14
24805: PUSH
24806: LD_INT 15
24808: PUSH
24809: LD_INT 16
24811: PUSH
24812: LD_INT 17
24814: PUSH
24815: LD_INT 18
24817: PUSH
24818: LD_INT 19
24820: PUSH
24821: LD_INT 20
24823: PUSH
24824: LD_INT 21
24826: PUSH
24827: LD_INT 22
24829: PUSH
24830: LD_INT 23
24832: PUSH
24833: LD_INT 24
24835: PUSH
24836: LD_INT 25
24838: PUSH
24839: LD_INT 26
24841: PUSH
24842: LD_INT 27
24844: PUSH
24845: LD_INT 28
24847: PUSH
24848: LD_INT 30
24850: PUSH
24851: LD_INT 31
24853: PUSH
24854: LD_INT 32
24856: PUSH
24857: LD_INT 33
24859: PUSH
24860: LD_INT 34
24862: PUSH
24863: LD_INT 36
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 101
24901: PUSH
24902: LD_INT 102
24904: PUSH
24905: LD_INT 103
24907: PUSH
24908: LD_INT 104
24910: PUSH
24911: LD_INT 105
24913: PUSH
24914: LD_INT 106
24916: PUSH
24917: LD_INT 107
24919: PUSH
24920: LD_INT 108
24922: PUSH
24923: LD_INT 109
24925: PUSH
24926: LD_INT 110
24928: PUSH
24929: LD_INT 111
24931: PUSH
24932: LD_INT 112
24934: PUSH
24935: LD_INT 113
24937: PUSH
24938: LD_INT 114
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: ST_TO_ADDR
24961: GO 26128
24963: LD_INT 14
24965: DOUBLE
24966: EQUAL
24967: IFTRUE 24971
24969: GO 25183
24971: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
24972: LD_ADDR_VAR 0 1
24976: PUSH
24977: LD_INT 1
24979: PUSH
24980: LD_INT 2
24982: PUSH
24983: LD_INT 3
24985: PUSH
24986: LD_INT 4
24988: PUSH
24989: LD_INT 5
24991: PUSH
24992: LD_INT 6
24994: PUSH
24995: LD_INT 7
24997: PUSH
24998: LD_INT 8
25000: PUSH
25001: LD_INT 9
25003: PUSH
25004: LD_INT 10
25006: PUSH
25007: LD_INT 11
25009: PUSH
25010: LD_INT 12
25012: PUSH
25013: LD_INT 13
25015: PUSH
25016: LD_INT 14
25018: PUSH
25019: LD_INT 15
25021: PUSH
25022: LD_INT 16
25024: PUSH
25025: LD_INT 17
25027: PUSH
25028: LD_INT 18
25030: PUSH
25031: LD_INT 19
25033: PUSH
25034: LD_INT 20
25036: PUSH
25037: LD_INT 21
25039: PUSH
25040: LD_INT 22
25042: PUSH
25043: LD_INT 23
25045: PUSH
25046: LD_INT 24
25048: PUSH
25049: LD_INT 25
25051: PUSH
25052: LD_INT 26
25054: PUSH
25055: LD_INT 27
25057: PUSH
25058: LD_INT 28
25060: PUSH
25061: LD_INT 29
25063: PUSH
25064: LD_INT 30
25066: PUSH
25067: LD_INT 31
25069: PUSH
25070: LD_INT 32
25072: PUSH
25073: LD_INT 33
25075: PUSH
25076: LD_INT 34
25078: PUSH
25079: LD_INT 36
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 101
25121: PUSH
25122: LD_INT 102
25124: PUSH
25125: LD_INT 103
25127: PUSH
25128: LD_INT 104
25130: PUSH
25131: LD_INT 105
25133: PUSH
25134: LD_INT 106
25136: PUSH
25137: LD_INT 107
25139: PUSH
25140: LD_INT 108
25142: PUSH
25143: LD_INT 109
25145: PUSH
25146: LD_INT 110
25148: PUSH
25149: LD_INT 111
25151: PUSH
25152: LD_INT 112
25154: PUSH
25155: LD_INT 113
25157: PUSH
25158: LD_INT 114
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: ST_TO_ADDR
25181: GO 26128
25183: LD_INT 15
25185: DOUBLE
25186: EQUAL
25187: IFTRUE 25191
25189: GO 25403
25191: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
25192: LD_ADDR_VAR 0 1
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: LD_INT 2
25202: PUSH
25203: LD_INT 3
25205: PUSH
25206: LD_INT 4
25208: PUSH
25209: LD_INT 5
25211: PUSH
25212: LD_INT 6
25214: PUSH
25215: LD_INT 7
25217: PUSH
25218: LD_INT 8
25220: PUSH
25221: LD_INT 9
25223: PUSH
25224: LD_INT 10
25226: PUSH
25227: LD_INT 11
25229: PUSH
25230: LD_INT 12
25232: PUSH
25233: LD_INT 13
25235: PUSH
25236: LD_INT 14
25238: PUSH
25239: LD_INT 15
25241: PUSH
25242: LD_INT 16
25244: PUSH
25245: LD_INT 17
25247: PUSH
25248: LD_INT 18
25250: PUSH
25251: LD_INT 19
25253: PUSH
25254: LD_INT 20
25256: PUSH
25257: LD_INT 21
25259: PUSH
25260: LD_INT 22
25262: PUSH
25263: LD_INT 23
25265: PUSH
25266: LD_INT 24
25268: PUSH
25269: LD_INT 25
25271: PUSH
25272: LD_INT 26
25274: PUSH
25275: LD_INT 27
25277: PUSH
25278: LD_INT 28
25280: PUSH
25281: LD_INT 29
25283: PUSH
25284: LD_INT 30
25286: PUSH
25287: LD_INT 31
25289: PUSH
25290: LD_INT 32
25292: PUSH
25293: LD_INT 33
25295: PUSH
25296: LD_INT 34
25298: PUSH
25299: LD_INT 36
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 101
25341: PUSH
25342: LD_INT 102
25344: PUSH
25345: LD_INT 103
25347: PUSH
25348: LD_INT 104
25350: PUSH
25351: LD_INT 105
25353: PUSH
25354: LD_INT 106
25356: PUSH
25357: LD_INT 107
25359: PUSH
25360: LD_INT 108
25362: PUSH
25363: LD_INT 109
25365: PUSH
25366: LD_INT 110
25368: PUSH
25369: LD_INT 111
25371: PUSH
25372: LD_INT 112
25374: PUSH
25375: LD_INT 113
25377: PUSH
25378: LD_INT 114
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: ST_TO_ADDR
25401: GO 26128
25403: LD_INT 16
25405: DOUBLE
25406: EQUAL
25407: IFTRUE 25411
25409: GO 25535
25411: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
25412: LD_ADDR_VAR 0 1
25416: PUSH
25417: LD_INT 2
25419: PUSH
25420: LD_INT 4
25422: PUSH
25423: LD_INT 5
25425: PUSH
25426: LD_INT 7
25428: PUSH
25429: LD_INT 11
25431: PUSH
25432: LD_INT 12
25434: PUSH
25435: LD_INT 15
25437: PUSH
25438: LD_INT 16
25440: PUSH
25441: LD_INT 20
25443: PUSH
25444: LD_INT 21
25446: PUSH
25447: LD_INT 22
25449: PUSH
25450: LD_INT 23
25452: PUSH
25453: LD_INT 25
25455: PUSH
25456: LD_INT 26
25458: PUSH
25459: LD_INT 30
25461: PUSH
25462: LD_INT 31
25464: PUSH
25465: LD_INT 32
25467: PUSH
25468: LD_INT 33
25470: PUSH
25471: LD_INT 34
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 101
25497: PUSH
25498: LD_INT 102
25500: PUSH
25501: LD_INT 103
25503: PUSH
25504: LD_INT 106
25506: PUSH
25507: LD_INT 108
25509: PUSH
25510: LD_INT 112
25512: PUSH
25513: LD_INT 113
25515: PUSH
25516: LD_INT 114
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: ST_TO_ADDR
25533: GO 26128
25535: LD_INT 17
25537: DOUBLE
25538: EQUAL
25539: IFTRUE 25543
25541: GO 25755
25543: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
25544: LD_ADDR_VAR 0 1
25548: PUSH
25549: LD_INT 1
25551: PUSH
25552: LD_INT 2
25554: PUSH
25555: LD_INT 3
25557: PUSH
25558: LD_INT 4
25560: PUSH
25561: LD_INT 5
25563: PUSH
25564: LD_INT 6
25566: PUSH
25567: LD_INT 7
25569: PUSH
25570: LD_INT 8
25572: PUSH
25573: LD_INT 9
25575: PUSH
25576: LD_INT 10
25578: PUSH
25579: LD_INT 11
25581: PUSH
25582: LD_INT 12
25584: PUSH
25585: LD_INT 13
25587: PUSH
25588: LD_INT 14
25590: PUSH
25591: LD_INT 15
25593: PUSH
25594: LD_INT 16
25596: PUSH
25597: LD_INT 17
25599: PUSH
25600: LD_INT 18
25602: PUSH
25603: LD_INT 19
25605: PUSH
25606: LD_INT 20
25608: PUSH
25609: LD_INT 21
25611: PUSH
25612: LD_INT 22
25614: PUSH
25615: LD_INT 23
25617: PUSH
25618: LD_INT 24
25620: PUSH
25621: LD_INT 25
25623: PUSH
25624: LD_INT 26
25626: PUSH
25627: LD_INT 27
25629: PUSH
25630: LD_INT 28
25632: PUSH
25633: LD_INT 29
25635: PUSH
25636: LD_INT 30
25638: PUSH
25639: LD_INT 31
25641: PUSH
25642: LD_INT 32
25644: PUSH
25645: LD_INT 33
25647: PUSH
25648: LD_INT 34
25650: PUSH
25651: LD_INT 36
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 101
25693: PUSH
25694: LD_INT 102
25696: PUSH
25697: LD_INT 103
25699: PUSH
25700: LD_INT 104
25702: PUSH
25703: LD_INT 105
25705: PUSH
25706: LD_INT 106
25708: PUSH
25709: LD_INT 107
25711: PUSH
25712: LD_INT 108
25714: PUSH
25715: LD_INT 109
25717: PUSH
25718: LD_INT 110
25720: PUSH
25721: LD_INT 111
25723: PUSH
25724: LD_INT 112
25726: PUSH
25727: LD_INT 113
25729: PUSH
25730: LD_INT 114
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: ST_TO_ADDR
25753: GO 26128
25755: LD_INT 18
25757: DOUBLE
25758: EQUAL
25759: IFTRUE 25763
25761: GO 25899
25763: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
25764: LD_ADDR_VAR 0 1
25768: PUSH
25769: LD_INT 2
25771: PUSH
25772: LD_INT 4
25774: PUSH
25775: LD_INT 5
25777: PUSH
25778: LD_INT 7
25780: PUSH
25781: LD_INT 11
25783: PUSH
25784: LD_INT 12
25786: PUSH
25787: LD_INT 15
25789: PUSH
25790: LD_INT 16
25792: PUSH
25793: LD_INT 20
25795: PUSH
25796: LD_INT 21
25798: PUSH
25799: LD_INT 22
25801: PUSH
25802: LD_INT 23
25804: PUSH
25805: LD_INT 25
25807: PUSH
25808: LD_INT 26
25810: PUSH
25811: LD_INT 30
25813: PUSH
25814: LD_INT 31
25816: PUSH
25817: LD_INT 32
25819: PUSH
25820: LD_INT 33
25822: PUSH
25823: LD_INT 34
25825: PUSH
25826: LD_INT 35
25828: PUSH
25829: LD_INT 36
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 101
25857: PUSH
25858: LD_INT 102
25860: PUSH
25861: LD_INT 103
25863: PUSH
25864: LD_INT 106
25866: PUSH
25867: LD_INT 108
25869: PUSH
25870: LD_INT 112
25872: PUSH
25873: LD_INT 113
25875: PUSH
25876: LD_INT 114
25878: PUSH
25879: LD_INT 115
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: ST_TO_ADDR
25897: GO 26128
25899: LD_INT 19
25901: DOUBLE
25902: EQUAL
25903: IFTRUE 25907
25905: GO 26127
25907: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
25908: LD_ADDR_VAR 0 1
25912: PUSH
25913: LD_INT 1
25915: PUSH
25916: LD_INT 2
25918: PUSH
25919: LD_INT 3
25921: PUSH
25922: LD_INT 4
25924: PUSH
25925: LD_INT 5
25927: PUSH
25928: LD_INT 6
25930: PUSH
25931: LD_INT 7
25933: PUSH
25934: LD_INT 8
25936: PUSH
25937: LD_INT 9
25939: PUSH
25940: LD_INT 10
25942: PUSH
25943: LD_INT 11
25945: PUSH
25946: LD_INT 12
25948: PUSH
25949: LD_INT 13
25951: PUSH
25952: LD_INT 14
25954: PUSH
25955: LD_INT 15
25957: PUSH
25958: LD_INT 16
25960: PUSH
25961: LD_INT 17
25963: PUSH
25964: LD_INT 18
25966: PUSH
25967: LD_INT 19
25969: PUSH
25970: LD_INT 20
25972: PUSH
25973: LD_INT 21
25975: PUSH
25976: LD_INT 22
25978: PUSH
25979: LD_INT 23
25981: PUSH
25982: LD_INT 24
25984: PUSH
25985: LD_INT 25
25987: PUSH
25988: LD_INT 26
25990: PUSH
25991: LD_INT 27
25993: PUSH
25994: LD_INT 28
25996: PUSH
25997: LD_INT 29
25999: PUSH
26000: LD_INT 30
26002: PUSH
26003: LD_INT 31
26005: PUSH
26006: LD_INT 32
26008: PUSH
26009: LD_INT 33
26011: PUSH
26012: LD_INT 34
26014: PUSH
26015: LD_INT 35
26017: PUSH
26018: LD_INT 36
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 101
26061: PUSH
26062: LD_INT 102
26064: PUSH
26065: LD_INT 103
26067: PUSH
26068: LD_INT 104
26070: PUSH
26071: LD_INT 105
26073: PUSH
26074: LD_INT 106
26076: PUSH
26077: LD_INT 107
26079: PUSH
26080: LD_INT 108
26082: PUSH
26083: LD_INT 109
26085: PUSH
26086: LD_INT 110
26088: PUSH
26089: LD_INT 111
26091: PUSH
26092: LD_INT 112
26094: PUSH
26095: LD_INT 113
26097: PUSH
26098: LD_INT 114
26100: PUSH
26101: LD_INT 115
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: ST_TO_ADDR
26125: GO 26128
26127: POP
// end else
26128: GO 26347
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
26130: LD_ADDR_VAR 0 1
26134: PUSH
26135: LD_INT 1
26137: PUSH
26138: LD_INT 2
26140: PUSH
26141: LD_INT 3
26143: PUSH
26144: LD_INT 4
26146: PUSH
26147: LD_INT 5
26149: PUSH
26150: LD_INT 6
26152: PUSH
26153: LD_INT 7
26155: PUSH
26156: LD_INT 8
26158: PUSH
26159: LD_INT 9
26161: PUSH
26162: LD_INT 10
26164: PUSH
26165: LD_INT 11
26167: PUSH
26168: LD_INT 12
26170: PUSH
26171: LD_INT 13
26173: PUSH
26174: LD_INT 14
26176: PUSH
26177: LD_INT 15
26179: PUSH
26180: LD_INT 16
26182: PUSH
26183: LD_INT 17
26185: PUSH
26186: LD_INT 18
26188: PUSH
26189: LD_INT 19
26191: PUSH
26192: LD_INT 20
26194: PUSH
26195: LD_INT 21
26197: PUSH
26198: LD_INT 22
26200: PUSH
26201: LD_INT 23
26203: PUSH
26204: LD_INT 24
26206: PUSH
26207: LD_INT 25
26209: PUSH
26210: LD_INT 26
26212: PUSH
26213: LD_INT 27
26215: PUSH
26216: LD_INT 28
26218: PUSH
26219: LD_INT 29
26221: PUSH
26222: LD_INT 30
26224: PUSH
26225: LD_INT 31
26227: PUSH
26228: LD_INT 32
26230: PUSH
26231: LD_INT 33
26233: PUSH
26234: LD_INT 34
26236: PUSH
26237: LD_INT 35
26239: PUSH
26240: LD_INT 36
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 101
26283: PUSH
26284: LD_INT 102
26286: PUSH
26287: LD_INT 103
26289: PUSH
26290: LD_INT 104
26292: PUSH
26293: LD_INT 105
26295: PUSH
26296: LD_INT 106
26298: PUSH
26299: LD_INT 107
26301: PUSH
26302: LD_INT 108
26304: PUSH
26305: LD_INT 109
26307: PUSH
26308: LD_INT 110
26310: PUSH
26311: LD_INT 111
26313: PUSH
26314: LD_INT 112
26316: PUSH
26317: LD_INT 113
26319: PUSH
26320: LD_INT 114
26322: PUSH
26323: LD_INT 115
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: ST_TO_ADDR
// if result then
26347: LD_VAR 0 1
26351: IFFALSE 26640
// begin normal :=  ;
26353: LD_ADDR_VAR 0 3
26357: PUSH
26358: LD_STRING 
26360: ST_TO_ADDR
// hardcore :=  ;
26361: LD_ADDR_VAR 0 4
26365: PUSH
26366: LD_STRING 
26368: ST_TO_ADDR
// for i = 1 to normalCounter do
26369: LD_ADDR_VAR 0 5
26373: PUSH
26374: DOUBLE
26375: LD_INT 1
26377: DEC
26378: ST_TO_ADDR
26379: LD_EXP 66
26383: PUSH
26384: FOR_TO
26385: IFFALSE 26486
// begin tmp := 0 ;
26387: LD_ADDR_VAR 0 2
26391: PUSH
26392: LD_STRING 0
26394: ST_TO_ADDR
// if result [ 1 ] then
26395: LD_VAR 0 1
26399: PUSH
26400: LD_INT 1
26402: ARRAY
26403: IFFALSE 26468
// if result [ 1 ] [ 1 ] = i then
26405: LD_VAR 0 1
26409: PUSH
26410: LD_INT 1
26412: ARRAY
26413: PUSH
26414: LD_INT 1
26416: ARRAY
26417: PUSH
26418: LD_VAR 0 5
26422: EQUAL
26423: IFFALSE 26468
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26425: LD_ADDR_VAR 0 1
26429: PUSH
26430: LD_VAR 0 1
26434: PPUSH
26435: LD_INT 1
26437: PPUSH
26438: LD_VAR 0 1
26442: PUSH
26443: LD_INT 1
26445: ARRAY
26446: PPUSH
26447: LD_INT 1
26449: PPUSH
26450: CALL_OW 3
26454: PPUSH
26455: CALL_OW 1
26459: ST_TO_ADDR
// tmp := 1 ;
26460: LD_ADDR_VAR 0 2
26464: PUSH
26465: LD_STRING 1
26467: ST_TO_ADDR
// end ; normal := normal & tmp ;
26468: LD_ADDR_VAR 0 3
26472: PUSH
26473: LD_VAR 0 3
26477: PUSH
26478: LD_VAR 0 2
26482: STR
26483: ST_TO_ADDR
// end ;
26484: GO 26384
26486: POP
26487: POP
// for i = 1 to hardcoreCounter do
26488: LD_ADDR_VAR 0 5
26492: PUSH
26493: DOUBLE
26494: LD_INT 1
26496: DEC
26497: ST_TO_ADDR
26498: LD_EXP 67
26502: PUSH
26503: FOR_TO
26504: IFFALSE 26609
// begin tmp := 0 ;
26506: LD_ADDR_VAR 0 2
26510: PUSH
26511: LD_STRING 0
26513: ST_TO_ADDR
// if result [ 2 ] then
26514: LD_VAR 0 1
26518: PUSH
26519: LD_INT 2
26521: ARRAY
26522: IFFALSE 26591
// if result [ 2 ] [ 1 ] = 100 + i then
26524: LD_VAR 0 1
26528: PUSH
26529: LD_INT 2
26531: ARRAY
26532: PUSH
26533: LD_INT 1
26535: ARRAY
26536: PUSH
26537: LD_INT 100
26539: PUSH
26540: LD_VAR 0 5
26544: PLUS
26545: EQUAL
26546: IFFALSE 26591
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26548: LD_ADDR_VAR 0 1
26552: PUSH
26553: LD_VAR 0 1
26557: PPUSH
26558: LD_INT 2
26560: PPUSH
26561: LD_VAR 0 1
26565: PUSH
26566: LD_INT 2
26568: ARRAY
26569: PPUSH
26570: LD_INT 1
26572: PPUSH
26573: CALL_OW 3
26577: PPUSH
26578: CALL_OW 1
26582: ST_TO_ADDR
// tmp := 1 ;
26583: LD_ADDR_VAR 0 2
26587: PUSH
26588: LD_STRING 1
26590: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26591: LD_ADDR_VAR 0 4
26595: PUSH
26596: LD_VAR 0 4
26600: PUSH
26601: LD_VAR 0 2
26605: STR
26606: ST_TO_ADDR
// end ;
26607: GO 26503
26609: POP
26610: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
26611: LD_STRING getStreamItemsFromMission("
26613: PUSH
26614: LD_VAR 0 3
26618: STR
26619: PUSH
26620: LD_STRING ","
26622: STR
26623: PUSH
26624: LD_VAR 0 4
26628: STR
26629: PUSH
26630: LD_STRING ")
26632: STR
26633: PPUSH
26634: CALL_OW 559
// end else
26638: GO 26647
// ToLua ( getStreamItemsFromMission("","") ) ;
26640: LD_STRING getStreamItemsFromMission("","")
26642: PPUSH
26643: CALL_OW 559
// end ;
26647: LD_VAR 0 1
26651: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
26652: LD_VAR 0 2
26656: PUSH
26657: LD_INT 100
26659: EQUAL
26660: IFFALSE 27609
// begin if not StreamModeActive then
26662: LD_EXP 65
26666: NOT
26667: IFFALSE 26677
// StreamModeActive := true ;
26669: LD_ADDR_EXP 65
26673: PUSH
26674: LD_INT 1
26676: ST_TO_ADDR
// if p3 = 0 then
26677: LD_VAR 0 3
26681: PUSH
26682: LD_INT 0
26684: EQUAL
26685: IFFALSE 26691
// InitStreamMode ;
26687: CALL 22730 0 0
// if p3 = 1 then
26691: LD_VAR 0 3
26695: PUSH
26696: LD_INT 1
26698: EQUAL
26699: IFFALSE 26709
// sRocket := true ;
26701: LD_ADDR_EXP 70
26705: PUSH
26706: LD_INT 1
26708: ST_TO_ADDR
// if p3 = 2 then
26709: LD_VAR 0 3
26713: PUSH
26714: LD_INT 2
26716: EQUAL
26717: IFFALSE 26727
// sSpeed := true ;
26719: LD_ADDR_EXP 69
26723: PUSH
26724: LD_INT 1
26726: ST_TO_ADDR
// if p3 = 3 then
26727: LD_VAR 0 3
26731: PUSH
26732: LD_INT 3
26734: EQUAL
26735: IFFALSE 26745
// sEngine := true ;
26737: LD_ADDR_EXP 71
26741: PUSH
26742: LD_INT 1
26744: ST_TO_ADDR
// if p3 = 4 then
26745: LD_VAR 0 3
26749: PUSH
26750: LD_INT 4
26752: EQUAL
26753: IFFALSE 26763
// sSpec := true ;
26755: LD_ADDR_EXP 68
26759: PUSH
26760: LD_INT 1
26762: ST_TO_ADDR
// if p3 = 5 then
26763: LD_VAR 0 3
26767: PUSH
26768: LD_INT 5
26770: EQUAL
26771: IFFALSE 26781
// sLevel := true ;
26773: LD_ADDR_EXP 72
26777: PUSH
26778: LD_INT 1
26780: ST_TO_ADDR
// if p3 = 6 then
26781: LD_VAR 0 3
26785: PUSH
26786: LD_INT 6
26788: EQUAL
26789: IFFALSE 26799
// sArmoury := true ;
26791: LD_ADDR_EXP 73
26795: PUSH
26796: LD_INT 1
26798: ST_TO_ADDR
// if p3 = 7 then
26799: LD_VAR 0 3
26803: PUSH
26804: LD_INT 7
26806: EQUAL
26807: IFFALSE 26817
// sRadar := true ;
26809: LD_ADDR_EXP 74
26813: PUSH
26814: LD_INT 1
26816: ST_TO_ADDR
// if p3 = 8 then
26817: LD_VAR 0 3
26821: PUSH
26822: LD_INT 8
26824: EQUAL
26825: IFFALSE 26835
// sBunker := true ;
26827: LD_ADDR_EXP 75
26831: PUSH
26832: LD_INT 1
26834: ST_TO_ADDR
// if p3 = 9 then
26835: LD_VAR 0 3
26839: PUSH
26840: LD_INT 9
26842: EQUAL
26843: IFFALSE 26853
// sHack := true ;
26845: LD_ADDR_EXP 76
26849: PUSH
26850: LD_INT 1
26852: ST_TO_ADDR
// if p3 = 10 then
26853: LD_VAR 0 3
26857: PUSH
26858: LD_INT 10
26860: EQUAL
26861: IFFALSE 26871
// sFire := true ;
26863: LD_ADDR_EXP 77
26867: PUSH
26868: LD_INT 1
26870: ST_TO_ADDR
// if p3 = 11 then
26871: LD_VAR 0 3
26875: PUSH
26876: LD_INT 11
26878: EQUAL
26879: IFFALSE 26889
// sRefresh := true ;
26881: LD_ADDR_EXP 78
26885: PUSH
26886: LD_INT 1
26888: ST_TO_ADDR
// if p3 = 12 then
26889: LD_VAR 0 3
26893: PUSH
26894: LD_INT 12
26896: EQUAL
26897: IFFALSE 26907
// sExp := true ;
26899: LD_ADDR_EXP 79
26903: PUSH
26904: LD_INT 1
26906: ST_TO_ADDR
// if p3 = 13 then
26907: LD_VAR 0 3
26911: PUSH
26912: LD_INT 13
26914: EQUAL
26915: IFFALSE 26925
// sDepot := true ;
26917: LD_ADDR_EXP 80
26921: PUSH
26922: LD_INT 1
26924: ST_TO_ADDR
// if p3 = 14 then
26925: LD_VAR 0 3
26929: PUSH
26930: LD_INT 14
26932: EQUAL
26933: IFFALSE 26943
// sFlag := true ;
26935: LD_ADDR_EXP 81
26939: PUSH
26940: LD_INT 1
26942: ST_TO_ADDR
// if p3 = 15 then
26943: LD_VAR 0 3
26947: PUSH
26948: LD_INT 15
26950: EQUAL
26951: IFFALSE 26961
// sKamikadze := true ;
26953: LD_ADDR_EXP 89
26957: PUSH
26958: LD_INT 1
26960: ST_TO_ADDR
// if p3 = 16 then
26961: LD_VAR 0 3
26965: PUSH
26966: LD_INT 16
26968: EQUAL
26969: IFFALSE 26979
// sTroll := true ;
26971: LD_ADDR_EXP 90
26975: PUSH
26976: LD_INT 1
26978: ST_TO_ADDR
// if p3 = 17 then
26979: LD_VAR 0 3
26983: PUSH
26984: LD_INT 17
26986: EQUAL
26987: IFFALSE 26997
// sSlow := true ;
26989: LD_ADDR_EXP 91
26993: PUSH
26994: LD_INT 1
26996: ST_TO_ADDR
// if p3 = 18 then
26997: LD_VAR 0 3
27001: PUSH
27002: LD_INT 18
27004: EQUAL
27005: IFFALSE 27015
// sLack := true ;
27007: LD_ADDR_EXP 92
27011: PUSH
27012: LD_INT 1
27014: ST_TO_ADDR
// if p3 = 19 then
27015: LD_VAR 0 3
27019: PUSH
27020: LD_INT 19
27022: EQUAL
27023: IFFALSE 27033
// sTank := true ;
27025: LD_ADDR_EXP 94
27029: PUSH
27030: LD_INT 1
27032: ST_TO_ADDR
// if p3 = 20 then
27033: LD_VAR 0 3
27037: PUSH
27038: LD_INT 20
27040: EQUAL
27041: IFFALSE 27051
// sRemote := true ;
27043: LD_ADDR_EXP 95
27047: PUSH
27048: LD_INT 1
27050: ST_TO_ADDR
// if p3 = 21 then
27051: LD_VAR 0 3
27055: PUSH
27056: LD_INT 21
27058: EQUAL
27059: IFFALSE 27069
// sPowell := true ;
27061: LD_ADDR_EXP 96
27065: PUSH
27066: LD_INT 1
27068: ST_TO_ADDR
// if p3 = 22 then
27069: LD_VAR 0 3
27073: PUSH
27074: LD_INT 22
27076: EQUAL
27077: IFFALSE 27087
// sTeleport := true ;
27079: LD_ADDR_EXP 99
27083: PUSH
27084: LD_INT 1
27086: ST_TO_ADDR
// if p3 = 23 then
27087: LD_VAR 0 3
27091: PUSH
27092: LD_INT 23
27094: EQUAL
27095: IFFALSE 27105
// sOilTower := true ;
27097: LD_ADDR_EXP 101
27101: PUSH
27102: LD_INT 1
27104: ST_TO_ADDR
// if p3 = 24 then
27105: LD_VAR 0 3
27109: PUSH
27110: LD_INT 24
27112: EQUAL
27113: IFFALSE 27123
// sShovel := true ;
27115: LD_ADDR_EXP 102
27119: PUSH
27120: LD_INT 1
27122: ST_TO_ADDR
// if p3 = 25 then
27123: LD_VAR 0 3
27127: PUSH
27128: LD_INT 25
27130: EQUAL
27131: IFFALSE 27141
// sSheik := true ;
27133: LD_ADDR_EXP 103
27137: PUSH
27138: LD_INT 1
27140: ST_TO_ADDR
// if p3 = 26 then
27141: LD_VAR 0 3
27145: PUSH
27146: LD_INT 26
27148: EQUAL
27149: IFFALSE 27159
// sEarthquake := true ;
27151: LD_ADDR_EXP 105
27155: PUSH
27156: LD_INT 1
27158: ST_TO_ADDR
// if p3 = 27 then
27159: LD_VAR 0 3
27163: PUSH
27164: LD_INT 27
27166: EQUAL
27167: IFFALSE 27177
// sAI := true ;
27169: LD_ADDR_EXP 106
27173: PUSH
27174: LD_INT 1
27176: ST_TO_ADDR
// if p3 = 28 then
27177: LD_VAR 0 3
27181: PUSH
27182: LD_INT 28
27184: EQUAL
27185: IFFALSE 27195
// sCargo := true ;
27187: LD_ADDR_EXP 109
27191: PUSH
27192: LD_INT 1
27194: ST_TO_ADDR
// if p3 = 29 then
27195: LD_VAR 0 3
27199: PUSH
27200: LD_INT 29
27202: EQUAL
27203: IFFALSE 27213
// sDLaser := true ;
27205: LD_ADDR_EXP 110
27209: PUSH
27210: LD_INT 1
27212: ST_TO_ADDR
// if p3 = 30 then
27213: LD_VAR 0 3
27217: PUSH
27218: LD_INT 30
27220: EQUAL
27221: IFFALSE 27231
// sExchange := true ;
27223: LD_ADDR_EXP 111
27227: PUSH
27228: LD_INT 1
27230: ST_TO_ADDR
// if p3 = 31 then
27231: LD_VAR 0 3
27235: PUSH
27236: LD_INT 31
27238: EQUAL
27239: IFFALSE 27249
// sFac := true ;
27241: LD_ADDR_EXP 112
27245: PUSH
27246: LD_INT 1
27248: ST_TO_ADDR
// if p3 = 32 then
27249: LD_VAR 0 3
27253: PUSH
27254: LD_INT 32
27256: EQUAL
27257: IFFALSE 27267
// sPower := true ;
27259: LD_ADDR_EXP 113
27263: PUSH
27264: LD_INT 1
27266: ST_TO_ADDR
// if p3 = 33 then
27267: LD_VAR 0 3
27271: PUSH
27272: LD_INT 33
27274: EQUAL
27275: IFFALSE 27285
// sRandom := true ;
27277: LD_ADDR_EXP 114
27281: PUSH
27282: LD_INT 1
27284: ST_TO_ADDR
// if p3 = 34 then
27285: LD_VAR 0 3
27289: PUSH
27290: LD_INT 34
27292: EQUAL
27293: IFFALSE 27303
// sShield := true ;
27295: LD_ADDR_EXP 115
27299: PUSH
27300: LD_INT 1
27302: ST_TO_ADDR
// if p3 = 35 then
27303: LD_VAR 0 3
27307: PUSH
27308: LD_INT 35
27310: EQUAL
27311: IFFALSE 27321
// sTime := true ;
27313: LD_ADDR_EXP 116
27317: PUSH
27318: LD_INT 1
27320: ST_TO_ADDR
// if p3 = 36 then
27321: LD_VAR 0 3
27325: PUSH
27326: LD_INT 36
27328: EQUAL
27329: IFFALSE 27339
// sTools := true ;
27331: LD_ADDR_EXP 117
27335: PUSH
27336: LD_INT 1
27338: ST_TO_ADDR
// if p3 = 101 then
27339: LD_VAR 0 3
27343: PUSH
27344: LD_INT 101
27346: EQUAL
27347: IFFALSE 27357
// sSold := true ;
27349: LD_ADDR_EXP 82
27353: PUSH
27354: LD_INT 1
27356: ST_TO_ADDR
// if p3 = 102 then
27357: LD_VAR 0 3
27361: PUSH
27362: LD_INT 102
27364: EQUAL
27365: IFFALSE 27375
// sDiff := true ;
27367: LD_ADDR_EXP 83
27371: PUSH
27372: LD_INT 1
27374: ST_TO_ADDR
// if p3 = 103 then
27375: LD_VAR 0 3
27379: PUSH
27380: LD_INT 103
27382: EQUAL
27383: IFFALSE 27393
// sFog := true ;
27385: LD_ADDR_EXP 86
27389: PUSH
27390: LD_INT 1
27392: ST_TO_ADDR
// if p3 = 104 then
27393: LD_VAR 0 3
27397: PUSH
27398: LD_INT 104
27400: EQUAL
27401: IFFALSE 27411
// sReset := true ;
27403: LD_ADDR_EXP 87
27407: PUSH
27408: LD_INT 1
27410: ST_TO_ADDR
// if p3 = 105 then
27411: LD_VAR 0 3
27415: PUSH
27416: LD_INT 105
27418: EQUAL
27419: IFFALSE 27429
// sSun := true ;
27421: LD_ADDR_EXP 88
27425: PUSH
27426: LD_INT 1
27428: ST_TO_ADDR
// if p3 = 106 then
27429: LD_VAR 0 3
27433: PUSH
27434: LD_INT 106
27436: EQUAL
27437: IFFALSE 27447
// sTiger := true ;
27439: LD_ADDR_EXP 84
27443: PUSH
27444: LD_INT 1
27446: ST_TO_ADDR
// if p3 = 107 then
27447: LD_VAR 0 3
27451: PUSH
27452: LD_INT 107
27454: EQUAL
27455: IFFALSE 27465
// sBomb := true ;
27457: LD_ADDR_EXP 85
27461: PUSH
27462: LD_INT 1
27464: ST_TO_ADDR
// if p3 = 108 then
27465: LD_VAR 0 3
27469: PUSH
27470: LD_INT 108
27472: EQUAL
27473: IFFALSE 27483
// sWound := true ;
27475: LD_ADDR_EXP 93
27479: PUSH
27480: LD_INT 1
27482: ST_TO_ADDR
// if p3 = 109 then
27483: LD_VAR 0 3
27487: PUSH
27488: LD_INT 109
27490: EQUAL
27491: IFFALSE 27501
// sBetray := true ;
27493: LD_ADDR_EXP 97
27497: PUSH
27498: LD_INT 1
27500: ST_TO_ADDR
// if p3 = 110 then
27501: LD_VAR 0 3
27505: PUSH
27506: LD_INT 110
27508: EQUAL
27509: IFFALSE 27519
// sContamin := true ;
27511: LD_ADDR_EXP 98
27515: PUSH
27516: LD_INT 1
27518: ST_TO_ADDR
// if p3 = 111 then
27519: LD_VAR 0 3
27523: PUSH
27524: LD_INT 111
27526: EQUAL
27527: IFFALSE 27537
// sOil := true ;
27529: LD_ADDR_EXP 100
27533: PUSH
27534: LD_INT 1
27536: ST_TO_ADDR
// if p3 = 112 then
27537: LD_VAR 0 3
27541: PUSH
27542: LD_INT 112
27544: EQUAL
27545: IFFALSE 27555
// sStu := true ;
27547: LD_ADDR_EXP 104
27551: PUSH
27552: LD_INT 1
27554: ST_TO_ADDR
// if p3 = 113 then
27555: LD_VAR 0 3
27559: PUSH
27560: LD_INT 113
27562: EQUAL
27563: IFFALSE 27573
// sBazooka := true ;
27565: LD_ADDR_EXP 107
27569: PUSH
27570: LD_INT 1
27572: ST_TO_ADDR
// if p3 = 114 then
27573: LD_VAR 0 3
27577: PUSH
27578: LD_INT 114
27580: EQUAL
27581: IFFALSE 27591
// sMortar := true ;
27583: LD_ADDR_EXP 108
27587: PUSH
27588: LD_INT 1
27590: ST_TO_ADDR
// if p3 = 115 then
27591: LD_VAR 0 3
27595: PUSH
27596: LD_INT 115
27598: EQUAL
27599: IFFALSE 27609
// sRanger := true ;
27601: LD_ADDR_EXP 118
27605: PUSH
27606: LD_INT 1
27608: ST_TO_ADDR
// end ; end ;
27609: PPOPN 6
27611: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27612: LD_EXP 65
27616: PUSH
27617: LD_EXP 70
27621: AND
27622: IFFALSE 27746
27624: GO 27626
27626: DISABLE
27627: LD_INT 0
27629: PPUSH
27630: PPUSH
// begin enable ;
27631: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27632: LD_ADDR_VAR 0 2
27636: PUSH
27637: LD_INT 22
27639: PUSH
27640: LD_OWVAR 2
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 2
27651: PUSH
27652: LD_INT 34
27654: PUSH
27655: LD_INT 7
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 34
27664: PUSH
27665: LD_INT 45
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 34
27674: PUSH
27675: LD_INT 28
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 34
27684: PUSH
27685: LD_INT 47
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PPUSH
27703: CALL_OW 69
27707: ST_TO_ADDR
// if not tmp then
27708: LD_VAR 0 2
27712: NOT
27713: IFFALSE 27717
// exit ;
27715: GO 27746
// for i in tmp do
27717: LD_ADDR_VAR 0 1
27721: PUSH
27722: LD_VAR 0 2
27726: PUSH
27727: FOR_IN
27728: IFFALSE 27744
// begin SetLives ( i , 0 ) ;
27730: LD_VAR 0 1
27734: PPUSH
27735: LD_INT 0
27737: PPUSH
27738: CALL_OW 234
// end ;
27742: GO 27727
27744: POP
27745: POP
// end ;
27746: PPOPN 2
27748: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27749: LD_EXP 65
27753: PUSH
27754: LD_EXP 71
27758: AND
27759: IFFALSE 27843
27761: GO 27763
27763: DISABLE
27764: LD_INT 0
27766: PPUSH
27767: PPUSH
// begin enable ;
27768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27769: LD_ADDR_VAR 0 2
27773: PUSH
27774: LD_INT 22
27776: PUSH
27777: LD_OWVAR 2
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 32
27788: PUSH
27789: LD_INT 3
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PPUSH
27800: CALL_OW 69
27804: ST_TO_ADDR
// if not tmp then
27805: LD_VAR 0 2
27809: NOT
27810: IFFALSE 27814
// exit ;
27812: GO 27843
// for i in tmp do
27814: LD_ADDR_VAR 0 1
27818: PUSH
27819: LD_VAR 0 2
27823: PUSH
27824: FOR_IN
27825: IFFALSE 27841
// begin SetLives ( i , 0 ) ;
27827: LD_VAR 0 1
27831: PPUSH
27832: LD_INT 0
27834: PPUSH
27835: CALL_OW 234
// end ;
27839: GO 27824
27841: POP
27842: POP
// end ;
27843: PPOPN 2
27845: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27846: LD_EXP 65
27850: PUSH
27851: LD_EXP 68
27855: AND
27856: IFFALSE 27949
27858: GO 27860
27860: DISABLE
27861: LD_INT 0
27863: PPUSH
// begin enable ;
27864: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27865: LD_ADDR_VAR 0 1
27869: PUSH
27870: LD_INT 22
27872: PUSH
27873: LD_OWVAR 2
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 2
27884: PUSH
27885: LD_INT 25
27887: PUSH
27888: LD_INT 5
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 25
27897: PUSH
27898: LD_INT 9
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 25
27907: PUSH
27908: LD_INT 8
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PPUSH
27925: CALL_OW 69
27929: PUSH
27930: FOR_IN
27931: IFFALSE 27947
// begin SetClass ( i , 1 ) ;
27933: LD_VAR 0 1
27937: PPUSH
27938: LD_INT 1
27940: PPUSH
27941: CALL_OW 336
// end ;
27945: GO 27930
27947: POP
27948: POP
// end ;
27949: PPOPN 1
27951: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27952: LD_EXP 65
27956: PUSH
27957: LD_EXP 69
27961: AND
27962: PUSH
27963: LD_OWVAR 65
27967: PUSH
27968: LD_INT 7
27970: LESS
27971: AND
27972: IFFALSE 27986
27974: GO 27976
27976: DISABLE
// begin enable ;
27977: ENABLE
// game_speed := 7 ;
27978: LD_ADDR_OWVAR 65
27982: PUSH
27983: LD_INT 7
27985: ST_TO_ADDR
// end ;
27986: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27987: LD_EXP 65
27991: PUSH
27992: LD_EXP 72
27996: AND
27997: IFFALSE 28199
27999: GO 28001
28001: DISABLE
28002: LD_INT 0
28004: PPUSH
28005: PPUSH
28006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28007: LD_ADDR_VAR 0 3
28011: PUSH
28012: LD_INT 81
28014: PUSH
28015: LD_OWVAR 2
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 21
28026: PUSH
28027: LD_INT 1
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PPUSH
28038: CALL_OW 69
28042: ST_TO_ADDR
// if not tmp then
28043: LD_VAR 0 3
28047: NOT
28048: IFFALSE 28052
// exit ;
28050: GO 28199
// if tmp > 5 then
28052: LD_VAR 0 3
28056: PUSH
28057: LD_INT 5
28059: GREATER
28060: IFFALSE 28072
// k := 5 else
28062: LD_ADDR_VAR 0 2
28066: PUSH
28067: LD_INT 5
28069: ST_TO_ADDR
28070: GO 28082
// k := tmp ;
28072: LD_ADDR_VAR 0 2
28076: PUSH
28077: LD_VAR 0 3
28081: ST_TO_ADDR
// for i := 1 to k do
28082: LD_ADDR_VAR 0 1
28086: PUSH
28087: DOUBLE
28088: LD_INT 1
28090: DEC
28091: ST_TO_ADDR
28092: LD_VAR 0 2
28096: PUSH
28097: FOR_TO
28098: IFFALSE 28197
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28100: LD_VAR 0 3
28104: PUSH
28105: LD_VAR 0 1
28109: ARRAY
28110: PPUSH
28111: LD_VAR 0 1
28115: PUSH
28116: LD_INT 4
28118: MOD
28119: PUSH
28120: LD_INT 1
28122: PLUS
28123: PPUSH
28124: CALL_OW 259
28128: PUSH
28129: LD_INT 10
28131: LESS
28132: IFFALSE 28195
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28134: LD_VAR 0 3
28138: PUSH
28139: LD_VAR 0 1
28143: ARRAY
28144: PPUSH
28145: LD_VAR 0 1
28149: PUSH
28150: LD_INT 4
28152: MOD
28153: PUSH
28154: LD_INT 1
28156: PLUS
28157: PPUSH
28158: LD_VAR 0 3
28162: PUSH
28163: LD_VAR 0 1
28167: ARRAY
28168: PPUSH
28169: LD_VAR 0 1
28173: PUSH
28174: LD_INT 4
28176: MOD
28177: PUSH
28178: LD_INT 1
28180: PLUS
28181: PPUSH
28182: CALL_OW 259
28186: PUSH
28187: LD_INT 1
28189: PLUS
28190: PPUSH
28191: CALL_OW 237
28195: GO 28097
28197: POP
28198: POP
// end ;
28199: PPOPN 3
28201: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28202: LD_EXP 65
28206: PUSH
28207: LD_EXP 73
28211: AND
28212: IFFALSE 28232
28214: GO 28216
28216: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28217: LD_INT 4
28219: PPUSH
28220: LD_OWVAR 2
28224: PPUSH
28225: LD_INT 0
28227: PPUSH
28228: CALL_OW 324
28232: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28233: LD_EXP 65
28237: PUSH
28238: LD_EXP 102
28242: AND
28243: IFFALSE 28263
28245: GO 28247
28247: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28248: LD_INT 19
28250: PPUSH
28251: LD_OWVAR 2
28255: PPUSH
28256: LD_INT 0
28258: PPUSH
28259: CALL_OW 324
28263: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28264: LD_EXP 65
28268: PUSH
28269: LD_EXP 74
28273: AND
28274: IFFALSE 28376
28276: GO 28278
28278: DISABLE
28279: LD_INT 0
28281: PPUSH
28282: PPUSH
// begin enable ;
28283: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28284: LD_ADDR_VAR 0 2
28288: PUSH
28289: LD_INT 22
28291: PUSH
28292: LD_OWVAR 2
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 2
28303: PUSH
28304: LD_INT 34
28306: PUSH
28307: LD_INT 11
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 34
28316: PUSH
28317: LD_INT 30
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: LIST
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PPUSH
28333: CALL_OW 69
28337: ST_TO_ADDR
// if not tmp then
28338: LD_VAR 0 2
28342: NOT
28343: IFFALSE 28347
// exit ;
28345: GO 28376
// for i in tmp do
28347: LD_ADDR_VAR 0 1
28351: PUSH
28352: LD_VAR 0 2
28356: PUSH
28357: FOR_IN
28358: IFFALSE 28374
// begin SetLives ( i , 0 ) ;
28360: LD_VAR 0 1
28364: PPUSH
28365: LD_INT 0
28367: PPUSH
28368: CALL_OW 234
// end ;
28372: GO 28357
28374: POP
28375: POP
// end ;
28376: PPOPN 2
28378: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28379: LD_EXP 65
28383: PUSH
28384: LD_EXP 75
28388: AND
28389: IFFALSE 28409
28391: GO 28393
28393: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28394: LD_INT 32
28396: PPUSH
28397: LD_OWVAR 2
28401: PPUSH
28402: LD_INT 0
28404: PPUSH
28405: CALL_OW 324
28409: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28410: LD_EXP 65
28414: PUSH
28415: LD_EXP 76
28419: AND
28420: IFFALSE 28601
28422: GO 28424
28424: DISABLE
28425: LD_INT 0
28427: PPUSH
28428: PPUSH
28429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28430: LD_ADDR_VAR 0 2
28434: PUSH
28435: LD_INT 22
28437: PUSH
28438: LD_OWVAR 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 33
28449: PUSH
28450: LD_INT 3
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 69
28465: ST_TO_ADDR
// if not tmp then
28466: LD_VAR 0 2
28470: NOT
28471: IFFALSE 28475
// exit ;
28473: GO 28601
// side := 0 ;
28475: LD_ADDR_VAR 0 3
28479: PUSH
28480: LD_INT 0
28482: ST_TO_ADDR
// for i := 1 to 8 do
28483: LD_ADDR_VAR 0 1
28487: PUSH
28488: DOUBLE
28489: LD_INT 1
28491: DEC
28492: ST_TO_ADDR
28493: LD_INT 8
28495: PUSH
28496: FOR_TO
28497: IFFALSE 28545
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28499: LD_OWVAR 2
28503: PUSH
28504: LD_VAR 0 1
28508: NONEQUAL
28509: PUSH
28510: LD_OWVAR 2
28514: PPUSH
28515: LD_VAR 0 1
28519: PPUSH
28520: CALL_OW 81
28524: PUSH
28525: LD_INT 2
28527: EQUAL
28528: AND
28529: IFFALSE 28543
// begin side := i ;
28531: LD_ADDR_VAR 0 3
28535: PUSH
28536: LD_VAR 0 1
28540: ST_TO_ADDR
// break ;
28541: GO 28545
// end ;
28543: GO 28496
28545: POP
28546: POP
// if not side then
28547: LD_VAR 0 3
28551: NOT
28552: IFFALSE 28556
// exit ;
28554: GO 28601
// for i := 1 to tmp do
28556: LD_ADDR_VAR 0 1
28560: PUSH
28561: DOUBLE
28562: LD_INT 1
28564: DEC
28565: ST_TO_ADDR
28566: LD_VAR 0 2
28570: PUSH
28571: FOR_TO
28572: IFFALSE 28599
// if Prob ( 60 ) then
28574: LD_INT 60
28576: PPUSH
28577: CALL_OW 13
28581: IFFALSE 28597
// SetSide ( i , side ) ;
28583: LD_VAR 0 1
28587: PPUSH
28588: LD_VAR 0 3
28592: PPUSH
28593: CALL_OW 235
28597: GO 28571
28599: POP
28600: POP
// end ;
28601: PPOPN 3
28603: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28604: LD_EXP 65
28608: PUSH
28609: LD_EXP 78
28613: AND
28614: IFFALSE 28733
28616: GO 28618
28618: DISABLE
28619: LD_INT 0
28621: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28622: LD_ADDR_VAR 0 1
28626: PUSH
28627: LD_INT 22
28629: PUSH
28630: LD_OWVAR 2
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 21
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 3
28651: PUSH
28652: LD_INT 23
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: LIST
28670: PPUSH
28671: CALL_OW 69
28675: PUSH
28676: FOR_IN
28677: IFFALSE 28731
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28679: LD_VAR 0 1
28683: PPUSH
28684: CALL_OW 257
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: LD_INT 2
28694: PUSH
28695: LD_INT 3
28697: PUSH
28698: LD_INT 4
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: IN
28707: IFFALSE 28729
// SetClass ( un , rand ( 1 , 4 ) ) ;
28709: LD_VAR 0 1
28713: PPUSH
28714: LD_INT 1
28716: PPUSH
28717: LD_INT 4
28719: PPUSH
28720: CALL_OW 12
28724: PPUSH
28725: CALL_OW 336
28729: GO 28676
28731: POP
28732: POP
// end ;
28733: PPOPN 1
28735: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28736: LD_EXP 65
28740: PUSH
28741: LD_EXP 77
28745: AND
28746: IFFALSE 28825
28748: GO 28750
28750: DISABLE
28751: LD_INT 0
28753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28754: LD_ADDR_VAR 0 1
28758: PUSH
28759: LD_INT 22
28761: PUSH
28762: LD_OWVAR 2
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 21
28773: PUSH
28774: LD_INT 3
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PPUSH
28785: CALL_OW 69
28789: ST_TO_ADDR
// if not tmp then
28790: LD_VAR 0 1
28794: NOT
28795: IFFALSE 28799
// exit ;
28797: GO 28825
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28799: LD_VAR 0 1
28803: PUSH
28804: LD_INT 1
28806: PPUSH
28807: LD_VAR 0 1
28811: PPUSH
28812: CALL_OW 12
28816: ARRAY
28817: PPUSH
28818: LD_INT 100
28820: PPUSH
28821: CALL_OW 234
// end ;
28825: PPOPN 1
28827: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28828: LD_EXP 65
28832: PUSH
28833: LD_EXP 79
28837: AND
28838: IFFALSE 28936
28840: GO 28842
28842: DISABLE
28843: LD_INT 0
28845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28846: LD_ADDR_VAR 0 1
28850: PUSH
28851: LD_INT 22
28853: PUSH
28854: LD_OWVAR 2
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 21
28865: PUSH
28866: LD_INT 1
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PPUSH
28877: CALL_OW 69
28881: ST_TO_ADDR
// if not tmp then
28882: LD_VAR 0 1
28886: NOT
28887: IFFALSE 28891
// exit ;
28889: GO 28936
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28891: LD_VAR 0 1
28895: PUSH
28896: LD_INT 1
28898: PPUSH
28899: LD_VAR 0 1
28903: PPUSH
28904: CALL_OW 12
28908: ARRAY
28909: PPUSH
28910: LD_INT 1
28912: PPUSH
28913: LD_INT 4
28915: PPUSH
28916: CALL_OW 12
28920: PPUSH
28921: LD_INT 3000
28923: PPUSH
28924: LD_INT 9000
28926: PPUSH
28927: CALL_OW 12
28931: PPUSH
28932: CALL_OW 492
// end ;
28936: PPOPN 1
28938: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28939: LD_EXP 65
28943: PUSH
28944: LD_EXP 80
28948: AND
28949: IFFALSE 28969
28951: GO 28953
28953: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28954: LD_INT 1
28956: PPUSH
28957: LD_OWVAR 2
28961: PPUSH
28962: LD_INT 0
28964: PPUSH
28965: CALL_OW 324
28969: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28970: LD_EXP 65
28974: PUSH
28975: LD_EXP 81
28979: AND
28980: IFFALSE 29063
28982: GO 28984
28984: DISABLE
28985: LD_INT 0
28987: PPUSH
28988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28989: LD_ADDR_VAR 0 2
28993: PUSH
28994: LD_INT 22
28996: PUSH
28997: LD_OWVAR 2
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 21
29008: PUSH
29009: LD_INT 3
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PPUSH
29020: CALL_OW 69
29024: ST_TO_ADDR
// if not tmp then
29025: LD_VAR 0 2
29029: NOT
29030: IFFALSE 29034
// exit ;
29032: GO 29063
// for i in tmp do
29034: LD_ADDR_VAR 0 1
29038: PUSH
29039: LD_VAR 0 2
29043: PUSH
29044: FOR_IN
29045: IFFALSE 29061
// SetBLevel ( i , 10 ) ;
29047: LD_VAR 0 1
29051: PPUSH
29052: LD_INT 10
29054: PPUSH
29055: CALL_OW 241
29059: GO 29044
29061: POP
29062: POP
// end ;
29063: PPOPN 2
29065: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29066: LD_EXP 65
29070: PUSH
29071: LD_EXP 82
29075: AND
29076: IFFALSE 29187
29078: GO 29080
29080: DISABLE
29081: LD_INT 0
29083: PPUSH
29084: PPUSH
29085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29086: LD_ADDR_VAR 0 3
29090: PUSH
29091: LD_INT 22
29093: PUSH
29094: LD_OWVAR 2
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 25
29105: PUSH
29106: LD_INT 1
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PPUSH
29117: CALL_OW 69
29121: ST_TO_ADDR
// if not tmp then
29122: LD_VAR 0 3
29126: NOT
29127: IFFALSE 29131
// exit ;
29129: GO 29187
// un := tmp [ rand ( 1 , tmp ) ] ;
29131: LD_ADDR_VAR 0 2
29135: PUSH
29136: LD_VAR 0 3
29140: PUSH
29141: LD_INT 1
29143: PPUSH
29144: LD_VAR 0 3
29148: PPUSH
29149: CALL_OW 12
29153: ARRAY
29154: ST_TO_ADDR
// if Crawls ( un ) then
29155: LD_VAR 0 2
29159: PPUSH
29160: CALL_OW 318
29164: IFFALSE 29175
// ComWalk ( un ) ;
29166: LD_VAR 0 2
29170: PPUSH
29171: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29175: LD_VAR 0 2
29179: PPUSH
29180: LD_INT 5
29182: PPUSH
29183: CALL_OW 336
// end ;
29187: PPOPN 3
29189: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
29190: LD_EXP 65
29194: PUSH
29195: LD_EXP 83
29199: AND
29200: PUSH
29201: LD_OWVAR 67
29205: PUSH
29206: LD_INT 3
29208: LESS
29209: AND
29210: IFFALSE 29229
29212: GO 29214
29214: DISABLE
// Difficulty := Difficulty + 1 ;
29215: LD_ADDR_OWVAR 67
29219: PUSH
29220: LD_OWVAR 67
29224: PUSH
29225: LD_INT 1
29227: PLUS
29228: ST_TO_ADDR
29229: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29230: LD_EXP 65
29234: PUSH
29235: LD_EXP 84
29239: AND
29240: IFFALSE 29343
29242: GO 29244
29244: DISABLE
29245: LD_INT 0
29247: PPUSH
// begin for i := 1 to 5 do
29248: LD_ADDR_VAR 0 1
29252: PUSH
29253: DOUBLE
29254: LD_INT 1
29256: DEC
29257: ST_TO_ADDR
29258: LD_INT 5
29260: PUSH
29261: FOR_TO
29262: IFFALSE 29341
// begin uc_nation := nation_nature ;
29264: LD_ADDR_OWVAR 21
29268: PUSH
29269: LD_INT 0
29271: ST_TO_ADDR
// uc_side := 0 ;
29272: LD_ADDR_OWVAR 20
29276: PUSH
29277: LD_INT 0
29279: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29280: LD_ADDR_OWVAR 29
29284: PUSH
29285: LD_INT 12
29287: PUSH
29288: LD_INT 12
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: ST_TO_ADDR
// hc_agressivity := 20 ;
29295: LD_ADDR_OWVAR 35
29299: PUSH
29300: LD_INT 20
29302: ST_TO_ADDR
// hc_class := class_tiger ;
29303: LD_ADDR_OWVAR 28
29307: PUSH
29308: LD_INT 14
29310: ST_TO_ADDR
// hc_gallery :=  ;
29311: LD_ADDR_OWVAR 33
29315: PUSH
29316: LD_STRING 
29318: ST_TO_ADDR
// hc_name :=  ;
29319: LD_ADDR_OWVAR 26
29323: PUSH
29324: LD_STRING 
29326: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29327: CALL_OW 44
29331: PPUSH
29332: LD_INT 0
29334: PPUSH
29335: CALL_OW 51
// end ;
29339: GO 29261
29341: POP
29342: POP
// end ;
29343: PPOPN 1
29345: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29346: LD_EXP 65
29350: PUSH
29351: LD_EXP 85
29355: AND
29356: IFFALSE 29365
29358: GO 29360
29360: DISABLE
// StreamSibBomb ;
29361: CALL 29366 0 0
29365: END
// export function StreamSibBomb ; var i , x , y ; begin
29366: LD_INT 0
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
// result := false ;
29372: LD_ADDR_VAR 0 1
29376: PUSH
29377: LD_INT 0
29379: ST_TO_ADDR
// for i := 1 to 16 do
29380: LD_ADDR_VAR 0 2
29384: PUSH
29385: DOUBLE
29386: LD_INT 1
29388: DEC
29389: ST_TO_ADDR
29390: LD_INT 16
29392: PUSH
29393: FOR_TO
29394: IFFALSE 29593
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29396: LD_ADDR_VAR 0 3
29400: PUSH
29401: LD_INT 10
29403: PUSH
29404: LD_INT 20
29406: PUSH
29407: LD_INT 30
29409: PUSH
29410: LD_INT 40
29412: PUSH
29413: LD_INT 50
29415: PUSH
29416: LD_INT 60
29418: PUSH
29419: LD_INT 70
29421: PUSH
29422: LD_INT 80
29424: PUSH
29425: LD_INT 90
29427: PUSH
29428: LD_INT 100
29430: PUSH
29431: LD_INT 110
29433: PUSH
29434: LD_INT 120
29436: PUSH
29437: LD_INT 130
29439: PUSH
29440: LD_INT 140
29442: PUSH
29443: LD_INT 150
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 1
29465: PPUSH
29466: LD_INT 15
29468: PPUSH
29469: CALL_OW 12
29473: ARRAY
29474: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29475: LD_ADDR_VAR 0 4
29479: PUSH
29480: LD_INT 10
29482: PUSH
29483: LD_INT 20
29485: PUSH
29486: LD_INT 30
29488: PUSH
29489: LD_INT 40
29491: PUSH
29492: LD_INT 50
29494: PUSH
29495: LD_INT 60
29497: PUSH
29498: LD_INT 70
29500: PUSH
29501: LD_INT 80
29503: PUSH
29504: LD_INT 90
29506: PUSH
29507: LD_INT 100
29509: PUSH
29510: LD_INT 110
29512: PUSH
29513: LD_INT 120
29515: PUSH
29516: LD_INT 130
29518: PUSH
29519: LD_INT 140
29521: PUSH
29522: LD_INT 150
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 1
29544: PPUSH
29545: LD_INT 15
29547: PPUSH
29548: CALL_OW 12
29552: ARRAY
29553: ST_TO_ADDR
// if ValidHex ( x , y ) then
29554: LD_VAR 0 3
29558: PPUSH
29559: LD_VAR 0 4
29563: PPUSH
29564: CALL_OW 488
29568: IFFALSE 29591
// begin result := [ x , y ] ;
29570: LD_ADDR_VAR 0 1
29574: PUSH
29575: LD_VAR 0 3
29579: PUSH
29580: LD_VAR 0 4
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: ST_TO_ADDR
// break ;
29589: GO 29593
// end ; end ;
29591: GO 29393
29593: POP
29594: POP
// if result then
29595: LD_VAR 0 1
29599: IFFALSE 29659
// begin ToLua ( playSibBomb() ) ;
29601: LD_STRING playSibBomb()
29603: PPUSH
29604: CALL_OW 559
// wait ( 0 0$14 ) ;
29608: LD_INT 490
29610: PPUSH
29611: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29615: LD_VAR 0 1
29619: PUSH
29620: LD_INT 1
29622: ARRAY
29623: PPUSH
29624: LD_VAR 0 1
29628: PUSH
29629: LD_INT 2
29631: ARRAY
29632: PPUSH
29633: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29637: LD_VAR 0 1
29641: PUSH
29642: LD_INT 1
29644: ARRAY
29645: PPUSH
29646: LD_VAR 0 1
29650: PUSH
29651: LD_INT 2
29653: ARRAY
29654: PPUSH
29655: CALL_OW 429
// end ; end ;
29659: LD_VAR 0 1
29663: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29664: LD_EXP 65
29668: PUSH
29669: LD_EXP 87
29673: AND
29674: IFFALSE 29686
29676: GO 29678
29678: DISABLE
// YouLost (  ) ;
29679: LD_STRING 
29681: PPUSH
29682: CALL_OW 104
29686: END
// every 0 0$1 trigger StreamModeActive and sFog do
29687: LD_EXP 65
29691: PUSH
29692: LD_EXP 86
29696: AND
29697: IFFALSE 29711
29699: GO 29701
29701: DISABLE
// FogOff ( your_side ) ;
29702: LD_OWVAR 2
29706: PPUSH
29707: CALL_OW 344
29711: END
// every 0 0$1 trigger StreamModeActive and sSun do
29712: LD_EXP 65
29716: PUSH
29717: LD_EXP 88
29721: AND
29722: IFFALSE 29750
29724: GO 29726
29726: DISABLE
// begin solar_recharge_percent := 0 ;
29727: LD_ADDR_OWVAR 79
29731: PUSH
29732: LD_INT 0
29734: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29735: LD_INT 10500
29737: PPUSH
29738: CALL_OW 67
// solar_recharge_percent := 100 ;
29742: LD_ADDR_OWVAR 79
29746: PUSH
29747: LD_INT 100
29749: ST_TO_ADDR
// end ;
29750: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29751: LD_EXP 65
29755: PUSH
29756: LD_EXP 89
29760: AND
29761: IFFALSE 30000
29763: GO 29765
29765: DISABLE
29766: LD_INT 0
29768: PPUSH
29769: PPUSH
29770: PPUSH
// begin tmp := [ ] ;
29771: LD_ADDR_VAR 0 3
29775: PUSH
29776: EMPTY
29777: ST_TO_ADDR
// for i := 1 to 6 do
29778: LD_ADDR_VAR 0 1
29782: PUSH
29783: DOUBLE
29784: LD_INT 1
29786: DEC
29787: ST_TO_ADDR
29788: LD_INT 6
29790: PUSH
29791: FOR_TO
29792: IFFALSE 29897
// begin uc_nation := nation_nature ;
29794: LD_ADDR_OWVAR 21
29798: PUSH
29799: LD_INT 0
29801: ST_TO_ADDR
// uc_side := 0 ;
29802: LD_ADDR_OWVAR 20
29806: PUSH
29807: LD_INT 0
29809: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29810: LD_ADDR_OWVAR 29
29814: PUSH
29815: LD_INT 12
29817: PUSH
29818: LD_INT 12
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: ST_TO_ADDR
// hc_agressivity := 20 ;
29825: LD_ADDR_OWVAR 35
29829: PUSH
29830: LD_INT 20
29832: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29833: LD_ADDR_OWVAR 28
29837: PUSH
29838: LD_INT 17
29840: ST_TO_ADDR
// hc_gallery :=  ;
29841: LD_ADDR_OWVAR 33
29845: PUSH
29846: LD_STRING 
29848: ST_TO_ADDR
// hc_name :=  ;
29849: LD_ADDR_OWVAR 26
29853: PUSH
29854: LD_STRING 
29856: ST_TO_ADDR
// un := CreateHuman ;
29857: LD_ADDR_VAR 0 2
29861: PUSH
29862: CALL_OW 44
29866: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29867: LD_VAR 0 2
29871: PPUSH
29872: LD_INT 1
29874: PPUSH
29875: CALL_OW 51
// tmp := tmp ^ un ;
29879: LD_ADDR_VAR 0 3
29883: PUSH
29884: LD_VAR 0 3
29888: PUSH
29889: LD_VAR 0 2
29893: ADD
29894: ST_TO_ADDR
// end ;
29895: GO 29791
29897: POP
29898: POP
// repeat wait ( 0 0$1 ) ;
29899: LD_INT 35
29901: PPUSH
29902: CALL_OW 67
// for un in tmp do
29906: LD_ADDR_VAR 0 2
29910: PUSH
29911: LD_VAR 0 3
29915: PUSH
29916: FOR_IN
29917: IFFALSE 29991
// begin if IsDead ( un ) then
29919: LD_VAR 0 2
29923: PPUSH
29924: CALL_OW 301
29928: IFFALSE 29948
// begin tmp := tmp diff un ;
29930: LD_ADDR_VAR 0 3
29934: PUSH
29935: LD_VAR 0 3
29939: PUSH
29940: LD_VAR 0 2
29944: DIFF
29945: ST_TO_ADDR
// continue ;
29946: GO 29916
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29948: LD_VAR 0 2
29952: PPUSH
29953: LD_INT 3
29955: PUSH
29956: LD_INT 22
29958: PUSH
29959: LD_INT 0
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PPUSH
29970: CALL_OW 69
29974: PPUSH
29975: LD_VAR 0 2
29979: PPUSH
29980: CALL_OW 74
29984: PPUSH
29985: CALL_OW 115
// end ;
29989: GO 29916
29991: POP
29992: POP
// until not tmp ;
29993: LD_VAR 0 3
29997: NOT
29998: IFFALSE 29899
// end ;
30000: PPOPN 3
30002: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30003: LD_EXP 65
30007: PUSH
30008: LD_EXP 90
30012: AND
30013: IFFALSE 30067
30015: GO 30017
30017: DISABLE
// begin ToLua ( displayTroll(); ) ;
30018: LD_STRING displayTroll();
30020: PPUSH
30021: CALL_OW 559
// wait ( 3 3$00 ) ;
30025: LD_INT 6300
30027: PPUSH
30028: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30032: LD_STRING hideTroll();
30034: PPUSH
30035: CALL_OW 559
// wait ( 1 1$00 ) ;
30039: LD_INT 2100
30041: PPUSH
30042: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30046: LD_STRING displayTroll();
30048: PPUSH
30049: CALL_OW 559
// wait ( 1 1$00 ) ;
30053: LD_INT 2100
30055: PPUSH
30056: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30060: LD_STRING hideTroll();
30062: PPUSH
30063: CALL_OW 559
// end ;
30067: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30068: LD_EXP 65
30072: PUSH
30073: LD_EXP 91
30077: AND
30078: IFFALSE 30141
30080: GO 30082
30082: DISABLE
30083: LD_INT 0
30085: PPUSH
// begin p := 0 ;
30086: LD_ADDR_VAR 0 1
30090: PUSH
30091: LD_INT 0
30093: ST_TO_ADDR
// repeat game_speed := 1 ;
30094: LD_ADDR_OWVAR 65
30098: PUSH
30099: LD_INT 1
30101: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30102: LD_INT 35
30104: PPUSH
30105: CALL_OW 67
// p := p + 1 ;
30109: LD_ADDR_VAR 0 1
30113: PUSH
30114: LD_VAR 0 1
30118: PUSH
30119: LD_INT 1
30121: PLUS
30122: ST_TO_ADDR
// until p >= 60 ;
30123: LD_VAR 0 1
30127: PUSH
30128: LD_INT 60
30130: GREATEREQUAL
30131: IFFALSE 30094
// game_speed := 4 ;
30133: LD_ADDR_OWVAR 65
30137: PUSH
30138: LD_INT 4
30140: ST_TO_ADDR
// end ;
30141: PPOPN 1
30143: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30144: LD_EXP 65
30148: PUSH
30149: LD_EXP 92
30153: AND
30154: IFFALSE 30300
30156: GO 30158
30158: DISABLE
30159: LD_INT 0
30161: PPUSH
30162: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30163: LD_ADDR_VAR 0 1
30167: PUSH
30168: LD_INT 22
30170: PUSH
30171: LD_OWVAR 2
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 2
30182: PUSH
30183: LD_INT 30
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 30
30195: PUSH
30196: LD_INT 1
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: LIST
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PPUSH
30212: CALL_OW 69
30216: ST_TO_ADDR
// if not depot then
30217: LD_VAR 0 1
30221: NOT
30222: IFFALSE 30226
// exit ;
30224: GO 30300
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30226: LD_ADDR_VAR 0 2
30230: PUSH
30231: LD_VAR 0 1
30235: PUSH
30236: LD_INT 1
30238: PPUSH
30239: LD_VAR 0 1
30243: PPUSH
30244: CALL_OW 12
30248: ARRAY
30249: PPUSH
30250: CALL_OW 274
30254: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30255: LD_VAR 0 2
30259: PPUSH
30260: LD_INT 1
30262: PPUSH
30263: LD_INT 0
30265: PPUSH
30266: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30270: LD_VAR 0 2
30274: PPUSH
30275: LD_INT 2
30277: PPUSH
30278: LD_INT 0
30280: PPUSH
30281: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30285: LD_VAR 0 2
30289: PPUSH
30290: LD_INT 3
30292: PPUSH
30293: LD_INT 0
30295: PPUSH
30296: CALL_OW 277
// end ;
30300: PPOPN 2
30302: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30303: LD_EXP 65
30307: PUSH
30308: LD_EXP 93
30312: AND
30313: IFFALSE 30410
30315: GO 30317
30317: DISABLE
30318: LD_INT 0
30320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30321: LD_ADDR_VAR 0 1
30325: PUSH
30326: LD_INT 22
30328: PUSH
30329: LD_OWVAR 2
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 21
30340: PUSH
30341: LD_INT 1
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 3
30350: PUSH
30351: LD_INT 23
30353: PUSH
30354: LD_INT 0
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: LIST
30369: PPUSH
30370: CALL_OW 69
30374: ST_TO_ADDR
// if not tmp then
30375: LD_VAR 0 1
30379: NOT
30380: IFFALSE 30384
// exit ;
30382: GO 30410
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30384: LD_VAR 0 1
30388: PUSH
30389: LD_INT 1
30391: PPUSH
30392: LD_VAR 0 1
30396: PPUSH
30397: CALL_OW 12
30401: ARRAY
30402: PPUSH
30403: LD_INT 200
30405: PPUSH
30406: CALL_OW 234
// end ;
30410: PPOPN 1
30412: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30413: LD_EXP 65
30417: PUSH
30418: LD_EXP 94
30422: AND
30423: IFFALSE 30502
30425: GO 30427
30427: DISABLE
30428: LD_INT 0
30430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30431: LD_ADDR_VAR 0 1
30435: PUSH
30436: LD_INT 22
30438: PUSH
30439: LD_OWVAR 2
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 21
30450: PUSH
30451: LD_INT 2
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PPUSH
30462: CALL_OW 69
30466: ST_TO_ADDR
// if not tmp then
30467: LD_VAR 0 1
30471: NOT
30472: IFFALSE 30476
// exit ;
30474: GO 30502
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30476: LD_VAR 0 1
30480: PUSH
30481: LD_INT 1
30483: PPUSH
30484: LD_VAR 0 1
30488: PPUSH
30489: CALL_OW 12
30493: ARRAY
30494: PPUSH
30495: LD_INT 60
30497: PPUSH
30498: CALL_OW 234
// end ;
30502: PPOPN 1
30504: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30505: LD_EXP 65
30509: PUSH
30510: LD_EXP 95
30514: AND
30515: IFFALSE 30614
30517: GO 30519
30519: DISABLE
30520: LD_INT 0
30522: PPUSH
30523: PPUSH
// begin enable ;
30524: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30525: LD_ADDR_VAR 0 1
30529: PUSH
30530: LD_INT 22
30532: PUSH
30533: LD_OWVAR 2
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 61
30544: PUSH
30545: EMPTY
30546: LIST
30547: PUSH
30548: LD_INT 33
30550: PUSH
30551: LD_INT 2
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: LIST
30562: PPUSH
30563: CALL_OW 69
30567: ST_TO_ADDR
// if not tmp then
30568: LD_VAR 0 1
30572: NOT
30573: IFFALSE 30577
// exit ;
30575: GO 30614
// for i in tmp do
30577: LD_ADDR_VAR 0 2
30581: PUSH
30582: LD_VAR 0 1
30586: PUSH
30587: FOR_IN
30588: IFFALSE 30612
// if IsControledBy ( i ) then
30590: LD_VAR 0 2
30594: PPUSH
30595: CALL_OW 312
30599: IFFALSE 30610
// ComUnlink ( i ) ;
30601: LD_VAR 0 2
30605: PPUSH
30606: CALL_OW 136
30610: GO 30587
30612: POP
30613: POP
// end ;
30614: PPOPN 2
30616: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30617: LD_EXP 65
30621: PUSH
30622: LD_EXP 96
30626: AND
30627: IFFALSE 30767
30629: GO 30631
30631: DISABLE
30632: LD_INT 0
30634: PPUSH
30635: PPUSH
// begin ToLua ( displayPowell(); ) ;
30636: LD_STRING displayPowell();
30638: PPUSH
30639: CALL_OW 559
// uc_side := 0 ;
30643: LD_ADDR_OWVAR 20
30647: PUSH
30648: LD_INT 0
30650: ST_TO_ADDR
// uc_nation := 2 ;
30651: LD_ADDR_OWVAR 21
30655: PUSH
30656: LD_INT 2
30658: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30659: LD_ADDR_OWVAR 37
30663: PUSH
30664: LD_INT 14
30666: ST_TO_ADDR
// vc_engine := engine_siberite ;
30667: LD_ADDR_OWVAR 39
30671: PUSH
30672: LD_INT 3
30674: ST_TO_ADDR
// vc_control := control_apeman ;
30675: LD_ADDR_OWVAR 38
30679: PUSH
30680: LD_INT 5
30682: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30683: LD_ADDR_OWVAR 40
30687: PUSH
30688: LD_INT 29
30690: ST_TO_ADDR
// un := CreateVehicle ;
30691: LD_ADDR_VAR 0 2
30695: PUSH
30696: CALL_OW 45
30700: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30701: LD_VAR 0 2
30705: PPUSH
30706: LD_INT 1
30708: PPUSH
30709: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30713: LD_INT 35
30715: PPUSH
30716: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30720: LD_VAR 0 2
30724: PPUSH
30725: LD_INT 22
30727: PUSH
30728: LD_OWVAR 2
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PPUSH
30737: CALL_OW 69
30741: PPUSH
30742: LD_VAR 0 2
30746: PPUSH
30747: CALL_OW 74
30751: PPUSH
30752: CALL_OW 115
// until IsDead ( un ) ;
30756: LD_VAR 0 2
30760: PPUSH
30761: CALL_OW 301
30765: IFFALSE 30713
// end ;
30767: PPOPN 2
30769: END
// every 0 0$1 trigger StreamModeActive and sStu do
30770: LD_EXP 65
30774: PUSH
30775: LD_EXP 104
30779: AND
30780: IFFALSE 30796
30782: GO 30784
30784: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30785: LD_STRING displayStucuk();
30787: PPUSH
30788: CALL_OW 559
// ResetFog ;
30792: CALL_OW 335
// end ;
30796: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30797: LD_EXP 65
30801: PUSH
30802: LD_EXP 97
30806: AND
30807: IFFALSE 30948
30809: GO 30811
30811: DISABLE
30812: LD_INT 0
30814: PPUSH
30815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30816: LD_ADDR_VAR 0 2
30820: PUSH
30821: LD_INT 22
30823: PUSH
30824: LD_OWVAR 2
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 21
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PPUSH
30847: CALL_OW 69
30851: ST_TO_ADDR
// if not tmp then
30852: LD_VAR 0 2
30856: NOT
30857: IFFALSE 30861
// exit ;
30859: GO 30948
// un := tmp [ rand ( 1 , tmp ) ] ;
30861: LD_ADDR_VAR 0 1
30865: PUSH
30866: LD_VAR 0 2
30870: PUSH
30871: LD_INT 1
30873: PPUSH
30874: LD_VAR 0 2
30878: PPUSH
30879: CALL_OW 12
30883: ARRAY
30884: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30885: LD_VAR 0 1
30889: PPUSH
30890: LD_INT 0
30892: PPUSH
30893: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30897: LD_VAR 0 1
30901: PPUSH
30902: LD_OWVAR 3
30906: PUSH
30907: LD_VAR 0 1
30911: DIFF
30912: PPUSH
30913: LD_VAR 0 1
30917: PPUSH
30918: CALL_OW 74
30922: PPUSH
30923: CALL_OW 115
// wait ( 0 0$20 ) ;
30927: LD_INT 700
30929: PPUSH
30930: CALL_OW 67
// SetSide ( un , your_side ) ;
30934: LD_VAR 0 1
30938: PPUSH
30939: LD_OWVAR 2
30943: PPUSH
30944: CALL_OW 235
// end ;
30948: PPOPN 2
30950: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30951: LD_EXP 65
30955: PUSH
30956: LD_EXP 98
30960: AND
30961: IFFALSE 31067
30963: GO 30965
30965: DISABLE
30966: LD_INT 0
30968: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30969: LD_ADDR_VAR 0 1
30973: PUSH
30974: LD_INT 22
30976: PUSH
30977: LD_OWVAR 2
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 2
30988: PUSH
30989: LD_INT 30
30991: PUSH
30992: LD_INT 0
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 30
31001: PUSH
31002: LD_INT 1
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: LIST
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PPUSH
31018: CALL_OW 69
31022: ST_TO_ADDR
// if not depot then
31023: LD_VAR 0 1
31027: NOT
31028: IFFALSE 31032
// exit ;
31030: GO 31067
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31032: LD_VAR 0 1
31036: PUSH
31037: LD_INT 1
31039: ARRAY
31040: PPUSH
31041: CALL_OW 250
31045: PPUSH
31046: LD_VAR 0 1
31050: PUSH
31051: LD_INT 1
31053: ARRAY
31054: PPUSH
31055: CALL_OW 251
31059: PPUSH
31060: LD_INT 70
31062: PPUSH
31063: CALL_OW 495
// end ;
31067: PPOPN 1
31069: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31070: LD_EXP 65
31074: PUSH
31075: LD_EXP 99
31079: AND
31080: IFFALSE 31291
31082: GO 31084
31084: DISABLE
31085: LD_INT 0
31087: PPUSH
31088: PPUSH
31089: PPUSH
31090: PPUSH
31091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31092: LD_ADDR_VAR 0 5
31096: PUSH
31097: LD_INT 22
31099: PUSH
31100: LD_OWVAR 2
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 21
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PPUSH
31123: CALL_OW 69
31127: ST_TO_ADDR
// if not tmp then
31128: LD_VAR 0 5
31132: NOT
31133: IFFALSE 31137
// exit ;
31135: GO 31291
// for i in tmp do
31137: LD_ADDR_VAR 0 1
31141: PUSH
31142: LD_VAR 0 5
31146: PUSH
31147: FOR_IN
31148: IFFALSE 31289
// begin d := rand ( 0 , 5 ) ;
31150: LD_ADDR_VAR 0 4
31154: PUSH
31155: LD_INT 0
31157: PPUSH
31158: LD_INT 5
31160: PPUSH
31161: CALL_OW 12
31165: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31166: LD_ADDR_VAR 0 2
31170: PUSH
31171: LD_VAR 0 1
31175: PPUSH
31176: CALL_OW 250
31180: PPUSH
31181: LD_VAR 0 4
31185: PPUSH
31186: LD_INT 3
31188: PPUSH
31189: LD_INT 12
31191: PPUSH
31192: CALL_OW 12
31196: PPUSH
31197: CALL_OW 272
31201: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31202: LD_ADDR_VAR 0 3
31206: PUSH
31207: LD_VAR 0 1
31211: PPUSH
31212: CALL_OW 251
31216: PPUSH
31217: LD_VAR 0 4
31221: PPUSH
31222: LD_INT 3
31224: PPUSH
31225: LD_INT 12
31227: PPUSH
31228: CALL_OW 12
31232: PPUSH
31233: CALL_OW 273
31237: ST_TO_ADDR
// if ValidHex ( x , y ) then
31238: LD_VAR 0 2
31242: PPUSH
31243: LD_VAR 0 3
31247: PPUSH
31248: CALL_OW 488
31252: IFFALSE 31287
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31254: LD_VAR 0 1
31258: PPUSH
31259: LD_VAR 0 2
31263: PPUSH
31264: LD_VAR 0 3
31268: PPUSH
31269: LD_INT 3
31271: PPUSH
31272: LD_INT 6
31274: PPUSH
31275: CALL_OW 12
31279: PPUSH
31280: LD_INT 1
31282: PPUSH
31283: CALL_OW 483
// end ;
31287: GO 31147
31289: POP
31290: POP
// end ;
31291: PPOPN 5
31293: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31294: LD_EXP 65
31298: PUSH
31299: LD_EXP 100
31303: AND
31304: IFFALSE 31398
31306: GO 31308
31308: DISABLE
31309: LD_INT 0
31311: PPUSH
31312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31313: LD_ADDR_VAR 0 2
31317: PUSH
31318: LD_INT 22
31320: PUSH
31321: LD_OWVAR 2
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 32
31332: PUSH
31333: LD_INT 1
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 21
31342: PUSH
31343: LD_INT 2
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: PPUSH
31355: CALL_OW 69
31359: ST_TO_ADDR
// if not tmp then
31360: LD_VAR 0 2
31364: NOT
31365: IFFALSE 31369
// exit ;
31367: GO 31398
// for i in tmp do
31369: LD_ADDR_VAR 0 1
31373: PUSH
31374: LD_VAR 0 2
31378: PUSH
31379: FOR_IN
31380: IFFALSE 31396
// SetFuel ( i , 0 ) ;
31382: LD_VAR 0 1
31386: PPUSH
31387: LD_INT 0
31389: PPUSH
31390: CALL_OW 240
31394: GO 31379
31396: POP
31397: POP
// end ;
31398: PPOPN 2
31400: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31401: LD_EXP 65
31405: PUSH
31406: LD_EXP 101
31410: AND
31411: IFFALSE 31477
31413: GO 31415
31415: DISABLE
31416: LD_INT 0
31418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31419: LD_ADDR_VAR 0 1
31423: PUSH
31424: LD_INT 22
31426: PUSH
31427: LD_OWVAR 2
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 30
31438: PUSH
31439: LD_INT 29
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PPUSH
31450: CALL_OW 69
31454: ST_TO_ADDR
// if not tmp then
31455: LD_VAR 0 1
31459: NOT
31460: IFFALSE 31464
// exit ;
31462: GO 31477
// DestroyUnit ( tmp [ 1 ] ) ;
31464: LD_VAR 0 1
31468: PUSH
31469: LD_INT 1
31471: ARRAY
31472: PPUSH
31473: CALL_OW 65
// end ;
31477: PPOPN 1
31479: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31480: LD_EXP 65
31484: PUSH
31485: LD_EXP 103
31489: AND
31490: IFFALSE 31619
31492: GO 31494
31494: DISABLE
31495: LD_INT 0
31497: PPUSH
// begin uc_side := 0 ;
31498: LD_ADDR_OWVAR 20
31502: PUSH
31503: LD_INT 0
31505: ST_TO_ADDR
// uc_nation := nation_arabian ;
31506: LD_ADDR_OWVAR 21
31510: PUSH
31511: LD_INT 2
31513: ST_TO_ADDR
// hc_gallery :=  ;
31514: LD_ADDR_OWVAR 33
31518: PUSH
31519: LD_STRING 
31521: ST_TO_ADDR
// hc_name :=  ;
31522: LD_ADDR_OWVAR 26
31526: PUSH
31527: LD_STRING 
31529: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31530: LD_INT 1
31532: PPUSH
31533: LD_INT 11
31535: PPUSH
31536: LD_INT 10
31538: PPUSH
31539: CALL_OW 380
// un := CreateHuman ;
31543: LD_ADDR_VAR 0 1
31547: PUSH
31548: CALL_OW 44
31552: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31553: LD_VAR 0 1
31557: PPUSH
31558: LD_INT 1
31560: PPUSH
31561: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31565: LD_INT 35
31567: PPUSH
31568: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31572: LD_VAR 0 1
31576: PPUSH
31577: LD_INT 22
31579: PUSH
31580: LD_OWVAR 2
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PPUSH
31589: CALL_OW 69
31593: PPUSH
31594: LD_VAR 0 1
31598: PPUSH
31599: CALL_OW 74
31603: PPUSH
31604: CALL_OW 115
// until IsDead ( un ) ;
31608: LD_VAR 0 1
31612: PPUSH
31613: CALL_OW 301
31617: IFFALSE 31565
// end ;
31619: PPOPN 1
31621: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31622: LD_EXP 65
31626: PUSH
31627: LD_EXP 105
31631: AND
31632: IFFALSE 31644
31634: GO 31636
31636: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31637: LD_STRING earthquake(getX(game), 0, 32)
31639: PPUSH
31640: CALL_OW 559
31644: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31645: LD_EXP 65
31649: PUSH
31650: LD_EXP 106
31654: AND
31655: IFFALSE 31746
31657: GO 31659
31659: DISABLE
31660: LD_INT 0
31662: PPUSH
// begin enable ;
31663: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31664: LD_ADDR_VAR 0 1
31668: PUSH
31669: LD_INT 22
31671: PUSH
31672: LD_OWVAR 2
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 21
31683: PUSH
31684: LD_INT 2
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 33
31693: PUSH
31694: LD_INT 3
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: LIST
31705: PPUSH
31706: CALL_OW 69
31710: ST_TO_ADDR
// if not tmp then
31711: LD_VAR 0 1
31715: NOT
31716: IFFALSE 31720
// exit ;
31718: GO 31746
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31720: LD_VAR 0 1
31724: PUSH
31725: LD_INT 1
31727: PPUSH
31728: LD_VAR 0 1
31732: PPUSH
31733: CALL_OW 12
31737: ARRAY
31738: PPUSH
31739: LD_INT 1
31741: PPUSH
31742: CALL_OW 234
// end ;
31746: PPOPN 1
31748: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31749: LD_EXP 65
31753: PUSH
31754: LD_EXP 107
31758: AND
31759: IFFALSE 31900
31761: GO 31763
31763: DISABLE
31764: LD_INT 0
31766: PPUSH
31767: PPUSH
31768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31769: LD_ADDR_VAR 0 3
31773: PUSH
31774: LD_INT 22
31776: PUSH
31777: LD_OWVAR 2
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 25
31788: PUSH
31789: LD_INT 1
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PPUSH
31800: CALL_OW 69
31804: ST_TO_ADDR
// if not tmp then
31805: LD_VAR 0 3
31809: NOT
31810: IFFALSE 31814
// exit ;
31812: GO 31900
// un := tmp [ rand ( 1 , tmp ) ] ;
31814: LD_ADDR_VAR 0 2
31818: PUSH
31819: LD_VAR 0 3
31823: PUSH
31824: LD_INT 1
31826: PPUSH
31827: LD_VAR 0 3
31831: PPUSH
31832: CALL_OW 12
31836: ARRAY
31837: ST_TO_ADDR
// if Crawls ( un ) then
31838: LD_VAR 0 2
31842: PPUSH
31843: CALL_OW 318
31847: IFFALSE 31858
// ComWalk ( un ) ;
31849: LD_VAR 0 2
31853: PPUSH
31854: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31858: LD_VAR 0 2
31862: PPUSH
31863: LD_INT 9
31865: PPUSH
31866: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31870: LD_INT 28
31872: PPUSH
31873: LD_OWVAR 2
31877: PPUSH
31878: LD_INT 2
31880: PPUSH
31881: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31885: LD_INT 29
31887: PPUSH
31888: LD_OWVAR 2
31892: PPUSH
31893: LD_INT 2
31895: PPUSH
31896: CALL_OW 322
// end ;
31900: PPOPN 3
31902: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31903: LD_EXP 65
31907: PUSH
31908: LD_EXP 108
31912: AND
31913: IFFALSE 32024
31915: GO 31917
31917: DISABLE
31918: LD_INT 0
31920: PPUSH
31921: PPUSH
31922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31923: LD_ADDR_VAR 0 3
31927: PUSH
31928: LD_INT 22
31930: PUSH
31931: LD_OWVAR 2
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 25
31942: PUSH
31943: LD_INT 1
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PPUSH
31954: CALL_OW 69
31958: ST_TO_ADDR
// if not tmp then
31959: LD_VAR 0 3
31963: NOT
31964: IFFALSE 31968
// exit ;
31966: GO 32024
// un := tmp [ rand ( 1 , tmp ) ] ;
31968: LD_ADDR_VAR 0 2
31972: PUSH
31973: LD_VAR 0 3
31977: PUSH
31978: LD_INT 1
31980: PPUSH
31981: LD_VAR 0 3
31985: PPUSH
31986: CALL_OW 12
31990: ARRAY
31991: ST_TO_ADDR
// if Crawls ( un ) then
31992: LD_VAR 0 2
31996: PPUSH
31997: CALL_OW 318
32001: IFFALSE 32012
// ComWalk ( un ) ;
32003: LD_VAR 0 2
32007: PPUSH
32008: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32012: LD_VAR 0 2
32016: PPUSH
32017: LD_INT 8
32019: PPUSH
32020: CALL_OW 336
// end ;
32024: PPOPN 3
32026: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32027: LD_EXP 65
32031: PUSH
32032: LD_EXP 109
32036: AND
32037: IFFALSE 32181
32039: GO 32041
32041: DISABLE
32042: LD_INT 0
32044: PPUSH
32045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32046: LD_ADDR_VAR 0 2
32050: PUSH
32051: LD_INT 22
32053: PUSH
32054: LD_OWVAR 2
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 21
32065: PUSH
32066: LD_INT 2
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: LD_INT 34
32078: PUSH
32079: LD_INT 12
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 34
32088: PUSH
32089: LD_INT 51
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 34
32098: PUSH
32099: LD_INT 32
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: LIST
32116: PPUSH
32117: CALL_OW 69
32121: ST_TO_ADDR
// if not tmp then
32122: LD_VAR 0 2
32126: NOT
32127: IFFALSE 32131
// exit ;
32129: GO 32181
// for i in tmp do
32131: LD_ADDR_VAR 0 1
32135: PUSH
32136: LD_VAR 0 2
32140: PUSH
32141: FOR_IN
32142: IFFALSE 32179
// if GetCargo ( i , mat_artifact ) = 0 then
32144: LD_VAR 0 1
32148: PPUSH
32149: LD_INT 4
32151: PPUSH
32152: CALL_OW 289
32156: PUSH
32157: LD_INT 0
32159: EQUAL
32160: IFFALSE 32177
// SetCargo ( i , mat_siberit , 100 ) ;
32162: LD_VAR 0 1
32166: PPUSH
32167: LD_INT 3
32169: PPUSH
32170: LD_INT 100
32172: PPUSH
32173: CALL_OW 290
32177: GO 32141
32179: POP
32180: POP
// end ;
32181: PPOPN 2
32183: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32184: LD_EXP 65
32188: PUSH
32189: LD_EXP 110
32193: AND
32194: IFFALSE 32347
32196: GO 32198
32198: DISABLE
32199: LD_INT 0
32201: PPUSH
32202: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32203: LD_ADDR_VAR 0 2
32207: PUSH
32208: LD_INT 22
32210: PUSH
32211: LD_OWVAR 2
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PPUSH
32220: CALL_OW 69
32224: ST_TO_ADDR
// if not tmp then
32225: LD_VAR 0 2
32229: NOT
32230: IFFALSE 32234
// exit ;
32232: GO 32347
// for i := 1 to 2 do
32234: LD_ADDR_VAR 0 1
32238: PUSH
32239: DOUBLE
32240: LD_INT 1
32242: DEC
32243: ST_TO_ADDR
32244: LD_INT 2
32246: PUSH
32247: FOR_TO
32248: IFFALSE 32345
// begin uc_side := your_side ;
32250: LD_ADDR_OWVAR 20
32254: PUSH
32255: LD_OWVAR 2
32259: ST_TO_ADDR
// uc_nation := nation_american ;
32260: LD_ADDR_OWVAR 21
32264: PUSH
32265: LD_INT 1
32267: ST_TO_ADDR
// vc_chassis := us_morphling ;
32268: LD_ADDR_OWVAR 37
32272: PUSH
32273: LD_INT 5
32275: ST_TO_ADDR
// vc_engine := engine_siberite ;
32276: LD_ADDR_OWVAR 39
32280: PUSH
32281: LD_INT 3
32283: ST_TO_ADDR
// vc_control := control_computer ;
32284: LD_ADDR_OWVAR 38
32288: PUSH
32289: LD_INT 3
32291: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32292: LD_ADDR_OWVAR 40
32296: PUSH
32297: LD_INT 10
32299: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
32300: CALL_OW 45
32304: PPUSH
32305: LD_VAR 0 2
32309: PUSH
32310: LD_INT 1
32312: ARRAY
32313: PPUSH
32314: CALL_OW 250
32318: PPUSH
32319: LD_VAR 0 2
32323: PUSH
32324: LD_INT 1
32326: ARRAY
32327: PPUSH
32328: CALL_OW 251
32332: PPUSH
32333: LD_INT 12
32335: PPUSH
32336: LD_INT 1
32338: PPUSH
32339: CALL_OW 50
// end ;
32343: GO 32247
32345: POP
32346: POP
// end ;
32347: PPOPN 2
32349: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32350: LD_EXP 65
32354: PUSH
32355: LD_EXP 111
32359: AND
32360: IFFALSE 32582
32362: GO 32364
32364: DISABLE
32365: LD_INT 0
32367: PPUSH
32368: PPUSH
32369: PPUSH
32370: PPUSH
32371: PPUSH
32372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32373: LD_ADDR_VAR 0 6
32377: PUSH
32378: LD_INT 22
32380: PUSH
32381: LD_OWVAR 2
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 21
32392: PUSH
32393: LD_INT 1
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 3
32402: PUSH
32403: LD_INT 23
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: LIST
32421: PPUSH
32422: CALL_OW 69
32426: ST_TO_ADDR
// if not tmp then
32427: LD_VAR 0 6
32431: NOT
32432: IFFALSE 32436
// exit ;
32434: GO 32582
// s1 := rand ( 1 , 4 ) ;
32436: LD_ADDR_VAR 0 2
32440: PUSH
32441: LD_INT 1
32443: PPUSH
32444: LD_INT 4
32446: PPUSH
32447: CALL_OW 12
32451: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32452: LD_ADDR_VAR 0 4
32456: PUSH
32457: LD_VAR 0 6
32461: PUSH
32462: LD_INT 1
32464: ARRAY
32465: PPUSH
32466: LD_VAR 0 2
32470: PPUSH
32471: CALL_OW 259
32475: ST_TO_ADDR
// if s1 = 1 then
32476: LD_VAR 0 2
32480: PUSH
32481: LD_INT 1
32483: EQUAL
32484: IFFALSE 32504
// s2 := rand ( 2 , 4 ) else
32486: LD_ADDR_VAR 0 3
32490: PUSH
32491: LD_INT 2
32493: PPUSH
32494: LD_INT 4
32496: PPUSH
32497: CALL_OW 12
32501: ST_TO_ADDR
32502: GO 32512
// s2 := 1 ;
32504: LD_ADDR_VAR 0 3
32508: PUSH
32509: LD_INT 1
32511: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32512: LD_ADDR_VAR 0 5
32516: PUSH
32517: LD_VAR 0 6
32521: PUSH
32522: LD_INT 1
32524: ARRAY
32525: PPUSH
32526: LD_VAR 0 3
32530: PPUSH
32531: CALL_OW 259
32535: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32536: LD_VAR 0 6
32540: PUSH
32541: LD_INT 1
32543: ARRAY
32544: PPUSH
32545: LD_VAR 0 2
32549: PPUSH
32550: LD_VAR 0 5
32554: PPUSH
32555: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32559: LD_VAR 0 6
32563: PUSH
32564: LD_INT 1
32566: ARRAY
32567: PPUSH
32568: LD_VAR 0 3
32572: PPUSH
32573: LD_VAR 0 4
32577: PPUSH
32578: CALL_OW 237
// end ;
32582: PPOPN 6
32584: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32585: LD_EXP 65
32589: PUSH
32590: LD_EXP 112
32594: AND
32595: IFFALSE 32674
32597: GO 32599
32599: DISABLE
32600: LD_INT 0
32602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32603: LD_ADDR_VAR 0 1
32607: PUSH
32608: LD_INT 22
32610: PUSH
32611: LD_OWVAR 2
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 30
32622: PUSH
32623: LD_INT 3
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PPUSH
32634: CALL_OW 69
32638: ST_TO_ADDR
// if not tmp then
32639: LD_VAR 0 1
32643: NOT
32644: IFFALSE 32648
// exit ;
32646: GO 32674
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32648: LD_VAR 0 1
32652: PUSH
32653: LD_INT 1
32655: PPUSH
32656: LD_VAR 0 1
32660: PPUSH
32661: CALL_OW 12
32665: ARRAY
32666: PPUSH
32667: LD_INT 1
32669: PPUSH
32670: CALL_OW 234
// end ;
32674: PPOPN 1
32676: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32677: LD_EXP 65
32681: PUSH
32682: LD_EXP 113
32686: AND
32687: IFFALSE 32799
32689: GO 32691
32691: DISABLE
32692: LD_INT 0
32694: PPUSH
32695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32696: LD_ADDR_VAR 0 2
32700: PUSH
32701: LD_INT 22
32703: PUSH
32704: LD_OWVAR 2
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: PUSH
32716: LD_INT 30
32718: PUSH
32719: LD_INT 27
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 30
32728: PUSH
32729: LD_INT 26
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 30
32738: PUSH
32739: LD_INT 28
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PPUSH
32756: CALL_OW 69
32760: ST_TO_ADDR
// if not tmp then
32761: LD_VAR 0 2
32765: NOT
32766: IFFALSE 32770
// exit ;
32768: GO 32799
// for i in tmp do
32770: LD_ADDR_VAR 0 1
32774: PUSH
32775: LD_VAR 0 2
32779: PUSH
32780: FOR_IN
32781: IFFALSE 32797
// SetLives ( i , 1 ) ;
32783: LD_VAR 0 1
32787: PPUSH
32788: LD_INT 1
32790: PPUSH
32791: CALL_OW 234
32795: GO 32780
32797: POP
32798: POP
// end ;
32799: PPOPN 2
32801: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32802: LD_EXP 65
32806: PUSH
32807: LD_EXP 114
32811: AND
32812: IFFALSE 33086
32814: GO 32816
32816: DISABLE
32817: LD_INT 0
32819: PPUSH
32820: PPUSH
32821: PPUSH
// begin i := rand ( 1 , 7 ) ;
32822: LD_ADDR_VAR 0 1
32826: PUSH
32827: LD_INT 1
32829: PPUSH
32830: LD_INT 7
32832: PPUSH
32833: CALL_OW 12
32837: ST_TO_ADDR
// case i of 1 :
32838: LD_VAR 0 1
32842: PUSH
32843: LD_INT 1
32845: DOUBLE
32846: EQUAL
32847: IFTRUE 32851
32849: GO 32861
32851: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32852: LD_STRING earthquake(getX(game), 0, 32)
32854: PPUSH
32855: CALL_OW 559
32859: GO 33086
32861: LD_INT 2
32863: DOUBLE
32864: EQUAL
32865: IFTRUE 32869
32867: GO 32883
32869: POP
// begin ToLua ( displayStucuk(); ) ;
32870: LD_STRING displayStucuk();
32872: PPUSH
32873: CALL_OW 559
// ResetFog ;
32877: CALL_OW 335
// end ; 3 :
32881: GO 33086
32883: LD_INT 3
32885: DOUBLE
32886: EQUAL
32887: IFTRUE 32891
32889: GO 32995
32891: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32892: LD_ADDR_VAR 0 2
32896: PUSH
32897: LD_INT 22
32899: PUSH
32900: LD_OWVAR 2
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 25
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PPUSH
32923: CALL_OW 69
32927: ST_TO_ADDR
// if not tmp then
32928: LD_VAR 0 2
32932: NOT
32933: IFFALSE 32937
// exit ;
32935: GO 33086
// un := tmp [ rand ( 1 , tmp ) ] ;
32937: LD_ADDR_VAR 0 3
32941: PUSH
32942: LD_VAR 0 2
32946: PUSH
32947: LD_INT 1
32949: PPUSH
32950: LD_VAR 0 2
32954: PPUSH
32955: CALL_OW 12
32959: ARRAY
32960: ST_TO_ADDR
// if Crawls ( un ) then
32961: LD_VAR 0 3
32965: PPUSH
32966: CALL_OW 318
32970: IFFALSE 32981
// ComWalk ( un ) ;
32972: LD_VAR 0 3
32976: PPUSH
32977: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32981: LD_VAR 0 3
32985: PPUSH
32986: LD_INT 8
32988: PPUSH
32989: CALL_OW 336
// end ; 4 :
32993: GO 33086
32995: LD_INT 4
32997: DOUBLE
32998: EQUAL
32999: IFTRUE 33003
33001: GO 33064
33003: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33004: LD_ADDR_VAR 0 2
33008: PUSH
33009: LD_INT 22
33011: PUSH
33012: LD_OWVAR 2
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 30
33023: PUSH
33024: LD_INT 29
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PPUSH
33035: CALL_OW 69
33039: ST_TO_ADDR
// if not tmp then
33040: LD_VAR 0 2
33044: NOT
33045: IFFALSE 33049
// exit ;
33047: GO 33086
// DestroyUnit ( tmp [ 1 ] ) ;
33049: LD_VAR 0 2
33053: PUSH
33054: LD_INT 1
33056: ARRAY
33057: PPUSH
33058: CALL_OW 65
// end ; 5 .. 7 :
33062: GO 33086
33064: LD_INT 5
33066: DOUBLE
33067: GREATEREQUAL
33068: IFFALSE 33076
33070: LD_INT 7
33072: DOUBLE
33073: LESSEQUAL
33074: IFTRUE 33078
33076: GO 33085
33078: POP
// StreamSibBomb ; end ;
33079: CALL 29366 0 0
33083: GO 33086
33085: POP
// end ;
33086: PPOPN 3
33088: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33089: LD_EXP 65
33093: PUSH
33094: LD_EXP 115
33098: AND
33099: IFFALSE 33255
33101: GO 33103
33103: DISABLE
33104: LD_INT 0
33106: PPUSH
33107: PPUSH
33108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33109: LD_ADDR_VAR 0 2
33113: PUSH
33114: LD_INT 81
33116: PUSH
33117: LD_OWVAR 2
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 2
33128: PUSH
33129: LD_INT 21
33131: PUSH
33132: LD_INT 1
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 21
33141: PUSH
33142: LD_INT 2
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: LIST
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PPUSH
33158: CALL_OW 69
33162: ST_TO_ADDR
// if not tmp then
33163: LD_VAR 0 2
33167: NOT
33168: IFFALSE 33172
// exit ;
33170: GO 33255
// p := 0 ;
33172: LD_ADDR_VAR 0 3
33176: PUSH
33177: LD_INT 0
33179: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33180: LD_INT 35
33182: PPUSH
33183: CALL_OW 67
// p := p + 1 ;
33187: LD_ADDR_VAR 0 3
33191: PUSH
33192: LD_VAR 0 3
33196: PUSH
33197: LD_INT 1
33199: PLUS
33200: ST_TO_ADDR
// for i in tmp do
33201: LD_ADDR_VAR 0 1
33205: PUSH
33206: LD_VAR 0 2
33210: PUSH
33211: FOR_IN
33212: IFFALSE 33243
// if GetLives ( i ) < 1000 then
33214: LD_VAR 0 1
33218: PPUSH
33219: CALL_OW 256
33223: PUSH
33224: LD_INT 1000
33226: LESS
33227: IFFALSE 33241
// SetLives ( i , 1000 ) ;
33229: LD_VAR 0 1
33233: PPUSH
33234: LD_INT 1000
33236: PPUSH
33237: CALL_OW 234
33241: GO 33211
33243: POP
33244: POP
// until p > 20 ;
33245: LD_VAR 0 3
33249: PUSH
33250: LD_INT 20
33252: GREATER
33253: IFFALSE 33180
// end ;
33255: PPOPN 3
33257: END
// every 0 0$1 trigger StreamModeActive and sTime do
33258: LD_EXP 65
33262: PUSH
33263: LD_EXP 116
33267: AND
33268: IFFALSE 33303
33270: GO 33272
33272: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33273: LD_INT 28
33275: PPUSH
33276: LD_OWVAR 2
33280: PPUSH
33281: LD_INT 2
33283: PPUSH
33284: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33288: LD_INT 30
33290: PPUSH
33291: LD_OWVAR 2
33295: PPUSH
33296: LD_INT 2
33298: PPUSH
33299: CALL_OW 322
// end ;
33303: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33304: LD_EXP 65
33308: PUSH
33309: LD_EXP 117
33313: AND
33314: IFFALSE 33435
33316: GO 33318
33318: DISABLE
33319: LD_INT 0
33321: PPUSH
33322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33323: LD_ADDR_VAR 0 2
33327: PUSH
33328: LD_INT 22
33330: PUSH
33331: LD_OWVAR 2
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 21
33342: PUSH
33343: LD_INT 1
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 3
33352: PUSH
33353: LD_INT 23
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: LIST
33371: PPUSH
33372: CALL_OW 69
33376: ST_TO_ADDR
// if not tmp then
33377: LD_VAR 0 2
33381: NOT
33382: IFFALSE 33386
// exit ;
33384: GO 33435
// for i in tmp do
33386: LD_ADDR_VAR 0 1
33390: PUSH
33391: LD_VAR 0 2
33395: PUSH
33396: FOR_IN
33397: IFFALSE 33433
// begin if Crawls ( i ) then
33399: LD_VAR 0 1
33403: PPUSH
33404: CALL_OW 318
33408: IFFALSE 33419
// ComWalk ( i ) ;
33410: LD_VAR 0 1
33414: PPUSH
33415: CALL_OW 138
// SetClass ( i , 2 ) ;
33419: LD_VAR 0 1
33423: PPUSH
33424: LD_INT 2
33426: PPUSH
33427: CALL_OW 336
// end ;
33431: GO 33396
33433: POP
33434: POP
// end ;
33435: PPOPN 2
33437: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33438: LD_EXP 65
33442: PUSH
33443: LD_EXP 118
33447: AND
33448: IFFALSE 33729
33450: GO 33452
33452: DISABLE
33453: LD_INT 0
33455: PPUSH
33456: PPUSH
33457: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33458: LD_OWVAR 2
33462: PPUSH
33463: LD_INT 9
33465: PPUSH
33466: LD_INT 1
33468: PPUSH
33469: LD_INT 1
33471: PPUSH
33472: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33476: LD_INT 9
33478: PPUSH
33479: LD_OWVAR 2
33483: PPUSH
33484: CALL_OW 343
// uc_side := 9 ;
33488: LD_ADDR_OWVAR 20
33492: PUSH
33493: LD_INT 9
33495: ST_TO_ADDR
// uc_nation := 2 ;
33496: LD_ADDR_OWVAR 21
33500: PUSH
33501: LD_INT 2
33503: ST_TO_ADDR
// hc_name := Dark Warrior ;
33504: LD_ADDR_OWVAR 26
33508: PUSH
33509: LD_STRING Dark Warrior
33511: ST_TO_ADDR
// hc_gallery :=  ;
33512: LD_ADDR_OWVAR 33
33516: PUSH
33517: LD_STRING 
33519: ST_TO_ADDR
// hc_noskilllimit := true ;
33520: LD_ADDR_OWVAR 76
33524: PUSH
33525: LD_INT 1
33527: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33528: LD_ADDR_OWVAR 31
33532: PUSH
33533: LD_INT 30
33535: PUSH
33536: LD_INT 30
33538: PUSH
33539: LD_INT 30
33541: PUSH
33542: LD_INT 30
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: ST_TO_ADDR
// un := CreateHuman ;
33551: LD_ADDR_VAR 0 3
33555: PUSH
33556: CALL_OW 44
33560: ST_TO_ADDR
// hc_noskilllimit := false ;
33561: LD_ADDR_OWVAR 76
33565: PUSH
33566: LD_INT 0
33568: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33569: LD_VAR 0 3
33573: PPUSH
33574: LD_INT 1
33576: PPUSH
33577: CALL_OW 51
// p := 0 ;
33581: LD_ADDR_VAR 0 2
33585: PUSH
33586: LD_INT 0
33588: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33589: LD_INT 35
33591: PPUSH
33592: CALL_OW 67
// p := p + 1 ;
33596: LD_ADDR_VAR 0 2
33600: PUSH
33601: LD_VAR 0 2
33605: PUSH
33606: LD_INT 1
33608: PLUS
33609: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33610: LD_VAR 0 3
33614: PPUSH
33615: CALL_OW 256
33619: PUSH
33620: LD_INT 1000
33622: LESS
33623: IFFALSE 33637
// SetLives ( un , 1000 ) ;
33625: LD_VAR 0 3
33629: PPUSH
33630: LD_INT 1000
33632: PPUSH
33633: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33637: LD_VAR 0 3
33641: PPUSH
33642: LD_INT 81
33644: PUSH
33645: LD_OWVAR 2
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 91
33656: PUSH
33657: LD_VAR 0 3
33661: PUSH
33662: LD_INT 30
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: LIST
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PPUSH
33674: CALL_OW 69
33678: PPUSH
33679: LD_VAR 0 3
33683: PPUSH
33684: CALL_OW 74
33688: PPUSH
33689: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
33693: LD_VAR 0 2
33697: PUSH
33698: LD_INT 60
33700: GREATER
33701: PUSH
33702: LD_VAR 0 3
33706: PPUSH
33707: CALL_OW 301
33711: OR
33712: IFFALSE 33589
// if un then
33714: LD_VAR 0 3
33718: IFFALSE 33729
// RemoveUnit ( un ) ;
33720: LD_VAR 0 3
33724: PPUSH
33725: CALL_OW 64
// end ; end_of_file
33729: PPOPN 3
33731: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33732: LD_INT 0
33734: PPUSH
33735: PPUSH
33736: PPUSH
33737: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33738: LD_VAR 0 1
33742: PPUSH
33743: CALL_OW 264
33747: PUSH
33748: LD_EXP 56
33752: EQUAL
33753: IFFALSE 33825
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33755: LD_INT 68
33757: PPUSH
33758: LD_VAR 0 1
33762: PPUSH
33763: CALL_OW 255
33767: PPUSH
33768: CALL_OW 321
33772: PUSH
33773: LD_INT 2
33775: EQUAL
33776: IFFALSE 33788
// eff := 70 else
33778: LD_ADDR_VAR 0 4
33782: PUSH
33783: LD_INT 70
33785: ST_TO_ADDR
33786: GO 33796
// eff := 30 ;
33788: LD_ADDR_VAR 0 4
33792: PUSH
33793: LD_INT 30
33795: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33796: LD_VAR 0 1
33800: PPUSH
33801: CALL_OW 250
33805: PPUSH
33806: LD_VAR 0 1
33810: PPUSH
33811: CALL_OW 251
33815: PPUSH
33816: LD_VAR 0 4
33820: PPUSH
33821: CALL_OW 495
// end ; end ;
33825: LD_VAR 0 2
33829: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33830: LD_INT 0
33832: PPUSH
// end ;
33833: LD_VAR 0 4
33837: RET
// export function SOS_Command ( cmd ) ; begin
33838: LD_INT 0
33840: PPUSH
// end ;
33841: LD_VAR 0 2
33845: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33846: LD_VAR 0 1
33850: PUSH
33851: LD_INT 255
33853: EQUAL
33854: PUSH
33855: LD_VAR 0 2
33859: PPUSH
33860: CALL_OW 264
33864: PUSH
33865: LD_INT 14
33867: PUSH
33868: LD_INT 53
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: IN
33875: AND
33876: PUSH
33877: LD_VAR 0 4
33881: PPUSH
33882: LD_VAR 0 5
33886: PPUSH
33887: CALL_OW 488
33891: AND
33892: IFFALSE 33916
// CutTreeXYR ( unit , x , y , 12 ) ;
33894: LD_VAR 0 2
33898: PPUSH
33899: LD_VAR 0 4
33903: PPUSH
33904: LD_VAR 0 5
33908: PPUSH
33909: LD_INT 12
33911: PPUSH
33912: CALL 33919 0 4
// end ;
33916: PPOPN 5
33918: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33919: LD_INT 0
33921: PPUSH
33922: PPUSH
33923: PPUSH
33924: PPUSH
33925: PPUSH
33926: PPUSH
33927: PPUSH
33928: PPUSH
33929: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33930: LD_VAR 0 1
33934: NOT
33935: PUSH
33936: LD_VAR 0 2
33940: PPUSH
33941: LD_VAR 0 3
33945: PPUSH
33946: CALL_OW 488
33950: NOT
33951: OR
33952: PUSH
33953: LD_VAR 0 4
33957: NOT
33958: OR
33959: IFFALSE 33963
// exit ;
33961: GO 34303
// list := [ ] ;
33963: LD_ADDR_VAR 0 13
33967: PUSH
33968: EMPTY
33969: ST_TO_ADDR
// if x - r < 0 then
33970: LD_VAR 0 2
33974: PUSH
33975: LD_VAR 0 4
33979: MINUS
33980: PUSH
33981: LD_INT 0
33983: LESS
33984: IFFALSE 33996
// min_x := 0 else
33986: LD_ADDR_VAR 0 7
33990: PUSH
33991: LD_INT 0
33993: ST_TO_ADDR
33994: GO 34012
// min_x := x - r ;
33996: LD_ADDR_VAR 0 7
34000: PUSH
34001: LD_VAR 0 2
34005: PUSH
34006: LD_VAR 0 4
34010: MINUS
34011: ST_TO_ADDR
// if y - r < 0 then
34012: LD_VAR 0 3
34016: PUSH
34017: LD_VAR 0 4
34021: MINUS
34022: PUSH
34023: LD_INT 0
34025: LESS
34026: IFFALSE 34038
// min_y := 0 else
34028: LD_ADDR_VAR 0 8
34032: PUSH
34033: LD_INT 0
34035: ST_TO_ADDR
34036: GO 34054
// min_y := y - r ;
34038: LD_ADDR_VAR 0 8
34042: PUSH
34043: LD_VAR 0 3
34047: PUSH
34048: LD_VAR 0 4
34052: MINUS
34053: ST_TO_ADDR
// max_x := x + r ;
34054: LD_ADDR_VAR 0 9
34058: PUSH
34059: LD_VAR 0 2
34063: PUSH
34064: LD_VAR 0 4
34068: PLUS
34069: ST_TO_ADDR
// max_y := y + r ;
34070: LD_ADDR_VAR 0 10
34074: PUSH
34075: LD_VAR 0 3
34079: PUSH
34080: LD_VAR 0 4
34084: PLUS
34085: ST_TO_ADDR
// for _x = min_x to max_x do
34086: LD_ADDR_VAR 0 11
34090: PUSH
34091: DOUBLE
34092: LD_VAR 0 7
34096: DEC
34097: ST_TO_ADDR
34098: LD_VAR 0 9
34102: PUSH
34103: FOR_TO
34104: IFFALSE 34221
// for _y = min_y to max_y do
34106: LD_ADDR_VAR 0 12
34110: PUSH
34111: DOUBLE
34112: LD_VAR 0 8
34116: DEC
34117: ST_TO_ADDR
34118: LD_VAR 0 10
34122: PUSH
34123: FOR_TO
34124: IFFALSE 34217
// begin if not ValidHex ( _x , _y ) then
34126: LD_VAR 0 11
34130: PPUSH
34131: LD_VAR 0 12
34135: PPUSH
34136: CALL_OW 488
34140: NOT
34141: IFFALSE 34145
// continue ;
34143: GO 34123
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34145: LD_VAR 0 11
34149: PPUSH
34150: LD_VAR 0 12
34154: PPUSH
34155: CALL_OW 351
34159: PUSH
34160: LD_VAR 0 11
34164: PPUSH
34165: LD_VAR 0 12
34169: PPUSH
34170: CALL_OW 554
34174: AND
34175: IFFALSE 34215
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34177: LD_ADDR_VAR 0 13
34181: PUSH
34182: LD_VAR 0 13
34186: PPUSH
34187: LD_VAR 0 13
34191: PUSH
34192: LD_INT 1
34194: PLUS
34195: PPUSH
34196: LD_VAR 0 11
34200: PUSH
34201: LD_VAR 0 12
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PPUSH
34210: CALL_OW 2
34214: ST_TO_ADDR
// end ;
34215: GO 34123
34217: POP
34218: POP
34219: GO 34103
34221: POP
34222: POP
// if not list then
34223: LD_VAR 0 13
34227: NOT
34228: IFFALSE 34232
// exit ;
34230: GO 34303
// for i in list do
34232: LD_ADDR_VAR 0 6
34236: PUSH
34237: LD_VAR 0 13
34241: PUSH
34242: FOR_IN
34243: IFFALSE 34301
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34245: LD_VAR 0 1
34249: PPUSH
34250: LD_STRING M
34252: PUSH
34253: LD_VAR 0 6
34257: PUSH
34258: LD_INT 1
34260: ARRAY
34261: PUSH
34262: LD_VAR 0 6
34266: PUSH
34267: LD_INT 2
34269: ARRAY
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: PUSH
34292: EMPTY
34293: LIST
34294: PPUSH
34295: CALL_OW 447
34299: GO 34242
34301: POP
34302: POP
// end ;
34303: LD_VAR 0 5
34307: RET
