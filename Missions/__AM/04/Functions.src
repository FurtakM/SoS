// Function by Nefarem
Export function RespawnInside(side, nation, building, skill, class, count);
var i, un;
begin
for i = 1 to count do
    begin
    uc_side = side;
    uc_nation = nation;

    hc_gallery = '';
    hc_name = '';
    PrepareHuman(false, class, skill);

    un = CreateHuman;
    PlaceHumanInUnit(un, building);
    end;
End;

// Function by Serpent
Export Function PrepareSolBun(skill, b);
var un, dir;
begin
uc_side := GetSide(b);
uc_nation := GetNation(b);

PrepareHuman(false, 1, skill);
un = CreateHuman;

dir := GetDir(b)  - 3;

if dir < 0 then
   dir := 6 + dir;

SetDir(un, dir);
PlaceHumanInUnit(un, b);
End;

// Function by Nefarem
// Function is used to call the dialogue spoken by random male or female characters
// Example: DialogRandom(FilterAllUnits([[f_side, 1], [f_type, unit_human]]), 'DAtt1-Sol1-1', 'DAtt1-FSol1-1');
Export function DialogRandom(characters, dialogMID, dialogFID);
var i, speaker;
begin
speaker := characters[rand(1, characters)];

if GetSex(speaker) = sex_male then
   Say(speaker, dialogMID)
else
   Say(speaker, dialogFID);

result := speaker;
End;

Export function PrepareDifficulty;
var tmp;
begin
if Difficulty = 1 then
   begin
   RuSoldMinLevel = 1;
   RuSoldMaxLevel = 2;
   end;

if Difficulty = 2 then
   begin
   RuSoldMinLevel = 2;
   RuSoldMaxLevel = 3;

   RemoveUnit(rubbrwr1);

   uc_nation = 3;
   uc_side = 3;

   bc_level = 5;
   bc_type = 32;
   tmp = CreateAndPlaceBuildingXYD(76, 91, 2);
   PlaceWeaponTurret(tmp, 43);

   SetTech(51, 3, state_enabled);
   end;

if Difficulty >= 3 then
   begin
   RuSoldMinLevel = Difficulty;
   RuSoldMaxLevel = 4;

   RemoveUnit(rubbrwr0);
   RemoveUnit(rubbrwr1);

   uc_nation = 3;
   uc_side = 3;

   bc_level = 5;
   bc_type = 32;
   tmp = CreateAndPlaceBuildingXYD(76, 91, 2);
   PlaceWeaponTurret(tmp, 44);

   tmp = CreateAndPlaceBuildingXYD(83, 84, 2);
   PlaceWeaponTurret(tmp, 43);

   SetTech(51, 3, state_enabled);
   SetTech(52, 3, state_enabled);
   PlaceWeaponTurret(rubbunk0, ru_gun);
   end;
End;

Export function EnergyDialog;
begin
if GetTech(46, 1) = state_enabled and GetTech(35, 1) = state_enabled then
   begin
   Say(JMM, 'D9c-JMM-1');
   energyVDialog = 1;
   end
else
   begin
   if GetTech(35, 1) = state_researched and energyVDialog = 0 then
      begin
      Say(JMM, 'D9c-JMM-1a');
      energyVDialog = 1;
      end;

   if GetTech(46, 1) = state_researched and energyVDialog = 0 then
      begin
      Say(JMM, 'D9c-JMM-1b');
      energyVDialog = 1;
      end;

   if GetTech(46, 1) = state_researched and GetTech(21, 1) = state_researched and energyVDialog = 0 then
      begin
      Say(JMM, 'D9c-JMM-1c');
      energyVDialog = 1;
      end;
   end;
End; 

 // Serpent functions
Export Function CutTreeInArea(bulldozer, area);
var i, list, tmp, hex;
begin
if not bulldozer or GetLives(bulldozer) < 250 or (HasTask(bulldozer) and GetFuel(bulldozer) > 20) then
   exit;

if GetFuel(bulldozer) < 20 and not GetTag(bulldozer) = 21 then
   begin
   ComStop(bulldozer);
   SetTag(bulldozer, 21);
   exit;
   end
    else
     if GetFuel(bulldozer) > 20 then
        SetTag(bulldozer, 0);

list := ListEnvironmentArea(area);
tmp := [];

for i = 1 to list do
    if IsEnvironmentDestroyable(list[i][1], list[i][2]) then
       begin
       tmp := Replace(tmp, tmp+1, [list[i][1], list[i][2]]);
       end;


ComStop(bulldozer);

hex := [GetX(bulldozer), GetY(bulldozer)];

for i = tmp downto 1 do
    begin
    hex := GetClosestPoint(hex[1], hex[2], tmp);
    AddComCutTreeOnHex(bulldozer, hex[1], hex[2]);
    tmp := Delete(tmp, hex[3]);
    end;
End;

Export Function AddComCutTreeOnHex(bulldozer, x, y);
begin
if IsEnvironment(x, y) and IsEnvironmentDestroyable(x, y) and ValidHex(x, y) and HexInfo(x, y) = -1 then
   AddComMoveXY(bulldozer, x, y);
End;

Export Function GetClosestPoint(x, y, list);
var i, dist, d, _x, _y, _i;
begin 
dist := 99999;

for i = 1 to list do
    begin
    d := GetDistXY(x, y, list[i][1], list[i][2]);

    if d = 0 then
       continue;

    if d < dist then
       begin
       _x := list[i][1];
       _y := list[i][2];
       _i := i;
       dist := d;
       end;
    end;

result := [_x, _y, _i, dist];
End;

Export function ResAllTechs(side, lab, nation);
var i;
begin
for i = 1 to 72 do
    if GetTech(i, side) = state_enabled and TechNationAvailable(i, nation) then
       AddComResearch(lab, i);
End;

Export function RepairBuilding(side, building, area);
var buildingsList, i, engineerOkInside, engineerOkOutside;
begin
engineerOkInside = UnitsInside(building);
engineerOkOutside = FilterUnitsInArea(area,[[f_side, side], [f_class, 2], [f_lives, 750], [f_not, [f_inside]]]);
buildingsList = FilterUnitsInArea(area, [[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

if not buildingsList and not FilterAllUnits([[f_side, side], [f_class, 2], [f_lives, 250]]) then
   exit;

if buildingsList and engineerOkInside then
   ComExitBuilding(UnitFilter(engineerOkInside, [f_class, 2]));

if buildingsList and engineerOkOutside then
   ComRepairBuilding(engineerOkOutside, buildingsList[1]);

if buildingsList = 0 and engineerOkOutside then
   ComEnterUnit(engineerOkOutside, building);
End;

Export function HealUnitInBase(side, healArea, baseArea, build);
var sciList, sciListOutside, damageUnits, unitsToHeal, tmp, rnd;
begin
sciList = FilterAllUnits([[f_side, side], [f_class, 4], [f_nation ,2], [f_lives, 251]]);
sciListOutside = FilterUnitsInArea(baseArea, [[f_side, side], [f_nation, 2], [f_class, 4], [f_ok]]);
damageUnits = FilterUnitsInArea(baseArea, [[f_side, side], [f_type, unit_human], [f_not, [f_class, 3]], [f_not, [f_lives, 750]]]);
unitsToHeal = FilterUnitsInArea(healArea,[[f_side, side], [f_type, unit_human], [f_not, [f_class, 3]], [f_not, [f_lives, 1000]]]);

if not damageUnits and not unitsToHeal and not sciList then
   exit;

if damageUnits and sciList then
   ComMoveToArea(damageUnits, healArea);

if unitsToHeal and sciList then
   ComExitBuilding(sciList);

if unitsToHeal and sciListOutside then
   ComHeal(sciListOutside, unitsToHeal[1]);

if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
   begin
   tmp = FilterAllUnits([[f_side, side], [f_type, unit_building], [f_btype, b_lab_full]]);
   rnd = rand(1, tmp);
   ComEnterUnit(UnitFilter(sciListOutside, [f_not, [f_hastask]]), tmp[rnd]);
   end;
End;

Export function BuildVehicle(side, fabric, vehCount, weaponTab, engine, control, chassis);
var i;
begin
if FilterAllUnits([[f_side, side], [f_type, unit_vehicle]]) <= vehCount then
   for i = 1 to vehCount do
       AddComConstruct(fabric, chassis, engine, control, weaponTab[Rand(1, weaponTab)]);
End;

Export function RespawnAttackInfantry(side, nation, soldierCount, medicCount, skil, spawnArea, healArea, targetSide, strategy);
var i, j,  un, damageUnit_list, medic_list, soldiersOK_list, enemyUnits, und, target1, target2;
begin
for i = 1 to medicCount do
    begin
    uc_side = side;
    uc_nation = nation;

    hc_name = '';
    hc_gallery = '';
    PrepareHuman(false, 4, skil);

    un = CreateHuman;
    PlaceUnitArea(un, spawnArea, false);
    end;

for i = 1 to soldierCount do
    begin
    uc_side = side;
    uc_nation = nation;

    hc_name = '';
    hc_gallery = '';
    PrepareHuman(false, 1, skil);

    un = CreateHuman;
    PlaceUnitArea(un, spawnArea, false);
    end;

soldiersOK_list =  FilterAllUnits([[f_side, side], [f_or,[f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]]]);
medic_list = FilterAllUnits([[f_side, side], [f_class, 4]]);

ComMoveToArea(medic_list, healArea);  

// strategy , 1 - flank and attack oil drilling mine,  2 - front attack, 
if strategy = 1 then
   begin
   for i in soldiersOK_list do
       begin
       AddComAgressiveMove(i, 91, 63);
       AddComAgressiveMove(i, 101, 53);
       AddComAgressiveMove(i, 75, 23);
       AddComAgressiveMove(i, 78, 8);
       end;

   wait(0$30);

   repeat
    wait(0$1);

    damageUnit_list = FilterAllUnits([[f_side, side], [f_and, [f_not, [f_lives, 550]], [f_lives, 250]]]);
    soldiersOK_list =  FilterAllUnits([[f_side, side], [f_class, 1], [f_lives, 1000]]);

    if medicCount then
       begin
       if damageUnit_list then
          begin
          ComMoveToArea(damageUnit_list, healArea);
          AddComHeal(medicCount, damageUnit_list[1]);
          end;
       end;

    for i in soldiersOK_list do
        begin
        target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
        target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or, [f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

        if GetDistUnits(i, target1) + 8 < GetDistUnits(i, target2) then
           ComAttackUnit(i, target1)
        else
           ComAttackUnit(i, target2);
        end;

   until not soldiersOK_list and not damageUnit_list;
   end;

if strategy = 2 then
   begin
   for i in soldiersOK_list do
       begin
       AddComAgressiveMove(i, 91, 63);
       AddComAgressiveMove(i, 75, 33);
       end;

   wait(0$10);

   repeat
    wait(0$3);

    damageUnit_list = FilterAllUnits([[f_side, side], [f_and, [f_not, [f_lives, 550]], [f_lives, 250]]]);
    soldiersOK_list =  FilterAllUnits([[f_side, side], [f_class, 1], [f_lives, 1000]]);

    if medicCount then
       begin
       if damageUnit_list then
          begin
          ComMoveToArea(damageUnit_list, healArea);
          AddComHeal(medicCount, damageUnit_list[1]);
          end;
       end;
                                        
    for i in soldiersOK_list do
        begin
        target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
        target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or, [f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

        if GetDistUnits(i, target1) + 8 < GetDistUnits(i, target2) then
           ComAttackUnit(i, target1)
        else
           ComAttackUnit(i, target2);
        end;

    until not soldiersOK_list and not damageUnit_list;
    end;

if medic_list then
   begin
   repeat
    medic_list = FilterAllUnits([[f_side, side], [f_class, 4], [f_ok]]);
    wait(0$1);

    for i in medic_list do
        if not HasTask(i) and not IsInArea(i, RussianAttack) then
           ComMoveToArea(i, RussianAttack)
         else if IsInArea(i, RussianAttack) then
           RemoveUnit(i);
   until not medic_list;
   end;
End;


